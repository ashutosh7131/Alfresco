import { Apollo } from 'apollo-angular';
import { ApolloLink, InMemoryCache, ApolloCache, } from '@apollo/client/core';
import { NgModule, InjectionToken, Inject, Optional } from '@angular/core';
import { ApolloTestingController } from './controller';
import { ApolloTestingBackend } from './backend';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from 'apollo-angular';
import * as ɵngcc2 from './backend';
import * as ɵngcc3 from '@apollo/client/core';
export const APOLLO_TESTING_CACHE = new InjectionToken('apollo-angular/testing cache');
export const APOLLO_TESTING_NAMED_CACHE = new InjectionToken('apollo-angular/testing named cache');
export const APOLLO_TESTING_CLIENTS = new InjectionToken('apollo-angular/testing named clients');
function addClient(name, op) {
    op.clientName = name;
    return op;
}
export class ApolloTestingModuleCore {
    constructor(apollo, backend, namedClients, cache, namedCaches) {
        function createOptions(name, c) {
            return {
                link: new ApolloLink((operation) => backend.handle(addClient(name, operation))),
                cache: c ||
                    new InMemoryCache({
                        addTypename: false,
                    }),
            };
        }
        apollo.create(createOptions('default', cache));
        if (namedClients && namedClients.length) {
            namedClients.forEach((name) => {
                const caches = namedCaches && typeof namedCaches === 'object' ? namedCaches : {};
                apollo.createNamed(name, createOptions(name, caches[name]));
            });
        }
    }
}
ApolloTestingModuleCore.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: ApolloTestingModuleCore });
ApolloTestingModuleCore.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function ApolloTestingModuleCore_Factory(t) { return new (t || ApolloTestingModuleCore)(ɵngcc0.ɵɵinject(ɵngcc1.Apollo), ɵngcc0.ɵɵinject(ɵngcc2.ApolloTestingBackend), ɵngcc0.ɵɵinject(APOLLO_TESTING_CLIENTS, 8), ɵngcc0.ɵɵinject(APOLLO_TESTING_CACHE, 8), ɵngcc0.ɵɵinject(APOLLO_TESTING_NAMED_CACHE, 8)); }, providers: [
        ApolloTestingBackend,
        { provide: ApolloTestingController, useExisting: ApolloTestingBackend },
    ] });
ApolloTestingModuleCore.ctorParameters = () => [
    { type: Apollo },
    { type: ApolloTestingBackend },
    { type: Array, decorators: [{ type: Optional }, { type: Inject, args: [APOLLO_TESTING_CLIENTS,] }] },
    { type: ApolloCache, decorators: [{ type: Optional }, { type: Inject, args: [APOLLO_TESTING_CACHE,] }] },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [APOLLO_TESTING_NAMED_CACHE,] }] }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ApolloTestingModuleCore, [{
        type: NgModule,
        args: [{
                providers: [
                    ApolloTestingBackend,
                    { provide: ApolloTestingController, useExisting: ApolloTestingBackend },
                ]
            }]
    }], function () { return [{ type: ɵngcc1.Apollo }, { type: ɵngcc2.ApolloTestingBackend }, { type: Array, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [APOLLO_TESTING_CLIENTS]
            }] }, { type: ɵngcc3.ApolloCache, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [APOLLO_TESTING_CACHE]
            }] }, { type: undefined, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [APOLLO_TESTING_NAMED_CACHE]
            }] }]; }, null); })();
export class ApolloTestingModule {
    static withClients(names) {
        return {
            ngModule: ApolloTestingModuleCore,
            providers: [
                {
                    provide: APOLLO_TESTING_CLIENTS,
                    useValue: names,
                },
            ],
        };
    }
}
ApolloTestingModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: ApolloTestingModule });
ApolloTestingModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function ApolloTestingModule_Factory(t) { return new (t || ApolloTestingModule)(); }, imports: [[ApolloTestingModuleCore]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ApolloTestingModule, { imports: [ApolloTestingModuleCore] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ApolloTestingModule, [{
        type: NgModule,
        args: [{
                imports: [ApolloTestingModuleCore]
            }]
    }], null, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kdWxlLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi93b3Jrc3BhY2VzL2Fwb2xsby1hbmd1bGFyL3BhY2thZ2VzL2Fwb2xsby1hbmd1bGFyL3Rlc3Rpbmcvc3JjL21vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUMsTUFBTSxFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFDdEMsT0FBTyxFQUNMLFVBQVUsRUFFVixhQUFhLEVBQ2IsV0FBVyxHQUNaLE1BQU0scUJBQXFCLENBQUM7QUFDN0IsT0FBTyxFQUFDLFFBQVEsRUFBRSxjQUFjLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUV6RSxPQUFPLEVBQUMsdUJBQXVCLEVBQUMsTUFBTSxjQUFjLENBQUM7QUFDckQsT0FBTyxFQUFDLG9CQUFvQixFQUFDLE1BQU0sV0FBVyxDQUFDOzs7OztBQUsvQyxNQUFNLENBQUMsTUFBTSxvQkFBb0IsR0FBRyxJQUFJLGNBQWMsQ0FDcEQsOEJBQThCLENBQy9CLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSwwQkFBMEIsR0FBRyxJQUFJLGNBQWMsQ0FDMUQsb0NBQW9DLENBQ3JDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxzQkFBc0IsR0FBRyxJQUFJLGNBQWMsQ0FDdEQsc0NBQXNDLENBQ3ZDLENBQUM7QUFFRixTQUFTLFNBQVMsQ0FBQyxJQUFZLEVBQUUsRUFBaUI7QUFBSSxJQUNuRCxFQUFnQixDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUM7QUFDdEMsSUFDRSxPQUFPLEVBQWUsQ0FBQztBQUN6QixDQUFDO0FBUUQsTUFBTSxPQUFPLHVCQUF1QjtBQUNwQyxJQUFFLFlBQ0UsTUFBYyxFQUNkLE9BQTZCLEVBRzdCLFlBQXVCLEVBR3ZCLEtBQXdCLEVBR3hCLFdBQWlCO0FBQUksUUFFckIsU0FBUyxhQUFhLENBQUMsSUFBWSxFQUFFLENBQTJCO0FBQ3BFLFlBQU0sT0FBTztBQUNiLGdCQUFRLElBQUksRUFBRSxJQUFJLFVBQVUsQ0FBQyxDQUFDLFNBQVMsRUFBRSxFQUFFLENBQ2pDLE9BQU8sQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRSxTQUFTLENBQUMsQ0FBQyxDQUMzQztBQUNULGdCQUFRLEtBQUssRUFDSCxDQUFDO0FBQ1gsb0JBQVUsSUFBSSxhQUFhLENBQUM7QUFDNUIsd0JBQVksV0FBVyxFQUFFLEtBQUs7QUFDOUIscUJBQVcsQ0FBQztBQUNaLGFBQU8sQ0FBQztBQUNSLFFBQUksQ0FBQztBQUNMLFFBQ0ksTUFBTSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsU0FBUyxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUM7QUFDbkQsUUFDSSxJQUFJLFlBQVksSUFBSSxZQUFZLENBQUMsTUFBTSxFQUFFO0FBQzdDLFlBQU0sWUFBWSxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFO0FBQ3BDLGdCQUFRLE1BQU0sTUFBTSxHQUNWLFdBQVcsSUFBSSxPQUFPLFdBQVcsS0FBSyxRQUFRLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO0FBQzVFLGdCQUNRLE1BQU0sQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFLGFBQWEsQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNwRSxZQUFNLENBQUMsQ0FBQyxDQUFDO0FBQ1QsU0FBSztBQUNMLElBQUUsQ0FBQztBQUNIO21EQTVDQyxRQUFRLFNBQUMsa0JBQ1I7SUFBUyxFQUFFLHNCQUNULG9CQUFvQixzQkFDcEIsRUFBQyxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsV0FBVyxFQUFFLG9CQUFvQixFQUFDLG1CQUN0RSxlQUNGOzs7U0FDSTtBQUFDO0FBRUwsWUF6Q08sTUFBTTtBQUFJLFlBVVYsb0JBQW9CO0FBQUksd0NBaUMzQixRQUFRLFlBQ1IsTUFBTSxTQUFDLHNCQUFzQjtBQUMzQixZQXhDTCxXQUFXLHVCQXlDUixRQUFRLFlBQ1IsTUFBTSxTQUFDLG9CQUFvQjtBQUN6Qiw0Q0FDRixRQUFRLFlBQ1IsTUFBTSxTQUFDLDBCQUEwQjtBQUNoQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O2tDQUFFO0FBK0JSLE1BQU0sT0FBTyxtQkFBbUI7QUFDaEMsSUFBRSxNQUFNLENBQUMsV0FBVyxDQUFDLEtBQWU7QUFDcEMsUUFBSSxPQUFPO0FBQ1gsWUFBTSxRQUFRLEVBQUUsdUJBQXVCO0FBQ3ZDLFlBQU0sU0FBUyxFQUFFO0FBQ2pCLGdCQUFRO0FBQ1Isb0JBQVUsT0FBTyxFQUFFLHNCQUFzQjtBQUN6QyxvQkFBVSxRQUFRLEVBQUUsS0FBSztBQUN6QixpQkFBUztBQUNULGFBQU87QUFDUCxTQUFLLENBQUM7QUFDTixJQUFFLENBQUM7QUFDSDsrQ0FmQyxRQUFRLFNBQUMsa0JBQ1I7TUFBTyxFQUFFLENBQUMsdUJBQXVCLENBQUMsZUFDbkM7Ozs7Ozs7MEJBQ0k7QUFBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7QXBvbGxvfSBmcm9tICdhcG9sbG8tYW5ndWxhcic7XG5pbXBvcnQge1xuICBBcG9sbG9MaW5rLFxuICBPcGVyYXRpb24gYXMgTGlua09wZXJhdGlvbixcbiAgSW5NZW1vcnlDYWNoZSxcbiAgQXBvbGxvQ2FjaGUsXG59IGZyb20gJ0BhcG9sbG8vY2xpZW50L2NvcmUnO1xuaW1wb3J0IHtOZ01vZHVsZSwgSW5qZWN0aW9uVG9rZW4sIEluamVjdCwgT3B0aW9uYWx9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQge0Fwb2xsb1Rlc3RpbmdDb250cm9sbGVyfSBmcm9tICcuL2NvbnRyb2xsZXInO1xuaW1wb3J0IHtBcG9sbG9UZXN0aW5nQmFja2VuZH0gZnJvbSAnLi9iYWNrZW5kJztcbmltcG9ydCB7T3BlcmF0aW9ufSBmcm9tICcuL29wZXJhdGlvbic7XG5cbmV4cG9ydCB0eXBlIE5hbWVkQ2FjaGVzID0gUmVjb3JkPHN0cmluZywgQXBvbGxvQ2FjaGU8YW55PiB8IHVuZGVmaW5lZCB8IG51bGw+O1xuXG5leHBvcnQgY29uc3QgQVBPTExPX1RFU1RJTkdfQ0FDSEUgPSBuZXcgSW5qZWN0aW9uVG9rZW48QXBvbGxvQ2FjaGU8YW55Pj4oXG4gICdhcG9sbG8tYW5ndWxhci90ZXN0aW5nIGNhY2hlJyxcbik7XG5cbmV4cG9ydCBjb25zdCBBUE9MTE9fVEVTVElOR19OQU1FRF9DQUNIRSA9IG5ldyBJbmplY3Rpb25Ub2tlbjxOYW1lZENhY2hlcz4oXG4gICdhcG9sbG8tYW5ndWxhci90ZXN0aW5nIG5hbWVkIGNhY2hlJyxcbik7XG5cbmV4cG9ydCBjb25zdCBBUE9MTE9fVEVTVElOR19DTElFTlRTID0gbmV3IEluamVjdGlvblRva2VuPHN0cmluZ1tdPihcbiAgJ2Fwb2xsby1hbmd1bGFyL3Rlc3RpbmcgbmFtZWQgY2xpZW50cycsXG4pO1xuXG5mdW5jdGlvbiBhZGRDbGllbnQobmFtZTogc3RyaW5nLCBvcDogTGlua09wZXJhdGlvbik6IE9wZXJhdGlvbiB7XG4gIChvcCBhcyBPcGVyYXRpb24pLmNsaWVudE5hbWUgPSBuYW1lO1xuXG4gIHJldHVybiBvcCBhcyBPcGVyYXRpb247XG59XG5cbkBOZ01vZHVsZSh7XG4gIHByb3ZpZGVyczogW1xuICAgIEFwb2xsb1Rlc3RpbmdCYWNrZW5kLFxuICAgIHtwcm92aWRlOiBBcG9sbG9UZXN0aW5nQ29udHJvbGxlciwgdXNlRXhpc3Rpbmc6IEFwb2xsb1Rlc3RpbmdCYWNrZW5kfSxcbiAgXSxcbn0pXG5leHBvcnQgY2xhc3MgQXBvbGxvVGVzdGluZ01vZHVsZUNvcmUge1xuICBjb25zdHJ1Y3RvcihcbiAgICBhcG9sbG86IEFwb2xsbyxcbiAgICBiYWNrZW5kOiBBcG9sbG9UZXN0aW5nQmFja2VuZCxcbiAgICBAT3B0aW9uYWwoKVxuICAgIEBJbmplY3QoQVBPTExPX1RFU1RJTkdfQ0xJRU5UUylcbiAgICBuYW1lZENsaWVudHM/OiBzdHJpbmdbXSxcbiAgICBAT3B0aW9uYWwoKVxuICAgIEBJbmplY3QoQVBPTExPX1RFU1RJTkdfQ0FDSEUpXG4gICAgY2FjaGU/OiBBcG9sbG9DYWNoZTxhbnk+LFxuICAgIEBPcHRpb25hbCgpXG4gICAgQEluamVjdChBUE9MTE9fVEVTVElOR19OQU1FRF9DQUNIRSlcbiAgICBuYW1lZENhY2hlcz86IGFueSwgLy8gRklYOiB1c2luZyBOYW1lZENhY2hlcyBoZXJlIG1ha2VzIG5nYyBmYWlsXG4gICkge1xuICAgIGZ1bmN0aW9uIGNyZWF0ZU9wdGlvbnMobmFtZTogc3RyaW5nLCBjPzogQXBvbGxvQ2FjaGU8YW55PiB8IG51bGwpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGxpbms6IG5ldyBBcG9sbG9MaW5rKChvcGVyYXRpb24pID0+XG4gICAgICAgICAgYmFja2VuZC5oYW5kbGUoYWRkQ2xpZW50KG5hbWUsIG9wZXJhdGlvbikpLFxuICAgICAgICApLFxuICAgICAgICBjYWNoZTpcbiAgICAgICAgICBjIHx8XG4gICAgICAgICAgbmV3IEluTWVtb3J5Q2FjaGUoe1xuICAgICAgICAgICAgYWRkVHlwZW5hbWU6IGZhbHNlLFxuICAgICAgICAgIH0pLFxuICAgICAgfTtcbiAgICB9XG5cbiAgICBhcG9sbG8uY3JlYXRlKGNyZWF0ZU9wdGlvbnMoJ2RlZmF1bHQnLCBjYWNoZSkpO1xuXG4gICAgaWYgKG5hbWVkQ2xpZW50cyAmJiBuYW1lZENsaWVudHMubGVuZ3RoKSB7XG4gICAgICBuYW1lZENsaWVudHMuZm9yRWFjaCgobmFtZSkgPT4ge1xuICAgICAgICBjb25zdCBjYWNoZXMgPVxuICAgICAgICAgIG5hbWVkQ2FjaGVzICYmIHR5cGVvZiBuYW1lZENhY2hlcyA9PT0gJ29iamVjdCcgPyBuYW1lZENhY2hlcyA6IHt9O1xuXG4gICAgICAgIGFwb2xsby5jcmVhdGVOYW1lZChuYW1lLCBjcmVhdGVPcHRpb25zKG5hbWUsIGNhY2hlc1tuYW1lXSkpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG59XG5cbkBOZ01vZHVsZSh7XG4gIGltcG9ydHM6IFtBcG9sbG9UZXN0aW5nTW9kdWxlQ29yZV0sXG59KVxuZXhwb3J0IGNsYXNzIEFwb2xsb1Rlc3RpbmdNb2R1bGUge1xuICBzdGF0aWMgd2l0aENsaWVudHMobmFtZXM6IHN0cmluZ1tdKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5nTW9kdWxlOiBBcG9sbG9UZXN0aW5nTW9kdWxlQ29yZSxcbiAgICAgIHByb3ZpZGVyczogW1xuICAgICAgICB7XG4gICAgICAgICAgcHJvdmlkZTogQVBPTExPX1RFU1RJTkdfQ0xJRU5UUyxcbiAgICAgICAgICB1c2VWYWx1ZTogbmFtZXMsXG4gICAgICAgIH0sXG4gICAgICBdLFxuICAgIH07XG4gIH1cbn1cbiJdfQ==