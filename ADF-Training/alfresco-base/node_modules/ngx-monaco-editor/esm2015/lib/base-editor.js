/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ElementRef, EventEmitter, Output, ViewChild } from '@angular/core';
/** @type {?} */
import * as ɵngcc0 from '@angular/core';

const _c0 = ["editorContainer"];
let loadedMonaco = false;
/** @type {?} */
let loadPromise;
/**
 * @abstract
 */
export class BaseEditor {
    /**
     * @param {?} config
     */
    constructor(config) {
        this.config = config;
        this.onInit = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        if (loadedMonaco) {
            // Wait until monaco editor is available
            loadPromise.then((/**
             * @return {?}
             */
            () => {
                this.initMonaco(this._options);
            }));
        }
        else {
            loadedMonaco = true;
            loadPromise = new Promise((/**
             * @param {?} resolve
             * @return {?}
             */
            (resolve) => {
                /** @type {?} */
                const baseUrl = this.config.baseUrl || './assets';
                if (typeof (((/** @type {?} */ (window))).monaco) === 'object') {
                    resolve();
                    return;
                }
                /** @type {?} */
                const onGotAmdLoader = (/**
                 * @return {?}
                 */
                () => {
                    // Load monaco
                    ((/** @type {?} */ (window))).require.config({ paths: { 'vs': `${baseUrl}/monaco/vs` } });
                    ((/** @type {?} */ (window))).require(['vs/editor/editor.main'], (/**
                     * @return {?}
                     */
                    () => {
                        if (typeof this.config.onMonacoLoad === 'function') {
                            this.config.onMonacoLoad();
                        }
                        this.initMonaco(this._options);
                        resolve();
                    }));
                });
                // Load AMD loader if necessary
                if (!((/** @type {?} */ (window))).require) {
                    /** @type {?} */
                    const loaderScript = document.createElement('script');
                    loaderScript.type = 'text/javascript';
                    loaderScript.src = `${baseUrl}/monaco/vs/loader.js`;
                    loaderScript.addEventListener('load', onGotAmdLoader);
                    document.body.appendChild(loaderScript);
                }
                else {
                    onGotAmdLoader();
                }
            }));
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this._windowResizeSubscription) {
            this._windowResizeSubscription.unsubscribe();
        }
        if (this._editor) {
            this._editor.dispose();
            this._editor = undefined;
        }
    }
}
BaseEditor.ɵfac = function BaseEditor_Factory(t) { ɵngcc0.ɵɵinvalidFactory(); };
BaseEditor.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: BaseEditor, viewQuery: function BaseEditor_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵstaticViewQuery(_c0, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._editorContainer = _t.first);
    } }, outputs: { onInit: "onInit" } });
BaseEditor.propDecorators = {
    _editorContainer: [{ type: ViewChild, args: ['editorContainer', { static: true },] }],
    onInit: [{ type: Output }]
};

if (false) {
    /** @type {?} */
    BaseEditor.prototype._editorContainer;
    /** @type {?} */
    BaseEditor.prototype.onInit;
    /**
     * @type {?}
     * @protected
     */
    BaseEditor.prototype._editor;
    /**
     * @type {?}
     * @protected
     */
    BaseEditor.prototype._options;
    /**
     * @type {?}
     * @protected
     */
    BaseEditor.prototype._windowResizeSubscription;
    /**
     * @type {?}
     * @protected
     */
    BaseEditor.prototype.config;
    /**
     * @abstract
     * @protected
     * @param {?} options
     * @return {?}
     */
    BaseEditor.prototype.initMonaco = function (options) { };
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS1lZGl0b3IuanMiLCJzb3VyY2VzIjpbIm5neC1tb25hY28tZWRpdG9yL2xpYi9iYXNlLWVkaXRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFpQixVQUFVLEVBQUUsWUFBWSxFQUFvQixNQUFNLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzdHOzs7O0FBQWlCLElBR2IsWUFBWSxHQUFHLEtBQUs7QUFDeEI7QUFBaUIsSUFBYixXQUEwQjtBQUM5QjtBQUFJO0FBQWE7QUFFakIsTUFBTSxPQUFnQixVQUFVO0FBQUc7QUFBUTtBQUF5QjtBQUMvRCxJQU1ILFlBQXNCLE1BQTZCO0FBQUksUUFBakMsV0FBTSxHQUFOLE1BQU0sQ0FBdUI7QUFBQyxRQUwxQyxXQUFNLEdBQUcsSUFBSSxZQUFZLEVBQU8sQ0FBQztBQUM3QyxJQUl3RCxDQUFDO0FBQ3pEO0FBQ087QUFBbUI7QUFDcEIsSUFESixlQUFlO0FBQUssUUFDbEIsSUFBSSxZQUFZLEVBQUU7QUFDdEIsWUFBTSx3Q0FBd0M7QUFDOUMsWUFBTSxXQUFXLENBQUMsSUFBSTtBQUFNO0FBQ0o7QUFDeEIsWUFGdUIsR0FBRyxFQUFFO0FBQzVCLGdCQUFRLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQ3ZDLFlBQU0sQ0FBQyxFQUFDLENBQUM7QUFDVCxTQUFLO0FBQUMsYUFBSztBQUNYLFlBQU0sWUFBWSxHQUFHLElBQUksQ0FBQztBQUMxQixZQUFNLFdBQVcsR0FBRyxJQUFJLE9BQU87QUFBTTtBQUN4QjtBQUEyQjtBQUFnQixZQURsQixDQUFDLE9BQVksRUFBRSxFQUFFO0FBQ3ZEO0FBQWlDLHNCQUFuQixPQUFPLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLElBQUksVUFBVTtBQUN6RCxnQkFBUSxJQUFJLE9BQU8sQ0FBQyxDQUFDLG1CQUFLLE1BQU0sRUFBQSxDQUFDLENBQUMsTUFBTSxDQUFDLEtBQUssUUFB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ZWYsIEV2ZW50RW1pdHRlciwgSW5wdXQsIE9uRGVzdHJveSwgT3V0cHV0LCBWaWV3Q2hpbGQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFN1YnNjcmlwdGlvbiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgTmd4TW9uYWNvRWRpdG9yQ29uZmlnIH0gZnJvbSAnLi9jb25maWcnO1xuXG5sZXQgbG9hZGVkTW9uYWNvID0gZmFsc2U7XG5sZXQgbG9hZFByb21pc2U6IFByb21pc2U8dm9pZD47XG5kZWNsYXJlIGNvbnN0IHJlcXVpcmU6IGFueTtcblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEJhc2VFZGl0b3IgaW1wbGVtZW50cyBBZnRlclZpZXdJbml0LCBPbkRlc3Ryb3kge1xuICBAVmlld0NoaWxkKCdlZGl0b3JDb250YWluZXInLCB7IHN0YXRpYzogdHJ1ZSB9KSBfZWRpdG9yQ29udGFpbmVyOiBFbGVtZW50UmVmO1xuICBAT3V0cHV0KCkgb25Jbml0ID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XG4gIHByb3RlY3RlZCBfZWRpdG9yOiBhbnk7XG4gIHByb3RlY3RlZCBfb3B0aW9uczogYW55O1xuICBwcm90ZWN0ZWQgX3dpbmRvd1Jlc2l6ZVN1YnNjcmlwdGlvbjogU3Vic2NyaXB0aW9uO1xuXG4gIGNvbnN0cnVjdG9yKHByb3RlY3RlZCBjb25maWc6IE5neE1vbmFjb0VkaXRvckNvbmZpZykge31cblxuICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZCB7XG4gICAgaWYgKGxvYWRlZE1vbmFjbykge1xuICAgICAgLy8gV2FpdCB1bnRpbCBtb25hY28gZWRpdG9yIGlzIGF2YWlsYWJsZVxuICAgICAgbG9hZFByb21pc2UudGhlbigoKSA9PiB7XG4gICAgICAgIHRoaXMuaW5pdE1vbmFjbyh0aGlzLl9vcHRpb25zKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBsb2FkZWRNb25hY28gPSB0cnVlO1xuICAgICAgbG9hZFByb21pc2UgPSBuZXcgUHJvbWlzZTx2b2lkPigocmVzb2x2ZTogYW55KSA9PiB7XG4gICAgICAgIGNvbnN0IGJhc2VVcmwgPSB0aGlzLmNvbmZpZy5iYXNlVXJsIHx8ICcuL2Fzc2V0cyc7XG4gICAgICAgIGlmICh0eXBlb2YgKCg8YW55PndpbmRvdykubW9uYWNvKSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG9uR290QW1kTG9hZGVyOiBhbnkgPSAoKSA9PiB7XG4gICAgICAgICAgLy8gTG9hZCBtb25hY29cbiAgICAgICAgICAoPGFueT53aW5kb3cpLnJlcXVpcmUuY29uZmlnKHsgcGF0aHM6IHsgJ3ZzJzogYCR7YmFzZVVybH0vbW9uYWNvL3ZzYCB9IH0pO1xuICAgICAgICAgICg8YW55PndpbmRvdykucmVxdWlyZShbJ3ZzL2VkaXRvci9lZGl0b3IubWFpbiddLCAoKSA9PiB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHRoaXMuY29uZmlnLm9uTW9uYWNvTG9hZCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICB0aGlzLmNvbmZpZy5vbk1vbmFjb0xvYWQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuaW5pdE1vbmFjbyh0aGlzLl9vcHRpb25zKTtcbiAgICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfTtcblxuICAgICAgICAvLyBMb2FkIEFNRCBsb2FkZXIgaWYgbmVjZXNzYXJ5XG4gICAgICAgIGlmICghKDxhbnk+d2luZG93KS5yZXF1aXJlKSB7XG4gICAgICAgICAgY29uc3QgbG9hZGVyU2NyaXB0OiBIVE1MU2NyaXB0RWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpO1xuICAgICAgICAgIGxvYWRlclNjcmlwdC50eXBlID0gJ3RleHQvamF2YXNjcmlwdCc7XG4gICAgICAgICAgbG9hZGVyU2NyaXB0LnNyYyA9IGAke2Jhc2VVcmx9L21vbmFjby92cy9sb2FkZXIuanNgO1xuICAgICAgICAgIGxvYWRlclNjcmlwdC5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgb25Hb3RBbWRMb2FkZXIpO1xuICAgICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQobG9hZGVyU2NyaXB0KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBvbkdvdEFtZExvYWRlcigpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBwcm90ZWN0ZWQgYWJzdHJhY3QgaW5pdE1vbmFjbyhvcHRpb25zOiBhbnkpOiB2b2lkO1xuXG4gIG5nT25EZXN0cm95KCkge1xuICAgIGlmICh0aGlzLl93aW5kb3dSZXNpemVTdWJzY3JpcHRpb24pIHtcbiAgICAgIHRoaXMuX3dpbmRvd1Jlc2l6ZVN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgIH1cbiAgICBpZiAodGhpcy5fZWRpdG9yKSB7XG4gICAgICB0aGlzLl9lZGl0b3IuZGlzcG9zZSgpO1xuICAgICAgdGhpcy5fZWRpdG9yID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgfVxufVxuIl19