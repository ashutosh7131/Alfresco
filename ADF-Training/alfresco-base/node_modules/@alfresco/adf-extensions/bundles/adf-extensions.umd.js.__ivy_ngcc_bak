(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/common/http'), require('@angular/core'), require('rxjs')) :
    typeof define === 'function' && define.amd ? define('@alfresco/adf-extensions', ['exports', '@angular/common/http', '@angular/core', 'rxjs'], factory) :
    (global = global || self, factory((global.alfresco = global.alfresco || {}, global.alfresco['adf-extensions'] = {}), global.ng.common.http, global.ng.core, global.rxjs));
}(this, (function (exports, i1, i0, rxjs) { 'use strict';

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    (function (ContentActionType) {
        ContentActionType["default"] = "default";
        ContentActionType["button"] = "button";
        ContentActionType["separator"] = "separator";
        ContentActionType["menu"] = "menu";
        ContentActionType["custom"] = "custom";
    })(exports.ContentActionType || (exports.ContentActionType = {}));

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function getValue(target, key) {
        if (!target) {
            return undefined;
        }
        var keys = key.split('.');
        key = '';
        do {
            key += keys.shift();
            var value = target[key];
            if (value !== undefined &&
                (typeof value === 'object' || !keys.length)) {
                target = value;
                key = '';
            }
            else if (!keys.length) {
                target = undefined;
            }
            else {
                key += '.';
            }
        } while (keys.length);
        return target;
    }
    function filterEnabled(entry) {
        return !entry.disabled;
    }
    function sortByOrder(a, b) {
        var left = a.order === undefined ? Number.MAX_SAFE_INTEGER : a.order;
        var right = b.order === undefined ? Number.MAX_SAFE_INTEGER : b.order;
        return left - right;
    }
    function reduceSeparators(acc, el, i, arr) {
        if (i === 0) {
            if (arr[i].type === exports.ContentActionType.separator) {
                return acc;
            }
        }
        if (i > 0) {
            var prev = arr[i - 1];
            if (prev.type === exports.ContentActionType.separator &&
                el.type === exports.ContentActionType.separator) {
                return acc;
            }
            if (i === arr.length - 1) {
                if (el.type === exports.ContentActionType.separator) {
                    return acc;
                }
            }
        }
        return acc.concat(el);
    }
    function reduceEmptyMenus(acc, el) {
        if (el.type === exports.ContentActionType.menu) {
            if ((el.children || []).length === 0) {
                return acc;
            }
        }
        return acc.concat(el);
    }
    function mergeObjects() {
        var objects = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            objects[_i] = arguments[_i];
        }
        var result = {};
        objects.forEach(function (source) {
            Object.keys(source).forEach(function (prop) {
                var replace = false;
                if (prop.endsWith('.$replace')) {
                    replace = true;
                    prop = prop.replace('.$replace', '');
                }
                if (!prop.startsWith('$')) {
                    if (replace) {
                        result[prop] = source[prop + ".$replace"];
                    }
                    else if (prop in result && Array.isArray(result[prop])) {
                        result[prop] = mergeArrays(result[prop], source[prop]);
                    }
                    else if (prop in result && typeof result[prop] === 'object') {
                        result[prop] = mergeObjects(result[prop], source[prop]);
                    }
                    else {
                        result[prop] = source[prop];
                    }
                }
            });
        });
        return result;
    }
    function mergeArrays(left, right) {
        var result = [];
        var map = {};
        (left || []).forEach(function (entry) {
            var element = entry;
            if (element && element.hasOwnProperty('id')) {
                map[element.id] = element;
            }
            else {
                result.push(element);
            }
        });
        (right || []).forEach(function (entry) {
            var element = entry;
            if (element && element.hasOwnProperty('id') && map[element.id]) {
                var merged = mergeObjects(map[element.id], element);
                map[element.id] = merged;
            }
            else {
                result.push(element);
            }
        });
        return Object.keys(map).map(function (key) { return map[key]; }).concat(result);
    }

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var RuleRef = /** @class */ (function () {
        function RuleRef() {
        }
        return RuleRef;
    }());

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, o) {
        for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
                __createBinding(o, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    /** @deprecated */
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    /** @deprecated */
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    function __spreadArray(to, from, pack) {
        if (pack || arguments.length === 2)
            for (var i = 0, l = from.length, ar; i < l; i++) {
                if (ar || !(i in from)) {
                    if (!ar)
                        ar = Array.prototype.slice.call(from, 0, i);
                    ar[i] = from[i];
                }
            }
        return to.concat(ar || from);
    }
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, state, kind, f) {
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    }
    function __classPrivateFieldSet(receiver, state, value, kind, f) {
        if (kind === "m")
            throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
    }

    var ExtensionLoaderService = /** @class */ (function () {
        function ExtensionLoaderService(http) {
            this.http = http;
        }
        ExtensionLoaderService.prototype.load = function (configPath, pluginsPath, extensions) {
            var _this = this;
            return new Promise(function (resolve) {
                _this.loadConfig(configPath, 0).then(function (result) {
                    if (result) {
                        var config_1 = result.config;
                        var override = sessionStorage.getItem('app.extension.config');
                        if (override) {
                            config_1 = JSON.parse(override);
                        }
                        if (!config_1.$references || !config_1.$references.length) {
                            config_1.$references = _this.filterIgnoredExtensions(extensions || [], config_1.$ignoreReferenceList);
                        }
                        else {
                            config_1.$references = _this.filterIgnoredExtensions(config_1.$references, config_1.$ignoreReferenceList);
                        }
                        if (config_1.$references && config_1.$references.length > 0) {
                            var plugins = config_1.$references.map(function (name, idx) { return _this.loadConfig(pluginsPath + "/" + name, idx); });
                            Promise.all(plugins).then(function (results) {
                                var configs = results
                                    .filter(function (entry) { return entry; })
                                    .sort(sortByOrder)
                                    .map(function (entry) { return entry.config; });
                                if (configs.length > 0) {
                                    config_1 = mergeObjects.apply(void 0, __spread([config_1], configs));
                                }
                                config_1 = Object.assign(Object.assign(Object.assign({}, config_1), _this.getMetadata(result.config)), { $references: configs.map(function (ext) { return _this.getMetadata(ext); }) });
                                resolve(config_1);
                            });
                        }
                        else {
                            resolve(config_1);
                        }
                    }
                });
            });
        };
        ExtensionLoaderService.prototype.getMetadata = function (config) {
            var result = {};
            Object
                .keys(config)
                .filter(function (key) { return key.startsWith('$'); })
                .forEach(function (key) {
                result[key] = config[key];
            });
            return result;
        };
        ExtensionLoaderService.prototype.loadConfig = function (url, order) {
            var _this = this;
            return new Promise(function (resolve) {
                _this.http.get(url).subscribe(function (config) {
                    resolve({
                        order: order,
                        config: config
                    });
                }, function () {
                    resolve(null);
                });
            });
        };
        ExtensionLoaderService.prototype.getElements = function (config, key, fallback) {
            if (fallback === void 0) { fallback = []; }
            var values = getValue(config, key) || fallback || [];
            return values.filter(filterEnabled).sort(sortByOrder);
        };
        ExtensionLoaderService.prototype.getContentActions = function (config, key) {
            return this.getElements(config, key).map(this.setActionDefaults);
        };
        ExtensionLoaderService.prototype.getRules = function (config) {
            if (config && config.rules) {
                return config.rules;
            }
            return [];
        };
        ExtensionLoaderService.prototype.getRoutes = function (config) {
            if (config) {
                return config.routes || [];
            }
            return [];
        };
        ExtensionLoaderService.prototype.getActions = function (config) {
            if (config) {
                return config.actions || [];
            }
            return [];
        };
        ExtensionLoaderService.prototype.getFeatures = function (config) {
            if (config) {
                return config.features || [];
            }
            return [];
        };
        ExtensionLoaderService.prototype.setActionDefaults = function (action) {
            if (action) {
                action.type = action.type || exports.ContentActionType.default;
                action.icon = action.icon || 'extension';
            }
            return action;
        };
        ExtensionLoaderService.prototype.filterIgnoredExtensions = function (extensions, ignoreReferenceList) {
            if (!ignoreReferenceList || !ignoreReferenceList.length) {
                return extensions;
            }
            return extensions.map(function (file) { return file.match('(?!.*\/).+')[0]; }).filter(function (fileName) { return !ignoreReferenceList.includes(fileName); });
        };
        return ExtensionLoaderService;
    }());
    ExtensionLoaderService.ɵprov = i0.ɵɵdefineInjectable({ factory: function ExtensionLoaderService_Factory() { return new ExtensionLoaderService(i0.ɵɵinject(i1.HttpClient)); }, token: ExtensionLoaderService, providedIn: "root" });
    ExtensionLoaderService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    ExtensionLoaderService.ctorParameters = function () { return [
        { type: i1.HttpClient }
    ]; };

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function not(context) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        if (!args || args.length === 0) {
            return false;
        }
        return args
            .every(function (arg) {
            var evaluator = context.getEvaluator(arg.value);
            if (!evaluator) {
                console.warn('evaluator not found: ' + arg.value);
                return false;
            }
            return !evaluator.apply(void 0, __spread([context], (arg.parameters || [])));
        });
    }
    function every(context) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        if (!args || args.length === 0) {
            return false;
        }
        return args
            .every(function (arg) {
            var evaluator = context.getEvaluator(arg.value);
            if (!evaluator) {
                console.warn('evaluator not found: ' + arg.value);
                return false;
            }
            return evaluator.apply(void 0, __spread([context], (arg.parameters || [])));
        });
    }
    function some(context) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        if (!args || args.length === 0) {
            return false;
        }
        return args
            .some(function (arg) {
            var evaluator = context.getEvaluator(arg.value);
            if (!evaluator) {
                console.warn('evaluator not found: ' + arg.value);
                return false;
            }
            return evaluator.apply(void 0, __spread([context], (arg.parameters || [])));
        });
    }

    var ComponentRegisterService = /** @class */ (function () {
        function ComponentRegisterService() {
            this.components = {};
        }
        ComponentRegisterService.prototype.setComponents = function (values) {
            if (values) {
                this.components = Object.assign({}, this.components, values);
            }
        };
        ComponentRegisterService.prototype.getComponentById = function (id) {
            return this.components[id];
        };
        ComponentRegisterService.prototype.hasComponentById = function (id) {
            return !!this.getComponentById(id);
        };
        return ComponentRegisterService;
    }());
    ComponentRegisterService.ɵprov = i0.ɵɵdefineInjectable({ factory: function ComponentRegisterService_Factory() { return new ComponentRegisterService(); }, token: ComponentRegisterService, providedIn: "root" });
    ComponentRegisterService.decorators = [
        { type: i0.Injectable, args: [{ providedIn: 'root' },] }
    ];

    var RuleService = /** @class */ (function () {
        function RuleService(loader) {
            this.loader = loader;
            this.context = null;
            this.rules = [];
            this.evaluators = {};
        }
        RuleService.prototype.setup = function (config) {
            this.rules = this.loader.getRules(config);
        };
        RuleService.prototype.setEvaluators = function (values) {
            if (values) {
                this.evaluators = Object.assign({}, this.evaluators, values);
            }
        };
        RuleService.prototype.getRuleById = function (id) {
            return this.rules.find(function (ref) { return ref.id === id; });
        };
        RuleService.prototype.getEvaluator = function (key) {
            if (key && key.startsWith('!')) {
                var fn_1 = this.evaluators[key.substring(1)];
                return function (context) {
                    var args = [];
                    for (var _i = 1; _i < arguments.length; _i++) {
                        args[_i - 1] = arguments[_i];
                    }
                    return !fn_1.apply(void 0, __spread([context], args));
                };
            }
            return this.evaluators[key];
        };
        RuleService.prototype.evaluateRule = function (ruleId, context) {
            var ruleRef = this.getRuleById(ruleId);
            context = context || this.context;
            if (ruleRef) {
                var evaluator = this.getEvaluator(ruleRef.type);
                if (evaluator) {
                    return evaluator.apply(void 0, __spread([context], ruleRef.parameters));
                }
            }
            else {
                var evaluator = this.getEvaluator(ruleId);
                if (evaluator) {
                    return evaluator(context);
                }
            }
            return false;
        };
        return RuleService;
    }());
    RuleService.ɵprov = i0.ɵɵdefineInjectable({ factory: function RuleService_Factory() { return new RuleService(i0.ɵɵinject(ExtensionLoaderService)); }, token: RuleService, providedIn: "root" });
    RuleService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    RuleService.ctorParameters = function () { return [
        { type: ExtensionLoaderService }
    ]; };

    function extensionJsonsFactory() {
        return [];
    }
    var EXTENSION_JSONS = new i0.InjectionToken('extension-jsons', {
        providedIn: 'root',
        factory: extensionJsonsFactory
    });
    function provideExtensionConfig(jsons) {
        return {
            provide: EXTENSION_JSONS,
            useValue: jsons,
            multi: true
        };
    }
    var ExtensionService = /** @class */ (function () {
        function ExtensionService(loader, componentRegister, ruleService, extensionJsons) {
            this.loader = loader;
            this.componentRegister = componentRegister;
            this.ruleService = ruleService;
            this.extensionJsons = extensionJsons;
            this.config = null;
            this.configPath = 'assets/app.extensions.json';
            this.pluginsPath = 'assets/plugins';
            this.routes = [];
            this.actions = [];
            this.features = [];
            this.authGuards = {};
            this.onSetup$ = new rxjs.BehaviorSubject(this.config);
            this.setup$ = this.onSetup$.asObservable();
        }
        ExtensionService.prototype.load = function () {
            return __awaiter(this, void 0, void 0, function () {
                var config;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.loader.load(this.configPath, this.pluginsPath, this.extensionJsons.flat())];
                        case 1:
                            config = _a.sent();
                            this.setup(config);
                            return [2 /*return*/, config];
                    }
                });
            });
        };
        ExtensionService.prototype.setup = function (config) {
            if (!config) {
                console.warn('Extension configuration not found');
                return;
            }
            this.config = config;
            this.setEvaluators({
                'core.every': every,
                'core.some': some,
                'core.not': not
            });
            this.actions = this.loader.getActions(config);
            this.routes = this.loader.getRoutes(config);
            this.features = this.loader.getFeatures(config);
            this.ruleService.setup(config);
            this.onSetup$.next(config);
        };
        ExtensionService.prototype.getFeature = function (key) {
            var properties = Array.isArray(key) ? [key] : key.split('.');
            return properties.reduce(function (prev, curr) { return prev && prev[curr]; }, this.features) || [];
        };
        ExtensionService.prototype.getElements = function (key, fallback) {
            if (fallback === void 0) { fallback = []; }
            return this.loader.getElements(this.config, key, fallback);
        };
        ExtensionService.prototype.setEvaluators = function (values) {
            this.ruleService.setEvaluators(values);
        };
        ExtensionService.prototype.setAuthGuards = function (values) {
            if (values) {
                this.authGuards = Object.assign({}, this.authGuards, values);
            }
        };
        ExtensionService.prototype.setComponents = function (values) {
            this.componentRegister.setComponents(values);
        };
        ExtensionService.prototype.getRouteById = function (id) {
            return this.routes.find(function (route) { return route.id === id; });
        };
        ExtensionService.prototype.getAuthGuards = function (ids) {
            var _this = this;
            return (ids || [])
                .map(function (id) { return _this.authGuards[id]; })
                .filter(function (guard) { return guard; });
        };
        ExtensionService.prototype.getActionById = function (id) {
            return this.actions.find(function (action) { return action.id === id; });
        };
        ExtensionService.prototype.getEvaluator = function (key) {
            return this.ruleService.getEvaluator(key);
        };
        ExtensionService.prototype.evaluateRule = function (ruleId, context) {
            return this.ruleService.evaluateRule(ruleId, context);
        };
        ExtensionService.prototype.getComponentById = function (id) {
            return this.componentRegister.getComponentById(id);
        };
        ExtensionService.prototype.getRuleById = function (id) {
            return this.ruleService.getRuleById(id);
        };
        ExtensionService.prototype.runExpression = function (value, context) {
            var _this = this;
            if (typeof value === 'string') {
                return this.evaluateExpression(value, context);
            }
            else {
                var duplicate_1 = Object.assign({}, value);
                Object.keys(duplicate_1).forEach(function (key) {
                    duplicate_1[key] = _this.evaluateExpression(duplicate_1[key], context);
                });
                return duplicate_1;
            }
        };
        ExtensionService.prototype.evaluateExpression = function (value, context) {
            var pattern = new RegExp(/\$\((.*\)?)\)/g);
            var matches = pattern.exec(value);
            if (matches && matches.length > 1) {
                var expression = matches[1];
                var fn = new Function('context', "return " + expression);
                var result = fn(context);
                return result;
            }
            return value;
        };
        return ExtensionService;
    }());
    ExtensionService.ɵprov = i0.ɵɵdefineInjectable({ factory: function ExtensionService_Factory() { return new ExtensionService(i0.ɵɵinject(ExtensionLoaderService), i0.ɵɵinject(ComponentRegisterService), i0.ɵɵinject(RuleService), i0.ɵɵinject(EXTENSION_JSONS)); }, token: ExtensionService, providedIn: "root" });
    ExtensionService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    ExtensionService.ctorParameters = function () { return [
        { type: ExtensionLoaderService },
        { type: ComponentRegisterService },
        { type: RuleService },
        { type: Array, decorators: [{ type: i0.Inject, args: [EXTENSION_JSONS,] }] }
    ]; };

    var AppExtensionService = /** @class */ (function () {
        function AppExtensionService(extensionService) {
            this.extensionService = extensionService;
            this._references = new rxjs.BehaviorSubject([]);
            this.references$ = this._references.asObservable();
        }
        AppExtensionService.prototype.load = function () {
            return __awaiter(this, void 0, void 0, function () {
                var config;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.extensionService.load()];
                        case 1:
                            config = _a.sent();
                            this.setup(config);
                            return [2 /*return*/];
                    }
                });
            });
        };
        AppExtensionService.prototype.setup = function (config) {
            if (!config) {
                return;
            }
            var references = (config.$references || [])
                .filter(function (entry) { return typeof entry === 'object'; })
                .map(function (entry) { return entry; });
            this._references.next(references);
        };
        AppExtensionService.prototype.getDocumentListPreset = function (key) {
            return this.extensionService
                .getElements("features.documentList." + key)
                .filter(function (entry) { return !entry.disabled; });
        };
        AppExtensionService.prototype.getViewerExtensions = function () {
            var _this = this;
            return this.extensionService
                .getElements('features.viewer.content')
                .filter(function (extension) { return !_this.isViewerExtensionDisabled(extension); });
        };
        AppExtensionService.prototype.isViewerExtensionDisabled = function (extension) {
            if (extension) {
                if (extension.disabled) {
                    return true;
                }
                if (extension.rules && extension.rules.disabled) {
                    return this.extensionService.evaluateRule(extension.rules.disabled);
                }
            }
            return false;
        };
        return AppExtensionService;
    }());
    AppExtensionService.ɵprov = i0.ɵɵdefineInjectable({ factory: function AppExtensionService_Factory() { return new AppExtensionService(i0.ɵɵinject(ExtensionService)); }, token: AppExtensionService, providedIn: "root" });
    AppExtensionService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    AppExtensionService.ctorParameters = function () { return [
        { type: ExtensionService }
    ]; };

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var PreviewExtensionComponent = /** @class */ (function () {
        function PreviewExtensionComponent(extensionService, componentFactoryResolver) {
            this.extensionService = extensionService;
            this.componentFactoryResolver = componentFactoryResolver;
        }
        PreviewExtensionComponent.prototype.ngOnInit = function () {
            if (!this.id) {
                return;
            }
            var componentType = this.extensionService.getComponentById(this.id);
            if (componentType) {
                var factory = this.componentFactoryResolver.resolveComponentFactory(componentType);
                if (factory) {
                    this.content.clear();
                    this.componentRef = this.content.createComponent(factory, 0);
                    this.updateInstance();
                }
            }
        };
        PreviewExtensionComponent.prototype.ngOnChanges = function () {
            this.updateInstance();
        };
        PreviewExtensionComponent.prototype.ngOnDestroy = function () {
            if (this.componentRef) {
                this.componentRef.destroy();
                this.componentRef = null;
            }
        };
        PreviewExtensionComponent.prototype.updateInstance = function () {
            if (this.componentRef && this.componentRef.instance) {
                var instance = this.componentRef.instance;
                instance.node = this.node;
                instance.url = this.url;
                instance.extension = this.extension;
            }
        };
        return PreviewExtensionComponent;
    }());
    PreviewExtensionComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'adf-preview-extension',
                    template: "\n    <div #content></div>\n  "
                },] }
    ];
    PreviewExtensionComponent.ctorParameters = function () { return [
        { type: ExtensionService },
        { type: i0.ComponentFactoryResolver }
    ]; };
    PreviewExtensionComponent.propDecorators = {
        content: [{ type: i0.ViewChild, args: ['content', { read: i0.ViewContainerRef, static: true },] }],
        id: [{ type: i0.Input }],
        url: [{ type: i0.Input }],
        extension: [{ type: i0.Input }],
        node: [{ type: i0.Input }]
    };

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var DynamicColumnComponent = /** @class */ (function () {
        function DynamicColumnComponent(extensions, componentFactoryResolver) {
            this.extensions = extensions;
            this.componentFactoryResolver = componentFactoryResolver;
        }
        DynamicColumnComponent.prototype.ngOnInit = function () {
            var componentType = this.extensions.getComponentById(this.id);
            if (componentType) {
                var factory = this.componentFactoryResolver.resolveComponentFactory(componentType);
                if (factory) {
                    this.content.clear();
                    this.componentRef = this.content.createComponent(factory, 0);
                    this.updateInstance();
                }
            }
        };
        DynamicColumnComponent.prototype.ngOnChanges = function (changes) {
            if (changes.node) {
                this.updateInstance();
            }
        };
        DynamicColumnComponent.prototype.ngOnDestroy = function () {
            if (this.componentRef) {
                this.componentRef.destroy();
                this.componentRef = null;
            }
        };
        DynamicColumnComponent.prototype.updateInstance = function () {
            if (this.componentRef && this.componentRef.instance) {
                this.componentRef.instance.context = this.context;
            }
        };
        return DynamicColumnComponent;
    }());
    DynamicColumnComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'adf-dynamic-column',
                    template: "\n    <ng-container #content></ng-container>\n  ",
                    encapsulation: i0.ViewEncapsulation.None,
                    changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    host: { class: 'adf-dynamic-column' },
                    styles: ["\n      .adf-dynamic-column {\n        display: flex;\n        align-items: center;\n      }\n    "]
                },] }
    ];
    DynamicColumnComponent.ctorParameters = function () { return [
        { type: ExtensionService },
        { type: i0.ComponentFactoryResolver }
    ]; };
    DynamicColumnComponent.propDecorators = {
        content: [{ type: i0.ViewChild, args: ['content', { read: i0.ViewContainerRef, static: true },] }],
        id: [{ type: i0.Input }],
        context: [{ type: i0.Input }]
    };

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var DynamicExtensionComponent = /** @class */ (function () {
        function DynamicExtensionComponent(extensions, componentFactoryResolver) {
            this.extensions = extensions;
            this.componentFactoryResolver = componentFactoryResolver;
            this.loaded = false;
        }
        DynamicExtensionComponent.prototype.ngOnChanges = function (changes) {
            if (!this.loaded) {
                this.loadComponent();
                this.loaded = true;
            }
            if (changes.data) {
                this.data = changes.data.currentValue;
            }
            this.updateInstance();
            this.proxy('ngOnChanges', changes);
        };
        DynamicExtensionComponent.prototype.loadComponent = function () {
            var componentType = this.extensions.getComponentById(this.id);
            if (componentType) {
                var factory = this.componentFactoryResolver.resolveComponentFactory(componentType);
                if (factory) {
                    this.content.clear();
                    this.componentRef = this.content.createComponent(factory, 0);
                }
            }
        };
        DynamicExtensionComponent.prototype.ngOnDestroy = function () {
            if (this.componentCreated()) {
                this.componentRef.destroy();
                this.componentRef = null;
            }
        };
        DynamicExtensionComponent.prototype.updateInstance = function () {
            if (this.componentCreated()) {
                this.componentRef.instance.data = this.data;
            }
        };
        DynamicExtensionComponent.prototype.proxy = function (lifecycleMethod) {
            var args = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args[_i - 1] = arguments[_i];
            }
            if (this.componentCreated() && this.lifecycleHookIsImplemented(lifecycleMethod)) {
                this.componentRef.instance[lifecycleMethod].apply(this.componentRef.instance, args);
            }
        };
        DynamicExtensionComponent.prototype.componentCreated = function () {
            return !!this.componentRef && !!this.componentRef.instance;
        };
        DynamicExtensionComponent.prototype.lifecycleHookIsImplemented = function (lifecycleMethod) {
            return !!this.componentRef.instance[lifecycleMethod];
        };
        return DynamicExtensionComponent;
    }());
    DynamicExtensionComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'adf-dynamic-component',
                    template: "<div #content></div>"
                },] }
    ];
    DynamicExtensionComponent.ctorParameters = function () { return [
        { type: ExtensionService },
        { type: i0.ComponentFactoryResolver }
    ]; };
    DynamicExtensionComponent.propDecorators = {
        content: [{ type: i0.ViewChild, args: ['content', { read: i0.ViewContainerRef, static: true },] }],
        id: [{ type: i0.Input }],
        data: [{ type: i0.Input }]
    };

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var DynamicTabComponent = /** @class */ (function () {
        function DynamicTabComponent(extensions, componentFactoryResolver) {
            this.extensions = extensions;
            this.componentFactoryResolver = componentFactoryResolver;
        }
        DynamicTabComponent.prototype.ngOnInit = function () {
            var componentType = this.extensions.getComponentById(this.id);
            if (componentType) {
                var factory = this.componentFactoryResolver.resolveComponentFactory(componentType);
                if (factory) {
                    this.content.clear();
                    this.componentRef = this.content.createComponent(factory, 0);
                    this.updateInstance();
                }
            }
        };
        DynamicTabComponent.prototype.ngOnChanges = function (changes) {
            if (changes.node) {
                this.updateInstance();
            }
        };
        DynamicTabComponent.prototype.ngOnDestroy = function () {
            if (this.componentRef) {
                this.componentRef.destroy();
                this.componentRef = null;
            }
        };
        DynamicTabComponent.prototype.updateInstance = function () {
            if (this.componentRef && this.componentRef.instance) {
                this.componentRef.instance.node = this.node;
            }
        };
        return DynamicTabComponent;
    }());
    DynamicTabComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'adf-dynamic-tab',
                    template: "<div #content></div>"
                },] }
    ];
    DynamicTabComponent.ctorParameters = function () { return [
        { type: ExtensionService },
        { type: i0.ComponentFactoryResolver }
    ]; };
    DynamicTabComponent.propDecorators = {
        content: [{ type: i0.ViewChild, args: ['content', { read: i0.ViewContainerRef, static: true },] }],
        id: [{ type: i0.Input }],
        node: [{ type: i0.Input }]
    };

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function setupExtensions(appExtensionService) {
        return function () { return appExtensionService.load(); };
    }

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var ExtensionsModule = /** @class */ (function () {
        function ExtensionsModule() {
        }
        ExtensionsModule.forRoot = function () {
            return {
                ngModule: ExtensionsModule,
                providers: [
                    {
                        provide: i0.APP_INITIALIZER,
                        useFactory: setupExtensions,
                        deps: [AppExtensionService],
                        multi: true
                    }
                ]
            };
        };
        ExtensionsModule.forChild = function () {
            return {
                ngModule: ExtensionsModule
            };
        };
        return ExtensionsModule;
    }());
    ExtensionsModule.decorators = [
        { type: i0.NgModule, args: [{
                    declarations: [
                        DynamicExtensionComponent,
                        DynamicTabComponent,
                        DynamicColumnComponent,
                        PreviewExtensionComponent
                    ],
                    exports: [
                        DynamicExtensionComponent,
                        DynamicTabComponent,
                        DynamicColumnComponent,
                        PreviewExtensionComponent
                    ]
                },] }
    ];

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    exports.AppExtensionService = AppExtensionService;
    exports.ComponentRegisterService = ComponentRegisterService;
    exports.DynamicColumnComponent = DynamicColumnComponent;
    exports.DynamicExtensionComponent = DynamicExtensionComponent;
    exports.DynamicTabComponent = DynamicTabComponent;
    exports.EXTENSION_JSONS = EXTENSION_JSONS;
    exports.ExtensionLoaderService = ExtensionLoaderService;
    exports.ExtensionService = ExtensionService;
    exports.ExtensionsModule = ExtensionsModule;
    exports.PreviewExtensionComponent = PreviewExtensionComponent;
    exports.RuleRef = RuleRef;
    exports.RuleService = RuleService;
    exports.extensionJsonsFactory = extensionJsonsFactory;
    exports.filterEnabled = filterEnabled;
    exports.getValue = getValue;
    exports.mergeArrays = mergeArrays;
    exports.mergeObjects = mergeObjects;
    exports.provideExtensionConfig = provideExtensionConfig;
    exports.reduceEmptyMenus = reduceEmptyMenus;
    exports.reduceSeparators = reduceSeparators;
    exports.sortByOrder = sortByOrder;
    exports.ɵa = setupExtensions;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=adf-extensions.umd.js.map
