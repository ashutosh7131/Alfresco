/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Type, InjectionToken } from '@angular/core';
import { RuleEvaluator, RuleRef, RuleContext } from '../config/rule.extensions';
import { ExtensionConfig } from '../config/extension.config';
import { ExtensionLoaderService } from './extension-loader.service';
import { RouteRef } from '../config/routing.extensions';
import { ActionRef } from '../config/action.extensions';
import { ComponentRegisterService } from './component-register.service';
import { RuleService } from './rule.service';
import { ExtensionElement } from '../config/extension-element';
import { BehaviorSubject } from 'rxjs';
export declare function extensionJsonsFactory(): any[];
export declare const EXTENSION_JSONS: InjectionToken<string[][]>;
export declare function provideExtensionConfig(jsons: string[]): {
    provide: InjectionToken<string[][]>;
    useValue: string[];
    multi: boolean;
};
export declare class ExtensionService {
    protected loader: ExtensionLoaderService;
    protected componentRegister: ComponentRegisterService;
    protected ruleService: RuleService;
    protected extensionJsons: string[];
    protected config: ExtensionConfig;
    configPath: string;
    pluginsPath: string;
    routes: Array<RouteRef>;
    actions: Array<ActionRef>;
    features: Array<any>;
    authGuards: {
        [key: string]: Type<{}>;
    };
    protected onSetup$: BehaviorSubject<ExtensionConfig>;
    setup$: import("rxjs").Observable<ExtensionConfig>;
    constructor(loader: ExtensionLoaderService, componentRegister: ComponentRegisterService, ruleService: RuleService, extensionJsons: string[]);
    load(): Promise<ExtensionConfig>;
    setup(config: ExtensionConfig): void;
    getFeature(key: string): any[];
    getElements<T extends ExtensionElement>(key: string, fallback?: Array<T>): Array<T>;
    setEvaluators(values: {
        [key: string]: RuleEvaluator;
    }): void;
    setAuthGuards(values: {
        [key: string]: Type<{}>;
    }): void;
    setComponents(values: {
        [key: string]: Type<{}>;
    }): void;
    getRouteById(id: string): RouteRef;
    getAuthGuards(ids: string[]): Array<Type<{}>>;
    getActionById(id: string): ActionRef;
    getEvaluator(key: string): RuleEvaluator;
    evaluateRule(ruleId: string, context?: RuleContext): boolean;
    getComponentById<T>(id: string): Type<T>;
    getRuleById(id: string): RuleRef;
    runExpression(value: string | {}, context?: any): {};
    private evaluateExpression;
}
