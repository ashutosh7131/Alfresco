{"version":3,"file":"extension-loader.service.d.ts","sources":["extension-loader.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { HttpClient } from '@angular/common/http';\nimport { ActionRef, ContentActionRef } from '../config/action.extensions';\nimport { ExtensionElement } from '../config/extension-element';\nimport { ExtensionConfig, ExtensionRef } from '../config/extension.config';\nimport { RouteRef } from '../config/routing.extensions';\nimport { RuleRef } from '../config/rule.extensions';\nexport declare class ExtensionLoaderService {\n    private http;\n    constructor(http: HttpClient);\n    load(configPath: string, pluginsPath: string, extensions?: string[]): Promise<ExtensionConfig>;\n    protected getMetadata(config: ExtensionConfig): ExtensionRef;\n    protected loadConfig(url: string, order: number): Promise<{\n        order: number;\n        config: ExtensionConfig;\n    }>;\n    getElements<T extends ExtensionElement>(config: ExtensionConfig, key: string, fallback?: Array<T>): Array<T>;\n    getContentActions(config: ExtensionConfig, key: string): Array<ContentActionRef>;\n    getRules(config: ExtensionConfig): Array<RuleRef>;\n    getRoutes(config: ExtensionConfig): Array<RouteRef>;\n    getActions(config: ExtensionConfig): Array<ActionRef>;\n    getFeatures(config: ExtensionConfig): any;\n    protected setActionDefaults(action: ContentActionRef): ContentActionRef;\n    private filterIgnoredExtensions;\n}\n"]}