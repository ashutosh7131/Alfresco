{"version":3,"file":"extension.service.d.ts","sources":["extension.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Type, InjectionToken } from '@angular/core';\nimport { RuleEvaluator, RuleRef, RuleContext } from '../config/rule.extensions';\nimport { ExtensionConfig } from '../config/extension.config';\nimport { ExtensionLoaderService } from './extension-loader.service';\nimport { RouteRef } from '../config/routing.extensions';\nimport { ActionRef } from '../config/action.extensions';\nimport { ComponentRegisterService } from './component-register.service';\nimport { RuleService } from './rule.service';\nimport { ExtensionElement } from '../config/extension-element';\nimport { BehaviorSubject } from 'rxjs';\nexport declare function extensionJsonsFactory(): any[];\nexport declare const EXTENSION_JSONS: InjectionToken<string[][]>;\nexport declare function provideExtensionConfig(jsons: string[]): {\n    provide: InjectionToken<string[][]>;\n    useValue: string[];\n    multi: boolean;\n};\nexport declare class ExtensionService {\n    protected loader: ExtensionLoaderService;\n    protected componentRegister: ComponentRegisterService;\n    protected ruleService: RuleService;\n    protected extensionJsons: string[];\n    protected config: ExtensionConfig;\n    configPath: string;\n    pluginsPath: string;\n    routes: Array<RouteRef>;\n    actions: Array<ActionRef>;\n    features: Array<any>;\n    authGuards: {\n        [key: string]: Type<{}>;\n    };\n    protected onSetup$: BehaviorSubject<ExtensionConfig>;\n    setup$: import(\"rxjs\").Observable<ExtensionConfig>;\n    constructor(loader: ExtensionLoaderService, componentRegister: ComponentRegisterService, ruleService: RuleService, extensionJsons: string[]);\n    load(): Promise<ExtensionConfig>;\n    setup(config: ExtensionConfig): void;\n    getFeature(key: string): any[];\n    getElements<T extends ExtensionElement>(key: string, fallback?: Array<T>): Array<T>;\n    setEvaluators(values: {\n        [key: string]: RuleEvaluator;\n    }): void;\n    setAuthGuards(values: {\n        [key: string]: Type<{}>;\n    }): void;\n    setComponents(values: {\n        [key: string]: Type<{}>;\n    }): void;\n    getRouteById(id: string): RouteRef;\n    getAuthGuards(ids: string[]): Array<Type<{}>>;\n    getActionById(id: string): ActionRef;\n    getEvaluator(key: string): RuleEvaluator;\n    evaluateRule(ruleId: string, context?: RuleContext): boolean;\n    getComponentById<T>(id: string): Type<T>;\n    getRuleById(id: string): RuleRef;\n    runExpression(value: string | {}, context?: any): {};\n    private evaluateExpression;\n}\n"]}