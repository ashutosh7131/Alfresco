import { __awaiter } from "tslib";
import { Injectable } from '@angular/core';
import { ExtensionService } from '../services/extension.service';
import { BehaviorSubject } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "./extension.service";
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../services/extension.service';
export class AppExtensionService {
    constructor(extensionService) {
        this.extensionService = extensionService;
        this._references = new BehaviorSubject([]);
        this.references$ = this._references.asObservable();
    }
    load() {
        return __awaiter(this, void 0, void 0, function* () {
            const config = yield this.extensionService.load();
            this.setup(config);
        });
    }
    setup(config) {
        if (!config) {
            return;
        }
        const references = (config.$references || [])
            .filter((entry) => typeof entry === 'object')
            .map((entry) => entry);
        this._references.next(references);
    }
    getDocumentListPreset(key) {
        return this.extensionService
            .getElements(`features.documentList.${key}`)
            .filter((entry) => !entry.disabled);
    }
    getViewerExtensions() {
        return this.extensionService
            .getElements('features.viewer.content')
            .filter((extension) => !this.isViewerExtensionDisabled(extension));
    }
    isViewerExtensionDisabled(extension) {
        if (extension) {
            if (extension.disabled) {
                return true;
            }
            if (extension.rules && extension.rules.disabled) {
                return this.extensionService.evaluateRule(extension.rules.disabled);
            }
        }
        return false;
    }
}
AppExtensionService.ɵfac = function AppExtensionService_Factory(t) { return new (t || AppExtensionService)(ɵngcc0.ɵɵinject(ɵngcc1.ExtensionService)); };
AppExtensionService.ɵprov = i0.ɵɵdefineInjectable({ factory: function AppExtensionService_Factory() { return new AppExtensionService(i0.ɵɵinject(i1.ExtensionService)); }, token: AppExtensionService, providedIn: "root" });
AppExtensionService.ctorParameters = () => [
    { type: ExtensionService }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AppExtensionService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc1.ExtensionService }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwLWV4dGVuc2lvbi5zZXJ2aWNlLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9ob21lL3RyYXZpcy9idWlsZC9BbGZyZXNjby9hbGZyZXNjby1uZzItY29tcG9uZW50cy9saWIvZXh0ZW5zaW9ucy9zcmMvbGliL3NlcnZpY2VzL2FwcC1leHRlbnNpb24uc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBaUJBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFM0MsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFDakUsT0FBTyxFQUFjLGVBQWUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUNuRDtBQUFxQzs7O0FBTXJDLE1BQU0sT0FBTyxtQkFBbUI7QUFDaEMsSUFJSSxZQUFzQixnQkFBa0M7QUFDNUQsUUFEMEIscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFrQjtBQUFDLFFBSmpELGdCQUFXLEdBQUcsSUFBSSxlQUFlLENBQWlCLEVBQUUsQ0FBQyxDQUFDO0FBQ2xFLFFBSVEsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLFlBQVksRUFBRSxDQUFDO0FBQzNELElBQUksQ0FBQztBQUNMLElBQ1UsSUFBSTtBQUNkO0FBQ0csWUFESyxNQUFNLE1BQU0sR0FBRyxNQUFNLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLEVBQUUsQ0FBQztBQUMxRCxZQUFRLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDM0IsUUFBSSxDQUFDO0FBRUosS0FGSTtBQUNMLElBQ0ksS0FBSyxDQUFDLE1BQXVCO0FBQ2pDLFFBQVEsSUFBSSxDQUFDLE1BQU0sRUFBRTtBQUNyQixZQUFZLE9BQU87QUFDbkIsU0FBUztBQUNULFFBQ1EsTUFBTSxVQUFVLEdBQUcsQ0FBQyxNQUFNLENBQUMsV0FBVyxJQUFJLEVBQUUsQ0FBQztBQUNyRCxhQUFhLE1BQU0sQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsT0FBTyxLQUFLLEtBQUssUUFBUSxDQUFDO0FBQ3pELGFBQWEsR0FBRyxDQUFDLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBZ0IsS0FBSyxDQUFDLENBQUM7QUFDbEQsUUFBUSxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztBQUMxQyxJQUFJLENBQUM7QUFDTCxJQU1JLHFCQUFxQixDQUFDLEdBQVc7QUFBSSxRQUNqQyxPQUFPLElBQUksQ0FBQyxnQkFBZ0I7QUFDcEMsYUFBVyxXQUFXLENBQ1YseUJBQXlCLEdBQUcsRUFBRSxDQUMvQjtBQUNYLGFBQVcsTUFBTSxDQUFDLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUM5QyxJQUFJLENBQUM7QUFDTCxJQUtJLG1CQUFtQjtBQUFLLFFBQ3BCLE9BQU8sSUFBSSxDQUFDLGdCQUFnQjtBQUNwQyxhQUFhLFdBQVcsQ0FBcUIseUJBQXlCLENBQUM7QUFDdkUsYUFBYSxNQUFNLENBQUMsQ0FBQyxTQUFTLEVBQUUsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLHlCQUF5QixDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7QUFDL0UsSUFBSSxDQUFDO0FBQ0wsSUFDYyx5QkFBeUIsQ0FBQyxTQUE2QjtBQUFJLFFBQ2pFLElBQUksU0FBUyxFQUFFO0FBQ3ZCLFlBQVUsSUFBSSxTQUFTLENBQUMsUUFBUSxFQUFFO0FBQ2xDLGdCQUFZLE9BQU8sSUFBSSxDQUFDO0FBQ3hCLGFBQVc7QUFDWCxZQUNVLElBQUksU0FBUyxDQUFDLEtBQUssSUFBSSxTQUFTLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRTtBQUMzRCxnQkFBWSxPQUFPLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUNoRixhQUFXO0FBQ1gsU0FBUztBQUNULFFBQ1EsT0FBTyxLQUFLLENBQUM7QUFDckIsSUFBSSxDQUFDO0FBQ0w7d0pBQUM7QUFDRCw2TkE5REs7QUFBQztFQUhMLFVBQVUsU0FBQyxyQkFJSSxZQVRQLGdCQUFnQjtBQUFHO0tBTXhCLFVBQVUsRUFBRSxNQUFNLGNBQ3JCOzs7OztpRkFQNkI7QUFBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEV4dGVuc2lvbkNvbmZpZywgRXh0ZW5zaW9uUmVmIH0gZnJvbSAnLi4vY29uZmlnL2V4dGVuc2lvbi5jb25maWcnO1xuaW1wb3J0IHsgRXh0ZW5zaW9uU2VydmljZSB9IGZyb20gJy4uL3NlcnZpY2VzL2V4dGVuc2lvbi5zZXJ2aWNlJztcbmltcG9ydCB7IE9ic2VydmFibGUsIEJlaGF2aW9yU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgVmlld2VyRXh0ZW5zaW9uUmVmIH0gZnJvbSAnLi4vY29uZmlnL3ZpZXdlci5leHRlbnNpb25zJztcbmltcG9ydCB7IERvY3VtZW50TGlzdFByZXNldFJlZiB9IGZyb20gJy4uL2NvbmZpZy9kb2N1bWVudC1saXN0LmV4dGVuc2lvbnMnO1xuXG5ASW5qZWN0YWJsZSh7XG4gICAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIEFwcEV4dGVuc2lvblNlcnZpY2Uge1xuICAgIHByaXZhdGUgX3JlZmVyZW5jZXMgPSBuZXcgQmVoYXZpb3JTdWJqZWN0PEV4dGVuc2lvblJlZltdPihbXSk7XG5cbiAgICByZWZlcmVuY2VzJDogT2JzZXJ2YWJsZTxFeHRlbnNpb25SZWZbXT47XG5cbiAgICBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgZXh0ZW5zaW9uU2VydmljZTogRXh0ZW5zaW9uU2VydmljZSkge1xuICAgICAgICB0aGlzLnJlZmVyZW5jZXMkID0gdGhpcy5fcmVmZXJlbmNlcy5hc09ic2VydmFibGUoKTtcbiAgICB9XG5cbiAgICBhc3luYyBsb2FkKCkge1xuICAgICAgICBjb25zdCBjb25maWcgPSBhd2FpdCB0aGlzLmV4dGVuc2lvblNlcnZpY2UubG9hZCgpO1xuICAgICAgICB0aGlzLnNldHVwKGNvbmZpZyk7XG4gICAgfVxuXG4gICAgc2V0dXAoY29uZmlnOiBFeHRlbnNpb25Db25maWcpIHtcbiAgICAgICAgaWYgKCFjb25maWcpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHJlZmVyZW5jZXMgPSAoY29uZmlnLiRyZWZlcmVuY2VzIHx8IFtdKVxuICAgICAgICAgICAgLmZpbHRlcigoZW50cnkpID0+IHR5cGVvZiBlbnRyeSA9PT0gJ29iamVjdCcpXG4gICAgICAgICAgICAubWFwKChlbnRyeSkgPT4gPEV4dGVuc2lvblJlZj4gZW50cnkpO1xuICAgICAgICB0aGlzLl9yZWZlcmVuY2VzLm5leHQocmVmZXJlbmNlcyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUHJvdmlkZXMgYSBjb2xsZWN0aW9uIG9mIGRvY3VtZW50IGxpc3QgY29sdW1ucyBmb3IgdGhlIHBhcnRpY3VsYXIgcHJlc2V0LlxuICAgICAqIFRoZSByZXN1bHQgaXMgZmlsdGVyZWQgYnkgdGhlICoqZGlzYWJsZWQqKiBzdGF0ZS5cbiAgICAgKiBAcGFyYW0ga2V5IFByZXNldCBrZXkuXG4gICAgICovXG4gICAgZ2V0RG9jdW1lbnRMaXN0UHJlc2V0KGtleTogc3RyaW5nKTogRG9jdW1lbnRMaXN0UHJlc2V0UmVmW10ge1xuICAgICAgICByZXR1cm4gdGhpcy5leHRlbnNpb25TZXJ2aWNlXG4gICAgICAgICAgLmdldEVsZW1lbnRzPERvY3VtZW50TGlzdFByZXNldFJlZj4oXG4gICAgICAgICAgICBgZmVhdHVyZXMuZG9jdW1lbnRMaXN0LiR7a2V5fWBcbiAgICAgICAgICApXG4gICAgICAgICAgLmZpbHRlcigoZW50cnkpID0+ICFlbnRyeS5kaXNhYmxlZCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUHJvdmlkZXMgYSBsaXN0IG9mIHRoZSBWaWV3ZXIgY29udGVudCBleHRlbnNpb25zLFxuICAgICAqIGZpbHRlcmVkIGJ5ICoqZGlzYWJsZWQqKiBzdGF0ZSBhbmQgKipydWxlcyoqLlxuICAgICAqL1xuICAgIGdldFZpZXdlckV4dGVuc2lvbnMoKTogVmlld2VyRXh0ZW5zaW9uUmVmW10ge1xuICAgICAgICByZXR1cm4gdGhpcy5leHRlbnNpb25TZXJ2aWNlXG4gICAgICAgICAgICAuZ2V0RWxlbWVudHM8Vmlld2VyRXh0ZW5zaW9uUmVmPignZmVhdHVyZXMudmlld2VyLmNvbnRlbnQnKVxuICAgICAgICAgICAgLmZpbHRlcigoZXh0ZW5zaW9uKSA9PiAhdGhpcy5pc1ZpZXdlckV4dGVuc2lvbkRpc2FibGVkKGV4dGVuc2lvbikpO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBpc1ZpZXdlckV4dGVuc2lvbkRpc2FibGVkKGV4dGVuc2lvbjogVmlld2VyRXh0ZW5zaW9uUmVmKTogYm9vbGVhbiB7XG4gICAgICAgIGlmIChleHRlbnNpb24pIHtcbiAgICAgICAgICBpZiAoZXh0ZW5zaW9uLmRpc2FibGVkKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoZXh0ZW5zaW9uLnJ1bGVzICYmIGV4dGVuc2lvbi5ydWxlcy5kaXNhYmxlZCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZXh0ZW5zaW9uU2VydmljZS5ldmFsdWF0ZVJ1bGUoZXh0ZW5zaW9uLnJ1bGVzLmRpc2FibGVkKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxufVxuIl19