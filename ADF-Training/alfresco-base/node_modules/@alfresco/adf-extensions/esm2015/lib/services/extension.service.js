import { __awaiter } from "tslib";
import { Injectable, InjectionToken, Inject } from '@angular/core';
import { ExtensionLoaderService } from './extension-loader.service';
import * as core from '../evaluators/core.evaluators';
import { ComponentRegisterService } from './component-register.service';
import { RuleService } from './rule.service';
import { BehaviorSubject } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "./extension-loader.service";
import * as i2 from "./component-register.service";
import * as i3 from "./rule.service";
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './extension-loader.service';
import * as ɵngcc2 from './component-register.service';
import * as ɵngcc3 from './rule.service';
export function extensionJsonsFactory() {
    return [];
}
export const EXTENSION_JSONS = new InjectionToken('extension-jsons', {
    providedIn: 'root',
    factory: extensionJsonsFactory
});
export function provideExtensionConfig(jsons) {
    return {
        provide: EXTENSION_JSONS,
        useValue: jsons,
        multi: true
    };
}
export class ExtensionService {
    constructor(loader, componentRegister, ruleService, extensionJsons) {
        this.loader = loader;
        this.componentRegister = componentRegister;
        this.ruleService = ruleService;
        this.extensionJsons = extensionJsons;
        this.config = null;
        this.configPath = 'assets/app.extensions.json';
        this.pluginsPath = 'assets/plugins';
        this.routes = [];
        this.actions = [];
        this.features = [];
        this.authGuards = {};
        this.onSetup$ = new BehaviorSubject(this.config);
        this.setup$ = this.onSetup$.asObservable();
    }
    load() {
        return __awaiter(this, void 0, void 0, function* () {
            const config = yield this.loader.load(this.configPath, this.pluginsPath, this.extensionJsons.flat());
            this.setup(config);
            return config;
        });
    }
    setup(config) {
        if (!config) {
            console.warn('Extension configuration not found');
            return;
        }
        this.config = config;
        this.setEvaluators({
            'core.every': core.every,
            'core.some': core.some,
            'core.not': core.not
        });
        this.actions = this.loader.getActions(config);
        this.routes = this.loader.getRoutes(config);
        this.features = this.loader.getFeatures(config);
        this.ruleService.setup(config);
        this.onSetup$.next(config);
    }
    getFeature(key) {
        const properties = Array.isArray(key) ? [key] : key.split('.');
        return properties.reduce((prev, curr) => prev && prev[curr], this.features) || [];
    }
    getElements(key, fallback = []) {
        return this.loader.getElements(this.config, key, fallback);
    }
    setEvaluators(values) {
        this.ruleService.setEvaluators(values);
    }
    setAuthGuards(values) {
        if (values) {
            this.authGuards = Object.assign({}, this.authGuards, values);
        }
    }
    setComponents(values) {
        this.componentRegister.setComponents(values);
    }
    getRouteById(id) {
        return this.routes.find((route) => route.id === id);
    }
    getAuthGuards(ids) {
        return (ids || [])
            .map((id) => this.authGuards[id])
            .filter((guard) => guard);
    }
    getActionById(id) {
        return this.actions.find((action) => action.id === id);
    }
    getEvaluator(key) {
        return this.ruleService.getEvaluator(key);
    }
    evaluateRule(ruleId, context) {
        return this.ruleService.evaluateRule(ruleId, context);
    }
    getComponentById(id) {
        return this.componentRegister.getComponentById(id);
    }
    getRuleById(id) {
        return this.ruleService.getRuleById(id);
    }
    runExpression(value, context) {
        if (typeof value === 'string') {
            return this.evaluateExpression(value, context);
        }
        else {
            const duplicate = Object.assign({}, value);
            Object.keys(duplicate).forEach((key) => {
                duplicate[key] = this.evaluateExpression(duplicate[key], context);
            });
            return duplicate;
        }
    }
    evaluateExpression(value, context) {
        const pattern = new RegExp(/\$\((.*\)?)\)/g);
        const matches = pattern.exec(value);
        if (matches && matches.length > 1) {
            const expression = matches[1];
            const fn = new Function('context', `return ${expression}`);
            const result = fn(context);
            return result;
        }
        return value;
    }
}
ExtensionService.ɵfac = function ExtensionService_Factory(t) { return new (t || ExtensionService)(ɵngcc0.ɵɵinject(ɵngcc1.ExtensionLoaderService), ɵngcc0.ɵɵinject(ɵngcc2.ComponentRegisterService), ɵngcc0.ɵɵinject(ɵngcc3.RuleService), ɵngcc0.ɵɵinject(EXTENSION_JSONS)); };
ExtensionService.ɵprov = i0.ɵɵdefineInjectable({ factory: function ExtensionService_Factory() { return new ExtensionService(i0.ɵɵinject(i1.ExtensionLoaderService), i0.ɵɵinject(i2.ComponentRegisterService), i0.ɵɵinject(i3.RuleService), i0.ɵɵinject(EXTENSION_JSONS)); }, token: ExtensionService, providedIn: "root" });
ExtensionService.ctorParameters = () => [
    { type: ExtensionLoaderService },
    { type: ComponentRegisterService },
    { type: RuleService },
    { type: Array, decorators: [{ type: Inject, args: [EXTENSION_JSONS,] }] }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtensionService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc1.ExtensionLoaderService }, { type: ɵngcc2.ComponentRegisterService }, { type: ɵngcc3.RuleService }, { type: Array, decorators: [{
                type: Inject,
                args: [EXTENSION_JSONS]
            }] }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXh0ZW5zaW9uLnNlcnZpY2UuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL2hvbWUvdHJhdmlzL2J1aWxkL0FsZnJlc2NvL2FsZnJlc2NvLW5nMi1jb21wb25lbnRzL2xpYi9leHRlbnNpb25zL3NyYy9saWIvc2VydmljZXMvZXh0ZW5zaW9uLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQWlCQSxPQUFPLEVBQUUsVUFBVSxFQUFRLGNBQWMsRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFHekUsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFHcEUsT0FBTyxLQUFLLElBQUksTUFBTSwrQkFBK0IsQ0FBQztBQUN0RCxPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQUN4RSxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFN0MsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUN2QztBQUNvQztBQUlWO0FBQW9EOzs7OztBQUo5RSxNQUFNLFVBQVUscUJBQXFCO0FBQ3JDLElBQUksT0FBTyxFQUFFLENBQUM7QUFDZCxDQUFDO0FBRUQsTUFBTSxDQUFDLE1BQU0sZUFBZSxHQUFHLElBQUksY0FBYyxDQUFhLGlCQUFpQixFQUFFO0FBQ2pGLElBQUksVUFBVSxFQUFFLE1BQU07QUFDdEIsSUFBSSxPQUFPLEVBQUUscUJBQXFCO0FBQ2xDLENBQUMsQ0FBQyxDQUFDO0FBRUgsTUFBTSxVQUFVLHNCQUFzQixDQUFDLEtBQWU7QUFDdEQsSUFBSSxPQUFPO0FBQ1gsUUFBUSxPQUFPLEVBQUUsZUFBZTtBQUNoQyxRQUFRLFFBQVEsRUFBRSxLQUFLO0FBQ3ZCLFFBQVEsS0FBSyxFQUFFLElBQUk7QUFDbkIsS0FBSyxDQUFDO0FBQ04sQ0FBQztBQUtELE1BQU0sT0FBTyxnQkFBZ0I7QUFDN0IsSUFjSSxZQUNj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UyxDQUFDLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUM7QUFDbEYsWUFBWSxDQUFDLENBQUMsQ0FBQztBQUNmLFlBQVksT0FBTyxTQUFTLENBQUM7QUFDN0IsU0FBUztBQUNULElBQUksQ0FBQztBQUNMLElBQ1ksa0JBQWtCLENBQUMsS0FBYSxFQUFFLE9BQWE7QUFBSSxRQUN2RCxNQUFNLE9BQU8sR0FBRyxJQUFJLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0FBQ3JELFFBQVEsTUFBTSxPQUFPLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUM1QyxRQUNRLElBQUksT0FBTyxJQUFJLE9BQU8sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO0FBQzNDLFlBQVksTUFBTSxVQUFVLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQzFDLFlBQVksTUFBTSxFQUFFLEdBQUcsSUFBSSxRQUFRLENBQUMsU0FBUyxFQUFFLFVBQVUsVUFBVSxFQUFFLENBQUMsQ0FBQztBQUN2RSxZQUFZLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUN2QyxZQUNZLE9BQU8sTUFBTSxDQUFDO0FBQzFCLFNBQVM7QUFDVCxRQUFRLE9BQU8sS0FBSyxDQUFDO0FBQ3JCLElBQUksQ0FBQztBQUNMOzhRQUFDO0FBQ0QsNFRBek1LO0FBQUM7RUFITCxVQUFVLFNBQUMsckJBS0csWUEvQk4sc0JBQXNCO0NBMkIzQixVQUFVLEVBQUUsTUFBTSxjQUNyQixqQ0E1QmtDLFlBSTFCLHdCQUF3QjtBQUFJLFlBQzVCLFdBQVc7QUFBSSx3Q0EyQ2YsTUFBTSxTQUFDLGVBQWU7QUFBUTs7Ozs7Ozs7O2tDQUFFO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBJbmplY3RhYmxlLCBUeXBlLCBJbmplY3Rpb25Ub2tlbiwgSW5qZWN0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBSdWxlRXZhbHVhdG9yLCBSdWxlUmVmLCBSdWxlQ29udGV4dCB9IGZyb20gJy4uL2NvbmZpZy9ydWxlLmV4dGVuc2lvbnMnO1xuaW1wb3J0IHsgRXh0ZW5zaW9uQ29uZmlnIH0gZnJvbSAnLi4vY29uZmlnL2V4dGVuc2lvbi5jb25maWcnO1xuaW1wb3J0IHsgRXh0ZW5zaW9uTG9hZGVyU2VydmljZSB9IGZyb20gJy4vZXh0ZW5zaW9uLWxvYWRlci5zZXJ2aWNlJztcbmltcG9ydCB7IFJvdXRlUmVmIH0gZnJvbSAnLi4vY29uZmlnL3JvdXRpbmcuZXh0ZW5zaW9ucyc7XG5pbXBvcnQgeyBBY3Rpb25SZWYgfSBmcm9tICcuLi9jb25maWcvYWN0aW9uLmV4dGVuc2lvbnMnO1xuaW1wb3J0ICogYXMgY29yZSBmcm9tICcuLi9ldmFsdWF0b3JzL2NvcmUuZXZhbHVhdG9ycyc7XG5pbXBvcnQgeyBDb21wb25lbnRSZWdpc3RlclNlcnZpY2UgfSBmcm9tICcuL2NvbXBvbmVudC1yZWdpc3Rlci5zZXJ2aWNlJztcbmltcG9ydCB7IFJ1bGVTZXJ2aWNlIH0gZnJvbSAnLi9ydWxlLnNlcnZpY2UnO1xuaW1wb3J0IHsgRXh0ZW5zaW9uRWxlbWVudCB9IGZyb20gJy4uL2NvbmZpZy9leHRlbnNpb24tZWxlbWVudCc7XG5pbXBvcnQgeyBCZWhhdmlvclN1YmplY3QgfSBmcm9tICdyeGpzJztcblxuZXhwb3J0IGZ1bmN0aW9uIGV4dGVuc2lvbkpzb25zRmFjdG9yeSgpIHtcbiAgICByZXR1cm4gW107XG59XG5cbmV4cG9ydCBjb25zdCBFWFRFTlNJT05fSlNPTlMgPSBuZXcgSW5qZWN0aW9uVG9rZW48c3RyaW5nW11bXT4oJ2V4dGVuc2lvbi1qc29ucycsIHtcbiAgICBwcm92aWRlZEluOiAncm9vdCcsXG4gICAgZmFjdG9yeTogZXh0ZW5zaW9uSnNvbnNGYWN0b3J5XG59KTtcblxuZXhwb3J0IGZ1bmN0aW9uIHByb3ZpZGVFeHRlbnNpb25Db25maWcoanNvbnM6IHN0cmluZ1tdKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgcHJvdmlkZTogRVhURU5TSU9OX0pTT05TLFxuICAgICAgICB1c2VWYWx1ZToganNvbnMsXG4gICAgICAgIG11bHRpOiB0cnVlXG4gICAgfTtcbn1cblxuQEluamVjdGFibGUoe1xuICAgIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBFeHRlbnNpb25TZXJ2aWNlIHtcblxuICAgIHByb3RlY3RlZCBjb25maWc6IEV4dGVuc2lvbkNvbmZpZyA9IG51bGw7XG5cbiAgICBjb25maWdQYXRoID0gJ2Fzc2V0cy9hcHAuZXh0ZW5zaW9ucy5qc29uJztcbiAgICBwbHVnaW5zUGF0aCA9ICdhc3NldHMvcGx1Z2lucyc7XG5cbiAgICByb3V0ZXM6IEFycmF5PFJvdXRlUmVmPiA9IFtdO1xuICAgIGFjdGlvbnM6IEFycmF5PEFjdGlvblJlZj4gPSBbXTtcbiAgICBmZWF0dXJlczogQXJyYXk8YW55PiA9IFtdO1xuICAgIGF1dGhHdWFyZHM6IHsgW2tleTogc3RyaW5nXTogVHlwZTx7fT4gfSA9IHt9O1xuXG4gICAgcHJvdGVjdGVkIG9uU2V0dXAkID0gbmV3IEJlaGF2aW9yU3ViamVjdDxFeHRlbnNpb25Db25maWc+KHRoaXMuY29uZmlnKTtcbiAgICBzZXR1cCQgPSB0aGlzLm9uU2V0dXAkLmFzT2JzZXJ2YWJsZSgpO1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHByb3RlY3RlZCBsb2FkZXI6IEV4dGVuc2lvbkxvYWRlclNlcnZpY2UsXG4gICAgICAgIHByb3RlY3RlZCBjb21wb25lbnRSZWdpc3RlcjogQ29tcG9uZW50UmVnaXN0ZXJTZXJ2aWNlLFxuICAgICAgICBwcm90ZWN0ZWQgcnVsZVNlcnZpY2U6IFJ1bGVTZXJ2aWNlLFxuICAgICAgICBASW5qZWN0KEVYVEVOU0lPTl9KU09OUykgcHJvdGVjdGVkIGV4dGVuc2lvbkpzb25zOiBzdHJpbmdbXVxuICAgICkge1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIExvYWRzIGFuZCByZWdpc3RlcnMgYW4gZXh0ZW5zaW9uIGNvbmZpZyBmaWxlIGFuZCBwbHVnaW5zIChzcGVjaWZpZWQgYnkgcGF0aCBwcm9wZXJ0aWVzKS5cbiAgICAgKiBAcmV0dXJucyBUaGUgbG9hZGVkIGNvbmZpZyBkYXRhXG4gICAgICovXG4gICAgYXN5bmMgbG9hZCgpOiBQcm9taXNlPEV4dGVuc2lvbkNvbmZpZz4ge1xuICAgICAgICBjb25zdCBjb25maWcgPSBhd2FpdCB0aGlzLmxvYWRlci5sb2FkKFxuICAgICAgICAgICAgdGhpcy5jb25maWdQYXRoLFxuICAgICAgICAgICAgdGhpcy5wbHVnaW5zUGF0aCxcbiAgICAgICAgICAgIHRoaXMuZXh0ZW5zaW9uSnNvbnMuZmxhdCgpXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMuc2V0dXAoY29uZmlnKTtcbiAgICAgICAgcmV0dXJuIGNvbmZpZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZWdpc3RlcnMgZXh0ZW5zaW9ucyBmcm9tIGEgY29uZmlnIG9iamVjdC5cbiAgICAgKiBAcGFyYW0gY29uZmlnIE9iamVjdCB3aXRoIGNvbmZpZyBkYXRhXG4gICAgICovXG4gICAgc2V0dXAoY29uZmlnOiBFeHRlbnNpb25Db25maWcpIHtcbiAgICAgICAgaWYgKCFjb25maWcpIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybignRXh0ZW5zaW9uIGNvbmZpZ3VyYXRpb24gbm90IGZvdW5kJyk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmNvbmZpZyA9IGNvbmZpZztcblxuICAgICAgICB0aGlzLnNldEV2YWx1YXRvcnMoe1xuICAgICAgICAgICAgJ2NvcmUuZXZlcnknOiBjb3JlLmV2ZXJ5LFxuICAgICAgICAgICAgJ2NvcmUuc29tZSc6IGNvcmUuc29tZSxcbiAgICAgICAgICAgICdjb3JlLm5vdCc6IGNvcmUubm90XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuYWN0aW9ucyA9IHRoaXMubG9hZGVyLmdldEFjdGlvbnMoY29uZmlnKTtcbiAgICAgICAgdGhpcy5yb3V0ZXMgPSB0aGlzLmxvYWRlci5nZXRSb3V0ZXMoY29uZmlnKTtcbiAgICAgICAgdGhpcy5mZWF0dXJlcyA9IHRoaXMubG9hZGVyLmdldEZlYXR1cmVzKGNvbmZpZyk7XG5cbiAgICAgICAgdGhpcy5ydWxlU2VydmljZS5zZXR1cChjb25maWcpO1xuICAgICAgICB0aGlzLm9uU2V0dXAkLm5leHQoY29uZmlnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIGZlYXR1cmVzIGJ5IGtleS5cbiAgICAgKiBAcGFyYW0ga2V5IEtleSBzdHJpbmcsIHVzaW5nIGRvdCBub3RhdGlvblxuICAgICAqIEByZXR1cm5zIEZlYXR1cmVzIGFycmF5IGZvdW5kIGJ5IGtleVxuICAgICAqL1xuICAgIGdldEZlYXR1cmUoa2V5OiBzdHJpbmcpOiBhbnlbXSB7XG4gICAgICAgIGNvbnN0IHByb3BlcnRpZXM6IHN0cmluZ1tdID0gQXJyYXkuaXNBcnJheShrZXkpID8gW2tleV0gOiBrZXkuc3BsaXQoJy4nKTtcbiAgICAgICAgcmV0dXJuIHByb3BlcnRpZXMucmVkdWNlKChwcmV2LCBjdXJyKSA9PiBwcmV2ICYmIHByZXZbY3Vycl0sIHRoaXMuZmVhdHVyZXMpIHx8IFtdO1xuICAgIH1cblxuICAgIGdldEVsZW1lbnRzPFQgZXh0ZW5kcyBFeHRlbnNpb25FbGVtZW50PihrZXk6IHN0cmluZywgZmFsbGJhY2s6IEFycmF5PFQ+ID0gW10pOiBBcnJheTxUPiB7XG4gICAgICAgIHJldHVybiB0aGlzLmxvYWRlci5nZXRFbGVtZW50cyh0aGlzLmNvbmZpZywga2V5LCBmYWxsYmFjayk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWRkcyBvbmUgb3IgbW9yZSBuZXcgcnVsZSBldmFsdWF0b3JzIHRvIHRoZSBleGlzdGluZyBzZXQuXG4gICAgICogQHBhcmFtIHZhbHVlcyBUaGUgbmV3IGV2YWx1YXRvcnMgdG8gYWRkXG4gICAgICovXG4gICAgc2V0RXZhbHVhdG9ycyh2YWx1ZXM6IHsgW2tleTogc3RyaW5nXTogUnVsZUV2YWx1YXRvciB9KSB7XG4gICAgICAgIHRoaXMucnVsZVNlcnZpY2Uuc2V0RXZhbHVhdG9ycyh2YWx1ZXMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFkZHMgb25lIG9yIG1vcmUgbmV3IGF1dGggZ3VhcmRzIHRvIHRoZSBleGlzdGluZyBzZXQuXG4gICAgICogQHBhcmFtIHZhbHVlcyBUaGUgbmV3IGF1dGggZ3VhcmRzIHRvIGFkZFxuICAgICAqL1xuICAgIHNldEF1dGhHdWFyZHModmFsdWVzOiB7IFtrZXk6IHN0cmluZ106IFR5cGU8e30+IH0pIHtcbiAgICAgICAgaWYgKHZhbHVlcykge1xuICAgICAgICAgICAgdGhpcy5hdXRoR3VhcmRzID0gT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5hdXRoR3VhcmRzLCB2YWx1ZXMpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWRkcyBvbmUgb3IgbW9yZSBuZXcgY29tcG9uZW50cyB0byB0aGUgZXhpc3Rpbmcgc2V0LlxuICAgICAqIEBwYXJhbSB2YWx1ZXMgVGhlIG5ldyBjb21wb25lbnRzIHRvIGFkZFxuICAgICAqL1xuICAgIHNldENvbXBvbmVudHModmFsdWVzOiB7IFtrZXk6IHN0cmluZ106IFR5cGU8e30+IH0pIHtcbiAgICAgICAgdGhpcy5jb21wb25lbnRSZWdpc3Rlci5zZXRDb21wb25lbnRzKHZhbHVlcyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0cmlldmVzIGEgcm91dGUgdXNpbmcgaXRzIElEIHZhbHVlLlxuICAgICAqIEBwYXJhbSBpZCBUaGUgSUQgdmFsdWUgdG8gbG9vayBmb3JcbiAgICAgKiBAcmV0dXJucyBUaGUgcm91dGUgb3IgbnVsbCBpZiBub3QgZm91bmRcbiAgICAgKi9cbiAgICBnZXRSb3V0ZUJ5SWQoaWQ6IHN0cmluZyk6IFJvdXRlUmVmIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucm91dGVzLmZpbmQoKHJvdXRlKSA9PiByb3V0ZS5pZCA9PT0gaWQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHJpZXZlcyBvbmUgb3IgbW9yZSBhdXRoIGd1YXJkcyB1c2luZyBhbiBhcnJheSBvZiBJRCB2YWx1ZXMuXG4gICAgICogQHBhcmFtIGlkcyBBcnJheSBvZiBJRCB2YWx1ZSB0byBsb29rIGZvclxuICAgICAqIEByZXR1cm5zIEFycmF5IG9mIGF1dGggZ3VhcmRzIG9yIGVtcHR5IGFycmF5IGlmIG5vbmUgd2VyZSBmb3VuZFxuICAgICAqL1xuICAgIGdldEF1dGhHdWFyZHMoaWRzOiBzdHJpbmdbXSk6IEFycmF5PFR5cGU8e30+PiB7XG4gICAgICAgIHJldHVybiAoaWRzIHx8IFtdKVxuICAgICAgICAgICAgLm1hcCgoaWQpID0+IHRoaXMuYXV0aEd1YXJkc1tpZF0pXG4gICAgICAgICAgICAuZmlsdGVyKChndWFyZCkgPT4gZ3VhcmQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHJpZXZlcyBhbiBhY3Rpb24gdXNpbmcgaXRzIElEIHZhbHVlLlxuICAgICAqIEBwYXJhbSBpZCBUaGUgSUQgdmFsdWUgdG8gbG9vayBmb3JcbiAgICAgKiBAcmV0dXJucyBBY3Rpb24gb3IgbnVsbCBpZiBub3QgZm91bmRcbiAgICAgKi9cbiAgICBnZXRBY3Rpb25CeUlkKGlkOiBzdHJpbmcpOiBBY3Rpb25SZWYge1xuICAgICAgICByZXR1cm4gdGhpcy5hY3Rpb25zLmZpbmQoKGFjdGlvbikgPT4gYWN0aW9uLmlkID09PSBpZCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0cmlldmVzIGEgUnVsZUV2YWx1YXRvciBmdW5jdGlvbiB1c2luZyBpdHMga2V5IG5hbWUuXG4gICAgICogQHBhcmFtIGtleSBLZXkgbmFtZSB0byBsb29rIGZvclxuICAgICAqIEByZXR1cm5zIFJ1bGVFdmFsdWF0b3Igb3IgbnVsbCBpZiBub3QgZm91bmRcbiAgICAgKi9cbiAgICBnZXRFdmFsdWF0b3Ioa2V5OiBzdHJpbmcpOiBSdWxlRXZhbHVhdG9yIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucnVsZVNlcnZpY2UuZ2V0RXZhbHVhdG9yKGtleSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRXZhbHVhdGVzIGEgcnVsZS5cbiAgICAgKiBAcGFyYW0gcnVsZUlkIElEIG9mIHRoZSBydWxlIHRvIGV2YWx1YXRlXG4gICAgICogQHBhcmFtIGNvbnRleHQgQ3VzdG9tIHJ1bGUgZXhlY3V0aW9uIGNvbnRleHQuXG4gICAgICogQHJldHVybnMgVHJ1ZSBpZiB0aGUgcnVsZSBwYXNzZWQsIGZhbHNlIG90aGVyd2lzZVxuICAgICAqL1xuICAgIGV2YWx1YXRlUnVsZShydWxlSWQ6IHN0cmluZywgY29udGV4dD86IFJ1bGVDb250ZXh0KTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLnJ1bGVTZXJ2aWNlLmV2YWx1YXRlUnVsZShydWxlSWQsIGNvbnRleHQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHJpZXZlcyBhIHJlZ2lzdGVyZWQgZXh0ZW5zaW9uIGNvbXBvbmVudCB1c2luZyBpdHMgSUQgdmFsdWUuXG4gICAgICogQHBhcmFtIGlkIFRoZSBJRCB2YWx1ZSB0byBsb29rIGZvclxuICAgICAqIEByZXR1cm5zIFRoZSBjb21wb25lbnQgb3IgbnVsbCBpZiBub3QgZm91bmRcbiAgICAgKi9cbiAgICBnZXRDb21wb25lbnRCeUlkPFQ+KGlkOiBzdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29tcG9uZW50UmVnaXN0ZXIuZ2V0Q29tcG9uZW50QnlJZDxUPihpZCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0cmlldmVzIGEgcnVsZSB1c2luZyBpdHMgSUQgdmFsdWUuXG4gICAgICogQHBhcmFtIGlkIFRoZSBJRCB2YWx1ZSB0byBsb29rIGZvclxuICAgICAqIEByZXR1cm5zIFRoZSBydWxlIG9yIG51bGwgaWYgbm90IGZvdW5kXG4gICAgICovXG4gICAgZ2V0UnVsZUJ5SWQoaWQ6IHN0cmluZyk6IFJ1bGVSZWYge1xuICAgICAgICByZXR1cm4gdGhpcy5ydWxlU2VydmljZS5nZXRSdWxlQnlJZChpZCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUnVucyBhIGxpZ2h0d2VpZ2h0IGV4cHJlc3Npb24gc3RvcmVkIGluIGEgc3RyaW5nLlxuICAgICAqIEBwYXJhbSB2YWx1ZSBTdHJpbmcgY29udGFpbmluZyB0aGUgZXhwcmVzc2lvbiBvciBsaXRlcmFsIHZhbHVlXG4gICAgICogQHBhcmFtIGNvbnRleHQgUGFyYW1ldGVyIG9iamVjdCBmb3IgdGhlIGV4cHJlc3Npb24gd2l0aCBkZXRhaWxzIG9mIGFwcCBzdGF0ZVxuICAgICAqIEByZXR1cm5zIFJlc3VsdCBvZiBldmFsdWF0ZWQgZXhwcmVzc2lvbiwgaWYgZm91bmQsIG9yIHRoZSBsaXRlcmFsIHZhbHVlIG90aGVyd2lzZVxuICAgICAqL1xuICAgIHJ1bkV4cHJlc3Npb24odmFsdWU6IHN0cmluZyB8IHt9ICwgY29udGV4dD86IGFueSkge1xuICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyApIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmV2YWx1YXRlRXhwcmVzc2lvbih2YWx1ZSwgY29udGV4dCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBkdXBsaWNhdGUgPSBPYmplY3QuYXNzaWduKHt9LCB2YWx1ZSk7XG4gICAgICAgICAgICBPYmplY3Qua2V5cyhkdXBsaWNhdGUpLmZvckVhY2goIChrZXkpID0+IHtcbiAgICAgICAgICAgICAgICBkdXBsaWNhdGVba2V5XSA9IHRoaXMuZXZhbHVhdGVFeHByZXNzaW9uKGR1cGxpY2F0ZVtrZXldLCBjb250ZXh0KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIGR1cGxpY2F0ZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgZXZhbHVhdGVFeHByZXNzaW9uKHZhbHVlOiBzdHJpbmcsIGNvbnRleHQ/OiBhbnkpOiBzdHJpbmcge1xuICAgICAgICBjb25zdCBwYXR0ZXJuID0gbmV3IFJlZ0V4cCgvXFwkXFwoKC4qXFwpPylcXCkvZyk7XG4gICAgICAgIGNvbnN0IG1hdGNoZXMgPSBwYXR0ZXJuLmV4ZWModmFsdWUpO1xuXG4gICAgICAgIGlmIChtYXRjaGVzICYmIG1hdGNoZXMubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgY29uc3QgZXhwcmVzc2lvbiA9IG1hdGNoZXNbMV07XG4gICAgICAgICAgICBjb25zdCBmbiA9IG5ldyBGdW5jdGlvbignY29udGV4dCcsIGByZXR1cm4gJHtleHByZXNzaW9ufWApO1xuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gZm4oY29udGV4dCk7XG5cbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbn1cbiJdfQ==