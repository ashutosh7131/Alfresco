import { Injectable } from '@angular/core';
import { ExtensionLoaderService } from './extension-loader.service';
import * as i0 from "@angular/core";
import * as i1 from "./extension-loader.service";
export class RuleService {
    constructor(loader) {
        this.loader = loader;
        this.context = null;
        this.rules = [];
        this.evaluators = {};
    }
    setup(config) {
        this.rules = this.loader.getRules(config);
    }
    setEvaluators(values) {
        if (values) {
            this.evaluators = Object.assign({}, this.evaluators, values);
        }
    }
    getRuleById(id) {
        return this.rules.find((ref) => ref.id === id);
    }
    getEvaluator(key) {
        if (key && key.startsWith('!')) {
            const fn = this.evaluators[key.substring(1)];
            return (context, ...args) => {
                return !fn(context, ...args);
            };
        }
        return this.evaluators[key];
    }
    evaluateRule(ruleId, context) {
        const ruleRef = this.getRuleById(ruleId);
        context = context || this.context;
        if (ruleRef) {
            const evaluator = this.getEvaluator(ruleRef.type);
            if (evaluator) {
                return evaluator(context, ...ruleRef.parameters);
            }
        }
        else {
            const evaluator = this.getEvaluator(ruleId);
            if (evaluator) {
                return evaluator(context);
            }
        }
        return false;
    }
}
RuleService.ɵprov = i0.ɵɵdefineInjectable({ factory: function RuleService_Factory() { return new RuleService(i0.ɵɵinject(i1.ExtensionLoaderService)); }, token: RuleService, providedIn: "root" });
RuleService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
RuleService.ctorParameters = () => [
    { type: ExtensionLoaderService }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicnVsZS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Ii9ob21lL3RyYXZpcy9idWlsZC9BbGZyZXNjby9hbGZyZXNjby1uZzItY29tcG9uZW50cy9saWIvZXh0ZW5zaW9ucy9zcmMvIiwic291cmNlcyI6WyJsaWIvc2VydmljZXMvcnVsZS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWlCQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRzNDLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLDRCQUE0QixDQUFDOzs7QUFLcEUsTUFBTSxPQUFPLFdBQVc7SUFLcEIsWUFBc0IsTUFBOEI7UUFBOUIsV0FBTSxHQUFOLE1BQU0sQ0FBd0I7UUFKcEQsWUFBTyxHQUFnQixJQUFJLENBQUM7UUFDNUIsVUFBSyxHQUFtQixFQUFFLENBQUM7UUFDM0IsZUFBVSxHQUFxQyxFQUFFLENBQUM7SUFFSyxDQUFDO0lBRXhELEtBQUssQ0FBQyxNQUF1QjtRQUN6QixJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQzlDLENBQUM7SUFNRCxhQUFhLENBQUMsTUFBd0M7UUFDbEQsSUFBSSxNQUFNLEVBQUU7WUFDUixJQUFJLENBQUMsVUFBVSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBQyxVQUFVLEVBQUUsTUFBTSxDQUFDLENBQUM7U0FDaEU7SUFDTCxDQUFDO0lBT0QsV0FBVyxDQUFDLEVBQVU7UUFDbEIsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztJQUNuRCxDQUFDO0lBT0QsWUFBWSxDQUFDLEdBQVc7UUFDcEIsSUFBSSxHQUFHLElBQUksR0FBRyxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsRUFBRTtZQUM1QixNQUFNLEVBQUUsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUM3QyxPQUFPLENBQUMsT0FBb0IsRUFBRSxHQUFHLElBQXFCLEVBQVcsRUFBRTtnQkFDL0QsT0FBTyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQztZQUNqQyxDQUFDLENBQUM7U0FDTDtRQUNELE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNoQyxDQUFDO0lBUUQsWUFBWSxDQUFDLE1BQWMsRUFBRSxPQUFxQjtRQUM5QyxNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3pDLE9BQU8sR0FBRyxPQUFPLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQztRQUVsQyxJQUFJLE9BQU8sRUFBRTtZQUNULE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ2xELElBQUksU0FBUyxFQUFFO2dCQUNYLE9BQU8sU0FBUyxDQUFDLE9BQU8sRUFBRSxHQUFHLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQzthQUNwRDtTQUNKO2FBQU07WUFDSCxNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQzVDLElBQUksU0FBUyxFQUFFO2dCQUNYLE9BQU8sU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDO2FBQzdCO1NBQ0o7UUFDRCxPQUFPLEtBQUssQ0FBQztJQUNqQixDQUFDOzs7O1lBdEVKLFVBQVUsU0FBQztnQkFDUixVQUFVLEVBQUUsTUFBTTthQUNyQjs7O1lBSlEsc0JBQXNCIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUnVsZVJlZiwgUnVsZUNvbnRleHQsIFJ1bGVFdmFsdWF0b3IsIFJ1bGVQYXJhbWV0ZXIgfSBmcm9tICcuLi9jb25maWcvcnVsZS5leHRlbnNpb25zJztcbmltcG9ydCB7IEV4dGVuc2lvbkNvbmZpZyB9IGZyb20gJy4uL2NvbmZpZy9leHRlbnNpb24uY29uZmlnJztcbmltcG9ydCB7IEV4dGVuc2lvbkxvYWRlclNlcnZpY2UgfSBmcm9tICcuL2V4dGVuc2lvbi1sb2FkZXIuc2VydmljZSc7XG5cbkBJbmplY3RhYmxlKHtcbiAgICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgUnVsZVNlcnZpY2Uge1xuICAgIGNvbnRleHQ6IFJ1bGVDb250ZXh0ID0gbnVsbDtcbiAgICBydWxlczogQXJyYXk8UnVsZVJlZj4gPSBbXTtcbiAgICBldmFsdWF0b3JzOiB7IFtrZXk6IHN0cmluZ106IFJ1bGVFdmFsdWF0b3IgfSA9IHt9O1xuXG4gICAgY29uc3RydWN0b3IocHJvdGVjdGVkIGxvYWRlcjogRXh0ZW5zaW9uTG9hZGVyU2VydmljZSkge31cblxuICAgIHNldHVwKGNvbmZpZzogRXh0ZW5zaW9uQ29uZmlnKSB7XG4gICAgICAgIHRoaXMucnVsZXMgPSB0aGlzLmxvYWRlci5nZXRSdWxlcyhjb25maWcpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFkZHMgb25lIG9yIG1vcmUgbmV3IHJ1bGUgZXZhbHVhdG9ycyB0byB0aGUgZXhpc3Rpbmcgc2V0LlxuICAgICAqIEBwYXJhbSB2YWx1ZXMgVGhlIG5ldyBldmFsdWF0b3JzIHRvIGFkZFxuICAgICAqL1xuICAgIHNldEV2YWx1YXRvcnModmFsdWVzOiB7IFtrZXk6IHN0cmluZ106IFJ1bGVFdmFsdWF0b3IgfSkge1xuICAgICAgICBpZiAodmFsdWVzKSB7XG4gICAgICAgICAgICB0aGlzLmV2YWx1YXRvcnMgPSBPYmplY3QuYXNzaWduKHt9LCB0aGlzLmV2YWx1YXRvcnMsIHZhbHVlcyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXRyaWV2ZXMgYSBydWxlIHVzaW5nIGl0cyBJRCB2YWx1ZS5cbiAgICAgKiBAcGFyYW0gaWQgVGhlIElEIHZhbHVlIHRvIGxvb2sgZm9yXG4gICAgICogQHJldHVybnMgVGhlIHJ1bGUgb3IgbnVsbCBpZiBub3QgZm91bmRcbiAgICAgKi9cbiAgICBnZXRSdWxlQnlJZChpZDogc3RyaW5nKTogUnVsZVJlZiB7XG4gICAgICAgIHJldHVybiB0aGlzLnJ1bGVzLmZpbmQoKHJlZikgPT4gcmVmLmlkID09PSBpZCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0cmlldmVzIGEgUnVsZUV2YWx1YXRvciBmdW5jdGlvbiB1c2luZyBpdHMga2V5IG5hbWUuXG4gICAgICogQHBhcmFtIGtleSBLZXkgbmFtZSB0byBsb29rIGZvclxuICAgICAqIEByZXR1cm5zIFJ1bGVFdmFsdWF0b3Igb3IgbnVsbCBpZiBub3QgZm91bmRcbiAgICAgKi9cbiAgICBnZXRFdmFsdWF0b3Ioa2V5OiBzdHJpbmcpOiBSdWxlRXZhbHVhdG9yIHtcbiAgICAgICAgaWYgKGtleSAmJiBrZXkuc3RhcnRzV2l0aCgnIScpKSB7XG4gICAgICAgICAgICBjb25zdCBmbiA9IHRoaXMuZXZhbHVhdG9yc1trZXkuc3Vic3RyaW5nKDEpXTtcbiAgICAgICAgICAgIHJldHVybiAoY29udGV4dDogUnVsZUNvbnRleHQsIC4uLmFyZ3M6IFJ1bGVQYXJhbWV0ZXJbXSk6IGJvb2xlYW4gPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiAhZm4oY29udGV4dCwgLi4uYXJncyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmV2YWx1YXRvcnNba2V5XTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBFdmFsdWF0ZXMgYSBydWxlLlxuICAgICAqIEBwYXJhbSBydWxlSWQgSUQgb2YgdGhlIHJ1bGUgdG8gZXZhbHVhdGVcbiAgICAgKiBAcGFyYW0gY29udGV4dCBDdXN0b20gcnVsZSBleGVjdXRpb24gY29udGV4dC5cbiAgICAgKiBAcmV0dXJucyBUcnVlIGlmIHRoZSBydWxlIHBhc3NlZCwgZmFsc2Ugb3RoZXJ3aXNlXG4gICAgICovXG4gICAgZXZhbHVhdGVSdWxlKHJ1bGVJZDogc3RyaW5nLCBjb250ZXh0PzogUnVsZUNvbnRleHQpOiBib29sZWFuIHtcbiAgICAgICAgY29uc3QgcnVsZVJlZiA9IHRoaXMuZ2V0UnVsZUJ5SWQocnVsZUlkKTtcbiAgICAgICAgY29udGV4dCA9IGNvbnRleHQgfHwgdGhpcy5jb250ZXh0O1xuXG4gICAgICAgIGlmIChydWxlUmVmKSB7XG4gICAgICAgICAgICBjb25zdCBldmFsdWF0b3IgPSB0aGlzLmdldEV2YWx1YXRvcihydWxlUmVmLnR5cGUpO1xuICAgICAgICAgICAgaWYgKGV2YWx1YXRvcikge1xuICAgICAgICAgICAgICAgIHJldHVybiBldmFsdWF0b3IoY29udGV4dCwgLi4ucnVsZVJlZi5wYXJhbWV0ZXJzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IGV2YWx1YXRvciA9IHRoaXMuZ2V0RXZhbHVhdG9yKHJ1bGVJZCk7XG4gICAgICAgICAgICBpZiAoZXZhbHVhdG9yKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGV2YWx1YXRvcihjb250ZXh0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxufVxuIl19