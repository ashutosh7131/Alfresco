import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { ContentActionType } from '../config/action.extensions';
import { filterEnabled, getValue, mergeObjects, sortByOrder } from '../config/extension-utils';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
export class ExtensionLoaderService {
    constructor(http) {
        this.http = http;
    }
    load(configPath, pluginsPath, extensions) {
        return new Promise((resolve) => {
            this.loadConfig(configPath, 0).then((result) => {
                if (result) {
                    let config = result.config;
                    const override = sessionStorage.getItem('app.extension.config');
                    if (override) {
                        config = JSON.parse(override);
                    }
                    if (!config.$references || !config.$references.length) {
                        config.$references = this.filterIgnoredExtensions(extensions || [], config.$ignoreReferenceList);
                    }
                    else {
                        config.$references = this.filterIgnoredExtensions(config.$references, config.$ignoreReferenceList);
                    }
                    if (config.$references && config.$references.length > 0) {
                        const plugins = config.$references.map((name, idx) => this.loadConfig(`${pluginsPath}/${name}`, idx));
                        Promise.all(plugins).then((results) => {
                            const configs = results
                                .filter((entry) => entry)
                                .sort(sortByOrder)
                                .map((entry) => entry.config);
                            if (configs.length > 0) {
                                config = mergeObjects(config, ...configs);
                            }
                            config = Object.assign(Object.assign(Object.assign({}, config), this.getMetadata(result.config)), { $references: configs.map((ext) => this.getMetadata(ext)) });
                            resolve(config);
                        });
                    }
                    else {
                        resolve(config);
                    }
                }
            });
        });
    }
    getMetadata(config) {
        const result = {};
        Object
            .keys(config)
            .filter((key) => key.startsWith('$'))
            .forEach((key) => {
            result[key] = config[key];
        });
        return result;
    }
    loadConfig(url, order) {
        return new Promise((resolve) => {
            this.http.get(url).subscribe((config) => {
                resolve({
                    order,
                    config
                });
            }, () => {
                resolve(null);
            });
        });
    }
    getElements(config, key, fallback = []) {
        const values = getValue(config, key) || fallback || [];
        return values.filter(filterEnabled).sort(sortByOrder);
    }
    getContentActions(config, key) {
        return this.getElements(config, key).map(this.setActionDefaults);
    }
    getRules(config) {
        if (config && config.rules) {
            return config.rules;
        }
        return [];
    }
    getRoutes(config) {
        if (config) {
            return config.routes || [];
        }
        return [];
    }
    getActions(config) {
        if (config) {
            return config.actions || [];
        }
        return [];
    }
    getFeatures(config) {
        if (config) {
            return config.features || [];
        }
        return [];
    }
    setActionDefaults(action) {
        if (action) {
            action.type = action.type || ContentActionType.default;
            action.icon = action.icon || 'extension';
        }
        return action;
    }
    filterIgnoredExtensions(extensions, ignoreReferenceList) {
        if (!ignoreReferenceList || !ignoreReferenceList.length) {
            return extensions;
        }
        return extensions.map((file) => file.match('(?!.*\/).+')[0]).filter((fileName) => !ignoreReferenceList.includes(fileName));
    }
}
ExtensionLoaderService.ɵprov = i0.ɵɵdefineInjectable({ factory: function ExtensionLoaderService_Factory() { return new ExtensionLoaderService(i0.ɵɵinject(i1.HttpClient)); }, token: ExtensionLoaderService, providedIn: "root" });
ExtensionLoaderService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
ExtensionLoaderService.ctorParameters = () => [
    { type: HttpClient }
];
//# sourceMappingURL=data:application/json;base64,