import { __awaiter } from "tslib";
import { Injectable, InjectionToken, Inject } from '@angular/core';
import { ExtensionLoaderService } from './extension-loader.service';
import * as core from '../evaluators/core.evaluators';
import { ComponentRegisterService } from './component-register.service';
import { RuleService } from './rule.service';
import { BehaviorSubject } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "./extension-loader.service";
import * as i2 from "./component-register.service";
import * as i3 from "./rule.service";
export function extensionJsonsFactory() {
    return [];
}
export const EXTENSION_JSONS = new InjectionToken('extension-jsons', {
    providedIn: 'root',
    factory: extensionJsonsFactory
});
export function provideExtensionConfig(jsons) {
    return {
        provide: EXTENSION_JSONS,
        useValue: jsons,
        multi: true
    };
}
export class ExtensionService {
    constructor(loader, componentRegister, ruleService, extensionJsons) {
        this.loader = loader;
        this.componentRegister = componentRegister;
        this.ruleService = ruleService;
        this.extensionJsons = extensionJsons;
        this.config = null;
        this.configPath = 'assets/app.extensions.json';
        this.pluginsPath = 'assets/plugins';
        this.routes = [];
        this.actions = [];
        this.features = [];
        this.authGuards = {};
        this.onSetup$ = new BehaviorSubject(this.config);
        this.setup$ = this.onSetup$.asObservable();
    }
    load() {
        return __awaiter(this, void 0, void 0, function* () {
            const config = yield this.loader.load(this.configPath, this.pluginsPath, this.extensionJsons.flat());
            this.setup(config);
            return config;
        });
    }
    setup(config) {
        if (!config) {
            console.warn('Extension configuration not found');
            return;
        }
        this.config = config;
        this.setEvaluators({
            'core.every': core.every,
            'core.some': core.some,
            'core.not': core.not
        });
        this.actions = this.loader.getActions(config);
        this.routes = this.loader.getRoutes(config);
        this.features = this.loader.getFeatures(config);
        this.ruleService.setup(config);
        this.onSetup$.next(config);
    }
    getFeature(key) {
        const properties = Array.isArray(key) ? [key] : key.split('.');
        return properties.reduce((prev, curr) => prev && prev[curr], this.features) || [];
    }
    getElements(key, fallback = []) {
        return this.loader.getElements(this.config, key, fallback);
    }
    setEvaluators(values) {
        this.ruleService.setEvaluators(values);
    }
    setAuthGuards(values) {
        if (values) {
            this.authGuards = Object.assign({}, this.authGuards, values);
        }
    }
    setComponents(values) {
        this.componentRegister.setComponents(values);
    }
    getRouteById(id) {
        return this.routes.find((route) => route.id === id);
    }
    getAuthGuards(ids) {
        return (ids || [])
            .map((id) => this.authGuards[id])
            .filter((guard) => guard);
    }
    getActionById(id) {
        return this.actions.find((action) => action.id === id);
    }
    getEvaluator(key) {
        return this.ruleService.getEvaluator(key);
    }
    evaluateRule(ruleId, context) {
        return this.ruleService.evaluateRule(ruleId, context);
    }
    getComponentById(id) {
        return this.componentRegister.getComponentById(id);
    }
    getRuleById(id) {
        return this.ruleService.getRuleById(id);
    }
    runExpression(value, context) {
        if (typeof value === 'string') {
            return this.evaluateExpression(value, context);
        }
        else {
            const duplicate = Object.assign({}, value);
            Object.keys(duplicate).forEach((key) => {
                duplicate[key] = this.evaluateExpression(duplicate[key], context);
            });
            return duplicate;
        }
    }
    evaluateExpression(value, context) {
        const pattern = new RegExp(/\$\((.*\)?)\)/g);
        const matches = pattern.exec(value);
        if (matches && matches.length > 1) {
            const expression = matches[1];
            const fn = new Function('context', `return ${expression}`);
            const result = fn(context);
            return result;
        }
        return value;
    }
}
ExtensionService.ɵprov = i0.ɵɵdefineInjectable({ factory: function ExtensionService_Factory() { return new ExtensionService(i0.ɵɵinject(i1.ExtensionLoaderService), i0.ɵɵinject(i2.ComponentRegisterService), i0.ɵɵinject(i3.RuleService), i0.ɵɵinject(EXTENSION_JSONS)); }, token: ExtensionService, providedIn: "root" });
ExtensionService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
ExtensionService.ctorParameters = () => [
    { type: ExtensionLoaderService },
    { type: ComponentRegisterService },
    { type: RuleService },
    { type: Array, decorators: [{ type: Inject, args: [EXTENSION_JSONS,] }] }
];
//# sourceMappingURL=data:application/json;base64,