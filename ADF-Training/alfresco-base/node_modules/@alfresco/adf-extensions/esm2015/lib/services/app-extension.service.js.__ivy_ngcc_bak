import { __awaiter } from "tslib";
import { Injectable } from '@angular/core';
import { ExtensionService } from '../services/extension.service';
import { BehaviorSubject } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "./extension.service";
export class AppExtensionService {
    constructor(extensionService) {
        this.extensionService = extensionService;
        this._references = new BehaviorSubject([]);
        this.references$ = this._references.asObservable();
    }
    load() {
        return __awaiter(this, void 0, void 0, function* () {
            const config = yield this.extensionService.load();
            this.setup(config);
        });
    }
    setup(config) {
        if (!config) {
            return;
        }
        const references = (config.$references || [])
            .filter((entry) => typeof entry === 'object')
            .map((entry) => entry);
        this._references.next(references);
    }
    getDocumentListPreset(key) {
        return this.extensionService
            .getElements(`features.documentList.${key}`)
            .filter((entry) => !entry.disabled);
    }
    getViewerExtensions() {
        return this.extensionService
            .getElements('features.viewer.content')
            .filter((extension) => !this.isViewerExtensionDisabled(extension));
    }
    isViewerExtensionDisabled(extension) {
        if (extension) {
            if (extension.disabled) {
                return true;
            }
            if (extension.rules && extension.rules.disabled) {
                return this.extensionService.evaluateRule(extension.rules.disabled);
            }
        }
        return false;
    }
}
AppExtensionService.ɵprov = i0.ɵɵdefineInjectable({ factory: function AppExtensionService_Factory() { return new AppExtensionService(i0.ɵɵinject(i1.ExtensionService)); }, token: AppExtensionService, providedIn: "root" });
AppExtensionService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
AppExtensionService.ctorParameters = () => [
    { type: ExtensionService }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwLWV4dGVuc2lvbi5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Ii9ob21lL3RyYXZpcy9idWlsZC9BbGZyZXNjby9hbGZyZXNjby1uZzItY29tcG9uZW50cy9saWIvZXh0ZW5zaW9ucy9zcmMvIiwic291cmNlcyI6WyJsaWIvc2VydmljZXMvYXBwLWV4dGVuc2lvbi5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFpQkEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUzQyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUNqRSxPQUFPLEVBQWMsZUFBZSxFQUFFLE1BQU0sTUFBTSxDQUFDOzs7QUFPbkQsTUFBTSxPQUFPLG1CQUFtQjtJQUs1QixZQUFzQixnQkFBa0M7UUFBbEMscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFrQjtRQUpoRCxnQkFBVyxHQUFHLElBQUksZUFBZSxDQUFpQixFQUFFLENBQUMsQ0FBQztRQUsxRCxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDdkQsQ0FBQztJQUVLLElBQUk7O1lBQ04sTUFBTSxNQUFNLEdBQUcsTUFBTSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxFQUFFLENBQUM7WUFDbEQsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN2QixDQUFDO0tBQUE7SUFFRCxLQUFLLENBQUMsTUFBdUI7UUFDekIsSUFBSSxDQUFDLE1BQU0sRUFBRTtZQUNULE9BQU87U0FDVjtRQUVELE1BQU0sVUFBVSxHQUFHLENBQUMsTUFBTSxDQUFDLFdBQVcsSUFBSSxFQUFFLENBQUM7YUFDeEMsTUFBTSxDQUFDLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxPQUFPLEtBQUssS0FBSyxRQUFRLENBQUM7YUFDNUMsR0FBRyxDQUFDLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBZ0IsS0FBSyxDQUFDLENBQUM7UUFDMUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDdEMsQ0FBQztJQU9ELHFCQUFxQixDQUFDLEdBQVc7UUFDN0IsT0FBTyxJQUFJLENBQUMsZ0JBQWdCO2FBQ3pCLFdBQVcsQ0FDVix5QkFBeUIsR0FBRyxFQUFFLENBQy9CO2FBQ0EsTUFBTSxDQUFDLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUMxQyxDQUFDO0lBTUQsbUJBQW1CO1FBQ2YsT0FBTyxJQUFJLENBQUMsZ0JBQWdCO2FBQ3ZCLFdBQVcsQ0FBcUIseUJBQXlCLENBQUM7YUFDMUQsTUFBTSxDQUFDLENBQUMsU0FBUyxFQUFFLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyx5QkFBeUIsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO0lBQzNFLENBQUM7SUFFUyx5QkFBeUIsQ0FBQyxTQUE2QjtRQUM3RCxJQUFJLFNBQVMsRUFBRTtZQUNiLElBQUksU0FBUyxDQUFDLFFBQVEsRUFBRTtnQkFDdEIsT0FBTyxJQUFJLENBQUM7YUFDYjtZQUVELElBQUksU0FBUyxDQUFDLEtBQUssSUFBSSxTQUFTLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRTtnQkFDL0MsT0FBTyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsWUFBWSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUM7YUFDckU7U0FDRjtRQUVELE9BQU8sS0FBSyxDQUFDO0lBQ2pCLENBQUM7Ozs7WUEvREosVUFBVSxTQUFDO2dCQUNSLFVBQVUsRUFBRSxNQUFNO2FBQ3JCOzs7WUFQUSxnQkFBZ0IiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBFeHRlbnNpb25Db25maWcsIEV4dGVuc2lvblJlZiB9IGZyb20gJy4uL2NvbmZpZy9leHRlbnNpb24uY29uZmlnJztcbmltcG9ydCB7IEV4dGVuc2lvblNlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlcy9leHRlbnNpb24uc2VydmljZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBCZWhhdmlvclN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IFZpZXdlckV4dGVuc2lvblJlZiB9IGZyb20gJy4uL2NvbmZpZy92aWV3ZXIuZXh0ZW5zaW9ucyc7XG5pbXBvcnQgeyBEb2N1bWVudExpc3RQcmVzZXRSZWYgfSBmcm9tICcuLi9jb25maWcvZG9jdW1lbnQtbGlzdC5leHRlbnNpb25zJztcblxuQEluamVjdGFibGUoe1xuICAgIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBBcHBFeHRlbnNpb25TZXJ2aWNlIHtcbiAgICBwcml2YXRlIF9yZWZlcmVuY2VzID0gbmV3IEJlaGF2aW9yU3ViamVjdDxFeHRlbnNpb25SZWZbXT4oW10pO1xuXG4gICAgcmVmZXJlbmNlcyQ6IE9ic2VydmFibGU8RXh0ZW5zaW9uUmVmW10+O1xuXG4gICAgY29uc3RydWN0b3IocHJvdGVjdGVkIGV4dGVuc2lvblNlcnZpY2U6IEV4dGVuc2lvblNlcnZpY2UpIHtcbiAgICAgICAgdGhpcy5yZWZlcmVuY2VzJCA9IHRoaXMuX3JlZmVyZW5jZXMuYXNPYnNlcnZhYmxlKCk7XG4gICAgfVxuXG4gICAgYXN5bmMgbG9hZCgpIHtcbiAgICAgICAgY29uc3QgY29uZmlnID0gYXdhaXQgdGhpcy5leHRlbnNpb25TZXJ2aWNlLmxvYWQoKTtcbiAgICAgICAgdGhpcy5zZXR1cChjb25maWcpO1xuICAgIH1cblxuICAgIHNldHVwKGNvbmZpZzogRXh0ZW5zaW9uQ29uZmlnKSB7XG4gICAgICAgIGlmICghY29uZmlnKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCByZWZlcmVuY2VzID0gKGNvbmZpZy4kcmVmZXJlbmNlcyB8fCBbXSlcbiAgICAgICAgICAgIC5maWx0ZXIoKGVudHJ5KSA9PiB0eXBlb2YgZW50cnkgPT09ICdvYmplY3QnKVxuICAgICAgICAgICAgLm1hcCgoZW50cnkpID0+IDxFeHRlbnNpb25SZWY+IGVudHJ5KTtcbiAgICAgICAgdGhpcy5fcmVmZXJlbmNlcy5uZXh0KHJlZmVyZW5jZXMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFByb3ZpZGVzIGEgY29sbGVjdGlvbiBvZiBkb2N1bWVudCBsaXN0IGNvbHVtbnMgZm9yIHRoZSBwYXJ0aWN1bGFyIHByZXNldC5cbiAgICAgKiBUaGUgcmVzdWx0IGlzIGZpbHRlcmVkIGJ5IHRoZSAqKmRpc2FibGVkKiogc3RhdGUuXG4gICAgICogQHBhcmFtIGtleSBQcmVzZXQga2V5LlxuICAgICAqL1xuICAgIGdldERvY3VtZW50TGlzdFByZXNldChrZXk6IHN0cmluZyk6IERvY3VtZW50TGlzdFByZXNldFJlZltdIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZXh0ZW5zaW9uU2VydmljZVxuICAgICAgICAgIC5nZXRFbGVtZW50czxEb2N1bWVudExpc3RQcmVzZXRSZWY+KFxuICAgICAgICAgICAgYGZlYXR1cmVzLmRvY3VtZW50TGlzdC4ke2tleX1gXG4gICAgICAgICAgKVxuICAgICAgICAgIC5maWx0ZXIoKGVudHJ5KSA9PiAhZW50cnkuZGlzYWJsZWQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFByb3ZpZGVzIGEgbGlzdCBvZiB0aGUgVmlld2VyIGNvbnRlbnQgZXh0ZW5zaW9ucyxcbiAgICAgKiBmaWx0ZXJlZCBieSAqKmRpc2FibGVkKiogc3RhdGUgYW5kICoqcnVsZXMqKi5cbiAgICAgKi9cbiAgICBnZXRWaWV3ZXJFeHRlbnNpb25zKCk6IFZpZXdlckV4dGVuc2lvblJlZltdIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZXh0ZW5zaW9uU2VydmljZVxuICAgICAgICAgICAgLmdldEVsZW1lbnRzPFZpZXdlckV4dGVuc2lvblJlZj4oJ2ZlYXR1cmVzLnZpZXdlci5jb250ZW50JylcbiAgICAgICAgICAgIC5maWx0ZXIoKGV4dGVuc2lvbikgPT4gIXRoaXMuaXNWaWV3ZXJFeHRlbnNpb25EaXNhYmxlZChleHRlbnNpb24pKTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgaXNWaWV3ZXJFeHRlbnNpb25EaXNhYmxlZChleHRlbnNpb246IFZpZXdlckV4dGVuc2lvblJlZik6IGJvb2xlYW4ge1xuICAgICAgICBpZiAoZXh0ZW5zaW9uKSB7XG4gICAgICAgICAgaWYgKGV4dGVuc2lvbi5kaXNhYmxlZCkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGV4dGVuc2lvbi5ydWxlcyAmJiBleHRlbnNpb24ucnVsZXMuZGlzYWJsZWQpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmV4dGVuc2lvblNlcnZpY2UuZXZhbHVhdGVSdWxlKGV4dGVuc2lvbi5ydWxlcy5kaXNhYmxlZCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbn1cbiJdfQ==