/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { DynamicExtensionComponent } from './components/dynamic-component/dynamic.component';
import { DynamicTabComponent } from './components/dynamic-tab/dynamic-tab.component';
import { DynamicColumnComponent } from './components/dynamic-column/dynamic-column.component';
import { PreviewExtensionComponent } from './components/viewer/preview-extension.component';
import { NgModule, APP_INITIALIZER } from '@angular/core';
import { AppExtensionService } from './services/app-extension.service';
import { setupExtensions } from './services/startup-extension-factory';
import * as ɵngcc0 from '@angular/core';
export class ExtensionsModule {
    static forRoot() {
        return {
            ngModule: ExtensionsModule,
            providers: [
                {
                    provide: APP_INITIALIZER,
                    useFactory: setupExtensions,
                    deps: [AppExtensionService],
                    multi: true
                }
            ]
        };
    }
    static forChild() {
        return {
            ngModule: ExtensionsModule
        };
    }
}
ExtensionsModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: ExtensionsModule });
ExtensionsModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function ExtensionsModule_Factory(t) { return new (t || ExtensionsModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ExtensionsModule, { declarations: function () { return [DynamicExtensionComponent,
        DynamicTabComponent,
        DynamicColumnComponent,
        PreviewExtensionComponent]; }, exports: function () { return [DynamicExtensionComponent,
        DynamicTabComponent,
        DynamicColumnComponent,
        PreviewExtensionComponent]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtensionsModule, [{
        type: NgModule,
        args: [{
                declarations: [
                    DynamicExtensionComponent,
                    DynamicTabComponent,
                    DynamicColumnComponent,
                    PreviewExtensionComponent
                ],
                exports: [
                    DynamicExtensionComponent,
                    DynamicTabComponent,
                    DynamicColumnComponent,
                    PreviewExtensionComponent
                ]
            }]
    }], null, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXh0ZW5zaW9ucy5tb2R1bGUuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL2hvbWUvdHJhdmlzL2J1aWxkL0FsZnJlc2NvL2FsZnJlc2NvLW5nMi1jb21wb25lbnRzL2xpYi9leHRlbnNpb25zL3NyYy9saWIvZXh0ZW5zaW9ucy5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUVILE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxNQUFNLGtEQUFrRCxDQUFDO0FBQzdGLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLGdEQUFnRCxDQUFDO0FBQ3JGLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLHNEQUFzRCxDQUFDO0FBQzlGLE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxNQUFNLGlEQUFpRCxDQUFDO0FBQzVGLE9BQU8sRUFBRSxRQUFRLEVBQXVCLGVBQWUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMvRSxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQztBQUN2RSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sc0NBQXNDLENBQUM7O0FBZ0J2RSxNQUFNLE9BQU8sZ0JBQWdCO0FBQzdCLElBQUksTUFBTSxDQUFDLE9BQU87QUFBSyxRQUNmLE9BQU87QUFDZixZQUFZLFFBQVEsRUFBRSxnQkFBZ0I7QUFDdEMsWUFBWSxTQUFTLEVBQUU7QUFDdkIsZ0JBQWdCO0FBQ2hCLG9CQUFvQixPQUFPLEVBQUUsZUFBZTtBQUM1QyxvQkFBb0IsVUFBVSxFQUFFLGVBQWU7QUFDL0Msb0JBQW9CLElBQUksRUFBRSxDQUFDLG1CQUFtQixDQUFDO0FBQy9DLG9CQUFvQixLQUFLLEVBQUUsSUFBSTtBQUMvQixpQkFBaUI7QUFDakIsYUFBYTtBQUNiLFNBQVMsQ0FBQztBQUNWLElBQUksQ0FBQztBQUNMLElBQ0ksTUFBTSxDQUFDLFFBQVE7QUFBSyxRQUNoQixPQUFPO0FBQ2YsWUFBWSxRQUFRLEVBQUUsZ0JBQWdCO0FBQ3RDLFNBQVMsQ0FBQztBQUNWLElBQUksQ0FBQztBQUNMOzRDQWxDQyxRQUFRLFNBQUM7RUFDTixZQUFZLEVBQUUsc0JBQ1YseUJBQXlCLHNCQUN6QixtQkFBbUIsc0JBQ25CO01BQXNCLHNCQUN0Qix5QkFBeUIsa0JBQzVCLGtCQUNELE9BQU8sRUFBRSxzQkFDTCx5QkFBeUIsc0JBQ3pCO1dBQW1CO0lBQ25CLHNCQUFzQjtnQkFDdEIseUJBQXlCLGtCQUM1QixjQUNKOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OzswQkFDSTtBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgRHluYW1pY0V4dGVuc2lvbkNvbXBvbmVudCB9IGZyb20gJy4vY29tcG9uZW50cy9keW5hbWljLWNvbXBvbmVudC9keW5hbWljLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBEeW5hbWljVGFiQ29tcG9uZW50IH0gZnJvbSAnLi9jb21wb25lbnRzL2R5bmFtaWMtdGFiL2R5bmFtaWMtdGFiLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBEeW5hbWljQ29sdW1uQ29tcG9uZW50IH0gZnJvbSAnLi9jb21wb25lbnRzL2R5bmFtaWMtY29sdW1uL2R5bmFtaWMtY29sdW1uLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBQcmV2aWV3RXh0ZW5zaW9uQ29tcG9uZW50IH0gZnJvbSAnLi9jb21wb25lbnRzL3ZpZXdlci9wcmV2aWV3LWV4dGVuc2lvbi5jb21wb25lbnQnO1xuaW1wb3J0IHsgTmdNb2R1bGUsIE1vZHVsZVdpdGhQcm92aWRlcnMsIEFQUF9JTklUSUFMSVpFUiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQXBwRXh0ZW5zaW9uU2VydmljZSB9IGZyb20gJy4vc2VydmljZXMvYXBwLWV4dGVuc2lvbi5zZXJ2aWNlJztcbmltcG9ydCB7IHNldHVwRXh0ZW5zaW9ucyB9IGZyb20gJy4vc2VydmljZXMvc3RhcnR1cC1leHRlbnNpb24tZmFjdG9yeSc7XG5cbkBOZ01vZHVsZSh7XG4gICAgZGVjbGFyYXRpb25zOiBbXG4gICAgICAgIER5bmFtaWNFeHRlbnNpb25Db21wb25lbnQsXG4gICAgICAgIER5bmFtaWNUYWJDb21wb25lbnQsXG4gICAgICAgIER5bmFtaWNDb2x1bW5Db21wb25lbnQsXG4gICAgICAgIFByZXZpZXdFeHRlbnNpb25Db21wb25lbnRcbiAgICBdLFxuICAgIGV4cG9ydHM6IFtcbiAgICAgICAgRHluYW1pY0V4dGVuc2lvbkNvbXBvbmVudCxcbiAgICAgICAgRHluYW1pY1RhYkNvbXBvbmVudCxcbiAgICAgICAgRHluYW1pY0NvbHVtbkNvbXBvbmVudCxcbiAgICAgICAgUHJldmlld0V4dGVuc2lvbkNvbXBvbmVudFxuICAgIF1cbn0pXG5leHBvcnQgY2xhc3MgRXh0ZW5zaW9uc01vZHVsZSB7XG4gICAgc3RhdGljIGZvclJvb3QoKTogTW9kdWxlV2l0aFByb3ZpZGVyczxFeHRlbnNpb25zTW9kdWxlPiB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBuZ01vZHVsZTogRXh0ZW5zaW9uc01vZHVsZSxcbiAgICAgICAgICAgIHByb3ZpZGVyczogW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgcHJvdmlkZTogQVBQX0lOSVRJQUxJWkVSLFxuICAgICAgICAgICAgICAgICAgICB1c2VGYWN0b3J5OiBzZXR1cEV4dGVuc2lvbnMsXG4gICAgICAgICAgICAgICAgICAgIGRlcHM6IFtBcHBFeHRlbnNpb25TZXJ2aWNlXSxcbiAgICAgICAgICAgICAgICAgICAgbXVsdGk6IHRydWVcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgc3RhdGljIGZvckNoaWxkKCk6IE1vZHVsZVdpdGhQcm92aWRlcnM8RXh0ZW5zaW9uc01vZHVsZT4ge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbmdNb2R1bGU6IEV4dGVuc2lvbnNNb2R1bGVcbiAgICAgICAgfTtcbiAgICB9XG59XG4iXX0=