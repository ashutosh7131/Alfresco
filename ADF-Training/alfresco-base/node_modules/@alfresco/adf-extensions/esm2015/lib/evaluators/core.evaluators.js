/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
export function not(context, ...args) {
    if (!args || args.length === 0) {
        return false;
    }
    return args
        .every((arg) => {
        const evaluator = context.getEvaluator(arg.value);
        if (!evaluator) {
            console.warn('evaluator not found: ' + arg.value);
            return false;
        }
        return !evaluator(context, ...(arg.parameters || []));
    });
}
export function every(context, ...args) {
    if (!args || args.length === 0) {
        return false;
    }
    return args
        .every((arg) => {
        const evaluator = context.getEvaluator(arg.value);
        if (!evaluator) {
            console.warn('evaluator not found: ' + arg.value);
            return false;
        }
        return evaluator(context, ...(arg.parameters || []));
    });
}
export function some(context, ...args) {
    if (!args || args.length === 0) {
        return false;
    }
    return args
        .some((arg) => {
        const evaluator = context.getEvaluator(arg.value);
        if (!evaluator) {
            console.warn('evaluator not found: ' + arg.value);
            return false;
        }
        return evaluator(context, ...(arg.parameters || []));
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29yZS5ldmFsdWF0b3JzLmpzIiwic291cmNlUm9vdCI6Ii9ob21lL3RyYXZpcy9idWlsZC9BbGZyZXNjby9hbGZyZXNjby1uZzItY29tcG9uZW50cy9saWIvZXh0ZW5zaW9ucy9zcmMvIiwic291cmNlcyI6WyJsaWIvZXZhbHVhdG9ycy9jb3JlLmV2YWx1YXRvcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7OztHQWVHO0FBSUgsTUFBTSxVQUFVLEdBQUcsQ0FBQyxPQUFvQixFQUFFLEdBQUcsSUFBcUI7SUFDOUQsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtRQUM1QixPQUFPLEtBQUssQ0FBQztLQUNoQjtJQUVELE9BQU8sSUFBSTtTQUNOLEtBQUssQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFO1FBQ1gsTUFBTSxTQUFTLEdBQUcsT0FBTyxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDbEQsSUFBSSxDQUFDLFNBQVMsRUFBRTtZQUNaLE9BQU8sQ0FBQyxJQUFJLENBQUMsdUJBQXVCLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ2xELE9BQU8sS0FBSyxDQUFDO1NBQ2hCO1FBQ0QsT0FBTyxDQUFDLFNBQVMsQ0FBQyxPQUFPLEVBQUUsR0FBRyxDQUFDLEdBQUcsQ0FBQyxVQUFVLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQztJQUMxRCxDQUFDLENBQUMsQ0FBQztBQUNYLENBQUM7QUFFRCxNQUFNLFVBQVUsS0FBSyxDQUFDLE9BQW9CLEVBQUUsR0FBRyxJQUFxQjtJQUNoRSxJQUFJLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1FBQzVCLE9BQU8sS0FBSyxDQUFDO0tBQ2hCO0lBRUQsT0FBTyxJQUFJO1NBQ04sS0FBSyxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUU7UUFDWCxNQUFNLFNBQVMsR0FBRyxPQUFPLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNsRCxJQUFJLENBQUMsU0FBUyxFQUFFO1lBQ1osT0FBTyxDQUFDLElBQUksQ0FBQyx1QkFBdUIsR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDbEQsT0FBTyxLQUFLLENBQUM7U0FDaEI7UUFDRCxPQUFPLFNBQVMsQ0FBQyxPQUFPLEVBQUUsR0FBRyxDQUFDLEdBQUcsQ0FBQyxVQUFVLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQztJQUN6RCxDQUFDLENBQUMsQ0FBQztBQUNYLENBQUM7QUFFRCxNQUFNLFVBQVUsSUFBSSxDQUFDLE9BQW9CLEVBQUUsR0FBRyxJQUFxQjtJQUMvRCxJQUFJLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1FBQzVCLE9BQU8sS0FBSyxDQUFDO0tBQ2hCO0lBRUQsT0FBTyxJQUFJO1NBQ04sSUFBSSxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUU7UUFDVixNQUFNLFNBQVMsR0FBRyxPQUFPLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNsRCxJQUFJLENBQUMsU0FBUyxFQUFFO1lBQ1osT0FBTyxDQUFDLElBQUksQ0FBQyx1QkFBdUIsR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDbEQsT0FBTyxLQUFLLENBQUM7U0FDaEI7UUFDRCxPQUFPLFNBQVMsQ0FBQyxPQUFPLEVBQUUsR0FBRyxDQUFDLEdBQUcsQ0FBQyxVQUFVLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQztJQUN6RCxDQUFDLENBQUMsQ0FBQztBQUNYLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBSdWxlQ29udGV4dCwgUnVsZVBhcmFtZXRlciB9IGZyb20gJy4uL2NvbmZpZy9ydWxlLmV4dGVuc2lvbnMnO1xuXG5leHBvcnQgZnVuY3Rpb24gbm90KGNvbnRleHQ6IFJ1bGVDb250ZXh0LCAuLi5hcmdzOiBSdWxlUGFyYW1ldGVyW10pOiBib29sZWFuIHtcbiAgICBpZiAoIWFyZ3MgfHwgYXJncy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHJldHVybiBhcmdzXG4gICAgICAgIC5ldmVyeSgoYXJnKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBldmFsdWF0b3IgPSBjb250ZXh0LmdldEV2YWx1YXRvcihhcmcudmFsdWUpO1xuICAgICAgICAgICAgaWYgKCFldmFsdWF0b3IpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ2V2YWx1YXRvciBub3QgZm91bmQ6ICcgKyBhcmcudmFsdWUpO1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiAhZXZhbHVhdG9yKGNvbnRleHQsIC4uLihhcmcucGFyYW1ldGVycyB8fCBbXSkpO1xuICAgICAgICB9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGV2ZXJ5KGNvbnRleHQ6IFJ1bGVDb250ZXh0LCAuLi5hcmdzOiBSdWxlUGFyYW1ldGVyW10pOiBib29sZWFuIHtcbiAgICBpZiAoIWFyZ3MgfHwgYXJncy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHJldHVybiBhcmdzXG4gICAgICAgIC5ldmVyeSgoYXJnKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBldmFsdWF0b3IgPSBjb250ZXh0LmdldEV2YWx1YXRvcihhcmcudmFsdWUpO1xuICAgICAgICAgICAgaWYgKCFldmFsdWF0b3IpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ2V2YWx1YXRvciBub3QgZm91bmQ6ICcgKyBhcmcudmFsdWUpO1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBldmFsdWF0b3IoY29udGV4dCwgLi4uKGFyZy5wYXJhbWV0ZXJzIHx8IFtdKSk7XG4gICAgICAgIH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc29tZShjb250ZXh0OiBSdWxlQ29udGV4dCwgLi4uYXJnczogUnVsZVBhcmFtZXRlcltdKTogYm9vbGVhbiB7XG4gICAgaWYgKCFhcmdzIHx8IGFyZ3MubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gYXJnc1xuICAgICAgICAuc29tZSgoYXJnKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBldmFsdWF0b3IgPSBjb250ZXh0LmdldEV2YWx1YXRvcihhcmcudmFsdWUpO1xuICAgICAgICAgICAgaWYgKCFldmFsdWF0b3IpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ2V2YWx1YXRvciBub3QgZm91bmQ6ICcgKyBhcmcudmFsdWUpO1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBldmFsdWF0b3IoY29udGV4dCwgLi4uKGFyZy5wYXJhbWV0ZXJzIHx8IFtdKSk7XG4gICAgICAgIH0pO1xufVxuIl19