/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { OnDestroy, ElementRef, EventEmitter, OnInit } from '@angular/core';
import { Observable } from 'rxjs';
import { UserPreferencesService } from '../services/user-preferences.service';
import { SearchTextStateEnum, SearchAnimationDirection } from '../models/search-text-input.model';
export declare class SearchTextInputComponent implements OnInit, OnDestroy {
    private userPreferencesService;
    autocomplete: boolean;
    expandable: boolean;
    inputType: string;
    liveSearchEnabled: boolean;
    searchAutocomplete: any;
    searchTerm: string;
    debounceTime: number;
    focusListener: Observable<FocusEvent>;
    collapseOnSubmit: boolean;
    defaultState: SearchTextStateEnum;
    collapseOnBlur: boolean;
    showClearButton: boolean;
    placeholder: string;
    searchChange: EventEmitter<string>;
    submit: EventEmitter<any>;
    selectResult: EventEmitter<any>;
    reset: EventEmitter<boolean>;
    searchVisibility: EventEmitter<boolean>;
    searchInput: ElementRef;
    subscriptAnimationState: any;
    animationStates: SearchAnimationDirection;
    private dir;
    private onDestroy$;
    private toggleSearch;
    private focusSubscription;
    private valueChange;
    constructor(userPreferencesService: UserPreferencesService);
    ngOnInit(): void;
    applySearchFocus(animationDoneEvent: any): void;
    getAutoComplete(): string;
    private toggleAnimation;
    private getDefaultState;
    private getAnimationState;
    private setupFocusEventHandlers;
    private setValueChangeHandler;
    selectFirstResult($event: any): void;
    onBlur($event: any): void;
    inputChange($event: any): void;
    toggleSearchBar(): void;
    searchSubmit(event: any): void;
    activateToolbar(): boolean;
    isSearchBarActive(): boolean;
    ngOnDestroy(): void;
    canShowClearSearch(): boolean;
    resetSearch(): void;
    private isDefaultStateCollapsed;
    private isDefaultStateExpanded;
    private emitVisibilitySearch;
}
