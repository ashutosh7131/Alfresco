{"version":3,"file":"search-text-input.component.d.ts","sources":["search-text-input.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { OnDestroy, ElementRef, EventEmitter, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { UserPreferencesService } from '../services/user-preferences.service';\nimport { SearchTextStateEnum, SearchAnimationDirection } from '../models/search-text-input.model';\nexport declare class SearchTextInputComponent implements OnInit, OnDestroy {\n    private userPreferencesService;\n    autocomplete: boolean;\n    expandable: boolean;\n    inputType: string;\n    liveSearchEnabled: boolean;\n    searchAutocomplete: any;\n    searchTerm: string;\n    debounceTime: number;\n    focusListener: Observable<FocusEvent>;\n    collapseOnSubmit: boolean;\n    defaultState: SearchTextStateEnum;\n    collapseOnBlur: boolean;\n    showClearButton: boolean;\n    placeholder: string;\n    searchChange: EventEmitter<string>;\n    submit: EventEmitter<any>;\n    selectResult: EventEmitter<any>;\n    reset: EventEmitter<boolean>;\n    searchVisibility: EventEmitter<boolean>;\n    searchInput: ElementRef;\n    subscriptAnimationState: any;\n    animationStates: SearchAnimationDirection;\n    private dir;\n    private onDestroy$;\n    private toggleSearch;\n    private focusSubscription;\n    private valueChange;\n    constructor(userPreferencesService: UserPreferencesService);\n    ngOnInit(): void;\n    applySearchFocus(animationDoneEvent: any): void;\n    getAutoComplete(): string;\n    private toggleAnimation;\n    private getDefaultState;\n    private getAnimationState;\n    private setupFocusEventHandlers;\n    private setValueChangeHandler;\n    selectFirstResult($event: any): void;\n    onBlur($event: any): void;\n    inputChange($event: any): void;\n    toggleSearchBar(): void;\n    searchSubmit(event: any): void;\n    activateToolbar(): boolean;\n    isSearchBarActive(): boolean;\n    ngOnDestroy(): void;\n    canShowClearSearch(): boolean;\n    resetSearch(): void;\n    private isDefaultStateCollapsed;\n    private isDefaultStateExpanded;\n    private emitVisibilitySearch;\n}\n"]}