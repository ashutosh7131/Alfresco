{"version":3,"file":"search-trigger.directive.d.ts","sources":["search-trigger.directive.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { ChangeDetectorRef, ElementRef, NgZone, OnDestroy } from '@angular/core';\nimport { ControlValueAccessor } from '@angular/forms';\nimport { Observable } from 'rxjs';\nimport { SearchComponentInterface } from '../interface/search-configuration.interface';\nexport declare const SEARCH_AUTOCOMPLETE_VALUE_ACCESSOR: any;\nexport declare class SearchTriggerDirective implements ControlValueAccessor, OnDestroy {\n    private element;\n    private ngZone;\n    private changeDetectorRef;\n    private document;\n    private onDestroy$;\n    searchPanel: SearchComponentInterface;\n    autocomplete: string;\n    private _panelOpen;\n    private closingActionsSubscription;\n    private escapeEventStream;\n    onChange: (value: any) => void;\n    onTouched: () => void;\n    constructor(element: ElementRef, ngZone: NgZone, changeDetectorRef: ChangeDetectorRef, document: any);\n    ngOnDestroy(): void;\n    get panelOpen(): boolean;\n    openPanel(): void;\n    closePanel(): void;\n    get panelClosingActions(): Observable<any>;\n    private get outsideClickStream();\n    writeValue(value: any): void;\n    registerOnChange(fn: (value: any) => {}): void;\n    registerOnTouched(fn: () => {}): void;\n    handleKeydown(event: KeyboardEvent): void;\n    handleInput(event: KeyboardEvent): void;\n    private isPanelOptionClicked;\n    private isNoResultOption;\n    private subscribeToClosingActions;\n    private setTriggerValue;\n    private setValueAndClose;\n}\n"]}