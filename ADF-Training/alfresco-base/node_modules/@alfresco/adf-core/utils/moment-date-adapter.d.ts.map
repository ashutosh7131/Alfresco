{"version":3,"file":"moment-date-adapter.d.ts","sources":["moment-date-adapter.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { DateAdapter } from '@angular/material/core';\nimport { Moment } from 'moment';\nexport declare class MomentDateAdapter extends DateAdapter<Moment> {\n    private localeData;\n    overrideDisplayFormat: string;\n    getYear(date: Moment): number;\n    getMonth(date: Moment): number;\n    getDate(date: Moment): number;\n    getDayOfWeek(date: Moment): number;\n    getMonthNames(style: 'long' | 'short' | 'narrow'): string[];\n    getDateNames(): string[];\n    getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[];\n    getYearName(date: Moment): string;\n    getFirstDayOfWeek(): number;\n    getNumDaysInMonth(date: Moment): number;\n    clone(date: Moment): Moment;\n    createDate(year: number, month: number, date: number): Moment;\n    today(): Moment;\n    parse(value: any, parseFormat: any): Moment;\n    format(date: Moment, displayFormat: any): string;\n    addCalendarYears(date: Moment, years: number): Moment;\n    addCalendarMonths(date: Moment, months: number): Moment;\n    addCalendarDays(date: Moment, days: number): Moment;\n    getISODateString(date: Moment): string;\n    setLocale(locale: any): void;\n    compareDate(first: Moment, second: Moment): number;\n    sameDate(first: any | Moment, second: any | Moment): boolean;\n    clampDate(date: Moment, min?: any | Moment, max?: any | Moment): Moment;\n    isDateInstance(date: any): boolean;\n    isValid(date: Moment): boolean;\n    toIso8601(date: Moment): string;\n    fromIso8601(iso8601String: string): Moment | null;\n    invalid(): Moment;\n}\n"]}