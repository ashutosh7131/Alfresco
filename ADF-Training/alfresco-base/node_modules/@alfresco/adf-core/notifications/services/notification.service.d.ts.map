{"version":3,"file":"notification.service.d.ts","sources":["notification.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { MatSnackBar, MatSnackBarRef, MatSnackBarConfig } from '@angular/material/snack-bar';\nimport { TranslationService } from '../../services/translation.service';\nimport { AppConfigService } from '../../app-config/app-config.service';\nimport { Subject } from 'rxjs';\nimport { NotificationModel } from '../models/notification.model';\nexport declare class NotificationService {\n    private snackBar;\n    private translationService;\n    private appConfigService;\n    DEFAULT_DURATION_MESSAGE: number;\n    notifications$: Subject<NotificationModel>;\n    constructor(snackBar: MatSnackBar, translationService: TranslationService, appConfigService: AppConfigService);\n    openSnackMessage(message: string, config?: number | MatSnackBarConfig, interpolateArgs?: any): MatSnackBarRef<any>;\n    openSnackMessageAction(message: string, action: string, config?: number | MatSnackBarConfig, interpolateArgs?: any): MatSnackBarRef<any>;\n    showError(message: string, action?: string, interpolateArgs?: any): MatSnackBarRef<any>;\n    showInfo(message: string, action?: string, interpolateArgs?: any): MatSnackBarRef<any>;\n    showWarning(message: string, action?: string, interpolateArgs?: any): MatSnackBarRef<any>;\n    dismissSnackMessageAction(): void;\n    pushToNotificationHistory(notification: NotificationModel): void;\n    private dispatchNotification;\n    private getNotificationCreator;\n}\n"]}