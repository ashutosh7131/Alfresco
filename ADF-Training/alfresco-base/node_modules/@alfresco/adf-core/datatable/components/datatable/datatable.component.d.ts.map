{"version":3,"file":"datatable.component.d.ts","sources":["datatable.component.d.ts"],"names":[],"mappingssourcesContent":["/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { QueryList, AfterContentInit, DoCheck, ElementRef, EventEmitter, IterableDiffers, OnChanges, SimpleChange, SimpleChanges, TemplateRef, OnDestroy } from '@angular/core';\nimport { MatCheckboxChange } from '@angular/material/checkbox';\nimport { MatMenuTrigger } from '@angular/material/menu';\nimport { DataColumnListComponent } from '../../../data-column/data-column-list.component';\nimport { DataColumn } from '../../data/data-column.model';\nimport { DataRowEvent } from '../../data/data-row-event.model';\nimport { DataRow } from '../../data/data-row.model';\nimport { DataSorting } from '../../data/data-sorting.model';\nimport { DataTableAdapter } from '../../data/datatable-adapter';\nimport { DataTableRowComponent } from '../datatable-row/datatable-row.component';\nimport { ObjectDataRow } from '../../data/object-datarow.model';\nimport { ObjectDataColumn } from '../../data/object-datacolumn.model';\nimport { DataCellEvent } from '../data-cell.event';\nimport { DataRowActionEvent } from '../data-row-action.event';\nexport declare enum DisplayMode {\n    List = \"list\",\n    Gallery = \"gallery\"\n}\nexport declare enum ShowHeaderMode {\n    Never = \"never\",\n    Always = \"always\",\n    Data = \"data\"\n}\nexport declare class DataTableComponent implements AfterContentInit, OnChanges, DoCheck, OnDestroy {\n    private elementRef;\n    rowsList: QueryList<DataTableRowComponent>;\n    columnList: DataColumnListComponent;\n    data: DataTableAdapter;\n    display: string;\n    rows: any[];\n    sorting: any[];\n    columns: any[];\n    selectionMode: string;\n    multiselect: boolean;\n    actions: boolean;\n    actionsPosition: string;\n    actionsVisibleOnHover: boolean;\n    fallbackThumbnail: string;\n    contextMenu: boolean;\n    rowStyle: {\n        [key: string]: any;\n    };\n    rowStyleClass: string;\n    showHeader: ShowHeaderMode;\n    stickyHeader: boolean;\n    rowClick: EventEmitter<DataRowEvent>;\n    rowDblClick: EventEmitter<DataRowEvent>;\n    showRowContextMenu: EventEmitter<DataCellEvent>;\n    showRowActionsMenu: EventEmitter<DataCellEvent>;\n    executeRowAction: EventEmitter<DataRowActionEvent>;\n    loading: boolean;\n    noPermission: boolean;\n    rowMenuCacheEnabled: boolean;\n    resolverFn: (row: DataRow, col: DataColumn) => any;\n    allowFiltering: boolean;\n    headerFilterTemplate: TemplateRef<any>;\n    noContentTemplate: TemplateRef<any>;\n    noPermissionTemplate: TemplateRef<any>;\n    loadingTemplate: TemplateRef<any>;\n    isSelectAllIndeterminate: boolean;\n    isSelectAllChecked: boolean;\n    selection: DataRow[];\n    fakeRows: any[];\n    private keyManager;\n    private clickObserver;\n    private click$;\n    private differ;\n    private rowMenuCache;\n    private subscriptions;\n    private singleClickStreamSub;\n    private multiClickStreamSub;\n    private dataRowsChanged;\n    onKeydown(event: KeyboardEvent): void;\n    constructor(elementRef: ElementRef, differs: IterableDiffers);\n    ngAfterContentInit(): void;\n    ngAfterViewInit(): void;\n    ngOnChanges(changes: SimpleChanges): void;\n    isColumnSortActive(column: DataColumn): boolean;\n    ngDoCheck(): void;\n    isPropertyChanged(property: SimpleChange): boolean;\n    convertToRowsData(rows: any[]): ObjectDataRow[];\n    convertToColumnsData(columns: any[]): ObjectDataColumn[];\n    convertToDataSorting(sorting: any[]): DataSorting | null;\n    private initAndSubscribeClickStream;\n    private unsubscribeClickStream;\n    private initTable;\n    isTableEmpty(): boolean;\n    private setTableRows;\n    private setTableColumns;\n    private getRuntimeColumns;\n    private setTableSchema;\n    private setTableSorting;\n    getSchemaFromHtml(): any;\n    onRowClick(row: DataRow, mouseEvent: MouseEvent): void;\n    onEnterKeyPressed(row: DataRow, e: KeyboardEvent): void;\n    private isHeaderListVisible;\n    private handleRowSelection;\n    resetSelection(): void;\n    onRowDblClick(row: DataRow, event?: Event): void;\n    onRowEnterKeyDown(row: DataRow, keyboardEvent: KeyboardEvent): void;\n    onRowKeyUp(row: DataRow, keyboardEvent: KeyboardEvent): void;\n    private onKeyboardNavigate;\n    onColumnHeaderClick(column: DataColumn): void;\n    onSelectAllClick(matCheckboxChange: MatCheckboxChange): void;\n    onCheckboxChange(row: DataRow, event: MatCheckboxChange): void;\n    checkSelectAllCheckboxState(): void;\n    onImageLoadingError(event: Event, row: DataRow): void;\n    isIconValue(row: DataRow, col: DataColumn): boolean;\n    asIconValue(row: DataRow, col: DataColumn): string;\n    iconAltTextKey(value: string): string;\n    isColumnSorted(col: DataColumn, direction: string): boolean;\n    getContextMenuActions(row: DataRow, col: DataColumn): any[];\n    getRowActions(row: DataRow, col?: DataColumn): any[];\n    getVisibleActions(actions: any[]): any[];\n    onExecuteRowAction(row: DataRow, action: any): void;\n    getHideActionsWithoutHoverClass(actionsMenuTrigger: MatMenuTrigger): {\n        'adf-datatable-hide-actions-without-hover': boolean;\n    };\n    rowAllowsDrop(row: DataRow): boolean;\n    hasSelectionMode(): boolean;\n    isSingleSelectionMode(): boolean;\n    isMultiSelectionMode(): boolean;\n    getRowStyle(row: DataRow): string;\n    getSortingKey(): string | null;\n    selectRow(row: DataRow, value: boolean): void;\n    findSelectionById(id: string): number;\n    getCellTooltip(row: DataRow, col: DataColumn): string;\n    getSortableColumns(): DataColumn[];\n    isEmpty(): boolean;\n    isHeaderVisible(): boolean;\n    isStickyHeaderEnabled(): boolean;\n    private emitRowSelectionEvent;\n    private emitSortingChangedEvent;\n    ngOnDestroy(): void;\n    datatableLayoutFix(): void;\n    getNameColumnValue(): DataColumn;\n    getAutomationValue(row: DataRow): any;\n    getAriaSort(column: DataColumn): string;\n    getSortLiveAnnouncement(column: DataColumn): string;\n}\nexport interface DataTableDropEvent {\n    detail: {\n        target: 'cell' | 'header';\n        event: Event;\n        column: DataColumn;\n        row?: DataRow;\n    };\n    preventDefault(): void;\n}\n"]}