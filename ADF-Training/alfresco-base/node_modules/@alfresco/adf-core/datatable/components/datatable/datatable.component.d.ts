/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { QueryList, AfterContentInit, DoCheck, ElementRef, EventEmitter, IterableDiffers, OnChanges, SimpleChange, SimpleChanges, TemplateRef, OnDestroy } from '@angular/core';
import { MatCheckboxChange } from '@angular/material/checkbox';
import { MatMenuTrigger } from '@angular/material/menu';
import { DataColumnListComponent } from '../../../data-column/data-column-list.component';
import { DataColumn } from '../../data/data-column.model';
import { DataRowEvent } from '../../data/data-row-event.model';
import { DataRow } from '../../data/data-row.model';
import { DataSorting } from '../../data/data-sorting.model';
import { DataTableAdapter } from '../../data/datatable-adapter';
import { DataTableRowComponent } from '../datatable-row/datatable-row.component';
import { ObjectDataRow } from '../../data/object-datarow.model';
import { ObjectDataColumn } from '../../data/object-datacolumn.model';
import { DataCellEvent } from '../data-cell.event';
import { DataRowActionEvent } from '../data-row-action.event';
import * as ɵngcc0 from '@angular/core';
export declare enum DisplayMode {
    List = "list",
    Gallery = "gallery"
}
export declare enum ShowHeaderMode {
    Never = "never",
    Always = "always",
    Data = "data"
}
export declare class DataTableComponent implements AfterContentInit, OnChanges, DoCheck, OnDestroy {
    private elementRef;
    rowsList: QueryList<DataTableRowComponent>;
    columnList: DataColumnListComponent;
    data: DataTableAdapter;
    display: string;
    rows: any[];
    sorting: any[];
    columns: any[];
    selectionMode: string;
    multiselect: boolean;
    actions: boolean;
    actionsPosition: string;
    actionsVisibleOnHover: boolean;
    fallbackThumbnail: string;
    contextMenu: boolean;
    rowStyle: {
        [key: string]: any;
    };
    rowStyleClass: string;
    showHeader: ShowHeaderMode;
    stickyHeader: boolean;
    rowClick: EventEmitter<DataRowEvent>;
    rowDblClick: EventEmitter<DataRowEvent>;
    showRowContextMenu: EventEmitter<DataCellEvent>;
    showRowActionsMenu: EventEmitter<DataCellEvent>;
    executeRowAction: EventEmitter<DataRowActionEvent>;
    loading: boolean;
    noPermission: boolean;
    rowMenuCacheEnabled: boolean;
    resolverFn: (row: DataRow, col: DataColumn) => any;
    allowFiltering: boolean;
    headerFilterTemplate: TemplateRef<any>;
    noContentTemplate: TemplateRef<any>;
    noPermissionTemplate: TemplateRef<any>;
    loadingTemplate: TemplateRef<any>;
    isSelectAllIndeterminate: boolean;
    isSelectAllChecked: boolean;
    selection: DataRow[];
    fakeRows: any[];
    private keyManager;
    private clickObserver;
    private click$;
    private differ;
    private rowMenuCache;
    private subscriptions;
    private singleClickStreamSub;
    private multiClickStreamSub;
    private dataRowsChanged;
    onKeydown(event: KeyboardEvent): void;
    constructor(elementRef: ElementRef, differs: IterableDiffers);
    ngAfterContentInit(): void;
    ngAfterViewInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    isColumnSortActive(column: DataColumn): boolean;
    ngDoCheck(): void;
    isPropertyChanged(property: SimpleChange): boolean;
    convertToRowsData(rows: any[]): ObjectDataRow[];
    convertToColumnsData(columns: any[]): ObjectDataColumn[];
    convertToDataSorting(sorting: any[]): DataSorting | null;
    private initAndSubscribeClickStream;
    private unsubscribeClickStream;
    private initTable;
    isTableEmpty(): boolean;
    private setTableRows;
    private setTableColumns;
    private getRuntimeColumns;
    private setTableSchema;
    private setTableSorting;
    getSchemaFromHtml(): any;
    onRowClick(row: DataRow, mouseEvent: MouseEvent): void;
    onEnterKeyPressed(row: DataRow, e: KeyboardEvent): void;
    private isHeaderListVisible;
    private handleRowSelection;
    resetSelection(): void;
    onRowDblClick(row: DataRow, event?: Event): void;
    onRowEnterKeyDown(row: DataRow, keyboardEvent: KeyboardEvent): void;
    onRowKeyUp(row: DataRow, keyboardEvent: KeyboardEvent): void;
    private onKeyboardNavigate;
    onColumnHeaderClick(column: DataColumn): void;
    onSelectAllClick(matCheckboxChange: MatCheckboxChange): void;
    onCheckboxChange(row: DataRow, event: MatCheckboxChange): void;
    checkSelectAllCheckboxState(): void;
    onImageLoadingError(event: Event, row: DataRow): void;
    isIconValue(row: DataRow, col: DataColumn): boolean;
    asIconValue(row: DataRow, col: DataColumn): string;
    iconAltTextKey(value: string): string;
    isColumnSorted(col: DataColumn, direction: string): boolean;
    getContextMenuActions(row: DataRow, col: DataColumn): any[];
    getRowActions(row: DataRow, col?: DataColumn): any[];
    getVisibleActions(actions: any[]): any[];
    onExecuteRowAction(row: DataRow, action: any): void;
    getHideActionsWithoutHoverClass(actionsMenuTrigger: MatMenuTrigger): {
        'adf-datatable-hide-actions-without-hover': boolean;
    };
    rowAllowsDrop(row: DataRow): boolean;
    hasSelectionMode(): boolean;
    isSingleSelectionMode(): boolean;
    isMultiSelectionMode(): boolean;
    getRowStyle(row: DataRow): string;
    getSortingKey(): string | null;
    selectRow(row: DataRow, value: boolean): void;
    findSelectionById(id: string): number;
    getCellTooltip(row: DataRow, col: DataColumn): string;
    getSortableColumns(): DataColumn[];
    isEmpty(): boolean;
    isHeaderVisible(): boolean;
    isStickyHeaderEnabled(): boolean;
    private emitRowSelectionEvent;
    private emitSortingChangedEvent;
    ngOnDestroy(): void;
    datatableLayoutFix(): void;
    getNameColumnValue(): DataColumn;
    getAutomationValue(row: DataRow): any;
    getAriaSort(column: DataColumn): string;
    getSortLiveAnnouncement(column: DataColumn): string;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<DataTableComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<DataTableComponent, "adf-datatable", never, { "display": "display"; "rows": "rows"; "sorting": "sorting"; "columns": "columns"; "selectionMode": "selectionMode"; "multiselect": "multiselect"; "actions": "actions"; "actionsPosition": "actionsPosition"; "actionsVisibleOnHover": "actionsVisibleOnHover"; "contextMenu": "contextMenu"; "rowStyleClass": "rowStyleClass"; "showHeader": "showHeader"; "stickyHeader": "stickyHeader"; "loading": "loading"; "noPermission": "noPermission"; "rowMenuCacheEnabled": "rowMenuCacheEnabled"; "resolverFn": "resolverFn"; "allowFiltering": "allowFiltering"; "data": "data"; "fallbackThumbnail": "fallbackThumbnail"; "rowStyle": "rowStyle"; }, { "rowClick": "rowClick"; "rowDblClick": "rowDblClick"; "showRowContextMenu": "showRowContextMenu"; "showRowActionsMenu": "showRowActionsMenu"; "executeRowAction": "executeRowAction"; }, ["columnList"], ["adf-empty-list"]>;
}
export interface DataTableDropEvent {
    detail: {
        target: 'cell' | 'header';
        event: Event;
        column: DataColumn;
        row?: DataRow;
    };
    preventDefault(): void;
}

//# sourceMappingURL=datatable.component.d.ts.map