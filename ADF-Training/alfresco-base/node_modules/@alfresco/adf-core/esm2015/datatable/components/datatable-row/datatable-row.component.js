/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, ViewEncapsulation, ElementRef, Input, HostBinding, HostListener, Output, EventEmitter } from '@angular/core';
import * as ɵngcc0 from '@angular/core';

const _c0 = ["*"];
export class DataTableRowComponent {
    constructor(element) {
        this.element = element;
        this.disabled = false;
        this.select = new EventEmitter();
    }
    get isSelected() {
        if (!this.row) {
            return false;
        }
        return this.row.isSelected;
    }
    get isAriaSelected() {
        if (!this.row) {
            return false;
        }
        return this.row.isSelected;
    }
    get ariaLabel() {
        if (!this.row) {
            return null;
        }
        if (this.row.isSelected) {
            return this.row.getValue('name') + ' selected' || '';
        }
        else {
            return this.row.getValue('name') || '';
        }
    }
    get tabindex() {
        return this.disabled ? null : 0;
    }
    onKeyDown(event) {
        if (event.target.tagName === this.element.nativeElement.tagName) {
            event.preventDefault();
            this.select.emit(event);
        }
    }
    focus() {
        this.element.nativeElement.focus();
    }
}
DataTableRowComponent.ɵfac = function DataTableRowComponent_Factory(t) { return new (t || DataTableRowComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
DataTableRowComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: DataTableRowComponent, selectors: [["adf-datatable-row"]], hostAttrs: ["tabindex", "0", "role", "row", 1, "adf-datatable-row"], hostVars: 5, hostBindings: function DataTableRowComponent_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("keydown.space", function DataTableRowComponent_keydown_space_HostBindingHandler($event) { return ctx.onKeyDown($event); });
    } if (rf & 2) {
        ɵngcc0.ɵɵattribute("aria-selected", ctx.isAriaSelected)("aria-label", ctx.ariaLabel)("tabindex", ctx.tabindex);
        ɵngcc0.ɵɵclassProp("adf-is-selected", ctx.isSelected);
    } }, inputs: { disabled: "disabled", row: "row" }, outputs: { select: "select" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function DataTableRowComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
DataTableRowComponent.ctorParameters = () => [
    { type: ElementRef }
];
DataTableRowComponent.propDecorators = {
    row: [{ type: Input }],
    disabled: [{ type: Input }],
    select: [{ type: Output }],
    isSelected: [{ type: HostBinding, args: ['class.adf-is-selected',] }],
    isAriaSelected: [{ type: HostBinding, args: ['attr.aria-selected',] }],
    ariaLabel: [{ type: HostBinding, args: ['attr.aria-label',] }],
    tabindex: [{ type: HostBinding, args: ['attr.tabindex',] }],
    onKeyDown: [{ type: HostListener, args: ['keydown.space', ['$event'],] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DataTableRowComponent, [{
        type: Component,
        args: [{
                selector: 'adf-datatable-row',
                template: `<ng-content></ng-content>`,
                encapsulation: ViewEncapsulation.None,
                host: {
                    class: 'adf-datatable-row',
                    tabindex: '0',
                    role: 'row'
                }
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, { disabled: [{
            type: Input
        }], select: [{
            type: Output
        }], isSelected: [{
            type: HostBinding,
            args: ['class.adf-is-selected']
        }], isAriaSelected: [{
            type: HostBinding,
            args: ['attr.aria-selected']
        }], ariaLabel: [{
            type: HostBinding,
            args: ['attr.aria-label']
        }], tabindex: [{
            type: HostBinding,
            args: ['attr.tabindex']
        }], onKeyDown: [{
            type: HostListener,
            args: ['keydown.space', ['$event']]
        }], row: [{
            type: Input
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YXRhYmxlLXJvdy5jb21wb25lbnQuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL2hvbWUvdHJhdmlzL2J1aWxkL0FsZnJlc2NvL2FsZnJlc2NvLW5nMi1jb21wb25lbnRzL2xpYi9jb3JlL2RhdGF0YWJsZS9jb21wb25lbnRzL2RhdGF0YWJsZS1yb3cvZGF0YXRhYmxlLXJvdy5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUVILE9BQU8sRUFDSCxTQUFTLEVBQ1QsaUJBQWlCLEVBQ2pCLFVBQVUsRUFDVixLQUFLLEVBQ0wsV0FBVyxFQUNYLFlBQVksRUFDWixNQUFNLEVBQ04sWUFBWSxFQUNmLE1BQU0sZUFBZSxDQUFDOzs7O0FBY3ZCLE1BQU0sT0FBTyxxQkFBcUI7QUFBRyxJQWlEakMsWUFBb0IsT0FBbUI7QUFBSSxRQUF2QixZQUFPLEdBQVAsT0FBTyxDQUFZO0FBQUMsUUE5Qy9CLGFBQVEsR0FBRyxLQUFLLENBQUM7QUFDOUIsUUFFSSxXQUFNLEdBQXNCLElBQUksWUFBWSxFQUFPLENBQUM7QUFDeEQsSUEwQzhDLENBQUM7QUFDL0MsSUExQ0ksSUFDSSxVQUFVO0FBQUssUUFDZixJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRTtBQUN2QixZQUFZLE9BQU8sS0FBSyxDQUFDO0FBQ3pCLFNBQVM7QUFDVCxRQUFRLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUM7QUFDbkMsSUFBSSxDQUFDO0FBQ0wsSUFDSSxJQUNJLGNBQWM7QUFBSyxRQUNuQixJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRTtBQUN2QixZQUFXLE9BQU8sS0FBSyxDQUFDO0FBQ3hCLFNBQVM7QUFDVCxRQUFRLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUM7QUFDbkMsSUFBSSxDQUFDO0FBQ0wsSUFDSSxJQUNJLFNBQVM7QUFBSyxRQUNkLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFO0FBQ3ZCLFlBQVksT0FBTyxJQUFJLENBQUM7QUFDeEIsU0FBUztBQUNULFFBQVEsSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDLFVBQVUsRUFBRTtBQUNqQyxZQUFZLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLEdBQUcsV0FBVyxJQUFJLEVBQUUsQ0FBQztBQUNqRSxTQUFTO0FBQUMsYUFBSztBQUNmLFlBQVksT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLENBQUM7QUFDbkQsU0FBUztBQUNULElBQUksQ0FBQztBQUNMLElBQ0ksSUFDSSxRQUFRO0FBQUssUUFDYixPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3hDLElBQUksQ0FBQztBQUNMLElBRUksU0FBUyxDQUFDLEtBQW9CO0FBQ2xDLFFBQVEsSUFBSyxLQUFLLENBQUMsTUFBa0IsQ0FBQyxPQUFPLEtBQUssSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsT0FBTyxFQUFFO0FBQ3RGLFlBQVksS0FBSyxDQUFDLGNBQWMsRUFBRSxDQUFDO0FBQ25DLFlBQVksSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDcEMsU0FBUztBQUNULElBQUksQ0FBQztBQUNMLElBR0ksS0FBSztBQUNULFFBQVEsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsS0FBSyxFQUFFLENBQUM7QUFDM0MsSUFBSSxDQUFDO0FBQ0w7aURBaEVDLFNBQVMsU0FBQyxrQkFDUCxRQUFRLEVBQUUsbUJBQW1CLGtCQUM3QixRQUFRLEVBQUU7T0FBMkIsa0JBQ3JDLGFBQWEsRUFBRSxpQkFBaUIsQ0FBQyxJQUFJLGtCQUNyQyxJQUFJLEVBQUUsc0JBQ0YsS0FBSyxFQUFFLG1CQUFtQixzQkFDMUIsUUFBUSxFQUFFLEdBQUcsc0JBQ2IsSUFBSSxFQUFFLEtBQUssa0JBQ2QsY0FDSjs7Ozs7Ozs7NkJBQ0k7QUFBQztBQUErQyxZQXBCakQsVUFBVTtBQUNiO0FBQUc7QUFFYSxrQkFrQlosS0FBSztBQUFLLHVCQUVWLEtBQUs7QUFBSyxxQkFFVixNQUFNO0FBQ1QseUJBRUcsV0FBVyxTQUFDLHVCQUF1QjtBQUNuQyw2QkFPQSxXQUFXLFNBQUMsb0JBQW9CO0FBQ2hDLHdCQU9BLFdBQVcsU0FBQyxpQkFBaUI7QUFDN0IsdUJBV0EsV0FBVyxTQUFDLGVBQWU7QUFDM0Isd0JBSUEsWUFBWSxTQUFDLGVBQWUsRUFBRSxDQUFDLFFBQVEsQ0FBQztBQUN6Qzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztvQkFBRTtBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHtcbiAgICBDb21wb25lbnQsXG4gICAgVmlld0VuY2Fwc3VsYXRpb24sXG4gICAgRWxlbWVudFJlZixcbiAgICBJbnB1dCxcbiAgICBIb3N0QmluZGluZyxcbiAgICBIb3N0TGlzdGVuZXIsXG4gICAgT3V0cHV0LFxuICAgIEV2ZW50RW1pdHRlclxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEZvY3VzYWJsZU9wdGlvbiB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9hMTF5JztcbmltcG9ydCB7IERhdGFSb3cgfSBmcm9tICcuLi8uLi9kYXRhL2RhdGEtcm93Lm1vZGVsJztcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICdhZGYtZGF0YXRhYmxlLXJvdycsXG4gICAgdGVtcGxhdGU6IGA8bmctY29udGVudD48L25nLWNvbnRlbnQ+YCxcbiAgICBlbmNhcHN1bGF0aW9uOiBWaWV3RW5jYXBzdWxhdGlvbi5Ob25lLFxuICAgIGhvc3Q6IHtcbiAgICAgICAgY2xhc3M6ICdhZGYtZGF0YXRhYmxlLXJvdycsXG4gICAgICAgIHRhYmluZGV4OiAnMCcsXG4gICAgICAgIHJvbGU6ICdyb3cnXG4gICAgfVxufSlcbmV4cG9ydCBjbGFzcyBEYXRhVGFibGVSb3dDb21wb25lbnQgaW1wbGVtZW50cyBGb2N1c2FibGVPcHRpb24ge1xuICAgIEBJbnB1dCgpIHJvdzogRGF0YVJvdztcblxuICAgIEBJbnB1dCgpIGRpc2FibGVkID0gZmFsc2U7XG5cbiAgICBAT3V0cHV0KClcbiAgICBzZWxlY3Q6IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XG5cbiAgICBASG9zdEJpbmRpbmcoJ2NsYXNzLmFkZi1pcy1zZWxlY3RlZCcpXG4gICAgZ2V0IGlzU2VsZWN0ZWQoKTogYm9vbGVhbiB7XG4gICAgICAgIGlmICghdGhpcy5yb3cpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5yb3cuaXNTZWxlY3RlZDtcbiAgICB9XG5cbiAgICBASG9zdEJpbmRpbmcoJ2F0dHIuYXJpYS1zZWxlY3RlZCcpXG4gICAgZ2V0IGlzQXJpYVNlbGVjdGVkKCk6IGJvb2xlYW4ge1xuICAgICAgICBpZiAoIXRoaXMucm93KSB7XG4gICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5yb3cuaXNTZWxlY3RlZDtcbiAgICB9XG5cbiAgICBASG9zdEJpbmRpbmcoJ2F0dHIuYXJpYS1sYWJlbCcpXG4gICAgZ2V0IGFyaWFMYWJlbCgpOiBzdHJpbmd8bnVsbCB7XG4gICAgICAgIGlmICghdGhpcy5yb3cpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLnJvdy5pc1NlbGVjdGVkKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5yb3cuZ2V0VmFsdWUoJ25hbWUnKSArICcgc2VsZWN0ZWQnIHx8ICcnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucm93LmdldFZhbHVlKCduYW1lJykgfHwgJyc7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBASG9zdEJpbmRpbmcoJ2F0dHIudGFiaW5kZXgnKVxuICAgIGdldCB0YWJpbmRleCgpOiBudW1iZXJ8bnVsbCB7XG4gICAgICAgIHJldHVybiB0aGlzLmRpc2FibGVkID8gbnVsbCA6IDA7XG4gICAgfVxuXG4gICAgQEhvc3RMaXN0ZW5lcigna2V5ZG93bi5zcGFjZScsIFsnJGV2ZW50J10pXG4gICAgb25LZXlEb3duKGV2ZW50OiBLZXlib2FyZEV2ZW50KSB7XG4gICAgICAgIGlmICgoZXZlbnQudGFyZ2V0IGFzIEVsZW1lbnQpLnRhZ05hbWUgPT09IHRoaXMuZWxlbWVudC5uYXRpdmVFbGVtZW50LnRhZ05hbWUpIHtcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICB0aGlzLnNlbGVjdC5lbWl0KGV2ZW50KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgZWxlbWVudDogRWxlbWVudFJlZikge31cblxuICAgIGZvY3VzKCkge1xuICAgICAgICB0aGlzLmVsZW1lbnQubmF0aXZlRWxlbWVudC5mb2N1cygpO1xuICAgIH1cbn1cbiJdfQ==