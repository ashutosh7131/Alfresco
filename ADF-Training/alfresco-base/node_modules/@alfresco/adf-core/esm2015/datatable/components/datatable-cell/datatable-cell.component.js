/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { ChangeDetectionStrategy, Component, Input, ViewEncapsulation } from '@angular/core';
import { AlfrescoApiService } from '../../../services/alfresco-api.service';
import { BehaviorSubject, Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../../../services/alfresco-api.service';
import * as ɵngcc2 from '@angular/common';
import * as ɵngcc3 from '../../../clipboard/clipboard.directive';

function DataTableCellComponent_span_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 2);
    ɵngcc0.ɵɵpipe(1, "async");
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "async");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("clipboard-notification", "CLIPBOARD.SUCCESS_COPY")("title", ctx_r0.tooltip);
    ɵngcc0.ɵɵattribute("aria-label", ɵngcc0.ɵɵpipeBind1(1, 4, ctx_r0.value$));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(3, 6, ctx_r0.value$));
} }
function DataTableCellComponent_ng_template_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 3);
    ɵngcc0.ɵɵpipe(1, "async");
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "async");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("title", ctx_r2.tooltip);
    ɵngcc0.ɵɵattribute("aria-label", ɵngcc0.ɵɵpipeBind1(1, 3, ctx_r2.value$));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(3, 5, ctx_r2.value$));
} }
export class DataTableCellComponent {
    constructor(alfrescoApiService) {
        this.alfrescoApiService = alfrescoApiService;
        this.value$ = new BehaviorSubject('');
        this.resolverFn = null;
        this.onDestroy$ = new Subject();
    }
    ngOnInit() {
        this.updateValue();
        this.alfrescoApiService.nodeUpdated
            .pipe(takeUntil(this.onDestroy$))
            .subscribe(node => {
            if (this.row) {
                if (this.row['node'].entry.id === node.id) {
                    this.row['node'].entry = node;
                    this.row['cache'][this.column.key] = this.column.key.split('.').reduce((source, key) => source ? source[key] : '', node);
                    this.updateValue();
                }
            }
        });
    }
    updateValue() {
        if (this.column && this.column.key && this.row && this.data) {
            const value = this.data.getValue(this.row, this.column, this.resolverFn);
            this.value$.next(value);
            if (!this.tooltip) {
                this.tooltip = value;
            }
        }
    }
    ngOnDestroy() {
        this.onDestroy$.next(true);
        this.onDestroy$.complete();
    }
}
DataTableCellComponent.ɵfac = function DataTableCellComponent_Factory(t) { return new (t || DataTableCellComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.AlfrescoApiService)); };
DataTableCellComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: DataTableCellComponent, selectors: [["adf-datatable-cell"]], hostAttrs: [1, "adf-datatable-content-cell"], inputs: { resolverFn: "resolverFn", tooltip: "tooltip", data: "data", column: "column", row: "row", copyContent: "copyContent" }, decls: 4, vars: 2, consts: [["adf-clipboard", "CLIPBOARD.CLICK_TO_COPY", "class", "adf-datatable-cell-value", 3, "clipboard-notification", "title", 4, "ngIf", "ngIfElse"], ["defaultCell", ""], ["adf-clipboard", "CLIPBOARD.CLICK_TO_COPY", 1, "adf-datatable-cell-value", 3, "clipboard-notification", "title"], [1, "adf-datatable-cell-value", 3, "title"]], template: function DataTableCellComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementContainerStart(0);
        ɵngcc0.ɵɵtemplate(1, DataTableCellComponent_span_1_Template, 4, 8, "span", 0);
        ɵngcc0.ɵɵelementContainerEnd();
        ɵngcc0.ɵɵtemplate(2, DataTableCellComponent_ng_template_2_Template, 4, 7, "ng-template", null, 1, ɵngcc0.ɵɵtemplateRefExtractor);
    } if (rf & 2) {
        const _r1 = ɵngcc0.ɵɵreference(3);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.copyContent)("ngIfElse", _r1);
    } }, directives: [ɵngcc2.NgIf, ɵngcc3.ClipboardDirective], pipes: [ɵngcc2.AsyncPipe], encapsulation: 2, changeDetection: 0 });
DataTableCellComponent.ctorParameters = () => [
    { type: AlfrescoApiService }
];
DataTableCellComponent.propDecorators = {
    data: [{ type: Input }],
    column: [{ type: Input }],
    row: [{ type: Input }],
    copyContent: [{ type: Input }],
    tooltip: [{ type: Input }],
    resolverFn: [{ type: Input }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DataTableCellComponent, [{
        type: Component,
        args: [{
                selector: 'adf-datatable-cell',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: `
        <ng-container>
            <span *ngIf="copyContent; else defaultCell"
                adf-clipboard="CLIPBOARD.CLICK_TO_COPY"
                [clipboard-notification]="'CLIPBOARD.SUCCESS_COPY'"
                [attr.aria-label]="value$ | async"
                [title]="tooltip"
                class="adf-datatable-cell-value"
                >{{ value$ | async }}</span>
        </ng-container>
        <ng-template #defaultCell>
            <span
                [attr.aria-label]="value$ | async"
                [title]="tooltip"
                class="adf-datatable-cell-value"
            >{{ value$ | async }}</span>
        </ng-template>
    `,
                encapsulation: ViewEncapsulation.None,
                host: { class: 'adf-datatable-content-cell' }
            }]
    }], function () { return [{ type: ɵngcc1.AlfrescoApiService }]; }, { resolverFn: [{
            type: Input
        }], tooltip: [{
            type: Input
        }], data: [{
            type: Input
        }], column: [{
            type: Input
        }], row: [{
            type: Input
        }], copyContent: [{
            type: Input
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,