/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { ViewChildren, QueryList, HostListener, Component, ContentChild, ElementRef, EventEmitter, Input, IterableDiffers, Output, ViewEncapsulation } from '@angular/core';
import { FocusKeyManager } from '@angular/cdk/a11y';
import { Observable } from 'rxjs';
import { DataColumnListComponent } from '../../../data-column/data-column-list.component';
import { DataRowEvent } from '../../data/data-row-event.model';
import { DataSorting } from '../../data/data-sorting.model';
import { DataTableRowComponent } from '../datatable-row/datatable-row.component';
import { ObjectDataRow } from '../../data/object-datarow.model';
import { ObjectDataColumn } from '../../data/object-datacolumn.model';
import { ObjectDataTableAdapter } from '../../data/object-datatable-adapter';
import { DataCellEvent } from '../data-cell.event';
import { DataRowActionEvent } from '../data-row-action.event';
import { share, buffer, map, filter, debounceTime } from 'rxjs/operators';
export var DisplayMode;
(function (DisplayMode) {
    DisplayMode["List"] = "list";
    DisplayMode["Gallery"] = "gallery";
})(DisplayMode || (DisplayMode = {}));
export var ShowHeaderMode;
(function (ShowHeaderMode) {
    ShowHeaderMode["Never"] = "never";
    ShowHeaderMode["Always"] = "always";
    ShowHeaderMode["Data"] = "data";
})(ShowHeaderMode || (ShowHeaderMode = {}));
export class DataTableComponent {
    constructor(elementRef, differs) {
        this.elementRef = elementRef;
        this.display = DisplayMode.List;
        this.rows = [];
        this.sorting = [];
        this.columns = [];
        this.selectionMode = 'single';
        this.multiselect = false;
        this.actions = false;
        this.actionsPosition = 'right';
        this.actionsVisibleOnHover = false;
        this.contextMenu = false;
        this.rowStyleClass = '';
        this.showHeader = ShowHeaderMode.Data;
        this.stickyHeader = false;
        this.rowClick = new EventEmitter();
        this.rowDblClick = new EventEmitter();
        this.showRowContextMenu = new EventEmitter();
        this.showRowActionsMenu = new EventEmitter();
        this.executeRowAction = new EventEmitter();
        this.loading = false;
        this.noPermission = false;
        this.rowMenuCacheEnabled = true;
        this.resolverFn = null;
        this.allowFiltering = false;
        this.isSelectAllIndeterminate = false;
        this.isSelectAllChecked = false;
        this.selection = new Array();
        this.fakeRows = [];
        this.rowMenuCache = {};
        this.subscriptions = [];
        if (differs) {
            this.differ = differs.find([]).create(null);
        }
        this.click$ = new Observable((observer) => this.clickObserver = observer)
            .pipe(share());
    }
    onKeydown(event) {
        this.keyManager.onKeydown(event);
    }
    ngAfterContentInit() {
        if (this.columnList) {
            this.subscriptions.push(this.columnList.columns.changes.subscribe(() => {
                this.setTableSchema();
            }));
        }
        this.datatableLayoutFix();
        this.setTableSchema();
    }
    ngAfterViewInit() {
        this.keyManager = new FocusKeyManager(this.rowsList)
            .withWrap()
            .skipPredicate(item => item.disabled);
    }
    ngOnChanges(changes) {
        this.initAndSubscribeClickStream();
        const dataChanges = changes['data'];
        const rowChanges = changes['rows'];
        const columnChanges = changes['columns'];
        if (this.isPropertyChanged(dataChanges) || this.isPropertyChanged(rowChanges) || this.isPropertyChanged(columnChanges)) {
            if (this.isTableEmpty()) {
                this.initTable();
            }
            else {
                if (dataChanges) {
                    this.data = changes['data'].currentValue;
                    this.resetSelection();
                }
                else if (rowChanges) {
                    this.setTableRows(changes['rows'].currentValue);
                    this.setTableSorting(this.sorting);
                }
                else {
                    this.setTableColumns(changes['columns'].currentValue);
                }
            }
            return;
        }
        if (changes.selectionMode && !changes.selectionMode.isFirstChange()) {
            this.resetSelection();
            this.emitRowSelectionEvent('row-unselect', null);
        }
        if (this.isPropertyChanged(changes['sorting'])) {
            this.setTableSorting(changes['sorting'].currentValue);
        }
        if (this.isPropertyChanged(changes['display'])) {
            this.datatableLayoutFix();
        }
    }
    isColumnSortActive(column) {
        if (!column || !this.data.getSorting()) {
            return false;
        }
        return column.key === this.data.getSorting().key;
    }
    ngDoCheck() {
        const changes = this.differ.diff(this.rows);
        if (changes) {
            this.setTableRows(this.rows);
        }
    }
    isPropertyChanged(property) {
        return !!(property && property.currentValue);
    }
    convertToRowsData(rows) {
        return rows.map((row) => new ObjectDataRow(row, row.isSelected));
    }
    convertToColumnsData(columns) {
        return columns.map((column) => new ObjectDataColumn(column));
    }
    convertToDataSorting(sorting) {
        if (sorting && sorting.length > 0) {
            return new DataSorting(sorting[0], sorting[1]);
        }
        return null;
    }
    initAndSubscribeClickStream() {
        this.unsubscribeClickStream();
        const singleClickStream = this.click$
            .pipe(buffer(this.click$.pipe(debounceTime(250))), map((list) => list), filter((x) => x.length === 1));
        this.singleClickStreamSub = singleClickStream.subscribe((dataRowEvents) => {
            const event = dataRowEvents[0];
            this.handleRowSelection(event.value, event.event);
            this.rowClick.emit(event);
            if (!event.defaultPrevented) {
                this.elementRef.nativeElement.dispatchEvent(new CustomEvent('row-click', {
                    detail: event,
                    bubbles: true
                }));
            }
        });
        const multiClickStream = this.click$
            .pipe(buffer(this.click$.pipe(debounceTime(250))), map((list) => list), filter((x) => x.length >= 2));
        this.multiClickStreamSub = multiClickStream.subscribe((dataRowEvents) => {
            const event = dataRowEvents[0];
            this.rowDblClick.emit(event);
            if (!event.defaultPrevented) {
                this.elementRef.nativeElement.dispatchEvent(new CustomEvent('row-dblclick', {
                    detail: event,
                    bubbles: true
                }));
            }
        });
    }
    unsubscribeClickStream() {
        if (this.singleClickStreamSub) {
            this.singleClickStreamSub.unsubscribe();
            this.singleClickStreamSub = null;
        }
        if (this.multiClickStreamSub) {
            this.multiClickStreamSub.unsubscribe();
            this.multiClickStreamSub = null;
        }
    }
    initTable() {
        const runtimeColumns = this.getRuntimeColumns();
        this.data = new ObjectDataTableAdapter(this.rows, runtimeColumns);
        this.setTableSorting(this.sorting);
        this.resetSelection();
        this.rowMenuCache = {};
    }
    isTableEmpty() {
        return this.data === undefined || this.data === null;
    }
    setTableRows(rows) {
        if (this.data) {
            this.resetSelection();
            const rowsData = this.convertToRowsData(rows);
            this.data.setRows(rowsData);
        }
    }
    setTableColumns(columns) {
        if (this.data) {
            this.resetSelection();
            const columnsData = this.convertToColumnsData(columns);
            this.data.setColumns(columnsData);
        }
    }
    getRuntimeColumns() {
        return [
            ...(this.columns || []),
            ...this.getSchemaFromHtml()
        ];
    }
    setTableSchema() {
        const columns = this.getRuntimeColumns();
        if (this.data && columns.length > 0) {
            this.data.setColumns(columns);
        }
    }
    setTableSorting(sorting) {
        if (this.data) {
            this.data.setSorting(this.convertToDataSorting(sorting));
        }
    }
    getSchemaFromHtml() {
        let schema = [];
        if (this.columnList && this.columnList.columns && this.columnList.columns.length > 0) {
            schema = this.columnList.columns.map((c) => c);
        }
        return schema;
    }
    onRowClick(row, mouseEvent) {
        if (mouseEvent) {
            mouseEvent.preventDefault();
        }
        if (row) {
            const rowIndex = this.data.getRows().indexOf(row) + (this.isHeaderListVisible() ? 1 : 0);
            this.keyManager.setActiveItem(rowIndex);
            const dataRowEvent = new DataRowEvent(row, mouseEvent, this);
            this.clickObserver.next(dataRowEvent);
        }
    }
    onEnterKeyPressed(row, e) {
        if (row) {
            this.handleRowSelection(row, e);
        }
    }
    isHeaderListVisible() {
        return this.isHeaderVisible() && this.display === DisplayMode.List;
    }
    handleRowSelection(row, e) {
        if (this.data) {
            if (this.isSingleSelectionMode()) {
                this.resetSelection();
                this.selectRow(row, true);
                this.emitRowSelectionEvent('row-select', row);
            }
            if (this.isMultiSelectionMode()) {
                const modifier = e && (e.metaKey || e.ctrlKey);
                let newValue;
                if (this.selection.length === 1) {
                    newValue = !row.isSelected;
                }
                else {
                    newValue = modifier ? !row.isSelected : true;
                }
                const domEventName = newValue ? 'row-select' : 'row-unselect';
                if (!modifier) {
                    this.resetSelection();
                }
                this.selectRow(row, newValue);
                this.emitRowSelectionEvent(domEventName, row);
            }
        }
    }
    resetSelection() {
        if (this.data) {
            const rows = this.data.getRows();
            if (rows && rows.length > 0) {
                rows.forEach((r) => r.isSelected = false);
            }
            this.selection = [];
        }
        this.isSelectAllChecked = false;
    }
    onRowDblClick(row, event) {
        if (event) {
            event.preventDefault();
        }
        const dataRowEvent = new DataRowEvent(row, event, this);
        this.clickObserver.next(dataRowEvent);
    }
    onRowEnterKeyDown(row, keyboardEvent) {
        if (keyboardEvent.key === 'Enter') {
            this.onKeyboardNavigate(row, keyboardEvent);
        }
    }
    onRowKeyUp(row, keyboardEvent) {
        const event = new CustomEvent('row-keyup', {
            detail: {
                row: row,
                keyboardEvent: keyboardEvent,
                sender: this
            },
            bubbles: true
        });
        this.elementRef.nativeElement.dispatchEvent(event);
        if (event.defaultPrevented) {
            keyboardEvent.preventDefault();
        }
    }
    onKeyboardNavigate(row, keyboardEvent) {
        if (keyboardEvent) {
            keyboardEvent.preventDefault();
        }
        const event = new DataRowEvent(row, keyboardEvent, this);
        this.rowDblClick.emit(event);
        this.elementRef.nativeElement.dispatchEvent(new CustomEvent('row-dblclick', {
            detail: event,
            bubbles: true
        }));
    }
    onColumnHeaderClick(column) {
        var _a;
        if (column && column.sortable) {
            const current = this.data.getSorting();
            let newDirection = 'asc';
            if (current && column.key === current.key) {
                newDirection = ((_a = current.direction) === null || _a === void 0 ? void 0 : _a.toLowerCase()) === 'asc' ? 'desc' : 'asc';
            }
            this.sorting = [column.key, newDirection];
            this.data.setSorting(new DataSorting(column.key, newDirection));
            this.emitSortingChangedEvent(column.key, column.sortingKey, newDirection);
        }
        this.keyManager.updateActiveItem(0);
    }
    onSelectAllClick(matCheckboxChange) {
        this.isSelectAllChecked = matCheckboxChange.checked;
        this.isSelectAllIndeterminate = false;
        if (this.multiselect) {
            const rows = this.data.getRows();
            if (rows && rows.length > 0) {
                for (let i = 0; i < rows.length; i++) {
                    this.selectRow(rows[i], matCheckboxChange.checked);
                }
            }
            const domEventName = matCheckboxChange.checked ? 'row-select' : 'row-unselect';
            const row = this.selection.length > 0 ? this.selection[0] : null;
            this.emitRowSelectionEvent(domEventName, row);
        }
    }
    onCheckboxChange(row, event) {
        const newValue = event.checked;
        this.selectRow(row, newValue);
        const domEventName = newValue ? 'row-select' : 'row-unselect';
        this.emitRowSelectionEvent(domEventName, row);
        this.checkSelectAllCheckboxState();
    }
    checkSelectAllCheckboxState() {
        if (this.multiselect) {
            let numberOfSelectedRows = 0;
            const rows = this.data.getRows();
            rows.forEach((row) => {
                if (row.isSelected) {
                    numberOfSelectedRows++;
                }
            });
            if (numberOfSelectedRows === rows.length) {
                this.isSelectAllChecked = true;
                this.isSelectAllIndeterminate = false;
            }
            else if (numberOfSelectedRows > 0 && numberOfSelectedRows < rows.length) {
                this.isSelectAllChecked = false;
                this.isSelectAllIndeterminate = true;
            }
            else {
                this.isSelectAllChecked = false;
                this.isSelectAllIndeterminate = false;
            }
        }
    }
    onImageLoadingError(event, row) {
        if (event) {
            const element = event.target;
            if (this.fallbackThumbnail) {
                element.src = this.fallbackThumbnail;
            }
            else {
                element.src = row.imageErrorResolver(event);
            }
        }
    }
    isIconValue(row, col) {
        if (row && col) {
            const value = row.getValue(col.key);
            return value && value.startsWith('material-icons://');
        }
        return false;
    }
    asIconValue(row, col) {
        if (this.isIconValue(row, col)) {
            const value = row.getValue(col.key) || '';
            return value.replace('material-icons://', '');
        }
        return null;
    }
    iconAltTextKey(value) {
        return value ? 'ICONS.' + value.substring(value.lastIndexOf('/') + 1).replace(/\.[a-z]+/, '') : '';
    }
    isColumnSorted(col, direction) {
        if (col && direction) {
            const sorting = this.data.getSorting();
            return sorting && sorting.key === col.key && sorting.direction.toLocaleLowerCase() === direction;
        }
        return false;
    }
    getContextMenuActions(row, col) {
        const event = new DataCellEvent(row, col, []);
        this.showRowContextMenu.emit(event);
        return event.value.actions;
    }
    getRowActions(row, col) {
        const id = row.getValue('id');
        if (!this.rowMenuCache[id]) {
            const event = new DataCellEvent(row, col, []);
            this.showRowActionsMenu.emit(event);
            if (!this.rowMenuCacheEnabled) {
                return this.getVisibleActions(event.value.actions);
            }
            this.rowMenuCache[id] = event.value.actions;
        }
        return this.getVisibleActions(this.rowMenuCache[id]);
    }
    getVisibleActions(actions) {
        return actions.filter((action) => action.visible || action.visible === undefined);
    }
    onExecuteRowAction(row, action) {
        if (action.disabled || action.disabled) {
            event.stopPropagation();
        }
        else {
            this.executeRowAction.emit(new DataRowActionEvent(row, action));
        }
    }
    getHideActionsWithoutHoverClass(actionsMenuTrigger) {
        return { 'adf-datatable-hide-actions-without-hover': this.actionsVisibleOnHover && !actionsMenuTrigger.menuOpen };
    }
    rowAllowsDrop(row) {
        return row.isDropTarget === true;
    }
    hasSelectionMode() {
        return this.isSingleSelectionMode() || this.isMultiSelectionMode();
    }
    isSingleSelectionMode() {
        return this.selectionMode && this.selectionMode.toLowerCase() === 'single';
    }
    isMultiSelectionMode() {
        return this.selectionMode && this.selectionMode.toLowerCase() === 'multiple';
    }
    getRowStyle(row) {
        row.cssClass = row.cssClass ? row.cssClass : '';
        this.rowStyleClass = this.rowStyleClass ? this.rowStyleClass : '';
        return `${row.cssClass} ${this.rowStyleClass}`;
    }
    getSortingKey() {
        if (this.data.getSorting()) {
            return this.data.getSorting().key;
        }
        return null;
    }
    selectRow(row, value) {
        if (row) {
            row.isSelected = value;
            const idx = (row === null || row === void 0 ? void 0 : row.id) ? this.findSelectionById(row.id) : this.selection.indexOf(row);
            if (value) {
                if (idx < 0) {
                    this.selection.push(row);
                }
            }
            else {
                if (idx > -1) {
                    this.selection.splice(idx, 1);
                }
            }
        }
    }
    findSelectionById(id) {
        return this.selection.findIndex(selection => (selection === null || selection === void 0 ? void 0 : selection.id) === id);
    }
    getCellTooltip(row, col) {
        if (row && col && col.formatTooltip) {
            const result = col.formatTooltip(row, col);
            if (result) {
                return result;
            }
        }
        return null;
    }
    getSortableColumns() {
        return this.data.getColumns().filter((column) => {
            return column.sortable === true;
        });
    }
    isEmpty() {
        return this.data.getRows().length === 0;
    }
    isHeaderVisible() {
        let headerVisibility;
        if (this.showHeader === ShowHeaderMode.Data) {
            headerVisibility = !this.loading && !this.noPermission && !this.isEmpty();
        }
        else if (this.showHeader === ShowHeaderMode.Always) {
            headerVisibility = !this.loading && !this.noPermission;
        }
        else if (this.showHeader === ShowHeaderMode.Never) {
            headerVisibility = false;
        }
        return headerVisibility;
    }
    isStickyHeaderEnabled() {
        return this.stickyHeader && this.isHeaderVisible();
    }
    emitRowSelectionEvent(name, row) {
        const domEvent = new CustomEvent(name, {
            detail: {
                row: row,
                selection: this.selection
            },
            bubbles: true
        });
        this.elementRef.nativeElement.dispatchEvent(domEvent);
    }
    emitSortingChangedEvent(key, sortingKey, direction) {
        const domEvent = new CustomEvent('sorting-changed', {
            detail: {
                key,
                sortingKey,
                direction
            },
            bubbles: true
        });
        this.elementRef.nativeElement.dispatchEvent(domEvent);
    }
    ngOnDestroy() {
        this.unsubscribeClickStream();
        this.subscriptions.forEach((s) => s.unsubscribe());
        this.subscriptions = [];
        if (this.dataRowsChanged) {
            this.dataRowsChanged.unsubscribe();
            this.dataRowsChanged = null;
        }
    }
    datatableLayoutFix() {
        const maxGalleryRows = 25;
        if (this.display === 'gallery') {
            for (let i = 0; i < maxGalleryRows; i++) {
                this.fakeRows.push('');
            }
        }
        else {
            this.fakeRows = [];
        }
    }
    getNameColumnValue() {
        return this.data.getColumns().find((el) => {
            return el.key.includes('name');
        });
    }
    getAutomationValue(row) {
        const name = this.getNameColumnValue();
        return name ? row.getValue(name.key) : '';
    }
    getAriaSort(column) {
        if (!this.isColumnSortActive(column)) {
            return 'ADF-DATATABLE.ACCESSIBILITY.SORT_NONE';
        }
        return this.isColumnSorted(column, 'asc') ?
            'ADF-DATATABLE.ACCESSIBILITY.SORT_ASCENDING' :
            'ADF-DATATABLE.ACCESSIBILITY.SORT_DESCENDING';
    }
    getSortLiveAnnouncement(column) {
        if (!this.isColumnSortActive(column)) {
            return 'ADF-DATATABLE.ACCESSIBILITY.SORT_DEFAULT';
        }
        return this.isColumnSorted(column, 'asc') ?
            'ADF-DATATABLE.ACCESSIBILITY.SORT_ASCENDING_BY' :
            'ADF-DATATABLE.ACCESSIBILITY.SORT_DESCENDING_BY';
    }
}
DataTableComponent.decorators = [
    { type: Component, args: [{
                selector: 'adf-datatable',
                template: "<div\n    role=\"grid\"\n    *ngIf=\"data\" class=\"adf-full-width\"\n    [class.adf-datatable-card]=\"display === 'gallery'\"\n    [class.adf-datatable-list]=\"display === 'list'\"\n    [class.adf-sticky-header]=\"isStickyHeaderEnabled()\"\n    [class.adf-datatable--empty]=\"(isEmpty() && !isHeaderVisible()) || loading\"\n    [class.adf-datatable--empty--header-visible]=\"isEmpty() && isHeaderVisible()\">\n    <div *ngIf=\"isHeaderVisible()\" class=\"adf-datatable-header\" role=\"rowgroup\" [ngClass]=\"{ 'adf-sr-only': !isHeaderVisible() }\">\n        <adf-datatable-row\n            data-automation-id=\"datatable-row-header\"\n            [disabled]=\"!isHeaderVisible()\"\n            class=\"adf-datatable-row\"\n            *ngIf=\"display === 'list'\"\n            role=\"row\">\n            <!-- Actions (left) -->\n            <div *ngIf=\"actions && actionsPosition === 'left'\" class=\"adf-actions-column adf-datatable-cell-header\">\n                <span class=\"adf-sr-only\">{{ 'ADF-DATATABLE.ACCESSIBILITY.ACTIONS' | translate }}</span>\n            </div>\n            <!-- Columns -->\n            <div *ngIf=\"multiselect\" class=\"adf-datatable-cell-header adf-datatable-checkbox\">\n                <mat-checkbox [indeterminate]=\"isSelectAllIndeterminate\" [checked]=\"isSelectAllChecked\" (change)=\"onSelectAllClick($event)\" class=\"adf-checkbox-sr-only\">{{ 'ADF-DATATABLE.ACCESSIBILITY.SELECT_ALL' | translate }}</mat-checkbox>\n            </div>\n            <div class=\"adf-datatable-cell--{{col.type || 'text'}} {{col.cssClass}} adf-datatable-cell-header\"\n                 *ngFor=\"let col of data.getColumns()\"\n                 [class.adf-sortable]=\"col.sortable\"\n                 [attr.data-automation-id]=\"'auto_id_' + col.key\"\n                 [class.adf-datatable__header--sorted-asc]=\"isColumnSorted(col, 'asc')\"\n                 [class.adf-datatable__header--sorted-desc]=\"isColumnSorted(col, 'desc')\"\n                 (click)=\"onColumnHeaderClick(col)\"\n                 (keyup.enter)=\"onColumnHeaderClick(col)\"\n                 role=\"columnheader\"\n                 [attr.tabindex]=\"isHeaderVisible() ? 0 : null\"\n                 [attr.aria-sort]=\"col.sortable ? (getAriaSort(col) | translate) : null\"\n                 adf-drop-zone dropTarget=\"header\" [dropColumn]=\"col\">\n                <ng-container *ngIf=\"!col.header\">\n                    <span *ngIf=\"col.title\" class=\"adf-datatable-cell-value\">{{ col.title | translate}}</span>\n                    <span *ngIf=\"col.title && col.sortable\" class=\"adf-sr-only\" aria-live=\"polite\">{{ getSortLiveAnnouncement(col) | translate: { string: col.title | translate } }}</span>\n                    <ng-template *ngIf=\"allowFiltering\" [ngTemplateOutlet]=\"headerFilterTemplate\" [ngTemplateOutletContext]=\"{$implicit: col}\"></ng-template>\n                </ng-container>\n                <ng-template *ngIf=\"col.header\" [ngTemplateOutlet]=\"col.header\" [ngTemplateOutletContext]=\"{$implicit: col}\"></ng-template>\n            </div>\n            <!-- Actions (right) -->\n            <div *ngIf=\"actions && actionsPosition === 'right'\" class=\"adf-actions-column adf-datatable-cell-header adf-datatable__actions-cell\">\n                <span class=\"adf-sr-only\">{{ 'ADF-DATATABLE.ACCESSIBILITY.ACTIONS' | translate }}</span>\n            </div>\n        </adf-datatable-row>\n        <mat-form-field *ngIf=\"display === 'gallery' && isHeaderVisible()\">\n            <mat-select [value]=\"getSortingKey()\" [attr.data-automation-id]=\"'grid-view-sorting'\">\n                <mat-option *ngFor=\"let col of getSortableColumns()\"\n                            [value]=\"col.key\"\n                            [attr.data-automation-id]=\"'grid-view-sorting-'+col.title\"\n                            (click)=\"onColumnHeaderClick(col)\"\n                            (keyup.enter)=\"onColumnHeaderClick(col)\">\n                    {{ col.title | translate}}\n                </mat-option>\n            </mat-select>\n        </mat-form-field>\n    </div>\n\n    <div class=\"adf-datatable-body\" role=\"rowgroup\">\n        <ng-container *ngIf=\"!loading && !noPermission\">\n            <adf-datatable-row *ngFor=\"let row of data.getRows(); let idx = index\"\n                [row]=\"row\"\n                (select)=\"onEnterKeyPressed(row, $event)\"\n                (keyup)=\"onRowKeyUp(row, $event)\"\n                (keydown)=\"onRowEnterKeyDown(row, $event)\"\n                [adf-upload]=\"rowAllowsDrop(row)\"\n                [adf-upload-data]=\"row\"\n                [ngStyle]=\"rowStyle\"\n                [ngClass]=\"getRowStyle(row)\"\n                [attr.data-automation-id]=\"'datatable-row-' + idx\">\n                <!-- Actions (left) -->\n                <div *ngIf=\"actions && actionsPosition === 'left'\" role=\"gridcell\" class=\"adf-datatable-cell\">\n                    <button mat-icon-button [matMenuTriggerFor]=\"menu\" #actionsMenuTrigger=\"matMenuTrigger\"\n                            [ngClass]=\"getHideActionsWithoutHoverClass(actionsMenuTrigger)\"\n                            [title]=\"'ADF-DATATABLE.CONTENT-ACTIONS.TOOLTIP' | translate\"\n                            [attr.id]=\"'action_menu_left_' + idx\"\n                            [attr.data-automation-id]=\"'action_menu_' + idx\">\n                        <mat-icon>more_vert</mat-icon>\n                    </button>\n                    <mat-menu #menu=\"matMenu\">\n                        <button mat-menu-item *ngFor=\"let action of getRowActions(row)\"\n                                [attr.data-automation-id]=\"action.title\"\n                                [disabled]=\"action.disabled\"\n                                (click)=\"onExecuteRowAction(row, action)\">\n                            <mat-icon *ngIf=\"action.icon\">{{ action.icon }}</mat-icon>\n                            <span>{{ action.title | translate }}</span>\n                        </button>\n                    </mat-menu>\n                </div>\n\n                <div *ngIf=\"multiselect\" class=\"adf-datatable-cell adf-datatable-checkbox\">\n                    <mat-checkbox\n                        [checked]=\"row.isSelected\"\n                        [attr.aria-checked]=\"row.isSelected\"\n                        role=\"checkbox\"\n                        (change)=\"onCheckboxChange(row, $event)\"\n                        class=\"adf-checkbox-sr-only\">\n                        {{ 'ADF-DATATABLE.ACCESSIBILITY.SELECT_FILE' | translate }}\n                    </mat-checkbox>\n                </div>\n                <div *ngFor=\"let col of data.getColumns()\"\n                     role=\"gridcell\"\n                     class=\"adf-datatable-cell adf-datatable-cell--{{col.type || 'text'}} {{col.cssClass}}\"\n                     [attr.title]=\"col.title | translate\"\n                     [attr.data-automation-id]=\"getAutomationValue(row)\"\n                     [attr.aria-selected]=\"row.isSelected ? true : false\"\n                     [attr.aria-label]=\"col.title ? (col.title | translate) : null\"\n                     (click)=\"onRowClick(row, $event)\"\n                     (keydown.enter)=\"onEnterKeyPressed(row, $any($event))\"\n                     [adf-context-menu]=\"getContextMenuActions(row, col)\"\n                     [adf-context-menu-enabled]=\"contextMenu\"\n                     adf-drop-zone dropTarget=\"cell\" [dropColumn]=\"col\" [dropRow]=\"row\">\n                    <div *ngIf=\"!col.template\" class=\"adf-datatable-cell-container\">\n                        <ng-container [ngSwitch]=\"col.type\">\n                            <div *ngSwitchCase=\"'image'\" class=\"adf-cell-value\">\n                                <mat-icon *ngIf=\"isIconValue(row, col); else no_iconvalue\">{{ asIconValue(row, col) }}\n                                </mat-icon>\n                                <ng-template #no_iconvalue>\n                                    <mat-icon class=\"adf-datatable-selected\"\n                                              *ngIf=\"row.isSelected && !multiselect; else no_selected_row\" svgIcon=\"selected\">\n                                    </mat-icon>\n                                    <ng-template #no_selected_row>\n                                        <img class=\"adf-datatable-center-img-ie\"\n                                            [attr.aria-label]=\" (data.getValue(row, col) | fileType) === 'disable' ?\n                                                ('ADF-DATATABLE.ACCESSIBILITY.ICON_DISABLED' | translate) :\n                                                'ADF-DATATABLE.ACCESSIBILITY.ICON_TEXT' | translate:{\n                                                    type: 'ADF-DATATABLE.FILE_TYPE.' + (data.getValue(row, col) | fileType | uppercase) | translate\n                                                }\"\n                                            [attr.alt]=\" (data.getValue(row, col) | fileType) === 'disable' ?\n                                                ('ADF-DATATABLE.ACCESSIBILITY.ICON_DISABLED' | translate) :\n                                                'ADF-DATATABLE.ACCESSIBILITY.ICON_TEXT' | translate:{\n                                                        type: 'ADF-DATATABLE.FILE_TYPE.' + (data.getValue(row, col) | fileType | uppercase) | translate\n                                                }\"\n                                            src=\"{{ data.getValue(row, col) }}\"\n                                            (error)=\"onImageLoadingError($event, row)\">\n                                    </ng-template>\n                                </ng-template>\n                            </div>\n                            <div *ngSwitchCase=\"'icon'\" class=\"adf-cell-value\">\n                                <mat-icon>{{ data.getValue(row, col) }}</mat-icon>\n                            </div>\n                            <div *ngSwitchCase=\"'date'\" class=\"adf-cell-value\" [attr.tabindex]=\"data.getValue(row, col, resolverFn)? 0 : -1\"\n                                 [attr.data-automation-id]=\"'date_' + (data.getValue(row, col, resolverFn) | adfLocalizedDate: 'medium') \">\n                                <adf-date-cell class=\"adf-datatable-center-date-column-ie\"\n                                    [data]=\"data\"\n                                    [column]=\"col\"\n                                    [row]=\"row\"\n                                    [resolverFn]=\"resolverFn\"\n                                    [tooltip]=\"getCellTooltip(row, col)\">\n                                </adf-date-cell>\n                            </div>\n                            <div *ngSwitchCase=\"'location'\" [attr.tabindex]=\"data.getValue(row, col, resolverFn)? 0 : -1\"  class=\"adf-cell-value\"\n                                 [attr.data-automation-id]=\"'location' + data.getValue(row, col, resolverFn)\">\n                                <adf-location-cell\n                                    [data]=\"data\"\n                                    [column]=\"col\"\n                                    [row]=\"row\"\n                                    [resolverFn]=\"resolverFn\"\n                                    [tooltip]=\"getCellTooltip(row, col)\">\n                                </adf-location-cell>\n                            </div>\n                            <div *ngSwitchCase=\"'fileSize'\" [attr.tabindex]=\"data.getValue(row, col, resolverFn)? 0 : -1\" class=\"adf-cell-value\"\n                                 [attr.data-automation-id]=\"'fileSize_' + data.getValue(row, col, resolverFn)\">\n                                <adf-filesize-cell class=\"adf-datatable-center-size-column-ie\"\n                                    [data]=\"data\"\n                                    [column]=\"col\"\n                                    [row]=\"row\"\n                                    [resolverFn]=\"resolverFn\"\n                                    [tooltip]=\"getCellTooltip(row, col)\">\n                                </adf-filesize-cell>\n                            </div>\n                            <div *ngSwitchCase=\"'text'\" [attr.tabindex]=\"data.getValue(row, col, resolverFn)? 0 : -1\"  class=\"adf-cell-value\"\n                                 [attr.data-automation-id]=\"'text_' + data.getValue(row, col, resolverFn)\">\n                                <adf-datatable-cell\n                                    [copyContent]=\"col.copyContent\"\n                                    [data]=\"data\"\n                                    [column]=\"col\"\n                                    [row]=\"row\"\n                                    [resolverFn]=\"resolverFn\"\n                                    [tooltip]=\"getCellTooltip(row, col)\">\n                                </adf-datatable-cell>\n                            </div>\n                            <div *ngSwitchCase=\"'json'\" [attr.tabindex]=\"data.getValue(row, col, resolverFn)? 0 : -1\" class=\"adf-cell-value\">\n                                <adf-json-cell\n                                    [editable]=\"col.editable\"\n                                    [data]=\"data\"\n                                    [column]=\"col\"\n                                    [resolverFn]=\"resolverFn\"\n                                    [row]=\"row\">\n                                </adf-json-cell>\n                            </div>\n                            <span *ngSwitchDefault class=\"adf-cell-value\">\n                    <!-- empty cell for unknown column type -->\n                    </span>\n                        </ng-container>\n                    </div>\n                    <div *ngIf=\"col.template\" class=\"adf-datatable-cell-container\">\n                        <div class=\"adf-cell-value\" [attr.tabindex]=\"col.focus ? 0 : null\">\n                            <ng-container\n                                [ngTemplateOutlet]=\"col.template\"\n                                [ngTemplateOutletContext]=\"{ $implicit: { data: data, row: row, col: col }, value: data.getValue(row, col, resolverFn) }\">\n                            </ng-container>\n                        </div>\n                    </div>\n                </div>\n\n                <!-- Actions (right) -->\n                <div *ngIf=\"actions && actionsPosition === 'right'\"\n                     role=\"gridcell\"\n                     class=\"adf-datatable-cell adf-datatable__actions-cell adf-datatable-center-actions-column-ie\">\n                    <button mat-icon-button [matMenuTriggerFor]=\"menu\" #actionsMenuTrigger=\"matMenuTrigger\"\n                            [ngClass]=\"getHideActionsWithoutHoverClass(actionsMenuTrigger)\"\n                            [attr.aria-label]=\"'ADF-DATATABLE.ACCESSIBILITY.ROW_OPTION_BUTTON' | translate\"\n                            [title]=\"'ADF-DATATABLE.CONTENT-ACTIONS.TOOLTIP' | translate\"\n                            [attr.id]=\"'action_menu_right_' + idx\"\n                            [attr.data-automation-id]=\"'action_menu_' + idx\">\n                        <mat-icon>more_vert</mat-icon>\n                    </button>\n                    <mat-menu #menu=\"matMenu\">\n                        <button mat-menu-item *ngFor=\"let action of getRowActions(row)\"\n                                [attr.data-automation-id]=\"action.title\"\n                                [attr.aria-label]=\"action.title | translate\"\n                                [disabled]=\"action.disabled\"\n                                (click)=\"onExecuteRowAction(row, action)\">\n                            <mat-icon *ngIf=\"action.icon\">{{ action.icon }}</mat-icon>\n                            <span>{{ action.title | translate }}</span>\n                        </button>\n                    </mat-menu>\n                </div>\n            </adf-datatable-row>\n            <div *ngIf=\"isEmpty()\"\n                 role=\"row\"\n                 [class.adf-datatable-row]=\"display === 'list'\"\n                 [class.adf-datatable-card-empty]=\"display === 'gallery'\">\n                <div class=\"adf-no-content-container adf-datatable-cell\" role=\"gridcell\">\n                    <ng-template *ngIf=\"noContentTemplate\"\n                                 ngFor [ngForOf]=\"[data]\"\n                                 [ngForTemplate]=\"noContentTemplate\">\n                    </ng-template>\n                    <ng-content select=\"adf-empty-list\"></ng-content>\n                </div>\n            </div>\n            <div *ngFor=\"let row of fakeRows\"\n                 class=\"adf-datatable-row adf-datatable-row-empty-card\">\n            </div>\n        </ng-container>\n        <div *ngIf=\"!loading && noPermission\"\n             role=\"row\"\n             [class.adf-datatable-row]=\"display === 'list'\"\n             [class.adf-datatable-card-permissions]=\"display === 'gallery'\"\n             class=\"adf-no-permission__row\">\n            <div class=\"adf-no-permission__cell adf-no-content-container adf-datatable-cell\">\n                <ng-template *ngIf=\"noPermissionTemplate\"\n                             ngFor [ngForOf]=\"[data]\"\n                             [ngForTemplate]=\"noPermissionTemplate\">\n                </ng-template>\n            </div>\n        </div>\n        <div *ngIf=\"loading\"\n             [class.adf-datatable-row]=\"display === 'list'\"\n             [class.adf-datatable-card-loading]=\"display === 'gallery'\">\n            <div class=\"adf-no-content-container adf-datatable-cell\">\n                <ng-template *ngIf=\"loadingTemplate\"\n                             ngFor [ngForOf]=\"[data]\"\n                             [ngForTemplate]=\"loadingTemplate\">\n                </ng-template>\n            </div>\n        </div>\n    </div>\n</div>\n",
                encapsulation: ViewEncapsulation.None,
                host: { class: 'adf-datatable' },
                styles: [".adf-datatable{height:100%;overflow-y:scroll}.adf-datatable .adf-full-width{width:100%}.adf-datatable-card{border:1px solid var(--theme-fg-divider)}.adf-datatable-card .adf-datatable-body{align-content:flex-start;align-items:flex-start;display:flex;flex-flow:row wrap;justify-content:space-evenly;width:100%}.adf-datatable-card .adf-datatable-body .adf-datatable-row{display:flex;flex:0 1 24%;flex-direction:column;height:200px;margin:6px;max-width:288px!important;min-width:288px!important;overflow:hidden!important;padding:15px;position:relative;transition:all .3s ease;transition:box-shadow .28s cubic-bezier(.4,0,.2,1);width:288px!important}.adf-datatable-card .adf-datatable-body .adf-datatable-row:not([class*=mat-elevation-z]){box-shadow:0 3px 1px -2px rgba(0,0,0,.2),0 2px 2px 0 rgba(0,0,0,.14),0 1px 5px 0 rgba(0,0,0,.12)}.adf-datatable-card .adf-datatable-body .adf-datatable-row-empty-card{height:0!important;margin-bottom:0;margin-top:0;padding-bottom:0;padding-top:0}.adf-datatable-card .adf-datatable-body .adf-is-selected{background:var(--adf-datatable-selected-color);padding-bottom:31px}.adf-datatable-card .adf-datatable-body .adf-datatable-card-permission{min-height:250px;width:100%}.adf-datatable-card .adf-datatable-body .adf-datatable-card-permission .adf-datatable-cell{height:240px!important}.adf-datatable-card .adf-datatable-body .adf-datatable-card-loading{min-height:250px;width:100%}.adf-datatable-card .adf-datatable-body .adf-datatable-card-loading .adf-datatable-cell{height:240px!important}.adf-datatable-card .adf-datatable-body .adf-datatable-card-empty{min-height:380px;width:100%}.adf-datatable-card .adf-datatable-body .adf-datatable-card-empty .adf-datatable-cell{height:370px!important}.adf-datatable-card .adf-datatable-body .adf-datatable-cell--image{margin-left:8px}.adf-datatable-card .adf-datatable-body .adf-datatable-cell{flex:0 1 24%;height:136px!important;outline:none;overflow:hidden;text-align:left;text-overflow:ellipsis;white-space:nowrap}.adf-datatable-card .adf-datatable-body .adf-datatable-cell:before{color:var(--theme-text-color);content:attr(title);float:left;margin-left:10px;overflow:hidden;text-align:left;text-overflow:ellipsis;white-space:nowrap;width:140px}.adf-datatable-card .adf-datatable-body .adf-datatable-cell .adf-datatable-cell-value{display:block;overflow:hidden;text-overflow:ellipsis}.adf-datatable-card .adf-datatable-body .adf-datatable__actions-cell{height:42px!important;position:absolute;right:0;top:4px;width:42px!important}.adf-datatable-card .adf-datatable-body .adf-datatable-row:not(:hover) .adf-datatable-hide-actions-without-hover{display:none}.adf-datatable-card .adf-datatable-body .adf-image-table-cell{border-bottom:1px solid var(--theme-fg-divider);margin:8px;overflow:visible;padding:4px}.adf-datatable-card .adf-datatable-body .adf-image-table-cell .adf-datatable-cell-container{float:left;width:42px}.adf-datatable-card .adf-datatable-body .adf-image-table-cell:after{content:attr(filename);float:left;margin:2px;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;width:140px}.adf-datatable-card .adf-datatable-body .adf-datatable-checkbox{margin:8px}.adf-datatable-card .adf-datatable-header{float:right;margin-right:18px}.adf-datatable-list{background-color:var(--theme-card-bg-color);border:1px solid var(--theme-border-color);box-sizing:border-box;display:flex;flex-direction:column;overflow-x:auto}@media screen and (-ms-high-contrast:active),screen and (-ms-high-contrast:none){.adf-datatable-list .adf-datatable-center-size-column-ie{padding-top:17px}.adf-datatable-list .adf-datatable-center-actions-column-ie{padding-top:7px!important}.adf-datatable-list .adf-datatable-center-date-column-ie{position:relative!important}.adf-datatable-list .adf-datatable-center-date-column-ie .adf-datatable-cell-value{width:100%}.adf-datatable-list .adf-datatable-center-img-ie{height:56px;min-width:0;padding:0;width:24px}}.adf-datatable-list .adf-datatable-header{box-sizing:border-box;display:flex;flex-direction:column;min-width:100%;width:-webkit-fit-content;width:-moz-fit-content;width:fit-content}.adf-datatable-list .adf-datatable-cell{color:var(--theme-text-fg-color)}.adf-datatable-list .adf-datatable-row:focus,.adf-datatable-list .adf-datatable-row:hover{background-color:var(--theme-bg-hover-color)}.adf-datatable-list .adf-datatable-row:focus{outline:1px solid var(--theme-accent-color-a200);outline-offset:-1px}.adf-datatable-list .adf-datatable-row .adf-cell-value:focus,.adf-datatable-list .adf-datatable-row .adf-datatable-cell-header:focus{outline:1px solid var(--theme-accent-color-a200);outline-offset:-1px}.adf-datatable-list .adf-datatable-body{background-color:inherit;display:flex;flex-direction:column;min-width:100%;width:-webkit-fit-content;width:-moz-fit-content;width:fit-content}.adf-datatable-list .adf-datatable-body .adf-datatable-row{-webkit-touch-callout:none;-webkit-user-select:none;border-top:1px solid var(--theme-border-color);cursor:pointer;min-height:56px;transition-duration:.28s;transition-property:background-color;transition-timing-function:cubic-bezier(.4,0,.2,1);user-select:none}.adf-datatable-list .adf-datatable-body .adf-datatable-row.adf-is-selected,.adf-datatable-list .adf-datatable-body .adf-datatable-row.adf-is-selected:hover{background-color:var(--theme-selected-button-bg-color)}.adf-datatable-list .adf-datatable-body .adf-datatable-row:last-child{border-bottom:1px solid var(--theme-border-color)}.adf-datatable-list .adf-datatable-row{align-items:center;display:flex;padding-left:15px;padding-right:15px}.adf-datatable-list .adf-datatable-row .adf-datatable-checkbox{max-width:50px;width:50px}@media screen and (-ms-high-contrast:active),screen and (-ms-high-contrast:none){.adf-datatable-list .adf-datatable-row .adf-datatable-checkbox{padding-top:15px}}.adf-datatable-list .adf-datatable-cell,.adf-datatable-list .adf-datatable-cell-header{box-sizing:border-box;min-width:50px;text-align:left}.adf-datatable-list .adf-datatable-cell--text,.adf-datatable-list .adf-datatable-cell-header--text{position:relative;text-align:left}.adf-datatable-list .adf-datatable-cell--date,.adf-datatable-list .adf-datatable-cell-header--date{text-align:left}.adf-datatable-list .adf-datatable-cell--number,.adf-datatable-list .adf-datatable-cell-header--number{text-align:right}.adf-datatable-list .adf-datatable-cell--icon,.adf-datatable-list .adf-datatable-cell--image,.adf-datatable-list .adf-datatable-cell-header--icon,.adf-datatable-list .adf-datatable-cell-header--image{min-width:50px;padding-left:24px;padding-right:24px;text-align:left;width:50px}.adf-datatable-list .adf-datatable-cell--fileSize,.adf-datatable-list .adf-datatable-cell-header--fileSize{min-width:50px}.adf-datatable-list .adf-datatable-cell-header{-webkit-touch-callout:none;-webkit-user-select:none;box-sizing:border-box;color:var(--theme-text-fg-color);cursor:pointer;font-size:12px;font-weight:700;letter-spacing:0;line-height:24px;min-height:56px!important;padding-bottom:8px;padding-top:12px!important;position:relative;text-overflow:ellipsis;user-select:none;vertical-align:bottom}.adf-datatable-list .adf-datatable-cell-header.adf-sortable{-webkit-touch-callout:none;-webkit-user-select:none;align-items:center;display:flex;user-select:none}.adf-datatable-list .adf-datatable-cell-header.adf-sortable:hover{cursor:pointer}.adf-datatable-list .adf-datatable-cell-header.adf-datatable__header--sorted-asc,.adf-datatable-list .adf-datatable-cell-header.adf-datatable__header--sorted-desc{color:var(--theme-text-fg-color)}.adf-datatable-list .adf-datatable-cell-header.adf-datatable__header--sorted-asc:before,.adf-datatable-list .adf-datatable-cell-header.adf-datatable__header--sorted-desc:before{-webkit-font-feature-settings:\"liga\";-webkit-font-smoothing:antialiased;content:\"\\e5d8\";display:inline-block;font-family:Material Icons;font-feature-settings:\"liga\";font-size:24px;font-size:16px;font-style:normal;font-weight:400;left:5px;letter-spacing:normal;line-height:1;position:relative;right:5px;text-transform:none;vertical-align:sub;word-wrap:normal}.adf-datatable-list .adf-datatable-cell-header.adf-datatable__header--sorted-desc:before{content:\"\\e5db\"}.adf-datatable-list .adf-datatable-cell-header.adf-datatable-cell--fileSize.adf-datatable__header--sorted-asc:before,.adf-datatable-list .adf-datatable-cell-header.adf-datatable-cell--fileSize.adf-datatable__header--sorted-desc:before{left:-3px;right:-3px}.adf-datatable-list .adf-datatable-cell-header.adf-datatable-checkbox{align-items:center;display:flex}.adf-datatable-list .adf-datatable-cell-header.adf-expand-cell-1,.adf-datatable-list .adf-datatable-cell.adf-expand-cell-1{flex-grow:1}.adf-datatable-list .adf-datatable-cell-header.adf-expand-cell-2,.adf-datatable-list .adf-datatable-cell.adf-expand-cell-2{flex-grow:2}.adf-datatable-list .adf-datatable-cell-header.adf-expand-cell-3,.adf-datatable-list .adf-datatable-cell.adf-expand-cell-3{flex-grow:3}.adf-datatable-list .adf-datatable-cell-header.adf-expand-cell-4,.adf-datatable-list .adf-datatable-cell.adf-expand-cell-4{flex-grow:4}.adf-datatable-list .adf-datatable-cell-header.adf-expand-cell-5,.adf-datatable-list .adf-datatable-cell.adf-expand-cell-5{flex-grow:5}.adf-datatable-list .adf-datatable-cell-header.adf-no-grow-cell,.adf-datatable-list .adf-datatable-cell.adf-no-grow-cell{flex-grow:0;min-width:100px}.adf-datatable-list .adf-datatable-cell,.adf-datatable-list .adf-datatable-cell-header{align-items:center;display:flex;flex:1;min-height:inherit;padding:0}.adf-datatable-list .adf-datatable-cell-header .adf-datatable-cell-container,.adf-datatable-list .adf-datatable-cell .adf-datatable-cell-container{align-items:center;display:flex;min-height:inherit;overflow:hidden;width:100%}.adf-datatable-list .adf-datatable-cell-header .adf-datatable-cell-value,.adf-datatable-list .adf-datatable-cell .adf-datatable-cell-value{display:block;padding:10px;word-break:break-word}@media screen and (-ms-high-contrast:active),screen and (-ms-high-contrast:none){.adf-datatable-list .adf-datatable-cell-header .adf-datatable-cell-value,.adf-datatable-list .adf-datatable-cell .adf-datatable-cell-value{padding:17px 10px 10px}}.adf-datatable-list .adf-datatable-cell--fileSize .adf-datatable-cell-value,.adf-datatable-list .adf-datatable-cell-header--fileSize .adf-datatable-cell-value{padding:0 10px 0 0}.adf-datatable-list .adf-cell-value{align-items:center;display:flex;min-height:inherit;width:100%;word-break:break-all}.adf-datatable-list .adf-datatable-cell--image,.adf-datatable-list .adf-datatable__actions-cell{display:flex;max-width:50px}.adf-datatable-list .adf-datatable-row:not(:hover) .adf-datatable-hide-actions-without-hover{display:none}.adf-datatable-list .adf-datatable-cell--image{max-width:50px}.adf-datatable-list .adf-location-cell a{color:var(--theme-text-fg-color);text-decoration:none}.adf-datatable-list .adf-location-cell a:hover{color:var(--adf-datatable-cell-link-hover-color);text-decoration:underline}.adf-datatable-list .adf-sr-only{border:0;clip:rect(0,0,0,0);height:1px;margin:-1px;overflow:hidden;padding:0;position:absolute;width:1px}.adf-datatable-list .adf-is-selected{background:var(--adf-datatable-selected-color)}.adf-datatable-list .adf-datatable-link{color:var(--theme-text-fg-color);text-decoration:none}.adf-datatable-list .adf-datatable-link:hover{color:var(--adf-datatable-cell-link-hover-color);text-decoration:underline}.adf-datatable-list .adf-dynamic-column .adf-datatable-link:hover{text-decoration:none}.adf-datatable-list .adf-dynamic-column .adf-datatable-link:hover .adf-datatable-cell-value{text-decoration:underline}.adf-datatable-list .adf-datatable-cell-header .adf-datatable-link .adf-datatable-cell-value,.adf-datatable-list .adf-datatable-cell .adf-datatable-link .adf-datatable-cell-value{padding:0 10px}.adf-datatable-list .adf-ellipsis-cell{overflow:hidden;padding:0 4px;position:sticky;text-overflow:ellipsis;white-space:nowrap}.adf-datatable-list .adf-ellipsis-cell.adf-datatable-cell-header,.adf-datatable-list .adf-ellipsis-cell .adf-datatable-content-cell{max-width:calc(100% - .1px);overflow:hidden;text-overflow:ellipsis}.adf-datatable-list .adf-ellipsis-cell.adf-datatable-cell-header .adf-datatable-cell-value,.adf-datatable-list .adf-ellipsis-cell .adf-datatable-content-cell .adf-datatable-cell-value{overflow:hidden;text-overflow:ellipsis}.adf-datatable-list .adf-ellipsis-cell .adf-datatable-content-cell{overflow:unset;position:absolute}@media screen and (-ms-high-contrast:active),screen and (-ms-high-contrast:none){.adf-datatable-list .adf-ellipsis-cell .adf-cell-value{top:100%}}.adf-datatable-list .adf-ellipsis-cell>div:after{content:attr(title);display:block;height:0;overflow:hidden}.adf-datatable-list .adf-no-content-container{border:none!important;justify-content:center;padding:0!important;width:100%}.adf-datatable-list .adf-no-content-container>img{width:100%}.adf-datatable-list .adf-loading-content-container{padding:0!important;width:100%}.adf-datatable-list .adf-loading-content-container>img{width:100%}.adf-datatable-list .adf-no-permission__row:hover{background-color:inherit;cursor:default}.adf-datatable-list .adf-no-permission__cell{padding:0!important}.adf-datatable-list .adf-hidden{display:none}@media (max-width:768px){.adf-datatable-list .adf-desktop-only{display:none!important}}@media (max-device-width:768px){.adf-datatable-list .adf-desktop-only{display:none!important}}.adf-checkbox-sr-only .mat-checkbox-label{border:0;clip:rect(0,0,0,0);height:1px;margin:-1px;overflow:hidden;padding:0;position:absolute;width:1px}.adf-sticky-header{border-top:0;height:100%}.adf-sticky-header .adf-datatable-header{border-bottom:1px solid var(--theme-border-color);border-top:1px solid var(--theme-border-color);display:block;margin-right:0}.adf-sticky-header .adf-datatable-body{display:block;flex:1;margin-top:-1px;overflow-y:scroll}.adf-upload__dragging>div{border-bottom:1px dashed var(--theme-accent-color-a200)!important;border-top:1px dashed var(--theme-accent-color-a200)!important}.adf-upload__dragging>div:first-child{border-left:1px dashed var(--theme-accent-color-a200)}.adf-upload__dragging>div:last-child{border-right:1px dashed var(--theme-accent-color-a200)!important}.adf-datatable--empty{align-items:center;display:flex;flex:1;flex-direction:column;height:100%;height:inherit;justify-content:center;min-height:0;overflow:hidden}.adf-datatable--empty .adf-datatable-body .adf-datatable-row{background-color:var(--theme-card-bg-color);border:none!important;height:100%}.adf-datatable--empty .adf-datatable-body .adf-datatable-row:focus,.adf-datatable--empty .adf-datatable-body .adf-datatable-row:hover{background-color:unset;cursor:default}.adf-datatable--empty--header-visible .adf-datatable-header{border:1px solid var(--theme-border-color)}.adf-datatable--empty--header-visible .adf-datatable-body{align-items:center;display:flex;flex:1;flex-direction:column;height:100%;justify-content:center;min-height:0;overflow:hidden}.adf-datatable--empty--header-visible .adf-datatable-body .adf-datatable-row{background-color:var(--theme-card-bg-color);border:none!important;height:100%}.adf-datatable--empty--header-visible .adf-datatable-body .adf-datatable-row:focus,.adf-datatable--empty--header-visible .adf-datatable-body .adf-datatable-row:hover{background-color:unset;cursor:default}"]
            },] }
];
DataTableComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: IterableDiffers }
];
DataTableComponent.propDecorators = {
    rowsList: [{ type: ViewChildren, args: [DataTableRowComponent,] }],
    columnList: [{ type: ContentChild, args: [DataColumnListComponent,] }],
    data: [{ type: Input }],
    display: [{ type: Input }],
    rows: [{ type: Input }],
    sorting: [{ type: Input }],
    columns: [{ type: Input }],
    selectionMode: [{ type: Input }],
    multiselect: [{ type: Input }],
    actions: [{ type: Input }],
    actionsPosition: [{ type: Input }],
    actionsVisibleOnHover: [{ type: Input }],
    fallbackThumbnail: [{ type: Input }],
    contextMenu: [{ type: Input }],
    rowStyle: [{ type: Input }],
    rowStyleClass: [{ type: Input }],
    showHeader: [{ type: Input }],
    stickyHeader: [{ type: Input }],
    rowClick: [{ type: Output }],
    rowDblClick: [{ type: Output }],
    showRowContextMenu: [{ type: Output }],
    showRowActionsMenu: [{ type: Output }],
    executeRowAction: [{ type: Output }],
    loading: [{ type: Input }],
    noPermission: [{ type: Input }],
    rowMenuCacheEnabled: [{ type: Input }],
    resolverFn: [{ type: Input }],
    allowFiltering: [{ type: Input }],
    onKeydown: [{ type: HostListener, args: ['keyup', ['$event'],] }]
};
//# sourceMappingURL=data:application/json;base64,