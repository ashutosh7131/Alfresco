/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { ContentChild, Input, Directive } from '@angular/core';
import { AppConfigService } from '../../app-config/app-config.service';
import { DataColumnListComponent } from '../../data-column/data-column-list.component';
import { ObjectDataColumn } from './object-datacolumn.model';
export class DataTableSchema {
    constructor(appConfigService, presetKey, presetsModel) {
        this.appConfigService = appConfigService;
        this.presetKey = presetKey;
        this.presetsModel = presetsModel;
        this.layoutPresets = {};
    }
    createDatatableSchema() {
        this.loadLayoutPresets();
        if (!this.columns || this.columns.length === 0) {
            this.columns = this.mergeJsonAndHtmlSchema();
        }
    }
    loadLayoutPresets() {
        const externalSettings = this.appConfigService.get(this.presetKey, null);
        if (externalSettings) {
            this.layoutPresets = Object.assign({}, this.presetsModel, externalSettings);
        }
        else {
            this.layoutPresets = this.presetsModel;
        }
    }
    mergeJsonAndHtmlSchema() {
        let customSchemaColumns = this.getSchemaFromConfig(this.presetColumn).concat(this.getSchemaFromHtml(this.columnList));
        if (customSchemaColumns.length === 0) {
            customSchemaColumns = this.getDefaultLayoutPreset();
        }
        return customSchemaColumns;
    }
    getSchemaFromHtml(columnList) {
        let schema = [];
        if (columnList && columnList.columns && columnList.columns.length > 0) {
            schema = columnList.columns.map((c) => c);
        }
        return schema;
    }
    getSchemaFromConfig(presetColumn) {
        return presetColumn ? (this.layoutPresets[presetColumn]).map((col) => new ObjectDataColumn(col)) : [];
    }
    getDefaultLayoutPreset() {
        return (this.layoutPresets['default']).map((col) => new ObjectDataColumn(col));
    }
    setPresetKey(presetKey) {
        this.presetKey = presetKey;
    }
    setPresetsModel(presetsModel) {
        this.presetsModel = presetsModel;
    }
}
DataTableSchema.decorators = [
    { type: Directive }
];
DataTableSchema.ctorParameters = () => [
    { type: AppConfigService },
    { type: String },
    { type: undefined }
];
DataTableSchema.propDecorators = {
    columnList: [{ type: ContentChild, args: [DataColumnListComponent,] }],
    presetColumn: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YS10YWJsZS5zY2hlbWEuanMiLCJzb3VyY2VSb290IjoiL2hvbWUvdHJhdmlzL2J1aWxkL0FsZnJlc2NvL2FsZnJlc2NvLW5nMi1jb21wb25lbnRzL2xpYi9jb3JlLyIsInNvdXJjZXMiOlsiZGF0YXRhYmxlL2RhdGEvZGF0YS10YWJsZS5zY2hlbWEudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7OztHQWVHO0FBRUgsT0FBTyxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQy9ELE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHFDQUFxQyxDQUFDO0FBQ3ZFLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLDhDQUE4QyxDQUFDO0FBRXZGLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBSTdELE1BQU0sT0FBZ0IsZUFBZTtJQWFqQyxZQUFvQixnQkFBa0MsRUFDaEMsU0FBaUIsRUFDakIsWUFBaUI7UUFGbkIscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFrQjtRQUNoQyxjQUFTLEdBQVQsU0FBUyxDQUFRO1FBQ2pCLGlCQUFZLEdBQVosWUFBWSxDQUFLO1FBSi9CLGtCQUFhLEdBQUcsRUFBRSxDQUFDO0lBSWdCLENBQUM7SUFFckMscUJBQXFCO1FBQ3hCLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO1FBQ3pCLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtZQUM1QyxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxzQkFBc0IsRUFBRSxDQUFDO1NBQ2hEO0lBQ0wsQ0FBQztJQUVNLGlCQUFpQjtRQUNwQixNQUFNLGdCQUFnQixHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUN6RSxJQUFJLGdCQUFnQixFQUFFO1lBQ2xCLElBQUksQ0FBQyxhQUFhLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLFlBQVksRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDO1NBQy9FO2FBQU07WUFDSCxJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUM7U0FDMUM7SUFDTCxDQUFDO0lBRU0sc0JBQXNCO1FBQ3pCLElBQUksbUJBQW1CLEdBQUcsSUFBSSxDQUFDLG1CQUFtQixDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDO1FBQ3RILElBQUksbUJBQW1CLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtZQUNsQyxtQkFBbUIsR0FBRyxJQUFJLENBQUMsc0JBQXNCLEVBQUUsQ0FBQztTQUN2RDtRQUNELE9BQU8sbUJBQW1CLENBQUM7SUFDL0IsQ0FBQztJQUVNLGlCQUFpQixDQUFDLFVBQW1DO1FBQ3hELElBQUksTUFBTSxHQUFHLEVBQUUsQ0FBQztRQUNoQixJQUFJLFVBQVUsSUFBSSxVQUFVLENBQUMsT0FBTyxJQUFJLFVBQVUsQ0FBQyxPQUFPLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUNuRSxNQUFNLEdBQUcsVUFBVSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFjLENBQUMsQ0FBQyxDQUFDO1NBQzFEO1FBQ0QsT0FBTyxNQUFNLENBQUM7SUFDbEIsQ0FBQztJQUVLLG1CQUFtQixDQUFDLFlBQW9CO1FBQzFDLE9BQU8sWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLElBQUksZ0JBQWdCLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO0lBQzFHLENBQUM7SUFFTyxzQkFBc0I7UUFDMUIsT0FBTyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLElBQUksZ0JBQWdCLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUNuRixDQUFDO0lBRU0sWUFBWSxDQUFDLFNBQWlCO1FBQ2pDLElBQUksQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFDO0lBQy9CLENBQUM7SUFFTSxlQUFlLENBQUMsWUFBaUI7UUFDcEMsSUFBSSxDQUFDLFlBQVksR0FBRyxZQUFZLENBQUM7SUFDckMsQ0FBQzs7O1lBakVKLFNBQVM7OztZQUxELGdCQUFnQjs7Ozs7eUJBU3BCLFlBQVksU0FBQyx1QkFBdUI7MkJBSXBDLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBDb250ZW50Q2hpbGQsIElucHV0LCBEaXJlY3RpdmUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEFwcENvbmZpZ1NlcnZpY2UgfSBmcm9tICcuLi8uLi9hcHAtY29uZmlnL2FwcC1jb25maWcuc2VydmljZSc7XG5pbXBvcnQgeyBEYXRhQ29sdW1uTGlzdENvbXBvbmVudCB9IGZyb20gJy4uLy4uL2RhdGEtY29sdW1uL2RhdGEtY29sdW1uLWxpc3QuY29tcG9uZW50JztcbmltcG9ydCB7IERhdGFDb2x1bW4gfSBmcm9tICcuL2RhdGEtY29sdW1uLm1vZGVsJztcbmltcG9ydCB7IE9iamVjdERhdGFDb2x1bW4gfSBmcm9tICcuL29iamVjdC1kYXRhY29sdW1uLm1vZGVsJztcblxuQERpcmVjdGl2ZSgpXG4vLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6IGRpcmVjdGl2ZS1jbGFzcy1zdWZmaXhcbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBEYXRhVGFibGVTY2hlbWEge1xuXG4gICAgQENvbnRlbnRDaGlsZChEYXRhQ29sdW1uTGlzdENvbXBvbmVudClcbiAgICBjb2x1bW5MaXN0OiBEYXRhQ29sdW1uTGlzdENvbXBvbmVudDtcblxuICAgIC8qKiBDdXN0b20gcHJlc2V0IGNvbHVtbiBzY2hlbWEgaW4gSlNPTiBmb3JtYXQuICovXG4gICAgQElucHV0KClcbiAgICBwcmVzZXRDb2x1bW46IHN0cmluZztcblxuICAgIGNvbHVtbnM6IGFueTtcblxuICAgIHByaXZhdGUgbGF5b3V0UHJlc2V0cyA9IHt9O1xuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBhcHBDb25maWdTZXJ2aWNlOiBBcHBDb25maWdTZXJ2aWNlLFxuICAgICAgICAgICAgICAgIHByb3RlY3RlZCBwcmVzZXRLZXk6IHN0cmluZyxcbiAgICAgICAgICAgICAgICBwcm90ZWN0ZWQgcHJlc2V0c01vZGVsOiBhbnkpIHsgfVxuXG4gICAgcHVibGljIGNyZWF0ZURhdGF0YWJsZVNjaGVtYSgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5sb2FkTGF5b3V0UHJlc2V0cygpO1xuICAgICAgICBpZiAoIXRoaXMuY29sdW1ucyB8fCB0aGlzLmNvbHVtbnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICB0aGlzLmNvbHVtbnMgPSB0aGlzLm1lcmdlSnNvbkFuZEh0bWxTY2hlbWEoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyBsb2FkTGF5b3V0UHJlc2V0cygpOiB2b2lkIHtcbiAgICAgICAgY29uc3QgZXh0ZXJuYWxTZXR0aW5ncyA9IHRoaXMuYXBwQ29uZmlnU2VydmljZS5nZXQodGhpcy5wcmVzZXRLZXksIG51bGwpO1xuICAgICAgICBpZiAoZXh0ZXJuYWxTZXR0aW5ncykge1xuICAgICAgICAgICAgdGhpcy5sYXlvdXRQcmVzZXRzID0gT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5wcmVzZXRzTW9kZWwsIGV4dGVybmFsU2V0dGluZ3MpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5sYXlvdXRQcmVzZXRzID0gdGhpcy5wcmVzZXRzTW9kZWw7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgbWVyZ2VKc29uQW5kSHRtbFNjaGVtYSgpOiBhbnkge1xuICAgICAgICBsZXQgY3VzdG9tU2NoZW1hQ29sdW1ucyA9IHRoaXMuZ2V0U2NoZW1hRnJvbUNvbmZpZyh0aGlzLnByZXNldENvbHVtbikuY29uY2F0KHRoaXMuZ2V0U2NoZW1hRnJvbUh0bWwodGhpcy5jb2x1bW5MaXN0KSk7XG4gICAgICAgIGlmIChjdXN0b21TY2hlbWFDb2x1bW5zLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgY3VzdG9tU2NoZW1hQ29sdW1ucyA9IHRoaXMuZ2V0RGVmYXVsdExheW91dFByZXNldCgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjdXN0b21TY2hlbWFDb2x1bW5zO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXRTY2hlbWFGcm9tSHRtbChjb2x1bW5MaXN0OiBEYXRhQ29sdW1uTGlzdENvbXBvbmVudCk6IGFueSB7XG4gICAgICAgIGxldCBzY2hlbWEgPSBbXTtcbiAgICAgICAgaWYgKGNvbHVtbkxpc3QgJiYgY29sdW1uTGlzdC5jb2x1bW5zICYmIGNvbHVtbkxpc3QuY29sdW1ucy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBzY2hlbWEgPSBjb2x1bW5MaXN0LmNvbHVtbnMubWFwKChjKSA9PiA8RGF0YUNvbHVtbj4gYyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNjaGVtYTtcbiAgICB9XG5cbiAgIHB1YmxpYyBnZXRTY2hlbWFGcm9tQ29uZmlnKHByZXNldENvbHVtbjogc3RyaW5nKTogRGF0YUNvbHVtbltdIHtcbiAgICAgICAgcmV0dXJuIHByZXNldENvbHVtbiA/ICh0aGlzLmxheW91dFByZXNldHNbcHJlc2V0Q29sdW1uXSkubWFwKChjb2wpID0+IG5ldyBPYmplY3REYXRhQ29sdW1uKGNvbCkpIDogW107XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBnZXREZWZhdWx0TGF5b3V0UHJlc2V0KCk6IERhdGFDb2x1bW5bXSB7XG4gICAgICAgIHJldHVybiAodGhpcy5sYXlvdXRQcmVzZXRzWydkZWZhdWx0J10pLm1hcCgoY29sKSA9PiBuZXcgT2JqZWN0RGF0YUNvbHVtbihjb2wpKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgc2V0UHJlc2V0S2V5KHByZXNldEtleTogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMucHJlc2V0S2V5ID0gcHJlc2V0S2V5O1xuICAgIH1cblxuICAgIHB1YmxpYyBzZXRQcmVzZXRzTW9kZWwocHJlc2V0c01vZGVsOiBhbnkpIHtcbiAgICAgICAgdGhpcy5wcmVzZXRzTW9kZWwgPSBwcmVzZXRzTW9kZWw7XG4gICAgfVxufVxuIl19