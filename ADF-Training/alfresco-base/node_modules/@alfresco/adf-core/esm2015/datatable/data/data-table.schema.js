/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { ContentChild, Input, Directive } from '@angular/core';
import { AppConfigService } from '../../app-config/app-config.service';
import { DataColumnListComponent } from '../../data-column/data-column-list.component';
import { ObjectDataColumn } from './object-datacolumn.model';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../../app-config/app-config.service';
export class DataTableSchema {
    constructor(appConfigService, presetKey, presetsModel) {
        this.appConfigService = appConfigService;
        this.presetKey = presetKey;
        this.presetsModel = presetsModel;
        this.layoutPresets = {};
    }
    createDatatableSchema() {
        this.loadLayoutPresets();
        if (!this.columns || this.columns.length === 0) {
            this.columns = this.mergeJsonAndHtmlSchema();
        }
    }
    loadLayoutPresets() {
        const externalSettings = this.appConfigService.get(this.presetKey, null);
        if (externalSettings) {
            this.layoutPresets = Object.assign({}, this.presetsModel, externalSettings);
        }
        else {
            this.layoutPresets = this.presetsModel;
        }
    }
    mergeJsonAndHtmlSchema() {
        let customSchemaColumns = this.getSchemaFromConfig(this.presetColumn).concat(this.getSchemaFromHtml(this.columnList));
        if (customSchemaColumns.length === 0) {
            customSchemaColumns = this.getDefaultLayoutPreset();
        }
        return customSchemaColumns;
    }
    getSchemaFromHtml(columnList) {
        let schema = [];
        if (columnList && columnList.columns && columnList.columns.length > 0) {
            schema = columnList.columns.map((c) => c);
        }
        return schema;
    }
    getSchemaFromConfig(presetColumn) {
        return presetColumn ? (this.layoutPresets[presetColumn]).map((col) => new ObjectDataColumn(col)) : [];
    }
    getDefaultLayoutPreset() {
        return (this.layoutPresets['default']).map((col) => new ObjectDataColumn(col));
    }
    setPresetKey(presetKey) {
        this.presetKey = presetKey;
    }
    setPresetsModel(presetsModel) {
        this.presetsModel = presetsModel;
    }
}
DataTableSchema.ɵfac = function DataTableSchema_Factory(t) { return new (t || DataTableSchema)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.AppConfigService), ɵngcc0.ɵɵdirectiveInject(String), ɵngcc0.ɵɵdirectiveInject(undefined)); };
DataTableSchema.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: DataTableSchema, contentQueries: function DataTableSchema_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, DataColumnListComponent, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.columnList = _t.first);
    } }, inputs: { presetColumn: "presetColumn" } });
DataTableSchema.ctorParameters = () => [
    { type: AppConfigService },
    { type: String },
    { type: undefined }
];
DataTableSchema.propDecorators = {
    columnList: [{ type: ContentChild, args: [DataColumnListComponent,] }],
    presetColumn: [{ type: Input }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DataTableSchema, [{
        type: Directive
    }], function () { return [{ type: ɵngcc1.AppConfigService }, { type: String }, { type: undefined }]; }, { columnList: [{
            type: ContentChild,
            args: [DataColumnListComponent]
        }], presetColumn: [{
            type: Input
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YS10YWJsZS5zY2hlbWEuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL2hvbWUvdHJhdmlzL2J1aWxkL0FsZnJlc2NvL2FsZnJlc2NvLW5nMi1jb21wb25lbnRzL2xpYi9jb3JlL2RhdGF0YWJsZS9kYXRhL2RhdGEtdGFibGUuc2NoZW1hLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFFSCxPQUFPLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDL0QsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0scUNBQXFDLENBQUM7QUFDdkUsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sOENBQThDLENBQUM7QUFFdkYsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sMkJBQTJCLENBQUM7OztBQUk3RCxNQUFNLE9BQWdCLGVBQWU7QUFDckMsSUFZSSxZQUFvQixnQkFBa0MsRUFDaEMsU0FBaUIsRUFDakIsWUFBaUI7QUFBSSxRQUZ2QixxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQWtCO0FBQUMsUUFDakMsY0FBUyxHQUFULFNBQVMsQ0FBUTtBQUFDLFFBQ2xCLGlCQUFZLEdBQVosWUFBWSxDQUFLO0FBQUMsUUFKaEMsa0JBQWEsR0FBRyxFQUFFLENBQUM7QUFDL0IsSUFHK0MsQ0FBQztBQUNoRCxJQUNXLHFCQUFxQjtBQUFLLFFBQzdCLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO0FBQ2pDLFFBQVEsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO0FBQ3hELFlBQVksSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsc0JBQXNCLEVBQUUsQ0FBQztBQUN6RCxTQUFTO0FBQ1QsSUFBSSxDQUFDO0FBQ0wsSUFDVyxpQkFBaUI7QUFBSyxRQUN6QixNQUFNLGdCQUFnQixHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsQ0FBQztBQUNqRixRQUFRLElBQUksZ0JBQWdCLEVBQUU7QUFDOUIsWUFBWSxJQUFJLENBQUMsYUFBYSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBQyxZQUFZLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQztBQUN4RixTQUFTO0FBQUMsYUFBSztBQUNmLFlBQVksSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDO0FBQ25ELFNBQVM7QUFDVCxJQUFJLENBQUM7QUFDTCxJQUNXLHNCQUFzQjtBQUFLLFFBQzlCLElBQUksbUJBQW1CLEdBQUcsSUFBSSxDQUFDLG1CQUFtQixDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDO0FBQzlILFFBQVEsSUFBSSxtQkFBbUIsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO0FBQzlDLFlBQVksbUJBQW1CLEdBQUcsSUFBSSxDQUFDLHNCQUFzQixFQUFFLENBQUM7QUFDaEUsU0FBUztBQUNULFFBQVEsT0FBTyxtQkFBbUIsQ0FBQztBQUNuQyxJQUFJLENBQUM7QUFDTCxJQUNXLGlCQUFpQixDQUFDLFVBQW1DO0FBQUksUUFDNUQsSUFBSSxNQUFNLEdBQUcsRUFBRSxDQUFDO0FBQ3hCLFFBQVEsSUFBSSxVQUFVLElBQUksVUFBVSxDQUFDLE9BQU8sSUFBSSxVQUFVLENBQUMsT0FBTyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7QUFDL0UsWUFBWSxNQUFNLEdBQUcsVUFBVSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFjLENBQUMsQ0FBQyxDQUFDO0FBQ25FLFNBQVM7QUFDVCxRQUFRLE9BQU8sTUFBTSxDQUFDO0FBQ3RCLElBQUksQ0FBQztBQUNMLElBQ1UsbUJBQW1CLENBQUMsWUFBb0I7QUFBSSxRQUM5QyxPQUFPLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxJQUFJLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztBQUM5RyxJQUFJLENBQUM7QUFDTCxJQUNZLHNCQUFzQjtBQUFLLFFBQy9CLE9BQU8sQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxJQUFJLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFDdkYsSUFBSSxDQUFDO0FBQ0wsSUFDVyxZQUFZLENBQUMsU0FBaUI7QUFDekMsUUFBUSxJQUFJLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQztBQUNuQyxJQUFJLENBQUM7QUFDTCxJQUNXLGVBQWUsQ0FBQyxZQUFpQjtBQUM1QyxRQUFRLElBQUksQ0FBQyxZQUFZLEdBQUcsWUFBWSxDQUFDO0FBQ3pDLElBQUksQ0FBQztBQUNMOzJDQWxFQyxTQUFTOzs7Ozs7cURBQ1I7QUFBQztBQUF5QyxZQU5uQyxnQkFBZ0I7QUFBSTtBQUFzQjtBQUNoRDtBQUFHO0FBQW1DLHlCQVFwQyxZQUFZLFNBQUMsdUJBQXVCO0FBQ3BDLDJCQUdBLEtBQUs7QUFDVDs7Ozs7Ozs7b0JBQUU7QUFBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IENvbnRlbnRDaGlsZCwgSW5wdXQsIERpcmVjdGl2ZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQXBwQ29uZmlnU2VydmljZSB9IGZyb20gJy4uLy4uL2FwcC1jb25maWcvYXBwLWNvbmZpZy5zZXJ2aWNlJztcbmltcG9ydCB7IERhdGFDb2x1bW5MaXN0Q29tcG9uZW50IH0gZnJvbSAnLi4vLi4vZGF0YS1jb2x1bW4vZGF0YS1jb2x1bW4tbGlzdC5jb21wb25lbnQnO1xuaW1wb3J0IHsgRGF0YUNvbHVtbiB9IGZyb20gJy4vZGF0YS1jb2x1bW4ubW9kZWwnO1xuaW1wb3J0IHsgT2JqZWN0RGF0YUNvbHVtbiB9IGZyb20gJy4vb2JqZWN0LWRhdGFjb2x1bW4ubW9kZWwnO1xuXG5ARGlyZWN0aXZlKClcbi8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTogZGlyZWN0aXZlLWNsYXNzLXN1ZmZpeFxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIERhdGFUYWJsZVNjaGVtYSB7XG5cbiAgICBAQ29udGVudENoaWxkKERhdGFDb2x1bW5MaXN0Q29tcG9uZW50KVxuICAgIGNvbHVtbkxpc3Q6IERhdGFDb2x1bW5MaXN0Q29tcG9uZW50O1xuXG4gICAgLyoqIEN1c3RvbSBwcmVzZXQgY29sdW1uIHNjaGVtYSBpbiBKU09OIGZvcm1hdC4gKi9cbiAgICBASW5wdXQoKVxuICAgIHByZXNldENvbHVtbjogc3RyaW5nO1xuXG4gICAgY29sdW1uczogYW55O1xuXG4gICAgcHJpdmF0ZSBsYXlvdXRQcmVzZXRzID0ge307XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGFwcENvbmZpZ1NlcnZpY2U6IEFwcENvbmZpZ1NlcnZpY2UsXG4gICAgICAgICAgICAgICAgcHJvdGVjdGVkIHByZXNldEtleTogc3RyaW5nLFxuICAgICAgICAgICAgICAgIHByb3RlY3RlZCBwcmVzZXRzTW9kZWw6IGFueSkgeyB9XG5cbiAgICBwdWJsaWMgY3JlYXRlRGF0YXRhYmxlU2NoZW1hKCk6IHZvaWQge1xuICAgICAgICB0aGlzLmxvYWRMYXlvdXRQcmVzZXRzKCk7XG4gICAgICAgIGlmICghdGhpcy5jb2x1bW5zIHx8IHRoaXMuY29sdW1ucy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHRoaXMuY29sdW1ucyA9IHRoaXMubWVyZ2VKc29uQW5kSHRtbFNjaGVtYSgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIGxvYWRMYXlvdXRQcmVzZXRzKCk6IHZvaWQge1xuICAgICAgICBjb25zdCBleHRlcm5hbFNldHRpbmdzID0gdGhpcy5hcHBDb25maWdTZXJ2aWNlLmdldCh0aGlzLnByZXNldEtleSwgbnVsbCk7XG4gICAgICAgIGlmIChleHRlcm5hbFNldHRpbmdzKSB7XG4gICAgICAgICAgICB0aGlzLmxheW91dFByZXNldHMgPSBPYmplY3QuYXNzaWduKHt9LCB0aGlzLnByZXNldHNNb2RlbCwgZXh0ZXJuYWxTZXR0aW5ncyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmxheW91dFByZXNldHMgPSB0aGlzLnByZXNldHNNb2RlbDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyBtZXJnZUpzb25BbmRIdG1sU2NoZW1hKCk6IGFueSB7XG4gICAgICAgIGxldCBjdXN0b21TY2hlbWFDb2x1bW5zID0gdGhpcy5nZXRTY2hlbWFGcm9tQ29uZmlnKHRoaXMucHJlc2V0Q29sdW1uKS5jb25jYXQodGhpcy5nZXRTY2hlbWFGcm9tSHRtbCh0aGlzLmNvbHVtbkxpc3QpKTtcbiAgICAgICAgaWYgKGN1c3RvbVNjaGVtYUNvbHVtbnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBjdXN0b21TY2hlbWFDb2x1bW5zID0gdGhpcy5nZXREZWZhdWx0TGF5b3V0UHJlc2V0KCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGN1c3RvbVNjaGVtYUNvbHVtbnM7XG4gICAgfVxuXG4gICAgcHVibGljIGdldFNjaGVtYUZyb21IdG1sKGNvbHVtbkxpc3Q6IERhdGFDb2x1bW5MaXN0Q29tcG9uZW50KTogYW55IHtcbiAgICAgICAgbGV0IHNjaGVtYSA9IFtdO1xuICAgICAgICBpZiAoY29sdW1uTGlzdCAmJiBjb2x1bW5MaXN0LmNvbHVtbnMgJiYgY29sdW1uTGlzdC5jb2x1bW5zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHNjaGVtYSA9IGNvbHVtbkxpc3QuY29sdW1ucy5tYXAoKGMpID0+IDxEYXRhQ29sdW1uPiBjKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc2NoZW1hO1xuICAgIH1cblxuICAgcHVibGljIGdldFNjaGVtYUZyb21Db25maWcocHJlc2V0Q29sdW1uOiBzdHJpbmcpOiBEYXRhQ29sdW1uW10ge1xuICAgICAgICByZXR1cm4gcHJlc2V0Q29sdW1uID8gKHRoaXMubGF5b3V0UHJlc2V0c1twcmVzZXRDb2x1bW5dKS5tYXAoKGNvbCkgPT4gbmV3IE9iamVjdERhdGFDb2x1bW4oY29sKSkgOiBbXTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGdldERlZmF1bHRMYXlvdXRQcmVzZXQoKTogRGF0YUNvbHVtbltdIHtcbiAgICAgICAgcmV0dXJuICh0aGlzLmxheW91dFByZXNldHNbJ2RlZmF1bHQnXSkubWFwKChjb2wpID0+IG5ldyBPYmplY3REYXRhQ29sdW1uKGNvbCkpO1xuICAgIH1cblxuICAgIHB1YmxpYyBzZXRQcmVzZXRLZXkocHJlc2V0S2V5OiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy5wcmVzZXRLZXkgPSBwcmVzZXRLZXk7XG4gICAgfVxuXG4gICAgcHVibGljIHNldFByZXNldHNNb2RlbChwcmVzZXRzTW9kZWw6IGFueSkge1xuICAgICAgICB0aGlzLnByZXNldHNNb2RlbCA9IHByZXNldHNNb2RlbDtcbiAgICB9XG59XG4iXX0=