import { Injectable } from '@angular/core';
import { MatSnackBar } from '@angular/material/snack-bar';
import { TranslationService } from '../../services/translation.service';
import { AppConfigService, AppConfigValues } from '../../app-config/app-config.service';
import { Subject } from 'rxjs';
import { info, warning, error } from '../helpers/notification.factory';
import * as i0 from "@angular/core";
import * as i1 from "@angular/material/snack-bar";
import * as i2 from "../../services/translation.service";
import * as i3 from "../../app-config/app-config.service";
const INFO_SNACK_CLASS = 'adf-info-snackbar';
const WARN_SNACK_CLASS = 'adf-warning-snackbar';
const ERROR_SNACK_CLASS = 'adf-error-snackbar';
export class NotificationService {
    constructor(snackBar, translationService, appConfigService) {
        this.snackBar = snackBar;
        this.translationService = translationService;
        this.appConfigService = appConfigService;
        this.DEFAULT_DURATION_MESSAGE = 5000;
        this.notifications$ = new Subject();
        this.DEFAULT_DURATION_MESSAGE = this.appConfigService.get(AppConfigValues.NOTIFY_DURATION) || this.DEFAULT_DURATION_MESSAGE;
    }
    openSnackMessage(message, config, interpolateArgs) {
        return this.dispatchNotification(message, null, config, interpolateArgs);
    }
    openSnackMessageAction(message, action, config, interpolateArgs) {
        return this.dispatchNotification(message, action, config, interpolateArgs);
    }
    showError(message, action, interpolateArgs) {
        return this.dispatchNotification(message, action, { panelClass: ERROR_SNACK_CLASS }, interpolateArgs);
    }
    showInfo(message, action, interpolateArgs) {
        return this.dispatchNotification(message, action, { panelClass: INFO_SNACK_CLASS }, interpolateArgs);
    }
    showWarning(message, action, interpolateArgs) {
        return this.dispatchNotification(message, action, { panelClass: WARN_SNACK_CLASS }, interpolateArgs);
    }
    dismissSnackMessageAction() {
        return this.snackBar.dismiss();
    }
    pushToNotificationHistory(notification) {
        this.notifications$.next(notification);
    }
    dispatchNotification(message, action, config, interpolateArgs) {
        const translatedMessage = this.translationService.instant(message, interpolateArgs);
        const translatedAction = this.translationService.instant(action, interpolateArgs);
        const createNotification = this.getNotificationCreator(config);
        this.notifications$.next(createNotification(translatedMessage));
        return this.snackBar.open(translatedMessage, translatedAction, Object.assign({ duration: (typeof config === 'number') ? config : this.DEFAULT_DURATION_MESSAGE, panelClass: INFO_SNACK_CLASS }, ((typeof config === 'object') ? config : {})));
    }
    getNotificationCreator(config) {
        let panelClass = null;
        if (typeof config === 'object') {
            panelClass = Array.isArray(config.panelClass) ? config.panelClass[0] : config.panelClass;
        }
        switch (panelClass) {
            case ERROR_SNACK_CLASS:
                return error;
            case WARN_SNACK_CLASS:
                return warning;
            default:
                return info;
        }
    }
}
NotificationService.ɵprov = i0.ɵɵdefineInjectable({ factory: function NotificationService_Factory() { return new NotificationService(i0.ɵɵinject(i1.MatSnackBar), i0.ɵɵinject(i2.TranslationService), i0.ɵɵinject(i3.AppConfigService)); }, token: NotificationService, providedIn: "root" });
NotificationService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
NotificationService.ctorParameters = () => [
    { type: MatSnackBar },
    { type: TranslationService },
    { type: AppConfigService }
];
//# sourceMappingURL=data:application/json;base64,