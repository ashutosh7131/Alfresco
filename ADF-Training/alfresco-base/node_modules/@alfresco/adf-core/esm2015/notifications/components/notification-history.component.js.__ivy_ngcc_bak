/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, Input, ViewChild, ChangeDetectorRef, ViewEncapsulation } from '@angular/core';
import { NotificationService } from '../services/notification.service';
import { NOTIFICATION_TYPE } from '../models/notification.model';
import { MatMenuTrigger } from '@angular/material/menu';
import { takeUntil } from 'rxjs/operators';
import { Subject } from 'rxjs';
import { StorageService } from '../../services/storage.service';
export class NotificationHistoryComponent {
    constructor(notificationService, storageService, cd) {
        this.notificationService = notificationService;
        this.storageService = storageService;
        this.cd = cd;
        this.menuPositionX = 'after';
        this.menuPositionY = 'below';
        this.maxNotifications = 5;
        this.onDestroy$ = new Subject();
        this.notifications = [];
        this.paginatedNotifications = [];
    }
    ngOnInit() {
        this.notifications = JSON.parse(this.storageService.getItem(NotificationHistoryComponent.NOTIFICATION_STORAGE)) || [];
    }
    ngAfterViewInit() {
        this.notificationService.notifications$
            .pipe(takeUntil(this.onDestroy$))
            .subscribe((notification) => {
            this.addNewNotification(notification);
            this.cd.detectChanges();
        });
    }
    ngOnDestroy() {
        this.onDestroy$.next(true);
        this.onDestroy$.complete();
    }
    addNewNotification(notification) {
        this.notifications.unshift(notification);
        if (this.notifications.length > NotificationHistoryComponent.MAX_NOTIFICATION_STACK_LENGTH) {
            this.notifications.shift();
        }
        this.saveNotifications();
        this.createPagination();
    }
    saveNotifications() {
        this.storageService.setItem(NotificationHistoryComponent.NOTIFICATION_STORAGE, JSON.stringify(this.notifications.filter((notification) => notification.type !== NOTIFICATION_TYPE.RECURSIVE)));
    }
    onMenuOpened() {
        this.createPagination();
    }
    onKeyPress(event) {
        this.closeUserModal(event);
    }
    closeUserModal($event) {
        if ($event.keyCode === 27) {
            this.trigger.closeMenu();
        }
    }
    markAsRead() {
        this.notifications = [];
        this.paginatedNotifications = [];
        this.storageService.removeItem(NotificationHistoryComponent.NOTIFICATION_STORAGE);
        this.createPagination();
        this.trigger.closeMenu();
    }
    createPagination() {
        this.pagination = {
            skipCount: this.maxNotifications,
            maxItems: this.maxNotifications,
            totalItems: this.notifications.length,
            hasMoreItems: this.notifications.length > this.maxNotifications
        };
        this.paginatedNotifications = this.notifications.slice(0, this.pagination.skipCount);
    }
    loadMore() {
        this.pagination.skipCount = this.pagination.maxItems + this.pagination.skipCount;
        this.pagination.hasMoreItems = this.notifications.length > this.pagination.skipCount;
        this.paginatedNotifications = this.notifications.slice(0, this.pagination.skipCount);
    }
    hasMoreNotifications() {
        var _a;
        return (_a = this.pagination) === null || _a === void 0 ? void 0 : _a.hasMoreItems;
    }
    onNotificationClick(notification) {
        if (notification.clickCallBack) {
            notification.clickCallBack(notification.args);
            this.trigger.closeMenu();
        }
    }
}
NotificationHistoryComponent.MAX_NOTIFICATION_STACK_LENGTH = 100;
NotificationHistoryComponent.NOTIFICATION_STORAGE = 'notification-history';
NotificationHistoryComponent.decorators = [
    { type: Component, args: [{
                selector: 'adf-notification-history',
                template: "<div (keyup)=\"onKeyPress($event)\">\n    <button mat-button\n            [matMenuTriggerFor]=\"menu\"\n            class=\"adf-notification-history-menu_button\"\n            id=\"adf-notification-history-open-button\"\n            (menuOpened)=\"onMenuOpened()\">\n        <mat-icon matBadge=\"&#8288;\"\n                  [matBadgeHidden]=\"!notifications.length\"\n                  matBadgeColor=\"accent\"\n                  matBadgeSize=\"small\">notifications</mat-icon>\n    </button>\n    <mat-menu #menu=\"matMenu\"\n              [xPosition]=\"menuPositionX\"\n              [yPosition]=\"menuPositionY\"\n              id=\"adf-notification-history-menu\"\n              class=\"adf-notification-history-menu\">\n\n        <div class=\"adf-notification-history-list\"\n             (click)=\"$event.stopPropagation()\">\n            <div mat-subheader>\n                <span>{{ 'NOTIFICATIONS.TITLE' | translate }}</span>\n                <button (click)=\"markAsRead()\"\n                        id=\"adf-notification-history-mark-as-read\"\n                        mat-button\n                        color=\"accent\"\n                        *ngIf=\"notifications.length\">\n                    {{ 'NOTIFICATIONS.MARK_AS_READ' | translate }}\n                </button>\n            </div>\n\n            <mat-divider></mat-divider>\n\n            <mat-list>\n                <ng-container *ngIf=\"notifications.length; else empty_list_template\">\n                    <mat-list-item *ngFor=\"let notification of paginatedNotifications\"\n                                   class=\"adf-notification-history-menu-item\"\n                                   (click)=\"onNotificationClick(notification)\">\n                        <div *ngIf=\"notification.initiator; else no_avatar\"\n                             matListAvatar\n                             [outerHTML]=\"notification.initiator | usernameInitials:'adf-notification-initiator-pic'\">\n                        </div>\n                        <ng-template #no_avatar>\n                            <mat-icon mat-list-icon\n                                      class=\"adf-notification-history-menu-initiator\">{{ notification | notificationIcon\n                                }}</mat-icon>\n                        </ng-template>\n                        <p class=\"adf-notification-history-menu-message\"\n                           *ngFor=\"let message of notification.messages\"\n                           mat-line [matTooltip]=\"message\" matTooltipShowDelay=\"1000\">{{ message }}</p>\n                        <p class=\"adf-notification-history-menu-date\"\n                           mat-line> {{notification.datetime | adfTimeAgo}} </p>\n                    </mat-list-item>\n                </ng-container>\n                <ng-template #empty_list_template>\n                    <mat-list-item id=\"adf-notification-history-component-no-message\"\n                                   class=\"adf-notification-history-menu-no-message\">\n                        <h4 mat-line>{{ 'NOTIFICATIONS.NO_MESSAGE' | translate }}</h4>\n                    </mat-list-item>\n                </ng-template>\n            </mat-list>\n\n            <mat-divider></mat-divider>\n\n            <div class=\"adf-notification-history-load-more\"\n                 *ngIf=\"hasMoreNotifications()\">\n                <button mat-button\n                        (click)=\"loadMore()\">\n                    {{ 'NOTIFICATIONS.LOAD_MORE' | translate }}\n                </button>\n            </div>\n        </div>\n    </mat-menu>\n</div>\n",
                encapsulation: ViewEncapsulation.None,
                styles: [".adf-notification-history-menu_button.mat-button{border-radius:90%;height:40px;margin-right:0;min-width:40px;padding:0}.adf-notification-history-list .mat-subheader{justify-content:space-between}.adf-notification-history-menu-item{cursor:pointer}.adf-notification-history-menu-item:focus{background:var(--theme-bg-hover-color);outline:none}.adf-notification-history-menu-item:hover{background-color:var(--theme-bg-hover-color)}.adf-notification-history-menu-message,.adf-notification-history-menu-no-message{font-size:13px!important}.adf-notification-history-menu-date{font-size:12px!important}.adf-notification-history-menu-initiator{margin:4px}.adf-notification-initiator-pic{background:var(--theme-accent-color);border-radius:100px;color:var(--theme-colors-mat-grey);display:inline-block;font-size:18px;font-weight:bolder;height:40px;line-height:40px;min-width:40px;text-align:center;text-transform:uppercase;vertical-align:middle}.adf-notification-history-load-more{display:flex;justify-content:center;padding:10px}.mat-menu-panel.adf-notification-history-menu{max-height:500px;min-width:320px}.mat-menu-panel.adf-notification-history-menu .mat-menu-content{padding:0}"]
            },] }
];
NotificationHistoryComponent.ctorParameters = () => [
    { type: NotificationService },
    { type: StorageService },
    { type: ChangeDetectorRef }
];
NotificationHistoryComponent.propDecorators = {
    trigger: [{ type: ViewChild, args: [MatMenuTrigger, { static: true },] }],
    menuPositionX: [{ type: Input }],
    menuPositionY: [{ type: Input }],
    maxNotifications: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,