/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Injectable } from '@angular/core';
import { DateAdapter } from '@angular/material/core';
import { isMoment } from 'moment';
import moment from 'moment-es6';
import * as ɵngcc0 from '@angular/core';
export class MomentDateAdapter extends DateAdapter {
    constructor() {
        super(...arguments);
        this.localeData = moment.localeData();
    }
    getYear(date) {
        return date.year();
    }
    getMonth(date) {
        return date.month();
    }
    getDate(date) {
        return date.date();
    }
    getDayOfWeek(date) {
        return date.day();
    }
    getMonthNames(style) {
        switch (style) {
            case 'long':
                return this.localeData.months();
            case 'short':
                return this.localeData.monthsShort();
            case 'narrow':
                return this.localeData.monthsShort().map((month) => month[0]);
            default:
                return [];
        }
    }
    getDateNames() {
        const dateNames = [];
        for (let date = 1; date <= 31; date++) {
            dateNames.push(String(date));
        }
        return dateNames;
    }
    getDayOfWeekNames(style) {
        switch (style) {
            case 'long':
                return this.localeData.weekdays();
            case 'short':
                return this.localeData.weekdaysShort();
            case 'narrow':
                return this.localeData.weekdaysShort();
            default:
                return [];
        }
    }
    getYearName(date) {
        return String(date.year());
    }
    getFirstDayOfWeek() {
        return this.localeData.firstDayOfWeek();
    }
    getNumDaysInMonth(date) {
        return date.daysInMonth();
    }
    clone(date) {
        const locale = this.locale || 'en';
        return date.clone().locale(locale);
    }
    createDate(year, month, date) {
        return moment([year, month, date]);
    }
    today() {
        const locale = this.locale || 'en';
        return moment().locale(locale);
    }
    parse(value, parseFormat) {
        const locale = this.locale || 'en';
        if (value && typeof value === 'string') {
            let m = moment(value, parseFormat, locale, true);
            if (!m.isValid()) {
                m = moment(value, this.overrideDisplayFormat, locale, true);
            }
            if (m.isValid()) {
                if (m.year() === 2001 && value.indexOf('2001') === -1) {
                    const currentYear = new Date().getFullYear();
                    m.set('year', currentYear);
                    if (m.isAfter(moment())) {
                        m.set('year', currentYear - 1);
                    }
                }
            }
            return m;
        }
        return value ? moment(value).locale(locale) : null;
    }
    format(date, displayFormat) {
        date = this.clone(date);
        displayFormat = this.overrideDisplayFormat ? this.overrideDisplayFormat : displayFormat;
        if (date && date.format) {
            return date.format(displayFormat);
        }
        else {
            return '';
        }
    }
    addCalendarYears(date, years) {
        return date.clone().add(years, 'y');
    }
    addCalendarMonths(date, months) {
        return date.clone().add(months, 'M');
    }
    addCalendarDays(date, days) {
        return date.clone().add(days, 'd');
    }
    getISODateString(date) {
        return date.toISOString();
    }
    setLocale(locale) {
        super.setLocale(locale);
        this.localeData = moment.localeData(locale);
    }
    compareDate(first, second) {
        return first.diff(second, 'seconds', true);
    }
    sameDate(first, second) {
        if (first == null) {
            return second == null;
        }
        else if (isMoment(first)) {
            return first.isSame(second);
        }
        else {
            const isSame = super.sameDate(first, second);
            return isSame;
        }
    }
    clampDate(date, min, max) {
        if (min && date.isBefore(min)) {
            return min;
        }
        else if (max && date.isAfter(max)) {
            return max;
        }
        else {
            return date;
        }
    }
    isDateInstance(date) {
        let isValidDateInstance = false;
        if (date) {
            isValidDateInstance = date._isAMomentObject;
        }
        return isValidDateInstance;
    }
    isValid(date) {
        return date.isValid();
    }
    toIso8601(date) {
        return this.clone(date).format();
    }
    fromIso8601(iso8601String) {
        const locale = this.locale || 'en';
        const d = moment(iso8601String, moment.ISO_8601).locale(locale);
        return this.isValid(d) ? d : null;
    }
    invalid() {
        return moment.invalid();
    }
}
MomentDateAdapter.ɵfac = function MomentDateAdapter_Factory(t) { return ɵMomentDateAdapter_BaseFactory(t || MomentDateAdapter); };
MomentDateAdapter.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: MomentDateAdapter, factory: MomentDateAdapter.ɵfac });
const ɵMomentDateAdapter_BaseFactory = /*@__PURE__*/ ɵngcc0.ɵɵgetInheritedFactory(MomentDateAdapter);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MomentDateAdapter, [{
        type: Injectable
    }], null, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,