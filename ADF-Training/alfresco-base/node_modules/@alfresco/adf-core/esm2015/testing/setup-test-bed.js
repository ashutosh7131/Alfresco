/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { TestBed } from '@angular/core/testing';
const resetTestingModule = TestBed.resetTestingModule;
const preventAngularFromResetting = () => (TestBed.resetTestingModule = () => TestBed);
const ɵ0 = preventAngularFromResetting;
const allowAngularToReset = () => (TestBed.resetTestingModule = resetTestingModule);
const ɵ1 = allowAngularToReset;
export const setupTestBed = (moduleDef) => {
    beforeAll((done) => {
        localStorage.clear();
        sessionStorage.clear();
        resetTestingModule();
        preventAngularFromResetting();
        TestBed.configureTestingModule(moduleDef);
        TestBed.compileComponents()
            .then(() => {
            TestBed.resetTestingModule = () => TestBed;
            done();
        })
            .catch(done.fail);
    });
    afterAll(() => allowAngularToReset());
};
export { ɵ0, ɵ1 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2V0dXAtdGVzdC1iZWQuanMiLCJzb3VyY2VSb290IjoiL2hvbWUvdHJhdmlzL2J1aWxkL0FsZnJlc2NvL2FsZnJlc2NvLW5nMi1jb21wb25lbnRzL2xpYi9jb3JlLyIsInNvdXJjZXMiOlsidGVzdGluZy9zZXR1cC10ZXN0LWJlZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7O0dBZUc7QUFFSCxPQUFPLEVBQUUsT0FBTyxFQUFzQixNQUFNLHVCQUF1QixDQUFDO0FBVXBFLE1BQU0sa0JBQWtCLEdBQUcsT0FBTyxDQUFDLGtCQUFrQixDQUFDO0FBQ3RELE1BQU0sMkJBQTJCLEdBQUcsR0FBRyxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsa0JBQWtCLEdBQUcsR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFDLENBQUM7O0FBQ3ZGLE1BQU0sbUJBQW1CLEdBQUcsR0FBRyxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsa0JBQWtCLEdBQUcsa0JBQWtCLENBQUMsQ0FBQzs7QUFFcEYsTUFBTSxDQUFDLE1BQU0sWUFBWSxHQUFHLENBQUMsU0FBNkIsRUFBRSxFQUFFO0lBQzFELFNBQVMsQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFO1FBQ1gsWUFBWSxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQ3JCLGNBQWMsQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUN2QixrQkFBa0IsRUFBRSxDQUFDO1FBQ3JCLDJCQUEyQixFQUFFLENBQUM7UUFDOUIsT0FBTyxDQUFDLHNCQUFzQixDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQzFDLE9BQU8sQ0FBQyxpQkFBaUIsRUFBRTthQUN0QixJQUFJLENBQUMsR0FBRyxFQUFFO1lBQ1AsT0FBTyxDQUFDLGtCQUFrQixHQUFHLEdBQUcsRUFBRSxDQUFDLE9BQU8sQ0FBQztZQUMzQyxJQUFJLEVBQUUsQ0FBQztRQUNYLENBQUMsQ0FBQzthQUNELEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDNUIsQ0FBQyxDQUNGLENBQUM7SUFDRixRQUFRLENBQUMsR0FBRyxFQUFFLENBQUMsbUJBQW1CLEVBQUUsQ0FBQyxDQUFDO0FBQzFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IFRlc3RCZWQsIFRlc3RNb2R1bGVNZXRhZGF0YSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUvdGVzdGluZyc7XG5cbmludGVyZmFjZSBEb25lRm4gZXh0ZW5kcyBGdW5jdGlvbiB7XG4gICAgKCk6IHZvaWQ7XG4gICAgZmFpbDogKG1lc3NhZ2U/OiBFcnJvciB8IHN0cmluZykgPT4gdm9pZDtcbn1cblxuZGVjbGFyZSBmdW5jdGlvbiBiZWZvcmVBbGwoYWN0aW9uOiAoZG9uZTogRG9uZUZuKSA9PiB2b2lkLCB0aW1lb3V0PzogbnVtYmVyKTogdm9pZDtcbmRlY2xhcmUgZnVuY3Rpb24gYWZ0ZXJBbGwoYWN0aW9uOiAoZG9uZTogRG9uZUZuKSA9PiB2b2lkLCB0aW1lb3V0PzogbnVtYmVyKTogdm9pZDtcblxuY29uc3QgcmVzZXRUZXN0aW5nTW9kdWxlID0gVGVzdEJlZC5yZXNldFRlc3RpbmdNb2R1bGU7XG5jb25zdCBwcmV2ZW50QW5ndWxhckZyb21SZXNldHRpbmcgPSAoKSA9PiAoVGVzdEJlZC5yZXNldFRlc3RpbmdNb2R1bGUgPSAoKSA9PiBUZXN0QmVkKTtcbmNvbnN0IGFsbG93QW5ndWxhclRvUmVzZXQgPSAoKSA9PiAoVGVzdEJlZC5yZXNldFRlc3RpbmdNb2R1bGUgPSByZXNldFRlc3RpbmdNb2R1bGUpO1xuXG5leHBvcnQgY29uc3Qgc2V0dXBUZXN0QmVkID0gKG1vZHVsZURlZjogVGVzdE1vZHVsZU1ldGFkYXRhKSA9PiB7XG4gICAgYmVmb3JlQWxsKChkb25lKSA9PiB7XG4gICAgICAgICAgICBsb2NhbFN0b3JhZ2UuY2xlYXIoKTtcbiAgICAgICAgICAgIHNlc3Npb25TdG9yYWdlLmNsZWFyKCk7XG4gICAgICAgICAgICByZXNldFRlc3RpbmdNb2R1bGUoKTtcbiAgICAgICAgICAgIHByZXZlbnRBbmd1bGFyRnJvbVJlc2V0dGluZygpO1xuICAgICAgICAgICAgVGVzdEJlZC5jb25maWd1cmVUZXN0aW5nTW9kdWxlKG1vZHVsZURlZik7XG4gICAgICAgICAgICBUZXN0QmVkLmNvbXBpbGVDb21wb25lbnRzKClcbiAgICAgICAgICAgICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIFRlc3RCZWQucmVzZXRUZXN0aW5nTW9kdWxlID0gKCkgPT4gVGVzdEJlZDtcbiAgICAgICAgICAgICAgICAgICAgZG9uZSgpO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLmNhdGNoKGRvbmUuZmFpbCk7XG4gICAgICB9XG4gICAgKTtcbiAgICBhZnRlckFsbCgoKSA9PiBhbGxvd0FuZ3VsYXJUb1Jlc2V0KCkpO1xufTtcbiJdfQ==