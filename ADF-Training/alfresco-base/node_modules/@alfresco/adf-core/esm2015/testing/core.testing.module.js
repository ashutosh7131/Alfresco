/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { NgModule, APP_INITIALIZER } from '@angular/core';
import { NoopAnimationsModule } from '@angular/platform-browser/animations';
import { RouterTestingModule } from '@angular/router/testing';
import { TranslateModule } from '@ngx-translate/core';
import { CoreModule } from '../core.module';
import { AlfrescoApiService } from '../services/alfresco-api.service';
import { AlfrescoApiServiceMock } from '../mock/alfresco-api.service.mock';
import { AppConfigService } from '../app-config/app-config.service';
import { AppConfigServiceMock } from '../mock/app-config.service.mock';
import { TranslationService } from '../services/translation.service';
import { TranslationMock } from '../mock/translation.service.mock';
import { DatePipe } from '@angular/common';
import { CookieService } from '../services/cookie.service';
import { CookieServiceMock } from '../mock/cookie.service.mock';
import { HttpClientModule } from '@angular/common/http';
import { directionalityConfigFactory } from '../services/directionality-config-factory';
import { DirectionalityConfigService } from '../services/directionality-config.service';
import { versionCompatibilityFactory } from '../services/version-compatibility-factory';
import { VersionCompatibilityService } from '../services/version-compatibility.service';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@ngx-translate/core';
import * as ɵngcc2 from '../core.module';
const ɵ0 = directionalityConfigFactory, ɵ1 = versionCompatibilityFactory;
export class CoreTestingModule {
}
CoreTestingModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: CoreTestingModule });
CoreTestingModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function CoreTestingModule_Factory(t) { return new (t || CoreTestingModule)(); }, providers: [
        DatePipe,
        { provide: AlfrescoApiService, useClass: AlfrescoApiServiceMock },
        { provide: AppConfigService, useClass: AppConfigServiceMock },
        { provide: TranslationService, useClass: TranslationMock },
        { provide: CookieService, useClass: CookieServiceMock },
        {
            provide: APP_INITIALIZER,
            useFactory: ɵ0,
            deps: [DirectionalityConfigService],
            multi: true
        },
        {
            provide: APP_INITIALIZER,
            useFactory: ɵ1,
            deps: [VersionCompatibilityService],
            multi: true
        }
    ], imports: [[
            NoopAnimationsModule,
            RouterTestingModule,
            HttpClientModule,
            TranslateModule.forRoot(),
            CoreModule.forRoot()
        ], NoopAnimationsModule,
        CoreModule,
        TranslateModule] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(CoreTestingModule, { imports: function () { return [NoopAnimationsModule,
        RouterTestingModule,
        HttpClientModule, ɵngcc1.TranslateModule, ɵngcc2.CoreModule]; }, exports: function () { return [NoopAnimationsModule,
        CoreModule,
        TranslateModule]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CoreTestingModule, [{
        type: NgModule,
        args: [{
                imports: [
                    NoopAnimationsModule,
                    RouterTestingModule,
                    HttpClientModule,
                    TranslateModule.forRoot(),
                    CoreModule.forRoot()
                ],
                providers: [
                    DatePipe,
                    { provide: AlfrescoApiService, useClass: AlfrescoApiServiceMock },
                    { provide: AppConfigService, useClass: AppConfigServiceMock },
                    { provide: TranslationService, useClass: TranslationMock },
                    { provide: CookieService, useClass: CookieServiceMock },
                    {
                        provide: APP_INITIALIZER,
                        useFactory: ɵ0,
                        deps: [DirectionalityConfigService],
                        multi: true
                    },
                    {
                        provide: APP_INITIALIZER,
                        useFactory: ɵ1,
                        deps: [VersionCompatibilityService],
                        multi: true
                    }
                ],
                exports: [
                    NoopAnimationsModule,
                    CoreModule,
                    TranslateModule
                ]
            }]
    }], null, null); })();
export { ɵ0, ɵ1 };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29yZS50ZXN0aW5nLm1vZHVsZS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vaG9tZS90cmF2aXMvYnVpbGQvQWxmcmVzY28vYWxmcmVzY28tbmcyLWNvbXBvbmVudHMvbGliL2NvcmUvdGVzdGluZy9jb3JlLnRlc3RpbmcubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFFSCxPQUFPLEVBQUUsUUFBUSxFQUFFLGVBQWUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMxRCxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxzQ0FBc0MsQ0FBQztBQUM1RSxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUM5RCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDdEQsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzVDLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLGtDQUFrQyxDQUFDO0FBQ3RFLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLG1DQUFtQyxDQUFDO0FBQzNFLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGtDQUFrQyxDQUFDO0FBQ3BFLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLGlDQUFpQyxDQUFDO0FBQ3ZFLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLGlDQUFpQyxDQUFDO0FBQ3JFLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQztBQUNuRSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDM0MsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBQzNELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBQ2hFLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ3hELE9BQU8sRUFBRSwyQkFBMkIsRUFBRSxNQUFNLDJDQUEyQyxDQUFDO0FBQ3hGLE9BQU8sRUFBRSwyQkFBMkIsRUFBRSxNQUFNLDJDQUEyQyxDQUFDO0FBQ3hGLE9BQU8sRUFBRSwyQkFBMkIsRUFBRSxNQUFNLDJDQUEyQyxDQUFDO0FBQ3hGLE9BQU8sRUFBRSwyQkFBMkIsRUFBRSxNQUFNLDJDQUEyQyxDQUFDOzs7O0FBQ3hGLFdBaUJ3QiwyQkFBMkIsT0FNM0IsMkJBQTJCO0FBV25ELE1BQU0sT0FBTyxpQkFBaUI7QUFBRzs2Q0FqQ2hDLFFBQVEsU0FBQztDQUNOLE9BQU8sRUFBRSxzQkFDTCxvQkFBb0Isc0JBQ3BCLG1CQUFtQixzQkFDbkIsZ0JBQWdCLHNCQUNoQjthQUFlLENBQUM7R0FBTyxFQUFFLHNCQUN6QixVQUFVLENBQUMsT0FBTyxFQUFFLGtCQUN2QjtRQUNELFNBQVMsRUFBRSxzQkFDUCxRQUFRO0FBQ1IsRUFBRSxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsUUFBUSxFQUFFLHNCQUFzQixFQUFFO21CQUNqRSxFQUFFLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxRQUFRLEVBQUU7O0dBQW9CLEVBQUUsc0JBQzdELEVBQUUsT0FBTztBQUFFLGtCQUFrQixFQUFFO0FBQVEsRUFBRSxlQUFlLEVBQUUsc0JBQzFELEVBQUU7Q0FBTyxFQUFFLGFBQWEsRUFBRTtFQUFRLEVBQUU7O0FBQWlCLEVBQUUsc0JBQ3ZEO1lBQ0ksT0FBTyxFQUFFO1FBQWUsMEJBQ3hCLFVBQVUsSUFBNkI7O0NBQ3ZDLElBQUksRUFBRSxDQUFFOztNQUEyQixDQUFFLDBCQUNyQztJQUFLLEVBQUUsSUFBSSxzQkFDZDtxQkFDRDtpQkFDSSxPQUFPLEVBQUU7RUFBZSwwQkFDeEI7S0FBVSxJQUE2QjtFQUN2QyxJQUFJLEVBQUUsQ0FBRTtnQkFBMkIsQ0FBRTtjQUNyQyxLQUFLLEVBQUUsSUFBSSxzQkFDZCxrQkFDSixrQkFDRCxPQUFPLEVBQUUsc0JBQ0wsb0JBQW9CLHNCQUNwQjtBQUFVLHNCQUNWO1FBQWUsa0JBQ2xCLGNBQ0o7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzBCQUNJO0FBQUM7QUFBbUIiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBOZ01vZHVsZSwgQVBQX0lOSVRJQUxJWkVSIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBOb29wQW5pbWF0aW9uc01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL3BsYXRmb3JtLWJyb3dzZXIvYW5pbWF0aW9ucyc7XG5pbXBvcnQgeyBSb3V0ZXJUZXN0aW5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyL3Rlc3RpbmcnO1xuaW1wb3J0IHsgVHJhbnNsYXRlTW9kdWxlIH0gZnJvbSAnQG5neC10cmFuc2xhdGUvY29yZSc7XG5pbXBvcnQgeyBDb3JlTW9kdWxlIH0gZnJvbSAnLi4vY29yZS5tb2R1bGUnO1xuaW1wb3J0IHsgQWxmcmVzY29BcGlTZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZXMvYWxmcmVzY28tYXBpLnNlcnZpY2UnO1xuaW1wb3J0IHsgQWxmcmVzY29BcGlTZXJ2aWNlTW9jayB9IGZyb20gJy4uL21vY2svYWxmcmVzY28tYXBpLnNlcnZpY2UubW9jayc7XG5pbXBvcnQgeyBBcHBDb25maWdTZXJ2aWNlIH0gZnJvbSAnLi4vYXBwLWNvbmZpZy9hcHAtY29uZmlnLnNlcnZpY2UnO1xuaW1wb3J0IHsgQXBwQ29uZmlnU2VydmljZU1vY2sgfSBmcm9tICcuLi9tb2NrL2FwcC1jb25maWcuc2VydmljZS5tb2NrJztcbmltcG9ydCB7IFRyYW5zbGF0aW9uU2VydmljZSB9IGZyb20gJy4uL3NlcnZpY2VzL3RyYW5zbGF0aW9uLnNlcnZpY2UnO1xuaW1wb3J0IHsgVHJhbnNsYXRpb25Nb2NrIH0gZnJvbSAnLi4vbW9jay90cmFuc2xhdGlvbi5zZXJ2aWNlLm1vY2snO1xuaW1wb3J0IHsgRGF0ZVBpcGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHsgQ29va2llU2VydmljZSB9IGZyb20gJy4uL3NlcnZpY2VzL2Nvb2tpZS5zZXJ2aWNlJztcbmltcG9ydCB7IENvb2tpZVNlcnZpY2VNb2NrIH0gZnJvbSAnLi4vbW9jay9jb29raWUuc2VydmljZS5tb2NrJztcbmltcG9ydCB7IEh0dHBDbGllbnRNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQgeyBkaXJlY3Rpb25hbGl0eUNvbmZpZ0ZhY3RvcnkgfSBmcm9tICcuLi9zZXJ2aWNlcy9kaXJlY3Rpb25hbGl0eS1jb25maWctZmFjdG9yeSc7XG5pbXBvcnQgeyBEaXJlY3Rpb25hbGl0eUNvbmZpZ1NlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlcy9kaXJlY3Rpb25hbGl0eS1jb25maWcuc2VydmljZSc7XG5pbXBvcnQgeyB2ZXJzaW9uQ29tcGF0aWJpbGl0eUZhY3RvcnkgfSBmcm9tICcuLi9zZXJ2aWNlcy92ZXJzaW9uLWNvbXBhdGliaWxpdHktZmFjdG9yeSc7XG5pbXBvcnQgeyBWZXJzaW9uQ29tcGF0aWJpbGl0eVNlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlcy92ZXJzaW9uLWNvbXBhdGliaWxpdHkuc2VydmljZSc7XG5cbkBOZ01vZHVsZSh7XG4gICAgaW1wb3J0czogW1xuICAgICAgICBOb29wQW5pbWF0aW9uc01vZHVsZSxcbiAgICAgICAgUm91dGVyVGVzdGluZ01vZHVsZSxcbiAgICAgICAgSHR0cENsaWVudE1vZHVsZSxcbiAgICAgICAgVHJhbnNsYXRlTW9kdWxlLmZvclJvb3QoKSxcbiAgICAgICAgQ29yZU1vZHVsZS5mb3JSb290KClcbiAgICBdLFxuICAgIHByb3ZpZGVyczogW1xuICAgICAgICBEYXRlUGlwZSxcbiAgICAgICAgeyBwcm92aWRlOiBBbGZyZXNjb0FwaVNlcnZpY2UsIHVzZUNsYXNzOiBBbGZyZXNjb0FwaVNlcnZpY2VNb2NrIH0sXG4gICAgICAgIHsgcHJvdmlkZTogQXBwQ29uZmlnU2VydmljZSwgdXNlQ2xhc3M6IEFwcENvbmZpZ1NlcnZpY2VNb2NrIH0sXG4gICAgICAgIHsgcHJvdmlkZTogVHJhbnNsYXRpb25TZXJ2aWNlLCB1c2VDbGFzczogVHJhbnNsYXRpb25Nb2NrIH0sXG4gICAgICAgIHsgcHJvdmlkZTogQ29va2llU2VydmljZSwgdXNlQ2xhc3M6IENvb2tpZVNlcnZpY2VNb2NrIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIHByb3ZpZGU6IEFQUF9JTklUSUFMSVpFUixcbiAgICAgICAgICAgIHVzZUZhY3Rvcnk6IGRpcmVjdGlvbmFsaXR5Q29uZmlnRmFjdG9yeSxcbiAgICAgICAgICAgIGRlcHM6IFsgRGlyZWN0aW9uYWxpdHlDb25maWdTZXJ2aWNlIF0sXG4gICAgICAgICAgICBtdWx0aTogdHJ1ZVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBwcm92aWRlOiBBUFBfSU5JVElBTElaRVIsXG4gICAgICAgICAgICB1c2VGYWN0b3J5OiB2ZXJzaW9uQ29tcGF0aWJpbGl0eUZhY3RvcnksXG4gICAgICAgICAgICBkZXBzOiBbIFZlcnNpb25Db21wYXRpYmlsaXR5U2VydmljZSBdLFxuICAgICAgICAgICAgbXVsdGk6IHRydWVcbiAgICAgICAgfVxuICAgIF0sXG4gICAgZXhwb3J0czogW1xuICAgICAgICBOb29wQW5pbWF0aW9uc01vZHVsZSxcbiAgICAgICAgQ29yZU1vZHVsZSxcbiAgICAgICAgVHJhbnNsYXRlTW9kdWxlXG4gICAgXVxufSlcbmV4cG9ydCBjbGFzcyBDb3JlVGVzdGluZ01vZHVsZSB7fVxuIl19