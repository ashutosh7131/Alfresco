/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { ViewEncapsulation, Component, Input, ViewChild, ElementRef, Output, EventEmitter } from '@angular/core';
import { Subject, Observable } from 'rxjs';
import { debounceTime, takeUntil, filter } from 'rxjs/operators';
import { searchAnimation } from './animations';
import { UserPreferencesService } from '../services/user-preferences.service';
import { SearchTextStateEnum } from '../models/search-text-input.model';
export class SearchTextInputComponent {
    constructor(userPreferencesService) {
        this.userPreferencesService = userPreferencesService;
        this.autocomplete = false;
        this.expandable = true;
        this.inputType = 'text';
        this.liveSearchEnabled = true;
        this.searchAutocomplete = false;
        this.searchTerm = '';
        this.debounceTime = 0;
        this.collapseOnSubmit = true;
        this.defaultState = SearchTextStateEnum.collapsed;
        this.collapseOnBlur = true;
        this.showClearButton = false;
        this.placeholder = '';
        this.searchChange = new EventEmitter();
        this.submit = new EventEmitter();
        this.selectResult = new EventEmitter();
        this.reset = new EventEmitter();
        this.searchVisibility = new EventEmitter();
        this.animationStates = {
            ltr: {
                active: { value: 'active', params: { 'margin-left': 13 } },
                inactive: { value: 'inactive', params: { 'transform': 'translateX(82%)' } }
            },
            rtl: {
                active: { value: 'active', params: { 'margin-right': 13 } },
                inactive: { value: 'inactive', params: { 'transform': 'translateX(-82%)' } }
            }
        };
        this.dir = 'ltr';
        this.onDestroy$ = new Subject();
        this.toggleSearch = new Subject();
        this.valueChange = new Subject();
        this.toggleSearch
            .pipe(debounceTime(200), takeUntil(this.onDestroy$))
            .subscribe(() => {
            if (this.expandable) {
                this.subscriptAnimationState = this.toggleAnimation();
                if (this.subscriptAnimationState.value === 'inactive') {
                    this.searchTerm = '';
                    this.reset.emit(true);
                    if (document.activeElement.id === this.searchInput.nativeElement.id) {
                        this.searchInput.nativeElement.blur();
                    }
                }
                this.emitVisibilitySearch();
            }
        });
    }
    ngOnInit() {
        this.userPreferencesService
            .select('textOrientation')
            .pipe(takeUntil(this.onDestroy$))
            .subscribe((direction) => {
            this.dir = direction;
            this.subscriptAnimationState = this.getDefaultState(this.dir);
        });
        this.subscriptAnimationState = this.getDefaultState(this.dir);
        this.setValueChangeHandler();
        this.setupFocusEventHandlers();
    }
    applySearchFocus(animationDoneEvent) {
        if (animationDoneEvent.toState === 'active' && this.isDefaultStateCollapsed()) {
            this.searchInput.nativeElement.focus();
        }
    }
    getAutoComplete() {
        return this.autocomplete ? 'on' : 'off';
    }
    toggleAnimation() {
        if (this.dir === 'ltr') {
            return this.subscriptAnimationState.value === 'inactive' ?
                { value: 'active', params: { 'margin-left': 13 } } :
                { value: 'inactive', params: { 'transform': 'translateX(82%)' } };
        }
        else {
            return this.subscriptAnimationState.value === 'inactive' ?
                { value: 'active', params: { 'margin-right': 13 } } :
                { value: 'inactive', params: { 'transform': 'translateX(-82%)' } };
        }
    }
    getDefaultState(dir) {
        if (this.dir) {
            return this.getAnimationState(dir);
        }
        return this.animationStates.ltr.inactive;
    }
    getAnimationState(dir) {
        if (this.expandable && this.isDefaultStateExpanded()) {
            return this.animationStates[dir].active;
        }
        else if (this.expandable) {
            return this.animationStates[dir].inactive;
        }
        else {
            return { value: 'no-animation' };
        }
    }
    setupFocusEventHandlers() {
        if (this.focusListener) {
            const focusEvents = this.focusListener
                .pipe(debounceTime(50), filter(($event) => {
                return this.isSearchBarActive() && ($event.type === 'blur' || $event.type === 'focusout' || $event.type === 'focus');
            }), takeUntil(this.onDestroy$));
            this.focusSubscription = focusEvents.subscribe((event) => {
                if (event.type === 'focus') {
                    this.searchInput.nativeElement.focus();
                }
                else {
                    this.toggleSearchBar();
                }
            });
        }
    }
    setValueChangeHandler() {
        this.valueChange.pipe(debounceTime(this.debounceTime), takeUntil(this.onDestroy$)).subscribe((value) => {
            this.searchChange.emit(value);
        });
    }
    selectFirstResult($event) {
        this.selectResult.emit($event);
    }
    onBlur($event) {
        if (this.collapseOnBlur && !$event.relatedTarget) {
            this.resetSearch();
        }
    }
    inputChange($event) {
        this.valueChange.next($event);
    }
    toggleSearchBar() {
        if (this.toggleSearch) {
            this.toggleSearch.next();
        }
    }
    searchSubmit(event) {
        this.submit.emit(event);
        if (this.collapseOnSubmit) {
            this.toggleSearchBar();
        }
    }
    activateToolbar() {
        if (!this.isSearchBarActive()) {
            this.toggleSearchBar();
        }
        return false;
    }
    isSearchBarActive() {
        return this.subscriptAnimationState.value === 'active';
    }
    ngOnDestroy() {
        if (this.toggleSearch) {
            this.toggleSearch.complete();
            this.toggleSearch = null;
        }
        if (this.focusSubscription) {
            this.focusSubscription.unsubscribe();
            this.focusSubscription = null;
            this.focusListener = null;
        }
        this.onDestroy$.next(true);
        this.onDestroy$.complete();
    }
    canShowClearSearch() {
        return this.showClearButton && this.isSearchBarActive();
    }
    resetSearch() {
        if (this.isSearchBarActive()) {
            this.toggleSearchBar();
        }
    }
    isDefaultStateCollapsed() {
        return this.defaultState === SearchTextStateEnum.collapsed;
    }
    isDefaultStateExpanded() {
        return this.defaultState === SearchTextStateEnum.expanded;
    }
    emitVisibilitySearch() {
        this.isSearchBarActive() ? this.searchVisibility.emit(true) : this.searchVisibility.emit(false);
    }
}
SearchTextInputComponent.decorators = [
    { type: Component, args: [{
                selector: 'adf-search-text-input',
                template: "<div class=\"adf-search-container\" [attr.state]=\"subscriptAnimationState.value\">\n    <div [@transitionMessages]=\"subscriptAnimationState\"\n         (@transitionMessages.done)=\"applySearchFocus($event)\">\n        <button mat-icon-button\n                *ngIf=\"expandable\"\n                id=\"adf-search-button\"\n                class=\"adf-search-button\"\n                [title]=\"'SEARCH.BUTTON.TOOLTIP' | translate\"\n                (click)=\"toggleSearchBar()\"\n                (keyup.enter)=\"toggleSearchBar()\">\n            <mat-icon [attr.aria-label]=\"'SEARCH.BUTTON.ARIA-LABEL' | translate\">search</mat-icon>\n        </button>\n        <mat-form-field class=\"adf-input-form-field-divider\">\n            <input matInput\n                   #searchInput\n                   [attr.aria-label]=\"'SEARCH.INPUT.ARIA-LABEL' | translate\"\n                   [attr.type]=\"inputType\"\n                   [autocomplete]=\"getAutoComplete()\"\n                   id=\"adf-control-input\"\n                   [(ngModel)]=\"searchTerm\"\n                   [placeholder]=\"placeholder\"\n                   (focus)=\"activateToolbar()\"\n                   (blur)=\"onBlur($event)\"\n                   (keyup.escape)=\"toggleSearchBar()\"\n                   (keyup.arrowdown)=\"selectFirstResult($event)\"\n                   (ngModelChange)=\"inputChange($event)\"\n                   [searchAutocomplete]=\"searchAutocomplete ? searchAutocomplete : null\"\n                   (keyup.enter)=\"searchSubmit($event)\">\n            <button mat-icon-button matSuffix\n                    data-automation-id=\"adf-clear-search-button\"\n                    class=\"adf-clear-search-button\"\n                    *ngIf=\"canShowClearSearch()\"\n                    (mousedown)=\"resetSearch()\">\n                <mat-icon>clear</mat-icon>\n            </button>\n        </mat-form-field>\n    </div>\n</div>\n",
                animations: [searchAnimation],
                encapsulation: ViewEncapsulation.None,
                host: {
                    'class': 'adf-search-text-input'
                },
                styles: [".adf-search-container{overflow:hidden!important}.adf-search-button{left:-13px}[dir=rtl] .adf-search-button{right:-13px}[dir=ltr] .adf-search-button{left:-13px}.adf-search-fixed-text{line-height:normal}.adf-input-form-field-divider{font-size:16px}.adf-input-form-field-divider .mat-form-field-underline,.adf-input-form-field-divider .mat-form-field-underline .mat-form-field-ripple{background-color:var(--adf-search-input-bg-color)}.adf-highlight{color:var(--adf-search-input-highlight-color)}"]
            },] }
];
SearchTextInputComponent.ctorParameters = () => [
    { type: UserPreferencesService }
];
SearchTextInputComponent.propDecorators = {
    autocomplete: [{ type: Input }],
    expandable: [{ type: Input }],
    inputType: [{ type: Input }],
    liveSearchEnabled: [{ type: Input }],
    searchAutocomplete: [{ type: Input }],
    searchTerm: [{ type: Input }],
    debounceTime: [{ type: Input }],
    focusListener: [{ type: Input }],
    collapseOnSubmit: [{ type: Input }],
    defaultState: [{ type: Input }],
    collapseOnBlur: [{ type: Input }],
    showClearButton: [{ type: Input }],
    placeholder: [{ type: Input }],
    searchChange: [{ type: Output }],
    submit: [{ type: Output }],
    selectResult: [{ type: Output }],
    reset: [{ type: Output }],
    searchVisibility: [{ type: Output }],
    searchInput: [{ type: ViewChild, args: ['searchInput', { static: true },] }]
};
//# sourceMappingURL=data:application/json;base64,