/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { ENTER, ESCAPE } from '@angular/cdk/keycodes';
import { ChangeDetectorRef, Directive, ElementRef, forwardRef, Inject, Input, NgZone, Optional } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { DOCUMENT } from '@angular/common';
import { Subject, merge, of, fromEvent } from 'rxjs';
import { filter, switchMap, takeUntil } from 'rxjs/operators';
import * as ɵngcc0 from '@angular/core';
export const SEARCH_AUTOCOMPLETE_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(() => SearchTriggerDirective),
    multi: true
};
export class SearchTriggerDirective {
    constructor(element, ngZone, changeDetectorRef, document) {
        this.element = element;
        this.ngZone = ngZone;
        this.changeDetectorRef = changeDetectorRef;
        this.document = document;
        this.onDestroy$ = new Subject();
        this.autocomplete = 'off';
        this._panelOpen = false;
        this.escapeEventStream = new Subject();
        this.onChange = () => { };
        this.onTouched = () => { };
    }
    ngOnDestroy() {
        this.onDestroy$.next(true);
        this.onDestroy$.complete();
        if (this.escapeEventStream) {
            this.escapeEventStream = null;
        }
        if (this.closingActionsSubscription) {
            this.closingActionsSubscription.unsubscribe();
        }
    }
    get panelOpen() {
        return this._panelOpen && this.searchPanel.showPanel;
    }
    openPanel() {
        this.searchPanel.isOpen = this._panelOpen = true;
        this.closingActionsSubscription = this.subscribeToClosingActions();
    }
    closePanel() {
        if (this._panelOpen) {
            this.closingActionsSubscription.unsubscribe();
            this._panelOpen = false;
            this.searchPanel.resetResults();
            this.searchPanel.hidePanel();
            this.changeDetectorRef.detectChanges();
        }
    }
    get panelClosingActions() {
        return merge(this.escapeEventStream, this.outsideClickStream);
    }
    get outsideClickStream() {
        if (!this.document) {
            return of(null);
        }
        return merge(fromEvent(this.document, 'click'), fromEvent(this.document, 'touchend')).pipe(filter((event) => {
            const clickTarget = event.target;
            return this._panelOpen && clickTarget !== this.element.nativeElement;
        }), takeUntil(this.onDestroy$));
    }
    writeValue(value) {
        Promise.resolve(null).then(() => this.setTriggerValue(value));
    }
    registerOnChange(fn) {
        this.onChange = fn;
    }
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    handleKeydown(event) {
        const keyCode = event.keyCode;
        if (keyCode === ESCAPE && this.panelOpen) {
            this.escapeEventStream.next();
            event.stopPropagation();
        }
        else if (keyCode === ENTER) {
            this.escapeEventStream.next();
            event.preventDefault();
        }
    }
    handleInput(event) {
        if (document.activeElement === event.target) {
            const inputValue = event.target.value;
            this.onChange(inputValue);
            if (inputValue && this.searchPanel) {
                this.searchPanel.keyPressedStream.next(inputValue);
                this.openPanel();
            }
            else if (this.searchPanel) {
                this.searchPanel.resetResults();
                this.closePanel();
            }
        }
    }
    isPanelOptionClicked(event) {
        let isPanelOption = false;
        if (event && this.searchPanel) {
            const clickTarget = event.target;
            isPanelOption = !this.isNoResultOption() &&
                !!this.searchPanel.panel &&
                !!this.searchPanel.panel.nativeElement.contains(clickTarget);
        }
        return isPanelOption;
    }
    isNoResultOption() {
        return this.searchPanel && this.searchPanel.results.list ? this.searchPanel.results.list.entries.length === 0 : true;
    }
    subscribeToClosingActions() {
        const firstStable = this.ngZone.onStable.asObservable();
        const optionChanges = this.searchPanel.keyPressedStream.asObservable();
        return merge(firstStable, optionChanges)
            .pipe(switchMap(() => {
            this.searchPanel.setVisibility();
            return this.panelClosingActions;
        }), takeUntil(this.onDestroy$))
            .subscribe((event) => this.setValueAndClose(event));
    }
    setTriggerValue(value) {
        const toDisplay = this.searchPanel && this.searchPanel.displayWith ?
            this.searchPanel.displayWith(value) : value;
        const inputValue = toDisplay != null ? toDisplay : '';
        this.element.nativeElement.value = inputValue;
    }
    setValueAndClose(event) {
        if (this.isPanelOptionClicked(event) && !event.defaultPrevented) {
            this.setTriggerValue(event.target.textContent.trim());
            this.onChange(event.target.textContent.trim());
            this.element.nativeElement.focus();
        }
        this.closePanel();
    }
}
SearchTriggerDirective.ɵfac = function SearchTriggerDirective_Factory(t) { return new (t || SearchTriggerDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(DOCUMENT, 8)); };
SearchTriggerDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: SearchTriggerDirective, selectors: [["input", "searchAutocomplete", ""], ["textarea", "searchAutocomplete", ""]], hostAttrs: ["role", "combobox", "aria-autocomplete", "list"], hostVars: 2, hostBindings: function SearchTriggerDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("blur", function SearchTriggerDirective_blur_HostBindingHandler() { return ctx.onTouched(); })("input", function SearchTriggerDirective_input_HostBindingHandler($event) { return ctx.handleInput($event); })("keydown", function SearchTriggerDirective_keydown_HostBindingHandler($event) { return ctx.handleKeydown($event); });
    } if (rf & 2) {
        ɵngcc0.ɵɵattribute("autocomplete", ctx.autocomplete)("aria-expanded", ctx.panelOpen.toString());
    } }, inputs: { autocomplete: "autocomplete", searchPanel: ["searchAutocomplete", "searchPanel"] }, features: [ɵngcc0.ɵɵProvidersFeature([SEARCH_AUTOCOMPLETE_VALUE_ACCESSOR])] });
SearchTriggerDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: NgZone },
    { type: ChangeDetectorRef },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] }
];
SearchTriggerDirective.propDecorators = {
    searchPanel: [{ type: Input, args: ['searchAutocomplete',] }],
    autocomplete: [{ type: Input }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SearchTriggerDirective, [{
        type: Directive,
        args: [{
                selector: `input[searchAutocomplete], textarea[searchAutocomplete]`,
                host: {
                    'role': 'combobox',
                    '[attr.autocomplete]': 'autocomplete',
                    'aria-autocomplete': 'list',
                    '[attr.aria-expanded]': 'panelOpen.toString()',
                    '(blur)': 'onTouched()',
                    '(input)': 'handleInput($event)',
                    '(keydown)': 'handleKeydown($event)'
                },
                providers: [SEARCH_AUTOCOMPLETE_VALUE_ACCESSOR]
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }, { type: ɵngcc0.ChangeDetectorRef }, { type: undefined, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [DOCUMENT]
            }] }]; }, { autocomplete: [{
            type: Input
        }], searchPanel: [{
            type: Input,
            args: ['searchAutocomplete']
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,