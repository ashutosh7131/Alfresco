/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, Input, ViewEncapsulation } from '@angular/core';
import { ObjectDataTableAdapter } from '../../datatable/data/object-datatable-adapter';
import { AppExtensionService } from '@alfresco/adf-extensions';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
export class AboutApplicationModulesComponent {
    constructor(appExtensions) {
        this.appExtensions = appExtensions;
        this.extensionColumns = ['$id', '$name', '$version', '$vendor', '$license', '$runtime', '$description'];
        this.showExtensions = true;
        this.regexp = '^(@alfresco)';
        this.onDestroy$ = new Subject();
    }
    ngOnInit() {
        const alfrescoPackages = Object.keys(this.dependencies).filter((val) => {
            return new RegExp(this.regexp).test(val);
        });
        const alfrescoPackagesTableRepresentation = [];
        alfrescoPackages.forEach((val) => {
            alfrescoPackagesTableRepresentation.push({
                name: val,
                version: (this.dependencies[val])
            });
        });
        this.dependencyEntries = new ObjectDataTableAdapter(alfrescoPackagesTableRepresentation, [
            { type: 'text', key: 'name', title: 'Name', sortable: true },
            { type: 'text', key: 'version', title: 'Version', sortable: true }
        ]);
        this.appExtensions.references$
            .pipe(takeUntil(this.onDestroy$))
            .subscribe((extensions) => this.extensions = extensions);
    }
    ngOnDestroy() {
        this.onDestroy$.next(true);
        this.onDestroy$.complete();
    }
}
AboutApplicationModulesComponent.decorators = [
    { type: Component, args: [{
                selector: 'adf-about-application-modules',
                template: "<div class=\"adf-about-modules-container\">\n    <h3 data-automation-id=\"adf-about-modules-title\">{{ 'ABOUT.PACKAGES.TITLE' | translate }}</h3>\n    <small>{{ 'ABOUT.PACKAGES.DESCRIPTION' | translate }}</small>\n    <adf-datatable [data]=\"dependencyEntries\"></adf-datatable>\n\n    <div class=\"adf-extension-details-container\" *ngIf=\"showExtensions && extensions.length\">\n        <h3>{{ 'ABOUT.EXTENSIONS.TITLE' | translate }}</h3>\n        <mat-table [dataSource]=\"extensions\">\n            <!-- $id Column -->\n            <ng-container matColumnDef=\"$id\">\n                <mat-header-cell\n                    *matHeaderCellDef>{{ 'ABOUT.EXTENSIONS.TABLE_HEADERS.ID' | translate }}</mat-header-cell>\n                <mat-cell *matCellDef=\"let element\">{{element.$id}}</mat-cell>\n            </ng-container>\n\n            <!-- $name Column -->\n            <ng-container matColumnDef=\"$name\">\n                <mat-header-cell\n                    *matHeaderCellDef>{{ 'ABOUT.EXTENSIONS.TABLE_HEADERS.NAME' | translate }}</mat-header-cell>\n                <mat-cell *matCellDef=\"let element\">{{element.$name}}</mat-cell>\n            </ng-container>\n\n            <!-- $version Column -->\n            <ng-container matColumnDef=\"$version\">\n                <mat-header-cell\n                    *matHeaderCellDef>{{ 'ABOUT.EXTENSIONS.TABLE_HEADERS.VERSION' | translate }}</mat-header-cell>\n                <mat-cell *matCellDef=\"let element\">{{element.$version}}</mat-cell>\n            </ng-container>\n\n            <!-- $vendor Column -->\n            <ng-container matColumnDef=\"$vendor\">\n                <mat-header-cell\n                    *matHeaderCellDef>{{ 'ABOUT.EXTENSIONS.TABLE_HEADERS.VENDOR' | translate }}</mat-header-cell>\n                <mat-cell *matCellDef=\"let element\">{{element.$vendor}}</mat-cell>\n            </ng-container>\n\n            <!-- $license Column -->\n            <ng-container matColumnDef=\"$license\">\n                <mat-header-cell\n                    *matHeaderCellDef>{{ 'ABOUT.EXTENSIONS.TABLE_HEADERS.LICENSE' | translate }}</mat-header-cell>\n                <mat-cell *matCellDef=\"let element\">{{element.$license}}</mat-cell>\n            </ng-container>\n\n            <!-- $runtime Column -->\n            <ng-container matColumnDef=\"$runtime\">\n                <mat-header-cell\n                    *matHeaderCellDef>{{ 'ABOUT.EXTENSIONS.TABLE_HEADERS.RUNTIME' | translate }}</mat-header-cell>\n                <mat-cell *matCellDef=\"let element\">{{element.$runtime}}</mat-cell>\n            </ng-container>\n\n            <!-- $description Column -->\n            <ng-container matColumnDef=\"$description\">\n                <mat-header-cell\n                    *matHeaderCellDef>{{ 'ABOUT.EXTENSIONS.TABLE_HEADERS.DESCRIPTION' | translate }}</mat-header-cell>\n                <mat-cell *matCellDef=\"let element\">{{element.$description}}</mat-cell>\n            </ng-container>\n\n            <mat-header-row *matHeaderRowDef=\"extensionColumns\"></mat-header-row>\n            <mat-row *matRowDef=\"let row; columns: extensionColumns;\"></mat-row>\n        </mat-table>\n    </div>\n</div>\n",
                encapsulation: ViewEncapsulation.None
            },] }
];
AboutApplicationModulesComponent.ctorParameters = () => [
    { type: AppExtensionService }
];
AboutApplicationModulesComponent.propDecorators = {
    showExtensions: [{ type: Input }],
    regexp: [{ type: Input }],
    dependencies: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWJvdXQtYXBwbGljYXRpb24tbW9kdWxlcy5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiL2hvbWUvdHJhdmlzL2J1aWxkL0FsZnJlc2NvL2FsZnJlc2NvLW5nMi1jb21wb25lbnRzL2xpYi9jb3JlLyIsInNvdXJjZXMiOlsiYWJvdXQvYWJvdXQtYXBwbGljYXRpb24tbW9kdWxlcy9hYm91dC1hcHBsaWNhdGlvbi1tb2R1bGVzLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7O0dBZUc7QUFFSCxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBcUIsaUJBQWlCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDdkYsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sK0NBQStDLENBQUM7QUFDdkYsT0FBTyxFQUFFLG1CQUFtQixFQUFnQixNQUFNLDBCQUEwQixDQUFDO0FBQzdFLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDL0IsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBTzNDLE1BQU0sT0FBTyxnQ0FBZ0M7SUFtQnpDLFlBQW9CLGFBQWtDO1FBQWxDLGtCQUFhLEdBQWIsYUFBYSxDQUFxQjtRQWpCdEQscUJBQWdCLEdBQWEsQ0FBQyxLQUFLLEVBQUUsT0FBTyxFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBRSxjQUFjLENBQUMsQ0FBQztRQU83RyxtQkFBYyxHQUFHLElBQUksQ0FBQztRQUdiLFdBQU0sR0FBRyxjQUFjLENBQUM7UUFLekIsZUFBVSxHQUFHLElBQUksT0FBTyxFQUFXLENBQUM7SUFHNUMsQ0FBQztJQUVELFFBQVE7UUFDSixNQUFNLGdCQUFnQixHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFO1lBQ25FLE9BQU8sSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUM3QyxDQUFDLENBQUMsQ0FBQztRQUVILE1BQU0sbUNBQW1DLEdBQUcsRUFBRSxDQUFDO1FBQy9DLGdCQUFnQixDQUFDLE9BQU8sQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFO1lBQzdCLG1DQUFtQyxDQUFDLElBQUksQ0FBQztnQkFDckMsSUFBSSxFQUFFLEdBQUc7Z0JBQ1QsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsQ0FBQzthQUNwQyxDQUFDLENBQUM7UUFDUCxDQUFDLENBQUMsQ0FBQztRQUVILElBQUksQ0FBQyxpQkFBaUIsR0FBRyxJQUFJLHNCQUFzQixDQUFDLG1DQUFtQyxFQUFFO1lBQ3JGLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRTtZQUM1RCxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUU7U0FDckUsQ0FBQyxDQUFDO1FBRUgsSUFBSSxDQUFDLGFBQWEsQ0FBQyxXQUFXO2FBQ3pCLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO2FBQ2hDLFNBQVMsQ0FBQyxDQUFDLFVBQVUsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLFVBQVUsR0FBRyxVQUFVLENBQUMsQ0FBQztJQUNqRSxDQUFDO0lBRUQsV0FBVztRQUNQLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzNCLElBQUksQ0FBQyxVQUFVLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDL0IsQ0FBQzs7O1lBckRKLFNBQVMsU0FBQztnQkFDUCxRQUFRLEVBQUUsK0JBQStCO2dCQUN6Qyw4b0dBQXlEO2dCQUN6RCxhQUFhLEVBQUUsaUJBQWlCLENBQUMsSUFBSTthQUN4Qzs7O1lBUlEsbUJBQW1COzs7NkJBaUJ2QixLQUFLO3FCQUlMLEtBQUs7MkJBR0wsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQsIE9uRGVzdHJveSwgT25Jbml0LCBWaWV3RW5jYXBzdWxhdGlvbiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgT2JqZWN0RGF0YVRhYmxlQWRhcHRlciB9IGZyb20gJy4uLy4uL2RhdGF0YWJsZS9kYXRhL29iamVjdC1kYXRhdGFibGUtYWRhcHRlcic7XG5pbXBvcnQgeyBBcHBFeHRlbnNpb25TZXJ2aWNlLCBFeHRlbnNpb25SZWYgfSBmcm9tICdAYWxmcmVzY28vYWRmLWV4dGVuc2lvbnMnO1xuaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgdGFrZVVudGlsIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ2FkZi1hYm91dC1hcHBsaWNhdGlvbi1tb2R1bGVzJyxcbiAgICB0ZW1wbGF0ZVVybDogJy4vYWJvdXQtYXBwbGljYXRpb24tbW9kdWxlcy5jb21wb25lbnQuaHRtbCcsXG4gICAgZW5jYXBzdWxhdGlvbjogVmlld0VuY2Fwc3VsYXRpb24uTm9uZVxufSlcbmV4cG9ydCBjbGFzcyBBYm91dEFwcGxpY2F0aW9uTW9kdWxlc0NvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95IHtcblxuICAgIGV4dGVuc2lvbkNvbHVtbnM6IHN0cmluZ1tdID0gWyckaWQnLCAnJG5hbWUnLCAnJHZlcnNpb24nLCAnJHZlbmRvcicsICckbGljZW5zZScsICckcnVudGltZScsICckZGVzY3JpcHRpb24nXTtcblxuICAgIGRlcGVuZGVuY3lFbnRyaWVzOiBPYmplY3REYXRhVGFibGVBZGFwdGVyO1xuICAgIGV4dGVuc2lvbnM6IEV4dGVuc2lvblJlZltdO1xuXG4gICAgLyoqIFRvZ2dsZXMgc2hvd2luZy9oaWRpbmcgb2YgZXh0ZW5zaW9ucyBibG9jay4gKi9cbiAgICBASW5wdXQoKVxuICAgIHNob3dFeHRlbnNpb25zID0gdHJ1ZTtcblxuICAgIC8qKiBSZWd1bGFyIGV4cHJlc3Npb24gZm9yIGZpbHRlcmluZyBkZXBlbmRlbmNpZXMgcGFja2FnZXMuICovXG4gICAgQElucHV0KCkgcmVnZXhwID0gJ14oQGFsZnJlc2NvKSc7XG5cbiAgICAvKiogQ3VycmVudCB2ZXJzaW9uIG9mIHRoZSBhcHAgcnVubmluZyAqL1xuICAgIEBJbnB1dCgpIGRlcGVuZGVuY2llczogYW55O1xuXG4gICAgcHJpdmF0ZSBvbkRlc3Ryb3kkID0gbmV3IFN1YmplY3Q8Ym9vbGVhbj4oKTtcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgYXBwRXh0ZW5zaW9uczogQXBwRXh0ZW5zaW9uU2VydmljZSkge1xuICAgIH1cblxuICAgIG5nT25Jbml0KCkge1xuICAgICAgICBjb25zdCBhbGZyZXNjb1BhY2thZ2VzID0gT2JqZWN0LmtleXModGhpcy5kZXBlbmRlbmNpZXMpLmZpbHRlcigodmFsKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFJlZ0V4cCh0aGlzLnJlZ2V4cCkudGVzdCh2YWwpO1xuICAgICAgICB9KTtcblxuICAgICAgICBjb25zdCBhbGZyZXNjb1BhY2thZ2VzVGFibGVSZXByZXNlbnRhdGlvbiA9IFtdO1xuICAgICAgICBhbGZyZXNjb1BhY2thZ2VzLmZvckVhY2goKHZhbCkgPT4ge1xuICAgICAgICAgICAgYWxmcmVzY29QYWNrYWdlc1RhYmxlUmVwcmVzZW50YXRpb24ucHVzaCh7XG4gICAgICAgICAgICAgICAgbmFtZTogdmFsLFxuICAgICAgICAgICAgICAgIHZlcnNpb246ICh0aGlzLmRlcGVuZGVuY2llc1t2YWxdKVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuZGVwZW5kZW5jeUVudHJpZXMgPSBuZXcgT2JqZWN0RGF0YVRhYmxlQWRhcHRlcihhbGZyZXNjb1BhY2thZ2VzVGFibGVSZXByZXNlbnRhdGlvbiwgW1xuICAgICAgICAgICAgeyB0eXBlOiAndGV4dCcsIGtleTogJ25hbWUnLCB0aXRsZTogJ05hbWUnLCBzb3J0YWJsZTogdHJ1ZSB9LFxuICAgICAgICAgICAgeyB0eXBlOiAndGV4dCcsIGtleTogJ3ZlcnNpb24nLCB0aXRsZTogJ1ZlcnNpb24nLCBzb3J0YWJsZTogdHJ1ZSB9XG4gICAgICAgIF0pO1xuXG4gICAgICAgIHRoaXMuYXBwRXh0ZW5zaW9ucy5yZWZlcmVuY2VzJFxuICAgICAgICAgICAgLnBpcGUodGFrZVVudGlsKHRoaXMub25EZXN0cm95JCkpXG4gICAgICAgICAgICAuc3Vic2NyaWJlKChleHRlbnNpb25zKSA9PiB0aGlzLmV4dGVuc2lvbnMgPSBleHRlbnNpb25zKTtcbiAgICB9XG5cbiAgICBuZ09uRGVzdHJveSgpIHtcbiAgICAgICAgdGhpcy5vbkRlc3Ryb3kkLm5leHQodHJ1ZSk7XG4gICAgICAgIHRoaXMub25EZXN0cm95JC5jb21wbGV0ZSgpO1xuICAgIH1cbn1cbiJdfQ==