/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { IdentityRoleModel } from '../models/identity-role.model';
export const mockIdentityGroup1 = {
    id: 'mock-group-id-1', name: 'Mock Group 1', path: '/mock', subGroups: []
};
export const mockIdentityGroup2 = {
    id: 'mock-group-id-2', name: 'Mock Group 2', path: '', subGroups: []
};
export const mockIdentityGroup3 = {
    id: 'mock-group-id-3', name: 'Mock Group 3', path: '', subGroups: []
};
export const mockIdentityGroup4 = {
    id: 'mock-group-id-4', name: 'Mock Group 4', path: '', subGroups: []
};
export const mockIdentityGroup5 = {
    id: 'mock-group-id-5', name: 'Mock Group 5', path: '', subGroups: []
};
export const mockIdentityGroupsCount = { count: 10 };
export const mockIdentityGroups = [
    mockIdentityGroup1, mockIdentityGroup2, mockIdentityGroup3, mockIdentityGroup4, mockIdentityGroup5
];
export const mockApplicationDetails = { id: 'mock-app-id', name: 'mock-app-name' };
export const roleMappingMock = [
    { id: 'role-id-1', name: 'role-name-1' }, { id: 'role-id-2', name: 'role-name-2' }
];
const ɵ0 = () => {
    return Promise.resolve(roleMappingMock);
};
export const roleMappingApi = {
    oauth2Auth: {
        callCustomApi: ɵ0
    }
};
const ɵ1 = () => {
    return Promise.resolve([]);
};
export const noRoleMappingApi = {
    oauth2Auth: {
        callCustomApi: ɵ1
    }
};
const ɵ2 = () => {
    return Promise.resolve(mockIdentityGroups);
};
export const groupsMockApi = {
    oauth2Auth: {
        callCustomApi: ɵ2
    }
};
const ɵ3 = () => {
    return Promise.resolve();
};
export const createGroupMappingApi = {
    oauth2Auth: {
        callCustomApi: ɵ3
    }
};
const ɵ4 = () => {
    return Promise.resolve();
};
export const updateGroupMappingApi = {
    oauth2Auth: {
        callCustomApi: ɵ4
    }
};
const ɵ5 = () => {
    return Promise.resolve();
};
export const deleteGroupMappingApi = {
    oauth2Auth: {
        callCustomApi: ɵ5
    }
};
const ɵ6 = () => {
    return Promise.resolve([mockApplicationDetails]);
};
export const applicationDetailsMockApi = {
    oauth2Auth: {
        callCustomApi: ɵ6
    }
};
export const mockIdentityRoles = [
    new IdentityRoleModel({ id: 'mock-role-id', name: 'MOCK-ADMIN-ROLE' }),
    new IdentityRoleModel({ id: 'mock-role-id', name: 'MOCK-USER-ROLE' }),
    new IdentityRoleModel({ id: 'mock-role-id', name: 'MOCK-ROLE-1' })
];
export const clientRoles = [
    new IdentityRoleModel({ name: 'MOCK-ADMIN-ROLE' }),
    new IdentityRoleModel({ name: 'MOCK-USER-ROLE' })
];
export { ɵ0, ɵ1, ɵ2, ɵ3, ɵ4, ɵ5, ɵ6 };
//# sourceMappingURL=data:application/json;base64,