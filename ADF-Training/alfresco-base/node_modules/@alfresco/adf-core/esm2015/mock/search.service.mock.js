/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
export let fakeSearch = {
    list: {
        pagination: {
            count: 1,
            hasMoreItems: false,
            totalItems: 1,
            skipCount: 0,
            maxItems: 100
        },
        entries: [
            {
                entry: {
                    id: '123',
                    name: 'MyDoc',
                    content: {
                        mimetype: 'text/plain'
                    },
                    createdByUser: {
                        displayName: 'John Doe'
                    },
                    modifiedByUser: {
                        displayName: 'John Doe'
                    }
                }
            }
        ]
    }
};
export let mockError = {
    error: {
        errorKey: 'Search failed',
        statusCode: 400,
        briefSummary: '08220082 search failed',
        stackTrace: 'For security reasons the stack trace is no longer displayed, but the property is kept for previous versions.',
        descriptionURL: 'https://api-explorer.alfresco.com'
    }
};
const ɵ0 = () => Promise.resolve(fakeSearch);
export let searchMockApi = {
    findNodes: ɵ0
};
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VhcmNoLnNlcnZpY2UubW9jay5qcyIsInNvdXJjZVJvb3QiOiIvaG9tZS90cmF2aXMvYnVpbGQvQWxmcmVzY28vYWxmcmVzY28tbmcyLWNvbXBvbmVudHMvbGliL2NvcmUvIiwic291cmNlcyI6WyJtb2NrL3NlYXJjaC5zZXJ2aWNlLm1vY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7OztHQWVHO0FBRUgsTUFBTSxDQUFDLElBQUksVUFBVSxHQUFHO0lBQ3BCLElBQUksRUFBRTtRQUNGLFVBQVUsRUFBRTtZQUNSLEtBQUssRUFBRSxDQUFDO1lBQ1IsWUFBWSxFQUFFLEtBQUs7WUFDbkIsVUFBVSxFQUFFLENBQUM7WUFDYixTQUFTLEVBQUUsQ0FBQztZQUNaLFFBQVEsRUFBRSxHQUFHO1NBQ2hCO1FBQ0QsT0FBTyxFQUFFO1lBQ0w7Z0JBQ0ksS0FBSyxFQUFFO29CQUNILEVBQUUsRUFBRSxLQUFLO29CQUNULElBQUksRUFBRSxPQUFPO29CQUNiLE9BQU8sRUFBRTt3QkFDTCxRQUFRLEVBQUUsWUFBWTtxQkFDekI7b0JBQ0QsYUFBYSxFQUFFO3dCQUNYLFdBQVcsRUFBRSxVQUFVO3FCQUMxQjtvQkFDRCxjQUFjLEVBQUU7d0JBQ1osV0FBVyxFQUFFLFVBQVU7cUJBQzFCO2lCQUNKO2FBQ0o7U0FDSjtLQUNKO0NBQ0osQ0FBQztBQUVGLE1BQU0sQ0FBQyxJQUFJLFNBQVMsR0FBRztJQUNuQixLQUFLLEVBQUU7UUFDSCxRQUFRLEVBQUUsZUFBZTtRQUN6QixVQUFVLEVBQUUsR0FBRztRQUNmLFlBQVksRUFBRSx3QkFBd0I7UUFDdEMsVUFBVSxFQUFFLDhHQUE4RztRQUMxSCxjQUFjLEVBQUUsbUNBQW1DO0tBQ3REO0NBQ0osQ0FBQztXQUlhLEdBQUcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDO0FBRmhELE1BQU0sQ0FBQyxJQUFJLGFBQWEsR0FBUTtJQUU1QixTQUFTLElBQW1DO0NBRS9DLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5leHBvcnQgbGV0IGZha2VTZWFyY2ggPSB7XG4gICAgbGlzdDoge1xuICAgICAgICBwYWdpbmF0aW9uOiB7XG4gICAgICAgICAgICBjb3VudDogMSxcbiAgICAgICAgICAgIGhhc01vcmVJdGVtczogZmFsc2UsXG4gICAgICAgICAgICB0b3RhbEl0ZW1zOiAxLFxuICAgICAgICAgICAgc2tpcENvdW50OiAwLFxuICAgICAgICAgICAgbWF4SXRlbXM6IDEwMFxuICAgICAgICB9LFxuICAgICAgICBlbnRyaWVzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgZW50cnk6IHtcbiAgICAgICAgICAgICAgICAgICAgaWQ6ICcxMjMnLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiAnTXlEb2MnLFxuICAgICAgICAgICAgICAgICAgICBjb250ZW50OiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtaW1ldHlwZTogJ3RleHQvcGxhaW4nXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGNyZWF0ZWRCeVVzZXI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXlOYW1lOiAnSm9obiBEb2UnXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIG1vZGlmaWVkQnlVc2VyOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5TmFtZTogJ0pvaG4gRG9lJ1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfVxufTtcblxuZXhwb3J0IGxldCBtb2NrRXJyb3IgPSB7XG4gICAgZXJyb3I6IHtcbiAgICAgICAgZXJyb3JLZXk6ICdTZWFyY2ggZmFpbGVkJyxcbiAgICAgICAgc3RhdHVzQ29kZTogNDAwLFxuICAgICAgICBicmllZlN1bW1hcnk6ICcwODIyMDA4MiBzZWFyY2ggZmFpbGVkJyxcbiAgICAgICAgc3RhY2tUcmFjZTogJ0ZvciBzZWN1cml0eSByZWFzb25zIHRoZSBzdGFjayB0cmFjZSBpcyBubyBsb25nZXIgZGlzcGxheWVkLCBidXQgdGhlIHByb3BlcnR5IGlzIGtlcHQgZm9yIHByZXZpb3VzIHZlcnNpb25zLicsXG4gICAgICAgIGRlc2NyaXB0aW9uVVJMOiAnaHR0cHM6Ly9hcGktZXhwbG9yZXIuYWxmcmVzY28uY29tJ1xuICAgIH1cbn07XG5cbmV4cG9ydCBsZXQgc2VhcmNoTW9ja0FwaTogYW55ID0ge1xuXG4gICAgZmluZE5vZGVzOiAoKSA9PiBQcm9taXNlLnJlc29sdmUoZmFrZVNlYXJjaClcblxufTtcbiJdfQ==