/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Injectable } from '@angular/core';
import { AppConfigService, Status } from '../app-config/app-config.service';
import { HttpClient } from '@angular/common/http';
import { ExtensionService } from '@alfresco/adf-extensions';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common/http';
import * as ɵngcc2 from '@alfresco/adf-extensions';
export class AppConfigServiceMock extends AppConfigService {
    constructor(http, extensionService) {
        super(http, extensionService);
        this.config = {
            application: {
                name: 'Alfresco ADF Application'
            },
            ecmHost: 'http://{hostname}{:port}/ecm',
            bpmHost: 'http://{hostname}{:port}/bpm',
            logLevel: 'silent'
        };
    }
    load() {
        return new Promise((resolve) => {
            this.status = Status.LOADED;
            this.onDataLoaded(this.config);
            resolve(this.config);
        });
    }
}
AppConfigServiceMock.ɵfac = function AppConfigServiceMock_Factory(t) { return new (t || AppConfigServiceMock)(ɵngcc0.ɵɵinject(ɵngcc1.HttpClient), ɵngcc0.ɵɵinject(ɵngcc2.ExtensionService)); };
AppConfigServiceMock.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: AppConfigServiceMock, factory: AppConfigServiceMock.ɵfac });
AppConfigServiceMock.ctorParameters = () => [
    { type: HttpClient },
    { type: ExtensionService }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AppConfigServiceMock, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc1.HttpClient }, { type: ɵngcc2.ExtensionService }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwLWNvbmZpZy5zZXJ2aWNlLm1vY2suanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL2hvbWUvdHJhdmlzL2J1aWxkL0FsZnJlc2NvL2FsZnJlc2NvLW5nMi1jb21wb25lbnRzL2xpYi9jb3JlL21vY2svYXBwLWNvbmZpZy5zZXJ2aWNlLm1vY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUVILE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sRUFBRSxNQUFNLGtDQUFrQyxDQUFDO0FBQzVFLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUNsRCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQzs7OztBQUU1RCxNQUFNLE9BQU8sb0JBQXFCLFNBQVEsZ0JBQWdCO0FBQzFELElBVUksWUFBWSxJQUFnQixFQUFFLGdCQUFrQztBQUNwRSxRQUFRLEtBQUssQ0FBQyxJQUFJLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQztBQUN0QyxRQVhJLFdBQU0sR0FBUTtBQUNsQixZQUFRLFdBQVcsRUFBRTtBQUNyQixnQkFBWSxJQUFJLEVBQUUsMEJBQTBCO0FBQzVDLGFBQVM7QUFDVCxZQUFRLE9BQU8sRUFBRSw4QkFBOEI7QUFDL0MsWUFBUSxPQUFPLEVBQUUsOEJBQThCO0FBQy9DLFlBQVEsUUFBUSxFQUFFLFFBQVE7QUFDMUIsU0FBSyxDQUFDO0FBQ04sSUFHSSxDQUFDO0FBQ0wsSUFDSSxJQUFJO0FBQUssUUFDTCxPQUFPLElBQUksT0FBTyxDQUFDLENBQUMsT0FBTyxFQUFFLEVBQUU7QUFDdkMsWUFBWSxJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUM7QUFDeEMsWUFBWSxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUMzQyxZQUFZLE9BQU8sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDakMsUUFBUSxDQUFDLENBQUMsQ0FBQztBQUNYLElBQUksQ0FBQztBQUNMO2dEQXZCQyxVQUFVOzRIQUNUO0FBQUM7QUFBOEMsWUFIeEMsVUFBVTtBQUFJLFlBQ2QsZ0JBQWdCO0FBQUc7Ozs4R0FBRTtBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQXBwQ29uZmlnU2VydmljZSwgU3RhdHVzIH0gZnJvbSAnLi4vYXBwLWNvbmZpZy9hcHAtY29uZmlnLnNlcnZpY2UnO1xuaW1wb3J0IHsgSHR0cENsaWVudCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7IEV4dGVuc2lvblNlcnZpY2UgfSBmcm9tICdAYWxmcmVzY28vYWRmLWV4dGVuc2lvbnMnO1xuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEFwcENvbmZpZ1NlcnZpY2VNb2NrIGV4dGVuZHMgQXBwQ29uZmlnU2VydmljZSB7XG5cbiAgICBjb25maWc6IGFueSA9IHtcbiAgICAgICAgYXBwbGljYXRpb246IHtcbiAgICAgICAgICAgIG5hbWU6ICdBbGZyZXNjbyBBREYgQXBwbGljYXRpb24nXG4gICAgICAgIH0sXG4gICAgICAgIGVjbUhvc3Q6ICdodHRwOi8ve2hvc3RuYW1lfXs6cG9ydH0vZWNtJyxcbiAgICAgICAgYnBtSG9zdDogJ2h0dHA6Ly97aG9zdG5hbWV9ezpwb3J0fS9icG0nLFxuICAgICAgICBsb2dMZXZlbDogJ3NpbGVudCdcbiAgICB9O1xuXG4gICAgY29uc3RydWN0b3IoaHR0cDogSHR0cENsaWVudCwgZXh0ZW5zaW9uU2VydmljZTogRXh0ZW5zaW9uU2VydmljZSkge1xuICAgICAgICBzdXBlcihodHRwLCBleHRlbnNpb25TZXJ2aWNlKTtcbiAgICB9XG5cbiAgICBsb2FkKCk6IFByb21pc2U8YW55PiB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgICAgICAgICAgdGhpcy5zdGF0dXMgPSBTdGF0dXMuTE9BREVEO1xuICAgICAgICAgICAgdGhpcy5vbkRhdGFMb2FkZWQodGhpcy5jb25maWcpO1xuICAgICAgICAgICAgcmVzb2x2ZSh0aGlzLmNvbmZpZyk7XG4gICAgICAgIH0pO1xuICAgIH1cbn1cbiJdfQ==