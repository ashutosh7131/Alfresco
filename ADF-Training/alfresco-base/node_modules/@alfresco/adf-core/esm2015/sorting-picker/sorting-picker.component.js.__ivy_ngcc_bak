/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, ViewEncapsulation, Input, EventEmitter, Output } from '@angular/core';
export class SortingPickerComponent {
    constructor() {
        this.options = [];
        this.ascending = true;
        this.valueChange = new EventEmitter();
        this.sortingChange = new EventEmitter();
    }
    onOptionChanged(event) {
        this.selected = event.value;
        this.valueChange.emit(this.selected);
    }
    toggleSortDirection() {
        this.ascending = !this.ascending;
        this.sortingChange.emit(this.ascending);
    }
}
SortingPickerComponent.decorators = [
    { type: Component, args: [{
                selector: 'adf-sorting-picker',
                template: "<mat-form-field floatLabel=\"always\">\n    <mat-label>{{'CORE.SEARCH.SORT_BY' | translate}}</mat-label>\n    <mat-select [(value)]=\"selected\" (selectionChange)=\"onOptionChanged($event)\">\n        <mat-option *ngFor=\"let option of options\" [value]=\"option.key\">\n            {{ option.label | translate }}\n        </mat-option>\n    </mat-select>\n</mat-form-field>\n\n<button *ngIf=\"selected\" mat-icon-button (click)=\"toggleSortDirection()\" aria-label=\"'CORE.SEARCH.TOGGLE_ASC_DESC_ORDER' | translate\">\n    <mat-icon *ngIf=\"ascending\">arrow_upward</mat-icon>\n    <mat-icon *ngIf=\"!ascending\">arrow_downward</mat-icon>\n</button>\n",
                encapsulation: ViewEncapsulation.None,
                host: { class: 'adf-sorting-picker' }
            },] }
];
SortingPickerComponent.propDecorators = {
    options: [{ type: Input }],
    selected: [{ type: Input }],
    ascending: [{ type: Input }],
    valueChange: [{ type: Output }],
    sortingChange: [{ type: Output }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic29ydGluZy1waWNrZXIuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Ii9ob21lL3RyYXZpcy9idWlsZC9BbGZyZXNjby9hbGZyZXNjby1uZzItY29tcG9uZW50cy9saWIvY29yZS8iLCJzb3VyY2VzIjpbInNvcnRpbmctcGlja2VyL3NvcnRpbmctcGlja2VyLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7O0dBZUc7QUFFSCxPQUFPLEVBQUUsU0FBUyxFQUFFLGlCQUFpQixFQUFFLEtBQUssRUFBRSxZQUFZLEVBQUUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBUzFGLE1BQU0sT0FBTyxzQkFBc0I7SUFObkM7UUFVSSxZQUFPLEdBQXdDLEVBQUUsQ0FBQztRQVFsRCxjQUFTLEdBQUcsSUFBSSxDQUFDO1FBSWpCLGdCQUFXLEdBQUcsSUFBSSxZQUFZLEVBQVUsQ0FBQztRQUl6QyxrQkFBYSxHQUFHLElBQUksWUFBWSxFQUFXLENBQUM7SUFXaEQsQ0FBQztJQVRHLGVBQWUsQ0FBQyxLQUFzQjtRQUNsQyxJQUFJLENBQUMsUUFBUSxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUM7UUFDNUIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ3pDLENBQUM7SUFFRCxtQkFBbUI7UUFDZixJQUFJLENBQUMsU0FBUyxHQUFHLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQztRQUNqQyxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDNUMsQ0FBQzs7O1lBcENKLFNBQVMsU0FBQztnQkFDUCxRQUFRLEVBQUUsb0JBQW9CO2dCQUM5Qix3cEJBQThDO2dCQUM5QyxhQUFhLEVBQUUsaUJBQWlCLENBQUMsSUFBSTtnQkFDckMsSUFBSSxFQUFFLEVBQUUsS0FBSyxFQUFFLG9CQUFvQixFQUFFO2FBQ3hDOzs7c0JBSUksS0FBSzt1QkFJTCxLQUFLO3dCQUlMLEtBQUs7MEJBSUwsTUFBTTs0QkFJTixNQUFNIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgQ29tcG9uZW50LCBWaWV3RW5jYXBzdWxhdGlvbiwgSW5wdXQsIEV2ZW50RW1pdHRlciwgT3V0cHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBNYXRTZWxlY3RDaGFuZ2UgfSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbC9zZWxlY3QnO1xuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ2FkZi1zb3J0aW5nLXBpY2tlcicsXG4gICAgdGVtcGxhdGVVcmw6ICcuL3NvcnRpbmctcGlja2VyLmNvbXBvbmVudC5odG1sJyxcbiAgICBlbmNhcHN1bGF0aW9uOiBWaWV3RW5jYXBzdWxhdGlvbi5Ob25lLFxuICAgIGhvc3Q6IHsgY2xhc3M6ICdhZGYtc29ydGluZy1waWNrZXInIH1cbn0pXG5leHBvcnQgY2xhc3MgU29ydGluZ1BpY2tlckNvbXBvbmVudCB7XG5cbiAgICAvKiogQXZhaWxhYmxlIHNvcnRpbmcgb3B0aW9ucyAqL1xuICAgIEBJbnB1dCgpXG4gICAgb3B0aW9uczogQXJyYXk8e2tleTogc3RyaW5nLCBsYWJlbDogc3RyaW5nfT4gPSBbXTtcblxuICAgIC8qKiBDdXJyZW50bHkgc2VsZWN0ZWQgb3B0aW9uIGtleSAqL1xuICAgIEBJbnB1dCgpXG4gICAgc2VsZWN0ZWQ6IHN0cmluZztcblxuICAgIC8qKiBDdXJyZW50IHNvcnRpbmcgZGlyZWN0aW9uICovXG4gICAgQElucHV0KClcbiAgICBhc2NlbmRpbmcgPSB0cnVlO1xuXG4gICAgLyoqIFJhaXNlZCBlYWNoIHRpbWUgc29ydGluZyBrZXkgZ2V0cyBjaGFuZ2VkLiAqL1xuICAgIEBPdXRwdXQoKVxuICAgIHZhbHVlQ2hhbmdlID0gbmV3IEV2ZW50RW1pdHRlcjxzdHJpbmc+KCk7XG5cbiAgICAvKiogUmFpc2VkIGVhY2ggdGltZSBkaXJlY3Rpb24gZ2V0cyBjaGFuZ2VkLiAqL1xuICAgIEBPdXRwdXQoKVxuICAgIHNvcnRpbmdDaGFuZ2UgPSBuZXcgRXZlbnRFbWl0dGVyPGJvb2xlYW4+KCk7XG5cbiAgICBvbk9wdGlvbkNoYW5nZWQoZXZlbnQ6IE1hdFNlbGVjdENoYW5nZSkge1xuICAgICAgICB0aGlzLnNlbGVjdGVkID0gZXZlbnQudmFsdWU7XG4gICAgICAgIHRoaXMudmFsdWVDaGFuZ2UuZW1pdCh0aGlzLnNlbGVjdGVkKTtcbiAgICB9XG5cbiAgICB0b2dnbGVTb3J0RGlyZWN0aW9uKCkge1xuICAgICAgICB0aGlzLmFzY2VuZGluZyA9ICF0aGlzLmFzY2VuZGluZztcbiAgICAgICAgdGhpcy5zb3J0aW5nQ2hhbmdlLmVtaXQodGhpcy5hc2NlbmRpbmcpO1xuICAgIH1cbn1cbiJdfQ==