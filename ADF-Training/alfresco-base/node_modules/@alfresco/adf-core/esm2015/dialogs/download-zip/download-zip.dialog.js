/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, Inject, ViewEncapsulation } from '@angular/core';
import { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';
import { LogService } from '../../services/log.service';
import { DownloadZipService } from '../../services/download-zip.service';
import { ContentService } from '../../services/content.service';
import { NodesApiService } from '../../services/nodes-api.service';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/material/dialog';
import * as ɵngcc2 from '../../services/log.service';
import * as ɵngcc3 from '../../services/download-zip.service';
import * as ɵngcc4 from '../../services/nodes-api.service';
import * as ɵngcc5 from '../../services/content.service';
import * as ɵngcc6 from '@angular/material/progress-bar';
import * as ɵngcc7 from '@angular/material/button';
import * as ɵngcc8 from '@ngx-translate/core';
export class DownloadZipDialogComponent {
    constructor(dialogRef, data, logService, downloadZipService, nodeService, contentService) {
        this.dialogRef = dialogRef;
        this.data = data;
        this.logService = logService;
        this.downloadZipService = downloadZipService;
        this.nodeService = nodeService;
        this.contentService = contentService;
        this.cancelled = false;
    }
    ngOnInit() {
        if (this.data && this.data.nodeIds && this.data.nodeIds.length > 0) {
            if (!this.cancelled) {
                this.downloadZip(this.data.nodeIds);
            }
            else {
                this.logService.log('Cancelled');
            }
        }
    }
    cancelDownload() {
        this.cancelled = true;
        this.downloadZipService.cancelDownload(this.downloadId);
        this.dialogRef.close(false);
    }
    downloadZip(nodeIds) {
        if (nodeIds && nodeIds.length > 0) {
            this.downloadZipService.createDownload({ nodeIds }).subscribe((data) => {
                if (data && data.entry && data.entry.id) {
                    const url = this.contentService.getContentUrl(data.entry.id, true);
                    this.nodeService.getNode(data.entry.id).subscribe((downloadNode) => {
                        this.logService.log(downloadNode);
                        const fileName = downloadNode.name;
                        this.downloadId = data.entry.id;
                        this.waitAndDownload(data.entry.id, url, fileName);
                    });
                }
            });
        }
    }
    waitAndDownload(downloadId, url, fileName) {
        if (this.cancelled) {
            return;
        }
        this.downloadZipService.getDownload(downloadId).subscribe((downloadEntry) => {
            if (downloadEntry.entry) {
                if (downloadEntry.entry.status === 'DONE') {
                    this.download(url, fileName);
                }
                else {
                    setTimeout(() => {
                        this.waitAndDownload(downloadId, url, fileName);
                    }, 1000);
                }
            }
        });
    }
    download(url, fileName) {
        if (url && fileName) {
            const link = document.createElement('a');
            link.style.display = 'none';
            link.download = fileName;
            link.href = url;
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
        }
        this.dialogRef.close(true);
    }
}
DownloadZipDialogComponent.ɵfac = function DownloadZipDialogComponent_Factory(t) { return new (t || DownloadZipDialogComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.MatDialogRef), ɵngcc0.ɵɵdirectiveInject(MAT_DIALOG_DATA), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.LogService), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.DownloadZipService), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.NodesApiService), ɵngcc0.ɵɵdirectiveInject(ɵngcc5.ContentService)); };
DownloadZipDialogComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: DownloadZipDialogComponent, selectors: [["adf-download-zip-dialog"]], hostAttrs: [1, "adf-download-zip-dialog"], decls: 9, vars: 6, consts: [["matDialogTitle", ""], ["mat-dialog-content", ""], ["color", "primary", "mode", "indeterminate"], ["align", "end"], ["mat-button", "", "color", "primary", "id", "cancel-button", 3, "click"]], template: function DownloadZipDialogComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "h1", 0);
        ɵngcc0.ɵɵtext(1);
        ɵngcc0.ɵɵpipe(2, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(3, "div", 1);
        ɵngcc0.ɵɵelement(4, "mat-progress-bar", 2);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(5, "mat-dialog-actions", 3);
        ɵngcc0.ɵɵelementStart(6, "button", 4);
        ɵngcc0.ɵɵlistener("click", function DownloadZipDialogComponent_Template_button_click_6_listener() { return ctx.cancelDownload(); });
        ɵngcc0.ɵɵtext(7);
        ɵngcc0.ɵɵpipe(8, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(2, 2, "CORE.DIALOG.DOWNLOAD_ZIP.TITLE"));
        ɵngcc0.ɵɵadvance(6);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(8, 4, "CORE.DIALOG.DOWNLOAD_ZIP.ACTIONS.CANCEL"), " ");
    } }, directives: [ɵngcc1.MatDialogTitle, ɵngcc1.MatDialogContent, ɵngcc6.MatProgressBar, ɵngcc1.MatDialogActions, ɵngcc7.MatButton], pipes: [ɵngcc8.TranslatePipe], styles: [".adf-download-zip-dialog .mat-dialog-actions .mat-button-wrapper{text-transform:uppercase}"], encapsulation: 2 });
DownloadZipDialogComponent.ctorParameters = () => [
    { type: MatDialogRef },
    { type: undefined, decorators: [{ type: Inject, args: [MAT_DIALOG_DATA,] }] },
    { type: LogService },
    { type: DownloadZipService },
    { type: NodesApiService },
    { type: ContentService }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DownloadZipDialogComponent, [{
        type: Component,
        args: [{
                selector: 'adf-download-zip-dialog',
                template: "<h1 matDialogTitle>{{ 'CORE.DIALOG.DOWNLOAD_ZIP.TITLE' | translate }}</h1>\n<div mat-dialog-content>\n    <mat-progress-bar color=\"primary\" mode=\"indeterminate\"></mat-progress-bar>\n</div>\n<mat-dialog-actions align=\"end\">\n    <button mat-button color=\"primary\" id=\"cancel-button\" (click)=\"cancelDownload()\">\n        {{ 'CORE.DIALOG.DOWNLOAD_ZIP.ACTIONS.CANCEL' | translate }}\n    </button>\n</mat-dialog-actions>\n",
                host: { 'class': 'adf-download-zip-dialog' },
                encapsulation: ViewEncapsulation.None,
                styles: [".adf-download-zip-dialog .mat-dialog-actions .mat-button-wrapper{text-transform:uppercase}"]
            }]
    }], function () { return [{ type: ɵngcc1.MatDialogRef }, { type: undefined, decorators: [{
                type: Inject,
                args: [MAT_DIALOG_DATA]
            }] }, { type: ɵngcc2.LogService }, { type: ɵngcc3.DownloadZipService }, { type: ɵngcc4.NodesApiService }, { type: ɵngcc5.ContentService }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,