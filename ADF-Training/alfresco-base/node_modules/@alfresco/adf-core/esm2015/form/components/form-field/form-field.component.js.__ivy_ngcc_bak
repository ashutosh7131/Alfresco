/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Compiler, Component, ComponentFactoryResolver, Input, NgModule, ViewChild, ViewContainerRef, ViewEncapsulation } from '@angular/core';
import { FormRenderingService } from './../../services/form-rendering.service';
import { WidgetVisibilityService } from './../../services/widget-visibility.service';
import { FormFieldModel } from './../widgets/core/form-field.model';
export class FormFieldComponent {
    constructor(formRenderingService, componentFactoryResolver, visibilityService, compiler) {
        this.formRenderingService = formRenderingService;
        this.componentFactoryResolver = componentFactoryResolver;
        this.visibilityService = visibilityService;
        this.compiler = compiler;
        this.field = null;
        this.focus = false;
    }
    ngOnInit() {
        const w = window;
        if (w.adf === undefined) {
            w.adf = {};
        }
        const originalField = this.getField();
        if (originalField) {
            const customTemplate = this.field.form.customFieldTemplates[originalField.type];
            if (customTemplate && this.hasController(originalField.type)) {
                const factory = this.getComponentFactorySync(originalField.type, customTemplate);
                this.componentRef = this.container.createComponent(factory);
                const instance = this.componentRef.instance;
                if (instance) {
                    instance.field = originalField;
                }
            }
            else {
                const componentType = this.formRenderingService.resolveComponentType(originalField);
                if (componentType) {
                    const factory = this.componentFactoryResolver.resolveComponentFactory(componentType);
                    this.componentRef = this.container.createComponent(factory);
                    const instance = this.componentRef.instance;
                    instance.field = this.field;
                    instance.fieldChanged.subscribe((field) => {
                        if (field && this.field.form) {
                            this.visibilityService.refreshVisibility(field.form);
                            field.form.onFormFieldChanged(field);
                        }
                    });
                }
            }
        }
    }
    ngOnDestroy() {
        if (this.componentRef) {
            this.componentRef.destroy();
            this.componentRef = null;
        }
    }
    getField() {
        if (this.field && this.field.params) {
            const wrappedField = this.field.params.field;
            if (wrappedField && wrappedField.type) {
                return wrappedField;
            }
        }
        return this.field;
    }
    hasController(type) {
        return (adf && adf.components && adf.components[type]);
    }
    getComponentFactorySync(type, template) {
        const componentInfo = adf.components[type];
        if (componentInfo.factory) {
            return componentInfo.factory;
        }
        const metadata = {
            selector: `runtime-component-${type}`,
            template: template
        };
        const factory = this.createComponentFactorySync(this.compiler, metadata, componentInfo.class);
        componentInfo.factory = factory;
        return factory;
    }
    createComponentFactorySync(compiler, metadata, componentClass) {
        const cmpClass = componentClass || class RuntimeComponent {
        };
        const decoratedCmp = Component(metadata)(cmpClass);
        const moduleClass = class RuntimeComponentModule {
        };
        const decoratedNgModule = NgModule({ imports: [], declarations: [decoratedCmp] })(moduleClass);
        const module = compiler.compileModuleAndAllComponentsSync(decoratedNgModule);
        return module.componentFactories.find((x) => x.componentType === decoratedCmp);
    }
    focusToggle() {
        setTimeout(() => {
            this.focus = !this.focus;
        });
    }
}
FormFieldComponent.decorators = [
    { type: Component, args: [{
                selector: 'adf-form-field',
                template: `
        <div [id]="'field-'+field?.id+'-container'"
            [hidden]="!field?.isVisible"
            [class.adf-focus]="focus"
            (focusin)="focusToggle()"
            (focusout)="focusToggle()">
            <div #container></div>
        </div>
    `,
                encapsulation: ViewEncapsulation.None
            },] }
];
FormFieldComponent.ctorParameters = () => [
    { type: FormRenderingService },
    { type: ComponentFactoryResolver },
    { type: WidgetVisibilityService },
    { type: Compiler }
];
FormFieldComponent.propDecorators = {
    container: [{ type: ViewChild, args: ['container', { read: ViewContainerRef, static: true },] }],
    field: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,