/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { FormFieldEvent } from './../../../events/form-field.event';
import { ValidateFormFieldEvent } from './../../../events/validate-form-field.event';
import { ValidateFormEvent } from './../../../events/validate-form.event';
import { ContainerModel } from './container.model';
import { FormFieldTypes } from './form-field-types';
import { FormFieldModel } from './form-field.model';
import { TabModel } from './tab.model';
import { FormOutcomeModel } from './form-outcome.model';
import { FORM_FIELD_VALIDATORS } from './form-field-validator';
export class FormModel {
    constructor(json, formValues, readOnly = false, formService, enableFixedSpace) {
        this.formService = formService;
        this.taskName = FormModel.UNSET_TASK_NAME;
        this.values = {};
        this.tabs = [];
        this.fields = [];
        this.outcomes = [];
        this.fieldValidators = [...FORM_FIELD_VALIDATORS];
        this.customFieldTemplates = {};
        this.readOnly = false;
        this.isValid = true;
        this.processVariables = [];
        this.variables = [];
        this.readOnly = readOnly;
        this.json = json;
        if (json) {
            this.id = json.id;
            this.name = json.name;
            this.taskId = json.taskId;
            this.taskName = json.taskName || json.name || FormModel.UNSET_TASK_NAME;
            this.processDefinitionId = json.processDefinitionId;
            this.customFieldTemplates = json.customFieldTemplates || {};
            this.selectedOutcome = json.selectedOutcome;
            this.className = json.className || '';
            this.variables = json.variables || [];
            this.processVariables = json.processVariables || [];
            this.enableFixedSpace = enableFixedSpace ? true : false;
            const tabCache = {};
            this.tabs = (json.tabs || []).map((tabJson) => {
                const model = new TabModel(this, tabJson);
                tabCache[model.id] = model;
                return model;
            });
            this.fields = this.parseRootFields(json);
            if (formValues) {
                this.loadData(formValues);
            }
            for (let i = 0; i < this.fields.length; i++) {
                const field = this.fields[i];
                if (field.tab) {
                    const tab = tabCache[field.tab];
                    if (tab) {
                        tab.fields.push(field);
                    }
                }
            }
            this.parseOutcomes();
        }
        this.validateForm();
    }
    onFormFieldChanged(field) {
        this.validateField(field);
        if (this.formService) {
            this.formService.formFieldValueChanged.next(new FormFieldEvent(this, field));
        }
    }
    validateForm() {
        const validateFormEvent = new ValidateFormEvent(this);
        const errorsField = [];
        const fields = this.getFormFields();
        for (let i = 0; i < fields.length; i++) {
            if (!fields[i].validate()) {
                errorsField.push(fields[i]);
            }
        }
        this.isValid = errorsField.length <= 0;
        if (this.formService) {
            validateFormEvent.isValid = this.isValid;
            validateFormEvent.errorsField = errorsField;
            this.formService.validateForm.next(validateFormEvent);
        }
    }
    validateField(field) {
        if (!field) {
            return;
        }
        const validateFieldEvent = new ValidateFormFieldEvent(this, field);
        if (this.formService) {
            this.formService.validateFormField.next(validateFieldEvent);
        }
        if (!validateFieldEvent.isValid) {
            this.markAsInvalid();
            return;
        }
        if (validateFieldEvent.defaultPrevented) {
            return;
        }
        if (!field.validate()) {
            this.markAsInvalid();
        }
        this.validateForm();
    }
    parseRootFields(json) {
        let fields = [];
        if (json.fields) {
            fields = json.fields;
        }
        else if (json.formDefinition && json.formDefinition.fields) {
            fields = json.formDefinition.fields;
        }
        const formWidgetModel = [];
        for (const field of fields) {
            if (field.type === FormFieldTypes.DISPLAY_VALUE) {
                if (field.params) {
                    const originalField = field.params['field'];
                    if (originalField.type === FormFieldTypes.DYNAMIC_TABLE) {
                        formWidgetModel.push(new ContainerModel(new FormFieldModel(this, field)));
                    }
                }
            }
            else {
                formWidgetModel.push(new ContainerModel(new FormFieldModel(this, field)));
            }
        }
        return formWidgetModel;
    }
    loadData(formValues) {
        for (const field of this.getFormFields()) {
            const variableId = `variables.${field.name}`;
            if (this.isDefined(formValues[variableId]) || this.isDefined(formValues[field.id])) {
                field.json.value = formValues[variableId] || formValues[field.id];
                field.value = field.parseValue(field.json);
            }
        }
    }
    isDefined(value) {
        return value !== undefined && value !== null;
    }
    getFormVariable(identifier) {
        if (identifier) {
            return this.variables.find(variable => variable.name === identifier ||
                variable.id === identifier);
        }
        return undefined;
    }
    getFormVariableValue(identifier) {
        const variable = this.getFormVariable(identifier);
        if (variable && variable.hasOwnProperty('value')) {
            return this.parseValue(variable.type, variable.value);
        }
        return undefined;
    }
    getProcessVariableValue(name) {
        if (this.processVariables) {
            const names = [`variables.${name}`, name];
            const variable = this.processVariables.find(entry => names.includes(entry.name));
            if (variable) {
                return this.parseValue(variable.type, variable.value);
            }
        }
        return undefined;
    }
    parseValue(type, value) {
        if (type && value) {
            switch (type) {
                case 'date':
                    return value
                        ? `${value}T00:00:00.000Z`
                        : undefined;
                case 'boolean':
                    return typeof value === 'string'
                        ? JSON.parse(value)
                        : value;
                default:
                    return value;
            }
        }
        return value;
    }
    hasTabs() {
        return this.tabs && this.tabs.length > 0;
    }
    hasFields() {
        return this.fields && this.fields.length > 0;
    }
    hasOutcomes() {
        return this.outcomes && this.outcomes.length > 0;
    }
    getFieldById(fieldId) {
        return this.getFormFields().find((field) => field.id === fieldId);
    }
    getFormFields() {
        const formFieldModel = [];
        for (let i = 0; i < this.fields.length; i++) {
            const field = this.fields[i];
            if (field instanceof ContainerModel) {
                const container = field;
                formFieldModel.push(container.field);
                container.field.columns.forEach((column) => {
                    formFieldModel.push(...column.fields);
                });
            }
        }
        return formFieldModel;
    }
    markAsInvalid() {
        this.isValid = false;
    }
    parseOutcomes() {
        if (this.json.fields) {
            const saveOutcome = new FormOutcomeModel(this, {
                id: FormModel.SAVE_OUTCOME,
                name: 'SAVE',
                isSystem: true
            });
            const completeOutcome = new FormOutcomeModel(this, {
                id: FormModel.COMPLETE_OUTCOME,
                name: 'COMPLETE',
                isSystem: true
            });
            const startProcessOutcome = new FormOutcomeModel(this, {
                id: FormModel.START_PROCESS_OUTCOME,
                name: 'START PROCESS',
                isSystem: true
            });
            const customOutcomes = (this.json.outcomes || []).map((obj) => new FormOutcomeModel(this, obj));
            this.outcomes = [saveOutcome].concat(customOutcomes.length > 0
                ? customOutcomes
                : [completeOutcome, startProcessOutcome]);
        }
    }
    addValuesNotPresent(valuesToSetIfNotPresent) {
        this.getFormFields().forEach(field => {
            if (valuesToSetIfNotPresent[field.id] && (!this.values[field.id] || this.isValidDropDown(field.id))) {
                this.values[field.id] = valuesToSetIfNotPresent[field.id];
                field.json.value = this.values[field.id];
                field.value = field.parseValue(field.json);
            }
        });
    }
    isValidDropDown(key) {
        const field = this.getFieldById(key);
        if (field.type === FormFieldTypes.DROPDOWN) {
            if (field.hasMultipleValues) {
                return Array.isArray(this.values[key]);
            }
            return typeof this.values[key] === 'string' ? this.values[key] === 'empty' : Object.keys(this.values[key]).length === 0;
        }
        return false;
    }
    setNodeIdValueForViewersLinkedToUploadWidget(linkedUploadWidgetContentSelected) {
        const subscribedViewers = this.getFormFields().filter(field => linkedUploadWidgetContentSelected.uploadWidgetId === field.params['uploadWidget']);
        subscribedViewers.forEach(viewer => {
            this.values[viewer.id] = linkedUploadWidgetContentSelected.id;
            viewer.json.value = this.values[viewer.id];
            viewer.value = viewer.parseValue(viewer.json);
        });
    }
}
FormModel.UNSET_TASK_NAME = 'Nameless task';
FormModel.SAVE_OUTCOME = '$save';
FormModel.COMPLETE_OUTCOME = '$complete';
FormModel.START_PROCESS_OUTCOME = '$startProcess';
//# sourceMappingURL=data:application/json;base64,