/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { LogService } from '../../../../services/log.service';
import { ThumbnailService } from '../../../../services/thumbnail.service';
import { Component, ElementRef, ViewChild, ViewEncapsulation } from '@angular/core';
import { from } from 'rxjs';
import { FormService } from '../../../services/form.service';
import { ProcessContentService } from '../../../services/process-content.service';
import { ContentLinkModel } from '../core/content-link.model';
import { WidgetComponent } from './../widget.component';
import { mergeMap, map } from 'rxjs/operators';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../../../services/form.service';
import * as ɵngcc2 from '../../../../services/log.service';
import * as ɵngcc3 from '../../../../services/thumbnail.service';
import * as ɵngcc4 from '../../../services/process-content.service';
import * as ɵngcc5 from '@angular/common';
import * as ɵngcc6 from '../error/error.component';
import * as ɵngcc7 from '@angular/material/list';
import * as ɵngcc8 from '@angular/material/core';
import * as ɵngcc9 from '@angular/material/button';
import * as ɵngcc10 from '@angular/material/icon';
import * as ɵngcc11 from '@ngx-translate/core';

const _c0 = ["uploadFiles"];
function UploadWidgetComponent_span_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span");
    ɵngcc0.ɵɵtext(1, "*");
    ɵngcc0.ɵɵelementEnd();
} }
function UploadWidgetComponent_mat_list_7_mat_list_item_1_button_4_Template(rf, ctx) { if (rf & 1) {
    const _r9 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 10);
    ɵngcc0.ɵɵlistener("click", function UploadWidgetComponent_mat_list_7_mat_list_item_1_button_4_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r9); const file_r5 = ɵngcc0.ɵɵnextContext().$implicit; const ctx_r7 = ɵngcc0.ɵɵnextContext(2); return ctx_r7.removeFile(file_r5); })("keyup.enter", function UploadWidgetComponent_mat_list_7_mat_list_item_1_button_4_Template_button_keyup_enter_0_listener() { ɵngcc0.ɵɵrestoreView(_r9); const file_r5 = ɵngcc0.ɵɵnextContext().$implicit; const ctx_r10 = ɵngcc0.ɵɵnextContext(2); return ctx_r10.removeFile(file_r5); });
    ɵngcc0.ɵɵelementStart(1, "mat-icon", 11);
    ɵngcc0.ɵɵtext(2, "highlight_off");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const file_r5 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵproperty("id", "file-" + file_r5.id + "-remove");
} }
function UploadWidgetComponent_mat_list_7_mat_list_item_1_Template(rf, ctx) { if (rf & 1) {
    const _r14 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "mat-list-item", 6);
    ɵngcc0.ɵɵelementStart(1, "img", 7);
    ɵngcc0.ɵɵlistener("click", function UploadWidgetComponent_mat_list_7_mat_list_item_1_Template_img_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r14); const file_r5 = ctx.$implicit; const ctx_r13 = ɵngcc0.ɵɵnextContext(2); return ctx_r13.fileClicked(file_r5); })("keyup.enter", function UploadWidgetComponent_mat_list_7_mat_list_item_1_Template_img_keyup_enter_1_listener() { ɵngcc0.ɵɵrestoreView(_r14); const file_r5 = ctx.$implicit; const ctx_r15 = ɵngcc0.ɵɵnextContext(2); return ctx_r15.fileClicked(file_r5); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(2, "span", 8);
    ɵngcc0.ɵɵlistener("click", function UploadWidgetComponent_mat_list_7_mat_list_item_1_Template_span_click_2_listener() { ɵngcc0.ɵɵrestoreView(_r14); const file_r5 = ctx.$implicit; const ctx_r16 = ɵngcc0.ɵɵnextContext(2); return ctx_r16.fileClicked(file_r5); })("keyup.enter", function UploadWidgetComponent_mat_list_7_mat_list_item_1_Template_span_keyup_enter_2_listener() { ɵngcc0.ɵɵrestoreView(_r14); const file_r5 = ctx.$implicit; const ctx_r17 = ɵngcc0.ɵɵnextContext(2); return ctx_r17.fileClicked(file_r5); });
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(4, UploadWidgetComponent_mat_list_7_mat_list_item_1_button_4_Template, 3, 1, "button", 9);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const file_r5 = ctx.$implicit;
    const ctx_r4 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("id", "file-" + file_r5.id + "-icon")("src", ctx_r4.getIcon(file_r5.mimeType), ɵngcc0.ɵɵsanitizeUrl)("alt", ctx_r4.mimeTypeIcon);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate("id", "file-" + file_r5.id);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(file_r5.name);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r4.field.readOnly);
} }
function UploadWidgetComponent_mat_list_7_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-list");
    ɵngcc0.ɵɵtemplate(1, UploadWidgetComponent_mat_list_7_mat_list_item_1_Template, 5, 6, "mat-list-item", 5);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r1.field.value);
} }
function UploadWidgetComponent_div_8_Template(rf, ctx) { if (rf & 1) {
    const _r20 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div");
    ɵngcc0.ɵɵelementStart(1, "button", 12);
    ɵngcc0.ɵɵlistener("click", function UploadWidgetComponent_div_8_Template_button_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r20); const _r18 = ɵngcc0.ɵɵreference(7); return _r18.click(); });
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementStart(4, "mat-icon");
    ɵngcc0.ɵɵtext(5, "file_upload");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(6, "input", 13, 14);
    ɵngcc0.ɵɵlistener("change", function UploadWidgetComponent_div_8_Template_input_change_6_listener($event) { ɵngcc0.ɵɵrestoreView(_r20); const ctx_r21 = ɵngcc0.ɵɵnextContext(); return ctx_r21.onFileChanged($event); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(3, 3, "FORM.FIELD.UPLOAD"), "");
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵproperty("multiple", ctx_r2.multipleOption)("id", ctx_r2.field.id);
} }
function UploadWidgetComponent_error_widget_10_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "error-widget", 15);
    ɵngcc0.ɵɵpipe(1, "translate");
} if (rf & 2) {
    ɵngcc0.ɵɵpropertyInterpolate("required", ɵngcc0.ɵɵpipeBind1(1, 1, "FORM.FIELD.REQUIRED"));
} }
export class UploadWidgetComponent extends WidgetComponent {
    constructor(formService, logService, thumbnailService, processContentService) {
        super(formService);
        this.formService = formService;
        this.logService = logService;
        this.thumbnailService = thumbnailService;
        this.processContentService = processContentService;
        this.multipleOption = '';
    }
    ngOnInit() {
        if (this.field &&
            this.field.value &&
            this.field.value.length > 0) {
            this.hasFile = true;
        }
        this.getMultipleFileParam();
    }
    removeFile(file) {
        if (this.field) {
            this.removeElementFromList(file);
        }
    }
    onFileChanged(event) {
        const files = event.target.files;
        let filesSaved = [];
        if (this.field.json.value) {
            filesSaved = [...this.field.json.value];
        }
        if (files && files.length > 0) {
            from(files)
                .pipe(mergeMap((file) => this.uploadRawContent(file)))
                .subscribe((res) => filesSaved.push(res), () => this.logService.error('Error uploading file. See console output for more details.'), () => {
                this.field.value = filesSaved;
                this.field.json.value = filesSaved;
                this.hasFile = true;
            });
        }
    }
    uploadRawContent(file) {
        return this.processContentService.createTemporaryRawRelatedContent(file)
            .pipe(map((response) => {
            this.logService.info(response);
            response.contentBlob = file;
            return response;
        }));
    }
    getMultipleFileParam() {
        if (this.field &&
            this.field.params &&
            this.field.params.multiple) {
            this.multipleOption = this.field.params.multiple ? 'multiple' : '';
        }
    }
    removeElementFromList(file) {
        const index = this.field.value.indexOf(file);
        if (index !== -1) {
            this.field.value.splice(index, 1);
            this.field.json.value = this.field.value;
            this.field.updateForm();
        }
        this.hasFile = this.field.value.length > 0;
        if (!this.hasFile) {
            this.field.value = null;
            this.field.json.value = null;
        }
    }
    getIcon(mimeType) {
        return this.thumbnailService.getMimeTypeIcon(mimeType);
    }
    fileClicked(contentLinkModel) {
        const file = new ContentLinkModel(contentLinkModel);
        let fetch = this.processContentService.getContentPreview(file.id);
        if (file.isTypeImage() || file.isTypePdf()) {
            fetch = this.processContentService.getFileRawContent(file.id);
        }
        fetch.subscribe((blob) => {
            file.contentBlob = blob;
            this.formService.formContentClicked.next(file);
        }, () => {
            this.logService.error('Unable to send event for file ' + file.name);
        });
    }
}
UploadWidgetComponent.ɵfac = function UploadWidgetComponent_Factory(t) { return new (t || UploadWidgetComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FormService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.LogService), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.ThumbnailService), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.ProcessContentService)); };
UploadWidgetComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: UploadWidgetComponent, selectors: [["upload-widget"]], viewQuery: function UploadWidgetComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c0, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.fileInput = _t.first);
    } }, hostBindings: function UploadWidgetComponent_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function UploadWidgetComponent_click_HostBindingHandler($event) { return ctx.event($event); })("blur", function UploadWidgetComponent_blur_HostBindingHandler($event) { return ctx.event($event); })("change", function UploadWidgetComponent_change_HostBindingHandler($event) { return ctx.event($event); })("focus", function UploadWidgetComponent_focus_HostBindingHandler($event) { return ctx.event($event); })("focusin", function UploadWidgetComponent_focusin_HostBindingHandler($event) { return ctx.event($event); })("focusout", function UploadWidgetComponent_focusout_HostBindingHandler($event) { return ctx.event($event); })("input", function UploadWidgetComponent_input_HostBindingHandler($event) { return ctx.event($event); })("invalid", function UploadWidgetComponent_invalid_HostBindingHandler($event) { return ctx.event($event); })("select", function UploadWidgetComponent_select_HostBindingHandler($event) { return ctx.event($event); });
    } }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 11, vars: 16, consts: [[1, "adf-label"], [4, "ngIf"], [1, "adf-upload-widget-container"], [3, "error"], [3, "required", 4, "ngIf"], ["class", "adf-upload-files-row", 4, "ngFor", "ngForOf"], [1, "adf-upload-files-row"], ["mat-list-icon", "", "role", "button", "tabindex", "0", 1, "adf-upload-widget__icon", 3, "id", "src", "alt", "click", "keyup.enter"], ["matLine", "", "role", "button", "tabindex", "0", 1, "adf-file", 3, "id", "click", "keyup.enter"], ["mat-icon-button", "", 3, "id", "click", "keyup.enter", 4, "ngIf"], ["mat-icon-button", "", 3, "id", "click", "keyup.enter"], [1, "mat-24"], ["mat-raised-button", "", "color", "primary", 3, "click"], ["type", "file", 3, "multiple", "id", "change"], ["uploadFiles", ""], [3, "required"]], template: function UploadWidgetComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div");
        ɵngcc0.ɵɵelementStart(1, "label", 0);
        ɵngcc0.ɵɵtext(2);
        ɵngcc0.ɵɵpipe(3, "translate");
        ɵngcc0.ɵɵtemplate(4, UploadWidgetComponent_span_4_Template, 2, 0, "span", 1);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(5, "div", 2);
        ɵngcc0.ɵɵelementStart(6, "div");
        ɵngcc0.ɵɵtemplate(7, UploadWidgetComponent_mat_list_7_Template, 2, 1, "mat-list", 1);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(8, UploadWidgetComponent_div_8_Template, 8, 5, "div", 1);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(9, "error-widget", 3);
        ɵngcc0.ɵɵtemplate(10, UploadWidgetComponent_error_widget_10_Template, 2, 3, "error-widget", 4);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵclassMapInterpolate1("adf-upload-widget ", ctx.field.className, "");
        ɵngcc0.ɵɵclassProp("adf-invalid", !ctx.field.isValid)("adf-readonly", ctx.field.readOnly);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵattribute("for", ctx.field.id);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(3, 14, ctx.field.name));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.isRequired());
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngIf", ctx.hasFile);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", (!ctx.hasFile || ctx.multipleOption) && !ctx.field.readOnly);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("error", ctx.field.validationSummary);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.isInvalidFieldRequired());
    } }, directives: [ɵngcc5.NgIf, ɵngcc6.ErrorWidgetComponent, ɵngcc7.MatList, ɵngcc5.NgForOf, ɵngcc7.MatListItem, ɵngcc7.MatListIconCssMatStyler, ɵngcc8.MatLine, ɵngcc9.MatButton, ɵngcc10.MatIcon], pipes: [ɵngcc11.TranslatePipe], styles: [".adf-upload-widget-container{margin-bottom:15px}.adf-upload-widget-container input{display:none}.adf-upload-widget{border-top:.84375em solid transparent;padding:.4375em 0;width:100%;word-break:break-all}.adf-upload-widget__icon{cursor:pointer;float:left;padding:6px}.adf-upload-widget__reset{margin-top:-2px}.adf-upload-files-row .mat-line{margin-bottom:0}"], encapsulation: 2 });
UploadWidgetComponent.ctorParameters = () => [
    { type: FormService },
    { type: LogService },
    { type: ThumbnailService },
    { type: ProcessContentService }
];
UploadWidgetComponent.propDecorators = {
    fileInput: [{ type: ViewChild, args: ['uploadFiles',] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(UploadWidgetComponent, [{
        type: Component,
        args: [{
                selector: 'upload-widget',
                template: "<div class=\"adf-upload-widget {{field.className}}\"\n     [class.adf-invalid]=\"!field.isValid\"\n     [class.adf-readonly]=\"field.readOnly\">\n    <label class=\"adf-label\" [attr.for]=\"field.id\">{{field.name | translate }}<span *ngIf=\"isRequired()\">*</span></label>\n    <div class=\"adf-upload-widget-container\">\n        <div>\n            <mat-list *ngIf=\"hasFile\">\n                <mat-list-item class=\"adf-upload-files-row\" *ngFor=\"let file of field.value\">\n                    <img mat-list-icon class=\"adf-upload-widget__icon\"\n                         [id]=\"'file-'+file.id+'-icon'\"\n                         [src]=\"getIcon(file.mimeType)\"\n                         [alt]=\"mimeTypeIcon\"\n                         (click)=\"fileClicked(file)\"\n                         (keyup.enter)=\"fileClicked(file)\"\n                         role=\"button\"\n                         tabindex=\"0\"/>\n                    <span matLine id=\"{{'file-'+file.id}}\" (click)=\"fileClicked(file)\" (keyup.enter)=\"fileClicked(file)\"\n                          role=\"button\" tabindex=\"0\" class=\"adf-file\">{{file.name}}</span>\n                    <button *ngIf=\"!field.readOnly\" mat-icon-button [id]=\"'file-'+file.id+'-remove'\"\n                            (click)=\"removeFile(file);\" (keyup.enter)=\"removeFile(file);\">\n                        <mat-icon class=\"mat-24\">highlight_off</mat-icon>\n                    </button>\n                </mat-list-item>\n            </mat-list>\n        </div>\n\n        <div *ngIf=\"(!hasFile || multipleOption) && !field.readOnly\">\n            <button mat-raised-button color=\"primary\" (click)=\"uploadFiles.click()\">\n                {{ 'FORM.FIELD.UPLOAD' | translate }}<mat-icon>file_upload</mat-icon>\n                <input #uploadFiles\n                       [multiple]=\"multipleOption\"\n                       type=\"file\"\n                       [id]=\"field.id\"\n                       (change)=\"onFileChanged($event)\"/>\n            </button>\n        </div>\n    </div>\n    <error-widget [error]=\"field.validationSummary\"></error-widget>\n    <error-widget *ngIf=\"isInvalidFieldRequired()\" required=\"{{ 'FORM.FIELD.REQUIRED' | translate }}\"></error-widget>\n</div>\n",
                host: {
                    '(click)': 'event($event)',
                    '(blur)': 'event($event)',
                    '(change)': 'event($event)',
                    '(focus)': 'event($event)',
                    '(focusin)': 'event($event)',
                    '(focusout)': 'event($event)',
                    '(input)': 'event($event)',
                    '(invalid)': 'event($event)',
                    '(select)': 'event($event)'
                },
                encapsulation: ViewEncapsulation.None,
                styles: [".adf-upload-widget-container{margin-bottom:15px}.adf-upload-widget-container input{display:none}.adf-upload-widget{border-top:.84375em solid transparent;padding:.4375em 0;width:100%;word-break:break-all}.adf-upload-widget__icon{cursor:pointer;float:left;padding:6px}.adf-upload-widget__reset{margin-top:-2px}.adf-upload-files-row .mat-line{margin-bottom:0}"]
            }]
    }], function () { return [{ type: ɵngcc1.FormService }, { type: ɵngcc2.LogService }, { type: ɵngcc3.ThumbnailService }, { type: ɵngcc4.ProcessContentService }]; }, { fileInput: [{
            type: ViewChild,
            args: ['uploadFiles']
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,