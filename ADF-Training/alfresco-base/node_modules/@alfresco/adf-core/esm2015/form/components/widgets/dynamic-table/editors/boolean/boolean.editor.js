/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, Input } from '@angular/core';
import { DynamicTableModel } from './../../dynamic-table.widget.model';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/material/checkbox';
export class BooleanEditorComponent {
    onValueChanged(row, column, event) {
        const value = event.checked;
        row.value[column.id] = value;
    }
}
BooleanEditorComponent.ɵfac = function BooleanEditorComponent_Factory(t) { return new (t || BooleanEditorComponent)(); };
BooleanEditorComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: BooleanEditorComponent, selectors: [["adf-boolean-editor"]], inputs: { table: "table", row: "row", column: "column" }, decls: 4, vars: 6, consts: [["color", "primary", 3, "id", "checked", "required", "disabled", "change"], [1, "adf-checkbox-label"]], template: function BooleanEditorComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "label");
        ɵngcc0.ɵɵelementStart(1, "mat-checkbox", 0);
        ɵngcc0.ɵɵlistener("change", function BooleanEditorComponent_Template_mat_checkbox_change_1_listener($event) { return ctx.onValueChanged(ctx.row, ctx.column, $event); });
        ɵngcc0.ɵɵelementStart(2, "span", 1);
        ɵngcc0.ɵɵtext(3);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵattribute("for", ctx.column.id);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("id", ctx.column.id)("checked", ctx.table.getCellValue(ctx.row, ctx.column))("required", ctx.column.required)("disabled", !ctx.column.editable);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵtextInterpolate(ctx.column.name);
    } }, directives: [ɵngcc1.MatCheckbox], styles: [".adf-checkbox-label[_ngcontent-%COMP%]{cursor:pointer;font-size:16px;line-height:24px;margin:0;position:relative}"] });
BooleanEditorComponent.propDecorators = {
    table: [{ type: Input }],
    row: [{ type: Input }],
    column: [{ type: Input }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(BooleanEditorComponent, [{
        type: Component,
        args: [{
                selector: 'adf-boolean-editor',
                template: " <label [attr.for]=\"column.id\">\n    <mat-checkbox\n        color=\"primary\"\n        [id]=\"column.id\"\n        [checked]=\"table.getCellValue(row, column)\"\n        [required]=\"column.required\"\n        [disabled]=\"!column.editable\"\n        (change)=\"onValueChanged(row, column, $event)\">\n    <span class=\"adf-checkbox-label\">{{column.name}}</span>\n    </mat-checkbox>\n</label>\n",
                styles: [".adf-checkbox-label{cursor:pointer;font-size:16px;line-height:24px;margin:0;position:relative}"]
            }]
    }], null, { table: [{
            type: Input
        }], row: [{
            type: Input
        }], column: [{
            type: Input
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYm9vbGVhbi5lZGl0b3IuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL2hvbWUvdHJhdmlzL2J1aWxkL0FsZnJlc2NvL2FsZnJlc2NvLW5nMi1jb21wb25lbnRzL2xpYi9jb3JlL2Zvcm0vY29tcG9uZW50cy93aWRnZXRzL2R5bmFtaWMtdGFibGUvZWRpdG9ycy9ib29sZWFuL2Jvb2xlYW4uZWRpdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFJSCxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUdqRCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxvQ0FBb0MsQ0FBQzs7O0FBT3ZFLE1BQU0sT0FBTyxzQkFBc0I7QUFDbkMsSUFVSSxjQUFjLENBQUMsR0FBb0IsRUFBRSxNQUEwQixFQUFFLEtBQVU7QUFDL0UsUUFBUSxNQUFNLEtBQUssR0FBZ0MsS0FBTSxDQUFDLE9BQU8sQ0FBQztBQUNsRSxRQUFRLEdBQUcsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEtBQUssQ0FBQztBQUNyQyxJQUFJLENBQUM7QUFDTDtrREFwQkMsU0FBUyxTQUFDLGtCQUNQLFFBQVEsRUFBRSxvQkFBb0I7WUFDOUI7Z0NBQW9DOzswRUFFdkM7Ozs7Ozs7Ozs7Ozs0S0FDSTtBQUFDO0FBRUcsb0JBQUosS0FBSztBQUNSLGtCQUVHLEtBQUs7QUFDUixxQkFFRyxLQUFLO0FBQ1Q7Ozs7Ozs7Ozs7Ozs7O29CQUFFO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG4vKiB0c2xpbnQ6ZGlzYWJsZTpjb21wb25lbnQtc2VsZWN0b3IgICovXG5cbmltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IER5bmFtaWNUYWJsZUNvbHVtbiB9IGZyb20gJy4vLi4vLi4vZHluYW1pYy10YWJsZS1jb2x1bW4ubW9kZWwnO1xuaW1wb3J0IHsgRHluYW1pY1RhYmxlUm93IH0gZnJvbSAnLi8uLi8uLi9keW5hbWljLXRhYmxlLXJvdy5tb2RlbCc7XG5pbXBvcnQgeyBEeW5hbWljVGFibGVNb2RlbCB9IGZyb20gJy4vLi4vLi4vZHluYW1pYy10YWJsZS53aWRnZXQubW9kZWwnO1xuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ2FkZi1ib29sZWFuLWVkaXRvcicsXG4gICAgdGVtcGxhdGVVcmw6ICcuL2Jvb2xlYW4uZWRpdG9yLmh0bWwnLFxuICAgIHN0eWxlVXJsczogWycuL2Jvb2xlYW4uZWRpdG9yLnNjc3MnXVxufSlcbmV4cG9ydCBjbGFzcyBCb29sZWFuRWRpdG9yQ29tcG9uZW50IHtcblxuICAgIEBJbnB1dCgpXG4gICAgdGFibGU6IER5bmFtaWNUYWJsZU1vZGVsO1xuXG4gICAgQElucHV0KClcbiAgICByb3c6IER5bmFtaWNUYWJsZVJvdztcblxuICAgIEBJbnB1dCgpXG4gICAgY29sdW1uOiBEeW5hbWljVGFibGVDb2x1bW47XG5cbiAgICBvblZhbHVlQ2hhbmdlZChyb3c6IER5bmFtaWNUYWJsZVJvdywgY29sdW1uOiBEeW5hbWljVGFibGVDb2x1bW4sIGV2ZW50OiBhbnkpIHtcbiAgICAgICAgY29uc3QgdmFsdWU6IGJvb2xlYW4gPSAoPEhUTUxJbnB1dEVsZW1lbnQ+IGV2ZW50KS5jaGVja2VkO1xuICAgICAgICByb3cudmFsdWVbY29sdW1uLmlkXSA9IHZhbHVlO1xuICAgIH1cblxufVxuIl19