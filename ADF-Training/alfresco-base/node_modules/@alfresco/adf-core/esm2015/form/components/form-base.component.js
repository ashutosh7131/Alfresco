/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { FormOutcomeModel } from './widgets';
import { EventEmitter, Input, Output, Directive } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
export class FormBaseComponent {
    constructor() {
        this.showTitle = true;
        this.showCompleteButton = true;
        this.disableCompleteButton = false;
        this.disableSaveButton = false;
        this.disableStartProcessButton = false;
        this.showSaveButton = true;
        this.readOnly = false;
        this.showRefreshButton = true;
        this.showValidationIcon = true;
        this.formError = new EventEmitter();
        this.executeOutcome = new EventEmitter();
        this.error = new EventEmitter();
    }
    getParsedFormDefinition() {
        return this;
    }
    hasForm() {
        return !!this.form;
    }
    isTitleEnabled() {
        let titleEnabled = false;
        if (this.showTitle && this.form) {
            titleEnabled = true;
        }
        return titleEnabled;
    }
    getColorForOutcome(outcomeName) {
        return outcomeName === FormBaseComponent.COMPLETE_OUTCOME_NAME ? FormBaseComponent.COMPLETE_BUTTON_COLOR : null;
    }
    isOutcomeButtonEnabled(outcome) {
        if (this.form.readOnly) {
            return false;
        }
        if (outcome) {
            if (outcome.name === FormOutcomeModel.SAVE_ACTION) {
                return !this.disableSaveButton;
            }
            if (outcome.name === FormOutcomeModel.COMPLETE_ACTION) {
                return this.disableCompleteButton ? false : this.form.isValid;
            }
            if (outcome.name === FormOutcomeModel.START_PROCESS_ACTION) {
                return this.disableStartProcessButton ? false : this.form.isValid;
            }
            return this.form.isValid;
        }
        return false;
    }
    isOutcomeButtonVisible(outcome, isFormReadOnly) {
        if (outcome && outcome.name) {
            if (outcome.name === FormOutcomeModel.COMPLETE_ACTION) {
                return this.showCompleteButton;
            }
            if (isFormReadOnly) {
                return outcome.isSelected;
            }
            if (outcome.name === FormOutcomeModel.SAVE_ACTION) {
                return this.showSaveButton;
            }
            if (outcome.name === FormOutcomeModel.START_PROCESS_ACTION) {
                return false;
            }
            return true;
        }
        return false;
    }
    onOutcomeClicked(outcome) {
        if (!this.readOnly && outcome && this.form) {
            if (!this.onExecuteOutcome(outcome)) {
                return false;
            }
            if (outcome.isSystem) {
                if (outcome.id === FormBaseComponent.SAVE_OUTCOME_ID) {
                    this.saveTaskForm();
                    return true;
                }
                if (outcome.id === FormBaseComponent.COMPLETE_OUTCOME_ID) {
                    this.completeTaskForm();
                    return true;
                }
                if (outcome.id === FormBaseComponent.START_PROCESS_OUTCOME_ID) {
                    this.completeTaskForm();
                    return true;
                }
                if (outcome.id === FormBaseComponent.CUSTOM_OUTCOME_ID) {
                    this.onTaskSaved(this.form);
                    this.storeFormAsMetadata();
                    return true;
                }
            }
            else {
                if (outcome.name) {
                    this.onTaskSaved(this.form);
                    this.completeTaskForm(outcome.name);
                    return true;
                }
            }
        }
        return false;
    }
    handleError(err) {
        this.error.emit(err);
    }
}
FormBaseComponent.ɵfac = function FormBaseComponent_Factory(t) { return new (t || FormBaseComponent)(); };
FormBaseComponent.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: FormBaseComponent, inputs: { showTitle: "showTitle", showCompleteButton: "showCompleteButton", disableCompleteButton: "disableCompleteButton", disableSaveButton: "disableSaveButton", disableStartProcessButton: "disableStartProcessButton", showSaveButton: "showSaveButton", readOnly: "readOnly", showRefreshButton: "showRefreshButton", showValidationIcon: "showValidationIcon", path: "path", nameNode: "nameNode", fieldValidators: "fieldValidators" }, outputs: { formError: "formError", executeOutcome: "executeOutcome", error: "error" } });
FormBaseComponent.SAVE_OUTCOME_ID = '$save';
FormBaseComponent.COMPLETE_OUTCOME_ID = '$complete';
FormBaseComponent.START_PROCESS_OUTCOME_ID = '$startProcess';
FormBaseComponent.CUSTOM_OUTCOME_ID = '$custom';
FormBaseComponent.COMPLETE_BUTTON_COLOR = 'primary';
FormBaseComponent.COMPLETE_OUTCOME_NAME = 'COMPLETE';
FormBaseComponent.propDecorators = {
    path: [{ type: Input }],
    nameNode: [{ type: Input }],
    showTitle: [{ type: Input }],
    showCompleteButton: [{ type: Input }],
    disableCompleteButton: [{ type: Input }],
    disableSaveButton: [{ type: Input }],
    disableStartProcessButton: [{ type: Input }],
    showSaveButton: [{ type: Input }],
    readOnly: [{ type: Input }],
    showRefreshButton: [{ type: Input }],
    showValidationIcon: [{ type: Input }],
    fieldValidators: [{ type: Input }],
    formError: [{ type: Output }],
    executeOutcome: [{ type: Output }],
    error: [{ type: Output }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FormBaseComponent, [{
        type: Directive
    }], function () { return []; }, { showTitle: [{
            type: Input
        }], showCompleteButton: [{
            type: Input
        }], disableCompleteButton: [{
            type: Input
        }], disableSaveButton: [{
            type: Input
        }], disableStartProcessButton: [{
            type: Input
        }], showSaveButton: [{
            type: Input
        }], readOnly: [{
            type: Input
        }], showRefreshButton: [{
            type: Input
        }], showValidationIcon: [{
            type: Input
        }], formError: [{
            type: Output
        }], executeOutcome: [{
            type: Output
        }], error: [{
            type: Output
        }], path: [{
            type: Input
        }], nameNode: [{
            type: Input
        }], fieldValidators: [{
            type: Input
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,