/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, EventEmitter, Input, Output, ViewEncapsulation } from '@angular/core';
import { FormService } from './../../services/form.service';
import { FormFieldModel } from './core/index';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './../../services/form.service';
export class WidgetComponent {
    constructor(formService) {
        this.formService = formService;
        this.readOnly = false;
        this.fieldChanged = new EventEmitter();
    }
    hasField() {
        return !!this.field;
    }
    isRequired() {
        if (this.field && this.field.required) {
            return true;
        }
        return null;
    }
    isValid() {
        return !!this.field.validationSummary;
    }
    hasValue() {
        return this.field &&
            this.field.value !== null &&
            this.field.value !== undefined;
    }
    isInvalidFieldRequired() {
        return !this.field.isValid && !this.field.validationSummary && this.isRequired();
    }
    ngAfterViewInit() {
        this.fieldChanged.emit(this.field);
    }
    checkVisibility(field) {
        this.fieldChanged.emit(field);
    }
    onFieldChanged(field) {
        this.fieldChanged.emit(field);
    }
    event(event) {
        this.formService.formEvents.next(event);
    }
}
WidgetComponent.ɵfac = function WidgetComponent_Factory(t) { return new (t || WidgetComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FormService)); };
WidgetComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: WidgetComponent, selectors: [["base-widget"]], hostBindings: function WidgetComponent_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function WidgetComponent_click_HostBindingHandler($event) { return ctx.event($event); })("blur", function WidgetComponent_blur_HostBindingHandler($event) { return ctx.event($event); })("change", function WidgetComponent_change_HostBindingHandler($event) { return ctx.event($event); })("focus", function WidgetComponent_focus_HostBindingHandler($event) { return ctx.event($event); })("focusin", function WidgetComponent_focusin_HostBindingHandler($event) { return ctx.event($event); })("focusout", function WidgetComponent_focusout_HostBindingHandler($event) { return ctx.event($event); })("input", function WidgetComponent_input_HostBindingHandler($event) { return ctx.event($event); })("invalid", function WidgetComponent_invalid_HostBindingHandler($event) { return ctx.event($event); })("select", function WidgetComponent_select_HostBindingHandler($event) { return ctx.event($event); });
    } }, inputs: { readOnly: "readOnly", field: "field" }, outputs: { fieldChanged: "fieldChanged" }, decls: 0, vars: 0, template: function WidgetComponent_Template(rf, ctx) { }, encapsulation: 2 });
WidgetComponent.ctorParameters = () => [
    { type: FormService }
];
WidgetComponent.propDecorators = {
    readOnly: [{ type: Input }],
    field: [{ type: Input }],
    fieldChanged: [{ type: Output }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(WidgetComponent, [{
        type: Component,
        args: [{
                selector: 'base-widget',
                template: '',
                host: {
                    '(click)': 'event($event)',
                    '(blur)': 'event($event)',
                    '(change)': 'event($event)',
                    '(focus)': 'event($event)',
                    '(focusin)': 'event($event)',
                    '(focusout)': 'event($event)',
                    '(input)': 'event($event)',
                    '(invalid)': 'event($event)',
                    '(select)': 'event($event)'
                },
                encapsulation: ViewEncapsulation.None
            }]
    }], function () { return [{ type: ɵngcc1.FormService }]; }, { readOnly: [{
            type: Input
        }], fieldChanged: [{
            type: Output
        }], field: [{
            type: Input
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2lkZ2V0LmNvbXBvbmVudC5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vaG9tZS90cmF2aXMvYnVpbGQvQWxmcmVzY28vYWxmcmVzY28tbmcyLWNvbXBvbmVudHMvbGliL2NvcmUvZm9ybS9jb21wb25lbnRzL3dpZGdldHMvd2lkZ2V0LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBSUgsT0FBTyxFQUFpQixTQUFTLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDekcsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBQzVELE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxjQUFjLENBQUM7OztBQXFCOUMsTUFBTSxPQUFPLGVBQWU7QUFBRyxJQWdCM0IsWUFBbUIsV0FBeUI7QUFDaEQsUUFEdUIsZ0JBQVcsR0FBWCxXQUFXLENBQWM7QUFBQyxRQVo3QyxhQUFRLEdBQVksS0FBSyxDQUFDO0FBQzlCLFFBU0ksaUJBQVksR0FBaUMsSUFBSSxZQUFZLEVBQWtCLENBQUM7QUFDcEYsSUFFSSxDQUFDO0FBQ0wsSUFDSSxRQUFRO0FBQUssUUFDVCxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDO0FBQzVCLElBQUksQ0FBQztBQUNMLElBR0ksVUFBVTtBQUFLLFFBQ1gsSUFBSSxJQUFJLENBQUMsS0FBSyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFO0FBQy9DLFlBQVksT0FBTyxJQUFJLENBQUM7QUFDeEIsU0FBUztBQUNULFFBQVEsT0FBTyxJQUFJLENBQUM7QUFDcEIsSUFBSSxDQUFDO0FBQ0wsSUFDSSxPQUFPO0FBQUssUUFDUixPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLGlCQUFpQixDQUFDO0FBQzlDLElBQUksQ0FBQztBQUNMLElBQ0ksUUFBUTtBQUFLLFFBQ1QsT0FBTyxJQUFJLENBQUMsS0FBSztBQUN6QixZQUFZLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxLQUFLLElBQUk7QUFDckMsWUFBWSxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssS0FBSyxTQUFTLENBQUM7QUFDM0MsSUFBSSxDQUFDO0FBQ0wsSUFDSSxzQkFBc0I7QUFDMUIsUUFBUSxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLGlCQUFpQixJQUFJLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQztBQUN6RixJQUFJLENBQUM7QUFDTCxJQUNJLGVBQWU7QUFDbkIsUUFBUSxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDM0MsSUFBSSxDQUFDO0FBQ0wsSUFDSSxlQUFlLENBQUMsS0FBcUI7QUFDekMsUUFBUSxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUN0QyxJQUFJLENBQUM7QUFDTCxJQUNJLGNBQWMsQ0FBQyxLQUFxQjtBQUN4QyxRQUFRLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ3RDLElBQUksQ0FBQztBQUNMLElBQ0ksS0FBSyxDQUFDLEtBQVk7QUFBSSxRQUNsQixJQUFJLENBQUMsV0FBVyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDaEQsSUFBSSxDQUFDO0FBQ0w7MkNBN0VDLFNBQVMsU0FBQyxrQkFDUCxRQUFRLEVBQUUsYUFBYSxrQkFDdkIsUUFBUSxFQUFFLEVBQUU7S0FDWixJQUFJLEVBQUUsc0JBQ0YsU0FBUyxFQUFFLGVBQWUsc0JBQzFCLFFBQVEsRUFBRSxlQUFlLHNCQUN6QixVQUFVLEVBQUUsZUFBZSxzQkFDM0I7TUFBUyxFQUFFLGVBQWUsc0JBQzFCLFdBQVcsRUFBRSxlQUFlLHNCQUM1QixZQUFZLEVBQUUsZUFBZSxzQkFDN0IsU0FBUyxFQUFFLGVBQWUsc0JBQzFCLFdBQVcsRUFBRSxlQUFlLHNCQUM1QixVQUFVLEVBQUUsZUFBZSxrQkFDOUIsa0JBQ0QsYUFBYSxFQUFFLGlCQUFpQixDQUFDLElBQUksY0FDeEM7dU1BQ0k7QUFBQztBQUF5QyxZQXRCdEMsV0FBVztBQUFHO0FBQUc7QUFDMUIsdUJBd0JLLEtBQUs7QUFDUixvQkFHRyxLQUFLO0FBQ1IsMkJBS0csTUFBTTtBQUNWOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O29CQUFFO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG4vKiB0c2xpbnQ6ZGlzYWJsZTpjb21wb25lbnQtc2VsZWN0b3IgICovXG5cbmltcG9ydCB7IEFmdGVyVmlld0luaXQsIENvbXBvbmVudCwgRXZlbnRFbWl0dGVyLCBJbnB1dCwgT3V0cHV0LCBWaWV3RW5jYXBzdWxhdGlvbiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRm9ybVNlcnZpY2UgfSBmcm9tICcuLy4uLy4uL3NlcnZpY2VzL2Zvcm0uc2VydmljZSc7XG5pbXBvcnQgeyBGb3JtRmllbGRNb2RlbCB9IGZyb20gJy4vY29yZS9pbmRleCc7XG5cbi8qKlxuICogQmFzZSB3aWRnZXQgY29tcG9uZW50LlxuICovXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ2Jhc2Utd2lkZ2V0JyxcbiAgICB0ZW1wbGF0ZTogJycsXG4gICAgaG9zdDoge1xuICAgICAgICAnKGNsaWNrKSc6ICdldmVudCgkZXZlbnQpJyxcbiAgICAgICAgJyhibHVyKSc6ICdldmVudCgkZXZlbnQpJyxcbiAgICAgICAgJyhjaGFuZ2UpJzogJ2V2ZW50KCRldmVudCknLFxuICAgICAgICAnKGZvY3VzKSc6ICdldmVudCgkZXZlbnQpJyxcbiAgICAgICAgJyhmb2N1c2luKSc6ICdldmVudCgkZXZlbnQpJyxcbiAgICAgICAgJyhmb2N1c291dCknOiAnZXZlbnQoJGV2ZW50KScsXG4gICAgICAgICcoaW5wdXQpJzogJ2V2ZW50KCRldmVudCknLFxuICAgICAgICAnKGludmFsaWQpJzogJ2V2ZW50KCRldmVudCknLFxuICAgICAgICAnKHNlbGVjdCknOiAnZXZlbnQoJGV2ZW50KSdcbiAgICB9LFxuICAgIGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLk5vbmVcbn0pXG5leHBvcnQgY2xhc3MgV2lkZ2V0Q29tcG9uZW50IGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCB7XG5cbiAgICAvKiogRG9lcyB0aGUgd2lkZ2V0IHNob3cgYSByZWFkLW9ubHkgdmFsdWU/IChpZSwgY2FuJ3QgYmUgZWRpdGVkKSAqL1xuICAgIEBJbnB1dCgpXG4gICAgcmVhZE9ubHk6IGJvb2xlYW4gPSBmYWxzZTtcblxuICAgIC8qKiBEYXRhIHRvIGJlIGRpc3BsYXllZCBpbiB0aGUgZmllbGQgKi9cbiAgICBASW5wdXQoKVxuICAgIGZpZWxkOiBGb3JtRmllbGRNb2RlbDtcblxuICAgIC8qKlxuICAgICAqIEVtaXR0ZWQgd2hlbiBhIGZpZWxkIHZhbHVlIGNoYW5nZXMuXG4gICAgICovXG4gICAgQE91dHB1dCgpXG4gICAgZmllbGRDaGFuZ2VkOiBFdmVudEVtaXR0ZXI8Rm9ybUZpZWxkTW9kZWw+ID0gbmV3IEV2ZW50RW1pdHRlcjxGb3JtRmllbGRNb2RlbD4oKTtcblxuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyBmb3JtU2VydmljZT86IEZvcm1TZXJ2aWNlKSB7XG4gICAgfVxuXG4gICAgaGFzRmllbGQoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiAhIXRoaXMuZmllbGQ7XG4gICAgfVxuXG4gICAgLy8gTm90ZSBmb3IgZGV2ZWxvcGVyczpcbiAgICAvLyByZXR1cm5zIDxhbnk+IG9iamVjdCB0byBiZSBhYmxlIGJpbmRpbmcgaXQgdG8gdGhlIDxlbGVtZW50IHJlcXVpcmVkPVwicmVxdWlyZWRcIj4gYXR0cmlidXRlXG4gICAgaXNSZXF1aXJlZCgpOiBhbnkge1xuICAgICAgICBpZiAodGhpcy5maWVsZCAmJiB0aGlzLmZpZWxkLnJlcXVpcmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBpc1ZhbGlkKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gISF0aGlzLmZpZWxkLnZhbGlkYXRpb25TdW1tYXJ5O1xuICAgIH1cblxuICAgIGhhc1ZhbHVlKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5maWVsZCAmJlxuICAgICAgICAgICAgdGhpcy5maWVsZC52YWx1ZSAhPT0gbnVsbCAmJlxuICAgICAgICAgICAgdGhpcy5maWVsZC52YWx1ZSAhPT0gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIGlzSW52YWxpZEZpZWxkUmVxdWlyZWQoKSB7XG4gICAgICAgIHJldHVybiAhdGhpcy5maWVsZC5pc1ZhbGlkICYmICF0aGlzLmZpZWxkLnZhbGlkYXRpb25TdW1tYXJ5ICYmIHRoaXMuaXNSZXF1aXJlZCgpO1xuICAgIH1cblxuICAgIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcbiAgICAgICAgdGhpcy5maWVsZENoYW5nZWQuZW1pdCh0aGlzLmZpZWxkKTtcbiAgICB9XG5cbiAgICBjaGVja1Zpc2liaWxpdHkoZmllbGQ6IEZvcm1GaWVsZE1vZGVsKSB7XG4gICAgICAgIHRoaXMuZmllbGRDaGFuZ2VkLmVtaXQoZmllbGQpO1xuICAgIH1cblxuICAgIG9uRmllbGRDaGFuZ2VkKGZpZWxkOiBGb3JtRmllbGRNb2RlbCkge1xuICAgICAgICB0aGlzLmZpZWxkQ2hhbmdlZC5lbWl0KGZpZWxkKTtcbiAgICB9XG5cbiAgICBldmVudChldmVudDogRXZlbnQpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5mb3JtU2VydmljZS5mb3JtRXZlbnRzLm5leHQoZXZlbnQpO1xuICAgIH1cbn1cbiJdfQ==