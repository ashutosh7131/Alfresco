/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import moment from 'moment-es6';
import { WidgetVisibilityModel } from '../../../models/widget-visibility.model';
import { ContainerColumnModel } from './container-column.model';
import { ErrorMessageModel } from './error-message.model';
import { FormFieldTypes } from './form-field-types';
import { NumberFieldValidator } from './form-field-validator';
import { FormWidgetModel } from './form-widget.model';
export class FormFieldModel extends FormWidgetModel {
    constructor(form, json) {
        var _a;
        super(form, json);
        this._readOnly = false;
        this._isValid = true;
        this._required = false;
        this.defaultDateFormat = 'D-M-YYYY';
        this.defaultDateTimeFormat = 'D-M-YYYY hh:mm A';
        this.rowspan = 1;
        this.colspan = 1;
        this.placeholder = null;
        this.tooltip = null;
        this.minLength = 0;
        this.maxLength = 0;
        this.options = [];
        this.params = {};
        this.isVisible = true;
        this.visibilityCondition = null;
        this.enableFractions = false;
        this.currency = null;
        this.dateDisplayFormat = this.defaultDateFormat;
        this.selectionType = null;
        this.numberOfColumns = 1;
        this.fields = [];
        this.columns = [];
        if (json) {
            this.fieldType = json.fieldType;
            this.id = json.id;
            this.name = json.name;
            this.type = json.type;
            this.roles = json.roles;
            this._required = json.required;
            this._readOnly = json.readOnly || json.type === 'readonly';
            this.overrideId = json.overrideId;
            this.tab = json.tab;
            this.restUrl = json.restUrl;
            this.restResponsePath = json.restResponsePath;
            this.restIdProperty = json.restIdProperty;
            this.restLabelProperty = json.restLabelProperty;
            this.colspan = json.colspan;
            this.rowspan = json.rowspan;
            this.minLength = json.minLength || 0;
            this.maxLength = json.maxLength || 0;
            this.minValue = json.minValue;
            this.maxValue = json.maxValue;
            this.regexPattern = json.regexPattern;
            this.options = json.options || [];
            this.hasEmptyValue = json.hasEmptyValue;
            this.className = json.className;
            this.optionType = json.optionType;
            this.params = json.params || {};
            this.hyperlinkUrl = json.hyperlinkUrl;
            this.displayText = json.displayText;
            this.visibilityCondition = json.visibilityCondition ? new WidgetVisibilityModel(json.visibilityCondition) : undefined;
            this.enableFractions = json.enableFractions;
            this.currency = json.currency;
            this.dateDisplayFormat = json.dateDisplayFormat || this.getDefaultDateFormat(json);
            this._value = this.parseValue(json);
            this.validationSummary = new ErrorMessageModel();
            this.tooltip = json.tooltip;
            this.selectionType = json.selectionType;
            this.rule = json.rule;
            if (json.placeholder && json.placeholder !== '' && json.placeholder !== 'null') {
                this.placeholder = json.placeholder;
            }
            if (FormFieldTypes.isReadOnlyType(this.type)) {
                if (this.params && this.params.field) {
                    let valueFound = false;
                    if (form.processVariables) {
                        const processVariable = this.getProcessVariableValue(this.params.field, form);
                        if (processVariable) {
                            valueFound = true;
                            this.value = processVariable;
                        }
                    }
                    if (!valueFound && this.params.responseVariable) {
                        const defaultValue = form.getFormVariableValue(this.params.field.name);
                        if (defaultValue) {
                            valueFound = true;
                            this.value = defaultValue;
                        }
                    }
                }
            }
            if (FormFieldTypes.isContainerType(this.type)) {
                this.containerFactory(json, form);
            }
        }
        const emptyOption = Array.isArray(this.options) ? this.options.find(({ id }) => id === 'empty') : undefined;
        if (this.hasEmptyValue === undefined) {
            this.hasEmptyValue = (_a = json === null || json === void 0 ? void 0 : json.hasEmptyValue) !== null && _a !== void 0 ? _a : !!emptyOption;
        }
        if (this.options && this.options.length > 0 && this.hasEmptyValue) {
            this.emptyOption = emptyOption;
        }
        this.updateForm();
    }
    get value() {
        return this._value;
    }
    set value(v) {
        this._value = v;
        this.updateForm();
    }
    get readOnly() {
        if (this.form && this.form.readOnly) {
            return true;
        }
        return this._readOnly;
    }
    set readOnly(readOnly) {
        this._readOnly = readOnly;
        this.updateForm();
    }
    get required() {
        return this._required;
    }
    set required(value) {
        this._required = value;
        this.updateForm();
    }
    get isValid() {
        return this._isValid;
    }
    get hasMultipleValues() {
        return this.selectionType === 'multiple';
    }
    markAsInvalid() {
        this._isValid = false;
    }
    validate() {
        this.validationSummary = new ErrorMessageModel();
        if (!this.readOnly) {
            const validators = this.form.fieldValidators || [];
            for (const validator of validators) {
                if (!validator.validate(this)) {
                    this._isValid = false;
                    return this._isValid;
                }
            }
        }
        this._isValid = true;
        return this._isValid;
    }
    getDefaultDateFormat(jsonField) {
        let originalType = jsonField.type;
        if (FormFieldTypes.isReadOnlyType(jsonField.type) &&
            jsonField.params &&
            jsonField.params.field) {
            originalType = jsonField.params.field.type;
        }
        return originalType === FormFieldTypes.DATETIME ? this.defaultDateTimeFormat : this.defaultDateFormat;
    }
    isTypeaheadFieldType(type) {
        return type === 'typeahead';
    }
    getFieldNameWithLabel(name) {
        return name + '_LABEL';
    }
    getProcessVariableValue(field, form) {
        let fieldName = field.name;
        if (this.isTypeaheadFieldType(field.type)) {
            fieldName = this.getFieldNameWithLabel(field.id);
        }
        return form.getProcessVariableValue(fieldName);
    }
    containerFactory(json, form) {
        this.numberOfColumns = json.numberOfColumns || 1;
        this.fields = json.fields;
        this.rowspan = 1;
        this.colspan = 1;
        if (json.fields) {
            for (const currentField in json.fields) {
                if (json.fields.hasOwnProperty(currentField)) {
                    const col = new ContainerColumnModel();
                    const fields = (json.fields[currentField] || []).map((field) => new FormFieldModel(form, field));
                    col.fields = fields;
                    col.rowspan = json.fields[currentField].length;
                    col.fields.forEach((colFields) => {
                        this.colspan = colFields.colspan > this.colspan ? colFields.colspan : this.colspan;
                    });
                    this.rowspan = this.rowspan < col.rowspan ? col.rowspan : this.rowspan;
                    this.columns.push(col);
                }
            }
        }
    }
    parseValue(json) {
        let value = json.hasOwnProperty('value') && json.value !== undefined ? json.value : null;
        if (json.type === FormFieldTypes.DROPDOWN) {
            if (json.options) {
                const options = json.options || [];
                if (options.length > 0) {
                    if (json.hasEmptyValue) {
                        const emptyOption = json.options[0];
                        if (value === '' || value === emptyOption.id || value === emptyOption.name) {
                            value = emptyOption.id;
                        }
                    }
                    else {
                        if ((value === null || value === void 0 ? void 0 : value.id) && (value === null || value === void 0 ? void 0 : value.name)) {
                            value = value.id;
                        }
                    }
                }
            }
            if (this.hasMultipleValues) {
                value = Array.isArray(json.value) ? json.value : [];
            }
        }
        if (json.type === FormFieldTypes.RADIO_BUTTONS) {
            const entry = this.options.filter((opt) => opt.id === value || opt.name === value || (value && (opt.id === value.id || opt.name === value.name)));
            if (entry.length > 0) {
                value = entry[0].id;
            }
        }
        if (this.isDateField(json) || this.isDateTimeField(json)) {
            if (value) {
                let dateValue;
                if (NumberFieldValidator.isNumber(value)) {
                    dateValue = moment(value);
                }
                else {
                    dateValue = this.isDateTimeField(json) ? moment(value, 'YYYY-MM-DD hh:mm A') : moment(value.split('T')[0], 'YYYY-M-D');
                }
                if (dateValue && dateValue.isValid()) {
                    value = dateValue.format(this.dateDisplayFormat);
                }
            }
        }
        if (this.isCheckboxField(json)) {
            value = json.value === 'true' || json.value === true;
        }
        return value;
    }
    updateForm() {
        if (!this.form) {
            return;
        }
        switch (this.type) {
            case FormFieldTypes.DROPDOWN:
                if (Array.isArray(this.value)) {
                    this.form.values[this.id] = this.value;
                    break;
                }
                if (typeof this.value === 'string') {
                    if (this.value === 'empty' || this.value === '') {
                        this.form.values[this.id] = {};
                        break;
                    }
                    const entry = this.options.filter((opt) => opt.id === this.value);
                    if (entry.length > 0) {
                        this.setFormFieldValueOption(entry[0]);
                    }
                }
                break;
            case FormFieldTypes.RADIO_BUTTONS:
                const radioButton = this.options.filter((opt) => opt.id === this.value);
                if (radioButton.length > 0) {
                    this.setFormFieldValueOption(radioButton[0]);
                }
                break;
            case FormFieldTypes.UPLOAD:
                this.form.hasUpload = true;
                if (this.value && this.value.length > 0) {
                    this.form.values[this.id] = Array.isArray(this.value) ? this.value.map((elem) => elem.id).join(',') : [this.value];
                }
                else {
                    this.form.values[this.id] = null;
                }
                break;
            case FormFieldTypes.TYPEAHEAD:
                const typeAheadEntry = this.options.filter((opt) => opt.id === this.value || opt.name === this.value);
                if (typeAheadEntry.length > 0) {
                    this.form.values[this.id] = typeAheadEntry[0];
                }
                else if (this.options.length > 0) {
                    this.form.values[this.id] = null;
                }
                break;
            case FormFieldTypes.DATE:
                if (typeof this.value === 'string' && this.value === 'today') {
                    this.value = moment(new Date()).format(this.dateDisplayFormat);
                }
                const dateValue = moment(this.value, this.dateDisplayFormat, true);
                if (dateValue && dateValue.isValid()) {
                    this.form.values[this.id] = `${dateValue.format('YYYY-MM-DD')}T00:00:00.000Z`;
                }
                else {
                    this.form.values[this.id] = null;
                    this._value = this.value;
                }
                break;
            case FormFieldTypes.DATETIME:
                if (typeof this.value === 'string' && this.value === 'now') {
                    this.value = moment(new Date()).format(this.dateDisplayFormat);
                }
                const dateTimeValue = moment(this.value, this.dateDisplayFormat, true).utc();
                if (dateTimeValue && dateTimeValue.isValid()) {
                    this.form.values[this.id] = `${dateTimeValue.format('YYYY-MM-DDTHH:mm:ss')}.000Z`;
                }
                else {
                    this.form.values[this.id] = null;
                    this._value = this.value;
                }
                break;
            case FormFieldTypes.NUMBER:
                this.form.values[this.id] = this.enableFractions ? parseFloat(this.value) : parseInt(this.value, 10);
                break;
            case FormFieldTypes.AMOUNT:
                this.form.values[this.id] = this.enableFractions ? parseFloat(this.value) : parseInt(this.value, 10);
                break;
            case FormFieldTypes.BOOLEAN:
                this.form.values[this.id] = (this.value !== null && this.value !== undefined) ? this.value : false;
                break;
            case FormFieldTypes.PEOPLE:
                this.form.values[this.id] = this.value ? this.value : null;
                break;
            case FormFieldTypes.FUNCTIONAL_GROUP:
                this.form.values[this.id] = this.value ? this.value : null;
                break;
            default:
                if (!FormFieldTypes.isReadOnlyType(this.type) && !this.isInvalidFieldType(this.type)) {
                    this.form.values[this.id] = this.value;
                }
        }
        this.form.onFormFieldChanged(this);
    }
    isInvalidFieldType(type) {
        return type === 'container';
    }
    getOptionName() {
        const option = this.options.find((opt) => opt.id === this.value);
        return option ? option.name : null;
    }
    hasOptions() {
        return this.options && this.options.length > 0;
    }
    isDateField(json) {
        return (json.params &&
            json.params.field &&
            json.params.field.type === FormFieldTypes.DATE) ||
            json.type === FormFieldTypes.DATE;
    }
    isDateTimeField(json) {
        return (json.params &&
            json.params.field &&
            json.params.field.type === FormFieldTypes.DATETIME) ||
            json.type === FormFieldTypes.DATETIME;
    }
    isCheckboxField(json) {
        return (json.params &&
            json.params.field &&
            json.params.field.type === FormFieldTypes.BOOLEAN) ||
            json.type === FormFieldTypes.BOOLEAN;
    }
    setFormFieldValueOption(option) {
        if (this.optionType === 'rest' && !!this.restUrl) {
            const restEntry = {};
            const restIdProperty = this.restIdProperty || 'id';
            const restLabelProperty = this.restLabelProperty || 'name';
            restEntry[restIdProperty] = option.id;
            restEntry[restLabelProperty] = option.name;
            this.form.values[this.id] = restEntry;
        }
        else {
            this.form.values[this.id] = option;
        }
    }
}
//# sourceMappingURL=data:application/json;base64,