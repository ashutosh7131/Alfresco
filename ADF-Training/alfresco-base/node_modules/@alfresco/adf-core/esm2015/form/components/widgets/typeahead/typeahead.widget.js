/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { LogService } from '../../../../services/log.service';
import { ENTER, ESCAPE } from '@angular/cdk/keycodes';
import { Component, ViewEncapsulation } from '@angular/core';
import { FormService } from './../../../services/form.service';
import { WidgetComponent } from './../widget.component';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './../../../services/form.service';
import * as ɵngcc2 from '../../../../services/log.service';
import * as ɵngcc3 from '@angular/material/form-field';
import * as ɵngcc4 from '@angular/material/input';
import * as ɵngcc5 from '@angular/forms';
import * as ɵngcc6 from '@angular/material/autocomplete';
import * as ɵngcc7 from '@angular/common';
import * as ɵngcc8 from '../error/error.component';
import * as ɵngcc9 from '@angular/material/core';
import * as ɵngcc10 from '@ngx-translate/core';

function TypeaheadWidgetComponent_mat_option_9_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-option", 9);
    ɵngcc0.ɵɵelementStart(1, "span", 10);
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const item_r3 = ctx.$implicit;
    const i_r4 = ctx.index;
    ɵngcc0.ɵɵpropertyInterpolate1("id", "adf-typeahed-widget-user-", i_r4, "");
    ɵngcc0.ɵɵproperty("value", item_r3);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(item_r3.name);
} }
function TypeaheadWidgetComponent_error_widget_11_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "error-widget", 11);
    ɵngcc0.ɵɵpipe(1, "translate");
} if (rf & 2) {
    ɵngcc0.ɵɵpropertyInterpolate("required", ɵngcc0.ɵɵpipeBind1(1, 1, "FORM.FIELD.REQUIRED"));
} }
export class TypeaheadWidgetComponent extends WidgetComponent {
    constructor(formService, logService) {
        super(formService);
        this.formService = formService;
        this.logService = logService;
        this.minTermLength = 1;
        this.options = [];
    }
    ngOnInit() {
        if (this.field.form.taskId && this.field.restUrl) {
            this.getValuesByTaskId();
        }
        else if (this.field.form.processDefinitionId && this.field.restUrl) {
            this.getValuesByProcessDefinitionId();
        }
        if (this.isReadOnlyType()) {
            this.value = this.field.value;
        }
    }
    getValuesByTaskId() {
        this.formService
            .getRestFieldValues(this.field.form.taskId, this.field.id)
            .subscribe((formFieldOption) => {
            const options = formFieldOption || [];
            this.field.options = options;
            const fieldValue = this.field.value;
            if (fieldValue) {
                const toSelect = options.find((item) => item.id === fieldValue || item.name.toLocaleLowerCase() === fieldValue.toLocaleLowerCase());
                if (toSelect) {
                    this.value = toSelect.name;
                }
            }
            this.onFieldChanged(this.field);
            this.field.updateForm();
        }, (err) => this.handleError(err));
    }
    getValuesByProcessDefinitionId() {
        this.formService
            .getRestFieldValuesByProcessId(this.field.form.processDefinitionId, this.field.id)
            .subscribe((formFieldOption) => {
            const options = formFieldOption || [];
            this.field.options = options;
            const fieldValue = this.field.value;
            if (fieldValue) {
                const toSelect = options.find((item) => item.id === fieldValue);
                if (toSelect) {
                    this.value = toSelect.name;
                }
            }
            this.onFieldChanged(this.field);
            this.field.updateForm();
        }, (err) => this.handleError(err));
    }
    getOptions() {
        const val = this.value.trim().toLocaleLowerCase();
        return this.field.options.filter((item) => {
            const name = item.name.toLocaleLowerCase();
            return name.indexOf(val) > -1;
        });
    }
    isValidOptionName(optionName) {
        const option = this.field.options.find((item) => item.name && item.name.toLocaleLowerCase() === optionName.toLocaleLowerCase());
        return option ? true : false;
    }
    onKeyUp(event) {
        if (this.value && this.value.trim().length >= this.minTermLength && this.oldValue !== this.value) {
            if (event.keyCode !== ESCAPE && event.keyCode !== ENTER) {
                if (this.value.length >= this.minTermLength) {
                    this.options = this.getOptions();
                    this.oldValue = this.value;
                    if (this.isValidOptionName(this.value)) {
                        this.field.value = this.options[0].id;
                    }
                }
            }
        }
        if (this.isValueDefined() && this.value.trim().length === 0) {
            this.oldValue = this.value;
            this.options = [];
        }
    }
    onItemSelect(item) {
        if (item) {
            this.field.value = item.id;
            this.value = item.name;
            this.onFieldChanged(this.field);
        }
    }
    validate() {
        this.field.value = this.value;
    }
    isValueDefined() {
        return this.value !== null && this.value !== undefined;
    }
    handleError(error) {
        this.logService.error(error);
    }
    isReadOnlyType() {
        return this.field.type === 'readonly' ? true : false;
    }
}
TypeaheadWidgetComponent.ɵfac = function TypeaheadWidgetComponent_Factory(t) { return new (t || TypeaheadWidgetComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FormService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.LogService)); };
TypeaheadWidgetComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: TypeaheadWidgetComponent, selectors: [["typeahead-widget"]], hostBindings: function TypeaheadWidgetComponent_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function TypeaheadWidgetComponent_click_HostBindingHandler($event) { return ctx.event($event); })("blur", function TypeaheadWidgetComponent_blur_HostBindingHandler($event) { return ctx.event($event); })("change", function TypeaheadWidgetComponent_change_HostBindingHandler($event) { return ctx.event($event); })("focus", function TypeaheadWidgetComponent_focus_HostBindingHandler($event) { return ctx.event($event); })("focusin", function TypeaheadWidgetComponent_focusin_HostBindingHandler($event) { return ctx.event($event); })("focusout", function TypeaheadWidgetComponent_focusout_HostBindingHandler($event) { return ctx.event($event); })("input", function TypeaheadWidgetComponent_input_HostBindingHandler($event) { return ctx.event($event); })("invalid", function TypeaheadWidgetComponent_invalid_HostBindingHandler($event) { return ctx.event($event); })("select", function TypeaheadWidgetComponent_select_HostBindingHandler($event) { return ctx.event($event); });
    } }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 12, vars: 21, consts: [[1, "adf-typeahead-widget-container"], ["id", "typehead-div"], [1, "adf-label"], ["matInput", "", "type", "text", "data-automation-id", "adf-typeahed-search-input", 1, "adf-input", 3, "id", "ngModel", "disabled", "placeholder", "matAutocomplete", "ngModelChange", "keyup"], [3, "optionSelected"], ["auto", "matAutocomplete"], [3, "id", "value", 4, "ngFor", "ngForOf"], [3, "error"], [3, "required", 4, "ngIf"], [3, "id", "value"], ["id", "adf-typeahed-label-name"], [3, "required"]], template: function TypeaheadWidgetComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "div", 1);
        ɵngcc0.ɵɵelementStart(2, "mat-form-field");
        ɵngcc0.ɵɵelementStart(3, "label", 2);
        ɵngcc0.ɵɵtext(4);
        ɵngcc0.ɵɵpipe(5, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(6, "input", 3);
        ɵngcc0.ɵɵlistener("ngModelChange", function TypeaheadWidgetComponent_Template_input_ngModelChange_6_listener($event) { return ctx.value = $event; })("ngModelChange", function TypeaheadWidgetComponent_Template_input_ngModelChange_6_listener() { return ctx.validate(); })("keyup", function TypeaheadWidgetComponent_Template_input_keyup_6_listener($event) { return ctx.onKeyUp($event); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(7, "mat-autocomplete", 4, 5);
        ɵngcc0.ɵɵlistener("optionSelected", function TypeaheadWidgetComponent_Template_mat_autocomplete_optionSelected_7_listener($event) { return ctx.onItemSelect($event.option.value); });
        ɵngcc0.ɵɵtemplate(9, TypeaheadWidgetComponent_mat_option_9_Template, 3, 3, "mat-option", 6);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(10, "error-widget", 7);
        ɵngcc0.ɵɵtemplate(11, TypeaheadWidgetComponent_error_widget_11_Template, 2, 3, "error-widget", 8);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        const _r0 = ɵngcc0.ɵɵreference(8);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵclassMapInterpolate1("adf-typeahead-widget ", ctx.field.className, "");
        ɵngcc0.ɵɵclassProp("is-dirty", ctx.value)("adf-invalid", !ctx.field.isValid)("adf-readonly", ctx.field.readOnly);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵattribute("for", ctx.field.id);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(5, 19, ctx.field.name));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵpropertyInterpolate("placeholder", ctx.field.placeholder);
        ɵngcc0.ɵɵproperty("id", ctx.field.id)("ngModel", ctx.value)("disabled", ctx.field.readOnly)("matAutocomplete", _r0);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.options);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("error", ctx.field.validationSummary);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.isInvalidFieldRequired());
    } }, directives: [ɵngcc3.MatFormField, ɵngcc4.MatInput, ɵngcc5.DefaultValueAccessor, ɵngcc6.MatAutocompleteTrigger, ɵngcc5.NgControlStatus, ɵngcc5.NgModel, ɵngcc6.MatAutocomplete, ɵngcc7.NgForOf, ɵngcc8.ErrorWidgetComponent, ɵngcc7.NgIf, ɵngcc9.MatOption], pipes: [ɵngcc10.TranslatePipe], styles: [".adf-typeahead-widget-container{display:block;position:relative}.adf-typeahead-widget{width:100%}"], encapsulation: 2 });
TypeaheadWidgetComponent.ctorParameters = () => [
    { type: FormService },
    { type: LogService }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TypeaheadWidgetComponent, [{
        type: Component,
        args: [{
                selector: 'typeahead-widget',
                template: "<div class=\"adf-typeahead-widget-container\">\n    <div class=\"adf-typeahead-widget {{field.className}}\"\n        [class.is-dirty]=\"value\"\n        [class.adf-invalid]=\"!field.isValid\"\n        [class.adf-readonly]=\"field.readOnly\"\n        id=\"typehead-div\">\n        <mat-form-field>\n            <label class=\"adf-label\" [attr.for]=\"field.id\">{{field.name | translate }}</label>\n            <input matInput class=\"adf-input\"\n                   type=\"text\"\n                   [id]=\"field.id\"\n                   [(ngModel)]=\"value\"\n                   (ngModelChange)=\"validate()\"\n                   (keyup)=\"onKeyUp($event)\"\n                   [disabled]=\"field.readOnly\"\n                   data-automation-id=\"adf-typeahed-search-input\"\n                   placeholder=\"{{field.placeholder}}\"\n                   [matAutocomplete]=\"auto\">\n            <mat-autocomplete #auto=\"matAutocomplete\" (optionSelected)=\"onItemSelect($event.option.value)\">\n                <mat-option *ngFor=\"let item of options; let i = index\" id=\"adf-typeahed-widget-user-{{i}}\" [value]=\"item\">\n                    <span id=\"adf-typeahed-label-name\">{{item.name}}</span>\n                </mat-option>\n            </mat-autocomplete>\n        </mat-form-field>\n\n        <error-widget [error]=\"field.validationSummary\"></error-widget>\n        <error-widget *ngIf=\"isInvalidFieldRequired()\" required=\"{{ 'FORM.FIELD.REQUIRED' | translate }}\"></error-widget>\n    </div>\n</div>\n",
                host: {
                    '(click)': 'event($event)',
                    '(blur)': 'event($event)',
                    '(change)': 'event($event)',
                    '(focus)': 'event($event)',
                    '(focusin)': 'event($event)',
                    '(focusout)': 'event($event)',
                    '(input)': 'event($event)',
                    '(invalid)': 'event($event)',
                    '(select)': 'event($event)'
                },
                encapsulation: ViewEncapsulation.None,
                styles: [".adf-typeahead-widget-container{display:block;position:relative}.adf-typeahead-widget{width:100%}"]
            }]
    }], function () { return [{ type: ɵngcc1.FormService }, { type: ɵngcc2.LogService }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,