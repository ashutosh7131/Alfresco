/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { LogService } from '../../../../services/log.service';
import { ThumbnailService } from '../../../../services/thumbnail.service';
import { Component, ElementRef, ViewChild, ViewEncapsulation } from '@angular/core';
import { from } from 'rxjs';
import { FormService } from '../../../services/form.service';
import { ProcessContentService } from '../../../services/process-content.service';
import { ContentLinkModel } from '../core/content-link.model';
import { WidgetComponent } from './../widget.component';
import { mergeMap, map } from 'rxjs/operators';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../../../services/form.service';
import * as ɵngcc2 from '../../../../services/log.service';
import * as ɵngcc3 from '../../../../services/thumbnail.service';
import * as ɵngcc4 from '../../../services/process-content.service';
import * as ɵngcc5 from '@angular/common';
import * as ɵngcc6 from '@ngx-translate/core';

const _c0 = ["uploadFiles"];
function UploadFolderWidgetComponent_span_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span");
    ɵngcc0.ɵɵtext(1, "*");
    ɵngcc0.ɵɵelementEnd();
} }
export class UploadFolderWidgetComponent extends WidgetComponent {
    constructor(formService, logService, thumbnailService, processContentService) {
        super(formService);
        this.formService = formService;
        this.logService = logService;
        this.thumbnailService = thumbnailService;
        this.processContentService = processContentService;
        this.multipleOption = '';
    }
    ngOnInit() {
        if (this.field &&
            this.field.value &&
            this.field.value.length > 0) {
            this.hasFile = true;
        }
        this.getMultipleFileParam();
    }
    removeFile(file) {
        if (this.field) {
            this.removeElementFromList(file);
        }
    }
    onFileChanged(event) {
        const files = event.target.files;
        let filesSaved = [];
        if (this.field.json.value) {
            filesSaved = [...this.field.json.value];
        }
        if (files && files.length > 0) {
            from(files)
                .pipe(mergeMap((file) => this.uploadRawContent(file)))
                .subscribe((res) => {
                filesSaved.push(res);
            }, () => {
                this.logService.error('Error uploading file. See console output for more details.');
            }, () => {
                this.field.value = filesSaved;
                this.field.json.value = filesSaved;
            });
            this.hasFile = true;
        }
    }
    uploadRawContent(file) {
        return this.processContentService.createTemporaryRawRelatedContent(file).pipe(map((response) => {
            this.logService.info(response);
            return response;
        }));
    }
    getMultipleFileParam() {
        if (this.field &&
            this.field.params &&
            this.field.params.multiple) {
            this.multipleOption = this.field.params.multiple ? 'multiple' : '';
        }
    }
    removeElementFromList(file) {
        const index = this.field.value.indexOf(file);
        if (index !== -1) {
            this.field.value.splice(index, 1);
            this.field.json.value = this.field.value;
            this.field.updateForm();
        }
        this.hasFile = this.field.value.length > 0;
        this.resetFormValueWithNoFiles();
    }
    resetFormValueWithNoFiles() {
        if (this.field.value.length === 0) {
            this.field.value = [];
            this.field.json.value = [];
        }
    }
    getIcon(mimeType) {
        return this.thumbnailService.getMimeTypeIcon(mimeType);
    }
    fileClicked(contentLinkModel) {
        const file = new ContentLinkModel(contentLinkModel);
        let fetch = this.processContentService.getContentPreview(file.id);
        if (file.isTypeImage() || file.isTypePdf()) {
            fetch = this.processContentService.getFileRawContent(file.id);
        }
        fetch.subscribe((blob) => {
            file.contentBlob = blob;
            this.formService.formContentClicked.next(file);
        }, () => {
            this.logService.error('Unable to send event for file ' + file.name);
        });
    }
}
UploadFolderWidgetComponent.ɵfac = function UploadFolderWidgetComponent_Factory(t) { return new (t || UploadFolderWidgetComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FormService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.LogService), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.ThumbnailService), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.ProcessContentService)); };
UploadFolderWidgetComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: UploadFolderWidgetComponent, selectors: [["upload-folder-widget"]], viewQuery: function UploadFolderWidgetComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c0, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.fileInput = _t.first);
    } }, hostBindings: function UploadFolderWidgetComponent_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function UploadFolderWidgetComponent_click_HostBindingHandler($event) { return ctx.event($event); })("blur", function UploadFolderWidgetComponent_blur_HostBindingHandler($event) { return ctx.event($event); })("change", function UploadFolderWidgetComponent_change_HostBindingHandler($event) { return ctx.event($event); })("focus", function UploadFolderWidgetComponent_focus_HostBindingHandler($event) { return ctx.event($event); })("focusin", function UploadFolderWidgetComponent_focusin_HostBindingHandler($event) { return ctx.event($event); })("focusout", function UploadFolderWidgetComponent_focusout_HostBindingHandler($event) { return ctx.event($event); })("input", function UploadFolderWidgetComponent_input_HostBindingHandler($event) { return ctx.event($event); })("invalid", function UploadFolderWidgetComponent_invalid_HostBindingHandler($event) { return ctx.event($event); })("select", function UploadFolderWidgetComponent_select_HostBindingHandler($event) { return ctx.event($event); });
    } }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 6, vars: 12, consts: [[1, "adf-label"], [4, "ngIf"], [1, "adf-upload-widget-container"]], template: function UploadFolderWidgetComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div");
        ɵngcc0.ɵɵelementStart(1, "label", 0);
        ɵngcc0.ɵɵtext(2);
        ɵngcc0.ɵɵpipe(3, "translate");
        ɵngcc0.ɵɵtemplate(4, UploadFolderWidgetComponent_span_4_Template, 2, 0, "span", 1);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(5, "div", 2);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵclassMapInterpolate1("adf-upload-folder-widget ", ctx.field.className, "");
        ɵngcc0.ɵɵclassProp("adf-invalid", !ctx.field.isValid)("adf-readonly", ctx.field.readOnly);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵattribute("for", ctx.field.id);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(3, 10, ctx.field.name));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.isRequired());
    } }, directives: [ɵngcc5.NgIf], pipes: [ɵngcc6.TranslatePipe], styles: [".adf-upload-folder-widget{border-top:.84375em solid transparent;padding:.4375em 0;width:100%;word-break:break-all}"], encapsulation: 2 });
UploadFolderWidgetComponent.ctorParameters = () => [
    { type: FormService },
    { type: LogService },
    { type: ThumbnailService },
    { type: ProcessContentService }
];
UploadFolderWidgetComponent.propDecorators = {
    fileInput: [{ type: ViewChild, args: ['uploadFiles',] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(UploadFolderWidgetComponent, [{
        type: Component,
        args: [{
                selector: 'upload-folder-widget',
                template: "<div class=\"adf-upload-folder-widget {{field.className}}\"\n    [class.adf-invalid]=\"!field.isValid\"\n    [class.adf-readonly]=\"field.readOnly\">\n<label class=\"adf-label\" [attr.for]=\"field.id\">{{field.name | translate }}<span *ngIf=\"isRequired()\">*</span></label>\n    <div class=\"adf-upload-widget-container\">\n    </div>\n</div>\n",
                host: {
                    '(click)': 'event($event)',
                    '(blur)': 'event($event)',
                    '(change)': 'event($event)',
                    '(focus)': 'event($event)',
                    '(focusin)': 'event($event)',
                    '(focusout)': 'event($event)',
                    '(input)': 'event($event)',
                    '(invalid)': 'event($event)',
                    '(select)': 'event($event)'
                },
                encapsulation: ViewEncapsulation.None,
                styles: [".adf-upload-folder-widget{border-top:.84375em solid transparent;padding:.4375em 0;width:100%;word-break:break-all}"]
            }]
    }], function () { return [{ type: ɵngcc1.FormService }, { type: ɵngcc2.LogService }, { type: ɵngcc3.ThumbnailService }, { type: ɵngcc4.ProcessContentService }]; }, { fileInput: [{
            type: ViewChild,
            args: ['uploadFiles']
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXBsb2FkLWZvbGRlci53aWRnZXQuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL2hvbWUvdHJhdmlzL2J1aWxkL0FsZnJlc2NvL2FsZnJlc2NvLW5nMi1jb21wb25lbnRzL2xpYi9jb3JlL2Zvcm0vY29tcG9uZW50cy93aWRnZXRzL3VwbG9hZC1mb2xkZXIvdXBsb2FkLWZvbGRlci53aWRnZXQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUlILE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQztBQUM5RCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSx3Q0FBd0MsQ0FBQztBQUMxRSxPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBVSxTQUFTLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDNUYsT0FBTyxFQUFjLElBQUksRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUN4QyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFDN0QsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sMkNBQTJDLENBQUM7QUFDbEYsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDOUQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQ3hELE9BQU8sRUFBRSxRQUFRLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7Ozs7Ozs7Ozs7Ozs7OztBQW1CL0MsTUFBTSxPQUFPLDJCQUE0QixTQUFRLGVBQWU7QUFBRyxJQVUvRCxZQUFtQixXQUF3QixFQUN2QixVQUFzQixFQUN0QixnQkFBa0MsRUFDbkMscUJBQTRDO0FBQ25FLFFBQVEsS0FBSyxDQUFDLFdBQVcsQ0FB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O0dBQWUsc0JBQzFCLFdBQVcsRUFBRSxlQUFlLHNCQUM1QixZQUFZLEVBQUU7TUFBZSxzQkFDN0IsU0FBUyxFQUFFLGVBQWUsc0JBQzFCLFdBQVcsRUFBRSxlQUFlLHNCQUM1QixVQUFVLEVBQUUsZUFBZSxrQkFDOUIsa0JBQ0QsYUFBYSxFQUFFLGlCQUFpQixDQUFDLElBQUksOEpBQ3hDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O3VOQUNJO0FBQUM7QUFBcUQsWUF2QmxELFdBQVc7QUFBSSxZQUpmLFVBQVU7QUFBSSxZQUNkLGdCQUFnQjtBQUFJLFlBSXBCLHFCQUFxQjtBQUFHO0FBQUc7QUFDcEMsd0JBNEJLLFNBQVMsU0FBQyxhQUFhO0FBQ3hCOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztvQkFBRTtBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuLyogdHNsaW50OmRpc2FibGU6Y29tcG9uZW50LXNlbGVjdG9yICAqL1xuXG5pbXBvcnQgeyBMb2dTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vLi4vLi4vc2VydmljZXMvbG9nLnNlcnZpY2UnO1xuaW1wb3J0IHsgVGh1bWJuYWlsU2VydmljZSB9IGZyb20gJy4uLy4uLy4uLy4uL3NlcnZpY2VzL3RodW1ibmFpbC5zZXJ2aWNlJztcbmltcG9ydCB7IENvbXBvbmVudCwgRWxlbWVudFJlZiwgT25Jbml0LCBWaWV3Q2hpbGQsIFZpZXdFbmNhcHN1bGF0aW9uIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBmcm9tIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBGb3JtU2VydmljZSB9IGZyb20gJy4uLy4uLy4uL3NlcnZpY2VzL2Zvcm0uc2VydmljZSc7XG5pbXBvcnQgeyBQcm9jZXNzQ29udGVudFNlcnZpY2UgfSBmcm9tICcuLi8uLi8uLi9zZXJ2aWNlcy9wcm9jZXNzLWNvbnRlbnQuc2VydmljZSc7XG5pbXBvcnQgeyBDb250ZW50TGlua01vZGVsIH0gZnJvbSAnLi4vY29yZS9jb250ZW50LWxpbmsubW9kZWwnO1xuaW1wb3J0IHsgV2lkZ2V0Q29tcG9uZW50IH0gZnJvbSAnLi8uLi93aWRnZXQuY29tcG9uZW50JztcbmltcG9ydCB7IG1lcmdlTWFwLCBtYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAndXBsb2FkLWZvbGRlci13aWRnZXQnLFxuICAgIHRlbXBsYXRlVXJsOiAnLi91cGxvYWQtZm9sZGVyLndpZGdldC5odG1sJyxcbiAgICBzdHlsZVVybHM6IFsnLi91cGxvYWQtZm9sZGVyLndpZGdldC5zY3NzJ10sXG4gICAgaG9zdDoge1xuICAgICAgICAnKGNsaWNrKSc6ICdldmVudCgkZXZlbnQpJyxcbiAgICAgICAgJyhibHVyKSc6ICdldmVudCgkZXZlbnQpJyxcbiAgICAgICAgJyhjaGFuZ2UpJzogJ2V2ZW50KCRldmVudCknLFxuICAgICAgICAnKGZvY3VzKSc6ICdldmVudCgkZXZlbnQpJyxcbiAgICAgICAgJyhmb2N1c2luKSc6ICdldmVudCgkZXZlbnQpJyxcbiAgICAgICAgJyhmb2N1c291dCknOiAnZXZlbnQoJGV2ZW50KScsXG4gICAgICAgICcoaW5wdXQpJzogJ2V2ZW50KCRldmVudCknLFxuICAgICAgICAnKGludmFsaWQpJzogJ2V2ZW50KCRldmVudCknLFxuICAgICAgICAnKHNlbGVjdCknOiAnZXZlbnQoJGV2ZW50KSdcbiAgICB9LFxuICAgIGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLk5vbmVcbn0pXG5leHBvcnQgY2xhc3MgVXBsb2FkRm9sZGVyV2lkZ2V0Q29tcG9uZW50IGV4dGVuZHMgV2lkZ2V0Q29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcblxuICAgIGhhc0ZpbGU6IGJvb2xlYW47XG4gICAgZGlzcGxheVRleHQ6IHN0cmluZztcbiAgICBtdWx0aXBsZU9wdGlvbjogc3RyaW5nID0gJyc7XG4gICAgbWltZVR5cGVJY29uOiBzdHJpbmc7XG5cbiAgICBAVmlld0NoaWxkKCd1cGxvYWRGaWxlcycpXG4gICAgZmlsZUlucHV0OiBFbGVtZW50UmVmO1xuXG4gICAgY29uc3RydWN0b3IocHVibGljIGZvcm1TZXJ2aWNlOiBGb3JtU2VydmljZSxcbiAgICAgICAgICAgICAgICBwcml2YXRlIGxvZ1NlcnZpY2U6IExvZ1NlcnZpY2UsXG4gICAgICAgICAgICAgICAgcHJpdmF0ZSB0aHVtYm5haWxTZXJ2aWNlOiBUaHVtYm5haWxTZXJ2aWNlLFxuICAgICAgICAgICAgICAgIHB1YmxpYyBwcm9jZXNzQ29udGVudFNlcnZpY2U6IFByb2Nlc3NDb250ZW50U2VydmljZSkge1xuICAgICAgICBzdXBlcihmb3JtU2VydmljZSk7XG4gICAgfVxuXG4gICAgbmdPbkluaXQoKSB7XG4gICAgICAgIGlmICh0aGlzLmZpZWxkICYmXG4gICAgICAgICAgICB0aGlzLmZpZWxkLnZhbHVlICYmXG4gICAgICAgICAgICB0aGlzLmZpZWxkLnZhbHVlLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHRoaXMuaGFzRmlsZSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5nZXRNdWx0aXBsZUZpbGVQYXJhbSgpO1xuICAgIH1cblxuICAgIHJlbW92ZUZpbGUoZmlsZTogYW55KSB7XG4gICAgICAgIGlmICh0aGlzLmZpZWxkKSB7XG4gICAgICAgICAgICB0aGlzLnJlbW92ZUVsZW1lbnRGcm9tTGlzdChmaWxlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIG9uRmlsZUNoYW5nZWQoZXZlbnQ6IGFueSkge1xuICAgICAgICBjb25zdCBmaWxlcyA9IGV2ZW50LnRhcmdldC5maWxlcztcbiAgICAgICAgbGV0IGZpbGVzU2F2ZWQgPSBbXTtcblxuICAgICAgICBpZiAodGhpcy5maWVsZC5qc29uLnZhbHVlKSB7XG4gICAgICAgICAgICBmaWxlc1NhdmVkID0gWy4uLnRoaXMuZmllbGQuanNvbi52YWx1ZV07XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZmlsZXMgJiYgZmlsZXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgZnJvbShmaWxlcylcbiAgICAgICAgICAgICAgICAucGlwZShtZXJnZU1hcCgoZmlsZSkgPT4gdGhpcy51cGxvYWRSYXdDb250ZW50KGZpbGUpKSlcbiAgICAgICAgICAgICAgICAuc3Vic2NyaWJlKFxuICAgICAgICAgICAgICAgICAgICAocmVzKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmaWxlc1NhdmVkLnB1c2gocmVzKTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2dTZXJ2aWNlLmVycm9yKCdFcnJvciB1cGxvYWRpbmcgZmlsZS4gU2VlIGNvbnNvbGUgb3V0cHV0IGZvciBtb3JlIGRldGFpbHMuJyk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZmllbGQudmFsdWUgPSBmaWxlc1NhdmVkO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5maWVsZC5qc29uLnZhbHVlID0gZmlsZXNTYXZlZDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIHRoaXMuaGFzRmlsZSA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIHVwbG9hZFJhd0NvbnRlbnQoZmlsZSk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgICAgIHJldHVybiB0aGlzLnByb2Nlc3NDb250ZW50U2VydmljZS5jcmVhdGVUZW1wb3JhcnlSYXdSZWxhdGVkQ29udGVudChmaWxlKS5waXBlKFxuICAgICAgICAgICAgbWFwKChyZXNwb25zZTogYW55KSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5sb2dTZXJ2aWNlLmluZm8ocmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBnZXRNdWx0aXBsZUZpbGVQYXJhbSgpIHtcbiAgICAgICAgaWYgKHRoaXMuZmllbGQgJiZcbiAgICAgICAgICAgIHRoaXMuZmllbGQucGFyYW1zICYmXG4gICAgICAgICAgICB0aGlzLmZpZWxkLnBhcmFtcy5tdWx0aXBsZSkge1xuICAgICAgICAgICAgdGhpcy5tdWx0aXBsZU9wdGlvbiA9IHRoaXMuZmllbGQucGFyYW1zLm11bHRpcGxlID8gJ211bHRpcGxlJyA6ICcnO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSByZW1vdmVFbGVtZW50RnJvbUxpc3QoZmlsZSkge1xuICAgICAgICBjb25zdCBpbmRleCA9IHRoaXMuZmllbGQudmFsdWUuaW5kZXhPZihmaWxlKTtcblxuICAgICAgICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgICAgICAgICB0aGlzLmZpZWxkLnZhbHVlLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgICAgICB0aGlzLmZpZWxkLmpzb24udmFsdWUgPSB0aGlzLmZpZWxkLnZhbHVlO1xuICAgICAgICAgICAgdGhpcy5maWVsZC51cGRhdGVGb3JtKCk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmhhc0ZpbGUgPSB0aGlzLmZpZWxkLnZhbHVlLmxlbmd0aCA+IDA7XG5cbiAgICAgICAgdGhpcy5yZXNldEZvcm1WYWx1ZVdpdGhOb0ZpbGVzKCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSByZXNldEZvcm1WYWx1ZVdpdGhOb0ZpbGVzKCkge1xuICAgICAgICBpZiAodGhpcy5maWVsZC52YWx1ZS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHRoaXMuZmllbGQudmFsdWUgPSBbXTtcbiAgICAgICAgICAgIHRoaXMuZmllbGQuanNvbi52YWx1ZSA9IFtdO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZ2V0SWNvbihtaW1lVHlwZSkge1xuICAgICAgICByZXR1cm4gdGhpcy50aHVtYm5haWxTZXJ2aWNlLmdldE1pbWVUeXBlSWNvbihtaW1lVHlwZSk7XG4gICAgfVxuXG4gICAgZmlsZUNsaWNrZWQoY29udGVudExpbmtNb2RlbDogYW55KTogdm9pZCB7XG4gICAgICAgIGNvbnN0IGZpbGUgPSBuZXcgQ29udGVudExpbmtNb2RlbChjb250ZW50TGlua01vZGVsKTtcbiAgICAgICAgbGV0IGZldGNoID0gdGhpcy5wcm9jZXNzQ29udGVudFNlcnZpY2UuZ2V0Q29udGVudFByZXZpZXcoZmlsZS5pZCk7XG4gICAgICAgIGlmIChmaWxlLmlzVHlwZUltYWdlKCkgfHwgZmlsZS5pc1R5cGVQZGYoKSkge1xuICAgICAgICAgICAgZmV0Y2ggPSB0aGlzLnByb2Nlc3NDb250ZW50U2VydmljZS5nZXRGaWxlUmF3Q29udGVudChmaWxlLmlkKTtcbiAgICAgICAgfVxuICAgICAgICBmZXRjaC5zdWJzY3JpYmUoXG4gICAgICAgICAgICAoYmxvYjogQmxvYikgPT4ge1xuICAgICAgICAgICAgICAgIGZpbGUuY29udGVudEJsb2IgPSBibG9iO1xuICAgICAgICAgICAgICAgIHRoaXMuZm9ybVNlcnZpY2UuZm9ybUNvbnRlbnRDbGlja2VkLm5leHQoZmlsZSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMubG9nU2VydmljZS5lcnJvcignVW5hYmxlIHRvIHNlbmQgZXZlbnQgZm9yIGZpbGUgJyArIGZpbGUubmFtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgfVxufVxuIl19