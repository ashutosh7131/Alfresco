/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { ContentService } from '../../../../services/content.service';
import { LogService } from '../../../../services/log.service';
import { Component, EventEmitter, Input, Output, ViewEncapsulation } from '@angular/core';
import { ProcessContentService } from '../../../services/process-content.service';
import { ContentLinkModel } from '../core/content-link.model';
import { FormService } from './../../../services/form.service';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './../../../services/form.service';
import * as ɵngcc2 from '../../../../services/log.service';
import * as ɵngcc3 from '../../../../services/content.service';
import * as ɵngcc4 from '../../../services/process-content.service';
import * as ɵngcc5 from '@angular/common';
import * as ɵngcc6 from '@angular/material/card';
import * as ɵngcc7 from '@angular/material/button';
import * as ɵngcc8 from '@angular/material/icon';
import * as ɵngcc9 from '@ngx-translate/core';

function ContentWidgetComponent_mat_card_0_mat_card_content_1_div_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div");
    ɵngcc0.ɵɵelement(1, "img", 7);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate("alt", ctx_r2.content.name);
    ɵngcc0.ɵɵproperty("src", ctx_r2.content.thumbnailUrl, ɵngcc0.ɵɵsanitizeUrl);
} }
function ContentWidgetComponent_mat_card_0_mat_card_content_1_div_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div");
    ɵngcc0.ɵɵelementStart(1, "mat-icon");
    ɵngcc0.ɵɵtext(2, "image");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(3, "div", 8);
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵpipe(5, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵtextInterpolate1("", ɵngcc0.ɵɵpipeBind1(5, 1, "FORM.PREVIEW.IMAGE_NOT_AVAILABLE"), " ");
} }
function ContentWidgetComponent_mat_card_0_mat_card_content_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-card-content");
    ɵngcc0.ɵɵtemplate(1, ContentWidgetComponent_mat_card_0_mat_card_content_1_div_1_Template, 2, 2, "div", 2);
    ɵngcc0.ɵɵtemplate(2, ContentWidgetComponent_mat_card_0_mat_card_content_1_div_2_Template, 6, 3, "div", 2);
    ɵngcc0.ɵɵelementStart(3, "div", 6);
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵpipe(5, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r1.content.isThumbnailSupported());
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r1.content.isThumbnailSupported());
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(5, 3, ctx_r1.content.name));
} }
function ContentWidgetComponent_mat_card_0_Template(rf, ctx) { if (rf & 1) {
    const _r5 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "mat-card", 1);
    ɵngcc0.ɵɵtemplate(1, ContentWidgetComponent_mat_card_0_mat_card_content_1_Template, 6, 5, "mat-card-content", 2);
    ɵngcc0.ɵɵelementStart(2, "mat-card-actions");
    ɵngcc0.ɵɵelementStart(3, "button", 3);
    ɵngcc0.ɵɵlistener("click", function ContentWidgetComponent_mat_card_0_Template_button_click_3_listener() { ɵngcc0.ɵɵrestoreView(_r5); const ctx_r4 = ɵngcc0.ɵɵnextContext(); return ctx_r4.openViewer(ctx_r4.content); });
    ɵngcc0.ɵɵelementStart(4, "mat-icon", 4);
    ɵngcc0.ɵɵtext(5, "zoom_in");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(6, "button", 5);
    ɵngcc0.ɵɵlistener("click", function ContentWidgetComponent_mat_card_0_Template_button_click_6_listener() { ɵngcc0.ɵɵrestoreView(_r5); const ctx_r6 = ɵngcc0.ɵɵnextContext(); return ctx_r6.download(ctx_r6.content); });
    ɵngcc0.ɵɵelementStart(7, "mat-icon", 4);
    ɵngcc0.ɵɵtext(8, "file_download");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.showDocumentContent);
} }
export class ContentWidgetComponent {
    constructor(formService, logService, contentService, processContentService) {
        this.formService = formService;
        this.logService = logService;
        this.contentService = contentService;
        this.processContentService = processContentService;
        this.showDocumentContent = true;
        this.contentClick = new EventEmitter();
        this.thumbnailLoaded = new EventEmitter();
        this.contentLoaded = new EventEmitter();
        this.error = new EventEmitter();
    }
    ngOnChanges(changes) {
        const contentId = changes['id'];
        if (contentId && contentId.currentValue) {
            this.loadContent(contentId.currentValue);
        }
    }
    loadContent(id) {
        this.processContentService
            .getFileContent(id)
            .subscribe((response) => {
            this.content = new ContentLinkModel(response);
            this.contentLoaded.emit(this.content);
            this.loadThumbnailUrl(this.content);
        }, (error) => {
            this.error.emit(error);
        });
    }
    loadThumbnailUrl(content) {
        if (this.content.isThumbnailSupported()) {
            let observable;
            if (this.content.isTypeImage()) {
                observable = this.processContentService.getFileRawContent(content.id);
            }
            else {
                observable = this.processContentService.getContentThumbnail(content.id);
            }
            if (observable) {
                observable.subscribe((response) => {
                    this.content.thumbnailUrl = this.contentService.createTrustedUrl(response);
                    this.thumbnailLoaded.emit(this.content.thumbnailUrl);
                }, (error) => {
                    this.error.emit(error);
                });
            }
        }
    }
    openViewer(content) {
        let fetch = this.processContentService.getContentPreview(content.id);
        if (content.isTypeImage() || content.isTypePdf()) {
            fetch = this.processContentService.getFileRawContent(content.id);
        }
        fetch.subscribe((blob) => {
            content.contentBlob = blob;
            this.contentClick.emit(content);
            this.logService.info('Content clicked' + content.id);
            this.formService.formContentClicked.next(content);
        }, (error) => {
            this.error.emit(error);
        });
    }
    download(content) {
        this.processContentService.getFileRawContent(content.id).subscribe((blob) => this.contentService.downloadBlob(blob, content.name), (error) => {
            this.error.emit(error);
        });
    }
}
ContentWidgetComponent.ɵfac = function ContentWidgetComponent_Factory(t) { return new (t || ContentWidgetComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FormService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.LogService), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.ContentService), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.ProcessContentService)); };
ContentWidgetComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ContentWidgetComponent, selectors: [["adf-content"]], inputs: { showDocumentContent: "showDocumentContent", id: "id" }, outputs: { contentClick: "contentClick", thumbnailLoaded: "thumbnailLoaded", contentLoaded: "contentLoaded", error: "error" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 1, vars: 1, consts: [["class", "adf-content-container", 4, "ngIf"], [1, "adf-content-container"], [4, "ngIf"], ["mat-icon-button", "", "id", "view", 3, "click"], [1, "mat-24"], ["mat-icon-button", "", "id", "download", 3, "click"], [1, "mdl-card__supporting-text", "upload-widget__content-text"], ["id", "thumbnailPreview", 1, "adf-img-upload-widget", 3, "src", "alt"], ["id", "unsupported-thumbnail", 1, "adf-content-widget-preview-text"]], template: function ContentWidgetComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, ContentWidgetComponent_mat_card_0_Template, 9, 1, "mat-card", 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngIf", ctx.content);
    } }, directives: [ɵngcc5.NgIf, ɵngcc6.MatCard, ɵngcc6.MatCardActions, ɵngcc7.MatButton, ɵngcc8.MatIcon, ɵngcc6.MatCardContent], pipes: [ɵngcc9.TranslatePipe], styles: [".adf-img-upload-widget{background-color:#fff;border:1px solid hsla(0,0%,45.9%,.57);box-shadow:1px 1px 2px #ddd;height:100%;width:100%}.adf-content-widget-preview-text{text-align:center;word-break:break-all;word-wrap:break-word}"], encapsulation: 2 });
ContentWidgetComponent.ctorParameters = () => [
    { type: FormService },
    { type: LogService },
    { type: ContentService },
    { type: ProcessContentService }
];
ContentWidgetComponent.propDecorators = {
    id: [{ type: Input }],
    showDocumentContent: [{ type: Input }],
    contentClick: [{ type: Output }],
    thumbnailLoaded: [{ type: Output }],
    contentLoaded: [{ type: Output }],
    error: [{ type: Output }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ContentWidgetComponent, [{
        type: Component,
        args: [{
                selector: 'adf-content',
                template: "<mat-card class=\"adf-content-container\" *ngIf=\"content\">\n    <mat-card-content *ngIf=\"showDocumentContent\">\n        <div *ngIf=\"content.isThumbnailSupported()\" >\n            <img id=\"thumbnailPreview\" class=\"adf-img-upload-widget\" [src]=\"content.thumbnailUrl\" alt=\"{{content.name}}\">\n        </div>\n        <div *ngIf=\"!content.isThumbnailSupported()\">\n            <mat-icon>image</mat-icon>\n            <div id=\"unsupported-thumbnail\" class=\"adf-content-widget-preview-text\">{{ 'FORM.PREVIEW.IMAGE_NOT_AVAILABLE' | translate }}\n            </div>\n        </div>\n        <div class=\"mdl-card__supporting-text upload-widget__content-text\">{{content.name | translate }}</div>\n    </mat-card-content>\n\n    <mat-card-actions>\n        <button mat-icon-button id=\"view\" (click)=\"openViewer(content)\">\n            <mat-icon class=\"mat-24\">zoom_in</mat-icon>\n        </button>\n        <button mat-icon-button id=\"download\" (click)=\"download(content)\">\n            <mat-icon class=\"mat-24\">file_download</mat-icon>\n        </button>\n    </mat-card-actions>\n</mat-card>\n",
                encapsulation: ViewEncapsulation.None,
                styles: [".adf-img-upload-widget{background-color:#fff;border:1px solid hsla(0,0%,45.9%,.57);box-shadow:1px 1px 2px #ddd;height:100%;width:100%}.adf-content-widget-preview-text{text-align:center;word-break:break-all;word-wrap:break-word}"]
            }]
    }], function () { return [{ type: ɵngcc1.FormService }, { type: ɵngcc2.LogService }, { type: ɵngcc3.ContentService }, { type: ɵngcc4.ProcessContentService }]; }, { showDocumentContent: [{
            type: Input
        }], contentClick: [{
            type: Output
        }], thumbnailLoaded: [{
            type: Output
        }], contentLoaded: [{
            type: Output
        }], error: [{
            type: Output
        }], id: [{
            type: Input
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,