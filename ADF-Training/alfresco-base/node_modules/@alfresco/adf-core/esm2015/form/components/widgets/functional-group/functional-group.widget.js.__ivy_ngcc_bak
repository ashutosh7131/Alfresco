/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, ElementRef, ViewEncapsulation } from '@angular/core';
import { FormService } from '../../../services/form.service';
import { WidgetComponent } from './../widget.component';
import { catchError, debounceTime, filter, switchMap, tap } from 'rxjs/operators';
import { merge, of } from 'rxjs';
import { FormControl } from '@angular/forms';
export class FunctionalGroupWidgetComponent extends WidgetComponent {
    constructor(formService, elementRef) {
        super(formService);
        this.formService = formService;
        this.elementRef = elementRef;
        this.minTermLength = 1;
        this.searchTerm = new FormControl();
        this.groups$ = merge(this.searchTerm.valueChanges).pipe(tap((search) => {
            const isValid = typeof search !== 'string';
            const empty = search === '';
            this.updateOption(isValid ? search : null);
            this.validateGroup(isValid, empty);
        }), filter((group) => typeof group === 'string' && group.length >= this.minTermLength), debounceTime(300), switchMap((searchTerm) => this.formService.getWorkflowGroups(searchTerm, this.groupId)
            .pipe(catchError(() => of([])))));
    }
    ngOnInit() {
        var _a;
        if (this.field) {
            if (this.field.readOnly) {
                this.searchTerm.disable();
            }
            const params = this.field.params;
            if (params && params.restrictWithGroup) {
                const restrictWithGroup = params.restrictWithGroup;
                this.groupId = restrictWithGroup.id;
            }
            if ((_a = this.field.value) === null || _a === void 0 ? void 0 : _a.name) {
                this.searchTerm.setValue(this.field.value.name);
            }
        }
    }
    updateOption(option) {
        if (option) {
            this.field.value = option;
        }
        else {
            this.field.value = null;
        }
        this.field.updateForm();
    }
    validateGroup(valid, empty) {
        const isEmpty = !this.field.required && (empty || valid);
        const hasValue = this.field.required && valid;
        if (hasValue || isEmpty) {
            this.field.validationSummary.message = '';
            this.field.validate();
            this.field.form.validateForm();
        }
        else {
            this.field.validationSummary.message = 'FORM.FIELD.VALIDATOR.INVALID_VALUE';
            this.field.markAsInvalid();
            this.field.form.markAsInvalid();
        }
    }
    getDisplayName(model) {
        if (model) {
            return typeof model === 'string' ? model : model.name;
        }
        return '';
    }
}
FunctionalGroupWidgetComponent.decorators = [
    { type: Component, args: [{
                selector: 'functional-group-widget',
                template: "<div class=\"adf-group-widget {{field.className}}\"\n     [class.is-dirty]=\"!!field.value\"\n     [class.adf-invalid]=\"!field.isValid\"\n     [class.adf-readonly]=\"field.readOnly\"\n     id=\"functional-group-div\">\n\n    <mat-form-field>\n        <label class=\"adf-label\" [attr.for]=\"field.id\">{{field.name | translate }}<span *ngIf=\"isRequired()\">*</span></label>\n        <input matInput\n               class=\"adf-input\"\n               type=\"text\"\n               data-automation-id=\"adf-group-search-input\"\n               [id]=\"field.id\"\n               [formControl]=\"searchTerm\"\n               [placeholder]=\"field.placeholder\"\n               [matAutocomplete]=\"auto\">\n        <mat-autocomplete #auto=\"matAutocomplete\" (optionSelected)=\"updateOption($event.option.value)\" [displayWith]=\"getDisplayName\">\n            <mat-option *ngFor=\"let item of groups$ | async; let i = index\"\n                        id=\"adf-group-widget-user-{{i}}\"\n                       [id]=\"field.id +'-'+item.id\"\n                       [value]=\"item\">\n                <span id=\"adf-group-label-name\">{{item.name}}</span>\n            </mat-option>\n        </mat-autocomplete>\n\n    </mat-form-field>\n    <error-widget [error]=\"field.validationSummary\"></error-widget>\n    <error-widget *ngIf=\"isInvalidFieldRequired()\" required=\"{{ 'FORM.FIELD.REQUIRED' | translate }}\"></error-widget>\n</div>\n",
                host: {
                    '(click)': 'event($event)',
                    '(blur)': 'event($event)',
                    '(change)': 'event($event)',
                    '(focus)': 'event($event)',
                    '(focusin)': 'event($event)',
                    '(focusout)': 'event($event)',
                    '(input)': 'event($event)',
                    '(invalid)': 'event($event)',
                    '(select)': 'event($event)'
                },
                encapsulation: ViewEncapsulation.None,
                styles: [".adf-group-widget{width:100%}"]
            },] }
];
FunctionalGroupWidgetComponent.ctorParameters = () => [
    { type: FormService },
    { type: ElementRef }
];
//# sourceMappingURL=data:application/json;base64,