/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { UserPreferencesService, UserPreferenceValues } from '../../../../../../services/user-preferences.service';
import { MomentDateAdapter } from '../../../../../../utils/moment-date-adapter';
import { MOMENT_DATE_FORMATS } from '../../../../../../utils/moment-date-formats.model';
import { Component, Input } from '@angular/core';
import { DateAdapter, MAT_DATE_FORMATS } from '@angular/material/core';
import moment from 'moment-es6';
import { DynamicTableModel } from './../../dynamic-table.widget.model';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/material/core';
import * as ɵngcc2 from '../../../../../../services/user-preferences.service';
import * as ɵngcc3 from '@angular/material/form-field';
import * as ɵngcc4 from '@angular/material/input';
import * as ɵngcc5 from '@angular/material/datepicker';
import * as ɵngcc6 from '@angular/common';

function DateEditorComponent_mat_datepicker_toggle_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "mat-datepicker-toggle", 5);
} if (rf & 2) {
    ɵngcc0.ɵɵnextContext();
    const _r1 = ɵngcc0.ɵɵreference(7);
    ɵngcc0.ɵɵproperty("for", _r1);
} }
const ɵ0 = MOMENT_DATE_FORMATS;
export class DateEditorComponent {
    constructor(dateAdapter, userPreferencesService) {
        this.dateAdapter = dateAdapter;
        this.userPreferencesService = userPreferencesService;
        this.DATE_FORMAT = 'DD-MM-YYYY';
        this.onDestroy$ = new Subject();
    }
    ngOnInit() {
        this.userPreferencesService
            .select(UserPreferenceValues.Locale)
            .pipe(takeUntil(this.onDestroy$))
            .subscribe(locale => this.dateAdapter.setLocale(locale));
        const momentDateAdapter = this.dateAdapter;
        momentDateAdapter.overrideDisplayFormat = this.DATE_FORMAT;
        this.value = moment(this.table.getCellValue(this.row, this.column), this.DATE_FORMAT);
    }
    ngOnDestroy() {
        this.onDestroy$.next(true);
        this.onDestroy$.complete();
    }
    onDateChanged(newDateValue) {
        if (newDateValue && newDateValue.value) {
            const momentDate = moment(newDateValue.value, this.DATE_FORMAT, true);
            if (!momentDate.isValid()) {
                this.row.value[this.column.id] = newDateValue.value;
            }
            else {
                this.row.value[this.column.id] = `${momentDate.format('YYYY-MM-DD')}T00:00:00.000Z`;
                this.table.flushValue();
            }
        }
        else {
            this.row.value[this.column.id] = '';
        }
    }
}
DateEditorComponent.ɵfac = function DateEditorComponent_Factory(t) { return new (t || DateEditorComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DateAdapter), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.UserPreferencesService)); };
DateEditorComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: DateEditorComponent, selectors: [["adf-date-editor"]], inputs: { table: "table", row: "row", column: "column" }, features: [ɵngcc0.ɵɵProvidersFeature([
            { provide: DateAdapter, useClass: MomentDateAdapter },
            { provide: MAT_DATE_FORMATS, useValue: ɵ0 }
        ])], decls: 8, vars: 10, consts: [[1, "adf-date-editor"], ["matInput", "", "id", "dateInput", "type", "text", 3, "matDatepicker", "value", "id", "required", "disabled", "focusout", "dateChange"], ["matSuffix", "", "class", "adf-date-editor-button", 3, "for", 4, "ngIf"], [3, "touchUi"], ["datePicker", ""], ["matSuffix", "", 1, "adf-date-editor-button", 3, "for"]], template: function DateEditorComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div");
        ɵngcc0.ɵɵelementStart(1, "mat-form-field", 0);
        ɵngcc0.ɵɵelementStart(2, "label");
        ɵngcc0.ɵɵtext(3);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(4, "input", 1);
        ɵngcc0.ɵɵlistener("focusout", function DateEditorComponent_Template_input_focusout_4_listener($event) { return ctx.onDateChanged($event.srcElement); })("dateChange", function DateEditorComponent_Template_input_dateChange_4_listener($event) { return ctx.onDateChanged($event); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(5, DateEditorComponent_mat_datepicker_toggle_5_Template, 1, 1, "mat-datepicker-toggle", 2);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(6, "mat-datepicker", 3, 4);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        const _r1 = ɵngcc0.ɵɵreference(7);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵattribute("for", ctx.column.id);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate2("", ctx.column.name, " (", ctx.DATE_FORMAT, ")");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("matDatepicker", _r1)("value", ctx.value)("id", ctx.column.id)("required", ctx.column.required)("disabled", !ctx.column.editable);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.column.editable);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("touchUi", true);
    } }, directives: [ɵngcc3.MatFormField, ɵngcc4.MatInput, ɵngcc5.MatDatepickerInput, ɵngcc6.NgIf, ɵngcc5.MatDatepicker, ɵngcc5.MatDatepickerToggle, ɵngcc3.MatSuffix], styles: [".adf-date-editor[_ngcontent-%COMP%]{width:100%}.adf-date-editor-button[_ngcontent-%COMP%]{position:relative;top:25px}"] });
DateEditorComponent.ctorParameters = () => [
    { type: DateAdapter },
    { type: UserPreferencesService }
];
DateEditorComponent.propDecorators = {
    table: [{ type: Input }],
    row: [{ type: Input }],
    column: [{ type: Input }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DateEditorComponent, [{
        type: Component,
        args: [{
                selector: 'adf-date-editor',
                template: "<div>\n    <mat-form-field class=\"adf-date-editor\">\n        <label [attr.for]=\"column.id\">{{column.name}} ({{DATE_FORMAT}})</label>\n        <input matInput\n            id=\"dateInput\"\n            type=\"text\"\n            [matDatepicker]=\"datePicker\"\n            [value]=\"value\"\n            [id]=\"column.id\"\n            [required]=\"column.required\"\n            [disabled]=\"!column.editable\"\n            (focusout)=\"onDateChanged($any($event).srcElement)\"\n            (dateChange)=\"onDateChanged($event)\">\n        <mat-datepicker-toggle  *ngIf=\"column.editable\" matSuffix [for]=\"datePicker\" class=\"adf-date-editor-button\" ></mat-datepicker-toggle>\n    </mat-form-field>\n    <mat-datepicker #datePicker [touchUi]=\"true\"></mat-datepicker>\n</div>\n",
                providers: [
                    { provide: DateAdapter, useClass: MomentDateAdapter },
                    { provide: MAT_DATE_FORMATS, useValue: ɵ0 }
                ],
                styles: [".adf-date-editor{width:100%}.adf-date-editor-button{position:relative;top:25px}"]
            }]
    }], function () { return [{ type: ɵngcc1.DateAdapter }, { type: ɵngcc2.UserPreferencesService }]; }, { table: [{
            type: Input
        }], row: [{
            type: Input
        }], column: [{
            type: Input
        }] }); })();
export { ɵ0 };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,