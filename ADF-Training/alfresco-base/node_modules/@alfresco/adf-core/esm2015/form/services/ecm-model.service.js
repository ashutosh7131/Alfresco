import { LogService } from '../../services/log.service';
import { AlfrescoApiService } from '../../services/alfresco-api.service';
import { Injectable } from '@angular/core';
import { Observable, from } from 'rxjs';
import { map, catchError } from 'rxjs/operators';
import { CustomModelApi } from '@alfresco/js-api';
import * as i0 from "@angular/core";
import * as i1 from "../../services/alfresco-api.service";
import * as i2 from "../../services/log.service";
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../../services/alfresco-api.service';
import * as ɵngcc2 from '../../services/log.service';
export class EcmModelService {
    constructor(apiService, logService) {
        this.apiService = apiService;
        this.logService = logService;
    }
    get customModelApi() {
        var _a;
        this._customModelApi = (_a = this._customModelApi) !== null && _a !== void 0 ? _a : new CustomModelApi(this.apiService.getInstance());
        return this._customModelApi;
    }
    createEcmTypeForActivitiForm(formName, form) {
        return new Observable((observer) => {
            this.searchActivitiEcmModel().subscribe((model) => {
                if (!model) {
                    this.createActivitiEcmModel(formName, form).subscribe((typeForm) => {
                        observer.next(typeForm);
                        observer.complete();
                    });
                }
                else {
                    this.saveFomType(formName, form).subscribe((typeForm) => {
                        observer.next(typeForm);
                        observer.complete();
                    });
                }
            }, (err) => this.handleError(err));
        });
    }
    searchActivitiEcmModel() {
        return this.getEcmModels().pipe(map(function (ecmModels) {
            return ecmModels.list.entries.find((model) => model.entry.name === EcmModelService.MODEL_NAME);
        }));
    }
    createActivitiEcmModel(formName, form) {
        return new Observable((observer) => {
            this.createEcmModel(EcmModelService.MODEL_NAME, EcmModelService.MODEL_NAMESPACE).subscribe((model) => {
                this.logService.info('model created', model);
                this.activeEcmModel(EcmModelService.MODEL_NAME).subscribe((modelActive) => {
                    this.logService.info('model active', modelActive);
                    this.createEcmTypeWithProperties(formName, form).subscribe((typeCreated) => {
                        observer.next(typeCreated);
                        observer.complete();
                    });
                }, (err) => this.handleError(err));
            }, (err) => this.handleError(err));
        });
    }
    saveFomType(formName, form) {
        return new Observable((observer) => {
            this.searchEcmType(formName, EcmModelService.MODEL_NAME).subscribe((ecmType) => {
                this.logService.info('custom types', ecmType);
                if (!ecmType) {
                    this.createEcmTypeWithProperties(formName, form).subscribe((typeCreated) => {
                        observer.next(typeCreated);
                        observer.complete();
                    });
                }
                else {
                    observer.next(ecmType);
                    observer.complete();
                }
            }, (err) => this.handleError(err));
        });
    }
    createEcmTypeWithProperties(formName, form) {
        return new Observable((observer) => {
            this.createEcmType(formName, EcmModelService.MODEL_NAME, EcmModelService.TYPE_MODEL).subscribe((typeCreated) => {
                this.logService.info('type Created', typeCreated);
                this.addPropertyToAType(EcmModelService.MODEL_NAME, formName, form).subscribe((propertyAdded) => {
                    this.logService.info('property Added', propertyAdded);
                    observer.next(typeCreated);
                    observer.complete();
                }, (err) => this.handleError(err));
            }, (err) => this.handleError(err));
        });
    }
    searchEcmType(typeName, modelName) {
        return this.getEcmType(modelName).pipe(map(function (customTypes) {
            return customTypes.list.entries.find((type) => type.entry.prefixedName === typeName || type.entry.title === typeName);
        }));
    }
    activeEcmModel(modelName) {
        return from(this.customModelApi.activateCustomModel(modelName))
            .pipe(map(this.toJson), catchError((err) => this.handleError(err)));
    }
    createEcmModel(modelName, nameSpace) {
        return from(this.customModelApi.createCustomModel('DRAFT', '', modelName, modelName, nameSpace))
            .pipe(map(this.toJson), catchError((err) => this.handleError(err)));
    }
    getEcmModels() {
        return from(this.customModelApi.getAllCustomModel())
            .pipe(map(this.toJson), catchError((err) => this.handleError(err)));
    }
    getEcmType(modelName) {
        return from(this.customModelApi.getAllCustomType(modelName))
            .pipe(map(this.toJson), catchError((err) => this.handleError(err)));
    }
    createEcmType(typeName, modelName, parentType) {
        const name = this.cleanNameType(typeName);
        return from(this.customModelApi.createCustomType(modelName, name, parentType, typeName, ''))
            .pipe(map(this.toJson), catchError((err) => this.handleError(err)));
    }
    addPropertyToAType(modelName, typeName, formFields) {
        const name = this.cleanNameType(typeName);
        const properties = [];
        if (formFields && formFields.values) {
            for (const key in formFields.values) {
                if (key) {
                    properties.push({
                        name: key,
                        title: key,
                        description: key,
                        dataType: 'd:text',
                        multiValued: false,
                        mandatory: false,
                        mandatoryEnforced: false
                    });
                }
            }
        }
        return from(this.customModelApi.addPropertyToType(modelName, name, properties))
            .pipe(map(this.toJson), catchError((err) => this.handleError(err)));
    }
    cleanNameType(name) {
        let cleanName = name;
        if (name.indexOf(':') !== -1) {
            cleanName = name.split(':')[1];
        }
        return cleanName.replace(/[^a-zA-Z ]/g, '');
    }
    toJson(res) {
        if (res) {
            return res || {};
        }
        return {};
    }
    handleError(err) {
        this.logService.error(err);
    }
}
EcmModelService.ɵfac = function EcmModelService_Factory(t) { return new (t || EcmModelService)(ɵngcc0.ɵɵinject(ɵngcc1.AlfrescoApiService), ɵngcc0.ɵɵinject(ɵngcc2.LogService)); };
EcmModelService.MODEL_NAMESPACE = 'activitiForms';
EcmModelService.MODEL_NAME = 'activitiFormsModel';
EcmModelService.TYPE_MODEL = 'cm:folder';
EcmModelService.ɵprov = i0.ɵɵdefineInjectable({ factory: function EcmModelService_Factory() { return new EcmModelService(i0.ɵɵinject(i1.AlfrescoApiService), i0.ɵɵinject(i2.LogService)); }, token: EcmModelService, providedIn: "root" });
EcmModelService.ctorParameters = () => [
    { type: AlfrescoApiService },
    { type: LogService }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(EcmModelService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc1.AlfrescoApiService }, { type: ɵngcc2.LogService }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,