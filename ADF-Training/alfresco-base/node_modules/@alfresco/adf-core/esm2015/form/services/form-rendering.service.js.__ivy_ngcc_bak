import { DynamicComponentMapper, DynamicComponentResolver } from '../../services/dynamic-component-mapper.service';
import { Injectable } from '@angular/core';
import * as widgets from './../components/widgets/index';
import * as i0 from "@angular/core";
export class FormRenderingService extends DynamicComponentMapper {
    constructor() {
        super(...arguments);
        this.defaultValue = widgets.UnknownWidgetComponent;
        this.types = {
            'text': DynamicComponentResolver.fromType(widgets.TextWidgetComponent),
            'string': DynamicComponentResolver.fromType(widgets.TextWidgetComponent),
            'integer': DynamicComponentResolver.fromType(widgets.NumberWidgetComponent),
            'multi-line-text': DynamicComponentResolver.fromType(widgets.MultilineTextWidgetComponentComponent),
            'boolean': DynamicComponentResolver.fromType(widgets.CheckboxWidgetComponent),
            'dropdown': DynamicComponentResolver.fromType(widgets.DropdownWidgetComponent),
            'date': DynamicComponentResolver.fromType(widgets.DateWidgetComponent),
            'amount': DynamicComponentResolver.fromType(widgets.AmountWidgetComponent),
            'radio-buttons': DynamicComponentResolver.fromType(widgets.RadioButtonsWidgetComponent),
            'hyperlink': DynamicComponentResolver.fromType(widgets.HyperlinkWidgetComponent),
            'readonly-text': DynamicComponentResolver.fromType(widgets.DisplayTextWidgetComponent),
            'json': DynamicComponentResolver.fromType(widgets.JsonWidgetComponent),
            'readonly': DynamicComponentResolver.fromType(widgets.TextWidgetComponent),
            'typeahead': DynamicComponentResolver.fromType(widgets.TypeaheadWidgetComponent),
            'people': DynamicComponentResolver.fromType(widgets.PeopleWidgetComponent),
            'functional-group': DynamicComponentResolver.fromType(widgets.FunctionalGroupWidgetComponent),
            'dynamic-table': DynamicComponentResolver.fromType(widgets.DynamicTableWidgetComponent),
            'container': DynamicComponentResolver.fromType(widgets.ContainerWidgetComponent),
            'group': DynamicComponentResolver.fromType(widgets.ContainerWidgetComponent),
            'document': DynamicComponentResolver.fromType(widgets.DocumentWidgetComponent),
            'upload': DynamicComponentResolver.fromType(widgets.UploadWidgetComponent),
            'datetime': DynamicComponentResolver.fromType(widgets.DateTimeWidgetComponent),
            'file-viewer': DynamicComponentResolver.fromType(widgets.FileViewerWidgetComponent)
        };
    }
}
FormRenderingService.ɵprov = i0.ɵɵdefineInjectable({ factory: function FormRenderingService_Factory() { return new FormRenderingService(); }, token: FormRenderingService, providedIn: "root" });
FormRenderingService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybS1yZW5kZXJpbmcuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIvaG9tZS90cmF2aXMvYnVpbGQvQWxmcmVzY28vYWxmcmVzY28tbmcyLWNvbXBvbmVudHMvbGliL2NvcmUvIiwic291cmNlcyI6WyJmb3JtL3NlcnZpY2VzL2Zvcm0tcmVuZGVyaW5nLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBaUJBLE9BQU8sRUFBRSxzQkFBc0IsRUFBbUMsd0JBQXdCLEVBQUUsTUFBTSxpREFBaUQsQ0FBQztBQUNwSixPQUFPLEVBQUUsVUFBVSxFQUFRLE1BQU0sZUFBZSxDQUFDO0FBQ2pELE9BQU8sS0FBSyxPQUFPLE1BQU0sK0JBQStCLENBQUM7O0FBS3pELE1BQU0sT0FBTyxvQkFBcUIsU0FBUSxzQkFBc0I7SUFIaEU7O1FBS2MsaUJBQVksR0FBYSxPQUFPLENBQUMsc0JBQXNCLENBQUM7UUFDeEQsVUFBSyxHQUF1RDtZQUNsRSxNQUFNLEVBQUUsd0JBQXdCLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQztZQUN0RSxRQUFRLEVBQUUsd0JBQXdCLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQztZQUN4RSxTQUFTLEVBQUUsd0JBQXdCLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxxQkFBcUIsQ0FBQztZQUMzRSxpQkFBaUIsRUFBRSx3QkFBd0IsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLHFDQUFxQyxDQUFDO1lBQ25HLFNBQVMsRUFBRSx3QkFBd0IsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLHVCQUF1QixDQUFDO1lBQzdFLFVBQVUsRUFBRSx3QkFBd0IsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLHVCQUF1QixDQUFDO1lBQzlFLE1BQU0sRUFBRSx3QkFBd0IsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLG1CQUFtQixDQUFDO1lBQ3RFLFFBQVEsRUFBRSx3QkFBd0IsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLHFCQUFxQixDQUFDO1lBQzFFLGVBQWUsRUFBRSx3QkFBd0IsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLDJCQUEyQixDQUFDO1lBQ3ZGLFdBQVcsRUFBRSx3QkFBd0IsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLHdCQUF3QixDQUFDO1lBQ2hGLGVBQWUsRUFBRSx3QkFBd0IsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLDBCQUEwQixDQUFDO1lBQ3RGLE1BQU0sRUFBRSx3QkFBd0IsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLG1CQUFtQixDQUFDO1lBQ3RFLFVBQVUsRUFBRSx3QkFBd0IsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLG1CQUFtQixDQUFDO1lBQzFFLFdBQVcsRUFBRSx3QkFBd0IsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLHdCQUF3QixDQUFDO1lBQ2hGLFFBQVEsRUFBRSx3QkFBd0IsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLHFCQUFxQixDQUFDO1lBQzFFLGtCQUFrQixFQUFFLHdCQUF3QixDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsOEJBQThCLENBQUM7WUFDN0YsZUFBZSxFQUFFLHdCQUF3QixDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsMkJBQTJCLENBQUM7WUFDdkYsV0FBVyxFQUFFLHdCQUF3QixDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsd0JBQXdCLENBQUM7WUFDaEYsT0FBTyxFQUFFLHdCQUF3QixDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsd0JBQXdCLENBQUM7WUFDNUUsVUFBVSxFQUFFLHdCQUF3QixDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsdUJBQXVCLENBQUM7WUFDOUUsUUFBUSxFQUFHLHdCQUF3QixDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMscUJBQXFCLENBQUM7WUFDM0UsVUFBVSxFQUFHLHdCQUF3QixDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsdUJBQXVCLENBQUM7WUFDL0UsYUFBYSxFQUFFLHdCQUF3QixDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMseUJBQXlCLENBQUM7U0FDdEYsQ0FBQztLQUNMOzs7O1lBL0JBLFVBQVUsU0FBQztnQkFDUixVQUFVLEVBQUUsTUFBTTthQUNyQiIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IER5bmFtaWNDb21wb25lbnRNYXBwZXIsIER5bmFtaWNDb21wb25lbnRSZXNvbHZlRnVuY3Rpb24sIER5bmFtaWNDb21wb25lbnRSZXNvbHZlciB9IGZyb20gJy4uLy4uL3NlcnZpY2VzL2R5bmFtaWMtY29tcG9uZW50LW1hcHBlci5zZXJ2aWNlJztcbmltcG9ydCB7IEluamVjdGFibGUsIFR5cGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCAqIGFzIHdpZGdldHMgZnJvbSAnLi8uLi9jb21wb25lbnRzL3dpZGdldHMvaW5kZXgnO1xuXG5ASW5qZWN0YWJsZSh7XG4gICAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIEZvcm1SZW5kZXJpbmdTZXJ2aWNlIGV4dGVuZHMgRHluYW1pY0NvbXBvbmVudE1hcHBlciB7XG5cbiAgICBwcm90ZWN0ZWQgZGVmYXVsdFZhbHVlOiBUeXBlPHt9PiA9IHdpZGdldHMuVW5rbm93bldpZGdldENvbXBvbmVudDtcbiAgICBwcm90ZWN0ZWQgdHlwZXM6IHsgW2tleTogc3RyaW5nXTogRHluYW1pY0NvbXBvbmVudFJlc29sdmVGdW5jdGlvbiB9ID0ge1xuICAgICAgICAndGV4dCc6IER5bmFtaWNDb21wb25lbnRSZXNvbHZlci5mcm9tVHlwZSh3aWRnZXRzLlRleHRXaWRnZXRDb21wb25lbnQpLFxuICAgICAgICAnc3RyaW5nJzogRHluYW1pY0NvbXBvbmVudFJlc29sdmVyLmZyb21UeXBlKHdpZGdldHMuVGV4dFdpZGdldENvbXBvbmVudCksXG4gICAgICAgICdpbnRlZ2VyJzogRHluYW1pY0NvbXBvbmVudFJlc29sdmVyLmZyb21UeXBlKHdpZGdldHMuTnVtYmVyV2lkZ2V0Q29tcG9uZW50KSxcbiAgICAgICAgJ211bHRpLWxpbmUtdGV4dCc6IER5bmFtaWNDb21wb25lbnRSZXNvbHZlci5mcm9tVHlwZSh3aWRnZXRzLk11bHRpbGluZVRleHRXaWRnZXRDb21wb25lbnRDb21wb25lbnQpLFxuICAgICAgICAnYm9vbGVhbic6IER5bmFtaWNDb21wb25lbnRSZXNvbHZlci5mcm9tVHlwZSh3aWRnZXRzLkNoZWNrYm94V2lkZ2V0Q29tcG9uZW50KSxcbiAgICAgICAgJ2Ryb3Bkb3duJzogRHluYW1pY0NvbXBvbmVudFJlc29sdmVyLmZyb21UeXBlKHdpZGdldHMuRHJvcGRvd25XaWRnZXRDb21wb25lbnQpLFxuICAgICAgICAnZGF0ZSc6IER5bmFtaWNDb21wb25lbnRSZXNvbHZlci5mcm9tVHlwZSh3aWRnZXRzLkRhdGVXaWRnZXRDb21wb25lbnQpLFxuICAgICAgICAnYW1vdW50JzogRHluYW1pY0NvbXBvbmVudFJlc29sdmVyLmZyb21UeXBlKHdpZGdldHMuQW1vdW50V2lkZ2V0Q29tcG9uZW50KSxcbiAgICAgICAgJ3JhZGlvLWJ1dHRvbnMnOiBEeW5hbWljQ29tcG9uZW50UmVzb2x2ZXIuZnJvbVR5cGUod2lkZ2V0cy5SYWRpb0J1dHRvbnNXaWRnZXRDb21wb25lbnQpLFxuICAgICAgICAnaHlwZXJsaW5rJzogRHluYW1pY0NvbXBvbmVudFJlc29sdmVyLmZyb21UeXBlKHdpZGdldHMuSHlwZXJsaW5rV2lkZ2V0Q29tcG9uZW50KSxcbiAgICAgICAgJ3JlYWRvbmx5LXRleHQnOiBEeW5hbWljQ29tcG9uZW50UmVzb2x2ZXIuZnJvbVR5cGUod2lkZ2V0cy5EaXNwbGF5VGV4dFdpZGdldENvbXBvbmVudCksXG4gICAgICAgICdqc29uJzogRHluYW1pY0NvbXBvbmVudFJlc29sdmVyLmZyb21UeXBlKHdpZGdldHMuSnNvbldpZGdldENvbXBvbmVudCksXG4gICAgICAgICdyZWFkb25seSc6IER5bmFtaWNDb21wb25lbnRSZXNvbHZlci5mcm9tVHlwZSh3aWRnZXRzLlRleHRXaWRnZXRDb21wb25lbnQpLFxuICAgICAgICAndHlwZWFoZWFkJzogRHluYW1pY0NvbXBvbmVudFJlc29sdmVyLmZyb21UeXBlKHdpZGdldHMuVHlwZWFoZWFkV2lkZ2V0Q29tcG9uZW50KSxcbiAgICAgICAgJ3Blb3BsZSc6IER5bmFtaWNDb21wb25lbnRSZXNvbHZlci5mcm9tVHlwZSh3aWRnZXRzLlBlb3BsZVdpZGdldENvbXBvbmVudCksXG4gICAgICAgICdmdW5jdGlvbmFsLWdyb3VwJzogRHluYW1pY0NvbXBvbmVudFJlc29sdmVyLmZyb21UeXBlKHdpZGdldHMuRnVuY3Rpb25hbEdyb3VwV2lkZ2V0Q29tcG9uZW50KSxcbiAgICAgICAgJ2R5bmFtaWMtdGFibGUnOiBEeW5hbWljQ29tcG9uZW50UmVzb2x2ZXIuZnJvbVR5cGUod2lkZ2V0cy5EeW5hbWljVGFibGVXaWRnZXRDb21wb25lbnQpLFxuICAgICAgICAnY29udGFpbmVyJzogRHluYW1pY0NvbXBvbmVudFJlc29sdmVyLmZyb21UeXBlKHdpZGdldHMuQ29udGFpbmVyV2lkZ2V0Q29tcG9uZW50KSxcbiAgICAgICAgJ2dyb3VwJzogRHluYW1pY0NvbXBvbmVudFJlc29sdmVyLmZyb21UeXBlKHdpZGdldHMuQ29udGFpbmVyV2lkZ2V0Q29tcG9uZW50KSxcbiAgICAgICAgJ2RvY3VtZW50JzogRHluYW1pY0NvbXBvbmVudFJlc29sdmVyLmZyb21UeXBlKHdpZGdldHMuRG9jdW1lbnRXaWRnZXRDb21wb25lbnQpLFxuICAgICAgICAndXBsb2FkJzogIER5bmFtaWNDb21wb25lbnRSZXNvbHZlci5mcm9tVHlwZSh3aWRnZXRzLlVwbG9hZFdpZGdldENvbXBvbmVudCksXG4gICAgICAgICdkYXRldGltZSc6ICBEeW5hbWljQ29tcG9uZW50UmVzb2x2ZXIuZnJvbVR5cGUod2lkZ2V0cy5EYXRlVGltZVdpZGdldENvbXBvbmVudCksXG4gICAgICAgICdmaWxlLXZpZXdlcic6IER5bmFtaWNDb21wb25lbnRSZXNvbHZlci5mcm9tVHlwZSh3aWRnZXRzLkZpbGVWaWV3ZXJXaWRnZXRDb21wb25lbnQpXG4gICAgfTtcbn1cbiJdfQ==