import { AlfrescoApiService } from '../../services/alfresco-api.service';
import { LogService } from '../../services/log.service';
import { Injectable } from '@angular/core';
import { Observable, Subject, from, of, throwError } from 'rxjs';
import { FormDefinitionModel } from '../models/form-definition.model';
import { FormModel, FormOutcomeModel } from './../components/widgets/core/index';
import { EcmModelService } from './ecm-model.service';
import { map, catchError, switchMap, combineAll, defaultIfEmpty } from 'rxjs/operators';
import { ModelsApi, ProcessInstanceVariablesApi, TasksApi, TaskFormsApi, ProcessInstancesApi, FormModelsApi, ProcessDefinitionsApi, UsersApi, ActivitiGroupsApi } from '@alfresco/js-api';
import * as i0 from "@angular/core";
import * as i1 from "./ecm-model.service";
import * as i2 from "../../services/alfresco-api.service";
import * as i3 from "../../services/log.service";
export class FormService {
    constructor(ecmModelService, apiService, logService) {
        this.ecmModelService = ecmModelService;
        this.apiService = apiService;
        this.logService = logService;
        this.formLoaded = new Subject();
        this.formDataRefreshed = new Subject();
        this.formFieldValueChanged = new Subject();
        this.formEvents = new Subject();
        this.taskCompleted = new Subject();
        this.taskCompletedError = new Subject();
        this.taskSaved = new Subject();
        this.taskSavedError = new Subject();
        this.formContentClicked = new Subject();
        this.validateForm = new Subject();
        this.validateFormField = new Subject();
        this.validateDynamicTableRow = new Subject();
        this.executeOutcome = new Subject();
        this.updateFormValuesRequested = new Subject();
    }
    get taskFormsApi() {
        var _a;
        this._taskFormsApi = (_a = this._taskFormsApi) !== null && _a !== void 0 ? _a : new TaskFormsApi(this.apiService.getInstance());
        return this._taskFormsApi;
    }
    get taskApi() {
        var _a;
        this._taskApi = (_a = this._taskApi) !== null && _a !== void 0 ? _a : new TasksApi(this.apiService.getInstance());
        return this._taskApi;
    }
    get modelsApi() {
        var _a;
        this._modelsApi = (_a = this._modelsApi) !== null && _a !== void 0 ? _a : new ModelsApi(this.apiService.getInstance());
        return this._modelsApi;
    }
    get editorApi() {
        var _a;
        this._editorApi = (_a = this._editorApi) !== null && _a !== void 0 ? _a : new FormModelsApi(this.apiService.getInstance());
        return this._editorApi;
    }
    get processDefinitionsApi() {
        var _a;
        this._processDefinitionsApi = (_a = this._processDefinitionsApi) !== null && _a !== void 0 ? _a : new ProcessDefinitionsApi(this.apiService.getInstance());
        return this._processDefinitionsApi;
    }
    get processInstanceVariablesApi() {
        var _a;
        this._processInstanceVariablesApi = (_a = this._processInstanceVariablesApi) !== null && _a !== void 0 ? _a : new ProcessInstanceVariablesApi(this.apiService.getInstance());
        return this._processInstanceVariablesApi;
    }
    get processInstancesApi() {
        var _a;
        this._processInstancesApi = (_a = this._processInstancesApi) !== null && _a !== void 0 ? _a : new ProcessInstancesApi(this.apiService.getInstance());
        return this._processInstancesApi;
    }
    get groupsApi() {
        var _a;
        this._groupsApi = (_a = this._groupsApi) !== null && _a !== void 0 ? _a : new ActivitiGroupsApi(this.apiService.getInstance());
        return this._groupsApi;
    }
    get usersApi() {
        var _a;
        this._usersApi = (_a = this._usersApi) !== null && _a !== void 0 ? _a : new UsersApi(this.apiService.getInstance());
        return this._usersApi;
    }
    parseForm(json, data, readOnly = false, fixedSpace) {
        if (json) {
            const form = new FormModel(json, data, readOnly, this, fixedSpace);
            if (!json.fields) {
                form.outcomes = [
                    new FormOutcomeModel(form, {
                        id: '$save',
                        name: FormOutcomeModel.SAVE_ACTION,
                        isSystem: true
                    })
                ];
            }
            return form;
        }
        return null;
    }
    createFormFromANode(formName) {
        return new Observable((observer) => {
            this.createForm(formName).subscribe((form) => {
                this.ecmModelService.searchEcmType(formName, EcmModelService.MODEL_NAME).subscribe((customType) => {
                    const formDefinitionModel = new FormDefinitionModel(form.id, form.name, form.lastUpdatedByFullName, form.lastUpdated, customType.entry.properties);
                    from(this.editorApi.saveForm(form.id, formDefinitionModel)).subscribe((formData) => {
                        observer.next(formData);
                        observer.complete();
                    }, (err) => this.handleError(err));
                }, (err) => this.handleError(err));
            }, (err) => this.handleError(err));
        });
    }
    createForm(formName) {
        const dataModel = {
            name: formName,
            description: '',
            modelType: 2,
            stencilSet: 0
        };
        return from(this.modelsApi.createModel(dataModel));
    }
    saveForm(formId, formModel) {
        return from(this.editorApi.saveForm(formId, formModel));
    }
    searchFrom(name) {
        const opts = {
            'modelType': 2
        };
        return from(this.modelsApi.getModels(opts))
            .pipe(map(function (forms) {
            return forms.data.find((formData) => formData.name === name);
        }), catchError((err) => this.handleError(err)));
    }
    getForms() {
        const opts = {
            'modelType': 2
        };
        return from(this.modelsApi.getModels(opts))
            .pipe(map(this.toJsonArray), catchError((err) => this.handleError(err)));
    }
    getProcessDefinitions() {
        return from(this.processDefinitionsApi.getProcessDefinitions({}))
            .pipe(map(this.toJsonArray), catchError((err) => this.handleError(err)));
    }
    getProcessVariablesById(processInstanceId) {
        return from(this.processInstanceVariablesApi.getProcessInstanceVariables(processInstanceId))
            .pipe(map(this.toJson), catchError((err) => this.handleError(err)));
    }
    getTasks() {
        return from(this.taskApi.listTasks({}))
            .pipe(map(this.toJsonArray), catchError((err) => this.handleError(err)));
    }
    getTask(taskId) {
        return from(this.taskApi.getTask(taskId))
            .pipe(map(this.toJson), catchError((err) => this.handleError(err)));
    }
    saveTaskForm(taskId, formValues) {
        const saveFormRepresentation = { values: formValues };
        return from(this.taskFormsApi.saveTaskForm(taskId, saveFormRepresentation))
            .pipe(catchError((err) => this.handleError(err)));
    }
    completeTaskForm(taskId, formValues, outcome) {
        const completeFormRepresentation = { values: formValues };
        if (outcome) {
            completeFormRepresentation.outcome = outcome;
        }
        return from(this.taskFormsApi.completeTaskForm(taskId, completeFormRepresentation))
            .pipe(catchError((err) => this.handleError(err)));
    }
    getTaskForm(taskId) {
        return from(this.taskFormsApi.getTaskForm(taskId))
            .pipe(map(this.toJson), catchError((err) => this.handleError(err)));
    }
    getFormDefinitionById(formId) {
        return from(this.editorApi.getForm(formId))
            .pipe(map(this.toJson), catchError((err) => this.handleError(err)));
    }
    getFormDefinitionByName(name) {
        const opts = {
            'filter': 'myReusableForms',
            'filterText': name,
            'modelType': 2
        };
        return from(this.modelsApi.getModels(opts))
            .pipe(map(this.getFormId), catchError((err) => this.handleError(err)));
    }
    getStartFormInstance(processId) {
        return from(this.processInstancesApi.getProcessInstanceStartForm(processId))
            .pipe(map(this.toJson), catchError((err) => this.handleError(err)));
    }
    getProcessInstance(processId) {
        return from(this.processInstancesApi.getProcessInstance(processId))
            .pipe(map(this.toJson), catchError((err) => this.handleError(err)));
    }
    getStartFormDefinition(processId) {
        return from(this.processDefinitionsApi.getProcessDefinitionStartForm(processId))
            .pipe(map(this.toJson), catchError((err) => this.handleError(err)));
    }
    getRestFieldValues(taskId, field) {
        return from(this.taskFormsApi.getRestFieldValues(taskId, field))
            .pipe(catchError((err) => this.handleError(err)));
    }
    getRestFieldValuesByProcessId(processDefinitionId, field) {
        return from(this.processDefinitionsApi.getRestFieldValues(processDefinitionId, field))
            .pipe(catchError((err) => this.handleError(err)));
    }
    getRestFieldValuesColumnByProcessId(processDefinitionId, field, column) {
        return from(this.processDefinitionsApi.getRestTableFieldValues(processDefinitionId, field, column))
            .pipe(catchError((err) => this.handleError(err)));
    }
    getRestFieldValuesColumn(taskId, field, column) {
        return from(this.taskFormsApi.getRestFieldColumnValues(taskId, field, column))
            .pipe(catchError((err) => this.handleError(err)));
    }
    getUserProfileImageApi(userId) {
        return this.usersApi.getUserProfilePictureUrl(userId);
    }
    getWorkflowUsers(filter, groupId) {
        const option = { filter: filter };
        if (groupId) {
            option.groupId = groupId;
        }
        return from(this.usersApi.getUsers(option))
            .pipe(switchMap(response => response.data || []), map((user) => {
            user.userImage = this.getUserProfileImageApi(user.id.toString());
            return of(user);
        }), combineAll(), defaultIfEmpty([]), catchError((err) => this.handleError(err)));
    }
    getWorkflowGroups(filter, groupId) {
        const option = { filter: filter };
        if (groupId) {
            option.groupId = groupId;
        }
        return from(this.groupsApi.getGroups(option))
            .pipe(map((response) => response.data || []), catchError((err) => this.handleError(err)));
    }
    getFormId(form) {
        let result = null;
        if (form && form.data && form.data.length > 0) {
            result = form.data[0].id;
        }
        return result;
    }
    toJson(res) {
        if (res) {
            return res || {};
        }
        return {};
    }
    toJsonArray(res) {
        if (res) {
            return res.data || [];
        }
        return [];
    }
    handleError(error) {
        let errMsg = FormService.UNKNOWN_ERROR_MESSAGE;
        if (error) {
            errMsg = (error.message) ? error.message :
                error.status ? `${error.status} - ${error.statusText}` : FormService.GENERIC_ERROR_MESSAGE;
        }
        this.logService.error(errMsg);
        return throwError(errMsg);
    }
}
FormService.UNKNOWN_ERROR_MESSAGE = 'Unknown error';
FormService.GENERIC_ERROR_MESSAGE = 'Server error';
FormService.ɵprov = i0.ɵɵdefineInjectable({ factory: function FormService_Factory() { return new FormService(i0.ɵɵinject(i1.EcmModelService), i0.ɵɵinject(i2.AlfrescoApiService), i0.ɵɵinject(i3.LogService)); }, token: FormService, providedIn: "root" });
FormService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
FormService.ctorParameters = () => [
    { type: EcmModelService },
    { type: AlfrescoApiService },
    { type: LogService }
];
//# sourceMappingURL=data:application/json;base64,