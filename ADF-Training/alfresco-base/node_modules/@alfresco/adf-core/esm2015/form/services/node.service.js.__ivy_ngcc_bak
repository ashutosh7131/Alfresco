import { Injectable } from '@angular/core';
import { NodesApiService } from '../../services/nodes-api.service';
import * as i0 from "@angular/core";
import * as i1 from "../../services/nodes-api.service";
export class NodeService {
    constructor(nodesApiService) {
        this.nodesApiService = nodesApiService;
    }
    getNodeMetadata(nodeId) {
        return this.nodesApiService.getNodeMetadata(nodeId);
    }
    createNodeMetadata(nodeType, nameSpace, data, path, name) {
        return this.nodesApiService.createNodeMetadata(nodeType, nameSpace, data, path, name);
    }
    createNode(name, nodeType, properties, path) {
        return this.nodesApiService.createNodeInsideRoot(name, nodeType, properties, path);
    }
}
NodeService.ɵprov = i0.ɵɵdefineInjectable({ factory: function NodeService_Factory() { return new NodeService(i0.ɵɵinject(i1.NodesApiService)); }, token: NodeService, providedIn: "root" });
NodeService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
NodeService.ctorParameters = () => [
    { type: NodesApiService }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9kZS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Ii9ob21lL3RyYXZpcy9idWlsZC9BbGZyZXNjby9hbGZyZXNjby1uZzItY29tcG9uZW50cy9saWIvY29yZS8iLCJzb3VyY2VzIjpbImZvcm0vc2VydmljZXMvbm9kZS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWlCQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBSTNDLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQzs7O0FBUW5FLE1BQU0sT0FBTyxXQUFXO0lBRXBCLFlBQW9CLGVBQWdDO1FBQWhDLG9CQUFlLEdBQWYsZUFBZSxDQUFpQjtJQUFHLENBQUM7SUFRakQsZUFBZSxDQUFDLE1BQWM7UUFDakMsT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDLGVBQWUsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUN4RCxDQUFDO0lBWU0sa0JBQWtCLENBQUMsUUFBZ0IsRUFBRSxTQUFjLEVBQUUsSUFBUyxFQUFFLElBQVksRUFBRSxJQUFhO1FBQzlGLE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQyxrQkFBa0IsQ0FBQyxRQUFRLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDMUYsQ0FBQztJQVdNLFVBQVUsQ0FBQyxJQUFZLEVBQUUsUUFBZ0IsRUFBRSxVQUFlLEVBQUUsSUFBWTtRQUMzRSxPQUFPLElBQUksQ0FBQyxlQUFlLENBQUMsb0JBQW9CLENBQUMsSUFBSSxFQUFFLFFBQVEsRUFBRSxVQUFVLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDdkYsQ0FBQzs7OztZQTdDSixVQUFVLFNBQUM7Z0JBQ1IsVUFBVSxFQUFFLE1BQU07YUFDckI7OztZQUpRLGVBQWUiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBOb2RlRW50cnkgfSBmcm9tICdAYWxmcmVzY28vanMtYXBpJztcbmltcG9ydCB7IE5vZGVNZXRhZGF0YSB9IGZyb20gJy4uLy4uL21vZGVscy9ub2RlLW1ldGFkYXRhLm1vZGVsJztcbmltcG9ydCB7IE5vZGVzQXBpU2VydmljZSB9IGZyb20gJy4uLy4uL3NlcnZpY2VzL25vZGVzLWFwaS5zZXJ2aWNlJztcblxuQEluamVjdGFibGUoe1xuICAgIHByb3ZpZGVkSW46ICdyb290J1xufSlcbi8qKlxuICogQGRlcHJlY2F0ZWQgaW4gMy44LjAsIHVzZSBOb2Rlc0FwaVNlcnZpY2UgaW5zdGVhZC5cbiAqL1xuZXhwb3J0IGNsYXNzIE5vZGVTZXJ2aWNlIHtcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgbm9kZXNBcGlTZXJ2aWNlOiBOb2Rlc0FwaVNlcnZpY2UpIHt9XG5cbiAgICAvKipcbiAgICAgKiBAZGVwcmVjYXRlZCBpbiAzLjguMCwgdXNlIE5vZGVzQXBpU2VydmljZSBpbnN0ZWFkLlxuICAgICAqIEdldCB0aGUgbWV0YWRhdGEgYW5kIHRoZSBub2RlVHlwZSBmb3IgYSBub2RlSWQgY2xlYW5lZCBieSB0aGUgcHJlZml4LlxuICAgICAqIEBwYXJhbSBub2RlSWQgSUQgb2YgdGhlIHRhcmdldCBub2RlXG4gICAgICogQHJldHVybnMgTm9kZSBtZXRhZGF0YVxuICAgICAqL1xuICAgIHB1YmxpYyBnZXROb2RlTWV0YWRhdGEobm9kZUlkOiBzdHJpbmcpOiBPYnNlcnZhYmxlPE5vZGVNZXRhZGF0YT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5ub2Rlc0FwaVNlcnZpY2UuZ2V0Tm9kZU1ldGFkYXRhKG5vZGVJZCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQGRlcHJlY2F0ZWQgaW4gMy44LjAsIHVzZSBOb2Rlc0FwaVNlcnZpY2UgaW5zdGVhZC5cbiAgICAgKiBDcmVhdGUgYSBuZXcgTm9kZSBmcm9tIGZvcm0gbWV0YWRhdGEuXG4gICAgICogQHBhcmFtIHBhdGggUGF0aCB0byB0aGUgbm9kZVxuICAgICAqIEBwYXJhbSBub2RlVHlwZSBOb2RlIHR5cGVcbiAgICAgKiBAcGFyYW0gbmFtZSBOb2RlIG5hbWVcbiAgICAgKiBAcGFyYW0gbmFtZVNwYWNlIE5hbWVzcGFjZSBmb3IgcHJvcGVydGllc1xuICAgICAqIEBwYXJhbSBkYXRhIFByb3BlcnR5IGRhdGEgdG8gc3RvcmUgaW4gdGhlIG5vZGUgdW5kZXIgbmFtZXNwYWNlXG4gICAgICogQHJldHVybnMgVGhlIGNyZWF0ZWQgbm9kZVxuICAgICAqL1xuICAgIHB1YmxpYyBjcmVhdGVOb2RlTWV0YWRhdGEobm9kZVR5cGU6IHN0cmluZywgbmFtZVNwYWNlOiBhbnksIGRhdGE6IGFueSwgcGF0aDogc3RyaW5nLCBuYW1lPzogc3RyaW5nKTogT2JzZXJ2YWJsZTxOb2RlRW50cnk+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMubm9kZXNBcGlTZXJ2aWNlLmNyZWF0ZU5vZGVNZXRhZGF0YShub2RlVHlwZSwgbmFtZVNwYWNlLCBkYXRhLCBwYXRoLCBuYW1lKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAZGVwcmVjYXRlZCBpbiAzLjguMCwgdXNlIGBjcmVhdGVOb2RlSW5zaWRlUm9vdGAgbWV0aG9kIGZyb20gTm9kZXNBcGlTZXJ2aWNlIGluc3RlYWQuXG4gICAgICogQ3JlYXRlIGEgbmV3IE5vZGUgZnJvbSBmb3JtIG1ldGFkYXRhXG4gICAgICogQHBhcmFtIG5hbWUgTm9kZSBuYW1lXG4gICAgICogQHBhcmFtIG5vZGVUeXBlIE5vZGUgdHlwZVxuICAgICAqIEBwYXJhbSBwcm9wZXJ0aWVzIE5vZGUgYm9keSBwcm9wZXJ0aWVzXG4gICAgICogQHBhcmFtIHBhdGggUGF0aCB0byB0aGUgbm9kZVxuICAgICAqIEByZXR1cm5zIFRoZSBjcmVhdGVkIG5vZGVcbiAgICAgKi9cbiAgICBwdWJsaWMgY3JlYXRlTm9kZShuYW1lOiBzdHJpbmcsIG5vZGVUeXBlOiBzdHJpbmcsIHByb3BlcnRpZXM6IGFueSwgcGF0aDogc3RyaW5nKTogT2JzZXJ2YWJsZTxOb2RlRW50cnk+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMubm9kZXNBcGlTZXJ2aWNlLmNyZWF0ZU5vZGVJbnNpZGVSb290KG5hbWUsIG5vZGVUeXBlLCBwcm9wZXJ0aWVzLCBwYXRoKTtcbiAgICB9XG59XG4iXX0=