/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Directive, ElementRef, Input, Renderer2 } from '@angular/core';
import { HighlightTransformService } from '../services/highlight-transform.service';
export class HighlightDirective {
    constructor(el, renderer, highlightTransformService) {
        this.el = el;
        this.renderer = renderer;
        this.highlightTransformService = highlightTransformService;
        this.selector = '';
        this.search = '';
        this.classToApply = 'adf-highlight';
    }
    ngAfterViewChecked() {
        this.highlight();
    }
    highlight(search = this.search, selector = this.selector, classToApply = this.classToApply) {
        if (search && selector) {
            const elements = this.el.nativeElement.querySelectorAll(selector);
            elements.forEach((element) => {
                const highlightTransformResult = this.highlightTransformService.highlight(element.innerHTML, search, classToApply);
                if (highlightTransformResult.changed) {
                    this.renderer.setProperty(element, 'innerHTML', highlightTransformResult.text);
                }
            });
        }
    }
}
HighlightDirective.decorators = [
    { type: Directive, args: [{
                selector: '[adf-highlight]'
            },] }
];
HighlightDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 },
    { type: HighlightTransformService }
];
HighlightDirective.propDecorators = {
    selector: [{ type: Input, args: ['adf-highlight-selector',] }],
    search: [{ type: Input, args: ['adf-highlight',] }],
    classToApply: [{ type: Input, args: ['adf-highlight-class',] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGlnaGxpZ2h0LmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIvaG9tZS90cmF2aXMvYnVpbGQvQWxmcmVzY28vYWxmcmVzY28tbmcyLWNvbXBvbmVudHMvbGliL2NvcmUvIiwic291cmNlcyI6WyJkaXJlY3RpdmVzL2hpZ2hsaWdodC5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7OztHQWVHO0FBSUgsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBb0IsTUFBTSxlQUFlLENBQUM7QUFDMUYsT0FBTyxFQUFFLHlCQUF5QixFQUE0QixNQUFNLHlDQUF5QyxDQUFDO0FBSzlHLE1BQU0sT0FBTyxrQkFBa0I7SUFjM0IsWUFDWSxFQUFjLEVBQ2QsUUFBbUIsRUFDbkIseUJBQW9EO1FBRnBELE9BQUUsR0FBRixFQUFFLENBQVk7UUFDZCxhQUFRLEdBQVIsUUFBUSxDQUFXO1FBQ25CLDhCQUF5QixHQUF6Qix5QkFBeUIsQ0FBMkI7UUFiaEUsYUFBUSxHQUFXLEVBQUUsQ0FBQztRQUl0QixXQUFNLEdBQVcsRUFBRSxDQUFDO1FBSXBCLGlCQUFZLEdBQVcsZUFBZSxDQUFDO0lBTXZDLENBQUM7SUFFRCxrQkFBa0I7UUFDZCxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUM7SUFDckIsQ0FBQztJQUVNLFNBQVMsQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxRQUFRLEdBQUcsSUFBSSxDQUFDLFFBQVEsRUFBRSxZQUFZLEdBQUcsSUFBSSxDQUFDLFlBQVk7UUFDN0YsSUFBSSxNQUFNLElBQUksUUFBUSxFQUFFO1lBQ3BCLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLGdCQUFnQixDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBRWxFLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxPQUFPLEVBQUUsRUFBRTtnQkFDekIsTUFBTSx3QkFBd0IsR0FBNkIsSUFBSSxDQUFDLHlCQUF5QixDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsU0FBUyxFQUFFLE1BQU0sRUFBRSxZQUFZLENBQUMsQ0FBQztnQkFDN0ksSUFBSSx3QkFBd0IsQ0FBQyxPQUFPLEVBQUU7b0JBQ2xDLElBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLE9BQU8sRUFBRSxXQUFXLEVBQUUsd0JBQXdCLENBQUMsSUFBSSxDQUFDLENBQUM7aUJBQ2xGO1lBQ0wsQ0FBQyxDQUFDLENBQUM7U0FDTjtJQUNMLENBQUM7OztZQXRDSixTQUFTLFNBQUM7Z0JBQ1AsUUFBUSxFQUFFLGlCQUFpQjthQUM5Qjs7O1lBTG1CLFVBQVU7WUFBUyxTQUFTO1lBQ3ZDLHlCQUF5Qjs7O3VCQVE3QixLQUFLLFNBQUMsd0JBQXdCO3FCQUk5QixLQUFLLFNBQUMsZUFBZTsyQkFJckIsS0FBSyxTQUFDLHFCQUFxQiIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbi8qIHRzbGludDpkaXNhYmxlOm5vLWlucHV0LXJlbmFtZSAgKi9cblxuaW1wb3J0IHsgRGlyZWN0aXZlLCBFbGVtZW50UmVmLCBJbnB1dCwgUmVuZGVyZXIyLCBBZnRlclZpZXdDaGVja2VkIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBIaWdobGlnaHRUcmFuc2Zvcm1TZXJ2aWNlLCBIaWdobGlnaHRUcmFuc2Zvcm1SZXN1bHQgfSBmcm9tICcuLi9zZXJ2aWNlcy9oaWdobGlnaHQtdHJhbnNmb3JtLnNlcnZpY2UnO1xuXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ1thZGYtaGlnaGxpZ2h0XSdcbn0pXG5leHBvcnQgY2xhc3MgSGlnaGxpZ2h0RGlyZWN0aXZlIGltcGxlbWVudHMgQWZ0ZXJWaWV3Q2hlY2tlZCB7XG5cbiAgICAvKiogQ2xhc3Mgc2VsZWN0b3IgZm9yIGhpZ2hsaWdodGFibGUgZWxlbWVudHMuICovXG4gICAgQElucHV0KCdhZGYtaGlnaGxpZ2h0LXNlbGVjdG9yJylcbiAgICBzZWxlY3Rvcjogc3RyaW5nID0gJyc7XG5cbiAgICAvKiogVGV4dCB0byBoaWdobGlnaHQuICovXG4gICAgQElucHV0KCdhZGYtaGlnaGxpZ2h0JylcbiAgICBzZWFyY2g6IHN0cmluZyA9ICcnO1xuXG4gICAgLyoqIENTUyBjbGFzcyB1c2VkIHRvIGFwcGx5IGhpZ2hsaWdodGluZy4gKi9cbiAgICBASW5wdXQoJ2FkZi1oaWdobGlnaHQtY2xhc3MnKVxuICAgIGNsYXNzVG9BcHBseTogc3RyaW5nID0gJ2FkZi1oaWdobGlnaHQnO1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHByaXZhdGUgZWw6IEVsZW1lbnRSZWYsXG4gICAgICAgIHByaXZhdGUgcmVuZGVyZXI6IFJlbmRlcmVyMixcbiAgICAgICAgcHJpdmF0ZSBoaWdobGlnaHRUcmFuc2Zvcm1TZXJ2aWNlOiBIaWdobGlnaHRUcmFuc2Zvcm1TZXJ2aWNlKSB7XG4gICAgfVxuXG4gICAgbmdBZnRlclZpZXdDaGVja2VkKCkge1xuICAgICAgICB0aGlzLmhpZ2hsaWdodCgpO1xuICAgIH1cblxuICAgIHB1YmxpYyBoaWdobGlnaHQoc2VhcmNoID0gdGhpcy5zZWFyY2gsIHNlbGVjdG9yID0gdGhpcy5zZWxlY3RvciwgY2xhc3NUb0FwcGx5ID0gdGhpcy5jbGFzc1RvQXBwbHkpIHtcbiAgICAgICAgaWYgKHNlYXJjaCAmJiBzZWxlY3Rvcikge1xuICAgICAgICAgICAgY29uc3QgZWxlbWVudHMgPSB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQucXVlcnlTZWxlY3RvckFsbChzZWxlY3Rvcik7XG5cbiAgICAgICAgICAgIGVsZW1lbnRzLmZvckVhY2goKGVsZW1lbnQpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBoaWdobGlnaHRUcmFuc2Zvcm1SZXN1bHQ6IEhpZ2hsaWdodFRyYW5zZm9ybVJlc3VsdCA9IHRoaXMuaGlnaGxpZ2h0VHJhbnNmb3JtU2VydmljZS5oaWdobGlnaHQoZWxlbWVudC5pbm5lckhUTUwsIHNlYXJjaCwgY2xhc3NUb0FwcGx5KTtcbiAgICAgICAgICAgICAgICBpZiAoaGlnaGxpZ2h0VHJhbnNmb3JtUmVzdWx0LmNoYW5nZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZW5kZXJlci5zZXRQcm9wZXJ0eShlbGVtZW50LCAnaW5uZXJIVE1MJywgaGlnaGxpZ2h0VHJhbnNmb3JtUmVzdWx0LnRleHQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxufVxuIl19