/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Directive, Input, ViewContainerRef, TemplateRef } from '@angular/core';
import { VersionCompatibilityService } from '../services/version-compatibility.service';
import { take } from 'rxjs/operators';
export class VersionCompatibilityDirective {
    constructor(templateRef, viewContainer, versionCompatibilityService) {
        this.templateRef = templateRef;
        this.viewContainer = viewContainer;
        this.versionCompatibilityService = versionCompatibilityService;
    }
    set version(requiredVersion) {
        this.validateAcsVersion(requiredVersion);
    }
    validateAcsVersion(requiredVersion) {
        this.versionCompatibilityService.acsVersionInitialized$.pipe(take(1)).subscribe(() => {
            this.viewContainer.clear();
            if (requiredVersion && this.versionCompatibilityService.isVersionSupported(requiredVersion)) {
                this.viewContainer.createEmbeddedView(this.templateRef);
            }
        });
    }
}
VersionCompatibilityDirective.decorators = [
    { type: Directive, args: [{
                selector: '[adf-acs-version]'
            },] }
];
VersionCompatibilityDirective.ctorParameters = () => [
    { type: TemplateRef },
    { type: ViewContainerRef },
    { type: VersionCompatibilityService }
];
VersionCompatibilityDirective.propDecorators = {
    version: [{ type: Input, args: ['adf-acs-version',] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmVyc2lvbi1jb21wYXRpYmlsaXR5LmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIvaG9tZS90cmF2aXMvYnVpbGQvQWxmcmVzY28vYWxmcmVzY28tbmcyLWNvbXBvbmVudHMvbGliL2NvcmUvIiwic291cmNlcyI6WyJkaXJlY3RpdmVzL3ZlcnNpb24tY29tcGF0aWJpbGl0eS5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7OztHQWVHO0FBRUgsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsZ0JBQWdCLEVBQUUsV0FBVyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ2hGLE9BQU8sRUFBRSwyQkFBMkIsRUFBRSxNQUFNLDJDQUEyQyxDQUFDO0FBQ3hGLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUt0QyxNQUFNLE9BQU8sNkJBQTZCO0lBUXRDLFlBQ1ksV0FBNkIsRUFDN0IsYUFBK0IsRUFDL0IsMkJBQXdEO1FBRnhELGdCQUFXLEdBQVgsV0FBVyxDQUFrQjtRQUM3QixrQkFBYSxHQUFiLGFBQWEsQ0FBa0I7UUFDL0IsZ0NBQTJCLEdBQTNCLDJCQUEyQixDQUE2QjtJQUVwRSxDQUFDO0lBVkQsSUFDSSxPQUFPLENBQUMsZUFBdUI7UUFDL0IsSUFBSSxDQUFDLGtCQUFrQixDQUFDLGVBQWUsQ0FBQyxDQUFDO0lBQzdDLENBQUM7SUFTTyxrQkFBa0IsQ0FBQyxlQUF1QjtRQUM5QyxJQUFJLENBQUMsMkJBQTJCLENBQUMsc0JBQXNCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUU7WUFDakYsSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLEVBQUUsQ0FBQztZQUMzQixJQUFJLGVBQWUsSUFBSSxJQUFJLENBQUMsMkJBQTJCLENBQUMsa0JBQWtCLENBQUMsZUFBZSxDQUFDLEVBQUU7Z0JBQ3pGLElBQUksQ0FBQyxhQUFhLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO2FBQzNEO1FBQ0wsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDOzs7WUF6QkosU0FBUyxTQUFDO2dCQUNQLFFBQVEsRUFBRSxtQkFBbUI7YUFDaEM7OztZQU40QyxXQUFXO1lBQTdCLGdCQUFnQjtZQUNsQywyQkFBMkI7OztzQkFTL0IsS0FBSyxTQUFDLGlCQUFpQiIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IERpcmVjdGl2ZSwgSW5wdXQsIFZpZXdDb250YWluZXJSZWYsIFRlbXBsYXRlUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBWZXJzaW9uQ29tcGF0aWJpbGl0eVNlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlcy92ZXJzaW9uLWNvbXBhdGliaWxpdHkuc2VydmljZSc7XG5pbXBvcnQgeyB0YWtlIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ1thZGYtYWNzLXZlcnNpb25dJ1xufSlcbmV4cG9ydCBjbGFzcyBWZXJzaW9uQ29tcGF0aWJpbGl0eURpcmVjdGl2ZSB7XG5cbiAgICAvKiogTWluaW11bSB2ZXJzaW9uIHJlcXVpcmVkIGZvciBjb21wb25lbnQgdG8gd29yayBjb3JyZWN0bHkgLiAqL1xuICAgIEBJbnB1dCgnYWRmLWFjcy12ZXJzaW9uJylcbiAgICBzZXQgdmVyc2lvbihyZXF1aXJlZFZlcnNpb246IHN0cmluZykge1xuICAgICAgICB0aGlzLnZhbGlkYXRlQWNzVmVyc2lvbihyZXF1aXJlZFZlcnNpb24pO1xuICAgIH1cblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBwcml2YXRlIHRlbXBsYXRlUmVmOiBUZW1wbGF0ZVJlZjxhbnk+LFxuICAgICAgICBwcml2YXRlIHZpZXdDb250YWluZXI6IFZpZXdDb250YWluZXJSZWYsXG4gICAgICAgIHByaXZhdGUgdmVyc2lvbkNvbXBhdGliaWxpdHlTZXJ2aWNlOiBWZXJzaW9uQ29tcGF0aWJpbGl0eVNlcnZpY2VcbiAgICApIHtcbiAgICB9XG5cbiAgICBwcml2YXRlIHZhbGlkYXRlQWNzVmVyc2lvbihyZXF1aXJlZFZlcnNpb246IHN0cmluZykge1xuICAgICAgICB0aGlzLnZlcnNpb25Db21wYXRpYmlsaXR5U2VydmljZS5hY3NWZXJzaW9uSW5pdGlhbGl6ZWQkLnBpcGUodGFrZSgxKSkuc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMudmlld0NvbnRhaW5lci5jbGVhcigpO1xuICAgICAgICAgICAgaWYgKHJlcXVpcmVkVmVyc2lvbiAmJiB0aGlzLnZlcnNpb25Db21wYXRpYmlsaXR5U2VydmljZS5pc1ZlcnNpb25TdXBwb3J0ZWQocmVxdWlyZWRWZXJzaW9uKSkge1xuICAgICAgICAgICAgICAgIHRoaXMudmlld0NvbnRhaW5lci5jcmVhdGVFbWJlZGRlZFZpZXcodGhpcy50ZW1wbGF0ZVJlZik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbn1cbiJdfQ==