/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Directive, EventEmitter, HostListener, Input, Output } from '@angular/core';
import { TrashcanApi } from '@alfresco/js-api';
import { forkJoin, from, of } from 'rxjs';
import { AlfrescoApiService } from '../services/alfresco-api.service';
import { TranslationService } from '../services/translation.service';
import { tap, mergeMap, map, catchError } from 'rxjs/operators';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../services/alfresco-api.service';
import * as ɵngcc2 from '../services/translation.service';
export class RestoreMessageModel {
}
export class NodeRestoreDirective {
    constructor(alfrescoApiService, translation) {
        this.alfrescoApiService = alfrescoApiService;
        this.translation = translation;
        this.restore = new EventEmitter();
        this.restoreProcessStatus = this.processStatus();
    }
    get trashcanApi() {
        var _a;
        this._trashcanApi = (_a = this._trashcanApi) !== null && _a !== void 0 ? _a : new TrashcanApi(this.alfrescoApiService.getInstance());
        return this._trashcanApi;
    }
    onClick() {
        this.recover(this.selection);
    }
    recover(selection) {
        if (!selection.length) {
            return;
        }
        const nodesWithPath = this.getNodesWithPath(selection);
        if (selection.length && nodesWithPath.length) {
            this.restoreNodesBatch(nodesWithPath).pipe(tap((restoredNodes) => {
                const status = this.processStatus(restoredNodes);
                this.restoreProcessStatus.fail.push(...status.fail);
                this.restoreProcessStatus.success.push(...status.success);
            }), mergeMap(() => this.getDeletedNodes()))
                .subscribe((deletedNodesList) => {
                const { entries: nodeList } = deletedNodesList.list;
                const { fail: restoreErrorNodes } = this.restoreProcessStatus;
                const selectedNodes = this.diff(restoreErrorNodes, selection, false);
                const remainingNodes = this.diff(selectedNodes, nodeList);
                if (!remainingNodes.length) {
                    this.notification();
                }
                else {
                    this.recover(remainingNodes);
                }
            });
        }
        else {
            this.restoreProcessStatus.fail.push(...selection);
            this.notification();
            return;
        }
    }
    restoreNodesBatch(batch) {
        return forkJoin(batch.map((node) => this.restoreNode(node)));
    }
    getNodesWithPath(selection) {
        return selection.filter((node) => node.entry.path);
    }
    getDeletedNodes() {
        const promise = this.trashcanApi.listDeletedNodes({ include: ['path'] });
        return from(promise);
    }
    restoreNode(node) {
        const { entry } = node;
        const promise = this.trashcanApi.restoreDeletedNode(entry.id);
        return from(promise).pipe(map(() => ({
            status: 1,
            entry
        })), catchError((error) => {
            const { statusCode } = (JSON.parse(error.message)).error;
            return of({
                status: 0,
                statusCode,
                entry
            });
        }));
    }
    diff(selection, list, fromList = true) {
        const ids = selection.map((item) => item.entry.id);
        return list.filter((item) => {
            if (fromList) {
                return ids.includes(item.entry.id) ? item : null;
            }
            else {
                return !ids.includes(item.entry.id) ? item : null;
            }
        });
    }
    processStatus(data = []) {
        const status = {
            fail: [],
            success: [],
            get someFailed() {
                return !!(this.fail.length);
            },
            get someSucceeded() {
                return !!(this.success.length);
            },
            get oneFailed() {
                return this.fail.length === 1;
            },
            get oneSucceeded() {
                return this.success.length === 1;
            },
            get allSucceeded() {
                return this.someSucceeded && !this.someFailed;
            },
            get allFailed() {
                return this.someFailed && !this.someSucceeded;
            },
            reset() {
                this.fail = [];
                this.success = [];
            }
        };
        return data.reduce((acc, node) => {
            if (node.status) {
                acc.success.push(node);
            }
            else {
                acc.fail.push(node);
            }
            return acc;
        }, status);
    }
    getRestoreMessage() {
        const { restoreProcessStatus: status } = this;
        if (status.someFailed && !status.oneFailed) {
            return this.translation.instant('CORE.RESTORE_NODE.PARTIAL_PLURAL', {
                number: status.fail.length
            });
        }
        if (status.oneFailed && status.fail[0].statusCode) {
            if (status.fail[0].statusCode === 409) {
                return this.translation.instant('CORE.RESTORE_NODE.NODE_EXISTS', {
                    name: status.fail[0].entry.name
                });
            }
            else {
                return this.translation.instant('CORE.RESTORE_NODE.GENERIC', {
                    name: status.fail[0].entry.name
                });
            }
        }
        if (status.oneFailed && !status.fail[0].statusCode) {
            return this.translation.instant('CORE.RESTORE_NODE.LOCATION_MISSING', {
                name: status.fail[0].entry.name
            });
        }
        if (status.allSucceeded && !status.oneSucceeded) {
            return this.translation.instant('CORE.RESTORE_NODE.PLURAL');
        }
        if (status.allSucceeded && status.oneSucceeded) {
            return this.translation.instant('CORE.RESTORE_NODE.SINGULAR', {
                name: status.success[0].entry.name
            });
        }
        return null;
    }
    notification() {
        const status = Object.assign({}, this.restoreProcessStatus);
        const message = this.getRestoreMessage();
        this.reset();
        const action = (status.oneSucceeded && !status.someFailed) ? this.translation.instant('CORE.RESTORE_NODE.VIEW') : '';
        let path;
        if (status.success && status.success.length > 0) {
            path = status.success[0].entry.path;
        }
        this.restore.emit({
            message: message,
            action: action,
            path: path
        });
    }
    reset() {
        this.restoreProcessStatus.reset();
        this.selection = [];
    }
}
NodeRestoreDirective.ɵfac = function NodeRestoreDirective_Factory(t) { return new (t || NodeRestoreDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.AlfrescoApiService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.TranslationService)); };
NodeRestoreDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: NodeRestoreDirective, selectors: [["", "adf-restore", ""]], hostBindings: function NodeRestoreDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function NodeRestoreDirective_click_HostBindingHandler() { return ctx.onClick(); });
    } }, inputs: { selection: ["adf-restore", "selection"] }, outputs: { restore: "restore" } });
NodeRestoreDirective.ctorParameters = () => [
    { type: AlfrescoApiService },
    { type: TranslationService }
];
NodeRestoreDirective.propDecorators = {
    selection: [{ type: Input, args: ['adf-restore',] }],
    restore: [{ type: Output }],
    onClick: [{ type: HostListener, args: ['click',] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NodeRestoreDirective, [{
        type: Directive,
        args: [{
                selector: '[adf-restore]'
            }]
    }], function () { return [{ type: ɵngcc1.AlfrescoApiService }, { type: ɵngcc2.TranslationService }]; }, { restore: [{
            type: Output
        }], onClick: [{
            type: HostListener,
            args: ['click']
        }], selection: [{
            type: Input,
            args: ['adf-restore']
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9kZS1yZXN0b3JlLmRpcmVjdGl2ZS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vaG9tZS90cmF2aXMvYnVpbGQvQWxmcmVzY28vYWxmcmVzY28tbmcyLWNvbXBvbmVudHMvbGliL2NvcmUvZGlyZWN0aXZlcy9ub2RlLXJlc3RvcmUuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFJSCxPQUFPLEVBQUUsU0FBUyxFQUFFLFlBQVksRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNyRixPQUFPLEVBQUUsV0FBVyxFQUF3RCxNQUFNLGtCQUFrQixDQUFDO0FBQ3JHLE9BQU8sRUFBYyxRQUFRLEVBQUUsSUFBSSxFQUFFLEVBQUUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUN0RCxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQztBQUN0RSxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUNyRSxPQUFPLEVBQUUsR0FBRyxFQUFFLFFBQVEsRUFBRSxHQUFHLEVBQUUsVUFBVSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7Ozs7QUFFaEUsTUFBTSxPQUFPLG1CQUFtQjtBQUNoQyxDQUdDO0FBS0QsTUFBTSxPQUFPLG9CQUFvQjtBQUNqQyxJQXFCSSxZQUFvQixrQkFBc0MsRUFDdEMsV0FBK0I7QUFDdkQsUUFGd0IsdUJBQWtCLEdBQWxCLGtCQUFrQixDQUFvQjtBQUFDLFFBQ3ZDLGdCQUFXLEdBQVgsV0FBVyxDQUFvQjtBQUFDLFFBUnBELFlBQU8sR0FBc0MsSUFBSSxZQUFZLEVBQUUsQ0FBQztBQUNwRSxRQVFRLElBQUksQ0FBQyxvQkFBb0IsR0FBRyxJQUFJLENBQUMs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QVksSUFBSSxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQztBQUNoRCxTQUFTO0FBQ1QsUUFBUSxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQztBQUMxQixZQUFZLE9BQU8sRUFBRSxPQUFPO0FBQzVCLFlBQVksTUFBTSxFQUFFLE1BQU07QUFDMUIsWUFBWSxJQUFJLEVBQUUsSUFBSTtBQUN0QixTQUFTLENBQUMsQ0FBQztBQUNYLElBQUksQ0FBQztBQUNMLElBQ1ksS0FBSztBQUFLLFFBQ2QsSUFBSSxDQUFDLG9CQUFvQixDQUFDLEtBQUssRUFBRSxDQUFDO0FBQzFDLFFBQVEsSUFBSSxDQUFDLFNBQVMsR0FBRyxFQUFFLENBQUM7QUFDNUIsSUFBSSxDQUFDO0FBQ0w7Z0RBM09DLFNBQVMsU0FBQyxrQkFDUCxRQUFRLEVBQUUsZUFBZSxjQUM1Qjs7O2lHQUNJO0FBQUM7QUFDVSxZQWRQLGtCQUFrQjtBQUFJLFlBQ3RCLGtCQUFrQjtBQUFHO0FBQUc7QUFDOUIsd0JBcUJFLEtBQUssU0FBQyxhQUFhO0FBQ25CLHNCQUdBLE1BQU07QUFDVCxzQkFFRyxZQUFZLFNBQUMsT0FBTztBQUNyQjs7Ozs7Ozs7Ozs7Ozs7b0JBQUU7QUFBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbi8qIHRzbGludDpkaXNhYmxlOmNvbXBvbmVudC1zZWxlY3RvciBuby1pbnB1dC1yZW5hbWUgKi9cblxuaW1wb3J0IHsgRGlyZWN0aXZlLCBFdmVudEVtaXR0ZXIsIEhvc3RMaXN0ZW5lciwgSW5wdXQsIE91dHB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgVHJhc2hjYW5BcGksIERlbGV0ZWROb2RlRW50cnksIERlbGV0ZWROb2Rlc1BhZ2luZywgUGF0aEluZm9FbnRpdHkgfSBmcm9tICdAYWxmcmVzY28vanMtYXBpJztcbmltcG9ydCB7IE9ic2VydmFibGUsIGZvcmtKb2luLCBmcm9tLCBvZiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgQWxmcmVzY29BcGlTZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZXMvYWxmcmVzY28tYXBpLnNlcnZpY2UnO1xuaW1wb3J0IHsgVHJhbnNsYXRpb25TZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZXMvdHJhbnNsYXRpb24uc2VydmljZSc7XG5pbXBvcnQgeyB0YXAsIG1lcmdlTWFwLCBtYXAsIGNhdGNoRXJyb3IgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbmV4cG9ydCBjbGFzcyBSZXN0b3JlTWVzc2FnZU1vZGVsIHtcbiAgICBtZXNzYWdlOiBzdHJpbmc7XG4gICAgcGF0aDogUGF0aEluZm9FbnRpdHk7XG4gICAgYWN0aW9uOiBzdHJpbmc7XG59XG5cbkBEaXJlY3RpdmUoe1xuICAgIHNlbGVjdG9yOiAnW2FkZi1yZXN0b3JlXSdcbn0pXG5leHBvcnQgY2xhc3MgTm9kZVJlc3RvcmVEaXJlY3RpdmUge1xuICAgIHByaXZhdGUgcmVhZG9ubHkgcmVzdG9yZVByb2Nlc3NTdGF0dXM7XG5cbiAgICBfdHJhc2hjYW5BcGk6IFRyYXNoY2FuQXBpO1xuICAgIGdldCB0cmFzaGNhbkFwaSgpOiBUcmFzaGNhbkFwaSB7XG4gICAgICAgIHRoaXMuX3RyYXNoY2FuQXBpID0gdGhpcy5fdHJhc2hjYW5BcGkgPz8gbmV3IFRyYXNoY2FuQXBpKHRoaXMuYWxmcmVzY29BcGlTZXJ2aWNlLmdldEluc3RhbmNlKCkpO1xuICAgICAgICByZXR1cm4gdGhpcy5fdHJhc2hjYW5BcGk7XG4gICAgfVxuXG4gICAgLyoqIEFycmF5IG9mIGRlbGV0ZWQgbm9kZXMgdG8gcmVzdG9yZS4gKi9cbiAgICBASW5wdXQoJ2FkZi1yZXN0b3JlJylcbiAgICBzZWxlY3Rpb246IERlbGV0ZWROb2RlRW50cnlbXTtcblxuICAgIC8qKiBFbWl0dGVkIHdoZW4gcmVzdG9yYXRpb24gaXMgY29tcGxldGUuICovXG4gICAgQE91dHB1dCgpXG4gICAgcmVzdG9yZTogRXZlbnRFbWl0dGVyPFJlc3RvcmVNZXNzYWdlTW9kZWw+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuXG4gICAgQEhvc3RMaXN0ZW5lcignY2xpY2snKVxuICAgIG9uQ2xpY2soKSB7XG4gICAgICAgIHRoaXMucmVjb3Zlcih0aGlzLnNlbGVjdGlvbik7XG4gICAgfVxuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBhbGZyZXNjb0FwaVNlcnZpY2U6IEFsZnJlc2NvQXBpU2VydmljZSxcbiAgICAgICAgICAgICAgICBwcml2YXRlIHRyYW5zbGF0aW9uOiBUcmFuc2xhdGlvblNlcnZpY2UpIHtcbiAgICAgICAgdGhpcy5yZXN0b3JlUHJvY2Vzc1N0YXR1cyA9IHRoaXMucHJvY2Vzc1N0YXR1cygpO1xuICAgIH1cblxuICAgIHByaXZhdGUgcmVjb3ZlcihzZWxlY3Rpb246IGFueSkge1xuICAgICAgICBpZiAoIXNlbGVjdGlvbi5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IG5vZGVzV2l0aFBhdGggPSB0aGlzLmdldE5vZGVzV2l0aFBhdGgoc2VsZWN0aW9uKTtcblxuICAgICAgICBpZiAoc2VsZWN0aW9uLmxlbmd0aCAmJiBub2Rlc1dpdGhQYXRoLmxlbmd0aCkge1xuXG4gICAgICAgICAgICB0aGlzLnJlc3RvcmVOb2Rlc0JhdGNoKG5vZGVzV2l0aFBhdGgpLnBpcGUoXG4gICAgICAgICAgICAgICAgdGFwKChyZXN0b3JlZE5vZGVzKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHN0YXR1cyA9IHRoaXMucHJvY2Vzc1N0YXR1cyhyZXN0b3JlZE5vZGVzKTtcblxuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlc3RvcmVQcm9jZXNzU3RhdHVzLmZhaWwucHVzaCguLi5zdGF0dXMuZmFpbCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVzdG9yZVByb2Nlc3NTdGF0dXMuc3VjY2Vzcy5wdXNoKC4uLnN0YXR1cy5zdWNjZXNzKTtcbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICBtZXJnZU1hcCgoKSA9PiB0aGlzLmdldERlbGV0ZWROb2RlcygpKVxuICAgICAgICAgICAgKVxuICAgICAgICAgICAgLnN1YnNjcmliZSgoZGVsZXRlZE5vZGVzTGlzdCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHsgZW50cmllczogbm9kZUxpc3QgfSA9IGRlbGV0ZWROb2Rlc0xpc3QubGlzdDtcbiAgICAgICAgICAgICAgICBjb25zdCB7IGZhaWw6IHJlc3RvcmVFcnJvck5vZGVzIH0gPSB0aGlzLnJlc3RvcmVQcm9jZXNzU3RhdHVzO1xuICAgICAgICAgICAgICAgIGNvbnN0IHNlbGVjdGVkTm9kZXMgPSB0aGlzLmRpZmYocmVzdG9yZUVycm9yTm9kZXMsIHNlbGVjdGlvbiwgZmFsc2UpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlbWFpbmluZ05vZGVzID0gdGhpcy5kaWZmKHNlbGVjdGVkTm9kZXMsIG5vZGVMaXN0KTtcblxuICAgICAgICAgICAgICAgIGlmICghcmVtYWluaW5nTm9kZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubm90aWZpY2F0aW9uKCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZWNvdmVyKHJlbWFpbmluZ05vZGVzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMucmVzdG9yZVByb2Nlc3NTdGF0dXMuZmFpbC5wdXNoKC4uLnNlbGVjdGlvbik7XG4gICAgICAgICAgICB0aGlzLm5vdGlmaWNhdGlvbigpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSByZXN0b3JlTm9kZXNCYXRjaChiYXRjaDogRGVsZXRlZE5vZGVFbnRyeVtdKTogT2JzZXJ2YWJsZTxEZWxldGVkTm9kZUVudHJ5W10+IHtcbiAgICAgICAgcmV0dXJuIGZvcmtKb2luKGJhdGNoLm1hcCgobm9kZSkgPT4gdGhpcy5yZXN0b3JlTm9kZShub2RlKSkpO1xuICAgIH1cblxuICAgIHByaXZhdGUgZ2V0Tm9kZXNXaXRoUGF0aChzZWxlY3Rpb24pOiBEZWxldGVkTm9kZUVudHJ5W10ge1xuICAgICAgICByZXR1cm4gc2VsZWN0aW9uLmZpbHRlcigobm9kZSkgPT4gbm9kZS5lbnRyeS5wYXRoKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGdldERlbGV0ZWROb2RlcygpOiBPYnNlcnZhYmxlPERlbGV0ZWROb2Rlc1BhZ2luZz4ge1xuICAgICAgICBjb25zdCBwcm9taXNlID0gdGhpcy50cmFzaGNhbkFwaS5saXN0RGVsZXRlZE5vZGVzKHsgaW5jbHVkZTogWydwYXRoJ10gfSk7XG5cbiAgICAgICAgcmV0dXJuIGZyb20ocHJvbWlzZSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSByZXN0b3JlTm9kZShub2RlKTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICAgICAgY29uc3QgeyBlbnRyeSB9ID0gbm9kZTtcblxuICAgICAgICBjb25zdCBwcm9taXNlID0gdGhpcy50cmFzaGNhbkFwaS5yZXN0b3JlRGVsZXRlZE5vZGUoZW50cnkuaWQpO1xuXG4gICAgICAgIHJldHVybiBmcm9tKHByb21pc2UpLnBpcGUoXG4gICAgICAgICAgICBtYXAoKCkgPT4gKHtcbiAgICAgICAgICAgICAgICBzdGF0dXM6IDEsXG4gICAgICAgICAgICAgICAgZW50cnlcbiAgICAgICAgICAgIH0pKSxcbiAgICAgICAgICAgIGNhdGNoRXJyb3IoKGVycm9yKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgeyBzdGF0dXNDb2RlIH0gPSAoSlNPTi5wYXJzZShlcnJvci5tZXNzYWdlKSkuZXJyb3I7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gb2Yoe1xuICAgICAgICAgICAgICAgICAgICBzdGF0dXM6IDAsXG4gICAgICAgICAgICAgICAgICAgIHN0YXR1c0NvZGUsXG4gICAgICAgICAgICAgICAgICAgIGVudHJ5XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KVxuICAgICAgICApO1xuICAgIH1cblxuICAgIHByaXZhdGUgZGlmZihzZWxlY3Rpb24sIGxpc3QsIGZyb21MaXN0ID0gdHJ1ZSk6IGFueSB7XG4gICAgICAgIGNvbnN0IGlkcyA9IHNlbGVjdGlvbi5tYXAoKGl0ZW0pID0+IGl0ZW0uZW50cnkuaWQpO1xuXG4gICAgICAgIHJldHVybiBsaXN0LmZpbHRlcigoaXRlbSkgPT4ge1xuICAgICAgICAgICAgaWYgKGZyb21MaXN0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlkcy5pbmNsdWRlcyhpdGVtLmVudHJ5LmlkKSA/IGl0ZW0gOiBudWxsO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gIWlkcy5pbmNsdWRlcyhpdGVtLmVudHJ5LmlkKSA/IGl0ZW0gOiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHByb2Nlc3NTdGF0dXMoZGF0YSA9IFtdKTogYW55IHtcbiAgICAgICAgY29uc3Qgc3RhdHVzID0ge1xuICAgICAgICAgICAgZmFpbDogW10sXG4gICAgICAgICAgICBzdWNjZXNzOiBbXSxcbiAgICAgICAgICAgIGdldCBzb21lRmFpbGVkKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAhISh0aGlzLmZhaWwubGVuZ3RoKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBnZXQgc29tZVN1Y2NlZWRlZCgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gISEodGhpcy5zdWNjZXNzLmxlbmd0aCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZ2V0IG9uZUZhaWxlZCgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5mYWlsLmxlbmd0aCA9PT0gMTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBnZXQgb25lU3VjY2VlZGVkKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnN1Y2Nlc3MubGVuZ3RoID09PSAxO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGdldCBhbGxTdWNjZWVkZWQoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc29tZVN1Y2NlZWRlZCAmJiAhdGhpcy5zb21lRmFpbGVkO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGdldCBhbGxGYWlsZWQoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc29tZUZhaWxlZCAmJiAhdGhpcy5zb21lU3VjY2VlZGVkO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJlc2V0KCkge1xuICAgICAgICAgICAgICAgIHRoaXMuZmFpbCA9IFtdO1xuICAgICAgICAgICAgICAgIHRoaXMuc3VjY2VzcyA9IFtdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBkYXRhLnJlZHVjZShcbiAgICAgICAgICAgIChhY2MsIG5vZGUpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAobm9kZS5zdGF0dXMpIHtcbiAgICAgICAgICAgICAgICAgICAgYWNjLnN1Y2Nlc3MucHVzaChub2RlKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBhY2MuZmFpbC5wdXNoKG5vZGUpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJldHVybiBhY2M7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc3RhdHVzXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBnZXRSZXN0b3JlTWVzc2FnZSgpOiBzdHJpbmcgfCBudWxsIHtcbiAgICAgICAgY29uc3QgeyByZXN0b3JlUHJvY2Vzc1N0YXR1czogc3RhdHVzIH0gPSB0aGlzO1xuXG4gICAgICAgIGlmIChzdGF0dXMuc29tZUZhaWxlZCAmJiAhc3RhdHVzLm9uZUZhaWxlZCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMudHJhbnNsYXRpb24uaW5zdGFudChcbiAgICAgICAgICAgICAgICAnQ09SRS5SRVNUT1JFX05PREUuUEFSVElBTF9QTFVSQUwnLFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgbnVtYmVyOiBzdGF0dXMuZmFpbC5sZW5ndGhcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHN0YXR1cy5vbmVGYWlsZWQgJiYgc3RhdHVzLmZhaWxbMF0uc3RhdHVzQ29kZSkge1xuICAgICAgICAgICAgaWYgKHN0YXR1cy5mYWlsWzBdLnN0YXR1c0NvZGUgPT09IDQwOSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnRyYW5zbGF0aW9uLmluc3RhbnQoXG4gICAgICAgICAgICAgICAgICAgICdDT1JFLlJFU1RPUkVfTk9ERS5OT0RFX0VYSVNUUycsXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IHN0YXR1cy5mYWlsWzBdLmVudHJ5Lm5hbWVcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnRyYW5zbGF0aW9uLmluc3RhbnQoXG4gICAgICAgICAgICAgICAgICAgICdDT1JFLlJFU1RPUkVfTk9ERS5HRU5FUklDJyxcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogc3RhdHVzLmZhaWxbMF0uZW50cnkubmFtZVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzdGF0dXMub25lRmFpbGVkICYmICFzdGF0dXMuZmFpbFswXS5zdGF0dXNDb2RlKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy50cmFuc2xhdGlvbi5pbnN0YW50KFxuICAgICAgICAgICAgICAgICdDT1JFLlJFU1RPUkVfTk9ERS5MT0NBVElPTl9NSVNTSU5HJyxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IHN0YXR1cy5mYWlsWzBdLmVudHJ5Lm5hbWVcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHN0YXR1cy5hbGxTdWNjZWVkZWQgJiYgIXN0YXR1cy5vbmVTdWNjZWVkZWQpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnRyYW5zbGF0aW9uLmluc3RhbnQoJ0NPUkUuUkVTVE9SRV9OT0RFLlBMVVJBTCcpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHN0YXR1cy5hbGxTdWNjZWVkZWQgJiYgc3RhdHVzLm9uZVN1Y2NlZWRlZCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMudHJhbnNsYXRpb24uaW5zdGFudChcbiAgICAgICAgICAgICAgICAnQ09SRS5SRVNUT1JFX05PREUuU0lOR1VMQVInLFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogc3RhdHVzLnN1Y2Nlc3NbMF0uZW50cnkubmFtZVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBwcml2YXRlIG5vdGlmaWNhdGlvbigpOiB2b2lkIHtcbiAgICAgICAgY29uc3Qgc3RhdHVzID0gT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5yZXN0b3JlUHJvY2Vzc1N0YXR1cyk7XG5cbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IHRoaXMuZ2V0UmVzdG9yZU1lc3NhZ2UoKTtcbiAgICAgICAgdGhpcy5yZXNldCgpO1xuXG4gICAgICAgIGNvbnN0IGFjdGlvbiA9IChzdGF0dXMub25lU3VjY2VlZGVkICYmICFzdGF0dXMuc29tZUZhaWxlZCkgPyB0aGlzLnRyYW5zbGF0aW9uLmluc3RhbnQoJ0NPUkUuUkVTVE9SRV9OT0RFLlZJRVcnKSA6ICcnO1xuXG4gICAgICAgIGxldCBwYXRoO1xuICAgICAgICBpZiAoc3RhdHVzLnN1Y2Nlc3MgJiYgc3RhdHVzLnN1Y2Nlc3MubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgcGF0aCA9IHN0YXR1cy5zdWNjZXNzWzBdLmVudHJ5LnBhdGg7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5yZXN0b3JlLmVtaXQoe1xuICAgICAgICAgICAgbWVzc2FnZTogbWVzc2FnZSxcbiAgICAgICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICAgICAgcGF0aDogcGF0aFxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHJlc2V0KCk6IHZvaWQge1xuICAgICAgICB0aGlzLnJlc3RvcmVQcm9jZXNzU3RhdHVzLnJlc2V0KCk7XG4gICAgICAgIHRoaXMuc2VsZWN0aW9uID0gW107XG4gICAgfVxufVxuIl19