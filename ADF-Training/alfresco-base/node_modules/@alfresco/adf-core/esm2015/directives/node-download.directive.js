/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Directive, Input, HostListener } from '@angular/core';
import { MatDialog } from '@angular/material/dialog';
import { AlfrescoApiService } from '../services/alfresco-api.service';
import { DownloadZipDialogComponent } from '../dialogs/download-zip/download-zip.dialog';
import { ContentApi, VersionEntry } from '@alfresco/js-api';
import { DownloadService } from '../services/download.service';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../services/alfresco-api.service';
import * as ɵngcc2 from '../services/download.service';
import * as ɵngcc3 from '@angular/material/dialog';
export class NodeDownloadDirective {
    constructor(apiService, downloadService, dialog) {
        this.apiService = apiService;
        this.downloadService = downloadService;
        this.dialog = dialog;
    }
    get contentApi() {
        var _a;
        this._contentApi = (_a = this._contentApi) !== null && _a !== void 0 ? _a : new ContentApi(this.apiService.getInstance());
        return this._contentApi;
    }
    onClick() {
        this.downloadNodes(this.nodes);
    }
    downloadNodes(selection) {
        if (!this.isSelectionValid(selection)) {
            return;
        }
        if (selection instanceof Array) {
            if (selection.length === 1) {
                this.downloadNode(selection[0]);
            }
            else {
                this.downloadZip(selection);
            }
        }
        else {
            this.downloadNode(selection);
        }
    }
    downloadNode(node) {
        if (node && node.entry) {
            const entry = node.entry;
            if (entry.isFile) {
                this.downloadFile(node);
            }
            if (entry.isFolder) {
                this.downloadZip([node]);
            }
            if (!entry.isFile && !entry.isFolder && entry.nodeId) {
                this.downloadFile(node);
            }
        }
    }
    isSelectionValid(selection) {
        return selection || (selection instanceof Array && selection.length > 0);
    }
    downloadFile(node) {
        if (node && node.entry) {
            const id = node.entry.nodeId || node.entry.id;
            let url, fileName;
            if (this.version) {
                url = this.contentApi.getVersionContentUrl(id, this.version.entry.id, true);
                fileName = this.version.entry.name;
            }
            else {
                url = this.contentApi.getContentUrl(id, true);
                fileName = node.entry.name;
            }
            this.downloadService.downloadUrl(url, fileName);
        }
    }
    downloadZip(selection) {
        if (selection && selection.length > 0) {
            const nodeIds = selection.map((node) => (node.entry.nodeId || node.entry.id));
            this.dialog.open(DownloadZipDialogComponent, {
                width: '600px',
                disableClose: true,
                data: {
                    nodeIds
                }
            });
        }
    }
}
NodeDownloadDirective.ɵfac = function NodeDownloadDirective_Factory(t) { return new (t || NodeDownloadDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.AlfrescoApiService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.DownloadService), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.MatDialog)); };
NodeDownloadDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: NodeDownloadDirective, selectors: [["", "adfNodeDownload", ""]], hostBindings: function NodeDownloadDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function NodeDownloadDirective_click_HostBindingHandler() { return ctx.onClick(); });
    } }, inputs: { nodes: ["adfNodeDownload", "nodes"], version: "version" } });
NodeDownloadDirective.ctorParameters = () => [
    { type: AlfrescoApiService },
    { type: DownloadService },
    { type: MatDialog }
];
NodeDownloadDirective.propDecorators = {
    nodes: [{ type: Input, args: ['adfNodeDownload',] }],
    version: [{ type: Input }],
    onClick: [{ type: HostListener, args: ['click',] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NodeDownloadDirective, [{
        type: Directive,
        args: [{
                selector: '[adfNodeDownload]'
            }]
    }], function () { return [{ type: ɵngcc1.AlfrescoApiService }, { type: ɵngcc2.DownloadService }, { type: ɵngcc3.MatDialog }]; }, { onClick: [{
            type: HostListener,
            args: ['click']
        }], nodes: [{
            type: Input,
            args: ['adfNodeDownload']
        }], version: [{
            type: Input
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,