/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Directive, EventEmitter, HostListener, Input, Output } from '@angular/core';
import { SiteEntry, SitesApi } from '@alfresco/js-api';
import { BehaviorSubject, from } from 'rxjs';
import { AlfrescoApiService } from '../services/alfresco-api.service';
import { SitesService } from '../services/sites.service';
import { VersionCompatibilityService } from '../services/version-compatibility.service';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../services/alfresco-api.service';
import * as ɵngcc2 from '../services/sites.service';
import * as ɵngcc3 from '../services/version-compatibility.service';
export class LibraryMembershipDirective {
    constructor(alfrescoApiService, sitesService, versionCompatibilityService) {
        this.alfrescoApiService = alfrescoApiService;
        this.sitesService = sitesService;
        this.versionCompatibilityService = versionCompatibilityService;
        this.targetSite = null;
        this.isJoinRequested = new BehaviorSubject(false);
        this.selection = null;
        this.isAdmin = false;
        this.toggle = new EventEmitter();
        this.error = new EventEmitter();
    }
    get sitesApi() {
        var _a;
        this._sitesApi = (_a = this._sitesApi) !== null && _a !== void 0 ? _a : new SitesApi(this.alfrescoApiService.getInstance());
        return this._sitesApi;
    }
    onClick() {
        this.toggleMembershipRequest();
    }
    ngOnChanges(changes) {
        if (!changes.selection.currentValue || !changes.selection.currentValue.entry) {
            this.targetSite = null;
            return;
        }
        this.targetSite = changes.selection.currentValue.entry;
        this.markMembershipRequest();
    }
    toggleMembershipRequest() {
        if (!this.targetSite) {
            return;
        }
        if (this.targetSite.joinRequested) {
            this.cancelJoinRequest().subscribe(() => {
                this.targetSite.joinRequested = false;
                this.isJoinRequested.next(false);
                const info = {
                    updatedEntry: this.targetSite,
                    shouldReload: false,
                    i18nKey: 'APP.MESSAGES.INFO.JOIN_CANCELED'
                };
                this.toggle.emit(info);
            }, (error) => {
                const errWithMessage = {
                    error,
                    i18nKey: 'APP.MESSAGES.ERRORS.JOIN_CANCEL_FAILED'
                };
                this.error.emit(errWithMessage);
            });
        }
        if (!this.targetSite.joinRequested && !this.isAdmin) {
            this.joinLibraryRequest().subscribe((createdMembership) => {
                this.targetSite.joinRequested = true;
                this.isJoinRequested.next(true);
                if (createdMembership.entry && createdMembership.entry.site && createdMembership.entry.site.role) {
                    const info = {
                        shouldReload: true,
                        i18nKey: 'APP.MESSAGES.INFO.JOINED'
                    };
                    this.toggle.emit(info);
                }
                else {
                    const info = {
                        updatedEntry: this.targetSite,
                        shouldReload: false,
                        i18nKey: 'APP.MESSAGES.INFO.JOIN_REQUESTED'
                    };
                    this.toggle.emit(info);
                }
            }, (error) => {
                const errWithMessage = {
                    error,
                    i18nKey: 'APP.MESSAGES.ERRORS.JOIN_REQUEST_FAILED'
                };
                const senderEmailCheck = 'Failed to resolve sender mail address';
                const receiverEmailCheck = 'All recipients for the mail action were invalid';
                if (error.message) {
                    if (error.message.includes(senderEmailCheck)) {
                        errWithMessage.i18nKey = 'APP.MESSAGES.ERRORS.INVALID_SENDER_EMAIL';
                    }
                    else if (error.message.includes(receiverEmailCheck)) {
                        errWithMessage.i18nKey = 'APP.MESSAGES.ERRORS.INVALID_RECEIVER_EMAIL';
                    }
                }
                this.error.emit(errWithMessage);
            });
        }
        if (this.isAdmin) {
            this.joinLibrary().subscribe((createdMembership) => {
                if (createdMembership.entry && createdMembership.entry.role) {
                    const info = {
                        shouldReload: true,
                        i18nKey: 'APP.MESSAGES.INFO.JOINED'
                    };
                    this.toggle.emit(info);
                }
            }, (error) => {
                const errWithMessage = {
                    error,
                    i18nKey: 'APP.MESSAGES.ERRORS.JOIN_REQUEST_FAILED'
                };
                const senderEmailCheck = 'Failed to resolve sender mail address';
                const receiverEmailCheck = 'All recipients for the mail action were invalid';
                if (error.message) {
                    if (error.message.includes(senderEmailCheck)) {
                        errWithMessage.i18nKey = 'APP.MESSAGES.ERRORS.INVALID_SENDER_EMAIL';
                    }
                    else if (error.message.includes(receiverEmailCheck)) {
                        errWithMessage.i18nKey = 'APP.MESSAGES.ERRORS.INVALID_RECEIVER_EMAIL';
                    }
                }
                this.error.emit(errWithMessage);
            });
        }
    }
    markMembershipRequest() {
        if (!this.targetSite) {
            return;
        }
        this.getMembershipRequest().subscribe((data) => {
            if (data.entry.id === this.targetSite.id) {
                this.targetSite.joinRequested = true;
                this.isJoinRequested.next(true);
            }
        }, () => {
            this.targetSite.joinRequested = false;
            this.isJoinRequested.next(false);
        });
    }
    joinLibraryRequest() {
        const memberBody = {
            id: this.targetSite.id
        };
        if (this.versionCompatibilityService.isVersionSupported('7.0.0')) {
            memberBody.client = 'workspace';
        }
        return from(this.sitesApi.createSiteMembershipRequestForPerson('-me-', memberBody));
    }
    joinLibrary() {
        return this.sitesService.createSiteMembership(this.targetSite.id, {
            role: 'SiteConsumer',
            id: '-me-'
        });
    }
    cancelJoinRequest() {
        return from(this.sitesApi.deleteSiteMembershipRequestForPerson('-me-', this.targetSite.id));
    }
    getMembershipRequest() {
        return from(this.sitesApi.getSiteMembershipRequestForPerson('-me-', this.targetSite.id));
    }
}
LibraryMembershipDirective.ɵfac = function LibraryMembershipDirective_Factory(t) { return new (t || LibraryMembershipDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.AlfrescoApiService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.SitesService), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.VersionCompatibilityService)); };
LibraryMembershipDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: LibraryMembershipDirective, selectors: [["", "adf-library-membership", ""]], hostBindings: function LibraryMembershipDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function LibraryMembershipDirective_click_HostBindingHandler() { return ctx.onClick(); });
    } }, inputs: { selection: ["adf-library-membership", "selection"], isAdmin: "isAdmin" }, outputs: { toggle: "toggle", error: "error" }, exportAs: ["libraryMembership"], features: [ɵngcc0.ɵɵNgOnChangesFeature] });
LibraryMembershipDirective.ctorParameters = () => [
    { type: AlfrescoApiService },
    { type: SitesService },
    { type: VersionCompatibilityService }
];
LibraryMembershipDirective.propDecorators = {
    selection: [{ type: Input, args: ['adf-library-membership',] }],
    isAdmin: [{ type: Input }],
    toggle: [{ type: Output }],
    error: [{ type: Output }],
    onClick: [{ type: HostListener, args: ['click',] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(LibraryMembershipDirective, [{
        type: Directive,
        args: [{
                selector: '[adf-library-membership]',
                exportAs: 'libraryMembership'
            }]
    }], function () { return [{ type: ɵngcc1.AlfrescoApiService }, { type: ɵngcc2.SitesService }, { type: ɵngcc3.VersionCompatibilityService }]; }, { selection: [{
            type: Input,
            args: ['adf-library-membership']
        }], isAdmin: [{
            type: Input
        }], toggle: [{
            type: Output
        }], error: [{
            type: Output
        }], onClick: [{
            type: HostListener,
            args: ['click']
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlicmFyeS1tZW1iZXJzaGlwLmRpcmVjdGl2ZS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vaG9tZS90cmF2aXMvYnVpbGQvQWxmcmVzY28vYWxmcmVzY28tbmcyLWNvbXBvbmVudHMvbGliL2NvcmUvZGlyZWN0aXZlcy9saWJyYXJ5LW1lbWJlcnNoaXAuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFFSCxPQUFPLEVBQUUsU0FBUyxFQUFFLFlBQVksRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFhLE1BQU0sRUFBaUIsTUFBTSxlQUFlLENBQUM7QUFDL0csT0FBTyxFQUNILFNBQVMsRUFJVCxRQUFRLEVBQ1gsTUFBTSxrQkFBa0IsQ0FBQztBQUMxQixPQUFPLEVBQUUsZUFBZSxFQUFFLElBQUksRUFBYyxNQUFNLE1BQU0sQ0FBQztBQUN6RCxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQztBQUN0RSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFDekQsT0FBTyxFQUFFLDJCQUEyQixFQUFFLE1BQU0sMkNBQTJDLENBQUM7Ozs7O0FBaUJ4RixNQUFNLE9BQU8sMEJBQTBCO0FBQUcsSUErQnRDLFlBQ1ksa0JBQXNDLEVBQ3RDLFlBQTBCLEVBQzFCLDJCQUF3RDtBQUNyRSxRQUhhLHVCQUFrQixHQUFsQixrQkFBa0IsQ0FBb0I7QUFBQyxRQUN2QyxpQkFBWSxHQUFaLFlBQVksQ0FBYztBQUFDLFFBQzNCLGdDQUEyQixHQUEzQiwyQkFBMkIsQ0FBNkI7QUFDeEUsUUFsQ0ksZUFBVSxHQUFRLElBQUksQ0FBQztBQUMzQixRQUNJLG9CQUFlLEdBQTZCLElBQUksZUFBZSxDQUFVLEtBQUssQ0FBQyxDQUFDO0FB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ckI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7b0JBQUU7QUFBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IERpcmVjdGl2ZSwgRXZlbnRFbWl0dGVyLCBIb3N0TGlzdGVuZXIsIElucHV0LCBPbkNoYW5nZXMsIE91dHB1dCwgU2ltcGxlQ2hhbmdlcyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtcbiAgICBTaXRlRW50cnksXG4gICAgU2l0ZU1lbWJlcnNoaXBSZXF1ZXN0Qm9keSxcbiAgICBTaXRlTWVtYmVyRW50cnksXG4gICAgU2l0ZU1lbWJlcnNoaXBSZXF1ZXN0RW50cnksXG4gICAgU2l0ZXNBcGlcbn0gZnJvbSAnQGFsZnJlc2NvL2pzLWFwaSc7XG5pbXBvcnQgeyBCZWhhdmlvclN1YmplY3QsIGZyb20sIE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IEFsZnJlc2NvQXBpU2VydmljZSB9IGZyb20gJy4uL3NlcnZpY2VzL2FsZnJlc2NvLWFwaS5zZXJ2aWNlJztcbmltcG9ydCB7IFNpdGVzU2VydmljZSB9IGZyb20gJy4uL3NlcnZpY2VzL3NpdGVzLnNlcnZpY2UnO1xuaW1wb3J0IHsgVmVyc2lvbkNvbXBhdGliaWxpdHlTZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZXMvdmVyc2lvbi1jb21wYXRpYmlsaXR5LnNlcnZpY2UnO1xuXG5leHBvcnQgaW50ZXJmYWNlIExpYnJhcnlNZW1iZXJzaGlwVG9nZ2xlRXZlbnQge1xuICAgIHVwZGF0ZWRFbnRyeT86IGFueTtcbiAgICBzaG91bGRSZWxvYWQ6IGJvb2xlYW47XG4gICAgaTE4bktleTogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIExpYnJhcnlNZW1iZXJzaGlwRXJyb3JFdmVudCB7XG4gICAgZXJyb3I6IGFueTtcbiAgICBpMThuS2V5OiBzdHJpbmc7XG59XG5cbkBEaXJlY3RpdmUoe1xuICAgIHNlbGVjdG9yOiAnW2FkZi1saWJyYXJ5LW1lbWJlcnNoaXBdJyxcbiAgICBleHBvcnRBczogJ2xpYnJhcnlNZW1iZXJzaGlwJ1xufSlcbmV4cG9ydCBjbGFzcyBMaWJyYXJ5TWVtYmVyc2hpcERpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uQ2hhbmdlcyB7XG4gICAgdGFyZ2V0U2l0ZTogYW55ID0gbnVsbDtcblxuICAgIGlzSm9pblJlcXVlc3RlZDogQmVoYXZpb3JTdWJqZWN0PGJvb2xlYW4+ID0gbmV3IEJlaGF2aW9yU3ViamVjdDxib29sZWFuPihmYWxzZSk7XG5cbiAgICBfc2l0ZXNBcGk6IFNpdGVzQXBpO1xuICAgIGdldCBzaXRlc0FwaSgpOiBTaXRlc0FwaSB7XG4gICAgICAgIHRoaXMuX3NpdGVzQXBpID0gdGhpcy5fc2l0ZXNBcGkgPz8gbmV3IFNpdGVzQXBpKHRoaXMuYWxmcmVzY29BcGlTZXJ2aWNlLmdldEluc3RhbmNlKCkpO1xuICAgICAgICByZXR1cm4gdGhpcy5fc2l0ZXNBcGk7XG4gICAgfVxuXG4gICAgLyoqIFNpdGUgZm9yIHdoaWNoIHRvIHRvZ2dsZSB0aGUgbWVtYmVyc2hpcCByZXF1ZXN0LiAqL1xuICAgIEBJbnB1dCgnYWRmLWxpYnJhcnktbWVtYmVyc2hpcCcpXG4gICAgc2VsZWN0aW9uOiBTaXRlRW50cnkgPSBudWxsO1xuXG4gICAgLyoqIFNpdGUgZm9yIHdoaWNoIHRvIHRvZ2dsZSB0aGUgbWVtYmVyc2hpcCByZXF1ZXN0LiAqL1xuICAgIEBJbnB1dCgpXG4gICAgaXNBZG1pbiA9IGZhbHNlO1xuXG4gICAgQE91dHB1dCgpXG4gICAgdG9nZ2xlID0gbmV3IEV2ZW50RW1pdHRlcjxMaWJyYXJ5TWVtYmVyc2hpcFRvZ2dsZUV2ZW50PigpO1xuXG4gICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOiBuby1vdXRwdXQtbmF0aXZlXG4gICAgQE91dHB1dCgpXG4gICAgZXJyb3IgPSBuZXcgRXZlbnRFbWl0dGVyPExpYnJhcnlNZW1iZXJzaGlwRXJyb3JFdmVudD4oKTtcblxuICAgIEBIb3N0TGlzdGVuZXIoJ2NsaWNrJylcbiAgICBvbkNsaWNrKCkge1xuICAgICAgICB0aGlzLnRvZ2dsZU1lbWJlcnNoaXBSZXF1ZXN0KCk7XG4gICAgfVxuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHByaXZhdGUgYWxmcmVzY29BcGlTZXJ2aWNlOiBBbGZyZXNjb0FwaVNlcnZpY2UsXG4gICAgICAgIHByaXZhdGUgc2l0ZXNTZXJ2aWNlOiBTaXRlc1NlcnZpY2UsXG4gICAgICAgIHByaXZhdGUgdmVyc2lvbkNvbXBhdGliaWxpdHlTZXJ2aWNlOiBWZXJzaW9uQ29tcGF0aWJpbGl0eVNlcnZpY2VcbiAgICApIHtcbiAgICB9XG5cbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKSB7XG4gICAgICAgIGlmICghY2hhbmdlcy5zZWxlY3Rpb24uY3VycmVudFZhbHVlIHx8ICFjaGFuZ2VzLnNlbGVjdGlvbi5jdXJyZW50VmFsdWUuZW50cnkpIHtcbiAgICAgICAgICAgIHRoaXMudGFyZ2V0U2l0ZSA9IG51bGw7XG5cbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnRhcmdldFNpdGUgPSBjaGFuZ2VzLnNlbGVjdGlvbi5jdXJyZW50VmFsdWUuZW50cnk7XG4gICAgICAgIHRoaXMubWFya01lbWJlcnNoaXBSZXF1ZXN0KCk7XG4gICAgfVxuXG4gICAgdG9nZ2xlTWVtYmVyc2hpcFJlcXVlc3QoKSB7XG4gICAgICAgIGlmICghdGhpcy50YXJnZXRTaXRlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy50YXJnZXRTaXRlLmpvaW5SZXF1ZXN0ZWQpIHtcbiAgICAgICAgICAgIHRoaXMuY2FuY2VsSm9pblJlcXVlc3QoKS5zdWJzY3JpYmUoXG4gICAgICAgICAgICAgICAgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnRhcmdldFNpdGUuam9pblJlcXVlc3RlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmlzSm9pblJlcXVlc3RlZC5uZXh0KGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaW5mbyA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZWRFbnRyeTogdGhpcy50YXJnZXRTaXRlLFxuICAgICAgICAgICAgICAgICAgICAgICAgc2hvdWxkUmVsb2FkOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGkxOG5LZXk6ICdBUFAuTUVTU0FHRVMuSU5GTy5KT0lOX0NBTkNFTEVEJ1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnRvZ2dsZS5lbWl0KGluZm8pO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgKGVycm9yKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGVycldpdGhNZXNzYWdlID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3IsXG4gICAgICAgICAgICAgICAgICAgICAgICBpMThuS2V5OiAnQVBQLk1FU1NBR0VTLkVSUk9SUy5KT0lOX0NBTkNFTF9GQUlMRUQnXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZXJyb3IuZW1pdChlcnJXaXRoTWVzc2FnZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghdGhpcy50YXJnZXRTaXRlLmpvaW5SZXF1ZXN0ZWQgJiYgIXRoaXMuaXNBZG1pbikge1xuICAgICAgICAgICAgdGhpcy5qb2luTGlicmFyeVJlcXVlc3QoKS5zdWJzY3JpYmUoXG4gICAgICAgICAgICAgICAgKGNyZWF0ZWRNZW1iZXJzaGlwKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudGFyZ2V0U2l0ZS5qb2luUmVxdWVzdGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pc0pvaW5SZXF1ZXN0ZWQubmV4dCh0cnVlKTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoY3JlYXRlZE1lbWJlcnNoaXAuZW50cnkgJiYgY3JlYXRlZE1lbWJlcnNoaXAuZW50cnkuc2l0ZSAmJiBjcmVhdGVkTWVtYmVyc2hpcC5lbnRyeS5zaXRlLnJvbGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGluZm8gPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hvdWxkUmVsb2FkOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkxOG5LZXk6ICdBUFAuTUVTU0FHRVMuSU5GTy5KT0lORUQnXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy50b2dnbGUuZW1pdChpbmZvKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGluZm8gPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlZEVudHJ5OiB0aGlzLnRhcmdldFNpdGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hvdWxkUmVsb2FkOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpMThuS2V5OiAnQVBQLk1FU1NBR0VTLklORk8uSk9JTl9SRVFVRVNURUQnXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy50b2dnbGUuZW1pdChpbmZvKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgKGVycm9yKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGVycldpdGhNZXNzYWdlID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3IsXG4gICAgICAgICAgICAgICAgICAgICAgICBpMThuS2V5OiAnQVBQLk1FU1NBR0VTLkVSUk9SUy5KT0lOX1JFUVVFU1RfRkFJTEVEJ1xuICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHNlbmRlckVtYWlsQ2hlY2sgPSAnRmFpbGVkIHRvIHJlc29sdmUgc2VuZGVyIG1haWwgYWRkcmVzcyc7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlY2VpdmVyRW1haWxDaGVjayA9ICdBbGwgcmVjaXBpZW50cyBmb3IgdGhlIG1haWwgYWN0aW9uIHdlcmUgaW52YWxpZCc7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGVycm9yLm1lc3NhZ2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlcnJvci5tZXNzYWdlLmluY2x1ZGVzKHNlbmRlckVtYWlsQ2hlY2spKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyV2l0aE1lc3NhZ2UuaTE4bktleSA9ICdBUFAuTUVTU0FHRVMuRVJST1JTLklOVkFMSURfU0VOREVSX0VNQUlMJztcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZXJyb3IubWVzc2FnZS5pbmNsdWRlcyhyZWNlaXZlckVtYWlsQ2hlY2spKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyV2l0aE1lc3NhZ2UuaTE4bktleSA9ICdBUFAuTUVTU0FHRVMuRVJST1JTLklOVkFMSURfUkVDRUlWRVJfRU1BSUwnO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lcnJvci5lbWl0KGVycldpdGhNZXNzYWdlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuaXNBZG1pbikge1xuICAgICAgICAgICAgdGhpcy5qb2luTGlicmFyeSgpLnN1YnNjcmliZShcbiAgICAgICAgICAgICAgICAoY3JlYXRlZE1lbWJlcnNoaXA6IFNpdGVNZW1iZXJFbnRyeSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoY3JlYXRlZE1lbWJlcnNoaXAuZW50cnkgJiYgY3JlYXRlZE1lbWJlcnNoaXAuZW50cnkucm9sZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaW5mbyA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaG91bGRSZWxvYWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaTE4bktleTogJ0FQUC5NRVNTQUdFUy5JTkZPLkpPSU5FRCdcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRvZ2dsZS5lbWl0KGluZm8pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAoZXJyb3IpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZXJyV2l0aE1lc3NhZ2UgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvcixcbiAgICAgICAgICAgICAgICAgICAgICAgIGkxOG5LZXk6ICdBUFAuTUVTU0FHRVMuRVJST1JTLkpPSU5fUkVRVUVTVF9GQUlMRUQnXG4gICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc2VuZGVyRW1haWxDaGVjayA9ICdGYWlsZWQgdG8gcmVzb2x2ZSBzZW5kZXIgbWFpbCBhZGRyZXNzJztcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVjZWl2ZXJFbWFpbENoZWNrID0gJ0FsbCByZWNpcGllbnRzIGZvciB0aGUgbWFpbCBhY3Rpb24gd2VyZSBpbnZhbGlkJztcblxuICAgICAgICAgICAgICAgICAgICBpZiAoZXJyb3IubWVzc2FnZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVycm9yLm1lc3NhZ2UuaW5jbHVkZXMoc2VuZGVyRW1haWxDaGVjaykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJXaXRoTWVzc2FnZS5pMThuS2V5ID0gJ0FQUC5NRVNTQUdFUy5FUlJPUlMuSU5WQUxJRF9TRU5ERVJfRU1BSUwnO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChlcnJvci5tZXNzYWdlLmluY2x1ZGVzKHJlY2VpdmVyRW1haWxDaGVjaykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJXaXRoTWVzc2FnZS5pMThuS2V5ID0gJ0FQUC5NRVNTQUdFUy5FUlJPUlMuSU5WQUxJRF9SRUNFSVZFUl9FTUFJTCc7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB0aGlzLmVycm9yLmVtaXQoZXJyV2l0aE1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBtYXJrTWVtYmVyc2hpcFJlcXVlc3QoKSB7XG4gICAgICAgIGlmICghdGhpcy50YXJnZXRTaXRlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmdldE1lbWJlcnNoaXBSZXF1ZXN0KCkuc3Vic2NyaWJlKFxuICAgICAgICAgICAgKGRhdGEpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoZGF0YS5lbnRyeS5pZCA9PT0gdGhpcy50YXJnZXRTaXRlLmlkKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudGFyZ2V0U2l0ZS5qb2luUmVxdWVzdGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pc0pvaW5SZXF1ZXN0ZWQubmV4dCh0cnVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMudGFyZ2V0U2l0ZS5qb2luUmVxdWVzdGVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgdGhpcy5pc0pvaW5SZXF1ZXN0ZWQubmV4dChmYWxzZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBqb2luTGlicmFyeVJlcXVlc3QoKTogT2JzZXJ2YWJsZTxTaXRlTWVtYmVyc2hpcFJlcXVlc3RFbnRyeT4ge1xuICAgICAgICBjb25zdCBtZW1iZXJCb2R5ID0ge1xuICAgICAgICAgICAgaWQ6IHRoaXMudGFyZ2V0U2l0ZS5pZFxuICAgICAgICB9IGFzIFNpdGVNZW1iZXJzaGlwUmVxdWVzdEJvZHk7XG5cbiAgICAgICAgaWYgKHRoaXMudmVyc2lvbkNvbXBhdGliaWxpdHlTZXJ2aWNlLmlzVmVyc2lvblN1cHBvcnRlZCgnNy4wLjAnKSkge1xuICAgICAgICAgICAgbWVtYmVyQm9keS5jbGllbnQgPSAnd29ya3NwYWNlJztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZnJvbSh0aGlzLnNpdGVzQXBpLmNyZWF0ZVNpdGVNZW1iZXJzaGlwUmVxdWVzdEZvclBlcnNvbignLW1lLScsIG1lbWJlckJvZHkpKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGpvaW5MaWJyYXJ5KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zaXRlc1NlcnZpY2UuY3JlYXRlU2l0ZU1lbWJlcnNoaXAodGhpcy50YXJnZXRTaXRlLmlkLCB7XG4gICAgICAgICAgICByb2xlOiAnU2l0ZUNvbnN1bWVyJyxcbiAgICAgICAgICAgIGlkOiAnLW1lLSdcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBjYW5jZWxKb2luUmVxdWVzdCgpIHtcbiAgICAgICAgcmV0dXJuIGZyb20odGhpcy5zaXRlc0FwaS5kZWxldGVTaXRlTWVtYmVyc2hpcFJlcXVlc3RGb3JQZXJzb24oJy1tZS0nLCB0aGlzLnRhcmdldFNpdGUuaWQpKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGdldE1lbWJlcnNoaXBSZXF1ZXN0KCkge1xuICAgICAgICByZXR1cm4gZnJvbSh0aGlzLnNpdGVzQXBpLmdldFNpdGVNZW1iZXJzaGlwUmVxdWVzdEZvclBlcnNvbignLW1lLScsIHRoaXMudGFyZ2V0U2l0ZS5pZCkpO1xuICAgIH1cbn1cbiJdfQ==