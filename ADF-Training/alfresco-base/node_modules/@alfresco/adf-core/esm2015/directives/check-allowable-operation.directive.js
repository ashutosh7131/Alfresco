/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { ChangeDetectorRef, Directive, ElementRef, Host, Inject, Input, Optional, Renderer2 } from '@angular/core';
import { ContentService } from './../services/content.service';
import { EXTENDIBLE_COMPONENT } from './../interface/injection.tokens';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './../services/content.service';
export class CheckAllowableOperationDirective {
    constructor(elementRef, renderer, contentService, changeDetector, parentComponent) {
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.contentService = contentService;
        this.changeDetector = changeDetector;
        this.parentComponent = parentComponent;
        this.permission = null;
        this.nodes = [];
    }
    ngOnChanges(changes) {
        if (changes.nodes && !changes.nodes.firstChange) {
            this.updateElement();
        }
    }
    updateElement() {
        const enable = this.hasAllowableOperations(this.nodes, this.permission);
        if (enable) {
            this.enable();
        }
        else {
            this.disable();
        }
        return enable;
    }
    enable() {
        if (this.parentComponent) {
            this.parentComponent.disabled = false;
            this.changeDetector.detectChanges();
        }
        else {
            this.enableElement();
        }
    }
    disable() {
        if (this.parentComponent) {
            this.parentComponent.disabled = true;
            this.changeDetector.detectChanges();
        }
        else {
            this.disableElement();
        }
    }
    enableElement() {
        this.renderer.removeAttribute(this.elementRef.nativeElement, 'disabled');
    }
    disableElement() {
        this.renderer.setAttribute(this.elementRef.nativeElement, 'disabled', 'true');
    }
    hasAllowableOperations(nodes, permission) {
        if (nodes && nodes.length > 0) {
            return nodes.every((node) => this.contentService.hasAllowableOperations(node.entry, permission));
        }
        return false;
    }
}
CheckAllowableOperationDirective.ɵfac = function CheckAllowableOperationDirective_Factory(t) { return new (t || CheckAllowableOperationDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ContentService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(EXTENDIBLE_COMPONENT, 9)); };
CheckAllowableOperationDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CheckAllowableOperationDirective, selectors: [["", "adf-check-allowable-operation", ""]], inputs: { permission: ["adf-check-allowable-operation", "permission"], nodes: ["adf-nodes", "nodes"] }, features: [ɵngcc0.ɵɵNgOnChangesFeature] });
CheckAllowableOperationDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 },
    { type: ContentService },
    { type: ChangeDetectorRef },
    { type: undefined, decorators: [{ type: Host }, { type: Optional }, { type: Inject, args: [EXTENDIBLE_COMPONENT,] }] }
];
CheckAllowableOperationDirective.propDecorators = {
    permission: [{ type: Input, args: ['adf-check-allowable-operation',] }],
    nodes: [{ type: Input, args: ['adf-nodes',] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CheckAllowableOperationDirective, [{
        type: Directive,
        args: [{
                selector: '[adf-check-allowable-operation]'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }, { type: ɵngcc1.ContentService }, { type: ɵngcc0.ChangeDetectorRef }, { type: undefined, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: Inject,
                args: [EXTENDIBLE_COMPONENT]
            }] }]; }, { permission: [{
            type: Input,
            args: ['adf-check-allowable-operation']
        }], nodes: [{
            type: Input,
            args: ['adf-nodes']
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,