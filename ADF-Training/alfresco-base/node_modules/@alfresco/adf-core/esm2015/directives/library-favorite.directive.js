/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { __awaiter } from "tslib";
import { Directive, HostListener, Input, Output, EventEmitter } from '@angular/core';
import { FavoritesApi } from '@alfresco/js-api';
import { AlfrescoApiService } from '../services/alfresco-api.service';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../services/alfresco-api.service';
export class LibraryFavoriteDirective {
    constructor(alfrescoApiService) {
        this.alfrescoApiService = alfrescoApiService;
        this.library = null;
        this.toggle = new EventEmitter();
        this.error = new EventEmitter();
        this.targetLibrary = null;
    }
    get favoritesApi() {
        var _a;
        this._favoritesApi = (_a = this._favoritesApi) !== null && _a !== void 0 ? _a : new FavoritesApi(this.alfrescoApiService.getInstance());
        return this._favoritesApi;
    }
    onClick() {
        const guid = this.targetLibrary.entry.guid;
        if (this.targetLibrary.isFavorite) {
            this.removeFavorite(guid);
        }
        else {
            this.addFavorite({
                target: {
                    site: {
                        guid
                    }
                }
            });
        }
    }
    ngOnChanges(changes) {
        if (!changes.library.currentValue) {
            this.targetLibrary = null;
            return;
        }
        this.targetLibrary = changes.library.currentValue;
        this.markFavoriteLibrary(changes.library.currentValue);
    }
    isFavorite() {
        return this.targetLibrary && this.targetLibrary.isFavorite;
    }
    markFavoriteLibrary(library) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.targetLibrary.isFavorite === undefined) {
                try {
                    yield this.favoritesApi.getFavoriteSite('-me-', library.entry.id);
                    this.targetLibrary.isFavorite = true;
                }
                catch (_a) {
                    this.targetLibrary.isFavorite = false;
                }
            }
            else {
                this.targetLibrary = library;
            }
        });
    }
    addFavorite(favoriteBody) {
        this.favoritesApi
            .createFavorite('-me-', favoriteBody)
            .then((libraryEntry) => {
            this.targetLibrary.isFavorite = true;
            this.toggle.emit(libraryEntry);
        })
            .catch((error) => this.error.emit(error));
    }
    removeFavorite(favoriteId) {
        this.favoritesApi
            .deleteFavorite('-me-', favoriteId)
            .then((libraryBody) => {
            this.targetLibrary.isFavorite = false;
            this.toggle.emit(libraryBody);
        })
            .catch((error) => this.error.emit(error));
    }
}
LibraryFavoriteDirective.ɵfac = function LibraryFavoriteDirective_Factory(t) { return new (t || LibraryFavoriteDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.AlfrescoApiService)); };
LibraryFavoriteDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: LibraryFavoriteDirective, selectors: [["", "adf-favorite-library", ""]], hostBindings: function LibraryFavoriteDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function LibraryFavoriteDirective_click_HostBindingHandler() { return ctx.onClick(); });
    } }, inputs: { library: ["adf-favorite-library", "library"] }, outputs: { toggle: "toggle", error: "error" }, exportAs: ["favoriteLibrary"], features: [ɵngcc0.ɵɵNgOnChangesFeature] });
LibraryFavoriteDirective.ctorParameters = () => [
    { type: AlfrescoApiService }
];
LibraryFavoriteDirective.propDecorators = {
    library: [{ type: Input, args: ['adf-favorite-library',] }],
    toggle: [{ type: Output }],
    error: [{ type: Output }],
    onClick: [{ type: HostListener, args: ['click',] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(LibraryFavoriteDirective, [{
        type: Directive,
        args: [{
                selector: '[adf-favorite-library]',
                exportAs: 'favoriteLibrary'
            }]
    }], function () { return [{ type: ɵngcc1.AlfrescoApiService }]; }, { library: [{
            type: Input,
            args: ['adf-favorite-library']
        }], toggle: [{
            type: Output
        }], error: [{
            type: Output
        }], onClick: [{
            type: HostListener,
            args: ['click']
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,