/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Directive, Input, ViewContainerRef, TemplateRef } from '@angular/core';
import { VersionCompatibilityService } from '../services/version-compatibility.service';
import { take } from 'rxjs/operators';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../services/version-compatibility.service';
export class VersionCompatibilityDirective {
    constructor(templateRef, viewContainer, versionCompatibilityService) {
        this.templateRef = templateRef;
        this.viewContainer = viewContainer;
        this.versionCompatibilityService = versionCompatibilityService;
    }
    set version(requiredVersion) {
        this.validateAcsVersion(requiredVersion);
    }
    validateAcsVersion(requiredVersion) {
        this.versionCompatibilityService.acsVersionInitialized$.pipe(take(1)).subscribe(() => {
            this.viewContainer.clear();
            if (requiredVersion && this.versionCompatibilityService.isVersionSupported(requiredVersion)) {
                this.viewContainer.createEmbeddedView(this.templateRef);
            }
        });
    }
}
VersionCompatibilityDirective.ɵfac = function VersionCompatibilityDirective_Factory(t) { return new (t || VersionCompatibilityDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.VersionCompatibilityService)); };
VersionCompatibilityDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: VersionCompatibilityDirective, selectors: [["", "adf-acs-version", ""]], inputs: { version: ["adf-acs-version", "version"] } });
VersionCompatibilityDirective.ctorParameters = () => [
    { type: TemplateRef },
    { type: ViewContainerRef },
    { type: VersionCompatibilityService }
];
VersionCompatibilityDirective.propDecorators = {
    version: [{ type: Input, args: ['adf-acs-version',] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(VersionCompatibilityDirective, [{
        type: Directive,
        args: [{
                selector: '[adf-acs-version]'
            }]
    }], function () { return [{ type: ɵngcc0.TemplateRef }, { type: ɵngcc0.ViewContainerRef }, { type: ɵngcc1.VersionCompatibilityService }]; }, { version: [{
            type: Input,
            args: ['adf-acs-version']
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmVyc2lvbi1jb21wYXRpYmlsaXR5LmRpcmVjdGl2ZS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vaG9tZS90cmF2aXMvYnVpbGQvQWxmcmVzY28vYWxmcmVzY28tbmcyLWNvbXBvbmVudHMvbGliL2NvcmUvZGlyZWN0aXZlcy92ZXJzaW9uLWNvbXBhdGliaWxpdHkuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFFSCxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxnQkFBZ0IsRUFBRSxXQUFXLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDaEYsT0FBTyxFQUFFLDJCQUEyQixFQUFFLE1BQU0sMkNBQTJDLENBQUM7QUFDeEYsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLGdCQUFnQixDQUFDOzs7QUFLdEMsTUFBTSxPQUFPLDZCQUE2QjtBQUMxQyxJQU9JLFlBQ1ksV0FBNkIsRUFDN0IsYUFBK0IsRUFDL0IsMkJBQXdEO0FBQ3JFLFFBSGEsZ0JBQVcsR0FBWCxXQUFXLENBQWtCO0FBQUMsUUFDOUIsa0JBQWEsR0FBYixhQUFhLENBQWtCO0FBQUMsUUFDaEMsZ0NBQTJCLEdBQTNCLDJCQUEyQixDQUE2QjtBQUN4RSxJQUNJLENBQUM7QUFDTCxJQVhJLElBQ0ksT0FBTyxDQUFDLGVBQXVCO0FBQ3ZDLFFBQVEsSUFBSSxDQUFDLGtCQUFrQixDQUFDLGVBQWUsQ0FBQyxDQUFDO0FBQ2pELElBQUksQ0FBQztBQUNMLElBUVksa0JBQWtCLENBQUMsZUFBdUI7QUFDdEQsUUFBUSxJQUFJLENBQUMsMkJBQTJCLENBQUMsc0JBQXNCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUU7QUFDN0YsWUFBWSxJQUFJLENBQUMsYUFBYSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ3ZDLFlBQVksSUFBSSxlQUFlLElBQUksSUFBSSxDQUFDLDJCQUEyQixDQUFDLGtCQUFrQixDQUFDLGVBQWUsQ0FBQyxFQUFFO0FBQ3pHLGdCQUFnQixJQUFJLENBQUMsYUFBYSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztBQUN4RSxhQUFhO0FBQ2IsUUFBUSxDQUFDLENBQUMsQ0FBQztBQUNYLElBQUksQ0FBQztBQUNMO3lEQTFCQyxTQUFTLFNBQUMsa0JBQ1AsUUFBUSxFQUFFLG1CQUFtQixjQUNoQztzTUFDSTtBQUFDO0FBRVMsWUFUOEIsV0FBVztBQUFJLFlBQWpDLGdCQUFnQjtBQUFJLFlBQ3RDLDJCQUEyQjtBQUFHO0FBQUc7QUFDeEMsc0JBUUcsS0FBSyxTQUFDLGlCQUFpQjtBQUN4Qjs7Ozs7Ozs7O29CQUFFO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBEaXJlY3RpdmUsIElucHV0LCBWaWV3Q29udGFpbmVyUmVmLCBUZW1wbGF0ZVJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgVmVyc2lvbkNvbXBhdGliaWxpdHlTZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZXMvdmVyc2lvbi1jb21wYXRpYmlsaXR5LnNlcnZpY2UnO1xuaW1wb3J0IHsgdGFrZSB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuQERpcmVjdGl2ZSh7XG4gICAgc2VsZWN0b3I6ICdbYWRmLWFjcy12ZXJzaW9uXSdcbn0pXG5leHBvcnQgY2xhc3MgVmVyc2lvbkNvbXBhdGliaWxpdHlEaXJlY3RpdmUge1xuXG4gICAgLyoqIE1pbmltdW0gdmVyc2lvbiByZXF1aXJlZCBmb3IgY29tcG9uZW50IHRvIHdvcmsgY29ycmVjdGx5IC4gKi9cbiAgICBASW5wdXQoJ2FkZi1hY3MtdmVyc2lvbicpXG4gICAgc2V0IHZlcnNpb24ocmVxdWlyZWRWZXJzaW9uOiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy52YWxpZGF0ZUFjc1ZlcnNpb24ocmVxdWlyZWRWZXJzaW9uKTtcbiAgICB9XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHJpdmF0ZSB0ZW1wbGF0ZVJlZjogVGVtcGxhdGVSZWY8YW55PixcbiAgICAgICAgcHJpdmF0ZSB2aWV3Q29udGFpbmVyOiBWaWV3Q29udGFpbmVyUmVmLFxuICAgICAgICBwcml2YXRlIHZlcnNpb25Db21wYXRpYmlsaXR5U2VydmljZTogVmVyc2lvbkNvbXBhdGliaWxpdHlTZXJ2aWNlXG4gICAgKSB7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSB2YWxpZGF0ZUFjc1ZlcnNpb24ocmVxdWlyZWRWZXJzaW9uOiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy52ZXJzaW9uQ29tcGF0aWJpbGl0eVNlcnZpY2UuYWNzVmVyc2lvbkluaXRpYWxpemVkJC5waXBlKHRha2UoMSkpLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnZpZXdDb250YWluZXIuY2xlYXIoKTtcbiAgICAgICAgICAgIGlmIChyZXF1aXJlZFZlcnNpb24gJiYgdGhpcy52ZXJzaW9uQ29tcGF0aWJpbGl0eVNlcnZpY2UuaXNWZXJzaW9uU3VwcG9ydGVkKHJlcXVpcmVkVmVyc2lvbikpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnZpZXdDb250YWluZXIuY3JlYXRlRW1iZWRkZWRWaWV3KHRoaXMudGVtcGxhdGVSZWYpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG59XG4iXX0=