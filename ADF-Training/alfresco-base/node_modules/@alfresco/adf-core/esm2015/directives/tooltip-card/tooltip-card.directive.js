import { Directive, ElementRef, HostListener, Input } from '@angular/core';
import { Overlay, OverlayPositionBuilder } from '@angular/cdk/overlay';
import { ComponentPortal } from '@angular/cdk/portal';
import { TooltipCardComponent } from './tooltip-card.component';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/cdk/overlay';
export class TooltipCardDirective {
    constructor(overlay, overlayPositionBuilder, elementRef) {
        this.overlay = overlay;
        this.overlayPositionBuilder = overlayPositionBuilder;
        this.elementRef = elementRef;
        this.text = '';
        this.image = '';
        this.width = '300';
        this.htmlContent = '';
        this.originX = 'start';
        this.originY = 'top';
        this.overlayX = 'start';
        this.overlayY = 'bottom';
        this.offsetX = 0;
        this.offsetY = -8;
    }
    ngOnDestroy() {
        this.hide();
    }
    ngOnInit() {
        const positionStrategy = this.overlayPositionBuilder
            .flexibleConnectedTo(this.elementRef)
            .withPositions([{
                originX: this.originX,
                originY: this.originY,
                overlayX: this.overlayX,
                overlayY: this.overlayY,
                offsetY: this.offsetY,
                offsetX: this.offsetX
            }]);
        this.overlayRef = this.overlay.create({ positionStrategy });
    }
    show() {
        const tooltipRef = this.overlayRef.attach(new ComponentPortal(TooltipCardComponent));
        tooltipRef.instance.text = this.text;
        tooltipRef.instance.image = this.image;
        tooltipRef.instance.width = this.width;
        tooltipRef.instance.htmlContent = this.htmlContent;
    }
    hide() {
        this.overlayRef.detach();
    }
}
TooltipCardDirective.ɵfac = function TooltipCardDirective_Factory(t) { return new (t || TooltipCardDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Overlay), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.OverlayPositionBuilder), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
TooltipCardDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: TooltipCardDirective, selectors: [["", "adf-tooltip-card", ""]], hostBindings: function TooltipCardDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("mouseenter", function TooltipCardDirective_mouseenter_HostBindingHandler() { return ctx.show(); })("mouseleave", function TooltipCardDirective_mouseleave_HostBindingHandler() { return ctx.hide(); });
    } }, inputs: { text: ["adf-tooltip-card", "text"], image: "image", width: "width", htmlContent: "htmlContent", originX: "originX", originY: "originY", overlayX: "overlayX", overlayY: "overlayY", offsetX: "offsetX", offsetY: "offsetY" } });
TooltipCardDirective.ctorParameters = () => [
    { type: Overlay },
    { type: OverlayPositionBuilder },
    { type: ElementRef }
];
TooltipCardDirective.propDecorators = {
    text: [{ type: Input, args: ['adf-tooltip-card',] }],
    image: [{ type: Input }],
    width: [{ type: Input }],
    htmlContent: [{ type: Input }],
    originX: [{ type: Input }],
    originY: [{ type: Input }],
    overlayX: [{ type: Input }],
    overlayY: [{ type: Input }],
    offsetX: [{ type: Input }],
    offsetY: [{ type: Input }],
    show: [{ type: HostListener, args: ['mouseenter',] }],
    hide: [{ type: HostListener, args: ['mouseleave',] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TooltipCardDirective, [{
        type: Directive,
        args: [{ selector: '[adf-tooltip-card]' }]
    }], function () { return [{ type: ɵngcc1.Overlay }, { type: ɵngcc1.OverlayPositionBuilder }, { type: ɵngcc0.ElementRef }]; }, { text: [{
            type: Input,
            args: ['adf-tooltip-card']
        }], image: [{
            type: Input
        }], width: [{
            type: Input
        }], htmlContent: [{
            type: Input
        }], originX: [{
            type: Input
        }], originY: [{
            type: Input
        }], overlayX: [{
            type: Input
        }], overlayY: [{
            type: Input
        }], offsetX: [{
            type: Input
        }], offsetY: [{
            type: Input
        }], show: [{
            type: HostListener,
            args: ['mouseenter']
        }], hide: [{
            type: HostListener,
            args: ['mouseleave']
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9vbHRpcC1jYXJkLmRpcmVjdGl2ZS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vaG9tZS90cmF2aXMvYnVpbGQvQWxmcmVzY28vYWxmcmVzY28tbmcyLWNvbXBvbmVudHMvbGliL2NvcmUvZGlyZWN0aXZlcy90b29sdGlwLWNhcmQvdG9vbHRpcC1jYXJkLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFnQkEsT0FBTyxFQUFnQixTQUFTLEVBQUUsVUFBVSxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQXFCLE1BQU0sZUFBZSxDQUFDO0FBQzVHLE9BQU8sRUFBRSxPQUFPLEVBQUUsc0JBQXNCLEVBQWMsTUFBTSxzQkFBc0IsQ0FBQztBQUNuRixPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDdEQsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sMEJBQTBCLENBQUM7OztBQUdoRSxNQUFNLE9BQU8sb0JBQW9CO0FBQUcsSUFlaEMsWUFDWSxPQUFnQixFQUNoQixzQkFBOEMsRUFDOUMsVUFBc0I7QUFDdEMsUUFIZ0IsWUFBTyxHQUFQLE9BQU8sQ0FBUztBQUFDLFFBQ2pCLDJCQUFzQixHQUF0QixzQkFBc0IsQ0FBd0I7QUFBQyxRQUMvQyxlQUFVLEdBQVYsVUFBVSxDQUFZO0FBQUMsUUFoQlIsU0FBSSxHQUFHLEVBQUUsQ0FBQztBQUN6QyxRQUFhLFVBQUssR0FBRyxFQUFFLENBQUM7QUFDeEIsUUFBYSxVQUFLLEdBQUcsS0FBSyxDQUFDO0FBQzNCLFFBQWEsZ0JBQVcsR0FBRyxFQUFFLENBQUM7QUFDOUIsUUFBYSxZQUFPLEdBQStCLE9BQU8sQ0FBQztBQUMzRCxRQUFhLFlBQU8sR0FBZ0MsS0FBSyxDQUFDO0FBQzFELFFBQWEsYUFBUSxHQUErQixPQUFPLENBQUM7QUFDNUQsUUFBYSxhQUFRLEdBQWdDLFFBQVEsQ0FBQztBQUM5RCxRQUFhLFlBQU8sR0FBRyxDQUFDLENBQUM7QUFDekIsUUFBYSxZQUFPLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFDMUIsSUFPSSxDQUFDO0FBQ0wsSUFDSSxXQUFXO0FBQUssUUFDWixJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7QUFDcEIsSUFBSSxDQUFDO0FBQ0wsSUFDSSxRQUFRO0FBQUssUUFDVCxNQUFNLGdCQUFnQixHQUFHLElBQUksQ0FBQyxzQkFBc0I7QUFDNUQsYUFBYSxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDO0FBQ2pELGFBQWEsYUFBYSxDQUFDLENBQUM7QUFDNUIsZ0JBQWdCLE9BQU8sRUFBRSxJQUFJLENBQUMsT0FBTztBQUNyQyxnQkFBZ0IsT0FBTyxFQUFFLElBQUksQ0FBQyxPQUFPO0FBQ3JDLGdCQUFnQixRQUFRLEVBQUUsSUFBSSxDQUFDLFFBQVE7QUFDdkMsZ0JBQWdCLFFBQVEsRUFBRSxJQUFJLENBQUMsUUFBUTtBQUN2QyxnQkFBZ0IsT0FBTyxFQUFFLElBQUksQ0FBQyxPQUFPO0FBQ3JDLGdCQUFnQixPQUFPLEVBQUUsSUFBSSxDQUFDLE9BQU87QUFDckMsYUFBYSxDQUFDLENBQUMsQ0FBQztBQUNoQixRQUNRLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsRUFBRSxnQkFBZ0IsRUFBRSxDQUFDLENBQUM7QUFDcEUsSUFBSSxDQUFDO0FBQ0wsSUFFSSxJQUFJO0FBQ1IsUUFBUSxNQUFNLFVBQVUsR0FDVixJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxJQUFJLGVBQWUsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDLENBQUM7QUFDaEYsUUFBUSxVQUFVLENBQUMsUUFBUSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDO0FBQzdDLFFBQVEsVUFBVSxDQUFDLFFBQVEsQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQztBQUMvQyxRQUFRLFVBQVUsQ0FBQyxRQUFRLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7QUFDL0MsUUFBUSxVQUFVLENBQUMsUUFBUSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDO0FBQzNELElBQUksQ0FBQztBQUNMLElBRUksSUFBSTtBQUNSLFFBQVEsSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLEVBQUUsQ0FBQztBQUNqQyxJQUFJLENBQUM7QUFDTDtnREF2REMsU0FBUyxTQUFDLEVBQUUsUUFBUSxFQUFFLG9CQUFvQixFQUFFOzs7bVBBQ3hDO0FBQUM7QUFBOEMsWUFMM0MsT0FBTztBQUFJLFlBQUYsc0JBQXNCO0FBQUksWUFEVixVQUFVO0FBQUc7QUFBRztBQUF3QyxtQkFRckYsS0FBSyxTQUFDLGtCQUFrQjtBQUFPLG9CQUMvQixLQUFLO0FBQUssb0JBQ1YsS0FBSztBQUFLLDBCQUNWLEtBQUs7QUFBSyxzQkFDVixLQUFLO0FBQUssc0JBQ1YsS0FBSztBQUFLLHVCQUNWLEtBQUs7QUFBSyx1QkFDVixLQUFLO0FBQUssc0JBQ1YsS0FBSztBQUFLLHNCQUNWLEtBQUs7QUFBSyxtQkE2QlYsWUFBWSxTQUFDLFlBQVk7QUFDekIsbUJBU0EsWUFBWSxTQUFDLFlBQVk7QUFDMUI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7b0JBQUU7QUFBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5pbXBvcnQgeyBDb21wb25lbnRSZWYsIERpcmVjdGl2ZSwgRWxlbWVudFJlZiwgSG9zdExpc3RlbmVyLCBJbnB1dCwgT25EZXN0cm95LCBPbkluaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE92ZXJsYXksIE92ZXJsYXlQb3NpdGlvbkJ1aWxkZXIsIE92ZXJsYXlSZWYgfSBmcm9tICdAYW5ndWxhci9jZGsvb3ZlcmxheSc7XG5pbXBvcnQgeyBDb21wb25lbnRQb3J0YWwgfSBmcm9tICdAYW5ndWxhci9jZGsvcG9ydGFsJztcbmltcG9ydCB7IFRvb2x0aXBDYXJkQ29tcG9uZW50IH0gZnJvbSAnLi90b29sdGlwLWNhcmQuY29tcG9uZW50JztcblxuQERpcmVjdGl2ZSh7IHNlbGVjdG9yOiAnW2FkZi10b29sdGlwLWNhcmRdJyB9KVxuZXhwb3J0IGNsYXNzIFRvb2x0aXBDYXJkRGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3kge1xuXG4gICAgQElucHV0KCdhZGYtdG9vbHRpcC1jYXJkJykgdGV4dCA9ICcnO1xuICAgIEBJbnB1dCgpIGltYWdlID0gJyc7XG4gICAgQElucHV0KCkgd2lkdGggPSAnMzAwJztcbiAgICBASW5wdXQoKSBodG1sQ29udGVudCA9ICcnO1xuICAgIEBJbnB1dCgpIG9yaWdpblg6ICdzdGFydCcgfCAnY2VudGVyJyB8ICdlbmQnID0gJ3N0YXJ0JztcbiAgICBASW5wdXQoKSBvcmlnaW5ZOiAndG9wJyB8ICdjZW50ZXInIHwgJ2JvdHRvbScgPSAndG9wJztcbiAgICBASW5wdXQoKSBvdmVybGF5WDogJ3N0YXJ0JyB8ICdjZW50ZXInIHwgJ2VuZCcgPSAnc3RhcnQnO1xuICAgIEBJbnB1dCgpIG92ZXJsYXlZOiAndG9wJyB8ICdjZW50ZXInIHwgJ2JvdHRvbScgPSAnYm90dG9tJztcbiAgICBASW5wdXQoKSBvZmZzZXRYID0gMDtcbiAgICBASW5wdXQoKSBvZmZzZXRZID0gLTg7XG5cbiAgICBwcml2YXRlIG92ZXJsYXlSZWY6IE92ZXJsYXlSZWY7XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHJpdmF0ZSBvdmVybGF5OiBPdmVybGF5LFxuICAgICAgICBwcml2YXRlIG92ZXJsYXlQb3NpdGlvbkJ1aWxkZXI6IE92ZXJsYXlQb3NpdGlvbkJ1aWxkZXIsXG4gICAgICAgIHByaXZhdGUgZWxlbWVudFJlZjogRWxlbWVudFJlZikge1xuICAgIH1cblxuICAgIG5nT25EZXN0cm95KCk6IHZvaWQge1xuICAgICAgICB0aGlzLmhpZGUoKTtcbiAgICB9XG5cbiAgICBuZ09uSW5pdCgpOiB2b2lkIHtcbiAgICAgICAgY29uc3QgcG9zaXRpb25TdHJhdGVneSA9IHRoaXMub3ZlcmxheVBvc2l0aW9uQnVpbGRlclxuICAgICAgICAgICAgLmZsZXhpYmxlQ29ubmVjdGVkVG8odGhpcy5lbGVtZW50UmVmKVxuICAgICAgICAgICAgLndpdGhQb3NpdGlvbnMoW3tcbiAgICAgICAgICAgICAgICBvcmlnaW5YOiB0aGlzLm9yaWdpblgsXG4gICAgICAgICAgICAgICAgb3JpZ2luWTogdGhpcy5vcmlnaW5ZLFxuICAgICAgICAgICAgICAgIG92ZXJsYXlYOiB0aGlzLm92ZXJsYXlYLFxuICAgICAgICAgICAgICAgIG92ZXJsYXlZOiB0aGlzLm92ZXJsYXlZLFxuICAgICAgICAgICAgICAgIG9mZnNldFk6IHRoaXMub2Zmc2V0WSxcbiAgICAgICAgICAgICAgICBvZmZzZXRYOiB0aGlzLm9mZnNldFhcbiAgICAgICAgICAgIH1dKTtcblxuICAgICAgICB0aGlzLm92ZXJsYXlSZWYgPSB0aGlzLm92ZXJsYXkuY3JlYXRlKHsgcG9zaXRpb25TdHJhdGVneSB9KTtcbiAgICB9XG5cbiAgICBASG9zdExpc3RlbmVyKCdtb3VzZWVudGVyJylcbiAgICBzaG93KCkge1xuICAgICAgICBjb25zdCB0b29sdGlwUmVmOiBDb21wb25lbnRSZWY8VG9vbHRpcENhcmRDb21wb25lbnQ+XG4gICAgICAgICAgICA9IHRoaXMub3ZlcmxheVJlZi5hdHRhY2gobmV3IENvbXBvbmVudFBvcnRhbChUb29sdGlwQ2FyZENvbXBvbmVudCkpO1xuICAgICAgICB0b29sdGlwUmVmLmluc3RhbmNlLnRleHQgPSB0aGlzLnRleHQ7XG4gICAgICAgIHRvb2x0aXBSZWYuaW5zdGFuY2UuaW1hZ2UgPSB0aGlzLmltYWdlO1xuICAgICAgICB0b29sdGlwUmVmLmluc3RhbmNlLndpZHRoID0gdGhpcy53aWR0aDtcbiAgICAgICAgdG9vbHRpcFJlZi5pbnN0YW5jZS5odG1sQ29udGVudCA9IHRoaXMuaHRtbENvbnRlbnQ7XG4gICAgfVxuXG4gICAgQEhvc3RMaXN0ZW5lcignbW91c2VsZWF2ZScpXG4gICAgaGlkZSgpIHtcbiAgICAgICAgdGhpcy5vdmVybGF5UmVmLmRldGFjaCgpO1xuICAgIH1cbn1cbiJdfQ==