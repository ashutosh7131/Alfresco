import { Injectable, Injector, ElementRef } from '@angular/core';
import { Overlay, OverlayConfig } from '@angular/cdk/overlay';
import { PortalInjector, ComponentPortal } from '@angular/cdk/portal';
import { ContextMenuOverlayRef } from './context-menu-overlay';
import { CONTEXT_MENU_DATA } from './context-menu.tokens';
import { ContextMenuListComponent } from './context-menu-list.component';
import * as i0 from "@angular/core";
import * as i1 from "@angular/cdk/overlay";
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/cdk/overlay';
const DEFAULT_CONFIG = {
    panelClass: 'cdk-overlay-pane',
    backdropClass: 'cdk-overlay-transparent-backdrop',
    hasBackdrop: true
};
export class ContextMenuOverlayService {
    constructor(injector, overlay) {
        this.injector = injector;
        this.overlay = overlay;
    }
    open(config) {
        const overlayConfig = Object.assign(Object.assign({}, DEFAULT_CONFIG), config);
        const overlay = this.createOverlay(overlayConfig);
        const overlayRef = new ContextMenuOverlayRef(overlay);
        this.attachDialogContainer(overlay, config, overlayRef);
        overlay.backdropClick().subscribe(() => overlayRef.close());
        if (overlayConfig.hasBackdrop) {
            overlay._backdropElement
                .addEventListener('contextmenu', (event) => {
                event.preventDefault();
                overlay._backdropClick.next(null);
            }, true);
        }
        return overlayRef;
    }
    createOverlay(config) {
        const overlayConfig = this.getOverlayConfig(config);
        return this.overlay.create(overlayConfig);
    }
    attachDialogContainer(overlay, config, contextMenuOverlayRef) {
        const injector = this.createInjector(config, contextMenuOverlayRef);
        const containerPortal = new ComponentPortal(ContextMenuListComponent, null, injector);
        const containerRef = overlay.attach(containerPortal);
        return containerRef.instance;
    }
    createInjector(config, contextMenuOverlayRef) {
        const injectionTokens = new WeakMap();
        injectionTokens.set(ContextMenuOverlayRef, contextMenuOverlayRef);
        injectionTokens.set(CONTEXT_MENU_DATA, config.data);
        return new PortalInjector(this.injector, injectionTokens);
    }
    getOverlayConfig(config) {
        const { clientY, clientX } = config.source;
        const fakeElement = {
            getBoundingClientRect: () => ({
                bottom: clientY,
                height: 0,
                left: clientX,
                right: clientX,
                top: clientY,
                width: 0
            })
        };
        const positionStrategy = this.overlay.position()
            .connectedTo(new ElementRef(fakeElement), { originX: 'start', originY: 'bottom' }, { overlayX: 'start', overlayY: 'top' })
            .withFallbackPosition({ originX: 'start', originY: 'top' }, { overlayX: 'start', overlayY: 'bottom' })
            .withFallbackPosition({ originX: 'end', originY: 'top' }, { overlayX: 'start', overlayY: 'top' })
            .withFallbackPosition({ originX: 'start', originY: 'top' }, { overlayX: 'end', overlayY: 'top' })
            .withFallbackPosition({ originX: 'end', originY: 'center' }, { overlayX: 'start', overlayY: 'center' })
            .withFallbackPosition({ originX: 'start', originY: 'center' }, { overlayX: 'end', overlayY: 'center' });
        const overlayConfig = new OverlayConfig({
            hasBackdrop: config.hasBackdrop,
            backdropClass: config.backdropClass,
            panelClass: config.panelClass,
            scrollStrategy: this.overlay.scrollStrategies.close(),
            positionStrategy
        });
        return overlayConfig;
    }
}
ContextMenuOverlayService.ɵfac = function ContextMenuOverlayService_Factory(t) { return new (t || ContextMenuOverlayService)(ɵngcc0.ɵɵinject(ɵngcc0.Injector), ɵngcc0.ɵɵinject(ɵngcc1.Overlay)); };
ContextMenuOverlayService.ɵprov = i0.ɵɵdefineInjectable({ factory: function ContextMenuOverlayService_Factory() { return new ContextMenuOverlayService(i0.ɵɵinject(i0.INJECTOR), i0.ɵɵinject(i1.Overlay)); }, token: ContextMenuOverlayService, providedIn: "root" });
ContextMenuOverlayService.ctorParameters = () => [
    { type: Injector },
    { type: Overlay }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ContextMenuOverlayService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc0.Injector }, { type: ɵngcc1.Overlay }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,