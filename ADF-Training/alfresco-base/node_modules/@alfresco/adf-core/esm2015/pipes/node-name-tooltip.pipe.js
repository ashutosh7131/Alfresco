/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Pipe } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
export class NodeNameTooltipPipe {
    transform(node) {
        if (node) {
            return this.getNodeTooltip(node);
        }
        return null;
    }
    containsLine(lines, line) {
        return lines.some((item) => {
            return item.toLowerCase() === line.toLowerCase();
        });
    }
    removeDuplicateLines(lines) {
        const reducer = (acc, line) => {
            if (!this.containsLine(acc, line)) {
                acc.push(line);
            }
            return acc;
        };
        return lines.reduce(reducer, []);
    }
    getNodeTooltip(node) {
        if (!node || !node.entry) {
            return null;
        }
        const { entry: { properties, name } } = node;
        const lines = [name];
        if (properties) {
            const { 'cm:title': title, 'cm:description': description } = properties;
            if (title && description) {
                lines[0] = title;
                lines[1] = description;
            }
            if (title) {
                lines[1] = title;
            }
            if (description) {
                lines[1] = description;
            }
        }
        return this.removeDuplicateLines(lines).join(`\n`);
    }
}
NodeNameTooltipPipe.ɵfac = function NodeNameTooltipPipe_Factory(t) { return new (t || NodeNameTooltipPipe)(); };
NodeNameTooltipPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "adfNodeNameTooltip", type: NodeNameTooltipPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NodeNameTooltipPipe, [{
        type: Pipe,
        args: [{
                name: 'adfNodeNameTooltip'
            }]
    }], null, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9kZS1uYW1lLXRvb2x0aXAucGlwZS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vaG9tZS90cmF2aXMvYnVpbGQvQWxmcmVzY28vYWxmcmVzY28tbmcyLWNvbXBvbmVudHMvbGliL2NvcmUvcGlwZXMvbm9kZS1uYW1lLXRvb2x0aXAucGlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBRUgsT0FBTyxFQUFFLElBQUksRUFBaUIsTUFBTSxlQUFlLENBQUM7O0FBTXBELE1BQU0sT0FBTyxtQkFBbUI7QUFBRyxJQUUvQixTQUFTLENBQUMsSUFBZTtBQUFJLFFBQ3pCLElBQUksSUFBSSxFQUFFO0FBQ2xCLFlBQVksT0FBTyxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQzdDLFNBQVM7QUFDVCxRQUFRLE9BQU8sSUFBSSxDQUFDO0FBQ3BCLElBQUksQ0FBQztBQUNMLElBQ1ksWUFBWSxDQUFDLEtBQWUsRUFBRSxJQUFZO0FBQUksUUFDbEQsT0FBTyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBWSxFQUFFLEVBQUU7QUFDM0MsWUFBWSxPQUFPLElBQUksQ0FBQyxXQUFXLEVBQUUsS0FBSyxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7QUFDN0QsUUFBUSxDQUFDLENBQUMsQ0FBQztBQUNYLElBQUksQ0FBQztBQUNMLElBQ1ksb0JBQW9CLENBQUMsS0FBZTtBQUFJLFFBQzVDLE1BQU0sT0FBTyxHQUFHLENBQUMsR0FBYSxFQUFFLElBQVksRUFBWSxFQUFFO0FBQ2xFLFlBQVksSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxFQUFFO0FBQUUsZ0JBQUEsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUFDLGFBQUM7QUFDbEUsWUFBWSxPQUFPLEdBQUcsQ0FBQztBQUN2QixRQUFRLENBQUMsQ0FBQztBQUNWLFFBQ1EsT0FBTyxLQUFLLENBQUMsTUFBTSxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsQ0FBQztBQUN6QyxJQUFJLENBQUM7QUFDTCxJQUNZLGNBQWMsQ0FBQyxJQUFlO0FBQUksUUFDdEMsSUFBSSxDQUFDLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUU7QUFDbEMsWUFBWSxPQUFPLElBQUksQ0FBQztBQUN4QixTQUFTO0FBQ1QsUUFDUSxNQUFNLEVBQUUsS0FBSyxFQUFFLEVBQUUsVUFBVSxFQUFFLElBQUksRUFBRSxFQUFFLEdBQUcsSUFBSSxDQUFDO0FBQ3JELFFBQVEsTUFBTSxLQUFLLEdBQUcsQ0FBRSxJQUFJLENBQUUsQ0FBQztBQUMvQixRQUNRLElBQUksVUFBVSxFQUFFO0FBQ3hCLFlBQVksTUFBTSxFQUNGLFVBQVUsRUFBRSxLQUFLLEVBQ2pCLGdCQUFnQixFQUFFLFdBQVcsRUFDaEMsR0FBRyxVQUFVLENBQUM7QUFDM0IsWUFDWSxJQUFJLEtBQUssSUFBSSxXQUFXLEVBQUU7QUFDdEMsZ0JBQWdCLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUM7QUFDakMsZ0JBQWdCLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBRyxXQUFXLENBQUM7QUFDdkMsYUFBYTtBQUNiLFlBQ1ksSUFBSSxLQUFLLEVBQUU7QUFDdkIsZ0JBQWdCLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUM7QUFDakMsYUFBYTtBQUNiLFlBQ1ksSUFBSSxXQUFXLEVBQUU7QUFDN0IsZ0JBQWdCLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBRyxXQUFXLENBQUM7QUFDdkMsYUFBYTtBQUNiLFNBQVM7QUFDVCxRQUNRLE9BQU8sSUFBSSxDQUFDLG9CQUFvQixDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUMzRCxJQUFJLENBQUM7QUFDTDsrQ0F6REMsSUFBSSxTQUFDLGtCQUNGLElBQUksRUFBRSxvQkFBb0I7S0FDN0I7Ozs7OzswQkFDSTtBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgUGlwZSwgUGlwZVRyYW5zZm9ybSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTm9kZUVudHJ5IH0gZnJvbSAnQGFsZnJlc2NvL2pzLWFwaSc7XG5cbkBQaXBlKHtcbiAgICBuYW1lOiAnYWRmTm9kZU5hbWVUb29sdGlwJ1xufSlcbmV4cG9ydCBjbGFzcyBOb2RlTmFtZVRvb2x0aXBQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XG5cbiAgICB0cmFuc2Zvcm0obm9kZTogTm9kZUVudHJ5KTogc3RyaW5nIHtcbiAgICAgICAgaWYgKG5vZGUpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmdldE5vZGVUb29sdGlwKG5vZGUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHByaXZhdGUgY29udGFpbnNMaW5lKGxpbmVzOiBzdHJpbmdbXSwgbGluZTogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiBsaW5lcy5zb21lKChpdGVtOiBzdHJpbmcpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBpdGVtLnRvTG93ZXJDYXNlKCkgPT09IGxpbmUudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSByZW1vdmVEdXBsaWNhdGVMaW5lcyhsaW5lczogc3RyaW5nW10pOiBzdHJpbmdbXSB7XG4gICAgICAgIGNvbnN0IHJlZHVjZXIgPSAoYWNjOiBzdHJpbmdbXSwgbGluZTogc3RyaW5nKTogc3RyaW5nW10gPT4ge1xuICAgICAgICAgICAgaWYgKCF0aGlzLmNvbnRhaW5zTGluZShhY2MsIGxpbmUpKSB7IGFjYy5wdXNoKGxpbmUpOyB9XG4gICAgICAgICAgICByZXR1cm4gYWNjO1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBsaW5lcy5yZWR1Y2UocmVkdWNlciwgW10pO1xuICAgIH1cblxuICAgIHByaXZhdGUgZ2V0Tm9kZVRvb2x0aXAobm9kZTogTm9kZUVudHJ5KTogc3RyaW5nIHtcbiAgICAgICAgaWYgKCFub2RlIHx8ICFub2RlLmVudHJ5KSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHsgZW50cnk6IHsgcHJvcGVydGllcywgbmFtZSB9IH0gPSBub2RlO1xuICAgICAgICBjb25zdCBsaW5lcyA9IFsgbmFtZSBdO1xuXG4gICAgICAgIGlmIChwcm9wZXJ0aWVzKSB7XG4gICAgICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICAgICAgJ2NtOnRpdGxlJzogdGl0bGUsXG4gICAgICAgICAgICAgICAgJ2NtOmRlc2NyaXB0aW9uJzogZGVzY3JpcHRpb25cbiAgICAgICAgICAgIH0gPSBwcm9wZXJ0aWVzO1xuXG4gICAgICAgICAgICBpZiAodGl0bGUgJiYgZGVzY3JpcHRpb24pIHtcbiAgICAgICAgICAgICAgICBsaW5lc1swXSA9IHRpdGxlO1xuICAgICAgICAgICAgICAgIGxpbmVzWzFdID0gZGVzY3JpcHRpb247XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0aXRsZSkge1xuICAgICAgICAgICAgICAgIGxpbmVzWzFdID0gdGl0bGU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChkZXNjcmlwdGlvbikge1xuICAgICAgICAgICAgICAgIGxpbmVzWzFdID0gZGVzY3JpcHRpb247XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5yZW1vdmVEdXBsaWNhdGVMaW5lcyhsaW5lcykuam9pbihgXFxuYCk7XG4gICAgfVxufVxuIl19