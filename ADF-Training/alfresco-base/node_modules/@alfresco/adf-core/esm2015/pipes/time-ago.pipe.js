/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import moment from 'moment-es6';
import { Pipe } from '@angular/core';
import { AppConfigService } from '../app-config/app-config.service';
import { UserPreferenceValues, UserPreferencesService } from '../services/user-preferences.service';
import { DatePipe } from '@angular/common';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../services/user-preferences.service';
import * as ɵngcc2 from '../app-config/app-config.service';
export class TimeAgoPipe {
    constructor(userPreferenceService, appConfig) {
        this.userPreferenceService = userPreferenceService;
        this.appConfig = appConfig;
        this.onDestroy$ = new Subject();
        this.userPreferenceService
            .select(UserPreferenceValues.Locale)
            .pipe(takeUntil(this.onDestroy$))
            .subscribe(locale => {
            this.defaultLocale = locale || TimeAgoPipe.DEFAULT_LOCALE;
        });
        this.defaultDateTimeFormat = this.appConfig.get('dateValues.defaultDateTimeFormat', TimeAgoPipe.DEFAULT_DATE_TIME_FORMAT);
    }
    transform(value, locale) {
        if (value !== null && value !== undefined) {
            const actualLocale = locale || this.defaultLocale;
            const then = moment(value);
            const diff = moment().locale(actualLocale).diff(then, 'days');
            if (diff > 7) {
                const datePipe = new DatePipe(actualLocale);
                return datePipe.transform(value, this.defaultDateTimeFormat);
            }
            else {
                return then.locale(actualLocale).fromNow();
            }
        }
        return '';
    }
    ngOnDestroy() {
        this.onDestroy$.next(true);
        this.onDestroy$.complete();
    }
}
TimeAgoPipe.ɵfac = function TimeAgoPipe_Factory(t) { return new (t || TimeAgoPipe)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.UserPreferencesService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.AppConfigService)); };
TimeAgoPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "adfTimeAgo", type: TimeAgoPipe, pure: true });
TimeAgoPipe.DEFAULT_LOCALE = 'en-US';
TimeAgoPipe.DEFAULT_DATE_TIME_FORMAT = 'dd/MM/yyyy HH:mm';
TimeAgoPipe.ctorParameters = () => [
    { type: UserPreferencesService },
    { type: AppConfigService }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TimeAgoPipe, [{
        type: Pipe,
        args: [{
                name: 'adfTimeAgo'
            }]
    }], function () { return [{ type: ɵngcc1.UserPreferencesService }, { type: ɵngcc2.AppConfigService }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGltZS1hZ28ucGlwZS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vaG9tZS90cmF2aXMvYnVpbGQvQWxmcmVzY28vYWxmcmVzY28tbmcyLWNvbXBvbmVudHMvbGliL2NvcmUvcGlwZXMvdGltZS1hZ28ucGlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBRUgsT0FBTyxNQUFNLE1BQU0sWUFBWSxDQUFDO0FBQ2hDLE9BQU8sRUFBRSxJQUFJLEVBQTRCLE1BQU0sZUFBZSxDQUFDO0FBQy9ELE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGtDQUFrQyxDQUFDO0FBQ3BFLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxzQkFBc0IsRUFBRSxNQUFNLHNDQUFzQyxDQUFDO0FBQ3BHLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMzQyxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQy9CLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7OztBQUszQyxNQUFNLE9BQU8sV0FBVztBQUFHLElBVXZCLFlBQW1CLHFCQUE2QyxFQUM3QyxTQUEyQjtBQUNsRCxRQUZ1QiwwQkFBcUIsR0FBckIscUJBQXFCLENBQXdCO0FBQUMsUUFDOUMsY0FBUyxHQUFULFNBQVMsQ0FBa0I7QUFBQyxRQUh2QyxlQUFVLEdBQUcsSUFBSSxPQUFPLEVBQVcsQ0FBQztBQUNoRCxRQUdRLElBQUksQ0FBQyxxQkFBcUI7QUFDbEMsYUFBYSxNQUFNLENBQUMsb0JBQW9CLENBQUMsTUFBTSxDQUFDO0FBQ2hELGFBQWEsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7QUFDN0MsYUFBYSxTQUFTLENBQUMsTUFBTSxDQUFDLEVBQUU7QUFDaEMsWUFBZ0IsSUFBSSxDQUFDLGFBQWEsR0FBRyxNQUFNLElBQUksV0FBVyxDQUFDLGNBQWMsQ0FBQztBQUMxRSxRQUFZLENBQUMsQ0FBQyxDQUFDO0FBQ2YsUUFBUSxJQUFJLENBQUMscUJBQXFCLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQVMsa0NBQWtDLEVBQUUsV0FBVyxDQUFDLHdCQUF3QixDQUFDLENBQUM7QUFDMUksSUFBSSxDQUFDO0FBQ0wsSUFDSSxTQUFTLENBQUMsS0FBVyxFQUFFLE1BQWU7QUFDMUMsUUFBUSxJQUFJLEtBQUssS0FBSyxJQUFJLElBQUksS0FBSyxLQUFLLFNBQVMsRUFBRztBQUNwRCxZQUFZLE1BQU0sWUFBWSxHQUFHLE1BQU0sSUFBSSxJQUFJLENBQUMsYUFBYSxDQUFDO0FBQzlELFlBQVksTUFBTSxJQUFJLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ3ZDLFlBQVksTUFBTSxJQUFJLEdBQUcsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUM7QUFDMUUsWUFBWSxJQUFLLElBQUksR0FBRyxDQUFDLEVBQUU7QUFDM0IsZ0JBQWdCLE1BQU0sUUFBUSxHQUFhLElBQUksUUFBUSxDQUFDLFlBQVksQ0FBQyxDQUFDO0FBQ3RFLGdCQUFnQixPQUFPLFFBQVEsQ0FBQyxTQUFTLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO0FBQzdFLGFBQWE7QUFBQyxpQkFBSztBQUNuQixnQkFBZ0IsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDO0FBQzNELGFBQWE7QUFDYixTQUFTO0FBQ1QsUUFBUSxPQUFPLEVBQUUsQ0FBQztBQUNsQixJQUFJLENBQUM7QUFDTCxJQUNJLFdBQVc7QUFDZixRQUFRLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ25DLFFBQVEsSUFBSSxDQUFDLFVBQVUsQ0FBQyxRQUFRLEVBQUUsQ0FBQztBQUNuQyxJQUFJLENBQUM7QUFDTDs7K0ZBQUM7QUF0Q1UsMEJBQWMsR0FBRyxPQUFPLENBQUM7QUFDekIsb0NBQXdCLEdBQUcsa0JBQWtCLENBQUMsQUFIcEQ7QUFBQztFQUhMLElBQUksU0FBQyxrQkFDRixJQUFJLHJDQUVtQyxZQVJaLHNCQUFzQjtDQU0zQyxZQUFZLGNBQ3JCLDNCQVB3RCxZQURoRCxnQkFBZ0I7QUFBRzs7Ozs7OzBIQUFFO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgbW9tZW50IGZyb20gJ21vbWVudC1lczYnO1xuaW1wb3J0IHsgUGlwZSwgUGlwZVRyYW5zZm9ybSwgT25EZXN0cm95IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBBcHBDb25maWdTZXJ2aWNlIH0gZnJvbSAnLi4vYXBwLWNvbmZpZy9hcHAtY29uZmlnLnNlcnZpY2UnO1xuaW1wb3J0IHsgVXNlclByZWZlcmVuY2VWYWx1ZXMsIFVzZXJQcmVmZXJlbmNlc1NlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlcy91c2VyLXByZWZlcmVuY2VzLnNlcnZpY2UnO1xuaW1wb3J0IHsgRGF0ZVBpcGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgdGFrZVVudGlsIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5AUGlwZSh7XG4gICAgbmFtZTogJ2FkZlRpbWVBZ28nXG59KVxuZXhwb3J0IGNsYXNzIFRpbWVBZ29QaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSwgT25EZXN0cm95IHtcblxuICAgIHN0YXRpYyBERUZBVUxUX0xPQ0FMRSA9ICdlbi1VUyc7XG4gICAgc3RhdGljIERFRkFVTFRfREFURV9USU1FX0ZPUk1BVCA9ICdkZC9NTS95eXl5IEhIOm1tJztcblxuICAgIGRlZmF1bHRMb2NhbGU6IHN0cmluZztcbiAgICBkZWZhdWx0RGF0ZVRpbWVGb3JtYXQ6IHN0cmluZztcblxuICAgIHByaXZhdGUgb25EZXN0cm95JCA9IG5ldyBTdWJqZWN0PGJvb2xlYW4+KCk7XG5cbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgdXNlclByZWZlcmVuY2VTZXJ2aWNlOiBVc2VyUHJlZmVyZW5jZXNTZXJ2aWNlLFxuICAgICAgICAgICAgICAgIHB1YmxpYyBhcHBDb25maWc6IEFwcENvbmZpZ1NlcnZpY2UpIHtcbiAgICAgICAgdGhpcy51c2VyUHJlZmVyZW5jZVNlcnZpY2VcbiAgICAgICAgICAgIC5zZWxlY3QoVXNlclByZWZlcmVuY2VWYWx1ZXMuTG9jYWxlKVxuICAgICAgICAgICAgLnBpcGUodGFrZVVudGlsKHRoaXMub25EZXN0cm95JCkpXG4gICAgICAgICAgICAuc3Vic2NyaWJlKGxvY2FsZSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5kZWZhdWx0TG9jYWxlID0gbG9jYWxlIHx8IFRpbWVBZ29QaXBlLkRFRkFVTFRfTE9DQUxFO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuZGVmYXVsdERhdGVUaW1lRm9ybWF0ID0gdGhpcy5hcHBDb25maWcuZ2V0PHN0cmluZz4oJ2RhdGVWYWx1ZXMuZGVmYXVsdERhdGVUaW1lRm9ybWF0JywgVGltZUFnb1BpcGUuREVGQVVMVF9EQVRFX1RJTUVfRk9STUFUKTtcbiAgICB9XG5cbiAgICB0cmFuc2Zvcm0odmFsdWU6IERhdGUsIGxvY2FsZT86IHN0cmluZykge1xuICAgICAgICBpZiAodmFsdWUgIT09IG51bGwgJiYgdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcbiAgICAgICAgICAgIGNvbnN0IGFjdHVhbExvY2FsZSA9IGxvY2FsZSB8fCB0aGlzLmRlZmF1bHRMb2NhbGU7XG4gICAgICAgICAgICBjb25zdCB0aGVuID0gbW9tZW50KHZhbHVlKTtcbiAgICAgICAgICAgIGNvbnN0IGRpZmYgPSBtb21lbnQoKS5sb2NhbGUoYWN0dWFsTG9jYWxlKS5kaWZmKHRoZW4sICdkYXlzJyk7XG4gICAgICAgICAgICBpZiAoIGRpZmYgPiA3KSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZGF0ZVBpcGU6IERhdGVQaXBlID0gbmV3IERhdGVQaXBlKGFjdHVhbExvY2FsZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGRhdGVQaXBlLnRyYW5zZm9ybSh2YWx1ZSwgdGhpcy5kZWZhdWx0RGF0ZVRpbWVGb3JtYXQpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhlbi5sb2NhbGUoYWN0dWFsTG9jYWxlKS5mcm9tTm93KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICcnO1xuICAgIH1cblxuICAgIG5nT25EZXN0cm95KCkge1xuICAgICAgICB0aGlzLm9uRGVzdHJveSQubmV4dCh0cnVlKTtcbiAgICAgICAgdGhpcy5vbkRlc3Ryb3kkLmNvbXBsZXRlKCk7XG4gICAgfVxufVxuIl19