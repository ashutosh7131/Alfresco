/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { DatePipe } from '@angular/common';
import { Pipe } from '@angular/core';
import { AppConfigService } from '../app-config/app-config.service';
import { UserPreferencesService, UserPreferenceValues } from '../services/user-preferences.service';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../services/user-preferences.service';
import * as ɵngcc2 from '../app-config/app-config.service';
export class LocalizedDatePipe {
    constructor(userPreferenceService, appConfig) {
        this.userPreferenceService = userPreferenceService;
        this.appConfig = appConfig;
        this.defaultLocale = LocalizedDatePipe.DEFAULT_LOCALE;
        this.defaultFormat = LocalizedDatePipe.DEFAULT_DATE_FORMAT;
        this.onDestroy$ = new Subject();
        if (this.userPreferenceService) {
            this.userPreferenceService
                .select(UserPreferenceValues.Locale)
                .pipe(takeUntil(this.onDestroy$))
                .subscribe(locale => {
                if (locale) {
                    this.defaultLocale = locale;
                }
            });
        }
        if (this.appConfig) {
            this.defaultFormat = this.appConfig.get('dateValues.defaultDateFormat', LocalizedDatePipe.DEFAULT_DATE_FORMAT);
        }
    }
    transform(value, format, locale) {
        const actualFormat = format || this.defaultFormat;
        const actualLocale = locale || this.defaultLocale;
        const datePipe = new DatePipe(actualLocale);
        return datePipe.transform(value, actualFormat);
    }
    ngOnDestroy() {
        this.onDestroy$.next(true);
        this.onDestroy$.complete();
    }
}
LocalizedDatePipe.ɵfac = function LocalizedDatePipe_Factory(t) { return new (t || LocalizedDatePipe)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.UserPreferencesService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.AppConfigService)); };
LocalizedDatePipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "adfLocalizedDate", type: LocalizedDatePipe, pure: false });
LocalizedDatePipe.DEFAULT_LOCALE = 'en-US';
LocalizedDatePipe.DEFAULT_DATE_FORMAT = 'mediumDate';
LocalizedDatePipe.ctorParameters = () => [
    { type: UserPreferencesService },
    { type: AppConfigService }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(LocalizedDatePipe, [{
        type: Pipe,
        args: [{
                name: 'adfLocalizedDate',
                pure: false
            }]
    }], function () { return [{ type: ɵngcc1.UserPreferencesService }, { type: ɵngcc2.AppConfigService }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9jYWxpemVkLWRhdGUucGlwZS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vaG9tZS90cmF2aXMvYnVpbGQvQWxmcmVzY28vYWxmcmVzY28tbmcyLWNvbXBvbmVudHMvbGliL2NvcmUvcGlwZXMvbG9jYWxpemVkLWRhdGUucGlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBRUgsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQzNDLE9BQU8sRUFBRSxJQUFJLEVBQTRCLE1BQU0sZUFBZSxDQUFDO0FBQy9ELE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGtDQUFrQyxDQUFDO0FBQ3BFLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxvQkFBb0IsRUFBRSxNQUFNLHNDQUFzQyxDQUFDO0FBQ3BHLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDL0IsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDOzs7O0FBTTNDLE1BQU0sT0FBTyxpQkFBaUI7QUFBRyxJQVU3QixZQUFtQixxQkFBOEMsRUFDOUMsU0FBNEI7QUFDbkQsUUFGdUIsMEJBQXFCLEdBQXJCLHFCQUFxQixDQUF5QjtBQUFDLFFBQy9DLGNBQVMsR0FBVCxTQUFTLENBQW1CO0FBQUMsUUFOaEQsa0JBQWEsR0FBVyxpQkFBaUIsQ0FBQyxjQUFjLENBQUM7QUFDN0QsUUFBSSxrQkFBYSxHQUFXLGlCQUFpQixDQUFDLG1CQUFtQixDQUFDO0FBQ2xFLFFBQ1ksZUFBVSxHQUFHLElBQUksT0FBTyxFQUFXLENBQUM7QUFDaEQsUUFJUSxJQUFJLElBQUksQ0FBQyxxQkFBcUIsRUFBRTtBQUN4QyxZQUFZLElBQUksQ0FBQyxxQkFBcUI7QUFDdEMsaUJBQWlCLE1BQU0sQ0FBQyxvQkFBb0IsQ0FBQyxNQUFNLENBQUM7QUFDcEQsaUJBQWlCLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0FBQ2pELGlCQUFpQixTQUFTLENBQUMsTUFBTSxDQUFDLEVBQUU7QUFDcEMsZ0JBQW9CLElBQUksTUFBTSxFQUFFO0FBQ2hDLG9CQUF3QixJQUFJLENBQUMsYUFBYSxHQUFHLE1BQU0sQ0FBQztBQUNwRCxpQkFBcUI7QUFDckIsWUFBZ0IsQ0FBQyxDQUFDLENBQUM7QUFDbkIsU0FBUztBQUNULFFBQ1EsSUFBSSxJQUFJLENBQUMsU0FBUyxFQUFFO0FBQzVCLFlBQVksSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBUyw4QkFBOEIsRUFBRSxpQkFBaUIsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO0FBQ25JLFNBQVM7QUFDVCxJQUFJLENBQUM7QUFDTCxJQUNJLFNBQVMsQ0FBQyxLQUFVLEVBQUUsTUFBZSxFQUFFLE1BQWU7QUFBSSxRQUN0RCxNQUFNLFlBQVksR0FBRyxNQUFNLElBQUksSUFBSSxDQUFDLGFBQWEsQ0FBQztBQUMxRCxRQUFRLE1BQU0sWUFBWSxHQUFHLE1BQU0sSUFBSSxJQUFJLENBQUMsYUFBYSxDQUFDO0FBQzFELFFBQVEsTUFBTSxRQUFRLEdBQWEsSUFBSSxRQUFRLENBQUMsWUFBWSxDQUFDLENBQUM7QUFDOUQsUUFBUSxPQUFPLFFBQVEsQ0FBQyxTQUFTLENBQUMsS0FBSyxFQUFFLFlBQVksQ0FBQyxDQUFDO0FBQ3ZELElBQUksQ0FBQztBQUNMLElBQ0ksV0FBVztBQUNmLFFBQVEsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDbkMsUUFBUSxJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsRUFBRSxDQUFDO0FBQ25DLElBQUksQ0FBQztBQUNMOztrSEFDQTtBQXZDVyxnQ0FBYyxHQUFHLE9BQU8sQ0FBQztBQUN6QixxQ0FBbUIsR0FBRyxZQUFZLENBQUMsQUFIekM7QUFBQztFQUpMLElBQUksU0FBQyxrQkFDRixJQUFJLHJDQUd5QyxZQVJ4QyxzQkFBc0I7Q0FLckIsa0JBQWtCLG5CQUxPLFlBRDFCLGdCQUFnQjtBQUFHO0dBT3hCLElBQUksRUFBRSxLQUFLLGNBQ2Q7Ozs7OzswSEFSNkI7QUFBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IERhdGVQaXBlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IFBpcGUsIFBpcGVUcmFuc2Zvcm0sIE9uRGVzdHJveSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQXBwQ29uZmlnU2VydmljZSB9IGZyb20gJy4uL2FwcC1jb25maWcvYXBwLWNvbmZpZy5zZXJ2aWNlJztcbmltcG9ydCB7IFVzZXJQcmVmZXJlbmNlc1NlcnZpY2UsIFVzZXJQcmVmZXJlbmNlVmFsdWVzIH0gZnJvbSAnLi4vc2VydmljZXMvdXNlci1wcmVmZXJlbmNlcy5zZXJ2aWNlJztcbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IHRha2VVbnRpbCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuQFBpcGUoe1xuICAgIG5hbWU6ICdhZGZMb2NhbGl6ZWREYXRlJyxcbiAgICBwdXJlOiBmYWxzZVxufSlcbmV4cG9ydCBjbGFzcyBMb2NhbGl6ZWREYXRlUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0sIE9uRGVzdHJveSB7XG5cbiAgICBzdGF0aWMgREVGQVVMVF9MT0NBTEUgPSAnZW4tVVMnO1xuICAgIHN0YXRpYyBERUZBVUxUX0RBVEVfRk9STUFUID0gJ21lZGl1bURhdGUnO1xuXG4gICAgZGVmYXVsdExvY2FsZTogc3RyaW5nID0gTG9jYWxpemVkRGF0ZVBpcGUuREVGQVVMVF9MT0NBTEU7XG4gICAgZGVmYXVsdEZvcm1hdDogc3RyaW5nID0gTG9jYWxpemVkRGF0ZVBpcGUuREVGQVVMVF9EQVRFX0ZPUk1BVDtcblxuICAgIHByaXZhdGUgb25EZXN0cm95JCA9IG5ldyBTdWJqZWN0PGJvb2xlYW4+KCk7XG5cbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgdXNlclByZWZlcmVuY2VTZXJ2aWNlPzogVXNlclByZWZlcmVuY2VzU2VydmljZSxcbiAgICAgICAgICAgICAgICBwdWJsaWMgYXBwQ29uZmlnPzogQXBwQ29uZmlnU2VydmljZSkge1xuXG4gICAgICAgIGlmICh0aGlzLnVzZXJQcmVmZXJlbmNlU2VydmljZSkge1xuICAgICAgICAgICAgdGhpcy51c2VyUHJlZmVyZW5jZVNlcnZpY2VcbiAgICAgICAgICAgICAgICAuc2VsZWN0KFVzZXJQcmVmZXJlbmNlVmFsdWVzLkxvY2FsZSlcbiAgICAgICAgICAgICAgICAucGlwZSh0YWtlVW50aWwodGhpcy5vbkRlc3Ryb3kkKSlcbiAgICAgICAgICAgICAgICAuc3Vic2NyaWJlKGxvY2FsZSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChsb2NhbGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGVmYXVsdExvY2FsZSA9IGxvY2FsZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuYXBwQ29uZmlnKSB7XG4gICAgICAgICAgICB0aGlzLmRlZmF1bHRGb3JtYXQgPSB0aGlzLmFwcENvbmZpZy5nZXQ8c3RyaW5nPignZGF0ZVZhbHVlcy5kZWZhdWx0RGF0ZUZvcm1hdCcsIExvY2FsaXplZERhdGVQaXBlLkRFRkFVTFRfREFURV9GT1JNQVQpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdHJhbnNmb3JtKHZhbHVlOiBhbnksIGZvcm1hdD86IHN0cmluZywgbG9jYWxlPzogc3RyaW5nKTogYW55IHtcbiAgICAgICAgY29uc3QgYWN0dWFsRm9ybWF0ID0gZm9ybWF0IHx8IHRoaXMuZGVmYXVsdEZvcm1hdDtcbiAgICAgICAgY29uc3QgYWN0dWFsTG9jYWxlID0gbG9jYWxlIHx8IHRoaXMuZGVmYXVsdExvY2FsZTtcbiAgICAgICAgY29uc3QgZGF0ZVBpcGU6IERhdGVQaXBlID0gbmV3IERhdGVQaXBlKGFjdHVhbExvY2FsZSk7XG4gICAgICAgIHJldHVybiBkYXRlUGlwZS50cmFuc2Zvcm0odmFsdWUsIGFjdHVhbEZvcm1hdCk7XG4gICAgfVxuXG4gICAgbmdPbkRlc3Ryb3koKSB7XG4gICAgICAgIHRoaXMub25EZXN0cm95JC5uZXh0KHRydWUpO1xuICAgICAgICB0aGlzLm9uRGVzdHJveSQuY29tcGxldGUoKTtcbiAgICB9XG5cbn1cbiJdfQ==