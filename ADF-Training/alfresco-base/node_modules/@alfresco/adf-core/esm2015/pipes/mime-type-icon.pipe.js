/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Pipe } from '@angular/core';
import { ThumbnailService } from '../services/thumbnail.service';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../services/thumbnail.service';
export class MimeTypeIconPipe {
    constructor(thumbnailService) {
        this.thumbnailService = thumbnailService;
    }
    transform(text) {
        return this.thumbnailService.getMimeTypeIcon(text);
    }
}
MimeTypeIconPipe.ɵfac = function MimeTypeIconPipe_Factory(t) { return new (t || MimeTypeIconPipe)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ThumbnailService)); };
MimeTypeIconPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "adfMimeTypeIcon", type: MimeTypeIconPipe, pure: true });
MimeTypeIconPipe.ctorParameters = () => [
    { type: ThumbnailService }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MimeTypeIconPipe, [{
        type: Pipe,
        args: [{
                name: 'adfMimeTypeIcon'
            }]
    }], function () { return [{ type: ɵngcc1.ThumbnailService }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWltZS10eXBlLWljb24ucGlwZS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vaG9tZS90cmF2aXMvYnVpbGQvQWxmcmVzY28vYWxmcmVzY28tbmcyLWNvbXBvbmVudHMvbGliL2NvcmUvcGlwZXMvbWltZS10eXBlLWljb24ucGlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBRUgsT0FBTyxFQUFFLElBQUksRUFBaUIsTUFBTSxlQUFlLENBQUM7QUFDcEQsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sK0JBQStCLENBQUM7OztBQUtqRSxNQUFNLE9BQU8sZ0JBQWdCO0FBQUcsSUFFNUIsWUFBb0IsZ0JBQWtDO0FBQUksUUFBdEMscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFrQjtBQUFDLElBQUcsQ0FBQztBQUMvRCxJQUNJLFNBQVMsQ0FBQyxJQUFZO0FBQUksUUFDdEIsT0FBTyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQzNELElBQUksQ0FBQztBQUNMOzRDQVZDLElBQUksU0FBQyxrQkFDRixJQUFJLEVBQUUsaUJBQWlCLGNBQzFCOzhHQUNJO0FBQUM7QUFBMEMsWUFMdkMsZ0JBQWdCO0FBQUc7Ozs7OztpRkFBRTtBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgUGlwZSwgUGlwZVRyYW5zZm9ybSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgVGh1bWJuYWlsU2VydmljZSB9IGZyb20gJy4uL3NlcnZpY2VzL3RodW1ibmFpbC5zZXJ2aWNlJztcblxuQFBpcGUoe1xuICAgIG5hbWU6ICdhZGZNaW1lVHlwZUljb24nXG59KVxuZXhwb3J0IGNsYXNzIE1pbWVUeXBlSWNvblBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgdGh1bWJuYWlsU2VydmljZTogVGh1bWJuYWlsU2VydmljZSkgeyB9XG5cbiAgICB0cmFuc2Zvcm0odGV4dDogc3RyaW5nKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudGh1bWJuYWlsU2VydmljZS5nZXRNaW1lVHlwZUljb24odGV4dCk7XG4gICAgfVxufVxuIl19