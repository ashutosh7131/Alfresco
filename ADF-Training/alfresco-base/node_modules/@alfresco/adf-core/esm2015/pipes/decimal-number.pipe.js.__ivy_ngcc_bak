/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { DecimalPipe } from '@angular/common';
import { Pipe } from '@angular/core';
import { AppConfigService } from '../app-config/app-config.service';
import { UserPreferencesService, UserPreferenceValues } from '../services/user-preferences.service';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
export class DecimalNumberPipe {
    constructor(userPreferenceService, appConfig) {
        this.userPreferenceService = userPreferenceService;
        this.appConfig = appConfig;
        this.defaultLocale = DecimalNumberPipe.DEFAULT_LOCALE;
        this.defaultMinIntegerDigits = DecimalNumberPipe.DEFAULT_MIN_INTEGER_DIGITS;
        this.defaultMinFractionDigits = DecimalNumberPipe.DEFAULT_MIN_FRACTION_DIGITS;
        this.defaultMaxFractionDigits = DecimalNumberPipe.DEFAULT_MAX_FRACTION_DIGITS;
        this.onDestroy$ = new Subject();
        if (this.userPreferenceService) {
            this.userPreferenceService.select(UserPreferenceValues.Locale)
                .pipe(takeUntil(this.onDestroy$))
                .subscribe((locale) => {
                if (locale) {
                    this.defaultLocale = locale;
                }
            });
        }
        if (this.appConfig) {
            this.defaultMinIntegerDigits = this.appConfig.get('decimalValues.minIntegerDigits', DecimalNumberPipe.DEFAULT_MIN_INTEGER_DIGITS);
            this.defaultMinFractionDigits = this.appConfig.get('decimalValues.minFractionDigits', DecimalNumberPipe.DEFAULT_MIN_FRACTION_DIGITS);
            this.defaultMaxFractionDigits = this.appConfig.get('decimalValues.maxFractionDigits', DecimalNumberPipe.DEFAULT_MAX_FRACTION_DIGITS);
        }
    }
    transform(value, digitsInfo, locale) {
        const actualMinIntegerDigits = digitsInfo && digitsInfo.minIntegerDigits ? digitsInfo.minIntegerDigits : this.defaultMinIntegerDigits;
        const actualMinFractionDigits = digitsInfo && digitsInfo.minFractionDigits ? digitsInfo.minFractionDigits : this.defaultMinFractionDigits;
        const actualMaxFractionDigits = digitsInfo && digitsInfo.maxFractionDigits ? digitsInfo.maxFractionDigits : this.defaultMaxFractionDigits;
        const actualDigitsInfo = `${actualMinIntegerDigits}.${actualMinFractionDigits}-${actualMaxFractionDigits}`;
        const actualLocale = locale || this.defaultLocale;
        const decimalPipe = new DecimalPipe(actualLocale);
        return decimalPipe.transform(value, actualDigitsInfo);
    }
    ngOnDestroy() {
        this.onDestroy$.next(true);
        this.onDestroy$.complete();
    }
}
DecimalNumberPipe.DEFAULT_LOCALE = 'en-US';
DecimalNumberPipe.DEFAULT_MIN_INTEGER_DIGITS = 1;
DecimalNumberPipe.DEFAULT_MIN_FRACTION_DIGITS = 0;
DecimalNumberPipe.DEFAULT_MAX_FRACTION_DIGITS = 2;
DecimalNumberPipe.decorators = [
    { type: Pipe, args: [{
                name: 'adfDecimalNumber',
                pure: false
            },] }
];
DecimalNumberPipe.ctorParameters = () => [
    { type: UserPreferencesService },
    { type: AppConfigService }
];
//# sourceMappingURL=data:application/json;base64,