import { __awaiter } from "tslib";
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { ObjectUtils } from '../utils/object-utils';
import { Subject } from 'rxjs';
import { map, distinctUntilChanged, take } from 'rxjs/operators';
import { ExtensionService, mergeObjects } from '@alfresco/adf-extensions';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "@alfresco/adf-extensions";
export var AppConfigValues;
(function (AppConfigValues) {
    AppConfigValues["APP_CONFIG_LANGUAGES_KEY"] = "languages";
    AppConfigValues["PROVIDERS"] = "providers";
    AppConfigValues["OAUTHCONFIG"] = "oauth2";
    AppConfigValues["ECMHOST"] = "ecmHost";
    AppConfigValues["BASESHAREURL"] = "baseShareUrl";
    AppConfigValues["BPMHOST"] = "bpmHost";
    AppConfigValues["IDENTITY_HOST"] = "identityHost";
    AppConfigValues["AUTHTYPE"] = "authType";
    AppConfigValues["CONTEXTROOTECM"] = "contextRootEcm";
    AppConfigValues["CONTEXTROOTBPM"] = "contextRootBpm";
    AppConfigValues["ALFRESCO_REPOSITORY_NAME"] = "alfrescoRepositoryName";
    AppConfigValues["LOG_LEVEL"] = "logLevel";
    AppConfigValues["LOGIN_ROUTE"] = "loginRoute";
    AppConfigValues["DISABLECSRF"] = "disableCSRF";
    AppConfigValues["AUTH_WITH_CREDENTIALS"] = "auth.withCredentials";
    AppConfigValues["APPLICATION"] = "application";
    AppConfigValues["STORAGE_PREFIX"] = "application.storagePrefix";
    AppConfigValues["NOTIFY_DURATION"] = "notificationDefaultDuration";
})(AppConfigValues || (AppConfigValues = {}));
export var Status;
(function (Status) {
    Status["INIT"] = "init";
    Status["LOADING"] = "loading";
    Status["LOADED"] = "loaded";
})(Status || (Status = {}));
export class AppConfigService {
    constructor(http, extensionService) {
        this.http = http;
        this.extensionService = extensionService;
        this.config = {
            application: {
                name: 'Alfresco ADF Application'
            },
            ecmHost: 'http://{hostname}{:port}/ecm',
            bpmHost: 'http://{hostname}{:port}/bpm',
            logLevel: 'silent'
        };
        this.status = Status.INIT;
        this.onLoadSubject = new Subject();
        this.onLoad = this.onLoadSubject.asObservable();
        extensionService.setup$.subscribe((config) => {
            this.onExtensionsLoaded(config);
        });
    }
    select(property) {
        return this.onLoadSubject
            .pipe(map((config) => config[property]), distinctUntilChanged());
    }
    get(key, defaultValue) {
        let result = ObjectUtils.getValue(this.config, key);
        if (typeof result === 'string') {
            const keywords = new Map();
            keywords.set('hostname', this.getLocationHostname());
            keywords.set(':port', this.getLocationPort(':'));
            keywords.set('port', this.getLocationPort());
            keywords.set('protocol', this.getLocationProtocol());
            result = this.formatString(result, keywords);
        }
        if (typeof result === 'object') {
            result = JSON.parse(JSON.stringify(result).replace('{hostname}', this.getLocationHostname()));
            result = JSON.parse(JSON.stringify(result).replace('{:port}', this.getLocationPort(':')));
            result = JSON.parse(JSON.stringify(result).replace('{protocol}', this.getLocationProtocol()));
        }
        if (result === undefined) {
            return defaultValue;
        }
        return result;
    }
    getLocationProtocol() {
        return location.protocol;
    }
    getLocationHostname() {
        return location.hostname;
    }
    getLocationPort(prefix = '') {
        return location.port ? prefix + location.port : '';
    }
    onLoaded() {
        this.onLoadSubject.next(this.config);
    }
    onDataLoaded(data) {
        this.config = Object.assign({}, this.config, data || {});
        this.onLoadSubject.next(this.config);
        this.extensionService.setup$
            .pipe(take(1))
            .subscribe((config) => this.onExtensionsLoaded(config));
    }
    onExtensionsLoaded(config) {
        if (config) {
            const customConfig = config.appConfig;
            if (customConfig) {
                this.config = mergeObjects(this.config, customConfig);
            }
        }
    }
    load() {
        return new Promise((resolve) => __awaiter(this, void 0, void 0, function* () {
            const configUrl = `app.config.json?v=${Date.now()}`;
            if (this.status === Status.INIT) {
                this.status = Status.LOADING;
                this.http.get(configUrl).subscribe((data) => {
                    this.status = Status.LOADED;
                    this.onDataLoaded(data);
                    resolve(this.config);
                }, () => {
                    resolve(this.config);
                });
            }
            else if (this.status === Status.LOADED) {
                resolve(this.config);
            }
            else if (this.status === Status.LOADING) {
                this.onLoad.subscribe(() => {
                    resolve(this.config);
                });
            }
        }));
    }
    formatString(str, keywords) {
        let result = str;
        keywords.forEach((value, key) => {
            const expr = new RegExp('{' + key + '}', 'gm');
            result = result.replace(expr, value);
        });
        return result;
    }
}
AppConfigService.ɵprov = i0.ɵɵdefineInjectable({ factory: function AppConfigService_Factory() { return new AppConfigService(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ExtensionService)); }, token: AppConfigService, providedIn: "root" });
AppConfigService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
AppConfigService.ctorParameters = () => [
    { type: HttpClient },
    { type: ExtensionService }
];
//# sourceMappingURL=data:application/json;base64,