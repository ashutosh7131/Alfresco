/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, EventEmitter, Output, ViewEncapsulation, Input } from '@angular/core';
import { Validators, FormBuilder, FormControl } from '@angular/forms';
import { AppConfigService, AppConfigValues } from '../app-config/app-config.service';
import { StorageService } from '../services/storage.service';
import { AlfrescoApiService } from '../services/alfresco-api.service';
import { ENTER } from '@angular/cdk/keycodes';
export class HostSettingsComponent {
    constructor(formBuilder, storageService, alfrescoApiService, appConfig) {
        this.formBuilder = formBuilder;
        this.storageService = storageService;
        this.alfrescoApiService = alfrescoApiService;
        this.appConfig = appConfig;
        this.HOST_REGEX = '^(http|https):\/\/.*[^/]$';
        this.providers = ['BPM', 'ECM', 'ALL'];
        this.showSelectProviders = true;
        this.error = new EventEmitter();
        this.cancel = new EventEmitter();
        this.success = new EventEmitter();
    }
    ngOnInit() {
        if (this.providers.length === 1) {
            this.showSelectProviders = false;
        }
        const providerSelected = this.appConfig.get(AppConfigValues.PROVIDERS);
        const authType = this.appConfig.get(AppConfigValues.AUTHTYPE, 'BASIC');
        this.form = this.formBuilder.group({
            providersControl: [providerSelected, Validators.required],
            authType: authType
        });
        this.addFormGroups();
        if (authType === 'OAUTH') {
            this.addOAuthFormGroup();
            this.addIdentityHostFormControl();
        }
        this.form.get('authType').valueChanges.subscribe((value) => {
            if (value === 'BASIC') {
                this.form.removeControl('oauthConfig');
                this.form.removeControl('identityHost');
            }
            else {
                this.addOAuthFormGroup();
                this.addIdentityHostFormControl();
            }
        });
        this.providersControl.valueChanges.subscribe(() => {
            this.removeFormGroups();
            this.addFormGroups();
        });
    }
    removeFormGroups() {
        this.form.removeControl('bpmHost');
        this.form.removeControl('ecmHost');
    }
    addFormGroups() {
        this.addBPMFormControl();
        this.addECMFormControl();
    }
    addOAuthFormGroup() {
        const oauthFormGroup = this.createOAuthFormGroup();
        this.form.addControl('oauthConfig', oauthFormGroup);
    }
    addBPMFormControl() {
        if ((this.isBPM() || this.isALL() || this.isOAUTH()) && !this.bpmHost) {
            const bpmFormControl = this.createBPMFormControl();
            this.form.addControl('bpmHost', bpmFormControl);
        }
    }
    addIdentityHostFormControl() {
        const identityHostFormControl = this.createIdentityFormControl();
        this.form.addControl('identityHost', identityHostFormControl);
    }
    addECMFormControl() {
        if ((this.isECM() || this.isALL()) && !this.ecmHost) {
            const ecmFormControl = this.createECMFormControl();
            this.form.addControl('ecmHost', ecmFormControl);
        }
    }
    createOAuthFormGroup() {
        const oauth = this.appConfig.get(AppConfigValues.OAUTHCONFIG, {});
        return this.formBuilder.group({
            host: [oauth.host, [Validators.required, Validators.pattern(this.HOST_REGEX)]],
            clientId: [oauth.clientId, Validators.required],
            redirectUri: [oauth.redirectUri, Validators.required],
            redirectUriLogout: [oauth.redirectUriLogout],
            scope: [oauth.scope, Validators.required],
            secret: oauth.secret,
            silentLogin: oauth.silentLogin,
            implicitFlow: oauth.implicitFlow,
            publicUrls: [oauth.publicUrls]
        });
    }
    createBPMFormControl() {
        return new FormControl(this.appConfig.get(AppConfigValues.BPMHOST), [Validators.required, Validators.pattern(this.HOST_REGEX)]);
    }
    createIdentityFormControl() {
        return new FormControl(this.appConfig.get(AppConfigValues.IDENTITY_HOST), [Validators.required, Validators.pattern(this.HOST_REGEX)]);
    }
    createECMFormControl() {
        return new FormControl(this.appConfig.get(AppConfigValues.ECMHOST), [Validators.required, Validators.pattern(this.HOST_REGEX)]);
    }
    onCancel() {
        this.cancel.emit(true);
    }
    onSubmit(values) {
        this.storageService.setItem(AppConfigValues.PROVIDERS, values.providersControl);
        if (this.isBPM()) {
            this.saveBPMValues(values);
        }
        else if (this.isECM()) {
            this.saveECMValues(values);
        }
        else if (this.isALL()) {
            this.saveECMValues(values);
            this.saveBPMValues(values);
        }
        if (this.isOAUTH()) {
            this.saveOAuthValues(values);
        }
        this.storageService.setItem(AppConfigValues.AUTHTYPE, values.authType);
        this.alfrescoApiService.reset();
        this.alfrescoApiService.getInstance().invalidateSession();
        this.success.emit(true);
    }
    keyDownFunction(event) {
        if (event.keyCode === ENTER && this.form.valid) {
            this.onSubmit(this.form.value);
        }
    }
    saveOAuthValues(values) {
        if (values.oauthConfig.publicUrls && (typeof values.oauthConfig.publicUrls === 'string')) {
            values.oauthConfig.publicUrls = values.oauthConfig.publicUrls.split(',');
        }
        this.storageService.setItem(AppConfigValues.OAUTHCONFIG, JSON.stringify(values.oauthConfig));
        this.storageService.setItem(AppConfigValues.IDENTITY_HOST, values.identityHost);
    }
    saveBPMValues(values) {
        this.storageService.setItem(AppConfigValues.BPMHOST, values.bpmHost);
    }
    saveECMValues(values) {
        this.storageService.setItem(AppConfigValues.ECMHOST, values.ecmHost);
    }
    isBPM() {
        return this.providersControl.value === 'BPM';
    }
    isECM() {
        return this.providersControl.value === 'ECM';
    }
    isALL() {
        return this.providersControl.value === 'ALL';
    }
    isOAUTH() {
        return this.form.get('authType').value === 'OAUTH';
    }
    get providersControl() {
        return this.form.get('providersControl');
    }
    get bpmHost() {
        return this.form.get('bpmHost');
    }
    get ecmHost() {
        return this.form.get('ecmHost');
    }
    get host() {
        return this.oauthConfig.get('host');
    }
    get identityHost() {
        return this.form.get('identityHost');
    }
    get clientId() {
        return this.oauthConfig.get('clientId');
    }
    get scope() {
        return this.oauthConfig.get('scope');
    }
    get secretId() {
        return this.oauthConfig.get('secretId');
    }
    get implicitFlow() {
        return this.oauthConfig.get('implicitFlow');
    }
    get silentLogin() {
        return this.oauthConfig.get('silentLogin');
    }
    get redirectUri() {
        return this.oauthConfig.get('redirectUri');
    }
    get publicUrls() {
        return this.oauthConfig.get('publicUrls');
    }
    get redirectUriLogout() {
        return this.oauthConfig.get('redirectUriLogout');
    }
    get oauthConfig() {
        return this.form.get('oauthConfig');
    }
}
HostSettingsComponent.decorators = [
    { type: Component, args: [{
                selector: 'adf-host-settings',
                template: "<div class=\"adf-setting-container\">\n    <mat-toolbar color=\"primary\" class=\"adf-setting-toolbar\">\n        <h3>{{'CORE.HOST_SETTINGS.TITLE' | translate}}</h3>\n    </mat-toolbar>\n    <mat-card class=\"adf-setting-card\">\n        <form id=\"host-form\" [formGroup]=\"form\" (submit)=\"onSubmit(form.value)\" (keydown)=\"keyDownFunction($event)\">\n\n            <mat-form-field *ngIf=\"showSelectProviders\">\n                <mat-select  id=\"adf-provider-selector\" placeholder=\"Provider\" [formControl]=\"providersControl\">\n                    <mat-option *ngFor=\"let provider of providers\" [value]=\"provider\">\n                        {{ provider }}\n                    </mat-option>\n                </mat-select>\n            </mat-form-field>\n\n            <div class=\"adf-authentication-type\">\n                <div> {{'CORE.HOST_SETTINGS.TYPE-AUTH' | translate }} : </div>\n                <mat-radio-group formControlName=\"authType\" >\n                <mat-radio-button value=\"BASIC\">{{'CORE.HOST_SETTINGS.BASIC' | translate }}\n                </mat-radio-button>\n                <mat-radio-button value=\"OAUTH\">{{'CORE.HOST_SETTINGS.SSO' | translate }}\n                </mat-radio-button>\n            </mat-radio-group>\n            </div>\n\n            <ng-container *ngIf=\"isALL() || isECM()\">\n                <mat-card-content>\n                    <mat-form-field class=\"adf-full-width\">\n                        <mat-label>{{'CORE.HOST_SETTINGS.CS-HOST' | translate }}</mat-label>\n                        <input matInput [formControl]=\"ecmHost\" data-automation-id=\"ecmHost\" type=\"text\"\n                               id=\"ecmHost\" placeholder=\"http(s)://host|ip:port(/path)\">\n                        <mat-error *ngIf=\"ecmHost.hasError('pattern')\">\n                            {{ 'CORE.HOST_SETTINGS.NOT_VALID'| translate }}\n                        </mat-error>\n                        <mat-error *ngIf=\"ecmHost.hasError('required')\">\n                            {{ 'CORE.HOST_SETTINGS.REQUIRED'| translate }}\n                        </mat-error>\n                    </mat-form-field>\n                    <p>\n                </mat-card-content>\n            </ng-container>\n\n            <ng-container *ngIf=\"isALL() || isBPM()\">\n                <mat-card-content>\n                    <mat-form-field class=\"adf-full-width\">\n                        <mat-label>{{'CORE.HOST_SETTINGS.BP-HOST' | translate }}</mat-label>\n                        <input matInput [formControl]=\"bpmHost\" data-automation-id=\"bpmHost\" type=\"text\"\n                               id=\"bpmHost\" placeholder=\"http(s)://host|ip:port(/path)\">\n                        <mat-error *ngIf=\"bpmHost.hasError('pattern')\">\n                            {{ 'CORE.HOST_SETTINGS.NOT_VALID'| translate }}\n                        </mat-error>\n                        <mat-error *ngIf=\"bpmHost.hasError('required')\">\n                            {{ 'CORE.HOST_SETTINGS.REQUIRED'| translate }}\n                        </mat-error>\n                    </mat-form-field>\n                </mat-card-content>\n            </ng-container>\n\n            <ng-container *ngIf=\"isOAUTH()\">\n                <mat-card-content>\n                    <mat-form-field class=\"adf-full-width\">\n                        <mat-label>Identity Host</mat-label>\n                        <input matInput name=\"identityHost\" id=\"identityHost\" formControlName=\"identityHost\"\n                                placeholder=\"http(s)://host|ip:port(/path)\">\n                        <mat-error *ngIf=\"identityHost.hasError('pattern')\">\n                            {{ 'CORE.HOST_SETTINGS.NOT_VALID'| translate }}\n                        </mat-error>\n                        <mat-error *ngIf=\"identityHost.hasError('required')\">\n                            {{ 'CORE.HOST_SETTINGS.REQUIRED'| translate }}\n                        </mat-error>\n                    </mat-form-field>\n                </mat-card-content>\n            </ng-container>\n\n            <ng-container *ngIf=\"isOAUTH()\">\n                <div formGroupName=\"oauthConfig\">\n                    <mat-form-field class=\"adf-full-width\">\n                        <mat-label>Auth Host</mat-label>\n                        <input matInput name=\"host\" id=\"oauthHost\" formControlName=\"host\"\n                               placeholder=\"http(s)://host|ip:port(/path)\">\n                        <mat-error *ngIf=\"host.hasError('pattern')\">\n                            {{ 'CORE.HOST_SETTINGS.NOT_VALID'| translate }}\n                        </mat-error>\n                        <mat-error *ngIf=\"host.hasError('required')\">\n                            {{ 'CORE.HOST_SETTINGS.REQUIRED'| translate }}\n                        </mat-error>\n                    </mat-form-field>\n                    <mat-form-field class=\"adf-full-width\">\n                        <mat-label>{{ 'CORE.HOST_SETTINGS.CLIENT'| translate }}</mat-label>\n                        <input matInput name=\"clientId\" id=\"clientId\" formControlName=\"clientId\"\n                               placeholder=\"Client Id\">\n                        <mat-error *ngIf=\"clientId.hasError('required')\">\n                            {{ 'CORE.HOST_SETTINGS.REQUIRED'| translate }}\n                        </mat-error>\n                    </mat-form-field>\n\n                    <mat-form-field class=\"adf-full-width\">\n                        <mat-label>{{ 'CORE.HOST_SETTINGS.SCOPE'| translate }}</mat-label>\n                        <input matInput name=\"{{ 'CORE.HOST_SETTINGS.SCOPE'| translate }}\"\n                               formControlName=\"scope\" placeholder=\"Scope Id\">\n                        <mat-error *ngIf=\"scope.hasError('required')\">\n                            {{ 'CORE.HOST_SETTINGS.REQUIRED'| translate }}\n                        </mat-error>\n                    </mat-form-field>\n\n                    <label for=\"silentLogin\">{{ 'CORE.HOST_SETTINGS.SILENT'| translate }}</label>\n                    <mat-slide-toggle class=\"adf-full-width\" name=\"silentLogin\" [color]=\"'primary'\"\n                                      formControlName=\"silentLogin\">\n                    </mat-slide-toggle>\n\n                    <label for=\"implicitFlow\">{{ 'CORE.HOST_SETTINGS.IMPLICIT-FLOW'| translate }}</label>\n                    <mat-slide-toggle class=\"adf-full-width\" name=\"implicitFlow\" [color]=\"'primary'\"\n                                      formControlName=\"implicitFlow\">\n                    </mat-slide-toggle>\n\n\n                    <mat-form-field class=\"adf-full-width\">\n                        <mat-label>{{ 'CORE.HOST_SETTINGS.REDIRECT'| translate }}</mat-label>\n                        <input matInput placeholder=\"{{ 'CORE.HOST_SETTINGS.REDIRECT'| translate }}\"\n                               name=\"redirectUri\" formControlName=\"redirectUri\">\n                        <mat-error *ngIf=\"redirectUri.hasError('required')\">\n                            {{ 'CORE.HOST_SETTINGS.REQUIRED'| translate }}\n                        </mat-error>\n                    </mat-form-field>\n\n                    <mat-form-field class=\"adf-full-width\">\n                        <mat-label>{{ 'CORE.HOST_SETTINGS.REDIRECT_LOGOUT'| translate }}</mat-label>\n                        <input id=\"logout-url\" matInput placeholder=\"{{ 'CORE.HOST_SETTINGS.REDIRECT_LOGOUT'| translate }}\"\n                               name=\"redirectUriLogout\" formControlName=\"redirectUriLogout\">\n                    </mat-form-field>\n\n                    <mat-form-field class=\"adf-full-width\">\n                        <mat-label>{{ 'CORE.HOST_SETTINGS.PUBLIC_URLS'| translate }}</mat-label>\n                        <input id=\"public-url\" matInput placeholder=\"{{ 'CORE.HOST_SETTINGS.PUBLIC_URLS'| translate }}\"\n                               name=\"publicUrls\" formControlName=\"publicUrls\">\n                    </mat-form-field>\n\n                </div>\n            </ng-container>\n            <mat-card-actions class=\"adf-actions\">\n                <button mat-button (click)=\"onCancel()\" color=\"primary\">\n                    {{'CORE.HOST_SETTINGS.BACK' | translate }}\n                </button>\n                <button type=\"submit\" id=\"host-button\" class=\"adf-login-button\" mat-raised-button\n                        color=\"primary\" data-automation-id=\"host-button\"\n                        [disabled]=\"!form.valid\">\n                    {{'CORE.HOST_SETTINGS.APPLY' | translate }}\n                </button>\n            </mat-card-actions>\n        </form>\n    </mat-card>\n</div>\n",
                host: {
                    'class': 'adf-host-settings'
                },
                encapsulation: ViewEncapsulation.None,
                styles: [".adf-host-settings{align-items:center;display:flex;min-height:100%}.adf-host-settings .adf-authentication-type{margin-bottom:20px;margin-top:10px}.adf-host-settings .adf-setting-container{border-collapse:collapse;border-spacing:0;display:table;margin:0 auto;width:800px}.adf-host-settings .adf-setting-card-padding{display:table-cell;margin:0;vertical-align:middle;width:50%}.adf-host-settings .adf-settings-link-icon{margin-right:10px;position:relative;top:6px}.adf-host-settings .adf-settings-actions{display:flex;justify-content:flex-end}.adf-host-settings .adf-full-width{width:100%}"]
            },] }
];
HostSettingsComponent.ctorParameters = () => [
    { type: FormBuilder },
    { type: StorageService },
    { type: AlfrescoApiService },
    { type: AppConfigService }
];
HostSettingsComponent.propDecorators = {
    providers: [{ type: Input }],
    error: [{ type: Output }],
    cancel: [{ type: Output }],
    success: [{ type: Output }]
};
//# sourceMappingURL=data:application/json;base64,