/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
export class FileUploadOptions {
}
export var FileUploadStatus;
(function (FileUploadStatus) {
    FileUploadStatus[FileUploadStatus["Pending"] = 0] = "Pending";
    FileUploadStatus[FileUploadStatus["Complete"] = 1] = "Complete";
    FileUploadStatus[FileUploadStatus["Starting"] = 2] = "Starting";
    FileUploadStatus[FileUploadStatus["Progress"] = 3] = "Progress";
    FileUploadStatus[FileUploadStatus["Cancelled"] = 4] = "Cancelled";
    FileUploadStatus[FileUploadStatus["Aborted"] = 5] = "Aborted";
    FileUploadStatus[FileUploadStatus["Error"] = 6] = "Error";
    FileUploadStatus[FileUploadStatus["Deleted"] = 7] = "Deleted";
})(FileUploadStatus || (FileUploadStatus = {}));
export class FileModel {
    constructor(file, options, id) {
        this.status = FileUploadStatus.Pending;
        this.file = file;
        this.id = id;
        this.name = file.name;
        this.size = file.size;
        this.data = null;
        this.errorCode = null;
        this.progress = {
            loaded: 0,
            total: 0,
            percent: 0
        };
        this.options = Object.assign({}, {
            newVersion: false
        }, options);
    }
    get extension() {
        return this.name.slice((Math.max(0, this.name.lastIndexOf('.')) || Infinity) + 1);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZS5tb2RlbC5qcyIsInNvdXJjZVJvb3QiOiIvaG9tZS90cmF2aXMvYnVpbGQvQWxmcmVzY28vYWxmcmVzY28tbmcyLWNvbXBvbmVudHMvbGliL2NvcmUvIiwic291cmNlcyI6WyJtb2RlbHMvZmlsZS5tb2RlbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7O0dBZUc7QUFVSCxNQUFNLE9BQU8saUJBQWlCO0NBaUQ3QjtBQUVELE1BQU0sQ0FBTixJQUFZLGdCQVNYO0FBVEQsV0FBWSxnQkFBZ0I7SUFDeEIsNkRBQVcsQ0FBQTtJQUNYLCtEQUFZLENBQUE7SUFDWiwrREFBWSxDQUFBO0lBQ1osK0RBQVksQ0FBQTtJQUNaLGlFQUFhLENBQUE7SUFDYiw2REFBVyxDQUFBO0lBQ1gseURBQVMsQ0FBQTtJQUNULDZEQUFXLENBQUE7QUFDZixDQUFDLEVBVFcsZ0JBQWdCLEtBQWhCLGdCQUFnQixRQVMzQjtBQUVELE1BQU0sT0FBTyxTQUFTO0lBWWxCLFlBQVksSUFBVSxFQUFFLE9BQTJCLEVBQUUsRUFBVztRQU5oRSxXQUFNLEdBQXFCLGdCQUFnQixDQUFDLE9BQU8sQ0FBQztRQU9oRCxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztRQUNqQixJQUFJLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQztRQUNiLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQztRQUN0QixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUM7UUFDdEIsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFDakIsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUM7UUFFdEIsSUFBSSxDQUFDLFFBQVEsR0FBRztZQUNaLE1BQU0sRUFBRSxDQUFDO1lBQ1QsS0FBSyxFQUFFLENBQUM7WUFDUixPQUFPLEVBQUUsQ0FBQztTQUNiLENBQUM7UUFFRixJQUFJLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFO1lBQzdCLFVBQVUsRUFBRSxLQUFLO1NBQ3BCLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDaEIsQ0FBQztJQUVELElBQUksU0FBUztRQUNULE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQ3RGLENBQUM7Q0FDSiIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IEFzc29jQ2hpbGRCb2R5LCBBc3NvY2lhdGlvbkJvZHkgfSBmcm9tICdAYWxmcmVzY28vanMtYXBpJztcblxuZXhwb3J0IGludGVyZmFjZSBGaWxlVXBsb2FkUHJvZ3Jlc3Mge1xuICAgIGxvYWRlZDogbnVtYmVyO1xuICAgIHRvdGFsOiBudW1iZXI7XG4gICAgcGVyY2VudDogbnVtYmVyO1xufVxuXG5leHBvcnQgY2xhc3MgRmlsZVVwbG9hZE9wdGlvbnMge1xuICAgIC8qKlxuICAgICAqIEFkZCBhIHZlcnNpb24gY29tbWVudCB3aGljaCB3aWxsIGFwcGVhciBpbiB2ZXJzaW9uIGhpc3RvcnkuXG4gICAgICogU2V0dGluZyB0aGlzIHBhcmFtZXRlciBhbHNvIGVuYWJsZXMgdmVyc2lvbmluZyBvZiB0aGlzIG5vZGUsIGlmIGl0IGlzIG5vdCBhbHJlYWR5IHZlcnNpb25lZC5cbiAgICAgKi9cbiAgICBjb21tZW50Pzogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIE92ZXJ3cml0ZSB0aGUgY29udGVudCBvZiB0aGUgbm9kZSB3aXRoIGEgbmV3IHZlcnNpb24uXG4gICAgICovXG4gICAgbmV3VmVyc2lvbj86IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogSWYgdHJ1ZSwgdGhlbiBjcmVhdGVkIG5vZGUgd2lsbCBiZSB2ZXJzaW9uIDEuMCBNQUpPUi4gSWYgZmFsc2UsIHRoZW4gY3JlYXRlZCBub2RlIHdpbGwgYmUgdmVyc2lvbiAwLjEgTUlOT1IuXG4gICAgICovXG4gICAgbWFqb3JWZXJzaW9uPzogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBSb290IGZvbGRlciBpZC5cbiAgICAgKi9cbiAgICBwYXJlbnRJZD86IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBEZWZpbmVzIHRoZSAqKnJlbGF0aXZlUGF0aCoqIHZhbHVlLlxuICAgICAqIFRoZSByZWxhdGl2ZVBhdGggc3BlY2lmaWVzIHRoZSBmb2xkZXIgc3RydWN0dXJlIHRvIGNyZWF0ZSByZWxhdGl2ZSB0byB0aGUgbm9kZSBub2RlSWQuXG4gICAgICogRm9sZGVycyBpbiB0aGUgcmVsYXRpdmVQYXRoIHRoYXQgZG8gbm90IGV4aXN0IGFyZSBjcmVhdGVkIGJlZm9yZSB0aGUgbm9kZSBpcyBjcmVhdGVkLlxuICAgICAqL1xuICAgIHBhdGg/OiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogWW91IGNhbiB1c2UgdGhlIG5vZGVUeXBlIGZpZWxkIHRvIGNyZWF0ZSBhIHNwZWNpZmljIHR5cGUuIFRoZSBkZWZhdWx0IGlzICoqY206Y29udGVudCoqLlxuICAgICAqL1xuICAgIG5vZGVUeXBlPzogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIFlvdSBjYW4gc2V0IG11bHRpLXZhbHVlIHByb3BlcnRpZXMgd2hlbiB5b3UgY3JlYXRlIGEgbmV3IG5vZGUgd2hpY2ggc3VwcG9ydHMgcHJvcGVydGllcyBvZiB0eXBlIG11bHRpcGxlLlxuICAgICAqL1xuICAgIHByb3BlcnRpZXM/OiBhbnk7XG4gICAgLyoqXG4gICAgICogSWYgdGhlIGNvbnRlbnQgbW9kZWwgYWxsb3dzIHRoZW4gaXQgaXMgYWxzbyBwb3NzaWJsZSB0byBjcmVhdGUgcHJpbWFyeSBjaGlsZHJlbiB3aXRoIGEgZGlmZmVyZW50IGFzc29jIHR5cGUuXG4gICAgICovXG4gICAgYXNzb2NpYXRpb24/OiBhbnk7XG4gICAgLyoqXG4gICAgICogWW91IGNhbiBvcHRpb25hbGx5IHNwZWNpZnkgYW4gYXJyYXkgb2YgKipzZWNvbmRhcnlDaGlsZHJlbioqIHRvIGNyZWF0ZSBvbmUgb3IgbW9yZSBzZWNvbmRhcnkgY2hpbGQgYXNzb2NpYXRpb25zLFxuICAgICAqIHN1Y2ggdGhhdCB0aGUgbmV3bHkgY3JlYXRlZCBub2RlIGFjdHMgYXMgYSBwYXJlbnQgbm9kZS5cbiAgICAgKi9cbiAgICBzZWNvbmRhcnlDaGlsZHJlbj86IEFzc29jQ2hpbGRCb2R5W107XG4gICAgLyoqXG4gICAgICogWW91IGNhbiBvcHRpb25hbGx5IHNwZWNpZnkgYW4gYXJyYXkgb2YgKip0YXJnZXRzKiogdG8gY3JlYXRlIG9uZSBvciBtb3JlIHBlZXIgYXNzb2NpYXRpb25zIHN1Y2ggdGhhdCB0aGUgbmV3bHkgY3JlYXRlZCBub2RlIGFjdHMgYXMgYSBzb3VyY2Ugbm9kZS5cbiAgICAgKi9cbiAgICB0YXJnZXRzPzogQXNzb2NpYXRpb25Cb2R5W107XG4gICAgLyoqXG4gICAgICogSWYgdHJ1ZSwgdGhlbiBjcmVhdGVkIG5vZGUgd2lsbCBiZSB2ZXJzaW9uZWQuIElmIGZhbHNlLCB0aGVuIGNyZWF0ZWQgbm9kZSB3aWxsIGJlIHVudmVyc2lvbmVkIGFuZCBhdXRvLXZlcnNpb25pbmcgZGlzYWJsZWQuXG4gICAgICovXG4gICAgdmVyc2lvbmluZ0VuYWJsZWQ/OiBib29sZWFuO1xufVxuXG5leHBvcnQgZW51bSBGaWxlVXBsb2FkU3RhdHVzIHtcbiAgICBQZW5kaW5nID0gMCxcbiAgICBDb21wbGV0ZSA9IDEsXG4gICAgU3RhcnRpbmcgPSAyLFxuICAgIFByb2dyZXNzID0gMyxcbiAgICBDYW5jZWxsZWQgPSA0LFxuICAgIEFib3J0ZWQgPSA1LFxuICAgIEVycm9yID0gNixcbiAgICBEZWxldGVkID0gN1xufVxuXG5leHBvcnQgY2xhc3MgRmlsZU1vZGVsIHtcbiAgICByZWFkb25seSBuYW1lOiBzdHJpbmc7XG4gICAgcmVhZG9ubHkgc2l6ZTogbnVtYmVyO1xuICAgIHJlYWRvbmx5IGZpbGU6IEZpbGU7XG5cbiAgICBpZDogc3RyaW5nO1xuICAgIHN0YXR1czogRmlsZVVwbG9hZFN0YXR1cyA9IEZpbGVVcGxvYWRTdGF0dXMuUGVuZGluZztcbiAgICBlcnJvckNvZGU6IG51bWJlcjtcbiAgICBwcm9ncmVzczogRmlsZVVwbG9hZFByb2dyZXNzO1xuICAgIG9wdGlvbnM6IEZpbGVVcGxvYWRPcHRpb25zO1xuICAgIGRhdGE6IGFueTtcblxuICAgIGNvbnN0cnVjdG9yKGZpbGU6IEZpbGUsIG9wdGlvbnM/OiBGaWxlVXBsb2FkT3B0aW9ucywgaWQ/OiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy5maWxlID0gZmlsZTtcbiAgICAgICAgdGhpcy5pZCA9IGlkO1xuICAgICAgICB0aGlzLm5hbWUgPSBmaWxlLm5hbWU7XG4gICAgICAgIHRoaXMuc2l6ZSA9IGZpbGUuc2l6ZTtcbiAgICAgICAgdGhpcy5kYXRhID0gbnVsbDtcbiAgICAgICAgdGhpcy5lcnJvckNvZGUgPSBudWxsO1xuXG4gICAgICAgIHRoaXMucHJvZ3Jlc3MgPSB7XG4gICAgICAgICAgICBsb2FkZWQ6IDAsXG4gICAgICAgICAgICB0b3RhbDogMCxcbiAgICAgICAgICAgIHBlcmNlbnQ6IDBcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLm9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHt9LCB7XG4gICAgICAgICAgICBuZXdWZXJzaW9uOiBmYWxzZVxuICAgICAgICB9LCBvcHRpb25zKTtcbiAgICB9XG5cbiAgICBnZXQgZXh0ZW5zaW9uKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiB0aGlzLm5hbWUuc2xpY2UoKE1hdGgubWF4KDAsIHRoaXMubmFtZS5sYXN0SW5kZXhPZignLicpKSB8fCBJbmZpbml0eSkgKyAxKTtcbiAgICB9XG59XG4iXX0=