/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, EventEmitter, Input, Output, ViewEncapsulation } from '@angular/core';
import { Subject } from 'rxjs';
import { UserPreferencesService, UserPreferenceValues } from '../services/user-preferences.service';
import { Pagination } from '@alfresco/js-api';
import { takeUntil } from 'rxjs/operators';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../services/user-preferences.service';
import * as ɵngcc2 from '@angular/common';
import * as ɵngcc3 from '@angular/material/button';
import * as ɵngcc4 from '@angular/material/progress-bar';

function InfinitePaginationComponent_div_0_button_1_Template(rf, ctx) { if (rf & 1) {
    const _r4 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 4);
    ɵngcc0.ɵɵlistener("click", function InfinitePaginationComponent_div_0_button_1_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r4); const ctx_r3 = ɵngcc0.ɵɵnextContext(2); return ctx_r3.onLoadMore(); });
    ɵngcc0.ɵɵprojection(1);
    ɵngcc0.ɵɵelementEnd();
} }
function InfinitePaginationComponent_div_0_mat_progress_bar_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "mat-progress-bar", 5);
} }
function InfinitePaginationComponent_div_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 1);
    ɵngcc0.ɵɵtemplate(1, InfinitePaginationComponent_div_0_button_1_Template, 2, 0, "button", 2);
    ɵngcc0.ɵɵtemplate(2, InfinitePaginationComponent_div_0_mat_progress_bar_2_Template, 1, 0, "mat-progress-bar", 3);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r0.isLoading);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.isLoading);
} }
const _c0 = ["*"];
export class InfinitePaginationComponent {
    constructor(cdr, userPreferencesService) {
        this.cdr = cdr;
        this.userPreferencesService = userPreferencesService;
        this.onDestroy$ = new Subject();
        this.isLoading = false;
        this.loadMore = new EventEmitter();
        this.pagination = InfinitePaginationComponent.DEFAULT_PAGINATION;
        this.requestPaginationModel = {
            skipCount: 0,
            merge: true
        };
    }
    set target(target) {
        if (target) {
            this._target = target;
            target.pagination
                .pipe(takeUntil(this.onDestroy$))
                .subscribe(pagination => {
                this.isLoading = false;
                this.pagination = pagination;
                if (!this.pagination.hasMoreItems) {
                    this.pagination.hasMoreItems = false;
                }
                this.cdr.detectChanges();
            });
        }
    }
    get target() {
        return this._target;
    }
    ngOnInit() {
        this.userPreferencesService
            .select(UserPreferenceValues.PaginationSize)
            .pipe(takeUntil(this.onDestroy$))
            .subscribe((pageSize) => {
            this.pageSize = this.pageSize || pageSize;
            this.requestPaginationModel.maxItems = this.pageSize;
        });
    }
    onLoadMore() {
        this.requestPaginationModel.skipCount = 0;
        this.requestPaginationModel.merge = false;
        this.requestPaginationModel.maxItems += this.pageSize;
        this.loadMore.next(this.requestPaginationModel);
        if (this._target) {
            this.isLoading = true;
            this._target.updatePagination(this.requestPaginationModel);
        }
    }
    reset() {
        this.pagination.skipCount = 0;
        this.pagination.maxItems = this.pageSize;
        if (this._target) {
            this._target.updatePagination(this.pagination);
        }
    }
    ngOnDestroy() {
        this.onDestroy$.next(true);
        this.onDestroy$.complete();
    }
}
InfinitePaginationComponent.ɵfac = function InfinitePaginationComponent_Factory(t) { return new (t || InfinitePaginationComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.UserPreferencesService)); };
InfinitePaginationComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: InfinitePaginationComponent, selectors: [["adf-infinite-pagination"]], hostAttrs: [1, "infinite-adf-pagination"], inputs: { isLoading: ["loading", "isLoading"], target: "target", pageSize: "pageSize" }, outputs: { loadMore: "loadMore" }, ngContentSelectors: _c0, decls: 1, vars: 1, consts: [["class", "adf-infinite-pagination", 4, "ngIf"], [1, "adf-infinite-pagination"], ["mat-button", "", "class", "adf-infinite-pagination-load-more", "data-automation-id", "adf-infinite-pagination-button", 3, "click", 4, "ngIf"], ["mode", "indeterminate", "class", "adf-infinite-pagination-spinner", "data-automation-id", "adf-infinite-pagination-spinner", 4, "ngIf"], ["mat-button", "", "data-automation-id", "adf-infinite-pagination-button", 1, "adf-infinite-pagination-load-more", 3, "click"], ["mode", "indeterminate", "data-automation-id", "adf-infinite-pagination-spinner", 1, "adf-infinite-pagination-spinner"]], template: function InfinitePaginationComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵtemplate(0, InfinitePaginationComponent_div_0_Template, 3, 2, "div", 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngIf", (ctx.pagination == null ? null : ctx.pagination.hasMoreItems) || ctx.isLoading);
    } }, directives: [ɵngcc2.NgIf, ɵngcc3.MatButton, ɵngcc4.MatProgressBar], styles: [".adf-infinite-pagination{display:flex;justify-content:space-around;min-height:56px}.adf-infinite-pagination-load-more{margin-bottom:10px;margin-top:10px}"], encapsulation: 2, changeDetection: 0 });
InfinitePaginationComponent.DEFAULT_PAGINATION = new Pagination({
    skipCount: 0,
    maxItems: 25,
    totalItems: 0
});
InfinitePaginationComponent.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: UserPreferencesService }
];
InfinitePaginationComponent.propDecorators = {
    target: [{ type: Input }],
    pageSize: [{ type: Input }],
    isLoading: [{ type: Input, args: ['loading',] }],
    loadMore: [{ type: Output }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(InfinitePaginationComponent, [{
        type: Component,
        args: [{
                selector: 'adf-infinite-pagination',
                host: { 'class': 'infinite-adf-pagination' },
                template: "<div *ngIf=\"pagination?.hasMoreItems || isLoading\" class=\"adf-infinite-pagination\">\n\n    <button mat-button\n        *ngIf=\"!isLoading\"\n        class=\"adf-infinite-pagination-load-more\"\n        (click)=\"onLoadMore()\"\n        data-automation-id=\"adf-infinite-pagination-button\">\n            <ng-content></ng-content>\n    </button>\n\n    <mat-progress-bar *ngIf=\"isLoading\"\n        mode=\"indeterminate\"\n        class=\"adf-infinite-pagination-spinner\"\n        data-automation-id=\"adf-infinite-pagination-spinner\"></mat-progress-bar>\n</div>\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                encapsulation: ViewEncapsulation.None,
                styles: [".adf-infinite-pagination{display:flex;justify-content:space-around;min-height:56px}.adf-infinite-pagination-load-more{margin-bottom:10px;margin-top:10px}"]
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc1.UserPreferencesService }]; }, { isLoading: [{
            type: Input,
            args: ['loading']
        }], loadMore: [{
            type: Output
        }], target: [{
            type: Input
        }], pageSize: [{
            type: Input
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,