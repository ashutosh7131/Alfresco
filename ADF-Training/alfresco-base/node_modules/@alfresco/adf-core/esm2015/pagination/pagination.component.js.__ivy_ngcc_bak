/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, EventEmitter, Input, Output, ViewEncapsulation, ElementRef, ChangeDetectionStrategy, ChangeDetectorRef, Renderer2 } from '@angular/core';
import { Subject } from 'rxjs';
import { PaginationModel } from '../models/pagination.model';
import { UserPreferencesService, UserPreferenceValues } from '../services/user-preferences.service';
import { takeUntil } from 'rxjs/operators';
import { TranslateService } from '@ngx-translate/core';
export class PaginationComponent {
    constructor(elementRef, renderer, cdr, userPreferencesService, translate) {
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.cdr = cdr;
        this.userPreferencesService = userPreferencesService;
        this.translate = translate;
        this._isEmpty = true;
        this._hasItems = false;
        this.change = new EventEmitter();
        this.changePageNumber = new EventEmitter();
        this.changePageSize = new EventEmitter();
        this.nextPage = new EventEmitter();
        this.prevPage = new EventEmitter();
        this.onDestroy$ = new Subject();
    }
    get pagination() {
        return this._pagination;
    }
    set pagination(value) {
        value = value || PaginationComponent.DEFAULT_PAGINATION;
        this._pagination = value;
        this._hasItems = value && value.count > 0;
        this._isEmpty = !this.hasItems;
        if (this._isEmpty) {
            this.renderer.addClass(this.elementRef.nativeElement, 'adf-pagination__empty');
        }
        else {
            this.renderer.removeClass(this.elementRef.nativeElement, 'adf-pagination__empty');
        }
        this.cdr.detectChanges();
    }
    ngOnInit() {
        this.userPreferencesService
            .select(UserPreferenceValues.PaginationSize)
            .pipe(takeUntil(this.onDestroy$))
            .subscribe(maxItems => {
            this.pagination = Object.assign(Object.assign(Object.assign({}, PaginationComponent.DEFAULT_PAGINATION), this.pagination), { maxItems });
        });
        if (!this.supportedPageSizes) {
            this.supportedPageSizes = this.userPreferencesService.supportedPageSizes;
        }
        if (this.target) {
            this.target.pagination
                .pipe(takeUntil(this.onDestroy$))
                .subscribe(pagination => {
                if (pagination.count === 0 && !this.isFirstPage) {
                    this.goPrevious();
                }
                this.pagination = Object.assign({}, pagination);
            });
        }
        if (!this.pagination) {
            this.pagination = Object.assign({}, PaginationComponent.DEFAULT_PAGINATION);
        }
    }
    get lastPage() {
        const { maxItems, totalItems } = this.pagination;
        return (totalItems && maxItems)
            ? Math.ceil(totalItems / maxItems)
            : 1;
    }
    get current() {
        const { maxItems, skipCount } = this.pagination;
        return (skipCount && maxItems)
            ? Math.floor(skipCount / maxItems) + 1
            : 1;
    }
    get isLastPage() {
        if (!this.pagination.totalItems && this.pagination.hasMoreItems) {
            return false;
        }
        return this.current === this.lastPage;
    }
    get isFirstPage() {
        return this.current === 1;
    }
    get next() {
        return this.isLastPage ? this.current : this.current + 1;
    }
    get previous() {
        return this.isFirstPage ? 1 : this.current - 1;
    }
    get hasItems() {
        return this._hasItems;
    }
    get isEmpty() {
        return this._isEmpty;
    }
    get range() {
        const { skipCount, maxItems, totalItems } = this.pagination;
        let start = 0;
        if (totalItems || totalItems !== 0) {
            start = skipCount + 1;
        }
        const end = this.isLastPage ? totalItems : skipCount + maxItems;
        return [start, end];
    }
    get pages() {
        return Array(this.lastPage)
            .fill('n')
            .map((_, index) => (index + 1));
    }
    get itemRangeText() {
        const rangeString = this.range.join('-');
        let translation = this.translate.instant('CORE.PAGINATION.ITEMS_RANGE', {
            range: rangeString,
            total: this.pagination.totalItems
        });
        if (!this.pagination.totalItems) {
            translation = translation.substr(0, translation.indexOf(rangeString) + rangeString.length);
        }
        return translation;
    }
    goNext() {
        if (this.hasItems) {
            const maxItems = this.pagination.maxItems;
            const skipCount = (this.next - 1) * maxItems;
            this.pagination = Object.assign(Object.assign({}, this.pagination), { skipCount });
            this.handlePaginationEvent('NEXT_PAGE');
        }
    }
    goPrevious() {
        if (this.hasItems) {
            const maxItems = this.pagination.maxItems;
            const skipCount = (this.previous - 1) * maxItems;
            this.pagination = Object.assign(Object.assign({}, this.pagination), { skipCount });
            this.handlePaginationEvent('PREV_PAGE');
        }
    }
    onChangePageNumber(pageNumber) {
        if (this.hasItems) {
            const maxItems = this.pagination.maxItems;
            const skipCount = (pageNumber - 1) * maxItems;
            this.pagination = Object.assign(Object.assign({}, this.pagination), { skipCount });
            this.handlePaginationEvent('CHANGE_PAGE_NUMBER');
        }
    }
    onChangePageSize(maxItems) {
        this.pagination = Object.assign(Object.assign({}, this.pagination), { skipCount: 0, maxItems });
        this.userPreferencesService.paginationSize = maxItems;
        this.handlePaginationEvent('CHANGE_PAGE_SIZE');
    }
    ngOnDestroy() {
        this.onDestroy$.next(true);
        this.onDestroy$.complete();
    }
    handlePaginationEvent(action) {
        const paginationModel = Object.assign({}, this.pagination);
        if (action === 'NEXT_PAGE') {
            this.nextPage.emit(paginationModel);
        }
        if (action === 'PREV_PAGE') {
            this.prevPage.emit(paginationModel);
        }
        if (action === 'CHANGE_PAGE_NUMBER') {
            this.changePageNumber.emit(paginationModel);
        }
        if (action === 'CHANGE_PAGE_SIZE') {
            this.changePageSize.emit(paginationModel);
        }
        this.change.emit(paginationModel);
        if (this.target) {
            this.target.updatePagination(paginationModel);
        }
    }
}
PaginationComponent.DEFAULT_PAGINATION = {
    skipCount: 0,
    maxItems: 25,
    totalItems: 0,
    count: 0,
    hasMoreItems: false
};
PaginationComponent.decorators = [
    { type: Component, args: [{
                selector: 'adf-pagination',
                host: { 'class': 'adf-pagination' },
                template: "<ng-container *ngIf=\"hasItems\">\n    <div class=\"adf-pagination__block adf-pagination__range-block\">\n        <span class=\"adf-pagination__range\">\n            {{ itemRangeText }}\n        </span>\n    </div>\n\n    <div class=\"adf-pagination__block adf-pagination__perpage-block\">\n        <span>\n            {{ 'CORE.PAGINATION.ITEMS_PER_PAGE' | translate }}\n        </span>\n\n        <span class=\"adf-pagination__max-items\">\n            {{ pagination.maxItems }}\n        </span>\n\n        <button\n            mat-icon-button\n            [attr.aria-label]=\"'CORE.PAGINATION.ARIA.ITEMS_PER_PAGE' | translate\"\n            [matMenuTriggerFor]=\"pageSizeMenu\">\n            <mat-icon>arrow_drop_down</mat-icon>\n        </button>\n\n        <mat-menu #pageSizeMenu=\"matMenu\" class=\"adf-pagination__page-selector\">\n            <button\n                mat-menu-item\n                *ngFor=\"let pageSize of supportedPageSizes\"\n                (click)=\"onChangePageSize(pageSize)\">\n                {{ pageSize }}\n            </button>\n        </mat-menu>\n    </div>\n\n    <div class=\"adf-pagination__block adf-pagination__actualinfo-block\">\n        <span class=\"adf-pagination__current-page\">\n            {{ 'CORE.PAGINATION.CURRENT_PAGE' | translate: { number: current } }}\n        </span>\n\n        <button\n            mat-icon-button\n            data-automation-id=\"page-selector\"\n            [attr.aria-label]=\"'CORE.PAGINATION.ARIA.CURRENT_PAGE' | translate\"\n            [matMenuTriggerFor]=\"pagesMenu\"\n            *ngIf=\"pages.length > 1\">\n            <mat-icon>arrow_drop_down</mat-icon>\n        </button>\n\n        <div *ngIf=\"pagination.totalItems\">\n            <span class=\"adf-pagination__total-pages\">\n                {{ 'CORE.PAGINATION.TOTAL_PAGES' | translate: { total: pages.length } }}\n            </span>\n        </div>\n\n        <mat-menu #pagesMenu=\"matMenu\" class=\"adf-pagination__page-selector\">\n            <button\n                mat-menu-item\n                *ngFor=\"let pageNumber of pages\"\n                (click)=\"onChangePageNumber(pageNumber)\">\n                {{ pageNumber }}\n            </button>\n        </mat-menu>\n    </div>\n\n    <div class=\"adf-pagination__block adf-pagination__controls-block\">\n        <button\n            class=\"adf-pagination__previous-button\"\n            mat-icon-button\n            [attr.aria-label]=\"'CORE.PAGINATION.ARIA.PREVIOUS_PAGE' | translate\"\n            [disabled]=\"isFirstPage\"\n            (click)=\"goPrevious()\">\n            <mat-icon>keyboard_arrow_left</mat-icon>\n        </button>\n\n        <button\n            class=\"adf-pagination__next-button\"\n            mat-icon-button\n            [attr.aria-label]=\"'CORE.PAGINATION.ARIA.NEXT_PAGE' | translate\"\n            [disabled]=\"isLastPage\"\n            (click)=\"goNext()\">\n            <mat-icon>keyboard_arrow_right</mat-icon>\n        </button>\n    </div>\n</ng-container>\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                encapsulation: ViewEncapsulation.None,
                styles: [".adf-pagination{border-top:none;color:var(--theme-text-fg-color);display:flex;height:48px;line-height:20px}.adf-pagination__block{align-items:center;border-right:none;display:flex;padding:0 8px}.adf-pagination__block:first-child{flex:1 1 auto;padding-left:24px}.adf-pagination__block:last-child{border-right-width:0}@media (max-width:599.9px){.adf-pagination{flex-wrap:wrap;justify-content:space-between;padding:0 16px}.adf-pagination__perpage-block,.adf-pagination__range-block{display:none}.adf-pagination__actualinfo-block{border-right:none}.adf-pagination__controls-block{padding-right:0}}.adf-pagination__max-items{margin-left:10px}.adf-pagination__current-page,.adf-pagination__max-items{margin-right:5px}.adf-pagination__current-page,.adf-pagination__current-page+button,.adf-pagination__max-items,.adf-pagination__max-items+button{color:var(--theme-text-fg-color)}.adf-pagination__current-page+button,.adf-pagination__max-items+button{margin-left:-10px}.adf-pagination__next-button,.adf-pagination__previous-button{margin:0 5px}.adf-pagination__page-selector{max-height:250px!important}.adf-pagination.adf-pagination__empty{border-top:none;height:48px}.adf-pagination button[mat-icon-button]{height:32px;line-height:32px;width:32px}"]
            },] }
];
PaginationComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 },
    { type: ChangeDetectorRef },
    { type: UserPreferencesService },
    { type: TranslateService }
];
PaginationComponent.propDecorators = {
    target: [{ type: Input }],
    supportedPageSizes: [{ type: Input }],
    pagination: [{ type: Input }],
    change: [{ type: Output }],
    changePageNumber: [{ type: Output }],
    changePageSize: [{ type: Output }],
    nextPage: [{ type: Output }],
    prevPage: [{ type: Output }]
};
//# sourceMappingURL=data:application/json;base64,