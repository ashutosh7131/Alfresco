/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, ContentChild, Input, TemplateRef } from '@angular/core';
export class DataColumnComponent {
    constructor() {
        this.type = 'text';
        this.sortable = true;
        this.title = '';
        this.editable = false;
        this.focus = true;
    }
    ngOnInit() {
        if (!this.srTitle && this.key === '$thumbnail') {
            this.srTitle = 'Thumbnail';
        }
    }
}
DataColumnComponent.decorators = [
    { type: Component, args: [{
                selector: 'data-column',
                template: ''
            },] }
];
DataColumnComponent.propDecorators = {
    key: [{ type: Input }],
    type: [{ type: Input }],
    format: [{ type: Input }],
    sortable: [{ type: Input }],
    title: [{ type: Input }],
    template: [{ type: ContentChild, args: [TemplateRef,] }],
    formatTooltip: [{ type: Input }],
    srTitle: [{ type: Input, args: ['sr-title',] }],
    cssClass: [{ type: Input, args: ['class',] }],
    copyContent: [{ type: Input }],
    editable: [{ type: Input }],
    focus: [{ type: Input }],
    sortingKey: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YS1jb2x1bW4uY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Ii9ob21lL3RyYXZpcy9idWlsZC9BbGZyZXNjby9hbGZyZXNjby1uZzItY29tcG9uZW50cy9saWIvY29yZS8iLCJzb3VyY2VzIjpbImRhdGEtY29sdW1uL2RhdGEtY29sdW1uLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7O0dBZUc7QUFJSCxPQUFPLEVBQUUsU0FBUyxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQVUsV0FBVyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBTXBGLE1BQU0sT0FBTyxtQkFBbUI7SUFKaEM7UUFnQkksU0FBSSxHQUFXLE1BQU0sQ0FBQztRQVF0QixhQUFRLEdBQVksSUFBSSxDQUFDO1FBTXpCLFVBQUssR0FBVyxFQUFFLENBQUM7UUF1Qm5CLGFBQVEsR0FBWSxLQUFLLENBQUM7UUFJMUIsVUFBSyxHQUFZLElBQUksQ0FBQztJQWMxQixDQUFDO0lBTEcsUUFBUTtRQUNKLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxJQUFJLElBQUksQ0FBQyxHQUFHLEtBQUssWUFBWSxFQUFFO1lBQzVDLElBQUksQ0FBQyxPQUFPLEdBQUcsV0FBVyxDQUFDO1NBQzlCO0lBQ0wsQ0FBQzs7O1lBdEVKLFNBQVMsU0FBQztnQkFDUCxRQUFRLEVBQUUsYUFBYTtnQkFDdkIsUUFBUSxFQUFFLEVBQUU7YUFDZjs7O2tCQU1JLEtBQUs7bUJBTUwsS0FBSztxQkFJTCxLQUFLO3VCQUlMLEtBQUs7b0JBTUwsS0FBSzt1QkFHTCxZQUFZLFNBQUMsV0FBVzs0QkFJeEIsS0FBSztzQkFJTCxLQUFLLFNBQUMsVUFBVTt1QkFJaEIsS0FBSyxTQUFDLE9BQU87MEJBSWIsS0FBSzt1QkFJTCxLQUFLO29CQUlMLEtBQUs7eUJBSUwsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbiAvKiB0c2xpbnQ6ZGlzYWJsZTpjb21wb25lbnQtc2VsZWN0b3Igbm8taW5wdXQtcmVuYW1lICAqL1xuXG5pbXBvcnQgeyBDb21wb25lbnQsIENvbnRlbnRDaGlsZCwgSW5wdXQsIE9uSW5pdCwgVGVtcGxhdGVSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICdkYXRhLWNvbHVtbicsXG4gICAgdGVtcGxhdGU6ICcnXG59KVxuZXhwb3J0IGNsYXNzIERhdGFDb2x1bW5Db21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuXG4gICAgLyoqIERhdGEgc291cmNlIGtleS4gQ2FuIGJlIGVpdGhlciBhIGNvbHVtbi9wcm9wZXJ0eSBrZXkgbGlrZSBgdGl0bGVgXG4gICAgICogIG9yIGEgcHJvcGVydHkgcGF0aCBsaWtlIGBjcmVhdGVkQnkubmFtZWAuXG4gICAgICovXG4gICAgQElucHV0KClcbiAgICBrZXk6IHN0cmluZztcblxuICAgIC8qKiBWYWx1ZSB0eXBlIGZvciB0aGUgY29sdW1uLiBQb3NzaWJsZSBzZXR0aW5ncyBhcmUgJ3RleHQnLCAnaW1hZ2UnLFxuICAgICAqICdkYXRlJywgJ2ZpbGVTaXplJywgJ2xvY2F0aW9uJywgYW5kICdqc29uJy5cbiAgICAgKi9cbiAgICBASW5wdXQoKVxuICAgIHR5cGU6IHN0cmluZyA9ICd0ZXh0JztcblxuICAgIC8qKiBWYWx1ZSBmb3JtYXQgKGlmIHN1cHBvcnRlZCBieSB0aGUgcGFyZW50IGNvbXBvbmVudCksIGZvciBleGFtcGxlIGZvcm1hdCBvZiB0aGUgZGF0ZS4gKi9cbiAgICBASW5wdXQoKVxuICAgIGZvcm1hdDogc3RyaW5nO1xuXG4gICAgLyoqIFRvZ2dsZXMgYWJpbGl0eSB0byBzb3J0IGJ5IHRoaXMgY29sdW1uLCBmb3IgZXhhbXBsZSBieSBjbGlja2luZyB0aGUgY29sdW1uIGhlYWRlci4gKi9cbiAgICBASW5wdXQoKVxuICAgIHNvcnRhYmxlOiBib29sZWFuID0gdHJ1ZTtcblxuICAgIC8qKiBEaXNwbGF5IHRpdGxlIG9mIHRoZSBjb2x1bW4sIHR5cGljYWxseSB1c2VkIGZvciBjb2x1bW4gaGVhZGVycy4gWW91IGNhbiB1c2UgdGhlXG4gICAgICogaTE4biByZXNvdXJjZSBrZXkgdG8gZ2V0IGl0IHRyYW5zbGF0ZWQgYXV0b21hdGljYWxseS5cbiAgICAgKi9cbiAgICBASW5wdXQoKVxuICAgIHRpdGxlOiBzdHJpbmcgPSAnJztcblxuICAgIEBDb250ZW50Q2hpbGQoVGVtcGxhdGVSZWYpXG4gICAgdGVtcGxhdGU6IGFueTtcblxuICAgIC8qKiBDdXN0b20gdG9vbHRpcCBmb3JtYXR0ZXIgZnVuY3Rpb24uICovXG4gICAgQElucHV0KClcbiAgICBmb3JtYXRUb29sdGlwOiBGdW5jdGlvbjtcblxuICAgIC8qKiBUaXRsZSB0byBiZSB1c2VkIGZvciBzY3JlZW4gcmVhZGVycy4gKi9cbiAgICBASW5wdXQoJ3NyLXRpdGxlJylcbiAgICBzclRpdGxlOiBzdHJpbmc7XG5cbiAgICAvKiogQWRkaXRpb25hbCBDU1MgY2xhc3MgdG8gYmUgYXBwbGllZCB0byBjb2x1bW4gKGhlYWRlciBhbmQgY2VsbHMpLiAqL1xuICAgIEBJbnB1dCgnY2xhc3MnKVxuICAgIGNzc0NsYXNzOiBzdHJpbmc7XG5cbiAgICAgLyoqIEVuYWJsZXMvZGlzYWJsZXMgYSBDbGlwYm9hcmQgZGlyZWN0aXZlIHRvIGFsbG93IGNvcHlpbmcgb2YgY2VsbCBjb250ZW50cy4gKi9cbiAgICBASW5wdXQoKVxuICAgIGNvcHlDb250ZW50OiBib29sZWFuO1xuXG4gICAgLyoqICBUb2dnbGVzIHRoZSBlZGl0aW5nIHN1cHBvcnQgb2YgdGhlIGNvbHVtbiBkYXRhLiAqL1xuICAgIEBJbnB1dCgpXG4gICAgZWRpdGFibGU6IGJvb2xlYW4gPSBmYWxzZTtcblxuICAgIC8qKiAgRW5hYmxlIG9yIGRpc2FibGUgY2VsbCBmb2N1cyAqL1xuICAgIEBJbnB1dCgpXG4gICAgZm9jdXM6IGJvb2xlYW4gPSB0cnVlO1xuXG4gICAgLyoqIFdoZW4gdXNpbmcgc2VydmVyIHNpZGUgc29ydGluZyB0aGUgY29sdW1uIHVzZWQgYnkgdGhlIGFwaSBjYWxsIHdoZXJlIHRoZSBzb3J0aW5nIHdpbGwgYmUgcGVyZm9ybWVkICovXG4gICAgQElucHV0KClcbiAgICBzb3J0aW5nS2V5OiBzdHJpbmc7XG5cbiAgICAvKiogRGF0YSBjb2x1bW4gaGVhZGVyIHRlbXBsYXRlICovXG4gICAgaGVhZGVyPzogVGVtcGxhdGVSZWY8YW55PjtcblxuICAgIG5nT25Jbml0KCkge1xuICAgICAgICBpZiAoIXRoaXMuc3JUaXRsZSAmJiB0aGlzLmtleSA9PT0gJyR0aHVtYm5haWwnKSB7XG4gICAgICAgICAgICB0aGlzLnNyVGl0bGUgPSAnVGh1bWJuYWlsJztcbiAgICAgICAgfVxuICAgIH1cbn1cbiJdfQ==