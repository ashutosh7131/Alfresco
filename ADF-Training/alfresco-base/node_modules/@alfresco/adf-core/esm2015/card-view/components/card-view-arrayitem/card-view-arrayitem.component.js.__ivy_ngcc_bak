/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, ViewEncapsulation } from '@angular/core';
import { CardViewUpdateService } from '../../services/card-view-update.service';
import { BaseCardView } from '../base-card-view';
export class CardViewArrayItemComponent extends BaseCardView {
    constructor(cardViewUpdateService) {
        super(cardViewUpdateService);
    }
    clicked() {
        if (this.isClickable()) {
            this.cardViewUpdateService.clicked(this.property);
        }
    }
    showClickableIcon() {
        return this.hasIcon() && this.isClickable();
    }
    hasIcon() {
        return !!this.property.icon;
    }
    displayCount() {
        return this.property.noOfItemsToDisplay ? this.property.noOfItemsToDisplay : 0;
    }
    isClickable() {
        return !!this.property.clickable;
    }
}
CardViewArrayItemComponent.decorators = [
    { type: Component, args: [{
                selector: 'adf-card-view-arrayitem',
                template: "<div [attr.data-automation-id]=\"'card-array-label-' + property.key\" class=\"adf-property-label\">{{ property.label | translate }}</div>\n<div class=\"adf-property-value adf-card-view-array-item-container\" (click)=\"clicked()\">\n    <ng-container *ngIf=\"(property.displayValue | async) as items; else elseEmptyValueBlock\">\n        <mat-chip-list *ngIf=\"items.length > 0; else elseEmptyValueBlock\" data-automation-id=\"card-arrayitem-chip-list-container\">\n            <ng-container *ngIf=\"displayCount() > 0; else withOutDisplayCount\" >\n                <mat-chip\n                    *ngFor=\"let item of items.slice(0, displayCount())\"\n                    (click)=\"clicked()\"\n                    [attr.data-automation-id]=\"'card-arrayitem-chip-' + item.value\">\n                    <mat-icon *ngIf=\"item?.icon\" class=\"adf-array-item-icon\">{{item.icon}}</mat-icon>\n                    <span>{{item?.value}}</span>\n                </mat-chip>\n                <mat-chip\n                    *ngIf=\"items.length > displayCount()\"\n                    data-automation-id=\"card-arrayitem-more-chip\"\n                    [matMenuTriggerFor]=\"menu\">\n                    <span>{{items.length - displayCount()}} {{'CORE.CARDVIEW.MORE' | translate}}</span>\n                </mat-chip>\n            </ng-container>\n            <ng-template #withOutDisplayCount>\n                <mat-chip\n                    *ngFor=\"let item of items\"\n                    (click)=\"clicked()\"\n                    [attr.data-automation-id]=\"'card-arrayitem-chip-' + item.value\">\n                    <mat-icon *ngIf=\"item?.icon\" class=\"adf-array-item-icon\">{{item.icon}}</mat-icon>\n                    <span>{{item?.value}}</span>\n                </mat-chip>\n            </ng-template>\n        </mat-chip-list>\n        <mat-menu #menu=\"matMenu\">\n            <mat-card class=\"adf-array-item-more-chip-container\">\n                <mat-card-content>\n                    <mat-chip-list>\n                        <mat-chip (click)=\"clicked()\"\n                            *ngFor=\"let item of items.slice(displayCount(), items.length)\"\n                            [attr.data-automation-id]=\"'card-arrayitem-chip-' + item.value\">\n                        <mat-icon *ngIf=\"item?.icon\" class=\"adf-array-item-icon\">{{item.icon}}</mat-icon>\n                        <span>{{item?.value}}</span>\n                        </mat-chip>\n                    </mat-chip-list>\n                </mat-card-content>\n            </mat-card>\n        </mat-menu>\n    </ng-container>\n    <ng-template #elseEmptyValueBlock>\n        <span class=\"adf-card-array-item-default\" data-automation-id=\"card-arrayitem-default\">{{ property?.default | translate }}</span>\n    </ng-template>\n    <button mat-icon-button *ngIf=\"showClickableIcon()\"\n        class=\"adf-array-item-action\"\n        [attr.aria-label]=\"'CORE.METADATA.ACTIONS.EDIT' | translate\"\n        [attr.title]=\"'CORE.METADATA.ACTIONS.EDIT' | translate\"\n        [attr.data-automation-id]=\"'card-array-item-clickable-icon-' + property.key\">\n        <mat-icon class=\"adf-array-item-icon\">{{property.icon}}</mat-icon>\n    </button>\n</div>\n",
                encapsulation: ViewEncapsulation.None,
                styles: [".adf-array-item-icon{font-size:16px;padding-top:8px}.adf-array-item-action{color:var(--adf-card-view-text-color)}.adf-array-item-action:focus,.adf-array-item-action:hover{color:var(--theme-text-fg-color)}.adf-card-array-item-default{display:block;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.adf-array-item-more-chip-container.mat-card{box-shadow:none;max-height:300px;overflow-y:auto}.adf-array-item-more-chip-container .mat-chip{cursor:pointer}.adf-property-value .mat-chip-list{cursor:pointer;padding-top:6px;width:100%}.adf-property-value .mat-chip{cursor:pointer}.adf-card-view-array-item-container{align-items:center;box-sizing:border-box;display:flex;flex-direction:row;place-content:center space-between}"]
            },] }
];
CardViewArrayItemComponent.ctorParameters = () => [
    { type: CardViewUpdateService }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FyZC12aWV3LWFycmF5aXRlbS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiL2hvbWUvdHJhdmlzL2J1aWxkL0FsZnJlc2NvL2FsZnJlc2NvLW5nMi1jb21wb25lbnRzL2xpYi9jb3JlLyIsInNvdXJjZXMiOlsiY2FyZC12aWV3L2NvbXBvbmVudHMvY2FyZC12aWV3LWFycmF5aXRlbS9jYXJkLXZpZXctYXJyYXlpdGVtLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7O0dBZUc7QUFFSCxPQUFPLEVBQUUsU0FBUyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTdELE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLHlDQUF5QyxDQUFDO0FBQ2hGLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQVFqRCxNQUFNLE9BQU8sMEJBQTJCLFNBQVEsWUFBb0M7SUFFaEYsWUFBWSxxQkFBNEM7UUFDcEQsS0FBSyxDQUFDLHFCQUFxQixDQUFDLENBQUM7SUFDakMsQ0FBQztJQUVELE9BQU87UUFDSCxJQUFJLElBQUksQ0FBQyxXQUFXLEVBQUUsRUFBRTtZQUNwQixJQUFJLENBQUMscUJBQXFCLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztTQUNyRDtJQUNMLENBQUM7SUFFRCxpQkFBaUI7UUFDYixPQUFPLElBQUksQ0FBQyxPQUFPLEVBQUUsSUFBSSxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDaEQsQ0FBQztJQUVELE9BQU87UUFDSCxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQztJQUNoQyxDQUFDO0lBRUQsWUFBWTtRQUNSLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ25GLENBQUM7SUFFRCxXQUFXO1FBQ1AsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUM7SUFDckMsQ0FBQzs7O1lBaENKLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUseUJBQXlCO2dCQUNuQyxpckdBQW1EO2dCQUVuRCxhQUFhLEVBQUUsaUJBQWlCLENBQUMsSUFBSTs7YUFDdEM7OztZQVJRLHFCQUFxQiIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IENvbXBvbmVudCwgVmlld0VuY2Fwc3VsYXRpb24gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENhcmRWaWV3QXJyYXlJdGVtTW9kZWwgfSBmcm9tICcuLi8uLi9tb2RlbHMvY2FyZC12aWV3LWFycmF5aXRlbS5tb2RlbCc7XG5pbXBvcnQgeyBDYXJkVmlld1VwZGF0ZVNlcnZpY2UgfSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9jYXJkLXZpZXctdXBkYXRlLnNlcnZpY2UnO1xuaW1wb3J0IHsgQmFzZUNhcmRWaWV3IH0gZnJvbSAnLi4vYmFzZS1jYXJkLXZpZXcnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdhZGYtY2FyZC12aWV3LWFycmF5aXRlbScsXG4gIHRlbXBsYXRlVXJsOiAnLi9jYXJkLXZpZXctYXJyYXlpdGVtLmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVVcmxzOiBbJy4vY2FyZC12aWV3LWFycmF5aXRlbS5jb21wb25lbnQuc2NzcyddLFxuICBlbmNhcHN1bGF0aW9uOiBWaWV3RW5jYXBzdWxhdGlvbi5Ob25lXG59KVxuZXhwb3J0IGNsYXNzIENhcmRWaWV3QXJyYXlJdGVtQ29tcG9uZW50IGV4dGVuZHMgQmFzZUNhcmRWaWV3PENhcmRWaWV3QXJyYXlJdGVtTW9kZWw+IHtcblxuICAgIGNvbnN0cnVjdG9yKGNhcmRWaWV3VXBkYXRlU2VydmljZTogQ2FyZFZpZXdVcGRhdGVTZXJ2aWNlKSB7XG4gICAgICAgIHN1cGVyKGNhcmRWaWV3VXBkYXRlU2VydmljZSk7XG4gICAgfVxuXG4gICAgY2xpY2tlZCgpOiB2b2lkIHtcbiAgICAgICAgaWYgKHRoaXMuaXNDbGlja2FibGUoKSkge1xuICAgICAgICAgICAgdGhpcy5jYXJkVmlld1VwZGF0ZVNlcnZpY2UuY2xpY2tlZCh0aGlzLnByb3BlcnR5KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHNob3dDbGlja2FibGVJY29uKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5oYXNJY29uKCkgJiYgdGhpcy5pc0NsaWNrYWJsZSgpO1xuICAgIH1cblxuICAgIGhhc0ljb24oKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiAhIXRoaXMucHJvcGVydHkuaWNvbjtcbiAgICB9XG5cbiAgICBkaXNwbGF5Q291bnQoKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJvcGVydHkubm9PZkl0ZW1zVG9EaXNwbGF5ID8gdGhpcy5wcm9wZXJ0eS5ub09mSXRlbXNUb0Rpc3BsYXkgOiAwO1xuICAgIH1cblxuICAgIGlzQ2xpY2thYmxlKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gISF0aGlzLnByb3BlcnR5LmNsaWNrYWJsZTtcbiAgICB9XG59XG4iXX0=