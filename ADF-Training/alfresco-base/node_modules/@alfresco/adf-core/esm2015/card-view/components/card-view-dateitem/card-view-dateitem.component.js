/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, Input, ViewChild, ViewEncapsulation } from '@angular/core';
import { DateAdapter, MAT_DATE_FORMATS } from '@angular/material/core';
import { DatetimeAdapter, MAT_DATETIME_FORMATS, MatDatetimepicker } from '@mat-datetimepicker/core';
import { MAT_MOMENT_DATETIME_FORMATS, MomentDatetimeAdapter } from '@mat-datetimepicker/moment';
import moment from 'moment-es6';
import { CardViewDateItemModel } from '../../models/card-view-dateitem.model';
import { CardViewUpdateService } from '../../services/card-view-update.service';
import { UserPreferencesService, UserPreferenceValues } from '../../../services/user-preferences.service';
import { MomentDateAdapter } from '../../../utils/moment-date-adapter';
import { MOMENT_DATE_FORMATS } from '../../../utils/moment-date-formats.model';
import { AppConfigService } from '../../../app-config/app-config.service';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { BaseCardView } from '../base-card-view';
import { ClipboardService } from '../../../clipboard/clipboard.service';
import { TranslationService } from '../../../services/translation.service';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../../services/card-view-update.service';
import * as ɵngcc2 from '@angular/material/core';
import * as ɵngcc3 from '../../../services/user-preferences.service';
import * as ɵngcc4 from '../../../app-config/app-config.service';
import * as ɵngcc5 from '../../../clipboard/clipboard.service';
import * as ɵngcc6 from '../../../services/translation.service';
import * as ɵngcc7 from '@angular/common';
import * as ɵngcc8 from '@angular/material/tooltip';
import * as ɵngcc9 from '@mat-datetimepicker/core';
import * as ɵngcc10 from '@angular/material/icon';
import * as ɵngcc11 from '@angular/material/chips';
import * as ɵngcc12 from '@angular/material/form-field';
import * as ɵngcc13 from '@angular/material/input';
import * as ɵngcc14 from '@ngx-translate/core';

const _c0 = ["datetimePicker"];
function CardViewDateItemComponent_div_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 6);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵattribute("data-automation-id", "card-dateitem-label-" + ctx_r0.property.key);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 2, ctx_r0.property.label), "\n");
} }
function CardViewDateItemComponent_span_2_span_1_Template(rf, ctx) { if (rf & 1) {
    const _r8 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "span", 8);
    ɵngcc0.ɵɵlistener("dblclick", function CardViewDateItemComponent_span_2_span_1_Template_span_dblclick_0_listener() { ɵngcc0.ɵɵrestoreView(_r8); const ctx_r7 = ɵngcc0.ɵɵnextContext(2); return ctx_r7.copyToClipboard(ctx_r7.property.displayValue); });
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r6 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("matTooltip", ɵngcc0.ɵɵpipeBind1(1, 3, "CORE.METADATA.ACTIONS.COPY_TO_CLIPBOARD"));
    ɵngcc0.ɵɵattribute("data-automation-id", "card-dateitem-" + ctx_r6.property.key);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ctx_r6.property.displayValue);
} }
function CardViewDateItemComponent_span_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span");
    ɵngcc0.ɵɵtemplate(1, CardViewDateItemComponent_span_2_span_1_Template, 3, 5, "span", 7);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵattribute("data-automation-id", "card-" + ctx_r1.property.type + "-value-" + ctx_r1.property.key);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r1.showProperty());
} }
function CardViewDateItemComponent_div_3_span_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r9 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵattribute("data-automation-id", "card-" + ctx_r9.property.type + "-value-" + ctx_r9.property.key);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r9.property.displayValue, "");
} }
function CardViewDateItemComponent_div_3_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
    const _r13 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "mat-icon", 18);
    ɵngcc0.ɵɵlistener("click", function CardViewDateItemComponent_div_3_mat_icon_4_Template_mat_icon_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r13); const ctx_r12 = ɵngcc0.ɵɵnextContext(2); return ctx_r12.onDateClear(); });
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵtext(2, " clear ");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r10 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵattribute("title", ɵngcc0.ɵɵpipeBind1(1, 2, "CORE.METADATA.ACTIONS.CLEAR"))("data-automation-id", "datepicker-date-clear-" + ctx_r10.property.key);
} }
function CardViewDateItemComponent_div_3_Template(rf, ctx) { if (rf & 1) {
    const _r15 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 9);
    ɵngcc0.ɵɵelementStart(1, "div", 10);
    ɵngcc0.ɵɵelementStart(2, "span", 11);
    ɵngcc0.ɵɵlistener("click", function CardViewDateItemComponent_div_3_Template_span_click_2_listener() { ɵngcc0.ɵɵrestoreView(_r15); const ctx_r14 = ɵngcc0.ɵɵnextContext(); return ctx_r14.showDatePicker(); });
    ɵngcc0.ɵɵtemplate(3, CardViewDateItemComponent_div_3_span_3_Template, 2, 2, "span", 12);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(4, CardViewDateItemComponent_div_3_mat_icon_4_Template, 3, 4, "mat-icon", 13);
    ɵngcc0.ɵɵelement(5, "mat-datetimepicker-toggle", 14);
    ɵngcc0.ɵɵpipe(6, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(7, "input", 15);
    ɵngcc0.ɵɵlistener("dateChange", function CardViewDateItemComponent_div_3_Template_input_dateChange_7_listener($event) { ɵngcc0.ɵɵrestoreView(_r15); const ctx_r16 = ɵngcc0.ɵɵnextContext(); return ctx_r16.onDateChanged($event); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(8, "mat-datetimepicker", 16, 17);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const _r11 = ɵngcc0.ɵɵreference(9);
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    const _r3 = ɵngcc0.ɵɵreference(5);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵattribute("data-automation-id", "datepicker-label-toggle-" + ctx_r2.property.key);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r2.showProperty())("ngIfElse", _r3);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r2.showClearAction());
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("for", _r11);
    ɵngcc0.ɵɵattribute("tabindex", -1)("title", ɵngcc0.ɵɵpipeBind1(6, 15, "CORE.METADATA.ACTIONS.EDIT"))("data-automation-id", "datepickertoggle-" + ctx_r2.property.key);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("matDatetimepicker", _r11)("value", ctx_r2.valueDate);
    ɵngcc0.ɵɵattribute("tabIndex", -1);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("type", ctx_r2.property.type)("timeInterval", 5)("startAt", ctx_r2.valueDate);
    ɵngcc0.ɵɵattribute("data-automation-id", "datepicker-" + ctx_r2.property.key);
} }
function CardViewDateItemComponent_ng_template_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtext(0);
    ɵngcc0.ɵɵpipe(1, "translate");
} if (rf & 2) {
    const ctx_r4 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(1, 1, ctx_r4.property.default), " ");
} }
function CardViewDateItemComponent_div_6_mat_chip_3_mat_icon_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-icon", 26);
    ɵngcc0.ɵɵtext(1, "cancel");
    ɵngcc0.ɵɵelementEnd();
} }
function CardViewDateItemComponent_div_6_mat_chip_3_Template(rf, ctx) { if (rf & 1) {
    const _r24 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "mat-chip", 24);
    ɵngcc0.ɵɵlistener("removed", function CardViewDateItemComponent_div_6_mat_chip_3_Template_mat_chip_removed_0_listener() { ɵngcc0.ɵɵrestoreView(_r24); const idx_r21 = ctx.index; const ctx_r23 = ɵngcc0.ɵɵnextContext(2); return ctx_r23.removeValueFromList(idx_r21); });
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵtemplate(2, CardViewDateItemComponent_div_6_mat_chip_3_mat_icon_2_Template, 2, 0, "mat-icon", 25);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const propertyValue_r20 = ctx.$implicit;
    const ctx_r18 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("removable", ctx_r18.isEditable());
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", propertyValue_r20, " ");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r18.isEditable());
} }
function CardViewDateItemComponent_div_6_mat_form_field_4_Template(rf, ctx) { if (rf & 1) {
    const _r27 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "mat-form-field", 27);
    ɵngcc0.ɵɵlistener("click", function CardViewDateItemComponent_div_6_mat_form_field_4_Template_mat_form_field_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r27); const ctx_r26 = ɵngcc0.ɵɵnextContext(2); return ctx_r26.showDatePicker(); });
    ɵngcc0.ɵɵelementStart(1, "input", 28);
    ɵngcc0.ɵɵlistener("dateChange", function CardViewDateItemComponent_div_6_mat_form_field_4_Template_input_dateChange_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r27); const ctx_r28 = ɵngcc0.ɵɵnextContext(2); return ctx_r28.addDateToList($event); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(2, "mat-datetimepicker-toggle", 29);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelement(4, "mat-datetimepicker", 16, 17);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const _r25 = ɵngcc0.ɵɵreference(5);
    const ctx_r19 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("floatLabel", "never");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("matDatetimepicker", _r25);
    ɵngcc0.ɵɵattribute("tabIndex", -1);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("for", _r25);
    ɵngcc0.ɵɵattribute("tabindex", -1)("title", ɵngcc0.ɵɵpipeBind1(3, 11, "CORE.METADATA.ACTIONS.EDIT"))("data-automation-id", "datepickertoggle-" + ctx_r19.property.key);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("type", ctx_r19.property.type)("timeInterval", 5)("startAt", ctx_r19.valueDate);
    ɵngcc0.ɵɵattribute("data-automation-id", "datepicker-" + ctx_r19.property.key);
} }
function CardViewDateItemComponent_div_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 19);
    ɵngcc0.ɵɵelementStart(1, "mat-chip-list", 20, 21);
    ɵngcc0.ɵɵtemplate(3, CardViewDateItemComponent_div_6_mat_chip_3_Template, 3, 3, "mat-chip", 22);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(4, CardViewDateItemComponent_div_6_mat_form_field_4_Template, 6, 13, "mat-form-field", 23);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r5 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r5.property.displayValue);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r5.isEditable());
} }
const ɵ0 = MOMENT_DATE_FORMATS, ɵ1 = MAT_MOMENT_DATETIME_FORMATS;
export class CardViewDateItemComponent extends BaseCardView {
    constructor(cardViewUpdateService, dateAdapter, userPreferencesService, appConfig, clipboardService, translateService) {
        super(cardViewUpdateService);
        this.dateAdapter = dateAdapter;
        this.userPreferencesService = userPreferencesService;
        this.appConfig = appConfig;
        this.clipboardService = clipboardService;
        this.translateService = translateService;
        this.editable = false;
        this.displayEmpty = true;
        this.displayClearAction = true;
        this.onDestroy$ = new Subject();
        this.dateFormat = this.appConfig.get('dateValues.defaultDateFormat');
    }
    ngOnInit() {
        this.userPreferencesService
            .select(UserPreferenceValues.Locale)
            .pipe(takeUntil(this.onDestroy$))
            .subscribe(locale => {
            this.dateAdapter.setLocale(locale);
            this.property.locale = locale;
        });
        this.dateAdapter.overrideDisplayFormat = 'MMM DD';
        if (this.property.value) {
            this.valueDate = moment(this.property.value, this.dateFormat);
        }
        else if (this.property.multivalued && !this.property.value) {
            this.property.value = [];
        }
    }
    ngOnDestroy() {
        this.onDestroy$.next(true);
        this.onDestroy$.complete();
    }
    showProperty() {
        return this.displayEmpty || !this.property.isEmpty();
    }
    showClearAction() {
        return this.displayClearAction && (!this.property.isEmpty() || !!this.property.default);
    }
    isEditable() {
        return this.editable && this.property.editable;
    }
    showDatePicker() {
        this.datepicker.open();
    }
    onDateChanged(newDateValue) {
        if (newDateValue) {
            const momentDate = moment(newDateValue.value, this.dateFormat, true);
            if (momentDate.isValid()) {
                this.valueDate = momentDate;
                this.property.value = momentDate.toDate();
                this.update();
            }
        }
    }
    onDateClear() {
        this.valueDate = null;
        this.cardViewUpdateService.update(Object.assign({}, this.property), null);
        this.property.value = null;
        this.property.default = null;
    }
    copyToClipboard(valueToCopy) {
        const clipboardMessage = this.translateService.instant('CORE.METADATA.ACCESSIBILITY.COPY_TO_CLIPBOARD_MESSAGE');
        this.clipboardService.copyContentToClipboard(valueToCopy, clipboardMessage);
    }
    addDateToList(newDateValue) {
        if (newDateValue) {
            const momentDate = moment(newDateValue.value, this.dateFormat, true);
            if (momentDate.isValid()) {
                this.property.value.push(momentDate.toDate());
                this.update();
            }
        }
    }
    removeValueFromList(itemIndex) {
        this.property.value.splice(itemIndex, 1);
        this.update();
    }
    update() {
        this.cardViewUpdateService.update(Object.assign({}, this.property), this.property.value);
    }
}
CardViewDateItemComponent.ɵfac = function CardViewDateItemComponent_Factory(t) { return new (t || CardViewDateItemComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.CardViewUpdateService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.DateAdapter), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.UserPreferencesService), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.AppConfigService), ɵngcc0.ɵɵdirectiveInject(ɵngcc5.ClipboardService), ɵngcc0.ɵɵdirectiveInject(ɵngcc6.TranslationService)); };
CardViewDateItemComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: CardViewDateItemComponent, selectors: [["adf-card-view-dateitem"]], viewQuery: function CardViewDateItemComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c0, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.datepicker = _t.first);
    } }, inputs: { editable: "editable", displayEmpty: "displayEmpty", displayClearAction: "displayClearAction", property: "property" }, features: [ɵngcc0.ɵɵProvidersFeature([
            { provide: DateAdapter, useClass: MomentDateAdapter },
            { provide: MAT_DATE_FORMATS, useValue: ɵ0 },
            { provide: DatetimeAdapter, useClass: MomentDatetimeAdapter },
            { provide: MAT_DATETIME_FORMATS, useValue: ɵ1 }
        ]), ɵngcc0.ɵɵInheritDefinitionFeature], decls: 7, vars: 4, consts: [["class", "adf-property-label", 4, "ngIf"], [1, "adf-property-value", "adf-property-value-padding-top"], [4, "ngIf"], ["class", "adf-dateitem-editable", 4, "ngIf"], ["elseEmptyValueBlock", ""], ["class", "adf-property-field adf-dateitem-chip-list-container adf-dateitem-editable", 4, "ngIf"], [1, "adf-property-label"], ["matTooltipShowDelay", "1000", 3, "matTooltip", "dblclick", 4, "ngIf"], ["matTooltipShowDelay", "1000", 3, "matTooltip", "dblclick"], [1, "adf-dateitem-editable"], [1, "adf-dateitem-editable-controls"], [1, "adf-datepicker-toggle", 3, "click"], [4, "ngIf", "ngIfElse"], ["class", "adf-date-reset-icon", 3, "click", 4, "ngIf"], [3, "for"], [1, "adf-invisible-date-input", 3, "matDatetimepicker", "value", "dateChange"], [3, "type", "timeInterval", "startAt"], ["datetimePicker", ""], [1, "adf-date-reset-icon", 3, "click"], [1, "adf-property-field", "adf-dateitem-chip-list-container", "adf-dateitem-editable"], [1, "adf-textitem-chip-list"], ["chipList", ""], [3, "removable", "removed", 4, "ngFor", "ngForOf"], ["class", "adf-property-field adf-dateitem-editable-controls", 3, "floatLabel", "click", 4, "ngIf"], [3, "removable", "removed"], ["matChipRemove", "", 4, "ngIf"], ["matChipRemove", ""], [1, "adf-property-field", "adf-dateitem-editable-controls", 3, "floatLabel", "click"], ["matInput", "", 1, "adf-invisible-date-input", 3, "matDatetimepicker", "dateChange"], ["matSuffix", "", 3, "for"]], template: function CardViewDateItemComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, CardViewDateItemComponent_div_0_Template, 3, 4, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "div", 1);
        ɵngcc0.ɵɵtemplate(2, CardViewDateItemComponent_span_2_Template, 2, 2, "span", 2);
        ɵngcc0.ɵɵtemplate(3, CardViewDateItemComponent_div_3_Template, 10, 17, "div", 3);
        ɵngcc0.ɵɵtemplate(4, CardViewDateItemComponent_ng_template_4_Template, 2, 3, "ng-template", null, 4, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵtemplate(6, CardViewDateItemComponent_div_6_Template, 5, 2, "div", 5);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngIf", ctx.showProperty() || ctx.isEditable());
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.isEditable() && !ctx.property.multivalued);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.isEditable() && !ctx.property.multivalued);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngIf", ctx.property.multivalued);
    } }, directives: [ɵngcc7.NgIf, ɵngcc8.MatTooltip, ɵngcc9.MatDatetimepickerToggle, ɵngcc9.MatDatetimepickerInput, ɵngcc9.MatDatetimepicker, ɵngcc10.MatIcon, ɵngcc11.MatChipList, ɵngcc7.NgForOf, ɵngcc11.MatChip, ɵngcc11.MatChipRemove, ɵngcc12.MatFormField, ɵngcc13.MatInput, ɵngcc12.MatSuffix], pipes: [ɵngcc14.TranslatePipe], styles: [".adf-invisible-date-input{border:none;float:right;height:2px;margin:0;opacity:0;overflow:hidden;padding:0;width:0}.adf-dateitem-chip-list-container.adf-property-field{border-bottom:0;cursor:pointer;margin-bottom:-7px!important}.adf-dateitem-chip-list-container.adf-property-field .adf-dateitem-editable-controls{margin-top:15px}.adf-dateitem-chip-list-container.adf-property-field .mat-datetimepicker-toggle{position:absolute;right:0;top:-20px}.adf-dateitem-editable{border-bottom:1px solid var(--adf-card-view-datetime-border-color);cursor:pointer;padding-bottom:6px}.adf-dateitem-editable-controls{align-items:center;display:flex;justify-content:space-between}.adf-dateitem-editable-controls button.mat-icon-button{height:20px;line-height:20px;width:20px}.adf-dateitem-editable-controls mat-icon{height:16px;opacity:.5;width:16px}.adf-dateitem-editable-controls:hover mat-icon{opacity:1}.adf-dateitem-editable-controls .adf-datepicker-toggle{flex:1 0 auto}.adf-dateitem-editable-controls mat-icon.adf-date-reset-icon{font-size:16px;height:16px;line-height:10px;opacity:.3;padding-left:8px;position:relative;top:4px;width:16px}.adf-dateitem-editable-controls:hover mat-icon.adf-date-reset-icon{opacity:1}"], encapsulation: 2 });
CardViewDateItemComponent.ctorParameters = () => [
    { type: CardViewUpdateService },
    { type: DateAdapter },
    { type: UserPreferencesService },
    { type: AppConfigService },
    { type: ClipboardService },
    { type: TranslationService }
];
CardViewDateItemComponent.propDecorators = {
    property: [{ type: Input }],
    editable: [{ type: Input }],
    displayEmpty: [{ type: Input }],
    displayClearAction: [{ type: Input }],
    datepicker: [{ type: ViewChild, args: ['datetimePicker',] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CardViewDateItemComponent, [{
        type: Component,
        args: [{
                providers: [
                    { provide: DateAdapter, useClass: MomentDateAdapter },
                    { provide: MAT_DATE_FORMATS, useValue: ɵ0 },
                    { provide: DatetimeAdapter, useClass: MomentDatetimeAdapter },
                    { provide: MAT_DATETIME_FORMATS, useValue: ɵ1 }
                ],
                selector: 'adf-card-view-dateitem',
                template: "<div class=\"adf-property-label\"\n     [attr.data-automation-id]=\"'card-dateitem-label-' + property.key\"\n     *ngIf=\"showProperty() || isEditable()\">\n    {{ property.label | translate }}\n</div>\n\n<div class=\"adf-property-value adf-property-value-padding-top\">\n    <span *ngIf=\"!isEditable() && !property.multivalued\"\n          [attr.data-automation-id]=\"'card-' + property.type + '-value-' + property.key\">\n        <span *ngIf=\"showProperty()\"\n              [attr.data-automation-id]=\"'card-dateitem-' + property.key\"\n              (dblclick)=\"copyToClipboard(property.displayValue)\"\n              matTooltipShowDelay=\"1000\"\n              [matTooltip]=\"'CORE.METADATA.ACTIONS.COPY_TO_CLIPBOARD' | translate\">{{ property.displayValue}}</span>\n    </span>\n    <div *ngIf=\"isEditable() && !property.multivalued\"\n         class=\"adf-dateitem-editable\">\n        <div class=\"adf-dateitem-editable-controls\">\n            <span class=\"adf-datepicker-toggle\"\n                  [attr.data-automation-id]=\"'datepicker-label-toggle-' + property.key\"\n                  (click)=\"showDatePicker()\">\n                <span *ngIf=\"showProperty(); else elseEmptyValueBlock\"\n                      [attr.data-automation-id]=\"'card-' + property.type + '-value-' + property.key\">\n                    {{ property.displayValue }}</span>\n            </span>\n\n            <mat-icon *ngIf=\"showClearAction()\"\n                      class=\"adf-date-reset-icon\"\n                      (click)=\"onDateClear()\"\n                      [attr.title]=\"'CORE.METADATA.ACTIONS.CLEAR' | translate\"\n                      [attr.data-automation-id]=\"'datepicker-date-clear-' + property.key\">\n                clear\n            </mat-icon>\n\n            <mat-datetimepicker-toggle [attr.tabindex]=\"-1\"\n                                       [attr.title]=\"'CORE.METADATA.ACTIONS.EDIT' | translate\"\n                                       [attr.data-automation-id]=\"'datepickertoggle-' + property.key\"\n                                       [for]=\"datetimePicker\">\n            </mat-datetimepicker-toggle>\n        </div>\n\n        <input class=\"adf-invisible-date-input\"\n               [attr.tabIndex]=\"-1\"\n               [matDatetimepicker]=\"datetimePicker\"\n               [value]=\"valueDate\"\n               (dateChange)=\"onDateChanged($event)\">\n\n        <mat-datetimepicker #datetimePicker\n                            [type]=\"$any(property).type\"\n                            [timeInterval]=\"5\"\n                            [attr.data-automation-id]=\"'datepicker-' + property.key\"\n                            [startAt]=\"valueDate\">\n        </mat-datetimepicker>\n    </div>\n    <ng-template #elseEmptyValueBlock>\n        {{ property.default | translate }}\n    </ng-template>\n\n    <div *ngIf=\"property.multivalued\"\n         class=\"adf-property-field adf-dateitem-chip-list-container adf-dateitem-editable\">\n        <mat-chip-list #chipList\n                       class=\"adf-textitem-chip-list\">\n            <mat-chip *ngFor=\"let propertyValue of property.displayValue; let idx = index\"\n                      [removable]=\"isEditable()\"\n                      (removed)=\"removeValueFromList(idx)\">\n                {{ propertyValue }}\n                <mat-icon *ngIf=\"isEditable()\"\n                          matChipRemove>cancel</mat-icon>\n            </mat-chip>\n        </mat-chip-list>\n\n        <mat-form-field *ngIf=\"isEditable()\"\n                        class=\"adf-property-field adf-dateitem-editable-controls\"\n                        [floatLabel]=\"'never'\"\n                        (click)=\"showDatePicker()\">\n            <input matInput\n                   class=\"adf-invisible-date-input\"\n                   [attr.tabIndex]=\"-1\"\n                   [matDatetimepicker]=\"datetimePicker\"\n                   (dateChange)=\"addDateToList($event)\">\n            <mat-datetimepicker-toggle [attr.tabindex]=\"-1\"\n                                       matSuffix\n                                       [attr.title]=\"'CORE.METADATA.ACTIONS.EDIT' | translate\"\n                                       [attr.data-automation-id]=\"'datepickertoggle-' + property.key\"\n                                       [for]=\"datetimePicker\">\n            </mat-datetimepicker-toggle>\n\n            <mat-datetimepicker #datetimePicker\n                                [type]=\"$any(property).type\"\n                                [timeInterval]=\"5\"\n                                [attr.data-automation-id]=\"'datepicker-' + property.key\"\n                                [startAt]=\"valueDate\">\n            </mat-datetimepicker>\n        </mat-form-field>\n    </div>\n</div>\n",
                encapsulation: ViewEncapsulation.None,
                styles: [".adf-invisible-date-input{border:none;float:right;height:2px;margin:0;opacity:0;overflow:hidden;padding:0;width:0}.adf-dateitem-chip-list-container.adf-property-field{border-bottom:0;cursor:pointer;margin-bottom:-7px!important}.adf-dateitem-chip-list-container.adf-property-field .adf-dateitem-editable-controls{margin-top:15px}.adf-dateitem-chip-list-container.adf-property-field .mat-datetimepicker-toggle{position:absolute;right:0;top:-20px}.adf-dateitem-editable{border-bottom:1px solid var(--adf-card-view-datetime-border-color);cursor:pointer;padding-bottom:6px}.adf-dateitem-editable-controls{align-items:center;display:flex;justify-content:space-between}.adf-dateitem-editable-controls button.mat-icon-button{height:20px;line-height:20px;width:20px}.adf-dateitem-editable-controls mat-icon{height:16px;opacity:.5;width:16px}.adf-dateitem-editable-controls:hover mat-icon{opacity:1}.adf-dateitem-editable-controls .adf-datepicker-toggle{flex:1 0 auto}.adf-dateitem-editable-controls mat-icon.adf-date-reset-icon{font-size:16px;height:16px;line-height:10px;opacity:.3;padding-left:8px;position:relative;top:4px;width:16px}.adf-dateitem-editable-controls:hover mat-icon.adf-date-reset-icon{opacity:1}"]
            }]
    }], function () { return [{ type: ɵngcc1.CardViewUpdateService }, { type: ɵngcc2.DateAdapter }, { type: ɵngcc3.UserPreferencesService }, { type: ɵngcc4.AppConfigService }, { type: ɵngcc5.ClipboardService }, { type: ɵngcc6.TranslationService }]; }, { editable: [{
            type: Input
        }], displayEmpty: [{
            type: Input
        }], displayClearAction: [{
            type: Input
        }], property: [{
            type: Input
        }], datepicker: [{
            type: ViewChild,
            args: ['datetimePicker']
        }] }); })();
export { ɵ0, ɵ1 };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,