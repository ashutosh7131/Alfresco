/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { ChangeDetectorRef, Component, Input, ViewEncapsulation } from '@angular/core';
import { CardViewUpdateService } from '../../services/card-view-update.service';
import { BaseCardView } from '../base-card-view';
import { ClipboardService } from '../../../clipboard/clipboard.service';
import { TranslationService } from '../../../services/translation.service';
import { FormControl } from '@angular/forms';
import { debounceTime, takeUntil, filter } from 'rxjs/operators';
import { Subject } from 'rxjs';
export const DEFAULT_SEPARATOR = ', ';
const templateTypes = {
    clickableTemplate: 'clickableTemplate',
    multilineTemplate: 'multilineTemplate',
    chipsTemplate: 'chipsTemplate',
    emptyTemplate: 'emptyTemplate',
    defaultTemplate: 'defaultTemplate'
};
export class CardViewTextItemComponent extends BaseCardView {
    constructor(cardViewUpdateService, clipboardService, translateService, cd) {
        super(cardViewUpdateService);
        this.clipboardService = clipboardService;
        this.translateService = translateService;
        this.cd = cd;
        this.editable = false;
        this.displayEmpty = true;
        this.copyToClipboardAction = true;
        this.useChipsForMultiValueProperty = true;
        this.multiValueSeparator = DEFAULT_SEPARATOR;
        this.textInput = new FormControl();
        this.onDestroy$ = new Subject();
    }
    ngOnChanges(changes) {
        if (changes.property && changes.property.firstChange) {
            this.textInput.valueChanges
                .pipe(filter(textInputValue => textInputValue !== this.editedValue && textInputValue !== null), debounceTime(50), takeUntil(this.onDestroy$))
                .subscribe(textInputValue => {
                this.editedValue = textInputValue;
                this.update();
            });
        }
        this.resetValue();
        this.setTemplateType();
        if (changes.editable) {
            this.isEditable ? this.textInput.enable() : this.textInput.disable();
        }
    }
    setTemplateType() {
        if (this.showProperty || this.isEditable) {
            if (this.isClickable) {
                this.templateType = templateTypes.clickableTemplate;
            }
            else if (this.isChipViewEnabled) {
                this.templateType = templateTypes.chipsTemplate;
            }
            else {
                this.templateType = templateTypes.defaultTemplate;
            }
        }
        else {
            this.templateType = templateTypes.emptyTemplate;
        }
    }
    resetValue() {
        if (this.isChipViewEnabled) {
            this.editedValue = this.property.value ? Array.from(this.property.value) : [];
        }
        else {
            this.editedValue = this.property.displayValue;
            this.textInput.setValue(this.editedValue);
        }
        this.resetErrorMessages();
    }
    resetErrorMessages() {
        this.errors = [];
    }
    update() {
        if (this.property.isValid(this.editedValue)) {
            this.property.value = this.prepareValueForUpload(this.property, this.editedValue);
            this.cardViewUpdateService.update(Object.assign({}, this.property), this.property.value);
            this.resetErrorMessages();
        }
        else {
            this.errors = this.property.getValidationErrors(this.editedValue);
        }
    }
    prepareValueForUpload(property, value) {
        if (property.multivalued && typeof value === 'string') {
            const listOfValues = value.split(this.multiValueSeparator.trim()).map((item) => item.trim());
            return listOfValues;
        }
        return value;
    }
    removeValueFromList(itemIndex) {
        if (Array.isArray(this.editedValue)) {
            this.editedValue.splice(itemIndex, 1);
            this.update();
            this.cd.detectChanges();
        }
    }
    addValueToList(newListItem) {
        const chipInput = newListItem.input;
        const chipValue = newListItem.value.trim() || '';
        if (typeof this.editedValue !== 'string') {
            if (chipValue) {
                this.editedValue.push(chipValue);
                this.update();
            }
            if (chipInput) {
                chipInput.value = '';
            }
        }
    }
    clicked() {
        if (typeof this.property.clickCallBack === 'function') {
            this.property.clickCallBack();
        }
        else {
            this.cardViewUpdateService.clicked(this.property);
        }
    }
    clearValue() {
        this.editedValue = '';
        this.textInput.setValue('');
        this.update();
    }
    copyToClipboard(valueToCopy) {
        if (this.copyToClipboard) {
            const clipboardMessage = this.translateService.instant('CORE.METADATA.ACCESSIBILITY.COPY_TO_CLIPBOARD_MESSAGE');
            this.clipboardService.copyContentToClipboard(valueToCopy, clipboardMessage);
        }
    }
    ngOnDestroy() {
        this.onDestroy$.next(true);
        this.onDestroy$.complete();
    }
    get showProperty() {
        return this.displayEmpty || !this.property.isEmpty();
    }
    get showClickableIcon() {
        return this.hasIcon && this.editable;
    }
    get isEditable() {
        return this.editable && this.property.editable;
    }
    get isClickable() {
        return this.property.clickable;
    }
    get hasIcon() {
        return !!this.property.icon;
    }
    get hasErrors() {
        var _a, _b;
        return (_b = (!!((_a = this.errors) === null || _a === void 0 ? void 0 : _a.length))) !== null && _b !== void 0 ? _b : false;
    }
    get isChipViewEnabled() {
        return this.property.multivalued && this.useChipsForMultiValueProperty;
    }
}
CardViewTextItemComponent.decorators = [
    { type: Component, args: [{
                selector: 'adf-card-view-textitem',
                template: "<div [ngSwitch]=\"templateType\">\n    <div class=\"adf-property-label\"\n         [attr.data-automation-id]=\"'card-textitem-label-' + property.key\"\n         *ngIf=\"showProperty || isEditable\">\n        {{ property.label | translate }}\n    </div>\n\n    <div *ngSwitchDefault>\n        <mat-form-field class=\"adf-property-field adf-card-textitem-field\"\n                        [ngClass]=\"{ 'adf-property-read-only': !isEditable }\"\n                        [floatLabel]=\"'never'\">\n            <input matInput\n                   *ngIf=\"!property.multiline\"\n                   class=\"adf-property-value\"\n                   [placeholder]=\"property.default\"\n                   [formControl]=\"textInput\"\n                   (dblclick)=\"copyToClipboard(property.displayValue)\"\n                   matTooltipShowDelay=\"1000\"\n                   [matTooltip]=\"'CORE.METADATA.ACTIONS.COPY_TO_CLIPBOARD' | translate\"\n                   [matTooltipDisabled]=\"isEditable\"\n                   [attr.data-automation-id]=\"'card-textitem-value-' + property.key\">\n            <textarea matInput\n                      *ngIf=\"property.multiline\"\n                      [matTextareaAutosize]=\"true\"\n                      [matAutosizeMaxRows]=\"1\"\n                      [matAutosizeMaxRows]=\"5\"\n                      class=\"adf-property-value\"\n                      [placeholder]=\"property.default\"\n                      [formControl]=\"textInput\"\n                      [attr.data-automation-id]=\"'card-textitem-value-' + property.key\"></textarea>\n            <button mat-button\n                    matSuffix\n                    class=\"adf-property-clear-value\"\n                    *ngIf=\"isEditable\"\n                    mat-icon-button\n                    aria-label=\"Clear\"\n                    (click)=\"clearValue()\">\n                <mat-icon>cancel</mat-icon>\n            </button>\n            <mat-icon matSuffix\n                      *ngIf=\"isEditable\"\n                      [attr.title]=\"'CORE.METADATA.ACTIONS.EDIT' | translate\"\n                      class=\"adf-textitem-edit-icon\">mode_edit</mat-icon>\n\n        </mat-form-field>\n    </div>\n\n    <mat-error [attr.data-automation-id]=\"'card-textitem-error-' + property.key\"\n               class=\"adf-textitem-editable-error\"\n               *ngIf=\"isEditable && hasErrors\">\n        <ul>\n            <li *ngFor=\"let error of errors\">{{ error.message | translate: error }}</li>\n        </ul>\n    </mat-error>\n\n    <div *ngSwitchCase=\"'chipsTemplate'\"\n         class=\"adf-property-field adf-textitem-chip-list-container\">\n        <mat-chip-list #chipList\n                       class=\"adf-textitem-chip-list\">\n            <mat-chip *ngFor=\"let propertyValue of editedValue; let idx = index\"\n                      [removable]=\"isEditable\"\n                      (removed)=\"removeValueFromList(idx)\">\n                {{ propertyValue }}\n                <mat-icon *ngIf=\"isEditable\"\n                          matChipRemove>cancel</mat-icon>\n            </mat-chip>\n        </mat-chip-list>\n\n        <mat-form-field *ngIf=\"isEditable\"\n                        class=\"adf-property-field adf-textitem-chip-list-input\"\n                        [ngClass]=\"{ 'adf-property-read-only': !isEditable }\"\n                        [floatLabel]=\"'never'\">\n            <input matInput\n                   class=\"adf-property-value\"\n                   [placeholder]=\"editedValue ? '' : property.default | translate\"\n                   [matChipInputFor]=\"chipList\"\n                   [matChipInputAddOnBlur]=\"true\"\n                   (matChipInputTokenEnd)=\"addValueToList($event)\"\n                   [attr.data-automation-id]=\"'card-textitem-editchipinput-' + property.key\">\n            <mat-icon matSuffix\n                      class=\"adf-textitem-edit-icon\">mode_edit</mat-icon>\n        </mat-form-field>\n    </div>\n\n    <div *ngSwitchCase=\"'clickableTemplate'\"\n         role=\"button\"\n         class=\"adf-textitem-clickable\"\n         [ngClass]=\"{ 'adf-property-read-only': !isEditable }\"\n         [attr.data-automation-id]=\"'card-textitem-toggle-' + property.key\"\n         (click)=\"clicked()\"\n         fxLayout=\"row\"\n         fxLayoutAlign=\"space-between center\">\n        <mat-form-field class=\"adf-property-field adf-card-textitem-field\"\n                        [floatLabel]=\"'never'\">\n            <input matInput\n                   [type]=property.inputType\n                   class=\"adf-property-value\"\n                   [ngClass]=\"{ 'adf-textitem-clickable-value': !isEditable }\"\n                   [placeholder]=\"property.default\"\n                   [(ngModel)]=\"editedValue\"\n                   (blur)=\"update()\"\n                   (keydown.enter)=\"update()\"\n                   [disabled]=\"!isEditable\"\n                   [attr.data-automation-id]=\"'card-textitem-value-' + property.key\">\n            <button mat-icon-button\n                    matSuffix\n                    fxFlex=\"0 0 auto\"\n                    *ngIf=\"showClickableIcon\"\n                    class=\"adf-textitem-action\"\n                    [attr.title]=\"'CORE.METADATA.ACTIONS.EDIT' | translate\"\n                    [attr.data-automation-id]=\"'card-textitem-clickable-icon-' + property.key\">\n                <mat-icon class=\"adf-textitem-icon\">{{ property?.icon }}</mat-icon>\n            </button>\n        </mat-form-field>\n\n    </div>\n\n    <div *ngSwitchCase=\"'emptyTemplate'\">\n        <span class=\"adf-textitem-default-value\">{{ property.default | translate }}</span>\n    </div>\n</div>\n",
                encapsulation: ViewEncapsulation.None,
                styles: [".adf-textitem-edit-icon.mat-icon{color:var(--adf-card-view-text-color);font-size:16px;height:16px;width:16px}.adf-textitem-action.mat-icon-button{color:var(--adf-card-view-text-color);height:20px;line-height:20px;width:20px}.adf-textitem-action:focus,.adf-textitem-action:hover{color:var(--theme-text-fg-color)}.adf-update-icon{padding-left:13px}.adf-textitem-readonly{cursor:pointer!important}.adf-textitem-readonly:focus .adf-textitem-action,.adf-textitem-readonly:hover .adf-textitem-action{color:var(--theme-text-fg-color)}.adf-textitem-chip-list-container{margin-bottom:25px!important;margin-top:6px}.adf-textitem-chip-list-container .mat-form-field-label{margin-top:6px}.adf-textitem-clickable{cursor:pointer!important;padding-top:3px}.adf-textitem-clickable .adf-textitem-edit-icon.mat-icon{line-height:16px}.adf-textitem-clickable:hover .adf-textitem-action{color:var(--theme-text-fg-color)}.adf-textitem-clickable-value{color:var(--theme-primary-color)!important;cursor:pointer!important}.adf-textitem-editable-controls{align-items:center;display:flex}.adf-textitem-editable-controls mat-icon:not(.adf-button-disabled):hover{color:var(--theme-text-fg-color);cursor:pointer!important}.adf-textitem-editable-controls mat-form-field{width:100%}.adf-textitem-editable-controls input:focus,.adf-textitem-editable-controls textarea:focus{border:1px solid var(--theme-accent-color-a200)}.adf-textitem-editable-error{font-size:12px;padding-top:4px}.adf-textitem-editable-error ul{list-style-type:none;margin:0;padding:0}.adf-textitem-editable-error ul li{margin:0;padding:0}.adf-textitem-default-value{color:var(--theme-text-color)}.adf-textitem-editable .mat-form-field-wrapper{margin:0;padding-bottom:0}.adf-textitem-editable .mat-form-field-underline{display:none}.adf-textitem-editable .mat-form-field-infix{border-top:none;padding:0}.adf-textitem-editable .mat-form-field-label-wrapper{padding-top:2em;position:static}.adf-textitem-editable .mat-form-field-label{top:4px}.adf-textitem-editable .mat-input-element{font-family:inherit;padding-top:6px;position:relative}.adf-textitem-editable .mat-input-element:focus{left:-6px;padding:5px;top:0}.adf-textitem-editable input.mat-input-element{margin-bottom:2px}.adf-textitem-editable input.mat-input-element:focus{margin-bottom:-8px}.adf-textitem-scroll{display:block;overflow-x:auto;white-space:nowrap}.adf-textitem-scroll::-webkit-scrollbar{height:5px}.adf-textitem-scroll:hover::-webkit-scrollbar-thumb{background-color:var(--adf-card-view-text-color);border-radius:2px;display:block}.adf-textitem-multiline{display:block}.adf-property-field .adf-property-clear-value{display:none}.adf-property-field.adf-card-textitem-field:hover .adf-textitem-edit-icon{display:none}.adf-property-field.adf-card-textitem-field:hover .adf-property-clear-value{color:var(--adf-card-view-text-color);display:inline}.adf-property-field.adf-card-textitem-field:hover .adf-property-clear-value:hover{color:var(--theme-text-fg-color)}"]
            },] }
];
CardViewTextItemComponent.ctorParameters = () => [
    { type: CardViewUpdateService },
    { type: ClipboardService },
    { type: TranslationService },
    { type: ChangeDetectorRef }
];
CardViewTextItemComponent.propDecorators = {
    editable: [{ type: Input }],
    displayEmpty: [{ type: Input }],
    copyToClipboardAction: [{ type: Input }],
    useChipsForMultiValueProperty: [{ type: Input }],
    multiValueSeparator: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,