/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, Input } from '@angular/core';
import { CardViewUpdateService } from '../../services/card-view-update.service';
import { BehaviorSubject, combineLatest, Observable, Subject } from 'rxjs';
import { BaseCardView } from '../base-card-view';
import { AppConfigService } from '../../../app-config/app-config.service';
import { takeUntil, map } from 'rxjs/operators';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../../services/card-view-update.service';
import * as ɵngcc2 from '../../../app-config/app-config.service';
import * as ɵngcc3 from '@angular/common';
import * as ɵngcc4 from '@angular/material/form-field';
import * as ɵngcc5 from '@angular/material/select';
import * as ɵngcc6 from './select-filter-input/select-filter-input.component';
import * as ɵngcc7 from '@angular/material/core';
import * as ɵngcc8 from '@ngx-translate/core';

function CardViewSelectItemComponent_ng_container_0_div_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 4);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵpipe(3, "async");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵattribute("data-automation-id", "select-readonly-value-" + ctx_r1.property.key);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(2, 2, ɵngcc0.ɵɵpipeBind1(3, 4, ctx_r1.property.displayValue)));
} }
function CardViewSelectItemComponent_ng_container_0_div_6_adf_select_filter_input_3_Template(rf, ctx) { if (rf & 1) {
    const _r7 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "adf-select-filter-input", 9);
    ɵngcc0.ɵɵlistener("change", function CardViewSelectItemComponent_ng_container_0_div_6_adf_select_filter_input_3_Template_adf_select_filter_input_change_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r7); const ctx_r6 = ɵngcc0.ɵɵnextContext(3); return ctx_r6.onFilterInputChange($event); });
    ɵngcc0.ɵɵelementEnd();
} }
function CardViewSelectItemComponent_ng_container_0_div_6_mat_option_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-option");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(2, 1, "CORE.CARDVIEW.NONE"));
} }
function CardViewSelectItemComponent_ng_container_0_div_6_mat_option_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-option", 10);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const option_r8 = ctx.$implicit;
    ɵngcc0.ɵɵproperty("value", option_r8.key);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 2, option_r8.label), " ");
} }
function CardViewSelectItemComponent_ng_container_0_div_6_Template(rf, ctx) { if (rf & 1) {
    const _r10 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div");
    ɵngcc0.ɵɵelementStart(1, "mat-form-field", 5);
    ɵngcc0.ɵɵelementStart(2, "mat-select", 6);
    ɵngcc0.ɵɵlistener("valueChange", function CardViewSelectItemComponent_ng_container_0_div_6_Template_mat_select_valueChange_2_listener($event) { ɵngcc0.ɵɵrestoreView(_r10); const ctx_r9 = ɵngcc0.ɵɵnextContext(2); return ctx_r9.value = $event; })("selectionChange", function CardViewSelectItemComponent_ng_container_0_div_6_Template_mat_select_selectionChange_2_listener($event) { ɵngcc0.ɵɵrestoreView(_r10); const ctx_r11 = ɵngcc0.ɵɵnextContext(2); return ctx_r11.onChange($event); });
    ɵngcc0.ɵɵtemplate(3, CardViewSelectItemComponent_ng_container_0_div_6_adf_select_filter_input_3_Template, 1, 0, "adf-select-filter-input", 7);
    ɵngcc0.ɵɵtemplate(4, CardViewSelectItemComponent_ng_container_0_div_6_mat_option_4_Template, 3, 3, "mat-option", 0);
    ɵngcc0.ɵɵtemplate(5, CardViewSelectItemComponent_ng_container_0_div_6_mat_option_5_Template, 3, 4, "mat-option", 8);
    ɵngcc0.ɵɵpipe(6, "async");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("value", ctx_r2.value);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r2.showInputFilter);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r2.showNoneOption());
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", ɵngcc0.ɵɵpipeBind1(6, 4, ctx_r2.list$));
} }
function CardViewSelectItemComponent_ng_container_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "div", 1);
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(4, "div", 2);
    ɵngcc0.ɵɵtemplate(5, CardViewSelectItemComponent_ng_container_0_div_5_Template, 4, 6, "div", 3);
    ɵngcc0.ɵɵtemplate(6, CardViewSelectItemComponent_ng_container_0_div_6_Template, 7, 6, "div", 0);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵattribute("data-automation-id", "card-select-label-" + ctx_r0.property.key);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(3, 4, ctx_r0.property.label));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r0.isEditable());
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.isEditable());
} }
export class CardViewSelectItemComponent extends BaseCardView {
    constructor(cardViewUpdateService, appConfig) {
        super(cardViewUpdateService);
        this.appConfig = appConfig;
        this.editable = false;
        this.displayNoneOption = true;
        this.displayEmpty = true;
        this.filter$ = new BehaviorSubject('');
        this.showInputFilter = false;
        this.onDestroy$ = new Subject();
        this.list$ = null;
    }
    ngOnChanges() {
        this.value = this.property.value;
    }
    ngOnInit() {
        this.getOptions()
            .pipe(takeUntil(this.onDestroy$))
            .subscribe((options) => {
            this.showInputFilter = options.length > this.optionsLimit;
        });
        this.list$ = this.getList();
    }
    onFilterInputChange(value) {
        this.filter$.next(value.toString());
    }
    isEditable() {
        return this.editable && this.property.editable;
    }
    getOptions() {
        return this.options$ || this.property.options$;
    }
    getList() {
        return combineLatest([this.getOptions(), this.filter$])
            .pipe(map(([items, filter]) => items.filter((item) => filter ? item.label.toLowerCase().includes(filter.toLowerCase())
            : true)), takeUntil(this.onDestroy$));
    }
    onChange(event) {
        const selectedOption = event.value !== undefined ? event.value : null;
        this.cardViewUpdateService.update(Object.assign({}, this.property), selectedOption);
        this.property.value = selectedOption;
    }
    showNoneOption() {
        return this.displayNoneOption;
    }
    get showProperty() {
        return this.displayEmpty || !this.property.isEmpty();
    }
    ngOnDestroy() {
        this.onDestroy$.next();
        this.onDestroy$.complete();
    }
    get optionsLimit() {
        return this.appConfig.get('content-metadata.selectFilterLimit', CardViewSelectItemComponent.HIDE_FILTER_LIMIT);
    }
}
CardViewSelectItemComponent.ɵfac = function CardViewSelectItemComponent_Factory(t) { return new (t || CardViewSelectItemComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.CardViewUpdateService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.AppConfigService)); };
CardViewSelectItemComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: CardViewSelectItemComponent, selectors: [["adf-card-view-selectitem"]], inputs: { editable: "editable", displayNoneOption: "displayNoneOption", displayEmpty: "displayEmpty", options$: "options$" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature], decls: 1, vars: 1, consts: [[4, "ngIf"], [1, "adf-property-label"], [1, "adf-property-field"], ["class", "adf-select-item-padding adf-property-value", "data-automation-class", "read-only-value", 4, "ngIf"], ["data-automation-class", "read-only-value", 1, "adf-select-item-padding", "adf-property-value"], [1, "adf-select-item-padding-editable", "adf-property-value"], ["panelClass", "adf-select-filter", "data-automation-class", "select-box", 3, "value", "valueChange", "selectionChange"], [3, "change", 4, "ngIf"], [3, "value", 4, "ngFor", "ngForOf"], [3, "change"], [3, "value"]], template: function CardViewSelectItemComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, CardViewSelectItemComponent_ng_container_0_Template, 7, 6, "ng-container", 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngIf", !ctx.property.isEmpty() || ctx.isEditable());
    } }, directives: [ɵngcc3.NgIf, ɵngcc4.MatFormField, ɵngcc5.MatSelect, ɵngcc3.NgForOf, ɵngcc6.SelectFilterInputComponent, ɵngcc7.MatOption], pipes: [ɵngcc8.TranslatePipe, ɵngcc3.AsyncPipe], styles: [".mat-form-field-type-mat-select[_ngcontent-%COMP%]{width:100%}.adf-select-item-padding[_ngcontent-%COMP%]{padding-bottom:20px;padding-top:6px}.adf-select-item-padding-editable[_ngcontent-%COMP%]{padding-bottom:6px;padding-top:6px}"] });
CardViewSelectItemComponent.HIDE_FILTER_LIMIT = 5;
CardViewSelectItemComponent.ctorParameters = () => [
    { type: CardViewUpdateService },
    { type: AppConfigService }
];
CardViewSelectItemComponent.propDecorators = {
    editable: [{ type: Input }],
    options$: [{ type: Input }],
    displayNoneOption: [{ type: Input }],
    displayEmpty: [{ type: Input }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CardViewSelectItemComponent, [{
        type: Component,
        args: [{
                selector: 'adf-card-view-selectitem',
                template: "<ng-container *ngIf=\"!property.isEmpty() || isEditable()\">\n    <div [attr.data-automation-id]=\"'card-select-label-' + property.key\"\n        class=\"adf-property-label\">{{ property.label | translate }}</div>\n    <div class=\"adf-property-field\">\n        <div *ngIf=\"!isEditable()\"\n            class=\"adf-select-item-padding adf-property-value\"\n            [attr.data-automation-id]=\"'select-readonly-value-' + property.key\"\n            data-automation-class=\"read-only-value\">{{ (property.displayValue | async) | translate }}</div>\n        <div *ngIf=\"isEditable()\">\n            <mat-form-field class=\"adf-select-item-padding-editable adf-property-value\">\n                <mat-select [(value)]=\"value\"\n                            panelClass=\"adf-select-filter\"\n                            (selectionChange)=\"onChange($event)\"\n                            data-automation-class=\"select-box\">\n\n                    <adf-select-filter-input *ngIf=\"showInputFilter\" (change)=\"onFilterInputChange($event)\"></adf-select-filter-input>\n\n                    <mat-option *ngIf=\"showNoneOption()\">{{ 'CORE.CARDVIEW.NONE' | translate }}</mat-option>\n                    <mat-option *ngFor=\"let option of list$ | async\"\n                                [value]=\"option.key\">\n                        {{ option.label | translate }}\n                    </mat-option>\n                </mat-select>\n            </mat-form-field>\n        </div>\n    </div>\n</ng-container>\n",
                styles: [".mat-form-field-type-mat-select{width:100%}.adf-select-item-padding{padding-bottom:20px;padding-top:6px}.adf-select-item-padding-editable{padding-bottom:6px;padding-top:6px}"]
            }]
    }], function () { return [{ type: ɵngcc1.CardViewUpdateService }, { type: ɵngcc2.AppConfigService }]; }, { editable: [{
            type: Input
        }], displayNoneOption: [{
            type: Input
        }], displayEmpty: [{
            type: Input
        }], options$: [{
            type: Input
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FyZC12aWV3LXNlbGVjdGl0ZW0uY29tcG9uZW50LmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9ob21lL3RyYXZpcy9idWlsZC9BbGZyZXNjby9hbGZyZXNjby1uZzItY29tcG9uZW50cy9saWIvY29yZS9jYXJkLXZpZXcvY29tcG9uZW50cy9jYXJkLXZpZXctc2VsZWN0aXRlbS9jYXJkLXZpZXctc2VsZWN0aXRlbS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUVILE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUF3QixNQUFNLGVBQWUsQ0FBQztBQUV2RSxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSx5Q0FBeUMsQ0FBQztBQUNoRixPQUFPLEVBQUUsZUFBZSxFQUFFLGFBQWEsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBRzNFLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUNqRCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSx3Q0FBd0MsQ0FBQztBQUMxRSxPQUFPLEVBQUUsU0FBUyxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQU9oRCxNQUFNLE9BQU8sMkJBQTRCLFNBQVEsWUFBc0Q7QUFBRyxJQXFCdEcsWUFBWSxxQkFBNEMsRUFBVSxTQUEyQjtBQUNqRyxRQUFRLEtBQUssQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO0FBQ3JDLFFBRnNFLGNBQVMsR0FBVCxTQUFTLENBQWtCO0FBQUMs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SUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLEVBQUUsQ0FBQztBQUM3RCxJQUFJLENBQUM7QUFDTCxJQUNJLFdBQVc7QUFDZixRQUFRLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFLENBQUM7QUFDL0IsUUFBUSxJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsRUFBRSxDQUFDO0FBQ25DLElBQUksQ0FBQztBQUNMLElBQ0ksSUFBWSxZQUFZO0FBQUssUUFDekIsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBUyxvQ0FBb0MsRUFBRSwyQkFBMkIsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0FBQy9ILElBQUksQ0FBQztBQUNMOzs7Ozs7dWJBQUM7QUFsRlUsNkNBQWlCLEdBQUcsQ0FBQyxDQUFDLEFBRDVCO0FBQUM7RUFMTCxTQUFTLFNBQUMscEJBS2dELFlBYmxELHFCQUFxQjtDQVMxQixRQUFRLEVBQUUsWEFUb0IsWUFLekIsZ0JBQWdCO0FBQUc7R0FJWSxrQkFDcEMsckJBTDJCO0FBQzVCLHVCQVVFLEtBQUs7QUFBSyx1QkFFVixLQUFLO0FBQUssZ0NBRVYsS0FBSztBQUNSLDJCQUVHLEtBQUs7QUFDVDs7Ozs7aXBDQWR1RCx5TkFFdkQ7Ozs7Ozs7Ozs7O29CQVlFO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBDb21wb25lbnQsIElucHV0LCBPbkNoYW5nZXMsIE9uRGVzdHJveSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ2FyZFZpZXdTZWxlY3RJdGVtTW9kZWwgfSBmcm9tICcuLi8uLi9tb2RlbHMvY2FyZC12aWV3LXNlbGVjdGl0ZW0ubW9kZWwnO1xuaW1wb3J0IHsgQ2FyZFZpZXdVcGRhdGVTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vc2VydmljZXMvY2FyZC12aWV3LXVwZGF0ZS5zZXJ2aWNlJztcbmltcG9ydCB7IEJlaGF2aW9yU3ViamVjdCwgY29tYmluZUxhdGVzdCwgT2JzZXJ2YWJsZSwgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgQ2FyZFZpZXdTZWxlY3RJdGVtT3B0aW9uIH0gZnJvbSAnLi4vLi4vaW50ZXJmYWNlcy9jYXJkLXZpZXcuaW50ZXJmYWNlcyc7XG5pbXBvcnQgeyBNYXRTZWxlY3RDaGFuZ2UgfSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbC9zZWxlY3QnO1xuaW1wb3J0IHsgQmFzZUNhcmRWaWV3IH0gZnJvbSAnLi4vYmFzZS1jYXJkLXZpZXcnO1xuaW1wb3J0IHsgQXBwQ29uZmlnU2VydmljZSB9IGZyb20gJy4uLy4uLy4uL2FwcC1jb25maWcvYXBwLWNvbmZpZy5zZXJ2aWNlJztcbmltcG9ydCB7IHRha2VVbnRpbCwgbWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ2FkZi1jYXJkLXZpZXctc2VsZWN0aXRlbScsXG4gICAgdGVtcGxhdGVVcmw6ICcuL2NhcmQtdmlldy1zZWxlY3RpdGVtLmNvbXBvbmVudC5odG1sJyxcbiAgICBzdHlsZVVybHM6IFsnLi9jYXJkLXZpZXctc2VsZWN0aXRlbS5jb21wb25lbnQuc2NzcyddXG59KVxuZXhwb3J0IGNsYXNzIENhcmRWaWV3U2VsZWN0SXRlbUNvbXBvbmVudCBleHRlbmRzIEJhc2VDYXJkVmlldzxDYXJkVmlld1NlbGVjdEl0ZW1Nb2RlbDxzdHJpbmcgfCBudW1iZXI+PiBpbXBsZW1lbnRzIE9uQ2hhbmdlcywgT25EZXN0cm95IHtcbiAgICBzdGF0aWMgSElERV9GSUxURVJfTElNSVQgPSA1O1xuXG4gICAgQElucHV0KCkgZWRpdGFibGU6IGJvb2xlYW4gPSBmYWxzZTtcblxuICAgIEBJbnB1dCgpIG9wdGlvbnMkOiBPYnNlcnZhYmxlPENhcmRWaWV3U2VsZWN0SXRlbU9wdGlvbjxzdHJpbmcgfCBudW1iZXI+W10+O1xuXG4gICAgQElucHV0KClcbiAgICBkaXNwbGF5Tm9uZU9wdGlvbjogYm9vbGVhbiA9IHRydWU7XG5cbiAgICBASW5wdXQoKVxuICAgIGRpc3BsYXlFbXB0eTogYm9vbGVhbiA9IHRydWU7XG5cbiAgICB2YWx1ZTogc3RyaW5nIHwgbnVtYmVyO1xuICAgIGZpbHRlciQ6IEJlaGF2aW9yU3ViamVjdDxzdHJpbmc+ID0gbmV3IEJlaGF2aW9yU3ViamVjdCgnJyk7XG4gICAgc2hvd0lucHV0RmlsdGVyOiBib29sZWFuID0gZmFsc2U7XG5cbiAgICBwcml2YXRlIG9uRGVzdHJveSQgPSBuZXcgU3ViamVjdDx2b2lkPigpO1xuXG4gICAgbGlzdCQ6IE9ic2VydmFibGU8Q2FyZFZpZXdTZWxlY3RJdGVtT3B0aW9uPHN0cmluZyB8IG51bWJlcj5bXT4gPSBudWxsO1xuXG4gICAgY29uc3RydWN0b3IoY2FyZFZpZXdVcGRhdGVTZXJ2aWNlOiBDYXJkVmlld1VwZGF0ZVNlcnZpY2UsIHByaXZhdGUgYXBwQ29uZmlnOiBBcHBDb25maWdTZXJ2aWNlKSB7XG4gICAgICAgIHN1cGVyKGNhcmRWaWV3VXBkYXRlU2VydmljZSk7XG4gICAgfVxuXG4gICAgbmdPbkNoYW5nZXMoKTogdm9pZCB7XG4gICAgICAgIHRoaXMudmFsdWUgPSB0aGlzLnByb3BlcnR5LnZhbHVlO1xuICAgIH1cblxuICAgIG5nT25Jbml0KCkge1xuICAgICAgICB0aGlzLmdldE9wdGlvbnMoKVxuICAgICAgICAgICAgLnBpcGUodGFrZVVudGlsKHRoaXMub25EZXN0cm95JCkpXG4gICAgICAgICAgICAuc3Vic2NyaWJlKChvcHRpb25zOiBDYXJkVmlld1NlbGVjdEl0ZW1PcHRpb248c3RyaW5nPltdKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5zaG93SW5wdXRGaWx0ZXIgPSBvcHRpb25zLmxlbmd0aCA+IHRoaXMub3B0aW9uc0xpbWl0O1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5saXN0JCA9IHRoaXMuZ2V0TGlzdCgpO1xuICAgIH1cblxuICAgIG9uRmlsdGVySW5wdXRDaGFuZ2UodmFsdWU6IHN0cmluZykge1xuICAgICAgICB0aGlzLmZpbHRlciQubmV4dCh2YWx1ZS50b1N0cmluZygpKTtcbiAgICB9XG5cbiAgICBpc0VkaXRhYmxlKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5lZGl0YWJsZSAmJiB0aGlzLnByb3BlcnR5LmVkaXRhYmxlO1xuICAgIH1cblxuICAgIGdldE9wdGlvbnMoKTogT2JzZXJ2YWJsZTxDYXJkVmlld1NlbGVjdEl0ZW1PcHRpb248c3RyaW5nIHwgbnVtYmVyPltdPiB7XG4gICAgICAgIHJldHVybiB0aGlzLm9wdGlvbnMkIHx8IHRoaXMucHJvcGVydHkub3B0aW9ucyQ7XG4gICAgfVxuXG4gICAgZ2V0TGlzdCgpOiBPYnNlcnZhYmxlPENhcmRWaWV3U2VsZWN0SXRlbU9wdGlvbjxzdHJpbmcgfCBudW1iZXI+W10+IHtcbiAgICAgICAgcmV0dXJuIGNvbWJpbmVMYXRlc3QoW3RoaXMuZ2V0T3B0aW9ucygpLCB0aGlzLmZpbHRlciRdKVxuICAgICAgICAgICAgLnBpcGUoXG4gICAgICAgICAgICAgICAgbWFwKChbaXRlbXMsIGZpbHRlcl0pID0+IGl0ZW1zLmZpbHRlcigoaXRlbTogQ2FyZFZpZXdTZWxlY3RJdGVtT3B0aW9uPHN0cmluZz4pID0+XG4gICAgICAgICAgICAgICAgICAgIGZpbHRlciA/IGl0ZW0ubGFiZWwudG9Mb3dlckNhc2UoKS5pbmNsdWRlcyhmaWx0ZXIudG9Mb3dlckNhc2UoKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIDogdHJ1ZSkpLFxuICAgICAgICAgICAgICAgIHRha2VVbnRpbCh0aGlzLm9uRGVzdHJveSQpXG4gICAgICAgICAgICApO1xuICAgIH1cblxuICAgIG9uQ2hhbmdlKGV2ZW50OiBNYXRTZWxlY3RDaGFuZ2UpOiB2b2lkIHtcbiAgICAgICAgY29uc3Qgc2VsZWN0ZWRPcHRpb24gPSBldmVudC52YWx1ZSAhPT0gdW5kZWZpbmVkID8gZXZlbnQudmFsdWUgOiBudWxsO1xuICAgICAgICB0aGlzLmNhcmRWaWV3VXBkYXRlU2VydmljZS51cGRhdGUoPENhcmRWaWV3U2VsZWN0SXRlbU1vZGVsPHN0cmluZz4+IHsgLi4udGhpcy5wcm9wZXJ0eSB9LCBzZWxlY3RlZE9wdGlvbik7XG4gICAgICAgIHRoaXMucHJvcGVydHkudmFsdWUgPSBzZWxlY3RlZE9wdGlvbjtcbiAgICB9XG5cbiAgICBzaG93Tm9uZU9wdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGlzcGxheU5vbmVPcHRpb247XG4gICAgfVxuXG4gICAgZ2V0IHNob3dQcm9wZXJ0eSgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGlzcGxheUVtcHR5IHx8ICF0aGlzLnByb3BlcnR5LmlzRW1wdHkoKTtcbiAgICB9XG5cbiAgICBuZ09uRGVzdHJveSgpIHtcbiAgICAgICAgdGhpcy5vbkRlc3Ryb3kkLm5leHQoKTtcbiAgICAgICAgdGhpcy5vbkRlc3Ryb3kkLmNvbXBsZXRlKCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBnZXQgb3B0aW9uc0xpbWl0KCk6IG51bWJlciB7XG4gICAgICAgIHJldHVybiB0aGlzLmFwcENvbmZpZy5nZXQ8bnVtYmVyPignY29udGVudC1tZXRhZGF0YS5zZWxlY3RGaWx0ZXJMaW1pdCcsIENhcmRWaWV3U2VsZWN0SXRlbUNvbXBvbmVudC5ISURFX0ZJTFRFUl9MSU1JVCk7XG4gICAgfVxufVxuIl19