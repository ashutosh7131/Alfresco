/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, ComponentFactoryResolver, Input, ViewChild } from '@angular/core';
import { CardItemTypeService } from '../../services/card-item-types.service';
import { CardViewContentProxyDirective } from '../../directives/card-view-content-proxy.directive';
import { DEFAULT_SEPARATOR } from '../card-view-textitem/card-view-textitem.component';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../../services/card-item-types.service';
import * as ɵngcc2 from '../../directives/card-view-content-proxy.directive';

function CardViewItemDispatcherComponent_ng_template_0_Template(rf, ctx) { }
export class CardViewItemDispatcherComponent {
    constructor(cardItemTypeService, resolver) {
        this.cardItemTypeService = cardItemTypeService;
        this.resolver = resolver;
        this.displayEmpty = true;
        this.displayNoneOption = true;
        this.displayClearAction = true;
        this.copyToClipboardAction = true;
        this.useChipsForMultiValueProperty = true;
        this.multiValueSeparator = DEFAULT_SEPARATOR;
        this.loaded = false;
        this.componentReference = null;
        const dynamicLifeCycleMethods = [
            'ngOnInit',
            'ngDoCheck',
            'ngAfterContentInit',
            'ngAfterContentChecked',
            'ngAfterViewInit',
            'ngAfterViewChecked',
            'ngOnDestroy'
        ];
        dynamicLifeCycleMethods.forEach((method) => {
            this[method] = this.proxy.bind(this, method);
        });
    }
    ngOnChanges(changes) {
        if (!this.loaded) {
            this.loadComponent();
            this.loaded = true;
        }
        Object.keys(changes)
            .map((changeName) => [changeName, changes[changeName]])
            .forEach(([inputParamName, simpleChange]) => {
            this.componentReference.instance[inputParamName] = simpleChange.currentValue;
        });
        this.proxy('ngOnChanges', changes);
    }
    loadComponent() {
        const factoryClass = this.cardItemTypeService.resolveComponentType(this.property);
        const factory = this.resolver.resolveComponentFactory(factoryClass);
        this.componentReference = this.content.viewContainerRef.createComponent(factory);
        this.componentReference.instance.editable = this.editable;
        this.componentReference.instance.property = this.property;
        this.componentReference.instance.displayEmpty = this.displayEmpty;
        this.componentReference.instance.displayNoneOption = this.displayNoneOption;
        this.componentReference.instance.displayClearAction = this.displayClearAction;
        this.componentReference.instance.copyToClipboardAction = this.copyToClipboardAction;
        this.componentReference.instance.useChipsForMultiValueProperty = this.useChipsForMultiValueProperty;
        this.componentReference.instance.multiValueSeparator = this.multiValueSeparator;
    }
    proxy(methodName, ...args) {
        if (this.componentReference.instance[methodName]) {
            this.componentReference.instance[methodName].apply(this.componentReference.instance, args);
        }
    }
}
CardViewItemDispatcherComponent.ɵfac = function CardViewItemDispatcherComponent_Factory(t) { return new (t || CardViewItemDispatcherComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.CardItemTypeService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ComponentFactoryResolver)); };
CardViewItemDispatcherComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: CardViewItemDispatcherComponent, selectors: [["adf-card-view-item-dispatcher"]], viewQuery: function CardViewItemDispatcherComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵstaticViewQuery(CardViewContentProxyDirective, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.content = _t.first);
    } }, inputs: { displayEmpty: "displayEmpty", displayNoneOption: "displayNoneOption", displayClearAction: "displayClearAction", copyToClipboardAction: "copyToClipboardAction", useChipsForMultiValueProperty: "useChipsForMultiValueProperty", multiValueSeparator: "multiValueSeparator", property: "property", editable: "editable" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 1, vars: 0, consts: [["adf-card-view-content-proxy", ""]], template: function CardViewItemDispatcherComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, CardViewItemDispatcherComponent_ng_template_0_Template, 0, 0, "ng-template", 0);
    } }, directives: [ɵngcc2.CardViewContentProxyDirective], encapsulation: 2 });
CardViewItemDispatcherComponent.ctorParameters = () => [
    { type: CardItemTypeService },
    { type: ComponentFactoryResolver }
];
CardViewItemDispatcherComponent.propDecorators = {
    property: [{ type: Input }],
    editable: [{ type: Input }],
    displayEmpty: [{ type: Input }],
    displayNoneOption: [{ type: Input }],
    displayClearAction: [{ type: Input }],
    copyToClipboardAction: [{ type: Input }],
    useChipsForMultiValueProperty: [{ type: Input }],
    multiValueSeparator: [{ type: Input }],
    content: [{ type: ViewChild, args: [CardViewContentProxyDirective, { static: true },] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CardViewItemDispatcherComponent, [{
        type: Component,
        args: [{
                selector: 'adf-card-view-item-dispatcher',
                template: '<ng-template adf-card-view-content-proxy></ng-template>'
            }]
    }], function () { return [{ type: ɵngcc1.CardItemTypeService }, { type: ɵngcc0.ComponentFactoryResolver }]; }, { displayEmpty: [{
            type: Input
        }], displayNoneOption: [{
            type: Input
        }], displayClearAction: [{
            type: Input
        }], copyToClipboardAction: [{
            type: Input
        }], useChipsForMultiValueProperty: [{
            type: Input
        }], multiValueSeparator: [{
            type: Input
        }], property: [{
            type: Input
        }], editable: [{
            type: Input
        }], content: [{
            type: ViewChild,
            args: [CardViewContentProxyDirective, { static: true }]
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,