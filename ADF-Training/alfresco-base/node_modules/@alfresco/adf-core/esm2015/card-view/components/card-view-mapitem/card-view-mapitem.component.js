/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, Input } from '@angular/core';
import { CardViewMapItemModel } from '../../models/card-view-mapitem.model';
import { CardViewUpdateService } from '../../services/card-view-update.service';
import { BaseCardView } from '../base-card-view';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../../services/card-view-update.service';
import * as ɵngcc2 from '@angular/common';
import * as ɵngcc3 from '@ngx-translate/core';

function CardViewMapItemComponent_div_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 5);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵattribute("data-automation-id", "card-mapitem-label-" + ctx_r0.property.key);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(2, 2, ctx_r0.property.label));
} }
function CardViewMapItemComponent_span_3_span_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r6 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r6.property.displayValue);
} }
function CardViewMapItemComponent_span_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span");
    ɵngcc0.ɵɵtemplate(1, CardViewMapItemComponent_span_3_span_1_Template, 2, 1, "span", 6);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵattribute("data-automation-id", "card-mapitem-value-" + ctx_r1.property.key);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r1.showProperty());
} }
function CardViewMapItemComponent_ng_template_4_span_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r7 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r7.property.displayValue);
} }
function CardViewMapItemComponent_ng_template_4_Template(rf, ctx) { if (rf & 1) {
    const _r9 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "span", 7);
    ɵngcc0.ɵɵlistener("click", function CardViewMapItemComponent_ng_template_4_Template_span_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r9); const ctx_r8 = ɵngcc0.ɵɵnextContext(); return ctx_r8.clicked(); });
    ɵngcc0.ɵɵtemplate(1, CardViewMapItemComponent_ng_template_4_span_1_Template, 2, 1, "span", 2);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = ɵngcc0.ɵɵnextContext();
    const _r4 = ɵngcc0.ɵɵreference(7);
    ɵngcc0.ɵɵattribute("data-automation-id", "card-mapitem-value-" + ctx_r3.property.key);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r3.showProperty())("ngIfElse", _r4);
} }
function CardViewMapItemComponent_ng_template_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtext(0);
    ɵngcc0.ɵɵpipe(1, "translate");
} if (rf & 2) {
    const ctx_r5 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(1, 1, ctx_r5.property.default), " ");
} }
export class CardViewMapItemComponent extends BaseCardView {
    constructor(cardViewUpdateService) {
        super(cardViewUpdateService);
        this.displayEmpty = true;
    }
    showProperty() {
        return this.displayEmpty || !this.property.isEmpty();
    }
    isClickable() {
        return this.property.clickable;
    }
    clicked() {
        this.cardViewUpdateService.clicked(this.property);
    }
}
CardViewMapItemComponent.ɵfac = function CardViewMapItemComponent_Factory(t) { return new (t || CardViewMapItemComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.CardViewUpdateService)); };
CardViewMapItemComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: CardViewMapItemComponent, selectors: [["adf-card-view-mapitem"]], inputs: { displayEmpty: "displayEmpty", property: "property" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 8, vars: 3, consts: [["class", "adf-property-label", 4, "ngIf"], [1, "adf-property-value", "adf-map-item-padding"], [4, "ngIf", "ngIfElse"], ["clickableTemplate", ""], ["emptyValueTemplate", ""], [1, "adf-property-label"], [4, "ngIf"], [1, "adf-mapitem-clickable-value", 3, "click"]], template: function CardViewMapItemComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, CardViewMapItemComponent_div_0_Template, 3, 4, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "div", 1);
        ɵngcc0.ɵɵelementStart(2, "div");
        ɵngcc0.ɵɵtemplate(3, CardViewMapItemComponent_span_3_Template, 2, 2, "span", 2);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(4, CardViewMapItemComponent_ng_template_4_Template, 2, 3, "ng-template", null, 3, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵtemplate(6, CardViewMapItemComponent_ng_template_6_Template, 2, 3, "ng-template", null, 4, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        const _r2 = ɵngcc0.ɵɵreference(5);
        ɵngcc0.ɵɵproperty("ngIf", ctx.showProperty());
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.isClickable())("ngIfElse", _r2);
    } }, directives: [ɵngcc2.NgIf], pipes: [ɵngcc3.TranslatePipe], styles: [".adf-mapitem-clickable-value[_ngcontent-%COMP%]{cursor:pointer!important}.adf-map-item-padding[_ngcontent-%COMP%]{padding-top:6px}"] });
CardViewMapItemComponent.ctorParameters = () => [
    { type: CardViewUpdateService }
];
CardViewMapItemComponent.propDecorators = {
    property: [{ type: Input }],
    displayEmpty: [{ type: Input }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CardViewMapItemComponent, [{
        type: Component,
        args: [{
                selector: 'adf-card-view-mapitem',
                template: "<div [attr.data-automation-id]=\"'card-mapitem-label-' + property.key\"\n     class=\"adf-property-label\"\n     *ngIf=\"showProperty()\">{{ property.label | translate }}</div>\n<div class=\"adf-property-value adf-map-item-padding\">\n    <div>\n        <span *ngIf=\"!isClickable(); else clickableTemplate\"\n              [attr.data-automation-id]=\"'card-mapitem-value-' + property.key\">\n            <span *ngIf=\"showProperty();\">{{ property.displayValue }}</span>\n        </span>\n    </div>\n    <ng-template #clickableTemplate>\n        <span class=\"adf-mapitem-clickable-value\"\n              (click)=\"clicked()\"\n              [attr.data-automation-id]=\"'card-mapitem-value-' + property.key\">\n            <span *ngIf=\"showProperty(); else emptyValueTemplate\">{{ property.displayValue }}</span>\n        </span>\n    </ng-template>\n    <ng-template #emptyValueTemplate>\n        {{ property.default | translate }}\n    </ng-template>\n</div>\n",
                styles: [".adf-mapitem-clickable-value{cursor:pointer!important}.adf-map-item-padding{padding-top:6px}"]
            }]
    }], function () { return [{ type: ɵngcc1.CardViewUpdateService }]; }, { displayEmpty: [{
            type: Input
        }], property: [{
            type: Input
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FyZC12aWV3LW1hcGl0ZW0uY29tcG9uZW50LmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9ob21lL3RyYXZpcy9idWlsZC9BbGZyZXNjby9hbGZyZXNjby1uZzItY29tcG9uZW50cy9saWIvY29yZS9jYXJkLXZpZXcvY29tcG9uZW50cy9jYXJkLXZpZXctbWFwaXRlbS9jYXJkLXZpZXctbWFwaXRlbS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUVILE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ2pELE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLHNDQUFzQyxDQUFDO0FBQzVFLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLHlDQUF5QyxDQUFDO0FBQ2hGLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFRakQsTUFBTSxPQUFPLHdCQUF5QixTQUFRLFlBQWtDO0FBQ2hGLElBTUksWUFBWSxxQkFBNEM7QUFDNUQsUUFBUSxLQUFLLENBQUMscUJBQXFCLENBQUMsQ0FBQztBQUNyQyxRQUpJLGlCQUFZLEdBQVksSUFBSSxDQUFDO0FBQ2pDLElBR0ksQ0FBQztBQUNMLElBQ0ksWUFBWTtBQUNoQixRQUFRLE9BQU8sSUFBSSxDQUFDLFlBQVksSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxFQUFFLENBQUM7QUFDN0QsSUFBSSxDQUFDO0FBQ0wsSUFDSSxXQUFXO0FBQ2YsUUFBUSxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDO0FBQ3ZDLElBQUksQ0FBQztBQUNMLElBQ0ksT0FBTztBQUFLLFFBQ1IsSUFBSSxDQUFDLHFCQUFxQixDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDMUQsSUFBSSxDQUFDO0FBQ0w7b0RBNUJDLFNBQVMsU0FBQyxrQkFDUCxRQUFRLEVBQUUsdUJBQXVCLGtCQUNqQzs7Ozs7Ozs4QkFBaUQ7MEJBRXBEOzs7Ozs7O3FOQUVHO0FBQUM7QUFBa0QsWUFUOUMscUJBQXFCO0FBQUc7QUFBRztBQUE0Qyx1QkFVM0UsS0FBSztBQUNSLDJCQUVHLEtBQUs7QUFDVDs7Ozs7Ozs7Ozs7O29CQUFFO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBDb21wb25lbnQsIElucHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDYXJkVmlld01hcEl0ZW1Nb2RlbCB9IGZyb20gJy4uLy4uL21vZGVscy9jYXJkLXZpZXctbWFwaXRlbS5tb2RlbCc7XG5pbXBvcnQgeyBDYXJkVmlld1VwZGF0ZVNlcnZpY2UgfSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9jYXJkLXZpZXctdXBkYXRlLnNlcnZpY2UnO1xuaW1wb3J0IHsgQmFzZUNhcmRWaWV3IH0gZnJvbSAnLi4vYmFzZS1jYXJkLXZpZXcnO1xuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ2FkZi1jYXJkLXZpZXctbWFwaXRlbScsXG4gICAgdGVtcGxhdGVVcmw6ICcuL2NhcmQtdmlldy1tYXBpdGVtLmNvbXBvbmVudC5odG1sJyxcbiAgICBzdHlsZVVybHM6IFsnLi9jYXJkLXZpZXctbWFwaXRlbS5jb21wb25lbnQuc2NzcyddXG59KVxuXG5leHBvcnQgY2xhc3MgQ2FyZFZpZXdNYXBJdGVtQ29tcG9uZW50IGV4dGVuZHMgQmFzZUNhcmRWaWV3PENhcmRWaWV3TWFwSXRlbU1vZGVsPiB7XG4gICAgQElucHV0KClcbiAgICBwcm9wZXJ0eTogQ2FyZFZpZXdNYXBJdGVtTW9kZWw7XG5cbiAgICBASW5wdXQoKVxuICAgIGRpc3BsYXlFbXB0eTogYm9vbGVhbiA9IHRydWU7XG5cbiAgICBjb25zdHJ1Y3RvcihjYXJkVmlld1VwZGF0ZVNlcnZpY2U6IENhcmRWaWV3VXBkYXRlU2VydmljZSkge1xuICAgICAgICBzdXBlcihjYXJkVmlld1VwZGF0ZVNlcnZpY2UpO1xuICAgIH1cblxuICAgIHNob3dQcm9wZXJ0eSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGlzcGxheUVtcHR5IHx8ICF0aGlzLnByb3BlcnR5LmlzRW1wdHkoKTtcbiAgICB9XG5cbiAgICBpc0NsaWNrYWJsZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJvcGVydHkuY2xpY2thYmxlO1xuICAgIH1cblxuICAgIGNsaWNrZWQoKTogdm9pZCB7XG4gICAgICAgIHRoaXMuY2FyZFZpZXdVcGRhdGVTZXJ2aWNlLmNsaWNrZWQodGhpcy5wcm9wZXJ0eSk7XG4gICAgfVxufVxuIl19