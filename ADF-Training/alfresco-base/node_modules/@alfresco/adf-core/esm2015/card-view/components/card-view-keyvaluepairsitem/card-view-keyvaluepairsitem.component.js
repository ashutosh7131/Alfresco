/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, Input, ViewEncapsulation } from '@angular/core';
import { CardViewUpdateService } from '../../services/card-view-update.service';
import { MatTableDataSource } from '@angular/material/table';
import { BaseCardView } from '../base-card-view';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../../services/card-view-update.service';
import * as ɵngcc2 from '@angular/common';
import * as ɵngcc3 from '@angular/material/table';
import * as ɵngcc4 from '@angular/material/form-field';
import * as ɵngcc5 from '@angular/material/input';
import * as ɵngcc6 from '@angular/forms';
import * as ɵngcc7 from '@angular/material/button';
import * as ɵngcc8 from '@angular/material/icon';
import * as ɵngcc9 from '@ngx-translate/core';

function CardViewKeyValuePairsItemComponent_div_4_mat_header_cell_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-header-cell");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1("", ɵngcc0.ɵɵpipeBind1(2, 1, "CORE.CARDVIEW.KEYVALUEPAIRS.NAME"), " ");
} }
function CardViewKeyValuePairsItemComponent_div_4_mat_cell_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-cell");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const item_r10 = ctx.$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(item_r10.name);
} }
function CardViewKeyValuePairsItemComponent_div_4_mat_header_cell_7_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-header-cell");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1("", ɵngcc0.ɵɵpipeBind1(2, 1, "CORE.CARDVIEW.KEYVALUEPAIRS.VALUE"), " ");
} }
function CardViewKeyValuePairsItemComponent_div_4_mat_cell_8_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-cell");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const item_r11 = ctx.$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(item_r11.value);
} }
function CardViewKeyValuePairsItemComponent_div_4_mat_header_row_9_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "mat-header-row");
} }
function CardViewKeyValuePairsItemComponent_div_4_mat_row_10_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "mat-row");
} }
const _c0 = function () { return ["name", "value"]; };
function CardViewKeyValuePairsItemComponent_div_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 5);
    ɵngcc0.ɵɵelementStart(1, "mat-table", 6, 7);
    ɵngcc0.ɵɵelementContainerStart(3, 8);
    ɵngcc0.ɵɵtemplate(4, CardViewKeyValuePairsItemComponent_div_4_mat_header_cell_4_Template, 3, 3, "mat-header-cell", 9);
    ɵngcc0.ɵɵtemplate(5, CardViewKeyValuePairsItemComponent_div_4_mat_cell_5_Template, 2, 1, "mat-cell", 10);
    ɵngcc0.ɵɵelementContainerEnd();
    ɵngcc0.ɵɵelementContainerStart(6, 11);
    ɵngcc0.ɵɵtemplate(7, CardViewKeyValuePairsItemComponent_div_4_mat_header_cell_7_Template, 3, 3, "mat-header-cell", 9);
    ɵngcc0.ɵɵtemplate(8, CardViewKeyValuePairsItemComponent_div_4_mat_cell_8_Template, 2, 1, "mat-cell", 10);
    ɵngcc0.ɵɵelementContainerEnd();
    ɵngcc0.ɵɵtemplate(9, CardViewKeyValuePairsItemComponent_div_4_mat_header_row_9_Template, 1, 0, "mat-header-row", 12);
    ɵngcc0.ɵɵtemplate(10, CardViewKeyValuePairsItemComponent_div_4_mat_row_10_Template, 1, 0, "mat-row", 13);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("dataSource", ctx_r0.matTableValues);
    ɵngcc0.ɵɵadvance(8);
    ɵngcc0.ɵɵproperty("matHeaderRowDef", ɵngcc0.ɵɵpureFunction0(3, _c0));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("matRowDefColumns", ɵngcc0.ɵɵpureFunction0(4, _c0));
} }
function CardViewKeyValuePairsItemComponent_div_5_div_8_Template(rf, ctx) { if (rf & 1) {
    const _r17 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 15);
    ɵngcc0.ɵɵelementStart(1, "div", 16);
    ɵngcc0.ɵɵelementStart(2, "mat-form-field");
    ɵngcc0.ɵɵelementStart(3, "input", 18);
    ɵngcc0.ɵɵlistener("blur", function CardViewKeyValuePairsItemComponent_div_5_div_8_Template_input_blur_3_listener() { ɵngcc0.ɵɵrestoreView(_r17); const item_r14 = ctx.$implicit; const ctx_r16 = ɵngcc0.ɵɵnextContext(2); return ctx_r16.onBlur(item_r14.value); })("ngModelChange", function CardViewKeyValuePairsItemComponent_div_5_div_8_Template_input_ngModelChange_3_listener($event) { ɵngcc0.ɵɵrestoreView(_r17); const i_r15 = ctx.index; const ctx_r18 = ɵngcc0.ɵɵnextContext(2); return ctx_r18.values[i_r15].name = $event; });
    ɵngcc0.ɵɵpipe(4, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(5, "div", 16);
    ɵngcc0.ɵɵelementStart(6, "mat-form-field");
    ɵngcc0.ɵɵelementStart(7, "input", 18);
    ɵngcc0.ɵɵlistener("blur", function CardViewKeyValuePairsItemComponent_div_5_div_8_Template_input_blur_7_listener() { ɵngcc0.ɵɵrestoreView(_r17); const item_r14 = ctx.$implicit; const ctx_r19 = ɵngcc0.ɵɵnextContext(2); return ctx_r19.onBlur(item_r14.value); })("ngModelChange", function CardViewKeyValuePairsItemComponent_div_5_div_8_Template_input_ngModelChange_7_listener($event) { ɵngcc0.ɵɵrestoreView(_r17); const i_r15 = ctx.index; const ctx_r20 = ɵngcc0.ɵɵnextContext(2); return ctx_r20.values[i_r15].value = $event; });
    ɵngcc0.ɵɵpipe(8, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(9, "button", 19);
    ɵngcc0.ɵɵlistener("click", function CardViewKeyValuePairsItemComponent_div_5_div_8_Template_button_click_9_listener() { ɵngcc0.ɵɵrestoreView(_r17); const i_r15 = ctx.index; const ctx_r21 = ɵngcc0.ɵɵnextContext(2); return ctx_r21.remove(i_r15); });
    ɵngcc0.ɵɵelementStart(10, "mat-icon");
    ɵngcc0.ɵɵtext(11, "close");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const i_r15 = ctx.index;
    const ctx_r13 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵpropertyInterpolate("placeholder", ɵngcc0.ɵɵpipeBind1(4, 6, "CORE.CARDVIEW.KEYVALUEPAIRS.NAME"));
    ɵngcc0.ɵɵproperty("ngModel", ctx_r13.values[i_r15].name);
    ɵngcc0.ɵɵattribute("data-automation-id", "card-" + ctx_r13.property.key + "-name-input-" + i_r15);
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵpropertyInterpolate("placeholder", ɵngcc0.ɵɵpipeBind1(8, 8, "CORE.CARDVIEW.KEYVALUEPAIRS.VALUE"));
    ɵngcc0.ɵɵproperty("ngModel", ctx_r13.values[i_r15].value);
    ɵngcc0.ɵɵattribute("data-automation-id", "card-" + ctx_r13.property.key + "-value-input-" + i_r15);
} }
function CardViewKeyValuePairsItemComponent_div_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 14);
    ɵngcc0.ɵɵelementStart(1, "div", 15);
    ɵngcc0.ɵɵelementStart(2, "div", 16);
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵpipe(4, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(5, "div", 16);
    ɵngcc0.ɵɵtext(6);
    ɵngcc0.ɵɵpipe(7, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(8, CardViewKeyValuePairsItemComponent_div_5_div_8_Template, 12, 10, "div", 17);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(4, 3, "CORE.CARDVIEW.KEYVALUEPAIRS.NAME"));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(7, 5, "CORE.CARDVIEW.KEYVALUEPAIRS.VALUE"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r1.values);
} }
function CardViewKeyValuePairsItemComponent_div_6_Template(rf, ctx) { if (rf & 1) {
    const _r23 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 20);
    ɵngcc0.ɵɵelementStart(1, "button", 21);
    ɵngcc0.ɵɵlistener("click", function CardViewKeyValuePairsItemComponent_div_6_Template_button_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r23); const ctx_r22 = ɵngcc0.ɵɵnextContext(); return ctx_r22.add(); });
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementStart(4, "mat-icon");
    ɵngcc0.ɵɵtext(5, "add");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵattribute("data-automation-id", "card-key-value-pairs-button-" + ctx_r2.property.key);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(3, 2, "CORE.CARDVIEW.KEYVALUEPAIRS.ADD"), " ");
} }
export class CardViewKeyValuePairsItemComponent extends BaseCardView {
    constructor(cardViewUpdateService) {
        super(cardViewUpdateService);
        this.editable = false;
    }
    ngOnChanges() {
        this.values = this.property.value || [];
        this.matTableValues = new MatTableDataSource(this.values);
    }
    isEditable() {
        return this.editable && this.property.editable;
    }
    add() {
        this.values.push({ name: '', value: '' });
    }
    remove(index) {
        this.values.splice(index, 1);
        this.save(true);
    }
    onBlur(value) {
        if (value.length) {
            this.save();
        }
    }
    save(remove) {
        const validValues = this.values.filter((i) => i.name.length && i.value.length);
        if (remove || validValues.length) {
            this.cardViewUpdateService.update(Object.assign({}, this.property), validValues);
            this.property.value = validValues;
        }
    }
}
CardViewKeyValuePairsItemComponent.ɵfac = function CardViewKeyValuePairsItemComponent_Factory(t) { return new (t || CardViewKeyValuePairsItemComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.CardViewUpdateService)); };
CardViewKeyValuePairsItemComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: CardViewKeyValuePairsItemComponent, selectors: [["adf-card-view-boolitem"]], inputs: { editable: "editable" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature], decls: 7, vars: 7, consts: [[1, "adf-property-label"], [1, "adf-property-field"], ["class", "adf-card-view__key-value-pairs__read-only adf-property-value", 4, "ngIf"], ["class", "adf-card-view__key-value-pairs adf-property-value", 4, "ngIf"], ["class", "adf-property-value adf-card-view__key-value-pairs__add-btn-container", 4, "ngIf"], [1, "adf-card-view__key-value-pairs__read-only", "adf-property-value"], [1, "mat-elevation-z8", 3, "dataSource"], ["table", ""], ["matColumnDef", "name"], [4, "matHeaderCellDef"], [4, "matCellDef"], ["matColumnDef", "value"], [4, "matHeaderRowDef"], [4, "matRowDef", "matRowDefColumns"], [1, "adf-card-view__key-value-pairs", "adf-property-value"], [1, "adf-card-view__key-value-pairs__row"], [1, "adf-card-view__key-value-pairs__col"], ["class", "adf-card-view__key-value-pairs__row", 4, "ngFor", "ngForOf"], ["matInput", "", 3, "placeholder", "ngModel", "blur", "ngModelChange"], ["matSuffix", "", "mat-icon-button", "", 1, "adf-card-view__key-value-pairs__remove-btn", 3, "click"], [1, "adf-property-value", "adf-card-view__key-value-pairs__add-btn-container"], ["mat-button", "", 1, "adf-card-view__key-value-pairs__add-btn", 3, "click"]], template: function CardViewKeyValuePairsItemComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵtext(1);
        ɵngcc0.ɵɵpipe(2, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(3, "div", 1);
        ɵngcc0.ɵɵtemplate(4, CardViewKeyValuePairsItemComponent_div_4_Template, 11, 5, "div", 2);
        ɵngcc0.ɵɵtemplate(5, CardViewKeyValuePairsItemComponent_div_5_Template, 9, 7, "div", 3);
        ɵngcc0.ɵɵtemplate(6, CardViewKeyValuePairsItemComponent_div_6_Template, 6, 4, "div", 4);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵattribute("data-automation-id", "card-key-value-pairs-label-" + ctx.property.key);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(2, 5, ctx.property.label));
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.isEditable());
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.isEditable() && ctx.values && ctx.values.length);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.isEditable());
    } }, directives: [ɵngcc2.NgIf, ɵngcc3.MatTable, ɵngcc3.MatColumnDef, ɵngcc3.MatHeaderCellDef, ɵngcc3.MatCellDef, ɵngcc3.MatHeaderRowDef, ɵngcc3.MatRowDef, ɵngcc3.MatHeaderCell, ɵngcc3.MatCell, ɵngcc3.MatHeaderRow, ɵngcc3.MatRow, ɵngcc2.NgForOf, ɵngcc4.MatFormField, ɵngcc5.MatInput, ɵngcc6.DefaultValueAccessor, ɵngcc6.NgControlStatus, ɵngcc6.NgModel, ɵngcc7.MatButton, ɵngcc4.MatSuffix, ɵngcc8.MatIcon], pipes: [ɵngcc9.TranslatePipe], styles: [".adf-card-view__key-value-pairs__row{display:flex;justify-content:center}.adf-card-view__key-value-pairs__col{width:50%}.adf-card-view__key-value-pairs__col .mat-form-field{font-size:14px;width:100%}.adf-card-view__key-value-pairs__col .mat-form-field-appearance-legacy .mat-form-field-label{color:var(--adf-card-view-label-color)!important}.adf-card-view__key-value-pairs__add-btn-container{display:flex;justify-content:center}.adf-card-view__key-value-pairs__add-btn.mat-button{margin-bottom:20px}.adf-card-view__key-value-pairs__read-only{padding-bottom:20px}.adf-card-view__key-value-pairs__read-only .mat-table{box-shadow:none}.adf-card-view__key-value-pairs__read-only .mat-header-row,.adf-card-view__key-value-pairs__read-only .mat-row{padding:0}"], encapsulation: 2 });
CardViewKeyValuePairsItemComponent.ctorParameters = () => [
    { type: CardViewUpdateService }
];
CardViewKeyValuePairsItemComponent.propDecorators = {
    editable: [{ type: Input }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CardViewKeyValuePairsItemComponent, [{
        type: Component,
        args: [{
                selector: 'adf-card-view-boolitem',
                template: "<div [attr.data-automation-id]=\"'card-key-value-pairs-label-' + property.key\"\n     class=\"adf-property-label\">{{ property.label | translate }}</div>\n<div class=\"adf-property-field\">\n\n    <div *ngIf=\"!isEditable()\"\n         class=\"adf-card-view__key-value-pairs__read-only adf-property-value\">\n        <mat-table #table\n                   [dataSource]=\"matTableValues\"\n                   class=\"mat-elevation-z8\">\n            <ng-container matColumnDef=\"name\">\n                <mat-header-cell *matHeaderCellDef>{{ 'CORE.CARDVIEW.KEYVALUEPAIRS.NAME' | translate }}\n                </mat-header-cell>\n                <mat-cell *matCellDef=\"let item\">{{item.name}}</mat-cell>\n            </ng-container>\n            <ng-container matColumnDef=\"value\">\n                <mat-header-cell *matHeaderCellDef>{{ 'CORE.CARDVIEW.KEYVALUEPAIRS.VALUE' | translate }}\n                </mat-header-cell>\n                <mat-cell *matCellDef=\"let item\">{{item.value}}</mat-cell>\n            </ng-container>\n\n            <mat-header-row *matHeaderRowDef=\"['name', 'value']\"></mat-header-row>\n            <mat-row *matRowDef=\"let row; columns: ['name', 'value'];\"></mat-row>\n        </mat-table>\n    </div>\n\n\n    <div class=\"adf-card-view__key-value-pairs adf-property-value\"\n         *ngIf=\"isEditable() && values && values.length\">\n        <div class=\"adf-card-view__key-value-pairs__row\">\n            <div class=\"adf-card-view__key-value-pairs__col\">{{ 'CORE.CARDVIEW.KEYVALUEPAIRS.NAME' | translate }}</div>\n            <div class=\"adf-card-view__key-value-pairs__col\">{{ 'CORE.CARDVIEW.KEYVALUEPAIRS.VALUE' | translate }}</div>\n        </div>\n\n        <div class=\"adf-card-view__key-value-pairs__row\"\n             *ngFor=\"let item of values; let i = index\">\n            <div class=\"adf-card-view__key-value-pairs__col\">\n                <mat-form-field>\n                    <input matInput\n                           placeholder=\"{{ 'CORE.CARDVIEW.KEYVALUEPAIRS.NAME' | translate }}\"\n                           (blur)=\"onBlur(item.value)\"\n                           [attr.data-automation-id]=\"'card-'+ property.key +'-name-input-' + i\"\n                           [(ngModel)]=\"values[i].name\">\n                </mat-form-field>\n            </div>\n            <div class=\"adf-card-view__key-value-pairs__col\">\n                <mat-form-field>\n                    <input matInput\n                           placeholder=\"{{ 'CORE.CARDVIEW.KEYVALUEPAIRS.VALUE' | translate }}\"\n                           (blur)=\"onBlur(item.value)\"\n                           [attr.data-automation-id]=\"'card-'+ property.key +'-value-input-' + i\"\n                           [(ngModel)]=\"values[i].value\">\n                    <button matSuffix\n                            mat-icon-button\n                            (click)=\"remove(i)\"\n                            class=\"adf-card-view__key-value-pairs__remove-btn\">\n                        <mat-icon>close</mat-icon>\n                    </button>\n                </mat-form-field>\n            </div>\n        </div>\n    </div>\n    <div *ngIf=\"isEditable()\"\n         class=\"adf-property-value adf-card-view__key-value-pairs__add-btn-container\">\n        <button (click)=\"add()\"\n                mat-button\n                class=\"adf-card-view__key-value-pairs__add-btn\"\n                [attr.data-automation-id]=\"'card-key-value-pairs-button-' + property.key\">\n            {{ 'CORE.CARDVIEW.KEYVALUEPAIRS.ADD' | translate }}\n            <mat-icon>add</mat-icon>\n        </button>\n    </div>\n</div>\n",
                encapsulation: ViewEncapsulation.None,
                styles: [".adf-card-view__key-value-pairs__row{display:flex;justify-content:center}.adf-card-view__key-value-pairs__col{width:50%}.adf-card-view__key-value-pairs__col .mat-form-field{font-size:14px;width:100%}.adf-card-view__key-value-pairs__col .mat-form-field-appearance-legacy .mat-form-field-label{color:var(--adf-card-view-label-color)!important}.adf-card-view__key-value-pairs__add-btn-container{display:flex;justify-content:center}.adf-card-view__key-value-pairs__add-btn.mat-button{margin-bottom:20px}.adf-card-view__key-value-pairs__read-only{padding-bottom:20px}.adf-card-view__key-value-pairs__read-only .mat-table{box-shadow:none}.adf-card-view__key-value-pairs__read-only .mat-header-row,.adf-card-view__key-value-pairs__read-only .mat-row{padding:0}"]
            }]
    }], function () { return [{ type: ɵngcc1.CardViewUpdateService }]; }, { editable: [{
            type: Input
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FyZC12aWV3LWtleXZhbHVlcGFpcnNpdGVtLmNvbXBvbmVudC5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vaG9tZS90cmF2aXMvYnVpbGQvQWxmcmVzY28vYWxmcmVzY28tbmcyLWNvbXBvbmVudHMvbGliL2NvcmUvY2FyZC12aWV3L2NvbXBvbmVudHMvY2FyZC12aWV3LWtleXZhbHVlcGFpcnNpdGVtL2NhcmQtdmlldy1rZXl2YWx1ZXBhaXJzaXRlbS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUVILE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFhLGlCQUFpQixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQy9FLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLHlDQUF5QyxDQUFDO0FBR2hGLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQzdELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBU2pELE1BQU0sT0FBTyxrQ0FBbUMsU0FBUSxZQUE0QztBQUFHLElBUW5HLFlBQVkscUJBQTRDO0FBQzVELFFBQVEsS0FBSyxDQUFDLHFCQUFxQixDQUFDLENBQUM7QUFDckMsUUFQSSxhQUFRLEdBQVksS0FBSyxDQUFDO0FBQzlCLElBTUksQ0FBQztBQUNMLElBQ0ksV0FBVztBQUNmLFFBQVEsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssSUFBSSxFQUFFLENBQUM7QUFDaEQsUUFBUSxJQUFJLENBQUMsY0FBYyxHQUFHLElBQUksa0JBQWtCLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQ2xFLElBQUksQ0FBQztBQUNMLElBQ0ksVUFBVTtBQUFLLFFBQ1gsT0FBTyxJQUFJLENBQUMsUUFBUSxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDO0FBQ3ZELElBQUksQ0FBQztBQUNMLElBQ0ksR0FBRztBQUFLLFFBQ0osSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2xELElBQUksQ0FBQztBQUNMLElBQ0ksTUFBTSxDQUFDLEtBQWE7QUFBSSxRQUNwQixJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDckMsUUFBUSxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ3hCLElBQUksQ0FBQztBQUNMLElBQ0ksTUFBTSxDQUFDLEtBQUs7QUFBSSxRQUNaLElBQUksS0FBSyxDQUFDLE1BQU0sRUFBRTtBQUMxQixZQUFZLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztBQUN4QixTQUFTO0FBQ1QsSUFBSSxDQUFDO0FBQ0wsSUFDSSxJQUFJLENBQUMsTUFBZ0I7QUFBSSxRQUNyQixNQUFNLFdBQVcsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLElBQUksQ0FBQyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUN2RixRQUNRLElBQUksTUFBTSxJQUFJLFdBQVcsQ0FBQyxNQUFNLEVBQUU7QUFDMUMsWUFBWSxJQUFJLENBQUMscUJBQXFCLENBQUMsTUFBTSxDQUFDLGtCQUFzQyxJQUFJLENBQUMsUUFBUSxDQUFFLEVBQUUsV0FBVyxDQUFDLENBQUM7QUFDbEgsWUFBWSxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssR0FBRyxXQUFXLENBQUM7QUFDOUMsU0FBUztBQUNULElBQUksQ0FBQztBQUNMOzhEQW5EQyxTQUFTLFNBQUMsa0JBQ1AsUUFBUSxFQUFFLHdCQUF3QixrQkFDbEM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsraENBQTJELGtCQUUzRCxhQUFhLEVBQUUsaUJBQWlCLENBQUMsSUFBSSxxSEFHckM7QUFBQztBQUE0RCxZQWJ4RCxxQkFBcUI7QUFBRztBQUFHO0FBQzNCLHVCQWNKLEtBQUs7QUFDVDs7Ozs7Z1RBTEE7Ozs7OztvQkFLRTtBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgT25DaGFuZ2VzLCBWaWV3RW5jYXBzdWxhdGlvbiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ2FyZFZpZXdVcGRhdGVTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vc2VydmljZXMvY2FyZC12aWV3LXVwZGF0ZS5zZXJ2aWNlJztcbmltcG9ydCB7IENhcmRWaWV3S2V5VmFsdWVQYWlyc0l0ZW1Nb2RlbCB9IGZyb20gJy4uLy4uL21vZGVscy9jYXJkLXZpZXcubW9kZWxzJztcbmltcG9ydCB7IENhcmRWaWV3S2V5VmFsdWVQYWlyc0l0ZW1UeXBlIH0gZnJvbSAnLi4vLi4vaW50ZXJmYWNlcy9jYXJkLXZpZXcuaW50ZXJmYWNlcyc7XG5pbXBvcnQgeyBNYXRUYWJsZURhdGFTb3VyY2UgfSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbC90YWJsZSc7XG5pbXBvcnQgeyBCYXNlQ2FyZFZpZXcgfSBmcm9tICcuLi9iYXNlLWNhcmQtdmlldyc7XG5cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAnYWRmLWNhcmQtdmlldy1ib29saXRlbScsXG4gICAgdGVtcGxhdGVVcmw6ICcuL2NhcmQtdmlldy1rZXl2YWx1ZXBhaXJzaXRlbS5jb21wb25lbnQuaHRtbCcsXG4gICAgc3R5bGVVcmxzOiBbJy4vY2FyZC12aWV3LWtleXZhbHVlcGFpcnNpdGVtLmNvbXBvbmVudC5zY3NzJ10sXG4gICAgZW5jYXBzdWxhdGlvbjogVmlld0VuY2Fwc3VsYXRpb24uTm9uZVxufSlcblxuZXhwb3J0IGNsYXNzIENhcmRWaWV3S2V5VmFsdWVQYWlyc0l0ZW1Db21wb25lbnQgZXh0ZW5kcyBCYXNlQ2FyZFZpZXc8Q2FyZFZpZXdLZXlWYWx1ZVBhaXJzSXRlbU1vZGVsPiBpbXBsZW1lbnRzIE9uQ2hhbmdlcyB7XG5cbiAgICBASW5wdXQoKVxuICAgIGVkaXRhYmxlOiBib29sZWFuID0gZmFsc2U7XG5cbiAgICB2YWx1ZXM6IENhcmRWaWV3S2V5VmFsdWVQYWlyc0l0ZW1UeXBlW107XG4gICAgbWF0VGFibGVWYWx1ZXM6IE1hdFRhYmxlRGF0YVNvdXJjZTxDYXJkVmlld0tleVZhbHVlUGFpcnNJdGVtVHlwZT47XG5cbiAgICBjb25zdHJ1Y3RvcihjYXJkVmlld1VwZGF0ZVNlcnZpY2U6IENhcmRWaWV3VXBkYXRlU2VydmljZSkge1xuICAgICAgICBzdXBlcihjYXJkVmlld1VwZGF0ZVNlcnZpY2UpO1xuICAgIH1cblxuICAgIG5nT25DaGFuZ2VzKCkge1xuICAgICAgICB0aGlzLnZhbHVlcyA9IHRoaXMucHJvcGVydHkudmFsdWUgfHwgW107XG4gICAgICAgIHRoaXMubWF0VGFibGVWYWx1ZXMgPSBuZXcgTWF0VGFibGVEYXRhU291cmNlKHRoaXMudmFsdWVzKTtcbiAgICB9XG5cbiAgICBpc0VkaXRhYmxlKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5lZGl0YWJsZSAmJiB0aGlzLnByb3BlcnR5LmVkaXRhYmxlO1xuICAgIH1cblxuICAgIGFkZCgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy52YWx1ZXMucHVzaCh7IG5hbWU6ICcnLCB2YWx1ZTogJycgfSk7XG4gICAgfVxuXG4gICAgcmVtb3ZlKGluZGV4OiBudW1iZXIpOiB2b2lkIHtcbiAgICAgICAgdGhpcy52YWx1ZXMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgdGhpcy5zYXZlKHRydWUpO1xuICAgIH1cblxuICAgIG9uQmx1cih2YWx1ZSk6IHZvaWQge1xuICAgICAgICBpZiAodmFsdWUubGVuZ3RoKSB7XG4gICAgICAgICAgICB0aGlzLnNhdmUoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHNhdmUocmVtb3ZlPzogYm9vbGVhbik6IHZvaWQge1xuICAgICAgICBjb25zdCB2YWxpZFZhbHVlcyA9IHRoaXMudmFsdWVzLmZpbHRlcigoaSkgPT4gaS5uYW1lLmxlbmd0aCAmJiBpLnZhbHVlLmxlbmd0aCk7XG5cbiAgICAgICAgaWYgKHJlbW92ZSB8fCB2YWxpZFZhbHVlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHRoaXMuY2FyZFZpZXdVcGRhdGVTZXJ2aWNlLnVwZGF0ZSg8Q2FyZFZpZXdLZXlWYWx1ZVBhaXJzSXRlbU1vZGVsPiB7IC4uLnRoaXMucHJvcGVydHkgfSwgdmFsaWRWYWx1ZXMpO1xuICAgICAgICAgICAgdGhpcy5wcm9wZXJ0eS52YWx1ZSA9IHZhbGlkVmFsdWVzO1xuICAgICAgICB9XG4gICAgfVxufVxuIl19