/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, Input } from '@angular/core';
import { CardViewUpdateService } from '../../services/card-view-update.service';
import { BehaviorSubject, combineLatest, Observable, Subject } from 'rxjs';
import { BaseCardView } from '../base-card-view';
import { AppConfigService } from '../../../app-config/app-config.service';
import { takeUntil, map } from 'rxjs/operators';
export class CardViewSelectItemComponent extends BaseCardView {
    constructor(cardViewUpdateService, appConfig) {
        super(cardViewUpdateService);
        this.appConfig = appConfig;
        this.editable = false;
        this.displayNoneOption = true;
        this.displayEmpty = true;
        this.filter$ = new BehaviorSubject('');
        this.showInputFilter = false;
        this.onDestroy$ = new Subject();
        this.list$ = null;
    }
    ngOnChanges() {
        this.value = this.property.value;
    }
    ngOnInit() {
        this.getOptions()
            .pipe(takeUntil(this.onDestroy$))
            .subscribe((options) => {
            this.showInputFilter = options.length > this.optionsLimit;
        });
        this.list$ = this.getList();
    }
    onFilterInputChange(value) {
        this.filter$.next(value.toString());
    }
    isEditable() {
        return this.editable && this.property.editable;
    }
    getOptions() {
        return this.options$ || this.property.options$;
    }
    getList() {
        return combineLatest([this.getOptions(), this.filter$])
            .pipe(map(([items, filter]) => items.filter((item) => filter ? item.label.toLowerCase().includes(filter.toLowerCase())
            : true)), takeUntil(this.onDestroy$));
    }
    onChange(event) {
        const selectedOption = event.value !== undefined ? event.value : null;
        this.cardViewUpdateService.update(Object.assign({}, this.property), selectedOption);
        this.property.value = selectedOption;
    }
    showNoneOption() {
        return this.displayNoneOption;
    }
    get showProperty() {
        return this.displayEmpty || !this.property.isEmpty();
    }
    ngOnDestroy() {
        this.onDestroy$.next();
        this.onDestroy$.complete();
    }
    get optionsLimit() {
        return this.appConfig.get('content-metadata.selectFilterLimit', CardViewSelectItemComponent.HIDE_FILTER_LIMIT);
    }
}
CardViewSelectItemComponent.HIDE_FILTER_LIMIT = 5;
CardViewSelectItemComponent.decorators = [
    { type: Component, args: [{
                selector: 'adf-card-view-selectitem',
                template: "<ng-container *ngIf=\"!property.isEmpty() || isEditable()\">\n    <div [attr.data-automation-id]=\"'card-select-label-' + property.key\"\n        class=\"adf-property-label\">{{ property.label | translate }}</div>\n    <div class=\"adf-property-field\">\n        <div *ngIf=\"!isEditable()\"\n            class=\"adf-select-item-padding adf-property-value\"\n            [attr.data-automation-id]=\"'select-readonly-value-' + property.key\"\n            data-automation-class=\"read-only-value\">{{ (property.displayValue | async) | translate }}</div>\n        <div *ngIf=\"isEditable()\">\n            <mat-form-field class=\"adf-select-item-padding-editable adf-property-value\">\n                <mat-select [(value)]=\"value\"\n                            panelClass=\"adf-select-filter\"\n                            (selectionChange)=\"onChange($event)\"\n                            data-automation-class=\"select-box\">\n\n                    <adf-select-filter-input *ngIf=\"showInputFilter\" (change)=\"onFilterInputChange($event)\"></adf-select-filter-input>\n\n                    <mat-option *ngIf=\"showNoneOption()\">{{ 'CORE.CARDVIEW.NONE' | translate }}</mat-option>\n                    <mat-option *ngFor=\"let option of list$ | async\"\n                                [value]=\"option.key\">\n                        {{ option.label | translate }}\n                    </mat-option>\n                </mat-select>\n            </mat-form-field>\n        </div>\n    </div>\n</ng-container>\n",
                styles: [".mat-form-field-type-mat-select{width:100%}.adf-select-item-padding{padding-bottom:20px;padding-top:6px}.adf-select-item-padding-editable{padding-bottom:6px;padding-top:6px}"]
            },] }
];
CardViewSelectItemComponent.ctorParameters = () => [
    { type: CardViewUpdateService },
    { type: AppConfigService }
];
CardViewSelectItemComponent.propDecorators = {
    editable: [{ type: Input }],
    options$: [{ type: Input }],
    displayNoneOption: [{ type: Input }],
    displayEmpty: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,