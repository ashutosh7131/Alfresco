/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import validatorsMap from '../validators/validators.map';
export class CardViewBaseItemModel {
    constructor(cardViewItemProperties) {
        var _a, _b;
        this.label = cardViewItemProperties.label || '';
        this.value = cardViewItemProperties.value && cardViewItemProperties.value.displayName || cardViewItemProperties.value;
        this.key = cardViewItemProperties.key;
        this.default = cardViewItemProperties.default;
        this.editable = !!cardViewItemProperties.editable;
        this.clickable = !!cardViewItemProperties.clickable;
        this.icon = cardViewItemProperties.icon || '';
        this.hint = cardViewItemProperties.hint || '';
        this.validators = cardViewItemProperties.validators || [];
        this.data = cardViewItemProperties.data || null;
        this.multivalued = !!cardViewItemProperties.multivalued;
        if ((_b = (_a = cardViewItemProperties === null || cardViewItemProperties === void 0 ? void 0 : cardViewItemProperties.constraints) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0) {
            for (const constraint of cardViewItemProperties.constraints) {
                if (constraint.type !== 'LIST') {
                    this.validators.push(validatorsMap[constraint.type.toLowerCase()](constraint.parameters));
                }
            }
        }
    }
    isEmpty() {
        return this.value === undefined || this.value === null || this.value.length === 0;
    }
    isValid(newValue) {
        if (!this.validators.length) {
            return true;
        }
        return this.validators
            .map((validator) => validator.isValid(newValue))
            .reduce((isValidUntilNow, isValid) => isValidUntilNow && isValid, true);
    }
    getValidationErrors(value) {
        if (!this.validators.length) {
            return [];
        }
        return this.validators.filter((validator) => !validator.isValid(value)).map((validator) => validator);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FyZC12aWV3LWJhc2VpdGVtLm1vZGVsLmpzIiwic291cmNlUm9vdCI6Ii9ob21lL3RyYXZpcy9idWlsZC9BbGZyZXNjby9hbGZyZXNjby1uZzItY29tcG9uZW50cy9saWIvY29yZS8iLCJzb3VyY2VzIjpbImNhcmQtdmlldy9tb2RlbHMvY2FyZC12aWV3LWJhc2VpdGVtLm1vZGVsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7R0FlRztBQUdILE9BQU8sYUFBYSxNQUFNLDhCQUE4QixDQUFDO0FBRXpELE1BQU0sT0FBZ0IscUJBQXFCO0lBY3ZDLFlBQVksc0JBQThDOztRQUN0RCxJQUFJLENBQUMsS0FBSyxHQUFHLHNCQUFzQixDQUFDLEtBQUssSUFBSSxFQUFFLENBQUM7UUFDaEQsSUFBSSxDQUFDLEtBQUssR0FBRyxzQkFBc0IsQ0FBQyxLQUFLLElBQUksc0JBQXNCLENBQUMsS0FBSyxDQUFDLFdBQVcsSUFBSSxzQkFBc0IsQ0FBQyxLQUFLLENBQUM7UUFDdEgsSUFBSSxDQUFDLEdBQUcsR0FBRyxzQkFBc0IsQ0FBQyxHQUFHLENBQUM7UUFDdEMsSUFBSSxDQUFDLE9BQU8sR0FBRyxzQkFBc0IsQ0FBQyxPQUFPLENBQUM7UUFDOUMsSUFBSSxDQUFDLFFBQVEsR0FBRyxDQUFDLENBQUMsc0JBQXNCLENBQUMsUUFBUSxDQUFDO1FBQ2xELElBQUksQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDLHNCQUFzQixDQUFDLFNBQVMsQ0FBQztRQUNwRCxJQUFJLENBQUMsSUFBSSxHQUFHLHNCQUFzQixDQUFDLElBQUksSUFBSSxFQUFFLENBQUM7UUFDOUMsSUFBSSxDQUFDLElBQUksR0FBRyxzQkFBc0IsQ0FBQyxJQUFJLElBQUksRUFBRSxDQUFDO1FBQzlDLElBQUksQ0FBQyxVQUFVLEdBQUcsc0JBQXNCLENBQUMsVUFBVSxJQUFJLEVBQUUsQ0FBQztRQUMxRCxJQUFJLENBQUMsSUFBSSxHQUFHLHNCQUFzQixDQUFDLElBQUksSUFBSSxJQUFJLENBQUM7UUFDaEQsSUFBSSxDQUFDLFdBQVcsR0FBRyxDQUFDLENBQUMsc0JBQXNCLENBQUMsV0FBVyxDQUFDO1FBRXhELGdCQUFJLHNCQUFzQixhQUF0QixzQkFBc0IsdUJBQXRCLHNCQUFzQixDQUFFLFdBQVcsMENBQUUsTUFBTSxtQ0FBSSxDQUFDLEVBQUU7WUFDbEQsS0FBSyxNQUFNLFVBQVUsSUFBSSxzQkFBc0IsQ0FBQyxXQUFXLEVBQUU7Z0JBQ3pELElBQUksVUFBVSxDQUFDLElBQUksS0FBSyxNQUFNLEVBQUU7b0JBQzVCLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUMsVUFBVSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7aUJBQzdGO2FBQ0o7U0FDSjtJQUNMLENBQUM7SUFFRCxPQUFPO1FBQ0gsT0FBTyxJQUFJLENBQUMsS0FBSyxLQUFLLFNBQVMsSUFBSSxJQUFJLENBQUMsS0FBSyxLQUFLLElBQUksSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sS0FBSyxDQUFDLENBQUM7SUFDdEYsQ0FBQztJQUVELE9BQU8sQ0FBQyxRQUFhO1FBQ2pCLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sRUFBRTtZQUN6QixPQUFPLElBQUksQ0FBQztTQUNmO1FBRUQsT0FBTyxJQUFJLENBQUMsVUFBVTthQUNqQixHQUFHLENBQUMsQ0FBQyxTQUFTLEVBQUUsRUFBRSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7YUFDL0MsTUFBTSxDQUFDLENBQUMsZUFBZSxFQUFFLE9BQU8sRUFBRSxFQUFFLENBQUMsZUFBZSxJQUFJLE9BQU8sRUFBRSxJQUFJLENBQUMsQ0FBQztJQUNoRixDQUFDO0lBRUQsbUJBQW1CLENBQUMsS0FBSztRQUNyQixJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLEVBQUU7WUFDekIsT0FBTyxFQUFFLENBQUM7U0FDYjtRQUVELE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxTQUFTLEVBQUUsRUFBRSxDQUFDLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLFNBQVMsRUFBRSxFQUFFLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDMUcsQ0FBQztDQUNKIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgQ2FyZFZpZXdJdGVtUHJvcGVydGllcywgQ2FyZFZpZXdJdGVtVmFsaWRhdG9yIH0gZnJvbSAnLi4vaW50ZXJmYWNlcy9jYXJkLXZpZXcuaW50ZXJmYWNlcyc7XG5pbXBvcnQgdmFsaWRhdG9yc01hcCBmcm9tICcuLi92YWxpZGF0b3JzL3ZhbGlkYXRvcnMubWFwJztcblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIENhcmRWaWV3QmFzZUl0ZW1Nb2RlbCB7XG4gICAgbGFiZWw6IHN0cmluZztcbiAgICB2YWx1ZTogYW55O1xuICAgIGtleTogYW55O1xuICAgIGRlZmF1bHQ6IGFueTtcbiAgICBlZGl0YWJsZTogYm9vbGVhbjtcbiAgICBjbGlja2FibGU6IGJvb2xlYW47XG4gICAgaWNvbj86IHN0cmluZztcbiAgICBoaW50Pzogc3RyaW5nO1xuICAgIHZhbGlkYXRvcnM/OiBDYXJkVmlld0l0ZW1WYWxpZGF0b3JbXTtcbiAgICBkYXRhPzogYW55O1xuICAgIHR5cGU/OiBzdHJpbmc7XG4gICAgbXVsdGl2YWx1ZWQ/OiBib29sZWFuO1xuXG4gICAgY29uc3RydWN0b3IoY2FyZFZpZXdJdGVtUHJvcGVydGllczogQ2FyZFZpZXdJdGVtUHJvcGVydGllcykge1xuICAgICAgICB0aGlzLmxhYmVsID0gY2FyZFZpZXdJdGVtUHJvcGVydGllcy5sYWJlbCB8fCAnJztcbiAgICAgICAgdGhpcy52YWx1ZSA9IGNhcmRWaWV3SXRlbVByb3BlcnRpZXMudmFsdWUgJiYgY2FyZFZpZXdJdGVtUHJvcGVydGllcy52YWx1ZS5kaXNwbGF5TmFtZSB8fCBjYXJkVmlld0l0ZW1Qcm9wZXJ0aWVzLnZhbHVlO1xuICAgICAgICB0aGlzLmtleSA9IGNhcmRWaWV3SXRlbVByb3BlcnRpZXMua2V5O1xuICAgICAgICB0aGlzLmRlZmF1bHQgPSBjYXJkVmlld0l0ZW1Qcm9wZXJ0aWVzLmRlZmF1bHQ7XG4gICAgICAgIHRoaXMuZWRpdGFibGUgPSAhIWNhcmRWaWV3SXRlbVByb3BlcnRpZXMuZWRpdGFibGU7XG4gICAgICAgIHRoaXMuY2xpY2thYmxlID0gISFjYXJkVmlld0l0ZW1Qcm9wZXJ0aWVzLmNsaWNrYWJsZTtcbiAgICAgICAgdGhpcy5pY29uID0gY2FyZFZpZXdJdGVtUHJvcGVydGllcy5pY29uIHx8ICcnO1xuICAgICAgICB0aGlzLmhpbnQgPSBjYXJkVmlld0l0ZW1Qcm9wZXJ0aWVzLmhpbnQgfHwgJyc7XG4gICAgICAgIHRoaXMudmFsaWRhdG9ycyA9IGNhcmRWaWV3SXRlbVByb3BlcnRpZXMudmFsaWRhdG9ycyB8fCBbXTtcbiAgICAgICAgdGhpcy5kYXRhID0gY2FyZFZpZXdJdGVtUHJvcGVydGllcy5kYXRhIHx8IG51bGw7XG4gICAgICAgIHRoaXMubXVsdGl2YWx1ZWQgPSAhIWNhcmRWaWV3SXRlbVByb3BlcnRpZXMubXVsdGl2YWx1ZWQ7XG5cbiAgICAgICAgaWYgKGNhcmRWaWV3SXRlbVByb3BlcnRpZXM/LmNvbnN0cmFpbnRzPy5sZW5ndGggPz8gMCkge1xuICAgICAgICAgICAgZm9yIChjb25zdCBjb25zdHJhaW50IG9mIGNhcmRWaWV3SXRlbVByb3BlcnRpZXMuY29uc3RyYWludHMpIHtcbiAgICAgICAgICAgICAgICBpZiAoY29uc3RyYWludC50eXBlICE9PSAnTElTVCcpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy52YWxpZGF0b3JzLnB1c2godmFsaWRhdG9yc01hcFtjb25zdHJhaW50LnR5cGUudG9Mb3dlckNhc2UoKV0oY29uc3RyYWludC5wYXJhbWV0ZXJzKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgaXNFbXB0eSgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmFsdWUgPT09IHVuZGVmaW5lZCB8fCB0aGlzLnZhbHVlID09PSBudWxsIHx8IHRoaXMudmFsdWUubGVuZ3RoID09PSAwO1xuICAgIH1cblxuICAgIGlzVmFsaWQobmV3VmFsdWU6IGFueSk6IGJvb2xlYW4ge1xuICAgICAgICBpZiAoIXRoaXMudmFsaWRhdG9ycy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMudmFsaWRhdG9yc1xuICAgICAgICAgICAgLm1hcCgodmFsaWRhdG9yKSA9PiB2YWxpZGF0b3IuaXNWYWxpZChuZXdWYWx1ZSkpXG4gICAgICAgICAgICAucmVkdWNlKChpc1ZhbGlkVW50aWxOb3csIGlzVmFsaWQpID0+IGlzVmFsaWRVbnRpbE5vdyAmJiBpc1ZhbGlkLCB0cnVlKTtcbiAgICB9XG5cbiAgICBnZXRWYWxpZGF0aW9uRXJyb3JzKHZhbHVlKTogQ2FyZFZpZXdJdGVtVmFsaWRhdG9yW10ge1xuICAgICAgICBpZiAoIXRoaXMudmFsaWRhdG9ycy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLnZhbGlkYXRvcnMuZmlsdGVyKCh2YWxpZGF0b3IpID0+ICF2YWxpZGF0b3IuaXNWYWxpZCh2YWx1ZSkpLm1hcCgodmFsaWRhdG9yKSA9PiB2YWxpZGF0b3IpO1xuICAgIH1cbn1cbiJdfQ==