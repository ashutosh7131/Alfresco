/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { CardViewBaseItemModel } from './card-view-baseitem.model';
import { of } from 'rxjs';
import { switchMap } from 'rxjs/operators';
export class CardViewSelectItemModel extends CardViewBaseItemModel {
    constructor(cardViewSelectItemProperties) {
        super(cardViewSelectItemProperties);
        this.type = 'select';
        this.valueFetch$ = null;
        this.displayNoneOption = cardViewSelectItemProperties.displayNoneOption !== undefined ? cardViewSelectItemProperties.displayNoneOption : true;
        this.options$ = cardViewSelectItemProperties.options$;
        this.valueFetch$ = this.options$.pipe(switchMap((options) => {
            const option = options.find((o) => { var _a; return o.key === ((_a = this.value) === null || _a === void 0 ? void 0 : _a.toString()); });
            return of(option ? option.label : '');
        }));
    }
    get displayValue() {
        return this.valueFetch$;
    }
    setValue(value) {
        this.value = value;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FyZC12aWV3LXNlbGVjdGl0ZW0ubW9kZWwuanMiLCJzb3VyY2VSb290IjoiL2hvbWUvdHJhdmlzL2J1aWxkL0FsZnJlc2NvL2FsZnJlc2NvLW5nMi1jb21wb25lbnRzL2xpYi9jb3JlLyIsInNvdXJjZXMiOlsiY2FyZC12aWV3L21vZGVscy9jYXJkLXZpZXctc2VsZWN0aXRlbS5tb2RlbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7O0dBZUc7QUFJSCxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUVuRSxPQUFPLEVBQWMsRUFBRSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ3RDLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUUzQyxNQUFNLE9BQU8sdUJBQTJCLFNBQVEscUJBQXFCO0lBT2pFLFlBQVksNEJBQTZEO1FBQ3JFLEtBQUssQ0FBQyw0QkFBNEIsQ0FBQyxDQUFDO1FBUHhDLFNBQUksR0FBVyxRQUFRLENBQUM7UUFJeEIsZ0JBQVcsR0FBdUIsSUFBSSxDQUFDO1FBS25DLElBQUksQ0FBQyxpQkFBaUIsR0FBRyw0QkFBNEIsQ0FBQyxpQkFBaUIsS0FBSyxTQUFTLENBQUMsQ0FBQyxDQUFDLDRCQUE0QixDQUFDLGlCQUFpQixDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7UUFFOUksSUFBSSxDQUFDLFFBQVEsR0FBRyw0QkFBNEIsQ0FBQyxRQUFRLENBQUM7UUFFdEQsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FDakMsU0FBUyxDQUFDLENBQUMsT0FBTyxFQUFFLEVBQUU7WUFDbEIsTUFBTSxNQUFNLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLFdBQUMsT0FBQSxDQUFDLENBQUMsR0FBRyxZQUFLLElBQUksQ0FBQyxLQUFLLDBDQUFFLFFBQVEsR0FBRSxDQUFBLEVBQUEsQ0FBQyxDQUFDO1lBQ3JFLE9BQU8sRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDOUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNSLENBQUM7SUFFRCxJQUFJLFlBQVk7UUFDWixPQUFPLElBQUksQ0FBQyxXQUFXLENBQUM7SUFDNUIsQ0FBQztJQUVELFFBQVEsQ0FBQyxLQUFVO1FBQ2YsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7SUFDdkIsQ0FBQztDQUNKIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgQ2FyZFZpZXdJdGVtIH0gZnJvbSAnLi4vaW50ZXJmYWNlcy9jYXJkLXZpZXctaXRlbS5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgRHluYW1pY0NvbXBvbmVudE1vZGVsIH0gZnJvbSAnLi4vLi4vc2VydmljZXMvZHluYW1pYy1jb21wb25lbnQtbWFwcGVyLnNlcnZpY2UnO1xuaW1wb3J0IHsgQ2FyZFZpZXdCYXNlSXRlbU1vZGVsIH0gZnJvbSAnLi9jYXJkLXZpZXctYmFzZWl0ZW0ubW9kZWwnO1xuaW1wb3J0IHsgQ2FyZFZpZXdTZWxlY3RJdGVtUHJvcGVydGllcywgQ2FyZFZpZXdTZWxlY3RJdGVtT3B0aW9uIH0gZnJvbSAnLi4vaW50ZXJmYWNlcy9jYXJkLXZpZXcuaW50ZXJmYWNlcyc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBvZiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgc3dpdGNoTWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5leHBvcnQgY2xhc3MgQ2FyZFZpZXdTZWxlY3RJdGVtTW9kZWw8VD4gZXh0ZW5kcyBDYXJkVmlld0Jhc2VJdGVtTW9kZWwgaW1wbGVtZW50cyBDYXJkVmlld0l0ZW0sIER5bmFtaWNDb21wb25lbnRNb2RlbCB7XG4gICAgdHlwZTogc3RyaW5nID0gJ3NlbGVjdCc7XG4gICAgb3B0aW9ucyQ6IE9ic2VydmFibGU8Q2FyZFZpZXdTZWxlY3RJdGVtT3B0aW9uPFQ+W10+O1xuICAgIGRpc3BsYXlOb25lT3B0aW9uOiBib29sZWFuO1xuXG4gICAgdmFsdWVGZXRjaCQ6IE9ic2VydmFibGU8c3RyaW5nPiA9IG51bGw7XG5cbiAgICBjb25zdHJ1Y3RvcihjYXJkVmlld1NlbGVjdEl0ZW1Qcm9wZXJ0aWVzOiBDYXJkVmlld1NlbGVjdEl0ZW1Qcm9wZXJ0aWVzPFQ+KSB7XG4gICAgICAgIHN1cGVyKGNhcmRWaWV3U2VsZWN0SXRlbVByb3BlcnRpZXMpO1xuXG4gICAgICAgIHRoaXMuZGlzcGxheU5vbmVPcHRpb24gPSBjYXJkVmlld1NlbGVjdEl0ZW1Qcm9wZXJ0aWVzLmRpc3BsYXlOb25lT3B0aW9uICE9PSB1bmRlZmluZWQgPyBjYXJkVmlld1NlbGVjdEl0ZW1Qcm9wZXJ0aWVzLmRpc3BsYXlOb25lT3B0aW9uIDogdHJ1ZTtcblxuICAgICAgICB0aGlzLm9wdGlvbnMkID0gY2FyZFZpZXdTZWxlY3RJdGVtUHJvcGVydGllcy5vcHRpb25zJDtcblxuICAgICAgICB0aGlzLnZhbHVlRmV0Y2gkID0gdGhpcy5vcHRpb25zJC5waXBlKFxuICAgICAgICAgICAgc3dpdGNoTWFwKChvcHRpb25zKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3Qgb3B0aW9uID0gb3B0aW9ucy5maW5kKChvKSA9PiBvLmtleSA9PT0gdGhpcy52YWx1ZT8udG9TdHJpbmcoKSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG9mKG9wdGlvbiA/IG9wdGlvbi5sYWJlbCA6ICcnKTtcbiAgICAgICAgfSkpO1xuICAgIH1cblxuICAgIGdldCBkaXNwbGF5VmFsdWUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZhbHVlRmV0Y2gkO1xuICAgIH1cblxuICAgIHNldFZhbHVlKHZhbHVlOiBhbnkpIHtcbiAgICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgIH1cbn1cbiJdfQ==