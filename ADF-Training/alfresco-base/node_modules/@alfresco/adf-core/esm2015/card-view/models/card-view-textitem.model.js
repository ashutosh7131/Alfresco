/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { CardViewBaseItemModel } from './card-view-baseitem.model';
export class CardViewTextItemModel extends CardViewBaseItemModel {
    constructor(cardViewTextItemProperties) {
        super(cardViewTextItemProperties);
        this.type = 'text';
        this.inputType = 'text';
        this.multiline = !!cardViewTextItemProperties.multiline;
        this.pipes = cardViewTextItemProperties.pipes || [];
        this.clickCallBack = cardViewTextItemProperties.clickCallBack ? cardViewTextItemProperties.clickCallBack : null;
        if (this.default && this.isEmpty()) {
            this.value = this.default;
        }
    }
    get displayValue() {
        return this.applyPipes(this.value);
    }
    applyPipes(displayValue) {
        if (this.pipes.length) {
            displayValue = this.pipes.reduce((accumulator, { pipe, params = [] }) => {
                return pipe.transform(accumulator, ...params);
            }, displayValue);
        }
        return displayValue;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FyZC12aWV3LXRleHRpdGVtLm1vZGVsLmpzIiwic291cmNlUm9vdCI6Ii9ob21lL3RyYXZpcy9idWlsZC9BbGZyZXNjby9hbGZyZXNjby1uZzItY29tcG9uZW50cy9saWIvY29yZS8iLCJzb3VyY2VzIjpbImNhcmQtdmlldy9tb2RlbHMvY2FyZC12aWV3LXRleHRpdGVtLm1vZGVsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7R0FlRztBQUlILE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBR25FLE1BQU0sT0FBTyxxQkFBc0IsU0FBUSxxQkFBcUI7SUFPNUQsWUFBWSwwQkFBc0Q7UUFDOUQsS0FBSyxDQUFDLDBCQUEwQixDQUFDLENBQUM7UUFQdEMsU0FBSSxHQUFXLE1BQU0sQ0FBQztRQUN0QixjQUFTLEdBQVcsTUFBTSxDQUFDO1FBT3ZCLElBQUksQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDLDBCQUEwQixDQUFDLFNBQVMsQ0FBQztRQUN4RCxJQUFJLENBQUMsS0FBSyxHQUFHLDBCQUEwQixDQUFDLEtBQUssSUFBSSxFQUFFLENBQUM7UUFDcEQsSUFBSSxDQUFDLGFBQWEsR0FBRywwQkFBMEIsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLDBCQUEwQixDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO1FBRWhILElBQUksSUFBSSxDQUFDLE9BQU8sSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFLEVBQUU7WUFDaEMsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDO1NBQzdCO0lBQ0wsQ0FBQztJQUVELElBQUksWUFBWTtRQUNaLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDdkMsQ0FBQztJQUVELFVBQVUsQ0FBQyxZQUFZO1FBQ25CLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUU7WUFDbkIsWUFBWSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsV0FBVyxFQUFFLEVBQUUsSUFBSSxFQUFFLE1BQU0sR0FBRyxFQUFFLEVBQUUsRUFBRSxFQUFFO2dCQUNwRSxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsV0FBVyxFQUFFLEdBQUcsTUFBTSxDQUFDLENBQUM7WUFDbEQsQ0FBQyxFQUFFLFlBQVksQ0FBQyxDQUFDO1NBQ3BCO1FBRUQsT0FBTyxZQUFZLENBQUM7SUFDeEIsQ0FBQztDQUNKIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgQ2FyZFZpZXdJdGVtIH0gZnJvbSAnLi4vaW50ZXJmYWNlcy9jYXJkLXZpZXctaXRlbS5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgRHluYW1pY0NvbXBvbmVudE1vZGVsIH0gZnJvbSAnLi4vLi4vc2VydmljZXMvZHluYW1pYy1jb21wb25lbnQtbWFwcGVyLnNlcnZpY2UnO1xuaW1wb3J0IHsgQ2FyZFZpZXdCYXNlSXRlbU1vZGVsIH0gZnJvbSAnLi9jYXJkLXZpZXctYmFzZWl0ZW0ubW9kZWwnO1xuaW1wb3J0IHsgQ2FyZFZpZXdUZXh0SXRlbVBpcGVQcm9wZXJ0eSwgQ2FyZFZpZXdUZXh0SXRlbVByb3BlcnRpZXMgfSBmcm9tICcuLi9pbnRlcmZhY2VzL2NhcmQtdmlldy5pbnRlcmZhY2VzJztcblxuZXhwb3J0IGNsYXNzIENhcmRWaWV3VGV4dEl0ZW1Nb2RlbCBleHRlbmRzIENhcmRWaWV3QmFzZUl0ZW1Nb2RlbCBpbXBsZW1lbnRzIENhcmRWaWV3SXRlbSwgRHluYW1pY0NvbXBvbmVudE1vZGVsIHtcbiAgICB0eXBlOiBzdHJpbmcgPSAndGV4dCc7XG4gICAgaW5wdXRUeXBlOiBzdHJpbmcgPSAndGV4dCc7XG4gICAgbXVsdGlsaW5lPzogYm9vbGVhbjtcbiAgICBwaXBlcz86IENhcmRWaWV3VGV4dEl0ZW1QaXBlUHJvcGVydHlbXTtcbiAgICBjbGlja0NhbGxCYWNrPzogYW55O1xuXG4gICAgY29uc3RydWN0b3IoY2FyZFZpZXdUZXh0SXRlbVByb3BlcnRpZXM6IENhcmRWaWV3VGV4dEl0ZW1Qcm9wZXJ0aWVzKSB7XG4gICAgICAgIHN1cGVyKGNhcmRWaWV3VGV4dEl0ZW1Qcm9wZXJ0aWVzKTtcbiAgICAgICAgdGhpcy5tdWx0aWxpbmUgPSAhIWNhcmRWaWV3VGV4dEl0ZW1Qcm9wZXJ0aWVzLm11bHRpbGluZTtcbiAgICAgICAgdGhpcy5waXBlcyA9IGNhcmRWaWV3VGV4dEl0ZW1Qcm9wZXJ0aWVzLnBpcGVzIHx8IFtdO1xuICAgICAgICB0aGlzLmNsaWNrQ2FsbEJhY2sgPSBjYXJkVmlld1RleHRJdGVtUHJvcGVydGllcy5jbGlja0NhbGxCYWNrID8gY2FyZFZpZXdUZXh0SXRlbVByb3BlcnRpZXMuY2xpY2tDYWxsQmFjayA6IG51bGw7XG5cbiAgICAgICAgaWYgKHRoaXMuZGVmYXVsdCAmJiB0aGlzLmlzRW1wdHkoKSkge1xuICAgICAgICAgICAgdGhpcy52YWx1ZSA9IHRoaXMuZGVmYXVsdDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGdldCBkaXNwbGF5VmFsdWUoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYXBwbHlQaXBlcyh0aGlzLnZhbHVlKTtcbiAgICB9XG5cbiAgICBhcHBseVBpcGVzKGRpc3BsYXlWYWx1ZSkge1xuICAgICAgICBpZiAodGhpcy5waXBlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGRpc3BsYXlWYWx1ZSA9IHRoaXMucGlwZXMucmVkdWNlKChhY2N1bXVsYXRvciwgeyBwaXBlLCBwYXJhbXMgPSBbXSB9KSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHBpcGUudHJhbnNmb3JtKGFjY3VtdWxhdG9yLCAuLi5wYXJhbXMpO1xuICAgICAgICAgICAgfSwgZGlzcGxheVZhbHVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBkaXNwbGF5VmFsdWU7XG4gICAgfVxufVxuIl19