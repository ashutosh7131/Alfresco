import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';
import * as i0 from "@angular/core";
export function transformKeyToObject(key, value) {
    const objectLevels = key.split('.').reverse();
    return objectLevels.reduce((previousValue, currentValue) => {
        return { [currentValue]: previousValue };
    }, value);
}
export class CardViewUpdateService {
    constructor() {
        this.itemUpdated$ = new Subject();
        this.itemClicked$ = new Subject();
        this.updateItem$ = new Subject();
        this.updatedAspect$ = new Subject();
    }
    update(property, newValue) {
        this.itemUpdated$.next({
            target: property,
            changed: transformKeyToObject(property.key, newValue)
        });
    }
    clicked(property) {
        this.itemClicked$.next({
            target: property
        });
    }
    updateElement(notification) {
        this.updateItem$.next(notification);
    }
    updateNodeAspect(node) {
        this.updatedAspect$.next(node);
    }
}
CardViewUpdateService.ɵprov = i0.ɵɵdefineInjectable({ factory: function CardViewUpdateService_Factory() { return new CardViewUpdateService(); }, token: CardViewUpdateService, providedIn: "root" });
CardViewUpdateService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FyZC12aWV3LXVwZGF0ZS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Ii9ob21lL3RyYXZpcy9idWlsZC9BbGZyZXNjby9hbGZyZXNjby1uZzItY29tcG9uZW50cy9saWIvY29yZS8iLCJzb3VyY2VzIjpbImNhcmQtdmlldy9zZXJ2aWNlcy9jYXJkLXZpZXctdXBkYXRlLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBa0JBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLE1BQU0sQ0FBQzs7QUFZL0IsTUFBTSxVQUFVLG9CQUFvQixDQUFDLEdBQVcsRUFBRSxLQUFLO0lBQ25ELE1BQU0sWUFBWSxHQUFhLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUM7SUFFeEQsT0FBTyxZQUFZLENBQUMsTUFBTSxDQUFLLENBQUMsYUFBYSxFQUFFLFlBQVksRUFBRSxFQUFFO1FBQzNELE9BQU8sRUFBRSxDQUFDLFlBQVksQ0FBQyxFQUFFLGFBQWEsRUFBQyxDQUFDO0lBQzVDLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQztBQUNkLENBQUM7QUFLRCxNQUFNLE9BQU8scUJBQXFCO0lBSGxDO1FBS0ksaUJBQVksR0FBRyxJQUFJLE9BQU8sRUFBc0IsQ0FBQztRQUNqRCxpQkFBWSxHQUFHLElBQUksT0FBTyxFQUFxQixDQUFDO1FBQ2hELGdCQUFXLEdBQUcsSUFBSSxPQUFPLEVBQXlCLENBQUM7UUFDbkQsbUJBQWMsR0FBRyxJQUFJLE9BQU8sRUFBZSxDQUFDO0tBMkIvQztJQXpCRyxNQUFNLENBQUMsUUFBK0IsRUFBRSxRQUFhO1FBQ2pELElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDO1lBQ25CLE1BQU0sRUFBRSxRQUFRO1lBQ2hCLE9BQU8sRUFBRSxvQkFBb0IsQ0FBQyxRQUFRLENBQUMsR0FBRyxFQUFFLFFBQVEsQ0FBQztTQUN4RCxDQUFDLENBQUM7SUFDUCxDQUFDO0lBRUQsT0FBTyxDQUFDLFFBQStCO1FBQ25DLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDO1lBQ25CLE1BQU0sRUFBRSxRQUFRO1NBQ25CLENBQUMsQ0FBQztJQUNQLENBQUM7SUFNRCxhQUFhLENBQUMsWUFBbUM7UUFDN0MsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDeEMsQ0FBQztJQUVELGdCQUFnQixDQUFDLElBQWlCO1FBQzlCLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ25DLENBQUM7Ozs7WUFqQ0osVUFBVSxTQUFDO2dCQUNSLFVBQVUsRUFBRSxNQUFNO2FBQ3JCIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgTWluaW1hbE5vZGUgfSBmcm9tICdAYWxmcmVzY28vanMtYXBpJztcbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IENhcmRWaWV3QmFzZUl0ZW1Nb2RlbCB9IGZyb20gJy4uL21vZGVscy9jYXJkLXZpZXctYmFzZWl0ZW0ubW9kZWwnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFVwZGF0ZU5vdGlmaWNhdGlvbiB7XG4gICAgdGFyZ2V0OiBDYXJkVmlld0Jhc2VJdGVtTW9kZWw7XG4gICAgY2hhbmdlZDogYW55O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIENsaWNrTm90aWZpY2F0aW9uIHtcbiAgICB0YXJnZXQ6IGFueTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRyYW5zZm9ybUtleVRvT2JqZWN0KGtleTogc3RyaW5nLCB2YWx1ZSk6IE9iamVjdCB7XG4gICAgY29uc3Qgb2JqZWN0TGV2ZWxzOiBzdHJpbmdbXSA9IGtleS5zcGxpdCgnLicpLnJldmVyc2UoKTtcblxuICAgIHJldHVybiBvYmplY3RMZXZlbHMucmVkdWNlPHt9PigocHJldmlvdXNWYWx1ZSwgY3VycmVudFZhbHVlKSA9PiB7XG4gICAgICAgIHJldHVybiB7IFtjdXJyZW50VmFsdWVdOiBwcmV2aW91c1ZhbHVlfTtcbiAgICB9LCB2YWx1ZSk7XG59XG5cbkBJbmplY3RhYmxlKHtcbiAgICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgQ2FyZFZpZXdVcGRhdGVTZXJ2aWNlIHtcblxuICAgIGl0ZW1VcGRhdGVkJCA9IG5ldyBTdWJqZWN0PFVwZGF0ZU5vdGlmaWNhdGlvbj4oKTtcbiAgICBpdGVtQ2xpY2tlZCQgPSBuZXcgU3ViamVjdDxDbGlja05vdGlmaWNhdGlvbj4oKTtcbiAgICB1cGRhdGVJdGVtJCA9IG5ldyBTdWJqZWN0PENhcmRWaWV3QmFzZUl0ZW1Nb2RlbD4oKTtcbiAgICB1cGRhdGVkQXNwZWN0JCA9IG5ldyBTdWJqZWN0PE1pbmltYWxOb2RlPigpO1xuXG4gICAgdXBkYXRlKHByb3BlcnR5OiBDYXJkVmlld0Jhc2VJdGVtTW9kZWwsIG5ld1ZhbHVlOiBhbnkpIHtcbiAgICAgICAgdGhpcy5pdGVtVXBkYXRlZCQubmV4dCh7XG4gICAgICAgICAgICB0YXJnZXQ6IHByb3BlcnR5LFxuICAgICAgICAgICAgY2hhbmdlZDogdHJhbnNmb3JtS2V5VG9PYmplY3QocHJvcGVydHkua2V5LCBuZXdWYWx1ZSlcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgY2xpY2tlZChwcm9wZXJ0eTogQ2FyZFZpZXdCYXNlSXRlbU1vZGVsKSB7XG4gICAgICAgIHRoaXMuaXRlbUNsaWNrZWQkLm5leHQoe1xuICAgICAgICAgICAgdGFyZ2V0OiBwcm9wZXJ0eVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBVcGRhdGVzIHRoZSBjYXJkdmlldyBpdGVtcyBwcm9wZXJ0eVxuICAgICAqIEBwYXJhbSBub3RpZmljYXRpb25cbiAgICAgKi9cbiAgICB1cGRhdGVFbGVtZW50KG5vdGlmaWNhdGlvbjogQ2FyZFZpZXdCYXNlSXRlbU1vZGVsKSB7XG4gICAgICAgIHRoaXMudXBkYXRlSXRlbSQubmV4dChub3RpZmljYXRpb24pO1xuICAgIH1cblxuICAgIHVwZGF0ZU5vZGVBc3BlY3Qobm9kZTogTWluaW1hbE5vZGUpIHtcbiAgICAgICAgdGhpcy51cGRhdGVkQXNwZWN0JC5uZXh0KG5vZGUpO1xuICAgIH1cblxufVxuIl19