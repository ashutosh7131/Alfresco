import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';
import * as i0 from "@angular/core";
import * as ɵngcc0 from '@angular/core';
export function transformKeyToObject(key, value) {
    const objectLevels = key.split('.').reverse();
    return objectLevels.reduce((previousValue, currentValue) => {
        return { [currentValue]: previousValue };
    }, value);
}
export class CardViewUpdateService {
    constructor() {
        this.itemUpdated$ = new Subject();
        this.itemClicked$ = new Subject();
        this.updateItem$ = new Subject();
        this.updatedAspect$ = new Subject();
    }
    update(property, newValue) {
        this.itemUpdated$.next({
            target: property,
            changed: transformKeyToObject(property.key, newValue)
        });
    }
    clicked(property) {
        this.itemClicked$.next({
            target: property
        });
    }
    updateElement(notification) {
        this.updateItem$.next(notification);
    }
    updateNodeAspect(node) {
        this.updatedAspect$.next(node);
    }
}
CardViewUpdateService.ɵfac = function CardViewUpdateService_Factory(t) { return new (t || CardViewUpdateService)(); };
CardViewUpdateService.ɵprov = i0.ɵɵdefineInjectable({ factory: function CardViewUpdateService_Factory() { return new CardViewUpdateService(); }, token: CardViewUpdateService, providedIn: "root" });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CardViewUpdateService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return []; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FyZC12aWV3LXVwZGF0ZS5zZXJ2aWNlLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9ob21lL3RyYXZpcy9idWlsZC9BbGZyZXNjby9hbGZyZXNjby1uZzItY29tcG9uZW50cy9saWIvY29yZS9jYXJkLXZpZXcvc2VydmljZXMvY2FyZC12aWV3LXVwZGF0ZS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWtCQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDL0I7O0FBV0EsTUFBTSxVQUFVLG9CQUFvQixDQUFDLEdBQVcsRUFBRSxLQUFLO0FBQUksSUFDdkQsTUFBTSxZQUFZLEdBQWEsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQztBQUM1RCxJQUNJLE9BQU8sWUFBWSxDQUFDLE1BQU0sQ0FBSyxDQUFDLGFBQWEsRUFBRSxZQUFZLEVBQUUsRUFBRTtBQUNuRSxRQUFRLE9BQU8sRUFBRSxDQUFDLFlBQVksQ0FBQyxFQUFFLGFBQWEsRUFBQyxDQUFDO0FBQ2hELElBQUksQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDO0FBQ2QsQ0FBQztBQUtELE1BQU0sT0FBTyxxQkFBcUI7QUFDbEMsSUFKQTtBQUNFLFFBSUUsaUJBQVksR0FBRyxJQUFJLE9BQU8sRUFBc0IsQ0FBQztBQUNyRCxRQUFJLGlCQUFZLEdBQUcsSUFBSSxPQUFPLEVBQXFCLENBQUM7QUFDcEQsUUFBSSxnQkFBVyxHQUFHLElBQUksT0FBTyxFQUF5QixDQUFDO0FBQ3ZELFFBQUksbUJBQWMsR0FBRyxJQUFJLE9BQU8sRUFBZSxDQUFDO0FBQ2hELEtBMEJDO0FBQ0QsSUExQkksTUFBTSxDQUFDLFFBQStCLEVBQUUsUUFBYTtBQUN6RCxRQUFRLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDO0FBQy9CLFlBQVksTUFBTSxFQUFFLFFBQVE7QUFDNUIsWUFBWSxPQUFPLEVBQUUsb0JBQW9CLENBQUMsUUFBUSxDQUFDLEdBQUcsRUFBRSxRQUFRLENBQUM7QUFDakUsU0FBUyxDQUFDLENBQUM7QUFDWCxJQUFJLENBQUM7QUFDTCxJQUNJLE9BQU8sQ0FBQyxRQUErQjtBQUMzQyxRQUFRLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDO0FBQy9CLFlBQVksTUFBTSxFQUFFLFFBQVE7QUFDNUIsU0FBUyxDQUFDLENBQUM7QUFDWCxJQUFJLENBQUM7QUFDTCxJQUtJLGFBQWEsQ0FBQyxZQUFtQztBQUNyRCxRQUFRLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO0FBQzVDLElBQUksQ0FBQztBQUNMLElBQ0ksZ0JBQWdCLENBQUMsSUFBaUI7QUFDdEMsUUFBUSxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUN2QyxJQUFJLENBQUM7QUFDTDtzSEFDQTtBQUFDO2lEQW5DQSxVQUFVLFNBQUM7TUFDUixVQUFVLEVBQUUsTUFBTTtZQUNyQjs7O2dEQUNJO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBNaW5pbWFsTm9kZSB9IGZyb20gJ0BhbGZyZXNjby9qcy1hcGknO1xuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgQ2FyZFZpZXdCYXNlSXRlbU1vZGVsIH0gZnJvbSAnLi4vbW9kZWxzL2NhcmQtdmlldy1iYXNlaXRlbS5tb2RlbCc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgVXBkYXRlTm90aWZpY2F0aW9uIHtcbiAgICB0YXJnZXQ6IENhcmRWaWV3QmFzZUl0ZW1Nb2RlbDtcbiAgICBjaGFuZ2VkOiBhbnk7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ2xpY2tOb3RpZmljYXRpb24ge1xuICAgIHRhcmdldDogYW55O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdHJhbnNmb3JtS2V5VG9PYmplY3Qoa2V5OiBzdHJpbmcsIHZhbHVlKTogT2JqZWN0IHtcbiAgICBjb25zdCBvYmplY3RMZXZlbHM6IHN0cmluZ1tdID0ga2V5LnNwbGl0KCcuJykucmV2ZXJzZSgpO1xuXG4gICAgcmV0dXJuIG9iamVjdExldmVscy5yZWR1Y2U8e30+KChwcmV2aW91c1ZhbHVlLCBjdXJyZW50VmFsdWUpID0+IHtcbiAgICAgICAgcmV0dXJuIHsgW2N1cnJlbnRWYWx1ZV06IHByZXZpb3VzVmFsdWV9O1xuICAgIH0sIHZhbHVlKTtcbn1cblxuQEluamVjdGFibGUoe1xuICAgIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBDYXJkVmlld1VwZGF0ZVNlcnZpY2Uge1xuXG4gICAgaXRlbVVwZGF0ZWQkID0gbmV3IFN1YmplY3Q8VXBkYXRlTm90aWZpY2F0aW9uPigpO1xuICAgIGl0ZW1DbGlja2VkJCA9IG5ldyBTdWJqZWN0PENsaWNrTm90aWZpY2F0aW9uPigpO1xuICAgIHVwZGF0ZUl0ZW0kID0gbmV3IFN1YmplY3Q8Q2FyZFZpZXdCYXNlSXRlbU1vZGVsPigpO1xuICAgIHVwZGF0ZWRBc3BlY3QkID0gbmV3IFN1YmplY3Q8TWluaW1hbE5vZGU+KCk7XG5cbiAgICB1cGRhdGUocHJvcGVydHk6IENhcmRWaWV3QmFzZUl0ZW1Nb2RlbCwgbmV3VmFsdWU6IGFueSkge1xuICAgICAgICB0aGlzLml0ZW1VcGRhdGVkJC5uZXh0KHtcbiAgICAgICAgICAgIHRhcmdldDogcHJvcGVydHksXG4gICAgICAgICAgICBjaGFuZ2VkOiB0cmFuc2Zvcm1LZXlUb09iamVjdChwcm9wZXJ0eS5rZXksIG5ld1ZhbHVlKVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBjbGlja2VkKHByb3BlcnR5OiBDYXJkVmlld0Jhc2VJdGVtTW9kZWwpIHtcbiAgICAgICAgdGhpcy5pdGVtQ2xpY2tlZCQubmV4dCh7XG4gICAgICAgICAgICB0YXJnZXQ6IHByb3BlcnR5XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFVwZGF0ZXMgdGhlIGNhcmR2aWV3IGl0ZW1zIHByb3BlcnR5XG4gICAgICogQHBhcmFtIG5vdGlmaWNhdGlvblxuICAgICAqL1xuICAgIHVwZGF0ZUVsZW1lbnQobm90aWZpY2F0aW9uOiBDYXJkVmlld0Jhc2VJdGVtTW9kZWwpIHtcbiAgICAgICAgdGhpcy51cGRhdGVJdGVtJC5uZXh0KG5vdGlmaWNhdGlvbik7XG4gICAgfVxuXG4gICAgdXBkYXRlTm9kZUFzcGVjdChub2RlOiBNaW5pbWFsTm9kZSkge1xuICAgICAgICB0aGlzLnVwZGF0ZWRBc3BlY3QkLm5leHQobm9kZSk7XG4gICAgfVxuXG59XG4iXX0=