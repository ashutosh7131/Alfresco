/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, EventEmitter, Input, Output, ViewEncapsulation } from '@angular/core';
import { EcmUserService } from '../services/ecm-user.service';
import { PeopleProcessService } from '../services/people-process.service';
import { UserPreferencesService, UserPreferenceValues } from '../services/user-preferences.service';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
export class CommentListComponent {
    constructor(peopleProcessService, ecmUserService, userPreferenceService) {
        this.peopleProcessService = peopleProcessService;
        this.ecmUserService = ecmUserService;
        this.userPreferenceService = userPreferenceService;
        this.clickRow = new EventEmitter();
        this.onDestroy$ = new Subject();
    }
    ngOnInit() {
        this.userPreferenceService
            .select(UserPreferenceValues.Locale)
            .pipe(takeUntil(this.onDestroy$))
            .subscribe(locale => this.currentLocale = locale);
    }
    ngOnDestroy() {
        this.onDestroy$.next(true);
        this.onDestroy$.complete();
    }
    selectComment(comment) {
        if (this.selectedComment) {
            this.selectedComment.isSelected = false;
        }
        comment.isSelected = true;
        this.selectedComment = comment;
        this.clickRow.emit(this.selectedComment);
    }
    getUserShortName(user) {
        let shortName = '';
        if (user) {
            if (user.firstName) {
                shortName = user.firstName[0].toUpperCase();
            }
            if (user.lastName) {
                shortName += user.lastName[0].toUpperCase();
            }
        }
        return shortName;
    }
    isPictureDefined(user) {
        return user.pictureId || user.avatarId;
    }
    getUserImage(user) {
        if (this.isAContentUsers(user)) {
            return this.ecmUserService.getUserProfileImage(user.avatarId);
        }
        else {
            return this.peopleProcessService.getUserImage(user);
        }
    }
    isAContentUsers(user) {
        return user.avatarId;
    }
}
CommentListComponent.decorators = [
    { type: Component, args: [{
                selector: 'adf-comment-list',
                template: " <mat-list class=\"adf-comment-list\">\n    <mat-list-item *ngFor=\"let comment of comments\"\n                  (click)=\"selectComment(comment)\"\n                  class=\"adf-comment-list-item\"\n                  [class.adf-is-selected]=\"comment.isSelected\"\n                  id=\"adf-comment-{{comment?.id}}\">\n        <div id=\"comment-user-icon\" class=\"adf-comment-img-container\">\n            <div\n                *ngIf=\"!isPictureDefined(comment.createdBy)\"\n                class=\"adf-comment-user-icon\">\n                {{getUserShortName(comment.createdBy)}}\n            </div>\n            <div>\n                <img [alt]=\"comment.createdBy\" *ngIf=\"isPictureDefined(comment.createdBy)\"\n                      class=\"adf-people-img\"\n                     [src]=\"getUserImage(comment.createdBy)\" />\n            </div>\n        </div>\n        <div class=\"adf-comment-contents\">\n            <div matLine id=\"comment-user\" class=\"adf-comment-user-name\">\n                {{comment.createdBy?.firstName}} {{comment.createdBy?.lastName}}\n            </div>\n            <div matLine id=\"comment-message\" class=\"adf-comment-message\" [innerHTML]=\"comment.message\"></div>\n            <div matLine id=\"comment-time\" class=\"adf-comment-message-time\">\n                {{ comment.created | adfTimeAgo: currentLocale }}\n            </div>\n        </div>\n    </mat-list-item>\n</mat-list>\n",
                encapsulation: ViewEncapsulation.None,
                styles: [".adf-is-selected{background:var(--adf-comment-list-primary-color)}.adf-comment-img-container{align-self:flex-start;display:flex;float:left;height:100%;padding-top:18px;width:40px}.adf-comment-list-item{background-position:50%;display:table-row-group;height:100%!important;overflow:hidden;padding-top:12px;transition:background .8s;white-space:normal}.adf-comment-list-item:hover{background:var(--adf-comment-list-primary-color) radial-gradient(circle,transparent 1%,var(--adf-comment-list-primary-color) 0) 50%/15000%}.adf-comment-list-item:active{background-color:var(--adf-comment-list-ripple-color);background-size:100%;transition:background 0s}.adf-comment-user-icon{background-color:var(--theme-primary-color);background-size:cover;border-radius:50%;color:var(--theme-primary-color-default-contrast);font-size:16px;height:20px;padding:10px 5px;text-align:center;width:30px}.adf-comment-user-name{float:left;font-size:14px;font-weight:600;padding:2px 10px;width:90%}.adf-comment-message{font-size:14px;font-style:italic;letter-spacing:-.2px;line-height:1.43;white-space:normal!important;width:calc(100% - 10px)}.adf-comment-message,.adf-comment-message-time{color:var(--theme-foreground-text-color);float:left;padding:2px 10px}.adf-comment-message-time{font-size:12px!important;width:90%}.adf-comment-contents{padding-bottom:12px;padding-left:5px;padding-top:12px;width:calc(100% - 10px)}.adf-people-img{border-radius:90%;height:40px;vertical-align:middle;width:40px}"]
            },] }
];
CommentListComponent.ctorParameters = () => [
    { type: PeopleProcessService },
    { type: EcmUserService },
    { type: UserPreferencesService }
];
CommentListComponent.propDecorators = {
    comments: [{ type: Input }],
    clickRow: [{ type: Output }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbWVudC1saXN0LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIvaG9tZS90cmF2aXMvYnVpbGQvQWxmcmVzY28vYWxmcmVzY28tbmcyLWNvbXBvbmVudHMvbGliL2NvcmUvIiwic291cmNlcyI6WyJjb21tZW50cy9jb21tZW50LWxpc3QuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7R0FlRztBQUVILE9BQU8sRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsaUJBQWlCLEVBQXFCLE1BQU0sZUFBZSxDQUFDO0FBRTdHLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQUM5RCxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxvQ0FBb0MsQ0FBQztBQUMxRSxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxzQ0FBc0MsQ0FBQztBQUNwRyxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQy9CLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQVMzQyxNQUFNLE9BQU8sb0JBQW9CO0lBYzdCLFlBQW1CLG9CQUEwQyxFQUMxQyxjQUE4QixFQUM5QixxQkFBNkM7UUFGN0MseUJBQW9CLEdBQXBCLG9CQUFvQixDQUFzQjtRQUMxQyxtQkFBYyxHQUFkLGNBQWMsQ0FBZ0I7UUFDOUIsMEJBQXFCLEdBQXJCLHFCQUFxQixDQUF3QjtRQVJoRSxhQUFRLEdBQStCLElBQUksWUFBWSxFQUFnQixDQUFDO1FBSWhFLGVBQVUsR0FBRyxJQUFJLE9BQU8sRUFBVyxDQUFDO0lBSzVDLENBQUM7SUFFRCxRQUFRO1FBQ0osSUFBSSxDQUFDLHFCQUFxQjthQUNyQixNQUFNLENBQUMsb0JBQW9CLENBQUMsTUFBTSxDQUFDO2FBQ25DLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO2FBQ2hDLFNBQVMsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxhQUFhLEdBQUcsTUFBTSxDQUFDLENBQUM7SUFDMUQsQ0FBQztJQUVELFdBQVc7UUFDUCxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUMzQixJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQy9CLENBQUM7SUFFRCxhQUFhLENBQUMsT0FBcUI7UUFDL0IsSUFBSSxJQUFJLENBQUMsZUFBZSxFQUFFO1lBQ3RCLElBQUksQ0FBQyxlQUFlLENBQUMsVUFBVSxHQUFHLEtBQUssQ0FBQztTQUMzQztRQUNELE9BQU8sQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDO1FBQzFCLElBQUksQ0FBQyxlQUFlLEdBQUcsT0FBTyxDQUFDO1FBQy9CLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQztJQUM3QyxDQUFDO0lBRUQsZ0JBQWdCLENBQUMsSUFBUztRQUN0QixJQUFJLFNBQVMsR0FBRyxFQUFFLENBQUM7UUFDbkIsSUFBSSxJQUFJLEVBQUU7WUFDTixJQUFJLElBQUksQ0FBQyxTQUFTLEVBQUU7Z0JBQ2hCLFNBQVMsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDO2FBQy9DO1lBQ0QsSUFBSSxJQUFJLENBQUMsUUFBUSxFQUFFO2dCQUNmLFNBQVMsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDO2FBQy9DO1NBQ0o7UUFDRCxPQUFPLFNBQVMsQ0FBQztJQUNyQixDQUFDO0lBRUQsZ0JBQWdCLENBQUMsSUFBUztRQUN0QixPQUFPLElBQUksQ0FBQyxTQUFTLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQztJQUMzQyxDQUFDO0lBRUQsWUFBWSxDQUFDLElBQVM7UUFDbEIsSUFBSSxJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQzVCLE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7U0FDakU7YUFBTTtZQUNILE9BQU8sSUFBSSxDQUFDLG9CQUFvQixDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUN2RDtJQUNMLENBQUM7SUFFTyxlQUFlLENBQUMsSUFBUztRQUM3QixPQUFPLElBQUksQ0FBQyxRQUFRLENBQUM7SUFDekIsQ0FBQzs7O1lBMUVKLFNBQVMsU0FBQztnQkFDUCxRQUFRLEVBQUUsa0JBQWtCO2dCQUM1Qix5NkNBQTRDO2dCQUU1QyxhQUFhLEVBQUUsaUJBQWlCLENBQUMsSUFBSTs7YUFDeEM7OztZQVZRLG9CQUFvQjtZQURwQixjQUFjO1lBRWQsc0JBQXNCOzs7dUJBYzFCLEtBQUs7dUJBSUwsTUFBTSIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IENvbXBvbmVudCwgRXZlbnRFbWl0dGVyLCBJbnB1dCwgT3V0cHV0LCBWaWV3RW5jYXBzdWxhdGlvbiwgT25Jbml0LCBPbkRlc3Ryb3kgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvbW1lbnRNb2RlbCB9IGZyb20gJy4uL21vZGVscy9jb21tZW50Lm1vZGVsJztcbmltcG9ydCB7IEVjbVVzZXJTZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZXMvZWNtLXVzZXIuc2VydmljZSc7XG5pbXBvcnQgeyBQZW9wbGVQcm9jZXNzU2VydmljZSB9IGZyb20gJy4uL3NlcnZpY2VzL3Blb3BsZS1wcm9jZXNzLnNlcnZpY2UnO1xuaW1wb3J0IHsgVXNlclByZWZlcmVuY2VzU2VydmljZSwgVXNlclByZWZlcmVuY2VWYWx1ZXMgfSBmcm9tICcuLi9zZXJ2aWNlcy91c2VyLXByZWZlcmVuY2VzLnNlcnZpY2UnO1xuaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgdGFrZVVudGlsIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ2FkZi1jb21tZW50LWxpc3QnLFxuICAgIHRlbXBsYXRlVXJsOiAnLi9jb21tZW50LWxpc3QuY29tcG9uZW50Lmh0bWwnLFxuICAgIHN0eWxlVXJsczogWycuL2NvbW1lbnQtbGlzdC5jb21wb25lbnQuc2NzcyddLFxuICAgIGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLk5vbmVcbn0pXG5cbmV4cG9ydCBjbGFzcyBDb21tZW50TGlzdENvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95IHtcblxuICAgIC8qKiBUaGUgY29tbWVudHMgZGF0YSB1c2VkIHRvIHBvcHVsYXRlIHRoZSBsaXN0LiAqL1xuICAgIEBJbnB1dCgpXG4gICAgY29tbWVudHM6IENvbW1lbnRNb2RlbFtdO1xuXG4gICAgLyoqIEVtaXR0ZWQgd2hlbiB0aGUgdXNlciBjbGlja3Mgb24gb25lIG9mIHRoZSBjb21tZW50IHJvd3MuICovXG4gICAgQE91dHB1dCgpXG4gICAgY2xpY2tSb3c6IEV2ZW50RW1pdHRlcjxDb21tZW50TW9kZWw+ID0gbmV3IEV2ZW50RW1pdHRlcjxDb21tZW50TW9kZWw+KCk7XG5cbiAgICBzZWxlY3RlZENvbW1lbnQ6IENvbW1lbnRNb2RlbDtcbiAgICBjdXJyZW50TG9jYWxlO1xuICAgIHByaXZhdGUgb25EZXN0cm95JCA9IG5ldyBTdWJqZWN0PGJvb2xlYW4+KCk7XG5cbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgcGVvcGxlUHJvY2Vzc1NlcnZpY2U6IFBlb3BsZVByb2Nlc3NTZXJ2aWNlLFxuICAgICAgICAgICAgICAgIHB1YmxpYyBlY21Vc2VyU2VydmljZTogRWNtVXNlclNlcnZpY2UsXG4gICAgICAgICAgICAgICAgcHVibGljIHVzZXJQcmVmZXJlbmNlU2VydmljZTogVXNlclByZWZlcmVuY2VzU2VydmljZSkge1xuICAgIH1cblxuICAgIG5nT25Jbml0KCkge1xuICAgICAgICB0aGlzLnVzZXJQcmVmZXJlbmNlU2VydmljZVxuICAgICAgICAgICAgLnNlbGVjdChVc2VyUHJlZmVyZW5jZVZhbHVlcy5Mb2NhbGUpXG4gICAgICAgICAgICAucGlwZSh0YWtlVW50aWwodGhpcy5vbkRlc3Ryb3kkKSlcbiAgICAgICAgICAgIC5zdWJzY3JpYmUobG9jYWxlID0+IHRoaXMuY3VycmVudExvY2FsZSA9IGxvY2FsZSk7XG4gICAgfVxuXG4gICAgbmdPbkRlc3Ryb3koKSB7XG4gICAgICAgIHRoaXMub25EZXN0cm95JC5uZXh0KHRydWUpO1xuICAgICAgICB0aGlzLm9uRGVzdHJveSQuY29tcGxldGUoKTtcbiAgICB9XG5cbiAgICBzZWxlY3RDb21tZW50KGNvbW1lbnQ6IENvbW1lbnRNb2RlbCk6IHZvaWQge1xuICAgICAgICBpZiAodGhpcy5zZWxlY3RlZENvbW1lbnQpIHtcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRDb21tZW50LmlzU2VsZWN0ZWQgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBjb21tZW50LmlzU2VsZWN0ZWQgPSB0cnVlO1xuICAgICAgICB0aGlzLnNlbGVjdGVkQ29tbWVudCA9IGNvbW1lbnQ7XG4gICAgICAgIHRoaXMuY2xpY2tSb3cuZW1pdCh0aGlzLnNlbGVjdGVkQ29tbWVudCk7XG4gICAgfVxuXG4gICAgZ2V0VXNlclNob3J0TmFtZSh1c2VyOiBhbnkpOiBzdHJpbmcge1xuICAgICAgICBsZXQgc2hvcnROYW1lID0gJyc7XG4gICAgICAgIGlmICh1c2VyKSB7XG4gICAgICAgICAgICBpZiAodXNlci5maXJzdE5hbWUpIHtcbiAgICAgICAgICAgICAgICBzaG9ydE5hbWUgPSB1c2VyLmZpcnN0TmFtZVswXS50b1VwcGVyQ2FzZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHVzZXIubGFzdE5hbWUpIHtcbiAgICAgICAgICAgICAgICBzaG9ydE5hbWUgKz0gdXNlci5sYXN0TmFtZVswXS50b1VwcGVyQ2FzZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzaG9ydE5hbWU7XG4gICAgfVxuXG4gICAgaXNQaWN0dXJlRGVmaW5lZCh1c2VyOiBhbnkpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHVzZXIucGljdHVyZUlkIHx8IHVzZXIuYXZhdGFySWQ7XG4gICAgfVxuXG4gICAgZ2V0VXNlckltYWdlKHVzZXI6IGFueSk6IHN0cmluZyB7XG4gICAgICAgIGlmICh0aGlzLmlzQUNvbnRlbnRVc2Vycyh1c2VyKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZWNtVXNlclNlcnZpY2UuZ2V0VXNlclByb2ZpbGVJbWFnZSh1c2VyLmF2YXRhcklkKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnBlb3BsZVByb2Nlc3NTZXJ2aWNlLmdldFVzZXJJbWFnZSh1c2VyKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgaXNBQ29udGVudFVzZXJzKHVzZXI6IGFueSk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdXNlci5hdmF0YXJJZDtcbiAgICB9XG59XG4iXX0=