/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { CommentProcessService } from '../services/comment-process.service';
import { CommentContentService } from '../services/comment-content.service';
import { Component, EventEmitter, Input, Output, ViewEncapsulation } from '@angular/core';
import { Observable } from 'rxjs';
import { share } from 'rxjs/operators';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../services/comment-process.service';
import * as ɵngcc2 from '../services/comment-content.service';
import * as ɵngcc3 from '@angular/common';
import * as ɵngcc4 from '@angular/material/form-field';
import * as ɵngcc5 from '@angular/material/input';
import * as ɵngcc6 from '@angular/forms';
import * as ɵngcc7 from '@angular/material/button';
import * as ɵngcc8 from './comment-list.component';
import * as ɵngcc9 from '@ngx-translate/core';

function CommentsComponent_div_4_Template(rf, ctx) { if (rf & 1) {
    const _r3 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 4);
    ɵngcc0.ɵɵelementStart(1, "mat-form-field", 5);
    ɵngcc0.ɵɵelementStart(2, "textarea", 6);
    ɵngcc0.ɵɵlistener("keydown.escape", function CommentsComponent_div_4_Template_textarea_keydown_escape_2_listener($event) { ɵngcc0.ɵɵrestoreView(_r3); const ctx_r2 = ɵngcc0.ɵɵnextContext(); return ctx_r2.clear($event); })("ngModelChange", function CommentsComponent_div_4_Template_textarea_ngModelChange_2_listener($event) { ɵngcc0.ɵɵrestoreView(_r3); const ctx_r4 = ɵngcc0.ɵɵnextContext(); return ctx_r4.message = $event; });
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(4, "div", 7);
    ɵngcc0.ɵɵelementStart(5, "button", 8);
    ɵngcc0.ɵɵlistener("click", function CommentsComponent_div_4_Template_button_click_5_listener() { ɵngcc0.ɵɵrestoreView(_r3); const ctx_r5 = ɵngcc0.ɵɵnextContext(); return ctx_r5.add(); });
    ɵngcc0.ɵɵtext(6);
    ɵngcc0.ɵɵpipe(7, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵpropertyInterpolate("placeholder", ɵngcc0.ɵɵpipeBind1(3, 4, "COMMENTS.ADD"));
    ɵngcc0.ɵɵproperty("ngModel", ctx_r0.message);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("disabled", !ctx_r0.message);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(7, 6, "COMMENTS.ADD"), " ");
} }
function CommentsComponent_div_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div");
    ɵngcc0.ɵɵelement(1, "adf-comment-list", 9);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("comments", ctx_r1.comments);
} }
const _c0 = function (a0) { return { count: a0 }; };
export class CommentsComponent {
    constructor(commentProcessService, commentContentService) {
        this.commentProcessService = commentProcessService;
        this.commentContentService = commentContentService;
        this.readOnly = false;
        this.error = new EventEmitter();
        this.comments = [];
        this.beingAdded = false;
        this.comment$ = new Observable((observer) => this.commentObserver = observer)
            .pipe(share());
        this.comment$.subscribe((comment) => {
            this.comments.push(comment);
        });
    }
    ngOnChanges(changes) {
        this.taskId = null;
        this.nodeId = null;
        this.taskId = changes['taskId'] ? changes['taskId'].currentValue : null;
        this.nodeId = changes['nodeId'] ? changes['nodeId'].currentValue : null;
        if (this.taskId || this.nodeId) {
            this.getComments();
        }
        else {
            this.resetComments();
        }
    }
    getComments() {
        this.resetComments();
        if (this.isATask()) {
            this.commentProcessService.getTaskComments(this.taskId).subscribe((comments) => {
                if (comments && comments instanceof Array) {
                    comments = comments.sort((comment1, comment2) => {
                        const date1 = new Date(comment1.created);
                        const date2 = new Date(comment2.created);
                        return date1 > date2 ? -1 : date1 < date2 ? 1 : 0;
                    });
                    comments.forEach((currentComment) => {
                        this.commentObserver.next(currentComment);
                    });
                }
            }, (err) => {
                this.error.emit(err);
            });
        }
        if (this.isANode()) {
            this.commentContentService.getNodeComments(this.nodeId).subscribe((comments) => {
                if (comments && comments instanceof Array) {
                    comments = comments.sort((comment1, comment2) => {
                        const date1 = new Date(comment1.created);
                        const date2 = new Date(comment2.created);
                        return date1 > date2 ? -1 : date1 < date2 ? 1 : 0;
                    });
                    comments.forEach((comment) => {
                        this.commentObserver.next(comment);
                    });
                }
            }, (err) => {
                this.error.emit(err);
            });
        }
    }
    resetComments() {
        this.comments = [];
    }
    add() {
        if (this.message && this.message.trim() && !this.beingAdded) {
            const comment = this.sanitize(this.message);
            this.beingAdded = true;
            if (this.isATask()) {
                this.commentProcessService.addTaskComment(this.taskId, comment)
                    .subscribe((res) => {
                    this.comments.unshift(res);
                    this.message = '';
                    this.beingAdded = false;
                }, (err) => {
                    this.error.emit(err);
                    this.beingAdded = false;
                });
            }
            if (this.isANode()) {
                this.commentContentService.addNodeComment(this.nodeId, comment)
                    .subscribe((res) => {
                    this.comments.unshift(res);
                    this.message = '';
                    this.beingAdded = false;
                }, (err) => {
                    this.error.emit(err);
                    this.beingAdded = false;
                });
            }
        }
    }
    clear(event) {
        event.stopPropagation();
        this.message = '';
    }
    isReadOnly() {
        return this.readOnly;
    }
    isATask() {
        return !!this.taskId;
    }
    isANode() {
        return !!this.nodeId;
    }
    sanitize(input) {
        return input.replace(/<[^>]+>/g, '')
            .replace(/^\s+|\s+$|\s+(?=\s)/g, '')
            .replace(/\r?\n/g, '<br/>');
    }
}
CommentsComponent.ɵfac = function CommentsComponent_Factory(t) { return new (t || CommentsComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.CommentProcessService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.CommentContentService)); };
CommentsComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: CommentsComponent, selectors: [["adf-comments"]], inputs: { readOnly: "readOnly", taskId: "taskId", nodeId: "nodeId" }, outputs: { error: "error" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 6, vars: 8, consts: [[1, "adf-comments-container"], ["id", "comment-header", "role", "heading", 1, "adf-comments-header"], ["class", "adf-comments-input-container", 4, "ngIf"], [4, "ngIf"], [1, "adf-comments-input-container"], [1, "adf-full-width"], ["matInput", "", "id", "comment-input", 3, "placeholder", "ngModel", "keydown.escape", "ngModelChange"], [1, "adf-comments-input-actions"], ["mat-button", "", "data-automation-id", "comments-input-add", "color", "primary", 1, "adf-comments-input-add", 3, "disabled", "click"], [3, "comments"]], template: function CommentsComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "div", 1);
        ɵngcc0.ɵɵtext(2);
        ɵngcc0.ɵɵpipe(3, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(4, CommentsComponent_div_4_Template, 8, 8, "div", 2);
        ɵngcc0.ɵɵtemplate(5, CommentsComponent_div_5_Template, 2, 1, "div", 3);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind2(3, 3, "COMMENTS.HEADER", ɵngcc0.ɵɵpureFunction1(6, _c0, ctx.comments == null ? null : ctx.comments.length)), " ");
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.isReadOnly());
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.comments.length > 0);
    } }, directives: [ɵngcc3.NgIf, ɵngcc4.MatFormField, ɵngcc5.MatInput, ɵngcc6.DefaultValueAccessor, ɵngcc6.NgControlStatus, ɵngcc6.NgModel, ɵngcc7.MatButton, ɵngcc8.CommentListComponent], pipes: [ɵngcc9.TranslatePipe], styles: [".adf-comments-container{height:100%;overflow:auto;width:100%}.adf-comments-header{border-bottom:1px solid var(--theme-fg-divider);font-size:14px;font-weight:600;padding:10px 20px}.adf-comments-input-container{border-bottom:1px solid var(--theme-fg-divider);padding:8px 15px 0;width:calc(100% - 30px)}.adf-comments-input-container textarea{resize:vertical}.adf-comments-input-actions{display:flex;justify-content:flex-end;margin-bottom:10px}.adf-full-width{width:100%}adf-comment-list{float:left;height:calc(100% - 101px);overflow:auto;width:100%}"], encapsulation: 2 });
CommentsComponent.ctorParameters = () => [
    { type: CommentProcessService },
    { type: CommentContentService }
];
CommentsComponent.propDecorators = {
    taskId: [{ type: Input }],
    nodeId: [{ type: Input }],
    readOnly: [{ type: Input }],
    error: [{ type: Output }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CommentsComponent, [{
        type: Component,
        args: [{
                selector: 'adf-comments',
                template: "<div class=\"adf-comments-container\">\n    <div id=\"comment-header\" class=\"adf-comments-header\" role=\"heading\">\n        {{'COMMENTS.HEADER' | translate: { count: comments?.length} }}\n    </div>\n    <div class=\"adf-comments-input-container\" *ngIf=\"!isReadOnly()\">\n            <mat-form-field class=\"adf-full-width\">\n                <textarea (keydown.escape)=\"clear($event)\" matInput id=\"comment-input\" placeholder=\"{{'COMMENTS.ADD' | translate}}\" [(ngModel)]=\"message\"></textarea>\n            </mat-form-field>\n\n            <div class=\"adf-comments-input-actions\">\n                <button mat-button\n                    class=\"adf-comments-input-add\"\n                    data-automation-id=\"comments-input-add\"\n                    color=\"primary\"\n                    (click)=\"add()\"\n                    [disabled]=\"!message\">\n                    {{ 'COMMENTS.ADD' | translate }}\n                </button>\n            </div>\n    </div>\n\n    <div *ngIf=\"comments.length > 0\">\n        <adf-comment-list [comments]=\"comments\">\n        </adf-comment-list>\n    </div>\n</div>",
                encapsulation: ViewEncapsulation.None,
                styles: [".adf-comments-container{height:100%;overflow:auto;width:100%}.adf-comments-header{border-bottom:1px solid var(--theme-fg-divider);font-size:14px;font-weight:600;padding:10px 20px}.adf-comments-input-container{border-bottom:1px solid var(--theme-fg-divider);padding:8px 15px 0;width:calc(100% - 30px)}.adf-comments-input-container textarea{resize:vertical}.adf-comments-input-actions{display:flex;justify-content:flex-end;margin-bottom:10px}.adf-full-width{width:100%}adf-comment-list{float:left;height:calc(100% - 101px);overflow:auto;width:100%}"]
            }]
    }], function () { return [{ type: ɵngcc1.CommentProcessService }, { type: ɵngcc2.CommentContentService }]; }, { readOnly: [{
            type: Input
        }], error: [{
            type: Output
        }], taskId: [{
            type: Input
        }], nodeId: [{
            type: Input
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,