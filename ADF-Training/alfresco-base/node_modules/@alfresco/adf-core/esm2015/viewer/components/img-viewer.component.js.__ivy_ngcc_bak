/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, Input, ViewEncapsulation, ElementRef, Output, EventEmitter, ViewChild, HostListener } from '@angular/core';
import { ContentService } from '../../services/content.service';
import { AppConfigService } from './../../app-config/app-config.service';
import Cropper from 'cropperjs';
export class ImgViewerComponent {
    constructor(appConfigService, contentService) {
        this.appConfigService = appConfigService;
        this.contentService = contentService;
        this.showToolbar = true;
        this.readOnly = true;
        this.error = new EventEmitter();
        this.submit = new EventEmitter();
        this.scale = 1.0;
        this.isEditing = false;
        this.initializeScaling();
    }
    get currentScaleText() {
        return Math.round(this.scale * 100) + '%';
    }
    initializeScaling() {
        const scaling = this.appConfigService.get('adf-viewer.image-viewer-scaling', undefined) / 100;
        if (scaling) {
            this.scale = scaling;
        }
    }
    ngAfterViewInit() {
        this.cropper = new Cropper(this.imageElement.nativeElement, {
            autoCrop: false,
            dragMode: 'move',
            background: false,
            scalable: true,
            zoomOnWheel: false,
            toggleDragModeOnDblclick: false,
            viewMode: 1,
            checkCrossOrigin: false,
            ready: () => {
                this.updateCanvasContainer();
            }
        });
    }
    ngOnDestroy() {
        this.cropper.destroy();
    }
    onKeyDown(event) {
        switch (event.key) {
            case 'ArrowLeft':
                event.preventDefault();
                this.cropper.move(-3, 0);
                break;
            case 'ArrowUp':
                event.preventDefault();
                this.cropper.move(0, -3);
                break;
            case 'ArrowRight':
                event.preventDefault();
                this.cropper.move(3, 0);
                break;
            case 'ArrowDown':
                event.preventDefault();
                this.cropper.move(0, 3);
                break;
            case 'i':
                this.zoomIn();
                break;
            case 'o':
                this.zoomOut();
                break;
            case 'r':
                this.rotateImage();
                break;
            default:
        }
    }
    ngOnChanges(changes) {
        const blobFile = changes['blobFile'];
        if (blobFile && blobFile.currentValue) {
            this.urlFile = this.contentService.createTrustedUrl(this.blobFile);
            return;
        }
        if (!this.urlFile && !this.blobFile) {
            throw new Error('Attribute urlFile or blobFile is required');
        }
    }
    zoomIn() {
        this.cropper.zoom(0.2);
        this.scale = +((this.scale + 0.2).toFixed(1));
    }
    zoomOut() {
        if (this.scale > 0.2) {
            this.cropper.zoom(-0.2);
            this.scale = +((this.scale - 0.2).toFixed(1));
        }
    }
    rotateImage() {
        this.isEditing = true;
        this.cropper.rotate(-90);
    }
    cropImage() {
        this.isEditing = true;
        this.cropper.setDragMode('crop');
        this.cropper.crop();
    }
    save() {
        this.isEditing = false;
        this.cropper.setDragMode('move');
        this.cropper.getCroppedCanvas().toBlob((blob) => {
            this.submit.emit(blob);
            this.cropper.replace(this.cropper.getCroppedCanvas().toDataURL());
            this.cropper.clear();
        });
    }
    reset() {
        this.isEditing = false;
        this.cropper.clear();
        this.cropper.reset();
        this.cropper.setDragMode('move');
        this.scale = 1.0;
        this.updateCanvasContainer();
    }
    updateCanvasContainer() {
        if (this.imageElement.nativeElement.width < this.cropper.getContainerData().width) {
            const width = this.imageElement.nativeElement.width;
            const height = this.imageElement.nativeElement.height;
            const top = (this.cropper.getContainerData().height - this.imageElement.nativeElement.height) / 2;
            const left = (this.cropper.getContainerData().width - this.imageElement.nativeElement.width) / 2;
            this.cropper.setCanvasData({
                width,
                height,
                top,
                left
            });
        }
    }
    onImageError() {
        this.error.emit();
    }
}
ImgViewerComponent.decorators = [
    { type: Component, args: [{
                selector: 'adf-img-viewer',
                template: "<div id=\"adf-image-container\" (keydown)=\"onKeyDown($event)\" class=\"adf-image-container\" tabindex=\"0\" role=\"img\" [attr.aria-label]=\"nameFile\" data-automation-id=\"adf-image-container\">\n    <img #image id=\"viewer-image\" [src]=\"urlFile\" [alt]=\"nameFile\" (error)=\"onImageError()\" />\n</div>\n\n<div class=\"adf-image-viewer__toolbar\" *ngIf=\"showToolbar\">\n    <adf-toolbar class=\"adf-main-toolbar\">\n        <button\n            id=\"viewer-zoom-out-button\"\n            title=\"{{ 'ADF_VIEWER.ARIA.ZOOM_OUT' | translate }}\"\n            attr.aria-label=\"{{ 'ADF_VIEWER.ARIA.ZOOM_OUT' | translate }}\"\n            mat-icon-button\n            (click)=\"zoomOut()\">\n            <mat-icon>zoom_out</mat-icon>\n        </button>\n\n        <div class=\"adf-viewer__toolbar-page-scale\" data-automation-id=\"adf-page-scale\">\n            {{ currentScaleText }}\n        </div>\n\n        <button\n            id=\"viewer-zoom-in-button\"\n            mat-icon-button\n            title=\"{{ 'ADF_VIEWER.ARIA.ZOOM_IN' | translate }}\"\n            attr.aria-label=\"{{ 'ADF_VIEWER.ARIA.ZOOM_IN' | translate }}\"\n            (click)=\"zoomIn()\">\n            <mat-icon>zoom_in</mat-icon>\n        </button>\n\n        <button\n            *ngIf=\"!readOnly\" id=\"viewer-rotate-button\"\n            title=\"{{ 'ADF_VIEWER.ARIA.ROTATE' | translate }}\"\n            attr.aria-label=\"{{ 'ADF_VIEWER.ARIA.ROTATE' | translate }}\"\n            mat-icon-button\n            (click)=\"rotateImage()\">\n            <mat-icon>rotate_left</mat-icon>\n        </button>\n        <button\n            *ngIf=\"!readOnly\" id=\"viewer-crop-button\"\n            title=\"{{ 'ADF_VIEWER.ARIA.CROP' | translate }}\"\n            attr.aria-label=\"{{ 'ADF_VIEWER.ARIA.CROP' | translate }}\"\n            mat-icon-button\n            (click)=\"cropImage()\">\n            <mat-icon>crop</mat-icon>\n        </button>\n\n        <button\n            id=\"viewer-reset-button\"\n            title=\"{{ 'ADF_VIEWER.ARIA.RESET' | translate }}\"\n            attr.aria-label=\"{{ 'ADF_VIEWER.ARIA.RESET' | translate }}\"\n            mat-icon-button\n            (click)=\"reset()\">\n            <mat-icon>zoom_out_map</mat-icon>\n        </button>\n\n    </adf-toolbar>\n\n    <adf-toolbar class=\"adf-secondary-toolbar\" *ngIf=\"!readOnly && isEditing\">\n        <button\n            id=\"viewer-cancel-button\"\n            title=\"{{ 'ADF_VIEWER.ARIA.CANCEL' | translate }}\"\n            attr.aria-label=\"{{ 'ADF_VIEWER.ARIA.CANCEL' | translate }}\"\n            mat-icon-button\n            (click)=\"reset()\">\n            <mat-icon>close</mat-icon>\n        </button>\n\n        <button\n            id=\"viewer-save-button\"\n            title=\"{{ 'ADF_VIEWER.ARIA.SAVE' | translate }}\"\n            attr.aria-label=\"{{ 'ADF_VIEWER.ARIA.SAVE' | translate }}\"\n            mat-icon-button\n            (click)=\"save()\">\n            <mat-icon>check</mat-icon>\n        </button>\n\n    </adf-toolbar>\n</div>\n",
                host: { 'class': 'adf-image-viewer' },
                encapsulation: ViewEncapsulation.None,
                styles: [".adf-image-viewer{width:100%}.adf-image-viewer .adf-image-container{align-items:center;display:flex;height:90vh;justify-content:center}.adf-image-viewer .adf-image-container:focus{outline:1px solid var(--theme-accent-color-a200);outline-offset:-1px}.adf-image-viewer .adf-image-container img{max-height:100%;max-width:100%}@media screen and (-ms-high-contrast:active),screen and (-ms-high-contrast:none){.adf-image-viewer .adf-image-container img{height:100%}}.adf-image-viewer__toolbar{bottom:5px;left:50%;position:absolute;transform:translateX(-50%)}.adf-image-viewer__toolbar .adf-toolbar .mat-toolbar{background-color:var(--theme-card-bg-color);border-radius:2px;border-width:0;box-shadow:0 2px 2px 0 rgba(0,0,0,.24),0 0 2px 0 rgba(0,0,0,.12);max-height:48px}.adf-image-viewer__toolbar .adf-main-toolbar{display:inline-block}.adf-image-viewer__toolbar .adf-secondary-toolbar{display:inline-block;margin-left:10px}"]
            },] }
];
ImgViewerComponent.ctorParameters = () => [
    { type: AppConfigService },
    { type: ContentService }
];
ImgViewerComponent.propDecorators = {
    showToolbar: [{ type: Input }],
    readOnly: [{ type: Input }],
    urlFile: [{ type: Input }],
    blobFile: [{ type: Input }],
    nameFile: [{ type: Input }],
    error: [{ type: Output }],
    submit: [{ type: Output }],
    imageElement: [{ type: ViewChild, args: ['image', { static: false },] }],
    onKeyDown: [{ type: HostListener, args: ['document:keydown', ['$event'],] }]
};
//# sourceMappingURL=data:application/json;base64,