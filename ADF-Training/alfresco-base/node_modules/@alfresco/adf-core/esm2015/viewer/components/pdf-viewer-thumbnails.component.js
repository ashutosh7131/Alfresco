/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, Input, ContentChild, TemplateRef, HostListener, ElementRef, ViewEncapsulation, EventEmitter, Output, Inject, ViewChildren, QueryList } from '@angular/core';
import { ESCAPE, UP_ARROW, DOWN_ARROW } from '@angular/cdk/keycodes';
import { DOCUMENT } from '@angular/common';
import { FocusKeyManager } from '@angular/cdk/a11y';
import { PdfThumbComponent } from './pdf-viewer-thumb.component';
import { delay } from 'rxjs/operators';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';
import * as ɵngcc2 from './pdf-viewer-thumb.component';
import * as ɵngcc3 from '@angular/flex-layout/extended';

const _c0 = function (a0) { return { "adf-pdf-thumbnails__thumb--selected": a0 }; };
function PdfThumbListComponent_adf_pdf_thumb_1_Template(rf, ctx) { if (rf & 1) {
    const _r3 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "adf-pdf-thumb", 2);
    ɵngcc0.ɵɵlistener("click", function PdfThumbListComponent_adf_pdf_thumb_1_Template_adf_pdf_thumb_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r3); const page_r1 = ctx.$implicit; const ctx_r2 = ɵngcc0.ɵɵnextContext(); return ctx_r2.goTo(page_r1.id); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const page_r1 = ctx.$implicit;
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("id", page_r1.id)("ngClass", ɵngcc0.ɵɵpureFunction1(3, _c0, ctx_r0.isSelected(page_r1.id)))("page", page_r1);
} }
export class PdfThumbListComponent {
    constructor(element, document) {
        this.element = element;
        this.document = document;
        this.close = new EventEmitter();
        this.virtualHeight = 0;
        this.translateY = 0;
        this.renderItems = [];
        this.width = 91;
        this.currentHeight = 0;
        this.items = [];
        this.margin = 15;
        this.itemHeight = 114 + this.margin;
        this.previouslyFocusedElement = null;
        this.calculateItems = this.calculateItems.bind(this);
        this.onPageChange = this.onPageChange.bind(this);
    }
    onKeydown(event) {
        const keyCode = event.keyCode;
        if (keyCode === UP_ARROW && this.canSelectPreviousItem()) {
            this.pdfViewer.currentPageNumber -= 1;
        }
        if (keyCode === DOWN_ARROW && this.canSelectNextItem()) {
            this.pdfViewer.currentPageNumber += 1;
        }
        if (keyCode === ESCAPE) {
            this.close.emit();
        }
        this.keyManager.setFocusOrigin('keyboard');
        event.preventDefault();
    }
    onResize() {
        this.calculateItems();
    }
    ngOnInit() {
        this.pdfViewer.eventBus.on('pagechanging', this.onPageChange);
        this.element.nativeElement.addEventListener('scroll', this.calculateItems, true);
        this.setHeight(this.pdfViewer.currentPageNumber);
        this.items = this.getPages();
        this.calculateItems();
        this.previouslyFocusedElement = this.document.activeElement;
    }
    ngAfterViewInit() {
        this.keyManager = new FocusKeyManager(this.thumbsList);
        this.thumbsList.changes
            .pipe(delay(0))
            .subscribe(() => this.keyManager.setActiveItem(this.getPageIndex(this.pdfViewer.currentPageNumber)));
        setTimeout(() => {
            this.scrollInto(this.pdfViewer.currentPageNumber);
            this.keyManager.setActiveItem(this.getPageIndex(this.pdfViewer.currentPageNumber));
        }, 0);
    }
    ngOnDestroy() {
        this.element.nativeElement.removeEventListener('scroll', this.calculateItems, true);
        this.pdfViewer.eventBus.on('pagechanging', this.onPageChange);
        if (this.previouslyFocusedElement) {
            this.previouslyFocusedElement.focus();
            this.previouslyFocusedElement = null;
        }
    }
    trackByFn(_, item) {
        return item.id;
    }
    isSelected(pageNumber) {
        return this.pdfViewer.currentPageNumber === pageNumber;
    }
    goTo(pageNumber) {
        this.pdfViewer.currentPageNumber = pageNumber;
    }
    scrollInto(pageNumber) {
        if (this.items.length) {
            const index = this.items.findIndex((element) => element.id === pageNumber);
            if (index < 0 || index >= this.items.length) {
                return;
            }
            this.element.nativeElement.scrollTop = index * this.itemHeight;
            this.calculateItems();
        }
    }
    getPages() {
        return this.pdfViewer._pages.map((page) => ({
            id: page.id,
            getWidth: () => {
                return this.width;
            },
            getHeight: () => {
                return this.currentHeight;
            },
            getPage: () => this.pdfViewer.pdfDocument.getPage(page.id)
        }));
    }
    setHeight(id) {
        const height = this.pdfViewer.pdfDocument.getPage(id).then((page) => this.calculateHeight(page));
        return height;
    }
    calculateHeight(page) {
        const viewport = page.getViewport({ scale: 1 });
        const pageRatio = viewport.width / viewport.height;
        const height = Math.floor(this.width / pageRatio);
        this.currentHeight = height;
        this.itemHeight = height + this.margin;
    }
    calculateItems() {
        const { element, viewPort, itemsInView } = this.getContainerSetup();
        const indexByScrollTop = element.scrollTop / viewPort * this.items.length / itemsInView;
        const start = Math.floor(indexByScrollTop);
        const end = Math.ceil(indexByScrollTop) + (itemsInView);
        this.translateY = this.itemHeight * Math.ceil(start);
        this.virtualHeight = this.itemHeight * this.items.length - this.translateY;
        this.renderItems = this.items.slice(start, end);
    }
    getContainerSetup() {
        const element = this.element.nativeElement;
        const elementRec = element.getBoundingClientRect();
        const itemsInView = Math.ceil(elementRec.height / this.itemHeight);
        const viewPort = (this.itemHeight * this.items.length) / itemsInView;
        return {
            element,
            viewPort,
            itemsInView
        };
    }
    onPageChange(event) {
        const index = this.renderItems.findIndex((element) => element.id === event.pageNumber);
        if (index < 0) {
            this.scrollInto(event.pageNumber);
        }
        if (index >= this.renderItems.length - 1) {
            this.element.nativeElement.scrollTop += this.itemHeight;
        }
        this.keyManager.setActiveItem(this.getPageIndex(event.pageNumber));
    }
    getPageIndex(pageNumber) {
        const thumbsListArray = this.thumbsList.toArray();
        return thumbsListArray.findIndex(el => el.page.id === pageNumber);
    }
    canSelectNextItem() {
        return this.pdfViewer.currentPageNumber !== this.pdfViewer.pagesCount;
    }
    canSelectPreviousItem() {
        return this.pdfViewer.currentPageNumber !== 1;
    }
}
PdfThumbListComponent.ɵfac = function PdfThumbListComponent_Factory(t) { return new (t || PdfThumbListComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(DOCUMENT)); };
PdfThumbListComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: PdfThumbListComponent, selectors: [["adf-pdf-thumbnails"]], contentQueries: function PdfThumbListComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, TemplateRef, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.template = _t.first);
    } }, viewQuery: function PdfThumbListComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(PdfThumbComponent, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.thumbsList = _t);
    } }, hostAttrs: [1, "adf-pdf-thumbnails"], hostBindings: function PdfThumbListComponent_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("keydown", function PdfThumbListComponent_keydown_HostBindingHandler($event) { return ctx.onKeydown($event); })("resize", function PdfThumbListComponent_resize_HostBindingHandler() { return ctx.onResize(); }, false, ɵngcc0.ɵɵresolveWindow);
    } }, inputs: { pdfViewer: "pdfViewer" }, outputs: { close: "close" }, decls: 2, vars: 6, consts: [["data-automation-id", "adf-thumbnails-content", 1, "adf-pdf-thumbnails__content"], ["class", "adf-pdf-thumbnails__thumb", 3, "id", "ngClass", "page", "click", 4, "ngFor", "ngForOf", "ngForTrackBy"], [1, "adf-pdf-thumbnails__thumb", 3, "id", "ngClass", "page", "click"]], template: function PdfThumbListComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵtemplate(1, PdfThumbListComponent_adf_pdf_thumb_1_Template, 1, 5, "adf-pdf-thumb", 1);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵstyleProp("height", ctx.virtualHeight, "px")("transform", "translate(-50%, " + ctx.translateY + "px)");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.renderItems)("ngForTrackBy", ctx.trackByFn);
    } }, directives: [ɵngcc1.NgForOf, ɵngcc2.PdfThumbComponent, ɵngcc1.NgClass, ɵngcc3.DefaultClassDirective], styles: [".adf-pdf-thumbnails{display:block;height:100%;overflow:hidden;overflow-y:auto;position:relative}.adf-pdf-thumbnails__content{height:0;left:50%;position:absolute;top:5px}.adf-pdf-thumbnails__thumb{background:var(--theme-background-color);cursor:pointer;display:block;margin-bottom:15px;width:91px}.adf-pdf-thumbnails__thumb:hover{box-shadow:0 0 5px 0 var(--theme-text-bold-color)}.adf-pdf-thumbnails__thumb--selected{border:2px solid var(--theme-accent-color-a200)}"], encapsulation: 2 });
PdfThumbListComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }
];
PdfThumbListComponent.propDecorators = {
    pdfViewer: [{ type: Input }],
    close: [{ type: Output }],
    template: [{ type: ContentChild, args: [TemplateRef,] }],
    thumbsList: [{ type: ViewChildren, args: [PdfThumbComponent,] }],
    onKeydown: [{ type: HostListener, args: ['keydown', ['$event'],] }],
    onResize: [{ type: HostListener, args: ['window:resize',] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(PdfThumbListComponent, [{
        type: Component,
        args: [{
                selector: 'adf-pdf-thumbnails',
                template: "<div class=\"adf-pdf-thumbnails__content\"\n    data-automation-id='adf-thumbnails-content'\n    [style.height.px]=\"virtualHeight\"\n    [style.transform]=\"'translate(-50%, ' + translateY + 'px)'\">\n    <adf-pdf-thumb *ngFor=\"let page of renderItems; trackBy: trackByFn\"\n        class=\"adf-pdf-thumbnails__thumb\"\n        [id]=\"page.id\"\n        [ngClass]=\"{'adf-pdf-thumbnails__thumb--selected' : isSelected(page.id)}\"\n        [page]=\"page\"\n        (click)=\"goTo(page.id)\">\n    </adf-pdf-thumb>\n</div>\n",
                host: { class: 'adf-pdf-thumbnails' },
                encapsulation: ViewEncapsulation.None,
                styles: [".adf-pdf-thumbnails{display:block;height:100%;overflow:hidden;overflow-y:auto;position:relative}.adf-pdf-thumbnails__content{height:0;left:50%;position:absolute;top:5px}.adf-pdf-thumbnails__thumb{background:var(--theme-background-color);cursor:pointer;display:block;margin-bottom:15px;width:91px}.adf-pdf-thumbnails__thumb:hover{box-shadow:0 0 5px 0 var(--theme-text-bold-color)}.adf-pdf-thumbnails__thumb--selected{border:2px solid var(--theme-accent-color-a200)}"]
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: undefined, decorators: [{
                type: Inject,
                args: [DOCUMENT]
            }] }]; }, { close: [{
            type: Output
        }], onKeydown: [{
            type: HostListener,
            args: ['keydown', ['$event']]
        }], onResize: [{
            type: HostListener,
            args: ['window:resize']
        }], pdfViewer: [{
            type: Input
        }], template: [{
            type: ContentChild,
            args: [TemplateRef]
        }], thumbsList: [{
            type: ViewChildren,
            args: [PdfThumbComponent]
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,