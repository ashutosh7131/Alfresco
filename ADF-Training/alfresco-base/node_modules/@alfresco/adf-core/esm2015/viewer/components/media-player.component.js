/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, Input, ViewEncapsulation, Output, EventEmitter } from '@angular/core';
import { ContentService } from '../../services/content.service';
import { ViewUtilService } from '../services/view-util.service';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../../services/content.service';
import * as ɵngcc2 from '../services/view-util.service';
import * as ɵngcc3 from '@angular/common';
import * as ɵngcc4 from '@angular/flex-layout/extended';

function MediaPlayerComponent_track_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "track", 3);
} if (rf & 2) {
    const track_r1 = ctx.$implicit;
    ɵngcc0.ɵɵproperty("kind", track_r1.kind)("label", track_r1.label)("srclang", track_r1.srclang)("src", track_r1.src, ɵngcc0.ɵɵsanitizeUrl);
} }
const _c0 = function (a0) { return { "adf-audio-file": a0 }; };
export class MediaPlayerComponent {
    constructor(contentService, viewUtils) {
        this.contentService = contentService;
        this.viewUtils = viewUtils;
        this.tracks = [];
        this.error = new EventEmitter();
    }
    ngOnChanges(changes) {
        const blobFile = changes['blobFile'];
        const nodeId = changes['nodeId'];
        if (blobFile && blobFile.currentValue) {
            this.urlFile = this.contentService.createTrustedUrl(this.blobFile);
            return;
        }
        if (nodeId && nodeId.currentValue) {
            this.viewUtils.generateMediaTracks(this.nodeId).then((tracks) => this.tracks = tracks);
        }
        if (!this.urlFile && !this.blobFile) {
            throw new Error('Attribute urlFile or blobFile is required');
        }
    }
    onMediaPlayerError() {
        this.error.emit();
    }
}
MediaPlayerComponent.ɵfac = function MediaPlayerComponent_Factory(t) { return new (t || MediaPlayerComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ContentService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.ViewUtilService)); };
MediaPlayerComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MediaPlayerComponent, selectors: [["adf-media-player"]], hostAttrs: [1, "adf-media-player"], inputs: { tracks: "tracks", urlFile: "urlFile", blobFile: "blobFile", mimeType: "mimeType", nameFile: "nameFile", nodeId: "nodeId" }, outputs: { error: "error" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 3, vars: 6, consts: [["controls", "", 3, "ngClass"], [3, "src", "type", "error"], [3, "kind", "label", "srclang", "src", 4, "ngFor", "ngForOf"], [3, "kind", "label", "srclang", "src"]], template: function MediaPlayerComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "video", 0);
        ɵngcc0.ɵɵelementStart(1, "source", 1);
        ɵngcc0.ɵɵlistener("error", function MediaPlayerComponent_Template_source_error_1_listener() { return ctx.onMediaPlayerError(); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(2, MediaPlayerComponent_track_2_Template, 1, 4, "track", 2);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(4, _c0, ctx.mimeType && ctx.mimeType.startsWith("audio")));
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("src", ctx.urlFile, ɵngcc0.ɵɵsanitizeUrl)("type", ctx.mimeType);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.tracks);
    } }, directives: [ɵngcc3.NgClass, ɵngcc4.DefaultClassDirective, ɵngcc3.NgForOf], styles: [".adf-media-player{display:flex}.adf-media-player video{display:flex;flex:1;max-height:90vh;max-width:100%}.adf-media-player video.adf-audio-file::-webkit-media-text-track-container{transform:translateY(-50%)!important}"], encapsulation: 2 });
MediaPlayerComponent.ctorParameters = () => [
    { type: ContentService },
    { type: ViewUtilService }
];
MediaPlayerComponent.propDecorators = {
    urlFile: [{ type: Input }],
    blobFile: [{ type: Input }],
    mimeType: [{ type: Input }],
    nameFile: [{ type: Input }],
    nodeId: [{ type: Input }],
    tracks: [{ type: Input }],
    error: [{ type: Output }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MediaPlayerComponent, [{
        type: Component,
        args: [{
                selector: 'adf-media-player',
                template: "<video controls [ngClass]=\"{'adf-audio-file': mimeType && mimeType.startsWith('audio')}\">\n    <source [src]=\"urlFile\" [type]=\"mimeType\" (error)=\"onMediaPlayerError()\"/>\n    <track *ngFor=\"let track of tracks\" [kind]=\"track.kind\" [label]=\"track.label\" [srclang]=\"track.srclang\" [src]=\"track.src\"/>\n</video>\n",
                host: { 'class': 'adf-media-player' },
                encapsulation: ViewEncapsulation.None,
                styles: [".adf-media-player{display:flex}.adf-media-player video{display:flex;flex:1;max-height:90vh;max-width:100%}.adf-media-player video.adf-audio-file::-webkit-media-text-track-container{transform:translateY(-50%)!important}"]
            }]
    }], function () { return [{ type: ɵngcc1.ContentService }, { type: ɵngcc2.ViewUtilService }]; }, { tracks: [{
            type: Input
        }], error: [{
            type: Output
        }], urlFile: [{
            type: Input
        }], blobFile: [{
            type: Input
        }], mimeType: [{
            type: Input
        }], nameFile: [{
            type: Input
        }], nodeId: [{
            type: Input
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVkaWEtcGxheWVyLmNvbXBvbmVudC5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vaG9tZS90cmF2aXMvYnVpbGQvQWxmcmVzY28vYWxmcmVzY28tbmcyLWNvbXBvbmVudHMvbGliL2NvcmUvdmlld2VyL2NvbXBvbmVudHMvbWVkaWEtcGxheWVyLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBRUgsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQTRCLGlCQUFpQixFQUFFLE1BQU0sRUFBRSxZQUFZLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDcEgsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBRWhFLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7QUFTaEUsTUFBTSxPQUFPLG9CQUFvQjtBQUFHLElBdUJoQyxZQUFvQixjQUE4QixFQUFVLFNBQTBCO0FBQzFGLFFBRHdCLG1CQUFjLEdBQWQsY0FBYyxDQUFnQjtBQUFDLFFBQVMsY0FBUyxHQUFULFNBQVMsQ0FBaUI7QUFBQyxRQUx2RixXQUFNLEdBQVksRUFBRSxDQUFDO0FBQ3pCLFFBRUksVUFBSyxHQUFHLElBQUksWUFBWSxFQUFPLENBQUM7QUFDcEMsSUFFSSxDQUFDO0FBQ0wsSUFDSSxXQUFXLENBQUMsT0FBc0I7QUFDdEMsUUFBUSxNQUFNLFFBQVEsR0FBRyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUM7QUFDN0MsUUFBUSxNQUFNLE1BQU0sR0FBRyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDekMsUUFDUSxJQUFJLFFBQVEsSUFBSSxRQUFRLENBQUMsWUFBWSxFQUFFO0FBQy9DLFlBQVksSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUMvRSxZQUFZLE9BQU87QUFDbkIsU0FBUztBQUNULFFBQ1EsSUFBSSxNQUFNLElBQUksTUFBTSxDQUFDLFlBQVksRUFBRTtBQUMzQyxZQUFZLElBQUksQ0FBQyxTQUFTLENBQUMsbUJBQW1CLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUMsQ0FBQztBQUNuRyxTQUFTO0FBQ1QsUUFDUSxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUU7QUFDN0MsWUFBWSxNQUFNLElBQUksS0FBSyxDQUFDLDJDQUEyQyxDQUFDLENBQUM7QUFDekUsU0FBUztBQUNULElBQUksQ0FBQztBQUNMLElBQ0ksa0JBQWtCO0FBQ3RCLFFBQVEsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQztBQUMxQixJQUFJLENBQUM7QUFDTDtnREF0REMsU0FBUyxTQUFDLGtCQUNQLFFBQVEsRUFBRSxrQkFBa0Isa0JBQzVCO2lRQUE0QyxrQkFFNUMsSUFBSSxFQUFFLEVBQUUsT0FBTyxFQUFFLGtCQUFrQixFQUFFLGtCQUNyQyxhQUFhLEVBQUUsaUJBQWlCLENBQUMsSUFBSTtJQUN4Qzs7Ozs7Ozs7Ozs7O2lWQUNJO0FBQUM7QUFBOEMsWUFYM0MsY0FBYztBQUFJLFlBRWxCLGVBQWU7QUFBRztBQUFHO0FBRTFCLHNCQVNDLEtBQUs7QUFDUix1QkFFRyxLQUFLO0FBQ1IsdUJBRUcsS0FBSztBQUNSLHVCQUVHLEtBQUs7QUFDUixxQkFFRyxLQUFLO0FBQ1IscUJBRUcsS0FBSztBQUNSLG9CQUVHLE1BQU07QUFDVjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O29CQUFFO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBDb21wb25lbnQsIElucHV0LCBPbkNoYW5nZXMsIFNpbXBsZUNoYW5nZXMsIFZpZXdFbmNhcHN1bGF0aW9uLCBPdXRwdXQsIEV2ZW50RW1pdHRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29udGVudFNlcnZpY2UgfSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9jb250ZW50LnNlcnZpY2UnO1xuaW1wb3J0IHsgVHJhY2sgfSBmcm9tICcuLi9tb2RlbHMvdmlld2VyLm1vZGVsJztcbmltcG9ydCB7IFZpZXdVdGlsU2VydmljZSB9IGZyb20gJy4uL3NlcnZpY2VzL3ZpZXctdXRpbC5zZXJ2aWNlJztcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICdhZGYtbWVkaWEtcGxheWVyJyxcbiAgICB0ZW1wbGF0ZVVybDogJy4vbWVkaWEtcGxheWVyLmNvbXBvbmVudC5odG1sJyxcbiAgICBzdHlsZVVybHM6IFsnLi9tZWRpYS1wbGF5ZXIuY29tcG9uZW50LnNjc3MnXSxcbiAgICBob3N0OiB7ICdjbGFzcyc6ICdhZGYtbWVkaWEtcGxheWVyJyB9LFxuICAgIGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLk5vbmVcbn0pXG5leHBvcnQgY2xhc3MgTWVkaWFQbGF5ZXJDb21wb25lbnQgaW1wbGVtZW50cyBPbkNoYW5nZXMge1xuXG4gICAgQElucHV0KClcbiAgICB1cmxGaWxlOiBzdHJpbmc7XG5cbiAgICBASW5wdXQoKVxuICAgIGJsb2JGaWxlOiBCbG9iO1xuXG4gICAgQElucHV0KClcbiAgICBtaW1lVHlwZTogc3RyaW5nO1xuXG4gICAgQElucHV0KClcbiAgICBuYW1lRmlsZTogc3RyaW5nO1xuXG4gICAgQElucHV0KClcbiAgICBub2RlSWQ6IHN0cmluZztcblxuICAgIEBJbnB1dCgpXG4gICAgdHJhY2tzOiBUcmFja1tdID0gW107XG5cbiAgICBAT3V0cHV0KClcbiAgICBlcnJvciA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBjb250ZW50U2VydmljZTogQ29udGVudFNlcnZpY2UsIHByaXZhdGUgdmlld1V0aWxzOiBWaWV3VXRpbFNlcnZpY2UpIHtcbiAgICB9XG5cbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKSB7XG4gICAgICAgIGNvbnN0IGJsb2JGaWxlID0gY2hhbmdlc1snYmxvYkZpbGUnXTtcbiAgICAgICAgY29uc3Qgbm9kZUlkID0gY2hhbmdlc1snbm9kZUlkJ107XG5cbiAgICAgICAgaWYgKGJsb2JGaWxlICYmIGJsb2JGaWxlLmN1cnJlbnRWYWx1ZSkge1xuICAgICAgICAgICAgdGhpcy51cmxGaWxlID0gdGhpcy5jb250ZW50U2VydmljZS5jcmVhdGVUcnVzdGVkVXJsKHRoaXMuYmxvYkZpbGUpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG5vZGVJZCAmJiBub2RlSWQuY3VycmVudFZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLnZpZXdVdGlscy5nZW5lcmF0ZU1lZGlhVHJhY2tzKHRoaXMubm9kZUlkKS50aGVuKCh0cmFja3MpID0+IHRoaXMudHJhY2tzID0gdHJhY2tzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghdGhpcy51cmxGaWxlICYmICF0aGlzLmJsb2JGaWxlKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0F0dHJpYnV0ZSB1cmxGaWxlIG9yIGJsb2JGaWxlIGlzIHJlcXVpcmVkJyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBvbk1lZGlhUGxheWVyRXJyb3IoKSB7XG4gICAgICAgIHRoaXMuZXJyb3IuZW1pdCgpO1xuICAgIH1cbn1cbiJdfQ==