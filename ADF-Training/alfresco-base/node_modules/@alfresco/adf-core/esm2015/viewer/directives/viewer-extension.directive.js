/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { ContentChild, Directive, Input, TemplateRef } from '@angular/core';
import { ViewerComponent } from '../components/viewer.component';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../components/viewer.component';
export class ViewerExtensionDirective {
    constructor(viewerComponent) {
        this.viewerComponent = viewerComponent;
        this.onDestroy$ = new Subject();
    }
    ngAfterContentInit() {
        this.templateModel = { template: this.template, isVisible: false };
        this.viewerComponent.extensionTemplates.push(this.templateModel);
        this.viewerComponent.extensionChange
            .pipe(takeUntil(this.onDestroy$))
            .subscribe(fileExtension => {
            this.templateModel.isVisible = this.isVisible(fileExtension);
        });
        if (this.supportedExtensions instanceof Array) {
            this.supportedExtensions.forEach((extension) => {
                this.viewerComponent.externalExtensions.push(extension);
            });
        }
    }
    ngOnDestroy() {
        this.onDestroy$.next(true);
        this.onDestroy$.complete();
    }
    isVisible(fileExtension) {
        let supportedExtension;
        if (this.supportedExtensions && (this.supportedExtensions instanceof Array)) {
            supportedExtension = this.supportedExtensions.find((extension) => {
                return extension.toLowerCase() === fileExtension;
            });
        }
        return !!supportedExtension;
    }
}
ViewerExtensionDirective.ɵfac = function ViewerExtensionDirective_Factory(t) { return new (t || ViewerExtensionDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ViewerComponent)); };
ViewerExtensionDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ViewerExtensionDirective, selectors: [["adf-viewer-extension"]], contentQueries: function ViewerExtensionDirective_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, TemplateRef, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.template = _t.first);
    } }, inputs: { urlFileContent: "urlFileContent", extension: "extension", supportedExtensions: "supportedExtensions" } });
ViewerExtensionDirective.ctorParameters = () => [
    { type: ViewerComponent }
];
ViewerExtensionDirective.propDecorators = {
    template: [{ type: ContentChild, args: [TemplateRef,] }],
    urlFileContent: [{ type: Input }],
    extension: [{ type: Input }],
    supportedExtensions: [{ type: Input }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ViewerExtensionDirective, [{
        type: Directive,
        args: [{
                selector: 'adf-viewer-extension'
            }]
    }], function () { return [{ type: ɵngcc1.ViewerComponent }]; }, { template: [{
            type: ContentChild,
            args: [TemplateRef]
        }], urlFileContent: [{
            type: Input
        }], extension: [{
            type: Input
        }], supportedExtensions: [{
            type: Input
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmlld2VyLWV4dGVuc2lvbi5kaXJlY3RpdmUuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL2hvbWUvdHJhdmlzL2J1aWxkL0FsZnJlc2NvL2FsZnJlc2NvLW5nMi1jb21wb25lbnRzL2xpYi9jb3JlL3ZpZXdlci9kaXJlY3RpdmVzL3ZpZXdlci1leHRlbnNpb24uZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFFSCxPQUFPLEVBQW9CLFlBQVksRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLFdBQVcsRUFBYSxNQUFNLGVBQWUsQ0FBQztBQUN6RyxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFDakUsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUMvQixPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7OztBQUszQyxNQUFNLE9BQU8sd0JBQXdCO0FBQUcsSUFrQnBDLFlBQW9CLGVBQWdDO0FBQ3hELFFBRHdCLG9CQUFlLEdBQWYsZUFBZSxDQUFpQjtBQUFDLFFBRjdDLGVBQVUsR0FBRyxJQUFJLE9BQU8sRUFBVyxDQUFDO0FBQ2hELElBRUksQ0FBQztBQUNMLElBQ0ksa0JBQWtCO0FBQ3RCLFFBQVEsSUFBSSxDQUFDLGFBQWEsR0FBRyxFQUFFLFFBQVEsRUFBRSxJQUFJLENBQUMsUUFBUSxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsQ0FBQztBQUMzRSxRQUNRLElBQUksQ0FBQyxlQUFlLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztBQUN6RSxRQUNRLElBQUksQ0FBQyxlQUFlLENBQUMsZUFBZTtBQUM1QyxhQUFhLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0FBQzdDLGFBQWEsU0FBUyxDQUFDLGFBQWEsQ0FBQyxFQUFFO0FBQ3ZDLFlBQWdCLElBQUksQ0FBQyxhQUFhLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsYUFBYSxDQUFDLENBQUM7QUFDN0UsUUFBWSxDQUFDLENBQUMsQ0FBQztBQUNmLFFBQ1EsSUFBSSxJQUFJLENBQUMsbUJBQW1CLFlBQVksS0FBSyxFQUFFO0FBQ3ZELFlBQVksSUFBSSxDQUFDLG1CQUFtQixDQUFDLE9BQU8sQ0FBQyxDQUFDLFNBQVMsRUFBRSxFQUFFO0FBQzNELGdCQUFnQixJQUFJLENBQUMsZUFBZSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUN4RSxZQUFZLENBQUMsQ0FBQyxDQUFDO0FBQ2YsU0FBUztBQUNULElBQUksQ0FBQztBQUNMLElBQ0ksV0FBVztBQUNmLFFBQVEsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDbkMsUUFBUSxJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsRUFBRSxDQUFDO0FBQ25DLElBQUksQ0FBQztBQUNMLElBSUksU0FBUyxDQUFDLGFBQWE7QUFBSSxRQUN2QixJQUFJLGtCQUEwQixDQUFDO0FBQ3ZDLFFBQ1EsSUFBSSxJQUFJLENBQUMsbUJBQW1CLElBQUksQ0FBQyxJQUFJLENBQUMsbUJBQW1CLFlBQVksS0FBSyxDQUFDLEVBQUU7QUFDckYsWUFBWSxrQkFBa0IsR0FBRyxJQUFJLENBQUMsbUJBQW1CLENBQUMsSUFBSSxDQUFDLENBQUMsU0FBUyxFQUFFLEVBQUU7QUFDN0UsZ0JBQWdCLE9BQU8sU0FBUyxDQUFDLFdBQVcsRUFBRSxLQUFLLGFBQWEsQ0FBQztBQUNqRSxZQUNZLENBQUMsQ0FBQyxDQUFDO0FBQ2YsU0FBUztBQUNULFFBQ1EsT0FBTyxDQUFDLENBQUMsa0JBQWtCLENBQUM7QUFDcEMsSUFBSSxDQUFDO0FBQ0w7b0RBOURDLFNBQVMsU0FBQyxrQkFDUCxRQUFRLEVBQUUsc0JBQXNCLGNBQ25DOzs7Ozs7NkhBQ0k7QUFBQztBQUFrRCxZQVAvQyxlQUFlO0FBQUc7QUFBRztBQUN0Qix1QkFRSCxZQUFZLFNBQUMsV0FBVztBQUN4Qiw2QkFFQSxLQUFLO0FBQ1Isd0JBRUcsS0FBSztBQUNSLGtDQUVHLEtBQUs7QUFDVDs7Ozs7Ozs7Ozs7Ozs7O29CQUFFO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBBZnRlckNvbnRlbnRJbml0LCBDb250ZW50Q2hpbGQsIERpcmVjdGl2ZSwgSW5wdXQsIFRlbXBsYXRlUmVmLCBPbkRlc3Ryb3kgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFZpZXdlckNvbXBvbmVudCB9IGZyb20gJy4uL2NvbXBvbmVudHMvdmlld2VyLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyB0YWtlVW50aWwgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbkBEaXJlY3RpdmUoe1xuICAgIHNlbGVjdG9yOiAnYWRmLXZpZXdlci1leHRlbnNpb24nXG59KVxuZXhwb3J0IGNsYXNzIFZpZXdlckV4dGVuc2lvbkRpcmVjdGl2ZSBpbXBsZW1lbnRzIEFmdGVyQ29udGVudEluaXQsIE9uRGVzdHJveSB7XG5cbiAgICBAQ29udGVudENoaWxkKFRlbXBsYXRlUmVmKVxuICAgIHRlbXBsYXRlOiBhbnk7XG5cbiAgICBASW5wdXQoKVxuICAgIHVybEZpbGVDb250ZW50OiBzdHJpbmc7XG5cbiAgICBASW5wdXQoKVxuICAgIGV4dGVuc2lvbjogc3RyaW5nO1xuXG4gICAgQElucHV0KClcbiAgICBzdXBwb3J0ZWRFeHRlbnNpb25zOiBzdHJpbmdbXTtcblxuICAgIHRlbXBsYXRlTW9kZWw6IGFueTtcblxuICAgIHByaXZhdGUgb25EZXN0cm95JCA9IG5ldyBTdWJqZWN0PGJvb2xlYW4+KCk7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIHZpZXdlckNvbXBvbmVudDogVmlld2VyQ29tcG9uZW50KSB7XG4gICAgfVxuXG4gICAgbmdBZnRlckNvbnRlbnRJbml0KCkge1xuICAgICAgICB0aGlzLnRlbXBsYXRlTW9kZWwgPSB7IHRlbXBsYXRlOiB0aGlzLnRlbXBsYXRlLCBpc1Zpc2libGU6IGZhbHNlIH07XG5cbiAgICAgICAgdGhpcy52aWV3ZXJDb21wb25lbnQuZXh0ZW5zaW9uVGVtcGxhdGVzLnB1c2godGhpcy50ZW1wbGF0ZU1vZGVsKTtcblxuICAgICAgICB0aGlzLnZpZXdlckNvbXBvbmVudC5leHRlbnNpb25DaGFuZ2VcbiAgICAgICAgICAgIC5waXBlKHRha2VVbnRpbCh0aGlzLm9uRGVzdHJveSQpKVxuICAgICAgICAgICAgLnN1YnNjcmliZShmaWxlRXh0ZW5zaW9uID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLnRlbXBsYXRlTW9kZWwuaXNWaXNpYmxlID0gdGhpcy5pc1Zpc2libGUoZmlsZUV4dGVuc2lvbik7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICBpZiAodGhpcy5zdXBwb3J0ZWRFeHRlbnNpb25zIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICAgICAgICAgIHRoaXMuc3VwcG9ydGVkRXh0ZW5zaW9ucy5mb3JFYWNoKChleHRlbnNpb24pID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLnZpZXdlckNvbXBvbmVudC5leHRlcm5hbEV4dGVuc2lvbnMucHVzaChleHRlbnNpb24pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBuZ09uRGVzdHJveSgpIHtcbiAgICAgICAgdGhpcy5vbkRlc3Ryb3kkLm5leHQodHJ1ZSk7XG4gICAgICAgIHRoaXMub25EZXN0cm95JC5jb21wbGV0ZSgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGNoZWNrIGlmIHRoZSBjdXJyZW50IGV4dGVuc2lvbiBpbiB0aGUgdmlld2VyIGlzIGNvbXBhdGlibGUgd2l0aCB0aGlzIGV4dGVuc2lvbiBjaGVja2luZyBhZ2FpbnN0IHN1cHBvcnRlZEV4dGVuc2lvbnNcbiAgICAgKi9cbiAgICBpc1Zpc2libGUoZmlsZUV4dGVuc2lvbik6IGJvb2xlYW4ge1xuICAgICAgICBsZXQgc3VwcG9ydGVkRXh0ZW5zaW9uOiBzdHJpbmc7XG5cbiAgICAgICAgaWYgKHRoaXMuc3VwcG9ydGVkRXh0ZW5zaW9ucyAmJiAodGhpcy5zdXBwb3J0ZWRFeHRlbnNpb25zIGluc3RhbmNlb2YgQXJyYXkpKSB7XG4gICAgICAgICAgICBzdXBwb3J0ZWRFeHRlbnNpb24gPSB0aGlzLnN1cHBvcnRlZEV4dGVuc2lvbnMuZmluZCgoZXh0ZW5zaW9uKSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGV4dGVuc2lvbi50b0xvd2VyQ2FzZSgpID09PSBmaWxlRXh0ZW5zaW9uO1xuXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAhIXN1cHBvcnRlZEV4dGVuc2lvbjtcbiAgICB9XG5cbn1cbiJdfQ==