import { __awaiter } from "tslib";
import { Injectable } from '@angular/core';
import { ContentApi, RenditionsApi, VersionsApi } from '@alfresco/js-api';
import { AlfrescoApiService } from '../../services/alfresco-api.service';
import { LogService } from '../../services/log.service';
import { Subject } from 'rxjs';
import { TranslationService } from '../../services/translation.service';
import * as i0 from "@angular/core";
import * as i1 from "../../services/alfresco-api.service";
import * as i2 from "../../services/log.service";
import * as i3 from "../../services/translation.service";
export class ViewUtilService {
    constructor(apiService, logService, translateService) {
        this.apiService = apiService;
        this.logService = logService;
        this.translateService = translateService;
        this.maxRetries = 5;
        this.mimeTypes = {
            text: ['text/plain', 'text/csv', 'text/xml', 'text/html', 'application/x-javascript'],
            pdf: ['application/pdf'],
            image: ['image/png', 'image/jpeg', 'image/gif', 'image/bmp', 'image/svg+xml'],
            media: ['video/mp4', 'video/webm', 'video/ogg', 'audio/mpeg', 'audio/ogg', 'audio/wav']
        };
        this.TRY_TIMEOUT = 10000;
        this.viewerTypeChange = new Subject();
        this.urlFileContentChange = new Subject();
    }
    get renditionsApi() {
        var _a;
        this._renditionsApi = (_a = this._renditionsApi) !== null && _a !== void 0 ? _a : new RenditionsApi(this.apiService.getInstance());
        return this._renditionsApi;
    }
    get contentApi() {
        var _a;
        this._contentApi = (_a = this._contentApi) !== null && _a !== void 0 ? _a : new ContentApi(this.apiService.getInstance());
        return this._contentApi;
    }
    get versionsApi() {
        var _a;
        this._versionsApi = (_a = this._versionsApi) !== null && _a !== void 0 ? _a : new VersionsApi(this.apiService.getInstance());
        return this._versionsApi;
    }
    printFile(url, type) {
        const pwa = window.open(url, ViewUtilService.TARGET);
        if (pwa) {
            if (type === ViewUtilService.ContentGroup.IMAGE) {
                pwa.onfocus = () => {
                    setTimeout(() => {
                        pwa.close();
                    }, 500);
                };
            }
            pwa.onload = () => {
                pwa.print();
            };
        }
    }
    printFileGeneric(objectId, mimeType) {
        const nodeId = objectId;
        const type = this.getViewerTypeByMimeType(mimeType);
        this.getRendition(nodeId, ViewUtilService.ContentGroup.PDF)
            .then((value) => {
            const url = this.getRenditionUrl(nodeId, type, (!!value));
            const printType = (type === ViewUtilService.ContentGroup.PDF
                || type === ViewUtilService.ContentGroup.TEXT)
                ? ViewUtilService.ContentGroup.PDF : type;
            this.printFile(url, printType);
        })
            .catch((err) => {
            this.logService.error('Error with Printing');
            this.logService.error(err);
        });
    }
    getRenditionUrl(nodeId, type, renditionExists) {
        return (renditionExists && type !== ViewUtilService.ContentGroup.IMAGE) ?
            this.contentApi.getRenditionUrl(nodeId, ViewUtilService.ContentGroup.PDF) :
            this.contentApi.getContentUrl(nodeId, false);
    }
    waitRendition(nodeId, renditionId, retries) {
        return __awaiter(this, void 0, void 0, function* () {
            const rendition = yield this.renditionsApi.getRendition(nodeId, renditionId);
            if (this.maxRetries < retries) {
                const status = rendition.entry.status.toString();
                if (status === 'CREATED') {
                    return rendition;
                }
                else {
                    retries += 1;
                    yield this.wait(1000);
                    return this.waitRendition(nodeId, renditionId, retries);
                }
            }
            return Promise.resolve(null);
        });
    }
    getViewerTypeByMimeType(mimeType) {
        if (mimeType) {
            mimeType = mimeType.toLowerCase();
            const editorTypes = Object.keys(this.mimeTypes);
            for (const type of editorTypes) {
                if (this.mimeTypes[type].indexOf(mimeType) >= 0) {
                    return type;
                }
            }
        }
        return 'unknown';
    }
    wait(ms) {
        return new Promise((resolve) => setTimeout(resolve, ms));
    }
    getRendition(nodeId, renditionId) {
        return __awaiter(this, void 0, void 0, function* () {
            const renditionPaging = yield this.renditionsApi.listRenditions(nodeId);
            let rendition = renditionPaging.list.entries.find((renditionEntry) => renditionEntry.entry.id.toLowerCase() === renditionId);
            if (rendition) {
                const status = rendition.entry.status.toString();
                if (status === 'NOT_CREATED') {
                    try {
                        yield this.renditionsApi.createRendition(nodeId, { id: renditionId });
                        rendition = yield this.waitRendition(nodeId, renditionId, 0);
                    }
                    catch (err) {
                        this.logService.error(err);
                    }
                }
            }
            return new Promise((resolve) => resolve(rendition));
        });
    }
    displayNodeRendition(nodeId, versionId) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const rendition = versionId ? yield this.resolveNodeRendition(nodeId, 'pdf', versionId) :
                    yield this.resolveNodeRendition(nodeId, 'pdf');
                if (rendition) {
                    const renditionId = rendition.entry.id;
                    if (renditionId === 'pdf') {
                        this.viewerTypeChange.next('pdf');
                    }
                    else if (renditionId === 'imgpreview') {
                        this.viewerTypeChange.next('image');
                    }
                    const urlFileContent = versionId ? this.contentApi.getVersionRenditionUrl(nodeId, versionId, renditionId) :
                        this.contentApi.getRenditionUrl(nodeId, renditionId);
                    this.urlFileContentChange.next(urlFileContent);
                }
            }
            catch (err) {
                this.logService.error(err);
            }
        });
    }
    resolveNodeRendition(nodeId, renditionId, versionId) {
        return __awaiter(this, void 0, void 0, function* () {
            renditionId = renditionId.toLowerCase();
            const supportedRendition = versionId ? yield this.versionsApi.listVersionRenditions(nodeId, versionId) :
                yield this.renditionsApi.listRenditions(nodeId);
            let rendition = supportedRendition.list.entries.find((renditionEntry) => renditionEntry.entry.id.toLowerCase() === renditionId);
            if (!rendition) {
                renditionId = 'imgpreview';
                rendition = supportedRendition.list.entries.find((renditionEntry) => renditionEntry.entry.id.toLowerCase() === renditionId);
            }
            if (rendition) {
                const status = rendition.entry.status.toString();
                if (status === 'NOT_CREATED') {
                    try {
                        if (versionId) {
                            yield this.versionsApi.createVersionRendition(nodeId, versionId, { id: renditionId }).then(() => {
                                this.viewerTypeChange.next('in_creation');
                            });
                        }
                        else {
                            yield this.renditionsApi.createRendition(nodeId, { id: renditionId }).then(() => {
                                this.viewerTypeChange.next('in_creation');
                            });
                        }
                        try {
                            rendition = versionId ? yield this.waitNodeRendition(nodeId, renditionId, versionId) : yield this.waitNodeRendition(nodeId, renditionId);
                        }
                        catch (e) {
                            this.viewerTypeChange.next('error_in_creation');
                            rendition = null;
                        }
                    }
                    catch (err) {
                        this.logService.error(err);
                    }
                }
            }
            return rendition;
        });
    }
    waitNodeRendition(nodeId, renditionId, versionId) {
        return __awaiter(this, void 0, void 0, function* () {
            let currentRetry = 0;
            return new Promise((resolve, reject) => {
                const intervalId = setInterval(() => {
                    currentRetry++;
                    if (this.maxRetries >= currentRetry) {
                        if (versionId) {
                            this.versionsApi.getVersionRendition(nodeId, versionId, renditionId).then((rendition) => {
                                const status = rendition.entry.status.toString();
                                if (status === 'CREATED') {
                                    this.handleNodeRendition(nodeId, renditionId, versionId);
                                    clearInterval(intervalId);
                                    return resolve(rendition);
                                }
                            }, () => {
                                return reject();
                            });
                        }
                        else {
                            this.renditionsApi.getRendition(nodeId, renditionId).then((rendition) => {
                                const status = rendition.entry.status.toString();
                                if (status === 'CREATED') {
                                    this.handleNodeRendition(nodeId, renditionId);
                                    clearInterval(intervalId);
                                    return resolve(rendition);
                                }
                            }, () => {
                                return reject();
                            });
                        }
                    }
                    else {
                        clearInterval(intervalId);
                        return reject();
                    }
                }, this.TRY_TIMEOUT);
            });
        });
    }
    handleNodeRendition(nodeId, renditionId, versionId) {
        return __awaiter(this, void 0, void 0, function* () {
            if (renditionId === 'pdf') {
                this.viewerTypeChange.next('pdf');
            }
            else if (renditionId === 'imgpreview') {
                this.viewerTypeChange.next('image');
            }
            const urlFileContent = versionId ? this.contentApi.getVersionRenditionUrl(nodeId, versionId, renditionId) :
                this.contentApi.getRenditionUrl(nodeId, renditionId);
            this.urlFileContentChange.next(urlFileContent);
        });
    }
    generateMediaTracks(nodeId) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.isRenditionAvailable(nodeId, ViewUtilService.SUBTITLES_RENDITION_NAME)
                .then((value) => {
                const tracks = [];
                if (value) {
                    tracks.push({
                        kind: 'subtitles',
                        src: this.contentApi.getRenditionUrl(nodeId, ViewUtilService.SUBTITLES_RENDITION_NAME),
                        label: this.translateService.instant('ADF_VIEWER.SUBTITLES')
                    });
                }
                return tracks;
            })
                .catch((err) => {
                this.logService.error('Error while retrieving ' + ViewUtilService.SUBTITLES_RENDITION_NAME + ' rendition');
                this.logService.error(err);
                return [];
            });
        });
    }
    isRenditionAvailable(nodeId, renditionId) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            const renditionPaging = yield this.renditionsApi.listRenditions(nodeId);
            const rendition = renditionPaging.list.entries.find((renditionEntry) => renditionEntry.entry.id.toLowerCase() === renditionId);
            return ((_b = (_a = rendition === null || rendition === void 0 ? void 0 : rendition.entry) === null || _a === void 0 ? void 0 : _a.status) === null || _b === void 0 ? void 0 : _b.toString()) === 'CREATED' || false;
        });
    }
}
ViewUtilService.TARGET = '_new';
ViewUtilService.ContentGroup = {
    IMAGE: 'image',
    MEDIA: 'media',
    PDF: 'pdf',
    TEXT: 'text'
};
ViewUtilService.SUBTITLES_RENDITION_NAME = 'webvtt';
ViewUtilService.ɵprov = i0.ɵɵdefineInjectable({ factory: function ViewUtilService_Factory() { return new ViewUtilService(i0.ɵɵinject(i1.AlfrescoApiService), i0.ɵɵinject(i2.LogService), i0.ɵɵinject(i3.TranslationService)); }, token: ViewUtilService, providedIn: "root" });
ViewUtilService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
ViewUtilService.ctorParameters = () => [
    { type: AlfrescoApiService },
    { type: LogService },
    { type: TranslationService }
];
//# sourceMappingURL=data:application/json;base64,