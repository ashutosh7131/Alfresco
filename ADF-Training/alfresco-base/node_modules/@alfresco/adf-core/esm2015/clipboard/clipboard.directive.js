/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Directive, Input, HostListener, Component, ViewContainerRef, ComponentFactoryResolver, ViewEncapsulation } from '@angular/core';
import { ClipboardService } from './clipboard.service';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './clipboard.service';
import * as ɵngcc2 from '@ngx-translate/core';
export class ClipboardDirective {
    constructor(clipboardService, viewContainerRef, resolver) {
        this.clipboardService = clipboardService;
        this.viewContainerRef = viewContainerRef;
        this.resolver = resolver;
    }
    handleClickEvent(event) {
        event.preventDefault();
        event.stopPropagation();
        this.copyToClipboard();
    }
    showTooltip() {
        if (this.placeholder) {
            const componentFactory = this.resolver.resolveComponentFactory(ClipboardComponent);
            const componentRef = this.viewContainerRef.createComponent(componentFactory).instance;
            componentRef.placeholder = this.placeholder;
        }
    }
    closeTooltip() {
        this.viewContainerRef.remove();
    }
    copyToClipboard() {
        const isValidTarget = this.clipboardService.isTargetValid(this.target);
        if (isValidTarget) {
            this.clipboardService.copyToClipboard(this.target, this.message);
        }
        else {
            this.copyContentToClipboard(this.viewContainerRef.element.nativeElement.innerHTML);
        }
    }
    copyContentToClipboard(content) {
        this.clipboardService.copyContentToClipboard(content, this.message);
    }
}
ClipboardDirective.ɵfac = function ClipboardDirective_Factory(t) { return new (t || ClipboardDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ClipboardService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ComponentFactoryResolver)); };
ClipboardDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ClipboardDirective, selectors: [["", "adf-clipboard", ""]], hostBindings: function ClipboardDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function ClipboardDirective_click_HostBindingHandler($event) { return ctx.handleClickEvent($event); })("mouseenter", function ClipboardDirective_mouseenter_HostBindingHandler() { return ctx.showTooltip(); })("mouseleave", function ClipboardDirective_mouseleave_HostBindingHandler() { return ctx.closeTooltip(); });
    } }, inputs: { placeholder: ["adf-clipboard", "placeholder"], target: "target", message: ["clipboard-notification", "message"] }, exportAs: ["adfClipboard"] });
ClipboardDirective.ctorParameters = () => [
    { type: ClipboardService },
    { type: ViewContainerRef },
    { type: ComponentFactoryResolver }
];
ClipboardDirective.propDecorators = {
    placeholder: [{ type: Input, args: ['adf-clipboard',] }],
    target: [{ type: Input }],
    message: [{ type: Input, args: ['clipboard-notification',] }],
    handleClickEvent: [{ type: HostListener, args: ['click', ['$event'],] }],
    showTooltip: [{ type: HostListener, args: ['mouseenter',] }],
    closeTooltip: [{ type: HostListener, args: ['mouseleave',] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ClipboardDirective, [{
        type: Directive,
        args: [{
                selector: '[adf-clipboard]',
                exportAs: 'adfClipboard'
            }]
    }], function () { return [{ type: ɵngcc1.ClipboardService }, { type: ɵngcc0.ViewContainerRef }, { type: ɵngcc0.ComponentFactoryResolver }]; }, { handleClickEvent: [{
            type: HostListener,
            args: ['click', ['$event']]
        }], showTooltip: [{
            type: HostListener,
            args: ['mouseenter']
        }], closeTooltip: [{
            type: HostListener,
            args: ['mouseleave']
        }], placeholder: [{
            type: Input,
            args: ['adf-clipboard']
        }], target: [{
            type: Input
        }], message: [{
            type: Input,
            args: ['clipboard-notification']
        }] }); })();
export class ClipboardComponent {
    ngOnInit() {
        this.placeholder = this.placeholder || 'CLIPBOARD.CLICK_TO_COPY';
    }
}
ClipboardComponent.ɵfac = function ClipboardComponent_Factory(t) { return new (t || ClipboardComponent)(); };
ClipboardComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ClipboardComponent, selectors: [["adf-copy-content-tooltip"]], decls: 3, vars: 3, consts: [[1, "adf-copy-tooltip"]], template: function ClipboardComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "span", 0);
        ɵngcc0.ɵɵtext(1);
        ɵngcc0.ɵɵpipe(2, "translate");
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate1("", ɵngcc0.ɵɵpipeBind1(2, 1, ctx.placeholder), " ");
    } }, pipes: [ɵngcc2.TranslatePipe], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ClipboardComponent, [{
        type: Component,
        args: [{
                selector: 'adf-copy-content-tooltip',
                template: `<span class='adf-copy-tooltip'>{{ placeholder | translate }} </span>`,
                encapsulation: ViewEncapsulation.None
            }]
    }], null, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xpcGJvYXJkLmRpcmVjdGl2ZS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vaG9tZS90cmF2aXMvYnVpbGQvQWxmcmVzY28vYWxmcmVzY28tbmcyLWNvbXBvbmVudHMvbGliL2NvcmUvY2xpcGJvYXJkL2NsaXBib2FyZC5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUVILE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLFlBQVksRUFBRSxTQUFTLEVBQUUsZ0JBQWdCLEVBQUUsd0JBQXdCLEVBQUUsaUJBQWlCLEVBQVUsTUFBTSxlQUFlLENBQUM7QUFDakosT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0scUJBQXFCLENBQUM7Ozs7QUFNdkQsTUFBTSxPQUFPLGtCQUFrQjtBQUMvQixJQWFJLFlBQW9CLGdCQUFrQyxFQUNuQyxnQkFBa0MsRUFDakMsUUFBa0M7QUFBSSxRQUZ0QyxxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQWtCO0FBQUMsUUFDcEMscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFrQjtBQUFDLFFBQ2xDLGFBQVEsR0FBUixRQUFRLENBQTBCO0FBQUMsSUFBRSxDQUFDO0FBQzlELElBRUksZ0JBQWdCLENBQUMsS0FBaUI7QUFDdEMsUUFBUSxLQUFLLENBQUMsY0FBYyxFQUFFLENBQUM7QUFDL0IsUUFBUSxLQUFLLENBQUMsZUFBZSxFQUFFLENBQUM7QUFDaEMsUUFBUSxJQUFJLENBQUMsZUFBZSxFQUFFLENBQUM7QUFDL0IsSUFBSSxDQUFDO0FBQ0wsSUFFSSxXQUFXO0FBQ2YsUUFBUSxJQUFJLElBQUksQ0FBQyxXQUFXLEVBQUU7QUFDOUIsWUFBWSxNQUFNLGdCQUFnQixHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsdUJBQXVCLENBQUMsa0JBQWtCLENBQUMsQ0FBQztBQUMvRixZQUFZLE1BQU0sWUFBWSxHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxlQUFlLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxRQUFRLENBQUM7QUFDbEcsWUFBWSxZQUFZLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUM7QUFDeEQsU0FBUztBQUNULElBQUksQ0FBQztBQUNMLElBRUksWUFBWTtBQUNoQixRQUFRLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLEVBQUUsQ0FBQztBQUN2QyxJQUFJLENBQUM7QUFDTCxJQUNZLGVBQWU7QUFDM0IsUUFBUSxNQUFNLGFBQWEsR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUMvRSxRQUNRLElBQUksYUFBYSxFQUFFO0FBQzNCLFlBQVksSUFBSSxDQUFDLGdCQUFnQixDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUM3RSxTQUFTO0FBQUMsYUFBSztBQUNmLFlBQVksSUFBSSxDQUFDLHNCQUFzQixDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQy9GLFNBQVM7QUFDVCxJQUFJLENBQUM7QUFDTCxJQUNZLHNCQUFzQixDQUFDLE9BQU87QUFDMUMsUUFBUSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsc0JBQXNCLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUM1RSxJQUFJLENBQUM7QUFDTDs4Q0F4REMsU0FBUyxTQUFDLGtCQUNQLFFBQVEsRUFBRSxpQkFBaUIsa0JBQzNCLFFBQVEsRUFBRSxjQUFjLGNBQzNCOzs7b0tBQ0k7QUFBQztBQUNVLFlBUFAsZ0JBQWdCO0FBQUksWUFEdUIsZ0JBQWdCO0FBQUksWUFBRix3QkFBd0I7QUFBRztBQUFHO0FBQXNDLDBCQVVySSxLQUFLLFNBQUMsZUFBZTtBQUNyQixxQkFHQSxLQUFLO0FBQ1Isc0JBSUcsS0FBSyxTQUFDLHdCQUF3QjtBQUFPLCtCQU1yQyxZQUFZLFNBQUMsT0FBTyxFQUFFLENBQUMsUUFBUSxDQUFDO0FBQ2hDLDBCQU1BLFlBQVksU0FBQyxZQUFZO0FBQ3pCLDJCQVFBLFlBQVksU0FBQyxZQUFZO0FBQzFCOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7b0JBQUU7QUF3Qk4sTUFBTSxPQUFPLGtCQUFrQjtBQUFHLElBRzlCLFFBQVE7QUFDWixRQUFRLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLFdBQVcsSUFBSSx5QkFBeUIsQ0FBQztBQUN6RSxJQUFJLENBQUM7QUFDTDs4Q0FYQyxTQUFTLFNBQUMsa0JBQ1AsUUFBUSxFQUFFO1FBQTBCLGtCQUNwQyxRQUFRLEVBQUUsc0VBQXNFLGtCQUNoRixhQUFhLEVBQUUsaUJBQWlCLENBQUMsSUFBSSxjQUN4Qzs7Ozs7Ozs7Ozs7Ozs7OzswQkFDSTtBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgRGlyZWN0aXZlLCBJbnB1dCwgSG9zdExpc3RlbmVyLCBDb21wb25lbnQsIFZpZXdDb250YWluZXJSZWYsIENvbXBvbmVudEZhY3RvcnlSZXNvbHZlciwgVmlld0VuY2Fwc3VsYXRpb24sIE9uSW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ2xpcGJvYXJkU2VydmljZSB9IGZyb20gJy4vY2xpcGJvYXJkLnNlcnZpY2UnO1xuXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ1thZGYtY2xpcGJvYXJkXScsXG4gICAgZXhwb3J0QXM6ICdhZGZDbGlwYm9hcmQnXG59KVxuZXhwb3J0IGNsYXNzIENsaXBib2FyZERpcmVjdGl2ZSB7XG4gICAgLyoqIFRyYW5zbGF0aW9uIGtleSBvciBtZXNzYWdlIGZvciB0aGUgdG9vbHRpcC4gKi9cbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8taW5wdXQtcmVuYW1lXG4gICAgQElucHV0KCdhZGYtY2xpcGJvYXJkJylcbiAgICBwbGFjZWhvbGRlcjogc3RyaW5nO1xuXG4gICAgLyoqIFJlZmVyZW5jZSB0byB0aGUgSFRNTCBlbGVtZW50IGNvbnRhaW5pbmcgdGhlIHRleHQgdG8gY29weS4gKi9cbiAgICBASW5wdXQoKVxuICAgIHRhcmdldDogSFRNTElucHV0RWxlbWVudCB8IEhUTUxUZXh0QXJlYUVsZW1lbnQ7XG5cbiAgICAvKiogVHJhbnNsYXRpb24ga2V5IG9yIG1lc3NhZ2UgZm9yIHNuYWNrYmFyIG5vdGlmaWNhdGlvbi4gKi9cbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8taW5wdXQtcmVuYW1lXG4gICAgQElucHV0KCdjbGlwYm9hcmQtbm90aWZpY2F0aW9uJykgbWVzc2FnZTogc3RyaW5nO1xuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBjbGlwYm9hcmRTZXJ2aWNlOiBDbGlwYm9hcmRTZXJ2aWNlLFxuICAgICAgICAgICAgICAgIHB1YmxpYyB2aWV3Q29udGFpbmVyUmVmOiBWaWV3Q29udGFpbmVyUmVmLFxuICAgICAgICAgICAgICAgIHByaXZhdGUgcmVzb2x2ZXI6IENvbXBvbmVudEZhY3RvcnlSZXNvbHZlcikge31cblxuICAgIEBIb3N0TGlzdGVuZXIoJ2NsaWNrJywgWyckZXZlbnQnXSlcbiAgICBoYW5kbGVDbGlja0V2ZW50KGV2ZW50OiBNb3VzZUV2ZW50KSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICB0aGlzLmNvcHlUb0NsaXBib2FyZCgpO1xuICAgIH1cblxuICAgIEBIb3N0TGlzdGVuZXIoJ21vdXNlZW50ZXInKVxuICAgIHNob3dUb29sdGlwKCkge1xuICAgICAgICBpZiAodGhpcy5wbGFjZWhvbGRlcikge1xuICAgICAgICAgICAgY29uc3QgY29tcG9uZW50RmFjdG9yeSA9IHRoaXMucmVzb2x2ZXIucmVzb2x2ZUNvbXBvbmVudEZhY3RvcnkoQ2xpcGJvYXJkQ29tcG9uZW50KTtcbiAgICAgICAgICAgIGNvbnN0IGNvbXBvbmVudFJlZiA9IHRoaXMudmlld0NvbnRhaW5lclJlZi5jcmVhdGVDb21wb25lbnQoY29tcG9uZW50RmFjdG9yeSkuaW5zdGFuY2U7XG4gICAgICAgICAgICBjb21wb25lbnRSZWYucGxhY2Vob2xkZXIgPSB0aGlzLnBsYWNlaG9sZGVyO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgQEhvc3RMaXN0ZW5lcignbW91c2VsZWF2ZScpXG4gICAgY2xvc2VUb29sdGlwKCkge1xuICAgICAgICB0aGlzLnZpZXdDb250YWluZXJSZWYucmVtb3ZlKCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBjb3B5VG9DbGlwYm9hcmQoKSB7XG4gICAgICAgIGNvbnN0IGlzVmFsaWRUYXJnZXQgPSB0aGlzLmNsaXBib2FyZFNlcnZpY2UuaXNUYXJnZXRWYWxpZCh0aGlzLnRhcmdldCk7XG5cbiAgICAgICAgaWYgKGlzVmFsaWRUYXJnZXQpIHtcbiAgICAgICAgICAgIHRoaXMuY2xpcGJvYXJkU2VydmljZS5jb3B5VG9DbGlwYm9hcmQodGhpcy50YXJnZXQsIHRoaXMubWVzc2FnZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmNvcHlDb250ZW50VG9DbGlwYm9hcmQodGhpcy52aWV3Q29udGFpbmVyUmVmLmVsZW1lbnQubmF0aXZlRWxlbWVudC5pbm5lckhUTUwpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBjb3B5Q29udGVudFRvQ2xpcGJvYXJkKGNvbnRlbnQpIHtcbiAgICAgICAgdGhpcy5jbGlwYm9hcmRTZXJ2aWNlLmNvcHlDb250ZW50VG9DbGlwYm9hcmQoY29udGVudCwgdGhpcy5tZXNzYWdlKTtcbiAgICB9XG59XG5cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAnYWRmLWNvcHktY29udGVudC10b29sdGlwJyxcbiAgICB0ZW1wbGF0ZTogYDxzcGFuIGNsYXNzPSdhZGYtY29weS10b29sdGlwJz57eyBwbGFjZWhvbGRlciB8IHRyYW5zbGF0ZSB9fSA8L3NwYW4+YCxcbiAgICBlbmNhcHN1bGF0aW9uOiBWaWV3RW5jYXBzdWxhdGlvbi5Ob25lXG59KVxuZXhwb3J0IGNsYXNzIENsaXBib2FyZENvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gICAgcGxhY2Vob2xkZXI6IHN0cmluZztcblxuICAgIG5nT25Jbml0KCkge1xuICAgICAgICB0aGlzLnBsYWNlaG9sZGVyID0gdGhpcy5wbGFjZWhvbGRlciB8fCAnQ0xJUEJPQVJELkNMSUNLX1RPX0NPUFknO1xuICAgIH1cbn1cbiJdfQ==