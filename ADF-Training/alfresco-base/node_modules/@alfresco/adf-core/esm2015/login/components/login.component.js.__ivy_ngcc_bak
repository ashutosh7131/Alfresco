/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, EventEmitter, Input, Output, ViewEncapsulation } from '@angular/core';
import { FormBuilder, Validators } from '@angular/forms';
import { Router, ActivatedRoute } from '@angular/router';
import { AuthenticationService } from '../../services/authentication.service';
import { LogService } from '../../services/log.service';
import { TranslationService } from '../../services/translation.service';
import { UserPreferencesService } from '../../services/user-preferences.service';
import { AlfrescoApiService } from '../../services/alfresco-api.service';
import { LoginErrorEvent } from '../models/login-error.event';
import { LoginSubmitEvent } from '../models/login-submit.event';
import { LoginSuccessEvent } from '../models/login-success.event';
import { AppConfigService, AppConfigValues } from '../../app-config/app-config.service';
import { DomSanitizer } from '@angular/platform-browser';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
var LoginSteps;
(function (LoginSteps) {
    LoginSteps[LoginSteps["Landing"] = 0] = "Landing";
    LoginSteps[LoginSteps["Checking"] = 1] = "Checking";
    LoginSteps[LoginSteps["Welcome"] = 2] = "Welcome";
})(LoginSteps || (LoginSteps = {}));
export class LoginComponent {
    constructor(_fb, authService, translateService, logService, router, appConfig, userPreferences, route, sanitizer, alfrescoApiService) {
        this._fb = _fb;
        this.authService = authService;
        this.translateService = translateService;
        this.logService = logService;
        this.router = router;
        this.appConfig = appConfig;
        this.userPreferences = userPreferences;
        this.route = route;
        this.sanitizer = sanitizer;
        this.alfrescoApiService = alfrescoApiService;
        this.isPasswordShow = false;
        this.showRememberMe = true;
        this.showLoginActions = true;
        this.needHelpLink = '';
        this.registerLink = '';
        this.logoImageUrl = './assets/images/alfresco-logo.svg';
        this.backgroundImageUrl = './assets/images/background.svg';
        this.copyrightText = '\u00A9 2016 Alfresco Software, Inc. All Rights Reserved.';
        this.successRoute = null;
        this.success = new EventEmitter();
        this.error = new EventEmitter();
        this.executeSubmit = new EventEmitter();
        this.implicitFlow = false;
        this.isError = false;
        this.actualLoginStep = LoginSteps.Landing;
        this.LoginSteps = LoginSteps;
        this.rememberMe = true;
        this.minLength = 2;
        this.onDestroy$ = new Subject();
    }
    ngOnInit() {
        this.initFormError();
        this.initFormFieldsDefault();
        this.initFormFieldsMessages();
        this.successRoute = this.appConfig.get('successRoute', this.successRoute);
        if (this.authService.isLoggedIn()) {
            this.router.navigate([this.successRoute]);
        }
        else {
            if (this.authService.isOauth()) {
                const oauth = this.appConfig.get(AppConfigValues.OAUTHCONFIG, null);
                if (oauth && oauth.silentLogin) {
                    this.redirectToImplicitLogin();
                }
                else if (oauth && oauth.implicitFlow) {
                    this.implicitFlow = true;
                }
            }
            this.route.queryParams.subscribe((params) => {
                const url = params['redirectUrl'];
                const provider = this.appConfig.get(AppConfigValues.PROVIDERS);
                this.authService.setRedirect({ provider, url });
            });
        }
        if (this.fieldsValidation) {
            this.form = this._fb.group(this.fieldsValidation);
        }
        this.form.valueChanges
            .pipe(takeUntil(this.onDestroy$))
            .subscribe(data => this.onValueChanged(data));
    }
    ngOnDestroy() {
        this.onDestroy$.next(true);
        this.onDestroy$.complete();
    }
    submit() {
        this.onSubmit(this.form.value);
    }
    redirectToImplicitLogin() {
        this.alfrescoApiService.getInstance().oauth2Auth.implicitLogin();
    }
    onSubmit(values) {
        this.disableError();
        const args = new LoginSubmitEvent({
            controls: { username: this.form.controls.username }
        });
        this.executeSubmit.emit(args);
        if (!args.defaultPrevented) {
            this.performLogin(values);
        }
    }
    implicitLogin() {
        if (this.authService.isLoggedIn()) {
            this.router.navigate([this.successRoute]);
        }
        this.authService.ssoImplicitLogin();
    }
    onValueChanged(data) {
        this.disableError();
        for (const field in this.formError) {
            if (field) {
                this.formError[field] = '';
                const hasError = (this.form.controls[field].errors && data[field] !== '') ||
                    (this.form.controls[field].dirty &&
                        !this.form.controls[field].valid);
                if (hasError) {
                    for (const key in this.form.controls[field].errors) {
                        if (key) {
                            const message = this._message[field][key];
                            if (message && message.value) {
                                const translated = this.translateService.instant(message.value, message.params);
                                this.formError[field] += translated;
                            }
                        }
                    }
                }
            }
        }
    }
    performLogin(values) {
        this.actualLoginStep = LoginSteps.Checking;
        this.authService
            .login(values.username, values.password, this.rememberMe)
            .subscribe((token) => {
            const redirectUrl = this.authService.getRedirect();
            this.actualLoginStep = LoginSteps.Welcome;
            this.userPreferences.setStoragePrefix(values.username);
            values.password = null;
            this.success.emit(new LoginSuccessEvent(token, values.username, null));
            if (redirectUrl) {
                this.authService.setRedirect(null);
                this.router.navigateByUrl(redirectUrl);
            }
            else if (this.successRoute) {
                this.router.navigate([this.successRoute]);
            }
        }, (err) => {
            this.actualLoginStep = LoginSteps.Landing;
            this.displayErrorMessage(err);
            this.isError = true;
            this.error.emit(new LoginErrorEvent(err));
        }, () => this.logService.info('Login done'));
    }
    displayErrorMessage(err) {
        if (err.error &&
            err.error.crossDomain &&
            err.error.message.indexOf('Access-Control-Allow-Origin') !== -1) {
            this.errorMsg = err.error.message;
        }
        else if (err.status === 403 &&
            err.message.indexOf('Invalid CSRF-token') !== -1) {
            this.errorMsg = 'LOGIN.MESSAGES.LOGIN-ERROR-CSRF';
        }
        else if (err.status === 403 &&
            err.message.indexOf('The system is currently in read-only mode') !==
                -1) {
            this.errorMsg = 'LOGIN.MESSAGES.LOGIN-ECM-LICENSE';
        }
        else {
            this.errorMsg = 'LOGIN.MESSAGES.LOGIN-ERROR-CREDENTIALS';
        }
    }
    addCustomFormError(field, msg) {
        this.formError[field] += msg;
    }
    addCustomValidationError(field, ruleId, msg, params) {
        this._message[field][ruleId] = {
            value: msg,
            params
        };
    }
    toggleShowPassword(event) {
        event.stopPropagation();
        this.isPasswordShow = !this.isPasswordShow;
    }
    isErrorStyle(field) {
        return !field.valid && field.dirty && !field.pristine;
    }
    trimUsername(event) {
        event.target.value = event.target.value.trim();
    }
    getBackgroundUrlImageUrl() {
        return this.sanitizer.bypassSecurityTrustStyle(`url(${this.backgroundImageUrl})`);
    }
    initFormError() {
        this.formError = {
            username: '',
            password: ''
        };
    }
    initFormFieldsMessages() {
        this._message = {
            username: {
                required: {
                    value: 'LOGIN.MESSAGES.USERNAME-REQUIRED'
                },
                minlength: {
                    value: 'LOGIN.MESSAGES.USERNAME-MIN',
                    params: {
                        minLength: this.minLength
                    }
                }
            },
            password: {
                required: {
                    value: 'LOGIN.MESSAGES.PASSWORD-REQUIRED'
                }
            }
        };
    }
    initFormFieldsDefault() {
        this.form = this._fb.group({
            username: ['', Validators.compose([Validators.required, Validators.minLength(this.minLength)])],
            password: ['', Validators.required]
        });
    }
    disableError() {
        this.isError = false;
        this.initFormError();
    }
}
LoginComponent.decorators = [
    { type: Component, args: [{
                selector: 'adf-login',
                template: "<div class=\"adf-login-content\" [style.background-image]=\"getBackgroundUrlImageUrl()\">\n    <div class=\"adf-ie11FixerParent\">\n        <div class=\"adf-ie11FixerChild\">\n\n            <mat-card class=\"adf-login-card-wide\">\n                <form id=\"adf-login-form\" [formGroup]=\"form\" (submit)=\"onSubmit(form.value)\" autocomplete=\"off\">\n                    <mat-card-header>\n                        <mat-card-title>\n                            <div class=\"adf-alfresco-logo\">\n                                <!--HEADER TEMPLATE-->\n                                <ng-template *ngIf=\"headerTemplate\"\n                                             ngFor [ngForOf]=\"[data]\"\n                                             [ngForTemplate]=\"headerTemplate\">\n                                </ng-template>\n                                <img *ngIf=\"!headerTemplate\" id=\"adf-login-img-logo\" class=\"adf-img-logo\" [src]=\"logoImageUrl\"\n                                     alt=\"{{'LOGIN.LOGO' | translate }}\">\n                            </div>\n                        </mat-card-title>\n                    </mat-card-header>\n\n                    <mat-card-content class=\"adf-login-controls\">\n\n                        <!--ERRORS AREA-->\n                        <div class=\"adf-error-container\">\n                            <div *ngIf=\"isError\" id=\"login-error\" data-automation-id=\"login-error\"\n                                 class=\"adf-error  adf-error-message\">\n                                <mat-icon class=\"adf-error-icon\">warning</mat-icon>\n                                <span class=\"adf-login-error-message\">{{errorMsg | translate }}</span>\n                            </div>\n                        </div>\n\n                        <div *ngIf=\"!implicitFlow\">\n\n                            <!--USERNAME FIELD-->\n                            <div class=\"adf-login__field\"\n                                 [ngClass]=\"{'adf-is-invalid': isErrorStyle(form.controls.username)}\">\n                                <mat-form-field class=\"adf-full-width\" floatPlaceholder=\"never\" color=\"primary\">\n                                    <input matInput placeholder=\"{{'LOGIN.LABEL.USERNAME' | translate }}\"\n                                           type=\"text\"\n                                           class=\"adf-full-width\"\n                                           formControlName=\"username\"\n                                           autocapitalize=\"none\"\n                                           id=\"username\"\n                                           data-automation-id=\"username\"\n                                           (blur)=\"trimUsername($event)\">\n                                </mat-form-field>\n\n                                <span class=\"adf-login-validation\" for=\"username\" *ngIf=\"formError['username']\">\n                                <span id=\"username-error\" class=\"adf-login-error\" data-automation-id=\"username-error\">{{formError['username'] | translate }}</span>\n                            </span>\n                            </div>\n\n                            <!--PASSWORD FIELD-->\n                            <div class=\"adf-login__field\">\n                                <mat-form-field class=\"adf-full-width\" floatPlaceholder=\"never\" color=\"primary\">\n                                    <input matInput placeholder=\"{{'LOGIN.LABEL.PASSWORD' | translate }}\"\n                                           [type]=\"isPasswordShow ? 'text' : 'password'\"\n                                           formControlName=\"password\"\n                                           id=\"password\"\n                                           data-automation-id=\"password\">\n                                        <button\n                                            matSuffix\n                                            mat-icon-button\n                                            type=\"button\"\n                                            [attr.aria-label]=\"(isPasswordShow ?\n                                                    'LOGIN.ARIA-LABEL.HIDE-PASSWORD':\n                                                    'LOGIN.ARIA-LABEL.SHOW-PASSWORD'\n                                                ) | translate\"\n                                            (click)=\"toggleShowPassword($event)\"\n                                            (keyup.enter)=\"toggleShowPassword($event)\"\n                                            [attr.data-automation-id]=\"isPasswordShow ? 'hide_password':'show_password'\">\n                                           <mat-icon class=\"adf-login-password-icon\">\n                                               {{ isPasswordShow ? 'visibility':'visibility_off' }}\n                                            </mat-icon>\n                                       </button>\n                                </mat-form-field>\n                                <span class=\"adf-login-validation\" for=\"password\" *ngIf=\"formError['password']\">\n                                <span id=\"password-required\" class=\"adf-login-error\"\n                                      data-automation-id=\"password-required\">{{formError['password'] | translate }}</span>\n                            </span>\n                            </div>\n\n                            <!--CUSTOM CONTENT-->\n                            <ng-content></ng-content>\n\n                            <br>\n                            <button type=\"submit\" id=\"login-button\"\n                                    class=\"adf-login-button\"\n                                    mat-raised-button color=\"accent\"\n                                    [class.adf-isChecking]=\"actualLoginStep === LoginSteps.Checking\"\n                                    [class.adf-isWelcome]=\"actualLoginStep === LoginSteps.Welcome\"\n                                    data-automation-id=\"login-button\" [disabled]=\"!form.valid\"\n                                    [attr.aria-label]=\"'LOGIN.BUTTON.LOGIN' | translate\">\n\n                                <span *ngIf=\"actualLoginStep === LoginSteps.Landing\" class=\"adf-login-button-label\">{{ 'LOGIN.BUTTON.LOGIN' | translate }}</span>\n\n                                <div *ngIf=\"actualLoginStep === LoginSteps.Checking\"\n                                     class=\"adf-interactive-login-label\">\n                                    <span\n                                        class=\"adf-login-button-label\">{{ 'LOGIN.BUTTON.CHECKING' | translate }}</span>\n                                    <div class=\"adf-login-spinner-container\">\n                                        <mat-spinner id=\"checking-spinner\" class=\"adf-login-checking-spinner\"\n                                                     [diameter]=\"25\"></mat-spinner>\n                                    </div>\n                                </div>\n\n\n                                <div *ngIf=\"actualLoginStep === LoginSteps.Welcome\" class=\"adf-interactive-login-label\">\n                                    <span class=\"adf-login-button-label\">{{ 'LOGIN.BUTTON.WELCOME' | translate }}</span>\n                                    <mat-icon class=\"adf-welcome-icon\">done</mat-icon>\n                                </div>\n\n                            </button>\n                            <div *ngIf=\"showRememberMe\" class=\"adf-login__remember-me\">\n                                <mat-checkbox id=\"adf-login-remember\" color=\"primary\" class=\"adf-login-remember-me\"\n                                              [checked]=\"rememberMe\"\n                                              (change)=\"rememberMe = !rememberMe\">{{ 'LOGIN.LABEL.REMEMBER' | translate }}\n                                </mat-checkbox>\n                            </div>\n                        </div>\n\n                        <div *ngIf=\"implicitFlow\">\n                            <button type=\"button\" (click)=\"implicitLogin()\" id=\"login-button-sso\"\n                                    [attr.aria-label]=\"'LOGIN.BUTTON.SSO' | translate\"\n                                    class=\"adf-login-button\"\n                                    mat-raised-button color=\"primary\"\n                                    data-automation-id=\"login-button-sso\">\n                                <span  class=\"adf-login-button-label\">{{ 'LOGIN.BUTTON.SSO' | translate }}</span>\n                            </button>\n                        </div>\n\n                    </mat-card-content>\n\n                    <mat-card-actions *ngIf=\"footerTemplate || showLoginActions\">\n\n                        <div class=\"adf-login-action-container\">\n                            <!--FOOTER TEMPLATE-->\n                            <ng-template *ngIf=\"footerTemplate\"\n                                         ngFor [ngForOf]=\"[data]\"\n                                         [ngForTemplate]=\"footerTemplate\">\n                            </ng-template>\n                            <div class=\"adf-login-action\" *ngIf=\"!footerTemplate && showLoginActions\">\n                                <div id=\"adf-login-action-left\" class=\"adf-login-action-left\">\n                                    <a href=\"{{needHelpLink}}\">{{'LOGIN.ACTION.HELP' | translate }}</a>\n                                </div>\n                                <div id=\"adf-login-action-right\" class=\"adf-login-action-right\">\n                                    <a href=\"{{registerLink}}\">{{'LOGIN.ACTION.REGISTER' | translate }}</a>\n                                </div>\n                            </div>\n                        </div>\n                    </mat-card-actions>\n\n                </form>\n            </mat-card>\n\n            <div class=\"adf-copyright\" data-automation-id=\"login-copyright\">\n                {{ copyrightText }}\n            </div>\n\n        </div>\n    </div>\n</div>\n",
                encapsulation: ViewEncapsulation.None,
                host: { class: 'adf-login' },
                styles: [".adf-login{display:flex;flex:1;flex-direction:column;height:100%;min-height:0;overflow:hidden}.adf-login-content{background-position:50%;background-size:cover;display:flex;flex-direction:column;justify-content:center;min-height:100%;min-width:320px}@media (-ms-high-contrast:active),(-ms-high-contrast:none){.adf-login-content{display:table;height:100%;width:100%}}.adf-login-content .adf-ie11FixerParent{margin-top:16px;min-width:320px}@media (-ms-high-contrast:active),(-ms-high-contrast:none){.adf-login-content .adf-ie11FixerParent{display:table-cell;padding-top:16px;vertical-align:middle;width:100%}}.adf-login-content .adf-ie11FixerChild{align-items:center;display:flex;flex-direction:column;justify-content:center;width:100%}.adf-login-content .adf-show{display:block!important}.adf-login-content .adf-hide{display:none!important}.adf-login-content .adf-icon-inline{display:block;left:82%;overflow:hidden;position:absolute;top:31%;width:30px}.adf-login-content .adf-login-card-wide{background-color:var(--theme-dialog-bg-color);border-radius:8px;box-shadow:0 2px 2px 0 rgba(0,0,0,.24),0 0 2px 0 rgba(0,0,0,.12);box-sizing:border-box;min-width:320px;padding:21px 64px 34px;width:450px}@media (max-width:482px){.adf-login-content .adf-login-card-wide{width:calc(100% - 32px)}}.adf-login-content .adf-error-container{height:45px}.adf-login-content .adf-error-message{box-orient:horizontal;color:var(--theme-warn-color);display:flex;flex-direction:row;font-size:13px;justify-content:flex-start;margin-bottom:4px;padding:0}.adf-login-content .adf-error-message .adf-error-icon{margin-right:10px}.adf-login-content .mat-card-header-text{margin:0 auto}.adf-login-content .adf-img-logo{display:block;margin-left:auto;margin-right:auto}.adf-login-content .adf-alfresco-logo{padding:24px 16px}.adf-login-content .adf-alfresco-logo img{max-height:58px}.adf-login-content .adf-login-button{box-shadow:none;height:36px;line-height:38px;width:100%}.adf-login-content .adf-login-button-label{color:var(--theme-accent-color-default-contrast)}.adf-login-content .adf-login-button.adf-isChecking{background-color:#e0f7fa}.adf-login-content .adf-login-button.adf-isChecking .adf-login-button-label{color:var(--theme-primary-color)}.adf-login-content .adf-login-button.adf-isWelcome{background-color:var(--theme-primary-color);color:var(--theme-primary-color-default-contrast)}.adf-login-content .adf-login-button.adf-isWelcome .adf-welcome-icon{margin:5px 0 0 10px}.adf-login-content .adf-interactive-login-label{box-orient:horizontal;box-pack:center;display:flex;flex-direction:row;justify-content:center}.adf-login-content .adf-login-spinner-container{margin-left:15px;margin-top:5px}.adf-login-content .adf-login-checking-spinner>svg>circle{stroke-width:16%!important}.adf-login-content .adf-login-controls{overflow:visible;padding:0 0 26px;width:100%}.adf-login-content .adf-login-action{box-orient:horizontal;box-pack:space-between;display:flex;flex-direction:row;justify-content:space-between;margin-top:20px}.adf-login-content .adf-login-action-left a,.adf-login-content .adf-login-action-right a{text-decoration:none}.adf-login-content .adf-is-active{background-color:transparent;color:var(--theme-warn-color);font-size:12px;font-weight:400;line-height:1.33}.adf-login-content .adf-copyright{font-size:12px;min-width:320px;opacity:.54;padding:16px 0;text-align:center}.adf-login-content .mat-form-field .adf-login-password-icon.mat-icon{color:var(--theme-text-fg-color)}.adf-login-content .adf-login__field .mat-form-field-wrapper{font-size:16px;margin:1em 0 0}.adf-login-content .adf-login__field input:-webkit-autofill{-webkit-box-shadow:0 0 0 1000px var(--theme-dialog-bg-color) inset;-webkit-text-fill-color:var(--theme-text-fg-color)!important}.adf-login-content .adf-login-validation{background-color:transparent;color:var(--theme-warn-color);font-size:12px}.adf-login-content .adf-login-error{color:var(--theme-warn-color);display:block;font-size:12px;margin-top:-12px;position:absolute}.adf-login-content .adf-full-width{width:100%}.adf-login-content .adf-login__remember-me{padding-top:22px}.adf-login-content .adf-login__remember-me .mat-checkbox-label{opacity:.87}.adf-login-content .adf-login__field{display:block;margin-left:auto;margin-right:auto;padding-bottom:18px}.adf-login-content .adf-login-remember-me{color:var(--theme-text-fg-color)!important}.adf-login-content .adf-login-action-container{border-top:1px solid rgba(0,0,0,.1);margin-top:23px}"]
            },] }
];
LoginComponent.ctorParameters = () => [
    { type: FormBuilder },
    { type: AuthenticationService },
    { type: TranslationService },
    { type: LogService },
    { type: Router },
    { type: AppConfigService },
    { type: UserPreferencesService },
    { type: ActivatedRoute },
    { type: DomSanitizer },
    { type: AlfrescoApiService }
];
LoginComponent.propDecorators = {
    showRememberMe: [{ type: Input }],
    showLoginActions: [{ type: Input }],
    needHelpLink: [{ type: Input }],
    registerLink: [{ type: Input }],
    logoImageUrl: [{ type: Input }],
    backgroundImageUrl: [{ type: Input }],
    copyrightText: [{ type: Input }],
    fieldsValidation: [{ type: Input }],
    successRoute: [{ type: Input }],
    success: [{ type: Output }],
    error: [{ type: Output }],
    executeSubmit: [{ type: Output }]
};
//# sourceMappingURL=data:application/json;base64,