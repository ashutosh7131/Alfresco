import { __awaiter } from "tslib";
import { Injectable } from '@angular/core';
import { of } from 'rxjs';
import { map, switchMap } from 'rxjs/operators';
import { AppConfigService } from '../app-config/app-config.service';
import { JwtHelperService } from './jwt-helper.service';
import { OAuth2Service } from './oauth2.service';
import * as i0 from "@angular/core";
import * as i1 from "./jwt-helper.service";
import * as i2 from "./oauth2.service";
import * as i3 from "../app-config/app-config.service";
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './jwt-helper.service';
import * as ɵngcc2 from './oauth2.service';
import * as ɵngcc3 from '../app-config/app-config.service';
export class IdentityUserService {
    constructor(jwtHelperService, oAuth2Service, appConfigService) {
        this.jwtHelperService = jwtHelperService;
        this.oAuth2Service = oAuth2Service;
        this.appConfigService = appConfigService;
    }
    get identityHost() {
        return `${this.appConfigService.get('identityHost')}`;
    }
    buildUserUrl() {
        return `${this.identityHost}/users`;
    }
    getCurrentUserInfo() {
        const familyName = this.jwtHelperService.getValueFromLocalAccessToken(JwtHelperService.FAMILY_NAME);
        const givenName = this.jwtHelperService.getValueFromLocalAccessToken(JwtHelperService.GIVEN_NAME);
        const email = this.jwtHelperService.getValueFromLocalAccessToken(JwtHelperService.USER_EMAIL);
        const username = this.jwtHelperService.getValueFromLocalAccessToken(JwtHelperService.USER_PREFERRED_USERNAME);
        return { firstName: givenName, lastName: familyName, email: email, username: username };
    }
    findUsersByName(search) {
        if (search === '') {
            return of([]);
        }
        const url = this.buildUserUrl();
        const queryParams = { search: search };
        return this.oAuth2Service.get({ url, queryParams });
    }
    findUserByUsername(username) {
        if (username === '') {
            return of([]);
        }
        const url = this.buildUserUrl();
        const queryParams = { username: username };
        return this.oAuth2Service.get({ url, queryParams });
    }
    findUserByEmail(email) {
        if (email === '') {
            return of([]);
        }
        const url = this.buildUserUrl();
        const queryParams = { email: email };
        return this.oAuth2Service.get({ url, queryParams });
    }
    findUserById(id) {
        if (id === '') {
            return of([]);
        }
        const url = this.buildUserUrl() + '/' + id;
        return this.oAuth2Service.get({ url });
    }
    getClientRoles(userId, clientId) {
        const url = `${this.identityHost}/users/${userId}/role-mappings/clients/${clientId}/composite`;
        return this.oAuth2Service.get({ url });
    }
    checkUserHasClientApp(userId, clientId) {
        return this.getClientRoles(userId, clientId).pipe(map((clientRoles) => clientRoles.length > 0));
    }
    checkUserHasAnyClientAppRole(userId, clientId, roleNames) {
        return this.getClientRoles(userId, clientId).pipe(map((clientRoles) => {
            let hasRole = false;
            if (clientRoles.length > 0) {
                roleNames.forEach((roleName) => {
                    const role = clientRoles.find(({ name }) => name === roleName);
                    if (role) {
                        hasRole = true;
                        return;
                    }
                });
            }
            return hasRole;
        }));
    }
    getClientIdByApplicationName(applicationName) {
        const url = `${this.identityHost}/clients`;
        const queryParams = { clientId: applicationName };
        return this.oAuth2Service
            .get({ url, queryParams })
            .pipe(map((response) => response && response.length > 0 ? response[0].id : ''));
    }
    checkUserHasApplicationAccess(userId, applicationName) {
        return this.getClientIdByApplicationName(applicationName).pipe(switchMap((clientId) => {
            return this.checkUserHasClientApp(userId, clientId);
        }));
    }
    checkUserHasAnyApplicationRole(userId, applicationName, roleNames) {
        return this.getClientIdByApplicationName(applicationName).pipe(switchMap((clientId) => {
            return this.checkUserHasAnyClientAppRole(userId, clientId, roleNames);
        }));
    }
    getUsers() {
        const url = this.buildUserUrl();
        return this.oAuth2Service.get({ url });
    }
    getUserRoles(userId) {
        const url = `${this.identityHost}/users/${userId}/role-mappings/realm/composite`;
        return this.oAuth2Service.get({ url });
    }
    getUsersByRolesWithCurrentUser(roleNames) {
        return __awaiter(this, void 0, void 0, function* () {
            const filteredUsers = [];
            if (roleNames && roleNames.length > 0) {
                const users = yield this.getUsers().toPromise();
                for (let i = 0; i < users.length; i++) {
                    const hasAnyRole = yield this.userHasAnyRole(users[i].id, roleNames);
                    if (hasAnyRole) {
                        filteredUsers.push(users[i]);
                    }
                }
            }
            return filteredUsers;
        });
    }
    getUsersByRolesWithoutCurrentUser(roleNames) {
        return __awaiter(this, void 0, void 0, function* () {
            const filteredUsers = [];
            if (roleNames && roleNames.length > 0) {
                const currentUser = this.getCurrentUserInfo();
                let users = yield this.getUsers().toPromise();
                users = users.filter(({ username }) => username !== currentUser.username);
                for (let i = 0; i < users.length; i++) {
                    const hasAnyRole = yield this.userHasAnyRole(users[i].id, roleNames);
                    if (hasAnyRole) {
                        filteredUsers.push(users[i]);
                    }
                }
            }
            return filteredUsers;
        });
    }
    userHasAnyRole(userId, roleNames) {
        return __awaiter(this, void 0, void 0, function* () {
            const userRoles = yield this.getUserRoles(userId).toPromise();
            const hasAnyRole = roleNames.some((roleName) => {
                const filteredRoles = userRoles.filter((userRole) => {
                    return userRole.name.toLocaleLowerCase() === roleName.toLocaleLowerCase();
                });
                return filteredRoles.length > 0;
            });
            return hasAnyRole;
        });
    }
    checkUserHasRole(userId, roleNames) {
        return this.getUserRoles(userId).pipe(map((userRoles) => {
            let hasRole = false;
            if (userRoles && userRoles.length > 0) {
                roleNames.forEach((roleName) => {
                    const role = userRoles.find(({ name }) => roleName === name);
                    if (role) {
                        hasRole = true;
                        return;
                    }
                });
            }
            return hasRole;
        }));
    }
    queryUsers(requestQuery) {
        const url = this.buildUserUrl();
        const queryParams = { first: requestQuery.first, max: requestQuery.max };
        return this.getTotalUsersCount().pipe(switchMap((totalCount) => this.oAuth2Service.get({ url, queryParams }).pipe(map((response) => {
            return {
                entries: response,
                pagination: {
                    skipCount: requestQuery.first,
                    maxItems: requestQuery.max,
                    count: totalCount,
                    hasMoreItems: false,
                    totalItems: totalCount
                }
            };
        }))));
    }
    getTotalUsersCount() {
        const url = this.buildUserUrl() + `/count`;
        return this.oAuth2Service.get({ url });
    }
    createUser(newUser) {
        const url = this.buildUserUrl();
        const bodyParam = JSON.stringify(newUser);
        return this.oAuth2Service.post({ url, bodyParam });
    }
    updateUser(userId, updatedUser) {
        const url = this.buildUserUrl() + '/' + userId;
        const bodyParam = JSON.stringify(updatedUser);
        return this.oAuth2Service.put({ url, bodyParam });
    }
    deleteUser(userId) {
        const url = this.buildUserUrl() + '/' + userId;
        return this.oAuth2Service.delete({ url });
    }
    changePassword(userId, newPassword) {
        const url = this.buildUserUrl() + '/' + userId + '/reset-password';
        const bodyParam = JSON.stringify(newPassword);
        return this.oAuth2Service.put({ url, bodyParam });
    }
    getInvolvedGroups(userId) {
        const url = this.buildUserUrl() + '/' + userId + '/groups/';
        const pathParams = { id: userId };
        return this.oAuth2Service.get({ url, pathParams });
    }
    joinGroup(joinGroupRequest) {
        const url = this.buildUserUrl() + '/' + joinGroupRequest.userId + '/groups/' + joinGroupRequest.groupId;
        const bodyParam = JSON.stringify(joinGroupRequest);
        return this.oAuth2Service.put({ url, bodyParam });
    }
    leaveGroup(userId, groupId) {
        const url = this.buildUserUrl() + '/' + userId + '/groups/' + groupId;
        return this.oAuth2Service.delete({ url });
    }
    getAvailableRoles(userId) {
        const url = this.buildUserUrl() + '/' + userId + '/role-mappings/realm/available';
        return this.oAuth2Service.get({ url });
    }
    getAssignedRoles(userId) {
        const url = this.buildUserUrl() + '/' + userId + '/role-mappings/realm';
        const pathParams = { id: userId };
        return this.oAuth2Service.get({ url, pathParams });
    }
    getEffectiveRoles(userId) {
        const url = this.buildUserUrl() + '/' + userId + '/role-mappings/realm/composite';
        const pathParams = { id: userId };
        return this.oAuth2Service.get({ url, pathParams });
    }
    assignRoles(userId, roles) {
        const url = this.buildUserUrl() + '/' + userId + '/role-mappings/realm';
        const bodyParam = JSON.stringify(roles);
        return this.oAuth2Service.post({ url, bodyParam });
    }
    removeRoles(userId, removedRoles) {
        const url = this.buildUserUrl() + '/' + userId + '/role-mappings/realm';
        const bodyParam = JSON.stringify(removedRoles);
        return this.oAuth2Service.delete({ url, bodyParam });
    }
}
IdentityUserService.ɵfac = function IdentityUserService_Factory(t) { return new (t || IdentityUserService)(ɵngcc0.ɵɵinject(ɵngcc1.JwtHelperService), ɵngcc0.ɵɵinject(ɵngcc2.OAuth2Service), ɵngcc0.ɵɵinject(ɵngcc3.AppConfigService)); };
IdentityUserService.ɵprov = i0.ɵɵdefineInjectable({ factory: function IdentityUserService_Factory() { return new IdentityUserService(i0.ɵɵinject(i1.JwtHelperService), i0.ɵɵinject(i2.OAuth2Service), i0.ɵɵinject(i3.AppConfigService)); }, token: IdentityUserService, providedIn: "root" });
IdentityUserService.ctorParameters = () => [
    { type: JwtHelperService },
    { type: OAuth2Service },
    { type: AppConfigService }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IdentityUserService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc1.JwtHelperService }, { type: ɵngcc2.OAuth2Service }, { type: ɵngcc3.AppConfigService }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWRlbnRpdHktdXNlci5zZXJ2aWNlLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9ob21lL3RyYXZpcy9idWlsZC9BbGZyZXNjby9hbGZyZXNjby1uZzItY29tcG9uZW50cy9saWIvY29yZS9zZXJ2aWNlcy9pZGVudGl0eS11c2VyLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQWlCQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBYyxFQUFFLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDdEMsT0FBTyxFQUFFLEdBQUcsRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNoRCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQztBQUtwRSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUN4RCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDakQ7QUFFc0I7QUFFa0I7QUFFcEM7Ozs7O0FBRkosTUFBTSxPQUFPLG1CQUFtQjtBQUFHLElBRS9CLFlBQ1ksZ0JBQWtDLEVBQ2xDLGFBQTRCLEVBQzVCLGdCQUFrQztBQUFJLFFBRnRDLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBa0I7QUFBQyxRQUNuQyxrQkFBYSxHQUFiLGFBQWEsQ0FBZTtBQUFDLFFBQzdCLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBa0I7QUFBQyxJQUFHLENBQUM7QUFDdkQsSUFDSSxJQUFZLFlBQVk7QUFBSyxRQUN6QixPQUFPLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsRUFBRSxDQUFDO0FBQzlELElBQUksQ0FBQztBQUNMLElBQ1ksWUFBWTtBQUFLLFFBQ3JCLE9BQU8sR0FBRyxJQUFJLENBQUMsWUFBWSxRQUFRLENBQUM7QUFDNUMsSUFBSSxDQUFDO0FBQ0wsSUFLSSxrQkFB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QUksQ0FBQztBQUNMLElBT0ksV0FBVyxDQUFDLE1BQWMsRUFBRSxZQUFpQztBQUFJLFFBQzdELE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxZQUFZLEVBQUUsR0FBRyxHQUFHLEdBQUcsTUFBTSxHQUFHLHNCQUFzQixDQUFDO0FBQ2hGLFFBQVEsTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxZQUFZLENBQUMsQ0FBQztBQUN2RCxRQUNRLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsRUFBRSxHQUFHLEVBQUUsU0FBUyxFQUFFLENBQUMsQ0FBQztBQUM3RCxJQUFJLENBQUM7QUFDTDt5T0FBQztBQUNELDhSQTFjSztBQUFDO0VBSEwsVUFBVSxTQUFDLHJCQUd1QyxZQU4xQyxnQkFBZ0I7T0FJckIsVUFBVSxFQUFFLE1BQU0sekJBSk8sWUFDcEIsYUFBYTtVQUlyQixWQUp5QixZQU5qQixnQkFBZ0I7QUFBRzs7Ozs7O29KQUFFO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBvZiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgbWFwLCBzd2l0Y2hNYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBBcHBDb25maWdTZXJ2aWNlIH0gZnJvbSAnLi4vYXBwLWNvbmZpZy9hcHAtY29uZmlnLnNlcnZpY2UnO1xuaW1wb3J0IHsgSWRlbnRpdHlHcm91cE1vZGVsIH0gZnJvbSAnLi4vbW9kZWxzL2lkZW50aXR5LWdyb3VwLm1vZGVsJztcbmltcG9ydCB7IElkZW50aXR5Um9sZU1vZGVsIH0gZnJvbSAnLi4vbW9kZWxzL2lkZW50aXR5LXJvbGUubW9kZWwnO1xuaW1wb3J0IHsgSWRlbnRpdHlVc2VyTW9kZWwgfSBmcm9tICcuLi9tb2RlbHMvaWRlbnRpdHktdXNlci5tb2RlbCc7XG5pbXBvcnQgeyBJZGVudGl0eUpvaW5Hcm91cFJlcXVlc3RNb2RlbCwgSWRlbnRpdHlVc2VyU2VydmljZUludGVyZmFjZSwgSWRlbnRpdHlVc2VyUGFzc3dvcmRNb2RlbCwgSWRlbnRpdHlVc2VyUXVlcnlDbG91ZFJlcXVlc3RNb2RlbCwgSWRlbnRpdHlVc2VyUXVlcnlSZXNwb25zZSB9IGZyb20gJy4vaWRlbnRpdHktdXNlci5zZXJ2aWNlLmludGVyZmFjZSc7XG5pbXBvcnQgeyBKd3RIZWxwZXJTZXJ2aWNlIH0gZnJvbSAnLi9qd3QtaGVscGVyLnNlcnZpY2UnO1xuaW1wb3J0IHsgT0F1dGgyU2VydmljZSB9IGZyb20gJy4vb2F1dGgyLnNlcnZpY2UnO1xuXG5ASW5qZWN0YWJsZSh7XG4gICAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIElkZW50aXR5VXNlclNlcnZpY2UgaW1wbGVtZW50cyBJZGVudGl0eVVzZXJTZXJ2aWNlSW50ZXJmYWNlIHtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBwcml2YXRlIGp3dEhlbHBlclNlcnZpY2U6IEp3dEhlbHBlclNlcnZpY2UsXG4gICAgICAgIHByaXZhdGUgb0F1dGgyU2VydmljZTogT0F1dGgyU2VydmljZSxcbiAgICAgICAgcHJpdmF0ZSBhcHBDb25maWdTZXJ2aWNlOiBBcHBDb25maWdTZXJ2aWNlKSB7IH1cblxuICAgIHByaXZhdGUgZ2V0IGlkZW50aXR5SG9zdCgpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gYCR7dGhpcy5hcHBDb25maWdTZXJ2aWNlLmdldCgnaWRlbnRpdHlIb3N0Jyl9YDtcbiAgICB9XG5cbiAgICBwcml2YXRlIGJ1aWxkVXNlclVybCgpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gYCR7dGhpcy5pZGVudGl0eUhvc3R9L3VzZXJzYDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBuYW1lIGFuZCBvdGhlciBiYXNpYyBkZXRhaWxzIG9mIHRoZSBjdXJyZW50IHVzZXIuXG4gICAgICogQHJldHVybnMgVGhlIHVzZXIncyBkZXRhaWxzXG4gICAgICovXG4gICAgZ2V0Q3VycmVudFVzZXJJbmZvKCk6IElkZW50aXR5VXNlck1vZGVsIHtcbiAgICAgICAgY29uc3QgZmFtaWx5TmFtZSA9IHRoaXMuand0SGVscGVyU2VydmljZS5nZXRWYWx1ZUZyb21Mb2NhbEFjY2Vzc1Rva2VuPHN0cmluZz4oSnd0SGVscGVyU2VydmljZS5GQU1JTFlfTkFNRSk7XG4gICAgICAgIGNvbnN0IGdpdmVuTmFtZSA9IHRoaXMuand0SGVscGVyU2VydmljZS5nZXRWYWx1ZUZyb21Mb2NhbEFjY2Vzc1Rva2VuPHN0cmluZz4oSnd0SGVscGVyU2VydmljZS5HSVZFTl9OQU1FKTtcbiAgICAgICAgY29uc3QgZW1haWwgPSB0aGlzLmp3dEhlbHBlclNlcnZpY2UuZ2V0VmFsdWVGcm9tTG9jYWxBY2Nlc3NUb2tlbjxzdHJpbmc+KEp3dEhlbHBlclNlcnZpY2UuVVNFUl9FTUFJTCk7XG4gICAgICAgIGNvbnN0IHVzZXJuYW1lID0gdGhpcy5qd3RIZWxwZXJTZXJ2aWNlLmdldFZhbHVlRnJvbUxvY2FsQWNjZXNzVG9rZW48c3RyaW5nPihKd3RIZWxwZXJTZXJ2aWNlLlVTRVJfUFJFRkVSUkVEX1VTRVJOQU1FKTtcbiAgICAgICAgcmV0dXJuIHsgZmlyc3ROYW1lOiBnaXZlbk5hbWUsIGxhc3ROYW1lOiBmYW1pbHlOYW1lLCBlbWFpbDogZW1haWwsIHVzZXJuYW1lOiB1c2VybmFtZSB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEZpbmQgdXNlcnMgYmFzZWQgb24gc2VhcmNoIGlucHV0LlxuICAgICAqIEBwYXJhbSBzZWFyY2ggU2VhcmNoIHF1ZXJ5IHN0cmluZ1xuICAgICAqIEByZXR1cm5zIExpc3Qgb2YgdXNlcnNcbiAgICAgKi9cbiAgICBmaW5kVXNlcnNCeU5hbWUoc2VhcmNoOiBzdHJpbmcpOiBPYnNlcnZhYmxlPElkZW50aXR5VXNlck1vZGVsW10+IHtcbiAgICAgICAgaWYgKHNlYXJjaCA9PT0gJycpIHtcbiAgICAgICAgICAgIHJldHVybiBvZihbXSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdXJsID0gdGhpcy5idWlsZFVzZXJVcmwoKTtcbiAgICAgICAgY29uc3QgcXVlcnlQYXJhbXMgPSB7IHNlYXJjaDogc2VhcmNoIH07XG5cbiAgICAgICAgcmV0dXJuIHRoaXMub0F1dGgyU2VydmljZS5nZXQoeyB1cmwsIHF1ZXJ5UGFyYW1zIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEZpbmQgdXNlcnMgYmFzZWQgb24gdXNlcm5hbWUgaW5wdXQuXG4gICAgICogQHBhcmFtIHVzZXJuYW1lIFNlYXJjaCBxdWVyeSBzdHJpbmdcbiAgICAgKiBAcmV0dXJucyBMaXN0IG9mIHVzZXJzXG4gICAgICovXG4gICAgZmluZFVzZXJCeVVzZXJuYW1lKHVzZXJuYW1lOiBzdHJpbmcpOiBPYnNlcnZhYmxlPElkZW50aXR5VXNlck1vZGVsW10+IHtcbiAgICAgICAgaWYgKHVzZXJuYW1lID09PSAnJykge1xuICAgICAgICAgICAgcmV0dXJuIG9mKFtdKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB1cmwgPSB0aGlzLmJ1aWxkVXNlclVybCgpO1xuICAgICAgICBjb25zdCBxdWVyeVBhcmFtcyA9IHsgdXNlcm5hbWU6IHVzZXJuYW1lIH07XG5cbiAgICAgICAgcmV0dXJuIHRoaXMub0F1dGgyU2VydmljZS5nZXQoe3VybCwgcXVlcnlQYXJhbXMgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRmluZCB1c2VycyBiYXNlZCBvbiBlbWFpbCBpbnB1dC5cbiAgICAgKiBAcGFyYW0gZW1haWwgU2VhcmNoIHF1ZXJ5IHN0cmluZ1xuICAgICAqIEByZXR1cm5zIExpc3Qgb2YgdXNlcnNcbiAgICAgKi9cbiAgICBmaW5kVXNlckJ5RW1haWwoZW1haWw6IHN0cmluZyk6IE9ic2VydmFibGU8SWRlbnRpdHlVc2VyTW9kZWxbXT4ge1xuICAgICAgICBpZiAoZW1haWwgPT09ICcnKSB7XG4gICAgICAgICAgICByZXR1cm4gb2YoW10pO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHVybCA9IHRoaXMuYnVpbGRVc2VyVXJsKCk7XG4gICAgICAgIGNvbnN0IHF1ZXJ5UGFyYW1zID0geyBlbWFpbDogZW1haWwgfTtcblxuICAgICAgICByZXR1cm4gdGhpcy5vQXV0aDJTZXJ2aWNlLmdldCh7IHVybCwgcXVlcnlQYXJhbXMgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRmluZCB1c2VycyBiYXNlZCBvbiBpZCBpbnB1dC5cbiAgICAgKiBAcGFyYW0gaWQgU2VhcmNoIHF1ZXJ5IHN0cmluZ1xuICAgICAqIEByZXR1cm5zIHVzZXJzIG9iamVjdFxuICAgICAqL1xuICAgIGZpbmRVc2VyQnlJZChpZDogc3RyaW5nKTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICAgICAgaWYgKGlkID09PSAnJykge1xuICAgICAgICAgICAgcmV0dXJuIG9mKFtdKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB1cmwgPSB0aGlzLmJ1aWxkVXNlclVybCgpICsgJy8nICsgaWQ7XG4gICAgICAgIHJldHVybiB0aGlzLm9BdXRoMlNlcnZpY2UuZ2V0KHsgdXJsIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldCBjbGllbnQgcm9sZXMgb2YgYSB1c2VyIGZvciBhIHBhcnRpY3VsYXIgY2xpZW50LlxuICAgICAqIEBwYXJhbSB1c2VySWQgSUQgb2YgdGhlIHRhcmdldCB1c2VyXG4gICAgICogQHBhcmFtIGNsaWVudElkIElEIG9mIHRoZSBjbGllbnQgYXBwXG4gICAgICogQHJldHVybnMgTGlzdCBvZiBjbGllbnQgcm9sZXNcbiAgICAgKi9cbiAgICBnZXRDbGllbnRSb2xlcyh1c2VySWQ6IHN0cmluZywgY2xpZW50SWQ6IHN0cmluZyk6IE9ic2VydmFibGU8YW55W10+IHtcbiAgICAgICAgY29uc3QgdXJsID0gYCR7dGhpcy5pZGVudGl0eUhvc3R9L3VzZXJzLyR7dXNlcklkfS9yb2xlLW1hcHBpbmdzL2NsaWVudHMvJHtjbGllbnRJZH0vY29tcG9zaXRlYDtcbiAgICAgICAgcmV0dXJuIHRoaXMub0F1dGgyU2VydmljZS5nZXQoeyB1cmwgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIHdoZXRoZXIgdXNlciBoYXMgYWNjZXNzIHRvIGEgY2xpZW50IGFwcC5cbiAgICAgKiBAcGFyYW0gdXNlcklkIElEIG9mIHRoZSB0YXJnZXQgdXNlclxuICAgICAqIEBwYXJhbSBjbGllbnRJZCBJRCBvZiB0aGUgY2xpZW50IGFwcFxuICAgICAqIEByZXR1cm5zIFRydWUgaWYgdGhlIHVzZXIgaGFzIGFjY2VzcywgZmFsc2Ugb3RoZXJ3aXNlXG4gICAgICovXG4gICAgY2hlY2tVc2VySGFzQ2xpZW50QXBwKHVzZXJJZDogc3RyaW5nLCBjbGllbnRJZDogc3RyaW5nKTogT2JzZXJ2YWJsZTxib29sZWFuPiB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldENsaWVudFJvbGVzKHVzZXJJZCwgY2xpZW50SWQpLnBpcGUoXG4gICAgICAgICAgICBtYXAoKGNsaWVudFJvbGVzKSA9PiBjbGllbnRSb2xlcy5sZW5ndGggPiAwKVxuICAgICAgICApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyB3aGV0aGVyIGEgdXNlciBoYXMgYW55IG9mIHRoZSBjbGllbnQgYXBwIHJvbGVzLlxuICAgICAqIEBwYXJhbSB1c2VySWQgSUQgb2YgdGhlIHRhcmdldCB1c2VyXG4gICAgICogQHBhcmFtIGNsaWVudElkIElEIG9mIHRoZSBjbGllbnQgYXBwXG4gICAgICogQHBhcmFtIHJvbGVOYW1lcyBMaXN0IG9mIHJvbGUgbmFtZXMgdG8gY2hlY2sgZm9yXG4gICAgICogQHJldHVybnMgVHJ1ZSBpZiB0aGUgdXNlciBoYXMgb25lIG9yIG1vcmUgb2YgdGhlIHJvbGVzLCBmYWxzZSBvdGhlcndpc2VcbiAgICAgKi9cbiAgICBjaGVja1VzZXJIYXNBbnlDbGllbnRBcHBSb2xlKHVzZXJJZDogc3RyaW5nLCBjbGllbnRJZDogc3RyaW5nLCByb2xlTmFtZXM6IHN0cmluZ1tdKTogT2JzZXJ2YWJsZTxib29sZWFuPiB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldENsaWVudFJvbGVzKHVzZXJJZCwgY2xpZW50SWQpLnBpcGUoXG4gICAgICAgICAgICBtYXAoKGNsaWVudFJvbGVzOiBhbnlbXSkgPT4ge1xuICAgICAgICAgICAgICAgIGxldCBoYXNSb2xlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgaWYgKGNsaWVudFJvbGVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgcm9sZU5hbWVzLmZvckVhY2goKHJvbGVOYW1lKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCByb2xlID0gY2xpZW50Um9sZXMuZmluZCgoeyBuYW1lIH0pID0+IG5hbWUgPT09IHJvbGVOYW1lKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJvbGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYXNSb2xlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gaGFzUm9sZTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgY2xpZW50IElEIGZvciBhbiBhcHBsaWNhdGlvbi5cbiAgICAgKiBAcGFyYW0gYXBwbGljYXRpb25OYW1lIE5hbWUgb2YgdGhlIGFwcGxpY2F0aW9uXG4gICAgICogQHJldHVybnMgQ2xpZW50IElEIHN0cmluZ1xuICAgICAqL1xuICAgIGdldENsaWVudElkQnlBcHBsaWNhdGlvbk5hbWUoYXBwbGljYXRpb25OYW1lOiBzdHJpbmcpOiBPYnNlcnZhYmxlPHN0cmluZz4ge1xuICAgICAgICBjb25zdCB1cmwgPSBgJHt0aGlzLmlkZW50aXR5SG9zdH0vY2xpZW50c2A7XG4gICAgICAgIGNvbnN0IHF1ZXJ5UGFyYW1zID0geyBjbGllbnRJZDogYXBwbGljYXRpb25OYW1lIH07XG5cbiAgICAgICAgcmV0dXJuIHRoaXMub0F1dGgyU2VydmljZVxuICAgICAgICAgICAgLmdldDxhbnlbXT4oe3VybCwgcXVlcnlQYXJhbXMgfSlcbiAgICAgICAgICAgIC5waXBlKFxuICAgICAgICAgICAgICAgIG1hcCgocmVzcG9uc2UpID0+IHJlc3BvbnNlICYmIHJlc3BvbnNlLmxlbmd0aCA+IDAgPyByZXNwb25zZVswXS5pZCA6ICcnKVxuICAgICAgICAgICAgKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYSB1c2VyIGhhcyBhY2Nlc3MgdG8gYW4gYXBwbGljYXRpb24uXG4gICAgICogQHBhcmFtIHVzZXJJZCBJRCBvZiB0aGUgdXNlclxuICAgICAqIEBwYXJhbSBhcHBsaWNhdGlvbk5hbWUgTmFtZSBvZiB0aGUgYXBwbGljYXRpb25cbiAgICAgKiBAcmV0dXJucyBUcnVlIGlmIHRoZSB1c2VyIGhhcyBhY2Nlc3MsIGZhbHNlIG90aGVyd2lzZVxuICAgICAqL1xuICAgIGNoZWNrVXNlckhhc0FwcGxpY2F0aW9uQWNjZXNzKHVzZXJJZDogc3RyaW5nLCBhcHBsaWNhdGlvbk5hbWU6IHN0cmluZyk6IE9ic2VydmFibGU8Ym9vbGVhbj4ge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRDbGllbnRJZEJ5QXBwbGljYXRpb25OYW1lKGFwcGxpY2F0aW9uTmFtZSkucGlwZShcbiAgICAgICAgICAgIHN3aXRjaE1hcCgoY2xpZW50SWQ6IHN0cmluZykgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmNoZWNrVXNlckhhc0NsaWVudEFwcCh1c2VySWQsIGNsaWVudElkKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGEgdXNlciBoYXMgYW55IGFwcGxpY2F0aW9uIHJvbGUuXG4gICAgICogQHBhcmFtIHVzZXJJZCBJRCBvZiB0aGUgdGFyZ2V0IHVzZXJcbiAgICAgKiBAcGFyYW0gYXBwbGljYXRpb25OYW1lIE5hbWUgb2YgdGhlIGFwcGxpY2F0aW9uXG4gICAgICogQHBhcmFtIHJvbGVOYW1lcyBMaXN0IG9mIHJvbGUgbmFtZXMgdG8gY2hlY2sgZm9yXG4gICAgICogQHJldHVybnMgVHJ1ZSBpZiB0aGUgdXNlciBoYXMgb25lIG9yIG1vcmUgb2YgdGhlIHJvbGVzLCBmYWxzZSBvdGhlcndpc2VcbiAgICAgKi9cbiAgICBjaGVja1VzZXJIYXNBbnlBcHBsaWNhdGlvblJvbGUodXNlcklkOiBzdHJpbmcsIGFwcGxpY2F0aW9uTmFtZTogc3RyaW5nLCByb2xlTmFtZXM6IHN0cmluZ1tdKTogT2JzZXJ2YWJsZTxib29sZWFuPiB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldENsaWVudElkQnlBcHBsaWNhdGlvbk5hbWUoYXBwbGljYXRpb25OYW1lKS5waXBlKFxuICAgICAgICAgICAgc3dpdGNoTWFwKChjbGllbnRJZDogc3RyaW5nKSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY2hlY2tVc2VySGFzQW55Q2xpZW50QXBwUm9sZSh1c2VySWQsIGNsaWVudElkLCByb2xlTmFtZXMpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIGRldGFpbHMgZm9yIGFsbCB1c2Vycy5cbiAgICAgKiBAcmV0dXJucyBBcnJheSBvZiB1c2VyIGluZm8gb2JqZWN0c1xuICAgICAqL1xuICAgIGdldFVzZXJzKCk6IE9ic2VydmFibGU8SWRlbnRpdHlVc2VyTW9kZWxbXT4ge1xuICAgICAgICBjb25zdCB1cmwgPSB0aGlzLmJ1aWxkVXNlclVybCgpO1xuICAgICAgICByZXR1cm4gdGhpcy5vQXV0aDJTZXJ2aWNlLmdldCh7IHVybCB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIGEgbGlzdCBvZiByb2xlcyBmb3IgYSB1c2VyLlxuICAgICAqIEBwYXJhbSB1c2VySWQgSUQgb2YgdGhlIHVzZXJcbiAgICAgKiBAcmV0dXJucyBBcnJheSBvZiByb2xlIGluZm8gb2JqZWN0c1xuICAgICAqL1xuICAgIGdldFVzZXJSb2xlcyh1c2VySWQ6IHN0cmluZyk6IE9ic2VydmFibGU8SWRlbnRpdHlSb2xlTW9kZWxbXT4ge1xuICAgICAgICBjb25zdCB1cmwgPSBgJHt0aGlzLmlkZW50aXR5SG9zdH0vdXNlcnMvJHt1c2VySWR9L3JvbGUtbWFwcGluZ3MvcmVhbG0vY29tcG9zaXRlYDtcbiAgICAgICAgcmV0dXJuIHRoaXMub0F1dGgyU2VydmljZS5nZXQoeyB1cmwgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyBhbiBhcnJheSBvZiB1c2VycyAoaW5jbHVkaW5nIHRoZSBjdXJyZW50IHVzZXIpIHdobyBoYXZlIGFueSBvZiB0aGUgcm9sZXMgaW4gdGhlIHN1cHBsaWVkIGxpc3QuXG4gICAgICogQHBhcmFtIHJvbGVOYW1lcyBMaXN0IG9mIHJvbGUgbmFtZXMgdG8gbG9vayBmb3JcbiAgICAgKiBAcmV0dXJucyBBcnJheSBvZiB1c2VyIGluZm8gb2JqZWN0c1xuICAgICAqL1xuICAgIGFzeW5jIGdldFVzZXJzQnlSb2xlc1dpdGhDdXJyZW50VXNlcihyb2xlTmFtZXM6IHN0cmluZ1tdKTogUHJvbWlzZTxJZGVudGl0eVVzZXJNb2RlbFtdPiB7XG4gICAgICAgIGNvbnN0IGZpbHRlcmVkVXNlcnM6IElkZW50aXR5VXNlck1vZGVsW10gPSBbXTtcbiAgICAgICAgaWYgKHJvbGVOYW1lcyAmJiByb2xlTmFtZXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgY29uc3QgdXNlcnMgPSBhd2FpdCB0aGlzLmdldFVzZXJzKCkudG9Qcm9taXNlKCk7XG5cbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdXNlcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBjb25zdCBoYXNBbnlSb2xlID0gYXdhaXQgdGhpcy51c2VySGFzQW55Um9sZSh1c2Vyc1tpXS5pZCwgcm9sZU5hbWVzKTtcbiAgICAgICAgICAgICAgICBpZiAoaGFzQW55Um9sZSkge1xuICAgICAgICAgICAgICAgICAgICBmaWx0ZXJlZFVzZXJzLnB1c2godXNlcnNbaV0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBmaWx0ZXJlZFVzZXJzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgYW4gYXJyYXkgb2YgdXNlcnMgKG5vdCBpbmNsdWRpbmcgdGhlIGN1cnJlbnQgdXNlcikgd2hvIGhhdmUgYW55IG9mIHRoZSByb2xlcyBpbiB0aGUgc3VwcGxpZWQgbGlzdC5cbiAgICAgKiBAcGFyYW0gcm9sZU5hbWVzIExpc3Qgb2Ygcm9sZSBuYW1lcyB0byBsb29rIGZvclxuICAgICAqIEByZXR1cm5zIEFycmF5IG9mIHVzZXIgaW5mbyBvYmplY3RzXG4gICAgICovXG4gICAgYXN5bmMgZ2V0VXNlcnNCeVJvbGVzV2l0aG91dEN1cnJlbnRVc2VyKHJvbGVOYW1lczogc3RyaW5nW10pOiBQcm9taXNlPElkZW50aXR5VXNlck1vZGVsW10+IHtcbiAgICAgICAgY29uc3QgZmlsdGVyZWRVc2VyczogSWRlbnRpdHlVc2VyTW9kZWxbXSA9IFtdO1xuICAgICAgICBpZiAocm9sZU5hbWVzICYmIHJvbGVOYW1lcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBjb25zdCBjdXJyZW50VXNlciA9IHRoaXMuZ2V0Q3VycmVudFVzZXJJbmZvKCk7XG4gICAgICAgICAgICBsZXQgdXNlcnMgPSBhd2FpdCB0aGlzLmdldFVzZXJzKCkudG9Qcm9taXNlKCk7XG5cbiAgICAgICAgICAgIHVzZXJzID0gdXNlcnMuZmlsdGVyKCh7IHVzZXJuYW1lIH0pID0+IHVzZXJuYW1lICE9PSBjdXJyZW50VXNlci51c2VybmFtZSk7XG5cbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdXNlcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBjb25zdCBoYXNBbnlSb2xlID0gYXdhaXQgdGhpcy51c2VySGFzQW55Um9sZSh1c2Vyc1tpXS5pZCwgcm9sZU5hbWVzKTtcbiAgICAgICAgICAgICAgICBpZiAoaGFzQW55Um9sZSkge1xuICAgICAgICAgICAgICAgICAgICBmaWx0ZXJlZFVzZXJzLnB1c2godXNlcnNbaV0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBmaWx0ZXJlZFVzZXJzO1xuICAgIH1cblxuICAgIHByaXZhdGUgYXN5bmMgdXNlckhhc0FueVJvbGUodXNlcklkOiBzdHJpbmcsIHJvbGVOYW1lczogc3RyaW5nW10pOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICAgICAgY29uc3QgdXNlclJvbGVzID0gYXdhaXQgdGhpcy5nZXRVc2VyUm9sZXModXNlcklkKS50b1Byb21pc2UoKTtcbiAgICAgICAgY29uc3QgaGFzQW55Um9sZSA9IHJvbGVOYW1lcy5zb21lKChyb2xlTmFtZSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgZmlsdGVyZWRSb2xlcyA9IHVzZXJSb2xlcy5maWx0ZXIoKHVzZXJSb2xlKSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHVzZXJSb2xlLm5hbWUudG9Mb2NhbGVMb3dlckNhc2UoKSA9PT0gcm9sZU5hbWUudG9Mb2NhbGVMb3dlckNhc2UoKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICByZXR1cm4gZmlsdGVyZWRSb2xlcy5sZW5ndGggPiAwO1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gaGFzQW55Um9sZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYSB1c2VyIGhhcyBvbmUgb2YgdGhlIHJvbGVzIGZyb20gYSBsaXN0LlxuICAgICAqIEBwYXJhbSB1c2VySWQgSUQgb2YgdGhlIHRhcmdldCB1c2VyXG4gICAgICogQHBhcmFtIHJvbGVOYW1lcyBBcnJheSBvZiByb2xlcyB0byBjaGVjayBmb3JcbiAgICAgKiBAcmV0dXJucyBUcnVlIGlmIHRoZSB1c2VyIGhhcyBvbmUgb2YgdGhlIHJvbGVzLCBmYWxzZSBvdGhlcndpc2VcbiAgICAgKi9cbiAgICBjaGVja1VzZXJIYXNSb2xlKHVzZXJJZDogc3RyaW5nLCByb2xlTmFtZXM6IHN0cmluZ1tdKTogT2JzZXJ2YWJsZTxib29sZWFuPiB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFVzZXJSb2xlcyh1c2VySWQpLnBpcGUobWFwKCh1c2VyUm9sZXM6IElkZW50aXR5Um9sZU1vZGVsW10pID0+IHtcbiAgICAgICAgICAgIGxldCBoYXNSb2xlID0gZmFsc2U7XG4gICAgICAgICAgICBpZiAodXNlclJvbGVzICYmIHVzZXJSb2xlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgcm9sZU5hbWVzLmZvckVhY2goKHJvbGVOYW1lOiBzdHJpbmcpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgcm9sZSA9IHVzZXJSb2xlcy5maW5kKCh7IG5hbWUgfSkgPT4gcm9sZU5hbWUgPT09IG5hbWUpO1xuICAgICAgICAgICAgICAgICAgICBpZiAocm9sZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaGFzUm9sZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBoYXNSb2xlO1xuICAgICAgICB9KSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyBkZXRhaWxzIGZvciBhbGwgdXNlcnMuXG4gICAgICogQHJldHVybnMgQXJyYXkgb2YgdXNlciBpbmZvcm1hdGlvbiBvYmplY3RzLlxuICAgICAqL1xuICAgIHF1ZXJ5VXNlcnMocmVxdWVzdFF1ZXJ5OiBJZGVudGl0eVVzZXJRdWVyeUNsb3VkUmVxdWVzdE1vZGVsKTogT2JzZXJ2YWJsZTxJZGVudGl0eVVzZXJRdWVyeVJlc3BvbnNlPiB7XG4gICAgICAgIGNvbnN0IHVybCA9IHRoaXMuYnVpbGRVc2VyVXJsKCk7XG4gICAgICAgIGNvbnN0IHF1ZXJ5UGFyYW1zID0geyBmaXJzdDogcmVxdWVzdFF1ZXJ5LmZpcnN0LCBtYXg6IHJlcXVlc3RRdWVyeS5tYXggfTtcblxuICAgICAgICByZXR1cm4gdGhpcy5nZXRUb3RhbFVzZXJzQ291bnQoKS5waXBlKFxuICAgICAgICAgICAgc3dpdGNoTWFwKCh0b3RhbENvdW50KSA9PlxuICAgICAgICAgICAgICAgIHRoaXMub0F1dGgyU2VydmljZS5nZXQ8SWRlbnRpdHlVc2VyTW9kZWxbXT4oeyB1cmwsIHF1ZXJ5UGFyYW1zIH0pLnBpcGUoXG4gICAgICAgICAgICAgICAgICAgIG1hcCgocmVzcG9uc2UpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiA8SWRlbnRpdHlVc2VyUXVlcnlSZXNwb25zZT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVudHJpZXM6IHJlc3BvbnNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhZ2luYXRpb246IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNraXBDb3VudDogcmVxdWVzdFF1ZXJ5LmZpcnN0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF4SXRlbXM6IHJlcXVlc3RRdWVyeS5tYXgsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb3VudDogdG90YWxDb3VudCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhc01vcmVJdGVtczogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3RhbEl0ZW1zOiB0b3RhbENvdW50XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICApXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB1c2VycyB0b3RhbCBjb3VudC5cbiAgICAgKiBAcmV0dXJucyBOdW1iZXIgb2YgdXNlcnMgY291bnQuXG4gICAgICovXG4gICAgZ2V0VG90YWxVc2Vyc0NvdW50KCk6IE9ic2VydmFibGU8bnVtYmVyPiB7XG4gICAgICAgIGNvbnN0IHVybCA9IHRoaXMuYnVpbGRVc2VyVXJsKCkgKyBgL2NvdW50YDtcbiAgICAgICAgcmV0dXJuIHRoaXMub0F1dGgyU2VydmljZS5nZXQoeyB1cmwgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBuZXcgdXNlci5cbiAgICAgKiBAcGFyYW0gbmV3VXNlciBPYmplY3QgY29udGFpbmluZyB0aGUgbmV3IHVzZXIgZGV0YWlscy5cbiAgICAgKiBAcmV0dXJucyBFbXB0eSByZXNwb25zZSB3aGVuIHRoZSB1c2VyIGNyZWF0ZWQuXG4gICAgICovXG4gICAgY3JlYXRlVXNlcihuZXdVc2VyOiBJZGVudGl0eVVzZXJNb2RlbCk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgICAgIGNvbnN0IHVybCA9IHRoaXMuYnVpbGRVc2VyVXJsKCk7XG4gICAgICAgIGNvbnN0IGJvZHlQYXJhbSA9IEpTT04uc3RyaW5naWZ5KG5ld1VzZXIpO1xuXG4gICAgICAgIHJldHVybiB0aGlzLm9BdXRoMlNlcnZpY2UucG9zdCh7IHVybCwgYm9keVBhcmFtIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFVwZGF0ZXMgdXNlciBkZXRhaWxzLlxuICAgICAqIEBwYXJhbSB1c2VySWQgSWQgb2YgdGhlIHVzZXIuXG4gICAgICogQHBhcmFtIHVwZGF0ZWRVc2VyIE9iamVjdCBjb250YWluaW5nIHRoZSB1c2VyIGRldGFpbHMuXG4gICAgICogQHJldHVybnMgRW1wdHkgcmVzcG9uc2Ugd2hlbiB0aGUgdXNlciB1cGRhdGVkLlxuICAgICAqL1xuICAgIHVwZGF0ZVVzZXIodXNlcklkOiBzdHJpbmcsIHVwZGF0ZWRVc2VyOiBJZGVudGl0eVVzZXJNb2RlbCk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgICAgIGNvbnN0IHVybCA9IHRoaXMuYnVpbGRVc2VyVXJsKCkgKyAnLycgKyB1c2VySWQ7XG4gICAgICAgIGNvbnN0IGJvZHlQYXJhbSA9IEpTT04uc3RyaW5naWZ5KHVwZGF0ZWRVc2VyKTtcblxuICAgICAgICByZXR1cm4gdGhpcy5vQXV0aDJTZXJ2aWNlLnB1dCh7IHVybCwgYm9keVBhcmFtIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIERlbGV0ZXMgVXNlci5cbiAgICAgKiBAcGFyYW0gdXNlcklkIElkIG9mIHRoZSAgdXNlci5cbiAgICAgKiBAcmV0dXJucyBFbXB0eSByZXNwb25zZSB3aGVuIHRoZSB1c2VyIGRlbGV0ZWQuXG4gICAgICovXG4gICAgZGVsZXRlVXNlcih1c2VySWQ6IHN0cmluZyk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgICAgIGNvbnN0IHVybCA9IHRoaXMuYnVpbGRVc2VyVXJsKCkgKyAnLycgKyB1c2VySWQ7XG4gICAgICAgIHJldHVybiB0aGlzLm9BdXRoMlNlcnZpY2UuZGVsZXRlKHsgdXJsIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoYW5nZXMgdXNlciBwYXNzd29yZC5cbiAgICAgKiBAcGFyYW0gdXNlcklkIElkIG9mIHRoZSB1c2VyLlxuICAgICAqIEBwYXJhbSBjcmVkZW50aWFscyBEZXRhaWxzIG9mIHVzZXIgQ3JlZGVudGlhbHMuXG4gICAgICogQHJldHVybnMgRW1wdHkgcmVzcG9uc2Ugd2hlbiB0aGUgcGFzc3dvcmQgY2hhbmdlZC5cbiAgICAgKi9cbiAgICBjaGFuZ2VQYXNzd29yZCh1c2VySWQ6IHN0cmluZywgbmV3UGFzc3dvcmQ6IElkZW50aXR5VXNlclBhc3N3b3JkTW9kZWwpOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgICAgICBjb25zdCB1cmwgPSB0aGlzLmJ1aWxkVXNlclVybCgpICsgJy8nICsgdXNlcklkICsgJy9yZXNldC1wYXNzd29yZCc7XG4gICAgICAgIGNvbnN0IGJvZHlQYXJhbSA9IEpTT04uc3RyaW5naWZ5KG5ld1Bhc3N3b3JkKTtcblxuICAgICAgICByZXR1cm4gdGhpcy5vQXV0aDJTZXJ2aWNlLnB1dCh7IHVybCwgYm9keVBhcmFtIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgaW52b2x2ZWQgZ3JvdXBzLlxuICAgICAqIEBwYXJhbSB1c2VySWQgSWQgb2YgdGhlIHVzZXIuXG4gICAgICogQHJldHVybnMgQXJyYXkgb2YgaW52b2x2ZWQgZ3JvdXBzIGluZm9ybWF0aW9uIG9iamVjdHMuXG4gICAgICovXG4gICAgZ2V0SW52b2x2ZWRHcm91cHModXNlcklkOiBzdHJpbmcpOiBPYnNlcnZhYmxlPElkZW50aXR5R3JvdXBNb2RlbFtdPiB7XG4gICAgICAgIGNvbnN0IHVybCA9IHRoaXMuYnVpbGRVc2VyVXJsKCkgKyAnLycgKyB1c2VySWQgKyAnL2dyb3Vwcy8nO1xuICAgICAgICBjb25zdCBwYXRoUGFyYW1zID0geyBpZDogdXNlcklkIH07XG5cbiAgICAgICAgcmV0dXJuIHRoaXMub0F1dGgyU2VydmljZS5nZXQoeyB1cmwsIHBhdGhQYXJhbXMgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSm9pbnMgZ3JvdXAuXG4gICAgICogQHBhcmFtIGpvaW5Hcm91cFJlcXVlc3QgRGV0YWlscyBvZiBqb2luIGdyb3VwIHJlcXVlc3QgKElkZW50aXR5Sm9pbkdyb3VwUmVxdWVzdE1vZGVsKS5cbiAgICAgKiBAcmV0dXJucyBFbXB0eSByZXNwb25zZSB3aGVuIHRoZSB1c2VyIGpvaW5lZCB0aGUgZ3JvdXAuXG4gICAgICovXG4gICAgam9pbkdyb3VwKGpvaW5Hcm91cFJlcXVlc3Q6IElkZW50aXR5Sm9pbkdyb3VwUmVxdWVzdE1vZGVsKTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICAgICAgY29uc3QgdXJsID0gdGhpcy5idWlsZFVzZXJVcmwoKSArICcvJyArIGpvaW5Hcm91cFJlcXVlc3QudXNlcklkICsgJy9ncm91cHMvJyArIGpvaW5Hcm91cFJlcXVlc3QuZ3JvdXBJZDtcbiAgICAgICAgY29uc3QgYm9keVBhcmFtID0gSlNPTi5zdHJpbmdpZnkoam9pbkdyb3VwUmVxdWVzdCk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMub0F1dGgyU2VydmljZS5wdXQoeyB1cmwsIGJvZHlQYXJhbSB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBMZWF2ZXMgZ3JvdXAuXG4gICAgICogQHBhcmFtIHVzZXJJZCBJZCBvZiB0aGUgdXNlci5cbiAgICAgKiBAcGFyYW0gZ3JvdXBJZCBJZCBvZiB0aGUgIGdyb3VwLlxuICAgICAqIEByZXR1cm5zIEVtcHR5IHJlc3BvbnNlIHdoZW4gdGhlIHVzZXIgbGVmdCB0aGUgZ3JvdXAuXG4gICAgICovXG4gICAgbGVhdmVHcm91cCh1c2VySWQ6IGFueSwgZ3JvdXBJZDogc3RyaW5nKTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICAgICAgY29uc3QgdXJsID0gdGhpcy5idWlsZFVzZXJVcmwoKSArICcvJyArIHVzZXJJZCArICcvZ3JvdXBzLycgKyBncm91cElkO1xuICAgICAgICByZXR1cm4gdGhpcy5vQXV0aDJTZXJ2aWNlLmRlbGV0ZSh7IHVybCB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIGF2YWlsYWJsZSByb2xlc1xuICAgICAqIEBwYXJhbSB1c2VySWQgSWQgb2YgdGhlIHVzZXIuXG4gICAgICogQHJldHVybnMgQXJyYXkgb2YgYXZhaWxhYmxlIHJvbGVzIGluZm9ybWF0aW9uIG9iamVjdHNcbiAgICAgKi9cbiAgICBnZXRBdmFpbGFibGVSb2xlcyh1c2VySWQ6IHN0cmluZyk6IE9ic2VydmFibGU8SWRlbnRpdHlSb2xlTW9kZWxbXT4ge1xuICAgICAgICBjb25zdCB1cmwgPSB0aGlzLmJ1aWxkVXNlclVybCgpICsgJy8nICsgdXNlcklkICsgJy9yb2xlLW1hcHBpbmdzL3JlYWxtL2F2YWlsYWJsZSc7XG4gICAgICAgIHJldHVybiB0aGlzLm9BdXRoMlNlcnZpY2UuZ2V0KHsgdXJsIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgYXNzaWduZWQgcm9sZXMuXG4gICAgICogQHBhcmFtIHVzZXJJZCBJZCBvZiB0aGUgdXNlci5cbiAgICAgKiBAcmV0dXJucyBBcnJheSBvZiBhc3NpZ25lZCByb2xlcyBpbmZvcm1hdGlvbiBvYmplY3RzXG4gICAgICovXG4gICAgZ2V0QXNzaWduZWRSb2xlcyh1c2VySWQ6IHN0cmluZyk6IE9ic2VydmFibGU8SWRlbnRpdHlSb2xlTW9kZWxbXT4ge1xuICAgICAgICBjb25zdCB1cmwgPSB0aGlzLmJ1aWxkVXNlclVybCgpICsgJy8nICsgdXNlcklkICsgJy9yb2xlLW1hcHBpbmdzL3JlYWxtJztcbiAgICAgICAgY29uc3QgcGF0aFBhcmFtcyA9IHsgaWQ6IHVzZXJJZCB9O1xuXG4gICAgICAgIHJldHVybiB0aGlzLm9BdXRoMlNlcnZpY2UuZ2V0KHsgdXJsLCBwYXRoUGFyYW1zIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgZWZmZWN0aXZlIHJvbGVzLlxuICAgICAqIEBwYXJhbSB1c2VySWQgSWQgb2YgdGhlIHVzZXIuXG4gICAgICogQHJldHVybnMgQXJyYXkgb2YgY29tcG9zaXRlIHJvbGVzIGluZm9ybWF0aW9uIG9iamVjdHNcbiAgICAgKi9cbiAgICBnZXRFZmZlY3RpdmVSb2xlcyh1c2VySWQ6IHN0cmluZyk6IE9ic2VydmFibGU8SWRlbnRpdHlSb2xlTW9kZWxbXT4ge1xuICAgICAgICBjb25zdCB1cmwgPSB0aGlzLmJ1aWxkVXNlclVybCgpICsgJy8nICsgdXNlcklkICsgJy9yb2xlLW1hcHBpbmdzL3JlYWxtL2NvbXBvc2l0ZSc7XG4gICAgICAgIGNvbnN0IHBhdGhQYXJhbXMgPSB7IGlkOiB1c2VySWQgfTtcblxuICAgICAgICByZXR1cm4gdGhpcy5vQXV0aDJTZXJ2aWNlLmdldCh7IHVybCwgcGF0aFBhcmFtcyB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBc3NpZ25zIHJvbGVzIHRvIHRoZSB1c2VyLlxuICAgICAqIEBwYXJhbSB1c2VySWQgSWQgb2YgdGhlIHVzZXIuXG4gICAgICogQHBhcmFtIHJvbGVzIEFycmF5IG9mIHJvbGVzLlxuICAgICAqIEByZXR1cm5zIEVtcHR5IHJlc3BvbnNlIHdoZW4gdGhlIHJvbGUgYXNzaWduZWQuXG4gICAgICovXG4gICAgYXNzaWduUm9sZXModXNlcklkOiBzdHJpbmcsIHJvbGVzOiBJZGVudGl0eVJvbGVNb2RlbFtdKTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICAgICAgY29uc3QgdXJsID0gdGhpcy5idWlsZFVzZXJVcmwoKSArICcvJyArIHVzZXJJZCArICcvcm9sZS1tYXBwaW5ncy9yZWFsbSc7XG4gICAgICAgIGNvbnN0IGJvZHlQYXJhbSA9IEpTT04uc3RyaW5naWZ5KHJvbGVzKTtcblxuICAgICAgICByZXR1cm4gdGhpcy5vQXV0aDJTZXJ2aWNlLnBvc3QoeyB1cmwsIGJvZHlQYXJhbSB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGFzc2lnbmVkIHJvbGVzLlxuICAgICAqIEBwYXJhbSB1c2VySWQgSWQgb2YgdGhlIHVzZXIuXG4gICAgICogQHBhcmFtIHJvbGVzIEFycmF5IG9mIHJvbGVzLlxuICAgICAqIEByZXR1cm5zIEVtcHR5IHJlc3BvbnNlIHdoZW4gdGhlIHJvbGUgcmVtb3ZlZC5cbiAgICAgKi9cbiAgICByZW1vdmVSb2xlcyh1c2VySWQ6IHN0cmluZywgcmVtb3ZlZFJvbGVzOiBJZGVudGl0eVJvbGVNb2RlbFtdKTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICAgICAgY29uc3QgdXJsID0gdGhpcy5idWlsZFVzZXJVcmwoKSArICcvJyArIHVzZXJJZCArICcvcm9sZS1tYXBwaW5ncy9yZWFsbSc7XG4gICAgICAgIGNvbnN0IGJvZHlQYXJhbSA9IEpTT04uc3RyaW5naWZ5KHJlbW92ZWRSb2xlcyk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMub0F1dGgyU2VydmljZS5kZWxldGUoeyB1cmwsIGJvZHlQYXJhbSB9KTtcbiAgICB9XG59XG4iXX0=