import { Injectable } from '@angular/core';
import { Minimatch } from 'minimatch';
import { Subject } from 'rxjs';
import { AppConfigService } from '../app-config/app-config.service';
import { FileUploadCompleteEvent, FileUploadDeleteEvent, FileUploadErrorEvent, FileUploadEvent } from '../events/file.event';
import { FileUploadStatus } from '../models/file.model';
import { AlfrescoApiService } from './alfresco-api.service';
import { DiscoveryApiService } from './discovery-api.service';
import { filter } from 'rxjs/operators';
import { NodesApi, UploadApi, VersionsApi } from '@alfresco/js-api';
import * as i0 from "@angular/core";
import * as i1 from "./alfresco-api.service";
import * as i2 from "../app-config/app-config.service";
import * as i3 from "./discovery-api.service";
const MIN_CANCELLABLE_FILE_SIZE = 1000000;
const MAX_CANCELLABLE_FILE_PERCENTAGE = 50;
export class UploadService {
    constructor(apiService, appConfigService, discoveryApiService) {
        this.apiService = apiService;
        this.appConfigService = appConfigService;
        this.discoveryApiService = discoveryApiService;
        this.cache = {};
        this.totalComplete = 0;
        this.totalAborted = 0;
        this.totalError = 0;
        this.excludedFileList = [];
        this.excludedFoldersList = [];
        this.matchingOptions = null;
        this.folderMatchingOptions = null;
        this.activeTask = null;
        this.queue = [];
        this.queueChanged = new Subject();
        this.fileUpload = new Subject();
        this.fileUploadStarting = new Subject();
        this.fileUploadCancelled = new Subject();
        this.fileUploadProgress = new Subject();
        this.fileUploadAborted = new Subject();
        this.fileUploadError = new Subject();
        this.fileUploadComplete = new Subject();
        this.fileUploadDeleted = new Subject();
        this.fileDeleted = new Subject();
        this.discoveryApiService.ecmProductInfo$.pipe(filter(info => !!info))
            .subscribe(({ status }) => {
            this.isThumbnailGenerationEnabled = status.isThumbnailGenerationEnabled;
        });
    }
    get uploadApi() {
        var _a;
        this._uploadApi = (_a = this._uploadApi) !== null && _a !== void 0 ? _a : new UploadApi(this.apiService.getInstance());
        return this._uploadApi;
    }
    get nodesApi() {
        var _a;
        this._nodesApi = (_a = this._nodesApi) !== null && _a !== void 0 ? _a : new NodesApi(this.apiService.getInstance());
        return this._nodesApi;
    }
    get versionsApi() {
        var _a;
        this._versionsApi = (_a = this._versionsApi) !== null && _a !== void 0 ? _a : new VersionsApi(this.apiService.getInstance());
        return this._versionsApi;
    }
    isUploading() {
        const finishedFileStates = [FileUploadStatus.Complete, FileUploadStatus.Cancelled, FileUploadStatus.Aborted, FileUploadStatus.Error, FileUploadStatus.Deleted];
        return this.queue.reduce((stillUploading, currentFile) => {
            return stillUploading || finishedFileStates.indexOf(currentFile.status) === -1;
        }, false);
    }
    getQueue() {
        return this.queue;
    }
    addToQueue(...files) {
        const allowedFiles = files.filter((currentFile) => this.filterElement(currentFile));
        this.queue = this.queue.concat(allowedFiles);
        this.queueChanged.next(this.queue);
        return allowedFiles;
    }
    filterElement(file) {
        this.excludedFileList = this.appConfigService.get('files.excluded');
        this.excludedFoldersList = this.appConfigService.get('folders.excluded');
        let isAllowed = true;
        if (this.excludedFileList) {
            this.matchingOptions = this.appConfigService.get('files.match-options');
            isAllowed = this.isFileNameAllowed(file);
        }
        if (isAllowed && this.excludedFoldersList) {
            this.folderMatchingOptions = this.appConfigService.get('folders.match-options');
            isAllowed = this.isParentFolderAllowed(file);
        }
        return isAllowed;
    }
    isParentFolderAllowed(file) {
        let isAllowed = true;
        const currentFile = file.file;
        const fileRelativePath = currentFile.webkitRelativePath ? currentFile.webkitRelativePath : file.options.path;
        if (currentFile && fileRelativePath) {
            isAllowed =
                this.excludedFoldersList.filter((folderToExclude) => {
                    return fileRelativePath
                        .split('/')
                        .some((pathElement) => {
                        const minimatch = new Minimatch(folderToExclude, this.folderMatchingOptions);
                        return minimatch.match(pathElement);
                    });
                }).length === 0;
        }
        return isAllowed;
    }
    isFileNameAllowed(file) {
        return (this.excludedFileList.filter((pattern) => {
            const minimatch = new Minimatch(pattern, this.matchingOptions);
            return minimatch.match(file.name);
        }).length === 0);
    }
    uploadFilesInTheQueue(successEmitter, errorEmitter) {
        if (!this.activeTask) {
            const file = this.queue.find((currentFile) => currentFile.status === FileUploadStatus.Pending);
            if (file) {
                this.onUploadStarting(file);
                const promise = this.beginUpload(file, successEmitter, errorEmitter);
                this.activeTask = promise;
                this.cache[file.name] = promise;
                const next = () => {
                    this.activeTask = null;
                    setTimeout(() => this.uploadFilesInTheQueue(successEmitter, errorEmitter), 100);
                };
                promise.next = next;
                promise.then(() => next(), () => next());
            }
        }
    }
    cancelUpload(...files) {
        files.forEach((file) => {
            const promise = this.cache[file.name];
            if (promise) {
                if (this.isSaveToAbortFile(file)) {
                    promise.abort();
                }
                this.abortedFile = file.name;
                delete this.cache[file.name];
                promise.next();
            }
            else {
                const performAction = this.getAction(file);
                performAction();
            }
        });
    }
    clearQueue() {
        this.queue = [];
        this.totalComplete = 0;
        this.totalAborted = 0;
        this.totalError = 0;
    }
    getUploadPromise(file) {
        const opts = {
            include: ['allowableOperations']
        };
        if (this.isThumbnailGenerationEnabled) {
            opts.renditions = 'doclib';
        }
        if (file.options && file.options.versioningEnabled !== undefined) {
            opts.versioningEnabled = file.options.versioningEnabled;
        }
        if (file.options.newVersion === true) {
            opts.overwrite = true;
            opts.majorVersion = file.options.majorVersion;
            opts.comment = file.options.comment;
            opts.name = file.name;
        }
        else {
            opts.autoRename = true;
        }
        if (file.options.nodeType) {
            opts.nodeType = file.options.nodeType;
        }
        if (file.id) {
            return this.nodesApi.updateNodeContent(file.id, file.file, opts);
        }
        else {
            const nodeBody = Object.assign({}, file.options);
            delete nodeBody['versioningEnabled'];
            return this.uploadApi.uploadFile(file.file, file.options.path, file.options.parentId, nodeBody, opts);
        }
    }
    beginUpload(file, successEmitter, errorEmitter) {
        const promise = this.getUploadPromise(file);
        promise
            .on('progress', (progress) => {
            this.onUploadProgress(file, progress);
        })
            .on('abort', () => {
            this.onUploadAborted(file);
            if (successEmitter) {
                successEmitter.emit({ value: 'File aborted' });
            }
        })
            .on('error', (err) => {
            this.onUploadError(file, err);
            if (errorEmitter) {
                errorEmitter.emit({ value: 'Error file uploaded' });
            }
        })
            .on('success', (data) => {
            if (this.abortedFile === file.name) {
                this.onUploadAborted(file);
                if (file.id === undefined) {
                    this.deleteAbortedNode(data.entry.id);
                }
                else {
                    this.deleteAbortedNodeVersion(data.entry.id, data.entry.properties['cm:versionLabel']);
                }
                if (successEmitter) {
                    successEmitter.emit({ value: 'File deleted' });
                }
            }
            else {
                this.onUploadComplete(file, data);
                if (successEmitter) {
                    successEmitter.emit({ value: data });
                }
            }
        })
            .catch(() => {
        });
        return promise;
    }
    onUploadStarting(file) {
        if (file) {
            file.status = FileUploadStatus.Starting;
            const event = new FileUploadEvent(file, FileUploadStatus.Starting);
            this.fileUpload.next(event);
            this.fileUploadStarting.next(event);
        }
    }
    onUploadProgress(file, progress) {
        if (file) {
            file.progress = progress;
            file.status = FileUploadStatus.Progress;
            const event = new FileUploadEvent(file, FileUploadStatus.Progress);
            this.fileUpload.next(event);
            this.fileUploadProgress.next(event);
        }
    }
    onUploadError(file, error) {
        if (file) {
            file.errorCode = (error || {}).status;
            file.status = FileUploadStatus.Error;
            this.totalError++;
            const promise = this.cache[file.name];
            if (promise) {
                delete this.cache[file.name];
            }
            const event = new FileUploadErrorEvent(file, error, this.totalError);
            this.fileUpload.next(event);
            this.fileUploadError.next(event);
        }
    }
    onUploadComplete(file, data) {
        if (file) {
            file.status = FileUploadStatus.Complete;
            file.data = data;
            this.totalComplete++;
            const promise = this.cache[file.name];
            if (promise) {
                delete this.cache[file.name];
            }
            const event = new FileUploadCompleteEvent(file, this.totalComplete, data, this.totalAborted);
            this.fileUpload.next(event);
            this.fileUploadComplete.next(event);
        }
    }
    onUploadAborted(file) {
        if (file) {
            file.status = FileUploadStatus.Aborted;
            this.totalAborted++;
            const event = new FileUploadEvent(file, FileUploadStatus.Aborted);
            this.fileUpload.next(event);
            this.fileUploadAborted.next(event);
        }
    }
    onUploadCancelled(file) {
        if (file) {
            file.status = FileUploadStatus.Cancelled;
            const event = new FileUploadEvent(file, FileUploadStatus.Cancelled);
            this.fileUpload.next(event);
            this.fileUploadCancelled.next(event);
        }
    }
    onUploadDeleted(file) {
        if (file) {
            file.status = FileUploadStatus.Deleted;
            this.totalComplete--;
            const event = new FileUploadDeleteEvent(file, this.totalComplete);
            this.fileUpload.next(event);
            this.fileUploadDeleted.next(event);
        }
    }
    getAction(file) {
        const actions = {
            [FileUploadStatus.Pending]: () => this.onUploadCancelled(file),
            [FileUploadStatus.Deleted]: () => this.onUploadDeleted(file),
            [FileUploadStatus.Error]: () => this.onUploadError(file, null)
        };
        return actions[file.status];
    }
    deleteAbortedNode(nodeId) {
        this.nodesApi.deleteNode(nodeId, { permanent: true })
            .then(() => (this.abortedFile = undefined));
    }
    deleteAbortedNodeVersion(nodeId, versionId) {
        this.versionsApi.deleteVersion(nodeId, versionId)
            .then(() => (this.abortedFile = undefined));
    }
    isSaveToAbortFile(file) {
        return (file.size > MIN_CANCELLABLE_FILE_SIZE &&
            file.progress.percent < MAX_CANCELLABLE_FILE_PERCENTAGE);
    }
}
UploadService.ɵprov = i0.ɵɵdefineInjectable({ factory: function UploadService_Factory() { return new UploadService(i0.ɵɵinject(i1.AlfrescoApiService), i0.ɵɵinject(i2.AppConfigService), i0.ɵɵinject(i3.DiscoveryApiService)); }, token: UploadService, providedIn: "root" });
UploadService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
UploadService.ctorParameters = () => [
    { type: AlfrescoApiService },
    { type: AppConfigService },
    { type: DiscoveryApiService }
];
//# sourceMappingURL=data:application/json;base64,