import { Injectable } from '@angular/core';
import { AlfrescoApiService } from './alfresco-api.service';
import { from } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "./alfresco-api.service";
export const JSON_TYPE = ['application/json'];
export class OAuth2Service {
    constructor(alfrescoApiService) {
        this.alfrescoApiService = alfrescoApiService;
    }
    get apiClient() {
        return this.alfrescoApiService.getInstance().oauth2Auth;
    }
    request(opts) {
        return from(this.apiClient.callCustomApi(opts.url, opts.httpMethod, opts.pathParams, opts.queryParams, {}, {}, opts.bodyParam, JSON_TYPE, JSON_TYPE, Object));
    }
    get(opts) {
        return this.request(Object.assign(Object.assign({}, opts), { httpMethod: 'GET' }));
    }
    put(opts) {
        return this.request(Object.assign(Object.assign({}, opts), { httpMethod: 'PUT' }));
    }
    post(opts) {
        return this.request(Object.assign(Object.assign({}, opts), { httpMethod: 'POST' }));
    }
    delete(opts) {
        return this.request(Object.assign(Object.assign({}, opts), { httpMethod: 'DELETE' }));
    }
}
OAuth2Service.ɵprov = i0.ɵɵdefineInjectable({ factory: function OAuth2Service_Factory() { return new OAuth2Service(i0.ɵɵinject(i1.AlfrescoApiService)); }, token: OAuth2Service, providedIn: "root" });
OAuth2Service.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] }
];
OAuth2Service.ctorParameters = () => [
    { type: AlfrescoApiService }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib2F1dGgyLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiL2hvbWUvdHJhdmlzL2J1aWxkL0FsZnJlc2NvL2FsZnJlc2NvLW5nMi1jb21wb25lbnRzL2xpYi9jb3JlLyIsInNvdXJjZXMiOlsic2VydmljZXMvb2F1dGgyLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBaUJBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDNUQsT0FBTyxFQUFjLElBQUksRUFBRSxNQUFNLE1BQU0sQ0FBQzs7O0FBR3hDLE1BQU0sQ0FBQyxNQUFNLFNBQVMsR0FBRyxDQUFDLGtCQUFrQixDQUFDLENBQUM7QUFXOUMsTUFBTSxPQUFPLGFBQWE7SUFDdEIsWUFBb0Isa0JBQXNDO1FBQXRDLHVCQUFrQixHQUFsQixrQkFBa0IsQ0FBb0I7SUFBRyxDQUFDO0lBRTlELElBQUksU0FBUztRQUNULE9BQU8sSUFBSSxDQUFDLGtCQUFrQixDQUFDLFdBQVcsRUFBRSxDQUFDLFVBQVUsQ0FBQztJQUM1RCxDQUFDO0lBRUQsT0FBTyxDQUFJLElBQXlCO1FBQ2hDLE9BQU8sSUFBSSxDQUNQLElBQUksQ0FBQyxTQUFTLENBQUMsYUFBYSxDQUN4QixJQUFJLENBQUMsR0FBRyxFQUNSLElBQUksQ0FBQyxVQUFVLEVBQ2YsSUFBSSxDQUFDLFVBQVUsRUFDZixJQUFJLENBQUMsV0FBVyxFQUNoQixFQUFFLEVBQ0YsRUFBRSxFQUNGLElBQUksQ0FBQyxTQUFTLEVBQ2QsU0FBUyxFQUNULFNBQVMsRUFDVCxNQUFNLENBQ1QsQ0FDSixDQUFDO0lBQ04sQ0FBQztJQUVELEdBQUcsQ0FBSSxJQUF5QjtRQUM1QixPQUFPLElBQUksQ0FBQyxPQUFPLGlDQUNaLElBQUksS0FDUCxVQUFVLEVBQUUsS0FBSyxJQUNuQixDQUFDO0lBQ1AsQ0FBQztJQUVELEdBQUcsQ0FBSSxJQUF5QjtRQUM1QixPQUFPLElBQUksQ0FBQyxPQUFPLGlDQUNaLElBQUksS0FDUCxVQUFVLEVBQUUsS0FBSyxJQUNuQixDQUFDO0lBQ1AsQ0FBQztJQUVELElBQUksQ0FBSSxJQUF5QjtRQUM3QixPQUFPLElBQUksQ0FBQyxPQUFPLGlDQUNaLElBQUksS0FDUCxVQUFVLEVBQUUsTUFBTSxJQUNwQixDQUFDO0lBQ1AsQ0FBQztJQUVELE1BQU0sQ0FBSSxJQUF5QjtRQUMvQixPQUFPLElBQUksQ0FBQyxPQUFPLGlDQUNaLElBQUksS0FDUCxVQUFVLEVBQUUsUUFBUSxJQUN0QixDQUFDO0lBQ1AsQ0FBQzs7OztZQW5ESixVQUFVLFNBQUMsRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFOzs7WUFkekIsa0JBQWtCIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQWxmcmVzY29BcGlTZXJ2aWNlIH0gZnJvbSAnLi9hbGZyZXNjby1hcGkuc2VydmljZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBmcm9tIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBPYXV0aDJBdXRoIH0gZnJvbSAnQGFsZnJlc2NvL2pzLWFwaSc7XG5cbmV4cG9ydCBjb25zdCBKU09OX1RZUEUgPSBbJ2FwcGxpY2F0aW9uL2pzb24nXTtcblxuZXhwb3J0IGludGVyZmFjZSBPQXV0aDJSZXF1ZXN0UGFyYW1zIHtcbiAgICB1cmw6IHN0cmluZztcbiAgICBodHRwTWV0aG9kPzogc3RyaW5nO1xuICAgIHBhdGhQYXJhbXM/OiBhbnk7XG4gICAgcXVlcnlQYXJhbXM/OiBhbnk7XG4gICAgYm9keVBhcmFtPzogYW55O1xufVxuXG5ASW5qZWN0YWJsZSh7IHByb3ZpZGVkSW46ICdyb290JyB9KVxuZXhwb3J0IGNsYXNzIE9BdXRoMlNlcnZpY2Uge1xuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgYWxmcmVzY29BcGlTZXJ2aWNlOiBBbGZyZXNjb0FwaVNlcnZpY2UpIHt9XG5cbiAgICBnZXQgYXBpQ2xpZW50KCk6IE9hdXRoMkF1dGgge1xuICAgICAgICByZXR1cm4gdGhpcy5hbGZyZXNjb0FwaVNlcnZpY2UuZ2V0SW5zdGFuY2UoKS5vYXV0aDJBdXRoO1xuICAgIH1cblxuICAgIHJlcXVlc3Q8VD4ob3B0czogT0F1dGgyUmVxdWVzdFBhcmFtcyk6IE9ic2VydmFibGU8VD4ge1xuICAgICAgICByZXR1cm4gZnJvbShcbiAgICAgICAgICAgIHRoaXMuYXBpQ2xpZW50LmNhbGxDdXN0b21BcGkoXG4gICAgICAgICAgICAgICAgb3B0cy51cmwsXG4gICAgICAgICAgICAgICAgb3B0cy5odHRwTWV0aG9kLFxuICAgICAgICAgICAgICAgIG9wdHMucGF0aFBhcmFtcyxcbiAgICAgICAgICAgICAgICBvcHRzLnF1ZXJ5UGFyYW1zLFxuICAgICAgICAgICAgICAgIHt9LFxuICAgICAgICAgICAgICAgIHt9LFxuICAgICAgICAgICAgICAgIG9wdHMuYm9keVBhcmFtLFxuICAgICAgICAgICAgICAgIEpTT05fVFlQRSxcbiAgICAgICAgICAgICAgICBKU09OX1RZUEUsXG4gICAgICAgICAgICAgICAgT2JqZWN0XG4gICAgICAgICAgICApXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgZ2V0PFQ+KG9wdHM6IE9BdXRoMlJlcXVlc3RQYXJhbXMpOiBPYnNlcnZhYmxlPFQ+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVxdWVzdCh7XG4gICAgICAgICAgICAuLi5vcHRzLFxuICAgICAgICAgICAgaHR0cE1ldGhvZDogJ0dFVCdcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHV0PFQ+KG9wdHM6IE9BdXRoMlJlcXVlc3RQYXJhbXMpOiBPYnNlcnZhYmxlPFQ+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVxdWVzdCh7XG4gICAgICAgICAgICAuLi5vcHRzLFxuICAgICAgICAgICAgaHR0cE1ldGhvZDogJ1BVVCdcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcG9zdDxUPihvcHRzOiBPQXV0aDJSZXF1ZXN0UGFyYW1zKTogT2JzZXJ2YWJsZTxUPiB7XG4gICAgICAgIHJldHVybiB0aGlzLnJlcXVlc3Qoe1xuICAgICAgICAgICAgLi4ub3B0cyxcbiAgICAgICAgICAgIGh0dHBNZXRob2Q6ICdQT1NUJ1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBkZWxldGU8VD4ob3B0czogT0F1dGgyUmVxdWVzdFBhcmFtcyk6IE9ic2VydmFibGU8VD4ge1xuICAgICAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KHtcbiAgICAgICAgICAgIC4uLm9wdHMsXG4gICAgICAgICAgICBodHRwTWV0aG9kOiAnREVMRVRFJ1xuICAgICAgICB9KTtcbiAgICB9XG59XG4iXX0=