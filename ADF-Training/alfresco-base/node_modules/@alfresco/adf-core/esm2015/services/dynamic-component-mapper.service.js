/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { getType } from './get-type';
export class DynamicComponentResolver {
    static fromType(type) {
        return getType(type);
    }
}
export class DynamicComponentMapper {
    constructor() {
        this.defaultValue = undefined;
        this.types = {};
    }
    getComponentTypeResolver(type, defaultValue = this.defaultValue) {
        if (type) {
            return this.types[type] || DynamicComponentResolver.fromType(defaultValue);
        }
        return DynamicComponentResolver.fromType(defaultValue);
    }
    setComponentTypeResolver(type, resolver, override = true) {
        if (!type) {
            throw new Error(`type is null or not defined`);
        }
        if (!resolver) {
            throw new Error(`resolver is null or not defined`);
        }
        const existing = this.types[type];
        if (existing && !override) {
            throw new Error(`already mapped, use override option if you intend replacing existing mapping.`);
        }
        this.types[type] = resolver;
    }
    register(components, override = false) {
        if (components) {
            for (const type of Object.keys(components)) {
                this.setComponentTypeResolver(type, components[type], override);
            }
        }
    }
    resolveComponentType(model, defaultValue = this.defaultValue) {
        if (model) {
            const resolver = this.getComponentTypeResolver(model.type, defaultValue);
            return resolver(model);
        }
        return defaultValue;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHluYW1pYy1jb21wb25lbnQtbWFwcGVyLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiL2hvbWUvdHJhdmlzL2J1aWxkL0FsZnJlc2NvL2FsZnJlc2NvLW5nMi1jb21wb25lbnRzL2xpYi9jb3JlLyIsInNvdXJjZXMiOlsic2VydmljZXMvZHluYW1pYy1jb21wb25lbnQtbWFwcGVyLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7OztHQWVHO0FBR0gsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLFlBQVksQ0FBQztBQUlyQyxNQUFNLE9BQU8sd0JBQXdCO0lBQ2pDLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBYztRQUMxQixPQUFPLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN6QixDQUFDO0NBQ0o7QUFFRCxNQUFNLE9BQWdCLHNCQUFzQjtJQUE1QztRQUVjLGlCQUFZLEdBQWEsU0FBUyxDQUFDO1FBQ25DLFVBQUssR0FBdUQsRUFBRSxDQUFDO0lBOEQ3RSxDQUFDO0lBdERHLHdCQUF3QixDQUFDLElBQVksRUFBRSxlQUF5QixJQUFJLENBQUMsWUFBWTtRQUM3RSxJQUFJLElBQUksRUFBRTtZQUNOLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSx3QkFBd0IsQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDLENBQUM7U0FDOUU7UUFDRCxPQUFPLHdCQUF3QixDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUMzRCxDQUFDO0lBUUQsd0JBQXdCLENBQUMsSUFBWSxFQUFFLFFBQXlDLEVBQUUsV0FBb0IsSUFBSTtRQUN0RyxJQUFJLENBQUMsSUFBSSxFQUFFO1lBQ1AsTUFBTSxJQUFJLEtBQUssQ0FBQyw2QkFBNkIsQ0FBQyxDQUFDO1NBQ2xEO1FBRUQsSUFBSSxDQUFDLFFBQVEsRUFBRTtZQUNYLE1BQU0sSUFBSSxLQUFLLENBQUMsaUNBQWlDLENBQUMsQ0FBQztTQUN0RDtRQUVELE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDbEMsSUFBSSxRQUFRLElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDdkIsTUFBTSxJQUFJLEtBQUssQ0FBQywrRUFBK0UsQ0FBQyxDQUFDO1NBQ3BHO1FBRUQsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxRQUFRLENBQUM7SUFDaEMsQ0FBQztJQUtELFFBQVEsQ0FBQyxVQUE4RCxFQUFFLFdBQW9CLEtBQUs7UUFDOUYsSUFBSSxVQUFVLEVBQUU7WUFDWixLQUFLLE1BQU0sSUFBSSxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLEVBQUU7Z0JBQ3hDLElBQUksQ0FBQyx3QkFBd0IsQ0FBQyxJQUFJLEVBQUUsVUFBVSxDQUFDLElBQUksQ0FBQyxFQUFFLFFBQVEsQ0FBQyxDQUFDO2FBQ25FO1NBQ0o7SUFDTCxDQUFDO0lBUUQsb0JBQW9CLENBQUMsS0FBNEIsRUFBRSxlQUF5QixJQUFJLENBQUMsWUFBWTtRQUN6RixJQUFJLEtBQUssRUFBRTtZQUNQLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyx3QkFBd0IsQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLFlBQVksQ0FBQyxDQUFDO1lBQ3pFLE9BQU8sUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQzFCO1FBQ0QsT0FBTyxZQUFZLENBQUM7SUFDeEIsQ0FBQztDQUNKIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgVHlwZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgZ2V0VHlwZSB9IGZyb20gJy4vZ2V0LXR5cGUnO1xuXG5leHBvcnQgaW50ZXJmYWNlIER5bmFtaWNDb21wb25lbnRNb2RlbCB7IHR5cGU6IHN0cmluZzsgfVxuZXhwb3J0IHR5cGUgRHluYW1pY0NvbXBvbmVudFJlc29sdmVGdW5jdGlvbiA9IChtb2RlbDogRHluYW1pY0NvbXBvbmVudE1vZGVsKSA9PiBUeXBlPHt9PjtcbmV4cG9ydCBjbGFzcyBEeW5hbWljQ29tcG9uZW50UmVzb2x2ZXIge1xuICAgIHN0YXRpYyBmcm9tVHlwZSh0eXBlOiBUeXBlPHt9Pik6IER5bmFtaWNDb21wb25lbnRSZXNvbHZlRnVuY3Rpb24ge1xuICAgICAgICByZXR1cm4gZ2V0VHlwZSh0eXBlKTtcbiAgICB9XG59XG5cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBEeW5hbWljQ29tcG9uZW50TWFwcGVyIHtcblxuICAgIHByb3RlY3RlZCBkZWZhdWx0VmFsdWU6IFR5cGU8e30+ID0gdW5kZWZpbmVkO1xuICAgIHByb3RlY3RlZCB0eXBlczogeyBba2V5OiBzdHJpbmddOiBEeW5hbWljQ29tcG9uZW50UmVzb2x2ZUZ1bmN0aW9uIH0gPSB7fTtcblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGN1cnJlbnRseSBhY3RpdmUgRHluYW1pY0NvbXBvbmVudFJlc29sdmVGdW5jdGlvbiBmb3IgYSBmaWVsZCB0eXBlLlxuICAgICAqIEBwYXJhbSB0eXBlIFRoZSB0eXBlIHdob3NlIHJlc29sdmVyIHlvdSB3YW50XG4gICAgICogQHBhcmFtIGRlZmF1bHRWYWx1ZSBEZWZhdWx0IHR5cGUgcmV0dXJuZWQgZm9yIHR5cGVzIHRoYXQgYXJlIG5vdCB5ZXQgbWFwcGVkXG4gICAgICogQHJldHVybnMgUmVzb2x2ZXIgZnVuY3Rpb25cbiAgICAgKi9cbiAgICBnZXRDb21wb25lbnRUeXBlUmVzb2x2ZXIodHlwZTogc3RyaW5nLCBkZWZhdWx0VmFsdWU6IFR5cGU8e30+ID0gdGhpcy5kZWZhdWx0VmFsdWUpOiBEeW5hbWljQ29tcG9uZW50UmVzb2x2ZUZ1bmN0aW9uIHtcbiAgICAgICAgaWYgKHR5cGUpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnR5cGVzW3R5cGVdIHx8IER5bmFtaWNDb21wb25lbnRSZXNvbHZlci5mcm9tVHlwZShkZWZhdWx0VmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBEeW5hbWljQ29tcG9uZW50UmVzb2x2ZXIuZnJvbVR5cGUoZGVmYXVsdFZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIG9yIG9wdGlvbmFsbHkgcmVwbGFjZXMgYSBEeW5hbWljQ29tcG9uZW50UmVzb2x2ZUZ1bmN0aW9uIGZvciBhIGZpZWxkIHR5cGUuXG4gICAgICogQHBhcmFtIHR5cGUgVGhlIHR5cGUgd2hvc2UgcmVzb2x2ZXIgeW91IHdhbnQgdG8gc2V0XG4gICAgICogQHBhcmFtIHJlc29sdmVyIFRoZSBuZXcgcmVzb2x2ZXIgZnVuY3Rpb25cbiAgICAgKiBAcGFyYW0gb3ZlcnJpZGUgVGhlIG5ldyByZXNvbHZlciB3aWxsIG9ubHkgcmVwbGFjZSBhbiBleGlzdGluZyBvbmUgaWYgdGhpcyBwYXJhbWV0ZXIgaXMgdHJ1ZVxuICAgICAqL1xuICAgIHNldENvbXBvbmVudFR5cGVSZXNvbHZlcih0eXBlOiBzdHJpbmcsIHJlc29sdmVyOiBEeW5hbWljQ29tcG9uZW50UmVzb2x2ZUZ1bmN0aW9uLCBvdmVycmlkZTogYm9vbGVhbiA9IHRydWUpIHtcbiAgICAgICAgaWYgKCF0eXBlKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYHR5cGUgaXMgbnVsbCBvciBub3QgZGVmaW5lZGApO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFyZXNvbHZlcikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGByZXNvbHZlciBpcyBudWxsIG9yIG5vdCBkZWZpbmVkYCk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBleGlzdGluZyA9IHRoaXMudHlwZXNbdHlwZV07XG4gICAgICAgIGlmIChleGlzdGluZyAmJiAhb3ZlcnJpZGUpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgYWxyZWFkeSBtYXBwZWQsIHVzZSBvdmVycmlkZSBvcHRpb24gaWYgeW91IGludGVuZCByZXBsYWNpbmcgZXhpc3RpbmcgbWFwcGluZy5gKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMudHlwZXNbdHlwZV0gPSByZXNvbHZlcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZWdpc3RlciBtdWx0aXBsZSBjb21wb25lbnRzXG4gICAgICovXG4gICAgcmVnaXN0ZXIoY29tcG9uZW50czogeyBba2V5OiBzdHJpbmddOiBEeW5hbWljQ29tcG9uZW50UmVzb2x2ZUZ1bmN0aW9uIH0sIG92ZXJyaWRlOiBib29sZWFuID0gZmFsc2UpIHtcbiAgICAgICAgaWYgKGNvbXBvbmVudHMpIHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgdHlwZSBvZiBPYmplY3Qua2V5cyhjb21wb25lbnRzKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0Q29tcG9uZW50VHlwZVJlc29sdmVyKHR5cGUsIGNvbXBvbmVudHNbdHlwZV0sIG92ZXJyaWRlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEZpbmRzIHRoZSBjb21wb25lbnQgdHlwZSB0aGF0IGlzIG5lZWRlZCB0byByZW5kZXIgYSBmb3JtIGZpZWxkLlxuICAgICAqIEBwYXJhbSBtb2RlbCBGb3JtIGZpZWxkIG1vZGVsIGZvciB0aGUgZmllbGQgdG8gcmVuZGVyXG4gICAgICogQHBhcmFtIGRlZmF1bHRWYWx1ZSBEZWZhdWx0IHR5cGUgcmV0dXJuZWQgZm9yIGZpZWxkIHR5cGVzIHRoYXQgYXJlIG5vdCB5ZXQgbWFwcGVkLlxuICAgICAqIEByZXR1cm5zIENvbXBvbmVudCB0eXBlXG4gICAgICovXG4gICAgcmVzb2x2ZUNvbXBvbmVudFR5cGUobW9kZWw6IER5bmFtaWNDb21wb25lbnRNb2RlbCwgZGVmYXVsdFZhbHVlOiBUeXBlPHt9PiA9IHRoaXMuZGVmYXVsdFZhbHVlKTogVHlwZTx7fT4ge1xuICAgICAgICBpZiAobW9kZWwpIHtcbiAgICAgICAgICAgIGNvbnN0IHJlc29sdmVyID0gdGhpcy5nZXRDb21wb25lbnRUeXBlUmVzb2x2ZXIobW9kZWwudHlwZSwgZGVmYXVsdFZhbHVlKTtcbiAgICAgICAgICAgIHJldHVybiByZXNvbHZlcihtb2RlbCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGRlZmF1bHRWYWx1ZTtcbiAgICB9XG59XG4iXX0=