import { Injectable } from '@angular/core';
import { from, throwError, Subject } from 'rxjs';
import { BpmProductVersionModel, EcmProductVersionModel } from '../models/product-version.model';
import { AlfrescoApiService } from './alfresco-api.service';
import { catchError, map, switchMap, filter, take } from 'rxjs/operators';
import { AboutApi, DiscoveryApi, SystemPropertiesApi } from '@alfresco/js-api';
import { AuthenticationService } from './authentication.service';
import * as i0 from "@angular/core";
import * as i1 from "./alfresco-api.service";
import * as i2 from "./authentication.service";
export class DiscoveryApiService {
    constructor(apiService, authenticationService) {
        this.apiService = apiService;
        this.authenticationService = authenticationService;
        this.ecmProductInfo$ = new Subject();
        this.authenticationService.onLogin
            .pipe(filter(() => { var _a; return (_a = this.apiService.getInstance()) === null || _a === void 0 ? void 0 : _a.isEcmLoggedIn(); }), take(1), switchMap(() => this.getEcmProductInfo()))
            .subscribe((info) => this.ecmProductInfo$.next(info));
    }
    getEcmProductInfo() {
        const discoveryApi = new DiscoveryApi(this.apiService.getInstance());
        return from(discoveryApi.getRepositoryInformation())
            .pipe(map((res) => new EcmProductVersionModel(res)), catchError((err) => throwError(err)));
    }
    getBpmProductInfo() {
        const aboutApi = new AboutApi(this.apiService.getInstance());
        return from(aboutApi.getAppVersion())
            .pipe(map((res) => new BpmProductVersionModel(res)), catchError((err) => throwError(err)));
    }
    getBPMSystemProperties() {
        const systemPropertiesApi = new SystemPropertiesApi(this.apiService.getInstance());
        return from(systemPropertiesApi.getProperties())
            .pipe(map((res) => {
            if ('string' === typeof (res)) {
                throw new Error('Not valid response');
            }
            return res;
        }), catchError((err) => throwError(err.error)));
    }
}
DiscoveryApiService.ɵprov = i0.ɵɵdefineInjectable({ factory: function DiscoveryApiService_Factory() { return new DiscoveryApiService(i0.ɵɵinject(i1.AlfrescoApiService), i0.ɵɵinject(i2.AuthenticationService)); }, token: DiscoveryApiService, providedIn: "root" });
DiscoveryApiService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
DiscoveryApiService.ctorParameters = () => [
    { type: AlfrescoApiService },
    { type: AuthenticationService }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlzY292ZXJ5LWFwaS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Ii9ob21lL3RyYXZpcy9idWlsZC9BbGZyZXNjby9hbGZyZXNjby1uZzItY29tcG9uZW50cy9saWIvY29yZS8iLCJzb3VyY2VzIjpbInNlcnZpY2VzL2Rpc2NvdmVyeS1hcGkuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFpQkEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsSUFBSSxFQUFjLFVBQVUsRUFBRSxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDN0QsT0FBTyxFQUFFLHNCQUFzQixFQUFFLHNCQUFzQixFQUFFLE1BQU0saUNBQWlDLENBQUM7QUFDakcsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDNUQsT0FBTyxFQUFFLFVBQVUsRUFBRSxHQUFHLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUMxRSxPQUFPLEVBQUUsUUFBUSxFQUFFLFlBQVksRUFBRSxtQkFBbUIsRUFBa0MsTUFBTSxrQkFBa0IsQ0FBQztBQUMvRyxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQzs7OztBQUtqRSxNQUFNLE9BQU8sbUJBQW1CO0lBTzVCLFlBQ1ksVUFBOEIsRUFDOUIscUJBQTRDO1FBRDVDLGVBQVUsR0FBVixVQUFVLENBQW9CO1FBQzlCLDBCQUFxQixHQUFyQixxQkFBcUIsQ0FBdUI7UUFKeEQsb0JBQWUsR0FBRyxJQUFJLE9BQU8sRUFBMEIsQ0FBQztRQU1wRCxJQUFJLENBQUMscUJBQXFCLENBQUMsT0FBTzthQUM3QixJQUFJLENBQ0QsTUFBTSxDQUFDLEdBQUcsRUFBRSx3QkFBQyxJQUFJLENBQUMsVUFBVSxDQUFDLFdBQVcsRUFBRSwwQ0FBRSxhQUFhLEtBQUUsQ0FBQyxFQUM1RCxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQ1AsU0FBUyxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxDQUFDLENBQzVDO2FBQ0EsU0FBUyxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQzlELENBQUM7SUFNTSxpQkFBaUI7UUFDcEIsTUFBTSxZQUFZLEdBQUcsSUFBSSxZQUFZLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDO1FBRXJFLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyx3QkFBd0IsRUFBRSxDQUFDO2FBQy9DLElBQUksQ0FDRCxHQUFHLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLElBQUksc0JBQXNCLENBQUMsR0FBRyxDQUFDLENBQUMsRUFDN0MsVUFBVSxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FDdkMsQ0FBQztJQUNWLENBQUM7SUFNTSxpQkFBaUI7UUFDcEIsTUFBTSxRQUFRLEdBQUcsSUFBSSxRQUFRLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDO1FBRTdELE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxhQUFhLEVBQUUsQ0FBQzthQUNoQyxJQUFJLENBQ0QsR0FBRyxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxJQUFJLHNCQUFzQixDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQzdDLFVBQVUsQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQ3ZDLENBQUM7SUFDVixDQUFDO0lBRU0sc0JBQXNCO1FBQ3pCLE1BQU0sbUJBQW1CLEdBQUcsSUFBSSxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUM7UUFFbkYsT0FBTyxJQUFJLENBQUMsbUJBQW1CLENBQUMsYUFBYSxFQUFFLENBQUM7YUFDM0MsSUFBSSxDQUNELEdBQUcsQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFO1lBQ1IsSUFBSSxRQUFRLEtBQUssT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFO2dCQUMzQixNQUFNLElBQUksS0FBSyxDQUFDLG9CQUFvQixDQUFDLENBQUM7YUFDekM7WUFDRCxPQUFPLEdBQUcsQ0FBQztRQUNmLENBQUMsQ0FBQyxFQUNGLFVBQVUsQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUM3QyxDQUFDO0lBQ1YsQ0FBQzs7OztZQWhFSixVQUFVLFNBQUM7Z0JBQ1IsVUFBVSxFQUFFLE1BQU07YUFDckI7OztZQVBRLGtCQUFrQjtZQUdsQixxQkFBcUIiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBmcm9tLCBPYnNlcnZhYmxlLCB0aHJvd0Vycm9yLCBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBCcG1Qcm9kdWN0VmVyc2lvbk1vZGVsLCBFY21Qcm9kdWN0VmVyc2lvbk1vZGVsIH0gZnJvbSAnLi4vbW9kZWxzL3Byb2R1Y3QtdmVyc2lvbi5tb2RlbCc7XG5pbXBvcnQgeyBBbGZyZXNjb0FwaVNlcnZpY2UgfSBmcm9tICcuL2FsZnJlc2NvLWFwaS5zZXJ2aWNlJztcbmltcG9ydCB7IGNhdGNoRXJyb3IsIG1hcCwgc3dpdGNoTWFwLCBmaWx0ZXIsIHRha2UgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBBYm91dEFwaSwgRGlzY292ZXJ5QXBpLCBTeXN0ZW1Qcm9wZXJ0aWVzQXBpLCBTeXN0ZW1Qcm9wZXJ0aWVzUmVwcmVzZW50YXRpb24gfSBmcm9tICdAYWxmcmVzY28vanMtYXBpJztcbmltcG9ydCB7IEF1dGhlbnRpY2F0aW9uU2VydmljZSB9IGZyb20gJy4vYXV0aGVudGljYXRpb24uc2VydmljZSc7XG5cbkBJbmplY3RhYmxlKHtcbiAgICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgRGlzY292ZXJ5QXBpU2VydmljZSB7XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHByb2R1Y3QgaW5mb3JtYXRpb24gZm9yIENvbnRlbnQgU2VydmljZXMuXG4gICAgICovXG4gICAgZWNtUHJvZHVjdEluZm8kID0gbmV3IFN1YmplY3Q8RWNtUHJvZHVjdFZlcnNpb25Nb2RlbD4oKTtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBwcml2YXRlIGFwaVNlcnZpY2U6IEFsZnJlc2NvQXBpU2VydmljZSxcbiAgICAgICAgcHJpdmF0ZSBhdXRoZW50aWNhdGlvblNlcnZpY2U6IEF1dGhlbnRpY2F0aW9uU2VydmljZSkge1xuXG4gICAgICAgIHRoaXMuYXV0aGVudGljYXRpb25TZXJ2aWNlLm9uTG9naW5cbiAgICAgICAgICAgIC5waXBlKFxuICAgICAgICAgICAgICAgIGZpbHRlcigoKSA9PiB0aGlzLmFwaVNlcnZpY2UuZ2V0SW5zdGFuY2UoKT8uaXNFY21Mb2dnZWRJbigpKSxcbiAgICAgICAgICAgICAgICB0YWtlKDEpLFxuICAgICAgICAgICAgICAgIHN3aXRjaE1hcCgoKSA9PiB0aGlzLmdldEVjbVByb2R1Y3RJbmZvKCkpXG4gICAgICAgICAgICApXG4gICAgICAgICAgICAuc3Vic2NyaWJlKChpbmZvKSA9PiB0aGlzLmVjbVByb2R1Y3RJbmZvJC5uZXh0KGluZm8pKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHByb2R1Y3QgaW5mb3JtYXRpb24gZm9yIENvbnRlbnQgU2VydmljZXMuXG4gICAgICogQHJldHVybnMgUHJvZHVjdFZlcnNpb25Nb2RlbCBjb250YWluaW5nIHByb2R1Y3QgZGV0YWlsc1xuICAgICAqL1xuICAgIHB1YmxpYyBnZXRFY21Qcm9kdWN0SW5mbygpOiBPYnNlcnZhYmxlPEVjbVByb2R1Y3RWZXJzaW9uTW9kZWw+IHtcbiAgICAgICAgY29uc3QgZGlzY292ZXJ5QXBpID0gbmV3IERpc2NvdmVyeUFwaSh0aGlzLmFwaVNlcnZpY2UuZ2V0SW5zdGFuY2UoKSk7XG5cbiAgICAgICAgcmV0dXJuIGZyb20oZGlzY292ZXJ5QXBpLmdldFJlcG9zaXRvcnlJbmZvcm1hdGlvbigpKVxuICAgICAgICAgICAgLnBpcGUoXG4gICAgICAgICAgICAgICAgbWFwKChyZXMpID0+IG5ldyBFY21Qcm9kdWN0VmVyc2lvbk1vZGVsKHJlcykpLFxuICAgICAgICAgICAgICAgIGNhdGNoRXJyb3IoKGVycikgPT4gdGhyb3dFcnJvcihlcnIpKVxuICAgICAgICAgICAgKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHByb2R1Y3QgaW5mb3JtYXRpb24gZm9yIFByb2Nlc3MgU2VydmljZXMuXG4gICAgICogQHJldHVybnMgUHJvZHVjdFZlcnNpb25Nb2RlbCBjb250YWluaW5nIHByb2R1Y3QgZGV0YWlsc1xuICAgICAqL1xuICAgIHB1YmxpYyBnZXRCcG1Qcm9kdWN0SW5mbygpOiBPYnNlcnZhYmxlPEJwbVByb2R1Y3RWZXJzaW9uTW9kZWw+IHtcbiAgICAgICAgY29uc3QgYWJvdXRBcGkgPSBuZXcgQWJvdXRBcGkodGhpcy5hcGlTZXJ2aWNlLmdldEluc3RhbmNlKCkpO1xuXG4gICAgICAgIHJldHVybiBmcm9tKGFib3V0QXBpLmdldEFwcFZlcnNpb24oKSlcbiAgICAgICAgICAgIC5waXBlKFxuICAgICAgICAgICAgICAgIG1hcCgocmVzKSA9PiBuZXcgQnBtUHJvZHVjdFZlcnNpb25Nb2RlbChyZXMpKSxcbiAgICAgICAgICAgICAgICBjYXRjaEVycm9yKChlcnIpID0+IHRocm93RXJyb3IoZXJyKSlcbiAgICAgICAgICAgICk7XG4gICAgfVxuXG4gICAgcHVibGljIGdldEJQTVN5c3RlbVByb3BlcnRpZXMoKTogT2JzZXJ2YWJsZTxTeXN0ZW1Qcm9wZXJ0aWVzUmVwcmVzZW50YXRpb24+IHtcbiAgICAgICAgY29uc3Qgc3lzdGVtUHJvcGVydGllc0FwaSA9IG5ldyBTeXN0ZW1Qcm9wZXJ0aWVzQXBpKHRoaXMuYXBpU2VydmljZS5nZXRJbnN0YW5jZSgpKTtcblxuICAgICAgICByZXR1cm4gZnJvbShzeXN0ZW1Qcm9wZXJ0aWVzQXBpLmdldFByb3BlcnRpZXMoKSlcbiAgICAgICAgICAgIC5waXBlKFxuICAgICAgICAgICAgICAgIG1hcCgocmVzKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmICgnc3RyaW5nJyA9PT0gdHlwZW9mIChyZXMpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vdCB2YWxpZCByZXNwb25zZScpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXM7XG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgY2F0Y2hFcnJvcigoZXJyKSA9PiB0aHJvd0Vycm9yKGVyci5lcnJvcikpXG4gICAgICAgICAgICApO1xuICAgIH1cbn1cbiJdfQ==