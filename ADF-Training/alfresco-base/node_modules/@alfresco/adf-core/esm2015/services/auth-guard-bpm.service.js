import { __awaiter } from "tslib";
import { Injectable } from '@angular/core';
import { Router } from '@angular/router';
import { AppConfigService } from '../app-config/app-config.service';
import { AuthenticationService } from './authentication.service';
import { AuthGuardBase } from './auth-guard-base';
import { MatDialog } from '@angular/material/dialog';
import { StorageService } from './storage.service';
import * as i0 from "@angular/core";
import * as i1 from "./authentication.service";
import * as i2 from "@angular/router";
import * as i3 from "../app-config/app-config.service";
import * as i4 from "@angular/material/dialog";
import * as i5 from "./storage.service";
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './authentication.service';
import * as ɵngcc2 from '@angular/router';
import * as ɵngcc3 from '../app-config/app-config.service';
import * as ɵngcc4 from '@angular/material/dialog';
import * as ɵngcc5 from './storage.service';
export class AuthGuardBpm extends AuthGuardBase {
    constructor(authenticationService, router, appConfigService, dialog, storageService) {
        super(authenticationService, router, appConfigService, dialog, storageService);
    }
    checkLogin(_, redirectUrl) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.authenticationService.isBpmLoggedIn() || this.withCredentials) {
                return true;
            }
            return this.redirectToUrl(redirectUrl);
        });
    }
}
AuthGuardBpm.ɵfac = function AuthGuardBpm_Factory(t) { return new (t || AuthGuardBpm)(ɵngcc0.ɵɵinject(ɵngcc1.AuthenticationService), ɵngcc0.ɵɵinject(ɵngcc2.Router), ɵngcc0.ɵɵinject(ɵngcc3.AppConfigService), ɵngcc0.ɵɵinject(ɵngcc4.MatDialog), ɵngcc0.ɵɵinject(ɵngcc5.StorageService)); };
AuthGuardBpm.ɵprov = i0.ɵɵdefineInjectable({ factory: function AuthGuardBpm_Factory() { return new AuthGuardBpm(i0.ɵɵinject(i1.AuthenticationService), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.AppConfigService), i0.ɵɵinject(i4.MatDialog), i0.ɵɵinject(i5.StorageService)); }, token: AuthGuardBpm, providedIn: "root" });
AuthGuardBpm.ctorParameters = () => [
    { type: AuthenticationService },
    { type: Router },
    { type: AppConfigService },
    { type: MatDialog },
    { type: StorageService }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AuthGuardBpm, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc1.AuthenticationService }, { type: ɵngcc2.Router }, { type: ɵngcc3.AppConfigService }, { type: ɵngcc4.MatDialog }, { type: ɵngcc5.StorageService }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0aC1ndWFyZC1icG0uc2VydmljZS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vaG9tZS90cmF2aXMvYnVpbGQvQWxmcmVzY28vYWxmcmVzY28tbmcyLWNvbXBvbmVudHMvbGliL2NvcmUvc2VydmljZXMvYXV0aC1ndWFyZC1icG0uc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBaUJBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUEwQixNQUFNLEVBQVcsTUFBTSxpQkFBaUIsQ0FBQztBQUMxRSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQztBQUNwRSxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUNqRSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDbEQsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQ3JELE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUNuRDtBQUVzQjtBQUVzQjtBQUVaO0FBQ047QUFDZ0I7Ozs7Ozs7QUFKMUMsTUFBTSxPQUFPLFlBQWEsU0FBUSxhQUFhO0FBQy9DLElBQ0ksWUFBWSxxQkFBNEMsRUFDNUMsTUFBYyxFQUNkLGdCQUFrQyxFQUNsQyxNQUFpQixFQUNqQixjQUE4QjtBQUM5QyxRQUFRLEtBQUssQ0FBQyxxQkFBcUIsRUFBRSxNQUFNLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxFQUFFLGNBQWMsQ0FBQyxDQUFDO0FBQ3ZGLElBQUksQ0FBQztBQUNMLElBQ1UsVUFBVSxDQUFDLENBQXlCLEVBQUUsV0FBbUI7QUFBSTtBQUNyQyxZQUExQixJQUFJLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxhQUFhLEVBQUUsSUFBSSxJQUFJLENBQUMsZUFBZSxFQUFFO0FBQ2hGLGdCQUFZLE9BQU8sSUFBSSxDQUFDO0FBQ3hCLGFBQVM7QUFDVCxZQUFRLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxXQUFXLENBQUMsQ0FBQztBQUMvQyxRQUFJLENBQUM7QUFFTCxLQUZLO0FBQ0w7NlJBQUM7QUFDRCwyVEFqQks7QUFBQztFQUhMLFVBQVUsU0FBQyxyQkFHZ0MsWUFSbkMscUJBQXFCO0VBTTFCLFVBQVUsRUFBRSxNQUFNLHBCQU5ZLFlBRkQsTUFBTTtZQVN0QyxaQVQwQyxZQUNsQyxnQkFBZ0I7QUFBSSxZQUdwQixTQUFTO0FBQUksWUFDYixjQUFjO0FBQUc7Ozs7OzsrTUFBRTtBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQWN0aXZhdGVkUm91dGVTbmFwc2hvdCwgUm91dGVyLCBVcmxUcmVlIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcbmltcG9ydCB7IEFwcENvbmZpZ1NlcnZpY2UgfSBmcm9tICcuLi9hcHAtY29uZmlnL2FwcC1jb25maWcuc2VydmljZSc7XG5pbXBvcnQgeyBBdXRoZW50aWNhdGlvblNlcnZpY2UgfSBmcm9tICcuL2F1dGhlbnRpY2F0aW9uLnNlcnZpY2UnO1xuaW1wb3J0IHsgQXV0aEd1YXJkQmFzZSB9IGZyb20gJy4vYXV0aC1ndWFyZC1iYXNlJztcbmltcG9ydCB7IE1hdERpYWxvZyB9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsL2RpYWxvZyc7XG5pbXBvcnQgeyBTdG9yYWdlU2VydmljZSB9IGZyb20gJy4vc3RvcmFnZS5zZXJ2aWNlJztcblxuQEluamVjdGFibGUoe1xuICAgIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBBdXRoR3VhcmRCcG0gZXh0ZW5kcyBBdXRoR3VhcmRCYXNlIHtcblxuICAgIGNvbnN0cnVjdG9yKGF1dGhlbnRpY2F0aW9uU2VydmljZTogQXV0aGVudGljYXRpb25TZXJ2aWNlLFxuICAgICAgICAgICAgICAgIHJvdXRlcjogUm91dGVyLFxuICAgICAgICAgICAgICAgIGFwcENvbmZpZ1NlcnZpY2U6IEFwcENvbmZpZ1NlcnZpY2UsXG4gICAgICAgICAgICAgICAgZGlhbG9nOiBNYXREaWFsb2csXG4gICAgICAgICAgICAgICAgc3RvcmFnZVNlcnZpY2U6IFN0b3JhZ2VTZXJ2aWNlKSB7XG4gICAgICAgIHN1cGVyKGF1dGhlbnRpY2F0aW9uU2VydmljZSwgcm91dGVyLCBhcHBDb25maWdTZXJ2aWNlLCBkaWFsb2csIHN0b3JhZ2VTZXJ2aWNlKTtcbiAgICB9XG5cbiAgICBhc3luYyBjaGVja0xvZ2luKF86IEFjdGl2YXRlZFJvdXRlU25hcHNob3QsIHJlZGlyZWN0VXJsOiBzdHJpbmcpOiBQcm9taXNlPGJvb2xlYW4gfCBVcmxUcmVlPiB7XG4gICAgICAgIGlmICh0aGlzLmF1dGhlbnRpY2F0aW9uU2VydmljZS5pc0JwbUxvZ2dlZEluKCkgfHwgdGhpcy53aXRoQ3JlZGVudGlhbHMpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLnJlZGlyZWN0VG9VcmwocmVkaXJlY3RVcmwpO1xuICAgIH1cbn1cbiJdfQ==