import { __awaiter } from "tslib";
import { Injectable } from '@angular/core';
import { JwtHelperService } from './jwt-helper.service';
import { Router } from '@angular/router';
import { MatDialog } from '@angular/material/dialog';
import { ContentGroups, PeopleContentService } from './people-content.service';
import * as i0 from "@angular/core";
import * as i1 from "./jwt-helper.service";
import * as i2 from "@angular/router";
import * as i3 from "@angular/material/dialog";
import * as i4 from "./people-content.service";
export class AuthGuardSsoRoleService {
    constructor(jwtHelperService, router, dialog, peopleContentService) {
        this.jwtHelperService = jwtHelperService;
        this.router = router;
        this.dialog = dialog;
        this.peopleContentService = peopleContentService;
    }
    canActivate(route) {
        return __awaiter(this, void 0, void 0, function* () {
            let hasRole;
            let hasRealmRole = false;
            let hasClientRole = true;
            if (route.data) {
                if (route.data['roles']) {
                    const rolesToCheck = route.data['roles'];
                    const excludedRoles = route.data['excludedRoles'] || [];
                    const isContentAdmin = rolesToCheck.includes(ContentGroups.ALFRESCO_ADMINISTRATORS) || excludedRoles.includes(ContentGroups.ALFRESCO_ADMINISTRATORS) ? yield this.peopleContentService.isContentAdmin() : false;
                    hasRealmRole = excludedRoles.length ? this.checkAccessWithExcludedRoles(rolesToCheck, excludedRoles, isContentAdmin) : this.hasRoles(rolesToCheck, isContentAdmin);
                }
                if (route.data['clientRoles']) {
                    const clientRoleName = route.params[route.data['clientRoles']];
                    const rolesToCheck = route.data['roles'];
                    hasClientRole = this.jwtHelperService.hasRealmRolesForClientRole(clientRoleName, rolesToCheck);
                }
            }
            hasRole = hasRealmRole && hasClientRole;
            if (!hasRole && route.data && route.data['redirectUrl']) {
                this.router.navigate(['/' + route.data['redirectUrl']]);
            }
            if (!hasRole) {
                this.dialog.closeAll();
            }
            return hasRole;
        });
    }
    checkAccessWithExcludedRoles(rolesToCheck, excludedRoles, isContentAdmin) {
        return this.hasRoles(rolesToCheck, isContentAdmin) && !this.hasRoles(excludedRoles, isContentAdmin);
    }
    hasRoles(rolesToCheck, isContentAdmin) {
        return rolesToCheck.includes(ContentGroups.ALFRESCO_ADMINISTRATORS) ? this.jwtHelperService.hasRealmRoles(rolesToCheck) || isContentAdmin : this.jwtHelperService.hasRealmRoles(rolesToCheck);
    }
}
AuthGuardSsoRoleService.ɵprov = i0.ɵɵdefineInjectable({ factory: function AuthGuardSsoRoleService_Factory() { return new AuthGuardSsoRoleService(i0.ɵɵinject(i1.JwtHelperService), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.MatDialog), i0.ɵɵinject(i4.PeopleContentService)); }, token: AuthGuardSsoRoleService, providedIn: "root" });
AuthGuardSsoRoleService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
AuthGuardSsoRoleService.ctorParameters = () => [
    { type: JwtHelperService },
    { type: Router },
    { type: MatDialog },
    { type: PeopleContentService }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0aC1ndWFyZC1zc28tcm9sZS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Ii9ob21lL3RyYXZpcy9idWlsZC9BbGZyZXNjby9hbGZyZXNjby1uZzItY29tcG9uZW50cy9saWIvY29yZS8iLCJzb3VyY2VzIjpbInNlcnZpY2VzL2F1dGgtZ3VhcmQtc3NvLXJvbGUuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBaUJBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDeEQsT0FBTyxFQUF1QyxNQUFNLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUM5RSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDckQsT0FBTyxFQUFFLGFBQWEsRUFBRSxvQkFBb0IsRUFBRSxNQUFNLDBCQUEwQixDQUFDOzs7Ozs7QUFLL0UsTUFBTSxPQUFPLHVCQUF1QjtJQUNoQyxZQUFvQixnQkFBa0MsRUFDbEMsTUFBYyxFQUNkLE1BQWlCLEVBQ2pCLG9CQUEwQztRQUgxQyxxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQWtCO1FBQ2xDLFdBQU0sR0FBTixNQUFNLENBQVE7UUFDZCxXQUFNLEdBQU4sTUFBTSxDQUFXO1FBQ2pCLHlCQUFvQixHQUFwQixvQkFBb0IsQ0FBc0I7SUFDOUQsQ0FBQztJQUVLLFdBQVcsQ0FBQyxLQUE2Qjs7WUFDM0MsSUFBSSxPQUFPLENBQUM7WUFDWixJQUFJLFlBQVksR0FBRyxLQUFLLENBQUM7WUFDekIsSUFBSSxhQUFhLEdBQUcsSUFBSSxDQUFDO1lBRXpCLElBQUksS0FBSyxDQUFDLElBQUksRUFBRTtnQkFDWixJQUFJLEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEVBQUU7b0JBQ3JCLE1BQU0sWUFBWSxHQUFhLEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7b0JBQ25ELE1BQU0sYUFBYSxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksRUFBRSxDQUFDO29CQUN4RCxNQUFNLGNBQWMsR0FBRyxZQUFZLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyx1QkFBdUIsQ0FBQyxJQUFJLGFBQWEsQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDLHVCQUF1QixDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sSUFBSSxDQUFDLG9CQUFvQixDQUFDLGNBQWMsRUFBRSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7b0JBQ2hOLFlBQVksR0FBRyxhQUFhLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBRSxJQUFJLENBQUMsNEJBQTRCLENBQUMsWUFBWSxFQUFFLGFBQWEsRUFBRSxjQUFjLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxZQUFZLEVBQUUsY0FBYyxDQUFDLENBQUM7aUJBQ3ZLO2dCQUVELElBQUksS0FBSyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsRUFBRTtvQkFDM0IsTUFBTSxjQUFjLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUM7b0JBQy9ELE1BQU0sWUFBWSxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7b0JBQ3pDLGFBQWEsR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsMEJBQTBCLENBQUMsY0FBYyxFQUFFLFlBQVksQ0FBQyxDQUFDO2lCQUNsRzthQUNKO1lBRUQsT0FBTyxHQUFHLFlBQVksSUFBSSxhQUFhLENBQUM7WUFFeEMsSUFBSSxDQUFDLE9BQU8sSUFBSSxLQUFLLENBQUMsSUFBSSxJQUFJLEtBQUssQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLEVBQUU7Z0JBQ3JELElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsR0FBRyxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDO2FBQzNEO1lBRUQsSUFBSSxDQUFDLE9BQU8sRUFBRTtnQkFDVixJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDO2FBQzFCO1lBRUQsT0FBTyxPQUFPLENBQUM7UUFDbkIsQ0FBQztLQUFBO0lBRU8sNEJBQTRCLENBQUMsWUFBc0IsRUFBRSxhQUF1QixFQUFFLGNBQXVCO1FBQ3pHLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxZQUFZLEVBQUUsY0FBYyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLGFBQWEsRUFBRSxjQUFjLENBQUMsQ0FBQztJQUN4RyxDQUFDO0lBRU8sUUFBUSxDQUFDLFlBQXNCLEVBQUUsY0FBdUI7UUFDNUQsT0FBTyxZQUFZLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsYUFBYSxDQUFDLFlBQVksQ0FBQyxJQUFJLGNBQWMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLGFBQWEsQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUNsTSxDQUFDOzs7O1lBakRKLFVBQVUsU0FBQztnQkFDUixVQUFVLEVBQUUsTUFBTTthQUNyQjs7O1lBUFEsZ0JBQWdCO1lBQ3FCLE1BQU07WUFDM0MsU0FBUztZQUNNLG9CQUFvQiIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEp3dEhlbHBlclNlcnZpY2UgfSBmcm9tICcuL2p3dC1oZWxwZXIuc2VydmljZSc7XG5pbXBvcnQgeyBBY3RpdmF0ZWRSb3V0ZVNuYXBzaG90LCBDYW5BY3RpdmF0ZSwgUm91dGVyIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcbmltcG9ydCB7IE1hdERpYWxvZyB9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsL2RpYWxvZyc7XG5pbXBvcnQgeyBDb250ZW50R3JvdXBzLCBQZW9wbGVDb250ZW50U2VydmljZSB9IGZyb20gJy4vcGVvcGxlLWNvbnRlbnQuc2VydmljZSc7XG5cbkBJbmplY3RhYmxlKHtcbiAgICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgQXV0aEd1YXJkU3NvUm9sZVNlcnZpY2UgaW1wbGVtZW50cyBDYW5BY3RpdmF0ZSB7XG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBqd3RIZWxwZXJTZXJ2aWNlOiBKd3RIZWxwZXJTZXJ2aWNlLFxuICAgICAgICAgICAgICAgIHByaXZhdGUgcm91dGVyOiBSb3V0ZXIsXG4gICAgICAgICAgICAgICAgcHJpdmF0ZSBkaWFsb2c6IE1hdERpYWxvZyxcbiAgICAgICAgICAgICAgICBwcml2YXRlIHBlb3BsZUNvbnRlbnRTZXJ2aWNlOiBQZW9wbGVDb250ZW50U2VydmljZSkge1xuICAgIH1cblxuICAgIGFzeW5jIGNhbkFjdGl2YXRlKHJvdXRlOiBBY3RpdmF0ZWRSb3V0ZVNuYXBzaG90KTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgICAgIGxldCBoYXNSb2xlO1xuICAgICAgICBsZXQgaGFzUmVhbG1Sb2xlID0gZmFsc2U7XG4gICAgICAgIGxldCBoYXNDbGllbnRSb2xlID0gdHJ1ZTtcblxuICAgICAgICBpZiAocm91dGUuZGF0YSkge1xuICAgICAgICAgICAgaWYgKHJvdXRlLmRhdGFbJ3JvbGVzJ10pIHtcbiAgICAgICAgICAgICAgICBjb25zdCByb2xlc1RvQ2hlY2s6IHN0cmluZ1tdID0gcm91dGUuZGF0YVsncm9sZXMnXTtcbiAgICAgICAgICAgICAgICBjb25zdCBleGNsdWRlZFJvbGVzID0gcm91dGUuZGF0YVsnZXhjbHVkZWRSb2xlcyddIHx8IFtdO1xuICAgICAgICAgICAgICAgIGNvbnN0IGlzQ29udGVudEFkbWluID0gcm9sZXNUb0NoZWNrLmluY2x1ZGVzKENvbnRlbnRHcm91cHMuQUxGUkVTQ09fQURNSU5JU1RSQVRPUlMpIHx8IGV4Y2x1ZGVkUm9sZXMuaW5jbHVkZXMoQ29udGVudEdyb3Vwcy5BTEZSRVNDT19BRE1JTklTVFJBVE9SUykgPyBhd2FpdCB0aGlzLnBlb3BsZUNvbnRlbnRTZXJ2aWNlLmlzQ29udGVudEFkbWluKCkgOiBmYWxzZTtcbiAgICAgICAgICAgICAgICBoYXNSZWFsbVJvbGUgPSBleGNsdWRlZFJvbGVzLmxlbmd0aCA/ICB0aGlzLmNoZWNrQWNjZXNzV2l0aEV4Y2x1ZGVkUm9sZXMocm9sZXNUb0NoZWNrLCBleGNsdWRlZFJvbGVzLCBpc0NvbnRlbnRBZG1pbikgOiB0aGlzLmhhc1JvbGVzKHJvbGVzVG9DaGVjaywgaXNDb250ZW50QWRtaW4pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAocm91dGUuZGF0YVsnY2xpZW50Um9sZXMnXSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNsaWVudFJvbGVOYW1lID0gcm91dGUucGFyYW1zW3JvdXRlLmRhdGFbJ2NsaWVudFJvbGVzJ11dO1xuICAgICAgICAgICAgICAgIGNvbnN0IHJvbGVzVG9DaGVjayA9IHJvdXRlLmRhdGFbJ3JvbGVzJ107XG4gICAgICAgICAgICAgICAgaGFzQ2xpZW50Um9sZSA9IHRoaXMuand0SGVscGVyU2VydmljZS5oYXNSZWFsbVJvbGVzRm9yQ2xpZW50Um9sZShjbGllbnRSb2xlTmFtZSwgcm9sZXNUb0NoZWNrKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGhhc1JvbGUgPSBoYXNSZWFsbVJvbGUgJiYgaGFzQ2xpZW50Um9sZTtcblxuICAgICAgICBpZiAoIWhhc1JvbGUgJiYgcm91dGUuZGF0YSAmJiByb3V0ZS5kYXRhWydyZWRpcmVjdFVybCddKSB7XG4gICAgICAgICAgICB0aGlzLnJvdXRlci5uYXZpZ2F0ZShbJy8nICsgcm91dGUuZGF0YVsncmVkaXJlY3RVcmwnXV0pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFoYXNSb2xlKSB7XG4gICAgICAgICAgICB0aGlzLmRpYWxvZy5jbG9zZUFsbCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGhhc1JvbGU7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBjaGVja0FjY2Vzc1dpdGhFeGNsdWRlZFJvbGVzKHJvbGVzVG9DaGVjazogc3RyaW5nW10sIGV4Y2x1ZGVkUm9sZXM6IHN0cmluZ1tdLCBpc0NvbnRlbnRBZG1pbjogYm9vbGVhbik6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5oYXNSb2xlcyhyb2xlc1RvQ2hlY2ssIGlzQ29udGVudEFkbWluKSAmJiAhdGhpcy5oYXNSb2xlcyhleGNsdWRlZFJvbGVzLCBpc0NvbnRlbnRBZG1pbik7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBoYXNSb2xlcyhyb2xlc1RvQ2hlY2s6IHN0cmluZ1tdLCBpc0NvbnRlbnRBZG1pbjogYm9vbGVhbik6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gcm9sZXNUb0NoZWNrLmluY2x1ZGVzKENvbnRlbnRHcm91cHMuQUxGUkVTQ09fQURNSU5JU1RSQVRPUlMpID8gdGhpcy5qd3RIZWxwZXJTZXJ2aWNlLmhhc1JlYWxtUm9sZXMocm9sZXNUb0NoZWNrKSB8fCBpc0NvbnRlbnRBZG1pbiA6IHRoaXMuand0SGVscGVyU2VydmljZS5oYXNSZWFsbVJvbGVzKHJvbGVzVG9DaGVjayk7XG4gICAgfVxufVxuIl19