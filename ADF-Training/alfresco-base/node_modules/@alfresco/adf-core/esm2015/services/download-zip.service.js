import { DownloadsApi } from '@alfresco/js-api';
import { Injectable } from '@angular/core';
import { from, throwError } from 'rxjs';
import { LogService } from './log.service';
import { AlfrescoApiService } from './alfresco-api.service';
import { catchError } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "./alfresco-api.service";
import * as i2 from "./log.service";
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './alfresco-api.service';
import * as ɵngcc2 from './log.service';
export class DownloadZipService {
    constructor(apiService, logService) {
        this.apiService = apiService;
        this.logService = logService;
    }
    get downloadsApi() {
        var _a;
        this._downloadsApi = (_a = this._downloadsApi) !== null && _a !== void 0 ? _a : new DownloadsApi(this.apiService.getInstance());
        return this._downloadsApi;
    }
    createDownload(payload) {
        return from(this.downloadsApi.createDownload(payload)).pipe(catchError((err) => this.handleError(err)));
    }
    getDownload(downloadId) {
        return from(this.downloadsApi.getDownload(downloadId));
    }
    cancelDownload(downloadId) {
        this.downloadsApi.cancelDownload(downloadId);
    }
    handleError(error) {
        this.logService.error(error);
        return throwError(error || 'Server error');
    }
}
DownloadZipService.ɵfac = function DownloadZipService_Factory(t) { return new (t || DownloadZipService)(ɵngcc0.ɵɵinject(ɵngcc1.AlfrescoApiService), ɵngcc0.ɵɵinject(ɵngcc2.LogService)); };
DownloadZipService.ɵprov = i0.ɵɵdefineInjectable({ factory: function DownloadZipService_Factory() { return new DownloadZipService(i0.ɵɵinject(i1.AlfrescoApiService), i0.ɵɵinject(i2.LogService)); }, token: DownloadZipService, providedIn: "root" });
DownloadZipService.ctorParameters = () => [
    { type: AlfrescoApiService },
    { type: LogService }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DownloadZipService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc1.AlfrescoApiService }, { type: ɵngcc2.LogService }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZG93bmxvYWQtemlwLnNlcnZpY2UuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL2hvbWUvdHJhdmlzL2J1aWxkL0FsZnJlc2NvL2FsZnJlc2NvLW5nMi1jb21wb25lbnRzL2xpYi9jb3JlL3NlcnZpY2VzL2Rvd25sb2FkLXppcC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWlCQSxPQUFPLEVBQXFDLFlBQVksRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQ25GLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFjLElBQUksRUFBRSxVQUFVLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDcEQsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUM1RCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDNUM7QUFFc0I7QUFJZjs7OztBQUZQLE1BQU0sT0FBTyxrQkFBa0I7QUFDL0IsSUFPSSxZQUFvQixVQUE4QixFQUM5QixVQUFzQjtBQUM5QyxRQUZ3QixlQUFVLEdBQVYsVUFBVSxDQUFvQjtBQUFDLFFBQy9CLGVBQVUsR0FBVixVQUFVLENBQVk7QUFBQyxJQUMzQyxDQUFDO0FBQ0wsSUFSSSxJQUFJLFlBQVk7QUFBSztBQUN2QixRQUFNLElBQUksQ0FBQyxhQUFhLFNBQUcsSUFBSSxDQUFDLGFBQWEsbUNBQUksSUFBSSxZQUFZLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDO0FBQ25HLFFBQVEsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDO0FBQ2xDLElBQUksQ0FBQztBQUNMLElBVUksY0FBYyxDQUFDLE9BQTJCO0FBQUksUUFDMUMsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQ3ZELFVBQVUsQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUM3QyxDQUFDO0FBQ1YsSUFBSSxDQUFDO0FBQ0wsSUFNSSxXQUFXLENBQUMsVUFBa0I7QUFBSSxRQUM5QixPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLFdBQVcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDO0FBQy9ELElBQUksQ0FBQztBQUNMLElBS0ksY0FBYyxDQUFDLFVBQWtCO0FBQ3JDLFFBQVEsSUFBSSxDQUFDLFlBQVksQ0FBQyxjQUFjLENBQUMsVUFBVSxDQUFDLENBQUM7QUFDckQsSUFBSSxDQUFDO0FBQ0wsSUFDWSxXQUFXLENBQUMsS0FBVTtBQUNsQyxRQUFRLElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ3JDLFFBQVEsT0FBTyxVQUFVLENBQUMsS0FBSyxJQUFJLGNBQWMsQ0FBQyxDQUFDO0FBQ25ELElBQUksQ0FBQztBQUNMOzJMQUFDO0FBQ0QsdVBBN0NLO0FBQUM7RUFITCxVQUFVLFNBQUMsckJBS0csWUFSTixrQkFBa0I7S0FJdkIsVUFBVSxFQUFFLE1BQU0sdkJBSlMsWUFEdEIsVUFBVTtBQUFHO1NBTXJCOzs7OztnSEFOdUI7QUFBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IERvd25sb2FkRW50cnksIERvd25sb2FkQm9keUNyZWF0ZSwgRG93bmxvYWRzQXBpIH0gZnJvbSAnQGFsZnJlc2NvL2pzLWFwaSc7XG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBmcm9tLCB0aHJvd0Vycm9yIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBMb2dTZXJ2aWNlIH0gZnJvbSAnLi9sb2cuc2VydmljZSc7XG5pbXBvcnQgeyBBbGZyZXNjb0FwaVNlcnZpY2UgfSBmcm9tICcuL2FsZnJlc2NvLWFwaS5zZXJ2aWNlJztcbmltcG9ydCB7IGNhdGNoRXJyb3IgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbkBJbmplY3RhYmxlKHtcbiAgICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgRG93bmxvYWRaaXBTZXJ2aWNlIHtcblxuICAgIF9kb3dubG9hZHNBcGk6IERvd25sb2Fkc0FwaTtcbiAgICBnZXQgZG93bmxvYWRzQXBpKCk6IERvd25sb2Fkc0FwaSB7XG4gICAgICAgIHRoaXMuX2Rvd25sb2Fkc0FwaSA9IHRoaXMuX2Rvd25sb2Fkc0FwaSA/PyBuZXcgRG93bmxvYWRzQXBpKHRoaXMuYXBpU2VydmljZS5nZXRJbnN0YW5jZSgpKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2Rvd25sb2Fkc0FwaTtcbiAgICB9XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGFwaVNlcnZpY2U6IEFsZnJlc2NvQXBpU2VydmljZSxcbiAgICAgICAgICAgICAgICBwcml2YXRlIGxvZ1NlcnZpY2U6IExvZ1NlcnZpY2UpIHtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IGRvd25sb2FkLlxuICAgICAqIEBwYXJhbSBwYXlsb2FkIE9iamVjdCBjb250YWluaW5nIHRoZSBub2RlIElEcyBvZiB0aGUgaXRlbXMgdG8gYWRkIHRvIHRoZSBaSVAgZmlsZVxuICAgICAqIEByZXR1cm5zIFN0YXR1cyBvYmplY3QgZm9yIHRoZSBkb3dubG9hZFxuICAgICAqL1xuICAgIGNyZWF0ZURvd25sb2FkKHBheWxvYWQ6IERvd25sb2FkQm9keUNyZWF0ZSk6IE9ic2VydmFibGU8RG93bmxvYWRFbnRyeT4ge1xuICAgICAgICByZXR1cm4gZnJvbSh0aGlzLmRvd25sb2Fkc0FwaS5jcmVhdGVEb3dubG9hZChwYXlsb2FkKSkucGlwZShcbiAgICAgICAgICAgIGNhdGNoRXJyb3IoKGVycikgPT4gdGhpcy5oYW5kbGVFcnJvcihlcnIpKVxuICAgICAgICApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgc3RhdHVzIGluZm9ybWF0aW9uIGZvciBhIGRvd25sb2FkIG5vZGUuXG4gICAgICogQHBhcmFtIGRvd25sb2FkSWQgSUQgb2YgdGhlIGRvd25sb2FkIG5vZGVcbiAgICAgKiBAcmV0dXJucyBTdGF0dXMgb2JqZWN0IGZvciB0aGUgZG93bmxvYWRcbiAgICAgKi9cbiAgICBnZXREb3dubG9hZChkb3dubG9hZElkOiBzdHJpbmcpOiBPYnNlcnZhYmxlPERvd25sb2FkRW50cnk+IHtcbiAgICAgICAgcmV0dXJuIGZyb20odGhpcy5kb3dubG9hZHNBcGkuZ2V0RG93bmxvYWQoZG93bmxvYWRJZCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENhbmNlbHMgYSBkb3dubG9hZC5cbiAgICAgKiBAcGFyYW0gZG93bmxvYWRJZCBJRCBvZiB0aGUgdGFyZ2V0IGRvd25sb2FkIG5vZGVcbiAgICAgKi9cbiAgICBjYW5jZWxEb3dubG9hZChkb3dubG9hZElkOiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy5kb3dubG9hZHNBcGkuY2FuY2VsRG93bmxvYWQoZG93bmxvYWRJZCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBoYW5kbGVFcnJvcihlcnJvcjogYW55KSB7XG4gICAgICAgIHRoaXMubG9nU2VydmljZS5lcnJvcihlcnJvcik7XG4gICAgICAgIHJldHVybiB0aHJvd0Vycm9yKGVycm9yIHx8ICdTZXJ2ZXIgZXJyb3InKTtcbiAgICB9XG59XG4iXX0=