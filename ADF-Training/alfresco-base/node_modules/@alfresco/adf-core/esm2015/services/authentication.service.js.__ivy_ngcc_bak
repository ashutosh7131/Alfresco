import { Injectable } from '@angular/core';
import { Observable, from, throwError, ReplaySubject, forkJoin } from 'rxjs';
import { AlfrescoApiService } from './alfresco-api.service';
import { CookieService } from './cookie.service';
import { LogService } from './log.service';
import { AppConfigService, AppConfigValues } from '../app-config/app-config.service';
import { PeopleApi, UserProfileApi } from '@alfresco/js-api';
import { map, catchError, tap } from 'rxjs/operators';
import { HttpHeaders } from '@angular/common/http';
import { JwtHelperService } from './jwt-helper.service';
import { StorageService } from './storage.service';
import * as i0 from "@angular/core";
import * as i1 from "../app-config/app-config.service";
import * as i2 from "./storage.service";
import * as i3 from "./alfresco-api.service";
import * as i4 from "./cookie.service";
import * as i5 from "./log.service";
const REMEMBER_ME_COOKIE_KEY = 'ALFRESCO_REMEMBER_ME';
const REMEMBER_ME_UNTIL = 1000 * 60 * 60 * 24 * 30;
export class AuthenticationService {
    constructor(appConfig, storageService, alfrescoApi, cookie, logService) {
        this.appConfig = appConfig;
        this.storageService = storageService;
        this.alfrescoApi = alfrescoApi;
        this.cookie = cookie;
        this.logService = logService;
        this.redirectUrl = null;
        this.bearerExcludedUrls = ['auth/realms', 'resources/', 'assets/'];
        this.onLogin = new ReplaySubject(1);
        this.onLogout = new ReplaySubject(1);
        this.alfrescoApi.alfrescoApiInitialized.subscribe(() => {
            this.alfrescoApi.getInstance().reply('logged-in', () => {
                this.onLogin.next();
            });
            if (this.isKerberosEnabled()) {
                this.loadUserDetails();
            }
        });
    }
    get peopleApi() {
        var _a;
        this._peopleApi = (_a = this._peopleApi) !== null && _a !== void 0 ? _a : new PeopleApi(this.alfrescoApi.getInstance());
        return this._peopleApi;
    }
    get profileApi() {
        var _a;
        this._profileApi = (_a = this._profileApi) !== null && _a !== void 0 ? _a : new UserProfileApi(this.alfrescoApi.getInstance());
        return this._profileApi;
    }
    loadUserDetails() {
        const ecmUser$ = from(this.peopleApi.getPerson('-me-'));
        const bpmUser$ = this.getBpmLoggedUser();
        if (this.isALLProvider()) {
            forkJoin([ecmUser$, bpmUser$]).subscribe(() => this.onLogin.next());
        }
        else if (this.isECMProvider()) {
            ecmUser$.subscribe(() => this.onLogin.next());
        }
        else {
            bpmUser$.subscribe(() => this.onLogin.next());
        }
    }
    isLoggedIn() {
        if (!this.isOauth() && this.cookie.isEnabled() && !this.isRememberMeSet()) {
            return false;
        }
        return this.alfrescoApi.getInstance().isLoggedIn();
    }
    isLoggedInWith(provider) {
        if (provider === 'BPM') {
            return this.isBpmLoggedIn();
        }
        else if (provider === 'ECM') {
            return this.isEcmLoggedIn();
        }
        else {
            return this.isLoggedIn();
        }
    }
    isKerberosEnabled() {
        return this.appConfig.get(AppConfigValues.AUTH_WITH_CREDENTIALS, false);
    }
    isOauth() {
        return this.alfrescoApi.getInstance().isOauthConfiguration();
    }
    isPublicUrl() {
        return this.alfrescoApi.getInstance().isPublicUrl();
    }
    isECMProvider() {
        return this.alfrescoApi.getInstance().isEcmConfiguration();
    }
    isBPMProvider() {
        return this.alfrescoApi.getInstance().isBpmConfiguration();
    }
    isALLProvider() {
        return this.alfrescoApi.getInstance().isEcmBpmConfiguration();
    }
    login(username, password, rememberMe = false) {
        return from(this.alfrescoApi.getInstance().login(username, password))
            .pipe(map((response) => {
            this.saveRememberMeCookie(rememberMe);
            this.onLogin.next(response);
            return {
                type: this.appConfig.get(AppConfigValues.PROVIDERS),
                ticket: response
            };
        }), catchError((err) => this.handleError(err)));
    }
    ssoImplicitLogin() {
        this.alfrescoApi.getInstance().implicitLogin();
    }
    saveRememberMeCookie(rememberMe) {
        let expiration = null;
        if (rememberMe) {
            expiration = new Date();
            const time = expiration.getTime();
            const expireTime = time + REMEMBER_ME_UNTIL;
            expiration.setTime(expireTime);
        }
        this.cookie.setItem(REMEMBER_ME_COOKIE_KEY, '1', expiration, null);
    }
    isRememberMeSet() {
        return (this.cookie.getItem(REMEMBER_ME_COOKIE_KEY) !== null);
    }
    logout() {
        return from(this.callApiLogout())
            .pipe(tap((response) => {
            this.onLogout.next(response);
            return response;
        }), catchError((err) => this.handleError(err)));
    }
    callApiLogout() {
        if (this.alfrescoApi.getInstance()) {
            return this.alfrescoApi.getInstance().logout();
        }
        return Promise.resolve();
    }
    getTicketEcm() {
        return this.alfrescoApi.getInstance().getTicketEcm();
    }
    getTicketBpm() {
        return this.alfrescoApi.getInstance().getTicketBpm();
    }
    getTicketEcmBase64() {
        const ticket = this.alfrescoApi.getInstance().getTicketEcm();
        if (ticket) {
            return 'Basic ' + btoa(ticket);
        }
        return null;
    }
    isEcmLoggedIn() {
        if (this.isECMProvider() || this.isALLProvider()) {
            if (!this.isOauth() && this.cookie.isEnabled() && !this.isRememberMeSet()) {
                return false;
            }
            return this.alfrescoApi.getInstance().isEcmLoggedIn();
        }
        return false;
    }
    isBpmLoggedIn() {
        if (this.isBPMProvider() || this.isALLProvider()) {
            if (!this.isOauth() && this.cookie.isEnabled() && !this.isRememberMeSet()) {
                return false;
            }
            return this.alfrescoApi.getInstance().isBpmLoggedIn();
        }
        return false;
    }
    getEcmUsername() {
        return this.alfrescoApi.getInstance().getEcmUsername();
    }
    getBpmUsername() {
        return this.alfrescoApi.getInstance().getBpmUsername();
    }
    setRedirect(url) {
        this.redirectUrl = url;
    }
    getRedirect() {
        const provider = this.appConfig.get(AppConfigValues.PROVIDERS);
        return this.hasValidRedirection(provider) ? this.redirectUrl.url : null;
    }
    getBpmLoggedUser() {
        return from(this.profileApi.getProfile());
    }
    hasValidRedirection(provider) {
        return this.redirectUrl && (this.redirectUrl.provider === provider || this.hasSelectedProviderAll(provider));
    }
    hasSelectedProviderAll(provider) {
        return this.redirectUrl && (this.redirectUrl.provider === 'ALL' || provider === 'ALL');
    }
    handleError(error) {
        this.logService.error('Error when logging in', error);
        return throwError(error || 'Server error');
    }
    getBearerExcludedUrls() {
        return this.bearerExcludedUrls;
    }
    getToken() {
        return this.storageService.getItem(JwtHelperService.USER_ACCESS_TOKEN);
    }
    addTokenToHeader(headersArg) {
        return new Observable((observer) => {
            let headers = headersArg;
            if (!headers) {
                headers = new HttpHeaders();
            }
            try {
                const token = this.getToken();
                headers = headers.set('Authorization', 'bearer ' + token);
                observer.next(headers);
                observer.complete();
            }
            catch (error) {
                observer.error(error);
            }
        });
    }
}
AuthenticationService.ɵprov = i0.ɵɵdefineInjectable({ factory: function AuthenticationService_Factory() { return new AuthenticationService(i0.ɵɵinject(i1.AppConfigService), i0.ɵɵinject(i2.StorageService), i0.ɵɵinject(i3.AlfrescoApiService), i0.ɵɵinject(i4.CookieService), i0.ɵɵinject(i5.LogService)); }, token: AuthenticationService, providedIn: "root" });
AuthenticationService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
AuthenticationService.ctorParameters = () => [
    { type: AppConfigService },
    { type: StorageService },
    { type: AlfrescoApiService },
    { type: CookieService },
    { type: LogService }
];
//# sourceMappingURL=data:application/json;base64,