import { __awaiter } from "tslib";
import { Injectable } from '@angular/core';
import { of } from 'rxjs';
import { map, switchMap } from 'rxjs/operators';
import { AppConfigService } from '../app-config/app-config.service';
import { JwtHelperService } from './jwt-helper.service';
import { OAuth2Service } from './oauth2.service';
import * as i0 from "@angular/core";
import * as i1 from "./jwt-helper.service";
import * as i2 from "./oauth2.service";
import * as i3 from "../app-config/app-config.service";
export class IdentityUserService {
    constructor(jwtHelperService, oAuth2Service, appConfigService) {
        this.jwtHelperService = jwtHelperService;
        this.oAuth2Service = oAuth2Service;
        this.appConfigService = appConfigService;
    }
    get identityHost() {
        return `${this.appConfigService.get('identityHost')}`;
    }
    buildUserUrl() {
        return `${this.identityHost}/users`;
    }
    getCurrentUserInfo() {
        const familyName = this.jwtHelperService.getValueFromLocalAccessToken(JwtHelperService.FAMILY_NAME);
        const givenName = this.jwtHelperService.getValueFromLocalAccessToken(JwtHelperService.GIVEN_NAME);
        const email = this.jwtHelperService.getValueFromLocalAccessToken(JwtHelperService.USER_EMAIL);
        const username = this.jwtHelperService.getValueFromLocalAccessToken(JwtHelperService.USER_PREFERRED_USERNAME);
        return { firstName: givenName, lastName: familyName, email: email, username: username };
    }
    findUsersByName(search) {
        if (search === '') {
            return of([]);
        }
        const url = this.buildUserUrl();
        const queryParams = { search: search };
        return this.oAuth2Service.get({ url, queryParams });
    }
    findUserByUsername(username) {
        if (username === '') {
            return of([]);
        }
        const url = this.buildUserUrl();
        const queryParams = { username: username };
        return this.oAuth2Service.get({ url, queryParams });
    }
    findUserByEmail(email) {
        if (email === '') {
            return of([]);
        }
        const url = this.buildUserUrl();
        const queryParams = { email: email };
        return this.oAuth2Service.get({ url, queryParams });
    }
    findUserById(id) {
        if (id === '') {
            return of([]);
        }
        const url = this.buildUserUrl() + '/' + id;
        return this.oAuth2Service.get({ url });
    }
    getClientRoles(userId, clientId) {
        const url = `${this.identityHost}/users/${userId}/role-mappings/clients/${clientId}/composite`;
        return this.oAuth2Service.get({ url });
    }
    checkUserHasClientApp(userId, clientId) {
        return this.getClientRoles(userId, clientId).pipe(map((clientRoles) => clientRoles.length > 0));
    }
    checkUserHasAnyClientAppRole(userId, clientId, roleNames) {
        return this.getClientRoles(userId, clientId).pipe(map((clientRoles) => {
            let hasRole = false;
            if (clientRoles.length > 0) {
                roleNames.forEach((roleName) => {
                    const role = clientRoles.find(({ name }) => name === roleName);
                    if (role) {
                        hasRole = true;
                        return;
                    }
                });
            }
            return hasRole;
        }));
    }
    getClientIdByApplicationName(applicationName) {
        const url = `${this.identityHost}/clients`;
        const queryParams = { clientId: applicationName };
        return this.oAuth2Service
            .get({ url, queryParams })
            .pipe(map((response) => response && response.length > 0 ? response[0].id : ''));
    }
    checkUserHasApplicationAccess(userId, applicationName) {
        return this.getClientIdByApplicationName(applicationName).pipe(switchMap((clientId) => {
            return this.checkUserHasClientApp(userId, clientId);
        }));
    }
    checkUserHasAnyApplicationRole(userId, applicationName, roleNames) {
        return this.getClientIdByApplicationName(applicationName).pipe(switchMap((clientId) => {
            return this.checkUserHasAnyClientAppRole(userId, clientId, roleNames);
        }));
    }
    getUsers() {
        const url = this.buildUserUrl();
        return this.oAuth2Service.get({ url });
    }
    getUserRoles(userId) {
        const url = `${this.identityHost}/users/${userId}/role-mappings/realm/composite`;
        return this.oAuth2Service.get({ url });
    }
    getUsersByRolesWithCurrentUser(roleNames) {
        return __awaiter(this, void 0, void 0, function* () {
            const filteredUsers = [];
            if (roleNames && roleNames.length > 0) {
                const users = yield this.getUsers().toPromise();
                for (let i = 0; i < users.length; i++) {
                    const hasAnyRole = yield this.userHasAnyRole(users[i].id, roleNames);
                    if (hasAnyRole) {
                        filteredUsers.push(users[i]);
                    }
                }
            }
            return filteredUsers;
        });
    }
    getUsersByRolesWithoutCurrentUser(roleNames) {
        return __awaiter(this, void 0, void 0, function* () {
            const filteredUsers = [];
            if (roleNames && roleNames.length > 0) {
                const currentUser = this.getCurrentUserInfo();
                let users = yield this.getUsers().toPromise();
                users = users.filter(({ username }) => username !== currentUser.username);
                for (let i = 0; i < users.length; i++) {
                    const hasAnyRole = yield this.userHasAnyRole(users[i].id, roleNames);
                    if (hasAnyRole) {
                        filteredUsers.push(users[i]);
                    }
                }
            }
            return filteredUsers;
        });
    }
    userHasAnyRole(userId, roleNames) {
        return __awaiter(this, void 0, void 0, function* () {
            const userRoles = yield this.getUserRoles(userId).toPromise();
            const hasAnyRole = roleNames.some((roleName) => {
                const filteredRoles = userRoles.filter((userRole) => {
                    return userRole.name.toLocaleLowerCase() === roleName.toLocaleLowerCase();
                });
                return filteredRoles.length > 0;
            });
            return hasAnyRole;
        });
    }
    checkUserHasRole(userId, roleNames) {
        return this.getUserRoles(userId).pipe(map((userRoles) => {
            let hasRole = false;
            if (userRoles && userRoles.length > 0) {
                roleNames.forEach((roleName) => {
                    const role = userRoles.find(({ name }) => roleName === name);
                    if (role) {
                        hasRole = true;
                        return;
                    }
                });
            }
            return hasRole;
        }));
    }
    queryUsers(requestQuery) {
        const url = this.buildUserUrl();
        const queryParams = { first: requestQuery.first, max: requestQuery.max };
        return this.getTotalUsersCount().pipe(switchMap((totalCount) => this.oAuth2Service.get({ url, queryParams }).pipe(map((response) => {
            return {
                entries: response,
                pagination: {
                    skipCount: requestQuery.first,
                    maxItems: requestQuery.max,
                    count: totalCount,
                    hasMoreItems: false,
                    totalItems: totalCount
                }
            };
        }))));
    }
    getTotalUsersCount() {
        const url = this.buildUserUrl() + `/count`;
        return this.oAuth2Service.get({ url });
    }
    createUser(newUser) {
        const url = this.buildUserUrl();
        const bodyParam = JSON.stringify(newUser);
        return this.oAuth2Service.post({ url, bodyParam });
    }
    updateUser(userId, updatedUser) {
        const url = this.buildUserUrl() + '/' + userId;
        const bodyParam = JSON.stringify(updatedUser);
        return this.oAuth2Service.put({ url, bodyParam });
    }
    deleteUser(userId) {
        const url = this.buildUserUrl() + '/' + userId;
        return this.oAuth2Service.delete({ url });
    }
    changePassword(userId, newPassword) {
        const url = this.buildUserUrl() + '/' + userId + '/reset-password';
        const bodyParam = JSON.stringify(newPassword);
        return this.oAuth2Service.put({ url, bodyParam });
    }
    getInvolvedGroups(userId) {
        const url = this.buildUserUrl() + '/' + userId + '/groups/';
        const pathParams = { id: userId };
        return this.oAuth2Service.get({ url, pathParams });
    }
    joinGroup(joinGroupRequest) {
        const url = this.buildUserUrl() + '/' + joinGroupRequest.userId + '/groups/' + joinGroupRequest.groupId;
        const bodyParam = JSON.stringify(joinGroupRequest);
        return this.oAuth2Service.put({ url, bodyParam });
    }
    leaveGroup(userId, groupId) {
        const url = this.buildUserUrl() + '/' + userId + '/groups/' + groupId;
        return this.oAuth2Service.delete({ url });
    }
    getAvailableRoles(userId) {
        const url = this.buildUserUrl() + '/' + userId + '/role-mappings/realm/available';
        return this.oAuth2Service.get({ url });
    }
    getAssignedRoles(userId) {
        const url = this.buildUserUrl() + '/' + userId + '/role-mappings/realm';
        const pathParams = { id: userId };
        return this.oAuth2Service.get({ url, pathParams });
    }
    getEffectiveRoles(userId) {
        const url = this.buildUserUrl() + '/' + userId + '/role-mappings/realm/composite';
        const pathParams = { id: userId };
        return this.oAuth2Service.get({ url, pathParams });
    }
    assignRoles(userId, roles) {
        const url = this.buildUserUrl() + '/' + userId + '/role-mappings/realm';
        const bodyParam = JSON.stringify(roles);
        return this.oAuth2Service.post({ url, bodyParam });
    }
    removeRoles(userId, removedRoles) {
        const url = this.buildUserUrl() + '/' + userId + '/role-mappings/realm';
        const bodyParam = JSON.stringify(removedRoles);
        return this.oAuth2Service.delete({ url, bodyParam });
    }
}
IdentityUserService.ɵprov = i0.ɵɵdefineInjectable({ factory: function IdentityUserService_Factory() { return new IdentityUserService(i0.ɵɵinject(i1.JwtHelperService), i0.ɵɵinject(i2.OAuth2Service), i0.ɵɵinject(i3.AppConfigService)); }, token: IdentityUserService, providedIn: "root" });
IdentityUserService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
IdentityUserService.ctorParameters = () => [
    { type: JwtHelperService },
    { type: OAuth2Service },
    { type: AppConfigService }
];
//# sourceMappingURL=data:application/json;base64,