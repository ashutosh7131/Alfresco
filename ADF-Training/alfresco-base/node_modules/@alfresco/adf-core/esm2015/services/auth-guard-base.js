/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { __awaiter } from "tslib";
import { AppConfigValues } from '../app-config/app-config.service';
export class AuthGuardBase {
    constructor(authenticationService, router, appConfigService, dialog, storageService) {
        this.authenticationService = authenticationService;
        this.router = router;
        this.appConfigService = appConfigService;
        this.dialog = dialog;
        this.storageService = storageService;
    }
    get withCredentials() {
        return this.appConfigService.get('auth.withCredentials', false);
    }
    canActivate(route, state) {
        if (this.authenticationService.isLoggedIn() && this.authenticationService.isOauth() && this.isLoginFragmentPresent()) {
            return this.redirectSSOSuccessURL();
        }
        return this.checkLogin(route, state.url);
    }
    canActivateChild(route, state) {
        return this.canActivate(route, state);
    }
    redirectSSOSuccessURL() {
        return __awaiter(this, void 0, void 0, function* () {
            const redirectFragment = this.storageService.getItem('loginFragment');
            if (redirectFragment && this.getLoginRoute() !== redirectFragment) {
                yield this.navigate(redirectFragment);
                this.storageService.removeItem('loginFragment');
                return false;
            }
            return true;
        });
    }
    isLoginFragmentPresent() {
        return !!this.storageService.getItem('loginFragment');
    }
    redirectToUrl(url) {
        return __awaiter(this, void 0, void 0, function* () {
            let urlToRedirect = `/${this.getLoginRoute()}`;
            if (!this.authenticationService.isOauth()) {
                this.authenticationService.setRedirect({
                    provider: this.getProvider(),
                    url
                });
                urlToRedirect = `${urlToRedirect}?redirectUrl=${url}`;
                return this.navigate(urlToRedirect);
            }
            else if (this.getOauthConfig().silentLogin && !this.authenticationService.isPublicUrl()) {
                this.authenticationService.ssoImplicitLogin();
            }
            else {
                return this.navigate(urlToRedirect);
            }
            return false;
        });
    }
    navigate(url) {
        return __awaiter(this, void 0, void 0, function* () {
            this.dialog.closeAll();
            yield this.router.navigateByUrl(this.router.parseUrl(url));
            return false;
        });
    }
    getOauthConfig() {
        return (this.appConfigService &&
            this.appConfigService.get(AppConfigValues.OAUTHCONFIG, null));
    }
    getLoginRoute() {
        return (this.appConfigService &&
            this.appConfigService.get(AppConfigValues.LOGIN_ROUTE, 'login'));
    }
    getProvider() {
        return (this.appConfigService &&
            this.appConfigService.get(AppConfigValues.PROVIDERS, 'ALL'));
    }
    isOAuthWithoutSilentLogin() {
        const oauth = this.appConfigService.get(AppConfigValues.OAUTHCONFIG, null);
        return (this.authenticationService.isOauth() && !!oauth && !oauth.silentLogin);
    }
    isSilentLogin() {
        const oauth = this.appConfigService.get(AppConfigValues.OAUTHCONFIG, null);
        return this.authenticationService.isOauth() && oauth && oauth.silentLogin;
    }
}
//# sourceMappingURL=data:application/json;base64,