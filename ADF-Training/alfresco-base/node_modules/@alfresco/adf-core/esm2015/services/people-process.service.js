import { Injectable } from '@angular/core';
import { from, throwError } from 'rxjs';
import { AlfrescoApiService } from './alfresco-api.service';
import { LogService } from './log.service';
import { catchError, map } from 'rxjs/operators';
import { TaskActionsApi, UsersApi } from '@alfresco/js-api';
import * as i0 from "@angular/core";
import * as i1 from "./alfresco-api.service";
import * as i2 from "./log.service";
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './alfresco-api.service';
import * as ɵngcc2 from './log.service';
export class PeopleProcessService {
    constructor(apiService, logService) {
        this.apiService = apiService;
        this.logService = logService;
    }
    get taskActionsApi() {
        var _a;
        this._taskActionsApi = (_a = this._taskActionsApi) !== null && _a !== void 0 ? _a : new TaskActionsApi(this.apiService.getInstance());
        return this._taskActionsApi;
    }
    get userApi() {
        var _a;
        this._userApi = (_a = this._userApi) !== null && _a !== void 0 ? _a : new UsersApi(this.apiService.getInstance());
        return this._userApi;
    }
    getWorkflowUsers(taskId, searchWord) {
        const option = { excludeTaskId: taskId, filter: searchWord };
        return from(this.getWorkflowUserApi(option))
            .pipe(map((response) => response.data || []), catchError((err) => this.handleError(err)));
    }
    getUserImage(user) {
        return this.getUserProfileImageApi(user.id.toString());
    }
    involveUserWithTask(taskId, idToInvolve) {
        const node = { userId: idToInvolve };
        return from(this.involveUserToTaskApi(taskId, node))
            .pipe(catchError((err) => this.handleError(err)));
    }
    removeInvolvedUser(taskId, idToRemove) {
        const node = { userId: idToRemove };
        return from(this.removeInvolvedUserFromTaskApi(taskId, node))
            .pipe(catchError((err) => this.handleError(err)));
    }
    getWorkflowUserApi(options) {
        return this.userApi.getUsers(options);
    }
    involveUserToTaskApi(taskId, node) {
        return this.taskActionsApi.involveUser(taskId, node);
    }
    removeInvolvedUserFromTaskApi(taskId, node) {
        return this.taskActionsApi.removeInvolvedUser(taskId, node);
    }
    getUserProfileImageApi(userId) {
        return this.userApi.getUserProfilePictureUrl(userId);
    }
    handleError(error) {
        this.logService.error(error);
        return throwError(error || 'Server error');
    }
}
PeopleProcessService.ɵfac = function PeopleProcessService_Factory(t) { return new (t || PeopleProcessService)(ɵngcc0.ɵɵinject(ɵngcc1.AlfrescoApiService), ɵngcc0.ɵɵinject(ɵngcc2.LogService)); };
PeopleProcessService.ɵprov = i0.ɵɵdefineInjectable({ factory: function PeopleProcessService_Factory() { return new PeopleProcessService(i0.ɵɵinject(i1.AlfrescoApiService), i0.ɵɵinject(i2.LogService)); }, token: PeopleProcessService, providedIn: "root" });
PeopleProcessService.ctorParameters = () => [
    { type: AlfrescoApiService },
    { type: LogService }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(PeopleProcessService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc1.AlfrescoApiService }, { type: ɵngcc2.LogService }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,