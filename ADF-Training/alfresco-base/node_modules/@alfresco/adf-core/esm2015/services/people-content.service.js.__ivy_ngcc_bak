import { __awaiter } from "tslib";
import { Injectable } from '@angular/core';
import { from, throwError } from 'rxjs';
import { AlfrescoApiService } from './alfresco-api.service';
import { catchError, map } from 'rxjs/operators';
import { PeopleApi } from '@alfresco/js-api';
import { LogService } from './log.service';
import * as i0 from "@angular/core";
import * as i1 from "./alfresco-api.service";
import * as i2 from "./log.service";
export var ContentGroups;
(function (ContentGroups) {
    ContentGroups["ALFRESCO_ADMINISTRATORS"] = "ALFRESCO_ADMINISTRATORS";
})(ContentGroups || (ContentGroups = {}));
export class PeopleContentService {
    constructor(apiService, logService) {
        this.apiService = apiService;
        this.logService = logService;
        this.hasContentAdminRole = false;
        this.hasCheckedIsContentAdmin = false;
    }
    get peopleApi() {
        var _a;
        this._peopleApi = (_a = this._peopleApi) !== null && _a !== void 0 ? _a : new PeopleApi(this.apiService.getInstance());
        return this._peopleApi;
    }
    getPerson(personId) {
        const promise = this.peopleApi.getPerson(personId);
        return from(promise).pipe(catchError((error) => this.handleError(error)));
    }
    getCurrentPerson() {
        return this.getPerson('-me-');
    }
    listPeople(requestQuery) {
        const requestQueryParams = { skipCount: requestQuery === null || requestQuery === void 0 ? void 0 : requestQuery.skipCount, maxItems: requestQuery === null || requestQuery === void 0 ? void 0 : requestQuery.maxItems };
        const orderBy = this.buildOrderArray(requestQuery === null || requestQuery === void 0 ? void 0 : requestQuery.sorting);
        if (orderBy.length) {
            requestQueryParams['orderBy'] = orderBy;
        }
        const promise = this.peopleApi.listPeople(requestQueryParams);
        return from(promise).pipe(map(response => {
            return {
                pagination: response.list.pagination,
                entries: response.list.entries.map((person) => person.entry)
            };
        }), catchError((err) => this.handleError(err)));
    }
    createPerson(newPerson, opts) {
        return from(this.peopleApi.createPerson(newPerson, opts)).pipe(map((res) => res === null || res === void 0 ? void 0 : res.entry), catchError((error) => this.handleError(error)));
    }
    isContentAdmin() {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.hasCheckedIsContentAdmin) {
                const user = yield this.getCurrentPerson().toPromise();
                this.hasContentAdminRole = (_b = (_a = user === null || user === void 0 ? void 0 : user.entry) === null || _a === void 0 ? void 0 : _a.capabilities) === null || _b === void 0 ? void 0 : _b.isAdmin;
                this.hasCheckedIsContentAdmin = true;
            }
            return this.hasContentAdminRole;
        });
    }
    buildOrderArray(sorting) {
        return (sorting === null || sorting === void 0 ? void 0 : sorting.orderBy) && (sorting === null || sorting === void 0 ? void 0 : sorting.direction) ? [`${sorting.orderBy} ${sorting.direction.toUpperCase()}`] : [];
    }
    handleError(error) {
        this.logService.error(error);
        return throwError(error || 'Server error');
    }
}
PeopleContentService.ɵprov = i0.ɵɵdefineInjectable({ factory: function PeopleContentService_Factory() { return new PeopleContentService(i0.ɵɵinject(i1.AlfrescoApiService), i0.ɵɵinject(i2.LogService)); }, token: PeopleContentService, providedIn: "root" });
PeopleContentService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
PeopleContentService.ctorParameters = () => [
    { type: AlfrescoApiService },
    { type: LogService }
];
//# sourceMappingURL=data:application/json;base64,