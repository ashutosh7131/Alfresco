import { Injectable } from '@angular/core';
import { AppConfigService } from '../app-config/app-config.service';
import { AlfrescoApiService } from '../services/alfresco-api.service';
import { StorageService } from './storage.service';
import { UserPreferencesService } from './user-preferences.service';
import { DemoForm } from '../mock/form/demo-form.mock';
import * as i0 from "@angular/core";
import * as i1 from "../app-config/app-config.service";
import * as i2 from "./alfresco-api.service";
import * as i3 from "./user-preferences.service";
import * as i4 from "./storage.service";
export class CoreAutomationService {
    constructor(appConfigService, alfrescoApiService, userPreferencesService, storageService) {
        this.appConfigService = appConfigService;
        this.alfrescoApiService = alfrescoApiService;
        this.userPreferencesService = userPreferencesService;
        this.storageService = storageService;
        this.forms = new DemoForm();
    }
    setup() {
        const adfProxy = window['adf'] || {};
        adfProxy.getConfigField = (field) => {
            return this.appConfigService.get(field);
        };
        adfProxy.setConfigField = (field, value) => {
            this.appConfigService.config[field] = JSON.parse(value);
        };
        adfProxy.setStorageItem = (key, data) => {
            this.storageService.setItem(key, data);
        };
        adfProxy.removeStorageItem = (key) => {
            this.storageService.removeItem(key);
        };
        adfProxy.getStorageItem = (key) => {
            return this.storageService.getItem(key);
        };
        adfProxy.setUserPreference = (key, data) => {
            this.userPreferencesService.set(key, data);
        };
        adfProxy.setFormInEditor = (json) => {
            this.forms.formDefinition = JSON.parse(json);
        };
        adfProxy.setCloudFormInEditor = (json) => {
            this.forms.cloudFormDefinition = JSON.parse(json);
        };
        adfProxy.clearStorage = () => {
            this.storageService.clear();
        };
        adfProxy.apiReset = () => {
            this.alfrescoApiService.reset();
        };
        window['adf'] = adfProxy;
    }
}
CoreAutomationService.ɵprov = i0.ɵɵdefineInjectable({ factory: function CoreAutomationService_Factory() { return new CoreAutomationService(i0.ɵɵinject(i1.AppConfigService), i0.ɵɵinject(i2.AlfrescoApiService), i0.ɵɵinject(i3.UserPreferencesService), i0.ɵɵinject(i4.StorageService)); }, token: CoreAutomationService, providedIn: "root" });
CoreAutomationService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
CoreAutomationService.ctorParameters = () => [
    { type: AppConfigService },
    { type: AlfrescoApiService },
    { type: UserPreferencesService },
    { type: StorageService }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0b21hdGlvbi5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Ii9ob21lL3RyYXZpcy9idWlsZC9BbGZyZXNjby9hbGZyZXNjby1uZzItY29tcG9uZW50cy9saWIvY29yZS8iLCJzb3VyY2VzIjpbInNlcnZpY2VzL2F1dG9tYXRpb24uc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFpQkEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQztBQUNwRSxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQztBQUN0RSxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDbkQsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDcEUsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLDZCQUE2QixDQUFDOzs7Ozs7QUFLdkQsTUFBTSxPQUFPLHFCQUFxQjtJQUk5QixZQUFvQixnQkFBa0MsRUFDbEMsa0JBQXNDLEVBQ3RDLHNCQUE4QyxFQUM5QyxjQUE4QjtRQUg5QixxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQWtCO1FBQ2xDLHVCQUFrQixHQUFsQixrQkFBa0IsQ0FBb0I7UUFDdEMsMkJBQXNCLEdBQXRCLHNCQUFzQixDQUF3QjtRQUM5QyxtQkFBYyxHQUFkLGNBQWMsQ0FBZ0I7UUFMM0MsVUFBSyxHQUFHLElBQUksUUFBUSxFQUFFLENBQUM7SUFNOUIsQ0FBQztJQUVELEtBQUs7UUFDRCxNQUFNLFFBQVEsR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDO1FBRXJDLFFBQVEsQ0FBQyxjQUFjLEdBQUcsQ0FBQyxLQUFhLEVBQU8sRUFBRTtZQUM3QyxPQUFPLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDNUMsQ0FBQyxDQUFDO1FBRUYsUUFBUSxDQUFDLGNBQWMsR0FBRyxDQUFDLEtBQWEsRUFBRSxLQUFhLEVBQUUsRUFBRTtZQUN2RCxJQUFJLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDNUQsQ0FBQyxDQUFDO1FBRUYsUUFBUSxDQUFDLGNBQWMsR0FBRyxDQUFDLEdBQVcsRUFBRSxJQUFZLEVBQUUsRUFBRTtZQUNwRCxJQUFJLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDM0MsQ0FBQyxDQUFDO1FBRUYsUUFBUSxDQUFDLGlCQUFpQixHQUFHLENBQUMsR0FBVyxFQUFFLEVBQUU7WUFDekMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDeEMsQ0FBQyxDQUFDO1FBRUYsUUFBUSxDQUFDLGNBQWMsR0FBRyxDQUFDLEdBQVcsRUFBVSxFQUFFO1lBQzlDLE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDNUMsQ0FBQyxDQUFDO1FBRUYsUUFBUSxDQUFDLGlCQUFpQixHQUFHLENBQUMsR0FBVyxFQUFFLElBQVMsRUFBRSxFQUFFO1lBQ3BELElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQy9DLENBQUMsQ0FBQztRQUVGLFFBQVEsQ0FBQyxlQUFlLEdBQUcsQ0FBQyxJQUFZLEVBQUUsRUFBRTtZQUN4QyxJQUFJLENBQUMsS0FBSyxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ2pELENBQUMsQ0FBQztRQUVGLFFBQVEsQ0FBQyxvQkFBb0IsR0FBRyxDQUFDLElBQVksRUFBRSxFQUFFO1lBQzdDLElBQUksQ0FBQyxLQUFLLENBQUMsbUJBQW1CLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUN0RCxDQUFDLENBQUM7UUFFRixRQUFRLENBQUMsWUFBWSxHQUFHLEdBQUcsRUFBRTtZQUN6QixJQUFJLENBQUMsY0FBYyxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQ2hDLENBQUMsQ0FBQztRQUVGLFFBQVEsQ0FBQyxRQUFRLEdBQUcsR0FBRyxFQUFFO1lBQ3JCLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUNwQyxDQUFDLENBQUM7UUFFRixNQUFNLENBQUMsS0FBSyxDQUFDLEdBQUcsUUFBUSxDQUFDO0lBQzdCLENBQUM7Ozs7WUF6REosVUFBVSxTQUFDO2dCQUNSLFVBQVUsRUFBRSxNQUFNO2FBQ3JCOzs7WUFSUSxnQkFBZ0I7WUFDaEIsa0JBQWtCO1lBRWxCLHNCQUFzQjtZQUR0QixjQUFjIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQXBwQ29uZmlnU2VydmljZSB9IGZyb20gJy4uL2FwcC1jb25maWcvYXBwLWNvbmZpZy5zZXJ2aWNlJztcbmltcG9ydCB7IEFsZnJlc2NvQXBpU2VydmljZSB9IGZyb20gJy4uL3NlcnZpY2VzL2FsZnJlc2NvLWFwaS5zZXJ2aWNlJztcbmltcG9ydCB7IFN0b3JhZ2VTZXJ2aWNlIH0gZnJvbSAnLi9zdG9yYWdlLnNlcnZpY2UnO1xuaW1wb3J0IHsgVXNlclByZWZlcmVuY2VzU2VydmljZSB9IGZyb20gJy4vdXNlci1wcmVmZXJlbmNlcy5zZXJ2aWNlJztcbmltcG9ydCB7IERlbW9Gb3JtIH0gZnJvbSAnLi4vbW9jay9mb3JtL2RlbW8tZm9ybS5tb2NrJztcblxuQEluamVjdGFibGUoe1xuICAgIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBDb3JlQXV0b21hdGlvblNlcnZpY2Uge1xuXG4gICAgcHVibGljIGZvcm1zID0gbmV3IERlbW9Gb3JtKCk7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGFwcENvbmZpZ1NlcnZpY2U6IEFwcENvbmZpZ1NlcnZpY2UsXG4gICAgICAgICAgICAgICAgcHJpdmF0ZSBhbGZyZXNjb0FwaVNlcnZpY2U6IEFsZnJlc2NvQXBpU2VydmljZSxcbiAgICAgICAgICAgICAgICBwcml2YXRlIHVzZXJQcmVmZXJlbmNlc1NlcnZpY2U6IFVzZXJQcmVmZXJlbmNlc1NlcnZpY2UsXG4gICAgICAgICAgICAgICAgcHJpdmF0ZSBzdG9yYWdlU2VydmljZTogU3RvcmFnZVNlcnZpY2UpIHtcbiAgICB9XG5cbiAgICBzZXR1cCgpIHtcbiAgICAgICAgY29uc3QgYWRmUHJveHkgPSB3aW5kb3dbJ2FkZiddIHx8IHt9O1xuXG4gICAgICAgIGFkZlByb3h5LmdldENvbmZpZ0ZpZWxkID0gKGZpZWxkOiBzdHJpbmcpOiBhbnkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYXBwQ29uZmlnU2VydmljZS5nZXQoZmllbGQpO1xuICAgICAgICB9O1xuXG4gICAgICAgIGFkZlByb3h5LnNldENvbmZpZ0ZpZWxkID0gKGZpZWxkOiBzdHJpbmcsIHZhbHVlOiBzdHJpbmcpID0+IHtcbiAgICAgICAgICAgIHRoaXMuYXBwQ29uZmlnU2VydmljZS5jb25maWdbZmllbGRdID0gSlNPTi5wYXJzZSh2YWx1ZSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgYWRmUHJveHkuc2V0U3RvcmFnZUl0ZW0gPSAoa2V5OiBzdHJpbmcsIGRhdGE6IHN0cmluZykgPT4ge1xuICAgICAgICAgICAgdGhpcy5zdG9yYWdlU2VydmljZS5zZXRJdGVtKGtleSwgZGF0YSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgYWRmUHJveHkucmVtb3ZlU3RvcmFnZUl0ZW0gPSAoa2V5OiBzdHJpbmcpID0+IHtcbiAgICAgICAgICAgIHRoaXMuc3RvcmFnZVNlcnZpY2UucmVtb3ZlSXRlbShrZXkpO1xuICAgICAgICB9O1xuXG4gICAgICAgIGFkZlByb3h5LmdldFN0b3JhZ2VJdGVtID0gKGtleTogc3RyaW5nKTogc3RyaW5nID0+IHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnN0b3JhZ2VTZXJ2aWNlLmdldEl0ZW0oa2V5KTtcbiAgICAgICAgfTtcblxuICAgICAgICBhZGZQcm94eS5zZXRVc2VyUHJlZmVyZW5jZSA9IChrZXk6IHN0cmluZywgZGF0YTogYW55KSA9PiB7XG4gICAgICAgICAgICB0aGlzLnVzZXJQcmVmZXJlbmNlc1NlcnZpY2Uuc2V0KGtleSwgZGF0YSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgYWRmUHJveHkuc2V0Rm9ybUluRWRpdG9yID0gKGpzb246IHN0cmluZykgPT4ge1xuICAgICAgICAgICAgdGhpcy5mb3Jtcy5mb3JtRGVmaW5pdGlvbiA9IEpTT04ucGFyc2UoanNvbik7XG4gICAgICAgIH07XG5cbiAgICAgICAgYWRmUHJveHkuc2V0Q2xvdWRGb3JtSW5FZGl0b3IgPSAoanNvbjogc3RyaW5nKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmZvcm1zLmNsb3VkRm9ybURlZmluaXRpb24gPSBKU09OLnBhcnNlKGpzb24pO1xuICAgICAgICB9O1xuXG4gICAgICAgIGFkZlByb3h5LmNsZWFyU3RvcmFnZSA9ICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuc3RvcmFnZVNlcnZpY2UuY2xlYXIoKTtcbiAgICAgICAgfTtcblxuICAgICAgICBhZGZQcm94eS5hcGlSZXNldCA9ICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuYWxmcmVzY29BcGlTZXJ2aWNlLnJlc2V0KCk7XG4gICAgICAgIH07XG5cbiAgICAgICAgd2luZG93WydhZGYnXSA9IGFkZlByb3h5O1xuICAgIH1cbn1cbiJdfQ==