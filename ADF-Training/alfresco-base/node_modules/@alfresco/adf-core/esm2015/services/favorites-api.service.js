import { Injectable } from '@angular/core';
import { FavoritesApi } from '@alfresco/js-api';
import { from, of } from 'rxjs';
import { AlfrescoApiService } from './alfresco-api.service';
import { UserPreferencesService } from './user-preferences.service';
import { catchError } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "./alfresco-api.service";
import * as i2 from "./user-preferences.service";
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './alfresco-api.service';
import * as ɵngcc2 from './user-preferences.service';
export class FavoritesApiService {
    constructor(apiService, preferences) {
        this.apiService = apiService;
        this.preferences = preferences;
    }
    get favoritesApi() {
        var _a;
        this._favoritesApi = (_a = this._favoritesApi) !== null && _a !== void 0 ? _a : new FavoritesApi(this.apiService.getInstance());
        return this._favoritesApi;
    }
    static remapEntry({ entry }) {
        entry.properties = {
            'cm:title': entry.title,
            'cm:description': entry.description
        };
        return { entry };
    }
    remapFavoritesData(data = {}) {
        var _a, _b;
        const pagination = (((_a = data === null || data === void 0 ? void 0 : data.list) === null || _a === void 0 ? void 0 : _a.pagination) || {});
        const entries = this
            .remapFavoriteEntries(((_b = data === null || data === void 0 ? void 0 : data.list) === null || _b === void 0 ? void 0 : _b.entries) || []);
        return {
            list: { entries, pagination }
        };
    }
    remapFavoriteEntries(entries) {
        return entries
            .map(({ entry: { target } }) => ({
            entry: target.file || target.folder
        }))
            .filter(({ entry }) => (!!entry))
            .map(FavoritesApiService.remapEntry);
    }
    getFavorites(personId, options) {
        const defaultOptions = {
            maxItems: this.preferences.paginationSize,
            skipCount: 0,
            where: '(EXISTS(target/file) OR EXISTS(target/folder))',
            include: ['properties', 'allowableOperations']
        };
        const queryOptions = Object.assign(defaultOptions, options);
        const promise = this.favoritesApi
            .listFavorites(personId, queryOptions)
            .then(this.remapFavoritesData);
        return from(promise).pipe(catchError((err) => of(err)));
    }
}
FavoritesApiService.ɵfac = function FavoritesApiService_Factory(t) { return new (t || FavoritesApiService)(ɵngcc0.ɵɵinject(ɵngcc1.AlfrescoApiService), ɵngcc0.ɵɵinject(ɵngcc2.UserPreferencesService)); };
FavoritesApiService.ɵprov = i0.ɵɵdefineInjectable({ factory: function FavoritesApiService_Factory() { return new FavoritesApiService(i0.ɵɵinject(i1.AlfrescoApiService), i0.ɵɵinject(i2.UserPreferencesService)); }, token: FavoritesApiService, providedIn: "root" });
FavoritesApiService.ctorParameters = () => [
    { type: AlfrescoApiService },
    { type: UserPreferencesService }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FavoritesApiService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc1.AlfrescoApiService }, { type: ɵngcc2.UserPreferencesService }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmF2b3JpdGVzLWFwaS5zZXJ2aWNlLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9ob21lL3RyYXZpcy9idWlsZC9BbGZyZXNjby9hbGZyZXNjby1uZzItY29tcG9uZW50cy9saWIvY29yZS9zZXJ2aWNlcy9mYXZvcml0ZXMtYXBpLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBaUJBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLFlBQVksRUFBOEIsTUFBTSxrQkFBa0IsQ0FBQztBQUM1RSxPQUFPLEVBQWMsSUFBSSxFQUFFLEVBQUUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUM1QyxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUM1RCxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUNwRSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDNUM7QUFFc0I7QUFJaEI7Ozs7QUFGTixNQUFNLE9BQU8sbUJBQW1CO0FBQ2hDLElBZ0JJLFlBQ1ksVUFBOEIsRUFDOUIsV0FBbUM7QUFDaEQsUUFGYSxlQUFVLEdBQVYsVUFBVSxDQUFvQjtBQUFDLFFBQy9CLGdCQUFXLEdBQVgsV0FBVyxDQUF3QjtBQUNuRCxJQUNJLENBQUM7QUFDTCxJQW5CSSxJQUFJLFlBQVk7QUFBSztBQUN2QixRQUFNLElBQUksQ0FBQyxhQUFhLFNBQUcsSUFBSSxDQUFDLGFBQWEsbUNBQUksSUFBSSxZQUFZLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDO0FBQ25HLFFBQVEsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDO0FBQ2xDLElBQUksQ0FBQztBQUNMLElBQ0ksTUFBTSxDQUFDLFVBQVUsQ0FBQyxFQUFFLEtBQUssRUFBTztBQUFJLFFBQ2hDLEtBQUssQ0FBQyxVQUFVLEdBQUc7QUFDM0IsWUFBWSxVQUFVLEVBQUUsS0FBSyxDQUFDLEtBQUs7QUFDbkMsWUFBWSxnQkFBZ0IsRUFBRSxLQUFLLENBQUMsV0FBVztBQUMvQyxTQUFTLENBQUM7QUFDVixRQUNRLE9BQU8sRUFBRSxLQUFLLEVBQUUsQ0FBQztBQUN6QixJQUFJLENBQUM7QUFDTCxJQU9JLGtCQUFrQixDQUFDLE9BQXVCLEVBQUU7QUFBSTtBQUM1QyxRQUFBLE1BQU0sVUFBVSxHQUFHLENBQUMsT0FBQSxJQUFJLGFBQUosSUFBSSx1QkFBSixJQUFJLENBQUUsSUFBSSwwQ0FBRSxVQUFVLEtBQUksRUFBRSxDQUFDLENBQUM7QUFDMUQsUUFBUSxNQUFNLE9BQU8sR0FBVSxJQUFJO0FBQ25DLGFBQWEsb0JBQW9CLENBQUMsT0FBQSxJQUFJLGFBQUosSUFBSSx1QkFBSixJQUFJLENBQUUsSUFBSSwwQ0FBRSxPQUFPLEtBQUksRUFBRSxDQUFDLENBQUM7QUFDN0QsUUFDUSxPQUFvQjtBQUM1QixZQUFZLElBQUksRUFBRSxFQUFFLE9BQU8sRUFBRSxVQUFVLEVBQUU7QUFDekMsU0FBUyxDQUFDO0FBQ1YsSUFBSSxDQUFDO0FBQ0wsSUFDSSxvQkFBb0IsQ0FBQyxPQUFjO0FBQ3ZDLFFBQVEsT0FBTyxPQUFPO0FBQ3RCLGFBQWEsR0FBRyxDQUFDLENBQUMsRUFBRSxLQUFLLEVBQUUsRUFBRSxNQUFNLEVBQUUsRUFBTyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2xELFlBQWdCLEtBQUssRUFBRSxNQUFNLENBQUMsSUFBSSxJQUFJLE1BQU0sQ0FBQyxNQUFNO0FBQ25ELFNBQWEsQ0FBQyxDQUFDO0FBQ2YsYUFBYSxNQUFNLENBQUMsQ0FBQyxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUM3QyxhQUFhLEdBQUcsQ0FBQyxtQkFBbUIsQ0FBQyxVQUFVLENBQUMsQ0FBQztBQUNqRCxJQUFJLENBQUM7QUFDTCxJQU9JLFlBQVksQ0FBQyxRQUFnQixFQUFFLE9BQWE7QUFBSSxRQUM1QyxNQUFNLGNBQWMsR0FBRztBQUMvQixZQUFZLFFBQVEsRUFBRSxJQUFJLENBQUMsV0FBVyxDQUFDLGNBQWM7QUFDckQsWUFBWSxTQUFTLEVBQUUsQ0FBQztBQUN4QixZQUFZLEtBQUssRUFBRSxnREFBZ0Q7QUFDbkUsWUFBWSxPQUFPLEVBQUUsQ0FBQyxZQUFZLEVBQUUscUJBQXFCLENBQUM7QUFDMUQsU0FBUyxDQUFDO0FBQ1YsUUFBUSxNQUFNLFlBQVksR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLGNBQWMsRUFBRSxPQUFPLENBQUMsQ0FBQztBQUNwRSxRQUFRLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxZQUFZO0FBQ3pDLGFBQWEsYUFBYSxDQUFDLFFBQVEsRUFBRSxZQUFZLENBQUM7QUFDbEQsYUFBYSxJQUFJLENBQUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLENBQUM7QUFDM0MsUUFDUSxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQ3JCLFVBQVUsQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQy9CLENBQUM7QUFDVixJQUFJLENBQUM7QUFDTDswTUFBQztBQUNELHVRQWpFSztBQUFDO0VBSEwsVUFBVSxTQUFDLHJCQUtHLFlBVE4sa0JBQWtCO0tBS3ZCLFVBQVUsRUFBRSxNQUFNLHZCQUxTLFlBQ3RCLHNCQUFzQjtBQUs5QixBQUxpQzs7Ozs7OzRIQUFFO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBGYXZvcml0ZXNBcGksIE5vZGVQYWdpbmcsIEZhdm9yaXRlUGFnaW5nIH0gZnJvbSAnQGFsZnJlc2NvL2pzLWFwaSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBmcm9tLCBvZiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgQWxmcmVzY29BcGlTZXJ2aWNlIH0gZnJvbSAnLi9hbGZyZXNjby1hcGkuc2VydmljZSc7XG5pbXBvcnQgeyBVc2VyUHJlZmVyZW5jZXNTZXJ2aWNlIH0gZnJvbSAnLi91c2VyLXByZWZlcmVuY2VzLnNlcnZpY2UnO1xuaW1wb3J0IHsgY2F0Y2hFcnJvciB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuQEluamVjdGFibGUoe1xuICAgIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBGYXZvcml0ZXNBcGlTZXJ2aWNlIHtcblxuICAgIF9mYXZvcml0ZXNBcGk6IEZhdm9yaXRlc0FwaTtcbiAgICBnZXQgZmF2b3JpdGVzQXBpKCk6IEZhdm9yaXRlc0FwaSB7XG4gICAgICAgIHRoaXMuX2Zhdm9yaXRlc0FwaSA9IHRoaXMuX2Zhdm9yaXRlc0FwaSA/PyBuZXcgRmF2b3JpdGVzQXBpKHRoaXMuYXBpU2VydmljZS5nZXRJbnN0YW5jZSgpKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2Zhdm9yaXRlc0FwaTtcbiAgICB9XG5cbiAgICBzdGF0aWMgcmVtYXBFbnRyeSh7IGVudHJ5IH06IGFueSk6IGFueSB7XG4gICAgICAgIGVudHJ5LnByb3BlcnRpZXMgPSB7XG4gICAgICAgICAgICAnY206dGl0bGUnOiBlbnRyeS50aXRsZSxcbiAgICAgICAgICAgICdjbTpkZXNjcmlwdGlvbic6IGVudHJ5LmRlc2NyaXB0aW9uXG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIHsgZW50cnkgfTtcbiAgICB9XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHJpdmF0ZSBhcGlTZXJ2aWNlOiBBbGZyZXNjb0FwaVNlcnZpY2UsXG4gICAgICAgIHByaXZhdGUgcHJlZmVyZW5jZXM6IFVzZXJQcmVmZXJlbmNlc1NlcnZpY2VcbiAgICApIHtcbiAgICB9XG5cbiAgICByZW1hcEZhdm9yaXRlc0RhdGEoZGF0YTogRmF2b3JpdGVQYWdpbmcgPSB7fSk6IE5vZGVQYWdpbmcge1xuICAgICAgICBjb25zdCBwYWdpbmF0aW9uID0gKGRhdGE/Lmxpc3Q/LnBhZ2luYXRpb24gfHwge30pO1xuICAgICAgICBjb25zdCBlbnRyaWVzOiBhbnlbXSA9IHRoaXNcbiAgICAgICAgICAgIC5yZW1hcEZhdm9yaXRlRW50cmllcyhkYXRhPy5saXN0Py5lbnRyaWVzIHx8IFtdKTtcblxuICAgICAgICByZXR1cm4gPE5vZGVQYWdpbmc+IHtcbiAgICAgICAgICAgIGxpc3Q6IHsgZW50cmllcywgcGFnaW5hdGlvbiB9XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgcmVtYXBGYXZvcml0ZUVudHJpZXMoZW50cmllczogYW55W10pIHtcbiAgICAgICAgcmV0dXJuIGVudHJpZXNcbiAgICAgICAgICAgIC5tYXAoKHsgZW50cnk6IHsgdGFyZ2V0IH0gfTogYW55KSA9PiAoe1xuICAgICAgICAgICAgICAgIGVudHJ5OiB0YXJnZXQuZmlsZSB8fCB0YXJnZXQuZm9sZGVyXG4gICAgICAgICAgICB9KSlcbiAgICAgICAgICAgIC5maWx0ZXIoKHsgZW50cnkgfSkgPT4gKCEhZW50cnkpKVxuICAgICAgICAgICAgLm1hcChGYXZvcml0ZXNBcGlTZXJ2aWNlLnJlbWFwRW50cnkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGZhdm9yaXRlcyBmb3IgYSB1c2VyLlxuICAgICAqIEBwYXJhbSBwZXJzb25JZCBJRCBvZiB0aGUgdXNlclxuICAgICAqIEBwYXJhbSBvcHRpb25zIE9wdGlvbnMgc3VwcG9ydGVkIGJ5IEpTLUFQSVxuICAgICAqIEByZXR1cm5zIExpc3Qgb2YgZmF2b3JpdGVzXG4gICAgICovXG4gICAgZ2V0RmF2b3JpdGVzKHBlcnNvbklkOiBzdHJpbmcsIG9wdGlvbnM/OiBhbnkpOiBPYnNlcnZhYmxlPE5vZGVQYWdpbmc+IHtcbiAgICAgICAgY29uc3QgZGVmYXVsdE9wdGlvbnMgPSB7XG4gICAgICAgICAgICBtYXhJdGVtczogdGhpcy5wcmVmZXJlbmNlcy5wYWdpbmF0aW9uU2l6ZSxcbiAgICAgICAgICAgIHNraXBDb3VudDogMCxcbiAgICAgICAgICAgIHdoZXJlOiAnKEVYSVNUUyh0YXJnZXQvZmlsZSkgT1IgRVhJU1RTKHRhcmdldC9mb2xkZXIpKScsXG4gICAgICAgICAgICBpbmNsdWRlOiBbJ3Byb3BlcnRpZXMnLCAnYWxsb3dhYmxlT3BlcmF0aW9ucyddXG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IHF1ZXJ5T3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oZGVmYXVsdE9wdGlvbnMsIG9wdGlvbnMpO1xuICAgICAgICBjb25zdCBwcm9taXNlID0gdGhpcy5mYXZvcml0ZXNBcGlcbiAgICAgICAgICAgIC5saXN0RmF2b3JpdGVzKHBlcnNvbklkLCBxdWVyeU9wdGlvbnMpXG4gICAgICAgICAgICAudGhlbih0aGlzLnJlbWFwRmF2b3JpdGVzRGF0YSk7XG5cbiAgICAgICAgcmV0dXJuIGZyb20ocHJvbWlzZSkucGlwZShcbiAgICAgICAgICAgIGNhdGNoRXJyb3IoKGVycikgPT4gb2YoZXJyKSlcbiAgICAgICAgKTtcbiAgICB9XG59XG4iXX0=