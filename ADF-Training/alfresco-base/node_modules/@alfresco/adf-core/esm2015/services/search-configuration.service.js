import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
import * as ɵngcc0 from '@angular/core';
export class SearchConfigurationService {
    constructor() {
    }
    generateQueryBody(searchTerm, maxResults, skipCount) {
        const defaultQueryBody = {
            query: {
                query: searchTerm ? `'${searchTerm}*' OR name:'${searchTerm}*'` : searchTerm
            },
            include: ['path', 'allowableOperations'],
            paging: {
                maxItems: maxResults,
                skipCount: skipCount
            },
            filterQueries: [
                { query: "TYPE:'cm:folder' OR TYPE:'cm:content'" },
                { query: 'NOT cm:creator:System' }
            ]
        };
        return defaultQueryBody;
    }
}
SearchConfigurationService.ɵfac = function SearchConfigurationService_Factory(t) { return new (t || SearchConfigurationService)(); };
SearchConfigurationService.ɵprov = i0.ɵɵdefineInjectable({ factory: function SearchConfigurationService_Factory() { return new SearchConfigurationService(); }, token: SearchConfigurationService, providedIn: "root" });
SearchConfigurationService.ctorParameters = () => [];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SearchConfigurationService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return []; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VhcmNoLWNvbmZpZ3VyYXRpb24uc2VydmljZS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vaG9tZS90cmF2aXMvYnVpbGQvQWxmcmVzY28vYWxmcmVzY28tbmcyLWNvbXBvbmVudHMvbGliL2NvcmUvc2VydmljZXMvc2VhcmNoLWNvbmZpZ3VyYXRpb24uc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFpQkEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQzs7QUFNQSxNQUFNLE9BQU8sMEJBQTBCO0FBQUcsSUFFdEM7QUFDSixJQUFJLENBQUM7QUFDTCxJQVFXLGlCQUFpQixDQUFDLFVBQWtCLEVBQUUsVUFBa0IsRUFBRSxTQUFpQjtBQUFJLFFBQ2xGLE1BQU0sZ0JBQWdCLEdBQWM7QUFDNUMsWUFBWSxLQUFLLEVBQUU7QUFDbkIsZ0JBQWdCLEtBQUssRUFBRSxVQUFVLENBQUMsQ0FBQyxDQUFDLElBQUksVUFBVSxlQUFlLFVBQVUsSUFBSSxDQUFDLENBQUMsQ0FBQyxVQUFVO0FBQzVGLGFBQWE7QUFDYixZQUFZLE9BQU8sRUFBRSxDQUFDLE1BQU0sRUFBRSxxQkFBcUIsQ0FBQztBQUNwRCxZQUFZLE1BQU0sRUFBRTtBQUNwQixnQkFBZ0IsUUFBUSxFQUFFLFVBQVU7QUFDcEMsZ0JBQWdCLFNBQVMsRUFBRSxTQUFTO0FBQ3BDLGFBQWE7QUFDYixZQUFZLGFBQWEsRUFBRTtBQUMzQixnQkFBZ0IsRUFBRSxLQUFLLEVBQUUsdUNBQXVDLEVBQUU7QUFDbEUsZ0JBQWdCLEVBQUUsS0FBSyxFQUFFLHVCQUF1QixFQUFFO0FBQUMsYUFBQTtBQUNuRCxTQUFTLENBQUM7QUFDVixRQUNRLE9BQU8sZ0JBQWdCLENBQUM7QUFDaEMsSUFBSSxDQUFDO0FBQ0w7cUlBQUM7QUFDRCx5TkE5Qks7QUFBQztBQUhMLFVBQVUsU0FBQyxrQkFDUixVQUFVLEVBQUUsTUFBTSxjQUNyQjs7Ozs7Z0RBQzBEO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBRdWVyeUJvZHkgfSBmcm9tICdAYWxmcmVzY28vanMtYXBpJztcbmltcG9ydCB7IFNlYXJjaENvbmZpZ3VyYXRpb25JbnRlcmZhY2UgfSBmcm9tICcuLi9pbnRlcmZhY2Uvc2VhcmNoLWNvbmZpZ3VyYXRpb24uaW50ZXJmYWNlJztcblxuQEluamVjdGFibGUoe1xuICAgIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBTZWFyY2hDb25maWd1cmF0aW9uU2VydmljZSBpbXBsZW1lbnRzIFNlYXJjaENvbmZpZ3VyYXRpb25JbnRlcmZhY2Uge1xuXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2VuZXJhdGVzIGEgUXVlcnlCb2R5IG9iamVjdCB3aXRoIGN1c3RvbSBzZWFyY2ggcGFyYW1ldGVycy5cbiAgICAgKiBAcGFyYW0gc2VhcmNoVGVybSBUZXJtIHRleHQgdG8gc2VhcmNoIGZvclxuICAgICAqIEBwYXJhbSBtYXhSZXN1bHRzIE1heGltdW0gbnVtYmVyIG9mIHNlYXJjaCByZXN1bHRzIHRvIHNob3cgaW4gYSBwYWdlXG4gICAgICogQHBhcmFtIHNraXBDb3VudCBUaGUgb2Zmc2V0IG9mIHRoZSBzdGFydCBvZiB0aGUgcGFnZSB3aXRoaW4gdGhlIHJlc3VsdHMgbGlzdFxuICAgICAqIEByZXR1cm5zIFF1ZXJ5IGJvZHkgZGVmaW5lZCBieSB0aGUgcGFyYW1ldGVyc1xuICAgICAqL1xuICAgIHB1YmxpYyBnZW5lcmF0ZVF1ZXJ5Qm9keShzZWFyY2hUZXJtOiBzdHJpbmcsIG1heFJlc3VsdHM6IG51bWJlciwgc2tpcENvdW50OiBudW1iZXIpOiBRdWVyeUJvZHkge1xuICAgICAgICBjb25zdCBkZWZhdWx0UXVlcnlCb2R5OiBRdWVyeUJvZHkgPSB7XG4gICAgICAgICAgICBxdWVyeToge1xuICAgICAgICAgICAgICAgIHF1ZXJ5OiBzZWFyY2hUZXJtID8gYCcke3NlYXJjaFRlcm19KicgT1IgbmFtZTonJHtzZWFyY2hUZXJtfSonYCA6IHNlYXJjaFRlcm1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBpbmNsdWRlOiBbJ3BhdGgnLCAnYWxsb3dhYmxlT3BlcmF0aW9ucyddLFxuICAgICAgICAgICAgcGFnaW5nOiB7XG4gICAgICAgICAgICAgICAgbWF4SXRlbXM6IG1heFJlc3VsdHMsXG4gICAgICAgICAgICAgICAgc2tpcENvdW50OiBza2lwQ291bnRcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBmaWx0ZXJRdWVyaWVzOiBbXG4gICAgICAgICAgICAgICAgeyBxdWVyeTogXCJUWVBFOidjbTpmb2xkZXInIE9SIFRZUEU6J2NtOmNvbnRlbnQnXCIgfSxcbiAgICAgICAgICAgICAgICB7IHF1ZXJ5OiAnTk9UIGNtOmNyZWF0b3I6U3lzdGVtJyB9XVxuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBkZWZhdWx0UXVlcnlCb2R5O1xuICAgIH1cbn1cbiJdfQ==