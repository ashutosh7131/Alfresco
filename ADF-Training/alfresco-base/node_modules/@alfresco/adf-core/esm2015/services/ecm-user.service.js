import { Injectable } from '@angular/core';
import { from } from 'rxjs';
import { map } from 'rxjs/operators';
import { ContentService } from './content.service';
import { AlfrescoApiService } from './alfresco-api.service';
import { EcmUserModel } from '../models/ecm-user.model';
import { PeopleApi } from '@alfresco/js-api';
import * as i0 from "@angular/core";
import * as i1 from "./alfresco-api.service";
import * as i2 from "./content.service";
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './alfresco-api.service';
import * as ɵngcc2 from './content.service';
export class EcmUserService {
    constructor(apiService, contentService) {
        this.apiService = apiService;
        this.contentService = contentService;
    }
    get peopleApi() {
        var _a;
        this._peopleApi = (_a = this._peopleApi) !== null && _a !== void 0 ? _a : new PeopleApi(this.apiService.getInstance());
        return this._peopleApi;
    }
    getUserInfo(userName) {
        return from(this.peopleApi.getPerson(userName))
            .pipe(map((personEntry) => new EcmUserModel(personEntry.entry)));
    }
    getCurrentUserInfo() {
        return this.getUserInfo('-me-');
    }
    getUserProfileImage(avatarId) {
        return this.contentService.getContentUrl(avatarId);
    }
}
EcmUserService.ɵfac = function EcmUserService_Factory(t) { return new (t || EcmUserService)(ɵngcc0.ɵɵinject(ɵngcc1.AlfrescoApiService), ɵngcc0.ɵɵinject(ɵngcc2.ContentService)); };
EcmUserService.ɵprov = i0.ɵɵdefineInjectable({ factory: function EcmUserService_Factory() { return new EcmUserService(i0.ɵɵinject(i1.AlfrescoApiService), i0.ɵɵinject(i2.ContentService)); }, token: EcmUserService, providedIn: "root" });
EcmUserService.ctorParameters = () => [
    { type: AlfrescoApiService },
    { type: ContentService }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(EcmUserService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc1.AlfrescoApiService }, { type: ɵngcc2.ContentService }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWNtLXVzZXIuc2VydmljZS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vaG9tZS90cmF2aXMvYnVpbGQvQWxmcmVzY28vYWxmcmVzY28tbmcyLWNvbXBvbmVudHMvbGliL2NvcmUvc2VydmljZXMvZWNtLXVzZXIuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFpQkEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQWMsSUFBSSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ3hDLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNyQyxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDbkQsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDNUQsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQ3hELE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUM3QztBQUVzQjtBQUlYOzs7O0FBRlgsTUFBTSxPQUFPLGNBQWM7QUFDM0IsSUFPSSxZQUFvQixVQUE4QixFQUM5QixjQUE4QjtBQUN0RCxRQUZ3QixlQUFVLEdBQVYsVUFBVSxDQUFvQjtBQUFDLFFBQy9CLG1CQUFjLEdBQWQsY0FBYyxDQUFnQjtBQUFDLElBQ25ELENBQUM7QUFDTCxJQVJJLElBQUksU0FBUztBQUFLO0FBQ2pCLFFBQUcsSUFBSSxDQUFDLFVBQVUsU0FBRyxJQUFJLENBQUMsVUFBVSxtQ0FBSSxJQUFJLFNBQVMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUM7QUFDMUYsUUFBUSxPQUFPLElBQUksQ0FBQyxVQUFVLENBQUM7QUFDL0IsSUFBSSxDQUFDO0FBQ0wsSUFVSSxXQUFXLENBQUMsUUFBZ0I7QUFBSSxRQUM1QixPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUN2RCxhQUFhLElBQUksQ0FDRCxHQUFHLENBQUMsQ0FBQyxXQUFXLEVBQUUsRUFBRSxDQUFDLElBQUksWUFBWSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUM1RCxDQUFDO0FBQ2QsSUFBSSxDQUFDO0FBQ0wsSUFLSSxrQkFBa0I7QUFDdEIsUUFBUSxPQUFPLElBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDeEMsSUFBSSxDQUFDO0FBQ0wsSUFNSSxtQkFBbUIsQ0FBQyxRQUFnQjtBQUFJLFFBQ3BDLE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDM0QsSUFBSSxDQUFDO0FBQ0w7bUxBQUM7QUFDRCwyT0F6Q0s7QUFBQztFQUhMLFVBQVUsU0FBQyxyQkFLRyxZQVROLGtCQUFrQjtLQUt2QixVQUFVLEVBQUUsTUFBTSx2QkFMUyxZQUR0QixjQUFjO0FBQUc7S0FPekI7Ozs7O29IQVAyQjtBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgZnJvbSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgbWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgQ29udGVudFNlcnZpY2UgfSBmcm9tICcuL2NvbnRlbnQuc2VydmljZSc7XG5pbXBvcnQgeyBBbGZyZXNjb0FwaVNlcnZpY2UgfSBmcm9tICcuL2FsZnJlc2NvLWFwaS5zZXJ2aWNlJztcbmltcG9ydCB7IEVjbVVzZXJNb2RlbCB9IGZyb20gJy4uL21vZGVscy9lY20tdXNlci5tb2RlbCc7XG5pbXBvcnQgeyBQZW9wbGVBcGkgfSBmcm9tICdAYWxmcmVzY28vanMtYXBpJztcblxuQEluamVjdGFibGUoe1xuICAgIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBFY21Vc2VyU2VydmljZSB7XG5cbiAgICBfcGVvcGxlQXBpOiBQZW9wbGVBcGk7XG4gICAgZ2V0IHBlb3BsZUFwaSgpOiBQZW9wbGVBcGkge1xuICAgICAgICB0aGlzLl9wZW9wbGVBcGkgPSB0aGlzLl9wZW9wbGVBcGkgPz8gbmV3IFBlb3BsZUFwaSh0aGlzLmFwaVNlcnZpY2UuZ2V0SW5zdGFuY2UoKSk7XG4gICAgICAgIHJldHVybiB0aGlzLl9wZW9wbGVBcGk7XG4gICAgfVxuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBhcGlTZXJ2aWNlOiBBbGZyZXNjb0FwaVNlcnZpY2UsXG4gICAgICAgICAgICAgICAgcHJpdmF0ZSBjb250ZW50U2VydmljZTogQ29udGVudFNlcnZpY2UpIHtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIGluZm9ybWF0aW9uIGFib3V0IGEgdXNlciBpZGVudGlmaWVkIGJ5IHRoZWlyIHVzZXJuYW1lLlxuICAgICAqIEBwYXJhbSB1c2VyTmFtZSBUYXJnZXQgdXNlcm5hbWVcbiAgICAgKiBAcmV0dXJucyBVc2VyIGluZm9ybWF0aW9uXG4gICAgICovXG4gICAgZ2V0VXNlckluZm8odXNlck5hbWU6IHN0cmluZyk6IE9ic2VydmFibGU8RWNtVXNlck1vZGVsPiB7XG4gICAgICAgIHJldHVybiBmcm9tKHRoaXMucGVvcGxlQXBpLmdldFBlcnNvbih1c2VyTmFtZSkpXG4gICAgICAgICAgICAucGlwZShcbiAgICAgICAgICAgICAgICBtYXAoKHBlcnNvbkVudHJ5KSA9PiBuZXcgRWNtVXNlck1vZGVsKHBlcnNvbkVudHJ5LmVudHJ5KSlcbiAgICAgICAgICAgICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyBpbmZvcm1hdGlvbiBhYm91dCB0aGUgdXNlciB3aG8gaXMgY3VycmVudGx5IGxvZ2dlZC1pbi5cbiAgICAgKiBAcmV0dXJucyBVc2VyIGluZm9ybWF0aW9uIGFzIGZvciBnZXRVc2VySW5mb1xuICAgICAqL1xuICAgIGdldEN1cnJlbnRVc2VySW5mbygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0VXNlckluZm8oJy1tZS0nKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgcHJvZmlsZSBpbWFnZSBhcyBhIFVSTC5cbiAgICAgKiBAcGFyYW0gYXZhdGFySWQgVGFyZ2V0IGF2YXRhclxuICAgICAqIEByZXR1cm5zIEltYWdlIFVSTFxuICAgICAqL1xuICAgIGdldFVzZXJQcm9maWxlSW1hZ2UoYXZhdGFySWQ6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbnRlbnRTZXJ2aWNlLmdldENvbnRlbnRVcmwoYXZhdGFySWQpO1xuICAgIH1cbn1cbiJdfQ==