import { Injectable } from '@angular/core';
import { AlfrescoApiService } from './alfresco-api.service';
import { from } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "./alfresco-api.service";
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './alfresco-api.service';
export const JSON_TYPE = ['application/json'];
export class OAuth2Service {
    constructor(alfrescoApiService) {
        this.alfrescoApiService = alfrescoApiService;
    }
    get apiClient() {
        return this.alfrescoApiService.getInstance().oauth2Auth;
    }
    request(opts) {
        return from(this.apiClient.callCustomApi(opts.url, opts.httpMethod, opts.pathParams, opts.queryParams, {}, {}, opts.bodyParam, JSON_TYPE, JSON_TYPE, Object));
    }
    get(opts) {
        return this.request(Object.assign(Object.assign({}, opts), { httpMethod: 'GET' }));
    }
    put(opts) {
        return this.request(Object.assign(Object.assign({}, opts), { httpMethod: 'PUT' }));
    }
    post(opts) {
        return this.request(Object.assign(Object.assign({}, opts), { httpMethod: 'POST' }));
    }
    delete(opts) {
        return this.request(Object.assign(Object.assign({}, opts), { httpMethod: 'DELETE' }));
    }
}
OAuth2Service.ɵfac = function OAuth2Service_Factory(t) { return new (t || OAuth2Service)(ɵngcc0.ɵɵinject(ɵngcc1.AlfrescoApiService)); };
OAuth2Service.ɵprov = i0.ɵɵdefineInjectable({ factory: function OAuth2Service_Factory() { return new OAuth2Service(i0.ɵɵinject(i1.AlfrescoApiService)); }, token: OAuth2Service, providedIn: "root" });
OAuth2Service.ctorParameters = () => [
    { type: AlfrescoApiService }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(OAuth2Service, [{
        type: Injectable,
        args: [{ providedIn: 'root' }]
    }], function () { return [{ type: ɵngcc1.AlfrescoApiService }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib2F1dGgyLnNlcnZpY2UuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL2hvbWUvdHJhdmlzL2J1aWxkL0FsZnJlc2NvL2FsZnJlc2NvLW5nMi1jb21wb25lbnRzL2xpYi9jb3JlL3NlcnZpY2VzL29hdXRoMi5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWlCQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQzVELE9BQU8sRUFBYyxJQUFJLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDeEM7QUFBcUM7OztBQUVyQyxNQUFNLENBQUMsTUFBTSxTQUFTLEdBQUcsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO0FBVzlDLE1BQU0sT0FBTyxhQUFhO0FBQzFCLElBQUksWUFBb0Isa0JBQXNDO0FBQUksUUFBMUMsdUJBQWtCLEdBQWxCLGtCQUFrQixDQUFvQjtBQUFDLElBQUUsQ0FBQztBQUNsRSxJQUNJLElBQUksU0FBUztBQUFLLFFBQ2QsT0FBTyxJQUFJLENBQUMsa0JBQWtCLENBQUMsV0FBVyxFQUFFLENBQUMsVUFBVSxDQUFDO0FBQ2hFLElBQUksQ0FBQztBQUNMLElBQ0ksT0FBTyxDQUFJLElBQXlCO0FBQUksUUFDcEMsT0FBTyxJQUFJLENBQ1AsSUFBSSxDQUFDLFNBQVMsQ0FBQyxhQUFhLENBQ3hCLElBQUksQ0FBQyxHQUFHLEVBQ1IsSUFBSSxDQUFDLFVBQVUsRUFDZixJQUFJLENBQUMsVUFBVSxFQUNmLElBQUksQ0FBQyxXQUFXLEVBQ2hCLEVBQUUsRUFDRixFQUFFLEVBQ0YsSUFBSSxDQUFDLFNBQVMsRUFDZCxTQUFTLEVBQ1QsU0FBUyxFQUNULE1BQU0sQ0FDVCxDQUNKLENBQUM7QUFDVixJQUFJLENBQUM7QUFDTCxJQUNJLEdBQUcsQ0FBSSxJQUF5QjtBQUFJLFFBQ2hDLE9BQU8sSUFBSSxDQUFDLE9BQU8saUNBQ1osSUFBSSxLQUNQLFVBQVUsRUFBRSxLQUFLLElBQ25CLENBQUM7QUFDWCxJQUFJLENBQUM7QUFDTCxJQUNJLEdBQUcsQ0FBSSxJQUF5QjtBQUFJLFFBQ2hDLE9BQU8sSUFBSSxDQUFDLE9BQU8saUNBQ1osSUFBSSxLQUNQLFVBQVUsRUFBRSxLQUFLLElBQ25CLENBQUM7QUFDWCxJQUFJLENBQUM7QUFDTCxJQUNJLElBQUksQ0FBSSxJQUF5QjtBQUFJLFFBQ2pDLE9BQU8sSUFBSSxDQUFDLE9BQU8saUNBQ1osSUFBSSxLQUNQLFVBQVUsRUFBRSxNQUFNLElBQ3BCLENBQUM7QUFDWCxJQUFJLENBQUM7QUFDTCxJQUNJLE1BQU0sQ0FBSSxJQUF5QjtBQUFJLFFBQ25DLE9BQU8sSUFBSSxDQUFDLE9BQU8saUNBQ1osSUFBSSxLQUNQLFVBQVUsRUFBRSxRQUFRLElBQ3RCLENBQUM7QUFDWCxJQUFJLENBQUM7QUFDTDt3SUFBQztBQUNELHVNQXBESztBQUFDO0VBREwsVUFBVSxTQUFDLEVBQUUsdkJBRUUsWUFoQlAsa0JBQWtCO0FBY0gsRUFBRSxGQWRJO0tBY0UsRUFBRTs7O21GQWRGO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBBbGZyZXNjb0FwaVNlcnZpY2UgfSBmcm9tICcuL2FsZnJlc2NvLWFwaS5zZXJ2aWNlJztcbmltcG9ydCB7IE9ic2VydmFibGUsIGZyb20gfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IE9hdXRoMkF1dGggfSBmcm9tICdAYWxmcmVzY28vanMtYXBpJztcblxuZXhwb3J0IGNvbnN0IEpTT05fVFlQRSA9IFsnYXBwbGljYXRpb24vanNvbiddO1xuXG5leHBvcnQgaW50ZXJmYWNlIE9BdXRoMlJlcXVlc3RQYXJhbXMge1xuICAgIHVybDogc3RyaW5nO1xuICAgIGh0dHBNZXRob2Q/OiBzdHJpbmc7XG4gICAgcGF0aFBhcmFtcz86IGFueTtcbiAgICBxdWVyeVBhcmFtcz86IGFueTtcbiAgICBib2R5UGFyYW0/OiBhbnk7XG59XG5cbkBJbmplY3RhYmxlKHsgcHJvdmlkZWRJbjogJ3Jvb3QnIH0pXG5leHBvcnQgY2xhc3MgT0F1dGgyU2VydmljZSB7XG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBhbGZyZXNjb0FwaVNlcnZpY2U6IEFsZnJlc2NvQXBpU2VydmljZSkge31cblxuICAgIGdldCBhcGlDbGllbnQoKTogT2F1dGgyQXV0aCB7XG4gICAgICAgIHJldHVybiB0aGlzLmFsZnJlc2NvQXBpU2VydmljZS5nZXRJbnN0YW5jZSgpLm9hdXRoMkF1dGg7XG4gICAgfVxuXG4gICAgcmVxdWVzdDxUPihvcHRzOiBPQXV0aDJSZXF1ZXN0UGFyYW1zKTogT2JzZXJ2YWJsZTxUPiB7XG4gICAgICAgIHJldHVybiBmcm9tKFxuICAgICAgICAgICAgdGhpcy5hcGlDbGllbnQuY2FsbEN1c3RvbUFwaShcbiAgICAgICAgICAgICAgICBvcHRzLnVybCxcbiAgICAgICAgICAgICAgICBvcHRzLmh0dHBNZXRob2QsXG4gICAgICAgICAgICAgICAgb3B0cy5wYXRoUGFyYW1zLFxuICAgICAgICAgICAgICAgIG9wdHMucXVlcnlQYXJhbXMsXG4gICAgICAgICAgICAgICAge30sXG4gICAgICAgICAgICAgICAge30sXG4gICAgICAgICAgICAgICAgb3B0cy5ib2R5UGFyYW0sXG4gICAgICAgICAgICAgICAgSlNPTl9UWVBFLFxuICAgICAgICAgICAgICAgIEpTT05fVFlQRSxcbiAgICAgICAgICAgICAgICBPYmplY3RcbiAgICAgICAgICAgIClcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBnZXQ8VD4ob3B0czogT0F1dGgyUmVxdWVzdFBhcmFtcyk6IE9ic2VydmFibGU8VD4ge1xuICAgICAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KHtcbiAgICAgICAgICAgIC4uLm9wdHMsXG4gICAgICAgICAgICBodHRwTWV0aG9kOiAnR0VUJ1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBwdXQ8VD4ob3B0czogT0F1dGgyUmVxdWVzdFBhcmFtcyk6IE9ic2VydmFibGU8VD4ge1xuICAgICAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KHtcbiAgICAgICAgICAgIC4uLm9wdHMsXG4gICAgICAgICAgICBodHRwTWV0aG9kOiAnUFVUJ1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBwb3N0PFQ+KG9wdHM6IE9BdXRoMlJlcXVlc3RQYXJhbXMpOiBPYnNlcnZhYmxlPFQ+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVxdWVzdCh7XG4gICAgICAgICAgICAuLi5vcHRzLFxuICAgICAgICAgICAgaHR0cE1ldGhvZDogJ1BPU1QnXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGRlbGV0ZTxUPihvcHRzOiBPQXV0aDJSZXF1ZXN0UGFyYW1zKTogT2JzZXJ2YWJsZTxUPiB7XG4gICAgICAgIHJldHVybiB0aGlzLnJlcXVlc3Qoe1xuICAgICAgICAgICAgLi4ub3B0cyxcbiAgICAgICAgICAgIGh0dHBNZXRob2Q6ICdERUxFVEUnXG4gICAgICAgIH0pO1xuICAgIH1cbn1cbiJdfQ==