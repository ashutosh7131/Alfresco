import { Injectable } from '@angular/core';
import { StorageService } from './storage.service';
import * as i0 from "@angular/core";
import * as i1 from "./storage.service";
export class JwtHelperService {
    constructor(storageService) {
        this.storageService = storageService;
    }
    decodeToken(token) {
        const parts = token.split('.');
        if (parts.length !== 3) {
            throw new Error('JWT must have 3 parts');
        }
        const decoded = this.urlBase64Decode(parts[1]);
        if (!decoded) {
            throw new Error('Cannot decode the token');
        }
        return JSON.parse(decoded);
    }
    urlBase64Decode(token) {
        let output = token.replace(/-/g, '+').replace(/_/g, '/');
        switch (output.length % 4) {
            case 0: {
                break;
            }
            case 2: {
                output += '==';
                break;
            }
            case 3: {
                output += '=';
                break;
            }
            default: {
                throw new Error('Illegal base64url string!');
            }
        }
        return decodeURIComponent(escape(window.atob(output)));
    }
    getValueFromLocalAccessToken(key) {
        return this.getValueFromToken(this.getAccessToken(), key);
    }
    getAccessToken() {
        return this.storageService.getItem(JwtHelperService.USER_ACCESS_TOKEN);
    }
    getValueFromToken(accessToken, key) {
        let value;
        if (accessToken) {
            const tokenPayload = this.decodeToken(accessToken);
            value = tokenPayload[key];
        }
        return value;
    }
    getRealmRoles() {
        const access = this.getValueFromLocalAccessToken(JwtHelperService.REALM_ACCESS);
        return access ? access['roles'] : [];
    }
    getClientRoles(clientName) {
        const clientRole = this.getValueFromLocalAccessToken(JwtHelperService.RESOURCE_ACCESS)[clientName];
        return clientRole ? clientRole['roles'] : [];
    }
    hasRealmRole(role) {
        let hasRole = false;
        if (this.getAccessToken()) {
            const realmRoles = this.getRealmRoles();
            hasRole = realmRoles.some((currentRole) => {
                return currentRole === role;
            });
        }
        return hasRole;
    }
    hasRealmRoles(rolesToCheck) {
        return rolesToCheck.some((currentRole) => {
            return this.hasRealmRole(currentRole);
        });
    }
    hasRealmRolesForClientRole(clientName, rolesToCheck) {
        return rolesToCheck.some((currentRole) => {
            return this.hasClientRole(clientName, currentRole);
        });
    }
    hasClientRole(clientName, role) {
        let hasRole = false;
        if (this.getAccessToken()) {
            const clientRoles = this.getClientRoles(clientName);
            hasRole = clientRoles.some((currentRole) => {
                return currentRole === role;
            });
        }
        return hasRole;
    }
}
JwtHelperService.USER_NAME = 'name';
JwtHelperService.FAMILY_NAME = 'family_name';
JwtHelperService.GIVEN_NAME = 'given_name';
JwtHelperService.USER_EMAIL = 'email';
JwtHelperService.USER_ACCESS_TOKEN = 'access_token';
JwtHelperService.REALM_ACCESS = 'realm_access';
JwtHelperService.RESOURCE_ACCESS = 'resource_access';
JwtHelperService.USER_PREFERRED_USERNAME = 'preferred_username';
JwtHelperService.ɵprov = i0.ɵɵdefineInjectable({ factory: function JwtHelperService_Factory() { return new JwtHelperService(i0.ɵɵinject(i1.StorageService)); }, token: JwtHelperService, providedIn: "root" });
JwtHelperService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
JwtHelperService.ctorParameters = () => [
    { type: StorageService }
];
//# sourceMappingURL=data:application/json;base64,