import { Injectable } from '@angular/core';
import { StorageService } from './storage.service';
import * as i0 from "@angular/core";
import * as i1 from "./storage.service";
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './storage.service';
export class JwtHelperService {
    constructor(storageService) {
        this.storageService = storageService;
    }
    decodeToken(token) {
        const parts = token.split('.');
        if (parts.length !== 3) {
            throw new Error('JWT must have 3 parts');
        }
        const decoded = this.urlBase64Decode(parts[1]);
        if (!decoded) {
            throw new Error('Cannot decode the token');
        }
        return JSON.parse(decoded);
    }
    urlBase64Decode(token) {
        let output = token.replace(/-/g, '+').replace(/_/g, '/');
        switch (output.length % 4) {
            case 0: {
                break;
            }
            case 2: {
                output += '==';
                break;
            }
            case 3: {
                output += '=';
                break;
            }
            default: {
                throw new Error('Illegal base64url string!');
            }
        }
        return decodeURIComponent(escape(window.atob(output)));
    }
    getValueFromLocalAccessToken(key) {
        return this.getValueFromToken(this.getAccessToken(), key);
    }
    getAccessToken() {
        return this.storageService.getItem(JwtHelperService.USER_ACCESS_TOKEN);
    }
    getValueFromToken(accessToken, key) {
        let value;
        if (accessToken) {
            const tokenPayload = this.decodeToken(accessToken);
            value = tokenPayload[key];
        }
        return value;
    }
    getRealmRoles() {
        const access = this.getValueFromLocalAccessToken(JwtHelperService.REALM_ACCESS);
        return access ? access['roles'] : [];
    }
    getClientRoles(clientName) {
        const clientRole = this.getValueFromLocalAccessToken(JwtHelperService.RESOURCE_ACCESS)[clientName];
        return clientRole ? clientRole['roles'] : [];
    }
    hasRealmRole(role) {
        let hasRole = false;
        if (this.getAccessToken()) {
            const realmRoles = this.getRealmRoles();
            hasRole = realmRoles.some((currentRole) => {
                return currentRole === role;
            });
        }
        return hasRole;
    }
    hasRealmRoles(rolesToCheck) {
        return rolesToCheck.some((currentRole) => {
            return this.hasRealmRole(currentRole);
        });
    }
    hasRealmRolesForClientRole(clientName, rolesToCheck) {
        return rolesToCheck.some((currentRole) => {
            return this.hasClientRole(clientName, currentRole);
        });
    }
    hasClientRole(clientName, role) {
        let hasRole = false;
        if (this.getAccessToken()) {
            const clientRoles = this.getClientRoles(clientName);
            hasRole = clientRoles.some((currentRole) => {
                return currentRole === role;
            });
        }
        return hasRole;
    }
}
JwtHelperService.ɵfac = function JwtHelperService_Factory(t) { return new (t || JwtHelperService)(ɵngcc0.ɵɵinject(ɵngcc1.StorageService)); };
JwtHelperService.USER_NAME = 'name';
JwtHelperService.FAMILY_NAME = 'family_name';
JwtHelperService.GIVEN_NAME = 'given_name';
JwtHelperService.USER_EMAIL = 'email';
JwtHelperService.USER_ACCESS_TOKEN = 'access_token';
JwtHelperService.REALM_ACCESS = 'realm_access';
JwtHelperService.RESOURCE_ACCESS = 'resource_access';
JwtHelperService.USER_PREFERRED_USERNAME = 'preferred_username';
JwtHelperService.ɵprov = i0.ɵɵdefineInjectable({ factory: function JwtHelperService_Factory() { return new JwtHelperService(i0.ɵɵinject(i1.StorageService)); }, token: JwtHelperService, providedIn: "root" });
JwtHelperService.ctorParameters = () => [
    { type: StorageService }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(JwtHelperService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc1.StorageService }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiand0LWhlbHBlci5zZXJ2aWNlLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9ob21lL3RyYXZpcy9idWlsZC9BbGZyZXNjby9hbGZyZXNjby1uZzItY29tcG9uZW50cy9saWIvY29yZS9zZXJ2aWNlcy9qd3QtaGVscGVyLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBaUJBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ25EO0FBRXNCOzs7QUFFdEIsTUFBTSxPQUFPLGdCQUFnQjtBQUM3QixJQVVJLFlBQW9CLGNBQThCO0FBQ3RELFFBRHdCLG1CQUFjLEdBQWQsY0FBYyxDQUFnQjtBQUFDLElBQ25ELENBQUM7QUFDTCxJQU1JLFdBQVcsQ0FBQyxLQUFLO0FBQUksUUFDakIsTUFBTSxLQUFLLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUN2QyxRQUNRLElBQUksS0FBSyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7QUFDaEMsWUFBWSxNQUFNLElBQUksS0FBSyxDQUFDLHVCQUF1QixDQUFDLENBQUM7QUFDckQsU0FBUztBQUNULFFBQ1EsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUN2RCxRQUFRLElBQUksQ0FBQyxPQUFPLEVBQUU7QUFDdEIsWUFBWSxNQUFNLElBQUksS0FBSyxDQUFDLHlCQUF5QixDQUFDLENBQUM7QUFDdkQsU0FBUztBQUNULFFBQ1EsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQ25DLElBQUksQ0FBQztBQUNMLElBQ1ksZUFBZSxDQUFDLEtBQUs7QUFBSSxRQUM3QixJQUFJLE1BQU0sR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksRUFB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TUFWSztBQUFDO0VBSEwsVUFBVSxTQUFDLHJCQUtHLFlBUE4sY0FBYztBQUFHO09BR3RCLFVBQVUsRUFBRSxNQUFNLGNBQ3JCOzs7OzsrRUFKMkI7QUFBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFN0b3JhZ2VTZXJ2aWNlIH0gZnJvbSAnLi9zdG9yYWdlLnNlcnZpY2UnO1xuXG5ASW5qZWN0YWJsZSh7XG4gICAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIEp3dEhlbHBlclNlcnZpY2Uge1xuXG4gICAgc3RhdGljIFVTRVJfTkFNRSA9ICduYW1lJztcbiAgICBzdGF0aWMgRkFNSUxZX05BTUUgPSAnZmFtaWx5X25hbWUnO1xuICAgIHN0YXRpYyBHSVZFTl9OQU1FID0gJ2dpdmVuX25hbWUnO1xuICAgIHN0YXRpYyBVU0VSX0VNQUlMID0gJ2VtYWlsJztcbiAgICBzdGF0aWMgVVNFUl9BQ0NFU1NfVE9LRU4gPSAnYWNjZXNzX3Rva2VuJztcbiAgICBzdGF0aWMgUkVBTE1fQUNDRVNTID0gJ3JlYWxtX2FjY2Vzcyc7XG4gICAgc3RhdGljIFJFU09VUkNFX0FDQ0VTUyA9ICdyZXNvdXJjZV9hY2Nlc3MnO1xuICAgIHN0YXRpYyBVU0VSX1BSRUZFUlJFRF9VU0VSTkFNRSA9ICdwcmVmZXJyZWRfdXNlcm5hbWUnO1xuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBzdG9yYWdlU2VydmljZTogU3RvcmFnZVNlcnZpY2UpIHtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEZWNvZGVzIGEgSlNPTiB3ZWIgdG9rZW4gaW50byBhIEpTIG9iamVjdC5cbiAgICAgKiBAcGFyYW0gdG9rZW4gVG9rZW4gaW4gZW5jb2RlZCBmb3JtXG4gICAgICogQHJldHVybnMgRGVjb2RlZCB0b2tlbiBkYXRhIG9iamVjdFxuICAgICAqL1xuICAgIGRlY29kZVRva2VuKHRva2VuKTogT2JqZWN0IHtcbiAgICAgICAgY29uc3QgcGFydHMgPSB0b2tlbi5zcGxpdCgnLicpO1xuXG4gICAgICAgIGlmIChwYXJ0cy5sZW5ndGggIT09IDMpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSldUIG11c3QgaGF2ZSAzIHBhcnRzJyk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBkZWNvZGVkID0gdGhpcy51cmxCYXNlNjREZWNvZGUocGFydHNbMV0pO1xuICAgICAgICBpZiAoIWRlY29kZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQ2Fubm90IGRlY29kZSB0aGUgdG9rZW4nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBKU09OLnBhcnNlKGRlY29kZWQpO1xuICAgIH1cblxuICAgIHByaXZhdGUgdXJsQmFzZTY0RGVjb2RlKHRva2VuKTogc3RyaW5nIHtcbiAgICAgICAgbGV0IG91dHB1dCA9IHRva2VuLnJlcGxhY2UoLy0vZywgJysnKS5yZXBsYWNlKC9fL2csICcvJyk7XG4gICAgICAgIHN3aXRjaCAob3V0cHV0Lmxlbmd0aCAlIDQpIHtcbiAgICAgICAgICAgIGNhc2UgMDoge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSAyOiB7XG4gICAgICAgICAgICAgICAgb3V0cHV0ICs9ICc9PSc7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIDM6IHtcbiAgICAgICAgICAgICAgICBvdXRwdXQgKz0gJz0nO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGVmYXVsdDoge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSWxsZWdhbCBiYXNlNjR1cmwgc3RyaW5nIScpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkZWNvZGVVUklDb21wb25lbnQoZXNjYXBlKHdpbmRvdy5hdG9iKG91dHB1dCkpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIGEgbmFtZWQgdmFsdWUgZnJvbSB0aGUgdXNlciBhY2Nlc3MgdG9rZW4uXG4gICAgICogQHBhcmFtIGtleSBLZXkgbmFtZSBvZiB0aGUgZmllbGQgdG8gcmV0cmlldmVcbiAgICAgKiBAcmV0dXJucyBWYWx1ZSBmcm9tIHRoZSB0b2tlblxuICAgICAqL1xuICAgIGdldFZhbHVlRnJvbUxvY2FsQWNjZXNzVG9rZW48VD4oa2V5OiBzdHJpbmcpOiBUIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0VmFsdWVGcm9tVG9rZW4odGhpcy5nZXRBY2Nlc3NUb2tlbigpLCBrZXkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgYWNjZXNzIHRva2VuXG4gICAgICogQHJldHVybnMgYWNjZXNzIHRva2VuXG4gICAgICovXG4gICAgZ2V0QWNjZXNzVG9rZW4oKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RvcmFnZVNlcnZpY2UuZ2V0SXRlbShKd3RIZWxwZXJTZXJ2aWNlLlVTRVJfQUNDRVNTX1RPS0VOKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIGEgbmFtZWQgdmFsdWUgZnJvbSB0aGUgdXNlciBhY2Nlc3MgdG9rZW4uXG4gICAgICogQHBhcmFtIGFjY2Vzc1Rva2VuIHlvdXIgU1NPIGFjY2VzcyB0b2tlbiB3aGVyZSB0aGUgdmFsdWUgaXMgZW5jb2RlXG4gICAgICogQHBhcmFtIGtleSBLZXkgbmFtZSBvZiB0aGUgZmllbGQgdG8gcmV0cmlldmVcbiAgICAgKiBAcmV0dXJucyBWYWx1ZSBmcm9tIHRoZSB0b2tlblxuICAgICAqL1xuICAgIGdldFZhbHVlRnJvbVRva2VuPFQ+KGFjY2Vzc1Rva2VuOiBzdHJpbmcsIGtleTogc3RyaW5nKTogVCB7XG4gICAgICAgIGxldCB2YWx1ZTtcbiAgICAgICAgaWYgKGFjY2Vzc1Rva2VuKSB7XG4gICAgICAgICAgICBjb25zdCB0b2tlblBheWxvYWQgPSB0aGlzLmRlY29kZVRva2VuKGFjY2Vzc1Rva2VuKTtcbiAgICAgICAgICAgIHZhbHVlID0gdG9rZW5QYXlsb2FkW2tleV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIDxUPiB2YWx1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHJlYWxtIHJvbGVzLlxuICAgICAqIEByZXR1cm5zIEFycmF5IG9mIHJlYWxtIHJvbGVzXG4gICAgICovXG4gICAgZ2V0UmVhbG1Sb2xlcygpOiBzdHJpbmdbXSB7XG4gICAgICAgIGNvbnN0IGFjY2VzcyA9IHRoaXMuZ2V0VmFsdWVGcm9tTG9jYWxBY2Nlc3NUb2tlbjxhbnk+KEp3dEhlbHBlclNlcnZpY2UuUkVBTE1fQUNDRVNTKTtcbiAgICAgICAgcmV0dXJuIGFjY2VzcyA/IGFjY2Vzc1sncm9sZXMnXSA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgQ2xpZW50IHJvbGVzLlxuICAgICAqIEByZXR1cm5zIEFycmF5IG9mIGNsaWVudCByb2xlc1xuICAgICAqL1xuICAgIGdldENsaWVudFJvbGVzKGNsaWVudE5hbWU6IHN0cmluZyk6IHN0cmluZ1tdIHtcbiAgICAgICAgY29uc3QgY2xpZW50Um9sZSA9IHRoaXMuZ2V0VmFsdWVGcm9tTG9jYWxBY2Nlc3NUb2tlbjxhbnk+KEp3dEhlbHBlclNlcnZpY2UuUkVTT1VSQ0VfQUNDRVNTKVtjbGllbnROYW1lXTtcbiAgICAgICAgcmV0dXJuIGNsaWVudFJvbGUgPyBjbGllbnRSb2xlWydyb2xlcyddIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGZvciBzaW5nbGUgcmVhbG0gcm9sZS5cbiAgICAgKiBAcGFyYW0gcm9sZSBSb2xlIG5hbWUgdG8gY2hlY2tcbiAgICAgKiBAcmV0dXJucyBUcnVlIGlmIGl0IGNvbnRhaW5zIGdpdmVuIHJvbGUsIGZhbHNlIG90aGVyd2lzZVxuICAgICAqL1xuICAgIGhhc1JlYWxtUm9sZShyb2xlOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICAgICAgbGV0IGhhc1JvbGUgPSBmYWxzZTtcbiAgICAgICAgaWYgKHRoaXMuZ2V0QWNjZXNzVG9rZW4oKSkge1xuICAgICAgICAgICAgY29uc3QgcmVhbG1Sb2xlcyA9IHRoaXMuZ2V0UmVhbG1Sb2xlcygpO1xuICAgICAgICAgICAgaGFzUm9sZSA9IHJlYWxtUm9sZXMuc29tZSgoY3VycmVudFJvbGUpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY3VycmVudFJvbGUgPT09IHJvbGU7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaGFzUm9sZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgZm9yIHJlYWxtIHJvbGVzLlxuICAgICAqIEBwYXJhbSByb2xlc1RvQ2hlY2sgTGlzdCBvZiByb2xlIG5hbWVzIHRvIGNoZWNrXG4gICAgICogQHJldHVybnMgVHJ1ZSBpZiBpdCBjb250YWlucyBhdCBsZWFzdCBvbmUgb2YgdGhlIGdpdmVuIHJvbGVzLCBmYWxzZSBvdGhlcndpc2VcbiAgICAgKi9cbiAgICBoYXNSZWFsbVJvbGVzKHJvbGVzVG9DaGVjazogc3RyaW5nIFtdKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiByb2xlc1RvQ2hlY2suc29tZSgoY3VycmVudFJvbGUpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmhhc1JlYWxtUm9sZShjdXJyZW50Um9sZSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBmb3IgY2xpZW50IHJvbGVzLlxuICAgICAqIEBwYXJhbSBjbGllbnROYW1lIFRhcmdldGVkIGNsaWVudCBuYW1lXG4gICAgICogQHBhcmFtIHJvbGVzVG9DaGVjayBMaXN0IG9mIHJvbGUgbmFtZXMgdG8gY2hlY2tcbiAgICAgKiBAcmV0dXJucyBUcnVlIGlmIGl0IGNvbnRhaW5zIGF0IGxlYXN0IG9uZSBvZiB0aGUgZ2l2ZW4gcm9sZXMsIGZhbHNlIG90aGVyd2lzZVxuICAgICAqL1xuICAgIGhhc1JlYWxtUm9sZXNGb3JDbGllbnRSb2xlKGNsaWVudE5hbWU6IHN0cmluZywgcm9sZXNUb0NoZWNrOiBzdHJpbmcgW10pOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHJvbGVzVG9DaGVjay5zb21lKChjdXJyZW50Um9sZSkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaGFzQ2xpZW50Um9sZShjbGllbnROYW1lLCBjdXJyZW50Um9sZSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBmb3IgY2xpZW50IHJvbGUuXG4gICAgICogQHBhcmFtIGNsaWVudE5hbWUgVGFyZ2V0ZWQgY2xpZW50IG5hbWVcbiAgICAgKiBAcGFyYW0gcm9sZSBSb2xlIG5hbWUgdG8gY2hlY2tcbiAgICAgKiBAcmV0dXJucyBUcnVlIGlmIGl0IGNvbnRhaW5zIGdpdmVuIHJvbGUsIGZhbHNlIG90aGVyd2lzZVxuICAgICAqL1xuICAgIGhhc0NsaWVudFJvbGUoY2xpZW50TmFtZTogc3RyaW5nLCByb2xlOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICAgICAgbGV0IGhhc1JvbGUgPSBmYWxzZTtcbiAgICAgICAgaWYgKHRoaXMuZ2V0QWNjZXNzVG9rZW4oKSkge1xuICAgICAgICAgICAgY29uc3QgY2xpZW50Um9sZXMgPSB0aGlzLmdldENsaWVudFJvbGVzKGNsaWVudE5hbWUpO1xuICAgICAgICAgICAgaGFzUm9sZSA9IGNsaWVudFJvbGVzLnNvbWUoKGN1cnJlbnRSb2xlKSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGN1cnJlbnRSb2xlID09PSByb2xlO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGhhc1JvbGU7XG4gICAgfVxufVxuIl19