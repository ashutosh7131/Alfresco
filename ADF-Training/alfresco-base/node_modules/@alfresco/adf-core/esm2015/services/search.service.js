import { Injectable } from '@angular/core';
import { QueriesApi, SearchApi } from '@alfresco/js-api';
import { Subject, from, throwError } from 'rxjs';
import { AlfrescoApiService } from './alfresco-api.service';
import { SearchConfigurationService } from './search-configuration.service';
import * as i0 from "@angular/core";
import * as i1 from "./alfresco-api.service";
import * as i2 from "./search-configuration.service";
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './alfresco-api.service';
import * as ɵngcc2 from './search-configuration.service';
export class SearchService {
    constructor(apiService, searchConfigurationService) {
        this.apiService = apiService;
        this.searchConfigurationService = searchConfigurationService;
        this.dataLoaded = new Subject();
    }
    get queriesApi() {
        var _a;
        this._queriesApi = (_a = this._queriesApi) !== null && _a !== void 0 ? _a : new QueriesApi(this.apiService.getInstance());
        return this._queriesApi;
    }
    get searchApi() {
        var _a;
        this._searchApi = (_a = this._searchApi) !== null && _a !== void 0 ? _a : new SearchApi(this.apiService.getInstance());
        return this._searchApi;
    }
    getNodeQueryResults(term, options) {
        const promise = this.queriesApi.findNodes(term, options);
        promise.then((nodePaging) => {
            this.dataLoaded.next(nodePaging);
        }).catch((err) => this.handleError(err));
        return from(promise);
    }
    search(searchTerm, maxResults, skipCount) {
        const searchQuery = Object.assign(this.searchConfigurationService.generateQueryBody(searchTerm, maxResults, skipCount));
        const promise = this.searchApi.search(searchQuery);
        promise.then((nodePaging) => {
            this.dataLoaded.next(nodePaging);
        }).catch((err) => this.handleError(err));
        return from(promise);
    }
    searchByQueryBody(queryBody) {
        const promise = this.searchApi.search(queryBody);
        promise.then((nodePaging) => {
            this.dataLoaded.next(nodePaging);
        }).catch((err) => this.handleError(err));
        return from(promise);
    }
    handleError(error) {
        return throwError(error || 'Server error');
    }
}
SearchService.ɵfac = function SearchService_Factory(t) { return new (t || SearchService)(ɵngcc0.ɵɵinject(ɵngcc1.AlfrescoApiService), ɵngcc0.ɵɵinject(ɵngcc2.SearchConfigurationService)); };
SearchService.ɵprov = i0.ɵɵdefineInjectable({ factory: function SearchService_Factory() { return new SearchService(i0.ɵɵinject(i1.AlfrescoApiService), i0.ɵɵinject(i2.SearchConfigurationService)); }, token: SearchService, providedIn: "root" });
SearchService.ctorParameters = () => [
    { type: AlfrescoApiService },
    { type: SearchConfigurationService }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SearchService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc1.AlfrescoApiService }, { type: ɵngcc2.SearchConfigurationService }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,