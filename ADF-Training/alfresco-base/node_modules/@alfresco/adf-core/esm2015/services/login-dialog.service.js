import { MatDialog } from '@angular/material/dialog';
import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';
import { LoginDialogComponent } from '../login/components/login-dialog.component';
import * as i0 from "@angular/core";
import * as i1 from "@angular/material/dialog";
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/material/dialog';
export class LoginDialogService {
    constructor(dialog) {
        this.dialog = dialog;
    }
    openLogin(actionName, title) {
        const logged = new Subject();
        logged.subscribe({
            complete: this.close.bind(this)
        });
        const data = {
            title,
            actionName,
            logged
        };
        this.openLoginDialog(data, 'adf-login-dialog', '630px');
        return logged;
    }
    openLoginDialog(data, currentPanelClass, chosenWidth) {
        this.dialog.open(LoginDialogComponent, { data, panelClass: currentPanelClass, width: chosenWidth });
    }
    close() {
        this.dialog.closeAll();
    }
}
LoginDialogService.ɵfac = function LoginDialogService_Factory(t) { return new (t || LoginDialogService)(ɵngcc0.ɵɵinject(ɵngcc1.MatDialog)); };
LoginDialogService.ɵprov = i0.ɵɵdefineInjectable({ factory: function LoginDialogService_Factory() { return new LoginDialogService(i0.ɵɵinject(i1.MatDialog)); }, token: LoginDialogService, providedIn: "root" });
LoginDialogService.ctorParameters = () => [
    { type: MatDialog }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(LoginDialogService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc1.MatDialog }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9naW4tZGlhbG9nLnNlcnZpY2UuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL2hvbWUvdHJhdmlzL2J1aWxkL0FsZnJlc2NvL2FsZnJlc2NvLW5nMi1jb21wb25lbnRzL2xpYi9jb3JlL3NlcnZpY2VzL2xvZ2luLWRpYWxvZy5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWlCQSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDckQsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsT0FBTyxFQUFjLE1BQU0sTUFBTSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLDRDQUE0QyxDQUFDO0FBQ2xGO0FBQXFDOzs7QUFLckMsTUFBTSxPQUFPLGtCQUFrQjtBQUMvQixJQUNJLFlBQW9CLE1BQWlCO0FBQ3pDLFFBRHdCLFdBQU0sR0FBTixNQUFNLENBQVc7QUFBQyxJQUN0QyxDQUFDO0FBQ0wsSUFPSSxTQUFTLENBQUMsVUFBa0IsRUFBRSxLQUFhO0FBQUksUUFDM0MsTUFBTSxNQUFNLEdBQUcsSUFBSSxPQUFPLEVBQVUsQ0FBQztBQUM3QyxRQUFRLE1BQU0sQ0FBQyxTQUFTLENBQUM7QUFDekIsWUFBWSxRQUFRLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDO0FBQzNDLFNBQVMsQ0FBQyxDQUFDO0FBQ1gsUUFDUSxNQUFNLElBQUksR0FBNkI7QUFDL0MsWUFBWSxLQUFLO0FBQ2pCLFlBQVksVUFBVTtBQUN0QixZQUFZLE1BQU07QUFDbEIsU0FBUyxDQUFDO0FBQ1YsUUFDUSxJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksRUFBRSxrQkFBa0IsRUFBRSxPQUFPLENBQUMsQ0FBQztBQUNoRSxRQUFRLE9BQU8sTUFBTSxDQUFDO0FBQ3RCLElBQUksQ0FBQztBQUNMLElBQ1ksZUFBZSxDQUFDLElBQThCLEVBQUUsaUJBQXlCLEVBQUUsV0FBbUI7QUFDMUcsUUFBUSxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxvQkFBb0IsRUFBRSxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUUsaUJBQWlCLEVBQUUsS0FBSyxFQUFFLFdBQVcsRUFBRSxDQUFDLENBQUM7QUFDNUcsSUFBSSxDQUFDO0FBQ0wsSUFFSSxLQUFLO0FBQ1QsUUFBUSxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDO0FBQy9CLElBQUksQ0FBQztBQUNMOzhJQUNBO0FBQUMsa05BcENJO0FBQUM7RUFITCxVQUFVLFNBQUMsckJBS0csWUFYTixTQUFTO0FBQUc7WUFPakIsVUFBVSxFQUFFLE1BQU0sY0FDckI7Ozs7OzBFQVJzQjtBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgTWF0RGlhbG9nIH0gZnJvbSAnQGFuZ3VsYXIvbWF0ZXJpYWwvZGlhbG9nJztcbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFN1YmplY3QsIE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IExvZ2luRGlhbG9nQ29tcG9uZW50IH0gZnJvbSAnLi4vbG9naW4vY29tcG9uZW50cy9sb2dpbi1kaWFsb2cuY29tcG9uZW50JztcbmltcG9ydCB7IExvZ2luRGlhbG9nQ29tcG9uZW50RGF0YSB9IGZyb20gJy4uL2xvZ2luL2NvbXBvbmVudHMvbG9naW4tZGlhbG9nLWNvbXBvbmVudC1kYXRhLmludGVyZmFjZSc7XG5cbkBJbmplY3RhYmxlKHtcbiAgICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgTG9naW5EaWFsb2dTZXJ2aWNlIHtcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgZGlhbG9nOiBNYXREaWFsb2cpIHtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBPcGVucyBhIGRpYWxvZyB0byBjaG9vc2UgYSBmaWxlIHRvIHVwbG9hZC5cbiAgICAgKiBAcGFyYW0gYWN0aW9uTmFtZSBOYW1lIG9mIHRoZSBhY3Rpb24gdG8gc2hvdyBpbiB0aGUgdGl0bGVcbiAgICAgKiBAcGFyYW0gdGl0bGUgVGl0bGUgZm9yIHRoZSBkaWFsb2dcbiAgICAgKiBAcmV0dXJucyBJbmZvcm1hdGlvbiBhYm91dCB0aGUgY2hvc2VuIGZpbGUocylcbiAgICAgKi9cbiAgICBvcGVuTG9naW4oYWN0aW9uTmFtZTogc3RyaW5nLCB0aXRsZTogc3RyaW5nKTogT2JzZXJ2YWJsZTxzdHJpbmc+IHtcbiAgICAgICAgY29uc3QgbG9nZ2VkID0gbmV3IFN1YmplY3Q8c3RyaW5nPigpO1xuICAgICAgICBsb2dnZWQuc3Vic2NyaWJlKHtcbiAgICAgICAgICAgIGNvbXBsZXRlOiB0aGlzLmNsb3NlLmJpbmQodGhpcylcbiAgICAgICAgfSk7XG5cbiAgICAgICAgY29uc3QgZGF0YTogTG9naW5EaWFsb2dDb21wb25lbnREYXRhID0ge1xuICAgICAgICAgICAgdGl0bGUsXG4gICAgICAgICAgICBhY3Rpb25OYW1lLFxuICAgICAgICAgICAgbG9nZ2VkXG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy5vcGVuTG9naW5EaWFsb2coZGF0YSwgJ2FkZi1sb2dpbi1kaWFsb2cnLCAnNjMwcHgnKTtcbiAgICAgICAgcmV0dXJuIGxvZ2dlZDtcbiAgICB9XG5cbiAgICBwcml2YXRlIG9wZW5Mb2dpbkRpYWxvZyhkYXRhOiBMb2dpbkRpYWxvZ0NvbXBvbmVudERhdGEsIGN1cnJlbnRQYW5lbENsYXNzOiBzdHJpbmcsIGNob3NlbldpZHRoOiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy5kaWFsb2cub3BlbihMb2dpbkRpYWxvZ0NvbXBvbmVudCwgeyBkYXRhLCBwYW5lbENsYXNzOiBjdXJyZW50UGFuZWxDbGFzcywgd2lkdGg6IGNob3NlbldpZHRoIH0pO1xuICAgIH1cblxuICAgIC8qKiBDbG9zZXMgdGhlIGN1cnJlbnRseSBvcGVuIGRpYWxvZy4gKi9cbiAgICBjbG9zZSgpIHtcbiAgICAgICAgdGhpcy5kaWFsb2cuY2xvc2VBbGwoKTtcbiAgICB9XG5cbn1cbiJdfQ==