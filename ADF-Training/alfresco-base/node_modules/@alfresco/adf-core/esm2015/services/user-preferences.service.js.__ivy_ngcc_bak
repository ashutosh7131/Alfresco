import { Injectable } from '@angular/core';
import { TranslateService } from '@ngx-translate/core';
import { BehaviorSubject } from 'rxjs';
import { AppConfigService, AppConfigValues } from '../app-config/app-config.service';
import { StorageService } from './storage.service';
import { distinctUntilChanged, map, filter } from 'rxjs/operators';
import { AlfrescoApiService } from './alfresco-api.service';
import * as i0 from "@angular/core";
import * as i1 from "@ngx-translate/core";
import * as i2 from "../app-config/app-config.service";
import * as i3 from "./storage.service";
import * as i4 from "./alfresco-api.service";
export var UserPreferenceValues;
(function (UserPreferenceValues) {
    UserPreferenceValues["PaginationSize"] = "paginationSize";
    UserPreferenceValues["Locale"] = "locale";
    UserPreferenceValues["SupportedPageSizes"] = "supportedPageSizes";
    UserPreferenceValues["ExpandedSideNavStatus"] = "expandedSidenav";
})(UserPreferenceValues || (UserPreferenceValues = {}));
export class UserPreferencesService {
    constructor(translate, appConfig, storage, alfrescoApiService) {
        this.translate = translate;
        this.appConfig = appConfig;
        this.storage = storage;
        this.alfrescoApiService = alfrescoApiService;
        this.defaults = {
            paginationSize: 25,
            supportedPageSizes: [5, 10, 15, 20],
            locale: 'en',
            expandedSidenav: true
        };
        this.userPreferenceStatus = this.defaults;
        this.alfrescoApiService.alfrescoApiInitialized.pipe(filter(status => status)).subscribe(this.initUserPreferenceStatus.bind(this));
        this.onChangeSubject = new BehaviorSubject(this.userPreferenceStatus);
        this.onChange = this.onChangeSubject.asObservable();
    }
    initUserPreferenceStatus() {
        this.initUserLanguage();
        this.set(UserPreferenceValues.PaginationSize, this.paginationSize);
        this.set(UserPreferenceValues.SupportedPageSizes, JSON.stringify(this.supportedPageSizes));
    }
    initUserLanguage() {
        if (this.locale || this.appConfig.get(UserPreferenceValues.Locale)) {
            const locale = this.locale || this.getDefaultLocale();
            this.set(UserPreferenceValues.Locale, locale);
            this.set('textOrientation', this.getLanguageByKey(locale).direction || 'ltr');
        }
        else {
            const locale = this.locale || this.getDefaultLocale();
            this.setWithoutStore(UserPreferenceValues.Locale, locale);
            this.setWithoutStore('textOrientation', this.getLanguageByKey(locale).direction || 'ltr');
        }
    }
    select(property) {
        return this.onChange
            .pipe(map((userPreferenceStatus) => userPreferenceStatus[property]), distinctUntilChanged());
    }
    get(property, defaultValue) {
        const key = this.getPropertyKey(property);
        const value = this.storage.getItem(key);
        if (value === undefined || value === null) {
            return defaultValue;
        }
        return value;
    }
    set(property, value) {
        if (!property) {
            return;
        }
        this.storage.setItem(this.getPropertyKey(property), value);
        this.userPreferenceStatus[property] = value;
        this.onChangeSubject.next(this.userPreferenceStatus);
    }
    setWithoutStore(property, value) {
        if (!property) {
            return;
        }
        this.userPreferenceStatus[property] = value;
        this.onChangeSubject.next(this.userPreferenceStatus);
    }
    hasItem(property) {
        if (!property) {
            return false;
        }
        return this.storage.hasItem(this.getPropertyKey(property));
    }
    getStoragePrefix() {
        return this.storage.getItem('USER_PROFILE') || 'GUEST';
    }
    setStoragePrefix(value) {
        this.storage.setItem('USER_PROFILE', value || 'GUEST');
        this.initUserPreferenceStatus();
    }
    getPropertyKey(property) {
        return `${this.getStoragePrefix()}__${property}`;
    }
    get supportedPageSizes() {
        const supportedPageSizes = this.get(UserPreferenceValues.SupportedPageSizes);
        if (supportedPageSizes) {
            return JSON.parse(supportedPageSizes);
        }
        else {
            return this.appConfig.get('pagination.supportedPageSizes', this.defaults.supportedPageSizes);
        }
    }
    set supportedPageSizes(value) {
        this.set(UserPreferenceValues.SupportedPageSizes, JSON.stringify(value));
    }
    set paginationSize(value) {
        this.set(UserPreferenceValues.PaginationSize, value);
    }
    get paginationSize() {
        const paginationSize = this.get(UserPreferenceValues.PaginationSize);
        if (paginationSize) {
            return Number(paginationSize);
        }
        else {
            return Number(this.appConfig.get('pagination.size', this.defaults.paginationSize));
        }
    }
    get locale() {
        return this.get(UserPreferenceValues.Locale);
    }
    set locale(value) {
        this.set(UserPreferenceValues.Locale, value);
    }
    getDefaultLocale() {
        return this.appConfig.get(UserPreferenceValues.Locale) || this.translate.getBrowserCultureLang() || 'en';
    }
    getLanguageByKey(key) {
        return (this.appConfig
            .get(AppConfigValues.APP_CONFIG_LANGUAGES_KEY, [{ key: 'en' }])
            .find((language) => key.includes(language.key)) || { key: 'en' });
    }
}
UserPreferencesService.ɵprov = i0.ɵɵdefineInjectable({ factory: function UserPreferencesService_Factory() { return new UserPreferencesService(i0.ɵɵinject(i1.TranslateService), i0.ɵɵinject(i2.AppConfigService), i0.ɵɵinject(i3.StorageService), i0.ɵɵinject(i4.AlfrescoApiService)); }, token: UserPreferencesService, providedIn: "root" });
UserPreferencesService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
UserPreferencesService.ctorParameters = () => [
    { type: TranslateService },
    { type: AppConfigService },
    { type: StorageService },
    { type: AlfrescoApiService }
];
//# sourceMappingURL=data:application/json;base64,