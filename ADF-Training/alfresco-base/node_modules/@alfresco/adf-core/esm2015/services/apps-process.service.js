import { Injectable } from '@angular/core';
import { RuntimeAppDefinitionsApi } from '@alfresco/js-api';
import { from, throwError } from 'rxjs';
import { AlfrescoApiService } from './alfresco-api.service';
import { LogService } from './log.service';
import { map, catchError } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "./alfresco-api.service";
import * as i2 from "./log.service";
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './alfresco-api.service';
import * as ɵngcc2 from './log.service';
export class AppsProcessService {
    constructor(apiService, logService) {
        this.apiService = apiService;
        this.logService = logService;
    }
    get appsApi() {
        var _a;
        this._appsApi = (_a = this._appsApi) !== null && _a !== void 0 ? _a : new RuntimeAppDefinitionsApi(this.apiService.getInstance());
        return this._appsApi;
    }
    getDeployedApplications() {
        return from(this.appsApi.getAppDefinitions())
            .pipe(map((response) => response.data), catchError((err) => this.handleError(err)));
    }
    getDeployedApplicationsByName(name) {
        return from(this.appsApi.getAppDefinitions())
            .pipe(map((response) => response.data.find((app) => app.name === name)), catchError((err) => this.handleError(err)));
    }
    getApplicationDetailsById(appId) {
        return from(this.appsApi.getAppDefinitions())
            .pipe(map((response) => response.data.find((app) => app.id === appId)), catchError((err) => this.handleError(err)));
    }
    handleError(error) {
        this.logService.error(error);
        return throwError(error || 'Server error');
    }
}
AppsProcessService.ɵfac = function AppsProcessService_Factory(t) { return new (t || AppsProcessService)(ɵngcc0.ɵɵinject(ɵngcc1.AlfrescoApiService), ɵngcc0.ɵɵinject(ɵngcc2.LogService)); };
AppsProcessService.ɵprov = i0.ɵɵdefineInjectable({ factory: function AppsProcessService_Factory() { return new AppsProcessService(i0.ɵɵinject(i1.AlfrescoApiService), i0.ɵɵinject(i2.LogService)); }, token: AppsProcessService, providedIn: "root" });
AppsProcessService.ctorParameters = () => [
    { type: AlfrescoApiService },
    { type: LogService }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AppsProcessService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc1.AlfrescoApiService }, { type: ɵngcc2.LogService }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwcy1wcm9jZXNzLnNlcnZpY2UuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL2hvbWUvdHJhdmlzL2J1aWxkL0FsZnJlc2NvL2FsZnJlc2NvLW5nMi1jb21wb25lbnRzL2xpYi9jb3JlL3NlcnZpY2VzL2FwcHMtcHJvY2Vzcy5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWlCQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSx3QkFBd0IsRUFBK0IsTUFBTSxrQkFBa0IsQ0FBQztBQUN6RixPQUFPLEVBQWMsSUFBSSxFQUFFLFVBQVUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUNwRCxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUM1RCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxHQUFHLEVBQUUsVUFBVSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDakQ7QUFFc0I7QUFJZjs7OztBQUZQLE1BQU0sT0FBTyxrQkFBa0I7QUFDL0IsSUFPSSxZQUFvQixVQUE4QixFQUM5QixVQUFzQjtBQUM5QyxRQUZ3QixlQUFVLEdBQVYsVUFBVSxDQUFvQjtBQUFDLFFBQy9CLGVBQVUsR0FBVixVQUFVLENBQVk7QUFBQyxJQUMzQyxDQUFDO0FBQ0wsSUFSSSxJQUFJLE9BQU87QUFBSztBQUFnQixRQUM1QixJQUFJLENBQUMsUUFBUSxTQUFHLElBQUksQ0FBQyxRQUFRLG1DQUFJLElBQUksd0JBQXdCLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDO0FBQ3JHLFFBQVEsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDO0FBQzdCLElBQUksQ0FBQztBQUNMLElBU0ksdUJBQXVCO0FBQUssUUFDeEIsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO0FBQ3JELGFBQWEsSUFBSSxDQUNELEdBQUcsQ0FBQyxDQUFDLFFBQWEsRUFBRSxFQUFFLENBQWlDLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFDckUsVUFBVSxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQzdDLENBQUM7QUFDZCxJQUFJLENBQUM7QUFDTCxJQU1JLDZCQUE2QixDQUFDLElBQVk7QUFBSSxRQUMxQyxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLGlCQUFpQixFQUFFLENBQUM7QUFDckQsYUFBYSxJQUFJLENBQ0QsR0FBRyxDQUFDLENBQUMsUUFBYSxFQUFFLEVBQUUsQ0FBK0IsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxJQUFJLEtBQUssSUFBSSxDQUFDLENBQUMsRUFDcEcsVUFBVSxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQzdDLENBQUM7QUFDZCxJQUFJLENBQUM7QUFDTCxJQU1JLHlCQUF5QixDQUFDLEtBQWE7QUFBSSxRQUN2QyxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLGlCQUFpQixFQUFFLENBQUM7QUFDckQsYUFBYSxJQUFJLENBQ0QsR0FBRyxDQUFDLENBQUMsUUFBYSxFQUFFLEVBQUUsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsS0FBSyxLQUFLLENBQUMsQ0FBQyxFQUNyRSxVQUFVLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FDN0MsQ0FBQztBQUNkLElBQUksQ0FBQztBQUNMLElBQ1ksV0FBVyxDQUFDLEtBQVU7QUFDbEMsUUFBUSxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUNyQyxRQUFRLE9BQU8sVUFBVSxDQUFDLEtBQUssSUFBSSxjQUFjLENBQUMsQ0FBQztBQUNuRCxJQUFJLENBQUM7QUFDTDsyTEFDQTtBQUFDLHVQQXZESTtBQUFDO0VBSEwsVUFBVSxTQUFDLHJCQUtHLFlBVE4sa0JBQWtCO0tBS3ZCLFVBQVUsRUFBRSxNQUFNLHZCQUxTLFlBQ3RCLFVBQVU7QUFBRztTQUtyQjs7Ozs7Z0hBTHVCO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBSdW50aW1lQXBwRGVmaW5pdGlvbnNBcGksIEFwcERlZmluaXRpb25SZXByZXNlbnRhdGlvbiB9IGZyb20gJ0BhbGZyZXNjby9qcy1hcGknO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgZnJvbSwgdGhyb3dFcnJvciB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgQWxmcmVzY29BcGlTZXJ2aWNlIH0gZnJvbSAnLi9hbGZyZXNjby1hcGkuc2VydmljZSc7XG5pbXBvcnQgeyBMb2dTZXJ2aWNlIH0gZnJvbSAnLi9sb2cuc2VydmljZSc7XG5pbXBvcnQgeyBtYXAsIGNhdGNoRXJyb3IgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbkBJbmplY3RhYmxlKHtcbiAgICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgQXBwc1Byb2Nlc3NTZXJ2aWNlIHtcblxuICAgIF9hcHBzQXBpOiBSdW50aW1lQXBwRGVmaW5pdGlvbnNBcGk7XG4gICAgZ2V0IGFwcHNBcGkoKTogUnVudGltZUFwcERlZmluaXRpb25zQXBpIHtcbiAgICAgICAgdGhpcy5fYXBwc0FwaSA9IHRoaXMuX2FwcHNBcGkgPz8gbmV3IFJ1bnRpbWVBcHBEZWZpbml0aW9uc0FwaSh0aGlzLmFwaVNlcnZpY2UuZ2V0SW5zdGFuY2UoKSk7XG4gICAgICAgIHJldHVybiB0aGlzLl9hcHBzQXBpO1xuICAgIH1cblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgYXBpU2VydmljZTogQWxmcmVzY29BcGlTZXJ2aWNlLFxuICAgICAgICAgICAgICAgIHByaXZhdGUgbG9nU2VydmljZTogTG9nU2VydmljZSkge1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgYSBsaXN0IG9mIGRlcGxveWVkIGFwcHMgZm9yIHRoaXMgdXNlci5cbiAgICAgKiBAcmV0dXJucyBUaGUgbGlzdCBvZiBkZXBsb3llZCBhcHBzXG4gICAgICovXG4gICAgZ2V0RGVwbG95ZWRBcHBsaWNhdGlvbnMoKTogT2JzZXJ2YWJsZTxBcHBEZWZpbml0aW9uUmVwcmVzZW50YXRpb25bXT4ge1xuICAgICAgICByZXR1cm4gZnJvbSh0aGlzLmFwcHNBcGkuZ2V0QXBwRGVmaW5pdGlvbnMoKSlcbiAgICAgICAgICAgIC5waXBlKFxuICAgICAgICAgICAgICAgIG1hcCgocmVzcG9uc2U6IGFueSkgPT4gPEFwcERlZmluaXRpb25SZXByZXNlbnRhdGlvbltdPiByZXNwb25zZS5kYXRhKSxcbiAgICAgICAgICAgICAgICBjYXRjaEVycm9yKChlcnIpID0+IHRoaXMuaGFuZGxlRXJyb3IoZXJyKSlcbiAgICAgICAgICAgICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyBhIGxpc3Qgb2YgZGVwbG95ZWQgYXBwcyBmb3IgdGhpcyB1c2VyLCB3aGVyZSB0aGUgYXBwIG5hbWUgaXMgYG5hbWVgLlxuICAgICAqIEBwYXJhbSBuYW1lIE5hbWUgb2YgdGhlIGFwcFxuICAgICAqIEByZXR1cm5zIFRoZSBsaXN0IG9mIGRlcGxveWVkIGFwcHNcbiAgICAgKi9cbiAgICBnZXREZXBsb3llZEFwcGxpY2F0aW9uc0J5TmFtZShuYW1lOiBzdHJpbmcpOiBPYnNlcnZhYmxlPEFwcERlZmluaXRpb25SZXByZXNlbnRhdGlvbj4ge1xuICAgICAgICByZXR1cm4gZnJvbSh0aGlzLmFwcHNBcGkuZ2V0QXBwRGVmaW5pdGlvbnMoKSlcbiAgICAgICAgICAgIC5waXBlKFxuICAgICAgICAgICAgICAgIG1hcCgocmVzcG9uc2U6IGFueSkgPT4gPEFwcERlZmluaXRpb25SZXByZXNlbnRhdGlvbj4gcmVzcG9uc2UuZGF0YS5maW5kKChhcHApID0+IGFwcC5uYW1lID09PSBuYW1lKSksXG4gICAgICAgICAgICAgICAgY2F0Y2hFcnJvcigoZXJyKSA9PiB0aGlzLmhhbmRsZUVycm9yKGVycikpXG4gICAgICAgICAgICApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGRldGFpbHMgZm9yIGEgc3BlY2lmaWMgYXBwIElEIG51bWJlci5cbiAgICAgKiBAcGFyYW0gYXBwSWQgSUQgb2YgdGhlIHRhcmdldCBhcHBcbiAgICAgKiBAcmV0dXJucyBEZXRhaWxzIG9mIHRoZSBhcHBcbiAgICAgKi9cbiAgICBnZXRBcHBsaWNhdGlvbkRldGFpbHNCeUlkKGFwcElkOiBudW1iZXIpOiBPYnNlcnZhYmxlPEFwcERlZmluaXRpb25SZXByZXNlbnRhdGlvbj4ge1xuICAgICAgICByZXR1cm4gZnJvbSh0aGlzLmFwcHNBcGkuZ2V0QXBwRGVmaW5pdGlvbnMoKSlcbiAgICAgICAgICAgIC5waXBlKFxuICAgICAgICAgICAgICAgIG1hcCgocmVzcG9uc2U6IGFueSkgPT4gcmVzcG9uc2UuZGF0YS5maW5kKChhcHApID0+IGFwcC5pZCA9PT0gYXBwSWQpKSxcbiAgICAgICAgICAgICAgICBjYXRjaEVycm9yKChlcnIpID0+IHRoaXMuaGFuZGxlRXJyb3IoZXJyKSlcbiAgICAgICAgICAgICk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBoYW5kbGVFcnJvcihlcnJvcjogYW55KSB7XG4gICAgICAgIHRoaXMubG9nU2VydmljZS5lcnJvcihlcnJvcik7XG4gICAgICAgIHJldHVybiB0aHJvd0Vycm9yKGVycm9yIHx8ICdTZXJ2ZXIgZXJyb3InKTtcbiAgICB9XG5cbn1cbiJdfQ==