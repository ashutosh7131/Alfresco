import { Injectable } from '@angular/core';
import { AppConfigService } from '../app-config/app-config.service';
import { AlfrescoApiService } from '../services/alfresco-api.service';
import { StorageService } from './storage.service';
import { UserPreferencesService } from './user-preferences.service';
import { DemoForm } from '../mock/form/demo-form.mock';
import * as i0 from "@angular/core";
import * as i1 from "../app-config/app-config.service";
import * as i2 from "./alfresco-api.service";
import * as i3 from "./user-preferences.service";
import * as i4 from "./storage.service";
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../app-config/app-config.service';
import * as ɵngcc2 from '../services/alfresco-api.service';
import * as ɵngcc3 from './user-preferences.service';
import * as ɵngcc4 from './storage.service';
export class CoreAutomationService {
    constructor(appConfigService, alfrescoApiService, userPreferencesService, storageService) {
        this.appConfigService = appConfigService;
        this.alfrescoApiService = alfrescoApiService;
        this.userPreferencesService = userPreferencesService;
        this.storageService = storageService;
        this.forms = new DemoForm();
    }
    setup() {
        const adfProxy = window['adf'] || {};
        adfProxy.getConfigField = (field) => {
            return this.appConfigService.get(field);
        };
        adfProxy.setConfigField = (field, value) => {
            this.appConfigService.config[field] = JSON.parse(value);
        };
        adfProxy.setStorageItem = (key, data) => {
            this.storageService.setItem(key, data);
        };
        adfProxy.removeStorageItem = (key) => {
            this.storageService.removeItem(key);
        };
        adfProxy.getStorageItem = (key) => {
            return this.storageService.getItem(key);
        };
        adfProxy.setUserPreference = (key, data) => {
            this.userPreferencesService.set(key, data);
        };
        adfProxy.setFormInEditor = (json) => {
            this.forms.formDefinition = JSON.parse(json);
        };
        adfProxy.setCloudFormInEditor = (json) => {
            this.forms.cloudFormDefinition = JSON.parse(json);
        };
        adfProxy.clearStorage = () => {
            this.storageService.clear();
        };
        adfProxy.apiReset = () => {
            this.alfrescoApiService.reset();
        };
        window['adf'] = adfProxy;
    }
}
CoreAutomationService.ɵfac = function CoreAutomationService_Factory(t) { return new (t || CoreAutomationService)(ɵngcc0.ɵɵinject(ɵngcc1.AppConfigService), ɵngcc0.ɵɵinject(ɵngcc2.AlfrescoApiService), ɵngcc0.ɵɵinject(ɵngcc3.UserPreferencesService), ɵngcc0.ɵɵinject(ɵngcc4.StorageService)); };
CoreAutomationService.ɵprov = i0.ɵɵdefineInjectable({ factory: function CoreAutomationService_Factory() { return new CoreAutomationService(i0.ɵɵinject(i1.AppConfigService), i0.ɵɵinject(i2.AlfrescoApiService), i0.ɵɵinject(i3.UserPreferencesService), i0.ɵɵinject(i4.StorageService)); }, token: CoreAutomationService, providedIn: "root" });
CoreAutomationService.ctorParameters = () => [
    { type: AppConfigService },
    { type: AlfrescoApiService },
    { type: UserPreferencesService },
    { type: StorageService }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CoreAutomationService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc1.AppConfigService }, { type: ɵngcc2.AlfrescoApiService }, { type: ɵngcc3.UserPreferencesService }, { type: ɵngcc4.StorageService }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0b21hdGlvbi5zZXJ2aWNlLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9ob21lL3RyYXZpcy9idWlsZC9BbGZyZXNjby9hbGZyZXNjby1uZzItY29tcG9uZW50cy9saWIvY29yZS9zZXJ2aWNlcy9hdXRvbWF0aW9uLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBaUJBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sa0NBQWtDLENBQUM7QUFDcEUsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sa0NBQWtDLENBQUM7QUFDdEUsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ25ELE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBQ3BFLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUN2RDtBQUVzQjtBQUlSO0FBRVU7QUFDVjs7Ozs7O0FBTGQsTUFBTSxPQUFPLHFCQUFxQjtBQUNsQyxJQUdJLFlBQW9CLGdCQUFrQyxFQUNsQyxrQkFBc0MsRUFDdEMsc0JBQThDLEVBQzlDLGNBQThCO0FBQ3RELFFBSndCLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBa0I7QUFBQyxRQUNuQyx1QkFBa0IsR0FBbEIsa0JBQWtCLENBQW9CO0FBQUMsUUFDdkMsMkJBQXNCLEdBQXRCLHNCQUFzQixDQUF3QjtBQUFDLFFBQy9DLG1CQUFjLEdBQWQsY0FBYyxDQUFnQjtBQUFDLFFBTDVDLFVBQUssR0FBRyxJQUFJLFFBQVEsRUFBRSxDQUFDO0FBQ2xDLElBS0ksQ0FBQztBQUNMLElBQ0ksS0FBSztBQUNULFFBQVEsTUFBTSxRQUFRLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQztBQUM3QyxRQUNRLFFBQVEsQ0FBQyxjQUFjLEdBQUcsQ0FBQyxLQUFhLEVBQU8sRUFBRTtBQUN6RCxZQUFZLE9BQU8sSUFBSSxDQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUNwRCxRQUFRLENBQUMsQ0FBQztBQUNWLFFBQ1EsUUFBUSxDQUFDLGNBQWMsR0FBRyxDQUFDLEtBQWEsRUFBRSxLQUFhLEVBQUUsRUFBRTtBQUNuRSxZQUFZLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUNwRSxRQUFRLENBQUMsQ0FBQztBQUNWLFFBQ1EsUUFBUSxDQUFDLGNBQWMsR0FBRyxDQUFDLEdBQVcsRUFBRSxJQUFZLEVBQUUsRUFBRTtBQUNoRSxZQUFZLElBQUksQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQztBQUNuRCxRQUFRLENBQUMsQ0FBQztBQUNWLFFBQ1EsUUFBUSxDQUFDLGlCQUFpQixHQUFHLENBQUMsR0FBVyxFQUFFLEVBQUU7QUFDckQsWUFBWSxJQUFJLENBQUMsY0FBYyxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNoRCxRQUFRLENBQUMsQ0FBQztBQUNWLFFBQ1EsUUFBUSxDQUFDLGNBQWMsR0FBRyxDQUFDLEdBQVcsRUFBVSxFQUFFO0FBQzFELFlBQVksT0FBTyxJQUFJLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNwRCxRQUFRLENBQUMsQ0FBQztBQUNWLFFBQ1EsUUFBUSxDQUFDLGlCQUFpQixHQUFHLENBQUMsR0FBVyxFQUFFLElBQVMsRUFBRSxFQUFFO0FBQ2hFLFlBQVksSUFBSSxDQUFDLHNCQUFzQixDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDdkQsUUFBUSxDQUFDLENBQUM7QUFDVixRQUNRLFFBQVEsQ0FBQyxlQUFlLEdBQUcsQ0FBQyxJQUFZLEVBQUUsRUFBRTtBQUNwRCxZQUFZLElBQUksQ0FBQyxLQUFLLENBQUMsY0FBYyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDekQsUUFBUSxDQUFDLENBQUM7QUFDVixRQUNRLFFBQVEsQ0FBQyxvQkFBb0IsR0FBRyxDQUFDLElBQVksRUFBRSxFQUFFO0FBQ3pELFlBQVksSUFBSSxDQUFDLEtBQUssQ0FBQyxtQkFBbUIsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQzlELFFBQVEsQ0FBQyxDQUFDO0FBQ1YsUUFDUSxRQUFRLENBQUMsWUFBWSxHQUFHLEdBQUcsRUFBRTtBQUNyQyxZQUFZLElBQUksQ0FBQyxjQUFjLENBQUMsS0FBSyxFQUFFLENBQUM7QUFDeEMsUUFBUSxDQUFDLENBQUM7QUFDVixRQUNRLFFBQVEsQ0FBQyxRQUFRLEdBQUcsR0FBRyxFQUFFO0FBQ2pDLFlBQVksSUFBSSxDQUFDLGtCQUFrQixDQUFDLEtBQUssRUFBRSxDQUFDO0FBQzVDLFFBQVEsQ0FBQyxDQUFDO0FBQ1YsUUFDUSxNQUFNLENBQUMsS0FBSyxDQUFDLEdBQUcsUUFBUSxDQUFDO0FBQ2pDLElBQUksQ0FBQztBQUNMO2tTQUFDO0FBQ0QsaVZBeERLO0FBQUM7RUFITCxVQUFVLFNBQUMsckJBS0csWUFYTixnQkFBZ0I7T0FPckIsVUFBVSxFQUFFLE1BQU0sekJBUE8sWUFDcEIsa0JBQWtCO0tBTzFCLExBUDhCLFlBRXRCLHNCQUFzQjtBQUFJLFlBRDFCLGNBQWM7QUFBRzs7Ozs7O2dNQUFFO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBBcHBDb25maWdTZXJ2aWNlIH0gZnJvbSAnLi4vYXBwLWNvbmZpZy9hcHAtY29uZmlnLnNlcnZpY2UnO1xuaW1wb3J0IHsgQWxmcmVzY29BcGlTZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZXMvYWxmcmVzY28tYXBpLnNlcnZpY2UnO1xuaW1wb3J0IHsgU3RvcmFnZVNlcnZpY2UgfSBmcm9tICcuL3N0b3JhZ2Uuc2VydmljZSc7XG5pbXBvcnQgeyBVc2VyUHJlZmVyZW5jZXNTZXJ2aWNlIH0gZnJvbSAnLi91c2VyLXByZWZlcmVuY2VzLnNlcnZpY2UnO1xuaW1wb3J0IHsgRGVtb0Zvcm0gfSBmcm9tICcuLi9tb2NrL2Zvcm0vZGVtby1mb3JtLm1vY2snO1xuXG5ASW5qZWN0YWJsZSh7XG4gICAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIENvcmVBdXRvbWF0aW9uU2VydmljZSB7XG5cbiAgICBwdWJsaWMgZm9ybXMgPSBuZXcgRGVtb0Zvcm0oKTtcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgYXBwQ29uZmlnU2VydmljZTogQXBwQ29uZmlnU2VydmljZSxcbiAgICAgICAgICAgICAgICBwcml2YXRlIGFsZnJlc2NvQXBpU2VydmljZTogQWxmcmVzY29BcGlTZXJ2aWNlLFxuICAgICAgICAgICAgICAgIHByaXZhdGUgdXNlclByZWZlcmVuY2VzU2VydmljZTogVXNlclByZWZlcmVuY2VzU2VydmljZSxcbiAgICAgICAgICAgICAgICBwcml2YXRlIHN0b3JhZ2VTZXJ2aWNlOiBTdG9yYWdlU2VydmljZSkge1xuICAgIH1cblxuICAgIHNldHVwKCkge1xuICAgICAgICBjb25zdCBhZGZQcm94eSA9IHdpbmRvd1snYWRmJ10gfHwge307XG5cbiAgICAgICAgYWRmUHJveHkuZ2V0Q29uZmlnRmllbGQgPSAoZmllbGQ6IHN0cmluZyk6IGFueSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5hcHBDb25maWdTZXJ2aWNlLmdldChmaWVsZCk7XG4gICAgICAgIH07XG5cbiAgICAgICAgYWRmUHJveHkuc2V0Q29uZmlnRmllbGQgPSAoZmllbGQ6IHN0cmluZywgdmFsdWU6IHN0cmluZykgPT4ge1xuICAgICAgICAgICAgdGhpcy5hcHBDb25maWdTZXJ2aWNlLmNvbmZpZ1tmaWVsZF0gPSBKU09OLnBhcnNlKHZhbHVlKTtcbiAgICAgICAgfTtcblxuICAgICAgICBhZGZQcm94eS5zZXRTdG9yYWdlSXRlbSA9IChrZXk6IHN0cmluZywgZGF0YTogc3RyaW5nKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnN0b3JhZ2VTZXJ2aWNlLnNldEl0ZW0oa2V5LCBkYXRhKTtcbiAgICAgICAgfTtcblxuICAgICAgICBhZGZQcm94eS5yZW1vdmVTdG9yYWdlSXRlbSA9IChrZXk6IHN0cmluZykgPT4ge1xuICAgICAgICAgICAgdGhpcy5zdG9yYWdlU2VydmljZS5yZW1vdmVJdGVtKGtleSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgYWRmUHJveHkuZ2V0U3RvcmFnZUl0ZW0gPSAoa2V5OiBzdHJpbmcpOiBzdHJpbmcgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc3RvcmFnZVNlcnZpY2UuZ2V0SXRlbShrZXkpO1xuICAgICAgICB9O1xuXG4gICAgICAgIGFkZlByb3h5LnNldFVzZXJQcmVmZXJlbmNlID0gKGtleTogc3RyaW5nLCBkYXRhOiBhbnkpID0+IHtcbiAgICAgICAgICAgIHRoaXMudXNlclByZWZlcmVuY2VzU2VydmljZS5zZXQoa2V5LCBkYXRhKTtcbiAgICAgICAgfTtcblxuICAgICAgICBhZGZQcm94eS5zZXRGb3JtSW5FZGl0b3IgPSAoanNvbjogc3RyaW5nKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmZvcm1zLmZvcm1EZWZpbml0aW9uID0gSlNPTi5wYXJzZShqc29uKTtcbiAgICAgICAgfTtcblxuICAgICAgICBhZGZQcm94eS5zZXRDbG91ZEZvcm1JbkVkaXRvciA9IChqc29uOiBzdHJpbmcpID0+IHtcbiAgICAgICAgICAgIHRoaXMuZm9ybXMuY2xvdWRGb3JtRGVmaW5pdGlvbiA9IEpTT04ucGFyc2UoanNvbik7XG4gICAgICAgIH07XG5cbiAgICAgICAgYWRmUHJveHkuY2xlYXJTdG9yYWdlID0gKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5zdG9yYWdlU2VydmljZS5jbGVhcigpO1xuICAgICAgICB9O1xuXG4gICAgICAgIGFkZlByb3h5LmFwaVJlc2V0ID0gKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5hbGZyZXNjb0FwaVNlcnZpY2UucmVzZXQoKTtcbiAgICAgICAgfTtcblxuICAgICAgICB3aW5kb3dbJ2FkZiddID0gYWRmUHJveHk7XG4gICAgfVxufVxuIl19