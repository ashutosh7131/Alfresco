import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
import * as ɵngcc0 from '@angular/core';
export class StorageService {
    constructor() {
        this.memoryStore = {};
        this.useLocalStorage = false;
        this._prefix = '';
        this.useLocalStorage = this.storageAvailable('localStorage');
    }
    get prefix() {
        return this._prefix;
    }
    set prefix(prefix) {
        this._prefix = prefix ? prefix + '_' : '';
    }
    getItem(key) {
        if (this.useLocalStorage) {
            return localStorage.getItem(this.prefix + key);
        }
        else {
            return this.memoryStore.hasOwnProperty(this.prefix + key) ? this.memoryStore[this.prefix + key] : null;
        }
    }
    setItem(key, data) {
        if (this.useLocalStorage) {
            localStorage.setItem(this.prefix + key, data);
        }
        else {
            this.memoryStore[this.prefix + key] = data.toString();
        }
    }
    clear() {
        if (this.useLocalStorage) {
            localStorage.clear();
        }
        else {
            this.memoryStore = {};
        }
    }
    removeItem(key) {
        if (this.useLocalStorage) {
            localStorage.removeItem(this.prefix + key);
        }
        else {
            delete this.memoryStore[this.prefix + key];
        }
    }
    hasItem(key) {
        if (this.useLocalStorage) {
            return localStorage.getItem(this.prefix + key) ? true : false;
        }
        else {
            return this.memoryStore.hasOwnProperty(key);
        }
    }
    storageAvailable(type) {
        try {
            const storage = window[type];
            const key = '__storage_test__';
            storage.setItem(key, key);
            storage.removeItem(key, key);
            return true;
        }
        catch (e) {
            return false;
        }
    }
}
StorageService.ɵfac = function StorageService_Factory(t) { return new (t || StorageService)(); };
StorageService.ɵprov = i0.ɵɵdefineInjectable({ factory: function StorageService_Factory() { return new StorageService(); }, token: StorageService, providedIn: "root" });
StorageService.ctorParameters = () => [];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(StorageService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return []; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RvcmFnZS5zZXJ2aWNlLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9ob21lL3RyYXZpcy9idWlsZC9BbGZyZXNjby9hbGZyZXNjby1uZzItY29tcG9uZW50cy9saWIvY29yZS9zZXJ2aWNlcy9zdG9yYWdlLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBaUJBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0M7O0FBSUEsTUFBTSxPQUFPLGNBQWM7QUFDM0IsSUFhSTtBQUNKLFFBYlksZ0JBQVcsR0FBMkIsRUFBRSxDQUFDO0FBQ3JELFFBQXFCLG9CQUFlLEdBQVksS0FBSyxDQUFDO0FBQ3RELFFBQVksWUFBTyxHQUFXLEVBQUUsQ0FBQztBQUNqQyxRQVVRLElBQUksQ0FBQyxlQUFlLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDLGNBQWMsQ0FBQyxDQUFDO0FBQ3JFLElBQUksQ0FBQztBQUNMLElBWEksSUFBSSxNQUFNO0FBQ2QsUUFBUSxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUM7QUFDNUIsSUFBSSxDQUFDO0FBQ0wsSUFDSSxJQUFJLE1BQU0sQ0FBQyxNQUFjO0FBQzdCLFFBQVEsSUFBSSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLE1BQU0sR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztBQUNsRCxJQUFJLENBQUM7QUFDTCxJQVVJLE9BQU8sQ0FBQyxHQUFXO0FBQUksUUFDbkIsSUFBSSxJQUFJLENBQUMsZUFBZSxFQUFFO0FBQ2xDLFlBQVksT0FBTyxZQUFZLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsR0FBRyxDQUFDLENBQUM7QUFDM0QsU0FBUztBQUFDLGFBQUs7QUFDZixZQUFZLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7QUFDbkgsU0FBUztBQUNULElBQUksQ0FBQztBQUNMLElBTUksT0FBTyxDQUFDLEdBQVcsRUFBRSxJQUFZO0FBQ3JDLFFBQVEsSUFBSSxJQUFJLENBQUMsZUFBZSxFQUFFO0FBQ2xDLFlBQVksWUFBWSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQztBQUMxRCxTQUFTO0FBQUMsYUFBSztBQUNmLFlBQVksSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztBQUNsRSxTQUFTO0FBQ1QsSUFBSSxDQUFDO0FBQ0wsSUFFSSxLQUFLO0FBQ1QsUUFBUSxJQUFJLElBQUksQ0FBQyxlQUFlLEVBQUU7QUFDbEMsWUFBWSxZQUFZLENBQUMsS0FBSyxFQUFFLENBQUM7QUFDakMsU0FBUztBQUFDLGFBQUs7QUFDZixZQUFZLElBQUksQ0FBQyxXQUFXLEdBQUcsRUFBRSxDQUFDO0FBQ2xDLFNBQVM7QUFDVCxJQUFJLENBQUM7QUFDTCxJQUtJLFVBQVUsQ0FBQyxHQUFXO0FBQzFCLFFBQVEsSUFBSSxJQUFJLENBQUMsZUFBZSxFQUFFO0FBQ2xDLFlBQVksWUFBWSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLEdBQUcsQ0FBQyxDQUFDO0FBQ3ZELFNBQVM7QUFBQyxhQUFLO0FBQ2YsWUFBWSxPQUFPLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxHQUFHLENBQUMsQ0FBQztBQUN2RCxTQUFTO0FBQ1QsSUFBSSxDQUFDO0FBQ0wsSUFNSSxPQUFPLENBQUMsR0FBVztBQUFJLFFBQ25CLElBQUksSUFBSSxDQUFDLGVBQWUsRUFBRTtBQUNsQyxZQUFZLE9BQU8sWUFBWSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQztBQUMxRSxTQUFTO0FBQUMsYUFBSztBQUNmLFlBQVksT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUN4RCxTQUFTO0FBQ1QsSUFBSSxDQUFDO0FBQ0wsSUFDWSxnQkFBZ0IsQ0FBQyxJQUFZO0FBQUksUUFDckMsSUFBSTtBQUNaLFlBQVksTUFBTSxPQUFPLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ3pDLFlBQVksTUFBTSxHQUFHLEdBQUcsa0JBQWtCLENBQUM7QUFDM0MsWUFBWSxPQUFPLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQztBQUN0QyxZQUFZLE9BQU8sQ0FBQyxVQUFVLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0FBQ3pDLFlBQVksT0FBTyxJQUFJLENBQUM7QUFDeEIsU0FBUztBQUFDLFFBQUEsT0FBTyxDQUFDLEVBQUU7QUFDcEIsWUFBWSxPQUFPLEtBQUssQ0FBQztBQUN6QixTQUFTO0FBQ1QsSUFBSSxDQUFDO0FBQ0w7aUdBQUM7QUFDRCx5S0ExRks7QUFBQztBQUhMLFVBQVUsU0FBQyxrQkFDUixVQUFVLEVBQUUsTUFBTSxjQUNyQjs7Ozs7Z0RBR2U7QUFBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuQEluamVjdGFibGUoe1xuICAgIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBTdG9yYWdlU2VydmljZSB7XG5cbiAgICBwcml2YXRlIG1lbW9yeVN0b3JlOiB7IFtrZXk6IHN0cmluZ106IGFueSB9ID0ge307XG4gICAgcHJpdmF0ZSByZWFkb25seSB1c2VMb2NhbFN0b3JhZ2U6IGJvb2xlYW4gPSBmYWxzZTtcbiAgICBwcml2YXRlIF9wcmVmaXg6IHN0cmluZyA9ICcnO1xuXG4gICAgZ2V0IHByZWZpeCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3ByZWZpeDtcbiAgICB9XG5cbiAgICBzZXQgcHJlZml4KHByZWZpeDogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMuX3ByZWZpeCA9IHByZWZpeCA/IHByZWZpeCArICdfJyA6ICcnO1xuICAgIH1cblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLnVzZUxvY2FsU3RvcmFnZSA9IHRoaXMuc3RvcmFnZUF2YWlsYWJsZSgnbG9jYWxTdG9yYWdlJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyBhbiBpdGVtLlxuICAgICAqIEBwYXJhbSBrZXkgS2V5IHRvIGlkZW50aWZ5IHRoZSBpdGVtXG4gICAgICogQHJldHVybnMgVGhlIGl0ZW0gKGlmIGFueSkgcmV0cmlldmVkIGJ5IHRoZSBrZXlcbiAgICAgKi9cbiAgICBnZXRJdGVtKGtleTogc3RyaW5nKTogc3RyaW5nIHwgbnVsbCB7XG4gICAgICAgIGlmICh0aGlzLnVzZUxvY2FsU3RvcmFnZSkge1xuICAgICAgICAgICAgcmV0dXJuIGxvY2FsU3RvcmFnZS5nZXRJdGVtKHRoaXMucHJlZml4ICsga2V5KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm1lbW9yeVN0b3JlLmhhc093blByb3BlcnR5KHRoaXMucHJlZml4ICsga2V5KSA/IHRoaXMubWVtb3J5U3RvcmVbdGhpcy5wcmVmaXggKyBrZXldIDogbnVsbDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFN0b3JlcyBhbiBpdGVtXG4gICAgICogQHBhcmFtIGtleSBLZXkgdG8gaWRlbnRpZnkgdGhlIGl0ZW1cbiAgICAgKiBAcGFyYW0gZGF0YSBEYXRhIHRvIHN0b3JlXG4gICAgICovXG4gICAgc2V0SXRlbShrZXk6IHN0cmluZywgZGF0YTogc3RyaW5nKSB7XG4gICAgICAgIGlmICh0aGlzLnVzZUxvY2FsU3RvcmFnZSkge1xuICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0odGhpcy5wcmVmaXggKyBrZXksIGRhdGEpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5tZW1vcnlTdG9yZVt0aGlzLnByZWZpeCArIGtleV0gPSBkYXRhLnRvU3RyaW5nKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKiogUmVtb3ZlcyBhbGwgY3VycmVudGx5IHN0b3JlZCBpdGVtcy4gKi9cbiAgICBjbGVhcigpIHtcbiAgICAgICAgaWYgKHRoaXMudXNlTG9jYWxTdG9yYWdlKSB7XG4gICAgICAgICAgICBsb2NhbFN0b3JhZ2UuY2xlYXIoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMubWVtb3J5U3RvcmUgPSB7fTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYSBzaW5nbGUgaXRlbS5cbiAgICAgKiBAcGFyYW0ga2V5IEtleSB0byBpZGVudGlmeSB0aGUgaXRlbVxuICAgICAqL1xuICAgIHJlbW92ZUl0ZW0oa2V5OiBzdHJpbmcpIHtcbiAgICAgICAgaWYgKHRoaXMudXNlTG9jYWxTdG9yYWdlKSB7XG4gICAgICAgICAgICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbSh0aGlzLnByZWZpeCArIGtleSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBkZWxldGUgdGhpcy5tZW1vcnlTdG9yZVt0aGlzLnByZWZpeCArIGtleV07XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJcyBhbnkgaXRlbSBjdXJyZW50bHkgc3RvcmVkIHVuZGVyIGBrZXlgP1xuICAgICAqIEBwYXJhbSBrZXkgS2V5IGlkZW50aWZ5aW5nIGl0ZW0gdG8gY2hlY2tcbiAgICAgKiBAcmV0dXJucyBUcnVlIGlmIGtleSByZXRyaWV2ZXMgYW4gaXRlbSwgZmFsc2Ugb3RoZXJ3aXNlXG4gICAgICovXG4gICAgaGFzSXRlbShrZXk6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgICAgICBpZiAodGhpcy51c2VMb2NhbFN0b3JhZ2UpIHtcbiAgICAgICAgICAgIHJldHVybiBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSh0aGlzLnByZWZpeCArIGtleSkgPyB0cnVlIDogZmFsc2U7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5tZW1vcnlTdG9yZS5oYXNPd25Qcm9wZXJ0eShrZXkpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzdG9yYWdlQXZhaWxhYmxlKHR5cGU6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3Qgc3RvcmFnZSA9IHdpbmRvd1t0eXBlXTtcbiAgICAgICAgICAgIGNvbnN0IGtleSA9ICdfX3N0b3JhZ2VfdGVzdF9fJztcbiAgICAgICAgICAgIHN0b3JhZ2Uuc2V0SXRlbShrZXksIGtleSk7XG4gICAgICAgICAgICBzdG9yYWdlLnJlbW92ZUl0ZW0oa2V5LCBrZXkpO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiJdfQ==