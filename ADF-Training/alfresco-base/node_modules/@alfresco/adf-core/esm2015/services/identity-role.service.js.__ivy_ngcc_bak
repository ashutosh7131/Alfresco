import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { throwError as observableThrowError, of } from 'rxjs';
import { catchError, map } from 'rxjs/operators';
import { AppConfigService } from '../app-config/app-config.service';
import { LogService } from './log.service';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "../app-config/app-config.service";
import * as i3 from "./log.service";
export class IdentityRoleService {
    constructor(http, appConfig, logService) {
        this.http = http;
        this.appConfig = appConfig;
        this.logService = logService;
        this.contextRoot = '';
        this.identityHost = '';
        this.contextRoot = this.appConfig.get('apiHost', '');
        this.identityHost = this.appConfig.get('identityHost');
    }
    getRoles(skipCount = 0, size = 5) {
        return this.http.get(`${this.identityHost}/roles`).pipe(map(res => {
            return this.preparePaginationWithRoles(res, skipCount, size);
        }), catchError(error => this.handleError(error)));
    }
    preparePaginationWithRoles(roles, skipCount = 0, size = 5) {
        return {
            entries: roles.slice(skipCount, skipCount + size),
            pagination: {
                skipCount: skipCount,
                maxItems: size,
                count: roles.length,
                hasMoreItems: false,
                totalItems: roles.length
            }
        };
    }
    addRole(newRole) {
        if (newRole) {
            const request = newRole;
            return this.http
                .post(`${this.identityHost}/roles`, request)
                .pipe(catchError(error => this.handleError(error)));
        }
        return of();
    }
    deleteRole(deletedRole) {
        return this.http
            .delete(`${this.identityHost}/roles-by-id/${deletedRole.id}`)
            .pipe(catchError(error => this.handleError(error)));
    }
    updateRole(updatedRole, roleId) {
        if (updatedRole && roleId) {
            const request = updatedRole;
            return this.http
                .put(`${this.identityHost}/roles-by-id/${roleId}`, request)
                .pipe(catchError(error => this.handleError(error)));
        }
        return of();
    }
    handleError(error) {
        this.logService.error(error);
        return observableThrowError(error || 'Server error');
    }
}
IdentityRoleService.ɵprov = i0.ɵɵdefineInjectable({ factory: function IdentityRoleService_Factory() { return new IdentityRoleService(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.AppConfigService), i0.ɵɵinject(i3.LogService)); }, token: IdentityRoleService, providedIn: "root" });
IdentityRoleService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
IdentityRoleService.ctorParameters = () => [
    { type: HttpClient },
    { type: AppConfigService },
    { type: LogService }
];
//# sourceMappingURL=data:application/json;base64,