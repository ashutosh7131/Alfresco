import { Injectable } from '@angular/core';
import { TranslateService } from '@ngx-translate/core';
import { BehaviorSubject } from 'rxjs';
import { AppConfigService, AppConfigValues } from '../app-config/app-config.service';
import { StorageService } from './storage.service';
import { distinctUntilChanged, map, filter } from 'rxjs/operators';
import { AlfrescoApiService } from './alfresco-api.service';
import * as i0 from "@angular/core";
import * as i1 from "@ngx-translate/core";
import * as i2 from "../app-config/app-config.service";
import * as i3 from "./storage.service";
import * as i4 from "./alfresco-api.service";
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@ngx-translate/core';
import * as ɵngcc2 from '../app-config/app-config.service';
import * as ɵngcc3 from './storage.service';
import * as ɵngcc4 from './alfresco-api.service';
export var UserPreferenceValues;
(function (UserPreferenceValues) {
    UserPreferenceValues["PaginationSize"] = "paginationSize";
    UserPreferenceValues["Locale"] = "locale";
    UserPreferenceValues["SupportedPageSizes"] = "supportedPageSizes";
    UserPreferenceValues["ExpandedSideNavStatus"] = "expandedSidenav";
})(UserPreferenceValues || (UserPreferenceValues = {}));
export class UserPreferencesService {
    constructor(translate, appConfig, storage, alfrescoApiService) {
        this.translate = translate;
        this.appConfig = appConfig;
        this.storage = storage;
        this.alfrescoApiService = alfrescoApiService;
        this.defaults = {
            paginationSize: 25,
            supportedPageSizes: [5, 10, 15, 20],
            locale: 'en',
            expandedSidenav: true
        };
        this.userPreferenceStatus = this.defaults;
        this.alfrescoApiService.alfrescoApiInitialized.pipe(filter(status => status)).subscribe(this.initUserPreferenceStatus.bind(this));
        this.onChangeSubject = new BehaviorSubject(this.userPreferenceStatus);
        this.onChange = this.onChangeSubject.asObservable();
    }
    initUserPreferenceStatus() {
        this.initUserLanguage();
        this.set(UserPreferenceValues.PaginationSize, this.paginationSize);
        this.set(UserPreferenceValues.SupportedPageSizes, JSON.stringify(this.supportedPageSizes));
    }
    initUserLanguage() {
        if (this.locale || this.appConfig.get(UserPreferenceValues.Locale)) {
            const locale = this.locale || this.getDefaultLocale();
            this.set(UserPreferenceValues.Locale, locale);
            this.set('textOrientation', this.getLanguageByKey(locale).direction || 'ltr');
        }
        else {
            const locale = this.locale || this.getDefaultLocale();
            this.setWithoutStore(UserPreferenceValues.Locale, locale);
            this.setWithoutStore('textOrientation', this.getLanguageByKey(locale).direction || 'ltr');
        }
    }
    select(property) {
        return this.onChange
            .pipe(map((userPreferenceStatus) => userPreferenceStatus[property]), distinctUntilChanged());
    }
    get(property, defaultValue) {
        const key = this.getPropertyKey(property);
        const value = this.storage.getItem(key);
        if (value === undefined || value === null) {
            return defaultValue;
        }
        return value;
    }
    set(property, value) {
        if (!property) {
            return;
        }
        this.storage.setItem(this.getPropertyKey(property), value);
        this.userPreferenceStatus[property] = value;
        this.onChangeSubject.next(this.userPreferenceStatus);
    }
    setWithoutStore(property, value) {
        if (!property) {
            return;
        }
        this.userPreferenceStatus[property] = value;
        this.onChangeSubject.next(this.userPreferenceStatus);
    }
    hasItem(property) {
        if (!property) {
            return false;
        }
        return this.storage.hasItem(this.getPropertyKey(property));
    }
    getStoragePrefix() {
        return this.storage.getItem('USER_PROFILE') || 'GUEST';
    }
    setStoragePrefix(value) {
        this.storage.setItem('USER_PROFILE', value || 'GUEST');
        this.initUserPreferenceStatus();
    }
    getPropertyKey(property) {
        return `${this.getStoragePrefix()}__${property}`;
    }
    get supportedPageSizes() {
        const supportedPageSizes = this.get(UserPreferenceValues.SupportedPageSizes);
        if (supportedPageSizes) {
            return JSON.parse(supportedPageSizes);
        }
        else {
            return this.appConfig.get('pagination.supportedPageSizes', this.defaults.supportedPageSizes);
        }
    }
    set supportedPageSizes(value) {
        this.set(UserPreferenceValues.SupportedPageSizes, JSON.stringify(value));
    }
    set paginationSize(value) {
        this.set(UserPreferenceValues.PaginationSize, value);
    }
    get paginationSize() {
        const paginationSize = this.get(UserPreferenceValues.PaginationSize);
        if (paginationSize) {
            return Number(paginationSize);
        }
        else {
            return Number(this.appConfig.get('pagination.size', this.defaults.paginationSize));
        }
    }
    get locale() {
        return this.get(UserPreferenceValues.Locale);
    }
    set locale(value) {
        this.set(UserPreferenceValues.Locale, value);
    }
    getDefaultLocale() {
        return this.appConfig.get(UserPreferenceValues.Locale) || this.translate.getBrowserCultureLang() || 'en';
    }
    getLanguageByKey(key) {
        return (this.appConfig
            .get(AppConfigValues.APP_CONFIG_LANGUAGES_KEY, [{ key: 'en' }])
            .find((language) => key.includes(language.key)) || { key: 'en' });
    }
}
UserPreferencesService.ɵfac = function UserPreferencesService_Factory(t) { return new (t || UserPreferencesService)(ɵngcc0.ɵɵinject(ɵngcc1.TranslateService), ɵngcc0.ɵɵinject(ɵngcc2.AppConfigService), ɵngcc0.ɵɵinject(ɵngcc3.StorageService), ɵngcc0.ɵɵinject(ɵngcc4.AlfrescoApiService)); };
UserPreferencesService.ɵprov = i0.ɵɵdefineInjectable({ factory: function UserPreferencesService_Factory() { return new UserPreferencesService(i0.ɵɵinject(i1.TranslateService), i0.ɵɵinject(i2.AppConfigService), i0.ɵɵinject(i3.StorageService), i0.ɵɵinject(i4.AlfrescoApiService)); }, token: UserPreferencesService, providedIn: "root" });
UserPreferencesService.ctorParameters = () => [
    { type: TranslateService },
    { type: AppConfigService },
    { type: StorageService },
    { type: AlfrescoApiService }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(UserPreferencesService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc1.TranslateService }, { type: ɵngcc2.AppConfigService }, { type: ɵngcc3.StorageService }, { type: ɵngcc4.AlfrescoApiService }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlci1wcmVmZXJlbmNlcy5zZXJ2aWNlLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9ob21lL3RyYXZpcy9idWlsZC9BbGZyZXNjby9hbGZyZXNjby1uZzItY29tcG9uZW50cy9saWIvY29yZS9zZXJ2aWNlcy91c2VyLXByZWZlcmVuY2VzLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBaUJBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDdkQsT0FBTyxFQUFjLGVBQWUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUNuRCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsZUFBZSxFQUFFLE1BQU0sa0NBQWtDLENBQUM7QUFFckYsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ25ELE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxHQUFHLEVBQUUsTUFBTSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDbkUsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDNUQ7QUFFQztBQUNJO0FBQ2lDO0FBQ047Ozs7OztBQUpoQyxNQUFNLENBQU4sSUFBWSxvQkFLWDtBQUxELFdBQVksb0JBQW9CO0FBQy9CLElBQUcseURBQWlDLENBQUE7QUFBQyxJQUNsQyx5Q0FBaUIsQ0FBQTtBQUFDLElBQ2xCLGlFQUF5QyxDQUFBO0FBQUMsSUFDMUMsaUVBQXlDLENBQUE7QUFDN0MsQ0FBQyxFQUxXLG9CQUFvQixLQUFwQixvQkFBb0IsUUFLL0I7QUFLRCxNQUFNLE9BQU8sc0JBQXNCO0FBQ25DLElBWUksWUFBbUIsU0FBMkIsRUFDMUIsU0FBMkIsRUFDM0IsT0FBdUIsRUFDdkIsa0JBQXNDO0FBQzlELFFBSnVCLGNBQVMsR0FBVCxTQUFTLENBQWtCO0FBQUMsUUFDM0IsY0FBUyxHQUFULFNB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LEVBQUUsQ0FBZ0IsRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztBQUNuSCxhQUFpQixJQUFJLENBQUMsQ0FBQyxRQUFRLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQW1CLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxDQUN0RixDQUFDO0FBQ1YsSUFBSSxDQUFDO0FBQ0w7K1JBQUM7QUFDRCwrVUF0TUs7QUFBQztFQUhMLFVBQVUsU0FBQyxyQkFLRyxZQXBCTixnQkFBZ0I7T0FnQnJCLFVBQVUsRUFBRSxNQUFNLHpCQWhCTyxZQUVwQixnQkFBZ0I7T0FleEIsUEFmNEIsWUFFcEIsY0FBYztBQUFJLFlBRWxCLGtCQUFrQjtBQUFHOzs7Ozs7MExBQUU7QUFBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFRyYW5zbGF0ZVNlcnZpY2UgfSBmcm9tICdAbmd4LXRyYW5zbGF0ZS9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUsIEJlaGF2aW9yU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgQXBwQ29uZmlnU2VydmljZSwgQXBwQ29uZmlnVmFsdWVzIH0gZnJvbSAnLi4vYXBwLWNvbmZpZy9hcHAtY29uZmlnLnNlcnZpY2UnO1xuaW1wb3J0IHsgTGFuZ3VhZ2VJdGVtIH0gZnJvbSAnLi9sYW5ndWFnZS5zZXJ2aWNlJztcbmltcG9ydCB7IFN0b3JhZ2VTZXJ2aWNlIH0gZnJvbSAnLi9zdG9yYWdlLnNlcnZpY2UnO1xuaW1wb3J0IHsgZGlzdGluY3RVbnRpbENoYW5nZWQsIG1hcCwgZmlsdGVyIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgQWxmcmVzY29BcGlTZXJ2aWNlIH0gZnJvbSAnLi9hbGZyZXNjby1hcGkuc2VydmljZSc7XG5cbmV4cG9ydCBlbnVtIFVzZXJQcmVmZXJlbmNlVmFsdWVzIHtcbiAgICBQYWdpbmF0aW9uU2l6ZSA9ICdwYWdpbmF0aW9uU2l6ZScsXG4gICAgTG9jYWxlID0gJ2xvY2FsZScsXG4gICAgU3VwcG9ydGVkUGFnZVNpemVzID0gJ3N1cHBvcnRlZFBhZ2VTaXplcycsXG4gICAgRXhwYW5kZWRTaWRlTmF2U3RhdHVzID0gJ2V4cGFuZGVkU2lkZW5hdidcbn1cblxuQEluamVjdGFibGUoe1xuICAgIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBVc2VyUHJlZmVyZW5jZXNTZXJ2aWNlIHtcblxuICAgIGRlZmF1bHRzID0ge1xuICAgICAgICBwYWdpbmF0aW9uU2l6ZTogMjUsXG4gICAgICAgIHN1cHBvcnRlZFBhZ2VTaXplczogWzUsIDEwLCAxNSwgMjBdLFxuICAgICAgICBsb2NhbGU6ICdlbicsXG4gICAgICAgIGV4cGFuZGVkU2lkZW5hdjogdHJ1ZVxuICAgIH07XG5cbiAgICBwcml2YXRlIHVzZXJQcmVmZXJlbmNlU3RhdHVzOiBhbnkgPSB0aGlzLmRlZmF1bHRzO1xuICAgIHByaXZhdGUgb25DaGFuZ2VTdWJqZWN0OiBCZWhhdmlvclN1YmplY3Q8YW55PjtcbiAgICBvbkNoYW5nZTogT2JzZXJ2YWJsZTxhbnk+O1xuXG4gICAgY29uc3RydWN0b3IocHVibGljIHRyYW5zbGF0ZTogVHJhbnNsYXRlU2VydmljZSxcbiAgICAgICAgICAgICAgICBwcml2YXRlIGFwcENvbmZpZzogQXBwQ29uZmlnU2VydmljZSxcbiAgICAgICAgICAgICAgICBwcml2YXRlIHN0b3JhZ2U6IFN0b3JhZ2VTZXJ2aWNlLFxuICAgICAgICAgICAgICAgIHByaXZhdGUgYWxmcmVzY29BcGlTZXJ2aWNlOiBBbGZyZXNjb0FwaVNlcnZpY2UpIHtcbiAgICAgICAgdGhpcy5hbGZyZXNjb0FwaVNlcnZpY2UuYWxmcmVzY29BcGlJbml0aWFsaXplZC5waXBlKGZpbHRlcihzdGF0dXMgPT4gc3RhdHVzKSkuc3Vic2NyaWJlKHRoaXMuaW5pdFVzZXJQcmVmZXJlbmNlU3RhdHVzLmJpbmQodGhpcykpO1xuICAgICAgICB0aGlzLm9uQ2hhbmdlU3ViamVjdCA9IG5ldyBCZWhhdmlvclN1YmplY3QodGhpcy51c2VyUHJlZmVyZW5jZVN0YXR1cyk7XG4gICAgICAgIHRoaXMub25DaGFuZ2UgPSB0aGlzLm9uQ2hhbmdlU3ViamVjdC5hc09ic2VydmFibGUoKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGluaXRVc2VyUHJlZmVyZW5jZVN0YXR1cygpIHtcbiAgICAgICAgdGhpcy5pbml0VXNlckxhbmd1YWdlKCk7XG4gICAgICAgIHRoaXMuc2V0KFVzZXJQcmVmZXJlbmNlVmFsdWVzLlBhZ2luYXRpb25TaXplLCB0aGlzLnBhZ2luYXRpb25TaXplKTtcbiAgICAgICAgdGhpcy5zZXQoVXNlclByZWZlcmVuY2VWYWx1ZXMuU3VwcG9ydGVkUGFnZVNpemVzLCBKU09OLnN0cmluZ2lmeSh0aGlzLnN1cHBvcnRlZFBhZ2VTaXplcykpO1xuICAgIH1cblxuICAgIHByaXZhdGUgaW5pdFVzZXJMYW5ndWFnZSgpIHtcbiAgICAgICAgaWYgKHRoaXMubG9jYWxlIHx8IHRoaXMuYXBwQ29uZmlnLmdldDxzdHJpbmc+KFVzZXJQcmVmZXJlbmNlVmFsdWVzLkxvY2FsZSkpIHtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsZSA9IHRoaXMubG9jYWxlIHx8IHRoaXMuZ2V0RGVmYXVsdExvY2FsZSgpO1xuXG4gICAgICAgICAgICB0aGlzLnNldChVc2VyUHJlZmVyZW5jZVZhbHVlcy5Mb2NhbGUsIGxvY2FsZSk7XG4gICAgICAgICAgICB0aGlzLnNldCgndGV4dE9yaWVudGF0aW9uJywgdGhpcy5nZXRMYW5ndWFnZUJ5S2V5KGxvY2FsZSkuZGlyZWN0aW9uIHx8ICdsdHInKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsZSA9IHRoaXMubG9jYWxlIHx8IHRoaXMuZ2V0RGVmYXVsdExvY2FsZSgpO1xuXG4gICAgICAgICAgICB0aGlzLnNldFdpdGhvdXRTdG9yZShVc2VyUHJlZmVyZW5jZVZhbHVlcy5Mb2NhbGUsIGxvY2FsZSk7XG4gICAgICAgICAgICB0aGlzLnNldFdpdGhvdXRTdG9yZSgndGV4dE9yaWVudGF0aW9uJywgdGhpcy5nZXRMYW5ndWFnZUJ5S2V5KGxvY2FsZSkuZGlyZWN0aW9uIHx8ICdsdHInKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgdXAgYSBjYWxsYmFjayB0byBub3RpZnkgd2hlbiBhIHByb3BlcnR5IGhhcyBjaGFuZ2VkLlxuICAgICAqIEBwYXJhbSBwcm9wZXJ0eSBUaGUgcHJvcGVydHkgdG8gd2F0Y2hcbiAgICAgKiBAcmV0dXJucyBOb3RpZmljYXRpb24gY2FsbGJhY2tcbiAgICAgKi9cbiAgICBzZWxlY3QocHJvcGVydHk6IHN0cmluZyk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgICAgIHJldHVybiB0aGlzLm9uQ2hhbmdlXG4gICAgICAgICAgICAucGlwZShcbiAgICAgICAgICAgICAgICBtYXAoKHVzZXJQcmVmZXJlbmNlU3RhdHVzKSA9PiB1c2VyUHJlZmVyZW5jZVN0YXR1c1twcm9wZXJ0eV0pLFxuICAgICAgICAgICAgICAgIGRpc3RpbmN0VW50aWxDaGFuZ2VkKClcbiAgICAgICAgICAgICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyBhIHByZWZlcmVuY2UgcHJvcGVydHkuXG4gICAgICogQHBhcmFtIHByb3BlcnR5IE5hbWUgb2YgdGhlIHByb3BlcnR5XG4gICAgICogQHBhcmFtIGRlZmF1bHRWYWx1ZSBEZWZhdWx0IHRvIHJldHVybiBpZiB0aGUgcHJvcGVydHkgaXMgbm90IGZvdW5kXG4gICAgICogQHJldHVybnMgUHJlZmVyZW5jZSBwcm9wZXJ0eVxuICAgICAqL1xuICAgIGdldChwcm9wZXJ0eTogc3RyaW5nLCBkZWZhdWx0VmFsdWU/OiBzdHJpbmcpOiBzdHJpbmcge1xuICAgICAgICBjb25zdCBrZXkgPSB0aGlzLmdldFByb3BlcnR5S2V5KHByb3BlcnR5KTtcbiAgICAgICAgY29uc3QgdmFsdWUgPSB0aGlzLnN0b3JhZ2UuZ2V0SXRlbShrZXkpO1xuICAgICAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCB8fCB2YWx1ZSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIGRlZmF1bHRWYWx1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyBhIHByZWZlcmVuY2UgcHJvcGVydHkuXG4gICAgICogQHBhcmFtIHByb3BlcnR5IE5hbWUgb2YgdGhlIHByb3BlcnR5XG4gICAgICogQHBhcmFtIHZhbHVlIE5ldyB2YWx1ZSBmb3IgdGhlIHByb3BlcnR5XG4gICAgICovXG4gICAgc2V0KHByb3BlcnR5OiBzdHJpbmcsIHZhbHVlOiBhbnkpIHtcbiAgICAgICAgaWYgKCFwcm9wZXJ0eSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc3RvcmFnZS5zZXRJdGVtKFxuICAgICAgICAgICAgdGhpcy5nZXRQcm9wZXJ0eUtleShwcm9wZXJ0eSksXG4gICAgICAgICAgICB2YWx1ZVxuICAgICAgICApO1xuICAgICAgICB0aGlzLnVzZXJQcmVmZXJlbmNlU3RhdHVzW3Byb3BlcnR5XSA9IHZhbHVlO1xuICAgICAgICB0aGlzLm9uQ2hhbmdlU3ViamVjdC5uZXh0KHRoaXMudXNlclByZWZlcmVuY2VTdGF0dXMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgYSBwcmVmZXJlbmNlIHByb3BlcnR5LlxuICAgICAqIEBwYXJhbSBwcm9wZXJ0eSBOYW1lIG9mIHRoZSBwcm9wZXJ0eVxuICAgICAqIEBwYXJhbSB2YWx1ZSBOZXcgdmFsdWUgZm9yIHRoZSBwcm9wZXJ0eVxuICAgICAqL1xuICAgIHNldFdpdGhvdXRTdG9yZShwcm9wZXJ0eTogc3RyaW5nLCB2YWx1ZTogYW55KSB7XG4gICAgICAgIGlmICghcHJvcGVydHkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnVzZXJQcmVmZXJlbmNlU3RhdHVzW3Byb3BlcnR5XSA9IHZhbHVlO1xuICAgICAgICB0aGlzLm9uQ2hhbmdlU3ViamVjdC5uZXh0KHRoaXMudXNlclByZWZlcmVuY2VTdGF0dXMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrIGlmIGFuIGl0ZW0gaXMgcHJlc2VudCBpbiB0aGUgc3RvcmFnZVxuICAgICAqIEBwYXJhbSBwcm9wZXJ0eSBOYW1lIG9mIHRoZSBwcm9wZXJ0eVxuICAgICAqIEByZXR1cm5zIFRydWUgaWYgdGhlIGl0ZW0gaXMgcHJlc2VudCwgZmFsc2Ugb3RoZXJ3aXNlXG4gICAgICovXG4gICAgaGFzSXRlbShwcm9wZXJ0eTogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgICAgIGlmICghcHJvcGVydHkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5zdG9yYWdlLmhhc0l0ZW0oXG4gICAgICAgICAgICB0aGlzLmdldFByb3BlcnR5S2V5KHByb3BlcnR5KVxuICAgICAgICApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGFjdGl2ZSBzdG9yYWdlIHByZWZpeCBmb3IgcHJlZmVyZW5jZXMuXG4gICAgICogQHJldHVybnMgU3RvcmFnZSBwcmVmaXhcbiAgICAgKi9cbiAgICBnZXRTdG9yYWdlUHJlZml4KCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiB0aGlzLnN0b3JhZ2UuZ2V0SXRlbSgnVVNFUl9QUk9GSUxFJykgfHwgJ0dVRVNUJztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBhY3RpdmUgc3RvcmFnZSBwcmVmaXggZm9yIHByZWZlcmVuY2VzLlxuICAgICAqIEBwYXJhbSB2YWx1ZSBOYW1lIG9mIHRoZSBwcmVmaXhcbiAgICAgKi9cbiAgICBzZXRTdG9yYWdlUHJlZml4KHZhbHVlOiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy5zdG9yYWdlLnNldEl0ZW0oJ1VTRVJfUFJPRklMRScsIHZhbHVlIHx8ICdHVUVTVCcpO1xuICAgICAgICB0aGlzLmluaXRVc2VyUHJlZmVyZW5jZVN0YXR1cygpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGZ1bGwgcHJvcGVydHkga2V5IHdpdGggcHJlZml4LlxuICAgICAqIEBwYXJhbSBwcm9wZXJ0eSBUaGUgcHJvcGVydHkgbmFtZVxuICAgICAqIEByZXR1cm5zIFByb3BlcnR5IGtleVxuICAgICAqL1xuICAgIGdldFByb3BlcnR5S2V5KHByb3BlcnR5OiBzdHJpbmcpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gYCR7dGhpcy5nZXRTdG9yYWdlUHJlZml4KCl9X18ke3Byb3BlcnR5fWA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyBhbiBhcnJheSBjb250YWluaW5nIHRoZSBhdmFpbGFibGUgcGFnZSBzaXplcy5cbiAgICAgKiBAcmV0dXJucyBBcnJheSBvZiBwYWdlIHNpemUgdmFsdWVzXG4gICAgICovXG4gICAgZ2V0IHN1cHBvcnRlZFBhZ2VTaXplcygpOiBudW1iZXJbXSB7XG4gICAgICAgIGNvbnN0IHN1cHBvcnRlZFBhZ2VTaXplcyA9IHRoaXMuZ2V0KFVzZXJQcmVmZXJlbmNlVmFsdWVzLlN1cHBvcnRlZFBhZ2VTaXplcyk7XG5cbiAgICAgICAgaWYgKHN1cHBvcnRlZFBhZ2VTaXplcykge1xuICAgICAgICAgICAgcmV0dXJuIEpTT04ucGFyc2Uoc3VwcG9ydGVkUGFnZVNpemVzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmFwcENvbmZpZy5nZXQoJ3BhZ2luYXRpb24uc3VwcG9ydGVkUGFnZVNpemVzJywgdGhpcy5kZWZhdWx0cy5zdXBwb3J0ZWRQYWdlU2l6ZXMpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgc2V0IHN1cHBvcnRlZFBhZ2VTaXplcyh2YWx1ZTogbnVtYmVyW10pIHtcbiAgICAgICAgdGhpcy5zZXQoVXNlclByZWZlcmVuY2VWYWx1ZXMuU3VwcG9ydGVkUGFnZVNpemVzLCBKU09OLnN0cmluZ2lmeSh2YWx1ZSkpO1xuICAgIH1cblxuICAgIC8qKiBQYWdpbmF0aW9uIHNpemUuICovXG4gICAgc2V0IHBhZ2luYXRpb25TaXplKHZhbHVlOiBudW1iZXIpIHtcbiAgICAgICAgdGhpcy5zZXQoVXNlclByZWZlcmVuY2VWYWx1ZXMuUGFnaW5hdGlvblNpemUsIHZhbHVlKTtcbiAgICB9XG5cbiAgICBnZXQgcGFnaW5hdGlvblNpemUoKTogbnVtYmVyIHtcbiAgICAgICAgY29uc3QgcGFnaW5hdGlvblNpemUgPSB0aGlzLmdldChVc2VyUHJlZmVyZW5jZVZhbHVlcy5QYWdpbmF0aW9uU2l6ZSk7XG5cbiAgICAgICAgaWYgKHBhZ2luYXRpb25TaXplKSB7XG4gICAgICAgICAgICByZXR1cm4gTnVtYmVyKHBhZ2luYXRpb25TaXplKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBOdW1iZXIodGhpcy5hcHBDb25maWcuZ2V0KCdwYWdpbmF0aW9uLnNpemUnLCB0aGlzLmRlZmF1bHRzLnBhZ2luYXRpb25TaXplKSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKiogQ3VycmVudCBsb2NhbGUgc2V0dGluZy4gKi9cbiAgICBnZXQgbG9jYWxlKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldChVc2VyUHJlZmVyZW5jZVZhbHVlcy5Mb2NhbGUpO1xuICAgIH1cblxuICAgIHNldCBsb2NhbGUodmFsdWU6IHN0cmluZykge1xuICAgICAgICB0aGlzLnNldChVc2VyUHJlZmVyZW5jZVZhbHVlcy5Mb2NhbGUsIHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBkZWZhdWx0IGxvY2FsZS5cbiAgICAgKiBAcmV0dXJucyBEZWZhdWx0IGxvY2FsZSBsYW5ndWFnZSBjb2RlXG4gICAgICovXG4gICAgcHVibGljIGdldERlZmF1bHRMb2NhbGUoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYXBwQ29uZmlnLmdldDxzdHJpbmc+KFVzZXJQcmVmZXJlbmNlVmFsdWVzLkxvY2FsZSkgfHwgdGhpcy50cmFuc2xhdGUuZ2V0QnJvd3NlckN1bHR1cmVMYW5nKCkgfHwgJ2VuJztcbiAgICB9XG5cbiAgICBwcml2YXRlIGdldExhbmd1YWdlQnlLZXkoa2V5OiBzdHJpbmcpOiBMYW5ndWFnZUl0ZW0ge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgdGhpcy5hcHBDb25maWdcbiAgICAgICAgICAgICAgICAuZ2V0PEFycmF5PExhbmd1YWdlSXRlbT4+KEFwcENvbmZpZ1ZhbHVlcy5BUFBfQ09ORklHX0xBTkdVQUdFU19LRVksIFs8TGFuZ3VhZ2VJdGVtPiB7IGtleTogJ2VuJyB9XSlcbiAgICAgICAgICAgICAgICAuZmluZCgobGFuZ3VhZ2UpID0+IGtleS5pbmNsdWRlcyhsYW5ndWFnZS5rZXkpKSB8fCA8TGFuZ3VhZ2VJdGVtPiB7IGtleTogJ2VuJyB9XG4gICAgICAgICk7XG4gICAgfVxufVxuIl19