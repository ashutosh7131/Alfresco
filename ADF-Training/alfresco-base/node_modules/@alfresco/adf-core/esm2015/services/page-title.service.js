import { Injectable } from '@angular/core';
import { Title } from '@angular/platform-browser';
import { AppConfigService } from '../app-config/app-config.service';
import { TranslationService } from './translation.service';
import * as i0 from "@angular/core";
import * as i1 from "@angular/platform-browser";
import * as i2 from "../app-config/app-config.service";
import * as i3 from "./translation.service";
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/platform-browser';
import * as ɵngcc2 from '../app-config/app-config.service';
import * as ɵngcc3 from './translation.service';
export class PageTitleService {
    constructor(titleService, appConfig, translationService) {
        this.titleService = titleService;
        this.appConfig = appConfig;
        this.translationService = translationService;
        this.originalTitle = '';
        this.translatedTitle = '';
        translationService.translate.onLangChange.subscribe(() => this.onLanguageChanged());
        translationService.translate.onTranslationChange.subscribe(() => this.onLanguageChanged());
    }
    setTitle(value = '') {
        this.originalTitle = value;
        this.translatedTitle = this.translationService.instant(value);
        this.updateTitle();
    }
    onLanguageChanged() {
        this.translatedTitle = this.translationService.instant(this.originalTitle);
        this.updateTitle();
    }
    updateTitle() {
        const name = this.appConfig.get('application.name') || 'Alfresco ADF Application';
        const title = this.translatedTitle ? `${this.translatedTitle} - ${name}` : `${name}`;
        this.titleService.setTitle(title);
    }
}
PageTitleService.ɵfac = function PageTitleService_Factory(t) { return new (t || PageTitleService)(ɵngcc0.ɵɵinject(ɵngcc1.Title), ɵngcc0.ɵɵinject(ɵngcc2.AppConfigService), ɵngcc0.ɵɵinject(ɵngcc3.TranslationService)); };
PageTitleService.ɵprov = i0.ɵɵdefineInjectable({ factory: function PageTitleService_Factory() { return new PageTitleService(i0.ɵɵinject(i1.Title), i0.ɵɵinject(i2.AppConfigService), i0.ɵɵinject(i3.TranslationService)); }, token: PageTitleService, providedIn: "root" });
PageTitleService.ctorParameters = () => [
    { type: Title },
    { type: AppConfigService },
    { type: TranslationService }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(PageTitleService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc1.Title }, { type: ɵngcc2.AppConfigService }, { type: ɵngcc3.TranslationService }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFnZS10aXRsZS5zZXJ2aWNlLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9ob21lL3RyYXZpcy9idWlsZC9BbGZyZXNjby9hbGZyZXNjby1uZzItY29tcG9uZW50cy9saWIvY29yZS9zZXJ2aWNlcy9wYWdlLXRpdGxlLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBaUJBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQ2xELE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGtDQUFrQyxDQUFDO0FBQ3BFLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQzNEO0FBRXNCO0FBSVY7QUFDZ0I7Ozs7O0FBSDVCLE1BQU0sT0FBTyxnQkFBZ0I7QUFDN0IsSUFJSSxZQUNZLFlBQW1CLEVBQ25CLFNBQTJCLEVBQzNCLGtCQUFzQztBQUN0RCxRQUhnQixpQkFBWSxHQUFaLFlBQVksQ0FBTztBQUFDLFFBQ3BCLGNBQVMsR0FBVCxTQUFTLENBQWtCO0FBQUMsUUFDNUIsdUJBQWtCLEdBQWxCLGtCQUFrQixDQUFvQjtBQUFDLFFBTjNDLGtCQUFhLEdBQVcsRUFBRSxDQUFDO0FBQ3ZDLFFBQVksb0JBQWUsR0FBVyxFQUFFLENBQUM7QUFDekMsUUFLUSxrQkFBa0IsQ0FBQyxTQUFTLENBQUMsWUFBWSxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsaUJBQWlCLEVBQUUsQ0FBQyxDQUFDO0FBQzVGLFFBQVEsa0JBQWtCLENBQUMsU0FBUyxDQUFDLG1CQUFtQixDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsaUJBQWlCLEVBQUUsQ0FBQyxDQUFDO0FBQ25HLElBQUksQ0FBQztBQUNMLElBS0ksUUFBUSxDQUFDLFFBQWdCLEVBQUU7QUFDL0IsUUFBUSxJQUFJLENBQUMsYUFBYSxHQUFHLEtBQUssQ0FBQztBQUNuQyxRQUFRLElBQUksQ0FBQyxlQUFlLEdBQUcsSUFBSSxDQUFDLGtCQUFrQixDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUN0RSxRQUNRLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztBQUMzQixJQUFJLENBQUM7QUFDTCxJQUNZLGlCQUFpQjtBQUM3QixRQUFRLElBQUksQ0FBQyxlQUFlLEdBQUcsSUFBSSxDQUFDLGtCQUFrQixDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7QUFDbkYsUUFBUSxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7QUFDM0IsSUFBSSxDQUFDO0FBQ0wsSUFDWSxXQUFXO0FBQ3ZCLFFBQVEsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsa0JBQWtCLENBQUMsSUFBSSwwQkFBMEIsQ0FBQztBQUMxRixRQUNRLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLGVBQWUsTUFBTSxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLEVBQUUsQ0FBQztBQUM3RixRQUFRLElBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQzFDLElBQUksQ0FBQztBQUNMOzBOQUFDO0FBQ0QsNFFBcENLO0FBQUM7RUFITCxVQUFVLFpBS0ksWUFUTixLQUFLO0FBSUYsa0JBQ1IsVUFBVSxFQUFFLDlCQUxFLFlBQ1QsZ0JBQWdCO0lBSUgsY0FDckIsbEJBTDRCLFlBQ3BCLGtCQUFrQjtBQUFHOzs7Ozs7OElBQUU7QUFBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFRpdGxlIH0gZnJvbSAnQGFuZ3VsYXIvcGxhdGZvcm0tYnJvd3Nlcic7XG5pbXBvcnQgeyBBcHBDb25maWdTZXJ2aWNlIH0gZnJvbSAnLi4vYXBwLWNvbmZpZy9hcHAtY29uZmlnLnNlcnZpY2UnO1xuaW1wb3J0IHsgVHJhbnNsYXRpb25TZXJ2aWNlIH0gZnJvbSAnLi90cmFuc2xhdGlvbi5zZXJ2aWNlJztcblxuQEluamVjdGFibGUoe1xuICAgIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBQYWdlVGl0bGVTZXJ2aWNlIHtcblxuICAgIHByaXZhdGUgb3JpZ2luYWxUaXRsZTogc3RyaW5nID0gJyc7XG4gICAgcHJpdmF0ZSB0cmFuc2xhdGVkVGl0bGU6IHN0cmluZyA9ICcnO1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHByaXZhdGUgdGl0bGVTZXJ2aWNlOiBUaXRsZSxcbiAgICAgICAgcHJpdmF0ZSBhcHBDb25maWc6IEFwcENvbmZpZ1NlcnZpY2UsXG4gICAgICAgIHByaXZhdGUgdHJhbnNsYXRpb25TZXJ2aWNlOiBUcmFuc2xhdGlvblNlcnZpY2UpIHtcbiAgICAgICAgdHJhbnNsYXRpb25TZXJ2aWNlLnRyYW5zbGF0ZS5vbkxhbmdDaGFuZ2Uuc3Vic2NyaWJlKCgpID0+IHRoaXMub25MYW5ndWFnZUNoYW5nZWQoKSk7XG4gICAgICAgIHRyYW5zbGF0aW9uU2VydmljZS50cmFuc2xhdGUub25UcmFuc2xhdGlvbkNoYW5nZS5zdWJzY3JpYmUoKCkgPT4gdGhpcy5vbkxhbmd1YWdlQ2hhbmdlZCgpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBwYWdlIHRpdGxlLlxuICAgICAqIEBwYXJhbSB2YWx1ZSBUaGUgbmV3IHRpdGxlXG4gICAgICovXG4gICAgc2V0VGl0bGUodmFsdWU6IHN0cmluZyA9ICcnKSB7XG4gICAgICAgIHRoaXMub3JpZ2luYWxUaXRsZSA9IHZhbHVlO1xuICAgICAgICB0aGlzLnRyYW5zbGF0ZWRUaXRsZSA9IHRoaXMudHJhbnNsYXRpb25TZXJ2aWNlLmluc3RhbnQodmFsdWUpO1xuXG4gICAgICAgIHRoaXMudXBkYXRlVGl0bGUoKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIG9uTGFuZ3VhZ2VDaGFuZ2VkKCkge1xuICAgICAgICB0aGlzLnRyYW5zbGF0ZWRUaXRsZSA9IHRoaXMudHJhbnNsYXRpb25TZXJ2aWNlLmluc3RhbnQodGhpcy5vcmlnaW5hbFRpdGxlKTtcbiAgICAgICAgdGhpcy51cGRhdGVUaXRsZSgpO1xuICAgIH1cblxuICAgIHByaXZhdGUgdXBkYXRlVGl0bGUoKSB7XG4gICAgICAgIGNvbnN0IG5hbWUgPSB0aGlzLmFwcENvbmZpZy5nZXQoJ2FwcGxpY2F0aW9uLm5hbWUnKSB8fCAnQWxmcmVzY28gQURGIEFwcGxpY2F0aW9uJztcblxuICAgICAgICBjb25zdCB0aXRsZSA9IHRoaXMudHJhbnNsYXRlZFRpdGxlID8gYCR7dGhpcy50cmFuc2xhdGVkVGl0bGV9IC0gJHtuYW1lfWAgOiBgJHtuYW1lfWA7XG4gICAgICAgIHRoaXMudGl0bGVTZXJ2aWNlLnNldFRpdGxlKHRpdGxlKTtcbiAgICB9XG59XG4iXX0=