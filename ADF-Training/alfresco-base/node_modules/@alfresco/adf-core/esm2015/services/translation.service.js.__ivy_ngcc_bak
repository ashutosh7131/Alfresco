import { Inject, Injectable, InjectionToken, Optional } from '@angular/core';
import { TranslateService } from '@ngx-translate/core';
import { UserPreferencesService, UserPreferenceValues } from './user-preferences.service';
import * as i0 from "@angular/core";
import * as i1 from "@ngx-translate/core";
import * as i2 from "./user-preferences.service";
export const TRANSLATION_PROVIDER = new InjectionToken('Injection token for translation providers.');
export class TranslationService {
    constructor(translate, userPreferencesService, providers) {
        this.translate = translate;
        this.customLoader = this.translate.currentLoader;
        this.defaultLang = 'en';
        translate.setDefaultLang(this.defaultLang);
        this.customLoader.setDefaultLang(this.defaultLang);
        if (providers && providers.length > 0) {
            for (const provider of providers) {
                this.addTranslationFolder(provider.name, provider.source);
            }
        }
        userPreferencesService.select(UserPreferenceValues.Locale).subscribe((locale) => {
            if (locale) {
                this.userLang = locale;
                this.use(this.userLang);
            }
        });
    }
    addTranslationFolder(name = '', path = '') {
        if (!this.customLoader.providerRegistered(name)) {
            this.customLoader.registerProvider(name, path);
            if (this.userLang) {
                this.loadTranslation(this.userLang, this.defaultLang);
            }
            else {
                this.loadTranslation(this.defaultLang);
            }
        }
    }
    loadTranslation(lang, fallback) {
        this.translate.getTranslation(lang).subscribe(() => {
            this.translate.use(lang);
            this.onTranslationChanged(lang);
        }, () => {
            if (fallback && fallback !== lang) {
                this.loadTranslation(fallback);
            }
        });
    }
    onTranslationChanged(lang) {
        this.translate.onTranslationChange.next({
            lang: lang,
            translations: this.customLoader.getFullTranslationJSON(lang)
        });
    }
    use(lang) {
        this.customLoader.init(lang);
        return this.translate.use(lang);
    }
    get(key, interpolateParams) {
        return this.translate.get(key, interpolateParams);
    }
    instant(key, interpolateParams) {
        return key ? this.translate.instant(key, interpolateParams) : '';
    }
}
TranslationService.ɵprov = i0.ɵɵdefineInjectable({ factory: function TranslationService_Factory() { return new TranslationService(i0.ɵɵinject(i1.TranslateService), i0.ɵɵinject(i2.UserPreferencesService), i0.ɵɵinject(TRANSLATION_PROVIDER, 8)); }, token: TranslationService, providedIn: "root" });
TranslationService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
TranslationService.ctorParameters = () => [
    { type: TranslateService },
    { type: UserPreferencesService },
    { type: Array, decorators: [{ type: Optional }, { type: Inject, args: [TRANSLATION_PROVIDER,] }] }
];
//# sourceMappingURL=data:application/json;base64,