import { Injectable } from '@angular/core';
import { DiscoveryApiService } from './discovery-api.service';
import { filter } from 'rxjs/operators';
import { ReplaySubject } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "./discovery-api.service";
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './discovery-api.service';
export class VersionCompatibilityService {
    constructor(discoveryApiService) {
        this.discoveryApiService = discoveryApiService;
        this.acsVersionInitialized$ = new ReplaySubject();
        this.discoveryApiService.ecmProductInfo$
            .pipe(filter(acsInfo => !!acsInfo))
            .subscribe((acsInfo) => this.initializeAcsVersion(acsInfo.version));
    }
    initializeAcsVersion(acsVersion) {
        this.acsVersion = acsVersion;
        this.acsVersionInitialized$.next();
    }
    getAcsVersion() {
        return this.acsVersion;
    }
    isVersionSupported(requiredVersion) {
        const parsedRequiredVersion = this.parseVersion(requiredVersion);
        const currentVersion = this.getAcsVersion();
        let versionSupported = false;
        if (currentVersion) {
            if (+currentVersion.major > +parsedRequiredVersion.major) {
                versionSupported = true;
            }
            else if (currentVersion.major === parsedRequiredVersion.major &&
                +currentVersion.minor > +parsedRequiredVersion.minor) {
                versionSupported = true;
            }
            else if (currentVersion.major === parsedRequiredVersion.major &&
                currentVersion.minor === parsedRequiredVersion.minor &&
                +currentVersion.patch >= +parsedRequiredVersion.patch) {
                versionSupported = true;
            }
        }
        return versionSupported;
    }
    parseVersion(version) {
        const major = version.split('.')[0];
        const minor = version.split('.')[1] || '0';
        const patch = version.split('.')[2] || '0';
        return {
            major: major,
            minor: minor,
            patch: patch
        };
    }
}
VersionCompatibilityService.ɵfac = function VersionCompatibilityService_Factory(t) { return new (t || VersionCompatibilityService)(ɵngcc0.ɵɵinject(ɵngcc1.DiscoveryApiService)); };
VersionCompatibilityService.ɵprov = i0.ɵɵdefineInjectable({ factory: function VersionCompatibilityService_Factory() { return new VersionCompatibilityService(i0.ɵɵinject(i1.DiscoveryApiService)); }, token: VersionCompatibilityService, providedIn: "root" });
VersionCompatibilityService.ctorParameters = () => [
    { type: DiscoveryApiService }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(VersionCompatibilityService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc1.DiscoveryApiService }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmVyc2lvbi1jb21wYXRpYmlsaXR5LnNlcnZpY2UuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL2hvbWUvdHJhdmlzL2J1aWxkL0FsZnJlc2NvL2FsZnJlc2NvLW5nMi1jb21wb25lbnRzL2xpYi9jb3JlL3NlcnZpY2VzL3ZlcnNpb24tY29tcGF0aWJpbGl0eS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWlCQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBRTlELE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUN4QyxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ3JDO0FBRXNCOzs7QUFFdEIsTUFBTSxPQUFPLDJCQUEyQjtBQUN4QyxJQUlJLFlBQW9CLG1CQUF3QztBQUNoRSxRQUR3Qix3QkFBbUIsR0FBbkIsbUJBQW1CLENBQXFCO0FBQUMsUUFGN0QsMkJBQXNCLEdBQUcsSUFBSSxhQUFhLEVBQUUsQ0FBQztBQUNqRCxRQUVRLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxlQUFlO0FBQ2hELGFBQWEsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUMvQyxhQUFhLFNBQVMsQ0FBQyxDQUFDLE9BQStCLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztBQUN4RyxJQUFJLENBQUM7QUFDTCxJQUNZLG9CQUFvQixDQUFDLFVBQXdCO0FBQ3pELFFBQVEsSUFBSSxDQUFDLFVBQVUsR0FBRyxVQUFVLENBQUM7QUFDckMsUUFBUSxJQUFJLENBQUMsc0JBQXNCLENBQUMsSUFBSSxFQUFFLENBQUM7QUFDM0MsSUFBSSxDQUFDO0FBQ0wsSUFDSSxhQUFhO0FBQUssUUFDZCxPQUFPLElBQUksQ0FBQyxVQUFVLENBQUM7QUFDL0IsSUFBSSxDQUFDO0FBQ0wsSUFDSSxrQkFBa0IsQ0FBQyxlQUF1QjtBQUFJLFFBQzFDLE1BQU0scUJBQXFCLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxlQUFlLENBQUMsQ0FBQztBQUN6RSxRQUFRLE1BQU0sY0FBYyxHQUFHLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztBQUNwRCxRQUNRLElBQUksZ0JBQWdCLEdBQUcsS0FBSyxDQUFDO0FBQ3JDLFFBQ1EsSUFBSSxjQUFjLEVBQUU7QUFDNUIsWUFBWSxJQUFJLENBQUMsY0FBYyxDQUFDLEtBQUssR0FBRyxDQUFDLHFCQUFxQixDQUFDLEtBQUssRUFBRTtBQUN0RSxnQkFBZ0IsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDO0FBQ3hDLGFBQWE7QUFBQyxpQkFBSyxJQUFJLGNBQWMsQ0FBQyxLQUFLLEtBQUsscUJBQXFCLENBQUMsS0FBSztBQUMzRSxnQkFBZ0IsQ0FBQyxjQUFjLENBQUMsS0FBSyxHQUFHLENBQUMscUJBQXFCLENBQUMsS0FBSyxFQUFFO0FBQ3RFLGdCQUFnQixnQkFBZ0IsR0FBRyxJQUFJLENBQUM7QUFDeEMsYUFBYTtBQUFDLGlCQUFLLElBQUksY0FBYyxDQUFDLEtBQUssS0FBSyxxQkFBcUIsQ0FBQyxLQUFLO0FBQzNFLGdCQUFnQixjQUFjLENBQUMsS0FBSyxLQUFLLHFCQUFxQixDQUFDLEtBQUs7QUFDcEUsZ0JBQWdCLENBQUMsY0FBYyxDQUFDLEtBQUssSUFBSSxDQUFDLHFCQUFxQixDQUFDLEtBQUssRUFBRTtBQUN2RSxnQkFBZ0IsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDO0FBQ3hDLGFBQWE7QUFDYixTQUFTO0FBQ1QsUUFDUSxPQUFPLGdCQUFnQixDQUFDO0FBQ2hDLElBQUksQ0FBQztBQUNMLElBQ1ksWUFBWSxDQUFDLE9BQWU7QUFBSSxRQUNwQyxNQUFNLEtBQUssR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQzVDLFFBQVEsTUFBTSxLQUFLLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxHQUFHLENBQUM7QUFDbkQsUUFBUSxNQUFNLEtBQUssR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLEdBQUcsQ0FBQztBQUNuRCxRQUNRLE9BQU87QUFDZixZQUFZLEtBQUssRUFBRSxLQUFLO0FBQ3hCLFlBQVksS0FBSyxFQUFFLEtBQUs7QUFDeEIsWUFBWSxLQUFLLEVBQUUsS0FBSztBQUN4QixTQUF5QixDQUFDO0FBQzFCLElBQUksQ0FBQztBQUNMO21MQUFDO0FBQ0QsZ1FBdERLO0FBQUM7RUFITCxVQUFVLFNBQUMsckJBSUksWUFUUCxtQkFBbUI7QUFBRztFQU0zQixVQUFVLEVBQUUsTUFBTSxjQUNyQjs7Ozs7b0ZBUGdDO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBEaXNjb3ZlcnlBcGlTZXJ2aWNlIH0gZnJvbSAnLi9kaXNjb3ZlcnktYXBpLnNlcnZpY2UnO1xuaW1wb3J0IHsgVmVyc2lvbk1vZGVsLCBFY21Qcm9kdWN0VmVyc2lvbk1vZGVsIH0gZnJvbSAnLi4vbW9kZWxzL3Byb2R1Y3QtdmVyc2lvbi5tb2RlbCc7XG5pbXBvcnQgeyBmaWx0ZXIgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBSZXBsYXlTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5cbkBJbmplY3RhYmxlKHtcbiAgICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgVmVyc2lvbkNvbXBhdGliaWxpdHlTZXJ2aWNlIHtcbiAgICBwcml2YXRlIGFjc1ZlcnNpb246IFZlcnNpb25Nb2RlbDtcblxuICAgIGFjc1ZlcnNpb25Jbml0aWFsaXplZCQgPSBuZXcgUmVwbGF5U3ViamVjdCgpO1xuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBkaXNjb3ZlcnlBcGlTZXJ2aWNlOiBEaXNjb3ZlcnlBcGlTZXJ2aWNlKSB7XG4gICAgICAgIHRoaXMuZGlzY292ZXJ5QXBpU2VydmljZS5lY21Qcm9kdWN0SW5mbyRcbiAgICAgICAgICAgIC5waXBlKGZpbHRlcihhY3NJbmZvID0+ICEhYWNzSW5mbykpXG4gICAgICAgICAgICAuc3Vic2NyaWJlKChhY3NJbmZvOiBFY21Qcm9kdWN0VmVyc2lvbk1vZGVsKSA9PiB0aGlzLmluaXRpYWxpemVBY3NWZXJzaW9uKGFjc0luZm8udmVyc2lvbikpO1xuICAgIH1cblxuICAgIHByaXZhdGUgaW5pdGlhbGl6ZUFjc1ZlcnNpb24oYWNzVmVyc2lvbjogVmVyc2lvbk1vZGVsKSB7XG4gICAgICAgIHRoaXMuYWNzVmVyc2lvbiA9IGFjc1ZlcnNpb247XG4gICAgICAgIHRoaXMuYWNzVmVyc2lvbkluaXRpYWxpemVkJC5uZXh0KCk7XG4gICAgfVxuXG4gICAgZ2V0QWNzVmVyc2lvbigpOiBWZXJzaW9uTW9kZWwge1xuICAgICAgICByZXR1cm4gdGhpcy5hY3NWZXJzaW9uO1xuICAgIH1cblxuICAgIGlzVmVyc2lvblN1cHBvcnRlZChyZXF1aXJlZFZlcnNpb246IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgICAgICBjb25zdCBwYXJzZWRSZXF1aXJlZFZlcnNpb24gPSB0aGlzLnBhcnNlVmVyc2lvbihyZXF1aXJlZFZlcnNpb24pO1xuICAgICAgICBjb25zdCBjdXJyZW50VmVyc2lvbiA9IHRoaXMuZ2V0QWNzVmVyc2lvbigpO1xuXG4gICAgICAgIGxldCB2ZXJzaW9uU3VwcG9ydGVkID0gZmFsc2U7XG5cbiAgICAgICAgaWYgKGN1cnJlbnRWZXJzaW9uKSB7XG4gICAgICAgICAgICBpZiAoK2N1cnJlbnRWZXJzaW9uLm1ham9yID4gK3BhcnNlZFJlcXVpcmVkVmVyc2lvbi5tYWpvcikge1xuICAgICAgICAgICAgICAgIHZlcnNpb25TdXBwb3J0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChjdXJyZW50VmVyc2lvbi5tYWpvciA9PT0gcGFyc2VkUmVxdWlyZWRWZXJzaW9uLm1ham9yICYmXG4gICAgICAgICAgICAgICAgK2N1cnJlbnRWZXJzaW9uLm1pbm9yID4gK3BhcnNlZFJlcXVpcmVkVmVyc2lvbi5taW5vcikge1xuICAgICAgICAgICAgICAgIHZlcnNpb25TdXBwb3J0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChjdXJyZW50VmVyc2lvbi5tYWpvciA9PT0gcGFyc2VkUmVxdWlyZWRWZXJzaW9uLm1ham9yICYmXG4gICAgICAgICAgICAgICAgY3VycmVudFZlcnNpb24ubWlub3IgPT09IHBhcnNlZFJlcXVpcmVkVmVyc2lvbi5taW5vciAmJlxuICAgICAgICAgICAgICAgICtjdXJyZW50VmVyc2lvbi5wYXRjaCA+PSArcGFyc2VkUmVxdWlyZWRWZXJzaW9uLnBhdGNoKSB7XG4gICAgICAgICAgICAgICAgdmVyc2lvblN1cHBvcnRlZCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdmVyc2lvblN1cHBvcnRlZDtcbiAgICB9XG5cbiAgICBwcml2YXRlIHBhcnNlVmVyc2lvbih2ZXJzaW9uOiBzdHJpbmcpOiBWZXJzaW9uTW9kZWwge1xuICAgICAgICBjb25zdCBtYWpvciA9IHZlcnNpb24uc3BsaXQoJy4nKVswXTtcbiAgICAgICAgY29uc3QgbWlub3IgPSB2ZXJzaW9uLnNwbGl0KCcuJylbMV0gfHwgJzAnO1xuICAgICAgICBjb25zdCBwYXRjaCA9IHZlcnNpb24uc3BsaXQoJy4nKVsyXSB8fCAnMCc7XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG1ham9yOiBtYWpvcixcbiAgICAgICAgICAgIG1pbm9yOiBtaW5vcixcbiAgICAgICAgICAgIHBhdGNoOiBwYXRjaFxuICAgICAgICB9IGFzIFZlcnNpb25Nb2RlbDtcbiAgICB9XG59XG4iXX0=