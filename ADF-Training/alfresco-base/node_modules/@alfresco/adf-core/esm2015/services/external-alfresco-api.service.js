import { Injectable } from '@angular/core';
import { AlfrescoApiCompatibility, NodesApi } from '@alfresco/js-api';
import { ReplaySubject, Subject } from 'rxjs';
import * as i0 from "@angular/core";
import * as ɵngcc0 from '@angular/core';
export class ExternalAlfrescoApiService {
    constructor() {
        this.nodeUpdated = new Subject();
        this.alfrescoApiInitialized = new ReplaySubject(1);
    }
    getInstance() {
        return this.alfrescoApi;
    }
    get contentApi() {
        return this.getInstance().content;
    }
    get nodesApi() {
        var _a;
        this._nodesApi = (_a = this._nodesApi) !== null && _a !== void 0 ? _a : new NodesApi(this.getInstance());
        return this._nodesApi;
    }
    init(ecmHost, contextRoot) {
        const domainPrefix = this.createPrefixFromHost(ecmHost);
        const config = {
            provider: 'ECM',
            hostEcm: ecmHost,
            authType: 'BASIC',
            contextRoot: contextRoot,
            domainPrefix
        };
        this.initAlfrescoApi(config);
        this.alfrescoApiInitialized.next(true);
    }
    initAlfrescoApi(config) {
        if (this.alfrescoApi) {
            this.alfrescoApi.configureJsApi(config);
        }
        else {
            this.alfrescoApi = new AlfrescoApiCompatibility(config);
        }
    }
    createPrefixFromHost(url) {
        const match = url.match(/:\/\/(www[0-9]?\.)?(.[^/:]+)/i);
        let result = null;
        if (match != null && match.length > 2 && typeof match[2] === 'string' && match[2].length > 0) {
            result = match[2];
        }
        return result;
    }
}
ExternalAlfrescoApiService.ɵfac = function ExternalAlfrescoApiService_Factory(t) { return new (t || ExternalAlfrescoApiService)(); };
ExternalAlfrescoApiService.ɵprov = i0.ɵɵdefineInjectable({ factory: function ExternalAlfrescoApiService_Factory() { return new ExternalAlfrescoApiService(); }, token: ExternalAlfrescoApiService, providedIn: "root" });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExternalAlfrescoApiService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return []; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXh0ZXJuYWwtYWxmcmVzY28tYXBpLnNlcnZpY2UuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL2hvbWUvdHJhdmlzL2J1aWxkL0FsZnJlc2NvL2FsZnJlc2NvLW5nMi1jb21wb25lbnRzL2xpYi9jb3JlL3NlcnZpY2VzL2V4dGVybmFsLWFsZnJlc2NvLWFwaS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWlCQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFDSCx3QkFBd0IsRUFFbEIsUUFBUSxFQUNqQixNQUFNLGtCQUFrQixDQUFDO0FBQzFCLE9BQU8sRUFBRSxhQUFhLEVBQUUsT0FBTyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQzlDOztBQUlBLE1BQU0sT0FBTywwQkFBMEI7QUFDdkMsSUFKQTtBQUNFLFFBT0UsZ0JBQVcsR0FBRyxJQUFJLE9BQU8sRUFBUSxDQUFDO0FBQ3RDLFFBQ0ksMkJBQXNCLEdBQTJCLElBQUksYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQzFFLEtBZ0RDO0FBQ0QsSUE3Q0ksV0FBVztBQUFLLFFBQ1osT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDO0FBQ2hDLElBQUksQ0FBQztBQUNMLElBQ0ksSUFBSSxVQUFVO0FBQUssUUFDZixPQUFPLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQyxPQUFPLENBQUM7QUFDMUMsSUFBSSxDQUFDO0FBQ0wsSUFDSSxJQUFJLFFBQVE7QUFBSztBQUNmLFFBQUUsSUFBSSxDQUFDLFNBQVMsU0FBRyxJQUFJLENBQUMsU0FBUyxtQ0FBSSxJQUFJLFFBQVEsQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQztBQUM1RSxRQUFRLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQztBQUM5QixJQUFJLENBQUM7QUFDTCxJQUNJLElBQUksQ0FBQyxPQUFlLEVBQUUsV0FBbUI7QUFDN0MsUUFDUSxNQUFNLFlBQVksR0FBRyxJQUFJLENBQUMsb0JBQW9CLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDaEUsUUFDUSxNQUFNLE1BQU0sR0FBRztBQUN2QixZQUFZLFFBQVEsRUFBRSxLQUFLO0FBQzNCLFlBQVksT0FBTyxFQUFFLE9BQU87QUFDNUIsWUFBWSxRQUFRLEVBQUUsT0FBTztBQUM3QixZQUFZLFdBQVcsRUFBRSxXQUFXO0FBQ3BDLFlBQVksWUFBWTtBQUN4QixTQUFTLENBQUM7QUFDVixRQUFRLElBQUksQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDckMsUUFBUSxJQUFJLENBQUMsc0JBQXNCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQy9DLElBQUksQ0FBQztBQUNMLElBQ2MsZUFBZSxDQUFDLE1BQU07QUFDcEMsUUFBUSxJQUFJLElBQUksQ0FBQyxXQUFXLEVBQUU7QUFDOUIsWUFBWSxJQUFJLENBQUMsV0FBVyxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUNwRCxTQUFTO0FBQUMsYUFBSztBQUNmLFlBQVksSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLHdCQUF3QixDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQ3BFLFNBQVM7QUFDVCxJQUFJLENBQUM7QUFDTCxJQUNZLG9CQUFvQixDQUFDLEdBQVc7QUFBSSxRQUN4QyxNQUFNLEtBQUssR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFDLCtCQUErQixDQUFDLENBQUM7QUFDakUsUUFBUSxJQUFJLE1BQU0sR0FBRyxJQUFJLENBQUM7QUFDMUIsUUFBUSxJQUFJLEtBQUssSUFBSSxJQUFJLElBQUksS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxLQUFLLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUSxJQUFJLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO0FBQ3RHLFlBQVksTUFBTSxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUM5QixTQUFTO0FBQ1QsUUFBUSxPQUFPLE1BQU0sQ0FBQztBQUN0QixJQUFJLENBQUM7QUFDTDtxSUFBQztBQUNEO3NEQTVEQyxVQUFVLFNBQUM7TUFDUixVQUFVLEVBQUUsTUFBTTtZQUNyQjs7O2dEQUNJO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1xuICAgIEFsZnJlc2NvQXBpQ29tcGF0aWJpbGl0eSxcbiAgICBDb250ZW50QXBpLFxuICAgIE5vZGUsIE5vZGVzQXBpXG59IGZyb20gJ0BhbGZyZXNjby9qcy1hcGknO1xuaW1wb3J0IHsgUmVwbGF5U3ViamVjdCwgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuXG5ASW5qZWN0YWJsZSh7XG4gICAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIEV4dGVybmFsQWxmcmVzY29BcGlTZXJ2aWNlIHtcblxuICAgIC8qKlxuICAgICAqIFB1Ymxpc2gvc3Vic2NyaWJlIHRvIGV2ZW50cyByZWxhdGVkIHRvIG5vZGUgdXBkYXRlcy5cbiAgICAgKi9cbiAgICBub2RlVXBkYXRlZCA9IG5ldyBTdWJqZWN0PE5vZGU+KCk7XG5cbiAgICBhbGZyZXNjb0FwaUluaXRpYWxpemVkOiBSZXBsYXlTdWJqZWN0PGJvb2xlYW4+ID0gbmV3IFJlcGxheVN1YmplY3QoMSk7XG5cbiAgICBwcm90ZWN0ZWQgYWxmcmVzY29BcGk6IEFsZnJlc2NvQXBpQ29tcGF0aWJpbGl0eTtcbiAgICBfbm9kZXNBcGk6IE5vZGVzQXBpO1xuXG4gICAgZ2V0SW5zdGFuY2UoKTogQWxmcmVzY29BcGlDb21wYXRpYmlsaXR5IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYWxmcmVzY29BcGk7XG4gICAgfVxuXG4gICAgZ2V0IGNvbnRlbnRBcGkoKTogQ29udGVudEFwaSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldEluc3RhbmNlKCkuY29udGVudDtcbiAgICB9XG5cbiAgICBnZXQgbm9kZXNBcGkoKTogTm9kZXNBcGkge1xuICAgICAgICB0aGlzLl9ub2Rlc0FwaSA9IHRoaXMuX25vZGVzQXBpID8/IG5ldyBOb2Rlc0FwaSh0aGlzLmdldEluc3RhbmNlKCkpO1xuICAgICAgICByZXR1cm4gdGhpcy5fbm9kZXNBcGk7XG4gICAgfVxuXG4gICAgaW5pdChlY21Ib3N0OiBzdHJpbmcsIGNvbnRleHRSb290OiBzdHJpbmcpIHtcblxuICAgICAgICBjb25zdCBkb21haW5QcmVmaXggPSB0aGlzLmNyZWF0ZVByZWZpeEZyb21Ib3N0KGVjbUhvc3QpO1xuXG4gICAgICAgIGNvbnN0IGNvbmZpZyA9IHtcbiAgICAgICAgICAgIHByb3ZpZGVyOiAnRUNNJyxcbiAgICAgICAgICAgIGhvc3RFY206IGVjbUhvc3QsXG4gICAgICAgICAgICBhdXRoVHlwZTogJ0JBU0lDJyxcbiAgICAgICAgICAgIGNvbnRleHRSb290OiBjb250ZXh0Um9vdCxcbiAgICAgICAgICAgIGRvbWFpblByZWZpeFxuICAgICAgICB9O1xuICAgICAgICB0aGlzLmluaXRBbGZyZXNjb0FwaShjb25maWcpO1xuICAgICAgICB0aGlzLmFsZnJlc2NvQXBpSW5pdGlhbGl6ZWQubmV4dCh0cnVlKTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgaW5pdEFsZnJlc2NvQXBpKGNvbmZpZykge1xuICAgICAgICBpZiAodGhpcy5hbGZyZXNjb0FwaSkge1xuICAgICAgICAgICAgdGhpcy5hbGZyZXNjb0FwaS5jb25maWd1cmVKc0FwaShjb25maWcpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5hbGZyZXNjb0FwaSA9IG5ldyBBbGZyZXNjb0FwaUNvbXBhdGliaWxpdHkoY29uZmlnKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgY3JlYXRlUHJlZml4RnJvbUhvc3QodXJsOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgICAgICBjb25zdCBtYXRjaCA9IHVybC5tYXRjaCgvOlxcL1xcLyh3d3dbMC05XT9cXC4pPyguW14vOl0rKS9pKTtcbiAgICAgICAgbGV0IHJlc3VsdCA9IG51bGw7XG4gICAgICAgIGlmIChtYXRjaCAhPSBudWxsICYmIG1hdGNoLmxlbmd0aCA+IDIgJiYgdHlwZW9mIG1hdGNoWzJdID09PSAnc3RyaW5nJyAmJiBtYXRjaFsyXS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICByZXN1bHQgPSBtYXRjaFsyXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbn1cbiJdfQ==