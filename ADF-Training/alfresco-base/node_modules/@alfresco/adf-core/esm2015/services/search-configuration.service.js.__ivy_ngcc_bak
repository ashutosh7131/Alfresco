import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
export class SearchConfigurationService {
    constructor() {
    }
    generateQueryBody(searchTerm, maxResults, skipCount) {
        const defaultQueryBody = {
            query: {
                query: searchTerm ? `'${searchTerm}*' OR name:'${searchTerm}*'` : searchTerm
            },
            include: ['path', 'allowableOperations'],
            paging: {
                maxItems: maxResults,
                skipCount: skipCount
            },
            filterQueries: [
                { query: "TYPE:'cm:folder' OR TYPE:'cm:content'" },
                { query: 'NOT cm:creator:System' }
            ]
        };
        return defaultQueryBody;
    }
}
SearchConfigurationService.ɵprov = i0.ɵɵdefineInjectable({ factory: function SearchConfigurationService_Factory() { return new SearchConfigurationService(); }, token: SearchConfigurationService, providedIn: "root" });
SearchConfigurationService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
SearchConfigurationService.ctorParameters = () => [];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VhcmNoLWNvbmZpZ3VyYXRpb24uc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIvaG9tZS90cmF2aXMvYnVpbGQvQWxmcmVzY28vYWxmcmVzY28tbmcyLWNvbXBvbmVudHMvbGliL2NvcmUvIiwic291cmNlcyI6WyJzZXJ2aWNlcy9zZWFyY2gtY29uZmlndXJhdGlvbi5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWlCQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDOztBQU8zQyxNQUFNLE9BQU8sMEJBQTBCO0lBRW5DO0lBQ0EsQ0FBQztJQVNNLGlCQUFpQixDQUFDLFVBQWtCLEVBQUUsVUFBa0IsRUFBRSxTQUFpQjtRQUM5RSxNQUFNLGdCQUFnQixHQUFjO1lBQ2hDLEtBQUssRUFBRTtnQkFDSCxLQUFLLEVBQUUsVUFBVSxDQUFDLENBQUMsQ0FBQyxJQUFJLFVBQVUsZUFBZSxVQUFVLElBQUksQ0FBQyxDQUFDLENBQUMsVUFBVTthQUMvRTtZQUNELE9BQU8sRUFBRSxDQUFDLE1BQU0sRUFBRSxxQkFBcUIsQ0FBQztZQUN4QyxNQUFNLEVBQUU7Z0JBQ0osUUFBUSxFQUFFLFVBQVU7Z0JBQ3BCLFNBQVMsRUFBRSxTQUFTO2FBQ3ZCO1lBQ0QsYUFBYSxFQUFFO2dCQUNYLEVBQUUsS0FBSyxFQUFFLHVDQUF1QyxFQUFFO2dCQUNsRCxFQUFFLEtBQUssRUFBRSx1QkFBdUIsRUFBRTthQUFDO1NBQzFDLENBQUM7UUFFRixPQUFPLGdCQUFnQixDQUFDO0lBQzVCLENBQUM7Ozs7WUEvQkosVUFBVSxTQUFDO2dCQUNSLFVBQVUsRUFBRSxNQUFNO2FBQ3JCIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUXVlcnlCb2R5IH0gZnJvbSAnQGFsZnJlc2NvL2pzLWFwaSc7XG5pbXBvcnQgeyBTZWFyY2hDb25maWd1cmF0aW9uSW50ZXJmYWNlIH0gZnJvbSAnLi4vaW50ZXJmYWNlL3NlYXJjaC1jb25maWd1cmF0aW9uLmludGVyZmFjZSc7XG5cbkBJbmplY3RhYmxlKHtcbiAgICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgU2VhcmNoQ29uZmlndXJhdGlvblNlcnZpY2UgaW1wbGVtZW50cyBTZWFyY2hDb25maWd1cmF0aW9uSW50ZXJmYWNlIHtcblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdlbmVyYXRlcyBhIFF1ZXJ5Qm9keSBvYmplY3Qgd2l0aCBjdXN0b20gc2VhcmNoIHBhcmFtZXRlcnMuXG4gICAgICogQHBhcmFtIHNlYXJjaFRlcm0gVGVybSB0ZXh0IHRvIHNlYXJjaCBmb3JcbiAgICAgKiBAcGFyYW0gbWF4UmVzdWx0cyBNYXhpbXVtIG51bWJlciBvZiBzZWFyY2ggcmVzdWx0cyB0byBzaG93IGluIGEgcGFnZVxuICAgICAqIEBwYXJhbSBza2lwQ291bnQgVGhlIG9mZnNldCBvZiB0aGUgc3RhcnQgb2YgdGhlIHBhZ2Ugd2l0aGluIHRoZSByZXN1bHRzIGxpc3RcbiAgICAgKiBAcmV0dXJucyBRdWVyeSBib2R5IGRlZmluZWQgYnkgdGhlIHBhcmFtZXRlcnNcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2VuZXJhdGVRdWVyeUJvZHkoc2VhcmNoVGVybTogc3RyaW5nLCBtYXhSZXN1bHRzOiBudW1iZXIsIHNraXBDb3VudDogbnVtYmVyKTogUXVlcnlCb2R5IHtcbiAgICAgICAgY29uc3QgZGVmYXVsdFF1ZXJ5Qm9keTogUXVlcnlCb2R5ID0ge1xuICAgICAgICAgICAgcXVlcnk6IHtcbiAgICAgICAgICAgICAgICBxdWVyeTogc2VhcmNoVGVybSA/IGAnJHtzZWFyY2hUZXJtfSonIE9SIG5hbWU6JyR7c2VhcmNoVGVybX0qJ2AgOiBzZWFyY2hUZXJtXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgaW5jbHVkZTogWydwYXRoJywgJ2FsbG93YWJsZU9wZXJhdGlvbnMnXSxcbiAgICAgICAgICAgIHBhZ2luZzoge1xuICAgICAgICAgICAgICAgIG1heEl0ZW1zOiBtYXhSZXN1bHRzLFxuICAgICAgICAgICAgICAgIHNraXBDb3VudDogc2tpcENvdW50XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZmlsdGVyUXVlcmllczogW1xuICAgICAgICAgICAgICAgIHsgcXVlcnk6IFwiVFlQRTonY206Zm9sZGVyJyBPUiBUWVBFOidjbTpjb250ZW50J1wiIH0sXG4gICAgICAgICAgICAgICAgeyBxdWVyeTogJ05PVCBjbTpjcmVhdG9yOlN5c3RlbScgfV1cbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gZGVmYXVsdFF1ZXJ5Qm9keTtcbiAgICB9XG59XG4iXX0=