import { Injectable } from '@angular/core';
import { from, throwError, Subject } from 'rxjs';
import { BpmProductVersionModel, EcmProductVersionModel } from '../models/product-version.model';
import { AlfrescoApiService } from './alfresco-api.service';
import { catchError, map, switchMap, filter, take } from 'rxjs/operators';
import { AboutApi, DiscoveryApi, SystemPropertiesApi } from '@alfresco/js-api';
import { AuthenticationService } from './authentication.service';
import * as i0 from "@angular/core";
import * as i1 from "./alfresco-api.service";
import * as i2 from "./authentication.service";
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './alfresco-api.service';
import * as ɵngcc2 from './authentication.service';
export class DiscoveryApiService {
    constructor(apiService, authenticationService) {
        this.apiService = apiService;
        this.authenticationService = authenticationService;
        this.ecmProductInfo$ = new Subject();
        this.authenticationService.onLogin
            .pipe(filter(() => { var _a; return (_a = this.apiService.getInstance()) === null || _a === void 0 ? void 0 : _a.isEcmLoggedIn(); }), take(1), switchMap(() => this.getEcmProductInfo()))
            .subscribe((info) => this.ecmProductInfo$.next(info));
    }
    getEcmProductInfo() {
        const discoveryApi = new DiscoveryApi(this.apiService.getInstance());
        return from(discoveryApi.getRepositoryInformation())
            .pipe(map((res) => new EcmProductVersionModel(res)), catchError((err) => throwError(err)));
    }
    getBpmProductInfo() {
        const aboutApi = new AboutApi(this.apiService.getInstance());
        return from(aboutApi.getAppVersion())
            .pipe(map((res) => new BpmProductVersionModel(res)), catchError((err) => throwError(err)));
    }
    getBPMSystemProperties() {
        const systemPropertiesApi = new SystemPropertiesApi(this.apiService.getInstance());
        return from(systemPropertiesApi.getProperties())
            .pipe(map((res) => {
            if ('string' === typeof (res)) {
                throw new Error('Not valid response');
            }
            return res;
        }), catchError((err) => throwError(err.error)));
    }
}
DiscoveryApiService.ɵfac = function DiscoveryApiService_Factory(t) { return new (t || DiscoveryApiService)(ɵngcc0.ɵɵinject(ɵngcc1.AlfrescoApiService), ɵngcc0.ɵɵinject(ɵngcc2.AuthenticationService)); };
DiscoveryApiService.ɵprov = i0.ɵɵdefineInjectable({ factory: function DiscoveryApiService_Factory() { return new DiscoveryApiService(i0.ɵɵinject(i1.AlfrescoApiService), i0.ɵɵinject(i2.AuthenticationService)); }, token: DiscoveryApiService, providedIn: "root" });
DiscoveryApiService.ctorParameters = () => [
    { type: AlfrescoApiService },
    { type: AuthenticationService }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DiscoveryApiService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc1.AlfrescoApiService }, { type: ɵngcc2.AuthenticationService }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlzY292ZXJ5LWFwaS5zZXJ2aWNlLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9ob21lL3RyYXZpcy9idWlsZC9BbGZyZXNjby9hbGZyZXNjby1uZzItY29tcG9uZW50cy9saWIvY29yZS9zZXJ2aWNlcy9kaXNjb3ZlcnktYXBpLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBaUJBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLElBQUksRUFBYyxVQUFVLEVBQUUsT0FBTyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQzdELE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxzQkFBc0IsRUFBRSxNQUFNLGlDQUFpQyxDQUFDO0FBQ2pHLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQzVELE9BQU8sRUFBRSxVQUFVLEVBQUUsR0FBRyxFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDMUUsT0FBTyxFQUFFLFFBQVEsRUFBRSxZQUFZLEVBQUUsbUJBQW1CLEVBQWtDLE1BQU0sa0JBQWtCLENBQUM7QUFDL0csT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDakU7QUFFc0I7QUFJaEI7Ozs7QUFGTixNQUFNLE9BQU8sbUJBQW1CO0FBQ2hDLElBTUksWUFDWSxVQUE4QixFQUM5QixxQkFBNEM7QUFDNUQsUUFGZ0IsZUFBVSxHQUFWLFVBQVUsQ0FBb0I7QUFBQyxRQUMvQiwwQkFBcUIsR0FBckIscUJBQXFCLENBQXVCO0FBQUMsUUFKekQsb0JBQWUsR0FBRyxJQUFJLE9BQU8sRUFBMEIsQ0FBQztBQUM1RCxRQUtRLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxPQUFPO0FBQzFDLGFBQWEsSUFBSSxDQUNELE1BQU0sQ0FBQyxHQUFHLEVBQUUsd0JBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxXQUFXLEVBQUUsMENBQUUsYUFBYSxLQUFFLENBQUMsRUFDNUQsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUNQLFNBQVMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsaUJBQWlCLEVBQUUsQ0FBQyxDQUM1QztBQUNiLGFBQWEsU0FBUyxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0FBQ2xFLElBQUksQ0FBQztBQUNMLElBS1csaUJBQWlCO0FBQUssUUFDekIsTUFBTSxZQUFZLEdBQUcsSUFBSSxZQUFZLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDO0FBQzdFLFFBQ1EsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDLHdCQUF3QixFQUFFLENBQUM7QUFDNUQsYUFBYSxJQUFJLENBQ0QsR0FBRyxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxJQUFJLHNCQUFzQixDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQzdDLFVBQVUsQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQ3ZDLENBQUM7QUFDZCxJQUFJLENBQUM7QUFDTCxJQUtXLGlCQUFpQjtBQUFLLFFBQ3pCLE1BQU0sUUFBUSxHQUFHLElBQUksUUFBUSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQztBQUNyRSxRQUNRLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxhQUFhLEVBQUUsQ0FBQztBQUM3QyxhQUFhLElBQUksQ0FDRCxHQUFHLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLElBQUksc0JBQXNCLENBQUMsR0FBRyxDQUFDLENBQUMsRUFDN0MsVUFBVSxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FDdkMsQ0FBQztBQUNkLElBQUksQ0FBQztBQUNMLElBQ1csc0JBQXNCO0FBQUssUUFDOUIsTUFBTSxtQkFBbUIsR0FBRyxJQUFJLG1CQUFtQixDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQztBQUMzRixRQUNRLE9BQU8sSUFBSSxDQUFDLG1CQUFtQixDQUFDLGFBQWEsRUFBRSxDQUFDO0FBQ3hELGFBQWEsSUFBSSxDQUNELEdBQUcsQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFO0FBQzVCLFlBQW9CLElBQUksUUFBUSxLQUFLLE9BQU8sQ0FBQyxHQUFHLENBQUMsRUFBRTtBQUNuRCxnQkFBd0IsTUFBTSxJQUFJLEtBQUssQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO0FBQzlELGFBQXFCO0FBQ3JCLFlBQW9CLE9BQU8sR0FBRyxDQUFDO0FBQy9CLFFBQWdCLENBQUMsQ0FBQyxFQUNGLFVBQVUsQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUM3QyxDQUFDO0FBQ2QsSUFBSSxDQUFDO0FBQ0w7eU1BQUM7QUFDRCxzUUEvREs7QUFBQztFQUhMLFVBQVUsU0FBQyxyQkFNTCxZQVhFLGtCQUFrQjtLQU12QixVQUFVLEVBQUUsTUFBTSx2QkFOUyxZQUd0QixxQkFBcUI7Q0FJN0IsREFKZ0M7Ozs7OzsySEFBRTtBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgZnJvbSwgT2JzZXJ2YWJsZSwgdGhyb3dFcnJvciwgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgQnBtUHJvZHVjdFZlcnNpb25Nb2RlbCwgRWNtUHJvZHVjdFZlcnNpb25Nb2RlbCB9IGZyb20gJy4uL21vZGVscy9wcm9kdWN0LXZlcnNpb24ubW9kZWwnO1xuaW1wb3J0IHsgQWxmcmVzY29BcGlTZXJ2aWNlIH0gZnJvbSAnLi9hbGZyZXNjby1hcGkuc2VydmljZSc7XG5pbXBvcnQgeyBjYXRjaEVycm9yLCBtYXAsIHN3aXRjaE1hcCwgZmlsdGVyLCB0YWtlIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgQWJvdXRBcGksIERpc2NvdmVyeUFwaSwgU3lzdGVtUHJvcGVydGllc0FwaSwgU3lzdGVtUHJvcGVydGllc1JlcHJlc2VudGF0aW9uIH0gZnJvbSAnQGFsZnJlc2NvL2pzLWFwaSc7XG5pbXBvcnQgeyBBdXRoZW50aWNhdGlvblNlcnZpY2UgfSBmcm9tICcuL2F1dGhlbnRpY2F0aW9uLnNlcnZpY2UnO1xuXG5ASW5qZWN0YWJsZSh7XG4gICAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIERpc2NvdmVyeUFwaVNlcnZpY2Uge1xuXG4gICAgLyoqXG4gICAgICogR2V0cyBwcm9kdWN0IGluZm9ybWF0aW9uIGZvciBDb250ZW50IFNlcnZpY2VzLlxuICAgICAqL1xuICAgIGVjbVByb2R1Y3RJbmZvJCA9IG5ldyBTdWJqZWN0PEVjbVByb2R1Y3RWZXJzaW9uTW9kZWw+KCk7XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHJpdmF0ZSBhcGlTZXJ2aWNlOiBBbGZyZXNjb0FwaVNlcnZpY2UsXG4gICAgICAgIHByaXZhdGUgYXV0aGVudGljYXRpb25TZXJ2aWNlOiBBdXRoZW50aWNhdGlvblNlcnZpY2UpIHtcblxuICAgICAgICB0aGlzLmF1dGhlbnRpY2F0aW9uU2VydmljZS5vbkxvZ2luXG4gICAgICAgICAgICAucGlwZShcbiAgICAgICAgICAgICAgICBmaWx0ZXIoKCkgPT4gdGhpcy5hcGlTZXJ2aWNlLmdldEluc3RhbmNlKCk/LmlzRWNtTG9nZ2VkSW4oKSksXG4gICAgICAgICAgICAgICAgdGFrZSgxKSxcbiAgICAgICAgICAgICAgICBzd2l0Y2hNYXAoKCkgPT4gdGhpcy5nZXRFY21Qcm9kdWN0SW5mbygpKVxuICAgICAgICAgICAgKVxuICAgICAgICAgICAgLnN1YnNjcmliZSgoaW5mbykgPT4gdGhpcy5lY21Qcm9kdWN0SW5mbyQubmV4dChpbmZvKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyBwcm9kdWN0IGluZm9ybWF0aW9uIGZvciBDb250ZW50IFNlcnZpY2VzLlxuICAgICAqIEByZXR1cm5zIFByb2R1Y3RWZXJzaW9uTW9kZWwgY29udGFpbmluZyBwcm9kdWN0IGRldGFpbHNcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0RWNtUHJvZHVjdEluZm8oKTogT2JzZXJ2YWJsZTxFY21Qcm9kdWN0VmVyc2lvbk1vZGVsPiB7XG4gICAgICAgIGNvbnN0IGRpc2NvdmVyeUFwaSA9IG5ldyBEaXNjb3ZlcnlBcGkodGhpcy5hcGlTZXJ2aWNlLmdldEluc3RhbmNlKCkpO1xuXG4gICAgICAgIHJldHVybiBmcm9tKGRpc2NvdmVyeUFwaS5nZXRSZXBvc2l0b3J5SW5mb3JtYXRpb24oKSlcbiAgICAgICAgICAgIC5waXBlKFxuICAgICAgICAgICAgICAgIG1hcCgocmVzKSA9PiBuZXcgRWNtUHJvZHVjdFZlcnNpb25Nb2RlbChyZXMpKSxcbiAgICAgICAgICAgICAgICBjYXRjaEVycm9yKChlcnIpID0+IHRocm93RXJyb3IoZXJyKSlcbiAgICAgICAgICAgICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyBwcm9kdWN0IGluZm9ybWF0aW9uIGZvciBQcm9jZXNzIFNlcnZpY2VzLlxuICAgICAqIEByZXR1cm5zIFByb2R1Y3RWZXJzaW9uTW9kZWwgY29udGFpbmluZyBwcm9kdWN0IGRldGFpbHNcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0QnBtUHJvZHVjdEluZm8oKTogT2JzZXJ2YWJsZTxCcG1Qcm9kdWN0VmVyc2lvbk1vZGVsPiB7XG4gICAgICAgIGNvbnN0IGFib3V0QXBpID0gbmV3IEFib3V0QXBpKHRoaXMuYXBpU2VydmljZS5nZXRJbnN0YW5jZSgpKTtcblxuICAgICAgICByZXR1cm4gZnJvbShhYm91dEFwaS5nZXRBcHBWZXJzaW9uKCkpXG4gICAgICAgICAgICAucGlwZShcbiAgICAgICAgICAgICAgICBtYXAoKHJlcykgPT4gbmV3IEJwbVByb2R1Y3RWZXJzaW9uTW9kZWwocmVzKSksXG4gICAgICAgICAgICAgICAgY2F0Y2hFcnJvcigoZXJyKSA9PiB0aHJvd0Vycm9yKGVycikpXG4gICAgICAgICAgICApO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXRCUE1TeXN0ZW1Qcm9wZXJ0aWVzKCk6IE9ic2VydmFibGU8U3lzdGVtUHJvcGVydGllc1JlcHJlc2VudGF0aW9uPiB7XG4gICAgICAgIGNvbnN0IHN5c3RlbVByb3BlcnRpZXNBcGkgPSBuZXcgU3lzdGVtUHJvcGVydGllc0FwaSh0aGlzLmFwaVNlcnZpY2UuZ2V0SW5zdGFuY2UoKSk7XG5cbiAgICAgICAgcmV0dXJuIGZyb20oc3lzdGVtUHJvcGVydGllc0FwaS5nZXRQcm9wZXJ0aWVzKCkpXG4gICAgICAgICAgICAucGlwZShcbiAgICAgICAgICAgICAgICBtYXAoKHJlcykgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoJ3N0cmluZycgPT09IHR5cGVvZiAocmVzKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdOb3QgdmFsaWQgcmVzcG9uc2UnKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzO1xuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgIGNhdGNoRXJyb3IoKGVycikgPT4gdGhyb3dFcnJvcihlcnIuZXJyb3IpKVxuICAgICAgICAgICAgKTtcbiAgICB9XG59XG4iXX0=