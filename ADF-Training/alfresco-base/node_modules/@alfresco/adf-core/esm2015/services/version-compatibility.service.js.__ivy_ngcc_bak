import { Injectable } from '@angular/core';
import { DiscoveryApiService } from './discovery-api.service';
import { filter } from 'rxjs/operators';
import { ReplaySubject } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "./discovery-api.service";
export class VersionCompatibilityService {
    constructor(discoveryApiService) {
        this.discoveryApiService = discoveryApiService;
        this.acsVersionInitialized$ = new ReplaySubject();
        this.discoveryApiService.ecmProductInfo$
            .pipe(filter(acsInfo => !!acsInfo))
            .subscribe((acsInfo) => this.initializeAcsVersion(acsInfo.version));
    }
    initializeAcsVersion(acsVersion) {
        this.acsVersion = acsVersion;
        this.acsVersionInitialized$.next();
    }
    getAcsVersion() {
        return this.acsVersion;
    }
    isVersionSupported(requiredVersion) {
        const parsedRequiredVersion = this.parseVersion(requiredVersion);
        const currentVersion = this.getAcsVersion();
        let versionSupported = false;
        if (currentVersion) {
            if (+currentVersion.major > +parsedRequiredVersion.major) {
                versionSupported = true;
            }
            else if (currentVersion.major === parsedRequiredVersion.major &&
                +currentVersion.minor > +parsedRequiredVersion.minor) {
                versionSupported = true;
            }
            else if (currentVersion.major === parsedRequiredVersion.major &&
                currentVersion.minor === parsedRequiredVersion.minor &&
                +currentVersion.patch >= +parsedRequiredVersion.patch) {
                versionSupported = true;
            }
        }
        return versionSupported;
    }
    parseVersion(version) {
        const major = version.split('.')[0];
        const minor = version.split('.')[1] || '0';
        const patch = version.split('.')[2] || '0';
        return {
            major: major,
            minor: minor,
            patch: patch
        };
    }
}
VersionCompatibilityService.ɵprov = i0.ɵɵdefineInjectable({ factory: function VersionCompatibilityService_Factory() { return new VersionCompatibilityService(i0.ɵɵinject(i1.DiscoveryApiService)); }, token: VersionCompatibilityService, providedIn: "root" });
VersionCompatibilityService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
VersionCompatibilityService.ctorParameters = () => [
    { type: DiscoveryApiService }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmVyc2lvbi1jb21wYXRpYmlsaXR5LnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiL2hvbWUvdHJhdmlzL2J1aWxkL0FsZnJlc2NvL2FsZnJlc2NvLW5nMi1jb21wb25lbnRzL2xpYi9jb3JlLyIsInNvdXJjZXMiOlsic2VydmljZXMvdmVyc2lvbi1jb21wYXRpYmlsaXR5LnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBaUJBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFFOUQsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3hDLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxNQUFNLENBQUM7OztBQUtyQyxNQUFNLE9BQU8sMkJBQTJCO0lBS3BDLFlBQW9CLG1CQUF3QztRQUF4Qyx3QkFBbUIsR0FBbkIsbUJBQW1CLENBQXFCO1FBRjVELDJCQUFzQixHQUFHLElBQUksYUFBYSxFQUFFLENBQUM7UUFHekMsSUFBSSxDQUFDLG1CQUFtQixDQUFDLGVBQWU7YUFDbkMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQzthQUNsQyxTQUFTLENBQUMsQ0FBQyxPQUErQixFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsb0JBQW9CLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7SUFDcEcsQ0FBQztJQUVPLG9CQUFvQixDQUFDLFVBQXdCO1FBQ2pELElBQUksQ0FBQyxVQUFVLEdBQUcsVUFBVSxDQUFDO1FBQzdCLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUN2QyxDQUFDO0lBRUQsYUFBYTtRQUNULE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQztJQUMzQixDQUFDO0lBRUQsa0JBQWtCLENBQUMsZUFBdUI7UUFDdEMsTUFBTSxxQkFBcUIsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLGVBQWUsQ0FBQyxDQUFDO1FBQ2pFLE1BQU0sY0FBYyxHQUFHLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztRQUU1QyxJQUFJLGdCQUFnQixHQUFHLEtBQUssQ0FBQztRQUU3QixJQUFJLGNBQWMsRUFBRTtZQUNoQixJQUFJLENBQUMsY0FBYyxDQUFDLEtBQUssR0FBRyxDQUFDLHFCQUFxQixDQUFDLEtBQUssRUFBRTtnQkFDdEQsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDO2FBQzNCO2lCQUFNLElBQUksY0FBYyxDQUFDLEtBQUssS0FBSyxxQkFBcUIsQ0FBQyxLQUFLO2dCQUMzRCxDQUFDLGNBQWMsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxxQkFBcUIsQ0FBQyxLQUFLLEVBQUU7Z0JBQ3RELGdCQUFnQixHQUFHLElBQUksQ0FBQzthQUMzQjtpQkFBTSxJQUFJLGNBQWMsQ0FBQyxLQUFLLEtBQUsscUJBQXFCLENBQUMsS0FBSztnQkFDM0QsY0FBYyxDQUFDLEtBQUssS0FBSyxxQkFBcUIsQ0FBQyxLQUFLO2dCQUNwRCxDQUFDLGNBQWMsQ0FBQyxLQUFLLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxLQUFLLEVBQUU7Z0JBQ3ZELGdCQUFnQixHQUFHLElBQUksQ0FBQzthQUMzQjtTQUNKO1FBRUQsT0FBTyxnQkFBZ0IsQ0FBQztJQUM1QixDQUFDO0lBRU8sWUFBWSxDQUFDLE9BQWU7UUFDaEMsTUFBTSxLQUFLLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNwQyxNQUFNLEtBQUssR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLEdBQUcsQ0FBQztRQUMzQyxNQUFNLEtBQUssR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLEdBQUcsQ0FBQztRQUUzQyxPQUFPO1lBQ0gsS0FBSyxFQUFFLEtBQUs7WUFDWixLQUFLLEVBQUUsS0FBSztZQUNaLEtBQUssRUFBRSxLQUFLO1NBQ0MsQ0FBQztJQUN0QixDQUFDOzs7O1lBdkRKLFVBQVUsU0FBQztnQkFDUixVQUFVLEVBQUUsTUFBTTthQUNyQjs7O1lBUFEsbUJBQW1CIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRGlzY292ZXJ5QXBpU2VydmljZSB9IGZyb20gJy4vZGlzY292ZXJ5LWFwaS5zZXJ2aWNlJztcbmltcG9ydCB7IFZlcnNpb25Nb2RlbCwgRWNtUHJvZHVjdFZlcnNpb25Nb2RlbCB9IGZyb20gJy4uL21vZGVscy9wcm9kdWN0LXZlcnNpb24ubW9kZWwnO1xuaW1wb3J0IHsgZmlsdGVyIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgUmVwbGF5U3ViamVjdCB9IGZyb20gJ3J4anMnO1xuXG5ASW5qZWN0YWJsZSh7XG4gICAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIFZlcnNpb25Db21wYXRpYmlsaXR5U2VydmljZSB7XG4gICAgcHJpdmF0ZSBhY3NWZXJzaW9uOiBWZXJzaW9uTW9kZWw7XG5cbiAgICBhY3NWZXJzaW9uSW5pdGlhbGl6ZWQkID0gbmV3IFJlcGxheVN1YmplY3QoKTtcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgZGlzY292ZXJ5QXBpU2VydmljZTogRGlzY292ZXJ5QXBpU2VydmljZSkge1xuICAgICAgICB0aGlzLmRpc2NvdmVyeUFwaVNlcnZpY2UuZWNtUHJvZHVjdEluZm8kXG4gICAgICAgICAgICAucGlwZShmaWx0ZXIoYWNzSW5mbyA9PiAhIWFjc0luZm8pKVxuICAgICAgICAgICAgLnN1YnNjcmliZSgoYWNzSW5mbzogRWNtUHJvZHVjdFZlcnNpb25Nb2RlbCkgPT4gdGhpcy5pbml0aWFsaXplQWNzVmVyc2lvbihhY3NJbmZvLnZlcnNpb24pKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGluaXRpYWxpemVBY3NWZXJzaW9uKGFjc1ZlcnNpb246IFZlcnNpb25Nb2RlbCkge1xuICAgICAgICB0aGlzLmFjc1ZlcnNpb24gPSBhY3NWZXJzaW9uO1xuICAgICAgICB0aGlzLmFjc1ZlcnNpb25Jbml0aWFsaXplZCQubmV4dCgpO1xuICAgIH1cblxuICAgIGdldEFjc1ZlcnNpb24oKTogVmVyc2lvbk1vZGVsIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYWNzVmVyc2lvbjtcbiAgICB9XG5cbiAgICBpc1ZlcnNpb25TdXBwb3J0ZWQocmVxdWlyZWRWZXJzaW9uOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICAgICAgY29uc3QgcGFyc2VkUmVxdWlyZWRWZXJzaW9uID0gdGhpcy5wYXJzZVZlcnNpb24ocmVxdWlyZWRWZXJzaW9uKTtcbiAgICAgICAgY29uc3QgY3VycmVudFZlcnNpb24gPSB0aGlzLmdldEFjc1ZlcnNpb24oKTtcblxuICAgICAgICBsZXQgdmVyc2lvblN1cHBvcnRlZCA9IGZhbHNlO1xuXG4gICAgICAgIGlmIChjdXJyZW50VmVyc2lvbikge1xuICAgICAgICAgICAgaWYgKCtjdXJyZW50VmVyc2lvbi5tYWpvciA+ICtwYXJzZWRSZXF1aXJlZFZlcnNpb24ubWFqb3IpIHtcbiAgICAgICAgICAgICAgICB2ZXJzaW9uU3VwcG9ydGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoY3VycmVudFZlcnNpb24ubWFqb3IgPT09IHBhcnNlZFJlcXVpcmVkVmVyc2lvbi5tYWpvciAmJlxuICAgICAgICAgICAgICAgICtjdXJyZW50VmVyc2lvbi5taW5vciA+ICtwYXJzZWRSZXF1aXJlZFZlcnNpb24ubWlub3IpIHtcbiAgICAgICAgICAgICAgICB2ZXJzaW9uU3VwcG9ydGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoY3VycmVudFZlcnNpb24ubWFqb3IgPT09IHBhcnNlZFJlcXVpcmVkVmVyc2lvbi5tYWpvciAmJlxuICAgICAgICAgICAgICAgIGN1cnJlbnRWZXJzaW9uLm1pbm9yID09PSBwYXJzZWRSZXF1aXJlZFZlcnNpb24ubWlub3IgJiZcbiAgICAgICAgICAgICAgICArY3VycmVudFZlcnNpb24ucGF0Y2ggPj0gK3BhcnNlZFJlcXVpcmVkVmVyc2lvbi5wYXRjaCkge1xuICAgICAgICAgICAgICAgIHZlcnNpb25TdXBwb3J0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHZlcnNpb25TdXBwb3J0ZWQ7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBwYXJzZVZlcnNpb24odmVyc2lvbjogc3RyaW5nKTogVmVyc2lvbk1vZGVsIHtcbiAgICAgICAgY29uc3QgbWFqb3IgPSB2ZXJzaW9uLnNwbGl0KCcuJylbMF07XG4gICAgICAgIGNvbnN0IG1pbm9yID0gdmVyc2lvbi5zcGxpdCgnLicpWzFdIHx8ICcwJztcbiAgICAgICAgY29uc3QgcGF0Y2ggPSB2ZXJzaW9uLnNwbGl0KCcuJylbMl0gfHwgJzAnO1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBtYWpvcjogbWFqb3IsXG4gICAgICAgICAgICBtaW5vcjogbWlub3IsXG4gICAgICAgICAgICBwYXRjaDogcGF0Y2hcbiAgICAgICAgfSBhcyBWZXJzaW9uTW9kZWw7XG4gICAgfVxufVxuIl19