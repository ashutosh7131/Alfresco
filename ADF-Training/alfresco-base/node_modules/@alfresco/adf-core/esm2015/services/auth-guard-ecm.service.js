import { __awaiter } from "tslib";
import { Injectable } from '@angular/core';
import { Router } from '@angular/router';
import { AuthenticationService } from './authentication.service';
import { AppConfigService } from '../app-config/app-config.service';
import { AuthGuardBase } from './auth-guard-base';
import { MatDialog } from '@angular/material/dialog';
import { StorageService } from './storage.service';
import * as i0 from "@angular/core";
import * as i1 from "./authentication.service";
import * as i2 from "@angular/router";
import * as i3 from "../app-config/app-config.service";
import * as i4 from "@angular/material/dialog";
import * as i5 from "./storage.service";
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './authentication.service';
import * as ɵngcc2 from '@angular/router';
import * as ɵngcc3 from '../app-config/app-config.service';
import * as ɵngcc4 from '@angular/material/dialog';
import * as ɵngcc5 from './storage.service';
export class AuthGuardEcm extends AuthGuardBase {
    constructor(authenticationService, router, appConfigService, dialog, storageService) {
        super(authenticationService, router, appConfigService, dialog, storageService);
    }
    checkLogin(_, redirectUrl) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.authenticationService.isEcmLoggedIn() || this.withCredentials) {
                return true;
            }
            return this.redirectToUrl(redirectUrl);
        });
    }
}
AuthGuardEcm.ɵfac = function AuthGuardEcm_Factory(t) { return new (t || AuthGuardEcm)(ɵngcc0.ɵɵinject(ɵngcc1.AuthenticationService), ɵngcc0.ɵɵinject(ɵngcc2.Router), ɵngcc0.ɵɵinject(ɵngcc3.AppConfigService), ɵngcc0.ɵɵinject(ɵngcc4.MatDialog), ɵngcc0.ɵɵinject(ɵngcc5.StorageService)); };
AuthGuardEcm.ɵprov = i0.ɵɵdefineInjectable({ factory: function AuthGuardEcm_Factory() { return new AuthGuardEcm(i0.ɵɵinject(i1.AuthenticationService), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.AppConfigService), i0.ɵɵinject(i4.MatDialog), i0.ɵɵinject(i5.StorageService)); }, token: AuthGuardEcm, providedIn: "root" });
AuthGuardEcm.ctorParameters = () => [
    { type: AuthenticationService },
    { type: Router },
    { type: AppConfigService },
    { type: MatDialog },
    { type: StorageService }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AuthGuardEcm, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc1.AuthenticationService }, { type: ɵngcc2.Router }, { type: ɵngcc3.AppConfigService }, { type: ɵngcc4.MatDialog }, { type: ɵngcc5.StorageService }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0aC1ndWFyZC1lY20uc2VydmljZS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vaG9tZS90cmF2aXMvYnVpbGQvQWxmcmVzY28vYWxmcmVzY28tbmcyLWNvbXBvbmVudHMvbGliL2NvcmUvc2VydmljZXMvYXV0aC1ndWFyZC1lY20uc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBaUJBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUNxQixNQUFNLEVBQ2pDLE1BQU0saUJBQWlCLENBQUM7QUFDekIsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDakUsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sa0NBQWtDLENBQUM7QUFDcEUsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ2xELE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUNyRCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDbkQ7QUFFc0I7QUFFc0I7QUFFWjtBQUNOO0FBQ2dCOzs7Ozs7O0FBSjFDLE1BQU0sT0FBTyxZQUFhLFNBQVEsYUFBYTtBQUMvQyxJQUNJLFlBQVkscUJBQTRDLEVBQzVDLE1BQWMsRUFDZCxnQkFBa0MsRUFDbEMsTUFBaUIsRUFDakIsY0FBOEI7QUFDOUMsUUFBUSxLQUFLLENBQUMscUJBQXFCLEVBQUUsTUFBTSxFQUFFLGdCQUFnQixFQUFFLE1BQU0sRUFBRSxjQUFjLENBQUMsQ0FBQztBQUN2RixJQUFJLENBQUM7QUFDTCxJQUNVLFVBQVUsQ0FBQyxDQUF5QixFQUFFLFdBQW1CO0FBQUk7QUFDckMsWUFBMUIsSUFBSSxJQUFJLENBQUMscUJBQXFCLENBQUMsYUFBYSxFQUFFLElBQUksSUFBSSxDQUFDLGVBQWUsRUFBRTtBQUNoRixnQkFBWSxPQUFPLElBQUksQ0FBQztBQUN4QixhQUFTO0FBQ1QsWUFDUSxPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsV0FBVyxDQUFDLENBQUM7QUFDL0MsUUFBSSxDQUFDO0FBRUwsS0FGSztBQUNMOzZSQUFDO0FBQ0QsMlRBbEJLO0FBQUM7RUFITCxVQUFVLFNBQUMsckJBR2dDLFlBVG5DLHFCQUFxQjtFQU8xQixVQUFVLEVBQUUsTUFBTSxwQkFQWSxZQUZOLE1BQU07WUFVakMsWkFWcUMsWUFHN0IsZ0JBQWdCO0FBQUksWUFFcEIsU0FBUztBQUFJLFlBQ2IsY0FBYztBQUFHOzs7Ozs7K01BQUU7QUFBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7XG4gICAgQWN0aXZhdGVkUm91dGVTbmFwc2hvdCwgUm91dGVyLCBVcmxUcmVlXG59IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5pbXBvcnQgeyBBdXRoZW50aWNhdGlvblNlcnZpY2UgfSBmcm9tICcuL2F1dGhlbnRpY2F0aW9uLnNlcnZpY2UnO1xuaW1wb3J0IHsgQXBwQ29uZmlnU2VydmljZSB9IGZyb20gJy4uL2FwcC1jb25maWcvYXBwLWNvbmZpZy5zZXJ2aWNlJztcbmltcG9ydCB7IEF1dGhHdWFyZEJhc2UgfSBmcm9tICcuL2F1dGgtZ3VhcmQtYmFzZSc7XG5pbXBvcnQgeyBNYXREaWFsb2cgfSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbC9kaWFsb2cnO1xuaW1wb3J0IHsgU3RvcmFnZVNlcnZpY2UgfSBmcm9tICcuL3N0b3JhZ2Uuc2VydmljZSc7XG5cbkBJbmplY3RhYmxlKHtcbiAgICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgQXV0aEd1YXJkRWNtIGV4dGVuZHMgQXV0aEd1YXJkQmFzZSB7XG5cbiAgICBjb25zdHJ1Y3RvcihhdXRoZW50aWNhdGlvblNlcnZpY2U6IEF1dGhlbnRpY2F0aW9uU2VydmljZSxcbiAgICAgICAgICAgICAgICByb3V0ZXI6IFJvdXRlcixcbiAgICAgICAgICAgICAgICBhcHBDb25maWdTZXJ2aWNlOiBBcHBDb25maWdTZXJ2aWNlLFxuICAgICAgICAgICAgICAgIGRpYWxvZzogTWF0RGlhbG9nLFxuICAgICAgICAgICAgICAgIHN0b3JhZ2VTZXJ2aWNlOiBTdG9yYWdlU2VydmljZSkge1xuICAgICAgICBzdXBlcihhdXRoZW50aWNhdGlvblNlcnZpY2UsIHJvdXRlciwgYXBwQ29uZmlnU2VydmljZSwgZGlhbG9nLCBzdG9yYWdlU2VydmljZSk7XG4gICAgfVxuXG4gICAgYXN5bmMgY2hlY2tMb2dpbihfOiBBY3RpdmF0ZWRSb3V0ZVNuYXBzaG90LCByZWRpcmVjdFVybDogc3RyaW5nKTogUHJvbWlzZTxib29sZWFuIHwgVXJsVHJlZT4ge1xuICAgICAgICBpZiAodGhpcy5hdXRoZW50aWNhdGlvblNlcnZpY2UuaXNFY21Mb2dnZWRJbigpIHx8IHRoaXMud2l0aENyZWRlbnRpYWxzKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLnJlZGlyZWN0VG9VcmwocmVkaXJlY3RVcmwpO1xuICAgIH1cbn1cbiJdfQ==