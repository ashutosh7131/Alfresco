import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable, forkJoin, throwError, of } from 'rxjs';
import { ComponentTranslationModel } from '../models/component.model';
import { ObjectUtils } from '../utils/object-utils';
import { map, catchError, retry } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common/http';
export class TranslateLoaderService {
    constructor(http) {
        this.http = http;
        this.prefix = 'i18n';
        this.suffix = '.json';
        this.providers = [];
        this.queue = [];
        this.defaultLang = 'en';
    }
    setDefaultLang(value) {
        this.defaultLang = value || 'en';
    }
    registerProvider(name, path) {
        const registered = this.providers.find((provider) => provider.name === name);
        if (registered) {
            registered.path = path;
        }
        else {
            this.providers.push(new ComponentTranslationModel({ name: name, path: path }));
        }
    }
    providerRegistered(name) {
        return this.providers.find((x) => x.name === name) ? true : false;
    }
    fetchLanguageFile(lang, component, fallbackUrl) {
        const translationUrl = fallbackUrl || `${component.path}/${this.prefix}/${lang}${this.suffix}?v=${Date.now()}`;
        return this.http.get(translationUrl).pipe(map((res) => {
            component.json[lang] = res;
        }), retry(3), catchError(() => {
            if (!fallbackUrl && lang.includes('-')) {
                const [langId] = lang.split('-');
                if (langId && langId !== this.defaultLang) {
                    const url = `${component.path}/${this.prefix}/${langId}${this.suffix}?v=${Date.now()}`;
                    return this.fetchLanguageFile(lang, component, url);
                }
            }
            return throwError(`Failed to load ${translationUrl}`);
        }));
    }
    getComponentToFetch(lang) {
        const observableBatch = [];
        if (!this.queue[lang]) {
            this.queue[lang] = [];
        }
        this.providers.forEach((component) => {
            if (!this.isComponentInQueue(lang, component.name)) {
                this.queue[lang].push(component.name);
                observableBatch.push(this.fetchLanguageFile(lang, component));
            }
        });
        return observableBatch;
    }
    init(lang) {
        if (this.queue[lang] === undefined) {
            this.queue[lang] = [];
        }
    }
    isComponentInQueue(lang, name) {
        return (this.queue[lang] || []).find((x) => x === name) ? true : false;
    }
    getFullTranslationJSON(lang) {
        let result = {};
        this.providers
            .slice(0)
            .sort((a, b) => {
            if (a.name === 'app') {
                return 1;
            }
            if (b.name === 'app') {
                return -1;
            }
            return a.name.localeCompare(b.name);
        })
            .forEach((model) => {
            if (model.json && model.json[lang]) {
                result = ObjectUtils.merge(result, model.json[lang]);
            }
        });
        return result;
    }
    getTranslation(lang) {
        let hasFailures = false;
        const batch = [
            ...this.getComponentToFetch(lang).map((observable) => {
                return observable.pipe(catchError((error) => {
                    hasFailures = true;
                    return of(error);
                }));
            })
        ];
        return new Observable((observer) => {
            if (batch.length > 0) {
                forkJoin(batch).subscribe(() => {
                    const fullTranslation = this.getFullTranslationJSON(lang);
                    if (fullTranslation) {
                        observer.next(fullTranslation);
                    }
                    if (hasFailures) {
                        observer.error('Failed to load some resources');
                    }
                    else {
                        observer.complete();
                    }
                }, () => {
                    observer.error('Failed to load some resources');
                });
            }
            else {
                const fullTranslation = this.getFullTranslationJSON(lang);
                if (fullTranslation) {
                    observer.next(fullTranslation);
                    observer.complete();
                }
            }
        });
    }
}
TranslateLoaderService.ɵfac = function TranslateLoaderService_Factory(t) { return new (t || TranslateLoaderService)(ɵngcc0.ɵɵinject(ɵngcc1.HttpClient)); };
TranslateLoaderService.ɵprov = i0.ɵɵdefineInjectable({ factory: function TranslateLoaderService_Factory() { return new TranslateLoaderService(i0.ɵɵinject(i1.HttpClient)); }, token: TranslateLoaderService, providedIn: "root" });
TranslateLoaderService.ctorParameters = () => [
    { type: HttpClient }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TranslateLoaderService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc1.HttpClient }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,