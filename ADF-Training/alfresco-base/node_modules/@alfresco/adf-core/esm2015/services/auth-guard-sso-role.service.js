import { __awaiter } from "tslib";
import { Injectable } from '@angular/core';
import { JwtHelperService } from './jwt-helper.service';
import { Router } from '@angular/router';
import { MatDialog } from '@angular/material/dialog';
import { ContentGroups, PeopleContentService } from './people-content.service';
import * as i0 from "@angular/core";
import * as i1 from "./jwt-helper.service";
import * as i2 from "@angular/router";
import * as i3 from "@angular/material/dialog";
import * as i4 from "./people-content.service";
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './jwt-helper.service';
import * as ɵngcc2 from '@angular/router';
import * as ɵngcc3 from '@angular/material/dialog';
import * as ɵngcc4 from './people-content.service';
export class AuthGuardSsoRoleService {
    constructor(jwtHelperService, router, dialog, peopleContentService) {
        this.jwtHelperService = jwtHelperService;
        this.router = router;
        this.dialog = dialog;
        this.peopleContentService = peopleContentService;
    }
    canActivate(route) {
        return __awaiter(this, void 0, void 0, function* () {
            let hasRole;
            let hasRealmRole = false;
            let hasClientRole = true;
            if (route.data) {
                if (route.data['roles']) {
                    const rolesToCheck = route.data['roles'];
                    const excludedRoles = route.data['excludedRoles'] || [];
                    const isContentAdmin = rolesToCheck.includes(ContentGroups.ALFRESCO_ADMINISTRATORS) || excludedRoles.includes(ContentGroups.ALFRESCO_ADMINISTRATORS) ? yield this.peopleContentService.isContentAdmin() : false;
                    hasRealmRole = excludedRoles.length ? this.checkAccessWithExcludedRoles(rolesToCheck, excludedRoles, isContentAdmin) : this.hasRoles(rolesToCheck, isContentAdmin);
                }
                if (route.data['clientRoles']) {
                    const clientRoleName = route.params[route.data['clientRoles']];
                    const rolesToCheck = route.data['roles'];
                    hasClientRole = this.jwtHelperService.hasRealmRolesForClientRole(clientRoleName, rolesToCheck);
                }
            }
            hasRole = hasRealmRole && hasClientRole;
            if (!hasRole && route.data && route.data['redirectUrl']) {
                this.router.navigate(['/' + route.data['redirectUrl']]);
            }
            if (!hasRole) {
                this.dialog.closeAll();
            }
            return hasRole;
        });
    }
    checkAccessWithExcludedRoles(rolesToCheck, excludedRoles, isContentAdmin) {
        return this.hasRoles(rolesToCheck, isContentAdmin) && !this.hasRoles(excludedRoles, isContentAdmin);
    }
    hasRoles(rolesToCheck, isContentAdmin) {
        return rolesToCheck.includes(ContentGroups.ALFRESCO_ADMINISTRATORS) ? this.jwtHelperService.hasRealmRoles(rolesToCheck) || isContentAdmin : this.jwtHelperService.hasRealmRoles(rolesToCheck);
    }
}
AuthGuardSsoRoleService.ɵfac = function AuthGuardSsoRoleService_Factory(t) { return new (t || AuthGuardSsoRoleService)(ɵngcc0.ɵɵinject(ɵngcc1.JwtHelperService), ɵngcc0.ɵɵinject(ɵngcc2.Router), ɵngcc0.ɵɵinject(ɵngcc3.MatDialog), ɵngcc0.ɵɵinject(ɵngcc4.PeopleContentService)); };
AuthGuardSsoRoleService.ɵprov = i0.ɵɵdefineInjectable({ factory: function AuthGuardSsoRoleService_Factory() { return new AuthGuardSsoRoleService(i0.ɵɵinject(i1.JwtHelperService), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.MatDialog), i0.ɵɵinject(i4.PeopleContentService)); }, token: AuthGuardSsoRoleService, providedIn: "root" });
AuthGuardSsoRoleService.ctorParameters = () => [
    { type: JwtHelperService },
    { type: Router },
    { type: MatDialog },
    { type: PeopleContentService }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AuthGuardSsoRoleService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc1.JwtHelperService }, { type: ɵngcc2.Router }, { type: ɵngcc3.MatDialog }, { type: ɵngcc4.PeopleContentService }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,