import { Injectable } from '@angular/core';
import { from, throwError } from 'rxjs';
import { CommentModel } from '../models/comment.model';
import { UserProcessModel } from '../models/user-process.model';
import { AlfrescoApiService } from './alfresco-api.service';
import { LogService } from './log.service';
import { map, catchError } from 'rxjs/operators';
import { ActivitiCommentsApi } from '@alfresco/js-api';
import * as i0 from "@angular/core";
import * as i1 from "./alfresco-api.service";
import * as i2 from "./log.service";
export class CommentProcessService {
    constructor(apiService, logService) {
        this.apiService = apiService;
        this.logService = logService;
    }
    get commentsApi() {
        var _a;
        this._commentsApi = (_a = this._commentsApi) !== null && _a !== void 0 ? _a : new ActivitiCommentsApi(this.apiService.getInstance());
        return this._commentsApi;
    }
    addTaskComment(taskId, message) {
        return from(this.commentsApi.addTaskComment({ message: message }, taskId))
            .pipe(map((response) => {
            return new CommentModel({
                id: response.id,
                message: response.message,
                created: response.created,
                createdBy: response.createdBy
            });
        }), catchError((err) => this.handleError(err)));
    }
    getTaskComments(taskId) {
        return from(this.commentsApi.getTaskComments(taskId))
            .pipe(map((response) => {
            const comments = [];
            response.data.forEach((comment) => {
                const user = new UserProcessModel(comment.createdBy);
                comments.push(new CommentModel({
                    id: comment.id,
                    message: comment.message,
                    created: comment.created,
                    createdBy: user
                }));
            });
            return comments;
        }), catchError((err) => this.handleError(err)));
    }
    getProcessInstanceComments(processInstanceId) {
        return from(this.commentsApi.getProcessInstanceComments(processInstanceId))
            .pipe(map((response) => {
            const comments = [];
            response.data.forEach((comment) => {
                const user = new UserProcessModel(comment.createdBy);
                comments.push(new CommentModel({
                    id: comment.id,
                    message: comment.message,
                    created: comment.created,
                    createdBy: user
                }));
            });
            return comments;
        }), catchError((err) => this.handleError(err)));
    }
    addProcessInstanceComment(processInstanceId, message) {
        return from(this.commentsApi.addProcessInstanceComment({ message: message }, processInstanceId)).pipe(map((response) => {
            return new CommentModel({
                id: response.id,
                message: response.message,
                created: response.created,
                createdBy: response.createdBy
            });
        }), catchError((err) => this.handleError(err)));
    }
    handleError(error) {
        this.logService.error(error);
        return throwError(error || 'Server error');
    }
}
CommentProcessService.ɵprov = i0.ɵɵdefineInjectable({ factory: function CommentProcessService_Factory() { return new CommentProcessService(i0.ɵɵinject(i1.AlfrescoApiService), i0.ɵɵinject(i2.LogService)); }, token: CommentProcessService, providedIn: "root" });
CommentProcessService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
CommentProcessService.ctorParameters = () => [
    { type: AlfrescoApiService },
    { type: LogService }
];
//# sourceMappingURL=data:application/json;base64,