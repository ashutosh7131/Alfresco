import { Injectable } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { AppConfigService, AppConfigValues } from '../app-config/app-config.service';
import { UserPreferencesService } from './user-preferences.service';
import * as i0 from "@angular/core";
import * as i1 from "../app-config/app-config.service";
import * as i2 from "./user-preferences.service";
export class LanguageService {
    constructor(appConfigService, userPreferencesService) {
        this.userPreferencesService = userPreferencesService;
        this.languages = new BehaviorSubject([
            { 'key': 'de', 'label': 'Deutsch' },
            { 'key': 'en', 'label': 'English' },
            { 'key': 'es', 'label': 'Español' },
            { 'key': 'fr', 'label': 'Français' },
            { 'key': 'it', 'label': 'Italiano' },
            { 'key': 'ja', 'label': '日本語' },
            { 'key': 'nb', 'label': 'Bokmål' },
            { 'key': 'nl', 'label': 'Nederlands' },
            { 'key': 'pt-BR', 'label': 'Português (Brasil)' },
            { 'key': 'ru', 'label': 'Русский' },
            { 'key': 'zh-CN', 'label': '中文简体' },
            { 'key': 'cs', 'label': 'Čeština' },
            { 'key': 'da', 'label': 'Dansk' },
            { 'key': 'fi', 'label': 'Suomi' },
            { 'key': 'pl', 'label': 'Polski' },
            { 'key': 'sv', 'label': 'Svenska' },
            { 'key': 'ar', 'label': 'العربية', direction: 'rtl' }
        ]);
        this.languages$ = this.languages.asObservable();
        const customLanguages = appConfigService.get(AppConfigValues.APP_CONFIG_LANGUAGES_KEY);
        this.setLanguages(customLanguages);
    }
    changeLanguage(language) {
        this.userPreferencesService.locale = language.key;
        this.userPreferencesService.set('textOrientation', language.direction || 'ltr');
    }
    setLanguages(items) {
        if (items && items.length > 0) {
            this.languages.next(items);
        }
    }
}
LanguageService.ɵprov = i0.ɵɵdefineInjectable({ factory: function LanguageService_Factory() { return new LanguageService(i0.ɵɵinject(i1.AppConfigService), i0.ɵɵinject(i2.UserPreferencesService)); }, token: LanguageService, providedIn: "root" });
LanguageService.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] }
];
LanguageService.ctorParameters = () => [
    { type: AppConfigService },
    { type: UserPreferencesService }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGFuZ3VhZ2Uuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIvaG9tZS90cmF2aXMvYnVpbGQvQWxmcmVzY28vYWxmcmVzY28tbmcyLWNvbXBvbmVudHMvbGliL2NvcmUvIiwic291cmNlcyI6WyJzZXJ2aWNlcy9sYW5ndWFnZS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWlCQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTNDLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDdkMsT0FBTyxFQUFFLGdCQUFnQixFQUFFLGVBQWUsRUFBRSxNQUFNLGtDQUFrQyxDQUFDO0FBQ3JGLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLDRCQUE0QixDQUFDOzs7O0FBU3BFLE1BQU0sT0FBTyxlQUFlO0lBd0J4QixZQUNJLGdCQUFrQyxFQUMxQixzQkFBOEM7UUFBOUMsMkJBQXNCLEdBQXRCLHNCQUFzQixDQUF3QjtRQXhCbEQsY0FBUyxHQUFHLElBQUksZUFBZSxDQUFpQjtZQUNwRCxFQUFDLEtBQUssRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLFNBQVMsRUFBQztZQUNqQyxFQUFDLEtBQUssRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLFNBQVMsRUFBQztZQUNqQyxFQUFDLEtBQUssRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLFNBQVMsRUFBQztZQUNqQyxFQUFDLEtBQUssRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLFVBQVUsRUFBQztZQUNsQyxFQUFDLEtBQUssRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLFVBQVUsRUFBQztZQUNsQyxFQUFDLEtBQUssRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBQztZQUM3QixFQUFDLEtBQUssRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLFFBQVEsRUFBQztZQUNoQyxFQUFDLEtBQUssRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLFlBQVksRUFBQztZQUNwQyxFQUFDLEtBQUssRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLG9CQUFvQixFQUFDO1lBQy9DLEVBQUMsS0FBSyxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsU0FBUyxFQUFDO1lBQ2pDLEVBQUMsS0FBSyxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxFQUFDO1lBQ2pDLEVBQUMsS0FBSyxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsU0FBUyxFQUFDO1lBQ2pDLEVBQUMsS0FBSyxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFDO1lBQy9CLEVBQUMsS0FBSyxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFDO1lBQy9CLEVBQUMsS0FBSyxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsUUFBUSxFQUFDO1lBQ2hDLEVBQUMsS0FBSyxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsU0FBUyxFQUFDO1lBQ2pDLEVBQUMsS0FBSyxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUM7U0FDdEQsQ0FBQyxDQUFDO1FBRUgsZUFBVSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsWUFBWSxFQUFFLENBQUM7UUFNdkMsTUFBTSxlQUFlLEdBQUcsZ0JBQWdCLENBQUMsR0FBRyxDQUFzQixlQUFlLENBQUMsd0JBQXdCLENBQUMsQ0FBQztRQUM1RyxJQUFJLENBQUMsWUFBWSxDQUFDLGVBQWUsQ0FBQyxDQUFDO0lBQ3ZDLENBQUM7SUFFRCxjQUFjLENBQUMsUUFBc0I7UUFDakMsSUFBSSxDQUFDLHNCQUFzQixDQUFDLE1BQU0sR0FBRyxRQUFRLENBQUMsR0FBRyxDQUFDO1FBQ2xELElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxHQUFHLENBQUMsaUJBQWlCLEVBQUUsUUFBUSxDQUFDLFNBQVMsSUFBSSxLQUFLLENBQUMsQ0FBQztJQUNwRixDQUFDO0lBRUQsWUFBWSxDQUFDLEtBQXFCO1FBQzlCLElBQUksS0FBSyxJQUFJLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1lBQzNCLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQzlCO0lBQ0wsQ0FBQzs7OztZQTFDSixVQUFVLFNBQUMsRUFBQyxVQUFVLEVBQUUsTUFBTSxFQUFDOzs7WUFUdkIsZ0JBQWdCO1lBQ2hCLHNCQUFzQiIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IERpcmVjdGlvbiB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9iaWRpJztcbmltcG9ydCB7IEJlaGF2aW9yU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgQXBwQ29uZmlnU2VydmljZSwgQXBwQ29uZmlnVmFsdWVzIH0gZnJvbSAnLi4vYXBwLWNvbmZpZy9hcHAtY29uZmlnLnNlcnZpY2UnO1xuaW1wb3J0IHsgVXNlclByZWZlcmVuY2VzU2VydmljZSB9IGZyb20gJy4vdXNlci1wcmVmZXJlbmNlcy5zZXJ2aWNlJztcblxuZXhwb3J0IGludGVyZmFjZSBMYW5ndWFnZUl0ZW0ge1xuICAgIGtleTogc3RyaW5nO1xuICAgIGxhYmVsOiBzdHJpbmc7XG4gICAgZGlyZWN0aW9uPzogRGlyZWN0aW9uO1xufVxuXG5ASW5qZWN0YWJsZSh7cHJvdmlkZWRJbjogJ3Jvb3QnfSlcbmV4cG9ydCBjbGFzcyBMYW5ndWFnZVNlcnZpY2Uge1xuXG4gICAgcHJpdmF0ZSBsYW5ndWFnZXMgPSBuZXcgQmVoYXZpb3JTdWJqZWN0PExhbmd1YWdlSXRlbVtdPihbXG4gICAgICAgIHsna2V5JzogJ2RlJywgJ2xhYmVsJzogJ0RldXRzY2gnfSxcbiAgICAgICAgeydrZXknOiAnZW4nLCAnbGFiZWwnOiAnRW5nbGlzaCd9LFxuICAgICAgICB7J2tleSc6ICdlcycsICdsYWJlbCc6ICdFc3Bhw7FvbCd9LFxuICAgICAgICB7J2tleSc6ICdmcicsICdsYWJlbCc6ICdGcmFuw6dhaXMnfSxcbiAgICAgICAgeydrZXknOiAnaXQnLCAnbGFiZWwnOiAnSXRhbGlhbm8nfSxcbiAgICAgICAgeydrZXknOiAnamEnLCAnbGFiZWwnOiAn5pel5pys6KqeJ30sXG4gICAgICAgIHsna2V5JzogJ25iJywgJ2xhYmVsJzogJ0Jva23DpWwnfSxcbiAgICAgICAgeydrZXknOiAnbmwnLCAnbGFiZWwnOiAnTmVkZXJsYW5kcyd9LFxuICAgICAgICB7J2tleSc6ICdwdC1CUicsICdsYWJlbCc6ICdQb3J0dWd1w6pzIChCcmFzaWwpJ30sXG4gICAgICAgIHsna2V5JzogJ3J1JywgJ2xhYmVsJzogJ9Cg0YPRgdGB0LrQuNC5J30sXG4gICAgICAgIHsna2V5JzogJ3poLUNOJywgJ2xhYmVsJzogJ+S4reaWh+eugOS9kyd9LFxuICAgICAgICB7J2tleSc6ICdjcycsICdsYWJlbCc6ICfEjGXFoXRpbmEnfSxcbiAgICAgICAgeydrZXknOiAnZGEnLCAnbGFiZWwnOiAnRGFuc2snfSxcbiAgICAgICAgeydrZXknOiAnZmknLCAnbGFiZWwnOiAnU3VvbWknfSxcbiAgICAgICAgeydrZXknOiAncGwnLCAnbGFiZWwnOiAnUG9sc2tpJ30sXG4gICAgICAgIHsna2V5JzogJ3N2JywgJ2xhYmVsJzogJ1N2ZW5za2EnfSxcbiAgICAgICAgeydrZXknOiAnYXInLCAnbGFiZWwnOiAn2KfZhNi52LHYqNmK2KknLCBkaXJlY3Rpb246ICdydGwnfVxuICAgIF0pO1xuXG4gICAgbGFuZ3VhZ2VzJCA9IHRoaXMubGFuZ3VhZ2VzLmFzT2JzZXJ2YWJsZSgpO1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIGFwcENvbmZpZ1NlcnZpY2U6IEFwcENvbmZpZ1NlcnZpY2UsXG4gICAgICAgIHByaXZhdGUgdXNlclByZWZlcmVuY2VzU2VydmljZTogVXNlclByZWZlcmVuY2VzU2VydmljZSkge1xuXG4gICAgICAgIGNvbnN0IGN1c3RvbUxhbmd1YWdlcyA9IGFwcENvbmZpZ1NlcnZpY2UuZ2V0PEFycmF5PExhbmd1YWdlSXRlbT4+KEFwcENvbmZpZ1ZhbHVlcy5BUFBfQ09ORklHX0xBTkdVQUdFU19LRVkpO1xuICAgICAgICB0aGlzLnNldExhbmd1YWdlcyhjdXN0b21MYW5ndWFnZXMpO1xuICAgIH1cblxuICAgIGNoYW5nZUxhbmd1YWdlKGxhbmd1YWdlOiBMYW5ndWFnZUl0ZW0pIHtcbiAgICAgICAgdGhpcy51c2VyUHJlZmVyZW5jZXNTZXJ2aWNlLmxvY2FsZSA9IGxhbmd1YWdlLmtleTtcbiAgICAgICAgdGhpcy51c2VyUHJlZmVyZW5jZXNTZXJ2aWNlLnNldCgndGV4dE9yaWVudGF0aW9uJywgbGFuZ3VhZ2UuZGlyZWN0aW9uIHx8ICdsdHInKTtcbiAgICB9XG5cbiAgICBzZXRMYW5ndWFnZXMoaXRlbXM6IExhbmd1YWdlSXRlbVtdKSB7XG4gICAgICAgIGlmIChpdGVtcyAmJiBpdGVtcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICB0aGlzLmxhbmd1YWdlcy5uZXh0KGl0ZW1zKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiJdfQ==