import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
import * as ɵngcc0 from '@angular/core';
export class CookieService {
    constructor() {
        this.cookieEnabled = false;
        if (navigator.cookieEnabled === false) {
            this.cookieEnabled = false;
        }
        this.setItem('test-cookie', 'test');
        this.cookieEnabled = document.cookie.indexOf('test-cookie') >= 0;
        this.deleteCookie('test-cookie');
    }
    isEnabled() {
        return this.cookieEnabled;
    }
    getItem(key) {
        const regexp = new RegExp('(?:' + key + '|;\s*' + key + ')=(.*?)(?:;|$)', 'g');
        const result = regexp.exec(document.cookie);
        return (result === null) ? null : result[1];
    }
    setItem(key, data, expiration = null, path = null) {
        document.cookie = `${key}=${data}` +
            (expiration ? ';expires=' + expiration.toUTCString() : '') +
            (path ? `;path=${path}` : ';path=/');
    }
    deleteCookie(key, path = null) {
        document.cookie = key + '=; expires=Thu, 01 Jan 1970 00:00:01 GMT;' +
            (path ? `;path=${path}` : ';path=/');
    }
    clear() {
    }
}
CookieService.ɵfac = function CookieService_Factory(t) { return new (t || CookieService)(); };
CookieService.ɵprov = i0.ɵɵdefineInjectable({ factory: function CookieService_Factory() { return new CookieService(); }, token: CookieService, providedIn: "root" });
CookieService.ctorParameters = () => [];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CookieService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return []; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29va2llLnNlcnZpY2UuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL2hvbWUvdHJhdmlzL2J1aWxkL0FsZnJlc2NvL2FsZnJlc2NvLW5nMi1jb21wb25lbnRzL2xpYi9jb3JlL3NlcnZpY2VzL2Nvb2tpZS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWlCQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDOztBQUlBLE1BQU0sT0FBTyxhQUFhO0FBQzFCLElBR0k7QUFDSixRQUhJLGtCQUFhLEdBQUcsS0FBSyxDQUFDO0FBQzFCLFFBR1EsSUFBSSxTQUFTLENBQUMsYUFBYSxLQUFLLEtBQUssRUFBRTtBQUMvQyxZQUFZLElBQUksQ0FBQyxhQUFhLEdBQUcsS0FBSyxDQUFDO0FBQ3ZDLFNBQVM7QUFDVCxRQUNRLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0FBQzVDLFFBQVEsSUFBSSxDQUFDLGFBQWEsR0FBRyxRQUFRLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDekUsUUFBUSxJQUFJLENBQUMsWUFBWSxDQUFDLGFBQWEsQ0FBQyxDQUFDO0FBQ3pDLElBQUksQ0FBQztBQUNMLElBS0ksU0FBUztBQUFLLFFBQ1YsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDO0FBQ2xDLElBQUksQ0FBQztBQUNMLElBTUksT0FBTyxDQUFDLEdBQVc7QUFBSSxRQUNuQixNQUFNLE1BQU0sR0FBRyxJQUFJLE1BQU0sQ0FBQyxLQUFLLEdBQUcsR0FBRyxHQUFHLE9BQU8sR0FBRyxHQUFHLEdBQUcsZ0JBQWdCLEVBQUUsR0FBRyxDQUFDLENBQUM7QUFDdkYsUUFBUSxNQUFNLE1BQU0sR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUNwRCxRQUFRLE9BQU8sQ0FBQyxNQUFNLEtBQUssSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3BELElBQUksQ0FBQztBQUNMLElBUUksT0FBTyxDQUFDLEdBQVcsRUFBRSxJQUFZLEVBQUUsYUFBMEIsSUFBSSxFQUFFLE9BQXNCLElBQUk7QUFBSSxRQUM3RixRQUFRLENBQUMsTUFBTSxHQUFHLEdBQUcsR0FBRyxJQUFJLElBQUksRUFBRTtBQUMxQyxZQUFZLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxXQUFXLEdBQUcsVUFBVSxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7QUFDdEUsWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsU0FBUyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDakQsSUFBSSxDQUFDO0FBQ0wsSUFNSSxZQUFZLENBQUMsR0FBVyxFQUFFLE9BQXNCLElBQUk7QUFBSSxRQUNwRCxRQUFRLENBQUMsTUFBTSxHQUFHLEdBQUcsR0FBRywyQ0FBMkM7QUFDM0UsWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsU0FBUyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDakQsSUFBSSxDQUFDO0FBQ0wsSUFFSSxLQUFLO0FBQ1QsSUFDSSxDQUFDO0FBQ0w7OEZBQUM7QUFDRCxxS0E5REs7QUFBQztBQUhMLFVBQVUsU0FBQyxrQkFDUixVQUFVLEVBQUUsTUFBTSxjQUNyQjs7Ozs7Z0RBR2U7QUFBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuQEluamVjdGFibGUoe1xuICAgIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBDb29raWVTZXJ2aWNlIHtcblxuICAgIGNvb2tpZUVuYWJsZWQgPSBmYWxzZTtcblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICAvLyBmb3IgY2VydGFpbiBzY2VuYXJpb3MgQ2hyb21lIG1heSBzYXkgJ3RydWUnIGJ1dCBoYXZlIGNvb2tpZXMgc3RpbGwgZGlzYWJsZWRcbiAgICAgICAgaWYgKG5hdmlnYXRvci5jb29raWVFbmFibGVkID09PSBmYWxzZSkge1xuICAgICAgICAgICAgdGhpcy5jb29raWVFbmFibGVkID0gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnNldEl0ZW0oJ3Rlc3QtY29va2llJywgJ3Rlc3QnKTtcbiAgICAgICAgdGhpcy5jb29raWVFbmFibGVkID0gZG9jdW1lbnQuY29va2llLmluZGV4T2YoJ3Rlc3QtY29va2llJykgPj0gMDtcbiAgICAgICAgdGhpcy5kZWxldGVDb29raWUoJ3Rlc3QtY29va2llJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGNvb2tpZXMgYXJlIGVuYWJsZWQuXG4gICAgICogQHJldHVybnMgVHJ1ZSBpZiBlbmFibGVkLCBmYWxzZSBvdGhlcndpc2VcbiAgICAgKi9cbiAgICBpc0VuYWJsZWQoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvb2tpZUVuYWJsZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0cmlldmVzIGEgY29va2llIGJ5IGl0cyBrZXkuXG4gICAgICogQHBhcmFtIGtleSBLZXkgdG8gaWRlbnRpZnkgdGhlIGNvb2tpZVxuICAgICAqIEByZXR1cm5zIFRoZSBjb29raWUgZGF0YSBvciBudWxsIGlmIGl0IGlzIG5vdCBmb3VuZFxuICAgICAqL1xuICAgIGdldEl0ZW0oa2V5OiBzdHJpbmcpOiBzdHJpbmcgfCBudWxsIHtcbiAgICAgICAgY29uc3QgcmVnZXhwID0gbmV3IFJlZ0V4cCgnKD86JyArIGtleSArICd8O1xccyonICsga2V5ICsgJyk9KC4qPykoPzo7fCQpJywgJ2cnKTtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gcmVnZXhwLmV4ZWMoZG9jdW1lbnQuY29va2llKTtcbiAgICAgICAgcmV0dXJuIChyZXN1bHQgPT09IG51bGwpID8gbnVsbCA6IHJlc3VsdFsxXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIGEgY29va2llLlxuICAgICAqIEBwYXJhbSBrZXkgS2V5IHRvIGlkZW50aWZ5IHRoZSBjb29raWVcbiAgICAgKiBAcGFyYW0gZGF0YSBEYXRhIHZhbHVlIHRvIHNldCBmb3IgdGhlIGNvb2tpZVxuICAgICAqIEBwYXJhbSBleHBpcmF0aW9uIEV4cGlyYXRpb24gZGF0ZSBvZiB0aGUgZGF0YVxuICAgICAqIEBwYXJhbSBwYXRoIFwiUGF0aG5hbWVcIiB0byBzdG9yZSB0aGUgY29va2llXG4gICAgICovXG4gICAgc2V0SXRlbShrZXk6IHN0cmluZywgZGF0YTogc3RyaW5nLCBleHBpcmF0aW9uOiBEYXRlIHwgbnVsbCA9IG51bGwsIHBhdGg6IHN0cmluZyB8IG51bGwgPSBudWxsKTogdm9pZCB7XG4gICAgICAgIGRvY3VtZW50LmNvb2tpZSA9IGAke2tleX09JHtkYXRhfWAgK1xuICAgICAgICAgICAgKGV4cGlyYXRpb24gPyAnO2V4cGlyZXM9JyArIGV4cGlyYXRpb24udG9VVENTdHJpbmcoKSA6ICcnKSArXG4gICAgICAgICAgICAocGF0aCA/IGA7cGF0aD0ke3BhdGh9YCA6ICc7cGF0aD0vJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRGVsZXRlIGEgY29va2llIEtleS5cbiAgICAgKiBAcGFyYW0ga2V5IEtleSB0byBpZGVudGlmeSB0aGUgY29va2llXG4gICAgICogQHBhcmFtIHBhdGggXCJQYXRobmFtZVwiIHRvIHN0b3JlIHRoZSBjb29raWVcbiAgICAgKi9cbiAgICBkZWxldGVDb29raWUoa2V5OiBzdHJpbmcsIHBhdGg6IHN0cmluZyB8IG51bGwgPSBudWxsKTogdm9pZCB7XG4gICAgICAgIGRvY3VtZW50LmNvb2tpZSA9IGtleSArICc9OyBleHBpcmVzPVRodSwgMDEgSmFuIDE5NzAgMDA6MDA6MDEgR01UOycgK1xuICAgICAgICAgICAgKHBhdGggPyBgO3BhdGg9JHtwYXRofWAgOiAnO3BhdGg9LycpO1xuICAgIH1cblxuICAgIC8qKiBQbGFjZWhvbGRlciBmb3IgdGVzdGluZyBwdXJwb3NlcyAtIGRvIG5vdCB1c2UuICovXG4gICAgY2xlYXIoKSB7XG4gICAgICAgIC8qIHBsYWNlaG9sZGVyIGZvciB0ZXN0aW5nIHB1cnBvc2VzICovXG4gICAgfVxufVxuIl19