/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { throwError as observableThrowError } from 'rxjs';
import { Injectable, Injector } from '@angular/core';
import { AuthenticationService } from './authentication.service';
import { catchError, mergeMap } from 'rxjs/operators';
import * as ɵngcc0 from '@angular/core';
export class AuthBearerInterceptor {
    constructor(injector) {
        this.injector = injector;
    }
    loadExcludedUrlsRegex() {
        const excludedUrls = this.authService.getBearerExcludedUrls();
        this.excludedUrlsRegex = excludedUrls.map((urlPattern) => new RegExp(urlPattern, 'gi')) || [];
    }
    intercept(req, next) {
        this.authService = this.injector.get(AuthenticationService);
        if (!this.authService || !this.authService.getBearerExcludedUrls()) {
            return next.handle(req);
        }
        if (!this.excludedUrlsRegex) {
            this.loadExcludedUrlsRegex();
        }
        const urlRequest = req.url;
        const shallPass = !!this.excludedUrlsRegex.find((regex) => regex.test(urlRequest));
        if (shallPass) {
            return next.handle(req)
                .pipe(catchError((error) => {
                return observableThrowError(error);
            }));
        }
        return this.authService.addTokenToHeader(req.headers)
            .pipe(mergeMap((headersWithBearer) => {
            const headerWithContentType = this.appendJsonContentType(headersWithBearer);
            const kcReq = req.clone({ headers: headerWithContentType });
            return next.handle(kcReq)
                .pipe(catchError((error) => {
                return observableThrowError(error);
            }));
        }));
    }
    appendJsonContentType(headers) {
        return headers.set('Content-Type', 'application/json;charset=UTF-8');
    }
}
AuthBearerInterceptor.ɵfac = function AuthBearerInterceptor_Factory(t) { return new (t || AuthBearerInterceptor)(ɵngcc0.ɵɵinject(ɵngcc0.Injector)); };
AuthBearerInterceptor.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: AuthBearerInterceptor, factory: AuthBearerInterceptor.ɵfac });
AuthBearerInterceptor.ctorParameters = () => [
    { type: Injector }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AuthBearerInterceptor, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc0.Injector }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0aC1iZWFyZXIuaW50ZXJjZXB0b3IuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL2hvbWUvdHJhdmlzL2J1aWxkL0FsZnJlc2NvL2FsZnJlc2NvLW5nMi1jb21wb25lbnRzL2xpYi9jb3JlL3NlcnZpY2VzL2F1dGgtYmVhcmVyLmludGVyY2VwdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFFSCxPQUFPLEVBQUUsVUFBVSxJQUFJLG9CQUFvQixFQUFjLE1BQU0sTUFBTSxDQUFDO0FBQ3RFLE9BQU8sRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBS3JELE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQ2pFLE9BQU8sRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7O0FBR3RELE1BQU0sT0FBTyxxQkFBcUI7QUFBRyxJQUluQyxZQUFvQixRQUFrQjtBQUFJLFFBQXRCLGFBQVEsR0FBUixRQUFRLENBQVU7QUFBQyxJQUFHLENBQUM7QUFDN0MsSUFDVSxxQkFBcUI7QUFDL0IsUUFBSSxNQUFNLFlBQVksR0FBYSxJQUFJLENBQUMsV0FBVyxDQUFDLHFCQUFxQixFQUFFLENBQUM7QUFDNUUsUUFBSSxJQUFJLENBQUMsaUJBQWlCLEdBQUcsWUFBWSxDQUFDLEdBQUcsQ0FBQyxDQUFDLFVBQVUsRUFBRSxFQUFFLENBQUMsSUFBSSxNQUFNLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDO0FBQ2xHLElBQ0UsQ0FBQztBQUNILElBQ0UsU0FBUyxDQUFDLEdBQXFCLEVBQUUsSUFBaUI7QUFDbkQsUUFFRyxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLHFCQUFxQixDQUFDLENBQUM7QUFDaEUsUUFDSSxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMscUJBQXFCLEVBQUUsRUFBRTtBQUN4RSxZQUFNLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUM5QixTQUFLO0FBQ0wsUUFDSSxJQUFJLENBQUMsSUFBSSxDQUFDLGlCQUFpQixFQUFFO0FBQ2pDLFlBQU0sSUFBSSxDQUFDLHFCQUFxQixFQUFFLENBQUM7QUFDbkMsU0FBSztBQUNMLFFBQ0ksTUFBTSxVQUFVLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQztBQUMvQixRQUFJLE1BQU0sU0FBUyxHQUFZLENBQUMsQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7QUFDaEcsUUFBSSxJQUFJLFNBQVMsRUFBRTtBQUNuQixZQUFNLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUM7QUFDN0IsaUJBQVMsSUFBSSxDQUNILFVBQVUsQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFO0FBQy9CLGdCQUFZLE9BQU8sb0JBQW9CLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDL0MsWUFBVSxDQUFDLENBQUMsQ0FDSCxDQUFDO0FBQ1YsU0FBSztBQUNMLFFBQ0ksT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUM7QUFDekQsYUFBTyxJQUFJLENBQ0gsUUFBUSxDQUFDLENBQUMsaUJBQWlCLEVBQUUsRUFBRTtBQUN2QyxZQUFVLE1BQU0scUJBQXFCLEdBQUcsSUFBSSxDQUFDLHFCQUFxQixDQUFDLGlCQUFpQixDQUFDLENBQUM7QUFDdEYsWUFBVSxNQUFNLEtBQUssR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFDLEVBQUUsT0FBTyxFQUFFLHFCQUFxQixFQUFDLENBQUMsQ0FBQztBQUNyRSxZQUFVLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUM7QUFDbkMsaUJBQWEsSUFBSSxDQUNILFVBQVUsQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFO0FBQ25DLGdCQUFnQixPQUFPLG9CQUFvQixDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ25ELFlBQWMsQ0FBQyxDQUFDLENBQ0osQ0FBQztBQUNiLFFBQU0sQ0FBQyxDQUFDLENBQ0QsQ0FBQztBQUNSLElBQUUsQ0FBQztBQUNILElBQ1UscUJBQXFCLENBQUMsT0FBb0I7QUFBSSxRQUNwRCxPQUFPLE9BQU8sQ0FBQyxHQUFHLENBQUMsY0FBYyxFQUFFLGdDQUFnQyxDQUFDLENBQUM7QUFDekUsSUFBRSxDQUFDO0FBQ0g7aURBdkRDLFVBQVU7K0hBQ1Q7QUFBQztBQUErQyxZQVQ3QixRQUFRO0FBQUc7Ozt5RUFBRTtBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgdGhyb3dFcnJvciBhcyBvYnNlcnZhYmxlVGhyb3dFcnJvciwgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgSW5qZWN0YWJsZSwgSW5qZWN0b3IgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7XG4gIEh0dHBIYW5kbGVyLCBIdHRwSW50ZXJjZXB0b3IsIEh0dHBSZXF1ZXN0LFxuICBIdHRwU2VudEV2ZW50LCBIdHRwSGVhZGVyUmVzcG9uc2UsIEh0dHBQcm9ncmVzc0V2ZW50LCBIdHRwUmVzcG9uc2UsIEh0dHBVc2VyRXZlbnQsIEh0dHBIZWFkZXJzXG59IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7IEF1dGhlbnRpY2F0aW9uU2VydmljZSB9IGZyb20gJy4vYXV0aGVudGljYXRpb24uc2VydmljZSc7XG5pbXBvcnQgeyBjYXRjaEVycm9yLCBtZXJnZU1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEF1dGhCZWFyZXJJbnRlcmNlcHRvciBpbXBsZW1lbnRzIEh0dHBJbnRlcmNlcHRvciB7XG4gIHByaXZhdGUgZXhjbHVkZWRVcmxzUmVnZXg6IFJlZ0V4cFtdO1xuICBwcml2YXRlIGF1dGhTZXJ2aWNlOiBBdXRoZW50aWNhdGlvblNlcnZpY2U7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBpbmplY3RvcjogSW5qZWN0b3IpIHsgfVxuXG4gIHByaXZhdGUgbG9hZEV4Y2x1ZGVkVXJsc1JlZ2V4KCkge1xuICAgIGNvbnN0IGV4Y2x1ZGVkVXJsczogc3RyaW5nW10gPSB0aGlzLmF1dGhTZXJ2aWNlLmdldEJlYXJlckV4Y2x1ZGVkVXJscygpO1xuICAgIHRoaXMuZXhjbHVkZWRVcmxzUmVnZXggPSBleGNsdWRlZFVybHMubWFwKCh1cmxQYXR0ZXJuKSA9PiBuZXcgUmVnRXhwKHVybFBhdHRlcm4sICdnaScpKSB8fCBbXTtcblxuICB9XG5cbiAgaW50ZXJjZXB0KHJlcTogSHR0cFJlcXVlc3Q8YW55PiwgbmV4dDogSHR0cEhhbmRsZXIpOlxuICAgIE9ic2VydmFibGU8SHR0cFNlbnRFdmVudCB8IEh0dHBIZWFkZXJSZXNwb25zZSB8IEh0dHBQcm9ncmVzc0V2ZW50IHwgSHR0cFJlc3BvbnNlPGFueT4gfCBIdHRwVXNlckV2ZW50PGFueT4+IHtcblxuICAgIHRoaXMuYXV0aFNlcnZpY2UgPSB0aGlzLmluamVjdG9yLmdldChBdXRoZW50aWNhdGlvblNlcnZpY2UpO1xuXG4gICAgaWYgKCF0aGlzLmF1dGhTZXJ2aWNlIHx8ICF0aGlzLmF1dGhTZXJ2aWNlLmdldEJlYXJlckV4Y2x1ZGVkVXJscygpKSB7XG4gICAgICByZXR1cm4gbmV4dC5oYW5kbGUocmVxKTtcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMuZXhjbHVkZWRVcmxzUmVnZXgpIHtcbiAgICAgIHRoaXMubG9hZEV4Y2x1ZGVkVXJsc1JlZ2V4KCk7XG4gICAgfVxuXG4gICAgY29uc3QgdXJsUmVxdWVzdCA9IHJlcS51cmw7XG4gICAgY29uc3Qgc2hhbGxQYXNzOiBib29sZWFuID0gISF0aGlzLmV4Y2x1ZGVkVXJsc1JlZ2V4LmZpbmQoKHJlZ2V4KSA9PiByZWdleC50ZXN0KHVybFJlcXVlc3QpKTtcbiAgICBpZiAoc2hhbGxQYXNzKSB7XG4gICAgICByZXR1cm4gbmV4dC5oYW5kbGUocmVxKVxuICAgICAgICAucGlwZShcbiAgICAgICAgICBjYXRjaEVycm9yKChlcnJvcikgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIG9ic2VydmFibGVUaHJvd0Vycm9yKGVycm9yKTtcbiAgICAgICAgICB9KVxuICAgICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLmF1dGhTZXJ2aWNlLmFkZFRva2VuVG9IZWFkZXIocmVxLmhlYWRlcnMpXG4gICAgICAucGlwZShcbiAgICAgICAgbWVyZ2VNYXAoKGhlYWRlcnNXaXRoQmVhcmVyKSA9PiB7XG4gICAgICAgICAgY29uc3QgaGVhZGVyV2l0aENvbnRlbnRUeXBlID0gdGhpcy5hcHBlbmRKc29uQ29udGVudFR5cGUoaGVhZGVyc1dpdGhCZWFyZXIpO1xuICAgICAgICAgIGNvbnN0IGtjUmVxID0gcmVxLmNsb25lKHsgaGVhZGVyczogaGVhZGVyV2l0aENvbnRlbnRUeXBlfSk7XG4gICAgICAgICAgcmV0dXJuIG5leHQuaGFuZGxlKGtjUmVxKVxuICAgICAgICAgICAgLnBpcGUoXG4gICAgICAgICAgICAgIGNhdGNoRXJyb3IoKGVycm9yKSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG9ic2VydmFibGVUaHJvd0Vycm9yKGVycm9yKTtcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgKTtcbiAgICAgIH0pXG4gICAgICApO1xuICB9XG5cbiAgcHJpdmF0ZSBhcHBlbmRKc29uQ29udGVudFR5cGUoaGVhZGVyczogSHR0cEhlYWRlcnMpOiBIdHRwSGVhZGVycyB7XG4gICAgcmV0dXJuIGhlYWRlcnMuc2V0KCdDb250ZW50LVR5cGUnLCAnYXBwbGljYXRpb24vanNvbjtjaGFyc2V0PVVURi04Jyk7XG4gIH1cblxufVxuIl19