import { Injectable } from '@angular/core';
import { FavoritesApi } from '@alfresco/js-api';
import { from, of } from 'rxjs';
import { AlfrescoApiService } from './alfresco-api.service';
import { UserPreferencesService } from './user-preferences.service';
import { catchError } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "./alfresco-api.service";
import * as i2 from "./user-preferences.service";
export class FavoritesApiService {
    constructor(apiService, preferences) {
        this.apiService = apiService;
        this.preferences = preferences;
    }
    get favoritesApi() {
        var _a;
        this._favoritesApi = (_a = this._favoritesApi) !== null && _a !== void 0 ? _a : new FavoritesApi(this.apiService.getInstance());
        return this._favoritesApi;
    }
    static remapEntry({ entry }) {
        entry.properties = {
            'cm:title': entry.title,
            'cm:description': entry.description
        };
        return { entry };
    }
    remapFavoritesData(data = {}) {
        var _a, _b;
        const pagination = (((_a = data === null || data === void 0 ? void 0 : data.list) === null || _a === void 0 ? void 0 : _a.pagination) || {});
        const entries = this
            .remapFavoriteEntries(((_b = data === null || data === void 0 ? void 0 : data.list) === null || _b === void 0 ? void 0 : _b.entries) || []);
        return {
            list: { entries, pagination }
        };
    }
    remapFavoriteEntries(entries) {
        return entries
            .map(({ entry: { target } }) => ({
            entry: target.file || target.folder
        }))
            .filter(({ entry }) => (!!entry))
            .map(FavoritesApiService.remapEntry);
    }
    getFavorites(personId, options) {
        const defaultOptions = {
            maxItems: this.preferences.paginationSize,
            skipCount: 0,
            where: '(EXISTS(target/file) OR EXISTS(target/folder))',
            include: ['properties', 'allowableOperations']
        };
        const queryOptions = Object.assign(defaultOptions, options);
        const promise = this.favoritesApi
            .listFavorites(personId, queryOptions)
            .then(this.remapFavoritesData);
        return from(promise).pipe(catchError((err) => of(err)));
    }
}
FavoritesApiService.ɵprov = i0.ɵɵdefineInjectable({ factory: function FavoritesApiService_Factory() { return new FavoritesApiService(i0.ɵɵinject(i1.AlfrescoApiService), i0.ɵɵinject(i2.UserPreferencesService)); }, token: FavoritesApiService, providedIn: "root" });
FavoritesApiService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
FavoritesApiService.ctorParameters = () => [
    { type: AlfrescoApiService },
    { type: UserPreferencesService }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmF2b3JpdGVzLWFwaS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Ii9ob21lL3RyYXZpcy9idWlsZC9BbGZyZXNjby9hbGZyZXNjby1uZzItY29tcG9uZW50cy9saWIvY29yZS8iLCJzb3VyY2VzIjpbInNlcnZpY2VzL2Zhdm9yaXRlcy1hcGkuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFpQkEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsWUFBWSxFQUE4QixNQUFNLGtCQUFrQixDQUFDO0FBQzVFLE9BQU8sRUFBYyxJQUFJLEVBQUUsRUFBRSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQzVDLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQzVELE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBQ3BFLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7OztBQUs1QyxNQUFNLE9BQU8sbUJBQW1CO0lBaUI1QixZQUNZLFVBQThCLEVBQzlCLFdBQW1DO1FBRG5DLGVBQVUsR0FBVixVQUFVLENBQW9CO1FBQzlCLGdCQUFXLEdBQVgsV0FBVyxDQUF3QjtJQUUvQyxDQUFDO0lBbEJELElBQUksWUFBWTs7UUFDWixJQUFJLENBQUMsYUFBYSxTQUFHLElBQUksQ0FBQyxhQUFhLG1DQUFJLElBQUksWUFBWSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQztRQUMzRixPQUFPLElBQUksQ0FBQyxhQUFhLENBQUM7SUFDOUIsQ0FBQztJQUVELE1BQU0sQ0FBQyxVQUFVLENBQUMsRUFBRSxLQUFLLEVBQU87UUFDNUIsS0FBSyxDQUFDLFVBQVUsR0FBRztZQUNmLFVBQVUsRUFBRSxLQUFLLENBQUMsS0FBSztZQUN2QixnQkFBZ0IsRUFBRSxLQUFLLENBQUMsV0FBVztTQUN0QyxDQUFDO1FBRUYsT0FBTyxFQUFFLEtBQUssRUFBRSxDQUFDO0lBQ3JCLENBQUM7SUFRRCxrQkFBa0IsQ0FBQyxPQUF1QixFQUFFOztRQUN4QyxNQUFNLFVBQVUsR0FBRyxDQUFDLE9BQUEsSUFBSSxhQUFKLElBQUksdUJBQUosSUFBSSxDQUFFLElBQUksMENBQUUsVUFBVSxLQUFJLEVBQUUsQ0FBQyxDQUFDO1FBQ2xELE1BQU0sT0FBTyxHQUFVLElBQUk7YUFDdEIsb0JBQW9CLENBQUMsT0FBQSxJQUFJLGFBQUosSUFBSSx1QkFBSixJQUFJLENBQUUsSUFBSSwwQ0FBRSxPQUFPLEtBQUksRUFBRSxDQUFDLENBQUM7UUFFckQsT0FBb0I7WUFDaEIsSUFBSSxFQUFFLEVBQUUsT0FBTyxFQUFFLFVBQVUsRUFBRTtTQUNoQyxDQUFDO0lBQ04sQ0FBQztJQUVELG9CQUFvQixDQUFDLE9BQWM7UUFDL0IsT0FBTyxPQUFPO2FBQ1QsR0FBRyxDQUFDLENBQUMsRUFBRSxLQUFLLEVBQUUsRUFBRSxNQUFNLEVBQUUsRUFBTyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1lBQ2xDLEtBQUssRUFBRSxNQUFNLENBQUMsSUFBSSxJQUFJLE1BQU0sQ0FBQyxNQUFNO1NBQ3RDLENBQUMsQ0FBQzthQUNGLE1BQU0sQ0FBQyxDQUFDLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDO2FBQ2hDLEdBQUcsQ0FBQyxtQkFBbUIsQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUM3QyxDQUFDO0lBUUQsWUFBWSxDQUFDLFFBQWdCLEVBQUUsT0FBYTtRQUN4QyxNQUFNLGNBQWMsR0FBRztZQUNuQixRQUFRLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxjQUFjO1lBQ3pDLFNBQVMsRUFBRSxDQUFDO1lBQ1osS0FBSyxFQUFFLGdEQUFnRDtZQUN2RCxPQUFPLEVBQUUsQ0FBQyxZQUFZLEVBQUUscUJBQXFCLENBQUM7U0FDakQsQ0FBQztRQUNGLE1BQU0sWUFBWSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsY0FBYyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQzVELE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxZQUFZO2FBQzVCLGFBQWEsQ0FBQyxRQUFRLEVBQUUsWUFBWSxDQUFDO2FBQ3JDLElBQUksQ0FBQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsQ0FBQztRQUVuQyxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQ3JCLFVBQVUsQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQy9CLENBQUM7SUFDTixDQUFDOzs7O1lBbEVKLFVBQVUsU0FBQztnQkFDUixVQUFVLEVBQUUsTUFBTTthQUNyQjs7O1lBTlEsa0JBQWtCO1lBQ2xCLHNCQUFzQiIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEZhdm9yaXRlc0FwaSwgTm9kZVBhZ2luZywgRmF2b3JpdGVQYWdpbmcgfSBmcm9tICdAYWxmcmVzY28vanMtYXBpJztcbmltcG9ydCB7IE9ic2VydmFibGUsIGZyb20sIG9mIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBBbGZyZXNjb0FwaVNlcnZpY2UgfSBmcm9tICcuL2FsZnJlc2NvLWFwaS5zZXJ2aWNlJztcbmltcG9ydCB7IFVzZXJQcmVmZXJlbmNlc1NlcnZpY2UgfSBmcm9tICcuL3VzZXItcHJlZmVyZW5jZXMuc2VydmljZSc7XG5pbXBvcnQgeyBjYXRjaEVycm9yIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5ASW5qZWN0YWJsZSh7XG4gICAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIEZhdm9yaXRlc0FwaVNlcnZpY2Uge1xuXG4gICAgX2Zhdm9yaXRlc0FwaTogRmF2b3JpdGVzQXBpO1xuICAgIGdldCBmYXZvcml0ZXNBcGkoKTogRmF2b3JpdGVzQXBpIHtcbiAgICAgICAgdGhpcy5fZmF2b3JpdGVzQXBpID0gdGhpcy5fZmF2b3JpdGVzQXBpID8/IG5ldyBGYXZvcml0ZXNBcGkodGhpcy5hcGlTZXJ2aWNlLmdldEluc3RhbmNlKCkpO1xuICAgICAgICByZXR1cm4gdGhpcy5fZmF2b3JpdGVzQXBpO1xuICAgIH1cblxuICAgIHN0YXRpYyByZW1hcEVudHJ5KHsgZW50cnkgfTogYW55KTogYW55IHtcbiAgICAgICAgZW50cnkucHJvcGVydGllcyA9IHtcbiAgICAgICAgICAgICdjbTp0aXRsZSc6IGVudHJ5LnRpdGxlLFxuICAgICAgICAgICAgJ2NtOmRlc2NyaXB0aW9uJzogZW50cnkuZGVzY3JpcHRpb25cbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4geyBlbnRyeSB9O1xuICAgIH1cblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBwcml2YXRlIGFwaVNlcnZpY2U6IEFsZnJlc2NvQXBpU2VydmljZSxcbiAgICAgICAgcHJpdmF0ZSBwcmVmZXJlbmNlczogVXNlclByZWZlcmVuY2VzU2VydmljZVxuICAgICkge1xuICAgIH1cblxuICAgIHJlbWFwRmF2b3JpdGVzRGF0YShkYXRhOiBGYXZvcml0ZVBhZ2luZyA9IHt9KTogTm9kZVBhZ2luZyB7XG4gICAgICAgIGNvbnN0IHBhZ2luYXRpb24gPSAoZGF0YT8ubGlzdD8ucGFnaW5hdGlvbiB8fCB7fSk7XG4gICAgICAgIGNvbnN0IGVudHJpZXM6IGFueVtdID0gdGhpc1xuICAgICAgICAgICAgLnJlbWFwRmF2b3JpdGVFbnRyaWVzKGRhdGE/Lmxpc3Q/LmVudHJpZXMgfHwgW10pO1xuXG4gICAgICAgIHJldHVybiA8Tm9kZVBhZ2luZz4ge1xuICAgICAgICAgICAgbGlzdDogeyBlbnRyaWVzLCBwYWdpbmF0aW9uIH1cbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICByZW1hcEZhdm9yaXRlRW50cmllcyhlbnRyaWVzOiBhbnlbXSkge1xuICAgICAgICByZXR1cm4gZW50cmllc1xuICAgICAgICAgICAgLm1hcCgoeyBlbnRyeTogeyB0YXJnZXQgfSB9OiBhbnkpID0+ICh7XG4gICAgICAgICAgICAgICAgZW50cnk6IHRhcmdldC5maWxlIHx8IHRhcmdldC5mb2xkZXJcbiAgICAgICAgICAgIH0pKVxuICAgICAgICAgICAgLmZpbHRlcigoeyBlbnRyeSB9KSA9PiAoISFlbnRyeSkpXG4gICAgICAgICAgICAubWFwKEZhdm9yaXRlc0FwaVNlcnZpY2UucmVtYXBFbnRyeSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgZmF2b3JpdGVzIGZvciBhIHVzZXIuXG4gICAgICogQHBhcmFtIHBlcnNvbklkIElEIG9mIHRoZSB1c2VyXG4gICAgICogQHBhcmFtIG9wdGlvbnMgT3B0aW9ucyBzdXBwb3J0ZWQgYnkgSlMtQVBJXG4gICAgICogQHJldHVybnMgTGlzdCBvZiBmYXZvcml0ZXNcbiAgICAgKi9cbiAgICBnZXRGYXZvcml0ZXMocGVyc29uSWQ6IHN0cmluZywgb3B0aW9ucz86IGFueSk6IE9ic2VydmFibGU8Tm9kZVBhZ2luZz4ge1xuICAgICAgICBjb25zdCBkZWZhdWx0T3B0aW9ucyA9IHtcbiAgICAgICAgICAgIG1heEl0ZW1zOiB0aGlzLnByZWZlcmVuY2VzLnBhZ2luYXRpb25TaXplLFxuICAgICAgICAgICAgc2tpcENvdW50OiAwLFxuICAgICAgICAgICAgd2hlcmU6ICcoRVhJU1RTKHRhcmdldC9maWxlKSBPUiBFWElTVFModGFyZ2V0L2ZvbGRlcikpJyxcbiAgICAgICAgICAgIGluY2x1ZGU6IFsncHJvcGVydGllcycsICdhbGxvd2FibGVPcGVyYXRpb25zJ11cbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgcXVlcnlPcHRpb25zID0gT2JqZWN0LmFzc2lnbihkZWZhdWx0T3B0aW9ucywgb3B0aW9ucyk7XG4gICAgICAgIGNvbnN0IHByb21pc2UgPSB0aGlzLmZhdm9yaXRlc0FwaVxuICAgICAgICAgICAgLmxpc3RGYXZvcml0ZXMocGVyc29uSWQsIHF1ZXJ5T3B0aW9ucylcbiAgICAgICAgICAgIC50aGVuKHRoaXMucmVtYXBGYXZvcml0ZXNEYXRhKTtcblxuICAgICAgICByZXR1cm4gZnJvbShwcm9taXNlKS5waXBlKFxuICAgICAgICAgICAgY2F0Y2hFcnJvcigoZXJyKSA9PiBvZihlcnIpKVxuICAgICAgICApO1xuICAgIH1cbn1cbiJdfQ==