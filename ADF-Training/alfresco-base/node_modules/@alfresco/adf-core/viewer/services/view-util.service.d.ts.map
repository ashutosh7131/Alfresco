{"version":3,"file":"view-util.service.d.ts","sources":["view-util.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { ContentApi, RenditionEntry, RenditionsApi, VersionsApi } from '@alfresco/js-api';\nimport { AlfrescoApiService } from '../../services/alfresco-api.service';\nimport { LogService } from '../../services/log.service';\nimport { Subject } from 'rxjs';\nimport { Track } from '../models/viewer.model';\nimport { TranslationService } from '../../services/translation.service';\nexport declare class ViewUtilService {\n    private apiService;\n    private logService;\n    private translateService;\n    static TARGET: string;\n    static ContentGroup: {\n        IMAGE: string;\n        MEDIA: string;\n        PDF: string;\n        TEXT: string;\n    };\n    static SUBTITLES_RENDITION_NAME: string;\n    maxRetries: number;\n    private mimeTypes;\n    TRY_TIMEOUT: number;\n    viewerTypeChange: Subject<string>;\n    urlFileContentChange: Subject<string>;\n    _renditionsApi: RenditionsApi;\n    get renditionsApi(): RenditionsApi;\n    _contentApi: ContentApi;\n    get contentApi(): ContentApi;\n    _versionsApi: VersionsApi;\n    get versionsApi(): VersionsApi;\n    constructor(apiService: AlfrescoApiService, logService: LogService, translateService: TranslationService);\n    printFile(url: string, type: string): void;\n    printFileGeneric(objectId: string, mimeType: string): void;\n    getRenditionUrl(nodeId: string, type: string, renditionExists: boolean): string;\n    private waitRendition;\n    getViewerTypeByMimeType(mimeType: string): string;\n    wait(ms: number): Promise<any>;\n    getRendition(nodeId: string, renditionId: string): Promise<RenditionEntry>;\n    displayNodeRendition(nodeId: string, versionId?: string): Promise<void>;\n    private resolveNodeRendition;\n    private waitNodeRendition;\n    private handleNodeRendition;\n    generateMediaTracks(nodeId: string): Promise<Track[]>;\n    private isRenditionAvailable;\n}\n"]}