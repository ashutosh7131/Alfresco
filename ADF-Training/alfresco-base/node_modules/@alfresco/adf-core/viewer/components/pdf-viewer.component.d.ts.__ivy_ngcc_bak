/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { TemplateRef, OnChanges, OnDestroy, EventEmitter, SimpleChanges } from '@angular/core';
import { MatDialog } from '@angular/material/dialog';
import { LogService } from '../../services/log.service';
import { RenderingQueueServices } from '../services/rendering-queue.services';
import { AppConfigService } from './../../app-config/app-config.service';
import { PDFDocumentProxy, PDFSource } from 'pdfjs-dist';
export declare class PdfViewerComponent implements OnChanges, OnDestroy {
    private dialog;
    private renderingQueueServices;
    private logService;
    private appConfigService;
    urlFile: string;
    blobFile: Blob;
    nameFile: string;
    showToolbar: boolean;
    allowThumbnails: boolean;
    thumbnailsTemplate: TemplateRef<any>;
    cacheType: string;
    rendered: EventEmitter<any>;
    error: EventEmitter<any>;
    close: EventEmitter<any>;
    page: number;
    displayPage: number;
    totalPages: number;
    loadingPercent: number;
    pdfViewer: any;
    currentScaleMode: string;
    currentScale: number;
    MAX_AUTO_SCALE: number;
    DEFAULT_SCALE_DELTA: number;
    MIN_SCALE: number;
    MAX_SCALE: number;
    loadingTask: any;
    isPanelDisabled: boolean;
    showThumbnails: boolean;
    pdfThumbnailsContext: {
        viewer: any;
    };
    randomPdfId: string;
    get currentScaleText(): string;
    private eventBus;
    private pdfjsDefaultOptions;
    private pdfjsWorkerDestroy$;
    private onDestroy$;
    constructor(dialog: MatDialog, renderingQueueServices: RenderingQueueServices, logService: LogService, appConfigService: AppConfigService);
    getUserScaling(): number;
    checkLimits(scaleConfig: number): number;
    ngOnChanges(changes: SimpleChanges): void;
    executePdf(pdfOptions: PDFSource): void;
    initPDFViewer(pdfDocument: PDFDocumentProxy): void;
    ngOnDestroy(): void;
    private destroyPdJsWorker;
    toggleThumbnails(): void;
    scalePage(scaleMode: any): void;
    private getDocumentContainer;
    private getViewer;
    checkPageFitInContainer(scale: number): number;
    setScaleUpdatePages(newScale: number): void;
    isSameScale(oldScale: number, newScale: number): boolean;
    isLandscape(width: number, height: number): boolean;
    onResize(): void;
    pageFit(): void;
    zoomIn(ticks?: number): void;
    zoomOut(ticks?: number): void;
    previousPage(): void;
    nextPage(): void;
    inputPage(page: string): void;
    onPageChange(event: any): void;
    onPdfPassword(callback: any, reason: any): void;
    onPageRendered(): void;
    onPagesLoaded(): void;
    handleKeyboardEvent(event: KeyboardEvent): void;
    private generateUuid;
}
