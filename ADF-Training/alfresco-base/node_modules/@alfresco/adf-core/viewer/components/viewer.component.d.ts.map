{"version":3,"file":"viewer.component.d.ts","sources":["viewer.component.d.ts"],"names":[],"mappingssourcesContent":["/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { EventEmitter, ElementRef, OnChanges, TemplateRef, OnInit, OnDestroy, ChangeDetectorRef } from '@angular/core';\nimport { Node, NodeEntry, VersionEntry, SharedlinksApi, VersionsApi, NodesApi, ContentApi } from '@alfresco/js-api';\nimport { BaseEvent } from '../../events';\nimport { AlfrescoApiService } from '../../services/alfresco-api.service';\nimport { LogService } from '../../services/log.service';\nimport { ViewerMoreActionsComponent } from './viewer-more-actions.component';\nimport { ViewerOpenWithComponent } from './viewer-open-with.component';\nimport { ViewerSidebarComponent } from './viewer-sidebar.component';\nimport { ViewerToolbarComponent } from './viewer-toolbar.component';\nimport { ViewUtilService } from '../services/view-util.service';\nimport { AppExtensionService, ViewerExtensionRef } from '@alfresco/adf-extensions';\nimport { MatDialog } from '@angular/material/dialog';\nimport { ContentService } from '../../services/content.service';\nimport { UploadService } from '../../services/upload.service';\nexport declare class ViewerComponent implements OnChanges, OnInit, OnDestroy {\n    private apiService;\n    private viewUtilService;\n    private logService;\n    private extensionService;\n    private contentService;\n    private uploadService;\n    private el;\n    dialog: MatDialog;\n    private cdr;\n    toolbar: ViewerToolbarComponent;\n    sidebar: ViewerSidebarComponent;\n    mnuOpenWith: ViewerOpenWithComponent;\n    mnuMoreActions: ViewerMoreActionsComponent;\n    urlFile: string;\n    urlFileViewer: string;\n    blobFile: Blob;\n    nodeId: string;\n    versionId: string;\n    sharedLinkId: string;\n    overlayMode: boolean;\n    showViewer: boolean;\n    showToolbar: boolean;\n    displayName: string;\n    allowGoBack: boolean;\n    allowDownload: boolean;\n    allowPrint: boolean;\n    allowFullScreen: boolean;\n    allowNavigate: boolean;\n    canNavigateBefore: boolean;\n    canNavigateNext: boolean;\n    allowLeftSidebar: boolean;\n    allowRightSidebar: boolean;\n    allowThumbnails: boolean;\n    showRightSidebar: boolean;\n    showLeftSidebar: boolean;\n    sidebarRightTemplate: TemplateRef<any>;\n    sidebarLeftTemplate: TemplateRef<any>;\n    thumbnailsTemplate: TemplateRef<any>;\n    mimeType: string;\n    fileName: string;\n    maxRetries: number;\n    goBack: EventEmitter<BaseEvent<any>>;\n    print: EventEmitter<BaseEvent<any>>;\n    showViewerChange: EventEmitter<boolean>;\n    extensionChange: EventEmitter<string>;\n    navigateBefore: EventEmitter<MouseEvent | KeyboardEvent>;\n    navigateNext: EventEmitter<MouseEvent | KeyboardEvent>;\n    invalidSharedLink: EventEmitter<any>;\n    TRY_TIMEOUT: number;\n    viewerType: string;\n    isLoading: boolean;\n    nodeEntry: NodeEntry;\n    versionEntry: VersionEntry;\n    extensionTemplates: {\n        template: TemplateRef<any>;\n        isVisible: boolean;\n    }[];\n    urlFileContent: string;\n    otherMenu: any;\n    extension: string;\n    sidebarRightTemplateContext: {\n        node: Node;\n    };\n    sidebarLeftTemplateContext: {\n        node: Node;\n    };\n    fileTitle: string;\n    get viewerExtensions(): ViewerExtensionRef[];\n    get externalExtensions(): string[];\n    private _externalViewer;\n    get externalViewer(): ViewerExtensionRef;\n    readOnly: boolean;\n    private cacheBusterNumber;\n    cacheTypeForContent: string;\n    private extensions;\n    private mimeTypes;\n    private onDestroy$;\n    private shouldCloseViewer;\n    private keyDown$;\n    _sharedLinksApi: SharedlinksApi;\n    get sharedLinksApi(): SharedlinksApi;\n    _versionsApi: VersionsApi;\n    get versionsApi(): VersionsApi;\n    _nodesApi: NodesApi;\n    get nodesApi(): NodesApi;\n    _contentApi: ContentApi;\n    get contentApi(): ContentApi;\n    constructor(apiService: AlfrescoApiService, viewUtilService: ViewUtilService, logService: LogService, extensionService: AppExtensionService, contentService: ContentService, uploadService: UploadService, el: ElementRef, dialog: MatDialog, cdr: ChangeDetectorRef);\n    isSourceDefined(): boolean;\n    ngOnInit(): void;\n    private getNodeVersionProperty;\n    ngOnDestroy(): void;\n    private onNodeUpdated;\n    ngOnChanges(): void;\n    private setupSharedLink;\n    private setupNode;\n    private setUpBlobData;\n    private setUpUrlFile;\n    private setUpNodeFile;\n    private getViewerType;\n    private setUpSharedLinkFile;\n    toggleSidebar(): void;\n    toggleLeftSidebar(): void;\n    private getDisplayName;\n    scrollTop(): void;\n    getViewerTypeByMimeType(mimeType: string): string;\n    getViewerTypeByExtension(extension: string): \"custom\" | \"media\" | \"image\" | \"text\" | \"unknown\" | \"pdf\" | \"external\";\n    onBackButtonClick(): void;\n    onNavigateBeforeClick(event: MouseEvent | KeyboardEvent): void;\n    onNavigateNextClick(event: MouseEvent | KeyboardEvent): void;\n    close(): void;\n    getFilenameFromUrl(url: string): string;\n    getFileExtension(fileName: string): string;\n    private isExternalViewer;\n    isCustomViewerExtension(extension: string): boolean;\n    handleKeyboardEvent(event: KeyboardEvent): void;\n    printContent(): void;\n    enterFullScreen(): void;\n    private displaySharedLinkRendition;\n    checkExtensions(extensionAllowed: any): any;\n    onSubmitFile(newImageBlob: Blob): void;\n    onUnsupportedFile(): void;\n    private closeOverlayManager;\n    private generateCacheBusterNumber;\n}\n"]}