{"version":3,"file":"pdf-viewer.component.d.ts","sources":["pdf-viewer.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { TemplateRef, OnChanges, OnDestroy, EventEmitter, SimpleChanges } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { LogService } from '../../services/log.service';\nimport { RenderingQueueServices } from '../services/rendering-queue.services';\nimport { AppConfigService } from './../../app-config/app-config.service';\nimport { PDFDocumentProxy, PDFSource } from 'pdfjs-dist';\nexport declare class PdfViewerComponent implements OnChanges, OnDestroy {\n    private dialog;\n    private renderingQueueServices;\n    private logService;\n    private appConfigService;\n    urlFile: string;\n    blobFile: Blob;\n    nameFile: string;\n    showToolbar: boolean;\n    allowThumbnails: boolean;\n    thumbnailsTemplate: TemplateRef<any>;\n    cacheType: string;\n    rendered: EventEmitter<any>;\n    error: EventEmitter<any>;\n    close: EventEmitter<any>;\n    page: number;\n    displayPage: number;\n    totalPages: number;\n    loadingPercent: number;\n    pdfViewer: any;\n    currentScaleMode: string;\n    currentScale: number;\n    MAX_AUTO_SCALE: number;\n    DEFAULT_SCALE_DELTA: number;\n    MIN_SCALE: number;\n    MAX_SCALE: number;\n    loadingTask: any;\n    isPanelDisabled: boolean;\n    showThumbnails: boolean;\n    pdfThumbnailsContext: {\n        viewer: any;\n    };\n    randomPdfId: string;\n    get currentScaleText(): string;\n    private eventBus;\n    private pdfjsDefaultOptions;\n    private pdfjsWorkerDestroy$;\n    private onDestroy$;\n    constructor(dialog: MatDialog, renderingQueueServices: RenderingQueueServices, logService: LogService, appConfigService: AppConfigService);\n    getUserScaling(): number;\n    checkLimits(scaleConfig: number): number;\n    ngOnChanges(changes: SimpleChanges): void;\n    executePdf(pdfOptions: PDFSource): void;\n    initPDFViewer(pdfDocument: PDFDocumentProxy): void;\n    ngOnDestroy(): void;\n    private destroyPdJsWorker;\n    toggleThumbnails(): void;\n    scalePage(scaleMode: any): void;\n    private getDocumentContainer;\n    private getViewer;\n    checkPageFitInContainer(scale: number): number;\n    setScaleUpdatePages(newScale: number): void;\n    isSameScale(oldScale: number, newScale: number): boolean;\n    isLandscape(width: number, height: number): boolean;\n    onResize(): void;\n    pageFit(): void;\n    zoomIn(ticks?: number): void;\n    zoomOut(ticks?: number): void;\n    previousPage(): void;\n    nextPage(): void;\n    inputPage(page: string): void;\n    onPageChange(event: any): void;\n    onPdfPassword(callback: any, reason: any): void;\n    onPageRendered(): void;\n    onPagesLoaded(): void;\n    handleKeyboardEvent(event: KeyboardEvent): void;\n    private generateUuid;\n}\n"]}