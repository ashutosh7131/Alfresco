/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { EventEmitter, OnInit } from '@angular/core';
import { FormGroup, FormBuilder, FormControl } from '@angular/forms';
import { AppConfigService } from '../app-config/app-config.service';
import { StorageService } from '../services/storage.service';
import { AlfrescoApiService } from '../services/alfresco-api.service';
import * as ɵngcc0 from '@angular/core';
export declare class HostSettingsComponent implements OnInit {
    private formBuilder;
    private storageService;
    private alfrescoApiService;
    private appConfig;
    HOST_REGEX: string;
    providers: string[];
    showSelectProviders: boolean;
    form: FormGroup;
    error: EventEmitter<string>;
    cancel: EventEmitter<boolean>;
    success: EventEmitter<boolean>;
    constructor(formBuilder: FormBuilder, storageService: StorageService, alfrescoApiService: AlfrescoApiService, appConfig: AppConfigService);
    ngOnInit(): void;
    private removeFormGroups;
    private addFormGroups;
    private addOAuthFormGroup;
    private addBPMFormControl;
    private addIdentityHostFormControl;
    private addECMFormControl;
    private createOAuthFormGroup;
    private createBPMFormControl;
    private createIdentityFormControl;
    private createECMFormControl;
    onCancel(): void;
    onSubmit(values: any): void;
    keyDownFunction(event: any): void;
    private saveOAuthValues;
    private saveBPMValues;
    private saveECMValues;
    isBPM(): boolean;
    isECM(): boolean;
    isALL(): boolean;
    isOAUTH(): boolean;
    get providersControl(): FormControl;
    get bpmHost(): FormControl;
    get ecmHost(): FormControl;
    get host(): FormControl;
    get identityHost(): FormControl;
    get clientId(): FormControl;
    get scope(): FormControl;
    get secretId(): FormControl;
    get implicitFlow(): FormControl;
    get silentLogin(): FormControl;
    get redirectUri(): FormControl;
    get publicUrls(): FormControl;
    get redirectUriLogout(): FormControl;
    get oauthConfig(): FormControl;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<HostSettingsComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<HostSettingsComponent, "adf-host-settings", never, { "providers": "providers"; }, { "error": "error"; "cancel": "cancel"; "success": "success"; }, never, never>;
}

//# sourceMappingURL=host-settings.component.d.ts.map