{"version":3,"file":"sites.service.d.ts","sources":["sites.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Observable } from 'rxjs';\nimport { AlfrescoApiService } from './alfresco-api.service';\nimport { MinimalNode, SiteBodyCreate, SiteEntry, SiteGroupEntry, SiteGroupPaging, SiteMemberEntry, SiteMemberPaging, SiteMembershipBodyCreate, SiteMembershipBodyUpdate, SiteMembershipRequestWithPersonPaging, SitePaging, SitesApi } from '@alfresco/js-api';\nimport { LogService } from './log.service';\nexport declare class SitesService {\n    private apiService;\n    private logService;\n    _sitesApi: SitesApi;\n    get sitesApi(): SitesApi;\n    constructor(apiService: AlfrescoApiService, logService: LogService);\n    createSite(siteBody: SiteBodyCreate): Observable<SiteEntry>;\n    getSites(opts?: any): Observable<SitePaging>;\n    getSite(siteId: string, opts?: any): Observable<SiteEntry | {}>;\n    deleteSite(siteId: string, permanentFlag?: boolean): Observable<any>;\n    getSiteContent(siteId: string): Observable<SiteEntry | {}>;\n    getSiteMembers(siteId: string): Observable<SiteEntry | {}>;\n    listSiteMemberships(siteId: string, opts: any): Observable<SiteMemberPaging>;\n    getEcmCurrentLoggedUserName(): string;\n    getSiteNameFromNodePath(node: MinimalNode): string;\n    getSiteMembershipRequests(opts?: any): Observable<SiteMembershipRequestWithPersonPaging>;\n    createSiteMembership(siteId: string, siteMembershipBodyCreate: SiteMembershipBodyCreate, opts?: any): Observable<SiteMemberEntry>;\n    updateSiteMembership(siteId: string, personId: string, siteMembershipBodyUpdate: SiteMembershipBodyUpdate, opts?: any): Observable<SiteMemberEntry>;\n    deleteSiteMembership(siteId: string, personId: string): Observable<void>;\n    approveSiteMembershipRequest(siteId: string, inviteeId: string, opts?: any): Observable<SiteMembershipRequestWithPersonPaging>;\n    rejectSiteMembershipRequest(siteId: string, inviteeId: string, opts?: any): Observable<SiteMembershipRequestWithPersonPaging>;\n    listSiteGroups(siteId: string, opts?: any): Observable<SiteGroupPaging>;\n    createSiteGroupMembership(siteId: string, siteMembershipBodyCreate: SiteMembershipBodyCreate): Observable<SiteGroupEntry>;\n    getSiteGroupMembership(siteId: string, groupId: string): Observable<SiteGroupEntry>;\n    updateSiteGroupMembership(siteId: string, groupId: string, siteMembershipBodyUpdate: SiteMembershipBodyUpdate): Observable<SiteGroupEntry>;\n    deleteSiteGroupMembership(siteId: string, groupId: string): Observable<void>;\n    private handleError;\n}\n"]}