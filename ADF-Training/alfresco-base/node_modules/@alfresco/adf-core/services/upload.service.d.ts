/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { EventEmitter } from '@angular/core';
import { Subject } from 'rxjs';
import { AppConfigService } from '../app-config/app-config.service';
import { FileUploadCompleteEvent, FileUploadDeleteEvent, FileUploadErrorEvent, FileUploadEvent } from '../events/file.event';
import { FileModel } from '../models/file.model';
import { AlfrescoApiService } from './alfresco-api.service';
import { DiscoveryApiService } from './discovery-api.service';
import { NodesApi, UploadApi, VersionsApi } from '@alfresco/js-api';
import * as ɵngcc0 from '@angular/core';
export declare class UploadService {
    protected apiService: AlfrescoApiService;
    private appConfigService;
    private discoveryApiService;
    private cache;
    private totalComplete;
    private totalAborted;
    private totalError;
    private excludedFileList;
    private excludedFoldersList;
    private matchingOptions;
    private folderMatchingOptions;
    private abortedFile;
    private isThumbnailGenerationEnabled;
    activeTask: Promise<any>;
    queue: FileModel[];
    queueChanged: Subject<FileModel[]>;
    fileUpload: Subject<FileUploadEvent>;
    fileUploadStarting: Subject<FileUploadEvent>;
    fileUploadCancelled: Subject<FileUploadEvent>;
    fileUploadProgress: Subject<FileUploadEvent>;
    fileUploadAborted: Subject<FileUploadEvent>;
    fileUploadError: Subject<FileUploadErrorEvent>;
    fileUploadComplete: Subject<FileUploadCompleteEvent>;
    fileUploadDeleted: Subject<FileUploadDeleteEvent>;
    fileDeleted: Subject<string>;
    _uploadApi: UploadApi;
    get uploadApi(): UploadApi;
    _nodesApi: NodesApi;
    get nodesApi(): NodesApi;
    _versionsApi: VersionsApi;
    get versionsApi(): VersionsApi;
    constructor(apiService: AlfrescoApiService, appConfigService: AppConfigService, discoveryApiService: DiscoveryApiService);
    isUploading(): boolean;
    getQueue(): FileModel[];
    addToQueue(...files: FileModel[]): FileModel[];
    private filterElement;
    private isParentFolderAllowed;
    private isFileNameAllowed;
    uploadFilesInTheQueue(successEmitter?: EventEmitter<any>, errorEmitter?: EventEmitter<any>): void;
    cancelUpload(...files: FileModel[]): void;
    clearQueue(): void;
    getUploadPromise(file: FileModel): any;
    private beginUpload;
    private onUploadStarting;
    private onUploadProgress;
    private onUploadError;
    private onUploadComplete;
    private onUploadAborted;
    private onUploadCancelled;
    private onUploadDeleted;
    private getAction;
    private deleteAbortedNode;
    private deleteAbortedNodeVersion;
    private isSaveToAbortFile;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<UploadService, never>;
}

//# sourceMappingURL=upload.service.d.ts.map