/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Observable } from 'rxjs';
import { AlfrescoApiService } from './alfresco-api.service';
import { MinimalNode, SiteBodyCreate, SiteEntry, SiteGroupEntry, SiteGroupPaging, SiteMemberEntry, SiteMemberPaging, SiteMembershipBodyCreate, SiteMembershipBodyUpdate, SiteMembershipRequestWithPersonPaging, SitePaging, SitesApi } from '@alfresco/js-api';
import { LogService } from './log.service';
export declare class SitesService {
    private apiService;
    private logService;
    _sitesApi: SitesApi;
    get sitesApi(): SitesApi;
    constructor(apiService: AlfrescoApiService, logService: LogService);
    createSite(siteBody: SiteBodyCreate): Observable<SiteEntry>;
    getSites(opts?: any): Observable<SitePaging>;
    getSite(siteId: string, opts?: any): Observable<SiteEntry | {}>;
    deleteSite(siteId: string, permanentFlag?: boolean): Observable<any>;
    getSiteContent(siteId: string): Observable<SiteEntry | {}>;
    getSiteMembers(siteId: string): Observable<SiteEntry | {}>;
    listSiteMemberships(siteId: string, opts: any): Observable<SiteMemberPaging>;
    getEcmCurrentLoggedUserName(): string;
    getSiteNameFromNodePath(node: MinimalNode): string;
    getSiteMembershipRequests(opts?: any): Observable<SiteMembershipRequestWithPersonPaging>;
    createSiteMembership(siteId: string, siteMembershipBodyCreate: SiteMembershipBodyCreate, opts?: any): Observable<SiteMemberEntry>;
    updateSiteMembership(siteId: string, personId: string, siteMembershipBodyUpdate: SiteMembershipBodyUpdate, opts?: any): Observable<SiteMemberEntry>;
    deleteSiteMembership(siteId: string, personId: string): Observable<void>;
    approveSiteMembershipRequest(siteId: string, inviteeId: string, opts?: any): Observable<SiteMembershipRequestWithPersonPaging>;
    rejectSiteMembershipRequest(siteId: string, inviteeId: string, opts?: any): Observable<SiteMembershipRequestWithPersonPaging>;
    listSiteGroups(siteId: string, opts?: any): Observable<SiteGroupPaging>;
    createSiteGroupMembership(siteId: string, siteMembershipBodyCreate: SiteMembershipBodyCreate): Observable<SiteGroupEntry>;
    getSiteGroupMembership(siteId: string, groupId: string): Observable<SiteGroupEntry>;
    updateSiteGroupMembership(siteId: string, groupId: string, siteMembershipBodyUpdate: SiteMembershipBodyUpdate): Observable<SiteGroupEntry>;
    deleteSiteGroupMembership(siteId: string, groupId: string): Observable<void>;
    private handleError;
}
