/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { TranslateService } from '@ngx-translate/core';
import { Observable } from 'rxjs';
import { AppConfigService } from '../app-config/app-config.service';
import { StorageService } from './storage.service';
import { AlfrescoApiService } from './alfresco-api.service';
export declare enum UserPreferenceValues {
    PaginationSize = "paginationSize",
    Locale = "locale",
    SupportedPageSizes = "supportedPageSizes",
    ExpandedSideNavStatus = "expandedSidenav"
}
export declare class UserPreferencesService {
    translate: TranslateService;
    private appConfig;
    private storage;
    private alfrescoApiService;
    defaults: {
        paginationSize: number;
        supportedPageSizes: number[];
        locale: string;
        expandedSidenav: boolean;
    };
    private userPreferenceStatus;
    private onChangeSubject;
    onChange: Observable<any>;
    constructor(translate: TranslateService, appConfig: AppConfigService, storage: StorageService, alfrescoApiService: AlfrescoApiService);
    private initUserPreferenceStatus;
    private initUserLanguage;
    select(property: string): Observable<any>;
    get(property: string, defaultValue?: string): string;
    set(property: string, value: any): void;
    setWithoutStore(property: string, value: any): void;
    hasItem(property: string): boolean;
    getStoragePrefix(): string;
    setStoragePrefix(value: string): void;
    getPropertyKey(property: string): string;
    get supportedPageSizes(): number[];
    set supportedPageSizes(value: number[]);
    set paginationSize(value: number);
    get paginationSize(): number;
    get locale(): string;
    set locale(value: string);
    getDefaultLocale(): string;
    private getLanguageByKey;
}
