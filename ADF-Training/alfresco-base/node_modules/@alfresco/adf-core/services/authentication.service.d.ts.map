{"version":3,"file":"authentication.service.d.ts","sources":["authentication.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Observable, ReplaySubject } from 'rxjs';\nimport { AlfrescoApiService } from './alfresco-api.service';\nimport { CookieService } from './cookie.service';\nimport { LogService } from './log.service';\nimport { RedirectionModel } from '../models/redirection.model';\nimport { AppConfigService } from '../app-config/app-config.service';\nimport { PeopleApi, UserProfileApi, UserRepresentation } from '@alfresco/js-api';\nimport { HttpHeaders } from '@angular/common/http';\nimport { StorageService } from './storage.service';\nexport declare class AuthenticationService {\n    private appConfig;\n    private storageService;\n    private alfrescoApi;\n    private cookie;\n    private logService;\n    private redirectUrl;\n    private bearerExcludedUrls;\n    onLogin: ReplaySubject<any>;\n    onLogout: ReplaySubject<any>;\n    _peopleApi: PeopleApi;\n    get peopleApi(): PeopleApi;\n    _profileApi: UserProfileApi;\n    get profileApi(): UserProfileApi;\n    constructor(appConfig: AppConfigService, storageService: StorageService, alfrescoApi: AlfrescoApiService, cookie: CookieService, logService: LogService);\n    private loadUserDetails;\n    isLoggedIn(): boolean;\n    isLoggedInWith(provider: string): boolean;\n    isKerberosEnabled(): boolean;\n    isOauth(): boolean;\n    isPublicUrl(): boolean;\n    isECMProvider(): boolean;\n    isBPMProvider(): boolean;\n    isALLProvider(): boolean;\n    login(username: string, password: string, rememberMe?: boolean): Observable<{\n        type: string;\n        ticket: any;\n    }>;\n    ssoImplicitLogin(): void;\n    private saveRememberMeCookie;\n    isRememberMeSet(): boolean;\n    logout(): Observable<any>;\n    private callApiLogout;\n    getTicketEcm(): string | null;\n    getTicketBpm(): string | null;\n    getTicketEcmBase64(): string | null;\n    isEcmLoggedIn(): boolean;\n    isBpmLoggedIn(): boolean;\n    getEcmUsername(): string;\n    getBpmUsername(): string;\n    setRedirect(url: RedirectionModel): void;\n    getRedirect(): string;\n    getBpmLoggedUser(): Observable<UserRepresentation>;\n    private hasValidRedirection;\n    private hasSelectedProviderAll;\n    handleError(error: any): Observable<any>;\n    getBearerExcludedUrls(): string[];\n    getToken(): string;\n    addTokenToHeader(headersArg?: HttpHeaders): Observable<HttpHeaders>;\n}\n"]}