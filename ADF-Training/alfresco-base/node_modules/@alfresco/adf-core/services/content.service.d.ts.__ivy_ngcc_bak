/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { DomSanitizer } from '@angular/platform-browser';
import { ContentApi, MinimalNode, Node, NodeEntry, NodesApi } from '@alfresco/js-api';
import { Observable, Subject } from 'rxjs';
import { FolderCreatedEvent } from '../events/folder-created.event';
import { AlfrescoApiService } from './alfresco-api.service';
import { AuthenticationService } from './authentication.service';
import { LogService } from './log.service';
import { PermissionsEnum } from '../models/permissions.enum';
import { AllowableOperationsEnum } from '../models/allowable-operations.enum';
import { DownloadService } from './download.service';
import { ThumbnailService } from './thumbnail.service';
export declare class ContentService {
    authService: AuthenticationService;
    apiService: AlfrescoApiService;
    private logService;
    private sanitizer;
    private downloadService;
    private thumbnailService;
    folderCreated: Subject<FolderCreatedEvent>;
    folderCreate: Subject<MinimalNode>;
    folderEdit: Subject<MinimalNode>;
    _contentApi: ContentApi;
    get contentApi(): ContentApi;
    _nodesApi: NodesApi;
    get nodesApi(): NodesApi;
    constructor(authService: AuthenticationService, apiService: AlfrescoApiService, logService: LogService, sanitizer: DomSanitizer, downloadService: DownloadService, thumbnailService: ThumbnailService);
    downloadBlob(blob: Blob, fileName: string): void;
    createTrustedUrl(blob: Blob): string;
    getDocumentThumbnailUrl(node: NodeEntry | string, attachment?: boolean, ticket?: string): string;
    getContentUrl(node: NodeEntry | string, attachment?: boolean, ticket?: string): string;
    getNodeContent(nodeId: string): Observable<any>;
    getNode(nodeId: string, opts?: any): Observable<NodeEntry>;
    hasPermissions(node: Node, permission: PermissionsEnum | string, userId?: string): boolean;
    hasAllowableOperations(node: Node, allowableOperation: AllowableOperationsEnum | string): boolean;
    private handleError;
}
