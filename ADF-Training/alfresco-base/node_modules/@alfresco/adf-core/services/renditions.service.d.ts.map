{"version":3,"file":"renditions.service.d.ts","sources":["renditions.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { RenditionEntry, RenditionPaging, RenditionsApi, ContentApi } from '@alfresco/js-api';\nimport { Observable } from 'rxjs';\nimport { AlfrescoApiService } from './alfresco-api.service';\nexport declare class RenditionsService {\n    private apiService;\n    _renditionsApi: RenditionsApi;\n    get renditionsApi(): RenditionsApi;\n    _contentApi: ContentApi;\n    get contentApi(): ContentApi;\n    constructor(apiService: AlfrescoApiService);\n    getAvailableRenditionForNode(nodeId: string): Observable<RenditionEntry>;\n    generateRenditionForNode(nodeId: string): Observable<any>;\n    isRenditionAvailable(nodeId: string, encoding: string): Observable<boolean>;\n    isConversionPossible(nodeId: string, encoding: string): Observable<boolean>;\n    getRenditionUrl(nodeId: string, encoding: string): string;\n    getRendition(nodeId: string, encoding: string): Observable<RenditionEntry>;\n    getRenditionsListByNodeId(nodeId: string): Observable<RenditionPaging>;\n    createRendition(nodeId: string, encoding: string): Observable<{}>;\n    convert(nodeId: string, encoding: string, pollingInterval?: number, retries?: number): Observable<RenditionEntry>;\n    private pollRendition;\n}\n"]}