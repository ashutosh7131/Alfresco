/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Router, CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, CanActivateChild, UrlTree } from '@angular/router';
import { AuthenticationService } from './authentication.service';
import { AppConfigService } from '../app-config/app-config.service';
import { OauthConfigModel } from '../models/oauth-config.model';
import { MatDialog } from '@angular/material/dialog';
import { StorageService } from './storage.service';
import { Observable } from 'rxjs';
export declare abstract class AuthGuardBase implements CanActivate, CanActivateChild {
    protected authenticationService: AuthenticationService;
    protected router: Router;
    protected appConfigService: AppConfigService;
    protected dialog: MatDialog;
    private storageService;
    protected get withCredentials(): boolean;
    constructor(authenticationService: AuthenticationService, router: Router, appConfigService: AppConfigService, dialog: MatDialog, storageService: StorageService);
    abstract checkLogin(activeRoute: ActivatedRouteSnapshot, redirectUrl: string): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree;
    canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree;
    canActivateChild(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree;
    protected redirectSSOSuccessURL(): Promise<boolean | UrlTree>;
    protected isLoginFragmentPresent(): boolean;
    protected redirectToUrl(url: string): Promise<boolean | UrlTree>;
    protected navigate(url: string): Promise<boolean>;
    protected getOauthConfig(): OauthConfigModel;
    protected getLoginRoute(): string;
    protected getProvider(): string;
    protected isOAuthWithoutSilentLogin(): boolean;
    protected isSilentLogin(): boolean;
}
