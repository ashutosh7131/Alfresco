{"version":3,"file":"identity-user.service.d.ts","sources":["identity-user.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Observable } from 'rxjs';\nimport { AppConfigService } from '../app-config/app-config.service';\nimport { IdentityGroupModel } from '../models/identity-group.model';\nimport { IdentityRoleModel } from '../models/identity-role.model';\nimport { IdentityUserModel } from '../models/identity-user.model';\nimport { IdentityJoinGroupRequestModel, IdentityUserServiceInterface, IdentityUserPasswordModel, IdentityUserQueryCloudRequestModel, IdentityUserQueryResponse } from './identity-user.service.interface';\nimport { JwtHelperService } from './jwt-helper.service';\nimport { OAuth2Service } from './oauth2.service';\nexport declare class IdentityUserService implements IdentityUserServiceInterface {\n    private jwtHelperService;\n    private oAuth2Service;\n    private appConfigService;\n    constructor(jwtHelperService: JwtHelperService, oAuth2Service: OAuth2Service, appConfigService: AppConfigService);\n    private get identityHost();\n    private buildUserUrl;\n    getCurrentUserInfo(): IdentityUserModel;\n    findUsersByName(search: string): Observable<IdentityUserModel[]>;\n    findUserByUsername(username: string): Observable<IdentityUserModel[]>;\n    findUserByEmail(email: string): Observable<IdentityUserModel[]>;\n    findUserById(id: string): Observable<any>;\n    getClientRoles(userId: string, clientId: string): Observable<any[]>;\n    checkUserHasClientApp(userId: string, clientId: string): Observable<boolean>;\n    checkUserHasAnyClientAppRole(userId: string, clientId: string, roleNames: string[]): Observable<boolean>;\n    getClientIdByApplicationName(applicationName: string): Observable<string>;\n    checkUserHasApplicationAccess(userId: string, applicationName: string): Observable<boolean>;\n    checkUserHasAnyApplicationRole(userId: string, applicationName: string, roleNames: string[]): Observable<boolean>;\n    getUsers(): Observable<IdentityUserModel[]>;\n    getUserRoles(userId: string): Observable<IdentityRoleModel[]>;\n    getUsersByRolesWithCurrentUser(roleNames: string[]): Promise<IdentityUserModel[]>;\n    getUsersByRolesWithoutCurrentUser(roleNames: string[]): Promise<IdentityUserModel[]>;\n    private userHasAnyRole;\n    checkUserHasRole(userId: string, roleNames: string[]): Observable<boolean>;\n    queryUsers(requestQuery: IdentityUserQueryCloudRequestModel): Observable<IdentityUserQueryResponse>;\n    getTotalUsersCount(): Observable<number>;\n    createUser(newUser: IdentityUserModel): Observable<any>;\n    updateUser(userId: string, updatedUser: IdentityUserModel): Observable<any>;\n    deleteUser(userId: string): Observable<any>;\n    changePassword(userId: string, newPassword: IdentityUserPasswordModel): Observable<any>;\n    getInvolvedGroups(userId: string): Observable<IdentityGroupModel[]>;\n    joinGroup(joinGroupRequest: IdentityJoinGroupRequestModel): Observable<any>;\n    leaveGroup(userId: any, groupId: string): Observable<any>;\n    getAvailableRoles(userId: string): Observable<IdentityRoleModel[]>;\n    getAssignedRoles(userId: string): Observable<IdentityRoleModel[]>;\n    getEffectiveRoles(userId: string): Observable<IdentityRoleModel[]>;\n    assignRoles(userId: string, roles: IdentityRoleModel[]): Observable<any>;\n    removeRoles(userId: string, removedRoles: IdentityRoleModel[]): Observable<any>;\n}\n"]}