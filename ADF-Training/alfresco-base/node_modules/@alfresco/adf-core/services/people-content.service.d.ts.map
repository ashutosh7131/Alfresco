{"version":3,"file":"people-content.service.d.ts","sources":["people-content.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Observable } from 'rxjs';\nimport { AlfrescoApiService } from './alfresco-api.service';\nimport { PeopleApi, PersonBodyCreate, Pagination } from '@alfresco/js-api';\nimport { EcmUserModel } from '../models/ecm-user.model';\nimport { LogService } from './log.service';\nexport declare enum ContentGroups {\n    ALFRESCO_ADMINISTRATORS = \"ALFRESCO_ADMINISTRATORS\"\n}\nexport interface PeopleContentQueryResponse {\n    pagination: Pagination;\n    entries: EcmUserModel[];\n}\nexport interface PeopleContentSortingModel {\n    orderBy: string;\n    direction: string;\n}\nexport interface PeopleContentQueryRequestModel {\n    skipCount?: number;\n    maxItems?: number;\n    sorting?: PeopleContentSortingModel;\n}\nexport declare class PeopleContentService {\n    private apiService;\n    private logService;\n    private hasContentAdminRole;\n    hasCheckedIsContentAdmin: boolean;\n    _peopleApi: PeopleApi;\n    get peopleApi(): PeopleApi;\n    constructor(apiService: AlfrescoApiService, logService: LogService);\n    getPerson(personId: string): Observable<any>;\n    getCurrentPerson(): Observable<any>;\n    listPeople(requestQuery?: PeopleContentQueryRequestModel): Observable<PeopleContentQueryResponse>;\n    createPerson(newPerson: PersonBodyCreate, opts?: any): Observable<EcmUserModel>;\n    isContentAdmin(): Promise<boolean>;\n    private buildOrderArray;\n    private handleError;\n}\n"]}