/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Observable, ReplaySubject } from 'rxjs';
import { AlfrescoApiService } from './alfresco-api.service';
import { CookieService } from './cookie.service';
import { LogService } from './log.service';
import { RedirectionModel } from '../models/redirection.model';
import { AppConfigService } from '../app-config/app-config.service';
import { PeopleApi, UserProfileApi, UserRepresentation } from '@alfresco/js-api';
import { HttpHeaders } from '@angular/common/http';
import { StorageService } from './storage.service';
import * as ɵngcc0 from '@angular/core';
export declare class AuthenticationService {
    private appConfig;
    private storageService;
    private alfrescoApi;
    private cookie;
    private logService;
    private redirectUrl;
    private bearerExcludedUrls;
    onLogin: ReplaySubject<any>;
    onLogout: ReplaySubject<any>;
    _peopleApi: PeopleApi;
    get peopleApi(): PeopleApi;
    _profileApi: UserProfileApi;
    get profileApi(): UserProfileApi;
    constructor(appConfig: AppConfigService, storageService: StorageService, alfrescoApi: AlfrescoApiService, cookie: CookieService, logService: LogService);
    private loadUserDetails;
    isLoggedIn(): boolean;
    isLoggedInWith(provider: string): boolean;
    isKerberosEnabled(): boolean;
    isOauth(): boolean;
    isPublicUrl(): boolean;
    isECMProvider(): boolean;
    isBPMProvider(): boolean;
    isALLProvider(): boolean;
    login(username: string, password: string, rememberMe?: boolean): Observable<{
        type: string;
        ticket: any;
    }>;
    ssoImplicitLogin(): void;
    private saveRememberMeCookie;
    isRememberMeSet(): boolean;
    logout(): Observable<any>;
    private callApiLogout;
    getTicketEcm(): string | null;
    getTicketBpm(): string | null;
    getTicketEcmBase64(): string | null;
    isEcmLoggedIn(): boolean;
    isBpmLoggedIn(): boolean;
    getEcmUsername(): string;
    getBpmUsername(): string;
    setRedirect(url: RedirectionModel): void;
    getRedirect(): string;
    getBpmLoggedUser(): Observable<UserRepresentation>;
    private hasValidRedirection;
    private hasSelectedProviderAll;
    handleError(error: any): Observable<any>;
    getBearerExcludedUrls(): string[];
    getToken(): string;
    addTokenToHeader(headersArg?: HttpHeaders): Observable<HttpHeaders>;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<AuthenticationService, never>;
}

//# sourceMappingURL=authentication.service.d.ts.map