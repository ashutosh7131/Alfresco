/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Observable } from 'rxjs';
import { AppConfigService } from '../app-config/app-config.service';
import { IdentityGroupModel } from '../models/identity-group.model';
import { IdentityRoleModel } from '../models/identity-role.model';
import { IdentityUserModel } from '../models/identity-user.model';
import { IdentityJoinGroupRequestModel, IdentityUserServiceInterface, IdentityUserPasswordModel, IdentityUserQueryCloudRequestModel, IdentityUserQueryResponse } from './identity-user.service.interface';
import { JwtHelperService } from './jwt-helper.service';
import { OAuth2Service } from './oauth2.service';
import * as ɵngcc0 from '@angular/core';
export declare class IdentityUserService implements IdentityUserServiceInterface {
    private jwtHelperService;
    private oAuth2Service;
    private appConfigService;
    constructor(jwtHelperService: JwtHelperService, oAuth2Service: OAuth2Service, appConfigService: AppConfigService);
    private get identityHost();
    private buildUserUrl;
    getCurrentUserInfo(): IdentityUserModel;
    findUsersByName(search: string): Observable<IdentityUserModel[]>;
    findUserByUsername(username: string): Observable<IdentityUserModel[]>;
    findUserByEmail(email: string): Observable<IdentityUserModel[]>;
    findUserById(id: string): Observable<any>;
    getClientRoles(userId: string, clientId: string): Observable<any[]>;
    checkUserHasClientApp(userId: string, clientId: string): Observable<boolean>;
    checkUserHasAnyClientAppRole(userId: string, clientId: string, roleNames: string[]): Observable<boolean>;
    getClientIdByApplicationName(applicationName: string): Observable<string>;
    checkUserHasApplicationAccess(userId: string, applicationName: string): Observable<boolean>;
    checkUserHasAnyApplicationRole(userId: string, applicationName: string, roleNames: string[]): Observable<boolean>;
    getUsers(): Observable<IdentityUserModel[]>;
    getUserRoles(userId: string): Observable<IdentityRoleModel[]>;
    getUsersByRolesWithCurrentUser(roleNames: string[]): Promise<IdentityUserModel[]>;
    getUsersByRolesWithoutCurrentUser(roleNames: string[]): Promise<IdentityUserModel[]>;
    private userHasAnyRole;
    checkUserHasRole(userId: string, roleNames: string[]): Observable<boolean>;
    queryUsers(requestQuery: IdentityUserQueryCloudRequestModel): Observable<IdentityUserQueryResponse>;
    getTotalUsersCount(): Observable<number>;
    createUser(newUser: IdentityUserModel): Observable<any>;
    updateUser(userId: string, updatedUser: IdentityUserModel): Observable<any>;
    deleteUser(userId: string): Observable<any>;
    changePassword(userId: string, newPassword: IdentityUserPasswordModel): Observable<any>;
    getInvolvedGroups(userId: string): Observable<IdentityGroupModel[]>;
    joinGroup(joinGroupRequest: IdentityJoinGroupRequestModel): Observable<any>;
    leaveGroup(userId: any, groupId: string): Observable<any>;
    getAvailableRoles(userId: string): Observable<IdentityRoleModel[]>;
    getAssignedRoles(userId: string): Observable<IdentityRoleModel[]>;
    getEffectiveRoles(userId: string): Observable<IdentityRoleModel[]>;
    assignRoles(userId: string, roles: IdentityRoleModel[]): Observable<any>;
    removeRoles(userId: string, removedRoles: IdentityRoleModel[]): Observable<any>;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IdentityUserService, never>;
}

//# sourceMappingURL=identity-user.service.d.ts.map