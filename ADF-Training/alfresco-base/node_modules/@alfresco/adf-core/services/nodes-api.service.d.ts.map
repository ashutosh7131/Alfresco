{"version":3,"file":"nodes-api.service.d.ts","sources":["nodes-api.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { MinimalNode, NodeEntry, NodePaging, NodesApi, TrashcanApi } from '@alfresco/js-api';\nimport { Observable } from 'rxjs';\nimport { AlfrescoApiService } from './alfresco-api.service';\nimport { UserPreferencesService } from './user-preferences.service';\nimport { NodeMetadata } from '../models/node-metadata.model';\nexport declare class NodesApiService {\n    private apiService;\n    private preferences;\n    _trashcanApi: TrashcanApi;\n    get trashcanApi(): TrashcanApi;\n    _nodesApi: NodesApi;\n    get nodesApi(): NodesApi;\n    constructor(apiService: AlfrescoApiService, preferences: UserPreferencesService);\n    private getEntryFromEntity;\n    getNode(nodeId: string, options?: any): Observable<MinimalNode>;\n    getNodeChildren(nodeId: string, options?: any): Observable<NodePaging>;\n    createNode(parentNodeId: string, nodeBody: any, options?: any): Observable<MinimalNode>;\n    createFolder(parentNodeId: string, nodeBody: any, options?: any): Observable<MinimalNode>;\n    updateNode(nodeId: string, nodeBody: any, options?: any): Observable<MinimalNode>;\n    deleteNode(nodeId: string, options?: any): Observable<any>;\n    restoreNode(nodeId: string): Observable<MinimalNode>;\n    getNodeMetadata(nodeId: string): Observable<NodeMetadata>;\n    createNodeMetadata(nodeType: string, nameSpace: any, data: any, path: string, name?: string): Observable<NodeEntry>;\n    createNodeInsideRoot(name: string, nodeType: string, properties: any, path: string): Observable<NodeEntry>;\n    private generateUuid;\n    private cleanMetadataFromSemicolon;\n}\n"]}