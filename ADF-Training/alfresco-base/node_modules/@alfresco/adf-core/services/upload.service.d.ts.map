{"version":3,"file":"upload.service.d.ts","sources":["upload.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { EventEmitter } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { AppConfigService } from '../app-config/app-config.service';\nimport { FileUploadCompleteEvent, FileUploadDeleteEvent, FileUploadErrorEvent, FileUploadEvent } from '../events/file.event';\nimport { FileModel } from '../models/file.model';\nimport { AlfrescoApiService } from './alfresco-api.service';\nimport { DiscoveryApiService } from './discovery-api.service';\nimport { NodesApi, UploadApi, VersionsApi } from '@alfresco/js-api';\nexport declare class UploadService {\n    protected apiService: AlfrescoApiService;\n    private appConfigService;\n    private discoveryApiService;\n    private cache;\n    private totalComplete;\n    private totalAborted;\n    private totalError;\n    private excludedFileList;\n    private excludedFoldersList;\n    private matchingOptions;\n    private folderMatchingOptions;\n    private abortedFile;\n    private isThumbnailGenerationEnabled;\n    activeTask: Promise<any>;\n    queue: FileModel[];\n    queueChanged: Subject<FileModel[]>;\n    fileUpload: Subject<FileUploadEvent>;\n    fileUploadStarting: Subject<FileUploadEvent>;\n    fileUploadCancelled: Subject<FileUploadEvent>;\n    fileUploadProgress: Subject<FileUploadEvent>;\n    fileUploadAborted: Subject<FileUploadEvent>;\n    fileUploadError: Subject<FileUploadErrorEvent>;\n    fileUploadComplete: Subject<FileUploadCompleteEvent>;\n    fileUploadDeleted: Subject<FileUploadDeleteEvent>;\n    fileDeleted: Subject<string>;\n    _uploadApi: UploadApi;\n    get uploadApi(): UploadApi;\n    _nodesApi: NodesApi;\n    get nodesApi(): NodesApi;\n    _versionsApi: VersionsApi;\n    get versionsApi(): VersionsApi;\n    constructor(apiService: AlfrescoApiService, appConfigService: AppConfigService, discoveryApiService: DiscoveryApiService);\n    isUploading(): boolean;\n    getQueue(): FileModel[];\n    addToQueue(...files: FileModel[]): FileModel[];\n    private filterElement;\n    private isParentFolderAllowed;\n    private isFileNameAllowed;\n    uploadFilesInTheQueue(successEmitter?: EventEmitter<any>, errorEmitter?: EventEmitter<any>): void;\n    cancelUpload(...files: FileModel[]): void;\n    clearQueue(): void;\n    getUploadPromise(file: FileModel): any;\n    private beginUpload;\n    private onUploadStarting;\n    private onUploadProgress;\n    private onUploadError;\n    private onUploadComplete;\n    private onUploadAborted;\n    private onUploadCancelled;\n    private onUploadDeleted;\n    private getAction;\n    private deleteAbortedNode;\n    private deleteAbortedNodeVersion;\n    private isSaveToAbortFile;\n}\n"]}