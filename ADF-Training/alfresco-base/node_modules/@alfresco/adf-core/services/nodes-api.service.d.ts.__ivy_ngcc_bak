/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { MinimalNode, NodeEntry, NodePaging, NodesApi, TrashcanApi } from '@alfresco/js-api';
import { Observable } from 'rxjs';
import { AlfrescoApiService } from './alfresco-api.service';
import { UserPreferencesService } from './user-preferences.service';
import { NodeMetadata } from '../models/node-metadata.model';
export declare class NodesApiService {
    private apiService;
    private preferences;
    _trashcanApi: TrashcanApi;
    get trashcanApi(): TrashcanApi;
    _nodesApi: NodesApi;
    get nodesApi(): NodesApi;
    constructor(apiService: AlfrescoApiService, preferences: UserPreferencesService);
    private getEntryFromEntity;
    getNode(nodeId: string, options?: any): Observable<MinimalNode>;
    getNodeChildren(nodeId: string, options?: any): Observable<NodePaging>;
    createNode(parentNodeId: string, nodeBody: any, options?: any): Observable<MinimalNode>;
    createFolder(parentNodeId: string, nodeBody: any, options?: any): Observable<MinimalNode>;
    updateNode(nodeId: string, nodeBody: any, options?: any): Observable<MinimalNode>;
    deleteNode(nodeId: string, options?: any): Observable<any>;
    restoreNode(nodeId: string): Observable<MinimalNode>;
    getNodeMetadata(nodeId: string): Observable<NodeMetadata>;
    createNodeMetadata(nodeType: string, nameSpace: any, data: any, path: string, name?: string): Observable<NodeEntry>;
    createNodeInsideRoot(name: string, nodeType: string, properties: any, path: string): Observable<NodeEntry>;
    private generateUuid;
    private cleanMetadataFromSemicolon;
}
