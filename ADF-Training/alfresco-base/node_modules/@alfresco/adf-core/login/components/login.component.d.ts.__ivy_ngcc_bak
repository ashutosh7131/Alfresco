/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { EventEmitter, OnInit, TemplateRef, OnDestroy } from '@angular/core';
import { AbstractControl, FormBuilder, FormGroup } from '@angular/forms';
import { Router, ActivatedRoute } from '@angular/router';
import { AuthenticationService } from '../../services/authentication.service';
import { LogService } from '../../services/log.service';
import { TranslationService } from '../../services/translation.service';
import { UserPreferencesService } from '../../services/user-preferences.service';
import { AlfrescoApiService } from '../../services/alfresco-api.service';
import { LoginErrorEvent } from '../models/login-error.event';
import { LoginSubmitEvent } from '../models/login-submit.event';
import { LoginSuccessEvent } from '../models/login-success.event';
import { AppConfigService } from '../../app-config/app-config.service';
import { DomSanitizer, SafeStyle } from '@angular/platform-browser';
declare enum LoginSteps {
    Landing = 0,
    Checking = 1,
    Welcome = 2
}
export declare class LoginComponent implements OnInit, OnDestroy {
    private _fb;
    private authService;
    private translateService;
    private logService;
    private router;
    private appConfig;
    private userPreferences;
    private route;
    private sanitizer;
    private alfrescoApiService;
    isPasswordShow: boolean;
    showRememberMe: boolean;
    showLoginActions: boolean;
    needHelpLink: string;
    registerLink: string;
    logoImageUrl: string;
    backgroundImageUrl: string;
    copyrightText: string;
    fieldsValidation: any;
    successRoute: string;
    success: EventEmitter<LoginSuccessEvent>;
    error: EventEmitter<LoginErrorEvent>;
    executeSubmit: EventEmitter<LoginSubmitEvent>;
    implicitFlow: boolean;
    form: FormGroup;
    isError: boolean;
    errorMsg: string;
    actualLoginStep: any;
    LoginSteps: typeof LoginSteps;
    rememberMe: boolean;
    formError: {
        [id: string]: string;
    };
    minLength: number;
    footerTemplate: TemplateRef<any>;
    headerTemplate: TemplateRef<any>;
    data: any;
    private _message;
    private onDestroy$;
    constructor(_fb: FormBuilder, authService: AuthenticationService, translateService: TranslationService, logService: LogService, router: Router, appConfig: AppConfigService, userPreferences: UserPreferencesService, route: ActivatedRoute, sanitizer: DomSanitizer, alfrescoApiService: AlfrescoApiService);
    ngOnInit(): void;
    ngOnDestroy(): void;
    submit(): void;
    redirectToImplicitLogin(): void;
    onSubmit(values: any): void;
    implicitLogin(): void;
    onValueChanged(data: any): void;
    private performLogin;
    private displayErrorMessage;
    addCustomFormError(field: string, msg: string): void;
    addCustomValidationError(field: string, ruleId: string, msg: string, params?: any): void;
    toggleShowPassword(event: Event): void;
    isErrorStyle(field: AbstractControl): boolean;
    trimUsername(event: any): void;
    getBackgroundUrlImageUrl(): SafeStyle;
    private initFormError;
    private initFormFieldsMessages;
    private initFormFieldsDefault;
    private disableError;
}
export {};
