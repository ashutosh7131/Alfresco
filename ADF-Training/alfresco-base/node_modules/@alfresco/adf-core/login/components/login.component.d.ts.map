{"version":3,"file":"login.component.d.ts","sources":["login.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA","sourcesContent":["/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { EventEmitter, OnInit, TemplateRef, OnDestroy } from '@angular/core';\nimport { AbstractControl, FormBuilder, FormGroup } from '@angular/forms';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { AuthenticationService } from '../../services/authentication.service';\nimport { LogService } from '../../services/log.service';\nimport { TranslationService } from '../../services/translation.service';\nimport { UserPreferencesService } from '../../services/user-preferences.service';\nimport { AlfrescoApiService } from '../../services/alfresco-api.service';\nimport { LoginErrorEvent } from '../models/login-error.event';\nimport { LoginSubmitEvent } from '../models/login-submit.event';\nimport { LoginSuccessEvent } from '../models/login-success.event';\nimport { AppConfigService } from '../../app-config/app-config.service';\nimport { DomSanitizer, SafeStyle } from '@angular/platform-browser';\ndeclare enum LoginSteps {\n    Landing = 0,\n    Checking = 1,\n    Welcome = 2\n}\nexport declare class LoginComponent implements OnInit, OnDestroy {\n    private _fb;\n    private authService;\n    private translateService;\n    private logService;\n    private router;\n    private appConfig;\n    private userPreferences;\n    private route;\n    private sanitizer;\n    private alfrescoApiService;\n    isPasswordShow: boolean;\n    showRememberMe: boolean;\n    showLoginActions: boolean;\n    needHelpLink: string;\n    registerLink: string;\n    logoImageUrl: string;\n    backgroundImageUrl: string;\n    copyrightText: string;\n    fieldsValidation: any;\n    successRoute: string;\n    success: EventEmitter<LoginSuccessEvent>;\n    error: EventEmitter<LoginErrorEvent>;\n    executeSubmit: EventEmitter<LoginSubmitEvent>;\n    implicitFlow: boolean;\n    form: FormGroup;\n    isError: boolean;\n    errorMsg: string;\n    actualLoginStep: any;\n    LoginSteps: typeof LoginSteps;\n    rememberMe: boolean;\n    formError: {\n        [id: string]: string;\n    };\n    minLength: number;\n    footerTemplate: TemplateRef<any>;\n    headerTemplate: TemplateRef<any>;\n    data: any;\n    private _message;\n    private onDestroy$;\n    constructor(_fb: FormBuilder, authService: AuthenticationService, translateService: TranslationService, logService: LogService, router: Router, appConfig: AppConfigService, userPreferences: UserPreferencesService, route: ActivatedRoute, sanitizer: DomSanitizer, alfrescoApiService: AlfrescoApiService);\n    ngOnInit(): void;\n    ngOnDestroy(): void;\n    submit(): void;\n    redirectToImplicitLogin(): void;\n    onSubmit(values: any): void;\n    implicitLogin(): void;\n    onValueChanged(data: any): void;\n    private performLogin;\n    private displayErrorMessage;\n    addCustomFormError(field: string, msg: string): void;\n    addCustomValidationError(field: string, ruleId: string, msg: string, params?: any): void;\n    toggleShowPassword(event: Event): void;\n    isErrorStyle(field: AbstractControl): boolean;\n    trimUsername(event: any): void;\n    getBackgroundUrlImageUrl(): SafeStyle;\n    private initFormError;\n    private initFormFieldsMessages;\n    private initFormFieldsDefault;\n    private disableError;\n}\nexport {};\n"]}