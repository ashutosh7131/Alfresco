/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { AlfrescoApiService } from '../../services/alfresco-api.service';
import { LogService } from '../../services/log.service';
import { Observable } from 'rxjs';
import { FormFieldModel, FormModel, TabModel, FormOutcomeModel } from '../components/widgets/core/index';
import { TaskProcessVariableModel } from '../models/task-process-variable.model';
import { WidgetVisibilityModel } from '../models/widget-visibility.model';
import { TaskFormsApi } from '@alfresco/js-api';
export declare class WidgetVisibilityService {
    private apiService;
    private logService;
    _taskFormsApi: TaskFormsApi;
    get taskFormsApi(): TaskFormsApi;
    private processVarList;
    private form;
    constructor(apiService: AlfrescoApiService, logService: LogService);
    refreshVisibility(form: FormModel, processVarList?: TaskProcessVariableModel[]): void;
    refreshEntityVisibility(element: FormFieldModel | TabModel): void;
    refreshOutcomeVisibility(element: FormOutcomeModel): void;
    evaluateVisibility(form: FormModel, visibilityObj: WidgetVisibilityModel): boolean;
    isFieldVisible(form: FormModel, visibilityObj: WidgetVisibilityModel, accumulator?: any[], result?: boolean): boolean;
    private transformToLiteralExpression;
    private transformToLiteralOperator;
    getLeftValue(form: FormModel, visibilityObj: WidgetVisibilityModel): string;
    getRightValue(form: FormModel, visibilityObj: WidgetVisibilityModel): string;
    getFormValue(form: FormModel, fieldId: string): any;
    isFormFieldValid(formField: FormFieldModel): boolean;
    getFieldValue(valueList: any, fieldId: string): any;
    private isInvalidValue;
    getFormFieldById(form: FormModel, fieldId: string): FormFieldModel;
    searchValueInForm(formField: FormFieldModel, fieldId: string): string;
    isParentTabVisible(form: FormModel, currentFormField: FormFieldModel | TabModel): boolean;
    private getCurrentFieldFromTabById;
    private getFormTabContainers;
    private getObjectValue;
    private getValueFromOption;
    private isSearchedField;
    getVariableValue(form: FormModel, name: string, processVarList: TaskProcessVariableModel[]): string;
    private getProcessVariableValue;
    evaluateCondition(leftValue: any, rightValue: any, operator: string): boolean | undefined;
    private contains;
    cleanProcessVariable(): void;
    getTaskProcessVariable(taskId: string): Observable<TaskProcessVariableModel[]>;
    toJson(res: any): any;
    private isValidCondition;
    private handleError;
}
