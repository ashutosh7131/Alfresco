/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { AlfrescoApiService } from '../../services/alfresco-api.service';
import { LogService } from '../../services/log.service';
import { ActivitiContentApi, RelatedContentRepresentation } from '@alfresco/js-api';
import { Observable } from 'rxjs';
export declare class ProcessContentService {
    private apiService;
    private logService;
    static UNKNOWN_ERROR_MESSAGE: string;
    static GENERIC_ERROR_MESSAGE: string;
    _contentApi: ActivitiContentApi;
    get contentApi(): ActivitiContentApi;
    constructor(apiService: AlfrescoApiService, logService: LogService);
    createTemporaryRawRelatedContent(file: any): Observable<RelatedContentRepresentation>;
    getFileContent(contentId: number): Observable<RelatedContentRepresentation>;
    getFileRawContent(contentId: number): Observable<Blob>;
    getContentPreview(contentId: number): Observable<Blob>;
    getFileRawContentUrl(contentId: number): string;
    getContentThumbnail(contentId: number): Observable<Blob>;
    getTaskRelatedContent(taskId: string, opts?: any): Observable<any>;
    getProcessRelatedContent(processId: string, opts?: any): Observable<any>;
    deleteRelatedContent(contentId: number): Observable<any>;
    createProcessRelatedContent(processInstanceId: string, content: any, opts?: any): Observable<any>;
    createTaskRelatedContent(taskId: string, file: any, opts?: any): Observable<any>;
    toJson(res: any): any;
    toJsonArray(res: any): any;
    handleError(error: any): Observable<any>;
}
