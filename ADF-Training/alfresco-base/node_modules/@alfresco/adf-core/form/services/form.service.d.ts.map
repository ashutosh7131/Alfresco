{"version":3,"file":"form.service.d.ts","sources":["form.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { AlfrescoApiService } from '../../services/alfresco-api.service';\nimport { LogService } from '../../services/log.service';\nimport { UserProcessModel } from '../../models';\nimport { Observable, Subject } from 'rxjs';\nimport { FormDefinitionModel } from '../models/form-definition.model';\nimport { ContentLinkModel } from './../components/widgets/core/content-link.model';\nimport { GroupModel } from './../components/widgets/core/group.model';\nimport { FormModel, FormOutcomeEvent, FormValues } from './../components/widgets/core/index';\nimport { FormErrorEvent, FormEvent, FormFieldEvent, ValidateDynamicTableRowEvent, ValidateFormEvent, ValidateFormFieldEvent } from './../events/index';\nimport { EcmModelService } from './ecm-model.service';\nimport { ModelsApi, ProcessInstanceVariablesApi, TasksApi, TaskFormsApi, ProcessInstancesApi, FormModelsApi, ProcessDefinitionsApi, UsersApi, ActivitiGroupsApi } from '@alfresco/js-api';\nexport declare class FormService {\n    private ecmModelService;\n    private apiService;\n    protected logService: LogService;\n    static UNKNOWN_ERROR_MESSAGE: string;\n    static GENERIC_ERROR_MESSAGE: string;\n    _taskFormsApi: TaskFormsApi;\n    get taskFormsApi(): TaskFormsApi;\n    _taskApi: TasksApi;\n    get taskApi(): TasksApi;\n    _modelsApi: ModelsApi;\n    get modelsApi(): ModelsApi;\n    _editorApi: FormModelsApi;\n    get editorApi(): FormModelsApi;\n    _processDefinitionsApi: ProcessDefinitionsApi;\n    get processDefinitionsApi(): ProcessDefinitionsApi;\n    _processInstanceVariablesApi: ProcessInstanceVariablesApi;\n    get processInstanceVariablesApi(): ProcessInstanceVariablesApi;\n    _processInstancesApi: ProcessInstancesApi;\n    get processInstancesApi(): ProcessInstancesApi;\n    _groupsApi: ActivitiGroupsApi;\n    get groupsApi(): ActivitiGroupsApi;\n    _usersApi: UsersApi;\n    get usersApi(): UsersApi;\n    formLoaded: Subject<FormEvent>;\n    formDataRefreshed: Subject<FormEvent>;\n    formFieldValueChanged: Subject<FormFieldEvent>;\n    formEvents: Subject<Event>;\n    taskCompleted: Subject<FormEvent>;\n    taskCompletedError: Subject<FormErrorEvent>;\n    taskSaved: Subject<FormEvent>;\n    taskSavedError: Subject<FormErrorEvent>;\n    formContentClicked: Subject<ContentLinkModel>;\n    validateForm: Subject<ValidateFormEvent>;\n    validateFormField: Subject<ValidateFormFieldEvent>;\n    validateDynamicTableRow: Subject<ValidateDynamicTableRowEvent>;\n    executeOutcome: Subject<FormOutcomeEvent>;\n    updateFormValuesRequested: Subject<FormValues>;\n    constructor(ecmModelService: EcmModelService, apiService: AlfrescoApiService, logService: LogService);\n    parseForm(json: any, data?: FormValues, readOnly?: boolean, fixedSpace?: boolean): FormModel;\n    createFormFromANode(formName: string): Observable<any>;\n    createForm(formName: string): Observable<any>;\n    saveForm(formId: number, formModel: FormDefinitionModel): Observable<any>;\n    searchFrom(name: string): Observable<any>;\n    getForms(): Observable<any>;\n    getProcessDefinitions(): Observable<any>;\n    getProcessVariablesById(processInstanceId: string): Observable<any[]>;\n    getTasks(): Observable<any>;\n    getTask(taskId: string): Observable<any>;\n    saveTaskForm(taskId: string, formValues: FormValues): Observable<any>;\n    completeTaskForm(taskId: string, formValues: FormValues, outcome?: string): Observable<any>;\n    getTaskForm(taskId: string): Observable<any>;\n    getFormDefinitionById(formId: number): Observable<any>;\n    getFormDefinitionByName(name: string): Observable<any>;\n    getStartFormInstance(processId: string): Observable<any>;\n    getProcessInstance(processId: string): Observable<any>;\n    getStartFormDefinition(processId: string): Observable<any>;\n    getRestFieldValues(taskId: string, field: string): Observable<any>;\n    getRestFieldValuesByProcessId(processDefinitionId: string, field: string): Observable<any>;\n    getRestFieldValuesColumnByProcessId(processDefinitionId: string, field: string, column?: string): Observable<any>;\n    getRestFieldValuesColumn(taskId: string, field: string, column?: string): Observable<any>;\n    getUserProfileImageApi(userId: string): string;\n    getWorkflowUsers(filter: string, groupId?: string): Observable<UserProcessModel[]>;\n    getWorkflowGroups(filter: string, groupId?: string): Observable<GroupModel[]>;\n    getFormId(form: any): string;\n    toJson(res: any): any;\n    toJsonArray(res: any): any;\n    handleError(error: any): Observable<any>;\n}\n"]}