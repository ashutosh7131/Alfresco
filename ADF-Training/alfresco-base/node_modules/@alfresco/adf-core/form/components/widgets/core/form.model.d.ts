/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { FormService } from './../../../services/form.service';
import { FormFieldModel } from './form-field.model';
import { FormValues } from './form-values';
import { FormWidgetModel } from './form-widget.model';
import { TabModel } from './tab.model';
import { FormVariableModel } from './form-variable.model';
import { ProcessVariableModel } from './process-variable.model';
import { FormOutcomeModel } from './form-outcome.model';
import { FormFieldValidator } from './form-field-validator';
import { FormFieldTemplates } from './form-field-templates';
import { UploadWidgetContentLinkModel } from './upload-widget-content-link.model';
export interface FormRepresentationModel {
    [key: string]: any;
    id?: string | number;
    name?: string;
    taskId?: string;
    taskName?: string;
    processDefinitionId?: string;
    customFieldTemplates?: {
        [key: string]: string;
    };
    selectedOutcome?: string;
    fields?: any[];
    tabs?: any[];
    outcomes?: any[];
    formDefinition?: {
        [key: string]: any;
        fields?: any[];
    };
}
export declare class FormModel {
    protected formService?: FormService;
    static UNSET_TASK_NAME: string;
    static SAVE_OUTCOME: string;
    static COMPLETE_OUTCOME: string;
    static START_PROCESS_OUTCOME: string;
    readonly id: string | number;
    readonly name: string;
    readonly taskId: string;
    readonly taskName: string;
    readonly processDefinitionId: string;
    readonly selectedOutcome: string;
    readonly enableFixedSpace: boolean;
    json: any;
    nodeId: string;
    values: FormValues;
    tabs: TabModel[];
    fields: FormWidgetModel[];
    outcomes: FormOutcomeModel[];
    fieldValidators: FormFieldValidator[];
    customFieldTemplates: FormFieldTemplates;
    className: string;
    readOnly: boolean;
    isValid: boolean;
    processVariables: ProcessVariableModel[];
    variables: FormVariableModel[];
    constructor(json?: any, formValues?: FormValues, readOnly?: boolean, formService?: FormService, enableFixedSpace?: boolean);
    onFormFieldChanged(field: FormFieldModel): void;
    validateForm(): void;
    validateField(field: FormFieldModel): void;
    private parseRootFields;
    private loadData;
    private isDefined;
    getFormVariable(identifier: string): FormVariableModel;
    getFormVariableValue(identifier: string): any;
    getProcessVariableValue(name: string): any;
    protected parseValue(type: string, value: any): any;
    hasTabs(): boolean;
    hasFields(): boolean;
    hasOutcomes(): boolean;
    getFieldById(fieldId: string): FormFieldModel;
    getFormFields(): FormFieldModel[];
    markAsInvalid(): void;
    protected parseOutcomes(): void;
    addValuesNotPresent(valuesToSetIfNotPresent: FormValues): void;
    private isValidDropDown;
    setNodeIdValueForViewersLinkedToUploadWidget(linkedUploadWidgetContentSelected: UploadWidgetContentLinkModel): void;
}
