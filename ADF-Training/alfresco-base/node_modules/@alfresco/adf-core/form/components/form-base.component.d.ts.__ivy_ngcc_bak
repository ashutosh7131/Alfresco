/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { FormOutcomeModel, FormFieldValidator, FormFieldModel, FormOutcomeEvent, FormModel } from './widgets';
import { EventEmitter } from '@angular/core';
import { ThemePalette } from '@angular/material/core';
export declare abstract class FormBaseComponent {
    static SAVE_OUTCOME_ID: string;
    static COMPLETE_OUTCOME_ID: string;
    static START_PROCESS_OUTCOME_ID: string;
    static CUSTOM_OUTCOME_ID: string;
    static COMPLETE_BUTTON_COLOR: ThemePalette;
    static COMPLETE_OUTCOME_NAME: string;
    path: string;
    nameNode: string;
    showTitle: boolean;
    showCompleteButton: boolean;
    disableCompleteButton: boolean;
    disableSaveButton: boolean;
    disableStartProcessButton: boolean;
    showSaveButton: boolean;
    readOnly: boolean;
    showRefreshButton: boolean;
    showValidationIcon: boolean;
    fieldValidators: FormFieldValidator[];
    formError: EventEmitter<FormFieldModel[]>;
    executeOutcome: EventEmitter<FormOutcomeEvent>;
    error: EventEmitter<any>;
    form: FormModel;
    getParsedFormDefinition(): FormBaseComponent;
    hasForm(): boolean;
    isTitleEnabled(): boolean;
    getColorForOutcome(outcomeName: string): ThemePalette;
    isOutcomeButtonEnabled(outcome: FormOutcomeModel): boolean;
    isOutcomeButtonVisible(outcome: FormOutcomeModel, isFormReadOnly: boolean): boolean;
    onOutcomeClicked(outcome: FormOutcomeModel): boolean;
    handleError(err: any): any;
    abstract onRefreshClicked(): void;
    abstract saveTaskForm(): void;
    abstract completeTaskForm(outcome?: string): void;
    protected abstract onTaskSaved(form: FormModel): void;
    protected abstract storeFormAsMetadata(): void;
    protected abstract onExecuteOutcome(outcome: FormOutcomeModel): boolean;
}
