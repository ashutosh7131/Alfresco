/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { EventEmitter, OnInit, OnDestroy, ElementRef, ChangeDetectorRef, Renderer2 } from '@angular/core';
import { PaginatedComponent } from './paginated-component.interface';
import { PaginationComponentInterface } from './pagination-component.interface';
import { PaginationModel } from '../models/pagination.model';
import { UserPreferencesService } from '../services/user-preferences.service';
import { TranslateService } from '@ngx-translate/core';
import * as ɵngcc0 from '@angular/core';
export declare type PaginationAction = 'NEXT_PAGE' | 'PREV_PAGE' | 'CHANGE_PAGE_SIZE' | 'CHANGE_PAGE_NUMBER';
export declare class PaginationComponent implements OnInit, OnDestroy, PaginationComponentInterface {
    private elementRef;
    private renderer;
    private cdr;
    private userPreferencesService;
    private translate;
    static DEFAULT_PAGINATION: PaginationModel;
    private _pagination;
    private _isEmpty;
    private _hasItems;
    target: PaginatedComponent;
    supportedPageSizes: number[];
    get pagination(): PaginationModel;
    set pagination(value: PaginationModel);
    change: EventEmitter<PaginationModel>;
    changePageNumber: EventEmitter<PaginationModel>;
    changePageSize: EventEmitter<PaginationModel>;
    nextPage: EventEmitter<PaginationModel>;
    prevPage: EventEmitter<PaginationModel>;
    private onDestroy$;
    constructor(elementRef: ElementRef, renderer: Renderer2, cdr: ChangeDetectorRef, userPreferencesService: UserPreferencesService, translate: TranslateService);
    ngOnInit(): void;
    get lastPage(): number;
    get current(): number;
    get isLastPage(): boolean;
    get isFirstPage(): boolean;
    get next(): number;
    get previous(): number;
    get hasItems(): boolean;
    get isEmpty(): boolean;
    get range(): number[];
    get pages(): number[];
    get itemRangeText(): string;
    goNext(): void;
    goPrevious(): void;
    onChangePageNumber(pageNumber: number): void;
    onChangePageSize(maxItems: number): void;
    ngOnDestroy(): void;
    handlePaginationEvent(action: PaginationAction): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<PaginationComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<PaginationComponent, "adf-pagination", never, { "pagination": "pagination"; "supportedPageSizes": "supportedPageSizes"; "target": "target"; }, { "change": "change"; "changePageNumber": "changePageNumber"; "changePageSize": "changePageSize"; "nextPage": "nextPage"; "prevPage": "prevPage"; }, never, never>;
}

//# sourceMappingURL=pagination.component.d.ts.map