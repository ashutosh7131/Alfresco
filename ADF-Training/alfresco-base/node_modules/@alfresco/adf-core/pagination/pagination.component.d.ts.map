{"version":3,"file":"pagination.component.d.ts","sources":["pagination.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { EventEmitter, OnInit, OnDestroy, ElementRef, ChangeDetectorRef, Renderer2 } from '@angular/core';\nimport { PaginatedComponent } from './paginated-component.interface';\nimport { PaginationComponentInterface } from './pagination-component.interface';\nimport { PaginationModel } from '../models/pagination.model';\nimport { UserPreferencesService } from '../services/user-preferences.service';\nimport { TranslateService } from '@ngx-translate/core';\nexport declare type PaginationAction = 'NEXT_PAGE' | 'PREV_PAGE' | 'CHANGE_PAGE_SIZE' | 'CHANGE_PAGE_NUMBER';\nexport declare class PaginationComponent implements OnInit, OnDestroy, PaginationComponentInterface {\n    private elementRef;\n    private renderer;\n    private cdr;\n    private userPreferencesService;\n    private translate;\n    static DEFAULT_PAGINATION: PaginationModel;\n    private _pagination;\n    private _isEmpty;\n    private _hasItems;\n    target: PaginatedComponent;\n    supportedPageSizes: number[];\n    get pagination(): PaginationModel;\n    set pagination(value: PaginationModel);\n    change: EventEmitter<PaginationModel>;\n    changePageNumber: EventEmitter<PaginationModel>;\n    changePageSize: EventEmitter<PaginationModel>;\n    nextPage: EventEmitter<PaginationModel>;\n    prevPage: EventEmitter<PaginationModel>;\n    private onDestroy$;\n    constructor(elementRef: ElementRef, renderer: Renderer2, cdr: ChangeDetectorRef, userPreferencesService: UserPreferencesService, translate: TranslateService);\n    ngOnInit(): void;\n    get lastPage(): number;\n    get current(): number;\n    get isLastPage(): boolean;\n    get isFirstPage(): boolean;\n    get next(): number;\n    get previous(): number;\n    get hasItems(): boolean;\n    get isEmpty(): boolean;\n    get range(): number[];\n    get pages(): number[];\n    get itemRangeText(): string;\n    goNext(): void;\n    goPrevious(): void;\n    onChangePageNumber(pageNumber: number): void;\n    onChangePageSize(maxItems: number): void;\n    ngOnDestroy(): void;\n    handlePaginationEvent(action: PaginationAction): void;\n}\n"]}