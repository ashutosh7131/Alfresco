/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { __awaiter } from "tslib";
import { Component, ElementRef, Output, EventEmitter, ViewChild, ViewEncapsulation, Input, ChangeDetectionStrategy } from '@angular/core';
import { FormControl } from '@angular/forms';
import { trigger, state, style, transition, animate } from '@angular/animations';
import { of, BehaviorSubject, Subject } from 'rxjs';
import { distinctUntilChanged, switchMap, mergeMap, filter, tap, map, takeUntil, debounceTime } from 'rxjs/operators';
import { IdentityGroupService, LogService } from '@alfresco/adf-core';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@alfresco/adf-core';
import * as ɵngcc2 from '@angular/forms';
import * as ɵngcc3 from '@angular/material/form-field';
import * as ɵngcc4 from '@angular/common';
import * as ɵngcc5 from '@angular/material/chips';
import * as ɵngcc6 from '@angular/material/autocomplete';
import * as ɵngcc7 from '@angular/material/tooltip';
import * as ɵngcc8 from '@angular/material/icon';
import * as ɵngcc9 from '@angular/material/input';
import * as ɵngcc10 from '@angular/material/core';
import * as ɵngcc11 from '@angular/flex-layout/flex';
import * as ɵngcc12 from '@angular/material/button';
import * as ɵngcc13 from '@angular/material/progress-bar';
import * as ɵngcc14 from '@ngx-translate/core';
import * as ɵngcc15 from '../pipe/group-initial.pipe';

const _c0 = ["groupInput"];
function GroupCloudComponent_mat_label_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-label", 13);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(2, 1, ctx_r0.title || "ADF_CLOUD_GROUPS.SEARCH-GROUP"));
} }
function GroupCloudComponent_mat_chip_5_mat_icon_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-icon", 16);
    ɵngcc0.ɵɵtext(1, " cancel ");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const group_r15 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵattribute("data-automation-id", "adf-cloud-group-chip-remove-icon-" + group_r15.name);
} }
function GroupCloudComponent_mat_chip_5_Template(rf, ctx) { if (rf & 1) {
    const _r19 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "mat-chip", 14);
    ɵngcc0.ɵɵlistener("removed", function GroupCloudComponent_mat_chip_5_Template_mat_chip_removed_0_listener() { ɵngcc0.ɵɵrestoreView(_r19); const group_r15 = ctx.$implicit; const ctx_r18 = ɵngcc0.ɵɵnextContext(); return ctx_r18.onRemove(group_r15); });
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵtemplate(3, GroupCloudComponent_mat_chip_5_mat_icon_3_Template, 2, 1, "mat-icon", 15);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const group_r15 = ctx.$implicit;
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵpropertyInterpolate("matTooltip", ɵngcc0.ɵɵpipeBind1(1, 5, group_r15.readonly ? "ADF_CLOUD_GROUPS.MANDATORY" : ""));
    ɵngcc0.ɵɵproperty("removable", !group_r15.readonly);
    ɵngcc0.ɵɵattribute("data-automation-id", "adf-cloud-group-chip-" + group_r15.name);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", group_r15.name, " ");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !(group_r15.readonly || ctx_r2.readOnly));
} }
function GroupCloudComponent_input_6_Template(rf, ctx) { if (rf & 1) {
    const _r22 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "input", 17, 18);
    ɵngcc0.ɵɵlistener("focus", function GroupCloudComponent_input_6_Template_input_focus_0_listener() { ɵngcc0.ɵɵrestoreView(_r22); const ctx_r21 = ɵngcc0.ɵɵnextContext(); return ctx_r21.setFocus(true); })("blur", function GroupCloudComponent_input_6_Template_input_blur_0_listener() { ɵngcc0.ɵɵrestoreView(_r22); const ctx_r23 = ɵngcc0.ɵɵnextContext(); return ctx_r23.setFocus(false); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = ɵngcc0.ɵɵnextContext();
    const _r4 = ɵngcc0.ɵɵreference(8);
    const _r1 = ɵngcc0.ɵɵreference(4);
    ɵngcc0.ɵɵproperty("formControl", ctx_r3.searchGroupsControl)("matAutocomplete", _r4)("matChipInputFor", _r1);
} }
function GroupCloudComponent_ng_container_9_mat_option_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-option", 20);
    ɵngcc0.ɵɵelementStart(1, "div", 21);
    ɵngcc0.ɵɵelementStart(2, "button", 22);
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵpipe(4, "groupNameInitial");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(5, "span");
    ɵngcc0.ɵɵtext(6);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const group_r25 = ctx.$implicit;
    const i_r26 = ctx.index;
    ɵngcc0.ɵɵproperty("value", group_r25);
    ɵngcc0.ɵɵattribute("data-automation-id", "adf-cloud-group-chip-" + group_r25.name);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate1("id", "adf-group-", i_r26, "");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(4, 5, group_r25));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate(group_r25.name);
} }
function GroupCloudComponent_ng_container_9_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, GroupCloudComponent_ng_container_9_mat_option_1_Template, 7, 7, "mat-option", 19);
    ɵngcc0.ɵɵpipe(2, "async");
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r5 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", ɵngcc0.ɵɵpipeBind1(2, 1, ctx_r5.searchGroups$));
} }
const _c1 = function (a0) { return { groupName: a0 }; };
function GroupCloudComponent_ng_template_11_mat_option_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-option", 24);
    ɵngcc0.ɵɵelementStart(1, "span");
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r27 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind2(3, 1, "ADF_CLOUD_GROUPS.ERROR.NOT_FOUND", ɵngcc0.ɵɵpureFunction1(4, _c1, ctx_r27.searchedValue)), "");
} }
function GroupCloudComponent_ng_template_11_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, GroupCloudComponent_ng_template_11_mat_option_0_Template, 4, 6, "mat-option", 23);
} if (rf & 2) {
    const ctx_r7 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngIf", ctx_r7.searchGroupsControl.hasError("searchTypingError") && !ctx_r7.searchLoading);
} }
function GroupCloudComponent_mat_progress_bar_13_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "mat-progress-bar", 25);
} }
function GroupCloudComponent_mat_error_14_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-error");
    ɵngcc0.ɵɵelementStart(1, "mat-icon", 26);
    ɵngcc0.ɵɵtext(2, "warning");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵpipe(4, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r9 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind2(4, 1, "ADF_CLOUD_GROUPS.ERROR.NOT_FOUND", ɵngcc0.ɵɵpureFunction1(4, _c1, ctx_r9.validateGroupsMessage)), "");
} }
const _c2 = function (a0) { return { pattern: a0 }; };
function GroupCloudComponent_mat_error_15_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-error");
    ɵngcc0.ɵɵelementStart(1, "mat-icon", 26);
    ɵngcc0.ɵɵtext(2, "warning");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵpipe(4, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r10 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind2(4, 1, "ADF_CLOUD_PEOPLE_GROUPS.ERROR.INVALID_PATTERN", ɵngcc0.ɵɵpureFunction1(4, _c2, ctx_r10.getValidationPattern())), "");
} }
const _c3 = function (a0) { return { requiredLength: a0 }; };
function GroupCloudComponent_mat_error_16_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-error");
    ɵngcc0.ɵɵelementStart(1, "mat-icon", 26);
    ɵngcc0.ɵɵtext(2, "warning");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵpipe(4, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r11 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind2(4, 1, "ADF_CLOUD_PEOPLE_GROUPS.ERROR.INVALID_MAX_LENGTH", ɵngcc0.ɵɵpureFunction1(4, _c3, ctx_r11.getValidationMaxLength())), " ");
} }
function GroupCloudComponent_mat_error_17_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-error");
    ɵngcc0.ɵɵelementStart(1, "mat-icon", 26);
    ɵngcc0.ɵɵtext(2, "warning");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵpipe(4, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r12 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind2(4, 1, "ADF_CLOUD_PEOPLE_GROUPS.ERROR.INVALID_MIN_LENGTH", ɵngcc0.ɵɵpureFunction1(4, _c3, ctx_r12.getValidationMinLength())), "");
} }
function GroupCloudComponent_mat_error_18_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-error");
    ɵngcc0.ɵɵelementStart(1, "mat-icon", 26);
    ɵngcc0.ɵɵtext(2, "warning");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵpipe(4, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(4, 1, "ADF_CLOUD_PEOPLE_GROUPS.ERROR.REQUIRED"), " ");
} }
function GroupCloudComponent_mat_error_19_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-error", 27);
    ɵngcc0.ɵɵelementStart(1, "mat-icon", 26);
    ɵngcc0.ɵɵtext(2, "warning");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵpipe(4, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r14 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind2(4, 1, "ADF_CLOUD_GROUPS.ERROR.NOT_FOUND", ɵngcc0.ɵɵpureFunction1(4, _c1, ctx_r14.searchedValue)), "");
} }
export class GroupCloudComponent {
    constructor(identityGroupService, logService) {
        this.identityGroupService = identityGroupService;
        this.logService = logService;
        this.mode = 'single';
        this.preSelectGroups = [];
        this.validate = false;
        this.readOnly = false;
        this.groupChipsCtrl = new FormControl({ value: '', disabled: false });
        this.searchGroupsControl = new FormControl({ value: '', disabled: false });
        this.roles = [];
        this.selectGroup = new EventEmitter();
        this.removeGroup = new EventEmitter();
        this.changedGroups = new EventEmitter();
        this.warning = new EventEmitter();
        this.searchGroups = [];
        this.onDestroy$ = new Subject();
        this.selectedGroups = [];
        this.invalidGroups = [];
        this.searchGroups$ = new BehaviorSubject(this.searchGroups);
        this._subscriptAnimationState = 'enter';
        this.searchedValue = '';
        this.validationLoading = false;
        this.searchLoading = false;
    }
    ngOnInit() {
        this.loadClientId();
        this.initSearch();
    }
    ngOnChanges(changes) {
        if (this.hasPreselectedGroupsChanged(changes) || this.hasModeChanged(changes) || this.isValidationChanged(changes)) {
            if (this.hasPreSelectGroups()) {
                this.loadPreSelectGroups();
            }
            else if (this.hasPreselectedGroupsCleared(changes)) {
                this.selectedGroups = [];
                this.invalidGroups = [];
            }
            if (!this.isValidationEnabled()) {
                this.invalidGroups = [];
            }
        }
        if (changes.appName && this.isAppNameChanged(changes.appName)) {
            this.loadClientId();
        }
    }
    isAppNameChanged(change) {
        return change
            && change.previousValue !== change.currentValue
            && this.appName
            && this.appName.length > 0;
    }
    loadClientId() {
        return __awaiter(this, void 0, void 0, function* () {
            this.clientId = yield this.identityGroupService.getClientIdByApplicationName(this.appName).toPromise();
            if (this.clientId) {
                this.searchGroupsControl.enable();
            }
        });
    }
    initSearch() {
        this.searchGroupsControl.valueChanges.pipe(filter((value) => {
            this.searchLoading = true;
            return typeof value === 'string';
        }), tap((value) => {
            if (value) {
                this.setTypingError();
            }
        }), debounceTime(500), distinctUntilChanged(), tap((value) => {
            if (value.trim()) {
                this.searchedValue = value;
            }
            else {
                this.searchGroupsControl.markAsPristine();
                this.searchGroupsControl.markAsUntouched();
            }
        }), tap(() => this.resetSearchGroups()), switchMap((name) => this.identityGroupService.findGroupsByName({ name: name.trim() })), mergeMap((groups) => {
            this.resetSearchGroups();
            this.searchLoading = false;
            return groups;
        }), filter(group => !this.isGroupAlreadySelected(group)), mergeMap(group => {
            if (this.appName) {
                return this.checkGroupHasAccess(group.id).pipe(mergeMap(hasRole => hasRole ? of(group) : of()));
            }
            else if (this.hasRoles()) {
                return this.filterGroupsByRoles(group);
            }
            else {
                return of(group);
            }
        }), takeUntil(this.onDestroy$)).subscribe(searchedGroup => {
            this.searchGroups.push(searchedGroup);
            this.searchGroups$.next(this.searchGroups);
        });
    }
    checkGroupHasAccess(groupId) {
        if (this.hasRoles()) {
            return this.identityGroupService.checkGroupHasAnyClientAppRole(groupId, this.clientId, this.roles);
        }
        else {
            return this.identityGroupService.checkGroupHasClientApp(groupId, this.clientId);
        }
    }
    isGroupAlreadySelected(group) {
        if (this.selectedGroups && this.selectedGroups.length > 0) {
            const result = this.selectedGroups.find((selectedGroup) => {
                return selectedGroup.name === group.name;
            });
            return !!result;
        }
        return false;
    }
    searchGroup(name) {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.identityGroupService.findGroupsByName({ name }).toPromise())[0];
        });
    }
    getPreselectedGroups() {
        if (this.isSingleMode()) {
            return [this.preSelectGroups[0]];
        }
        else {
            return this.removeDuplicatedGroups(this.preSelectGroups);
        }
    }
    validatePreselectGroups() {
        return __awaiter(this, void 0, void 0, function* () {
            this.invalidGroups = [];
            for (const group of this.getPreselectedGroups()) {
                try {
                    const validationResult = yield this.searchGroup(group.name);
                    if (this.isPreselectedGroupInvalid(group, validationResult)) {
                        this.invalidGroups.push(group);
                    }
                }
                catch (error) {
                    this.invalidGroups.push(group);
                    this.logService.error(error);
                }
            }
            this.checkPreselectValidationErrors();
        });
    }
    checkPreselectValidationErrors() {
        this.invalidGroups = this.removeDuplicatedGroups(this.invalidGroups);
        if (this.invalidGroups.length > 0) {
            this.generateInvalidGroupsMessage();
        }
        this.warning.emit({
            message: 'INVALID_PRESELECTED_GROUPS',
            groups: this.invalidGroups
        });
    }
    generateInvalidGroupsMessage() {
        this.validateGroupsMessage = '';
        this.invalidGroups.forEach((invalidGroup, index) => {
            if (index === this.invalidGroups.length - 1) {
                this.validateGroupsMessage += `${invalidGroup.name} `;
            }
            else {
                this.validateGroupsMessage += `${invalidGroup.name}, `;
            }
        });
    }
    loadPreSelectGroups() {
        return __awaiter(this, void 0, void 0, function* () {
            this.selectedGroups = [];
            if (this.isSingleMode()) {
                this.selectedGroups = [this.preSelectGroups[0]];
            }
            else {
                this.selectedGroups = this.removeDuplicatedGroups(this.preSelectGroups);
            }
            this.groupChipsCtrl.setValue(this.selectedGroups[0].name);
            if (this.isValidationEnabled()) {
                this.validationLoading = true;
                yield this.validatePreselectGroups();
                this.validationLoading = false;
            }
        });
    }
    filterGroupsByRoles(group) {
        return this.identityGroupService.checkGroupHasRole(group.id, this.roles).pipe(map((hasRole) => ({ hasRole: hasRole, group: group })), filter((filteredGroup) => filteredGroup.hasRole), map((filteredGroup) => filteredGroup.group));
    }
    onSelect(group) {
        if (group) {
            this.selectGroup.emit(group);
            if (this.isMultipleMode()) {
                if (!this.isGroupAlreadySelected(group)) {
                    this.selectedGroups.push(group);
                }
            }
            else {
                this.invalidGroups = [];
                this.selectedGroups = [group];
            }
            this.groupInput.nativeElement.value = '';
            this.searchGroupsControl.setValue('');
            this.groupChipsCtrlValue(this.selectedGroups[0].name);
            this.changedGroups.emit(this.selectedGroups);
            this.resetSearchGroups();
        }
    }
    onRemove(groupToRemove) {
        this.removeGroup.emit(groupToRemove);
        this.removeGroupFromSelected(groupToRemove);
        this.changedGroups.emit(this.selectedGroups);
        if (this.selectedGroups.length === 0) {
            this.groupChipsCtrlValue('');
        }
        else {
            this.groupChipsCtrlValue(this.selectedGroups[0].name);
        }
        this.searchGroupsControl.markAsDirty();
        this.searchGroupsControl.markAsTouched();
        if (this.isValidationEnabled()) {
            this.removeGroupFromValidation(groupToRemove);
            this.checkPreselectValidationErrors();
        }
    }
    groupChipsCtrlValue(value) {
        this.groupChipsCtrl.setValue(value);
        this.groupChipsCtrl.markAsDirty();
        this.groupChipsCtrl.markAsTouched();
    }
    removeGroupFromSelected({ id, name }) {
        const indexToRemove = this.selectedGroups.findIndex(group => {
            return group.id === id && group.name === name;
        });
        if (indexToRemove !== -1) {
            this.selectedGroups.splice(indexToRemove, 1);
        }
    }
    removeGroupFromValidation({ id, name }) {
        const indexToRemove = this.invalidGroups.findIndex(group => {
            return group.id === id && group.name === name;
        });
        if (indexToRemove !== -1) {
            this.invalidGroups.splice(indexToRemove, 1);
        }
    }
    resetSearchGroups() {
        this.searchGroups = [];
        this.searchGroups$.next(this.searchGroups);
    }
    isPreselectedGroupInvalid(preselectedGroup, validatedGroup) {
        if (validatedGroup && validatedGroup.name !== undefined) {
            return preselectedGroup.name !== validatedGroup.name;
        }
        else {
            return true;
        }
    }
    isSingleMode() {
        return this.mode === 'single';
    }
    isSingleSelectionReadonly() {
        return this.isSingleMode() && this.selectedGroups.length === 1 && this.selectedGroups[0].readonly === true;
    }
    hasPreselectError() {
        return this.invalidGroups && this.invalidGroups.length > 0;
    }
    isReadonly() {
        return this.readOnly || this.isSingleSelectionReadonly();
    }
    isMultipleMode() {
        return this.mode === 'multiple';
    }
    getDisplayName(group) {
        return group ? group.name : '';
    }
    removeDuplicatedGroups(groups) {
        return groups.filter((group, index, self) => index === self.findIndex((auxGroup) => {
            return group.id === auxGroup.id && group.name === auxGroup.name;
        }));
    }
    hasPreSelectGroups() {
        return this.preSelectGroups && this.preSelectGroups.length > 0;
    }
    hasModeChanged(changes) {
        return changes
            && changes.mode
            && changes.mode.currentValue !== changes.mode.previousValue;
    }
    isValidationChanged(changes) {
        return changes
            && changes.validate
            && changes.validate.currentValue !== changes.validate.previousValue;
    }
    hasPreselectedGroupsChanged(changes) {
        return changes
            && changes.preSelectGroups
            && changes.preSelectGroups.currentValue !== changes.preSelectGroups.previousValue;
    }
    hasPreselectedGroupsCleared(changes) {
        return changes
            && changes.preSelectGroups
            && changes.preSelectGroups.currentValue.length === 0;
    }
    hasRoles() {
        return this.roles && this.roles.length > 0;
    }
    setTypingError() {
        this.searchGroupsControl.setErrors(Object.assign({ searchTypingError: true }, this.searchGroupsControl.errors));
    }
    hasError() {
        return !!this.searchGroupsControl.errors;
    }
    isValidationLoading() {
        return this.isValidationEnabled() && this.validationLoading;
    }
    setFocus(isFocused) {
        this.isFocused = isFocused;
    }
    isValidationEnabled() {
        return this.validate === true;
    }
    getValidationPattern() {
        return this.searchGroupsControl.errors.pattern.requiredPattern;
    }
    getValidationMaxLength() {
        return this.searchGroupsControl.errors.maxlength.requiredLength;
    }
    getValidationMinLength() {
        return this.searchGroupsControl.errors.minlength.requiredLength;
    }
    ngOnDestroy() {
        this.onDestroy$.next(true);
        this.onDestroy$.complete();
    }
}
GroupCloudComponent.ɵfac = function GroupCloudComponent_Factory(t) { return new (t || GroupCloudComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.IdentityGroupService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.LogService)); };
GroupCloudComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: GroupCloudComponent, selectors: [["adf-cloud-group"]], viewQuery: function GroupCloudComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c0, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.groupInput = _t.first);
    } }, inputs: { mode: "mode", preSelectGroups: "preSelectGroups", validate: "validate", readOnly: "readOnly", groupChipsCtrl: "groupChipsCtrl", searchGroupsControl: "searchGroupsControl", roles: "roles", appName: "appName", title: "title" }, outputs: { selectGroup: "selectGroup", removeGroup: "removeGroup", changedGroups: "changedGroups", warning: "warning" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 20, vars: 16, consts: [[1, "adf-cloud-group"], ["id", "adf-group-cloud-title-id", 4, "ngIf"], ["data-automation-id", "adf-cloud-group-chip-list", 3, "disabled"], ["groupChipList", ""], [3, "removable", "matTooltip", "removed", 4, "ngFor", "ngForOf"], ["matInput", "", "class", "adf-group-input", "data-automation-id", "adf-cloud-group-search-input", 3, "formControl", "matAutocomplete", "matChipInputFor", "focus", "blur", 4, "ngIf"], ["autoActiveFirstOption", "", "data-automation-id", "adf-cloud-group-autocomplete", 1, "adf-cloud-group-list", 3, "displayWith", "optionSelected"], ["auto", "matAutocomplete"], [4, "ngIf", "ngIfElse"], ["noResults", ""], ["mode", "indeterminate", 4, "ngIf"], [4, "ngIf"], ["data-automation-id", "invalid-groups-typing-error", 4, "ngIf"], ["id", "adf-group-cloud-title-id"], [3, "removable", "matTooltip", "removed"], ["matChipRemove", "", 4, "ngIf"], ["matChipRemove", ""], ["matInput", "", "data-automation-id", "adf-cloud-group-search-input", 1, "adf-group-input", 3, "formControl", "matAutocomplete", "matChipInputFor", "focus", "blur"], ["groupInput", ""], [3, "value", 4, "ngFor", "ngForOf"], [3, "value"], ["fxLayout", "row", "fxLayoutAlign", "start center", "data-automation-id", "adf-cloud-group-row", "fxLayoutGap", "20px", 1, "adf-cloud-group-row", 3, "id"], ["mat-fab", "", 1, "adf-group-short-name"], ["disabled", "", "class", "adf-cloud-group-option-not-active", "data-automation-id", "adf-cloud-group-no-results", 4, "ngIf"], ["disabled", "", "data-automation-id", "adf-cloud-group-no-results", 1, "adf-cloud-group-option-not-active"], ["mode", "indeterminate"], [1, "adf-start-task-cloud-error-icon"], ["data-automation-id", "invalid-groups-typing-error"]], template: function GroupCloudComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "form");
        ɵngcc0.ɵɵelementStart(1, "mat-form-field", 0);
        ɵngcc0.ɵɵtemplate(2, GroupCloudComponent_mat_label_2_Template, 3, 3, "mat-label", 1);
        ɵngcc0.ɵɵelementStart(3, "mat-chip-list", 2, 3);
        ɵngcc0.ɵɵtemplate(5, GroupCloudComponent_mat_chip_5_Template, 4, 7, "mat-chip", 4);
        ɵngcc0.ɵɵtemplate(6, GroupCloudComponent_input_6_Template, 2, 3, "input", 5);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(7, "mat-autocomplete", 6, 7);
        ɵngcc0.ɵɵlistener("optionSelected", function GroupCloudComponent_Template_mat_autocomplete_optionSelected_7_listener($event) { return ctx.onSelect($event.option.value); });
        ɵngcc0.ɵɵtemplate(9, GroupCloudComponent_ng_container_9_Template, 3, 3, "ng-container", 8);
        ɵngcc0.ɵɵpipe(10, "async");
        ɵngcc0.ɵɵtemplate(11, GroupCloudComponent_ng_template_11_Template, 1, 1, "ng-template", null, 9, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(13, GroupCloudComponent_mat_progress_bar_13_Template, 1, 0, "mat-progress-bar", 10);
        ɵngcc0.ɵɵtemplate(14, GroupCloudComponent_mat_error_14_Template, 5, 6, "mat-error", 11);
        ɵngcc0.ɵɵtemplate(15, GroupCloudComponent_mat_error_15_Template, 5, 6, "mat-error", 11);
        ɵngcc0.ɵɵtemplate(16, GroupCloudComponent_mat_error_16_Template, 5, 6, "mat-error", 11);
        ɵngcc0.ɵɵtemplate(17, GroupCloudComponent_mat_error_17_Template, 5, 6, "mat-error", 11);
        ɵngcc0.ɵɵtemplate(18, GroupCloudComponent_mat_error_18_Template, 5, 3, "mat-error", 11);
        ɵngcc0.ɵɵtemplate(19, GroupCloudComponent_mat_error_19_Template, 5, 6, "mat-error", 12);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        const _r6 = ɵngcc0.ɵɵreference(12);
        var tmp_5_0 = null;
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.isReadonly());
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("disabled", ctx.isReadonly() || ctx.isValidationLoading());
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.selectedGroups);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.isReadonly());
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("displayWith", ctx.getDisplayName);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", (tmp_5_0 = ɵngcc0.ɵɵpipeBind1(10, 14, ctx.searchGroups$)) == null ? null : tmp_5_0.length)("ngIfElse", _r6);
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵproperty("ngIf", ctx.validationLoading);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.hasPreselectError() && !ctx.isValidationLoading());
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.searchGroupsControl.hasError("pattern"));
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.searchGroupsControl.hasError("maxlength"));
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.searchGroupsControl.hasError("minlength"));
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.searchGroupsControl.hasError("required") || ctx.groupChipsCtrl.hasError("required"));
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.searchGroupsControl.hasError("searchTypingError") && !ctx.isFocused);
    } }, directives: [ɵngcc2.ɵangular_packages_forms_forms_y, ɵngcc2.NgControlStatusGroup, ɵngcc2.NgForm, ɵngcc3.MatFormField, ɵngcc4.NgIf, ɵngcc5.MatChipList, ɵngcc4.NgForOf, ɵngcc6.MatAutocomplete, ɵngcc3.MatLabel, ɵngcc5.MatChip, ɵngcc7.MatTooltip, ɵngcc8.MatIcon, ɵngcc5.MatChipRemove, ɵngcc9.MatInput, ɵngcc2.DefaultValueAccessor, ɵngcc6.MatAutocompleteTrigger, ɵngcc5.MatChipInput, ɵngcc2.NgControlStatus, ɵngcc2.FormControlDirective, ɵngcc10.MatOption, ɵngcc11.DefaultLayoutDirective, ɵngcc11.DefaultLayoutAlignDirective, ɵngcc11.DefaultLayoutGapDirective, ɵngcc12.MatButton, ɵngcc13.MatProgressBar, ɵngcc3.MatError], pipes: [ɵngcc4.AsyncPipe, ɵngcc14.TranslatePipe, ɵngcc15.InitialGroupNamePipe], styles: [".adf-cloud-group-list{margin:5px 0;padding:10px 0}.adf-cloud-group{width:100%}.adf-cloud-group-option-not-active{background:inherit!important}.adf-cloud-group .mat-form-field{width:100%}.adf-cloud-group-error{height:20px;margin-top:-10px;position:absolute}.adf-cloud-group-error-message{color:var(--theme-warn-color);font-size:12px;height:16px;line-height:1.33;padding-right:8px;width:auto}.adf-cloud-group-error-icon{color:var(--theme-warn-color);font-size:17px}.mat-autocomplete-panel .mat-fab{background:var(--theme-primary-color);box-shadow:none!important;font-size:18px;font-weight:bolder;height:40px;width:40px}.mat-autocomplete-panel .mat-fab .mat-button-wrapper{display:inline!important}"], encapsulation: 2, data: { animation: [
            trigger('transitionMessages', [
                state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),
                transition('void => enter', [
                    style({ opacity: 0, transform: 'translateY(-100%)' }),
                    animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)')
                ])
            ])
        ] }, changeDetection: 0 });
GroupCloudComponent.ctorParameters = () => [
    { type: IdentityGroupService },
    { type: LogService }
];
GroupCloudComponent.propDecorators = {
    appName: [{ type: Input }],
    title: [{ type: Input }],
    mode: [{ type: Input }],
    preSelectGroups: [{ type: Input }],
    validate: [{ type: Input }],
    readOnly: [{ type: Input }],
    groupChipsCtrl: [{ type: Input }],
    searchGroupsControl: [{ type: Input }],
    roles: [{ type: Input }],
    selectGroup: [{ type: Output }],
    removeGroup: [{ type: Output }],
    changedGroups: [{ type: Output }],
    warning: [{ type: Output }],
    groupInput: [{ type: ViewChild, args: ['groupInput',] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(GroupCloudComponent, [{
        type: Component,
        args: [{
                selector: 'adf-cloud-group',
                template: "<form>\n    <mat-form-field class=\"adf-cloud-group\">\n        <mat-label *ngIf=\"!isReadonly()\"\n            id=\"adf-group-cloud-title-id\">{{ (title || 'ADF_CLOUD_GROUPS.SEARCH-GROUP') | translate }}</mat-label>\n        <mat-chip-list #groupChipList [disabled]=\"isReadonly() || isValidationLoading()\" data-automation-id=\"adf-cloud-group-chip-list\">\n            <mat-chip\n                *ngFor=\"let group of selectedGroups\"\n                [removable]=\"!(group.readonly)\"\n                [attr.data-automation-id]=\"'adf-cloud-group-chip-' + group.name\"\n                (removed)=\"onRemove(group)\"\n                matTooltip=\"{{ (group.readonly ? 'ADF_CLOUD_GROUPS.MANDATORY' : '') | translate }}\">\n                {{group.name}}\n                <mat-icon\n                    *ngIf=\"!(group.readonly || readOnly)\"\n                    matChipRemove [attr.data-automation-id]=\"'adf-cloud-group-chip-remove-icon-' + group.name\">\n                    cancel\n                </mat-icon>\n            </mat-chip>\n            <input *ngIf=\"!isReadonly()\" matInput\n                   [formControl]=\"searchGroupsControl\"\n                   [matAutocomplete]=\"auto\"\n                   [matChipInputFor]=\"groupChipList\"\n                   (focus)=\"setFocus(true)\"\n                   (blur)=\"setFocus(false)\"\n                   class=\"adf-group-input\"\n                   data-automation-id=\"adf-cloud-group-search-input\" #groupInput>\n        </mat-chip-list>\n\n        <mat-autocomplete\n            autoActiveFirstOption\n            #auto=\"matAutocomplete\"\n            class=\"adf-cloud-group-list\"\n            (optionSelected)=\"onSelect($event.option.value)\"\n            [displayWith]=\"getDisplayName\"\n            data-automation-id=\"adf-cloud-group-autocomplete\">\n            <ng-container *ngIf=\"(searchGroups$ | async)?.length else noResults\">\n                <mat-option *ngFor=\"let group of searchGroups$ | async; let i = index\" [value]=\"group\"\n                            [attr.data-automation-id]=\"'adf-cloud-group-chip-' + group.name\">\n                    <div class=\"adf-cloud-group-row\" id=\"adf-group-{{i}}\" fxLayout=\"row\" fxLayoutAlign=\"start center\"\n                         data-automation-id=\"adf-cloud-group-row\"\n                         fxLayoutGap=\"20px\">\n                        <button class=\"adf-group-short-name\" mat-fab>{{group | groupNameInitial }}</button>\n                        <span>{{group.name}}</span>\n                    </div>\n                </mat-option>\n            </ng-container>\n            <ng-template #noResults>\n                <mat-option *ngIf=\"searchGroupsControl.hasError('searchTypingError') && !searchLoading\" disabled\n                            class=\"adf-cloud-group-option-not-active\"\n                            data-automation-id=\"adf-cloud-group-no-results\">\n                    <span> {{ 'ADF_CLOUD_GROUPS.ERROR.NOT_FOUND' | translate : { groupName: searchedValue } }}</span>\n                </mat-option>\n            </ng-template>\n        </mat-autocomplete>\n    </mat-form-field>\n    <mat-progress-bar\n        *ngIf=\"validationLoading\"\n        mode=\"indeterminate\">\n    </mat-progress-bar>\n\n    <mat-error *ngIf=\"hasPreselectError() &&  !isValidationLoading()\">\n        <mat-icon class=\"adf-start-task-cloud-error-icon\">warning</mat-icon>\n        {{ 'ADF_CLOUD_GROUPS.ERROR.NOT_FOUND' | translate : { groupName : validateGroupsMessage } }}</mat-error>\n    <mat-error *ngIf=\"searchGroupsControl.hasError('pattern')\">\n        <mat-icon class=\"adf-start-task-cloud-error-icon\">warning</mat-icon>\n        {{ 'ADF_CLOUD_PEOPLE_GROUPS.ERROR.INVALID_PATTERN' | translate: { pattern: getValidationPattern() } }}</mat-error>\n    <mat-error *ngIf=\"searchGroupsControl.hasError('maxlength')\">\n        <mat-icon class=\"adf-start-task-cloud-error-icon\">warning</mat-icon>\n        {{ 'ADF_CLOUD_PEOPLE_GROUPS.ERROR.INVALID_MAX_LENGTH' | translate: { requiredLength: getValidationMaxLength() } }}\n    </mat-error>\n    <mat-error *ngIf=\"searchGroupsControl.hasError('minlength')\">\n        <mat-icon class=\"adf-start-task-cloud-error-icon\">warning</mat-icon>\n        {{ 'ADF_CLOUD_PEOPLE_GROUPS.ERROR.INVALID_MIN_LENGTH' | translate: { requiredLength: getValidationMinLength() } }}</mat-error>\n    <mat-error *ngIf=\"searchGroupsControl.hasError('required') || groupChipsCtrl.hasError('required')\">\n        <mat-icon class=\"adf-start-task-cloud-error-icon\">warning</mat-icon>\n        {{ 'ADF_CLOUD_PEOPLE_GROUPS.ERROR.REQUIRED' | translate }} </mat-error>\n    <mat-error *ngIf=\"searchGroupsControl.hasError('searchTypingError') && !this.isFocused\" data-automation-id=\"invalid-groups-typing-error\">\n        <mat-icon class=\"adf-start-task-cloud-error-icon\">warning</mat-icon>\n        {{ 'ADF_CLOUD_GROUPS.ERROR.NOT_FOUND' | translate : { groupName : searchedValue } }}</mat-error>\n</form>\n",
                animations: [
                    trigger('transitionMessages', [
                        state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),
                        transition('void => enter', [
                            style({ opacity: 0, transform: 'translateY(-100%)' }),
                            animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)')
                        ])
                    ])
                ],
                changeDetection: ChangeDetectionStrategy.OnPush,
                encapsulation: ViewEncapsulation.None,
                styles: [".adf-cloud-group-list{margin:5px 0;padding:10px 0}.adf-cloud-group{width:100%}.adf-cloud-group-option-not-active{background:inherit!important}.adf-cloud-group .mat-form-field{width:100%}.adf-cloud-group-error{height:20px;margin-top:-10px;position:absolute}.adf-cloud-group-error-message{color:var(--theme-warn-color);font-size:12px;height:16px;line-height:1.33;padding-right:8px;width:auto}.adf-cloud-group-error-icon{color:var(--theme-warn-color);font-size:17px}.mat-autocomplete-panel .mat-fab{background:var(--theme-primary-color);box-shadow:none!important;font-size:18px;font-weight:bolder;height:40px;width:40px}.mat-autocomplete-panel .mat-fab .mat-button-wrapper{display:inline!important}"]
            }]
    }], function () { return [{ type: ɵngcc1.IdentityGroupService }, { type: ɵngcc1.LogService }]; }, { mode: [{
            type: Input
        }], preSelectGroups: [{
            type: Input
        }], validate: [{
            type: Input
        }], readOnly: [{
            type: Input
        }], groupChipsCtrl: [{
            type: Input
        }], searchGroupsControl: [{
            type: Input
        }], roles: [{
            type: Input
        }], selectGroup: [{
            type: Output
        }], removeGroup: [{
            type: Output
        }], changedGroups: [{
            type: Output
        }], warning: [{
            type: Output
        }], appName: [{
            type: Input
        }], title: [{
            type: Input
        }], groupInput: [{
            type: ViewChild,
            args: ['groupInput']
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,