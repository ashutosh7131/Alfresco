/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, Input, EventEmitter, Output } from '@angular/core';
import { FormGroup, FormControl } from '@angular/forms';
import { DateCloudFilterType } from '../../models/date-cloud-filter.model';
import moment from 'moment-es6';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/material/form-field';
import * as ɵngcc2 from '@angular/material/select';
import * as ɵngcc3 from '@angular/common';
import * as ɵngcc4 from '@angular/material/core';
import * as ɵngcc5 from '@angular/material/datepicker';
import * as ɵngcc6 from '@angular/forms';
import * as ɵngcc7 from '@ngx-translate/core';

function DateRangeFilterComponent_mat_option_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-option", 4);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const propertyOption_r2 = ctx.$implicit;
    ɵngcc0.ɵɵproperty("value", propertyOption_r2.value);
    ɵngcc0.ɵɵattribute("data-automation-id", "adf-cloud-edit-process-property-options-" + propertyOption_r2.value.toString());
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 3, propertyOption_r2.label), " ");
} }
function DateRangeFilterComponent_ng_container_4_Template(rf, ctx) { if (rf & 1) {
    const _r5 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "mat-form-field", 5);
    ɵngcc0.ɵɵelementStart(2, "mat-label");
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵpipe(4, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(5, "mat-date-range-input", 6);
    ɵngcc0.ɵɵelement(6, "input", 7);
    ɵngcc0.ɵɵpipe(7, "translate");
    ɵngcc0.ɵɵelement(8, "input", 8);
    ɵngcc0.ɵɵpipe(9, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(10, "mat-datepicker-toggle", 9);
    ɵngcc0.ɵɵelementStart(11, "mat-date-range-picker", 10, 11);
    ɵngcc0.ɵɵlistener("closed", function DateRangeFilterComponent_ng_container_4_Template_mat_date_range_picker_closed_11_listener() { ɵngcc0.ɵɵrestoreView(_r5); const ctx_r4 = ɵngcc0.ɵɵnextContext(); return ctx_r4.onDateRangeClosed(); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const _r3 = ɵngcc0.ɵɵreference(12);
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("floatLabel", "auto");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(4, 8, "ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.DATE_RANGE_TITLE"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("formGroup", ctx_r1.dateRangeForm)("rangePicker", _r3);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate("placeholder", ɵngcc0.ɵɵpipeBind1(7, 10, "ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.START_DATE"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵpropertyInterpolate("placeholder", ɵngcc0.ɵɵpipeBind1(9, 12, "ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.END_DATE"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("for", _r3);
    ɵngcc0.ɵɵattribute("data-automation-id", "adf-cloud-edit-process-property-date-range-" + ctx_r1.processFilterProperty.key);
} }
export class DateRangeFilterComponent {
    constructor() {
        this.dateChanged = new EventEmitter();
        this.dateTypeChange = new EventEmitter();
        this.filteredProperties = [];
        this.dateRangeForm = new FormGroup({
            from: new FormControl(),
            to: new FormControl()
        });
    }
    ngOnInit() {
        this.options = this.options ? this.options : this.createDefaultRangeOptions();
        const defaultProperties = this.createDefaultDateOptions();
        this.filteredProperties = defaultProperties.filter((filterProperty) => this.isValidProperty(this.options, filterProperty.value.toString()));
        if (this.hasPreselectedValues()) {
            this.setPreselectedValues();
        }
    }
    onSelectionChange(option) {
        this.type = option.value;
        if (!this.isDateRangeType()) {
            this.dateTypeChange.emit(this.type);
        }
    }
    isDateRangeType() {
        return this.type === DateCloudFilterType.RANGE;
    }
    onDateRangeClosed() {
        const dateRange = {
            startDate: moment(this.dateRangeForm.controls.from.value).startOf('day').toISOString(true),
            endDate: moment(this.dateRangeForm.controls.to.value).endOf('day').toISOString(true)
        };
        this.dateChanged.emit(dateRange);
    }
    hasPreselectedValues() {
        var _a, _b;
        return !!((_a = this.processFilterProperty) === null || _a === void 0 ? void 0 : _a.attributes) && !!((_b = this.processFilterProperty) === null || _b === void 0 ? void 0 : _b.value);
    }
    setPreselectedValues() {
        const from = this.getFilterAttribute('from');
        const to = this.getFilterAttribute('to');
        const type = this.getFilterAttribute('dateType');
        this.dateRangeForm.get('from').setValue(moment(this.getFilterValue(from)));
        this.dateRangeForm.get('to').setValue(moment(this.getFilterValue(to)));
        this.type = this.getFilterValue(type);
    }
    getFilterAttribute(key) {
        return this.processFilterProperty.attributes[key];
    }
    getFilterValue(attribute) {
        return this.processFilterProperty.value[attribute];
    }
    isValidProperty(filterProperties, key) {
        return filterProperties ? filterProperties.indexOf(key) >= 0 : true;
    }
    createDefaultRangeOptions() {
        return [
            DateCloudFilterType.NO_DATE,
            DateCloudFilterType.TODAY,
            DateCloudFilterType.WEEK,
            DateCloudFilterType.MONTH,
            DateCloudFilterType.QUARTER,
            DateCloudFilterType.YEAR,
            DateCloudFilterType.RANGE
        ];
    }
    createDefaultDateOptions() {
        return [
            {
                value: DateCloudFilterType.NO_DATE,
                label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.DATE_RANGE.NO_DATE'
            },
            {
                value: DateCloudFilterType.TODAY,
                label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.DATE_RANGE.TODAY'
            },
            {
                value: DateCloudFilterType.TOMORROW,
                label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.DATE_RANGE.TOMORROW'
            },
            {
                value: DateCloudFilterType.NEXT_7_DAYS,
                label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.DATE_RANGE.NEXT_7_DAYS'
            },
            {
                value: DateCloudFilterType.WEEK,
                label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.DATE_RANGE.WEEK'
            },
            {
                value: DateCloudFilterType.MONTH,
                label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.DATE_RANGE.MONTH'
            },
            {
                value: DateCloudFilterType.QUARTER,
                label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.DATE_RANGE.QUARTER'
            },
            {
                value: DateCloudFilterType.YEAR,
                label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.DATE_RANGE.YEAR'
            },
            {
                value: DateCloudFilterType.RANGE,
                label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.DATE_RANGE.RANGE'
            }
        ];
    }
}
DateRangeFilterComponent.ɵfac = function DateRangeFilterComponent_Factory(t) { return new (t || DateRangeFilterComponent)(); };
DateRangeFilterComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: DateRangeFilterComponent, selectors: [["adf-cloud-date-range-filter"]], inputs: { options: "options", processFilterProperty: "processFilterProperty" }, outputs: { dateChanged: "dateChanged", dateTypeChange: "dateTypeChange" }, decls: 5, vars: 9, consts: [[3, "floatLabel"], [3, "placeholder", "value", "selectionChange"], [3, "value", 4, "ngFor", "ngForOf"], [4, "ngIf"], [3, "value"], [1, "adf-cloud-date-range-picker", 3, "floatLabel"], [3, "formGroup", "rangePicker"], ["matStartDate", "", "formControlName", "from", 3, "placeholder"], ["matEndDate", "", "formControlName", "to", 3, "placeholder"], ["matSuffix", "", 3, "for"], [3, "closed"], ["picker", ""]], template: function DateRangeFilterComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "mat-form-field", 0);
        ɵngcc0.ɵɵelementStart(1, "mat-select", 1);
        ɵngcc0.ɵɵlistener("selectionChange", function DateRangeFilterComponent_Template_mat_select_selectionChange_1_listener($event) { return ctx.onSelectionChange($event); });
        ɵngcc0.ɵɵpipe(2, "translate");
        ɵngcc0.ɵɵtemplate(3, DateRangeFilterComponent_mat_option_3_Template, 3, 5, "mat-option", 2);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(4, DateRangeFilterComponent_ng_container_4_Template, 13, 14, "ng-container", 3);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("floatLabel", "auto");
        ɵngcc0.ɵɵattribute("data-automation-id", ctx.processFilterProperty.key);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵpropertyInterpolate("placeholder", ɵngcc0.ɵɵpipeBind1(2, 7, ctx.processFilterProperty.label));
        ɵngcc0.ɵɵproperty("value", ctx.type);
        ɵngcc0.ɵɵattribute("data-automation-id", "adf-cloud-edit-process-property-" + ctx.processFilterProperty.key);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.filteredProperties);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.isDateRangeType());
    } }, directives: [ɵngcc1.MatFormField, ɵngcc2.MatSelect, ɵngcc3.NgForOf, ɵngcc3.NgIf, ɵngcc4.MatOption, ɵngcc1.MatLabel, ɵngcc5.MatDateRangeInput, ɵngcc6.NgControlStatusGroup, ɵngcc6.FormGroupDirective, ɵngcc5.MatStartDate, ɵngcc6.DefaultValueAccessor, ɵngcc6.NgControlStatus, ɵngcc6.FormControlName, ɵngcc5.MatEndDate, ɵngcc5.MatDatepickerToggle, ɵngcc1.MatSuffix, ɵngcc5.MatDateRangePicker], pipes: [ɵngcc7.TranslatePipe], styles: [".adf-cloud-date-range-picker[_ngcontent-%COMP%]{margin:0 10px}"] });
DateRangeFilterComponent.propDecorators = {
    processFilterProperty: [{ type: Input }],
    options: [{ type: Input }],
    dateChanged: [{ type: Output }],
    dateTypeChange: [{ type: Output }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DateRangeFilterComponent, [{
        type: Component,
        args: [{
                selector: 'adf-cloud-date-range-filter',
                template: "\n<mat-form-field [floatLabel]=\"'auto'\" [attr.data-automation-id]=\"processFilterProperty.key\">\n    <mat-select\n        placeholder=\"{{ processFilterProperty.label | translate }}\"\n        [value]=\"type\"\n        (selectionChange)=\"onSelectionChange($event)\"\n        [attr.data-automation-id]=\"'adf-cloud-edit-process-property-' + processFilterProperty.key\">\n        <mat-option *ngFor=\"let propertyOption of filteredProperties\" [value]=\"propertyOption.value\" [attr.data-automation-id]=\"'adf-cloud-edit-process-property-options-' + propertyOption.value.toString()\">\n            {{ propertyOption.label | translate }}\n        </mat-option>\n    </mat-select>\n</mat-form-field>\n\n<ng-container *ngIf=\"isDateRangeType()\">\n    <mat-form-field [floatLabel]=\"'auto'\" class=\"adf-cloud-date-range-picker\">\n        <mat-label>{{ 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.DATE_RANGE_TITLE' | translate }}</mat-label>\n        <mat-date-range-input [formGroup]=\"dateRangeForm\" [rangePicker]=\"picker\">\n          <input matStartDate formControlName=\"from\" placeholder=\"{{ 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.START_DATE' | translate }}\">\n          <input matEndDate formControlName=\"to\" placeholder=\"{{ 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.END_DATE' | translate }}\">\n        </mat-date-range-input>\n        <mat-datepicker-toggle\n            matSuffix\n            [for]=\"picker\"\n            [attr.data-automation-id]=\"'adf-cloud-edit-process-property-date-range-' + processFilterProperty.key\"></mat-datepicker-toggle>\n        <mat-date-range-picker #picker (closed)=\"onDateRangeClosed()\"></mat-date-range-picker>\n    </mat-form-field>\n</ng-container>\n",
                styles: [".adf-cloud-date-range-picker{margin:0 10px}"]
            }]
    }], function () { return []; }, { dateChanged: [{
            type: Output
        }], dateTypeChange: [{
            type: Output
        }], options: [{
            type: Input
        }], processFilterProperty: [{
            type: Input
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,