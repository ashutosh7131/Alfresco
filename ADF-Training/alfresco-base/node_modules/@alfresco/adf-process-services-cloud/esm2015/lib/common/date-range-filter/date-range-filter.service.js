import { Injectable } from '@angular/core';
import moment from 'moment-es6';
import { DateCloudFilterType } from '../../models/date-cloud-filter.model';
import * as i0 from "@angular/core";
import * as ɵngcc0 from '@angular/core';
export class DateRangeFilterService {
    constructor() {
        this.currentDate = new Date();
    }
    getDateRange(type) {
        switch (type) {
            case DateCloudFilterType.TODAY: return this.getTodayDateRange();
            case DateCloudFilterType.TOMORROW: return this.getTomorrowDateRange();
            case DateCloudFilterType.NEXT_7_DAYS: return this.getNext7DaysDateRange();
            case DateCloudFilterType.WEEK: return this.getCurrentWeekRange();
            case DateCloudFilterType.MONTH: return this.getCurrentMonthDateRange();
            case DateCloudFilterType.QUARTER: return this.getQuarterDateRange();
            case DateCloudFilterType.YEAR: return this.getCurrentYearDateRange();
            default: return this.resetDateRange();
        }
    }
    isDateRangeType(type) {
        return type === DateCloudFilterType.RANGE;
    }
    resetDateRange() {
        return {
            startDate: null,
            endDate: null
        };
    }
    getNext7DaysDateRange() {
        return {
            startDate: moment().startOf('day').toISOString(true),
            endDate: moment().add(7, 'days').endOf('day').toISOString(true)
        };
    }
    getTomorrowDateRange() {
        return {
            startDate: moment().endOf('day').toISOString(true),
            endDate: moment().add(1, 'days').endOf('day').toISOString(true)
        };
    }
    getCurrentYearDateRange() {
        return {
            startDate: moment().startOf('year').toISOString(true),
            endDate: moment().endOf('year').toISOString(true)
        };
    }
    getTodayDateRange() {
        return {
            startDate: moment().startOf('day').toISOString(true),
            endDate: moment().endOf('day').toISOString(true)
        };
    }
    getCurrentWeekRange() {
        return {
            startDate: moment().startOf('week').toISOString(true),
            endDate: moment().endOf('week').toISOString(true)
        };
    }
    getCurrentMonthDateRange() {
        return {
            startDate: moment().startOf('month').toISOString(true),
            endDate: moment().endOf('month').toISOString(true)
        };
    }
    getQuarterDateRange() {
        return {
            startDate: moment().startOf('quarter').toISOString(true),
            endDate: moment().endOf('quarter').toISOString(true)
        };
    }
}
DateRangeFilterService.ɵfac = function DateRangeFilterService_Factory(t) { return new (t || DateRangeFilterService)(); };
DateRangeFilterService.ɵprov = i0.ɵɵdefineInjectable({ factory: function DateRangeFilterService_Factory() { return new DateRangeFilterService(); }, token: DateRangeFilterService, providedIn: "root" });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DateRangeFilterService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return []; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,