/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, EventEmitter, Input, Output } from '@angular/core';
import { FormDefinitionSelectorCloudService } from '../services/form-definition-selector-cloud.service';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../services/form-definition-selector-cloud.service';
import * as ɵngcc2 from '@angular/material/form-field';
import * as ɵngcc3 from '@angular/material/select';
import * as ɵngcc4 from '@angular/material/core';
import * as ɵngcc5 from '@angular/common';
import * as ɵngcc6 from '@ngx-translate/core';

function FormDefinitionSelectorCloudComponent_mat_option_8_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-option", 2);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const form_r1 = ctx.$implicit;
    ɵngcc0.ɵɵproperty("value", form_r1.id);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(form_r1.name);
} }
export class FormDefinitionSelectorCloudComponent {
    constructor(formDefinitionCloudService) {
        this.formDefinitionCloudService = formDefinitionCloudService;
        this.appName = '';
        this.selectForm = new EventEmitter();
    }
    ngOnInit() {
        this.forms$ = this.formDefinitionCloudService.getStandAloneTaskForms(this.appName);
    }
    onSelect(event) {
        this.selectForm.emit(event.value);
    }
}
FormDefinitionSelectorCloudComponent.ɵfac = function FormDefinitionSelectorCloudComponent_Factory(t) { return new (t || FormDefinitionSelectorCloudComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FormDefinitionSelectorCloudService)); };
FormDefinitionSelectorCloudComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: FormDefinitionSelectorCloudComponent, selectors: [["adf-cloud-form-definition-selector"]], inputs: { appName: "appName" }, outputs: { selectForm: "selectForm" }, decls: 10, vars: 10, consts: [[1, "adf-form-definition-selector"], [1, "adf-form-selector-dropdown", 3, "selectionChange"], [3, "value"], [3, "value", 4, "ngFor", "ngForOf"]], template: function FormDefinitionSelectorCloudComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "mat-form-field", 0);
        ɵngcc0.ɵɵelementStart(1, "mat-label");
        ɵngcc0.ɵɵtext(2);
        ɵngcc0.ɵɵpipe(3, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(4, "mat-select", 1);
        ɵngcc0.ɵɵlistener("selectionChange", function FormDefinitionSelectorCloudComponent_Template_mat_select_selectionChange_4_listener($event) { return ctx.onSelect($event); });
        ɵngcc0.ɵɵelementStart(5, "mat-option", 2);
        ɵngcc0.ɵɵtext(6);
        ɵngcc0.ɵɵpipe(7, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(8, FormDefinitionSelectorCloudComponent_mat_option_8_Template, 2, 2, "mat-option", 3);
        ɵngcc0.ɵɵpipe(9, "async");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(3, 4, "ADF_CLOUD_TASK_LIST.START_TASK.FORM.LABEL.FORM"));
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("value", "");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(7, 6, "ADF_CLOUD_TASK_LIST.START_TASK.FORM.LABEL.NONE"));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngForOf", ɵngcc0.ɵɵpipeBind1(9, 8, ctx.forms$));
    } }, directives: [ɵngcc2.MatFormField, ɵngcc2.MatLabel, ɵngcc3.MatSelect, ɵngcc4.MatOption, ɵngcc5.NgForOf], pipes: [ɵngcc6.TranslatePipe, ɵngcc5.AsyncPipe], styles: [".adf-form-definition-selector[_ngcontent-%COMP%]{width:100%}"] });
FormDefinitionSelectorCloudComponent.ctorParameters = () => [
    { type: FormDefinitionSelectorCloudService }
];
FormDefinitionSelectorCloudComponent.propDecorators = {
    appName: [{ type: Input }],
    selectForm: [{ type: Output }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FormDefinitionSelectorCloudComponent, [{
        type: Component,
        args: [{
                selector: 'adf-cloud-form-definition-selector',
                template: "<mat-form-field class=\"adf-form-definition-selector\">\n    <mat-label>{{'ADF_CLOUD_TASK_LIST.START_TASK.FORM.LABEL.FORM'|translate}}</mat-label>\n    <mat-select class=\"adf-form-selector-dropdown\" (selectionChange)=\"onSelect($event)\">\n        <mat-option [value]=\"''\">{{'ADF_CLOUD_TASK_LIST.START_TASK.FORM.LABEL.NONE'|translate}}</mat-option>\n        <mat-option *ngFor=\"let form of forms$ | async\" [value]=\"form.id\">{{ form.name }}</mat-option>\n    </mat-select>\n</mat-form-field>\n",
                styles: [".adf-form-definition-selector{width:100%}"]
            }]
    }], function () { return [{ type: ɵngcc1.FormDefinitionSelectorCloudService }]; }, { appName: [{
            type: Input
        }], selectForm: [{
            type: Output
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybS1kZWZpbml0aW9uLXNlbGVjdG9yLWNsb3VkLmNvbXBvbmVudC5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vaG9tZS90cmF2aXMvYnVpbGQvQWxmcmVzY28vYWxmcmVzY28tbmcyLWNvbXBvbmVudHMvbGliL3Byb2Nlc3Mtc2VydmljZXMtY2xvdWQvc3JjL2xpYi9mb3JtL2NvbXBvbmVudHMvZm9ybS1kZWZpbml0aW9uLXNlbGVjdG9yLWNsb3VkLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBRUgsT0FBTyxFQUFFLFNBQVMsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFVLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUvRSxPQUFPLEVBQUUsa0NBQWtDLEVBQUUsTUFBTSxvREFBb0QsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQVV4RyxNQUFNLE9BQU8sb0NBQW9DO0FBQUcsSUFZaEQsWUFBb0IsMEJBQThEO0FBQ3RGLFFBRHdCLCtCQUEwQixHQUExQiwwQkFBMEIsQ0FBb0M7QUFBQyxRQVJuRixZQUFPLEdBQVcsRUFBRSxDQUFDO0FBQ3pCLFFBR0ksZUFBVSxHQUF5QixJQUFJLFlBQVksRUFBVSxDQUFDO0FBQ2xFLElBSUksQ0FBQztBQUNMLElBQ0ksUUFBUTtBQUFLLFFBQ1QsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsMEJBQTBCLENBQUMsc0JBQXNCLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQzNGLElBQUksQ0FBQztBQUNMLElBQ0ksUUFBUSxDQUFDLEtBQXNCO0FBQ25DLFFBQVEsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQzFDLElBQUksQ0FBQztBQUNMO2dFQTVCQyxTQUFTLFNBQUMsa0JBQ1AsUUFBUSxFQUFFLG9DQUFvQyxrQkFDOUM7NmJBQThEO3lCQUVqRTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzhPQUVHO0FBQUM7QUFBOEQsWUFWMUQsa0NBQWtDO0FBQUc7QUFBRztBQUNqRCxzQkFZSyxLQUFLO0FBQ1IseUJBR0csTUFBTTtBQUNWOzs7Ozs7Ozs7Ozs7b0JBQUU7QUFBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IENvbXBvbmVudCwgRXZlbnRFbWl0dGVyLCBJbnB1dCwgT25Jbml0LCBPdXRwdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IEZvcm1EZWZpbml0aW9uU2VsZWN0b3JDbG91ZFNlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlcy9mb3JtLWRlZmluaXRpb24tc2VsZWN0b3ItY2xvdWQuc2VydmljZSc7XG5pbXBvcnQgeyBNYXRTZWxlY3RDaGFuZ2UgfSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbC9zZWxlY3QnO1xuaW1wb3J0IHsgRm9ybVJlcHJlc2VudGF0aW9uIH0gZnJvbSAnLi4vLi4vc2VydmljZXMvZm9ybS1maWVsZHMuaW50ZXJmYWNlcyc7XG5cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAnYWRmLWNsb3VkLWZvcm0tZGVmaW5pdGlvbi1zZWxlY3RvcicsXG4gICAgdGVtcGxhdGVVcmw6ICcuL2Zvcm0tZGVmaW5pdGlvbi1zZWxlY3Rvci1jbG91ZC5jb21wb25lbnQuaHRtbCcsXG4gICAgc3R5bGVVcmxzOiBbJy4vZm9ybS1kZWZpbml0aW9uLXNlbGVjdG9yLWNsb3VkLmNvbXBvbmVudC5zY3NzJ11cbn0pXG5cbmV4cG9ydCBjbGFzcyBGb3JtRGVmaW5pdGlvblNlbGVjdG9yQ2xvdWRDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuXG4gICAgLyoqIE5hbWUgb2YgdGhlIGFwcGxpY2F0aW9uLiBJZiBzcGVjaWZpZWQsIHRoaXMgc2hvd3MgdGhlIHVzZXJzIHdobyBoYXZlIGFjY2VzcyB0byB0aGUgYXBwLiAqL1xuICAgIEBJbnB1dCgpXG4gICAgYXBwTmFtZTogc3RyaW5nID0gJyc7XG5cbiAgICAvKiogRW1pdHRlZCB3aGVuIGEgZm9ybSBpcyBzZWxlY3RlZC4gKi9cbiAgICBAT3V0cHV0KClcbiAgICBzZWxlY3RGb3JtOiBFdmVudEVtaXR0ZXI8c3RyaW5nPiA9IG5ldyBFdmVudEVtaXR0ZXI8c3RyaW5nPigpO1xuXG4gICAgZm9ybXMkOiBPYnNlcnZhYmxlPEZvcm1SZXByZXNlbnRhdGlvbltdPjtcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgZm9ybURlZmluaXRpb25DbG91ZFNlcnZpY2U6IEZvcm1EZWZpbml0aW9uU2VsZWN0b3JDbG91ZFNlcnZpY2UpIHtcbiAgICB9XG5cbiAgICBuZ09uSW5pdCgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5mb3JtcyQgPSB0aGlzLmZvcm1EZWZpbml0aW9uQ2xvdWRTZXJ2aWNlLmdldFN0YW5kQWxvbmVUYXNrRm9ybXModGhpcy5hcHBOYW1lKTtcbiAgICB9XG5cbiAgICBvblNlbGVjdChldmVudDogTWF0U2VsZWN0Q2hhbmdlKSB7XG4gICAgICAgIHRoaXMuc2VsZWN0Rm9ybS5lbWl0KGV2ZW50LnZhbHVlKTtcbiAgICB9XG5cbn1cbiJdfQ==