/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, EventEmitter, Input, Output, HostListener } from '@angular/core';
import { of, forkJoin, Subject } from 'rxjs';
import { switchMap, takeUntil, map } from 'rxjs/operators';
import { FormBaseComponent, FormOutcomeEvent, FormOutcomeModel, WidgetVisibilityService, FormService, FORM_FIELD_VALIDATORS, FormModel, UploadWidgetContentLinkModel } from '@alfresco/adf-core';
import { FormCloudService } from '../services/form-cloud.service';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../services/form-cloud.service';
import * as ɵngcc2 from '@alfresco/adf-core';
import * as ɵngcc3 from '@angular/common';
import * as ɵngcc4 from '@angular/material/card';
import * as ɵngcc5 from '@angular/material/button';
import * as ɵngcc6 from '@angular/material/icon';
import * as ɵngcc7 from '@angular/material/tooltip';
import * as ɵngcc8 from '@ngx-translate/core';

function FormCloudComponent_div_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div");
    ɵngcc0.ɵɵprojection(1);
    ɵngcc0.ɵɵelementEnd();
} }
function FormCloudComponent_div_1_mat_card_header_2_div_3_i_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "i", 11);
    ɵngcc0.ɵɵtext(1, "check_circle");
    ɵngcc0.ɵɵelementEnd();
} }
function FormCloudComponent_div_1_mat_card_header_2_div_3_ng_template_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "i", 12);
    ɵngcc0.ɵɵtext(1, "error");
    ɵngcc0.ɵɵelementEnd();
} }
function FormCloudComponent_div_1_mat_card_header_2_div_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 8);
    ɵngcc0.ɵɵtemplate(1, FormCloudComponent_div_1_mat_card_header_2_div_3_i_1_Template, 2, 0, "i", 9);
    ɵngcc0.ɵɵtemplate(2, FormCloudComponent_div_1_mat_card_header_2_div_3_ng_template_2_Template, 2, 0, "ng-template", null, 10, ɵngcc0.ɵɵtemplateRefExtractor);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const _r8 = ɵngcc0.ɵɵreference(3);
    const ctx_r4 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r4.form.isValid)("ngIfElse", _r8);
} }
function FormCloudComponent_div_1_mat_card_header_2_div_4_Template(rf, ctx) { if (rf & 1) {
    const _r11 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 13);
    ɵngcc0.ɵɵelementStart(1, "button", 14);
    ɵngcc0.ɵɵlistener("click", function FormCloudComponent_div_1_mat_card_header_2_div_4_Template_button_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r11); const ctx_r10 = ɵngcc0.ɵɵnextContext(3); return ctx_r10.onRefreshClicked(); });
    ɵngcc0.ɵɵelementStart(2, "mat-icon");
    ɵngcc0.ɵɵtext(3, "refresh");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} }
function FormCloudComponent_div_1_mat_card_header_2_span_5_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 1, "FORM.FORM_RENDERER.NAMELESS_TASK"), " ");
} }
function FormCloudComponent_div_1_mat_card_header_2_span_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 15);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵtemplate(2, FormCloudComponent_div_1_mat_card_header_2_span_5_ng_container_2_Template, 3, 3, "ng-container", 0);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r6 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵproperty("matTooltip", ctx_r6.form.taskName);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r6.form.taskName, " ");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r6.form.taskName);
} }
function FormCloudComponent_div_1_mat_card_header_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-card-header");
    ɵngcc0.ɵɵelementStart(1, "mat-card-title");
    ɵngcc0.ɵɵelementStart(2, "h4");
    ɵngcc0.ɵɵtemplate(3, FormCloudComponent_div_1_mat_card_header_2_div_3_Template, 4, 2, "div", 5);
    ɵngcc0.ɵɵtemplate(4, FormCloudComponent_div_1_mat_card_header_2_div_4_Template, 4, 0, "div", 6);
    ɵngcc0.ɵɵtemplate(5, FormCloudComponent_div_1_mat_card_header_2_span_5_Template, 3, 3, "span", 7);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r2.showValidationIcon);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r2.showRefreshButton);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r2.isTitleEnabled());
} }
function FormCloudComponent_div_1_mat_card_actions_5_ng_container_2_button_1_Template(rf, ctx) { if (rf & 1) {
    const _r18 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 19);
    ɵngcc0.ɵɵlistener("click", function FormCloudComponent_div_1_mat_card_actions_5_ng_container_2_button_1_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r18); const outcome_r14 = ɵngcc0.ɵɵnextContext().$implicit; const ctx_r16 = ɵngcc0.ɵɵnextContext(3); return ctx_r16.onOutcomeClicked(outcome_r14); });
    ɵngcc0.ɵɵpipe(1, "formatSpace");
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "uppercase");
    ɵngcc0.ɵɵpipe(4, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const outcome_r14 = ɵngcc0.ɵɵnextContext().$implicit;
    const ctx_r15 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵclassProp("adf-form-hide-button", !ctx_r15.isOutcomeButtonVisible(outcome_r14, ctx_r15.form.readOnly));
    ɵngcc0.ɵɵproperty("id", ɵngcc0.ɵɵpipeBind1(1, 6, "adf-form-" + outcome_r14.name))("color", ctx_r15.getColorForOutcome(outcome_r14.name))("disabled", !ctx_r15.isOutcomeButtonEnabled(outcome_r14));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(3, 8, ɵngcc0.ɵɵpipeBind1(4, 10, outcome_r14.name)), " ");
} }
function FormCloudComponent_div_1_mat_card_actions_5_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, FormCloudComponent_div_1_mat_card_actions_5_ng_container_2_button_1_Template, 5, 12, "button", 18);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const outcome_r14 = ctx.$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", outcome_r14.isVisible);
} }
function FormCloudComponent_div_1_mat_card_actions_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-card-actions", 16);
    ɵngcc0.ɵɵprojection(1, 1);
    ɵngcc0.ɵɵtemplate(2, FormCloudComponent_div_1_mat_card_actions_5_ng_container_2_Template, 2, 1, "ng-container", 17);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r3.form.outcomes);
} }
function FormCloudComponent_div_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 2);
    ɵngcc0.ɵɵelementStart(1, "mat-card");
    ɵngcc0.ɵɵtemplate(2, FormCloudComponent_div_1_mat_card_header_2_Template, 6, 3, "mat-card-header", 0);
    ɵngcc0.ɵɵelementStart(3, "mat-card-content");
    ɵngcc0.ɵɵelement(4, "adf-form-renderer", 3);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(5, FormCloudComponent_div_1_mat_card_actions_5_Template, 3, 1, "mat-card-actions", 4);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r1.showTitle || ctx_r1.showRefreshButton || ctx_r1.showValidationIcon);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("formDefinition", ctx_r1.form);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r1.form.hasOutcomes());
} }
const _c0 = [[["", "empty-form", ""]], [["adf-cloud-form-custom-outcomes"]]];
const _c1 = ["[empty-form]", "adf-cloud-form-custom-outcomes"];
export class FormCloudComponent extends FormBaseComponent {
    constructor(formCloudService, formService, visibilityService) {
        super();
        this.formCloudService = formCloudService;
        this.formService = formService;
        this.visibilityService = visibilityService;
        this.appName = '';
        this.fieldValidators = [...FORM_FIELD_VALIDATORS];
        this.formSaved = new EventEmitter();
        this.formCompleted = new EventEmitter();
        this.formLoaded = new EventEmitter();
        this.formDataRefreshed = new EventEmitter();
        this.formContentClicked = new EventEmitter();
        this.subscriptions = [];
        this.onDestroy$ = new Subject();
        this.formService.formContentClicked
            .pipe(takeUntil(this.onDestroy$))
            .subscribe((content) => {
            if (content instanceof UploadWidgetContentLinkModel) {
                this.form.setNodeIdValueForViewersLinkedToUploadWidget(content);
                this.onFormDataRefreshed(this.form);
            }
            else {
                this.formContentClicked.emit(content);
            }
        });
        this.formService.updateFormValuesRequested
            .pipe(takeUntil(this.onDestroy$))
            .subscribe((valuesToSetIfNotPresent) => {
            this.form.addValuesNotPresent(valuesToSetIfNotPresent);
            this.onFormDataRefreshed(this.form);
        });
    }
    onKeyDown(event) {
        event.cancelBubble = true;
    }
    ngOnChanges(changes) {
        const appName = changes['appName'];
        if (appName && appName.currentValue) {
            if (this.taskId) {
                this.getFormByTaskId(appName.currentValue, this.taskId, this.appVersion);
            }
            else if (this.formId) {
                this.getFormById(appName.currentValue, this.formId, this.appVersion);
            }
            return;
        }
        const formId = changes['formId'];
        if (formId && formId.currentValue && this.appName) {
            this.getFormById(this.appName, formId.currentValue, this.appVersion);
            return;
        }
        const taskId = changes['taskId'];
        if (taskId && taskId.currentValue && this.appName) {
            this.getFormByTaskId(this.appName, taskId.currentValue, this.appVersion);
            return;
        }
        const data = changes['data'];
        if (data && data.currentValue) {
            this.refreshFormData();
            return;
        }
    }
    onRefreshClicked() {
        this.loadForm();
    }
    loadForm() {
        if (this.appName && this.taskId) {
            this.getFormByTaskId(this.appName, this.taskId, this.appVersion);
        }
        else if (this.appName && this.formId) {
            this.getFormById(this.appName, this.formId, this.appVersion);
        }
    }
    findProcessVariablesByTaskId(appName, taskId) {
        return this.formCloudService.getTask(appName, taskId).pipe(switchMap(task => {
            if (this.isAProcessTask(task)) {
                return this.formCloudService.getTaskVariables(appName, taskId);
            }
            else {
                return of([]);
            }
        }));
    }
    isAProcessTask(taskRepresentation) {
        return taskRepresentation.processDefinitionId && taskRepresentation.processDefinitionDeploymentId !== 'null';
    }
    getFormByTaskId(appName, taskId, version) {
        return new Promise(resolve => {
            forkJoin(this.formCloudService.getTaskForm(appName, taskId, version), this.formCloudService.getTaskVariables(appName, taskId))
                .pipe(takeUntil(this.onDestroy$))
                .subscribe((data) => {
                this.formCloudRepresentationJSON = data[0];
                this.formCloudRepresentationJSON.processVariables = data[1];
                this.data = data[1];
                const parsedForm = this.parseForm(this.formCloudRepresentationJSON);
                this.visibilityService.refreshVisibility(parsedForm, this.data);
                parsedForm.validateForm();
                this.form = parsedForm;
                this.form.nodeId = '-my-';
                this.onFormLoaded(this.form);
                resolve(this.form);
            }, (error) => {
                this.handleError(error);
                resolve(null);
            });
        });
    }
    getFormById(appName, formId, appVersion) {
        this.formCloudService
            .getForm(appName, formId, appVersion)
            .pipe(map((form) => {
            const flattenForm = Object.assign(Object.assign({}, form.formRepresentation), form.formRepresentation.formDefinition);
            delete flattenForm.formDefinition;
            return flattenForm;
        }), takeUntil(this.onDestroy$))
            .subscribe((form) => {
            this.formCloudRepresentationJSON = form;
            const parsedForm = this.parseForm(form);
            this.visibilityService.refreshVisibility(parsedForm);
            parsedForm.validateForm();
            this.form = parsedForm;
            this.form.nodeId = '-my-';
            this.onFormLoaded(this.form);
        }, (error) => {
            this.handleError(error);
        });
    }
    saveTaskForm() {
        if (this.form && this.appName && this.taskId) {
            this.formCloudService
                .saveTaskForm(this.appName, this.taskId, this.processInstanceId, `${this.form.id}`, this.form.values)
                .pipe(takeUntil(this.onDestroy$))
                .subscribe(() => {
                this.onTaskSaved(this.form);
            }, (error) => this.onTaskSavedError(error));
        }
    }
    completeTaskForm(outcome) {
        if (this.form && this.appName && this.taskId) {
            this.formCloudService
                .completeTaskForm(this.appName, this.taskId, this.processInstanceId, `${this.form.id}`, this.form.values, outcome, this.appVersion)
                .pipe(takeUntil(this.onDestroy$))
                .subscribe(() => {
                this.onTaskCompleted(this.form);
            }, (error) => this.onTaskCompletedError(error));
        }
    }
    parseForm(formCloudRepresentationJSON) {
        if (formCloudRepresentationJSON) {
            const formValues = {};
            (this.data || []).forEach(variable => {
                formValues[variable.name] = variable.value;
            });
            const form = new FormModel(formCloudRepresentationJSON, formValues, this.readOnly);
            if (!form) {
                form.outcomes = this.getFormDefinitionOutcomes(form);
            }
            if (this.fieldValidators && this.fieldValidators.length > 0) {
                form.fieldValidators = this.fieldValidators;
            }
            return form;
        }
        return null;
    }
    getFormDefinitionOutcomes(form) {
        return [
            new FormOutcomeModel(form, { id: '$save', name: FormOutcomeModel.SAVE_ACTION, isSystem: true })
        ];
    }
    checkVisibility(field) {
        if (field && field.form) {
            this.visibilityService.refreshVisibility(field.form);
        }
    }
    refreshFormData() {
        this.form = this.parseForm(this.formCloudRepresentationJSON);
        this.onFormLoaded(this.form);
        this.onFormDataRefreshed(this.form);
    }
    onFormLoaded(form) {
        this.formLoaded.emit(form);
    }
    onFormDataRefreshed(form) {
        this.formDataRefreshed.emit(form);
    }
    onTaskSaved(form) {
        this.formSaved.emit(form);
    }
    onTaskSavedError(error) {
        this.handleError(error);
    }
    onTaskCompleted(form) {
        this.formCompleted.emit(form);
    }
    onTaskCompletedError(error) {
        this.handleError(error);
    }
    onExecuteOutcome(outcome) {
        const args = new FormOutcomeEvent(outcome);
        if (args.defaultPrevented) {
            return false;
        }
        this.executeOutcome.emit(args);
        return !args.defaultPrevented;
    }
    storeFormAsMetadata() {
    }
    ngOnDestroy() {
        this.onDestroy$.next(true);
        this.onDestroy$.complete();
    }
}
FormCloudComponent.ɵfac = function FormCloudComponent_Factory(t) { return new (t || FormCloudComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FormCloudService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.FormService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.WidgetVisibilityService)); };
FormCloudComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: FormCloudComponent, selectors: [["adf-cloud-form"]], hostBindings: function FormCloudComponent_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("keydown", function FormCloudComponent_keydown_HostBindingHandler($event) { return ctx.onKeyDown($event); });
    } }, inputs: { appName: "appName", fieldValidators: "fieldValidators", data: "data", form: "form", appVersion: "appVersion", formId: "formId", processInstanceId: "processInstanceId", taskId: "taskId" }, outputs: { formSaved: "formSaved", formCompleted: "formCompleted", formLoaded: "formLoaded", formDataRefreshed: "formDataRefreshed", formContentClicked: "formContentClicked" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature], ngContentSelectors: _c1, decls: 2, vars: 2, consts: [[4, "ngIf"], ["class", "adf-form-container", 4, "ngIf"], [1, "adf-form-container"], [3, "formDefinition"], ["class", "adf-form-mat-card-actions", 4, "ngIf"], ["class", "adf-form-validation-button", 4, "ngIf"], ["class", "adf-form-reload-button", 4, "ngIf"], ["class", "adf-form-title", 3, "matTooltip", 4, "ngIf"], [1, "adf-form-validation-button"], ["id", "adf-valid-form-icon", "class", "material-icons", 4, "ngIf", "ngIfElse"], ["no_valid_form", ""], ["id", "adf-valid-form-icon", 1, "material-icons"], ["id", "adf-invalid-form-icon", 1, "material-icons", "adf-invalid-color"], [1, "adf-form-reload-button"], ["mat-icon-button", "", 3, "click"], [1, "adf-form-title", 3, "matTooltip"], [1, "adf-form-mat-card-actions"], [4, "ngFor", "ngForOf"], ["mat-button", "", 3, "id", "color", "disabled", "adf-form-hide-button", "click", 4, "ngIf"], ["mat-button", "", 3, "id", "color", "disabled", "click"]], template: function FormCloudComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef(_c0);
        ɵngcc0.ɵɵtemplate(0, FormCloudComponent_div_0_Template, 2, 0, "div", 0);
        ɵngcc0.ɵɵtemplate(1, FormCloudComponent_div_1_Template, 6, 3, "div", 1);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngIf", !ctx.hasForm());
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.hasForm());
    } }, directives: [ɵngcc3.NgIf, ɵngcc4.MatCard, ɵngcc4.MatCardContent, ɵngcc2.FormRendererComponent, ɵngcc4.MatCardHeader, ɵngcc4.MatCardTitle, ɵngcc5.MatButton, ɵngcc6.MatIcon, ɵngcc7.MatTooltip, ɵngcc4.MatCardActions, ɵngcc3.NgForOf], pipes: [ɵngcc8.TranslatePipe, ɵngcc2.FormatSpacePipe, ɵngcc3.UpperCasePipe], encapsulation: 2 });
FormCloudComponent.ctorParameters = () => [
    { type: FormCloudService },
    { type: FormService },
    { type: WidgetVisibilityService }
];
FormCloudComponent.propDecorators = {
    appName: [{ type: Input }],
    appVersion: [{ type: Input }],
    formId: [{ type: Input }],
    processInstanceId: [{ type: Input }],
    form: [{ type: Input }],
    taskId: [{ type: Input }],
    data: [{ type: Input }],
    fieldValidators: [{ type: Input }],
    formSaved: [{ type: Output }],
    formCompleted: [{ type: Output }],
    formLoaded: [{ type: Output }],
    formDataRefreshed: [{ type: Output }],
    formContentClicked: [{ type: Output }],
    onKeyDown: [{ type: HostListener, args: ['keydown', ['$event'],] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FormCloudComponent, [{
        type: Component,
        args: [{
                selector: 'adf-cloud-form',
                template: "<div *ngIf=\"!hasForm()\">\n    <ng-content select=\"[empty-form]\">\n    </ng-content>\n</div>\n\n<div *ngIf=\"hasForm()\" class=\"adf-form-container\">\n    <mat-card>\n        <mat-card-header *ngIf=\"showTitle || showRefreshButton || showValidationIcon\">\n            <mat-card-title>\n                <h4>\n                    <div *ngIf=\"showValidationIcon\" class=\"adf-form-validation-button\">\n                        <i id=\"adf-valid-form-icon\" class=\"material-icons\"\n                            *ngIf=\"form.isValid; else no_valid_form\">check_circle</i>\n                        <ng-template #no_valid_form>\n                            <i id=\"adf-invalid-form-icon\" class=\"material-icons adf-invalid-color\">error</i>\n                        </ng-template>\n                    </div>\n                    <div *ngIf=\"showRefreshButton\" class=\"adf-form-reload-button\">\n                        <button mat-icon-button (click)=\"onRefreshClicked()\">\n                            <mat-icon>refresh</mat-icon>\n                        </button>\n                    </div>\n                    <span *ngIf=\"isTitleEnabled()\" class=\"adf-form-title\" [matTooltip]=\"form.taskName\">\n                        {{form.taskName}}\n                        <ng-container *ngIf=\"!form.taskName\">\n                            {{'FORM.FORM_RENDERER.NAMELESS_TASK' | translate}}\n                        </ng-container>\n                    </span>\n\n                </h4>\n            </mat-card-title>\n        </mat-card-header>\n        <mat-card-content>\n            <adf-form-renderer [formDefinition]=\"form\">\n            </adf-form-renderer>\n        </mat-card-content>\n        <mat-card-actions *ngIf=\"form.hasOutcomes()\" class=\"adf-form-mat-card-actions\">\n            <ng-content select=\"adf-cloud-form-custom-outcomes\"></ng-content>\n            <ng-container *ngFor=\"let outcome of form.outcomes\">\n                <button *ngIf=\"outcome.isVisible\" [id]=\"'adf-form-'+ outcome.name  | formatSpace\" [color]=\"getColorForOutcome(outcome.name)\"\n                    mat-button [disabled]=\"!isOutcomeButtonEnabled(outcome)\"\n                    [class.adf-form-hide-button]=\"!isOutcomeButtonVisible(outcome, form.readOnly)\"\n                    (click)=\"onOutcomeClicked(outcome)\">\n                    {{outcome.name | translate | uppercase }}\n                </button>\n            </ng-container>\n        </mat-card-actions>\n    </mat-card>\n</div>\n"
            }]
    }], function () { return [{ type: ɵngcc1.FormCloudService }, { type: ɵngcc2.FormService }, { type: ɵngcc2.WidgetVisibilityService }]; }, { appName: [{
            type: Input
        }], fieldValidators: [{
            type: Input
        }], formSaved: [{
            type: Output
        }], formCompleted: [{
            type: Output
        }], formLoaded: [{
            type: Output
        }], formDataRefreshed: [{
            type: Output
        }], formContentClicked: [{
            type: Output
        }], onKeyDown: [{
            type: HostListener,
            args: ['keydown', ['$event']]
        }], data: [{
            type: Input
        }], form: [{
            type: Input
        }], appVersion: [{
            type: Input
        }], formId: [{
            type: Input
        }], processInstanceId: [{
            type: Input
        }], taskId: [{
            type: Input
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,