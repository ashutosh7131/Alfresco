/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, ElementRef, ViewChild, ViewEncapsulation } from '@angular/core';
import { from } from 'rxjs';
import { mergeMap } from 'rxjs/operators';
import { WidgetComponent, LogService, FormService, ThumbnailService, NotificationService } from '@alfresco/adf-core';
import { ProcessCloudContentService } from '../../../services/process-cloud-content.service';
import { FileSourceTypes, DestinationFolderPathType } from '../../../models/form-cloud-representation.model';
export class UploadCloudWidgetComponent extends WidgetComponent {
    constructor(formService, thumbnailService, processCloudContentService, notificationService, logService) {
        super(formService);
        this.thumbnailService = thumbnailService;
        this.processCloudContentService = processCloudContentService;
        this.notificationService = notificationService;
        this.logService = logService;
        this.multipleOption = '';
    }
    ngOnInit() {
        if (this.field &&
            this.field.value &&
            this.field.value.length > 0) {
            this.hasFile = true;
            this.fixIncompatibilityFromPreviousAndNewForm([]);
        }
        this.getMultipleFileParam();
        this.setDestinationFolderPathFromMappedVariable();
    }
    removeFile(file) {
        if (this.field) {
            this.removeElementFromList(file);
        }
    }
    onFileChanged(event) {
        const files = [];
        const filesSaved = [];
        for (const file of Array.from(event.target.files)) {
            if (!this.isUploaded(file)) {
                files.push(file);
            }
            else {
                this.notificationService.showWarning('FORM.FIELD.FILE_ALREADY_UPLOADED');
            }
        }
        if (files && files.length > 0) {
            from(files)
                .pipe(mergeMap((file) => this.uploadRawContent(file)))
                .subscribe((res) => {
                filesSaved.push(res);
            }, (error) => this.logService.error(`Error uploading file. See console output for more details. ${error}`), () => {
                this.fixIncompatibilityFromPreviousAndNewForm(filesSaved);
                this.hasFile = true;
            });
        }
    }
    isUploaded(file) {
        const current = this.field.value || [];
        return current.some(entry => entry.name === file.name);
    }
    fixIncompatibilityFromPreviousAndNewForm(filesSaved) {
        const value = [...this.field.value || []];
        value.push(...filesSaved || []);
        this.field.value = value;
        this.field.form.values[this.field.id] = value;
        this.hasFile = value.length > 0;
    }
    getIcon(mimeType) {
        return this.thumbnailService.getMimeTypeIcon(mimeType);
    }
    uploadRawContent(file) {
        return this.processCloudContentService.createTemporaryRawRelatedContent(file, this.field.form.nodeId);
    }
    getMultipleFileParam() {
        if (this.field &&
            this.field.params &&
            this.field.params.multiple) {
            this.multipleOption = this.field.params.multiple ? 'multiple' : '';
        }
    }
    get uploadedFiles() {
        const result = this.field.value || this.field.form.values[this.field.id];
        return result || [];
    }
    removeElementFromList(file) {
        const filteredValues = this.uploadedFiles.filter(value => value.id !== file.id);
        this.resetFormValues(filteredValues);
    }
    resetFormValues(values) {
        if (values && values.length > 0) {
            this.field.value = values;
            this.field.form.values[this.field.id] = values;
            this.hasFile = true;
        }
        else {
            this.field.value = [];
            this.field.form.values[this.field.id] = [];
            this.hasFile = false;
        }
    }
    fileClicked(file) {
        this.formService.formContentClicked.next(file);
    }
    isAlfrescoAndLocal() {
        var _a, _b, _c;
        return ((_c = (_b = (_a = this.field) === null || _a === void 0 ? void 0 : _a.params) === null || _b === void 0 ? void 0 : _b.fileSource) === null || _c === void 0 ? void 0 : _c.serviceId) === FileSourceTypes.ALL_FILE_SOURCES_SERVICE_ID;
    }
    isPathVariableType(type) {
        var _a, _b, _c, _d;
        return ((_d = (_c = (_b = (_a = this.field) === null || _a === void 0 ? void 0 : _a.params) === null || _b === void 0 ? void 0 : _b.fileSource) === null || _c === void 0 ? void 0 : _c.destinationFolderPath) === null || _d === void 0 ? void 0 : _d.type) === type;
    }
    setDestinationFolderPathFromMappedVariable() {
        if (this.isAlfrescoAndLocal()) {
            this.prepareUploadWidgetDestinationFolderPathFromStringVariable();
            this.prepareUploadWidgetDestinationFolderPathFromFolderVariable();
        }
    }
    prepareUploadWidgetDestinationFolderPathFromStringVariable() {
        if (this.isPathVariableType(DestinationFolderPathType.STRING_TYPE)) {
            this.setUploadWidgetDestinationFolderPath(this.getDestinationFolderPathValue());
        }
    }
    prepareUploadWidgetDestinationFolderPathFromFolderVariable() {
        if (this.isPathVariableType(DestinationFolderPathType.FOLDER_TYPE)) {
            const folder = this.getDestinationFolderPathValue();
            this.setUploadWidgetDestinationFolderPath((folder === null || folder === void 0 ? void 0 : folder.length) ? folder[0].id : undefined);
        }
    }
    setUploadWidgetDestinationFolderPath(path) {
        this.field.params.fileSource.destinationFolderPath['value'] = path ? path : undefined;
    }
    getDestinationFolderPathValue() {
        var _a, _b;
        return this.field.form.getProcessVariableValue((_b = (_a = this.field.params.fileSource) === null || _a === void 0 ? void 0 : _a.destinationFolderPath) === null || _b === void 0 ? void 0 : _b.name);
    }
}
UploadCloudWidgetComponent.decorators = [
    { type: Component, args: [{
                selector: 'upload-cloud-widget',
                template: "<div class=\"adf-upload-widget {{field.className}}\" [class.adf-invalid]=\"!field.isValid\"\n    [class.adf-readonly]=\"field.readOnly\">\n    <label class=\"adf-label\" [attr.for]=\"field.id\">{{ field.name | translate }}<span\n            *ngIf=\"isRequired()\">*</span></label>\n    <div class=\"adf-cloud-upload-widget-container\">\n        <div>\n            <mat-list *ngIf=\"hasFile\">\n                <mat-list-item class=\"adf-upload-files-row\" *ngFor=\"let file of uploadedFiles\">\n                    <img mat-list-icon class=\"adf-upload-widget__icon\" [id]=\"'file-'+file.id+'-icon'\"\n                        [src]=\"getIcon(file.content.mimeType)\" [alt]=\"mimeTypeIcon\" (click)=\"fileClicked(file)\"\n                        (keyup.enter)=\"fileClicked(file)\" role=\"button\" tabindex=\"0\" />\n                    <span matLine id=\"{{'file-'+file.id}}\" (click)=\"fileClicked(file)\" (keyup.enter)=\"fileClicked(file)\"\n                        role=\"button\" tabindex=\"0\" class=\"adf-file\">{{file.name}}</span>\n                    <button *ngIf=\"!field.readOnly\" mat-icon-button [id]=\"'file-'+file.id+'-remove'\"\n                        (click)=\"removeFile(file);\" (keyup.enter)=\"removeFile(file);\">\n                        <mat-icon class=\"mat-24\">highlight_off</mat-icon>\n                    </button>\n                </mat-list-item>\n            </mat-list>\n        </div>\n\n        <div *ngIf=\"(!hasFile || multipleOption) && !field.readOnly\">\n            <button mat-raised-button color=\"primary\" (click)=\"uploadFiles.click()\" [matTooltip]=\"field.tooltip\"\n                matTooltipPosition=\"above\" matTooltipShowDelay=\"1000\">\n                {{ 'FORM.FIELD.UPLOAD' | translate }}<mat-icon>file_upload</mat-icon>\n                <input #uploadFiles [multiple]=\"multipleOption\" type=\"file\" [id]=\"field.form.nodeId\"\n                    (change)=\"onFileChanged($event)\" />\n            </button>\n        </div>\n\n        <div *ngIf=\"!hasFile && field.readOnly\">\n            {{ 'FORM.FIELD.NO_FILE_ATTACHED' | translate }}\n        </div>\n\n    </div>\n    <error-widget [error]=\"field.validationSummary\"></error-widget>\n    <error-widget *ngIf=\"isInvalidFieldRequired()\" required=\"{{ 'FORM.FIELD.REQUIRED' | translate }}\"></error-widget>\n</div>\n",
                host: {
                    '(click)': 'event($event)',
                    '(blur)': 'event($event)',
                    '(change)': 'event($event)',
                    '(focus)': 'event($event)',
                    '(focusin)': 'event($event)',
                    '(focusout)': 'event($event)',
                    '(input)': 'event($event)',
                    '(invalid)': 'event($event)',
                    '(select)': 'event($event)'
                },
                encapsulation: ViewEncapsulation.None,
                styles: [".adf-cloud-upload-widget-container{margin-bottom:15px}.adf-cloud-upload-widget-container input{display:none}.adf-cloud-upload-widget{border-top:.84375em solid transparent;padding:.4375em 0;width:100%;word-break:break-all}.adf-cloud-upload-widget__icon{cursor:pointer;float:left;padding:6px}.adf-cloud-upload-widget__reset{margin-top:-2px}.adf-cloud-upload-files-row .mat-line{margin-bottom:0}"]
            },] }
];
UploadCloudWidgetComponent.ctorParameters = () => [
    { type: FormService },
    { type: ThumbnailService },
    { type: ProcessCloudContentService },
    { type: NotificationService },
    { type: LogService }
];
UploadCloudWidgetComponent.propDecorators = {
    fileInput: [{ type: ViewChild, args: ['uploadFiles',] }]
};
//# sourceMappingURL=data:application/json;base64,