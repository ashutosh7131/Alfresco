import { Injectable } from '@angular/core';
import { AlfrescoApiService, AppConfigService, FormOutcomeModel, FormModel } from '@alfresco/adf-core';
import { from } from 'rxjs';
import { map, switchMap } from 'rxjs/operators';
import { UploadApi } from '@alfresco/js-api';
import { TaskVariableCloud } from '../models/task-variable-cloud.model';
import { BaseCloudService } from '../../services/base-cloud.service';
import * as i0 from "@angular/core";
import * as i1 from "@alfresco/adf-core";
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@alfresco/adf-core';
export class FormCloudService extends BaseCloudService {
    constructor(apiService, appConfigService) {
        super(apiService, appConfigService);
    }
    get uploadApi() {
        var _a;
        this._uploadApi = (_a = this._uploadApi) !== null && _a !== void 0 ? _a : new UploadApi(this.apiService.getInstance());
        return this._uploadApi;
    }
    getTaskForm(appName, taskId, version) {
        return this.getTask(appName, taskId).pipe(switchMap(task => {
            return this.getForm(appName, task.formKey, version).pipe(map((form) => {
                const flattenForm = Object.assign(Object.assign(Object.assign({}, form.formRepresentation), form.formRepresentation.formDefinition), { taskId: task.id, taskName: task.name, processDefinitionId: task.processDefinitionId, processInstanceId: task.processInstanceId });
                delete flattenForm.formDefinition;
                return flattenForm;
            }));
        }));
    }
    saveTaskForm(appName, taskId, processInstanceId, formId, values) {
        const apiUrl = `${this.getBasePath(appName)}/form/v1/forms/${formId}/save`;
        const saveFormRepresentation = {
            values,
            taskId,
            processInstanceId
        };
        return this.post(apiUrl, saveFormRepresentation).pipe(map((res) => res.entry));
    }
    createTemporaryRawRelatedContent(file, nodeId, contentHost) {
        const changedConfig = this.apiService.lastConfig;
        changedConfig.provider = 'ALL';
        changedConfig.hostEcm = contentHost.replace('/alfresco', '');
        this.apiService.getInstance().setConfig(changedConfig);
        return from(this.uploadApi.uploadFile(file, '', nodeId, '', { overwrite: true })).pipe(map((res) => res.entry));
    }
    completeTaskForm(appName, taskId, processInstanceId, formId, formValues, outcome, version) {
        const apiUrl = `${this.getBasePath(appName)}/form/v1/forms/${formId}/submit/versions/${version}`;
        const completeFormRepresentation = {
            values: formValues,
            taskId: taskId,
            processInstanceId: processInstanceId
        };
        if (outcome) {
            completeFormRepresentation.outcome = outcome;
        }
        return this.post(apiUrl, completeFormRepresentation).pipe(map((res) => res.entry));
    }
    getTask(appName, taskId) {
        const apiUrl = `${this.getBasePath(appName)}/query/v1/tasks/${taskId}`;
        return this.get(apiUrl).pipe(map((res) => res.entry));
    }
    getTaskVariables(appName, taskId) {
        const apiUrl = `${this.getBasePath(appName)}/query/v1/tasks/${taskId}/variables`;
        return this.get(apiUrl).pipe(map((res) => {
            return res.list.entries.map((variable) => new TaskVariableCloud(variable.entry));
        }));
    }
    getForm(appName, formKey, version) {
        let url = `${this.getBasePath(appName)}/form/v1/forms/${formKey}`;
        if (version) {
            url += `/versions/${version}`;
        }
        return this.get(url);
    }
    getRestWidgetData(formName, widgetId, body = {}) {
        var _a;
        const appName = (_a = this.appConfigService.get('alfresco-deployed-apps')[0]) === null || _a === void 0 ? void 0 : _a.name;
        const apiUrl = `${this.getBasePath(appName)}/form/v1/forms/${formName}/values/${widgetId}`;
        return this.post(apiUrl, body);
    }
    parseForm(json, data, readOnly = false) {
        if (json) {
            const flattenForm = Object.assign(Object.assign({}, json.formRepresentation), json.formRepresentation.formDefinition);
            delete flattenForm.formDefinition;
            const formValues = {};
            (data || []).forEach(variable => {
                formValues[variable.name] = variable.value;
            });
            const form = new FormModel(flattenForm, formValues, readOnly);
            if (!json.fields) {
                form.outcomes = [
                    new FormOutcomeModel(form, {
                        id: '$save',
                        name: FormOutcomeModel.SAVE_ACTION,
                        isSystem: true
                    })
                ];
            }
            return form;
        }
        return null;
    }
}
FormCloudService.ɵfac = function FormCloudService_Factory(t) { return new (t || FormCloudService)(ɵngcc0.ɵɵinject(ɵngcc1.AlfrescoApiService), ɵngcc0.ɵɵinject(ɵngcc1.AppConfigService)); };
FormCloudService.ɵprov = i0.ɵɵdefineInjectable({ factory: function FormCloudService_Factory() { return new FormCloudService(i0.ɵɵinject(i1.AlfrescoApiService), i0.ɵɵinject(i1.AppConfigService)); }, token: FormCloudService, providedIn: "root" });
FormCloudService.ctorParameters = () => [
    { type: AlfrescoApiService },
    { type: AppConfigService }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FormCloudService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc1.AlfrescoApiService }, { type: ɵngcc1.AppConfigService }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,