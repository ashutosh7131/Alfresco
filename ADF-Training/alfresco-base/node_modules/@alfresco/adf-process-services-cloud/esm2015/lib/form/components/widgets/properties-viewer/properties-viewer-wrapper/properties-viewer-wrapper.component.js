/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, EventEmitter, Input, Output, ViewEncapsulation } from '@angular/core';
import { NodesApiService } from '@alfresco/adf-core';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@alfresco/adf-core';
import * as ɵngcc2 from '@angular/common';
import * as ɵngcc3 from '@alfresco/adf-content-services';
import * as ɵngcc4 from '@angular/material/progress-spinner';

function PropertiesViewerWrapperComponent_adf_content_metadata_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "adf-content-metadata", 2);
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("displayDefaultProperties", ctx_r0.displayDefaultProperties)("expanded", ctx_r0.expanded)("node", ctx_r0.node)("preset", ctx_r0.preset)("displayEmpty", ctx_r0.displayEmpty)("editable", ctx_r0.editable)("multi", ctx_r0.multi)("displayAspect", ctx_r0.displayAspect)("copyToClipboardAction", ctx_r0.copyToClipboardAction)("useChipsForMultiValueProperty", ctx_r0.useChipsForMultiValueProperty);
} }
function PropertiesViewerWrapperComponent_ng_template_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 3);
    ɵngcc0.ɵɵelement(1, "mat-progress-spinner");
    ɵngcc0.ɵɵelementEnd();
} }
export class PropertiesViewerWrapperComponent {
    constructor(nodesApiService) {
        this.nodesApiService = nodesApiService;
        this.loading = true;
        this.displayAspect = null;
        this.nodeContentLoaded = new EventEmitter();
    }
    ngOnChanges(changes) {
        if (changes && changes['nodeId'] && changes['nodeId'].currentValue && !changes['nodeId'].isFirstChange()) {
            this.getNode(changes['nodeId'].currentValue);
        }
    }
    ngOnInit() {
        if (this.nodeId) {
            this.getNode(this.nodeId);
        }
    }
    getNode(nodeId) {
        this.loading = true;
        this.nodesApiService.getNode(nodeId).subscribe(retrievedNode => {
            this.node = retrievedNode;
            this.loading = false;
            this.nodeContentLoaded.emit(retrievedNode);
        });
    }
}
PropertiesViewerWrapperComponent.ɵfac = function PropertiesViewerWrapperComponent_Factory(t) { return new (t || PropertiesViewerWrapperComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NodesApiService)); };
PropertiesViewerWrapperComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: PropertiesViewerWrapperComponent, selectors: [["adf-properties-viewer-wrapper"]], inputs: { displayAspect: "displayAspect", nodeId: "nodeId", editable: "editable", displayEmpty: "displayEmpty", expanded: "expanded", multi: "multi", preset: "preset", displayDefaultProperties: "displayDefaultProperties", copyToClipboardAction: "copyToClipboardAction", useChipsForMultiValueProperty: "useChipsForMultiValueProperty" }, outputs: { nodeContentLoaded: "nodeContentLoaded" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 3, vars: 2, consts: [[3, "displayDefaultProperties", "expanded", "node", "preset", "displayEmpty", "editable", "multi", "displayAspect", "copyToClipboardAction", "useChipsForMultiValueProperty", 4, "ngIf", "ngIfElse"], ["loadingTemplate", ""], [3, "displayDefaultProperties", "expanded", "node", "preset", "displayEmpty", "editable", "multi", "displayAspect", "copyToClipboardAction", "useChipsForMultiValueProperty"], [1, "adf-properties-viewer-wrapper-loading"]], template: function PropertiesViewerWrapperComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, PropertiesViewerWrapperComponent_adf_content_metadata_0_Template, 1, 10, "adf-content-metadata", 0);
        ɵngcc0.ɵɵtemplate(1, PropertiesViewerWrapperComponent_ng_template_1_Template, 2, 0, "ng-template", null, 1, ɵngcc0.ɵɵtemplateRefExtractor);
    } if (rf & 2) {
        const _r1 = ɵngcc0.ɵɵreference(2);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.loading)("ngIfElse", _r1);
    } }, directives: [ɵngcc2.NgIf, ɵngcc3.ContentMetadataComponent, ɵngcc4.MatProgressSpinner], encapsulation: 2 });
PropertiesViewerWrapperComponent.ctorParameters = () => [
    { type: NodesApiService }
];
PropertiesViewerWrapperComponent.propDecorators = {
    nodeId: [{ type: Input }],
    editable: [{ type: Input }],
    displayEmpty: [{ type: Input }],
    expanded: [{ type: Input }],
    multi: [{ type: Input }],
    preset: [{ type: Input }],
    displayDefaultProperties: [{ type: Input }],
    displayAspect: [{ type: Input }],
    copyToClipboardAction: [{ type: Input }],
    useChipsForMultiValueProperty: [{ type: Input }],
    nodeContentLoaded: [{ type: Output }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(PropertiesViewerWrapperComponent, [{
        type: Component,
        args: [{
                selector: 'adf-properties-viewer-wrapper',
                template: "<adf-content-metadata [displayDefaultProperties]=\"displayDefaultProperties\" [expanded]=\"expanded\" [node]=\"node\"\n    [preset]=\"preset\" [displayEmpty]=\"displayEmpty\" [editable]=\"editable\" [multi]=\"multi\"\n    [displayAspect]=\"displayAspect\" [copyToClipboardAction]=\"copyToClipboardAction\"\n    [useChipsForMultiValueProperty]=\"useChipsForMultiValueProperty\" *ngIf=\"!loading; else loadingTemplate\">\n</adf-content-metadata>\n<ng-template #loadingTemplate>\n    <div class=\"adf-properties-viewer-wrapper-loading\">\n        <mat-progress-spinner></mat-progress-spinner>\n    </div>\n</ng-template>\n",
                encapsulation: ViewEncapsulation.None
            }]
    }], function () { return [{ type: ɵngcc1.NodesApiService }]; }, { displayAspect: [{
            type: Input
        }], nodeContentLoaded: [{
            type: Output
        }], nodeId: [{
            type: Input
        }], editable: [{
            type: Input
        }], displayEmpty: [{
            type: Input
        }], expanded: [{
            type: Input
        }], multi: [{
            type: Input
        }], preset: [{
            type: Input
        }], displayDefaultProperties: [{
            type: Input
        }], copyToClipboardAction: [{
            type: Input
        }], useChipsForMultiValueProperty: [{
            type: Input
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvcGVydGllcy12aWV3ZXItd3JhcHBlci5jb21wb25lbnQuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL2hvbWUvdHJhdmlzL2J1aWxkL0FsZnJlc2NvL2FsZnJlc2NvLW5nMi1jb21wb25lbnRzL2xpYi9wcm9jZXNzLXNlcnZpY2VzLWNsb3VkL3NyYy9saWIvZm9ybS9jb21wb25lbnRzL3dpZGdldHMvcHJvcGVydGllcy12aWV3ZXIvcHJvcGVydGllcy12aWV3ZXItd3JhcHBlci9wcm9wZXJ0aWVzLXZpZXdlci13cmFwcGVyLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBRUgsT0FBTyxFQUFFLFNBQVMsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFxQixNQUFNLEVBQWlCLGlCQUFpQixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzVILE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBV3JELE1BQU0sT0FBTyxnQ0FBZ0M7QUFBRyxJQWlENUMsWUFBb0IsZUFBZ0M7QUFBSSxRQUFwQyxvQkFBZSxHQUFmLGVBQWUsQ0FBaUI7QUFBQyxRQTlDckQsWUFBTyxHQUFHLElBQUksQ0FBQztBQUNuQixRQWdDSSxrQkFBYSxHQUFXLElBQUksQ0FBQztBQUNqQyxRQVVJLHNCQUFpQixHQUF1QixJQUFJLFlBQVksRUFBRSxDQUFDO0FBQy9ELElBQzRELENBQUM7QUFDN0QsSUFDSSxXQUFXLENBQUMsT0FBc0I7QUFBSSxRQUNsQyxJQUFJLE9BQU8sSUFBSSxPQUFPLENBQUMsUUFBUSxDQUFDLElBQUksT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDLFlBQVksSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQyxhQUFhLEVBQUUsRUFBRTtBQUNsSCxZQUFZLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDO0FBQ3pELFNBQVM7QUFDVCxJQUFJLENBQUM7QUFDTCxJQUNJLFFBQVE7QUFBSyxRQUNULElBQUksSUFBSSxDQUFDLE1BQU0sRUFBRTtBQUN6QixZQUFZLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQ3RDLFNBQVM7QUFDVCxJQUFJLENBQUM7QUFDTCxJQUNZLE9BQU8sQ0FBQyxNQUFjO0FBQ2xDLFFBQVEsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUM7QUFDNUIsUUFBUSxJQUFJLENBQUMsZUFBZSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxTQUFTLENBQUMsYUFBYSxDQUFDLEVBQUU7QUFDdkUsWUFBWSxJQUFJLENBQUMsSUFBSSxHQUFHLGFBQWEsQ0FBQztBQUN0QyxZQUFZLElBQUksQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDO0FBQ2pDLFlBQVksSUFBSSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztBQUN2RCxRQUFRLENBQUMsQ0FBQyxDQUFDO0FBQ1gsSUFBSSxDQUFDO0FBQ0w7NERBNUVDLFNBQVMsU0FBQyxrQkFDUCxRQUFRLEVBQUUsK0JBQStCLGtCQUN6Qzswa0JBQXlELGtCQUN6RCxhQUFhLEVBQUUsaUJBQWlCLENBQUMsSUFBSSxjQUN4Qzs7Ozs7O29IQUNJO0FBQUM7QUFBMEQsWUFYdkQsZUFBZTtBQUFHO0FBQUc7QUFDRixxQkFldkIsS0FBSztBQUNSLHVCQUdHLEtBQUs7QUFDUiwyQkFHRyxLQUFLO0FBQ1IsdUJBS0csS0FBSztBQUNSLG9CQUdHLEtBQUs7QUFDUixxQkFHRyxLQUFLO0FBQ1IsdUNBR0csS0FBSztBQUNSLDRCQUdHLEtBQUs7QUFDUixvQ0FHRyxLQUFLO0FBQ1IsNENBR0csS0FBSztBQUNSLGdDQUVHLE1BQU07QUFDVjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O29CQUFFO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBDb21wb25lbnQsIEV2ZW50RW1pdHRlciwgSW5wdXQsIE9uQ2hhbmdlcywgT25Jbml0LCBPdXRwdXQsIFNpbXBsZUNoYW5nZXMsIFZpZXdFbmNhcHN1bGF0aW9uIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBOb2Rlc0FwaVNlcnZpY2UgfSBmcm9tICdAYWxmcmVzY28vYWRmLWNvcmUnO1xuaW1wb3J0IHsgTm9kZSB9IGZyb20gJ0BhbGZyZXNjby9qcy1hcGknO1xuaW1wb3J0IHsgUHJlc2V0Q29uZmlnIH0gZnJvbSAnQGFsZnJlc2NvL2FkZi1jb250ZW50LXNlcnZpY2VzJztcblxuLyogdHNsaW50OmRpc2FibGU6Y29tcG9uZW50LXNlbGVjdG9yICAqL1xuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ2FkZi1wcm9wZXJ0aWVzLXZpZXdlci13cmFwcGVyJyxcbiAgICB0ZW1wbGF0ZVVybDogJy4vcHJvcGVydGllcy12aWV3ZXItd3JhcHBlci5jb21wb25lbnQuaHRtbCcsXG4gICAgZW5jYXBzdWxhdGlvbjogVmlld0VuY2Fwc3VsYXRpb24uTm9uZVxufSlcbmV4cG9ydCBjbGFzcyBQcm9wZXJ0aWVzVmlld2VyV3JhcHBlckNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgT25DaGFuZ2VzIHtcblxuICAgIG5vZGU6IE5vZGU7XG4gICAgbG9hZGluZyA9IHRydWU7XG5cbiAgICBASW5wdXQoKVxuICAgIG5vZGVJZDogc3RyaW5nO1xuXG4gICAgLyoqIFRvZ2dsZXMgd2hldGhlciB0aGUgZWRpdCBidXR0b24gc2hvdWxkIGJlIHNob3duICovXG4gICAgQElucHV0KClcbiAgICBlZGl0YWJsZTtcblxuICAgIC8qKiBUb2dnbGVzIHdoZXRoZXIgdG8gZGlzcGxheSBlbXB0eSB2YWx1ZXMgaW4gdGhlIGNhcmQgdmlldyAqL1xuICAgIEBJbnB1dCgpXG4gICAgZGlzcGxheUVtcHR5O1xuXG4gICAgLyoqIFRvZ2dsZXMgYmV0d2VlbiBleHBhbmRlZCAoaWUsIGZ1bGwgaW5mb3JtYXRpb24pIGFuZCBjb2xsYXBzZWRcbiAgICAgKiAoaWUsIHJlZHVjZWQgaW5mb3JtYXRpb24pIGluIHRoZSBkaXNwbGF5XG4gICAgICovXG4gICAgQElucHV0KClcbiAgICBleHBhbmRlZDtcblxuICAgIC8qKiBUaGUgbXVsdGkgcGFyYW1ldGVyIG9mIHRoZSB1bmRlcmx5aW5nIG1hdGVyaWFsIGV4cGFuc2lvbiBwYW5lbCwgc2V0IHRvIHRydWUgdG8gYWxsb3cgbXVsdGkgYWNjb3JkaW9uIHRvIGJlIGV4cGFuZGVkIGF0IHRoZSBzYW1lIHRpbWUgKi9cbiAgICBASW5wdXQoKVxuICAgIG11bHRpO1xuXG4gICAgLyoqIE5hbWUgb3IgY29uZmlndXJhdGlvbiBvZiB0aGUgbWV0YWRhdGEgcHJlc2V0LCB3aGljaCBkZWZpbmVzIGFzcGVjdHMgYW5kIHRoZWlyIHByb3BlcnRpZXMgKi9cbiAgICBASW5wdXQoKVxuICAgIHByZXNldDogc3RyaW5nIHwgUHJlc2V0Q29uZmlnO1xuXG4gICAgLyoqIFRvZ2dsZXMgd2hldGhlciB0aGUgbWV0YWRhdGEgcHJvcGVydGllcyBzaG91bGQgYmUgc2hvd24gKi9cbiAgICBASW5wdXQoKVxuICAgIGRpc3BsYXlEZWZhdWx0UHJvcGVydGllcztcblxuICAgIC8qKiAob3B0aW9uYWwpIHNob3dzIHRoZSBnaXZlbiBhc3BlY3QgaW4gdGhlIGV4cGFuZGVkICBjYXJkICovXG4gICAgQElucHV0KClcbiAgICBkaXNwbGF5QXNwZWN0OiBzdHJpbmcgPSBudWxsO1xuXG4gICAgLyoqIFRvZ2dsZXMgd2hldGhlciBvciBub3QgdG8gZW5hYmxlIGNvcHkgdG8gY2xpcGJvYXJkIGFjdGlvbi4gKi9cbiAgICBASW5wdXQoKVxuICAgIGNvcHlUb0NsaXBib2FyZEFjdGlvbjtcblxuICAgIC8qKiBUb2dnbGVzIHdoZXRoZXIgb3Igbm90IHRvIGVuYWJsZSBjaGlwcyBmb3IgbXVsdGl2YWx1ZWQgcHJvcGVydGllcy4gKi9cbiAgICBASW5wdXQoKVxuICAgIHVzZUNoaXBzRm9yTXVsdGlWYWx1ZVByb3BlcnR5O1xuXG4gICAgQE91dHB1dCgpXG4gICAgbm9kZUNvbnRlbnRMb2FkZWQ6IEV2ZW50RW1pdHRlcjxOb2RlPiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgbm9kZXNBcGlTZXJ2aWNlOiBOb2Rlc0FwaVNlcnZpY2UpIHsgfVxuXG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQge1xuICAgICAgICBpZiAoY2hhbmdlcyAmJiBjaGFuZ2VzWydub2RlSWQnXSAmJiBjaGFuZ2VzWydub2RlSWQnXS5jdXJyZW50VmFsdWUgJiYgIWNoYW5nZXNbJ25vZGVJZCddLmlzRmlyc3RDaGFuZ2UoKSkge1xuICAgICAgICAgICAgdGhpcy5nZXROb2RlKGNoYW5nZXNbJ25vZGVJZCddLmN1cnJlbnRWYWx1ZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBuZ09uSW5pdCgpOiB2b2lkIHtcbiAgICAgICAgaWYgKHRoaXMubm9kZUlkKSB7XG4gICAgICAgICAgICB0aGlzLmdldE5vZGUodGhpcy5ub2RlSWQpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBnZXROb2RlKG5vZGVJZDogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMubG9hZGluZyA9IHRydWU7XG4gICAgICAgIHRoaXMubm9kZXNBcGlTZXJ2aWNlLmdldE5vZGUobm9kZUlkKS5zdWJzY3JpYmUocmV0cmlldmVkTm9kZSA9PiB7XG4gICAgICAgICAgICB0aGlzLm5vZGUgPSByZXRyaWV2ZWROb2RlO1xuICAgICAgICAgICAgdGhpcy5sb2FkaW5nID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzLm5vZGVDb250ZW50TG9hZGVkLmVtaXQocmV0cmlldmVkTm9kZSk7XG4gICAgICAgIH0pO1xuICAgIH1cbn1cbiJdfQ==