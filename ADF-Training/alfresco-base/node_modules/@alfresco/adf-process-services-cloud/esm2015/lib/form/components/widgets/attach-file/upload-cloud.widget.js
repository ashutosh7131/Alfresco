/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, ElementRef, ViewChild, ViewEncapsulation } from '@angular/core';
import { from } from 'rxjs';
import { mergeMap } from 'rxjs/operators';
import { WidgetComponent, LogService, FormService, ThumbnailService, NotificationService } from '@alfresco/adf-core';
import { ProcessCloudContentService } from '../../../services/process-cloud-content.service';
import { FileSourceTypes, DestinationFolderPathType } from '../../../models/form-cloud-representation.model';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@alfresco/adf-core';
import * as ɵngcc2 from '../../../services/process-cloud-content.service';
import * as ɵngcc3 from '@angular/common';
import * as ɵngcc4 from '@angular/material/list';
import * as ɵngcc5 from '@angular/material/core';
import * as ɵngcc6 from '@angular/material/button';
import * as ɵngcc7 from '@angular/material/icon';
import * as ɵngcc8 from '@angular/material/tooltip';
import * as ɵngcc9 from '@ngx-translate/core';

const _c0 = ["uploadFiles"];
function UploadCloudWidgetComponent_span_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span");
    ɵngcc0.ɵɵtext(1, "*");
    ɵngcc0.ɵɵelementEnd();
} }
function UploadCloudWidgetComponent_mat_list_7_mat_list_item_1_button_4_Template(rf, ctx) { if (rf & 1) {
    const _r10 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 10);
    ɵngcc0.ɵɵlistener("click", function UploadCloudWidgetComponent_mat_list_7_mat_list_item_1_button_4_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r10); const file_r6 = ɵngcc0.ɵɵnextContext().$implicit; const ctx_r8 = ɵngcc0.ɵɵnextContext(2); return ctx_r8.removeFile(file_r6); })("keyup.enter", function UploadCloudWidgetComponent_mat_list_7_mat_list_item_1_button_4_Template_button_keyup_enter_0_listener() { ɵngcc0.ɵɵrestoreView(_r10); const file_r6 = ɵngcc0.ɵɵnextContext().$implicit; const ctx_r11 = ɵngcc0.ɵɵnextContext(2); return ctx_r11.removeFile(file_r6); });
    ɵngcc0.ɵɵelementStart(1, "mat-icon", 11);
    ɵngcc0.ɵɵtext(2, "highlight_off");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const file_r6 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵproperty("id", "file-" + file_r6.id + "-remove");
} }
function UploadCloudWidgetComponent_mat_list_7_mat_list_item_1_Template(rf, ctx) { if (rf & 1) {
    const _r15 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "mat-list-item", 6);
    ɵngcc0.ɵɵelementStart(1, "img", 7);
    ɵngcc0.ɵɵlistener("click", function UploadCloudWidgetComponent_mat_list_7_mat_list_item_1_Template_img_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r15); const file_r6 = ctx.$implicit; const ctx_r14 = ɵngcc0.ɵɵnextContext(2); return ctx_r14.fileClicked(file_r6); })("keyup.enter", function UploadCloudWidgetComponent_mat_list_7_mat_list_item_1_Template_img_keyup_enter_1_listener() { ɵngcc0.ɵɵrestoreView(_r15); const file_r6 = ctx.$implicit; const ctx_r16 = ɵngcc0.ɵɵnextContext(2); return ctx_r16.fileClicked(file_r6); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(2, "span", 8);
    ɵngcc0.ɵɵlistener("click", function UploadCloudWidgetComponent_mat_list_7_mat_list_item_1_Template_span_click_2_listener() { ɵngcc0.ɵɵrestoreView(_r15); const file_r6 = ctx.$implicit; const ctx_r17 = ɵngcc0.ɵɵnextContext(2); return ctx_r17.fileClicked(file_r6); })("keyup.enter", function UploadCloudWidgetComponent_mat_list_7_mat_list_item_1_Template_span_keyup_enter_2_listener() { ɵngcc0.ɵɵrestoreView(_r15); const file_r6 = ctx.$implicit; const ctx_r18 = ɵngcc0.ɵɵnextContext(2); return ctx_r18.fileClicked(file_r6); });
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(4, UploadCloudWidgetComponent_mat_list_7_mat_list_item_1_button_4_Template, 3, 1, "button", 9);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const file_r6 = ctx.$implicit;
    const ctx_r5 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("id", "file-" + file_r6.id + "-icon")("src", ctx_r5.getIcon(file_r6.content.mimeType), ɵngcc0.ɵɵsanitizeUrl)("alt", ctx_r5.mimeTypeIcon);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate("id", "file-" + file_r6.id);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(file_r6.name);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r5.field.readOnly);
} }
function UploadCloudWidgetComponent_mat_list_7_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-list");
    ɵngcc0.ɵɵtemplate(1, UploadCloudWidgetComponent_mat_list_7_mat_list_item_1_Template, 5, 6, "mat-list-item", 5);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r1.uploadedFiles);
} }
function UploadCloudWidgetComponent_div_8_Template(rf, ctx) { if (rf & 1) {
    const _r21 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div");
    ɵngcc0.ɵɵelementStart(1, "button", 12);
    ɵngcc0.ɵɵlistener("click", function UploadCloudWidgetComponent_div_8_Template_button_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r21); const _r19 = ɵngcc0.ɵɵreference(7); return _r19.click(); });
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementStart(4, "mat-icon");
    ɵngcc0.ɵɵtext(5, "file_upload");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(6, "input", 13, 14);
    ɵngcc0.ɵɵlistener("change", function UploadCloudWidgetComponent_div_8_Template_input_change_6_listener($event) { ɵngcc0.ɵɵrestoreView(_r21); const ctx_r22 = ɵngcc0.ɵɵnextContext(); return ctx_r22.onFileChanged($event); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("matTooltip", ctx_r2.field.tooltip);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(3, 4, "FORM.FIELD.UPLOAD"), "");
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵproperty("multiple", ctx_r2.multipleOption)("id", ctx_r2.field.form.nodeId);
} }
function UploadCloudWidgetComponent_div_9_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 1, "FORM.FIELD.NO_FILE_ATTACHED"), " ");
} }
function UploadCloudWidgetComponent_error_widget_11_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "error-widget", 15);
    ɵngcc0.ɵɵpipe(1, "translate");
} if (rf & 2) {
    ɵngcc0.ɵɵpropertyInterpolate("required", ɵngcc0.ɵɵpipeBind1(1, 1, "FORM.FIELD.REQUIRED"));
} }
export class UploadCloudWidgetComponent extends WidgetComponent {
    constructor(formService, thumbnailService, processCloudContentService, notificationService, logService) {
        super(formService);
        this.thumbnailService = thumbnailService;
        this.processCloudContentService = processCloudContentService;
        this.notificationService = notificationService;
        this.logService = logService;
        this.multipleOption = '';
    }
    ngOnInit() {
        if (this.field &&
            this.field.value &&
            this.field.value.length > 0) {
            this.hasFile = true;
            this.fixIncompatibilityFromPreviousAndNewForm([]);
        }
        this.getMultipleFileParam();
        this.setDestinationFolderPathFromMappedVariable();
    }
    removeFile(file) {
        if (this.field) {
            this.removeElementFromList(file);
        }
    }
    onFileChanged(event) {
        const files = [];
        const filesSaved = [];
        for (const file of Array.from(event.target.files)) {
            if (!this.isUploaded(file)) {
                files.push(file);
            }
            else {
                this.notificationService.showWarning('FORM.FIELD.FILE_ALREADY_UPLOADED');
            }
        }
        if (files && files.length > 0) {
            from(files)
                .pipe(mergeMap((file) => this.uploadRawContent(file)))
                .subscribe((res) => {
                filesSaved.push(res);
            }, (error) => this.logService.error(`Error uploading file. See console output for more details. ${error}`), () => {
                this.fixIncompatibilityFromPreviousAndNewForm(filesSaved);
                this.hasFile = true;
            });
        }
    }
    isUploaded(file) {
        const current = this.field.value || [];
        return current.some(entry => entry.name === file.name);
    }
    fixIncompatibilityFromPreviousAndNewForm(filesSaved) {
        const value = [...this.field.value || []];
        value.push(...filesSaved || []);
        this.field.value = value;
        this.field.form.values[this.field.id] = value;
        this.hasFile = value.length > 0;
    }
    getIcon(mimeType) {
        return this.thumbnailService.getMimeTypeIcon(mimeType);
    }
    uploadRawContent(file) {
        return this.processCloudContentService.createTemporaryRawRelatedContent(file, this.field.form.nodeId);
    }
    getMultipleFileParam() {
        if (this.field &&
            this.field.params &&
            this.field.params.multiple) {
            this.multipleOption = this.field.params.multiple ? 'multiple' : '';
        }
    }
    get uploadedFiles() {
        const result = this.field.value || this.field.form.values[this.field.id];
        return result || [];
    }
    removeElementFromList(file) {
        const filteredValues = this.uploadedFiles.filter(value => value.id !== file.id);
        this.resetFormValues(filteredValues);
    }
    resetFormValues(values) {
        if (values && values.length > 0) {
            this.field.value = values;
            this.field.form.values[this.field.id] = values;
            this.hasFile = true;
        }
        else {
            this.field.value = [];
            this.field.form.values[this.field.id] = [];
            this.hasFile = false;
        }
    }
    fileClicked(file) {
        this.formService.formContentClicked.next(file);
    }
    isAlfrescoAndLocal() {
        var _a, _b, _c;
        return ((_c = (_b = (_a = this.field) === null || _a === void 0 ? void 0 : _a.params) === null || _b === void 0 ? void 0 : _b.fileSource) === null || _c === void 0 ? void 0 : _c.serviceId) === FileSourceTypes.ALL_FILE_SOURCES_SERVICE_ID;
    }
    isPathVariableType(type) {
        var _a, _b, _c, _d;
        return ((_d = (_c = (_b = (_a = this.field) === null || _a === void 0 ? void 0 : _a.params) === null || _b === void 0 ? void 0 : _b.fileSource) === null || _c === void 0 ? void 0 : _c.destinationFolderPath) === null || _d === void 0 ? void 0 : _d.type) === type;
    }
    setDestinationFolderPathFromMappedVariable() {
        if (this.isAlfrescoAndLocal()) {
            this.prepareUploadWidgetDestinationFolderPathFromStringVariable();
            this.prepareUploadWidgetDestinationFolderPathFromFolderVariable();
        }
    }
    prepareUploadWidgetDestinationFolderPathFromStringVariable() {
        if (this.isPathVariableType(DestinationFolderPathType.STRING_TYPE)) {
            this.setUploadWidgetDestinationFolderPath(this.getDestinationFolderPathValue());
        }
    }
    prepareUploadWidgetDestinationFolderPathFromFolderVariable() {
        if (this.isPathVariableType(DestinationFolderPathType.FOLDER_TYPE)) {
            const folder = this.getDestinationFolderPathValue();
            this.setUploadWidgetDestinationFolderPath((folder === null || folder === void 0 ? void 0 : folder.length) ? folder[0].id : undefined);
        }
    }
    setUploadWidgetDestinationFolderPath(path) {
        this.field.params.fileSource.destinationFolderPath['value'] = path ? path : undefined;
    }
    getDestinationFolderPathValue() {
        var _a, _b;
        return this.field.form.getProcessVariableValue((_b = (_a = this.field.params.fileSource) === null || _a === void 0 ? void 0 : _a.destinationFolderPath) === null || _b === void 0 ? void 0 : _b.name);
    }
}
UploadCloudWidgetComponent.ɵfac = function UploadCloudWidgetComponent_Factory(t) { return new (t || UploadCloudWidgetComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FormService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ThumbnailService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.ProcessCloudContentService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NotificationService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.LogService)); };
UploadCloudWidgetComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: UploadCloudWidgetComponent, selectors: [["upload-cloud-widget"]], viewQuery: function UploadCloudWidgetComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c0, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.fileInput = _t.first);
    } }, hostBindings: function UploadCloudWidgetComponent_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function UploadCloudWidgetComponent_click_HostBindingHandler($event) { return ctx.event($event); })("blur", function UploadCloudWidgetComponent_blur_HostBindingHandler($event) { return ctx.event($event); })("change", function UploadCloudWidgetComponent_change_HostBindingHandler($event) { return ctx.event($event); })("focus", function UploadCloudWidgetComponent_focus_HostBindingHandler($event) { return ctx.event($event); })("focusin", function UploadCloudWidgetComponent_focusin_HostBindingHandler($event) { return ctx.event($event); })("focusout", function UploadCloudWidgetComponent_focusout_HostBindingHandler($event) { return ctx.event($event); })("input", function UploadCloudWidgetComponent_input_HostBindingHandler($event) { return ctx.event($event); })("invalid", function UploadCloudWidgetComponent_invalid_HostBindingHandler($event) { return ctx.event($event); })("select", function UploadCloudWidgetComponent_select_HostBindingHandler($event) { return ctx.event($event); });
    } }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 12, vars: 17, consts: [[1, "adf-label"], [4, "ngIf"], [1, "adf-cloud-upload-widget-container"], [3, "error"], [3, "required", 4, "ngIf"], ["class", "adf-upload-files-row", 4, "ngFor", "ngForOf"], [1, "adf-upload-files-row"], ["mat-list-icon", "", "role", "button", "tabindex", "0", 1, "adf-upload-widget__icon", 3, "id", "src", "alt", "click", "keyup.enter"], ["matLine", "", "role", "button", "tabindex", "0", 1, "adf-file", 3, "id", "click", "keyup.enter"], ["mat-icon-button", "", 3, "id", "click", "keyup.enter", 4, "ngIf"], ["mat-icon-button", "", 3, "id", "click", "keyup.enter"], [1, "mat-24"], ["mat-raised-button", "", "color", "primary", "matTooltipPosition", "above", "matTooltipShowDelay", "1000", 3, "matTooltip", "click"], ["type", "file", 3, "multiple", "id", "change"], ["uploadFiles", ""], [3, "required"]], template: function UploadCloudWidgetComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div");
        ɵngcc0.ɵɵelementStart(1, "label", 0);
        ɵngcc0.ɵɵtext(2);
        ɵngcc0.ɵɵpipe(3, "translate");
        ɵngcc0.ɵɵtemplate(4, UploadCloudWidgetComponent_span_4_Template, 2, 0, "span", 1);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(5, "div", 2);
        ɵngcc0.ɵɵelementStart(6, "div");
        ɵngcc0.ɵɵtemplate(7, UploadCloudWidgetComponent_mat_list_7_Template, 2, 1, "mat-list", 1);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(8, UploadCloudWidgetComponent_div_8_Template, 8, 6, "div", 1);
        ɵngcc0.ɵɵtemplate(9, UploadCloudWidgetComponent_div_9_Template, 3, 3, "div", 1);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(10, "error-widget", 3);
        ɵngcc0.ɵɵtemplate(11, UploadCloudWidgetComponent_error_widget_11_Template, 2, 3, "error-widget", 4);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵclassMapInterpolate1("adf-upload-widget ", ctx.field.className, "");
        ɵngcc0.ɵɵclassProp("adf-invalid", !ctx.field.isValid)("adf-readonly", ctx.field.readOnly);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵattribute("for", ctx.field.id);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(3, 15, ctx.field.name));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.isRequired());
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngIf", ctx.hasFile);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", (!ctx.hasFile || ctx.multipleOption) && !ctx.field.readOnly);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.hasFile && ctx.field.readOnly);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("error", ctx.field.validationSummary);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.isInvalidFieldRequired());
    } }, directives: [ɵngcc3.NgIf, ɵngcc1.ErrorWidgetComponent, ɵngcc4.MatList, ɵngcc3.NgForOf, ɵngcc4.MatListItem, ɵngcc4.MatListIconCssMatStyler, ɵngcc5.MatLine, ɵngcc6.MatButton, ɵngcc7.MatIcon, ɵngcc8.MatTooltip], pipes: [ɵngcc9.TranslatePipe], styles: [".adf-cloud-upload-widget-container{margin-bottom:15px}.adf-cloud-upload-widget-container input{display:none}.adf-cloud-upload-widget{border-top:.84375em solid transparent;padding:.4375em 0;width:100%;word-break:break-all}.adf-cloud-upload-widget__icon{cursor:pointer;float:left;padding:6px}.adf-cloud-upload-widget__reset{margin-top:-2px}.adf-cloud-upload-files-row .mat-line{margin-bottom:0}"], encapsulation: 2 });
UploadCloudWidgetComponent.ctorParameters = () => [
    { type: FormService },
    { type: ThumbnailService },
    { type: ProcessCloudContentService },
    { type: NotificationService },
    { type: LogService }
];
UploadCloudWidgetComponent.propDecorators = {
    fileInput: [{ type: ViewChild, args: ['uploadFiles',] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(UploadCloudWidgetComponent, [{
        type: Component,
        args: [{
                selector: 'upload-cloud-widget',
                template: "<div class=\"adf-upload-widget {{field.className}}\" [class.adf-invalid]=\"!field.isValid\"\n    [class.adf-readonly]=\"field.readOnly\">\n    <label class=\"adf-label\" [attr.for]=\"field.id\">{{ field.name | translate }}<span\n            *ngIf=\"isRequired()\">*</span></label>\n    <div class=\"adf-cloud-upload-widget-container\">\n        <div>\n            <mat-list *ngIf=\"hasFile\">\n                <mat-list-item class=\"adf-upload-files-row\" *ngFor=\"let file of uploadedFiles\">\n                    <img mat-list-icon class=\"adf-upload-widget__icon\" [id]=\"'file-'+file.id+'-icon'\"\n                        [src]=\"getIcon(file.content.mimeType)\" [alt]=\"mimeTypeIcon\" (click)=\"fileClicked(file)\"\n                        (keyup.enter)=\"fileClicked(file)\" role=\"button\" tabindex=\"0\" />\n                    <span matLine id=\"{{'file-'+file.id}}\" (click)=\"fileClicked(file)\" (keyup.enter)=\"fileClicked(file)\"\n                        role=\"button\" tabindex=\"0\" class=\"adf-file\">{{file.name}}</span>\n                    <button *ngIf=\"!field.readOnly\" mat-icon-button [id]=\"'file-'+file.id+'-remove'\"\n                        (click)=\"removeFile(file);\" (keyup.enter)=\"removeFile(file);\">\n                        <mat-icon class=\"mat-24\">highlight_off</mat-icon>\n                    </button>\n                </mat-list-item>\n            </mat-list>\n        </div>\n\n        <div *ngIf=\"(!hasFile || multipleOption) && !field.readOnly\">\n            <button mat-raised-button color=\"primary\" (click)=\"uploadFiles.click()\" [matTooltip]=\"field.tooltip\"\n                matTooltipPosition=\"above\" matTooltipShowDelay=\"1000\">\n                {{ 'FORM.FIELD.UPLOAD' | translate }}<mat-icon>file_upload</mat-icon>\n                <input #uploadFiles [multiple]=\"multipleOption\" type=\"file\" [id]=\"field.form.nodeId\"\n                    (change)=\"onFileChanged($event)\" />\n            </button>\n        </div>\n\n        <div *ngIf=\"!hasFile && field.readOnly\">\n            {{ 'FORM.FIELD.NO_FILE_ATTACHED' | translate }}\n        </div>\n\n    </div>\n    <error-widget [error]=\"field.validationSummary\"></error-widget>\n    <error-widget *ngIf=\"isInvalidFieldRequired()\" required=\"{{ 'FORM.FIELD.REQUIRED' | translate }}\"></error-widget>\n</div>\n",
                host: {
                    '(click)': 'event($event)',
                    '(blur)': 'event($event)',
                    '(change)': 'event($event)',
                    '(focus)': 'event($event)',
                    '(focusin)': 'event($event)',
                    '(focusout)': 'event($event)',
                    '(input)': 'event($event)',
                    '(invalid)': 'event($event)',
                    '(select)': 'event($event)'
                },
                encapsulation: ViewEncapsulation.None,
                styles: [".adf-cloud-upload-widget-container{margin-bottom:15px}.adf-cloud-upload-widget-container input{display:none}.adf-cloud-upload-widget{border-top:.84375em solid transparent;padding:.4375em 0;width:100%;word-break:break-all}.adf-cloud-upload-widget__icon{cursor:pointer;float:left;padding:6px}.adf-cloud-upload-widget__reset{margin-top:-2px}.adf-cloud-upload-files-row .mat-line{margin-bottom:0}"]
            }]
    }], function () { return [{ type: ɵngcc1.FormService }, { type: ɵngcc1.ThumbnailService }, { type: ɵngcc2.ProcessCloudContentService }, { type: ɵngcc1.NotificationService }, { type: ɵngcc1.LogService }]; }, { fileInput: [{
            type: ViewChild,
            args: ['uploadFiles']
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,