/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, ViewEncapsulation } from '@angular/core';
import { WidgetComponent, FormService, LogService, FormFieldEvent, FormFieldTypes } from '@alfresco/adf-core';
import { FormCloudService } from '../../../services/form-cloud.service';
import { Subject } from 'rxjs';
import { filter, takeUntil } from 'rxjs/operators';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@alfresco/adf-core';
import * as ɵngcc2 from '../../../services/form-cloud.service';
import * as ɵngcc3 from '@angular/common';
import * as ɵngcc4 from '@angular/material/form-field';
import * as ɵngcc5 from '@angular/material/select';
import * as ɵngcc6 from '@angular/forms';
import * as ɵngcc7 from '@angular/material/tooltip';
import * as ɵngcc8 from '@angular/material/core';
import * as ɵngcc9 from '@ngx-translate/core';

function DropdownCloudWidgetComponent_span_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span");
    ɵngcc0.ɵɵtext(1, "*");
    ɵngcc0.ɵɵelementEnd();
} }
const _c0 = function (a0) { return { widgetId: a0 }; };
function DropdownCloudWidgetComponent_label_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "label", 9);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵattribute("for", ctx_r1.field.id);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind2(2, 2, "FORM.FIELD.DEPENDS_ON", ɵngcc0.ɵɵpureFunction1(5, _c0, ctx_r1.getLinkedWidgetId())), " ");
} }
function DropdownCloudWidgetComponent_mat_option_9_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-option", 10);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const opt_r5 = ctx.$implicit;
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("value", ctx_r2.getOptionValue(opt_r5, ctx_r2.field.value))("id", opt_r5.id);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1("", opt_r5.name, " ");
} }
function DropdownCloudWidgetComponent_mat_option_10_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-option", 11);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("value", ctx_r3.field.value);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r3.field.value);
} }
function DropdownCloudWidgetComponent_error_widget_12_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "error-widget", 12);
    ɵngcc0.ɵɵpipe(1, "translate");
} if (rf & 2) {
    ɵngcc0.ɵɵpropertyInterpolate("required", ɵngcc0.ɵɵpipeBind1(1, 1, "FORM.FIELD.REQUIRED"));
} }
export class DropdownCloudWidgetComponent extends WidgetComponent {
    constructor(formService, formCloudService, logService) {
        super(formService);
        this.formService = formService;
        this.formCloudService = formCloudService;
        this.logService = logService;
        this.typeId = 'DropdownCloudWidgetComponent';
        this.onDestroy$ = new Subject();
    }
    ngOnInit() {
        if (this.hasRestUrl() && !this.isLinkedWidget()) {
            this.persistFieldOptionsFromRestApi();
        }
        if (this.isLinkedWidget()) {
            this.loadFieldOptionsForLinkedWidget();
            this.formService.formFieldValueChanged
                .pipe(filter((event) => this.isFormFieldEventOfTypeDropdown(event) && this.isParentFormFieldEvent(event)), takeUntil(this.onDestroy$))
                .subscribe((event) => {
                const valueOfParentWidget = event.field.value;
                this.parentValueChanged(valueOfParentWidget);
            });
        }
    }
    persistFieldOptionsFromRestApi() {
        if (this.isValidRestType()) {
            const bodyParam = this.buildBodyParam();
            this.formCloudService.getRestWidgetData(this.field.form.id, this.field.id, bodyParam)
                .pipe(takeUntil(this.onDestroy$))
                .subscribe((result) => {
                this.field.options = result;
                this.field.updateForm();
            }, (err) => this.handleError(err));
        }
    }
    buildBodyParam() {
        const bodyParam = Object.assign({});
        if (this.isLinkedWidget()) {
            const parentWidgetValue = this.getParentWidgetValue();
            const parentWidgetId = this.getLinkedWidgetId();
            bodyParam[parentWidgetId] = parentWidgetValue;
        }
        return bodyParam;
    }
    loadFieldOptionsForLinkedWidget() {
        const parentWidgetValue = this.getParentWidgetValue();
        this.parentValueChanged(parentWidgetValue);
    }
    getParentWidgetValue() {
        const parentWidgetId = this.getLinkedWidgetId();
        const parentWidget = this.getFormFieldById(parentWidgetId);
        return parentWidget === null || parentWidget === void 0 ? void 0 : parentWidget.value;
    }
    parentValueChanged(value) {
        if (this.isValidValue(value)) {
            this.isValidRestType() ? this.persistFieldOptionsFromRestApi() : this.persistFieldOptionsFromManualList(value);
        }
        else if (this.isDefaultValue(value)) {
            this.addDefaultOption();
        }
    }
    isValidValue(value) {
        return !!value && value !== DropdownCloudWidgetComponent.DEFAULT_OPTION.id;
    }
    isDefaultValue(value) {
        return value === DropdownCloudWidgetComponent.DEFAULT_OPTION.id;
    }
    getFormFieldById(fieldId) {
        return this.field.form.getFormFields().filter((field) => field.id === fieldId)[0];
    }
    persistFieldOptionsFromManualList(value) {
        if (this.hasRuleEntries()) {
            const rulesEntries = this.getRuleEntries();
            rulesEntries.forEach((ruleEntry) => {
                if (ruleEntry.key === value) {
                    this.field.options = ruleEntry.options;
                    this.field.updateForm();
                }
            });
        }
    }
    getRuleEntries() {
        return this.field.rule.entries;
    }
    hasRuleEntries() {
        return !!this.getRuleEntries().length;
    }
    addDefaultOption() {
        this.field.options = [DropdownCloudWidgetComponent.DEFAULT_OPTION];
    }
    selectionChangedForField(field) {
        const formFieldValueChangedEvent = new FormFieldEvent(field.form, field);
        this.formService.formFieldValueChanged.next(formFieldValueChangedEvent);
        this.onFieldChanged(field);
    }
    isParentFormFieldEvent(event) {
        return event.field.id === this.getLinkedWidgetId();
    }
    isFormFieldEventOfTypeDropdown(event) {
        return event.field.type === FormFieldTypes.DROPDOWN;
    }
    hasRestUrl() {
        var _a;
        return !!((_a = this.field) === null || _a === void 0 ? void 0 : _a.restUrl);
    }
    isLinkedWidget() {
        return !!this.getLinkedWidgetId();
    }
    getLinkedWidgetId() {
        var _a, _b;
        return (_b = (_a = this.field) === null || _a === void 0 ? void 0 : _a.rule) === null || _b === void 0 ? void 0 : _b.ruleOn;
    }
    compareDropdownValues(opt1, opt2) {
        if (!opt1 || !opt2) {
            return false;
        }
        if (typeof opt1 === 'string' && typeof opt2 === 'object') {
            return opt1 === opt2.id || opt1 === opt2.name;
        }
        if (typeof opt1 === 'object' && typeof opt2 === 'string') {
            return opt1.id === opt2 || opt1.name === opt2;
        }
        if (typeof opt1 === 'object' && typeof opt2 === 'object') {
            return opt1.id === opt2.id || opt1.name === opt2.name;
        }
        return opt1 === opt2;
    }
    getOptionValue(option, fieldValue) {
        if (this.field.hasMultipleValues) {
            return option;
        }
        let optionValue = '';
        if (option.id === DropdownCloudWidgetComponent.DEFAULT_OPTION.id || option.name !== fieldValue) {
            optionValue = option.id;
        }
        else {
            optionValue = option.name;
        }
        return optionValue;
    }
    isValidRestType() {
        return this.field.optionType === 'rest' && !!this.field.restUrl;
    }
    handleError(error) {
        this.logService.error(error);
    }
    isReadOnlyType() {
        return this.field.type === 'readonly';
    }
    ngOnDestroy() {
        this.onDestroy$.next(true);
        this.onDestroy$.complete();
    }
}
DropdownCloudWidgetComponent.ɵfac = function DropdownCloudWidgetComponent_Factory(t) { return new (t || DropdownCloudWidgetComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FormService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.FormCloudService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.LogService)); };
DropdownCloudWidgetComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: DropdownCloudWidgetComponent, selectors: [["dropdown-cloud-widget"]], hostBindings: function DropdownCloudWidgetComponent_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function DropdownCloudWidgetComponent_click_HostBindingHandler($event) { return ctx.event($event); })("blur", function DropdownCloudWidgetComponent_blur_HostBindingHandler($event) { return ctx.event($event); })("change", function DropdownCloudWidgetComponent_change_HostBindingHandler($event) { return ctx.event($event); })("focus", function DropdownCloudWidgetComponent_focus_HostBindingHandler($event) { return ctx.event($event); })("focusin", function DropdownCloudWidgetComponent_focusin_HostBindingHandler($event) { return ctx.event($event); })("focusout", function DropdownCloudWidgetComponent_focusout_HostBindingHandler($event) { return ctx.event($event); })("input", function DropdownCloudWidgetComponent_input_HostBindingHandler($event) { return ctx.event($event); })("invalid", function DropdownCloudWidgetComponent_invalid_HostBindingHandler($event) { return ctx.event($event); })("select", function DropdownCloudWidgetComponent_select_HostBindingHandler($event) { return ctx.event($event); });
    } }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 13, vars: 23, consts: [[1, "adf-dropdown-widget-top-labels"], [1, "adf-label"], [4, "ngIf"], ["class", "adf-label adf-dropdown-widget-linked", 4, "ngIf"], ["matTooltipPosition", "above", "matTooltipShowDelay", "1000", 1, "adf-select", 3, "id", "ngModel", "disabled", "compareWith", "matTooltip", "multiple", "ngModelChange"], [3, "value", "id", 4, "ngFor", "ngForOf"], ["id", "readonlyOption", 3, "value", 4, "ngIf"], [3, "error"], ["class", "adf-dropdown-required-message", 3, "required", 4, "ngIf"], [1, "adf-label", "adf-dropdown-widget-linked"], [3, "value", "id"], ["id", "readonlyOption", 3, "value"], [1, "adf-dropdown-required-message", 3, "required"]], template: function DropdownCloudWidgetComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div");
        ɵngcc0.ɵɵelementStart(1, "div", 0);
        ɵngcc0.ɵɵelementStart(2, "label", 1);
        ɵngcc0.ɵɵtext(3);
        ɵngcc0.ɵɵpipe(4, "translate");
        ɵngcc0.ɵɵtemplate(5, DropdownCloudWidgetComponent_span_5_Template, 2, 0, "span", 2);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(6, DropdownCloudWidgetComponent_label_6_Template, 3, 7, "label", 3);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(7, "mat-form-field");
        ɵngcc0.ɵɵelementStart(8, "mat-select", 4);
        ɵngcc0.ɵɵlistener("ngModelChange", function DropdownCloudWidgetComponent_Template_mat_select_ngModelChange_8_listener($event) { return ctx.field.value = $event; })("ngModelChange", function DropdownCloudWidgetComponent_Template_mat_select_ngModelChange_8_listener() { return ctx.selectionChangedForField(ctx.field); });
        ɵngcc0.ɵɵtemplate(9, DropdownCloudWidgetComponent_mat_option_9_Template, 2, 3, "mat-option", 5);
        ɵngcc0.ɵɵtemplate(10, DropdownCloudWidgetComponent_mat_option_10_Template, 2, 2, "mat-option", 6);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(11, "error-widget", 7);
        ɵngcc0.ɵɵtemplate(12, DropdownCloudWidgetComponent_error_widget_12_Template, 2, 3, "error-widget", 8);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵclassMapInterpolate1("adf-dropdown-widget ", ctx.field.className, "");
        ɵngcc0.ɵɵclassProp("adf-invalid", !ctx.field.isValid)("adf-readonly", ctx.field.readOnly);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵattribute("for", ctx.field.id);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(4, 21, ctx.field.name));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.isRequired());
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.isLinkedWidget());
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("id", ctx.field.id)("ngModel", ctx.field.value)("disabled", ctx.field.readOnly)("compareWith", ctx.compareDropdownValues)("matTooltip", ctx.field.tooltip)("multiple", ctx.field.hasMultipleValues);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.field.options);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.isReadOnlyType());
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("error", ctx.field.validationSummary);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.isInvalidFieldRequired());
    } }, directives: [ɵngcc3.NgIf, ɵngcc4.MatFormField, ɵngcc5.MatSelect, ɵngcc6.NgControlStatus, ɵngcc6.NgModel, ɵngcc7.MatTooltip, ɵngcc3.NgForOf, ɵngcc1.ErrorWidgetComponent, ɵngcc8.MatOption], pipes: [ɵngcc9.TranslatePipe], styles: [".adf-dropdown-widget{margin-top:13px;width:100%}.adf-dropdown-widget .adf-select{padding-top:0!important;width:100%}.adf-dropdown-widget .mat-select-value-text{font-size:14px}.adf-dropdown-widget-top-labels{display:flex;flex-direction:row;height:16px;justify-content:space-between}.adf-dropdown-widget-top-labels .adf-dropdown-widget-linked{display:contents}.adf-dropdown-widget-select{width:100%}.adf-dropdown-widget-dropdown-required-message .adf-error-text-container{margin-top:1px!important}"], encapsulation: 2 });
DropdownCloudWidgetComponent.DEFAULT_OPTION = {
    id: 'empty',
    name: 'Choose one...'
};
DropdownCloudWidgetComponent.ctorParameters = () => [
    { type: FormService },
    { type: FormCloudService },
    { type: LogService }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DropdownCloudWidgetComponent, [{
        type: Component,
        args: [{
                selector: 'dropdown-cloud-widget',
                template: "<div class=\"adf-dropdown-widget {{field.className}}\"\n     [class.adf-invalid]=\"!field.isValid\" [class.adf-readonly]=\"field.readOnly\">\n    <div class=\"adf-dropdown-widget-top-labels\">\n        <label class=\"adf-label\" [attr.for]=\"field.id\">{{field.name | translate }}<span\n            *ngIf=\"isRequired()\">*</span></label>\n        <label class=\"adf-label adf-dropdown-widget-linked\"\n               *ngIf=\"isLinkedWidget()\"\n               [attr.for]=\"field.id\">\n            {{ 'FORM.FIELD.DEPENDS_ON' | translate: { widgetId: getLinkedWidgetId() } }}\n        </label>\n    </div>\n    <mat-form-field>\n        <mat-select class=\"adf-select\"\n                    [id]=\"field.id\"\n                    [(ngModel)]=\"field.value\"\n                    [disabled]=\"field.readOnly\"\n                    [compareWith]=\"compareDropdownValues\"\n                    (ngModelChange)=\"selectionChangedForField(field)\"\n                    [matTooltip]=\"field.tooltip\"\n                    matTooltipPosition=\"above\"\n                    matTooltipShowDelay=\"1000\"\n                    [multiple]=\"field.hasMultipleValues\">\n            <mat-option *ngFor=\"let opt of field.options\"\n                        [value]=\"getOptionValue(opt, field.value)\"\n                        [id]=\"opt.id\">{{opt.name}}\n            </mat-option>\n            <mat-option id=\"readonlyOption\" *ngIf=\"isReadOnlyType()\" [value]=\"field.value\">{{field.value}}</mat-option>\n        </mat-select>\n    </mat-form-field>\n    <error-widget [error]=\"field.validationSummary\"></error-widget>\n    <error-widget class=\"adf-dropdown-required-message\" *ngIf=\"isInvalidFieldRequired()\"\n                  required=\"{{ 'FORM.FIELD.REQUIRED' | translate }}\"></error-widget>\n</div>\n",
                host: {
                    '(click)': 'event($event)',
                    '(blur)': 'event($event)',
                    '(change)': 'event($event)',
                    '(focus)': 'event($event)',
                    '(focusin)': 'event($event)',
                    '(focusout)': 'event($event)',
                    '(input)': 'event($event)',
                    '(invalid)': 'event($event)',
                    '(select)': 'event($event)'
                },
                encapsulation: ViewEncapsulation.None,
                styles: [".adf-dropdown-widget{margin-top:13px;width:100%}.adf-dropdown-widget .adf-select{padding-top:0!important;width:100%}.adf-dropdown-widget .mat-select-value-text{font-size:14px}.adf-dropdown-widget-top-labels{display:flex;flex-direction:row;height:16px;justify-content:space-between}.adf-dropdown-widget-top-labels .adf-dropdown-widget-linked{display:contents}.adf-dropdown-widget-select{width:100%}.adf-dropdown-widget-dropdown-required-message .adf-error-text-container{margin-top:1px!important}"]
            }]
    }], function () { return [{ type: ɵngcc1.FormService }, { type: ɵngcc2.FormCloudService }, { type: ɵngcc1.LogService }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,