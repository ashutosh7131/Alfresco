/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, EventEmitter, Input, Output, ViewEncapsulation } from '@angular/core';
import { NodesApiService } from '@alfresco/adf-core';
export class PropertiesViewerWrapperComponent {
    constructor(nodesApiService) {
        this.nodesApiService = nodesApiService;
        this.loading = true;
        this.displayAspect = null;
        this.nodeContentLoaded = new EventEmitter();
    }
    ngOnChanges(changes) {
        if (changes && changes['nodeId'] && changes['nodeId'].currentValue && !changes['nodeId'].isFirstChange()) {
            this.getNode(changes['nodeId'].currentValue);
        }
    }
    ngOnInit() {
        if (this.nodeId) {
            this.getNode(this.nodeId);
        }
    }
    getNode(nodeId) {
        this.loading = true;
        this.nodesApiService.getNode(nodeId).subscribe(retrievedNode => {
            this.node = retrievedNode;
            this.loading = false;
            this.nodeContentLoaded.emit(retrievedNode);
        });
    }
}
PropertiesViewerWrapperComponent.decorators = [
    { type: Component, args: [{
                selector: 'adf-properties-viewer-wrapper',
                template: "<adf-content-metadata [displayDefaultProperties]=\"displayDefaultProperties\" [expanded]=\"expanded\" [node]=\"node\"\n    [preset]=\"preset\" [displayEmpty]=\"displayEmpty\" [editable]=\"editable\" [multi]=\"multi\"\n    [displayAspect]=\"displayAspect\" [copyToClipboardAction]=\"copyToClipboardAction\"\n    [useChipsForMultiValueProperty]=\"useChipsForMultiValueProperty\" *ngIf=\"!loading; else loadingTemplate\">\n</adf-content-metadata>\n<ng-template #loadingTemplate>\n    <div class=\"adf-properties-viewer-wrapper-loading\">\n        <mat-progress-spinner></mat-progress-spinner>\n    </div>\n</ng-template>\n",
                encapsulation: ViewEncapsulation.None
            },] }
];
PropertiesViewerWrapperComponent.ctorParameters = () => [
    { type: NodesApiService }
];
PropertiesViewerWrapperComponent.propDecorators = {
    nodeId: [{ type: Input }],
    editable: [{ type: Input }],
    displayEmpty: [{ type: Input }],
    expanded: [{ type: Input }],
    multi: [{ type: Input }],
    preset: [{ type: Input }],
    displayDefaultProperties: [{ type: Input }],
    displayAspect: [{ type: Input }],
    copyToClipboardAction: [{ type: Input }],
    useChipsForMultiValueProperty: [{ type: Input }],
    nodeContentLoaded: [{ type: Output }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvcGVydGllcy12aWV3ZXItd3JhcHBlci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiL2hvbWUvdHJhdmlzL2J1aWxkL0FsZnJlc2NvL2FsZnJlc2NvLW5nMi1jb21wb25lbnRzL2xpYi9wcm9jZXNzLXNlcnZpY2VzLWNsb3VkL3NyYy8iLCJzb3VyY2VzIjpbImxpYi9mb3JtL2NvbXBvbmVudHMvd2lkZ2V0cy9wcm9wZXJ0aWVzLXZpZXdlci9wcm9wZXJ0aWVzLXZpZXdlci13cmFwcGVyL3Byb3BlcnRpZXMtdmlld2VyLXdyYXBwZXIuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7R0FlRztBQUVILE9BQU8sRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBcUIsTUFBTSxFQUFpQixpQkFBaUIsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM1SCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFXckQsTUFBTSxPQUFPLGdDQUFnQztJQWlEekMsWUFBb0IsZUFBZ0M7UUFBaEMsb0JBQWUsR0FBZixlQUFlLENBQWlCO1FBOUNwRCxZQUFPLEdBQUcsSUFBSSxDQUFDO1FBaUNmLGtCQUFhLEdBQVcsSUFBSSxDQUFDO1FBVzdCLHNCQUFpQixHQUF1QixJQUFJLFlBQVksRUFBRSxDQUFDO0lBRUgsQ0FBQztJQUV6RCxXQUFXLENBQUMsT0FBc0I7UUFDOUIsSUFBSSxPQUFPLElBQUksT0FBTyxDQUFDLFFBQVEsQ0FBQyxJQUFJLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQyxZQUFZLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUMsYUFBYSxFQUFFLEVBQUU7WUFDdEcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUM7U0FDaEQ7SUFDTCxDQUFDO0lBRUQsUUFBUTtRQUNKLElBQUksSUFBSSxDQUFDLE1BQU0sRUFBRTtZQUNiLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQzdCO0lBQ0wsQ0FBQztJQUVPLE9BQU8sQ0FBQyxNQUFjO1FBQzFCLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDO1FBQ3BCLElBQUksQ0FBQyxlQUFlLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLFNBQVMsQ0FBQyxhQUFhLENBQUMsRUFBRTtZQUMzRCxJQUFJLENBQUMsSUFBSSxHQUFHLGFBQWEsQ0FBQztZQUMxQixJQUFJLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQztZQUNyQixJQUFJLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBQy9DLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQzs7O1lBM0VKLFNBQVMsU0FBQztnQkFDUCxRQUFRLEVBQUUsK0JBQStCO2dCQUN6Qyx1bkJBQXlEO2dCQUN6RCxhQUFhLEVBQUUsaUJBQWlCLENBQUMsSUFBSTthQUN4Qzs7O1lBVlEsZUFBZTs7O3FCQWdCbkIsS0FBSzt1QkFJTCxLQUFLOzJCQUlMLEtBQUs7dUJBTUwsS0FBSztvQkFJTCxLQUFLO3FCQUlMLEtBQUs7dUNBSUwsS0FBSzs0QkFJTCxLQUFLO29DQUlMLEtBQUs7NENBSUwsS0FBSztnQ0FHTCxNQUFNIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgQ29tcG9uZW50LCBFdmVudEVtaXR0ZXIsIElucHV0LCBPbkNoYW5nZXMsIE9uSW5pdCwgT3V0cHV0LCBTaW1wbGVDaGFuZ2VzLCBWaWV3RW5jYXBzdWxhdGlvbiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTm9kZXNBcGlTZXJ2aWNlIH0gZnJvbSAnQGFsZnJlc2NvL2FkZi1jb3JlJztcbmltcG9ydCB7IE5vZGUgfSBmcm9tICdAYWxmcmVzY28vanMtYXBpJztcbmltcG9ydCB7IFByZXNldENvbmZpZyB9IGZyb20gJ0BhbGZyZXNjby9hZGYtY29udGVudC1zZXJ2aWNlcyc7XG5cbi8qIHRzbGludDpkaXNhYmxlOmNvbXBvbmVudC1zZWxlY3RvciAgKi9cblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICdhZGYtcHJvcGVydGllcy12aWV3ZXItd3JhcHBlcicsXG4gICAgdGVtcGxhdGVVcmw6ICcuL3Byb3BlcnRpZXMtdmlld2VyLXdyYXBwZXIuY29tcG9uZW50Lmh0bWwnLFxuICAgIGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLk5vbmVcbn0pXG5leHBvcnQgY2xhc3MgUHJvcGVydGllc1ZpZXdlcldyYXBwZXJDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIE9uQ2hhbmdlcyB7XG5cbiAgICBub2RlOiBOb2RlO1xuICAgIGxvYWRpbmcgPSB0cnVlO1xuXG4gICAgQElucHV0KClcbiAgICBub2RlSWQ6IHN0cmluZztcblxuICAgIC8qKiBUb2dnbGVzIHdoZXRoZXIgdGhlIGVkaXQgYnV0dG9uIHNob3VsZCBiZSBzaG93biAqL1xuICAgIEBJbnB1dCgpXG4gICAgZWRpdGFibGU7XG5cbiAgICAvKiogVG9nZ2xlcyB3aGV0aGVyIHRvIGRpc3BsYXkgZW1wdHkgdmFsdWVzIGluIHRoZSBjYXJkIHZpZXcgKi9cbiAgICBASW5wdXQoKVxuICAgIGRpc3BsYXlFbXB0eTtcblxuICAgIC8qKiBUb2dnbGVzIGJldHdlZW4gZXhwYW5kZWQgKGllLCBmdWxsIGluZm9ybWF0aW9uKSBhbmQgY29sbGFwc2VkXG4gICAgICogKGllLCByZWR1Y2VkIGluZm9ybWF0aW9uKSBpbiB0aGUgZGlzcGxheVxuICAgICAqL1xuICAgIEBJbnB1dCgpXG4gICAgZXhwYW5kZWQ7XG5cbiAgICAvKiogVGhlIG11bHRpIHBhcmFtZXRlciBvZiB0aGUgdW5kZXJseWluZyBtYXRlcmlhbCBleHBhbnNpb24gcGFuZWwsIHNldCB0byB0cnVlIHRvIGFsbG93IG11bHRpIGFjY29yZGlvbiB0byBiZSBleHBhbmRlZCBhdCB0aGUgc2FtZSB0aW1lICovXG4gICAgQElucHV0KClcbiAgICBtdWx0aTtcblxuICAgIC8qKiBOYW1lIG9yIGNvbmZpZ3VyYXRpb24gb2YgdGhlIG1ldGFkYXRhIHByZXNldCwgd2hpY2ggZGVmaW5lcyBhc3BlY3RzIGFuZCB0aGVpciBwcm9wZXJ0aWVzICovXG4gICAgQElucHV0KClcbiAgICBwcmVzZXQ6IHN0cmluZyB8IFByZXNldENvbmZpZztcblxuICAgIC8qKiBUb2dnbGVzIHdoZXRoZXIgdGhlIG1ldGFkYXRhIHByb3BlcnRpZXMgc2hvdWxkIGJlIHNob3duICovXG4gICAgQElucHV0KClcbiAgICBkaXNwbGF5RGVmYXVsdFByb3BlcnRpZXM7XG5cbiAgICAvKiogKG9wdGlvbmFsKSBzaG93cyB0aGUgZ2l2ZW4gYXNwZWN0IGluIHRoZSBleHBhbmRlZCAgY2FyZCAqL1xuICAgIEBJbnB1dCgpXG4gICAgZGlzcGxheUFzcGVjdDogc3RyaW5nID0gbnVsbDtcblxuICAgIC8qKiBUb2dnbGVzIHdoZXRoZXIgb3Igbm90IHRvIGVuYWJsZSBjb3B5IHRvIGNsaXBib2FyZCBhY3Rpb24uICovXG4gICAgQElucHV0KClcbiAgICBjb3B5VG9DbGlwYm9hcmRBY3Rpb247XG5cbiAgICAvKiogVG9nZ2xlcyB3aGV0aGVyIG9yIG5vdCB0byBlbmFibGUgY2hpcHMgZm9yIG11bHRpdmFsdWVkIHByb3BlcnRpZXMuICovXG4gICAgQElucHV0KClcbiAgICB1c2VDaGlwc0Zvck11bHRpVmFsdWVQcm9wZXJ0eTtcblxuICAgIEBPdXRwdXQoKVxuICAgIG5vZGVDb250ZW50TG9hZGVkOiBFdmVudEVtaXR0ZXI8Tm9kZT4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIG5vZGVzQXBpU2VydmljZTogTm9kZXNBcGlTZXJ2aWNlKSB7IH1cblxuICAgIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkIHtcbiAgICAgICAgaWYgKGNoYW5nZXMgJiYgY2hhbmdlc1snbm9kZUlkJ10gJiYgY2hhbmdlc1snbm9kZUlkJ10uY3VycmVudFZhbHVlICYmICFjaGFuZ2VzWydub2RlSWQnXS5pc0ZpcnN0Q2hhbmdlKCkpIHtcbiAgICAgICAgICAgIHRoaXMuZ2V0Tm9kZShjaGFuZ2VzWydub2RlSWQnXS5jdXJyZW50VmFsdWUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgbmdPbkluaXQoKTogdm9pZCB7XG4gICAgICAgIGlmICh0aGlzLm5vZGVJZCkge1xuICAgICAgICAgICAgdGhpcy5nZXROb2RlKHRoaXMubm9kZUlkKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgZ2V0Tm9kZShub2RlSWQ6IHN0cmluZykge1xuICAgICAgICB0aGlzLmxvYWRpbmcgPSB0cnVlO1xuICAgICAgICB0aGlzLm5vZGVzQXBpU2VydmljZS5nZXROb2RlKG5vZGVJZCkuc3Vic2NyaWJlKHJldHJpZXZlZE5vZGUgPT4ge1xuICAgICAgICAgICAgdGhpcy5ub2RlID0gcmV0cmlldmVkTm9kZTtcbiAgICAgICAgICAgIHRoaXMubG9hZGluZyA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy5ub2RlQ29udGVudExvYWRlZC5lbWl0KHJldHJpZXZlZE5vZGUpO1xuICAgICAgICB9KTtcbiAgICB9XG59XG4iXX0=