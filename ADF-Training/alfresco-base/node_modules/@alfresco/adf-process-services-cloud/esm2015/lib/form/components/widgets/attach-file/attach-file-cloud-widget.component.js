/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { __awaiter } from "tslib";
import { Component, ViewEncapsulation } from '@angular/core';
import { FormService, LogService, ThumbnailService, NotificationService, ContentLinkModel, AppConfigService, AlfrescoApiService, UploadWidgetContentLinkModel } from '@alfresco/adf-core';
import { NodesApi } from '@alfresco/js-api';
import { ContentCloudNodeSelectorService } from '../../../services/content-cloud-node-selector.service';
import { ProcessCloudContentService } from '../../../services/process-cloud-content.service';
import { UploadCloudWidgetComponent } from './upload-cloud.widget';
import { DestinationFolderPathType } from '../../../models/form-cloud-representation.model';
import { ContentNodeSelectorPanelService } from '@alfresco/adf-content-services';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@alfresco/adf-core';
import * as ɵngcc2 from '../../../services/process-cloud-content.service';
import * as ɵngcc3 from '../../../services/content-cloud-node-selector.service';
import * as ɵngcc4 from '@alfresco/adf-content-services';
import * as ɵngcc5 from '@angular/common';
import * as ɵngcc6 from './file-properties-table-cloud.component';
import * as ɵngcc7 from '@angular/material/button';
import * as ɵngcc8 from '@angular/material/tooltip';
import * as ɵngcc9 from '@angular/material/icon';
import * as ɵngcc10 from '@ngx-translate/core';

function AttachFileCloudWidgetComponent_span_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span");
    ɵngcc0.ɵɵtext(1, "*");
    ɵngcc0.ɵɵelementEnd();
} }
function AttachFileCloudWidgetComponent_div_6_Template(rf, ctx) { if (rf & 1) {
    const _r5 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 10);
    ɵngcc0.ɵɵelementStart(1, "button", 11);
    ɵngcc0.ɵɵlistener("click", function AttachFileCloudWidgetComponent_div_6_Template_button_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r5); const ctx_r4 = ɵngcc0.ɵɵnextContext(); return ctx_r4.openSelectDialog(); });
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementStart(4, "mat-icon");
    ɵngcc0.ɵɵtext(5);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("id", ctx_r1.field.id)("matTooltip", ctx_r1.field.tooltip);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(3, 4, "FORM.FIELD.ATTACH"), " ");
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate(ctx_r1.getWidgetIcon());
} }
function AttachFileCloudWidgetComponent_div_9_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 12);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵpropertyInterpolate("id", "adf-attach-empty-list-" + ctx_r2.field.id);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 2, "FORM.FIELD.NO_FILE_ATTACHED"), " ");
} }
function AttachFileCloudWidgetComponent_error_widget_11_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "error-widget", 13);
    ɵngcc0.ɵɵpipe(1, "translate");
} if (rf & 2) {
    ɵngcc0.ɵɵpropertyInterpolate("required", ɵngcc0.ɵɵpipeBind1(1, 1, "FORM.FIELD.REQUIRED"));
} }
export class AttachFileCloudWidgetComponent extends UploadCloudWidgetComponent {
    constructor(formService, logger, thumbnails, processCloudContentService, notificationService, contentNodeSelectorService, appConfigService, apiService, contentNodeSelectorPanelService) {
        super(formService, thumbnails, processCloudContentService, notificationService, logger);
        this.contentNodeSelectorService = contentNodeSelectorService;
        this.appConfigService = appConfigService;
        this.apiService = apiService;
        this.contentNodeSelectorPanelService = contentNodeSelectorPanelService;
        this.typeId = 'AttachFileCloudWidgetComponent';
        this.rootNodeId = AttachFileCloudWidgetComponent.ALIAS_USER_FOLDER;
        this.displayedColumns = ['icon', 'fileName', 'action'];
    }
    get nodesApi() {
        var _a;
        this._nodesApi = (_a = this._nodesApi) !== null && _a !== void 0 ? _a : new NodesApi(this.apiService.getInstance());
        return this._nodesApi;
    }
    ngOnInit() {
        var _a, _b;
        super.ngOnInit();
        if (this.hasFile && this.field.value.length === 1) {
            const files = this.field.value || this.field.form.values[this.field.id];
            this.contentModelFormFileHandler(files[0]);
        }
        this.field.params.displayableCMProperties = (_a = this.field.params.displayableCMProperties) !== null && _a !== void 0 ? _a : [];
        this.displayedColumns.splice(2, 0, ...(_b = this.field.params.displayableCMProperties) === null || _b === void 0 ? void 0 : _b.map(property => property === null || property === void 0 ? void 0 : property.name));
    }
    isPathStaticType() {
        var _a, _b, _c;
        return ((_c = (_b = (_a = this.field.params) === null || _a === void 0 ? void 0 : _a.fileSource) === null || _b === void 0 ? void 0 : _b.destinationFolderPath) === null || _c === void 0 ? void 0 : _c.type) === DestinationFolderPathType.STATIC_TYPE;
    }
    isUploadButtonVisible() {
        return (!this.hasFile || this.multipleOption) && !this.field.readOnly;
    }
    onRemoveAttachFile(file) {
        var _a;
        this.removeFile(file);
        if (file['id'] === ((_a = this.selectedNode) === null || _a === void 0 ? void 0 : _a.id)) {
            this.selectedNode = null;
            this.contentModelFormFileHandler();
        }
    }
    fetchAppNameFromAppConfig() {
        var _a;
        return (_a = this.appConfigService.get('alfresco-deployed-apps')[0]) === null || _a === void 0 ? void 0 : _a.name;
    }
    replaceAppNameAliasWithValue(path) {
        if (path === null || path === void 0 ? void 0 : path.match(AttachFileCloudWidgetComponent.APP_NAME)) {
            const appName = this.fetchAppNameFromAppConfig();
            return path.replace(AttachFileCloudWidgetComponent.APP_NAME, appName);
        }
        return path;
    }
    openSelectDialog() {
        return __awaiter(this, void 0, void 0, function* () {
            const selectedMode = this.field.params.multiple ? 'multiple' : 'single';
            const nodeId = yield this.getDestinationFolderNodeId();
            this.rootNodeId = nodeId ? nodeId : AttachFileCloudWidgetComponent.ALIAS_USER_FOLDER;
            this.contentNodeSelectorPanelService.customModels = this.field.params.customModels;
            this.contentNodeSelectorService
                .openUploadFileDialog(this.rootNodeId, selectedMode, this.isAlfrescoAndLocal(), true)
                .subscribe((selections) => {
                selections.forEach(node => (node['isExternal'] = true));
                const selectionWithoutDuplication = this.removeExistingSelection(selections);
                this.fixIncompatibilityFromPreviousAndNewForm(selectionWithoutDuplication);
                if (this.field.value.length === 1) {
                    this.contentModelFormFileHandler(selections && selections.length > 0 ? selections[0] : null);
                }
            });
        });
    }
    getDestinationFolderNodeId() {
        var _a, _b, _c, _d;
        return __awaiter(this, void 0, void 0, function* () {
            let rootNodeId;
            switch ((_d = (_c = (_b = (_a = this.field) === null || _a === void 0 ? void 0 : _a.params) === null || _b === void 0 ? void 0 : _b.fileSource) === null || _c === void 0 ? void 0 : _c.destinationFolderPath) === null || _d === void 0 ? void 0 : _d.type) {
                case DestinationFolderPathType.STATIC_TYPE:
                    rootNodeId = yield this.getNodeIdFromPath(this.field.params.fileSource.destinationFolderPath);
                    break;
                case DestinationFolderPathType.STRING_TYPE:
                    rootNodeId = yield this.getNodeIdFromPath(this.field.params.fileSource.destinationFolderPath);
                    break;
                case DestinationFolderPathType.FOLDER_TYPE:
                    rootNodeId = yield this.getNodeIdFromFolderVariableValue(this.field.params.fileSource.destinationFolderPath);
                    break;
                default:
                    rootNodeId = yield this.getNodeIdFromPath({ type: '', value: AttachFileCloudWidgetComponent.ALIAS_USER_FOLDER });
                    break;
            }
            return rootNodeId;
        });
    }
    getNodeIdFromPath(destinationFolderPath) {
        return __awaiter(this, void 0, void 0, function* () {
            let nodeId;
            const destinationPath = this.getAliasAndRelativePathFromDestinationFolderPath(destinationFolderPath.value);
            destinationPath.path = this.replaceAppNameAliasWithValue(destinationPath.path);
            try {
                nodeId = yield this.contentNodeSelectorService.getNodeIdFromPath(destinationPath);
            }
            catch (error) {
                this.logService.error(error);
            }
            return nodeId;
        });
    }
    getNodeIdFromFolderVariableValue(destinationFolderPath) {
        return __awaiter(this, void 0, void 0, function* () {
            let nodeId;
            try {
                nodeId = yield this.contentNodeSelectorService.getNodeIdFromFolderVariableValue(destinationFolderPath.value, AttachFileCloudWidgetComponent.ALIAS_USER_FOLDER);
            }
            catch (error) {
                this.logService.error(error);
            }
            return nodeId;
        });
    }
    getAliasAndRelativePathFromDestinationFolderPath(destinationFolderPath) {
        let alias;
        let path;
        if (destinationFolderPath) {
            const startOfRelativePathIndex = destinationFolderPath.indexOf('/');
            if (startOfRelativePathIndex >= 0) {
                alias = destinationFolderPath.substring(0, startOfRelativePathIndex);
                path = destinationFolderPath.substring(startOfRelativePathIndex, destinationFolderPath.length);
            }
            else {
                alias = destinationFolderPath;
            }
        }
        return this.isValidAlias(alias) ? { alias, path } : { alias: AttachFileCloudWidgetComponent.ALIAS_USER_FOLDER, path: undefined };
    }
    removeExistingSelection(selections) {
        const existingNode = [...this.field.value || []];
        return selections.filter(opt => !existingNode.some((node) => node.id === opt.id));
    }
    downloadContent(file) {
        this.processCloudContentService.downloadFile(file.id);
    }
    onAttachFileClicked(nodeSelector) {
        nodeSelector.nodeId = nodeSelector.id;
        this.fileClicked(new ContentLinkModel(nodeSelector));
    }
    getWidgetIcon() {
        return this.isAlfrescoAndLocal() ? 'file_upload' : 'attach_file';
    }
    onRowClicked(file) {
        var _a;
        if (((_a = this.selectedNode) === null || _a === void 0 ? void 0 : _a.id) === (file === null || file === void 0 ? void 0 : file.id)) {
            this.selectedNode = null;
        }
        else {
            this.selectedNode = file;
        }
        this.contentModelFormFileHandler(this.selectedNode);
    }
    contentModelFormFileHandler(file) {
        if ((file === null || file === void 0 ? void 0 : file.id) && this.isRetrieveMetadataOptionEnabled()) {
            const values = {};
            this.nodesApi.getNode(file.id).then(acsNode => {
                var _a;
                const metadata = (_a = acsNode === null || acsNode === void 0 ? void 0 : acsNode.entry) === null || _a === void 0 ? void 0 : _a.properties;
                if (metadata) {
                    const keys = Object.keys(metadata);
                    keys.forEach(key => {
                        const sanitizedKey = key.replace(':', '_');
                        values[sanitizedKey] = metadata[key];
                    });
                    this.formService.updateFormValuesRequested.next(values);
                }
            });
        }
        this.fileClicked(new UploadWidgetContentLinkModel(file, this.field.id));
    }
    isRetrieveMetadataOptionEnabled() {
        var _a, _b;
        return ((_b = (_a = this.field) === null || _a === void 0 ? void 0 : _a.params) === null || _b === void 0 ? void 0 : _b.menuOptions) && this.field.params.menuOptions[AttachFileCloudWidgetComponent.RETRIEVE_METADATA_OPTION];
    }
    isValidAlias(alias) {
        return alias && AttachFileCloudWidgetComponent.VALID_ALIAS.includes(alias);
    }
    ngOnDestroy() {
        this.contentNodeSelectorPanelService.customModels = [];
    }
}
AttachFileCloudWidgetComponent.ɵfac = function AttachFileCloudWidgetComponent_Factory(t) { return new (t || AttachFileCloudWidgetComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FormService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.LogService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ThumbnailService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.ProcessCloudContentService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NotificationService), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.ContentCloudNodeSelectorService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.AppConfigService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.AlfrescoApiService), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.ContentNodeSelectorPanelService)); };
AttachFileCloudWidgetComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: AttachFileCloudWidgetComponent, selectors: [["adf-cloud-attach-file-cloud-widget"]], hostBindings: function AttachFileCloudWidgetComponent_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function AttachFileCloudWidgetComponent_click_HostBindingHandler($event) { return ctx.event($event); })("blur", function AttachFileCloudWidgetComponent_blur_HostBindingHandler($event) { return ctx.event($event); })("change", function AttachFileCloudWidgetComponent_change_HostBindingHandler($event) { return ctx.event($event); })("focus", function AttachFileCloudWidgetComponent_focus_HostBindingHandler($event) { return ctx.event($event); })("focusin", function AttachFileCloudWidgetComponent_focusin_HostBindingHandler($event) { return ctx.event($event); })("focusout", function AttachFileCloudWidgetComponent_focusout_HostBindingHandler($event) { return ctx.event($event); })("input", function AttachFileCloudWidgetComponent_input_HostBindingHandler($event) { return ctx.event($event); })("invalid", function AttachFileCloudWidgetComponent_invalid_HostBindingHandler($event) { return ctx.event($event); })("select", function AttachFileCloudWidgetComponent_select_HostBindingHandler($event) { return ctx.event($event); });
    } }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 12, vars: 20, consts: [[1, "adf-attach-file-widget-container"], [1, "adf-label"], [4, "ngIf"], [1, "adf-attach-widget-container"], ["class", "adf-attach-widget__menu-upload", 4, "ngIf"], ["id", "adf-attach-widget-readonly-list", 1, "adf-attach-widget-readonly-table"], [3, "uploadedFiles", "hasFile", "selectedNode", "field", "displayedColumns", "mimeTypeIcon", "rowClick", "attachFileClick", "downloadFile", "contentModelFileHandler", "removeAttachFile"], [3, "id", 4, "ngIf"], [3, "error"], [3, "required", 4, "ngIf"], [1, "adf-attach-widget__menu-upload"], ["mat-raised-button", "", "color", "primary", "matTooltipPosition", "above", "matTooltipShowDelay", "1000", 3, "id", "matTooltip", "click"], [3, "id"], [3, "required"]], template: function AttachFileCloudWidgetComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "div");
        ɵngcc0.ɵɵelementStart(2, "label", 1);
        ɵngcc0.ɵɵtext(3);
        ɵngcc0.ɵɵtemplate(4, AttachFileCloudWidgetComponent_span_4_Template, 2, 0, "span", 2);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(5, "div", 3);
        ɵngcc0.ɵɵtemplate(6, AttachFileCloudWidgetComponent_div_6_Template, 6, 6, "div", 4);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(7, "div", 5);
        ɵngcc0.ɵɵelementStart(8, "adf-cloud-file-properties-table", 6);
        ɵngcc0.ɵɵlistener("rowClick", function AttachFileCloudWidgetComponent_Template_adf_cloud_file_properties_table_rowClick_8_listener($event) { return ctx.onRowClicked($event); })("attachFileClick", function AttachFileCloudWidgetComponent_Template_adf_cloud_file_properties_table_attachFileClick_8_listener($event) { return ctx.onAttachFileClicked($event); })("downloadFile", function AttachFileCloudWidgetComponent_Template_adf_cloud_file_properties_table_downloadFile_8_listener($event) { return ctx.downloadContent($event); })("contentModelFileHandler", function AttachFileCloudWidgetComponent_Template_adf_cloud_file_properties_table_contentModelFileHandler_8_listener($event) { return ctx.contentModelFormFileHandler($event); })("removeAttachFile", function AttachFileCloudWidgetComponent_Template_adf_cloud_file_properties_table_removeAttachFile_8_listener($event) { return ctx.onRemoveAttachFile($event); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(9, AttachFileCloudWidgetComponent_div_9_Template, 3, 4, "div", 7);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(10, "error-widget", 8);
        ɵngcc0.ɵɵtemplate(11, AttachFileCloudWidgetComponent_error_widget_11_Template, 2, 3, "error-widget", 9);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵclassMapInterpolate1("adf-attach-widget ", ctx.field.className, "");
        ɵngcc0.ɵɵclassProp("adf-invalid", !ctx.field.isValid)("adf-readonly", ctx.field.readOnly);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵattribute("for", ctx.field.id);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate1("", ctx.field.name, " ");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.isRequired());
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.isUploadButtonVisible());
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("uploadedFiles", ctx.uploadedFiles)("hasFile", ctx.hasFile)("selectedNode", ctx.selectedNode)("field", ctx.field)("displayedColumns", ctx.displayedColumns)("mimeTypeIcon", ctx.mimeTypeIcon);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.hasFile && ctx.field.readOnly);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("error", ctx.field.validationSummary);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.isInvalidFieldRequired());
    } }, directives: [ɵngcc5.NgIf, ɵngcc6.FilePropertiesTableCloudComponent, ɵngcc1.ErrorWidgetComponent, ɵngcc7.MatButton, ɵngcc8.MatTooltip, ɵngcc9.MatIcon], pipes: [ɵngcc10.TranslatePipe], styles: [".adf-attach-widget-container{align-items:center;display:flex}.adf-attach-widget-container input{cursor:pointer;height:100%;opacity:0;position:absolute;right:0;top:0;width:300px;z-index:4}.adf-attach-widget__menu-upload{align-items:center;display:flex;margin-right:8px}.adf-attach-widget__menu-upload .mat-raised-button{font-size:12px;line-height:28px}.adf-attach-widget__menu-upload button span{font-size:12px}.adf-attach-widget__menu-upload button span mat-icon{height:12px;line-height:12px;width:12px}.adf-attach-widget__menu-upload button span .material-icons{font-size:18px}.adf-attach-widget__input-type{height:.1px;opacity:0;overflow:hidden;position:absolute;width:.1px;z-index:-1}.adf-attach-widget__image-logo{padding-left:5px}.adf-attach-widget-repo-button{padding-left:10px}.adf-attach-widget-repo-button .mat-button-wrapper{display:inline}.adf-attach-widget-repo-button .mat-mini-fab.mat-accent{background-color:inherit}.adf-attach-widget{background:var(--theme-colors-mat-grey);border-bottom:none;display:flex;justify-content:space-between;min-height:27px;padding:.4375em;word-break:break-all}.adf-attach-widget .adf-label{font-size:var(--theme-caption-font-size);line-height:var(--theme-headline-line-height);margin-left:8px;text-align:left;white-space:nowrap;width:32px}.adf-attach-widget__icon{cursor:pointer;float:left;padding:6px}.adf-attach-widget__reset{margin-top:-2px}.adf-attach-files-row div.mat-list-item-content{cursor:pointer}.adf-attach-files-row .mat-line{margin-bottom:0}.adf-attach-selected-file-row div.mat-list-item-content .adf-datatable-selected{color:var(--theme-primary-color);padding-right:6px}.adf-attach-file-widget-container{margin:15px}"], encapsulation: 2 });
AttachFileCloudWidgetComponent.ALIAS_ROOT_FOLDER = '-root-';
AttachFileCloudWidgetComponent.ALIAS_USER_FOLDER = '-my-';
AttachFileCloudWidgetComponent.APP_NAME = '-appname-';
AttachFileCloudWidgetComponent.VALID_ALIAS = [
    AttachFileCloudWidgetComponent.ALIAS_ROOT_FOLDER,
    AttachFileCloudWidgetComponent.ALIAS_USER_FOLDER, '-shared-'
];
AttachFileCloudWidgetComponent.RETRIEVE_METADATA_OPTION = 'retrieveMetadata';
AttachFileCloudWidgetComponent.ctorParameters = () => [
    { type: FormService },
    { type: LogService },
    { type: ThumbnailService },
    { type: ProcessCloudContentService },
    { type: NotificationService },
    { type: ContentCloudNodeSelectorService },
    { type: AppConfigService },
    { type: AlfrescoApiService },
    { type: ContentNodeSelectorPanelService }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AttachFileCloudWidgetComponent, [{
        type: Component,
        args: [{
                selector: 'adf-cloud-attach-file-cloud-widget',
                template: "<div class=\"adf-attach-file-widget-container\">\n    <div class=\"adf-attach-widget {{field.className}}\" [class.adf-invalid]=\"!field.isValid\"\n        [class.adf-readonly]=\"field.readOnly\">\n        <label class=\"adf-label\" [attr.for]=\"field.id\">{{field.name}}\n            <span *ngIf=\"isRequired()\">*</span>\n        </label>\n        <div class=\"adf-attach-widget-container\">\n            <div class=\"adf-attach-widget__menu-upload\" *ngIf=\"isUploadButtonVisible()\">\n                <button (click)=\"openSelectDialog()\" mat-raised-button color=\"primary\" [id]=\"field.id\"\n                    [matTooltip]=\"field.tooltip\" matTooltipPosition=\"above\" matTooltipShowDelay=\"1000\">\n                    {{ 'FORM.FIELD.ATTACH' | translate }}\n                    <mat-icon>{{getWidgetIcon()}}</mat-icon>\n                </button>\n            </div>\n        </div>\n    </div>\n\n    <div id=\"adf-attach-widget-readonly-list\" class=\"adf-attach-widget-readonly-table\">\n        <adf-cloud-file-properties-table\n            [uploadedFiles]=\"uploadedFiles\"\n            [hasFile]=\"hasFile\"\n            [selectedNode]=\"selectedNode\"\n            [field]=\"field\"\n            [displayedColumns]=\"displayedColumns\"\n            [mimeTypeIcon]=\"mimeTypeIcon\"\n            (rowClick)=\"onRowClicked($event)\"\n            (attachFileClick)=\"onAttachFileClicked($event)\"\n            (downloadFile)=\"downloadContent($event)\"\n            (contentModelFileHandler)=\"contentModelFormFileHandler($event)\"\n            (removeAttachFile)=\"onRemoveAttachFile($event)\"\n        ></adf-cloud-file-properties-table>\n        <div *ngIf=\"!hasFile && field.readOnly\" id=\"{{'adf-attach-empty-list-'+field.id}}\">\n            {{ 'FORM.FIELD.NO_FILE_ATTACHED' | translate }}\n        </div>\n\n    </div>\n\n    <error-widget [error]=\"field.validationSummary\"></error-widget>\n    <error-widget *ngIf=\"isInvalidFieldRequired()\" required=\"{{ 'FORM.FIELD.REQUIRED' | translate }}\"></error-widget>\n</div>\n",
                host: {
                    '(click)': 'event($event)',
                    '(blur)': 'event($event)',
                    '(change)': 'event($event)',
                    '(focus)': 'event($event)',
                    '(focusin)': 'event($event)',
                    '(focusout)': 'event($event)',
                    '(input)': 'event($event)',
                    '(invalid)': 'event($event)',
                    '(select)': 'event($event)'
                },
                encapsulation: ViewEncapsulation.None,
                styles: [".adf-attach-widget-container{align-items:center;display:flex}.adf-attach-widget-container input{cursor:pointer;height:100%;opacity:0;position:absolute;right:0;top:0;width:300px;z-index:4}.adf-attach-widget__menu-upload{align-items:center;display:flex;margin-right:8px}.adf-attach-widget__menu-upload .mat-raised-button{font-size:12px;line-height:28px}.adf-attach-widget__menu-upload button span{font-size:12px}.adf-attach-widget__menu-upload button span mat-icon{height:12px;line-height:12px;width:12px}.adf-attach-widget__menu-upload button span .material-icons{font-size:18px}.adf-attach-widget__input-type{height:.1px;opacity:0;overflow:hidden;position:absolute;width:.1px;z-index:-1}.adf-attach-widget__image-logo{padding-left:5px}.adf-attach-widget-repo-button{padding-left:10px}.adf-attach-widget-repo-button .mat-button-wrapper{display:inline}.adf-attach-widget-repo-button .mat-mini-fab.mat-accent{background-color:inherit}.adf-attach-widget{background:var(--theme-colors-mat-grey);border-bottom:none;display:flex;justify-content:space-between;min-height:27px;padding:.4375em;word-break:break-all}.adf-attach-widget .adf-label{font-size:var(--theme-caption-font-size);line-height:var(--theme-headline-line-height);margin-left:8px;text-align:left;white-space:nowrap;width:32px}.adf-attach-widget__icon{cursor:pointer;float:left;padding:6px}.adf-attach-widget__reset{margin-top:-2px}.adf-attach-files-row div.mat-list-item-content{cursor:pointer}.adf-attach-files-row .mat-line{margin-bottom:0}.adf-attach-selected-file-row div.mat-list-item-content .adf-datatable-selected{color:var(--theme-primary-color);padding-right:6px}.adf-attach-file-widget-container{margin:15px}"]
            }]
    }], function () { return [{ type: ɵngcc1.FormService }, { type: ɵngcc1.LogService }, { type: ɵngcc1.ThumbnailService }, { type: ɵngcc2.ProcessCloudContentService }, { type: ɵngcc1.NotificationService }, { type: ɵngcc3.ContentCloudNodeSelectorService }, { type: ɵngcc1.AppConfigService }, { type: ɵngcc1.AlfrescoApiService }, { type: ɵngcc4.ContentNodeSelectorPanelService }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,