import { __awaiter } from "tslib";
import { Injectable } from '@angular/core';
import { throwError, from } from 'rxjs';
import { catchError, map } from 'rxjs/operators';
import { AlfrescoApiService, LogService, ContentService, DownloadService } from '@alfresco/adf-core';
import { AuthenticationApi, UploadApi } from '@alfresco/js-api';
import * as i0 from "@angular/core";
import * as i1 from "@alfresco/adf-core";
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@alfresco/adf-core';
export class ProcessCloudContentService {
    constructor(apiService, logService, contentService, downloadService) {
        this.apiService = apiService;
        this.logService = logService;
        this.contentService = contentService;
        this.downloadService = downloadService;
    }
    get uploadApi() {
        var _a;
        this._uploadApi = (_a = this._uploadApi) !== null && _a !== void 0 ? _a : new UploadApi(this.apiService.getInstance());
        return this._uploadApi;
    }
    get authenticationApi() {
        var _a;
        this._authenticationApi = (_a = this._authenticationApi) !== null && _a !== void 0 ? _a : new AuthenticationApi(this.apiService.getInstance());
        return this._authenticationApi;
    }
    createTemporaryRawRelatedContent(file, nodeId) {
        return from(this.uploadApi.uploadFile(file, '', nodeId, '', { overwrite: true })).pipe(map((res) => {
            return Object.assign(Object.assign({}, res.entry), { nodeId: res.entry.id });
        }), catchError(err => this.handleError(err)));
    }
    getRawContentNode(nodeId) {
        return this.contentService.getNodeContent(nodeId);
    }
    downloadNodeContent(blob, fileName) {
        this.contentService.downloadBlob(blob, fileName);
    }
    downloadFile(nodeId) {
        return __awaiter(this, void 0, void 0, function* () {
            const ticket = yield this.getAuthTicket();
            const url = this.contentService.getContentUrl(nodeId, true, ticket);
            this.downloadService.downloadUrl(url, nodeId);
        });
    }
    getAuthTicket() {
        return __awaiter(this, void 0, void 0, function* () {
            const ticket = yield this.authenticationApi.getTicket();
            if (ticket && ticket.entry) {
                return ticket.entry.id || '';
            }
            return '';
        });
    }
    handleError(error) {
        this.logService.error(error);
        return throwError(error || 'Server error');
    }
}
ProcessCloudContentService.ɵfac = function ProcessCloudContentService_Factory(t) { return new (t || ProcessCloudContentService)(ɵngcc0.ɵɵinject(ɵngcc1.AlfrescoApiService), ɵngcc0.ɵɵinject(ɵngcc1.LogService), ɵngcc0.ɵɵinject(ɵngcc1.ContentService), ɵngcc0.ɵɵinject(ɵngcc1.DownloadService)); };
ProcessCloudContentService.ɵprov = i0.ɵɵdefineInjectable({ factory: function ProcessCloudContentService_Factory() { return new ProcessCloudContentService(i0.ɵɵinject(i1.AlfrescoApiService), i0.ɵɵinject(i1.LogService), i0.ɵɵinject(i1.ContentService), i0.ɵɵinject(i1.DownloadService)); }, token: ProcessCloudContentService, providedIn: "root" });
ProcessCloudContentService.ctorParameters = () => [
    { type: AlfrescoApiService },
    { type: LogService },
    { type: ContentService },
    { type: DownloadService }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ProcessCloudContentService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc1.AlfrescoApiService }, { type: ɵngcc1.LogService }, { type: ɵngcc1.ContentService }, { type: ɵngcc1.DownloadService }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvY2Vzcy1jbG91ZC1jb250ZW50LnNlcnZpY2UuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL2hvbWUvdHJhdmlzL2J1aWxkL0FsZnJlc2NvL2FsZnJlc2NvLW5nMi1jb21wb25lbnRzL2xpYi9wcm9jZXNzLXNlcnZpY2VzLWNsb3VkL3NyYy9saWIvZm9ybS9zZXJ2aWNlcy9wcm9jZXNzLWNsb3VkLWNvbnRlbnQuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBaUJBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLFVBQVUsRUFBYyxJQUFJLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDcEQsT0FBTyxFQUFFLFVBQVUsRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNqRCxPQUFPLEVBQ0gsa0JBQWtCLEVBQ2xCLFVBQVUsRUFDVixjQUFjLEVBQ2QsZUFBZSxFQUNsQixNQUFNLG9CQUFvQixDQUFDO0FBQzVCLE9BQU8sRUFBRSxpQkFBaUIsRUFBUSxTQUFTLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUN0RTtBQUVzQjs7O0FBRXRCLE1BQU0sT0FBTywwQkFBMEI7QUFDdkMsSUFhSSxZQUNZLFVBQThCLEVBQzlCLFVBQXNCLEVBQ3ZCLGNBQThCLEVBQzdCLGVBQWdDO0FBQzdDLFFBSmEsZUFBVSxHQUFWLFVBQVUsQ0FBb0I7QUFBQyxRQUMvQixlQUFVLEdBQVYsVUFBVSxDQUFZO0FBQUMsUUFDeEIsbUJBQWMsR0FBZCxjQUFjLENBQWdCO0FBQUMsUUFDOUIsb0JBQWUsR0FBZixlQUFlLENBQWlCO0FBQ2hELElBQ0ksQ0FBQztBQUNMLElBbEJJLElBQUksU0FBUztBQUFLO0FBQ2pCLFFBQUcsSUFBSSxDQUFDLFVBQVUsU0FBRyxJQUFJLENBQUMsVUFBVSxtQ0FBSSxJQUFJLFNBQVMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUM7QUFDMUYsUUFBUSxPQUFPLElBQUksQ0FBQyxVQUFVLENBQUM7QUFDL0IsSUFBSSxDQUFDO0FBQ0wsSUFFSSxJQUFJLGlCQUFpQjtBQUFLO0FBQWdCLFFBQ3RDLElBQUksQ0FBQyxrQkFBa0IsU0FBRyxJQUFJLENBQUMsa0JBQWtCLG1DQUFJLElBQUksaUJBQWlCLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDO0FBQ2xILFFBQVEsT0FBTyxJQUFJLENBQUMsa0JBQWtCLENBQUM7QUFDdkMsSUFBSSxDQUFDO0FBQ0wsSUFTSSxnQ0FBZ0MsQ0FDNUIsSUFBVSxFQUNWLE1BQWM7QUFDbkIsUUFFSyxPQUFPLElBQUksQ0FDUCxJQUFJLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQUUsRUFBRSxFQUFFLE1BQU0sRUFBRSxFQUFFLEVBQUUsRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FDdkUsQ0FBQyxJQUFJLENBQ0YsR0FBRyxDQUFDLENBQUMsR0FBUSxFQUFFLEVBQUU7QUFDN0IsWUFBZ0IsdUNBQ08sR0FBRyxDQUFDLEtBQUssS0FDWixNQUFNLEVBQUUsR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFFLElBQ3RCO0FBQ2xCLFFBQVksQ0FBQyxDQUFDLEVBQ0YsVUFBVSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUMzQyxDQUFDO0FBQ1YsSUFBSSxDQUFDO0FBQ0wsSUFDSSxpQkFBaUIsQ0FBQyxNQUFjO0FBQUksUUFDaEMsT0FBTyxJQUFJLENBQUMsY0FBYyxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUMxRCxJQUFJLENBQUM7QUFDTCxJQUNJLG1CQUFtQixDQUFDLElBQVUsRUFBRSxRQUFnQjtBQUFJLFFBQ2hELElBQUksQ0FBQyxjQUFjLENBQUMsWUFBWSxDQUFDLElBQUksRUFBRSxRQUFRLENBQUMsQ0FBQztBQUN6RCxJQUFJLENBQUM7QUFDTCxJQUNVLFlBQVksQ0FBQyxNQUFjO0FBQ3JDO0FBRVUsWUFERixNQUFNLE1BQU0sR0FBRyxNQUFNLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztBQUNsRCxZQUFRLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsYUFBYSxDQUFDLE1BQU0sRUFBRSxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUM7QUFDNUUsWUFDUSxJQUFJLENBQUMsZUFBZSxDQUFDLFdBQVcsQ0FBQyxHQUFHLEVBQUUsTUFBTSxDQUFDLENBQUM7QUFDdEQsUUFBSSxDQUFDO0FBRUosS0FGSTtBQUNMLElBQ1UsYUFBYTtBQUFLO0FBQ2lCLFlBQXJDLE1BQU0sTUFBTSxHQUFHLE1BQU0sSUFBSSxDQUFDLGlCQUFpQixDQUFDLFNBQVMsRUFBRSxDQUFDO0FBQ2hFLFlBQ1EsSUFBSSxNQUFNLElBQUksTUFBTSxDQUFDLEtBQUssRUFBRTtBQUNwQyxnQkFBWSxPQUFPLE1BQU0sQ0FBQyxLQUFLLENBQUMsRUFBRSxJQUFJLEVBQUUsQ0FBQztBQUN6QyxhQUFTO0FBQ1QsWUFDUSxPQUFPLEVBQUUsQ0FBQztBQUNsQixRQUFJLENBQUM7QUFFSixLQUZJO0FBQ0wsSUFDWSxXQUFXLENBQUMsS0FBVTtBQUNsQyxRQUFRLElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ3JDLFFBQVEsT0FBTyxVQUFVLENBQUMsS0FBSyxJQUFJLGNBQWMsQ0FBQyxDQUFDO0FBQ25ELElBQUksQ0FBQztBQUNMO29TQUFDO0FBQ0Qsd1ZBdkVLO0FBQUM7RUFITCxVQUFVLFNBQUMsckJBS0csWUFaWCxrQkFBa0I7S0FRbEIsVUFBVSxFQUFFLE1BQU0sdkJBUHBCLFlBQUUsVUFBVTtXQVFiLFhBUEMsWUFBRSxjQUFjO0FBQ2hCLFlBQUUsZUFBZTtBQUNqQjs7Ozs7O21MQUFFO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyB0aHJvd0Vycm9yLCBPYnNlcnZhYmxlLCBmcm9tIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBjYXRjaEVycm9yLCBtYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQge1xuICAgIEFsZnJlc2NvQXBpU2VydmljZSxcbiAgICBMb2dTZXJ2aWNlLFxuICAgIENvbnRlbnRTZXJ2aWNlLFxuICAgIERvd25sb2FkU2VydmljZVxufSBmcm9tICdAYWxmcmVzY28vYWRmLWNvcmUnO1xuaW1wb3J0IHsgQXV0aGVudGljYXRpb25BcGksIE5vZGUsIFVwbG9hZEFwaSB9IGZyb20gJ0BhbGZyZXNjby9qcy1hcGknO1xuXG5ASW5qZWN0YWJsZSh7XG4gICAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIFByb2Nlc3NDbG91ZENvbnRlbnRTZXJ2aWNlIHtcblxuICAgIHByaXZhdGUgX3VwbG9hZEFwaTtcbiAgICBnZXQgdXBsb2FkQXBpKCk6IFVwbG9hZEFwaSB7XG4gICAgICAgIHRoaXMuX3VwbG9hZEFwaSA9IHRoaXMuX3VwbG9hZEFwaSA/PyBuZXcgVXBsb2FkQXBpKHRoaXMuYXBpU2VydmljZS5nZXRJbnN0YW5jZSgpKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3VwbG9hZEFwaTtcbiAgICB9XG5cbiAgICBwcml2YXRlIF9hdXRoZW50aWNhdGlvbkFwaTtcbiAgICBnZXQgYXV0aGVudGljYXRpb25BcGkoKTogQXV0aGVudGljYXRpb25BcGkge1xuICAgICAgICB0aGlzLl9hdXRoZW50aWNhdGlvbkFwaSA9IHRoaXMuX2F1dGhlbnRpY2F0aW9uQXBpID8/IG5ldyBBdXRoZW50aWNhdGlvbkFwaSh0aGlzLmFwaVNlcnZpY2UuZ2V0SW5zdGFuY2UoKSk7XG4gICAgICAgIHJldHVybiB0aGlzLl9hdXRoZW50aWNhdGlvbkFwaTtcbiAgICB9XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHJpdmF0ZSBhcGlTZXJ2aWNlOiBBbGZyZXNjb0FwaVNlcnZpY2UsXG4gICAgICAgIHByaXZhdGUgbG9nU2VydmljZTogTG9nU2VydmljZSxcbiAgICAgICAgcHVibGljIGNvbnRlbnRTZXJ2aWNlOiBDb250ZW50U2VydmljZSxcbiAgICAgICAgcHJpdmF0ZSBkb3dubG9hZFNlcnZpY2U6IERvd25sb2FkU2VydmljZVxuICAgICkge1xuICAgIH1cblxuICAgIGNyZWF0ZVRlbXBvcmFyeVJhd1JlbGF0ZWRDb250ZW50KFxuICAgICAgICBmaWxlOiBGaWxlLFxuICAgICAgICBub2RlSWQ6IHN0cmluZ1xuICAgICk6IE9ic2VydmFibGU8Tm9kZT4ge1xuXG4gICAgICAgIHJldHVybiBmcm9tKFxuICAgICAgICAgICAgdGhpcy51cGxvYWRBcGkudXBsb2FkRmlsZShmaWxlLCAnJywgbm9kZUlkLCAnJywgeyBvdmVyd3JpdGU6IHRydWUgfSlcbiAgICAgICAgKS5waXBlKFxuICAgICAgICAgICAgbWFwKChyZXM6IGFueSkgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIC4uLnJlcy5lbnRyeSxcbiAgICAgICAgICAgICAgICAgICAgbm9kZUlkOiByZXMuZW50cnkuaWRcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBjYXRjaEVycm9yKGVyciA9PiB0aGlzLmhhbmRsZUVycm9yKGVycikpXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgZ2V0UmF3Q29udGVudE5vZGUobm9kZUlkOiBzdHJpbmcpOiBPYnNlcnZhYmxlPEJsb2I+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29udGVudFNlcnZpY2UuZ2V0Tm9kZUNvbnRlbnQobm9kZUlkKTtcbiAgICB9XG5cbiAgICBkb3dubG9hZE5vZGVDb250ZW50KGJsb2I6IEJsb2IsIGZpbGVOYW1lOiBzdHJpbmcpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5jb250ZW50U2VydmljZS5kb3dubG9hZEJsb2IoYmxvYiwgZmlsZU5hbWUpO1xuICAgIH1cblxuICAgIGFzeW5jIGRvd25sb2FkRmlsZShub2RlSWQ6IHN0cmluZykge1xuXG4gICAgICAgIGNvbnN0IHRpY2tldCA9IGF3YWl0IHRoaXMuZ2V0QXV0aFRpY2tldCgpO1xuICAgICAgICBjb25zdCB1cmwgPSB0aGlzLmNvbnRlbnRTZXJ2aWNlLmdldENvbnRlbnRVcmwobm9kZUlkLCB0cnVlLCB0aWNrZXQpO1xuXG4gICAgICAgIHRoaXMuZG93bmxvYWRTZXJ2aWNlLmRvd25sb2FkVXJsKHVybCwgbm9kZUlkKTtcbiAgICB9XG5cbiAgICBhc3luYyBnZXRBdXRoVGlja2V0KCk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgICAgIGNvbnN0IHRpY2tldCA9IGF3YWl0IHRoaXMuYXV0aGVudGljYXRpb25BcGkuZ2V0VGlja2V0KCk7XG5cbiAgICAgICAgaWYgKHRpY2tldCAmJiB0aWNrZXQuZW50cnkpIHtcbiAgICAgICAgICAgIHJldHVybiB0aWNrZXQuZW50cnkuaWQgfHwgJyc7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gJyc7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBoYW5kbGVFcnJvcihlcnJvcjogYW55KSB7XG4gICAgICAgIHRoaXMubG9nU2VydmljZS5lcnJvcihlcnJvcik7XG4gICAgICAgIHJldHVybiB0aHJvd0Vycm9yKGVycm9yIHx8ICdTZXJ2ZXIgZXJyb3InKTtcbiAgICB9XG59XG4iXX0=