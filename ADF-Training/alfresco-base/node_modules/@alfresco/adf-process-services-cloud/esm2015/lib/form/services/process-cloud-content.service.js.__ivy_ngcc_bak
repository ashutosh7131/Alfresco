import { __awaiter } from "tslib";
import { Injectable } from '@angular/core';
import { throwError, from } from 'rxjs';
import { catchError, map } from 'rxjs/operators';
import { AlfrescoApiService, LogService, ContentService, DownloadService } from '@alfresco/adf-core';
import { AuthenticationApi, UploadApi } from '@alfresco/js-api';
import * as i0 from "@angular/core";
import * as i1 from "@alfresco/adf-core";
export class ProcessCloudContentService {
    constructor(apiService, logService, contentService, downloadService) {
        this.apiService = apiService;
        this.logService = logService;
        this.contentService = contentService;
        this.downloadService = downloadService;
    }
    get uploadApi() {
        var _a;
        this._uploadApi = (_a = this._uploadApi) !== null && _a !== void 0 ? _a : new UploadApi(this.apiService.getInstance());
        return this._uploadApi;
    }
    get authenticationApi() {
        var _a;
        this._authenticationApi = (_a = this._authenticationApi) !== null && _a !== void 0 ? _a : new AuthenticationApi(this.apiService.getInstance());
        return this._authenticationApi;
    }
    createTemporaryRawRelatedContent(file, nodeId) {
        return from(this.uploadApi.uploadFile(file, '', nodeId, '', { overwrite: true })).pipe(map((res) => {
            return Object.assign(Object.assign({}, res.entry), { nodeId: res.entry.id });
        }), catchError(err => this.handleError(err)));
    }
    getRawContentNode(nodeId) {
        return this.contentService.getNodeContent(nodeId);
    }
    downloadNodeContent(blob, fileName) {
        this.contentService.downloadBlob(blob, fileName);
    }
    downloadFile(nodeId) {
        return __awaiter(this, void 0, void 0, function* () {
            const ticket = yield this.getAuthTicket();
            const url = this.contentService.getContentUrl(nodeId, true, ticket);
            this.downloadService.downloadUrl(url, nodeId);
        });
    }
    getAuthTicket() {
        return __awaiter(this, void 0, void 0, function* () {
            const ticket = yield this.authenticationApi.getTicket();
            if (ticket && ticket.entry) {
                return ticket.entry.id || '';
            }
            return '';
        });
    }
    handleError(error) {
        this.logService.error(error);
        return throwError(error || 'Server error');
    }
}
ProcessCloudContentService.ɵprov = i0.ɵɵdefineInjectable({ factory: function ProcessCloudContentService_Factory() { return new ProcessCloudContentService(i0.ɵɵinject(i1.AlfrescoApiService), i0.ɵɵinject(i1.LogService), i0.ɵɵinject(i1.ContentService), i0.ɵɵinject(i1.DownloadService)); }, token: ProcessCloudContentService, providedIn: "root" });
ProcessCloudContentService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
ProcessCloudContentService.ctorParameters = () => [
    { type: AlfrescoApiService },
    { type: LogService },
    { type: ContentService },
    { type: DownloadService }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvY2Vzcy1jbG91ZC1jb250ZW50LnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiL2hvbWUvdHJhdmlzL2J1aWxkL0FsZnJlc2NvL2FsZnJlc2NvLW5nMi1jb21wb25lbnRzL2xpYi9wcm9jZXNzLXNlcnZpY2VzLWNsb3VkL3NyYy8iLCJzb3VyY2VzIjpbImxpYi9mb3JtL3NlcnZpY2VzL3Byb2Nlc3MtY2xvdWQtY29udGVudC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFpQkEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsVUFBVSxFQUFjLElBQUksRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUNwRCxPQUFPLEVBQUUsVUFBVSxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ2pELE9BQU8sRUFDSCxrQkFBa0IsRUFDbEIsVUFBVSxFQUNWLGNBQWMsRUFDZCxlQUFlLEVBQ2xCLE1BQU0sb0JBQW9CLENBQUM7QUFDNUIsT0FBTyxFQUFFLGlCQUFpQixFQUFRLFNBQVMsRUFBRSxNQUFNLGtCQUFrQixDQUFDOzs7QUFLdEUsTUFBTSxPQUFPLDBCQUEwQjtJQWNuQyxZQUNZLFVBQThCLEVBQzlCLFVBQXNCLEVBQ3ZCLGNBQThCLEVBQzdCLGVBQWdDO1FBSGhDLGVBQVUsR0FBVixVQUFVLENBQW9CO1FBQzlCLGVBQVUsR0FBVixVQUFVLENBQVk7UUFDdkIsbUJBQWMsR0FBZCxjQUFjLENBQWdCO1FBQzdCLG9CQUFlLEdBQWYsZUFBZSxDQUFpQjtJQUU1QyxDQUFDO0lBakJELElBQUksU0FBUzs7UUFDVCxJQUFJLENBQUMsVUFBVSxTQUFHLElBQUksQ0FBQyxVQUFVLG1DQUFJLElBQUksU0FBUyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQztRQUNsRixPQUFPLElBQUksQ0FBQyxVQUFVLENBQUM7SUFDM0IsQ0FBQztJQUdELElBQUksaUJBQWlCOztRQUNqQixJQUFJLENBQUMsa0JBQWtCLFNBQUcsSUFBSSxDQUFDLGtCQUFrQixtQ0FBSSxJQUFJLGlCQUFpQixDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQztRQUMxRyxPQUFPLElBQUksQ0FBQyxrQkFBa0IsQ0FBQztJQUNuQyxDQUFDO0lBVUQsZ0NBQWdDLENBQzVCLElBQVUsRUFDVixNQUFjO1FBR2QsT0FBTyxJQUFJLENBQ1AsSUFBSSxDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFLEVBQUUsRUFBRSxNQUFNLEVBQUUsRUFBRSxFQUFFLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxDQUFDLENBQ3ZFLENBQUMsSUFBSSxDQUNGLEdBQUcsQ0FBQyxDQUFDLEdBQVEsRUFBRSxFQUFFO1lBQ2IsdUNBQ08sR0FBRyxDQUFDLEtBQUssS0FDWixNQUFNLEVBQUUsR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFFLElBQ3RCO1FBQ04sQ0FBQyxDQUFDLEVBQ0YsVUFBVSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUMzQyxDQUFDO0lBQ04sQ0FBQztJQUVELGlCQUFpQixDQUFDLE1BQWM7UUFDNUIsT0FBTyxJQUFJLENBQUMsY0FBYyxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUN0RCxDQUFDO0lBRUQsbUJBQW1CLENBQUMsSUFBVSxFQUFFLFFBQWdCO1FBQzVDLElBQUksQ0FBQyxjQUFjLENBQUMsWUFBWSxDQUFDLElBQUksRUFBRSxRQUFRLENBQUMsQ0FBQztJQUNyRCxDQUFDO0lBRUssWUFBWSxDQUFDLE1BQWM7O1lBRTdCLE1BQU0sTUFBTSxHQUFHLE1BQU0sSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO1lBQzFDLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsYUFBYSxDQUFDLE1BQU0sRUFBRSxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUM7WUFFcEUsSUFBSSxDQUFDLGVBQWUsQ0FBQyxXQUFXLENBQUMsR0FBRyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQ2xELENBQUM7S0FBQTtJQUVLLGFBQWE7O1lBQ2YsTUFBTSxNQUFNLEdBQUcsTUFBTSxJQUFJLENBQUMsaUJBQWlCLENBQUMsU0FBUyxFQUFFLENBQUM7WUFFeEQsSUFBSSxNQUFNLElBQUksTUFBTSxDQUFDLEtBQUssRUFBRTtnQkFDeEIsT0FBTyxNQUFNLENBQUMsS0FBSyxDQUFDLEVBQUUsSUFBSSxFQUFFLENBQUM7YUFDaEM7WUFFRCxPQUFPLEVBQUUsQ0FBQztRQUNkLENBQUM7S0FBQTtJQUVPLFdBQVcsQ0FBQyxLQUFVO1FBQzFCLElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzdCLE9BQU8sVUFBVSxDQUFDLEtBQUssSUFBSSxjQUFjLENBQUMsQ0FBQztJQUMvQyxDQUFDOzs7O1lBeEVKLFVBQVUsU0FBQztnQkFDUixVQUFVLEVBQUUsTUFBTTthQUNyQjs7O1lBVEcsa0JBQWtCO1lBQ2xCLFVBQVU7WUFDVixjQUFjO1lBQ2QsZUFBZSIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IHRocm93RXJyb3IsIE9ic2VydmFibGUsIGZyb20gfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IGNhdGNoRXJyb3IsIG1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7XG4gICAgQWxmcmVzY29BcGlTZXJ2aWNlLFxuICAgIExvZ1NlcnZpY2UsXG4gICAgQ29udGVudFNlcnZpY2UsXG4gICAgRG93bmxvYWRTZXJ2aWNlXG59IGZyb20gJ0BhbGZyZXNjby9hZGYtY29yZSc7XG5pbXBvcnQgeyBBdXRoZW50aWNhdGlvbkFwaSwgTm9kZSwgVXBsb2FkQXBpIH0gZnJvbSAnQGFsZnJlc2NvL2pzLWFwaSc7XG5cbkBJbmplY3RhYmxlKHtcbiAgICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgUHJvY2Vzc0Nsb3VkQ29udGVudFNlcnZpY2Uge1xuXG4gICAgcHJpdmF0ZSBfdXBsb2FkQXBpO1xuICAgIGdldCB1cGxvYWRBcGkoKTogVXBsb2FkQXBpIHtcbiAgICAgICAgdGhpcy5fdXBsb2FkQXBpID0gdGhpcy5fdXBsb2FkQXBpID8/IG5ldyBVcGxvYWRBcGkodGhpcy5hcGlTZXJ2aWNlLmdldEluc3RhbmNlKCkpO1xuICAgICAgICByZXR1cm4gdGhpcy5fdXBsb2FkQXBpO1xuICAgIH1cblxuICAgIHByaXZhdGUgX2F1dGhlbnRpY2F0aW9uQXBpO1xuICAgIGdldCBhdXRoZW50aWNhdGlvbkFwaSgpOiBBdXRoZW50aWNhdGlvbkFwaSB7XG4gICAgICAgIHRoaXMuX2F1dGhlbnRpY2F0aW9uQXBpID0gdGhpcy5fYXV0aGVudGljYXRpb25BcGkgPz8gbmV3IEF1dGhlbnRpY2F0aW9uQXBpKHRoaXMuYXBpU2VydmljZS5nZXRJbnN0YW5jZSgpKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2F1dGhlbnRpY2F0aW9uQXBpO1xuICAgIH1cblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBwcml2YXRlIGFwaVNlcnZpY2U6IEFsZnJlc2NvQXBpU2VydmljZSxcbiAgICAgICAgcHJpdmF0ZSBsb2dTZXJ2aWNlOiBMb2dTZXJ2aWNlLFxuICAgICAgICBwdWJsaWMgY29udGVudFNlcnZpY2U6IENvbnRlbnRTZXJ2aWNlLFxuICAgICAgICBwcml2YXRlIGRvd25sb2FkU2VydmljZTogRG93bmxvYWRTZXJ2aWNlXG4gICAgKSB7XG4gICAgfVxuXG4gICAgY3JlYXRlVGVtcG9yYXJ5UmF3UmVsYXRlZENvbnRlbnQoXG4gICAgICAgIGZpbGU6IEZpbGUsXG4gICAgICAgIG5vZGVJZDogc3RyaW5nXG4gICAgKTogT2JzZXJ2YWJsZTxOb2RlPiB7XG5cbiAgICAgICAgcmV0dXJuIGZyb20oXG4gICAgICAgICAgICB0aGlzLnVwbG9hZEFwaS51cGxvYWRGaWxlKGZpbGUsICcnLCBub2RlSWQsICcnLCB7IG92ZXJ3cml0ZTogdHJ1ZSB9KVxuICAgICAgICApLnBpcGUoXG4gICAgICAgICAgICBtYXAoKHJlczogYW55KSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgLi4ucmVzLmVudHJ5LFxuICAgICAgICAgICAgICAgICAgICBub2RlSWQ6IHJlcy5lbnRyeS5pZFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIGNhdGNoRXJyb3IoZXJyID0+IHRoaXMuaGFuZGxlRXJyb3IoZXJyKSlcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBnZXRSYXdDb250ZW50Tm9kZShub2RlSWQ6IHN0cmluZyk6IE9ic2VydmFibGU8QmxvYj4ge1xuICAgICAgICByZXR1cm4gdGhpcy5jb250ZW50U2VydmljZS5nZXROb2RlQ29udGVudChub2RlSWQpO1xuICAgIH1cblxuICAgIGRvd25sb2FkTm9kZUNvbnRlbnQoYmxvYjogQmxvYiwgZmlsZU5hbWU6IHN0cmluZyk6IHZvaWQge1xuICAgICAgICB0aGlzLmNvbnRlbnRTZXJ2aWNlLmRvd25sb2FkQmxvYihibG9iLCBmaWxlTmFtZSk7XG4gICAgfVxuXG4gICAgYXN5bmMgZG93bmxvYWRGaWxlKG5vZGVJZDogc3RyaW5nKSB7XG5cbiAgICAgICAgY29uc3QgdGlja2V0ID0gYXdhaXQgdGhpcy5nZXRBdXRoVGlja2V0KCk7XG4gICAgICAgIGNvbnN0IHVybCA9IHRoaXMuY29udGVudFNlcnZpY2UuZ2V0Q29udGVudFVybChub2RlSWQsIHRydWUsIHRpY2tldCk7XG5cbiAgICAgICAgdGhpcy5kb3dubG9hZFNlcnZpY2UuZG93bmxvYWRVcmwodXJsLCBub2RlSWQpO1xuICAgIH1cblxuICAgIGFzeW5jIGdldEF1dGhUaWNrZXQoKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICAgICAgY29uc3QgdGlja2V0ID0gYXdhaXQgdGhpcy5hdXRoZW50aWNhdGlvbkFwaS5nZXRUaWNrZXQoKTtcblxuICAgICAgICBpZiAodGlja2V0ICYmIHRpY2tldC5lbnRyeSkge1xuICAgICAgICAgICAgcmV0dXJuIHRpY2tldC5lbnRyeS5pZCB8fCAnJztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAnJztcbiAgICB9XG5cbiAgICBwcml2YXRlIGhhbmRsZUVycm9yKGVycm9yOiBhbnkpIHtcbiAgICAgICAgdGhpcy5sb2dTZXJ2aWNlLmVycm9yKGVycm9yKTtcbiAgICAgICAgcmV0dXJuIHRocm93RXJyb3IoZXJyb3IgfHwgJ1NlcnZlciBlcnJvcicpO1xuICAgIH1cbn1cbiJdfQ==