import { __awaiter } from "tslib";
import { Injectable } from '@angular/core';
import { AlfrescoApiService, LogService, NotificationService } from '@alfresco/adf-core';
import { MatDialog } from '@angular/material/dialog';
import { ContentNodeSelectorComponent, NodeAction } from '@alfresco/adf-content-services';
import { NodesApi } from '@alfresco/js-api';
import { from, Subject, throwError } from 'rxjs';
import { catchError, map, mapTo } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@alfresco/adf-core";
import * as i2 from "@angular/material/dialog";
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@alfresco/adf-core';
import * as ɵngcc2 from '@angular/material/dialog';
export class ContentCloudNodeSelectorService {
    constructor(apiService, notificationService, logService, dialog) {
        this.apiService = apiService;
        this.notificationService = notificationService;
        this.logService = logService;
        this.dialog = dialog;
        this.sourceNodeNotFound = false;
    }
    get nodesApi() {
        var _a;
        this._nodesApi = (_a = this._nodesApi) !== null && _a !== void 0 ? _a : new NodesApi(this.apiService.getInstance());
        return this._nodesApi;
    }
    openUploadFileDialog(currentFolderId, selectionMode, isAllFileSources, restrictRootToCurrentFolderId) {
        const select = new Subject();
        select.subscribe({ complete: this.close.bind(this) });
        const data = {
            title: 'Select a file',
            actionName: NodeAction.ATTACH,
            currentFolderId,
            restrictRootToCurrentFolderId,
            select,
            selectionMode,
            isSelectionValid: (entry) => entry.isFile,
            showFilesInResult: true,
            showDropdownSiteList: false,
            showLocalUploadButton: isAllFileSources
        };
        this.openContentNodeDialog(data, 'adf-content-node-selector-dialog', '66%');
        return select;
    }
    getNodeIdFromPath(destinationFolderPath) {
        return __awaiter(this, void 0, void 0, function* () {
            if (destinationFolderPath.alias && destinationFolderPath.path) {
                try {
                    return yield this.getNodeId(destinationFolderPath.alias, destinationFolderPath.path).toPromise();
                }
                catch (error) {
                    this.logService.error(error);
                }
            }
            return this.getNodeId(destinationFolderPath.alias).toPromise();
        });
    }
    getNodeIdFromFolderVariableValue(variableValue, defaultAlias) {
        return __awaiter(this, void 0, void 0, function* () {
            const isExistingNode = yield this.isExistingNode(variableValue);
            return isExistingNode ? variableValue : this.getNodeId(defaultAlias).toPromise();
        });
    }
    isExistingNode(nodeId) {
        return __awaiter(this, void 0, void 0, function* () {
            let isExistingNode = false;
            if (nodeId) {
                try {
                    isExistingNode = yield this.getNodeId(nodeId).pipe(mapTo(true)).toPromise();
                }
                catch (error) {
                    this.logService.error(error);
                }
            }
            return isExistingNode;
        });
    }
    getNodeId(nodeId, relativePath) {
        let opts;
        if (relativePath) {
            opts = { relativePath };
        }
        return from(this.nodesApi.getNode(nodeId, opts)).pipe(map((nodeEntry) => nodeEntry.entry.id), catchError((error) => {
            this.sourceNodeNotFound = true;
            return this.handleError(error);
        }));
    }
    openContentNodeDialog(data, currentPanelClass, chosenWidth) {
        const contentNodeDialog = this.dialog.open(ContentNodeSelectorComponent, { data, panelClass: currentPanelClass, width: chosenWidth });
        contentNodeDialog.afterOpened().subscribe(() => {
            if (this.sourceNodeNotFound) {
                this.notificationService.showWarning('ADF_CLOUD_TASK_FORM.ERROR.DESTINATION_FOLDER_PATH_ERROR');
            }
        });
        contentNodeDialog.afterClosed().subscribe(() => {
            this.sourceNodeNotFound = false;
        });
    }
    close() {
        this.dialog.closeAll();
    }
    handleError(error) {
        return throwError(error || 'Server error');
    }
}
ContentCloudNodeSelectorService.ɵfac = function ContentCloudNodeSelectorService_Factory(t) { return new (t || ContentCloudNodeSelectorService)(ɵngcc0.ɵɵinject(ɵngcc1.AlfrescoApiService), ɵngcc0.ɵɵinject(ɵngcc1.NotificationService), ɵngcc0.ɵɵinject(ɵngcc1.LogService), ɵngcc0.ɵɵinject(ɵngcc2.MatDialog)); };
ContentCloudNodeSelectorService.ɵprov = i0.ɵɵdefineInjectable({ factory: function ContentCloudNodeSelectorService_Factory() { return new ContentCloudNodeSelectorService(i0.ɵɵinject(i1.AlfrescoApiService), i0.ɵɵinject(i1.NotificationService), i0.ɵɵinject(i1.LogService), i0.ɵɵinject(i2.MatDialog)); }, token: ContentCloudNodeSelectorService, providedIn: "root" });
ContentCloudNodeSelectorService.ctorParameters = () => [
    { type: AlfrescoApiService },
    { type: NotificationService },
    { type: LogService },
    { type: MatDialog }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ContentCloudNodeSelectorService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc1.AlfrescoApiService }, { type: ɵngcc1.NotificationService }, { type: ɵngcc1.LogService }, { type: ɵngcc2.MatDialog }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,