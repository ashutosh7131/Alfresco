/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, EventEmitter, Input, Output } from '@angular/core';
import { LocalizedDatePipe, ThumbnailService } from '@alfresco/adf-core';
import { Node } from '@alfresco/js-api';
export class FilePropertiesTableCloudComponent {
    constructor(localizedDatePipe, thumbnailService) {
        this.localizedDatePipe = localizedDatePipe;
        this.thumbnailService = thumbnailService;
        this.rowClick = new EventEmitter();
        this.attachFileClick = new EventEmitter();
        this.downloadFile = new EventEmitter();
        this.contentModelFileHandler = new EventEmitter();
        this.removeAttachFile = new EventEmitter();
    }
    onRowClicked(file) {
        this.rowClick.emit(file);
    }
    onAttachFileClicked(nodeSelector) {
        this.attachFileClick.emit(nodeSelector);
    }
    downloadContent(file) {
        this.downloadFile.emit(file);
    }
    contentModelFormFileHandler(file) {
        this.contentModelFileHandler.emit(file);
    }
    onRemoveAttachFile(file) {
        this.removeAttachFile.emit(file);
    }
    getIcon(mimeType) {
        return this.thumbnailService.getMimeTypeIcon(mimeType);
    }
    getColumnValue(file, displayableCMProperty) {
        var _a;
        if (!file.properties[displayableCMProperty.prefixedName]) {
            const fieldProperty = (_a = this.field.params.displayableCMProperties) === null || _a === void 0 ? void 0 : _a.find(property => property.name === displayableCMProperty.name);
            return fieldProperty.defaultValue ? this.checkDateTypeAndTransform(displayableCMProperty.dataType, fieldProperty.defaultValue) : '--';
        }
        return file.properties[displayableCMProperty.prefixedName] ?
            this.checkDateTypeAndTransform(displayableCMProperty.dataType, file.properties[displayableCMProperty.prefixedName]) :
            '--';
    }
    checkDateTypeAndTransform(dataType, value) {
        if (dataType === 'd:date') {
            return this.localizedDatePipe.transform(value);
        }
        else if (dataType === 'd:datetime') {
            return this.localizedDatePipe.transform(value, 'medium');
        }
        return value;
    }
    displayMenuOption(option) {
        var _a, _b;
        return ((_b = (_a = this.field) === null || _a === void 0 ? void 0 : _a.params) === null || _b === void 0 ? void 0 : _b.menuOptions) ? this.field.params.menuOptions[option] : option !== FilePropertiesTableCloudComponent.RETRIEVE_METADATA_OPTION;
    }
}
FilePropertiesTableCloudComponent.RETRIEVE_METADATA_OPTION = 'retrieveMetadata';
FilePropertiesTableCloudComponent.decorators = [
    { type: Component, args: [{
                selector: 'adf-cloud-file-properties-table',
                template: "<div class=\"adf-file-properties-table\">\n    <table mat-table [dataSource]=\"uploadedFiles\" class=\"mat-elevation-z0\" *ngIf=\"hasFile\">\n        <ng-container matColumnDef=\"icon\">\n            <th mat-header-cell *matHeaderCellDef></th>\n            <td mat-cell *matCellDef=\"let element\">\n                <mat-icon mat-list-icon class=\"adf-datatable-selected\"\n                    *ngIf=\"selectedNode && element.id === selectedNode.id\" (click)=\"onRowClicked(element)\">\n                    check_circle\n                </mat-icon>\n                <img mat-list-icon class=\"adf-attach-widget__icon\"\n                    *ngIf=\"!selectedNode || element.id !== selectedNode.id\" [id]=\"'file-'+element?.id+'-icon'\"\n                    (click)=\"onRowClicked(element)\"\n                    [src]=\"element.content ? getIcon(element.content.mimeType) : getIcon(element['mimeType'])\"\n                    [alt]=\"mimeTypeIcon\" role=\"button\" tabindex=\"0\" />\n            </td>\n        </ng-container>\n    \n        <ng-container matColumnDef=\"fileName\">\n            <th mat-header-cell *matHeaderCellDef>{{ 'FORM.FIELD.FILE_NAME' | translate }}</th>\n            <td mat-cell *matCellDef=\"let element\">\n                <span matLine id=\"{{'file-'+element?.id}}\" role=\"button\" tabindex=\"0\" class=\"adf-file\"\n                    (click)=\"onRowClicked(element)\">{{element.name}}</span>\n            </td>\n        </ng-container>\n    \n        <ng-container *ngFor=\"let columnName of field?.params?.displayableCMProperties\" [matColumnDef]=\"columnName.name\">\n            <th mat-header-cell *matHeaderCellDef>{{ columnName.title ? columnName.title : columnName.name | titlecase\n                }}</th>\n            <td mat-cell *matCellDef=\"let row\">\n                <span matLine id=\"{{'fileProperty-'+row?.id+'-'+columnName?.name}}\" role=\"button\" tabindex=\"0\"\n                    (click)=\"onRowClicked(row)\">{{ getColumnValue(row, columnName) }}</span>\n            </td>\n        </ng-container>\n    \n        <ng-container matColumnDef=\"action\">\n            <th mat-header-cell *matHeaderCellDef></th>\n            <td mat-cell *matCellDef=\"let element\">\n                <button id=\"{{'file-'+element?.id+'-option-menu'}}\" mat-icon-button [matMenuTriggerFor]=\"fileActionMenu\"\n                    *ngIf=\"!!element.content?.mimeType\">\n                    <mat-icon>more_vert</mat-icon>\n                </button>\n                <mat-menu #fileActionMenu=\"matMenu\" xPosition=\"before\">\n                    <button *ngIf=\"displayMenuOption('show') && !!element.content?.mimeType\"\n                        id=\"{{'file-'+element?.id+'-show-file'}}\" mat-menu-item (click)=\"onAttachFileClicked(element)\">\n                        <mat-icon>visibility</mat-icon>\n                        <span>{{ 'FORM.FIELD.VIEW_FILE' | translate }}</span>\n                    </button>\n                    <button *ngIf=\"displayMenuOption('download') && !!element.content?.mimeType\"\n                        id=\"{{'file-'+element?.id+'-download-file'}}\" mat-menu-item (click)=\"downloadContent(element)\">\n                        <mat-icon>file_download</mat-icon>\n                        <span>{{ 'FORM.FIELD.DOWNLOAD_FILE' | translate }}</span>\n                    </button>\n                    <button *ngIf=\"displayMenuOption('retrieveMetadata') && !!element.content?.mimeType\"\n                        id=\"{{'file-'+element?.id+'-retrieve-file-metadata'}}\" mat-menu-item\n                        (click)=\"contentModelFormFileHandler(element)\">\n                        <mat-icon class=\"mat-24\">low_priority</mat-icon>\n                        <span>{{ 'ADF_CLOUD_FORM_COMPONENT.RETRIEVE_METADATA' | translate }}</span>\n                    </button>\n                    <button *ngIf=\"!field.readOnly && displayMenuOption('remove')\"\n                        id=\"{{'file-'+element?.id+'-remove-file'}}\" mat-menu-item [id]=\"'file-'+element?.id+'-remove'\"\n                        (click)=\"onRemoveAttachFile(element);\" (keyup.enter)=\"onRemoveAttachFile(element);\">\n                        <mat-icon class=\"mat-24\">highlight_off</mat-icon>\n                        <span>{{ 'FORM.FIELD.REMOVE_FILE' | translate }}</span>\n                    </button>\n                </mat-menu>\n            </td>\n        </ng-container>\n        <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n        <tr mat-row *matRowDef=\"let row; columns: displayedColumns\"></tr>\n    \n    </table>\n</div>\n",
                styles: [".adf-file-properties-table table{border:1px solid var(--theme-border-color);box-shadow:none;width:100%}.adf-file-properties-table table .adf-datatable-selected{padding:6px}.adf-file-properties-table table tr.mat-header-row{height:32px}.adf-file-properties-table table th{font-weight:700;padding-right:0!important}.adf-file-properties-table table td{max-width:50px;overflow:hidden;padding-right:0!important;text-overflow:ellipsis;white-space:nowrap}.adf-file-properties-table table td.mat-cell:first-of-type,.adf-file-properties-table table td.mat-cell:last-of-type,.adf-file-properties-table table td.mat-footer-cell:first-of-type,.adf-file-properties-table table td.mat-footer-cell:last-of-type{width:18%!important}"]
            },] }
];
FilePropertiesTableCloudComponent.ctorParameters = () => [
    { type: LocalizedDatePipe },
    { type: ThumbnailService }
];
FilePropertiesTableCloudComponent.propDecorators = {
    uploadedFiles: [{ type: Input }],
    hasFile: [{ type: Input }],
    selectedNode: [{ type: Input }],
    field: [{ type: Input }],
    displayedColumns: [{ type: Input }],
    mimeTypeIcon: [{ type: Input }],
    rowClick: [{ type: Output }],
    attachFileClick: [{ type: Output }],
    downloadFile: [{ type: Output }],
    contentModelFileHandler: [{ type: Output }],
    removeAttachFile: [{ type: Output }]
};
//# sourceMappingURL=data:application/json;base64,