/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, EventEmitter, Input, Output, HostListener } from '@angular/core';
import { of, forkJoin, Subject } from 'rxjs';
import { switchMap, takeUntil, map } from 'rxjs/operators';
import { FormBaseComponent, FormOutcomeEvent, FormOutcomeModel, WidgetVisibilityService, FormService, FORM_FIELD_VALIDATORS, FormModel, UploadWidgetContentLinkModel } from '@alfresco/adf-core';
import { FormCloudService } from '../services/form-cloud.service';
export class FormCloudComponent extends FormBaseComponent {
    constructor(formCloudService, formService, visibilityService) {
        super();
        this.formCloudService = formCloudService;
        this.formService = formService;
        this.visibilityService = visibilityService;
        this.appName = '';
        this.fieldValidators = [...FORM_FIELD_VALIDATORS];
        this.formSaved = new EventEmitter();
        this.formCompleted = new EventEmitter();
        this.formLoaded = new EventEmitter();
        this.formDataRefreshed = new EventEmitter();
        this.formContentClicked = new EventEmitter();
        this.subscriptions = [];
        this.onDestroy$ = new Subject();
        this.formService.formContentClicked
            .pipe(takeUntil(this.onDestroy$))
            .subscribe((content) => {
            if (content instanceof UploadWidgetContentLinkModel) {
                this.form.setNodeIdValueForViewersLinkedToUploadWidget(content);
                this.onFormDataRefreshed(this.form);
            }
            else {
                this.formContentClicked.emit(content);
            }
        });
        this.formService.updateFormValuesRequested
            .pipe(takeUntil(this.onDestroy$))
            .subscribe((valuesToSetIfNotPresent) => {
            this.form.addValuesNotPresent(valuesToSetIfNotPresent);
            this.onFormDataRefreshed(this.form);
        });
    }
    onKeyDown(event) {
        event.cancelBubble = true;
    }
    ngOnChanges(changes) {
        const appName = changes['appName'];
        if (appName && appName.currentValue) {
            if (this.taskId) {
                this.getFormByTaskId(appName.currentValue, this.taskId, this.appVersion);
            }
            else if (this.formId) {
                this.getFormById(appName.currentValue, this.formId, this.appVersion);
            }
            return;
        }
        const formId = changes['formId'];
        if (formId && formId.currentValue && this.appName) {
            this.getFormById(this.appName, formId.currentValue, this.appVersion);
            return;
        }
        const taskId = changes['taskId'];
        if (taskId && taskId.currentValue && this.appName) {
            this.getFormByTaskId(this.appName, taskId.currentValue, this.appVersion);
            return;
        }
        const data = changes['data'];
        if (data && data.currentValue) {
            this.refreshFormData();
            return;
        }
    }
    onRefreshClicked() {
        this.loadForm();
    }
    loadForm() {
        if (this.appName && this.taskId) {
            this.getFormByTaskId(this.appName, this.taskId, this.appVersion);
        }
        else if (this.appName && this.formId) {
            this.getFormById(this.appName, this.formId, this.appVersion);
        }
    }
    findProcessVariablesByTaskId(appName, taskId) {
        return this.formCloudService.getTask(appName, taskId).pipe(switchMap(task => {
            if (this.isAProcessTask(task)) {
                return this.formCloudService.getTaskVariables(appName, taskId);
            }
            else {
                return of([]);
            }
        }));
    }
    isAProcessTask(taskRepresentation) {
        return taskRepresentation.processDefinitionId && taskRepresentation.processDefinitionDeploymentId !== 'null';
    }
    getFormByTaskId(appName, taskId, version) {
        return new Promise(resolve => {
            forkJoin(this.formCloudService.getTaskForm(appName, taskId, version), this.formCloudService.getTaskVariables(appName, taskId))
                .pipe(takeUntil(this.onDestroy$))
                .subscribe((data) => {
                this.formCloudRepresentationJSON = data[0];
                this.formCloudRepresentationJSON.processVariables = data[1];
                this.data = data[1];
                const parsedForm = this.parseForm(this.formCloudRepresentationJSON);
                this.visibilityService.refreshVisibility(parsedForm, this.data);
                parsedForm.validateForm();
                this.form = parsedForm;
                this.form.nodeId = '-my-';
                this.onFormLoaded(this.form);
                resolve(this.form);
            }, (error) => {
                this.handleError(error);
                resolve(null);
            });
        });
    }
    getFormById(appName, formId, appVersion) {
        this.formCloudService
            .getForm(appName, formId, appVersion)
            .pipe(map((form) => {
            const flattenForm = Object.assign(Object.assign({}, form.formRepresentation), form.formRepresentation.formDefinition);
            delete flattenForm.formDefinition;
            return flattenForm;
        }), takeUntil(this.onDestroy$))
            .subscribe((form) => {
            this.formCloudRepresentationJSON = form;
            const parsedForm = this.parseForm(form);
            this.visibilityService.refreshVisibility(parsedForm);
            parsedForm.validateForm();
            this.form = parsedForm;
            this.form.nodeId = '-my-';
            this.onFormLoaded(this.form);
        }, (error) => {
            this.handleError(error);
        });
    }
    saveTaskForm() {
        if (this.form && this.appName && this.taskId) {
            this.formCloudService
                .saveTaskForm(this.appName, this.taskId, this.processInstanceId, `${this.form.id}`, this.form.values)
                .pipe(takeUntil(this.onDestroy$))
                .subscribe(() => {
                this.onTaskSaved(this.form);
            }, (error) => this.onTaskSavedError(error));
        }
    }
    completeTaskForm(outcome) {
        if (this.form && this.appName && this.taskId) {
            this.formCloudService
                .completeTaskForm(this.appName, this.taskId, this.processInstanceId, `${this.form.id}`, this.form.values, outcome, this.appVersion)
                .pipe(takeUntil(this.onDestroy$))
                .subscribe(() => {
                this.onTaskCompleted(this.form);
            }, (error) => this.onTaskCompletedError(error));
        }
    }
    parseForm(formCloudRepresentationJSON) {
        if (formCloudRepresentationJSON) {
            const formValues = {};
            (this.data || []).forEach(variable => {
                formValues[variable.name] = variable.value;
            });
            const form = new FormModel(formCloudRepresentationJSON, formValues, this.readOnly);
            if (!form) {
                form.outcomes = this.getFormDefinitionOutcomes(form);
            }
            if (this.fieldValidators && this.fieldValidators.length > 0) {
                form.fieldValidators = this.fieldValidators;
            }
            return form;
        }
        return null;
    }
    getFormDefinitionOutcomes(form) {
        return [
            new FormOutcomeModel(form, { id: '$save', name: FormOutcomeModel.SAVE_ACTION, isSystem: true })
        ];
    }
    checkVisibility(field) {
        if (field && field.form) {
            this.visibilityService.refreshVisibility(field.form);
        }
    }
    refreshFormData() {
        this.form = this.parseForm(this.formCloudRepresentationJSON);
        this.onFormLoaded(this.form);
        this.onFormDataRefreshed(this.form);
    }
    onFormLoaded(form) {
        this.formLoaded.emit(form);
    }
    onFormDataRefreshed(form) {
        this.formDataRefreshed.emit(form);
    }
    onTaskSaved(form) {
        this.formSaved.emit(form);
    }
    onTaskSavedError(error) {
        this.handleError(error);
    }
    onTaskCompleted(form) {
        this.formCompleted.emit(form);
    }
    onTaskCompletedError(error) {
        this.handleError(error);
    }
    onExecuteOutcome(outcome) {
        const args = new FormOutcomeEvent(outcome);
        if (args.defaultPrevented) {
            return false;
        }
        this.executeOutcome.emit(args);
        return !args.defaultPrevented;
    }
    storeFormAsMetadata() {
    }
    ngOnDestroy() {
        this.onDestroy$.next(true);
        this.onDestroy$.complete();
    }
}
FormCloudComponent.decorators = [
    { type: Component, args: [{
                selector: 'adf-cloud-form',
                template: "<div *ngIf=\"!hasForm()\">\n    <ng-content select=\"[empty-form]\">\n    </ng-content>\n</div>\n\n<div *ngIf=\"hasForm()\" class=\"adf-form-container\">\n    <mat-card>\n        <mat-card-header *ngIf=\"showTitle || showRefreshButton || showValidationIcon\">\n            <mat-card-title>\n                <h4>\n                    <div *ngIf=\"showValidationIcon\" class=\"adf-form-validation-button\">\n                        <i id=\"adf-valid-form-icon\" class=\"material-icons\"\n                            *ngIf=\"form.isValid; else no_valid_form\">check_circle</i>\n                        <ng-template #no_valid_form>\n                            <i id=\"adf-invalid-form-icon\" class=\"material-icons adf-invalid-color\">error</i>\n                        </ng-template>\n                    </div>\n                    <div *ngIf=\"showRefreshButton\" class=\"adf-form-reload-button\">\n                        <button mat-icon-button (click)=\"onRefreshClicked()\">\n                            <mat-icon>refresh</mat-icon>\n                        </button>\n                    </div>\n                    <span *ngIf=\"isTitleEnabled()\" class=\"adf-form-title\" [matTooltip]=\"form.taskName\">\n                        {{form.taskName}}\n                        <ng-container *ngIf=\"!form.taskName\">\n                            {{'FORM.FORM_RENDERER.NAMELESS_TASK' | translate}}\n                        </ng-container>\n                    </span>\n\n                </h4>\n            </mat-card-title>\n        </mat-card-header>\n        <mat-card-content>\n            <adf-form-renderer [formDefinition]=\"form\">\n            </adf-form-renderer>\n        </mat-card-content>\n        <mat-card-actions *ngIf=\"form.hasOutcomes()\" class=\"adf-form-mat-card-actions\">\n            <ng-content select=\"adf-cloud-form-custom-outcomes\"></ng-content>\n            <ng-container *ngFor=\"let outcome of form.outcomes\">\n                <button *ngIf=\"outcome.isVisible\" [id]=\"'adf-form-'+ outcome.name  | formatSpace\" [color]=\"getColorForOutcome(outcome.name)\"\n                    mat-button [disabled]=\"!isOutcomeButtonEnabled(outcome)\"\n                    [class.adf-form-hide-button]=\"!isOutcomeButtonVisible(outcome, form.readOnly)\"\n                    (click)=\"onOutcomeClicked(outcome)\">\n                    {{outcome.name | translate | uppercase }}\n                </button>\n            </ng-container>\n        </mat-card-actions>\n    </mat-card>\n</div>\n"
            },] }
];
FormCloudComponent.ctorParameters = () => [
    { type: FormCloudService },
    { type: FormService },
    { type: WidgetVisibilityService }
];
FormCloudComponent.propDecorators = {
    appName: [{ type: Input }],
    appVersion: [{ type: Input }],
    formId: [{ type: Input }],
    processInstanceId: [{ type: Input }],
    form: [{ type: Input }],
    taskId: [{ type: Input }],
    data: [{ type: Input }],
    fieldValidators: [{ type: Input }],
    formSaved: [{ type: Output }],
    formCompleted: [{ type: Output }],
    formLoaded: [{ type: Output }],
    formDataRefreshed: [{ type: Output }],
    formContentClicked: [{ type: Output }],
    onKeyDown: [{ type: HostListener, args: ['keydown', ['$event'],] }]
};
//# sourceMappingURL=data:application/json;base64,