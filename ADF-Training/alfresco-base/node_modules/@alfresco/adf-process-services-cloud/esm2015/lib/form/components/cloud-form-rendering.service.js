import { Injectable } from '@angular/core';
import { FormRenderingService } from '@alfresco/adf-core';
import { AttachFileCloudWidgetComponent } from './widgets/attach-file/attach-file-cloud-widget.component';
import { DropdownCloudWidgetComponent } from './widgets/dropdown/dropdown-cloud.widget';
import { DateCloudWidgetComponent } from './widgets/date/date-cloud.widget';
import { PeopleCloudWidgetComponent } from './widgets/people/people-cloud.widget';
import { GroupCloudWidgetComponent } from './widgets/group/group-cloud.widget';
import { PropertiesViewerWidgetComponent } from './widgets/properties-viewer/properties-viewer.widget';
import { RadioButtonsCloudWidgetComponent } from './widgets/radio-buttons/radio-buttons-cloud.widget';
import * as i0 from "@angular/core";
import * as ɵngcc0 from '@angular/core';
export class CloudFormRenderingService extends FormRenderingService {
    constructor() {
        super();
        this.register({
            'upload': () => AttachFileCloudWidgetComponent,
            'dropdown': () => DropdownCloudWidgetComponent,
            'date': () => DateCloudWidgetComponent,
            'people': () => PeopleCloudWidgetComponent,
            'functional-group': () => GroupCloudWidgetComponent,
            'properties-viewer': () => PropertiesViewerWidgetComponent,
            'radio-buttons': () => RadioButtonsCloudWidgetComponent
        }, true);
    }
}
CloudFormRenderingService.ɵfac = function CloudFormRenderingService_Factory(t) { return new (t || CloudFormRenderingService)(); };
CloudFormRenderingService.ɵprov = i0.ɵɵdefineInjectable({ factory: function CloudFormRenderingService_Factory() { return new CloudFormRenderingService(); }, token: CloudFormRenderingService, providedIn: "root" });
CloudFormRenderingService.ctorParameters = () => [];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CloudFormRenderingService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return []; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xvdWQtZm9ybS1yZW5kZXJpbmcuc2VydmljZS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vaG9tZS90cmF2aXMvYnVpbGQvQWxmcmVzY28vYWxmcmVzY28tbmcyLWNvbXBvbmVudHMvbGliL3Byb2Nlc3Mtc2VydmljZXMtY2xvdWQvc3JjL2xpYi9mb3JtL2NvbXBvbmVudHMvY2xvdWQtZm9ybS1yZW5kZXJpbmcuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFpQkEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUMxRCxPQUFPLEVBQUUsOEJBQThCLEVBQUUsTUFBTSwwREFBMEQsQ0FBQztBQUMxRyxPQUFPLEVBQUUsNEJBQTRCLEVBQUUsTUFBTSwwQ0FBMEMsQ0FBQztBQUN4RixPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQztBQUM1RSxPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSxzQ0FBc0MsQ0FBQztBQUNsRixPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSxvQ0FBb0MsQ0FBQztBQUMvRSxPQUFPLEVBQUUsK0JBQStCLEVBQUUsTUFBTSxzREFBc0QsQ0FBQztBQUN2RyxPQUFPLEVBQUUsZ0NBQWdDLEVBQUUsTUFBTSxvREFBb0QsQ0FBQztBQUN0Rzs7QUFJQSxNQUFNLE9BQU8seUJBQTBCLFNBQVEsb0JBQW9CO0FBQ25FLElBQUk7QUFDSixRQUFRLEtBQUssRUFBRSxDQUFDO0FBQ2hCLFFBQ1EsSUFBSSxDQUFDLFFBQVEsQ0FBQztBQUN0QixZQUFZLFFBQVEsRUFBRSxHQUFHLEVBQUUsQ0FBQyw4QkFBOEI7QUFDMUQsWUFBWSxVQUFVLEVBQUUsR0FBRyxFQUFFLENBQUMsNEJBQTRCO0FBQzFELFlBQVksTUFBTSxFQUFFLEdBQUcsRUFBRSxDQUFDLHdCQUF3QjtBQUNsRCxZQUFZLFFBQVEsRUFBRSxHQUFHLEVBQUUsQ0FBQywwQkFBMEI7QUFDdEQsWUFBWSxrQkFBa0IsRUFBRSxHQUFHLEVBQUUsQ0FBQyx5QkFBeUI7QUFDL0QsWUFBWSxtQkFBbUIsRUFBRSxHQUFHLEVBQUUsQ0FBQywrQkFBK0I7QUFDdEUsWUFBWSxlQUFlLEVBQUUsR0FBRyxFQUFFLENBQUMsZ0NBQWdDO0FBQ25FLFNBQVMsRUFBRSxJQUFJLENBQUMsQ0FBQztBQUNqQixJQUFJLENBQUM7QUFDTDtrSUFBQztBQUNELHFOQWZLO0FBQUM7QUFITCxVQUFVLFNBQUMsa0JBQ1IsVUFBVSxFQUFFLE1BQU0sY0FDckI7Ozs7O2dEQUN5RDtBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRm9ybVJlbmRlcmluZ1NlcnZpY2UgfSBmcm9tICdAYWxmcmVzY28vYWRmLWNvcmUnO1xuaW1wb3J0IHsgQXR0YWNoRmlsZUNsb3VkV2lkZ2V0Q29tcG9uZW50IH0gZnJvbSAnLi93aWRnZXRzL2F0dGFjaC1maWxlL2F0dGFjaC1maWxlLWNsb3VkLXdpZGdldC5jb21wb25lbnQnO1xuaW1wb3J0IHsgRHJvcGRvd25DbG91ZFdpZGdldENvbXBvbmVudCB9IGZyb20gJy4vd2lkZ2V0cy9kcm9wZG93bi9kcm9wZG93bi1jbG91ZC53aWRnZXQnO1xuaW1wb3J0IHsgRGF0ZUNsb3VkV2lkZ2V0Q29tcG9uZW50IH0gZnJvbSAnLi93aWRnZXRzL2RhdGUvZGF0ZS1jbG91ZC53aWRnZXQnO1xuaW1wb3J0IHsgUGVvcGxlQ2xvdWRXaWRnZXRDb21wb25lbnQgfSBmcm9tICcuL3dpZGdldHMvcGVvcGxlL3Blb3BsZS1jbG91ZC53aWRnZXQnO1xuaW1wb3J0IHsgR3JvdXBDbG91ZFdpZGdldENvbXBvbmVudCB9IGZyb20gJy4vd2lkZ2V0cy9ncm91cC9ncm91cC1jbG91ZC53aWRnZXQnO1xuaW1wb3J0IHsgUHJvcGVydGllc1ZpZXdlcldpZGdldENvbXBvbmVudCB9IGZyb20gJy4vd2lkZ2V0cy9wcm9wZXJ0aWVzLXZpZXdlci9wcm9wZXJ0aWVzLXZpZXdlci53aWRnZXQnO1xuaW1wb3J0IHsgUmFkaW9CdXR0b25zQ2xvdWRXaWRnZXRDb21wb25lbnQgfSBmcm9tICcuL3dpZGdldHMvcmFkaW8tYnV0dG9ucy9yYWRpby1idXR0b25zLWNsb3VkLndpZGdldCc7XG5cbkBJbmplY3RhYmxlKHtcbiAgICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgQ2xvdWRGb3JtUmVuZGVyaW5nU2VydmljZSBleHRlbmRzIEZvcm1SZW5kZXJpbmdTZXJ2aWNlIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcblxuICAgICAgICB0aGlzLnJlZ2lzdGVyKHtcbiAgICAgICAgICAgICd1cGxvYWQnOiAoKSA9PiBBdHRhY2hGaWxlQ2xvdWRXaWRnZXRDb21wb25lbnQsXG4gICAgICAgICAgICAnZHJvcGRvd24nOiAoKSA9PiBEcm9wZG93bkNsb3VkV2lkZ2V0Q29tcG9uZW50LFxuICAgICAgICAgICAgJ2RhdGUnOiAoKSA9PiBEYXRlQ2xvdWRXaWRnZXRDb21wb25lbnQsXG4gICAgICAgICAgICAncGVvcGxlJzogKCkgPT4gUGVvcGxlQ2xvdWRXaWRnZXRDb21wb25lbnQsXG4gICAgICAgICAgICAnZnVuY3Rpb25hbC1ncm91cCc6ICgpID0+IEdyb3VwQ2xvdWRXaWRnZXRDb21wb25lbnQsXG4gICAgICAgICAgICAncHJvcGVydGllcy12aWV3ZXInOiAoKSA9PiBQcm9wZXJ0aWVzVmlld2VyV2lkZ2V0Q29tcG9uZW50LFxuICAgICAgICAgICAgJ3JhZGlvLWJ1dHRvbnMnOiAoKSA9PiBSYWRpb0J1dHRvbnNDbG91ZFdpZGdldENvbXBvbmVudFxuICAgICAgICB9LCB0cnVlKTtcbiAgICB9XG59XG4iXX0=