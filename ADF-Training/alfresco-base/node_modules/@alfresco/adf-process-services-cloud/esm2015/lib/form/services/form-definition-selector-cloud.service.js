import { Injectable } from '@angular/core';
import { AlfrescoApiService, AppConfigService } from '@alfresco/adf-core';
import { map } from 'rxjs/operators';
import { from } from 'rxjs';
import { BaseCloudService } from '../../services/base-cloud.service';
import * as i0 from "@angular/core";
import * as i1 from "@alfresco/adf-core";
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@alfresco/adf-core';
export class FormDefinitionSelectorCloudService extends BaseCloudService {
    constructor(apiService, appConfigService) {
        super(apiService, appConfigService);
    }
    getForms(appName) {
        const url = `${this.getBasePath(appName)}/form/v1/forms`;
        return this.get(url).pipe(map((data) => {
            return data.map((formData) => {
                return formData.formRepresentation;
            });
        }));
    }
    getStandAloneTaskForms(appName) {
        return from(this.getForms(appName)).pipe(map((data) => {
            return data.filter((formData) => formData.standalone || formData.standalone === undefined);
        }));
    }
}
FormDefinitionSelectorCloudService.ɵfac = function FormDefinitionSelectorCloudService_Factory(t) { return new (t || FormDefinitionSelectorCloudService)(ɵngcc0.ɵɵinject(ɵngcc1.AlfrescoApiService), ɵngcc0.ɵɵinject(ɵngcc1.AppConfigService)); };
FormDefinitionSelectorCloudService.ɵprov = i0.ɵɵdefineInjectable({ factory: function FormDefinitionSelectorCloudService_Factory() { return new FormDefinitionSelectorCloudService(i0.ɵɵinject(i1.AlfrescoApiService), i0.ɵɵinject(i1.AppConfigService)); }, token: FormDefinitionSelectorCloudService, providedIn: "root" });
FormDefinitionSelectorCloudService.ctorParameters = () => [
    { type: AlfrescoApiService },
    { type: AppConfigService }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FormDefinitionSelectorCloudService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc1.AlfrescoApiService }, { type: ɵngcc1.AppConfigService }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybS1kZWZpbml0aW9uLXNlbGVjdG9yLWNsb3VkLnNlcnZpY2UuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL2hvbWUvdHJhdmlzL2J1aWxkL0FsZnJlc2NvL2FsZnJlc2NvLW5nMi1jb21wb25lbnRzL2xpYi9wcm9jZXNzLXNlcnZpY2VzLWNsb3VkL3NyYy9saWIvZm9ybS9zZXJ2aWNlcy9mb3JtLWRlZmluaXRpb24tc2VsZWN0b3ItY2xvdWQuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFpQkEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUMxRSxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDckMsT0FBTyxFQUFFLElBQUksRUFBYyxNQUFNLE1BQU0sQ0FBQztBQUN4QyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxtQ0FBbUMsQ0FBQztBQUNyRTtBQUFxQzs7O0FBS3JDLE1BQU0sT0FBTyxrQ0FBbUMsU0FBUSxnQkFBZ0I7QUFDeEUsSUFDSSxZQUFZLFVBQThCLEVBQzlCLGdCQUFrQztBQUNsRCxRQUFRLEtBQUssQ0FBQyxVQUFVLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQztBQUM1QyxJQUFJLENBQUM7QUFDTCxJQU1JLFFBQVEsQ0FBQyxPQUFlO0FBQUksUUFDeEIsTUFBTSxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQztBQUNqRSxRQUNRLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQ3JCLEdBQUcsQ0FBQyxDQUFDLElBQVMsRUFBRSxFQUFFO0FBQzlCLFlBQWdCLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLFFBQWEsRUFBRSxFQUFFO0FBQ2xELGdCQUFvQixPQUE0QixRQUFRLENBQUMsa0JBQWtCLENBQUM7QUFDNUUsWUFBZ0IsQ0FBQyxDQUFDLENBQUM7QUFDbkIsUUFBWSxDQUFDLENBQUMsQ0FDTCxDQUFDO0FBQ1YsSUFBSSxDQUFDO0FBQ0wsSUFNSSxzQkFBc0IsQ0FBQyxPQUFlO0FBQUksUUFDdEMsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FDcEMsR0FBRyxDQUFDLENBQUMsSUFBUyxFQUFFLEVBQUU7QUFDOUIsWUFBZ0IsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsUUFBYSxFQUFFLEVBQUUsQ0FBQyxRQUFRLENBQUMsVUFBVSxJQUFJLFFBQVEsQ0FBQyxVQUFVLEtBQUssU0FBUyxDQUFDLENBQUM7QUFDaEgsUUFBWSxDQUFDLENBQUMsQ0FDTCxDQUFDO0FBQ1YsSUFBSSxDQUFDO0FBQ0w7aVBBQUM7QUFDRCw2VEFyQ0s7QUFBQztFQUhMLFVBQVUsU0FBQyxyQkFHc0QsWUFUekQsa0JBQWtCO0tBT3ZCLFVBQVUsRUFBRSxNQUFNLHZCQVBTLFlBQUYsZ0JBQWdCO0FBQUc7R0FRL0M7Ozs7O3NIQVJpRDtBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQWxmcmVzY29BcGlTZXJ2aWNlLCBBcHBDb25maWdTZXJ2aWNlIH0gZnJvbSAnQGFsZnJlc2NvL2FkZi1jb3JlJztcbmltcG9ydCB7IG1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IGZyb20sIE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IEJhc2VDbG91ZFNlcnZpY2UgfSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9iYXNlLWNsb3VkLnNlcnZpY2UnO1xuaW1wb3J0IHsgRm9ybVJlcHJlc2VudGF0aW9uIH0gZnJvbSAnLi4vLi4vc2VydmljZXMvZm9ybS1maWVsZHMuaW50ZXJmYWNlcyc7XG5cbkBJbmplY3RhYmxlKHtcbiAgICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgRm9ybURlZmluaXRpb25TZWxlY3RvckNsb3VkU2VydmljZSBleHRlbmRzIEJhc2VDbG91ZFNlcnZpY2Uge1xuXG4gICAgY29uc3RydWN0b3IoYXBpU2VydmljZTogQWxmcmVzY29BcGlTZXJ2aWNlLFxuICAgICAgICAgICAgICAgIGFwcENvbmZpZ1NlcnZpY2U6IEFwcENvbmZpZ1NlcnZpY2UpIHtcbiAgICAgICAgc3VwZXIoYXBpU2VydmljZSwgYXBwQ29uZmlnU2VydmljZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0IGFsbCBmb3JtcyBvZiBhbiBhcHAuXG4gICAgICogQHBhcmFtIGFwcE5hbWUgTmFtZSBvZiB0aGUgYXBwbGljYXRpb25cbiAgICAgKiBAcmV0dXJucyBEZXRhaWxzIG9mIHRoZSBmb3Jtc1xuICAgICAqL1xuICAgIGdldEZvcm1zKGFwcE5hbWU6IHN0cmluZyk6IE9ic2VydmFibGU8Rm9ybVJlcHJlc2VudGF0aW9uW10+IHtcbiAgICAgICAgY29uc3QgdXJsID0gYCR7dGhpcy5nZXRCYXNlUGF0aChhcHBOYW1lKX0vZm9ybS92MS9mb3Jtc2A7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0KHVybCkucGlwZShcbiAgICAgICAgICAgIG1hcCgoZGF0YTogYW55KSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGRhdGEubWFwKChmb3JtRGF0YTogYW55KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiA8Rm9ybVJlcHJlc2VudGF0aW9uPiBmb3JtRGF0YS5mb3JtUmVwcmVzZW50YXRpb247XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KVxuICAgICAgICApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldCBhbGwgZm9ybXMgb2YgYW4gYXBwLlxuICAgICAqIEBwYXJhbSBhcHBOYW1lIE5hbWUgb2YgdGhlIGFwcGxpY2F0aW9uXG4gICAgICogQHJldHVybnMgRGV0YWlscyBvZiB0aGUgZm9ybXNcbiAgICAgKi9cbiAgICBnZXRTdGFuZEFsb25lVGFza0Zvcm1zKGFwcE5hbWU6IHN0cmluZyk6IE9ic2VydmFibGU8Rm9ybVJlcHJlc2VudGF0aW9uW10+IHtcbiAgICAgICAgcmV0dXJuIGZyb20odGhpcy5nZXRGb3JtcyhhcHBOYW1lKSkucGlwZShcbiAgICAgICAgICAgIG1hcCgoZGF0YTogYW55KSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGRhdGEuZmlsdGVyKChmb3JtRGF0YTogYW55KSA9PiBmb3JtRGF0YS5zdGFuZGFsb25lIHx8IGZvcm1EYXRhLnN0YW5kYWxvbmUgPT09IHVuZGVmaW5lZCk7XG4gICAgICAgICAgICB9KVxuICAgICAgICApO1xuICAgIH1cbn1cbiJdfQ==