/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { __awaiter } from "tslib";
import { FormControl } from '@angular/forms';
import { Component, Output, EventEmitter, ViewEncapsulation, Input, ChangeDetectionStrategy, ViewChild, ElementRef } from '@angular/core';
import { of, BehaviorSubject, Subject } from 'rxjs';
import { switchMap, debounceTime, distinctUntilChanged, mergeMap, tap, filter, map, takeUntil } from 'rxjs/operators';
import { FullNamePipe, IdentityUserService, LogService } from '@alfresco/adf-core';
import { trigger, state, style, transition, animate } from '@angular/animations';
export class PeopleCloudComponent {
    constructor(identityUserService, logService) {
        this.identityUserService = identityUserService;
        this.logService = logService;
        this.mode = 'single';
        this.validate = false;
        this.readOnly = false;
        this.preSelectUsers = [];
        this.excludedUsers = [];
        this.userChipsCtrl = new FormControl({ value: '', disabled: false });
        this.searchUserCtrl = new FormControl({ value: '', disabled: false });
        this.selectUser = new EventEmitter();
        this.removeUser = new EventEmitter();
        this.changedUsers = new EventEmitter();
        this.warning = new EventEmitter();
        this._searchUsers = [];
        this.onDestroy$ = new Subject();
        this.selectedUsers = [];
        this.invalidUsers = [];
        this.searchUsers$ = new BehaviorSubject(this._searchUsers);
        this._subscriptAnimationState = 'enter';
        this.searchedValue = '';
        this.validationLoading = false;
        this.searchLoading = false;
    }
    ngOnInit() {
        this.loadClientId();
        this.initSearch();
    }
    ngOnChanges(changes) {
        if (this.valueChanged(changes.preSelectUsers)
            || this.valueChanged(changes.mode)
            || this.valueChanged(changes.validate)) {
            if (this.hasPreSelectUsers()) {
                this.loadPreSelectUsers();
            }
            else if (this.hasPreselectedUsersCleared(changes)) {
                this.selectedUsers = [];
                this.invalidUsers = [];
            }
            if (!this.isValidationEnabled()) {
                this.invalidUsers = [];
            }
        }
        if (changes.appName && this.isAppNameChanged(changes.appName)) {
            this.loadClientId();
        }
    }
    loadClientId() {
        return __awaiter(this, void 0, void 0, function* () {
            this.clientId = yield this.identityUserService.getClientIdByApplicationName(this.appName).toPromise();
            if (this.clientId) {
                this.searchUserCtrl.enable();
            }
        });
    }
    initSearch() {
        this.searchUserCtrl.valueChanges.pipe(filter((value) => {
            this.searchLoading = true;
            return typeof value === 'string';
        }), tap((value) => {
            if (value) {
                this.setTypingError();
            }
        }), debounceTime(500), distinctUntilChanged(), tap((value) => {
            if (value.trim()) {
                this.searchedValue = value;
            }
            else {
                this.searchUserCtrl.markAsPristine();
                this.searchUserCtrl.markAsUntouched();
            }
        }), tap(() => {
            this.resetSearchUsers();
        }), switchMap((search) => this.identityUserService.findUsersByName(search.trim())), mergeMap((users) => {
            this.resetSearchUsers();
            this.searchLoading = false;
            return users;
        }), filter(user => !this.isUserAlreadySelected(user) && !this.isExcludedUser(user)), mergeMap(user => {
            if (this.appName) {
                return this.checkUserHasAccess(user.id).pipe(mergeMap(hasRole => hasRole ? of(user) : of()));
            }
            else if (this.hasRoles()) {
                return this.filterUsersByRoles(user);
            }
            else {
                return of(user);
            }
        }), takeUntil(this.onDestroy$)).subscribe(user => {
            this._searchUsers.push(user);
            this.searchUsers$.next(this._searchUsers);
        });
    }
    ngOnDestroy() {
        this.onDestroy$.next(true);
        this.onDestroy$.complete();
    }
    isAppNameChanged(change) {
        return change && change.previousValue !== change.currentValue && this.appName && this.appName.length > 0;
    }
    isValidationEnabled() {
        return this.validate === true;
    }
    checkUserHasAccess(userId) {
        if (this.hasRoles()) {
            return this.identityUserService.checkUserHasAnyClientAppRole(userId, this.clientId, this.roles);
        }
        else {
            return this.identityUserService.checkUserHasClientApp(userId, this.clientId);
        }
    }
    hasRoles() {
        return this.roles && this.roles.length > 0;
    }
    filterUsersByRoles(user) {
        return this.identityUserService.checkUserHasRole(user.id, this.roles).pipe(map((hasRole) => ({ hasRole: hasRole, user: user })), filter((filteredUser) => filteredUser.hasRole), map((filteredUser) => filteredUser.user));
    }
    isUserAlreadySelected(searchUser) {
        if (this.selectedUsers && this.selectedUsers.length > 0) {
            const result = this.selectedUsers.find((selectedUser) => {
                return this.compare(selectedUser, searchUser);
            });
            return !!result;
        }
        return false;
    }
    isExcludedUser(searchUser) {
        var _a;
        if (((_a = this.excludedUsers) === null || _a === void 0 ? void 0 : _a.length) > 0) {
            return !!this.excludedUsers.find(excludedUser => this.compare(excludedUser, searchUser));
        }
        return false;
    }
    loadPreSelectUsers() {
        return __awaiter(this, void 0, void 0, function* () {
            this.selectedUsers = [];
            if (this.isSingleMode()) {
                this.selectedUsers = [this.preSelectUsers[0]];
            }
            else {
                this.selectedUsers = this.removeDuplicatedUsers(this.preSelectUsers);
            }
            this.userChipsCtrl.setValue(this.selectedUsers[0].username);
            if (this.isValidationEnabled()) {
                this.validationLoading = true;
                yield this.validatePreselectUsers();
                this.validationLoading = false;
            }
        });
    }
    getPreselectedUsers() {
        if (this.isSingleMode()) {
            return [this.preSelectUsers[0]];
        }
        else {
            return this.removeDuplicatedUsers(this.preSelectUsers);
        }
    }
    validatePreselectUsers() {
        return __awaiter(this, void 0, void 0, function* () {
            this.invalidUsers = [];
            const validUsers = [];
            for (const user of this.getPreselectedUsers()) {
                try {
                    const validationResult = yield this.searchUser(user);
                    if (this.compare(user, validationResult)) {
                        validationResult.readonly = user.readonly;
                        validUsers.push(validationResult);
                    }
                    else {
                        this.invalidUsers.push(user);
                    }
                }
                catch (error) {
                    this.invalidUsers.push(user);
                    this.logService.error(error);
                }
            }
            this.checkPreselectValidationErrors();
            this.selectedUsers = validUsers.concat(this.invalidUsers);
        });
    }
    compare(preselectedUser, identityUser) {
        if (preselectedUser && identityUser) {
            const uniquePropertyIdentifiers = ['id', 'username', 'email'];
            for (const property of Object.keys(preselectedUser)) {
                if (preselectedUser[property] !== undefined && uniquePropertyIdentifiers.includes(property)) {
                    return preselectedUser[property] === identityUser[property];
                }
            }
        }
        return false;
    }
    getSearchKey(user) {
        if (user.id) {
            return 'id';
        }
        else if (user.email) {
            return 'email';
        }
        else if (user.username) {
            return 'username';
        }
        else {
            return null;
        }
    }
    searchUser(user) {
        return __awaiter(this, void 0, void 0, function* () {
            const key = this.getSearchKey(user);
            switch (key) {
                case 'id':
                    return this.identityUserService.findUserById(user[key]).toPromise();
                case 'username':
                    return (yield this.identityUserService.findUserByUsername(user[key]).toPromise())[0];
                case 'email':
                    return (yield this.identityUserService.findUserByEmail(user[key]).toPromise())[0];
                default:
                    return null;
            }
        });
    }
    removeDuplicatedUsers(users) {
        return users.filter((user, index, self) => index === self.findIndex(auxUser => user.id === auxUser.id && user.username === auxUser.username && user.email === auxUser.email));
    }
    checkPreselectValidationErrors() {
        this.invalidUsers = this.removeDuplicatedUsers(this.invalidUsers);
        if (this.invalidUsers.length > 0) {
            this.generateInvalidUsersMessage();
        }
        this.warning.emit({
            message: 'INVALID_PRESELECTED_USERS',
            users: this.invalidUsers
        });
    }
    onSelect(user) {
        if (user) {
            this.selectUser.emit(user);
            if (this.isMultipleMode()) {
                if (!this.isUserAlreadySelected(user)) {
                    this.selectedUsers.push(user);
                }
            }
            else {
                this.invalidUsers = [];
                this.selectedUsers = [user];
            }
            this.userInput.nativeElement.value = '';
            this.searchUserCtrl.setValue('');
            this.userChipsCtrlValue(this.selectedUsers[0].username);
            this.changedUsers.emit(this.selectedUsers);
            this.resetSearchUsers();
        }
    }
    onRemove(userToRemove) {
        this.removeUser.emit(userToRemove);
        this.removeUserFromSelected(userToRemove);
        this.changedUsers.emit(this.selectedUsers);
        if (this.selectedUsers.length === 0) {
            this.userChipsCtrlValue('');
        }
        else {
            this.userChipsCtrlValue(this.selectedUsers[0].username);
        }
        this.searchUserCtrl.markAsDirty();
        this.searchUserCtrl.markAsTouched();
        if (this.isValidationEnabled()) {
            this.removeUserFromValidation(userToRemove);
            this.checkPreselectValidationErrors();
        }
    }
    userChipsCtrlValue(value) {
        this.userChipsCtrl.setValue(value);
        this.userChipsCtrl.markAsDirty();
        this.userChipsCtrl.markAsTouched();
    }
    removeUserFromSelected({ id, username, email }) {
        const indexToRemove = this.selectedUsers.findIndex(user => {
            return user.id === id
                && user.username === username
                && user.email === email;
        });
        if (indexToRemove !== -1) {
            this.selectedUsers.splice(indexToRemove, 1);
        }
    }
    removeUserFromValidation({ id, username, email }) {
        const indexToRemove = this.invalidUsers.findIndex(user => {
            return user.id === id
                && user.username === username
                && user.email === email;
        });
        if (indexToRemove !== -1) {
            this.invalidUsers.splice(indexToRemove, 1);
        }
    }
    generateInvalidUsersMessage() {
        this.validateUsersMessage = '';
        this.invalidUsers.forEach((invalidUser, index) => {
            if (index === this.invalidUsers.length - 1) {
                this.validateUsersMessage += `${invalidUser.username} `;
            }
            else {
                this.validateUsersMessage += `${invalidUser.username}, `;
            }
        });
    }
    setTypingError() {
        this.searchUserCtrl.setErrors(Object.assign({ searchTypingError: true }, this.searchUserCtrl.errors));
    }
    hasPreselectError() {
        return this.invalidUsers
            && this.invalidUsers.length > 0;
    }
    getDisplayName(user) {
        return FullNamePipe.prototype.transform(user);
    }
    isMultipleMode() {
        return this.mode === 'multiple';
    }
    isSingleMode() {
        return this.mode === 'single';
    }
    isSingleSelectionReadonly() {
        return this.isSingleMode()
            && this.selectedUsers.length === 1
            && this.selectedUsers[0].readonly === true;
    }
    hasPreSelectUsers() {
        return this.preSelectUsers
            && this.preSelectUsers.length > 0;
    }
    valueChanged(change) {
        return change
            && change.currentValue !== change.previousValue;
    }
    hasPreselectedUsersCleared(changes) {
        return changes
            && changes.preSelectUsers
            && changes.preSelectUsers.currentValue
            && changes.preSelectUsers.currentValue.length === 0;
    }
    resetSearchUsers() {
        this._searchUsers = [];
        this.searchUsers$.next(this._searchUsers);
    }
    getSelectedUsers() {
        return this.selectedUsers;
    }
    isReadonly() {
        return this.readOnly || this.isSingleSelectionReadonly();
    }
    isValidationLoading() {
        return this.isValidationEnabled() && this.validationLoading;
    }
    setFocus(isFocused) {
        this.isFocused = isFocused;
    }
    hasError() {
        return !!this.searchUserCtrl.errors;
    }
    getValidationPattern() {
        return this.searchUserCtrl.errors.pattern.requiredPattern;
    }
    getValidationMaxLength() {
        return this.searchUserCtrl.errors.maxlength.requiredLength;
    }
    getValidationMinLength() {
        return this.searchUserCtrl.errors.minlength.requiredLength;
    }
}
PeopleCloudComponent.decorators = [
    { type: Component, args: [{
                selector: 'adf-cloud-people',
                template: "<form>\n    <mat-form-field [floatLabel]=\"'auto'\" class=\"adf-people-cloud\">\n        <mat-label *ngIf=\"!isReadonly()\" id=\"adf-people-cloud-title-id\">{{ title | translate }}</mat-label>\n        <mat-chip-list #userMultipleChipList [disabled]=\"isReadonly() || isValidationLoading()\" data-automation-id=\"adf-cloud-people-chip-list\">\n            <mat-chip\n                *ngFor=\"let user of selectedUsers\"\n                [removable]=\"!(user.readonly)\"\n                [attr.data-automation-id]=\"'adf-people-cloud-chip-' + user.username\"\n                (removed)=\"onRemove(user)\"\n                matTooltip=\"{{ (user.readonly ? 'ADF_CLOUD_GROUPS.MANDATORY' : '') | translate }}\">\n                {{user | fullName}}\n                <mat-icon\n                    matChipRemove\n                    *ngIf=\"!(user.readonly || readOnly)\"\n                    [attr.data-automation-id]=\"'adf-people-cloud-chip-remove-icon-' + user.username\">\n                    cancel\n                </mat-icon>\n            </mat-chip>\n            <input *ngIf=\"!isReadonly()\" matInput\n                   [formControl]=\"searchUserCtrl\"\n                   [matAutocomplete]=\"auto\"\n                   [matChipInputFor]=\"userMultipleChipList\"\n                   (focus)=\"setFocus(true)\"\n                   (blur)=\"setFocus(false)\"\n                   class=\"adf-cloud-input\"\n                   data-automation-id=\"adf-people-cloud-search-input\" #userInput>\n        </mat-chip-list>\n\n        <mat-autocomplete autoActiveFirstOption class=\"adf-people-cloud-list\"\n                          #auto=\"matAutocomplete\"\n                          (optionSelected)=\"onSelect($event.option.value)\"\n                          [displayWith]=\"getDisplayName\">\n            <ng-container *ngIf=\"(searchUsers$ | async)?.length else noResults\" >\n            <mat-option *ngFor=\"let user of searchUsers$ | async; let i = index\" [value]=\"user\">\n                <div class=\"adf-people-cloud-row\" id=\"adf-people-cloud-user-{{user.username}}\"\n                     data-automation-id=\"adf-people-cloud-row\">\n                    <div [outerHTML]=\"user | usernameInitials:'adf-people-cloud-pic'\"></div>\n                    <span class=\"adf-people-label-name\"> {{user | fullName}}</span>\n                </div>\n            </mat-option>\n            </ng-container>\n            <ng-template #noResults>\n                <mat-option *ngIf=\"searchUserCtrl.hasError('searchTypingError') && !searchLoading\" disabled\n                            class=\"adf-people-cloud-option-not-active\"\n                            data-automation-id=\"adf-people-cloud-no-results\">\n                    <span> {{ 'ADF_CLOUD_USERS.ERROR.NOT_FOUND' | translate : { userName: searchedValue } }}</span>\n                </mat-option>\n            </ng-template>\n        </mat-autocomplete>\n    </mat-form-field>\n    <mat-progress-bar\n        *ngIf=\"validationLoading\"\n        mode=\"indeterminate\">\n    </mat-progress-bar>\n\n    <mat-error *ngIf=\"hasPreselectError() && !isValidationLoading()\">\n        <mat-icon class=\"adf-start-task-cloud-error-icon\">warning</mat-icon>\n        {{ 'ADF_CLOUD_USERS.ERROR.NOT_FOUND' | translate : { userName : validateUsersMessage } }}</mat-error>\n    <mat-error *ngIf=\"searchUserCtrl.hasError('pattern')\">\n        <mat-icon class=\"adf-start-task-cloud-error-icon\">warning</mat-icon>\n        {{ 'ADF_CLOUD_PEOPLE_GROUPS.ERROR.INVALID_PATTERN' | translate: { pattern: getValidationPattern() } }}</mat-error>\n    <mat-error *ngIf=\"searchUserCtrl.hasError('maxlength')\">\n        <mat-icon class=\"adf-start-task-cloud-error-icon\">warning</mat-icon>\n        {{ 'ADF_CLOUD_PEOPLE_GROUPS.ERROR.INVALID_MAX_LENGTH' | translate: { requiredLength: getValidationMaxLength() } }}\n    </mat-error>\n    <mat-error *ngIf=\"searchUserCtrl.hasError('minlength')\">\n        <mat-icon class=\"adf-start-task-cloud-error-icon\">warning</mat-icon>\n        {{ 'ADF_CLOUD_PEOPLE_GROUPS.ERROR.INVALID_MIN_LENGTH' | translate: { requiredLength: getValidationMinLength() } }}</mat-error>\n    <mat-error *ngIf=\"searchUserCtrl.hasError('required') || userChipsCtrl.hasError('required')\">\n        <mat-icon class=\"adf-start-task-cloud-error-icon\">warning</mat-icon>\n        {{ 'ADF_CLOUD_PEOPLE_GROUPS.ERROR.REQUIRED' | translate }} </mat-error>\n    <mat-error *ngIf=\"searchUserCtrl.hasError('searchTypingError') && !this.isFocused\" data-automation-id=\"invalid-users-typing-error\">\n        <mat-icon class=\"adf-start-task-cloud-error-icon\">warning</mat-icon>\n        {{ 'ADF_CLOUD_USERS.ERROR.NOT_FOUND' | translate : { userName : searchedValue } }}</mat-error>\n</form>\n",
                animations: [
                    trigger('transitionMessages', [
                        state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),
                        transition('void => enter', [
                            style({ opacity: 0, transform: 'translateY(-100%)' }),
                            animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)')
                        ])
                    ])
                ],
                providers: [FullNamePipe],
                changeDetection: ChangeDetectionStrategy.OnPush,
                encapsulation: ViewEncapsulation.None,
                styles: [".adf-people-cloud{width:100%}.adf-people-cloud-option-not-active{background:inherit!important}.adf-people-cloud-list{margin:5px 0;padding:10px 0}.adf-people-cloud-row{align-items:center;column-gap:10px;display:flex}.adf-people-cloud-pic{align-items:center;background:var(--theme-primary-color);border-radius:100px;color:var(--theme-text-fg-color);display:flex;font-size:18px;font-weight:bolder;height:40px;justify-content:center;text-transform:uppercase;width:40px}.adf-start-task-cloud-error{height:20px;margin-top:-10px;position:absolute}.adf-start-task-cloud-error-message{color:var(--theme-warn-color);font-size:12px;height:16px;line-height:1.33;padding-right:8px;width:auto}.adf-start-task-cloud-error-icon{color:var(--theme-warn-color);font-size:17px}"]
            },] }
];
PeopleCloudComponent.ctorParameters = () => [
    { type: IdentityUserService },
    { type: LogService }
];
PeopleCloudComponent.propDecorators = {
    appName: [{ type: Input }],
    mode: [{ type: Input }],
    roles: [{ type: Input }],
    validate: [{ type: Input }],
    readOnly: [{ type: Input }],
    preSelectUsers: [{ type: Input }],
    excludedUsers: [{ type: Input }],
    userChipsCtrl: [{ type: Input }],
    searchUserCtrl: [{ type: Input }],
    title: [{ type: Input }],
    selectUser: [{ type: Output }],
    removeUser: [{ type: Output }],
    changedUsers: [{ type: Output }],
    warning: [{ type: Output }],
    userInput: [{ type: ViewChild, args: ['userInput',] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGVvcGxlLWNsb3VkLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIvaG9tZS90cmF2aXMvYnVpbGQvQWxmcmVzY28vYWxmcmVzY28tbmcyLWNvbXBvbmVudHMvbGliL3Byb2Nlc3Mtc2VydmljZXMtY2xvdWQvc3JjLyIsInNvdXJjZXMiOlsibGliL3Blb3BsZS9jb21wb25lbnRzL3Blb3BsZS1jbG91ZC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7OztHQWVHOztBQUVILE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUM3QyxPQUFPLEVBQ0gsU0FBUyxFQUVULE1BQU0sRUFDTixZQUFZLEVBQ1osaUJBQWlCLEVBQ2pCLEtBQUssRUFJTCx1QkFBdUIsRUFDdkIsU0FBUyxFQUFFLFVBQVUsRUFDeEIsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFjLEVBQUUsRUFBRSxlQUFlLEVBQUUsT0FBTyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ2hFLE9BQU8sRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLG9CQUFvQixFQUFFLFFBQVEsRUFBRSxHQUFHLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUN0SCxPQUFPLEVBQ0gsWUFBWSxFQUVaLG1CQUFtQixFQUNuQixVQUFVLEVBQ2IsTUFBTSxvQkFBb0IsQ0FBQztBQUM1QixPQUFPLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBcUJqRixNQUFNLE9BQU8sb0JBQW9CO0lBeUY3QixZQUNZLG1CQUF3QyxFQUN4QyxVQUFzQjtRQUR0Qix3QkFBbUIsR0FBbkIsbUJBQW1CLENBQXFCO1FBQ3hDLGVBQVUsR0FBVixVQUFVLENBQVk7UUFuRmxDLFNBQUksR0FBMkIsUUFBUSxDQUFDO1FBV3hDLGFBQVEsR0FBWSxL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QUFNO3dCQUdOLFNBQVMsU0FBQyxXQUFXIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgRm9ybUNvbnRyb2wgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQge1xuICAgIENvbXBvbmVudCxcbiAgICBPbkluaXQsXG4gICAgT3V0cHV0LFxuICAgIEV2ZW50RW1pdHRlcixcbiAgICBWaWV3RW5jYXBzdWxhdGlvbixcbiAgICBJbnB1dCxcbiAgICBTaW1wbGVDaGFuZ2VzLFxuICAgIE9uQ2hhbmdlcyxcbiAgICBPbkRlc3Ryb3ksXG4gICAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksXG4gICAgVmlld0NoaWxkLCBFbGVtZW50UmVmLCBTaW1wbGVDaGFuZ2Vcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBvZiwgQmVoYXZpb3JTdWJqZWN0LCBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBzd2l0Y2hNYXAsIGRlYm91bmNlVGltZSwgZGlzdGluY3RVbnRpbENoYW5nZWQsIG1lcmdlTWFwLCB0YXAsIGZpbHRlciwgbWFwLCB0YWtlVW50aWwgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQge1xuICAgIEZ1bGxOYW1lUGlwZSxcbiAgICBJZGVudGl0eVVzZXJNb2RlbCxcbiAgICBJZGVudGl0eVVzZXJTZXJ2aWNlLFxuICAgIExvZ1NlcnZpY2Vcbn0gZnJvbSAnQGFsZnJlc2NvL2FkZi1jb3JlJztcbmltcG9ydCB7IHRyaWdnZXIsIHN0YXRlLCBzdHlsZSwgdHJhbnNpdGlvbiwgYW5pbWF0ZSB9IGZyb20gJ0Bhbmd1bGFyL2FuaW1hdGlvbnMnO1xuaW1wb3J0IHsgQ29tcG9uZW50U2VsZWN0aW9uTW9kZSB9IGZyb20gJy4uLy4uL3R5cGVzJztcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICdhZGYtY2xvdWQtcGVvcGxlJyxcbiAgICB0ZW1wbGF0ZVVybDogJy4vcGVvcGxlLWNsb3VkLmNvbXBvbmVudC5odG1sJyxcbiAgICBzdHlsZVVybHM6IFsnLi9wZW9wbGUtY2xvdWQuY29tcG9uZW50LnNjc3MnXSxcbiAgICBhbmltYXRpb25zOiBbXG4gICAgICAgIHRyaWdnZXIoJ3RyYW5zaXRpb25NZXNzYWdlcycsIFtcbiAgICAgICAgICAgIHN0YXRlKCdlbnRlcicsIHN0eWxlKHsgb3BhY2l0eTogMSwgdHJhbnNmb3JtOiAndHJhbnNsYXRlWSgwJSknIH0pKSxcbiAgICAgICAgICAgIHRyYW5zaXRpb24oJ3ZvaWQgPT4gZW50ZXInLCBbXG4gICAgICAgICAgICAgICAgc3R5bGUoeyBvcGFjaXR5OiAwLCB0cmFuc2Zvcm06ICd0cmFuc2xhdGVZKC0xMDAlKScgfSksXG4gICAgICAgICAgICAgICAgYW5pbWF0ZSgnMzAwbXMgY3ViaWMtYmV6aWVyKDAuNTUsIDAsIDAuNTUsIDAuMiknKVxuICAgICAgICAgICAgXSlcbiAgICAgICAgXSlcbiAgICBdLFxuICAgIHByb3ZpZGVyczogW0Z1bGxOYW1lUGlwZV0sXG4gICAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gICAgZW5jYXBzdWxhdGlvbjogVmlld0VuY2Fwc3VsYXRpb24uTm9uZVxufSlcblxuZXhwb3J0IGNsYXNzIFBlb3BsZUNsb3VkQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBPbkNoYW5nZXMsIE9uRGVzdHJveSB7XG5cbiAgICAvKiogTmFtZSBvZiB0aGUgYXBwbGljYXRpb24uIElmIHNwZWNpZmllZCwgdGhpcyBzaG93cyB0aGUgdXNlcnMgd2hvIGhhdmUgYWNjZXNzIHRvIHRoZSBhcHAuICovXG4gICAgQElucHV0KClcbiAgICBhcHBOYW1lOiBzdHJpbmc7XG5cbiAgICAvKiogVXNlciBzZWxlY3Rpb24gbW9kZSAoc2luZ2xlL211bHRpcGxlKS4gKi9cbiAgICBASW5wdXQoKVxuICAgIG1vZGU6IENvbXBvbmVudFNlbGVjdGlvbk1vZGUgPSAnc2luZ2xlJztcblxuICAgIC8qKiBSb2xlIG5hbWVzIG9mIHRoZSB1c2VycyB0byBiZSBsaXN0ZWQuICovXG4gICAgQElucHV0KClcbiAgICByb2xlczogc3RyaW5nW107XG5cbiAgICAvKiogVGhpcyBmbGFnIGVuYWJsZXMgdGhlIHZhbGlkYXRpb24gb24gdGhlIHByZVNlbGVjdFVzZXJzIHBhc3NlZCBhcyBpbnB1dC5cbiAgICAgKiBJbiBjYXNlIHRoZSBmbGFnIGlzIHRydWUgdGhlIGNvbXBvbmVudHMgY2FsbCB0aGUgaWRlbnRpdHkgc2VydmljZSB0byB2ZXJpZnkgdGhlIHZhbGlkaXR5IG9mIHRoZSBpbmZvcm1hdGlvbiBwYXNzZWQgYXMgaW5wdXQuXG4gICAgICogT3RoZXJ3aXNlLCBubyBjaGVjayB3aWxsIGJlIGRvbmUuXG4gICAgICovXG4gICAgQElucHV0KClcbiAgICB2YWxpZGF0ZTogYm9vbGVhbiA9IGZhbHNlO1xuXG4gICAgLyoqIFNob3cgdGhlIGluZm8gaW4gcmVhZG9ubHkgbW9kZVxuICAgICAqL1xuICAgIEBJbnB1dCgpXG4gICAgcmVhZE9ubHk6IGJvb2xlYW4gPSBmYWxzZTtcblxuICAgIC8qKiBBcnJheSBvZiB1c2VycyB0byBiZSBwcmUtc2VsZWN0ZWQuIEFsbCB1c2VycyBpbiB0aGVcbiAgICAgKiBhcnJheSBhcmUgcHJlLXNlbGVjdGVkIGluIG11bHRpIHNlbGVjdGlvbiBtb2RlLCBidXQgb25seSB0aGUgZmlyc3QgdXNlclxuICAgICAqIGlzIHByZS1zZWxlY3RlZCBpbiBzaW5nbGUgc2VsZWN0aW9uIG1vZGUuXG4gICAgICogTWFuZGF0b3J5IHByb3BlcnRpZXMgYXJlOiBpZCwgZW1haWwsIHVzZXJuYW1lXG4gICAgICovXG4gICAgQElucHV0KClcbiAgICBwcmVTZWxlY3RVc2VyczogSWRlbnRpdHlVc2VyTW9kZWxbXSA9IFtdO1xuXG4gICAgLyoqIEFycmF5IG9mIHVzZXJzIHRvIGJlIGV4Y2x1ZGVkLlxuICAgICAqIE1hbmRhdG9yeSBwcm9wZXJ0aWVzIGFyZTogaWQsIGVtYWlsLCB1c2VybmFtZVxuICAgICAqL1xuICAgIEBJbnB1dCgpXG4gICAgZXhjbHVkZWRVc2VyczogSWRlbnRpdHlVc2VyTW9kZWxbXSA9IFtdO1xuXG4gICAgLyoqIEZvcm1Db250cm9sIHRvIGxpc3Qgb2YgdXNlcnMgKi9cbiAgICBASW5wdXQoKVxuICAgIHVzZXJDaGlwc0N0cmw6IEZvcm1Db250cm9sID0gbmV3IEZvcm1Db250cm9sKHsgdmFsdWU6ICcnLCBkaXNhYmxlZDogZmFsc2UgfSk7XG5cbiAgICAvKiogRm9ybUNvbnRyb2wgdG8gc2VhcmNoIHRoZSB1c2VyICovXG4gICAgQElucHV0KClcbiAgICBzZWFyY2hVc2VyQ3RybCA9IG5ldyBGb3JtQ29udHJvbCh7IHZhbHVlOiAnJywgZGlzYWJsZWQ6IGZhbHNlIH0pO1xuXG4gICAgLyoqIFBsYWNlaG9sZGVyIHRyYW5zbGF0aW9uIGtleVxuICAgICAqL1xuICAgIEBJbnB1dCgpXG4gICAgdGl0bGU6IHN0cmluZztcblxuICAgIC8qKiBFbWl0dGVkIHdoZW4gYSB1c2VyIGlzIHNlbGVjdGVkLiAqL1xuICAgIEBPdXRwdXQoKVxuICAgIHNlbGVjdFVzZXIgPSBuZXcgRXZlbnRFbWl0dGVyPElkZW50aXR5VXNlck1vZGVsPigpO1xuXG4gICAgLyoqIEVtaXR0ZWQgd2hlbiBhIHNlbGVjdGVkIHVzZXIgaXMgcmVtb3ZlZCBpbiBtdWx0aSBzZWxlY3Rpb24gbW9kZS4gKi9cbiAgICBAT3V0cHV0KClcbiAgICByZW1vdmVVc2VyID0gbmV3IEV2ZW50RW1pdHRlcjxJZGVudGl0eVVzZXJNb2RlbD4oKTtcblxuICAgIC8qKiBFbWl0dGVkIHdoZW4gYSB1c2VyIHNlbGVjdGlvbiBjaGFuZ2UuICovXG4gICAgQE91dHB1dCgpXG4gICAgY2hhbmdlZFVzZXJzID0gbmV3IEV2ZW50RW1pdHRlcjxJZGVudGl0eVVzZXJNb2RlbFtdPigpO1xuXG4gICAgLyoqIEVtaXR0ZWQgd2hlbiBhbiB3YXJuaW5nIG9jY3Vycy4gKi9cbiAgICBAT3V0cHV0KClcbiAgICB3YXJuaW5nID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XG5cbiAgICBAVmlld0NoaWxkKCd1c2VySW5wdXQnKVxuICAgIHByaXZhdGUgdXNlcklucHV0OiBFbGVtZW50UmVmPEhUTUxJbnB1dEVsZW1lbnQ+O1xuXG4gICAgcHJpdmF0ZSBfc2VhcmNoVXNlcnM6IElkZW50aXR5VXNlck1vZGVsW10gPSBbXTtcbiAgICBwcml2YXRlIG9uRGVzdHJveSQgPSBuZXcgU3ViamVjdDxib29sZWFuPigpO1xuXG4gICAgc2VsZWN0ZWRVc2VyczogSWRlbnRpdHlVc2VyTW9kZWxbXSA9IFtdO1xuICAgIGludmFsaWRVc2VyczogSWRlbnRpdHlVc2VyTW9kZWxbXSA9IFtdO1xuXG4gICAgc2VhcmNoVXNlcnMkID0gbmV3IEJlaGF2aW9yU3ViamVjdDxJZGVudGl0eVVzZXJNb2RlbFtdPih0aGlzLl9zZWFyY2hVc2Vycyk7XG4gICAgX3N1YnNjcmlwdEFuaW1hdGlvblN0YXRlOiBzdHJpbmcgPSAnZW50ZXInO1xuICAgIGNsaWVudElkOiBzdHJpbmc7XG4gICAgaXNGb2N1c2VkOiBib29sZWFuO1xuXG4gICAgdmFsaWRhdGVVc2Vyc01lc3NhZ2U6IHN0cmluZztcbiAgICBzZWFyY2hlZFZhbHVlID0gJyc7XG5cbiAgICB2YWxpZGF0aW9uTG9hZGluZyA9IGZhbHNlO1xuICAgIHNlYXJjaExvYWRpbmcgPSBmYWxzZTtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBwcml2YXRlIGlkZW50aXR5VXNlclNlcnZpY2U6IElkZW50aXR5VXNlclNlcnZpY2UsXG4gICAgICAgIHByaXZhdGUgbG9nU2VydmljZTogTG9nU2VydmljZSkge31cblxuICAgIG5nT25Jbml0KCk6IHZvaWQge1xuICAgICAgICB0aGlzLmxvYWRDbGllbnRJZCgpO1xuICAgICAgICB0aGlzLmluaXRTZWFyY2goKTtcbiAgICB9XG5cbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZCB7XG4gICAgICAgIGlmICh0aGlzLnZhbHVlQ2hhbmdlZChjaGFuZ2VzLnByZVNlbGVjdFVzZXJzKVxuICAgICAgICAgICAgfHwgdGhpcy52YWx1ZUNoYW5nZWQoY2hhbmdlcy5tb2RlKVxuICAgICAgICAgICAgfHwgdGhpcy52YWx1ZUNoYW5nZWQoY2hhbmdlcy52YWxpZGF0ZSlcbiAgICAgICAgKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5oYXNQcmVTZWxlY3RVc2VycygpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5sb2FkUHJlU2VsZWN0VXNlcnMoKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5oYXNQcmVzZWxlY3RlZFVzZXJzQ2xlYXJlZChjaGFuZ2VzKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRVc2VycyA9IFtdO1xuICAgICAgICAgICAgICAgIHRoaXMuaW52YWxpZFVzZXJzID0gW107XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICghdGhpcy5pc1ZhbGlkYXRpb25FbmFibGVkKCkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmludmFsaWRVc2VycyA9IFtdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNoYW5nZXMuYXBwTmFtZSAmJiB0aGlzLmlzQXBwTmFtZUNoYW5nZWQoY2hhbmdlcy5hcHBOYW1lKSkge1xuICAgICAgICAgICAgdGhpcy5sb2FkQ2xpZW50SWQoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgYXN5bmMgbG9hZENsaWVudElkKCk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICB0aGlzLmNsaWVudElkID0gYXdhaXQgdGhpcy5pZGVudGl0eVVzZXJTZXJ2aWNlLmdldENsaWVudElkQnlBcHBsaWNhdGlvbk5hbWUodGhpcy5hcHBOYW1lKS50b1Byb21pc2UoKTtcbiAgICAgICAgaWYgKHRoaXMuY2xpZW50SWQpIHtcbiAgICAgICAgICAgIHRoaXMuc2VhcmNoVXNlckN0cmwuZW5hYmxlKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGluaXRTZWFyY2goKTogdm9pZCB7XG4gICAgICAgIHRoaXMuc2VhcmNoVXNlckN0cmwudmFsdWVDaGFuZ2VzLnBpcGUoXG4gICAgICAgICAgICBmaWx0ZXIoKHZhbHVlKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZWFyY2hMb2FkaW5nID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJztcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgdGFwKCh2YWx1ZTogc3RyaW5nKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0VHlwaW5nRXJyb3IoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIGRlYm91bmNlVGltZSg1MDApLFxuICAgICAgICAgICAgZGlzdGluY3RVbnRpbENoYW5nZWQoKSxcbiAgICAgICAgICAgIHRhcCgodmFsdWU6IHN0cmluZykgPT4ge1xuICAgICAgICAgICAgICAgIGlmICh2YWx1ZS50cmltKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZWFyY2hlZFZhbHVlID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZWFyY2hVc2VyQ3RybC5tYXJrQXNQcmlzdGluZSgpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNlYXJjaFVzZXJDdHJsLm1hcmtBc1VudG91Y2hlZCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgdGFwKCgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLnJlc2V0U2VhcmNoVXNlcnMoKTtcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgc3dpdGNoTWFwKChzZWFyY2gpID0+XG4gICAgICAgICAgICAgICAgdGhpcy5pZGVudGl0eVVzZXJTZXJ2aWNlLmZpbmRVc2Vyc0J5TmFtZShzZWFyY2gudHJpbSgpKSksXG4gICAgICAgICAgICBtZXJnZU1hcCgodXNlcnMpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLnJlc2V0U2VhcmNoVXNlcnMoKTtcbiAgICAgICAgICAgICAgICB0aGlzLnNlYXJjaExvYWRpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdXNlcnM7XG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIGZpbHRlcih1c2VyID0+ICF0aGlzLmlzVXNlckFscmVhZHlTZWxlY3RlZCh1c2VyKSAmJiAhdGhpcy5pc0V4Y2x1ZGVkVXNlcih1c2VyKSksXG4gICAgICAgICAgICBtZXJnZU1hcCh1c2VyID0+IHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5hcHBOYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmNoZWNrVXNlckhhc0FjY2Vzcyh1c2VyLmlkKS5waXBlKFxuICAgICAgICAgICAgICAgICAgICAgICAgbWVyZ2VNYXAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFzUm9sZSA9PiBoYXNSb2xlID8gb2YodXNlcikgOiBvZigpXG4gICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLmhhc1JvbGVzKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZmlsdGVyVXNlcnNCeVJvbGVzKHVzZXIpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBvZih1c2VyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIHRha2VVbnRpbCh0aGlzLm9uRGVzdHJveSQpXG4gICAgICAgICkuc3Vic2NyaWJlKHVzZXIgPT4ge1xuICAgICAgICAgICAgdGhpcy5fc2VhcmNoVXNlcnMucHVzaCh1c2VyKTtcbiAgICAgICAgICAgIHRoaXMuc2VhcmNoVXNlcnMkLm5leHQodGhpcy5fc2VhcmNoVXNlcnMpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5vbkRlc3Ryb3kkLm5leHQodHJ1ZSk7XG4gICAgICAgIHRoaXMub25EZXN0cm95JC5jb21wbGV0ZSgpO1xuICAgIH1cblxuICAgIHByaXZhdGUgaXNBcHBOYW1lQ2hhbmdlZChjaGFuZ2U6IFNpbXBsZUNoYW5nZSk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gY2hhbmdlICYmIGNoYW5nZS5wcmV2aW91c1ZhbHVlICE9PSBjaGFuZ2UuY3VycmVudFZhbHVlICYmIHRoaXMuYXBwTmFtZSAmJiB0aGlzLmFwcE5hbWUubGVuZ3RoID4gMDtcbiAgICB9XG5cbiAgICBpc1ZhbGlkYXRpb25FbmFibGVkKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy52YWxpZGF0ZSA9PT0gdHJ1ZTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGNoZWNrVXNlckhhc0FjY2Vzcyh1c2VySWQ6IHN0cmluZyk6IE9ic2VydmFibGU8Ym9vbGVhbj4ge1xuICAgICAgICBpZiAodGhpcy5oYXNSb2xlcygpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5pZGVudGl0eVVzZXJTZXJ2aWNlLmNoZWNrVXNlckhhc0FueUNsaWVudEFwcFJvbGUodXNlcklkLCB0aGlzLmNsaWVudElkLCB0aGlzLnJvbGVzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmlkZW50aXR5VXNlclNlcnZpY2UuY2hlY2tVc2VySGFzQ2xpZW50QXBwKHVzZXJJZCwgdGhpcy5jbGllbnRJZCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGhhc1JvbGVzKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5yb2xlcyAmJiB0aGlzLnJvbGVzLmxlbmd0aCA+IDA7XG4gICAgfVxuXG4gICAgZmlsdGVyVXNlcnNCeVJvbGVzKHVzZXI6IElkZW50aXR5VXNlck1vZGVsKTogT2JzZXJ2YWJsZTxJZGVudGl0eVVzZXJNb2RlbD4ge1xuICAgICAgICByZXR1cm4gdGhpcy5pZGVudGl0eVVzZXJTZXJ2aWNlLmNoZWNrVXNlckhhc1JvbGUodXNlci5pZCwgdGhpcy5yb2xlcykucGlwZShcbiAgICAgICAgICAgIG1hcCgoaGFzUm9sZTogYm9vbGVhbikgPT4gKHsgaGFzUm9sZTogaGFzUm9sZSwgdXNlcjogdXNlciB9KSksXG4gICAgICAgICAgICBmaWx0ZXIoKGZpbHRlcmVkVXNlcjogeyBoYXNSb2xlOiBib29sZWFuLCB1c2VyOiBJZGVudGl0eVVzZXJNb2RlbCB9KSA9PiBmaWx0ZXJlZFVzZXIuaGFzUm9sZSksXG4gICAgICAgICAgICBtYXAoKGZpbHRlcmVkVXNlcjogeyBoYXNSb2xlOiBib29sZWFuLCB1c2VyOiBJZGVudGl0eVVzZXJNb2RlbCB9KSA9PiBmaWx0ZXJlZFVzZXIudXNlcikpO1xuICAgIH1cblxuICAgIHByaXZhdGUgaXNVc2VyQWxyZWFkeVNlbGVjdGVkKHNlYXJjaFVzZXI6IElkZW50aXR5VXNlck1vZGVsKTogYm9vbGVhbiB7XG4gICAgICAgIGlmICh0aGlzLnNlbGVjdGVkVXNlcnMgJiYgdGhpcy5zZWxlY3RlZFVzZXJzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMuc2VsZWN0ZWRVc2Vycy5maW5kKChzZWxlY3RlZFVzZXIpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5jb21wYXJlKHNlbGVjdGVkVXNlciwgc2VhcmNoVXNlcik7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgcmV0dXJuICEhcmVzdWx0O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGlzRXhjbHVkZWRVc2VyKHNlYXJjaFVzZXI6IElkZW50aXR5VXNlck1vZGVsKTogYm9vbGVhbiB7XG4gICAgICAgIGlmICh0aGlzLmV4Y2x1ZGVkVXNlcnM/Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHJldHVybiAhIXRoaXMuZXhjbHVkZWRVc2Vycy5maW5kKGV4Y2x1ZGVkVXNlciA9PiB0aGlzLmNvbXBhcmUoZXhjbHVkZWRVc2VyLCBzZWFyY2hVc2VyKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHByaXZhdGUgYXN5bmMgbG9hZFByZVNlbGVjdFVzZXJzKCk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICB0aGlzLnNlbGVjdGVkVXNlcnMgPSBbXTtcblxuICAgICAgICBpZiAodGhpcy5pc1NpbmdsZU1vZGUoKSkge1xuICAgICAgICAgICAgdGhpcy5zZWxlY3RlZFVzZXJzID0gW3RoaXMucHJlU2VsZWN0VXNlcnNbMF1dO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5zZWxlY3RlZFVzZXJzID0gdGhpcy5yZW1vdmVEdXBsaWNhdGVkVXNlcnModGhpcy5wcmVTZWxlY3RVc2Vycyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy51c2VyQ2hpcHNDdHJsLnNldFZhbHVlKHRoaXMuc2VsZWN0ZWRVc2Vyc1swXS51c2VybmFtZSk7XG4gICAgICAgIGlmICh0aGlzLmlzVmFsaWRhdGlvbkVuYWJsZWQoKSkge1xuICAgICAgICAgICAgdGhpcy52YWxpZGF0aW9uTG9hZGluZyA9IHRydWU7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLnZhbGlkYXRlUHJlc2VsZWN0VXNlcnMoKTtcbiAgICAgICAgICAgIHRoaXMudmFsaWRhdGlvbkxvYWRpbmcgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgZ2V0UHJlc2VsZWN0ZWRVc2VycygpOiBJZGVudGl0eVVzZXJNb2RlbFtdIHtcbiAgICAgICAgaWYgKHRoaXMuaXNTaW5nbGVNb2RlKCkpIHtcbiAgICAgICAgICAgIHJldHVybiBbdGhpcy5wcmVTZWxlY3RVc2Vyc1swXV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5yZW1vdmVEdXBsaWNhdGVkVXNlcnModGhpcy5wcmVTZWxlY3RVc2Vycyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBhc3luYyB2YWxpZGF0ZVByZXNlbGVjdFVzZXJzKCk6IFByb21pc2U8YW55PiB7XG4gICAgICAgIHRoaXMuaW52YWxpZFVzZXJzID0gW107XG4gICAgICAgIGNvbnN0IHZhbGlkVXNlcnM6IElkZW50aXR5VXNlck1vZGVsW10gPSBbXTtcblxuICAgICAgICBmb3IgKGNvbnN0IHVzZXIgb2YgdGhpcy5nZXRQcmVzZWxlY3RlZFVzZXJzKCkpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgY29uc3QgdmFsaWRhdGlvblJlc3VsdCA9IGF3YWl0IHRoaXMuc2VhcmNoVXNlcih1c2VyKTtcblxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmNvbXBhcmUodXNlciwgdmFsaWRhdGlvblJlc3VsdCkpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsaWRhdGlvblJlc3VsdC5yZWFkb25seSA9IHVzZXIucmVhZG9ubHk7XG4gICAgICAgICAgICAgICAgICAgIHZhbGlkVXNlcnMucHVzaCh2YWxpZGF0aW9uUmVzdWx0KTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmludmFsaWRVc2Vycy5wdXNoKHVzZXIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5pbnZhbGlkVXNlcnMucHVzaCh1c2VyKTtcbiAgICAgICAgICAgICAgICB0aGlzLmxvZ1NlcnZpY2UuZXJyb3IoZXJyb3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5jaGVja1ByZXNlbGVjdFZhbGlkYXRpb25FcnJvcnMoKTtcbiAgICAgICAgdGhpcy5zZWxlY3RlZFVzZXJzID0gdmFsaWRVc2Vycy5jb25jYXQodGhpcy5pbnZhbGlkVXNlcnMpO1xuICAgIH1cblxuICAgIGNvbXBhcmUocHJlc2VsZWN0ZWRVc2VyOiBJZGVudGl0eVVzZXJNb2RlbCwgaWRlbnRpdHlVc2VyOiBJZGVudGl0eVVzZXJNb2RlbCk6IGJvb2xlYW4ge1xuICAgICAgICBpZiAocHJlc2VsZWN0ZWRVc2VyICYmIGlkZW50aXR5VXNlcikge1xuICAgICAgICAgICAgY29uc3QgdW5pcXVlUHJvcGVydHlJZGVudGlmaWVycyA9IFsnaWQnLCAndXNlcm5hbWUnLCAnZW1haWwnXTtcbiAgICAgICAgICAgIGZvciAoY29uc3QgcHJvcGVydHkgb2YgT2JqZWN0LmtleXMocHJlc2VsZWN0ZWRVc2VyKSkge1xuICAgICAgICAgICAgICAgIGlmIChwcmVzZWxlY3RlZFVzZXJbcHJvcGVydHldICE9PSB1bmRlZmluZWQgJiYgdW5pcXVlUHJvcGVydHlJZGVudGlmaWVycy5pbmNsdWRlcyhwcm9wZXJ0eSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHByZXNlbGVjdGVkVXNlcltwcm9wZXJ0eV0gPT09IGlkZW50aXR5VXNlcltwcm9wZXJ0eV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGdldFNlYXJjaEtleSh1c2VyOiBJZGVudGl0eVVzZXJNb2RlbCk6IHN0cmluZyB7XG4gICAgICAgIGlmICh1c2VyLmlkKSB7XG4gICAgICAgICAgICByZXR1cm4gJ2lkJztcbiAgICAgICAgfSBlbHNlIGlmICh1c2VyLmVtYWlsKSB7XG4gICAgICAgICAgICByZXR1cm4gJ2VtYWlsJztcbiAgICAgICAgfSBlbHNlIGlmICh1c2VyLnVzZXJuYW1lKSB7XG4gICAgICAgICAgICByZXR1cm4gJ3VzZXJuYW1lJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgYXN5bmMgc2VhcmNoVXNlcih1c2VyOiBJZGVudGl0eVVzZXJNb2RlbCk6IFByb21pc2U8SWRlbnRpdHlVc2VyTW9kZWw+IHtcbiAgICAgICAgY29uc3Qga2V5ID0gdGhpcy5nZXRTZWFyY2hLZXkodXNlcik7XG5cbiAgICAgICAgc3dpdGNoIChrZXkpIHtcbiAgICAgICAgICAgIGNhc2UgJ2lkJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5pZGVudGl0eVVzZXJTZXJ2aWNlLmZpbmRVc2VyQnlJZCh1c2VyW2tleV0pLnRvUHJvbWlzZSgpO1xuICAgICAgICAgICAgY2FzZSAndXNlcm5hbWUnOlxuICAgICAgICAgICAgICAgIHJldHVybiAoYXdhaXQgdGhpcy5pZGVudGl0eVVzZXJTZXJ2aWNlLmZpbmRVc2VyQnlVc2VybmFtZSh1c2VyW2tleV0pLnRvUHJvbWlzZSgpKVswXTtcbiAgICAgICAgICAgIGNhc2UgJ2VtYWlsJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gKGF3YWl0IHRoaXMuaWRlbnRpdHlVc2VyU2VydmljZS5maW5kVXNlckJ5RW1haWwodXNlcltrZXldKS50b1Byb21pc2UoKSlbMF07XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmVtb3ZlRHVwbGljYXRlZFVzZXJzKHVzZXJzOiBJZGVudGl0eVVzZXJNb2RlbFtdKTogSWRlbnRpdHlVc2VyTW9kZWxbXSB7XG4gICAgICAgIHJldHVybiB1c2Vycy5maWx0ZXIoKHVzZXIsIGluZGV4LCBzZWxmKSA9PlxuICAgICAgICAgICAgaW5kZXggPT09IHNlbGYuZmluZEluZGV4KGF1eFVzZXIgPT5cbiAgICAgICAgICAgICAgICB1c2VyLmlkID09PSBhdXhVc2VyLmlkICYmIHVzZXIudXNlcm5hbWUgPT09IGF1eFVzZXIudXNlcm5hbWUgJiYgdXNlci5lbWFpbCA9PT0gYXV4VXNlci5lbWFpbFxuICAgICAgICAgICAgKSk7XG4gICAgfVxuXG4gICAgY2hlY2tQcmVzZWxlY3RWYWxpZGF0aW9uRXJyb3JzKCk6IHZvaWQge1xuICAgICAgICB0aGlzLmludmFsaWRVc2VycyA9IHRoaXMucmVtb3ZlRHVwbGljYXRlZFVzZXJzKHRoaXMuaW52YWxpZFVzZXJzKTtcblxuICAgICAgICBpZiAodGhpcy5pbnZhbGlkVXNlcnMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgdGhpcy5nZW5lcmF0ZUludmFsaWRVc2Vyc01lc3NhZ2UoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMud2FybmluZy5lbWl0KHtcbiAgICAgICAgICAgIG1lc3NhZ2U6ICdJTlZBTElEX1BSRVNFTEVDVEVEX1VTRVJTJyxcbiAgICAgICAgICAgIHVzZXJzOiB0aGlzLmludmFsaWRVc2Vyc1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBvblNlbGVjdCh1c2VyOiBJZGVudGl0eVVzZXJNb2RlbCk6IHZvaWQge1xuICAgICAgICBpZiAodXNlcikge1xuICAgICAgICAgICAgdGhpcy5zZWxlY3RVc2VyLmVtaXQodXNlcik7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLmlzTXVsdGlwbGVNb2RlKCkpIHtcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuaXNVc2VyQWxyZWFkeVNlbGVjdGVkKHVzZXIpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRVc2Vycy5wdXNoKHVzZXIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5pbnZhbGlkVXNlcnMgPSBbXTtcbiAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdGVkVXNlcnMgPSBbdXNlcl07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMudXNlcklucHV0Lm5hdGl2ZUVsZW1lbnQudmFsdWUgPSAnJztcbiAgICAgICAgICAgIHRoaXMuc2VhcmNoVXNlckN0cmwuc2V0VmFsdWUoJycpO1xuICAgICAgICAgICAgdGhpcy51c2VyQ2hpcHNDdHJsVmFsdWUodGhpcy5zZWxlY3RlZFVzZXJzWzBdLnVzZXJuYW1lKTtcblxuICAgICAgICAgICAgdGhpcy5jaGFuZ2VkVXNlcnMuZW1pdCh0aGlzLnNlbGVjdGVkVXNlcnMpO1xuICAgICAgICAgICAgdGhpcy5yZXNldFNlYXJjaFVzZXJzKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBvblJlbW92ZSh1c2VyVG9SZW1vdmU6IElkZW50aXR5VXNlck1vZGVsKTogdm9pZCB7XG4gICAgICAgIHRoaXMucmVtb3ZlVXNlci5lbWl0KHVzZXJUb1JlbW92ZSk7XG4gICAgICAgIHRoaXMucmVtb3ZlVXNlckZyb21TZWxlY3RlZCh1c2VyVG9SZW1vdmUpO1xuICAgICAgICB0aGlzLmNoYW5nZWRVc2Vycy5lbWl0KHRoaXMuc2VsZWN0ZWRVc2Vycyk7XG4gICAgICAgIGlmICh0aGlzLnNlbGVjdGVkVXNlcnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICB0aGlzLnVzZXJDaGlwc0N0cmxWYWx1ZSgnJyk7XG5cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMudXNlckNoaXBzQ3RybFZhbHVlKHRoaXMuc2VsZWN0ZWRVc2Vyc1swXS51c2VybmFtZSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zZWFyY2hVc2VyQ3RybC5tYXJrQXNEaXJ0eSgpO1xuICAgICAgICB0aGlzLnNlYXJjaFVzZXJDdHJsLm1hcmtBc1RvdWNoZWQoKTtcblxuICAgICAgICBpZiAodGhpcy5pc1ZhbGlkYXRpb25FbmFibGVkKCkpIHtcbiAgICAgICAgICAgIHRoaXMucmVtb3ZlVXNlckZyb21WYWxpZGF0aW9uKHVzZXJUb1JlbW92ZSk7XG4gICAgICAgICAgICB0aGlzLmNoZWNrUHJlc2VsZWN0VmFsaWRhdGlvbkVycm9ycygpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSB1c2VyQ2hpcHNDdHJsVmFsdWUodmFsdWU6IHN0cmluZykge1xuICAgICAgICB0aGlzLnVzZXJDaGlwc0N0cmwuc2V0VmFsdWUodmFsdWUpO1xuICAgICAgICB0aGlzLnVzZXJDaGlwc0N0cmwubWFya0FzRGlydHkoKTtcbiAgICAgICAgdGhpcy51c2VyQ2hpcHNDdHJsLm1hcmtBc1RvdWNoZWQoKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHJlbW92ZVVzZXJGcm9tU2VsZWN0ZWQoeyBpZCwgdXNlcm5hbWUsIGVtYWlsIH06IElkZW50aXR5VXNlck1vZGVsKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IGluZGV4VG9SZW1vdmUgPSB0aGlzLnNlbGVjdGVkVXNlcnMuZmluZEluZGV4KHVzZXIgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHVzZXIuaWQgPT09IGlkXG4gICAgICAgICAgICAgICAgJiYgdXNlci51c2VybmFtZSA9PT0gdXNlcm5hbWVcbiAgICAgICAgICAgICAgICAmJiB1c2VyLmVtYWlsID09PSBlbWFpbDtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKGluZGV4VG9SZW1vdmUgIT09IC0xKSB7XG4gICAgICAgICAgICB0aGlzLnNlbGVjdGVkVXNlcnMuc3BsaWNlKGluZGV4VG9SZW1vdmUsIDEpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSByZW1vdmVVc2VyRnJvbVZhbGlkYXRpb24oeyBpZCwgdXNlcm5hbWUsIGVtYWlsIH06IElkZW50aXR5VXNlck1vZGVsKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IGluZGV4VG9SZW1vdmUgPSB0aGlzLmludmFsaWRVc2Vycy5maW5kSW5kZXgodXNlciA9PiB7XG4gICAgICAgICAgICByZXR1cm4gdXNlci5pZCA9PT0gaWRcbiAgICAgICAgICAgICAgICAmJiB1c2VyLnVzZXJuYW1lID09PSB1c2VybmFtZVxuICAgICAgICAgICAgICAgICYmIHVzZXIuZW1haWwgPT09IGVtYWlsO1xuICAgICAgICB9KTtcblxuICAgICAgICBpZiAoaW5kZXhUb1JlbW92ZSAhPT0gLTEpIHtcbiAgICAgICAgICAgIHRoaXMuaW52YWxpZFVzZXJzLnNwbGljZShpbmRleFRvUmVtb3ZlLCAxKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGdlbmVyYXRlSW52YWxpZFVzZXJzTWVzc2FnZSgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy52YWxpZGF0ZVVzZXJzTWVzc2FnZSA9ICcnO1xuXG4gICAgICAgIHRoaXMuaW52YWxpZFVzZXJzLmZvckVhY2goKGludmFsaWRVc2VyLCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgaWYgKGluZGV4ID09PSB0aGlzLmludmFsaWRVc2Vycy5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgICAgICAgdGhpcy52YWxpZGF0ZVVzZXJzTWVzc2FnZSArPSBgJHtpbnZhbGlkVXNlci51c2VybmFtZX0gYDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy52YWxpZGF0ZVVzZXJzTWVzc2FnZSArPSBgJHtpbnZhbGlkVXNlci51c2VybmFtZX0sIGA7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHNldFR5cGluZ0Vycm9yKCk6IHZvaWQge1xuICAgICAgICB0aGlzLnNlYXJjaFVzZXJDdHJsLnNldEVycm9ycyh7XG4gICAgICAgICAgICBzZWFyY2hUeXBpbmdFcnJvcjogdHJ1ZSxcbiAgICAgICAgICAgIC4uLnRoaXMuc2VhcmNoVXNlckN0cmwuZXJyb3JzXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGhhc1ByZXNlbGVjdEVycm9yKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5pbnZhbGlkVXNlcnNcbiAgICAgICAgICAgICYmIHRoaXMuaW52YWxpZFVzZXJzLmxlbmd0aCA+IDA7XG4gICAgfVxuXG4gICAgZ2V0RGlzcGxheU5hbWUodXNlcik6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiBGdWxsTmFtZVBpcGUucHJvdG90eXBlLnRyYW5zZm9ybSh1c2VyKTtcbiAgICB9XG5cbiAgICBpc011bHRpcGxlTW9kZSgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubW9kZSA9PT0gJ211bHRpcGxlJztcbiAgICB9XG5cbiAgICBpc1NpbmdsZU1vZGUoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLm1vZGUgPT09ICdzaW5nbGUnO1xuICAgIH1cblxuICAgIHByaXZhdGUgaXNTaW5nbGVTZWxlY3Rpb25SZWFkb25seSgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNTaW5nbGVNb2RlKClcbiAgICAgICAgICAgICYmIHRoaXMuc2VsZWN0ZWRVc2Vycy5sZW5ndGggPT09IDFcbiAgICAgICAgICAgICYmIHRoaXMuc2VsZWN0ZWRVc2Vyc1swXS5yZWFkb25seSA9PT0gdHJ1ZTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGhhc1ByZVNlbGVjdFVzZXJzKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5wcmVTZWxlY3RVc2Vyc1xuICAgICAgICAgICAgJiYgdGhpcy5wcmVTZWxlY3RVc2Vycy5sZW5ndGggPiAwO1xuICAgIH1cblxuICAgIHByaXZhdGUgdmFsdWVDaGFuZ2VkKGNoYW5nZTogU2ltcGxlQ2hhbmdlKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiBjaGFuZ2VcbiAgICAgICAgICAgICYmIGNoYW5nZS5jdXJyZW50VmFsdWUgIT09IGNoYW5nZS5wcmV2aW91c1ZhbHVlO1xuICAgIH1cblxuICAgIHByaXZhdGUgaGFzUHJlc2VsZWN0ZWRVc2Vyc0NsZWFyZWQoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gY2hhbmdlc1xuICAgICAgICAgICAgJiYgY2hhbmdlcy5wcmVTZWxlY3RVc2Vyc1xuICAgICAgICAgICAgJiYgY2hhbmdlcy5wcmVTZWxlY3RVc2Vycy5jdXJyZW50VmFsdWVcbiAgICAgICAgICAgICYmIGNoYW5nZXMucHJlU2VsZWN0VXNlcnMuY3VycmVudFZhbHVlLmxlbmd0aCA9PT0gMDtcbiAgICB9XG5cbiAgICBwcml2YXRlIHJlc2V0U2VhcmNoVXNlcnMoKTogdm9pZCB7XG4gICAgICAgIHRoaXMuX3NlYXJjaFVzZXJzID0gW107XG4gICAgICAgIHRoaXMuc2VhcmNoVXNlcnMkLm5leHQodGhpcy5fc2VhcmNoVXNlcnMpO1xuICAgIH1cblxuICAgIGdldFNlbGVjdGVkVXNlcnMoKTogSWRlbnRpdHlVc2VyTW9kZWxbXSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNlbGVjdGVkVXNlcnM7XG4gICAgfVxuXG4gICAgaXNSZWFkb25seSgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVhZE9ubHkgfHwgdGhpcy5pc1NpbmdsZVNlbGVjdGlvblJlYWRvbmx5KCk7XG4gICAgfVxuXG4gICAgaXNWYWxpZGF0aW9uTG9hZGluZygpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNWYWxpZGF0aW9uRW5hYmxlZCgpICYmIHRoaXMudmFsaWRhdGlvbkxvYWRpbmc7XG4gICAgfVxuXG4gICAgc2V0Rm9jdXMoaXNGb2N1c2VkOiBib29sZWFuKSB7XG4gICAgICAgIHRoaXMuaXNGb2N1c2VkID0gaXNGb2N1c2VkO1xuICAgIH1cblxuICAgIGhhc0Vycm9yKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gISF0aGlzLnNlYXJjaFVzZXJDdHJsLmVycm9ycztcbiAgICB9XG5cbiAgICBnZXRWYWxpZGF0aW9uUGF0dGVybigpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gdGhpcy5zZWFyY2hVc2VyQ3RybC5lcnJvcnMucGF0dGVybi5yZXF1aXJlZFBhdHRlcm47XG4gICAgfVxuXG4gICAgZ2V0VmFsaWRhdGlvbk1heExlbmd0aCgpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gdGhpcy5zZWFyY2hVc2VyQ3RybC5lcnJvcnMubWF4bGVuZ3RoLnJlcXVpcmVkTGVuZ3RoO1xuICAgIH1cblxuICAgIGdldFZhbGlkYXRpb25NaW5MZW5ndGgoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2VhcmNoVXNlckN0cmwuZXJyb3JzLm1pbmxlbmd0aC5yZXF1aXJlZExlbmd0aDtcbiAgICB9XG59XG4iXX0=