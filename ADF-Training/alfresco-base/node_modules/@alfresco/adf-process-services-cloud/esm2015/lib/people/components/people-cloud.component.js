/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { __awaiter } from "tslib";
import { FormControl } from '@angular/forms';
import { Component, Output, EventEmitter, ViewEncapsulation, Input, ChangeDetectionStrategy, ViewChild, ElementRef } from '@angular/core';
import { of, BehaviorSubject, Subject } from 'rxjs';
import { switchMap, debounceTime, distinctUntilChanged, mergeMap, tap, filter, map, takeUntil } from 'rxjs/operators';
import { FullNamePipe, IdentityUserService, LogService } from '@alfresco/adf-core';
import { trigger, state, style, transition, animate } from '@angular/animations';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@alfresco/adf-core';
import * as ɵngcc2 from '@angular/forms';
import * as ɵngcc3 from '@angular/material/form-field';
import * as ɵngcc4 from '@angular/common';
import * as ɵngcc5 from '@angular/material/chips';
import * as ɵngcc6 from '@angular/material/autocomplete';
import * as ɵngcc7 from '@angular/material/tooltip';
import * as ɵngcc8 from '@angular/material/icon';
import * as ɵngcc9 from '@angular/material/input';
import * as ɵngcc10 from '@angular/material/core';
import * as ɵngcc11 from '@angular/material/progress-bar';
import * as ɵngcc12 from '@ngx-translate/core';

const _c0 = ["userInput"];
function PeopleCloudComponent_mat_label_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-label", 13);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(2, 1, ctx_r0.title));
} }
function PeopleCloudComponent_mat_chip_5_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-icon", 16);
    ɵngcc0.ɵɵtext(1, " cancel ");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const user_r15 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵattribute("data-automation-id", "adf-people-cloud-chip-remove-icon-" + user_r15.username);
} }
function PeopleCloudComponent_mat_chip_5_Template(rf, ctx) { if (rf & 1) {
    const _r19 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "mat-chip", 14);
    ɵngcc0.ɵɵlistener("removed", function PeopleCloudComponent_mat_chip_5_Template_mat_chip_removed_0_listener() { ɵngcc0.ɵɵrestoreView(_r19); const user_r15 = ctx.$implicit; const ctx_r18 = ɵngcc0.ɵɵnextContext(); return ctx_r18.onRemove(user_r15); });
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "fullName");
    ɵngcc0.ɵɵtemplate(4, PeopleCloudComponent_mat_chip_5_mat_icon_4_Template, 2, 1, "mat-icon", 15);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const user_r15 = ctx.$implicit;
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵpropertyInterpolate("matTooltip", ɵngcc0.ɵɵpipeBind1(1, 5, user_r15.readonly ? "ADF_CLOUD_GROUPS.MANDATORY" : ""));
    ɵngcc0.ɵɵproperty("removable", !user_r15.readonly);
    ɵngcc0.ɵɵattribute("data-automation-id", "adf-people-cloud-chip-" + user_r15.username);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(3, 7, user_r15), " ");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", !(user_r15.readonly || ctx_r2.readOnly));
} }
function PeopleCloudComponent_input_6_Template(rf, ctx) { if (rf & 1) {
    const _r22 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "input", 17, 18);
    ɵngcc0.ɵɵlistener("focus", function PeopleCloudComponent_input_6_Template_input_focus_0_listener() { ɵngcc0.ɵɵrestoreView(_r22); const ctx_r21 = ɵngcc0.ɵɵnextContext(); return ctx_r21.setFocus(true); })("blur", function PeopleCloudComponent_input_6_Template_input_blur_0_listener() { ɵngcc0.ɵɵrestoreView(_r22); const ctx_r23 = ɵngcc0.ɵɵnextContext(); return ctx_r23.setFocus(false); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = ɵngcc0.ɵɵnextContext();
    const _r4 = ɵngcc0.ɵɵreference(8);
    const _r1 = ɵngcc0.ɵɵreference(4);
    ɵngcc0.ɵɵproperty("formControl", ctx_r3.searchUserCtrl)("matAutocomplete", _r4)("matChipInputFor", _r1);
} }
function PeopleCloudComponent_ng_container_9_mat_option_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-option", 20);
    ɵngcc0.ɵɵelementStart(1, "div", 21);
    ɵngcc0.ɵɵelement(2, "div", 22);
    ɵngcc0.ɵɵpipe(3, "usernameInitials");
    ɵngcc0.ɵɵelementStart(4, "span", 23);
    ɵngcc0.ɵɵtext(5);
    ɵngcc0.ɵɵpipe(6, "fullName");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const user_r25 = ctx.$implicit;
    ɵngcc0.ɵɵproperty("value", user_r25);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate1("id", "adf-people-cloud-user-", user_r25.username, "");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("outerHTML", ɵngcc0.ɵɵpipeBind2(3, 4, user_r25, "adf-people-cloud-pic"), ɵngcc0.ɵɵsanitizeHtml);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(6, 7, user_r25), "");
} }
function PeopleCloudComponent_ng_container_9_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, PeopleCloudComponent_ng_container_9_mat_option_1_Template, 7, 9, "mat-option", 19);
    ɵngcc0.ɵɵpipe(2, "async");
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r5 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", ɵngcc0.ɵɵpipeBind1(2, 1, ctx_r5.searchUsers$));
} }
const _c1 = function (a0) { return { userName: a0 }; };
function PeopleCloudComponent_ng_template_11_mat_option_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-option", 25);
    ɵngcc0.ɵɵelementStart(1, "span");
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r27 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind2(3, 1, "ADF_CLOUD_USERS.ERROR.NOT_FOUND", ɵngcc0.ɵɵpureFunction1(4, _c1, ctx_r27.searchedValue)), "");
} }
function PeopleCloudComponent_ng_template_11_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, PeopleCloudComponent_ng_template_11_mat_option_0_Template, 4, 6, "mat-option", 24);
} if (rf & 2) {
    const ctx_r7 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngIf", ctx_r7.searchUserCtrl.hasError("searchTypingError") && !ctx_r7.searchLoading);
} }
function PeopleCloudComponent_mat_progress_bar_13_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "mat-progress-bar", 26);
} }
function PeopleCloudComponent_mat_error_14_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-error");
    ɵngcc0.ɵɵelementStart(1, "mat-icon", 27);
    ɵngcc0.ɵɵtext(2, "warning");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵpipe(4, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r9 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind2(4, 1, "ADF_CLOUD_USERS.ERROR.NOT_FOUND", ɵngcc0.ɵɵpureFunction1(4, _c1, ctx_r9.validateUsersMessage)), "");
} }
const _c2 = function (a0) { return { pattern: a0 }; };
function PeopleCloudComponent_mat_error_15_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-error");
    ɵngcc0.ɵɵelementStart(1, "mat-icon", 27);
    ɵngcc0.ɵɵtext(2, "warning");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵpipe(4, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r10 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind2(4, 1, "ADF_CLOUD_PEOPLE_GROUPS.ERROR.INVALID_PATTERN", ɵngcc0.ɵɵpureFunction1(4, _c2, ctx_r10.getValidationPattern())), "");
} }
const _c3 = function (a0) { return { requiredLength: a0 }; };
function PeopleCloudComponent_mat_error_16_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-error");
    ɵngcc0.ɵɵelementStart(1, "mat-icon", 27);
    ɵngcc0.ɵɵtext(2, "warning");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵpipe(4, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r11 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind2(4, 1, "ADF_CLOUD_PEOPLE_GROUPS.ERROR.INVALID_MAX_LENGTH", ɵngcc0.ɵɵpureFunction1(4, _c3, ctx_r11.getValidationMaxLength())), " ");
} }
function PeopleCloudComponent_mat_error_17_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-error");
    ɵngcc0.ɵɵelementStart(1, "mat-icon", 27);
    ɵngcc0.ɵɵtext(2, "warning");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵpipe(4, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r12 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind2(4, 1, "ADF_CLOUD_PEOPLE_GROUPS.ERROR.INVALID_MIN_LENGTH", ɵngcc0.ɵɵpureFunction1(4, _c3, ctx_r12.getValidationMinLength())), "");
} }
function PeopleCloudComponent_mat_error_18_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-error");
    ɵngcc0.ɵɵelementStart(1, "mat-icon", 27);
    ɵngcc0.ɵɵtext(2, "warning");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵpipe(4, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(4, 1, "ADF_CLOUD_PEOPLE_GROUPS.ERROR.REQUIRED"), " ");
} }
function PeopleCloudComponent_mat_error_19_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-error", 28);
    ɵngcc0.ɵɵelementStart(1, "mat-icon", 27);
    ɵngcc0.ɵɵtext(2, "warning");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵpipe(4, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r14 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind2(4, 1, "ADF_CLOUD_USERS.ERROR.NOT_FOUND", ɵngcc0.ɵɵpureFunction1(4, _c1, ctx_r14.searchedValue)), "");
} }
export class PeopleCloudComponent {
    constructor(identityUserService, logService) {
        this.identityUserService = identityUserService;
        this.logService = logService;
        this.mode = 'single';
        this.validate = false;
        this.readOnly = false;
        this.preSelectUsers = [];
        this.excludedUsers = [];
        this.userChipsCtrl = new FormControl({ value: '', disabled: false });
        this.searchUserCtrl = new FormControl({ value: '', disabled: false });
        this.selectUser = new EventEmitter();
        this.removeUser = new EventEmitter();
        this.changedUsers = new EventEmitter();
        this.warning = new EventEmitter();
        this._searchUsers = [];
        this.onDestroy$ = new Subject();
        this.selectedUsers = [];
        this.invalidUsers = [];
        this.searchUsers$ = new BehaviorSubject(this._searchUsers);
        this._subscriptAnimationState = 'enter';
        this.searchedValue = '';
        this.validationLoading = false;
        this.searchLoading = false;
    }
    ngOnInit() {
        this.loadClientId();
        this.initSearch();
    }
    ngOnChanges(changes) {
        if (this.valueChanged(changes.preSelectUsers)
            || this.valueChanged(changes.mode)
            || this.valueChanged(changes.validate)) {
            if (this.hasPreSelectUsers()) {
                this.loadPreSelectUsers();
            }
            else if (this.hasPreselectedUsersCleared(changes)) {
                this.selectedUsers = [];
                this.invalidUsers = [];
            }
            if (!this.isValidationEnabled()) {
                this.invalidUsers = [];
            }
        }
        if (changes.appName && this.isAppNameChanged(changes.appName)) {
            this.loadClientId();
        }
    }
    loadClientId() {
        return __awaiter(this, void 0, void 0, function* () {
            this.clientId = yield this.identityUserService.getClientIdByApplicationName(this.appName).toPromise();
            if (this.clientId) {
                this.searchUserCtrl.enable();
            }
        });
    }
    initSearch() {
        this.searchUserCtrl.valueChanges.pipe(filter((value) => {
            this.searchLoading = true;
            return typeof value === 'string';
        }), tap((value) => {
            if (value) {
                this.setTypingError();
            }
        }), debounceTime(500), distinctUntilChanged(), tap((value) => {
            if (value.trim()) {
                this.searchedValue = value;
            }
            else {
                this.searchUserCtrl.markAsPristine();
                this.searchUserCtrl.markAsUntouched();
            }
        }), tap(() => {
            this.resetSearchUsers();
        }), switchMap((search) => this.identityUserService.findUsersByName(search.trim())), mergeMap((users) => {
            this.resetSearchUsers();
            this.searchLoading = false;
            return users;
        }), filter(user => !this.isUserAlreadySelected(user) && !this.isExcludedUser(user)), mergeMap(user => {
            if (this.appName) {
                return this.checkUserHasAccess(user.id).pipe(mergeMap(hasRole => hasRole ? of(user) : of()));
            }
            else if (this.hasRoles()) {
                return this.filterUsersByRoles(user);
            }
            else {
                return of(user);
            }
        }), takeUntil(this.onDestroy$)).subscribe(user => {
            this._searchUsers.push(user);
            this.searchUsers$.next(this._searchUsers);
        });
    }
    ngOnDestroy() {
        this.onDestroy$.next(true);
        this.onDestroy$.complete();
    }
    isAppNameChanged(change) {
        return change && change.previousValue !== change.currentValue && this.appName && this.appName.length > 0;
    }
    isValidationEnabled() {
        return this.validate === true;
    }
    checkUserHasAccess(userId) {
        if (this.hasRoles()) {
            return this.identityUserService.checkUserHasAnyClientAppRole(userId, this.clientId, this.roles);
        }
        else {
            return this.identityUserService.checkUserHasClientApp(userId, this.clientId);
        }
    }
    hasRoles() {
        return this.roles && this.roles.length > 0;
    }
    filterUsersByRoles(user) {
        return this.identityUserService.checkUserHasRole(user.id, this.roles).pipe(map((hasRole) => ({ hasRole: hasRole, user: user })), filter((filteredUser) => filteredUser.hasRole), map((filteredUser) => filteredUser.user));
    }
    isUserAlreadySelected(searchUser) {
        if (this.selectedUsers && this.selectedUsers.length > 0) {
            const result = this.selectedUsers.find((selectedUser) => {
                return this.compare(selectedUser, searchUser);
            });
            return !!result;
        }
        return false;
    }
    isExcludedUser(searchUser) {
        var _a;
        if (((_a = this.excludedUsers) === null || _a === void 0 ? void 0 : _a.length) > 0) {
            return !!this.excludedUsers.find(excludedUser => this.compare(excludedUser, searchUser));
        }
        return false;
    }
    loadPreSelectUsers() {
        return __awaiter(this, void 0, void 0, function* () {
            this.selectedUsers = [];
            if (this.isSingleMode()) {
                this.selectedUsers = [this.preSelectUsers[0]];
            }
            else {
                this.selectedUsers = this.removeDuplicatedUsers(this.preSelectUsers);
            }
            this.userChipsCtrl.setValue(this.selectedUsers[0].username);
            if (this.isValidationEnabled()) {
                this.validationLoading = true;
                yield this.validatePreselectUsers();
                this.validationLoading = false;
            }
        });
    }
    getPreselectedUsers() {
        if (this.isSingleMode()) {
            return [this.preSelectUsers[0]];
        }
        else {
            return this.removeDuplicatedUsers(this.preSelectUsers);
        }
    }
    validatePreselectUsers() {
        return __awaiter(this, void 0, void 0, function* () {
            this.invalidUsers = [];
            const validUsers = [];
            for (const user of this.getPreselectedUsers()) {
                try {
                    const validationResult = yield this.searchUser(user);
                    if (this.compare(user, validationResult)) {
                        validationResult.readonly = user.readonly;
                        validUsers.push(validationResult);
                    }
                    else {
                        this.invalidUsers.push(user);
                    }
                }
                catch (error) {
                    this.invalidUsers.push(user);
                    this.logService.error(error);
                }
            }
            this.checkPreselectValidationErrors();
            this.selectedUsers = validUsers.concat(this.invalidUsers);
        });
    }
    compare(preselectedUser, identityUser) {
        if (preselectedUser && identityUser) {
            const uniquePropertyIdentifiers = ['id', 'username', 'email'];
            for (const property of Object.keys(preselectedUser)) {
                if (preselectedUser[property] !== undefined && uniquePropertyIdentifiers.includes(property)) {
                    return preselectedUser[property] === identityUser[property];
                }
            }
        }
        return false;
    }
    getSearchKey(user) {
        if (user.id) {
            return 'id';
        }
        else if (user.email) {
            return 'email';
        }
        else if (user.username) {
            return 'username';
        }
        else {
            return null;
        }
    }
    searchUser(user) {
        return __awaiter(this, void 0, void 0, function* () {
            const key = this.getSearchKey(user);
            switch (key) {
                case 'id':
                    return this.identityUserService.findUserById(user[key]).toPromise();
                case 'username':
                    return (yield this.identityUserService.findUserByUsername(user[key]).toPromise())[0];
                case 'email':
                    return (yield this.identityUserService.findUserByEmail(user[key]).toPromise())[0];
                default:
                    return null;
            }
        });
    }
    removeDuplicatedUsers(users) {
        return users.filter((user, index, self) => index === self.findIndex(auxUser => user.id === auxUser.id && user.username === auxUser.username && user.email === auxUser.email));
    }
    checkPreselectValidationErrors() {
        this.invalidUsers = this.removeDuplicatedUsers(this.invalidUsers);
        if (this.invalidUsers.length > 0) {
            this.generateInvalidUsersMessage();
        }
        this.warning.emit({
            message: 'INVALID_PRESELECTED_USERS',
            users: this.invalidUsers
        });
    }
    onSelect(user) {
        if (user) {
            this.selectUser.emit(user);
            if (this.isMultipleMode()) {
                if (!this.isUserAlreadySelected(user)) {
                    this.selectedUsers.push(user);
                }
            }
            else {
                this.invalidUsers = [];
                this.selectedUsers = [user];
            }
            this.userInput.nativeElement.value = '';
            this.searchUserCtrl.setValue('');
            this.userChipsCtrlValue(this.selectedUsers[0].username);
            this.changedUsers.emit(this.selectedUsers);
            this.resetSearchUsers();
        }
    }
    onRemove(userToRemove) {
        this.removeUser.emit(userToRemove);
        this.removeUserFromSelected(userToRemove);
        this.changedUsers.emit(this.selectedUsers);
        if (this.selectedUsers.length === 0) {
            this.userChipsCtrlValue('');
        }
        else {
            this.userChipsCtrlValue(this.selectedUsers[0].username);
        }
        this.searchUserCtrl.markAsDirty();
        this.searchUserCtrl.markAsTouched();
        if (this.isValidationEnabled()) {
            this.removeUserFromValidation(userToRemove);
            this.checkPreselectValidationErrors();
        }
    }
    userChipsCtrlValue(value) {
        this.userChipsCtrl.setValue(value);
        this.userChipsCtrl.markAsDirty();
        this.userChipsCtrl.markAsTouched();
    }
    removeUserFromSelected({ id, username, email }) {
        const indexToRemove = this.selectedUsers.findIndex(user => {
            return user.id === id
                && user.username === username
                && user.email === email;
        });
        if (indexToRemove !== -1) {
            this.selectedUsers.splice(indexToRemove, 1);
        }
    }
    removeUserFromValidation({ id, username, email }) {
        const indexToRemove = this.invalidUsers.findIndex(user => {
            return user.id === id
                && user.username === username
                && user.email === email;
        });
        if (indexToRemove !== -1) {
            this.invalidUsers.splice(indexToRemove, 1);
        }
    }
    generateInvalidUsersMessage() {
        this.validateUsersMessage = '';
        this.invalidUsers.forEach((invalidUser, index) => {
            if (index === this.invalidUsers.length - 1) {
                this.validateUsersMessage += `${invalidUser.username} `;
            }
            else {
                this.validateUsersMessage += `${invalidUser.username}, `;
            }
        });
    }
    setTypingError() {
        this.searchUserCtrl.setErrors(Object.assign({ searchTypingError: true }, this.searchUserCtrl.errors));
    }
    hasPreselectError() {
        return this.invalidUsers
            && this.invalidUsers.length > 0;
    }
    getDisplayName(user) {
        return FullNamePipe.prototype.transform(user);
    }
    isMultipleMode() {
        return this.mode === 'multiple';
    }
    isSingleMode() {
        return this.mode === 'single';
    }
    isSingleSelectionReadonly() {
        return this.isSingleMode()
            && this.selectedUsers.length === 1
            && this.selectedUsers[0].readonly === true;
    }
    hasPreSelectUsers() {
        return this.preSelectUsers
            && this.preSelectUsers.length > 0;
    }
    valueChanged(change) {
        return change
            && change.currentValue !== change.previousValue;
    }
    hasPreselectedUsersCleared(changes) {
        return changes
            && changes.preSelectUsers
            && changes.preSelectUsers.currentValue
            && changes.preSelectUsers.currentValue.length === 0;
    }
    resetSearchUsers() {
        this._searchUsers = [];
        this.searchUsers$.next(this._searchUsers);
    }
    getSelectedUsers() {
        return this.selectedUsers;
    }
    isReadonly() {
        return this.readOnly || this.isSingleSelectionReadonly();
    }
    isValidationLoading() {
        return this.isValidationEnabled() && this.validationLoading;
    }
    setFocus(isFocused) {
        this.isFocused = isFocused;
    }
    hasError() {
        return !!this.searchUserCtrl.errors;
    }
    getValidationPattern() {
        return this.searchUserCtrl.errors.pattern.requiredPattern;
    }
    getValidationMaxLength() {
        return this.searchUserCtrl.errors.maxlength.requiredLength;
    }
    getValidationMinLength() {
        return this.searchUserCtrl.errors.minlength.requiredLength;
    }
}
PeopleCloudComponent.ɵfac = function PeopleCloudComponent_Factory(t) { return new (t || PeopleCloudComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.IdentityUserService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.LogService)); };
PeopleCloudComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: PeopleCloudComponent, selectors: [["adf-cloud-people"]], viewQuery: function PeopleCloudComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c0, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.userInput = _t.first);
    } }, inputs: { mode: "mode", validate: "validate", readOnly: "readOnly", preSelectUsers: "preSelectUsers", excludedUsers: "excludedUsers", userChipsCtrl: "userChipsCtrl", searchUserCtrl: "searchUserCtrl", appName: "appName", roles: "roles", title: "title" }, outputs: { selectUser: "selectUser", removeUser: "removeUser", changedUsers: "changedUsers", warning: "warning" }, features: [ɵngcc0.ɵɵProvidersFeature([FullNamePipe]), ɵngcc0.ɵɵNgOnChangesFeature], decls: 20, vars: 17, consts: [[1, "adf-people-cloud", 3, "floatLabel"], ["id", "adf-people-cloud-title-id", 4, "ngIf"], ["data-automation-id", "adf-cloud-people-chip-list", 3, "disabled"], ["userMultipleChipList", ""], [3, "removable", "matTooltip", "removed", 4, "ngFor", "ngForOf"], ["matInput", "", "class", "adf-cloud-input", "data-automation-id", "adf-people-cloud-search-input", 3, "formControl", "matAutocomplete", "matChipInputFor", "focus", "blur", 4, "ngIf"], ["autoActiveFirstOption", "", 1, "adf-people-cloud-list", 3, "displayWith", "optionSelected"], ["auto", "matAutocomplete"], [4, "ngIf", "ngIfElse"], ["noResults", ""], ["mode", "indeterminate", 4, "ngIf"], [4, "ngIf"], ["data-automation-id", "invalid-users-typing-error", 4, "ngIf"], ["id", "adf-people-cloud-title-id"], [3, "removable", "matTooltip", "removed"], ["matChipRemove", "", 4, "ngIf"], ["matChipRemove", ""], ["matInput", "", "data-automation-id", "adf-people-cloud-search-input", 1, "adf-cloud-input", 3, "formControl", "matAutocomplete", "matChipInputFor", "focus", "blur"], ["userInput", ""], [3, "value", 4, "ngFor", "ngForOf"], [3, "value"], ["data-automation-id", "adf-people-cloud-row", 1, "adf-people-cloud-row", 3, "id"], [3, "outerHTML"], [1, "adf-people-label-name"], ["disabled", "", "class", "adf-people-cloud-option-not-active", "data-automation-id", "adf-people-cloud-no-results", 4, "ngIf"], ["disabled", "", "data-automation-id", "adf-people-cloud-no-results", 1, "adf-people-cloud-option-not-active"], ["mode", "indeterminate"], [1, "adf-start-task-cloud-error-icon"], ["data-automation-id", "invalid-users-typing-error"]], template: function PeopleCloudComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "form");
        ɵngcc0.ɵɵelementStart(1, "mat-form-field", 0);
        ɵngcc0.ɵɵtemplate(2, PeopleCloudComponent_mat_label_2_Template, 3, 3, "mat-label", 1);
        ɵngcc0.ɵɵelementStart(3, "mat-chip-list", 2, 3);
        ɵngcc0.ɵɵtemplate(5, PeopleCloudComponent_mat_chip_5_Template, 5, 9, "mat-chip", 4);
        ɵngcc0.ɵɵtemplate(6, PeopleCloudComponent_input_6_Template, 2, 3, "input", 5);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(7, "mat-autocomplete", 6, 7);
        ɵngcc0.ɵɵlistener("optionSelected", function PeopleCloudComponent_Template_mat_autocomplete_optionSelected_7_listener($event) { return ctx.onSelect($event.option.value); });
        ɵngcc0.ɵɵtemplate(9, PeopleCloudComponent_ng_container_9_Template, 3, 3, "ng-container", 8);
        ɵngcc0.ɵɵpipe(10, "async");
        ɵngcc0.ɵɵtemplate(11, PeopleCloudComponent_ng_template_11_Template, 1, 1, "ng-template", null, 9, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(13, PeopleCloudComponent_mat_progress_bar_13_Template, 1, 0, "mat-progress-bar", 10);
        ɵngcc0.ɵɵtemplate(14, PeopleCloudComponent_mat_error_14_Template, 5, 6, "mat-error", 11);
        ɵngcc0.ɵɵtemplate(15, PeopleCloudComponent_mat_error_15_Template, 5, 6, "mat-error", 11);
        ɵngcc0.ɵɵtemplate(16, PeopleCloudComponent_mat_error_16_Template, 5, 6, "mat-error", 11);
        ɵngcc0.ɵɵtemplate(17, PeopleCloudComponent_mat_error_17_Template, 5, 6, "mat-error", 11);
        ɵngcc0.ɵɵtemplate(18, PeopleCloudComponent_mat_error_18_Template, 5, 3, "mat-error", 11);
        ɵngcc0.ɵɵtemplate(19, PeopleCloudComponent_mat_error_19_Template, 5, 6, "mat-error", 12);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        const _r6 = ɵngcc0.ɵɵreference(12);
        var tmp_6_0 = null;
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("floatLabel", "auto");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.isReadonly());
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("disabled", ctx.isReadonly() || ctx.isValidationLoading());
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.selectedUsers);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.isReadonly());
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("displayWith", ctx.getDisplayName);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", (tmp_6_0 = ɵngcc0.ɵɵpipeBind1(10, 15, ctx.searchUsers$)) == null ? null : tmp_6_0.length)("ngIfElse", _r6);
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵproperty("ngIf", ctx.validationLoading);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.hasPreselectError() && !ctx.isValidationLoading());
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.searchUserCtrl.hasError("pattern"));
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.searchUserCtrl.hasError("maxlength"));
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.searchUserCtrl.hasError("minlength"));
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.searchUserCtrl.hasError("required") || ctx.userChipsCtrl.hasError("required"));
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.searchUserCtrl.hasError("searchTypingError") && !ctx.isFocused);
    } }, directives: [ɵngcc2.ɵangular_packages_forms_forms_y, ɵngcc2.NgControlStatusGroup, ɵngcc2.NgForm, ɵngcc3.MatFormField, ɵngcc4.NgIf, ɵngcc5.MatChipList, ɵngcc4.NgForOf, ɵngcc6.MatAutocomplete, ɵngcc3.MatLabel, ɵngcc5.MatChip, ɵngcc7.MatTooltip, ɵngcc8.MatIcon, ɵngcc5.MatChipRemove, ɵngcc9.MatInput, ɵngcc2.DefaultValueAccessor, ɵngcc6.MatAutocompleteTrigger, ɵngcc5.MatChipInput, ɵngcc2.NgControlStatus, ɵngcc2.FormControlDirective, ɵngcc10.MatOption, ɵngcc11.MatProgressBar, ɵngcc3.MatError], pipes: [ɵngcc4.AsyncPipe, ɵngcc12.TranslatePipe, ɵngcc1.FullNamePipe, ɵngcc1.InitialUsernamePipe], styles: [".adf-people-cloud{width:100%}.adf-people-cloud-option-not-active{background:inherit!important}.adf-people-cloud-list{margin:5px 0;padding:10px 0}.adf-people-cloud-row{align-items:center;column-gap:10px;display:flex}.adf-people-cloud-pic{align-items:center;background:var(--theme-primary-color);border-radius:100px;color:var(--theme-text-fg-color);display:flex;font-size:18px;font-weight:bolder;height:40px;justify-content:center;text-transform:uppercase;width:40px}.adf-start-task-cloud-error{height:20px;margin-top:-10px;position:absolute}.adf-start-task-cloud-error-message{color:var(--theme-warn-color);font-size:12px;height:16px;line-height:1.33;padding-right:8px;width:auto}.adf-start-task-cloud-error-icon{color:var(--theme-warn-color);font-size:17px}"], encapsulation: 2, data: { animation: [
            trigger('transitionMessages', [
                state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),
                transition('void => enter', [
                    style({ opacity: 0, transform: 'translateY(-100%)' }),
                    animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)')
                ])
            ])
        ] }, changeDetection: 0 });
PeopleCloudComponent.ctorParameters = () => [
    { type: IdentityUserService },
    { type: LogService }
];
PeopleCloudComponent.propDecorators = {
    appName: [{ type: Input }],
    mode: [{ type: Input }],
    roles: [{ type: Input }],
    validate: [{ type: Input }],
    readOnly: [{ type: Input }],
    preSelectUsers: [{ type: Input }],
    excludedUsers: [{ type: Input }],
    userChipsCtrl: [{ type: Input }],
    searchUserCtrl: [{ type: Input }],
    title: [{ type: Input }],
    selectUser: [{ type: Output }],
    removeUser: [{ type: Output }],
    changedUsers: [{ type: Output }],
    warning: [{ type: Output }],
    userInput: [{ type: ViewChild, args: ['userInput',] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(PeopleCloudComponent, [{
        type: Component,
        args: [{
                selector: 'adf-cloud-people',
                template: "<form>\n    <mat-form-field [floatLabel]=\"'auto'\" class=\"adf-people-cloud\">\n        <mat-label *ngIf=\"!isReadonly()\" id=\"adf-people-cloud-title-id\">{{ title | translate }}</mat-label>\n        <mat-chip-list #userMultipleChipList [disabled]=\"isReadonly() || isValidationLoading()\" data-automation-id=\"adf-cloud-people-chip-list\">\n            <mat-chip\n                *ngFor=\"let user of selectedUsers\"\n                [removable]=\"!(user.readonly)\"\n                [attr.data-automation-id]=\"'adf-people-cloud-chip-' + user.username\"\n                (removed)=\"onRemove(user)\"\n                matTooltip=\"{{ (user.readonly ? 'ADF_CLOUD_GROUPS.MANDATORY' : '') | translate }}\">\n                {{user | fullName}}\n                <mat-icon\n                    matChipRemove\n                    *ngIf=\"!(user.readonly || readOnly)\"\n                    [attr.data-automation-id]=\"'adf-people-cloud-chip-remove-icon-' + user.username\">\n                    cancel\n                </mat-icon>\n            </mat-chip>\n            <input *ngIf=\"!isReadonly()\" matInput\n                   [formControl]=\"searchUserCtrl\"\n                   [matAutocomplete]=\"auto\"\n                   [matChipInputFor]=\"userMultipleChipList\"\n                   (focus)=\"setFocus(true)\"\n                   (blur)=\"setFocus(false)\"\n                   class=\"adf-cloud-input\"\n                   data-automation-id=\"adf-people-cloud-search-input\" #userInput>\n        </mat-chip-list>\n\n        <mat-autocomplete autoActiveFirstOption class=\"adf-people-cloud-list\"\n                          #auto=\"matAutocomplete\"\n                          (optionSelected)=\"onSelect($event.option.value)\"\n                          [displayWith]=\"getDisplayName\">\n            <ng-container *ngIf=\"(searchUsers$ | async)?.length else noResults\" >\n            <mat-option *ngFor=\"let user of searchUsers$ | async; let i = index\" [value]=\"user\">\n                <div class=\"adf-people-cloud-row\" id=\"adf-people-cloud-user-{{user.username}}\"\n                     data-automation-id=\"adf-people-cloud-row\">\n                    <div [outerHTML]=\"user | usernameInitials:'adf-people-cloud-pic'\"></div>\n                    <span class=\"adf-people-label-name\"> {{user | fullName}}</span>\n                </div>\n            </mat-option>\n            </ng-container>\n            <ng-template #noResults>\n                <mat-option *ngIf=\"searchUserCtrl.hasError('searchTypingError') && !searchLoading\" disabled\n                            class=\"adf-people-cloud-option-not-active\"\n                            data-automation-id=\"adf-people-cloud-no-results\">\n                    <span> {{ 'ADF_CLOUD_USERS.ERROR.NOT_FOUND' | translate : { userName: searchedValue } }}</span>\n                </mat-option>\n            </ng-template>\n        </mat-autocomplete>\n    </mat-form-field>\n    <mat-progress-bar\n        *ngIf=\"validationLoading\"\n        mode=\"indeterminate\">\n    </mat-progress-bar>\n\n    <mat-error *ngIf=\"hasPreselectError() && !isValidationLoading()\">\n        <mat-icon class=\"adf-start-task-cloud-error-icon\">warning</mat-icon>\n        {{ 'ADF_CLOUD_USERS.ERROR.NOT_FOUND' | translate : { userName : validateUsersMessage } }}</mat-error>\n    <mat-error *ngIf=\"searchUserCtrl.hasError('pattern')\">\n        <mat-icon class=\"adf-start-task-cloud-error-icon\">warning</mat-icon>\n        {{ 'ADF_CLOUD_PEOPLE_GROUPS.ERROR.INVALID_PATTERN' | translate: { pattern: getValidationPattern() } }}</mat-error>\n    <mat-error *ngIf=\"searchUserCtrl.hasError('maxlength')\">\n        <mat-icon class=\"adf-start-task-cloud-error-icon\">warning</mat-icon>\n        {{ 'ADF_CLOUD_PEOPLE_GROUPS.ERROR.INVALID_MAX_LENGTH' | translate: { requiredLength: getValidationMaxLength() } }}\n    </mat-error>\n    <mat-error *ngIf=\"searchUserCtrl.hasError('minlength')\">\n        <mat-icon class=\"adf-start-task-cloud-error-icon\">warning</mat-icon>\n        {{ 'ADF_CLOUD_PEOPLE_GROUPS.ERROR.INVALID_MIN_LENGTH' | translate: { requiredLength: getValidationMinLength() } }}</mat-error>\n    <mat-error *ngIf=\"searchUserCtrl.hasError('required') || userChipsCtrl.hasError('required')\">\n        <mat-icon class=\"adf-start-task-cloud-error-icon\">warning</mat-icon>\n        {{ 'ADF_CLOUD_PEOPLE_GROUPS.ERROR.REQUIRED' | translate }} </mat-error>\n    <mat-error *ngIf=\"searchUserCtrl.hasError('searchTypingError') && !this.isFocused\" data-automation-id=\"invalid-users-typing-error\">\n        <mat-icon class=\"adf-start-task-cloud-error-icon\">warning</mat-icon>\n        {{ 'ADF_CLOUD_USERS.ERROR.NOT_FOUND' | translate : { userName : searchedValue } }}</mat-error>\n</form>\n",
                animations: [
                    trigger('transitionMessages', [
                        state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),
                        transition('void => enter', [
                            style({ opacity: 0, transform: 'translateY(-100%)' }),
                            animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)')
                        ])
                    ])
                ],
                providers: [FullNamePipe],
                changeDetection: ChangeDetectionStrategy.OnPush,
                encapsulation: ViewEncapsulation.None,
                styles: [".adf-people-cloud{width:100%}.adf-people-cloud-option-not-active{background:inherit!important}.adf-people-cloud-list{margin:5px 0;padding:10px 0}.adf-people-cloud-row{align-items:center;column-gap:10px;display:flex}.adf-people-cloud-pic{align-items:center;background:var(--theme-primary-color);border-radius:100px;color:var(--theme-text-fg-color);display:flex;font-size:18px;font-weight:bolder;height:40px;justify-content:center;text-transform:uppercase;width:40px}.adf-start-task-cloud-error{height:20px;margin-top:-10px;position:absolute}.adf-start-task-cloud-error-message{color:var(--theme-warn-color);font-size:12px;height:16px;line-height:1.33;padding-right:8px;width:auto}.adf-start-task-cloud-error-icon{color:var(--theme-warn-color);font-size:17px}"]
            }]
    }], function () { return [{ type: ɵngcc1.IdentityUserService }, { type: ɵngcc1.LogService }]; }, { mode: [{
            type: Input
        }], validate: [{
            type: Input
        }], readOnly: [{
            type: Input
        }], preSelectUsers: [{
            type: Input
        }], excludedUsers: [{
            type: Input
        }], userChipsCtrl: [{
            type: Input
        }], searchUserCtrl: [{
            type: Input
        }], selectUser: [{
            type: Output
        }], removeUser: [{
            type: Output
        }], changedUsers: [{
            type: Output
        }], warning: [{
            type: Output
        }], appName: [{
            type: Input
        }], roles: [{
            type: Input
        }], title: [{
            type: Input
        }], userInput: [{
            type: ViewChild,
            args: ['userInput']
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,