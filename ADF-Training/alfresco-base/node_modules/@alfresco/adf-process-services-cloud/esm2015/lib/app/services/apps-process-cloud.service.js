import { Injectable } from '@angular/core';
import { from, throwError, of } from 'rxjs';
import { map, catchError } from 'rxjs/operators';
import { AlfrescoApiService, AppConfigService, LogService } from '@alfresco/adf-core';
import * as i0 from "@angular/core";
import * as i1 from "@alfresco/adf-core";
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@alfresco/adf-core';
export class AppsProcessCloudService {
    constructor(apiService, logService, appConfigService) {
        this.apiService = apiService;
        this.logService = logService;
        this.appConfigService = appConfigService;
        this.loadApps();
    }
    getDeployedApplicationsByStatus(status, role) {
        return this.hasDeployedApps() ? of(this.deployedApps) : this.getApplicationsByStatus(status, role);
    }
    hasDeployedApps() {
        return this.deployedApps && this.deployedApps.length > 0;
    }
    loadApps() {
        const apps = this.appConfigService.get('alfresco-deployed-apps', []);
        apps.map((app) => {
            app.theme = app.theme ? app.theme : 'theme-1';
            app.icon = app.icon ? app.icon : 'favorite';
        });
        this.deployedApps = apps;
    }
    getApplicationsByStatus(status, role) {
        if (status === '') {
            return of([]);
        }
        const api = this.apiService.getInstance().oauth2Auth;
        const path = this.getApplicationUrl();
        const pathParams = {}, queryParams = { status: status, roles: role, sort: 'name' }, headerParams = {}, formParams = {}, bodyParam = {}, contentTypes = ['application/json'], accepts = ['application/json'];
        return from(api.callCustomApi(path, 'GET', pathParams, queryParams, headerParams, formParams, bodyParam, contentTypes, accepts))
            .pipe(map((applications) => {
            return applications.list.entries.map((application) => application.entry);
        }), catchError((err) => this.handleError(err)));
    }
    getApplicationUrl() {
        return `${this.appConfigService.get('bpmHost')}/deployment-service/v1/applications`;
    }
    handleError(error) {
        this.logService.error(error);
        return throwError(error || 'Server error');
    }
}
AppsProcessCloudService.ɵfac = function AppsProcessCloudService_Factory(t) { return new (t || AppsProcessCloudService)(ɵngcc0.ɵɵinject(ɵngcc1.AlfrescoApiService), ɵngcc0.ɵɵinject(ɵngcc1.LogService), ɵngcc0.ɵɵinject(ɵngcc1.AppConfigService)); };
AppsProcessCloudService.ɵprov = i0.ɵɵdefineInjectable({ factory: function AppsProcessCloudService_Factory() { return new AppsProcessCloudService(i0.ɵɵinject(i1.AlfrescoApiService), i0.ɵɵinject(i1.LogService), i0.ɵɵinject(i1.AppConfigService)); }, token: AppsProcessCloudService, providedIn: "root" });
AppsProcessCloudService.ctorParameters = () => [
    { type: AlfrescoApiService },
    { type: LogService },
    { type: AppConfigService }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AppsProcessCloudService, [{
        type: Injectable,
        args: [{ providedIn: 'root' }]
    }], function () { return [{ type: ɵngcc1.AlfrescoApiService }, { type: ɵngcc1.LogService }, { type: ɵngcc1.AppConfigService }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,