/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { CustomEmptyContentTemplateDirective } from '@alfresco/adf-core';
import { Component, EventEmitter, Input, Output, ContentChild } from '@angular/core';
import { of, Subject } from 'rxjs';
import { AppsProcessCloudService } from '../services/apps-process-cloud.service';
import { catchError } from 'rxjs/operators';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../services/apps-process-cloud.service';
import * as ɵngcc2 from '@angular/common';
import * as ɵngcc3 from '@angular/flex-layout/flex';
import * as ɵngcc4 from './app-details-cloud.component';
import * as ɵngcc5 from '@angular/material/list';
import * as ɵngcc6 from '@angular/material/icon';
import * as ɵngcc7 from '@angular/material/core';
import * as ɵngcc8 from '@alfresco/adf-core';
import * as ɵngcc9 from '@angular/material/progress-spinner';
import * as ɵngcc10 from '@ngx-translate/core';

function AppListCloudComponent_div_0_ng_container_1_div_1_adf_cloud_app_details_1_Template(rf, ctx) { if (rf & 1) {
    const _r13 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "adf-cloud-app-details", 9);
    ɵngcc0.ɵɵlistener("selectedApp", function AppListCloudComponent_div_0_ng_container_1_div_1_adf_cloud_app_details_1_Template_adf_cloud_app_details_selectedApp_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r13); const ctx_r12 = ɵngcc0.ɵɵnextContext(4); return ctx_r12.onSelectApp($event); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const app_r11 = ctx.$implicit;
    ɵngcc0.ɵɵproperty("applicationInstance", app_r11);
} }
function AppListCloudComponent_div_0_ng_container_1_div_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 7);
    ɵngcc0.ɵɵtemplate(1, AppListCloudComponent_div_0_ng_container_1_div_1_adf_cloud_app_details_1_Template, 1, 1, "adf-cloud-app-details", 8);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const appsList_r5 = ɵngcc0.ɵɵnextContext(2).ngIf;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", appsList_r5);
} }
function AppListCloudComponent_div_0_ng_container_1_ng_template_2_mat_list_item_1_Template(rf, ctx) { if (rf & 1) {
    const _r18 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "mat-list-item", 12);
    ɵngcc0.ɵɵlistener("click", function AppListCloudComponent_div_0_ng_container_1_ng_template_2_mat_list_item_1_Template_mat_list_item_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r18); const app_r16 = ctx.$implicit; const ctx_r17 = ɵngcc0.ɵɵnextContext(4); return ctx_r17.onSelectApp(app_r16); })("keyup.enter", function AppListCloudComponent_div_0_ng_container_1_ng_template_2_mat_list_item_1_Template_mat_list_item_keyup_enter_0_listener() { ɵngcc0.ɵɵrestoreView(_r18); const app_r16 = ctx.$implicit; const ctx_r19 = ɵngcc0.ɵɵnextContext(4); return ctx_r19.onSelectApp(app_r16); });
    ɵngcc0.ɵɵelementStart(1, "mat-icon", 13);
    ɵngcc0.ɵɵtext(2, "touch_app");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(3, "span", 14);
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const app_r16 = ctx.$implicit;
    ɵngcc0.ɵɵpropertyInterpolate("title", app_r16.name);
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵtextInterpolate(app_r16.name);
} }
function AppListCloudComponent_div_0_ng_container_1_ng_template_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-list", 10);
    ɵngcc0.ɵɵtemplate(1, AppListCloudComponent_div_0_ng_container_1_ng_template_2_mat_list_item_1_Template, 5, 2, "mat-list-item", 11);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const appsList_r5 = ɵngcc0.ɵɵnextContext(2).ngIf;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", appsList_r5);
} }
function AppListCloudComponent_div_0_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, AppListCloudComponent_div_0_ng_container_1_div_1_Template, 2, 1, "div", 5);
    ɵngcc0.ɵɵtemplate(2, AppListCloudComponent_div_0_ng_container_1_ng_template_2_Template, 2, 1, "ng-template", null, 6, ɵngcc0.ɵɵtemplateRefExtractor);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const _r8 = ɵngcc0.ɵɵreference(3);
    const ctx_r6 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r6.isGrid())("ngIfElse", _r8);
} }
function AppListCloudComponent_div_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 3);
    ɵngcc0.ɵɵtemplate(1, AppListCloudComponent_div_0_ng_container_1_Template, 4, 2, "ng-container", 4);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const appsList_r5 = ctx.ngIf;
    ɵngcc0.ɵɵnextContext();
    const _r1 = ɵngcc0.ɵɵreference(3);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", appsList_r5.length > 0)("ngIfElse", _r1);
} }
function AppListCloudComponent_ng_template_2_ng_content_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵprojection(0, 0, ["*ngIf", "hasEmptyCustomContentTemplate; else defaultEmptyTemplate", "class", "adf-custom-empty-template"]);
} }
function AppListCloudComponent_ng_template_2_ng_template_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "adf-empty-content", 17);
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵpipe(2, "translate");
} if (rf & 2) {
    ɵngcc0.ɵɵproperty("title", ɵngcc0.ɵɵpipeBind1(1, 2, "ADF_CLOUD_TASK_LIST.APPS.NO_APPS.TITLE"))("subtitle", ɵngcc0.ɵɵpipeBind1(2, 4, "ADF_CLOUD_TASK_LIST.APPS.NO_APPS.SUBTITLE"));
} }
function AppListCloudComponent_ng_template_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 15);
    ɵngcc0.ɵɵtemplate(1, AppListCloudComponent_ng_template_2_ng_content_1_Template, 1, 0, "ng-content", 4);
    ɵngcc0.ɵɵtemplate(2, AppListCloudComponent_ng_template_2_ng_template_2_Template, 3, 6, "ng-template", null, 16, ɵngcc0.ɵɵtemplateRefExtractor);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const _r22 = ɵngcc0.ɵɵreference(3);
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r2.hasEmptyCustomContentTemplate)("ngIfElse", _r22);
} }
function AppListCloudComponent_ng_template_4_div_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 20);
    ɵngcc0.ɵɵelement(1, "adf-empty-content", 21);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("title", ɵngcc0.ɵɵpipeBind1(2, 2, "ADF_CLOUD_TASK_LIST.APPS.ERROR.TITLE"))("subtitle", ɵngcc0.ɵɵpipeBind1(3, 4, "ADF_CLOUD_TASK_LIST.APPS.ERROR.SUBTITLE"));
} }
function AppListCloudComponent_ng_template_4_ng_template_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "div", 22);
    ɵngcc0.ɵɵelement(2, "mat-spinner");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} }
function AppListCloudComponent_ng_template_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, AppListCloudComponent_ng_template_4_div_0_Template, 4, 6, "div", 18);
    ɵngcc0.ɵɵpipe(1, "async");
    ɵngcc0.ɵɵtemplate(2, AppListCloudComponent_ng_template_4_ng_template_2_Template, 3, 0, "ng-template", null, 19, ɵngcc0.ɵɵtemplateRefExtractor);
} if (rf & 2) {
    const _r25 = ɵngcc0.ɵɵreference(3);
    const ctx_r4 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngIf", ɵngcc0.ɵɵpipeBind1(1, 2, ctx_r4.loadingError$))("ngIfElse", _r25);
} }
const _c0 = [[["adf-custom-empty-content-template"]]];
const _c1 = ["adf-custom-empty-content-template"];
export class AppListCloudComponent {
    constructor(appsProcessCloudService) {
        this.appsProcessCloudService = appsProcessCloudService;
        this.layoutType = AppListCloudComponent.LAYOUT_GRID;
        this.appClick = new EventEmitter();
        this.loadingError$ = new Subject();
        this.hasEmptyCustomContentTemplate = false;
    }
    ngOnInit() {
        if (!this.isValidType()) {
            this.setDefaultLayoutType();
        }
        this.apps$ = this.appsProcessCloudService.getDeployedApplicationsByStatus(AppListCloudComponent.RUNNING_STATUS)
            .pipe(catchError(() => {
            this.loadingError$.next(true);
            return of();
        }));
    }
    ngAfterContentInit() {
        if (this.emptyCustomContent) {
            this.hasEmptyCustomContentTemplate = true;
        }
    }
    onSelectApp(app) {
        this.appClick.emit(app);
    }
    isValidType() {
        if (this.layoutType && (this.layoutType === AppListCloudComponent.LAYOUT_LIST || this.layoutType === AppListCloudComponent.LAYOUT_GRID)) {
            return true;
        }
        return false;
    }
    setDefaultLayoutType() {
        this.layoutType = AppListCloudComponent.LAYOUT_GRID;
    }
    isList() {
        return this.layoutType === AppListCloudComponent.LAYOUT_LIST;
    }
    isGrid() {
        return this.layoutType === AppListCloudComponent.LAYOUT_GRID;
    }
}
AppListCloudComponent.ɵfac = function AppListCloudComponent_Factory(t) { return new (t || AppListCloudComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.AppsProcessCloudService)); };
AppListCloudComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: AppListCloudComponent, selectors: [["adf-cloud-app-list"]], contentQueries: function AppListCloudComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, CustomEmptyContentTemplateDirective, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.emptyCustomContent = _t.first);
    } }, inputs: { layoutType: "layoutType" }, outputs: { appClick: "appClick" }, ngContentSelectors: _c1, decls: 6, vars: 4, consts: [["class", "menu-container", 4, "ngIf", "ngIfElse"], ["noApps", ""], ["loadingOrError", ""], [1, "menu-container"], [4, "ngIf", "ngIfElse"], ["fxLayout", "row wrap", 4, "ngIf", "ngIfElse"], ["appList", ""], ["fxLayout", "row wrap"], ["fxFlex", "33.33333%", "fxFlex.lt-md", "50%", "fxFlex.lt-sm", "100%", 3, "applicationInstance", "selectedApp", 4, "ngFor", "ngForOf"], ["fxFlex", "33.33333%", "fxFlex.lt-md", "50%", "fxFlex.lt-sm", "100%", 3, "applicationInstance", "selectedApp"], [1, "adf-app-list"], ["class", "adf-app-list-item", "tabindex", "0", "role", "button", 3, "title", "click", "keyup.enter", 4, "ngFor", "ngForOf"], ["tabindex", "0", "role", "button", 1, "adf-app-list-item", 3, "title", "click", "keyup.enter"], ["matListIcon", ""], ["matLine", ""], [1, "adf-app-list-empty"], ["defaultEmptyTemplate", ""], ["icon", "apps", 3, "title", "subtitle"], ["class", "adf-app-list-error", 4, "ngIf", "ngIfElse"], ["loading", ""], [1, "adf-app-list-error"], ["icon", "error_outline", 3, "title", "subtitle"], [1, "adf-app-list-spinner"]], template: function AppListCloudComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef(_c0);
        ɵngcc0.ɵɵtemplate(0, AppListCloudComponent_div_0_Template, 2, 2, "div", 0);
        ɵngcc0.ɵɵpipe(1, "async");
        ɵngcc0.ɵɵtemplate(2, AppListCloudComponent_ng_template_2_Template, 4, 2, "ng-template", null, 1, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵtemplate(4, AppListCloudComponent_ng_template_4_Template, 4, 4, "ng-template", null, 2, ɵngcc0.ɵɵtemplateRefExtractor);
    } if (rf & 2) {
        const _r3 = ɵngcc0.ɵɵreference(5);
        ɵngcc0.ɵɵproperty("ngIf", ɵngcc0.ɵɵpipeBind1(1, 2, ctx.apps$))("ngIfElse", _r3);
    } }, directives: [ɵngcc2.NgIf, ɵngcc3.DefaultLayoutDirective, ɵngcc2.NgForOf, ɵngcc4.AppDetailsCloudComponent, ɵngcc3.DefaultFlexDirective, ɵngcc5.MatList, ɵngcc5.MatListItem, ɵngcc6.MatIcon, ɵngcc5.MatListIconCssMatStyler, ɵngcc7.MatLine, ɵngcc8.EmptyContentComponent, ɵngcc9.MatSpinner], pipes: [ɵngcc2.AsyncPipe, ɵngcc10.TranslatePipe], styles: ["[_nghost-%COMP%]{width:100%}.adf-app-list-item[_ngcontent-%COMP%]{cursor:pointer}.adf-app-list-empty[_ngcontent-%COMP%], .adf-app-list-error[_ngcontent-%COMP%], .adf-app-list-spinner[_ngcontent-%COMP%]{align-items:center;display:flex;flex-direction:column;height:85vh;justify-content:center}.adf-app-list-empty[_ngcontent-%COMP%]   .mat-spinner[_ngcontent-%COMP%], .adf-app-list-error[_ngcontent-%COMP%]   .mat-spinner[_ngcontent-%COMP%], .adf-app-list-spinner[_ngcontent-%COMP%]   .mat-spinner[_ngcontent-%COMP%]{margin:0 auto}"] });
AppListCloudComponent.LAYOUT_LIST = 'LIST';
AppListCloudComponent.LAYOUT_GRID = 'GRID';
AppListCloudComponent.RUNNING_STATUS = 'RUNNING';
AppListCloudComponent.ctorParameters = () => [
    { type: AppsProcessCloudService }
];
AppListCloudComponent.propDecorators = {
    emptyCustomContent: [{ type: ContentChild, args: [CustomEmptyContentTemplateDirective,] }],
    layoutType: [{ type: Input }],
    appClick: [{ type: Output }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AppListCloudComponent, [{
        type: Component,
        args: [{
                selector: 'adf-cloud-app-list',
                template: "<div class=\"menu-container\" *ngIf=\"apps$ | async as appsList; else loadingOrError\">\n    <ng-container *ngIf=\"appsList.length > 0; else noApps\">\n        <div *ngIf=\"isGrid(); else appList\" fxLayout=\"row wrap\">\n            <adf-cloud-app-details fxFlex=\"33.33333%\" fxFlex.lt-md=\"50%\" fxFlex.lt-sm=\"100%\"\n                *ngFor=\"let app of appsList\" [applicationInstance]=\"app\" (selectedApp)=\"onSelectApp($event)\">\n            </adf-cloud-app-details>\n        </div>\n\n        <ng-template #appList>\n            <mat-list class=\"adf-app-list\">\n                <mat-list-item class=\"adf-app-list-item\" (click)=\"onSelectApp(app)\" (keyup.enter)=\"onSelectApp(app)\"\n                    *ngFor=\"let app of appsList\" tabindex=\"0\" role=\"button\" title=\"{{app.name}}\">\n                    <mat-icon matListIcon>touch_app</mat-icon>\n                    <span matLine>{{app.name}}</span>\n                </mat-list-item>\n            </mat-list>\n        </ng-template>\n    </ng-container>\n</div>\n<ng-template #noApps>\n    <div class=\"adf-app-list-empty\">\n        <ng-content select=\"adf-custom-empty-content-template\" *ngIf=\"hasEmptyCustomContentTemplate; else defaultEmptyTemplate\"\n            class=\"adf-custom-empty-template\">\n        </ng-content>\n\n        <ng-template #defaultEmptyTemplate>\n            <adf-empty-content icon=\"apps\" [title]=\"'ADF_CLOUD_TASK_LIST.APPS.NO_APPS.TITLE' | translate\"\n                [subtitle]=\"'ADF_CLOUD_TASK_LIST.APPS.NO_APPS.SUBTITLE' | translate\">\n            </adf-empty-content>\n        </ng-template>\n    </div>\n</ng-template>\n<ng-template #loadingOrError>\n    <div *ngIf=\"loadingError$ | async; else loading\" class=\"adf-app-list-error\">\n        <adf-empty-content icon=\"error_outline\" [title]=\"'ADF_CLOUD_TASK_LIST.APPS.ERROR.TITLE' | translate\"\n            [subtitle]=\"'ADF_CLOUD_TASK_LIST.APPS.ERROR.SUBTITLE' | translate\">\n        </adf-empty-content>\n    </div>\n    <ng-template #loading>\n    <ng-container>\n        <div class=\"adf-app-list-spinner\">\n            <mat-spinner></mat-spinner>\n        </div>\n    </ng-container>\n</ng-template>\n</ng-template>\n",
                styles: [":host{width:100%}.adf-app-list-item{cursor:pointer}.adf-app-list-empty,.adf-app-list-error,.adf-app-list-spinner{align-items:center;display:flex;flex-direction:column;height:85vh;justify-content:center}.adf-app-list-empty .mat-spinner,.adf-app-list-error .mat-spinner,.adf-app-list-spinner .mat-spinner{margin:0 auto}"]
            }]
    }], function () { return [{ type: ɵngcc1.AppsProcessCloudService }]; }, { layoutType: [{
            type: Input
        }], appClick: [{
            type: Output
        }], emptyCustomContent: [{
            type: ContentChild,
            args: [CustomEmptyContentTemplateDirective]
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwLWxpc3QtY2xvdWQuY29tcG9uZW50LmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9ob21lL3RyYXZpcy9idWlsZC9BbGZyZXNjby9hbGZyZXNjby1uZzItY29tcG9uZW50cy9saWIvcHJvY2Vzcy1zZXJ2aWNlcy1jbG91ZC9zcmMvbGliL2FwcC9jb21wb25lbnRzL2FwcC1saXN0LWNsb3VkLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBRUgsT0FBTyxFQUFFLG1DQUFtQyxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDekUsT0FBTyxFQUFvQixTQUFTLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBVSxNQUFNLEVBQUUsWUFBWSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQy9HLE9BQU8sRUFBYyxFQUFFLEVBQUUsT0FBTyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQy9DLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLHdDQUF3QyxDQUFDO0FBRWpGLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFPNUMsTUFBTSxPQUFPLHFCQUFxQjtBQUFHLElBdUJqQyxZQUFvQix1QkFBZ0Q7QUFBSSxRQUFwRCw0QkFBdUIsR0FBdkIsdUJBQXVCLENBQXlCO0FBQUMsUUFWckUsZUFBVSxHQUFXLHFCQUFxQixDQUFDLFdBQVcsQ0FBQztBQUMzRCxRQUdJLGFBQVEsR0FBRyxJQUFJLFlBQVksRUFBNEIsQ0FBQztBQUM1RCxRQUVJLGtCQUFhLEdBQUcsSUFBSSxPQUFPLEVBQVcsQ0FBQztBQUMzQyxRQUFJLGtDQUE2QixHQUFZLEtBQUssQ0FBQztBQUNuRCxJQUM0RSxDQUFDO0FBQzdFLElBQ0ksUUFBUTtBQUNaLFFBQVEsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsRUFBRTtBQUNqQyxZQUFZLElBQUksQ0FBQyxvQkFBb0IsRUFBRSxDQUFDO0FBQ3hDLFNBQVM7QUFDVCxRQUNRLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLHVCQUF1QixDQUFDLCtCQUErQixDQUFDLHFCQUFxQixDQUFDLGNBQWMsQ0FBQztBQUN2SCxhQUFhLElBQUksQ0FDRCxVQUFVLENBQUMsR0FBRyxFQUFFO0FBQ2hDLFlBQW9CLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ2xELFlBQW9CLE9BQU8sRUFBRSxFQUFFLENBQUM7QUFDaEMsUUFBZ0IsQ0FBQyxDQUFDLENBQ0wsQ0FBQztBQUNkLElBQUksQ0FBQztBQUNMLElBQ0ksa0JBQWtCO0FBQ3RCLFFBQVEsSUFBSSxJQUFJLENBQUMsa0JBQWtCLEVBQUU7QUFDckMsWUFBWSxJQUFJLENBQUMsNkJBQTZCLEdBQUcsSUFBSSxDQUFDO0FBQ3RELFNBQVM7QUFDVCxJQUFJLENBQUM7QUFDTCxJQUNJLFdBQVcsQ0FBQyxHQUE2QjtBQUFJLFFBQ3pDLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ2hDLElBQUksQ0FBQztBQUNMLElBSUksV0FBVztBQUFLLFFBQ1osSUFBSSxJQUFJLENBQUMsVUFBVSxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsS0FBSyxxQkFBcUIsQ0FBQyxXQUFXLElBQUksSUFBSSxDQUFDLFVBQVUsS0FBSyxxQkFBcUIsQ0FBQyxXQUFXLENBQUMsRUFBRTtBQUNqSixZQUFZLE9BQU8sSUFBSSxDQUFDO0FBQ3hCLFNBQVM7QUFDVCxRQUFRLE9BQU8sS0FBSyxDQUFDO0FBQ3JCLElBQUksQ0FBQztBQUNMLElBSUksb0JBQW9CO0FBQUssUUFDckIsSUFBSSxDQUFDLFVBQVUsR0FBRyxxQkFBcUIsQ0FBQyxXQUFXLENBQUM7QUFDNUQsSUFBSSxDQUFDO0FBQ0wsSUFJSSxNQUFNO0FBQUssUUFDUCxPQUFPLElBQUksQ0FBQyxVQUFVLEtBQUsscUJBQXFCLENBQUMsV0FBVyxDQUFDO0FBQ3JFLElBQUksQ0FBQztBQUNMLElBSUksTUFBTTtBQUFLLFFBQ1AsT0FBTyxJQUFJLENBQUMsVUFBVSxLQUFLLHFCQUFxQixDQUFDLFdBQVcsQ0FBQztBQUNyRSxJQUFJLENBQUM7QUFDTDs7Ozs7Ozs7Ozs7Ozs7Ozt3M0JBQUM7QUE3RWlCLGlDQUFXLEdBQVcsTUFBTSxDQUFDO0FBQzdCLGlDQUFXLEdBQVcsTUFBTSxDQUFDO0FBQzdCLG9DQUFjLEdBQVcsU0FBUyxDQUFDLEFBSmhEO0FBQUM7RUFMTCxTQUFTLFNBQUMscEJBSzBDLFlBVDVDLHVCQUF1QjtBQUs1QixBQUwrQjtLQUt2QixFQUFFLG9CQUFvQiwzQkFMSTtJQU1sQyxKQU4yRSxpQ0FlMUUsWUFBWSxTQUFDLG1DQUFtQztBQUNoRCx5QkFLQSxLQUFLO0FBQ1IsdUJBR0csTUFBTTtBQUNWOzs7OztxMURBcEJpRDtVQUVqRDs7Ozs7Ozs7O29CQWtCRTtBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgQ3VzdG9tRW1wdHlDb250ZW50VGVtcGxhdGVEaXJlY3RpdmUgfSBmcm9tICdAYWxmcmVzY28vYWRmLWNvcmUnO1xuaW1wb3J0IHsgQWZ0ZXJDb250ZW50SW5pdCwgQ29tcG9uZW50LCBFdmVudEVtaXR0ZXIsIElucHV0LCBPbkluaXQsIE91dHB1dCwgQ29udGVudENoaWxkIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBvZiwgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgQXBwc1Byb2Nlc3NDbG91ZFNlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlcy9hcHBzLXByb2Nlc3MtY2xvdWQuc2VydmljZSc7XG5pbXBvcnQgeyBBcHBsaWNhdGlvbkluc3RhbmNlTW9kZWwgfSBmcm9tICcuLi9tb2RlbHMvYXBwbGljYXRpb24taW5zdGFuY2UubW9kZWwnO1xuaW1wb3J0IHsgY2F0Y2hFcnJvciB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICdhZGYtY2xvdWQtYXBwLWxpc3QnLFxuICAgIHRlbXBsYXRlVXJsOiAnLi9hcHAtbGlzdC1jbG91ZC5jb21wb25lbnQuaHRtbCcsXG4gICAgc3R5bGVVcmxzOiBbJy4vYXBwLWxpc3QtY2xvdWQuY29tcG9uZW50LnNjc3MnXVxufSlcbmV4cG9ydCBjbGFzcyBBcHBMaXN0Q2xvdWRDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIEFmdGVyQ29udGVudEluaXQge1xuXG4gICAgcHVibGljIHN0YXRpYyBMQVlPVVRfTElTVDogc3RyaW5nID0gJ0xJU1QnO1xuICAgIHB1YmxpYyBzdGF0aWMgTEFZT1VUX0dSSUQ6IHN0cmluZyA9ICdHUklEJztcbiAgICBwdWJsaWMgc3RhdGljIFJVTk5JTkdfU1RBVFVTOiBzdHJpbmcgPSAnUlVOTklORyc7XG5cbiAgICBAQ29udGVudENoaWxkKEN1c3RvbUVtcHR5Q29udGVudFRlbXBsYXRlRGlyZWN0aXZlKVxuICAgIGVtcHR5Q3VzdG9tQ29udGVudDogQ3VzdG9tRW1wdHlDb250ZW50VGVtcGxhdGVEaXJlY3RpdmU7XG5cbiAgICAvKiogKCoqcmVxdWlyZWQqKikgRGVmaW5lcyB0aGUgbGF5b3V0IG9mIHRoZSBhcHBzLiBUaGVyZSBhcmUgdHdvIHBvc3NpYmxlXG4gICAgICogdmFsdWVzLCBcIkdSSURcIiBhbmQgXCJMSVNUXCIuXG4gICAgICovXG4gICAgQElucHV0KClcbiAgICBsYXlvdXRUeXBlOiBzdHJpbmcgPSBBcHBMaXN0Q2xvdWRDb21wb25lbnQuTEFZT1VUX0dSSUQ7XG5cbiAgICAvKiogRW1pdHRlZCB3aGVuIGFuIGFwcCBlbnRyeSBpcyBjbGlja2VkLiAqL1xuICAgIEBPdXRwdXQoKVxuICAgIGFwcENsaWNrID0gbmV3IEV2ZW50RW1pdHRlcjxBcHBsaWNhdGlvbkluc3RhbmNlTW9kZWw+KCk7XG5cbiAgICBhcHBzJDogT2JzZXJ2YWJsZTxhbnk+O1xuICAgIGxvYWRpbmdFcnJvciQgPSBuZXcgU3ViamVjdDxib29sZWFuPigpO1xuICAgIGhhc0VtcHR5Q3VzdG9tQ29udGVudFRlbXBsYXRlOiBib29sZWFuID0gZmFsc2U7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGFwcHNQcm9jZXNzQ2xvdWRTZXJ2aWNlOiBBcHBzUHJvY2Vzc0Nsb3VkU2VydmljZSkgeyB9XG5cbiAgICBuZ09uSW5pdCgpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzVmFsaWRUeXBlKCkpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0RGVmYXVsdExheW91dFR5cGUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuYXBwcyQgPSB0aGlzLmFwcHNQcm9jZXNzQ2xvdWRTZXJ2aWNlLmdldERlcGxveWVkQXBwbGljYXRpb25zQnlTdGF0dXMoQXBwTGlzdENsb3VkQ29tcG9uZW50LlJVTk5JTkdfU1RBVFVTKVxuICAgICAgICAgICAgLnBpcGUoXG4gICAgICAgICAgICAgICAgY2F0Y2hFcnJvcigoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubG9hZGluZ0Vycm9yJC5uZXh0KHRydWUpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gb2YoKTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgKTtcbiAgICB9XG5cbiAgICBuZ0FmdGVyQ29udGVudEluaXQoKSB7XG4gICAgICAgIGlmICh0aGlzLmVtcHR5Q3VzdG9tQ29udGVudCkge1xuICAgICAgICAgICAgdGhpcy5oYXNFbXB0eUN1c3RvbUNvbnRlbnRUZW1wbGF0ZSA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBvblNlbGVjdEFwcChhcHA6IEFwcGxpY2F0aW9uSW5zdGFuY2VNb2RlbCk6IHZvaWQge1xuICAgICAgICB0aGlzLmFwcENsaWNrLmVtaXQoYXBwKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVjayBpZiB0aGUgdmFsdWUgb2YgdGhlIGxheW91dFR5cGUgcHJvcGVydHkgaXMgYW4gYWxsb3dlZCB2YWx1ZVxuICAgICAqL1xuICAgIGlzVmFsaWRUeXBlKCk6IGJvb2xlYW4ge1xuICAgICAgICBpZiAodGhpcy5sYXlvdXRUeXBlICYmICh0aGlzLmxheW91dFR5cGUgPT09IEFwcExpc3RDbG91ZENvbXBvbmVudC5MQVlPVVRfTElTVCB8fCB0aGlzLmxheW91dFR5cGUgPT09IEFwcExpc3RDbG91ZENvbXBvbmVudC5MQVlPVVRfR1JJRCkpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBc3NpZ24gdGhlIGRlZmF1bHQgdmFsdWUgdG8gTGF5b3V0VHlwZVxuICAgICAqL1xuICAgIHNldERlZmF1bHRMYXlvdXRUeXBlKCk6IHZvaWQge1xuICAgICAgICB0aGlzLmxheW91dFR5cGUgPSBBcHBMaXN0Q2xvdWRDb21wb25lbnQuTEFZT1VUX0dSSUQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJuIHRydWUgaWYgdGhlIGxheW91dCB0eXBlIGlzIExJU1RcbiAgICAgKi9cbiAgICBpc0xpc3QoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLmxheW91dFR5cGUgPT09IEFwcExpc3RDbG91ZENvbXBvbmVudC5MQVlPVVRfTElTVDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm4gdHJ1ZSBpZiB0aGUgbGF5b3V0IHR5cGUgaXMgR1JJRFxuICAgICAqL1xuICAgIGlzR3JpZCgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubGF5b3V0VHlwZSA9PT0gQXBwTGlzdENsb3VkQ29tcG9uZW50LkxBWU9VVF9HUklEO1xuICAgIH1cbn1cbiJdfQ==