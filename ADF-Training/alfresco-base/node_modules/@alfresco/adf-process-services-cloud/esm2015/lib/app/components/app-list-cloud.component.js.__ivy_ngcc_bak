/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { CustomEmptyContentTemplateDirective } from '@alfresco/adf-core';
import { Component, EventEmitter, Input, Output, ContentChild } from '@angular/core';
import { of, Subject } from 'rxjs';
import { AppsProcessCloudService } from '../services/apps-process-cloud.service';
import { catchError } from 'rxjs/operators';
export class AppListCloudComponent {
    constructor(appsProcessCloudService) {
        this.appsProcessCloudService = appsProcessCloudService;
        this.layoutType = AppListCloudComponent.LAYOUT_GRID;
        this.appClick = new EventEmitter();
        this.loadingError$ = new Subject();
        this.hasEmptyCustomContentTemplate = false;
    }
    ngOnInit() {
        if (!this.isValidType()) {
            this.setDefaultLayoutType();
        }
        this.apps$ = this.appsProcessCloudService.getDeployedApplicationsByStatus(AppListCloudComponent.RUNNING_STATUS)
            .pipe(catchError(() => {
            this.loadingError$.next(true);
            return of();
        }));
    }
    ngAfterContentInit() {
        if (this.emptyCustomContent) {
            this.hasEmptyCustomContentTemplate = true;
        }
    }
    onSelectApp(app) {
        this.appClick.emit(app);
    }
    isValidType() {
        if (this.layoutType && (this.layoutType === AppListCloudComponent.LAYOUT_LIST || this.layoutType === AppListCloudComponent.LAYOUT_GRID)) {
            return true;
        }
        return false;
    }
    setDefaultLayoutType() {
        this.layoutType = AppListCloudComponent.LAYOUT_GRID;
    }
    isList() {
        return this.layoutType === AppListCloudComponent.LAYOUT_LIST;
    }
    isGrid() {
        return this.layoutType === AppListCloudComponent.LAYOUT_GRID;
    }
}
AppListCloudComponent.LAYOUT_LIST = 'LIST';
AppListCloudComponent.LAYOUT_GRID = 'GRID';
AppListCloudComponent.RUNNING_STATUS = 'RUNNING';
AppListCloudComponent.decorators = [
    { type: Component, args: [{
                selector: 'adf-cloud-app-list',
                template: "<div class=\"menu-container\" *ngIf=\"apps$ | async as appsList; else loadingOrError\">\n    <ng-container *ngIf=\"appsList.length > 0; else noApps\">\n        <div *ngIf=\"isGrid(); else appList\" fxLayout=\"row wrap\">\n            <adf-cloud-app-details fxFlex=\"33.33333%\" fxFlex.lt-md=\"50%\" fxFlex.lt-sm=\"100%\"\n                *ngFor=\"let app of appsList\" [applicationInstance]=\"app\" (selectedApp)=\"onSelectApp($event)\">\n            </adf-cloud-app-details>\n        </div>\n\n        <ng-template #appList>\n            <mat-list class=\"adf-app-list\">\n                <mat-list-item class=\"adf-app-list-item\" (click)=\"onSelectApp(app)\" (keyup.enter)=\"onSelectApp(app)\"\n                    *ngFor=\"let app of appsList\" tabindex=\"0\" role=\"button\" title=\"{{app.name}}\">\n                    <mat-icon matListIcon>touch_app</mat-icon>\n                    <span matLine>{{app.name}}</span>\n                </mat-list-item>\n            </mat-list>\n        </ng-template>\n    </ng-container>\n</div>\n<ng-template #noApps>\n    <div class=\"adf-app-list-empty\">\n        <ng-content select=\"adf-custom-empty-content-template\" *ngIf=\"hasEmptyCustomContentTemplate; else defaultEmptyTemplate\"\n            class=\"adf-custom-empty-template\">\n        </ng-content>\n\n        <ng-template #defaultEmptyTemplate>\n            <adf-empty-content icon=\"apps\" [title]=\"'ADF_CLOUD_TASK_LIST.APPS.NO_APPS.TITLE' | translate\"\n                [subtitle]=\"'ADF_CLOUD_TASK_LIST.APPS.NO_APPS.SUBTITLE' | translate\">\n            </adf-empty-content>\n        </ng-template>\n    </div>\n</ng-template>\n<ng-template #loadingOrError>\n    <div *ngIf=\"loadingError$ | async; else loading\" class=\"adf-app-list-error\">\n        <adf-empty-content icon=\"error_outline\" [title]=\"'ADF_CLOUD_TASK_LIST.APPS.ERROR.TITLE' | translate\"\n            [subtitle]=\"'ADF_CLOUD_TASK_LIST.APPS.ERROR.SUBTITLE' | translate\">\n        </adf-empty-content>\n    </div>\n    <ng-template #loading>\n    <ng-container>\n        <div class=\"adf-app-list-spinner\">\n            <mat-spinner></mat-spinner>\n        </div>\n    </ng-container>\n</ng-template>\n</ng-template>\n",
                styles: [":host{width:100%}.adf-app-list-item{cursor:pointer}.adf-app-list-empty,.adf-app-list-error,.adf-app-list-spinner{align-items:center;display:flex;flex-direction:column;height:85vh;justify-content:center}.adf-app-list-empty .mat-spinner,.adf-app-list-error .mat-spinner,.adf-app-list-spinner .mat-spinner{margin:0 auto}"]
            },] }
];
AppListCloudComponent.ctorParameters = () => [
    { type: AppsProcessCloudService }
];
AppListCloudComponent.propDecorators = {
    emptyCustomContent: [{ type: ContentChild, args: [CustomEmptyContentTemplateDirective,] }],
    layoutType: [{ type: Input }],
    appClick: [{ type: Output }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwLWxpc3QtY2xvdWQuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Ii9ob21lL3RyYXZpcy9idWlsZC9BbGZyZXNjby9hbGZyZXNjby1uZzItY29tcG9uZW50cy9saWIvcHJvY2Vzcy1zZXJ2aWNlcy1jbG91ZC9zcmMvIiwic291cmNlcyI6WyJsaWIvYXBwL2NvbXBvbmVudHMvYXBwLWxpc3QtY2xvdWQuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7R0FlRztBQUVILE9BQU8sRUFBRSxtQ0FBbUMsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ3pFLE9BQU8sRUFBb0IsU0FBUyxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQVUsTUFBTSxFQUFFLFlBQVksRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMvRyxPQUFPLEVBQWMsRUFBRSxFQUFFLE9BQU8sRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUMvQyxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSx3Q0FBd0MsQ0FBQztBQUVqRixPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFPNUMsTUFBTSxPQUFPLHFCQUFxQjtJQXVCOUIsWUFBb0IsdUJBQWdEO1FBQWhELDRCQUF1QixHQUF2Qix1QkFBdUIsQ0FBeUI7UUFWcEUsZUFBVSxHQUFXLHFCQUFxQixDQUFDLFdBQVcsQ0FBQztRQUl2RCxhQUFRLEdBQUcsSUFBSSxZQUFZLEVBQTRCLENBQUM7UUFHeEQsa0JBQWEsR0FBRyxJQUFJLE9BQU8sRUFBVyxDQUFDO1FBQ3ZDLGtDQUE2QixHQUFZLEtBQUssQ0FBQztJQUV5QixDQUFDO0lBRXpFLFFBQVE7UUFDSixJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxFQUFFO1lBQ3JCLElBQUksQ0FBQyxvQkFBb0IsRUFBRSxDQUFDO1NBQy9CO1FBRUQsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsdUJBQXVCLENBQUMsK0JBQStCLENBQUMscUJBQXFCLENBQUMsY0FBYyxDQUFDO2FBQzFHLElBQUksQ0FDRCxVQUFVLENBQUMsR0FBRyxFQUFFO1lBQ1osSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDOUIsT0FBTyxFQUFFLEVBQUUsQ0FBQztRQUNoQixDQUFDLENBQUMsQ0FDTCxDQUFDO0lBQ1YsQ0FBQztJQUVELGtCQUFrQjtRQUNkLElBQUksSUFBSSxDQUFDLGtCQUFrQixFQUFFO1lBQ3pCLElBQUksQ0FBQyw2QkFBNkIsR0FBRyxJQUFJLENBQUM7U0FDN0M7SUFDTCxDQUFDO0lBRUQsV0FBVyxDQUFDLEdBQTZCO1FBQ3JDLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQzVCLENBQUM7SUFLRCxXQUFXO1FBQ1AsSUFBSSxJQUFJLENBQUMsVUFBVSxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsS0FBSyxxQkFBcUIsQ0FBQyxXQUFXLElBQUksSUFBSSxDQUFDLFVBQVUsS0FBSyxxQkFBcUIsQ0FBQyxXQUFXLENBQUMsRUFBRTtZQUNySSxPQUFPLElBQUksQ0FBQztTQUNmO1FBQ0QsT0FBTyxLQUFLLENBQUM7SUFDakIsQ0FBQztJQUtELG9CQUFvQjtRQUNoQixJQUFJLENBQUMsVUFBVSxHQUFHLHFCQUFxQixDQUFDLFdBQVcsQ0FBQztJQUN4RCxDQUFDO0lBS0QsTUFBTTtRQUNGLE9BQU8sSUFBSSxDQUFDLFVBQVUsS0FBSyxxQkFBcUIsQ0FBQyxXQUFXLENBQUM7SUFDakUsQ0FBQztJQUtELE1BQU07UUFDRixPQUFPLElBQUksQ0FBQyxVQUFVLEtBQUsscUJBQXFCLENBQUMsV0FBVyxDQUFDO0lBQ2pFLENBQUM7O0FBNUVhLGlDQUFXLEdBQVcsTUFBTSxDQUFDO0FBQzdCLGlDQUFXLEdBQVcsTUFBTSxDQUFDO0FBQzdCLG9DQUFjLEdBQVcsU0FBUyxDQUFDOztZQVRwRCxTQUFTLFNBQUM7Z0JBQ1AsUUFBUSxFQUFFLG9CQUFvQjtnQkFDOUIsa3FFQUE4Qzs7YUFFakQ7OztZQVJRLHVCQUF1Qjs7O2lDQWUzQixZQUFZLFNBQUMsbUNBQW1DO3lCQU1oRCxLQUFLO3VCQUlMLE1BQU0iLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBDdXN0b21FbXB0eUNvbnRlbnRUZW1wbGF0ZURpcmVjdGl2ZSB9IGZyb20gJ0BhbGZyZXNjby9hZGYtY29yZSc7XG5pbXBvcnQgeyBBZnRlckNvbnRlbnRJbml0LCBDb21wb25lbnQsIEV2ZW50RW1pdHRlciwgSW5wdXQsIE9uSW5pdCwgT3V0cHV0LCBDb250ZW50Q2hpbGQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUsIG9mLCBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBBcHBzUHJvY2Vzc0Nsb3VkU2VydmljZSB9IGZyb20gJy4uL3NlcnZpY2VzL2FwcHMtcHJvY2Vzcy1jbG91ZC5zZXJ2aWNlJztcbmltcG9ydCB7IEFwcGxpY2F0aW9uSW5zdGFuY2VNb2RlbCB9IGZyb20gJy4uL21vZGVscy9hcHBsaWNhdGlvbi1pbnN0YW5jZS5tb2RlbCc7XG5pbXBvcnQgeyBjYXRjaEVycm9yIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ2FkZi1jbG91ZC1hcHAtbGlzdCcsXG4gICAgdGVtcGxhdGVVcmw6ICcuL2FwcC1saXN0LWNsb3VkLmNvbXBvbmVudC5odG1sJyxcbiAgICBzdHlsZVVybHM6IFsnLi9hcHAtbGlzdC1jbG91ZC5jb21wb25lbnQuc2NzcyddXG59KVxuZXhwb3J0IGNsYXNzIEFwcExpc3RDbG91ZENvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgQWZ0ZXJDb250ZW50SW5pdCB7XG5cbiAgICBwdWJsaWMgc3RhdGljIExBWU9VVF9MSVNUOiBzdHJpbmcgPSAnTElTVCc7XG4gICAgcHVibGljIHN0YXRpYyBMQVlPVVRfR1JJRDogc3RyaW5nID0gJ0dSSUQnO1xuICAgIHB1YmxpYyBzdGF0aWMgUlVOTklOR19TVEFUVVM6IHN0cmluZyA9ICdSVU5OSU5HJztcblxuICAgIEBDb250ZW50Q2hpbGQoQ3VzdG9tRW1wdHlDb250ZW50VGVtcGxhdGVEaXJlY3RpdmUpXG4gICAgZW1wdHlDdXN0b21Db250ZW50OiBDdXN0b21FbXB0eUNvbnRlbnRUZW1wbGF0ZURpcmVjdGl2ZTtcblxuICAgIC8qKiAoKipyZXF1aXJlZCoqKSBEZWZpbmVzIHRoZSBsYXlvdXQgb2YgdGhlIGFwcHMuIFRoZXJlIGFyZSB0d28gcG9zc2libGVcbiAgICAgKiB2YWx1ZXMsIFwiR1JJRFwiIGFuZCBcIkxJU1RcIi5cbiAgICAgKi9cbiAgICBASW5wdXQoKVxuICAgIGxheW91dFR5cGU6IHN0cmluZyA9IEFwcExpc3RDbG91ZENvbXBvbmVudC5MQVlPVVRfR1JJRDtcblxuICAgIC8qKiBFbWl0dGVkIHdoZW4gYW4gYXBwIGVudHJ5IGlzIGNsaWNrZWQuICovXG4gICAgQE91dHB1dCgpXG4gICAgYXBwQ2xpY2sgPSBuZXcgRXZlbnRFbWl0dGVyPEFwcGxpY2F0aW9uSW5zdGFuY2VNb2RlbD4oKTtcblxuICAgIGFwcHMkOiBPYnNlcnZhYmxlPGFueT47XG4gICAgbG9hZGluZ0Vycm9yJCA9IG5ldyBTdWJqZWN0PGJvb2xlYW4+KCk7XG4gICAgaGFzRW1wdHlDdXN0b21Db250ZW50VGVtcGxhdGU6IGJvb2xlYW4gPSBmYWxzZTtcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgYXBwc1Byb2Nlc3NDbG91ZFNlcnZpY2U6IEFwcHNQcm9jZXNzQ2xvdWRTZXJ2aWNlKSB7IH1cblxuICAgIG5nT25Jbml0KCkge1xuICAgICAgICBpZiAoIXRoaXMuaXNWYWxpZFR5cGUoKSkge1xuICAgICAgICAgICAgdGhpcy5zZXREZWZhdWx0TGF5b3V0VHlwZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5hcHBzJCA9IHRoaXMuYXBwc1Byb2Nlc3NDbG91ZFNlcnZpY2UuZ2V0RGVwbG95ZWRBcHBsaWNhdGlvbnNCeVN0YXR1cyhBcHBMaXN0Q2xvdWRDb21wb25lbnQuUlVOTklOR19TVEFUVVMpXG4gICAgICAgICAgICAucGlwZShcbiAgICAgICAgICAgICAgICBjYXRjaEVycm9yKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2FkaW5nRXJyb3IkLm5leHQodHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBvZigpO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICApO1xuICAgIH1cblxuICAgIG5nQWZ0ZXJDb250ZW50SW5pdCgpIHtcbiAgICAgICAgaWYgKHRoaXMuZW1wdHlDdXN0b21Db250ZW50KSB7XG4gICAgICAgICAgICB0aGlzLmhhc0VtcHR5Q3VzdG9tQ29udGVudFRlbXBsYXRlID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIG9uU2VsZWN0QXBwKGFwcDogQXBwbGljYXRpb25JbnN0YW5jZU1vZGVsKTogdm9pZCB7XG4gICAgICAgIHRoaXMuYXBwQ2xpY2suZW1pdChhcHApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrIGlmIHRoZSB2YWx1ZSBvZiB0aGUgbGF5b3V0VHlwZSBwcm9wZXJ0eSBpcyBhbiBhbGxvd2VkIHZhbHVlXG4gICAgICovXG4gICAgaXNWYWxpZFR5cGUoKTogYm9vbGVhbiB7XG4gICAgICAgIGlmICh0aGlzLmxheW91dFR5cGUgJiYgKHRoaXMubGF5b3V0VHlwZSA9PT0gQXBwTGlzdENsb3VkQ29tcG9uZW50LkxBWU9VVF9MSVNUIHx8IHRoaXMubGF5b3V0VHlwZSA9PT0gQXBwTGlzdENsb3VkQ29tcG9uZW50LkxBWU9VVF9HUklEKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFzc2lnbiB0aGUgZGVmYXVsdCB2YWx1ZSB0byBMYXlvdXRUeXBlXG4gICAgICovXG4gICAgc2V0RGVmYXVsdExheW91dFR5cGUoKTogdm9pZCB7XG4gICAgICAgIHRoaXMubGF5b3V0VHlwZSA9IEFwcExpc3RDbG91ZENvbXBvbmVudC5MQVlPVVRfR1JJRDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm4gdHJ1ZSBpZiB0aGUgbGF5b3V0IHR5cGUgaXMgTElTVFxuICAgICAqL1xuICAgIGlzTGlzdCgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubGF5b3V0VHlwZSA9PT0gQXBwTGlzdENsb3VkQ29tcG9uZW50LkxBWU9VVF9MSVNUO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybiB0cnVlIGlmIHRoZSBsYXlvdXQgdHlwZSBpcyBHUklEXG4gICAgICovXG4gICAgaXNHcmlkKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5sYXlvdXRUeXBlID09PSBBcHBMaXN0Q2xvdWRDb21wb25lbnQuTEFZT1VUX0dSSUQ7XG4gICAgfVxufVxuIl19