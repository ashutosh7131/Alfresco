/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, ViewEncapsulation, Input } from '@angular/core';
import { AppConfigService, UserPreferencesService } from '@alfresco/adf-core';
import { TaskQueryCloudRequestModel } from '../models/filter-cloud-model';
import { TaskListCloudService } from '../services/task-list-cloud.service';
import { BaseTaskListCloudComponent } from './base-task-list-cloud.component';
import { TaskCloudService } from '../../services/task-cloud.service';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../services/task-list-cloud.service';
import * as ɵngcc2 from '@alfresco/adf-core';
import * as ɵngcc3 from '../../services/task-cloud.service';
import * as ɵngcc4 from '@angular/common';
import * as ɵngcc5 from '@angular/material/progress-spinner';
import * as ɵngcc6 from '@ngx-translate/core';

function TaskListCloudComponent_div_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(2, 1, "ADF_CLOUD_TASK_LIST.FILTERS.MESSAGES.NONE"));
} }
function TaskListCloudComponent_ng_container_1_ng_template_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "mat-progress-spinner", 2);
} if (rf & 2) {
    ɵngcc0.ɵɵproperty("color", "primary")("mode", "indeterminate");
} }
function TaskListCloudComponent_ng_container_1_ng_template_5_adf_empty_content_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "adf-empty-content", 4);
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵpipe(2, "translate");
} if (rf & 2) {
    ɵngcc0.ɵɵproperty("title", ɵngcc0.ɵɵpipeBind1(1, 2, "ADF_CLOUD_TASK_LIST.LIST.MESSAGES.TITLE"))("subtitle", ɵngcc0.ɵɵpipeBind1(2, 4, "ADF_CLOUD_TASK_LIST.LIST.MESSAGES.SUBTITLE"));
} }
function TaskListCloudComponent_ng_container_1_ng_template_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, TaskListCloudComponent_ng_container_1_ng_template_5_adf_empty_content_0_Template, 3, 6, "adf-empty-content", 3);
    ɵngcc0.ɵɵprojection(1);
} if (rf & 2) {
    const ctx_r3 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r3.emptyCustomContent);
} }
function TaskListCloudComponent_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    const _r6 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "adf-datatable", 1);
    ɵngcc0.ɵɵlistener("showRowActionsMenu", function TaskListCloudComponent_ng_container_1_Template_adf_datatable_showRowActionsMenu_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r6); const ctx_r5 = ɵngcc0.ɵɵnextContext(); return ctx_r5.onShowRowActionsMenu($event); })("showRowContextMenu", function TaskListCloudComponent_ng_container_1_Template_adf_datatable_showRowContextMenu_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r6); const ctx_r7 = ɵngcc0.ɵɵnextContext(); return ctx_r7.onShowRowContextMenu($event); })("executeRowAction", function TaskListCloudComponent_ng_container_1_Template_adf_datatable_executeRowAction_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r6); const ctx_r8 = ɵngcc0.ɵɵnextContext(); return ctx_r8.onExecuteRowAction($event); })("row-select", function TaskListCloudComponent_ng_container_1_Template_adf_datatable_row_select_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r6); const ctx_r9 = ɵngcc0.ɵɵnextContext(); return ctx_r9.onRowSelect($event); })("row-unselect", function TaskListCloudComponent_ng_container_1_Template_adf_datatable_row_unselect_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r6); const ctx_r10 = ɵngcc0.ɵɵnextContext(); return ctx_r10.onRowUnselect($event); })("rowClick", function TaskListCloudComponent_ng_container_1_Template_adf_datatable_rowClick_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r6); const ctx_r11 = ɵngcc0.ɵɵnextContext(); return ctx_r11.onRowClick($event); })("row-keyup", function TaskListCloudComponent_ng_container_1_Template_adf_datatable_row_keyup_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r6); const ctx_r12 = ɵngcc0.ɵɵnextContext(); return ctx_r12.onRowKeyUp($event); })("sorting-changed", function TaskListCloudComponent_ng_container_1_Template_adf_datatable_sorting_changed_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r6); const ctx_r13 = ɵngcc0.ɵɵnextContext(); return ctx_r13.onSortingChanged($event); });
    ɵngcc0.ɵɵelementStart(2, "adf-loading-content-template");
    ɵngcc0.ɵɵtemplate(3, TaskListCloudComponent_ng_container_1_ng_template_3_Template, 1, 2, "ng-template");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(4, "adf-no-content-template");
    ɵngcc0.ɵɵtemplate(5, TaskListCloudComponent_ng_container_1_ng_template_5_Template, 2, 1, "ng-template");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("rows", ctx_r1.rows)("columns", ctx_r1.columns)("loading", ctx_r1.isLoading)("sorting", ctx_r1.formattedSorting)("multiselect", ctx_r1.multiselect)("selectionMode", ctx_r1.selectionMode)("stickyHeader", ctx_r1.stickyHeader)("actions", ctx_r1.showActions)("actionsPosition", ctx_r1.actionsPosition)("contextMenu", ctx_r1.showContextMenu)("resolverFn", ctx_r1.boundReplacePriorityValues);
} }
const _c0 = [[["adf-custom-empty-content-template"]]];
const _c1 = ["adf-custom-empty-content-template"];
export class TaskListCloudComponent extends BaseTaskListCloudComponent {
    constructor(taskListCloudService, appConfigService, taskCloudService, userPreferences) {
        super(appConfigService, taskCloudService, userPreferences, TaskListCloudComponent.PRESET_KEY);
        this.taskListCloudService = taskListCloudService;
        this.assignee = '';
        this.createdFrom = '';
        this.createdTo = '';
        this.lastModifiedFrom = '';
        this.lastModifiedTo = '';
        this.dueDateFrom = '';
        this.dueDateTo = '';
        this.id = '';
        this.name = '';
        this.parentTaskId = '';
        this.processDefinitionName = '';
        this.processDefinitionId = '';
        this.processInstanceId = '';
        this.status = '';
        this.owner = '';
        this.standalone = false;
        this.completedDate = '';
        this.completedFrom = '';
        this.completedTo = '';
        this.candidateGroupId = '';
    }
    load(requestNode) {
        this.isLoading = true;
        this.taskListCloudService.getTaskByRequest(requestNode).subscribe((tasks) => {
            this.rows = tasks.list.entries;
            this.success.emit(tasks);
            this.isLoading = false;
            this.pagination.next(tasks.list.pagination);
        }, (error) => {
            this.error.emit(error);
            this.isLoading = false;
        });
    }
    createRequestNode() {
        const requestNode = {
            appName: this.appName,
            assignee: this.assignee,
            id: this.id,
            name: this.name,
            parentTaskId: this.parentTaskId,
            processDefinitionName: this.processDefinitionName,
            processDefinitionId: this.processDefinitionId,
            processInstanceId: this.processInstanceId,
            owner: this.owner,
            priority: this.priority,
            lastModifiedFrom: this.lastModifiedFrom,
            lastModifiedTo: this.lastModifiedTo,
            dueDateFrom: this.dueDateFrom,
            dueDateTo: this.dueDateTo,
            status: this.status,
            dueDate: this.dueDate,
            createdDate: this.createdDate,
            createdFrom: this.createdFrom,
            createdTo: this.createdTo,
            maxItems: this.size,
            skipCount: this.skipCount,
            sorting: this.sorting,
            standalone: this.standalone,
            completedBy: this.completedBy,
            completedFrom: this.completedFrom,
            completedTo: this.completedTo,
            completedDate: this.completedDate,
            candidateGroupId: this.candidateGroupId
        };
        return new TaskQueryCloudRequestModel(requestNode);
    }
}
TaskListCloudComponent.ɵfac = function TaskListCloudComponent_Factory(t) { return new (t || TaskListCloudComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.TaskListCloudService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.AppConfigService), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.TaskCloudService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.UserPreferencesService)); };
TaskListCloudComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: TaskListCloudComponent, selectors: [["adf-cloud-task-list"]], inputs: { assignee: "assignee", createdFrom: "createdFrom", createdTo: "createdTo", lastModifiedFrom: "lastModifiedFrom", lastModifiedTo: "lastModifiedTo", dueDateFrom: "dueDateFrom", dueDateTo: "dueDateTo", id: "id", name: "name", parentTaskId: "parentTaskId", processDefinitionName: "processDefinitionName", processDefinitionId: "processDefinitionId", processInstanceId: "processInstanceId", status: "status", owner: "owner", standalone: "standalone", completedDate: "completedDate", completedFrom: "completedFrom", completedTo: "completedTo", candidateGroupId: "candidateGroupId", createdDate: "createdDate", dueDate: "dueDate", priority: "priority", completedBy: "completedBy" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c1, decls: 2, vars: 2, consts: [[4, "ngIf"], [3, "rows", "columns", "loading", "sorting", "multiselect", "selectionMode", "stickyHeader", "actions", "actionsPosition", "contextMenu", "resolverFn", "showRowActionsMenu", "showRowContextMenu", "executeRowAction", "row-select", "row-unselect", "rowClick", "row-keyup", "sorting-changed"], [1, "adf-cloud-task-list-loading-margin", 3, "color", "mode"], ["icon", "assignment", 3, "title", "subtitle", 4, "ngIf"], ["icon", "assignment", 3, "title", "subtitle"]], template: function TaskListCloudComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef(_c0);
        ɵngcc0.ɵɵtemplate(0, TaskListCloudComponent_div_0_Template, 3, 3, "div", 0);
        ɵngcc0.ɵɵtemplate(1, TaskListCloudComponent_ng_container_1_Template, 6, 11, "ng-container", 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngIf", !ctx.rows);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.rows);
    } }, directives: [ɵngcc4.NgIf, ɵngcc2.DataTableComponent, ɵngcc2.LoadingContentTemplateDirective, ɵngcc2.NoContentTemplateDirective, ɵngcc5.MatProgressSpinner, ɵngcc2.EmptyContentComponent], pipes: [ɵngcc6.TranslatePipe], styles: [".adf-cloud-task-list-loading-margin{margin-left:calc(50% - 50px);margin-right:calc(50% - 50px)}"], encapsulation: 2 });
TaskListCloudComponent.PRESET_KEY = 'adf-cloud-task-list.presets';
TaskListCloudComponent.ctorParameters = () => [
    { type: TaskListCloudService },
    { type: AppConfigService },
    { type: TaskCloudService },
    { type: UserPreferencesService }
];
TaskListCloudComponent.propDecorators = {
    assignee: [{ type: Input }],
    createdDate: [{ type: Input }],
    createdFrom: [{ type: Input }],
    createdTo: [{ type: Input }],
    dueDate: [{ type: Input }],
    lastModifiedFrom: [{ type: Input }],
    lastModifiedTo: [{ type: Input }],
    dueDateFrom: [{ type: Input }],
    dueDateTo: [{ type: Input }],
    id: [{ type: Input }],
    name: [{ type: Input }],
    parentTaskId: [{ type: Input }],
    processDefinitionName: [{ type: Input }],
    processDefinitionId: [{ type: Input }],
    processInstanceId: [{ type: Input }],
    status: [{ type: Input }],
    owner: [{ type: Input }],
    priority: [{ type: Input }],
    completedBy: [{ type: Input }],
    standalone: [{ type: Input }],
    completedDate: [{ type: Input }],
    completedFrom: [{ type: Input }],
    completedTo: [{ type: Input }],
    candidateGroupId: [{ type: Input }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TaskListCloudComponent, [{
        type: Component,
        args: [{
                selector: 'adf-cloud-task-list',
                template: "<div *ngIf=\"!rows\">{{ 'ADF_CLOUD_TASK_LIST.FILTERS.MESSAGES.NONE' | translate }}</div>\n<ng-container *ngIf=\"rows\">\n        <adf-datatable\n            [rows]=\"rows\"\n            [columns]=\"columns\"\n            [loading]=\"isLoading\"\n            [sorting]=\"formattedSorting\"\n            [multiselect]=\"multiselect\"\n            [selectionMode]=\"selectionMode\"\n            [stickyHeader]=\"stickyHeader\"\n            [actions]=\"showActions\"\n            [actionsPosition]=\"actionsPosition\"\n            [contextMenu]=\"showContextMenu\"\n            [resolverFn]=\"boundReplacePriorityValues\"\n            (showRowActionsMenu)=\"onShowRowActionsMenu($event)\"\n            (showRowContextMenu)=\"onShowRowContextMenu($event)\"\n            (executeRowAction)=\"onExecuteRowAction($event)\"\n            (row-select)=\"onRowSelect($any($event))\"\n            (row-unselect)=\"onRowUnselect($any($event))\"\n            (rowClick)=\"onRowClick($any($event))\"\n            (row-keyup)=\"onRowKeyUp($any($event))\"\n            (sorting-changed)=\"onSortingChanged($any($event))\">\n            <adf-loading-content-template>\n                <ng-template>\n                    <!-- Add your custom loading template here -->\n                    <mat-progress-spinner class=\"adf-cloud-task-list-loading-margin\"\n                                          [color]=\"'primary'\"\n                                          [mode]=\"'indeterminate'\">\n                    </mat-progress-spinner>\n                </ng-template>\n            </adf-loading-content-template>\n            <adf-no-content-template>\n                <ng-template>\n                    <adf-empty-content *ngIf=\"!emptyCustomContent\"\n                                       icon=\"assignment\"\n                                       [title]=\"'ADF_CLOUD_TASK_LIST.LIST.MESSAGES.TITLE' | translate\"\n                                       [subtitle]=\"'ADF_CLOUD_TASK_LIST.LIST.MESSAGES.SUBTITLE' | translate\">\n                    </adf-empty-content>\n                    <ng-content select=\"adf-custom-empty-content-template\"></ng-content>\n                </ng-template>\n            </adf-no-content-template>\n        </adf-datatable>\n</ng-container>\n",
                encapsulation: ViewEncapsulation.None,
                styles: [".adf-cloud-task-list-loading-margin{margin-left:calc(50% - 50px);margin-right:calc(50% - 50px)}"]
            }]
    }], function () { return [{ type: ɵngcc1.TaskListCloudService }, { type: ɵngcc2.AppConfigService }, { type: ɵngcc3.TaskCloudService }, { type: ɵngcc2.UserPreferencesService }]; }, { assignee: [{
            type: Input
        }], createdFrom: [{
            type: Input
        }], createdTo: [{
            type: Input
        }], lastModifiedFrom: [{
            type: Input
        }], lastModifiedTo: [{
            type: Input
        }], dueDateFrom: [{
            type: Input
        }], dueDateTo: [{
            type: Input
        }], id: [{
            type: Input
        }], name: [{
            type: Input
        }], parentTaskId: [{
            type: Input
        }], processDefinitionName: [{
            type: Input
        }], processDefinitionId: [{
            type: Input
        }], processInstanceId: [{
            type: Input
        }], status: [{
            type: Input
        }], owner: [{
            type: Input
        }], standalone: [{
            type: Input
        }], completedDate: [{
            type: Input
        }], completedFrom: [{
            type: Input
        }], completedTo: [{
            type: Input
        }], candidateGroupId: [{
            type: Input
        }], createdDate: [{
            type: Input
        }], dueDate: [{
            type: Input
        }], priority: [{
            type: Input
        }], completedBy: [{
            type: Input
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,