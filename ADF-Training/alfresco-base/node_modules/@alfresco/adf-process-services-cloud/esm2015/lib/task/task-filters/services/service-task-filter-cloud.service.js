import { IdentityUserService } from '@alfresco/adf-core';
import { Injectable, Inject } from '@angular/core';
import { of, BehaviorSubject } from 'rxjs';
import { switchMap, map } from 'rxjs/operators';
import { TASK_FILTERS_SERVICE_TOKEN } from '../../../services/cloud-token.service';
import * as i0 from "@angular/core";
import * as i1 from "@alfresco/adf-core";
import * as i2 from "../../../services/cloud-token.service";
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@alfresco/adf-core';
export class ServiceTaskFilterCloudService {
    constructor(identityUserService, preferenceService) {
        this.identityUserService = identityUserService;
        this.preferenceService = preferenceService;
        this.filtersSubject = new BehaviorSubject([]);
        this.filters$ = this.filtersSubject.asObservable();
    }
    createDefaultFilters(appName) {
        const key = this.prepareKey(appName);
        this.preferenceService.getPreferences(appName, key).pipe(switchMap((response) => {
            const preferences = (response && response.list && response.list.entries) ? response.list.entries : [];
            if (!this.hasPreferences(preferences) || !this.hasTaskFilters(preferences, key)) {
                return this.createTaskFilters(appName, key, this.defaultServiceTaskFilters(appName));
            }
            else {
                return of(this.findFiltersByKeyInPreferences(preferences, key));
            }
        })).subscribe((filters) => {
            this.addFiltersToStream(filters);
        });
    }
    hasPreferences(preferences) {
        return preferences && preferences.length > 0;
    }
    hasTaskFilters(preferences, key) {
        const filters = preferences.find((filter) => { return filter.entry.key === key; });
        return (filters && filters.entry) ? JSON.parse(filters.entry.value).length > 0 : false;
    }
    createTaskFilters(appName, key, filters) {
        return this.preferenceService.createPreference(appName, key, filters);
    }
    getTaskFiltersByKey(appName, key) {
        return this.preferenceService.getPreferenceByKey(appName, key);
    }
    getTaskListFilters(appName) {
        this.createDefaultFilters(appName);
        return this.filters$;
    }
    getTaskFilterById(appName, id) {
        const key = this.prepareKey(appName);
        return this.getTaskFiltersByKey(appName, key).pipe(switchMap((filters) => {
            if (filters && filters.length === 0) {
                return this.createTaskFilters(appName, key, this.defaultServiceTaskFilters(appName));
            }
            else {
                return of(filters);
            }
        }), map((filters) => {
            return filters.filter((filter) => {
                return filter.id === id;
            })[0];
        }));
    }
    addFilter(newFilter) {
        const key = this.prepareKey(newFilter.appName);
        return this.getTaskFiltersByKey(newFilter.appName, key).pipe(switchMap((filters) => {
            if (filters && filters.length === 0) {
                return this.createTaskFilters(newFilter.appName, key, [newFilter]);
            }
            else {
                filters.push(newFilter);
                return this.preferenceService.updatePreference(newFilter.appName, key, filters);
            }
        }), map((filters) => {
            this.addFiltersToStream(filters);
            return filters;
        }));
    }
    addFiltersToStream(filters) {
        this.filtersSubject.next(filters);
    }
    updateFilter(updatedFilter) {
        const key = this.prepareKey(updatedFilter.appName);
        return this.getTaskFiltersByKey(updatedFilter.appName, key).pipe(switchMap((filters) => {
            if (filters && filters.length === 0) {
                return this.createTaskFilters(updatedFilter.appName, key, [updatedFilter]);
            }
            else {
                const itemIndex = filters.findIndex((filter) => filter.id === updatedFilter.id);
                filters[itemIndex] = updatedFilter;
                return this.updateTaskFilters(updatedFilter.appName, key, filters);
            }
        }), map((updatedFilters) => {
            this.addFiltersToStream(updatedFilters);
            return updatedFilters;
        }));
    }
    deleteFilter(deletedFilter) {
        const key = this.prepareKey(deletedFilter.appName);
        return this.getTaskFiltersByKey(deletedFilter.appName, key).pipe(switchMap((filters) => {
            if (filters && filters.length > 0) {
                filters = filters.filter(filter => filter.id !== deletedFilter.id);
                return this.updateTaskFilters(deletedFilter.appName, key, filters);
            }
            return of([]);
        }), map(filters => {
            this.addFiltersToStream(filters);
            return filters;
        }));
    }
    isDefaultFilter(filterName) {
        const defaultFilters = this.defaultServiceTaskFilters();
        return defaultFilters.findIndex((filter) => filterName === filter.name) !== -1;
    }
    updateTaskFilters(appName, key, filters) {
        return this.preferenceService.updatePreference(appName, key, filters);
    }
    prepareKey(appName) {
        return `service-task-filters-${appName}-${this.identityUserService.getCurrentUserInfo().username}`;
    }
    findFiltersByKeyInPreferences(preferences, key) {
        const result = preferences.find((filter) => { return filter.entry.key === key; });
        return result && result.entry ? JSON.parse(result.entry.value) : [];
    }
    defaultServiceTaskFilters(appName) {
        return [
            {
                id: this.generateRandomId(),
                name: 'ADF_CLOUD_SERVICE_TASK_FILTERS.ALL_SERVICE_TASKS',
                key: 'my-service-tasks',
                icon: 'inbox',
                appName,
                status: '',
                sort: 'startedDate',
                order: 'DESC'
            },
            {
                id: this.generateRandomId(),
                name: 'ADF_CLOUD_SERVICE_TASK_FILTERS.COMPLETED_TASKS',
                key: 'completed-tasks',
                icon: 'done',
                appName,
                status: 'COMPLETED',
                sort: 'completedDate',
                order: 'DESC'
            },
            {
                id: this.generateRandomId(),
                name: 'ADF_CLOUD_SERVICE_TASK_FILTERS.ERRORED_TASKS',
                key: 'errored-service-tasks',
                icon: 'error',
                appName,
                status: 'ERROR',
                sort: 'startedDate',
                order: 'DESC'
            }
        ];
    }
    generateRandomId() {
        return Math.random().toString(36).substr(2, 9);
    }
}
ServiceTaskFilterCloudService.ɵfac = function ServiceTaskFilterCloudService_Factory(t) { return new (t || ServiceTaskFilterCloudService)(ɵngcc0.ɵɵinject(ɵngcc1.IdentityUserService), ɵngcc0.ɵɵinject(TASK_FILTERS_SERVICE_TOKEN)); };
ServiceTaskFilterCloudService.ɵprov = i0.ɵɵdefineInjectable({ factory: function ServiceTaskFilterCloudService_Factory() { return new ServiceTaskFilterCloudService(i0.ɵɵinject(i1.IdentityUserService), i0.ɵɵinject(i2.TASK_FILTERS_SERVICE_TOKEN)); }, token: ServiceTaskFilterCloudService, providedIn: "root" });
ServiceTaskFilterCloudService.ctorParameters = () => [
    { type: IdentityUserService },
    { type: undefined, decorators: [{ type: Inject, args: [TASK_FILTERS_SERVICE_TOKEN,] }] }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ServiceTaskFilterCloudService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc1.IdentityUserService }, { type: undefined, decorators: [{
                type: Inject,
                args: [TASK_FILTERS_SERVICE_TOKEN]
            }] }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,