/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, ViewEncapsulation } from '@angular/core';
import { FormBuilder } from '@angular/forms';
import { DateAdapter } from '@angular/material/core';
import { MatDialog } from '@angular/material/dialog';
import { takeUntil, map } from 'rxjs/operators';
import moment from 'moment-es6';
import { TaskFilterCloudModel } from '../../models/filter-cloud.model';
import { TaskFilterCloudService } from '../../services/task-filter-cloud.service';
import { TranslationService, UserPreferencesService } from '@alfresco/adf-core';
import { AppsProcessCloudService } from '../../../../app/services/apps-process-cloud.service';
import { DateCloudFilterType } from '../../../../models/date-cloud-filter.model';
import { TaskCloudService } from '../../../services/task-cloud.service';
import { BaseEditTaskFilterCloudComponent } from './base-edit-task-filter-cloud.component';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/forms';
import * as ɵngcc2 from '@angular/material/dialog';
import * as ɵngcc3 from '@alfresco/adf-core';
import * as ɵngcc4 from '../../services/task-filter-cloud.service';
import * as ɵngcc5 from '@angular/material/core';
import * as ɵngcc6 from '../../../../app/services/apps-process-cloud.service';
import * as ɵngcc7 from '../../../services/task-cloud.service';
import * as ɵngcc8 from '@angular/material/expansion';
import * as ɵngcc9 from '@angular/common';
import * as ɵngcc10 from '@angular/flex-layout/flex';
import * as ɵngcc11 from '@angular/material/button';
import * as ɵngcc12 from '@angular/material/tooltip';
import * as ɵngcc13 from '@angular/material/progress-spinner';
import * as ɵngcc14 from '@angular/material/form-field';
import * as ɵngcc15 from '@angular/material/select';
import * as ɵngcc16 from '@angular/material/input';
import * as ɵngcc17 from '@angular/material/datepicker';
import * as ɵngcc18 from '@angular/material/icon';
import * as ɵngcc19 from '@angular/material/checkbox';
import * as ɵngcc20 from '../../../../common/date-range-filter/date-range-filter.component';
import * as ɵngcc21 from '../../../../people/components/people-cloud.component';
import * as ɵngcc22 from '../task-assignment-filter/task-assignment-filter.component';
import * as ɵngcc23 from '@ngx-translate/core';

function EditTaskFilterCloudComponent_mat_expansion_panel_header_2_ng_container_1_mat_panel_title_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-panel-title", 10);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r5 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(2, 1, ctx_r5.taskFilter.name));
} }
function EditTaskFilterCloudComponent_mat_expansion_panel_header_2_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(2, 1, "ADF_CLOUD_EDIT_TASK_FILTER.TITLE"));
} }
function EditTaskFilterCloudComponent_mat_expansion_panel_header_2_ng_container_1_div_4_ng_container_1_button_1_Template(rf, ctx) { if (rf & 1) {
    const _r12 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 13);
    ɵngcc0.ɵɵlistener("click", function EditTaskFilterCloudComponent_mat_expansion_panel_header_2_ng_container_1_div_4_ng_container_1_button_1_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r12); const filterAction_r10 = ctx.$implicit; const ctx_r11 = ɵngcc0.ɵɵnextContext(5); return ctx_r11.executeFilterActions(filterAction_r10); });
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵelement(2, "adf-icon", 14);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const filterAction_r10 = ctx.$implicit;
    const ctx_r9 = ɵngcc0.ɵɵnextContext(5);
    ɵngcc0.ɵɵpropertyInterpolate("matTooltip", ɵngcc0.ɵɵpipeBind1(1, 4, filterAction_r10.tooltip));
    ɵngcc0.ɵɵproperty("disabled", ctx_r9.isDisabledAction(filterAction_r10));
    ɵngcc0.ɵɵattribute("data-automation-id", "adf-filter-action-" + filterAction_r10.actionType);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("value", filterAction_r10.icon);
} }
function EditTaskFilterCloudComponent_mat_expansion_panel_header_2_ng_container_1_div_4_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, EditTaskFilterCloudComponent_mat_expansion_panel_header_2_ng_container_1_div_4_ng_container_1_button_1_Template, 3, 6, "button", 12);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r8 = ɵngcc0.ɵɵnextContext(4);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r8.taskFilterActions);
} }
function EditTaskFilterCloudComponent_mat_expansion_panel_header_2_ng_container_1_div_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 11);
    ɵngcc0.ɵɵtemplate(1, EditTaskFilterCloudComponent_mat_expansion_panel_header_2_ng_container_1_div_4_ng_container_1_Template, 2, 1, "ng-container", 3);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r7 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r7.toggleFilterActions);
} }
function EditTaskFilterCloudComponent_mat_expansion_panel_header_2_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, EditTaskFilterCloudComponent_mat_expansion_panel_header_2_ng_container_1_mat_panel_title_1_Template, 3, 3, "mat-panel-title", 7);
    ɵngcc0.ɵɵelementStart(2, "mat-panel-description", 8);
    ɵngcc0.ɵɵtemplate(3, EditTaskFilterCloudComponent_mat_expansion_panel_header_2_ng_container_1_span_3_Template, 3, 3, "span", 3);
    ɵngcc0.ɵɵtemplate(4, EditTaskFilterCloudComponent_mat_expansion_panel_header_2_ng_container_1_div_4_Template, 2, 1, "div", 9);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r2.showTaskFilterName);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r2.showTitle);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r2.showFilterActions);
} }
function EditTaskFilterCloudComponent_mat_expansion_panel_header_2_ng_template_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 15);
    ɵngcc0.ɵɵelement(1, "mat-spinner", 16);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("diameter", 30);
} }
function EditTaskFilterCloudComponent_mat_expansion_panel_header_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-expansion-panel-header", 4);
    ɵngcc0.ɵɵtemplate(1, EditTaskFilterCloudComponent_mat_expansion_panel_header_2_ng_container_1_Template, 5, 3, "ng-container", 5);
    ɵngcc0.ɵɵtemplate(2, EditTaskFilterCloudComponent_mat_expansion_panel_header_2_ng_template_2_Template, 2, 1, "ng-template", null, 6, ɵngcc0.ɵɵtemplateRefExtractor);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const _r3 = ɵngcc0.ɵɵreference(3);
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r0.isLoading)("ngIfElse", _r3);
} }
function EditTaskFilterCloudComponent_ng_container_3_form_1_ng_container_2_mat_form_field_1_mat_option_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-option", 14);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const propertyOption_r24 = ctx.$implicit;
    const taskFilterProperty_r15 = ɵngcc0.ɵɵnextContext(2).$implicit;
    ɵngcc0.ɵɵproperty("value", propertyOption_r24.value);
    ɵngcc0.ɵɵattribute("data-automation-id", "adf-cloud-edit-task-property-options-" + taskFilterProperty_r15.key);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 3, propertyOption_r24.label), " ");
} }
function EditTaskFilterCloudComponent_ng_container_3_form_1_ng_container_2_mat_form_field_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-form-field", 26);
    ɵngcc0.ɵɵelementStart(1, "mat-select", 27);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵtemplate(3, EditTaskFilterCloudComponent_ng_container_3_form_1_ng_container_2_mat_form_field_1_mat_option_3_Template, 3, 5, "mat-option", 28);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const taskFilterProperty_r15 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵproperty("floatLabel", "auto");
    ɵngcc0.ɵɵattribute("data-automation-id", taskFilterProperty_r15.key);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate("placeholder", ɵngcc0.ɵɵpipeBind1(2, 6, taskFilterProperty_r15.label));
    ɵngcc0.ɵɵproperty("formControlName", taskFilterProperty_r15.key);
    ɵngcc0.ɵɵattribute("data-automation-id", "adf-cloud-edit-task-property-" + taskFilterProperty_r15.key);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngForOf", taskFilterProperty_r15.options);
} }
function EditTaskFilterCloudComponent_ng_container_3_form_1_ng_container_2_mat_form_field_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-form-field", 26);
    ɵngcc0.ɵɵelement(1, "input", 29);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const taskFilterProperty_r15 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵproperty("floatLabel", "auto");
    ɵngcc0.ɵɵattribute("data-automation-id", taskFilterProperty_r15.key);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate("placeholder", ɵngcc0.ɵɵpipeBind1(2, 5, taskFilterProperty_r15.label));
    ɵngcc0.ɵɵproperty("formControlName", taskFilterProperty_r15.key);
    ɵngcc0.ɵɵattribute("data-automation-id", "adf-cloud-edit-task-property-" + taskFilterProperty_r15.key);
} }
function EditTaskFilterCloudComponent_ng_container_3_form_1_ng_container_2_mat_form_field_3_div_10_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div");
    ɵngcc0.ɵɵelementStart(1, "div", 34);
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(4, "mat-icon", 35);
    ɵngcc0.ɵɵtext(5, "warning");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(3, 1, "ADF_TASK_LIST.START_TASK.FORM.ERROR.DATE"));
} }
function EditTaskFilterCloudComponent_ng_container_3_form_1_ng_container_2_mat_form_field_3_Template(rf, ctx) { if (rf & 1) {
    const _r31 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "mat-form-field", 26);
    ɵngcc0.ɵɵelementStart(1, "mat-label");
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(4, "input", 30);
    ɵngcc0.ɵɵlistener("keyup", function EditTaskFilterCloudComponent_ng_container_3_form_1_ng_container_2_mat_form_field_3_Template_input_keyup_4_listener($event) { ɵngcc0.ɵɵrestoreView(_r31); const taskFilterProperty_r15 = ɵngcc0.ɵɵnextContext().$implicit; const ctx_r30 = ɵngcc0.ɵɵnextContext(3); return ctx_r30.onDateChanged($event.srcElement.value, taskFilterProperty_r15); })("dateChange", function EditTaskFilterCloudComponent_ng_container_3_form_1_ng_container_2_mat_form_field_3_Template_input_dateChange_4_listener($event) { ɵngcc0.ɵɵrestoreView(_r31); const taskFilterProperty_r15 = ɵngcc0.ɵɵnextContext().$implicit; const ctx_r33 = ɵngcc0.ɵɵnextContext(3); return ctx_r33.onDateChanged($event.value, taskFilterProperty_r15); });
    ɵngcc0.ɵɵpipe(5, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(6, "mat-datepicker-toggle", 31);
    ɵngcc0.ɵɵelement(7, "mat-datepicker", null, 32);
    ɵngcc0.ɵɵelementStart(9, "div", 33);
    ɵngcc0.ɵɵtemplate(10, EditTaskFilterCloudComponent_ng_container_3_form_1_ng_container_2_mat_form_field_3_div_10_Template, 6, 3, "div", 3);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const _r28 = ɵngcc0.ɵɵreference(8);
    const taskFilterProperty_r15 = ɵngcc0.ɵɵnextContext().$implicit;
    const ctx_r18 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵproperty("floatLabel", "auto");
    ɵngcc0.ɵɵattribute("data-automation-id", taskFilterProperty_r15.key);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(3, 10, taskFilterProperty_r15.label));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵpropertyInterpolate("placeholder", ɵngcc0.ɵɵpipeBind1(5, 12, taskFilterProperty_r15.label));
    ɵngcc0.ɵɵproperty("matDatepicker", _r28);
    ɵngcc0.ɵɵattribute("data-automation-id", "adf-cloud-edit-task-property-" + taskFilterProperty_r15.key);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("for", _r28);
    ɵngcc0.ɵɵattribute("data-automation-id", "adf-cloud-edit-task-property-date-toggle-" + taskFilterProperty_r15.key);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵattribute("data-automation-id", "adf-cloud-edit-task-property-date-picker-" + taskFilterProperty_r15.key);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r18.hasError(taskFilterProperty_r15));
} }
function EditTaskFilterCloudComponent_ng_container_3_form_1_ng_container_2_div_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 36);
    ɵngcc0.ɵɵelementStart(1, "mat-checkbox", 37);
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const taskFilterProperty_r15 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("formControlName", taskFilterProperty_r15.key);
    ɵngcc0.ɵɵattribute("data-automation-id", taskFilterProperty_r15.key);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(3, 3, taskFilterProperty_r15.label));
} }
function EditTaskFilterCloudComponent_ng_container_3_form_1_ng_container_2_adf_cloud_date_range_filter_5_Template(rf, ctx) { if (rf & 1) {
    const _r39 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "adf-cloud-date-range-filter", 38, 39);
    ɵngcc0.ɵɵlistener("dateTypeChange", function EditTaskFilterCloudComponent_ng_container_3_form_1_ng_container_2_adf_cloud_date_range_filter_5_Template_adf_cloud_date_range_filter_dateTypeChange_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r39); const taskFilterProperty_r15 = ɵngcc0.ɵɵnextContext().$implicit; const ctx_r38 = ɵngcc0.ɵɵnextContext(3); return ctx_r38.onDateTypeChange($event, taskFilterProperty_r15); })("dateChanged", function EditTaskFilterCloudComponent_ng_container_3_form_1_ng_container_2_adf_cloud_date_range_filter_5_Template_adf_cloud_date_range_filter_dateChanged_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r39); const taskFilterProperty_r15 = ɵngcc0.ɵɵnextContext().$implicit; const ctx_r41 = ɵngcc0.ɵɵnextContext(3); return ctx_r41.onDateRangeFilterChanged($event, taskFilterProperty_r15); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const taskFilterProperty_r15 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵproperty("processFilterProperty", taskFilterProperty_r15)("options", taskFilterProperty_r15.dateFilterOptions);
} }
function EditTaskFilterCloudComponent_ng_container_3_form_1_ng_container_2_div_6_Template(rf, ctx) { if (rf & 1) {
    const _r45 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 40);
    ɵngcc0.ɵɵelementStart(1, "adf-cloud-people", 41);
    ɵngcc0.ɵɵlistener("changedUsers", function EditTaskFilterCloudComponent_ng_container_3_form_1_ng_container_2_div_6_Template_adf_cloud_people_changedUsers_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r45); const taskFilterProperty_r15 = ɵngcc0.ɵɵnextContext().$implicit; const ctx_r44 = ɵngcc0.ɵɵnextContext(3); return ctx_r44.onChangedUser($event, taskFilterProperty_r15); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const taskFilterProperty_r15 = ɵngcc0.ɵɵnextContext().$implicit;
    const ctx_r21 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵclassMap("adf-edit-task-filter-" + taskFilterProperty_r15.key);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("preSelectUsers", taskFilterProperty_r15.value)("title", taskFilterProperty_r15.label)("validate", true)("appName", ctx_r21.appName)("mode", taskFilterProperty_r15.selectionMode);
} }
function EditTaskFilterCloudComponent_ng_container_3_form_1_ng_container_2_adf_cloud_task_assignment_filter_7_Template(rf, ctx) { if (rf & 1) {
    const _r49 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "adf-cloud-task-assignment-filter", 42);
    ɵngcc0.ɵɵlistener("assignedChange", function EditTaskFilterCloudComponent_ng_container_3_form_1_ng_container_2_adf_cloud_task_assignment_filter_7_Template_adf_cloud_task_assignment_filter_assignedChange_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r49); const ctx_r48 = ɵngcc0.ɵɵnextContext(4); return ctx_r48.onAssignedChange($event); })("assignedGroupChange", function EditTaskFilterCloudComponent_ng_container_3_form_1_ng_container_2_adf_cloud_task_assignment_filter_7_Template_adf_cloud_task_assignment_filter_assignedGroupChange_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r49); const ctx_r50 = ɵngcc0.ɵɵnextContext(4); return ctx_r50.onAssignedGroupsChange($event); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const taskFilterProperty_r15 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵproperty("taskFilterProperty", taskFilterProperty_r15);
} }
function EditTaskFilterCloudComponent_ng_container_3_form_1_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, EditTaskFilterCloudComponent_ng_container_3_form_1_ng_container_2_mat_form_field_1_Template, 4, 8, "mat-form-field", 21);
    ɵngcc0.ɵɵtemplate(2, EditTaskFilterCloudComponent_ng_container_3_form_1_ng_container_2_mat_form_field_2_Template, 3, 7, "mat-form-field", 21);
    ɵngcc0.ɵɵtemplate(3, EditTaskFilterCloudComponent_ng_container_3_form_1_ng_container_2_mat_form_field_3_Template, 11, 14, "mat-form-field", 21);
    ɵngcc0.ɵɵtemplate(4, EditTaskFilterCloudComponent_ng_container_3_form_1_ng_container_2_div_4_Template, 4, 5, "div", 22);
    ɵngcc0.ɵɵtemplate(5, EditTaskFilterCloudComponent_ng_container_3_form_1_ng_container_2_adf_cloud_date_range_filter_5_Template, 2, 2, "adf-cloud-date-range-filter", 23);
    ɵngcc0.ɵɵtemplate(6, EditTaskFilterCloudComponent_ng_container_3_form_1_ng_container_2_div_6_Template, 2, 8, "div", 24);
    ɵngcc0.ɵɵtemplate(7, EditTaskFilterCloudComponent_ng_container_3_form_1_ng_container_2_adf_cloud_task_assignment_filter_7_Template, 1, 1, "adf-cloud-task-assignment-filter", 25);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const taskFilterProperty_r15 = ctx.$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", taskFilterProperty_r15.type === "select");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", taskFilterProperty_r15.type === "text");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", taskFilterProperty_r15.type === "date");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", taskFilterProperty_r15.type === "checkbox");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", taskFilterProperty_r15.type === "date-range");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", taskFilterProperty_r15.type === "people");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", taskFilterProperty_r15.type === "assignment");
} }
function EditTaskFilterCloudComponent_ng_container_3_form_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "form", 18);
    ɵngcc0.ɵɵelementStart(1, "div", 19);
    ɵngcc0.ɵɵtemplate(2, EditTaskFilterCloudComponent_ng_container_3_form_1_ng_container_2_Template, 8, 7, "ng-container", 20);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r13 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("formGroup", ctx_r13.editTaskFilterForm);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r13.taskFilterProperties);
} }
function EditTaskFilterCloudComponent_ng_container_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, EditTaskFilterCloudComponent_ng_container_3_form_1_Template, 3, 2, "form", 17);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r1.editTaskFilterForm);
} }
export class EditTaskFilterCloudComponent extends BaseEditTaskFilterCloudComponent {
    constructor(formBuilder, dialog, translateService, taskFilterCloudService, dateAdapter, userPreferencesService, appsProcessCloudService, taskCloudService) {
        super(formBuilder, dateAdapter, userPreferencesService, appsProcessCloudService, taskCloudService, dialog, translateService);
        this.taskFilterCloudService = taskFilterCloudService;
    }
    assignNewFilter(model) {
        this.setLastModifiedToFilter(model);
        this.changedTaskFilter = new TaskFilterCloudModel(Object.assign({}, this.taskFilter, model));
        this.formHasBeenChanged = !this.deepCompare(this.changedTaskFilter, this.taskFilter);
        this.filterChange.emit(this.changedTaskFilter);
    }
    getTaskFilterById(appName, id) {
        return this.taskFilterCloudService
            .getTaskFilterById(appName, id)
            .pipe(map(response => new TaskFilterCloudModel(response)));
    }
    createAndFilterProperties() {
        const result = super.createAndFilterProperties();
        if (this.hasLastModifiedProperty()) {
            return [
                ...result,
                ...this.createLastModifiedProperty()
            ];
        }
        return result;
    }
    getDefaultFilterProperties() {
        return ['status', 'assignee', 'sort', 'order'];
    }
    getDefaultSortProperties() {
        return ['id', 'name', 'createdDate', 'priority'];
    }
    setLastModifiedToFilter(formValues) {
        if (formValues.lastModifiedTo && Date.parse(formValues.lastModifiedTo.toString())) {
            const lastModifiedToFilterValue = moment(formValues.lastModifiedTo);
            lastModifiedToFilterValue.set({
                hour: 23,
                minute: 59,
                second: 59
            });
            formValues.lastModifiedTo = lastModifiedToFilterValue.toISOString(true);
        }
    }
    updateFilter(filterToUpdate) {
        return this.taskFilterCloudService.updateFilter(filterToUpdate);
    }
    deleteFilter(filterToDelete) {
        return this.taskFilterCloudService.deleteFilter(filterToDelete);
    }
    addFilter(filterToAdd) {
        return this.taskFilterCloudService
            .addFilter(filterToAdd)
            .pipe(takeUntil(this.onDestroy$));
    }
    isDisabledForDefaultFilters(action) {
        return (this.taskFilterCloudService.isDefaultFilter(this.taskFilter.name) &&
            EditTaskFilterCloudComponent.ACTIONS_DISABLED_BY_DEFAULT.includes(action.actionType));
    }
    restoreDefaultTaskFilters() {
        return this.taskFilterCloudService.getTaskListFilters(this.appName);
    }
    createLastModifiedProperty() {
        return [
            {
                label: 'ADF_CLOUD_EDIT_TASK_FILTER.LABEL.LAST_MODIFIED_FROM',
                type: 'date',
                key: 'lastModifiedFrom',
                value: ''
            },
            {
                label: 'ADF_CLOUD_EDIT_TASK_FILTER.LABEL.LAST_MODIFIED_TO',
                type: 'date',
                key: 'lastModifiedTo',
                value: ''
            }
        ];
    }
    getStatusOptions() {
        return [
            { value: '', label: 'ADF_CLOUD_TASK_FILTERS.STATUS.ALL' },
            { value: 'CREATED', label: 'ADF_CLOUD_TASK_FILTERS.STATUS.CREATED' },
            { value: 'ASSIGNED', label: 'ADF_CLOUD_TASK_FILTERS.STATUS.ASSIGNED' },
            { value: 'SUSPENDED', label: 'ADF_CLOUD_TASK_FILTERS.STATUS.SUSPENDED' },
            { value: 'CANCELLED', label: 'ADF_CLOUD_TASK_FILTERS.STATUS.CANCELLED' },
            { value: 'COMPLETED', label: 'ADF_CLOUD_TASK_FILTERS.STATUS.COMPLETED' }
        ];
    }
    createTaskFilterProperties() {
        const statusOptions = this.getStatusOptions();
        const sortProperties = this.createSortProperties;
        return [
            {
                label: 'ADF_CLOUD_EDIT_TASK_FILTER.LABEL.APP_NAME',
                type: 'select',
                key: 'appName',
                value: this.taskFilter.appName || '',
                options: this.applicationNames
            },
            {
                label: 'ADF_CLOUD_EDIT_TASK_FILTER.LABEL.TASK_ID',
                type: 'text',
                key: 'taskId',
                value: ''
            },
            {
                label: 'ADF_CLOUD_EDIT_TASK_FILTER.LABEL.STATUS',
                type: 'select',
                key: 'status',
                value: this.taskFilter.status || statusOptions[0].value,
                options: statusOptions
            },
            {
                label: 'ADF_CLOUD_EDIT_TASK_FILTER.LABEL.ASSIGNMENT',
                type: 'text',
                key: 'assignee',
                value: this.taskFilter.assignee || ''
            },
            {
                label: 'ADF_CLOUD_EDIT_TASK_FILTER.LABEL.PROCESS_DEF_NAME',
                type: 'select',
                key: 'processDefinitionName',
                value: this.taskFilter.processDefinitionName || '',
                options: this.processDefinitionNames
            },
            {
                label: 'ADF_CLOUD_EDIT_TASK_FILTER.LABEL.PROCESS_INSTANCE_ID',
                type: 'text',
                key: 'processInstanceId',
                value: this.taskFilter.processInstanceId || ''
            },
            {
                label: 'ADF_CLOUD_EDIT_TASK_FILTER.LABEL.PROCESS_DEF_ID',
                type: 'text',
                key: 'processDefinitionId',
                value: this.taskFilter.processDefinitionId || ''
            },
            {
                label: 'ADF_CLOUD_EDIT_TASK_FILTER.LABEL.TASK_NAME',
                type: 'text',
                key: 'taskName',
                value: this.taskFilter.taskName || ''
            },
            {
                label: 'ADF_CLOUD_EDIT_TASK_FILTER.LABEL.PARENT_TASK_ID',
                type: 'text',
                key: 'parentTaskId',
                value: this.taskFilter.parentTaskId || ''
            },
            {
                label: 'ADF_CLOUD_EDIT_TASK_FILTER.LABEL.PRIORITY',
                type: 'select',
                key: 'priority',
                value: this.taskFilter.priority || '',
                options: this.taskCloudService.priorities
            },
            {
                label: 'ADF_CLOUD_EDIT_TASK_FILTER.LABEL.OWNER',
                type: 'text',
                key: 'owner',
                value: this.taskFilter.owner || ''
            },
            {
                label: 'ADF_CLOUD_EDIT_TASK_FILTER.LABEL.CREATED_DATE',
                type: 'date',
                key: 'createdDate',
                value: ''
            },
            {
                label: 'ADF_CLOUD_EDIT_TASK_FILTER.LABEL.SORT',
                type: 'select',
                key: 'sort',
                value: this.taskFilter.sort || sortProperties[0].value,
                options: sortProperties
            },
            {
                label: 'ADF_CLOUD_EDIT_TASK_FILTER.LABEL.DIRECTION',
                type: 'select',
                key: 'order',
                value: this.taskFilter.order || this.sortDirections[0].value,
                options: [...this.sortDirections]
            },
            {
                label: 'ADF_CLOUD_EDIT_TASK_FILTER.LABEL.STAND_ALONE',
                type: 'checkbox',
                key: 'standalone',
                value: this.taskFilter.standalone || false
            },
            {
                label: 'ADF_CLOUD_EDIT_TASK_FILTER.LABEL.DUE_DATE',
                type: 'date-range',
                key: 'dueDateRange',
                attributes: { dateType: 'dueDateType', from: '_dueDateFrom', to: '_dueDateTo' },
                value: {
                    dueDateType: this.taskFilter.dueDateType || null,
                    _dueDateFrom: this.taskFilter.dueDateFrom || null,
                    _dueDateTo: this.taskFilter.dueDateTo || null
                },
                dateFilterOptions: [
                    DateCloudFilterType.NO_DATE,
                    DateCloudFilterType.TODAY,
                    DateCloudFilterType.TOMORROW,
                    DateCloudFilterType.NEXT_7_DAYS,
                    DateCloudFilterType.RANGE
                ]
            },
            {
                label: 'ADF_CLOUD_EDIT_TASK_FILTER.LABEL.COMPLETED_DATE',
                type: 'date-range',
                key: 'completedDateRange',
                attributes: { dateType: 'completedDateType', from: '_completedFrom', to: '_completedTo' },
                value: {
                    completedDateType: this.taskFilter.completedDateType || null,
                    _completedFrom: this.taskFilter.completedFrom || null,
                    _completedTo: this.taskFilter.completedTo || null
                }
            },
            {
                label: 'ADF_CLOUD_EDIT_TASK_FILTER.LABEL.CREATED_DATE',
                type: 'date-range',
                key: 'createdDateRange',
                attributes: { dateType: 'createdDateType', from: '_createdFrom', to: '_createdTo' },
                value: {
                    createdDateType: this.taskFilter.createdDateType || null,
                    _createdFrom: this.taskFilter.createdFrom || null,
                    _createdTo: this.taskFilter.createdTo || null
                }
            },
            {
                label: 'ADF_CLOUD_EDIT_TASK_FILTER.LABEL.COMPLETED_BY',
                type: 'people',
                key: 'completedBy',
                value: this.taskFilter.completedBy ? [this.taskFilter.completedBy] : null,
                selectionMode: 'single'
            },
            {
                label: 'ADF_CLOUD_EDIT_TASK_FILTER.LABEL.ASSIGNMENT',
                type: 'assignment',
                key: 'assignment',
                attributes: { assignee: 'assignee', candidateGroups: 'candidateGroups' },
                value: {
                    assignee: this.taskFilter.assignee || null,
                    candidateGroups: this.taskFilter.candidateGroups || []
                }
            }
        ];
    }
}
EditTaskFilterCloudComponent.ɵfac = function EditTaskFilterCloudComponent_Factory(t) { return new (t || EditTaskFilterCloudComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FormBuilder), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.MatDialog), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.TranslationService), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.TaskFilterCloudService), ɵngcc0.ɵɵdirectiveInject(ɵngcc5.DateAdapter), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.UserPreferencesService), ɵngcc0.ɵɵdirectiveInject(ɵngcc6.AppsProcessCloudService), ɵngcc0.ɵɵdirectiveInject(ɵngcc7.TaskCloudService)); };
EditTaskFilterCloudComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: EditTaskFilterCloudComponent, selectors: [["adf-cloud-edit-task-filter"]], features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 4, vars: 3, consts: [[3, "hideToggle"], [3, "afterExpand", "closed"], ["id", "adf-edit-task-filter-expansion-header", 4, "ngIf"], [4, "ngIf"], ["id", "adf-edit-task-filter-expansion-header"], [4, "ngIf", "ngIfElse"], ["loadingTemplate", ""], ["fxLayoutAlign", "space-between center", "id", "adf-edit-task-filter-title-id", 4, "ngIf"], ["fxLayoutAlign", "space-between center", "id", "adf-edit-task-filter-sub-title-id"], ["class", "adf-cloud-edit-task-filter-actions", 4, "ngIf"], ["fxLayoutAlign", "space-between center", "id", "adf-edit-task-filter-title-id"], [1, "adf-cloud-edit-task-filter-actions"], ["mat-icon-button", "", 3, "matTooltip", "disabled", "click", 4, "ngFor", "ngForOf"], ["mat-icon-button", "", 3, "matTooltip", "disabled", "click"], [3, "value"], [1, "adf-cloud-edit-task-filter-loading-margin"], [3, "diameter"], [3, "formGroup", 4, "ngIf"], [3, "formGroup"], ["fxLayout", "row wrap", "fxLayout.xs", "column", "fxLayoutGap", "10px", "fxLayoutAlign", "start center"], [4, "ngFor", "ngForOf"], ["fxFlex", "23%", 3, "floatLabel", 4, "ngIf"], ["class", "adf-edit-task-filter-checkbox", 4, "ngIf"], [3, "processFilterProperty", "options", "dateTypeChange", "dateChanged", 4, "ngIf"], ["fxFlex", "23%", 3, "class", 4, "ngIf"], ["fxFlex", "23%", 3, "taskFilterProperty", "assignedChange", "assignedGroupChange", 4, "ngIf"], ["fxFlex", "23%", 3, "floatLabel"], [3, "placeholder", "formControlName"], [3, "value", 4, "ngFor", "ngForOf"], ["matInput", "", "type", "text", 3, "formControlName", "placeholder"], ["matInput", "", 3, "matDatepicker", "placeholder", "keyup", "dateChange"], ["matSuffix", "", 3, "for"], ["dateController", ""], [1, "adf-edit-task-filter-date-error-container"], [1, "adf-error-text"], [1, "adf-error-icon"], [1, "adf-edit-task-filter-checkbox"], ["color", "primary", 3, "formControlName"], [3, "processFilterProperty", "options", "dateTypeChange", "dateChanged"], ["dateRange", ""], ["fxFlex", "23%"], [3, "preSelectUsers", "title", "validate", "appName", "mode", "changedUsers"], ["fxFlex", "23%", 3, "taskFilterProperty", "assignedChange", "assignedGroupChange"]], template: function EditTaskFilterCloudComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "mat-accordion", 0);
        ɵngcc0.ɵɵelementStart(1, "mat-expansion-panel", 1);
        ɵngcc0.ɵɵlistener("afterExpand", function EditTaskFilterCloudComponent_Template_mat_expansion_panel_afterExpand_1_listener() { return ctx.onExpand(); })("closed", function EditTaskFilterCloudComponent_Template_mat_expansion_panel_closed_1_listener() { return ctx.onClose(); });
        ɵngcc0.ɵɵtemplate(2, EditTaskFilterCloudComponent_mat_expansion_panel_header_2_Template, 4, 2, "mat-expansion-panel-header", 2);
        ɵngcc0.ɵɵtemplate(3, EditTaskFilterCloudComponent_ng_container_3_Template, 2, 1, "ng-container", 3);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("hideToggle", ctx.isLoading);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.taskFilter);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.isLoading);
    } }, directives: [ɵngcc8.MatAccordion, ɵngcc8.MatExpansionPanel, ɵngcc9.NgIf, ɵngcc8.MatExpansionPanelHeader, ɵngcc8.MatExpansionPanelDescription, ɵngcc10.DefaultLayoutAlignDirective, ɵngcc8.MatExpansionPanelTitle, ɵngcc9.NgForOf, ɵngcc11.MatButton, ɵngcc12.MatTooltip, ɵngcc3.IconComponent, ɵngcc13.MatSpinner, ɵngcc1.ɵangular_packages_forms_forms_y, ɵngcc1.NgControlStatusGroup, ɵngcc1.FormGroupDirective, ɵngcc10.DefaultLayoutDirective, ɵngcc10.DefaultLayoutGapDirective, ɵngcc14.MatFormField, ɵngcc10.DefaultFlexDirective, ɵngcc15.MatSelect, ɵngcc1.NgControlStatus, ɵngcc1.FormControlName, ɵngcc5.MatOption, ɵngcc16.MatInput, ɵngcc1.DefaultValueAccessor, ɵngcc14.MatLabel, ɵngcc17.MatDatepickerInput, ɵngcc17.MatDatepickerToggle, ɵngcc14.MatSuffix, ɵngcc17.MatDatepicker, ɵngcc18.MatIcon, ɵngcc19.MatCheckbox, ɵngcc20.DateRangeFilterComponent, ɵngcc21.PeopleCloudComponent, ɵngcc22.TaskAssignmentFilterCloudComponent], pipes: [ɵngcc23.TranslatePipe], styles: [".adf-edit-task-filter-checkbox{flex:1 23%;font-size:16px;padding-top:10px;text-align:center}.adf-edit-task-filter-date-error-container{height:20px;margin-top:12px;position:absolute;width:100%}.adf-edit-task-filter-date-error-container>div{display:flex;flex-flow:row;justify-content:flex-start}.adf-edit-task-filter-date-error-container .adf-error-text{color:var(--theme-warn-color);font-size:10px;height:16px;line-height:1.33;padding-right:8px;width:auto}.adf-edit-task-filter-date-error-container .adf-error-icon{color:var(--theme-warn-color);font-size:16px}.adf-edit-task-filter-dateRange mat-grid-list{width:450px}.adf-cloud-edit-task-filter-loading-margin{margin-left:calc(50% - 50px);margin-right:calc(50% - 50px)}"], encapsulation: 2 });
EditTaskFilterCloudComponent.ctorParameters = () => [
    { type: FormBuilder },
    { type: MatDialog },
    { type: TranslationService },
    { type: TaskFilterCloudService },
    { type: DateAdapter },
    { type: UserPreferencesService },
    { type: AppsProcessCloudService },
    { type: TaskCloudService }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(EditTaskFilterCloudComponent, [{
        type: Component,
        args: [{
                selector: 'adf-cloud-edit-task-filter',
                template: "<mat-accordion [hideToggle]=\"isLoading\">\n    <mat-expansion-panel (afterExpand)=\"onExpand()\" (closed)=\"onClose()\">\n        <mat-expansion-panel-header *ngIf=\"taskFilter\" id=\"adf-edit-task-filter-expansion-header\">\n            <ng-container *ngIf=\"!isLoading; else loadingTemplate\">\n                <mat-panel-title *ngIf=\"showTaskFilterName\" fxLayoutAlign=\"space-between center\" id=\"adf-edit-task-filter-title-id\"\n                    >{{taskFilter.name | translate}}</mat-panel-title>\n                <mat-panel-description fxLayoutAlign=\"space-between center\" id=\"adf-edit-task-filter-sub-title-id\">\n                    <span *ngIf=\"showTitle\">{{ 'ADF_CLOUD_EDIT_TASK_FILTER.TITLE' | translate}}</span>\n                    <div *ngIf=\"showFilterActions\" class=\"adf-cloud-edit-task-filter-actions\">\n                        <ng-container *ngIf=\"toggleFilterActions\">\n                            <button *ngFor=\"let filterAction of taskFilterActions\"\n                                    mat-icon-button\n                                    matTooltip=\"{{ filterAction.tooltip | translate}}\"\n                                    [attr.data-automation-id]=\"'adf-filter-action-' + filterAction.actionType\"\n                                    [disabled]=\"isDisabledAction(filterAction)\"\n                                    (click)=\"executeFilterActions(filterAction)\">\n                                <adf-icon [value]=\"filterAction.icon\"></adf-icon>\n                            </button>\n                        </ng-container>\n                    </div>\n                </mat-panel-description>\n            </ng-container>\n            <ng-template #loadingTemplate>\n                <div class=\"adf-cloud-edit-task-filter-loading-margin\">\n                    <mat-spinner [diameter]=\"30\"></mat-spinner>\n                </div>\n            </ng-template>\n        </mat-expansion-panel-header>\n        <ng-container *ngIf=\"!isLoading;\">\n            <form *ngIf=\"editTaskFilterForm\" [formGroup]=\"editTaskFilterForm\">\n                <div fxLayout=\"row wrap\" fxLayout.xs=\"column\" fxLayoutGap=\"10px\" fxLayoutAlign=\"start center\">\n                    <ng-container *ngFor=\"let taskFilterProperty of taskFilterProperties\">\n                        <mat-form-field fxFlex=\"23%\"\n                                        [floatLabel]=\"'auto'\"\n                                        *ngIf=\"taskFilterProperty.type === 'select'\"\n                                        [attr.data-automation-id]=\"taskFilterProperty.key\">\n                            <mat-select placeholder=\"{{taskFilterProperty.label | translate}}\"\n                                        [formControlName]=\"taskFilterProperty.key\"\n                                        [attr.data-automation-id]=\"'adf-cloud-edit-task-property-' + taskFilterProperty.key\">\n                                <mat-option *ngFor=\"let propertyOption of taskFilterProperty.options\"\n                                            [value]=\"propertyOption.value\"\n                                            [attr.data-automation-id]=\"'adf-cloud-edit-task-property-options-' + taskFilterProperty.key\">\n                                    {{ propertyOption.label | translate }}\n                                </mat-option>\n                            </mat-select>\n                        </mat-form-field>\n                        <mat-form-field fxFlex=\"23%\"\n                                        [floatLabel]=\"'auto'\"\n                                        *ngIf=\"taskFilterProperty.type === 'text'\"\n                                        [attr.data-automation-id]=\"taskFilterProperty.key\">\n                            <input matInput\n                                   [formControlName]=\"taskFilterProperty.key\"\n                                   type=\"text\"\n                                   placeholder=\"{{taskFilterProperty.label | translate}}\"\n                                   [attr.data-automation-id]=\"'adf-cloud-edit-task-property-' + taskFilterProperty.key\" />\n                        </mat-form-field>\n                        <mat-form-field fxFlex=\"23%\"\n                                        [floatLabel]=\"'auto'\"\n                                        *ngIf=\"taskFilterProperty.type === 'date'\"\n                                        [attr.data-automation-id]=\"taskFilterProperty.key\">\n                            <mat-label>{{taskFilterProperty.label | translate}}</mat-label>\n                            <input matInput\n                                   (keyup)=\"onDateChanged($any($event).srcElement.value, taskFilterProperty)\"\n                                   (dateChange)=\"onDateChanged($event.value, taskFilterProperty)\"\n                                   [matDatepicker]=\"dateController\"\n                                   placeholder=\"{{taskFilterProperty.label | translate}}\"\n                                   [attr.data-automation-id]=\"'adf-cloud-edit-task-property-' + taskFilterProperty.key\">\n                            <mat-datepicker-toggle matSuffix\n                                                   [for]=\"dateController\"\n                                                   [attr.data-automation-id]=\"'adf-cloud-edit-task-property-date-toggle-' + taskFilterProperty.key\">\n                            </mat-datepicker-toggle>\n                            <mat-datepicker #dateController\n                                            [attr.data-automation-id]=\"'adf-cloud-edit-task-property-date-picker-' + taskFilterProperty.key\">\n                            </mat-datepicker>\n                            <div class=\"adf-edit-task-filter-date-error-container\">\n                                <div *ngIf=\"hasError(taskFilterProperty)\">\n                                    <div class=\"adf-error-text\">{{'ADF_TASK_LIST.START_TASK.FORM.ERROR.DATE'|translate}}</div>\n                                    <mat-icon class=\"adf-error-icon\">warning</mat-icon>\n                                </div>\n                            </div>\n                        </mat-form-field>\n                        <div class=\"adf-edit-task-filter-checkbox\"\n                             *ngIf=\"taskFilterProperty.type === 'checkbox'\">\n                            <mat-checkbox color=\"primary\"\n                                          [formControlName]=\"taskFilterProperty.key\"\n                                          [attr.data-automation-id]=\"taskFilterProperty.key\"\n                            >{{taskFilterProperty.label | translate}}</mat-checkbox>\n                        </div>\n\n                        <adf-cloud-date-range-filter #dateRange\n                            *ngIf=\"taskFilterProperty.type === 'date-range'\"\n                            [processFilterProperty]=\"taskFilterProperty\"\n                            [options]=\"taskFilterProperty.dateFilterOptions\"\n                            (dateTypeChange)=\"onDateTypeChange($event, taskFilterProperty)\"\n                            (dateChanged)=\"onDateRangeFilterChanged($event, taskFilterProperty)\">\n                        </adf-cloud-date-range-filter>\n\n                        <div fxFlex=\"23%\" class=\"{{ 'adf-edit-task-filter-' + taskFilterProperty.key }}\" *ngIf=\"taskFilterProperty.type === 'people'\">\n                            <adf-cloud-people\n                                [preSelectUsers]=\"taskFilterProperty.value\"\n                                [title]=\"taskFilterProperty.label\"\n                                [validate]=\"true\"\n                                [appName]=\"appName\"\n                                [mode]=\"taskFilterProperty.selectionMode\"\n                                (changedUsers)=\"onChangedUser($event, taskFilterProperty)\">\n                            </adf-cloud-people>\n                        </div>\n\n                        <adf-cloud-task-assignment-filter fxFlex=\"23%\"\n                            *ngIf=\"taskFilterProperty.type === 'assignment'\"\n                            [taskFilterProperty]=\"taskFilterProperty\"\n                            (assignedChange)=\"onAssignedChange($event)\"\n                            (assignedGroupChange)=\"onAssignedGroupsChange($event)\">\n                        </adf-cloud-task-assignment-filter>\n                    </ng-container>\n                </div>\n            </form>\n        </ng-container>\n    </mat-expansion-panel>\n</mat-accordion>\n",
                encapsulation: ViewEncapsulation.None,
                styles: [".adf-edit-task-filter-checkbox{flex:1 23%;font-size:16px;padding-top:10px;text-align:center}.adf-edit-task-filter-date-error-container{height:20px;margin-top:12px;position:absolute;width:100%}.adf-edit-task-filter-date-error-container>div{display:flex;flex-flow:row;justify-content:flex-start}.adf-edit-task-filter-date-error-container .adf-error-text{color:var(--theme-warn-color);font-size:10px;height:16px;line-height:1.33;padding-right:8px;width:auto}.adf-edit-task-filter-date-error-container .adf-error-icon{color:var(--theme-warn-color);font-size:16px}.adf-edit-task-filter-dateRange mat-grid-list{width:450px}.adf-cloud-edit-task-filter-loading-margin{margin-left:calc(50% - 50px);margin-right:calc(50% - 50px)}"]
            }]
    }], function () { return [{ type: ɵngcc1.FormBuilder }, { type: ɵngcc2.MatDialog }, { type: ɵngcc3.TranslationService }, { type: ɵngcc4.TaskFilterCloudService }, { type: ɵngcc5.DateAdapter }, { type: ɵngcc3.UserPreferencesService }, { type: ɵngcc6.AppsProcessCloudService }, { type: ɵngcc7.TaskCloudService }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,