/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, ViewEncapsulation } from '@angular/core';
import { FormBuilder } from '@angular/forms';
import { DateAdapter } from '@angular/material/core';
import { MatDialog } from '@angular/material/dialog';
import { takeUntil } from 'rxjs/operators';
import { TranslationService, UserPreferencesService } from '@alfresco/adf-core';
import { AppsProcessCloudService } from '../../../../app/services/apps-process-cloud.service';
import { TaskCloudService } from '../../../services/task-cloud.service';
import { ServiceTaskFilterCloudService } from '../../services/service-task-filter-cloud.service';
import { BaseEditTaskFilterCloudComponent } from './base-edit-task-filter-cloud.component';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/forms';
import * as ɵngcc2 from '@angular/material/dialog';
import * as ɵngcc3 from '@alfresco/adf-core';
import * as ɵngcc4 from '../../services/service-task-filter-cloud.service';
import * as ɵngcc5 from '@angular/material/core';
import * as ɵngcc6 from '../../../../app/services/apps-process-cloud.service';
import * as ɵngcc7 from '../../../services/task-cloud.service';
import * as ɵngcc8 from '@angular/material/expansion';
import * as ɵngcc9 from '@angular/common';
import * as ɵngcc10 from '@angular/flex-layout/flex';
import * as ɵngcc11 from '@angular/material/button';
import * as ɵngcc12 from '@angular/material/tooltip';
import * as ɵngcc13 from '@angular/material/progress-spinner';
import * as ɵngcc14 from '@angular/material/form-field';
import * as ɵngcc15 from '@angular/material/select';
import * as ɵngcc16 from '@angular/material/input';
import * as ɵngcc17 from '@angular/material/datepicker';
import * as ɵngcc18 from '@angular/material/icon';
import * as ɵngcc19 from '@angular/material/checkbox';
import * as ɵngcc20 from '../../../../common/date-range-filter/date-range-filter.component';
import * as ɵngcc21 from '../../../../people/components/people-cloud.component';
import * as ɵngcc22 from '../task-assignment-filter/task-assignment-filter.component';
import * as ɵngcc23 from '@ngx-translate/core';

function EditServiceTaskFilterCloudComponent_mat_expansion_panel_header_2_ng_container_1_mat_panel_title_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-panel-title", 10);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r5 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(2, 1, ctx_r5.taskFilter.name));
} }
function EditServiceTaskFilterCloudComponent_mat_expansion_panel_header_2_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(2, 1, "ADF_CLOUD_EDIT_TASK_FILTER.TITLE"));
} }
function EditServiceTaskFilterCloudComponent_mat_expansion_panel_header_2_ng_container_1_div_4_ng_container_1_button_1_Template(rf, ctx) { if (rf & 1) {
    const _r12 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 13);
    ɵngcc0.ɵɵlistener("click", function EditServiceTaskFilterCloudComponent_mat_expansion_panel_header_2_ng_container_1_div_4_ng_container_1_button_1_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r12); const filterAction_r10 = ctx.$implicit; const ctx_r11 = ɵngcc0.ɵɵnextContext(5); return ctx_r11.executeFilterActions(filterAction_r10); });
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵelement(2, "adf-icon", 14);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const filterAction_r10 = ctx.$implicit;
    const ctx_r9 = ɵngcc0.ɵɵnextContext(5);
    ɵngcc0.ɵɵpropertyInterpolate("matTooltip", ɵngcc0.ɵɵpipeBind1(1, 4, filterAction_r10.tooltip));
    ɵngcc0.ɵɵproperty("disabled", ctx_r9.isDisabledAction(filterAction_r10));
    ɵngcc0.ɵɵattribute("data-automation-id", "adf-filter-action-" + filterAction_r10.actionType);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("value", filterAction_r10.icon);
} }
function EditServiceTaskFilterCloudComponent_mat_expansion_panel_header_2_ng_container_1_div_4_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, EditServiceTaskFilterCloudComponent_mat_expansion_panel_header_2_ng_container_1_div_4_ng_container_1_button_1_Template, 3, 6, "button", 12);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r8 = ɵngcc0.ɵɵnextContext(4);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r8.taskFilterActions);
} }
function EditServiceTaskFilterCloudComponent_mat_expansion_panel_header_2_ng_container_1_div_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 11);
    ɵngcc0.ɵɵtemplate(1, EditServiceTaskFilterCloudComponent_mat_expansion_panel_header_2_ng_container_1_div_4_ng_container_1_Template, 2, 1, "ng-container", 3);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r7 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r7.toggleFilterActions);
} }
function EditServiceTaskFilterCloudComponent_mat_expansion_panel_header_2_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, EditServiceTaskFilterCloudComponent_mat_expansion_panel_header_2_ng_container_1_mat_panel_title_1_Template, 3, 3, "mat-panel-title", 7);
    ɵngcc0.ɵɵelementStart(2, "mat-panel-description", 8);
    ɵngcc0.ɵɵtemplate(3, EditServiceTaskFilterCloudComponent_mat_expansion_panel_header_2_ng_container_1_span_3_Template, 3, 3, "span", 3);
    ɵngcc0.ɵɵtemplate(4, EditServiceTaskFilterCloudComponent_mat_expansion_panel_header_2_ng_container_1_div_4_Template, 2, 1, "div", 9);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r2.showTaskFilterName);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r2.showTitle);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r2.showFilterActions);
} }
function EditServiceTaskFilterCloudComponent_mat_expansion_panel_header_2_ng_template_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 15);
    ɵngcc0.ɵɵelement(1, "mat-spinner", 16);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("diameter", 30);
} }
function EditServiceTaskFilterCloudComponent_mat_expansion_panel_header_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-expansion-panel-header", 4);
    ɵngcc0.ɵɵtemplate(1, EditServiceTaskFilterCloudComponent_mat_expansion_panel_header_2_ng_container_1_Template, 5, 3, "ng-container", 5);
    ɵngcc0.ɵɵtemplate(2, EditServiceTaskFilterCloudComponent_mat_expansion_panel_header_2_ng_template_2_Template, 2, 1, "ng-template", null, 6, ɵngcc0.ɵɵtemplateRefExtractor);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const _r3 = ɵngcc0.ɵɵreference(3);
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r0.isLoading)("ngIfElse", _r3);
} }
function EditServiceTaskFilterCloudComponent_ng_container_3_form_1_ng_container_2_mat_form_field_1_mat_option_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-option", 14);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const propertyOption_r24 = ctx.$implicit;
    const taskFilterProperty_r15 = ɵngcc0.ɵɵnextContext(2).$implicit;
    ɵngcc0.ɵɵproperty("value", propertyOption_r24.value);
    ɵngcc0.ɵɵattribute("data-automation-id", "adf-cloud-edit-task-property-options-" + taskFilterProperty_r15.key);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 3, propertyOption_r24.label), " ");
} }
function EditServiceTaskFilterCloudComponent_ng_container_3_form_1_ng_container_2_mat_form_field_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-form-field", 26);
    ɵngcc0.ɵɵelementStart(1, "mat-select", 27);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵtemplate(3, EditServiceTaskFilterCloudComponent_ng_container_3_form_1_ng_container_2_mat_form_field_1_mat_option_3_Template, 3, 5, "mat-option", 28);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const taskFilterProperty_r15 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵproperty("floatLabel", "auto");
    ɵngcc0.ɵɵattribute("data-automation-id", taskFilterProperty_r15.key);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate("placeholder", ɵngcc0.ɵɵpipeBind1(2, 6, taskFilterProperty_r15.label));
    ɵngcc0.ɵɵproperty("formControlName", taskFilterProperty_r15.key);
    ɵngcc0.ɵɵattribute("data-automation-id", "adf-cloud-edit-task-property-" + taskFilterProperty_r15.key);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngForOf", taskFilterProperty_r15.options);
} }
function EditServiceTaskFilterCloudComponent_ng_container_3_form_1_ng_container_2_mat_form_field_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-form-field", 26);
    ɵngcc0.ɵɵelement(1, "input", 29);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const taskFilterProperty_r15 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵproperty("floatLabel", "auto");
    ɵngcc0.ɵɵattribute("data-automation-id", taskFilterProperty_r15.key);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate("placeholder", ɵngcc0.ɵɵpipeBind1(2, 5, taskFilterProperty_r15.label));
    ɵngcc0.ɵɵproperty("formControlName", taskFilterProperty_r15.key);
    ɵngcc0.ɵɵattribute("data-automation-id", "adf-cloud-edit-task-property-" + taskFilterProperty_r15.key);
} }
function EditServiceTaskFilterCloudComponent_ng_container_3_form_1_ng_container_2_mat_form_field_3_div_10_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div");
    ɵngcc0.ɵɵelementStart(1, "div", 34);
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(4, "mat-icon", 35);
    ɵngcc0.ɵɵtext(5, "warning");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(3, 1, "ADF_TASK_LIST.START_TASK.FORM.ERROR.DATE"));
} }
function EditServiceTaskFilterCloudComponent_ng_container_3_form_1_ng_container_2_mat_form_field_3_Template(rf, ctx) { if (rf & 1) {
    const _r31 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "mat-form-field", 26);
    ɵngcc0.ɵɵelementStart(1, "mat-label");
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(4, "input", 30);
    ɵngcc0.ɵɵlistener("keyup", function EditServiceTaskFilterCloudComponent_ng_container_3_form_1_ng_container_2_mat_form_field_3_Template_input_keyup_4_listener($event) { ɵngcc0.ɵɵrestoreView(_r31); const taskFilterProperty_r15 = ɵngcc0.ɵɵnextContext().$implicit; const ctx_r30 = ɵngcc0.ɵɵnextContext(3); return ctx_r30.onDateChanged($event.srcElement.value, taskFilterProperty_r15); })("dateChange", function EditServiceTaskFilterCloudComponent_ng_container_3_form_1_ng_container_2_mat_form_field_3_Template_input_dateChange_4_listener($event) { ɵngcc0.ɵɵrestoreView(_r31); const taskFilterProperty_r15 = ɵngcc0.ɵɵnextContext().$implicit; const ctx_r33 = ɵngcc0.ɵɵnextContext(3); return ctx_r33.onDateChanged($event.value, taskFilterProperty_r15); });
    ɵngcc0.ɵɵpipe(5, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(6, "mat-datepicker-toggle", 31);
    ɵngcc0.ɵɵelement(7, "mat-datepicker", null, 32);
    ɵngcc0.ɵɵelementStart(9, "div", 33);
    ɵngcc0.ɵɵtemplate(10, EditServiceTaskFilterCloudComponent_ng_container_3_form_1_ng_container_2_mat_form_field_3_div_10_Template, 6, 3, "div", 3);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const _r28 = ɵngcc0.ɵɵreference(8);
    const taskFilterProperty_r15 = ɵngcc0.ɵɵnextContext().$implicit;
    const ctx_r18 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵproperty("floatLabel", "auto");
    ɵngcc0.ɵɵattribute("data-automation-id", taskFilterProperty_r15.key);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(3, 10, taskFilterProperty_r15.label));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵpropertyInterpolate("placeholder", ɵngcc0.ɵɵpipeBind1(5, 12, taskFilterProperty_r15.label));
    ɵngcc0.ɵɵproperty("matDatepicker", _r28);
    ɵngcc0.ɵɵattribute("data-automation-id", "adf-cloud-edit-task-property-" + taskFilterProperty_r15.key);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("for", _r28);
    ɵngcc0.ɵɵattribute("data-automation-id", "adf-cloud-edit-task-property-date-toggle-" + taskFilterProperty_r15.key);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵattribute("data-automation-id", "adf-cloud-edit-task-property-date-picker-" + taskFilterProperty_r15.key);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r18.hasError(taskFilterProperty_r15));
} }
function EditServiceTaskFilterCloudComponent_ng_container_3_form_1_ng_container_2_div_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 36);
    ɵngcc0.ɵɵelementStart(1, "mat-checkbox", 37);
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const taskFilterProperty_r15 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("formControlName", taskFilterProperty_r15.key);
    ɵngcc0.ɵɵattribute("data-automation-id", taskFilterProperty_r15.key);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(3, 3, taskFilterProperty_r15.label));
} }
function EditServiceTaskFilterCloudComponent_ng_container_3_form_1_ng_container_2_adf_cloud_date_range_filter_5_Template(rf, ctx) { if (rf & 1) {
    const _r39 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "adf-cloud-date-range-filter", 38, 39);
    ɵngcc0.ɵɵlistener("dateTypeChange", function EditServiceTaskFilterCloudComponent_ng_container_3_form_1_ng_container_2_adf_cloud_date_range_filter_5_Template_adf_cloud_date_range_filter_dateTypeChange_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r39); const taskFilterProperty_r15 = ɵngcc0.ɵɵnextContext().$implicit; const ctx_r38 = ɵngcc0.ɵɵnextContext(3); return ctx_r38.onDateTypeChange($event, taskFilterProperty_r15); })("dateChanged", function EditServiceTaskFilterCloudComponent_ng_container_3_form_1_ng_container_2_adf_cloud_date_range_filter_5_Template_adf_cloud_date_range_filter_dateChanged_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r39); const taskFilterProperty_r15 = ɵngcc0.ɵɵnextContext().$implicit; const ctx_r41 = ɵngcc0.ɵɵnextContext(3); return ctx_r41.onDateRangeFilterChanged($event, taskFilterProperty_r15); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const taskFilterProperty_r15 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵproperty("processFilterProperty", taskFilterProperty_r15)("options", taskFilterProperty_r15.dateFilterOptions);
} }
function EditServiceTaskFilterCloudComponent_ng_container_3_form_1_ng_container_2_div_6_Template(rf, ctx) { if (rf & 1) {
    const _r45 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 40);
    ɵngcc0.ɵɵelementStart(1, "adf-cloud-people", 41);
    ɵngcc0.ɵɵlistener("changedUsers", function EditServiceTaskFilterCloudComponent_ng_container_3_form_1_ng_container_2_div_6_Template_adf_cloud_people_changedUsers_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r45); const taskFilterProperty_r15 = ɵngcc0.ɵɵnextContext().$implicit; const ctx_r44 = ɵngcc0.ɵɵnextContext(3); return ctx_r44.onChangedUser($event, taskFilterProperty_r15); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const taskFilterProperty_r15 = ɵngcc0.ɵɵnextContext().$implicit;
    const ctx_r21 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵclassMap("adf-edit-task-filter-" + taskFilterProperty_r15.key);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("preSelectUsers", taskFilterProperty_r15.value)("title", taskFilterProperty_r15.label)("validate", true)("appName", ctx_r21.appName)("mode", taskFilterProperty_r15.selectionMode);
} }
function EditServiceTaskFilterCloudComponent_ng_container_3_form_1_ng_container_2_adf_cloud_task_assignment_filter_7_Template(rf, ctx) { if (rf & 1) {
    const _r49 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "adf-cloud-task-assignment-filter", 42);
    ɵngcc0.ɵɵlistener("assignedChange", function EditServiceTaskFilterCloudComponent_ng_container_3_form_1_ng_container_2_adf_cloud_task_assignment_filter_7_Template_adf_cloud_task_assignment_filter_assignedChange_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r49); const ctx_r48 = ɵngcc0.ɵɵnextContext(4); return ctx_r48.onAssignedChange($event); })("assignedGroupChange", function EditServiceTaskFilterCloudComponent_ng_container_3_form_1_ng_container_2_adf_cloud_task_assignment_filter_7_Template_adf_cloud_task_assignment_filter_assignedGroupChange_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r49); const ctx_r50 = ɵngcc0.ɵɵnextContext(4); return ctx_r50.onAssignedGroupsChange($event); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const taskFilterProperty_r15 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵproperty("taskFilterProperty", taskFilterProperty_r15);
} }
function EditServiceTaskFilterCloudComponent_ng_container_3_form_1_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, EditServiceTaskFilterCloudComponent_ng_container_3_form_1_ng_container_2_mat_form_field_1_Template, 4, 8, "mat-form-field", 21);
    ɵngcc0.ɵɵtemplate(2, EditServiceTaskFilterCloudComponent_ng_container_3_form_1_ng_container_2_mat_form_field_2_Template, 3, 7, "mat-form-field", 21);
    ɵngcc0.ɵɵtemplate(3, EditServiceTaskFilterCloudComponent_ng_container_3_form_1_ng_container_2_mat_form_field_3_Template, 11, 14, "mat-form-field", 21);
    ɵngcc0.ɵɵtemplate(4, EditServiceTaskFilterCloudComponent_ng_container_3_form_1_ng_container_2_div_4_Template, 4, 5, "div", 22);
    ɵngcc0.ɵɵtemplate(5, EditServiceTaskFilterCloudComponent_ng_container_3_form_1_ng_container_2_adf_cloud_date_range_filter_5_Template, 2, 2, "adf-cloud-date-range-filter", 23);
    ɵngcc0.ɵɵtemplate(6, EditServiceTaskFilterCloudComponent_ng_container_3_form_1_ng_container_2_div_6_Template, 2, 8, "div", 24);
    ɵngcc0.ɵɵtemplate(7, EditServiceTaskFilterCloudComponent_ng_container_3_form_1_ng_container_2_adf_cloud_task_assignment_filter_7_Template, 1, 1, "adf-cloud-task-assignment-filter", 25);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const taskFilterProperty_r15 = ctx.$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", taskFilterProperty_r15.type === "select");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", taskFilterProperty_r15.type === "text");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", taskFilterProperty_r15.type === "date");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", taskFilterProperty_r15.type === "checkbox");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", taskFilterProperty_r15.type === "date-range");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", taskFilterProperty_r15.type === "people");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", taskFilterProperty_r15.type === "assignment");
} }
function EditServiceTaskFilterCloudComponent_ng_container_3_form_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "form", 18);
    ɵngcc0.ɵɵelementStart(1, "div", 19);
    ɵngcc0.ɵɵtemplate(2, EditServiceTaskFilterCloudComponent_ng_container_3_form_1_ng_container_2_Template, 8, 7, "ng-container", 20);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r13 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("formGroup", ctx_r13.editTaskFilterForm);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r13.taskFilterProperties);
} }
function EditServiceTaskFilterCloudComponent_ng_container_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, EditServiceTaskFilterCloudComponent_ng_container_3_form_1_Template, 3, 2, "form", 17);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r1.editTaskFilterForm);
} }
export class EditServiceTaskFilterCloudComponent extends BaseEditTaskFilterCloudComponent {
    constructor(formBuilder, dialog, translateService, serviceTaskFilterCloudService, dateAdapter, userPreferencesService, appsProcessCloudService, taskCloudService) {
        super(formBuilder, dateAdapter, userPreferencesService, appsProcessCloudService, taskCloudService, dialog, translateService);
        this.serviceTaskFilterCloudService = serviceTaskFilterCloudService;
    }
    assignNewFilter(model) {
        this.changedTaskFilter = Object.assign(Object.assign({}, this.taskFilter), model);
        this.formHasBeenChanged = !this.deepCompare(this.changedTaskFilter, this.taskFilter);
        this.filterChange.emit(this.changedTaskFilter);
    }
    getTaskFilterById(appName, id) {
        return this.serviceTaskFilterCloudService.getTaskFilterById(appName, id);
    }
    getDefaultFilterProperties() {
        return ['appName', 'activityName', 'status', 'sort', 'order'];
    }
    getDefaultSortProperties() {
        return ['id', 'activityName', 'startedDate', 'completedDate'];
    }
    updateFilter(filterToUpdate) {
        return this.serviceTaskFilterCloudService.updateFilter(filterToUpdate);
    }
    deleteFilter(filterToDelete) {
        return this.serviceTaskFilterCloudService.deleteFilter(filterToDelete);
    }
    addFilter(filterToAdd) {
        return this.serviceTaskFilterCloudService
            .addFilter(filterToAdd)
            .pipe(takeUntil(this.onDestroy$));
    }
    isDisabledForDefaultFilters(action) {
        return (this.serviceTaskFilterCloudService.isDefaultFilter(this.taskFilter.name) &&
            EditServiceTaskFilterCloudComponent.ACTIONS_DISABLED_BY_DEFAULT.includes(action.actionType));
    }
    restoreDefaultTaskFilters() {
        return this.serviceTaskFilterCloudService.getTaskListFilters(this.appName);
    }
    getStatusOptions() {
        return [
            { value: '', label: 'ADF_CLOUD_SERVICE_TASK_FILTERS.STATUS.ALL' },
            { value: 'STARTED', label: 'ADF_CLOUD_SERVICE_TASK_FILTERS.STATUS.STARTED' },
            { value: 'COMPLETED', label: 'ADF_CLOUD_SERVICE_TASK_FILTERS.STATUS.COMPLETED' },
            { value: 'CANCELLED', label: 'ADF_CLOUD_SERVICE_TASK_FILTERS.STATUS.CANCELLED' },
            { value: 'ERROR', label: 'ADF_CLOUD_SERVICE_TASK_FILTERS.STATUS.ERROR' }
        ];
    }
    createTaskFilterProperties() {
        const statusOptions = this.getStatusOptions();
        return [
            {
                label: 'ADF_CLOUD_EDIT_SERVICE_TASK_FILTER.LABEL.APP_NAME',
                type: 'select',
                key: 'appName',
                value: this.taskFilter.appName || '',
                options: this.applicationNames
            },
            {
                label: 'ADF_CLOUD_EDIT_SERVICE_TASK_FILTER.LABEL.SERVICE_TASK_ID',
                type: 'text',
                key: 'serviceTaskId',
                value: this.taskFilter.serviceTaskId || ''
            },
            {
                label: 'ADF_CLOUD_EDIT_SERVICE_TASK_FILTER.LABEL.ELEMENT_ID',
                type: 'text',
                key: 'elementId',
                value: this.taskFilter.elementId || ''
            },
            {
                label: 'ADF_CLOUD_EDIT_SERVICE_TASK_FILTER.LABEL.ACTIVITY_NAME',
                type: 'text',
                key: 'activityName',
                value: this.taskFilter.activityName || ''
            },
            {
                label: 'ADF_CLOUD_EDIT_SERVICE_TASK_FILTER.LABEL.ACTIVITY_TYPE',
                type: 'text',
                key: 'activityType',
                value: this.taskFilter.activityType || ''
            },
            {
                label: 'ADF_CLOUD_EDIT_SERVICE_TASK_FILTER.LABEL.SORT',
                type: 'select',
                key: 'sort',
                value: this.taskFilter.sort || this.createSortProperties[0].value,
                options: this.createSortProperties
            },
            {
                label: 'ADF_CLOUD_EDIT_SERVICE_TASK_FILTER.LABEL.DIRECTION',
                type: 'select',
                key: 'order',
                value: this.taskFilter.order || this.sortDirections[0].value,
                options: [...this.sortDirections]
            },
            {
                label: 'ADF_CLOUD_EDIT_SERVICE_TASK_FILTER.LABEL.STATUS',
                type: 'select',
                key: 'status',
                value: this.taskFilter.status || statusOptions[0].value,
                options: statusOptions
            },
            {
                label: 'ADF_CLOUD_EDIT_SERVICE_TASK_FILTER.LABEL.STARTED_DATE',
                type: 'date',
                key: 'startedDate',
                value: this.taskFilter.completedDate || false
            },
            {
                label: 'ADF_CLOUD_EDIT_SERVICE_TASK_FILTER.LABEL.COMPLETED_DATE',
                type: 'date',
                key: 'completedDate',
                value: this.taskFilter.completedDate || false
            },
            {
                label: 'ADF_CLOUD_EDIT_SERVICE_TASK_FILTER.LABEL.PROCESS_INSTANCE_ID',
                type: 'text',
                key: 'processInstanceId',
                value: this.taskFilter.processInstanceId || ''
            },
            {
                label: 'ADF_CLOUD_EDIT_SERVICE_TASK_FILTER.LABEL.PROCESS_DEF_ID',
                type: 'text',
                key: 'processDefinitionId',
                value: this.taskFilter.processDefinitionId || ''
            },
            {
                label: 'ADF_CLOUD_EDIT_SERVICE_TASK_FILTER.LABEL.SERVICE_NAME',
                type: 'text',
                key: 'serviceName',
                value: this.taskFilter.serviceName || ''
            }
        ];
    }
}
EditServiceTaskFilterCloudComponent.ɵfac = function EditServiceTaskFilterCloudComponent_Factory(t) { return new (t || EditServiceTaskFilterCloudComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FormBuilder), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.MatDialog), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.TranslationService), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.ServiceTaskFilterCloudService), ɵngcc0.ɵɵdirectiveInject(ɵngcc5.DateAdapter), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.UserPreferencesService), ɵngcc0.ɵɵdirectiveInject(ɵngcc6.AppsProcessCloudService), ɵngcc0.ɵɵdirectiveInject(ɵngcc7.TaskCloudService)); };
EditServiceTaskFilterCloudComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: EditServiceTaskFilterCloudComponent, selectors: [["adf-cloud-edit-service-task-filter"]], features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 4, vars: 3, consts: [[3, "hideToggle"], [3, "afterExpand", "closed"], ["id", "adf-edit-task-filter-expansion-header", 4, "ngIf"], [4, "ngIf"], ["id", "adf-edit-task-filter-expansion-header"], [4, "ngIf", "ngIfElse"], ["loadingTemplate", ""], ["fxLayoutAlign", "space-between center", "id", "adf-edit-task-filter-title-id", 4, "ngIf"], ["fxLayoutAlign", "space-between center", "id", "adf-edit-task-filter-sub-title-id"], ["class", "adf-cloud-edit-task-filter-actions", 4, "ngIf"], ["fxLayoutAlign", "space-between center", "id", "adf-edit-task-filter-title-id"], [1, "adf-cloud-edit-task-filter-actions"], ["mat-icon-button", "", 3, "matTooltip", "disabled", "click", 4, "ngFor", "ngForOf"], ["mat-icon-button", "", 3, "matTooltip", "disabled", "click"], [3, "value"], [1, "adf-cloud-edit-task-filter-loading-margin"], [3, "diameter"], [3, "formGroup", 4, "ngIf"], [3, "formGroup"], ["fxLayout", "row wrap", "fxLayout.xs", "column", "fxLayoutGap", "10px", "fxLayoutAlign", "start center"], [4, "ngFor", "ngForOf"], ["fxFlex", "23%", 3, "floatLabel", 4, "ngIf"], ["class", "adf-edit-task-filter-checkbox", 4, "ngIf"], [3, "processFilterProperty", "options", "dateTypeChange", "dateChanged", 4, "ngIf"], ["fxFlex", "23%", 3, "class", 4, "ngIf"], ["fxFlex", "23%", 3, "taskFilterProperty", "assignedChange", "assignedGroupChange", 4, "ngIf"], ["fxFlex", "23%", 3, "floatLabel"], [3, "placeholder", "formControlName"], [3, "value", 4, "ngFor", "ngForOf"], ["matInput", "", "type", "text", 3, "formControlName", "placeholder"], ["matInput", "", 3, "matDatepicker", "placeholder", "keyup", "dateChange"], ["matSuffix", "", 3, "for"], ["dateController", ""], [1, "adf-edit-task-filter-date-error-container"], [1, "adf-error-text"], [1, "adf-error-icon"], [1, "adf-edit-task-filter-checkbox"], ["color", "primary", 3, "formControlName"], [3, "processFilterProperty", "options", "dateTypeChange", "dateChanged"], ["dateRange", ""], ["fxFlex", "23%"], [3, "preSelectUsers", "title", "validate", "appName", "mode", "changedUsers"], ["fxFlex", "23%", 3, "taskFilterProperty", "assignedChange", "assignedGroupChange"]], template: function EditServiceTaskFilterCloudComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "mat-accordion", 0);
        ɵngcc0.ɵɵelementStart(1, "mat-expansion-panel", 1);
        ɵngcc0.ɵɵlistener("afterExpand", function EditServiceTaskFilterCloudComponent_Template_mat_expansion_panel_afterExpand_1_listener() { return ctx.onExpand(); })("closed", function EditServiceTaskFilterCloudComponent_Template_mat_expansion_panel_closed_1_listener() { return ctx.onClose(); });
        ɵngcc0.ɵɵtemplate(2, EditServiceTaskFilterCloudComponent_mat_expansion_panel_header_2_Template, 4, 2, "mat-expansion-panel-header", 2);
        ɵngcc0.ɵɵtemplate(3, EditServiceTaskFilterCloudComponent_ng_container_3_Template, 2, 1, "ng-container", 3);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("hideToggle", ctx.isLoading);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.taskFilter);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.isLoading);
    } }, directives: [ɵngcc8.MatAccordion, ɵngcc8.MatExpansionPanel, ɵngcc9.NgIf, ɵngcc8.MatExpansionPanelHeader, ɵngcc8.MatExpansionPanelDescription, ɵngcc10.DefaultLayoutAlignDirective, ɵngcc8.MatExpansionPanelTitle, ɵngcc9.NgForOf, ɵngcc11.MatButton, ɵngcc12.MatTooltip, ɵngcc3.IconComponent, ɵngcc13.MatSpinner, ɵngcc1.ɵangular_packages_forms_forms_y, ɵngcc1.NgControlStatusGroup, ɵngcc1.FormGroupDirective, ɵngcc10.DefaultLayoutDirective, ɵngcc10.DefaultLayoutGapDirective, ɵngcc14.MatFormField, ɵngcc10.DefaultFlexDirective, ɵngcc15.MatSelect, ɵngcc1.NgControlStatus, ɵngcc1.FormControlName, ɵngcc5.MatOption, ɵngcc16.MatInput, ɵngcc1.DefaultValueAccessor, ɵngcc14.MatLabel, ɵngcc17.MatDatepickerInput, ɵngcc17.MatDatepickerToggle, ɵngcc14.MatSuffix, ɵngcc17.MatDatepicker, ɵngcc18.MatIcon, ɵngcc19.MatCheckbox, ɵngcc20.DateRangeFilterComponent, ɵngcc21.PeopleCloudComponent, ɵngcc22.TaskAssignmentFilterCloudComponent], pipes: [ɵngcc23.TranslatePipe], styles: [".adf-edit-task-filter-checkbox{flex:1 23%;font-size:16px;padding-top:10px;text-align:center}.adf-edit-task-filter-date-error-container{height:20px;margin-top:12px;position:absolute;width:100%}.adf-edit-task-filter-date-error-container>div{display:flex;flex-flow:row;justify-content:flex-start}.adf-edit-task-filter-date-error-container .adf-error-text{color:var(--theme-warn-color);font-size:10px;height:16px;line-height:1.33;padding-right:8px;width:auto}.adf-edit-task-filter-date-error-container .adf-error-icon{color:var(--theme-warn-color);font-size:16px}.adf-edit-task-filter-dateRange mat-grid-list{width:450px}.adf-cloud-edit-task-filter-loading-margin{margin-left:calc(50% - 50px);margin-right:calc(50% - 50px)}"], encapsulation: 2 });
EditServiceTaskFilterCloudComponent.ctorParameters = () => [
    { type: FormBuilder },
    { type: MatDialog },
    { type: TranslationService },
    { type: ServiceTaskFilterCloudService },
    { type: DateAdapter },
    { type: UserPreferencesService },
    { type: AppsProcessCloudService },
    { type: TaskCloudService }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(EditServiceTaskFilterCloudComponent, [{
        type: Component,
        args: [{
                selector: 'adf-cloud-edit-service-task-filter',
                template: "<mat-accordion [hideToggle]=\"isLoading\">\n    <mat-expansion-panel (afterExpand)=\"onExpand()\" (closed)=\"onClose()\">\n        <mat-expansion-panel-header *ngIf=\"taskFilter\" id=\"adf-edit-task-filter-expansion-header\">\n            <ng-container *ngIf=\"!isLoading; else loadingTemplate\">\n                <mat-panel-title *ngIf=\"showTaskFilterName\" fxLayoutAlign=\"space-between center\" id=\"adf-edit-task-filter-title-id\"\n                    >{{taskFilter.name | translate}}</mat-panel-title>\n                <mat-panel-description fxLayoutAlign=\"space-between center\" id=\"adf-edit-task-filter-sub-title-id\">\n                    <span *ngIf=\"showTitle\">{{ 'ADF_CLOUD_EDIT_TASK_FILTER.TITLE' | translate}}</span>\n                    <div *ngIf=\"showFilterActions\" class=\"adf-cloud-edit-task-filter-actions\">\n                        <ng-container *ngIf=\"toggleFilterActions\">\n                            <button *ngFor=\"let filterAction of taskFilterActions\"\n                                    mat-icon-button\n                                    matTooltip=\"{{ filterAction.tooltip | translate}}\"\n                                    [attr.data-automation-id]=\"'adf-filter-action-' + filterAction.actionType\"\n                                    [disabled]=\"isDisabledAction(filterAction)\"\n                                    (click)=\"executeFilterActions(filterAction)\">\n                                <adf-icon [value]=\"filterAction.icon\"></adf-icon>\n                            </button>\n                        </ng-container>\n                    </div>\n                </mat-panel-description>\n            </ng-container>\n            <ng-template #loadingTemplate>\n                <div class=\"adf-cloud-edit-task-filter-loading-margin\">\n                    <mat-spinner [diameter]=\"30\"></mat-spinner>\n                </div>\n            </ng-template>\n        </mat-expansion-panel-header>\n        <ng-container *ngIf=\"!isLoading;\">\n            <form *ngIf=\"editTaskFilterForm\" [formGroup]=\"editTaskFilterForm\">\n                <div fxLayout=\"row wrap\" fxLayout.xs=\"column\" fxLayoutGap=\"10px\" fxLayoutAlign=\"start center\">\n                    <ng-container *ngFor=\"let taskFilterProperty of taskFilterProperties\">\n                        <mat-form-field fxFlex=\"23%\"\n                                        [floatLabel]=\"'auto'\"\n                                        *ngIf=\"taskFilterProperty.type === 'select'\"\n                                        [attr.data-automation-id]=\"taskFilterProperty.key\">\n                            <mat-select placeholder=\"{{taskFilterProperty.label | translate}}\"\n                                        [formControlName]=\"taskFilterProperty.key\"\n                                        [attr.data-automation-id]=\"'adf-cloud-edit-task-property-' + taskFilterProperty.key\">\n                                <mat-option *ngFor=\"let propertyOption of taskFilterProperty.options\"\n                                            [value]=\"propertyOption.value\"\n                                            [attr.data-automation-id]=\"'adf-cloud-edit-task-property-options-' + taskFilterProperty.key\">\n                                    {{ propertyOption.label | translate }}\n                                </mat-option>\n                            </mat-select>\n                        </mat-form-field>\n                        <mat-form-field fxFlex=\"23%\"\n                                        [floatLabel]=\"'auto'\"\n                                        *ngIf=\"taskFilterProperty.type === 'text'\"\n                                        [attr.data-automation-id]=\"taskFilterProperty.key\">\n                            <input matInput\n                                   [formControlName]=\"taskFilterProperty.key\"\n                                   type=\"text\"\n                                   placeholder=\"{{taskFilterProperty.label | translate}}\"\n                                   [attr.data-automation-id]=\"'adf-cloud-edit-task-property-' + taskFilterProperty.key\" />\n                        </mat-form-field>\n                        <mat-form-field fxFlex=\"23%\"\n                                        [floatLabel]=\"'auto'\"\n                                        *ngIf=\"taskFilterProperty.type === 'date'\"\n                                        [attr.data-automation-id]=\"taskFilterProperty.key\">\n                            <mat-label>{{taskFilterProperty.label | translate}}</mat-label>\n                            <input matInput\n                                   (keyup)=\"onDateChanged($any($event).srcElement.value, taskFilterProperty)\"\n                                   (dateChange)=\"onDateChanged($event.value, taskFilterProperty)\"\n                                   [matDatepicker]=\"dateController\"\n                                   placeholder=\"{{taskFilterProperty.label | translate}}\"\n                                   [attr.data-automation-id]=\"'adf-cloud-edit-task-property-' + taskFilterProperty.key\">\n                            <mat-datepicker-toggle matSuffix\n                                                   [for]=\"dateController\"\n                                                   [attr.data-automation-id]=\"'adf-cloud-edit-task-property-date-toggle-' + taskFilterProperty.key\">\n                            </mat-datepicker-toggle>\n                            <mat-datepicker #dateController\n                                            [attr.data-automation-id]=\"'adf-cloud-edit-task-property-date-picker-' + taskFilterProperty.key\">\n                            </mat-datepicker>\n                            <div class=\"adf-edit-task-filter-date-error-container\">\n                                <div *ngIf=\"hasError(taskFilterProperty)\">\n                                    <div class=\"adf-error-text\">{{'ADF_TASK_LIST.START_TASK.FORM.ERROR.DATE'|translate}}</div>\n                                    <mat-icon class=\"adf-error-icon\">warning</mat-icon>\n                                </div>\n                            </div>\n                        </mat-form-field>\n                        <div class=\"adf-edit-task-filter-checkbox\"\n                             *ngIf=\"taskFilterProperty.type === 'checkbox'\">\n                            <mat-checkbox color=\"primary\"\n                                          [formControlName]=\"taskFilterProperty.key\"\n                                          [attr.data-automation-id]=\"taskFilterProperty.key\"\n                            >{{taskFilterProperty.label | translate}}</mat-checkbox>\n                        </div>\n\n                        <adf-cloud-date-range-filter #dateRange\n                            *ngIf=\"taskFilterProperty.type === 'date-range'\"\n                            [processFilterProperty]=\"taskFilterProperty\"\n                            [options]=\"taskFilterProperty.dateFilterOptions\"\n                            (dateTypeChange)=\"onDateTypeChange($event, taskFilterProperty)\"\n                            (dateChanged)=\"onDateRangeFilterChanged($event, taskFilterProperty)\">\n                        </adf-cloud-date-range-filter>\n\n                        <div fxFlex=\"23%\" class=\"{{ 'adf-edit-task-filter-' + taskFilterProperty.key }}\" *ngIf=\"taskFilterProperty.type === 'people'\">\n                            <adf-cloud-people\n                                [preSelectUsers]=\"taskFilterProperty.value\"\n                                [title]=\"taskFilterProperty.label\"\n                                [validate]=\"true\"\n                                [appName]=\"appName\"\n                                [mode]=\"taskFilterProperty.selectionMode\"\n                                (changedUsers)=\"onChangedUser($event, taskFilterProperty)\">\n                            </adf-cloud-people>\n                        </div>\n\n                        <adf-cloud-task-assignment-filter fxFlex=\"23%\"\n                            *ngIf=\"taskFilterProperty.type === 'assignment'\"\n                            [taskFilterProperty]=\"taskFilterProperty\"\n                            (assignedChange)=\"onAssignedChange($event)\"\n                            (assignedGroupChange)=\"onAssignedGroupsChange($event)\">\n                        </adf-cloud-task-assignment-filter>\n                    </ng-container>\n                </div>\n            </form>\n        </ng-container>\n    </mat-expansion-panel>\n</mat-accordion>\n",
                encapsulation: ViewEncapsulation.None,
                styles: [".adf-edit-task-filter-checkbox{flex:1 23%;font-size:16px;padding-top:10px;text-align:center}.adf-edit-task-filter-date-error-container{height:20px;margin-top:12px;position:absolute;width:100%}.adf-edit-task-filter-date-error-container>div{display:flex;flex-flow:row;justify-content:flex-start}.adf-edit-task-filter-date-error-container .adf-error-text{color:var(--theme-warn-color);font-size:10px;height:16px;line-height:1.33;padding-right:8px;width:auto}.adf-edit-task-filter-date-error-container .adf-error-icon{color:var(--theme-warn-color);font-size:16px}.adf-edit-task-filter-dateRange mat-grid-list{width:450px}.adf-cloud-edit-task-filter-loading-margin{margin-left:calc(50% - 50px);margin-right:calc(50% - 50px)}"]
            }]
    }], function () { return [{ type: ɵngcc1.FormBuilder }, { type: ɵngcc2.MatDialog }, { type: ɵngcc3.TranslationService }, { type: ɵngcc4.ServiceTaskFilterCloudService }, { type: ɵngcc5.DateAdapter }, { type: ɵngcc3.UserPreferencesService }, { type: ɵngcc6.AppsProcessCloudService }, { type: ɵngcc7.TaskCloudService }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWRpdC1zZXJ2aWNlLXRhc2stZmlsdGVyLWNsb3VkLmNvbXBvbmVudC5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vaG9tZS90cmF2aXMvYnVpbGQvQWxmcmVzY28vYWxmcmVzY28tbmcyLWNvbXBvbmVudHMvbGliL3Byb2Nlc3Mtc2VydmljZXMtY2xvdWQvc3JjL2xpYi90YXNrL3Rhc2stZmlsdGVycy9jb21wb25lbnRzL2VkaXQtdGFzay1maWx0ZXJzL2VkaXQtc2VydmljZS10YXNrLWZpbHRlci1jbG91ZC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUVILE9BQU8sRUFBRSxTQUFTLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDN0QsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzdDLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUNyRCxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDckQsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBSzNDLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxzQkFBc0IsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ2hGLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLHFEQUFxRCxDQUFDO0FBQzlGLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHNDQUFzQyxDQUFDO0FBQ3hFLE9BQU8sRUFBRSw2QkFBNkIsRUFBRSxNQUFNLGtEQUFrRCxDQUFDO0FBQ2pHLE9BQU8sRUFBRSxnQ0FBZ0MsRUFBa0IsTUFBTSx5Q0FBeUMsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7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Z0IsS0FBSyxFQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsbUJBQW1CLElBQUksRUFBRTtBQUNoRSxhQUFhO0FBQ2IsWUFBWTtBQUNaLGdCQUFnQixLQUFLLEVBQUUsdURBQXVEO0FBQzlFLGdCQUFnQixJQUFJLEVBQUUsTUFBTTtBQUM1QixnQkFBZ0IsR0FBRyxFQUFFLGFBQWE7QUFDbEMsZ0JBQWdCLEtBQUssRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLFdBQVcsSUFBSSxFQUFFO0FBQ3hELGFBQWE7QUFDYixTQUFTLENBQUM7QUFDVixJQUFJLENBQUM7QUFDTDsrREFoS0MsU0FBUyxTQUFDLGtCQUNQLFFBQVEsRUFBRSxvQ0FBb0Msa0JBQzlDOzs7Ozs7Ozs7Ozs7Ozs7Z3JEQUlDO0FBQUM7QUFBNkQsWUFwQjFELFdBQVc7QUFBSSxZQUVmLFNBQVM7QUFBSSxZQU1iLGtCQUFrQjtBQUFJLFlBR3RCLDZCQUE2QjtBQUFJLFlBVmpDLFdBQVc7QUFBSSxZQU9LLHNCQUFzQjtBQUFJLFlBQzlDLHVCQUF1QjtBQUFJLFlBQzNCLGdCQUFnQjtBQUFHOzs7OztpaUZBTW1DLGtCQUUzRCxhQUFhLEVBQUUsaUJBQWlCLENBQUMsSUFBSSwydkJBQ3hDOzs7O2lWQVQ2QjtBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgQ29tcG9uZW50LCBWaWV3RW5jYXBzdWxhdGlvbiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRm9ybUJ1aWxkZXIgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBEYXRlQWRhcHRlciB9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsL2NvcmUnO1xuaW1wb3J0IHsgTWF0RGlhbG9nIH0gZnJvbSAnQGFuZ3VsYXIvbWF0ZXJpYWwvZGlhbG9nJztcbmltcG9ydCB7IHRha2VVbnRpbCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IE1vbWVudCB9IGZyb20gJ21vbWVudCc7XG5cbmltcG9ydCB7IFRhc2tGaWx0ZXJQcm9wZXJ0aWVzLCBUYXNrRmlsdGVyQWN0aW9uLCBTZXJ2aWNlVGFza0ZpbHRlckNsb3VkTW9kZWwgfSBmcm9tICcuLi8uLi9tb2RlbHMvZmlsdGVyLWNsb3VkLm1vZGVsJztcbmltcG9ydCB7IFRyYW5zbGF0aW9uU2VydmljZSwgVXNlclByZWZlcmVuY2VzU2VydmljZSB9IGZyb20gJ0BhbGZyZXNjby9hZGYtY29yZSc7XG5pbXBvcnQgeyBBcHBzUHJvY2Vzc0Nsb3VkU2VydmljZSB9IGZyb20gJy4uLy4uLy4uLy4uL2FwcC9zZXJ2aWNlcy9hcHBzLXByb2Nlc3MtY2xvdWQuc2VydmljZSc7XG5pbXBvcnQgeyBUYXNrQ2xvdWRTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vLi4vc2VydmljZXMvdGFzay1jbG91ZC5zZXJ2aWNlJztcbmltcG9ydCB7IFNlcnZpY2VUYXNrRmlsdGVyQ2xvdWRTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vc2VydmljZXMvc2VydmljZS10YXNrLWZpbHRlci1jbG91ZC5zZXJ2aWNlJztcbmltcG9ydCB7IEJhc2VFZGl0VGFza0ZpbHRlckNsb3VkQ29tcG9uZW50LCBEcm9wZG93bk9wdGlvbiB9IGZyb20gJy4vYmFzZS1lZGl0LXRhc2stZmlsdGVyLWNsb3VkLmNvbXBvbmVudCc7XG5cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAnYWRmLWNsb3VkLWVkaXQtc2VydmljZS10YXNrLWZpbHRlcicsXG4gICAgdGVtcGxhdGVVcmw6ICcuL2Jhc2UtZWRpdC10YXNrLWZpbHRlci1jbG91ZC5jb21wb25lbnQuaHRtbCcsXG4gICAgc3R5bGVVcmxzOiBbJy4vYmFzZS1lZGl0LXRhc2stZmlsdGVyLWNsb3VkLmNvbXBvbmVudC5zY3NzJ10sXG4gICAgZW5jYXBzdWxhdGlvbjogVmlld0VuY2Fwc3VsYXRpb24uTm9uZVxufSlcbmV4cG9ydCBjbGFzcyBFZGl0U2VydmljZVRhc2tGaWx0ZXJDbG91ZENvbXBvbmVudCBleHRlbmRzIEJhc2VFZGl0VGFza0ZpbHRlckNsb3VkQ29tcG9uZW50PFNlcnZpY2VUYXNrRmlsdGVyQ2xvdWRNb2RlbD4ge1xuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBmb3JtQnVpbGRlcjogRm9ybUJ1aWxkZXIsXG4gICAgICAgIGRpYWxvZzogTWF0RGlhbG9nLFxuICAgICAgICB0cmFuc2xhdGVTZXJ2aWNlOiBUcmFuc2xhdGlvblNlcnZpY2UsXG4gICAgICAgIHByaXZhdGUgc2VydmljZVRhc2tGaWx0ZXJDbG91ZFNlcnZpY2U6IFNlcnZpY2VUYXNrRmlsdGVyQ2xvdWRTZXJ2aWNlLFxuICAgICAgICBkYXRlQWRhcHRlcjogRGF0ZUFkYXB0ZXI8TW9tZW50PixcbiAgICAgICAgdXNlclByZWZlcmVuY2VzU2VydmljZTogVXNlclByZWZlcmVuY2VzU2VydmljZSxcbiAgICAgICAgYXBwc1Byb2Nlc3NDbG91ZFNlcnZpY2U6IEFwcHNQcm9jZXNzQ2xvdWRTZXJ2aWNlLFxuICAgICAgICB0YXNrQ2xvdWRTZXJ2aWNlOiBUYXNrQ2xvdWRTZXJ2aWNlKSB7XG4gICAgICAgIHN1cGVyKGZvcm1CdWlsZGVyLCBkYXRlQWRhcHRlciwgdXNlclByZWZlcmVuY2VzU2VydmljZSwgYXBwc1Byb2Nlc3NDbG91ZFNlcnZpY2UsIHRhc2tDbG91ZFNlcnZpY2UsIGRpYWxvZywgdHJhbnNsYXRlU2VydmljZSk7XG4gICAgfVxuXG4gICAgYXNzaWduTmV3RmlsdGVyKG1vZGVsOiBTZXJ2aWNlVGFza0ZpbHRlckNsb3VkTW9kZWwpIHtcbiAgICAgICAgdGhpcy5jaGFuZ2VkVGFza0ZpbHRlciA9IHsgLi4udGhpcy50YXNrRmlsdGVyLCAuLi5tb2RlbCB9O1xuICAgICAgICB0aGlzLmZvcm1IYXNCZWVuQ2hhbmdlZCA9ICF0aGlzLmRlZXBDb21wYXJlKHRoaXMuY2hhbmdlZFRhc2tGaWx0ZXIsIHRoaXMudGFza0ZpbHRlcik7XG4gICAgICAgIHRoaXMuZmlsdGVyQ2hhbmdlLmVtaXQodGhpcy5jaGFuZ2VkVGFza0ZpbHRlcik7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGdldFRhc2tGaWx0ZXJCeUlkKGFwcE5hbWU6IHN0cmluZywgaWQ6IHN0cmluZykge1xuICAgICAgICByZXR1cm4gdGhpcy5zZXJ2aWNlVGFza0ZpbHRlckNsb3VkU2VydmljZS5nZXRUYXNrRmlsdGVyQnlJZChhcHBOYW1lLCBpZCk7XG4gICAgfVxuXG4gICAgZ2V0RGVmYXVsdEZpbHRlclByb3BlcnRpZXMoKTogc3RyaW5nW10ge1xuICAgICAgICByZXR1cm4gWydhcHBOYW1lJywgJ2FjdGl2aXR5TmFtZScsICdzdGF0dXMnLCAnc29ydCcsICdvcmRlciddO1xuICAgIH1cblxuICAgIGdldERlZmF1bHRTb3J0UHJvcGVydGllcygpOiBzdHJpbmdbXSB7XG4gICAgICAgIHJldHVybiBbJ2lkJywgJ2FjdGl2aXR5TmFtZScsICdzdGFydGVkRGF0ZScsICdjb21wbGV0ZWREYXRlJ107XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIHVwZGF0ZUZpbHRlcihmaWx0ZXJUb1VwZGF0ZTogU2VydmljZVRhc2tGaWx0ZXJDbG91ZE1vZGVsKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNlcnZpY2VUYXNrRmlsdGVyQ2xvdWRTZXJ2aWNlLnVwZGF0ZUZpbHRlcihmaWx0ZXJUb1VwZGF0ZSk7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGRlbGV0ZUZpbHRlcihmaWx0ZXJUb0RlbGV0ZTogU2VydmljZVRhc2tGaWx0ZXJDbG91ZE1vZGVsKTogT2JzZXJ2YWJsZTxTZXJ2aWNlVGFza0ZpbHRlckNsb3VkTW9kZWxbXT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5zZXJ2aWNlVGFza0ZpbHRlckNsb3VkU2VydmljZS5kZWxldGVGaWx0ZXIoZmlsdGVyVG9EZWxldGUpO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBhZGRGaWx0ZXIoZmlsdGVyVG9BZGQ6IFNlcnZpY2VUYXNrRmlsdGVyQ2xvdWRNb2RlbCk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgICAgIHJldHVybiB0aGlzLnNlcnZpY2VUYXNrRmlsdGVyQ2xvdWRTZXJ2aWNlXG4gICAgICAgICAgICAuYWRkRmlsdGVyKGZpbHRlclRvQWRkKVxuICAgICAgICAgICAgLnBpcGUodGFrZVVudGlsKHRoaXMub25EZXN0cm95JCkpO1xuICAgIH1cblxuICAgIGlzRGlzYWJsZWRGb3JEZWZhdWx0RmlsdGVycyhhY3Rpb246IFRhc2tGaWx0ZXJBY3Rpb24pOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIHRoaXMuc2VydmljZVRhc2tGaWx0ZXJDbG91ZFNlcnZpY2UuaXNEZWZhdWx0RmlsdGVyKHRoaXMudGFza0ZpbHRlci5uYW1lKSAmJlxuICAgICAgICAgICAgRWRpdFNlcnZpY2VUYXNrRmlsdGVyQ2xvdWRDb21wb25lbnQuQUNUSU9OU19ESVNBQkxFRF9CWV9ERUZBVUxULmluY2x1ZGVzKGFjdGlvbi5hY3Rpb25UeXBlKVxuICAgICAgICApO1xuICAgIH1cblxuICAgIHJlc3RvcmVEZWZhdWx0VGFza0ZpbHRlcnMoKTogT2JzZXJ2YWJsZTxTZXJ2aWNlVGFza0ZpbHRlckNsb3VkTW9kZWxbXT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5zZXJ2aWNlVGFza0ZpbHRlckNsb3VkU2VydmljZS5nZXRUYXNrTGlzdEZpbHRlcnModGhpcy5hcHBOYW1lKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGdldFN0YXR1c09wdGlvbnMoKTogRHJvcGRvd25PcHRpb25bXSB7XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICB7IHZhbHVlOiAnJywgbGFiZWw6ICdBREZfQ0xPVURfU0VSVklDRV9UQVNLX0ZJTFRFUlMuU1RBVFVTLkFMTCcgfSxcbiAgICAgICAgICAgIHsgdmFsdWU6ICdTVEFSVEVEJywgbGFiZWw6ICdBREZfQ0xPVURfU0VSVklDRV9UQVNLX0ZJTFRFUlMuU1RBVFVTLlNUQVJURUQnIH0sXG4gICAgICAgICAgICB7IHZhbHVlOiAnQ09NUExFVEVEJywgbGFiZWw6ICdBREZfQ0xPVURfU0VSVklDRV9UQVNLX0ZJTFRFUlMuU1RBVFVTLkNPTVBMRVRFRCcgfSxcbiAgICAgICAgICAgIHsgdmFsdWU6ICdDQU5DRUxMRUQnLCBsYWJlbDogJ0FERl9DTE9VRF9TRVJWSUNFX1RBU0tfRklMVEVSUy5TVEFUVVMuQ0FOQ0VMTEVEJyB9LFxuICAgICAgICAgICAgeyB2YWx1ZTogJ0VSUk9SJywgbGFiZWw6ICdBREZfQ0xPVURfU0VSVklDRV9UQVNLX0ZJTFRFUlMuU1RBVFVTLkVSUk9SJyB9XG4gICAgICAgIF07XG4gICAgfVxuXG4gICAgY3JlYXRlVGFza0ZpbHRlclByb3BlcnRpZXMoKTogVGFza0ZpbHRlclByb3BlcnRpZXNbXSB7XG4gICAgICAgIGNvbnN0IHN0YXR1c09wdGlvbnMgPSB0aGlzLmdldFN0YXR1c09wdGlvbnMoKTtcblxuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGxhYmVsOiAnQURGX0NMT1VEX0VESVRfU0VSVklDRV9UQVNLX0ZJTFRFUi5MQUJFTC5BUFBfTkFNRScsXG4gICAgICAgICAgICAgICAgdHlwZTogJ3NlbGVjdCcsXG4gICAgICAgICAgICAgICAga2V5OiAnYXBwTmFtZScsXG4gICAgICAgICAgICAgICAgdmFsdWU6IHRoaXMudGFza0ZpbHRlci5hcHBOYW1lIHx8ICcnLFxuICAgICAgICAgICAgICAgIG9wdGlvbnM6IHRoaXMuYXBwbGljYXRpb25OYW1lc1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBsYWJlbDogJ0FERl9DTE9VRF9FRElUX1NFUlZJQ0VfVEFTS19GSUxURVIuTEFCRUwuU0VSVklDRV9UQVNLX0lEJyxcbiAgICAgICAgICAgICAgICB0eXBlOiAndGV4dCcsXG4gICAgICAgICAgICAgICAga2V5OiAnc2VydmljZVRhc2tJZCcsXG4gICAgICAgICAgICAgICAgdmFsdWU6IHRoaXMudGFza0ZpbHRlci5zZXJ2aWNlVGFza0lkIHx8ICcnXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGxhYmVsOiAnQURGX0NMT1VEX0VESVRfU0VSVklDRV9UQVNLX0ZJTFRFUi5MQUJFTC5FTEVNRU5UX0lEJyxcbiAgICAgICAgICAgICAgICB0eXBlOiAndGV4dCcsXG4gICAgICAgICAgICAgICAga2V5OiAnZWxlbWVudElkJyxcbiAgICAgICAgICAgICAgICB2YWx1ZTogdGhpcy50YXNrRmlsdGVyLmVsZW1lbnRJZCB8fCAnJ1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBsYWJlbDogJ0FERl9DTE9VRF9FRElUX1NFUlZJQ0VfVEFTS19GSUxURVIuTEFCRUwuQUNUSVZJVFlfTkFNRScsXG4gICAgICAgICAgICAgICAgdHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgICAgIGtleTogJ2FjdGl2aXR5TmFtZScsXG4gICAgICAgICAgICAgICAgdmFsdWU6IHRoaXMudGFza0ZpbHRlci5hY3Rpdml0eU5hbWUgfHwgJydcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbGFiZWw6ICdBREZfQ0xPVURfRURJVF9TRVJWSUNFX1RBU0tfRklMVEVSLkxBQkVMLkFDVElWSVRZX1RZUEUnLFxuICAgICAgICAgICAgICAgIHR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgICAgICBrZXk6ICdhY3Rpdml0eVR5cGUnLFxuICAgICAgICAgICAgICAgIHZhbHVlOiB0aGlzLnRhc2tGaWx0ZXIuYWN0aXZpdHlUeXBlIHx8ICcnXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGxhYmVsOiAnQURGX0NMT1VEX0VESVRfU0VSVklDRV9UQVNLX0ZJTFRFUi5MQUJFTC5TT1JUJyxcbiAgICAgICAgICAgICAgICB0eXBlOiAnc2VsZWN0JyxcbiAgICAgICAgICAgICAgICBrZXk6ICdzb3J0JyxcbiAgICAgICAgICAgICAgICB2YWx1ZTogdGhpcy50YXNrRmlsdGVyLnNvcnQgfHwgdGhpcy5jcmVhdGVTb3J0UHJvcGVydGllc1swXS52YWx1ZSxcbiAgICAgICAgICAgICAgICBvcHRpb25zOiB0aGlzLmNyZWF0ZVNvcnRQcm9wZXJ0aWVzXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGxhYmVsOiAnQURGX0NMT1VEX0VESVRfU0VSVklDRV9UQVNLX0ZJTFRFUi5MQUJFTC5ESVJFQ1RJT04nLFxuICAgICAgICAgICAgICAgIHR5cGU6ICdzZWxlY3QnLFxuICAgICAgICAgICAgICAgIGtleTogJ29yZGVyJyxcbiAgICAgICAgICAgICAgICB2YWx1ZTogdGhpcy50YXNrRmlsdGVyLm9yZGVyIHx8IHRoaXMuc29ydERpcmVjdGlvbnNbMF0udmFsdWUsXG4gICAgICAgICAgICAgICAgb3B0aW9uczogWy4uLnRoaXMuc29ydERpcmVjdGlvbnNdXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGxhYmVsOiAnQURGX0NMT1VEX0VESVRfU0VSVklDRV9UQVNLX0ZJTFRFUi5MQUJFTC5TVEFUVVMnLFxuICAgICAgICAgICAgICAgIHR5cGU6ICdzZWxlY3QnLFxuICAgICAgICAgICAgICAgIGtleTogJ3N0YXR1cycsXG4gICAgICAgICAgICAgICAgdmFsdWU6IHRoaXMudGFza0ZpbHRlci5zdGF0dXMgfHwgc3RhdHVzT3B0aW9uc1swXS52YWx1ZSxcbiAgICAgICAgICAgICAgICBvcHRpb25zOiBzdGF0dXNPcHRpb25zXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGxhYmVsOiAnQURGX0NMT1VEX0VESVRfU0VSVklDRV9UQVNLX0ZJTFRFUi5MQUJFTC5TVEFSVEVEX0RBVEUnLFxuICAgICAgICAgICAgICAgIHR5cGU6ICdkYXRlJyxcbiAgICAgICAgICAgICAgICBrZXk6ICdzdGFydGVkRGF0ZScsXG4gICAgICAgICAgICAgICAgdmFsdWU6IHRoaXMudGFza0ZpbHRlci5jb21wbGV0ZWREYXRlIHx8IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGxhYmVsOiAnQURGX0NMT1VEX0VESVRfU0VSVklDRV9UQVNLX0ZJTFRFUi5MQUJFTC5DT01QTEVURURfREFURScsXG4gICAgICAgICAgICAgICAgdHlwZTogJ2RhdGUnLFxuICAgICAgICAgICAgICAgIGtleTogJ2NvbXBsZXRlZERhdGUnLFxuICAgICAgICAgICAgICAgIHZhbHVlOiB0aGlzLnRhc2tGaWx0ZXIuY29tcGxldGVkRGF0ZSB8fCBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBsYWJlbDogJ0FERl9DTE9VRF9FRElUX1NFUlZJQ0VfVEFTS19GSUxURVIuTEFCRUwuUFJPQ0VTU19JTlNUQU5DRV9JRCcsXG4gICAgICAgICAgICAgICAgdHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgICAgIGtleTogJ3Byb2Nlc3NJbnN0YW5jZUlkJyxcbiAgICAgICAgICAgICAgICB2YWx1ZTogdGhpcy50YXNrRmlsdGVyLnByb2Nlc3NJbnN0YW5jZUlkIHx8ICcnXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGxhYmVsOiAnQURGX0NMT1VEX0VESVRfU0VSVklDRV9UQVNLX0ZJTFRFUi5MQUJFTC5QUk9DRVNTX0RFRl9JRCcsXG4gICAgICAgICAgICAgICAgdHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgICAgIGtleTogJ3Byb2Nlc3NEZWZpbml0aW9uSWQnLFxuICAgICAgICAgICAgICAgIHZhbHVlOiB0aGlzLnRhc2tGaWx0ZXIucHJvY2Vzc0RlZmluaXRpb25JZCB8fCAnJ1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBsYWJlbDogJ0FERl9DTE9VRF9FRElUX1NFUlZJQ0VfVEFTS19GSUxURVIuTEFCRUwuU0VSVklDRV9OQU1FJyxcbiAgICAgICAgICAgICAgICB0eXBlOiAndGV4dCcsXG4gICAgICAgICAgICAgICAga2V5OiAnc2VydmljZU5hbWUnLFxuICAgICAgICAgICAgICAgIHZhbHVlOiB0aGlzLnRhc2tGaWx0ZXIuc2VydmljZU5hbWUgfHwgJydcbiAgICAgICAgICAgIH1cbiAgICAgICAgXTtcbiAgICB9XG59XG4iXX0=