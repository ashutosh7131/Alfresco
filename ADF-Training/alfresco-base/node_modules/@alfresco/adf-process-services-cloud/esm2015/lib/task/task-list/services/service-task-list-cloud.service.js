import { Injectable } from '@angular/core';
import { AlfrescoApiService, AppConfigService, LogService } from '@alfresco/adf-core';
import { throwError } from 'rxjs';
import { BaseCloudService } from '../../../services/base-cloud.service';
import { map } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@alfresco/adf-core";
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@alfresco/adf-core';
export class ServiceTaskListCloudService extends BaseCloudService {
    constructor(apiService, appConfigService, logService) {
        super(apiService, appConfigService);
        this.logService = logService;
    }
    getServiceTaskByRequest(requestNode) {
        if (requestNode.appName || requestNode.appName === '') {
            const queryUrl = `${this.getBasePath(requestNode.appName)}/query/admin/v1/service-tasks`;
            const queryParams = this.buildQueryParams(requestNode);
            const sortingParams = this.buildSortingParam(requestNode.sorting);
            if (sortingParams) {
                queryParams['sort'] = sortingParams;
            }
            return this.get(queryUrl, queryParams);
        }
        else {
            this.logService.error('Appname is mandatory for querying task');
            return throwError('Appname not configured');
        }
    }
    getServiceTaskStatus(appName, serviceTaskId) {
        if (appName) {
            const queryUrl = `${this.getBasePath(appName)}/query/admin/v1/service-tasks/${serviceTaskId}/integration-context`;
            return this.get(queryUrl).pipe(map((response) => response.entry));
        }
        else {
            this.logService.error('Appname is mandatory for querying task');
            return throwError('Appname not configured');
        }
    }
    buildQueryParams(requestNode) {
        const queryParam = {};
        for (const property in requestNode) {
            if (requestNode.hasOwnProperty(property) &&
                !this.isExcludedField(property) &&
                this.isPropertyValueValid(requestNode, property)) {
                queryParam[property] = requestNode[property];
            }
        }
        return queryParam;
    }
    isExcludedField(property) {
        return property === 'appName' || property === 'sorting';
    }
    isPropertyValueValid(requestNode, property) {
        return requestNode[property] !== '' && requestNode[property] !== null && requestNode[property] !== undefined;
    }
    buildSortingParam(models) {
        let finalSorting = '';
        if (models) {
            for (const sort of models) {
                if (!finalSorting) {
                    finalSorting = `${sort.orderBy},${sort.direction}`;
                }
                else {
                    finalSorting = `${finalSorting}&${sort.orderBy},${sort.direction}`;
                }
            }
        }
        return encodeURI(finalSorting);
    }
}
ServiceTaskListCloudService.ɵfac = function ServiceTaskListCloudService_Factory(t) { return new (t || ServiceTaskListCloudService)(ɵngcc0.ɵɵinject(ɵngcc1.AlfrescoApiService), ɵngcc0.ɵɵinject(ɵngcc1.AppConfigService), ɵngcc0.ɵɵinject(ɵngcc1.LogService)); };
ServiceTaskListCloudService.ɵprov = i0.ɵɵdefineInjectable({ factory: function ServiceTaskListCloudService_Factory() { return new ServiceTaskListCloudService(i0.ɵɵinject(i1.AlfrescoApiService), i0.ɵɵinject(i1.AppConfigService), i0.ɵɵinject(i1.LogService)); }, token: ServiceTaskListCloudService, providedIn: "root" });
ServiceTaskListCloudService.ctorParameters = () => [
    { type: AlfrescoApiService },
    { type: AppConfigService },
    { type: LogService }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ServiceTaskListCloudService, [{
        type: Injectable,
        args: [{ providedIn: 'root' }]
    }], function () { return [{ type: ɵngcc1.AlfrescoApiService }, { type: ɵngcc1.AppConfigService }, { type: ɵngcc1.LogService }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,