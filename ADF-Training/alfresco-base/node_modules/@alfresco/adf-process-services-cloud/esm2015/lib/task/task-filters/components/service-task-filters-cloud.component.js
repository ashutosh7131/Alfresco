/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, EventEmitter, Output, ViewEncapsulation } from '@angular/core';
import { TranslationService } from '@alfresco/adf-core';
import { takeUntil } from 'rxjs/operators';
import { BaseTaskFiltersCloudComponent } from './base-task-filters-cloud.component';
import { ServiceTaskFilterCloudService } from '../services/service-task-filter-cloud.service';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../services/service-task-filter-cloud.service';
import * as ɵngcc2 from '@alfresco/adf-core';
import * as ɵngcc3 from '@angular/common';
import * as ɵngcc4 from '@angular/material/button';
import * as ɵngcc5 from '@angular/flex-layout/flex';
import * as ɵngcc6 from '@angular/material/progress-spinner';
import * as ɵngcc7 from '@ngx-translate/core';

function ServiceTaskFiltersCloudComponent_ng_container_0_div_1_adf_icon_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "adf-icon", 8);
} if (rf & 2) {
    const filter_r5 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵproperty("value", filter_r5.icon);
} }
function ServiceTaskFiltersCloudComponent_ng_container_0_div_1_span_7_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 9);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "async");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const filter_r5 = ɵngcc0.ɵɵnextContext().$implicit;
    const ctx_r7 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵclassProp("adf-active", ctx_r7.wasFilterUpdated(filter_r5.key));
    ɵngcc0.ɵɵattribute("data-automation-id", filter_r5.key + "_filter-counter");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 4, ctx_r7.counters$[filter_r5.key]), " ");
} }
function ServiceTaskFiltersCloudComponent_ng_container_0_div_1_Template(rf, ctx) { if (rf & 1) {
    const _r11 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 3);
    ɵngcc0.ɵɵelementStart(1, "button", 4);
    ɵngcc0.ɵɵlistener("click", function ServiceTaskFiltersCloudComponent_ng_container_0_div_1_Template_button_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r11); const filter_r5 = ctx.$implicit; const ctx_r10 = ɵngcc0.ɵɵnextContext(2); return ctx_r10.onFilterClick(filter_r5); });
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵtemplate(3, ServiceTaskFiltersCloudComponent_ng_container_0_div_1_adf_icon_3_Template, 1, 1, "adf-icon", 5);
    ɵngcc0.ɵɵelementStart(4, "span", 6);
    ɵngcc0.ɵɵtext(5);
    ɵngcc0.ɵɵpipe(6, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(7, ServiceTaskFiltersCloudComponent_ng_container_0_div_1_span_7_Template, 3, 6, "span", 7);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const filter_r5 = ctx.$implicit;
    const ctx_r4 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵclassProp("adf-active", ctx_r4.currentFilter === filter_r5);
    ɵngcc0.ɵɵproperty("id", filter_r5.id);
    ɵngcc0.ɵɵattribute("aria-label", ɵngcc0.ɵɵpipeBind1(2, 8, filter_r5.name))("data-automation-id", filter_r5.key + "_filter");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r4.showIcons);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(6, 10, filter_r5.name));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r4.counters$[filter_r5.key]);
} }
function ServiceTaskFiltersCloudComponent_ng_container_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, ServiceTaskFiltersCloudComponent_ng_container_0_div_1_Template, 8, 12, "div", 2);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const filterList_r3 = ctx.ngIf;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", filterList_r3);
} }
function ServiceTaskFiltersCloudComponent_ng_template_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "div", 10);
    ɵngcc0.ɵɵelement(2, "mat-spinner");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} }
export class ServiceTaskFiltersCloudComponent extends BaseTaskFiltersCloudComponent {
    constructor(serviceTaskFilterCloudService, translationService) {
        super();
        this.serviceTaskFilterCloudService = serviceTaskFilterCloudService;
        this.translationService = translationService;
        this.filterSelected = new EventEmitter();
        this.filterClicked = new EventEmitter();
        this.filters = [];
    }
    ngOnInit() {
        this.getFilters(this.appName);
    }
    ngOnChanges(changes) {
        const appName = changes['appName'];
        const filter = changes['filterParam'];
        if (appName && appName.currentValue !== appName.previousValue) {
            this.getFilters(appName.currentValue);
        }
        else if (filter && filter.currentValue !== filter.previousValue) {
            this.selectFilterAndEmit(filter.currentValue);
        }
    }
    getFilters(appName) {
        this.filters$ = this.serviceTaskFilterCloudService.getTaskListFilters(appName);
        this.filters$.pipe(takeUntil(this.onDestroy$)).subscribe((res) => {
            this.resetFilter();
            this.filters = res || [];
            this.selectFilterAndEmit(this.filterParam);
            this.success.emit(res);
        }, (err) => {
            this.error.emit(err);
        });
    }
    selectFilter(paramFilter) {
        if (paramFilter) {
            this.currentFilter = this.filters.find((filter, index) => paramFilter.index === index ||
                paramFilter.key === filter.key ||
                paramFilter.id === filter.id ||
                (paramFilter.name &&
                    (paramFilter.name.toLocaleLowerCase() === this.translationService.instant(filter.name).toLocaleLowerCase())));
        }
    }
    selectFilterAndEmit(newParamFilter) {
        if (newParamFilter) {
            this.selectFilter(newParamFilter);
            if (this.currentFilter) {
                this.filterSelected.emit(this.currentFilter);
            }
        }
        else {
            this.currentFilter = undefined;
        }
    }
    onFilterClick(filter) {
        if (filter) {
            this.selectFilter(filter);
            this.filterClicked.emit(this.currentFilter);
        }
        else {
            this.currentFilter = undefined;
        }
    }
    selectDefaultTaskFilter() {
        if (!this.isFilterListEmpty()) {
            this.currentFilter = this.filters[0];
        }
    }
    isFilterListEmpty() {
        return this.filters === undefined || (this.filters && this.filters.length === 0);
    }
    resetFilter() {
        this.filters = [];
        this.currentFilter = undefined;
    }
}
ServiceTaskFiltersCloudComponent.ɵfac = function ServiceTaskFiltersCloudComponent_Factory(t) { return new (t || ServiceTaskFiltersCloudComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ServiceTaskFilterCloudService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.TranslationService)); };
ServiceTaskFiltersCloudComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ServiceTaskFiltersCloudComponent, selectors: [["adf-cloud-service-task-filters"]], outputs: { filterSelected: "filterSelected", filterClicked: "filterClicked" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature], decls: 4, vars: 4, consts: [[4, "ngIf", "ngIfElse"], ["loading", ""], ["class", "adf-task-filters__entry", 4, "ngFor", "ngForOf"], [1, "adf-task-filters__entry"], ["mat-button", "", "fxLayout", "row", "fxLayoutAlign", "space-between center", 1, "adf-filter-action-button", "adf-full-width", 3, "id", "click"], ["data-automation-id", "adf-filter-icon", 3, "value", 4, "ngIf"], ["data-automation-id", "adf-filter-label", 1, "adf-filter-action-button__label"], ["class", "adf-filter-action-button__counter", 3, "adf-active", 4, "ngIf"], ["data-automation-id", "adf-filter-icon", 3, "value"], [1, "adf-filter-action-button__counter"], [1, "adf-app-list-spinner"]], template: function ServiceTaskFiltersCloudComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, ServiceTaskFiltersCloudComponent_ng_container_0_Template, 2, 1, "ng-container", 0);
        ɵngcc0.ɵɵpipe(1, "async");
        ɵngcc0.ɵɵtemplate(2, ServiceTaskFiltersCloudComponent_ng_template_2_Template, 3, 0, "ng-template", null, 1, ɵngcc0.ɵɵtemplateRefExtractor);
    } if (rf & 2) {
        const _r1 = ɵngcc0.ɵɵreference(3);
        ɵngcc0.ɵɵproperty("ngIf", ɵngcc0.ɵɵpipeBind1(1, 2, ctx.filters$))("ngIfElse", _r1);
    } }, directives: [ɵngcc3.NgIf, ɵngcc3.NgForOf, ɵngcc4.MatButton, ɵngcc5.DefaultLayoutDirective, ɵngcc5.DefaultLayoutAlignDirective, ɵngcc2.IconComponent, ɵngcc6.MatSpinner], pipes: [ɵngcc3.AsyncPipe, ɵngcc7.TranslatePipe], styles: [".adf-task-filters__entry{display:flex;font-size:14px!important;font-weight:700;height:24px;opacity:1;padding:12px 0!important;width:100%}.adf-task-filters__entry .adf-full-width{display:flex;width:100%}.adf-task-filters__entry .adf-filter-action-button{cursor:pointer;opacity:.54;padding:16px}.adf-task-filters__entry .adf-filter-action-button .adf-filter-action-button__label{margin:0 8px!important;padding-left:20px}.adf-task-filters__entry .adf-filter-action-button__counter{margin-left:10px;margin-top:6px;opacity:.54;padding:0 5px}.adf-task-filters__entry .adf-filter-action-button__counter.adf-active{background-color:var(--theme-accent-color);border-radius:15px;color:var(--theme-colors-mag-grey-light);font-size:smaller;margin-left:8px;margin-top:5px;padding:0 5px}.adf-task-filters__entry:hover{color:var(--theme-primary-color)}.adf-task-filters__entry:hover .adf-filter-action-button,.adf-task-filters__entry:hover .adf-filter-action-button__counter{opacity:1}.adf-task-filters__entry .adf-active{color:var(--theme-primary-color);opacity:1}"], encapsulation: 2 });
ServiceTaskFiltersCloudComponent.ctorParameters = () => [
    { type: ServiceTaskFilterCloudService },
    { type: TranslationService }
];
ServiceTaskFiltersCloudComponent.propDecorators = {
    filterSelected: [{ type: Output }],
    filterClicked: [{ type: Output }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ServiceTaskFiltersCloudComponent, [{
        type: Component,
        args: [{
                selector: 'adf-cloud-service-task-filters',
                template: "<ng-container *ngIf=\"filters$ | async as filterList; else loading\">\n    <div *ngFor=\"let filter of filterList\"\n         class=\"adf-task-filters__entry\">\n        <button (click)=\"onFilterClick(filter)\"\n                [attr.aria-label]=\"filter.name | translate\"\n                [id]=\"filter.id\"\n                [attr.data-automation-id]=\"filter.key + '_filter'\"\n                mat-button\n                [class.adf-active]=\"currentFilter === filter\"\n                class=\"adf-filter-action-button adf-full-width\"\n                fxLayout=\"row\"\n                fxLayoutAlign=\"space-between center\">\n            <adf-icon data-automation-id=\"adf-filter-icon\"\n                      *ngIf=\"showIcons\"\n                      [value]=\"filter.icon\"></adf-icon>\n            <span data-automation-id=\"adf-filter-label\"\n                  class=\"adf-filter-action-button__label\">{{ filter.name | translate }}</span>\n        </button>\n        <span *ngIf=\"counters$[filter.key]\"\n              [attr.data-automation-id]=\"filter.key + '_filter-counter'\"\n              class=\"adf-filter-action-button__counter\"\n              [class.adf-active]=wasFilterUpdated(filter.key)>\n            {{ counters$[filter.key] | async }}\n        </span>\n    </div>\n</ng-container>\n<ng-template #loading>\n    <ng-container>\n        <div class=\"adf-app-list-spinner\">\n            <mat-spinner></mat-spinner>\n        </div>\n    </ng-container>\n</ng-template>\n",
                encapsulation: ViewEncapsulation.None,
                styles: [".adf-task-filters__entry{display:flex;font-size:14px!important;font-weight:700;height:24px;opacity:1;padding:12px 0!important;width:100%}.adf-task-filters__entry .adf-full-width{display:flex;width:100%}.adf-task-filters__entry .adf-filter-action-button{cursor:pointer;opacity:.54;padding:16px}.adf-task-filters__entry .adf-filter-action-button .adf-filter-action-button__label{margin:0 8px!important;padding-left:20px}.adf-task-filters__entry .adf-filter-action-button__counter{margin-left:10px;margin-top:6px;opacity:.54;padding:0 5px}.adf-task-filters__entry .adf-filter-action-button__counter.adf-active{background-color:var(--theme-accent-color);border-radius:15px;color:var(--theme-colors-mag-grey-light);font-size:smaller;margin-left:8px;margin-top:5px;padding:0 5px}.adf-task-filters__entry:hover{color:var(--theme-primary-color)}.adf-task-filters__entry:hover .adf-filter-action-button,.adf-task-filters__entry:hover .adf-filter-action-button__counter{opacity:1}.adf-task-filters__entry .adf-active{color:var(--theme-primary-color);opacity:1}"]
            }]
    }], function () { return [{ type: ɵngcc1.ServiceTaskFilterCloudService }, { type: ɵngcc2.TranslationService }]; }, { filterSelected: [{
            type: Output
        }], filterClicked: [{
            type: Output
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,