import { Injectable } from '@angular/core';
import { AlfrescoApiService, LogService, AppConfigService, IdentityUserService, TranslationService } from '@alfresco/adf-core';
import { throwError, of, Subject } from 'rxjs';
import { map } from 'rxjs/operators';
import { BaseCloudService } from '../../services/base-cloud.service';
import { StartTaskCloudRequestModel } from '../start-task/models/start-task-cloud-request.model';
import { ProcessDefinitionCloud } from '../../models/process-definition-cloud.model';
import { DEFAULT_TASK_PRIORITIES, TASK_ASSIGNED_STATE, TASK_CREATED_STATE } from '../models/task.model';
import * as i0 from "@angular/core";
import * as i1 from "@alfresco/adf-core";
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@alfresco/adf-core';
export class TaskCloudService extends BaseCloudService {
    constructor(apiService, appConfigService, logService, translateService, identityUserService) {
        super(apiService, appConfigService);
        this.logService = logService;
        this.translateService = translateService;
        this.identityUserService = identityUserService;
        this.dataChangesDetected$ = new Subject();
    }
    completeTask(appName, taskId) {
        if ((appName || appName === '') && taskId) {
            const url = `${this.getBasePath(appName)}/rb/v1/tasks/${taskId}/complete`;
            const payload = { 'payloadType': 'CompleteTaskPayload' };
            return this.post(url, payload);
        }
        else {
            this.logService.error('AppName and TaskId are mandatory for complete a task');
            return throwError('AppName/TaskId not configured');
        }
    }
    canCompleteTask(taskDetails) {
        return taskDetails && taskDetails.status === TASK_ASSIGNED_STATE && this.isAssignedToMe(taskDetails.assignee);
    }
    isTaskEditable(taskDetails) {
        return taskDetails && taskDetails.status === TASK_ASSIGNED_STATE && this.isAssignedToMe(taskDetails.assignee);
    }
    isAssigneePropertyClickable(taskDetails, candidateUsers, candidateGroups) {
        let isClickable = false;
        const states = [TASK_ASSIGNED_STATE];
        if ((candidateUsers === null || candidateUsers === void 0 ? void 0 : candidateUsers.length) || (candidateGroups === null || candidateGroups === void 0 ? void 0 : candidateGroups.length)) {
            isClickable = states.includes(taskDetails.status);
        }
        return isClickable;
    }
    canClaimTask(taskDetails) {
        return taskDetails && taskDetails.status === TASK_CREATED_STATE;
    }
    canUnclaimTask(taskDetails) {
        const currentUser = this.identityUserService.getCurrentUserInfo().username;
        return taskDetails && taskDetails.status === TASK_ASSIGNED_STATE && taskDetails.assignee === currentUser;
    }
    claimTask(appName, taskId, assignee) {
        if ((appName || appName === '') && taskId) {
            const queryUrl = `${this.getBasePath(appName)}/rb/v1/tasks/${taskId}/claim?assignee=${assignee}`;
            return this.post(queryUrl).pipe(map((res) => {
                this.dataChangesDetected$.next();
                return res.entry;
            }));
        }
        else {
            this.logService.error('AppName and TaskId are mandatory for querying a task');
            return throwError('AppName/TaskId not configured');
        }
    }
    unclaimTask(appName, taskId) {
        if ((appName || appName === '') && taskId) {
            const queryUrl = `${this.getBasePath(appName)}/rb/v1/tasks/${taskId}/release`;
            return this.post(queryUrl).pipe(map((res) => {
                this.dataChangesDetected$.next();
                return res.entry;
            }));
        }
        else {
            this.logService.error('AppName and TaskId are mandatory for querying a task');
            return throwError('AppName/TaskId not configured');
        }
    }
    getTaskById(appName, taskId) {
        if ((appName || appName === '') && taskId) {
            const queryUrl = `${this.getBasePath(appName)}/query/v1/tasks/${taskId}`;
            return this.get(queryUrl).pipe(map((res) => res.entry));
        }
        else {
            this.logService.error('AppName and TaskId are mandatory for querying a task');
            return throwError('AppName/TaskId not configured');
        }
    }
    createNewTask(startTaskRequest, appName) {
        const queryUrl = `${this.getBasePath(appName)}/rb/v1/tasks`;
        const payload = JSON.stringify(new StartTaskCloudRequestModel(startTaskRequest));
        return this.post(queryUrl, payload)
            .pipe(map(response => response.entry));
    }
    updateTask(appName, taskId, payload) {
        if ((appName || appName === '') && taskId) {
            payload.payloadType = 'UpdateTaskPayload';
            const queryUrl = `${this.getBasePath(appName)}/rb/v1/tasks/${taskId}`;
            return this.put(queryUrl, payload).pipe(map((res) => res.entry));
        }
        else {
            this.logService.error('AppName and TaskId are mandatory for querying a task');
            return throwError('AppName/TaskId not configured');
        }
    }
    getCandidateUsers(appName, taskId) {
        if ((appName || appName === '') && taskId) {
            const queryUrl = `${this.getBasePath(appName)}/query/v1/tasks/${taskId}/candidate-users`;
            return this.get(queryUrl);
        }
        else {
            this.logService.error('AppName and TaskId are mandatory to get candidate user');
            return of([]);
        }
    }
    getCandidateGroups(appName, taskId) {
        if ((appName || appName === '') && taskId) {
            const queryUrl = `${this.getBasePath(appName)}/query/v1/tasks/${taskId}/candidate-groups`;
            return this.get(queryUrl);
        }
        else {
            this.logService.error('AppName and TaskId are mandatory to get candidate groups');
            return of([]);
        }
    }
    getProcessDefinitions(appName) {
        if (appName || appName === '') {
            const url = `${this.getBasePath(appName)}/rb/v1/process-definitions`;
            return this.get(url).pipe(map((res) => {
                return res.list.entries.map((processDefs) => new ProcessDefinitionCloud(processDefs.entry));
            }));
        }
        else {
            this.logService.error('AppName is mandatory for querying task');
            return throwError('AppName not configured');
        }
    }
    assign(appName, taskId, assignee) {
        if (appName && taskId) {
            const payLoad = { 'assignee': assignee, 'taskId': taskId, 'payloadType': 'AssignTaskPayload' };
            const url = `${this.getBasePath(appName)}/rb/v1/tasks/${taskId}/assign`;
            return this.post(url, payLoad).pipe(map((res) => {
                return res.entry;
            }));
        }
        else {
            this.logService.error('AppName and TaskId are mandatory to change/update the task assignee');
            return throwError('AppName/TaskId not configured');
        }
    }
    getPriorityLabel(priority) {
        const priorityItem = this.priorities.find(item => item.value === priority.toString()) || this.priorities[0];
        return this.translateService.instant(priorityItem.label);
    }
    get priorities() {
        return this.appConfigService.get('adf-cloud-priority-values') || DEFAULT_TASK_PRIORITIES;
    }
    isAssignedToMe(assignee) {
        const currentUser = this.identityUserService.getCurrentUserInfo().username;
        return assignee === currentUser;
    }
}
TaskCloudService.ɵfac = function TaskCloudService_Factory(t) { return new (t || TaskCloudService)(ɵngcc0.ɵɵinject(ɵngcc1.AlfrescoApiService), ɵngcc0.ɵɵinject(ɵngcc1.AppConfigService), ɵngcc0.ɵɵinject(ɵngcc1.LogService), ɵngcc0.ɵɵinject(ɵngcc1.TranslationService), ɵngcc0.ɵɵinject(ɵngcc1.IdentityUserService)); };
TaskCloudService.ɵprov = i0.ɵɵdefineInjectable({ factory: function TaskCloudService_Factory() { return new TaskCloudService(i0.ɵɵinject(i1.AlfrescoApiService), i0.ɵɵinject(i1.AppConfigService), i0.ɵɵinject(i1.LogService), i0.ɵɵinject(i1.TranslationService), i0.ɵɵinject(i1.IdentityUserService)); }, token: TaskCloudService, providedIn: "root" });
TaskCloudService.ctorParameters = () => [
    { type: AlfrescoApiService },
    { type: AppConfigService },
    { type: LogService },
    { type: TranslationService },
    { type: IdentityUserService }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TaskCloudService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc1.AlfrescoApiService }, { type: ɵngcc1.AppConfigService }, { type: ɵngcc1.LogService }, { type: ɵngcc1.TranslationService }, { type: ɵngcc1.IdentityUserService }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,