import { Injectable } from '@angular/core';
import { AlfrescoApiService, AppConfigService, LogService } from '@alfresco/adf-core';
import { throwError } from 'rxjs';
import { BaseCloudService } from '../../../services/base-cloud.service';
import { map } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@alfresco/adf-core";
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@alfresco/adf-core';
export class TaskListCloudService extends BaseCloudService {
    constructor(apiService, appConfigService, logService) {
        super(apiService, appConfigService);
        this.logService = logService;
    }
    getTaskByRequest(requestNode, queryUrl) {
        if (requestNode.appName || requestNode.appName === '') {
            queryUrl = queryUrl || `${this.getBasePath(requestNode.appName)}/query/v1/tasks`;
            const queryParams = this.buildQueryParams(requestNode);
            const sortingParams = this.buildSortingParam(requestNode.sorting);
            if (sortingParams) {
                queryParams['sort'] = sortingParams;
            }
            return this.get(queryUrl, queryParams).pipe(map((response) => {
                const entries = response.list && response.list.entries;
                if (entries) {
                    response.list.entries = entries.map((entryData) => entryData.entry);
                }
                return response;
            }));
        }
        else {
            this.logService.error('Appname is mandatory for querying task');
            return throwError('Appname not configured');
        }
    }
    buildQueryParams(requestNode) {
        const queryParam = {};
        for (const property in requestNode) {
            if (requestNode.hasOwnProperty(property) &&
                !this.isExcludedField(property) &&
                this.isPropertyValueValid(requestNode, property)) {
                queryParam[property] = requestNode[property];
            }
        }
        return queryParam;
    }
    isExcludedField(property) {
        return property === 'appName' || property === 'sorting';
    }
    isPropertyValueValid(requestNode, property) {
        return requestNode[property] !== '' && requestNode[property] !== null && requestNode[property] !== undefined;
    }
    buildSortingParam(models) {
        let finalSorting = '';
        if (models) {
            for (const sort of models) {
                if (!finalSorting) {
                    finalSorting = `${sort.orderBy},${sort.direction}`;
                }
                else {
                    finalSorting = `${finalSorting}&${sort.orderBy},${sort.direction}`;
                }
            }
        }
        return encodeURI(finalSorting);
    }
}
TaskListCloudService.ɵfac = function TaskListCloudService_Factory(t) { return new (t || TaskListCloudService)(ɵngcc0.ɵɵinject(ɵngcc1.AlfrescoApiService), ɵngcc0.ɵɵinject(ɵngcc1.AppConfigService), ɵngcc0.ɵɵinject(ɵngcc1.LogService)); };
TaskListCloudService.ɵprov = i0.ɵɵdefineInjectable({ factory: function TaskListCloudService_Factory() { return new TaskListCloudService(i0.ɵɵinject(i1.AlfrescoApiService), i0.ɵɵinject(i1.AppConfigService), i0.ɵɵinject(i1.LogService)); }, token: TaskListCloudService, providedIn: "root" });
TaskListCloudService.ctorParameters = () => [
    { type: AlfrescoApiService },
    { type: AppConfigService },
    { type: LogService }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TaskListCloudService, [{
        type: Injectable,
        args: [{ providedIn: 'root' }]
    }], function () { return [{ type: ɵngcc1.AlfrescoApiService }, { type: ɵngcc1.AppConfigService }, { type: ɵngcc1.LogService }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFzay1saXN0LWNsb3VkLnNlcnZpY2UuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL2hvbWUvdHJhdmlzL2J1aWxkL0FsZnJlc2NvL2FsZnJlc2NvLW5nMi1jb21wb25lbnRzL2xpYi9wcm9jZXNzLXNlcnZpY2VzLWNsb3VkL3NyYy9saWIvdGFzay90YXNrLWxpc3Qvc2VydmljZXMvdGFzay1saXN0LWNsb3VkLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBaUJBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLGtCQUFrQixFQUFFLGdCQUFnQixFQUFFLFVBQVUsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBRXRGLE9BQU8sRUFBYyxVQUFVLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFFOUMsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sc0NBQXNDLENBQUM7QUFFeEUsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3JDO0FBRUE7OztBQUFBLE1BQU0sT0FBTyxvQkFBcUIsU0FBUSxnQkFBZ0I7QUFDMUQsSUFDSSxZQUFZLFVBQThCLEVBQzlCLGdCQUFrQyxFQUN4QixVQUFzQjtBQUNoRCxRQUFRLEtBQUssQ0FBQyxVQUFVLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQztBQUM1QyxRQUYwQixlQUFVLEdBQVYsVUFBVSxDQUFZO0FBQUMsSUFFN0MsQ0FBQztBQUNMLElBT0ksZ0JBQWdCLENBQUMsV0FBdUMsRUFBRSxRQUFpQjtBQUFJLFFBQzNFLElBQUksV0FBVyxDQUFDLE9BQU8sSUFBSSxXQUFXLENBQUMsT0FBTyxLQUFLLEVBQUUsRUFBRTtBQUMvRCxZQUFZLFFBQVEsR0FBRyxRQUFRLElBQUksR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsaUJBQWlCLENBQUM7QUFDN0YsWUFBWSxNQUFN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UyxDQUFDLFlBQVksQ0FBQyxDQUFDO0FBQ3ZDLElBQUksQ0FBQztBQUNMOzJPQUFDO0FBQ0QsaVNBdkVLO0FBQUM7RUFETCxVQUFVLFNBQUMsRUFBRSxVQUFVLGpDQUM0QixZQVQzQyxrQkFBa0I7Q0FRRCxNQUFNLEVBQUUsVEFSSCxZQUFGLGdCQUFnQjtBQUFJLFlBQUYsVUFBVTtBQUFHOzs7O21KQUFFO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBBbGZyZXNjb0FwaVNlcnZpY2UsIEFwcENvbmZpZ1NlcnZpY2UsIExvZ1NlcnZpY2UgfSBmcm9tICdAYWxmcmVzY28vYWRmLWNvcmUnO1xuaW1wb3J0IHsgVGFza1F1ZXJ5Q2xvdWRSZXF1ZXN0TW9kZWwgfSBmcm9tICcuLi9tb2RlbHMvZmlsdGVyLWNsb3VkLW1vZGVsJztcbmltcG9ydCB7IE9ic2VydmFibGUsIHRocm93RXJyb3IgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IFRhc2tMaXN0Q2xvdWRTb3J0aW5nTW9kZWwgfSBmcm9tICcuLi9tb2RlbHMvdGFzay1saXN0LXNvcnRpbmcubW9kZWwnO1xuaW1wb3J0IHsgQmFzZUNsb3VkU2VydmljZSB9IGZyb20gJy4uLy4uLy4uL3NlcnZpY2VzL2Jhc2UtY2xvdWQuc2VydmljZSc7XG5pbXBvcnQgeyBUYXNrQ2xvdWROb2RlUGFnaW5nIH0gZnJvbSAnLi4vbW9kZWxzL3Rhc2stY2xvdWQubW9kZWwnO1xuaW1wb3J0IHsgbWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5ASW5qZWN0YWJsZSh7IHByb3ZpZGVkSW46ICdyb290JyB9KVxuZXhwb3J0IGNsYXNzIFRhc2tMaXN0Q2xvdWRTZXJ2aWNlIGV4dGVuZHMgQmFzZUNsb3VkU2VydmljZSB7XG5cbiAgICBjb25zdHJ1Y3RvcihhcGlTZXJ2aWNlOiBBbGZyZXNjb0FwaVNlcnZpY2UsXG4gICAgICAgICAgICAgICAgYXBwQ29uZmlnU2VydmljZTogQXBwQ29uZmlnU2VydmljZSxcbiAgICAgICAgICAgICAgICBwcm90ZWN0ZWQgbG9nU2VydmljZTogTG9nU2VydmljZSkge1xuICAgICAgICBzdXBlcihhcGlTZXJ2aWNlLCBhcHBDb25maWdTZXJ2aWNlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBGaW5kcyBhIHRhc2sgdXNpbmcgYW4gb2JqZWN0IHdpdGggb3B0aW9uYWwgcXVlcnkgcHJvcGVydGllcy5cbiAgICAgKiBAcGFyYW0gcmVxdWVzdE5vZGUgUXVlcnkgb2JqZWN0XG4gICAgICogQHBhcmFtIHF1ZXJ5VXJsIFF1ZXJ5IHVybFxuICAgICAqIEByZXR1cm5zIFRhc2sgaW5mb3JtYXRpb25cbiAgICAgKi9cbiAgICBnZXRUYXNrQnlSZXF1ZXN0KHJlcXVlc3ROb2RlOiBUYXNrUXVlcnlDbG91ZFJlcXVlc3RNb2RlbCwgcXVlcnlVcmw/OiBzdHJpbmcpOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgICAgICBpZiAocmVxdWVzdE5vZGUuYXBwTmFtZSB8fCByZXF1ZXN0Tm9kZS5hcHBOYW1lID09PSAnJykge1xuICAgICAgICAgICAgcXVlcnlVcmwgPSBxdWVyeVVybCB8fCBgJHt0aGlzLmdldEJhc2VQYXRoKHJlcXVlc3ROb2RlLmFwcE5hbWUpfS9xdWVyeS92MS90YXNrc2A7XG4gICAgICAgICAgICBjb25zdCBxdWVyeVBhcmFtcyA9IHRoaXMuYnVpbGRRdWVyeVBhcmFtcyhyZXF1ZXN0Tm9kZSk7XG4gICAgICAgICAgICBjb25zdCBzb3J0aW5nUGFyYW1zID0gdGhpcy5idWlsZFNvcnRpbmdQYXJhbShyZXF1ZXN0Tm9kZS5zb3J0aW5nKTtcbiAgICAgICAgICAgIGlmIChzb3J0aW5nUGFyYW1zKSB7XG4gICAgICAgICAgICAgICAgcXVlcnlQYXJhbXNbJ3NvcnQnXSA9IHNvcnRpbmdQYXJhbXM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5nZXQ8VGFza0Nsb3VkTm9kZVBhZ2luZz4ocXVlcnlVcmwsIHF1ZXJ5UGFyYW1zKS5waXBlKFxuICAgICAgICAgICAgICAgIG1hcCgocmVzcG9uc2U6IGFueSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBlbnRyaWVzID0gcmVzcG9uc2UubGlzdCAmJiByZXNwb25zZS5saXN0LmVudHJpZXM7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlbnRyaWVzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNwb25zZS5saXN0LmVudHJpZXMgPSBlbnRyaWVzLm1hcCgoZW50cnlEYXRhOiBhbnkpID0+IGVudHJ5RGF0YS5lbnRyeSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5sb2dTZXJ2aWNlLmVycm9yKCdBcHBuYW1lIGlzIG1hbmRhdG9yeSBmb3IgcXVlcnlpbmcgdGFzaycpO1xuICAgICAgICAgICAgcmV0dXJuIHRocm93RXJyb3IoJ0FwcG5hbWUgbm90IGNvbmZpZ3VyZWQnKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByb3RlY3RlZCBidWlsZFF1ZXJ5UGFyYW1zKHJlcXVlc3ROb2RlOiBUYXNrUXVlcnlDbG91ZFJlcXVlc3RNb2RlbCk6IE9iamVjdCB7XG4gICAgICAgIGNvbnN0IHF1ZXJ5UGFyYW06IE9iamVjdCA9IHt9O1xuICAgICAgICBmb3IgKGNvbnN0IHByb3BlcnR5IGluIHJlcXVlc3ROb2RlKSB7XG4gICAgICAgICAgICBpZiAocmVxdWVzdE5vZGUuaGFzT3duUHJvcGVydHkocHJvcGVydHkpICYmXG4gICAgICAgICAgICAgICAgIXRoaXMuaXNFeGNsdWRlZEZpZWxkKHByb3BlcnR5KSAmJlxuICAgICAgICAgICAgICAgIHRoaXMuaXNQcm9wZXJ0eVZhbHVlVmFsaWQocmVxdWVzdE5vZGUsIHByb3BlcnR5KSkge1xuICAgICAgICAgICAgICAgIHF1ZXJ5UGFyYW1bcHJvcGVydHldID0gcmVxdWVzdE5vZGVbcHJvcGVydHldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBxdWVyeVBhcmFtO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBpc0V4Y2x1ZGVkRmllbGQocHJvcGVydHk6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gcHJvcGVydHkgPT09ICdhcHBOYW1lJyB8fCBwcm9wZXJ0eSA9PT0gJ3NvcnRpbmcnO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBpc1Byb3BlcnR5VmFsdWVWYWxpZChyZXF1ZXN0Tm9kZTogYW55LCBwcm9wZXJ0eTogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiByZXF1ZXN0Tm9kZVtwcm9wZXJ0eV0gIT09ICcnICYmIHJlcXVlc3ROb2RlW3Byb3BlcnR5XSAhPT0gbnVsbCAmJiByZXF1ZXN0Tm9kZVtwcm9wZXJ0eV0gIT09IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgYnVpbGRTb3J0aW5nUGFyYW0obW9kZWxzOiBUYXNrTGlzdENsb3VkU29ydGluZ01vZGVsW10pOiBzdHJpbmcge1xuICAgICAgICBsZXQgZmluYWxTb3J0aW5nOiBzdHJpbmcgPSAnJztcbiAgICAgICAgaWYgKG1vZGVscykge1xuICAgICAgICAgICAgZm9yIChjb25zdCBzb3J0IG9mIG1vZGVscykge1xuICAgICAgICAgICAgICAgIGlmICghZmluYWxTb3J0aW5nKSB7XG4gICAgICAgICAgICAgICAgICAgIGZpbmFsU29ydGluZyA9IGAke3NvcnQub3JkZXJCeX0sJHtzb3J0LmRpcmVjdGlvbn1gO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGZpbmFsU29ydGluZyA9IGAke2ZpbmFsU29ydGluZ30mJHtzb3J0Lm9yZGVyQnl9LCR7c29ydC5kaXJlY3Rpb259YDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGVuY29kZVVSSShmaW5hbFNvcnRpbmcpO1xuICAgIH1cbn1cbiJdfQ==