/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, Input, Output, EventEmitter } from '@angular/core';
import { FormControl } from '@angular/forms';
import { IdentityUserService } from '@alfresco/adf-core';
import { AssignmentType } from '../../models/filter-cloud.model';
export class TaskAssignmentFilterCloudComponent {
    constructor(identityUserService) {
        this.identityUserService = identityUserService;
        this.assignedChange = new EventEmitter();
        this.assignedGroupChange = new EventEmitter();
        this.candidateGroups = [];
        this.groupForm = new FormControl('');
        this.assignmentTypeList = {
            unassigned: AssignmentType.UNASSIGNED,
            currentUser: AssignmentType.CURRENT_USER,
            candidateGroups: AssignmentType.CANDIDATE_GROUPS
        };
    }
    ngOnInit() {
        if (this.isFilterPropertyDefined()) {
            this.setDefaultAssignedGroups();
            this.setDefaultAssignmentType();
        }
    }
    isCandidateGroupsType() {
        return this.assignmentType === AssignmentType.CANDIDATE_GROUPS;
    }
    onAssignmentTypeChange(type) {
        this.candidateGroups = [];
        if (type === AssignmentType.CURRENT_USER) {
            this.assignedChange.emit(this.identityUserService.getCurrentUserInfo());
        }
        else if (type === AssignmentType.UNASSIGNED) {
            this.assignedChange.emit(null);
        }
    }
    onChangedGroups(groups) {
        this.assignedGroupChange.emit(groups);
    }
    setDefaultAssignmentType() {
        const assignmentAttr = this.taskFilterProperty.attributes['assignee'];
        const assignee = this.taskFilterProperty.value[assignmentAttr];
        if (this.candidateGroups.length > 0) {
            this.assignmentType = AssignmentType.CANDIDATE_GROUPS;
        }
        else if (assignee) {
            this.assignmentType = AssignmentType.CURRENT_USER;
        }
        else {
            this.assignmentType = AssignmentType.UNASSIGNED;
        }
    }
    setDefaultAssignedGroups() {
        const assignmentGroupsAttr = this.taskFilterProperty.attributes['candidateGroups'];
        this.candidateGroups = this.taskFilterProperty.value[assignmentGroupsAttr];
    }
    isFilterPropertyDefined() {
        return !!this.taskFilterProperty.attributes && !!this.taskFilterProperty.value;
    }
}
TaskAssignmentFilterCloudComponent.decorators = [
    { type: Component, args: [{
                selector: 'adf-cloud-task-assignment-filter',
                template: "<div class=\"adf-cloud-assignment-container\" fxLayout=\"row\">\n    <mat-form-field [floatLabel]=\"'auto'\">\n        <mat-select class=\"adf-task-assignment-filter\"\n                    placeholder=\"{{ 'ADF_CLOUD_TASK_ASSIGNEMNT_FILTER.ASSIGNMENT_TYPE' | translate }}\"\n                    [(ngModel)]=\"assignmentType\"\n                    (ngModelChange)=\"onAssignmentTypeChange(assignmentType)\">\n            <mat-option [value]=\"assignmentTypeList.currentUser\">{{ 'ADF_CLOUD_TASK_ASSIGNEMNT_FILTER.ASSIGNED_TO_ME' | translate }} </mat-option>\n            <mat-option [value]=\"assignmentTypeList.unassigned\">{{ 'ADF_CLOUD_TASK_ASSIGNEMNT_FILTER.UNASSIGNED' | translate }} </mat-option>\n            <mat-option [value]=\"assignmentTypeList.candidateGroups\">{{ 'ADF_CLOUD_TASK_ASSIGNEMNT_FILTER.LIST_OF_CANDIDATE_GROUPS' | translate }} </mat-option>\n        </mat-select>\n    </mat-form-field>\n\n    <adf-cloud-group class=\"adf-group-cloud-filter\" *ngIf=\"isCandidateGroupsType()\"\n        [mode]=\"'multiple'\"\n        [appName]=\"appName\"\n        [preSelectGroups]=\"candidateGroups\"\n        [searchGroupsControl]=\"groupForm\"\n        (changedGroups)=\"onChangedGroups($event)\"\n        [title]=\"'ADF_CLOUD_TASK_LIST.START_TASK.FORM.LABEL.CANDIDATE_GROUP'\"></adf-cloud-group>\n</div>\n",
                styles: [".adf-cloud-assignment-container{align-items:center}.adf-cloud-assignment-container mat-form-field{width:100%}.adf-task-assignment-filter{margin-right:10px}.adf-group-cloud-filter{flex:1;margin-left:15px;width:100%}"]
            },] }
];
TaskAssignmentFilterCloudComponent.ctorParameters = () => [
    { type: IdentityUserService }
];
TaskAssignmentFilterCloudComponent.propDecorators = {
    appName: [{ type: Input }],
    taskFilterProperty: [{ type: Input }],
    assignedChange: [{ type: Output }],
    assignedGroupChange: [{ type: Output }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFzay1hc3NpZ25tZW50LWZpbHRlci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiL2hvbWUvdHJhdmlzL2J1aWxkL0FsZnJlc2NvL2FsZnJlc2NvLW5nMi1jb21wb25lbnRzL2xpYi9wcm9jZXNzLXNlcnZpY2VzLWNsb3VkL3NyYy8iLCJzb3VyY2VzIjpbImxpYi90YXNrL3Rhc2stZmlsdGVycy9jb21wb25lbnRzL3Rhc2stYXNzaWdubWVudC1maWx0ZXIvdGFzay1hc3NpZ25tZW50LWZpbHRlci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7OztHQWVHO0FBRUgsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLFlBQVksRUFBVSxNQUFNLGVBQWUsQ0FBQztBQUMvRSxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDN0MsT0FBTyxFQUF5QyxtQkFBbUIsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ2hHLE9BQU8sRUFBRSxjQUFjLEVBQXdCLE1BQU0saUNBQWlDLENBQUM7QUFPdkYsTUFBTSxPQUFPLGtDQUFrQztJQW1CM0MsWUFBb0IsbUJBQXdDO1FBQXhDLHdCQUFtQixHQUFuQixtQkFBbUIsQ0FBcUI7UUFibEQsbUJBQWMsR0FBRyxJQUFJLFlBQVksRUFBcUIsQ0FBQztRQUV2RCx3QkFBbUIsR0FBRyxJQUFJLFlBQVksRUFBd0IsQ0FBQztRQUd6RSxvQkFBZSxHQUF5QixFQUFFLENBQUM7UUFDM0MsY0FBUyxHQUFHLElBQUksV0FBVyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ2hDLHVCQUFrQixHQUFHO1lBQ2pCLFVBQVUsRUFBRSxjQUFjLENBQUMsVUFBVTtZQUNyQyxXQUFXLEVBQUUsY0FBYyxDQUFDLFlBQVk7WUFDeEMsZUFBZSxFQUFFLGNBQWMsQ0FBQyxnQkFBZ0I7U0FDbkQsQ0FBQztJQUU2RCxDQUFDO0lBRWhFLFFBQVE7UUFDSixJQUFJLElBQUksQ0FBQyx1QkFBdUIsRUFBRSxFQUFFO1lBQ2hDLElBQUksQ0FBQyx3QkFBd0IsRUFBRSxDQUFDO1lBQ2hDLElBQUksQ0FBQyx3QkFBd0IsRUFBRSxDQUFDO1NBQ25DO0lBQ0wsQ0FBQztJQUVELHFCQUFxQjtRQUNqQixPQUFPLElBQUksQ0FBQyxjQUFjLEtBQUssY0FBYyxDQUFDLGdCQUFnQixDQUFDO0lBQ25FLENBQUM7SUFFRCxzQkFBc0IsQ0FBQyxJQUFTO1FBQzVCLElBQUksQ0FBQyxlQUFlLEdBQUcsRUFBRSxDQUFDO1FBQzFCLElBQUksSUFBSSxLQUFLLGNBQWMsQ0FBQyxZQUFZLEVBQUU7WUFDdEMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLG1CQUFtQixDQUFDLGtCQUFrQixFQUFFLENBQUMsQ0FBQztTQUMzRTthQUFNLElBQUksSUFBSSxLQUFLLGNBQWMsQ0FBQyxVQUFVLEVBQUU7WUFDM0MsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDbEM7SUFDTCxDQUFDO0lBRUQsZUFBZSxDQUFDLE1BQTRCO1FBQ3hDLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDMUMsQ0FBQztJQUVPLHdCQUF3QjtRQUM1QixNQUFNLGNBQWMsR0FBRyxJQUFJLENBQUMsa0JBQWtCLENBQUMsVUFBVSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQ3RFLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxLQUFLLENBQUMsY0FBYyxDQUFDLENBQUM7UUFFL0QsSUFBSSxJQUFJLENBQUMsZUFBZSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7WUFDakMsSUFBSSxDQUFDLGNBQWMsR0FBRyxjQUFjLENBQUMsZ0JBQWdCLENBQUM7U0FDekQ7YUFBTSxJQUFJLFFBQVEsRUFBRTtZQUNqQixJQUFJLENBQUMsY0FBYyxHQUFHLGNBQWMsQ0FBQyxZQUFZLENBQUM7U0FDckQ7YUFBTTtZQUNILElBQUksQ0FBQyxjQUFjLEdBQUcsY0FBYyxDQUFDLFVBQVUsQ0FBQztTQUNuRDtJQUNMLENBQUM7SUFFTyx3QkFBd0I7UUFDNUIsTUFBTSxvQkFBb0IsR0FBRyxJQUFJLENBQUMsa0JBQWtCLENBQUMsVUFBVSxDQUFDLGlCQUFpQixDQUFDLENBQUM7UUFDbkYsSUFBSSxDQUFDLGVBQWUsR0FBRyxJQUFJLENBQUMsa0JBQWtCLENBQUMsS0FBSyxDQUFDLG9CQUFvQixDQUFDLENBQUM7SUFDL0UsQ0FBQztJQUVPLHVCQUF1QjtRQUMzQixPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsVUFBVSxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsS0FBSyxDQUFDO0lBQ25GLENBQUM7OztZQXRFSixTQUFTLFNBQUM7Z0JBQ1AsUUFBUSxFQUFFLGtDQUFrQztnQkFDNUMsbXpDQUFzRDs7YUFFekQ7OztZQVArQyxtQkFBbUI7OztzQkFVOUQsS0FBSztpQ0FFTCxLQUFLOzZCQUVMLE1BQU07a0NBRU4sTUFBTSIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQsIE91dHB1dCwgRXZlbnRFbWl0dGVyLCBPbkluaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEZvcm1Db250cm9sIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHsgSWRlbnRpdHlHcm91cE1vZGVsLCBJZGVudGl0eVVzZXJNb2RlbCwgSWRlbnRpdHlVc2VyU2VydmljZSB9IGZyb20gJ0BhbGZyZXNjby9hZGYtY29yZSc7XG5pbXBvcnQgeyBBc3NpZ25tZW50VHlwZSwgVGFza0ZpbHRlclByb3BlcnRpZXMgfSBmcm9tICcuLi8uLi9tb2RlbHMvZmlsdGVyLWNsb3VkLm1vZGVsJztcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICdhZGYtY2xvdWQtdGFzay1hc3NpZ25tZW50LWZpbHRlcicsXG4gICAgdGVtcGxhdGVVcmw6ICcuL3Rhc2stYXNzaWdubWVudC1maWx0ZXIuY29tcG9uZW50Lmh0bWwnLFxuICAgIHN0eWxlVXJsczogWycuL3Rhc2stYXNzaWdubWVudC1maWx0ZXIuY29tcG9uZW50LnNjc3MnXVxufSlcbmV4cG9ydCBjbGFzcyBUYXNrQXNzaWdubWVudEZpbHRlckNsb3VkQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcblxuICAgIEBJbnB1dCgpIGFwcE5hbWU6IHN0cmluZztcblxuICAgIEBJbnB1dCgpIHRhc2tGaWx0ZXJQcm9wZXJ0eTogVGFza0ZpbHRlclByb3BlcnRpZXM7XG5cbiAgICBAT3V0cHV0KCkgYXNzaWduZWRDaGFuZ2UgPSBuZXcgRXZlbnRFbWl0dGVyPElkZW50aXR5VXNlck1vZGVsPigpO1xuXG4gICAgQE91dHB1dCgpIGFzc2lnbmVkR3JvdXBDaGFuZ2UgPSBuZXcgRXZlbnRFbWl0dGVyPElkZW50aXR5R3JvdXBNb2RlbFtdPigpO1xuXG4gICAgYXNzaWdubWVudFR5cGU6IEFzc2lnbm1lbnRUeXBlO1xuICAgIGNhbmRpZGF0ZUdyb3VwczogSWRlbnRpdHlHcm91cE1vZGVsW10gPSBbXTtcbiAgICBncm91cEZvcm0gPSBuZXcgRm9ybUNvbnRyb2woJycpO1xuICAgIGFzc2lnbm1lbnRUeXBlTGlzdCA9IHtcbiAgICAgICAgdW5hc3NpZ25lZDogQXNzaWdubWVudFR5cGUuVU5BU1NJR05FRCxcbiAgICAgICAgY3VycmVudFVzZXI6IEFzc2lnbm1lbnRUeXBlLkNVUlJFTlRfVVNFUixcbiAgICAgICAgY2FuZGlkYXRlR3JvdXBzOiBBc3NpZ25tZW50VHlwZS5DQU5ESURBVEVfR1JPVVBTXG4gICAgfTtcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgaWRlbnRpdHlVc2VyU2VydmljZTogSWRlbnRpdHlVc2VyU2VydmljZSkge31cblxuICAgIG5nT25Jbml0KCkge1xuICAgICAgICBpZiAodGhpcy5pc0ZpbHRlclByb3BlcnR5RGVmaW5lZCgpKSB7XG4gICAgICAgICAgICB0aGlzLnNldERlZmF1bHRBc3NpZ25lZEdyb3VwcygpO1xuICAgICAgICAgICAgdGhpcy5zZXREZWZhdWx0QXNzaWdubWVudFR5cGUoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGlzQ2FuZGlkYXRlR3JvdXBzVHlwZSgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYXNzaWdubWVudFR5cGUgPT09IEFzc2lnbm1lbnRUeXBlLkNBTkRJREFURV9HUk9VUFM7XG4gICAgfVxuXG4gICAgb25Bc3NpZ25tZW50VHlwZUNoYW5nZSh0eXBlOiBhbnkpIHtcbiAgICAgICAgdGhpcy5jYW5kaWRhdGVHcm91cHMgPSBbXTtcbiAgICAgICAgaWYgKHR5cGUgPT09IEFzc2lnbm1lbnRUeXBlLkNVUlJFTlRfVVNFUikge1xuICAgICAgICAgICAgdGhpcy5hc3NpZ25lZENoYW5nZS5lbWl0KHRoaXMuaWRlbnRpdHlVc2VyU2VydmljZS5nZXRDdXJyZW50VXNlckluZm8oKSk7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gQXNzaWdubWVudFR5cGUuVU5BU1NJR05FRCkge1xuICAgICAgICAgICAgdGhpcy5hc3NpZ25lZENoYW5nZS5lbWl0KG51bGwpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgb25DaGFuZ2VkR3JvdXBzKGdyb3VwczogSWRlbnRpdHlHcm91cE1vZGVsW10pIHtcbiAgICAgICAgdGhpcy5hc3NpZ25lZEdyb3VwQ2hhbmdlLmVtaXQoZ3JvdXBzKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHNldERlZmF1bHRBc3NpZ25tZW50VHlwZSgpIHtcbiAgICAgICAgY29uc3QgYXNzaWdubWVudEF0dHIgPSB0aGlzLnRhc2tGaWx0ZXJQcm9wZXJ0eS5hdHRyaWJ1dGVzWydhc3NpZ25lZSddO1xuICAgICAgICBjb25zdCBhc3NpZ25lZSA9IHRoaXMudGFza0ZpbHRlclByb3BlcnR5LnZhbHVlW2Fzc2lnbm1lbnRBdHRyXTtcblxuICAgICAgICBpZiAodGhpcy5jYW5kaWRhdGVHcm91cHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgdGhpcy5hc3NpZ25tZW50VHlwZSA9IEFzc2lnbm1lbnRUeXBlLkNBTkRJREFURV9HUk9VUFM7XG4gICAgICAgIH0gZWxzZSBpZiAoYXNzaWduZWUpIHtcbiAgICAgICAgICAgIHRoaXMuYXNzaWdubWVudFR5cGUgPSBBc3NpZ25tZW50VHlwZS5DVVJSRU5UX1VTRVI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmFzc2lnbm1lbnRUeXBlID0gQXNzaWdubWVudFR5cGUuVU5BU1NJR05FRDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgc2V0RGVmYXVsdEFzc2lnbmVkR3JvdXBzKCkge1xuICAgICAgICBjb25zdCBhc3NpZ25tZW50R3JvdXBzQXR0ciA9IHRoaXMudGFza0ZpbHRlclByb3BlcnR5LmF0dHJpYnV0ZXNbJ2NhbmRpZGF0ZUdyb3VwcyddO1xuICAgICAgICB0aGlzLmNhbmRpZGF0ZUdyb3VwcyA9IHRoaXMudGFza0ZpbHRlclByb3BlcnR5LnZhbHVlW2Fzc2lnbm1lbnRHcm91cHNBdHRyXTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGlzRmlsdGVyUHJvcGVydHlEZWZpbmVkKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gISF0aGlzLnRhc2tGaWx0ZXJQcm9wZXJ0eS5hdHRyaWJ1dGVzICYmICEhdGhpcy50YXNrRmlsdGVyUHJvcGVydHkudmFsdWU7XG4gICAgfVxufVxuIl19