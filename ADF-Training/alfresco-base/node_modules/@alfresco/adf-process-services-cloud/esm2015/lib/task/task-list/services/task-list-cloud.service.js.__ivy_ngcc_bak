import { Injectable } from '@angular/core';
import { AlfrescoApiService, AppConfigService, LogService } from '@alfresco/adf-core';
import { throwError } from 'rxjs';
import { BaseCloudService } from '../../../services/base-cloud.service';
import { map } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@alfresco/adf-core";
export class TaskListCloudService extends BaseCloudService {
    constructor(apiService, appConfigService, logService) {
        super(apiService, appConfigService);
        this.logService = logService;
    }
    getTaskByRequest(requestNode, queryUrl) {
        if (requestNode.appName || requestNode.appName === '') {
            queryUrl = queryUrl || `${this.getBasePath(requestNode.appName)}/query/v1/tasks`;
            const queryParams = this.buildQueryParams(requestNode);
            const sortingParams = this.buildSortingParam(requestNode.sorting);
            if (sortingParams) {
                queryParams['sort'] = sortingParams;
            }
            return this.get(queryUrl, queryParams).pipe(map((response) => {
                const entries = response.list && response.list.entries;
                if (entries) {
                    response.list.entries = entries.map((entryData) => entryData.entry);
                }
                return response;
            }));
        }
        else {
            this.logService.error('Appname is mandatory for querying task');
            return throwError('Appname not configured');
        }
    }
    buildQueryParams(requestNode) {
        const queryParam = {};
        for (const property in requestNode) {
            if (requestNode.hasOwnProperty(property) &&
                !this.isExcludedField(property) &&
                this.isPropertyValueValid(requestNode, property)) {
                queryParam[property] = requestNode[property];
            }
        }
        return queryParam;
    }
    isExcludedField(property) {
        return property === 'appName' || property === 'sorting';
    }
    isPropertyValueValid(requestNode, property) {
        return requestNode[property] !== '' && requestNode[property] !== null && requestNode[property] !== undefined;
    }
    buildSortingParam(models) {
        let finalSorting = '';
        if (models) {
            for (const sort of models) {
                if (!finalSorting) {
                    finalSorting = `${sort.orderBy},${sort.direction}`;
                }
                else {
                    finalSorting = `${finalSorting}&${sort.orderBy},${sort.direction}`;
                }
            }
        }
        return encodeURI(finalSorting);
    }
}
TaskListCloudService.ɵprov = i0.ɵɵdefineInjectable({ factory: function TaskListCloudService_Factory() { return new TaskListCloudService(i0.ɵɵinject(i1.AlfrescoApiService), i0.ɵɵinject(i1.AppConfigService), i0.ɵɵinject(i1.LogService)); }, token: TaskListCloudService, providedIn: "root" });
TaskListCloudService.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] }
];
TaskListCloudService.ctorParameters = () => [
    { type: AlfrescoApiService },
    { type: AppConfigService },
    { type: LogService }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFzay1saXN0LWNsb3VkLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiL2hvbWUvdHJhdmlzL2J1aWxkL0FsZnJlc2NvL2FsZnJlc2NvLW5nMi1jb21wb25lbnRzL2xpYi9wcm9jZXNzLXNlcnZpY2VzLWNsb3VkL3NyYy8iLCJzb3VyY2VzIjpbImxpYi90YXNrL3Rhc2stbGlzdC9zZXJ2aWNlcy90YXNrLWxpc3QtY2xvdWQuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFpQkEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsZ0JBQWdCLEVBQUUsVUFBVSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFFdEYsT0FBTyxFQUFjLFVBQVUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUU5QyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxzQ0FBc0MsQ0FBQztBQUV4RSxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7OztBQUdyQyxNQUFNLE9BQU8sb0JBQXFCLFNBQVEsZ0JBQWdCO0lBRXRELFlBQVksVUFBOEIsRUFDOUIsZ0JBQWtDLEVBQ3hCLFVBQXNCO1FBQ3hDLEtBQUssQ0FBQyxVQUFVLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQztRQURsQixlQUFVLEdBQVYsVUFBVSxDQUFZO0lBRTVDLENBQUM7SUFRRCxnQkFBZ0IsQ0FBQyxXQUF1QyxFQUFFLFFBQWlCO1FBQ3ZFLElBQUksV0FBVyxDQUFDLE9BQU8sSUFBSSxXQUFXLENBQUMsT0FBTyxLQUFLLEVBQUUsRUFBRTtZQUNuRCxRQUFRLEdBQUcsUUFBUSxJQUFJLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLGlCQUFpQixDQUFDO1lBQ2pGLE1BQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxXQUFXLENBQUMsQ0FBQztZQUN2RCxNQUFNLGFBQWEsR0FBRyxJQUFJLENBQUMsaUJBQWlCLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQ2xFLElBQUksYUFBYSxFQUFFO2dCQUNmLFdBQVcsQ0FBQyxNQUFNLENBQUMsR0FBRyxhQUFhLENBQUM7YUFDdkM7WUFDRCxPQUFPLElBQUksQ0FBQyxHQUFHLENBQXNCLFFBQVEsRUFBRSxXQUFXLENBQUMsQ0FBQyxJQUFJLENBQzVELEdBQUcsQ0FBQyxDQUFDLFFBQWEsRUFBRSxFQUFFO2dCQUNsQixNQUFNLE9BQU8sR0FBRyxRQUFRLENBQUMsSUFBSSxJQUFJLFFBQVEsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDO2dCQUN2RCxJQUFJLE9BQU8sRUFBRTtvQkFDVCxRQUFRLENBQUMsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsU0FBYyxFQUFFLEVBQUUsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUM7aUJBQzVFO2dCQUNELE9BQU8sUUFBUSxDQUFDO1lBQ3BCLENBQUMsQ0FBQyxDQUNMLENBQUM7U0FDTDthQUFNO1lBQ0gsSUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsd0NBQXdDLENBQUMsQ0FBQztZQUNoRSxPQUFPLFVBQVUsQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDO1NBQy9DO0lBQ0wsQ0FBQztJQUVTLGdCQUFnQixDQUFDLFdBQXVDO1FBQzlELE1BQU0sVUFBVSxHQUFXLEVBQUUsQ0FBQztRQUM5QixLQUFLLE1BQU0sUUFBUSxJQUFJLFdBQVcsRUFBRTtZQUNoQyxJQUFJLFdBQVcsQ0FBQyxjQUFjLENBQUMsUUFBUSxDQUFDO2dCQUNwQyxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsUUFBUSxDQUFDO2dCQUMvQixJQUFJLENBQUMsb0JBQW9CLENBQUMsV0FBVyxFQUFFLFFBQVEsQ0FBQyxFQUFFO2dCQUNsRCxVQUFVLENBQUMsUUFBUSxDQUFDLEdBQUcsV0FBVyxDQUFDLFFBQVEsQ0FBQyxDQUFDO2FBQ2hEO1NBQ0o7UUFDRCxPQUFPLFVBQVUsQ0FBQztJQUN0QixDQUFDO0lBRVMsZUFBZSxDQUFDLFFBQWdCO1FBQ3RDLE9BQU8sUUFBUSxLQUFLLFNBQVMsSUFBSSxRQUFRLEtBQUssU0FBUyxDQUFDO0lBQzVELENBQUM7SUFFUyxvQkFBb0IsQ0FBQyxXQUFnQixFQUFFLFFBQWdCO1FBQzdELE9BQU8sV0FBVyxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsSUFBSSxXQUFXLENBQUMsUUFBUSxDQUFDLEtBQUssSUFBSSxJQUFJLFdBQVcsQ0FBQyxRQUFRLENBQUMsS0FBSyxTQUFTLENBQUM7SUFDakgsQ0FBQztJQUVTLGlCQUFpQixDQUFDLE1BQW1DO1FBQzNELElBQUksWUFBWSxHQUFXLEVBQUUsQ0FBQztRQUM5QixJQUFJLE1BQU0sRUFBRTtZQUNSLEtBQUssTUFBTSxJQUFJLElBQUksTUFBTSxFQUFFO2dCQUN2QixJQUFJLENBQUMsWUFBWSxFQUFFO29CQUNmLFlBQVksR0FBRyxHQUFHLElBQUksQ0FBQyxPQUFPLElBQUksSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDO2lCQUN0RDtxQkFBTTtvQkFDSCxZQUFZLEdBQUcsR0FBRyxZQUFZLElBQUksSUFBSSxDQUFDLE9BQU8sSUFBSSxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUM7aUJBQ3RFO2FBQ0o7U0FDSjtRQUNELE9BQU8sU0FBUyxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQ25DLENBQUM7Ozs7WUF0RUosVUFBVSxTQUFDLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRTs7O1lBUnpCLGtCQUFrQjtZQUFFLGdCQUFnQjtZQUFFLFVBQVUiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBBbGZyZXNjb0FwaVNlcnZpY2UsIEFwcENvbmZpZ1NlcnZpY2UsIExvZ1NlcnZpY2UgfSBmcm9tICdAYWxmcmVzY28vYWRmLWNvcmUnO1xuaW1wb3J0IHsgVGFza1F1ZXJ5Q2xvdWRSZXF1ZXN0TW9kZWwgfSBmcm9tICcuLi9tb2RlbHMvZmlsdGVyLWNsb3VkLW1vZGVsJztcbmltcG9ydCB7IE9ic2VydmFibGUsIHRocm93RXJyb3IgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IFRhc2tMaXN0Q2xvdWRTb3J0aW5nTW9kZWwgfSBmcm9tICcuLi9tb2RlbHMvdGFzay1saXN0LXNvcnRpbmcubW9kZWwnO1xuaW1wb3J0IHsgQmFzZUNsb3VkU2VydmljZSB9IGZyb20gJy4uLy4uLy4uL3NlcnZpY2VzL2Jhc2UtY2xvdWQuc2VydmljZSc7XG5pbXBvcnQgeyBUYXNrQ2xvdWROb2RlUGFnaW5nIH0gZnJvbSAnLi4vbW9kZWxzL3Rhc2stY2xvdWQubW9kZWwnO1xuaW1wb3J0IHsgbWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5ASW5qZWN0YWJsZSh7IHByb3ZpZGVkSW46ICdyb290JyB9KVxuZXhwb3J0IGNsYXNzIFRhc2tMaXN0Q2xvdWRTZXJ2aWNlIGV4dGVuZHMgQmFzZUNsb3VkU2VydmljZSB7XG5cbiAgICBjb25zdHJ1Y3RvcihhcGlTZXJ2aWNlOiBBbGZyZXNjb0FwaVNlcnZpY2UsXG4gICAgICAgICAgICAgICAgYXBwQ29uZmlnU2VydmljZTogQXBwQ29uZmlnU2VydmljZSxcbiAgICAgICAgICAgICAgICBwcm90ZWN0ZWQgbG9nU2VydmljZTogTG9nU2VydmljZSkge1xuICAgICAgICBzdXBlcihhcGlTZXJ2aWNlLCBhcHBDb25maWdTZXJ2aWNlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBGaW5kcyBhIHRhc2sgdXNpbmcgYW4gb2JqZWN0IHdpdGggb3B0aW9uYWwgcXVlcnkgcHJvcGVydGllcy5cbiAgICAgKiBAcGFyYW0gcmVxdWVzdE5vZGUgUXVlcnkgb2JqZWN0XG4gICAgICogQHBhcmFtIHF1ZXJ5VXJsIFF1ZXJ5IHVybFxuICAgICAqIEByZXR1cm5zIFRhc2sgaW5mb3JtYXRpb25cbiAgICAgKi9cbiAgICBnZXRUYXNrQnlSZXF1ZXN0KHJlcXVlc3ROb2RlOiBUYXNrUXVlcnlDbG91ZFJlcXVlc3RNb2RlbCwgcXVlcnlVcmw/OiBzdHJpbmcpOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgICAgICBpZiAocmVxdWVzdE5vZGUuYXBwTmFtZSB8fCByZXF1ZXN0Tm9kZS5hcHBOYW1lID09PSAnJykge1xuICAgICAgICAgICAgcXVlcnlVcmwgPSBxdWVyeVVybCB8fCBgJHt0aGlzLmdldEJhc2VQYXRoKHJlcXVlc3ROb2RlLmFwcE5hbWUpfS9xdWVyeS92MS90YXNrc2A7XG4gICAgICAgICAgICBjb25zdCBxdWVyeVBhcmFtcyA9IHRoaXMuYnVpbGRRdWVyeVBhcmFtcyhyZXF1ZXN0Tm9kZSk7XG4gICAgICAgICAgICBjb25zdCBzb3J0aW5nUGFyYW1zID0gdGhpcy5idWlsZFNvcnRpbmdQYXJhbShyZXF1ZXN0Tm9kZS5zb3J0aW5nKTtcbiAgICAgICAgICAgIGlmIChzb3J0aW5nUGFyYW1zKSB7XG4gICAgICAgICAgICAgICAgcXVlcnlQYXJhbXNbJ3NvcnQnXSA9IHNvcnRpbmdQYXJhbXM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5nZXQ8VGFza0Nsb3VkTm9kZVBhZ2luZz4ocXVlcnlVcmwsIHF1ZXJ5UGFyYW1zKS5waXBlKFxuICAgICAgICAgICAgICAgIG1hcCgocmVzcG9uc2U6IGFueSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBlbnRyaWVzID0gcmVzcG9uc2UubGlzdCAmJiByZXNwb25zZS5saXN0LmVudHJpZXM7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlbnRyaWVzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNwb25zZS5saXN0LmVudHJpZXMgPSBlbnRyaWVzLm1hcCgoZW50cnlEYXRhOiBhbnkpID0+IGVudHJ5RGF0YS5lbnRyeSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5sb2dTZXJ2aWNlLmVycm9yKCdBcHBuYW1lIGlzIG1hbmRhdG9yeSBmb3IgcXVlcnlpbmcgdGFzaycpO1xuICAgICAgICAgICAgcmV0dXJuIHRocm93RXJyb3IoJ0FwcG5hbWUgbm90IGNvbmZpZ3VyZWQnKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByb3RlY3RlZCBidWlsZFF1ZXJ5UGFyYW1zKHJlcXVlc3ROb2RlOiBUYXNrUXVlcnlDbG91ZFJlcXVlc3RNb2RlbCk6IE9iamVjdCB7XG4gICAgICAgIGNvbnN0IHF1ZXJ5UGFyYW06IE9iamVjdCA9IHt9O1xuICAgICAgICBmb3IgKGNvbnN0IHByb3BlcnR5IGluIHJlcXVlc3ROb2RlKSB7XG4gICAgICAgICAgICBpZiAocmVxdWVzdE5vZGUuaGFzT3duUHJvcGVydHkocHJvcGVydHkpICYmXG4gICAgICAgICAgICAgICAgIXRoaXMuaXNFeGNsdWRlZEZpZWxkKHByb3BlcnR5KSAmJlxuICAgICAgICAgICAgICAgIHRoaXMuaXNQcm9wZXJ0eVZhbHVlVmFsaWQocmVxdWVzdE5vZGUsIHByb3BlcnR5KSkge1xuICAgICAgICAgICAgICAgIHF1ZXJ5UGFyYW1bcHJvcGVydHldID0gcmVxdWVzdE5vZGVbcHJvcGVydHldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBxdWVyeVBhcmFtO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBpc0V4Y2x1ZGVkRmllbGQocHJvcGVydHk6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gcHJvcGVydHkgPT09ICdhcHBOYW1lJyB8fCBwcm9wZXJ0eSA9PT0gJ3NvcnRpbmcnO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBpc1Byb3BlcnR5VmFsdWVWYWxpZChyZXF1ZXN0Tm9kZTogYW55LCBwcm9wZXJ0eTogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiByZXF1ZXN0Tm9kZVtwcm9wZXJ0eV0gIT09ICcnICYmIHJlcXVlc3ROb2RlW3Byb3BlcnR5XSAhPT0gbnVsbCAmJiByZXF1ZXN0Tm9kZVtwcm9wZXJ0eV0gIT09IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgYnVpbGRTb3J0aW5nUGFyYW0obW9kZWxzOiBUYXNrTGlzdENsb3VkU29ydGluZ01vZGVsW10pOiBzdHJpbmcge1xuICAgICAgICBsZXQgZmluYWxTb3J0aW5nOiBzdHJpbmcgPSAnJztcbiAgICAgICAgaWYgKG1vZGVscykge1xuICAgICAgICAgICAgZm9yIChjb25zdCBzb3J0IG9mIG1vZGVscykge1xuICAgICAgICAgICAgICAgIGlmICghZmluYWxTb3J0aW5nKSB7XG4gICAgICAgICAgICAgICAgICAgIGZpbmFsU29ydGluZyA9IGAke3NvcnQub3JkZXJCeX0sJHtzb3J0LmRpcmVjdGlvbn1gO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGZpbmFsU29ydGluZyA9IGAke2ZpbmFsU29ydGluZ30mJHtzb3J0Lm9yZGVyQnl9LCR7c29ydC5kaXJlY3Rpb259YDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGVuY29kZVVSSShmaW5hbFNvcnRpbmcpO1xuICAgIH1cbn1cbiJdfQ==