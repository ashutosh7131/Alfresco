/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Input, Output, EventEmitter, ContentChild, Directive } from '@angular/core';
import { AppConfigService, UserPreferencesService, DataTableSchema, UserPreferenceValues, CustomEmptyContentTemplateDirective } from '@alfresco/adf-core';
import { taskPresetsCloudDefaultModel } from '../models/task-preset-cloud.model';
import { BehaviorSubject, Subject } from 'rxjs';
import { TaskListCloudSortingModel } from '../models/task-list-sorting.model';
import { takeUntil } from 'rxjs/operators';
import { TaskCloudService } from '../../services/task-cloud.service';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@alfresco/adf-core';
import * as ɵngcc2 from '../../services/task-cloud.service';
export class BaseTaskListCloudComponent extends DataTableSchema {
    constructor(appConfigService, taskCloudService, userPreferences, presetKey) {
        super(appConfigService, presetKey, taskPresetsCloudDefaultModel);
        this.taskCloudService = taskCloudService;
        this.userPreferences = userPreferences;
        this.appName = '';
        this.selectionMode = 'single';
        this.multiselect = false;
        this.stickyHeader = false;
        this.showActions = false;
        this.actionsPosition = 'right';
        this.showContextMenu = false;
        this.showRowContextMenu = new EventEmitter();
        this.showRowActionsMenu = new EventEmitter();
        this.executeRowAction = new EventEmitter();
        this.rowClick = new EventEmitter();
        this.rowsSelected = new EventEmitter();
        this.success = new EventEmitter();
        this.error = new EventEmitter();
        this.rows = [];
        this.skipCount = 0;
        this.isLoading = true;
        this.defaultSorting = { key: 'startDate', direction: 'desc' };
        this.onDestroy$ = new Subject();
        this.size = userPreferences.paginationSize;
        this.pagination = new BehaviorSubject({
            maxItems: this.size,
            skipCount: 0,
            totalItems: 0
        });
        this.boundReplacePriorityValues = this.replacePriorityValues.bind(this);
    }
    ngOnInit() {
        this.userPreferences
            .select(UserPreferenceValues.PaginationSize)
            .pipe(takeUntil(this.onDestroy$))
            .subscribe(pageSize => this.size = pageSize);
    }
    ngOnChanges(changes) {
        if (changes['sorting']) {
            this.formatSorting(changes['sorting'].currentValue);
        }
        this.reload();
    }
    ngOnDestroy() {
        this.onDestroy$.next(true);
        this.onDestroy$.complete();
    }
    ngAfterContentInit() {
        this.createDatatableSchema();
    }
    reload() {
        this.requestNode = this.createRequestNode();
        if (this.requestNode.appName || this.requestNode.appName === '') {
            this.load(this.requestNode);
        }
        else {
            this.rows = [];
        }
    }
    isListEmpty() {
        return !this.rows || this.rows.length === 0;
    }
    resetPagination() {
        this.skipCount = 0;
        this.size = this.userPreferences.paginationSize;
        this.pagination.next({
            skipCount: 0,
            maxItems: this.size
        });
    }
    updatePagination(pagination) {
        this.size = pagination.maxItems;
        this.skipCount = pagination.skipCount;
        this.pagination.next(pagination);
        this.reload();
    }
    onSortingChanged(event) {
        this.setSorting(event.detail);
        this.formatSorting(this.sorting);
        this.reload();
    }
    onRowClick(item) {
        this.currentInstanceId = item.value.getValue('id');
        this.rowClick.emit(this.currentInstanceId);
    }
    onRowSelect(event) {
        this.selectedInstances = [...event.detail.selection];
        this.rowsSelected.emit(this.selectedInstances);
    }
    onRowUnselect(event) {
        this.selectedInstances = [...event.detail.selection];
        this.rowsSelected.emit(this.selectedInstances);
    }
    onRowKeyUp(event) {
        if (event.detail.keyboardEvent.key === 'Enter') {
            event.preventDefault();
            this.currentInstanceId = event.detail.row.getValue('id');
            this.rowClick.emit(this.currentInstanceId);
        }
    }
    onShowRowActionsMenu(event) {
        this.showRowActionsMenu.emit(event);
    }
    onShowRowContextMenu(event) {
        this.showRowContextMenu.emit(event);
    }
    onExecuteRowAction(row) {
        this.executeRowAction.emit(row);
    }
    setSorting(sortDetail) {
        const sorting = sortDetail ? {
            orderBy: sortDetail.key,
            direction: sortDetail.direction.toUpperCase()
        } : Object.assign({}, this.defaultSorting);
        this.sorting = [new TaskListCloudSortingModel(sorting)];
    }
    formatSorting(sorting) {
        this.formattedSorting = this.isValidSorting(sorting) ? [
            sorting[0].orderBy,
            sorting[0].direction.toLocaleLowerCase()
        ] : null;
    }
    isValidSorting(sorting) {
        return sorting && sorting.length && sorting[0].orderBy && sorting[0].direction;
    }
    replacePriorityValues(row, column) {
        return column.key.split('.').reduce((source, key) => {
            if (key === 'priority' && source && typeof (source[key]) === 'number') {
                return source[key] = this.taskCloudService.getPriorityLabel(source[key]);
            }
            return source && typeof (source) === 'object' ? source[key] : undefined;
        }, row.obj);
    }
}
BaseTaskListCloudComponent.ɵfac = function BaseTaskListCloudComponent_Factory(t) { return new (t || BaseTaskListCloudComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.AppConfigService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.TaskCloudService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.UserPreferencesService), ɵngcc0.ɵɵdirectiveInject(String)); };
BaseTaskListCloudComponent.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: BaseTaskListCloudComponent, contentQueries: function BaseTaskListCloudComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, CustomEmptyContentTemplateDirective, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.emptyCustomContent = _t.first);
    } }, inputs: { appName: "appName", selectionMode: "selectionMode", multiselect: "multiselect", stickyHeader: "stickyHeader", showActions: "showActions", actionsPosition: "actionsPosition", showContextMenu: "showContextMenu", sorting: "sorting" }, outputs: { showRowContextMenu: "showRowContextMenu", showRowActionsMenu: "showRowActionsMenu", executeRowAction: "executeRowAction", rowClick: "rowClick", rowsSelected: "rowsSelected", success: "success", error: "error" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature] });
BaseTaskListCloudComponent.ctorParameters = () => [
    { type: AppConfigService },
    { type: TaskCloudService },
    { type: UserPreferencesService },
    { type: String }
];
BaseTaskListCloudComponent.propDecorators = {
    emptyCustomContent: [{ type: ContentChild, args: [CustomEmptyContentTemplateDirective,] }],
    appName: [{ type: Input }],
    selectionMode: [{ type: Input }],
    multiselect: [{ type: Input }],
    stickyHeader: [{ type: Input }],
    sorting: [{ type: Input }],
    showActions: [{ type: Input }],
    actionsPosition: [{ type: Input }],
    showContextMenu: [{ type: Input }],
    showRowContextMenu: [{ type: Output }],
    showRowActionsMenu: [{ type: Output }],
    executeRowAction: [{ type: Output }],
    rowClick: [{ type: Output }],
    rowsSelected: [{ type: Output }],
    success: [{ type: Output }],
    error: [{ type: Output }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(BaseTaskListCloudComponent, [{
        type: Directive
    }], function () { return [{ type: ɵngcc1.AppConfigService }, { type: ɵngcc2.TaskCloudService }, { type: ɵngcc1.UserPreferencesService }, { type: String }]; }, { appName: [{
            type: Input
        }], selectionMode: [{
            type: Input
        }], multiselect: [{
            type: Input
        }], stickyHeader: [{
            type: Input
        }], showActions: [{
            type: Input
        }], actionsPosition: [{
            type: Input
        }], showContextMenu: [{
            type: Input
        }], showRowContextMenu: [{
            type: Output
        }], showRowActionsMenu: [{
            type: Output
        }], executeRowAction: [{
            type: Output
        }], rowClick: [{
            type: Output
        }], rowsSelected: [{
            type: Output
        }], success: [{
            type: Output
        }], error: [{
            type: Output
        }], sorting: [{
            type: Input
        }], emptyCustomContent: [{
            type: ContentChild,
            args: [CustomEmptyContentTemplateDirective]
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS10YXNrLWxpc3QtY2xvdWQuY29tcG9uZW50LmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9ob21lL3RyYXZpcy9idWlsZC9BbGZyZXNjby9hbGZyZXNjby1uZzItY29tcG9uZW50cy9saWIvcHJvY2Vzcy1zZXJ2aWNlcy1jbG91ZC9zcmMvbGliL3Rhc2svdGFzay1saXN0L2NvbXBvbmVudHMvYmFzZS10YXNrLWxpc3QtY2xvdWQuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFFSCxPQUFPLEVBQWEsS0FBSyxFQUFpQixNQUFNLEVBQUUsWUFBWSxFQUFFLFlBQVksRUFBdUMsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3BKLE9BQU8sRUFDSCxnQkFBZ0IsRUFBRSxzQkFBc0IsRUFDeEMsZUFBZSxFQUFFLG9CQUFvQixFQUV2QixtQ0FBbUMsRUFDcEQsTUFBTSxvQkFBb0IsQ0FBQztBQUM1QixPQUFPLEVBQUUsNEJBQTRCLEVBQUUsTUFBTSxtQ0FBbUMsQ0FBQztBQUVqRixPQUFPLEVBQUUsZUFBZSxFQUFFLE9BQU8sRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUNoRCxPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSxtQ0FBbUMsQ0FBQztBQUM5RSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDM0MsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sbUNBQW1DLENBQUM7Ozs7QUFJckUsTUFBTSxPQUFnQiwwQkFBMkIsU0FBUSxlQUFlO0FBQUcsSUFzRnZFLFlBQVksZ0JBQWtDLEVBQzFCLGdCQUFrQyxFQUNsQyxlQUF1QyxFQUMvQyxTQUFpQjtBQUNqQyxRQUFRLEtBQUssQ0FBQyxnQkFBZ0IsRUFB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LFlBQVksU0FBQyxtQ0FBbUM7QUFDaEQsc0JBR0EsS0FBSztBQUNSLDRCQU9HLEtBQUs7QUFDUiwwQkFHRyxLQUFLO0FBQ1IsMkJBR0csS0FBSztBQUNSLHNCQUtHLEtBQUs7QUFDUiwwQkFHRyxLQUFLO0FBQ1IsOEJBR0csS0FBSztBQUNSLDhCQUdHLEtBQUs7QUFDUixpQ0FHRyxNQUFNO0FBQ1QsaUNBR0csTUFBTTtBQUNULCtCQUdHLE1BQU07QUFDVCx1QkFHRyxNQUFNO0FBQ1QsMkJBR0csTUFBTTtBQUNULHNCQUdHLE1BQU07QUFDVCxvQkFHRyxNQUFNO0FBQ1Y7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztvQkFBRTtBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgT25DaGFuZ2VzLCBJbnB1dCwgU2ltcGxlQ2hhbmdlcywgT3V0cHV0LCBFdmVudEVtaXR0ZXIsIENvbnRlbnRDaGlsZCwgQWZ0ZXJDb250ZW50SW5pdCwgT25EZXN0cm95LCBPbkluaXQsIERpcmVjdGl2ZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtcbiAgICBBcHBDb25maWdTZXJ2aWNlLCBVc2VyUHJlZmVyZW5jZXNTZXJ2aWNlLFxuICAgIERhdGFUYWJsZVNjaGVtYSwgVXNlclByZWZlcmVuY2VWYWx1ZXMsXG4gICAgUGFnaW5hdGVkQ29tcG9uZW50LCBQYWdpbmF0aW9uTW9kZWwsXG4gICAgRGF0YVJvd0V2ZW50LCBDdXN0b21FbXB0eUNvbnRlbnRUZW1wbGF0ZURpcmVjdGl2ZSwgRGF0YUNlbGxFdmVudCwgRGF0YVJvd0FjdGlvbkV2ZW50LCBEYXRhUm93LCBEYXRhQ29sdW1uXG59IGZyb20gJ0BhbGZyZXNjby9hZGYtY29yZSc7XG5pbXBvcnQgeyB0YXNrUHJlc2V0c0Nsb3VkRGVmYXVsdE1vZGVsIH0gZnJvbSAnLi4vbW9kZWxzL3Rhc2stcHJlc2V0LWNsb3VkLm1vZGVsJztcbmltcG9ydCB7IFRhc2tRdWVyeUNsb3VkUmVxdWVzdE1vZGVsIH0gZnJvbSAnLi4vbW9kZWxzL2ZpbHRlci1jbG91ZC1tb2RlbCc7XG5pbXBvcnQgeyBCZWhhdmlvclN1YmplY3QsIFN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IFRhc2tMaXN0Q2xvdWRTb3J0aW5nTW9kZWwgfSBmcm9tICcuLi9tb2RlbHMvdGFzay1saXN0LXNvcnRpbmcubW9kZWwnO1xuaW1wb3J0IHsgdGFrZVVudGlsIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgVGFza0Nsb3VkU2VydmljZSB9IGZyb20gJy4uLy4uL3NlcnZpY2VzL3Rhc2stY2xvdWQuc2VydmljZSc7XG5cbkBEaXJlY3RpdmUoKVxuLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOiBkaXJlY3RpdmUtY2xhc3Mtc3VmZml4XG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQmFzZVRhc2tMaXN0Q2xvdWRDb21wb25lbnQgZXh0ZW5kcyBEYXRhVGFibGVTY2hlbWEgaW1wbGVtZW50cyBPbkNoYW5nZXMsIEFmdGVyQ29udGVudEluaXQsIFBhZ2luYXRlZENvbXBvbmVudCwgT25EZXN0cm95LCBPbkluaXQge1xuXG4gICAgQENvbnRlbnRDaGlsZChDdXN0b21FbXB0eUNvbnRlbnRUZW1wbGF0ZURpcmVjdGl2ZSlcbiAgICBlbXB0eUN1c3RvbUNvbnRlbnQ6IEN1c3RvbUVtcHR5Q29udGVudFRlbXBsYXRlRGlyZWN0aXZlO1xuXG4gICAgLyoqIFRoZSBuYW1lIG9mIHRoZSBhcHBsaWNhdGlvbi4gKi9cbiAgICBASW5wdXQoKVxuICAgIGFwcE5hbWU6IHN0cmluZyA9ICcnO1xuXG4gICAgLyoqXG4gICAgICogUm93IHNlbGVjdGlvbiBtb2RlLiBDYW4gYmUgbm9uZSwgYHNpbmdsZWAgb3IgYG11bHRpcGxlYC4gRm9yIGBtdWx0aXBsZWAgbW9kZSxcbiAgICAgKiB5b3UgY2FuIHVzZSB0aGUgQ21kIChtYWNPUykgb3IgQ3RybCAoV2luKSBtb2RpZmllciBrZXkgdG8gdG9nZ2xlIHNlbGVjdGlvbiBmb3JcbiAgICAgKiBtdWx0aXBsZSByb3dzLlxuICAgICAqL1xuICAgIEBJbnB1dCgpXG4gICAgc2VsZWN0aW9uTW9kZTogc3RyaW5nID0gJ3NpbmdsZSc7IC8vIG5vbmV8c2luZ2xlfG11bHRpcGxlXG5cbiAgICAvKiogVG9nZ2xlcyBtdWx0aXBsZSByb3cgc2VsZWN0aW9uLCByZW5kZXJpbmcgYSBjaGVja2JveCBhdCB0aGUgYmVnaW5uaW5nIG9mIGVhY2ggcm93LiAqL1xuICAgIEBJbnB1dCgpXG4gICAgbXVsdGlzZWxlY3Q6IGJvb2xlYW4gPSBmYWxzZTtcblxuICAgIC8qKiBUb2dnbGVzIHRoZSBzdGlja3kgaGVhZGVyIG1vZGUuICovXG4gICAgQElucHV0KClcbiAgICBzdGlja3lIZWFkZXI6IGJvb2xlYW4gPSBmYWxzZTtcblxuICAgIC8qKlxuICAgICAqIFNwZWNpZmllcyBob3cgdGhlIHRhYmxlIHNob3VsZCBiZSBzb3J0ZWQuIFRoZSBwYXJhbWV0ZXJzIGFyZSBmb3IgQkUgc29ydGluZy5cbiAgICAgKi9cbiAgICBASW5wdXQoKVxuICAgIHNvcnRpbmc6IFRhc2tMaXN0Q2xvdWRTb3J0aW5nTW9kZWxbXTtcblxuICAgIC8qKiBUb2dnbGVzIHRoZSBkYXRhIGFjdGlvbnMgY29sdW1uLiAqL1xuICAgIEBJbnB1dCgpXG4gICAgc2hvd0FjdGlvbnM6IGJvb2xlYW4gPSBmYWxzZTtcblxuICAgIC8qKiBQb3NpdGlvbiBvZiB0aGUgYWN0aW9ucyBkcm9wZG93biBtZW51LiBDYW4gYmUgXCJsZWZ0XCIgb3IgXCJyaWdodFwiLiAqL1xuICAgIEBJbnB1dCgpXG4gICAgYWN0aW9uc1Bvc2l0aW9uOiBzdHJpbmcgPSAncmlnaHQnOyAvLyBsZWZ0fHJpZ2h0XG5cbiAgICAvKiogVG9nZ2xlcyBjdXN0b20gY29udGV4dCBtZW51IGZvciB0aGUgY29tcG9uZW50LiAqL1xuICAgIEBJbnB1dCgpXG4gICAgc2hvd0NvbnRleHRNZW51OiBib29sZWFuID0gZmFsc2U7XG5cbiAgICAvKiogRW1pdHRlZCBiZWZvcmUgdGhlIGNvbnRleHQgbWVudSBpcyBkaXNwbGF5ZWQgZm9yIGEgcm93LiAqL1xuICAgIEBPdXRwdXQoKVxuICAgIHNob3dSb3dDb250ZXh0TWVudSA9IG5ldyBFdmVudEVtaXR0ZXI8RGF0YUNlbGxFdmVudD4oKTtcblxuICAgIC8qKiBFbWl0dGVkIGJlZm9yZSB0aGUgYWN0aW9ucyBtZW51IGlzIGRpc3BsYXllZCBmb3IgYSByb3cuICovXG4gICAgQE91dHB1dCgpXG4gICAgc2hvd1Jvd0FjdGlvbnNNZW51ID0gbmV3IEV2ZW50RW1pdHRlcjxEYXRhQ2VsbEV2ZW50PigpO1xuXG4gICAgLyoqIEVtaXR0ZWQgd2hlbiB0aGUgdXNlciBleGVjdXRlcyBhIHJvdyBhY3Rpb24uICovXG4gICAgQE91dHB1dCgpXG4gICAgZXhlY3V0ZVJvd0FjdGlvbiA9IG5ldyBFdmVudEVtaXR0ZXI8RGF0YVJvd0FjdGlvbkV2ZW50PigpO1xuXG4gICAgLyoqIEVtaXR0ZWQgd2hlbiBhIHRhc2sgaW4gdGhlIGxpc3QgaXMgY2xpY2tlZCAqL1xuICAgIEBPdXRwdXQoKVxuICAgIHJvd0NsaWNrOiBFdmVudEVtaXR0ZXI8c3RyaW5nPiA9IG5ldyBFdmVudEVtaXR0ZXI8c3RyaW5nPigpO1xuXG4gICAgLyoqIEVtaXR0ZWQgd2hlbiByb3dzIGFyZSBzZWxlY3RlZC91bnNlbGVjdGVkICovXG4gICAgQE91dHB1dCgpXG4gICAgcm93c1NlbGVjdGVkOiBFdmVudEVtaXR0ZXI8YW55W10+ID0gbmV3IEV2ZW50RW1pdHRlcjxhbnlbXT4oKTtcblxuICAgIC8qKiBFbWl0dGVkIHdoZW4gdGhlIHRhc2sgbGlzdCBpcyBsb2FkZWQgKi9cbiAgICBAT3V0cHV0KClcbiAgICBzdWNjZXNzOiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xuXG4gICAgLyoqIEVtaXR0ZWQgd2hlbiBhbiBlcnJvciBvY2N1cnMuICovXG4gICAgQE91dHB1dCgpXG4gICAgZXJyb3I6IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XG5cbiAgICBwYWdpbmF0aW9uOiBCZWhhdmlvclN1YmplY3Q8UGFnaW5hdGlvbk1vZGVsPjtcblxuICAgIHJlcXVlc3ROb2RlOiBUYXNrUXVlcnlDbG91ZFJlcXVlc3RNb2RlbDtcbiAgICByb3dzOiBhbnlbXSA9IFtdO1xuICAgIHNpemU6IG51bWJlcjtcbiAgICBza2lwQ291bnQ6IG51bWJlciA9IDA7XG4gICAgY3VycmVudEluc3RhbmNlSWQ6IGFueTtcbiAgICBpc0xvYWRpbmcgPSB0cnVlO1xuICAgIHNlbGVjdGVkSW5zdGFuY2VzOiBhbnlbXTtcbiAgICBmb3JtYXR0ZWRTb3J0aW5nOiBhbnlbXTtcbiAgICBwcml2YXRlIGRlZmF1bHRTb3J0aW5nID0geyBrZXk6ICdzdGFydERhdGUnLCBkaXJlY3Rpb246ICdkZXNjJyB9O1xuICAgIGJvdW5kUmVwbGFjZVByaW9yaXR5VmFsdWVzOiAocm93OiBEYXRhUm93LCBjb2w6IERhdGFDb2x1bW4pID0+IGFueTtcblxuICAgIHByaXZhdGUgb25EZXN0cm95JCA9IG5ldyBTdWJqZWN0PGJvb2xlYW4+KCk7XG5cbiAgICBjb25zdHJ1Y3RvcihhcHBDb25maWdTZXJ2aWNlOiBBcHBDb25maWdTZXJ2aWNlLFxuICAgICAgICAgICAgICAgIHByaXZhdGUgdGFza0Nsb3VkU2VydmljZTogVGFza0Nsb3VkU2VydmljZSxcbiAgICAgICAgICAgICAgICBwcml2YXRlIHVzZXJQcmVmZXJlbmNlczogVXNlclByZWZlcmVuY2VzU2VydmljZSxcbiAgICAgICAgICAgICAgICBwcmVzZXRLZXk6IHN0cmluZykge1xuICAgICAgICBzdXBlcihhcHBDb25maWdTZXJ2aWNlLCBwcmVzZXRLZXksIHRhc2tQcmVzZXRzQ2xvdWREZWZhdWx0TW9kZWwpO1xuICAgICAgICB0aGlzLnNpemUgPSB1c2VyUHJlZmVyZW5jZXMucGFnaW5hdGlvblNpemU7XG5cbiAgICAgICAgdGhpcy5wYWdpbmF0aW9uID0gbmV3IEJlaGF2aW9yU3ViamVjdDxQYWdpbmF0aW9uTW9kZWw+KDxQYWdpbmF0aW9uTW9kZWw+IHtcbiAgICAgICAgICAgIG1heEl0ZW1zOiB0aGlzLnNpemUsXG4gICAgICAgICAgICBza2lwQ291bnQ6IDAsXG4gICAgICAgICAgICB0b3RhbEl0ZW1zOiAwXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuYm91bmRSZXBsYWNlUHJpb3JpdHlWYWx1ZXMgPSB0aGlzLnJlcGxhY2VQcmlvcml0eVZhbHVlcy5iaW5kKHRoaXMpO1xuICAgIH1cblxuICAgIG5nT25Jbml0KCkge1xuICAgICAgICB0aGlzLnVzZXJQcmVmZXJlbmNlc1xuICAgICAgICAgICAgLnNlbGVjdChVc2VyUHJlZmVyZW5jZVZhbHVlcy5QYWdpbmF0aW9uU2l6ZSlcbiAgICAgICAgICAgIC5waXBlKHRha2VVbnRpbCh0aGlzLm9uRGVzdHJveSQpKVxuICAgICAgICAgICAgLnN1YnNjcmliZShwYWdlU2l6ZSA9PiB0aGlzLnNpemUgPSBwYWdlU2l6ZSk7XG4gICAgfVxuXG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcykge1xuICAgICAgICBpZiAoY2hhbmdlc1snc29ydGluZyddKSB7XG4gICAgICAgICAgICB0aGlzLmZvcm1hdFNvcnRpbmcoY2hhbmdlc1snc29ydGluZyddLmN1cnJlbnRWYWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5yZWxvYWQoKTtcbiAgICB9XG5cbiAgICBuZ09uRGVzdHJveSgpIHtcbiAgICAgICAgdGhpcy5vbkRlc3Ryb3kkLm5leHQodHJ1ZSk7XG4gICAgICAgIHRoaXMub25EZXN0cm95JC5jb21wbGV0ZSgpO1xuICAgIH1cblxuICAgIG5nQWZ0ZXJDb250ZW50SW5pdCgpIHtcbiAgICAgICAgdGhpcy5jcmVhdGVEYXRhdGFibGVTY2hlbWEoKTtcbiAgICB9XG5cbiAgICByZWxvYWQoKSB7XG4gICAgICAgIHRoaXMucmVxdWVzdE5vZGUgPSB0aGlzLmNyZWF0ZVJlcXVlc3ROb2RlKCk7XG4gICAgICAgIGlmICh0aGlzLnJlcXVlc3ROb2RlLmFwcE5hbWUgfHwgdGhpcy5yZXF1ZXN0Tm9kZS5hcHBOYW1lID09PSAnJykge1xuICAgICAgICAgICAgdGhpcy5sb2FkKHRoaXMucmVxdWVzdE5vZGUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5yb3dzID0gW107XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpc0xpc3RFbXB0eSgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuICF0aGlzLnJvd3MgfHwgdGhpcy5yb3dzLmxlbmd0aCA9PT0gMDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXNldHMgdGhlIHBhZ2luYXRpb24gdmFsdWVzXG4gICAgICovXG4gICAgcmVzZXRQYWdpbmF0aW9uKCkge1xuICAgICAgICB0aGlzLnNraXBDb3VudCA9IDA7XG4gICAgICAgIHRoaXMuc2l6ZSA9IHRoaXMudXNlclByZWZlcmVuY2VzLnBhZ2luYXRpb25TaXplO1xuICAgICAgICB0aGlzLnBhZ2luYXRpb24ubmV4dCh7XG4gICAgICAgICAgICBza2lwQ291bnQ6IDAsXG4gICAgICAgICAgICBtYXhJdGVtczogdGhpcy5zaXplXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlc2V0cyB0aGUgcGFnaW5hdGlvbiB2YWx1ZXMgYW5kXG4gICAgICogUmVsb2FkcyB0aGUgdGFzayBsaXN0XG4gICAgICogQHBhcmFtIHBhZ2luYXRpb24gUGFnaW5hdGlvbiB2YWx1ZXMgdG8gYmUgc2V0XG4gICAgICovXG4gICAgdXBkYXRlUGFnaW5hdGlvbihwYWdpbmF0aW9uOiBQYWdpbmF0aW9uTW9kZWwpIHtcbiAgICAgICAgdGhpcy5zaXplID0gcGFnaW5hdGlvbi5tYXhJdGVtcztcbiAgICAgICAgdGhpcy5za2lwQ291bnQgPSBwYWdpbmF0aW9uLnNraXBDb3VudDtcbiAgICAgICAgdGhpcy5wYWdpbmF0aW9uLm5leHQocGFnaW5hdGlvbik7XG4gICAgICAgIHRoaXMucmVsb2FkKCk7XG4gICAgfVxuXG4gICAgb25Tb3J0aW5nQ2hhbmdlZChldmVudDogQ3VzdG9tRXZlbnQpIHtcbiAgICAgICAgdGhpcy5zZXRTb3J0aW5nKGV2ZW50LmRldGFpbCk7XG4gICAgICAgIHRoaXMuZm9ybWF0U29ydGluZyh0aGlzLnNvcnRpbmcpO1xuICAgICAgICB0aGlzLnJlbG9hZCgpO1xuICAgIH1cblxuICAgIG9uUm93Q2xpY2soaXRlbTogRGF0YVJvd0V2ZW50KSB7XG4gICAgICAgIHRoaXMuY3VycmVudEluc3RhbmNlSWQgPSBpdGVtLnZhbHVlLmdldFZhbHVlKCdpZCcpO1xuICAgICAgICB0aGlzLnJvd0NsaWNrLmVtaXQodGhpcy5jdXJyZW50SW5zdGFuY2VJZCk7XG4gICAgfVxuXG4gICAgb25Sb3dTZWxlY3QoZXZlbnQ6IEN1c3RvbUV2ZW50KSB7XG4gICAgICAgIHRoaXMuc2VsZWN0ZWRJbnN0YW5jZXMgPSBbLi4uZXZlbnQuZGV0YWlsLnNlbGVjdGlvbl07XG4gICAgICAgIHRoaXMucm93c1NlbGVjdGVkLmVtaXQodGhpcy5zZWxlY3RlZEluc3RhbmNlcyk7XG4gICAgfVxuXG4gICAgb25Sb3dVbnNlbGVjdChldmVudDogQ3VzdG9tRXZlbnQpIHtcbiAgICAgICAgdGhpcy5zZWxlY3RlZEluc3RhbmNlcyA9IFsuLi5ldmVudC5kZXRhaWwuc2VsZWN0aW9uXTtcbiAgICAgICAgdGhpcy5yb3dzU2VsZWN0ZWQuZW1pdCh0aGlzLnNlbGVjdGVkSW5zdGFuY2VzKTtcbiAgICB9XG5cbiAgICBvblJvd0tleVVwKGV2ZW50OiBDdXN0b21FdmVudCkge1xuICAgICAgICBpZiAoZXZlbnQuZGV0YWlsLmtleWJvYXJkRXZlbnQua2V5ID09PSAnRW50ZXInKSB7XG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgdGhpcy5jdXJyZW50SW5zdGFuY2VJZCA9IGV2ZW50LmRldGFpbC5yb3cuZ2V0VmFsdWUoJ2lkJyk7XG4gICAgICAgICAgICB0aGlzLnJvd0NsaWNrLmVtaXQodGhpcy5jdXJyZW50SW5zdGFuY2VJZCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBvblNob3dSb3dBY3Rpb25zTWVudShldmVudDogRGF0YUNlbGxFdmVudCkge1xuICAgICAgICB0aGlzLnNob3dSb3dBY3Rpb25zTWVudS5lbWl0KGV2ZW50KTtcbiAgICB9XG5cbiAgICBvblNob3dSb3dDb250ZXh0TWVudShldmVudDogRGF0YUNlbGxFdmVudCkge1xuICAgICAgICB0aGlzLnNob3dSb3dDb250ZXh0TWVudS5lbWl0KGV2ZW50KTtcbiAgICB9XG5cbiAgICBvbkV4ZWN1dGVSb3dBY3Rpb24ocm93OiBEYXRhUm93QWN0aW9uRXZlbnQpIHtcbiAgICAgICAgdGhpcy5leGVjdXRlUm93QWN0aW9uLmVtaXQocm93KTtcbiAgICB9XG5cbiAgICBzZXRTb3J0aW5nKHNvcnREZXRhaWwpIHtcbiAgICAgICAgY29uc3Qgc29ydGluZyA9IHNvcnREZXRhaWwgPyB7XG4gICAgICAgICAgICBvcmRlckJ5OiBzb3J0RGV0YWlsLmtleSxcbiAgICAgICAgICAgIGRpcmVjdGlvbjogc29ydERldGFpbC5kaXJlY3Rpb24udG9VcHBlckNhc2UoKVxuICAgICAgICB9IDogeyAuLi4gdGhpcy5kZWZhdWx0U29ydGluZyB9O1xuICAgICAgICB0aGlzLnNvcnRpbmcgPSBbbmV3IFRhc2tMaXN0Q2xvdWRTb3J0aW5nTW9kZWwoc29ydGluZyldO1xuICAgIH1cblxuICAgIGZvcm1hdFNvcnRpbmcoc29ydGluZzogVGFza0xpc3RDbG91ZFNvcnRpbmdNb2RlbFtdKSB7XG4gICAgICAgIHRoaXMuZm9ybWF0dGVkU29ydGluZyA9IHRoaXMuaXNWYWxpZFNvcnRpbmcoc29ydGluZykgPyBbXG4gICAgICAgICAgICBzb3J0aW5nWzBdLm9yZGVyQnksXG4gICAgICAgICAgICBzb3J0aW5nWzBdLmRpcmVjdGlvbi50b0xvY2FsZUxvd2VyQ2FzZSgpXG4gICAgICAgIF0gOiBudWxsO1xuICAgIH1cblxuICAgIGlzVmFsaWRTb3J0aW5nKHNvcnRpbmc6IFRhc2tMaXN0Q2xvdWRTb3J0aW5nTW9kZWxbXSkge1xuICAgICAgICByZXR1cm4gc29ydGluZyAmJiBzb3J0aW5nLmxlbmd0aCAmJiBzb3J0aW5nWzBdLm9yZGVyQnkgJiYgc29ydGluZ1swXS5kaXJlY3Rpb247XG4gICAgfVxuXG4gICAgcmVwbGFjZVByaW9yaXR5VmFsdWVzKHJvdzogRGF0YVJvdywgY29sdW1uOiBEYXRhQ29sdW1uKSB7XG4gICAgICAgIHJldHVybiBjb2x1bW4ua2V5LnNwbGl0KCcuJykucmVkdWNlKChzb3VyY2UsIGtleSkgPT4ge1xuICAgICAgICAgICAgaWYgKGtleSA9PT0gJ3ByaW9yaXR5JyAmJiBzb3VyY2UgJiYgdHlwZW9mKHNvdXJjZVtrZXldKSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc291cmNlW2tleV0gPSB0aGlzLnRhc2tDbG91ZFNlcnZpY2UuZ2V0UHJpb3JpdHlMYWJlbChzb3VyY2Vba2V5XSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gc291cmNlICYmIHR5cGVvZihzb3VyY2UpID09PSAnb2JqZWN0JyA/IHNvdXJjZVtrZXldIDogdW5kZWZpbmVkO1xuICAgICAgICB9LCByb3cub2JqKTtcbiAgICB9XG5cbiAgICBhYnN0cmFjdCBsb2FkKHJlcXVlc3ROb2RlKTtcbiAgICBhYnN0cmFjdCBjcmVhdGVSZXF1ZXN0Tm9kZSgpO1xufVxuIl19