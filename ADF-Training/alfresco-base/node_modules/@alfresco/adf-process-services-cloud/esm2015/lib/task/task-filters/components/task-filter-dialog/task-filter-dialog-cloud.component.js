/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, Inject } from '@angular/core';
import { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';
import { FormBuilder, Validators } from '@angular/forms';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/forms';
import * as ɵngcc2 from '@angular/material/dialog';
import * as ɵngcc3 from '@angular/material/card';
import * as ɵngcc4 from '@angular/material/form-field';
import * as ɵngcc5 from '@angular/flex-layout/flex';
import * as ɵngcc6 from '@angular/material/input';
import * as ɵngcc7 from '@angular/material/button';
import * as ɵngcc8 from '@ngx-translate/core';
export class TaskFilterDialogCloudComponent {
    constructor(fb, dialogRef, data) {
        this.fb = fb;
        this.dialogRef = dialogRef;
        this.data = data;
        this.defaultIcon = 'inbox';
    }
    ngOnInit() {
        this.filterForm = this.fb.group({
            name: [this.data.name, Validators.required]
        });
    }
    onSaveClick() {
        this.dialogRef.close({
            action: TaskFilterDialogCloudComponent.ACTION_SAVE,
            icon: this.defaultIcon,
            name: this.nameController.value
        });
    }
    onCancelClick() {
        this.dialogRef.close();
    }
    get nameController() {
        return this.filterForm.get('name');
    }
    isValid() {
        return this.filterForm.valid;
    }
}
TaskFilterDialogCloudComponent.ɵfac = function TaskFilterDialogCloudComponent_Factory(t) { return new (t || TaskFilterDialogCloudComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FormBuilder), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.MatDialogRef), ɵngcc0.ɵɵdirectiveInject(MAT_DIALOG_DATA)); };
TaskFilterDialogCloudComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: TaskFilterDialogCloudComponent, selectors: [["adf-cloud-task-filter-dialog"]], decls: 17, vars: 15, consts: [[1, "adf-task-filter-dialog"], ["mat-dialog-title", "", "id", "adf-task-filter-dialog-title"], [3, "formGroup"], ["fxFlex", "", 3, "floatLabel"], ["matInput", "", "formControlName", "name", "id", "adf-filter-name-id", 3, "placeholder"], ["fxLayout", "row", "fxLayoutAlign", "end end"], ["mat-button", "", "id", "adf-save-button-id", 3, "disabled", "click"], ["mat-button", "", "id", "adf-cancel-button-id", 3, "click"]], template: function TaskFilterDialogCloudComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "span", 1);
        ɵngcc0.ɵɵtext(2);
        ɵngcc0.ɵɵpipe(3, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(4, "mat-card");
        ɵngcc0.ɵɵelementStart(5, "mat-card-content");
        ɵngcc0.ɵɵelementStart(6, "form", 2);
        ɵngcc0.ɵɵelementStart(7, "mat-form-field", 3);
        ɵngcc0.ɵɵelement(8, "input", 4);
        ɵngcc0.ɵɵpipe(9, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(10, "mat-card-actions", 5);
        ɵngcc0.ɵɵelementStart(11, "button", 6);
        ɵngcc0.ɵɵlistener("click", function TaskFilterDialogCloudComponent_Template_button_click_11_listener() { return ctx.onSaveClick(); });
        ɵngcc0.ɵɵtext(12);
        ɵngcc0.ɵɵpipe(13, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(14, "button", 7);
        ɵngcc0.ɵɵlistener("click", function TaskFilterDialogCloudComponent_Template_button_click_14_listener() { return ctx.onCancelClick(); });
        ɵngcc0.ɵɵtext(15);
        ɵngcc0.ɵɵpipe(16, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(3, 7, "ADF_CLOUD_EDIT_TASK_FILTER.DIALOG.TITLE"), " ");
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵproperty("formGroup", ctx.filterForm);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("floatLabel", "auto");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵpropertyInterpolate("placeholder", ɵngcc0.ɵɵpipeBind1(9, 9, "ADF_CLOUD_EDIT_TASK_FILTER.FILTER_NAME"));
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("disabled", !ctx.isValid());
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(13, 11, "ADF_CLOUD_EDIT_TASK_FILTER.DIALOG.SAVE"), " ");
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(16, 13, "ADF_CLOUD_EDIT_TASK_FILTER.DIALOG.CANCEL"), " ");
    } }, directives: [ɵngcc2.MatDialogTitle, ɵngcc3.MatCard, ɵngcc3.MatCardContent, ɵngcc1.ɵangular_packages_forms_forms_y, ɵngcc1.NgControlStatusGroup, ɵngcc1.FormGroupDirective, ɵngcc4.MatFormField, ɵngcc5.DefaultFlexDirective, ɵngcc6.MatInput, ɵngcc1.DefaultValueAccessor, ɵngcc1.NgControlStatus, ɵngcc1.FormControlName, ɵngcc3.MatCardActions, ɵngcc5.DefaultLayoutDirective, ɵngcc5.DefaultLayoutAlignDirective, ɵngcc7.MatButton], pipes: [ɵngcc8.TranslatePipe], styles: [".adf-task-filter-dialog[_ngcontent-%COMP%]   .mat-card[_ngcontent-%COMP%], .adf-task-filter-dialog[_ngcontent-%COMP%]   .mat-card-content[_ngcontent-%COMP%]{box-shadow:none;padding:0}"] });
TaskFilterDialogCloudComponent.ACTION_SAVE = 'SAVE';
TaskFilterDialogCloudComponent.ctorParameters = () => [
    { type: FormBuilder },
    { type: MatDialogRef },
    { type: undefined, decorators: [{ type: Inject, args: [MAT_DIALOG_DATA,] }] }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TaskFilterDialogCloudComponent, [{
        type: Component,
        args: [{
                selector: 'adf-cloud-task-filter-dialog',
                template: "<div class=\"adf-task-filter-dialog\">\n    <span mat-dialog-title id=\"adf-task-filter-dialog-title\">\n         {{ 'ADF_CLOUD_EDIT_TASK_FILTER.DIALOG.TITLE' | translate}}\n    </span>\n    <mat-card>\n        <mat-card-content>\n        <form [formGroup]=\"filterForm\">\n            <mat-form-field fxFlex [floatLabel]=\"'auto'\">\n                <input matInput placeholder=\"{{ 'ADF_CLOUD_EDIT_TASK_FILTER.FILTER_NAME' | translate }}\" formControlName=\"name\" id=\"adf-filter-name-id\">\n            </mat-form-field>\n        </form>\n        </mat-card-content>\n        <mat-card-actions fxLayout=\"row\" fxLayoutAlign=\"end end\">\n            <button mat-button (click)=\"onSaveClick()\" id=\"adf-save-button-id\" [disabled]=\"!isValid()\">\n                {{ 'ADF_CLOUD_EDIT_TASK_FILTER.DIALOG.SAVE' | translate}}\n            </button>\n            <button mat-button (click)=\"onCancelClick()\" id=\"adf-cancel-button-id\">\n               {{ 'ADF_CLOUD_EDIT_TASK_FILTER.DIALOG.CANCEL' | translate}}\n            </button>\n        </mat-card-actions>\n    </mat-card>\n</div>\n",
                styles: [".adf-task-filter-dialog .mat-card,.adf-task-filter-dialog .mat-card-content{box-shadow:none;padding:0}"]
            }]
    }], function () { return [{ type: ɵngcc1.FormBuilder }, { type: ɵngcc2.MatDialogRef }, { type: undefined, decorators: [{
                type: Inject,
                args: [MAT_DIALOG_DATA]
            }] }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFzay1maWx0ZXItZGlhbG9nLWNsb3VkLmNvbXBvbmVudC5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vaG9tZS90cmF2aXMvYnVpbGQvQWxmcmVzY28vYWxmcmVzY28tbmcyLWNvbXBvbmVudHMvbGliL3Byb2Nlc3Mtc2VydmljZXMtY2xvdWQvc3JjL2xpYi90YXNrL3Rhc2stZmlsdGVycy9jb21wb25lbnRzL3Rhc2stZmlsdGVyLWRpYWxvZy90YXNrLWZpbHRlci1kaWFsb2ctY2xvdWQuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFFSCxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBVSxNQUFNLGVBQWUsQ0FBQztBQUMxRCxPQUFPLEVBQUUsZUFBZSxFQUFFLFlBQVksRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQ3pFLE9BQU8sRUFBRSxXQUFXLEVBQThCLFVBQVUsRUFBRSxNQUFNLGdCQUFnQixDQUFDOzs7Ozs7Ozs7O0FBT3JGLE1BQU0sT0FBTyw4QkFBOEI7QUFBRyxJQU8xQyxZQUNZLEVBQWUsRUFDaEIsU0FBdUQsRUFDOUIsSUFBSTtBQUM1QyxRQUhnQixPQUFFLEdBQUYsRUFBRSxDQUFhO0FBQUMsUUFDakIsY0FBUyxHQUFULFNBQVMsQ0FBOEM7QUFBQyxRQUMvQixTQUFJLEdBQUosSUFBSSxDQUFBO0FBQUMsUUFQekMsZ0JBQVcsR0FBRyxPQUFPLENBQUM7QUFDMUIsSUFPSSxDQUFDO0FBQ0wsSUFDSSxRQUFRO0FBQ1osUUFBUSxJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDO0FBQ3hDLFlBQVksSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsVUFBVSxDQUFDLFFBQVEsQ0FBQztBQUN2RCxTQUFTLENBQUMsQ0FBQztBQUNYLElBQUksQ0FBQztBQUNMLElBQ0ksV0FBVztBQUNmLFFBQVEsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUM7QUFDN0IsWUFBWSxNQUFNLEVBQUUsOEJBQThCLENBQUMsV0FBVztBQUM5RCxZQUFZLElBQUksRUFBRSxJQUFJLENBQUMsV0FBVztBQUNsQyxZQUFZLElBQUksRUFBRSxJQUFJLENBQUMsY0FBYyxDQUFDLEtBQUs7QUFDM0MsU0FBUyxDQUFDLENBQUM7QUFDWCxJQUFJLENBQUM7QUFDTCxJQUNJLGFBQWE7QUFDakIsUUFBUSxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQy9CLElBQUksQ0FBQztBQUNMLElBQ0ksSUFBSSxjQUFjO0FBQUssUUFDbkIsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUMzQyxJQUFJLENBQUM7QUFDTCxJQUNJLE9BQU87QUFBSyxRQUNSLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUM7QUFDckMsSUFBSSxDQUFDO0FBQ0w7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7dXBCQUFDO0FBcENpQiwwQ0FBVyxHQUFHLE1BQU0sQ0FBQyxBQUZsQztBQUFDO0VBTEwsU0FBUyxTQUFDLHBCQUttRCxZQVByRCxXQUFXO1dBR2xCLFFBQVEsRUFBRSxyQkFIWSxZQURFLFlBQVk7dUJBSUksa0JBQ3hDLHpDQUx3Qyw0Q0FrQmpDLE1BQU0sU0FBQyxlQUFlO0FBQVE7Ozs7O3kyQkFibUIsa0pBRXpEOzs7Ozs7a0NBV3dDO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBDb21wb25lbnQsIEluamVjdCwgT25Jbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBNQVRfRElBTE9HX0RBVEEsIE1hdERpYWxvZ1JlZiB9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsL2RpYWxvZyc7XG5pbXBvcnQgeyBGb3JtQnVpbGRlciwgRm9ybUdyb3VwLCBBYnN0cmFjdENvbnRyb2wsIFZhbGlkYXRvcnMgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2FkZi1jbG91ZC10YXNrLWZpbHRlci1kaWFsb2cnLFxuICB0ZW1wbGF0ZVVybDogJy4vdGFzay1maWx0ZXItZGlhbG9nLWNsb3VkLmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVVcmxzOiBbJy4vdGFzay1maWx0ZXItZGlhbG9nLWNsb3VkLmNvbXBvbmVudC5zY3NzJ11cbn0pXG5leHBvcnQgY2xhc3MgVGFza0ZpbHRlckRpYWxvZ0Nsb3VkQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcblxuICAgIHB1YmxpYyBzdGF0aWMgQUNUSU9OX1NBVkUgPSAnU0FWRSc7XG4gICAgZGVmYXVsdEljb24gPSAnaW5ib3gnO1xuXG4gICAgZmlsdGVyRm9ybTogRm9ybUdyb3VwO1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHByaXZhdGUgZmI6IEZvcm1CdWlsZGVyLFxuICAgICAgICBwdWJsaWMgZGlhbG9nUmVmOiBNYXREaWFsb2dSZWY8VGFza0ZpbHRlckRpYWxvZ0Nsb3VkQ29tcG9uZW50PixcbiAgICAgICAgQEluamVjdChNQVRfRElBTE9HX0RBVEEpIHB1YmxpYyBkYXRhKSB7XG4gICAgfVxuXG4gICAgbmdPbkluaXQoKSB7XG4gICAgICAgIHRoaXMuZmlsdGVyRm9ybSA9IHRoaXMuZmIuZ3JvdXAoe1xuICAgICAgICAgICAgbmFtZTogW3RoaXMuZGF0YS5uYW1lLCBWYWxpZGF0b3JzLnJlcXVpcmVkXVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBvblNhdmVDbGljaygpIHtcbiAgICAgICAgdGhpcy5kaWFsb2dSZWYuY2xvc2Uoe1xuICAgICAgICAgICAgYWN0aW9uOiBUYXNrRmlsdGVyRGlhbG9nQ2xvdWRDb21wb25lbnQuQUNUSU9OX1NBVkUsXG4gICAgICAgICAgICBpY29uOiB0aGlzLmRlZmF1bHRJY29uLFxuICAgICAgICAgICAgbmFtZTogdGhpcy5uYW1lQ29udHJvbGxlci52YWx1ZVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBvbkNhbmNlbENsaWNrKCkge1xuICAgICAgICB0aGlzLmRpYWxvZ1JlZi5jbG9zZSgpO1xuICAgIH1cblxuICAgIGdldCBuYW1lQ29udHJvbGxlcigpOiBBYnN0cmFjdENvbnRyb2wge1xuICAgICAgICByZXR1cm4gdGhpcy5maWx0ZXJGb3JtLmdldCgnbmFtZScpO1xuICAgIH1cblxuICAgIGlzVmFsaWQoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLmZpbHRlckZvcm0udmFsaWQ7XG4gICAgfVxufVxuIl19