/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, EventEmitter, Output, ViewEncapsulation } from '@angular/core';
import { TaskFilterCloudService } from '../services/task-filter-cloud.service';
import { AppConfigService, TranslationService } from '@alfresco/adf-core';
import { debounceTime, takeUntil } from 'rxjs/operators';
import { BaseTaskFiltersCloudComponent } from './base-task-filters-cloud.component';
export class TaskFiltersCloudComponent extends BaseTaskFiltersCloudComponent {
    constructor(taskFilterCloudService, translationService, appConfigService) {
        super();
        this.taskFilterCloudService = taskFilterCloudService;
        this.translationService = translationService;
        this.appConfigService = appConfigService;
        this.filterSelected = new EventEmitter();
        this.filterClicked = new EventEmitter();
        this.filterCounterUpdated = new EventEmitter();
        this.filters = [];
    }
    ngOnInit() {
        this.enableNotifications = this.appConfigService.get('notifications', true);
        this.initFilterCounterNotifications();
        this.getFilters(this.appName);
    }
    ngOnChanges(changes) {
        const appName = changes['appName'];
        const filter = changes['filterParam'];
        if (appName && appName.currentValue !== appName.previousValue) {
            this.getFilters(appName.currentValue);
        }
        else if (filter && filter.currentValue !== filter.previousValue) {
            this.selectFilterAndEmit(filter.currentValue);
        }
    }
    getFilters(appName) {
        this.filters$ = this.taskFilterCloudService.getTaskListFilters(appName);
        this.filters$.pipe(takeUntil(this.onDestroy$)).subscribe((res) => {
            this.resetFilter();
            this.filters = res || [];
            this.selectFilterAndEmit(this.filterParam);
            this.updateFilterCounters();
            this.success.emit(res);
        }, (err) => {
            this.error.emit(err);
        });
    }
    updateFilterCounters() {
        this.filters.forEach((filter) => this.updateFilterCounter(filter));
    }
    updateFilterCounter(filter) {
        if (filter === null || filter === void 0 ? void 0 : filter.showCounter) {
            this.counters$[filter.key] = this.taskFilterCloudService.getTaskFilterCounter(filter);
        }
    }
    initFilterCounterNotifications() {
        if (this.appName && this.enableNotifications) {
            this.taskFilterCloudService.getTaskNotificationSubscription(this.appName)
                .pipe(debounceTime(3000))
                .subscribe((result) => {
                result.map((taskEvent) => {
                    this.checkFilterCounter(taskEvent.entity);
                });
                if (this.updatedCounters.length) {
                    this.updateFilterCounters();
                    this.filterCounterUpdated.emit(result);
                }
            });
        }
    }
    checkFilterCounter(filterNotification) {
        this.filters.map((filter) => {
            if (this.isFilterPresent(filter, filterNotification)) {
                this.addToUpdatedCounters(filter.key);
            }
        });
    }
    isFilterPresent(filter, filterNotification) {
        return filter.status === filterNotification.status
            && (filter.assignee === filterNotification.assignee || filterNotification.assignee === undefined);
    }
    selectFilter(paramFilter) {
        if (paramFilter) {
            this.currentFilter = this.filters.find((filter, index) => paramFilter.index === index ||
                paramFilter.key === filter.key ||
                paramFilter.id === filter.id ||
                (paramFilter.name &&
                    (paramFilter.name.toLocaleLowerCase() === this.translationService.instant(filter.name).toLocaleLowerCase())));
        }
    }
    selectFilterAndEmit(newParamFilter) {
        if (newParamFilter) {
            this.selectFilter(newParamFilter);
            if (this.currentFilter) {
                this.resetFilterCounter(this.currentFilter.key);
                this.filterSelected.emit(this.currentFilter);
            }
        }
        else {
            this.currentFilter = undefined;
        }
    }
    onFilterClick(filter) {
        if (filter) {
            this.selectFilter(filter);
            this.updateFilterCounter(this.currentFilter);
            this.filterClicked.emit(this.currentFilter);
        }
        else {
            this.currentFilter = undefined;
        }
    }
    selectDefaultTaskFilter() {
        if (!this.isFilterListEmpty()) {
            this.currentFilter = this.filters[0];
        }
    }
    isFilterListEmpty() {
        return this.filters === undefined || (this.filters && this.filters.length === 0);
    }
    resetFilter() {
        this.filters = [];
        this.currentFilter = undefined;
    }
}
TaskFiltersCloudComponent.decorators = [
    { type: Component, args: [{
                selector: 'adf-cloud-task-filters',
                template: "<ng-container *ngIf=\"filters$ | async as filterList; else loading\">\n    <div *ngFor=\"let filter of filterList\"\n         class=\"adf-task-filters__entry\">\n        <button (click)=\"onFilterClick(filter)\"\n                [attr.aria-label]=\"filter.name | translate\"\n                [id]=\"filter.id\"\n                [attr.data-automation-id]=\"filter.key + '_filter'\"\n                mat-button\n                [class.adf-active]=\"currentFilter === filter\"\n                class=\"adf-filter-action-button adf-full-width\"\n                fxLayout=\"row\"\n                fxLayoutAlign=\"space-between center\">\n            <adf-icon data-automation-id=\"adf-filter-icon\"\n                      *ngIf=\"showIcons\"\n                      [value]=\"filter.icon\"></adf-icon>\n            <span data-automation-id=\"adf-filter-label\"\n                  class=\"adf-filter-action-button__label\">{{ filter.name | translate }}</span>\n        </button>\n        <span *ngIf=\"counters$[filter.key]\"\n              [attr.data-automation-id]=\"filter.key + '_filter-counter'\"\n              class=\"adf-filter-action-button__counter\"\n              [class.adf-active]=wasFilterUpdated(filter.key)>\n            {{ counters$[filter.key] | async }}\n        </span>\n    </div>\n</ng-container>\n<ng-template #loading>\n    <ng-container>\n        <div class=\"adf-app-list-spinner\">\n            <mat-spinner></mat-spinner>\n        </div>\n    </ng-container>\n</ng-template>\n",
                encapsulation: ViewEncapsulation.None,
                styles: [".adf-task-filters__entry{display:flex;font-size:14px!important;font-weight:700;height:24px;opacity:1;padding:12px 0!important;width:100%}.adf-task-filters__entry .adf-full-width{display:flex;width:100%}.adf-task-filters__entry .adf-filter-action-button{cursor:pointer;opacity:.54;padding:16px}.adf-task-filters__entry .adf-filter-action-button .adf-filter-action-button__label{margin:0 8px!important;padding-left:20px}.adf-task-filters__entry .adf-filter-action-button__counter{margin-left:10px;margin-top:6px;opacity:.54;padding:0 5px}.adf-task-filters__entry .adf-filter-action-button__counter.adf-active{background-color:var(--theme-accent-color);border-radius:15px;color:var(--theme-colors-mag-grey-light);font-size:smaller;margin-left:8px;margin-top:5px;padding:0 5px}.adf-task-filters__entry:hover{color:var(--theme-primary-color)}.adf-task-filters__entry:hover .adf-filter-action-button,.adf-task-filters__entry:hover .adf-filter-action-button__counter{opacity:1}.adf-task-filters__entry .adf-active{color:var(--theme-primary-color);opacity:1}"]
            },] }
];
TaskFiltersCloudComponent.ctorParameters = () => [
    { type: TaskFilterCloudService },
    { type: TranslationService },
    { type: AppConfigService }
];
TaskFiltersCloudComponent.propDecorators = {
    filterSelected: [{ type: Output }],
    filterClicked: [{ type: Output }],
    filterCounterUpdated: [{ type: Output }]
};
//# sourceMappingURL=data:application/json;base64,