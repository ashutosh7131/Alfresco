/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { EventEmitter, Input, Output, Directive } from '@angular/core';
import { Subject } from 'rxjs';
import * as ɵngcc0 from '@angular/core';
export class BaseTaskFiltersCloudComponent {
    constructor() {
        this.appName = '';
        this.showIcons = false;
        this.success = new EventEmitter();
        this.error = new EventEmitter();
        this.counters$ = {};
        this.updatedCounters = [];
        this.onDestroy$ = new Subject();
    }
    ngOnDestroy() {
        this.onDestroy$.next(true);
        this.onDestroy$.complete();
    }
    wasFilterUpdated(filterKey) {
        return this.updatedCounters.includes(filterKey);
    }
    addToUpdatedCounters(filterKey) {
        if (!this.updatedCounters.includes(filterKey)) {
            this.updatedCounters.push(filterKey);
        }
    }
    resetFilterCounter(filterKey) {
        const filterIndex = this.updatedCounters.indexOf(filterKey);
        if (filterIndex > -1) {
            this.updatedCounters.splice(filterIndex, 1);
        }
    }
}
BaseTaskFiltersCloudComponent.ɵfac = function BaseTaskFiltersCloudComponent_Factory(t) { return new (t || BaseTaskFiltersCloudComponent)(); };
BaseTaskFiltersCloudComponent.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: BaseTaskFiltersCloudComponent, inputs: { appName: "appName", showIcons: "showIcons", filterParam: "filterParam" }, outputs: { success: "success", error: "error" } });
BaseTaskFiltersCloudComponent.propDecorators = {
    appName: [{ type: Input }],
    filterParam: [{ type: Input }],
    showIcons: [{ type: Input }],
    success: [{ type: Output }],
    error: [{ type: Output }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(BaseTaskFiltersCloudComponent, [{
        type: Directive
    }], function () { return []; }, { appName: [{
            type: Input
        }], showIcons: [{
            type: Input
        }], success: [{
            type: Output
        }], error: [{
            type: Output
        }], filterParam: [{
            type: Input
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS10YXNrLWZpbHRlcnMtY2xvdWQuY29tcG9uZW50LmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9ob21lL3RyYXZpcy9idWlsZC9BbGZyZXNjby9hbGZyZXNjby1uZzItY29tcG9uZW50cy9saWIvcHJvY2Vzcy1zZXJ2aWNlcy1jbG91ZC9zcmMvbGliL3Rhc2svdGFzay1maWx0ZXJzL2NvbXBvbmVudHMvYmFzZS10YXNrLWZpbHRlcnMtY2xvdWQuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFFSCxPQUFPLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQWEsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ2xGLE9BQU8sRUFBYyxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7O0FBSzNDLE1BQU0sT0FBZ0IsNkJBQTZCO0FBQUcsSUFGdEQ7QUFDRyxRQUlDLFlBQU8sR0FBVyxFQUFFLENBQUM7QUFDekIsUUFVSSxjQUFTLEdBQVksS0FBSyxDQUFDO0FBQy9CLFFBR0ksWUFBTyxHQUFzQixJQUFJLFlBQVksRUFBTyxDQUFDO0FBQ3pELFFBR0ksVUFBSyxHQUFzQixJQUFJLFlBQVksRUFBTyxDQUFDO0FBQ3ZELFFBQ0ksY0FBUyxHQUF3QyxFQUFFLENBQUM7QUFDeEQsUUFBSSxvQkFBZSxHQUFhLEVBQUUsQ0FBQztBQUNuQyxRQUNjLGVBQVUsR0FBRyxJQUFJLE9BQU8sRUFBVyxDQUFDO0FBQ2xELElBc0JBLENBQUM7QUFDRCxJQXRCSSxXQUFXO0FBQ2YsUUFBUSxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUNuQyxRQUFRLElBQUksQ0FBQyxVQUFVLENBQUMsUUFBUSxFQUFFLENBQUM7QUFDbkMsSUFBSSxDQUFDO0FBQ0wsSUFDSSxnQkFBZ0IsQ0FBQyxTQUFpQjtBQUFJLFFBQ2xDLE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDeEQsSUFBSSxDQUFDO0FBQ0wsSUFDSSxvQkFBb0IsQ0FBQyxTQUFpQjtBQUMxQyxRQUFRLElBQUksQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsRUFBRTtBQUN2RCxZQUFZLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQ2pELFNBQVM7QUFDVCxJQUFJLENBQUM7QUFDTCxJQUNJLGtCQUFrQixDQUFDLFNBQWlCO0FBQ3hDLFFBQVEsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDcEUsUUFBUSxJQUFJLFdBQVcsR0FBRyxDQUFDLENBQUMsRUFBRTtBQUM5QixZQUFZLElBQUksQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUN4RCxTQUFTO0FBQ1QsSUFBSSxDQUFDO0FBQ0w7eURBcERDLFNBQVM7NE9BQ1I7QUFBQztBQUNILHNCQUVLLEtBQUs7QUFDUiwwQkFNRyxLQUFLO0FBQ1Isd0JBR0csS0FBSztBQUNSLHNCQUdHLE1BQU07QUFDVCxvQkFHRyxNQUFNO0FBQ1Y7Ozs7Ozs7Ozs7Ozs7b0JBQUU7QUFBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IEV2ZW50RW1pdHRlciwgSW5wdXQsIE91dHB1dCwgT25EZXN0cm95LCBEaXJlY3RpdmUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUsIFN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IEZpbHRlclBhcmFtc01vZGVsIH0gZnJvbSAnLi4vbW9kZWxzL2ZpbHRlci1jbG91ZC5tb2RlbCc7XG5cbkBEaXJlY3RpdmUoKVxuLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOiBkaXJlY3RpdmUtY2xhc3Mtc3VmZml4XG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQmFzZVRhc2tGaWx0ZXJzQ2xvdWRDb21wb25lbnQgaW1wbGVtZW50cyBPbkRlc3Ryb3kge1xuICAgIC8qKiBEaXNwbGF5IGZpbHRlcnMgYXZhaWxhYmxlIHRvIHRoZSBjdXJyZW50IHVzZXIgZm9yIHRoZSBhcHBsaWNhdGlvbiB3aXRoIHRoZSBzcGVjaWZpZWQgbmFtZS4gKi9cbiAgICBASW5wdXQoKVxuICAgIGFwcE5hbWU6IHN0cmluZyA9ICcnO1xuXG4gICAgLyoqXG4gICAgICogUGFyYW1ldGVycyB0byB1c2UgZm9yIHRoZSB0YXNrIGZpbHRlciBjbG91ZC4gSWYgdGhlcmUgaXMgbm8gbWF0Y2ggdGhlbiB0aGUgZGVmYXVsdCBmaWx0ZXJcbiAgICAgKiAodGhlIGZpcnN0IG9uZSBpbiB0aGUgbGlzdCkgaXMgc2VsZWN0ZWQuXG4gICAgICovXG4gICAgQElucHV0KClcbiAgICBmaWx0ZXJQYXJhbTogRmlsdGVyUGFyYW1zTW9kZWw7XG5cbiAgICAvKiogVG9nZ2xlcyBkaXNwbGF5IG9mIHRoZSBmaWx0ZXIncyBpY29ucy4gKi9cbiAgICBASW5wdXQoKVxuICAgIHNob3dJY29uczogYm9vbGVhbiA9IGZhbHNlO1xuXG4gICAgLyoqIEVtaXR0ZWQgd2hlbiB0aGUgbGlzdCBpcyBsb2FkZWQuICovXG4gICAgQE91dHB1dCgpXG4gICAgc3VjY2VzczogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcblxuICAgIC8qKiBFbWl0dGVkIHdoZW4gYW4gZXJyb3Igb2NjdXJzIGR1cmluZyBsb2FkaW5nLiAqL1xuICAgIEBPdXRwdXQoKVxuICAgIGVycm9yOiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xuXG4gICAgY291bnRlcnMkOiB7W2tleTogc3RyaW5nXTogT2JzZXJ2YWJsZTxudW1iZXI+fSA9IHt9O1xuICAgIHVwZGF0ZWRDb3VudGVyczogc3RyaW5nW10gPSBbXTtcblxuICAgIHByb3RlY3RlZCBvbkRlc3Ryb3kkID0gbmV3IFN1YmplY3Q8Ym9vbGVhbj4oKTtcblxuICAgIG5nT25EZXN0cm95KCkge1xuICAgICAgICB0aGlzLm9uRGVzdHJveSQubmV4dCh0cnVlKTtcbiAgICAgICAgdGhpcy5vbkRlc3Ryb3kkLmNvbXBsZXRlKCk7XG4gICAgfVxuXG4gICAgd2FzRmlsdGVyVXBkYXRlZChmaWx0ZXJLZXk6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy51cGRhdGVkQ291bnRlcnMuaW5jbHVkZXMoZmlsdGVyS2V5KTtcbiAgICB9XG5cbiAgICBhZGRUb1VwZGF0ZWRDb3VudGVycyhmaWx0ZXJLZXk6IHN0cmluZykge1xuICAgICAgICBpZiAoIXRoaXMudXBkYXRlZENvdW50ZXJzLmluY2x1ZGVzKGZpbHRlcktleSkpIHtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlZENvdW50ZXJzLnB1c2goZmlsdGVyS2V5KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJlc2V0RmlsdGVyQ291bnRlcihmaWx0ZXJLZXk6IHN0cmluZykge1xuICAgICAgICBjb25zdCBmaWx0ZXJJbmRleCA9IHRoaXMudXBkYXRlZENvdW50ZXJzLmluZGV4T2YoZmlsdGVyS2V5KTtcbiAgICAgICAgaWYgKGZpbHRlckluZGV4ID4gLTEpIHtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlZENvdW50ZXJzLnNwbGljZShmaWx0ZXJJbmRleCwgMSk7XG4gICAgICAgIH1cbiAgICB9XG59XG4iXX0=