/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, ViewEncapsulation, Input } from '@angular/core';
import { AppConfigService, UserPreferencesService } from '@alfresco/adf-core';
import { BaseTaskListCloudComponent } from './base-task-list-cloud.component';
import { ServiceTaskListCloudService } from '../services/service-task-list-cloud.service';
import { TaskCloudService } from '../../services/task-cloud.service';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../services/service-task-list-cloud.service';
import * as ɵngcc2 from '@alfresco/adf-core';
import * as ɵngcc3 from '../../services/task-cloud.service';
import * as ɵngcc4 from '@angular/common';
import * as ɵngcc5 from '@angular/material/progress-spinner';
import * as ɵngcc6 from '@ngx-translate/core';

function ServiceTaskListCloudComponent_div_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(2, 1, "ADF_CLOUD_TASK_LIST.FILTERS.MESSAGES.NONE"));
} }
function ServiceTaskListCloudComponent_ng_container_1_ng_template_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "mat-progress-spinner", 2);
} if (rf & 2) {
    ɵngcc0.ɵɵproperty("color", "primary")("mode", "indeterminate");
} }
function ServiceTaskListCloudComponent_ng_container_1_ng_template_5_adf_empty_content_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "adf-empty-content", 4);
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵpipe(2, "translate");
} if (rf & 2) {
    ɵngcc0.ɵɵproperty("title", ɵngcc0.ɵɵpipeBind1(1, 2, "ADF_CLOUD_TASK_LIST.LIST.MESSAGES.TITLE"))("subtitle", ɵngcc0.ɵɵpipeBind1(2, 4, "ADF_CLOUD_TASK_LIST.LIST.MESSAGES.SUBTITLE"));
} }
function ServiceTaskListCloudComponent_ng_container_1_ng_template_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, ServiceTaskListCloudComponent_ng_container_1_ng_template_5_adf_empty_content_0_Template, 3, 6, "adf-empty-content", 3);
    ɵngcc0.ɵɵprojection(1);
} if (rf & 2) {
    const ctx_r3 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r3.emptyCustomContent);
} }
function ServiceTaskListCloudComponent_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    const _r6 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "adf-datatable", 1);
    ɵngcc0.ɵɵlistener("showRowActionsMenu", function ServiceTaskListCloudComponent_ng_container_1_Template_adf_datatable_showRowActionsMenu_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r6); const ctx_r5 = ɵngcc0.ɵɵnextContext(); return ctx_r5.onShowRowActionsMenu($event); })("showRowContextMenu", function ServiceTaskListCloudComponent_ng_container_1_Template_adf_datatable_showRowContextMenu_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r6); const ctx_r7 = ɵngcc0.ɵɵnextContext(); return ctx_r7.onShowRowContextMenu($event); })("executeRowAction", function ServiceTaskListCloudComponent_ng_container_1_Template_adf_datatable_executeRowAction_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r6); const ctx_r8 = ɵngcc0.ɵɵnextContext(); return ctx_r8.onExecuteRowAction($event); })("row-select", function ServiceTaskListCloudComponent_ng_container_1_Template_adf_datatable_row_select_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r6); const ctx_r9 = ɵngcc0.ɵɵnextContext(); return ctx_r9.onRowSelect($event); })("row-unselect", function ServiceTaskListCloudComponent_ng_container_1_Template_adf_datatable_row_unselect_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r6); const ctx_r10 = ɵngcc0.ɵɵnextContext(); return ctx_r10.onRowUnselect($event); })("rowClick", function ServiceTaskListCloudComponent_ng_container_1_Template_adf_datatable_rowClick_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r6); const ctx_r11 = ɵngcc0.ɵɵnextContext(); return ctx_r11.onRowClick($event); })("row-keyup", function ServiceTaskListCloudComponent_ng_container_1_Template_adf_datatable_row_keyup_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r6); const ctx_r12 = ɵngcc0.ɵɵnextContext(); return ctx_r12.onRowKeyUp($event); })("sorting-changed", function ServiceTaskListCloudComponent_ng_container_1_Template_adf_datatable_sorting_changed_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r6); const ctx_r13 = ɵngcc0.ɵɵnextContext(); return ctx_r13.onSortingChanged($event); });
    ɵngcc0.ɵɵelementStart(2, "adf-loading-content-template");
    ɵngcc0.ɵɵtemplate(3, ServiceTaskListCloudComponent_ng_container_1_ng_template_3_Template, 1, 2, "ng-template");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(4, "adf-no-content-template");
    ɵngcc0.ɵɵtemplate(5, ServiceTaskListCloudComponent_ng_container_1_ng_template_5_Template, 2, 1, "ng-template");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("rows", ctx_r1.rows)("columns", ctx_r1.columns)("loading", ctx_r1.isLoading)("sorting", ctx_r1.formattedSorting)("multiselect", ctx_r1.multiselect)("selectionMode", ctx_r1.selectionMode)("stickyHeader", ctx_r1.stickyHeader)("actions", ctx_r1.showActions)("actionsPosition", ctx_r1.actionsPosition)("contextMenu", ctx_r1.showContextMenu)("resolverFn", ctx_r1.boundReplacePriorityValues);
} }
const _c0 = [[["adf-custom-empty-content-template"]]];
const _c1 = ["adf-custom-empty-content-template"];
export class ServiceTaskListCloudComponent extends BaseTaskListCloudComponent {
    constructor(serviceTaskListCloudService, appConfigService, taskCloudService, userPreferences) {
        super(appConfigService, taskCloudService, userPreferences, ServiceTaskListCloudComponent.PRESET_KEY);
        this.serviceTaskListCloudService = serviceTaskListCloudService;
        this.queryParams = {};
    }
    load(requestNode) {
        this.isLoading = true;
        this.serviceTaskListCloudService.getServiceTaskByRequest(requestNode).subscribe((tasks) => {
            this.rows = tasks.list.entries;
            this.success.emit(tasks);
            this.isLoading = false;
            this.pagination.next(tasks.list.pagination);
        }, (error) => {
            this.error.emit(error);
            this.isLoading = false;
        });
    }
    createRequestNode() {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q;
        const requestNode = {
            appName: this.appName,
            maxItems: this.size,
            skipCount: this.skipCount,
            sorting: this.sorting,
            id: (_a = this.queryParams) === null || _a === void 0 ? void 0 : _a.serviceTaskId,
            activityName: (_b = this.queryParams) === null || _b === void 0 ? void 0 : _b.activityName,
            activityType: (_c = this.queryParams) === null || _c === void 0 ? void 0 : _c.activityType,
            completedDate: (_d = this.queryParams) === null || _d === void 0 ? void 0 : _d.completedDate,
            elementId: (_e = this.queryParams) === null || _e === void 0 ? void 0 : _e.elementId,
            executionId: (_f = this.queryParams) === null || _f === void 0 ? void 0 : _f.executionId,
            processDefinitionId: (_g = this.queryParams) === null || _g === void 0 ? void 0 : _g.processDefinitionId,
            processDefinitionKey: (_h = this.queryParams) === null || _h === void 0 ? void 0 : _h.processDefinitionKey,
            processDefinitionVersion: (_j = this.queryParams) === null || _j === void 0 ? void 0 : _j.processDefinitionVersion,
            processInstanceId: (_k = this.queryParams) === null || _k === void 0 ? void 0 : _k.processInstanceId,
            serviceFullName: (_l = this.queryParams) === null || _l === void 0 ? void 0 : _l.serviceFullName,
            serviceName: (_m = this.queryParams) === null || _m === void 0 ? void 0 : _m.serviceName,
            serviceVersion: (_o = this.queryParams) === null || _o === void 0 ? void 0 : _o.serviceVersion,
            startedDate: (_p = this.queryParams) === null || _p === void 0 ? void 0 : _p.startedDate,
            status: (_q = this.queryParams) === null || _q === void 0 ? void 0 : _q.status
        };
        return requestNode;
    }
}
ServiceTaskListCloudComponent.ɵfac = function ServiceTaskListCloudComponent_Factory(t) { return new (t || ServiceTaskListCloudComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ServiceTaskListCloudService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.AppConfigService), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.TaskCloudService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.UserPreferencesService)); };
ServiceTaskListCloudComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ServiceTaskListCloudComponent, selectors: [["adf-cloud-service-task-list"]], inputs: { queryParams: "queryParams" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c1, decls: 2, vars: 2, consts: [[4, "ngIf"], [3, "rows", "columns", "loading", "sorting", "multiselect", "selectionMode", "stickyHeader", "actions", "actionsPosition", "contextMenu", "resolverFn", "showRowActionsMenu", "showRowContextMenu", "executeRowAction", "row-select", "row-unselect", "rowClick", "row-keyup", "sorting-changed"], [1, "adf-cloud-task-list-loading-margin", 3, "color", "mode"], ["icon", "assignment", 3, "title", "subtitle", 4, "ngIf"], ["icon", "assignment", 3, "title", "subtitle"]], template: function ServiceTaskListCloudComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef(_c0);
        ɵngcc0.ɵɵtemplate(0, ServiceTaskListCloudComponent_div_0_Template, 3, 3, "div", 0);
        ɵngcc0.ɵɵtemplate(1, ServiceTaskListCloudComponent_ng_container_1_Template, 6, 11, "ng-container", 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngIf", !ctx.rows);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.rows);
    } }, directives: [ɵngcc4.NgIf, ɵngcc2.DataTableComponent, ɵngcc2.LoadingContentTemplateDirective, ɵngcc2.NoContentTemplateDirective, ɵngcc5.MatProgressSpinner, ɵngcc2.EmptyContentComponent], pipes: [ɵngcc6.TranslatePipe], styles: [".adf-cloud-task-list-loading-margin{margin-left:calc(50% - 50px);margin-right:calc(50% - 50px)}"], encapsulation: 2 });
ServiceTaskListCloudComponent.PRESET_KEY = 'adf-cloud-service-task-list.presets';
ServiceTaskListCloudComponent.ctorParameters = () => [
    { type: ServiceTaskListCloudService },
    { type: AppConfigService },
    { type: TaskCloudService },
    { type: UserPreferencesService }
];
ServiceTaskListCloudComponent.propDecorators = {
    queryParams: [{ type: Input }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ServiceTaskListCloudComponent, [{
        type: Component,
        args: [{
                selector: 'adf-cloud-service-task-list',
                template: "<div *ngIf=\"!rows\">{{ 'ADF_CLOUD_TASK_LIST.FILTERS.MESSAGES.NONE' | translate }}</div>\n<ng-container *ngIf=\"rows\">\n        <adf-datatable\n            [rows]=\"rows\"\n            [columns]=\"columns\"\n            [loading]=\"isLoading\"\n            [sorting]=\"formattedSorting\"\n            [multiselect]=\"multiselect\"\n            [selectionMode]=\"selectionMode\"\n            [stickyHeader]=\"stickyHeader\"\n            [actions]=\"showActions\"\n            [actionsPosition]=\"actionsPosition\"\n            [contextMenu]=\"showContextMenu\"\n            [resolverFn]=\"boundReplacePriorityValues\"\n            (showRowActionsMenu)=\"onShowRowActionsMenu($event)\"\n            (showRowContextMenu)=\"onShowRowContextMenu($event)\"\n            (executeRowAction)=\"onExecuteRowAction($event)\"\n            (row-select)=\"onRowSelect($any($event))\"\n            (row-unselect)=\"onRowUnselect($any($event))\"\n            (rowClick)=\"onRowClick($any($event))\"\n            (row-keyup)=\"onRowKeyUp($any($event))\"\n            (sorting-changed)=\"onSortingChanged($any($event))\">\n            <adf-loading-content-template>\n                <ng-template>\n                    <!-- Add your custom loading template here -->\n                    <mat-progress-spinner class=\"adf-cloud-task-list-loading-margin\"\n                                          [color]=\"'primary'\"\n                                          [mode]=\"'indeterminate'\">\n                    </mat-progress-spinner>\n                </ng-template>\n            </adf-loading-content-template>\n            <adf-no-content-template>\n                <ng-template>\n                    <adf-empty-content *ngIf=\"!emptyCustomContent\"\n                                       icon=\"assignment\"\n                                       [title]=\"'ADF_CLOUD_TASK_LIST.LIST.MESSAGES.TITLE' | translate\"\n                                       [subtitle]=\"'ADF_CLOUD_TASK_LIST.LIST.MESSAGES.SUBTITLE' | translate\">\n                    </adf-empty-content>\n                    <ng-content select=\"adf-custom-empty-content-template\"></ng-content>\n                </ng-template>\n            </adf-no-content-template>\n        </adf-datatable>\n</ng-container>\n",
                encapsulation: ViewEncapsulation.None,
                styles: [".adf-cloud-task-list-loading-margin{margin-left:calc(50% - 50px);margin-right:calc(50% - 50px)}"]
            }]
    }], function () { return [{ type: ɵngcc1.ServiceTaskListCloudService }, { type: ɵngcc2.AppConfigService }, { type: ɵngcc3.TaskCloudService }, { type: ɵngcc2.UserPreferencesService }]; }, { queryParams: [{
            type: Input
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,