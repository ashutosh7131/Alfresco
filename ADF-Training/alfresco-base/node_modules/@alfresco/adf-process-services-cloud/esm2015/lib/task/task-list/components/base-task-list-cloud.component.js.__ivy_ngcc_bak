/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Input, Output, EventEmitter, ContentChild, Directive } from '@angular/core';
import { AppConfigService, UserPreferencesService, DataTableSchema, UserPreferenceValues, CustomEmptyContentTemplateDirective } from '@alfresco/adf-core';
import { taskPresetsCloudDefaultModel } from '../models/task-preset-cloud.model';
import { BehaviorSubject, Subject } from 'rxjs';
import { TaskListCloudSortingModel } from '../models/task-list-sorting.model';
import { takeUntil } from 'rxjs/operators';
import { TaskCloudService } from '../../services/task-cloud.service';
export class BaseTaskListCloudComponent extends DataTableSchema {
    constructor(appConfigService, taskCloudService, userPreferences, presetKey) {
        super(appConfigService, presetKey, taskPresetsCloudDefaultModel);
        this.taskCloudService = taskCloudService;
        this.userPreferences = userPreferences;
        this.appName = '';
        this.selectionMode = 'single';
        this.multiselect = false;
        this.stickyHeader = false;
        this.showActions = false;
        this.actionsPosition = 'right';
        this.showContextMenu = false;
        this.showRowContextMenu = new EventEmitter();
        this.showRowActionsMenu = new EventEmitter();
        this.executeRowAction = new EventEmitter();
        this.rowClick = new EventEmitter();
        this.rowsSelected = new EventEmitter();
        this.success = new EventEmitter();
        this.error = new EventEmitter();
        this.rows = [];
        this.skipCount = 0;
        this.isLoading = true;
        this.defaultSorting = { key: 'startDate', direction: 'desc' };
        this.onDestroy$ = new Subject();
        this.size = userPreferences.paginationSize;
        this.pagination = new BehaviorSubject({
            maxItems: this.size,
            skipCount: 0,
            totalItems: 0
        });
        this.boundReplacePriorityValues = this.replacePriorityValues.bind(this);
    }
    ngOnInit() {
        this.userPreferences
            .select(UserPreferenceValues.PaginationSize)
            .pipe(takeUntil(this.onDestroy$))
            .subscribe(pageSize => this.size = pageSize);
    }
    ngOnChanges(changes) {
        if (changes['sorting']) {
            this.formatSorting(changes['sorting'].currentValue);
        }
        this.reload();
    }
    ngOnDestroy() {
        this.onDestroy$.next(true);
        this.onDestroy$.complete();
    }
    ngAfterContentInit() {
        this.createDatatableSchema();
    }
    reload() {
        this.requestNode = this.createRequestNode();
        if (this.requestNode.appName || this.requestNode.appName === '') {
            this.load(this.requestNode);
        }
        else {
            this.rows = [];
        }
    }
    isListEmpty() {
        return !this.rows || this.rows.length === 0;
    }
    resetPagination() {
        this.skipCount = 0;
        this.size = this.userPreferences.paginationSize;
        this.pagination.next({
            skipCount: 0,
            maxItems: this.size
        });
    }
    updatePagination(pagination) {
        this.size = pagination.maxItems;
        this.skipCount = pagination.skipCount;
        this.pagination.next(pagination);
        this.reload();
    }
    onSortingChanged(event) {
        this.setSorting(event.detail);
        this.formatSorting(this.sorting);
        this.reload();
    }
    onRowClick(item) {
        this.currentInstanceId = item.value.getValue('id');
        this.rowClick.emit(this.currentInstanceId);
    }
    onRowSelect(event) {
        this.selectedInstances = [...event.detail.selection];
        this.rowsSelected.emit(this.selectedInstances);
    }
    onRowUnselect(event) {
        this.selectedInstances = [...event.detail.selection];
        this.rowsSelected.emit(this.selectedInstances);
    }
    onRowKeyUp(event) {
        if (event.detail.keyboardEvent.key === 'Enter') {
            event.preventDefault();
            this.currentInstanceId = event.detail.row.getValue('id');
            this.rowClick.emit(this.currentInstanceId);
        }
    }
    onShowRowActionsMenu(event) {
        this.showRowActionsMenu.emit(event);
    }
    onShowRowContextMenu(event) {
        this.showRowContextMenu.emit(event);
    }
    onExecuteRowAction(row) {
        this.executeRowAction.emit(row);
    }
    setSorting(sortDetail) {
        const sorting = sortDetail ? {
            orderBy: sortDetail.key,
            direction: sortDetail.direction.toUpperCase()
        } : Object.assign({}, this.defaultSorting);
        this.sorting = [new TaskListCloudSortingModel(sorting)];
    }
    formatSorting(sorting) {
        this.formattedSorting = this.isValidSorting(sorting) ? [
            sorting[0].orderBy,
            sorting[0].direction.toLocaleLowerCase()
        ] : null;
    }
    isValidSorting(sorting) {
        return sorting && sorting.length && sorting[0].orderBy && sorting[0].direction;
    }
    replacePriorityValues(row, column) {
        return column.key.split('.').reduce((source, key) => {
            if (key === 'priority' && source && typeof (source[key]) === 'number') {
                return source[key] = this.taskCloudService.getPriorityLabel(source[key]);
            }
            return source && typeof (source) === 'object' ? source[key] : undefined;
        }, row.obj);
    }
}
BaseTaskListCloudComponent.decorators = [
    { type: Directive }
];
BaseTaskListCloudComponent.ctorParameters = () => [
    { type: AppConfigService },
    { type: TaskCloudService },
    { type: UserPreferencesService },
    { type: String }
];
BaseTaskListCloudComponent.propDecorators = {
    emptyCustomContent: [{ type: ContentChild, args: [CustomEmptyContentTemplateDirective,] }],
    appName: [{ type: Input }],
    selectionMode: [{ type: Input }],
    multiselect: [{ type: Input }],
    stickyHeader: [{ type: Input }],
    sorting: [{ type: Input }],
    showActions: [{ type: Input }],
    actionsPosition: [{ type: Input }],
    showContextMenu: [{ type: Input }],
    showRowContextMenu: [{ type: Output }],
    showRowActionsMenu: [{ type: Output }],
    executeRowAction: [{ type: Output }],
    rowClick: [{ type: Output }],
    rowsSelected: [{ type: Output }],
    success: [{ type: Output }],
    error: [{ type: Output }]
};
//# sourceMappingURL=data:application/json;base64,