/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Directive, Input, Output, EventEmitter } from '@angular/core';
import { TaskCloudService } from './../../../services/task-cloud.service';
import { AppsProcessCloudService } from './../../../../app/services/apps-process-cloud.service';
import { DateCloudFilterType } from '../../../../models/date-cloud-filter.model';
import moment from 'moment';
import { FormBuilder } from '@angular/forms';
import { debounceTime, filter, finalize, switchMap, takeUntil } from 'rxjs/operators';
import { Subject } from 'rxjs';
import { DateAdapter } from '@angular/material/core';
import { TranslationService, UserPreferencesService, UserPreferenceValues } from '@alfresco/adf-core';
import { TaskFilterDialogCloudComponent } from '../task-filter-dialog/task-filter-dialog-cloud.component';
import { MatDialog } from '@angular/material/dialog';
export class BaseEditTaskFilterCloudComponent {
    constructor(formBuilder, dateAdapter, userPreferencesService, appsProcessCloudService, taskCloudService, dialog, translateService) {
        this.formBuilder = formBuilder;
        this.dateAdapter = dateAdapter;
        this.userPreferencesService = userPreferencesService;
        this.appsProcessCloudService = appsProcessCloudService;
        this.taskCloudService = taskCloudService;
        this.dialog = dialog;
        this.translateService = translateService;
        this.appName = '';
        this.showTitle = true;
        this.showTaskFilterName = true;
        this.filterProperties = [];
        this.role = '';
        this.showFilterActions = true;
        this.actions = BaseEditTaskFilterCloudComponent.DEFAULT_ACTIONS;
        this.sortProperties = [];
        this.action = new EventEmitter();
        this.applicationNames = [];
        this.processDefinitionNames = [];
        this.formHasBeenChanged = false;
        this.taskFilterProperties = [];
        this.taskFilterActions = [];
        this.toggleFilterActions = false;
        this.sortDirections = [
            { value: 'ASC', label: 'ADF_CLOUD_TASK_FILTERS.DIRECTION.ASCENDING' },
            { value: 'DESC', label: 'ADF_CLOUD_TASK_FILTERS.DIRECTION.DESCENDING' }
        ];
        this.allProcessDefinitionNamesOption = {
            value: '',
            label: 'ADF_CLOUD_TASK_FILTERS.STATUS.ALL'
        };
        this.filterChange = new EventEmitter();
        this.onDestroy$ = new Subject();
        this.isLoading = false;
    }
    ngOnInit() {
        this.userPreferencesService
            .select(UserPreferenceValues.Locale)
            .pipe(takeUntil(this.onDestroy$))
            .subscribe(locale => this.dateAdapter.setLocale(locale));
    }
    ngOnChanges(changes) {
        const id = changes['id'];
        if (id && id.currentValue !== id.previousValue) {
            this.retrieveTaskFilterAndBuildForm();
        }
    }
    ngOnDestroy() {
        this.onDestroy$.next(true);
        this.onDestroy$.complete();
    }
    createFilterActions() {
        return [
            {
                actionType: BaseEditTaskFilterCloudComponent.ACTION_SAVE,
                icon: 'adf:save',
                tooltip: 'ADF_CLOUD_EDIT_TASK_FILTER.TOOL_TIP.SAVE'
            },
            {
                actionType: BaseEditTaskFilterCloudComponent.ACTION_SAVE_AS,
                icon: 'adf:save-as',
                tooltip: 'ADF_CLOUD_EDIT_TASK_FILTER.TOOL_TIP.SAVE_AS'
            },
            {
                actionType: BaseEditTaskFilterCloudComponent.ACTION_DELETE,
                icon: 'delete',
                tooltip: 'ADF_CLOUD_EDIT_TASK_FILTER.TOOL_TIP.DELETE'
            }
        ];
    }
    hasFormChanged(action) {
        if (action.actionType === BaseEditTaskFilterCloudComponent.ACTION_SAVE) {
            return !this.formHasBeenChanged;
        }
        if (action.actionType === BaseEditTaskFilterCloudComponent.ACTION_SAVE_AS) {
            return !this.formHasBeenChanged;
        }
        if (action.actionType === BaseEditTaskFilterCloudComponent.ACTION_DELETE) {
            return false;
        }
        return false;
    }
    onExpand() {
        this.toggleFilterActions = true;
    }
    onClose() {
        this.toggleFilterActions = false;
    }
    isDisabledAction(action) {
        return this.isDisabledForDefaultFilters(action) ? true : this.hasFormChanged(action);
    }
    deepCompare(left, right) {
        return JSON.stringify(left).toLowerCase() === JSON.stringify(right).toLowerCase();
    }
    getSanitizeFilterName(filterName) {
        const nameWithHyphen = this.replaceSpaceWithHyphen(filterName.trim());
        return nameWithHyphen.toLowerCase();
    }
    replaceSpaceWithHyphen(name) {
        const regExt = new RegExp(' ', 'g');
        return name.replace(regExt, '-');
    }
    executeFilterActions(action) {
        if (action.actionType === BaseEditTaskFilterCloudComponent.ACTION_SAVE) {
            this.save(action);
        }
        else if (action.actionType === BaseEditTaskFilterCloudComponent.ACTION_SAVE_AS) {
            this.saveAs(action);
        }
        else if (action.actionType === BaseEditTaskFilterCloudComponent.ACTION_DELETE) {
            this.delete(action);
        }
    }
    getRunningApplications() {
        this.appsProcessCloudService
            .getDeployedApplicationsByStatus(BaseEditTaskFilterCloudComponent.APP_RUNNING_STATUS, this.role)
            .subscribe((applications) => {
            if (applications && applications.length > 0) {
                applications.map((application) => {
                    this.applicationNames.push({ label: application.name, value: application.name });
                });
            }
        });
    }
    getProcessDefinitions() {
        this.taskCloudService.getProcessDefinitions(this.appName)
            .subscribe((processDefinitions) => {
            if (processDefinitions && processDefinitions.length > 0) {
                this.processDefinitionNames.push(this.allProcessDefinitionNamesOption);
                processDefinitions.map((processDefinition) => {
                    this.processDefinitionNames.push({ label: processDefinition.name, value: processDefinition.name });
                });
            }
        });
    }
    checkMandatoryActions() {
        if (this.actions === undefined || this.actions.length === 0) {
            this.actions = BaseEditTaskFilterCloudComponent.DEFAULT_ACTIONS;
        }
    }
    isValidAction(actions, action) {
        return actions ? actions.indexOf(action.actionType) >= 0 : true;
    }
    isFormValid() {
        return this.editTaskFilterForm.valid;
    }
    getPropertyController(property) {
        return this.editTaskFilterForm.get(property.key);
    }
    onDateChanged(newDateValue, dateProperty) {
        if (newDateValue) {
            const momentDate = moment(newDateValue, BaseEditTaskFilterCloudComponent.FORMAT_DATE, true);
            const controller = this.getPropertyController(dateProperty);
            if (momentDate.isValid()) {
                controller.setValue(momentDate.toISOString(true));
                controller.setErrors(null);
            }
            else {
                controller.setErrors({ invalid: true });
            }
        }
    }
    onDateRangeFilterChanged(dateRange, property) {
        var _a, _b;
        this.editTaskFilterForm.get((_a = property.attributes) === null || _a === void 0 ? void 0 : _a.from).setValue(dateRange.startDate ? dateRange.startDate : null);
        this.editTaskFilterForm.get((_b = property.attributes) === null || _b === void 0 ? void 0 : _b.to).setValue(dateRange.endDate ? dateRange.endDate : null);
        this.editTaskFilterForm.get(property.attributes.dateType).setValue(DateCloudFilterType.RANGE);
    }
    onChangedUser(users, userProperty) {
        let selectedUsers;
        if (userProperty.selectionMode === 'single') {
            selectedUsers = users[0];
        }
        else {
            selectedUsers = users;
        }
        this.getPropertyController(userProperty).setValue(selectedUsers);
    }
    onAssignedChange(assignedValue) {
        this.editTaskFilterForm.get('candidateGroups').setValue([]);
        this.editTaskFilterForm.get('assignee').setValue(assignedValue === null || assignedValue === void 0 ? void 0 : assignedValue.username);
    }
    onAssignedGroupsChange(groups) {
        this.editTaskFilterForm.get('assignee').setValue(null);
        this.editTaskFilterForm.get('candidateGroups').setValue(groups);
    }
    hasError(property) {
        const controller = this.getPropertyController(property);
        return controller.errors && controller.errors.invalid;
    }
    hasLastModifiedProperty() {
        return this.filterProperties.indexOf(BaseEditTaskFilterCloudComponent.LAST_MODIFIED) >= 0;
    }
    get createSortProperties() {
        this.checkMandatorySortProperties();
        return this.sortProperties.map((property) => {
            return { label: property, value: property };
        });
    }
    createAndFilterActions() {
        this.checkMandatoryActions();
        return this.createFilterActions().filter(action => this.isValidAction(this.actions, action));
    }
    isValidProperty(filterProperties, key) {
        return filterProperties ? filterProperties.indexOf(key) >= 0 : true;
    }
    checkForProperty(property) {
        return this.filterProperties ? this.filterProperties.indexOf(property) >= 0 : false;
    }
    hasSortProperty() {
        return this.filterProperties.indexOf(BaseEditTaskFilterCloudComponent.SORT) >= 0;
    }
    removeOrderProperty(filteredProperties) {
        if (filteredProperties && filteredProperties.length > 0) {
            return filteredProperties.filter(property => property.key !== BaseEditTaskFilterCloudComponent.ORDER);
        }
        return [];
    }
    createAndFilterProperties() {
        this.checkMandatoryFilterProperties();
        if (this.checkForProperty(BaseEditTaskFilterCloudComponent.APPLICATION_NAME)) {
            this.applicationNames = [];
            this.getRunningApplications();
        }
        if (this.checkForProperty(BaseEditTaskFilterCloudComponent.PROCESS_DEFINITION_NAME)) {
            this.processDefinitionNames = [];
            this.getProcessDefinitions();
        }
        const defaultProperties = this.createTaskFilterProperties();
        let filteredProperties = defaultProperties.filter((filterProperty) => this.isValidProperty(this.filterProperties, filterProperty.key));
        if (!this.hasSortProperty()) {
            filteredProperties = this.removeOrderProperty(filteredProperties);
        }
        return filteredProperties;
    }
    onFilterChange() {
        this.editTaskFilterForm.valueChanges
            .pipe(debounceTime(500), filter(() => this.isFormValid()), takeUntil(this.onDestroy$))
            .subscribe((formValues) => {
            this.assignNewFilter(formValues);
        });
    }
    getFormControlsConfig(taskFilterProperties) {
        const properties = taskFilterProperties.map((property) => {
            if (!!property.attributes) {
                return this.getAttributesControlConfig(property);
            }
            else {
                return { [property.key]: property.value };
            }
        });
        return properties.reduce(((result, current) => Object.assign(result, current)), {});
    }
    getAttributesControlConfig(property) {
        return Object.values(property.attributes).reduce((result, key) => {
            result[key] = property.value[key];
            return result;
        }, {});
    }
    buildForm(taskFilterProperties) {
        this.formHasBeenChanged = false;
        this.editTaskFilterForm = this.formBuilder.group(this.getFormControlsConfig(taskFilterProperties));
        this.onFilterChange();
    }
    onDateTypeChange(dateType, property) {
        this.editTaskFilterForm.get(property.attributes.dateType).setValue(dateType);
    }
    retrieveTaskFilterAndBuildForm() {
        this.isLoading = true;
        this.getTaskFilterById(this.appName, this.id)
            .pipe(finalize(() => this.isLoading = false), takeUntil(this.onDestroy$))
            .subscribe(response => {
            this.taskFilter = response;
            this.taskFilterProperties = this.createAndFilterProperties();
            this.taskFilterActions = this.createAndFilterActions();
            this.buildForm(this.taskFilterProperties);
        });
    }
    delete(deleteAction) {
        this.deleteFilter(this.taskFilter)
            .pipe(filter((filters) => {
            deleteAction.filter = this.taskFilter;
            this.action.emit(deleteAction);
            return filters.length === 0;
        }), switchMap(() => this.restoreDefaultTaskFilters()), takeUntil(this.onDestroy$))
            .subscribe(() => { });
    }
    save(saveAction) {
        this.updateFilter(this.changedTaskFilter)
            .pipe(takeUntil(this.onDestroy$))
            .subscribe(() => {
            saveAction.filter = this.changedTaskFilter;
            this.action.emit(saveAction);
            this.formHasBeenChanged = this.deepCompare(this.changedTaskFilter, this.taskFilter);
        });
    }
    saveAs(saveAsAction) {
        var _a;
        const dialogRef = this.dialog.open(TaskFilterDialogCloudComponent, {
            data: {
                name: this.translateService.instant((_a = this.taskFilter) === null || _a === void 0 ? void 0 : _a.name)
            },
            height: 'auto',
            minWidth: '30%'
        });
        dialogRef.afterClosed().subscribe((result) => {
            if (result && result.action === TaskFilterDialogCloudComponent.ACTION_SAVE) {
                const filterId = Math.random().toString(36).substr(2, 9);
                const filterKey = this.getSanitizeFilterName(result.name);
                const newFilter = {
                    name: result.name,
                    icon: result.icon,
                    id: filterId,
                    key: 'custom-' + filterKey
                };
                const resultFilter = Object.assign({}, this.changedTaskFilter, newFilter);
                this.addFilter(resultFilter).subscribe(() => {
                    saveAsAction.filter = resultFilter;
                    this.action.emit(saveAsAction);
                });
            }
        });
    }
    checkMandatoryFilterProperties() {
        if (this.filterProperties === undefined || this.filterProperties.length === 0) {
            this.filterProperties = this.getDefaultFilterProperties();
        }
    }
    checkMandatorySortProperties() {
        if (this.sortProperties === undefined || this.sortProperties.length === 0) {
            this.sortProperties = this.getDefaultSortProperties();
        }
    }
}
BaseEditTaskFilterCloudComponent.ACTION_SAVE = 'save';
BaseEditTaskFilterCloudComponent.ACTION_SAVE_AS = 'saveAs';
BaseEditTaskFilterCloudComponent.ACTION_DELETE = 'delete';
BaseEditTaskFilterCloudComponent.APP_RUNNING_STATUS = 'RUNNING';
BaseEditTaskFilterCloudComponent.APPLICATION_NAME = 'appName';
BaseEditTaskFilterCloudComponent.PROCESS_DEFINITION_NAME = 'processDefinitionName';
BaseEditTaskFilterCloudComponent.LAST_MODIFIED = 'lastModified';
BaseEditTaskFilterCloudComponent.SORT = 'sort';
BaseEditTaskFilterCloudComponent.ORDER = 'order';
BaseEditTaskFilterCloudComponent.DEFAULT_ACTIONS = ['save', 'saveAs', 'delete'];
BaseEditTaskFilterCloudComponent.FORMAT_DATE = 'DD/MM/YYYY';
BaseEditTaskFilterCloudComponent.ACTIONS_DISABLED_BY_DEFAULT = [
    BaseEditTaskFilterCloudComponent.ACTION_SAVE,
    BaseEditTaskFilterCloudComponent.ACTION_DELETE
];
BaseEditTaskFilterCloudComponent.decorators = [
    { type: Directive }
];
BaseEditTaskFilterCloudComponent.ctorParameters = () => [
    { type: FormBuilder },
    { type: DateAdapter },
    { type: UserPreferencesService },
    { type: AppsProcessCloudService },
    { type: TaskCloudService },
    { type: MatDialog },
    { type: TranslationService }
];
BaseEditTaskFilterCloudComponent.propDecorators = {
    appName: [{ type: Input }],
    id: [{ type: Input }],
    showTitle: [{ type: Input }],
    showTaskFilterName: [{ type: Input }],
    filterProperties: [{ type: Input }],
    role: [{ type: Input }],
    showFilterActions: [{ type: Input }],
    actions: [{ type: Input }],
    sortProperties: [{ type: Input }],
    action: [{ type: Output }],
    filterChange: [{ type: Output }]
};
//# sourceMappingURL=data:application/json;base64,