/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, Input, EventEmitter, Output, ViewEncapsulation } from '@angular/core';
import { takeUntil, concatMap, catchError, finalize } from 'rxjs/operators';
import { Subject, of, forkJoin } from 'rxjs';
import { CardViewDateItemModel, CardViewTextItemModel, CardViewArrayItemModel, TranslationService, AppConfigService, CardViewUpdateService, CardViewDatetimeItemModel, CardViewSelectItemModel } from '@alfresco/adf-core';
import { TaskCloudService } from '../../services/task-cloud.service';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../../services/task-cloud.service';
import * as ɵngcc2 from '@alfresco/adf-core';
import * as ɵngcc3 from '@angular/common';
import * as ɵngcc4 from '@angular/material/card';
import * as ɵngcc5 from '@angular/material/progress-spinner';

function TaskHeaderCloudComponent_h3_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "h3", 4);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r0.taskDetails == null ? null : ctx_r0.taskDetails.name);
} }
function TaskHeaderCloudComponent_mat_card_2_adf_card_view_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "adf-card-view", 7);
} if (rf & 2) {
    const ctx_r4 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("displayNoneOption", false)("properties", ctx_r4.properties)("editable", ctx_r4.isTaskEditable())("displayClearAction", ctx_r4.displayDateClearAction);
} }
function TaskHeaderCloudComponent_mat_card_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-card", 5);
    ɵngcc0.ɵɵelementStart(1, "mat-card-content");
    ɵngcc0.ɵɵtemplate(2, TaskHeaderCloudComponent_mat_card_2_adf_card_view_2_Template, 1, 4, "adf-card-view", 6);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    const _r2 = ɵngcc0.ɵɵreference(4);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r1.isLoading)("ngIfElse", _r2);
} }
function TaskHeaderCloudComponent_ng_template_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 8);
    ɵngcc0.ɵɵelement(1, "mat-spinner");
    ɵngcc0.ɵɵelementEnd();
} }
export class TaskHeaderCloudComponent {
    constructor(taskCloudService, translationService, appConfig, cardViewUpdateService) {
        this.taskCloudService = taskCloudService;
        this.translationService = translationService;
        this.appConfig = appConfig;
        this.cardViewUpdateService = cardViewUpdateService;
        this.appName = '';
        this.showTitle = true;
        this.claim = new EventEmitter();
        this.unclaim = new EventEmitter();
        this.error = new EventEmitter();
        this.taskDetails = {};
        this.candidateUsers = [];
        this.candidateGroups = [];
        this.inEdit = false;
        this.displayDateClearAction = false;
        this.isLoading = true;
        this.onDestroy$ = new Subject();
        this.dateFormat = this.appConfig.get('dateValues.defaultDateFormat');
        this.dateLocale = this.appConfig.get('dateValues.defaultDateLocale');
        this.dateTimeFormat = this.appConfig.get('dateValue.defaultDateTimeFormat');
    }
    ngOnInit() {
        this.taskCloudService.dataChangesDetected$
            .pipe(takeUntil(this.onDestroy$))
            .subscribe(() => {
            this.loadTaskDetailsById(this.appName, this.taskId);
        });
        this.cardViewUpdateService.itemUpdated$
            .pipe(takeUntil(this.onDestroy$))
            .subscribe(this.updateTaskDetails.bind(this));
    }
    ngOnChanges() {
        this.taskDetails = {};
        if ((this.appName || this.appName === '') && this.taskId) {
            this.loadTaskDetailsById(this.appName, this.taskId);
        }
        else {
            this.error.emit('App Name and Task Id are mandatory');
        }
    }
    loadTaskDetailsById(appName, taskId) {
        this.isLoading = true;
        this.taskCloudService.getTaskById(appName, taskId).pipe(concatMap((task) => forkJoin(of(task), this.taskCloudService.getCandidateUsers(this.appName, this.taskId), this.taskCloudService.getCandidateGroups(this.appName, this.taskId))), finalize(() => (this.isLoading = false))).subscribe(([taskDetails, candidateUsers, candidateGroups]) => {
            this.taskDetails = taskDetails;
            this.candidateGroups = candidateGroups.map((user) => ({ icon: 'group', value: user }));
            this.candidateUsers = candidateUsers.map((group) => ({ icon: 'person', value: group }));
            if (this.taskDetails.parentTaskId) {
                this.loadParentName(`${this.taskDetails.parentTaskId}`);
            }
            else {
                this.refreshData();
            }
        }, (err) => {
            this.error.emit(err);
        });
    }
    initDefaultProperties() {
        return [
            new CardViewTextItemModel({
                label: 'ADF_CLOUD_TASK_HEADER.PROPERTIES.ASSIGNEE',
                value: this.taskDetails.assignee,
                key: 'assignee',
                clickable: this.isAssigneePropertyClickable(),
                default: this.translationService.instant('ADF_CLOUD_TASK_HEADER.PROPERTIES.ASSIGNEE_DEFAULT'),
                icon: 'create'
            }),
            new CardViewTextItemModel({
                label: 'ADF_CLOUD_TASK_HEADER.PROPERTIES.STATUS',
                value: this.taskDetails.status,
                key: 'status'
            }),
            new CardViewSelectItemModel({
                label: 'ADF_CLOUD_TASK_HEADER.PROPERTIES.PRIORITY',
                value: this.taskDetails.priority.toString(),
                key: 'priority',
                editable: true,
                displayNoneOption: false,
                options$: of(this.taskCloudService.priorities)
            }),
            new CardViewDatetimeItemModel({
                label: 'ADF_CLOUD_TASK_HEADER.PROPERTIES.DUE_DATE',
                value: this.taskDetails.dueDate,
                key: 'dueDate',
                default: this.translationService.instant('ADF_CLOUD_TASK_HEADER.PROPERTIES.DUE_DATE_DEFAULT'),
                editable: true,
                format: this.dateTimeFormat,
                locale: this.dateLocale
            }),
            new CardViewTextItemModel({
                label: 'ADF_CLOUD_TASK_HEADER.PROPERTIES.CATEGORY',
                value: this.taskDetails.category,
                key: 'category',
                default: this.translationService.instant('ADF_CLOUD_TASK_HEADER.PROPERTIES.CATEGORY_DEFAULT')
            }),
            new CardViewDateItemModel({
                label: 'ADF_CLOUD_TASK_HEADER.PROPERTIES.CREATED',
                value: this.taskDetails.createdDate,
                key: 'created',
                format: this.dateFormat,
                locale: this.dateLocale
            }),
            new CardViewTextItemModel({
                label: 'ADF_CLOUD_TASK_HEADER.PROPERTIES.PARENT_NAME',
                value: this.parentTaskName,
                default: this.translationService.instant('ADF_CLOUD_TASK_HEADER.PROPERTIES.PARENT_NAME_DEFAULT'),
                key: 'parentName',
                clickable: true
            }),
            new CardViewTextItemModel({
                label: 'ADF_CLOUD_TASK_HEADER.PROPERTIES.PARENT_TASK_ID',
                value: this.taskDetails.parentTaskId,
                key: 'parentTaskId',
                clickable: true
            }),
            new CardViewDateItemModel({
                label: 'ADF_CLOUD_TASK_HEADER.PROPERTIES.END_DATE',
                value: this.taskDetails.completedDate,
                key: 'endDate',
                format: this.dateFormat,
                locale: this.dateLocale
            }),
            new CardViewTextItemModel({
                label: 'ADF_CLOUD_TASK_HEADER.PROPERTIES.ID',
                value: this.taskDetails.id,
                key: 'id'
            }),
            new CardViewTextItemModel({
                label: 'ADF_CLOUD_TASK_HEADER.PROPERTIES.DESCRIPTION',
                value: this.taskDetails.description,
                key: 'description',
                default: this.translationService.instant('ADF_CLOUD_TASK_HEADER.PROPERTIES.DESCRIPTION_DEFAULT'),
                multiline: true,
                editable: true
            }),
            new CardViewArrayItemModel({
                label: 'ADF_CLOUD_TASK_HEADER.PROPERTIES.CANDIDATE_USERS',
                value: of(this.candidateUsers),
                key: 'candidateUsers',
                icon: 'edit',
                clickable: false,
                default: this.translationService.instant('ADF_CLOUD_TASK_HEADER.PROPERTIES.CANDIDATE_USERS_DEFAULT'),
                noOfItemsToDisplay: 2
            }),
            new CardViewArrayItemModel({
                label: 'ADF_CLOUD_TASK_HEADER.PROPERTIES.CANDIDATE_GROUPS',
                value: of(this.candidateGroups),
                key: 'candidateGroups',
                icon: 'edit',
                clickable: false,
                default: this.translationService.instant('ADF_CLOUD_TASK_HEADER.PROPERTIES.CANDIDATE_GROUPS_DEFAULT'),
                noOfItemsToDisplay: 2
            })
        ];
    }
    refreshData() {
        if (this.taskDetails) {
            const defaultProperties = this.initDefaultProperties();
            const filteredProperties = this.appConfig.get('adf-cloud-task-header.presets.properties');
            this.properties = defaultProperties.filter((cardItem) => this.isValidSelection(filteredProperties, cardItem));
        }
    }
    updateTaskDetails(updateNotification) {
        this.taskCloudService.updateTask(this.appName, this.taskId, updateNotification.changed)
            .pipe(catchError(() => {
            this.cardViewUpdateService.updateElement(updateNotification.target);
            return of(null);
        }))
            .subscribe((taskDetails) => {
            if (taskDetails) {
                this.taskDetails = taskDetails;
            }
        });
    }
    loadParentName(taskId) {
        this.taskCloudService.getTaskById(this.appName, taskId)
            .subscribe((taskDetails) => {
            this.parentTaskName = taskDetails.name;
            this.refreshData();
        });
    }
    isCompleted() {
        return this.taskDetails && this.taskDetails.status === 'COMPLETED';
    }
    hasAssignee() {
        return !!this.taskDetails.assignee ? true : false;
    }
    isTaskValid() {
        return (this.appName || this.appName === '') && !!this.taskId;
    }
    isTaskAssigned() {
        return this.taskDetails.assignee !== undefined;
    }
    isTaskEditable() {
        return this.taskCloudService.isTaskEditable(this.taskDetails);
    }
    isAssigneePropertyClickable() {
        return this.taskCloudService.isAssigneePropertyClickable(this.taskDetails, this.candidateUsers, []);
    }
    isValidSelection(filteredProperties, cardItem) {
        return filteredProperties ? filteredProperties.indexOf(cardItem.key) >= 0 : true;
    }
    ngOnDestroy() {
        this.onDestroy$.next(true);
        this.onDestroy$.complete();
    }
}
TaskHeaderCloudComponent.ɵfac = function TaskHeaderCloudComponent_Factory(t) { return new (t || TaskHeaderCloudComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.TaskCloudService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.TranslationService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.AppConfigService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.CardViewUpdateService)); };
TaskHeaderCloudComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: TaskHeaderCloudComponent, selectors: [["adf-cloud-task-header"]], inputs: { appName: "appName", showTitle: "showTitle", taskId: "taskId" }, outputs: { claim: "claim", unclaim: "unclaim", error: "error" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 5, vars: 2, consts: [["class", "adf-task-title", 4, "ngIf"], [1, "adf-task-header-container"], ["class", "adf-card-container", 4, "ngIf"], ["loadingTemplate", ""], [1, "adf-task-title"], [1, "adf-card-container"], [3, "displayNoneOption", "properties", "editable", "displayClearAction", 4, "ngIf", "ngIfElse"], [3, "displayNoneOption", "properties", "editable", "displayClearAction"], [1, "adf-task-header-loading"]], template: function TaskHeaderCloudComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, TaskHeaderCloudComponent_h3_0_Template, 2, 1, "h3", 0);
        ɵngcc0.ɵɵelementStart(1, "div", 1);
        ɵngcc0.ɵɵtemplate(2, TaskHeaderCloudComponent_mat_card_2_Template, 3, 2, "mat-card", 2);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(3, TaskHeaderCloudComponent_ng_template_3_Template, 2, 0, "ng-template", null, 3, ɵngcc0.ɵɵtemplateRefExtractor);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngIf", ctx.showTitle);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.isTaskValid());
    } }, directives: [ɵngcc3.NgIf, ɵngcc4.MatCard, ɵngcc4.MatCardContent, ɵngcc2.CardViewComponent, ɵngcc5.MatSpinner], styles: [".adf-controls{display:flex;justify-content:space-between}.adf-edit-controls{display:flex;justify-content:flex-end;margin-left:auto}.adf-save-edit-mode,.adf-switch-to-edit-mode{color:var(--theme-primary-color)}.adf-cancel-edit-mode,.adf-claim-controls{color:#838383}@media screen and (max-width:959px){adf-card-view .adf-property-value{overflow:hidden;text-overflow:ellipsis;white-space:nowrap}}.adf-task-header-loading{display:flex;justify-content:center}"], encapsulation: 2 });
TaskHeaderCloudComponent.ctorParameters = () => [
    { type: TaskCloudService },
    { type: TranslationService },
    { type: AppConfigService },
    { type: CardViewUpdateService }
];
TaskHeaderCloudComponent.propDecorators = {
    appName: [{ type: Input }],
    taskId: [{ type: Input }],
    showTitle: [{ type: Input }],
    claim: [{ type: Output }],
    unclaim: [{ type: Output }],
    error: [{ type: Output }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TaskHeaderCloudComponent, [{
        type: Component,
        args: [{
                selector: 'adf-cloud-task-header',
                template: "<h3 *ngIf=\"showTitle\" class=\"adf-task-title\">{{ taskDetails?.name }}</h3>\n\n<div class=\"adf-task-header-container\">\n    <mat-card *ngIf=\"isTaskValid()\" class=\"adf-card-container\">\n        <mat-card-content>\n            <adf-card-view\n                *ngIf=\"!isLoading; else loadingTemplate\"\n                [displayNoneOption]=\"false\"\n                [properties]=\"properties\"\n                [editable]=\"isTaskEditable()\"\n                [displayClearAction]=\"displayDateClearAction\">\n            </adf-card-view>\n        </mat-card-content>\n    </mat-card>\n</div>\n\n<ng-template #loadingTemplate>\n    <div class=\"adf-task-header-loading\">\n        <mat-spinner></mat-spinner>\n    </div>\n</ng-template>\n",
                encapsulation: ViewEncapsulation.None,
                styles: [".adf-controls{display:flex;justify-content:space-between}.adf-edit-controls{display:flex;justify-content:flex-end;margin-left:auto}.adf-save-edit-mode,.adf-switch-to-edit-mode{color:var(--theme-primary-color)}.adf-cancel-edit-mode,.adf-claim-controls{color:#838383}@media screen and (max-width:959px){adf-card-view .adf-property-value{overflow:hidden;text-overflow:ellipsis;white-space:nowrap}}.adf-task-header-loading{display:flex;justify-content:center}"]
            }]
    }], function () { return [{ type: ɵngcc1.TaskCloudService }, { type: ɵngcc2.TranslationService }, { type: ɵngcc2.AppConfigService }, { type: ɵngcc2.CardViewUpdateService }]; }, { appName: [{
            type: Input
        }], showTitle: [{
            type: Input
        }], claim: [{
            type: Output
        }], unclaim: [{
            type: Output
        }], error: [{
            type: Output
        }], taskId: [{
            type: Input
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,