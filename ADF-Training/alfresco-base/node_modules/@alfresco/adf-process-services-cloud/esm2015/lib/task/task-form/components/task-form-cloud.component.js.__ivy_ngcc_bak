/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, EventEmitter, Input, Output, ViewEncapsulation } from '@angular/core';
import { TaskCloudService } from '../../services/task-cloud.service';
import { FormRenderingService } from '@alfresco/adf-core';
import { AttachFileCloudWidgetComponent } from '../../../form/components/widgets/attach-file/attach-file-cloud-widget.component';
import { DropdownCloudWidgetComponent } from '../../../form/components/widgets/dropdown/dropdown-cloud.widget';
import { DateCloudWidgetComponent } from '../../../form/components/widgets/date/date-cloud.widget';
export class TaskFormCloudComponent {
    constructor(taskCloudService, formRenderingService) {
        this.taskCloudService = taskCloudService;
        this.formRenderingService = formRenderingService;
        this.appName = '';
        this.showTitle = true;
        this.showRefreshButton = false;
        this.showValidationIcon = true;
        this.showCancelButton = true;
        this.showCompleteButton = true;
        this.readOnly = false;
        this.formSaved = new EventEmitter();
        this.formCompleted = new EventEmitter();
        this.taskCompleted = new EventEmitter();
        this.taskClaimed = new EventEmitter();
        this.taskUnclaimed = new EventEmitter();
        this.cancelClick = new EventEmitter();
        this.error = new EventEmitter();
        this.formContentClicked = new EventEmitter();
        this.candidateUsers = [];
        this.candidateGroups = [];
        this.loading = false;
        this.formRenderingService.setComponentTypeResolver('upload', () => AttachFileCloudWidgetComponent, true);
        this.formRenderingService.setComponentTypeResolver('dropdown', () => DropdownCloudWidgetComponent, true);
        this.formRenderingService.setComponentTypeResolver('date', () => DateCloudWidgetComponent, true);
    }
    ngOnInit() {
        if (this.appName === '' && this.taskId) {
            this.loadTask();
        }
    }
    ngOnChanges(changes) {
        const appName = changes['appName'];
        if (appName && (appName.currentValue !== appName.previousValue) && this.taskId) {
            this.loadTask();
            return;
        }
        const taskId = changes['taskId'];
        if (taskId && taskId.currentValue && this.appName) {
            this.loadTask();
            return;
        }
    }
    loadTask() {
        this.loading = true;
        this.taskCloudService
            .getTaskById(this.appName, this.taskId)
            .subscribe(details => {
            this.taskDetails = details;
            this.loading = false;
        });
        this.taskCloudService
            .getCandidateUsers(this.appName, this.taskId)
            .subscribe(users => this.candidateUsers = users || []);
        this.taskCloudService
            .getCandidateGroups(this.appName, this.taskId)
            .subscribe(groups => this.candidateGroups = groups || []);
    }
    hasForm() {
        return this.taskDetails && !!this.taskDetails.formKey;
    }
    canCompleteTask() {
        return this.showCompleteButton && !this.readOnly && this.taskCloudService.canCompleteTask(this.taskDetails);
    }
    canClaimTask() {
        return !this.readOnly && this.taskCloudService.canClaimTask(this.taskDetails);
    }
    hasCandidateUsers() {
        return this.candidateUsers.length !== 0;
    }
    hasCandidateGroups() {
        return this.candidateGroups.length !== 0;
    }
    hasCandidateUsersOrGroups() {
        var _a;
        let hasCandidateUsersOrGroups = false;
        if (((_a = this.taskDetails) === null || _a === void 0 ? void 0 : _a.status) === 'ASSIGNED') {
            hasCandidateUsersOrGroups = this.hasCandidateUsers() || this.hasCandidateGroups();
        }
        return hasCandidateUsersOrGroups;
    }
    canUnclaimTask() {
        return !this.readOnly && this.taskCloudService.canUnclaimTask(this.taskDetails);
    }
    isReadOnly() {
        return this.readOnly || !this.taskCloudService.canCompleteTask(this.taskDetails);
    }
    onCompleteTask() {
        this.loadTask();
        this.taskCompleted.emit(this.taskId);
    }
    onClaimTask() {
        this.loadTask();
        this.taskClaimed.emit(this.taskId);
    }
    onUnclaimTask() {
        this.loadTask();
        this.taskUnclaimed.emit(this.taskId);
    }
    onCancelClick() {
        this.cancelClick.emit(this.taskId);
    }
    onFormSaved(form) {
        this.formSaved.emit(form);
    }
    onFormCompleted(form) {
        this.formCompleted.emit(form);
        this.taskCompleted.emit(this.taskId);
    }
    onError(data) {
        this.error.emit(data);
    }
    onFormContentClicked(content) {
        this.formContentClicked.emit(content);
    }
}
TaskFormCloudComponent.decorators = [
    { type: Component, args: [{
                selector: 'adf-cloud-task-form',
                template: "<div *ngIf=\"!loading; else loadingTemplate\">\n    <adf-cloud-form *ngIf=\"hasForm(); else withoutForm\"\n                    [appName]=\"appName\"\n                    [appVersion]=\"taskDetails.appVersion\"\n                    [taskId]=\"taskId\"\n                    [showTitle]=\"showTitle\"\n                    [processInstanceId]=\"taskDetails.processInstanceId\"\n                    [readOnly]=\"isReadOnly()\"\n                    [showRefreshButton]=\"showRefreshButton\"\n                    [showValidationIcon]=\"showValidationIcon\"\n                    [showCompleteButton]=\"canCompleteTask()\"\n                    [showSaveButton]=\"canCompleteTask()\"\n                    (formSaved)=\"onFormSaved($event)\"\n                    (formCompleted)=\"onFormCompleted($event)\"\n                    (formError)=\"onError($event)\"\n                    (error)=\"onError($event)\"\n                    (formContentClicked)=\"onFormContentClicked($event)\">\n        <adf-cloud-form-custom-outcomes>\n            <ng-template [ngTemplateOutlet]=\"taskFormCloudButtons\">\n            </ng-template>\n        </adf-cloud-form-custom-outcomes>\n    </adf-cloud-form>\n\n    <ng-template #withoutForm>\n        <mat-card class=\"adf-task-form-container\">\n            <mat-card-header *ngIf=\"showTitle\">\n                <mat-card-title>\n                    <h4>\n                        <span class=\"adf-form-title\">\n                            {{ taskDetails?.name || 'FORM.FORM_RENDERER.NAMELESS_TASK' | translate }}\n                        </span>\n                    </h4>\n                </mat-card-title>\n            </mat-card-header>\n            <mat-card-content>\n                <adf-empty-content\n                    [icon]=\"'description'\"\n                    [title]=\"'ADF_CLOUD_TASK_FORM.EMPTY_FORM.TITLE'\"\n                    [subtitle]=\"'ADF_CLOUD_TASK_FORM.EMPTY_FORM.SUBTITLE'\">\n                </adf-empty-content>\n            </mat-card-content>\n            <mat-card-actions class=\"adf-task-form-actions\">\n                <ng-template [ngTemplateOutlet]=\"taskFormCloudButtons\">\n                </ng-template>\n                <button mat-button *ngIf=\"canCompleteTask()\" adf-cloud-complete-task [appName]=\"appName\"\n                        [taskId]=\"taskId\" (success)=\"onCompleteTask()\" (error)=\"onError($event)\" color=\"primary\" id=\"adf-form-complete\">\n                    {{'ADF_CLOUD_TASK_FORM.EMPTY_FORM.BUTTONS.COMPLETE' | translate}}\n                </button>\n            </mat-card-actions>\n        </mat-card>\n    </ng-template>\n    <ng-template #taskFormCloudButtons>\n        <button mat-button *ngIf=\"showCancelButton\" id=\"adf-cloud-cancel-task\" (click)=\"onCancelClick()\">\n            {{'ADF_CLOUD_TASK_FORM.EMPTY_FORM.BUTTONS.CANCEL' | translate}}\n        </button>\n        <button mat-button *ngIf=\"canClaimTask()\" adf-cloud-claim-task [appName]=\"appName\" [taskId]=\"taskId\"\n                (success)=\"onClaimTask()\" (error)=\"onError($event)\">\n            {{'ADF_CLOUD_TASK_FORM.EMPTY_FORM.BUTTONS.CLAIM' | translate}}\n        </button>\n        <button mat-button *ngIf=\"hasCandidateUsersOrGroups()\" adf-cloud-unclaim-task [appName]=\"appName\" [taskId]=\"taskId\"\n                (success)=\"onUnclaimTask()\" (error)=\"onError($event)\">\n            {{'ADF_CLOUD_TASK_FORM.EMPTY_FORM.BUTTONS.UNCLAIM' | translate}}\n        </button>\n    </ng-template>\n</div>\n\n<ng-template #loadingTemplate>\n    <div fxLayout=\"row\" fxLayoutAlign=\"center stretch\">\n        <mat-spinner></mat-spinner>\n    </div>\n</ng-template>\n",
                encapsulation: ViewEncapsulation.None,
                styles: [".adf-task-form-container{overflow:hidden}.adf-task-form-actions{float:right;padding-bottom:25px!important;padding-right:25px!important}.adf-task-form-actions .mat-button{border-radius:5px;height:36px}.adf-task-form-actions .mat-button-wrapper{font-size:var(--theme-body-2-font-size);font-weight:700;height:20px;opacity:.54;width:58px}"]
            },] }
];
TaskFormCloudComponent.ctorParameters = () => [
    { type: TaskCloudService },
    { type: FormRenderingService }
];
TaskFormCloudComponent.propDecorators = {
    appName: [{ type: Input }],
    taskId: [{ type: Input }],
    showTitle: [{ type: Input }],
    showRefreshButton: [{ type: Input }],
    showValidationIcon: [{ type: Input }],
    showCancelButton: [{ type: Input }],
    showCompleteButton: [{ type: Input }],
    readOnly: [{ type: Input }],
    formSaved: [{ type: Output }],
    formCompleted: [{ type: Output }],
    taskCompleted: [{ type: Output }],
    taskClaimed: [{ type: Output }],
    taskUnclaimed: [{ type: Output }],
    cancelClick: [{ type: Output }],
    error: [{ type: Output }],
    formContentClicked: [{ type: Output }]
};
//# sourceMappingURL=data:application/json;base64,