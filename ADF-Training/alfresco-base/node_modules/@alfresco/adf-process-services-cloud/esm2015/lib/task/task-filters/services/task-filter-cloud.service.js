import { AlfrescoApiService, AppConfigService, IdentityUserService } from '@alfresco/adf-core';
import { Injectable, Inject } from '@angular/core';
import { of, BehaviorSubject, throwError } from 'rxjs';
import { TaskFilterCloudModel } from '../models/filter-cloud.model';
import { switchMap, map } from 'rxjs/operators';
import { BaseCloudService } from '../../../services/base-cloud.service';
import { TASK_FILTERS_SERVICE_TOKEN } from '../../../services/cloud-token.service';
import { NotificationCloudService } from '../../../services/notification-cloud.service';
import * as i0 from "@angular/core";
import * as i1 from "@alfresco/adf-core";
import * as i2 from "../../../services/cloud-token.service";
import * as i3 from "../../../services/notification-cloud.service";
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@alfresco/adf-core';
import * as ɵngcc2 from '../../../services/notification-cloud.service';
const TASK_EVENT_SUBSCRIPTION_QUERY = `
    subscription {
        engineEvents(eventType: [
            TASK_COMPLETED
            TASK_ASSIGNED
            TASK_ACTIVATED
            TASK_SUSPENDED
            TASK_CANCELLED,
            TASK_CREATED
        ]) {
            eventType
            entity
        }
    }
`;
export class TaskFilterCloudService extends BaseCloudService {
    constructor(identityUserService, preferenceService, apiService, appConfigService, notificationCloudService) {
        super(apiService, appConfigService);
        this.identityUserService = identityUserService;
        this.preferenceService = preferenceService;
        this.notificationCloudService = notificationCloudService;
        this.filtersSubject = new BehaviorSubject([]);
        this.filters$ = this.filtersSubject.asObservable();
    }
    createDefaultFilters(appName) {
        const key = this.prepareKey(appName);
        this.preferenceService.getPreferences(appName, key).pipe(switchMap((response) => {
            const preferences = (response && response.list && response.list.entries) ? response.list.entries : [];
            if (!this.hasPreferences(preferences) || !this.hasTaskFilters(preferences, key)) {
                return this.createTaskFilters(appName, key, this.defaultTaskFilters(appName));
            }
            else {
                return of(this.findFiltersByKeyInPreferences(preferences, key));
            }
        })).subscribe((filters) => {
            this.addFiltersToStream(filters);
        });
    }
    hasPreferences(preferences) {
        return preferences && preferences.length > 0;
    }
    hasTaskFilters(preferences, key) {
        const filters = preferences.find((filter) => { return filter.entry.key === key; });
        return (filters && filters.entry) ? JSON.parse(filters.entry.value).length > 0 : false;
    }
    createTaskFilters(appName, key, filters) {
        return this.preferenceService.createPreference(appName, key, filters);
    }
    getTaskFiltersByKey(appName, key) {
        return this.preferenceService.getPreferenceByKey(appName, key);
    }
    getTaskListFilters(appName) {
        this.createDefaultFilters(appName);
        return this.filters$;
    }
    getTaskFilterById(appName, id) {
        const key = this.prepareKey(appName);
        return this.getTaskFiltersByKey(appName, key).pipe(switchMap((filters) => {
            if (filters && filters.length === 0) {
                return this.createTaskFilters(appName, key, this.defaultTaskFilters(appName));
            }
            else {
                return of(filters);
            }
        }), map((filters) => {
            return filters.filter((filter) => {
                return filter.id === id;
            })[0];
        }));
    }
    addFilter(newFilter) {
        const key = this.prepareKey(newFilter.appName);
        return this.getTaskFiltersByKey(newFilter.appName, key).pipe(switchMap((filters) => {
            if (filters && filters.length === 0) {
                return this.createTaskFilters(newFilter.appName, key, [newFilter]);
            }
            else {
                filters.push(newFilter);
                return this.preferenceService.updatePreference(newFilter.appName, key, filters);
            }
        }), map((filters) => {
            this.addFiltersToStream(filters);
            return filters;
        }));
    }
    addFiltersToStream(filters) {
        this.filtersSubject.next(filters);
    }
    updateFilter(updatedFilter) {
        const key = this.prepareKey(updatedFilter.appName);
        return this.getTaskFiltersByKey(updatedFilter.appName, key).pipe(switchMap((filters) => {
            if (filters && filters.length === 0) {
                return this.createTaskFilters(updatedFilter.appName, key, [updatedFilter]);
            }
            else {
                const itemIndex = filters.findIndex((filter) => filter.id === updatedFilter.id);
                filters[itemIndex] = updatedFilter;
                return this.updateTaskFilters(updatedFilter.appName, key, filters);
            }
        }), map((updatedFilters) => {
            this.addFiltersToStream(updatedFilters);
            return updatedFilters;
        }));
    }
    deleteFilter(deletedFilter) {
        const key = this.prepareKey(deletedFilter.appName);
        return this.getTaskFiltersByKey(deletedFilter.appName, key).pipe(switchMap((filters) => {
            if (filters && filters.length > 0) {
                filters = filters.filter(filter => filter.id !== deletedFilter.id);
                return this.updateTaskFilters(deletedFilter.appName, key, filters);
            }
            return of([]);
        }), map(filters => {
            this.addFiltersToStream(filters);
            return filters;
        }));
    }
    isDefaultFilter(filterName) {
        const defaultFilters = this.defaultTaskFilters();
        return defaultFilters.findIndex((filter) => filterName === filter.name) !== -1;
    }
    getTaskFilterCounter(taskFilter) {
        if (taskFilter.appName || taskFilter.appName === '') {
            const queryUrl = `${this.getBasePath(taskFilter.appName)}/query/v1/tasks`;
            const queryParams = {
                assignee: taskFilter.assignee,
                status: taskFilter.status,
                appName: taskFilter.appName,
                maxItems: 1
            };
            return this.get(queryUrl, queryParams).pipe(map((tasks) => tasks.list.pagination.totalItems));
        }
        else {
            return throwError('Appname not configured');
        }
    }
    updateTaskFilters(appName, key, filters) {
        return this.preferenceService.updatePreference(appName, key, filters);
    }
    prepareKey(appName) {
        return `task-filters-${appName}-${this.identityUserService.getCurrentUserInfo().username}`;
    }
    findFiltersByKeyInPreferences(preferences, key) {
        const result = preferences.find((filter) => { return filter.entry.key === key; });
        return result && result.entry ? JSON.parse(result.entry.value) : [];
    }
    defaultTaskFilters(appName) {
        return [
            new TaskFilterCloudModel({
                name: 'ADF_CLOUD_TASK_FILTERS.MY_TASKS',
                key: 'my-tasks',
                icon: 'inbox',
                appName,
                status: 'ASSIGNED',
                assignee: this.identityUserService.getCurrentUserInfo().username,
                sort: 'createdDate',
                order: 'DESC',
                showCounter: true
            }),
            new TaskFilterCloudModel({
                name: 'ADF_CLOUD_TASK_FILTERS.QUEUED_TASKS',
                key: 'queued-tasks',
                icon: 'queue',
                appName,
                status: 'CREATED',
                assignee: '',
                sort: 'createdDate',
                order: 'DESC',
                showCounter: true
            }),
            new TaskFilterCloudModel({
                name: 'ADF_CLOUD_TASK_FILTERS.COMPLETED_TASKS',
                key: 'completed-tasks',
                icon: 'done',
                appName,
                status: 'COMPLETED',
                assignee: '',
                sort: 'createdDate',
                order: 'DESC'
            })
        ];
    }
    getTaskNotificationSubscription(appName) {
        return this.notificationCloudService.makeGQLQuery(appName, TASK_EVENT_SUBSCRIPTION_QUERY)
            .pipe(map((events) => events.data.engineEvents));
    }
}
TaskFilterCloudService.ɵfac = function TaskFilterCloudService_Factory(t) { return new (t || TaskFilterCloudService)(ɵngcc0.ɵɵinject(ɵngcc1.IdentityUserService), ɵngcc0.ɵɵinject(TASK_FILTERS_SERVICE_TOKEN), ɵngcc0.ɵɵinject(ɵngcc1.AlfrescoApiService), ɵngcc0.ɵɵinject(ɵngcc1.AppConfigService), ɵngcc0.ɵɵinject(ɵngcc2.NotificationCloudService)); };
TaskFilterCloudService.ɵprov = i0.ɵɵdefineInjectable({ factory: function TaskFilterCloudService_Factory() { return new TaskFilterCloudService(i0.ɵɵinject(i1.IdentityUserService), i0.ɵɵinject(i2.TASK_FILTERS_SERVICE_TOKEN), i0.ɵɵinject(i1.AlfrescoApiService), i0.ɵɵinject(i1.AppConfigService), i0.ɵɵinject(i3.NotificationCloudService)); }, token: TaskFilterCloudService, providedIn: "root" });
TaskFilterCloudService.ctorParameters = () => [
    { type: IdentityUserService },
    { type: undefined, decorators: [{ type: Inject, args: [TASK_FILTERS_SERVICE_TOKEN,] }] },
    { type: AlfrescoApiService },
    { type: AppConfigService },
    { type: NotificationCloudService }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TaskFilterCloudService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc1.IdentityUserService }, { type: undefined, decorators: [{
                type: Inject,
                args: [TASK_FILTERS_SERVICE_TOKEN]
            }] }, { type: ɵngcc1.AlfrescoApiService }, { type: ɵngcc1.AppConfigService }, { type: ɵngcc2.NotificationCloudService }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,