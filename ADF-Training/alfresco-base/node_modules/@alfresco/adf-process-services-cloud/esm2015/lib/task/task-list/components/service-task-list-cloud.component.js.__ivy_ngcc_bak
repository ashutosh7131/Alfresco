/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, ViewEncapsulation, Input } from '@angular/core';
import { AppConfigService, UserPreferencesService } from '@alfresco/adf-core';
import { BaseTaskListCloudComponent } from './base-task-list-cloud.component';
import { ServiceTaskListCloudService } from '../services/service-task-list-cloud.service';
import { TaskCloudService } from '../../services/task-cloud.service';
export class ServiceTaskListCloudComponent extends BaseTaskListCloudComponent {
    constructor(serviceTaskListCloudService, appConfigService, taskCloudService, userPreferences) {
        super(appConfigService, taskCloudService, userPreferences, ServiceTaskListCloudComponent.PRESET_KEY);
        this.serviceTaskListCloudService = serviceTaskListCloudService;
        this.queryParams = {};
    }
    load(requestNode) {
        this.isLoading = true;
        this.serviceTaskListCloudService.getServiceTaskByRequest(requestNode).subscribe((tasks) => {
            this.rows = tasks.list.entries;
            this.success.emit(tasks);
            this.isLoading = false;
            this.pagination.next(tasks.list.pagination);
        }, (error) => {
            this.error.emit(error);
            this.isLoading = false;
        });
    }
    createRequestNode() {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q;
        const requestNode = {
            appName: this.appName,
            maxItems: this.size,
            skipCount: this.skipCount,
            sorting: this.sorting,
            id: (_a = this.queryParams) === null || _a === void 0 ? void 0 : _a.serviceTaskId,
            activityName: (_b = this.queryParams) === null || _b === void 0 ? void 0 : _b.activityName,
            activityType: (_c = this.queryParams) === null || _c === void 0 ? void 0 : _c.activityType,
            completedDate: (_d = this.queryParams) === null || _d === void 0 ? void 0 : _d.completedDate,
            elementId: (_e = this.queryParams) === null || _e === void 0 ? void 0 : _e.elementId,
            executionId: (_f = this.queryParams) === null || _f === void 0 ? void 0 : _f.executionId,
            processDefinitionId: (_g = this.queryParams) === null || _g === void 0 ? void 0 : _g.processDefinitionId,
            processDefinitionKey: (_h = this.queryParams) === null || _h === void 0 ? void 0 : _h.processDefinitionKey,
            processDefinitionVersion: (_j = this.queryParams) === null || _j === void 0 ? void 0 : _j.processDefinitionVersion,
            processInstanceId: (_k = this.queryParams) === null || _k === void 0 ? void 0 : _k.processInstanceId,
            serviceFullName: (_l = this.queryParams) === null || _l === void 0 ? void 0 : _l.serviceFullName,
            serviceName: (_m = this.queryParams) === null || _m === void 0 ? void 0 : _m.serviceName,
            serviceVersion: (_o = this.queryParams) === null || _o === void 0 ? void 0 : _o.serviceVersion,
            startedDate: (_p = this.queryParams) === null || _p === void 0 ? void 0 : _p.startedDate,
            status: (_q = this.queryParams) === null || _q === void 0 ? void 0 : _q.status
        };
        return requestNode;
    }
}
ServiceTaskListCloudComponent.PRESET_KEY = 'adf-cloud-service-task-list.presets';
ServiceTaskListCloudComponent.decorators = [
    { type: Component, args: [{
                selector: 'adf-cloud-service-task-list',
                template: "<div *ngIf=\"!rows\">{{ 'ADF_CLOUD_TASK_LIST.FILTERS.MESSAGES.NONE' | translate }}</div>\n<ng-container *ngIf=\"rows\">\n        <adf-datatable\n            [rows]=\"rows\"\n            [columns]=\"columns\"\n            [loading]=\"isLoading\"\n            [sorting]=\"formattedSorting\"\n            [multiselect]=\"multiselect\"\n            [selectionMode]=\"selectionMode\"\n            [stickyHeader]=\"stickyHeader\"\n            [actions]=\"showActions\"\n            [actionsPosition]=\"actionsPosition\"\n            [contextMenu]=\"showContextMenu\"\n            [resolverFn]=\"boundReplacePriorityValues\"\n            (showRowActionsMenu)=\"onShowRowActionsMenu($event)\"\n            (showRowContextMenu)=\"onShowRowContextMenu($event)\"\n            (executeRowAction)=\"onExecuteRowAction($event)\"\n            (row-select)=\"onRowSelect($any($event))\"\n            (row-unselect)=\"onRowUnselect($any($event))\"\n            (rowClick)=\"onRowClick($any($event))\"\n            (row-keyup)=\"onRowKeyUp($any($event))\"\n            (sorting-changed)=\"onSortingChanged($any($event))\">\n            <adf-loading-content-template>\n                <ng-template>\n                    <!-- Add your custom loading template here -->\n                    <mat-progress-spinner class=\"adf-cloud-task-list-loading-margin\"\n                                          [color]=\"'primary'\"\n                                          [mode]=\"'indeterminate'\">\n                    </mat-progress-spinner>\n                </ng-template>\n            </adf-loading-content-template>\n            <adf-no-content-template>\n                <ng-template>\n                    <adf-empty-content *ngIf=\"!emptyCustomContent\"\n                                       icon=\"assignment\"\n                                       [title]=\"'ADF_CLOUD_TASK_LIST.LIST.MESSAGES.TITLE' | translate\"\n                                       [subtitle]=\"'ADF_CLOUD_TASK_LIST.LIST.MESSAGES.SUBTITLE' | translate\">\n                    </adf-empty-content>\n                    <ng-content select=\"adf-custom-empty-content-template\"></ng-content>\n                </ng-template>\n            </adf-no-content-template>\n        </adf-datatable>\n</ng-container>\n",
                encapsulation: ViewEncapsulation.None,
                styles: [".adf-cloud-task-list-loading-margin{margin-left:calc(50% - 50px);margin-right:calc(50% - 50px)}"]
            },] }
];
ServiceTaskListCloudComponent.ctorParameters = () => [
    { type: ServiceTaskListCloudService },
    { type: AppConfigService },
    { type: TaskCloudService },
    { type: UserPreferencesService }
];
ServiceTaskListCloudComponent.propDecorators = {
    queryParams: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,