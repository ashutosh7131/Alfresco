import { Component, EventEmitter, Input, Output, ViewEncapsulation, ViewChild } from '@angular/core';
import { DateAdapter, MAT_DATE_FORMATS } from '@angular/material/core';
import moment from 'moment-es6';
import { Subject } from 'rxjs';
import { FormBuilder, Validators, FormControl } from '@angular/forms';
import { MOMENT_DATE_FORMATS, MomentDateAdapter, LogService, UserPreferencesService, IdentityUserService, UserPreferenceValues } from '@alfresco/adf-core';
import { PeopleCloudComponent } from '../../../people/components/people-cloud.component';
import { GroupCloudComponent } from '../../../group/components/group-cloud.component';
import { TaskCloudService } from '../../services/task-cloud.service';
import { StartTaskCloudRequestModel } from '../models/start-task-cloud-request.model';
import { takeUntil } from 'rxjs/operators';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../../services/task-cloud.service';
import * as ɵngcc2 from '@angular/material/core';
import * as ɵngcc3 from '@alfresco/adf-core';
import * as ɵngcc4 from '@angular/forms';
import * as ɵngcc5 from '@angular/material/card';
import * as ɵngcc6 from '@angular/flex-layout/flex';
import * as ɵngcc7 from '@angular/material/form-field';
import * as ɵngcc8 from '@angular/material/input';
import * as ɵngcc9 from '@angular/common';
import * as ɵngcc10 from '@angular/material/select';
import * as ɵngcc11 from '@angular/material/datepicker';
import * as ɵngcc12 from '@angular/material/button';
import * as ɵngcc13 from '@angular/material/icon';
import * as ɵngcc14 from '../../../people/components/people-cloud.component';
import * as ɵngcc15 from '../../../group/components/group-cloud.component';
import * as ɵngcc16 from '../../../form/components/form-definition-selector-cloud.component';
import * as ɵngcc17 from '@ngx-translate/core';

const _c0 = ["peopleInput"];
const _c1 = ["groupInput"];
function StartTaskCloudComponent_mat_error_13_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-error");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 1, "ADF_CLOUD_START_TASK.ERROR.REQUIRED"), " ");
} }
const _c2 = function (a0) { return { characters: a0 }; };
function StartTaskCloudComponent_mat_error_14_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-error");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind2(2, 1, "ADF_CLOUD_START_TASK.ERROR.MAXIMUM_LENGTH", ɵngcc0.ɵɵpureFunction1(4, _c2, ctx_r1.maxNameLength)), " ");
} }
function StartTaskCloudComponent_mat_option_27_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-option", 22);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const priorityOption_r8 = ctx.$implicit;
    ɵngcc0.ɵɵproperty("value", priorityOption_r8.value);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(2, 2, priorityOption_r8.label));
} }
function StartTaskCloudComponent_div_36_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div");
    ɵngcc0.ɵɵelementStart(1, "div", 23);
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(4, "mat-icon", 24);
    ɵngcc0.ɵɵtext(5, "warning");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(3, 1, "ADF_CLOUD_START_TASK.ERROR.DATE"));
} }
const _c3 = function (a0) { return [a0]; };
function StartTaskCloudComponent_adf_cloud_people_37_Template(rf, ctx) { if (rf & 1) {
    const _r11 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "adf-cloud-people", 25, 26);
    ɵngcc0.ɵɵlistener("selectUser", function StartTaskCloudComponent_adf_cloud_people_37_Template_adf_cloud_people_selectUser_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r11); const ctx_r10 = ɵngcc0.ɵɵnextContext(); return ctx_r10.onAssigneeSelect($event); })("removeUser", function StartTaskCloudComponent_adf_cloud_people_37_Template_adf_cloud_people_removeUser_0_listener() { ɵngcc0.ɵɵrestoreView(_r11); const ctx_r12 = ɵngcc0.ɵɵnextContext(); return ctx_r12.onAssigneeRemove(); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r5 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("appName", ctx_r5.appName)("preSelectUsers", ɵngcc0.ɵɵpureFunction1(4, _c3, ctx_r5.currentUser))("searchUserCtrl", ctx_r5.assigneeFormControl)("title", "ADF_CLOUD_TASK_LIST.START_TASK.FORM.LABEL.ASSIGNEE");
} }
function StartTaskCloudComponent_adf_cloud_group_39_Template(rf, ctx) { if (rf & 1) {
    const _r15 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "adf-cloud-group", 27, 28);
    ɵngcc0.ɵɵlistener("selectGroup", function StartTaskCloudComponent_adf_cloud_group_39_Template_adf_cloud_group_selectGroup_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r15); const ctx_r14 = ɵngcc0.ɵɵnextContext(); return ctx_r14.onCandidateGroupSelect($event); })("removeGroup", function StartTaskCloudComponent_adf_cloud_group_39_Template_adf_cloud_group_removeGroup_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r15); const ctx_r16 = ɵngcc0.ɵɵnextContext(); return ctx_r16.onCandidateGroupRemove($event); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r6 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("mode", "multiple")("title", "ADF_CLOUD_TASK_LIST.START_TASK.FORM.LABEL.CANDIDATE_GROUP")("appName", ctx_r6.appName)("searchGroupsControl", ctx_r6.candidateUserFormControl);
} }
function StartTaskCloudComponent_adf_cloud_form_definition_selector_40_Template(rf, ctx) { if (rf & 1) {
    const _r18 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "adf-cloud-form-definition-selector", 29);
    ɵngcc0.ɵɵlistener("selectForm", function StartTaskCloudComponent_adf_cloud_form_definition_selector_40_Template_adf_cloud_form_definition_selector_selectForm_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r18); const ctx_r17 = ɵngcc0.ɵɵnextContext(); return ctx_r17.onFormSelect($event); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r7 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("appName", ctx_r7.appName);
} }
const _c4 = function () { return { standalone: true }; };
const ɵ0 = MOMENT_DATE_FORMATS;
export class StartTaskCloudComponent {
    constructor(taskService, dateAdapter, userPreferencesService, formBuilder, identityUserService, logService) {
        this.taskService = taskService;
        this.dateAdapter = dateAdapter;
        this.userPreferencesService = userPreferencesService;
        this.formBuilder = formBuilder;
        this.identityUserService = identityUserService;
        this.logService = logService;
        this.DATE_FORMAT = 'DD/MM/YYYY';
        this.appName = '';
        this.maxNameLength = StartTaskCloudComponent.MAX_NAME_LENGTH;
        this.name = '';
        this.success = new EventEmitter();
        this.cancel = new EventEmitter();
        this.error = new EventEmitter();
        this.submitted = false;
        this.candidateGroupNames = [];
        this.assigneeForm = new FormControl('');
        this.groupForm = new FormControl('');
        this.onDestroy$ = new Subject();
    }
    ngOnInit() {
        this.userPreferencesService
            .select(UserPreferenceValues.Locale)
            .pipe(takeUntil(this.onDestroy$))
            .subscribe(locale => this.dateAdapter.setLocale(locale));
        this.loadCurrentUser();
        this.buildForm();
        this.loadDefaultPriorities();
    }
    ngOnDestroy() {
        this.onDestroy$.next(true);
        this.onDestroy$.complete();
    }
    buildForm() {
        this.taskForm = this.formBuilder.group({
            name: new FormControl(this.name, [Validators.required, Validators.maxLength(this.getMaxNameLength()), this.whitespaceValidator]),
            priority: new FormControl(''),
            description: new FormControl('', [this.whitespaceValidator]),
            formKey: new FormControl()
        });
    }
    getMaxNameLength() {
        return this.maxNameLength > StartTaskCloudComponent.MAX_NAME_LENGTH ?
            StartTaskCloudComponent.MAX_NAME_LENGTH : this.maxNameLength;
    }
    loadCurrentUser() {
        this.currentUser = this.identityUserService.getCurrentUserInfo();
        this.assigneeName = this.currentUser.username;
    }
    loadDefaultPriorities() {
        this.priorities = this.taskService.priorities;
    }
    saveTask() {
        this.submitted = true;
        const newTask = Object.assign(this.taskForm.value);
        newTask.dueDate = this.dueDate;
        newTask.assignee = this.assigneeName;
        newTask.formKey = this.formKey;
        newTask.candidateGroups = this.candidateGroupNames;
        this.createNewTask(new StartTaskCloudRequestModel(newTask));
    }
    createNewTask(newTask) {
        this.taskService.createNewTask(newTask, this.appName)
            .subscribe((res) => {
            this.submitted = false;
            this.success.emit(res);
        }, (err) => {
            this.submitted = false;
            this.error.emit(err);
            this.logService.error('An error occurred while creating new task');
        });
    }
    onCancel() {
        this.cancel.emit();
    }
    onDateChanged(newDateValue) {
        this.dateError = false;
        if (newDateValue) {
            const momentDate = moment(newDateValue, this.DATE_FORMAT, true);
            if (!momentDate.isValid()) {
                this.dateError = true;
            }
        }
    }
    onAssigneeSelect(assignee) {
        this.assigneeName = assignee ? assignee.username : '';
    }
    onAssigneeRemove() {
        this.assigneeName = '';
    }
    onCandidateGroupSelect(candidateGroup) {
        if (candidateGroup.name) {
            this.candidateGroupNames.push(candidateGroup.name);
        }
    }
    onCandidateGroupRemove(candidateGroup) {
        if (candidateGroup.name) {
            this.candidateGroupNames = this.candidateGroupNames.filter((name) => {
                return name !== candidateGroup.name;
            });
        }
    }
    canStartTask() {
        return !(this.dateError ||
            !this.taskForm.valid ||
            this.submitted ||
            this.assignee.hasError() ||
            this.candidateGroups.hasError());
    }
    whitespaceValidator(control) {
        const isWhitespace = (control.value || '').trim().length === 0;
        const isValid = control.value.length === 0 || !isWhitespace;
        return isValid ? null : { 'whitespace': true };
    }
    get nameController() {
        return this.taskForm.get('name');
    }
    get priorityController() {
        return this.taskForm.get('priority');
    }
    get assigneeFormControl() {
        return this.assigneeForm;
    }
    get candidateUserFormControl() {
        return this.groupForm;
    }
    onFormSelect(formKey) {
        this.formKey = formKey || '';
    }
}
StartTaskCloudComponent.ɵfac = function StartTaskCloudComponent_Factory(t) { return new (t || StartTaskCloudComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.TaskCloudService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.DateAdapter), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.UserPreferencesService), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.FormBuilder), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.IdentityUserService), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.LogService)); };
StartTaskCloudComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: StartTaskCloudComponent, selectors: [["adf-cloud-start-task"]], viewQuery: function StartTaskCloudComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c0, true);
        ɵngcc0.ɵɵviewQuery(_c1, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.assignee = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.candidateGroups = _t.first);
    } }, inputs: { appName: "appName", maxNameLength: "maxNameLength", name: "name" }, outputs: { success: "success", cancel: "cancel", error: "error" }, features: [ɵngcc0.ɵɵProvidersFeature([
            { provide: DateAdapter, useClass: MomentDateAdapter },
            { provide: MAT_DATE_FORMATS, useValue: ɵ0 }
        ])], decls: 49, vars: 36, consts: [["fxLayout", "row", "fxLayoutAlign", "start center", "fxLayoutGap", "10px", 1, "adf-cloud-start-task-heading"], ["fxLayout", "column", 3, "formGroup", "ngSubmit"], [1, "adf-task-name"], ["fxFlex", ""], ["matInput", "", "id", "name_id", "formControlName", "name", 1, "form-control"], [4, "ngIf"], ["fxLayout", "row", "fxLayout.lt-md", "column", "fxLayoutGap", "20px", "fxLayoutGap.lt-md", "0px"], ["matInput", "", "id", "description_id", "formControlName", "description", 1, "form-control"], ["fxFlex", "", 1, "adf-cloud-priority-container"], ["formControlName", "priority"], [3, "value", 4, "ngFor", "ngForOf"], ["matInput", "", "id", "date_id", 3, "matDatepicker", "placeholder", "ngModel", "ngModelOptions", "keydown", "focusout", "ngModelChange"], ["matSuffix", "", 3, "for"], [3, "touchUi", "dateChanged"], ["taskDatePicker", ""], [1, "adf-cloud-date-error-container"], ["fxFlex", "", 3, "appName", "preSelectUsers", "searchUserCtrl", "title", "selectUser", "removeUser", 4, "ngIf"], ["fxFlex", "", 3, "mode", "title", "appName", "searchGroupsControl", "selectGroup", "removeGroup", 4, "ngIf"], ["fxFlex", "", 3, "appName", "selectForm", 4, "ngIf"], ["fxLayout", "row", "fxLayoutAlign", "end end", 1, "adf-cloud-start-task-footer"], ["mat-button", "", "type", "button", "id", "button-cancel", 3, "click"], ["color", "primary", "type", "submit", "mat-button", "", "id", "button-start", 3, "disabled"], [3, "value"], [1, "adf-error-text"], [1, "adf-error-icon"], ["fxFlex", "", 3, "appName", "preSelectUsers", "searchUserCtrl", "title", "selectUser", "removeUser"], ["peopleInput", ""], ["fxFlex", "", 3, "mode", "title", "appName", "searchGroupsControl", "selectGroup", "removeGroup"], ["groupInput", ""], ["fxFlex", "", 3, "appName", "selectForm"]], template: function StartTaskCloudComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "mat-card");
        ɵngcc0.ɵɵelementStart(1, "mat-card-header", 0);
        ɵngcc0.ɵɵelementStart(2, "mat-card-title");
        ɵngcc0.ɵɵtext(3);
        ɵngcc0.ɵɵpipe(4, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(5, "form", 1);
        ɵngcc0.ɵɵlistener("ngSubmit", function StartTaskCloudComponent_Template_form_ngSubmit_5_listener() { return ctx.saveTask(); });
        ɵngcc0.ɵɵelementStart(6, "mat-card-content");
        ɵngcc0.ɵɵelementStart(7, "div", 2);
        ɵngcc0.ɵɵelementStart(8, "mat-form-field", 3);
        ɵngcc0.ɵɵelementStart(9, "mat-label");
        ɵngcc0.ɵɵtext(10);
        ɵngcc0.ɵɵpipe(11, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(12, "input", 4);
        ɵngcc0.ɵɵtemplate(13, StartTaskCloudComponent_mat_error_13_Template, 3, 3, "mat-error", 5);
        ɵngcc0.ɵɵtemplate(14, StartTaskCloudComponent_mat_error_14_Template, 3, 6, "mat-error", 5);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(15, "div", 6);
        ɵngcc0.ɵɵelementStart(16, "mat-form-field", 3);
        ɵngcc0.ɵɵelementStart(17, "mat-label");
        ɵngcc0.ɵɵtext(18);
        ɵngcc0.ɵɵpipe(19, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(20, "textarea", 7);
        ɵngcc0.ɵɵtext(21, "                    ");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(22, "mat-form-field", 8);
        ɵngcc0.ɵɵelementStart(23, "mat-label");
        ɵngcc0.ɵɵtext(24);
        ɵngcc0.ɵɵpipe(25, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(26, "mat-select", 9);
        ɵngcc0.ɵɵtemplate(27, StartTaskCloudComponent_mat_option_27_Template, 3, 4, "mat-option", 10);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(28, "div", 6);
        ɵngcc0.ɵɵelementStart(29, "mat-form-field", 3);
        ɵngcc0.ɵɵelementStart(30, "input", 11);
        ɵngcc0.ɵɵlistener("keydown", function StartTaskCloudComponent_Template_input_keydown_30_listener() { return true; })("focusout", function StartTaskCloudComponent_Template_input_focusout_30_listener($event) { return ctx.onDateChanged($event.srcElement.value); })("ngModelChange", function StartTaskCloudComponent_Template_input_ngModelChange_30_listener($event) { return ctx.dueDate = $event; });
        ɵngcc0.ɵɵpipe(31, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(32, "mat-datepicker-toggle", 12);
        ɵngcc0.ɵɵelementStart(33, "mat-datepicker", 13, 14);
        ɵngcc0.ɵɵlistener("dateChanged", function StartTaskCloudComponent_Template_mat_datepicker_dateChanged_33_listener($event) { return ctx.onDateChanged($event); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(35, "div", 15);
        ɵngcc0.ɵɵtemplate(36, StartTaskCloudComponent_div_36_Template, 6, 3, "div", 5);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(37, StartTaskCloudComponent_adf_cloud_people_37_Template, 2, 6, "adf-cloud-people", 16);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(38, "div", 6);
        ɵngcc0.ɵɵtemplate(39, StartTaskCloudComponent_adf_cloud_group_39_Template, 2, 4, "adf-cloud-group", 17);
        ɵngcc0.ɵɵtemplate(40, StartTaskCloudComponent_adf_cloud_form_definition_selector_40_Template, 1, 1, "adf-cloud-form-definition-selector", 18);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(41, "mat-card-actions");
        ɵngcc0.ɵɵelementStart(42, "div", 19);
        ɵngcc0.ɵɵelementStart(43, "button", 20);
        ɵngcc0.ɵɵlistener("click", function StartTaskCloudComponent_Template_button_click_43_listener() { return ctx.onCancel(); });
        ɵngcc0.ɵɵtext(44);
        ɵngcc0.ɵɵpipe(45, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(46, "button", 21);
        ɵngcc0.ɵɵtext(47);
        ɵngcc0.ɵɵpipe(48, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        const _r3 = ɵngcc0.ɵɵreference(34);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(4, 21, "ADF_CLOUD_TASK_LIST.START_TASK.FORM.TITLE"));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("formGroup", ctx.taskForm);
        ɵngcc0.ɵɵadvance(5);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(11, 23, "ADF_CLOUD_TASK_LIST.START_TASK.FORM.LABEL.NAME"));
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngIf", ctx.nameController.hasError("required"));
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.nameController.hasError("maxlength"));
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(19, 25, "ADF_CLOUD_TASK_LIST.START_TASK.FORM.LABEL.DESCRIPTION"));
        ɵngcc0.ɵɵadvance(6);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(25, 27, "ADF_CLOUD_TASK_LIST.START_TASK.FORM.LABEL.PRIORITY"));
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.priorities);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵpropertyInterpolate("placeholder", ɵngcc0.ɵɵpipeBind1(31, 29, "ADF_CLOUD_TASK_LIST.START_TASK.FORM.LABEL.DATE"));
        ɵngcc0.ɵɵproperty("matDatepicker", _r3)("ngModel", ctx.dueDate)("ngModelOptions", ɵngcc0.ɵɵpureFunction0(35, _c4));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("for", _r3);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("touchUi", true);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngIf", ctx.dateError);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.currentUser);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.currentUser);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.appName);
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(45, 31, "ADF_CLOUD_TASK_LIST.START_TASK.FORM.ACTION.CANCEL"), " ");
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("disabled", !ctx.canStartTask());
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(48, 33, "ADF_CLOUD_TASK_LIST.START_TASK.FORM.ACTION.START"), " ");
    } }, directives: [ɵngcc5.MatCard, ɵngcc5.MatCardHeader, ɵngcc6.DefaultLayoutDirective, ɵngcc6.DefaultLayoutAlignDirective, ɵngcc6.DefaultLayoutGapDirective, ɵngcc5.MatCardTitle, ɵngcc4.ɵangular_packages_forms_forms_y, ɵngcc4.NgControlStatusGroup, ɵngcc4.FormGroupDirective, ɵngcc5.MatCardContent, ɵngcc7.MatFormField, ɵngcc6.DefaultFlexDirective, ɵngcc7.MatLabel, ɵngcc8.MatInput, ɵngcc4.DefaultValueAccessor, ɵngcc4.NgControlStatus, ɵngcc4.FormControlName, ɵngcc9.NgIf, ɵngcc10.MatSelect, ɵngcc9.NgForOf, ɵngcc11.MatDatepickerInput, ɵngcc4.NgModel, ɵngcc11.MatDatepickerToggle, ɵngcc7.MatSuffix, ɵngcc11.MatDatepicker, ɵngcc5.MatCardActions, ɵngcc12.MatButton, ɵngcc7.MatError, ɵngcc2.MatOption, ɵngcc13.MatIcon, ɵngcc14.PeopleCloudComponent, ɵngcc15.GroupCloudComponent, ɵngcc16.FormDefinitionSelectorCloudComponent], pipes: [ɵngcc17.TranslatePipe], styles: [".adf-cloud-start-task-heading{border-bottom:1px solid var(--theme-fg-divider);margin-bottom:10px}.adf-cloud-start-task-heading .mat-card-title{font-size:18px;font-weight:700}.adf-cloud-priority-container{padding-top:1.1em}.adf-cloud-date-error-container{height:20px;margin-top:12px;position:absolute;width:100%}.adf-cloud-date-error-container>div{display:flex;flex-flow:row;justify-content:flex-start}.adf-cloud-date-error-container .adf-error-text{color:var(--theme-warn-color);font-size:12px;height:16px;line-height:1.33;padding-right:8px;width:auto}.adf-cloud-date-error-container .adf-error-icon{color:var(--theme-warn-color);font-size:17px}.adf-cloud-start-task-footer{border-top:1px solid #eee;font-size:18px;padding:4px}adf-cloud-start-task .adf-cloud-start-task-footer .mat-button{text-transform:uppercase!important}"], encapsulation: 2 });
StartTaskCloudComponent.MAX_NAME_LENGTH = 255;
StartTaskCloudComponent.ctorParameters = () => [
    { type: TaskCloudService },
    { type: DateAdapter },
    { type: UserPreferencesService },
    { type: FormBuilder },
    { type: IdentityUserService },
    { type: LogService }
];
StartTaskCloudComponent.propDecorators = {
    appName: [{ type: Input }],
    maxNameLength: [{ type: Input }],
    name: [{ type: Input }],
    success: [{ type: Output }],
    cancel: [{ type: Output }],
    error: [{ type: Output }],
    assignee: [{ type: ViewChild, args: ['peopleInput',] }],
    candidateGroups: [{ type: ViewChild, args: ['groupInput',] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(StartTaskCloudComponent, [{
        type: Component,
        args: [{
                selector: 'adf-cloud-start-task',
                template: "<mat-card>\n    <mat-card-header fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"10px\"\n                     class=\"adf-cloud-start-task-heading\">\n        <mat-card-title>{{'ADF_CLOUD_TASK_LIST.START_TASK.FORM.TITLE' | translate}}</mat-card-title>\n    </mat-card-header>\n    <form [formGroup]=\"taskForm\" fxLayout=\"column\" (ngSubmit)=\"saveTask()\">\n\n        <mat-card-content>\n            <div class=\"adf-task-name\">\n                <mat-form-field fxFlex>\n                    <mat-label>{{'ADF_CLOUD_TASK_LIST.START_TASK.FORM.LABEL.NAME' | translate }}</mat-label>\n                    <input\n                        matInput\n                        id=\"name_id\"\n                        class=\"form-control\"\n                        formControlName=\"name\">\n                    <mat-error *ngIf=\"nameController.hasError('required')\">\n                        {{ 'ADF_CLOUD_START_TASK.ERROR.REQUIRED' | translate }}\n                    </mat-error>\n                    <mat-error *ngIf=\"nameController.hasError('maxlength')\">\n                        {{ 'ADF_CLOUD_START_TASK.ERROR.MAXIMUM_LENGTH' | translate : {characters: maxNameLength} }}\n                    </mat-error>\n                </mat-form-field>\n            </div>\n            <div fxLayout=\"row\" fxLayout.lt-md=\"column\" fxLayoutGap=\"20px\" fxLayoutGap.lt-md=\"0px\">\n                <mat-form-field fxFlex>\n                    <mat-label>{{'ADF_CLOUD_TASK_LIST.START_TASK.FORM.LABEL.DESCRIPTION' | translate}}</mat-label>\n                    <textarea\n                        matInput\n                        class=\"form-control\"\n                        id=\"description_id\"\n                        formControlName=\"description\">\n                    </textarea>\n                </mat-form-field>\n\n                <mat-form-field fxFlex class=\"adf-cloud-priority-container\">\n                    <mat-label>{{ 'ADF_CLOUD_TASK_LIST.START_TASK.FORM.LABEL.PRIORITY' | translate }}</mat-label>\n                    <mat-select formControlName=\"priority\">\n                        <mat-option *ngFor=\"let priorityOption of priorities\" [value]=\"priorityOption.value\">{{ priorityOption.label | translate }}</mat-option>\n                    </mat-select>\n                </mat-form-field>\n            </div>\n            <div fxLayout=\"row\" fxLayout.lt-md=\"column\" fxLayoutGap=\"20px\" fxLayoutGap.lt-md=\"0px\">\n                <mat-form-field fxFlex>\n                    <input matInput\n                           [matDatepicker]=\"taskDatePicker\"\n                           (keydown)=\"true\"\n                           (focusout)=\"onDateChanged($any($event).srcElement.value)\"\n                           placeholder=\"{{'ADF_CLOUD_TASK_LIST.START_TASK.FORM.LABEL.DATE'|translate}}\"\n                           [(ngModel)]=\"dueDate\"\n                           [ngModelOptions]=\"{standalone: true}\"\n                           id=\"date_id\">\n                    <mat-datepicker-toggle matSuffix [for]=\"taskDatePicker\"></mat-datepicker-toggle>\n                    <mat-datepicker #taskDatePicker\n                                    [touchUi]=\"true\"\n                                    (dateChanged)=\"onDateChanged($event)\">\n                    </mat-datepicker>\n                    <div class=\"adf-cloud-date-error-container\">\n                        <div *ngIf=\"dateError\">\n                            <div class=\"adf-error-text\">{{'ADF_CLOUD_START_TASK.ERROR.DATE' | translate}}</div>\n                            <mat-icon class=\"adf-error-icon\">warning</mat-icon>\n                        </div>\n                    </div>\n                </mat-form-field>\n                <adf-cloud-people fxFlex #peopleInput *ngIf=\"currentUser\"\n                                  [appName]=\"appName\"\n                                  [preSelectUsers]=\"[currentUser]\"\n                                  [searchUserCtrl]=\"assigneeFormControl\"\n                                  (selectUser)=\"onAssigneeSelect($event)\"\n                                  [title]=\"'ADF_CLOUD_TASK_LIST.START_TASK.FORM.LABEL.ASSIGNEE'\"\n                                  (removeUser)=\"onAssigneeRemove()\"></adf-cloud-people>\n            </div>\n\n            <div fxLayout=\"row\" fxLayout.lt-md=\"column\" fxLayoutGap=\"20px\" fxLayoutGap.lt-md=\"0px\">\n                <adf-cloud-group fxFlex #groupInput *ngIf=\"currentUser\"\n                                 [mode]=\"'multiple'\"\n                                 [title]=\"'ADF_CLOUD_TASK_LIST.START_TASK.FORM.LABEL.CANDIDATE_GROUP'\"\n                                 [appName]=\"appName\"\n                                 [searchGroupsControl]=\"candidateUserFormControl\"\n                                 (selectGroup)=\"onCandidateGroupSelect($event)\"\n                                 (removeGroup)=\"onCandidateGroupRemove($event)\">\n                </adf-cloud-group>\n                <adf-cloud-form-definition-selector *ngIf=\"appName\"\n                                                    fxFlex\n                                                    [appName]=\"appName\"\n                                                    (selectForm)=\"onFormSelect($event)\">\n                </adf-cloud-form-definition-selector>\n            </div>\n        </mat-card-content>\n\n        <mat-card-actions>\n            <div class=\"adf-cloud-start-task-footer\" fxLayout=\"row\" fxLayoutAlign=\"end end\">\n                <button\n                    mat-button\n                    type=\"button\"\n                    (click)=\"onCancel()\"\n                    id=\"button-cancel\">\n                    {{'ADF_CLOUD_TASK_LIST.START_TASK.FORM.ACTION.CANCEL'|translate}}\n                </button>\n                <button\n                    color=\"primary\"\n                    type=\"submit\"\n                    [disabled]=\"!canStartTask()\"\n                    mat-button\n                    id=\"button-start\">\n                    {{'ADF_CLOUD_TASK_LIST.START_TASK.FORM.ACTION.START'|translate}}\n                </button>\n            </div>\n        </mat-card-actions>\n    </form>\n</mat-card>\n",
                providers: [
                    { provide: DateAdapter, useClass: MomentDateAdapter },
                    { provide: MAT_DATE_FORMATS, useValue: ɵ0 }
                ],
                encapsulation: ViewEncapsulation.None,
                styles: [".adf-cloud-start-task-heading{border-bottom:1px solid var(--theme-fg-divider);margin-bottom:10px}.adf-cloud-start-task-heading .mat-card-title{font-size:18px;font-weight:700}.adf-cloud-priority-container{padding-top:1.1em}.adf-cloud-date-error-container{height:20px;margin-top:12px;position:absolute;width:100%}.adf-cloud-date-error-container>div{display:flex;flex-flow:row;justify-content:flex-start}.adf-cloud-date-error-container .adf-error-text{color:var(--theme-warn-color);font-size:12px;height:16px;line-height:1.33;padding-right:8px;width:auto}.adf-cloud-date-error-container .adf-error-icon{color:var(--theme-warn-color);font-size:17px}.adf-cloud-start-task-footer{border-top:1px solid #eee;font-size:18px;padding:4px}adf-cloud-start-task .adf-cloud-start-task-footer .mat-button{text-transform:uppercase!important}"]
            }]
    }], function () { return [{ type: ɵngcc1.TaskCloudService }, { type: ɵngcc2.DateAdapter }, { type: ɵngcc3.UserPreferencesService }, { type: ɵngcc4.FormBuilder }, { type: ɵngcc3.IdentityUserService }, { type: ɵngcc3.LogService }]; }, { appName: [{
            type: Input
        }], maxNameLength: [{
            type: Input
        }], name: [{
            type: Input
        }], success: [{
            type: Output
        }], cancel: [{
            type: Output
        }], error: [{
            type: Output
        }], assignee: [{
            type: ViewChild,
            args: ['peopleInput']
        }], candidateGroups: [{
            type: ViewChild,
            args: ['groupInput']
        }] }); })();
export { ɵ0 };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,