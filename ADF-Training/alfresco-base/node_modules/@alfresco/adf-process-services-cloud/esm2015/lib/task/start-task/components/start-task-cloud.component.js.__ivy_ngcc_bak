import { Component, EventEmitter, Input, Output, ViewEncapsulation, ViewChild } from '@angular/core';
import { DateAdapter, MAT_DATE_FORMATS } from '@angular/material/core';
import moment from 'moment-es6';
import { Subject } from 'rxjs';
import { FormBuilder, Validators, FormControl } from '@angular/forms';
import { MOMENT_DATE_FORMATS, MomentDateAdapter, LogService, UserPreferencesService, IdentityUserService, UserPreferenceValues } from '@alfresco/adf-core';
import { PeopleCloudComponent } from '../../../people/components/people-cloud.component';
import { GroupCloudComponent } from '../../../group/components/group-cloud.component';
import { TaskCloudService } from '../../services/task-cloud.service';
import { StartTaskCloudRequestModel } from '../models/start-task-cloud-request.model';
import { takeUntil } from 'rxjs/operators';
const Éµ0 = MOMENT_DATE_FORMATS;
export class StartTaskCloudComponent {
    constructor(taskService, dateAdapter, userPreferencesService, formBuilder, identityUserService, logService) {
        this.taskService = taskService;
        this.dateAdapter = dateAdapter;
        this.userPreferencesService = userPreferencesService;
        this.formBuilder = formBuilder;
        this.identityUserService = identityUserService;
        this.logService = logService;
        this.DATE_FORMAT = 'DD/MM/YYYY';
        this.appName = '';
        this.maxNameLength = StartTaskCloudComponent.MAX_NAME_LENGTH;
        this.name = '';
        this.success = new EventEmitter();
        this.cancel = new EventEmitter();
        this.error = new EventEmitter();
        this.submitted = false;
        this.candidateGroupNames = [];
        this.assigneeForm = new FormControl('');
        this.groupForm = new FormControl('');
        this.onDestroy$ = new Subject();
    }
    ngOnInit() {
        this.userPreferencesService
            .select(UserPreferenceValues.Locale)
            .pipe(takeUntil(this.onDestroy$))
            .subscribe(locale => this.dateAdapter.setLocale(locale));
        this.loadCurrentUser();
        this.buildForm();
        this.loadDefaultPriorities();
    }
    ngOnDestroy() {
        this.onDestroy$.next(true);
        this.onDestroy$.complete();
    }
    buildForm() {
        this.taskForm = this.formBuilder.group({
            name: new FormControl(this.name, [Validators.required, Validators.maxLength(this.getMaxNameLength()), this.whitespaceValidator]),
            priority: new FormControl(''),
            description: new FormControl('', [this.whitespaceValidator]),
            formKey: new FormControl()
        });
    }
    getMaxNameLength() {
        return this.maxNameLength > StartTaskCloudComponent.MAX_NAME_LENGTH ?
            StartTaskCloudComponent.MAX_NAME_LENGTH : this.maxNameLength;
    }
    loadCurrentUser() {
        this.currentUser = this.identityUserService.getCurrentUserInfo();
        this.assigneeName = this.currentUser.username;
    }
    loadDefaultPriorities() {
        this.priorities = this.taskService.priorities;
    }
    saveTask() {
        this.submitted = true;
        const newTask = Object.assign(this.taskForm.value);
        newTask.dueDate = this.dueDate;
        newTask.assignee = this.assigneeName;
        newTask.formKey = this.formKey;
        newTask.candidateGroups = this.candidateGroupNames;
        this.createNewTask(new StartTaskCloudRequestModel(newTask));
    }
    createNewTask(newTask) {
        this.taskService.createNewTask(newTask, this.appName)
            .subscribe((res) => {
            this.submitted = false;
            this.success.emit(res);
        }, (err) => {
            this.submitted = false;
            this.error.emit(err);
            this.logService.error('An error occurred while creating new task');
        });
    }
    onCancel() {
        this.cancel.emit();
    }
    onDateChanged(newDateValue) {
        this.dateError = false;
        if (newDateValue) {
            const momentDate = moment(newDateValue, this.DATE_FORMAT, true);
            if (!momentDate.isValid()) {
                this.dateError = true;
            }
        }
    }
    onAssigneeSelect(assignee) {
        this.assigneeName = assignee ? assignee.username : '';
    }
    onAssigneeRemove() {
        this.assigneeName = '';
    }
    onCandidateGroupSelect(candidateGroup) {
        if (candidateGroup.name) {
            this.candidateGroupNames.push(candidateGroup.name);
        }
    }
    onCandidateGroupRemove(candidateGroup) {
        if (candidateGroup.name) {
            this.candidateGroupNames = this.candidateGroupNames.filter((name) => {
                return name !== candidateGroup.name;
            });
        }
    }
    canStartTask() {
        return !(this.dateError ||
            !this.taskForm.valid ||
            this.submitted ||
            this.assignee.hasError() ||
            this.candidateGroups.hasError());
    }
    whitespaceValidator(control) {
        const isWhitespace = (control.value || '').trim().length === 0;
        const isValid = control.value.length === 0 || !isWhitespace;
        return isValid ? null : { 'whitespace': true };
    }
    get nameController() {
        return this.taskForm.get('name');
    }
    get priorityController() {
        return this.taskForm.get('priority');
    }
    get assigneeFormControl() {
        return this.assigneeForm;
    }
    get candidateUserFormControl() {
        return this.groupForm;
    }
    onFormSelect(formKey) {
        this.formKey = formKey || '';
    }
}
StartTaskCloudComponent.MAX_NAME_LENGTH = 255;
StartTaskCloudComponent.decorators = [
    { type: Component, args: [{
                selector: 'adf-cloud-start-task',
                template: "<mat-card>\n    <mat-card-header fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"10px\"\n                     class=\"adf-cloud-start-task-heading\">\n        <mat-card-title>{{'ADF_CLOUD_TASK_LIST.START_TASK.FORM.TITLE' | translate}}</mat-card-title>\n    </mat-card-header>\n    <form [formGroup]=\"taskForm\" fxLayout=\"column\" (ngSubmit)=\"saveTask()\">\n\n        <mat-card-content>\n            <div class=\"adf-task-name\">\n                <mat-form-field fxFlex>\n                    <mat-label>{{'ADF_CLOUD_TASK_LIST.START_TASK.FORM.LABEL.NAME' | translate }}</mat-label>\n                    <input\n                        matInput\n                        id=\"name_id\"\n                        class=\"form-control\"\n                        formControlName=\"name\">\n                    <mat-error *ngIf=\"nameController.hasError('required')\">\n                        {{ 'ADF_CLOUD_START_TASK.ERROR.REQUIRED' | translate }}\n                    </mat-error>\n                    <mat-error *ngIf=\"nameController.hasError('maxlength')\">\n                        {{ 'ADF_CLOUD_START_TASK.ERROR.MAXIMUM_LENGTH' | translate : {characters: maxNameLength} }}\n                    </mat-error>\n                </mat-form-field>\n            </div>\n            <div fxLayout=\"row\" fxLayout.lt-md=\"column\" fxLayoutGap=\"20px\" fxLayoutGap.lt-md=\"0px\">\n                <mat-form-field fxFlex>\n                    <mat-label>{{'ADF_CLOUD_TASK_LIST.START_TASK.FORM.LABEL.DESCRIPTION' | translate}}</mat-label>\n                    <textarea\n                        matInput\n                        class=\"form-control\"\n                        id=\"description_id\"\n                        formControlName=\"description\">\n                    </textarea>\n                </mat-form-field>\n\n                <mat-form-field fxFlex class=\"adf-cloud-priority-container\">\n                    <mat-label>{{ 'ADF_CLOUD_TASK_LIST.START_TASK.FORM.LABEL.PRIORITY' | translate }}</mat-label>\n                    <mat-select formControlName=\"priority\">\n                        <mat-option *ngFor=\"let priorityOption of priorities\" [value]=\"priorityOption.value\">{{ priorityOption.label | translate }}</mat-option>\n                    </mat-select>\n                </mat-form-field>\n            </div>\n            <div fxLayout=\"row\" fxLayout.lt-md=\"column\" fxLayoutGap=\"20px\" fxLayoutGap.lt-md=\"0px\">\n                <mat-form-field fxFlex>\n                    <input matInput\n                           [matDatepicker]=\"taskDatePicker\"\n                           (keydown)=\"true\"\n                           (focusout)=\"onDateChanged($any($event).srcElement.value)\"\n                           placeholder=\"{{'ADF_CLOUD_TASK_LIST.START_TASK.FORM.LABEL.DATE'|translate}}\"\n                           [(ngModel)]=\"dueDate\"\n                           [ngModelOptions]=\"{standalone: true}\"\n                           id=\"date_id\">\n                    <mat-datepicker-toggle matSuffix [for]=\"taskDatePicker\"></mat-datepicker-toggle>\n                    <mat-datepicker #taskDatePicker\n                                    [touchUi]=\"true\"\n                                    (dateChanged)=\"onDateChanged($event)\">\n                    </mat-datepicker>\n                    <div class=\"adf-cloud-date-error-container\">\n                        <div *ngIf=\"dateError\">\n                            <div class=\"adf-error-text\">{{'ADF_CLOUD_START_TASK.ERROR.DATE' | translate}}</div>\n                            <mat-icon class=\"adf-error-icon\">warning</mat-icon>\n                        </div>\n                    </div>\n                </mat-form-field>\n                <adf-cloud-people fxFlex #peopleInput *ngIf=\"currentUser\"\n                                  [appName]=\"appName\"\n                                  [preSelectUsers]=\"[currentUser]\"\n                                  [searchUserCtrl]=\"assigneeFormControl\"\n                                  (selectUser)=\"onAssigneeSelect($event)\"\n                                  [title]=\"'ADF_CLOUD_TASK_LIST.START_TASK.FORM.LABEL.ASSIGNEE'\"\n                                  (removeUser)=\"onAssigneeRemove()\"></adf-cloud-people>\n            </div>\n\n            <div fxLayout=\"row\" fxLayout.lt-md=\"column\" fxLayoutGap=\"20px\" fxLayoutGap.lt-md=\"0px\">\n                <adf-cloud-group fxFlex #groupInput *ngIf=\"currentUser\"\n                                 [mode]=\"'multiple'\"\n                                 [title]=\"'ADF_CLOUD_TASK_LIST.START_TASK.FORM.LABEL.CANDIDATE_GROUP'\"\n                                 [appName]=\"appName\"\n                                 [searchGroupsControl]=\"candidateUserFormControl\"\n                                 (selectGroup)=\"onCandidateGroupSelect($event)\"\n                                 (removeGroup)=\"onCandidateGroupRemove($event)\">\n                </adf-cloud-group>\n                <adf-cloud-form-definition-selector *ngIf=\"appName\"\n                                                    fxFlex\n                                                    [appName]=\"appName\"\n                                                    (selectForm)=\"onFormSelect($event)\">\n                </adf-cloud-form-definition-selector>\n            </div>\n        </mat-card-content>\n\n        <mat-card-actions>\n            <div class=\"adf-cloud-start-task-footer\" fxLayout=\"row\" fxLayoutAlign=\"end end\">\n                <button\n                    mat-button\n                    type=\"button\"\n                    (click)=\"onCancel()\"\n                    id=\"button-cancel\">\n                    {{'ADF_CLOUD_TASK_LIST.START_TASK.FORM.ACTION.CANCEL'|translate}}\n                </button>\n                <button\n                    color=\"primary\"\n                    type=\"submit\"\n                    [disabled]=\"!canStartTask()\"\n                    mat-button\n                    id=\"button-start\">\n                    {{'ADF_CLOUD_TASK_LIST.START_TASK.FORM.ACTION.START'|translate}}\n                </button>\n            </div>\n        </mat-card-actions>\n    </form>\n</mat-card>\n",
                providers: [
                    { provide: DateAdapter, useClass: MomentDateAdapter },
                    { provide: MAT_DATE_FORMATS, useValue: Éµ0 }
                ],
                encapsulation: ViewEncapsulation.None,
                styles: [".adf-cloud-start-task-heading{border-bottom:1px solid var(--theme-fg-divider);margin-bottom:10px}.adf-cloud-start-task-heading .mat-card-title{font-size:18px;font-weight:700}.adf-cloud-priority-container{padding-top:1.1em}.adf-cloud-date-error-container{height:20px;margin-top:12px;position:absolute;width:100%}.adf-cloud-date-error-container>div{display:flex;flex-flow:row;justify-content:flex-start}.adf-cloud-date-error-container .adf-error-text{color:var(--theme-warn-color);font-size:12px;height:16px;line-height:1.33;padding-right:8px;width:auto}.adf-cloud-date-error-container .adf-error-icon{color:var(--theme-warn-color);font-size:17px}.adf-cloud-start-task-footer{border-top:1px solid #eee;font-size:18px;padding:4px}adf-cloud-start-task .adf-cloud-start-task-footer .mat-button{text-transform:uppercase!important}"]
            },] }
];
StartTaskCloudComponent.ctorParameters = () => [
    { type: TaskCloudService },
    { type: DateAdapter },
    { type: UserPreferencesService },
    { type: FormBuilder },
    { type: IdentityUserService },
    { type: LogService }
];
StartTaskCloudComponent.propDecorators = {
    appName: [{ type: Input }],
    maxNameLength: [{ type: Input }],
    name: [{ type: Input }],
    success: [{ type: Output }],
    cancel: [{ type: Output }],
    error: [{ type: Output }],
    assignee: [{ type: ViewChild, args: ['peopleInput',] }],
    candidateGroups: [{ type: ViewChild, args: ['groupInput',] }]
};
export { Éµ0 };
//# sourceMappingURL=data:application/json;base64,