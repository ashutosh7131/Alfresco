/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, Input, Output, EventEmitter } from '@angular/core';
import { FormControl } from '@angular/forms';
import { IdentityUserService } from '@alfresco/adf-core';
import { AssignmentType } from '../../models/filter-cloud.model';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@alfresco/adf-core';
import * as ɵngcc2 from '@angular/flex-layout/flex';
import * as ɵngcc3 from '@angular/material/form-field';
import * as ɵngcc4 from '@angular/material/select';
import * as ɵngcc5 from '@angular/forms';
import * as ɵngcc6 from '@angular/material/core';
import * as ɵngcc7 from '@angular/common';
import * as ɵngcc8 from '../../../../group/components/group-cloud.component';
import * as ɵngcc9 from '@ngx-translate/core';

function TaskAssignmentFilterCloudComponent_adf_cloud_group_13_Template(rf, ctx) { if (rf & 1) {
    const _r2 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "adf-cloud-group", 5);
    ɵngcc0.ɵɵlistener("changedGroups", function TaskAssignmentFilterCloudComponent_adf_cloud_group_13_Template_adf_cloud_group_changedGroups_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r2); const ctx_r1 = ɵngcc0.ɵɵnextContext(); return ctx_r1.onChangedGroups($event); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("mode", "multiple")("appName", ctx_r0.appName)("preSelectGroups", ctx_r0.candidateGroups)("searchGroupsControl", ctx_r0.groupForm)("title", "ADF_CLOUD_TASK_LIST.START_TASK.FORM.LABEL.CANDIDATE_GROUP");
} }
export class TaskAssignmentFilterCloudComponent {
    constructor(identityUserService) {
        this.identityUserService = identityUserService;
        this.assignedChange = new EventEmitter();
        this.assignedGroupChange = new EventEmitter();
        this.candidateGroups = [];
        this.groupForm = new FormControl('');
        this.assignmentTypeList = {
            unassigned: AssignmentType.UNASSIGNED,
            currentUser: AssignmentType.CURRENT_USER,
            candidateGroups: AssignmentType.CANDIDATE_GROUPS
        };
    }
    ngOnInit() {
        if (this.isFilterPropertyDefined()) {
            this.setDefaultAssignedGroups();
            this.setDefaultAssignmentType();
        }
    }
    isCandidateGroupsType() {
        return this.assignmentType === AssignmentType.CANDIDATE_GROUPS;
    }
    onAssignmentTypeChange(type) {
        this.candidateGroups = [];
        if (type === AssignmentType.CURRENT_USER) {
            this.assignedChange.emit(this.identityUserService.getCurrentUserInfo());
        }
        else if (type === AssignmentType.UNASSIGNED) {
            this.assignedChange.emit(null);
        }
    }
    onChangedGroups(groups) {
        this.assignedGroupChange.emit(groups);
    }
    setDefaultAssignmentType() {
        const assignmentAttr = this.taskFilterProperty.attributes['assignee'];
        const assignee = this.taskFilterProperty.value[assignmentAttr];
        if (this.candidateGroups.length > 0) {
            this.assignmentType = AssignmentType.CANDIDATE_GROUPS;
        }
        else if (assignee) {
            this.assignmentType = AssignmentType.CURRENT_USER;
        }
        else {
            this.assignmentType = AssignmentType.UNASSIGNED;
        }
    }
    setDefaultAssignedGroups() {
        const assignmentGroupsAttr = this.taskFilterProperty.attributes['candidateGroups'];
        this.candidateGroups = this.taskFilterProperty.value[assignmentGroupsAttr];
    }
    isFilterPropertyDefined() {
        return !!this.taskFilterProperty.attributes && !!this.taskFilterProperty.value;
    }
}
TaskAssignmentFilterCloudComponent.ɵfac = function TaskAssignmentFilterCloudComponent_Factory(t) { return new (t || TaskAssignmentFilterCloudComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.IdentityUserService)); };
TaskAssignmentFilterCloudComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: TaskAssignmentFilterCloudComponent, selectors: [["adf-cloud-task-assignment-filter"]], inputs: { appName: "appName", taskFilterProperty: "taskFilterProperty" }, outputs: { assignedChange: "assignedChange", assignedGroupChange: "assignedGroupChange" }, decls: 14, vars: 18, consts: [["fxLayout", "row", 1, "adf-cloud-assignment-container"], [3, "floatLabel"], [1, "adf-task-assignment-filter", 3, "placeholder", "ngModel", "ngModelChange"], [3, "value"], ["class", "adf-group-cloud-filter", 3, "mode", "appName", "preSelectGroups", "searchGroupsControl", "title", "changedGroups", 4, "ngIf"], [1, "adf-group-cloud-filter", 3, "mode", "appName", "preSelectGroups", "searchGroupsControl", "title", "changedGroups"]], template: function TaskAssignmentFilterCloudComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "mat-form-field", 1);
        ɵngcc0.ɵɵelementStart(2, "mat-select", 2);
        ɵngcc0.ɵɵlistener("ngModelChange", function TaskAssignmentFilterCloudComponent_Template_mat_select_ngModelChange_2_listener($event) { return ctx.assignmentType = $event; })("ngModelChange", function TaskAssignmentFilterCloudComponent_Template_mat_select_ngModelChange_2_listener() { return ctx.onAssignmentTypeChange(ctx.assignmentType); });
        ɵngcc0.ɵɵpipe(3, "translate");
        ɵngcc0.ɵɵelementStart(4, "mat-option", 3);
        ɵngcc0.ɵɵtext(5);
        ɵngcc0.ɵɵpipe(6, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(7, "mat-option", 3);
        ɵngcc0.ɵɵtext(8);
        ɵngcc0.ɵɵpipe(9, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(10, "mat-option", 3);
        ɵngcc0.ɵɵtext(11);
        ɵngcc0.ɵɵpipe(12, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(13, TaskAssignmentFilterCloudComponent_adf_cloud_group_13_Template, 1, 5, "adf-cloud-group", 4);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("floatLabel", "auto");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵpropertyInterpolate("placeholder", ɵngcc0.ɵɵpipeBind1(3, 10, "ADF_CLOUD_TASK_ASSIGNEMNT_FILTER.ASSIGNMENT_TYPE"));
        ɵngcc0.ɵɵproperty("ngModel", ctx.assignmentType);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("value", ctx.assignmentTypeList.currentUser);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate1("", ɵngcc0.ɵɵpipeBind1(6, 12, "ADF_CLOUD_TASK_ASSIGNEMNT_FILTER.ASSIGNED_TO_ME"), " ");
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("value", ctx.assignmentTypeList.unassigned);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate1("", ɵngcc0.ɵɵpipeBind1(9, 14, "ADF_CLOUD_TASK_ASSIGNEMNT_FILTER.UNASSIGNED"), " ");
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("value", ctx.assignmentTypeList.candidateGroups);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate1("", ɵngcc0.ɵɵpipeBind1(12, 16, "ADF_CLOUD_TASK_ASSIGNEMNT_FILTER.LIST_OF_CANDIDATE_GROUPS"), " ");
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.isCandidateGroupsType());
    } }, directives: [ɵngcc2.DefaultLayoutDirective, ɵngcc3.MatFormField, ɵngcc4.MatSelect, ɵngcc5.NgControlStatus, ɵngcc5.NgModel, ɵngcc6.MatOption, ɵngcc7.NgIf, ɵngcc8.GroupCloudComponent], pipes: [ɵngcc9.TranslatePipe], styles: [".adf-cloud-assignment-container[_ngcontent-%COMP%]{align-items:center}.adf-cloud-assignment-container[_ngcontent-%COMP%]   mat-form-field[_ngcontent-%COMP%]{width:100%}.adf-task-assignment-filter[_ngcontent-%COMP%]{margin-right:10px}.adf-group-cloud-filter[_ngcontent-%COMP%]{flex:1;margin-left:15px;width:100%}"] });
TaskAssignmentFilterCloudComponent.ctorParameters = () => [
    { type: IdentityUserService }
];
TaskAssignmentFilterCloudComponent.propDecorators = {
    appName: [{ type: Input }],
    taskFilterProperty: [{ type: Input }],
    assignedChange: [{ type: Output }],
    assignedGroupChange: [{ type: Output }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TaskAssignmentFilterCloudComponent, [{
        type: Component,
        args: [{
                selector: 'adf-cloud-task-assignment-filter',
                template: "<div class=\"adf-cloud-assignment-container\" fxLayout=\"row\">\n    <mat-form-field [floatLabel]=\"'auto'\">\n        <mat-select class=\"adf-task-assignment-filter\"\n                    placeholder=\"{{ 'ADF_CLOUD_TASK_ASSIGNEMNT_FILTER.ASSIGNMENT_TYPE' | translate }}\"\n                    [(ngModel)]=\"assignmentType\"\n                    (ngModelChange)=\"onAssignmentTypeChange(assignmentType)\">\n            <mat-option [value]=\"assignmentTypeList.currentUser\">{{ 'ADF_CLOUD_TASK_ASSIGNEMNT_FILTER.ASSIGNED_TO_ME' | translate }} </mat-option>\n            <mat-option [value]=\"assignmentTypeList.unassigned\">{{ 'ADF_CLOUD_TASK_ASSIGNEMNT_FILTER.UNASSIGNED' | translate }} </mat-option>\n            <mat-option [value]=\"assignmentTypeList.candidateGroups\">{{ 'ADF_CLOUD_TASK_ASSIGNEMNT_FILTER.LIST_OF_CANDIDATE_GROUPS' | translate }} </mat-option>\n        </mat-select>\n    </mat-form-field>\n\n    <adf-cloud-group class=\"adf-group-cloud-filter\" *ngIf=\"isCandidateGroupsType()\"\n        [mode]=\"'multiple'\"\n        [appName]=\"appName\"\n        [preSelectGroups]=\"candidateGroups\"\n        [searchGroupsControl]=\"groupForm\"\n        (changedGroups)=\"onChangedGroups($event)\"\n        [title]=\"'ADF_CLOUD_TASK_LIST.START_TASK.FORM.LABEL.CANDIDATE_GROUP'\"></adf-cloud-group>\n</div>\n",
                styles: [".adf-cloud-assignment-container{align-items:center}.adf-cloud-assignment-container mat-form-field{width:100%}.adf-task-assignment-filter{margin-right:10px}.adf-group-cloud-filter{flex:1;margin-left:15px;width:100%}"]
            }]
    }], function () { return [{ type: ɵngcc1.IdentityUserService }]; }, { assignedChange: [{
            type: Output
        }], assignedGroupChange: [{
            type: Output
        }], appName: [{
            type: Input
        }], taskFilterProperty: [{
            type: Input
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,