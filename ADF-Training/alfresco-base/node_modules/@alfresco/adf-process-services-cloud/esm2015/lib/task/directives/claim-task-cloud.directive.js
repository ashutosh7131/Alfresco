import { __awaiter } from "tslib";
import { Directive, Input, HostListener, Output, EventEmitter } from '@angular/core';
import { IdentityUserService } from '@alfresco/adf-core';
import { TaskCloudService } from '../services/task-cloud.service';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../services/task-cloud.service';
import * as ɵngcc2 from '@alfresco/adf-core';
export class ClaimTaskCloudDirective {
    constructor(taskListService, identityUserService) {
        this.taskListService = taskListService;
        this.identityUserService = identityUserService;
        this.appName = '';
        this.success = new EventEmitter();
        this.error = new EventEmitter();
        this.invalidParams = [];
    }
    ngOnInit() {
        this.validateInputs();
    }
    validateInputs() {
        if (!this.isTaskValid()) {
            this.invalidParams.push('taskId');
        }
        if (!this.isAppValid()) {
            this.invalidParams.push('appName');
        }
        if (this.invalidParams.length) {
            throw new Error(`Attribute ${this.invalidParams.join(', ')} is required`);
        }
    }
    isTaskValid() {
        return this.taskId && this.taskId.length > 0;
    }
    isAppValid() {
        return !!this.appName || this.appName === '';
    }
    onClick() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                yield this.claimTask();
            }
            catch (error) {
                this.error.emit(error);
            }
        });
    }
    claimTask() {
        return __awaiter(this, void 0, void 0, function* () {
            const currentUser = this.identityUserService.getCurrentUserInfo().username;
            try {
                const result = yield this.taskListService.claimTask(this.appName, this.taskId, currentUser).toPromise();
                if (result) {
                    this.success.emit(result);
                }
            }
            catch (error) {
                this.error.emit(error);
            }
        });
    }
}
ClaimTaskCloudDirective.ɵfac = function ClaimTaskCloudDirective_Factory(t) { return new (t || ClaimTaskCloudDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.TaskCloudService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.IdentityUserService)); };
ClaimTaskCloudDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ClaimTaskCloudDirective, selectors: [["", "adf-cloud-claim-task", ""]], hostBindings: function ClaimTaskCloudDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function ClaimTaskCloudDirective_click_HostBindingHandler() { return ctx.onClick(); });
    } }, inputs: { appName: "appName", taskId: "taskId" }, outputs: { success: "success", error: "error" } });
ClaimTaskCloudDirective.ctorParameters = () => [
    { type: TaskCloudService },
    { type: IdentityUserService }
];
ClaimTaskCloudDirective.propDecorators = {
    taskId: [{ type: Input }],
    appName: [{ type: Input }],
    success: [{ type: Output }],
    error: [{ type: Output }],
    onClick: [{ type: HostListener, args: ['click',] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ClaimTaskCloudDirective, [{
        type: Directive,
        args: [{
                selector: '[adf-cloud-claim-task]'
            }]
    }], function () { return [{ type: ɵngcc1.TaskCloudService }, { type: ɵngcc2.IdentityUserService }]; }, { appName: [{
            type: Input
        }], success: [{
            type: Output
        }], error: [{
            type: Output
        }], onClick: [{
            type: HostListener,
            args: ['click']
        }], taskId: [{
            type: Input
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xhaW0tdGFzay1jbG91ZC5kaXJlY3RpdmUuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL2hvbWUvdHJhdmlzL2J1aWxkL0FsZnJlc2NvL2FsZnJlc2NvLW5nMi1jb21wb25lbnRzL2xpYi9wcm9jZXNzLXNlcnZpY2VzLWNsb3VkL3NyYy9saWIvdGFzay9kaXJlY3RpdmVzL2NsYWltLXRhc2stY2xvdWQuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFnQkEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsWUFBWSxFQUFFLE1BQU0sRUFBRSxZQUFZLEVBQVUsTUFBTSxlQUFlLENBQUM7QUFDN0YsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDekQsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sZ0NBQWdDLENBQUM7Ozs7QUFNbEUsTUFBTSxPQUFPLHVCQUF1QjtBQUFHLElBb0JuQyxZQUNZLGVBQWlDLEVBQ2pDLG1CQUF3QztBQUFJLFFBRDVDLG9CQUFlLEdBQWYsZUFBZSxDQUFrQjtBQUFDLFFBQ2xDLHdCQUFtQixHQUFuQixtQkFBbUIsQ0FBcUI7QUFBQyxRQWRyRCxZQUFPLEdBQVcsRUFBRSxDQUFDO0FBQ3pCLFFBR0ksWUFBTyxHQUFzQixJQUFJLFlBQVksRUFBTyxDQUFDO0FBQ3pELFFBR0ksVUFBSyxHQUFzQixJQUFJLFlBQVksRUFBTyxDQUFDO0FBQ3ZELFFBQ0ksa0JBQWEsR0FBYSxFQUFFLENBQUM7QUFDakMsSUFHNEQsQ0FBQztBQUM3RCxJQUNJLFFBQVE7QUFDWixRQUFRLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQztBQUM5QixJQUFJLENBQUM7QUFDTCxJQUNJLGNBQWM7QUFDbEIsUUFDUSxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxFQUFFO0FBQ2pDLFlBQVksSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDOUMsU0FBUztBQUNULFFBQVEsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsRUFBRTtBQUNoQyxZQUFZLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQy9DLFNBQVM7QUFDVCxRQUFRLElBQUksSUFBSSxDQUFDLGFBQWEsQ0FBQyxNQUFNLEVBQUU7QUFDdkMsWUFBWSxNQUFNLElBQUksS0FBSyxDQUFDLGFBQWEsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDO0FBQ3RGLFNBQVM7QUFDVCxJQUFJLENBQUM7QUFDTCxJQUNJLFdBQVc7QUFBSyxRQUNaLE9BQU8sSUFBSSxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7QUFDckQsSUFBSSxDQUFDO0FBQ0wsSUFDSSxVQUFVO0FBQUssUUFDWCxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxJQUFJLElBQUksQ0FBQyxPQUFPLEtBQUssRUFBRSxDQUFDO0FBQ3JELElBQUksQ0FBQztBQUNMLElBRVUsT0FBTztBQUNqQjtBQUVZLFlBRkosSUFBSTtBQUNaLGdCQUFZLE1BQU0sSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDO0FBQ25DLGFBQVM7QUFBQyxZQUFBLE9BQU8sS0FBSyxFQUFFO0FBQ3hCLGdCQUFZLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ25DLGFBQVM7QUFDVCxRQUNJLENBQUM7QUFFSixLQUZJO0FBQ0wsSUFDa0IsU0FBUztBQUMzQjtBQUE4RCxZQUF0RCxNQUFNLFdBQVcsR0FBVyxJQUFJLENBQUMsbUJBQW1CLENBQUMsa0JBQWtCLEVBQUUsQ0FBQyxRQUFRLENBQUM7QUFDM0YsWUFBUSxJQUFJO0FBQ1osZ0JBQVksTUFBTSxNQUFNLEdBQUcsTUFBTSxJQUFJLENBQUMsZUFBZSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxNQUFNLEVBQUUsV0FBVyxDQUFDLENBQUMsU0FBUyxFQUFFLENBQUM7QUFDcEgsZ0JBQVksSUFBSSxNQUFNLEVBQUU7QUFDeEIsb0JBQWdCLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQzFDLGlCQUFhO0FBQ2IsYUFBUztBQUFDLFlBQUEsT0FBTyxLQUFLLEVBQUU7QUFDeEIsZ0JBQVksSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDbkMsYUFBUztBQUNULFFBQUksQ0FBQztBQUVMLEtBRks7QUFDTDttREExRUMsU0FBUyxTQUFDLGtCQUVQLFFBQVEsRUFBRSx3QkFBd0IsY0FDckM7Ozs4R0FDSTtBQUFDO0FBQWlELFlBTjlDLGdCQUFnQjtBQUFJLFlBRHBCLG1CQUFtQjtBQUFHO0FBQUc7QUFDZixxQkFTZCxLQUFLO0FBQ1Isc0JBR0csS0FBSztBQUNSLHNCQUdHLE1BQU07QUFDVCxvQkFHRyxNQUFNO0FBQ1Qsc0JBaUNHLFlBQVksU0FBQyxPQUFPO0FBQ3JCOzs7Ozs7Ozs7Ozs7Ozs7OztvQkFBRTtBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmltcG9ydCB7IERpcmVjdGl2ZSwgSW5wdXQsIEhvc3RMaXN0ZW5lciwgT3V0cHV0LCBFdmVudEVtaXR0ZXIsIE9uSW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSWRlbnRpdHlVc2VyU2VydmljZSB9IGZyb20gJ0BhbGZyZXNjby9hZGYtY29yZSc7XG5pbXBvcnQgeyBUYXNrQ2xvdWRTZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZXMvdGFzay1jbG91ZC5zZXJ2aWNlJztcblxuQERpcmVjdGl2ZSh7XG4gICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOiBkaXJlY3RpdmUtc2VsZWN0b3JcbiAgICBzZWxlY3RvcjogJ1thZGYtY2xvdWQtY2xhaW0tdGFza10nXG59KVxuZXhwb3J0IGNsYXNzIENsYWltVGFza0Nsb3VkRGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0IHtcblxuICAgIC8qKiAoUmVxdWlyZWQpIFRoZSBpZCBvZiB0aGUgdGFzay4gKi9cbiAgICBASW5wdXQoKVxuICAgIHRhc2tJZDogc3RyaW5nO1xuXG4gICAgLyoqIChSZXF1aXJlZCkgVGhlIG5hbWUgb2YgdGhlIGFwcGxpY2F0aW9uLiAqL1xuICAgIEBJbnB1dCgpXG4gICAgYXBwTmFtZTogc3RyaW5nID0gJyc7XG5cbiAgICAvKiogRW1pdHRlZCB3aGVuIHRoZSB0YXNrIGlzIGNvbXBsZXRlZC4gKi9cbiAgICBAT3V0cHV0KClcbiAgICBzdWNjZXNzOiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xuXG4gICAgLyoqIEVtaXR0ZWQgd2hlbiB0aGUgdGFzayBjYW5ub3QgYmUgY29tcGxldGVkLiAqL1xuICAgIEBPdXRwdXQoKVxuICAgIGVycm9yOiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xuXG4gICAgaW52YWxpZFBhcmFtczogc3RyaW5nW10gPSBbXTtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBwcml2YXRlIHRhc2tMaXN0U2VydmljZTogVGFza0Nsb3VkU2VydmljZSxcbiAgICAgICAgcHJpdmF0ZSBpZGVudGl0eVVzZXJTZXJ2aWNlOiBJZGVudGl0eVVzZXJTZXJ2aWNlKSB7IH1cblxuICAgIG5nT25Jbml0KCkge1xuICAgICAgICB0aGlzLnZhbGlkYXRlSW5wdXRzKCk7XG4gICAgfVxuXG4gICAgdmFsaWRhdGVJbnB1dHMoKSB7XG5cbiAgICAgICAgaWYgKCF0aGlzLmlzVGFza1ZhbGlkKCkpIHtcbiAgICAgICAgICAgIHRoaXMuaW52YWxpZFBhcmFtcy5wdXNoKCd0YXNrSWQnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaXMuaXNBcHBWYWxpZCgpKSB7XG4gICAgICAgICAgICB0aGlzLmludmFsaWRQYXJhbXMucHVzaCgnYXBwTmFtZScpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmludmFsaWRQYXJhbXMubGVuZ3RoKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEF0dHJpYnV0ZSAke3RoaXMuaW52YWxpZFBhcmFtcy5qb2luKCcsICcpfSBpcyByZXF1aXJlZGApO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaXNUYXNrVmFsaWQoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLnRhc2tJZCAmJiB0aGlzLnRhc2tJZC5sZW5ndGggPiAwO1xuICAgIH1cblxuICAgIGlzQXBwVmFsaWQoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiAhIXRoaXMuYXBwTmFtZSB8fCB0aGlzLmFwcE5hbWUgPT09ICcnO1xuICAgIH1cblxuICAgIEBIb3N0TGlzdGVuZXIoJ2NsaWNrJylcbiAgICBhc3luYyBvbkNsaWNrKCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5jbGFpbVRhc2soKTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIHRoaXMuZXJyb3IuZW1pdChlcnJvcik7XG4gICAgICAgIH1cblxuICAgIH1cblxuICAgIHByaXZhdGUgYXN5bmMgY2xhaW1UYXNrKCkge1xuICAgICAgICBjb25zdCBjdXJyZW50VXNlcjogc3RyaW5nID0gdGhpcy5pZGVudGl0eVVzZXJTZXJ2aWNlLmdldEN1cnJlbnRVc2VySW5mbygpLnVzZXJuYW1lO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdGhpcy50YXNrTGlzdFNlcnZpY2UuY2xhaW1UYXNrKHRoaXMuYXBwTmFtZSwgdGhpcy50YXNrSWQsIGN1cnJlbnRVc2VyKS50b1Byb21pc2UoKTtcbiAgICAgICAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnN1Y2Nlc3MuZW1pdChyZXN1bHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgdGhpcy5lcnJvci5lbWl0KGVycm9yKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiJdfQ==