/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { NgModule } from '@angular/core';
import { TRANSLATION_PROVIDER, CoreModule, FormRenderingService } from '@alfresco/adf-core';
import { AppListCloudModule } from './app/app-list-cloud.module';
import { TaskCloudModule } from './task/task-cloud.module';
import { ProcessCloudModule } from './process/process-cloud.module';
import { GroupCloudModule } from './group/group-cloud.module';
import { FormCloudModule } from './form/form-cloud.module';
import { TaskFormModule } from './task/task-form/task-form.module';
import { LocalPreferenceCloudService, PROCESS_FILTERS_SERVICE_TOKEN, TASK_FILTERS_SERVICE_TOKEN } from './services/public-api';
import { PeopleCloudModule } from './people/people-cloud.module';
import { CloudFormRenderingService } from './form/components/cloud-form-rendering.service';
import { ProcessServicesCloudPipeModule } from './pipes/process-services-cloud-pipe.module';
const ɵ0 = {
    name: 'adf-process-services-cloud',
    source: 'assets/adf-process-services-cloud'
};
export class ProcessServicesCloudModule {
    static forRoot(preferenceServiceInstance) {
        return {
            ngModule: ProcessServicesCloudModule,
            providers: [
                {
                    provide: TRANSLATION_PROVIDER,
                    multi: true,
                    useValue: {
                        name: 'adf-process-services-cloud',
                        source: 'assets/adf-process-services-cloud'
                    }
                },
                { provide: PROCESS_FILTERS_SERVICE_TOKEN, useExisting: preferenceServiceInstance !== null && preferenceServiceInstance !== void 0 ? preferenceServiceInstance : LocalPreferenceCloudService },
                { provide: TASK_FILTERS_SERVICE_TOKEN, useExisting: preferenceServiceInstance !== null && preferenceServiceInstance !== void 0 ? preferenceServiceInstance : LocalPreferenceCloudService },
                FormRenderingService,
                { provide: FormRenderingService, useClass: CloudFormRenderingService }
            ]
        };
    }
    static forChild() {
        return {
            ngModule: ProcessServicesCloudModule
        };
    }
}
ProcessServicesCloudModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CoreModule,
                    AppListCloudModule,
                    ProcessCloudModule,
                    TaskCloudModule,
                    GroupCloudModule,
                    PeopleCloudModule,
                    FormCloudModule,
                    TaskFormModule,
                    ProcessServicesCloudPipeModule
                ],
                providers: [
                    {
                        provide: TRANSLATION_PROVIDER,
                        multi: true,
                        useValue: ɵ0
                    }
                ],
                exports: [
                    AppListCloudModule,
                    ProcessCloudModule,
                    TaskCloudModule,
                    GroupCloudModule,
                    FormCloudModule,
                    TaskFormModule,
                    PeopleCloudModule,
                    ProcessServicesCloudPipeModule
                ]
            },] }
];
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvY2Vzcy1zZXJ2aWNlcy1jbG91ZC5tb2R1bGUuanMiLCJzb3VyY2VSb290IjoiL2hvbWUvdHJhdmlzL2J1aWxkL0FsZnJlc2NvL2FsZnJlc2NvLW5nMi1jb21wb25lbnRzL2xpYi9wcm9jZXNzLXNlcnZpY2VzLWNsb3VkL3NyYy8iLCJzb3VyY2VzIjpbImxpYi9wcm9jZXNzLXNlcnZpY2VzLWNsb3VkLm1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7O0dBZUc7QUFFSCxPQUFPLEVBQUUsUUFBUSxFQUF1QixNQUFNLGVBQWUsQ0FBQztBQUM5RCxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsVUFBVSxFQUFFLG9CQUFvQixFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDNUYsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFDakUsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQzNELE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBQ3BFLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBQzlELE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUMzRCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sbUNBQW1DLENBQUM7QUFDbkUsT0FBTyxFQUNILDJCQUEyQixFQUUzQiw2QkFBNkIsRUFDN0IsMEJBQTBCLEVBQzdCLE1BQU0sdUJBQXVCLENBQUM7QUFDL0IsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFDakUsT0FBTyxFQUFFLHlCQUF5QixFQUFFLE1BQU0sZ0RBQWdELENBQUM7QUFDM0YsT0FBTyxFQUFFLDhCQUE4QixFQUFFLE1BQU0sNENBQTRDLENBQUM7V0FrQnRFO0lBQ04sSUFBSSxFQUFFLDRCQUE0QjtJQUNsQyxNQUFNLEVBQUUsbUNBQW1DO0NBQzlDO0FBY2IsTUFBTSxPQUFPLDBCQUEwQjtJQUNuQyxNQUFNLENBQUMsT0FBTyxDQUFDLHlCQUEyRDtRQUN0RSxPQUFPO1lBQ0gsUUFBUSxFQUFFLDBCQUEwQjtZQUNwQyxTQUFTLEVBQUU7Z0JBQ1A7b0JBQ0ksT0FBTyxFQUFFLG9CQUFvQjtvQkFDN0IsS0FBSyxFQUFFLElBQUk7b0JBQ1gsUUFBUSxFQUFFO3dCQUNOLElBQUksRUFBRSw0QkFBNEI7d0JBQ2xDLE1BQU0sRUFBRSxtQ0FBbUM7cUJBQzlDO2lCQUNKO2dCQUNELEVBQUUsT0FBTyxFQUFFLDZCQUE2QixFQUFFLFdBQVcsRUFBRSx5QkFBeUIsYUFBekIseUJBQXlCLGNBQXpCLHlCQUF5QixHQUFJLDJCQUEyQixFQUFFO2dCQUNqSCxFQUFFLE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxXQUFXLEVBQUUseUJBQXlCLGFBQXpCLHlCQUF5QixjQUF6Qix5QkFBeUIsR0FBSSwyQkFBMkIsRUFBRTtnQkFDOUcsb0JBQW9CO2dCQUNwQixFQUFFLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxRQUFRLEVBQUUseUJBQXlCLEVBQUU7YUFDekU7U0FDSixDQUFDO0lBQ04sQ0FBQztJQUVELE1BQU0sQ0FBQyxRQUFRO1FBQ1gsT0FBTztZQUNILFFBQVEsRUFBRSwwQkFBMEI7U0FDdkMsQ0FBQztJQUNOLENBQUM7OztZQTFESixRQUFRLFNBQUM7Z0JBQ04sT0FBTyxFQUFFO29CQUNMLFVBQVU7b0JBQ1Ysa0JBQWtCO29CQUNsQixrQkFBa0I7b0JBQ2xCLGVBQWU7b0JBQ2YsZ0JBQWdCO29CQUNoQixpQkFBaUI7b0JBQ2pCLGVBQWU7b0JBQ2YsY0FBYztvQkFDZCw4QkFBOEI7aUJBQ2pDO2dCQUNELFNBQVMsRUFBRTtvQkFDUDt3QkFDSSxPQUFPLEVBQUUsb0JBQW9CO3dCQUM3QixLQUFLLEVBQUUsSUFBSTt3QkFDWCxRQUFRLElBR1A7cUJBQ0o7aUJBQ0o7Z0JBQ0QsT0FBTyxFQUFFO29CQUNMLGtCQUFrQjtvQkFDbEIsa0JBQWtCO29CQUNsQixlQUFlO29CQUNmLGdCQUFnQjtvQkFDaEIsZUFBZTtvQkFDZixjQUFjO29CQUNkLGlCQUFpQjtvQkFDakIsOEJBQThCO2lCQUNqQzthQUNKIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgTmdNb2R1bGUsIE1vZHVsZVdpdGhQcm92aWRlcnMgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFRSQU5TTEFUSU9OX1BST1ZJREVSLCBDb3JlTW9kdWxlLCBGb3JtUmVuZGVyaW5nU2VydmljZSB9IGZyb20gJ0BhbGZyZXNjby9hZGYtY29yZSc7XG5pbXBvcnQgeyBBcHBMaXN0Q2xvdWRNb2R1bGUgfSBmcm9tICcuL2FwcC9hcHAtbGlzdC1jbG91ZC5tb2R1bGUnO1xuaW1wb3J0IHsgVGFza0Nsb3VkTW9kdWxlIH0gZnJvbSAnLi90YXNrL3Rhc2stY2xvdWQubW9kdWxlJztcbmltcG9ydCB7IFByb2Nlc3NDbG91ZE1vZHVsZSB9IGZyb20gJy4vcHJvY2Vzcy9wcm9jZXNzLWNsb3VkLm1vZHVsZSc7XG5pbXBvcnQgeyBHcm91cENsb3VkTW9kdWxlIH0gZnJvbSAnLi9ncm91cC9ncm91cC1jbG91ZC5tb2R1bGUnO1xuaW1wb3J0IHsgRm9ybUNsb3VkTW9kdWxlIH0gZnJvbSAnLi9mb3JtL2Zvcm0tY2xvdWQubW9kdWxlJztcbmltcG9ydCB7IFRhc2tGb3JtTW9kdWxlIH0gZnJvbSAnLi90YXNrL3Rhc2stZm9ybS90YXNrLWZvcm0ubW9kdWxlJztcbmltcG9ydCB7XG4gICAgTG9jYWxQcmVmZXJlbmNlQ2xvdWRTZXJ2aWNlLFxuICAgIFByZWZlcmVuY2VDbG91ZFNlcnZpY2VJbnRlcmZhY2UsXG4gICAgUFJPQ0VTU19GSUxURVJTX1NFUlZJQ0VfVE9LRU4sXG4gICAgVEFTS19GSUxURVJTX1NFUlZJQ0VfVE9LRU5cbn0gZnJvbSAnLi9zZXJ2aWNlcy9wdWJsaWMtYXBpJztcbmltcG9ydCB7IFBlb3BsZUNsb3VkTW9kdWxlIH0gZnJvbSAnLi9wZW9wbGUvcGVvcGxlLWNsb3VkLm1vZHVsZSc7XG5pbXBvcnQgeyBDbG91ZEZvcm1SZW5kZXJpbmdTZXJ2aWNlIH0gZnJvbSAnLi9mb3JtL2NvbXBvbmVudHMvY2xvdWQtZm9ybS1yZW5kZXJpbmcuc2VydmljZSc7XG5pbXBvcnQgeyBQcm9jZXNzU2VydmljZXNDbG91ZFBpcGVNb2R1bGUgfSBmcm9tICcuL3BpcGVzL3Byb2Nlc3Mtc2VydmljZXMtY2xvdWQtcGlwZS5tb2R1bGUnO1xuXG5ATmdNb2R1bGUoe1xuICAgIGltcG9ydHM6IFtcbiAgICAgICAgQ29yZU1vZHVsZSxcbiAgICAgICAgQXBwTGlzdENsb3VkTW9kdWxlLFxuICAgICAgICBQcm9jZXNzQ2xvdWRNb2R1bGUsXG4gICAgICAgIFRhc2tDbG91ZE1vZHVsZSxcbiAgICAgICAgR3JvdXBDbG91ZE1vZHVsZSxcbiAgICAgICAgUGVvcGxlQ2xvdWRNb2R1bGUsXG4gICAgICAgIEZvcm1DbG91ZE1vZHVsZSxcbiAgICAgICAgVGFza0Zvcm1Nb2R1bGUsXG4gICAgICAgIFByb2Nlc3NTZXJ2aWNlc0Nsb3VkUGlwZU1vZHVsZVxuICAgIF0sXG4gICAgcHJvdmlkZXJzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIHByb3ZpZGU6IFRSQU5TTEFUSU9OX1BST1ZJREVSLFxuICAgICAgICAgICAgbXVsdGk6IHRydWUsXG4gICAgICAgICAgICB1c2VWYWx1ZToge1xuICAgICAgICAgICAgICAgIG5hbWU6ICdhZGYtcHJvY2Vzcy1zZXJ2aWNlcy1jbG91ZCcsXG4gICAgICAgICAgICAgICAgc291cmNlOiAnYXNzZXRzL2FkZi1wcm9jZXNzLXNlcnZpY2VzLWNsb3VkJ1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgXSxcbiAgICBleHBvcnRzOiBbXG4gICAgICAgIEFwcExpc3RDbG91ZE1vZHVsZSxcbiAgICAgICAgUHJvY2Vzc0Nsb3VkTW9kdWxlLFxuICAgICAgICBUYXNrQ2xvdWRNb2R1bGUsXG4gICAgICAgIEdyb3VwQ2xvdWRNb2R1bGUsXG4gICAgICAgIEZvcm1DbG91ZE1vZHVsZSxcbiAgICAgICAgVGFza0Zvcm1Nb2R1bGUsXG4gICAgICAgIFBlb3BsZUNsb3VkTW9kdWxlLFxuICAgICAgICBQcm9jZXNzU2VydmljZXNDbG91ZFBpcGVNb2R1bGVcbiAgICBdXG59KVxuZXhwb3J0IGNsYXNzIFByb2Nlc3NTZXJ2aWNlc0Nsb3VkTW9kdWxlIHtcbiAgICBzdGF0aWMgZm9yUm9vdChwcmVmZXJlbmNlU2VydmljZUluc3RhbmNlPzogUHJlZmVyZW5jZUNsb3VkU2VydmljZUludGVyZmFjZSk6IE1vZHVsZVdpdGhQcm92aWRlcnM8UHJvY2Vzc1NlcnZpY2VzQ2xvdWRNb2R1bGU+IHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG5nTW9kdWxlOiBQcm9jZXNzU2VydmljZXNDbG91ZE1vZHVsZSxcbiAgICAgICAgICAgIHByb3ZpZGVyczogW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgcHJvdmlkZTogVFJBTlNMQVRJT05fUFJPVklERVIsXG4gICAgICAgICAgICAgICAgICAgIG11bHRpOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICB1c2VWYWx1ZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogJ2FkZi1wcm9jZXNzLXNlcnZpY2VzLWNsb3VkJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZTogJ2Fzc2V0cy9hZGYtcHJvY2Vzcy1zZXJ2aWNlcy1jbG91ZCdcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgeyBwcm92aWRlOiBQUk9DRVNTX0ZJTFRFUlNfU0VSVklDRV9UT0tFTiwgdXNlRXhpc3Rpbmc6IHByZWZlcmVuY2VTZXJ2aWNlSW5zdGFuY2UgPz8gTG9jYWxQcmVmZXJlbmNlQ2xvdWRTZXJ2aWNlIH0sXG4gICAgICAgICAgICAgICAgeyBwcm92aWRlOiBUQVNLX0ZJTFRFUlNfU0VSVklDRV9UT0tFTiwgdXNlRXhpc3Rpbmc6IHByZWZlcmVuY2VTZXJ2aWNlSW5zdGFuY2UgPz8gTG9jYWxQcmVmZXJlbmNlQ2xvdWRTZXJ2aWNlIH0sXG4gICAgICAgICAgICAgICAgRm9ybVJlbmRlcmluZ1NlcnZpY2UsXG4gICAgICAgICAgICAgICAgeyBwcm92aWRlOiBGb3JtUmVuZGVyaW5nU2VydmljZSwgdXNlQ2xhc3M6IENsb3VkRm9ybVJlbmRlcmluZ1NlcnZpY2UgfVxuICAgICAgICAgICAgXVxuICAgICAgICB9O1xuICAgIH1cblxuICAgIHN0YXRpYyBmb3JDaGlsZCgpOiBNb2R1bGVXaXRoUHJvdmlkZXJzPFByb2Nlc3NTZXJ2aWNlc0Nsb3VkTW9kdWxlPiB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBuZ01vZHVsZTogUHJvY2Vzc1NlcnZpY2VzQ2xvdWRNb2R1bGVcbiAgICAgICAgfTtcbiAgICB9XG59XG4iXX0=