import { Injectable } from '@angular/core';
import { StorageService } from '@alfresco/adf-core';
import { of } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "@alfresco/adf-core";
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@alfresco/adf-core';
export class LocalPreferenceCloudService {
    constructor(storage) {
        this.storage = storage;
    }
    getPreferences(_, key) {
        if (key || key === '') {
            return of(this.prepareLocalPreferenceResponse(key));
        }
        return of({
            'list': {
                'entries': []
            }
        });
    }
    getPreferenceByKey(_, key) {
        return of(JSON.parse(this.storage.getItem(key)) || []);
    }
    createPreference(_, key, newPreference) {
        const storedFilters = JSON.parse(this.storage.getItem(key) || '[]');
        storedFilters.push(...newPreference);
        this.storage.setItem(key, JSON.stringify(storedFilters));
        return of(storedFilters);
    }
    updatePreference(_, key, updatedPreference) {
        if (key) {
            this.storage.setItem(key, JSON.stringify(updatedPreference));
        }
        return of(updatedPreference);
    }
    deletePreference(key, preferences) {
        if (key) {
            this.storage.setItem(key, JSON.stringify(preferences));
        }
        return of(preferences);
    }
    prepareLocalPreferenceResponse(key) {
        return {
            'list': {
                'entries': [
                    {
                        'entry': {
                            'key': key,
                            'value': this.storage.getItem(key) || '[]'
                        }
                    }
                ]
            }
        };
    }
}
LocalPreferenceCloudService.ɵfac = function LocalPreferenceCloudService_Factory(t) { return new (t || LocalPreferenceCloudService)(ɵngcc0.ɵɵinject(ɵngcc1.StorageService)); };
LocalPreferenceCloudService.ɵprov = i0.ɵɵdefineInjectable({ factory: function LocalPreferenceCloudService_Factory() { return new LocalPreferenceCloudService(i0.ɵɵinject(i1.StorageService)); }, token: LocalPreferenceCloudService, providedIn: "root" });
LocalPreferenceCloudService.ctorParameters = () => [
    { type: StorageService }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(LocalPreferenceCloudService, [{
        type: Injectable,
        args: [{ providedIn: 'root' }]
    }], function () { return [{ type: ɵngcc1.StorageService }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,