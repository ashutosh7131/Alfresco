/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { from } from 'rxjs';
export class BaseCloudService {
    constructor(apiService, appConfigService) {
        this.apiService = apiService;
        this.appConfigService = appConfigService;
        this.defaultParams = {
            path: '',
            httpMethod: '',
            contentTypes: ['application/json'],
            accepts: ['application/json'],
            returnType: Object
        };
    }
    getBasePath(appName) {
        return appName
            ? `${this.contextRoot}/${appName}`
            : this.contextRoot;
    }
    post(url, data) {
        return from(this.callApi(Object.assign(Object.assign({}, this.defaultParams), { path: url, httpMethod: 'POST', bodyParam: data })));
    }
    put(url, data) {
        return from(this.callApi(Object.assign(Object.assign({}, this.defaultParams), { path: url, httpMethod: 'PUT', bodyParam: data })));
    }
    delete(url) {
        return from(this.callApi(Object.assign(Object.assign({}, this.defaultParams), { path: url, httpMethod: 'DELETE' })));
    }
    get(url, queryParams) {
        return from(this.callApi(Object.assign(Object.assign({}, this.defaultParams), { path: url, httpMethod: 'GET', queryParams })));
    }
    callApi(params) {
        return this.apiService.getInstance()
            .oauth2Auth.callCustomApi(params.path, params.httpMethod, params.pathParams, params.queryParams, params.headerParams, params.formParams, params.bodyParam, params.contentTypes, params.accepts, params.returnType, params.contextRoot, params.responseType);
    }
    get contextRoot() {
        return this.appConfigService.get('bpmHost', '');
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS1jbG91ZC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Ii9ob21lL3RyYXZpcy9idWlsZC9BbGZyZXNjby9hbGZyZXNjby1uZzItY29tcG9uZW50cy9saWIvcHJvY2Vzcy1zZXJ2aWNlcy1jbG91ZC9zcmMvIiwic291cmNlcyI6WyJsaWIvc2VydmljZXMvYmFzZS1jbG91ZC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7R0FlRztBQUdILE9BQU8sRUFBRSxJQUFJLEVBQWMsTUFBTSxNQUFNLENBQUM7QUFpQnhDLE1BQU0sT0FBTyxnQkFBZ0I7SUFVekIsWUFDYyxVQUE4QixFQUM5QixnQkFBa0M7UUFEbEMsZUFBVSxHQUFWLFVBQVUsQ0FBb0I7UUFDOUIscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFrQjtRQVZ0QyxrQkFBYSxHQUFrQjtZQUNyQyxJQUFJLEVBQUUsRUFBRTtZQUNSLFVBQVUsRUFBRSxFQUFFO1lBQ2QsWUFBWSxFQUFFLENBQUMsa0JBQWtCLENBQUM7WUFDbEMsT0FBTyxFQUFFLENBQUMsa0JBQWtCLENBQUM7WUFDN0IsVUFBVSxFQUFFLE1BQU07U0FDckIsQ0FBQztJQUlpRCxDQUFDO0lBRXBELFdBQVcsQ0FBQyxPQUFlO1FBQ3ZCLE9BQU8sT0FBTztZQUNWLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxXQUFXLElBQUksT0FBTyxFQUFFO1lBQ2xDLENBQUMsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDO0lBQzNCLENBQUM7SUFFUyxJQUFJLENBQU8sR0FBVyxFQUFFLElBQVE7UUFDdEMsT0FBTyxJQUFJLENBQ1AsSUFBSSxDQUFDLE9BQU8saUNBQ0wsSUFBSSxDQUFDLGFBQWEsS0FDckIsSUFBSSxFQUFFLEdBQUcsRUFDVCxVQUFVLEVBQUUsTUFBTSxFQUNsQixTQUFTLEVBQUUsSUFBSSxJQUNqQixDQUNMLENBQUM7SUFDTixDQUFDO0lBRVMsR0FBRyxDQUFPLEdBQVcsRUFBRSxJQUFRO1FBQ3JDLE9BQU8sSUFBSSxDQUNQLElBQUksQ0FBQyxPQUFPLGlDQUNMLElBQUksQ0FBQyxhQUFhLEtBQ3JCLElBQUksRUFBRSxHQUFHLEVBQ1QsVUFBVSxFQUFFLEtBQUssRUFDakIsU0FBUyxFQUFFLElBQUksSUFDakIsQ0FDTCxDQUFDO0lBQ04sQ0FBQztJQUVTLE1BQU0sQ0FBQyxHQUFXO1FBQ3hCLE9BQU8sSUFBSSxDQUNQLElBQUksQ0FBQyxPQUFPLGlDQUNMLElBQUksQ0FBQyxhQUFhLEtBQ3JCLElBQUksRUFBRSxHQUFHLEVBQ1QsVUFBVSxFQUFFLFFBQVEsSUFDdEIsQ0FDTCxDQUFDO0lBQ04sQ0FBQztJQUVTLEdBQUcsQ0FBSSxHQUFXLEVBQUUsV0FBaUI7UUFDM0MsT0FBTyxJQUFJLENBQ1AsSUFBSSxDQUFDLE9BQU8saUNBQ0wsSUFBSSxDQUFDLGFBQWEsS0FDckIsSUFBSSxFQUFFLEdBQUcsRUFDVCxVQUFVLEVBQUUsS0FBSyxFQUNqQixXQUFXLElBQ2IsQ0FDTCxDQUFDO0lBQ04sQ0FBQztJQUVTLE9BQU8sQ0FBSSxNQUFxQjtRQUN0QyxPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsV0FBVyxFQUFFO2FBQy9CLFVBQVUsQ0FBQyxhQUFhLENBQ3JCLE1BQU0sQ0FBQyxJQUFJLEVBQ1gsTUFBTSxDQUFDLFVBQVUsRUFDakIsTUFBTSxDQUFDLFVBQVUsRUFDakIsTUFBTSxDQUFDLFdBQVcsRUFDbEIsTUFBTSxDQUFDLFlBQVksRUFDbkIsTUFBTSxDQUFDLFVBQVUsRUFDakIsTUFBTSxDQUFDLFNBQVMsRUFDaEIsTUFBTSxDQUFDLFlBQVksRUFDbkIsTUFBTSxDQUFDLE9BQU8sRUFDZCxNQUFNLENBQUMsVUFBVSxFQUNqQixNQUFNLENBQUMsV0FBVyxFQUNsQixNQUFNLENBQUMsWUFBWSxDQUN0QixDQUFDO0lBQ1YsQ0FBQztJQUVELElBQWMsV0FBVztRQUNyQixPQUFPLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsU0FBUyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQ3BELENBQUM7Q0FDSiIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IEFsZnJlc2NvQXBpU2VydmljZSwgQXBwQ29uZmlnU2VydmljZSB9IGZyb20gJ0BhbGZyZXNjby9hZGYtY29yZSc7XG5pbXBvcnQgeyBmcm9tLCBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ2FsbEFwaVBhcmFtcyB7XG4gICAgcGF0aDogc3RyaW5nO1xuICAgIGh0dHBNZXRob2Q6IHN0cmluZztcbiAgICBwYXRoUGFyYW1zPzogYW55O1xuICAgIHF1ZXJ5UGFyYW1zPzogYW55O1xuICAgIGhlYWRlclBhcmFtcz86IGFueTtcbiAgICBmb3JtUGFyYW1zPzogYW55O1xuICAgIGJvZHlQYXJhbT86IGFueTtcbiAgICBjb250ZW50VHlwZXM/OiBzdHJpbmdbXTtcbiAgICBhY2NlcHRzPzogc3RyaW5nW107XG4gICAgcmV0dXJuVHlwZT86IGFueTtcbiAgICBjb250ZXh0Um9vdD86IHN0cmluZztcbiAgICByZXNwb25zZVR5cGU/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBjbGFzcyBCYXNlQ2xvdWRTZXJ2aWNlIHtcblxuICAgIHByb3RlY3RlZCBkZWZhdWx0UGFyYW1zOiBDYWxsQXBpUGFyYW1zID0ge1xuICAgICAgICBwYXRoOiAnJyxcbiAgICAgICAgaHR0cE1ldGhvZDogJycsXG4gICAgICAgIGNvbnRlbnRUeXBlczogWydhcHBsaWNhdGlvbi9qc29uJ10sXG4gICAgICAgIGFjY2VwdHM6IFsnYXBwbGljYXRpb24vanNvbiddLFxuICAgICAgICByZXR1cm5UeXBlOiBPYmplY3RcbiAgICB9O1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHByb3RlY3RlZCBhcGlTZXJ2aWNlOiBBbGZyZXNjb0FwaVNlcnZpY2UsXG4gICAgICAgIHByb3RlY3RlZCBhcHBDb25maWdTZXJ2aWNlOiBBcHBDb25maWdTZXJ2aWNlKSB7fVxuXG4gICAgZ2V0QmFzZVBhdGgoYXBwTmFtZTogc3RyaW5nKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIGFwcE5hbWVcbiAgICAgICAgICAgID8gYCR7dGhpcy5jb250ZXh0Um9vdH0vJHthcHBOYW1lfWBcbiAgICAgICAgICAgIDogdGhpcy5jb250ZXh0Um9vdDtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgcG9zdDxULCBSPih1cmw6IHN0cmluZywgZGF0YT86IFQpOiBPYnNlcnZhYmxlPFI+IHtcbiAgICAgICAgcmV0dXJuIGZyb20oXG4gICAgICAgICAgICB0aGlzLmNhbGxBcGk8Uj4oe1xuICAgICAgICAgICAgICAgIC4uLnRoaXMuZGVmYXVsdFBhcmFtcyxcbiAgICAgICAgICAgICAgICBwYXRoOiB1cmwsXG4gICAgICAgICAgICAgICAgaHR0cE1ldGhvZDogJ1BPU1QnLFxuICAgICAgICAgICAgICAgIGJvZHlQYXJhbTogZGF0YVxuICAgICAgICAgICAgfSlcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgcHV0PFQsIFI+KHVybDogc3RyaW5nLCBkYXRhPzogVCk6IE9ic2VydmFibGU8Uj4ge1xuICAgICAgICByZXR1cm4gZnJvbShcbiAgICAgICAgICAgIHRoaXMuY2FsbEFwaTxSPih7XG4gICAgICAgICAgICAgICAgLi4udGhpcy5kZWZhdWx0UGFyYW1zLFxuICAgICAgICAgICAgICAgIHBhdGg6IHVybCxcbiAgICAgICAgICAgICAgICBodHRwTWV0aG9kOiAnUFVUJyxcbiAgICAgICAgICAgICAgICBib2R5UGFyYW06IGRhdGFcbiAgICAgICAgICAgIH0pXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGRlbGV0ZSh1cmw6IHN0cmluZyk6IE9ic2VydmFibGU8dm9pZD4ge1xuICAgICAgICByZXR1cm4gZnJvbShcbiAgICAgICAgICAgIHRoaXMuY2FsbEFwaTx2b2lkPih7XG4gICAgICAgICAgICAgICAgLi4udGhpcy5kZWZhdWx0UGFyYW1zLFxuICAgICAgICAgICAgICAgIHBhdGg6IHVybCxcbiAgICAgICAgICAgICAgICBodHRwTWV0aG9kOiAnREVMRVRFJ1xuICAgICAgICAgICAgfSlcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgZ2V0PFQ+KHVybDogc3RyaW5nLCBxdWVyeVBhcmFtcz86IGFueSk6IE9ic2VydmFibGU8VD4ge1xuICAgICAgICByZXR1cm4gZnJvbShcbiAgICAgICAgICAgIHRoaXMuY2FsbEFwaTxUPih7XG4gICAgICAgICAgICAgICAgLi4udGhpcy5kZWZhdWx0UGFyYW1zLFxuICAgICAgICAgICAgICAgIHBhdGg6IHVybCxcbiAgICAgICAgICAgICAgICBodHRwTWV0aG9kOiAnR0VUJyxcbiAgICAgICAgICAgICAgICBxdWVyeVBhcmFtc1xuICAgICAgICAgICAgfSlcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgY2FsbEFwaTxUPihwYXJhbXM6IENhbGxBcGlQYXJhbXMpOiBQcm9taXNlPFQ+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYXBpU2VydmljZS5nZXRJbnN0YW5jZSgpXG4gICAgICAgICAgICAub2F1dGgyQXV0aC5jYWxsQ3VzdG9tQXBpKFxuICAgICAgICAgICAgICAgIHBhcmFtcy5wYXRoLFxuICAgICAgICAgICAgICAgIHBhcmFtcy5odHRwTWV0aG9kLFxuICAgICAgICAgICAgICAgIHBhcmFtcy5wYXRoUGFyYW1zLFxuICAgICAgICAgICAgICAgIHBhcmFtcy5xdWVyeVBhcmFtcyxcbiAgICAgICAgICAgICAgICBwYXJhbXMuaGVhZGVyUGFyYW1zLFxuICAgICAgICAgICAgICAgIHBhcmFtcy5mb3JtUGFyYW1zLFxuICAgICAgICAgICAgICAgIHBhcmFtcy5ib2R5UGFyYW0sXG4gICAgICAgICAgICAgICAgcGFyYW1zLmNvbnRlbnRUeXBlcyxcbiAgICAgICAgICAgICAgICBwYXJhbXMuYWNjZXB0cyxcbiAgICAgICAgICAgICAgICBwYXJhbXMucmV0dXJuVHlwZSxcbiAgICAgICAgICAgICAgICBwYXJhbXMuY29udGV4dFJvb3QsXG4gICAgICAgICAgICAgICAgcGFyYW1zLnJlc3BvbnNlVHlwZVxuICAgICAgICAgICAgKTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgZ2V0IGNvbnRleHRSb290KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5hcHBDb25maWdTZXJ2aWNlLmdldCgnYnBtSG9zdCcsICcnKTtcbiAgICB9XG59XG4iXX0=