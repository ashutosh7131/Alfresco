import { Apollo } from 'apollo-angular';
import { HttpLink } from 'apollo-angular/http';
import { split, gql, InMemoryCache, ApolloLink } from '@apollo/client/core';
import { WebSocketLink } from '@apollo/client/link/ws';
import { onError } from '@apollo/client/link/error';
import { getMainDefinition } from '@apollo/client/utilities';
import { Injectable } from '@angular/core';
import { AppConfigService, AlfrescoApiService } from '@alfresco/adf-core';
import { BaseCloudService } from './base-cloud.service';
import * as i0 from "@angular/core";
import * as i1 from "@alfresco/adf-core";
import * as i2 from "apollo-angular";
import * as i3 from "apollo-angular/http";
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@alfresco/adf-core';
import * as ɵngcc2 from 'apollo-angular';
import * as ɵngcc3 from 'apollo-angular/http';
export class NotificationCloudService extends BaseCloudService {
    constructor(apiService, appConfigService, apollo, http) {
        super(apiService, appConfigService);
        this.apollo = apollo;
        this.http = http;
        this.appsListening = [];
    }
    get webSocketHost() {
        return this.contextRoot.split('://')[1];
    }
    get protocol() {
        return this.contextRoot.split('://')[0] === 'https' ? 'wss' : 'ws';
    }
    initNotificationsForApp(appName) {
        if (!this.appsListening.includes(appName)) {
            this.appsListening.push(appName);
            const httpLink = this.http.create({
                uri: `${this.getBasePath(appName)}/notifications/graphql`
            });
            const webSocketLink = new WebSocketLink({
                uri: `${this.protocol}://${this.webSocketHost}/${appName}/notifications/ws/graphql`,
                options: {
                    reconnect: true,
                    lazy: true,
                    connectionParams: {
                        kaInterval: 2000,
                        'X-Authorization': 'Bearer ' + this.apiService.getInstance().oauth2Auth.token
                    }
                }
            });
            const link = split(({ query }) => {
                const definition = getMainDefinition(query);
                return definition.kind === 'OperationDefinition' && definition.operation === 'subscription';
            }, webSocketLink, httpLink);
            const errorLink = onError(({ graphQLErrors, operation, forward }) => {
                if (graphQLErrors) {
                    for (const err of graphQLErrors) {
                        switch (err.extensions.code) {
                            case 'UNAUTHENTICATED':
                                const oldHeaders = operation.getContext().headers;
                                operation.setContext({
                                    headers: Object.assign(Object.assign({}, oldHeaders), { 'X-Authorization': 'Bearer ' + this.apiService.getInstance().oauth2Auth.token })
                                });
                                forward(operation);
                                break;
                            default:
                        }
                    }
                }
            });
            this.apollo.createNamed(appName, {
                link: ApolloLink.from([errorLink, link]),
                cache: new InMemoryCache({ merge: true }),
                defaultOptions: {
                    watchQuery: {
                        errorPolicy: 'all'
                    }
                }
            });
        }
    }
    makeGQLQuery(appName, gqlQuery) {
        this.initNotificationsForApp(appName);
        return this.apollo.use(appName).subscribe({ query: gql(gqlQuery) });
    }
}
NotificationCloudService.ɵfac = function NotificationCloudService_Factory(t) { return new (t || NotificationCloudService)(ɵngcc0.ɵɵinject(ɵngcc1.AlfrescoApiService), ɵngcc0.ɵɵinject(ɵngcc1.AppConfigService), ɵngcc0.ɵɵinject(ɵngcc2.Apollo), ɵngcc0.ɵɵinject(ɵngcc3.HttpLink)); };
NotificationCloudService.ɵprov = i0.ɵɵdefineInjectable({ factory: function NotificationCloudService_Factory() { return new NotificationCloudService(i0.ɵɵinject(i1.AlfrescoApiService), i0.ɵɵinject(i1.AppConfigService), i0.ɵɵinject(i2.Apollo), i0.ɵɵinject(i3.HttpLink)); }, token: NotificationCloudService, providedIn: "root" });
NotificationCloudService.ctorParameters = () => [
    { type: AlfrescoApiService },
    { type: AppConfigService },
    { type: Apollo },
    { type: HttpLink }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NotificationCloudService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc1.AlfrescoApiService }, { type: ɵngcc1.AppConfigService }, { type: ɵngcc2.Apollo }, { type: ɵngcc3.HttpLink }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,