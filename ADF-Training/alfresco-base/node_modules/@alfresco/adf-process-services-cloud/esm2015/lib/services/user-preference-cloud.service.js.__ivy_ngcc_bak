import { Injectable } from '@angular/core';
import { AlfrescoApiService, AppConfigService, LogService } from '@alfresco/adf-core';
import { throwError } from 'rxjs';
import { BaseCloudService } from './base-cloud.service';
import * as i0 from "@angular/core";
import * as i1 from "@alfresco/adf-core";
export class UserPreferenceCloudService extends BaseCloudService {
    constructor(apiService, appConfigService, logService) {
        super(apiService, appConfigService);
        this.logService = logService;
    }
    getPreferences(appName) {
        if (appName) {
            const url = `${this.getBasePath(appName)}/preference/v1/preferences`;
            return this.get(url);
        }
        else {
            this.logService.error('Appname is mandatory for querying preferences');
            return throwError('Appname not configured');
        }
    }
    getPreferenceByKey(appName, key) {
        if (appName) {
            const url = `${this.getBasePath(appName)}/preference/v1/preferences/${key}`;
            return this.get(url);
        }
        else {
            this.logService.error('Appname and key are mandatory for querying preference');
            return throwError('Appname not configured');
        }
    }
    createPreference(appName, key, newPreference) {
        if (appName) {
            const url = `${this.getBasePath(appName)}/preference/v1/preferences/${key}`;
            const payload = JSON.stringify(newPreference);
            return this.put(url, payload);
        }
        else {
            this.logService.error('Appname  and key are  mandatory for creating preference');
            return throwError('Appname not configured');
        }
    }
    updatePreference(appName, key, updatedPreference) {
        return this.createPreference(appName, key, updatedPreference);
    }
    deletePreference(appName, key) {
        if (appName) {
            const url = `${this.getBasePath(appName)}/preference/v1/preferences/${key}`;
            return this.delete(url);
        }
        else {
            this.logService.error('Appname and key are mandatory to delete preference');
            return throwError('Appname not configured');
        }
    }
}
UserPreferenceCloudService.ɵprov = i0.ɵɵdefineInjectable({ factory: function UserPreferenceCloudService_Factory() { return new UserPreferenceCloudService(i0.ɵɵinject(i1.AlfrescoApiService), i0.ɵɵinject(i1.AppConfigService), i0.ɵɵinject(i1.LogService)); }, token: UserPreferenceCloudService, providedIn: "root" });
UserPreferenceCloudService.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] }
];
UserPreferenceCloudService.ctorParameters = () => [
    { type: AlfrescoApiService },
    { type: AppConfigService },
    { type: LogService }
];
//# sourceMappingURL=data:application/json;base64,