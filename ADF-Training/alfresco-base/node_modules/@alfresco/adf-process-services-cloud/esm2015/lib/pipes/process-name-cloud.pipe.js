/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Pipe } from '@angular/core';
import moment from 'moment-es6';
import { LocalizedDatePipe } from '@alfresco/adf-core';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@alfresco/adf-core';
export class ProcessNameCloudPipe {
    constructor(localizedDatePipe) {
        this.localizedDatePipe = localizedDatePipe;
    }
    transform(processNameFormat, processInstance) {
        let processName = processNameFormat;
        if (processName.match(ProcessNameCloudPipe.DATE_TIME_IDENTIFIER_REG_EXP)) {
            const presentDateTime = moment.now();
            processName = processName.replace(ProcessNameCloudPipe.DATE_TIME_IDENTIFIER_REG_EXP, this.localizedDatePipe.transform(presentDateTime, 'medium'));
        }
        if (processName.match(ProcessNameCloudPipe.PROCESS_DEFINITION_IDENTIFIER_REG_EXP)) {
            const selectedProcessDefinitionName = processInstance ? processInstance.processDefinitionName : '';
            processName = processName.replace(ProcessNameCloudPipe.PROCESS_DEFINITION_IDENTIFIER_REG_EXP, selectedProcessDefinitionName);
        }
        return processName;
    }
}
ProcessNameCloudPipe.ɵfac = function ProcessNameCloudPipe_Factory(t) { return new (t || ProcessNameCloudPipe)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.LocalizedDatePipe)); };
ProcessNameCloudPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "processNameCloud", type: ProcessNameCloudPipe, pure: true });
ProcessNameCloudPipe.DATE_TIME_IDENTIFIER_REG_EXP = new RegExp('%{datetime}', 'i');
ProcessNameCloudPipe.PROCESS_DEFINITION_IDENTIFIER_REG_EXP = new RegExp('%{processdefinition}', 'i');
ProcessNameCloudPipe.ctorParameters = () => [
    { type: LocalizedDatePipe }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ProcessNameCloudPipe, [{
        type: Pipe,
        args: [{ name: 'processNameCloud' }]
    }], function () { return [{ type: ɵngcc1.LocalizedDatePipe }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvY2Vzcy1uYW1lLWNsb3VkLnBpcGUuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL2hvbWUvdHJhdmlzL2J1aWxkL0FsZnJlc2NvL2FsZnJlc2NvLW5nMi1jb21wb25lbnRzL2xpYi9wcm9jZXNzLXNlcnZpY2VzLWNsb3VkL3NyYy9saWIvcGlwZXMvcHJvY2Vzcy1uYW1lLWNsb3VkLnBpcGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUVILE9BQU8sRUFBRSxJQUFJLEVBQWlCLE1BQU0sZUFBZSxDQUFDO0FBQ3BELE9BQU8sTUFBTSxNQUFNLFlBQVksQ0FBQztBQUNoQyxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQzs7O0FBSXZELE1BQU0sT0FBTyxvQkFBb0I7QUFBRyxJQUloQyxZQUFvQixpQkFBb0M7QUFDNUQsUUFEd0Isc0JBQWlCLEdBQWpCLGlCQUFpQixDQUFtQjtBQUFDLElBQ3pELENBQUM7QUFDTCxJQUNJLFNBQVMsQ0FBQyxpQkFBeUIsRUFBRSxlQUFzQztBQUFJLFFBQzNFLElBQUksV0FBVyxHQUFHLGlCQUFpQixDQUFDO0FBQzVDLFFBQVEsSUFBSSxXQUFXLENBQUMsS0FBSyxDQUFDLG9CQUFvQixDQUFDLDRCQUE0QixDQUFDLEVBQUU7QUFDbEYsWUFBWSxNQUFNLGVBQWUsR0FBRyxNQUFNLENBQUMsR0FBRyxFQUFFLENBQUM7QUFDakQsWUFBWSxXQUFXLEdBQUcsV0FBVyxDQUFDLE9BQU8sQ0FDN0Isb0JBQW9CLENBQUMsNEJBQTRCLEVBQ2pELElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxTQUFTLENBQUMsZUFBZSxFQUFFLFFBQVEsQ0FBQyxDQUM5RCxDQUFDO0FBQ2QsU0FBUztBQUNULFFBQ1EsSUFBSSxXQUFXLENBQUMsS0FBSyxDQUFDLG9CQUFvQixDQUFDLHFDQUFxQyxDQUFDLEVBQUU7QUFDM0YsWUFBWSxNQUFNLDZCQUE2QixHQUFHLGVBQWUsQ0FBQyxDQUFDLENBQUMsZUFBZSxDQUFDLHFCQUFxQixDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7QUFDL0csWUFBWSxXQUFXLEdBQUcsV0FBVyxDQUFDLE9BQU8sQ0FDN0Isb0JBQW9CLENBQUMscUNBQXFDLEVBQzFELDZCQUE2QixDQUNoQyxDQUFDO0FBQ2QsU0FBUztBQUNULFFBQVEsT0FBTyxXQUFXLENBQUM7QUFDM0IsSUFBSSxDQUFDO0FBQ0w7O3VIQUFDO0FBekJVLGlEQUE0QixHQUFHLElBQUksTUFBTSxDQUFDLGFBQWEsRUFBRSxHQUFHLENBQUMsQ0FBQztBQUM5RCwwREFBcUMsR0FBRyxJQUFJLE1BQU0sQ0FBQyxzQkFBc0IsRUFBRSxHQUFHLENBQUMsQ0FBQyxBQUZ0RjtBQUFDO0VBREwsSUFBSSxTQUFDLEVBQUUsSUFBSSxFQUFFLHZCQUNzQyxZQUozQyxpQkFBaUI7QUFBRztNQUdHLEVBQUU7OztrRkFISDtBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgUGlwZSwgUGlwZVRyYW5zZm9ybSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IG1vbWVudCBmcm9tICdtb21lbnQtZXM2JztcbmltcG9ydCB7IExvY2FsaXplZERhdGVQaXBlIH0gZnJvbSAnQGFsZnJlc2NvL2FkZi1jb3JlJztcbmltcG9ydCB7IFByb2Nlc3NJbnN0YW5jZUNsb3VkIH0gZnJvbSAnLi4vcHJvY2Vzcy9zdGFydC1wcm9jZXNzL21vZGVscy9wcm9jZXNzLWluc3RhbmNlLWNsb3VkLm1vZGVsJztcblxuQFBpcGUoeyBuYW1lOiAncHJvY2Vzc05hbWVDbG91ZCcgfSlcbmV4cG9ydCBjbGFzcyBQcm9jZXNzTmFtZUNsb3VkUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xuICAgIHN0YXRpYyBEQVRFX1RJTUVfSURFTlRJRklFUl9SRUdfRVhQID0gbmV3IFJlZ0V4cCgnJXtkYXRldGltZX0nLCAnaScpO1xuICAgIHN0YXRpYyBQUk9DRVNTX0RFRklOSVRJT05fSURFTlRJRklFUl9SRUdfRVhQID0gbmV3IFJlZ0V4cCgnJXtwcm9jZXNzZGVmaW5pdGlvbn0nLCAnaScpO1xuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBsb2NhbGl6ZWREYXRlUGlwZTogTG9jYWxpemVkRGF0ZVBpcGUpIHtcbiAgICB9XG5cbiAgICB0cmFuc2Zvcm0ocHJvY2Vzc05hbWVGb3JtYXQ6IHN0cmluZywgcHJvY2Vzc0luc3RhbmNlPzogUHJvY2Vzc0luc3RhbmNlQ2xvdWQpOiBzdHJpbmcge1xuICAgICAgICBsZXQgcHJvY2Vzc05hbWUgPSBwcm9jZXNzTmFtZUZvcm1hdDtcbiAgICAgICAgaWYgKHByb2Nlc3NOYW1lLm1hdGNoKFByb2Nlc3NOYW1lQ2xvdWRQaXBlLkRBVEVfVElNRV9JREVOVElGSUVSX1JFR19FWFApKSB7XG4gICAgICAgICAgICBjb25zdCBwcmVzZW50RGF0ZVRpbWUgPSBtb21lbnQubm93KCk7XG4gICAgICAgICAgICBwcm9jZXNzTmFtZSA9IHByb2Nlc3NOYW1lLnJlcGxhY2UoXG4gICAgICAgICAgICAgICAgUHJvY2Vzc05hbWVDbG91ZFBpcGUuREFURV9USU1FX0lERU5USUZJRVJfUkVHX0VYUCxcbiAgICAgICAgICAgICAgICB0aGlzLmxvY2FsaXplZERhdGVQaXBlLnRyYW5zZm9ybShwcmVzZW50RGF0ZVRpbWUsICdtZWRpdW0nKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwcm9jZXNzTmFtZS5tYXRjaChQcm9jZXNzTmFtZUNsb3VkUGlwZS5QUk9DRVNTX0RFRklOSVRJT05fSURFTlRJRklFUl9SRUdfRVhQKSkge1xuICAgICAgICAgICAgY29uc3Qgc2VsZWN0ZWRQcm9jZXNzRGVmaW5pdGlvbk5hbWUgPSBwcm9jZXNzSW5zdGFuY2UgPyBwcm9jZXNzSW5zdGFuY2UucHJvY2Vzc0RlZmluaXRpb25OYW1lIDogJyc7XG4gICAgICAgICAgICBwcm9jZXNzTmFtZSA9IHByb2Nlc3NOYW1lLnJlcGxhY2UoXG4gICAgICAgICAgICAgICAgUHJvY2Vzc05hbWVDbG91ZFBpcGUuUFJPQ0VTU19ERUZJTklUSU9OX0lERU5USUZJRVJfUkVHX0VYUCxcbiAgICAgICAgICAgICAgICBzZWxlY3RlZFByb2Nlc3NEZWZpbml0aW9uTmFtZVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcHJvY2Vzc05hbWU7XG4gICAgfVxufVxuIl19