/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { NgModule } from '@angular/core';
import { TRANSLATION_PROVIDER, CoreModule, FormRenderingService } from '@alfresco/adf-core';
import { AppListCloudModule } from './app/app-list-cloud.module';
import { TaskCloudModule } from './task/task-cloud.module';
import { ProcessCloudModule } from './process/process-cloud.module';
import { GroupCloudModule } from './group/group-cloud.module';
import { FormCloudModule } from './form/form-cloud.module';
import { TaskFormModule } from './task/task-form/task-form.module';
import { LocalPreferenceCloudService, PROCESS_FILTERS_SERVICE_TOKEN, TASK_FILTERS_SERVICE_TOKEN } from './services/public-api';
import { PeopleCloudModule } from './people/people-cloud.module';
import { CloudFormRenderingService } from './form/components/cloud-form-rendering.service';
import { ProcessServicesCloudPipeModule } from './pipes/process-services-cloud-pipe.module';
import * as ɵngcc0 from '@angular/core';
const ɵ0 = {
    name: 'adf-process-services-cloud',
    source: 'assets/adf-process-services-cloud'
};
export class ProcessServicesCloudModule {
    static forRoot(preferenceServiceInstance) {
        return {
            ngModule: ProcessServicesCloudModule,
            providers: [
                {
                    provide: TRANSLATION_PROVIDER,
                    multi: true,
                    useValue: {
                        name: 'adf-process-services-cloud',
                        source: 'assets/adf-process-services-cloud'
                    }
                },
                { provide: PROCESS_FILTERS_SERVICE_TOKEN, useExisting: preferenceServiceInstance !== null && preferenceServiceInstance !== void 0 ? preferenceServiceInstance : LocalPreferenceCloudService },
                { provide: TASK_FILTERS_SERVICE_TOKEN, useExisting: preferenceServiceInstance !== null && preferenceServiceInstance !== void 0 ? preferenceServiceInstance : LocalPreferenceCloudService },
                FormRenderingService,
                { provide: FormRenderingService, useClass: CloudFormRenderingService }
            ]
        };
    }
    static forChild() {
        return {
            ngModule: ProcessServicesCloudModule
        };
    }
}
ProcessServicesCloudModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: ProcessServicesCloudModule });
ProcessServicesCloudModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function ProcessServicesCloudModule_Factory(t) { return new (t || ProcessServicesCloudModule)(); }, providers: [
        {
            provide: TRANSLATION_PROVIDER,
            multi: true,
            useValue: ɵ0
        }
    ], imports: [[
            CoreModule,
            AppListCloudModule,
            ProcessCloudModule,
            TaskCloudModule,
            GroupCloudModule,
            PeopleCloudModule,
            FormCloudModule,
            TaskFormModule,
            ProcessServicesCloudPipeModule
        ], AppListCloudModule,
        ProcessCloudModule,
        TaskCloudModule,
        GroupCloudModule,
        FormCloudModule,
        TaskFormModule,
        PeopleCloudModule,
        ProcessServicesCloudPipeModule] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ProcessServicesCloudModule, { imports: function () { return [CoreModule,
        AppListCloudModule,
        ProcessCloudModule,
        TaskCloudModule,
        GroupCloudModule,
        PeopleCloudModule,
        FormCloudModule,
        TaskFormModule,
        ProcessServicesCloudPipeModule]; }, exports: function () { return [AppListCloudModule,
        ProcessCloudModule,
        TaskCloudModule,
        GroupCloudModule,
        FormCloudModule,
        TaskFormModule,
        PeopleCloudModule,
        ProcessServicesCloudPipeModule]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ProcessServicesCloudModule, [{
        type: NgModule,
        args: [{
                imports: [
                    CoreModule,
                    AppListCloudModule,
                    ProcessCloudModule,
                    TaskCloudModule,
                    GroupCloudModule,
                    PeopleCloudModule,
                    FormCloudModule,
                    TaskFormModule,
                    ProcessServicesCloudPipeModule
                ],
                providers: [
                    {
                        provide: TRANSLATION_PROVIDER,
                        multi: true,
                        useValue: ɵ0
                    }
                ],
                exports: [
                    AppListCloudModule,
                    ProcessCloudModule,
                    TaskCloudModule,
                    GroupCloudModule,
                    FormCloudModule,
                    TaskFormModule,
                    PeopleCloudModule,
                    ProcessServicesCloudPipeModule
                ]
            }]
    }], null, null); })();
export { ɵ0 };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvY2Vzcy1zZXJ2aWNlcy1jbG91ZC5tb2R1bGUuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL2hvbWUvdHJhdmlzL2J1aWxkL0FsZnJlc2NvL2FsZnJlc2NvLW5nMi1jb21wb25lbnRzL2xpYi9wcm9jZXNzLXNlcnZpY2VzLWNsb3VkL3NyYy9saWIvcHJvY2Vzcy1zZXJ2aWNlcy1jbG91ZC5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUVILE9BQU8sRUFBRSxRQUFRLEVBQXVCLE1BQU0sZUFBZSxDQUFDO0FBQzlELE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxVQUFVLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUM1RixPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUNqRSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDM0QsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFDcEUsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDOUQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQzNELE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxtQ0FBbUMsQ0FBQztBQUNuRSxPQUFPLEVBQ0gsMkJBQTJCLEVBRTNCLDZCQUE2QixFQUM3QiwwQkFBMEIsRUFDN0IsTUFBTSx1QkFBdUIsQ0FBQztBQUMvQixPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQUNqRSxPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSxnREFBZ0QsQ0FBQztBQUMzRixPQUFPLEVBQUUsOEJBQThCLEVBQUUsTUFBTSw0Q0FBNEMsQ0FBQzs7QUFDNUYsV0FpQnNCO0FBQ3RCLElBQWdCLElBQUksRUFBRSw0QkFBNEI7QUFDbEQsSUFBZ0IsTUFBTSxFQUFFLG1DQUFtQztBQUMzRCxDQUFhO0FBY2IsTUFBTSxPQUFPLDBCQUEwQjtBQUN2QyxJQUFJLE1BQU0sQ0FBQyxPQUFPLENBQUMseUJBQTJEO0FBQUksUUFDMUUsT0FBTztBQUNmLFlBQVksUUFBUSxFQUFFLDBCQUEwQjtBQUNoRCxZQUFZLFNBQVMsRUFBRTtBQUN2QixnQkFBZ0I7QUFDaEIsb0JBQW9CLE9BQU8sRUFBRSxvQkFBb0I7QUFDakQsb0JBQW9CLEtBQUssRUFBRSxJQUFJO0FBQy9CLG9CQUFvQixRQUFRLEVBQUU7QUFDOUIsd0JBQXdCLElBQUksRUFBRSw0QkFBNEI7QUFDMUQsd0JBQXdCLE1BQU0sRUFBRSxtQ0FBbUM7QUFDbkUscUJBQXFCO0FBQ3JCLGlCQUFpQjtBQUNqQixnQkFBZ0IsRUFBRSxPQUFPLEVBQUUsNkJBQTZCLEVBQUUsV0FBVyxFQUFFLHlCQUF5QixhQUF6Qix5QkFBeUIsY0FBekIseUJBQXlCLEdBQUksMkJBQTJCLEVBQUU7QUFDakksZ0JBQWdCLEVBQUUsT0FBTyxFQUFFLDBCQUEwQixFQUFFLFdBQVcsRUFBRSx5QkFBeUIsYUFBekIseUJBQXlCLGNBQXpCLHlCQUF5QixHQUFJLDJCQUEyQixFQUFFO0FBQzlILGdCQUFnQixvQkFBb0I7QUFDcEMsZ0JBQWdCLEVBQUUsT0FBTyxFQUFFLG9CQUFvQixFQUFFLFFBQVEsRUFBRSx5QkFBeUIsRUFBRTtBQUN0RixhQUFhO0FBQ2IsU0FBUyxDQUFDO0FBQ1YsSUFBSSxDQUFDO0FBQ0wsSUFDSSxNQUFNLENBQUMsUUFBUTtBQUFLLFFBQ2hCLE9BQU87QUFDZixZQUFZLFFBQVEsRUFBRSwwQkFBMEI7QUFDaEQsU0FBUyxDQUFDO0FBQ1YsSUFBSSxDQUFDO0FBQ0w7c0RBM0RDLFFBQVEsU0FBQyxrQkFDTixPQUFPO0NBQUUsc0JBQ0wsVUFBVSxzQkFDVixrQkFBa0Isc0JBQ2xCLGtCQUFrQixzQkFDbEIsZUFBZSxzQkFDZjtNQUFnQjtrQkFDaEIsaUJBQWlCO2NBQ2pCO0lBQWU7Q0FDZjtLQUFjO1FBQ2Q7Y0FBOEI7QUFDakMsa0JBQ0QsU0FBUyxFQUFFO21CQUNQO2dCQUNJLE9BQU8sRUFBRTtlQUFvQjtVQUM3QixLQUFLLEVBQUUsSUFBSTtrQkFDWCxRQUFRO0VBR1Asc0JBQ0osa0JBQ0o7aUJBQ0QsT0FBTyxFQUFFO2lCQUNMO09BQWtCO0lBQ2xCLGtCQUFrQjtrQkFDbEI7UUFBZTtNQUNmLGdCQUFnQjtpQkFDaEIsZUFBZTtVQUNmLGNBQWMsc0JBQ2QsaUJBQWlCLHNCQUNqQiw4QkFBOEIsa0JBQ2pDLGNBQ0o7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzswQkFDSTtBQUFDO0FBQWUiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBOZ01vZHVsZSwgTW9kdWxlV2l0aFByb3ZpZGVycyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgVFJBTlNMQVRJT05fUFJPVklERVIsIENvcmVNb2R1bGUsIEZvcm1SZW5kZXJpbmdTZXJ2aWNlIH0gZnJvbSAnQGFsZnJlc2NvL2FkZi1jb3JlJztcbmltcG9ydCB7IEFwcExpc3RDbG91ZE1vZHVsZSB9IGZyb20gJy4vYXBwL2FwcC1saXN0LWNsb3VkLm1vZHVsZSc7XG5pbXBvcnQgeyBUYXNrQ2xvdWRNb2R1bGUgfSBmcm9tICcuL3Rhc2svdGFzay1jbG91ZC5tb2R1bGUnO1xuaW1wb3J0IHsgUHJvY2Vzc0Nsb3VkTW9kdWxlIH0gZnJvbSAnLi9wcm9jZXNzL3Byb2Nlc3MtY2xvdWQubW9kdWxlJztcbmltcG9ydCB7IEdyb3VwQ2xvdWRNb2R1bGUgfSBmcm9tICcuL2dyb3VwL2dyb3VwLWNsb3VkLm1vZHVsZSc7XG5pbXBvcnQgeyBGb3JtQ2xvdWRNb2R1bGUgfSBmcm9tICcuL2Zvcm0vZm9ybS1jbG91ZC5tb2R1bGUnO1xuaW1wb3J0IHsgVGFza0Zvcm1Nb2R1bGUgfSBmcm9tICcuL3Rhc2svdGFzay1mb3JtL3Rhc2stZm9ybS5tb2R1bGUnO1xuaW1wb3J0IHtcbiAgICBMb2NhbFByZWZlcmVuY2VDbG91ZFNlcnZpY2UsXG4gICAgUHJlZmVyZW5jZUNsb3VkU2VydmljZUludGVyZmFjZSxcbiAgICBQUk9DRVNTX0ZJTFRFUlNfU0VSVklDRV9UT0tFTixcbiAgICBUQVNLX0ZJTFRFUlNfU0VSVklDRV9UT0tFTlxufSBmcm9tICcuL3NlcnZpY2VzL3B1YmxpYy1hcGknO1xuaW1wb3J0IHsgUGVvcGxlQ2xvdWRNb2R1bGUgfSBmcm9tICcuL3Blb3BsZS9wZW9wbGUtY2xvdWQubW9kdWxlJztcbmltcG9ydCB7IENsb3VkRm9ybVJlbmRlcmluZ1NlcnZpY2UgfSBmcm9tICcuL2Zvcm0vY29tcG9uZW50cy9jbG91ZC1mb3JtLXJlbmRlcmluZy5zZXJ2aWNlJztcbmltcG9ydCB7IFByb2Nlc3NTZXJ2aWNlc0Nsb3VkUGlwZU1vZHVsZSB9IGZyb20gJy4vcGlwZXMvcHJvY2Vzcy1zZXJ2aWNlcy1jbG91ZC1waXBlLm1vZHVsZSc7XG5cbkBOZ01vZHVsZSh7XG4gICAgaW1wb3J0czogW1xuICAgICAgICBDb3JlTW9kdWxlLFxuICAgICAgICBBcHBMaXN0Q2xvdWRNb2R1bGUsXG4gICAgICAgIFByb2Nlc3NDbG91ZE1vZHVsZSxcbiAgICAgICAgVGFza0Nsb3VkTW9kdWxlLFxuICAgICAgICBHcm91cENsb3VkTW9kdWxlLFxuICAgICAgICBQZW9wbGVDbG91ZE1vZHVsZSxcbiAgICAgICAgRm9ybUNsb3VkTW9kdWxlLFxuICAgICAgICBUYXNrRm9ybU1vZHVsZSxcbiAgICAgICAgUHJvY2Vzc1NlcnZpY2VzQ2xvdWRQaXBlTW9kdWxlXG4gICAgXSxcbiAgICBwcm92aWRlcnM6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgcHJvdmlkZTogVFJBTlNMQVRJT05fUFJPVklERVIsXG4gICAgICAgICAgICBtdWx0aTogdHJ1ZSxcbiAgICAgICAgICAgIHVzZVZhbHVlOiB7XG4gICAgICAgICAgICAgICAgbmFtZTogJ2FkZi1wcm9jZXNzLXNlcnZpY2VzLWNsb3VkJyxcbiAgICAgICAgICAgICAgICBzb3VyY2U6ICdhc3NldHMvYWRmLXByb2Nlc3Mtc2VydmljZXMtY2xvdWQnXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICBdLFxuICAgIGV4cG9ydHM6IFtcbiAgICAgICAgQXBwTGlzdENsb3VkTW9kdWxlLFxuICAgICAgICBQcm9jZXNzQ2xvdWRNb2R1bGUsXG4gICAgICAgIFRhc2tDbG91ZE1vZHVsZSxcbiAgICAgICAgR3JvdXBDbG91ZE1vZHVsZSxcbiAgICAgICAgRm9ybUNsb3VkTW9kdWxlLFxuICAgICAgICBUYXNrRm9ybU1vZHVsZSxcbiAgICAgICAgUGVvcGxlQ2xvdWRNb2R1bGUsXG4gICAgICAgIFByb2Nlc3NTZXJ2aWNlc0Nsb3VkUGlwZU1vZHVsZVxuICAgIF1cbn0pXG5leHBvcnQgY2xhc3MgUHJvY2Vzc1NlcnZpY2VzQ2xvdWRNb2R1bGUge1xuICAgIHN0YXRpYyBmb3JSb290KHByZWZlcmVuY2VTZXJ2aWNlSW5zdGFuY2U/OiBQcmVmZXJlbmNlQ2xvdWRTZXJ2aWNlSW50ZXJmYWNlKTogTW9kdWxlV2l0aFByb3ZpZGVyczxQcm9jZXNzU2VydmljZXNDbG91ZE1vZHVsZT4ge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbmdNb2R1bGU6IFByb2Nlc3NTZXJ2aWNlc0Nsb3VkTW9kdWxlLFxuICAgICAgICAgICAgcHJvdmlkZXJzOiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBwcm92aWRlOiBUUkFOU0xBVElPTl9QUk9WSURFUixcbiAgICAgICAgICAgICAgICAgICAgbXVsdGk6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIHVzZVZhbHVlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAnYWRmLXByb2Nlc3Mtc2VydmljZXMtY2xvdWQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlOiAnYXNzZXRzL2FkZi1wcm9jZXNzLXNlcnZpY2VzLWNsb3VkJ1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7IHByb3ZpZGU6IFBST0NFU1NfRklMVEVSU19TRVJWSUNFX1RPS0VOLCB1c2VFeGlzdGluZzogcHJlZmVyZW5jZVNlcnZpY2VJbnN0YW5jZSA/PyBMb2NhbFByZWZlcmVuY2VDbG91ZFNlcnZpY2UgfSxcbiAgICAgICAgICAgICAgICB7IHByb3ZpZGU6IFRBU0tfRklMVEVSU19TRVJWSUNFX1RPS0VOLCB1c2VFeGlzdGluZzogcHJlZmVyZW5jZVNlcnZpY2VJbnN0YW5jZSA/PyBMb2NhbFByZWZlcmVuY2VDbG91ZFNlcnZpY2UgfSxcbiAgICAgICAgICAgICAgICBGb3JtUmVuZGVyaW5nU2VydmljZSxcbiAgICAgICAgICAgICAgICB7IHByb3ZpZGU6IEZvcm1SZW5kZXJpbmdTZXJ2aWNlLCB1c2VDbGFzczogQ2xvdWRGb3JtUmVuZGVyaW5nU2VydmljZSB9XG4gICAgICAgICAgICBdXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgc3RhdGljIGZvckNoaWxkKCk6IE1vZHVsZVdpdGhQcm92aWRlcnM8UHJvY2Vzc1NlcnZpY2VzQ2xvdWRNb2R1bGU+IHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG5nTW9kdWxlOiBQcm9jZXNzU2VydmljZXNDbG91ZE1vZHVsZVxuICAgICAgICB9O1xuICAgIH1cbn1cbiJdfQ==