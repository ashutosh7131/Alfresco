/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { NgModule } from '@angular/core';
import { ProcessFiltersCloudModule } from './process-filters/process-filters-cloud.module';
import { ProcessListCloudModule } from './process-list/process-list-cloud.module';
import { StartProcessCloudModule } from './start-process/start-process-cloud.module';
import { CoreModule } from '@alfresco/adf-core';
import { ProcessHeaderCloudModule } from './process-header/process-header-cloud.module';
import { ProcessDirectiveModule } from './directives/process-directive.module';
import { ProcessNameCloudPipe } from '../pipes/process-name-cloud.pipe';
export class ProcessCloudModule {
}
ProcessCloudModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CoreModule,
                    ProcessFiltersCloudModule,
                    ProcessListCloudModule,
                    StartProcessCloudModule,
                    ProcessHeaderCloudModule,
                    ProcessDirectiveModule
                ],
                exports: [
                    ProcessFiltersCloudModule,
                    ProcessListCloudModule,
                    StartProcessCloudModule,
                    ProcessHeaderCloudModule,
                    ProcessDirectiveModule
                ],
                providers: [ProcessNameCloudPipe]
            },] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvY2Vzcy1jbG91ZC5tb2R1bGUuanMiLCJzb3VyY2VSb290IjoiL2hvbWUvdHJhdmlzL2J1aWxkL0FsZnJlc2NvL2FsZnJlc2NvLW5nMi1jb21wb25lbnRzL2xpYi9wcm9jZXNzLXNlcnZpY2VzLWNsb3VkL3NyYy8iLCJzb3VyY2VzIjpbImxpYi9wcm9jZXNzL3Byb2Nlc3MtY2xvdWQubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7R0FlRztBQUVILE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDekMsT0FBTyxFQUFFLHlCQUF5QixFQUFFLE1BQU0sZ0RBQWdELENBQUM7QUFDM0YsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sMENBQTBDLENBQUM7QUFDbEYsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sNENBQTRDLENBQUM7QUFDckYsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ2hELE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxNQUFNLDhDQUE4QyxDQUFDO0FBQ3hGLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLHVDQUF1QyxDQUFDO0FBQy9FLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLGtDQUFrQyxDQUFDO0FBb0J4RSxNQUFNLE9BQU8sa0JBQWtCOzs7WUFsQjlCLFFBQVEsU0FBQztnQkFDTixPQUFPLEVBQUU7b0JBQ0wsVUFBVTtvQkFDVix5QkFBeUI7b0JBQ3pCLHNCQUFzQjtvQkFDdEIsdUJBQXVCO29CQUN2Qix3QkFBd0I7b0JBQ3hCLHNCQUFzQjtpQkFDekI7Z0JBQ0QsT0FBTyxFQUFFO29CQUNMLHlCQUF5QjtvQkFDekIsc0JBQXNCO29CQUN0Qix1QkFBdUI7b0JBQ3ZCLHdCQUF3QjtvQkFDeEIsc0JBQXNCO2lCQUN6QjtnQkFDRCxTQUFTLEVBQUUsQ0FBQyxvQkFBb0IsQ0FBQzthQUNwQyIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBQcm9jZXNzRmlsdGVyc0Nsb3VkTW9kdWxlIH0gZnJvbSAnLi9wcm9jZXNzLWZpbHRlcnMvcHJvY2Vzcy1maWx0ZXJzLWNsb3VkLm1vZHVsZSc7XG5pbXBvcnQgeyBQcm9jZXNzTGlzdENsb3VkTW9kdWxlIH0gZnJvbSAnLi9wcm9jZXNzLWxpc3QvcHJvY2Vzcy1saXN0LWNsb3VkLm1vZHVsZSc7XG5pbXBvcnQgeyBTdGFydFByb2Nlc3NDbG91ZE1vZHVsZSB9IGZyb20gJy4vc3RhcnQtcHJvY2Vzcy9zdGFydC1wcm9jZXNzLWNsb3VkLm1vZHVsZSc7XG5pbXBvcnQgeyBDb3JlTW9kdWxlIH0gZnJvbSAnQGFsZnJlc2NvL2FkZi1jb3JlJztcbmltcG9ydCB7IFByb2Nlc3NIZWFkZXJDbG91ZE1vZHVsZSB9IGZyb20gJy4vcHJvY2Vzcy1oZWFkZXIvcHJvY2Vzcy1oZWFkZXItY2xvdWQubW9kdWxlJztcbmltcG9ydCB7IFByb2Nlc3NEaXJlY3RpdmVNb2R1bGUgfSBmcm9tICcuL2RpcmVjdGl2ZXMvcHJvY2Vzcy1kaXJlY3RpdmUubW9kdWxlJztcbmltcG9ydCB7IFByb2Nlc3NOYW1lQ2xvdWRQaXBlIH0gZnJvbSAnLi4vcGlwZXMvcHJvY2Vzcy1uYW1lLWNsb3VkLnBpcGUnO1xuXG5ATmdNb2R1bGUoe1xuICAgIGltcG9ydHM6IFtcbiAgICAgICAgQ29yZU1vZHVsZSxcbiAgICAgICAgUHJvY2Vzc0ZpbHRlcnNDbG91ZE1vZHVsZSxcbiAgICAgICAgUHJvY2Vzc0xpc3RDbG91ZE1vZHVsZSxcbiAgICAgICAgU3RhcnRQcm9jZXNzQ2xvdWRNb2R1bGUsXG4gICAgICAgIFByb2Nlc3NIZWFkZXJDbG91ZE1vZHVsZSxcbiAgICAgICAgUHJvY2Vzc0RpcmVjdGl2ZU1vZHVsZVxuICAgIF0sXG4gICAgZXhwb3J0czogW1xuICAgICAgICBQcm9jZXNzRmlsdGVyc0Nsb3VkTW9kdWxlLFxuICAgICAgICBQcm9jZXNzTGlzdENsb3VkTW9kdWxlLFxuICAgICAgICBTdGFydFByb2Nlc3NDbG91ZE1vZHVsZSxcbiAgICAgICAgUHJvY2Vzc0hlYWRlckNsb3VkTW9kdWxlLFxuICAgICAgICBQcm9jZXNzRGlyZWN0aXZlTW9kdWxlXG4gICAgXSxcbiAgICBwcm92aWRlcnM6IFtQcm9jZXNzTmFtZUNsb3VkUGlwZV1cbn0pXG5leHBvcnQgY2xhc3MgUHJvY2Vzc0Nsb3VkTW9kdWxlIHsgfVxuIl19