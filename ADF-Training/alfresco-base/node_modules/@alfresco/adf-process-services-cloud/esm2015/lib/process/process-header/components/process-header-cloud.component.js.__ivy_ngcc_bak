/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, Input, EventEmitter, ViewEncapsulation } from '@angular/core';
import { CardViewTextItemModel, TranslationService, AppConfigService, CardViewDateItemModel } from '@alfresco/adf-core';
import { ProcessCloudService } from '../../services/process-cloud.service';
import { takeUntil } from 'rxjs/operators';
import { Subject } from 'rxjs';
export class ProcessHeaderCloudComponent {
    constructor(processCloudService, translationService, appConfig) {
        this.processCloudService = processCloudService;
        this.translationService = translationService;
        this.appConfig = appConfig;
        this.appName = '';
        this.loaded = new EventEmitter();
        this.onDestroy$ = new Subject();
    }
    ngOnInit() {
        this.dateFormat = this.appConfig.get('dateValues.defaultDateFormat');
        this.dateLocale = this.appConfig.get('dateValues.defaultDateLocale');
        this.processCloudService.dataChangesDetected
            .pipe(takeUntil(this.onDestroy$))
            .subscribe((processDetails) => this.onLoaded(processDetails));
    }
    ngOnChanges() {
        if ((this.appName || this.appName === '') && this.processInstanceId) {
            this.loadProcessInstanceDetails(this.appName, this.processInstanceId);
        }
    }
    loadProcessInstanceDetails(appName, processInstanceId) {
        this.processCloudService
            .getProcessInstanceById(appName, processInstanceId)
            .subscribe((result) => this.onLoaded(result));
    }
    onLoaded(processInstanceDetails) {
        this.processInstanceDetails = processInstanceDetails;
        this.refreshData();
        this.loaded.emit(processInstanceDetails);
    }
    refreshData() {
        if (this.processInstanceDetails) {
            const defaultProperties = this.initDefaultProperties();
            const filteredProperties = this.appConfig.get('adf-cloud-process-header.presets.properties');
            this.properties = defaultProperties.filter((cardItem) => this.isValidSelection(filteredProperties, cardItem));
        }
    }
    initDefaultProperties() {
        return [
            new CardViewTextItemModel({
                label: 'ADF_CLOUD_PROCESS_HEADER.PROPERTIES.ID',
                value: this.processInstanceDetails.id,
                key: 'id'
            }),
            new CardViewTextItemModel({
                label: 'ADF_CLOUD_PROCESS_HEADER.PROPERTIES.NAME',
                value: this.processInstanceDetails.name,
                key: 'name',
                default: this.translationService.instant('ADF_CLOUD_PROCESS_HEADER.PROPERTIES.NAME_DEFAULT')
            }),
            new CardViewTextItemModel({
                label: 'ADF_CLOUD_PROCESS_HEADER.PROPERTIES.STATUS',
                value: this.processInstanceDetails.status,
                key: 'status'
            }),
            new CardViewTextItemModel({
                label: 'ADF_CLOUD_PROCESS_HEADER.PROPERTIES.INITIATOR',
                value: this.processInstanceDetails.initiator,
                key: 'initiator'
            }),
            new CardViewDateItemModel({
                label: 'ADF_CLOUD_PROCESS_HEADER.PROPERTIES.START_DATE',
                value: this.processInstanceDetails.startDate,
                key: 'startDate',
                format: this.dateFormat,
                locale: this.dateLocale
            }),
            new CardViewDateItemModel({
                label: 'ADF_CLOUD_PROCESS_HEADER.PROPERTIES.LAST_MODIFIED',
                value: this.processInstanceDetails.lastModified,
                key: 'lastModified',
                format: this.dateFormat,
                locale: this.dateLocale
            }),
            new CardViewTextItemModel({
                label: 'ADF_CLOUD_PROCESS_HEADER.PROPERTIES.PARENT_ID',
                value: this.processInstanceDetails.parentId,
                key: 'parentId',
                default: this.translationService.instant('ADF_CLOUD_PROCESS_HEADER.PROPERTIES.NONE')
            }),
            new CardViewTextItemModel({
                label: 'ADF_CLOUD_PROCESS_HEADER.PROPERTIES.BUSINESS_KEY',
                value: this.processInstanceDetails.businessKey,
                key: 'businessKey',
                default: this.translationService.instant('ADF_CLOUD_PROCESS_HEADER.PROPERTIES.NONE')
            })
        ];
    }
    isValidSelection(filteredProperties, cardItem) {
        return filteredProperties ? filteredProperties.indexOf(cardItem.key) >= 0 : true;
    }
    ngOnDestroy() {
        this.onDestroy$.next(true);
        this.onDestroy$.complete();
    }
}
ProcessHeaderCloudComponent.decorators = [
    { type: Component, args: [{
                selector: 'adf-cloud-process-header',
                template: "<mat-card *ngIf=\"processInstanceDetails\">\n  <mat-card-content>\n    <adf-card-view [properties]=\"properties\"></adf-card-view>\n  </mat-card-content>\n</mat-card>",
                encapsulation: ViewEncapsulation.None,
                host: { class: 'adf-cloud-process-header' }
            },] }
];
ProcessHeaderCloudComponent.ctorParameters = () => [
    { type: ProcessCloudService },
    { type: TranslationService },
    { type: AppConfigService }
];
ProcessHeaderCloudComponent.propDecorators = {
    appName: [{ type: Input }],
    processInstanceId: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvY2Vzcy1oZWFkZXItY2xvdWQuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Ii9ob21lL3RyYXZpcy9idWlsZC9BbGZyZXNjby9hbGZyZXNjby1uZzItY29tcG9uZW50cy9saWIvcHJvY2Vzcy1zZXJ2aWNlcy1jbG91ZC9zcmMvIiwic291cmNlcyI6WyJsaWIvcHJvY2Vzcy9wcm9jZXNzLWhlYWRlci9jb21wb25lbnRzL3Byb2Nlc3MtaGVhZGVyLWNsb3VkLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7O0dBZUc7QUFFSCxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBZ0MsWUFBWSxFQUFFLGlCQUFpQixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ2hILE9BQU8sRUFBZ0IscUJBQXFCLEVBQUUsa0JBQWtCLEVBQUUsZ0JBQWdCLEVBQUUscUJBQXFCLEVBQXlCLE1BQU0sb0JBQW9CLENBQUM7QUFFN0osT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sc0NBQXNDLENBQUM7QUFDM0UsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzNDLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFRL0IsTUFBTSxPQUFPLDJCQUEyQjtJQW9CcEMsWUFDWSxtQkFBd0MsRUFDeEMsa0JBQXNDLEVBQ3RDLFNBQTJCO1FBRjNCLHdCQUFtQixHQUFuQixtQkFBbUIsQ0FBcUI7UUFDeEMsdUJBQWtCLEdBQWxCLGtCQUFrQixDQUFvQjtRQUN0QyxjQUFTLEdBQVQsU0FBUyxDQUFrQjtRQW5CdkMsWUFBTyxHQUFXLEVBQUUsQ0FBQztRQVlyQixXQUFNLEdBQUcsSUFBSSxZQUFZLEVBQXdCLENBQUM7UUFFMUMsZUFBVSxHQUFHLElBQUksT0FBTyxFQUFXLENBQUM7SUFNNUMsQ0FBQztJQUVELFFBQVE7UUFDSixJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsR0FB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LEVBQUUsQ0FBQztJQUMvQixDQUFDOzs7WUExSUosU0FBUyxTQUFDO2dCQUNQLFFBQVEsRUFBRSwwQkFBMEI7Z0JBQ3BDLGtMQUFvRDtnQkFDcEQsYUFBYSxFQUFFLGlCQUFpQixDQUFDLElBQUk7Z0JBQ3JDLElBQUksRUFBRSxFQUFFLEtBQUssRUFBRSwwQkFBMEIsRUFBRTthQUM5Qzs7O1lBVFEsbUJBQW1CO1lBRmtCLGtCQUFrQjtZQUFFLGdCQUFnQjs7O3NCQWU3RSxLQUFLO2dDQUlMLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBDb21wb25lbnQsIElucHV0LCBPbkNoYW5nZXMsIE9uSW5pdCwgT25EZXN0cm95LCBFdmVudEVtaXR0ZXIsIFZpZXdFbmNhcHN1bGF0aW9uIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDYXJkVmlld0l0ZW0sIENhcmRWaWV3VGV4dEl0ZW1Nb2RlbCwgVHJhbnNsYXRpb25TZXJ2aWNlLCBBcHBDb25maWdTZXJ2aWNlLCBDYXJkVmlld0RhdGVJdGVtTW9kZWwsIENhcmRWaWV3QmFzZUl0ZW1Nb2RlbCB9IGZyb20gJ0BhbGZyZXNjby9hZGYtY29yZSc7XG5pbXBvcnQgeyBQcm9jZXNzSW5zdGFuY2VDbG91ZCB9IGZyb20gJy4uLy4uL3N0YXJ0LXByb2Nlc3MvbW9kZWxzL3Byb2Nlc3MtaW5zdGFuY2UtY2xvdWQubW9kZWwnO1xuaW1wb3J0IHsgUHJvY2Vzc0Nsb3VkU2VydmljZSB9IGZyb20gJy4uLy4uL3NlcnZpY2VzL3Byb2Nlc3MtY2xvdWQuc2VydmljZSc7XG5pbXBvcnQgeyB0YWtlVW50aWwgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAnYWRmLWNsb3VkLXByb2Nlc3MtaGVhZGVyJyxcbiAgICB0ZW1wbGF0ZVVybDogJy4vcHJvY2Vzcy1oZWFkZXItY2xvdWQuY29tcG9uZW50Lmh0bWwnLFxuICAgIGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLk5vbmUsXG4gICAgaG9zdDogeyBjbGFzczogJ2FkZi1jbG91ZC1wcm9jZXNzLWhlYWRlcicgfVxufSlcbmV4cG9ydCBjbGFzcyBQcm9jZXNzSGVhZGVyQ2xvdWRDb21wb25lbnQgaW1wbGVtZW50cyBPbkNoYW5nZXMsIE9uSW5pdCwgT25EZXN0cm95IHtcblxuICAgIC8qKiAoUmVxdWlyZWQpIFRoZSBuYW1lIG9mIHRoZSBhcHBsaWNhdGlvbi4gKi9cbiAgICBASW5wdXQoKVxuICAgIGFwcE5hbWU6IHN0cmluZyA9ICcnO1xuXG4gICAgLyoqIChSZXF1aXJlZCkgVGhlIGlkIG9mIHRoZSBwcm9jZXNzIGluc3RhbmNlLiAqL1xuICAgIEBJbnB1dCgpXG4gICAgcHJvY2Vzc0luc3RhbmNlSWQ6IHN0cmluZztcblxuICAgIHByb2Nlc3NJbnN0YW5jZURldGFpbHM6IFByb2Nlc3NJbnN0YW5jZUNsb3VkO1xuICAgIHByb3BlcnRpZXM6IENhcmRWaWV3SXRlbVtdO1xuICAgIGRhdGVGb3JtYXQ6IHN0cmluZztcbiAgICBkYXRlTG9jYWxlOiBzdHJpbmc7XG5cbiAgICAvKiogR2V0cyBlbWl0dGVkIGVhY2ggdGltZSBhIG5ldyBwcm9jZXNzIGluc3RhbmNlIGRldGFpbHMgYXJlIGxvYWRlZC4gKi9cbiAgICBsb2FkZWQgPSBuZXcgRXZlbnRFbWl0dGVyPFByb2Nlc3NJbnN0YW5jZUNsb3VkPigpO1xuXG4gICAgcHJpdmF0ZSBvbkRlc3Ryb3kkID0gbmV3IFN1YmplY3Q8Ym9vbGVhbj4oKTtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBwcml2YXRlIHByb2Nlc3NDbG91ZFNlcnZpY2U6IFByb2Nlc3NDbG91ZFNlcnZpY2UsXG4gICAgICAgIHByaXZhdGUgdHJhbnNsYXRpb25TZXJ2aWNlOiBUcmFuc2xhdGlvblNlcnZpY2UsXG4gICAgICAgIHByaXZhdGUgYXBwQ29uZmlnOiBBcHBDb25maWdTZXJ2aWNlKSB7XG4gICAgfVxuXG4gICAgbmdPbkluaXQoKSB7XG4gICAgICAgIHRoaXMuZGF0ZUZvcm1hdCA9IHRoaXMuYXBwQ29uZmlnLmdldCgnZGF0ZVZhbHVlcy5kZWZhdWx0RGF0ZUZvcm1hdCcpO1xuICAgICAgICB0aGlzLmRhdGVMb2NhbGUgPSB0aGlzLmFwcENvbmZpZy5nZXQoJ2RhdGVWYWx1ZXMuZGVmYXVsdERhdGVMb2NhbGUnKTtcblxuICAgICAgICB0aGlzLnByb2Nlc3NDbG91ZFNlcnZpY2UuZGF0YUNoYW5nZXNEZXRlY3RlZFxuICAgICAgICAgICAgLnBpcGUodGFrZVVudGlsKHRoaXMub25EZXN0cm95JCkpXG4gICAgICAgICAgICAuc3Vic2NyaWJlKChwcm9jZXNzRGV0YWlscykgPT4gdGhpcy5vbkxvYWRlZChwcm9jZXNzRGV0YWlscykpO1xuICAgIH1cblxuICAgIG5nT25DaGFuZ2VzKCkge1xuICAgICAgICBpZiAoKHRoaXMuYXBwTmFtZSB8fCB0aGlzLmFwcE5hbWUgPT09ICcnKSAmJiB0aGlzLnByb2Nlc3NJbnN0YW5jZUlkKSB7XG4gICAgICAgICAgICB0aGlzLmxvYWRQcm9jZXNzSW5zdGFuY2VEZXRhaWxzKHRoaXMuYXBwTmFtZSwgdGhpcy5wcm9jZXNzSW5zdGFuY2VJZCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGxvYWRQcm9jZXNzSW5zdGFuY2VEZXRhaWxzKGFwcE5hbWU6IHN0cmluZywgcHJvY2Vzc0luc3RhbmNlSWQ6IHN0cmluZykge1xuICAgICAgICB0aGlzLnByb2Nlc3NDbG91ZFNlcnZpY2VcbiAgICAgICAgICAgIC5nZXRQcm9jZXNzSW5zdGFuY2VCeUlkKGFwcE5hbWUsIHByb2Nlc3NJbnN0YW5jZUlkKVxuICAgICAgICAgICAgLnN1YnNjcmliZSgocmVzdWx0KSA9PiB0aGlzLm9uTG9hZGVkKHJlc3VsdCkpO1xuICAgIH1cblxuICAgIHByaXZhdGUgb25Mb2FkZWQocHJvY2Vzc0luc3RhbmNlRGV0YWlsczogUHJvY2Vzc0luc3RhbmNlQ2xvdWQpIHtcbiAgICAgICAgdGhpcy5wcm9jZXNzSW5zdGFuY2VEZXRhaWxzID0gcHJvY2Vzc0luc3RhbmNlRGV0YWlscztcbiAgICAgICAgdGhpcy5yZWZyZXNoRGF0YSgpO1xuXG4gICAgICAgIHRoaXMubG9hZGVkLmVtaXQocHJvY2Vzc0luc3RhbmNlRGV0YWlscyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVmcmVzaCB0aGUgY2FyZCBkYXRhXG4gICAgICovXG4gICAgcmVmcmVzaERhdGEoKSB7XG4gICAgICAgIGlmICh0aGlzLnByb2Nlc3NJbnN0YW5jZURldGFpbHMpIHtcbiAgICAgICAgICAgIGNvbnN0IGRlZmF1bHRQcm9wZXJ0aWVzID0gdGhpcy5pbml0RGVmYXVsdFByb3BlcnRpZXMoKTtcbiAgICAgICAgICAgIGNvbnN0IGZpbHRlcmVkUHJvcGVydGllcyA9IHRoaXMuYXBwQ29uZmlnLmdldDxzdHJpbmdbXT4oJ2FkZi1jbG91ZC1wcm9jZXNzLWhlYWRlci5wcmVzZXRzLnByb3BlcnRpZXMnKTtcbiAgICAgICAgICAgIHRoaXMucHJvcGVydGllcyA9IGRlZmF1bHRQcm9wZXJ0aWVzLmZpbHRlcigoY2FyZEl0ZW0pID0+IHRoaXMuaXNWYWxpZFNlbGVjdGlvbihmaWx0ZXJlZFByb3BlcnRpZXMsIGNhcmRJdGVtKSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGluaXREZWZhdWx0UHJvcGVydGllcygpOiBhbnlbXSB7XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICBuZXcgQ2FyZFZpZXdUZXh0SXRlbU1vZGVsKFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgbGFiZWw6ICdBREZfQ0xPVURfUFJPQ0VTU19IRUFERVIuUFJPUEVSVElFUy5JRCcsXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiB0aGlzLnByb2Nlc3NJbnN0YW5jZURldGFpbHMuaWQsXG4gICAgICAgICAgICAgICAgICAgIGtleTogJ2lkJ1xuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgbmV3IENhcmRWaWV3VGV4dEl0ZW1Nb2RlbChcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGxhYmVsOiAnQURGX0NMT1VEX1BST0NFU1NfSEVBREVSLlBST1BFUlRJRVMuTkFNRScsXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiB0aGlzLnByb2Nlc3NJbnN0YW5jZURldGFpbHMubmFtZSxcbiAgICAgICAgICAgICAgICAgICAga2V5OiAnbmFtZScsXG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6IHRoaXMudHJhbnNsYXRpb25TZXJ2aWNlLmluc3RhbnQoJ0FERl9DTE9VRF9QUk9DRVNTX0hFQURFUi5QUk9QRVJUSUVTLk5BTUVfREVGQVVMVCcpXG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBuZXcgQ2FyZFZpZXdUZXh0SXRlbU1vZGVsKFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgbGFiZWw6ICdBREZfQ0xPVURfUFJPQ0VTU19IRUFERVIuUFJPUEVSVElFUy5TVEFUVVMnLFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogdGhpcy5wcm9jZXNzSW5zdGFuY2VEZXRhaWxzLnN0YXR1cyxcbiAgICAgICAgICAgICAgICAgICAga2V5OiAnc3RhdHVzJ1xuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgbmV3IENhcmRWaWV3VGV4dEl0ZW1Nb2RlbChcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGxhYmVsOiAnQURGX0NMT1VEX1BST0NFU1NfSEVBREVSLlBST1BFUlRJRVMuSU5JVElBVE9SJyxcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHRoaXMucHJvY2Vzc0luc3RhbmNlRGV0YWlscy5pbml0aWF0b3IsXG4gICAgICAgICAgICAgICAgICAgIGtleTogJ2luaXRpYXRvcidcbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIG5ldyBDYXJkVmlld0RhdGVJdGVtTW9kZWwoXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBsYWJlbDogJ0FERl9DTE9VRF9QUk9DRVNTX0hFQURFUi5QUk9QRVJUSUVTLlNUQVJUX0RBVEUnLFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogdGhpcy5wcm9jZXNzSW5zdGFuY2VEZXRhaWxzLnN0YXJ0RGF0ZSxcbiAgICAgICAgICAgICAgICAgICAga2V5OiAnc3RhcnREYXRlJyxcbiAgICAgICAgICAgICAgICAgICAgZm9ybWF0OiB0aGlzLmRhdGVGb3JtYXQsXG4gICAgICAgICAgICAgICAgICAgIGxvY2FsZTogdGhpcy5kYXRlTG9jYWxlXG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBuZXcgQ2FyZFZpZXdEYXRlSXRlbU1vZGVsKFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgbGFiZWw6ICdBREZfQ0xPVURfUFJPQ0VTU19IRUFERVIuUFJPUEVSVElFUy5MQVNUX01PRElGSUVEJyxcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHRoaXMucHJvY2Vzc0luc3RhbmNlRGV0YWlscy5sYXN0TW9kaWZpZWQsXG4gICAgICAgICAgICAgICAgICAgIGtleTogJ2xhc3RNb2RpZmllZCcsXG4gICAgICAgICAgICAgICAgICAgIGZvcm1hdDogdGhpcy5kYXRlRm9ybWF0LFxuICAgICAgICAgICAgICAgICAgICBsb2NhbGU6IHRoaXMuZGF0ZUxvY2FsZVxuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgbmV3IENhcmRWaWV3VGV4dEl0ZW1Nb2RlbChcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGxhYmVsOiAnQURGX0NMT1VEX1BST0NFU1NfSEVBREVSLlBST1BFUlRJRVMuUEFSRU5UX0lEJyxcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHRoaXMucHJvY2Vzc0luc3RhbmNlRGV0YWlscy5wYXJlbnRJZCxcbiAgICAgICAgICAgICAgICAgICAga2V5OiAncGFyZW50SWQnLFxuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OiB0aGlzLnRyYW5zbGF0aW9uU2VydmljZS5pbnN0YW50KCdBREZfQ0xPVURfUFJPQ0VTU19IRUFERVIuUFJPUEVSVElFUy5OT05FJylcbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIG5ldyBDYXJkVmlld1RleHRJdGVtTW9kZWwoXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBsYWJlbDogJ0FERl9DTE9VRF9QUk9DRVNTX0hFQURFUi5QUk9QRVJUSUVTLkJVU0lORVNTX0tFWScsXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiB0aGlzLnByb2Nlc3NJbnN0YW5jZURldGFpbHMuYnVzaW5lc3NLZXksXG4gICAgICAgICAgICAgICAgICAgIGtleTogJ2J1c2luZXNzS2V5JyxcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDogdGhpcy50cmFuc2xhdGlvblNlcnZpY2UuaW5zdGFudCgnQURGX0NMT1VEX1BST0NFU1NfSEVBREVSLlBST1BFUlRJRVMuTk9ORScpXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgXTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGlzVmFsaWRTZWxlY3Rpb24oZmlsdGVyZWRQcm9wZXJ0aWVzOiBzdHJpbmdbXSwgY2FyZEl0ZW06IENhcmRWaWV3QmFzZUl0ZW1Nb2RlbCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gZmlsdGVyZWRQcm9wZXJ0aWVzID8gZmlsdGVyZWRQcm9wZXJ0aWVzLmluZGV4T2YoY2FyZEl0ZW0ua2V5KSA+PSAwIDogdHJ1ZTtcbiAgICB9XG5cbiAgICBuZ09uRGVzdHJveSgpIHtcbiAgICAgICAgdGhpcy5vbkRlc3Ryb3kkLm5leHQodHJ1ZSk7XG4gICAgICAgIHRoaXMub25EZXN0cm95JC5jb21wbGV0ZSgpO1xuICAgIH1cbn1cbiJdfQ==