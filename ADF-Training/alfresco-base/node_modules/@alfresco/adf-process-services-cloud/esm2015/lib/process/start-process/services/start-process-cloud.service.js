import { AlfrescoApiService, AppConfigService, LogService } from '@alfresco/adf-core';
import { Injectable } from '@angular/core';
import { throwError } from 'rxjs';
import { map } from 'rxjs/operators';
import { ProcessDefinitionCloud } from '../../../models/process-definition-cloud.model';
import { BaseCloudService } from '../../../services/base-cloud.service';
import * as i0 from "@angular/core";
import * as i1 from "@alfresco/adf-core";
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@alfresco/adf-core';
export class StartProcessCloudService extends BaseCloudService {
    constructor(apiService, logService, appConfigService) {
        super(apiService, appConfigService);
        this.logService = logService;
    }
    getProcessDefinitions(appName) {
        if (appName || appName === '') {
            const url = `${this.getBasePath(appName)}/rb/v1/process-definitions`;
            return this.get(url).pipe(map((res) => {
                return res.list.entries.map((processDefs) => new ProcessDefinitionCloud(processDefs.entry));
            }));
        }
        else {
            this.logService.error('AppName is mandatory for querying task');
            return throwError('AppName not configured');
        }
    }
    createProcess(appName, payload) {
        const url = `${this.getBasePath(appName)}/rb/v1/process-instances/create`;
        payload.payloadType = 'CreateProcessInstancePayload';
        return this.post(url, payload).pipe(map((result) => result.entry));
    }
    startCreatedProcess(appName, createdProcessInstanceId, payload) {
        const url = `${this.getBasePath(appName)}/rb/v1/process-instances/${createdProcessInstanceId}/start`;
        return this.post(url, payload).pipe(map((result) => result.entry));
    }
    startProcess(appName, payload) {
        const url = `${this.getBasePath(appName)}/rb/v1/process-instances`;
        payload.payloadType = 'StartProcessPayload';
        return this.post(url, payload);
    }
    updateProcess(appName, processInstanceId, payload) {
        const url = `${this.getBasePath(appName)}/rb/v1/process-instances/${processInstanceId}`;
        payload.payloadType = 'UpdateProcessPayload';
        return this.put(url, payload).pipe(map((processInstance) => processInstance.entry));
    }
    deleteProcess(appName, processInstanceId) {
        const url = `${this.getBasePath(appName)}/rb/v1/process-instances/${processInstanceId}`;
        return this.delete(url);
    }
}
StartProcessCloudService.ɵfac = function StartProcessCloudService_Factory(t) { return new (t || StartProcessCloudService)(ɵngcc0.ɵɵinject(ɵngcc1.AlfrescoApiService), ɵngcc0.ɵɵinject(ɵngcc1.LogService), ɵngcc0.ɵɵinject(ɵngcc1.AppConfigService)); };
StartProcessCloudService.ɵprov = i0.ɵɵdefineInjectable({ factory: function StartProcessCloudService_Factory() { return new StartProcessCloudService(i0.ɵɵinject(i1.AlfrescoApiService), i0.ɵɵinject(i1.LogService), i0.ɵɵinject(i1.AppConfigService)); }, token: StartProcessCloudService, providedIn: "root" });
StartProcessCloudService.ctorParameters = () => [
    { type: AlfrescoApiService },
    { type: LogService },
    { type: AppConfigService }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(StartProcessCloudService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc1.AlfrescoApiService }, { type: ɵngcc1.LogService }, { type: ɵngcc1.AppConfigService }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,