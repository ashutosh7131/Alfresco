import { DateRangeFilterService } from '../../../common/date-range-filter/date-range-filter.service';
export class ProcessFilterCloudModel {
    constructor(obj) {
        this.dateRangeFilterService = new DateRangeFilterService();
        if (obj) {
            this.id = obj.id || Math.random().toString(36).substring(2, 9);
            this.name = obj.name || null;
            this.key = obj.key || null;
            this.icon = obj.icon || null;
            this.index = obj.index || null;
            this.appName = obj.appName || obj.appName === '' ? obj.appName : null;
            this.appVersion = obj.appVersion || null;
            if (obj.appVersionMultiple && Array.isArray(obj.appVersionMultiple)) {
                this.appVersion = obj.appVersionMultiple;
            }
            this.processInstanceId = obj.processInstanceId || null;
            this.processName = obj.processName || null;
            this.initiator = obj.initiator || null;
            this.status = obj.status || null;
            this.sort = obj.sort || null;
            this.order = obj.order || null;
            this.processDefinitionId = obj.processDefinitionId || null;
            this.processDefinitionName = obj.processDefinitionName || null;
            this.processDefinitionKey = obj.processDefinitionKey || null;
            this.lastModified = obj.lastModified || null;
            this.lastModifiedTo = obj.lastModifiedTo || null;
            this.lastModifiedFrom = obj.lastModifiedFrom || null;
            this.startedDate = obj.startedDate || null;
            this.startFrom = obj._startFrom || null;
            this.startTo = obj._startTo || null;
            this.completedDateType = obj.completedDateType || null;
            this.startedDateType = obj.startedDateType || null;
            this.suspendedDateType = obj.suspendedDateType || null;
            this.completedFrom = obj._completedFrom || null;
            this.completedTo = obj._completedTo || null;
            this.completedDate = obj.completedDate || null;
            this._suspendedFrom = obj._suspendedFrom || null;
            this._suspendedTo = obj._suspendedTo || null;
        }
    }
    set completedFrom(completedFrom) {
        this._completedFrom = completedFrom;
    }
    set completedTo(completedTo) {
        this._completedTo = completedTo;
    }
    get completedFrom() {
        if (this.isDateRangeType(this.completedDateType)) {
            return this._completedFrom;
        }
        return this.getStartDate(this.completedDateType);
    }
    get completedTo() {
        if (this.isDateRangeType(this.completedDateType)) {
            return this._completedTo;
        }
        return this.getEndDate(this.completedDateType);
    }
    set startFrom(startFrom) {
        this._startFrom = startFrom;
    }
    set startTo(startTo) {
        this._startTo = startTo;
    }
    get startFrom() {
        if (this.isDateRangeType(this.startedDateType)) {
            return this._startFrom;
        }
        return this.getStartDate(this.startedDateType);
    }
    get startTo() {
        if (this.isDateRangeType(this.startedDateType)) {
            return this._startTo;
        }
        return this.getEndDate(this.startedDateType);
    }
    set suspendedFrom(suspendedFrom) {
        this._suspendedFrom = suspendedFrom;
    }
    set suspendedTo(suspendedTo) {
        this._suspendedTo = suspendedTo;
    }
    get suspendedFrom() {
        if (this.isDateRangeType(this.suspendedDateType)) {
            return this._suspendedFrom;
        }
        return this.getStartDate(this.suspendedDateType);
    }
    get suspendedTo() {
        if (this.isDateRangeType(this.suspendedDateType)) {
            return this._suspendedTo;
        }
        return this.getEndDate(this.suspendedDateType);
    }
    getStartDate(key) {
        return this.dateRangeFilterService.getDateRange(key).startDate;
    }
    getEndDate(key) {
        return this.dateRangeFilterService.getDateRange(key).endDate;
    }
    isDateRangeType(type) {
        return !!this.dateRangeFilterService.isDateRangeType(type);
    }
}
//# sourceMappingURL=data:application/json;base64,