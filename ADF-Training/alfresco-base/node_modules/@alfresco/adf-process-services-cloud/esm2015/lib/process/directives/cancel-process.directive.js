import { Directive, HostListener, Output, EventEmitter, ElementRef } from '@angular/core';
import { IdentityUserService } from '@alfresco/adf-core';
import { ProcessCloudService } from '../services/process-cloud.service';
import { takeUntil } from 'rxjs/operators';
import { Subject } from 'rxjs';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../services/process-cloud.service';
import * as ɵngcc2 from '@alfresco/adf-core';
export class CancelProcessDirective {
    constructor(elementRef, processCloudService, identityUserService) {
        this.elementRef = elementRef;
        this.processCloudService = processCloudService;
        this.identityUserService = identityUserService;
        this.success = new EventEmitter();
        this.error = new EventEmitter();
        this.canCancelProcess = false;
        this.onDestroy$ = new Subject();
    }
    ngOnInit() {
        this.processCloudService.dataChangesDetected
            .pipe(takeUntil(this.onDestroy$))
            .subscribe((processDetails) => {
            this.processInstanceDetails = processDetails;
            this.canCancelProcess = this.checkCanCancelProcess();
            this.setElementVisibility();
        });
    }
    onClick() {
        this.cancelProcess();
    }
    setElementVisibility() {
        this.elementRef.nativeElement.disabled = !this.canCancelProcess;
    }
    checkCanCancelProcess() {
        const currentUser = this.identityUserService.getCurrentUserInfo().username;
        return this.processInstanceDetails.initiator === currentUser && this.processInstanceDetails.status === 'RUNNING';
    }
    cancelProcess() {
        if (this.canCancelProcess) {
            this.processCloudService.cancelProcess(this.processInstanceDetails.appName, this.processInstanceDetails.id)
                .subscribe((response) => this.success.emit(response), (error) => this.error.emit(error));
        }
        else {
            this.error.emit('Permission denied, only process initiator can cancel the process');
        }
    }
    ngOnDestroy() {
        this.onDestroy$.next(true);
        this.onDestroy$.complete();
    }
}
CancelProcessDirective.ɵfac = function CancelProcessDirective_Factory(t) { return new (t || CancelProcessDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ProcessCloudService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.IdentityUserService)); };
CancelProcessDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CancelProcessDirective, selectors: [["", "adf-cloud-cancel-process", ""]], hostBindings: function CancelProcessDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function CancelProcessDirective_click_HostBindingHandler() { return ctx.onClick(); });
    } }, outputs: { success: "success", error: "error" } });
CancelProcessDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: ProcessCloudService },
    { type: IdentityUserService }
];
CancelProcessDirective.propDecorators = {
    success: [{ type: Output }],
    error: [{ type: Output }],
    onClick: [{ type: HostListener, args: ['click',] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CancelProcessDirective, [{
        type: Directive,
        args: [{
                selector: '[adf-cloud-cancel-process]'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.ProcessCloudService }, { type: ɵngcc2.IdentityUserService }]; }, { success: [{
            type: Output
        }], error: [{
            type: Output
        }], onClick: [{
            type: HostListener,
            args: ['click']
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FuY2VsLXByb2Nlc3MuZGlyZWN0aXZlLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9ob21lL3RyYXZpcy9idWlsZC9BbGZyZXNjby9hbGZyZXNjby1uZzItY29tcG9uZW50cy9saWIvcHJvY2Vzcy1zZXJ2aWNlcy1jbG91ZC9zcmMvbGliL3Byb2Nlc3MvZGlyZWN0aXZlcy9jYW5jZWwtcHJvY2Vzcy5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBZ0JBLE9BQU8sRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLE1BQU0sRUFBRSxZQUFZLEVBQXFCLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM3RyxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUN6RCxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxtQ0FBbUMsQ0FBQztBQUN4RSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDM0MsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLE1BQU0sQ0FBQzs7OztBQU8vQixNQUFNLE9BQU8sc0JBQXNCO0FBQUcsSUFnQmxDLFlBQ1ksVUFBc0IsRUFDdEIsbUJBQXdDLEVBQ3hDLG1CQUF3QztBQUFJLFFBRjVDLGVBQVUsR0FBVixVQUFVLENBQVk7QUFBQyxRQUN2Qix3QkFBbUIsR0FBbkIsbUJBQW1CLENBQXFCO0FBQUMsUUFDekMsd0JBQW1CLEdBQW5CLG1CQUFtQixDQUFxQjtBQUFDLFFBZnJELFlBQU8sR0FBRyxJQUFJLFlBQVksRUFBTyxDQUFDO0FBQ3RDLFFBR0ksVUFBSyxHQUFHLElBQUksWUFBWSxFQUFPLENBQUM7QUFDcEMsUUFHSSxxQkFBZ0IsR0FBRyxLQUFLLENBQUM7QUFDN0IsUUFDWSxlQUFVLEdBQUcsSUFBSSxPQUFPLEVBQVcsQ0FBQztBQUNoRCxJQUkyRCxDQUFDO0FBQzVELElBQ0ksUUFBUTtBQUNaLFFBQVEsSUFBSSxDQUFDLG1CQUFtQixDQUFDLG1CQUFtQjtBQUNwRCxhQUFhLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0FBQzdDLGFBQWEsU0FBUyxDQUFDLENBQUMsY0FBYyxFQUFFLEVBQUU7QUFDMUMsWUFBZ0IsSUFBSSxDQUFDLHNCQUFzQixHQUFHLGNBQWMsQ0FBQztBQUM3RCxZQUFnQixJQUFJLENBQUMsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLHFCQUFxQixFQUFFLENBQUM7QUFDckUsWUFBZ0IsSUFBSSxDQUFDLG9CQUFvQixFQUFFLENBQUM7QUFDNUMsUUFBWSxDQUFDLENBQUMsQ0FBQztBQUNmLElBQUksQ0FBQztBQUNMLElBRUksT0FBTztBQUNYLFFBQVEsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO0FBQzdCLElBQUksQ0FBQztBQUNMLElBQ1ksb0JBQW9CO0FBQ2hDLFFBQVEsSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUMsUUFBUSxHQUFHLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDO0FBQ3hFLElBQUksQ0FBQztBQUNMLElBQ0kscUJBQXFCO0FBQUssUUFDdEIsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLG1CQUFtQixDQUFDLGtCQUFrQixFQUFFLENBQUMsUUFBUSxDQUFDO0FBQ25GLFFBQVEsT0FBTyxJQUFJLENBQUMsc0JBQXNCLENBQUMsU0FBUyxLQUFLLFdBQVcsSUFBSSxJQUFJLENBQUMsc0JBQXNCLENBQUMsTUFBTSxLQUFLLFNBQVMsQ0FBQztBQUN6SCxJQUFJLENBQUM7QUFDTCxJQUNJLGFBQWE7QUFDakIsUUFBUSxJQUFJLElBQUksQ0FBQyxnQkFBZ0IsRUFBRTtBQUNuQyxZQUFZLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLHNCQUFzQixDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsc0JBQXNCLENBQUMsRUFBRSxDQUFDO0FBQ3ZILGlCQUFpQixTQUFTLENBQ04sQ0FBQyxRQUFRLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUN6QyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQ3BDLENBQUM7QUFDbEIsU0FBUztBQUFDLGFBQUs7QUFDZixZQUFZLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLGtFQUFrRSxDQUFDLENBQUM7QUFDaEcsU0FBUztBQUNULElBQUksQ0FBQztBQUNMLElBQ0ksV0FBVztBQUNmLFFBQVEsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDbkMsUUFBUSxJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsRUFBRSxDQUFDO0FBQ25DLElBQUksQ0FBQztBQUNMO2tEQWpFQyxTQUFTLFNBQUMsa0JBRVAsUUFBUSxFQUFFLDRCQUE0QixjQUN6Qzs7OzREQUNJO0FBQUM7QUFBZ0QsWUFYcUIsVUFBVTtBQUFJLFlBRWhGLG1CQUFtQjtBQUFJLFlBRHZCLG1CQUFtQjtBQUFHO0FBQUc7QUFDaEIsc0JBWWIsTUFBTTtBQUNULG9CQUdHLE1BQU07QUFDVCxzQkF1QkcsWUFBWSxTQUFDLE9BQU87QUFDckI7Ozs7Ozs7Ozs7Ozs7b0JBQUU7QUFBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5pbXBvcnQgeyBEaXJlY3RpdmUsIEhvc3RMaXN0ZW5lciwgT3V0cHV0LCBFdmVudEVtaXR0ZXIsIE9uSW5pdCwgT25EZXN0cm95LCBFbGVtZW50UmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBJZGVudGl0eVVzZXJTZXJ2aWNlIH0gZnJvbSAnQGFsZnJlc2NvL2FkZi1jb3JlJztcbmltcG9ydCB7IFByb2Nlc3NDbG91ZFNlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlcy9wcm9jZXNzLWNsb3VkLnNlcnZpY2UnO1xuaW1wb3J0IHsgdGFrZVVudGlsIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgUHJvY2Vzc0luc3RhbmNlQ2xvdWQgfSBmcm9tICcuLi9zdGFydC1wcm9jZXNzL21vZGVscy9wcm9jZXNzLWluc3RhbmNlLWNsb3VkLm1vZGVsJztcblxuQERpcmVjdGl2ZSh7XG4gICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOiBkaXJlY3RpdmUtc2VsZWN0b3JcbiAgICBzZWxlY3RvcjogJ1thZGYtY2xvdWQtY2FuY2VsLXByb2Nlc3NdJ1xufSlcbmV4cG9ydCBjbGFzcyBDYW5jZWxQcm9jZXNzRGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3kge1xuXG4gICAgLyoqIEVtaXR0ZWQgd2hlbiB0aGUgcHJvY2VzcyBpcyBjYW5jZWxsZWQuICovXG4gICAgQE91dHB1dCgpXG4gICAgc3VjY2VzcyA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xuXG4gICAgLyoqIEVtaXR0ZWQgd2hlbiB0aGUgcHJvY2VzcyBjYW5ub3QgYmUgY2FuY2VsbGVkLiAqL1xuICAgIEBPdXRwdXQoKVxuICAgIGVycm9yID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XG5cbiAgICBwcm9jZXNzSW5zdGFuY2VEZXRhaWxzOiBQcm9jZXNzSW5zdGFuY2VDbG91ZDtcblxuICAgIGNhbkNhbmNlbFByb2Nlc3MgPSBmYWxzZTtcblxuICAgIHByaXZhdGUgb25EZXN0cm95JCA9IG5ldyBTdWJqZWN0PGJvb2xlYW4+KCk7XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHJpdmF0ZSBlbGVtZW50UmVmOiBFbGVtZW50UmVmLFxuICAgICAgICBwcml2YXRlIHByb2Nlc3NDbG91ZFNlcnZpY2U6IFByb2Nlc3NDbG91ZFNlcnZpY2UsXG4gICAgICAgIHByaXZhdGUgaWRlbnRpdHlVc2VyU2VydmljZTogSWRlbnRpdHlVc2VyU2VydmljZSkge31cblxuICAgIG5nT25Jbml0KCkge1xuICAgICAgICB0aGlzLnByb2Nlc3NDbG91ZFNlcnZpY2UuZGF0YUNoYW5nZXNEZXRlY3RlZFxuICAgICAgICAgICAgLnBpcGUodGFrZVVudGlsKHRoaXMub25EZXN0cm95JCkpXG4gICAgICAgICAgICAuc3Vic2NyaWJlKChwcm9jZXNzRGV0YWlscykgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMucHJvY2Vzc0luc3RhbmNlRGV0YWlscyA9IHByb2Nlc3NEZXRhaWxzO1xuICAgICAgICAgICAgICAgIHRoaXMuY2FuQ2FuY2VsUHJvY2VzcyA9IHRoaXMuY2hlY2tDYW5DYW5jZWxQcm9jZXNzKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRFbGVtZW50VmlzaWJpbGl0eSgpO1xuICAgICAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgQEhvc3RMaXN0ZW5lcignY2xpY2snKVxuICAgIG9uQ2xpY2soKSB7XG4gICAgICAgIHRoaXMuY2FuY2VsUHJvY2VzcygpO1xuICAgIH1cblxuICAgIHByaXZhdGUgc2V0RWxlbWVudFZpc2liaWxpdHkoKSB7XG4gICAgICAgIHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LmRpc2FibGVkID0gIXRoaXMuY2FuQ2FuY2VsUHJvY2VzcztcbiAgICB9XG5cbiAgICBjaGVja0NhbkNhbmNlbFByb2Nlc3MoKTogYm9vbGVhbiB7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRVc2VyID0gdGhpcy5pZGVudGl0eVVzZXJTZXJ2aWNlLmdldEN1cnJlbnRVc2VySW5mbygpLnVzZXJuYW1lO1xuICAgICAgICByZXR1cm4gdGhpcy5wcm9jZXNzSW5zdGFuY2VEZXRhaWxzLmluaXRpYXRvciA9PT0gY3VycmVudFVzZXIgJiYgdGhpcy5wcm9jZXNzSW5zdGFuY2VEZXRhaWxzLnN0YXR1cyA9PT0gJ1JVTk5JTkcnO1xuICAgIH1cblxuICAgIGNhbmNlbFByb2Nlc3MoKSB7XG4gICAgICAgIGlmICh0aGlzLmNhbkNhbmNlbFByb2Nlc3MpIHtcbiAgICAgICAgICAgIHRoaXMucHJvY2Vzc0Nsb3VkU2VydmljZS5jYW5jZWxQcm9jZXNzKHRoaXMucHJvY2Vzc0luc3RhbmNlRGV0YWlscy5hcHBOYW1lLCB0aGlzLnByb2Nlc3NJbnN0YW5jZURldGFpbHMuaWQpXG4gICAgICAgICAgICAgICAgLnN1YnNjcmliZShcbiAgICAgICAgICAgICAgICAgICAgKHJlc3BvbnNlKSA9PiB0aGlzLnN1Y2Nlc3MuZW1pdChyZXNwb25zZSksXG4gICAgICAgICAgICAgICAgICAgIChlcnJvcikgPT4gdGhpcy5lcnJvci5lbWl0KGVycm9yKVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmVycm9yLmVtaXQoJ1Blcm1pc3Npb24gZGVuaWVkLCBvbmx5IHByb2Nlc3MgaW5pdGlhdG9yIGNhbiBjYW5jZWwgdGhlIHByb2Nlc3MnKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIG5nT25EZXN0cm95KCkge1xuICAgICAgICB0aGlzLm9uRGVzdHJveSQubmV4dCh0cnVlKTtcbiAgICAgICAgdGhpcy5vbkRlc3Ryb3kkLmNvbXBsZXRlKCk7XG4gICAgfVxufVxuIl19