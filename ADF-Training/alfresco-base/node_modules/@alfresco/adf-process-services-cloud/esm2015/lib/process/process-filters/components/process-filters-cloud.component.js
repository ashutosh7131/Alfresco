/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, EventEmitter, Input, Output, ViewEncapsulation } from '@angular/core';
import { Subject } from 'rxjs';
import { ProcessFilterCloudService } from '../services/process-filter-cloud.service';
import { TranslationService } from '@alfresco/adf-core';
import { takeUntil } from 'rxjs/operators';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../services/process-filter-cloud.service';
import * as ɵngcc2 from '@alfresco/adf-core';
import * as ɵngcc3 from '@angular/common';
import * as ɵngcc4 from '@angular/material/button';
import * as ɵngcc5 from '@angular/flex-layout/flex';
import * as ɵngcc6 from '@angular/material/progress-spinner';
import * as ɵngcc7 from '@ngx-translate/core';

function ProcessFiltersCloudComponent_ng_container_0_div_1_adf_icon_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "adf-icon", 7);
} if (rf & 2) {
    const filter_r5 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵproperty("value", filter_r5.icon);
} }
function ProcessFiltersCloudComponent_ng_container_0_div_1_Template(rf, ctx) { if (rf & 1) {
    const _r9 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 3);
    ɵngcc0.ɵɵelementStart(1, "button", 4);
    ɵngcc0.ɵɵlistener("click", function ProcessFiltersCloudComponent_ng_container_0_div_1_Template_button_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r9); const filter_r5 = ctx.$implicit; const ctx_r8 = ɵngcc0.ɵɵnextContext(2); return ctx_r8.onFilterClick(filter_r5); });
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵtemplate(3, ProcessFiltersCloudComponent_ng_container_0_div_1_adf_icon_3_Template, 1, 1, "adf-icon", 5);
    ɵngcc0.ɵɵelementStart(4, "span", 6);
    ɵngcc0.ɵɵtext(5);
    ɵngcc0.ɵɵpipe(6, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const filter_r5 = ctx.$implicit;
    const ctx_r4 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵclassProp("adf-active", ctx_r4.currentFilter === filter_r5);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("id", filter_r5.id);
    ɵngcc0.ɵɵattribute("aria-label", ɵngcc0.ɵɵpipeBind1(2, 7, filter_r5.name))("data-automation-id", filter_r5.key + "_filter");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r4.showIcons);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(6, 9, filter_r5.name));
} }
function ProcessFiltersCloudComponent_ng_container_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, ProcessFiltersCloudComponent_ng_container_0_div_1_Template, 7, 11, "div", 2);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const filterList_r3 = ctx.ngIf;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", filterList_r3);
} }
function ProcessFiltersCloudComponent_ng_template_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "div", 8);
    ɵngcc0.ɵɵelement(2, "mat-spinner");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} }
export class ProcessFiltersCloudComponent {
    constructor(processFilterCloudService, translationService) {
        this.processFilterCloudService = processFilterCloudService;
        this.translationService = translationService;
        this.appName = '';
        this.showIcons = false;
        this.filterSelected = new EventEmitter();
        this.filterClicked = new EventEmitter();
        this.success = new EventEmitter();
        this.error = new EventEmitter();
        this.filters = [];
        this.onDestroy$ = new Subject();
    }
    ngOnInit() {
        if (this.appName === '') {
            this.getFilters(this.appName);
        }
    }
    ngOnChanges(changes) {
        const appName = changes['appName'];
        const filter = changes['filterParam'];
        if (appName && appName.currentValue) {
            this.getFilters(appName.currentValue);
        }
        else if (filter && filter.currentValue !== filter.previousValue) {
            this.selectFilterAndEmit(filter.currentValue);
        }
    }
    getFilters(appName) {
        this.filters$ = this.processFilterCloudService.getProcessFilters(appName);
        this.filters$.pipe(takeUntil(this.onDestroy$)).subscribe((res) => {
            this.resetFilter();
            this.filters = res || [];
            this.selectFilterAndEmit(this.filterParam);
            this.success.emit(res);
        }, (err) => {
            this.error.emit(err);
        });
    }
    selectFilter(paramFilter) {
        if (paramFilter) {
            this.currentFilter = this.filters.find((filter, index) => {
                return paramFilter.id === filter.id ||
                    (paramFilter.name && this.checkFilterNamesEquality(paramFilter.name, filter.name)) ||
                    (paramFilter.key && (paramFilter.key === filter.key)) ||
                    paramFilter.index === index;
            });
        }
    }
    checkFilterNamesEquality(name1, name2) {
        const translatedName1 = this.translationService.instant(name1);
        const translatedName2 = this.translationService.instant(name2);
        return translatedName1.toLocaleLowerCase() === translatedName2.toLocaleLowerCase();
    }
    selectFilterAndEmit(newParamFilter) {
        if (newParamFilter) {
            this.selectFilter(newParamFilter);
            this.filterSelected.emit(this.currentFilter);
        }
        else {
            this.currentFilter = undefined;
        }
    }
    selectFilterById(id) {
        this.selectFilterAndEmit({ id: id });
    }
    onFilterClick(filter) {
        if (filter) {
            this.selectFilter(filter);
            this.filterClicked.emit(this.currentFilter);
        }
        else {
            this.currentFilter = undefined;
        }
    }
    selectDefaultProcessFilter() {
        if (!this.isFilterListEmpty()) {
            this.currentFilter = this.filters[0];
        }
    }
    getCurrentFilter() {
        return this.currentFilter;
    }
    isFilterListEmpty() {
        return this.filters === undefined || (this.filters && this.filters.length === 0);
    }
    resetFilter() {
        this.filters = [];
        this.currentFilter = undefined;
    }
    ngOnDestroy() {
        this.onDestroy$.next(true);
        this.onDestroy$.complete();
    }
    isActiveFilter(filter) {
        return this.currentFilter.name === filter.name;
    }
}
ProcessFiltersCloudComponent.ɵfac = function ProcessFiltersCloudComponent_Factory(t) { return new (t || ProcessFiltersCloudComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ProcessFilterCloudService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.TranslationService)); };
ProcessFiltersCloudComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ProcessFiltersCloudComponent, selectors: [["adf-cloud-process-filters"]], inputs: { appName: "appName", showIcons: "showIcons", filterParam: "filterParam" }, outputs: { filterSelected: "filterSelected", filterClicked: "filterClicked", success: "success", error: "error" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 4, vars: 4, consts: [[4, "ngIf", "ngIfElse"], ["loading", ""], ["class", "adf-filters__entry", 3, "adf-active", 4, "ngFor", "ngForOf"], [1, "adf-filters__entry"], ["mat-button", "", "fxLayout", "row", "fxLayoutAlign", "space-between center", 1, "adf-filter-action-button", "adf-full-width", 3, "id", "click"], ["data-automation-id", "adf-filter-icon", 3, "value", 4, "ngIf"], ["data-automation-id", "adf-filter-label", 1, "adf-filter-action-button__label"], ["data-automation-id", "adf-filter-icon", 3, "value"], [1, "adf-app-list-spinner"]], template: function ProcessFiltersCloudComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, ProcessFiltersCloudComponent_ng_container_0_Template, 2, 1, "ng-container", 0);
        ɵngcc0.ɵɵpipe(1, "async");
        ɵngcc0.ɵɵtemplate(2, ProcessFiltersCloudComponent_ng_template_2_Template, 3, 0, "ng-template", null, 1, ɵngcc0.ɵɵtemplateRefExtractor);
    } if (rf & 2) {
        const _r1 = ɵngcc0.ɵɵreference(3);
        ɵngcc0.ɵɵproperty("ngIf", ɵngcc0.ɵɵpipeBind1(1, 2, ctx.filters$))("ngIfElse", _r1);
    } }, directives: [ɵngcc3.NgIf, ɵngcc3.NgForOf, ɵngcc4.MatButton, ɵngcc5.DefaultLayoutDirective, ɵngcc5.DefaultLayoutAlignDirective, ɵngcc2.IconComponent, ɵngcc6.MatSpinner], pipes: [ɵngcc3.AsyncPipe, ɵngcc7.TranslatePipe], styles: [".adf-filters__entry{cursor:pointer;font-size:14px!important;font-weight:700;height:24px;opacity:1;padding:12px 0!important;width:100%}.adf-filters__entry .adf-full-width{display:flex;width:100%}.adf-filters__entry .adf-filter-action-button .adf-filter-action-button__label{margin:0 8px!important;padding-left:20px}.adf-filters__entry.adf-active,.adf-filters__entry:hover{color:var(--theme-primary-color);opacity:1}"], encapsulation: 2 });
ProcessFiltersCloudComponent.ctorParameters = () => [
    { type: ProcessFilterCloudService },
    { type: TranslationService }
];
ProcessFiltersCloudComponent.propDecorators = {
    appName: [{ type: Input }],
    filterParam: [{ type: Input }],
    showIcons: [{ type: Input }],
    filterSelected: [{ type: Output }],
    filterClicked: [{ type: Output }],
    success: [{ type: Output }],
    error: [{ type: Output }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ProcessFiltersCloudComponent, [{
        type: Component,
        args: [{
                selector: 'adf-cloud-process-filters',
                template: "\n<ng-container *ngIf=\"filters$ | async as filterList; else loading\">\n    <div *ngFor=\"let filter of filterList\" class=\"adf-filters__entry\" [class.adf-active]=\"currentFilter === filter\">\n        <button (click)=\"onFilterClick(filter)\"\n          [attr.aria-label]=\"filter.name | translate\"\n          [id]=\"filter.id\"\n          [attr.data-automation-id]=\"filter.key + '_filter'\"\n          mat-button\n          class=\"adf-filter-action-button adf-full-width\" fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\n          <adf-icon data-automation-id=\"adf-filter-icon\" *ngIf=\"showIcons\" [value]=\"filter.icon\"></adf-icon>\n          <span data-automation-id=\"adf-filter-label\" class=\"adf-filter-action-button__label\">{{ filter.name | translate }}</span>\n        </button>\n    </div>\n</ng-container>\n<ng-template #loading>\n    <ng-container>\n        <div class=\"adf-app-list-spinner\">\n            <mat-spinner></mat-spinner>\n        </div>\n    </ng-container>\n</ng-template>\n",
                encapsulation: ViewEncapsulation.None,
                styles: [".adf-filters__entry{cursor:pointer;font-size:14px!important;font-weight:700;height:24px;opacity:1;padding:12px 0!important;width:100%}.adf-filters__entry .adf-full-width{display:flex;width:100%}.adf-filters__entry .adf-filter-action-button .adf-filter-action-button__label{margin:0 8px!important;padding-left:20px}.adf-filters__entry.adf-active,.adf-filters__entry:hover{color:var(--theme-primary-color);opacity:1}"]
            }]
    }], function () { return [{ type: ɵngcc1.ProcessFilterCloudService }, { type: ɵngcc2.TranslationService }]; }, { appName: [{
            type: Input
        }], showIcons: [{
            type: Input
        }], filterSelected: [{
            type: Output
        }], filterClicked: [{
            type: Output
        }], success: [{
            type: Output
        }], error: [{
            type: Output
        }], filterParam: [{
            type: Input
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,