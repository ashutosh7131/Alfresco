/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
export class ProcessQueryCloudRequestModel {
    constructor(obj) {
        if (obj) {
            this.appName = obj.appName;
            this.appVersion = obj.appVersion;
            this.initiator = obj.initiator;
            this.id = obj.id;
            this.name = obj.name;
            this.processDefinitionId = obj.processDefinitionId;
            this.processDefinitionName = obj.processDefinitionName;
            this.processDefinitionKey = obj.processDefinitionKey;
            this.status = obj.status;
            this.startDate = obj.startDate;
            this.businessKey = obj.businessKey;
            this.lastModified = obj.lastModified;
            this.lastModifiedTo = obj.lastModifiedTo;
            this.lastModifiedFrom = obj.lastModifiedFrom;
            this.startFrom = obj.startFrom;
            this.startTo = obj.startTo;
            this.completedFrom = obj.completedFrom;
            this.completedTo = obj.completedTo;
            this.suspendedFrom = obj.suspendedFrom;
            this.suspendedTo = obj.suspendedTo;
            this.completedDate = obj.completedDate;
            this.maxItems = obj.maxItems;
            this.skipCount = obj.skipCount;
            this.sorting = obj.sorting;
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvY2Vzcy1jbG91ZC1xdWVyeS1yZXF1ZXN0Lm1vZGVsLmpzIiwic291cmNlUm9vdCI6Ii9ob21lL3RyYXZpcy9idWlsZC9BbGZyZXNjby9hbGZyZXNjby1uZzItY29tcG9uZW50cy9saWIvcHJvY2Vzcy1zZXJ2aWNlcy1jbG91ZC9zcmMvIiwic291cmNlcyI6WyJsaWIvcHJvY2Vzcy9wcm9jZXNzLWxpc3QvbW9kZWxzL3Byb2Nlc3MtY2xvdWQtcXVlcnktcmVxdWVzdC5tb2RlbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7O0dBZUc7QUFJSCxNQUFNLE9BQU8sNkJBQTZCO0lBeUJ0QyxZQUFZLEdBQVM7UUFDbEIsSUFBSSxHQUFHLEVBQUU7WUFDTCxJQUFJLENBQUMsT0FBTyxHQUFHLEdBQUcsQ0FBQyxPQUFPLENBQUM7WUFDM0IsSUFBSSxDQUFDLFVBQVUsR0FBRyxHQUFHLENBQUMsVUFBVSxDQUFDO1lBQ2pDLElBQUksQ0FBQyxTQUFTLEdBQUcsR0FBRyxDQUFDLFNBQVMsQ0FBQztZQUMvQixJQUFJLENBQUMsRUFBRSxHQUFHLEdBQUcsQ0FBQyxFQUFFLENBQUM7WUFDakIsSUFBSSxDQUFDLElBQUksR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDO1lBQ3JCLElBQUksQ0FBQyxtQkFBbUIsR0FBRyxHQUFHLENBQUMsbUJBQW1CLENBQUM7WUFDbkQsSUFBSSxDQUFDLHFCQUFxQixHQUFHLEdBQUcsQ0FBQyxxQkFBcUIsQ0FBQztZQUN2RCxJQUFJLENBQUMsb0JBQW9CLEdBQUcsR0FBRyxDQUFDLG9CQUFvQixDQUFDO1lBQ3JELElBQUksQ0FBQyxNQUFNLEdBQUcsR0FBRyxDQUFDLE1BQU0sQ0FBQztZQUN6QixJQUFJLENBQUMsU0FBUyxHQUFHLEdBQUcsQ0FBQyxTQUFTLENBQUM7WUFDL0IsSUFBSSxDQUFDLFdBQVcsR0FBRyxHQUFHLENBQUMsV0FBVyxDQUFDO1lBQ25DLElBQUksQ0FBQyxZQUFZLEdBQUcsR0FBRyxDQUFDLFlBQVksQ0FBQztZQUNyQyxJQUFJLENBQUMsY0FBYyxHQUFHLEdBQUcsQ0FBQyxjQUFjLENBQUM7WUFDekMsSUFBSSxDQUFDLGdCQUFnQixHQUFHLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQztZQUM3QyxJQUFJLENBQUMsU0FBUyxHQUFHLEdBQUcsQ0FBQyxTQUFTLENBQUM7WUFDL0IsSUFBSSxDQUFDLE9BQU8sR0FBRyxHQUFHLENBQUMsT0FBTyxDQUFDO1lBQzNCLElBQUksQ0FBQyxhQUFhLEdBQUcsR0FBRyxDQUFDLGFBQWEsQ0FBQztZQUN2QyxJQUFJLENBQUMsV0FBVyxHQUFHLEdBQUcsQ0FBQyxXQUFXLENBQUM7WUFDbkMsSUFBSSxDQUFDLGFBQWEsR0FBRyxHQUFHLENBQUMsYUFBYSxDQUFDO1lBQ3ZDLElBQUksQ0FBQyxXQUFXLEdBQUcsR0FBRyxDQUFDLFdBQVcsQ0FBQztZQUNuQyxJQUFJLENBQUMsYUFBYSxHQUFHLEdBQUcsQ0FBQyxhQUFhLENBQUM7WUFDdkMsSUFBSSxDQUFDLFFBQVEsR0FBRyxHQUFHLENBQUMsUUFBUSxDQUFDO1lBQzdCLElBQUksQ0FBQyxTQUFTLEdBQUcsR0FBRyxDQUFDLFNBQVMsQ0FBQztZQUMvQixJQUFJLENBQUMsT0FBTyxHQUFHLEdBQUcsQ0FBQyxPQUFPLENBQUM7U0FDOUI7SUFDTCxDQUFDO0NBQ0giLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBQcm9jZXNzTGlzdENsb3VkU29ydGluZ01vZGVsIH0gZnJvbSAnLi9wcm9jZXNzLWxpc3Qtc29ydGluZy5tb2RlbCc7XG5cbmV4cG9ydCBjbGFzcyBQcm9jZXNzUXVlcnlDbG91ZFJlcXVlc3RNb2RlbCB7XG4gICBhcHBOYW1lOiBzdHJpbmc7XG4gICBhcHBWZXJzaW9uPzogbnVtYmVyIHwgc3RyaW5nO1xuICAgaW5pdGlhdG9yPzogbnVsbDtcbiAgIGlkPzogc3RyaW5nO1xuICAgbmFtZT86IHN0cmluZztcbiAgIHByb2Nlc3NEZWZpbml0aW9uSWQ/OiBzdHJpbmc7XG4gICBwcm9jZXNzRGVmaW5pdGlvbk5hbWU/OiBzdHJpbmc7XG4gICBwcm9jZXNzRGVmaW5pdGlvbktleT86IHN0cmluZztcbiAgIHN0YXR1cz86IHN0cmluZztcbiAgIHN0YXJ0RGF0ZT86IHN0cmluZztcbiAgIGJ1c2luZXNzS2V5Pzogc3RyaW5nO1xuICAgbGFzdE1vZGlmaWVkPzogc3RyaW5nO1xuICAgbGFzdE1vZGlmaWVkVG8/OiBzdHJpbmc7XG4gICBsYXN0TW9kaWZpZWRGcm9tPzogc3RyaW5nO1xuICAgc3RhcnRGcm9tPzogc3RyaW5nO1xuICAgc3RhcnRUbz86IHN0cmluZztcbiAgIGNvbXBsZXRlZEZyb20/OiBzdHJpbmc7XG4gICBjb21wbGV0ZWRUbz86IHN0cmluZztcbiAgIHN1c3BlbmRlZEZyb20/OiBzdHJpbmc7XG4gICBzdXNwZW5kZWRUbz86IHN0cmluZztcbiAgIGNvbXBsZXRlZERhdGU/OiBzdHJpbmc7XG4gICBtYXhJdGVtczogbnVtYmVyO1xuICAgc2tpcENvdW50OiBudW1iZXI7XG4gICBzb3J0aW5nPzogUHJvY2Vzc0xpc3RDbG91ZFNvcnRpbmdNb2RlbFtdO1xuICAgIGNvbnN0cnVjdG9yKG9iaj86IGFueSkge1xuICAgICAgIGlmIChvYmopIHtcbiAgICAgICAgICAgdGhpcy5hcHBOYW1lID0gb2JqLmFwcE5hbWU7XG4gICAgICAgICAgIHRoaXMuYXBwVmVyc2lvbiA9IG9iai5hcHBWZXJzaW9uO1xuICAgICAgICAgICB0aGlzLmluaXRpYXRvciA9IG9iai5pbml0aWF0b3I7XG4gICAgICAgICAgIHRoaXMuaWQgPSBvYmouaWQ7XG4gICAgICAgICAgIHRoaXMubmFtZSA9IG9iai5uYW1lO1xuICAgICAgICAgICB0aGlzLnByb2Nlc3NEZWZpbml0aW9uSWQgPSBvYmoucHJvY2Vzc0RlZmluaXRpb25JZDtcbiAgICAgICAgICAgdGhpcy5wcm9jZXNzRGVmaW5pdGlvbk5hbWUgPSBvYmoucHJvY2Vzc0RlZmluaXRpb25OYW1lO1xuICAgICAgICAgICB0aGlzLnByb2Nlc3NEZWZpbml0aW9uS2V5ID0gb2JqLnByb2Nlc3NEZWZpbml0aW9uS2V5O1xuICAgICAgICAgICB0aGlzLnN0YXR1cyA9IG9iai5zdGF0dXM7XG4gICAgICAgICAgIHRoaXMuc3RhcnREYXRlID0gb2JqLnN0YXJ0RGF0ZTtcbiAgICAgICAgICAgdGhpcy5idXNpbmVzc0tleSA9IG9iai5idXNpbmVzc0tleTtcbiAgICAgICAgICAgdGhpcy5sYXN0TW9kaWZpZWQgPSBvYmoubGFzdE1vZGlmaWVkO1xuICAgICAgICAgICB0aGlzLmxhc3RNb2RpZmllZFRvID0gb2JqLmxhc3RNb2RpZmllZFRvO1xuICAgICAgICAgICB0aGlzLmxhc3RNb2RpZmllZEZyb20gPSBvYmoubGFzdE1vZGlmaWVkRnJvbTtcbiAgICAgICAgICAgdGhpcy5zdGFydEZyb20gPSBvYmouc3RhcnRGcm9tO1xuICAgICAgICAgICB0aGlzLnN0YXJ0VG8gPSBvYmouc3RhcnRUbztcbiAgICAgICAgICAgdGhpcy5jb21wbGV0ZWRGcm9tID0gb2JqLmNvbXBsZXRlZEZyb207XG4gICAgICAgICAgIHRoaXMuY29tcGxldGVkVG8gPSBvYmouY29tcGxldGVkVG87XG4gICAgICAgICAgIHRoaXMuc3VzcGVuZGVkRnJvbSA9IG9iai5zdXNwZW5kZWRGcm9tO1xuICAgICAgICAgICB0aGlzLnN1c3BlbmRlZFRvID0gb2JqLnN1c3BlbmRlZFRvO1xuICAgICAgICAgICB0aGlzLmNvbXBsZXRlZERhdGUgPSBvYmouY29tcGxldGVkRGF0ZTtcbiAgICAgICAgICAgdGhpcy5tYXhJdGVtcyA9IG9iai5tYXhJdGVtcztcbiAgICAgICAgICAgdGhpcy5za2lwQ291bnQgPSBvYmouc2tpcENvdW50O1xuICAgICAgICAgICB0aGlzLnNvcnRpbmcgPSBvYmouc29ydGluZztcbiAgICAgICB9XG4gICB9XG59XG4iXX0=