/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, Input, Output, EventEmitter, ViewEncapsulation } from '@angular/core';
import { FormBuilder } from '@angular/forms';
import { DateAdapter } from '@angular/material/core';
import { MatDialog } from '@angular/material/dialog';
import { debounceTime, filter, takeUntil, finalize, switchMap } from 'rxjs/operators';
import { Subject } from 'rxjs';
import moment from 'moment-es6';
import { AppsProcessCloudService } from '../../../app/services/apps-process-cloud.service';
import { ProcessFilterCloudModel } from '../models/process-filter-cloud.model';
import { TranslationService, UserPreferencesService, UserPreferenceValues } from '@alfresco/adf-core';
import { ProcessFilterCloudService } from '../services/process-filter-cloud.service';
import { ProcessFilterDialogCloudComponent } from './process-filter-dialog-cloud.component';
import { ProcessCloudService } from '../../services/process-cloud.service';
import { DateCloudFilterType } from '../../../models/date-cloud-filter.model';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/forms';
import * as ɵngcc2 from '@angular/material/dialog';
import * as ɵngcc3 from '@angular/material/core';
import * as ɵngcc4 from '@alfresco/adf-core';
import * as ɵngcc5 from '../services/process-filter-cloud.service';
import * as ɵngcc6 from '../../../app/services/apps-process-cloud.service';
import * as ɵngcc7 from '../../services/process-cloud.service';
import * as ɵngcc8 from '@angular/material/expansion';
import * as ɵngcc9 from '@angular/common';
import * as ɵngcc10 from '@angular/flex-layout/flex';
import * as ɵngcc11 from '@angular/material/button';
import * as ɵngcc12 from '@angular/material/tooltip';
import * as ɵngcc13 from '@angular/material/progress-spinner';
import * as ɵngcc14 from '@angular/material/form-field';
import * as ɵngcc15 from '@angular/material/select';
import * as ɵngcc16 from '@angular/material/input';
import * as ɵngcc17 from '@angular/material/datepicker';
import * as ɵngcc18 from '@angular/material/icon';
import * as ɵngcc19 from '../../../common/date-range-filter/date-range-filter.component';
import * as ɵngcc20 from '../../../people/components/people-cloud.component';
import * as ɵngcc21 from '@ngx-translate/core';

function EditProcessFilterCloudComponent_mat_expansion_panel_header_2_ng_container_1_mat_panel_title_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-panel-title", 10);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r5 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(2, 1, ctx_r5.processFilter.name));
} }
function EditProcessFilterCloudComponent_mat_expansion_panel_header_2_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 1, "ADF_CLOUD_EDIT_PROCESS_FILTER.TITLE"), "");
} }
function EditProcessFilterCloudComponent_mat_expansion_panel_header_2_ng_container_1_div_4_ng_container_1_button_1_Template(rf, ctx) { if (rf & 1) {
    const _r12 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 13);
    ɵngcc0.ɵɵlistener("click", function EditProcessFilterCloudComponent_mat_expansion_panel_header_2_ng_container_1_div_4_ng_container_1_button_1_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r12); const filterAction_r10 = ctx.$implicit; const ctx_r11 = ɵngcc0.ɵɵnextContext(5); return ctx_r11.executeFilterActions(filterAction_r10); });
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵelement(2, "adf-icon", 14);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const filterAction_r10 = ctx.$implicit;
    const ctx_r9 = ɵngcc0.ɵɵnextContext(5);
    ɵngcc0.ɵɵpropertyInterpolate("matTooltip", ɵngcc0.ɵɵpipeBind1(1, 4, filterAction_r10.tooltip));
    ɵngcc0.ɵɵproperty("disabled", ctx_r9.isDisabledAction(filterAction_r10));
    ɵngcc0.ɵɵattribute("data-automation-id", "adf-filter-action-" + filterAction_r10.actionType);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("value", filterAction_r10.icon);
} }
function EditProcessFilterCloudComponent_mat_expansion_panel_header_2_ng_container_1_div_4_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, EditProcessFilterCloudComponent_mat_expansion_panel_header_2_ng_container_1_div_4_ng_container_1_button_1_Template, 3, 6, "button", 12);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r8 = ɵngcc0.ɵɵnextContext(4);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r8.processFilterActions);
} }
function EditProcessFilterCloudComponent_mat_expansion_panel_header_2_ng_container_1_div_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 11);
    ɵngcc0.ɵɵtemplate(1, EditProcessFilterCloudComponent_mat_expansion_panel_header_2_ng_container_1_div_4_ng_container_1_Template, 2, 1, "ng-container", 3);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r7 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r7.toggleFilterActions);
} }
function EditProcessFilterCloudComponent_mat_expansion_panel_header_2_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, EditProcessFilterCloudComponent_mat_expansion_panel_header_2_ng_container_1_mat_panel_title_1_Template, 3, 3, "mat-panel-title", 7);
    ɵngcc0.ɵɵelementStart(2, "mat-panel-description", 8);
    ɵngcc0.ɵɵtemplate(3, EditProcessFilterCloudComponent_mat_expansion_panel_header_2_ng_container_1_span_3_Template, 3, 3, "span", 3);
    ɵngcc0.ɵɵtemplate(4, EditProcessFilterCloudComponent_mat_expansion_panel_header_2_ng_container_1_div_4_Template, 2, 1, "div", 9);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r2.showProcessFilterName);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r2.showTitle);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r2.showFilterActions);
} }
function EditProcessFilterCloudComponent_mat_expansion_panel_header_2_ng_template_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 15);
    ɵngcc0.ɵɵelement(1, "mat-spinner", 16);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("diameter", 30);
} }
function EditProcessFilterCloudComponent_mat_expansion_panel_header_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-expansion-panel-header", 4);
    ɵngcc0.ɵɵtemplate(1, EditProcessFilterCloudComponent_mat_expansion_panel_header_2_ng_container_1_Template, 5, 3, "ng-container", 5);
    ɵngcc0.ɵɵtemplate(2, EditProcessFilterCloudComponent_mat_expansion_panel_header_2_ng_template_2_Template, 2, 1, "ng-template", null, 6, ɵngcc0.ɵɵtemplateRefExtractor);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const _r3 = ɵngcc0.ɵɵreference(3);
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r0.isLoading)("ngIfElse", _r3);
} }
function EditProcessFilterCloudComponent_ng_container_3_form_1_ng_container_2_mat_form_field_1_mat_option_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-option", 14);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const propertyOption_r24 = ctx.$implicit;
    const processFilterProperty_r15 = ɵngcc0.ɵɵnextContext(2).$implicit;
    ɵngcc0.ɵɵproperty("value", propertyOption_r24.value);
    ɵngcc0.ɵɵattribute("data-automation-id", "adf-cloud-edit-process-property-options-" + processFilterProperty_r15.key);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(2, 3, propertyOption_r24.label));
} }
function EditProcessFilterCloudComponent_ng_container_3_form_1_ng_container_2_mat_form_field_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-form-field", 24);
    ɵngcc0.ɵɵelementStart(1, "mat-select", 25);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵtemplate(3, EditProcessFilterCloudComponent_ng_container_3_form_1_ng_container_2_mat_form_field_1_mat_option_3_Template, 3, 5, "mat-option", 26);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const processFilterProperty_r15 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵproperty("floatLabel", "auto");
    ɵngcc0.ɵɵattribute("data-automation-id", processFilterProperty_r15.key);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate("placeholder", ɵngcc0.ɵɵpipeBind1(2, 6, processFilterProperty_r15.label));
    ɵngcc0.ɵɵproperty("formControlName", processFilterProperty_r15.key);
    ɵngcc0.ɵɵattribute("data-automation-id", "adf-cloud-edit-process-property-" + processFilterProperty_r15.key);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngForOf", processFilterProperty_r15.options);
} }
function EditProcessFilterCloudComponent_ng_container_3_form_1_ng_container_2_mat_form_field_2_mat_option_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-option", 14);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const propertyOption_r28 = ctx.$implicit;
    const processFilterProperty_r15 = ɵngcc0.ɵɵnextContext(2).$implicit;
    ɵngcc0.ɵɵproperty("value", propertyOption_r28.value);
    ɵngcc0.ɵɵattribute("data-automation-id", "adf-cloud-edit-process-property-options-" + processFilterProperty_r15.key);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 3, propertyOption_r28.label), " ");
} }
function EditProcessFilterCloudComponent_ng_container_3_form_1_ng_container_2_mat_form_field_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-form-field", 24);
    ɵngcc0.ɵɵelementStart(1, "mat-select", 27);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵtemplate(3, EditProcessFilterCloudComponent_ng_container_3_form_1_ng_container_2_mat_form_field_2_mat_option_3_Template, 3, 5, "mat-option", 26);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const processFilterProperty_r15 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵproperty("floatLabel", "auto");
    ɵngcc0.ɵɵattribute("data-automation-id", processFilterProperty_r15.key);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate("placeholder", ɵngcc0.ɵɵpipeBind1(2, 7, processFilterProperty_r15.label));
    ɵngcc0.ɵɵproperty("formControlName", processFilterProperty_r15.key)("multiple", true);
    ɵngcc0.ɵɵattribute("data-automation-id", "adf-cloud-edit-process-property-" + processFilterProperty_r15.key);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngForOf", processFilterProperty_r15.options);
} }
function EditProcessFilterCloudComponent_ng_container_3_form_1_ng_container_2_mat_form_field_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-form-field", 24);
    ɵngcc0.ɵɵelement(1, "input", 28);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const processFilterProperty_r15 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵproperty("floatLabel", "auto");
    ɵngcc0.ɵɵattribute("data-automation-id", processFilterProperty_r15.key);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate("placeholder", ɵngcc0.ɵɵpipeBind1(2, 5, processFilterProperty_r15.label));
    ɵngcc0.ɵɵproperty("formControlName", processFilterProperty_r15.key);
    ɵngcc0.ɵɵattribute("data-automation-id", "adf-cloud-edit-process-property-" + processFilterProperty_r15.key);
} }
function EditProcessFilterCloudComponent_ng_container_3_form_1_ng_container_2_mat_form_field_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-form-field", 24);
    ɵngcc0.ɵɵelement(1, "input", 29);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const processFilterProperty_r15 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵproperty("floatLabel", "auto");
    ɵngcc0.ɵɵattribute("data-automation-id", processFilterProperty_r15.key);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate("placeholder", ɵngcc0.ɵɵpipeBind1(2, 5, processFilterProperty_r15.label));
    ɵngcc0.ɵɵproperty("formControlName", processFilterProperty_r15.key);
    ɵngcc0.ɵɵattribute("data-automation-id", "adf-cloud-edit-process-property-" + processFilterProperty_r15.key);
} }
function EditProcessFilterCloudComponent_ng_container_3_form_1_ng_container_2_mat_form_field_5_div_10_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div");
    ɵngcc0.ɵɵelementStart(1, "div", 34);
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(4, "mat-icon", 35);
    ɵngcc0.ɵɵtext(5, "warning");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(3, 1, "ADF_CLOUD_EDIT_PROCESS_FILTER.ERROR.DATE"));
} }
function EditProcessFilterCloudComponent_ng_container_3_form_1_ng_container_2_mat_form_field_5_Template(rf, ctx) { if (rf & 1) {
    const _r36 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "mat-form-field", 24);
    ɵngcc0.ɵɵelementStart(1, "mat-label");
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(4, "input", 30);
    ɵngcc0.ɵɵlistener("keyup", function EditProcessFilterCloudComponent_ng_container_3_form_1_ng_container_2_mat_form_field_5_Template_input_keyup_4_listener($event) { ɵngcc0.ɵɵrestoreView(_r36); const processFilterProperty_r15 = ɵngcc0.ɵɵnextContext().$implicit; const ctx_r35 = ɵngcc0.ɵɵnextContext(3); return ctx_r35.onDateChanged($event.srcElement.value, processFilterProperty_r15); })("dateChange", function EditProcessFilterCloudComponent_ng_container_3_form_1_ng_container_2_mat_form_field_5_Template_input_dateChange_4_listener($event) { ɵngcc0.ɵɵrestoreView(_r36); const processFilterProperty_r15 = ɵngcc0.ɵɵnextContext().$implicit; const ctx_r38 = ɵngcc0.ɵɵnextContext(3); return ctx_r38.onDateChanged($event.value, processFilterProperty_r15); });
    ɵngcc0.ɵɵpipe(5, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(6, "mat-datepicker-toggle", 31);
    ɵngcc0.ɵɵelement(7, "mat-datepicker", null, 32);
    ɵngcc0.ɵɵelementStart(9, "div", 33);
    ɵngcc0.ɵɵtemplate(10, EditProcessFilterCloudComponent_ng_container_3_form_1_ng_container_2_mat_form_field_5_div_10_Template, 6, 3, "div", 3);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const _r33 = ɵngcc0.ɵɵreference(8);
    const processFilterProperty_r15 = ɵngcc0.ɵɵnextContext().$implicit;
    const ctx_r20 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵproperty("floatLabel", "auto");
    ɵngcc0.ɵɵattribute("data-automation-id", processFilterProperty_r15.key);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(3, 11, processFilterProperty_r15.label));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵpropertyInterpolate("placeholder", ɵngcc0.ɵɵpipeBind1(5, 13, processFilterProperty_r15.label));
    ɵngcc0.ɵɵproperty("formControlName", processFilterProperty_r15.key)("matDatepicker", _r33);
    ɵngcc0.ɵɵattribute("data-automation-id", "adf-cloud-edit-process-property-" + processFilterProperty_r15.key);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("for", _r33);
    ɵngcc0.ɵɵattribute("data-automation-id", "adf-cloud-edit-process-property-date-toggle-" + processFilterProperty_r15.key);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵattribute("data-automation-id", "adf-cloud-edit-process-property-date-picker-" + processFilterProperty_r15.key);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r20.hasError(processFilterProperty_r15));
} }
function EditProcessFilterCloudComponent_ng_container_3_form_1_ng_container_2_adf_cloud_date_range_filter_6_Template(rf, ctx) { if (rf & 1) {
    const _r42 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "adf-cloud-date-range-filter", 36);
    ɵngcc0.ɵɵlistener("dateTypeChange", function EditProcessFilterCloudComponent_ng_container_3_form_1_ng_container_2_adf_cloud_date_range_filter_6_Template_adf_cloud_date_range_filter_dateTypeChange_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r42); const processFilterProperty_r15 = ɵngcc0.ɵɵnextContext().$implicit; const ctx_r41 = ɵngcc0.ɵɵnextContext(3); return ctx_r41.onDateTypeChange($event, processFilterProperty_r15); })("dateChanged", function EditProcessFilterCloudComponent_ng_container_3_form_1_ng_container_2_adf_cloud_date_range_filter_6_Template_adf_cloud_date_range_filter_dateChanged_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r42); const processFilterProperty_r15 = ɵngcc0.ɵɵnextContext().$implicit; const ctx_r44 = ɵngcc0.ɵɵnextContext(3); return ctx_r44.onDateRangeFilterChanged($event, processFilterProperty_r15); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const processFilterProperty_r15 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵproperty("processFilterProperty", processFilterProperty_r15)("options", processFilterProperty_r15.dateFilterOptions);
} }
function EditProcessFilterCloudComponent_ng_container_3_form_1_ng_container_2_div_7_Template(rf, ctx) { if (rf & 1) {
    const _r48 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 37);
    ɵngcc0.ɵɵelementStart(1, "adf-cloud-people", 38);
    ɵngcc0.ɵɵlistener("changedUsers", function EditProcessFilterCloudComponent_ng_container_3_form_1_ng_container_2_div_7_Template_adf_cloud_people_changedUsers_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r48); const processFilterProperty_r15 = ɵngcc0.ɵɵnextContext().$implicit; const ctx_r47 = ɵngcc0.ɵɵnextContext(3); return ctx_r47.onChangedUser($event, processFilterProperty_r15); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const processFilterProperty_r15 = ɵngcc0.ɵɵnextContext().$implicit;
    const ctx_r22 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("preSelectUsers", ctx_r22.initiatorOptions)("title", processFilterProperty_r15.label)("validate", true)("appName", ctx_r22.appName)("mode", processFilterProperty_r15.selectionMode);
} }
function EditProcessFilterCloudComponent_ng_container_3_form_1_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, EditProcessFilterCloudComponent_ng_container_3_form_1_ng_container_2_mat_form_field_1_Template, 4, 8, "mat-form-field", 21);
    ɵngcc0.ɵɵtemplate(2, EditProcessFilterCloudComponent_ng_container_3_form_1_ng_container_2_mat_form_field_2_Template, 4, 9, "mat-form-field", 21);
    ɵngcc0.ɵɵtemplate(3, EditProcessFilterCloudComponent_ng_container_3_form_1_ng_container_2_mat_form_field_3_Template, 3, 7, "mat-form-field", 21);
    ɵngcc0.ɵɵtemplate(4, EditProcessFilterCloudComponent_ng_container_3_form_1_ng_container_2_mat_form_field_4_Template, 3, 7, "mat-form-field", 21);
    ɵngcc0.ɵɵtemplate(5, EditProcessFilterCloudComponent_ng_container_3_form_1_ng_container_2_mat_form_field_5_Template, 11, 15, "mat-form-field", 21);
    ɵngcc0.ɵɵtemplate(6, EditProcessFilterCloudComponent_ng_container_3_form_1_ng_container_2_adf_cloud_date_range_filter_6_Template, 1, 2, "adf-cloud-date-range-filter", 22);
    ɵngcc0.ɵɵtemplate(7, EditProcessFilterCloudComponent_ng_container_3_form_1_ng_container_2_div_7_Template, 2, 5, "div", 23);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const processFilterProperty_r15 = ctx.$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", processFilterProperty_r15.type === "select");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", processFilterProperty_r15.type === "multi-select");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", processFilterProperty_r15.type === "text");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", processFilterProperty_r15.type === "number");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", processFilterProperty_r15.type === "date");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", processFilterProperty_r15.type === "date-range");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", processFilterProperty_r15.type === "people");
} }
function EditProcessFilterCloudComponent_ng_container_3_form_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "form", 18);
    ɵngcc0.ɵɵelementStart(1, "div", 19);
    ɵngcc0.ɵɵtemplate(2, EditProcessFilterCloudComponent_ng_container_3_form_1_ng_container_2_Template, 8, 7, "ng-container", 20);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r13 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("formGroup", ctx_r13.editProcessFilterForm);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r13.processFilterProperties);
} }
function EditProcessFilterCloudComponent_ng_container_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, EditProcessFilterCloudComponent_ng_container_3_form_1_Template, 3, 2, "form", 17);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r1.editProcessFilterForm);
} }
export class EditProcessFilterCloudComponent {
    constructor(formBuilder, dialog, dateAdapter, userPreferencesService, translateService, processFilterCloudService, appsProcessCloudService, processCloudService) {
        this.formBuilder = formBuilder;
        this.dialog = dialog;
        this.dateAdapter = dateAdapter;
        this.userPreferencesService = userPreferencesService;
        this.translateService = translateService;
        this.processFilterCloudService = processFilterCloudService;
        this.appsProcessCloudService = appsProcessCloudService;
        this.processCloudService = processCloudService;
        this.DATE_FORMAT = 'DD/MM/YYYY';
        this.appName = '';
        this.role = '';
        this.filterProperties = EditProcessFilterCloudComponent.DEFAULT_PROCESS_FILTER_PROPERTIES;
        this.sortProperties = EditProcessFilterCloudComponent.DEFAULT_SORT_PROPERTIES;
        this.actions = EditProcessFilterCloudComponent.DEFAULT_ACTIONS;
        this.showFilterActions = true;
        this.showTitle = true;
        this.showProcessFilterName = true;
        this.filterChange = new EventEmitter();
        this.action = new EventEmitter();
        this.filterHasBeenChanged = false;
        this.status = [
            { value: '', label: 'ADF_CLOUD_PROCESS_FILTERS.STATUS.ALL' },
            { value: 'RUNNING', label: 'ADF_CLOUD_PROCESS_FILTERS.STATUS.RUNNING' },
            { value: 'SUSPENDED', label: 'ADF_CLOUD_PROCESS_FILTERS.STATUS.SUSPENDED' },
            { value: 'CANCELLED', label: 'ADF_CLOUD_PROCESS_FILTERS.STATUS.CANCELLED' },
            { value: 'COMPLETED', label: 'ADF_CLOUD_PROCESS_FILTERS.STATUS.COMPLETED' }
        ];
        this.directions = [
            { value: 'ASC', label: 'ADF_CLOUD_PROCESS_FILTERS.DIRECTION.ASCENDING' },
            { value: 'DESC', label: 'ADF_CLOUD_PROCESS_FILTERS.DIRECTION.DESCENDING' }
        ];
        this.actionDisabledForDefault = [
            EditProcessFilterCloudComponent.ACTION_SAVE,
            EditProcessFilterCloudComponent.ACTION_DELETE
        ];
        this.applicationNames = [];
        this.allProcessDefinitionNamesOption = {
            label: 'ADF_CLOUD_PROCESS_FILTERS.STATUS.ALL',
            value: ''
        };
        this.processDefinitionNames = [];
        this.processFilterProperties = [];
        this.processFilterActions = [];
        this.toggleFilterActions = false;
        this.appVersionOptions = [];
        this.initiatorOptions = [];
        this.onDestroy$ = new Subject();
        this.isLoading = false;
    }
    get processFilter() {
        return this._filter;
    }
    set processFilter(value) {
        const isChanged = this.isFilterChanged(this._filter, value);
        this._filter = value;
        if (value === null || value === void 0 ? void 0 : value.appName) {
            this.appName = value.appName;
        }
        if (value === null || value === void 0 ? void 0 : value.id) {
            this.id = value.id;
        }
        this.processFilterProperties = this.createAndFilterProperties();
        this.processFilterActions = this.createAndFilterActions();
        this.buildForm(this.processFilterProperties);
        if (isChanged) {
            this.filterChange.emit(value);
        }
    }
    ngOnInit() {
        this.userPreferencesService
            .select(UserPreferenceValues.Locale)
            .pipe(takeUntil(this.onDestroy$))
            .subscribe(locale => this.dateAdapter.setLocale(locale));
    }
    ngOnChanges(changes) {
        const id = changes['id'];
        if (id && id.currentValue !== id.previousValue) {
            this.retrieveProcessFilterAndBuildForm();
        }
    }
    ngOnDestroy() {
        this.onDestroy$.next(true);
        this.onDestroy$.complete();
    }
    buildForm(processFilterProperties) {
        this.editProcessFilterForm = this.formBuilder.group(this.getFormControlsConfig(processFilterProperties));
        this.onFilterChange();
    }
    getFormControlsConfig(processFilterProperties) {
        const properties = processFilterProperties.map((property) => {
            if (!!property.attributes) {
                return this.getAttributesControlConfig(property);
            }
            else {
                return { [property.key]: property.value };
            }
        });
        return properties.reduce(((result, current) => Object.assign(result, current)), {});
    }
    getAttributesControlConfig(property) {
        return Object.values(property.attributes).reduce((result, key) => {
            result[key] = property.value[key];
            return result;
        }, {});
    }
    retrieveProcessFilterAndBuildForm() {
        this.isLoading = true;
        this.processFilterCloudService
            .getFilterById(this.appName, this.id)
            .pipe(finalize(() => this.isLoading = false))
            .subscribe(response => {
            this.filterHasBeenChanged = false;
            this.processFilter = new ProcessFilterCloudModel(Object.assign({}, response || {}, this.processFilter || {}));
        });
    }
    onFilterChange() {
        if (this.filterChangeSub) {
            this.filterChangeSub.unsubscribe();
            this.filterChangeSub = null;
        }
        this.filterChangeSub = this.editProcessFilterForm.valueChanges
            .pipe(debounceTime(500), filter(() => this.isFormValid()), takeUntil(this.onDestroy$))
            .subscribe((formValues) => {
            this.setLastModifiedToFilter(formValues);
            const newValue = new ProcessFilterCloudModel(Object.assign({}, this.processFilter, formValues));
            const changed = !this.compareFilters(newValue, this.processFilter);
            this.filterHasBeenChanged = changed;
            if (changed) {
                this._filter = newValue;
                this.filterChange.emit(newValue);
            }
        });
    }
    createAndFilterProperties() {
        this.checkMandatoryFilterProperties();
        if (this.filterProperties.includes('appName')) {
            this.getRunningApplications();
        }
        if (this.filterProperties.includes('processDefinitionName')) {
            this.getProcessDefinitions();
        }
        if (this.filterProperties.includes('appVersionMultiple')) {
            this.getAppVersionOptions();
        }
        if (this.filterProperties.includes('initiator')) {
            this.initiatorOptions = !!this.processFilter.initiator
                ? this.processFilter.initiator.split(',').map(username => Object.assign({}, { username: username }))
                : [];
        }
        const defaultProperties = this.createProcessFilterProperties(this.processFilter);
        let filteredProperties = defaultProperties.filter((filterProperty) => this.isValidProperty(this.filterProperties, filterProperty.key));
        if (!this.filterProperties.includes('sort')) {
            filteredProperties = filteredProperties.filter(property => property.key !== 'order');
        }
        if (this.filterProperties.includes('lastModified')) {
            filteredProperties = [
                ...filteredProperties,
                ...this.createLastModifiedProperty(this.processFilter)
            ];
        }
        return filteredProperties;
    }
    checkMandatoryFilterProperties() {
        if (this.filterProperties === undefined || this.filterProperties.length === 0) {
            this.filterProperties = EditProcessFilterCloudComponent.DEFAULT_PROCESS_FILTER_PROPERTIES;
        }
    }
    isValidProperty(filterProperties, key) {
        return filterProperties ? filterProperties.indexOf(key) >= 0 : true;
    }
    get createSortProperties() {
        this.checkMandatorySortProperties();
        const defaultSortProperties = this.createProcessSortProperties();
        return defaultSortProperties.filter((sortProperty) => this.isValidProperty(this.sortProperties, sortProperty.key));
    }
    getAppVersionOptions() {
        this.appVersionOptions = [];
        this.processCloudService.getApplicationVersions(this.appName).subscribe((appVersions) => {
            appVersions.forEach(appVersion => {
                this.appVersionOptions.push({ label: appVersion.entry.version, value: appVersion.entry.version });
            });
        });
    }
    checkMandatorySortProperties() {
        if (this.sortProperties === undefined || this.sortProperties.length === 0) {
            this.sortProperties = EditProcessFilterCloudComponent.DEFAULT_SORT_PROPERTIES;
        }
    }
    createAndFilterActions() {
        this.checkMandatoryActions();
        const actions = this.createFilterActions();
        return actions.filter((action) => this.isValidAction(this.actions, action));
    }
    checkMandatoryActions() {
        if (this.actions === undefined || this.actions.length === 0) {
            this.actions = EditProcessFilterCloudComponent.DEFAULT_ACTIONS;
        }
    }
    isValidAction(actions, action) {
        return actions ? actions.indexOf(action.actionType) >= 0 : true;
    }
    isFormValid() {
        return this.editProcessFilterForm.valid;
    }
    getPropertyController(property) {
        return this.editProcessFilterForm.get(property.key);
    }
    onDateChanged(newDateValue, dateProperty) {
        if (newDateValue) {
            const controller = this.getPropertyController(dateProperty);
            if (newDateValue.isValid()) {
                controller.setValue(newDateValue);
                controller.setErrors(null);
            }
            else {
                controller.setErrors({ invalid: true });
            }
        }
    }
    onDateTypeChange(dateType, property) {
        this.editProcessFilterForm.get(property.attributes.dateType).setValue(dateType);
    }
    onDateRangeFilterChanged(dateRange, property) {
        var _a, _b;
        this.editProcessFilterForm.get((_a = property.attributes) === null || _a === void 0 ? void 0 : _a.from).setValue(dateRange.startDate ? dateRange.startDate : null);
        this.editProcessFilterForm.get((_b = property.attributes) === null || _b === void 0 ? void 0 : _b.to).setValue(dateRange.endDate ? dateRange.endDate : null);
        this.editProcessFilterForm.get(property.attributes.dateType).setValue(DateCloudFilterType.RANGE);
    }
    onChangedUser(users, processProperty) {
        this.getPropertyController(processProperty).setValue(users.map(user => user.username).join(','));
    }
    hasError(property) {
        const controller = this.getPropertyController(property);
        return controller.errors && controller.errors.invalid;
    }
    compareFilters(editedQuery, currentQuery) {
        return JSON.stringify(editedQuery).toLowerCase() === JSON.stringify(currentQuery).toLowerCase();
    }
    getRunningApplications() {
        this.applicationNames = [];
        this.appsProcessCloudService
            .getDeployedApplicationsByStatus('RUNNING', this.role)
            .subscribe((applications) => {
            if (applications && applications.length > 0) {
                applications.map((application) => {
                    this.applicationNames.push({ label: application.name, value: application.name });
                });
            }
        });
    }
    getProcessDefinitions() {
        this.processDefinitionNames = [];
        this.processCloudService.getProcessDefinitions(this.appName).subscribe((processDefinitions) => {
            if (processDefinitions && processDefinitions.length > 0) {
                this.processDefinitionNames.push(this.allProcessDefinitionNamesOption);
                processDefinitions.map((processDefinition) => {
                    this.processDefinitionNames.push({ label: processDefinition.name, value: processDefinition.name });
                });
            }
        });
    }
    executeFilterActions(action) {
        if (action.actionType === EditProcessFilterCloudComponent.ACTION_SAVE) {
            this.save(action);
        }
        else if (action.actionType === EditProcessFilterCloudComponent.ACTION_SAVE_AS) {
            this.saveAs(action);
        }
        else if (action.actionType === EditProcessFilterCloudComponent.ACTION_DELETE) {
            this.delete(action);
        }
    }
    save(saveAction) {
        this.processFilterCloudService
            .updateFilter(this.processFilter)
            .subscribe(() => {
            saveAction.filter = this.processFilter;
            this.filterHasBeenChanged = false;
            this.action.emit(saveAction);
        });
    }
    delete(deleteAction) {
        this.processFilterCloudService
            .deleteFilter(this.processFilter)
            .pipe(filter((filters) => {
            deleteAction.filter = this.processFilter;
            this.action.emit(deleteAction);
            return filters.length === 0;
        }), switchMap(() => this.restoreDefaultProcessFilters()))
            .subscribe(() => { });
    }
    saveAs(saveAsAction) {
        const dialogRef = this.dialog.open(ProcessFilterDialogCloudComponent, {
            data: {
                name: this.translateService.instant(this.processFilter.name)
            },
            height: 'auto',
            minWidth: '30%'
        });
        dialogRef.afterClosed().subscribe((result) => {
            if (result && result.action === ProcessFilterDialogCloudComponent.ACTION_SAVE) {
                const filterId = Math.random().toString(36).substr(2, 9);
                const filterKey = this.getSanitizeFilterName(result.name);
                const newFilter = {
                    name: result.name,
                    icon: result.icon,
                    id: filterId,
                    key: 'custom-' + filterKey
                };
                const resultFilter = Object.assign({}, this.processFilter, newFilter);
                this.processFilterCloudService
                    .addFilter(resultFilter)
                    .subscribe(() => {
                    saveAsAction.filter = resultFilter;
                    this.filterHasBeenChanged = false;
                    this.action.emit(saveAsAction);
                });
            }
        });
    }
    getSanitizeFilterName(filterName) {
        const nameWithHyphen = this.replaceSpaceWithHyphen(filterName.trim());
        return nameWithHyphen.toLowerCase();
    }
    replaceSpaceWithHyphen(name) {
        const regExt = new RegExp(' ', 'g');
        return name.replace(regExt, '-');
    }
    restoreDefaultProcessFilters() {
        return this.processFilterCloudService.getProcessFilters(this.appName);
    }
    onExpand() {
        this.toggleFilterActions = true;
    }
    onClose() {
        this.toggleFilterActions = false;
    }
    isDisabledAction(action) {
        return (this.processFilterCloudService.isDefaultFilter(this.processFilter.name) &&
            this.actionDisabledForDefault.includes(action.actionType)) ? true : this.hasFilterChanged(action);
    }
    hasFilterChanged(action) {
        return action.actionType === EditProcessFilterCloudComponent.ACTION_SAVE ||
            action.actionType === EditProcessFilterCloudComponent.ACTION_SAVE_AS ?
            !this.filterHasBeenChanged : false;
    }
    setLastModifiedToFilter(formValues) {
        if (formValues.lastModifiedTo && Date.parse(formValues.lastModifiedTo.toString())) {
            const lastModifiedToFilterValue = moment(formValues.lastModifiedTo);
            lastModifiedToFilterValue.set({
                hour: 23,
                minute: 59,
                second: 59
            });
            formValues.lastModifiedTo = lastModifiedToFilterValue.toDate();
        }
    }
    createFilterActions() {
        return [
            {
                actionType: EditProcessFilterCloudComponent.ACTION_SAVE,
                icon: 'adf:save',
                tooltip: 'ADF_CLOUD_EDIT_PROCESS_FILTER.TOOL_TIP.SAVE'
            },
            {
                actionType: EditProcessFilterCloudComponent.ACTION_SAVE_AS,
                icon: 'adf:save-as',
                tooltip: 'ADF_CLOUD_EDIT_PROCESS_FILTER.TOOL_TIP.SAVE_AS'
            },
            {
                actionType: EditProcessFilterCloudComponent.ACTION_DELETE,
                icon: 'delete',
                tooltip: 'ADF_CLOUD_EDIT_PROCESS_FILTER.TOOL_TIP.DELETE'
            }
        ];
    }
    createLastModifiedProperty(filterModel) {
        let lastModifiedFrom;
        let lastModifiedTo;
        if (filterModel.lastModifiedFrom) {
            lastModifiedFrom = moment(filterModel.lastModifiedFrom);
        }
        if (filterModel.lastModifiedTo) {
            lastModifiedTo = moment(filterModel.lastModifiedTo);
        }
        return [
            {
                label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.LAST_MODIFIED_DATE_FORM',
                type: 'date',
                key: 'lastModifiedFrom',
                value: lastModifiedFrom
            },
            {
                label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.LAST_MODIFIED_TO',
                type: 'date',
                key: 'lastModifiedTo',
                value: lastModifiedTo
            }
        ];
    }
    createProcessSortProperties() {
        return [
            {
                label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.ID',
                key: 'id',
                value: 'id'
            },
            {
                label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.PROCESS_NAME',
                key: 'name',
                value: 'name'
            },
            {
                label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.START_DATE',
                key: 'startDate',
                value: 'startDate'
            },
            {
                label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.STATUS',
                key: 'status',
                value: 'status'
            },
            {
                label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.STARTED_BY',
                key: 'initiator',
                value: 'initiator'
            },
            {
                label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.APP_NAME',
                key: 'appName',
                value: 'appName'
            },
            {
                label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.APP_VERSION',
                key: 'appVersion',
                value: 'appVersion'
            },
            {
                label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.PROCESS_INS_ID',
                key: 'processInstanceId',
                value: 'processInstanceId'
            },
            {
                label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.PROCESS_DEF_ID',
                key: 'processDefinitionId',
                value: 'processDefinitionId'
            },
            {
                label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.PROCESS_DEF_NAME',
                key: 'processDefinitionName',
                value: 'processDefinitionName'
            },
            {
                label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.PROCESS_DEF_KEY',
                key: 'processDefinitionKey',
                value: 'processDefinitionKey'
            },
            {
                label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.LAST_MODIFIED',
                key: 'lastModified',
                value: 'lastModified'
            },
            {
                label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.BUSINESS_KEY',
                key: 'businessKey',
                value: 'businessKey'
            }
        ];
    }
    isFilterChanged(oldValue, newValue) {
        const oldJson = JSON.stringify(this.processFilterCloudService.writeQueryParams(oldValue || {}, this.filterProperties));
        const newJson = JSON.stringify(this.processFilterCloudService.writeQueryParams(newValue || {}, this.filterProperties));
        return oldJson !== newJson;
    }
    createProcessFilterProperties(filterModel) {
        const appVersionMultiple = [];
        if (filterModel.appVersion) {
            appVersionMultiple.push(Array.isArray(filterModel.appVersion)
                ? filterModel.appVersion.map(entry => entry.toString())
                : `${filterModel.appVersion}`);
        }
        return [
            {
                label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.APP_NAME',
                type: 'select',
                key: 'appName',
                value: filterModel.appName || '',
                options: this.applicationNames
            },
            {
                label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.APP_VERSION',
                type: 'number',
                key: 'appVersion',
                value: filterModel.appVersion
            },
            {
                label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.APP_VERSION',
                type: 'multi-select',
                key: 'appVersionMultiple',
                value: appVersionMultiple,
                options: this.appVersionOptions
            },
            {
                label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.PROCESS_INS_ID',
                type: 'text',
                key: 'processInstanceId',
                value: filterModel.processInstanceId || ''
            },
            {
                label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.PROCESS_NAME',
                type: 'text',
                key: 'processName',
                value: filterModel.processName || ''
            },
            {
                label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.PROCESS_DEF_NAME',
                type: 'select',
                key: 'processDefinitionName',
                value: filterModel.processDefinitionName || '',
                options: this.processDefinitionNames
            },
            {
                label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.STATUS',
                type: 'select',
                key: 'status',
                value: filterModel.status || this.status[0].value,
                options: this.status
            },
            {
                label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.PROCESS_DEF_ID',
                type: 'text',
                key: 'processDefinitionId',
                value: filterModel.processDefinitionId || ''
            },
            {
                label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.PROCESS_DEF_KEY',
                type: 'text',
                key: 'processDefinitionKey',
                value: filterModel.processDefinitionKey || ''
            },
            {
                label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.SORT',
                type: 'select',
                key: 'sort',
                value: filterModel.sort || this.createSortProperties[0].value,
                options: this.createSortProperties
            },
            {
                label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.DIRECTION',
                type: 'select',
                key: 'order',
                value: filterModel.order || this.directions[0].value,
                options: this.directions
            },
            {
                label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.COMPLETED_DATE',
                type: 'date',
                key: 'completedDate',
                value: filterModel.completedDate || false
            },
            {
                label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.STARTED_BY',
                type: 'people',
                key: 'initiator',
                value: filterModel.initiator,
                selectionMode: 'multiple'
            },
            {
                label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.COMPLETED_DATE',
                type: 'date-range',
                key: 'completedDateRange',
                attributes: { dateType: 'completedDateType', from: '_completedFrom', to: '_completedTo' },
                value: {
                    completedDateType: filterModel.completedDateType || null,
                    _completedFrom: filterModel.completedFrom || null,
                    _completedTo: filterModel.completedTo || null
                }
            },
            {
                label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.STARTED_DATE',
                type: 'date-range',
                key: 'startedDateRange',
                attributes: { dateType: 'startedDateType', from: '_startFrom', to: '_startTo' },
                value: {
                    startedDateType: filterModel.startedDateType || null,
                    _startFrom: filterModel.startFrom || null,
                    _startTo: filterModel.startTo || null
                }
            },
            {
                label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.SUSPENDED_DATE',
                type: 'date-range',
                key: 'suspendedDateRange',
                attributes: { dateType: 'suspendedDateType', from: '_suspendedFrom', to: '_suspendedTo' },
                value: {
                    suspendedDateType: filterModel.suspendedDateType || null,
                    _suspendedFrom: filterModel.suspendedFrom || null,
                    _suspendedTo: filterModel.suspendedTo || null
                }
            }
        ];
    }
}
EditProcessFilterCloudComponent.ɵfac = function EditProcessFilterCloudComponent_Factory(t) { return new (t || EditProcessFilterCloudComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FormBuilder), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.MatDialog), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.DateAdapter), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.UserPreferencesService), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.TranslationService), ɵngcc0.ɵɵdirectiveInject(ɵngcc5.ProcessFilterCloudService), ɵngcc0.ɵɵdirectiveInject(ɵngcc6.AppsProcessCloudService), ɵngcc0.ɵɵdirectiveInject(ɵngcc7.ProcessCloudService)); };
EditProcessFilterCloudComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: EditProcessFilterCloudComponent, selectors: [["adf-cloud-edit-process-filter"]], inputs: { appName: "appName", role: "role", filterProperties: "filterProperties", sortProperties: "sortProperties", actions: "actions", showFilterActions: "showFilterActions", showTitle: "showTitle", showProcessFilterName: "showProcessFilterName", processFilter: "processFilter", id: "id" }, outputs: { filterChange: "filterChange", action: "action" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 4, vars: 3, consts: [[3, "hideToggle"], [3, "afterExpand", "closed"], ["id", "adf-edit-process-filter-expansion-header", 4, "ngIf"], [4, "ngIf"], ["id", "adf-edit-process-filter-expansion-header"], [4, "ngIf", "ngIfElse"], ["loadingTemplate", ""], ["fxLayoutAlign", "space-between center", "id", "adf-edit-process-filter-title-id", 4, "ngIf"], ["fxLayoutAlign", "space-between center", "id", "adf-edit-process-filter-sub-title-id"], ["class", "adf-cloud-edit-process-filter-actions", 4, "ngIf"], ["fxLayoutAlign", "space-between center", "id", "adf-edit-process-filter-title-id"], [1, "adf-cloud-edit-process-filter-actions"], ["mat-icon-button", "", 3, "matTooltip", "disabled", "click", 4, "ngFor", "ngForOf"], ["mat-icon-button", "", 3, "matTooltip", "disabled", "click"], [3, "value"], [1, "adf-cloud-edit-process-filter-loading-margin"], [3, "diameter"], [3, "formGroup", 4, "ngIf"], [3, "formGroup"], ["fxLayout", "row wrap", "fxLayout.xs", "column", "fxLayoutGap", "10px", "fxLayoutAlign", "start center"], [4, "ngFor", "ngForOf"], ["fxFlex", "23%", 3, "floatLabel", 4, "ngIf"], [3, "processFilterProperty", "options", "dateTypeChange", "dateChanged", 4, "ngIf"], ["fxFlex", "23%", 4, "ngIf"], ["fxFlex", "23%", 3, "floatLabel"], [3, "placeholder", "formControlName"], [3, "value", 4, "ngFor", "ngForOf"], [3, "placeholder", "formControlName", "multiple"], ["matInput", "", "type", "text", 3, "formControlName", "placeholder"], ["matInput", "", "type", "number", "min", "0", 3, "formControlName", "placeholder"], ["matInput", "", 3, "formControlName", "matDatepicker", "placeholder", "keyup", "dateChange"], ["matSuffix", "", 3, "for"], ["dateController", ""], [1, "adf-edit-process-filter-date-error-container"], [1, "adf-error-text"], [1, "adf-error-icon"], [3, "processFilterProperty", "options", "dateTypeChange", "dateChanged"], ["fxFlex", "23%"], [3, "preSelectUsers", "title", "validate", "appName", "mode", "changedUsers"]], template: function EditProcessFilterCloudComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "mat-accordion", 0);
        ɵngcc0.ɵɵelementStart(1, "mat-expansion-panel", 1);
        ɵngcc0.ɵɵlistener("afterExpand", function EditProcessFilterCloudComponent_Template_mat_expansion_panel_afterExpand_1_listener() { return ctx.onExpand(); })("closed", function EditProcessFilterCloudComponent_Template_mat_expansion_panel_closed_1_listener() { return ctx.onClose(); });
        ɵngcc0.ɵɵtemplate(2, EditProcessFilterCloudComponent_mat_expansion_panel_header_2_Template, 4, 2, "mat-expansion-panel-header", 2);
        ɵngcc0.ɵɵtemplate(3, EditProcessFilterCloudComponent_ng_container_3_Template, 2, 1, "ng-container", 3);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("hideToggle", ctx.isLoading);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.processFilter);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.isLoading);
    } }, directives: [ɵngcc8.MatAccordion, ɵngcc8.MatExpansionPanel, ɵngcc9.NgIf, ɵngcc8.MatExpansionPanelHeader, ɵngcc8.MatExpansionPanelDescription, ɵngcc10.DefaultLayoutAlignDirective, ɵngcc8.MatExpansionPanelTitle, ɵngcc9.NgForOf, ɵngcc11.MatButton, ɵngcc12.MatTooltip, ɵngcc4.IconComponent, ɵngcc13.MatSpinner, ɵngcc1.ɵangular_packages_forms_forms_y, ɵngcc1.NgControlStatusGroup, ɵngcc1.FormGroupDirective, ɵngcc10.DefaultLayoutDirective, ɵngcc10.DefaultLayoutGapDirective, ɵngcc14.MatFormField, ɵngcc10.DefaultFlexDirective, ɵngcc15.MatSelect, ɵngcc1.NgControlStatus, ɵngcc1.FormControlName, ɵngcc3.MatOption, ɵngcc16.MatInput, ɵngcc1.DefaultValueAccessor, ɵngcc1.NumberValueAccessor, ɵngcc14.MatLabel, ɵngcc17.MatDatepickerInput, ɵngcc17.MatDatepickerToggle, ɵngcc14.MatSuffix, ɵngcc17.MatDatepicker, ɵngcc18.MatIcon, ɵngcc19.DateRangeFilterComponent, ɵngcc20.PeopleCloudComponent], pipes: [ɵngcc21.TranslatePipe], styles: [".adf-edit-process-filter-date-error-container{height:20px;margin-top:12px;position:absolute;width:100%}.adf-edit-process-filter-date-error-container>div{display:flex;flex-flow:row;justify-content:flex-start}.adf-edit-process-filter-date-error-container .adf-error-text{color:var(--theme-warn-color);font-size:11px;height:16px;line-height:1.33;padding-right:8px;width:auto}.adf-edit-process-filter-date-error-container .adf-error-icon{color:var(--theme-warn-color);font-size:16px}.adf-cloud-edit-process-filter-loading-margin{margin-left:calc(50% - 50px);margin-right:calc(50% - 50px)}"], encapsulation: 2 });
EditProcessFilterCloudComponent.ACTION_SAVE = 'save';
EditProcessFilterCloudComponent.ACTION_SAVE_AS = 'saveAs';
EditProcessFilterCloudComponent.ACTION_DELETE = 'delete';
EditProcessFilterCloudComponent.DEFAULT_PROCESS_FILTER_PROPERTIES = ['status', 'sort', 'order', 'lastModified'];
EditProcessFilterCloudComponent.DEFAULT_SORT_PROPERTIES = ['id', 'name', 'status', 'startDate'];
EditProcessFilterCloudComponent.DEFAULT_ACTIONS = ['save', 'saveAs', 'delete'];
EditProcessFilterCloudComponent.ctorParameters = () => [
    { type: FormBuilder },
    { type: MatDialog },
    { type: DateAdapter },
    { type: UserPreferencesService },
    { type: TranslationService },
    { type: ProcessFilterCloudService },
    { type: AppsProcessCloudService },
    { type: ProcessCloudService }
];
EditProcessFilterCloudComponent.propDecorators = {
    appName: [{ type: Input }],
    role: [{ type: Input }],
    id: [{ type: Input }],
    filterProperties: [{ type: Input }],
    sortProperties: [{ type: Input }],
    actions: [{ type: Input }],
    showFilterActions: [{ type: Input }],
    showTitle: [{ type: Input }],
    showProcessFilterName: [{ type: Input }],
    filterChange: [{ type: Output }],
    action: [{ type: Output }],
    processFilter: [{ type: Input }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(EditProcessFilterCloudComponent, [{
        type: Component,
        args: [{
                selector: 'adf-cloud-edit-process-filter',
                template: "<mat-accordion [hideToggle]=\"isLoading\">\n    <mat-expansion-panel (afterExpand)=\"onExpand()\" (closed)=\"onClose()\">\n        <mat-expansion-panel-header *ngIf=\"processFilter\" id=\"adf-edit-process-filter-expansion-header\">\n            <ng-container *ngIf=\"!isLoading; else loadingTemplate\">\n                <mat-panel-title *ngIf=\"showProcessFilterName\" fxLayoutAlign=\"space-between center\" id=\"adf-edit-process-filter-title-id\">{{processFilter.name | translate}}</mat-panel-title>\n                <mat-panel-description fxLayoutAlign=\"space-between center\" id=\"adf-edit-process-filter-sub-title-id\">\n                    <span *ngIf=\"showTitle\"> {{ 'ADF_CLOUD_EDIT_PROCESS_FILTER.TITLE' | translate}}</span>\n                    <div *ngIf=\"showFilterActions\" class=\"adf-cloud-edit-process-filter-actions\">\n                        <ng-container *ngIf=\"toggleFilterActions\">\n                            <button *ngFor=\"let filterAction of processFilterActions\" mat-icon-button matTooltip=\"{{ filterAction.tooltip | translate}}\" [attr.data-automation-id]=\"'adf-filter-action-' + filterAction.actionType\" [disabled]=\"isDisabledAction(filterAction)\" (click)=\"executeFilterActions(filterAction)\">\n                                <adf-icon [value]=\"filterAction.icon\"></adf-icon>\n                            </button>\n                        </ng-container>\n                    </div>\n                </mat-panel-description>\n            </ng-container>\n            <ng-template #loadingTemplate>\n                <div class=\"adf-cloud-edit-process-filter-loading-margin\">\n                    <mat-spinner [diameter]=\"30\"></mat-spinner>\n                </div>\n            </ng-template>\n        </mat-expansion-panel-header>\n        <ng-container *ngIf=\"!isLoading\">\n            <form [formGroup]=\"editProcessFilterForm\" *ngIf=\"editProcessFilterForm\">\n                <div fxLayout=\"row wrap\" fxLayout.xs=\"column\" fxLayoutGap=\"10px\" fxLayoutAlign=\"start center\">\n                    <ng-container *ngFor=\"let processFilterProperty of processFilterProperties\">\n                        <mat-form-field [floatLabel]=\"'auto'\" fxFlex=\"23%\" *ngIf=\"processFilterProperty.type === 'select'\" [attr.data-automation-id]=\"processFilterProperty.key\">\n                            <mat-select\n                                placeholder=\"{{processFilterProperty.label | translate}}\"\n                                [formControlName]=\"processFilterProperty.key\"\n                                [attr.data-automation-id]=\"'adf-cloud-edit-process-property-' + processFilterProperty.key\">\n                                <mat-option\n                                    *ngFor=\"let propertyOption of processFilterProperty.options\"\n                                    [value]=\"propertyOption.value\"\n                                    [attr.data-automation-id]=\"'adf-cloud-edit-process-property-options-' + processFilterProperty.key\"\n                                >{{ propertyOption.label | translate }}</mat-option>\n                            </mat-select>\n                        </mat-form-field>\n                        <mat-form-field [floatLabel]=\"'auto'\" fxFlex=\"23%\" *ngIf=\"processFilterProperty.type === 'multi-select'\" [attr.data-automation-id]=\"processFilterProperty.key\">\n                            <mat-select\n                                placeholder=\"{{processFilterProperty.label | translate}}\"\n                                [formControlName]=\"processFilterProperty.key\"\n                                [attr.data-automation-id]=\"'adf-cloud-edit-process-property-' + processFilterProperty.key\"\n                                [multiple]=\"true\">\n                                <mat-option *ngFor=\"let propertyOption of processFilterProperty.options\" [value]=\"propertyOption.value\" [attr.data-automation-id]=\"'adf-cloud-edit-process-property-options-' + processFilterProperty.key\">\n                                    {{ propertyOption.label | translate }}\n                                </mat-option>\n                            </mat-select>\n                        </mat-form-field>\n                        <mat-form-field [floatLabel]=\"'auto'\" fxFlex=\"23%\" *ngIf=\"processFilterProperty.type === 'text'\" [attr.data-automation-id]=\"processFilterProperty.key\">\n                            <input matInput\n                                [formControlName]=\"processFilterProperty.key\"\n                                type=\"text\"\n                                placeholder=\"{{processFilterProperty.label | translate}}\"\n                                [attr.data-automation-id]=\"'adf-cloud-edit-process-property-' + processFilterProperty.key\"/>\n                        </mat-form-field>\n                        <mat-form-field [floatLabel]=\"'auto'\" fxFlex=\"23%\" *ngIf=\"processFilterProperty.type === 'number'\" [attr.data-automation-id]=\"processFilterProperty.key\">\n                            <input matInput\n                                [formControlName]=\"processFilterProperty.key\"\n                                type=\"number\" min=\"0\"\n                                placeholder=\"{{processFilterProperty.label | translate}}\"\n                                [attr.data-automation-id]=\"'adf-cloud-edit-process-property-' + processFilterProperty.key\"/>\n                        </mat-form-field>\n                        <mat-form-field [floatLabel]=\"'auto'\" fxFlex=\"23%\" *ngIf=\"processFilterProperty.type === 'date'\" [attr.data-automation-id]=\"processFilterProperty.key\">\n                            <mat-label>{{processFilterProperty.label | translate}}</mat-label>\n                            <input\n                                matInput\n                                [formControlName]=\"processFilterProperty.key\"\n                                (keyup)=\"onDateChanged($any($event).srcElement.value, processFilterProperty)\"\n                                (dateChange)=\"onDateChanged($event.value, processFilterProperty)\"\n                                [matDatepicker]=\"dateController\"\n                                placeholder=\"{{processFilterProperty.label | translate}}\"\n                                [attr.data-automation-id]=\"'adf-cloud-edit-process-property-' + processFilterProperty.key\">\n                        <mat-datepicker-toggle matSuffix [for]=\"dateController\" [attr.data-automation-id]=\"'adf-cloud-edit-process-property-date-toggle-' + processFilterProperty.key\"></mat-datepicker-toggle>\n                        <mat-datepicker #dateController [attr.data-automation-id]=\"'adf-cloud-edit-process-property-date-picker-' + processFilterProperty.key\"></mat-datepicker>\n                        <div class=\"adf-edit-process-filter-date-error-container\">\n                            <div *ngIf=\"hasError(processFilterProperty)\">\n                                <div class=\"adf-error-text\">{{'ADF_CLOUD_EDIT_PROCESS_FILTER.ERROR.DATE' | translate}}</div>\n                                <mat-icon class=\"adf-error-icon\">warning</mat-icon>\n                            </div>\n                        </div>\n                        </mat-form-field>\n\n                        <adf-cloud-date-range-filter *ngIf=\"processFilterProperty.type === 'date-range'\"\n                            [processFilterProperty]=\"processFilterProperty\"\n                            [options]=\"processFilterProperty.dateFilterOptions\"\n                            (dateTypeChange)=\"onDateTypeChange($event, processFilterProperty)\"\n                            (dateChanged)=\"onDateRangeFilterChanged($event, processFilterProperty)\"></adf-cloud-date-range-filter>\n\n                        <div fxFlex=\"23%\" *ngIf=\"processFilterProperty.type === 'people'\">\n                            <adf-cloud-people\n                                [preSelectUsers]=\"initiatorOptions\"\n                                [title]=\"processFilterProperty.label\"\n                                [validate]=\"true\"\n                                [appName]=\"appName\"\n                                [mode]=\"processFilterProperty.selectionMode\"\n                                (changedUsers)=\"onChangedUser($event, processFilterProperty)\"></adf-cloud-people>\n                        </div>\n                    </ng-container>\n                </div>\n            </form>\n        </ng-container>\n    </mat-expansion-panel>\n</mat-accordion>\n",
                encapsulation: ViewEncapsulation.None,
                styles: [".adf-edit-process-filter-date-error-container{height:20px;margin-top:12px;position:absolute;width:100%}.adf-edit-process-filter-date-error-container>div{display:flex;flex-flow:row;justify-content:flex-start}.adf-edit-process-filter-date-error-container .adf-error-text{color:var(--theme-warn-color);font-size:11px;height:16px;line-height:1.33;padding-right:8px;width:auto}.adf-edit-process-filter-date-error-container .adf-error-icon{color:var(--theme-warn-color);font-size:16px}.adf-cloud-edit-process-filter-loading-margin{margin-left:calc(50% - 50px);margin-right:calc(50% - 50px)}"]
            }]
    }], function () { return [{ type: ɵngcc1.FormBuilder }, { type: ɵngcc2.MatDialog }, { type: ɵngcc3.DateAdapter }, { type: ɵngcc4.UserPreferencesService }, { type: ɵngcc4.TranslationService }, { type: ɵngcc5.ProcessFilterCloudService }, { type: ɵngcc6.AppsProcessCloudService }, { type: ɵngcc7.ProcessCloudService }]; }, { appName: [{
            type: Input
        }], role: [{
            type: Input
        }], filterProperties: [{
            type: Input
        }], sortProperties: [{
            type: Input
        }], actions: [{
            type: Input
        }], showFilterActions: [{
            type: Input
        }], showTitle: [{
            type: Input
        }], showProcessFilterName: [{
            type: Input
        }], filterChange: [{
            type: Output
        }], action: [{
            type: Output
        }], processFilter: [{
            type: Input
        }], id: [{
            type: Input
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,