import { AlfrescoApiService, LogService, AppConfigService } from '@alfresco/adf-core';
import { Injectable } from '@angular/core';
import { Subject, throwError } from 'rxjs';
import { catchError, map } from 'rxjs/operators';
import { BaseCloudService } from '../../services/base-cloud.service';
import { ProcessDefinitionCloud } from '../../models/process-definition-cloud.model';
import * as i0 from "@angular/core";
import * as i1 from "@alfresco/adf-core";
export class ProcessCloudService extends BaseCloudService {
    constructor(apiService, appConfigService, logService) {
        super(apiService, appConfigService);
        this.logService = logService;
        this.dataChangesDetected = new Subject();
    }
    getProcessInstanceById(appName, processInstanceId) {
        if (appName && processInstanceId) {
            const url = `${this.getBasePath(appName)}/query/v1/process-instances/${processInstanceId}`;
            return this.get(url).pipe(map((res) => {
                this.dataChangesDetected.next(res.entry);
                return res.entry;
            }));
        }
        else {
            this.logService.error('AppName and ProcessInstanceId are mandatory for querying a process');
            return throwError('AppName/ProcessInstanceId not configured');
        }
    }
    getProcessDefinitions(appName) {
        if (appName || appName === '') {
            const url = `${this.getBasePath(appName)}/rb/v1/process-definitions`;
            return this.get(url).pipe(map((res) => {
                return res.list.entries.map((processDefs) => new ProcessDefinitionCloud(processDefs.entry));
            }));
        }
        else {
            this.logService.error('AppName is mandatory for querying task');
            return throwError('AppName not configured');
        }
    }
    getApplicationVersions(appName) {
        if (appName) {
            const url = `${this.getBasePath(appName)}/query/v1/applications`;
            return this.get(url).pipe(map((appEntities) => {
                return appEntities.list.entries;
            }), catchError((err) => this.handleError(err)));
        }
        else {
            this.logService.error('AppName is mandatory for querying the versions of an application');
            return throwError('AppName not configured');
        }
    }
    cancelProcess(appName, processInstanceId) {
        if (appName && processInstanceId) {
            const queryUrl = `${this.getBasePath(appName)}/rb/v1/process-instances/${processInstanceId}`;
            return this.delete(queryUrl).pipe(map((res) => {
                this.dataChangesDetected.next(res.entry);
                return res.entry;
            }));
        }
        else {
            this.logService.error('App name and Process id are mandatory for deleting a process');
            return throwError('App name and process id not configured');
        }
    }
    handleError(error) {
        this.logService.error(error);
        return throwError(error || 'Server error');
    }
}
ProcessCloudService.ɵprov = i0.ɵɵdefineInjectable({ factory: function ProcessCloudService_Factory() { return new ProcessCloudService(i0.ɵɵinject(i1.AlfrescoApiService), i0.ɵɵinject(i1.AppConfigService), i0.ɵɵinject(i1.LogService)); }, token: ProcessCloudService, providedIn: "root" });
ProcessCloudService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
ProcessCloudService.ctorParameters = () => [
    { type: AlfrescoApiService },
    { type: AppConfigService },
    { type: LogService }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvY2Vzcy1jbG91ZC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Ii9ob21lL3RyYXZpcy9idWlsZC9BbGZyZXNjby9hbGZyZXNjby1uZzItY29tcG9uZW50cy9saWIvcHJvY2Vzcy1zZXJ2aWNlcy1jbG91ZC9zcmMvIiwic291cmNlcyI6WyJsaWIvcHJvY2Vzcy9zZXJ2aWNlcy9wcm9jZXNzLWNsb3VkLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBaUJBLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxVQUFVLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUN0RixPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBYyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ3ZELE9BQU8sRUFBRSxVQUFVLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFakQsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sbUNBQW1DLENBQUM7QUFDckUsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sNkNBQTZDLENBQUM7OztBQU1yRixNQUFNLE9BQU8sbUJBQW9CLFNBQVEsZ0JBQWdCO0lBSXJELFlBQVksVUFBOEIsRUFDOUIsZ0JBQWtDLEVBQzFCLFVBQXNCO1FBQ3RDLEtBQUssQ0FBQyxVQUFVLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQztRQURwQixlQUFVLEdBQVYsVUFBVSxDQUFZO1FBSjFDLHdCQUFtQixHQUFHLElBQUksT0FBTyxFQUF3QixDQUFDO0lBTTFELENBQUM7SUFRRCxzQkFBc0IsQ0FBQyxPQUFlLEVBQUUsaUJBQXlCO1FBQzdELElBQUksT0FBTyxJQUFJLGlCQUFpQixFQUFFO1lBQzlCLE1BQU0sR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsK0JBQStCLGlCQUFpQixFQUFFLENBQUM7WUFFM0YsT0FBTyxJQUFJLENBQUMsR0FB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QUMsS0FBSyxJQUFJLGNBQWMsQ0FBQyxDQUFDO0lBQy9DLENBQUM7Ozs7WUFwR0osVUFBVSxTQUFDO2dCQUNSLFVBQVUsRUFBRSxNQUFNO2FBQ3JCOzs7WUFYUSxrQkFBa0I7WUFBYyxnQkFBZ0I7WUFBNUIsVUFBVSIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IEFsZnJlc2NvQXBpU2VydmljZSwgTG9nU2VydmljZSwgQXBwQ29uZmlnU2VydmljZSB9IGZyb20gJ0BhbGZyZXNjby9hZGYtY29yZSc7XG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBTdWJqZWN0LCB0aHJvd0Vycm9yIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBjYXRjaEVycm9yLCBtYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBQcm9jZXNzSW5zdGFuY2VDbG91ZCB9IGZyb20gJy4uL3N0YXJ0LXByb2Nlc3MvbW9kZWxzL3Byb2Nlc3MtaW5zdGFuY2UtY2xvdWQubW9kZWwnO1xuaW1wb3J0IHsgQmFzZUNsb3VkU2VydmljZSB9IGZyb20gJy4uLy4uL3NlcnZpY2VzL2Jhc2UtY2xvdWQuc2VydmljZSc7XG5pbXBvcnQgeyBQcm9jZXNzRGVmaW5pdGlvbkNsb3VkIH0gZnJvbSAnLi4vLi4vbW9kZWxzL3Byb2Nlc3MtZGVmaW5pdGlvbi1jbG91ZC5tb2RlbCc7XG5pbXBvcnQgeyBBcHBsaWNhdGlvblZlcnNpb25Nb2RlbCwgQXBwbGljYXRpb25WZXJzaW9uUmVzcG9uc2VNb2RlbCB9IGZyb20gJy4uLy4uL21vZGVscy9hcHBsaWNhdGlvbi12ZXJzaW9uLm1vZGVsJztcblxuQEluamVjdGFibGUoe1xuICAgIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBQcm9jZXNzQ2xvdWRTZXJ2aWNlIGV4dGVuZHMgQmFzZUNsb3VkU2VydmljZSB7XG5cbiAgICBkYXRhQ2hhbmdlc0RldGVjdGVkID0gbmV3IFN1YmplY3Q8UHJvY2Vzc0luc3RhbmNlQ2xvdWQ+KCk7XG5cbiAgICBjb25zdHJ1Y3RvcihhcGlTZXJ2aWNlOiBBbGZyZXNjb0FwaVNlcnZpY2UsXG4gICAgICAgICAgICAgICAgYXBwQ29uZmlnU2VydmljZTogQXBwQ29uZmlnU2VydmljZSxcbiAgICAgICAgICAgICAgICBwcml2YXRlIGxvZ1NlcnZpY2U6IExvZ1NlcnZpY2UpIHtcbiAgICAgICAgc3VwZXIoYXBpU2VydmljZSwgYXBwQ29uZmlnU2VydmljZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyBkZXRhaWxzIG9mIGEgcHJvY2VzcyBpbnN0YW5jZS5cbiAgICAgKiBAcGFyYW0gYXBwTmFtZSBOYW1lIG9mIHRoZSBhcHBcbiAgICAgKiBAcGFyYW0gcHJvY2Vzc0luc3RhbmNlSWQgSUQgb2YgdGhlIHByb2Nlc3MgaW5zdGFuY2Ugd2hvc2UgZGV0YWlscyB5b3Ugd2FudFxuICAgICAqIEByZXR1cm5zIFByb2Nlc3MgaW5zdGFuY2UgZGV0YWlsc1xuICAgICAqL1xuICAgIGdldFByb2Nlc3NJbnN0YW5jZUJ5SWQoYXBwTmFtZTogc3RyaW5nLCBwcm9jZXNzSW5zdGFuY2VJZDogc3RyaW5nKTogT2JzZXJ2YWJsZTxQcm9jZXNzSW5zdGFuY2VDbG91ZD4ge1xuICAgICAgICBpZiAoYXBwTmFtZSAmJiBwcm9jZXNzSW5zdGFuY2VJZCkge1xuICAgICAgICAgICAgY29uc3QgdXJsID0gYCR7dGhpcy5nZXRCYXNlUGF0aChhcHBOYW1lKX0vcXVlcnkvdjEvcHJvY2Vzcy1pbnN0YW5jZXMvJHtwcm9jZXNzSW5zdGFuY2VJZH1gO1xuXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5nZXQ8eyBlbnRyeTogUHJvY2Vzc0luc3RhbmNlQ2xvdWQgfT4odXJsKS5waXBlKFxuICAgICAgICAgICAgICAgIG1hcCgocmVzKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGF0YUNoYW5nZXNEZXRlY3RlZC5uZXh0KHJlcy5lbnRyeSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXMuZW50cnk7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmxvZ1NlcnZpY2UuZXJyb3IoJ0FwcE5hbWUgYW5kIFByb2Nlc3NJbnN0YW5jZUlkIGFyZSBtYW5kYXRvcnkgZm9yIHF1ZXJ5aW5nIGEgcHJvY2VzcycpO1xuICAgICAgICAgICAgcmV0dXJuIHRocm93RXJyb3IoJ0FwcE5hbWUvUHJvY2Vzc0luc3RhbmNlSWQgbm90IGNvbmZpZ3VyZWQnKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIHByb2Nlc3MgZGVmaW5pdGlvbnMgYXNzb2NpYXRlZCB3aXRoIGFuIGFwcC5cbiAgICAgKiBAcGFyYW0gYXBwTmFtZSBOYW1lIG9mIHRoZSB0YXJnZXQgYXBwXG4gICAgICogQHJldHVybnMgQXJyYXkgb2YgcHJvY2VzcyBkZWZpbml0aW9uc1xuICAgICAqL1xuICAgIGdldFByb2Nlc3NEZWZpbml0aW9ucyhhcHBOYW1lOiBzdHJpbmcpOiBPYnNlcnZhYmxlPFByb2Nlc3NEZWZpbml0aW9uQ2xvdWRbXT4ge1xuICAgICAgICBpZiAoYXBwTmFtZSB8fCBhcHBOYW1lID09PSAnJykge1xuICAgICAgICAgICAgY29uc3QgdXJsID0gYCR7dGhpcy5nZXRCYXNlUGF0aChhcHBOYW1lKX0vcmIvdjEvcHJvY2Vzcy1kZWZpbml0aW9uc2A7XG5cbiAgICAgICAgICAgIHJldHVybiB0aGlzLmdldCh1cmwpLnBpcGUoXG4gICAgICAgICAgICAgICAgbWFwKChyZXM6IGFueSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzLmxpc3QuZW50cmllcy5tYXAoKHByb2Nlc3NEZWZzKSA9PiBuZXcgUHJvY2Vzc0RlZmluaXRpb25DbG91ZChwcm9jZXNzRGVmcy5lbnRyeSkpO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5sb2dTZXJ2aWNlLmVycm9yKCdBcHBOYW1lIGlzIG1hbmRhdG9yeSBmb3IgcXVlcnlpbmcgdGFzaycpO1xuICAgICAgICAgICAgcmV0dXJuIHRocm93RXJyb3IoJ0FwcE5hbWUgbm90IGNvbmZpZ3VyZWQnKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGFwcGxpY2F0aW9uIHZlcnNpb25zIGFzc29jaWF0ZWQgd2l0aCBhbiBhcHAuXG4gICAgICogQHBhcmFtIGFwcE5hbWUgTmFtZSBvZiB0aGUgdGFyZ2V0IGFwcFxuICAgICAqIEByZXR1cm5zIEFycmF5IG9mIEFwcGxpY2F0aW9uIFZlcnNpb24gTW9kZWxzXG4gICAgICovXG4gICAgZ2V0QXBwbGljYXRpb25WZXJzaW9ucyhhcHBOYW1lOiBzdHJpbmcpOiBPYnNlcnZhYmxlPEFwcGxpY2F0aW9uVmVyc2lvbk1vZGVsW10+IHtcbiAgICAgICAgaWYgKGFwcE5hbWUpIHtcbiAgICAgICAgICAgIGNvbnN0IHVybCA9IGAke3RoaXMuZ2V0QmFzZVBhdGgoYXBwTmFtZSl9L3F1ZXJ5L3YxL2FwcGxpY2F0aW9uc2A7XG5cbiAgICAgICAgICAgIHJldHVybiB0aGlzLmdldDxhbnk+KHVybCkucGlwZShcbiAgICAgICAgICAgICAgICBtYXAoKGFwcEVudGl0aWVzOiBBcHBsaWNhdGlvblZlcnNpb25SZXNwb25zZU1vZGVsKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBhcHBFbnRpdGllcy5saXN0LmVudHJpZXM7XG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgY2F0Y2hFcnJvcigoZXJyKSA9PiB0aGlzLmhhbmRsZUVycm9yKGVycikpXG4gICAgICAgICAgICApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5sb2dTZXJ2aWNlLmVycm9yKCdBcHBOYW1lIGlzIG1hbmRhdG9yeSBmb3IgcXVlcnlpbmcgdGhlIHZlcnNpb25zIG9mIGFuIGFwcGxpY2F0aW9uJyk7XG4gICAgICAgICAgICByZXR1cm4gdGhyb3dFcnJvcignQXBwTmFtZSBub3QgY29uZmlndXJlZCcpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2FuY2VscyBhIHByb2Nlc3MuXG4gICAgICogQHBhcmFtIGFwcE5hbWUgTmFtZSBvZiB0aGUgYXBwXG4gICAgICogQHBhcmFtIHByb2Nlc3NJbnN0YW5jZUlkIElkIG9mIHRoZSBwcm9jZXNzIHRvIGNhbmNlbFxuICAgICAqIEByZXR1cm5zIE9wZXJhdGlvbiBJbmZvcm1hdGlvblxuICAgICAqL1xuICAgIGNhbmNlbFByb2Nlc3MoYXBwTmFtZTogc3RyaW5nLCBwcm9jZXNzSW5zdGFuY2VJZDogc3RyaW5nKTogT2JzZXJ2YWJsZTxQcm9jZXNzSW5zdGFuY2VDbG91ZD4ge1xuICAgICAgICBpZiAoYXBwTmFtZSAmJiBwcm9jZXNzSW5zdGFuY2VJZCkge1xuICAgICAgICAgICAgY29uc3QgcXVlcnlVcmwgPSBgJHt0aGlzLmdldEJhc2VQYXRoKGFwcE5hbWUpfS9yYi92MS9wcm9jZXNzLWluc3RhbmNlcy8ke3Byb2Nlc3NJbnN0YW5jZUlkfWA7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5kZWxldGUocXVlcnlVcmwpLnBpcGUoXG4gICAgICAgICAgICAgICAgbWFwKChyZXM6IGFueSkgPT4ge1xuICAgICAgICAgICAgICAgICAgIHRoaXMuZGF0YUNoYW5nZXNEZXRlY3RlZC5uZXh0KHJlcy5lbnRyeSk7XG4gICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlcy5lbnRyeTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMubG9nU2VydmljZS5lcnJvcignQXBwIG5hbWUgYW5kIFByb2Nlc3MgaWQgYXJlIG1hbmRhdG9yeSBmb3IgZGVsZXRpbmcgYSBwcm9jZXNzJyk7XG4gICAgICAgICAgICByZXR1cm4gdGhyb3dFcnJvcignQXBwIG5hbWUgYW5kIHByb2Nlc3MgaWQgbm90IGNvbmZpZ3VyZWQnKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgaGFuZGxlRXJyb3IoZXJyb3I/OiBhbnkpIHtcbiAgICAgICAgdGhpcy5sb2dTZXJ2aWNlLmVycm9yKGVycm9yKTtcbiAgICAgICAgcmV0dXJuIHRocm93RXJyb3IoZXJyb3IgfHwgJ1NlcnZlciBlcnJvcicpO1xuICAgIH1cbn1cbiJdfQ==