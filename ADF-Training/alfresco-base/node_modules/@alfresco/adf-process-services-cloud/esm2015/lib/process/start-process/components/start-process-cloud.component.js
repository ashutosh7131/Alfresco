/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { __awaiter } from "tslib";
import { Component, EventEmitter, Input, Output, ViewChild, ViewEncapsulation, HostListener } from '@angular/core';
import { StartProcessCloudService } from '../services/start-process-cloud.service';
import { FormControl, Validators, FormBuilder } from '@angular/forms';
import { MatAutocompleteTrigger } from '@angular/material/autocomplete';
import { ProcessPayloadCloud } from '../models/process-payload-cloud.model';
import { debounceTime, takeUntil, switchMap, filter, distinctUntilChanged, tap } from 'rxjs/operators';
import { ProcessDefinitionCloud } from '../../../models/process-definition-cloud.model';
import { Subject } from 'rxjs';
import { ProcessNameCloudPipe } from '../../../pipes/process-name-cloud.pipe';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../services/start-process-cloud.service';
import * as ɵngcc2 from '@angular/forms';
import * as ɵngcc3 from '../../../pipes/process-name-cloud.pipe';
import * as ɵngcc4 from '@angular/material/card';
import * as ɵngcc5 from '@angular/common';
import * as ɵngcc6 from '@angular/material/form-field';
import * as ɵngcc7 from '@angular/material/input';
import * as ɵngcc8 from '@angular/material/autocomplete';
import * as ɵngcc9 from '@angular/material/core';
import * as ɵngcc10 from '@angular/material/button';
import * as ɵngcc11 from '@angular/material/icon';
import * as ɵngcc12 from '../../../form/components/form-cloud.component';
import * as ɵngcc13 from '../../../form/components/form-cloud-custom-outcomes.component';
import * as ɵngcc14 from '@angular/flex-layout/flex';
import * as ɵngcc15 from '@ngx-translate/core';

function StartProcessCloudComponent_mat_card_subtitle_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-card-subtitle", 6);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 1, ctx_r0.errorMessageId), " ");
} }
function StartProcessCloudComponent_div_6_mat_option_11_Template(rf, ctx) { if (rf & 1) {
    const _r17 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "mat-option", 21);
    ɵngcc0.ɵɵlistener("click", function StartProcessCloudComponent_div_6_mat_option_11_Template_mat_option_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r17); const processDef_r15 = ctx.$implicit; const ctx_r16 = ɵngcc0.ɵɵnextContext(2); return ctx_r16.processDefinitionSelectionChanged(processDef_r15); });
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const processDef_r15 = ctx.$implicit;
    const ctx_r8 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("value", ctx_r8.getProcessDefinitionValue(processDef_r15));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r8.getProcessDefinitionValue(processDef_r15), " ");
} }
function StartProcessCloudComponent_div_6_button_12_Template(rf, ctx) { if (rf & 1) {
    const _r19 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 22);
    ɵngcc0.ɵɵlistener("click", function StartProcessCloudComponent_div_6_button_12_Template_button_click_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r19); const ctx_r18 = ɵngcc0.ɵɵnextContext(2); return ctx_r18.displayDropdown($event); });
    ɵngcc0.ɵɵelementStart(1, "mat-icon");
    ɵngcc0.ɵɵtext(2, "arrow_drop_down");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} }
function StartProcessCloudComponent_div_6_mat_error_13_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-error", 23);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 1, "ADF_CLOUD_PROCESS_LIST.ADF_CLOUD_START_PROCESS.ERROR.PROCESS_DEFINITION_REQUIRED"), " ");
} }
function StartProcessCloudComponent_div_6_mat_error_19_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-error", 24);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 1, "ADF_CLOUD_PROCESS_LIST.ADF_CLOUD_START_PROCESS.ERROR.PROCESS_NAME_REQUIRED"), " ");
} }
const _c0 = function (a0) { return { characters: a0 }; };
function StartProcessCloudComponent_div_6_mat_error_20_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-error", 25);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r12 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind2(2, 1, "ADF_CLOUD_PROCESS_LIST.ADF_CLOUD_START_PROCESS.ERROR.MAXIMUM_LENGTH", ɵngcc0.ɵɵpureFunction1(4, _c0, ctx_r12.maxNameLength)), " ");
} }
function StartProcessCloudComponent_div_6_mat_error_21_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-error");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 1, "ADF_CLOUD_PROCESS_LIST.ADF_CLOUD_START_PROCESS.ERROR.SPACE_VALIDATOR"), " ");
} }
function StartProcessCloudComponent_div_6_ng_container_22_ng_template_3_Template(rf, ctx) { }
function StartProcessCloudComponent_div_6_ng_container_22_Template(rf, ctx) { if (rf & 1) {
    const _r22 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "adf-cloud-form", 26);
    ɵngcc0.ɵɵlistener("formContentClicked", function StartProcessCloudComponent_div_6_ng_container_22_Template_adf_cloud_form_formContentClicked_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r22); const ctx_r21 = ɵngcc0.ɵɵnextContext(2); return ctx_r21.onFormContentClicked($event); })("formLoaded", function StartProcessCloudComponent_div_6_ng_container_22_Template_adf_cloud_form_formLoaded_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r22); const ctx_r23 = ɵngcc0.ɵɵnextContext(2); return ctx_r23.onFormLoaded($event); });
    ɵngcc0.ɵɵelementStart(2, "adf-cloud-form-custom-outcomes");
    ɵngcc0.ɵɵtemplate(3, StartProcessCloudComponent_div_6_ng_container_22_ng_template_3_Template, 0, 0, "ng-template", 27);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r14 = ɵngcc0.ɵɵnextContext(2);
    const _r2 = ɵngcc0.ɵɵreference(8);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("appName", ctx_r14.appName)("appVersion", ctx_r14.processDefinitionCurrent.appVersion)("data", ctx_r14.values)("formId", ctx_r14.processDefinitionCurrent.formKey)("showSaveButton", false)("showCompleteButton", false)("showRefreshButton", false)("showValidationIcon", false)("showTitle", false);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", _r2);
} }
function StartProcessCloudComponent_div_6_Template(rf, ctx) { if (rf & 1) {
    const _r25 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div");
    ɵngcc0.ɵɵelementStart(1, "form", 7);
    ɵngcc0.ɵɵelementStart(2, "mat-form-field", 8);
    ɵngcc0.ɵɵelementStart(3, "mat-label");
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵpipe(5, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(6, "input", 9, 10);
    ɵngcc0.ɵɵelementStart(8, "div", 11);
    ɵngcc0.ɵɵelementStart(9, "mat-autocomplete", 12, 13);
    ɵngcc0.ɵɵlistener("optionSelected", function StartProcessCloudComponent_div_6_Template_mat_autocomplete_optionSelected_9_listener($event) { ɵngcc0.ɵɵrestoreView(_r25); const ctx_r24 = ɵngcc0.ɵɵnextContext(); return ctx_r24.setProcessDefinitionOnForm($event.option.value); });
    ɵngcc0.ɵɵtemplate(11, StartProcessCloudComponent_div_6_mat_option_11_Template, 2, 2, "mat-option", 14);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(12, StartProcessCloudComponent_div_6_button_12_Template, 3, 0, "button", 15);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(13, StartProcessCloudComponent_div_6_mat_error_13_Template, 3, 3, "mat-error", 16);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(14, "mat-form-field", 8);
    ɵngcc0.ɵɵelementStart(15, "mat-label");
    ɵngcc0.ɵɵtext(16);
    ɵngcc0.ɵɵpipe(17, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(18, "input", 17);
    ɵngcc0.ɵɵtemplate(19, StartProcessCloudComponent_div_6_mat_error_19_Template, 3, 3, "mat-error", 18);
    ɵngcc0.ɵɵtemplate(20, StartProcessCloudComponent_div_6_mat_error_20_Template, 3, 6, "mat-error", 19);
    ɵngcc0.ɵɵtemplate(21, StartProcessCloudComponent_div_6_mat_error_21_Template, 3, 3, "mat-error", 20);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(22, StartProcessCloudComponent_div_6_ng_container_22_Template, 4, 10, "ng-container", 3);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const _r7 = ɵngcc0.ɵɵreference(10);
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    const _r2 = ɵngcc0.ɵɵreference(8);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("formGroup", ctx_r1.processForm);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("floatLabel", "always");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(5, 15, "ADF_CLOUD_PROCESS_LIST.ADF_CLOUD_START_PROCESS.FORM.LABEL.TYPE"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("matAutocomplete", _r7);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("displayWith", ctx_r1.displayProcessNameOnDropdown);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r1.filteredProcesses);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r1.showSelectProcessDropdown);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r1.processDefinition.hasError("required"));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("floatLabel", "always");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(17, 17, "ADF_CLOUD_PROCESS_LIST.ADF_CLOUD_START_PROCESS.FORM.LABEL.NAME"));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r1.processInstanceName.hasError("required"));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r1.processInstanceName.hasError("maxlength"));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r1.processInstanceName.hasError("pattern"));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r1.hasForm())("ngIfElse", _r2);
} }
function StartProcessCloudComponent_ng_template_7_Template(rf, ctx) { if (rf & 1) {
    const _r27 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 28);
    ɵngcc0.ɵɵelementStart(1, "button", 29);
    ɵngcc0.ɵɵlistener("click", function StartProcessCloudComponent_ng_template_7_Template_button_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r27); const ctx_r26 = ɵngcc0.ɵɵnextContext(); return ctx_r26.cancelStartProcess(); });
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "uppercase");
    ɵngcc0.ɵɵpipe(4, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(5, "button", 30);
    ɵngcc0.ɵɵlistener("click", function StartProcessCloudComponent_ng_template_7_Template_button_click_5_listener() { ɵngcc0.ɵɵrestoreView(_r27); const ctx_r28 = ɵngcc0.ɵɵnextContext(); return ctx_r28.startProcess(); });
    ɵngcc0.ɵɵtext(6);
    ɵngcc0.ɵɵpipe(7, "uppercase");
    ɵngcc0.ɵɵpipe(8, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(3, 3, ɵngcc0.ɵɵpipeBind1(4, 5, "ADF_CLOUD_PROCESS_LIST.ADF_CLOUD_START_PROCESS.FORM.ACTION.CANCEL")), " ");
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("disabled", ctx_r3.disableStartButton || !ctx_r3.isProcessFormValid());
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(7, 7, ɵngcc0.ɵɵpipeBind1(8, 9, "ADF_CLOUD_PROCESS_LIST.ADF_CLOUD_START_PROCESS.FORM.ACTION.START")), " ");
} }
function StartProcessCloudComponent_ng_template_9_mat_card_content_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-card-content");
    ɵngcc0.ɵɵelementStart(1, "mat-card-subtitle", 31);
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "uppercase");
    ɵngcc0.ɵɵpipe(4, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(3, 1, ɵngcc0.ɵɵpipeBind1(4, 3, "ADF_CLOUD_PROCESS_LIST.ADF_CLOUD_START_PROCESS.NO_PROCESS_DEFINITIONS")), " ");
} }
function StartProcessCloudComponent_ng_template_9_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, StartProcessCloudComponent_ng_template_9_mat_card_content_0_Template, 5, 5, "mat-card-content", 20);
} if (rf & 2) {
    const ctx_r5 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngIf", ctx_r5.processDefinitionLoaded);
} }
export class StartProcessCloudComponent {
    constructor(startProcessCloudService, formBuilder, processNameCloudPipe) {
        this.startProcessCloudService = startProcessCloudService;
        this.formBuilder = formBuilder;
        this.processNameCloudPipe = processNameCloudPipe;
        this.appName = '';
        this.maxNameLength = StartProcessCloudComponent.MAX_NAME_LENGTH;
        this.name = '';
        this.showSelectProcessDropdown = true;
        this.success = new EventEmitter();
        this.cancel = new EventEmitter();
        this.error = new EventEmitter();
        this.formContentClicked = new EventEmitter();
        this.processDefinitionSelection = new EventEmitter();
        this.processDefinitionList = [];
        this.errorMessageId = '';
        this.processPayloadCloud = new ProcessPayloadCloud();
        this.filteredProcesses = [];
        this.isLoading = false;
        this.isFormCloudLoaded = false;
        this.disableStartButton = true;
        this.onDestroy$ = new Subject();
        this.processDefinitionLoaded = false;
    }
    ngOnInit() {
        this.processForm = this.formBuilder.group({
            processInstanceName: new FormControl('', [Validators.required, Validators.maxLength(this.getMaxNameLength()), Validators.pattern('^[^\\s]+(\\s+[^\\s]+)*$')]),
            processDefinition: new FormControl(this.processDefinitionName, [Validators.required, this.processDefinitionNameValidator()])
        });
        this.processDefinition.valueChanges
            .pipe(debounceTime(StartProcessCloudComponent.PROCESS_DEFINITION_DEBOUNCE))
            .pipe(takeUntil(this.onDestroy$))
            .subscribe((processDefinitionName) => {
            this.selectProcessDefinitionByProcesDefinitionName(processDefinitionName);
        });
        this.processForm.valueChanges
            .pipe(debounceTime(StartProcessCloudComponent.PROCESS_FORM_DEBOUNCE), tap(() => this.disableStartButton = true), distinctUntilChanged(), filter(() => this.isProcessSelectionValid()), switchMap(() => this.generateProcessInstance())).pipe(takeUntil(this.onDestroy$))
            .subscribe((res) => {
            this.currentCreatedProcess = res;
            this.disableStartButton = false;
        });
        if (this.processDefinitionName) {
            this.processDefinition.setValue(this.processDefinitionName);
            this.processDefinition.markAsDirty();
            this.processDefinition.markAsTouched();
        }
    }
    ngOnChanges(changes) {
        if (changes['appName'] && changes['appName'].currentValue !== changes['appName'].previousValue) {
            this.appName = changes['appName'].currentValue;
            if (this.appName || this.appName === '') {
                this.loadProcessDefinitions();
            }
        }
    }
    onKeyDown(event) {
        event.cancelBubble = true;
    }
    hasForm() {
        return this.processDefinitionCurrent && !!this.processDefinitionCurrent.formKey;
    }
    onFormLoaded(form) {
        this.isFormCloudLoaded = true;
        this.formCloud = form;
    }
    isProcessSelectionValid() {
        return this.processForm.valid && this.isProcessPayloadValid();
    }
    getMaxNameLength() {
        return this.maxNameLength > StartProcessCloudComponent.MAX_NAME_LENGTH ?
            StartProcessCloudComponent.MAX_NAME_LENGTH : this.maxNameLength;
    }
    generateProcessInstance() {
        const createPayload = new ProcessPayloadCloud({
            name: this.processInstanceName.value,
            processDefinitionKey: this.processPayloadCloud.processDefinitionKey
        });
        if (this.currentCreatedProcess && this.processPayloadCloud.processDefinitionKey === this.currentCreatedProcess.processDefinitionKey) {
            return this.startProcessCloudService.updateProcess(this.appName, this.currentCreatedProcess.id, createPayload);
        }
        else {
            return this.startProcessCloudService.createProcess(this.appName, createPayload);
        }
    }
    selectProcessDefinitionByProcesDefinitionName(processDefinitionName) {
        this.filteredProcesses = this.getProcessDefinitionListByNameOrKey(processDefinitionName);
        if (this.isProcessFormValid() &&
            this.filteredProcesses && this.filteredProcesses.length === 1) {
            this.setProcessDefinitionOnForm(this.filteredProcesses[0].name);
        }
    }
    setProcessDefinitionOnForm(selectedProcessDefinitionName) {
        this.processDefinitionCurrent = this.filteredProcesses.find((process) => process.name === selectedProcessDefinitionName || process.key === selectedProcessDefinitionName);
        this.isFormCloudLoaded = false;
        this.processPayloadCloud.processDefinitionKey = this.processDefinitionCurrent.key;
    }
    getProcessDefinitionListByNameOrKey(processDefinitionName) {
        return this.processDefinitionList.filter((processDefinitionCloud) => {
            return !processDefinitionName || this.getProcessDefinition(processDefinitionCloud, processDefinitionName);
        });
    }
    getProcessIfExists(processDefinition) {
        let matchedProcess = this.processDefinitionList.find((option) => this.getProcessDefinition(option, processDefinition));
        if (!matchedProcess) {
            matchedProcess = new ProcessDefinitionCloud();
        }
        return matchedProcess;
    }
    getProcessDefinitionByName(processDefinitionName) {
        const matchedProcess = processDefinitionName ? this.getProcessIfExists(processDefinitionName) : this.processDefinitionList[0];
        return matchedProcess;
    }
    selectDefaultProcessDefinition() {
        const selectedProcess = this.getProcessDefinitionByName(this.processDefinitionName);
        if (selectedProcess) {
            this.processDefinition.setValue(selectedProcess.name);
            this.processDefinitionSelectionChanged(selectedProcess);
        }
    }
    loadProcessDefinitions() {
        this.resetErrorMessage();
        this.startProcessCloudService.getProcessDefinitions(this.appName)
            .pipe(tap(() => this.processDefinitionLoaded = true), takeUntil(this.onDestroy$))
            .subscribe((processDefinitionRepresentations) => {
            this.processDefinitionList = processDefinitionRepresentations;
            if (processDefinitionRepresentations.length === 1) {
                this.selectDefaultProcessDefinition();
            }
            else if (this.processDefinitionName) {
                this.processDefinition.setValue(this.processDefinitionName);
            }
        }, () => {
            this.errorMessageId = 'ADF_CLOUD_PROCESS_LIST.ADF_CLOUD_START_PROCESS.ERROR.LOAD_PROCESS_DEFS';
        });
    }
    isValidName(name) {
        return !!name;
    }
    isProcessFormValid() {
        if (this.hasForm() && this.isFormCloudLoaded) {
            return this.formCloud.isValid || this.isLoading;
        }
        else {
            return this.processForm.valid || this.isLoading;
        }
    }
    isProcessPayloadValid() {
        return !!this.processPayloadCloud.processDefinitionKey;
    }
    getProcessDefinition(processDefinitionCloud, processDefinitionName) {
        return (this.isValidName(processDefinitionCloud.name) && processDefinitionCloud.name.toLowerCase().includes(processDefinitionName.toLowerCase())) ||
            (processDefinitionCloud.key && processDefinitionCloud.key.toLowerCase().includes(processDefinitionName.toLowerCase()));
    }
    isProcessDefinitionsEmpty() {
        return this.processDefinitionList.length === 0;
    }
    buildProcessCloudPayload() {
        this.processPayloadCloud.name = this.processInstanceName.value;
        if (this.variables) {
            this.processPayloadCloud.variables = this.variables;
        }
        if (this.hasForm()) {
            this.processPayloadCloud.variables = Object.assign(this.processPayloadCloud.variables, this.formCloud.values);
        }
    }
    startProcess() {
        this.isLoading = true;
        this.buildProcessCloudPayload();
        this.startProcessCloudService.startCreatedProcess(this.appName, this.currentCreatedProcess.id, this.processPayloadCloud)
            .subscribe((res) => {
            this.success.emit(res);
            this.isLoading = false;
        }, (err) => {
            this.errorMessageId = 'ADF_CLOUD_PROCESS_LIST.ADF_CLOUD_START_PROCESS.ERROR.START';
            this.error.emit(err);
            this.isLoading = false;
        });
    }
    cancelStartProcess() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.currentCreatedProcess) {
                yield this.startProcessCloudService.deleteProcess(this.appName, this.currentCreatedProcess.id);
            }
            this.currentCreatedProcess = null;
            this.cancel.emit();
        });
    }
    resetErrorMessage() {
        this.errorMessageId = '';
    }
    resetProcessDefinitionList() {
        this.processDefinition.setValue('');
        this.filteredProcesses = this.processDefinitionList;
    }
    displayProcessNameOnDropdown(process) {
        if (process) {
            let processName = process;
            if (typeof process !== 'string') {
                processName = process.name;
            }
            return processName;
        }
    }
    displayDropdown(event) {
        event.stopPropagation();
        if (!this.inputAutocomplete.panelOpen) {
            this.resetProcessDefinitionList();
            this.inputAutocomplete.openPanel();
        }
        else {
            this.inputAutocomplete.closePanel();
        }
    }
    processDefinitionNameValidator() {
        return (control) => {
            const processDefinitionFieldValue = control.value;
            let processDefinitionNameError = false;
            if (processDefinitionFieldValue) {
                const processDefinition = this.getProcessIfExists(processDefinitionFieldValue);
                if (!processDefinition.key) {
                    processDefinitionNameError = true;
                }
            }
            return processDefinitionNameError ? { 'invalid name': true } : null;
        };
    }
    getProcessDefinitionValue(process) {
        return !!process.name ? process.name : process.key;
    }
    get processInstanceName() {
        return this.processForm.get('processInstanceName');
    }
    get processDefinition() {
        return this.processForm.get('processDefinition');
    }
    onFormContentClicked(content) {
        this.formContentClicked.emit(content);
    }
    processDefinitionSelectionChanged(processDefinition) {
        if (processDefinition) {
            const processInstanceDetails = { processDefinitionName: processDefinition.name };
            const defaultProcessName = this.processNameCloudPipe.transform(this.name, processInstanceDetails);
            this.processInstanceName.setValue(defaultProcessName);
            this.processInstanceName.markAsDirty();
            this.processInstanceName.markAsTouched();
            this.processDefinitionSelection.emit(processDefinition);
        }
    }
    ngOnDestroy() {
        this.onDestroy$.next(true);
        this.onDestroy$.complete();
    }
}
StartProcessCloudComponent.ɵfac = function StartProcessCloudComponent_Factory(t) { return new (t || StartProcessCloudComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.StartProcessCloudService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.FormBuilder), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.ProcessNameCloudPipe)); };
StartProcessCloudComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: StartProcessCloudComponent, selectors: [["adf-cloud-start-process"]], viewQuery: function StartProcessCloudComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(MatAutocompleteTrigger, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.inputAutocomplete = _t.first);
    } }, hostBindings: function StartProcessCloudComponent_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("keydown", function StartProcessCloudComponent_keydown_HostBindingHandler($event) { return ctx.onKeyDown($event); });
    } }, inputs: { appName: "appName", maxNameLength: "maxNameLength", name: "name", showSelectProcessDropdown: "showSelectProcessDropdown", processDefinitionName: "processDefinitionName", variables: "variables", values: "values" }, outputs: { success: "success", cancel: "cancel", error: "error", formContentClicked: "formContentClicked", processDefinitionSelection: "processDefinitionSelection" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 11, vars: 6, consts: [[1, "adf-start-process"], [1, "adf-title"], ["id", "error-message", 4, "ngIf"], [4, "ngIf", "ngIfElse"], ["taskFormCloudButtons", ""], ["emptyProcessDefinitionsList", ""], ["id", "error-message"], [3, "formGroup"], [1, "adf-process-input-container", 3, "floatLabel"], ["matInput", "", "formControlName", "processDefinition", "id", "processDefinitionName", 3, "matAutocomplete"], ["inputAutocomplete", ""], [1, "adf-process-input-autocomplete"], ["id", "processDefinitionOptions", 3, "displayWith", "optionSelected"], ["auto", "matAutocomplete"], [3, "value", "click", 4, "ngFor", "ngForOf"], ["id", "adf-select-process-dropdown", "mat-icon-button", "", 3, "click", 4, "ngIf"], ["class", "adf-error-pb", 4, "ngIf"], ["matInput", "", "formControlName", "processInstanceName", "id", "processName"], ["id", "adf-start-process-required-error", 4, "ngIf"], ["id", "adf-start-process-maxlength-error", 4, "ngIf"], [4, "ngIf"], [3, "value", "click"], ["id", "adf-select-process-dropdown", "mat-icon-button", "", 3, "click"], [1, "adf-error-pb"], ["id", "adf-start-process-required-error"], ["id", "adf-start-process-maxlength-error"], [3, "appName", "appVersion", "data", "formId", "showSaveButton", "showCompleteButton", "showRefreshButton", "showValidationIcon", "showTitle", "formContentClicked", "formLoaded"], [3, "ngTemplateOutlet"], ["fxLayout", "row", "fxLayoutAlign", "end end"], ["mat-button", "", "id", "cancel_process", 3, "click"], ["color", "primary", "mat-button", "", "data-automation-id", "btn-start", "id", "button-start", 1, "btn-start", 3, "disabled", "click"], ["id", "no-process-message", 1, "error-message"]], template: function StartProcessCloudComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "mat-card", 0);
        ɵngcc0.ɵɵelementStart(1, "mat-card-title", 1);
        ɵngcc0.ɵɵtext(2);
        ɵngcc0.ɵɵpipe(3, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(4, "mat-card-content");
        ɵngcc0.ɵɵtemplate(5, StartProcessCloudComponent_mat_card_subtitle_5_Template, 3, 3, "mat-card-subtitle", 2);
        ɵngcc0.ɵɵtemplate(6, StartProcessCloudComponent_div_6_Template, 23, 19, "div", 3);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(7, StartProcessCloudComponent_ng_template_7_Template, 9, 11, "ng-template", null, 4, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵtemplate(9, StartProcessCloudComponent_ng_template_9_Template, 1, 1, "ng-template", null, 5, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        const _r4 = ɵngcc0.ɵɵreference(10);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵtextInterpolate1("", ɵngcc0.ɵɵpipeBind1(3, 4, "ADF_CLOUD_PROCESS_LIST.ADF_CLOUD_START_PROCESS.FORM.TITLE"), " ");
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngIf", ctx.errorMessageId);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.isProcessDefinitionsEmpty())("ngIfElse", _r4);
    } }, directives: [ɵngcc4.MatCard, ɵngcc4.MatCardTitle, ɵngcc4.MatCardContent, ɵngcc5.NgIf, ɵngcc4.MatCardSubtitle, ɵngcc2.ɵangular_packages_forms_forms_y, ɵngcc2.NgControlStatusGroup, ɵngcc2.FormGroupDirective, ɵngcc6.MatFormField, ɵngcc6.MatLabel, ɵngcc7.MatInput, ɵngcc2.DefaultValueAccessor, ɵngcc8.MatAutocompleteTrigger, ɵngcc2.NgControlStatus, ɵngcc2.FormControlName, ɵngcc8.MatAutocomplete, ɵngcc5.NgForOf, ɵngcc9.MatOption, ɵngcc10.MatButton, ɵngcc11.MatIcon, ɵngcc6.MatError, ɵngcc12.FormCloudComponent, ɵngcc13.FormCustomOutcomesComponent, ɵngcc5.NgTemplateOutlet, ɵngcc14.DefaultLayoutDirective, ɵngcc14.DefaultLayoutAlignDirective], pipes: [ɵngcc15.TranslatePipe, ɵngcc5.UpperCasePipe], styles: [".adf-start-process mat-form-field{width:100%}.adf-start-process .mat-form-field-label{color:var(--theme-colors-mat-grey-dark)}.adf-start-process mat-card-actions{text-align:right}.adf-start-process mat-card-actions .mat-button{text-transform:uppercase!important}.adf-title{padding-bottom:1.25em}.adf-process-input-container mat-form-field{width:100%}.adf-process-input-autocomplete{display:flex}.adf-process-input-autocomplete button{position:absolute;right:-14px;top:0}.adf-start-form-container .mat-card{box-shadow:none!important;padding:0!important}.adf-start-form-actions{text-align:right!important}"], encapsulation: 2 });
StartProcessCloudComponent.MAX_NAME_LENGTH = 255;
StartProcessCloudComponent.PROCESS_DEFINITION_DEBOUNCE = 300;
StartProcessCloudComponent.PROCESS_FORM_DEBOUNCE = 400;
StartProcessCloudComponent.ctorParameters = () => [
    { type: StartProcessCloudService },
    { type: FormBuilder },
    { type: ProcessNameCloudPipe }
];
StartProcessCloudComponent.propDecorators = {
    inputAutocomplete: [{ type: ViewChild, args: [MatAutocompleteTrigger,] }],
    appName: [{ type: Input }],
    maxNameLength: [{ type: Input }],
    name: [{ type: Input }],
    processDefinitionName: [{ type: Input }],
    variables: [{ type: Input }],
    values: [{ type: Input }],
    showSelectProcessDropdown: [{ type: Input }],
    success: [{ type: Output }],
    cancel: [{ type: Output }],
    error: [{ type: Output }],
    formContentClicked: [{ type: Output }],
    processDefinitionSelection: [{ type: Output }],
    onKeyDown: [{ type: HostListener, args: ['keydown', ['$event'],] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(StartProcessCloudComponent, [{
        type: Component,
        args: [{
                selector: 'adf-cloud-start-process',
                template: "<mat-card class=\"adf-start-process\">\n\n    <mat-card-title class=\"adf-title\">{{'ADF_CLOUD_PROCESS_LIST.ADF_CLOUD_START_PROCESS.FORM.TITLE' | translate}}\n    </mat-card-title>\n\n    <mat-card-content>\n        <mat-card-subtitle id=\"error-message\" *ngIf=\"errorMessageId\">\n            {{ errorMessageId | translate }}\n        </mat-card-subtitle>\n\n        <div *ngIf=\"!isProcessDefinitionsEmpty(); else emptyProcessDefinitionsList\">\n            <form [formGroup]=\"processForm\">\n                <mat-form-field class=\"adf-process-input-container\"  [floatLabel]=\"'always'\">\n                    <mat-label>{{ 'ADF_CLOUD_PROCESS_LIST.ADF_CLOUD_START_PROCESS.FORM.LABEL.TYPE' | translate }}</mat-label>\n                    <input\n                        #inputAutocomplete\n                        matInput\n                        formControlName=\"processDefinition\"\n                        [matAutocomplete]=\"auto\"\n                        id=\"processDefinitionName\">\n                    <div class=\"adf-process-input-autocomplete\">\n                        <mat-autocomplete #auto=\"matAutocomplete\" id=\"processDefinitionOptions\" [displayWith]=\"displayProcessNameOnDropdown\" (optionSelected)=\"setProcessDefinitionOnForm($event.option.value)\" >\n                            <mat-option *ngFor=\"let processDef of filteredProcesses\" [value]=\"getProcessDefinitionValue(processDef)\"\n                                        (click)=\"processDefinitionSelectionChanged(processDef)\">\n                                {{ getProcessDefinitionValue(processDef) }}\n                            </mat-option>\n                        </mat-autocomplete>\n                        <button id=\"adf-select-process-dropdown\" *ngIf=\"showSelectProcessDropdown\" mat-icon-button (click)=\"displayDropdown($event)\">\n                            <mat-icon>arrow_drop_down</mat-icon>\n                        </button>\n                    </div>\n                    <mat-error *ngIf=\"processDefinition.hasError('required')\" class=\"adf-error-pb\">\n                            {{ 'ADF_CLOUD_PROCESS_LIST.ADF_CLOUD_START_PROCESS.ERROR.PROCESS_DEFINITION_REQUIRED' | translate }}\n                        </mat-error>\n                </mat-form-field>\n\n                <mat-form-field class=\"adf-process-input-container\"  [floatLabel]=\"'always'\">\n                    <mat-label>{{ 'ADF_CLOUD_PROCESS_LIST.ADF_CLOUD_START_PROCESS.FORM.LABEL.NAME' | translate }}</mat-label>\n                    <input\n                        matInput\n                        formControlName=\"processInstanceName\"\n                        id=\"processName\">\n                    <mat-error id=\"adf-start-process-required-error\" *ngIf=\"processInstanceName.hasError('required')\">\n                        {{ 'ADF_CLOUD_PROCESS_LIST.ADF_CLOUD_START_PROCESS.ERROR.PROCESS_NAME_REQUIRED' | translate }}\n                    </mat-error>\n                    <mat-error id=\"adf-start-process-maxlength-error\" *ngIf=\"processInstanceName.hasError('maxlength')\">\n                        {{ 'ADF_CLOUD_PROCESS_LIST.ADF_CLOUD_START_PROCESS.ERROR.MAXIMUM_LENGTH' | translate : { characters : maxNameLength } }}\n                    </mat-error>\n                    <mat-error *ngIf=\"processInstanceName.hasError('pattern')\">\n                        {{ 'ADF_CLOUD_PROCESS_LIST.ADF_CLOUD_START_PROCESS.ERROR.SPACE_VALIDATOR' | translate }}\n                    </mat-error>\n                </mat-form-field>\n            </form>\n\n            <ng-container *ngIf=\"hasForm() else taskFormCloudButtons\">\n                <adf-cloud-form\n                    [appName]=\"appName\"\n                    [appVersion]=\"processDefinitionCurrent.appVersion\"\n                    [data]=\"values\"\n                    [formId]=\"processDefinitionCurrent.formKey\"\n                    [showSaveButton]=\"false\"\n                    [showCompleteButton]=\"false\"\n                    [showRefreshButton]=\"false\"\n                    [showValidationIcon]=\"false\"\n                    [showTitle]=\"false\"\n                    (formContentClicked)=\"onFormContentClicked($event)\"\n                    (formLoaded)=\"onFormLoaded($event)\">\n                    <adf-cloud-form-custom-outcomes>\n                        <ng-template [ngTemplateOutlet]=\"taskFormCloudButtons\">\n                        </ng-template>\n                    </adf-cloud-form-custom-outcomes>\n                </adf-cloud-form>\n            </ng-container>\n        </div>\n\n    </mat-card-content>\n\n    <ng-template #taskFormCloudButtons>\n        <div fxLayout=\"row\" fxLayoutAlign=\"end end\">\n            <button mat-button (click)=\"cancelStartProcess()\" id=\"cancel_process\">\n                {{ 'ADF_CLOUD_PROCESS_LIST.ADF_CLOUD_START_PROCESS.FORM.ACTION.CANCEL' | translate | uppercase}}\n            </button>\n            <button color=\"primary\" mat-button [disabled]=\"disableStartButton || !isProcessFormValid()\" (click)=\"startProcess()\"\n                data-automation-id=\"btn-start\" id=\"button-start\" class=\"btn-start\">\n                {{'ADF_CLOUD_PROCESS_LIST.ADF_CLOUD_START_PROCESS.FORM.ACTION.START' | translate | uppercase}}\n            </button>\n        </div>\n    </ng-template>\n\n    <ng-template #emptyProcessDefinitionsList>\n        <mat-card-content *ngIf=\"processDefinitionLoaded\">\n            <mat-card-subtitle class=\"error-message\" id=\"no-process-message\">\n                {{ 'ADF_CLOUD_PROCESS_LIST.ADF_CLOUD_START_PROCESS.NO_PROCESS_DEFINITIONS' | translate | uppercase}}\n            </mat-card-subtitle>\n        </mat-card-content>\n    </ng-template>\n</mat-card>\n",
                encapsulation: ViewEncapsulation.None,
                styles: [".adf-start-process mat-form-field{width:100%}.adf-start-process .mat-form-field-label{color:var(--theme-colors-mat-grey-dark)}.adf-start-process mat-card-actions{text-align:right}.adf-start-process mat-card-actions .mat-button{text-transform:uppercase!important}.adf-title{padding-bottom:1.25em}.adf-process-input-container mat-form-field{width:100%}.adf-process-input-autocomplete{display:flex}.adf-process-input-autocomplete button{position:absolute;right:-14px;top:0}.adf-start-form-container .mat-card{box-shadow:none!important;padding:0!important}.adf-start-form-actions{text-align:right!important}"]
            }]
    }], function () { return [{ type: ɵngcc1.StartProcessCloudService }, { type: ɵngcc2.FormBuilder }, { type: ɵngcc3.ProcessNameCloudPipe }]; }, { appName: [{
            type: Input
        }], maxNameLength: [{
            type: Input
        }], name: [{
            type: Input
        }], showSelectProcessDropdown: [{
            type: Input
        }], success: [{
            type: Output
        }], cancel: [{
            type: Output
        }], error: [{
            type: Output
        }], formContentClicked: [{
            type: Output
        }], processDefinitionSelection: [{
            type: Output
        }], onKeyDown: [{
            type: HostListener,
            args: ['keydown', ['$event']]
        }], inputAutocomplete: [{
            type: ViewChild,
            args: [MatAutocompleteTrigger]
        }], processDefinitionName: [{
            type: Input
        }], variables: [{
            type: Input
        }], values: [{
            type: Input
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,