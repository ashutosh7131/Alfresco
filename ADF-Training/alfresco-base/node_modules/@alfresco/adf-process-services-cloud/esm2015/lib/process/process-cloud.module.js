/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { NgModule } from '@angular/core';
import { ProcessFiltersCloudModule } from './process-filters/process-filters-cloud.module';
import { ProcessListCloudModule } from './process-list/process-list-cloud.module';
import { StartProcessCloudModule } from './start-process/start-process-cloud.module';
import { CoreModule } from '@alfresco/adf-core';
import { ProcessHeaderCloudModule } from './process-header/process-header-cloud.module';
import { ProcessDirectiveModule } from './directives/process-directive.module';
import { ProcessNameCloudPipe } from '../pipes/process-name-cloud.pipe';
import * as ɵngcc0 from '@angular/core';
export class ProcessCloudModule {
}
ProcessCloudModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: ProcessCloudModule });
ProcessCloudModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function ProcessCloudModule_Factory(t) { return new (t || ProcessCloudModule)(); }, providers: [ProcessNameCloudPipe], imports: [[
            CoreModule,
            ProcessFiltersCloudModule,
            ProcessListCloudModule,
            StartProcessCloudModule,
            ProcessHeaderCloudModule,
            ProcessDirectiveModule
        ], ProcessFiltersCloudModule,
        ProcessListCloudModule,
        StartProcessCloudModule,
        ProcessHeaderCloudModule,
        ProcessDirectiveModule] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ProcessCloudModule, { imports: function () { return [CoreModule,
        ProcessFiltersCloudModule,
        ProcessListCloudModule,
        StartProcessCloudModule,
        ProcessHeaderCloudModule,
        ProcessDirectiveModule]; }, exports: function () { return [ProcessFiltersCloudModule,
        ProcessListCloudModule,
        StartProcessCloudModule,
        ProcessHeaderCloudModule,
        ProcessDirectiveModule]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ProcessCloudModule, [{
        type: NgModule,
        args: [{
                imports: [
                    CoreModule,
                    ProcessFiltersCloudModule,
                    ProcessListCloudModule,
                    StartProcessCloudModule,
                    ProcessHeaderCloudModule,
                    ProcessDirectiveModule
                ],
                exports: [
                    ProcessFiltersCloudModule,
                    ProcessListCloudModule,
                    StartProcessCloudModule,
                    ProcessHeaderCloudModule,
                    ProcessDirectiveModule
                ],
                providers: [ProcessNameCloudPipe]
            }]
    }], null, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvY2Vzcy1jbG91ZC5tb2R1bGUuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL2hvbWUvdHJhdmlzL2J1aWxkL0FsZnJlc2NvL2FsZnJlc2NvLW5nMi1jb21wb25lbnRzL2xpYi9wcm9jZXNzLXNlcnZpY2VzLWNsb3VkL3NyYy9saWIvcHJvY2Vzcy9wcm9jZXNzLWNsb3VkLm1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBRUgsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN6QyxPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSxnREFBZ0QsQ0FBQztBQUMzRixPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSwwQ0FBMEMsQ0FBQztBQUNsRixPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSw0Q0FBNEMsQ0FBQztBQUNyRixPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDaEQsT0FBTyxFQUFFLHdCQUF3QixFQUFFLE1BQU0sOENBQThDLENBQUM7QUFDeEYsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sdUNBQXVDLENBQUM7QUFDL0UsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sa0NBQWtDLENBQUM7O0FBb0J4RSxNQUFNLE9BQU8sa0JBQWtCO0FBQUc7OENBbEJqQyxRQUFRLFNBQUM7QUFDTixPQUFPLEVBQUUsc0JBQ0wsVUFBVSxzQkFDVix5QkFBeUIsc0JBQ3pCLHNCQUFzQixzQkFDdEIsdUJBQXVCO09BQ3ZCO09BQXdCLHNCQUN4QjtZQUFzQixrQkFDekI7WUFDRCxPQUFPLEVBQUU7TUFDTCx5QkFBeUI7ZUFDekI7RUFBc0Isc0JBQ3RCO1NBQXVCLHNCQUN2Qjt1QkFBd0I7WUFDeEI7QUFBc0Isa0JBQ3pCO0FBQ0QsU0FBUyxFQUFFLENBQUMsb0JBQW9CLENBQUMsY0FDcEM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzswQkFDSTtBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFByb2Nlc3NGaWx0ZXJzQ2xvdWRNb2R1bGUgfSBmcm9tICcuL3Byb2Nlc3MtZmlsdGVycy9wcm9jZXNzLWZpbHRlcnMtY2xvdWQubW9kdWxlJztcbmltcG9ydCB7IFByb2Nlc3NMaXN0Q2xvdWRNb2R1bGUgfSBmcm9tICcuL3Byb2Nlc3MtbGlzdC9wcm9jZXNzLWxpc3QtY2xvdWQubW9kdWxlJztcbmltcG9ydCB7IFN0YXJ0UHJvY2Vzc0Nsb3VkTW9kdWxlIH0gZnJvbSAnLi9zdGFydC1wcm9jZXNzL3N0YXJ0LXByb2Nlc3MtY2xvdWQubW9kdWxlJztcbmltcG9ydCB7IENvcmVNb2R1bGUgfSBmcm9tICdAYWxmcmVzY28vYWRmLWNvcmUnO1xuaW1wb3J0IHsgUHJvY2Vzc0hlYWRlckNsb3VkTW9kdWxlIH0gZnJvbSAnLi9wcm9jZXNzLWhlYWRlci9wcm9jZXNzLWhlYWRlci1jbG91ZC5tb2R1bGUnO1xuaW1wb3J0IHsgUHJvY2Vzc0RpcmVjdGl2ZU1vZHVsZSB9IGZyb20gJy4vZGlyZWN0aXZlcy9wcm9jZXNzLWRpcmVjdGl2ZS5tb2R1bGUnO1xuaW1wb3J0IHsgUHJvY2Vzc05hbWVDbG91ZFBpcGUgfSBmcm9tICcuLi9waXBlcy9wcm9jZXNzLW5hbWUtY2xvdWQucGlwZSc7XG5cbkBOZ01vZHVsZSh7XG4gICAgaW1wb3J0czogW1xuICAgICAgICBDb3JlTW9kdWxlLFxuICAgICAgICBQcm9jZXNzRmlsdGVyc0Nsb3VkTW9kdWxlLFxuICAgICAgICBQcm9jZXNzTGlzdENsb3VkTW9kdWxlLFxuICAgICAgICBTdGFydFByb2Nlc3NDbG91ZE1vZHVsZSxcbiAgICAgICAgUHJvY2Vzc0hlYWRlckNsb3VkTW9kdWxlLFxuICAgICAgICBQcm9jZXNzRGlyZWN0aXZlTW9kdWxlXG4gICAgXSxcbiAgICBleHBvcnRzOiBbXG4gICAgICAgIFByb2Nlc3NGaWx0ZXJzQ2xvdWRNb2R1bGUsXG4gICAgICAgIFByb2Nlc3NMaXN0Q2xvdWRNb2R1bGUsXG4gICAgICAgIFN0YXJ0UHJvY2Vzc0Nsb3VkTW9kdWxlLFxuICAgICAgICBQcm9jZXNzSGVhZGVyQ2xvdWRNb2R1bGUsXG4gICAgICAgIFByb2Nlc3NEaXJlY3RpdmVNb2R1bGVcbiAgICBdLFxuICAgIHByb3ZpZGVyczogW1Byb2Nlc3NOYW1lQ2xvdWRQaXBlXVxufSlcbmV4cG9ydCBjbGFzcyBQcm9jZXNzQ2xvdWRNb2R1bGUgeyB9XG4iXX0=