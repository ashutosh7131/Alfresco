import { IdentityUserService } from '@alfresco/adf-core';
import { Injectable, Inject } from '@angular/core';
import { of, BehaviorSubject, throwError } from 'rxjs';
import { ProcessFilterCloudModel } from '../models/process-filter-cloud.model';
import { switchMap, map, catchError } from 'rxjs/operators';
import { PROCESS_FILTERS_SERVICE_TOKEN } from '../../../services/cloud-token.service';
import * as i0 from "@angular/core";
import * as i1 from "../../../services/cloud-token.service";
import * as i2 from "@alfresco/adf-core";
export class ProcessFilterCloudService {
    constructor(preferenceService, identityUserService) {
        this.preferenceService = preferenceService;
        this.identityUserService = identityUserService;
        this.filtersSubject = new BehaviorSubject([]);
        this.filters$ = this.filtersSubject.asObservable();
    }
    readQueryParams(obj) {
        const model = Object.assign({}, obj);
        if (obj.hasOwnProperty('appVersion') && obj['appVersion']) {
            if (typeof obj['appVersion'] === 'string') {
                model.appVersion = obj['appVersion'].split(',').map(str => parseInt(str, 10));
            }
        }
        if (obj.hasOwnProperty('lastModifiedFrom')) {
            model.lastModifiedFrom = new Date(parseInt(obj['lastModifiedFrom'], 10));
        }
        if (obj.hasOwnProperty('lastModifiedTo')) {
            model.lastModifiedTo = new Date(parseInt(obj['lastModifiedTo'], 10));
        }
        return model;
    }
    writeQueryParams(value, filterProperties, appName, id) {
        value = value || {};
        const result = {
            appName: appName || value['appName'],
            id: id || value['id']
        };
        for (const prop of filterProperties) {
            if (prop === 'appVersionMultiple') {
                const versions = value['appVersion'];
                if (Array.isArray(versions) && versions.length > 0) {
                    result['appVersion'] = versions.join(',');
                }
            }
            else if (prop === 'lastModified') {
                if (value['lastModifiedFrom']) {
                    result['lastModifiedFrom'] = value['lastModifiedFrom'].valueOf();
                }
                if (value['lastModifiedTo']) {
                    result['lastModifiedTo'] = value['lastModifiedTo'].valueOf();
                }
            }
            else if (value.hasOwnProperty(prop)) {
                result[prop] = value[prop];
            }
        }
        return result;
    }
    createDefaultFilters(appName) {
        const key = this.prepareKey(appName);
        this.preferenceService.getPreferences(appName, key).pipe(switchMap((response) => {
            const preferences = (response && response.list && response.list.entries) ? response.list.entries : [];
            if (!this.hasPreferences(preferences)) {
                return this.createProcessFilters(appName, key, this.defaultProcessFilters(appName));
            }
            else if (!this.hasProcessFilters(preferences, key)) {
                return this.createProcessFilters(appName, key, this.defaultProcessFilters(appName));
            }
            else {
                return of(this.findFiltersByKeyInPreferences(preferences, key));
            }
        }), catchError((err) => this.handleProcessError(err))).subscribe((filters) => {
            this.addFiltersToStream(filters);
        });
    }
    getProcessFilters(appName) {
        this.createDefaultFilters(appName);
        return this.filters$;
    }
    getFilterById(appName, id) {
        const key = this.prepareKey(appName);
        return this.getProcessFiltersByKey(appName, key).pipe(switchMap((filters) => {
            if (filters && filters.length === 0) {
                return this.createProcessFilters(appName, key, this.defaultProcessFilters(appName));
            }
            else {
                return of(filters);
            }
        }), map((filters) => {
            return filters.filter((filter) => {
                return filter.id === id;
            })[0];
        }), catchError((err) => this.handleProcessError(err)));
    }
    addFilter(newFilter) {
        const { appName, name } = newFilter;
        const key = this.prepareKey(appName);
        return this.getProcessFiltersByKey(appName, key).pipe(switchMap((filters) => {
            if (filters && filters.length === 0) {
                return this.createProcessFilters(appName, key, [newFilter]);
            }
            else {
                const index = filters.findIndex(filter => filter.name === name);
                if (index >= 0) {
                    filters.splice(index, 1);
                }
                filters.push(newFilter);
                return this.preferenceService.updatePreference(appName, key, filters);
            }
        }), map((filters) => {
            this.addFiltersToStream(filters);
            return filters;
        }), catchError((err) => this.handleProcessError(err)));
    }
    updateFilter(updatedFilter) {
        const key = this.prepareKey(updatedFilter.appName);
        return this.getProcessFiltersByKey(updatedFilter.appName, key).pipe(switchMap((filters) => {
            if (filters && filters.length === 0) {
                return this.createProcessFilters(updatedFilter.appName, key, [updatedFilter]);
            }
            else {
                const itemIndex = filters.findIndex((filter) => filter.id === updatedFilter.id);
                filters[itemIndex] = updatedFilter;
                return this.updateProcessFilters(updatedFilter.appName, key, filters);
            }
        }), map((updatedFilters) => {
            this.addFiltersToStream(updatedFilters);
            return updatedFilters;
        }), catchError((err) => this.handleProcessError(err)));
    }
    deleteFilter(deletedFilter) {
        const key = this.prepareKey(deletedFilter.appName);
        return this.getProcessFiltersByKey(deletedFilter.appName, key).pipe(switchMap(filters => {
            if (filters && filters.length > 0) {
                filters = filters.filter(filter => filter.id !== deletedFilter.id);
                return this.updateProcessFilters(deletedFilter.appName, key, filters);
            }
            else {
                return of([]);
            }
        }), map((filters) => {
            this.addFiltersToStream(filters);
            return filters;
        }), catchError((err) => this.handleProcessError(err)));
    }
    isDefaultFilter(filterName) {
        const defaultFilters = this.defaultProcessFilters();
        return defaultFilters.findIndex((filter) => filterName === filter.name) !== -1;
    }
    hasPreferences(preferences) {
        return preferences && preferences.length > 0;
    }
    hasProcessFilters(preferences, key) {
        const filters = preferences.find((filter) => { return filter.entry.key === key; });
        return (filters && filters.entry) ? JSON.parse(filters.entry.value).length > 0 : false;
    }
    createProcessFilters(appName, key, filters) {
        return this.preferenceService.createPreference(appName, key, filters);
    }
    getProcessFiltersByKey(appName, key) {
        return this.preferenceService.getPreferenceByKey(appName, key);
    }
    updateProcessFilters(appName, key, filters) {
        return this.preferenceService.updatePreference(appName, key, filters);
    }
    prepareKey(appName) {
        const user = this.identityUserService.getCurrentUserInfo();
        return `process-filters-${appName}-${user.username}`;
    }
    findFiltersByKeyInPreferences(preferences, key) {
        const result = preferences.find((filter) => { return filter.entry.key === key; });
        return result && result.entry ? JSON.parse(result.entry.value) : [];
    }
    addFiltersToStream(filters) {
        this.filtersSubject.next(filters);
    }
    handleProcessError(error) {
        return throwError(error || 'Server error');
    }
    defaultProcessFilters(appName) {
        return [
            new ProcessFilterCloudModel({
                name: 'ADF_CLOUD_PROCESS_FILTERS.RUNNING_PROCESSES',
                icon: 'inbox',
                key: 'running-processes',
                appName,
                sort: 'startDate',
                status: 'RUNNING',
                order: 'DESC'
            }),
            new ProcessFilterCloudModel({
                name: 'ADF_CLOUD_PROCESS_FILTERS.COMPLETED_PROCESSES',
                icon: 'done',
                key: 'completed-processes',
                appName,
                sort: 'startDate',
                status: 'COMPLETED',
                order: 'DESC'
            }),
            new ProcessFilterCloudModel({
                name: 'ADF_CLOUD_PROCESS_FILTERS.ALL_PROCESSES',
                key: 'all-processes',
                icon: 'adjust',
                appName,
                sort: 'startDate',
                status: '',
                order: 'DESC'
            })
        ];
    }
}
ProcessFilterCloudService.ɵprov = i0.ɵɵdefineInjectable({ factory: function ProcessFilterCloudService_Factory() { return new ProcessFilterCloudService(i0.ɵɵinject(i1.PROCESS_FILTERS_SERVICE_TOKEN), i0.ɵɵinject(i2.IdentityUserService)); }, token: ProcessFilterCloudService, providedIn: "root" });
ProcessFilterCloudService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
ProcessFilterCloudService.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [PROCESS_FILTERS_SERVICE_TOKEN,] }] },
    { type: IdentityUserService }
];
//# sourceMappingURL=data:application/json;base64,