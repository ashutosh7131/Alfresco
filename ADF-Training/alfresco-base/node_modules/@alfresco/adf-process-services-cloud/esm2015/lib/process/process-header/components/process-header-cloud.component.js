/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, Input, EventEmitter, ViewEncapsulation } from '@angular/core';
import { CardViewTextItemModel, TranslationService, AppConfigService, CardViewDateItemModel } from '@alfresco/adf-core';
import { ProcessCloudService } from '../../services/process-cloud.service';
import { takeUntil } from 'rxjs/operators';
import { Subject } from 'rxjs';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../../services/process-cloud.service';
import * as ɵngcc2 from '@alfresco/adf-core';
import * as ɵngcc3 from '@angular/common';
import * as ɵngcc4 from '@angular/material/card';

function ProcessHeaderCloudComponent_mat_card_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-card");
    ɵngcc0.ɵɵelementStart(1, "mat-card-content");
    ɵngcc0.ɵɵelement(2, "adf-card-view", 1);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("properties", ctx_r0.properties);
} }
export class ProcessHeaderCloudComponent {
    constructor(processCloudService, translationService, appConfig) {
        this.processCloudService = processCloudService;
        this.translationService = translationService;
        this.appConfig = appConfig;
        this.appName = '';
        this.loaded = new EventEmitter();
        this.onDestroy$ = new Subject();
    }
    ngOnInit() {
        this.dateFormat = this.appConfig.get('dateValues.defaultDateFormat');
        this.dateLocale = this.appConfig.get('dateValues.defaultDateLocale');
        this.processCloudService.dataChangesDetected
            .pipe(takeUntil(this.onDestroy$))
            .subscribe((processDetails) => this.onLoaded(processDetails));
    }
    ngOnChanges() {
        if ((this.appName || this.appName === '') && this.processInstanceId) {
            this.loadProcessInstanceDetails(this.appName, this.processInstanceId);
        }
    }
    loadProcessInstanceDetails(appName, processInstanceId) {
        this.processCloudService
            .getProcessInstanceById(appName, processInstanceId)
            .subscribe((result) => this.onLoaded(result));
    }
    onLoaded(processInstanceDetails) {
        this.processInstanceDetails = processInstanceDetails;
        this.refreshData();
        this.loaded.emit(processInstanceDetails);
    }
    refreshData() {
        if (this.processInstanceDetails) {
            const defaultProperties = this.initDefaultProperties();
            const filteredProperties = this.appConfig.get('adf-cloud-process-header.presets.properties');
            this.properties = defaultProperties.filter((cardItem) => this.isValidSelection(filteredProperties, cardItem));
        }
    }
    initDefaultProperties() {
        return [
            new CardViewTextItemModel({
                label: 'ADF_CLOUD_PROCESS_HEADER.PROPERTIES.ID',
                value: this.processInstanceDetails.id,
                key: 'id'
            }),
            new CardViewTextItemModel({
                label: 'ADF_CLOUD_PROCESS_HEADER.PROPERTIES.NAME',
                value: this.processInstanceDetails.name,
                key: 'name',
                default: this.translationService.instant('ADF_CLOUD_PROCESS_HEADER.PROPERTIES.NAME_DEFAULT')
            }),
            new CardViewTextItemModel({
                label: 'ADF_CLOUD_PROCESS_HEADER.PROPERTIES.STATUS',
                value: this.processInstanceDetails.status,
                key: 'status'
            }),
            new CardViewTextItemModel({
                label: 'ADF_CLOUD_PROCESS_HEADER.PROPERTIES.INITIATOR',
                value: this.processInstanceDetails.initiator,
                key: 'initiator'
            }),
            new CardViewDateItemModel({
                label: 'ADF_CLOUD_PROCESS_HEADER.PROPERTIES.START_DATE',
                value: this.processInstanceDetails.startDate,
                key: 'startDate',
                format: this.dateFormat,
                locale: this.dateLocale
            }),
            new CardViewDateItemModel({
                label: 'ADF_CLOUD_PROCESS_HEADER.PROPERTIES.LAST_MODIFIED',
                value: this.processInstanceDetails.lastModified,
                key: 'lastModified',
                format: this.dateFormat,
                locale: this.dateLocale
            }),
            new CardViewTextItemModel({
                label: 'ADF_CLOUD_PROCESS_HEADER.PROPERTIES.PARENT_ID',
                value: this.processInstanceDetails.parentId,
                key: 'parentId',
                default: this.translationService.instant('ADF_CLOUD_PROCESS_HEADER.PROPERTIES.NONE')
            }),
            new CardViewTextItemModel({
                label: 'ADF_CLOUD_PROCESS_HEADER.PROPERTIES.BUSINESS_KEY',
                value: this.processInstanceDetails.businessKey,
                key: 'businessKey',
                default: this.translationService.instant('ADF_CLOUD_PROCESS_HEADER.PROPERTIES.NONE')
            })
        ];
    }
    isValidSelection(filteredProperties, cardItem) {
        return filteredProperties ? filteredProperties.indexOf(cardItem.key) >= 0 : true;
    }
    ngOnDestroy() {
        this.onDestroy$.next(true);
        this.onDestroy$.complete();
    }
}
ProcessHeaderCloudComponent.ɵfac = function ProcessHeaderCloudComponent_Factory(t) { return new (t || ProcessHeaderCloudComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ProcessCloudService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.TranslationService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.AppConfigService)); };
ProcessHeaderCloudComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ProcessHeaderCloudComponent, selectors: [["adf-cloud-process-header"]], hostAttrs: [1, "adf-cloud-process-header"], inputs: { appName: "appName", processInstanceId: "processInstanceId" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 1, vars: 1, consts: [[4, "ngIf"], [3, "properties"]], template: function ProcessHeaderCloudComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, ProcessHeaderCloudComponent_mat_card_0_Template, 3, 1, "mat-card", 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngIf", ctx.processInstanceDetails);
    } }, directives: [ɵngcc3.NgIf, ɵngcc4.MatCard, ɵngcc4.MatCardContent, ɵngcc2.CardViewComponent], encapsulation: 2 });
ProcessHeaderCloudComponent.ctorParameters = () => [
    { type: ProcessCloudService },
    { type: TranslationService },
    { type: AppConfigService }
];
ProcessHeaderCloudComponent.propDecorators = {
    appName: [{ type: Input }],
    processInstanceId: [{ type: Input }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ProcessHeaderCloudComponent, [{
        type: Component,
        args: [{
                selector: 'adf-cloud-process-header',
                template: "<mat-card *ngIf=\"processInstanceDetails\">\n  <mat-card-content>\n    <adf-card-view [properties]=\"properties\"></adf-card-view>\n  </mat-card-content>\n</mat-card>",
                encapsulation: ViewEncapsulation.None,
                host: { class: 'adf-cloud-process-header' }
            }]
    }], function () { return [{ type: ɵngcc1.ProcessCloudService }, { type: ɵngcc2.TranslationService }, { type: ɵngcc2.AppConfigService }]; }, { appName: [{
            type: Input
        }], processInstanceId: [{
            type: Input
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,