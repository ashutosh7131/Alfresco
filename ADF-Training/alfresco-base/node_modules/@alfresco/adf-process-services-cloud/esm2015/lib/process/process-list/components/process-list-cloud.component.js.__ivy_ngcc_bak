/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, ViewEncapsulation, ContentChild, Output, EventEmitter, Input, ViewChild } from '@angular/core';
import { DataTableSchema, CustomEmptyContentTemplateDirective, AppConfigService, UserPreferencesService, UserPreferenceValues, CustomLoadingContentTemplateDirective, DataTableComponent } from '@alfresco/adf-core';
import { ProcessListCloudService } from '../services/process-list-cloud.service';
import { BehaviorSubject } from 'rxjs';
import { processCloudPresetsDefaultModel } from '../models/process-cloud-preset.model';
import { ProcessQueryCloudRequestModel } from '../models/process-cloud-query-request.model';
import { ProcessListCloudSortingModel } from '../models/process-list-sorting.model';
export class ProcessListCloudComponent extends DataTableSchema {
    constructor(processListCloudService, appConfigService, userPreferences) {
        super(appConfigService, ProcessListCloudComponent.PRESET_KEY, processCloudPresetsDefaultModel);
        this.processListCloudService = processListCloudService;
        this.userPreferences = userPreferences;
        this.appName = '';
        this.initiator = '';
        this.id = '';
        this.name = '';
        this.processDefinitionId = '';
        this.processDefinitionName = '';
        this.processDefinitionKey = '';
        this.status = '';
        this.businessKey = '';
        this.startFrom = '';
        this.startTo = '';
        this.completedFrom = '';
        this.completedTo = '';
        this.completedDate = '';
        this.suspendedFrom = '';
        this.suspendedTo = '';
        this.selectionMode = 'single';
        this.multiselect = false;
        this.showActions = false;
        this.actionsPosition = 'right';
        this.stickyHeader = false;
        this.showContextMenu = false;
        this.rowClick = new EventEmitter();
        this.rowsSelected = new EventEmitter();
        this.showRowContextMenu = new EventEmitter();
        this.showRowActionsMenu = new EventEmitter();
        this.executeRowAction = new EventEmitter();
        this.error = new EventEmitter();
        this.success = new EventEmitter();
        this.skipCount = 0;
        this.isLoading = true;
        this.rows = [];
        this.defaultSorting = { key: 'startDate', direction: 'desc' };
        this.size = userPreferences.paginationSize;
        this.userPreferences.select(UserPreferenceValues.PaginationSize).subscribe((pageSize) => {
            this.size = pageSize;
        });
        this.pagination = new BehaviorSubject({
            maxItems: this.size,
            skipCount: 0,
            totalItems: 0
        });
    }
    ngAfterContentInit() {
        this.createDatatableSchema();
    }
    ngOnChanges(changes) {
        if (this.isPropertyChanged(changes, 'sorting')) {
            this.formatSorting(changes['sorting'].currentValue);
        }
        if (this.isAnyPropertyChanged(changes)) {
            this.reload();
        }
    }
    getCurrentId() {
        return this.currentInstanceId;
    }
    reload() {
        this.requestNode = this.createRequestNode();
        if (this.requestNode.appName || this.requestNode.appName === '') {
            this.load(this.requestNode);
        }
        else {
            this.rows = [];
        }
    }
    load(requestNode) {
        this.isLoading = true;
        this.processListCloudService.getProcessByRequest(requestNode).subscribe((processes) => {
            this.rows = processes.list.entries;
            this.success.emit(processes);
            this.isLoading = false;
            this.pagination.next(processes.list.pagination);
        }, (error) => {
            this.error.emit(error);
            this.isLoading = false;
        });
    }
    isAnyPropertyChanged(changes) {
        for (const property in changes) {
            if (this.isPropertyChanged(changes, property)) {
                return true;
            }
        }
        return false;
    }
    isPropertyChanged(changes, property) {
        return changes.hasOwnProperty(property);
    }
    isListEmpty() {
        return !this.rows || this.rows.length === 0;
    }
    resetPagination() {
        this.skipCount = 0;
        this.size = this.userPreferences.paginationSize;
        this.pagination.next({
            skipCount: 0,
            maxItems: this.size
        });
    }
    updatePagination(pagination) {
        this.size = pagination.maxItems;
        this.skipCount = pagination.skipCount;
        this.pagination.next(pagination);
        this.reload();
    }
    onSortingChanged(event) {
        this.setSorting(event.detail);
        this.formatSorting(this.sorting);
        this.reload();
    }
    onRowClick(item) {
        this.currentInstanceId = item.value.getValue('id');
        this.rowClick.emit(this.currentInstanceId);
    }
    onRowSelect(event) {
        this.selectedInstances = [...event.detail.selection];
        this.rowsSelected.emit(this.selectedInstances);
    }
    onRowUnselect(event) {
        this.selectedInstances = [...event.detail.selection];
        this.rowsSelected.emit(this.selectedInstances);
    }
    onRowKeyUp(event) {
        if (event.detail.keyboardEvent.key === 'Enter') {
            event.preventDefault();
            this.currentInstanceId = event.detail.row.getValue('id');
            this.rowClick.emit(this.currentInstanceId);
        }
    }
    onShowRowActionsMenu(event) {
        this.showRowActionsMenu.emit(event);
    }
    onShowRowContextMenu(event) {
        this.showRowContextMenu.emit(event);
    }
    onExecuteRowAction(row) {
        this.executeRowAction.emit(row);
    }
    createRequestNode() {
        const requestNode = {
            appName: this.appName,
            appVersion: this.getAppVersions(),
            maxItems: this.size,
            skipCount: this.skipCount,
            initiator: this.initiator,
            id: this.id,
            name: this.name,
            processDefinitionId: this.processDefinitionId,
            processDefinitionName: this.processDefinitionName,
            processDefinitionKey: this.processDefinitionKey,
            status: this.status,
            businessKey: this.businessKey,
            lastModifiedFrom: this.lastModifiedFrom,
            lastModifiedTo: this.lastModifiedTo,
            startFrom: this.startFrom,
            startTo: this.startTo,
            completedFrom: this.completedFrom,
            completedTo: this.completedTo,
            suspendedFrom: this.suspendedFrom,
            suspendedTo: this.suspendedTo,
            completedDate: this.completedDate,
            sorting: this.sorting
        };
        return new ProcessQueryCloudRequestModel(requestNode);
    }
    getAppVersions() {
        return this.appVersion instanceof Array ? this.appVersion.join(',') : (this.appVersion ? String(this.appVersion) : '');
    }
    setSorting(sortDetail) {
        const sorting = sortDetail ? {
            orderBy: sortDetail.key,
            direction: sortDetail.direction.toUpperCase()
        } : Object.assign({}, this.defaultSorting);
        this.sorting = [new ProcessListCloudSortingModel(sorting)];
    }
    formatSorting(sorting) {
        this.formattedSorting = this.isValidSorting(sorting) ? [
            sorting[0].orderBy,
            sorting[0].direction.toLocaleLowerCase()
        ] : null;
    }
    isValidSorting(sorting) {
        return sorting.length && sorting[0].orderBy && sorting[0].direction;
    }
}
ProcessListCloudComponent.PRESET_KEY = 'adf-cloud-process-list.presets';
ProcessListCloudComponent.decorators = [
    { type: Component, args: [{
                selector: 'adf-cloud-process-list',
                template: "<adf-datatable #dataTable\n        [rows]=\"rows\"\n        [columns]=\"columns\"\n        [stickyHeader]=\"stickyHeader\"\n        [loading]=\"isLoading\"\n        [sorting]=\"formattedSorting\"\n        [selectionMode]=\"selectionMode\"\n        [multiselect]=\"multiselect\"\n        [actions]=\"showActions\"\n        [actionsPosition]=\"actionsPosition\"\n        [contextMenu]=\"showContextMenu\"\n        (showRowActionsMenu)=\"onShowRowActionsMenu($event)\"\n        (showRowContextMenu)=\"onShowRowContextMenu($event)\"\n        (executeRowAction)=\"onExecuteRowAction($event)\"\n        (rowClick)=\"onRowClick($any($event))\"\n        (row-select)=\"onRowSelect($any($event))\"\n        (row-unselect)=\"onRowUnselect($any($event))\"\n        (row-keyup)=\"onRowKeyUp($any($event))\"\n        (sorting-changed)=\"onSortingChanged($any($event))\">\n        <adf-loading-content-template>\n            <ng-template>\n                <mat-progress-spinner\n                    *ngIf=\"!customLoadingContent\"\n                    class=\"adf-cloud-process-list-loading-margin\"\n                    [color]=\"'primary'\"\n                    [mode]=\"'indeterminate'\">\n                </mat-progress-spinner>\n                <ng-content select=\"adf-custom-loading-content-template\"></ng-content>\n            </ng-template>\n        </adf-loading-content-template>\n        <adf-no-content-template>\n            <ng-template>\n                <adf-empty-content *ngIf=\"!emptyCustomContent\"\n                    icon=\"assessment\"\n                    [title]=\"'ADF_CLOUD_PROCESS_LIST.MESSAGES.TITLE' | translate\"\n                    [subtitle]=\"'ADF_CLOUD_PROCESS_LIST.MESSAGES.SUBTITLE'| translate\">\n                </adf-empty-content>\n                <ng-content select=\"adf-custom-empty-content-template\"></ng-content>\n            </ng-template>\n        </adf-no-content-template>\n</adf-datatable>\n",
                encapsulation: ViewEncapsulation.None,
                styles: [".adf-cloud-process-list-loading-margin{margin-left:calc(50% - 50px);margin-right:calc(50% - 50px)}.adf-no-content-message{font-size:16px;font-weight:700;opacity:.54;text-align:center}"]
            },] }
];
ProcessListCloudComponent.ctorParameters = () => [
    { type: ProcessListCloudService },
    { type: AppConfigService },
    { type: UserPreferencesService }
];
ProcessListCloudComponent.propDecorators = {
    dataTable: [{ type: ViewChild, args: [DataTableComponent,] }],
    emptyCustomContent: [{ type: ContentChild, args: [CustomEmptyContentTemplateDirective,] }],
    customLoadingContent: [{ type: ContentChild, args: [CustomLoadingContentTemplateDirective,] }],
    appName: [{ type: Input }],
    appVersion: [{ type: Input }],
    initiator: [{ type: Input }],
    id: [{ type: Input }],
    name: [{ type: Input }],
    processDefinitionId: [{ type: Input }],
    processDefinitionName: [{ type: Input }],
    processDefinitionKey: [{ type: Input }],
    status: [{ type: Input }],
    businessKey: [{ type: Input }],
    lastModifiedFrom: [{ type: Input }],
    lastModifiedTo: [{ type: Input }],
    startFrom: [{ type: Input }],
    startTo: [{ type: Input }],
    completedFrom: [{ type: Input }],
    completedTo: [{ type: Input }],
    completedDate: [{ type: Input }],
    suspendedFrom: [{ type: Input }],
    suspendedTo: [{ type: Input }],
    selectionMode: [{ type: Input }],
    multiselect: [{ type: Input }],
    sorting: [{ type: Input }],
    showActions: [{ type: Input }],
    actionsPosition: [{ type: Input }],
    stickyHeader: [{ type: Input }],
    showContextMenu: [{ type: Input }],
    rowClick: [{ type: Output }],
    rowsSelected: [{ type: Output }],
    showRowContextMenu: [{ type: Output }],
    showRowActionsMenu: [{ type: Output }],
    executeRowAction: [{ type: Output }],
    error: [{ type: Output }],
    success: [{ type: Output }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvY2Vzcy1saXN0LWNsb3VkLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIvaG9tZS90cmF2aXMvYnVpbGQvQWxmcmVzY28vYWxmcmVzY28tbmcyLWNvbXBvbmVudHMvbGliL3Byb2Nlc3Mtc2VydmljZXMtY2xvdWQvc3JjLyIsInNvdXJjZXMiOlsibGliL3Byb2Nlc3MvcHJvY2Vzcy1saXN0L2NvbXBvbmVudHMvcHJvY2Vzcy1saXN0LWNsb3VkLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7O0dBZUc7QUFFSCxPQUFPLEVBQUUsU0FBUyxFQUFFLGlCQUFpQixFQUErQixZQUFZLEVBQUUsTUFBTSxFQUFFLFlBQVksRUFBaUIsS0FBSyxFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMvSixPQUFPLEVBQUUsZUFBZSxFQUNmLG1DQUFtQyxFQUFFLGdCQUFnQixFQUNyRCxzQkFBc0IsRUFDdEIsb0JBQW9CLEVBQWdCLHFDQUFxQyxFQUFxQyxrQkFBa0IsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ3RLLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLHdDQUF3QyxDQUFDO0FBQ2pGLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDdkMsT0FBTyxFQUFFLCtCQUErQixFQUFFLE1BQU0sc0NBQXNDLENBQUM7QUFDdkYsT0FBTyxFQUFFLDZCQUE2QixFQUFFLE1BQU0sNkNBQTZDLENBQUM7QUFDNUYsT0FBTyxFQUFFLDRCQUE0QixFQUFFLE1BQU0sc0NBQXNDLENBQUM7QUFRcEYsTUFBTSxPQUFPLHlCQUEwQixTQUFRLGVBQWU7SUFtSzFELFlBQW9CLHVCQUFnRCxFQUN4RCxnQkFBa0MsRUFDMUIsZUFBdUM7UUFDdkQsS0FBSyxDQUFDLGdCQUFnQixFQUFFLHlCQUF5QixDQUFDLFVBQVUsRUFBRSwrQkFBK0IsQ0FBQyxDQUFDO1FBSC9FLDRCQUF1QixHQUF2Qix1QkFBdUIsQ0FB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LFNBQUMsa0JBQWtCO2lDQUc1QixZQUFZLFNBQUMsbUNBQW1DO21DQUdoRCxZQUFZLFNBQUMscUNBQXFDO3NCQUlsRCxLQUFLO3lCQUlMLEtBQUs7d0JBSUwsS0FBSztpQkFJTCxLQUFLO21CQUlMLEtBQUs7a0NBSUwsS0FBSztvQ0FJTCxLQUFLO21DQUlMLEtBQUs7cUJBSUwsS0FBSzswQkFJTCxLQUFLOytCQUlMLEtBQUs7NkJBSUwsS0FBSzt3QkFJTCxLQUFLO3NCQUlMLEtBQUs7NEJBSUwsS0FBSzswQkFJTCxLQUFLOzRCQUlMLEtBQUs7NEJBSUwsS0FBSzswQkFJTCxLQUFLOzRCQVFMLEtBQUs7MEJBSUwsS0FBSztzQkFPTCxLQUFLOzBCQUlMLEtBQUs7OEJBSUwsS0FBSzsyQkFJTCxLQUFLOzhCQUlMLEtBQUs7dUJBSUwsTUFBTTsyQkFJTixNQUFNO2lDQUlOLE1BQU07aUNBSU4sTUFBTTsrQkFJTixNQUFNO29CQUlOLE1BQU07c0JBSU4sTUFBTSIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IENvbXBvbmVudCwgVmlld0VuY2Fwc3VsYXRpb24sIE9uQ2hhbmdlcywgQWZ0ZXJDb250ZW50SW5pdCwgQ29udGVudENoaWxkLCBPdXRwdXQsIEV2ZW50RW1pdHRlciwgU2ltcGxlQ2hhbmdlcywgSW5wdXQsIFZpZXdDaGlsZCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRGF0YVRhYmxlU2NoZW1hLCBQYWdpbmF0ZWRDb21wb25lbnQsXG4gICAgICAgICBDdXN0b21FbXB0eUNvbnRlbnRUZW1wbGF0ZURpcmVjdGl2ZSwgQXBwQ29uZmlnU2VydmljZSxcbiAgICAgICAgIFVzZXJQcmVmZXJlbmNlc1NlcnZpY2UsIFBhZ2luYXRpb25Nb2RlbCxcbiAgICAgICAgIFVzZXJQcmVmZXJlbmNlVmFsdWVzLCBEYXRhUm93RXZlbnQsIEN1c3RvbUxvYWRpbmdDb250ZW50VGVtcGxhdGVEaXJlY3RpdmUsIERhdGFDZWxsRXZlbnQsIERhdGFSb3dBY3Rpb25FdmVudCwgRGF0YVRhYmxlQ29tcG9uZW50IH0gZnJvbSAnQGFsZnJlc2NvL2FkZi1jb3JlJztcbmltcG9ydCB7IFByb2Nlc3NMaXN0Q2xvdWRTZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZXMvcHJvY2Vzcy1saXN0LWNsb3VkLnNlcnZpY2UnO1xuaW1wb3J0IHsgQmVoYXZpb3JTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBwcm9jZXNzQ2xvdWRQcmVzZXRzRGVmYXVsdE1vZGVsIH0gZnJvbSAnLi4vbW9kZWxzL3Byb2Nlc3MtY2xvdWQtcHJlc2V0Lm1vZGVsJztcbmltcG9ydCB7IFByb2Nlc3NRdWVyeUNsb3VkUmVxdWVzdE1vZGVsIH0gZnJvbSAnLi4vbW9kZWxzL3Byb2Nlc3MtY2xvdWQtcXVlcnktcmVxdWVzdC5tb2RlbCc7XG5pbXBvcnQgeyBQcm9jZXNzTGlzdENsb3VkU29ydGluZ01vZGVsIH0gZnJvbSAnLi4vbW9kZWxzL3Byb2Nlc3MtbGlzdC1zb3J0aW5nLm1vZGVsJztcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICdhZGYtY2xvdWQtcHJvY2Vzcy1saXN0JyxcbiAgICB0ZW1wbGF0ZVVybDogJy4vcHJvY2Vzcy1saXN0LWNsb3VkLmNvbXBvbmVudC5odG1sJyxcbiAgICBzdHlsZVVybHM6IFsnLi9wcm9jZXNzLWxpc3QtY2xvdWQuY29tcG9uZW50LnNjc3MnXSxcbiAgICBlbmNhcHN1bGF0aW9uOiBWaWV3RW5jYXBzdWxhdGlvbi5Ob25lXG59KVxuZXhwb3J0IGNsYXNzIFByb2Nlc3NMaXN0Q2xvdWRDb21wb25lbnQgZXh0ZW5kcyBEYXRhVGFibGVTY2hlbWEgaW1wbGVtZW50cyBPbkNoYW5nZXMsIEFmdGVyQ29udGVudEluaXQsIFBhZ2luYXRlZENvbXBvbmVudCB7XG5cbiAgICBzdGF0aWMgUFJFU0VUX0tFWSA9ICdhZGYtY2xvdWQtcHJvY2Vzcy1saXN0LnByZXNldHMnO1xuXG4gICAgQFZpZXdDaGlsZChEYXRhVGFibGVDb21wb25lbnQpXG4gICAgZGF0YVRhYmxlOiBEYXRhVGFibGVDb21wb25lbnQ7XG5cbiAgICBAQ29udGVudENoaWxkKEN1c3RvbUVtcHR5Q29udGVudFRlbXBsYXRlRGlyZWN0aXZlKVxuICAgIGVtcHR5Q3VzdG9tQ29udGVudDogQ3VzdG9tRW1wdHlDb250ZW50VGVtcGxhdGVEaXJlY3RpdmU7XG5cbiAgICBAQ29udGVudENoaWxkKEN1c3RvbUxvYWRpbmdDb250ZW50VGVtcGxhdGVEaXJlY3RpdmUpXG4gICAgY3VzdG9tTG9hZGluZ0NvbnRlbnQ6IEN1c3RvbUxvYWRpbmdDb250ZW50VGVtcGxhdGVEaXJlY3RpdmU7XG5cbiAgICAvKiogVGhlIG5hbWUgb2YgdGhlIGFwcGxpY2F0aW9uLiAqL1xuICAgIEBJbnB1dCgpXG4gICAgYXBwTmFtZTogc3RyaW5nID0gJyc7XG5cbiAgICAvKiogVGhlIHZlcnNpb24gb2YgdGhlIGFwcGxpY2F0aW9uLiAqL1xuICAgIEBJbnB1dCgpXG4gICAgYXBwVmVyc2lvbjogbnVtYmVyIHwgbnVtYmVyW107XG5cbiAgICAvKiogTmFtZSBvZiB0aGUgaW5pdGlhdG9yIG9mIHRoZSBwcm9jZXNzLiAqL1xuICAgIEBJbnB1dCgpXG4gICAgaW5pdGlhdG9yOiBzdHJpbmcgPSAnJztcblxuICAgIC8qKiBGaWx0ZXIgdGhlIHByb2Nlc3NlcyB0byBkaXNwbGF5IG9ubHkgdGhlIG9uZXMgd2l0aCB0aGlzIElELiAqL1xuICAgIEBJbnB1dCgpXG4gICAgaWQ6IHN0cmluZyA9ICcnO1xuXG4gICAgLyoqIEZpbHRlciB0aGUgcHJvY2Vzc2VzIHRvIGRpc3BsYXkgb25seSB0aGUgb25lcyB3aXRoIHRoaXMgbmFtZS4gKi9cbiAgICBASW5wdXQoKVxuICAgIG5hbWU6IHN0cmluZyA9ICcnO1xuXG4gICAgLyoqIEZpbHRlciB0aGUgcHJvY2Vzc2VzIHRvIGRpc3BsYXkgb25seSB0aGUgb25lcyB3aXRoIHRoaXMgcHJvY2VzcyBkZWZpbml0aW9uIElELiAqL1xuICAgIEBJbnB1dCgpXG4gICAgcHJvY2Vzc0RlZmluaXRpb25JZDogc3RyaW5nID0gJyc7XG5cbiAgICAvKiogRmlsdGVyIHRoZSBwcm9jZXNzZXMgdG8gZGlzcGxheSBvbmx5IHRoZSBvbmVzIHdpdGggdGhpcyBwcm9jZXNzIGRlZmluaXRpb24gbmFtZS4gKi9cbiAgICBASW5wdXQoKVxuICAgIHByb2Nlc3NEZWZpbml0aW9uTmFtZTogc3RyaW5nID0gJyc7XG5cbiAgICAvKiogRmlsdGVyIHRoZSBwcm9jZXNzZXMgdG8gZGlzcGxheSBvbmx5IHRoZSBvbmVzIHdpdGggdGhpcyBwcm9jZXNzIGRlZmluaXRpb24ga2V5LiAqL1xuICAgIEBJbnB1dCgpXG4gICAgcHJvY2Vzc0RlZmluaXRpb25LZXk6IHN0cmluZyA9ICcnO1xuXG4gICAgLyoqIEZpbHRlciB0aGUgcHJvY2Vzc2VzIHRvIGRpc3BsYXkgb25seSB0aGUgb25lcyB3aXRoIHRoaXMgc3RhdHVzLiAqL1xuICAgIEBJbnB1dCgpXG4gICAgc3RhdHVzOiBzdHJpbmcgPSAnJztcblxuICAgIC8qKiBGaWx0ZXIgdGhlIHByb2Nlc3NlcyB0byBkaXNwbGF5IG9ubHkgdGhlIG9uZXMgd2l0aCB0aGlzIGJ1c2luZXNzS2V5IHZhbHVlLiAqL1xuICAgIEBJbnB1dCgpXG4gICAgYnVzaW5lc3NLZXk6IHN0cmluZyA9ICcnO1xuXG4gICAgLyoqIEZpbHRlciB0aGUgcHJvY2Vzc2VzLiBEaXNwbGF5IG9ubHkgcHJvY2VzcyB3aXRoIGxhc3RNb2RpZmllZFRvIGVxdWFsIHRvIHRoZSBzdXBwbGllZCBkYXRlLiAqL1xuICAgIEBJbnB1dCgpXG4gICAgbGFzdE1vZGlmaWVkRnJvbTogRGF0ZTtcblxuICAgIC8qKiBGaWx0ZXIgdGhlIHByb2Nlc3Nlcy4gRGlzcGxheSBvbmx5IHByb2Nlc3Mgd2l0aCBsYXN0TW9kaWZpZWRUbyBlcXVhbCB0byB0aGUgc3VwcGxpZWQgZGF0ZS4gKi9cbiAgICBASW5wdXQoKVxuICAgIGxhc3RNb2RpZmllZFRvOiBEYXRlO1xuXG4gICAgLyoqIEZpbHRlciB0aGUgcHJvY2Vzc2VzLiBEaXNwbGF5IG9ubHkgcHJvY2VzcyB3aXRoIHN0YXJ0ZWREYXRlIGdyZWF0ZXIgdGhlbiB0aGUgc3VwcGxpZWQgZGF0ZS4gKi9cbiAgICBASW5wdXQoKVxuICAgIHN0YXJ0RnJvbTogc3RyaW5nID0gJyc7XG5cbiAgICAvKiogRmlsdGVyIHRoZSBwcm9jZXNzZXMuIERpc3BsYXkgb25seSBwcm9jZXNzIHdpdGggc3RhcnRlZERhdGUgbGVzcyB0aGFuIHRoZSBzdXBwbGllZCBkYXRlLiAqL1xuICAgIEBJbnB1dCgpXG4gICAgc3RhcnRUbzogc3RyaW5nID0gJyc7XG5cbiAgICAvKiogRmlsdGVyIHRoZSBwcm9jZXNzZXMuIERpc3BsYXkgb25seSBwcm9jZXNzIHdpdGggY29tcGxldGVkRnJvbSBlcXVhbCB0byB0aGUgc3VwcGxpZWQgZGF0ZS4gKi9cbiAgICBASW5wdXQoKVxuICAgIGNvbXBsZXRlZEZyb206IHN0cmluZyA9ICcnO1xuXG4gICAgLyoqIEZpbHRlciB0aGUgcHJvY2Vzc2VzLiBEaXNwbGF5IG9ubHkgcHJvY2VzcyB3aXRoIGNvbXBsZXRlZFRvIGVxdWFsIHRvIHRoZSBzdXBwbGllZCBkYXRlLiAqL1xuICAgIEBJbnB1dCgpXG4gICAgY29tcGxldGVkVG86IHN0cmluZyA9ICcnO1xuXG4gICAgLyoqIEZpbHRlciB0aGUgcHJvY2Vzc2VzLiBEaXNwbGF5IG9ubHkgcHJvY2VzcyB3aXRoIGNvbXBsZXRlZERhdGUgZXF1YWwgdG8gdGhlIHN1cHBsaWVkIGRhdGUuICovXG4gICAgQElucHV0KClcbiAgICBjb21wbGV0ZWREYXRlOiBzdHJpbmcgPSAnJztcblxuICAgIC8qKiBGaWx0ZXIgdGhlIHByb2Nlc3Nlcy4gRGlzcGxheSBvbmx5IHByb2Nlc3Mgd2l0aCBzdXNwZW5kZWRGcm9tIGVxdWFsIHRvIHRoZSBzdXBwbGllZCBkYXRlLiAqL1xuICAgIEBJbnB1dCgpXG4gICAgc3VzcGVuZGVkRnJvbTogc3RyaW5nID0gJyc7XG5cbiAgICAvKiogRmlsdGVyIHRoZSBwcm9jZXNzZXMuIERpc3BsYXkgb25seSBwcm9jZXNzIHdpdGggc3VzcGVuZGVkVG8gZXF1YWwgdG8gdGhlIHN1cHBsaWVkIGRhdGUuICovXG4gICAgQElucHV0KClcbiAgICBzdXNwZW5kZWRUbzogc3RyaW5nID0gJyc7XG5cbiAgICAvKipcbiAgICAgKiBSb3cgc2VsZWN0aW9uIG1vZGUuIENhbiBiZSBcIm5vbmVcIiwgXCJzaW5nbGVcIiBvciBcIm11bHRpcGxlXCIuXG4gICAgICogRm9yIG11bHRpcGxlIG1vZGUsIHlvdSBjYW4gdXNlIENtZCAobWFjT1MpIG9yIEN0cmwgKFdpbikgbW9kaWZpZXJcbiAgICAgKiBrZXkgdG8gdG9nZ2xlIHNlbGVjdGlvbiBmb3IgbXVsdGlwbGUgcm93cy5cbiAgICAgKi9cbiAgICBASW5wdXQoKVxuICAgIHNlbGVjdGlvbk1vZGU6IHN0cmluZyA9ICdzaW5nbGUnOyAvLyBub25lfHNpbmdsZXxtdWx0aXBsZVxuXG4gICAgLyoqIFRvZ2dsZXMgbXVsdGlwbGUgcm93IHNlbGVjdGlvbiBhbmQgcmVuZGVycyBjaGVja2JveGVzIGF0IHRoZSBiZWdpbm5pbmcgb2YgZWFjaCByb3cgKi9cbiAgICBASW5wdXQoKVxuICAgIG11bHRpc2VsZWN0OiBib29sZWFuID0gZmFsc2U7XG5cbiAgICAvKipcbiAgICAgKiBBcnJheSBvZiBvYmplY3RzIHNwZWNpZnlpbmcgdGhlIHNvcnQgb3JkZXIgYW5kIGRpcmVjdGlvbiBmb3IgdGhlXG4gICAgICogbGlzdC4gVGhlIHNvcnQgcGFyYW1ldGVycyBhcmUgZm9yIEJFIHNvcnRpbmcuXG4gICAgICovXG4gICAgQElucHV0KClcbiAgICBzb3J0aW5nOiBQcm9jZXNzTGlzdENsb3VkU29ydGluZ01vZGVsW107XG5cbiAgICAvKiogVG9nZ2xlcyB0aGUgZGF0YSBhY3Rpb25zIGNvbHVtbi4gKi9cbiAgICBASW5wdXQoKVxuICAgIHNob3dBY3Rpb25zOiBib29sZWFuID0gZmFsc2U7XG5cbiAgICAvKiogUG9zaXRpb24gb2YgdGhlIGFjdGlvbnMgZHJvcGRvd24gbWVudS4gQ2FuIGJlIFwibGVmdFwiIG9yIFwicmlnaHRcIi4gKi9cbiAgICBASW5wdXQoKVxuICAgIGFjdGlvbnNQb3NpdGlvbjogc3RyaW5nID0gJ3JpZ2h0JzsgLy8gbGVmdHxyaWdodFxuXG4gICAgLyoqIFRvZ2dsZXMgdGhlIHN0aWNreSBoZWFkZXIgbW9kZS4gKi9cbiAgICBASW5wdXQoKVxuICAgIHN0aWNreUhlYWRlcjogYm9vbGVhbiA9IGZhbHNlO1xuXG4gICAgLyoqIFRvZ2dsZXMgY3VzdG9tIGNvbnRleHQgbWVudSBmb3IgdGhlIGNvbXBvbmVudC4gKi9cbiAgICBASW5wdXQoKVxuICAgIHNob3dDb250ZXh0TWVudTogYm9vbGVhbiA9IGZhbHNlO1xuXG4gICAgLyoqIEVtaXR0ZWQgd2hlbiBhIHJvdyBpbiB0aGUgcHJvY2VzcyBsaXN0IGlzIGNsaWNrZWQuICovXG4gICAgQE91dHB1dCgpXG4gICAgcm93Q2xpY2s6IEV2ZW50RW1pdHRlcjxzdHJpbmc+ID0gbmV3IEV2ZW50RW1pdHRlcjxzdHJpbmc+KCk7XG5cbiAgICAvKiogRW1pdHRlZCB3aGVuIHJvd3MgYXJlIHNlbGVjdGVkL3Vuc2VsZWN0ZWQuICovXG4gICAgQE91dHB1dCgpXG4gICAgcm93c1NlbGVjdGVkOiBFdmVudEVtaXR0ZXI8YW55W10+ID0gbmV3IEV2ZW50RW1pdHRlcjxhbnlbXT4oKTtcblxuICAgIC8qKiBFbWl0dGVkIGJlZm9yZSB0aGUgY29udGV4dCBtZW51IGlzIGRpc3BsYXllZCBmb3IgYSByb3cuICovXG4gICAgQE91dHB1dCgpXG4gICAgc2hvd1Jvd0NvbnRleHRNZW51ID0gbmV3IEV2ZW50RW1pdHRlcjxEYXRhQ2VsbEV2ZW50PigpO1xuXG4gICAgLyoqIEVtaXR0ZWQgYmVmb3JlIHRoZSBhY3Rpb25zIG1lbnUgaXMgZGlzcGxheWVkIGZvciBhIHJvdy4gKi9cbiAgICBAT3V0cHV0KClcbiAgICBzaG93Um93QWN0aW9uc01lbnUgPSBuZXcgRXZlbnRFbWl0dGVyPERhdGFDZWxsRXZlbnQ+KCk7XG5cbiAgICAvKiogRW1pdHRlZCB3aGVuIHRoZSB1c2VyIGV4ZWN1dGVzIGEgcm93IGFjdGlvbi4gKi9cbiAgICBAT3V0cHV0KClcbiAgICBleGVjdXRlUm93QWN0aW9uID0gbmV3IEV2ZW50RW1pdHRlcjxEYXRhUm93QWN0aW9uRXZlbnQ+KCk7XG5cbiAgICAvKiogRW1pdHRlZCB3aGVuIGFuIGVycm9yIG9jY3VycyB3aGlsZSBsb2FkaW5nIHRoZSBsaXN0IG9mIHByb2Nlc3MgaW5zdGFuY2VzIGZyb20gdGhlIHNlcnZlci4gKi9cbiAgICBAT3V0cHV0KClcbiAgICBlcnJvcjogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcblxuICAgIC8qKiBFbWl0dGVkIHdoZW4gdGhlIGxpc3Qgb2YgcHJvY2VzcyBpbnN0YW5jZXMgaGFzIGJlZW4gbG9hZGVkIHN1Y2Nlc3NmdWxseSBmcm9tIHRoZSBzZXJ2ZXIuICovXG4gICAgQE91dHB1dCgpXG4gICAgc3VjY2VzczogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcblxuICAgIHBhZ2luYXRpb246IEJlaGF2aW9yU3ViamVjdDxQYWdpbmF0aW9uTW9kZWw+O1xuICAgIHNpemU6IG51bWJlcjtcbiAgICBza2lwQ291bnQ6IG51bWJlciA9IDA7XG4gICAgY3VycmVudEluc3RhbmNlSWQ6IHN0cmluZztcbiAgICBzZWxlY3RlZEluc3RhbmNlczogYW55W107XG4gICAgaXNMb2FkaW5nID0gdHJ1ZTtcbiAgICByb3dzOiBhbnlbXSA9IFtdO1xuICAgIGZvcm1hdHRlZFNvcnRpbmc6IGFueVtdO1xuICAgIHJlcXVlc3ROb2RlOiBQcm9jZXNzUXVlcnlDbG91ZFJlcXVlc3RNb2RlbDtcbiAgICBwcml2YXRlIGRlZmF1bHRTb3J0aW5nID0geyBrZXk6ICdzdGFydERhdGUnLCBkaXJlY3Rpb246ICdkZXNjJyB9O1xuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBwcm9jZXNzTGlzdENsb3VkU2VydmljZTogUHJvY2Vzc0xpc3RDbG91ZFNlcnZpY2UsXG4gICAgICAgICAgICAgICAgYXBwQ29uZmlnU2VydmljZTogQXBwQ29uZmlnU2VydmljZSxcbiAgICAgICAgICAgICAgICBwcml2YXRlIHVzZXJQcmVmZXJlbmNlczogVXNlclByZWZlcmVuY2VzU2VydmljZSkge1xuICAgICAgICBzdXBlcihhcHBDb25maWdTZXJ2aWNlLCBQcm9jZXNzTGlzdENsb3VkQ29tcG9uZW50LlBSRVNFVF9LRVksIHByb2Nlc3NDbG91ZFByZXNldHNEZWZhdWx0TW9kZWwpO1xuICAgICAgICB0aGlzLnNpemUgPSB1c2VyUHJlZmVyZW5jZXMucGFnaW5hdGlvblNpemU7XG4gICAgICAgIHRoaXMudXNlclByZWZlcmVuY2VzLnNlbGVjdChVc2VyUHJlZmVyZW5jZVZhbHVlcy5QYWdpbmF0aW9uU2l6ZSkuc3Vic2NyaWJlKChwYWdlU2l6ZSkgPT4ge1xuICAgICAgICAgICAgdGhpcy5zaXplID0gcGFnZVNpemU7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnBhZ2luYXRpb24gPSBuZXcgQmVoYXZpb3JTdWJqZWN0PFBhZ2luYXRpb25Nb2RlbD4oPFBhZ2luYXRpb25Nb2RlbD4ge1xuICAgICAgICAgICAgbWF4SXRlbXM6IHRoaXMuc2l6ZSxcbiAgICAgICAgICAgIHNraXBDb3VudDogMCxcbiAgICAgICAgICAgIHRvdGFsSXRlbXM6IDBcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgbmdBZnRlckNvbnRlbnRJbml0KCkge1xuICAgICAgICB0aGlzLmNyZWF0ZURhdGF0YWJsZVNjaGVtYSgpO1xuICAgIH1cblxuICAgIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNQcm9wZXJ0eUNoYW5nZWQoY2hhbmdlcywgJ3NvcnRpbmcnKSkge1xuICAgICAgICAgICAgdGhpcy5mb3JtYXRTb3J0aW5nKGNoYW5nZXNbJ3NvcnRpbmcnXS5jdXJyZW50VmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmlzQW55UHJvcGVydHlDaGFuZ2VkKGNoYW5nZXMpKSB7XG4gICAgICAgICAgICB0aGlzLnJlbG9hZCgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZ2V0Q3VycmVudElkKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiB0aGlzLmN1cnJlbnRJbnN0YW5jZUlkO1xuICAgIH1cblxuICAgIHJlbG9hZCgpIHtcbiAgICAgICAgdGhpcy5yZXF1ZXN0Tm9kZSA9IHRoaXMuY3JlYXRlUmVxdWVzdE5vZGUoKTtcbiAgICAgICAgaWYgKHRoaXMucmVxdWVzdE5vZGUuYXBwTmFtZSB8fCB0aGlzLnJlcXVlc3ROb2RlLmFwcE5hbWUgPT09ICcnKSB7XG4gICAgICAgICAgICB0aGlzLmxvYWQodGhpcy5yZXF1ZXN0Tm9kZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnJvd3MgPSBbXTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgbG9hZChyZXF1ZXN0Tm9kZTogUHJvY2Vzc1F1ZXJ5Q2xvdWRSZXF1ZXN0TW9kZWwpIHtcbiAgICAgICAgdGhpcy5pc0xvYWRpbmcgPSB0cnVlO1xuICAgICAgICB0aGlzLnByb2Nlc3NMaXN0Q2xvdWRTZXJ2aWNlLmdldFByb2Nlc3NCeVJlcXVlc3QocmVxdWVzdE5vZGUpLnN1YnNjcmliZShcbiAgICAgICAgICAgIChwcm9jZXNzZXMpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLnJvd3MgPSBwcm9jZXNzZXMubGlzdC5lbnRyaWVzO1xuICAgICAgICAgICAgICAgIHRoaXMuc3VjY2Vzcy5lbWl0KHByb2Nlc3Nlcyk7XG4gICAgICAgICAgICAgICAgdGhpcy5pc0xvYWRpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB0aGlzLnBhZ2luYXRpb24ubmV4dChwcm9jZXNzZXMubGlzdC5wYWdpbmF0aW9uKTtcbiAgICAgICAgICAgIH0sIChlcnJvcikgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuZXJyb3IuZW1pdChlcnJvcik7XG4gICAgICAgICAgICAgICAgdGhpcy5pc0xvYWRpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgIH0pO1xuICAgIH1cblxuICAgIHByaXZhdGUgaXNBbnlQcm9wZXJ0eUNoYW5nZWQoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IGJvb2xlYW4ge1xuICAgICAgICBmb3IgKGNvbnN0IHByb3BlcnR5IGluIGNoYW5nZXMpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmlzUHJvcGVydHlDaGFuZ2VkKGNoYW5nZXMsIHByb3BlcnR5KSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGlzUHJvcGVydHlDaGFuZ2VkKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMsIHByb3BlcnR5OiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIGNoYW5nZXMuaGFzT3duUHJvcGVydHkocHJvcGVydHkpO1xuICAgIH1cblxuICAgIGlzTGlzdEVtcHR5KCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gIXRoaXMucm93cyB8fCB0aGlzLnJvd3MubGVuZ3RoID09PSAwO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlc2V0cyB0aGUgcGFnaW5hdGlvbiB2YWx1ZXNcbiAgICAgKi9cbiAgICByZXNldFBhZ2luYXRpb24oKSB7XG4gICAgICAgIHRoaXMuc2tpcENvdW50ID0gMDtcbiAgICAgICAgdGhpcy5zaXplID0gdGhpcy51c2VyUHJlZmVyZW5jZXMucGFnaW5hdGlvblNpemU7XG4gICAgICAgIHRoaXMucGFnaW5hdGlvbi5uZXh0KHtcbiAgICAgICAgICAgIHNraXBDb3VudDogMCxcbiAgICAgICAgICAgIG1heEl0ZW1zOiB0aGlzLnNpemVcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVzZXRzIHRoZSBwYWdpbmF0aW9uIHZhbHVlcyBhbmRcbiAgICAgKiBSZWxvYWRzIHRoZSBwcm9jZXNzIGxpc3RcbiAgICAgKiBAcGFyYW0gcGFnaW5hdGlvbiBQYWdpbmF0aW9uIHZhbHVlcyB0byBiZSBzZXRcbiAgICAgKi9cbiAgICB1cGRhdGVQYWdpbmF0aW9uKHBhZ2luYXRpb246IFBhZ2luYXRpb25Nb2RlbCkge1xuICAgICAgICB0aGlzLnNpemUgPSBwYWdpbmF0aW9uLm1heEl0ZW1zO1xuICAgICAgICB0aGlzLnNraXBDb3VudCA9IHBhZ2luYXRpb24uc2tpcENvdW50O1xuICAgICAgICB0aGlzLnBhZ2luYXRpb24ubmV4dChwYWdpbmF0aW9uKTtcbiAgICAgICAgdGhpcy5yZWxvYWQoKTtcbiAgICB9XG5cbiAgICBvblNvcnRpbmdDaGFuZ2VkKGV2ZW50OiBDdXN0b21FdmVudCkge1xuICAgICAgICB0aGlzLnNldFNvcnRpbmcoZXZlbnQuZGV0YWlsKTtcbiAgICAgICAgdGhpcy5mb3JtYXRTb3J0aW5nKHRoaXMuc29ydGluZyk7XG4gICAgICAgIHRoaXMucmVsb2FkKCk7XG4gICAgfVxuXG4gICAgb25Sb3dDbGljayhpdGVtOiBEYXRhUm93RXZlbnQpIHtcbiAgICAgICAgdGhpcy5jdXJyZW50SW5zdGFuY2VJZCA9IGl0ZW0udmFsdWUuZ2V0VmFsdWUoJ2lkJyk7XG4gICAgICAgIHRoaXMucm93Q2xpY2suZW1pdCh0aGlzLmN1cnJlbnRJbnN0YW5jZUlkKTtcbiAgICB9XG5cbiAgICBvblJvd1NlbGVjdChldmVudDogQ3VzdG9tRXZlbnQpIHtcbiAgICAgICAgdGhpcy5zZWxlY3RlZEluc3RhbmNlcyA9IFsuLi5ldmVudC5kZXRhaWwuc2VsZWN0aW9uXTtcbiAgICAgICAgdGhpcy5yb3dzU2VsZWN0ZWQuZW1pdCh0aGlzLnNlbGVjdGVkSW5zdGFuY2VzKTtcbiAgICB9XG5cbiAgICBvblJvd1Vuc2VsZWN0KGV2ZW50OiBDdXN0b21FdmVudCkge1xuICAgICAgICB0aGlzLnNlbGVjdGVkSW5zdGFuY2VzID0gWy4uLmV2ZW50LmRldGFpbC5zZWxlY3Rpb25dO1xuICAgICAgICB0aGlzLnJvd3NTZWxlY3RlZC5lbWl0KHRoaXMuc2VsZWN0ZWRJbnN0YW5jZXMpO1xuICAgIH1cblxuICAgIG9uUm93S2V5VXAoZXZlbnQ6IEN1c3RvbUV2ZW50KSB7XG4gICAgICAgIGlmIChldmVudC5kZXRhaWwua2V5Ym9hcmRFdmVudC5rZXkgPT09ICdFbnRlcicpIHtcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRJbnN0YW5jZUlkID0gZXZlbnQuZGV0YWlsLnJvdy5nZXRWYWx1ZSgnaWQnKTtcbiAgICAgICAgICAgIHRoaXMucm93Q2xpY2suZW1pdCh0aGlzLmN1cnJlbnRJbnN0YW5jZUlkKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIG9uU2hvd1Jvd0FjdGlvbnNNZW51KGV2ZW50OiBEYXRhQ2VsbEV2ZW50KSB7XG4gICAgICAgIHRoaXMuc2hvd1Jvd0FjdGlvbnNNZW51LmVtaXQoZXZlbnQpO1xuICAgIH1cblxuICAgIG9uU2hvd1Jvd0NvbnRleHRNZW51KGV2ZW50OiBEYXRhQ2VsbEV2ZW50KSB7XG4gICAgICAgIHRoaXMuc2hvd1Jvd0NvbnRleHRNZW51LmVtaXQoZXZlbnQpO1xuICAgIH1cblxuICAgIG9uRXhlY3V0ZVJvd0FjdGlvbihyb3c6IERhdGFSb3dBY3Rpb25FdmVudCkge1xuICAgICAgICB0aGlzLmV4ZWN1dGVSb3dBY3Rpb24uZW1pdChyb3cpO1xuICAgIH1cblxuICAgIHByaXZhdGUgY3JlYXRlUmVxdWVzdE5vZGUoKTogUHJvY2Vzc1F1ZXJ5Q2xvdWRSZXF1ZXN0TW9kZWwge1xuICAgICAgICBjb25zdCByZXF1ZXN0Tm9kZSA9IHtcbiAgICAgICAgICAgIGFwcE5hbWU6IHRoaXMuYXBwTmFtZSxcbiAgICAgICAgICAgIGFwcFZlcnNpb246IHRoaXMuZ2V0QXBwVmVyc2lvbnMoKSxcbiAgICAgICAgICAgIG1heEl0ZW1zOiB0aGlzLnNpemUsXG4gICAgICAgICAgICBza2lwQ291bnQ6IHRoaXMuc2tpcENvdW50LFxuICAgICAgICAgICAgaW5pdGlhdG9yOiB0aGlzLmluaXRpYXRvcixcbiAgICAgICAgICAgIGlkOiB0aGlzLmlkLFxuICAgICAgICAgICAgbmFtZTogdGhpcy5uYW1lLFxuICAgICAgICAgICAgcHJvY2Vzc0RlZmluaXRpb25JZDogdGhpcy5wcm9jZXNzRGVmaW5pdGlvbklkLFxuICAgICAgICAgICAgcHJvY2Vzc0RlZmluaXRpb25OYW1lOiB0aGlzLnByb2Nlc3NEZWZpbml0aW9uTmFtZSxcbiAgICAgICAgICAgIHByb2Nlc3NEZWZpbml0aW9uS2V5OiB0aGlzLnByb2Nlc3NEZWZpbml0aW9uS2V5LFxuICAgICAgICAgICAgc3RhdHVzOiB0aGlzLnN0YXR1cyxcbiAgICAgICAgICAgIGJ1c2luZXNzS2V5OiB0aGlzLmJ1c2luZXNzS2V5LFxuICAgICAgICAgICAgbGFzdE1vZGlmaWVkRnJvbTogdGhpcy5sYXN0TW9kaWZpZWRGcm9tLFxuICAgICAgICAgICAgbGFzdE1vZGlmaWVkVG86IHRoaXMubGFzdE1vZGlmaWVkVG8sXG4gICAgICAgICAgICBzdGFydEZyb206IHRoaXMuc3RhcnRGcm9tLFxuICAgICAgICAgICAgc3RhcnRUbzogdGhpcy5zdGFydFRvLFxuICAgICAgICAgICAgY29tcGxldGVkRnJvbTogdGhpcy5jb21wbGV0ZWRGcm9tLFxuICAgICAgICAgICAgY29tcGxldGVkVG86IHRoaXMuY29tcGxldGVkVG8sXG4gICAgICAgICAgICBzdXNwZW5kZWRGcm9tOiB0aGlzLnN1c3BlbmRlZEZyb20sXG4gICAgICAgICAgICBzdXNwZW5kZWRUbzogdGhpcy5zdXNwZW5kZWRUbyxcbiAgICAgICAgICAgIGNvbXBsZXRlZERhdGU6IHRoaXMuY29tcGxldGVkRGF0ZSxcbiAgICAgICAgICAgIHNvcnRpbmc6IHRoaXMuc29ydGluZ1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gbmV3IFByb2Nlc3NRdWVyeUNsb3VkUmVxdWVzdE1vZGVsKHJlcXVlc3ROb2RlKTtcbiAgICB9XG5cbiAgICBnZXRBcHBWZXJzaW9ucygpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gdGhpcy5hcHBWZXJzaW9uIGluc3RhbmNlb2YgQXJyYXkgPyB0aGlzLmFwcFZlcnNpb24uam9pbignLCcpIDogKHRoaXMuYXBwVmVyc2lvbiA/IFN0cmluZyh0aGlzLmFwcFZlcnNpb24pIDogJycpO1xuICAgIH1cblxuICAgIHNldFNvcnRpbmcoc29ydERldGFpbCkge1xuICAgICAgICBjb25zdCBzb3J0aW5nID0gc29ydERldGFpbCA/IHtcbiAgICAgICAgICAgIG9yZGVyQnk6IHNvcnREZXRhaWwua2V5LFxuICAgICAgICAgICAgZGlyZWN0aW9uOiBzb3J0RGV0YWlsLmRpcmVjdGlvbi50b1VwcGVyQ2FzZSgpXG4gICAgICAgIH0gOiB7IC4uLiB0aGlzLmRlZmF1bHRTb3J0aW5nIH07XG4gICAgICAgIHRoaXMuc29ydGluZyA9IFtuZXcgUHJvY2Vzc0xpc3RDbG91ZFNvcnRpbmdNb2RlbChzb3J0aW5nKV07XG4gICAgfVxuXG4gICAgZm9ybWF0U29ydGluZyhzb3J0aW5nOiBQcm9jZXNzTGlzdENsb3VkU29ydGluZ01vZGVsW10pIHtcbiAgICAgICAgdGhpcy5mb3JtYXR0ZWRTb3J0aW5nID0gdGhpcy5pc1ZhbGlkU29ydGluZyhzb3J0aW5nKSA/IFtcbiAgICAgICAgICAgIHNvcnRpbmdbMF0ub3JkZXJCeSxcbiAgICAgICAgICAgIHNvcnRpbmdbMF0uZGlyZWN0aW9uLnRvTG9jYWxlTG93ZXJDYXNlKClcbiAgICAgICAgXSA6IG51bGw7XG4gICAgfVxuXG4gICAgaXNWYWxpZFNvcnRpbmcoc29ydGluZzogUHJvY2Vzc0xpc3RDbG91ZFNvcnRpbmdNb2RlbFtdKSB7XG4gICAgICAgIHJldHVybiBzb3J0aW5nLmxlbmd0aCAmJiBzb3J0aW5nWzBdLm9yZGVyQnkgJiYgc29ydGluZ1swXS5kaXJlY3Rpb247XG4gICAgfVxufVxuIl19