/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { IdentityUserService } from '@alfresco/adf-core';
import { Observable } from 'rxjs';
import { ProcessFilterCloudModel } from '../models/process-filter-cloud.model';
import { PreferenceCloudServiceInterface } from '../../../services/preference-cloud.interface';
import * as ɵngcc0 from '@angular/core';
export declare class ProcessFilterCloudService {
    preferenceService: PreferenceCloudServiceInterface;
    private identityUserService;
    private filtersSubject;
    filters$: Observable<ProcessFilterCloudModel[]>;
    constructor(preferenceService: PreferenceCloudServiceInterface, identityUserService: IdentityUserService);
    readQueryParams(obj: Object): ProcessFilterCloudModel;
    writeQueryParams(value: Object, filterProperties: string[], appName?: string, id?: string): Object;
    private createDefaultFilters;
    getProcessFilters(appName: string): Observable<ProcessFilterCloudModel[]>;
    getFilterById(appName: string, id: string): Observable<ProcessFilterCloudModel>;
    addFilter(newFilter: ProcessFilterCloudModel): Observable<ProcessFilterCloudModel[]>;
    updateFilter(updatedFilter: ProcessFilterCloudModel): Observable<ProcessFilterCloudModel[]>;
    deleteFilter(deletedFilter: ProcessFilterCloudModel): Observable<ProcessFilterCloudModel[]>;
    isDefaultFilter(filterName: string): boolean;
    private hasPreferences;
    private hasProcessFilters;
    private createProcessFilters;
    private getProcessFiltersByKey;
    private updateProcessFilters;
    private prepareKey;
    private findFiltersByKeyInPreferences;
    private addFiltersToStream;
    private handleProcessError;
    private defaultProcessFilters;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ProcessFilterCloudService, never>;
}

//# sourceMappingURL=process-filter-cloud.service.d.ts.map