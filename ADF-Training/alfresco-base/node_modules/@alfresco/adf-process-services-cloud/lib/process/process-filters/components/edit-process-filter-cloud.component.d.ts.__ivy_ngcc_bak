/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { EventEmitter, OnInit, OnChanges, SimpleChanges, OnDestroy } from '@angular/core';
import { FormGroup, FormBuilder, AbstractControl } from '@angular/forms';
import { DateAdapter } from '@angular/material/core';
import { MatDialog } from '@angular/material/dialog';
import { Observable } from 'rxjs';
import { Moment } from 'moment';
import { AppsProcessCloudService } from '../../../app/services/apps-process-cloud.service';
import { ProcessFilterCloudModel, ProcessFilterProperties, ProcessFilterAction, ProcessFilterOptions } from '../models/process-filter-cloud.model';
import { IdentityUserModel, TranslationService, UserPreferencesService } from '@alfresco/adf-core';
import { ProcessFilterCloudService } from '../services/process-filter-cloud.service';
import { ProcessCloudService } from '../../services/process-cloud.service';
import { DateCloudFilterType, DateRangeFilter } from '../../../models/date-cloud-filter.model';
export interface DropdownOption {
    value: string;
    label: string;
}
export declare class EditProcessFilterCloudComponent implements OnInit, OnChanges, OnDestroy {
    private formBuilder;
    dialog: MatDialog;
    private dateAdapter;
    private userPreferencesService;
    private translateService;
    private processFilterCloudService;
    private appsProcessCloudService;
    private processCloudService;
    static ACTION_SAVE: string;
    static ACTION_SAVE_AS: string;
    static ACTION_DELETE: string;
    static DEFAULT_PROCESS_FILTER_PROPERTIES: string[];
    static DEFAULT_SORT_PROPERTIES: string[];
    static DEFAULT_ACTIONS: string[];
    DATE_FORMAT: string;
    appName: string;
    role: string;
    id: string;
    filterProperties: string[];
    sortProperties: string[];
    actions: string[];
    showFilterActions: boolean;
    showTitle: boolean;
    showProcessFilterName: boolean;
    filterChange: EventEmitter<ProcessFilterCloudModel>;
    action: EventEmitter<ProcessFilterAction>;
    private _filter;
    protected filterHasBeenChanged: boolean;
    get processFilter(): ProcessFilterCloudModel;
    set processFilter(value: ProcessFilterCloudModel);
    status: Array<DropdownOption>;
    directions: Array<DropdownOption>;
    actionDisabledForDefault: string[];
    applicationNames: any[];
    allProcessDefinitionNamesOption: DropdownOption;
    processDefinitionNames: any[];
    editProcessFilterForm: FormGroup;
    processFilterProperties: ProcessFilterProperties[];
    processFilterActions: ProcessFilterAction[];
    toggleFilterActions: boolean;
    appVersionOptions: ProcessFilterOptions[];
    initiatorOptions: IdentityUserModel[];
    private onDestroy$;
    isLoading: boolean;
    private filterChangeSub;
    constructor(formBuilder: FormBuilder, dialog: MatDialog, dateAdapter: DateAdapter<Moment>, userPreferencesService: UserPreferencesService, translateService: TranslationService, processFilterCloudService: ProcessFilterCloudService, appsProcessCloudService: AppsProcessCloudService, processCloudService: ProcessCloudService);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    buildForm(processFilterProperties: ProcessFilterProperties[]): void;
    getFormControlsConfig(processFilterProperties: ProcessFilterProperties[]): any;
    private getAttributesControlConfig;
    retrieveProcessFilterAndBuildForm(): void;
    onFilterChange(): void;
    createAndFilterProperties(): ProcessFilterProperties[];
    checkMandatoryFilterProperties(): void;
    private isValidProperty;
    get createSortProperties(): ProcessFilterOptions[];
    getAppVersionOptions(): void;
    checkMandatorySortProperties(): void;
    createAndFilterActions(): ProcessFilterAction[];
    checkMandatoryActions(): void;
    private isValidAction;
    isFormValid(): boolean;
    getPropertyController(property: ProcessFilterProperties): AbstractControl;
    onDateChanged(newDateValue: Moment, dateProperty: ProcessFilterProperties): void;
    onDateTypeChange(dateType: DateCloudFilterType, property: ProcessFilterProperties): void;
    onDateRangeFilterChanged(dateRange: DateRangeFilter, property: ProcessFilterProperties): void;
    onChangedUser(users: IdentityUserModel[], processProperty: ProcessFilterProperties): void;
    hasError(property: ProcessFilterProperties): boolean;
    compareFilters(editedQuery: ProcessFilterCloudModel, currentQuery: ProcessFilterCloudModel): boolean;
    getRunningApplications(): void;
    getProcessDefinitions(): void;
    executeFilterActions(action: ProcessFilterAction): void;
    save(saveAction: ProcessFilterAction): void;
    delete(deleteAction: ProcessFilterAction): void;
    saveAs(saveAsAction: ProcessFilterAction): void;
    getSanitizeFilterName(filterName: string): string;
    replaceSpaceWithHyphen(name: string): string;
    restoreDefaultProcessFilters(): Observable<ProcessFilterCloudModel[]>;
    onExpand(): void;
    onClose(): void;
    isDisabledAction(action: ProcessFilterAction): boolean;
    hasFilterChanged(action: ProcessFilterAction): boolean;
    private setLastModifiedToFilter;
    private createFilterActions;
    private createLastModifiedProperty;
    private createProcessSortProperties;
    private isFilterChanged;
    private createProcessFilterProperties;
}
