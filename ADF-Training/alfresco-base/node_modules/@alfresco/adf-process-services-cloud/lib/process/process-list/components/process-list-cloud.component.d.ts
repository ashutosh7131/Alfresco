/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { OnChanges, AfterContentInit, EventEmitter, SimpleChanges } from '@angular/core';
import { DataTableSchema, PaginatedComponent, CustomEmptyContentTemplateDirective, AppConfigService, UserPreferencesService, PaginationModel, DataRowEvent, CustomLoadingContentTemplateDirective, DataCellEvent, DataRowActionEvent, DataTableComponent } from '@alfresco/adf-core';
import { ProcessListCloudService } from '../services/process-list-cloud.service';
import { BehaviorSubject } from 'rxjs';
import { ProcessQueryCloudRequestModel } from '../models/process-cloud-query-request.model';
import { ProcessListCloudSortingModel } from '../models/process-list-sorting.model';
import * as ɵngcc0 from '@angular/core';
export declare class ProcessListCloudComponent extends DataTableSchema implements OnChanges, AfterContentInit, PaginatedComponent {
    private processListCloudService;
    private userPreferences;
    static PRESET_KEY: string;
    dataTable: DataTableComponent;
    emptyCustomContent: CustomEmptyContentTemplateDirective;
    customLoadingContent: CustomLoadingContentTemplateDirective;
    appName: string;
    appVersion: number | number[];
    initiator: string;
    id: string;
    name: string;
    processDefinitionId: string;
    processDefinitionName: string;
    processDefinitionKey: string;
    status: string;
    businessKey: string;
    lastModifiedFrom: Date;
    lastModifiedTo: Date;
    startFrom: string;
    startTo: string;
    completedFrom: string;
    completedTo: string;
    completedDate: string;
    suspendedFrom: string;
    suspendedTo: string;
    selectionMode: string;
    multiselect: boolean;
    sorting: ProcessListCloudSortingModel[];
    showActions: boolean;
    actionsPosition: string;
    stickyHeader: boolean;
    showContextMenu: boolean;
    rowClick: EventEmitter<string>;
    rowsSelected: EventEmitter<any[]>;
    showRowContextMenu: EventEmitter<DataCellEvent>;
    showRowActionsMenu: EventEmitter<DataCellEvent>;
    executeRowAction: EventEmitter<DataRowActionEvent>;
    error: EventEmitter<any>;
    success: EventEmitter<any>;
    pagination: BehaviorSubject<PaginationModel>;
    size: number;
    skipCount: number;
    currentInstanceId: string;
    selectedInstances: any[];
    isLoading: boolean;
    rows: any[];
    formattedSorting: any[];
    requestNode: ProcessQueryCloudRequestModel;
    private defaultSorting;
    constructor(processListCloudService: ProcessListCloudService, appConfigService: AppConfigService, userPreferences: UserPreferencesService);
    ngAfterContentInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    getCurrentId(): string;
    reload(): void;
    private load;
    private isAnyPropertyChanged;
    private isPropertyChanged;
    isListEmpty(): boolean;
    resetPagination(): void;
    updatePagination(pagination: PaginationModel): void;
    onSortingChanged(event: CustomEvent): void;
    onRowClick(item: DataRowEvent): void;
    onRowSelect(event: CustomEvent): void;
    onRowUnselect(event: CustomEvent): void;
    onRowKeyUp(event: CustomEvent): void;
    onShowRowActionsMenu(event: DataCellEvent): void;
    onShowRowContextMenu(event: DataCellEvent): void;
    onExecuteRowAction(row: DataRowActionEvent): void;
    private createRequestNode;
    getAppVersions(): string;
    setSorting(sortDetail: any): void;
    formatSorting(sorting: ProcessListCloudSortingModel[]): void;
    isValidSorting(sorting: ProcessListCloudSortingModel[]): string;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ProcessListCloudComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<ProcessListCloudComponent, "adf-cloud-process-list", never, { "appName": "appName"; "initiator": "initiator"; "id": "id"; "name": "name"; "processDefinitionId": "processDefinitionId"; "processDefinitionName": "processDefinitionName"; "processDefinitionKey": "processDefinitionKey"; "status": "status"; "businessKey": "businessKey"; "startFrom": "startFrom"; "startTo": "startTo"; "completedFrom": "completedFrom"; "completedTo": "completedTo"; "completedDate": "completedDate"; "suspendedFrom": "suspendedFrom"; "suspendedTo": "suspendedTo"; "selectionMode": "selectionMode"; "multiselect": "multiselect"; "showActions": "showActions"; "actionsPosition": "actionsPosition"; "stickyHeader": "stickyHeader"; "showContextMenu": "showContextMenu"; "sorting": "sorting"; "appVersion": "appVersion"; "lastModifiedFrom": "lastModifiedFrom"; "lastModifiedTo": "lastModifiedTo"; }, { "rowClick": "rowClick"; "rowsSelected": "rowsSelected"; "showRowContextMenu": "showRowContextMenu"; "showRowActionsMenu": "showRowActionsMenu"; "executeRowAction": "executeRowAction"; "error": "error"; "success": "success"; }, ["emptyCustomContent", "customLoadingContent"], ["adf-custom-loading-content-template", "adf-custom-empty-content-template"]>;
}

//# sourceMappingURL=process-list-cloud.component.d.ts.map