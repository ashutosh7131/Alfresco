{"version":3,"file":"start-process-cloud.component.d.ts","sources":["start-process-cloud.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { EventEmitter, OnChanges, OnInit, SimpleChanges, OnDestroy } from '@angular/core';\nimport { ProcessInstanceCloud } from '../models/process-instance-cloud.model';\nimport { StartProcessCloudService } from '../services/start-process-cloud.service';\nimport { FormGroup, AbstractControl, FormBuilder, ValidatorFn } from '@angular/forms';\nimport { FormModel, ContentLinkModel } from '@alfresco/adf-core';\nimport { MatAutocompleteTrigger } from '@angular/material/autocomplete';\nimport { ProcessPayloadCloud } from '../models/process-payload-cloud.model';\nimport { ProcessDefinitionCloud } from '../../../models/process-definition-cloud.model';\nimport { Subject } from 'rxjs';\nimport { TaskVariableCloud } from '../../../form/models/task-variable-cloud.model';\nimport { ProcessNameCloudPipe } from '../../../pipes/process-name-cloud.pipe';\nexport declare class StartProcessCloudComponent implements OnChanges, OnInit, OnDestroy {\n    private startProcessCloudService;\n    private formBuilder;\n    private processNameCloudPipe;\n    static MAX_NAME_LENGTH: number;\n    static PROCESS_DEFINITION_DEBOUNCE: number;\n    static PROCESS_FORM_DEBOUNCE: number;\n    inputAutocomplete: MatAutocompleteTrigger;\n    appName: string;\n    maxNameLength: number;\n    name: string;\n    processDefinitionName: string;\n    variables: {};\n    values: TaskVariableCloud[];\n    showSelectProcessDropdown: boolean;\n    success: EventEmitter<ProcessInstanceCloud>;\n    cancel: EventEmitter<ProcessInstanceCloud>;\n    error: EventEmitter<ProcessInstanceCloud>;\n    formContentClicked: EventEmitter<ContentLinkModel>;\n    processDefinitionSelection: EventEmitter<ProcessDefinitionCloud>;\n    processDefinitionList: ProcessDefinitionCloud[];\n    processDefinitionCurrent: ProcessDefinitionCloud;\n    errorMessageId: string;\n    processForm: FormGroup;\n    processPayloadCloud: ProcessPayloadCloud;\n    filteredProcesses: ProcessDefinitionCloud[];\n    isLoading: boolean;\n    isFormCloudLoaded: boolean;\n    formCloud: FormModel;\n    currentCreatedProcess: ProcessInstanceCloud;\n    disableStartButton: boolean;\n    protected onDestroy$: Subject<boolean>;\n    processDefinitionLoaded: boolean;\n    constructor(startProcessCloudService: StartProcessCloudService, formBuilder: FormBuilder, processNameCloudPipe: ProcessNameCloudPipe);\n    ngOnInit(): void;\n    ngOnChanges(changes: SimpleChanges): void;\n    onKeyDown(event: KeyboardEvent): void;\n    hasForm(): boolean;\n    onFormLoaded(form: FormModel): void;\n    private isProcessSelectionValid;\n    private getMaxNameLength;\n    private generateProcessInstance;\n    private selectProcessDefinitionByProcesDefinitionName;\n    setProcessDefinitionOnForm(selectedProcessDefinitionName: string): void;\n    private getProcessDefinitionListByNameOrKey;\n    private getProcessIfExists;\n    private getProcessDefinitionByName;\n    private selectDefaultProcessDefinition;\n    loadProcessDefinitions(): void;\n    private isValidName;\n    isProcessFormValid(): boolean;\n    private isProcessPayloadValid;\n    private getProcessDefinition;\n    isProcessDefinitionsEmpty(): boolean;\n    buildProcessCloudPayload(): void;\n    startProcess(): void;\n    cancelStartProcess(): Promise<void>;\n    private resetErrorMessage;\n    private resetProcessDefinitionList;\n    displayProcessNameOnDropdown(process: any): any;\n    displayDropdown(event: any): void;\n    processDefinitionNameValidator(): ValidatorFn;\n    getProcessDefinitionValue(process: ProcessDefinitionCloud): string;\n    get processInstanceName(): AbstractControl;\n    get processDefinition(): AbstractControl;\n    onFormContentClicked(content: ContentLinkModel): void;\n    processDefinitionSelectionChanged(processDefinition: ProcessDefinitionCloud): void;\n    ngOnDestroy(): void;\n}\n"]}