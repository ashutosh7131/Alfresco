/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { EventEmitter, OnChanges, OnInit, SimpleChanges, OnDestroy } from '@angular/core';
import { ProcessInstanceCloud } from '../models/process-instance-cloud.model';
import { StartProcessCloudService } from '../services/start-process-cloud.service';
import { FormGroup, AbstractControl, FormBuilder, ValidatorFn } from '@angular/forms';
import { FormModel, ContentLinkModel } from '@alfresco/adf-core';
import { MatAutocompleteTrigger } from '@angular/material/autocomplete';
import { ProcessPayloadCloud } from '../models/process-payload-cloud.model';
import { ProcessDefinitionCloud } from '../../../models/process-definition-cloud.model';
import { Subject } from 'rxjs';
import { TaskVariableCloud } from '../../../form/models/task-variable-cloud.model';
import { ProcessNameCloudPipe } from '../../../pipes/process-name-cloud.pipe';
export declare class StartProcessCloudComponent implements OnChanges, OnInit, OnDestroy {
    private startProcessCloudService;
    private formBuilder;
    private processNameCloudPipe;
    static MAX_NAME_LENGTH: number;
    static PROCESS_DEFINITION_DEBOUNCE: number;
    static PROCESS_FORM_DEBOUNCE: number;
    inputAutocomplete: MatAutocompleteTrigger;
    appName: string;
    maxNameLength: number;
    name: string;
    processDefinitionName: string;
    variables: {};
    values: TaskVariableCloud[];
    showSelectProcessDropdown: boolean;
    success: EventEmitter<ProcessInstanceCloud>;
    cancel: EventEmitter<ProcessInstanceCloud>;
    error: EventEmitter<ProcessInstanceCloud>;
    formContentClicked: EventEmitter<ContentLinkModel>;
    processDefinitionSelection: EventEmitter<ProcessDefinitionCloud>;
    processDefinitionList: ProcessDefinitionCloud[];
    processDefinitionCurrent: ProcessDefinitionCloud;
    errorMessageId: string;
    processForm: FormGroup;
    processPayloadCloud: ProcessPayloadCloud;
    filteredProcesses: ProcessDefinitionCloud[];
    isLoading: boolean;
    isFormCloudLoaded: boolean;
    formCloud: FormModel;
    currentCreatedProcess: ProcessInstanceCloud;
    disableStartButton: boolean;
    protected onDestroy$: Subject<boolean>;
    processDefinitionLoaded: boolean;
    constructor(startProcessCloudService: StartProcessCloudService, formBuilder: FormBuilder, processNameCloudPipe: ProcessNameCloudPipe);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    onKeyDown(event: KeyboardEvent): void;
    hasForm(): boolean;
    onFormLoaded(form: FormModel): void;
    private isProcessSelectionValid;
    private getMaxNameLength;
    private generateProcessInstance;
    private selectProcessDefinitionByProcesDefinitionName;
    setProcessDefinitionOnForm(selectedProcessDefinitionName: string): void;
    private getProcessDefinitionListByNameOrKey;
    private getProcessIfExists;
    private getProcessDefinitionByName;
    private selectDefaultProcessDefinition;
    loadProcessDefinitions(): void;
    private isValidName;
    isProcessFormValid(): boolean;
    private isProcessPayloadValid;
    private getProcessDefinition;
    isProcessDefinitionsEmpty(): boolean;
    buildProcessCloudPayload(): void;
    startProcess(): void;
    cancelStartProcess(): Promise<void>;
    private resetErrorMessage;
    private resetProcessDefinitionList;
    displayProcessNameOnDropdown(process: any): any;
    displayDropdown(event: any): void;
    processDefinitionNameValidator(): ValidatorFn;
    getProcessDefinitionValue(process: ProcessDefinitionCloud): string;
    get processInstanceName(): AbstractControl;
    get processDefinition(): AbstractControl;
    onFormContentClicked(content: ContentLinkModel): void;
    processDefinitionSelectionChanged(processDefinition: ProcessDefinitionCloud): void;
    ngOnDestroy(): void;
}
