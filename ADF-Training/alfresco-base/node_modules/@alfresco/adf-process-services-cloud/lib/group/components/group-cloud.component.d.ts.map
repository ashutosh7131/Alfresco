{"version":3,"file":"group-cloud.component.d.ts","sources":["group-cloud.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { OnInit, EventEmitter, SimpleChanges, OnChanges, OnDestroy } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { Observable, BehaviorSubject } from 'rxjs';\nimport { IdentityGroupModel, IdentityGroupService, LogService } from '@alfresco/adf-core';\nimport { ComponentSelectionMode } from '../../types';\nexport declare class GroupCloudComponent implements OnInit, OnChanges, OnDestroy {\n    private identityGroupService;\n    private logService;\n    appName: string;\n    title: string;\n    mode: ComponentSelectionMode;\n    preSelectGroups: IdentityGroupModel[];\n    validate: boolean;\n    readOnly: boolean;\n    groupChipsCtrl: FormControl;\n    searchGroupsControl: FormControl;\n    roles: string[];\n    selectGroup: EventEmitter<IdentityGroupModel>;\n    removeGroup: EventEmitter<IdentityGroupModel>;\n    changedGroups: EventEmitter<IdentityGroupModel[]>;\n    warning: EventEmitter<any>;\n    private groupInput;\n    private searchGroups;\n    private onDestroy$;\n    selectedGroups: IdentityGroupModel[];\n    invalidGroups: IdentityGroupModel[];\n    searchGroups$: BehaviorSubject<IdentityGroupModel[]>;\n    _subscriptAnimationState: string;\n    clientId: string;\n    isFocused: boolean;\n    validateGroupsMessage: string;\n    searchedValue: string;\n    validationLoading: boolean;\n    searchLoading: boolean;\n    constructor(identityGroupService: IdentityGroupService, logService: LogService);\n    ngOnInit(): void;\n    ngOnChanges(changes: SimpleChanges): void;\n    private isAppNameChanged;\n    private loadClientId;\n    initSearch(): void;\n    checkGroupHasAccess(groupId: string): Observable<boolean>;\n    private isGroupAlreadySelected;\n    searchGroup(name: string): Promise<IdentityGroupModel>;\n    private getPreselectedGroups;\n    validatePreselectGroups(): Promise<any>;\n    checkPreselectValidationErrors(): void;\n    generateInvalidGroupsMessage(): void;\n    private loadPreSelectGroups;\n    filterGroupsByRoles(group: IdentityGroupModel): Observable<IdentityGroupModel>;\n    onSelect(group: IdentityGroupModel): void;\n    onRemove(groupToRemove: IdentityGroupModel): void;\n    private groupChipsCtrlValue;\n    private removeGroupFromSelected;\n    private removeGroupFromValidation;\n    private resetSearchGroups;\n    isPreselectedGroupInvalid(preselectedGroup: IdentityGroupModel, validatedGroup: IdentityGroupModel): boolean;\n    isSingleMode(): boolean;\n    private isSingleSelectionReadonly;\n    hasPreselectError(): boolean;\n    isReadonly(): boolean;\n    isMultipleMode(): boolean;\n    getDisplayName(group: IdentityGroupModel): string;\n    removeDuplicatedGroups(groups: IdentityGroupModel[]): IdentityGroupModel[];\n    private hasPreSelectGroups;\n    private hasModeChanged;\n    private isValidationChanged;\n    private hasPreselectedGroupsChanged;\n    private hasPreselectedGroupsCleared;\n    private hasRoles;\n    private setTypingError;\n    hasError(): boolean;\n    isValidationLoading(): boolean;\n    setFocus(isFocused: boolean): void;\n    isValidationEnabled(): boolean;\n    getValidationPattern(): string;\n    getValidationMaxLength(): string;\n    getValidationMinLength(): string;\n    ngOnDestroy(): void;\n}\n"]}