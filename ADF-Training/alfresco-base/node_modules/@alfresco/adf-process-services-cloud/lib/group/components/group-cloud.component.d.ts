/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { OnInit, EventEmitter, SimpleChanges, OnChanges, OnDestroy } from '@angular/core';
import { FormControl } from '@angular/forms';
import { Observable, BehaviorSubject } from 'rxjs';
import { IdentityGroupModel, IdentityGroupService, LogService } from '@alfresco/adf-core';
import { ComponentSelectionMode } from '../../types';
import * as ɵngcc0 from '@angular/core';
export declare class GroupCloudComponent implements OnInit, OnChanges, OnDestroy {
    private identityGroupService;
    private logService;
    appName: string;
    title: string;
    mode: ComponentSelectionMode;
    preSelectGroups: IdentityGroupModel[];
    validate: boolean;
    readOnly: boolean;
    groupChipsCtrl: FormControl;
    searchGroupsControl: FormControl;
    roles: string[];
    selectGroup: EventEmitter<IdentityGroupModel>;
    removeGroup: EventEmitter<IdentityGroupModel>;
    changedGroups: EventEmitter<IdentityGroupModel[]>;
    warning: EventEmitter<any>;
    private groupInput;
    private searchGroups;
    private onDestroy$;
    selectedGroups: IdentityGroupModel[];
    invalidGroups: IdentityGroupModel[];
    searchGroups$: BehaviorSubject<IdentityGroupModel[]>;
    _subscriptAnimationState: string;
    clientId: string;
    isFocused: boolean;
    validateGroupsMessage: string;
    searchedValue: string;
    validationLoading: boolean;
    searchLoading: boolean;
    constructor(identityGroupService: IdentityGroupService, logService: LogService);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    private isAppNameChanged;
    private loadClientId;
    initSearch(): void;
    checkGroupHasAccess(groupId: string): Observable<boolean>;
    private isGroupAlreadySelected;
    searchGroup(name: string): Promise<IdentityGroupModel>;
    private getPreselectedGroups;
    validatePreselectGroups(): Promise<any>;
    checkPreselectValidationErrors(): void;
    generateInvalidGroupsMessage(): void;
    private loadPreSelectGroups;
    filterGroupsByRoles(group: IdentityGroupModel): Observable<IdentityGroupModel>;
    onSelect(group: IdentityGroupModel): void;
    onRemove(groupToRemove: IdentityGroupModel): void;
    private groupChipsCtrlValue;
    private removeGroupFromSelected;
    private removeGroupFromValidation;
    private resetSearchGroups;
    isPreselectedGroupInvalid(preselectedGroup: IdentityGroupModel, validatedGroup: IdentityGroupModel): boolean;
    isSingleMode(): boolean;
    private isSingleSelectionReadonly;
    hasPreselectError(): boolean;
    isReadonly(): boolean;
    isMultipleMode(): boolean;
    getDisplayName(group: IdentityGroupModel): string;
    removeDuplicatedGroups(groups: IdentityGroupModel[]): IdentityGroupModel[];
    private hasPreSelectGroups;
    private hasModeChanged;
    private isValidationChanged;
    private hasPreselectedGroupsChanged;
    private hasPreselectedGroupsCleared;
    private hasRoles;
    private setTypingError;
    hasError(): boolean;
    isValidationLoading(): boolean;
    setFocus(isFocused: boolean): void;
    isValidationEnabled(): boolean;
    getValidationPattern(): string;
    getValidationMaxLength(): string;
    getValidationMinLength(): string;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<GroupCloudComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<GroupCloudComponent, "adf-cloud-group", never, { "mode": "mode"; "preSelectGroups": "preSelectGroups"; "validate": "validate"; "readOnly": "readOnly"; "groupChipsCtrl": "groupChipsCtrl"; "searchGroupsControl": "searchGroupsControl"; "roles": "roles"; "appName": "appName"; "title": "title"; }, { "selectGroup": "selectGroup"; "removeGroup": "removeGroup"; "changedGroups": "changedGroups"; "warning": "warning"; }, never, never>;
}

//# sourceMappingURL=group-cloud.component.d.ts.map