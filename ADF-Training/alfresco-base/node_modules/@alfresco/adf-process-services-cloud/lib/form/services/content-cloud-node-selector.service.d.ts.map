{"version":3,"file":"content-cloud-node-selector.service.d.ts","sources":["content-cloud-node-selector.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { AlfrescoApiService, LogService, NotificationService } from '@alfresco/adf-core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { Node, NodesApi } from '@alfresco/js-api';\nimport { Observable } from 'rxjs';\nimport { DestinationFolderPathModel } from '../models/form-cloud-representation.model';\nexport declare class ContentCloudNodeSelectorService {\n    private apiService;\n    private notificationService;\n    private logService;\n    private dialog;\n    private _nodesApi;\n    get nodesApi(): NodesApi;\n    sourceNodeNotFound: boolean;\n    constructor(apiService: AlfrescoApiService, notificationService: NotificationService, logService: LogService, dialog: MatDialog);\n    openUploadFileDialog(currentFolderId?: string, selectionMode?: string, isAllFileSources?: boolean, restrictRootToCurrentFolderId?: boolean): Observable<Node[]>;\n    getNodeIdFromPath(destinationFolderPath: DestinationFolderPathModel): Promise<string>;\n    getNodeIdFromFolderVariableValue(variableValue: string, defaultAlias?: string): Promise<string>;\n    isExistingNode(nodeId: string): Promise<boolean>;\n    private getNodeId;\n    private openContentNodeDialog;\n    close(): void;\n    private handleError;\n}\n"]}