/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { OnDestroy, OnInit } from '@angular/core';
import { FormService, LogService, ThumbnailService, NotificationService, AppConfigService, AlfrescoApiService, DestinationFolderPath } from '@alfresco/adf-core';
import { Node, NodesApi, RelatedContentRepresentation } from '@alfresco/js-api';
import { ContentCloudNodeSelectorService } from '../../../services/content-cloud-node-selector.service';
import { ProcessCloudContentService } from '../../../services/process-cloud-content.service';
import { UploadCloudWidgetComponent } from './upload-cloud.widget';
import { DestinationFolderPathModel } from '../../../models/form-cloud-representation.model';
import { ContentNodeSelectorPanelService } from '@alfresco/adf-content-services';
import * as ɵngcc0 from '@angular/core';
export declare class AttachFileCloudWidgetComponent extends UploadCloudWidgetComponent implements OnInit, OnDestroy {
    private contentNodeSelectorService;
    private appConfigService;
    private apiService;
    private contentNodeSelectorPanelService;
    static ALIAS_ROOT_FOLDER: string;
    static ALIAS_USER_FOLDER: string;
    static APP_NAME: string;
    static VALID_ALIAS: string[];
    static RETRIEVE_METADATA_OPTION: string;
    typeId: string;
    rootNodeId: string;
    selectedNode: Node;
    _nodesApi: NodesApi;
    get nodesApi(): NodesApi;
    displayedColumns: string[];
    constructor(formService: FormService, logger: LogService, thumbnails: ThumbnailService, processCloudContentService: ProcessCloudContentService, notificationService: NotificationService, contentNodeSelectorService: ContentCloudNodeSelectorService, appConfigService: AppConfigService, apiService: AlfrescoApiService, contentNodeSelectorPanelService: ContentNodeSelectorPanelService);
    ngOnInit(): void;
    isPathStaticType(): boolean;
    isUploadButtonVisible(): boolean;
    onRemoveAttachFile(file: File | RelatedContentRepresentation | Node): void;
    fetchAppNameFromAppConfig(): string;
    replaceAppNameAliasWithValue(path: string): string;
    openSelectDialog(): Promise<void>;
    private getDestinationFolderNodeId;
    getNodeIdFromPath(destinationFolderPath: DestinationFolderPath): Promise<string>;
    getNodeIdFromFolderVariableValue(destinationFolderPath: DestinationFolderPath): Promise<string>;
    getAliasAndRelativePathFromDestinationFolderPath(destinationFolderPath: string): DestinationFolderPathModel;
    removeExistingSelection(selections: Node[]): Node[];
    downloadContent(file: Node): void;
    onAttachFileClicked(nodeSelector: any): void;
    getWidgetIcon(): string;
    onRowClicked(file?: Node): void;
    contentModelFormFileHandler(file?: any): void;
    isRetrieveMetadataOptionEnabled(): boolean;
    isValidAlias(alias: string): boolean;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<AttachFileCloudWidgetComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<AttachFileCloudWidgetComponent, "adf-cloud-attach-file-cloud-widget", never, {}, {}, never, never>;
}

//# sourceMappingURL=attach-file-cloud-widget.component.d.ts.map