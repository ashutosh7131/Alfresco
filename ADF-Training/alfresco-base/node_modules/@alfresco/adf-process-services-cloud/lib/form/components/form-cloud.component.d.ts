/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { EventEmitter, OnChanges, SimpleChanges, OnDestroy } from '@angular/core';
import { Observable, Subject, Subscription } from 'rxjs';
import { FormBaseComponent, FormFieldModel, FormOutcomeModel, WidgetVisibilityService, FormService, FormFieldValidator, FormModel, ContentLinkModel } from '@alfresco/adf-core';
import { FormCloudService } from '../services/form-cloud.service';
import { TaskVariableCloud } from '../models/task-variable-cloud.model';
import { TaskDetailsCloudModel } from '../../task/start-task/models/task-details-cloud.model';
import * as ɵngcc0 from '@angular/core';
export declare class FormCloudComponent extends FormBaseComponent implements OnChanges, OnDestroy {
    protected formCloudService: FormCloudService;
    protected formService: FormService;
    protected visibilityService: WidgetVisibilityService;
    appName: string;
    appVersion?: number;
    formId: string;
    processInstanceId: string;
    form: FormModel;
    taskId: string;
    data: TaskVariableCloud[];
    fieldValidators: FormFieldValidator[];
    formSaved: EventEmitter<FormModel>;
    formCompleted: EventEmitter<FormModel>;
    formLoaded: EventEmitter<FormModel>;
    formDataRefreshed: EventEmitter<FormModel>;
    formContentClicked: EventEmitter<ContentLinkModel>;
    protected subscriptions: Subscription[];
    nodeId: string;
    formCloudRepresentationJSON: any;
    protected onDestroy$: Subject<boolean>;
    constructor(formCloudService: FormCloudService, formService: FormService, visibilityService: WidgetVisibilityService);
    onKeyDown(event: KeyboardEvent): void;
    ngOnChanges(changes: SimpleChanges): void;
    onRefreshClicked(): void;
    loadForm(): void;
    findProcessVariablesByTaskId(appName: string, taskId: string): Observable<TaskVariableCloud[]>;
    isAProcessTask(taskRepresentation: TaskDetailsCloudModel): boolean;
    getFormByTaskId(appName: string, taskId: string, version?: number): Promise<FormModel>;
    getFormById(appName: string, formId: string, appVersion?: number): void;
    saveTaskForm(): void;
    completeTaskForm(outcome?: string): void;
    parseForm(formCloudRepresentationJSON: any): FormModel;
    getFormDefinitionOutcomes(form: FormModel): FormOutcomeModel[];
    checkVisibility(field: FormFieldModel): void;
    private refreshFormData;
    protected onFormLoaded(form: FormModel): void;
    protected onFormDataRefreshed(form: FormModel): void;
    protected onTaskSaved(form: FormModel): void;
    protected onTaskSavedError(error: any): void;
    protected onTaskCompleted(form: FormModel): void;
    protected onTaskCompletedError(error: any): void;
    protected onExecuteOutcome(outcome: FormOutcomeModel): boolean;
    protected storeFormAsMetadata(): void;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<FormCloudComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<FormCloudComponent, "adf-cloud-form", never, { "appName": "appName"; "fieldValidators": "fieldValidators"; "data": "data"; "form": "form"; "appVersion": "appVersion"; "formId": "formId"; "processInstanceId": "processInstanceId"; "taskId": "taskId"; }, { "formSaved": "formSaved"; "formCompleted": "formCompleted"; "formLoaded": "formLoaded"; "formDataRefreshed": "formDataRefreshed"; "formContentClicked": "formContentClicked"; }, never, ["[empty-form]", "adf-cloud-form-custom-outcomes"]>;
}

//# sourceMappingURL=form-cloud.component.d.ts.map