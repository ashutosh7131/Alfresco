{"version":3,"file":"dropdown-cloud.widget.d.ts","sources":["dropdown-cloud.widget.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { OnInit, OnDestroy } from '@angular/core';\nimport { WidgetComponent, FormService, LogService, FormFieldOption, FormFieldModel } from '@alfresco/adf-core';\nimport { FormCloudService } from '../../../services/form-cloud.service';\nimport { Subject } from 'rxjs';\nexport declare class DropdownCloudWidgetComponent extends WidgetComponent implements OnInit, OnDestroy {\n    formService: FormService;\n    private formCloudService;\n    private logService;\n    static DEFAULT_OPTION: {\n        id: string;\n        name: string;\n    };\n    typeId: string;\n    protected onDestroy$: Subject<boolean>;\n    constructor(formService: FormService, formCloudService: FormCloudService, logService: LogService);\n    ngOnInit(): void;\n    private persistFieldOptionsFromRestApi;\n    private buildBodyParam;\n    private loadFieldOptionsForLinkedWidget;\n    private getParentWidgetValue;\n    private parentValueChanged;\n    private isValidValue;\n    private isDefaultValue;\n    private getFormFieldById;\n    private persistFieldOptionsFromManualList;\n    private getRuleEntries;\n    private hasRuleEntries;\n    private addDefaultOption;\n    selectionChangedForField(field: FormFieldModel): void;\n    private isParentFormFieldEvent;\n    private isFormFieldEventOfTypeDropdown;\n    private hasRestUrl;\n    isLinkedWidget(): boolean;\n    getLinkedWidgetId(): string;\n    compareDropdownValues(opt1: FormFieldOption | string, opt2: FormFieldOption | string): boolean;\n    getOptionValue(option: FormFieldOption, fieldValue: string): string | FormFieldOption;\n    private isValidRestType;\n    private handleError;\n    isReadOnlyType(): boolean;\n    ngOnDestroy(): void;\n}\n"]}