/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { OnInit, OnDestroy } from '@angular/core';
import { WidgetComponent, FormService, LogService, FormFieldOption, FormFieldModel } from '@alfresco/adf-core';
import { FormCloudService } from '../../../services/form-cloud.service';
import { Subject } from 'rxjs';
import * as ɵngcc0 from '@angular/core';
export declare class DropdownCloudWidgetComponent extends WidgetComponent implements OnInit, OnDestroy {
    formService: FormService;
    private formCloudService;
    private logService;
    static DEFAULT_OPTION: {
        id: string;
        name: string;
    };
    typeId: string;
    protected onDestroy$: Subject<boolean>;
    constructor(formService: FormService, formCloudService: FormCloudService, logService: LogService);
    ngOnInit(): void;
    private persistFieldOptionsFromRestApi;
    private buildBodyParam;
    private loadFieldOptionsForLinkedWidget;
    private getParentWidgetValue;
    private parentValueChanged;
    private isValidValue;
    private isDefaultValue;
    private getFormFieldById;
    private persistFieldOptionsFromManualList;
    private getRuleEntries;
    private hasRuleEntries;
    private addDefaultOption;
    selectionChangedForField(field: FormFieldModel): void;
    private isParentFormFieldEvent;
    private isFormFieldEventOfTypeDropdown;
    private hasRestUrl;
    isLinkedWidget(): boolean;
    getLinkedWidgetId(): string;
    compareDropdownValues(opt1: FormFieldOption | string, opt2: FormFieldOption | string): boolean;
    getOptionValue(option: FormFieldOption, fieldValue: string): string | FormFieldOption;
    private isValidRestType;
    private handleError;
    isReadOnlyType(): boolean;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<DropdownCloudWidgetComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<DropdownCloudWidgetComponent, "dropdown-cloud-widget", never, {}, {}, never, never>;
}

//# sourceMappingURL=dropdown-cloud.widget.d.ts.map