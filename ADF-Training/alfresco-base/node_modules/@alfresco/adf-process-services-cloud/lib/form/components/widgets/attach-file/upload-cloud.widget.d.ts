/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { ElementRef, OnInit } from '@angular/core';
import { Node } from '@alfresco/js-api';
import { WidgetComponent, LogService, FormService, ThumbnailService, NotificationService } from '@alfresco/adf-core';
import { ProcessCloudContentService } from '../../../services/process-cloud-content.service';
import * as ɵngcc0 from '@angular/core';
export declare class UploadCloudWidgetComponent extends WidgetComponent implements OnInit {
    private thumbnailService;
    protected processCloudContentService: ProcessCloudContentService;
    protected notificationService: NotificationService;
    protected logService: LogService;
    hasFile: boolean;
    displayText: string;
    multipleOption: string;
    mimeTypeIcon: string;
    fileInput: ElementRef;
    constructor(formService: FormService, thumbnailService: ThumbnailService, processCloudContentService: ProcessCloudContentService, notificationService: NotificationService, logService: LogService);
    ngOnInit(): void;
    removeFile(file: any): void;
    onFileChanged(event: any): void;
    private isUploaded;
    protected fixIncompatibilityFromPreviousAndNewForm(filesSaved: Node[]): void;
    getIcon(mimeType: string): string;
    private uploadRawContent;
    getMultipleFileParam(): void;
    get uploadedFiles(): any[];
    private removeElementFromList;
    private resetFormValues;
    fileClicked(file: any): void;
    isAlfrescoAndLocal(): boolean;
    isPathVariableType(type: string): boolean;
    setDestinationFolderPathFromMappedVariable(): void;
    private prepareUploadWidgetDestinationFolderPathFromStringVariable;
    private prepareUploadWidgetDestinationFolderPathFromFolderVariable;
    private setUploadWidgetDestinationFolderPath;
    private getDestinationFolderPathValue;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<UploadCloudWidgetComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<UploadCloudWidgetComponent, "upload-cloud-widget", never, {}, {}, never, never>;
}

//# sourceMappingURL=upload-cloud.widget.d.ts.map