{"version":3,"file":"people-cloud.component.d.ts","sources":["people-cloud.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { FormControl } from '@angular/forms';\nimport { OnInit, EventEmitter, SimpleChanges, OnChanges, OnDestroy } from '@angular/core';\nimport { Observable, BehaviorSubject } from 'rxjs';\nimport { IdentityUserModel, IdentityUserService, LogService } from '@alfresco/adf-core';\nimport { ComponentSelectionMode } from '../../types';\nexport declare class PeopleCloudComponent implements OnInit, OnChanges, OnDestroy {\n    private identityUserService;\n    private logService;\n    appName: string;\n    mode: ComponentSelectionMode;\n    roles: string[];\n    validate: boolean;\n    readOnly: boolean;\n    preSelectUsers: IdentityUserModel[];\n    excludedUsers: IdentityUserModel[];\n    userChipsCtrl: FormControl;\n    searchUserCtrl: FormControl;\n    title: string;\n    selectUser: EventEmitter<IdentityUserModel>;\n    removeUser: EventEmitter<IdentityUserModel>;\n    changedUsers: EventEmitter<IdentityUserModel[]>;\n    warning: EventEmitter<any>;\n    private userInput;\n    private _searchUsers;\n    private onDestroy$;\n    selectedUsers: IdentityUserModel[];\n    invalidUsers: IdentityUserModel[];\n    searchUsers$: BehaviorSubject<IdentityUserModel[]>;\n    _subscriptAnimationState: string;\n    clientId: string;\n    isFocused: boolean;\n    validateUsersMessage: string;\n    searchedValue: string;\n    validationLoading: boolean;\n    searchLoading: boolean;\n    constructor(identityUserService: IdentityUserService, logService: LogService);\n    ngOnInit(): void;\n    ngOnChanges(changes: SimpleChanges): void;\n    private loadClientId;\n    private initSearch;\n    ngOnDestroy(): void;\n    private isAppNameChanged;\n    isValidationEnabled(): boolean;\n    private checkUserHasAccess;\n    private hasRoles;\n    filterUsersByRoles(user: IdentityUserModel): Observable<IdentityUserModel>;\n    private isUserAlreadySelected;\n    private isExcludedUser;\n    private loadPreSelectUsers;\n    private getPreselectedUsers;\n    validatePreselectUsers(): Promise<any>;\n    compare(preselectedUser: IdentityUserModel, identityUser: IdentityUserModel): boolean;\n    private getSearchKey;\n    searchUser(user: IdentityUserModel): Promise<IdentityUserModel>;\n    removeDuplicatedUsers(users: IdentityUserModel[]): IdentityUserModel[];\n    checkPreselectValidationErrors(): void;\n    onSelect(user: IdentityUserModel): void;\n    onRemove(userToRemove: IdentityUserModel): void;\n    private userChipsCtrlValue;\n    private removeUserFromSelected;\n    private removeUserFromValidation;\n    generateInvalidUsersMessage(): void;\n    setTypingError(): void;\n    hasPreselectError(): boolean;\n    getDisplayName(user: any): string;\n    isMultipleMode(): boolean;\n    isSingleMode(): boolean;\n    private isSingleSelectionReadonly;\n    private hasPreSelectUsers;\n    private valueChanged;\n    private hasPreselectedUsersCleared;\n    private resetSearchUsers;\n    getSelectedUsers(): IdentityUserModel[];\n    isReadonly(): boolean;\n    isValidationLoading(): boolean;\n    setFocus(isFocused: boolean): void;\n    hasError(): boolean;\n    getValidationPattern(): string;\n    getValidationMaxLength(): string;\n    getValidationMinLength(): string;\n}\n"]}