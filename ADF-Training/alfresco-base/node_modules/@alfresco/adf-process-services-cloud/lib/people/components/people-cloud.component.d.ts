/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { FormControl } from '@angular/forms';
import { OnInit, EventEmitter, SimpleChanges, OnChanges, OnDestroy } from '@angular/core';
import { Observable, BehaviorSubject } from 'rxjs';
import { IdentityUserModel, IdentityUserService, LogService } from '@alfresco/adf-core';
import { ComponentSelectionMode } from '../../types';
import * as ɵngcc0 from '@angular/core';
export declare class PeopleCloudComponent implements OnInit, OnChanges, OnDestroy {
    private identityUserService;
    private logService;
    appName: string;
    mode: ComponentSelectionMode;
    roles: string[];
    validate: boolean;
    readOnly: boolean;
    preSelectUsers: IdentityUserModel[];
    excludedUsers: IdentityUserModel[];
    userChipsCtrl: FormControl;
    searchUserCtrl: FormControl;
    title: string;
    selectUser: EventEmitter<IdentityUserModel>;
    removeUser: EventEmitter<IdentityUserModel>;
    changedUsers: EventEmitter<IdentityUserModel[]>;
    warning: EventEmitter<any>;
    private userInput;
    private _searchUsers;
    private onDestroy$;
    selectedUsers: IdentityUserModel[];
    invalidUsers: IdentityUserModel[];
    searchUsers$: BehaviorSubject<IdentityUserModel[]>;
    _subscriptAnimationState: string;
    clientId: string;
    isFocused: boolean;
    validateUsersMessage: string;
    searchedValue: string;
    validationLoading: boolean;
    searchLoading: boolean;
    constructor(identityUserService: IdentityUserService, logService: LogService);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    private loadClientId;
    private initSearch;
    ngOnDestroy(): void;
    private isAppNameChanged;
    isValidationEnabled(): boolean;
    private checkUserHasAccess;
    private hasRoles;
    filterUsersByRoles(user: IdentityUserModel): Observable<IdentityUserModel>;
    private isUserAlreadySelected;
    private isExcludedUser;
    private loadPreSelectUsers;
    private getPreselectedUsers;
    validatePreselectUsers(): Promise<any>;
    compare(preselectedUser: IdentityUserModel, identityUser: IdentityUserModel): boolean;
    private getSearchKey;
    searchUser(user: IdentityUserModel): Promise<IdentityUserModel>;
    removeDuplicatedUsers(users: IdentityUserModel[]): IdentityUserModel[];
    checkPreselectValidationErrors(): void;
    onSelect(user: IdentityUserModel): void;
    onRemove(userToRemove: IdentityUserModel): void;
    private userChipsCtrlValue;
    private removeUserFromSelected;
    private removeUserFromValidation;
    generateInvalidUsersMessage(): void;
    setTypingError(): void;
    hasPreselectError(): boolean;
    getDisplayName(user: any): string;
    isMultipleMode(): boolean;
    isSingleMode(): boolean;
    private isSingleSelectionReadonly;
    private hasPreSelectUsers;
    private valueChanged;
    private hasPreselectedUsersCleared;
    private resetSearchUsers;
    getSelectedUsers(): IdentityUserModel[];
    isReadonly(): boolean;
    isValidationLoading(): boolean;
    setFocus(isFocused: boolean): void;
    hasError(): boolean;
    getValidationPattern(): string;
    getValidationMaxLength(): string;
    getValidationMinLength(): string;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<PeopleCloudComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<PeopleCloudComponent, "adf-cloud-people", never, { "mode": "mode"; "validate": "validate"; "readOnly": "readOnly"; "preSelectUsers": "preSelectUsers"; "excludedUsers": "excludedUsers"; "userChipsCtrl": "userChipsCtrl"; "searchUserCtrl": "searchUserCtrl"; "appName": "appName"; "roles": "roles"; "title": "title"; }, { "selectUser": "selectUser"; "removeUser": "removeUser"; "changedUsers": "changedUsers"; "warning": "warning"; }, never, never>;
}

//# sourceMappingURL=people-cloud.component.d.ts.map