{"version":3,"file":"base-task-list-cloud.component.d.ts","sources":["base-task-list-cloud.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { OnChanges, SimpleChanges, EventEmitter, AfterContentInit, OnDestroy, OnInit } from '@angular/core';\nimport { AppConfigService, UserPreferencesService, DataTableSchema, PaginatedComponent, PaginationModel, DataRowEvent, CustomEmptyContentTemplateDirective, DataCellEvent, DataRowActionEvent, DataRow, DataColumn } from '@alfresco/adf-core';\nimport { TaskQueryCloudRequestModel } from '../models/filter-cloud-model';\nimport { BehaviorSubject } from 'rxjs';\nimport { TaskListCloudSortingModel } from '../models/task-list-sorting.model';\nimport { TaskCloudService } from '../../services/task-cloud.service';\nexport declare abstract class BaseTaskListCloudComponent extends DataTableSchema implements OnChanges, AfterContentInit, PaginatedComponent, OnDestroy, OnInit {\n    private taskCloudService;\n    private userPreferences;\n    emptyCustomContent: CustomEmptyContentTemplateDirective;\n    appName: string;\n    selectionMode: string;\n    multiselect: boolean;\n    stickyHeader: boolean;\n    sorting: TaskListCloudSortingModel[];\n    showActions: boolean;\n    actionsPosition: string;\n    showContextMenu: boolean;\n    showRowContextMenu: EventEmitter<DataCellEvent>;\n    showRowActionsMenu: EventEmitter<DataCellEvent>;\n    executeRowAction: EventEmitter<DataRowActionEvent>;\n    rowClick: EventEmitter<string>;\n    rowsSelected: EventEmitter<any[]>;\n    success: EventEmitter<any>;\n    error: EventEmitter<any>;\n    pagination: BehaviorSubject<PaginationModel>;\n    requestNode: TaskQueryCloudRequestModel;\n    rows: any[];\n    size: number;\n    skipCount: number;\n    currentInstanceId: any;\n    isLoading: boolean;\n    selectedInstances: any[];\n    formattedSorting: any[];\n    private defaultSorting;\n    boundReplacePriorityValues: (row: DataRow, col: DataColumn) => any;\n    private onDestroy$;\n    constructor(appConfigService: AppConfigService, taskCloudService: TaskCloudService, userPreferences: UserPreferencesService, presetKey: string);\n    ngOnInit(): void;\n    ngOnChanges(changes: SimpleChanges): void;\n    ngOnDestroy(): void;\n    ngAfterContentInit(): void;\n    reload(): void;\n    isListEmpty(): boolean;\n    resetPagination(): void;\n    updatePagination(pagination: PaginationModel): void;\n    onSortingChanged(event: CustomEvent): void;\n    onRowClick(item: DataRowEvent): void;\n    onRowSelect(event: CustomEvent): void;\n    onRowUnselect(event: CustomEvent): void;\n    onRowKeyUp(event: CustomEvent): void;\n    onShowRowActionsMenu(event: DataCellEvent): void;\n    onShowRowContextMenu(event: DataCellEvent): void;\n    onExecuteRowAction(row: DataRowActionEvent): void;\n    setSorting(sortDetail: any): void;\n    formatSorting(sorting: TaskListCloudSortingModel[]): void;\n    isValidSorting(sorting: TaskListCloudSortingModel[]): string;\n    replacePriorityValues(row: DataRow, column: DataColumn): any;\n    abstract load(requestNode: any): any;\n    abstract createRequestNode(): any;\n}\n"]}