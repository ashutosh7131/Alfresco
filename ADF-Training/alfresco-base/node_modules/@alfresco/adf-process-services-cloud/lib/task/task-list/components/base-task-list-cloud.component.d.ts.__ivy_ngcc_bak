/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { OnChanges, SimpleChanges, EventEmitter, AfterContentInit, OnDestroy, OnInit } from '@angular/core';
import { AppConfigService, UserPreferencesService, DataTableSchema, PaginatedComponent, PaginationModel, DataRowEvent, CustomEmptyContentTemplateDirective, DataCellEvent, DataRowActionEvent, DataRow, DataColumn } from '@alfresco/adf-core';
import { TaskQueryCloudRequestModel } from '../models/filter-cloud-model';
import { BehaviorSubject } from 'rxjs';
import { TaskListCloudSortingModel } from '../models/task-list-sorting.model';
import { TaskCloudService } from '../../services/task-cloud.service';
export declare abstract class BaseTaskListCloudComponent extends DataTableSchema implements OnChanges, AfterContentInit, PaginatedComponent, OnDestroy, OnInit {
    private taskCloudService;
    private userPreferences;
    emptyCustomContent: CustomEmptyContentTemplateDirective;
    appName: string;
    selectionMode: string;
    multiselect: boolean;
    stickyHeader: boolean;
    sorting: TaskListCloudSortingModel[];
    showActions: boolean;
    actionsPosition: string;
    showContextMenu: boolean;
    showRowContextMenu: EventEmitter<DataCellEvent>;
    showRowActionsMenu: EventEmitter<DataCellEvent>;
    executeRowAction: EventEmitter<DataRowActionEvent>;
    rowClick: EventEmitter<string>;
    rowsSelected: EventEmitter<any[]>;
    success: EventEmitter<any>;
    error: EventEmitter<any>;
    pagination: BehaviorSubject<PaginationModel>;
    requestNode: TaskQueryCloudRequestModel;
    rows: any[];
    size: number;
    skipCount: number;
    currentInstanceId: any;
    isLoading: boolean;
    selectedInstances: any[];
    formattedSorting: any[];
    private defaultSorting;
    boundReplacePriorityValues: (row: DataRow, col: DataColumn) => any;
    private onDestroy$;
    constructor(appConfigService: AppConfigService, taskCloudService: TaskCloudService, userPreferences: UserPreferencesService, presetKey: string);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    ngAfterContentInit(): void;
    reload(): void;
    isListEmpty(): boolean;
    resetPagination(): void;
    updatePagination(pagination: PaginationModel): void;
    onSortingChanged(event: CustomEvent): void;
    onRowClick(item: DataRowEvent): void;
    onRowSelect(event: CustomEvent): void;
    onRowUnselect(event: CustomEvent): void;
    onRowKeyUp(event: CustomEvent): void;
    onShowRowActionsMenu(event: DataCellEvent): void;
    onShowRowContextMenu(event: DataCellEvent): void;
    onExecuteRowAction(row: DataRowActionEvent): void;
    setSorting(sortDetail: any): void;
    formatSorting(sorting: TaskListCloudSortingModel[]): void;
    isValidSorting(sorting: TaskListCloudSortingModel[]): string;
    replacePriorityValues(row: DataRow, column: DataColumn): any;
    abstract load(requestNode: any): any;
    abstract createRequestNode(): any;
}
