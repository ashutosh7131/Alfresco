import { EventEmitter, OnInit, OnDestroy } from '@angular/core';
import { DateAdapter } from '@angular/material/core';
import { Moment } from 'moment';
import { Observable } from 'rxjs';
import { FormBuilder, FormGroup, FormControl } from '@angular/forms';
import { LogService, UserPreferencesService, IdentityUserService, IdentityUserModel } from '@alfresco/adf-core';
import { PeopleCloudComponent } from '../../../people/components/people-cloud.component';
import { GroupCloudComponent } from '../../../group/components/group-cloud.component';
import { TaskCloudService } from '../../services/task-cloud.service';
import { TaskPriorityOption } from '../../models/task.model';
import * as ɵngcc0 from '@angular/core';
export declare class StartTaskCloudComponent implements OnInit, OnDestroy {
    private taskService;
    private dateAdapter;
    private userPreferencesService;
    private formBuilder;
    private identityUserService;
    private logService;
    static MAX_NAME_LENGTH: number;
    DATE_FORMAT: string;
    appName: string;
    maxNameLength: number;
    name: string;
    success: EventEmitter<any>;
    cancel: EventEmitter<void>;
    error: EventEmitter<any>;
    assignee: PeopleCloudComponent;
    candidateGroups: GroupCloudComponent;
    users$: Observable<any[]>;
    taskId: string;
    dueDate: Date;
    submitted: boolean;
    assigneeName: string;
    candidateGroupNames: string[];
    dateError: boolean;
    taskForm: FormGroup;
    currentUser: IdentityUserModel;
    formKey: string;
    priorities: TaskPriorityOption[];
    private assigneeForm;
    private groupForm;
    private onDestroy$;
    constructor(taskService: TaskCloudService, dateAdapter: DateAdapter<Moment>, userPreferencesService: UserPreferencesService, formBuilder: FormBuilder, identityUserService: IdentityUserService, logService: LogService);
    ngOnInit(): void;
    ngOnDestroy(): void;
    buildForm(): void;
    private getMaxNameLength;
    private loadCurrentUser;
    private loadDefaultPriorities;
    saveTask(): void;
    private createNewTask;
    onCancel(): void;
    onDateChanged(newDateValue: any): void;
    onAssigneeSelect(assignee: IdentityUserModel): void;
    onAssigneeRemove(): void;
    onCandidateGroupSelect(candidateGroup: any): void;
    onCandidateGroupRemove(candidateGroup: any): void;
    canStartTask(): boolean;
    whitespaceValidator(control: FormControl): {
        whitespace: boolean;
    };
    get nameController(): FormControl;
    get priorityController(): FormControl;
    get assigneeFormControl(): FormControl;
    get candidateUserFormControl(): FormControl;
    onFormSelect(formKey: string): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<StartTaskCloudComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<StartTaskCloudComponent, "adf-cloud-start-task", never, { "appName": "appName"; "maxNameLength": "maxNameLength"; "name": "name"; }, { "success": "success"; "cancel": "cancel"; "error": "error"; }, never, never>;
}

//# sourceMappingURL=start-task-cloud.component.d.ts.map