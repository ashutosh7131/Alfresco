/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { AlfrescoApiService, LogService, AppConfigService, IdentityUserService, CardViewArrayItem, TranslationService } from '@alfresco/adf-core';
import { Observable, Subject } from 'rxjs';
import { TaskDetailsCloudModel } from '../start-task/models/task-details-cloud.model';
import { BaseCloudService } from '../../services/base-cloud.service';
import { StartTaskCloudRequestModel } from '../start-task/models/start-task-cloud-request.model';
import { ProcessDefinitionCloud } from '../../models/process-definition-cloud.model';
import { TaskPriorityOption } from '../models/task.model';
import { TaskCloudServiceInterface } from './task-cloud.service.interface';
export declare class TaskCloudService extends BaseCloudService implements TaskCloudServiceInterface {
    private logService;
    private translateService;
    private identityUserService;
    dataChangesDetected$: Subject<unknown>;
    constructor(apiService: AlfrescoApiService, appConfigService: AppConfigService, logService: LogService, translateService: TranslationService, identityUserService: IdentityUserService);
    completeTask(appName: string, taskId: string): Observable<TaskDetailsCloudModel>;
    canCompleteTask(taskDetails: TaskDetailsCloudModel): boolean;
    isTaskEditable(taskDetails: TaskDetailsCloudModel): boolean;
    isAssigneePropertyClickable(taskDetails: TaskDetailsCloudModel, candidateUsers: CardViewArrayItem[], candidateGroups: CardViewArrayItem[]): boolean;
    canClaimTask(taskDetails: TaskDetailsCloudModel): boolean;
    canUnclaimTask(taskDetails: TaskDetailsCloudModel): boolean;
    claimTask(appName: string, taskId: string, assignee: string): Observable<TaskDetailsCloudModel>;
    unclaimTask(appName: string, taskId: string): Observable<TaskDetailsCloudModel>;
    getTaskById(appName: string, taskId: string): Observable<TaskDetailsCloudModel>;
    createNewTask(startTaskRequest: StartTaskCloudRequestModel, appName: string): Observable<TaskDetailsCloudModel>;
    updateTask(appName: string, taskId: string, payload: any): Observable<TaskDetailsCloudModel>;
    getCandidateUsers(appName: string, taskId: string): Observable<string[]>;
    getCandidateGroups(appName: string, taskId: string): Observable<string[]>;
    getProcessDefinitions(appName: string): Observable<ProcessDefinitionCloud[]>;
    assign(appName: string, taskId: string, assignee: string): Observable<TaskDetailsCloudModel>;
    getPriorityLabel(priority: number): string;
    get priorities(): TaskPriorityOption[];
    private isAssignedToMe;
}
