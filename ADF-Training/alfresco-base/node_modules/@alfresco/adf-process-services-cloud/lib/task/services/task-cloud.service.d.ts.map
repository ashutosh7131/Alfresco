{"version":3,"file":"task-cloud.service.d.ts","sources":["task-cloud.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { AlfrescoApiService, LogService, AppConfigService, IdentityUserService, CardViewArrayItem, TranslationService } from '@alfresco/adf-core';\nimport { Observable, Subject } from 'rxjs';\nimport { TaskDetailsCloudModel } from '../start-task/models/task-details-cloud.model';\nimport { BaseCloudService } from '../../services/base-cloud.service';\nimport { StartTaskCloudRequestModel } from '../start-task/models/start-task-cloud-request.model';\nimport { ProcessDefinitionCloud } from '../../models/process-definition-cloud.model';\nimport { TaskPriorityOption } from '../models/task.model';\nimport { TaskCloudServiceInterface } from './task-cloud.service.interface';\nexport declare class TaskCloudService extends BaseCloudService implements TaskCloudServiceInterface {\n    private logService;\n    private translateService;\n    private identityUserService;\n    dataChangesDetected$: Subject<unknown>;\n    constructor(apiService: AlfrescoApiService, appConfigService: AppConfigService, logService: LogService, translateService: TranslationService, identityUserService: IdentityUserService);\n    completeTask(appName: string, taskId: string): Observable<TaskDetailsCloudModel>;\n    canCompleteTask(taskDetails: TaskDetailsCloudModel): boolean;\n    isTaskEditable(taskDetails: TaskDetailsCloudModel): boolean;\n    isAssigneePropertyClickable(taskDetails: TaskDetailsCloudModel, candidateUsers: CardViewArrayItem[], candidateGroups: CardViewArrayItem[]): boolean;\n    canClaimTask(taskDetails: TaskDetailsCloudModel): boolean;\n    canUnclaimTask(taskDetails: TaskDetailsCloudModel): boolean;\n    claimTask(appName: string, taskId: string, assignee: string): Observable<TaskDetailsCloudModel>;\n    unclaimTask(appName: string, taskId: string): Observable<TaskDetailsCloudModel>;\n    getTaskById(appName: string, taskId: string): Observable<TaskDetailsCloudModel>;\n    createNewTask(startTaskRequest: StartTaskCloudRequestModel, appName: string): Observable<TaskDetailsCloudModel>;\n    updateTask(appName: string, taskId: string, payload: any): Observable<TaskDetailsCloudModel>;\n    getCandidateUsers(appName: string, taskId: string): Observable<string[]>;\n    getCandidateGroups(appName: string, taskId: string): Observable<string[]>;\n    getProcessDefinitions(appName: string): Observable<ProcessDefinitionCloud[]>;\n    assign(appName: string, taskId: string, assignee: string): Observable<TaskDetailsCloudModel>;\n    getPriorityLabel(priority: number): string;\n    get priorities(): TaskPriorityOption[];\n    private isAssignedToMe;\n}\n"]}