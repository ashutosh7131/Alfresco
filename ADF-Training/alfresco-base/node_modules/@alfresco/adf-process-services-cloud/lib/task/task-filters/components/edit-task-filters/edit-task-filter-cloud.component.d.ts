/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { FormBuilder } from '@angular/forms';
import { DateAdapter } from '@angular/material/core';
import { MatDialog } from '@angular/material/dialog';
import { Observable } from 'rxjs';
import { Moment } from 'moment';
import { TaskFilterCloudModel, TaskFilterProperties, TaskFilterAction } from '../../models/filter-cloud.model';
import { TaskFilterCloudService } from '../../services/task-filter-cloud.service';
import { TranslationService, UserPreferencesService } from '@alfresco/adf-core';
import { AppsProcessCloudService } from '../../../../app/services/apps-process-cloud.service';
import { TaskCloudService } from '../../../services/task-cloud.service';
import { BaseEditTaskFilterCloudComponent } from './base-edit-task-filter-cloud.component';
import * as ɵngcc0 from '@angular/core';
export declare class EditTaskFilterCloudComponent extends BaseEditTaskFilterCloudComponent<TaskFilterCloudModel> {
    private taskFilterCloudService;
    constructor(formBuilder: FormBuilder, dialog: MatDialog, translateService: TranslationService, taskFilterCloudService: TaskFilterCloudService, dateAdapter: DateAdapter<Moment>, userPreferencesService: UserPreferencesService, appsProcessCloudService: AppsProcessCloudService, taskCloudService: TaskCloudService);
    assignNewFilter(model: TaskFilterCloudModel): void;
    protected getTaskFilterById(appName: string, id: string): Observable<TaskFilterCloudModel>;
    createAndFilterProperties(): TaskFilterProperties[];
    getDefaultFilterProperties(): string[];
    getDefaultSortProperties(): string[];
    private setLastModifiedToFilter;
    protected updateFilter(filterToUpdate: TaskFilterCloudModel): Observable<any>;
    protected deleteFilter(filterToDelete: TaskFilterCloudModel): Observable<TaskFilterCloudModel[]>;
    protected addFilter(filterToAdd: TaskFilterCloudModel): Observable<any>;
    isDisabledForDefaultFilters(action: TaskFilterAction): boolean;
    restoreDefaultTaskFilters(): Observable<TaskFilterCloudModel[]>;
    private createLastModifiedProperty;
    private getStatusOptions;
    createTaskFilterProperties(): TaskFilterProperties[];
    static ɵfac: ɵngcc0.ɵɵFactoryDef<EditTaskFilterCloudComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<EditTaskFilterCloudComponent, "adf-cloud-edit-task-filter", never, {}, {}, never, never>;
}

//# sourceMappingURL=edit-task-filter-cloud.component.d.ts.map