/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { FormBuilder } from '@angular/forms';
import { DateAdapter } from '@angular/material/core';
import { MatDialog } from '@angular/material/dialog';
import { Observable } from 'rxjs';
import { Moment } from 'moment';
import { TaskFilterProperties, TaskFilterAction, ServiceTaskFilterCloudModel } from '../../models/filter-cloud.model';
import { TranslationService, UserPreferencesService } from '@alfresco/adf-core';
import { AppsProcessCloudService } from '../../../../app/services/apps-process-cloud.service';
import { TaskCloudService } from '../../../services/task-cloud.service';
import { ServiceTaskFilterCloudService } from '../../services/service-task-filter-cloud.service';
import { BaseEditTaskFilterCloudComponent } from './base-edit-task-filter-cloud.component';
export declare class EditServiceTaskFilterCloudComponent extends BaseEditTaskFilterCloudComponent<ServiceTaskFilterCloudModel> {
    private serviceTaskFilterCloudService;
    constructor(formBuilder: FormBuilder, dialog: MatDialog, translateService: TranslationService, serviceTaskFilterCloudService: ServiceTaskFilterCloudService, dateAdapter: DateAdapter<Moment>, userPreferencesService: UserPreferencesService, appsProcessCloudService: AppsProcessCloudService, taskCloudService: TaskCloudService);
    assignNewFilter(model: ServiceTaskFilterCloudModel): void;
    protected getTaskFilterById(appName: string, id: string): Observable<ServiceTaskFilterCloudModel>;
    getDefaultFilterProperties(): string[];
    getDefaultSortProperties(): string[];
    protected updateFilter(filterToUpdate: ServiceTaskFilterCloudModel): Observable<ServiceTaskFilterCloudModel[]>;
    protected deleteFilter(filterToDelete: ServiceTaskFilterCloudModel): Observable<ServiceTaskFilterCloudModel[]>;
    protected addFilter(filterToAdd: ServiceTaskFilterCloudModel): Observable<any>;
    isDisabledForDefaultFilters(action: TaskFilterAction): boolean;
    restoreDefaultTaskFilters(): Observable<ServiceTaskFilterCloudModel[]>;
    private getStatusOptions;
    createTaskFilterProperties(): TaskFilterProperties[];
}
