/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { OnChanges, SimpleChanges, OnInit, OnDestroy, EventEmitter } from '@angular/core';
import { FilterOptions, TaskFilterAction, TaskFilterProperties } from '../../models/filter-cloud.model';
import { TaskCloudService } from './../../../services/task-cloud.service';
import { AppsProcessCloudService } from './../../../../app/services/apps-process-cloud.service';
import { DateCloudFilterType, DateRangeFilter } from '../../../../models/date-cloud-filter.model';
import { Moment } from 'moment';
import { AbstractControl, FormBuilder, FormGroup } from '@angular/forms';
import { Observable, Subject } from 'rxjs';
import { DateAdapter } from '@angular/material/core';
import { IdentityGroupModel, IdentityUserModel, TranslationService, UserPreferencesService } from '@alfresco/adf-core';
import { MatDialog } from '@angular/material/dialog';
export interface DropdownOption {
    value: string;
    label: string;
}
export declare abstract class BaseEditTaskFilterCloudComponent<T> implements OnInit, OnChanges, OnDestroy {
    protected formBuilder: FormBuilder;
    protected dateAdapter: DateAdapter<Moment>;
    protected userPreferencesService: UserPreferencesService;
    protected appsProcessCloudService: AppsProcessCloudService;
    protected taskCloudService: TaskCloudService;
    protected dialog: MatDialog;
    protected translateService: TranslationService;
    static ACTION_SAVE: string;
    static ACTION_SAVE_AS: string;
    static ACTION_DELETE: string;
    static APP_RUNNING_STATUS: string;
    static APPLICATION_NAME: string;
    static PROCESS_DEFINITION_NAME: string;
    static LAST_MODIFIED: string;
    static SORT: string;
    static ORDER: string;
    static DEFAULT_ACTIONS: string[];
    static FORMAT_DATE: string;
    static ACTIONS_DISABLED_BY_DEFAULT: string[];
    appName: string;
    id: string;
    showTitle: boolean;
    showTaskFilterName: boolean;
    filterProperties: string[];
    role: string;
    showFilterActions: boolean;
    actions: string[];
    sortProperties: string[];
    action: EventEmitter<TaskFilterAction>;
    protected applicationNames: DropdownOption[];
    protected processDefinitionNames: DropdownOption[];
    protected formHasBeenChanged: boolean;
    editTaskFilterForm: FormGroup;
    taskFilterProperties: TaskFilterProperties[];
    taskFilterActions: TaskFilterAction[];
    toggleFilterActions: boolean;
    sortDirections: DropdownOption[];
    allProcessDefinitionNamesOption: DropdownOption;
    taskFilter: T;
    changedTaskFilter: T;
    filterChange: EventEmitter<T>;
    protected onDestroy$: Subject<boolean>;
    isLoading: boolean;
    constructor(formBuilder: FormBuilder, dateAdapter: DateAdapter<Moment>, userPreferencesService: UserPreferencesService, appsProcessCloudService: AppsProcessCloudService, taskCloudService: TaskCloudService, dialog: MatDialog, translateService: TranslationService);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    createFilterActions(): TaskFilterAction[];
    hasFormChanged(action: TaskFilterAction): boolean;
    onExpand(): void;
    onClose(): void;
    isDisabledAction(action: TaskFilterAction): boolean;
    protected deepCompare(left: any, right: any): boolean;
    getSanitizeFilterName(filterName: string): string;
    private replaceSpaceWithHyphen;
    executeFilterActions(action: TaskFilterAction): void;
    getRunningApplications(): void;
    getProcessDefinitions(): void;
    checkMandatoryActions(): void;
    private isValidAction;
    isFormValid(): boolean;
    getPropertyController(property: TaskFilterProperties): AbstractControl;
    onDateChanged(newDateValue: any, dateProperty: TaskFilterProperties): void;
    onDateRangeFilterChanged(dateRange: DateRangeFilter, property: TaskFilterProperties): void;
    onChangedUser(users: IdentityUserModel[], userProperty: TaskFilterProperties): void;
    onAssignedChange(assignedValue: IdentityUserModel): void;
    onAssignedGroupsChange(groups: IdentityGroupModel[]): void;
    hasError(property: TaskFilterProperties): boolean;
    hasLastModifiedProperty(): boolean;
    get createSortProperties(): FilterOptions[];
    createAndFilterActions(): TaskFilterAction[];
    isValidProperty(filterProperties: string[], key: string): boolean;
    checkForProperty(property: string): boolean;
    hasSortProperty(): boolean;
    removeOrderProperty(filteredProperties: TaskFilterProperties[]): TaskFilterProperties[];
    createAndFilterProperties(): TaskFilterProperties[];
    onFilterChange(): void;
    getFormControlsConfig(taskFilterProperties: TaskFilterProperties[]): any;
    private getAttributesControlConfig;
    buildForm(taskFilterProperties: TaskFilterProperties[]): void;
    onDateTypeChange(dateType: DateCloudFilterType, property: TaskFilterProperties): void;
    protected retrieveTaskFilterAndBuildForm(): void;
    delete(deleteAction: TaskFilterAction): void;
    save(saveAction: TaskFilterAction): void;
    saveAs(saveAsAction: TaskFilterAction): void;
    checkMandatoryFilterProperties(): void;
    checkMandatorySortProperties(): void;
    abstract getDefaultFilterProperties(): string[];
    abstract getDefaultSortProperties(): string[];
    abstract isDisabledForDefaultFilters(action: TaskFilterAction): boolean;
    abstract createTaskFilterProperties(): TaskFilterProperties[];
    protected abstract getTaskFilterById(appName: string, id: string): any;
    abstract assignNewFilter(formValues: any): void;
    protected abstract restoreDefaultTaskFilters(): Observable<T[]>;
    protected abstract addFilter(filterToAdd: T): Observable<any>;
    protected abstract deleteFilter(filterToDelete: T): Observable<T[]>;
    protected abstract updateFilter(filterToUpdate: T): Observable<any>;
}
