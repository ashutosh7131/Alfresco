{"version":3,"file":"adf-process-services-cloud.js","sources":["../../../process-services-cloud/src/lib/material.module.ts","../../../process-services-cloud/src/lib/app/models/application-instance.model.ts","../../../process-services-cloud/src/lib/app/components/app-details-cloud.component.ts","../../../process-services-cloud/src/lib/app/services/apps-process-cloud.service.ts","../../../process-services-cloud/src/lib/app/components/app-list-cloud.component.ts","../../../process-services-cloud/src/lib/app/app-list-cloud.module.ts","../../../process-services-cloud/src/lib/task/task-list/models/filter-cloud-model.ts","../../../process-services-cloud/src/lib/services/base-cloud.service.ts","../../../process-services-cloud/src/lib/task/task-list/services/task-list-cloud.service.ts","../../../process-services-cloud/src/lib/task/task-list/models/task-preset-cloud.model.ts","../../../process-services-cloud/src/lib/task/task-list/models/task-list-sorting.model.ts","../../../process-services-cloud/src/lib/task/start-task/models/start-task-cloud-request.model.ts","../../../process-services-cloud/src/lib/models/process-definition-cloud.model.ts","../../../process-services-cloud/src/lib/task/models/task.model.ts","../../../process-services-cloud/src/lib/task/services/task-cloud.service.ts","../../../process-services-cloud/src/lib/task/task-list/components/base-task-list-cloud.component.ts","../../../process-services-cloud/src/lib/task/task-list/components/task-list-cloud.component.ts","../../../process-services-cloud/src/lib/task/task-list/services/service-task-list-cloud.service.ts","../../../process-services-cloud/src/lib/task/task-list/components/service-task-list-cloud.component.ts","../../../process-services-cloud/src/lib/task/task-list/task-list-cloud.module.ts","../../../process-services-cloud/src/lib/models/date-cloud-filter.model.ts","../../../process-services-cloud/src/lib/common/date-range-filter/date-range-filter.service.ts","../../../process-services-cloud/src/lib/task/task-filters/models/filter-cloud.model.ts","../../../process-services-cloud/src/lib/services/cloud-token.service.ts","../../../process-services-cloud/src/lib/services/notification-cloud.service.ts","../../../process-services-cloud/src/lib/task/task-filters/services/task-filter-cloud.service.ts","../../../process-services-cloud/src/lib/task/task-filters/components/base-task-filters-cloud.component.ts","../../../process-services-cloud/src/lib/task/task-filters/components/task-filters-cloud.component.ts","../../../process-services-cloud/src/lib/common/date-range-filter/date-range-filter.component.ts","../../../process-services-cloud/src/lib/common/process-common.module.ts","../../../process-services-cloud/src/lib/people/components/people-cloud.component.ts","../../../process-services-cloud/src/lib/people/people-cloud.module.ts","../../../process-services-cloud/src/lib/task/task-filters/services/service-task-filter-cloud.service.ts","../../../process-services-cloud/src/lib/task/task-filters/components/task-filter-dialog/task-filter-dialog-cloud.component.ts","../../../process-services-cloud/src/lib/task/task-filters/components/edit-task-filters/base-edit-task-filter-cloud.component.ts","../../../process-services-cloud/src/lib/task/task-filters/components/edit-task-filters/edit-service-task-filter-cloud.component.ts","../../../process-services-cloud/src/lib/task/task-filters/components/edit-task-filters/edit-task-filter-cloud.component.ts","../../../process-services-cloud/src/lib/task/task-filters/components/service-task-filters-cloud.component.ts","../../../process-services-cloud/src/lib/task/task-filters/components/task-assignment-filter/task-assignment-filter.component.ts","../../../process-services-cloud/src/lib/group/components/group-cloud.component.ts","../../../process-services-cloud/src/lib/group/pipe/group-initial.pipe.ts","../../../process-services-cloud/src/lib/group/group-cloud.module.ts","../../../process-services-cloud/src/lib/task/task-filters/task-filters-cloud.module.ts","../../../process-services-cloud/src/lib/task/start-task/components/start-task-cloud.component.ts","../../../process-services-cloud/src/lib/form/models/task-variable-cloud.model.ts","../../../process-services-cloud/src/lib/form/services/form-cloud.service.ts","../../../process-services-cloud/src/lib/form/components/form-cloud.component.ts","../../../process-services-cloud/src/lib/form/services/form-definition-selector-cloud.service.ts","../../../process-services-cloud/src/lib/form/components/form-definition-selector-cloud.component.ts","../../../process-services-cloud/src/lib/form/components/form-cloud-custom-outcomes.component.ts","../../../process-services-cloud/src/lib/form/components/widgets/date/date-cloud.widget.ts","../../../process-services-cloud/src/lib/form/components/widgets/dropdown/dropdown-cloud.widget.ts","../../../process-services-cloud/src/lib/form/components/widgets/group/group-cloud.widget.ts","../../../process-services-cloud/src/lib/form/components/widgets/people/people-cloud.widget.ts","../../../process-services-cloud/src/lib/form/services/content-cloud-node-selector.service.ts","../../../process-services-cloud/src/lib/form/services/process-cloud-content.service.ts","../../../process-services-cloud/src/lib/form/models/form-cloud-representation.model.ts","../../../process-services-cloud/src/lib/form/components/widgets/attach-file/upload-cloud.widget.ts","../../../process-services-cloud/src/lib/form/components/widgets/attach-file/attach-file-cloud-widget.component.ts","../../../process-services-cloud/src/lib/form/components/widgets/properties-viewer/properties-viewer.widget.ts","../../../process-services-cloud/src/lib/form/components/widgets/properties-viewer/properties-viewer-wrapper/properties-viewer-wrapper.component.ts","../../../process-services-cloud/src/lib/form/components/widgets/radio-buttons/radio-buttons-cloud.widget.ts","../../../process-services-cloud/src/lib/form/components/widgets/attach-file/file-properties-table-cloud.component.ts","../../../process-services-cloud/src/lib/form/form-cloud.module.ts","../../../process-services-cloud/src/lib/task/start-task/start-task-cloud.module.ts","../../../process-services-cloud/src/lib/task/task-header/components/task-header-cloud.component.ts","../../../process-services-cloud/src/lib/task/task-header/task-header-cloud.module.ts","../../../process-services-cloud/src/lib/task/directives/complete-task.directive.ts","../../../process-services-cloud/src/lib/task/directives/claim-task-cloud.directive.ts","../../../process-services-cloud/src/lib/task/directives/unclaim-task-cloud.directive.ts","../../../process-services-cloud/src/lib/task/directives/task-directive.module.ts","../../../process-services-cloud/src/lib/task/task-form/components/task-form-cloud.component.ts","../../../process-services-cloud/src/lib/task/task-form/task-form.module.ts","../../../process-services-cloud/src/lib/task/task-cloud.module.ts","../../../process-services-cloud/src/lib/process/process-filters/models/process-filter-cloud.model.ts","../../../process-services-cloud/src/lib/process/process-filters/services/process-filter-cloud.service.ts","../../../process-services-cloud/src/lib/process/process-filters/components/process-filters-cloud.component.ts","../../../process-services-cloud/src/lib/process/process-filters/components/process-filter-dialog-cloud.component.ts","../../../process-services-cloud/src/lib/process/services/process-cloud.service.ts","../../../process-services-cloud/src/lib/process/process-filters/components/edit-process-filter-cloud.component.ts","../../../process-services-cloud/src/lib/process/process-filters/process-filters-cloud.module.ts","../../../process-services-cloud/src/lib/process/process-list/services/process-list-cloud.service.ts","../../../process-services-cloud/src/lib/process/process-list/models/process-cloud-preset.model.ts","../../../process-services-cloud/src/lib/process/process-list/models/process-cloud-query-request.model.ts","../../../process-services-cloud/src/lib/process/process-list/models/process-list-sorting.model.ts","../../../process-services-cloud/src/lib/process/process-list/components/process-list-cloud.component.ts","../../../process-services-cloud/src/lib/process/process-list/process-list-cloud.module.ts","../../../process-services-cloud/src/lib/process/start-process/services/start-process-cloud.service.ts","../../../process-services-cloud/src/lib/process/start-process/models/process-payload-cloud.model.ts","../../../process-services-cloud/src/lib/pipes/process-name-cloud.pipe.ts","../../../process-services-cloud/src/lib/process/start-process/components/start-process-cloud.component.ts","../../../process-services-cloud/src/lib/process/start-process/start-process-cloud.module.ts","../../../process-services-cloud/src/lib/process/process-header/components/process-header-cloud.component.ts","../../../process-services-cloud/src/lib/process/process-header/process-header-cloud.module.ts","../../../process-services-cloud/src/lib/process/directives/cancel-process.directive.ts","../../../process-services-cloud/src/lib/process/directives/process-directive.module.ts","../../../process-services-cloud/src/lib/process/process-cloud.module.ts","../../../process-services-cloud/src/lib/services/user-preference-cloud.service.ts","../../../process-services-cloud/src/lib/services/local-preference-cloud.service.ts","../../../process-services-cloud/src/lib/services/preference-cloud.interface.ts","../../../process-services-cloud/src/lib/services/form-fields.interfaces.ts","../../../process-services-cloud/src/lib/services/public-api.ts","../../../process-services-cloud/src/lib/form/components/cloud-form-rendering.service.ts","../../../process-services-cloud/src/lib/pipes/process-services-cloud-pipe.module.ts","../../../process-services-cloud/src/lib/process-services-cloud.module.ts","../../../process-services-cloud/src/lib/app/public-api.ts","../../../process-services-cloud/src/lib/process/process-list/public-api.ts","../../../process-services-cloud/src/lib/process/process-filters/public-api.ts","../../../process-services-cloud/src/lib/process/start-process/models/process-instance-cloud.model.ts","../../../process-services-cloud/src/lib/process/start-process/public-api.ts","../../../process-services-cloud/src/lib/process/process-header/public-api.ts","../../../process-services-cloud/src/lib/process/directives/public-api.ts","../../../process-services-cloud/src/lib/process/public-api.ts","../../../process-services-cloud/src/lib/task/task-list/models/service-task-cloud.model.ts","../../../process-services-cloud/src/lib/task/task-list/public-api.ts","../../../process-services-cloud/src/lib/task/task-filters/public-api.ts","../../../process-services-cloud/src/lib/task/start-task/models/task-details-cloud.model.ts","../../../process-services-cloud/src/lib/task/start-task/public-api.ts","../../../process-services-cloud/src/lib/task/task-header/public-api.ts","../../../process-services-cloud/src/lib/task/task-form/public-api.ts","../../../process-services-cloud/src/lib/task/directives/public-api.ts","../../../process-services-cloud/src/lib/task/models/public-api.ts","../../../process-services-cloud/src/lib/task/services/start-task-cloud.service.ts","../../../process-services-cloud/src/lib/task/public-api.ts","../../../process-services-cloud/src/lib/group/public-api.ts","../../../process-services-cloud/src/lib/people/public-api.ts","../../../process-services-cloud/src/lib/form/public-api.ts","../../../process-services-cloud/src/lib/types.ts","../../../process-services-cloud/src/lib/models/application-version.model.ts","../../../process-services-cloud/src/lib/models/engine-event-cloud.model.ts","../../../process-services-cloud/src/public-api.ts"],"sourcesContent":["/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NgModule } from '@angular/core';\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatNativeDateModule, MatOptionModule, MatRippleModule } from '@angular/material/core';\nimport { MAT_FORM_FIELD_DEFAULT_OPTIONS } from '@angular/material/form-field';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatTooltipModule } from '@angular/material/tooltip';\n\n@NgModule({\n    providers: [\n        { provide: MAT_FORM_FIELD_DEFAULT_OPTIONS, useValue: { floatLabel: 'never' } }\n    ],\n    imports: [\n        MatAutocompleteModule, MatButtonModule, MatCardModule, MatDialogModule,\n        MatCheckboxModule, MatDatepickerModule, MatGridListModule, MatIconModule, MatInputModule,\n        MatListModule, MatOptionModule, MatRadioModule, MatSelectModule, MatSlideToggleModule, MatTableModule,\n        MatTabsModule, MatProgressSpinnerModule, MatNativeDateModule, MatRippleModule, MatTooltipModule,\n        MatChipsModule, MatMenuModule, MatExpansionModule\n    ],\n    exports: [\n        MatAutocompleteModule, MatButtonModule, MatCardModule, MatDialogModule,\n        MatCheckboxModule, MatDatepickerModule, MatGridListModule, MatIconModule, MatInputModule,\n        MatListModule, MatOptionModule, MatRadioModule, MatSelectModule, MatSlideToggleModule, MatTableModule,\n        MatTabsModule, MatProgressSpinnerModule, MatNativeDateModule, MatRippleModule, MatTooltipModule,\n        MatChipsModule, MatMenuModule, MatExpansionModule\n    ]\n})\nexport class MaterialModule {}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const DEFAULT_APP_INSTANCE_THEME = 'theme-2';\nexport const DEFAULT_APP_INSTANCE_ICON = 'favorite_border';\n\nexport interface ApplicationInstanceModel {\n    name?: string;\n    createdAt?: any;\n    status?: string;\n    theme?: string;\n    icon?: string;\n    description?: string;\n    connectors?: any;\n    descriptor?: Descriptor;\n}\n\nexport interface Descriptor {\n    name?: string;\n    projectId?: string;\n    releaseId?: string;\n    releaseVersion?: number;\n    security?: DescriptorSecurity[];\n    infrastructure?: DescriptorInfrastructure;\n    variables?: DescriptorVariables;\n    version?: string;\n}\n\nexport interface DescriptorSecurity {\n    role: string;\n    groups: string[];\n    users: string[];\n}\n\nexport interface DescriptorVariables {\n    [key: string]: any;\n    connectors?: { [key: string]: any; };\n}\n\nexport interface DescriptorInfrastructure {\n    [key: string]: any;\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, Input, Output, EventEmitter, ViewEncapsulation } from '@angular/core';\nimport { ApplicationInstanceModel, DEFAULT_APP_INSTANCE_ICON, DEFAULT_APP_INSTANCE_THEME } from '../models/application-instance.model';\n\n@Component({\n  selector: 'adf-cloud-app-details',\n  templateUrl: './app-details-cloud.component.html',\n  styleUrls: ['./app-details-cloud.component.scss'],\n  encapsulation: ViewEncapsulation.None\n})\n\nexport class AppDetailsCloudComponent {\n\n  @Input()\n  applicationInstance: ApplicationInstanceModel;\n\n  @Output()\n  selectedApp = new EventEmitter<ApplicationInstanceModel>();\n\n  /**\n   * Pass the selected app as next\n   * @param app\n   */\n  onSelectApp(app: ApplicationInstanceModel): void {\n    this.selectedApp.emit(app);\n  }\n\n  getTheme(): string {\n    return this.applicationInstance.theme || DEFAULT_APP_INSTANCE_THEME;\n  }\n\n  getIcon(): string {\n    return this.applicationInstance.icon || DEFAULT_APP_INSTANCE_ICON;\n  }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Injectable } from '@angular/core';\nimport { Observable, from, throwError, of } from 'rxjs';\nimport { map, catchError } from 'rxjs/operators';\nimport { AlfrescoApiService, AppConfigService, LogService } from '@alfresco/adf-core';\nimport { Oauth2Auth } from '@alfresco/js-api';\nimport { ApplicationInstanceModel } from '../models/application-instance.model';\n\n@Injectable({ providedIn: 'root' })\nexport class AppsProcessCloudService {\n\n    deployedApps: ApplicationInstanceModel[];\n\n    constructor(\n        private apiService: AlfrescoApiService,\n        private logService: LogService,\n        private appConfigService: AppConfigService) {\n        this.loadApps();\n    }\n\n    /**\n     * Gets a list of deployed apps for this user by status.\n     * @param status Required status value\n     * @param role to filter the apps\n     * @returns The list of deployed apps\n     */\n    getDeployedApplicationsByStatus(status: string, role?: string): Observable<ApplicationInstanceModel[]> {\n        return this.hasDeployedApps() ? of(this.deployedApps) : this.getApplicationsByStatus(status, role);\n    }\n\n    hasDeployedApps(): boolean {\n        return this.deployedApps && this.deployedApps.length > 0;\n    }\n\n    loadApps() {\n        const apps = this.appConfigService.get<any>('alfresco-deployed-apps', []);\n        apps.map((app) => {\n            app.theme = app.theme ? app.theme : 'theme-1';\n            app.icon = app.icon ? app.icon : 'favorite';\n        });\n        this.deployedApps = apps;\n    }\n\n    private getApplicationsByStatus(status: string, role?: string): Observable<ApplicationInstanceModel[]> {\n        if (status === '') {\n            return of([]);\n        }\n        const api: Oauth2Auth = this.apiService.getInstance().oauth2Auth;\n        const path = this.getApplicationUrl();\n        const pathParams = {}, queryParams = { status: status, roles : role, sort: 'name' },\n            headerParams = {}, formParams = {}, bodyParam = {},\n            contentTypes = ['application/json'], accepts = ['application/json'];\n\n        return from(api.callCustomApi(path, 'GET', pathParams, queryParams, headerParams, formParams, bodyParam,\n            contentTypes, accepts))\n            .pipe(\n                map((applications: any) => {\n                    return applications.list.entries.map((application) => application.entry);\n                }),\n                catchError((err) => this.handleError(err))\n            );\n    }\n\n    private getApplicationUrl(): string {\n        return `${this.appConfigService.get('bpmHost')}/deployment-service/v1/applications`;\n    }\n\n    private handleError(error?: any) {\n        this.logService.error(error);\n        return throwError(error || 'Server error');\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CustomEmptyContentTemplateDirective } from '@alfresco/adf-core';\nimport { AfterContentInit, Component, EventEmitter, Input, OnInit, Output, ContentChild } from '@angular/core';\nimport { Observable, of, Subject } from 'rxjs';\nimport { AppsProcessCloudService } from '../services/apps-process-cloud.service';\nimport { ApplicationInstanceModel } from '../models/application-instance.model';\nimport { catchError } from 'rxjs/operators';\n\n@Component({\n    selector: 'adf-cloud-app-list',\n    templateUrl: './app-list-cloud.component.html',\n    styleUrls: ['./app-list-cloud.component.scss']\n})\nexport class AppListCloudComponent implements OnInit, AfterContentInit {\n\n    public static LAYOUT_LIST: string = 'LIST';\n    public static LAYOUT_GRID: string = 'GRID';\n    public static RUNNING_STATUS: string = 'RUNNING';\n\n    @ContentChild(CustomEmptyContentTemplateDirective)\n    emptyCustomContent: CustomEmptyContentTemplateDirective;\n\n    /** (**required**) Defines the layout of the apps. There are two possible\n     * values, \"GRID\" and \"LIST\".\n     */\n    @Input()\n    layoutType: string = AppListCloudComponent.LAYOUT_GRID;\n\n    /** Emitted when an app entry is clicked. */\n    @Output()\n    appClick = new EventEmitter<ApplicationInstanceModel>();\n\n    apps$: Observable<any>;\n    loadingError$ = new Subject<boolean>();\n    hasEmptyCustomContentTemplate: boolean = false;\n\n    constructor(private appsProcessCloudService: AppsProcessCloudService) { }\n\n    ngOnInit() {\n        if (!this.isValidType()) {\n            this.setDefaultLayoutType();\n        }\n\n        this.apps$ = this.appsProcessCloudService.getDeployedApplicationsByStatus(AppListCloudComponent.RUNNING_STATUS)\n            .pipe(\n                catchError(() => {\n                    this.loadingError$.next(true);\n                    return of();\n                })\n            );\n    }\n\n    ngAfterContentInit() {\n        if (this.emptyCustomContent) {\n            this.hasEmptyCustomContentTemplate = true;\n        }\n    }\n\n    onSelectApp(app: ApplicationInstanceModel): void {\n        this.appClick.emit(app);\n    }\n\n    /**\n     * Check if the value of the layoutType property is an allowed value\n     */\n    isValidType(): boolean {\n        if (this.layoutType && (this.layoutType === AppListCloudComponent.LAYOUT_LIST || this.layoutType === AppListCloudComponent.LAYOUT_GRID)) {\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Assign the default value to LayoutType\n     */\n    setDefaultLayoutType(): void {\n        this.layoutType = AppListCloudComponent.LAYOUT_GRID;\n    }\n\n    /**\n     * Return true if the layout type is LIST\n     */\n    isList(): boolean {\n        return this.layoutType === AppListCloudComponent.LAYOUT_LIST;\n    }\n\n    /**\n     * Return true if the layout type is GRID\n     */\n    isGrid(): boolean {\n        return this.layoutType === AppListCloudComponent.LAYOUT_GRID;\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NgModule } from '@angular/core';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { MaterialModule } from '../material.module';\nimport { CommonModule } from '@angular/common';\nimport { AppDetailsCloudComponent } from './components/app-details-cloud.component';\nimport { AppListCloudComponent } from './components/app-list-cloud.component';\nimport { TemplateModule, CoreModule } from '@alfresco/adf-core';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        TemplateModule,\n        MaterialModule,\n        FlexLayoutModule,\n        CoreModule\n    ],\n    declarations: [\n        AppListCloudComponent,\n        AppDetailsCloudComponent\n    ],\n    exports: [\n        AppListCloudComponent,\n        AppDetailsCloudComponent\n    ]\n})\nexport class AppListCloudModule {\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { TaskListCloudSortingModel } from './task-list-sorting.model';\n\nexport class TaskQueryCloudRequestModel {\n    appName: string;\n    appVersion?: string;\n    assignee?: string;\n    claimedDate?: string;\n    createdDate?: Date;\n    createdFrom?: string;\n    createdTo?: string;\n    description?: string;\n    dueDate?: any;\n    lastModifiedFrom?: any;\n    lastModifiedTo?: any;\n    dueDateFrom?: any;\n    dueDateTo?: any;\n    id?: string;\n    name?: string;\n    owner?: string;\n    parentTaskId?: string;\n    standalone?: boolean;\n    priority?: number;\n    processDefinitionId?: string;\n    processDefinitionName?: string;\n    processInstanceId?: string;\n    status?: string;\n    completedBy?: string;\n    maxItems: number;\n    skipCount: number;\n    sorting?: TaskListCloudSortingModel[];\n    completedDate?: Date;\n    completedFrom?: string;\n    completedTo?: string;\n    candidateGroupId?: string;\n\n    constructor(obj?: any) {\n        if (obj) {\n            this.appName = obj.appName;\n            this.appVersion = obj.appVersion;\n            this.assignee = obj.assignee;\n            this.claimedDate = obj.claimedDate;\n            this.createdDate = obj.createdDate;\n            this.createdFrom = obj.createdFrom;\n            this.createdTo = obj.createdTo;\n            this.description = obj.description;\n            this.dueDate = obj.dueDate;\n            this.lastModifiedFrom = obj.lastModifiedFrom;\n            this.lastModifiedTo = obj.lastModifiedTo;\n            this.dueDateFrom = obj.dueDateFrom;\n            this.dueDateTo = obj.dueDateTo;\n            this.id = obj.id;\n            this.name = obj.name;\n            this.owner = obj.owner;\n            this.parentTaskId = obj.parentTaskId;\n            this.standalone = obj.standalone;\n            this.priority = obj.priority;\n            this.processDefinitionId = obj.processDefinitionId;\n            this.processDefinitionName = obj.processDefinitionName;\n            this.processInstanceId = obj.processInstanceId;\n            this.status = obj.status;\n            this.completedBy = obj.completedBy;\n            this.maxItems = obj.maxItems;\n            this.skipCount = obj.skipCount;\n            this.sorting = obj.sorting;\n            this.completedFrom = obj.completedFrom;\n            this.completedTo = obj.completedTo;\n            this.completedDate = obj.completedDate;\n            this.candidateGroupId = obj.candidateGroupId;\n        }\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AlfrescoApiService, AppConfigService } from '@alfresco/adf-core';\nimport { from, Observable } from 'rxjs';\n\nexport interface CallApiParams {\n    path: string;\n    httpMethod: string;\n    pathParams?: any;\n    queryParams?: any;\n    headerParams?: any;\n    formParams?: any;\n    bodyParam?: any;\n    contentTypes?: string[];\n    accepts?: string[];\n    returnType?: any;\n    contextRoot?: string;\n    responseType?: string;\n}\n\nexport class BaseCloudService {\n\n    protected defaultParams: CallApiParams = {\n        path: '',\n        httpMethod: '',\n        contentTypes: ['application/json'],\n        accepts: ['application/json'],\n        returnType: Object\n    };\n\n    constructor(\n        protected apiService: AlfrescoApiService,\n        protected appConfigService: AppConfigService) {}\n\n    getBasePath(appName: string): string {\n        return appName\n            ? `${this.contextRoot}/${appName}`\n            : this.contextRoot;\n    }\n\n    protected post<T, R>(url: string, data?: T): Observable<R> {\n        return from(\n            this.callApi<R>({\n                ...this.defaultParams,\n                path: url,\n                httpMethod: 'POST',\n                bodyParam: data\n            })\n        );\n    }\n\n    protected put<T, R>(url: string, data?: T): Observable<R> {\n        return from(\n            this.callApi<R>({\n                ...this.defaultParams,\n                path: url,\n                httpMethod: 'PUT',\n                bodyParam: data\n            })\n        );\n    }\n\n    protected delete(url: string): Observable<void> {\n        return from(\n            this.callApi<void>({\n                ...this.defaultParams,\n                path: url,\n                httpMethod: 'DELETE'\n            })\n        );\n    }\n\n    protected get<T>(url: string, queryParams?: any): Observable<T> {\n        return from(\n            this.callApi<T>({\n                ...this.defaultParams,\n                path: url,\n                httpMethod: 'GET',\n                queryParams\n            })\n        );\n    }\n\n    protected callApi<T>(params: CallApiParams): Promise<T> {\n        return this.apiService.getInstance()\n            .oauth2Auth.callCustomApi(\n                params.path,\n                params.httpMethod,\n                params.pathParams,\n                params.queryParams,\n                params.headerParams,\n                params.formParams,\n                params.bodyParam,\n                params.contentTypes,\n                params.accepts,\n                params.returnType,\n                params.contextRoot,\n                params.responseType\n            );\n    }\n\n    protected get contextRoot() {\n        return this.appConfigService.get('bpmHost', '');\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Injectable } from '@angular/core';\nimport { AlfrescoApiService, AppConfigService, LogService } from '@alfresco/adf-core';\nimport { TaskQueryCloudRequestModel } from '../models/filter-cloud-model';\nimport { Observable, throwError } from 'rxjs';\nimport { TaskListCloudSortingModel } from '../models/task-list-sorting.model';\nimport { BaseCloudService } from '../../../services/base-cloud.service';\nimport { TaskCloudNodePaging } from '../models/task-cloud.model';\nimport { map } from 'rxjs/operators';\n\n@Injectable({ providedIn: 'root' })\nexport class TaskListCloudService extends BaseCloudService {\n\n    constructor(apiService: AlfrescoApiService,\n                appConfigService: AppConfigService,\n                protected logService: LogService) {\n        super(apiService, appConfigService);\n    }\n\n    /**\n     * Finds a task using an object with optional query properties.\n     * @param requestNode Query object\n     * @param queryUrl Query url\n     * @returns Task information\n     */\n    getTaskByRequest(requestNode: TaskQueryCloudRequestModel, queryUrl?: string): Observable<any> {\n        if (requestNode.appName || requestNode.appName === '') {\n            queryUrl = queryUrl || `${this.getBasePath(requestNode.appName)}/query/v1/tasks`;\n            const queryParams = this.buildQueryParams(requestNode);\n            const sortingParams = this.buildSortingParam(requestNode.sorting);\n            if (sortingParams) {\n                queryParams['sort'] = sortingParams;\n            }\n            return this.get<TaskCloudNodePaging>(queryUrl, queryParams).pipe(\n                map((response: any) => {\n                    const entries = response.list && response.list.entries;\n                    if (entries) {\n                        response.list.entries = entries.map((entryData: any) => entryData.entry);\n                    }\n                    return response;\n                })\n            );\n        } else {\n            this.logService.error('Appname is mandatory for querying task');\n            return throwError('Appname not configured');\n        }\n    }\n\n    protected buildQueryParams(requestNode: TaskQueryCloudRequestModel): Object {\n        const queryParam: Object = {};\n        for (const property in requestNode) {\n            if (requestNode.hasOwnProperty(property) &&\n                !this.isExcludedField(property) &&\n                this.isPropertyValueValid(requestNode, property)) {\n                queryParam[property] = requestNode[property];\n            }\n        }\n        return queryParam;\n    }\n\n    protected isExcludedField(property: string): boolean {\n        return property === 'appName' || property === 'sorting';\n    }\n\n    protected isPropertyValueValid(requestNode: any, property: string): boolean {\n        return requestNode[property] !== '' && requestNode[property] !== null && requestNode[property] !== undefined;\n    }\n\n    protected buildSortingParam(models: TaskListCloudSortingModel[]): string {\n        let finalSorting: string = '';\n        if (models) {\n            for (const sort of models) {\n                if (!finalSorting) {\n                    finalSorting = `${sort.orderBy},${sort.direction}`;\n                } else {\n                    finalSorting = `${finalSorting}&${sort.orderBy},${sort.direction}`;\n                }\n            }\n        }\n        return encodeURI(finalSorting);\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const taskPresetsCloudDefaultModel = {\n    'default': [\n        {\n            'key': 'name',\n            'type': 'text',\n            'title': 'ADF_CLOUD_TASK_LIST.PROPERTIES.NAME',\n            'sortable': true\n        },\n        {\n            'key': 'created',\n            'type': 'text',\n            'title': 'ADF_CLOUD_TASK_LIST.PROPERTIES.CREATED',\n            'cssClass': 'hidden',\n            'sortable': true\n        },\n        {\n            'key': 'assignee',\n            'type': 'text',\n            'title': 'ADF_CLOUD_TASK_LIST.PROPERTIES.ASSIGNEE',\n            'cssClass': 'hidden',\n            'sortable': true\n        }\n    ]\n};\n\nexport const serviceTaskPresetsCloudDefaultModel = {\n    'default': [\n        {\n            'key': 'activityName',\n            'type': 'text',\n            'title': 'ADF_CLOUD_SERVICE_TASK_LIST.PROPERTIES.ACTIVITY_NAME',\n            'sortable': true\n        },\n        {\n            'key': 'status',\n            'type': 'text',\n            'title': 'ADF_CLOUD_SERVICE_TASK_LIST.PROPERTIES.STATUS',\n            'sortable': true\n        },\n        {\n            'key': 'startedDate',\n            'type': 'text',\n            'title': 'ADF_CLOUD_SERVICE_TASK_LIST.PROPERTIES.STARTED_DATE',\n            'cssClass': 'hidden',\n            'sortable': true\n        },\n        {\n            'key': 'completedDate',\n            'type': 'text',\n            'title': 'ADF_CLOUD_SERVICE_TASK_LIST.PROPERTIES.COMPLETED_DATE',\n            'cssClass': 'hidden',\n            'sortable': true\n        }\n    ]\n};\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport class TaskListCloudSortingModel {\n    orderBy: string;\n    direction: string;\n\n    constructor(obj: any) {\n        if (obj) {\n            this.orderBy = obj.orderBy;\n            this.direction = obj.direction;\n        }\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport class StartTaskCloudRequestModel {\n\n    name: string;\n    description: string;\n    assignee: string;\n    priority: string;\n    dueDate: Date;\n    candidateUsers: string[];\n    candidateGroups: string[];\n    payloadType: string;\n    formKey: string;\n\n    constructor(obj?: any) {\n        if (obj) {\n            this.name = obj.name || null;\n            this.description = obj.description || null;\n            this.assignee = obj.assignee || null;\n            this.priority = obj.priority || null;\n            this.dueDate = obj.dueDate || null;\n            this.candidateUsers = obj.candidateUsers || null;\n            this.candidateGroups = obj.candidateGroups || null;\n            this.formKey = obj.formKey || null;\n            this.payloadType = 'CreateTaskPayload';\n        }\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport class ProcessDefinitionCloud {\n    id: string;\n    appName: string;\n    key: string;\n    formKey?: string;\n    appVersion: number;\n    version: number;\n    name: string;\n\n    constructor(obj?: any) {\n        this.id = obj && obj.id || null;\n        this.name = obj && obj.name || null;\n        this.appName = obj && obj.appName || null;\n        this.key = obj && obj.key || null;\n        this.formKey = obj && obj.formKey || null;\n        this.version = obj && obj.version || 0;\n        this.appVersion = obj && obj.appVersion || 0;\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport enum ClaimTaskEnum {\n    claim = 'claim',\n    unclaim = 'unclaim'\n}\nexport interface TaskPriorityOption {\n    label: string;\n    key: string;\n    value: string;\n}\n\nexport const DEFAULT_TASK_PRIORITIES: TaskPriorityOption[] = [\n    { label: 'ADF_CLOUD_TASK_LIST.PROPERTIES.PRIORITY_VALUES.NONE', value: '0', key: '0' },\n    { label: 'ADF_CLOUD_TASK_LIST.PROPERTIES.PRIORITY_VALUES.LOW', value: '1', key: '1' },\n    { label: 'ADF_CLOUD_TASK_LIST.PROPERTIES.PRIORITY_VALUES.NORMAL', value: '2', key: '2' },\n    { label: 'ADF_CLOUD_TASK_LIST.PROPERTIES.PRIORITY_VALUES.HIGH', value: '3', key: '3' }\n];\n\nexport const TASK_ASSIGNED_STATE = 'ASSIGNED';\n\nexport const TASK_CREATED_STATE = 'CREATED';\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Injectable } from '@angular/core';\nimport { AlfrescoApiService, LogService, AppConfigService, IdentityUserService, CardViewArrayItem, TranslationService } from '@alfresco/adf-core';\nimport { throwError, Observable, of, Subject } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { TaskDetailsCloudModel, StartTaskCloudResponseModel } from '../start-task/models/task-details-cloud.model';\nimport { BaseCloudService } from '../../services/base-cloud.service';\nimport { StartTaskCloudRequestModel } from '../start-task/models/start-task-cloud-request.model';\nimport { ProcessDefinitionCloud } from '../../models/process-definition-cloud.model';\nimport { DEFAULT_TASK_PRIORITIES, TaskPriorityOption, TASK_ASSIGNED_STATE, TASK_CREATED_STATE } from '../models/task.model';\nimport { TaskCloudServiceInterface } from './task-cloud.service.interface';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class TaskCloudService extends BaseCloudService implements TaskCloudServiceInterface {\n\n    dataChangesDetected$ = new Subject();\n\n    constructor(\n        apiService: AlfrescoApiService,\n        appConfigService: AppConfigService,\n        private logService: LogService,\n        private translateService: TranslationService,\n        private identityUserService: IdentityUserService\n    ) {\n        super(apiService, appConfigService);\n    }\n\n    /**\n     * Complete a task.\n     * @param appName Name of the app\n     * @param taskId ID of the task to complete\n     * @returns Details of the task that was completed\n     */\n    completeTask(appName: string, taskId: string): Observable<TaskDetailsCloudModel> {\n        if ((appName || appName === '') && taskId) {\n            const url = `${this.getBasePath(appName)}/rb/v1/tasks/${taskId}/complete`;\n            const payload = { 'payloadType': 'CompleteTaskPayload' };\n\n            return this.post<any, TaskDetailsCloudModel>(url, payload);\n        } else {\n            this.logService.error('AppName and TaskId are mandatory for complete a task');\n            return throwError('AppName/TaskId not configured');\n        }\n    }\n\n    /**\n     * Validate if a task can be completed.\n     * @param taskDetails task details object\n     * @returns Boolean value if the task can be completed\n     */\n    canCompleteTask(taskDetails: TaskDetailsCloudModel): boolean {\n        return taskDetails && taskDetails.status === TASK_ASSIGNED_STATE && this.isAssignedToMe(taskDetails.assignee);\n    }\n\n    /**\n     * Validate if a task is editable.\n     * @param taskDetails task details object\n     * @returns Boolean value if the task is editable\n     */\n    isTaskEditable(taskDetails: TaskDetailsCloudModel): boolean {\n        return taskDetails && taskDetails.status === TASK_ASSIGNED_STATE && this.isAssignedToMe(taskDetails.assignee);\n    }\n\n    isAssigneePropertyClickable(taskDetails: TaskDetailsCloudModel, candidateUsers: CardViewArrayItem[], candidateGroups: CardViewArrayItem[]): boolean {\n        let isClickable = false;\n        const states = [TASK_ASSIGNED_STATE];\n        if (candidateUsers?.length || candidateGroups?.length) {\n            isClickable = states.includes(taskDetails.status);\n        }\n        return isClickable;\n    }\n\n    /**\n     * Validate if a task can be claimed.\n     * @param taskDetails task details object\n     * @returns Boolean value if the task can be completed\n     */\n    canClaimTask(taskDetails: TaskDetailsCloudModel): boolean {\n        return taskDetails && taskDetails.status === TASK_CREATED_STATE;\n    }\n\n    /**\n     * Validate if a task can be unclaimed.\n     * @param taskDetails task details object\n     * @returns Boolean value if the task can be completed\n     */\n    canUnclaimTask(taskDetails: TaskDetailsCloudModel): boolean {\n        const currentUser = this.identityUserService.getCurrentUserInfo().username;\n        return taskDetails && taskDetails.status === TASK_ASSIGNED_STATE && taskDetails.assignee === currentUser;\n    }\n\n    /**\n     * Claims a task for an assignee.\n     * @param appName Name of the app\n     * @param taskId ID of the task to claim\n     * @param assignee User to assign the task to\n     * @returns Details of the claimed task\n     */\n    claimTask(appName: string, taskId: string, assignee: string): Observable<TaskDetailsCloudModel> {\n        if ((appName || appName === '') && taskId) {\n            const queryUrl = `${this.getBasePath(appName)}/rb/v1/tasks/${taskId}/claim?assignee=${assignee}`;\n\n            return this.post(queryUrl).pipe(\n                map((res: any) => {\n                    this.dataChangesDetected$.next();\n                    return res.entry;\n                })\n            );\n        } else {\n            this.logService.error('AppName and TaskId are mandatory for querying a task');\n            return throwError('AppName/TaskId not configured');\n        }\n    }\n\n    /**\n     * Un-claims a task.\n     * @param appName Name of the app\n     * @param taskId ID of the task to unclaim\n     * @returns Details of the task that was unclaimed\n     */\n    unclaimTask(appName: string, taskId: string): Observable<TaskDetailsCloudModel> {\n        if ((appName || appName === '') && taskId) {\n            const queryUrl = `${this.getBasePath(appName)}/rb/v1/tasks/${taskId}/release`;\n\n            return this.post(queryUrl).pipe(\n                map((res: any) => {\n                    this.dataChangesDetected$.next();\n                    return res.entry;\n                })\n            );\n        } else {\n            this.logService.error('AppName and TaskId are mandatory for querying a task');\n            return throwError('AppName/TaskId not configured');\n        }\n    }\n\n    /**\n     * Gets details of a task.\n     * @param appName Name of the app\n     * @param taskId ID of the task whose details you want\n     * @returns Task details\n     */\n    getTaskById(appName: string, taskId: string): Observable<TaskDetailsCloudModel> {\n        if ((appName || appName === '') && taskId) {\n            const queryUrl = `${this.getBasePath(appName)}/query/v1/tasks/${taskId}`;\n\n            return this.get(queryUrl).pipe(\n                map((res: any) => res.entry)\n            );\n        } else {\n            this.logService.error('AppName and TaskId are mandatory for querying a task');\n            return throwError('AppName/TaskId not configured');\n        }\n    }\n\n     /**\n      * Creates a new standalone task.\n      * @param taskDetails Details of the task to create\n      * @returns Details of the newly created task\n      */\n    createNewTask(startTaskRequest: StartTaskCloudRequestModel, appName: string): Observable<TaskDetailsCloudModel> {\n        const queryUrl = `${this.getBasePath(appName)}/rb/v1/tasks`;\n        const payload = JSON.stringify(new StartTaskCloudRequestModel(startTaskRequest));\n\n        return this.post<any, StartTaskCloudResponseModel>(queryUrl, payload)\n            .pipe(\n                map(response => response.entry)\n            );\n    }\n\n    /**\n     * Updates the details (name, description, due date) for a task.\n     * @param appName Name of the app\n     * @param taskId ID of the task to update\n     * @param payload Data to update the task\n     * @returns Updated task details\n     */\n    updateTask(appName: string, taskId: string, payload: any): Observable<TaskDetailsCloudModel> {\n        if ((appName || appName === '') && taskId) {\n            payload.payloadType = 'UpdateTaskPayload';\n            const queryUrl = `${this.getBasePath(appName)}/rb/v1/tasks/${taskId}`;\n\n            return this.put(queryUrl, payload).pipe(\n                map((res: any) => res.entry)\n            );\n        } else {\n            this.logService.error('AppName and TaskId are mandatory for querying a task');\n            return throwError('AppName/TaskId not configured');\n        }\n    }\n\n    /**\n     * Gets candidate users of the task.\n     * @param appName Name of the app\n     * @param taskId ID of the task\n     * @returns Candidate users\n     */\n    getCandidateUsers(appName: string, taskId: string): Observable<string[]> {\n        if ((appName || appName === '') && taskId) {\n            const queryUrl = `${this.getBasePath(appName)}/query/v1/tasks/${taskId}/candidate-users`;\n            return this.get<string[]>(queryUrl);\n        } else {\n            this.logService.error('AppName and TaskId are mandatory to get candidate user');\n            return of([]);\n        }\n    }\n\n    /**\n     * Gets candidate groups of the task.\n     * @param appName Name of the app\n     * @param taskId ID of the task\n     * @returns Candidate groups\n     */\n    getCandidateGroups(appName: string, taskId: string): Observable<string[]> {\n        if ((appName || appName === '') && taskId) {\n            const queryUrl = `${this.getBasePath(appName)}/query/v1/tasks/${taskId}/candidate-groups`;\n            return this.get<string[]>(queryUrl);\n        } else {\n            this.logService.error('AppName and TaskId are mandatory to get candidate groups');\n            return of([]);\n        }\n    }\n\n    /**\n     * Gets the process definitions associated with an app.\n     * @param appName Name of the target app\n     * @returns Array of process definitions\n     */\n    getProcessDefinitions(appName: string): Observable<ProcessDefinitionCloud[]> {\n        if (appName || appName === '') {\n            const url = `${this.getBasePath(appName)}/rb/v1/process-definitions`;\n\n            return this.get(url).pipe(\n                map((res: any) => {\n                    return res.list.entries.map((processDefs) => new ProcessDefinitionCloud(processDefs.entry));\n                })\n            );\n        } else {\n            this.logService.error('AppName is mandatory for querying task');\n            return throwError('AppName not configured');\n        }\n    }\n\n    /**\n     * Updates the task assignee.\n     * @param appName Name of the app\n     * @param taskId ID of the task to update assignee\n     * @param assignee assignee to update current user task assignee\n     * @returns Updated task details with new assignee\n     */\n    assign(appName: string, taskId: string, assignee: string): Observable<TaskDetailsCloudModel> {\n        if (appName && taskId) {\n            const payLoad = { 'assignee': assignee, 'taskId': taskId, 'payloadType': 'AssignTaskPayload' };\n            const url = `${this.getBasePath(appName)}/rb/v1/tasks/${taskId}/assign`;\n\n            return this.post(url, payLoad).pipe(\n                map((res: any) => {\n                    return res.entry;\n                })\n            );\n        } else {\n            this.logService.error('AppName and TaskId are mandatory to change/update the task assignee');\n            return throwError('AppName/TaskId not configured');\n        }\n      }\n\n    getPriorityLabel(priority: number): string {\n        const priorityItem = this.priorities.find(item => item.value === priority.toString()) || this.priorities[0];\n        return this.translateService.instant(priorityItem.label);\n    }\n\n    get priorities(): TaskPriorityOption[] {\n        return this.appConfigService.get('adf-cloud-priority-values') || DEFAULT_TASK_PRIORITIES;\n    }\n\n    private isAssignedToMe(assignee: string): boolean {\n        const currentUser = this.identityUserService.getCurrentUserInfo().username;\n        return assignee === currentUser;\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { OnChanges, Input, SimpleChanges, Output, EventEmitter, ContentChild, AfterContentInit, OnDestroy, OnInit, Directive } from '@angular/core';\nimport {\n    AppConfigService, UserPreferencesService,\n    DataTableSchema, UserPreferenceValues,\n    PaginatedComponent, PaginationModel,\n    DataRowEvent, CustomEmptyContentTemplateDirective, DataCellEvent, DataRowActionEvent, DataRow, DataColumn\n} from '@alfresco/adf-core';\nimport { taskPresetsCloudDefaultModel } from '../models/task-preset-cloud.model';\nimport { TaskQueryCloudRequestModel } from '../models/filter-cloud-model';\nimport { BehaviorSubject, Subject } from 'rxjs';\nimport { TaskListCloudSortingModel } from '../models/task-list-sorting.model';\nimport { takeUntil } from 'rxjs/operators';\nimport { TaskCloudService } from '../../services/task-cloud.service';\n\n@Directive()\n// tslint:disable-next-line: directive-class-suffix\nexport abstract class BaseTaskListCloudComponent extends DataTableSchema implements OnChanges, AfterContentInit, PaginatedComponent, OnDestroy, OnInit {\n\n    @ContentChild(CustomEmptyContentTemplateDirective)\n    emptyCustomContent: CustomEmptyContentTemplateDirective;\n\n    /** The name of the application. */\n    @Input()\n    appName: string = '';\n\n    /**\n     * Row selection mode. Can be none, `single` or `multiple`. For `multiple` mode,\n     * you can use the Cmd (macOS) or Ctrl (Win) modifier key to toggle selection for\n     * multiple rows.\n     */\n    @Input()\n    selectionMode: string = 'single'; // none|single|multiple\n\n    /** Toggles multiple row selection, rendering a checkbox at the beginning of each row. */\n    @Input()\n    multiselect: boolean = false;\n\n    /** Toggles the sticky header mode. */\n    @Input()\n    stickyHeader: boolean = false;\n\n    /**\n     * Specifies how the table should be sorted. The parameters are for BE sorting.\n     */\n    @Input()\n    sorting: TaskListCloudSortingModel[];\n\n    /** Toggles the data actions column. */\n    @Input()\n    showActions: boolean = false;\n\n    /** Position of the actions dropdown menu. Can be \"left\" or \"right\". */\n    @Input()\n    actionsPosition: string = 'right'; // left|right\n\n    /** Toggles custom context menu for the component. */\n    @Input()\n    showContextMenu: boolean = false;\n\n    /** Emitted before the context menu is displayed for a row. */\n    @Output()\n    showRowContextMenu = new EventEmitter<DataCellEvent>();\n\n    /** Emitted before the actions menu is displayed for a row. */\n    @Output()\n    showRowActionsMenu = new EventEmitter<DataCellEvent>();\n\n    /** Emitted when the user executes a row action. */\n    @Output()\n    executeRowAction = new EventEmitter<DataRowActionEvent>();\n\n    /** Emitted when a task in the list is clicked */\n    @Output()\n    rowClick: EventEmitter<string> = new EventEmitter<string>();\n\n    /** Emitted when rows are selected/unselected */\n    @Output()\n    rowsSelected: EventEmitter<any[]> = new EventEmitter<any[]>();\n\n    /** Emitted when the task list is loaded */\n    @Output()\n    success: EventEmitter<any> = new EventEmitter<any>();\n\n    /** Emitted when an error occurs. */\n    @Output()\n    error: EventEmitter<any> = new EventEmitter<any>();\n\n    pagination: BehaviorSubject<PaginationModel>;\n\n    requestNode: TaskQueryCloudRequestModel;\n    rows: any[] = [];\n    size: number;\n    skipCount: number = 0;\n    currentInstanceId: any;\n    isLoading = true;\n    selectedInstances: any[];\n    formattedSorting: any[];\n    private defaultSorting = { key: 'startDate', direction: 'desc' };\n    boundReplacePriorityValues: (row: DataRow, col: DataColumn) => any;\n\n    private onDestroy$ = new Subject<boolean>();\n\n    constructor(appConfigService: AppConfigService,\n                private taskCloudService: TaskCloudService,\n                private userPreferences: UserPreferencesService,\n                presetKey: string) {\n        super(appConfigService, presetKey, taskPresetsCloudDefaultModel);\n        this.size = userPreferences.paginationSize;\n\n        this.pagination = new BehaviorSubject<PaginationModel>(<PaginationModel> {\n            maxItems: this.size,\n            skipCount: 0,\n            totalItems: 0\n        });\n\n        this.boundReplacePriorityValues = this.replacePriorityValues.bind(this);\n    }\n\n    ngOnInit() {\n        this.userPreferences\n            .select(UserPreferenceValues.PaginationSize)\n            .pipe(takeUntil(this.onDestroy$))\n            .subscribe(pageSize => this.size = pageSize);\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes['sorting']) {\n            this.formatSorting(changes['sorting'].currentValue);\n        }\n        this.reload();\n    }\n\n    ngOnDestroy() {\n        this.onDestroy$.next(true);\n        this.onDestroy$.complete();\n    }\n\n    ngAfterContentInit() {\n        this.createDatatableSchema();\n    }\n\n    reload() {\n        this.requestNode = this.createRequestNode();\n        if (this.requestNode.appName || this.requestNode.appName === '') {\n            this.load(this.requestNode);\n        } else {\n            this.rows = [];\n        }\n    }\n\n    isListEmpty(): boolean {\n        return !this.rows || this.rows.length === 0;\n    }\n\n    /**\n     * Resets the pagination values\n     */\n    resetPagination() {\n        this.skipCount = 0;\n        this.size = this.userPreferences.paginationSize;\n        this.pagination.next({\n            skipCount: 0,\n            maxItems: this.size\n        });\n    }\n\n    /**\n     * Resets the pagination values and\n     * Reloads the task list\n     * @param pagination Pagination values to be set\n     */\n    updatePagination(pagination: PaginationModel) {\n        this.size = pagination.maxItems;\n        this.skipCount = pagination.skipCount;\n        this.pagination.next(pagination);\n        this.reload();\n    }\n\n    onSortingChanged(event: CustomEvent) {\n        this.setSorting(event.detail);\n        this.formatSorting(this.sorting);\n        this.reload();\n    }\n\n    onRowClick(item: DataRowEvent) {\n        this.currentInstanceId = item.value.getValue('id');\n        this.rowClick.emit(this.currentInstanceId);\n    }\n\n    onRowSelect(event: CustomEvent) {\n        this.selectedInstances = [...event.detail.selection];\n        this.rowsSelected.emit(this.selectedInstances);\n    }\n\n    onRowUnselect(event: CustomEvent) {\n        this.selectedInstances = [...event.detail.selection];\n        this.rowsSelected.emit(this.selectedInstances);\n    }\n\n    onRowKeyUp(event: CustomEvent) {\n        if (event.detail.keyboardEvent.key === 'Enter') {\n            event.preventDefault();\n            this.currentInstanceId = event.detail.row.getValue('id');\n            this.rowClick.emit(this.currentInstanceId);\n        }\n    }\n\n    onShowRowActionsMenu(event: DataCellEvent) {\n        this.showRowActionsMenu.emit(event);\n    }\n\n    onShowRowContextMenu(event: DataCellEvent) {\n        this.showRowContextMenu.emit(event);\n    }\n\n    onExecuteRowAction(row: DataRowActionEvent) {\n        this.executeRowAction.emit(row);\n    }\n\n    setSorting(sortDetail) {\n        const sorting = sortDetail ? {\n            orderBy: sortDetail.key,\n            direction: sortDetail.direction.toUpperCase()\n        } : { ... this.defaultSorting };\n        this.sorting = [new TaskListCloudSortingModel(sorting)];\n    }\n\n    formatSorting(sorting: TaskListCloudSortingModel[]) {\n        this.formattedSorting = this.isValidSorting(sorting) ? [\n            sorting[0].orderBy,\n            sorting[0].direction.toLocaleLowerCase()\n        ] : null;\n    }\n\n    isValidSorting(sorting: TaskListCloudSortingModel[]) {\n        return sorting && sorting.length && sorting[0].orderBy && sorting[0].direction;\n    }\n\n    replacePriorityValues(row: DataRow, column: DataColumn) {\n        return column.key.split('.').reduce((source, key) => {\n            if (key === 'priority' && source && typeof(source[key]) === 'number') {\n                return source[key] = this.taskCloudService.getPriorityLabel(source[key]);\n            }\n            return source && typeof(source) === 'object' ? source[key] : undefined;\n        }, row.obj);\n    }\n\n    abstract load(requestNode);\n    abstract createRequestNode();\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, ViewEncapsulation, Input } from '@angular/core';\nimport { AppConfigService, UserPreferencesService } from '@alfresco/adf-core';\nimport { TaskQueryCloudRequestModel } from '../models/filter-cloud-model';\nimport { TaskListCloudService } from '../services/task-list-cloud.service';\nimport { BaseTaskListCloudComponent } from './base-task-list-cloud.component';\nimport { TaskCloudService } from '../../services/task-cloud.service';\n\n@Component({\n    selector: 'adf-cloud-task-list',\n    templateUrl: './base-task-list-cloud.component.html',\n    styleUrls: ['./base-task-list-cloud.component.scss'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class TaskListCloudComponent extends BaseTaskListCloudComponent {\n\n    static PRESET_KEY = 'adf-cloud-task-list.presets';\n\n    /**\n     * The assignee of the process. Possible values are: \"assignee\" (the current user is the assignee),\n     * \"candidate\" (the current user is a task candidate\", \"group_x\" (the task is assigned to a group\n     * where the current user is a member, no value (the current user is involved).\n     */\n    @Input()\n    assignee: string = '';\n\n    /** Filter the tasks. Display only tasks created on the supplied date. */\n    @Input()\n    createdDate: Date;\n\n    /** Filter the tasks. Display only tasks with createdFrom equal to the supplied date. */\n    @Input()\n    createdFrom: string = '';\n\n    /** Filter the tasks. Display only tasks with createdTo equal to the supplied date. */\n    @Input()\n    createdTo: string = '';\n\n    /** Filter the tasks. Display only tasks with dueDate equal to the supplied date. */\n    @Input()\n    dueDate: Date;\n\n    /** Filter the tasks. Display only tasks with lastModifiedFrom equal to the supplied date. */\n    @Input()\n    lastModifiedFrom: string = '';\n\n    /** Filter the tasks. Display only tasks with lastModifiedTo equal to the supplied date. */\n    @Input()\n    lastModifiedTo: string = '';\n\n    /** Filter the tasks. Display only tasks with dueDate greater or equal than the supplied date. */\n    @Input()\n    dueDateFrom: string = '';\n\n    /** Filter the tasks. Display only tasks with dueDate less or equal to the supplied date. */\n    @Input()\n    dueDateTo: string = '';\n\n    /** Filter the tasks. Display only tasks with id equal to the supplied value. */\n    @Input()\n    id: string = '';\n\n    /** Filter the tasks. Display only tasks with the supplied name. */\n    @Input()\n    name: string = '';\n\n    /** Filter the tasks. Display only tasks with parentTaskId equal to the supplied value. */\n    @Input()\n    parentTaskId: string = '';\n\n    /** Filter the tasks. Display only tasks with processDefinitionName equal to the supplied value. */\n    @Input()\n    processDefinitionName: string = '';\n\n    /** Filter the tasks. Display only tasks with processDefinitionId equal to the supplied value. */\n    @Input()\n    processDefinitionId: string = '';\n\n    /** Filter the tasks. Display only tasks with processInstanceId equal to the supplied value. */\n    @Input()\n    processInstanceId: string = '';\n\n    /** Filter the tasks. Display only tasks with status equal to the supplied value. */\n    @Input()\n    status: string = '';\n\n    /** Filter the tasks. Display only tasks with owner equal to the supplied value. */\n    @Input()\n    owner: string = '';\n\n    /** Filter the tasks. Display only tasks with priority equal to the supplied value. */\n    @Input()\n    priority: number;\n\n    /** Filter the tasks. Display only tasks with createdBy equal to the supplied value. */\n    @Input()\n    completedBy: number;\n\n    /** Filter the tasks. Display only the tasks that belong to a process in case is false or tasks that doesn't belong to a process in case of true. */\n    @Input()\n    standalone: boolean = false;\n\n    /** Filter the tasks. Display only tasks with completedDate equal to the supplied date. */\n    @Input()\n    completedDate: string = '';\n\n    /** Filter the tasks. Display only tasks with completedFrom equal to the supplied date. */\n    @Input()\n    completedFrom: string = '';\n\n    /** Filter the tasks. Display only tasks with completedTo equal to the supplied date. */\n    @Input()\n    completedTo: string = '';\n\n    /** Filter the tasks. Display only tasks with candidateGroups equal to the supplied value. */\n    @Input()\n    candidateGroupId: string = '';\n\n    constructor(private taskListCloudService: TaskListCloudService,\n                appConfigService: AppConfigService,\n                taskCloudService: TaskCloudService,\n                userPreferences: UserPreferencesService) {\n        super(appConfigService, taskCloudService, userPreferences, TaskListCloudComponent.PRESET_KEY);\n    }\n\n    load(requestNode: TaskQueryCloudRequestModel) {\n        this.isLoading = true;\n        this.taskListCloudService.getTaskByRequest(requestNode).subscribe(\n            (tasks) => {\n                this.rows = tasks.list.entries;\n                this.success.emit(tasks);\n                this.isLoading = false;\n                this.pagination.next(tasks.list.pagination);\n            }, (error) => {\n                this.error.emit(error);\n                this.isLoading = false;\n            });\n    }\n\n    createRequestNode(): TaskQueryCloudRequestModel {\n        const requestNode = {\n            appName: this.appName,\n            assignee: this.assignee,\n            id: this.id,\n            name: this.name,\n            parentTaskId: this.parentTaskId,\n            processDefinitionName: this.processDefinitionName,\n            processDefinitionId: this.processDefinitionId,\n            processInstanceId: this.processInstanceId,\n            owner: this.owner,\n            priority: this.priority,\n            lastModifiedFrom: this.lastModifiedFrom,\n            lastModifiedTo: this.lastModifiedTo,\n            dueDateFrom: this.dueDateFrom,\n            dueDateTo: this.dueDateTo,\n            status: this.status,\n            dueDate: this.dueDate,\n            createdDate: this.createdDate,\n            createdFrom: this.createdFrom,\n            createdTo: this.createdTo,\n            maxItems: this.size,\n            skipCount: this.skipCount,\n            sorting: this.sorting,\n            standalone: this.standalone,\n            completedBy: this.completedBy,\n            completedFrom: this.completedFrom,\n            completedTo: this.completedTo,\n            completedDate: this.completedDate,\n            candidateGroupId: this.candidateGroupId\n        };\n        return new TaskQueryCloudRequestModel(requestNode);\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Injectable } from '@angular/core';\nimport { AlfrescoApiService, AppConfigService, LogService } from '@alfresco/adf-core';\nimport { ServiceTaskQueryCloudRequestModel, ServiceTaskIntegrationContextCloudModel } from '../models/service-task-cloud.model';\nimport { Observable, throwError } from 'rxjs';\nimport { TaskListCloudSortingModel } from '../models/task-list-sorting.model';\nimport { BaseCloudService } from '../../../services/base-cloud.service';\nimport { map } from 'rxjs/operators';\n\n@Injectable({ providedIn: 'root' })\nexport class ServiceTaskListCloudService extends BaseCloudService {\n\n    constructor(apiService: AlfrescoApiService,\n                appConfigService: AppConfigService,\n                private logService: LogService) {\n        super(apiService, appConfigService);\n    }\n\n    /**\n     * Finds a task using an object with optional query properties.\n     * @param requestNode Query object\n     * @returns Task information\n     */\n    getServiceTaskByRequest(requestNode: ServiceTaskQueryCloudRequestModel): Observable<any> {\n        if (requestNode.appName || requestNode.appName === '') {\n            const queryUrl = `${this.getBasePath(requestNode.appName)}/query/admin/v1/service-tasks`;\n            const queryParams = this.buildQueryParams(requestNode);\n            const sortingParams = this.buildSortingParam(requestNode.sorting);\n            if (sortingParams) {\n                queryParams['sort'] = sortingParams;\n            }\n            return this.get(queryUrl, queryParams);\n        } else {\n            this.logService.error('Appname is mandatory for querying task');\n            return throwError('Appname not configured');\n        }\n    }\n\n    /**\n     * Finds a service task integration context using an object with optional query properties.\n     * @param appName string\n     * @param serviceTaskId string\n     * @returns Service Task Integration Context information\n     */\n    getServiceTaskStatus(appName: string, serviceTaskId: string): Observable<ServiceTaskIntegrationContextCloudModel> {\n        if (appName) {\n            const queryUrl = `${this.getBasePath(appName)}/query/admin/v1/service-tasks/${serviceTaskId}/integration-context`;\n            return this.get(queryUrl).pipe(\n                map((response: any) => response.entry)\n            );\n        } else {\n            this.logService.error('Appname is mandatory for querying task');\n            return throwError('Appname not configured');\n        }\n    }\n\n    protected buildQueryParams(requestNode: ServiceTaskQueryCloudRequestModel): Object {\n        const queryParam: Object = {};\n        for (const property in requestNode) {\n            if (requestNode.hasOwnProperty(property) &&\n                !this.isExcludedField(property) &&\n                this.isPropertyValueValid(requestNode, property)) {\n                queryParam[property] = requestNode[property];\n            }\n        }\n        return queryParam;\n    }\n\n    protected isExcludedField(property: string): boolean {\n        return property === 'appName' || property === 'sorting';\n    }\n\n    protected isPropertyValueValid(requestNode: any, property: string): boolean {\n        return requestNode[property] !== '' && requestNode[property] !== null && requestNode[property] !== undefined;\n    }\n\n    protected buildSortingParam(models: TaskListCloudSortingModel[]): string {\n        let finalSorting: string = '';\n        if (models) {\n            for (const sort of models) {\n                if (!finalSorting) {\n                    finalSorting = `${sort.orderBy},${sort.direction}`;\n                } else {\n                    finalSorting = `${finalSorting}&${sort.orderBy},${sort.direction}`;\n                }\n            }\n        }\n        return encodeURI(finalSorting);\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, ViewEncapsulation, Input } from '@angular/core';\nimport {\n    AppConfigService, UserPreferencesService\n} from '@alfresco/adf-core';\nimport { ServiceTaskQueryCloudRequestModel } from '../models/service-task-cloud.model';\nimport { BaseTaskListCloudComponent } from './base-task-list-cloud.component';\nimport { ServiceTaskListCloudService } from '../services/service-task-list-cloud.service';\nimport { TaskCloudService } from '../../services/task-cloud.service';\n\n@Component({\n    selector: 'adf-cloud-service-task-list',\n    templateUrl: './base-task-list-cloud.component.html',\n    styleUrls: ['./base-task-list-cloud.component.scss'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class ServiceTaskListCloudComponent extends BaseTaskListCloudComponent {\n\n    static PRESET_KEY = 'adf-cloud-service-task-list.presets';\n\n    @Input()\n    queryParams: { [key: string]: any } = {};\n\n    constructor(private serviceTaskListCloudService: ServiceTaskListCloudService,\n                appConfigService: AppConfigService,\n                taskCloudService: TaskCloudService,\n                userPreferences: UserPreferencesService) {\n        super(appConfigService, taskCloudService, userPreferences, ServiceTaskListCloudComponent.PRESET_KEY);\n    }\n\n    load(requestNode: ServiceTaskQueryCloudRequestModel) {\n        this.isLoading = true;\n        this.serviceTaskListCloudService.getServiceTaskByRequest(requestNode).subscribe(\n            (tasks) => {\n                this.rows = tasks.list.entries;\n                this.success.emit(tasks);\n                this.isLoading = false;\n                this.pagination.next(tasks.list.pagination);\n            }, (error) => {\n                this.error.emit(error);\n                this.isLoading = false;\n            });\n    }\n\n    createRequestNode(): ServiceTaskQueryCloudRequestModel {\n        const requestNode: ServiceTaskQueryCloudRequestModel = {\n            appName: this.appName,\n            maxItems: this.size,\n            skipCount: this.skipCount,\n            sorting: this.sorting,\n            id: this.queryParams?.serviceTaskId,\n            activityName: this.queryParams?.activityName,\n            activityType: this.queryParams?.activityType,\n            completedDate: this.queryParams?.completedDate,\n            elementId: this.queryParams?.elementId,\n            executionId: this.queryParams?.executionId,\n            processDefinitionId: this.queryParams?.processDefinitionId,\n            processDefinitionKey: this.queryParams?.processDefinitionKey,\n            processDefinitionVersion: this.queryParams?.processDefinitionVersion,\n            processInstanceId: this.queryParams?.processInstanceId,\n            serviceFullName: this.queryParams?.serviceFullName,\n            serviceName: this.queryParams?.serviceName,\n            serviceVersion: this.queryParams?.serviceVersion,\n            startedDate: this.queryParams?.startedDate,\n            status: this.queryParams?.status\n        } as ServiceTaskQueryCloudRequestModel;\n        return requestNode;\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MaterialModule } from '../../material.module';\nimport { TaskListCloudComponent } from './components/task-list-cloud.component';\nimport { ServiceTaskListCloudComponent } from './components/service-task-list-cloud.component';\nimport { CoreModule } from '@alfresco/adf-core';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        MaterialModule,\n        CoreModule\n    ],\n    declarations: [\n        TaskListCloudComponent,\n        ServiceTaskListCloudComponent\n    ],\n    exports: [\n        TaskListCloudComponent,\n        ServiceTaskListCloudComponent\n    ]\n})\nexport class TaskListCloudModule { }\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport enum DateCloudFilterType {\n    NO_DATE = 'NO_DATE',\n    TODAY = 'TODAY',\n    TOMORROW = 'TOMORROW',\n    NEXT_7_DAYS = 'NEXT_7_DAYS',\n    WEEK = 'WEEK',\n    MONTH = 'MONTH',\n    QUARTER = 'QUARTER',\n    YEAR = 'YEAR',\n    RANGE = 'RANGE'\n}\n\nexport interface DateRangeFilter {\n    startDate: string;\n    endDate: string;\n}\nexport interface RangeKeys {\n    from: string;\n    to: string;\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Injectable } from '@angular/core';\nimport moment from 'moment-es6';\nimport { DateRangeFilter, DateCloudFilterType } from '../../models/date-cloud-filter.model';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class DateRangeFilterService {\n\n    currentDate = new Date();\n\n    getDateRange(type: DateCloudFilterType): DateRangeFilter {\n        switch (type) {\n            case DateCloudFilterType.TODAY: return this.getTodayDateRange();\n            case DateCloudFilterType.TOMORROW: return this.getTomorrowDateRange();\n            case DateCloudFilterType.NEXT_7_DAYS: return this.getNext7DaysDateRange();\n            case DateCloudFilterType.WEEK: return this.getCurrentWeekRange();\n            case DateCloudFilterType.MONTH: return this.getCurrentMonthDateRange();\n            case DateCloudFilterType.QUARTER: return this.getQuarterDateRange();\n            case DateCloudFilterType.YEAR: return this.getCurrentYearDateRange();\n            default: return this.resetDateRange();\n        }\n    }\n\n    isDateRangeType(type: DateCloudFilterType) {\n        return type === DateCloudFilterType.RANGE;\n    }\n\n    private resetDateRange(): DateRangeFilter {\n        return {\n            startDate: null,\n            endDate: null\n        };\n    }\n\n    private getNext7DaysDateRange(): DateRangeFilter {\n        return {\n            startDate: moment().startOf('day').toISOString(true),\n            endDate: moment().add(7, 'days').endOf('day').toISOString(true)\n        };\n    }\n\n    private getTomorrowDateRange(): DateRangeFilter {\n        return {\n            startDate: moment().endOf('day').toISOString(true),\n            endDate: moment().add(1, 'days').endOf('day').toISOString(true)\n        };\n    }\n\n    private getCurrentYearDateRange(): DateRangeFilter {\n        return {\n            startDate: moment().startOf('year').toISOString(true),\n            endDate: moment().endOf('year').toISOString(true)\n        };\n    }\n\n    private getTodayDateRange(): DateRangeFilter {\n        return {\n            startDate: moment().startOf('day').toISOString(true),\n            endDate: moment().endOf('day').toISOString(true)\n        };\n    }\n\n    private getCurrentWeekRange(): DateRangeFilter {\n        return  {\n            startDate: moment().startOf('week').toISOString(true),\n            endDate: moment().endOf('week').toISOString(true)\n        };\n    }\n\n    private getCurrentMonthDateRange(): DateRangeFilter {\n        return {\n            startDate: moment().startOf('month').toISOString(true),\n            endDate: moment().endOf('month').toISOString(true)\n        };\n    }\n\n    private getQuarterDateRange(): DateRangeFilter {\n        return {\n            startDate: moment().startOf('quarter').toISOString(true),\n            endDate: moment().endOf('quarter').toISOString(true)\n        };\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DateCloudFilterType } from '../../../models/date-cloud-filter.model';\nimport { DateRangeFilterService } from '../../../common/date-range-filter/date-range-filter.service';\nimport { ComponentSelectionMode } from '../../../types';\nimport { IdentityUserModel, IdentityGroupModel } from '@alfresco/adf-core';\n\nexport class TaskFilterCloudModel  {\n    id: string;\n    name: string;\n    key: string;\n    icon: string;\n    index: number;\n    appName: string;\n    status: string;\n    sort: string;\n    assignee: string;\n    candidateGroups: IdentityGroupModel[];\n    order: string;\n    owner: string;\n    processDefinitionName?: string;\n    processDefinitionId: string;\n    processInstanceId: string;\n    createdDate: Date;\n    dueDateType: DateCloudFilterType;\n    dueDate: Date;\n    taskName: string;\n    taskId: string;\n    parentTaskId: string;\n    priority: number;\n    standalone: boolean;\n    lastModifiedFrom: string;\n    lastModifiedTo: string;\n    completedDateType: DateCloudFilterType;\n    createdDateType: DateCloudFilterType;\n    assignmentType: AssignmentType;\n    completedDate: Date;\n    completedBy: IdentityUserModel;\n    showCounter: boolean;\n\n    private _completedFrom: string;\n    private _completedTo: string;\n    private _dueDateFrom: string;\n    private _dueDateTo: string;\n    private _createdFrom: string;\n    private _createdTo: string;\n    private dateRangeFilterService = new DateRangeFilterService();\n\n    constructor(obj?: any) {\n        if (obj) {\n            this.id = obj.id || Math.random().toString(36).substr(2, 9);\n            this.name = obj.name || null;\n            this.key = obj.key || null;\n            this.icon = obj.icon || null;\n            this.index = obj.index || null;\n            this.appName = obj.appName || obj.appName === '' ? obj.appName : null;\n            this.status = obj.status || null;\n            this.sort = obj.sort || null;\n            this.assignee = obj.assignee || null;\n            this.order = obj.order || null;\n            this.owner = obj.owner || null;\n            this.processDefinitionName = obj.processDefinitionName || null;\n            this.processDefinitionId = obj.processDefinitionId || null;\n            this.processInstanceId = obj.processInstanceId || null;\n            this.createdDate = obj.createdDate || null;\n            this.dueDateType = obj.dueDateType || null;\n            this.dueDate = obj.dueDate || null;\n            this._dueDateFrom = obj._dueDateFrom || null;\n            this._dueDateTo = obj._dueDateTo || null;\n            this.taskName = obj.taskName || null;\n            this.taskId = obj.taskId || null;\n            this.parentTaskId = obj.parentTaskId || null;\n            this.priority = obj.priority || null;\n            this.standalone = obj.standalone || null;\n            this.lastModifiedFrom = obj.lastModifiedFrom || null;\n            this.lastModifiedTo = obj.lastModifiedTo || null;\n            this.completedBy = obj.completedBy || null;\n            this.completedDateType = obj.completedDateType || null;\n            this.completedFrom = obj._completedFrom || null;\n            this.completedTo = obj._completedTo || null;\n            this.completedDate = obj.completedDate || null;\n            this.createdDateType = obj.createdDateType || null;\n            this.createdFrom = obj._createdFrom || null;\n            this.createdTo = obj._createdTo || null;\n            this.candidateGroups = obj.candidateGroups || null;\n            this.showCounter = obj.showCounter || false;\n        }\n    }\n\n    set dueDateFrom(dueDateFrom: string) {\n        this._dueDateFrom = dueDateFrom;\n    }\n\n    set dueDateTo(dueDateTo: string) {\n        this._dueDateTo = dueDateTo;\n    }\n\n    get dueDateFrom() {\n        if (this.isDateRangeType(this.dueDateType)) {\n            return this._dueDateFrom;\n        }\n        return this.getStartDate(this.dueDateType);\n    }\n\n    get dueDateTo() {\n        if (this.isDateRangeType(this.dueDateType)) {\n            return this._dueDateTo;\n        }\n        return this.getEndDate(this.dueDateType);\n    }\n\n    set completedFrom(completedFrom: string) {\n        this._completedFrom = completedFrom;\n    }\n\n    set completedTo(completedTo: string) {\n        this._completedTo = completedTo;\n    }\n\n    get completedFrom(): string {\n        if (this.isDateRangeType(this.completedDateType)) {\n            return this._completedFrom;\n        }\n        return this.getStartDate(this.completedDateType);\n    }\n\n    get completedTo(): string {\n        if (this.isDateRangeType(this.completedDateType)) {\n            return this._completedTo;\n        }\n        return this.getEndDate(this.completedDateType);\n    }\n\n    set createdFrom(createdFrom: string) {\n        this._createdFrom = createdFrom;\n    }\n\n    set createdTo(createdTo: string) {\n        this._createdTo = createdTo;\n    }\n\n    get createdFrom() {\n        if (this.isDateRangeType(this.createdDateType)) {\n            return this._createdFrom;\n        }\n        return this.getStartDate(this.createdDateType);\n    }\n\n    get createdTo() {\n        if (this.isDateRangeType(this.createdDateType)) {\n            return this._createdTo;\n        }\n        return this.getEndDate(this.createdDateType);\n    }\n\n    private getStartDate(key: DateCloudFilterType) {\n        return this.dateRangeFilterService.getDateRange(key).startDate;\n    }\n\n    private getEndDate(key: DateCloudFilterType) {\n        return this.dateRangeFilterService.getDateRange(key).endDate;\n    }\n\n    private isDateRangeType(type: DateCloudFilterType) {\n        return !!this.dateRangeFilterService.isDateRangeType(type);\n    }\n}\n\nexport interface ServiceTaskFilterCloudModel {\n    id?: string;\n    name?: string;\n    key?: string;\n    icon?: string;\n    index?: number;\n    appName?: string;\n    status?: string;\n    sort?: string;\n    order?: string;\n    activityName?: string;\n    activityType?: string;\n    completedDate?: Date;\n    elementId?: string;\n    executionId?: string;\n    processDefinitionId?: string;\n    processDefinitionKey?: string;\n    processDefinitionVersion?: number;\n    processInstanceId?: string;\n    serviceTaskId?: string;\n    serviceFullName?: string;\n    serviceName?: string;\n    serviceVersion?: string;\n    startedDate?: Date;\n}\n\nexport interface FilterParamsModel {\n    id?: string;\n    name?: string;\n    key?: string;\n    index?: number;\n}\n\nexport interface TaskFilterAction {\n    actionType?: string;\n    icon?: string;\n    tooltip?: string;\n    filter?: TaskFilterCloudModel | ServiceTaskFilterCloudModel;\n}\n\nexport interface FilterOptions {\n    label?: string;\n    value?: string;\n}\n\nexport enum AssignmentType {\n    CURRENT_USER = 'CURRENT_USER',\n    UNASSIGNED = 'UNASSIGNED',\n    CANDIDATE_GROUPS = 'CANDIDATE_GROUPS'\n}\n\nexport interface TaskFilterProperties {\n    label?: string;\n    type?: string;\n    value?: any;\n    key?: string;\n    attributes?: { [key: string]: string; };\n    options?: FilterOptions[];\n    dateFilterOptions?: DateCloudFilterType[];\n    selectionMode?: ComponentSelectionMode;\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { InjectionToken } from '@angular/core';\nimport { PreferenceCloudServiceInterface } from './preference-cloud.interface';\n\nexport const PROCESS_FILTERS_SERVICE_TOKEN = new InjectionToken<PreferenceCloudServiceInterface>('proccess-filters-cloud');\n\nexport const TASK_FILTERS_SERVICE_TOKEN = new InjectionToken<PreferenceCloudServiceInterface>('task-filters-cloud');\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Apollo } from 'apollo-angular';\nimport { HttpLink } from 'apollo-angular/http';\nimport { split, gql, InMemoryCache, ApolloLink, InMemoryCacheConfig } from '@apollo/client/core';\nimport { WebSocketLink } from '@apollo/client/link/ws';\nimport { onError } from '@apollo/client/link/error';\nimport { getMainDefinition } from '@apollo/client/utilities';\nimport { Injectable } from '@angular/core';\nimport { AppConfigService, AlfrescoApiService } from '@alfresco/adf-core';\nimport { BaseCloudService } from './base-cloud.service';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class NotificationCloudService extends BaseCloudService {\n\n    appsListening = [];\n\n    constructor(apiService: AlfrescoApiService,\n                appConfigService: AppConfigService,\n                public apollo: Apollo,\n                private http: HttpLink) {\n        super(apiService, appConfigService);\n    }\n\n    private get webSocketHost() {\n        return this.contextRoot.split('://')[1];\n    }\n\n    private get protocol() {\n        return this.contextRoot.split('://')[0] === 'https' ? 'wss' : 'ws';\n    }\n\n    initNotificationsForApp(appName: string) {\n        if (!this.appsListening.includes(appName)) {\n            this.appsListening.push(appName);\n            const httpLink = this.http.create({\n                uri: `${this.getBasePath(appName)}/notifications/graphql`\n            });\n\n            const webSocketLink = new WebSocketLink({\n                uri: `${this.protocol}://${this.webSocketHost}/${appName}/notifications/ws/graphql`,\n                options: {\n                    reconnect: true,\n                    lazy: true,\n                    connectionParams: {\n                        kaInterval: 2000,\n                        'X-Authorization': 'Bearer ' + this.apiService.getInstance().oauth2Auth.token\n                    }\n                }\n            });\n\n            const link = split(\n                ({ query }) => {\n                    const definition = getMainDefinition(query);\n                    return definition.kind === 'OperationDefinition' && definition.operation === 'subscription';\n                },\n                webSocketLink,\n                httpLink\n            );\n\n            const errorLink = onError(({ graphQLErrors, operation, forward }) => {\n                if (graphQLErrors) {\n                    for (const err of graphQLErrors) {\n                        switch (err.extensions.code) {\n                            case 'UNAUTHENTICATED':\n                                const oldHeaders = operation.getContext().headers;\n                                operation.setContext({\n                                    headers: {\n                                        ...oldHeaders,\n                                        'X-Authorization': 'Bearer ' + this.apiService.getInstance().oauth2Auth.token\n                                    }\n                                });\n                                forward(operation);\n                                break;\n                            default:\n                        }\n                    }\n                }\n            });\n\n            this.apollo.createNamed(appName, {\n                link: ApolloLink.from([errorLink, link]),\n                cache: new InMemoryCache({ merge: true } as InMemoryCacheConfig),\n                defaultOptions: {\n                    watchQuery: {\n                        errorPolicy: 'all'\n                    }\n                }\n            });\n        }\n    }\n\n    makeGQLQuery(appName: string, gqlQuery: string) {\n        this.initNotificationsForApp(appName);\n        return this.apollo.use(appName).subscribe({ query: gql(gqlQuery) });\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AlfrescoApiService, AppConfigService, IdentityUserService } from '@alfresco/adf-core';\nimport { Injectable, Inject } from '@angular/core';\nimport { Observable, of, BehaviorSubject, throwError } from 'rxjs';\nimport { TaskFilterCloudModel } from '../models/filter-cloud.model';\nimport { switchMap, map } from 'rxjs/operators';\nimport { BaseCloudService } from '../../../services/base-cloud.service';\nimport { PreferenceCloudServiceInterface } from '../../../services/preference-cloud.interface';\nimport { TASK_FILTERS_SERVICE_TOKEN } from '../../../services/cloud-token.service';\nimport { TaskCloudNodePaging } from '../../task-list/models/task-cloud.model';\nimport { NotificationCloudService } from '../../../services/notification-cloud.service';\nimport { TaskCloudEngineEvent } from '../../../models/engine-event-cloud.model';\n\nconst TASK_EVENT_SUBSCRIPTION_QUERY = `\n    subscription {\n        engineEvents(eventType: [\n            TASK_COMPLETED\n            TASK_ASSIGNED\n            TASK_ACTIVATED\n            TASK_SUSPENDED\n            TASK_CANCELLED,\n            TASK_CREATED\n        ]) {\n            eventType\n            entity\n        }\n    }\n`;\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class TaskFilterCloudService extends BaseCloudService {\n    private filtersSubject: BehaviorSubject<TaskFilterCloudModel[]>;\n    filters$: Observable<TaskFilterCloudModel[]>;\n\n    constructor(\n        private identityUserService: IdentityUserService,\n        @Inject(TASK_FILTERS_SERVICE_TOKEN)\n        public preferenceService: PreferenceCloudServiceInterface,\n        apiService: AlfrescoApiService,\n        appConfigService: AppConfigService,\n        private notificationCloudService: NotificationCloudService) {\n        super(apiService, appConfigService);\n        this.filtersSubject = new BehaviorSubject([]);\n        this.filters$ = this.filtersSubject.asObservable();\n    }\n\n    /**\n     * Creates and returns the default task filters for an app.\n     * @param appName Name of the target app\n     * @returns Observable of default filters task filters just created or created filters\n     */\n    private createDefaultFilters(appName: string) {\n        const key: string = this.prepareKey(appName);\n        this.preferenceService.getPreferences(appName, key).pipe(\n            switchMap((response: any) => {\n                const preferences = (response && response.list && response.list.entries) ? response.list.entries : [];\n                if (!this.hasPreferences(preferences) || !this.hasTaskFilters(preferences, key)) {\n                    return this.createTaskFilters(appName, key, this.defaultTaskFilters(appName));\n                } else {\n                    return of(this.findFiltersByKeyInPreferences(preferences, key));\n                }\n            })\n        ).subscribe((filters) => {\n            this.addFiltersToStream(filters);\n        });\n    }\n\n    /**\n     * Checks user preference are empty or not\n     * @param preferences User preferences of the target app\n     * @returns Boolean value if the preferences are not empty\n     */\n    private hasPreferences(preferences: any): boolean {\n        return preferences && preferences.length > 0;\n    }\n\n    /**\n     * Checks for task filters in given user preferences\n     * @param preferences User preferences of the target app\n     * @param key Key of the task filters\n     * @param filters Details of create filter\n     * @returns Boolean value if the preference has task filters\n     */\n    private hasTaskFilters(preferences: any, key: string): boolean {\n        const filters = preferences.find((filter: any) => { return filter.entry.key === key; });\n        return (filters && filters.entry) ? JSON.parse(filters.entry.value).length > 0 : false;\n    }\n\n    /**\n     * Calls create preference api to create task filters\n     * @param appName Name of the target app\n     * @param key Key of the task instance filters\n     * @param filters Details of new task filter\n     * @returns Observable of created task filters\n     */\n    private createTaskFilters(appName: string, key: string, filters: TaskFilterCloudModel[]): Observable<TaskFilterCloudModel[]> {\n        return this.preferenceService.createPreference(appName, key, filters);\n    }\n\n    /**\n     * Calls get preference api to get task filter by preference key\n     * @param appName Name of the target app\n     * @param key Key of the task filters\n     * @returns Observable of task filters\n     */\n    private getTaskFiltersByKey(appName: string, key: string): Observable<TaskFilterCloudModel[]> {\n        return this.preferenceService.getPreferenceByKey(appName, key);\n    }\n\n    /**\n     * Gets all task filters for a task app.\n     * @param appName Name of the target app\n     * @returns Observable of task filter details\n     */\n    getTaskListFilters(appName?: string): Observable<TaskFilterCloudModel[]> {\n        this.createDefaultFilters(appName);\n        return this.filters$;\n    }\n\n    /**\n     * Gets a task filter.\n     * @param appName Name of the target app\n     * @param id ID of the task\n     * @returns Details of the task filter\n     */\n    getTaskFilterById(appName: string, id: string): Observable<TaskFilterCloudModel> {\n        const key: string = this.prepareKey(appName);\n        return this.getTaskFiltersByKey(appName, key).pipe(\n            switchMap((filters: TaskFilterCloudModel[]) => {\n                if (filters && filters.length === 0) {\n                    return this.createTaskFilters(appName, key, this.defaultTaskFilters(appName));\n                } else {\n                    return of(filters);\n                }\n            }),\n            map((filters: any) => {\n                return filters.filter((filter: TaskFilterCloudModel) => {\n                    return filter.id === id;\n                })[0];\n            })\n        );\n    }\n\n    /**\n     * Adds a new task filter.\n     * @param filter The new filter to add\n     * @returns Observable of task instance filters with newly added filter\n     */\n    addFilter(newFilter: TaskFilterCloudModel): Observable<TaskFilterCloudModel[]> {\n        const key: string = this.prepareKey(newFilter.appName);\n        return this.getTaskFiltersByKey(newFilter.appName, key).pipe(\n            switchMap((filters: any) => {\n                if (filters && filters.length === 0) {\n                    return this.createTaskFilters(newFilter.appName, key, <TaskFilterCloudModel[]> [newFilter]);\n                } else {\n                    filters.push(newFilter);\n                    return this.preferenceService.updatePreference(newFilter.appName, key, filters);\n                }\n            }),\n            map((filters: TaskFilterCloudModel[]) => {\n                this.addFiltersToStream(filters);\n                return filters;\n            })\n        );\n    }\n\n    private addFiltersToStream(filters: TaskFilterCloudModel[]) {\n        this.filtersSubject.next(filters);\n    }\n\n    /**\n     * Updates a task filter.\n     * @param filter The filter to update\n     * @returns Observable of task instance filters with updated filter\n     */\n    updateFilter(updatedFilter: TaskFilterCloudModel): Observable<TaskFilterCloudModel[]> {\n        const key: string = this.prepareKey(updatedFilter.appName);\n        return this.getTaskFiltersByKey(updatedFilter.appName, key).pipe(\n            switchMap((filters: TaskFilterCloudModel[]) => {\n                if (filters && filters.length === 0) {\n                    return this.createTaskFilters(updatedFilter.appName, key, <TaskFilterCloudModel[]> [updatedFilter]);\n                } else {\n                    const itemIndex = filters.findIndex((filter: TaskFilterCloudModel) => filter.id === updatedFilter.id);\n                    filters[itemIndex] = updatedFilter;\n                    return this.updateTaskFilters(updatedFilter.appName, key, filters);\n                }\n            }),\n            map((updatedFilters: TaskFilterCloudModel[]) => {\n                this.addFiltersToStream(updatedFilters);\n                return updatedFilters;\n            })\n        );\n    }\n\n    /**\n     * Deletes a task filter\n     * @param filter The filter to delete\n     * @returns Observable of task instance filters without deleted filter\n     */\n    deleteFilter(deletedFilter: TaskFilterCloudModel): Observable<TaskFilterCloudModel[]> {\n        const key = this.prepareKey(deletedFilter.appName);\n        return this.getTaskFiltersByKey(deletedFilter.appName, key).pipe(\n            switchMap((filters: TaskFilterCloudModel[]) => {\n                if (filters && filters.length > 0) {\n                    filters = filters.filter(filter => filter.id !== deletedFilter.id);\n                    return this.updateTaskFilters(deletedFilter.appName, key, filters);\n                }\n                return of([]);\n            }),\n            map(filters => {\n                this.addFiltersToStream(filters);\n                return filters;\n            })\n        );\n    }\n\n    /**\n     * Checks if given filter is a default filter\n     * @param filterName Name of the target task filter\n     * @returns Boolean value for whether the filter is a default filter\n     */\n    isDefaultFilter(filterName: string): boolean {\n        const defaultFilters = this.defaultTaskFilters();\n        return defaultFilters.findIndex((filter) => filterName === filter.name) !== -1;\n    }\n\n    /**\n     * Finds a task using an object with optional query properties.\n     * @param requestNode Query object\n     * @returns Task information\n     */\n    getTaskFilterCounter(taskFilter: TaskFilterCloudModel): Observable<any> {\n        if (taskFilter.appName || taskFilter.appName === '') {\n            const queryUrl = `${this.getBasePath(taskFilter.appName)}/query/v1/tasks`;\n            const queryParams = {\n                assignee: taskFilter.assignee,\n                status: taskFilter.status,\n                appName: taskFilter.appName,\n                maxItems: 1\n            };\n            return this.get<TaskCloudNodePaging>(queryUrl, queryParams).pipe(\n                map((tasks) => tasks.list.pagination.totalItems)\n            );\n        } else {\n            return throwError('Appname not configured');\n        }\n    }\n\n    /**\n     * Calls update preference api to update task filter\n     * @param appName Name of the target app\n     * @param key Key of the task filters\n     * @param filters Details of update filter\n     * @returns Observable of updated task filters\n     */\n    private updateTaskFilters(appName: string, key: string, filters: TaskFilterCloudModel[]): Observable<TaskFilterCloudModel[]> {\n        return this.preferenceService.updatePreference(appName, key, filters);\n    }\n\n    /**\n     * Creates a uniq key with appName and username\n     * @param appName Name of the target app\n     * @returns String of task filters preference key\n     */\n    private prepareKey(appName: string): string {\n        return `task-filters-${appName}-${this.identityUserService.getCurrentUserInfo().username}`;\n    }\n\n    /**\n     * Finds and returns the task filters from preferences\n     * @param appName Name of the target app\n     * @returns Array of TaskFilterCloudModel\n     */\n    private findFiltersByKeyInPreferences(preferences: any, key: string): TaskFilterCloudModel[] {\n        const result = preferences.find((filter: any) => { return filter.entry.key === key; });\n        return result && result.entry ? JSON.parse(result.entry.value) : [];\n    }\n\n    /**\n     * Creates and returns the default filters for a task app.\n     * @param appName Name of the target app\n     * @returns Array of TaskFilterCloudModel\n     */\n    private defaultTaskFilters(appName?: string): TaskFilterCloudModel[] {\n        return [\n            new TaskFilterCloudModel({\n                name: 'ADF_CLOUD_TASK_FILTERS.MY_TASKS',\n                key: 'my-tasks',\n                icon: 'inbox',\n                appName,\n                status: 'ASSIGNED',\n                assignee: this.identityUserService.getCurrentUserInfo().username,\n                sort: 'createdDate',\n                order: 'DESC',\n                showCounter: true\n            }),\n            new TaskFilterCloudModel({\n                name: 'ADF_CLOUD_TASK_FILTERS.QUEUED_TASKS',\n                key: 'queued-tasks',\n                icon: 'queue',\n                appName,\n                status: 'CREATED',\n                assignee: '',\n                sort: 'createdDate',\n                order: 'DESC',\n                showCounter: true\n            }),\n            new TaskFilterCloudModel({\n                name: 'ADF_CLOUD_TASK_FILTERS.COMPLETED_TASKS',\n                key: 'completed-tasks',\n                icon: 'done',\n                appName,\n                status: 'COMPLETED',\n                assignee: '',\n                sort: 'createdDate',\n                order: 'DESC'\n            })\n        ];\n    }\n\n    getTaskNotificationSubscription(appName: string): Observable<TaskCloudEngineEvent[]> {\n        return this.notificationCloudService.makeGQLQuery(appName, TASK_EVENT_SUBSCRIPTION_QUERY)\n            .pipe(map((events: any) => events.data.engineEvents));\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { EventEmitter, Input, Output, OnDestroy, Directive } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\nimport { FilterParamsModel } from '../models/filter-cloud.model';\n\n@Directive()\n// tslint:disable-next-line: directive-class-suffix\nexport abstract class BaseTaskFiltersCloudComponent implements OnDestroy {\n    /** Display filters available to the current user for the application with the specified name. */\n    @Input()\n    appName: string = '';\n\n    /**\n     * Parameters to use for the task filter cloud. If there is no match then the default filter\n     * (the first one in the list) is selected.\n     */\n    @Input()\n    filterParam: FilterParamsModel;\n\n    /** Toggles display of the filter's icons. */\n    @Input()\n    showIcons: boolean = false;\n\n    /** Emitted when the list is loaded. */\n    @Output()\n    success: EventEmitter<any> = new EventEmitter<any>();\n\n    /** Emitted when an error occurs during loading. */\n    @Output()\n    error: EventEmitter<any> = new EventEmitter<any>();\n\n    counters$: {[key: string]: Observable<number>} = {};\n    updatedCounters: string[] = [];\n\n    protected onDestroy$ = new Subject<boolean>();\n\n    ngOnDestroy() {\n        this.onDestroy$.next(true);\n        this.onDestroy$.complete();\n    }\n\n    wasFilterUpdated(filterKey: string): boolean {\n        return this.updatedCounters.includes(filterKey);\n    }\n\n    addToUpdatedCounters(filterKey: string) {\n        if (!this.updatedCounters.includes(filterKey)) {\n            this.updatedCounters.push(filterKey);\n        }\n    }\n\n    resetFilterCounter(filterKey: string) {\n        const filterIndex = this.updatedCounters.indexOf(filterKey);\n        if (filterIndex > -1) {\n            this.updatedCounters.splice(filterIndex, 1);\n        }\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, EventEmitter, OnChanges, Output, SimpleChanges, OnInit, ViewEncapsulation } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { TaskFilterCloudService } from '../services/task-filter-cloud.service';\nimport { TaskFilterCloudModel, FilterParamsModel } from '../models/filter-cloud.model';\nimport { AppConfigService, TranslationService } from '@alfresco/adf-core';\nimport { debounceTime, takeUntil } from 'rxjs/operators';\nimport { BaseTaskFiltersCloudComponent } from './base-task-filters-cloud.component';\nimport { TaskDetailsCloudModel } from '../../start-task/models/task-details-cloud.model';\nimport { TaskCloudEngineEvent } from '../../../models/engine-event-cloud.model';\n\n@Component({\n    selector: 'adf-cloud-task-filters',\n    templateUrl: './base-task-filters-cloud.component.html',\n    styleUrls: ['./base-task-filters-cloud.component.scss'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class TaskFiltersCloudComponent extends BaseTaskFiltersCloudComponent implements OnInit, OnChanges {\n\n    /** Emitted when a filter is being selected based on the filterParam input. */\n    @Output()\n    filterSelected = new EventEmitter<TaskFilterCloudModel>();\n\n    /** Emitted when a filter is being clicked from the UI. */\n    @Output()\n    filterClicked = new EventEmitter<TaskFilterCloudModel>();\n\n    /** Emitted when filter counters are updated. */\n    @Output()\n    filterCounterUpdated: EventEmitter<TaskCloudEngineEvent[]> = new EventEmitter<TaskCloudEngineEvent[]>();\n\n    filters$: Observable<TaskFilterCloudModel[]>;\n    filters: TaskFilterCloudModel[] = [];\n    currentFilter: TaskFilterCloudModel;\n    enableNotifications: boolean;\n\n    constructor(private taskFilterCloudService: TaskFilterCloudService,\n                private translationService: TranslationService,\n                private appConfigService: AppConfigService) {\n        super();\n    }\n\n    ngOnInit() {\n        this.enableNotifications = this.appConfigService.get('notifications', true);\n        this.initFilterCounterNotifications();\n        this.getFilters(this.appName);\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        const appName = changes['appName'];\n        const filter = changes['filterParam'];\n        if (appName && appName.currentValue !== appName.previousValue) {\n            this.getFilters(appName.currentValue);\n        } else if (filter && filter.currentValue !== filter.previousValue) {\n            this.selectFilterAndEmit(filter.currentValue);\n        }\n    }\n\n    /**\n     * Return the filter list filtered by appName\n     */\n    getFilters(appName: string) {\n        this.filters$ = this.taskFilterCloudService.getTaskListFilters(appName);\n\n        this.filters$.pipe(takeUntil(this.onDestroy$)).subscribe(\n            (res: TaskFilterCloudModel[]) => {\n                this.resetFilter();\n                this.filters = res || [];\n                this.selectFilterAndEmit(this.filterParam);\n                this.updateFilterCounters();\n                this.success.emit(res);\n            },\n            (err: any) => {\n                this.error.emit(err);\n            }\n        );\n    }\n\n    updateFilterCounters() {\n        this.filters.forEach((filter: TaskFilterCloudModel) => this.updateFilterCounter(filter));\n    }\n\n    updateFilterCounter(filter: TaskFilterCloudModel) {\n        if (filter?.showCounter) {\n            this.counters$[filter.key] = this.taskFilterCloudService.getTaskFilterCounter(filter);\n        }\n    }\n\n    initFilterCounterNotifications() {\n        if (this.appName && this.enableNotifications) {\n            this.taskFilterCloudService.getTaskNotificationSubscription(this.appName)\n                .pipe(debounceTime(3000))\n                .subscribe((result: TaskCloudEngineEvent[]) => {\n                    result.map((taskEvent: TaskCloudEngineEvent) => {\n                        this.checkFilterCounter(taskEvent.entity);\n                    });\n\n                    if (this.updatedCounters.length) {\n                        this.updateFilterCounters();\n                        this.filterCounterUpdated.emit(result);\n                    }\n                });\n        }\n    }\n\n    checkFilterCounter(filterNotification: TaskDetailsCloudModel) {\n        this.filters.map((filter) => {\n            if (this.isFilterPresent(filter, filterNotification)) {\n                this.addToUpdatedCounters(filter.key);\n            }\n        });\n    }\n\n    isFilterPresent(filter: TaskFilterCloudModel, filterNotification: TaskDetailsCloudModel): boolean {\n        return filter.status === filterNotification.status\n            && (filter.assignee === filterNotification.assignee || filterNotification.assignee === undefined);\n    }\n\n    public selectFilter(paramFilter: FilterParamsModel) {\n        if (paramFilter) {\n            this.currentFilter = this.filters.find((filter, index) =>\n                paramFilter.index === index ||\n                paramFilter.key === filter.key ||\n                paramFilter.id === filter.id ||\n                (paramFilter.name &&\n                    (paramFilter.name.toLocaleLowerCase() === this.translationService.instant(filter.name).toLocaleLowerCase())\n                ));\n        }\n    }\n\n    public selectFilterAndEmit(newParamFilter: FilterParamsModel) {\n        if (newParamFilter) {\n            this.selectFilter(newParamFilter);\n\n            if (this.currentFilter) {\n                this.resetFilterCounter(this.currentFilter.key);\n                this.filterSelected.emit(this.currentFilter);\n            }\n        } else {\n            this.currentFilter = undefined;\n        }\n    }\n\n    /**\n     * Selects and emits the clicked filter.\n     */\n    public onFilterClick(filter: FilterParamsModel) {\n        if (filter) {\n            this.selectFilter(filter);\n            this.updateFilterCounter(this.currentFilter);\n            this.filterClicked.emit(this.currentFilter);\n        } else {\n            this.currentFilter = undefined;\n        }\n    }\n\n    /**\n     * Select as default task filter the first in the list\n     */\n    public selectDefaultTaskFilter() {\n        if (!this.isFilterListEmpty()) {\n            this.currentFilter = this.filters[0];\n        }\n    }\n\n    /**\n     * Check if the filter list is empty\n     */\n    isFilterListEmpty(): boolean {\n        return this.filters === undefined || (this.filters && this.filters.length === 0);\n    }\n\n    /**\n     * Reset the filters properties\n     */\n    private resetFilter() {\n        this.filters = [];\n        this.currentFilter = undefined;\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, Input, EventEmitter, Output } from '@angular/core';\nimport { MatSelectChange } from '@angular/material/select';\nimport { ProcessFilterProperties, ProcessFilterOptions } from '../../process/process-filters/models/process-filter-cloud.model';\nimport { FormGroup, FormControl } from '@angular/forms';\nimport { DateRangeFilter, DateCloudFilterType } from '../../models/date-cloud-filter.model';\nimport moment from 'moment-es6';\n\n@Component({\n     selector: 'adf-cloud-date-range-filter',\n     styleUrls: ['./date-range-filter.component.scss'],\n     templateUrl: './date-range-filter.component.html'\n })\n export class DateRangeFilterComponent {\n\n    @Input()\n    processFilterProperty: ProcessFilterProperties;\n\n    @Input()\n    options: DateCloudFilterType[];\n\n    @Output()\n    dateChanged = new EventEmitter<DateRangeFilter>();\n\n    @Output()\n    dateTypeChange = new EventEmitter<DateCloudFilterType>();\n\n    type: DateCloudFilterType;\n    filteredProperties: ProcessFilterOptions[] = [];\n    dateRangeForm = new FormGroup({\n        from: new FormControl(),\n        to: new FormControl()\n    });\n\n    ngOnInit() {\n        this.options = this.options ? this.options : this.createDefaultRangeOptions();\n        const defaultProperties = this.createDefaultDateOptions();\n        this.filteredProperties = defaultProperties.filter((filterProperty) => this.isValidProperty(this.options, filterProperty.value.toString()));\n        if (this.hasPreselectedValues()) {\n            this.setPreselectedValues();\n        }\n    }\n\n    onSelectionChange(option: MatSelectChange) {\n        this.type = option.value;\n        if (!this.isDateRangeType()) {\n            this.dateTypeChange.emit(this.type);\n        }\n    }\n\n    isDateRangeType(): boolean {\n        return this.type === DateCloudFilterType.RANGE;\n    }\n\n    onDateRangeClosed() {\n        const dateRange = {\n            startDate: moment(this.dateRangeForm.controls.from.value).startOf('day').toISOString(true),\n            endDate: moment(this.dateRangeForm.controls.to.value).endOf('day').toISOString(true)\n        };\n        this.dateChanged.emit(dateRange);\n    }\n\n    private hasPreselectedValues() {\n        return !!this.processFilterProperty?.attributes && !!this.processFilterProperty?.value;\n    }\n\n    private setPreselectedValues() {\n        const from = this.getFilterAttribute('from');\n        const to = this.getFilterAttribute('to');\n        const type = this.getFilterAttribute('dateType');\n\n        this.dateRangeForm.get('from').setValue(moment(this.getFilterValue(from)));\n        this.dateRangeForm.get('to').setValue(moment(this.getFilterValue(to)));\n        this.type = this.getFilterValue(type);\n    }\n\n    private getFilterAttribute(key: string): string {\n        return this.processFilterProperty.attributes[key];\n    }\n\n    private getFilterValue(attribute: string) {\n        return this.processFilterProperty.value[attribute];\n    }\n\n    private isValidProperty(filterProperties: string[], key: string): boolean {\n        return filterProperties ? filterProperties.indexOf(key) >= 0 : true;\n    }\n\n    private createDefaultRangeOptions(): DateCloudFilterType[] {\n        return [\n            DateCloudFilterType.NO_DATE,\n            DateCloudFilterType.TODAY,\n            DateCloudFilterType.WEEK,\n            DateCloudFilterType.MONTH,\n            DateCloudFilterType.QUARTER,\n            DateCloudFilterType.YEAR,\n            DateCloudFilterType.RANGE\n        ];\n    }\n\n    private createDefaultDateOptions(): ProcessFilterOptions[] {\n        return  [\n            {\n                value: DateCloudFilterType.NO_DATE,\n                label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.DATE_RANGE.NO_DATE'\n            },\n            {\n                value: DateCloudFilterType.TODAY,\n                label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.DATE_RANGE.TODAY'\n            },\n            {\n                value: DateCloudFilterType.TOMORROW,\n                label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.DATE_RANGE.TOMORROW'\n            },\n            {\n                value: DateCloudFilterType.NEXT_7_DAYS,\n                label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.DATE_RANGE.NEXT_7_DAYS'\n            },\n            {\n                value: DateCloudFilterType.WEEK,\n                label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.DATE_RANGE.WEEK'\n            },\n            {\n                value: DateCloudFilterType.MONTH,\n                label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.DATE_RANGE.MONTH'\n            },\n            {\n                value: DateCloudFilterType.QUARTER,\n                label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.DATE_RANGE.QUARTER'\n            },\n            {\n                value: DateCloudFilterType.YEAR,\n                label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.DATE_RANGE.YEAR'\n            },\n            {\n                value: DateCloudFilterType.RANGE,\n                label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.DATE_RANGE.RANGE'\n            }\n        ];\n    }\n }\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NgModule } from '@angular/core';\nimport { CoreModule } from '@alfresco/adf-core';\nimport { DateRangeFilterComponent } from './date-range-filter/date-range-filter.component';\nimport { MaterialModule } from '../material.module';\nimport { CommonModule } from '@angular/common';\nimport { DateRangeFilterService } from './date-range-filter/date-range-filter.service';\n\n@NgModule({\n    declarations: [ DateRangeFilterComponent ],\n    imports: [\n        CommonModule,\n        CoreModule,\n        MaterialModule\n    ],\n    exports: [\n        DateRangeFilterComponent\n    ],\n    providers: [\n        DateRangeFilterService\n    ]\n})\nexport class ProcessCommonModule {}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FormControl } from '@angular/forms';\nimport {\n    Component,\n    OnInit,\n    Output,\n    EventEmitter,\n    ViewEncapsulation,\n    Input,\n    SimpleChanges,\n    OnChanges,\n    OnDestroy,\n    ChangeDetectionStrategy,\n    ViewChild, ElementRef, SimpleChange\n} from '@angular/core';\nimport { Observable, of, BehaviorSubject, Subject } from 'rxjs';\nimport { switchMap, debounceTime, distinctUntilChanged, mergeMap, tap, filter, map, takeUntil } from 'rxjs/operators';\nimport {\n    FullNamePipe,\n    IdentityUserModel,\n    IdentityUserService,\n    LogService\n} from '@alfresco/adf-core';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport { ComponentSelectionMode } from '../../types';\n\n@Component({\n    selector: 'adf-cloud-people',\n    templateUrl: './people-cloud.component.html',\n    styleUrls: ['./people-cloud.component.scss'],\n    animations: [\n        trigger('transitionMessages', [\n            state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\n            transition('void => enter', [\n                style({ opacity: 0, transform: 'translateY(-100%)' }),\n                animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n            ])\n        ])\n    ],\n    providers: [FullNamePipe],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None\n})\n\nexport class PeopleCloudComponent implements OnInit, OnChanges, OnDestroy {\n\n    /** Name of the application. If specified, this shows the users who have access to the app. */\n    @Input()\n    appName: string;\n\n    /** User selection mode (single/multiple). */\n    @Input()\n    mode: ComponentSelectionMode = 'single';\n\n    /** Role names of the users to be listed. */\n    @Input()\n    roles: string[];\n\n    /** This flag enables the validation on the preSelectUsers passed as input.\n     * In case the flag is true the components call the identity service to verify the validity of the information passed as input.\n     * Otherwise, no check will be done.\n     */\n    @Input()\n    validate: boolean = false;\n\n    /** Show the info in readonly mode\n     */\n    @Input()\n    readOnly: boolean = false;\n\n    /** Array of users to be pre-selected. All users in the\n     * array are pre-selected in multi selection mode, but only the first user\n     * is pre-selected in single selection mode.\n     * Mandatory properties are: id, email, username\n     */\n    @Input()\n    preSelectUsers: IdentityUserModel[] = [];\n\n    /** Array of users to be excluded.\n     * Mandatory properties are: id, email, username\n     */\n    @Input()\n    excludedUsers: IdentityUserModel[] = [];\n\n    /** FormControl to list of users */\n    @Input()\n    userChipsCtrl: FormControl = new FormControl({ value: '', disabled: false });\n\n    /** FormControl to search the user */\n    @Input()\n    searchUserCtrl = new FormControl({ value: '', disabled: false });\n\n    /** Placeholder translation key\n     */\n    @Input()\n    title: string;\n\n    /** Emitted when a user is selected. */\n    @Output()\n    selectUser = new EventEmitter<IdentityUserModel>();\n\n    /** Emitted when a selected user is removed in multi selection mode. */\n    @Output()\n    removeUser = new EventEmitter<IdentityUserModel>();\n\n    /** Emitted when a user selection change. */\n    @Output()\n    changedUsers = new EventEmitter<IdentityUserModel[]>();\n\n    /** Emitted when an warning occurs. */\n    @Output()\n    warning = new EventEmitter<any>();\n\n    @ViewChild('userInput')\n    private userInput: ElementRef<HTMLInputElement>;\n\n    private _searchUsers: IdentityUserModel[] = [];\n    private onDestroy$ = new Subject<boolean>();\n\n    selectedUsers: IdentityUserModel[] = [];\n    invalidUsers: IdentityUserModel[] = [];\n\n    searchUsers$ = new BehaviorSubject<IdentityUserModel[]>(this._searchUsers);\n    _subscriptAnimationState: string = 'enter';\n    clientId: string;\n    isFocused: boolean;\n\n    validateUsersMessage: string;\n    searchedValue = '';\n\n    validationLoading = false;\n    searchLoading = false;\n\n    constructor(\n        private identityUserService: IdentityUserService,\n        private logService: LogService) {}\n\n    ngOnInit(): void {\n        this.loadClientId();\n        this.initSearch();\n    }\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if (this.valueChanged(changes.preSelectUsers)\n            || this.valueChanged(changes.mode)\n            || this.valueChanged(changes.validate)\n        ) {\n            if (this.hasPreSelectUsers()) {\n                this.loadPreSelectUsers();\n            } else if (this.hasPreselectedUsersCleared(changes)) {\n                this.selectedUsers = [];\n                this.invalidUsers = [];\n            }\n\n            if (!this.isValidationEnabled()) {\n                this.invalidUsers = [];\n            }\n        }\n\n        if (changes.appName && this.isAppNameChanged(changes.appName)) {\n            this.loadClientId();\n        }\n    }\n\n    private async loadClientId(): Promise<void> {\n        this.clientId = await this.identityUserService.getClientIdByApplicationName(this.appName).toPromise();\n        if (this.clientId) {\n            this.searchUserCtrl.enable();\n        }\n    }\n\n    private initSearch(): void {\n        this.searchUserCtrl.valueChanges.pipe(\n            filter((value) => {\n                this.searchLoading = true;\n                return typeof value === 'string';\n            }),\n            tap((value: string) => {\n                if (value) {\n                    this.setTypingError();\n                }\n            }),\n            debounceTime(500),\n            distinctUntilChanged(),\n            tap((value: string) => {\n                if (value.trim()) {\n                    this.searchedValue = value;\n                } else {\n                    this.searchUserCtrl.markAsPristine();\n                    this.searchUserCtrl.markAsUntouched();\n                }\n            }),\n            tap(() => {\n                this.resetSearchUsers();\n            }),\n            switchMap((search) =>\n                this.identityUserService.findUsersByName(search.trim())),\n            mergeMap((users) => {\n                this.resetSearchUsers();\n                this.searchLoading = false;\n                return users;\n            }),\n            filter(user => !this.isUserAlreadySelected(user) && !this.isExcludedUser(user)),\n            mergeMap(user => {\n                if (this.appName) {\n                    return this.checkUserHasAccess(user.id).pipe(\n                        mergeMap(\n                            hasRole => hasRole ? of(user) : of()\n                        )\n                    );\n                } else if (this.hasRoles()) {\n                    return this.filterUsersByRoles(user);\n                } else {\n                    return of(user);\n                }\n            }),\n            takeUntil(this.onDestroy$)\n        ).subscribe(user => {\n            this._searchUsers.push(user);\n            this.searchUsers$.next(this._searchUsers);\n        });\n    }\n\n    ngOnDestroy(): void {\n        this.onDestroy$.next(true);\n        this.onDestroy$.complete();\n    }\n\n    private isAppNameChanged(change: SimpleChange): boolean {\n        return change && change.previousValue !== change.currentValue && this.appName && this.appName.length > 0;\n    }\n\n    isValidationEnabled(): boolean {\n        return this.validate === true;\n    }\n\n    private checkUserHasAccess(userId: string): Observable<boolean> {\n        if (this.hasRoles()) {\n            return this.identityUserService.checkUserHasAnyClientAppRole(userId, this.clientId, this.roles);\n        } else {\n            return this.identityUserService.checkUserHasClientApp(userId, this.clientId);\n        }\n    }\n\n    private hasRoles(): boolean {\n        return this.roles && this.roles.length > 0;\n    }\n\n    filterUsersByRoles(user: IdentityUserModel): Observable<IdentityUserModel> {\n        return this.identityUserService.checkUserHasRole(user.id, this.roles).pipe(\n            map((hasRole: boolean) => ({ hasRole: hasRole, user: user })),\n            filter((filteredUser: { hasRole: boolean, user: IdentityUserModel }) => filteredUser.hasRole),\n            map((filteredUser: { hasRole: boolean, user: IdentityUserModel }) => filteredUser.user));\n    }\n\n    private isUserAlreadySelected(searchUser: IdentityUserModel): boolean {\n        if (this.selectedUsers && this.selectedUsers.length > 0) {\n            const result = this.selectedUsers.find((selectedUser) => {\n                return this.compare(selectedUser, searchUser);\n            });\n\n            return !!result;\n        }\n        return false;\n    }\n\n    private isExcludedUser(searchUser: IdentityUserModel): boolean {\n        if (this.excludedUsers?.length > 0) {\n            return !!this.excludedUsers.find(excludedUser => this.compare(excludedUser, searchUser));\n        }\n        return false;\n    }\n\n    private async loadPreSelectUsers(): Promise<void> {\n        this.selectedUsers = [];\n\n        if (this.isSingleMode()) {\n            this.selectedUsers = [this.preSelectUsers[0]];\n        } else {\n            this.selectedUsers = this.removeDuplicatedUsers(this.preSelectUsers);\n        }\n        this.userChipsCtrl.setValue(this.selectedUsers[0].username);\n        if (this.isValidationEnabled()) {\n            this.validationLoading = true;\n            await this.validatePreselectUsers();\n            this.validationLoading = false;\n        }\n    }\n\n    private getPreselectedUsers(): IdentityUserModel[] {\n        if (this.isSingleMode()) {\n            return [this.preSelectUsers[0]];\n        } else {\n            return this.removeDuplicatedUsers(this.preSelectUsers);\n        }\n    }\n\n    async validatePreselectUsers(): Promise<any> {\n        this.invalidUsers = [];\n        const validUsers: IdentityUserModel[] = [];\n\n        for (const user of this.getPreselectedUsers()) {\n            try {\n                const validationResult = await this.searchUser(user);\n\n                if (this.compare(user, validationResult)) {\n                    validationResult.readonly = user.readonly;\n                    validUsers.push(validationResult);\n                } else {\n                    this.invalidUsers.push(user);\n                }\n            } catch (error) {\n                this.invalidUsers.push(user);\n                this.logService.error(error);\n            }\n        }\n\n        this.checkPreselectValidationErrors();\n        this.selectedUsers = validUsers.concat(this.invalidUsers);\n    }\n\n    compare(preselectedUser: IdentityUserModel, identityUser: IdentityUserModel): boolean {\n        if (preselectedUser && identityUser) {\n            const uniquePropertyIdentifiers = ['id', 'username', 'email'];\n            for (const property of Object.keys(preselectedUser)) {\n                if (preselectedUser[property] !== undefined && uniquePropertyIdentifiers.includes(property)) {\n                    return preselectedUser[property] === identityUser[property];\n                }\n            }\n        }\n        return false;\n    }\n\n    private getSearchKey(user: IdentityUserModel): string {\n        if (user.id) {\n            return 'id';\n        } else if (user.email) {\n            return 'email';\n        } else if (user.username) {\n            return 'username';\n        } else {\n            return null;\n        }\n    }\n\n    async searchUser(user: IdentityUserModel): Promise<IdentityUserModel> {\n        const key = this.getSearchKey(user);\n\n        switch (key) {\n            case 'id':\n                return this.identityUserService.findUserById(user[key]).toPromise();\n            case 'username':\n                return (await this.identityUserService.findUserByUsername(user[key]).toPromise())[0];\n            case 'email':\n                return (await this.identityUserService.findUserByEmail(user[key]).toPromise())[0];\n            default:\n                return null;\n        }\n    }\n\n    removeDuplicatedUsers(users: IdentityUserModel[]): IdentityUserModel[] {\n        return users.filter((user, index, self) =>\n            index === self.findIndex(auxUser =>\n                user.id === auxUser.id && user.username === auxUser.username && user.email === auxUser.email\n            ));\n    }\n\n    checkPreselectValidationErrors(): void {\n        this.invalidUsers = this.removeDuplicatedUsers(this.invalidUsers);\n\n        if (this.invalidUsers.length > 0) {\n            this.generateInvalidUsersMessage();\n        }\n\n        this.warning.emit({\n            message: 'INVALID_PRESELECTED_USERS',\n            users: this.invalidUsers\n        });\n    }\n\n    onSelect(user: IdentityUserModel): void {\n        if (user) {\n            this.selectUser.emit(user);\n\n            if (this.isMultipleMode()) {\n                if (!this.isUserAlreadySelected(user)) {\n                    this.selectedUsers.push(user);\n                }\n            } else {\n                this.invalidUsers = [];\n                this.selectedUsers = [user];\n            }\n\n            this.userInput.nativeElement.value = '';\n            this.searchUserCtrl.setValue('');\n            this.userChipsCtrlValue(this.selectedUsers[0].username);\n\n            this.changedUsers.emit(this.selectedUsers);\n            this.resetSearchUsers();\n        }\n    }\n\n    onRemove(userToRemove: IdentityUserModel): void {\n        this.removeUser.emit(userToRemove);\n        this.removeUserFromSelected(userToRemove);\n        this.changedUsers.emit(this.selectedUsers);\n        if (this.selectedUsers.length === 0) {\n            this.userChipsCtrlValue('');\n\n        } else {\n            this.userChipsCtrlValue(this.selectedUsers[0].username);\n        }\n        this.searchUserCtrl.markAsDirty();\n        this.searchUserCtrl.markAsTouched();\n\n        if (this.isValidationEnabled()) {\n            this.removeUserFromValidation(userToRemove);\n            this.checkPreselectValidationErrors();\n        }\n    }\n\n    private userChipsCtrlValue(value: string) {\n        this.userChipsCtrl.setValue(value);\n        this.userChipsCtrl.markAsDirty();\n        this.userChipsCtrl.markAsTouched();\n    }\n\n    private removeUserFromSelected({ id, username, email }: IdentityUserModel): void {\n        const indexToRemove = this.selectedUsers.findIndex(user => {\n            return user.id === id\n                && user.username === username\n                && user.email === email;\n        });\n\n        if (indexToRemove !== -1) {\n            this.selectedUsers.splice(indexToRemove, 1);\n        }\n    }\n\n    private removeUserFromValidation({ id, username, email }: IdentityUserModel): void {\n        const indexToRemove = this.invalidUsers.findIndex(user => {\n            return user.id === id\n                && user.username === username\n                && user.email === email;\n        });\n\n        if (indexToRemove !== -1) {\n            this.invalidUsers.splice(indexToRemove, 1);\n        }\n    }\n\n    generateInvalidUsersMessage(): void {\n        this.validateUsersMessage = '';\n\n        this.invalidUsers.forEach((invalidUser, index) => {\n            if (index === this.invalidUsers.length - 1) {\n                this.validateUsersMessage += `${invalidUser.username} `;\n            } else {\n                this.validateUsersMessage += `${invalidUser.username}, `;\n            }\n        });\n    }\n\n    setTypingError(): void {\n        this.searchUserCtrl.setErrors({\n            searchTypingError: true,\n            ...this.searchUserCtrl.errors\n        });\n    }\n\n    hasPreselectError(): boolean {\n        return this.invalidUsers\n            && this.invalidUsers.length > 0;\n    }\n\n    getDisplayName(user): string {\n        return FullNamePipe.prototype.transform(user);\n    }\n\n    isMultipleMode(): boolean {\n        return this.mode === 'multiple';\n    }\n\n    isSingleMode(): boolean {\n        return this.mode === 'single';\n    }\n\n    private isSingleSelectionReadonly(): boolean {\n        return this.isSingleMode()\n            && this.selectedUsers.length === 1\n            && this.selectedUsers[0].readonly === true;\n    }\n\n    private hasPreSelectUsers(): boolean {\n        return this.preSelectUsers\n            && this.preSelectUsers.length > 0;\n    }\n\n    private valueChanged(change: SimpleChange): boolean {\n        return change\n            && change.currentValue !== change.previousValue;\n    }\n\n    private hasPreselectedUsersCleared(changes: SimpleChanges): boolean {\n        return changes\n            && changes.preSelectUsers\n            && changes.preSelectUsers.currentValue\n            && changes.preSelectUsers.currentValue.length === 0;\n    }\n\n    private resetSearchUsers(): void {\n        this._searchUsers = [];\n        this.searchUsers$.next(this._searchUsers);\n    }\n\n    getSelectedUsers(): IdentityUserModel[] {\n        return this.selectedUsers;\n    }\n\n    isReadonly(): boolean {\n        return this.readOnly || this.isSingleSelectionReadonly();\n    }\n\n    isValidationLoading(): boolean {\n        return this.isValidationEnabled() && this.validationLoading;\n    }\n\n    setFocus(isFocused: boolean) {\n        this.isFocused = isFocused;\n    }\n\n    hasError(): boolean {\n        return !!this.searchUserCtrl.errors;\n    }\n\n    getValidationPattern(): string {\n        return this.searchUserCtrl.errors.pattern.requiredPattern;\n    }\n\n    getValidationMaxLength(): string {\n        return this.searchUserCtrl.errors.maxlength.requiredLength;\n    }\n\n    getValidationMinLength(): string {\n        return this.searchUserCtrl.errors.minlength.requiredLength;\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NgModule } from '@angular/core';\nimport { PeopleCloudComponent } from './components/people-cloud.component';\nimport { CommonModule } from '@angular/common';\nimport { MaterialModule } from '../material.module';\nimport { CoreModule } from '@alfresco/adf-core';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FlexLayoutModule,\n        MaterialModule,\n        FormsModule,\n        ReactiveFormsModule,\n        CoreModule\n    ],\n    declarations: [PeopleCloudComponent],\n    exports: [\n        PeopleCloudComponent\n    ]\n})\nexport class PeopleCloudModule {\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { IdentityUserService } from '@alfresco/adf-core';\nimport { Injectable, Inject } from '@angular/core';\nimport { Observable, of, BehaviorSubject } from 'rxjs';\nimport { ServiceTaskFilterCloudModel } from '../models/filter-cloud.model';\nimport { switchMap, map } from 'rxjs/operators';\nimport { PreferenceCloudServiceInterface } from '../../../services/preference-cloud.interface';\nimport { TASK_FILTERS_SERVICE_TOKEN } from '../../../services/cloud-token.service';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class ServiceTaskFilterCloudService {\n    private filtersSubject: BehaviorSubject<ServiceTaskFilterCloudModel[]>;\n    filters$: Observable<ServiceTaskFilterCloudModel[]>;\n\n    constructor(\n        private identityUserService: IdentityUserService,\n        @Inject(TASK_FILTERS_SERVICE_TOKEN)\n        public preferenceService: PreferenceCloudServiceInterface\n    ) {\n        this.filtersSubject = new BehaviorSubject([]);\n        this.filters$ = this.filtersSubject.asObservable();\n    }\n\n    /**\n     * Creates and returns the default task filters for an app.\n     * @param appName Name of the target app\n     * @returns Observable of default filters task filters just created or created filters\n     */\n    private createDefaultFilters(appName: string) {\n        const key: string = this.prepareKey(appName);\n        this.preferenceService.getPreferences(appName, key).pipe(\n            switchMap((response: any) => {\n                const preferences = (response && response.list && response.list.entries) ? response.list.entries : [];\n                if (!this.hasPreferences(preferences) || !this.hasTaskFilters(preferences, key)) {\n                    return this.createTaskFilters(appName, key, this.defaultServiceTaskFilters(appName));\n                } else {\n                    return of(this.findFiltersByKeyInPreferences(preferences, key));\n                }\n            })\n        ).subscribe((filters) => {\n            this.addFiltersToStream(filters);\n        });\n    }\n\n    /**\n     * Checks user preference are empty or not\n     * @param preferences User preferences of the target app\n     * @returns Boolean value if the preferences are not empty\n     */\n    private hasPreferences(preferences: any): boolean {\n        return preferences && preferences.length > 0;\n    }\n\n    /**\n     * Checks for task filters in given user preferences\n     * @param preferences User preferences of the target app\n     * @param key Key of the task filters\n     * @param filters Details of create filter\n     * @returns Boolean value if the preference has task filters\n     */\n    private hasTaskFilters(preferences: any, key: string): boolean {\n        const filters = preferences.find((filter: any) => { return filter.entry.key === key; });\n        return (filters && filters.entry) ? JSON.parse(filters.entry.value).length > 0 : false;\n    }\n\n    /**\n     * Calls create preference api to create task filters\n     * @param appName Name of the target app\n     * @param key Key of the task instance filters\n     * @param filters Details of new task filter\n     * @returns Observable of created task filters\n     */\n    private createTaskFilters(appName: string, key: string, filters: ServiceTaskFilterCloudModel[]): Observable<ServiceTaskFilterCloudModel[]> {\n        return this.preferenceService.createPreference(appName, key, filters);\n    }\n\n    /**\n     * Calls get preference api to get task filter by preference key\n     * @param appName Name of the target app\n     * @param key Key of the task filters\n     * @returns Observable of task filters\n     */\n    private getTaskFiltersByKey(appName: string, key: string): Observable<ServiceTaskFilterCloudModel[]> {\n        return this.preferenceService.getPreferenceByKey(appName, key);\n    }\n\n    /**\n     * Gets all task filters for a task app.\n     * @param appName Name of the target app\n     * @returns Observable of task filter details\n     */\n    getTaskListFilters(appName?: string): Observable<ServiceTaskFilterCloudModel[]> {\n        this.createDefaultFilters(appName);\n        return this.filters$;\n    }\n\n    /**\n     * Gets a task filter.\n     * @param appName Name of the target app\n     * @param id ID of the task\n     * @returns Details of the task filter\n     */\n    getTaskFilterById(appName: string, id: string): Observable<ServiceTaskFilterCloudModel> {\n        const key: string = this.prepareKey(appName);\n        return this.getTaskFiltersByKey(appName, key).pipe(\n            switchMap((filters: ServiceTaskFilterCloudModel[]) => {\n                if (filters && filters.length === 0) {\n                    return this.createTaskFilters(appName, key, this.defaultServiceTaskFilters(appName));\n                } else {\n                    return of(filters);\n                }\n            }),\n            map((filters: any) => {\n                return filters.filter((filter: ServiceTaskFilterCloudModel) => {\n                    return filter.id === id;\n                })[0];\n            })\n        );\n    }\n\n    /**\n     * Adds a new task filter.\n     * @param filter The new filter to add\n     * @returns Observable of task instance filters with newly added filter\n     */\n    addFilter(newFilter: ServiceTaskFilterCloudModel): Observable<ServiceTaskFilterCloudModel[]> {\n        const key: string = this.prepareKey(newFilter.appName);\n        return this.getTaskFiltersByKey(newFilter.appName, key).pipe(\n            switchMap((filters: ServiceTaskFilterCloudModel[]) => {\n                if (filters && filters.length === 0) {\n                    return this.createTaskFilters(newFilter.appName, key, <ServiceTaskFilterCloudModel[]> [newFilter]);\n                } else {\n                    filters.push(newFilter);\n                    return this.preferenceService.updatePreference(newFilter.appName, key, filters);\n                }\n            }),\n            map((filters: ServiceTaskFilterCloudModel[]) => {\n                this.addFiltersToStream(filters);\n                return filters;\n            })\n        );\n    }\n\n    private addFiltersToStream(filters: ServiceTaskFilterCloudModel[]) {\n        this.filtersSubject.next(filters);\n    }\n\n    /**\n     * Updates a task filter.\n     * @param filter The filter to update\n     * @returns Observable of task instance filters with updated filter\n     */\n    updateFilter(updatedFilter: ServiceTaskFilterCloudModel): Observable<ServiceTaskFilterCloudModel[]> {\n        const key: string = this.prepareKey(updatedFilter.appName);\n        return this.getTaskFiltersByKey(updatedFilter.appName, key).pipe(\n            switchMap((filters: ServiceTaskFilterCloudModel[]) => {\n                if (filters && filters.length === 0) {\n                    return this.createTaskFilters(updatedFilter.appName, key, <ServiceTaskFilterCloudModel[]> [updatedFilter]);\n                } else {\n                    const itemIndex = filters.findIndex((filter: ServiceTaskFilterCloudModel) => filter.id === updatedFilter.id);\n                    filters[itemIndex] = updatedFilter;\n                    return this.updateTaskFilters(updatedFilter.appName, key, filters);\n                }\n            }),\n            map((updatedFilters: ServiceTaskFilterCloudModel[]) => {\n                this.addFiltersToStream(updatedFilters);\n                return updatedFilters;\n            })\n        );\n    }\n\n    /**\n     * Deletes a task filter\n     * @param filter The filter to delete\n     * @returns Observable of task instance filters without deleted filter\n     */\n    deleteFilter(deletedFilter: ServiceTaskFilterCloudModel): Observable<ServiceTaskFilterCloudModel[]> {\n        const key = this.prepareKey(deletedFilter.appName);\n        return this.getTaskFiltersByKey(deletedFilter.appName, key).pipe(\n            switchMap((filters: ServiceTaskFilterCloudModel[]) => {\n                if (filters && filters.length > 0) {\n                    filters = filters.filter(filter => filter.id !== deletedFilter.id);\n                    return this.updateTaskFilters(deletedFilter.appName, key, filters);\n                }\n                return of([]);\n            }),\n            map(filters => {\n                this.addFiltersToStream(filters);\n                return filters;\n            })\n        );\n    }\n\n    /**\n     * Checks if given filter is a default filter\n     * @param filterName Name of the target task filter\n     * @returns Boolean value for whether the filter is a default filter\n     */\n    isDefaultFilter(filterName: string): boolean {\n        const defaultFilters = this.defaultServiceTaskFilters();\n        return defaultFilters.findIndex((filter) => filterName === filter.name) !== -1;\n    }\n\n    /**\n     * Calls update preference api to update task filter\n     * @param appName Name of the target app\n     * @param key Key of the task filters\n     * @param filters Details of update filter\n     * @returns Observable of updated task filters\n     */\n    private updateTaskFilters(appName: string, key: string, filters: ServiceTaskFilterCloudModel[]): Observable<ServiceTaskFilterCloudModel[]> {\n        return this.preferenceService.updatePreference(appName, key, filters);\n    }\n\n    /**\n     * Creates a uniq key with appName and username\n     * @param appName Name of the target app\n     * @returns String of task filters preference key\n     */\n    private prepareKey(appName: string): string {\n        return `service-task-filters-${appName}-${this.identityUserService.getCurrentUserInfo().username}`;\n    }\n\n    /**\n     * Finds and returns the task filters from preferences\n     * @param appName Name of the target app\n     * @returns Array of TaskFilterCloudModel\n     */\n    private findFiltersByKeyInPreferences(preferences: any, key: string): ServiceTaskFilterCloudModel[] {\n        const result = preferences.find((filter: any) => { return filter.entry.key === key; });\n        return result && result.entry ? JSON.parse(result.entry.value) : [];\n    }\n\n    /**\n     * Creates and returns the default filters for a task app.\n     * @param appName Name of the target app\n     * @returns Array of TaskFilterCloudModel\n     */\n    private defaultServiceTaskFilters(appName?: string): ServiceTaskFilterCloudModel[] {\n        return [\n            {\n                id: this.generateRandomId(),\n                name: 'ADF_CLOUD_SERVICE_TASK_FILTERS.ALL_SERVICE_TASKS',\n                key: 'my-service-tasks',\n                icon: 'inbox',\n                appName,\n                status: '',\n                sort: 'startedDate',\n                order: 'DESC'\n            } as ServiceTaskFilterCloudModel,\n            {\n                id: this.generateRandomId(),\n                name: 'ADF_CLOUD_SERVICE_TASK_FILTERS.COMPLETED_TASKS',\n                key: 'completed-tasks',\n                icon: 'done',\n                appName,\n                status: 'COMPLETED',\n                sort: 'completedDate',\n                order: 'DESC'\n            } as ServiceTaskFilterCloudModel,\n            {\n                id: this.generateRandomId(),\n                name: 'ADF_CLOUD_SERVICE_TASK_FILTERS.ERRORED_TASKS',\n                key: 'errored-service-tasks',\n                icon: 'error',\n                appName,\n                status: 'ERROR',\n                sort: 'startedDate',\n                order: 'DESC'\n            } as ServiceTaskFilterCloudModel\n        ];\n    }\n\n    generateRandomId(): string {\n        return Math.random().toString(36).substr(2, 9);\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, Inject, OnInit } from '@angular/core';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\nimport { FormBuilder, FormGroup, AbstractControl, Validators } from '@angular/forms';\n\n@Component({\n  selector: 'adf-cloud-task-filter-dialog',\n  templateUrl: './task-filter-dialog-cloud.component.html',\n  styleUrls: ['./task-filter-dialog-cloud.component.scss']\n})\nexport class TaskFilterDialogCloudComponent implements OnInit {\n\n    public static ACTION_SAVE = 'SAVE';\n    defaultIcon = 'inbox';\n\n    filterForm: FormGroup;\n\n    constructor(\n        private fb: FormBuilder,\n        public dialogRef: MatDialogRef<TaskFilterDialogCloudComponent>,\n        @Inject(MAT_DIALOG_DATA) public data) {\n    }\n\n    ngOnInit() {\n        this.filterForm = this.fb.group({\n            name: [this.data.name, Validators.required]\n        });\n    }\n\n    onSaveClick() {\n        this.dialogRef.close({\n            action: TaskFilterDialogCloudComponent.ACTION_SAVE,\n            icon: this.defaultIcon,\n            name: this.nameController.value\n        });\n    }\n\n    onCancelClick() {\n        this.dialogRef.close();\n    }\n\n    get nameController(): AbstractControl {\n        return this.filterForm.get('name');\n    }\n\n    isValid(): boolean {\n        return this.filterForm.valid;\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { OnChanges, SimpleChanges, OnInit, OnDestroy, Directive, Input, Output, EventEmitter } from '@angular/core';\nimport { FilterOptions, TaskFilterAction, TaskFilterProperties } from '../../models/filter-cloud.model';\nimport { TaskCloudService } from './../../../services/task-cloud.service';\nimport { AppsProcessCloudService } from './../../../../app/services/apps-process-cloud.service';\nimport { DateCloudFilterType, DateRangeFilter } from '../../../../models/date-cloud-filter.model';\nimport moment, { Moment } from 'moment';\nimport { AbstractControl, FormBuilder, FormGroup } from '@angular/forms';\nimport { debounceTime, filter, finalize, switchMap, takeUntil } from 'rxjs/operators';\nimport { Observable, Subject } from 'rxjs';\nimport { DateAdapter } from '@angular/material/core';\nimport { IdentityGroupModel, IdentityUserModel, TranslationService, UserPreferencesService, UserPreferenceValues } from '@alfresco/adf-core';\nimport { TaskFilterDialogCloudComponent } from '../task-filter-dialog/task-filter-dialog-cloud.component';\nimport { MatDialog } from '@angular/material/dialog';\n\nexport interface DropdownOption {\n    value: string;\n    label: string;\n}\n\n@Directive()\n// tslint:disable-next-line: directive-class-suffix\nexport abstract class BaseEditTaskFilterCloudComponent<T> implements OnInit, OnChanges, OnDestroy {\n\n    public static ACTION_SAVE = 'save';\n    public static ACTION_SAVE_AS = 'saveAs';\n    public static ACTION_DELETE = 'delete';\n    public static APP_RUNNING_STATUS: string = 'RUNNING';\n    public static APPLICATION_NAME: string = 'appName';\n    public static PROCESS_DEFINITION_NAME: string = 'processDefinitionName';\n    public static LAST_MODIFIED: string = 'lastModified';\n    public static SORT: string = 'sort';\n    public static ORDER: string = 'order';\n    public static DEFAULT_ACTIONS = ['save', 'saveAs', 'delete'];\n    public static FORMAT_DATE: string = 'DD/MM/YYYY';\n    public static ACTIONS_DISABLED_BY_DEFAULT = [\n        BaseEditTaskFilterCloudComponent.ACTION_SAVE,\n        BaseEditTaskFilterCloudComponent.ACTION_DELETE\n    ];\n\n    /** (required) Name of the app. */\n    @Input()\n    appName: string = '';\n\n    /** (required) ID of the task filter. */\n    @Input()\n    id: string;\n\n    /** Toggles the title. */\n    @Input()\n    showTitle = true;\n\n    /** Toggles display of task filter name */\n    @Input()\n    showTaskFilterName = true;\n\n    /** List of task filter properties to display. */\n    @Input()\n    filterProperties: string[] = [];\n\n    /** user role. */\n    @Input()\n    role: string = '';\n\n    /** Toggles the filter actions. */\n    @Input()\n    showFilterActions = true;\n\n    /** List of task filter actions. */\n    @Input()\n    actions: string[] = BaseEditTaskFilterCloudComponent.DEFAULT_ACTIONS;\n\n    /** List of sort properties to display. */\n    @Input()\n    sortProperties: string[] = [];\n\n    /** Emitted when a filter action occurs (i.e Save, Save As, Delete). */\n    @Output()\n    action = new EventEmitter<TaskFilterAction>();\n\n    protected applicationNames: DropdownOption[] = [];\n    protected processDefinitionNames: DropdownOption[] = [];\n    protected formHasBeenChanged = false;\n\n    editTaskFilterForm: FormGroup;\n    taskFilterProperties: TaskFilterProperties[] = [];\n    taskFilterActions: TaskFilterAction[] = [];\n    toggleFilterActions: boolean = false;\n    sortDirections: DropdownOption[] = [\n        { value: 'ASC', label: 'ADF_CLOUD_TASK_FILTERS.DIRECTION.ASCENDING' },\n        { value: 'DESC', label: 'ADF_CLOUD_TASK_FILTERS.DIRECTION.DESCENDING' }\n    ];\n    allProcessDefinitionNamesOption: DropdownOption = {\n        value: '',\n        label: 'ADF_CLOUD_TASK_FILTERS.STATUS.ALL'\n    };\n\n    taskFilter: T;\n    changedTaskFilter: T;\n\n    /** Emitted when a task filter property changes. */\n    @Output()\n    filterChange = new EventEmitter<T>();\n\n    protected onDestroy$ = new Subject<boolean>();\n    isLoading: boolean = false;\n\n    constructor(\n        protected formBuilder: FormBuilder,\n        protected dateAdapter: DateAdapter<Moment>,\n        protected userPreferencesService: UserPreferencesService,\n        protected appsProcessCloudService: AppsProcessCloudService,\n        protected taskCloudService: TaskCloudService,\n        protected dialog: MatDialog,\n        protected translateService: TranslationService) {\n    }\n\n    ngOnInit() {\n        this.userPreferencesService\n            .select(UserPreferenceValues.Locale)\n            .pipe(takeUntil(this.onDestroy$))\n            .subscribe(locale => this.dateAdapter.setLocale(locale));\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        const id = changes['id'];\n        if (id && id.currentValue !== id.previousValue) {\n            this.retrieveTaskFilterAndBuildForm();\n        }\n    }\n\n    ngOnDestroy() {\n        this.onDestroy$.next(true);\n        this.onDestroy$.complete();\n    }\n\n    createFilterActions(): TaskFilterAction[] {\n        return [\n            {\n                actionType: BaseEditTaskFilterCloudComponent.ACTION_SAVE,\n                icon: 'adf:save',\n                tooltip: 'ADF_CLOUD_EDIT_TASK_FILTER.TOOL_TIP.SAVE'\n            },\n            {\n                actionType: BaseEditTaskFilterCloudComponent.ACTION_SAVE_AS,\n                icon: 'adf:save-as',\n                tooltip: 'ADF_CLOUD_EDIT_TASK_FILTER.TOOL_TIP.SAVE_AS'\n            },\n            {\n                actionType: BaseEditTaskFilterCloudComponent.ACTION_DELETE,\n                icon: 'delete',\n                tooltip: 'ADF_CLOUD_EDIT_TASK_FILTER.TOOL_TIP.DELETE'\n            }\n        ];\n    }\n\n    hasFormChanged(action: TaskFilterAction): boolean {\n        if (action.actionType === BaseEditTaskFilterCloudComponent.ACTION_SAVE) {\n            return !this.formHasBeenChanged;\n        }\n        if (action.actionType === BaseEditTaskFilterCloudComponent.ACTION_SAVE_AS) {\n            return !this.formHasBeenChanged;\n        }\n        if (action.actionType === BaseEditTaskFilterCloudComponent.ACTION_DELETE) {\n            return false;\n        }\n\n        return false;\n    }\n\n    onExpand(): void {\n        this.toggleFilterActions = true;\n    }\n\n    onClose(): void {\n        this.toggleFilterActions = false;\n    }\n\n    isDisabledAction(action: TaskFilterAction): boolean {\n        return this.isDisabledForDefaultFilters(action) ? true : this.hasFormChanged(action);\n    }\n\n    protected deepCompare(left: any, right: any): boolean {\n        return JSON.stringify(left).toLowerCase() === JSON.stringify(right).toLowerCase();\n    }\n\n    /**\n     * Return filter name\n     * @param filterName\n     */\n    getSanitizeFilterName(filterName: string): string {\n        const nameWithHyphen = this.replaceSpaceWithHyphen(filterName.trim());\n        return nameWithHyphen.toLowerCase();\n    }\n\n    private replaceSpaceWithHyphen(name: string): string {\n        const regExt = new RegExp(' ', 'g');\n        return name.replace(regExt, '-');\n    }\n\n    executeFilterActions(action: TaskFilterAction): void {\n        if (action.actionType === BaseEditTaskFilterCloudComponent.ACTION_SAVE) {\n            this.save(action);\n        } else if (action.actionType === BaseEditTaskFilterCloudComponent.ACTION_SAVE_AS) {\n            this.saveAs(action);\n        } else if (action.actionType === BaseEditTaskFilterCloudComponent.ACTION_DELETE) {\n            this.delete(action);\n        }\n    }\n\n    getRunningApplications() {\n        this.appsProcessCloudService\n            .getDeployedApplicationsByStatus(BaseEditTaskFilterCloudComponent.APP_RUNNING_STATUS, this.role)\n            .subscribe((applications) => {\n                if (applications && applications.length > 0) {\n                    applications.map((application) => {\n                        this.applicationNames.push({ label: application.name, value: application.name });\n                    });\n                }\n            });\n    }\n\n    getProcessDefinitions() {\n        this.taskCloudService.getProcessDefinitions(this.appName)\n            .subscribe((processDefinitions) => {\n                if (processDefinitions && processDefinitions.length > 0) {\n                    this.processDefinitionNames.push(this.allProcessDefinitionNamesOption);\n                    processDefinitions.map((processDefinition) => {\n                        this.processDefinitionNames.push({ label: processDefinition.name, value: processDefinition.name });\n                    });\n                }\n            });\n    }\n\n    checkMandatoryActions(): void {\n        if (this.actions === undefined || this.actions.length === 0) {\n            this.actions = BaseEditTaskFilterCloudComponent.DEFAULT_ACTIONS;\n        }\n    }\n\n    private isValidAction(actions: string[], action: any): boolean {\n        return actions ? actions.indexOf(action.actionType) >= 0 : true;\n    }\n\n    isFormValid(): boolean {\n        return this.editTaskFilterForm.valid;\n    }\n\n    getPropertyController(property: TaskFilterProperties): AbstractControl {\n        return this.editTaskFilterForm.get(property.key);\n    }\n\n    onDateChanged(newDateValue: any, dateProperty: TaskFilterProperties) {\n        if (newDateValue) {\n            const momentDate = moment(newDateValue, BaseEditTaskFilterCloudComponent.FORMAT_DATE, true);\n            const controller = this.getPropertyController(dateProperty);\n\n            if (momentDate.isValid()) {\n                controller.setValue(momentDate.toISOString(true));\n                controller.setErrors(null);\n            } else {\n                controller.setErrors({ invalid: true });\n            }\n        }\n    }\n\n    onDateRangeFilterChanged(dateRange: DateRangeFilter, property: TaskFilterProperties) {\n        this.editTaskFilterForm.get(property.attributes?.from).setValue(\n            dateRange.startDate ? dateRange.startDate : null\n        );\n        this.editTaskFilterForm.get(property.attributes?.to).setValue(\n            dateRange.endDate ? dateRange.endDate : null\n        );\n        this.editTaskFilterForm.get(property.attributes.dateType).setValue(DateCloudFilterType.RANGE);\n    }\n\n    onChangedUser(users: IdentityUserModel[], userProperty: TaskFilterProperties) {\n        let selectedUsers;\n        if (userProperty.selectionMode === 'single') {\n            selectedUsers = users[0];\n        } else {\n            selectedUsers = users;\n        }\n        this.getPropertyController(userProperty).setValue(selectedUsers);\n    }\n\n    onAssignedChange(assignedValue: IdentityUserModel) {\n        this.editTaskFilterForm.get('candidateGroups').setValue([]);\n        this.editTaskFilterForm.get('assignee').setValue(assignedValue?.username);\n    }\n\n    onAssignedGroupsChange(groups: IdentityGroupModel[]) {\n        this.editTaskFilterForm.get('assignee').setValue(null);\n        this.editTaskFilterForm.get('candidateGroups').setValue(groups);\n    }\n\n    hasError(property: TaskFilterProperties): boolean {\n        const controller = this.getPropertyController(property);\n        return controller.errors && controller.errors.invalid;\n    }\n\n    hasLastModifiedProperty(): boolean {\n        return this.filterProperties.indexOf(BaseEditTaskFilterCloudComponent.LAST_MODIFIED) >= 0;\n    }\n\n    get createSortProperties(): FilterOptions[] {\n        this.checkMandatorySortProperties();\n\n        return this.sortProperties.map((property: string) => {\n            return { label: property, value: property };\n        });\n    }\n\n    createAndFilterActions(): TaskFilterAction[] {\n        this.checkMandatoryActions();\n        return this.createFilterActions().filter(action => this.isValidAction(this.actions, action));\n    }\n\n    isValidProperty(filterProperties: string[], key: string): boolean {\n        return filterProperties ? filterProperties.indexOf(key) >= 0 : true;\n    }\n\n    checkForProperty(property: string): boolean {\n        return this.filterProperties ? this.filterProperties.indexOf(property) >= 0 : false;\n    }\n\n    hasSortProperty(): boolean {\n        return this.filterProperties.indexOf(BaseEditTaskFilterCloudComponent.SORT) >= 0;\n    }\n\n    removeOrderProperty(filteredProperties: TaskFilterProperties[]): TaskFilterProperties[] {\n        if (filteredProperties && filteredProperties.length > 0) {\n            return filteredProperties.filter(property => property.key !== BaseEditTaskFilterCloudComponent.ORDER);\n        }\n        return [];\n    }\n\n    createAndFilterProperties() {\n        this.checkMandatoryFilterProperties();\n\n        if (this.checkForProperty(BaseEditTaskFilterCloudComponent.APPLICATION_NAME)) {\n            this.applicationNames = [];\n            this.getRunningApplications();\n        }\n        if (this.checkForProperty(BaseEditTaskFilterCloudComponent.PROCESS_DEFINITION_NAME)) {\n            this.processDefinitionNames = [];\n            this.getProcessDefinitions();\n        }\n\n        const defaultProperties = this.createTaskFilterProperties();\n        let filteredProperties = defaultProperties.filter((filterProperty) => this.isValidProperty(this.filterProperties, filterProperty.key));\n\n        if (!this.hasSortProperty()) {\n            filteredProperties = this.removeOrderProperty(filteredProperties);\n        }\n\n        return filteredProperties;\n    }\n\n    /**\n     * Check for edit task filter form changes\n     */\n    onFilterChange() {\n        this.editTaskFilterForm.valueChanges\n            .pipe(\n                debounceTime(500),\n                filter(() => this.isFormValid()),\n                takeUntil(this.onDestroy$)\n            )\n            .subscribe((formValues) => {\n                this.assignNewFilter(formValues);\n            });\n    }\n\n    getFormControlsConfig(taskFilterProperties: TaskFilterProperties[]): any {\n        const properties = taskFilterProperties.map((property) => {\n            if (!!property.attributes) {\n                return this.getAttributesControlConfig(property);\n            } else {\n                return { [property.key]: property.value };\n            }\n        });\n        return properties.reduce(((result, current) => Object.assign(result, current)), {});\n    }\n\n    private getAttributesControlConfig(property: TaskFilterProperties) {\n        return Object.values(property.attributes).reduce((result, key) => {\n            result[key] = property.value[key];\n            return result;\n        }, {});\n    }\n\n    buildForm(taskFilterProperties: TaskFilterProperties[]) {\n        this.formHasBeenChanged = false;\n        this.editTaskFilterForm = this.formBuilder.group(this.getFormControlsConfig(taskFilterProperties));\n        this.onFilterChange();\n    }\n\n    onDateTypeChange(dateType: DateCloudFilterType, property: TaskFilterProperties) {\n        this.editTaskFilterForm.get(property.attributes.dateType).setValue(dateType);\n    }\n\n    protected retrieveTaskFilterAndBuildForm() {\n        this.isLoading = true;\n\n        this.getTaskFilterById(this.appName, this.id)\n            .pipe(\n                finalize(() => this.isLoading = false),\n                takeUntil(this.onDestroy$)\n            )\n            .subscribe(response => {\n                this.taskFilter = response;\n                this.taskFilterProperties = this.createAndFilterProperties();\n                this.taskFilterActions = this.createAndFilterActions();\n                this.buildForm(this.taskFilterProperties);\n            });\n    }\n\n    delete(deleteAction: TaskFilterAction): void {\n        this.deleteFilter(this.taskFilter)\n            .pipe(\n                filter((filters) => {\n                    deleteAction.filter = this.taskFilter;\n                    this.action.emit(deleteAction);\n                    return filters.length === 0;\n                }),\n                switchMap(() => this.restoreDefaultTaskFilters()),\n                takeUntil(this.onDestroy$))\n            .subscribe(() => { });\n    }\n\n    save(saveAction: TaskFilterAction): void {\n        this.updateFilter(this.changedTaskFilter)\n            .pipe(takeUntil(this.onDestroy$))\n            .subscribe(() => {\n                saveAction.filter = this.changedTaskFilter;\n                this.action.emit(saveAction);\n                this.formHasBeenChanged = this.deepCompare(this.changedTaskFilter, this.taskFilter);\n            });\n    }\n\n    saveAs(saveAsAction: TaskFilterAction): void {\n        const dialogRef = this.dialog.open(TaskFilterDialogCloudComponent, {\n            data: {\n                name: this.translateService.instant((this.taskFilter as any)?.name)\n            },\n            height: 'auto',\n            minWidth: '30%'\n        });\n        dialogRef.afterClosed().subscribe((result) => {\n            if (result && result.action === TaskFilterDialogCloudComponent.ACTION_SAVE) {\n                const filterId = Math.random().toString(36).substr(2, 9);\n                const filterKey = this.getSanitizeFilterName(result.name);\n                const newFilter = {\n                    name: result.name,\n                    icon: result.icon,\n                    id: filterId,\n                    key: 'custom-' + filterKey\n                };\n                const resultFilter: T = Object.assign({}, this.changedTaskFilter, newFilter);\n                this.addFilter(resultFilter).subscribe(() => {\n                    saveAsAction.filter = resultFilter;\n                    this.action.emit(saveAsAction);\n                });\n            }\n        });\n    }\n\n    checkMandatoryFilterProperties() {\n        if (this.filterProperties === undefined || this.filterProperties.length === 0) {\n            this.filterProperties = this.getDefaultFilterProperties();\n        }\n    }\n\n    checkMandatorySortProperties(): void {\n        if (this.sortProperties === undefined || this.sortProperties.length === 0) {\n            this.sortProperties = this.getDefaultSortProperties();\n        }\n    }\n\n    abstract getDefaultFilterProperties(): string[];\n    abstract getDefaultSortProperties(): string[];\n    abstract isDisabledForDefaultFilters(action: TaskFilterAction): boolean;\n    abstract createTaskFilterProperties(): TaskFilterProperties[];\n    protected abstract getTaskFilterById(appName: string, id: string);\n    abstract assignNewFilter(formValues): void;\n\n    protected abstract restoreDefaultTaskFilters(): Observable<T[]>;\n    protected abstract addFilter(filterToAdd: T): Observable<any>;\n    protected abstract deleteFilter(filterToDelete: T): Observable<T[]>;\n    protected abstract updateFilter(filterToUpdate: T): Observable<any>;\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, ViewEncapsulation } from '@angular/core';\nimport { FormBuilder } from '@angular/forms';\nimport { DateAdapter } from '@angular/material/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { takeUntil } from 'rxjs/operators';\nimport { Observable } from 'rxjs';\nimport { Moment } from 'moment';\n\nimport { TaskFilterProperties, TaskFilterAction, ServiceTaskFilterCloudModel } from '../../models/filter-cloud.model';\nimport { TranslationService, UserPreferencesService } from '@alfresco/adf-core';\nimport { AppsProcessCloudService } from '../../../../app/services/apps-process-cloud.service';\nimport { TaskCloudService } from '../../../services/task-cloud.service';\nimport { ServiceTaskFilterCloudService } from '../../services/service-task-filter-cloud.service';\nimport { BaseEditTaskFilterCloudComponent, DropdownOption } from './base-edit-task-filter-cloud.component';\n\n@Component({\n    selector: 'adf-cloud-edit-service-task-filter',\n    templateUrl: './base-edit-task-filter-cloud.component.html',\n    styleUrls: ['./base-edit-task-filter-cloud.component.scss'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class EditServiceTaskFilterCloudComponent extends BaseEditTaskFilterCloudComponent<ServiceTaskFilterCloudModel> {\n    constructor(\n        formBuilder: FormBuilder,\n        dialog: MatDialog,\n        translateService: TranslationService,\n        private serviceTaskFilterCloudService: ServiceTaskFilterCloudService,\n        dateAdapter: DateAdapter<Moment>,\n        userPreferencesService: UserPreferencesService,\n        appsProcessCloudService: AppsProcessCloudService,\n        taskCloudService: TaskCloudService) {\n        super(formBuilder, dateAdapter, userPreferencesService, appsProcessCloudService, taskCloudService, dialog, translateService);\n    }\n\n    assignNewFilter(model: ServiceTaskFilterCloudModel) {\n        this.changedTaskFilter = { ...this.taskFilter, ...model };\n        this.formHasBeenChanged = !this.deepCompare(this.changedTaskFilter, this.taskFilter);\n        this.filterChange.emit(this.changedTaskFilter);\n    }\n\n    protected getTaskFilterById(appName: string, id: string) {\n        return this.serviceTaskFilterCloudService.getTaskFilterById(appName, id);\n    }\n\n    getDefaultFilterProperties(): string[] {\n        return ['appName', 'activityName', 'status', 'sort', 'order'];\n    }\n\n    getDefaultSortProperties(): string[] {\n        return ['id', 'activityName', 'startedDate', 'completedDate'];\n    }\n\n    protected updateFilter(filterToUpdate: ServiceTaskFilterCloudModel) {\n        return this.serviceTaskFilterCloudService.updateFilter(filterToUpdate);\n    }\n\n    protected deleteFilter(filterToDelete: ServiceTaskFilterCloudModel): Observable<ServiceTaskFilterCloudModel[]> {\n        return this.serviceTaskFilterCloudService.deleteFilter(filterToDelete);\n    }\n\n    protected addFilter(filterToAdd: ServiceTaskFilterCloudModel): Observable<any> {\n        return this.serviceTaskFilterCloudService\n            .addFilter(filterToAdd)\n            .pipe(takeUntil(this.onDestroy$));\n    }\n\n    isDisabledForDefaultFilters(action: TaskFilterAction): boolean {\n        return (\n            this.serviceTaskFilterCloudService.isDefaultFilter(this.taskFilter.name) &&\n            EditServiceTaskFilterCloudComponent.ACTIONS_DISABLED_BY_DEFAULT.includes(action.actionType)\n        );\n    }\n\n    restoreDefaultTaskFilters(): Observable<ServiceTaskFilterCloudModel[]> {\n        return this.serviceTaskFilterCloudService.getTaskListFilters(this.appName);\n    }\n\n    private getStatusOptions(): DropdownOption[] {\n        return [\n            { value: '', label: 'ADF_CLOUD_SERVICE_TASK_FILTERS.STATUS.ALL' },\n            { value: 'STARTED', label: 'ADF_CLOUD_SERVICE_TASK_FILTERS.STATUS.STARTED' },\n            { value: 'COMPLETED', label: 'ADF_CLOUD_SERVICE_TASK_FILTERS.STATUS.COMPLETED' },\n            { value: 'CANCELLED', label: 'ADF_CLOUD_SERVICE_TASK_FILTERS.STATUS.CANCELLED' },\n            { value: 'ERROR', label: 'ADF_CLOUD_SERVICE_TASK_FILTERS.STATUS.ERROR' }\n        ];\n    }\n\n    createTaskFilterProperties(): TaskFilterProperties[] {\n        const statusOptions = this.getStatusOptions();\n\n        return [\n            {\n                label: 'ADF_CLOUD_EDIT_SERVICE_TASK_FILTER.LABEL.APP_NAME',\n                type: 'select',\n                key: 'appName',\n                value: this.taskFilter.appName || '',\n                options: this.applicationNames\n            },\n            {\n                label: 'ADF_CLOUD_EDIT_SERVICE_TASK_FILTER.LABEL.SERVICE_TASK_ID',\n                type: 'text',\n                key: 'serviceTaskId',\n                value: this.taskFilter.serviceTaskId || ''\n            },\n            {\n                label: 'ADF_CLOUD_EDIT_SERVICE_TASK_FILTER.LABEL.ELEMENT_ID',\n                type: 'text',\n                key: 'elementId',\n                value: this.taskFilter.elementId || ''\n            },\n            {\n                label: 'ADF_CLOUD_EDIT_SERVICE_TASK_FILTER.LABEL.ACTIVITY_NAME',\n                type: 'text',\n                key: 'activityName',\n                value: this.taskFilter.activityName || ''\n            },\n            {\n                label: 'ADF_CLOUD_EDIT_SERVICE_TASK_FILTER.LABEL.ACTIVITY_TYPE',\n                type: 'text',\n                key: 'activityType',\n                value: this.taskFilter.activityType || ''\n            },\n            {\n                label: 'ADF_CLOUD_EDIT_SERVICE_TASK_FILTER.LABEL.SORT',\n                type: 'select',\n                key: 'sort',\n                value: this.taskFilter.sort || this.createSortProperties[0].value,\n                options: this.createSortProperties\n            },\n            {\n                label: 'ADF_CLOUD_EDIT_SERVICE_TASK_FILTER.LABEL.DIRECTION',\n                type: 'select',\n                key: 'order',\n                value: this.taskFilter.order || this.sortDirections[0].value,\n                options: [...this.sortDirections]\n            },\n            {\n                label: 'ADF_CLOUD_EDIT_SERVICE_TASK_FILTER.LABEL.STATUS',\n                type: 'select',\n                key: 'status',\n                value: this.taskFilter.status || statusOptions[0].value,\n                options: statusOptions\n            },\n            {\n                label: 'ADF_CLOUD_EDIT_SERVICE_TASK_FILTER.LABEL.STARTED_DATE',\n                type: 'date',\n                key: 'startedDate',\n                value: this.taskFilter.completedDate || false\n            },\n            {\n                label: 'ADF_CLOUD_EDIT_SERVICE_TASK_FILTER.LABEL.COMPLETED_DATE',\n                type: 'date',\n                key: 'completedDate',\n                value: this.taskFilter.completedDate || false\n            },\n            {\n                label: 'ADF_CLOUD_EDIT_SERVICE_TASK_FILTER.LABEL.PROCESS_INSTANCE_ID',\n                type: 'text',\n                key: 'processInstanceId',\n                value: this.taskFilter.processInstanceId || ''\n            },\n            {\n                label: 'ADF_CLOUD_EDIT_SERVICE_TASK_FILTER.LABEL.PROCESS_DEF_ID',\n                type: 'text',\n                key: 'processDefinitionId',\n                value: this.taskFilter.processDefinitionId || ''\n            },\n            {\n                label: 'ADF_CLOUD_EDIT_SERVICE_TASK_FILTER.LABEL.SERVICE_NAME',\n                type: 'text',\n                key: 'serviceName',\n                value: this.taskFilter.serviceName || ''\n            }\n        ];\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, ViewEncapsulation } from '@angular/core';\nimport { FormBuilder } from '@angular/forms';\nimport { DateAdapter } from '@angular/material/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { takeUntil, map } from 'rxjs/operators';\nimport { Observable } from 'rxjs';\nimport moment from 'moment-es6';\nimport { Moment } from 'moment';\n\nimport { TaskFilterCloudModel, TaskFilterProperties, TaskFilterAction } from '../../models/filter-cloud.model';\nimport { TaskFilterCloudService } from '../../services/task-filter-cloud.service';\nimport { TranslationService, UserPreferencesService } from '@alfresco/adf-core';\nimport { AppsProcessCloudService } from '../../../../app/services/apps-process-cloud.service';\nimport { DateCloudFilterType } from '../../../../models/date-cloud-filter.model';\nimport { TaskCloudService } from '../../../services/task-cloud.service';\nimport { BaseEditTaskFilterCloudComponent, DropdownOption } from './base-edit-task-filter-cloud.component';\n\n@Component({\n    selector: 'adf-cloud-edit-task-filter',\n    templateUrl: './base-edit-task-filter-cloud.component.html',\n    styleUrls: ['./base-edit-task-filter-cloud.component.scss'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class EditTaskFilterCloudComponent extends BaseEditTaskFilterCloudComponent<TaskFilterCloudModel> {\n    constructor(\n        formBuilder: FormBuilder,\n        dialog: MatDialog,\n        translateService: TranslationService,\n        private taskFilterCloudService: TaskFilterCloudService,\n        dateAdapter: DateAdapter<Moment>,\n        userPreferencesService: UserPreferencesService,\n        appsProcessCloudService: AppsProcessCloudService,\n        taskCloudService: TaskCloudService) {\n        super(formBuilder, dateAdapter, userPreferencesService, appsProcessCloudService, taskCloudService, dialog, translateService);\n    }\n\n    assignNewFilter(model: TaskFilterCloudModel) {\n        this.setLastModifiedToFilter(model);\n        this.changedTaskFilter = new TaskFilterCloudModel(Object.assign({}, this.taskFilter, model));\n        this.formHasBeenChanged = !this.deepCompare(this.changedTaskFilter, this.taskFilter);\n        this.filterChange.emit(this.changedTaskFilter);\n    }\n\n    protected getTaskFilterById(appName: string, id: string) {\n        return this.taskFilterCloudService\n            .getTaskFilterById(appName, id)\n            .pipe(\n                map(response => new TaskFilterCloudModel(response))\n            );\n    }\n\n    createAndFilterProperties() {\n        const result = super.createAndFilterProperties();\n\n        if (this.hasLastModifiedProperty()) {\n            return [\n                ...result,\n                ...this.createLastModifiedProperty()\n            ];\n        }\n\n        return result;\n    }\n\n    getDefaultFilterProperties(): string[] {\n        return ['status', 'assignee', 'sort', 'order'];\n    }\n\n    getDefaultSortProperties(): string[] {\n        return ['id', 'name', 'createdDate', 'priority'];\n    }\n\n    private setLastModifiedToFilter(formValues: TaskFilterCloudModel) {\n        if (formValues.lastModifiedTo && Date.parse(formValues.lastModifiedTo.toString())) {\n            const lastModifiedToFilterValue = moment(formValues.lastModifiedTo);\n            lastModifiedToFilterValue.set({\n                hour: 23,\n                minute: 59,\n                second: 59\n            });\n            formValues.lastModifiedTo = lastModifiedToFilterValue.toISOString(true);\n        }\n    }\n\n    protected updateFilter(filterToUpdate: TaskFilterCloudModel): Observable<any> {\n        return this.taskFilterCloudService.updateFilter(filterToUpdate);\n    }\n\n    protected deleteFilter(filterToDelete: TaskFilterCloudModel): Observable<TaskFilterCloudModel[]> {\n        return this.taskFilterCloudService.deleteFilter(filterToDelete);\n    }\n\n    protected addFilter(filterToAdd: TaskFilterCloudModel): Observable<any> {\n        return this.taskFilterCloudService\n            .addFilter(filterToAdd)\n            .pipe(takeUntil(this.onDestroy$));\n    }\n\n    isDisabledForDefaultFilters(action: TaskFilterAction): boolean {\n        return (\n            this.taskFilterCloudService.isDefaultFilter(this.taskFilter.name) &&\n            EditTaskFilterCloudComponent.ACTIONS_DISABLED_BY_DEFAULT.includes(action.actionType)\n        );\n    }\n\n    restoreDefaultTaskFilters(): Observable<TaskFilterCloudModel[]> {\n        return this.taskFilterCloudService.getTaskListFilters(this.appName);\n    }\n\n    private createLastModifiedProperty(): TaskFilterProperties[] {\n        return [\n            {\n                label: 'ADF_CLOUD_EDIT_TASK_FILTER.LABEL.LAST_MODIFIED_FROM',\n                type: 'date',\n                key: 'lastModifiedFrom',\n                value: ''\n            },\n            {\n                label: 'ADF_CLOUD_EDIT_TASK_FILTER.LABEL.LAST_MODIFIED_TO',\n                type: 'date',\n                key: 'lastModifiedTo',\n                value: ''\n            }\n        ];\n    }\n\n    private getStatusOptions(): DropdownOption[] {\n        return [\n            { value: '', label: 'ADF_CLOUD_TASK_FILTERS.STATUS.ALL' },\n            { value: 'CREATED', label: 'ADF_CLOUD_TASK_FILTERS.STATUS.CREATED' },\n            { value: 'ASSIGNED', label: 'ADF_CLOUD_TASK_FILTERS.STATUS.ASSIGNED' },\n            { value: 'SUSPENDED', label: 'ADF_CLOUD_TASK_FILTERS.STATUS.SUSPENDED' },\n            { value: 'CANCELLED', label: 'ADF_CLOUD_TASK_FILTERS.STATUS.CANCELLED' },\n            { value: 'COMPLETED', label: 'ADF_CLOUD_TASK_FILTERS.STATUS.COMPLETED' }\n        ];\n    }\n\n    createTaskFilterProperties(): TaskFilterProperties[] {\n        const statusOptions = this.getStatusOptions();\n        const sortProperties = this.createSortProperties;\n\n        return [\n            {\n                label: 'ADF_CLOUD_EDIT_TASK_FILTER.LABEL.APP_NAME',\n                type: 'select',\n                key: 'appName',\n                value: this.taskFilter.appName || '',\n                options: this.applicationNames\n            },\n            {\n                label: 'ADF_CLOUD_EDIT_TASK_FILTER.LABEL.TASK_ID',\n                type: 'text',\n                key: 'taskId',\n                value: ''\n            },\n            {\n                label: 'ADF_CLOUD_EDIT_TASK_FILTER.LABEL.STATUS',\n                type: 'select',\n                key: 'status',\n                value: this.taskFilter.status || statusOptions[0].value,\n                options: statusOptions\n            },\n            {\n                label: 'ADF_CLOUD_EDIT_TASK_FILTER.LABEL.ASSIGNMENT',\n                type: 'text',\n                key: 'assignee',\n                value: this.taskFilter.assignee || ''\n            },\n            {\n                label: 'ADF_CLOUD_EDIT_TASK_FILTER.LABEL.PROCESS_DEF_NAME',\n                type: 'select',\n                key: 'processDefinitionName',\n                value: this.taskFilter.processDefinitionName || '',\n                options: this.processDefinitionNames\n            },\n            {\n                label: 'ADF_CLOUD_EDIT_TASK_FILTER.LABEL.PROCESS_INSTANCE_ID',\n                type: 'text',\n                key: 'processInstanceId',\n                value: this.taskFilter.processInstanceId || ''\n            },\n            {\n                label: 'ADF_CLOUD_EDIT_TASK_FILTER.LABEL.PROCESS_DEF_ID',\n                type: 'text',\n                key: 'processDefinitionId',\n                value: this.taskFilter.processDefinitionId || ''\n            },\n            {\n                label: 'ADF_CLOUD_EDIT_TASK_FILTER.LABEL.TASK_NAME',\n                type: 'text',\n                key: 'taskName',\n                value: this.taskFilter.taskName || ''\n            },\n            {\n                label: 'ADF_CLOUD_EDIT_TASK_FILTER.LABEL.PARENT_TASK_ID',\n                type: 'text',\n                key: 'parentTaskId',\n                value: this.taskFilter.parentTaskId || ''\n            },\n            {\n                label: 'ADF_CLOUD_EDIT_TASK_FILTER.LABEL.PRIORITY',\n                type: 'select',\n                key: 'priority',\n                value: this.taskFilter.priority || '',\n                options: this.taskCloudService.priorities\n            },\n            {\n                label: 'ADF_CLOUD_EDIT_TASK_FILTER.LABEL.OWNER',\n                type: 'text',\n                key: 'owner',\n                value: this.taskFilter.owner || ''\n            },\n            {\n                label: 'ADF_CLOUD_EDIT_TASK_FILTER.LABEL.CREATED_DATE',\n                type: 'date',\n                key: 'createdDate',\n                value: ''\n            },\n            {\n                label: 'ADF_CLOUD_EDIT_TASK_FILTER.LABEL.SORT',\n                type: 'select',\n                key: 'sort',\n                value: this.taskFilter.sort || sortProperties[0].value,\n                options: sortProperties\n            },\n            {\n                label: 'ADF_CLOUD_EDIT_TASK_FILTER.LABEL.DIRECTION',\n                type: 'select',\n                key: 'order',\n                value: this.taskFilter.order || this.sortDirections[0].value,\n                options: [...this.sortDirections]\n            },\n            {\n                label: 'ADF_CLOUD_EDIT_TASK_FILTER.LABEL.STAND_ALONE',\n                type: 'checkbox',\n                key: 'standalone',\n                value: this.taskFilter.standalone || false\n            },\n            {\n                label: 'ADF_CLOUD_EDIT_TASK_FILTER.LABEL.DUE_DATE',\n                type: 'date-range',\n                key: 'dueDateRange',\n                attributes: { dateType: 'dueDateType', from: '_dueDateFrom', to: '_dueDateTo'},\n                value: {\n                    dueDateType: this.taskFilter.dueDateType || null,\n                    _dueDateFrom: this.taskFilter.dueDateFrom || null,\n                    _dueDateTo: this.taskFilter.dueDateTo || null\n                },\n                dateFilterOptions: [\n                    DateCloudFilterType.NO_DATE,\n                    DateCloudFilterType.TODAY,\n                    DateCloudFilterType.TOMORROW,\n                    DateCloudFilterType.NEXT_7_DAYS,\n                    DateCloudFilterType.RANGE\n                ]\n            },\n            {\n                label: 'ADF_CLOUD_EDIT_TASK_FILTER.LABEL.COMPLETED_DATE',\n                type: 'date-range',\n                key: 'completedDateRange',\n                attributes: { dateType: 'completedDateType', from: '_completedFrom', to: '_completedTo'},\n                value: {\n                    completedDateType: this.taskFilter.completedDateType || null,\n                    _completedFrom: this.taskFilter.completedFrom || null,\n                    _completedTo: this.taskFilter.completedTo || null\n                }\n            },\n            {\n                label: 'ADF_CLOUD_EDIT_TASK_FILTER.LABEL.CREATED_DATE',\n                type: 'date-range',\n                key: 'createdDateRange',\n                attributes: { dateType: 'createdDateType', from: '_createdFrom', to: '_createdTo'},\n                value: {\n                    createdDateType: this.taskFilter.createdDateType || null,\n                    _createdFrom: this.taskFilter.createdFrom || null,\n                    _createdTo: this.taskFilter.createdTo || null\n                }\n            },\n            {\n                label: 'ADF_CLOUD_EDIT_TASK_FILTER.LABEL.COMPLETED_BY',\n                type: 'people',\n                key: 'completedBy',\n                value: this.taskFilter.completedBy ? [this.taskFilter.completedBy] : null,\n                selectionMode: 'single'\n            },\n            {\n                label: 'ADF_CLOUD_EDIT_TASK_FILTER.LABEL.ASSIGNMENT',\n                type: 'assignment',\n                key: 'assignment',\n                attributes: { assignee: 'assignee', candidateGroups: 'candidateGroups'},\n                value: {\n                    assignee: this.taskFilter.assignee || null,\n                    candidateGroups: this.taskFilter.candidateGroups || []\n                }\n            }\n        ];\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, EventEmitter, OnChanges, Output, SimpleChanges, OnInit, ViewEncapsulation } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { FilterParamsModel, ServiceTaskFilterCloudModel } from '../models/filter-cloud.model';\nimport { TranslationService } from '@alfresco/adf-core';\nimport { takeUntil } from 'rxjs/operators';\nimport { BaseTaskFiltersCloudComponent } from './base-task-filters-cloud.component';\nimport { ServiceTaskFilterCloudService } from '../services/service-task-filter-cloud.service';\n\n@Component({\n    selector: 'adf-cloud-service-task-filters',\n    templateUrl: './base-task-filters-cloud.component.html',\n    styleUrls: ['./base-task-filters-cloud.component.scss'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class ServiceTaskFiltersCloudComponent extends BaseTaskFiltersCloudComponent implements OnInit, OnChanges {\n\n    /** Emitted when a filter is being selected based on the filterParam input. */\n    @Output()\n    filterSelected = new EventEmitter<ServiceTaskFilterCloudModel>();\n\n    /** Emitted when a filter is being clicked from the UI. */\n    @Output()\n    filterClicked = new EventEmitter<ServiceTaskFilterCloudModel>();\n\n    filters$: Observable<ServiceTaskFilterCloudModel[]>;\n    filters: ServiceTaskFilterCloudModel[] = [];\n    currentFilter: ServiceTaskFilterCloudModel;\n\n    constructor(private serviceTaskFilterCloudService: ServiceTaskFilterCloudService,\n                private translationService: TranslationService) {\n            super();\n    }\n\n    ngOnInit() {\n        this.getFilters(this.appName);\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        const appName = changes['appName'];\n        const filter = changes['filterParam'];\n        if (appName && appName.currentValue !== appName.previousValue) {\n            this.getFilters(appName.currentValue);\n        } else if (filter && filter.currentValue !== filter.previousValue) {\n            this.selectFilterAndEmit(filter.currentValue);\n        }\n    }\n\n    /**\n     * Return the filter list filtered by appName\n     */\n    getFilters(appName: string) {\n        this.filters$ = this.serviceTaskFilterCloudService.getTaskListFilters(appName);\n\n        this.filters$.pipe(takeUntil(this.onDestroy$)).subscribe(\n            (res: ServiceTaskFilterCloudModel[]) => {\n                this.resetFilter();\n                this.filters = res || [];\n                this.selectFilterAndEmit(this.filterParam);\n                this.success.emit(res);\n            },\n            (err: any) => {\n                this.error.emit(err);\n            }\n        );\n    }\n\n    public selectFilter(paramFilter: FilterParamsModel) {\n        if (paramFilter) {\n            this.currentFilter = this.filters.find((filter, index) =>\n                paramFilter.index === index ||\n                paramFilter.key === filter.key ||\n                paramFilter.id === filter.id ||\n                (paramFilter.name &&\n                    (paramFilter.name.toLocaleLowerCase() === this.translationService.instant(filter.name).toLocaleLowerCase())\n                ));\n        }\n    }\n\n    public selectFilterAndEmit(newParamFilter: FilterParamsModel) {\n        if (newParamFilter) {\n            this.selectFilter(newParamFilter);\n\n            if (this.currentFilter) {\n                this.filterSelected.emit(this.currentFilter);\n            }\n        } else {\n            this.currentFilter = undefined;\n        }\n    }\n\n    /**\n     * Selects and emits the clicked filter.\n     */\n    public onFilterClick(filter: FilterParamsModel) {\n        if (filter) {\n            this.selectFilter(filter);\n            this.filterClicked.emit(this.currentFilter);\n        } else {\n            this.currentFilter = undefined;\n        }\n    }\n\n    /**\n     * Select as default task filter the first in the list\n     */\n    public selectDefaultTaskFilter() {\n        if (!this.isFilterListEmpty()) {\n            this.currentFilter = this.filters[0];\n        }\n    }\n\n    /**\n     * Check if the filter list is empty\n     */\n    isFilterListEmpty(): boolean {\n        return this.filters === undefined || (this.filters && this.filters.length === 0);\n    }\n\n    /**\n     * Reset the filters properties\n     */\n    private resetFilter() {\n        this.filters = [];\n        this.currentFilter = undefined;\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, Input, Output, EventEmitter, OnInit } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { IdentityGroupModel, IdentityUserModel, IdentityUserService } from '@alfresco/adf-core';\nimport { AssignmentType, TaskFilterProperties } from '../../models/filter-cloud.model';\n\n@Component({\n    selector: 'adf-cloud-task-assignment-filter',\n    templateUrl: './task-assignment-filter.component.html',\n    styleUrls: ['./task-assignment-filter.component.scss']\n})\nexport class TaskAssignmentFilterCloudComponent implements OnInit {\n\n    @Input() appName: string;\n\n    @Input() taskFilterProperty: TaskFilterProperties;\n\n    @Output() assignedChange = new EventEmitter<IdentityUserModel>();\n\n    @Output() assignedGroupChange = new EventEmitter<IdentityGroupModel[]>();\n\n    assignmentType: AssignmentType;\n    candidateGroups: IdentityGroupModel[] = [];\n    groupForm = new FormControl('');\n    assignmentTypeList = {\n        unassigned: AssignmentType.UNASSIGNED,\n        currentUser: AssignmentType.CURRENT_USER,\n        candidateGroups: AssignmentType.CANDIDATE_GROUPS\n    };\n\n    constructor(private identityUserService: IdentityUserService) {}\n\n    ngOnInit() {\n        if (this.isFilterPropertyDefined()) {\n            this.setDefaultAssignedGroups();\n            this.setDefaultAssignmentType();\n        }\n    }\n\n    isCandidateGroupsType(): boolean {\n        return this.assignmentType === AssignmentType.CANDIDATE_GROUPS;\n    }\n\n    onAssignmentTypeChange(type: any) {\n        this.candidateGroups = [];\n        if (type === AssignmentType.CURRENT_USER) {\n            this.assignedChange.emit(this.identityUserService.getCurrentUserInfo());\n        } else if (type === AssignmentType.UNASSIGNED) {\n            this.assignedChange.emit(null);\n        }\n    }\n\n    onChangedGroups(groups: IdentityGroupModel[]) {\n        this.assignedGroupChange.emit(groups);\n    }\n\n    private setDefaultAssignmentType() {\n        const assignmentAttr = this.taskFilterProperty.attributes['assignee'];\n        const assignee = this.taskFilterProperty.value[assignmentAttr];\n\n        if (this.candidateGroups.length > 0) {\n            this.assignmentType = AssignmentType.CANDIDATE_GROUPS;\n        } else if (assignee) {\n            this.assignmentType = AssignmentType.CURRENT_USER;\n        } else {\n            this.assignmentType = AssignmentType.UNASSIGNED;\n        }\n    }\n\n    private setDefaultAssignedGroups() {\n        const assignmentGroupsAttr = this.taskFilterProperty.attributes['candidateGroups'];\n        this.candidateGroups = this.taskFilterProperty.value[assignmentGroupsAttr];\n    }\n\n    private isFilterPropertyDefined(): boolean {\n        return !!this.taskFilterProperty.attributes && !!this.taskFilterProperty.value;\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n    Component,\n    ElementRef,\n    OnInit,\n    Output,\n    EventEmitter,\n    ViewChild,\n    ViewEncapsulation,\n    Input,\n    SimpleChanges,\n    OnChanges,\n    OnDestroy,\n    ChangeDetectionStrategy,\n    SimpleChange\n} from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport { Observable, of, BehaviorSubject, Subject } from 'rxjs';\nimport { distinctUntilChanged, switchMap, mergeMap, filter, tap, map, takeUntil, debounceTime } from 'rxjs/operators';\nimport { IdentityGroupModel, IdentityGroupService, LogService } from '@alfresco/adf-core';\nimport { ComponentSelectionMode } from '../../types';\n\n@Component({\n    selector: 'adf-cloud-group',\n    templateUrl: './group-cloud.component.html',\n    styleUrls: ['./group-cloud.component.scss'],\n    animations: [\n        trigger('transitionMessages', [\n            state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\n            transition('void => enter', [\n                style({ opacity: 0, transform: 'translateY(-100%)' }),\n                animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n            ])\n        ])\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None\n})\nexport class GroupCloudComponent implements OnInit, OnChanges, OnDestroy {\n\n    /** Name of the application. If specified this shows the groups who have access to the app. */\n    @Input()\n    appName: string;\n\n    /** Title of the field */\n    @Input()\n    title: string;\n\n    /** Group selection mode (single/multiple). */\n    @Input()\n    mode: ComponentSelectionMode = 'single';\n\n    /** Array of groups to be pre-selected. This pre-selects all groups in multi selection mode and only the first group of the array in single selection mode. */\n    @Input()\n    preSelectGroups: IdentityGroupModel[] = [];\n\n    /** This flag enables the validation on the preSelectGroups passed as input.\n     * In case the flag is true the components call the identity service to verify the validity of the information passed as input.\n     * Otherwise, no check will be done.\n     */\n    @Input()\n    validate = false;\n\n    /** Show the info in readonly mode\n     */\n    @Input()\n    readOnly = false;\n\n    /** FormControl to list of group */\n    @Input()\n    groupChipsCtrl = new FormControl({ value: '', disabled: false });\n\n    /** FormControl to search the group */\n    @Input()\n    searchGroupsControl = new FormControl({ value: '', disabled: false });\n\n    /** Role names of the groups to be listed. */\n    @Input()\n    roles: string[] = [];\n\n    /** Emitted when a group is selected. */\n    @Output()\n    selectGroup = new EventEmitter<IdentityGroupModel>();\n\n    /** Emitted when a group is removed. */\n    @Output()\n    removeGroup = new EventEmitter<IdentityGroupModel>();\n\n    /** Emitted when a group selection change. */\n    @Output()\n    changedGroups = new EventEmitter<IdentityGroupModel[]>();\n\n    /** Emitted when an warning occurs. */\n    @Output()\n    warning = new EventEmitter<any>();\n\n    @ViewChild('groupInput')\n    private groupInput: ElementRef<HTMLInputElement>;\n\n    private searchGroups: IdentityGroupModel[] = [];\n    private onDestroy$ = new Subject<boolean>();\n\n    selectedGroups: IdentityGroupModel[] = [];\n    invalidGroups: IdentityGroupModel[] = [];\n\n    searchGroups$ = new BehaviorSubject<IdentityGroupModel[]>(this.searchGroups);\n    _subscriptAnimationState = 'enter';\n    clientId: string;\n    isFocused: boolean;\n\n    validateGroupsMessage: string;\n    searchedValue = '';\n\n    validationLoading = false;\n    searchLoading = false;\n\n    constructor(\n        private identityGroupService: IdentityGroupService,\n        private logService: LogService) {}\n\n    ngOnInit(): void {\n        this.loadClientId();\n        this.initSearch();\n    }\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if (this.hasPreselectedGroupsChanged(changes) || this.hasModeChanged(changes) || this.isValidationChanged(changes)) {\n            if (this.hasPreSelectGroups()) {\n                this.loadPreSelectGroups();\n            } else if (this.hasPreselectedGroupsCleared(changes)) {\n                this.selectedGroups = [];\n                this.invalidGroups = [];\n            }\n\n            if (!this.isValidationEnabled()) {\n                this.invalidGroups = [];\n            }\n        }\n\n        if (changes.appName && this.isAppNameChanged(changes.appName)) {\n            this.loadClientId();\n        }\n    }\n\n    private isAppNameChanged(change: SimpleChange): boolean {\n        return change\n            && change.previousValue !== change.currentValue\n            && this.appName\n            && this.appName.length > 0;\n    }\n\n    private async loadClientId(): Promise<void> {\n        this.clientId = await this.identityGroupService.getClientIdByApplicationName(this.appName).toPromise();\n\n        if (this.clientId) {\n            this.searchGroupsControl.enable();\n        }\n    }\n\n    initSearch(): void {\n        this.searchGroupsControl.valueChanges.pipe(\n            filter((value) => {\n                this.searchLoading = true;\n                return typeof value === 'string';\n            }),\n            tap((value: string) => {\n                if (value) {\n                    this.setTypingError();\n                }\n            }),\n            debounceTime(500),\n            distinctUntilChanged(),\n            tap((value) => {\n                if (value.trim()) {\n                    this.searchedValue = value;\n                } else {\n                    this.searchGroupsControl.markAsPristine();\n                    this.searchGroupsControl.markAsUntouched();\n                }\n            }),\n            tap(() => this.resetSearchGroups()),\n            switchMap((name: string) =>\n                this.identityGroupService.findGroupsByName({ name: name.trim() })\n            ),\n            mergeMap((groups) => {\n                this.resetSearchGroups();\n                this.searchLoading = false;\n                return groups;\n            }),\n            filter(group => !this.isGroupAlreadySelected(group)),\n            mergeMap(group => {\n                if (this.appName) {\n                    return this.checkGroupHasAccess(group.id).pipe(\n                        mergeMap(\n                            hasRole => hasRole ? of(group) : of()\n                        )\n                    );\n                } else if (this.hasRoles()) {\n                    return this.filterGroupsByRoles(group);\n                } else {\n                    return of(group);\n                }\n            }),\n            takeUntil(this.onDestroy$)\n        ).subscribe(searchedGroup => {\n            this.searchGroups.push(searchedGroup);\n            this.searchGroups$.next(this.searchGroups);\n        });\n    }\n\n    checkGroupHasAccess(groupId: string): Observable<boolean> {\n        if (this.hasRoles()) {\n            return this.identityGroupService.checkGroupHasAnyClientAppRole(groupId, this.clientId, this.roles);\n        } else {\n            return this.identityGroupService.checkGroupHasClientApp(groupId, this.clientId);\n        }\n    }\n\n    private isGroupAlreadySelected(group: IdentityGroupModel): boolean {\n        if (this.selectedGroups && this.selectedGroups.length > 0) {\n            const result = this.selectedGroups.find((selectedGroup: IdentityGroupModel) => {\n                return selectedGroup.name === group.name;\n            });\n\n            return !!result;\n        }\n        return false;\n    }\n\n    async searchGroup(name: string): Promise<IdentityGroupModel> {\n        return (await this.identityGroupService.findGroupsByName({ name }).toPromise())[0];\n    }\n\n    private getPreselectedGroups(): IdentityGroupModel[] {\n        if (this.isSingleMode()) {\n           return [this.preSelectGroups[0]];\n        } else {\n            return this.removeDuplicatedGroups(this.preSelectGroups);\n        }\n    }\n\n    async validatePreselectGroups(): Promise<any> {\n        this.invalidGroups = [];\n\n        for (const group of this.getPreselectedGroups()) {\n            try {\n                const validationResult = await this.searchGroup(group.name);\n                if (this.isPreselectedGroupInvalid(group, validationResult)) {\n                    this.invalidGroups.push(group);\n                }\n            } catch (error) {\n                this.invalidGroups.push(group);\n                this.logService.error(error);\n            }\n        }\n\n        this.checkPreselectValidationErrors();\n    }\n\n    checkPreselectValidationErrors(): void {\n        this.invalidGroups = this.removeDuplicatedGroups(this.invalidGroups);\n\n        if (this.invalidGroups.length > 0) {\n            this.generateInvalidGroupsMessage();\n        }\n\n        this.warning.emit({\n            message: 'INVALID_PRESELECTED_GROUPS',\n            groups: this.invalidGroups\n        });\n    }\n\n    generateInvalidGroupsMessage(): void {\n        this.validateGroupsMessage = '';\n\n        this.invalidGroups.forEach((invalidGroup: IdentityGroupModel, index) => {\n            if (index === this.invalidGroups.length - 1) {\n                this.validateGroupsMessage += `${invalidGroup.name} `;\n            } else {\n                this.validateGroupsMessage += `${invalidGroup.name}, `;\n            }\n        });\n    }\n\n    private async loadPreSelectGroups(): Promise<void> {\n        this.selectedGroups = [];\n\n        if (this.isSingleMode()) {\n            this.selectedGroups = [this.preSelectGroups[0]];\n        } else {\n            this.selectedGroups = this.removeDuplicatedGroups(this.preSelectGroups);\n        }\n        this.groupChipsCtrl.setValue(this.selectedGroups[0].name);\n        if (this.isValidationEnabled()) {\n            this.validationLoading = true;\n            await this.validatePreselectGroups();\n            this.validationLoading = false;\n        }\n    }\n\n    filterGroupsByRoles(group: IdentityGroupModel): Observable<IdentityGroupModel> {\n        return this.identityGroupService.checkGroupHasRole(group.id, this.roles).pipe(\n            map((hasRole: boolean) => ({ hasRole: hasRole, group: group })),\n            filter((filteredGroup: { hasRole: boolean, group: IdentityGroupModel }) => filteredGroup.hasRole),\n            map((filteredGroup: { hasRole: boolean, group: IdentityGroupModel }) => filteredGroup.group));\n    }\n\n    onSelect(group: IdentityGroupModel): void {\n        if (group) {\n            this.selectGroup.emit(group);\n\n            if (this.isMultipleMode()) {\n                if (!this.isGroupAlreadySelected(group)) {\n                    this.selectedGroups.push(group);\n                }\n            } else {\n                this.invalidGroups = [];\n                this.selectedGroups = [group];\n            }\n\n            this.groupInput.nativeElement.value = '';\n            this.searchGroupsControl.setValue('');\n            this.groupChipsCtrlValue(this.selectedGroups[0].name);\n\n            this.changedGroups.emit(this.selectedGroups);\n            this.resetSearchGroups();\n        }\n    }\n\n    onRemove(groupToRemove: IdentityGroupModel): void {\n        this.removeGroup.emit(groupToRemove);\n        this.removeGroupFromSelected(groupToRemove);\n        this.changedGroups.emit(this.selectedGroups);\n        if (this.selectedGroups.length === 0) {\n            this.groupChipsCtrlValue('');\n\n        } else {\n            this.groupChipsCtrlValue(this.selectedGroups[0].name);\n        }\n        this.searchGroupsControl.markAsDirty();\n        this.searchGroupsControl.markAsTouched();\n\n        if (this.isValidationEnabled()) {\n            this.removeGroupFromValidation(groupToRemove);\n            this.checkPreselectValidationErrors();\n        }\n    }\n\n    private groupChipsCtrlValue(value: string) {\n        this.groupChipsCtrl.setValue(value);\n        this.groupChipsCtrl.markAsDirty();\n        this.groupChipsCtrl.markAsTouched();\n    }\n\n    private removeGroupFromSelected({ id, name }: IdentityGroupModel): void {\n        const indexToRemove = this.selectedGroups.findIndex(group => {\n            return group.id === id && group.name === name;\n        });\n\n        if (indexToRemove !== -1) {\n            this.selectedGroups.splice(indexToRemove, 1);\n        }\n    }\n\n    private removeGroupFromValidation({ id, name }: IdentityGroupModel): void {\n        const indexToRemove = this.invalidGroups.findIndex(group => {\n            return group.id === id && group.name === name;\n        });\n\n        if (indexToRemove !== -1) {\n            this.invalidGroups.splice(indexToRemove, 1);\n        }\n    }\n\n    private resetSearchGroups(): void {\n        this.searchGroups = [];\n        this.searchGroups$.next(this.searchGroups);\n    }\n\n    isPreselectedGroupInvalid(preselectedGroup: IdentityGroupModel, validatedGroup: IdentityGroupModel): boolean {\n        if (validatedGroup && validatedGroup.name !== undefined) {\n            return preselectedGroup.name !== validatedGroup.name;\n        } else {\n            return true;\n        }\n    }\n\n    isSingleMode(): boolean {\n        return this.mode === 'single';\n    }\n\n    private isSingleSelectionReadonly(): boolean {\n        return this.isSingleMode() && this.selectedGroups.length === 1 && this.selectedGroups[0].readonly === true;\n    }\n\n    hasPreselectError(): boolean {\n        return this.invalidGroups && this.invalidGroups.length > 0;\n    }\n\n    isReadonly(): boolean {\n        return this.readOnly || this.isSingleSelectionReadonly();\n    }\n\n    isMultipleMode(): boolean {\n        return this.mode === 'multiple';\n    }\n\n    getDisplayName(group: IdentityGroupModel): string {\n        return group ? group.name : '';\n    }\n\n    removeDuplicatedGroups(groups: IdentityGroupModel[]): IdentityGroupModel[] {\n        return groups.filter((group, index, self) =>\n            index === self.findIndex((auxGroup) => {\n                return group.id === auxGroup.id && group.name === auxGroup.name;\n            }));\n    }\n\n    private hasPreSelectGroups(): boolean {\n        return this.preSelectGroups && this.preSelectGroups.length > 0;\n    }\n\n    private hasModeChanged(changes: SimpleChanges): boolean {\n        return changes\n            && changes.mode\n            && changes.mode.currentValue !== changes.mode.previousValue;\n    }\n\n    private isValidationChanged(changes: SimpleChanges): boolean {\n        return changes\n            && changes.validate\n            && changes.validate.currentValue !== changes.validate.previousValue;\n    }\n\n    private hasPreselectedGroupsChanged(changes: SimpleChanges): boolean {\n        return changes\n            && changes.preSelectGroups\n            && changes.preSelectGroups.currentValue !== changes.preSelectGroups.previousValue;\n    }\n\n    private hasPreselectedGroupsCleared(changes: SimpleChanges): boolean {\n        return changes\n            && changes.preSelectGroups\n            && changes.preSelectGroups.currentValue.length === 0;\n    }\n\n    private hasRoles(): boolean {\n        return this.roles && this.roles.length > 0;\n    }\n\n    private setTypingError(): void {\n        this.searchGroupsControl.setErrors({\n            searchTypingError: true,\n            ...this.searchGroupsControl.errors\n        });\n    }\n\n    hasError(): boolean {\n        return !!this.searchGroupsControl.errors;\n    }\n\n    isValidationLoading(): boolean {\n        return this.isValidationEnabled() && this.validationLoading;\n    }\n\n    setFocus(isFocused: boolean) {\n        this.isFocused = isFocused;\n    }\n\n    isValidationEnabled(): boolean {\n        return this.validate === true;\n    }\n\n    getValidationPattern(): string {\n        return this.searchGroupsControl.errors.pattern.requiredPattern;\n    }\n\n    getValidationMaxLength(): string {\n        return this.searchGroupsControl.errors.maxlength.requiredLength;\n    }\n\n    getValidationMinLength(): string {\n        return this.searchGroupsControl.errors.minlength.requiredLength;\n    }\n\n    ngOnDestroy(): void {\n        this.onDestroy$.next(true);\n        this.onDestroy$.complete();\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Pipe, PipeTransform } from '@angular/core';\nimport { IdentityGroupModel } from '@alfresco/adf-core';\n\n@Pipe({\n    name: 'groupNameInitial'\n})\nexport class InitialGroupNamePipe implements PipeTransform {\n\n    transform(group: IdentityGroupModel): string {\n        let result = '';\n        if (group) {\n            result = this.getInitialGroupName(group.name).toUpperCase();\n        }\n        return result;\n    }\n\n    getInitialGroupName(groupName: string) {\n        groupName = (groupName ? groupName[0] : '');\n        return groupName;\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\nimport { FlexLayoutModule } from '@angular/flex-layout';\n\nimport { CoreModule } from '@alfresco/adf-core';\nimport { MaterialModule } from '../material.module';\nimport { GroupCloudComponent } from './components/group-cloud.component';\nimport { InitialGroupNamePipe } from './pipe/group-initial.pipe';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FlexLayoutModule,\n        MaterialModule,\n        FormsModule,\n        ReactiveFormsModule,\n        CoreModule\n    ],\n    declarations: [GroupCloudComponent, InitialGroupNamePipe],\n    exports: [GroupCloudComponent, InitialGroupNamePipe]\n})\nexport class GroupCloudModule { }\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { TaskFiltersCloudComponent } from './components/task-filters-cloud.component';\nimport { MaterialModule } from '../../material.module';\nimport { CoreModule, MomentDateAdapter, MOMENT_DATE_FORMATS } from '@alfresco/adf-core';\nimport { HttpClientModule } from '@angular/common/http';\nimport { AppListCloudModule } from './../../app/app-list-cloud.module';\nimport { DateAdapter, MAT_DATE_FORMATS } from '@angular/material/core';\nimport { ProcessCommonModule } from '../../common/process-common.module';\nimport { PeopleCloudModule } from '../../people/people-cloud.module';\nimport { EditServiceTaskFilterCloudComponent } from './components/edit-task-filters/edit-service-task-filter-cloud.component';\nimport { EditTaskFilterCloudComponent } from './components/edit-task-filters/edit-task-filter-cloud.component';\nimport { TaskFilterDialogCloudComponent } from './components/task-filter-dialog/task-filter-dialog-cloud.component';\nimport { ServiceTaskFiltersCloudComponent } from './components/service-task-filters-cloud.component';\nimport { TaskAssignmentFilterCloudComponent } from './components/task-assignment-filter/task-assignment-filter.component';\nimport { GroupCloudModule } from '../../group/group-cloud.module';\n\n@NgModule({\n    imports: [\n        FormsModule,\n        ReactiveFormsModule,\n        HttpClientModule,\n        CommonModule,\n        FlexLayoutModule,\n        MaterialModule,\n        AppListCloudModule,\n        CoreModule,\n        GroupCloudModule,\n        ProcessCommonModule,\n        PeopleCloudModule\n    ],\n    declarations: [\n        TaskFiltersCloudComponent,\n        ServiceTaskFiltersCloudComponent,\n        EditTaskFilterCloudComponent,\n        EditServiceTaskFilterCloudComponent,\n        TaskFilterDialogCloudComponent,\n        TaskAssignmentFilterCloudComponent\n    ],\n    exports: [\n        TaskFiltersCloudComponent,\n        ServiceTaskFiltersCloudComponent,\n        EditTaskFilterCloudComponent,\n        EditServiceTaskFilterCloudComponent\n    ],\n    providers: [\n        { provide: DateAdapter, useClass: MomentDateAdapter },\n        { provide: MAT_DATE_FORMATS, useValue: MOMENT_DATE_FORMATS }\n    ]\n})\nexport class TaskFiltersCloudModule { }\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Component, EventEmitter, Input, OnInit, Output, ViewEncapsulation, OnDestroy, ViewChild } from '@angular/core';\nimport { DateAdapter, MAT_DATE_FORMATS } from '@angular/material/core';\nimport moment from 'moment-es6';\nimport { Moment } from 'moment';\nimport { Observable, Subject } from 'rxjs';\nimport { FormBuilder, Validators, FormGroup, FormControl } from '@angular/forms';\nimport {\n    MOMENT_DATE_FORMATS, MomentDateAdapter,\n    LogService,\n    UserPreferencesService,\n    IdentityUserService,\n    IdentityUserModel,\n    UserPreferenceValues\n} from '@alfresco/adf-core';\nimport { PeopleCloudComponent } from '../../../people/components/people-cloud.component';\nimport { GroupCloudComponent } from '../../../group/components/group-cloud.component';\nimport { TaskCloudService } from '../../services/task-cloud.service';\nimport { StartTaskCloudRequestModel } from '../models/start-task-cloud-request.model';\nimport { takeUntil } from 'rxjs/operators';\nimport { TaskPriorityOption } from '../../models/task.model';\n\n@Component({\n    selector: 'adf-cloud-start-task',\n    templateUrl: './start-task-cloud.component.html',\n    styleUrls: ['./start-task-cloud.component.scss'],\n    providers: [\n        { provide: DateAdapter, useClass: MomentDateAdapter },\n        { provide: MAT_DATE_FORMATS, useValue: MOMENT_DATE_FORMATS }],\n    encapsulation: ViewEncapsulation.None\n})\n\nexport class StartTaskCloudComponent implements OnInit, OnDestroy {\n\n    static MAX_NAME_LENGTH = 255;\n\n    public DATE_FORMAT: string = 'DD/MM/YYYY';\n\n    /** (required) Name of the app. */\n    @Input()\n    appName: string = '';\n\n    /** Maximum length of the task name. */\n    @Input()\n    maxNameLength: number = StartTaskCloudComponent.MAX_NAME_LENGTH;\n\n    /** Name of the task. */\n    @Input()\n    name: string = '';\n\n    /** Emitted when the task is successfully created. */\n    @Output()\n    success: EventEmitter<any> = new EventEmitter<any>();\n\n    /** Emitted when the cancel button is clicked by the user. */\n    @Output()\n    cancel: EventEmitter<void> = new EventEmitter<void>();\n\n    /** Emitted when an error occurs. */\n    @Output()\n    error: EventEmitter<any> = new EventEmitter<any>();\n\n    @ViewChild('peopleInput')\n    assignee: PeopleCloudComponent;\n\n    @ViewChild('groupInput')\n    candidateGroups: GroupCloudComponent;\n\n    users$: Observable<any[]>;\n\n    taskId: string;\n\n    dueDate: Date;\n\n    submitted = false;\n\n    assigneeName: string;\n\n    candidateGroupNames: string[] = [];\n\n    dateError: boolean;\n\n    taskForm: FormGroup;\n\n    currentUser: IdentityUserModel;\n\n    formKey: string;\n\n    priorities: TaskPriorityOption[];\n\n    private assigneeForm = new FormControl('');\n    private groupForm = new FormControl('');\n    private onDestroy$ = new Subject<boolean>();\n\n    constructor(private taskService: TaskCloudService,\n                private dateAdapter: DateAdapter<Moment>,\n                private userPreferencesService: UserPreferencesService,\n                private formBuilder: FormBuilder,\n                private identityUserService: IdentityUserService,\n                private logService: LogService) {\n    }\n\n    ngOnInit() {\n        this.userPreferencesService\n            .select(UserPreferenceValues.Locale)\n            .pipe(takeUntil(this.onDestroy$))\n            .subscribe(locale => this.dateAdapter.setLocale(locale));\n        this.loadCurrentUser();\n        this.buildForm();\n        this.loadDefaultPriorities();\n    }\n\n    ngOnDestroy() {\n        this.onDestroy$.next(true);\n        this.onDestroy$.complete();\n    }\n\n    buildForm() {\n        this.taskForm = this.formBuilder.group({\n            name: new FormControl(this.name, [Validators.required, Validators.maxLength(this.getMaxNameLength()), this.whitespaceValidator]),\n            priority: new FormControl(''),\n            description: new FormControl('', [this.whitespaceValidator]),\n            formKey: new FormControl()\n        });\n    }\n\n    private getMaxNameLength(): number {\n        return this.maxNameLength > StartTaskCloudComponent.MAX_NAME_LENGTH ?\n            StartTaskCloudComponent.MAX_NAME_LENGTH : this.maxNameLength;\n    }\n\n    private loadCurrentUser() {\n        this.currentUser = this.identityUserService.getCurrentUserInfo();\n        this.assigneeName = this.currentUser.username;\n    }\n\n    private loadDefaultPriorities() {\n        this.priorities = this.taskService.priorities;\n    }\n\n    public saveTask() {\n        this.submitted = true;\n        const newTask = Object.assign(this.taskForm.value);\n        newTask.dueDate = this.dueDate;\n        newTask.assignee = this.assigneeName;\n        newTask.formKey = this.formKey;\n        newTask.candidateGroups = this.candidateGroupNames;\n\n        this.createNewTask(new StartTaskCloudRequestModel(newTask));\n    }\n\n    private createNewTask(newTask: StartTaskCloudRequestModel) {\n        this.taskService.createNewTask(newTask, this.appName)\n            .subscribe(\n                (res: any) => {\n                    this.submitted = false;\n                    this.success.emit(res);\n                },\n                (err) => {\n                    this.submitted = false;\n                    this.error.emit(err);\n                    this.logService.error('An error occurred while creating new task');\n                });\n    }\n\n    public onCancel() {\n        this.cancel.emit();\n    }\n\n    onDateChanged(newDateValue) {\n        this.dateError = false;\n\n        if (newDateValue) {\n            const momentDate = moment(newDateValue, this.DATE_FORMAT, true);\n            if (!momentDate.isValid()) {\n                this.dateError = true;\n            }\n        }\n    }\n\n    onAssigneeSelect(assignee: IdentityUserModel) {\n        this.assigneeName = assignee ? assignee.username : '';\n    }\n\n    onAssigneeRemove() {\n        this.assigneeName = '';\n    }\n\n    onCandidateGroupSelect(candidateGroup: any) {\n        if (candidateGroup.name) {\n            this.candidateGroupNames.push(candidateGroup.name);\n        }\n    }\n\n    onCandidateGroupRemove(candidateGroup: any) {\n        if (candidateGroup.name) {\n            this.candidateGroupNames = this.candidateGroupNames.filter((name: string) => {\n                return name !== candidateGroup.name;\n            });\n        }\n    }\n\n    canStartTask(): boolean {\n        return !(this.dateError ||\n                !this.taskForm.valid ||\n                this.submitted ||\n                this.assignee.hasError() ||\n                this.candidateGroups.hasError());\n    }\n\n    public whitespaceValidator(control: FormControl) {\n        const isWhitespace = (control.value || '').trim().length === 0;\n        const isValid = control.value.length === 0 || !isWhitespace;\n        return isValid ? null : { 'whitespace': true };\n    }\n\n    get nameController(): FormControl {\n        return this.taskForm.get('name') as FormControl;\n    }\n\n    get priorityController(): FormControl {\n        return this.taskForm.get('priority') as FormControl;\n    }\n\n    get assigneeFormControl(): FormControl {\n        return this.assigneeForm;\n    }\n\n    get candidateUserFormControl(): FormControl {\n        return this.groupForm;\n    }\n\n    onFormSelect(formKey: string) {\n        this.formKey = formKey || '';\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport class TaskVariableCloud {\n    name: string;\n    value: any;\n    type?: string;\n    id?: string;\n    constructor(obj) {\n        this.id = obj.name || null;\n        this.name = obj.name || null;\n        this.value = this.hasValue(obj) ? obj.value : null;\n        this.type = obj.type || null;\n    }\n\n    hasValue(obj: TaskVariableCloud): boolean {\n        return typeof obj.value !== undefined && obj.value !== null;\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Injectable } from '@angular/core';\nimport {\n    AlfrescoApiService,\n    FormValues,\n    AppConfigService,\n    FormOutcomeModel,\n    FormModel,\n    FormFieldOption\n} from '@alfresco/adf-core';\nimport { Observable, from } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\nimport { TaskDetailsCloudModel } from '../../task/start-task/models/task-details-cloud.model';\nimport { CompleteFormRepresentation, UploadApi } from '@alfresco/js-api';\nimport { TaskVariableCloud } from '../models/task-variable-cloud.model';\nimport { BaseCloudService } from '../../services/base-cloud.service';\nimport { FormContent } from '../../services/form-fields.interfaces';\nimport { FormCloudServiceInterface } from './form-cloud.service.interface';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class FormCloudService extends BaseCloudService implements FormCloudServiceInterface {\n\n    private _uploadApi;\n    get uploadApi(): UploadApi {\n        this._uploadApi = this._uploadApi ?? new UploadApi(this.apiService.getInstance());\n        return this._uploadApi;\n    }\n\n    constructor(\n        apiService: AlfrescoApiService,\n        appConfigService: AppConfigService\n    ) {\n        super(apiService, appConfigService);\n    }\n\n    /**\n     * Gets the form definition of a task.\n     * @param appName Name of the app\n     * @param taskId ID of the target task\n     * @param version Version of the form\n     * @returns Form definition\n     */\n    getTaskForm(appName: string, taskId: string, version?: number): Observable<any> {\n        return this.getTask(appName, taskId).pipe(\n            switchMap(task => {\n                return this.getForm(appName, task.formKey, version).pipe(\n                    map((form: FormContent) => {\n                        const flattenForm = {\n                            ...form.formRepresentation,\n                            ...form.formRepresentation.formDefinition,\n                            taskId: task.id,\n                            taskName: task.name,\n                            processDefinitionId: task.processDefinitionId,\n                            processInstanceId: task.processInstanceId\n                        };\n                        delete flattenForm.formDefinition;\n                        return flattenForm;\n                    })\n                );\n            })\n        );\n    }\n\n    /**\n     * Saves a task form.\n     * @param appName Name of the app\n     * @param taskId ID of the target task\n     * @param processInstanceId ID of processInstance\n     * @param formId ID of the form to save\n     * @param values Form values object\n     * @returns Updated task details\n     */\n    saveTaskForm(appName: string, taskId: string, processInstanceId: string, formId: string, values: FormValues): Observable<TaskDetailsCloudModel> {\n        const apiUrl = `${this.getBasePath(appName)}/form/v1/forms/${formId}/save`;\n        const saveFormRepresentation: any = {\n            values,\n            taskId,\n            processInstanceId\n        };\n\n        return this.post(apiUrl, saveFormRepresentation).pipe(\n            map((res: any) => res.entry)\n        );\n    }\n\n    createTemporaryRawRelatedContent(file: any, nodeId: string, contentHost: string): Observable<any> {\n\n        const changedConfig = this.apiService.lastConfig;\n        changedConfig.provider = 'ALL';\n        changedConfig.hostEcm = contentHost.replace('/alfresco', '');\n        this.apiService.getInstance().setConfig(changedConfig);\n        return from(this.uploadApi.uploadFile(\n            file,\n            '',\n            nodeId,\n            '',\n            { overwrite: true }\n        )).pipe(\n            map((res: any) => res.entry)\n        );\n    }\n\n    /**\n     * Completes a task form.\n     * @param appName Name of the app\n     * @param taskId ID of the target task\n     * @param processInstanceId ID of processInstance\n     * @param formId ID of the form to complete\n     * @param formValues Form values object\n     * @param outcome Form outcome\n     * @param version of the form\n     * @returns Updated task details\n     */\n    completeTaskForm(appName: string, taskId: string, processInstanceId: string, formId: string, formValues: FormValues, outcome: string, version: number): Observable<TaskDetailsCloudModel> {\n        const apiUrl = `${this.getBasePath(appName)}/form/v1/forms/${formId}/submit/versions/${version}`;\n        const completeFormRepresentation = <CompleteFormRepresentation> {\n            values: formValues,\n            taskId: taskId,\n            processInstanceId: processInstanceId\n        };\n        if (outcome) {\n            completeFormRepresentation.outcome = outcome;\n        }\n\n        return this.post(apiUrl, completeFormRepresentation).pipe(\n            map((res: any) => res.entry)\n        );\n    }\n\n    /**\n     * Gets details of a task\n     * @param appName Name of the app\n     * @param taskId ID of the target task\n     * @returns Details of the task\n     */\n    getTask(appName: string, taskId: string): Observable<TaskDetailsCloudModel> {\n        const apiUrl = `${this.getBasePath(appName)}/query/v1/tasks/${taskId}`;\n\n        return this.get(apiUrl).pipe(\n            map((res: any) => res.entry)\n        );\n    }\n\n    /**\n     * Gets the variables of a task.\n     * @param appName Name of the app\n     * @param taskId ID of the target task\n     * @returns Task variables\n     */\n    getTaskVariables(appName: string, taskId: string): Observable<TaskVariableCloud[]> {\n        const apiUrl = `${this.getBasePath(appName)}/query/v1/tasks/${taskId}/variables`;\n\n        return this.get(apiUrl).pipe(\n            map((res: any) => {\n                return res.list.entries.map((variable) => new TaskVariableCloud(variable.entry));\n            })\n        );\n    }\n\n    /**\n     * Gets a form definition.\n     * @param appName Name of the app\n     * @param formKey key of the target task\n     * @param version Version of the form\n     * @returns Form definition\n     */\n    getForm(appName: string, formKey: string, version?: number): Observable<FormContent> {\n        let url = `${this.getBasePath(appName)}/form/v1/forms/${formKey}`;\n\n        if (version) {\n            url += `/versions/${version}`;\n        }\n\n        return this.get(url);\n    }\n\n    getRestWidgetData(formName: string, widgetId: string, body: any = {}): Observable<FormFieldOption[]> {\n        const appName = this.appConfigService.get('alfresco-deployed-apps')[0]?.name;\n        const apiUrl = `${this.getBasePath(appName)}/form/v1/forms/${formName}/values/${widgetId}`;\n        return this.post(apiUrl, body);\n    }\n\n    /**\n     * Parses JSON data to create a corresponding form.\n     * @param json JSON data to create the form\n     * @param data Values for the form's fields\n     * @param readOnly Toggles whether or not the form should be read-only\n     * @returns Form created from the JSON specification\n     */\n    parseForm(json: any, data?: TaskVariableCloud[], readOnly: boolean = false): FormModel {\n        if (json) {\n            const flattenForm = {\n                ...json.formRepresentation,\n                ...json.formRepresentation.formDefinition\n            };\n            delete flattenForm.formDefinition;\n\n            const formValues: FormValues = {};\n            (data || []).forEach(variable => {\n                formValues[variable.name] = variable.value;\n            });\n\n            const form = new FormModel(flattenForm, formValues, readOnly);\n            if (!json.fields) {\n                form.outcomes = [\n                    new FormOutcomeModel(<any> form, {\n                        id: '$save',\n                        name: FormOutcomeModel.SAVE_ACTION,\n                        isSystem: true\n                    })\n                ];\n            }\n            return form;\n        }\n        return null;\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n    Component, EventEmitter, Input, OnChanges,\n    Output, SimpleChanges, OnDestroy, HostListener\n} from '@angular/core';\nimport { Observable, of, forkJoin, Subject, Subscription } from 'rxjs';\nimport { switchMap, takeUntil, map } from 'rxjs/operators';\nimport {\n    FormBaseComponent,\n    FormFieldModel,\n    FormOutcomeEvent,\n    FormOutcomeModel,\n    WidgetVisibilityService,\n    FormService,\n    FORM_FIELD_VALIDATORS,\n    FormFieldValidator,\n    FormValues,\n    FormModel,\n    ContentLinkModel,\n    UploadWidgetContentLinkModel\n} from '@alfresco/adf-core';\nimport { FormCloudService } from '../services/form-cloud.service';\nimport { TaskVariableCloud } from '../models/task-variable-cloud.model';\nimport { TaskDetailsCloudModel } from '../../task/start-task/models/task-details-cloud.model';\n\n@Component({\n    selector: 'adf-cloud-form',\n    templateUrl: './form-cloud.component.html'\n})\nexport class FormCloudComponent extends FormBaseComponent implements OnChanges, OnDestroy {\n\n    /** App name to fetch corresponding form and values. */\n    @Input()\n    appName: string = '';\n\n    /** The application version to use when fetching data */\n    @Input()\n    appVersion?: number;\n\n    /** Task id to fetch corresponding form and values. */\n    @Input()\n    formId: string;\n\n    /** ProcessInstanceId id to fetch corresponding form and values. */\n    @Input()\n    processInstanceId: string;\n\n    /** Underlying form model instance. */\n    @Input()\n    form: FormModel;\n\n    /** Task id to fetch corresponding form and values. */\n    @Input()\n    taskId: string;\n\n    /** Custom form values map to be used with the rendered form. */\n    @Input()\n    data: TaskVariableCloud[];\n\n    /** FormFieldValidator allow to override the form field validators provided. */\n    @Input()\n    fieldValidators: FormFieldValidator[] = [...FORM_FIELD_VALIDATORS];\n\n    /** Emitted when the form is submitted with the `Save` or custom outcomes. */\n    @Output()\n    formSaved = new EventEmitter<FormModel>();\n\n    /** Emitted when the form is submitted with the `Complete` outcome. */\n    @Output()\n    formCompleted = new EventEmitter<FormModel>();\n\n    /** Emitted when the form is loaded or reloaded. */\n    @Output()\n    formLoaded = new EventEmitter<FormModel>();\n\n    /** Emitted when form values are refreshed due to a data property change. */\n    @Output()\n    formDataRefreshed = new EventEmitter<FormModel>();\n\n    /** Emitted when form content is clicked. */\n    @Output()\n    formContentClicked = new EventEmitter<ContentLinkModel>();\n\n    protected subscriptions: Subscription[] = [];\n    nodeId: string;\n    formCloudRepresentationJSON: any;\n\n    protected onDestroy$ = new Subject<boolean>();\n\n    constructor(protected formCloudService: FormCloudService,\n                protected formService: FormService,\n                protected visibilityService: WidgetVisibilityService) {\n        super();\n\n        this.formService.formContentClicked\n            .pipe(takeUntil(this.onDestroy$))\n            .subscribe((content) => {\n                if (content instanceof UploadWidgetContentLinkModel) {\n                    this.form.setNodeIdValueForViewersLinkedToUploadWidget(content);\n                    this.onFormDataRefreshed(this.form);\n                } else {\n                    this.formContentClicked.emit(content);\n                }\n            });\n\n        this.formService.updateFormValuesRequested\n            .pipe(takeUntil(this.onDestroy$))\n            .subscribe((valuesToSetIfNotPresent) => {\n                this.form.addValuesNotPresent(valuesToSetIfNotPresent);\n                this.onFormDataRefreshed(this.form);\n            });\n    }\n\n    @HostListener('keydown', ['$event'])\n    onKeyDown(event: KeyboardEvent) {\n        event.cancelBubble = true;\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        const appName = changes['appName'];\n\n        if (appName && appName.currentValue) {\n            if (this.taskId) {\n                this.getFormByTaskId(appName.currentValue, this.taskId, this.appVersion);\n            } else if (this.formId) {\n                this.getFormById(appName.currentValue, this.formId, this.appVersion);\n            }\n            return;\n        }\n\n        const formId = changes['formId'];\n        if (formId && formId.currentValue && this.appName) {\n            this.getFormById(this.appName, formId.currentValue, this.appVersion);\n            return;\n        }\n\n        const taskId = changes['taskId'];\n        if (taskId && taskId.currentValue && this.appName) {\n            this.getFormByTaskId(this.appName, taskId.currentValue, this.appVersion);\n            return;\n        }\n\n        const data = changes['data'];\n        if (data && data.currentValue) {\n            this.refreshFormData();\n            return;\n        }\n    }\n\n    /**\n     * Invoked when user clicks form refresh button.\n     */\n    onRefreshClicked() {\n        this.loadForm();\n    }\n\n    loadForm() {\n        if (this.appName && this.taskId) {\n            this.getFormByTaskId(this.appName, this.taskId, this.appVersion);\n        } else if (this.appName && this.formId) {\n            this.getFormById(this.appName, this.formId, this.appVersion);\n        }\n\n    }\n\n    findProcessVariablesByTaskId(appName: string, taskId: string): Observable<TaskVariableCloud[]> {\n        return this.formCloudService.getTask(appName, taskId).pipe(\n            switchMap(task => {\n                if (this.isAProcessTask(task)) {\n                    return this.formCloudService.getTaskVariables(appName, taskId);\n                } else {\n                    return of([]);\n                }\n            })\n        );\n    }\n\n    isAProcessTask(taskRepresentation: TaskDetailsCloudModel): boolean {\n        return taskRepresentation.processDefinitionId && taskRepresentation.processDefinitionDeploymentId !== 'null';\n    }\n\n    getFormByTaskId(appName: string, taskId: string, version?: number): Promise<FormModel> {\n        return new Promise<FormModel>(resolve => {\n            forkJoin(\n                this.formCloudService.getTaskForm(appName, taskId, version),\n                this.formCloudService.getTaskVariables(appName, taskId)\n            )\n            .pipe(takeUntil(this.onDestroy$))\n            .subscribe(\n                (data) => {\n                    this.formCloudRepresentationJSON = data[0];\n\n                    this.formCloudRepresentationJSON.processVariables = data[1];\n                    this.data = data[1];\n\n                    const parsedForm = this.parseForm(this.formCloudRepresentationJSON);\n                    this.visibilityService.refreshVisibility(<any> parsedForm, this.data);\n                    parsedForm.validateForm();\n                    this.form = parsedForm;\n                    this.form.nodeId = '-my-';\n                    this.onFormLoaded(this.form);\n                    resolve(this.form);\n                },\n                (error) => {\n                    this.handleError(error);\n                    resolve(null);\n                }\n            );\n        });\n    }\n\n    getFormById(appName: string, formId: string, appVersion?: number) {\n        this.formCloudService\n            .getForm(appName, formId, appVersion)\n            .pipe(\n                map((form: any) => {\n                    const flattenForm = { ...form.formRepresentation, ...form.formRepresentation.formDefinition };\n                    delete flattenForm.formDefinition;\n                    return flattenForm;\n                }),\n                takeUntil(this.onDestroy$))\n            .subscribe(\n                (form) => {\n                    this.formCloudRepresentationJSON = form;\n                    const parsedForm = this.parseForm(form);\n                    this.visibilityService.refreshVisibility(<any> parsedForm);\n                    parsedForm.validateForm();\n                    this.form = parsedForm;\n                    this.form.nodeId = '-my-';\n                    this.onFormLoaded(this.form);\n                },\n                (error) => {\n                    this.handleError(error);\n                }\n            );\n    }\n\n    saveTaskForm() {\n        if (this.form && this.appName && this.taskId) {\n            this.formCloudService\n                .saveTaskForm(this.appName, this.taskId, this.processInstanceId, `${this.form.id}`, this.form.values)\n                .pipe(takeUntil(this.onDestroy$))\n                .subscribe(\n                    () => {\n                        this.onTaskSaved(this.form);\n                    },\n                    (error) => this.onTaskSavedError(error)\n                );\n        }\n    }\n\n    completeTaskForm(outcome?: string) {\n        if (this.form && this.appName && this.taskId) {\n            this.formCloudService\n                .completeTaskForm(this.appName, this.taskId, this.processInstanceId, `${this.form.id}`, this.form.values, outcome, this.appVersion)\n                .pipe(takeUntil(this.onDestroy$))\n                .subscribe(\n                    () => {\n                        this.onTaskCompleted(this.form);\n                    },\n                    (error) => this.onTaskCompletedError(error)\n                );\n        }\n    }\n\n    parseForm(formCloudRepresentationJSON: any): FormModel {\n        if (formCloudRepresentationJSON) {\n            const formValues: FormValues = {};\n            (this.data || []).forEach(variable => {\n                formValues[variable.name] = variable.value;\n            });\n\n            const form = new FormModel(formCloudRepresentationJSON, formValues, this.readOnly);\n            if (!form) {\n                form.outcomes = this.getFormDefinitionOutcomes(form);\n            }\n            if (this.fieldValidators && this.fieldValidators.length > 0) {\n                form.fieldValidators = this.fieldValidators;\n            }\n            return form;\n        }\n        return null;\n    }\n\n    /**\n     * Get custom set of outcomes for a Form Definition.\n     * @param form Form definition model.\n     */\n    getFormDefinitionOutcomes(form: FormModel): FormOutcomeModel[] {\n        return [\n            new FormOutcomeModel(<any> form, { id: '$save', name: FormOutcomeModel.SAVE_ACTION, isSystem: true })\n        ];\n    }\n\n    checkVisibility(field: FormFieldModel) {\n        if (field && field.form) {\n            this.visibilityService.refreshVisibility(field.form);\n        }\n    }\n\n    private refreshFormData() {\n        this.form = this.parseForm(this.formCloudRepresentationJSON);\n        this.onFormLoaded(this.form);\n        this.onFormDataRefreshed(this.form);\n    }\n\n    protected onFormLoaded(form: FormModel) {\n        this.formLoaded.emit(form);\n    }\n\n    protected onFormDataRefreshed(form: FormModel) {\n        this.formDataRefreshed.emit(form);\n    }\n\n    protected onTaskSaved(form: FormModel) {\n        this.formSaved.emit(form);\n    }\n\n    protected onTaskSavedError(error: any) {\n        this.handleError(error);\n    }\n\n    protected onTaskCompleted(form: FormModel) {\n        this.formCompleted.emit(form);\n    }\n\n    protected onTaskCompletedError(error: any) {\n        this.handleError(error);\n    }\n\n    protected onExecuteOutcome(outcome: FormOutcomeModel): boolean {\n        const args = new FormOutcomeEvent(outcome);\n\n        if (args.defaultPrevented) {\n            return false;\n        }\n\n        this.executeOutcome.emit(args);\n        return !args.defaultPrevented;\n    }\n\n    protected storeFormAsMetadata() {\n    }\n\n    ngOnDestroy() {\n        this.onDestroy$.next(true);\n        this.onDestroy$.complete();\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Injectable } from '@angular/core';\nimport { AlfrescoApiService, AppConfigService } from '@alfresco/adf-core';\nimport { map } from 'rxjs/operators';\nimport { from, Observable } from 'rxjs';\nimport { BaseCloudService } from '../../services/base-cloud.service';\nimport { FormRepresentation } from '../../services/form-fields.interfaces';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class FormDefinitionSelectorCloudService extends BaseCloudService {\n\n    constructor(apiService: AlfrescoApiService,\n                appConfigService: AppConfigService) {\n        super(apiService, appConfigService);\n    }\n\n    /**\n     * Get all forms of an app.\n     * @param appName Name of the application\n     * @returns Details of the forms\n     */\n    getForms(appName: string): Observable<FormRepresentation[]> {\n        const url = `${this.getBasePath(appName)}/form/v1/forms`;\n\n        return this.get(url).pipe(\n            map((data: any) => {\n                return data.map((formData: any) => {\n                    return <FormRepresentation> formData.formRepresentation;\n                });\n            })\n        );\n    }\n\n    /**\n     * Get all forms of an app.\n     * @param appName Name of the application\n     * @returns Details of the forms\n     */\n    getStandAloneTaskForms(appName: string): Observable<FormRepresentation[]> {\n        return from(this.getForms(appName)).pipe(\n            map((data: any) => {\n                return data.filter((formData: any) => formData.standalone || formData.standalone === undefined);\n            })\n        );\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { FormDefinitionSelectorCloudService } from '../services/form-definition-selector-cloud.service';\nimport { MatSelectChange } from '@angular/material/select';\nimport { FormRepresentation } from '../../services/form-fields.interfaces';\n\n@Component({\n    selector: 'adf-cloud-form-definition-selector',\n    templateUrl: './form-definition-selector-cloud.component.html',\n    styleUrls: ['./form-definition-selector-cloud.component.scss']\n})\n\nexport class FormDefinitionSelectorCloudComponent implements OnInit {\n\n    /** Name of the application. If specified, this shows the users who have access to the app. */\n    @Input()\n    appName: string = '';\n\n    /** Emitted when a form is selected. */\n    @Output()\n    selectForm: EventEmitter<string> = new EventEmitter<string>();\n\n    forms$: Observable<FormRepresentation[]>;\n\n    constructor(private formDefinitionCloudService: FormDefinitionSelectorCloudService) {\n    }\n\n    ngOnInit(): void {\n        this.forms$ = this.formDefinitionCloudService.getStandAloneTaskForms(this.appName);\n    }\n\n    onSelect(event: MatSelectChange) {\n        this.selectForm.emit(event.value);\n    }\n\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component } from '@angular/core';\n\n@Component({\n    selector: 'adf-cloud-form-custom-outcomes',\n    template: '<ng-content></ng-content>'\n})\nexport class FormCustomOutcomesComponent {}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* tslint:disable:component-selector  */\n\nimport { Component, OnInit, ViewEncapsulation, OnDestroy } from '@angular/core';\nimport { DateAdapter, MAT_DATE_FORMATS } from '@angular/material/core';\nimport moment from 'moment-es6';\nimport { Moment } from 'moment';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport {\n    MOMENT_DATE_FORMATS, MomentDateAdapter, WidgetComponent,\n    UserPreferencesService, UserPreferenceValues, FormService\n} from '@alfresco/adf-core';\n\n@Component({\n    selector: 'date-widget',\n    providers: [\n        { provide: DateAdapter, useClass: MomentDateAdapter },\n        { provide: MAT_DATE_FORMATS, useValue: MOMENT_DATE_FORMATS }],\n    templateUrl: './date-cloud.widget.html',\n    styleUrls: ['./date-cloud.widget.scss'],\n    host: {\n        '(click)': 'event($event)',\n        '(blur)': 'event($event)',\n        '(change)': 'event($event)',\n        '(focus)': 'event($event)',\n        '(focusin)': 'event($event)',\n        '(focusout)': 'event($event)',\n        '(input)': 'event($event)',\n        '(invalid)': 'event($event)',\n        '(select)': 'event($event)'\n    },\n    encapsulation: ViewEncapsulation.None\n})\nexport class DateCloudWidgetComponent extends WidgetComponent implements OnInit, OnDestroy {\n\n    typeId = 'DateCloudWidgetComponent';\n    DATE_FORMAT_CLOUD = 'YYYY-MM-DD';\n\n    minDate: Moment;\n    maxDate: Moment;\n\n    private onDestroy$ = new Subject<boolean>();\n\n    constructor(public formService: FormService,\n                private dateAdapter: DateAdapter<Moment>,\n                private userPreferencesService: UserPreferencesService) {\n        super(formService);\n    }\n\n    ngOnInit() {\n        this.userPreferencesService\n            .select(UserPreferenceValues.Locale)\n            .pipe(takeUntil(this.onDestroy$))\n            .subscribe(locale => this.dateAdapter.setLocale(locale));\n\n        const momentDateAdapter = <MomentDateAdapter> this.dateAdapter;\n        momentDateAdapter.overrideDisplayFormat = this.field.dateDisplayFormat;\n\n        if (this.field) {\n            if (this.field.minValue) {\n                this.minDate = moment(this.field.minValue, this.DATE_FORMAT_CLOUD);\n            }\n\n            if (this.field.maxValue) {\n                this.maxDate = moment(this.field.maxValue, this.DATE_FORMAT_CLOUD);\n            }\n        }\n    }\n\n    ngOnDestroy() {\n        this.onDestroy$.next(true);\n        this.onDestroy$.complete();\n    }\n\n    onDateChanged(newDateValue) {\n        const date = moment(newDateValue, this.field.dateDisplayFormat, true);\n        if (date.isValid()) {\n            this.field.value = date.format(this.field.dateDisplayFormat);\n        } else {\n            this.field.value = newDateValue;\n        }\n        this.onFieldChanged(this.field);\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, OnInit, ViewEncapsulation, OnDestroy } from '@angular/core';\nimport {\n    WidgetComponent,\n    FormService,\n    LogService,\n    FormFieldOption,\n    FormFieldEvent,\n    FormFieldModel,\n    FormFieldTypes,\n    RuleEntry\n} from '@alfresco/adf-core';\nimport { FormCloudService } from '../../../services/form-cloud.service';\nimport { Subject } from 'rxjs';\nimport { filter, takeUntil } from 'rxjs/operators';\n\n/* tslint:disable:component-selector  */\n\n@Component({\n    selector: 'dropdown-cloud-widget',\n    templateUrl: './dropdown-cloud.widget.html',\n    styleUrls: ['./dropdown-cloud.widget.scss'],\n    host: {\n        '(click)': 'event($event)',\n        '(blur)': 'event($event)',\n        '(change)': 'event($event)',\n        '(focus)': 'event($event)',\n        '(focusin)': 'event($event)',\n        '(focusout)': 'event($event)',\n        '(input)': 'event($event)',\n        '(invalid)': 'event($event)',\n        '(select)': 'event($event)'\n    },\n    encapsulation: ViewEncapsulation.None\n})\nexport class DropdownCloudWidgetComponent extends WidgetComponent implements OnInit, OnDestroy {\n    static DEFAULT_OPTION = {\n        id: 'empty',\n        name: 'Choose one...'\n    };\n\n    typeId = 'DropdownCloudWidgetComponent';\n    protected onDestroy$ = new Subject<boolean>();\n\n    constructor(public formService: FormService,\n                private formCloudService: FormCloudService,\n                private logService: LogService) {\n        super(formService);\n    }\n\n    ngOnInit() {\n        if (this.hasRestUrl() && !this.isLinkedWidget()) {\n            this.persistFieldOptionsFromRestApi();\n        }\n\n        if (this.isLinkedWidget()) {\n            this.loadFieldOptionsForLinkedWidget();\n\n            this.formService.formFieldValueChanged\n                .pipe(\n                    filter((event: FormFieldEvent) => this.isFormFieldEventOfTypeDropdown(event) && this.isParentFormFieldEvent(event)),\n                    takeUntil(this.onDestroy$))\n                .subscribe((event: FormFieldEvent) => {\n                    const valueOfParentWidget = event.field.value;\n                    this.parentValueChanged(valueOfParentWidget);\n                });\n        }\n    }\n\n    private persistFieldOptionsFromRestApi() {\n        if (this.isValidRestType()) {\n            const bodyParam = this.buildBodyParam();\n            this.formCloudService.getRestWidgetData(this.field.form.id, this.field.id, bodyParam)\n                .pipe(takeUntil(this.onDestroy$))\n                .subscribe((result: FormFieldOption[]) => {\n                    this.field.options = result;\n                    this.field.updateForm();\n                }, (err) => this.handleError(err));\n        }\n    }\n\n    private buildBodyParam(): any {\n        const bodyParam = Object.assign({});\n        if (this.isLinkedWidget()) {\n            const parentWidgetValue = this.getParentWidgetValue();\n            const parentWidgetId = this.getLinkedWidgetId();\n            bodyParam[parentWidgetId] = parentWidgetValue;\n        }\n        return bodyParam;\n    }\n\n    private loadFieldOptionsForLinkedWidget() {\n        const parentWidgetValue = this.getParentWidgetValue();\n        this.parentValueChanged(parentWidgetValue);\n    }\n\n    private getParentWidgetValue(): string {\n        const parentWidgetId = this.getLinkedWidgetId();\n        const parentWidget = this.getFormFieldById(parentWidgetId);\n        return parentWidget?.value;\n    }\n\n    private parentValueChanged(value: string) {\n        if (this.isValidValue(value)) {\n            this.isValidRestType() ? this.persistFieldOptionsFromRestApi() : this.persistFieldOptionsFromManualList(value);\n        } else if (this.isDefaultValue(value)) {\n            this.addDefaultOption();\n        }\n    }\n\n    private isValidValue(value: string): boolean {\n        return !!value && value !== DropdownCloudWidgetComponent.DEFAULT_OPTION.id;\n    }\n\n    private isDefaultValue(value: string): boolean {\n        return value === DropdownCloudWidgetComponent.DEFAULT_OPTION.id;\n    }\n\n    private getFormFieldById(fieldId): FormFieldModel {\n        return this.field.form.getFormFields().filter((field: FormFieldModel) => field.id === fieldId)[0];\n    }\n\n    private persistFieldOptionsFromManualList(value: string) {\n        if (this.hasRuleEntries()) {\n            const rulesEntries = this.getRuleEntries();\n            rulesEntries.forEach((ruleEntry: RuleEntry) => {\n                if (ruleEntry.key === value) {\n                    this.field.options = ruleEntry.options;\n                    this.field.updateForm();\n                }\n            });\n        }\n    }\n\n    private getRuleEntries(): RuleEntry[] {\n        return this.field.rule.entries;\n    }\n\n    private hasRuleEntries(): boolean {\n        return !!this.getRuleEntries().length;\n    }\n\n    private addDefaultOption() {\n        this.field.options = [DropdownCloudWidgetComponent.DEFAULT_OPTION];\n    }\n\n    selectionChangedForField(field: FormFieldModel) {\n        const formFieldValueChangedEvent = new FormFieldEvent(field.form, field);\n        this.formService.formFieldValueChanged.next(formFieldValueChangedEvent);\n        this.onFieldChanged(field);\n    }\n\n    private isParentFormFieldEvent(event: FormFieldEvent): boolean {\n        return event.field.id === this.getLinkedWidgetId();\n    }\n\n    private isFormFieldEventOfTypeDropdown(event: FormFieldEvent): boolean {\n        return event.field.type === FormFieldTypes.DROPDOWN;\n    }\n\n    private hasRestUrl(): boolean {\n        return !!this.field?.restUrl;\n    }\n\n    isLinkedWidget(): boolean {\n        return !!this.getLinkedWidgetId();\n    }\n\n    getLinkedWidgetId(): string {\n        return this.field?.rule?.ruleOn;\n    }\n\n    compareDropdownValues(opt1: FormFieldOption | string, opt2: FormFieldOption | string): boolean {\n        if (!opt1 || !opt2) {\n            return false;\n        }\n\n        if (typeof opt1 === 'string' && typeof opt2 === 'object') {\n            return opt1 === opt2.id || opt1 === opt2.name;\n        }\n\n        if (typeof opt1 === 'object' && typeof opt2 === 'string') {\n            return opt1.id === opt2 || opt1.name === opt2;\n        }\n\n        if (typeof opt1 === 'object' && typeof opt2 === 'object') {\n            return  opt1.id === opt2.id || opt1.name === opt2.name;\n        }\n\n        return opt1 === opt2;\n    }\n\n    getOptionValue(option: FormFieldOption, fieldValue: string): string | FormFieldOption {\n        if (this.field.hasMultipleValues) {\n            return option;\n        }\n\n        let optionValue: string = '';\n        if (option.id === DropdownCloudWidgetComponent.DEFAULT_OPTION.id || option.name !== fieldValue) {\n            optionValue = option.id;\n        } else {\n            optionValue = option.name;\n        }\n        return optionValue;\n    }\n\n    private isValidRestType(): boolean {\n        return this.field.optionType === 'rest' && !!this.field.restUrl;\n    }\n\n    private handleError(error: any) {\n        this.logService.error(error);\n    }\n\n    isReadOnlyType(): boolean {\n        return this.field.type === 'readonly';\n    }\n\n    ngOnDestroy() {\n        this.onDestroy$.next(true);\n        this.onDestroy$.complete();\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, OnInit, ViewEncapsulation } from '@angular/core';\nimport { WidgetComponent, IdentityGroupModel, FormService } from '@alfresco/adf-core';\nimport { FormControl } from '@angular/forms';\nimport { filter, takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs';\nimport { ComponentSelectionMode } from '../../../../types';\n\n/* tslint:disable:component-selector  */\n\n@Component({\n    selector: 'group-cloud-widget',\n    templateUrl: './group-cloud.widget.html',\n    host: {\n        '(click)': 'event($event)',\n        '(blur)': 'event($event)',\n        '(change)': 'event($event)',\n        '(focus)': 'event($event)',\n        '(focusin)': 'event($event)',\n        '(focusout)': 'event($event)',\n        '(input)': 'event($event)',\n        '(invalid)': 'event($event)',\n        '(select)': 'event($event)'\n    },\n    encapsulation: ViewEncapsulation.None\n})\nexport class GroupCloudWidgetComponent extends WidgetComponent implements OnInit {\n\n    private onDestroy$ = new Subject<boolean>();\n\n    typeId = 'GroupCloudWidgetComponent';\n    roles: string[];\n    mode: ComponentSelectionMode;\n    title: string;\n    preSelectGroup: IdentityGroupModel[];\n    search: FormControl;\n\n    constructor(formService: FormService) {\n        super(formService);\n    }\n\n    ngOnInit() {\n        if (this.field) {\n            this.roles = this.field.roles;\n            this.mode = this.field.optionType as ComponentSelectionMode;\n            this.title = this.field.placeholder;\n            this.preSelectGroup = this.field.value ? this.field.value : [];\n        }\n        this.search =  new FormControl({value: '', disabled: this.field.readOnly}, []),\n\n        this.search.statusChanges\n            .pipe(\n                filter((value: string) => {\n                    return value === 'INVALID';\n                }),\n                takeUntil(this.onDestroy$)\n            )\n            .subscribe(() => {\n                this.field.markAsInvalid();\n                this.field.form.markAsInvalid();\n            });\n\n        this.search.statusChanges\n            .pipe(\n                filter((value: string) => {\n                    return value === 'VALID';\n                }),\n                takeUntil(this.onDestroy$)\n            )\n            .subscribe(() => {\n                this.field.validate();\n                this.field.form.validateForm();\n            });\n    }\n\n    ngOnDestroy() {\n        this.onDestroy$.next(true);\n        this.onDestroy$.complete();\n    }\n\n    onChangedGroup(groups) {\n        this.field.value = [...groups];\n        this.onFieldChanged(this.field);\n    }\n\n    isMultipleMode(): boolean {\n        return this.mode === 'multiple';\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, OnInit, ViewEncapsulation } from '@angular/core';\nimport { WidgetComponent, IdentityUserModel, FormService } from '@alfresco/adf-core';\nimport { FormControl } from '@angular/forms';\nimport { filter, takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs';\nimport { ComponentSelectionMode } from '../../../../types';\n\n/* tslint:disable:component-selector  */\n\n@Component({\n    selector: 'people-cloud-widget',\n    templateUrl: './people-cloud.widget.html',\n    host: {\n        '(click)': 'event($event)',\n        '(blur)': 'event($event)',\n        '(change)': 'event($event)',\n        '(focus)': 'event($event)',\n        '(focusin)': 'event($event)',\n        '(focusout)': 'event($event)',\n        '(input)': 'event($event)',\n        '(invalid)': 'event($event)',\n        '(select)': 'event($event)'\n    },\n    encapsulation: ViewEncapsulation.None\n})\nexport class PeopleCloudWidgetComponent extends WidgetComponent implements OnInit {\n\n    private onDestroy$ = new Subject<boolean>();\n\n    typeId = 'PeopleCloudWidgetComponent';\n    appName: string;\n    roles: string[];\n    mode: ComponentSelectionMode;\n    title: string;\n    preSelectUsers: IdentityUserModel[];\n    search: FormControl;\n\n    constructor(formService: FormService) {\n        super(formService);\n    }\n\n    ngOnInit() {\n        if (this.field) {\n            this.roles = this.field.roles;\n            this.mode = this.field.optionType as ComponentSelectionMode;\n            this.title = this.field.placeholder;\n            this.preSelectUsers = this.field.value ? this.field.value : [];\n        }\n        this.search =  new FormControl({value: '', disabled: this.field.readOnly}, []),\n\n        this.search.statusChanges\n            .pipe(\n                filter((value: string) => {\n                    return value === 'INVALID';\n                }),\n                takeUntil(this.onDestroy$)\n            )\n            .subscribe(() => {\n                this.field.markAsInvalid();\n                this.field.form.markAsInvalid();\n            });\n\n        this.search.statusChanges\n            .pipe(\n                filter((value: string) => {\n                    return value === 'VALID';\n                }),\n                takeUntil(this.onDestroy$)\n            )\n            .subscribe(() => {\n                this.field.validate();\n                this.field.form.validateForm();\n            });\n    }\n\n    ngOnDestroy() {\n        this.onDestroy$.next(true);\n        this.onDestroy$.complete();\n    }\n\n    onChangedUser(users) {\n        this.field.value = [...users];\n        this.onFieldChanged(this.field);\n    }\n\n    isMultipleMode(): boolean {\n        return this.mode === 'multiple';\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Injectable } from '@angular/core';\nimport { AlfrescoApiService, LogService, NotificationService } from '@alfresco/adf-core';\nimport { MatDialog } from '@angular/material/dialog';\nimport {\n    ContentNodeSelectorComponent,\n    ContentNodeSelectorComponentData,\n    NodeAction\n} from '@alfresco/adf-content-services';\nimport { Node, NodeEntry, NodesApi } from '@alfresco/js-api';\nimport { from, Observable, Subject, throwError } from 'rxjs';\nimport { catchError, map, mapTo } from 'rxjs/operators';\nimport { DestinationFolderPathModel } from '../models/form-cloud-representation.model';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class ContentCloudNodeSelectorService {\n\n    private _nodesApi: NodesApi;\n    get nodesApi(): NodesApi {\n        this._nodesApi = this._nodesApi ?? new NodesApi(this.apiService.getInstance());\n        return this._nodesApi;\n    }\n\n    sourceNodeNotFound = false;\n\n    constructor(\n        private apiService: AlfrescoApiService,\n        private notificationService: NotificationService,\n        private logService: LogService,\n        private dialog: MatDialog) {\n    }\n\n    openUploadFileDialog(currentFolderId?: string, selectionMode?: string, isAllFileSources?: boolean, restrictRootToCurrentFolderId?: boolean): Observable<Node[]> {\n        const select = new Subject<Node[]>();\n        select.subscribe({ complete: this.close.bind(this) });\n        const data = <ContentNodeSelectorComponentData> {\n            title: 'Select a file',\n            actionName: NodeAction.ATTACH,\n            currentFolderId,\n            restrictRootToCurrentFolderId,\n            select,\n            selectionMode,\n            isSelectionValid: (entry: Node) => entry.isFile,\n            showFilesInResult: true,\n            showDropdownSiteList: false,\n            showLocalUploadButton: isAllFileSources\n        };\n        this.openContentNodeDialog(data, 'adf-content-node-selector-dialog', '66%');\n        return select;\n    }\n\n    async getNodeIdFromPath(destinationFolderPath: DestinationFolderPathModel): Promise<string> {\n        if (destinationFolderPath.alias && destinationFolderPath.path) {\n            try {\n                return await this.getNodeId(destinationFolderPath.alias, destinationFolderPath.path).toPromise();\n            } catch (error) {\n                this.logService.error(error);\n            }\n        }\n\n        return this.getNodeId(destinationFolderPath.alias).toPromise();\n    }\n\n    async getNodeIdFromFolderVariableValue(variableValue: string, defaultAlias?: string): Promise<string> {\n        const isExistingNode = await this.isExistingNode(variableValue);\n        return isExistingNode ? variableValue : this.getNodeId(defaultAlias).toPromise();\n    }\n\n    async isExistingNode(nodeId: string): Promise<boolean> {\n        let isExistingNode = false;\n        if (nodeId) {\n            try {\n                isExistingNode = await this.getNodeId(nodeId).pipe(mapTo(true)).toPromise();\n            } catch (error) {\n                this.logService.error(error);\n            }\n        }\n        return isExistingNode;\n    }\n\n    private getNodeId(nodeId: string, relativePath?: string): Observable<string> {\n        let opts: any;\n        if (relativePath) {\n            opts = { relativePath };\n        }\n        return from(this.nodesApi.getNode(nodeId, opts)).pipe(\n            map((nodeEntry: NodeEntry) => nodeEntry.entry.id),\n            catchError((error) => {\n                this.sourceNodeNotFound = true;\n                return this.handleError(error);\n            })\n        );\n    }\n\n    private openContentNodeDialog(data: ContentNodeSelectorComponentData, currentPanelClass: string, chosenWidth: string) {\n        const contentNodeDialog = this.dialog.open(ContentNodeSelectorComponent, { data, panelClass: currentPanelClass, width: chosenWidth });\n        contentNodeDialog.afterOpened().subscribe(() => {\n            if (this.sourceNodeNotFound) {\n                this.notificationService.showWarning('ADF_CLOUD_TASK_FORM.ERROR.DESTINATION_FOLDER_PATH_ERROR');\n            }\n        });\n        contentNodeDialog.afterClosed().subscribe(() => {\n            this.sourceNodeNotFound = false;\n        });\n    }\n\n    close() {\n        this.dialog.closeAll();\n    }\n\n    private handleError(error: any): Observable<any> {\n        return throwError(error || 'Server error');\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Injectable } from '@angular/core';\nimport { throwError, Observable, from } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport {\n    AlfrescoApiService,\n    LogService,\n    ContentService,\n    DownloadService\n} from '@alfresco/adf-core';\nimport { AuthenticationApi, Node, UploadApi } from '@alfresco/js-api';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class ProcessCloudContentService {\n\n    private _uploadApi;\n    get uploadApi(): UploadApi {\n        this._uploadApi = this._uploadApi ?? new UploadApi(this.apiService.getInstance());\n        return this._uploadApi;\n    }\n\n    private _authenticationApi;\n    get authenticationApi(): AuthenticationApi {\n        this._authenticationApi = this._authenticationApi ?? new AuthenticationApi(this.apiService.getInstance());\n        return this._authenticationApi;\n    }\n\n    constructor(\n        private apiService: AlfrescoApiService,\n        private logService: LogService,\n        public contentService: ContentService,\n        private downloadService: DownloadService\n    ) {\n    }\n\n    createTemporaryRawRelatedContent(\n        file: File,\n        nodeId: string\n    ): Observable<Node> {\n\n        return from(\n            this.uploadApi.uploadFile(file, '', nodeId, '', { overwrite: true })\n        ).pipe(\n            map((res: any) => {\n                return {\n                    ...res.entry,\n                    nodeId: res.entry.id\n                };\n            }),\n            catchError(err => this.handleError(err))\n        );\n    }\n\n    getRawContentNode(nodeId: string): Observable<Blob> {\n        return this.contentService.getNodeContent(nodeId);\n    }\n\n    downloadNodeContent(blob: Blob, fileName: string): void {\n        this.contentService.downloadBlob(blob, fileName);\n    }\n\n    async downloadFile(nodeId: string) {\n\n        const ticket = await this.getAuthTicket();\n        const url = this.contentService.getContentUrl(nodeId, true, ticket);\n\n        this.downloadService.downloadUrl(url, nodeId);\n    }\n\n    async getAuthTicket(): Promise<string> {\n        const ticket = await this.authenticationApi.getTicket();\n\n        if (ticket && ticket.entry) {\n            return ticket.entry.id || '';\n        }\n\n        return '';\n    }\n\n    private handleError(error: any) {\n        this.logService.error(error);\n        return throwError(error || 'Server error');\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport class FormCloudRepresentation {\n\n    id?: string;\n    name?: string;\n    description?: string;\n    version?: number;\n    tabs?: any[];\n    fields?: any[];\n    outcomes?: any[];\n    metadata?: any;\n    variables?: any[];\n    taskId?: string;\n    taskName?: string;\n    processDefinitionId?: string;\n    processInstanceId?: string;\n    selectedOutcome?: string;\n\n    constructor(obj?: any) {\n        this.id = obj.id || null;\n        this.name = obj.name || null;\n        this.description = obj.description || null;\n        this.version = obj.version || null;\n        this.tabs = obj.tabs || null;\n        this.fields = obj.fields || null;\n        this.outcomes = obj.outcomes || null;\n        this.metadata = obj.metadata || null;\n        this.variables = obj.variables || null;\n        this.taskId = obj.taskId || null;\n        this.taskName = obj.taskName || null;\n        this.processDefinitionId = obj.processDefinitionId || null;\n        this.processInstanceId = obj.processInstanceId || null;\n        this.selectedOutcome = obj.selectedOutcome || null;\n    }\n}\n\nexport interface DestinationFolderPathModel {\n    alias: string;\n    path: string;\n}\n\nexport enum FileSourceTypes {\n    ALL_FILE_SOURCES_SERVICE_ID = 'all-file-sources',\n    ALFRESCO_CONTENT_SOURCES_SERVICE_ID = 'alfresco-content'\n}\n\nexport enum DestinationFolderPathType {\n    STATIC_TYPE = 'value',\n    STRING_TYPE = 'string',\n    FOLDER_TYPE = 'folder'\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* tslint:disable:component-selector  */\n\nimport { Component, ElementRef, OnInit, ViewChild, ViewEncapsulation } from '@angular/core';\nimport { Node } from '@alfresco/js-api';\nimport { Observable, from } from 'rxjs';\nimport { mergeMap } from 'rxjs/operators';\nimport { WidgetComponent, LogService, FormService, ThumbnailService, NotificationService } from '@alfresco/adf-core';\nimport { ProcessCloudContentService } from '../../../services/process-cloud-content.service';\nimport { FileSourceTypes, DestinationFolderPathType } from '../../../models/form-cloud-representation.model';\n\n@Component({\n    selector: 'upload-cloud-widget',\n    templateUrl: './upload-cloud.widget.html',\n    styleUrls: ['./upload-cloud.widget.scss'],\n    host: {\n        '(click)': 'event($event)',\n        '(blur)': 'event($event)',\n        '(change)': 'event($event)',\n        '(focus)': 'event($event)',\n        '(focusin)': 'event($event)',\n        '(focusout)': 'event($event)',\n        '(input)': 'event($event)',\n        '(invalid)': 'event($event)',\n        '(select)': 'event($event)'\n    },\n    encapsulation: ViewEncapsulation.None\n})\nexport class UploadCloudWidgetComponent extends WidgetComponent implements OnInit {\n\n    hasFile: boolean;\n    displayText: string;\n    multipleOption: string = '';\n    mimeTypeIcon: string;\n\n    @ViewChild('uploadFiles')\n    fileInput: ElementRef;\n\n    constructor(\n        formService: FormService,\n        private thumbnailService: ThumbnailService,\n        protected processCloudContentService: ProcessCloudContentService,\n        protected notificationService: NotificationService,\n        protected logService: LogService) {\n        super(formService);\n    }\n\n    ngOnInit() {\n        if (this.field &&\n            this.field.value &&\n            this.field.value.length > 0) {\n            this.hasFile = true;\n            this.fixIncompatibilityFromPreviousAndNewForm([]);\n        }\n        this.getMultipleFileParam();\n        this.setDestinationFolderPathFromMappedVariable();\n    }\n\n    removeFile(file: any) {\n        if (this.field) {\n            this.removeElementFromList(file);\n        }\n    }\n\n    onFileChanged(event: any) {\n        const files: File[] = [];\n        const filesSaved: Node[] = [];\n\n        for (const file of Array.from<File>(event.target.files)) {\n            if (!this.isUploaded(file)) {\n                files.push(file);\n            } else {\n                this.notificationService.showWarning('FORM.FIELD.FILE_ALREADY_UPLOADED');\n            }\n        }\n\n        if (files && files.length > 0) {\n            from(files)\n                .pipe(mergeMap((file) => this.uploadRawContent(file)))\n                .subscribe(\n                    (res) => {\n                        filesSaved.push(res);\n                    },\n                    (error) => this.logService.error(`Error uploading file. See console output for more details. ${error}`),\n                    () => {\n                        this.fixIncompatibilityFromPreviousAndNewForm(filesSaved);\n                        this.hasFile = true;\n                    }\n                );\n        }\n    }\n\n    private isUploaded(file: File): boolean {\n        const current: Node[] = this.field.value || [];\n        return current.some(entry => entry.name === file.name);\n    }\n\n    protected fixIncompatibilityFromPreviousAndNewForm(filesSaved: Node[]) {\n        const value: Node[] = [...this.field.value || []];\n        value.push(...filesSaved || []);\n\n        this.field.value = value;\n        this.field.form.values[this.field.id] = value;\n\n        this.hasFile = value.length > 0;\n    }\n\n    getIcon(mimeType: string): string {\n        return this.thumbnailService.getMimeTypeIcon(mimeType);\n    }\n\n    private uploadRawContent(file: File): Observable<Node> {\n        return this.processCloudContentService.createTemporaryRawRelatedContent(file, this.field.form.nodeId);\n    }\n\n    getMultipleFileParam() {\n        if (this.field &&\n            this.field.params &&\n            this.field.params.multiple) {\n            this.multipleOption = this.field.params.multiple ? 'multiple' : '';\n        }\n    }\n\n    get uploadedFiles(): any[] {\n        const result = this.field.value || this.field.form.values[this.field.id];\n        return result || [];\n    }\n\n    private removeElementFromList(file: any) {\n        const filteredValues = this.uploadedFiles.filter(value => value.id !== file.id);\n        this.resetFormValues(filteredValues);\n    }\n\n    private resetFormValues(values: any[]) {\n        if (values && values.length > 0) {\n            this.field.value = values;\n            this.field.form.values[this.field.id] = values;\n            this.hasFile = true;\n        } else {\n            this.field.value = [];\n            this.field.form.values[this.field.id] = [];\n            this.hasFile = false;\n        }\n    }\n\n    fileClicked(file: any): void {\n        this.formService.formContentClicked.next(file);\n    }\n\n    isAlfrescoAndLocal(): boolean {\n        return this.field?.params?.fileSource?.serviceId === FileSourceTypes.ALL_FILE_SOURCES_SERVICE_ID;\n    }\n\n    isPathVariableType(type: string): boolean {\n        return this.field?.params?.fileSource?.destinationFolderPath?.type === type;\n    }\n\n    setDestinationFolderPathFromMappedVariable() {\n        if (this.isAlfrescoAndLocal()) {\n            this.prepareUploadWidgetDestinationFolderPathFromStringVariable();\n            this.prepareUploadWidgetDestinationFolderPathFromFolderVariable();\n        }\n    }\n\n    private prepareUploadWidgetDestinationFolderPathFromStringVariable() {\n        if (this.isPathVariableType(DestinationFolderPathType.STRING_TYPE)) {\n            this.setUploadWidgetDestinationFolderPath(this.getDestinationFolderPathValue());\n        }\n    }\n\n    private prepareUploadWidgetDestinationFolderPathFromFolderVariable() {\n        if (this.isPathVariableType(DestinationFolderPathType.FOLDER_TYPE)) {\n            const folder = this.getDestinationFolderPathValue();\n            this.setUploadWidgetDestinationFolderPath(folder?.length ? folder[0].id : undefined);\n        }\n    }\n\n    private setUploadWidgetDestinationFolderPath(path: string) {\n        this.field.params.fileSource.destinationFolderPath['value'] = path ? path : undefined;\n    }\n\n    private getDestinationFolderPathValue(): any {\n        return this.field.form.getProcessVariableValue(this.field.params.fileSource?.destinationFolderPath?.name);\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* tslint:disable:component-selector */\n\nimport { Component, OnDestroy, OnInit, ViewEncapsulation } from '@angular/core';\nimport {\n    FormService,\n    LogService,\n    ThumbnailService,\n    NotificationService,\n    FormValues,\n    ContentLinkModel,\n    AppConfigService,\n    AlfrescoApiService,\n    UploadWidgetContentLinkModel,\n    DestinationFolderPath\n} from '@alfresco/adf-core';\nimport { Node, NodesApi, RelatedContentRepresentation } from '@alfresco/js-api';\nimport { ContentCloudNodeSelectorService } from '../../../services/content-cloud-node-selector.service';\nimport { ProcessCloudContentService } from '../../../services/process-cloud-content.service';\nimport { UploadCloudWidgetComponent } from './upload-cloud.widget';\nimport { DestinationFolderPathModel, DestinationFolderPathType } from '../../../models/form-cloud-representation.model';\nimport { ContentNodeSelectorPanelService } from '@alfresco/adf-content-services';\n\n@Component({\n    selector: 'adf-cloud-attach-file-cloud-widget',\n    templateUrl: './attach-file-cloud-widget.component.html',\n    styleUrls: ['./attach-file-cloud-widget.component.scss'],\n    host: {\n        '(click)': 'event($event)',\n        '(blur)': 'event($event)',\n        '(change)': 'event($event)',\n        '(focus)': 'event($event)',\n        '(focusin)': 'event($event)',\n        '(focusout)': 'event($event)',\n        '(input)': 'event($event)',\n        '(invalid)': 'event($event)',\n        '(select)': 'event($event)'\n    },\n    encapsulation: ViewEncapsulation.None\n})\nexport class AttachFileCloudWidgetComponent extends UploadCloudWidgetComponent implements OnInit, OnDestroy {\n\n    static ALIAS_ROOT_FOLDER = '-root-';\n    static ALIAS_USER_FOLDER = '-my-';\n    static APP_NAME = '-appname-';\n    static VALID_ALIAS = [\n        AttachFileCloudWidgetComponent.ALIAS_ROOT_FOLDER,\n        AttachFileCloudWidgetComponent.ALIAS_USER_FOLDER, '-shared-'\n    ];\n    static RETRIEVE_METADATA_OPTION = 'retrieveMetadata';\n\n    typeId = 'AttachFileCloudWidgetComponent';\n    rootNodeId = AttachFileCloudWidgetComponent.ALIAS_USER_FOLDER;\n    selectedNode: Node;\n\n    _nodesApi: NodesApi;\n    get nodesApi(): NodesApi {\n        this._nodesApi = this._nodesApi ?? new NodesApi(this.apiService.getInstance());\n        return this._nodesApi;\n    }\n    displayedColumns = ['icon', 'fileName', 'action'];\n\n    constructor(\n        formService: FormService,\n        logger: LogService,\n        thumbnails: ThumbnailService,\n        processCloudContentService: ProcessCloudContentService,\n        notificationService: NotificationService,\n        private contentNodeSelectorService: ContentCloudNodeSelectorService,\n        private appConfigService: AppConfigService,\n        private apiService: AlfrescoApiService,\n        private contentNodeSelectorPanelService: ContentNodeSelectorPanelService\n    ) {\n        super(formService, thumbnails, processCloudContentService, notificationService, logger);\n    }\n\n    ngOnInit() {\n        super.ngOnInit();\n        if (this.hasFile && this.field.value.length === 1) {\n            const files = this.field.value || this.field.form.values[this.field.id];\n            this.contentModelFormFileHandler(files[0]);\n        }\n        this.field.params.displayableCMProperties = this.field.params.displayableCMProperties ?? [];\n        this.displayedColumns.splice(2, 0, ...this.field.params.displayableCMProperties?.map(property => property?.name));\n    }\n\n    isPathStaticType(): boolean {\n        return this.field.params?.fileSource?.destinationFolderPath?.type === DestinationFolderPathType.STATIC_TYPE;\n    }\n\n    isUploadButtonVisible(): boolean {\n        return (!this.hasFile || this.multipleOption) && !this.field.readOnly;\n    }\n\n    onRemoveAttachFile(file: File | RelatedContentRepresentation | Node) {\n        this.removeFile(file);\n        if (file['id'] === this.selectedNode?.id) {\n            this.selectedNode = null;\n            this.contentModelFormFileHandler();\n        }\n    }\n\n    fetchAppNameFromAppConfig(): string {\n        return this.appConfigService.get('alfresco-deployed-apps')[0]?.name;\n    }\n\n    replaceAppNameAliasWithValue(path: string): string {\n        if (path?.match(AttachFileCloudWidgetComponent.APP_NAME)) {\n            const appName = this.fetchAppNameFromAppConfig();\n            return path.replace(AttachFileCloudWidgetComponent.APP_NAME, appName);\n        }\n        return path;\n    }\n\n    async openSelectDialog() {\n        const selectedMode = this.field.params.multiple ? 'multiple' : 'single';\n        const nodeId = await this.getDestinationFolderNodeId();\n        this.rootNodeId = nodeId ? nodeId : AttachFileCloudWidgetComponent.ALIAS_USER_FOLDER;\n        this.contentNodeSelectorPanelService.customModels = this.field.params.customModels;\n\n        this.contentNodeSelectorService\n            .openUploadFileDialog(this.rootNodeId, selectedMode, this.isAlfrescoAndLocal(), true)\n            .subscribe((selections: Node[]) => {\n                selections.forEach(node => (node['isExternal'] = true));\n                const selectionWithoutDuplication = this.removeExistingSelection(selections);\n                this.fixIncompatibilityFromPreviousAndNewForm(selectionWithoutDuplication);\n                if (this.field.value.length === 1) {\n                    this.contentModelFormFileHandler(selections && selections.length > 0 ? selections[0] : null);\n                }\n            });\n    }\n\n    private async getDestinationFolderNodeId(): Promise<string> {\n        let rootNodeId: string;\n\n        switch (this.field?.params?.fileSource?.destinationFolderPath?.type) {\n            case DestinationFolderPathType.STATIC_TYPE:\n                rootNodeId = await this.getNodeIdFromPath(this.field.params.fileSource.destinationFolderPath);\n                break;\n            case DestinationFolderPathType.STRING_TYPE:\n                rootNodeId = await this.getNodeIdFromPath(this.field.params.fileSource.destinationFolderPath);\n                break;\n            case DestinationFolderPathType.FOLDER_TYPE:\n                rootNodeId = await this.getNodeIdFromFolderVariableValue(this.field.params.fileSource.destinationFolderPath);\n                break;\n            default:\n                rootNodeId = await this.getNodeIdFromPath({ type: '', value: AttachFileCloudWidgetComponent.ALIAS_USER_FOLDER });\n                break;\n        }\n\n        return rootNodeId;\n    }\n\n   async getNodeIdFromPath(destinationFolderPath: DestinationFolderPath): Promise<string> {\n        let nodeId: string;\n        const destinationPath =  this.getAliasAndRelativePathFromDestinationFolderPath(destinationFolderPath.value);\n        destinationPath.path = this.replaceAppNameAliasWithValue(destinationPath.path);\n        try {\n            nodeId = await this.contentNodeSelectorService.getNodeIdFromPath(destinationPath);\n        } catch (error) {\n            this.logService.error(error);\n        }\n\n        return nodeId;\n    }\n\n    async getNodeIdFromFolderVariableValue(destinationFolderPath: DestinationFolderPath): Promise<string> {\n        let nodeId: string;\n        try {\n            nodeId = await this.contentNodeSelectorService.getNodeIdFromFolderVariableValue(destinationFolderPath.value, AttachFileCloudWidgetComponent.ALIAS_USER_FOLDER);\n        } catch (error) {\n            this.logService.error(error);\n        }\n\n        return nodeId;\n    }\n\n    getAliasAndRelativePathFromDestinationFolderPath(destinationFolderPath: string): DestinationFolderPathModel {\n        let alias: string; let path: string;\n        if (destinationFolderPath) {\n            const startOfRelativePathIndex = destinationFolderPath.indexOf('/');\n            if (startOfRelativePathIndex >= 0) {\n                alias = destinationFolderPath.substring(0, startOfRelativePathIndex);\n                path = destinationFolderPath.substring(startOfRelativePathIndex, destinationFolderPath.length);\n            } else {\n                alias = destinationFolderPath;\n            }\n        }\n\n        return this.isValidAlias(alias) ? { alias, path } : { alias: AttachFileCloudWidgetComponent.ALIAS_USER_FOLDER, path: undefined };\n    }\n\n    removeExistingSelection(selections: Node[]) {\n        const existingNode: Node[] = [...this.field.value || []];\n        return selections.filter(opt => !existingNode.some((node) => node.id === opt.id));\n    }\n\n    downloadContent(file: Node): void {\n        this.processCloudContentService.downloadFile(file.id);\n    }\n\n    onAttachFileClicked(nodeSelector: any) {\n        nodeSelector.nodeId = nodeSelector.id;\n        this.fileClicked(new ContentLinkModel(nodeSelector));\n    }\n\n    getWidgetIcon(): string {\n        return this.isAlfrescoAndLocal() ? 'file_upload' : 'attach_file';\n    }\n\n    onRowClicked(file?: Node) {\n        if (this.selectedNode?.id === file?.id) {\n            this.selectedNode = null;\n        } else {\n            this.selectedNode = file;\n        }\n        this.contentModelFormFileHandler(this.selectedNode);\n    }\n\n    contentModelFormFileHandler(file?: any) {\n        if (file?.id && this.isRetrieveMetadataOptionEnabled()) {\n            const values: FormValues = {};\n            this.nodesApi.getNode(file.id).then(acsNode => {\n                const metadata = acsNode?.entry?.properties;\n                if (metadata) {\n                    const keys = Object.keys(metadata);\n                    keys.forEach(key => {\n                        const sanitizedKey = key.replace(':', '_');\n                        values[sanitizedKey] = metadata[key];\n                    });\n                    this.formService.updateFormValuesRequested.next(values);\n                }\n            });\n        }\n        this.fileClicked(new UploadWidgetContentLinkModel(file, this.field.id));\n    }\n\n    isRetrieveMetadataOptionEnabled(): boolean {\n        return this.field?.params?.menuOptions && this.field.params.menuOptions[AttachFileCloudWidgetComponent.RETRIEVE_METADATA_OPTION];\n    }\n\n    isValidAlias(alias: string): boolean {\n        return alias && AttachFileCloudWidgetComponent.VALID_ALIAS.includes(alias);\n    }\n\n    ngOnDestroy() {\n        this.contentNodeSelectorPanelService.customModels = [];\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, EventEmitter, Output, ViewEncapsulation } from '@angular/core';\nimport { FormService, WidgetComponent } from '@alfresco/adf-core';\nimport { Node } from '@alfresco/js-api';\n\n/* tslint:disable:component-selector  */\n\n@Component({\n    selector: 'adf-properties-viewer-widget',\n    templateUrl: './properties-viewer.widget.html',\n    styleUrls: ['./properties-viewer.widget.scss'],\n    host: {\n        '(click)': 'event($event)',\n        '(blur)': 'event($event)',\n        '(change)': 'event($event)',\n        '(focus)': 'event($event)',\n        '(focusin)': 'event($event)',\n        '(focusout)': 'event($event)',\n        '(input)': 'event($event)',\n        '(invalid)': 'event($event)',\n        '(select)': 'event($event)'\n    },\n    encapsulation: ViewEncapsulation.None\n})\nexport class PropertiesViewerWidgetComponent extends WidgetComponent {\n\n    @Output()\n    nodeContentLoaded: EventEmitter<Node> = new EventEmitter();\n\n    constructor(formService: FormService) {\n        super(formService);\n    }\n\n    onNodeContentLoaded(node: Node) {\n        this.nodeContentLoaded.emit(node);\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, EventEmitter, Input, OnChanges, OnInit, Output, SimpleChanges, ViewEncapsulation } from '@angular/core';\nimport { NodesApiService } from '@alfresco/adf-core';\nimport { Node } from '@alfresco/js-api';\nimport { PresetConfig } from '@alfresco/adf-content-services';\n\n/* tslint:disable:component-selector  */\n\n@Component({\n    selector: 'adf-properties-viewer-wrapper',\n    templateUrl: './properties-viewer-wrapper.component.html',\n    encapsulation: ViewEncapsulation.None\n})\nexport class PropertiesViewerWrapperComponent implements OnInit, OnChanges {\n\n    node: Node;\n    loading = true;\n\n    @Input()\n    nodeId: string;\n\n    /** Toggles whether the edit button should be shown */\n    @Input()\n    editable;\n\n    /** Toggles whether to display empty values in the card view */\n    @Input()\n    displayEmpty;\n\n    /** Toggles between expanded (ie, full information) and collapsed\n     * (ie, reduced information) in the display\n     */\n    @Input()\n    expanded;\n\n    /** The multi parameter of the underlying material expansion panel, set to true to allow multi accordion to be expanded at the same time */\n    @Input()\n    multi;\n\n    /** Name or configuration of the metadata preset, which defines aspects and their properties */\n    @Input()\n    preset: string | PresetConfig;\n\n    /** Toggles whether the metadata properties should be shown */\n    @Input()\n    displayDefaultProperties;\n\n    /** (optional) shows the given aspect in the expanded  card */\n    @Input()\n    displayAspect: string = null;\n\n    /** Toggles whether or not to enable copy to clipboard action. */\n    @Input()\n    copyToClipboardAction;\n\n    /** Toggles whether or not to enable chips for multivalued properties. */\n    @Input()\n    useChipsForMultiValueProperty;\n\n    @Output()\n    nodeContentLoaded: EventEmitter<Node> = new EventEmitter();\n\n    constructor(private nodesApiService: NodesApiService) { }\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if (changes && changes['nodeId'] && changes['nodeId'].currentValue && !changes['nodeId'].isFirstChange()) {\n            this.getNode(changes['nodeId'].currentValue);\n        }\n    }\n\n    ngOnInit(): void {\n        if (this.nodeId) {\n            this.getNode(this.nodeId);\n        }\n    }\n\n    private getNode(nodeId: string) {\n        this.loading = true;\n        this.nodesApiService.getNode(nodeId).subscribe(retrievedNode => {\n            this.node = retrievedNode;\n            this.loading = false;\n            this.nodeContentLoaded.emit(retrievedNode);\n        });\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* tslint:disable:component-selector  */\n\nimport { Component, OnInit, ViewEncapsulation } from '@angular/core';\nimport { WidgetComponent, FormService, LogService, FormFieldOption } from '@alfresco/adf-core';\nimport { FormCloudService } from '../../../services/form-cloud.service';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\n@Component({\n    selector: 'radio-buttons-cloud-widget',\n    templateUrl: './radio-buttons-cloud.widget.html',\n    styleUrls: ['./radio-buttons-cloud.widget.scss'],\n    host: {\n        '(click)': 'event($event)',\n        '(blur)': 'event($event)',\n        '(change)': 'event($event)',\n        '(focus)': 'event($event)',\n        '(focusin)': 'event($event)',\n        '(focusout)': 'event($event)',\n        '(input)': 'event($event)',\n        '(invalid)': 'event($event)',\n        '(select)': 'event($event)'\n    },\n    encapsulation: ViewEncapsulation.None\n})\nexport class RadioButtonsCloudWidgetComponent extends WidgetComponent implements OnInit {\n\n    typeId = 'RadioButtonsCloudWidgetComponent';\n    protected onDestroy$ = new Subject<boolean>();\n\n    constructor(public formService: FormService,\n                private formCloudService: FormCloudService,\n                private logService: LogService) {\n        super(formService);\n    }\n\n    ngOnInit() {\n        if (this.field && this.field.restUrl) {\n            this.getValuesFromRestApi();\n        }\n    }\n\n    getValuesFromRestApi() {\n        this.formCloudService.getRestWidgetData(this.field.form.id, this.field.id)\n            .pipe(takeUntil(this.onDestroy$))\n            .subscribe((result: FormFieldOption[]) => {\n                this.field.options = result;\n                this.field.updateForm();\n            }, (err) => this.handleError(err));\n    }\n\n    onOptionClick(optionSelected: any) {\n        this.field.value = optionSelected;\n        this.fieldChanged.emit(this.field);\n    }\n\n    handleError(error: any) {\n        this.logService.error(error);\n    }\n\n    isChecked(option: FormFieldOption): boolean {\n        if (this.field.value && typeof this.field.value === 'object') {\n            let id = 'id';\n            let name = 'name';\n            if (this.field.restUrl) {\n                id = this.field.restIdProperty ?? 'id';\n                name = this.field.restLabelProperty ?? 'name';\n            }\n            return this.field.value[id] === option.id || this.field.value[name] === option.name;\n        }\n        return this.field.value === option.id;\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* tslint:disable:component-selector  */\n\nimport { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { LocalizedDatePipe, ThumbnailService } from '@alfresco/adf-core';\nimport { Node } from '@alfresco/js-api';\n\n@Component({\n    selector: 'adf-cloud-file-properties-table',\n    templateUrl: './file-properties-table-cloud.component.html',\n    styleUrls: ['./file-properties-table-cloud.component.scss']\n})\nexport class FilePropertiesTableCloudComponent {\n\n    static RETRIEVE_METADATA_OPTION = 'retrieveMetadata';\n\n    @Input()\n    uploadedFiles;\n\n    @Input()\n    hasFile: boolean;\n\n    @Input()\n    selectedNode: Node;\n\n    @Input()\n    field;\n\n    @Input()\n    displayedColumns;\n\n    @Input()\n    mimeTypeIcon;\n\n    @Output()\n    rowClick: EventEmitter<Node> = new EventEmitter<Node>();\n\n    @Output()\n    attachFileClick: EventEmitter<any> = new EventEmitter<any>();\n\n    @Output()\n    downloadFile: EventEmitter<Node> = new EventEmitter<Node>();\n\n    @Output()\n    contentModelFileHandler: EventEmitter<any> = new EventEmitter<Node>();\n\n    @Output()\n    removeAttachFile: EventEmitter<any> = new EventEmitter<any>();\n\n    constructor(private localizedDatePipe: LocalizedDatePipe, private thumbnailService: ThumbnailService) {}\n\n    onRowClicked(file?: Node) {\n        this.rowClick.emit(file);\n    }\n\n    onAttachFileClicked(nodeSelector: any) {\n        this.attachFileClick.emit(nodeSelector);\n    }\n\n    downloadContent(file: Node) {\n        this.downloadFile.emit(file);\n    }\n\n    contentModelFormFileHandler(file?: any) {\n        this.contentModelFileHandler.emit(file);\n    }\n\n    onRemoveAttachFile(file: any) {\n        this.removeAttachFile.emit(file);\n    }\n\n    getIcon(mimeType: string): string {\n        return this.thumbnailService.getMimeTypeIcon(mimeType);\n    }\n\n    getColumnValue(file, displayableCMProperty): string {\n        if (!file.properties[displayableCMProperty.prefixedName]) {\n            const fieldProperty = this.field.params.displayableCMProperties?.find(property => property.name === displayableCMProperty.name);\n            return fieldProperty.defaultValue ? this.checkDateTypeAndTransform(displayableCMProperty.dataType, fieldProperty.defaultValue) : '--' ;\n        }\n        return file.properties[displayableCMProperty.prefixedName] ?\n            this.checkDateTypeAndTransform(displayableCMProperty.dataType, file.properties[displayableCMProperty.prefixedName]) :\n            '--' ;\n    }\n\n    checkDateTypeAndTransform(dataType, value): string {\n        if (dataType === 'd:date') {\n            return this.localizedDatePipe.transform(value);\n        } else if (dataType === 'd:datetime') {\n            return this.localizedDatePipe.transform(value, 'medium');\n        }\n        return value;\n    }\n\n    displayMenuOption(option: string): boolean {\n        return this.field?.params?.menuOptions ? this.field.params.menuOptions[option] : option !== FilePropertiesTableCloudComponent.RETRIEVE_METADATA_OPTION;\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { CoreModule } from '@alfresco/adf-core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MaterialModule } from '../material.module';\nimport { FormCloudComponent } from './components/form-cloud.component';\nimport { FormDefinitionSelectorCloudComponent } from './components/form-definition-selector-cloud.component';\nimport { FormCustomOutcomesComponent } from './components/form-cloud-custom-outcomes.component';\nimport { ContentMetadataModule, ContentNodeSelectorModule } from '@alfresco/adf-content-services';\n\nimport { DateCloudWidgetComponent } from './components/widgets/date/date-cloud.widget';\nimport { DropdownCloudWidgetComponent } from './components/widgets/dropdown/dropdown-cloud.widget';\nimport { GroupCloudWidgetComponent } from './components/widgets/group/group-cloud.widget';\nimport { PeopleCloudWidgetComponent } from './components/widgets/people/people-cloud.widget';\nimport { AttachFileCloudWidgetComponent } from './components/widgets/attach-file/attach-file-cloud-widget.component';\n\nimport { UploadCloudWidgetComponent } from './components/widgets/attach-file/upload-cloud.widget';\nimport { PeopleCloudModule } from '../people/people-cloud.module';\nimport { GroupCloudModule } from '../group/group-cloud.module';\nimport { PropertiesViewerWidgetComponent } from './components/widgets/properties-viewer/properties-viewer.widget';\nimport { PropertiesViewerWrapperComponent } from './components/widgets/properties-viewer/properties-viewer-wrapper/properties-viewer-wrapper.component';\nimport { RadioButtonsCloudWidgetComponent } from './components/widgets/radio-buttons/radio-buttons-cloud.widget';\nimport { FilePropertiesTableCloudComponent } from './components/widgets/attach-file/file-properties-table-cloud.component';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FlexLayoutModule,\n        MaterialModule,\n        FormsModule,\n        ReactiveFormsModule,\n        CoreModule,\n        ContentNodeSelectorModule,\n        PeopleCloudModule,\n        GroupCloudModule,\n        ContentMetadataModule\n    ],\n    declarations: [\n        FormCloudComponent,\n        UploadCloudWidgetComponent,\n        FormDefinitionSelectorCloudComponent,\n        FormCustomOutcomesComponent,\n        DropdownCloudWidgetComponent,\n        RadioButtonsCloudWidgetComponent,\n        AttachFileCloudWidgetComponent,\n        DateCloudWidgetComponent,\n        PeopleCloudWidgetComponent,\n        GroupCloudWidgetComponent,\n        PropertiesViewerWrapperComponent,\n        PropertiesViewerWidgetComponent,\n        FilePropertiesTableCloudComponent\n    ],\n    exports: [\n        FormCloudComponent,\n        UploadCloudWidgetComponent,\n        FormDefinitionSelectorCloudComponent,\n        FormCustomOutcomesComponent,\n        DropdownCloudWidgetComponent,\n        RadioButtonsCloudWidgetComponent,\n        AttachFileCloudWidgetComponent,\n        DateCloudWidgetComponent,\n        PeopleCloudWidgetComponent,\n        GroupCloudWidgetComponent,\n        PropertiesViewerWidgetComponent\n    ]\n})\nexport class FormCloudModule {\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { MaterialModule } from '../../material.module';\nimport { CoreModule } from '@alfresco/adf-core';\nimport { StartTaskCloudComponent } from './components/start-task-cloud.component';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { GroupCloudModule } from '../../group/group-cloud.module';\nimport { FormCloudModule } from '../../form/form-cloud.module';\nimport { PeopleCloudModule } from '../../people/people-cloud.module';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FlexLayoutModule,\n        MaterialModule,\n        FormsModule,\n        ReactiveFormsModule,\n        GroupCloudModule,\n        CoreModule,\n        FormCloudModule,\n        PeopleCloudModule\n    ],\n    declarations: [StartTaskCloudComponent],\n    exports: [\n        StartTaskCloudComponent\n    ]\n})\nexport class StartTaskCloudModule {\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, Input, EventEmitter, Output, OnDestroy, OnChanges, OnInit, ViewEncapsulation } from '@angular/core';\nimport { takeUntil, concatMap, catchError, finalize } from 'rxjs/operators';\nimport { Subject, of, forkJoin } from 'rxjs';\nimport {\n    CardViewDateItemModel,\n    CardViewItem,\n    CardViewTextItemModel,\n    CardViewBaseItemModel,\n    CardViewArrayItemModel,\n    TranslationService,\n    AppConfigService,\n    UpdateNotification,\n    CardViewUpdateService,\n    CardViewDatetimeItemModel,\n    CardViewArrayItem,\n    CardViewSelectItemModel\n} from '@alfresco/adf-core';\nimport { TaskDetailsCloudModel } from '../../start-task/models/task-details-cloud.model';\nimport { TaskCloudService } from '../../services/task-cloud.service';\n\n@Component({\n    selector: 'adf-cloud-task-header',\n    templateUrl: './task-header-cloud.component.html',\n    styleUrls: ['./task-header-cloud.component.scss'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class TaskHeaderCloudComponent implements OnInit, OnDestroy, OnChanges {\n\n    /** (Required) The name of the application. */\n    @Input()\n    appName: string = '';\n\n    /** (Required) The id of the task. */\n    @Input()\n    taskId: string;\n\n    /** Show/Hide the task title */\n    @Input()\n    showTitle: boolean = true;\n\n    /** Emitted when the task is claimed. */\n    @Output()\n    claim: EventEmitter<any> = new EventEmitter<any>();\n\n    /** Emitted when the task is unclaimed (ie, requeued). */\n    @Output()\n    unclaim: EventEmitter<any> = new EventEmitter<any>();\n\n    /** Emitted when the given task has errors. */\n    @Output()\n    error: EventEmitter<any> = new EventEmitter<any>();\n\n    taskDetails: TaskDetailsCloudModel = {};\n    candidateUsers: CardViewArrayItem[] = [];\n    candidateGroups: CardViewArrayItem[] = [];\n    properties: CardViewItem[];\n    inEdit: boolean = false;\n    parentTaskName: string;\n    dateFormat: string;\n    dateTimeFormat: string;\n    dateLocale: string;\n    displayDateClearAction = false;\n    isLoading = true;\n\n    private onDestroy$ = new Subject<boolean>();\n\n    constructor(\n        private taskCloudService: TaskCloudService,\n        private translationService: TranslationService,\n        private appConfig: AppConfigService,\n        private cardViewUpdateService: CardViewUpdateService\n    ) {\n        this.dateFormat = this.appConfig.get('dateValues.defaultDateFormat');\n        this.dateLocale = this.appConfig.get('dateValues.defaultDateLocale');\n        this.dateTimeFormat = this.appConfig.get('dateValue.defaultDateTimeFormat');\n    }\n\n    ngOnInit() {\n        this.taskCloudService.dataChangesDetected$\n            .pipe(takeUntil(this.onDestroy$))\n            .subscribe(() => {\n            this.loadTaskDetailsById(this.appName, this.taskId);\n        });\n\n        this.cardViewUpdateService.itemUpdated$\n            .pipe(takeUntil(this.onDestroy$))\n            .subscribe(this.updateTaskDetails.bind(this)\n        );\n    }\n\n    ngOnChanges() {\n        this.taskDetails = {};\n        if ((this.appName || this.appName === '') && this.taskId) {\n            this.loadTaskDetailsById(this.appName, this.taskId);\n        } else {\n            this.error.emit('App Name and Task Id are mandatory');\n        }\n    }\n\n    loadTaskDetailsById(appName: string, taskId: string) {\n        this.isLoading = true;\n        this.taskCloudService.getTaskById(appName, taskId).pipe(\n            concatMap((task) =>\n                forkJoin(\n                    of(task),\n                    this.taskCloudService.getCandidateUsers(this.appName, this.taskId),\n                    this.taskCloudService.getCandidateGroups(this.appName, this.taskId)\n                )\n            ),\n            finalize(() => (this.isLoading = false))\n        ).subscribe(([taskDetails, candidateUsers, candidateGroups]) => {\n                this.taskDetails = taskDetails;\n                this.candidateGroups = candidateGroups.map((user) => <CardViewArrayItem> { icon: 'group', value: user });\n                this.candidateUsers = candidateUsers.map((group) => <CardViewArrayItem> { icon: 'person', value: group });\n                if (this.taskDetails.parentTaskId) {\n                    this.loadParentName(`${this.taskDetails.parentTaskId}`);\n                } else {\n                    this.refreshData();\n                }\n            },\n            (err) => {\n                this.error.emit(err);\n            });\n    }\n\n    private initDefaultProperties() {\n        return [\n            new CardViewTextItemModel(\n                {\n                    label: 'ADF_CLOUD_TASK_HEADER.PROPERTIES.ASSIGNEE',\n                    value: this.taskDetails.assignee,\n                    key: 'assignee',\n                    clickable: this.isAssigneePropertyClickable(),\n                    default: this.translationService.instant('ADF_CLOUD_TASK_HEADER.PROPERTIES.ASSIGNEE_DEFAULT'),\n                    icon: 'create'\n                }\n            ),\n            new CardViewTextItemModel(\n                {\n                    label: 'ADF_CLOUD_TASK_HEADER.PROPERTIES.STATUS',\n                    value: this.taskDetails.status,\n                    key: 'status'\n                }\n            ),\n            new CardViewSelectItemModel(\n                {\n                    label: 'ADF_CLOUD_TASK_HEADER.PROPERTIES.PRIORITY',\n                    value: this.taskDetails.priority.toString(),\n                    key: 'priority',\n                    editable: true,\n                    displayNoneOption: false,\n                    options$: of(this.taskCloudService.priorities)\n                }\n            ),\n            new CardViewDatetimeItemModel(\n                {\n                    label: 'ADF_CLOUD_TASK_HEADER.PROPERTIES.DUE_DATE',\n                    value: this.taskDetails.dueDate,\n                    key: 'dueDate',\n                    default: this.translationService.instant('ADF_CLOUD_TASK_HEADER.PROPERTIES.DUE_DATE_DEFAULT'),\n                    editable: true,\n                    format: this.dateTimeFormat,\n                    locale: this.dateLocale\n                }\n            ),\n            new CardViewTextItemModel(\n                {\n                    label: 'ADF_CLOUD_TASK_HEADER.PROPERTIES.CATEGORY',\n                    value: this.taskDetails.category,\n                    key: 'category',\n                    default: this.translationService.instant('ADF_CLOUD_TASK_HEADER.PROPERTIES.CATEGORY_DEFAULT')\n                }\n            ),\n            new CardViewDateItemModel(\n                {\n                    label: 'ADF_CLOUD_TASK_HEADER.PROPERTIES.CREATED',\n                    value: this.taskDetails.createdDate,\n                    key: 'created',\n                    format: this.dateFormat,\n                    locale: this.dateLocale\n                }\n            ),\n            new CardViewTextItemModel(\n                {\n                    label: 'ADF_CLOUD_TASK_HEADER.PROPERTIES.PARENT_NAME',\n                    value: this.parentTaskName,\n                    default: this.translationService.instant('ADF_CLOUD_TASK_HEADER.PROPERTIES.PARENT_NAME_DEFAULT'),\n                    key: 'parentName',\n                    clickable: true\n                }\n            ),\n            new CardViewTextItemModel(\n                {\n                    label: 'ADF_CLOUD_TASK_HEADER.PROPERTIES.PARENT_TASK_ID',\n                    value: this.taskDetails.parentTaskId,\n                    key: 'parentTaskId',\n                    clickable: true\n                }\n            ),\n            new CardViewDateItemModel(\n                {\n                    label: 'ADF_CLOUD_TASK_HEADER.PROPERTIES.END_DATE',\n                    value: this.taskDetails.completedDate,\n                    key: 'endDate',\n                    format: this.dateFormat,\n                    locale: this.dateLocale\n                }\n            ),\n            new CardViewTextItemModel(\n                {\n                    label: 'ADF_CLOUD_TASK_HEADER.PROPERTIES.ID',\n                    value: this.taskDetails.id,\n                    key: 'id'\n                }\n            ),\n            new CardViewTextItemModel(\n                {\n                    label: 'ADF_CLOUD_TASK_HEADER.PROPERTIES.DESCRIPTION',\n                    value: this.taskDetails.description,\n                    key: 'description',\n                    default: this.translationService.instant('ADF_CLOUD_TASK_HEADER.PROPERTIES.DESCRIPTION_DEFAULT'),\n                    multiline: true,\n                    editable: true\n                }\n            ),\n            new CardViewArrayItemModel(\n                {\n                    label: 'ADF_CLOUD_TASK_HEADER.PROPERTIES.CANDIDATE_USERS',\n                    value: of(this.candidateUsers),\n                    key: 'candidateUsers',\n                    icon: 'edit',\n                    clickable: false,\n                    default: this.translationService.instant('ADF_CLOUD_TASK_HEADER.PROPERTIES.CANDIDATE_USERS_DEFAULT'),\n                    noOfItemsToDisplay: 2\n                }\n            ),\n            new CardViewArrayItemModel(\n                {\n                    label: 'ADF_CLOUD_TASK_HEADER.PROPERTIES.CANDIDATE_GROUPS',\n                    value: of(this.candidateGroups),\n                    key: 'candidateGroups',\n                    icon: 'edit',\n                    clickable: false,\n                    default: this.translationService.instant('ADF_CLOUD_TASK_HEADER.PROPERTIES.CANDIDATE_GROUPS_DEFAULT'),\n                    noOfItemsToDisplay: 2\n                }\n            )\n        ];\n    }\n\n    /**\n     * Refresh the card data\n     */\n    refreshData() {\n        if (this.taskDetails) {\n            const defaultProperties = this.initDefaultProperties();\n            const filteredProperties: string[] = this.appConfig.get('adf-cloud-task-header.presets.properties');\n            this.properties = defaultProperties.filter((cardItem) => this.isValidSelection(filteredProperties, cardItem));\n        }\n    }\n\n    /**\n     * Save a task detail and update it after a successful response\n     *\n     * @param updateNotification\n     */\n    private updateTaskDetails(updateNotification: UpdateNotification) {\n        this.taskCloudService.updateTask(this.appName, this.taskId, updateNotification.changed)\n            .pipe(catchError(() => {\n                this.cardViewUpdateService.updateElement(updateNotification.target);\n                return of(null);\n            }))\n            .subscribe((taskDetails) => {\n                    if (taskDetails) {\n                        this.taskDetails = taskDetails;\n                    }\n                });\n    }\n\n    private loadParentName(taskId: string) {\n        this.taskCloudService.getTaskById(this.appName, taskId)\n            .subscribe(\n                (taskDetails) => {\n                    this.parentTaskName = taskDetails.name;\n                    this.refreshData();\n                }\n            );\n    }\n\n    isCompleted(): boolean {\n        return this.taskDetails && this.taskDetails.status === 'COMPLETED';\n    }\n\n    hasAssignee(): boolean {\n        return !!this.taskDetails.assignee ? true : false;\n    }\n\n    isTaskValid(): boolean {\n        return (this.appName || this.appName === '') && !!this.taskId;\n    }\n\n    isTaskAssigned(): boolean {\n        return this.taskDetails.assignee !== undefined;\n    }\n\n    isTaskEditable(): boolean {\n        return this.taskCloudService.isTaskEditable(this.taskDetails);\n    }\n\n    /**\n     * as per [ACA-3960] it required an empty array argument for now\n     * Empty array will be replaced with candidateGroups in feature\n     */\n    isAssigneePropertyClickable(): boolean {\n        return this.taskCloudService.isAssigneePropertyClickable(this.taskDetails, this.candidateUsers, []);\n    }\n\n    private isValidSelection(filteredProperties: string[], cardItem: CardViewBaseItemModel): boolean {\n        return filteredProperties ? filteredProperties.indexOf(cardItem.key) >= 0 : true;\n    }\n\n    ngOnDestroy() {\n        this.onDestroy$.next(true);\n        this.onDestroy$.complete();\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MaterialModule } from '../../material.module';\nimport { CoreModule } from '@alfresco/adf-core';\nimport { TaskHeaderCloudComponent } from './components/task-header-cloud.component';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        MaterialModule,\n        CoreModule.forChild()\n    ],\n    declarations: [\n        TaskHeaderCloudComponent\n    ],\n    exports: [\n        TaskHeaderCloudComponent\n    ]\n})\nexport class TaskHeaderCloudModule { }\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Directive, Input, HostListener, Output, EventEmitter, OnInit } from '@angular/core';\nimport { TaskCloudService } from '../services/task-cloud.service';\n\n@Directive({\n    // tslint:disable-next-line: directive-selector\n    selector: '[adf-cloud-complete-task]'\n})\nexport class CompleteTaskDirective implements OnInit {\n\n    /** (Required) The id of the task. */\n    @Input()\n    taskId: string;\n\n    /** (Required) The name of the application. */\n    @Input()\n    appName: string = '';\n\n    /** Emitted when the task is completed. */\n    @Output()\n    success: EventEmitter<any> = new EventEmitter<any>();\n\n    /** Emitted when the task cannot be completed. */\n    @Output()\n    error: EventEmitter<any> = new EventEmitter<any>();\n\n    invalidParams: string[] = [];\n\n    constructor(private taskListService: TaskCloudService) {}\n\n    ngOnInit() {\n        this.validateInputs();\n    }\n\n    validateInputs() {\n\n        if (!this.isTaskValid()) {\n            this.invalidParams.push('taskId');\n        }\n        if (!this.isAppValid()) {\n            this.invalidParams.push('appName');\n        }\n        if (this.invalidParams.length) {\n            throw new Error(`Attribute ${this.invalidParams.join(', ')} is required`);\n        }\n    }\n\n    isTaskValid(): boolean {\n        return this.taskId && this.taskId.length > 0;\n    }\n\n    isAppValid(): boolean {\n        return !!this.appName || this.appName === '';\n    }\n\n    @HostListener('click')\n    async onClick() {\n        try {\n            const result = await this.taskListService.completeTask(this.appName, this.taskId).toPromise();\n            if (result) {\n                this.success.emit(result);\n            }\n        } catch (error) {\n            this.error.emit(error);\n        }\n\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Directive, Input, HostListener, Output, EventEmitter, OnInit } from '@angular/core';\nimport { IdentityUserService } from '@alfresco/adf-core';\nimport { TaskCloudService } from '../services/task-cloud.service';\n\n@Directive({\n    // tslint:disable-next-line: directive-selector\n    selector: '[adf-cloud-claim-task]'\n})\nexport class ClaimTaskCloudDirective implements OnInit {\n\n    /** (Required) The id of the task. */\n    @Input()\n    taskId: string;\n\n    /** (Required) The name of the application. */\n    @Input()\n    appName: string = '';\n\n    /** Emitted when the task is completed. */\n    @Output()\n    success: EventEmitter<any> = new EventEmitter<any>();\n\n    /** Emitted when the task cannot be completed. */\n    @Output()\n    error: EventEmitter<any> = new EventEmitter<any>();\n\n    invalidParams: string[] = [];\n\n    constructor(\n        private taskListService: TaskCloudService,\n        private identityUserService: IdentityUserService) { }\n\n    ngOnInit() {\n        this.validateInputs();\n    }\n\n    validateInputs() {\n\n        if (!this.isTaskValid()) {\n            this.invalidParams.push('taskId');\n        }\n        if (!this.isAppValid()) {\n            this.invalidParams.push('appName');\n        }\n        if (this.invalidParams.length) {\n            throw new Error(`Attribute ${this.invalidParams.join(', ')} is required`);\n        }\n    }\n\n    isTaskValid(): boolean {\n        return this.taskId && this.taskId.length > 0;\n    }\n\n    isAppValid(): boolean {\n        return !!this.appName || this.appName === '';\n    }\n\n    @HostListener('click')\n    async onClick() {\n        try {\n            await this.claimTask();\n        } catch (error) {\n            this.error.emit(error);\n        }\n\n    }\n\n    private async claimTask() {\n        const currentUser: string = this.identityUserService.getCurrentUserInfo().username;\n        try {\n            const result = await this.taskListService.claimTask(this.appName, this.taskId, currentUser).toPromise();\n            if (result) {\n                this.success.emit(result);\n            }\n        } catch (error) {\n            this.error.emit(error);\n        }\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Directive, Input, HostListener, Output, EventEmitter, OnInit } from '@angular/core';\nimport { TaskCloudService } from '../services/task-cloud.service';\n\n@Directive({\n    // tslint:disable-next-line: directive-selector\n    selector: '[adf-cloud-unclaim-task]'\n})\nexport class UnClaimTaskCloudDirective implements OnInit {\n\n    /** (Required) The id of the task. */\n    @Input()\n    taskId: string;\n\n    /** (Required) The name of the application. */\n    @Input()\n    appName: string = '';\n\n    /** Emitted when the task is completed. */\n    @Output()\n    success: EventEmitter<any> = new EventEmitter<any>();\n\n    /** Emitted when the task cannot be completed. */\n    @Output()\n    error: EventEmitter<any> = new EventEmitter<any>();\n\n    invalidParams: string[] = [];\n\n    constructor(\n        private taskListService: TaskCloudService) { }\n\n    ngOnInit() {\n        this.validateInputs();\n    }\n\n    validateInputs() {\n\n        if (!this.isTaskValid()) {\n            this.invalidParams.push('taskId');\n        }\n        if (!this.isAppValid()) {\n            this.invalidParams.push('appName');\n        }\n        if (this.invalidParams.length) {\n            throw new Error(`Attribute ${this.invalidParams.join(', ')} is required`);\n        }\n    }\n\n    isTaskValid(): boolean {\n        return this.taskId && this.taskId.length > 0;\n    }\n\n    isAppValid(): boolean {\n        return !!this.appName || this.appName === '';\n    }\n\n    @HostListener('click')\n    async onClick() {\n        try {\n            await this.taskListService.unclaimTask(this.appName, this.taskId).toPromise();\n            this.success.emit(this.taskId);\n        } catch (error) {\n            this.error.emit(error);\n        }\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NgModule } from '@angular/core';\nimport { CompleteTaskDirective } from './complete-task.directive';\nimport { ClaimTaskCloudDirective } from './claim-task-cloud.directive';\nimport { UnClaimTaskCloudDirective } from './unclaim-task-cloud.directive';\n\n@NgModule({\n    declarations: [\n        CompleteTaskDirective,\n        ClaimTaskCloudDirective,\n        UnClaimTaskCloudDirective\n    ],\n    exports: [\n        CompleteTaskDirective,\n        ClaimTaskCloudDirective,\n        UnClaimTaskCloudDirective\n    ]\n})\nexport class TaskDirectiveModule { }\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n    Component, EventEmitter, Input, OnChanges,\n    Output, SimpleChanges, OnInit, ViewEncapsulation\n} from '@angular/core';\nimport { TaskDetailsCloudModel } from '../../start-task/models/task-details-cloud.model';\nimport { TaskCloudService } from '../../services/task-cloud.service';\nimport { FormRenderingService, FormModel, ContentLinkModel } from '@alfresco/adf-core';\nimport { AttachFileCloudWidgetComponent } from '../../../form/components/widgets/attach-file/attach-file-cloud-widget.component';\nimport { DropdownCloudWidgetComponent } from '../../../form/components/widgets/dropdown/dropdown-cloud.widget';\nimport { DateCloudWidgetComponent } from '../../../form/components/widgets/date/date-cloud.widget';\n\n@Component({\n    selector: 'adf-cloud-task-form',\n    templateUrl: './task-form-cloud.component.html',\n    styleUrls: ['./task-form-cloud.component.scss'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class TaskFormCloudComponent implements OnInit, OnChanges {\n\n    /** App id to fetch corresponding form and values. */\n    @Input()\n    appName: string = '';\n\n    /** Task id to fetch corresponding form and values. */\n    @Input()\n    taskId: string;\n\n    /** Toggle rendering of the form title. */\n    @Input()\n    showTitle: boolean = true;\n\n    /** Toggle rendering of the `Refresh` button. */\n    @Input()\n    showRefreshButton = false;\n\n    /** Toggle rendering of the `Validation` icon. */\n    @Input()\n    showValidationIcon = true;\n\n    /** Toggle rendering of the `Cancel` button. */\n    @Input()\n    showCancelButton = true;\n\n    /** Toggle rendering of the `Complete` button. */\n    @Input()\n    showCompleteButton = true;\n\n    /** Toggle readonly state of the task. */\n    @Input()\n    readOnly = false;\n\n    /** Emitted when the form is saved. */\n    @Output()\n    formSaved = new EventEmitter<FormModel>();\n\n    /** Emitted when the form is submitted with the `Complete` outcome. */\n    @Output()\n    formCompleted = new EventEmitter<FormModel>();\n\n    /** Emitted when the task is completed. */\n    @Output()\n    taskCompleted = new EventEmitter<string>();\n\n    /** Emitted when the task is claimed. */\n    @Output()\n    taskClaimed = new EventEmitter<string>();\n\n    /** Emitted when the task is unclaimed. */\n    @Output()\n    taskUnclaimed = new EventEmitter<string>();\n\n    /** Emitted when the cancel button is clicked. */\n    @Output()\n    cancelClick = new EventEmitter<string>();\n\n    /** Emitted when any error occurs. */\n    @Output()\n    error = new EventEmitter<any>();\n\n    /** Emitted when form content is clicked. */\n    @Output()\n    formContentClicked: EventEmitter<ContentLinkModel> = new EventEmitter();\n\n    taskDetails: TaskDetailsCloudModel;\n\n    candidateUsers: string[] = [];\n    candidateGroups: string[] = [];\n\n    loading: boolean = false;\n\n    constructor(\n        private taskCloudService: TaskCloudService,\n        private formRenderingService: FormRenderingService) {\n        this.formRenderingService.setComponentTypeResolver('upload', () => AttachFileCloudWidgetComponent, true);\n        this.formRenderingService.setComponentTypeResolver('dropdown', () => DropdownCloudWidgetComponent, true);\n        this.formRenderingService.setComponentTypeResolver('date', () => DateCloudWidgetComponent, true);\n    }\n\n    ngOnInit() {\n        if (this.appName === '' && this.taskId) {\n            this.loadTask();\n        }\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        const appName = changes['appName'];\n        if (appName && (appName.currentValue !== appName.previousValue) && this.taskId) {\n            this.loadTask();\n            return;\n        }\n\n        const taskId = changes['taskId'];\n        if (taskId && taskId.currentValue && this.appName) {\n            this.loadTask();\n            return;\n        }\n    }\n\n    loadTask() {\n        this.loading = true;\n\n        this.taskCloudService\n            .getTaskById(this.appName, this.taskId)\n            .subscribe(details => {\n                this.taskDetails = details;\n                this.loading = false;\n            });\n\n        this.taskCloudService\n            .getCandidateUsers(this.appName, this.taskId)\n            .subscribe(users => this.candidateUsers = users || []);\n\n        this.taskCloudService\n            .getCandidateGroups(this.appName, this.taskId)\n            .subscribe(groups => this.candidateGroups = groups || []);\n    }\n\n    hasForm(): boolean {\n        return this.taskDetails && !!this.taskDetails.formKey;\n    }\n\n    canCompleteTask(): boolean {\n        return this.showCompleteButton && !this.readOnly && this.taskCloudService.canCompleteTask(this.taskDetails);\n    }\n\n    canClaimTask(): boolean {\n        return !this.readOnly && this.taskCloudService.canClaimTask(this.taskDetails);\n    }\n\n    hasCandidateUsers(): boolean {\n        return this.candidateUsers.length !== 0;\n    }\n\n    hasCandidateGroups(): boolean {\n        return this.candidateGroups.length !== 0;\n    }\n\n    hasCandidateUsersOrGroups(): boolean {\n        let hasCandidateUsersOrGroups = false;\n\n        if (this.taskDetails?.status === 'ASSIGNED') {\n            hasCandidateUsersOrGroups = this.hasCandidateUsers() || this.hasCandidateGroups();\n        }\n        return hasCandidateUsersOrGroups;\n    }\n\n    canUnclaimTask(): boolean {\n        return !this.readOnly && this.taskCloudService.canUnclaimTask(this.taskDetails);\n    }\n\n    isReadOnly(): boolean {\n        return this.readOnly || !this.taskCloudService.canCompleteTask(this.taskDetails);\n    }\n\n    onCompleteTask() {\n        this.loadTask();\n        this.taskCompleted.emit(this.taskId);\n    }\n\n    onClaimTask() {\n        this.loadTask();\n        this.taskClaimed.emit(this.taskId);\n    }\n\n    onUnclaimTask() {\n        this.loadTask();\n        this.taskUnclaimed.emit(this.taskId);\n    }\n\n    onCancelClick() {\n        this.cancelClick.emit(this.taskId);\n    }\n\n    onFormSaved(form: FormModel) {\n        this.formSaved.emit(form);\n    }\n\n    onFormCompleted(form: FormModel) {\n        this.formCompleted.emit(form);\n        this.taskCompleted.emit(this.taskId);\n    }\n\n    onError(data: any) {\n        this.error.emit(data);\n    }\n\n    onFormContentClicked(content: ContentLinkModel) {\n        this.formContentClicked.emit(content);\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MaterialModule } from '../../material.module';\nimport { FormCloudModule } from '../../form/form-cloud.module';\nimport { TaskDirectiveModule } from '../directives/task-directive.module';\n\nimport { TaskFormCloudComponent } from './components/task-form-cloud.component';\nimport { CoreModule } from '@alfresco/adf-core';\nimport { FlexLayoutModule } from '@angular/flex-layout';\n\n@NgModule({\n    imports: [\n        CoreModule,\n        CommonModule,\n        MaterialModule,\n        FormCloudModule,\n        TaskDirectiveModule,\n        FlexLayoutModule\n    ],\n    declarations: [\n        TaskFormCloudComponent\n    ],\n    exports: [\n        TaskFormCloudComponent\n    ]\n})\nexport class TaskFormModule { }\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NgModule } from '@angular/core';\nimport { TaskListCloudModule } from './task-list/task-list-cloud.module';\nimport { TaskFiltersCloudModule } from './task-filters/task-filters-cloud.module';\nimport { StartTaskCloudModule } from './start-task/start-task-cloud.module';\nimport { TaskHeaderCloudModule } from './task-header/task-header-cloud.module';\nimport { TaskDirectiveModule } from './directives/task-directive.module';\nimport { TaskFormModule } from './task-form/task-form.module';\n\n@NgModule({\n    imports: [\n        TaskListCloudModule,\n        TaskFiltersCloudModule,\n        StartTaskCloudModule,\n        TaskHeaderCloudModule,\n        TaskDirectiveModule,\n        TaskFormModule\n    ],\n    exports: [\n        TaskListCloudModule,\n        TaskFiltersCloudModule,\n        StartTaskCloudModule,\n        TaskHeaderCloudModule,\n        TaskDirectiveModule,\n        TaskFormModule\n    ]\n})\nexport class TaskCloudModule { }\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { DateCloudFilterType } from '../../../models/date-cloud-filter.model';\nimport { DateRangeFilterService } from '../../../common/date-range-filter/date-range-filter.service';\nimport { ComponentSelectionMode } from '../../../types';\n\nexport class ProcessFilterCloudModel {\n\n    private dateRangeFilterService = new DateRangeFilterService();\n\n    id: string;\n    name: string;\n    key: string;\n    icon: string;\n    index: number;\n    appName: string;\n    appVersion?: number | number[];\n    processName: string;\n    processInstanceId: string;\n    initiator: string;\n    status: string;\n    sort: string;\n    order: string;\n    processDefinitionId: string;\n    processDefinitionName?: string;\n    processDefinitionKey: string;\n    lastModified: Date;\n    lastModifiedTo: Date;\n    lastModifiedFrom: Date;\n    startedDate: Date;\n    completedDateType: DateCloudFilterType;\n    startedDateType: DateCloudFilterType;\n    suspendedDateType: DateCloudFilterType;\n    completedDate: Date;\n\n    private _completedFrom: string;\n    private _completedTo: string;\n    private _startFrom: string;\n    private _startTo: string;\n    private _suspendedFrom: string;\n    private _suspendedTo: string;\n\n    constructor(obj?: any) {\n        if (obj) {\n            this.id = obj.id || Math.random().toString(36).substring(2, 9);\n            this.name = obj.name || null;\n            this.key = obj.key || null;\n            this.icon = obj.icon || null;\n            this.index = obj.index || null;\n            this.appName = obj.appName || obj.appName === '' ? obj.appName : null;\n            this.appVersion = obj.appVersion || null;\n\n            if (obj.appVersionMultiple && Array.isArray(obj.appVersionMultiple)) {\n                this.appVersion = obj.appVersionMultiple;\n            }\n\n            this.processInstanceId = obj.processInstanceId || null;\n            this.processName = obj.processName || null;\n            this.initiator = obj.initiator || null;\n            this.status = obj.status || null;\n            this.sort = obj.sort || null;\n            this.order = obj.order || null;\n            this.processDefinitionId = obj.processDefinitionId || null;\n            this.processDefinitionName = obj.processDefinitionName || null;\n            this.processDefinitionKey = obj.processDefinitionKey || null;\n            this.lastModified = obj.lastModified || null;\n            this.lastModifiedTo = obj.lastModifiedTo || null;\n            this.lastModifiedFrom = obj.lastModifiedFrom || null;\n            this.startedDate = obj.startedDate || null;\n            this.startFrom = obj._startFrom || null;\n            this.startTo = obj._startTo || null;\n            this.completedDateType = obj.completedDateType || null;\n            this.startedDateType = obj.startedDateType || null;\n            this.suspendedDateType = obj.suspendedDateType || null;\n            this.completedFrom = obj._completedFrom || null;\n            this.completedTo = obj._completedTo || null;\n            this.completedDate = obj.completedDate || null;\n            this._suspendedFrom = obj._suspendedFrom || null;\n            this._suspendedTo = obj._suspendedTo || null;\n        }\n    }\n\n    set completedFrom(completedFrom: string) {\n        this._completedFrom = completedFrom;\n    }\n\n    set completedTo(completedTo: string) {\n        this._completedTo = completedTo;\n    }\n\n    get completedFrom() {\n        if (this.isDateRangeType(this.completedDateType)) {\n            return this._completedFrom;\n        }\n        return this.getStartDate(this.completedDateType);\n    }\n\n    get completedTo() {\n        if (this.isDateRangeType(this.completedDateType)) {\n            return this._completedTo;\n        }\n        return this.getEndDate(this.completedDateType);\n    }\n\n    set startFrom(startFrom: string) {\n        this._startFrom = startFrom;\n    }\n\n    set startTo(startTo: string) {\n        this._startTo = startTo;\n    }\n\n    get startFrom() {\n        if (this.isDateRangeType(this.startedDateType)) {\n            return this._startFrom;\n        }\n        return this.getStartDate(this.startedDateType);\n    }\n\n    get startTo() {\n        if (this.isDateRangeType(this.startedDateType)) {\n            return this._startTo;\n        }\n        return this.getEndDate(this.startedDateType);\n    }\n\n    set suspendedFrom(suspendedFrom: string) {\n        this._suspendedFrom = suspendedFrom;\n    }\n\n    set suspendedTo(suspendedTo: string) {\n        this._suspendedTo = suspendedTo;\n    }\n\n    get suspendedFrom(): string {\n        if (this.isDateRangeType(this.suspendedDateType)) {\n            return this._suspendedFrom;\n        }\n        return this.getStartDate(this.suspendedDateType);\n    }\n\n    get suspendedTo(): string {\n        if (this.isDateRangeType(this.suspendedDateType)) {\n            return this._suspendedTo;\n        }\n        return this.getEndDate(this.suspendedDateType);\n    }\n\n    private getStartDate(key: DateCloudFilterType) {\n        return this.dateRangeFilterService.getDateRange(key).startDate;\n    }\n\n    private getEndDate(key: DateCloudFilterType) {\n        return this.dateRangeFilterService.getDateRange(key).endDate;\n    }\n\n    private isDateRangeType(type: DateCloudFilterType) {\n        return !!this.dateRangeFilterService.isDateRangeType(type);\n    }\n}\n\nexport interface ProcessFilterAction {\n    actionType?: string;\n    icon?: string;\n    tooltip?: string;\n    filter?: ProcessFilterCloudModel;\n}\n\nexport interface ProcessFilterOptions {\n    label?: string;\n    value?: string | object;\n}\n\nexport interface ProcessFilterProperties {\n    label?: string;\n    type?: string;\n    value?: any;\n    key?: string;\n    attributes?: { [key: string]: string; };\n    options?: ProcessFilterOptions[];\n    dateFilterOptions?: DateCloudFilterType[];\n    selectionMode?: ComponentSelectionMode;\n}\n\nexport interface ProcessSortFilterProperty {\n    label: string;\n    value: string | object;\n    key: string;\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { IdentityUserService } from '@alfresco/adf-core';\nimport { Injectable, Inject } from '@angular/core';\nimport { Observable, of, BehaviorSubject, throwError } from 'rxjs';\nimport { ProcessFilterCloudModel } from '../models/process-filter-cloud.model';\nimport { switchMap, map, catchError } from 'rxjs/operators';\nimport { PROCESS_FILTERS_SERVICE_TOKEN } from '../../../services/cloud-token.service';\nimport { PreferenceCloudServiceInterface } from '../../../services/preference-cloud.interface';\n@Injectable({\n    providedIn: 'root'\n})\nexport class ProcessFilterCloudService {\n\n    private filtersSubject: BehaviorSubject<ProcessFilterCloudModel[]>;\n    filters$: Observable<ProcessFilterCloudModel[]>;\n\n    constructor(\n        @Inject(PROCESS_FILTERS_SERVICE_TOKEN) public preferenceService: PreferenceCloudServiceInterface,\n        private identityUserService: IdentityUserService) {\n        this.filtersSubject = new BehaviorSubject([]);\n        this.filters$ = this.filtersSubject.asObservable();\n    }\n\n    readQueryParams(obj: Object): ProcessFilterCloudModel {\n        const model = Object.assign({}, obj) as ProcessFilterCloudModel;\n\n        if (obj.hasOwnProperty('appVersion') && obj['appVersion']) {\n            if (typeof obj['appVersion'] === 'string') {\n                model.appVersion = obj['appVersion'].split(',').map(str => parseInt(str, 10));\n            }\n        }\n\n        if (obj.hasOwnProperty('lastModifiedFrom')) {\n            model.lastModifiedFrom = new Date(parseInt(obj['lastModifiedFrom'], 10));\n        }\n\n        if (obj.hasOwnProperty('lastModifiedTo')) {\n            model.lastModifiedTo = new Date(parseInt(obj['lastModifiedTo'], 10));\n        }\n\n        return model;\n    }\n\n    writeQueryParams(value: Object, filterProperties: string[], appName?: string, id?: string): Object {\n        value = value || {};\n        const result = {\n            appName: appName || value['appName'],\n            id: id || value['id']\n        };\n\n        for (const prop of filterProperties) {\n            if (prop === 'appVersionMultiple') {\n                const versions = value['appVersion'];\n\n                if (Array.isArray(versions) && versions.length > 0) {\n                    result['appVersion'] = versions.join(',');\n                }\n            } else if (prop === 'lastModified') {\n                if (value['lastModifiedFrom']) {\n                    result['lastModifiedFrom'] = value['lastModifiedFrom'].valueOf();\n                }\n\n                if (value['lastModifiedTo']) {\n                    result['lastModifiedTo'] = value['lastModifiedTo'].valueOf();\n                }\n\n            } else if (value.hasOwnProperty(prop)) {\n                result[prop] = value[prop];\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * Creates and returns the default process instance filters for a app.\n     * @param appName Name of the target app\n     * @returns Observable of default process instance filters just created or created filters\n     */\n    private createDefaultFilters(appName: string) {\n        const key: string = this.prepareKey(appName);\n        this.preferenceService.getPreferences(appName, key).pipe(\n            switchMap((response: any) => {\n                const preferences = (response && response.list && response.list.entries) ? response.list.entries : [];\n                if (!this.hasPreferences(preferences)) {\n                    return this.createProcessFilters(appName, key, this.defaultProcessFilters(appName));\n                } else if (!this.hasProcessFilters(preferences, key)) {\n                    return this.createProcessFilters(appName, key, this.defaultProcessFilters(appName));\n                } else {\n                    return of(this.findFiltersByKeyInPreferences(preferences, key));\n                }\n            }),\n            catchError((err) => this.handleProcessError(err))\n        ).subscribe((filters) => {\n            this.addFiltersToStream(filters);\n        });\n    }\n\n    /**\n     * Gets all process instance filters for a process app.\n     * @param appName Name of the target app\n     * @returns Observable of process filters details\n     */\n    getProcessFilters(appName: string): Observable<ProcessFilterCloudModel[]> {\n        this.createDefaultFilters(appName);\n        return this.filters$;\n    }\n\n    /**\n     * Get process instance filter for given filter id\n     * @param appName Name of the target app\n     * @param id Id of the target process instance filter\n     * @returns Observable of process instance filter details\n     */\n    getFilterById(appName: string, id: string): Observable<ProcessFilterCloudModel> {\n        const key: string = this.prepareKey(appName);\n        return this.getProcessFiltersByKey(appName, key).pipe(\n            switchMap((filters: ProcessFilterCloudModel[]) => {\n                if (filters && filters.length === 0) {\n                    return this.createProcessFilters(appName, key, this.defaultProcessFilters(appName));\n                } else {\n                    return of(filters);\n                }\n            }),\n            map((filters: ProcessFilterCloudModel[]) => {\n                return filters.filter((filter: ProcessFilterCloudModel) => {\n                    return filter.id === id;\n                })[0];\n            }),\n            catchError((err) => this.handleProcessError(err))\n            );\n    }\n\n    /**\n     * Adds a new process instance filter\n     * @param filter The new filter to add\n     * @returns Observable of process instance filters with newly added filter\n     */\n    addFilter(newFilter: ProcessFilterCloudModel): Observable<ProcessFilterCloudModel[]> {\n        const { appName, name } = newFilter;\n        const key: string = this.prepareKey(appName);\n\n        return this.getProcessFiltersByKey(appName, key).pipe(\n            switchMap((filters: ProcessFilterCloudModel[]) => {\n                if (filters && filters.length === 0) {\n                    return this.createProcessFilters(appName, key, [newFilter]);\n                } else {\n                    const index = filters.findIndex(filter => filter.name === name);\n                    if (index >= 0) {\n                        filters.splice(index, 1);\n                    }\n\n                    filters.push(newFilter);\n                    return this.preferenceService.updatePreference(appName, key, filters);\n                }\n            }),\n            map((filters: ProcessFilterCloudModel[]) => {\n                this.addFiltersToStream(filters);\n                return filters;\n            }),\n            catchError((err) => this.handleProcessError(err))\n        );\n    }\n\n    /**\n     *  Update process instance filter\n     * @param filter The new filter to update\n     * @returns Observable of process instance filters with updated filter\n     */\n    updateFilter(updatedFilter: ProcessFilterCloudModel): Observable<ProcessFilterCloudModel[]> {\n        const key: string = this.prepareKey(updatedFilter.appName);\n        return this.getProcessFiltersByKey(updatedFilter.appName, key).pipe(\n            switchMap((filters: any) => {\n                if (filters && filters.length === 0) {\n                    return this.createProcessFilters(updatedFilter.appName, key, [updatedFilter]);\n                } else {\n                    const itemIndex = filters.findIndex((filter: ProcessFilterCloudModel) => filter.id === updatedFilter.id);\n                    filters[itemIndex] = updatedFilter;\n                    return this.updateProcessFilters(updatedFilter.appName, key, filters);\n                }\n            }),\n            map((updatedFilters: ProcessFilterCloudModel[]) => {\n                this.addFiltersToStream(updatedFilters);\n                return updatedFilters;\n            }),\n            catchError((err) => this.handleProcessError(err))\n        );\n    }\n\n    /**\n     *  Delete process instance filter\n     * @param filter The new filter to delete\n     * @returns Observable of process instance filters without deleted filter\n     */\n    deleteFilter(deletedFilter: ProcessFilterCloudModel): Observable<ProcessFilterCloudModel[]> {\n        const key = this.prepareKey(deletedFilter.appName);\n\n        return this.getProcessFiltersByKey(deletedFilter.appName, key).pipe(\n            switchMap(filters => {\n                if (filters && filters.length > 0) {\n                    filters = filters.filter(filter => filter.id !== deletedFilter.id);\n                    return this.updateProcessFilters(deletedFilter.appName, key, filters);\n                } else {\n                    return of([]);\n                }\n            }),\n            map((filters: ProcessFilterCloudModel[]) => {\n                this.addFiltersToStream(filters);\n                return filters;\n            }),\n            catchError((err) => this.handleProcessError(err))\n        );\n    }\n\n    /**\n     * Checks if given filter is a default filter\n     * @param filterName Name of the target process filter\n     * @returns Boolean value for whether the filter is a default filter\n     */\n    isDefaultFilter(filterName: string): boolean {\n        const defaultFilters = this.defaultProcessFilters();\n        return defaultFilters.findIndex((filter) => filterName === filter.name) !== -1;\n    }\n\n    /**\n     * Checks user preference are empty or not\n     * @param preferences User preferences of the target app\n     * @returns Boolean value if the preferences are not empty\n     */\n    private hasPreferences(preferences: any): boolean {\n        return preferences && preferences.length > 0;\n    }\n\n    /**\n     * Checks for process instance filters in given user preferences\n     * @param preferences User preferences of the target app\n     * @param key Key of the process instance filters\n     * @param filters Details of create filter\n     * @returns Boolean value if the preference has process instance filters\n     */\n    private hasProcessFilters(preferences: any, key: string): boolean {\n        const filters = preferences.find((filter: any) => { return filter.entry.key === key; });\n        return (filters && filters.entry) ? JSON.parse(filters.entry.value).length > 0 : false;\n    }\n\n    /**\n     * Calls create preference api to create process instance filters\n     * @param appName Name of the target app\n     * @param key Key of the process instance filters\n     * @param filters Details of new process instance filter\n     * @returns Observable of created process instance filters\n     */\n    private createProcessFilters(appName: string, key: string, filters: ProcessFilterCloudModel[]): Observable<ProcessFilterCloudModel[]> {\n        return this.preferenceService.createPreference(appName, key, filters);\n    }\n\n    /**\n     * Calls get preference api to get process instance filter by preference key\n     * @param appName Name of the target app\n     * @param key Key of the process instance filters\n     * @returns Observable of process instance filters\n     */\n    private getProcessFiltersByKey(appName: string, key: string): Observable<ProcessFilterCloudModel[]> {\n        return this.preferenceService.getPreferenceByKey(appName, key);\n    }\n\n    /**\n     * Calls update preference api to update process instance filter\n     * @param appName Name of the target app\n     * @param key Key of the process instance filters\n     * @param filters Details of update filter\n     * @returns Observable of updated process instance filters\n     */\n    private updateProcessFilters(appName: string, key: string, filters: ProcessFilterCloudModel[]): Observable<ProcessFilterCloudModel[]> {\n        return this.preferenceService.updatePreference(appName, key, filters);\n    }\n\n    /**\n     * Creates a uniq key with appName and username\n     * @param appName Name of the target app\n     * @returns String of process instance filters preference key\n     */\n    private prepareKey(appName: string): string {\n        const user = this.identityUserService.getCurrentUserInfo();\n        return `process-filters-${appName}-${user.username}`;\n    }\n\n    /**\n     * Finds and returns the process instance filters from preferences\n     * @returns Array of ProcessFilterCloudModel\n     * @param preferences\n     * @param key\n     */\n    private findFiltersByKeyInPreferences(preferences: any, key: string): ProcessFilterCloudModel[] {\n        const result = preferences.find((filter: any) => { return filter.entry.key === key; });\n        return result && result.entry ? JSON.parse(result.entry.value) : [];\n    }\n\n    private addFiltersToStream(filters: ProcessFilterCloudModel[]) {\n        this.filtersSubject.next(filters);\n    }\n\n    private handleProcessError(error: any) {\n        return throwError(error || 'Server error');\n    }\n\n    /**\n     * Creates and returns the default filters for a process app.\n     * @param appName Name of the target app\n     * @returns Array of ProcessFilterCloudModel\n     */\n    private defaultProcessFilters(appName?: string): ProcessFilterCloudModel[] {\n        return [\n            new ProcessFilterCloudModel({\n                name: 'ADF_CLOUD_PROCESS_FILTERS.RUNNING_PROCESSES',\n                icon: 'inbox',\n                key: 'running-processes',\n                appName,\n                sort: 'startDate',\n                status: 'RUNNING',\n                order: 'DESC'\n            }),\n            new ProcessFilterCloudModel({\n                name: 'ADF_CLOUD_PROCESS_FILTERS.COMPLETED_PROCESSES',\n                icon: 'done',\n                key: 'completed-processes',\n                appName,\n                sort: 'startDate',\n                status: 'COMPLETED',\n                order: 'DESC'\n            }),\n            new ProcessFilterCloudModel({\n                name: 'ADF_CLOUD_PROCESS_FILTERS.ALL_PROCESSES',\n                key: 'all-processes',\n                icon: 'adjust',\n                appName,\n                sort: 'startDate',\n                status: '',\n                order: 'DESC'\n            })\n        ];\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, EventEmitter, Input, OnChanges, Output, SimpleChanges, OnDestroy, OnInit, ViewEncapsulation } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\nimport { ProcessFilterCloudService } from '../services/process-filter-cloud.service';\nimport { ProcessFilterCloudModel } from '../models/process-filter-cloud.model';\nimport { TranslationService } from '@alfresco/adf-core';\nimport { FilterParamsModel } from '../../../task/task-filters/models/filter-cloud.model';\nimport { takeUntil } from 'rxjs/operators';\n\n@Component({\n    selector: 'adf-cloud-process-filters',\n    templateUrl: './process-filters-cloud.component.html',\n    styleUrls: ['./process-filters-cloud.component.scss'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class ProcessFiltersCloudComponent implements OnInit, OnChanges, OnDestroy {\n\n    /** (required) The application name */\n    @Input()\n    appName: string = '';\n\n    /** (optional) The filter to be selected by default */\n    @Input()\n    filterParam: FilterParamsModel;\n\n    /** (optional) Toggles showing an icon by the side of each filter */\n    @Input()\n    showIcons: boolean = false;\n\n    /** Emitted when a filter is being selected based on the filterParam input. */\n    @Output()\n    filterSelected = new EventEmitter<ProcessFilterCloudModel>();\n\n    /** Emitted when a filter is being clicked from the UI. */\n    @Output()\n    filterClicked = new EventEmitter<ProcessFilterCloudModel>();\n\n    /** Emitted when filters are loaded successfully */\n    @Output()\n    success = new EventEmitter<any>();\n\n    /** Emitted when any error occurs while loading the filters */\n    @Output()\n    error = new EventEmitter<any>();\n\n    filters$: Observable<ProcessFilterCloudModel[]>;\n\n    currentFilter: ProcessFilterCloudModel;\n\n    filters: ProcessFilterCloudModel [] = [];\n\n    private onDestroy$ = new Subject<boolean>();\n\n    constructor(\n        private processFilterCloudService: ProcessFilterCloudService,\n        private translationService: TranslationService ) { }\n\n    ngOnInit() {\n        if (this.appName === '') {\n            this.getFilters(this.appName);\n        }\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        const appName = changes['appName'];\n        const filter = changes['filterParam'];\n        if (appName && appName.currentValue) {\n            this.getFilters(appName.currentValue);\n        } else if (filter && filter.currentValue !== filter.previousValue) {\n            this.selectFilterAndEmit(filter.currentValue);\n        }\n    }\n\n    /**\n     * Fetch the filter list based on appName\n     */\n    getFilters(appName: string) {\n        this.filters$ = this.processFilterCloudService.getProcessFilters(appName);\n\n        this.filters$.pipe(takeUntil(this.onDestroy$)).subscribe(\n            (res: ProcessFilterCloudModel[]) => {\n                this.resetFilter();\n                this.filters = res || [];\n                this.selectFilterAndEmit(this.filterParam);\n                this.success.emit(res);\n            },\n            (err: any) => {\n                this.error.emit(err);\n            }\n        );\n    }\n\n    /**\n     * Pass the selected filter as next\n     */\n    public selectFilter(paramFilter: FilterParamsModel) {\n        if (paramFilter) {\n            this.currentFilter = this.filters.find((filter, index) => {\n                return paramFilter.id === filter.id ||\n                (paramFilter.name && this.checkFilterNamesEquality(paramFilter.name, filter.name)) ||\n                (paramFilter.key && (paramFilter.key === filter.key)) ||\n                paramFilter.index === index;\n            });\n        }\n    }\n\n    /**\n     * Check equality of the filter names by translating the given name strings\n     */\n    private checkFilterNamesEquality(name1: string, name2: string ): boolean {\n        const translatedName1 = this.translationService.instant(name1);\n        const translatedName2 = this.translationService.instant(name2);\n\n        return translatedName1.toLocaleLowerCase() === translatedName2.toLocaleLowerCase();\n    }\n\n    /**\n     * Selects and emits the given filter\n     */\n    public selectFilterAndEmit(newParamFilter: FilterParamsModel) {\n        if (newParamFilter) {\n            this.selectFilter(newParamFilter);\n            this.filterSelected.emit(this.currentFilter);\n        } else {\n            this.currentFilter = undefined;\n        }\n    }\n\n    /**\n     * Select filter with the id\n     */\n    public selectFilterById(id: string) {\n        this.selectFilterAndEmit(<ProcessFilterCloudModel> {id: id});\n    }\n\n    /**\n     * Selects and emits the clicked filter\n     */\n    public onFilterClick(filter: ProcessFilterCloudModel) {\n        if (filter) {\n            this.selectFilter(filter);\n            this.filterClicked.emit(this.currentFilter);\n        } else {\n            this.currentFilter = undefined;\n        }\n    }\n\n    /**\n     * Select as default process filter the first in the list\n     */\n    public selectDefaultProcessFilter() {\n        if (!this.isFilterListEmpty()) {\n            this.currentFilter = this.filters[0];\n        }\n    }\n\n    /**\n     * Return the current process\n     */\n    getCurrentFilter(): ProcessFilterCloudModel {\n        return this.currentFilter;\n    }\n\n    /**\n     * Check if the filter list is empty\n     */\n    isFilterListEmpty(): boolean {\n        return this.filters === undefined || (this.filters && this.filters.length === 0);\n    }\n\n    /**\n     * Reset the filters\n     */\n    private resetFilter() {\n        this.filters = [];\n        this.currentFilter = undefined;\n    }\n\n    ngOnDestroy() {\n        this.onDestroy$.next(true);\n        this.onDestroy$.complete();\n    }\n\n    isActiveFilter(filter: any): boolean {\n        return this.currentFilter.name === filter.name;\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, Inject, OnInit } from '@angular/core';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\nimport { FormBuilder, FormGroup, AbstractControl, Validators } from '@angular/forms';\n\n@Component({\n  selector: 'adf-cloud-process-filter-dialog-cloud',\n  templateUrl: './process-filter-dialog-cloud.component.html',\n  styleUrls: ['./process-filter-dialog-cloud.component.scss']\n})\nexport class ProcessFilterDialogCloudComponent implements OnInit {\n\n    public static ACTION_SAVE = 'SAVE';\n    defaultIcon = 'inbox';\n\n    filterForm: FormGroup;\n\n    constructor(\n        private fb: FormBuilder,\n        public dialogRef: MatDialogRef<ProcessFilterDialogCloudComponent>,\n        @Inject(MAT_DIALOG_DATA) public data) {\n    }\n\n    ngOnInit() {\n        this.filterForm = this.fb.group({\n            name: [this.data.name, Validators.required]\n        });\n    }\n\n    onSaveClick() {\n        this.dialogRef.close({\n            action: ProcessFilterDialogCloudComponent.ACTION_SAVE,\n            icon: this.defaultIcon,\n            name: this.nameController.value\n        });\n    }\n\n    onCancelClick() {\n        this.dialogRef.close();\n    }\n\n    get nameController(): AbstractControl {\n        return this.filterForm.get('name');\n    }\n\n    isValid(): boolean {\n        return this.filterForm.valid;\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AlfrescoApiService, LogService, AppConfigService } from '@alfresco/adf-core';\nimport { Injectable } from '@angular/core';\nimport { Observable, Subject, throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { ProcessInstanceCloud } from '../start-process/models/process-instance-cloud.model';\nimport { BaseCloudService } from '../../services/base-cloud.service';\nimport { ProcessDefinitionCloud } from '../../models/process-definition-cloud.model';\nimport { ApplicationVersionModel, ApplicationVersionResponseModel } from '../../models/application-version.model';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class ProcessCloudService extends BaseCloudService {\n\n    dataChangesDetected = new Subject<ProcessInstanceCloud>();\n\n    constructor(apiService: AlfrescoApiService,\n                appConfigService: AppConfigService,\n                private logService: LogService) {\n        super(apiService, appConfigService);\n    }\n\n    /**\n     * Gets details of a process instance.\n     * @param appName Name of the app\n     * @param processInstanceId ID of the process instance whose details you want\n     * @returns Process instance details\n     */\n    getProcessInstanceById(appName: string, processInstanceId: string): Observable<ProcessInstanceCloud> {\n        if (appName && processInstanceId) {\n            const url = `${this.getBasePath(appName)}/query/v1/process-instances/${processInstanceId}`;\n\n            return this.get<{ entry: ProcessInstanceCloud }>(url).pipe(\n                map((res) => {\n                    this.dataChangesDetected.next(res.entry);\n                    return res.entry;\n                })\n            );\n        } else {\n            this.logService.error('AppName and ProcessInstanceId are mandatory for querying a process');\n            return throwError('AppName/ProcessInstanceId not configured');\n        }\n    }\n\n    /**\n     * Gets the process definitions associated with an app.\n     * @param appName Name of the target app\n     * @returns Array of process definitions\n     */\n    getProcessDefinitions(appName: string): Observable<ProcessDefinitionCloud[]> {\n        if (appName || appName === '') {\n            const url = `${this.getBasePath(appName)}/rb/v1/process-definitions`;\n\n            return this.get(url).pipe(\n                map((res: any) => {\n                    return res.list.entries.map((processDefs) => new ProcessDefinitionCloud(processDefs.entry));\n                })\n            );\n        } else {\n            this.logService.error('AppName is mandatory for querying task');\n            return throwError('AppName not configured');\n        }\n    }\n\n    /**\n     * Gets the application versions associated with an app.\n     * @param appName Name of the target app\n     * @returns Array of Application Version Models\n     */\n    getApplicationVersions(appName: string): Observable<ApplicationVersionModel[]> {\n        if (appName) {\n            const url = `${this.getBasePath(appName)}/query/v1/applications`;\n\n            return this.get<any>(url).pipe(\n                map((appEntities: ApplicationVersionResponseModel) => {\n                    return appEntities.list.entries;\n                }),\n                catchError((err) => this.handleError(err))\n            );\n        } else {\n            this.logService.error('AppName is mandatory for querying the versions of an application');\n            return throwError('AppName not configured');\n        }\n    }\n\n    /**\n     * Cancels a process.\n     * @param appName Name of the app\n     * @param processInstanceId Id of the process to cancel\n     * @returns Operation Information\n     */\n    cancelProcess(appName: string, processInstanceId: string): Observable<ProcessInstanceCloud> {\n        if (appName && processInstanceId) {\n            const queryUrl = `${this.getBasePath(appName)}/rb/v1/process-instances/${processInstanceId}`;\n            return this.delete(queryUrl).pipe(\n                map((res: any) => {\n                   this.dataChangesDetected.next(res.entry);\n                   return res.entry;\n                })\n            );\n        } else {\n            this.logService.error('App name and Process id are mandatory for deleting a process');\n            return throwError('App name and process id not configured');\n        }\n    }\n\n    private handleError(error?: any) {\n        this.logService.error(error);\n        return throwError(error || 'Server error');\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, Input, Output, EventEmitter, OnInit, OnChanges, SimpleChanges, OnDestroy, ViewEncapsulation } from '@angular/core';\nimport { FormGroup, FormBuilder, AbstractControl } from '@angular/forms';\nimport { DateAdapter } from '@angular/material/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { debounceTime, filter, takeUntil, finalize, switchMap } from 'rxjs/operators';\nimport { Subject, Observable, Subscription } from 'rxjs';\nimport moment from 'moment-es6';\nimport { Moment } from 'moment';\nimport { AppsProcessCloudService } from '../../../app/services/apps-process-cloud.service';\nimport { ProcessFilterCloudModel, ProcessFilterProperties, ProcessFilterAction, ProcessFilterOptions, ProcessSortFilterProperty } from '../models/process-filter-cloud.model';\nimport { IdentityUserModel, TranslationService, UserPreferencesService, UserPreferenceValues } from '@alfresco/adf-core';\nimport { ProcessFilterCloudService } from '../services/process-filter-cloud.service';\nimport { ProcessFilterDialogCloudComponent } from './process-filter-dialog-cloud.component';\nimport { ProcessCloudService } from '../../services/process-cloud.service';\nimport { DateCloudFilterType, DateRangeFilter } from '../../../models/date-cloud-filter.model';\n\nexport interface DropdownOption {\n    value: string;\n    label: string;\n}\n\n@Component({\n    selector: 'adf-cloud-edit-process-filter',\n    templateUrl: './edit-process-filter-cloud.component.html',\n    styleUrls: ['./edit-process-filter-cloud.component.scss'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class EditProcessFilterCloudComponent implements OnInit, OnChanges, OnDestroy {\n\n    public static ACTION_SAVE = 'save';\n    public static ACTION_SAVE_AS = 'saveAs';\n    public static ACTION_DELETE = 'delete';\n    public static DEFAULT_PROCESS_FILTER_PROPERTIES = ['status', 'sort', 'order', 'lastModified'];\n    public static DEFAULT_SORT_PROPERTIES = ['id', 'name', 'status', 'startDate'];\n    public static DEFAULT_ACTIONS = ['save', 'saveAs', 'delete'];\n    public DATE_FORMAT: string = 'DD/MM/YYYY';\n\n    /** The name of the application. */\n    @Input()\n    appName: string = '';\n\n    /** roles to filter the apps */\n    @Input()\n    role: string = '';\n\n    /** Id of the process instance filter. */\n    @Input()\n    id: string;\n\n    /** List of process filter properties to display */\n    @Input()\n    filterProperties = EditProcessFilterCloudComponent.DEFAULT_PROCESS_FILTER_PROPERTIES;\n\n    /** List of sort properties to display. */\n    @Input()\n    sortProperties = EditProcessFilterCloudComponent.DEFAULT_SORT_PROPERTIES;\n\n    /** List of sort actions. */\n    @Input()\n    actions = EditProcessFilterCloudComponent.DEFAULT_ACTIONS;\n\n    /** Toggles editing of process filter actions. */\n    @Input()\n    showFilterActions = true;\n\n    /** Toggles editing of the process filter title. */\n    @Input()\n    showTitle = true;\n\n     /** Toggles the appearance of the process filter name . */\n    @Input()\n    showProcessFilterName = true;\n\n    /** Emitted when a process instance filter property changes. */\n    @Output()\n    filterChange = new EventEmitter<ProcessFilterCloudModel>();\n\n    /** Emitted when a filter action occurs i.e Save, SaveAs, Delete. */\n    @Output()\n    action = new EventEmitter<ProcessFilterAction>();\n\n    private _filter: ProcessFilterCloudModel;\n    protected filterHasBeenChanged = false;\n\n    get processFilter() {\n        return this._filter;\n    }\n\n    @Input()\n    set processFilter(value: ProcessFilterCloudModel) {\n        const isChanged = this.isFilterChanged(this._filter, value);\n\n        this._filter = value;\n\n        if (value?.appName) {\n            this.appName = value.appName;\n        }\n\n        if (value?.id) {\n            this.id = value.id;\n        }\n\n        this.processFilterProperties = this.createAndFilterProperties();\n        this.processFilterActions = this.createAndFilterActions();\n\n        this.buildForm(this.processFilterProperties);\n\n        if (isChanged) {\n            this.filterChange.emit(value);\n        }\n    }\n\n    status: Array<DropdownOption> = [\n        { value: '', label: 'ADF_CLOUD_PROCESS_FILTERS.STATUS.ALL' },\n        { value: 'RUNNING', label: 'ADF_CLOUD_PROCESS_FILTERS.STATUS.RUNNING' },\n        { value: 'SUSPENDED', label: 'ADF_CLOUD_PROCESS_FILTERS.STATUS.SUSPENDED' },\n        { value: 'CANCELLED', label: 'ADF_CLOUD_PROCESS_FILTERS.STATUS.CANCELLED' },\n        { value: 'COMPLETED', label: 'ADF_CLOUD_PROCESS_FILTERS.STATUS.COMPLETED' }\n    ];\n    directions: Array<DropdownOption> = [\n        { value: 'ASC', label: 'ADF_CLOUD_PROCESS_FILTERS.DIRECTION.ASCENDING' },\n        { value: 'DESC', label: 'ADF_CLOUD_PROCESS_FILTERS.DIRECTION.DESCENDING' }\n    ];\n    actionDisabledForDefault = [\n        EditProcessFilterCloudComponent.ACTION_SAVE,\n        EditProcessFilterCloudComponent.ACTION_DELETE\n    ];\n    applicationNames: any[] = [];\n    allProcessDefinitionNamesOption: DropdownOption = {\n        label: 'ADF_CLOUD_PROCESS_FILTERS.STATUS.ALL',\n        value: ''\n    };\n    processDefinitionNames: any[] = [];\n    editProcessFilterForm: FormGroup;\n    processFilterProperties: ProcessFilterProperties[] = [];\n    processFilterActions: ProcessFilterAction[] = [];\n    toggleFilterActions: boolean = false;\n    appVersionOptions: ProcessFilterOptions[] = [];\n    initiatorOptions: IdentityUserModel[] = [];\n\n    private onDestroy$ = new Subject<boolean>();\n    isLoading: boolean = false;\n    private filterChangeSub: Subscription;\n\n    constructor(\n        private formBuilder: FormBuilder,\n        public dialog: MatDialog,\n        private dateAdapter: DateAdapter<Moment>,\n        private userPreferencesService: UserPreferencesService,\n        private translateService: TranslationService,\n        private processFilterCloudService: ProcessFilterCloudService,\n        private appsProcessCloudService: AppsProcessCloudService,\n        private processCloudService: ProcessCloudService) {\n    }\n\n    ngOnInit() {\n        this.userPreferencesService\n            .select(UserPreferenceValues.Locale)\n            .pipe(takeUntil(this.onDestroy$))\n            .subscribe(locale => this.dateAdapter.setLocale(locale));\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        const id = changes['id'];\n        if (id && id.currentValue !== id.previousValue) {\n            this.retrieveProcessFilterAndBuildForm();\n        }\n    }\n\n    ngOnDestroy() {\n        this.onDestroy$.next(true);\n        this.onDestroy$.complete();\n    }\n\n    buildForm(processFilterProperties: ProcessFilterProperties[]) {\n        this.editProcessFilterForm = this.formBuilder.group(this.getFormControlsConfig(processFilterProperties));\n        this.onFilterChange();\n    }\n\n    getFormControlsConfig(processFilterProperties: ProcessFilterProperties[]): any {\n        const properties = processFilterProperties.map((property) => {\n            if (!!property.attributes) {\n                return this.getAttributesControlConfig(property);\n            } else {\n                return { [property.key]: property.value };\n            }\n        });\n        return properties.reduce(((result, current) => Object.assign(result, current)), {});\n    }\n\n    private getAttributesControlConfig(property: ProcessFilterProperties) {\n        return Object.values(property.attributes).reduce((result, key) => {\n            result[key] = property.value[key];\n            return result;\n        }, {});\n    }\n\n    /**\n     * Fetches process instance filter by application name and filter id and creates filter properties, build form\n     */\n    retrieveProcessFilterAndBuildForm() {\n        this.isLoading = true;\n        this.processFilterCloudService\n            .getFilterById(this.appName, this.id)\n            .pipe(finalize(() => this.isLoading = false))\n            .subscribe(response => {\n                this.filterHasBeenChanged = false;\n                this.processFilter = new ProcessFilterCloudModel(\n                    Object.assign({}, response || {}, this.processFilter || {})\n                );\n            });\n    }\n\n    /**\n     * Check process instance filter changes\n     */\n    onFilterChange() {\n        if (this.filterChangeSub) {\n            this.filterChangeSub.unsubscribe();\n            this.filterChangeSub = null;\n        }\n\n        this.filterChangeSub = this.editProcessFilterForm.valueChanges\n            .pipe(\n                debounceTime(500),\n                filter(() => this.isFormValid()),\n                takeUntil(this.onDestroy$)\n            )\n            .subscribe((formValues: ProcessFilterCloudModel) => {\n                this.setLastModifiedToFilter(formValues);\n\n                const newValue = new ProcessFilterCloudModel(Object.assign({}, this.processFilter, formValues));\n                const changed = !this.compareFilters(newValue, this.processFilter);\n                this.filterHasBeenChanged = changed;\n\n                if (changed) {\n                    this._filter = newValue;\n                    this.filterChange.emit(newValue);\n                }\n            });\n    }\n\n    createAndFilterProperties(): ProcessFilterProperties[] {\n        this.checkMandatoryFilterProperties();\n\n        if (this.filterProperties.includes('appName')) {\n            this.getRunningApplications();\n        }\n\n        if (this.filterProperties.includes('processDefinitionName')) {\n            this.getProcessDefinitions();\n        }\n\n        if (this.filterProperties.includes('appVersionMultiple')) {\n            this.getAppVersionOptions();\n        }\n\n        if (this.filterProperties.includes('initiator')) {\n            this.initiatorOptions = !!this.processFilter.initiator\n                ? this.processFilter.initiator.split(',').map( username => Object.assign({}, { username: username }))\n                : [];\n        }\n\n        const defaultProperties = this.createProcessFilterProperties(this.processFilter);\n        let filteredProperties = defaultProperties.filter((filterProperty) => this.isValidProperty(this.filterProperties, filterProperty.key));\n\n        if (!this.filterProperties.includes('sort')) {\n            filteredProperties = filteredProperties.filter(property => property.key !== 'order');\n        }\n\n        if (this.filterProperties.includes('lastModified')) {\n            filteredProperties = [\n                ...filteredProperties,\n                ...this.createLastModifiedProperty(this.processFilter)\n            ];\n        }\n\n        return filteredProperties;\n    }\n\n    checkMandatoryFilterProperties() {\n        if (this.filterProperties === undefined || this.filterProperties.length === 0) {\n            this.filterProperties = EditProcessFilterCloudComponent.DEFAULT_PROCESS_FILTER_PROPERTIES;\n        }\n    }\n\n    private isValidProperty(filterProperties: string[], key: string): boolean {\n        return filterProperties ? filterProperties.indexOf(key) >= 0 : true;\n    }\n\n    get createSortProperties(): ProcessFilterOptions[] {\n        this.checkMandatorySortProperties();\n        const defaultSortProperties = this.createProcessSortProperties();\n        return defaultSortProperties.filter((sortProperty) => this.isValidProperty(this.sortProperties, sortProperty.key));\n    }\n\n    getAppVersionOptions() {\n        this.appVersionOptions = [];\n\n        this.processCloudService.getApplicationVersions(this.appName).subscribe((appVersions) => {\n            appVersions.forEach(appVersion => {\n                this.appVersionOptions.push({ label: appVersion.entry.version, value: appVersion.entry.version });\n            });\n        });\n    }\n\n    checkMandatorySortProperties() {\n        if (this.sortProperties === undefined || this.sortProperties.length === 0) {\n            this.sortProperties = EditProcessFilterCloudComponent.DEFAULT_SORT_PROPERTIES;\n        }\n    }\n\n    createAndFilterActions() {\n        this.checkMandatoryActions();\n        const actions = this.createFilterActions();\n        return actions.filter((action) => this.isValidAction(this.actions, action));\n    }\n\n    checkMandatoryActions() {\n        if (this.actions === undefined || this.actions.length === 0) {\n            this.actions = EditProcessFilterCloudComponent.DEFAULT_ACTIONS;\n        }\n    }\n\n    private isValidAction(actions: string[], action: ProcessFilterAction): boolean {\n        return actions ? actions.indexOf(action.actionType) >= 0 : true;\n    }\n\n    isFormValid(): boolean {\n        return this.editProcessFilterForm.valid;\n    }\n\n    getPropertyController(property: ProcessFilterProperties): AbstractControl {\n        return this.editProcessFilterForm.get(property.key);\n    }\n\n    onDateChanged(newDateValue: Moment, dateProperty: ProcessFilterProperties) {\n        if (newDateValue) {\n            const controller = this.getPropertyController(dateProperty);\n\n            if (newDateValue.isValid()) {\n                controller.setValue(newDateValue);\n                controller.setErrors(null);\n            } else {\n                controller.setErrors({ invalid: true });\n            }\n        }\n    }\n\n    onDateTypeChange(dateType: DateCloudFilterType, property: ProcessFilterProperties) {\n        this.editProcessFilterForm.get(property.attributes.dateType).setValue(dateType);\n    }\n\n    onDateRangeFilterChanged(dateRange: DateRangeFilter, property: ProcessFilterProperties) {\n        this.editProcessFilterForm.get(property.attributes?.from).setValue(\n            dateRange.startDate ? dateRange.startDate : null\n        );\n        this.editProcessFilterForm.get(property.attributes?.to).setValue(\n            dateRange.endDate ? dateRange.endDate : null\n        );\n        this.editProcessFilterForm.get(property.attributes.dateType).setValue(DateCloudFilterType.RANGE);\n    }\n\n    onChangedUser(users: IdentityUserModel[], processProperty: ProcessFilterProperties) {\n        this.getPropertyController(processProperty).setValue(users.map( user => user.username).join(','));\n    }\n\n    hasError(property: ProcessFilterProperties): boolean {\n        const controller = this.getPropertyController(property);\n        return controller.errors && controller.errors.invalid;\n    }\n\n    compareFilters(editedQuery: ProcessFilterCloudModel, currentQuery: ProcessFilterCloudModel): boolean {\n        return JSON.stringify(editedQuery).toLowerCase() === JSON.stringify(currentQuery).toLowerCase();\n    }\n\n    getRunningApplications() {\n        this.applicationNames = [];\n\n        this.appsProcessCloudService\n            .getDeployedApplicationsByStatus('RUNNING', this.role)\n            .subscribe((applications) => {\n                if (applications && applications.length > 0) {\n                    applications.map((application) => {\n                        this.applicationNames.push({ label: application.name, value: application.name });\n                    });\n                }\n            });\n    }\n\n    getProcessDefinitions() {\n        this.processDefinitionNames = [];\n\n        this.processCloudService.getProcessDefinitions(this.appName).subscribe((processDefinitions) => {\n            if (processDefinitions && processDefinitions.length > 0) {\n                this.processDefinitionNames.push(this.allProcessDefinitionNamesOption);\n                processDefinitions.map((processDefinition) => {\n                    this.processDefinitionNames.push({ label: processDefinition.name, value: processDefinition.name });\n                });\n            }\n        });\n    }\n\n    executeFilterActions(action: ProcessFilterAction): void {\n        if (action.actionType === EditProcessFilterCloudComponent.ACTION_SAVE) {\n            this.save(action);\n        } else if (action.actionType === EditProcessFilterCloudComponent.ACTION_SAVE_AS) {\n            this.saveAs(action);\n        } else if (action.actionType === EditProcessFilterCloudComponent.ACTION_DELETE) {\n            this.delete(action);\n        }\n    }\n\n    save(saveAction: ProcessFilterAction) {\n        this.processFilterCloudService\n            .updateFilter(this.processFilter)\n            .subscribe(() => {\n                saveAction.filter = this.processFilter;\n                this.filterHasBeenChanged = false;\n                this.action.emit(saveAction);\n            });\n    }\n\n    /**\n     * Delete a process instance filter\n     */\n    delete(deleteAction: ProcessFilterAction) {\n        this.processFilterCloudService\n            .deleteFilter(this.processFilter)\n            .pipe(\n                filter((filters) => {\n                    deleteAction.filter = this.processFilter;\n                    this.action.emit(deleteAction);\n                    return filters.length === 0;\n                }),\n                switchMap(() => this.restoreDefaultProcessFilters()))\n            .subscribe(() => {});\n    }\n\n    /**\n     * Save As a process instance filter\n     */\n    saveAs(saveAsAction: ProcessFilterAction) {\n        const dialogRef = this.dialog.open(ProcessFilterDialogCloudComponent, {\n            data: {\n                name: this.translateService.instant(this.processFilter.name)\n            },\n            height: 'auto',\n            minWidth: '30%'\n        });\n        dialogRef.afterClosed().subscribe((result) => {\n            if (result && result.action === ProcessFilterDialogCloudComponent.ACTION_SAVE) {\n                const filterId = Math.random().toString(36).substr(2, 9);\n                const filterKey = this.getSanitizeFilterName(result.name);\n                const newFilter = {\n                    name: result.name,\n                    icon: result.icon,\n                    id: filterId,\n                    key: 'custom-' + filterKey\n                };\n                const resultFilter: ProcessFilterCloudModel = Object.assign({}, this.processFilter, newFilter);\n                this.processFilterCloudService\n                    .addFilter(resultFilter)\n                    .subscribe(() => {\n                        saveAsAction.filter = resultFilter;\n                        this.filterHasBeenChanged = false;\n                        this.action.emit(saveAsAction);\n                    });\n            }\n        });\n    }\n\n    /**\n     * Return filter name\n     * @param filterName\n     */\n    getSanitizeFilterName(filterName: string): string {\n        const nameWithHyphen = this.replaceSpaceWithHyphen(filterName.trim());\n        return nameWithHyphen.toLowerCase();\n    }\n\n    /**\n     * Return name with hyphen\n     * @param name\n     */\n    replaceSpaceWithHyphen(name: string): string {\n        const regExt = new RegExp(' ', 'g');\n        return name.replace(regExt, '-');\n    }\n\n    restoreDefaultProcessFilters(): Observable<ProcessFilterCloudModel[]> {\n        return this.processFilterCloudService.getProcessFilters(this.appName);\n    }\n\n    onExpand() {\n        this.toggleFilterActions = true;\n    }\n\n    onClose() {\n        this.toggleFilterActions = false;\n    }\n\n    isDisabledAction(action: ProcessFilterAction): boolean {\n        return (\n            this.processFilterCloudService.isDefaultFilter(this.processFilter.name) &&\n            this.actionDisabledForDefault.includes(action.actionType)\n        ) ? true : this.hasFilterChanged(action);\n    }\n\n    hasFilterChanged(action: ProcessFilterAction): boolean {\n        return action.actionType === EditProcessFilterCloudComponent.ACTION_SAVE ||\n            action.actionType === EditProcessFilterCloudComponent.ACTION_SAVE_AS ?\n            !this.filterHasBeenChanged : false;\n    }\n\n    private setLastModifiedToFilter(formValues: ProcessFilterCloudModel) {\n        if (formValues.lastModifiedTo && Date.parse(formValues.lastModifiedTo.toString())) {\n            const lastModifiedToFilterValue = moment(formValues.lastModifiedTo);\n            lastModifiedToFilterValue.set({\n                hour: 23,\n                minute: 59,\n                second: 59\n            });\n            formValues.lastModifiedTo = lastModifiedToFilterValue.toDate();\n        }\n    }\n\n    private createFilterActions(): ProcessFilterAction[] {\n        return [\n            {\n                actionType: EditProcessFilterCloudComponent.ACTION_SAVE,\n                icon: 'adf:save',\n                tooltip: 'ADF_CLOUD_EDIT_PROCESS_FILTER.TOOL_TIP.SAVE'\n            },\n            {\n                actionType: EditProcessFilterCloudComponent.ACTION_SAVE_AS,\n                icon: 'adf:save-as',\n                tooltip: 'ADF_CLOUD_EDIT_PROCESS_FILTER.TOOL_TIP.SAVE_AS'\n            },\n            {\n                actionType: EditProcessFilterCloudComponent.ACTION_DELETE,\n                icon: 'delete',\n                tooltip: 'ADF_CLOUD_EDIT_PROCESS_FILTER.TOOL_TIP.DELETE'\n            }\n        ];\n    }\n\n    private createLastModifiedProperty(filterModel: ProcessFilterCloudModel): ProcessFilterProperties[] {\n        let lastModifiedFrom;\n        let lastModifiedTo;\n\n        if (filterModel.lastModifiedFrom) {\n            lastModifiedFrom = moment(filterModel.lastModifiedFrom);\n        }\n\n        if (filterModel.lastModifiedTo) {\n            lastModifiedTo = moment(filterModel.lastModifiedTo);\n        }\n\n        return [\n            {\n                label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.LAST_MODIFIED_DATE_FORM',\n                type: 'date',\n                key: 'lastModifiedFrom',\n                value: lastModifiedFrom\n            },\n            {\n                label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.LAST_MODIFIED_TO',\n                type: 'date',\n                key: 'lastModifiedTo',\n                value: lastModifiedTo\n            }\n        ];\n    }\n\n    private createProcessSortProperties(): ProcessSortFilterProperty[] {\n        return [\n            {\n                label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.ID',\n                key: 'id',\n                value: 'id'\n            },\n            {\n                label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.PROCESS_NAME',\n                key: 'name',\n                value: 'name'\n            },\n            {\n                label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.START_DATE',\n                key: 'startDate',\n                value: 'startDate'\n            },\n            {\n                label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.STATUS',\n                key: 'status',\n                value: 'status'\n            },\n            {\n                label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.STARTED_BY',\n                key: 'initiator',\n                value: 'initiator'\n            },\n            {\n                label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.APP_NAME',\n                key: 'appName',\n                value: 'appName'\n            },\n            {\n                label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.APP_VERSION',\n                key: 'appVersion',\n                value: 'appVersion'\n            },\n            {\n                label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.PROCESS_INS_ID',\n                key: 'processInstanceId',\n                value: 'processInstanceId'\n            },\n            {\n                label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.PROCESS_DEF_ID',\n                key: 'processDefinitionId',\n                value: 'processDefinitionId'\n            },\n            {\n                label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.PROCESS_DEF_NAME',\n                key: 'processDefinitionName',\n                value: 'processDefinitionName'\n            },\n            {\n                label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.PROCESS_DEF_KEY',\n                key: 'processDefinitionKey',\n                value: 'processDefinitionKey'\n            },\n            {\n                label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.LAST_MODIFIED',\n                key: 'lastModified',\n                value: 'lastModified'\n            },\n            {\n                label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.BUSINESS_KEY',\n                key: 'businessKey',\n                value: 'businessKey'\n            }\n        ];\n    }\n\n    private isFilterChanged(oldValue: ProcessFilterCloudModel, newValue: ProcessFilterCloudModel): boolean {\n        const oldJson = JSON.stringify(\n            this.processFilterCloudService.writeQueryParams(oldValue || {}, this.filterProperties)\n        );\n        const newJson = JSON.stringify(\n            this.processFilterCloudService.writeQueryParams(newValue || {}, this.filterProperties)\n        );\n\n        return oldJson !== newJson;\n    }\n\n    private createProcessFilterProperties(filterModel: ProcessFilterCloudModel): ProcessFilterProperties[] {\n        const appVersionMultiple = [];\n\n        if (filterModel.appVersion) {\n            appVersionMultiple.push(\n                Array.isArray(filterModel.appVersion)\n                    ? filterModel.appVersion.map(entry => entry.toString())\n                    : `${filterModel.appVersion}`\n            );\n        }\n\n        return [\n            {\n                label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.APP_NAME',\n                type: 'select',\n                key: 'appName',\n                value: filterModel.appName || '',\n                options: this.applicationNames\n            },\n            {\n                label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.APP_VERSION',\n                type: 'number',\n                key: 'appVersion',\n                value: filterModel.appVersion\n            },\n            {\n                label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.APP_VERSION',\n                type: 'multi-select',\n                key: 'appVersionMultiple',\n                value: appVersionMultiple,\n                options: this.appVersionOptions\n            },\n            {\n                label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.PROCESS_INS_ID',\n                type: 'text',\n                key: 'processInstanceId',\n                value: filterModel.processInstanceId || ''\n            },\n            {\n                label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.PROCESS_NAME',\n                type: 'text',\n                key: 'processName',\n                value: filterModel.processName || ''\n            },\n            {\n                label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.PROCESS_DEF_NAME',\n                type: 'select',\n                key: 'processDefinitionName',\n                value: filterModel.processDefinitionName || '',\n                options: this.processDefinitionNames\n            },\n            {\n                label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.STATUS',\n                type: 'select',\n                key: 'status',\n                value: filterModel.status || this.status[0].value,\n                options: this.status\n            },\n            {\n                label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.PROCESS_DEF_ID',\n                type: 'text',\n                key: 'processDefinitionId',\n                value: filterModel.processDefinitionId || ''\n            },\n            {\n                label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.PROCESS_DEF_KEY',\n                type: 'text',\n                key: 'processDefinitionKey',\n                value: filterModel.processDefinitionKey || ''\n            },\n            {\n                label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.SORT',\n                type: 'select',\n                key: 'sort',\n                value: filterModel.sort || this.createSortProperties[0].value,\n                options: this.createSortProperties\n            },\n            {\n                label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.DIRECTION',\n                type: 'select',\n                key: 'order',\n                value: filterModel.order || this.directions[0].value,\n                options: this.directions\n            },\n            {\n                label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.COMPLETED_DATE',\n                type: 'date',\n                key: 'completedDate',\n                value: filterModel.completedDate || false\n            },\n            {\n                label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.STARTED_BY',\n                type: 'people',\n                key: 'initiator',\n                value: filterModel.initiator,\n                selectionMode: 'multiple'\n            },\n            {\n                label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.COMPLETED_DATE',\n                type: 'date-range',\n                key: 'completedDateRange',\n                attributes: { dateType: 'completedDateType', from: '_completedFrom', to: '_completedTo'},\n                value: {\n                    completedDateType: filterModel.completedDateType || null,\n                    _completedFrom: filterModel.completedFrom || null,\n                    _completedTo: filterModel.completedTo || null\n                }\n            },\n            {\n                label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.STARTED_DATE',\n                type: 'date-range',\n                key: 'startedDateRange',\n                attributes: { dateType: 'startedDateType', from: '_startFrom', to: '_startTo'},\n                value: {\n                    startedDateType: filterModel.startedDateType || null,\n                    _startFrom: filterModel.startFrom || null,\n                    _startTo: filterModel.startTo || null\n                }\n            },\n            {\n                label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.SUSPENDED_DATE',\n                type: 'date-range',\n                key: 'suspendedDateRange',\n                attributes: { dateType: 'suspendedDateType', from: '_suspendedFrom', to: '_suspendedTo'},\n                value: {\n                    suspendedDateType: filterModel.suspendedDateType || null,\n                    _suspendedFrom: filterModel.suspendedFrom || null,\n                    _suspendedTo: filterModel.suspendedTo || null\n                }\n            }\n        ];\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { ProcessFiltersCloudComponent } from './components/process-filters-cloud.component';\nimport { MaterialModule } from '../../material.module';\nimport { CoreModule, MomentDateAdapter, MOMENT_DATE_FORMATS } from '@alfresco/adf-core';\nimport { HttpClientModule } from '@angular/common/http';\nimport { EditProcessFilterCloudComponent } from './components/edit-process-filter-cloud.component';\nimport { ProcessFilterDialogCloudComponent } from './components/process-filter-dialog-cloud.component';\nimport { AppListCloudModule } from './../../app/app-list-cloud.module';\nimport { DateAdapter, MAT_DATE_FORMATS } from '@angular/material/core';\nimport { ProcessCommonModule } from '../../common/process-common.module';\nimport { PeopleCloudModule } from '../../people/people-cloud.module';\n\n@NgModule({\n    imports: [\n        FormsModule,\n        ReactiveFormsModule,\n        HttpClientModule,\n        CommonModule,\n        FlexLayoutModule,\n        MaterialModule,\n        AppListCloudModule,\n        CoreModule,\n        ProcessCommonModule,\n        PeopleCloudModule\n    ],\n    declarations: [ProcessFiltersCloudComponent, EditProcessFilterCloudComponent, ProcessFilterDialogCloudComponent],\n    exports: [ProcessFiltersCloudComponent, EditProcessFilterCloudComponent, ProcessFilterDialogCloudComponent],\n    providers: [\n        { provide: DateAdapter, useClass: MomentDateAdapter },\n        { provide: MAT_DATE_FORMATS, useValue: MOMENT_DATE_FORMATS }\n    ]\n})\nexport class ProcessFiltersCloudModule { }\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Injectable } from '@angular/core';\nimport { AlfrescoApiService, AppConfigService, LogService } from '@alfresco/adf-core';\nimport { ProcessQueryCloudRequestModel } from '../models/process-cloud-query-request.model';\nimport { Observable, throwError } from 'rxjs';\nimport { ProcessListCloudSortingModel } from '../models/process-list-sorting.model';\nimport { BaseCloudService } from '../../../services/base-cloud.service';\nimport { map } from 'rxjs/operators';\n\n@Injectable({ providedIn: 'root' })\nexport class ProcessListCloudService extends BaseCloudService {\n\n    constructor(apiService: AlfrescoApiService,\n                appConfigService: AppConfigService,\n                private logService: LogService) {\n        super(apiService, appConfigService);\n    }\n\n    /**\n     * Finds a process using an object with optional query properties.\n     * @param requestNode Query object\n     * @param queryUrl Query url\n     * @returns Process information\n     */\n    getProcessByRequest(requestNode: ProcessQueryCloudRequestModel, queryUrl?: string): Observable<any> {\n        if (requestNode.appName || requestNode.appName === '') {\n            queryUrl = queryUrl || `${this.getBasePath(requestNode.appName)}/query/v1/process-instances`;\n            const queryParams = this.buildQueryParams(requestNode);\n            const sortingParams = this.buildSortingParam(requestNode.sorting);\n            if (sortingParams) {\n                queryParams['sort'] = sortingParams;\n            }\n\n            return this.get(queryUrl, queryParams).pipe(\n                map((response: any) => {\n                    const entries = response.list && response.list.entries;\n                    if (entries) {\n                        response.list.entries = entries.map((entryData) => {\n                            return entryData.entry;\n                        });\n                    }\n                    return response;\n                })\n            );\n        } else {\n            this.logService.error('Appname is mandatory for querying task');\n            return throwError('Appname not configured');\n        }\n    }\n\n    protected isPropertyValueValid(requestNode: any, property: string): boolean {\n        return requestNode[property] !== '' && requestNode[property] !== null && requestNode[property] !== undefined;\n    }\n\n    protected buildQueryParams(requestNode: ProcessQueryCloudRequestModel): Object {\n        const queryParam = {};\n\n        for (const property in requestNode) {\n            if (requestNode.hasOwnProperty(property) &&\n                !this.isExcludedField(property) &&\n                this.isPropertyValueValid(requestNode, property)) {\n                queryParam[property] = requestNode[property];\n            }\n        }\n\n        if (!queryParam['status']) {\n            queryParam['status'] = this.buildFilterForAllStatus();\n        }\n\n        return queryParam;\n    }\n\n    protected buildFilterForAllStatus(): string[] {\n        return ['RUNNING', 'SUSPENDED', 'CANCELLED', 'COMPLETED'];\n    }\n\n    protected isExcludedField(property: string): boolean {\n        return property === 'appName' || property === 'sorting';\n    }\n\n    protected buildSortingParam(models: ProcessListCloudSortingModel[]): string {\n        let finalSorting: string = '';\n        if (models) {\n            for (const sort of models) {\n                if (!finalSorting) {\n                    finalSorting = `${sort.orderBy},${sort.direction}`;\n                } else {\n                    finalSorting = `${finalSorting}&${sort.orderBy},${sort.direction}`;\n                }\n            }\n        }\n        return encodeURI(finalSorting);\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport let processCloudPresetsDefaultModel = {\n    'default': [\n        {\n            'key': 'name',\n            'type': 'text',\n            'title': 'ADF_CLOUD_PROCESS_LIST.PROPERTIES.NAME',\n            'sortable': true\n        },\n        {\n            'key': 'startDate',\n            'type': 'date',\n            'title': 'ADF_CLOUD_PROCESS_LIST.PROPERTIES.START_DATE',\n            'cssClass': 'hidden',\n            'sortable': true,\n            'format': 'timeAgo'\n        }\n    ]\n};\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ProcessListCloudSortingModel } from './process-list-sorting.model';\n\nexport class ProcessQueryCloudRequestModel {\n   appName: string;\n   appVersion?: number | string;\n   initiator?: null;\n   id?: string;\n   name?: string;\n   processDefinitionId?: string;\n   processDefinitionName?: string;\n   processDefinitionKey?: string;\n   status?: string;\n   startDate?: string;\n   businessKey?: string;\n   lastModified?: string;\n   lastModifiedTo?: string;\n   lastModifiedFrom?: string;\n   startFrom?: string;\n   startTo?: string;\n   completedFrom?: string;\n   completedTo?: string;\n   suspendedFrom?: string;\n   suspendedTo?: string;\n   completedDate?: string;\n   maxItems: number;\n   skipCount: number;\n   sorting?: ProcessListCloudSortingModel[];\n    constructor(obj?: any) {\n       if (obj) {\n           this.appName = obj.appName;\n           this.appVersion = obj.appVersion;\n           this.initiator = obj.initiator;\n           this.id = obj.id;\n           this.name = obj.name;\n           this.processDefinitionId = obj.processDefinitionId;\n           this.processDefinitionName = obj.processDefinitionName;\n           this.processDefinitionKey = obj.processDefinitionKey;\n           this.status = obj.status;\n           this.startDate = obj.startDate;\n           this.businessKey = obj.businessKey;\n           this.lastModified = obj.lastModified;\n           this.lastModifiedTo = obj.lastModifiedTo;\n           this.lastModifiedFrom = obj.lastModifiedFrom;\n           this.startFrom = obj.startFrom;\n           this.startTo = obj.startTo;\n           this.completedFrom = obj.completedFrom;\n           this.completedTo = obj.completedTo;\n           this.suspendedFrom = obj.suspendedFrom;\n           this.suspendedTo = obj.suspendedTo;\n           this.completedDate = obj.completedDate;\n           this.maxItems = obj.maxItems;\n           this.skipCount = obj.skipCount;\n           this.sorting = obj.sorting;\n       }\n   }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport class ProcessListCloudSortingModel {\n    orderBy: string;\n    direction: string;\n     constructor(obj: any) {\n        if (obj) {\n            this.orderBy = obj.orderBy;\n            this.direction = obj.direction;\n        }\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, ViewEncapsulation, OnChanges, AfterContentInit, ContentChild, Output, EventEmitter, SimpleChanges, Input, ViewChild } from '@angular/core';\nimport { DataTableSchema, PaginatedComponent,\n         CustomEmptyContentTemplateDirective, AppConfigService,\n         UserPreferencesService, PaginationModel,\n         UserPreferenceValues, DataRowEvent, CustomLoadingContentTemplateDirective, DataCellEvent, DataRowActionEvent, DataTableComponent } from '@alfresco/adf-core';\nimport { ProcessListCloudService } from '../services/process-list-cloud.service';\nimport { BehaviorSubject } from 'rxjs';\nimport { processCloudPresetsDefaultModel } from '../models/process-cloud-preset.model';\nimport { ProcessQueryCloudRequestModel } from '../models/process-cloud-query-request.model';\nimport { ProcessListCloudSortingModel } from '../models/process-list-sorting.model';\n\n@Component({\n    selector: 'adf-cloud-process-list',\n    templateUrl: './process-list-cloud.component.html',\n    styleUrls: ['./process-list-cloud.component.scss'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class ProcessListCloudComponent extends DataTableSchema implements OnChanges, AfterContentInit, PaginatedComponent {\n\n    static PRESET_KEY = 'adf-cloud-process-list.presets';\n\n    @ViewChild(DataTableComponent)\n    dataTable: DataTableComponent;\n\n    @ContentChild(CustomEmptyContentTemplateDirective)\n    emptyCustomContent: CustomEmptyContentTemplateDirective;\n\n    @ContentChild(CustomLoadingContentTemplateDirective)\n    customLoadingContent: CustomLoadingContentTemplateDirective;\n\n    /** The name of the application. */\n    @Input()\n    appName: string = '';\n\n    /** The version of the application. */\n    @Input()\n    appVersion: number | number[];\n\n    /** Name of the initiator of the process. */\n    @Input()\n    initiator: string = '';\n\n    /** Filter the processes to display only the ones with this ID. */\n    @Input()\n    id: string = '';\n\n    /** Filter the processes to display only the ones with this name. */\n    @Input()\n    name: string = '';\n\n    /** Filter the processes to display only the ones with this process definition ID. */\n    @Input()\n    processDefinitionId: string = '';\n\n    /** Filter the processes to display only the ones with this process definition name. */\n    @Input()\n    processDefinitionName: string = '';\n\n    /** Filter the processes to display only the ones with this process definition key. */\n    @Input()\n    processDefinitionKey: string = '';\n\n    /** Filter the processes to display only the ones with this status. */\n    @Input()\n    status: string = '';\n\n    /** Filter the processes to display only the ones with this businessKey value. */\n    @Input()\n    businessKey: string = '';\n\n    /** Filter the processes. Display only process with lastModifiedTo equal to the supplied date. */\n    @Input()\n    lastModifiedFrom: Date;\n\n    /** Filter the processes. Display only process with lastModifiedTo equal to the supplied date. */\n    @Input()\n    lastModifiedTo: Date;\n\n    /** Filter the processes. Display only process with startedDate greater then the supplied date. */\n    @Input()\n    startFrom: string = '';\n\n    /** Filter the processes. Display only process with startedDate less than the supplied date. */\n    @Input()\n    startTo: string = '';\n\n    /** Filter the processes. Display only process with completedFrom equal to the supplied date. */\n    @Input()\n    completedFrom: string = '';\n\n    /** Filter the processes. Display only process with completedTo equal to the supplied date. */\n    @Input()\n    completedTo: string = '';\n\n    /** Filter the processes. Display only process with completedDate equal to the supplied date. */\n    @Input()\n    completedDate: string = '';\n\n    /** Filter the processes. Display only process with suspendedFrom equal to the supplied date. */\n    @Input()\n    suspendedFrom: string = '';\n\n    /** Filter the processes. Display only process with suspendedTo equal to the supplied date. */\n    @Input()\n    suspendedTo: string = '';\n\n    /**\n     * Row selection mode. Can be \"none\", \"single\" or \"multiple\".\n     * For multiple mode, you can use Cmd (macOS) or Ctrl (Win) modifier\n     * key to toggle selection for multiple rows.\n     */\n    @Input()\n    selectionMode: string = 'single'; // none|single|multiple\n\n    /** Toggles multiple row selection and renders checkboxes at the beginning of each row */\n    @Input()\n    multiselect: boolean = false;\n\n    /**\n     * Array of objects specifying the sort order and direction for the\n     * list. The sort parameters are for BE sorting.\n     */\n    @Input()\n    sorting: ProcessListCloudSortingModel[];\n\n    /** Toggles the data actions column. */\n    @Input()\n    showActions: boolean = false;\n\n    /** Position of the actions dropdown menu. Can be \"left\" or \"right\". */\n    @Input()\n    actionsPosition: string = 'right'; // left|right\n\n    /** Toggles the sticky header mode. */\n    @Input()\n    stickyHeader: boolean = false;\n\n    /** Toggles custom context menu for the component. */\n    @Input()\n    showContextMenu: boolean = false;\n\n    /** Emitted when a row in the process list is clicked. */\n    @Output()\n    rowClick: EventEmitter<string> = new EventEmitter<string>();\n\n    /** Emitted when rows are selected/unselected. */\n    @Output()\n    rowsSelected: EventEmitter<any[]> = new EventEmitter<any[]>();\n\n    /** Emitted before the context menu is displayed for a row. */\n    @Output()\n    showRowContextMenu = new EventEmitter<DataCellEvent>();\n\n    /** Emitted before the actions menu is displayed for a row. */\n    @Output()\n    showRowActionsMenu = new EventEmitter<DataCellEvent>();\n\n    /** Emitted when the user executes a row action. */\n    @Output()\n    executeRowAction = new EventEmitter<DataRowActionEvent>();\n\n    /** Emitted when an error occurs while loading the list of process instances from the server. */\n    @Output()\n    error: EventEmitter<any> = new EventEmitter<any>();\n\n    /** Emitted when the list of process instances has been loaded successfully from the server. */\n    @Output()\n    success: EventEmitter<any> = new EventEmitter<any>();\n\n    pagination: BehaviorSubject<PaginationModel>;\n    size: number;\n    skipCount: number = 0;\n    currentInstanceId: string;\n    selectedInstances: any[];\n    isLoading = true;\n    rows: any[] = [];\n    formattedSorting: any[];\n    requestNode: ProcessQueryCloudRequestModel;\n    private defaultSorting = { key: 'startDate', direction: 'desc' };\n\n    constructor(private processListCloudService: ProcessListCloudService,\n                appConfigService: AppConfigService,\n                private userPreferences: UserPreferencesService) {\n        super(appConfigService, ProcessListCloudComponent.PRESET_KEY, processCloudPresetsDefaultModel);\n        this.size = userPreferences.paginationSize;\n        this.userPreferences.select(UserPreferenceValues.PaginationSize).subscribe((pageSize) => {\n            this.size = pageSize;\n        });\n        this.pagination = new BehaviorSubject<PaginationModel>(<PaginationModel> {\n            maxItems: this.size,\n            skipCount: 0,\n            totalItems: 0\n        });\n    }\n\n    ngAfterContentInit() {\n        this.createDatatableSchema();\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (this.isPropertyChanged(changes, 'sorting')) {\n            this.formatSorting(changes['sorting'].currentValue);\n        }\n        if (this.isAnyPropertyChanged(changes)) {\n            this.reload();\n        }\n    }\n\n    getCurrentId(): string {\n        return this.currentInstanceId;\n    }\n\n    reload() {\n        this.requestNode = this.createRequestNode();\n        if (this.requestNode.appName || this.requestNode.appName === '') {\n            this.load(this.requestNode);\n        } else {\n            this.rows = [];\n        }\n    }\n\n    private load(requestNode: ProcessQueryCloudRequestModel) {\n        this.isLoading = true;\n        this.processListCloudService.getProcessByRequest(requestNode).subscribe(\n            (processes) => {\n                this.rows = processes.list.entries;\n                this.success.emit(processes);\n                this.isLoading = false;\n                this.pagination.next(processes.list.pagination);\n            }, (error) => {\n                this.error.emit(error);\n                this.isLoading = false;\n            });\n    }\n\n    private isAnyPropertyChanged(changes: SimpleChanges): boolean {\n        for (const property in changes) {\n            if (this.isPropertyChanged(changes, property)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    private isPropertyChanged(changes: SimpleChanges, property: string): boolean {\n        return changes.hasOwnProperty(property);\n    }\n\n    isListEmpty(): boolean {\n        return !this.rows || this.rows.length === 0;\n    }\n\n    /**\n     * Resets the pagination values\n     */\n    resetPagination() {\n        this.skipCount = 0;\n        this.size = this.userPreferences.paginationSize;\n        this.pagination.next({\n            skipCount: 0,\n            maxItems: this.size\n        });\n    }\n\n    /**\n     * Resets the pagination values and\n     * Reloads the process list\n     * @param pagination Pagination values to be set\n     */\n    updatePagination(pagination: PaginationModel) {\n        this.size = pagination.maxItems;\n        this.skipCount = pagination.skipCount;\n        this.pagination.next(pagination);\n        this.reload();\n    }\n\n    onSortingChanged(event: CustomEvent) {\n        this.setSorting(event.detail);\n        this.formatSorting(this.sorting);\n        this.reload();\n    }\n\n    onRowClick(item: DataRowEvent) {\n        this.currentInstanceId = item.value.getValue('id');\n        this.rowClick.emit(this.currentInstanceId);\n    }\n\n    onRowSelect(event: CustomEvent) {\n        this.selectedInstances = [...event.detail.selection];\n        this.rowsSelected.emit(this.selectedInstances);\n    }\n\n    onRowUnselect(event: CustomEvent) {\n        this.selectedInstances = [...event.detail.selection];\n        this.rowsSelected.emit(this.selectedInstances);\n    }\n\n    onRowKeyUp(event: CustomEvent) {\n        if (event.detail.keyboardEvent.key === 'Enter') {\n            event.preventDefault();\n            this.currentInstanceId = event.detail.row.getValue('id');\n            this.rowClick.emit(this.currentInstanceId);\n        }\n    }\n\n    onShowRowActionsMenu(event: DataCellEvent) {\n        this.showRowActionsMenu.emit(event);\n    }\n\n    onShowRowContextMenu(event: DataCellEvent) {\n        this.showRowContextMenu.emit(event);\n    }\n\n    onExecuteRowAction(row: DataRowActionEvent) {\n        this.executeRowAction.emit(row);\n    }\n\n    private createRequestNode(): ProcessQueryCloudRequestModel {\n        const requestNode = {\n            appName: this.appName,\n            appVersion: this.getAppVersions(),\n            maxItems: this.size,\n            skipCount: this.skipCount,\n            initiator: this.initiator,\n            id: this.id,\n            name: this.name,\n            processDefinitionId: this.processDefinitionId,\n            processDefinitionName: this.processDefinitionName,\n            processDefinitionKey: this.processDefinitionKey,\n            status: this.status,\n            businessKey: this.businessKey,\n            lastModifiedFrom: this.lastModifiedFrom,\n            lastModifiedTo: this.lastModifiedTo,\n            startFrom: this.startFrom,\n            startTo: this.startTo,\n            completedFrom: this.completedFrom,\n            completedTo: this.completedTo,\n            suspendedFrom: this.suspendedFrom,\n            suspendedTo: this.suspendedTo,\n            completedDate: this.completedDate,\n            sorting: this.sorting\n        };\n        return new ProcessQueryCloudRequestModel(requestNode);\n    }\n\n    getAppVersions(): string {\n        return this.appVersion instanceof Array ? this.appVersion.join(',') : (this.appVersion ? String(this.appVersion) : '');\n    }\n\n    setSorting(sortDetail) {\n        const sorting = sortDetail ? {\n            orderBy: sortDetail.key,\n            direction: sortDetail.direction.toUpperCase()\n        } : { ... this.defaultSorting };\n        this.sorting = [new ProcessListCloudSortingModel(sorting)];\n    }\n\n    formatSorting(sorting: ProcessListCloudSortingModel[]) {\n        this.formattedSorting = this.isValidSorting(sorting) ? [\n            sorting[0].orderBy,\n            sorting[0].direction.toLocaleLowerCase()\n        ] : null;\n    }\n\n    isValidSorting(sorting: ProcessListCloudSortingModel[]) {\n        return sorting.length && sorting[0].orderBy && sorting[0].direction;\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ProcessListCloudComponent } from './components/process-list-cloud.component';\nimport { MaterialModule } from '../../material.module';\nimport { CoreModule } from '@alfresco/adf-core';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        MaterialModule,\n        CoreModule\n\n    ],\n    declarations: [ProcessListCloudComponent],\n    exports: [ProcessListCloudComponent]\n})\nexport class ProcessListCloudModule { }\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AlfrescoApiService, AppConfigService, LogService } from '@alfresco/adf-core';\nimport { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { ProcessInstanceCloud } from '../models/process-instance-cloud.model';\nimport { ProcessPayloadCloud } from '../models/process-payload-cloud.model';\nimport { ProcessDefinitionCloud } from '../../../models/process-definition-cloud.model';\nimport { BaseCloudService } from '../../../services/base-cloud.service';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class StartProcessCloudService extends BaseCloudService {\n\n    constructor(apiService: AlfrescoApiService,\n                private logService: LogService,\n                appConfigService: AppConfigService) {\n        super(apiService, appConfigService);\n    }\n\n    /**\n     * Gets the process definitions associated with an app.\n     * @param appName Name of the target app\n     * @returns Array of process definitions\n     */\n    getProcessDefinitions(appName: string): Observable<ProcessDefinitionCloud[]> {\n        if (appName || appName === '') {\n            const url = `${this.getBasePath(appName)}/rb/v1/process-definitions`;\n\n            return this.get(url).pipe(\n                map((res: any) => {\n                    return res.list.entries.map((processDefs) => new ProcessDefinitionCloud(processDefs.entry));\n                })\n            );\n        } else {\n            this.logService.error('AppName is mandatory for querying task');\n            return throwError('AppName not configured');\n        }\n    }\n\n    /**\n     * Create a process based on a process definition, name, form values or variables.\n     * @param appName name of the Application\n     * @param payload Details of the process (definition key, name, variables, etc)\n     * @returns Details of the process instance just created\n     */\n    createProcess(appName: string, payload: ProcessPayloadCloud): Observable<ProcessInstanceCloud> {\n        const url = `${this.getBasePath(appName)}/rb/v1/process-instances/create`;\n        payload.payloadType = 'CreateProcessInstancePayload';\n\n        return this.post(url, payload).pipe(\n            map((result: any) => result.entry)\n        );\n    }\n\n    /**\n     * Starts an already created process using the process instance id.\n     * @param createdProcessInstanceId process instance id of the process previously created\n     * @returns Details of the process instance just started\n     */\n    startCreatedProcess(appName: string, createdProcessInstanceId: string, payload: ProcessPayloadCloud): Observable<ProcessInstanceCloud> {\n        const url = `${this.getBasePath(appName)}/rb/v1/process-instances/${createdProcessInstanceId}/start`;\n\n        return this.post(url, payload).pipe(\n            map((result: any) => result.entry)\n        );\n    }\n\n    /**\n     * Starts a process based on a process definition, name, form values or variables.\n     * @param appName name of the Application\n     * @param payload Details of the process (definition key, name, variables, etc)\n     * @returns Details of the process instance just started\n     */\n    startProcess(appName: string, payload: ProcessPayloadCloud): Observable<ProcessInstanceCloud> {\n        const url = `${this.getBasePath(appName)}/rb/v1/process-instances`;\n        payload.payloadType = 'StartProcessPayload';\n\n        return this.post(url, payload);\n    }\n\n    /**\n     * Update an existing process instance\n     * @param appName name of the Application\n     * @param processInstanceId process instance to update\n     * @param payload Details of the process (definition key, name, variables, etc)\n     * @returns Details of the process instance just started\n     */\n    updateProcess(appName: string, processInstanceId: string, payload: ProcessPayloadCloud): Observable<ProcessInstanceCloud> {\n        const url = `${this.getBasePath(appName)}/rb/v1/process-instances/${processInstanceId}`;\n        payload.payloadType = 'UpdateProcessPayload';\n\n        return this.put(url, payload).pipe(\n            map((processInstance: any) => processInstance.entry)\n        );\n    }\n\n    /**\n     * Delete an existing process instance\n     * @param appName name of the Application\n     * @param processInstanceId process instance to update\n     */\n    deleteProcess(appName: string, processInstanceId: string): Observable<void> {\n        const url = `${this.getBasePath(appName)}/rb/v1/process-instances/${processInstanceId}`;\n\n        return this.delete(url);\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport class ProcessPayloadCloud {\n    processDefinitionKey: string;\n    name: string;\n    businessKey: string;\n    variables: {};\n    payloadType: string = 'StartProcessPayload';\n\n    constructor(obj?: any) {\n        this.processDefinitionKey = obj && obj.processDefinitionKey ? obj.processDefinitionKey : null;\n        this.name = obj && obj.name ? obj.name : null;\n        this.businessKey = obj && obj.businessKey ? obj.businessKey : null;\n        this.variables = obj && obj.variables ? obj.variables : {};\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Pipe, PipeTransform } from '@angular/core';\nimport moment from 'moment-es6';\nimport { LocalizedDatePipe } from '@alfresco/adf-core';\nimport { ProcessInstanceCloud } from '../process/start-process/models/process-instance-cloud.model';\n\n@Pipe({ name: 'processNameCloud' })\nexport class ProcessNameCloudPipe implements PipeTransform {\n    static DATE_TIME_IDENTIFIER_REG_EXP = new RegExp('%{datetime}', 'i');\n    static PROCESS_DEFINITION_IDENTIFIER_REG_EXP = new RegExp('%{processdefinition}', 'i');\n\n    constructor(private localizedDatePipe: LocalizedDatePipe) {\n    }\n\n    transform(processNameFormat: string, processInstance?: ProcessInstanceCloud): string {\n        let processName = processNameFormat;\n        if (processName.match(ProcessNameCloudPipe.DATE_TIME_IDENTIFIER_REG_EXP)) {\n            const presentDateTime = moment.now();\n            processName = processName.replace(\n                ProcessNameCloudPipe.DATE_TIME_IDENTIFIER_REG_EXP,\n                this.localizedDatePipe.transform(presentDateTime, 'medium')\n            );\n        }\n\n        if (processName.match(ProcessNameCloudPipe.PROCESS_DEFINITION_IDENTIFIER_REG_EXP)) {\n            const selectedProcessDefinitionName = processInstance ? processInstance.processDefinitionName : '';\n            processName = processName.replace(\n                ProcessNameCloudPipe.PROCESS_DEFINITION_IDENTIFIER_REG_EXP,\n                selectedProcessDefinitionName\n            );\n        }\n        return processName;\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n    Component, EventEmitter, Input, OnChanges, OnInit,\n    Output, SimpleChanges, ViewChild, ViewEncapsulation, OnDestroy, HostListener\n} from '@angular/core';\n\nimport { ProcessInstanceCloud } from '../models/process-instance-cloud.model';\nimport { StartProcessCloudService } from '../services/start-process-cloud.service';\nimport { FormControl, Validators, FormGroup, AbstractControl, FormBuilder, ValidatorFn } from '@angular/forms';\nimport { FormModel, ContentLinkModel } from '@alfresco/adf-core';\nimport { MatAutocompleteTrigger } from '@angular/material/autocomplete';\nimport { ProcessPayloadCloud } from '../models/process-payload-cloud.model';\nimport { debounceTime, takeUntil, switchMap, filter, distinctUntilChanged, tap } from 'rxjs/operators';\nimport { ProcessDefinitionCloud } from '../../../models/process-definition-cloud.model';\nimport { Subject, Observable } from 'rxjs';\nimport { TaskVariableCloud } from '../../../form/models/task-variable-cloud.model';\nimport { ProcessNameCloudPipe } from '../../../pipes/process-name-cloud.pipe';\n@Component({\n    selector: 'adf-cloud-start-process',\n    templateUrl: './start-process-cloud.component.html',\n    styleUrls: ['./start-process-cloud.component.scss'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class StartProcessCloudComponent implements OnChanges, OnInit, OnDestroy {\n\n    static MAX_NAME_LENGTH: number = 255;\n    static PROCESS_DEFINITION_DEBOUNCE: number = 300;\n    static PROCESS_FORM_DEBOUNCE: number = 400;\n\n    @ViewChild(MatAutocompleteTrigger)\n    inputAutocomplete: MatAutocompleteTrigger;\n\n    /** (required) Name of the app. */\n    @Input()\n    appName: string = '';\n\n    /** Maximum length of the process name. */\n    @Input()\n    maxNameLength: number = StartProcessCloudComponent.MAX_NAME_LENGTH;\n\n    /** Name of the process. */\n    @Input()\n    name: string = '';\n\n    /** Name of the process definition. */\n    @Input()\n    processDefinitionName: string;\n\n    /** Variables to attach to the payload. */\n    @Input()\n    variables: {};\n\n    /** Parameter to pass form field values in the start form if one is associated. */\n    @Input()\n    values: TaskVariableCloud[];\n\n    /** Show/hide the process dropdown list. */\n    @Input()\n    showSelectProcessDropdown: boolean = true;\n\n    /** Emitted when the process is successfully started. */\n    @Output()\n    success = new EventEmitter<ProcessInstanceCloud>();\n\n    /** Emitted when the starting process is cancelled */\n    @Output()\n    cancel = new EventEmitter<ProcessInstanceCloud>();\n\n    /** Emitted when an error occurs. */\n    @Output()\n    error = new EventEmitter<ProcessInstanceCloud>();\n\n    /** Emitted when form content is clicked. */\n    @Output()\n    formContentClicked: EventEmitter<ContentLinkModel> = new EventEmitter();\n\n    /** Emitted when process definition selection changes. */\n    @Output()\n    processDefinitionSelection: EventEmitter<ProcessDefinitionCloud> = new EventEmitter<ProcessDefinitionCloud>();\n\n    processDefinitionList: ProcessDefinitionCloud[] = [];\n    processDefinitionCurrent: ProcessDefinitionCloud;\n    errorMessageId: string = '';\n    processForm: FormGroup;\n    processPayloadCloud = new ProcessPayloadCloud();\n    filteredProcesses: ProcessDefinitionCloud[] = [];\n    isLoading = false;\n    isFormCloudLoaded = false;\n    formCloud: FormModel;\n    currentCreatedProcess: ProcessInstanceCloud;\n    disableStartButton: boolean = true;\n\n    protected onDestroy$ = new Subject<boolean>();\n    processDefinitionLoaded = false;\n\n    constructor(private startProcessCloudService: StartProcessCloudService,\n                private formBuilder: FormBuilder,\n                private processNameCloudPipe: ProcessNameCloudPipe) {\n    }\n\n    ngOnInit() {\n        this.processForm = this.formBuilder.group({\n            processInstanceName: new FormControl('', [Validators.required, Validators.maxLength(this.getMaxNameLength()), Validators.pattern('^[^\\\\s]+(\\\\s+[^\\\\s]+)*$')]),\n            processDefinition: new FormControl(this.processDefinitionName, [Validators.required, this.processDefinitionNameValidator()])\n        });\n\n        this.processDefinition.valueChanges\n            .pipe(debounceTime(StartProcessCloudComponent.PROCESS_DEFINITION_DEBOUNCE))\n            .pipe(takeUntil(this.onDestroy$))\n            .subscribe((processDefinitionName) => {\n                this.selectProcessDefinitionByProcesDefinitionName(processDefinitionName);\n            });\n\n        this.processForm.valueChanges\n            .pipe(\n                debounceTime(StartProcessCloudComponent.PROCESS_FORM_DEBOUNCE),\n                tap(() => this.disableStartButton = true),\n                distinctUntilChanged(),\n                filter(() => this.isProcessSelectionValid()),\n                switchMap(() => this.generateProcessInstance())\n            ).pipe(takeUntil(this.onDestroy$))\n            .subscribe((res) => {\n                this.currentCreatedProcess = res;\n                this.disableStartButton = false;\n            });\n\n        if (this.processDefinitionName) {\n            this.processDefinition.setValue(this.processDefinitionName);\n            this.processDefinition.markAsDirty();\n            this.processDefinition.markAsTouched();\n        }\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes['appName'] && changes['appName'].currentValue !== changes['appName'].previousValue) {\n            this.appName = changes['appName'].currentValue;\n\n            if (this.appName || this.appName === '') {\n                this.loadProcessDefinitions();\n            }\n        }\n    }\n\n    @HostListener('keydown', ['$event'])\n    onKeyDown(event: KeyboardEvent) {\n        event.cancelBubble = true;\n    }\n\n    hasForm(): boolean {\n        return this.processDefinitionCurrent && !!this.processDefinitionCurrent.formKey;\n    }\n\n    onFormLoaded(form: FormModel) {\n        this.isFormCloudLoaded = true;\n        this.formCloud = form;\n    }\n\n    private isProcessSelectionValid(): boolean {\n        return this.processForm.valid && this.isProcessPayloadValid();\n    }\n\n    private getMaxNameLength(): number {\n        return this.maxNameLength > StartProcessCloudComponent.MAX_NAME_LENGTH ?\n            StartProcessCloudComponent.MAX_NAME_LENGTH : this.maxNameLength;\n    }\n\n    private generateProcessInstance(): Observable<ProcessInstanceCloud> {\n        const createPayload: ProcessPayloadCloud = new ProcessPayloadCloud({\n            name: this.processInstanceName.value,\n            processDefinitionKey: this.processPayloadCloud.processDefinitionKey\n        });\n\n        if (this.currentCreatedProcess && this.processPayloadCloud.processDefinitionKey === this.currentCreatedProcess.processDefinitionKey) {\n            return this.startProcessCloudService.updateProcess(this.appName, this.currentCreatedProcess.id, createPayload);\n        } else {\n            return this.startProcessCloudService.createProcess(this.appName, createPayload);\n        }\n    }\n\n    private selectProcessDefinitionByProcesDefinitionName(processDefinitionName: string): void {\n        this.filteredProcesses = this.getProcessDefinitionListByNameOrKey(processDefinitionName);\n        if (this.isProcessFormValid() &&\n            this.filteredProcesses && this.filteredProcesses.length === 1) {\n            this.setProcessDefinitionOnForm(this.filteredProcesses[0].name);\n        }\n    }\n\n    setProcessDefinitionOnForm(selectedProcessDefinitionName: string) {\n        this.processDefinitionCurrent = this.filteredProcesses.find((process: ProcessDefinitionCloud) =>\n            process.name === selectedProcessDefinitionName || process.key === selectedProcessDefinitionName);\n\n        this.isFormCloudLoaded = false;\n        this.processPayloadCloud.processDefinitionKey = this.processDefinitionCurrent.key;\n    }\n\n    private getProcessDefinitionListByNameOrKey(processDefinitionName: string): ProcessDefinitionCloud[] {\n        return this.processDefinitionList.filter((processDefinitionCloud) => {\n            return !processDefinitionName || this.getProcessDefinition(processDefinitionCloud, processDefinitionName);\n        });\n    }\n\n    private getProcessIfExists(processDefinition: string): ProcessDefinitionCloud {\n        let matchedProcess = this.processDefinitionList.find((option) => this.getProcessDefinition(option, processDefinition));\n        if (!matchedProcess) {\n            matchedProcess = new ProcessDefinitionCloud();\n        }\n\n        return matchedProcess;\n    }\n\n    private getProcessDefinitionByName(processDefinitionName: string): ProcessDefinitionCloud {\n        const matchedProcess = processDefinitionName ? this.getProcessIfExists(processDefinitionName) : this.processDefinitionList[0];\n        return matchedProcess;\n    }\n\n    private selectDefaultProcessDefinition() {\n        const selectedProcess = this.getProcessDefinitionByName(this.processDefinitionName);\n        if (selectedProcess) {\n            this.processDefinition.setValue(selectedProcess.name);\n            this.processDefinitionSelectionChanged(selectedProcess);\n        }\n    }\n\n    public loadProcessDefinitions() {\n        this.resetErrorMessage();\n\n        this.startProcessCloudService.getProcessDefinitions(this.appName)\n            .pipe(\n                tap(() => this.processDefinitionLoaded = true),\n                takeUntil(this.onDestroy$))\n            .subscribe((processDefinitionRepresentations: ProcessDefinitionCloud[]) => {\n                    this.processDefinitionList = processDefinitionRepresentations;\n                    if (processDefinitionRepresentations.length === 1) {\n                        this.selectDefaultProcessDefinition();\n                    } else if (this.processDefinitionName) {\n                        this.processDefinition.setValue(this.processDefinitionName);\n                    }\n                },\n                () => {\n                    this.errorMessageId = 'ADF_CLOUD_PROCESS_LIST.ADF_CLOUD_START_PROCESS.ERROR.LOAD_PROCESS_DEFS';\n                });\n    }\n\n    private isValidName(name: string): boolean {\n        return !!name;\n    }\n\n    isProcessFormValid(): boolean {\n        if (this.hasForm() && this.isFormCloudLoaded) {\n            return this.formCloud.isValid || this.isLoading;\n        } else {\n            return this.processForm.valid || this.isLoading;\n        }\n    }\n\n    private isProcessPayloadValid(): boolean {\n        return !!this.processPayloadCloud.processDefinitionKey;\n    }\n\n    private getProcessDefinition(processDefinitionCloud: ProcessDefinitionCloud, processDefinitionName: string): boolean {\n        return (this.isValidName(processDefinitionCloud.name) && processDefinitionCloud.name.toLowerCase().includes(processDefinitionName.toLowerCase())) ||\n            (processDefinitionCloud.key && processDefinitionCloud.key.toLowerCase().includes(processDefinitionName.toLowerCase()));\n    }\n\n    isProcessDefinitionsEmpty(): boolean {\n        return this.processDefinitionList.length === 0;\n    }\n\n    buildProcessCloudPayload() {\n        this.processPayloadCloud.name = this.processInstanceName.value;\n        if (this.variables) {\n            this.processPayloadCloud.variables = this.variables;\n        }\n\n        if (this.hasForm()) {\n            this.processPayloadCloud.variables = Object.assign(this.processPayloadCloud.variables, this.formCloud.values);\n        }\n    }\n\n    startProcess() {\n        this.isLoading = true;\n        this.buildProcessCloudPayload();\n        this.startProcessCloudService.startCreatedProcess(this.appName,\n            this.currentCreatedProcess.id,\n            this.processPayloadCloud)\n            .subscribe(\n                (res) => {\n                    this.success.emit(res);\n                    this.isLoading = false;\n                },\n                (err) => {\n                    this.errorMessageId = 'ADF_CLOUD_PROCESS_LIST.ADF_CLOUD_START_PROCESS.ERROR.START';\n                    this.error.emit(err);\n                    this.isLoading = false;\n                }\n            );\n    }\n\n    async cancelStartProcess() {\n        if (this.currentCreatedProcess) {\n            await this.startProcessCloudService.deleteProcess(this.appName, this.currentCreatedProcess.id);\n        }\n\n        this.currentCreatedProcess = null;\n        this.cancel.emit();\n    }\n\n    private resetErrorMessage() {\n        this.errorMessageId = '';\n    }\n\n    private resetProcessDefinitionList() {\n        this.processDefinition.setValue('');\n        this.filteredProcesses = this.processDefinitionList;\n    }\n\n    displayProcessNameOnDropdown(process: any) {\n        if (process) {\n            let processName = process;\n            if (typeof process !== 'string') {\n                processName = process.name;\n            }\n            return processName;\n        }\n    }\n\n    displayDropdown(event) {\n        event.stopPropagation();\n        if (!this.inputAutocomplete.panelOpen) {\n            this.resetProcessDefinitionList();\n            this.inputAutocomplete.openPanel();\n        } else {\n            this.inputAutocomplete.closePanel();\n        }\n    }\n\n    processDefinitionNameValidator(): ValidatorFn {\n        return (control: AbstractControl): { [key: string]: any } | null => {\n            const processDefinitionFieldValue = control.value;\n            let processDefinitionNameError = false;\n\n            if (processDefinitionFieldValue) {\n                const processDefinition = this.getProcessIfExists(processDefinitionFieldValue);\n                if (!processDefinition.key) {\n                    processDefinitionNameError = true;\n                }\n            }\n\n            return processDefinitionNameError ? { 'invalid name': true } : null;\n        };\n    }\n\n    getProcessDefinitionValue(process: ProcessDefinitionCloud): string {\n        return !!process.name ? process.name : process.key;\n    }\n\n    get processInstanceName(): AbstractControl {\n        return this.processForm.get('processInstanceName');\n    }\n\n    get processDefinition(): AbstractControl {\n        return this.processForm.get('processDefinition');\n    }\n\n    onFormContentClicked(content: ContentLinkModel) {\n        this.formContentClicked.emit(content);\n    }\n\n    processDefinitionSelectionChanged(processDefinition: ProcessDefinitionCloud) {\n        if (processDefinition) {\n            const processInstanceDetails: ProcessInstanceCloud = { processDefinitionName: processDefinition.name };\n            const defaultProcessName = this.processNameCloudPipe.transform(this.name, processInstanceDetails);\n            this.processInstanceName.setValue(defaultProcessName);\n            this.processInstanceName.markAsDirty();\n            this.processInstanceName.markAsTouched();\n            this.processDefinitionSelection.emit(processDefinition);\n        }\n    }\n\n    ngOnDestroy() {\n        this.onDestroy$.next(true);\n        this.onDestroy$.complete();\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { MaterialModule } from '../../material.module';\nimport { FormCloudModule } from '../../form/form-cloud.module';\nimport { StartProcessCloudComponent } from './components/start-process-cloud.component';\nimport { CoreModule } from '@alfresco/adf-core';\n@NgModule({\n    imports: [\n        FormsModule,\n        CommonModule,\n        FormCloudModule,\n        MaterialModule,\n        FlexLayoutModule,\n        ReactiveFormsModule,\n        CoreModule\n    ],\n    declarations: [\n        StartProcessCloudComponent\n    ],\n    exports: [\n        StartProcessCloudComponent\n    ]\n})\nexport class StartProcessCloudModule { }\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, Input, OnChanges, OnInit, OnDestroy, EventEmitter, ViewEncapsulation } from '@angular/core';\nimport { CardViewItem, CardViewTextItemModel, TranslationService, AppConfigService, CardViewDateItemModel, CardViewBaseItemModel } from '@alfresco/adf-core';\nimport { ProcessInstanceCloud } from '../../start-process/models/process-instance-cloud.model';\nimport { ProcessCloudService } from '../../services/process-cloud.service';\nimport { takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs';\n\n@Component({\n    selector: 'adf-cloud-process-header',\n    templateUrl: './process-header-cloud.component.html',\n    encapsulation: ViewEncapsulation.None,\n    host: { class: 'adf-cloud-process-header' }\n})\nexport class ProcessHeaderCloudComponent implements OnChanges, OnInit, OnDestroy {\n\n    /** (Required) The name of the application. */\n    @Input()\n    appName: string = '';\n\n    /** (Required) The id of the process instance. */\n    @Input()\n    processInstanceId: string;\n\n    processInstanceDetails: ProcessInstanceCloud;\n    properties: CardViewItem[];\n    dateFormat: string;\n    dateLocale: string;\n\n    /** Gets emitted each time a new process instance details are loaded. */\n    loaded = new EventEmitter<ProcessInstanceCloud>();\n\n    private onDestroy$ = new Subject<boolean>();\n\n    constructor(\n        private processCloudService: ProcessCloudService,\n        private translationService: TranslationService,\n        private appConfig: AppConfigService) {\n    }\n\n    ngOnInit() {\n        this.dateFormat = this.appConfig.get('dateValues.defaultDateFormat');\n        this.dateLocale = this.appConfig.get('dateValues.defaultDateLocale');\n\n        this.processCloudService.dataChangesDetected\n            .pipe(takeUntil(this.onDestroy$))\n            .subscribe((processDetails) => this.onLoaded(processDetails));\n    }\n\n    ngOnChanges() {\n        if ((this.appName || this.appName === '') && this.processInstanceId) {\n            this.loadProcessInstanceDetails(this.appName, this.processInstanceId);\n        }\n    }\n\n    private loadProcessInstanceDetails(appName: string, processInstanceId: string) {\n        this.processCloudService\n            .getProcessInstanceById(appName, processInstanceId)\n            .subscribe((result) => this.onLoaded(result));\n    }\n\n    private onLoaded(processInstanceDetails: ProcessInstanceCloud) {\n        this.processInstanceDetails = processInstanceDetails;\n        this.refreshData();\n\n        this.loaded.emit(processInstanceDetails);\n    }\n\n    /**\n     * Refresh the card data\n     */\n    refreshData() {\n        if (this.processInstanceDetails) {\n            const defaultProperties = this.initDefaultProperties();\n            const filteredProperties = this.appConfig.get<string[]>('adf-cloud-process-header.presets.properties');\n            this.properties = defaultProperties.filter((cardItem) => this.isValidSelection(filteredProperties, cardItem));\n        }\n    }\n\n    private initDefaultProperties(): any[] {\n        return [\n            new CardViewTextItemModel(\n                {\n                    label: 'ADF_CLOUD_PROCESS_HEADER.PROPERTIES.ID',\n                    value: this.processInstanceDetails.id,\n                    key: 'id'\n                }),\n            new CardViewTextItemModel(\n                {\n                    label: 'ADF_CLOUD_PROCESS_HEADER.PROPERTIES.NAME',\n                    value: this.processInstanceDetails.name,\n                    key: 'name',\n                    default: this.translationService.instant('ADF_CLOUD_PROCESS_HEADER.PROPERTIES.NAME_DEFAULT')\n                }),\n            new CardViewTextItemModel(\n                {\n                    label: 'ADF_CLOUD_PROCESS_HEADER.PROPERTIES.STATUS',\n                    value: this.processInstanceDetails.status,\n                    key: 'status'\n                }),\n            new CardViewTextItemModel(\n                {\n                    label: 'ADF_CLOUD_PROCESS_HEADER.PROPERTIES.INITIATOR',\n                    value: this.processInstanceDetails.initiator,\n                    key: 'initiator'\n                }),\n            new CardViewDateItemModel(\n                {\n                    label: 'ADF_CLOUD_PROCESS_HEADER.PROPERTIES.START_DATE',\n                    value: this.processInstanceDetails.startDate,\n                    key: 'startDate',\n                    format: this.dateFormat,\n                    locale: this.dateLocale\n                }),\n            new CardViewDateItemModel(\n                {\n                    label: 'ADF_CLOUD_PROCESS_HEADER.PROPERTIES.LAST_MODIFIED',\n                    value: this.processInstanceDetails.lastModified,\n                    key: 'lastModified',\n                    format: this.dateFormat,\n                    locale: this.dateLocale\n                }),\n            new CardViewTextItemModel(\n                {\n                    label: 'ADF_CLOUD_PROCESS_HEADER.PROPERTIES.PARENT_ID',\n                    value: this.processInstanceDetails.parentId,\n                    key: 'parentId',\n                    default: this.translationService.instant('ADF_CLOUD_PROCESS_HEADER.PROPERTIES.NONE')\n                }),\n            new CardViewTextItemModel(\n                {\n                    label: 'ADF_CLOUD_PROCESS_HEADER.PROPERTIES.BUSINESS_KEY',\n                    value: this.processInstanceDetails.businessKey,\n                    key: 'businessKey',\n                    default: this.translationService.instant('ADF_CLOUD_PROCESS_HEADER.PROPERTIES.NONE')\n                })\n        ];\n    }\n\n    private isValidSelection(filteredProperties: string[], cardItem: CardViewBaseItemModel): boolean {\n        return filteredProperties ? filteredProperties.indexOf(cardItem.key) >= 0 : true;\n    }\n\n    ngOnDestroy() {\n        this.onDestroy$.next(true);\n        this.onDestroy$.complete();\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MaterialModule } from '../../material.module';\nimport { CoreModule } from '@alfresco/adf-core';\nimport { ProcessHeaderCloudComponent } from './components/process-header-cloud.component';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        MaterialModule,\n        CoreModule\n\n    ],\n    declarations: [ProcessHeaderCloudComponent],\n    exports: [ProcessHeaderCloudComponent]\n})\nexport class ProcessHeaderCloudModule { }\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Directive, HostListener, Output, EventEmitter, OnInit, OnDestroy, ElementRef } from '@angular/core';\nimport { IdentityUserService } from '@alfresco/adf-core';\nimport { ProcessCloudService } from '../services/process-cloud.service';\nimport { takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs';\nimport { ProcessInstanceCloud } from '../start-process/models/process-instance-cloud.model';\n\n@Directive({\n    // tslint:disable-next-line: directive-selector\n    selector: '[adf-cloud-cancel-process]'\n})\nexport class CancelProcessDirective implements OnInit, OnDestroy {\n\n    /** Emitted when the process is cancelled. */\n    @Output()\n    success = new EventEmitter<any>();\n\n    /** Emitted when the process cannot be cancelled. */\n    @Output()\n    error = new EventEmitter<any>();\n\n    processInstanceDetails: ProcessInstanceCloud;\n\n    canCancelProcess = false;\n\n    private onDestroy$ = new Subject<boolean>();\n\n    constructor(\n        private elementRef: ElementRef,\n        private processCloudService: ProcessCloudService,\n        private identityUserService: IdentityUserService) {}\n\n    ngOnInit() {\n        this.processCloudService.dataChangesDetected\n            .pipe(takeUntil(this.onDestroy$))\n            .subscribe((processDetails) => {\n                this.processInstanceDetails = processDetails;\n                this.canCancelProcess = this.checkCanCancelProcess();\n                this.setElementVisibility();\n            });\n    }\n\n    @HostListener('click')\n    onClick() {\n        this.cancelProcess();\n    }\n\n    private setElementVisibility() {\n        this.elementRef.nativeElement.disabled = !this.canCancelProcess;\n    }\n\n    checkCanCancelProcess(): boolean {\n        const currentUser = this.identityUserService.getCurrentUserInfo().username;\n        return this.processInstanceDetails.initiator === currentUser && this.processInstanceDetails.status === 'RUNNING';\n    }\n\n    cancelProcess() {\n        if (this.canCancelProcess) {\n            this.processCloudService.cancelProcess(this.processInstanceDetails.appName, this.processInstanceDetails.id)\n                .subscribe(\n                    (response) => this.success.emit(response),\n                    (error) => this.error.emit(error)\n                );\n        } else {\n            this.error.emit('Permission denied, only process initiator can cancel the process');\n        }\n    }\n\n    ngOnDestroy() {\n        this.onDestroy$.next(true);\n        this.onDestroy$.complete();\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NgModule } from '@angular/core';\nimport { CancelProcessDirective } from './cancel-process.directive';\n\n@NgModule({\n    declarations: [\n        CancelProcessDirective\n    ],\n    exports: [\n        CancelProcessDirective\n    ]\n})\nexport class ProcessDirectiveModule { }\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NgModule } from '@angular/core';\nimport { ProcessFiltersCloudModule } from './process-filters/process-filters-cloud.module';\nimport { ProcessListCloudModule } from './process-list/process-list-cloud.module';\nimport { StartProcessCloudModule } from './start-process/start-process-cloud.module';\nimport { CoreModule } from '@alfresco/adf-core';\nimport { ProcessHeaderCloudModule } from './process-header/process-header-cloud.module';\nimport { ProcessDirectiveModule } from './directives/process-directive.module';\nimport { ProcessNameCloudPipe } from '../pipes/process-name-cloud.pipe';\n\n@NgModule({\n    imports: [\n        CoreModule,\n        ProcessFiltersCloudModule,\n        ProcessListCloudModule,\n        StartProcessCloudModule,\n        ProcessHeaderCloudModule,\n        ProcessDirectiveModule\n    ],\n    exports: [\n        ProcessFiltersCloudModule,\n        ProcessListCloudModule,\n        StartProcessCloudModule,\n        ProcessHeaderCloudModule,\n        ProcessDirectiveModule\n    ],\n    providers: [ProcessNameCloudPipe]\n})\nexport class ProcessCloudModule { }\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Injectable } from '@angular/core';\nimport { PreferenceCloudServiceInterface } from './preference-cloud.interface';\nimport { AlfrescoApiService, AppConfigService, LogService } from '@alfresco/adf-core';\nimport { throwError, Observable } from 'rxjs';\nimport { BaseCloudService } from './base-cloud.service';\n\n@Injectable({ providedIn: 'root' })\nexport class UserPreferenceCloudService extends BaseCloudService implements PreferenceCloudServiceInterface {\n\n  constructor(\n    apiService: AlfrescoApiService,\n    appConfigService: AppConfigService,\n    private logService: LogService) {\n    super(apiService, appConfigService);\n  }\n\n  /**\n   * Gets user preferences\n   * @param appName Name of the target app\n   * @returns List of user preferences\n   */\n  getPreferences(appName: string): Observable<any> {\n    if (appName) {\n      const url = `${this.getBasePath(appName)}/preference/v1/preferences`;\n      return this.get(url);\n    } else {\n      this.logService.error('Appname is mandatory for querying preferences');\n      return throwError('Appname not configured');\n    }\n  }\n\n  /**\n   * Gets user preference.\n   * @param appName Name of the target app\n   * @param key Key of the target preference\n   * @returns Observable of user preference\n   */\n  getPreferenceByKey(appName: string, key: string): Observable<any> {\n    if (appName) {\n      const url = `${this.getBasePath(appName)}/preference/v1/preferences/${key}`;\n      return this.get(url);\n    } else {\n      this.logService.error('Appname and key are mandatory for querying preference');\n      return throwError('Appname not configured');\n    }\n  }\n\n  /**\n   * Creates user preference.\n   * @param appName Name of the target app\n   * @param key Key of the target preference\n   * @newPreference Details of new user preference\n   * @returns Observable of created user preferences\n   */\n  createPreference(appName: string, key: string, newPreference: any): Observable<any> {\n    if (appName) {\n      const url = `${this.getBasePath(appName)}/preference/v1/preferences/${key}`;\n      const payload = JSON.stringify(newPreference);\n\n      return this.put(url, payload);\n    } else {\n      this.logService.error('Appname  and key are  mandatory for creating preference');\n      return throwError('Appname not configured');\n    }\n  }\n\n  /**\n   * Updates user preference.\n   * @param appName Name of the target app\n   * @param key Key of the target preference\n   * @param updatedPreference Details of updated preference\n   * @returns Observable of updated user preferences\n   */\n  updatePreference(appName: string, key: string, updatedPreference: any): Observable<any> {\n    return this.createPreference(appName, key, updatedPreference);\n  }\n\n  /**\n   * Deletes user preference by given preference key.\n   * @param appName Name of the target app\n   * @param key Key of the target preference\n   * @returns Observable of delete operation status\n   */\n  deletePreference(appName: string, key: string): Observable<any> {\n    if (appName) {\n      const url = `${this.getBasePath(appName)}/preference/v1/preferences/${key}`;\n      return this.delete(url);\n    } else {\n      this.logService.error('Appname and key are mandatory to delete preference');\n      return throwError('Appname not configured');\n    }\n  }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Injectable } from '@angular/core';\nimport { PreferenceCloudServiceInterface } from './preference-cloud.interface';\nimport { StorageService } from '@alfresco/adf-core';\nimport { Observable, of } from 'rxjs';\n\n@Injectable({ providedIn: 'root' })\nexport class LocalPreferenceCloudService implements PreferenceCloudServiceInterface {\n\n  constructor(private storage: StorageService) { }\n\n    /**\n     * Gets local preferences\n     * @param _ Name of the target app\n     * @param key Key of the target preference\n     * @returns List of local preferences\n     */\n    getPreferences(_: string, key: string): Observable<any> {\n        if (key || key === '') {\n            return of(this.prepareLocalPreferenceResponse(key));\n        }\n        return of(\n            {\n                'list': {\n                    'entries': []\n                }\n            }\n        );\n    }\n\n    /**\n     * Gets local preference.\n     * @param _ Name of the target app\n     * @param key Key of the target preference\n     * @returns Observable of local preference\n     */\n    getPreferenceByKey(_: string, key: string): Observable<any> {\n        return of(JSON.parse(this.storage.getItem(key)) || []);\n    }\n\n    /**\n     * Creates local preference.\n     * @param _ Name of the target app\n     * @param key Key of the target preference\n     * @param newPreference Details of new local preference\n     * @returns Observable of created local preferences\n     */\n    createPreference(_: string, key: string, newPreference: any): Observable<any> {\n        const storedFilters = JSON.parse(this.storage.getItem(key) || '[]');\n        storedFilters.push(...newPreference);\n        this.storage.setItem(key, JSON.stringify(storedFilters));\n        return of(storedFilters);\n    }\n\n    /**\n     * Updates local preference.\n     * @param _ Name of the target app\n     * @param key Key of the target preference\n     * @param updatedPreference Details of updated preference\n     * @returns Observable of updated local preferences\n     */\n    updatePreference(_: string, key: string, updatedPreference: any): Observable<any> {\n        if (key) {\n            this.storage.setItem(key, JSON.stringify(updatedPreference));\n        }\n        return of(updatedPreference);\n    }\n\n    /**\n     * Deletes local preference by given preference key.\n     * @param key Key of the target preference\n     * @param preferences Details of updated preferences\n     * @returns Observable of preferences without deleted preference\n     */\n    deletePreference(key: string, preferences: any): Observable<any> {\n        if (key) {\n            this.storage.setItem(key, JSON.stringify(preferences));\n        }\n        return of(preferences);\n    }\n\n    prepareLocalPreferenceResponse(key: string): any {\n        return {\n            'list': {\n                'entries': [\n                    {\n                        'entry': {\n                            'key': key,\n                            'value': this.storage.getItem(key) || '[]'\n                        }\n                    }\n                ]\n            }\n        };\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Observable } from 'rxjs';\n\nexport interface PreferenceCloudServiceInterface {\n\n    getPreferences(appName: string, key?: string): Observable<any>;\n    getPreferenceByKey(appName: string, key: string): Observable<any>;\n    createPreference(appName: string, key: string, newPreference: any): Observable<any>;\n    updatePreference(appName: string, key: string, updatedPreference: any): Observable<any>;\n    deletePreference(appName: string, key: any): Observable<any>;\n\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Moment } from 'moment';\n\nexport interface FormContent {\n    formRepresentation: FormRepresentation;\n}\n\nexport interface FormRepresentation {\n    id: string;\n    name: string;\n    description: string;\n    version?: number;\n    formDefinition?: FormDefinition;\n    standAlone?: boolean;\n}\n\nexport interface FormTab {\n    id: string;\n    title: string;\n    visibilityCondition: VisibilityCondition | null;\n}\n\nexport interface FormOutcome {\n    id: string;\n    name: string;\n}\n\nexport interface FormDefinition {\n    tabs: FormTab[];\n    fields: Container[] | HeaderRepresentation[];\n    outcomes: FormOutcome[];\n    metadata: {};\n    variables: any[];\n}\n\nexport interface Container {\n    id: string;\n    type: string;\n    tab: string;\n    name: string;\n    numberOfColumns: number;\n    fields: {\n        [key: string]: FormFieldRepresentation[]\n    };\n}\n\nexport type FormFieldRepresentation = (DateField | DateTimeField | TextField | AttachFileField | DropDownField |\n    RadioField | TypeaheadField | PeopleField | AmountField | NumberField | CheckboxField | HyperlinkField );\n\nexport interface AttachFileField extends FormField {\n    required: boolean;\n}\n\nexport interface TypeaheadField extends RestField {\n    required: boolean;\n}\n\nexport interface RestField extends FormField {\n    required: boolean;\n    restUrl: string;\n    restResponsePath: string;\n    restIdProperty: string;\n    restLabelProperty: string;\n}\n\nexport interface HeaderRepresentation extends Container {\n    numberOfColumns: number;\n    params: {\n        [key: string]: any\n    };\n    visibilityCondition: VisibilityCondition;\n}\n\nexport interface ColumnDefinitionRepresentation extends Container {\n    id: string;\n    name: string;\n    type: string;\n    value: any;\n    required: boolean;\n    editable: boolean;\n    sortable: boolean;\n    visible: boolean;\n}\n\nexport interface DynamicTableRepresentation extends FormField {\n    required: boolean;\n    tab: string;\n    placeholder: string;\n    columnDefinitions: ColumnDefinitionRepresentation[];\n}\n\nexport interface VisibilityCondition {\n    leftType: string;\n    leftValue: string;\n    operator: string;\n    rightValue: string | number | Date | Moment;\n    rightType: string;\n    nextConditionOperator?: string;\n    nextCondition?: VisibilityCondition;\n}\n\nexport interface FormField {\n    id: string;\n    name: string;\n    value: any;\n    type: FormFieldType | string;\n    readOnly?: boolean;\n    colspan: number;\n    params: {\n        [anyKey: string]: any\n    };\n    visibilityCondition: null | VisibilityCondition;\n}\n\nexport interface FormOption {\n    id: string;\n    name: string;\n}\n\nexport interface OptionsField {\n    value: any;\n    restUrl: string | null;\n    restResponsePath: string | null;\n    restIdProperty: string | null;\n    restLabelProperty: string | null;\n    optionType: 'manual' | 'rest';\n    options: FormOption[];\n}\n\nexport interface AmountField extends FormField {\n    required: boolean;\n    placeholder: string | null;\n    minValue: number | null;\n    maxValue: number | null;\n    enableFractions: boolean;\n    currency: string;\n}\n\nexport interface CheckboxField extends FormField {\n    required: boolean;\n}\n\nexport interface DateField extends FormField {\n    required: boolean;\n    placeholder: string | null;\n    minValue: string | null;\n    maxValue: string | null;\n    dateDisplayFormat: string;\n}\n\nexport interface DateTimeField extends FormField {\n    required: boolean;\n    placeholder: string | null;\n    minValue: string | null;\n    maxValue: string | null;\n    dateDisplayFormat: string;\n}\n\nexport interface DropDownField extends OptionsField, FormField {\n    required: boolean;\n}\n\nexport interface HyperlinkField extends FormField {\n    hyperlinkUrl: string | null;\n    displayText: string | null;\n}\n\nexport interface NumberField extends FormField {\n    placeholder: string | null;\n    minValue: number | null;\n    maxValue: number | null;\n    required: boolean;\n}\n\nexport interface RadioField extends OptionsField, FormField {\n    required: boolean;\n}\n\nexport interface TextField extends FormField {\n    regexPattern: string | null;\n    required: boolean;\n    minLength: number;\n    maxLength: number;\n    placeholder: string | null;\n}\n\nexport enum PeopleModeOptions {\n    single = 'single',\n    multiple = 'multiple'\n}\n\nexport interface PeopleField extends FormField {\n    required: boolean;\n    optionType: PeopleModeOptions;\n}\n\nexport enum FormFieldType {\n    text = 'text',\n    multiline = 'multi-line-text',\n    number = 'integer',\n    checkbox = 'boolean',\n    date = 'date',\n    datetime = 'datetime',\n    dropdown = 'dropdown',\n    typeahead = 'typeahead',\n    amount = 'amount',\n    radio = 'radio-buttons',\n    people = 'people',\n    groupOfPeople = 'functional-group',\n    dynamicTable = 'dynamicTable',\n    hyperlink = 'hyperlink',\n    header = 'group',\n    uploadFile = 'upload',\n    uploadFolder = 'uploadFolder',\n    displayValue = 'readonly',\n    displayText = 'readonly-text',\n    fileViewer = 'file-viewer'\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport * from './user-preference-cloud.service';\nexport * from './local-preference-cloud.service';\nexport * from './cloud-token.service';\nexport * from './notification-cloud.service';\nexport * from './preference-cloud.interface';\nexport * from './form-fields.interfaces';\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Injectable } from '@angular/core';\nimport { FormRenderingService } from '@alfresco/adf-core';\nimport { AttachFileCloudWidgetComponent } from './widgets/attach-file/attach-file-cloud-widget.component';\nimport { DropdownCloudWidgetComponent } from './widgets/dropdown/dropdown-cloud.widget';\nimport { DateCloudWidgetComponent } from './widgets/date/date-cloud.widget';\nimport { PeopleCloudWidgetComponent } from './widgets/people/people-cloud.widget';\nimport { GroupCloudWidgetComponent } from './widgets/group/group-cloud.widget';\nimport { PropertiesViewerWidgetComponent } from './widgets/properties-viewer/properties-viewer.widget';\nimport { RadioButtonsCloudWidgetComponent } from './widgets/radio-buttons/radio-buttons-cloud.widget';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class CloudFormRenderingService extends FormRenderingService {\n    constructor() {\n        super();\n\n        this.register({\n            'upload': () => AttachFileCloudWidgetComponent,\n            'dropdown': () => DropdownCloudWidgetComponent,\n            'date': () => DateCloudWidgetComponent,\n            'people': () => PeopleCloudWidgetComponent,\n            'functional-group': () => GroupCloudWidgetComponent,\n            'properties-viewer': () => PropertiesViewerWidgetComponent,\n            'radio-buttons': () => RadioButtonsCloudWidgetComponent\n        }, true);\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NgModule } from '@angular/core';\nimport { ProcessNameCloudPipe } from './process-name-cloud.pipe';\n\n@NgModule({\n    declarations: [\n        ProcessNameCloudPipe\n    ],\n    exports: [\n        ProcessNameCloudPipe\n    ]\n})\nexport class ProcessServicesCloudPipeModule {\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NgModule, ModuleWithProviders } from '@angular/core';\nimport { TRANSLATION_PROVIDER, CoreModule, FormRenderingService } from '@alfresco/adf-core';\nimport { AppListCloudModule } from './app/app-list-cloud.module';\nimport { TaskCloudModule } from './task/task-cloud.module';\nimport { ProcessCloudModule } from './process/process-cloud.module';\nimport { GroupCloudModule } from './group/group-cloud.module';\nimport { FormCloudModule } from './form/form-cloud.module';\nimport { TaskFormModule } from './task/task-form/task-form.module';\nimport {\n    LocalPreferenceCloudService,\n    PreferenceCloudServiceInterface,\n    PROCESS_FILTERS_SERVICE_TOKEN,\n    TASK_FILTERS_SERVICE_TOKEN\n} from './services/public-api';\nimport { PeopleCloudModule } from './people/people-cloud.module';\nimport { CloudFormRenderingService } from './form/components/cloud-form-rendering.service';\nimport { ProcessServicesCloudPipeModule } from './pipes/process-services-cloud-pipe.module';\n\n@NgModule({\n    imports: [\n        CoreModule,\n        AppListCloudModule,\n        ProcessCloudModule,\n        TaskCloudModule,\n        GroupCloudModule,\n        PeopleCloudModule,\n        FormCloudModule,\n        TaskFormModule,\n        ProcessServicesCloudPipeModule\n    ],\n    providers: [\n        {\n            provide: TRANSLATION_PROVIDER,\n            multi: true,\n            useValue: {\n                name: 'adf-process-services-cloud',\n                source: 'assets/adf-process-services-cloud'\n            }\n        }\n    ],\n    exports: [\n        AppListCloudModule,\n        ProcessCloudModule,\n        TaskCloudModule,\n        GroupCloudModule,\n        FormCloudModule,\n        TaskFormModule,\n        PeopleCloudModule,\n        ProcessServicesCloudPipeModule\n    ]\n})\nexport class ProcessServicesCloudModule {\n    static forRoot(preferenceServiceInstance?: PreferenceCloudServiceInterface): ModuleWithProviders<ProcessServicesCloudModule> {\n        return {\n            ngModule: ProcessServicesCloudModule,\n            providers: [\n                {\n                    provide: TRANSLATION_PROVIDER,\n                    multi: true,\n                    useValue: {\n                        name: 'adf-process-services-cloud',\n                        source: 'assets/adf-process-services-cloud'\n                    }\n                },\n                { provide: PROCESS_FILTERS_SERVICE_TOKEN, useExisting: preferenceServiceInstance ?? LocalPreferenceCloudService },\n                { provide: TASK_FILTERS_SERVICE_TOKEN, useExisting: preferenceServiceInstance ?? LocalPreferenceCloudService },\n                FormRenderingService,\n                { provide: FormRenderingService, useClass: CloudFormRenderingService }\n            ]\n        };\n    }\n\n    static forChild(): ModuleWithProviders<ProcessServicesCloudModule> {\n        return {\n            ngModule: ProcessServicesCloudModule\n        };\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport * from './components/app-list-cloud.component';\nexport * from './components/app-details-cloud.component';\nexport * from './services/apps-process-cloud.service';\nexport * from './models/application-instance.model';\nexport * from './app-list-cloud.module';\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport * from './components/process-list-cloud.component';\n\nexport * from './models/process-cloud-query-request.model';\nexport * from './models/process-cloud-preset.model';\nexport * from './models/process-list-sorting.model';\n\nexport * from './services/process-list-cloud.service';\n\nexport * from './process-list-cloud.module';\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport * from './components/process-filters-cloud.component';\nexport * from './components/edit-process-filter-cloud.component';\nexport * from './components/process-filter-dialog-cloud.component';\nexport * from './models/process-filter-cloud.model';\nexport * from './services/process-filter-cloud.service';\nexport * from './process-filters-cloud.module';\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport interface ProcessInstanceCloud {\n    appName?: string;\n    id?: string;\n    name?: string;\n    startDate?: Date;\n    initiator?: string;\n    status?: string;\n    businessKey?: string;\n    lastModified?: Date;\n    parentId?: string;\n    processDefinitionId?: string;\n    processDefinitionKey?: string;\n    processDefinitionName?: string;\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport * from './components/start-process-cloud.component';\n\nexport * from './models/process-instance-cloud.model';\nexport * from './models/process-payload-cloud.model';\n\nexport * from './services/start-process-cloud.service';\nexport * from './start-process-cloud.module';\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport * from './process-header-cloud.module';\nexport * from './components/process-header-cloud.component';\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport * from './cancel-process.directive';\n\nexport * from './process-directive.module';\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport * from './process-list/public-api';\nexport * from './process-filters/public-api';\nexport * from './start-process/public-api';\nexport * from './process-header/public-api';\nexport * from './directives/public-api';\nexport * from './services/process-cloud.service';\n\nexport * from './process-cloud.module';\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { TaskListCloudSortingModel } from './task-list-sorting.model';\n\nexport interface ServiceTaskQueryCloudRequestModel {\n    appName: string;\n    appVersion?: string;\n    id?: string;\n    status?: string;\n    maxItems: number;\n    skipCount: number;\n    sorting?: TaskListCloudSortingModel[];\n    activityName?: string;\n    activityType?: string;\n    completedDate?: Date;\n    elementId?: string;\n    executionId?: string;\n    processDefinitionId?: string;\n    processDefinitionKey?: string;\n    processDefinitionVersion?: number;\n    processInstanceId?: string;\n    serviceFullName?: string;\n    serviceName?: string;\n    serviceVersion?: string;\n    startedDate?: Date;\n}\n\nexport interface ServiceTaskIntegrationContextCloudModel extends ServiceTaskQueryCloudRequestModel {\n    errorDate?: Date;\n    errorClassName?: string;\n    errorCode?: string;\n    errorMessage?: string;\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport * from './components/task-list-cloud.component';\nexport * from './components/service-task-list-cloud.component';\n\nexport * from './models/filter-cloud-model';\nexport * from './models/service-task-cloud.model';\nexport * from './models/task-list-sorting.model';\nexport * from './models/task-preset-cloud.model';\n\nexport * from './services/task-list-cloud.service';\nexport * from './services/service-task-list-cloud.service';\n\nexport * from './task-list-cloud.module';\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport * from './components/task-filters-cloud.component';\nexport * from './components/service-task-filters-cloud.component';\nexport * from './components/edit-task-filters/edit-task-filter-cloud.component';\nexport * from './components/edit-task-filters/edit-service-task-filter-cloud.component';\n\nexport * from './models/filter-cloud.model';\n\nexport * from './services/task-filter-cloud.service';\nexport * from './services/service-task-filter-cloud.service';\n\nexport * from './task-filters-cloud.module';\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport interface TaskDetailsCloudModel {\n    id?: string;\n    name?: string;\n    appName?: string;\n    assignee?: string;\n    appVersion?: number;\n    createdDate?: Date;\n    claimedDate?: Date;\n    completedDate?: Date;\n    formKey?: any;\n    category?: any;\n    description?: string;\n    dueDate?: Date;\n    lastModified?: Date;\n    lastModifiedTo?: Date;\n    lastModifiedFrom?: Date;\n    owner?: any;\n    parentTaskId?: string;\n    priority?: number;\n    processDefinitionId?: string;\n    processInstanceId?: string;\n    status?: TaskStatus;\n    standalone?: boolean;\n    candidateUsers?: string[];\n    candidateGroups?: string[];\n    managerOfCandidateGroup?: boolean;\n    memberOfCandidateGroup?: boolean;\n    memberOfCandidateUsers?: boolean;\n    processDefinitionDeploymentId?: string;\n}\n\nexport interface StartTaskCloudResponseModel {\n    entry: TaskDetailsCloudModel;\n}\n\nexport type TaskStatus = |\n    'COMPLETED' |\n    'CREATED' |\n    'ASSIGNED' |\n    'SUSPENDED' |\n    'CANCELLED';\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport * from './models/task-details-cloud.model';\nexport * from './components/start-task-cloud.component';\nexport * from './start-task-cloud.module';\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport * from './components/task-header-cloud.component';\n\nexport * from './task-header-cloud.module';\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport * from './components/task-form-cloud.component';\n\nexport * from './task-form.module';\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport * from './claim-task-cloud.directive';\nexport * from './unclaim-task-cloud.directive';\nexport * from './complete-task.directive';\n\nexport * from './task-directive.module';\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n export * from './task.model';\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Injectable } from '@angular/core';\nimport { AlfrescoApiService, AppConfigService } from '@alfresco/adf-core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { StartTaskCloudRequestModel } from '../start-task/models/start-task-cloud-request.model';\nimport { TaskDetailsCloudModel, StartTaskCloudResponseModel } from '../start-task/models/task-details-cloud.model';\nimport { BaseCloudService } from '../../services/base-cloud.service';\n\n@Injectable({ providedIn: 'root' })\nexport class StartTaskCloudService extends BaseCloudService {\n\n    constructor(\n        apiService: AlfrescoApiService,\n        appConfigService: AppConfigService) {\n        super(apiService, appConfigService);\n    }\n\n     /**\n      * @deprecated in 3.5.0, use TaskCloudService instead.\n      * Creates a new standalone task.\n      * @param taskDetails Details of the task to create\n      * @returns Details of the newly created task\n      */\n    createNewTask(taskDetails: TaskDetailsCloudModel): Observable<TaskDetailsCloudModel> {\n        const url = `${this.getBasePath(taskDetails.appName)}/rb/v1/tasks`;\n        const payload = JSON.stringify(new StartTaskCloudRequestModel(taskDetails));\n\n        return this.post<any, StartTaskCloudResponseModel>(url, payload)\n            .pipe(\n                map(response => response.entry)\n            );\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport * from './task-list/public-api';\nexport * from './task-filters/public-api';\nexport * from './start-task/public-api';\nexport * from './task-header/public-api';\nexport * from './task-form/public-api';\nexport * from './directives/public-api';\nexport * from './models/public-api';\n\nexport * from './services/task-cloud.service';\nexport * from './services/start-task-cloud.service';\n\nexport * from './task-cloud.module';\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport * from './components/group-cloud.component';\nexport * from './pipe/group-initial.pipe';\nexport * from './group-cloud.module';\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport * from './components/people-cloud.component';\n\nexport * from './people-cloud.module';\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport * from './models/task-variable-cloud.model';\n\nexport * from './components/form-cloud-custom-outcomes.component';\nexport * from './components/form-cloud.component';\nexport * from './components/form-definition-selector-cloud.component';\nexport * from './components/cloud-form-rendering.service';\n\nexport * from './components/widgets/attach-file/attach-file-cloud-widget.component';\nexport * from './components/widgets/attach-file/upload-cloud.widget';\nexport * from './components/widgets/date/date-cloud.widget';\nexport * from './components/widgets/dropdown/dropdown-cloud.widget';\nexport * from './components/widgets/group/group-cloud.widget';\nexport * from './components/widgets/people/people-cloud.widget';\nexport * from './components/widgets/properties-viewer/properties-viewer.widget';\n\nexport * from './services/content-cloud-node-selector.service';\nexport * from './services/form-cloud.service';\nexport * from './services/form-definition-selector-cloud.service';\nexport * from './services/content-cloud-node-selector.service';\nexport * from './services/process-cloud-content.service';\n\nexport * from './form-cloud.module';\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport type ComponentSelectionMode = 'single' | 'multiple';\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Pagination } from '@alfresco/js-api';\n\nexport class ApplicationVersionModel {\n    entry: {\n        id: string;\n        name: string;\n        version: string;\n    };\n\n}\n\nexport class ApplicationVersionResponseModel {\n    list: {\n        entries: ApplicationVersionModel[];\n        pagination: Pagination;\n    };\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { TaskDetailsCloudModel } from '../task/start-task/models/task-details-cloud.model';\n\nexport interface TaskCloudEngineEvent {\n    eventType: string;\n    entity: TaskDetailsCloudModel;\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport * from './lib/process-services-cloud.module';\nexport * from './lib/app/public-api';\nexport * from './lib/process/public-api';\nexport * from './lib/task/public-api';\nexport * from './lib/group/public-api';\nexport * from './lib/people/public-api';\nexport * from './lib/form/public-api';\nexport * from './lib/services/public-api';\nexport * from './lib/types';\nexport * from './lib/pipes/process-name-cloud.pipe';\nexport * from './lib/pipes/process-services-cloud-pipe.module';\nexport * from './lib/models/process-definition-cloud.model';\nexport * from './lib/models/date-cloud-filter.model';\nexport * from './lib/models/application-version.model';\nexport * from './lib/models/engine-event-cloud.model';\n"],"names":["moment"],"mappings":"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"}