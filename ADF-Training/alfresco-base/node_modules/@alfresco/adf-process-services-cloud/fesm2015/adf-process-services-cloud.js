import { NgModule, EventEmitter, Component, ViewEncapsulation, Input, Output, ɵɵdefineInjectable, ɵɵinject, Injectable, ContentChild, Directive, InjectionToken, Inject, ChangeDetectionStrategy, ViewChild, Pipe, HostListener, ElementRef } from '@angular/core';
import { AlfrescoApiService, LogService, AppConfigService, CustomEmptyContentTemplateDirective, TemplateModule, CoreModule, TranslationService, IdentityUserService, DataTableSchema, UserPreferenceValues, UserPreferencesService, FullNamePipe, IdentityGroupService, MOMENT_DATE_FORMATS, MomentDateAdapter, FormModel, FormOutcomeModel, FormBaseComponent, FORM_FIELD_VALIDATORS, UploadWidgetContentLinkModel, FormOutcomeEvent, FormService, WidgetVisibilityService, WidgetComponent, FormFieldEvent, FormFieldTypes, NotificationService, ContentService, DownloadService, ThumbnailService, ContentLinkModel, NodesApiService, LocalizedDatePipe, CardViewTextItemModel, CardViewSelectItemModel, CardViewDatetimeItemModel, CardViewDateItemModel, CardViewArrayItemModel, CardViewUpdateService, FormRenderingService, DataTableComponent, CustomLoadingContentTemplateDirective, StorageService, TRANSLATION_PROVIDER } from '@alfresco/adf-core';
import { FlexLayoutModule } from '@angular/flex-layout';
import { MatAutocompleteModule, MatAutocompleteTrigger } from '@angular/material/autocomplete';
import { MatButtonModule } from '@angular/material/button';
import { MatCardModule } from '@angular/material/card';
import { MatCheckboxModule } from '@angular/material/checkbox';
import { MatChipsModule } from '@angular/material/chips';
import { MatOptionModule, MatNativeDateModule, MatRippleModule, DateAdapter, MAT_DATE_FORMATS } from '@angular/material/core';
import { MAT_FORM_FIELD_DEFAULT_OPTIONS } from '@angular/material/form-field';
import { MatDatepickerModule } from '@angular/material/datepicker';
import { MatDialogModule, MatDialogRef, MAT_DIALOG_DATA, MatDialog } from '@angular/material/dialog';
import { MatExpansionModule } from '@angular/material/expansion';
import { MatGridListModule } from '@angular/material/grid-list';
import { MatIconModule } from '@angular/material/icon';
import { MatInputModule } from '@angular/material/input';
import { MatListModule } from '@angular/material/list';
import { MatMenuModule } from '@angular/material/menu';
import { MatProgressSpinnerModule } from '@angular/material/progress-spinner';
import { MatRadioModule } from '@angular/material/radio';
import { MatSelectModule } from '@angular/material/select';
import { MatSlideToggleModule } from '@angular/material/slide-toggle';
import { MatTableModule } from '@angular/material/table';
import { MatTabsModule } from '@angular/material/tabs';
import { MatTooltipModule } from '@angular/material/tooltip';
import { CommonModule } from '@angular/common';
import { of, from, throwError, Subject, BehaviorSubject, forkJoin } from 'rxjs';
import { map, catchError, takeUntil, switchMap, debounceTime, filter, tap, distinctUntilChanged, mergeMap, finalize, mapTo, concatMap } from 'rxjs/operators';
import { FormGroup, FormControl, FormsModule, ReactiveFormsModule, Validators, FormBuilder } from '@angular/forms';
import moment from 'moment-es6';
import { Apollo } from 'apollo-angular';
import { HttpLink } from 'apollo-angular/http';
import { split, ApolloLink, InMemoryCache, gql } from '@apollo/client/core';
import { WebSocketLink } from '@apollo/client/link/ws';
import { onError } from '@apollo/client/link/error';
import { getMainDefinition } from '@apollo/client/utilities';
import { HttpClientModule } from '@angular/common/http';
import { __awaiter } from 'tslib';
import { trigger, state, style, transition, animate } from '@angular/animations';
import moment$1 from 'moment';
import { UploadApi, NodesApi, AuthenticationApi } from '@alfresco/js-api';
import { NodeAction, ContentNodeSelectorComponent, ContentNodeSelectorPanelService, ContentNodeSelectorModule, ContentMetadataModule } from '@alfresco/adf-content-services';

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/material/card';
import * as ɵngcc2 from '@angular/flex-layout/flex';
import * as ɵngcc3 from '@angular/common';
import * as ɵngcc4 from '@angular/flex-layout/extended';
import * as ɵngcc5 from '@angular/material/icon';
import * as ɵngcc6 from '@alfresco/adf-core';
import * as ɵngcc7 from '@angular/material/list';
import * as ɵngcc8 from '@angular/material/core';
import * as ɵngcc9 from '@angular/material/progress-spinner';
import * as ɵngcc10 from '@ngx-translate/core';
import * as ɵngcc11 from 'apollo-angular';
import * as ɵngcc12 from 'apollo-angular/http';
import * as ɵngcc13 from '@angular/material/button';
import * as ɵngcc14 from '@angular/material/form-field';
import * as ɵngcc15 from '@angular/material/select';
import * as ɵngcc16 from '@angular/material/datepicker';
import * as ɵngcc17 from '@angular/forms';
import * as ɵngcc18 from '@angular/material/chips';
import * as ɵngcc19 from '@angular/material/autocomplete';
import * as ɵngcc20 from '@angular/material/tooltip';
import * as ɵngcc21 from '@angular/material/input';
import * as ɵngcc22 from '@angular/material/progress-bar';
import * as ɵngcc23 from '@angular/material/dialog';
import * as ɵngcc24 from '@angular/material/expansion';
import * as ɵngcc25 from '@angular/material/checkbox';
import * as ɵngcc26 from '@alfresco/adf-content-services';
import * as ɵngcc27 from '@angular/material/radio';
import * as ɵngcc28 from '@angular/material/table';
import * as ɵngcc29 from '@angular/material/menu';

function AppListCloudComponent_div_0_ng_container_1_div_1_adf_cloud_app_details_1_Template(rf, ctx) { if (rf & 1) {
    const _r13 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "adf-cloud-app-details", 9);
    ɵngcc0.ɵɵlistener("selectedApp", function AppListCloudComponent_div_0_ng_container_1_div_1_adf_cloud_app_details_1_Template_adf_cloud_app_details_selectedApp_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r13); const ctx_r12 = ɵngcc0.ɵɵnextContext(4); return ctx_r12.onSelectApp($event); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const app_r11 = ctx.$implicit;
    ɵngcc0.ɵɵproperty("applicationInstance", app_r11);
} }
function AppListCloudComponent_div_0_ng_container_1_div_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 7);
    ɵngcc0.ɵɵtemplate(1, AppListCloudComponent_div_0_ng_container_1_div_1_adf_cloud_app_details_1_Template, 1, 1, "adf-cloud-app-details", 8);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const appsList_r5 = ɵngcc0.ɵɵnextContext(2).ngIf;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", appsList_r5);
} }
function AppListCloudComponent_div_0_ng_container_1_ng_template_2_mat_list_item_1_Template(rf, ctx) { if (rf & 1) {
    const _r18 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "mat-list-item", 12);
    ɵngcc0.ɵɵlistener("click", function AppListCloudComponent_div_0_ng_container_1_ng_template_2_mat_list_item_1_Template_mat_list_item_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r18); const app_r16 = ctx.$implicit; const ctx_r17 = ɵngcc0.ɵɵnextContext(4); return ctx_r17.onSelectApp(app_r16); })("keyup.enter", function AppListCloudComponent_div_0_ng_container_1_ng_template_2_mat_list_item_1_Template_mat_list_item_keyup_enter_0_listener() { ɵngcc0.ɵɵrestoreView(_r18); const app_r16 = ctx.$implicit; const ctx_r19 = ɵngcc0.ɵɵnextContext(4); return ctx_r19.onSelectApp(app_r16); });
    ɵngcc0.ɵɵelementStart(1, "mat-icon", 13);
    ɵngcc0.ɵɵtext(2, "touch_app");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(3, "span", 14);
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const app_r16 = ctx.$implicit;
    ɵngcc0.ɵɵpropertyInterpolate("title", app_r16.name);
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵtextInterpolate(app_r16.name);
} }
function AppListCloudComponent_div_0_ng_container_1_ng_template_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-list", 10);
    ɵngcc0.ɵɵtemplate(1, AppListCloudComponent_div_0_ng_container_1_ng_template_2_mat_list_item_1_Template, 5, 2, "mat-list-item", 11);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const appsList_r5 = ɵngcc0.ɵɵnextContext(2).ngIf;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", appsList_r5);
} }
function AppListCloudComponent_div_0_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, AppListCloudComponent_div_0_ng_container_1_div_1_Template, 2, 1, "div", 5);
    ɵngcc0.ɵɵtemplate(2, AppListCloudComponent_div_0_ng_container_1_ng_template_2_Template, 2, 1, "ng-template", null, 6, ɵngcc0.ɵɵtemplateRefExtractor);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const _r8 = ɵngcc0.ɵɵreference(3);
    const ctx_r6 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r6.isGrid())("ngIfElse", _r8);
} }
function AppListCloudComponent_div_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 3);
    ɵngcc0.ɵɵtemplate(1, AppListCloudComponent_div_0_ng_container_1_Template, 4, 2, "ng-container", 4);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const appsList_r5 = ctx.ngIf;
    ɵngcc0.ɵɵnextContext();
    const _r1 = ɵngcc0.ɵɵreference(3);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", appsList_r5.length > 0)("ngIfElse", _r1);
} }
function AppListCloudComponent_ng_template_2_ng_content_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵprojection(0, 0, ["*ngIf", "hasEmptyCustomContentTemplate; else defaultEmptyTemplate", "class", "adf-custom-empty-template"]);
} }
function AppListCloudComponent_ng_template_2_ng_template_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "adf-empty-content", 17);
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵpipe(2, "translate");
} if (rf & 2) {
    ɵngcc0.ɵɵproperty("title", ɵngcc0.ɵɵpipeBind1(1, 2, "ADF_CLOUD_TASK_LIST.APPS.NO_APPS.TITLE"))("subtitle", ɵngcc0.ɵɵpipeBind1(2, 4, "ADF_CLOUD_TASK_LIST.APPS.NO_APPS.SUBTITLE"));
} }
function AppListCloudComponent_ng_template_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 15);
    ɵngcc0.ɵɵtemplate(1, AppListCloudComponent_ng_template_2_ng_content_1_Template, 1, 0, "ng-content", 4);
    ɵngcc0.ɵɵtemplate(2, AppListCloudComponent_ng_template_2_ng_template_2_Template, 3, 6, "ng-template", null, 16, ɵngcc0.ɵɵtemplateRefExtractor);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const _r22 = ɵngcc0.ɵɵreference(3);
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r2.hasEmptyCustomContentTemplate)("ngIfElse", _r22);
} }
function AppListCloudComponent_ng_template_4_div_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 20);
    ɵngcc0.ɵɵelement(1, "adf-empty-content", 21);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("title", ɵngcc0.ɵɵpipeBind1(2, 2, "ADF_CLOUD_TASK_LIST.APPS.ERROR.TITLE"))("subtitle", ɵngcc0.ɵɵpipeBind1(3, 4, "ADF_CLOUD_TASK_LIST.APPS.ERROR.SUBTITLE"));
} }
function AppListCloudComponent_ng_template_4_ng_template_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "div", 22);
    ɵngcc0.ɵɵelement(2, "mat-spinner");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} }
function AppListCloudComponent_ng_template_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, AppListCloudComponent_ng_template_4_div_0_Template, 4, 6, "div", 18);
    ɵngcc0.ɵɵpipe(1, "async");
    ɵngcc0.ɵɵtemplate(2, AppListCloudComponent_ng_template_4_ng_template_2_Template, 3, 0, "ng-template", null, 19, ɵngcc0.ɵɵtemplateRefExtractor);
} if (rf & 2) {
    const _r25 = ɵngcc0.ɵɵreference(3);
    const ctx_r4 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngIf", ɵngcc0.ɵɵpipeBind1(1, 2, ctx_r4.loadingError$))("ngIfElse", _r25);
} }
const _c0 = [[["adf-custom-empty-content-template"]]];
const _c1 = ["adf-custom-empty-content-template"];
function TaskListCloudComponent_div_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(2, 1, "ADF_CLOUD_TASK_LIST.FILTERS.MESSAGES.NONE"));
} }
function TaskListCloudComponent_ng_container_1_ng_template_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "mat-progress-spinner", 2);
} if (rf & 2) {
    ɵngcc0.ɵɵproperty("color", "primary")("mode", "indeterminate");
} }
function TaskListCloudComponent_ng_container_1_ng_template_5_adf_empty_content_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "adf-empty-content", 4);
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵpipe(2, "translate");
} if (rf & 2) {
    ɵngcc0.ɵɵproperty("title", ɵngcc0.ɵɵpipeBind1(1, 2, "ADF_CLOUD_TASK_LIST.LIST.MESSAGES.TITLE"))("subtitle", ɵngcc0.ɵɵpipeBind1(2, 4, "ADF_CLOUD_TASK_LIST.LIST.MESSAGES.SUBTITLE"));
} }
function TaskListCloudComponent_ng_container_1_ng_template_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, TaskListCloudComponent_ng_container_1_ng_template_5_adf_empty_content_0_Template, 3, 6, "adf-empty-content", 3);
    ɵngcc0.ɵɵprojection(1);
} if (rf & 2) {
    const ctx_r3 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r3.emptyCustomContent);
} }
function TaskListCloudComponent_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    const _r6 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "adf-datatable", 1);
    ɵngcc0.ɵɵlistener("showRowActionsMenu", function TaskListCloudComponent_ng_container_1_Template_adf_datatable_showRowActionsMenu_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r6); const ctx_r5 = ɵngcc0.ɵɵnextContext(); return ctx_r5.onShowRowActionsMenu($event); })("showRowContextMenu", function TaskListCloudComponent_ng_container_1_Template_adf_datatable_showRowContextMenu_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r6); const ctx_r7 = ɵngcc0.ɵɵnextContext(); return ctx_r7.onShowRowContextMenu($event); })("executeRowAction", function TaskListCloudComponent_ng_container_1_Template_adf_datatable_executeRowAction_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r6); const ctx_r8 = ɵngcc0.ɵɵnextContext(); return ctx_r8.onExecuteRowAction($event); })("row-select", function TaskListCloudComponent_ng_container_1_Template_adf_datatable_row_select_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r6); const ctx_r9 = ɵngcc0.ɵɵnextContext(); return ctx_r9.onRowSelect($event); })("row-unselect", function TaskListCloudComponent_ng_container_1_Template_adf_datatable_row_unselect_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r6); const ctx_r10 = ɵngcc0.ɵɵnextContext(); return ctx_r10.onRowUnselect($event); })("rowClick", function TaskListCloudComponent_ng_container_1_Template_adf_datatable_rowClick_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r6); const ctx_r11 = ɵngcc0.ɵɵnextContext(); return ctx_r11.onRowClick($event); })("row-keyup", function TaskListCloudComponent_ng_container_1_Template_adf_datatable_row_keyup_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r6); const ctx_r12 = ɵngcc0.ɵɵnextContext(); return ctx_r12.onRowKeyUp($event); })("sorting-changed", function TaskListCloudComponent_ng_container_1_Template_adf_datatable_sorting_changed_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r6); const ctx_r13 = ɵngcc0.ɵɵnextContext(); return ctx_r13.onSortingChanged($event); });
    ɵngcc0.ɵɵelementStart(2, "adf-loading-content-template");
    ɵngcc0.ɵɵtemplate(3, TaskListCloudComponent_ng_container_1_ng_template_3_Template, 1, 2, "ng-template");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(4, "adf-no-content-template");
    ɵngcc0.ɵɵtemplate(5, TaskListCloudComponent_ng_container_1_ng_template_5_Template, 2, 1, "ng-template");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("rows", ctx_r1.rows)("columns", ctx_r1.columns)("loading", ctx_r1.isLoading)("sorting", ctx_r1.formattedSorting)("multiselect", ctx_r1.multiselect)("selectionMode", ctx_r1.selectionMode)("stickyHeader", ctx_r1.stickyHeader)("actions", ctx_r1.showActions)("actionsPosition", ctx_r1.actionsPosition)("contextMenu", ctx_r1.showContextMenu)("resolverFn", ctx_r1.boundReplacePriorityValues);
} }
function ServiceTaskListCloudComponent_div_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(2, 1, "ADF_CLOUD_TASK_LIST.FILTERS.MESSAGES.NONE"));
} }
function ServiceTaskListCloudComponent_ng_container_1_ng_template_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "mat-progress-spinner", 2);
} if (rf & 2) {
    ɵngcc0.ɵɵproperty("color", "primary")("mode", "indeterminate");
} }
function ServiceTaskListCloudComponent_ng_container_1_ng_template_5_adf_empty_content_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "adf-empty-content", 4);
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵpipe(2, "translate");
} if (rf & 2) {
    ɵngcc0.ɵɵproperty("title", ɵngcc0.ɵɵpipeBind1(1, 2, "ADF_CLOUD_TASK_LIST.LIST.MESSAGES.TITLE"))("subtitle", ɵngcc0.ɵɵpipeBind1(2, 4, "ADF_CLOUD_TASK_LIST.LIST.MESSAGES.SUBTITLE"));
} }
function ServiceTaskListCloudComponent_ng_container_1_ng_template_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, ServiceTaskListCloudComponent_ng_container_1_ng_template_5_adf_empty_content_0_Template, 3, 6, "adf-empty-content", 3);
    ɵngcc0.ɵɵprojection(1);
} if (rf & 2) {
    const ctx_r3 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r3.emptyCustomContent);
} }
function ServiceTaskListCloudComponent_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    const _r6 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "adf-datatable", 1);
    ɵngcc0.ɵɵlistener("showRowActionsMenu", function ServiceTaskListCloudComponent_ng_container_1_Template_adf_datatable_showRowActionsMenu_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r6); const ctx_r5 = ɵngcc0.ɵɵnextContext(); return ctx_r5.onShowRowActionsMenu($event); })("showRowContextMenu", function ServiceTaskListCloudComponent_ng_container_1_Template_adf_datatable_showRowContextMenu_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r6); const ctx_r7 = ɵngcc0.ɵɵnextContext(); return ctx_r7.onShowRowContextMenu($event); })("executeRowAction", function ServiceTaskListCloudComponent_ng_container_1_Template_adf_datatable_executeRowAction_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r6); const ctx_r8 = ɵngcc0.ɵɵnextContext(); return ctx_r8.onExecuteRowAction($event); })("row-select", function ServiceTaskListCloudComponent_ng_container_1_Template_adf_datatable_row_select_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r6); const ctx_r9 = ɵngcc0.ɵɵnextContext(); return ctx_r9.onRowSelect($event); })("row-unselect", function ServiceTaskListCloudComponent_ng_container_1_Template_adf_datatable_row_unselect_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r6); const ctx_r10 = ɵngcc0.ɵɵnextContext(); return ctx_r10.onRowUnselect($event); })("rowClick", function ServiceTaskListCloudComponent_ng_container_1_Template_adf_datatable_rowClick_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r6); const ctx_r11 = ɵngcc0.ɵɵnextContext(); return ctx_r11.onRowClick($event); })("row-keyup", function ServiceTaskListCloudComponent_ng_container_1_Template_adf_datatable_row_keyup_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r6); const ctx_r12 = ɵngcc0.ɵɵnextContext(); return ctx_r12.onRowKeyUp($event); })("sorting-changed", function ServiceTaskListCloudComponent_ng_container_1_Template_adf_datatable_sorting_changed_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r6); const ctx_r13 = ɵngcc0.ɵɵnextContext(); return ctx_r13.onSortingChanged($event); });
    ɵngcc0.ɵɵelementStart(2, "adf-loading-content-template");
    ɵngcc0.ɵɵtemplate(3, ServiceTaskListCloudComponent_ng_container_1_ng_template_3_Template, 1, 2, "ng-template");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(4, "adf-no-content-template");
    ɵngcc0.ɵɵtemplate(5, ServiceTaskListCloudComponent_ng_container_1_ng_template_5_Template, 2, 1, "ng-template");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("rows", ctx_r1.rows)("columns", ctx_r1.columns)("loading", ctx_r1.isLoading)("sorting", ctx_r1.formattedSorting)("multiselect", ctx_r1.multiselect)("selectionMode", ctx_r1.selectionMode)("stickyHeader", ctx_r1.stickyHeader)("actions", ctx_r1.showActions)("actionsPosition", ctx_r1.actionsPosition)("contextMenu", ctx_r1.showContextMenu)("resolverFn", ctx_r1.boundReplacePriorityValues);
} }
const _c2 = ".adf-cloud-task-list-loading-margin{margin-left:calc(50% - 50px);margin-right:calc(50% - 50px)}";
function TaskFiltersCloudComponent_ng_container_0_div_1_adf_icon_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "adf-icon", 8);
} if (rf & 2) {
    const filter_r5 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵproperty("value", filter_r5.icon);
} }
function TaskFiltersCloudComponent_ng_container_0_div_1_span_7_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 9);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "async");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const filter_r5 = ɵngcc0.ɵɵnextContext().$implicit;
    const ctx_r7 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵclassProp("adf-active", ctx_r7.wasFilterUpdated(filter_r5.key));
    ɵngcc0.ɵɵattribute("data-automation-id", filter_r5.key + "_filter-counter");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 4, ctx_r7.counters$[filter_r5.key]), " ");
} }
function TaskFiltersCloudComponent_ng_container_0_div_1_Template(rf, ctx) { if (rf & 1) {
    const _r11 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 3);
    ɵngcc0.ɵɵelementStart(1, "button", 4);
    ɵngcc0.ɵɵlistener("click", function TaskFiltersCloudComponent_ng_container_0_div_1_Template_button_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r11); const filter_r5 = ctx.$implicit; const ctx_r10 = ɵngcc0.ɵɵnextContext(2); return ctx_r10.onFilterClick(filter_r5); });
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵtemplate(3, TaskFiltersCloudComponent_ng_container_0_div_1_adf_icon_3_Template, 1, 1, "adf-icon", 5);
    ɵngcc0.ɵɵelementStart(4, "span", 6);
    ɵngcc0.ɵɵtext(5);
    ɵngcc0.ɵɵpipe(6, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(7, TaskFiltersCloudComponent_ng_container_0_div_1_span_7_Template, 3, 6, "span", 7);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const filter_r5 = ctx.$implicit;
    const ctx_r4 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵclassProp("adf-active", ctx_r4.currentFilter === filter_r5);
    ɵngcc0.ɵɵproperty("id", filter_r5.id);
    ɵngcc0.ɵɵattribute("aria-label", ɵngcc0.ɵɵpipeBind1(2, 8, filter_r5.name))("data-automation-id", filter_r5.key + "_filter");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r4.showIcons);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(6, 10, filter_r5.name));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r4.counters$[filter_r5.key]);
} }
function TaskFiltersCloudComponent_ng_container_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, TaskFiltersCloudComponent_ng_container_0_div_1_Template, 8, 12, "div", 2);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const filterList_r3 = ctx.ngIf;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", filterList_r3);
} }
function TaskFiltersCloudComponent_ng_template_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "div", 10);
    ɵngcc0.ɵɵelement(2, "mat-spinner");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} }
function DateRangeFilterComponent_mat_option_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-option", 4);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const propertyOption_r2 = ctx.$implicit;
    ɵngcc0.ɵɵproperty("value", propertyOption_r2.value);
    ɵngcc0.ɵɵattribute("data-automation-id", "adf-cloud-edit-process-property-options-" + propertyOption_r2.value.toString());
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 3, propertyOption_r2.label), " ");
} }
function DateRangeFilterComponent_ng_container_4_Template(rf, ctx) { if (rf & 1) {
    const _r5 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "mat-form-field", 5);
    ɵngcc0.ɵɵelementStart(2, "mat-label");
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵpipe(4, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(5, "mat-date-range-input", 6);
    ɵngcc0.ɵɵelement(6, "input", 7);
    ɵngcc0.ɵɵpipe(7, "translate");
    ɵngcc0.ɵɵelement(8, "input", 8);
    ɵngcc0.ɵɵpipe(9, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(10, "mat-datepicker-toggle", 9);
    ɵngcc0.ɵɵelementStart(11, "mat-date-range-picker", 10, 11);
    ɵngcc0.ɵɵlistener("closed", function DateRangeFilterComponent_ng_container_4_Template_mat_date_range_picker_closed_11_listener() { ɵngcc0.ɵɵrestoreView(_r5); const ctx_r4 = ɵngcc0.ɵɵnextContext(); return ctx_r4.onDateRangeClosed(); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const _r3 = ɵngcc0.ɵɵreference(12);
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("floatLabel", "auto");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(4, 8, "ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.DATE_RANGE_TITLE"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("formGroup", ctx_r1.dateRangeForm)("rangePicker", _r3);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate("placeholder", ɵngcc0.ɵɵpipeBind1(7, 10, "ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.START_DATE"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵpropertyInterpolate("placeholder", ɵngcc0.ɵɵpipeBind1(9, 12, "ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.END_DATE"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("for", _r3);
    ɵngcc0.ɵɵattribute("data-automation-id", "adf-cloud-edit-process-property-date-range-" + ctx_r1.processFilterProperty.key);
} }
const _c3 = ["userInput"];
function PeopleCloudComponent_mat_label_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-label", 13);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(2, 1, ctx_r0.title));
} }
function PeopleCloudComponent_mat_chip_5_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-icon", 16);
    ɵngcc0.ɵɵtext(1, " cancel ");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const user_r15 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵattribute("data-automation-id", "adf-people-cloud-chip-remove-icon-" + user_r15.username);
} }
function PeopleCloudComponent_mat_chip_5_Template(rf, ctx) { if (rf & 1) {
    const _r19 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "mat-chip", 14);
    ɵngcc0.ɵɵlistener("removed", function PeopleCloudComponent_mat_chip_5_Template_mat_chip_removed_0_listener() { ɵngcc0.ɵɵrestoreView(_r19); const user_r15 = ctx.$implicit; const ctx_r18 = ɵngcc0.ɵɵnextContext(); return ctx_r18.onRemove(user_r15); });
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "fullName");
    ɵngcc0.ɵɵtemplate(4, PeopleCloudComponent_mat_chip_5_mat_icon_4_Template, 2, 1, "mat-icon", 15);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const user_r15 = ctx.$implicit;
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵpropertyInterpolate("matTooltip", ɵngcc0.ɵɵpipeBind1(1, 5, user_r15.readonly ? "ADF_CLOUD_GROUPS.MANDATORY" : ""));
    ɵngcc0.ɵɵproperty("removable", !user_r15.readonly);
    ɵngcc0.ɵɵattribute("data-automation-id", "adf-people-cloud-chip-" + user_r15.username);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(3, 7, user_r15), " ");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", !(user_r15.readonly || ctx_r2.readOnly));
} }
function PeopleCloudComponent_input_6_Template(rf, ctx) { if (rf & 1) {
    const _r22 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "input", 17, 18);
    ɵngcc0.ɵɵlistener("focus", function PeopleCloudComponent_input_6_Template_input_focus_0_listener() { ɵngcc0.ɵɵrestoreView(_r22); const ctx_r21 = ɵngcc0.ɵɵnextContext(); return ctx_r21.setFocus(true); })("blur", function PeopleCloudComponent_input_6_Template_input_blur_0_listener() { ɵngcc0.ɵɵrestoreView(_r22); const ctx_r23 = ɵngcc0.ɵɵnextContext(); return ctx_r23.setFocus(false); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = ɵngcc0.ɵɵnextContext();
    const _r4 = ɵngcc0.ɵɵreference(8);
    const _r1 = ɵngcc0.ɵɵreference(4);
    ɵngcc0.ɵɵproperty("formControl", ctx_r3.searchUserCtrl)("matAutocomplete", _r4)("matChipInputFor", _r1);
} }
function PeopleCloudComponent_ng_container_9_mat_option_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-option", 20);
    ɵngcc0.ɵɵelementStart(1, "div", 21);
    ɵngcc0.ɵɵelement(2, "div", 22);
    ɵngcc0.ɵɵpipe(3, "usernameInitials");
    ɵngcc0.ɵɵelementStart(4, "span", 23);
    ɵngcc0.ɵɵtext(5);
    ɵngcc0.ɵɵpipe(6, "fullName");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const user_r25 = ctx.$implicit;
    ɵngcc0.ɵɵproperty("value", user_r25);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate1("id", "adf-people-cloud-user-", user_r25.username, "");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("outerHTML", ɵngcc0.ɵɵpipeBind2(3, 4, user_r25, "adf-people-cloud-pic"), ɵngcc0.ɵɵsanitizeHtml);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(6, 7, user_r25), "");
} }
function PeopleCloudComponent_ng_container_9_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, PeopleCloudComponent_ng_container_9_mat_option_1_Template, 7, 9, "mat-option", 19);
    ɵngcc0.ɵɵpipe(2, "async");
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r5 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", ɵngcc0.ɵɵpipeBind1(2, 1, ctx_r5.searchUsers$));
} }
const _c4 = function (a0) { return { userName: a0 }; };
function PeopleCloudComponent_ng_template_11_mat_option_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-option", 25);
    ɵngcc0.ɵɵelementStart(1, "span");
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r27 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind2(3, 1, "ADF_CLOUD_USERS.ERROR.NOT_FOUND", ɵngcc0.ɵɵpureFunction1(4, _c4, ctx_r27.searchedValue)), "");
} }
function PeopleCloudComponent_ng_template_11_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, PeopleCloudComponent_ng_template_11_mat_option_0_Template, 4, 6, "mat-option", 24);
} if (rf & 2) {
    const ctx_r7 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngIf", ctx_r7.searchUserCtrl.hasError("searchTypingError") && !ctx_r7.searchLoading);
} }
function PeopleCloudComponent_mat_progress_bar_13_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "mat-progress-bar", 26);
} }
function PeopleCloudComponent_mat_error_14_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-error");
    ɵngcc0.ɵɵelementStart(1, "mat-icon", 27);
    ɵngcc0.ɵɵtext(2, "warning");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵpipe(4, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r9 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind2(4, 1, "ADF_CLOUD_USERS.ERROR.NOT_FOUND", ɵngcc0.ɵɵpureFunction1(4, _c4, ctx_r9.validateUsersMessage)), "");
} }
const _c5 = function (a0) { return { pattern: a0 }; };
function PeopleCloudComponent_mat_error_15_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-error");
    ɵngcc0.ɵɵelementStart(1, "mat-icon", 27);
    ɵngcc0.ɵɵtext(2, "warning");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵpipe(4, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r10 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind2(4, 1, "ADF_CLOUD_PEOPLE_GROUPS.ERROR.INVALID_PATTERN", ɵngcc0.ɵɵpureFunction1(4, _c5, ctx_r10.getValidationPattern())), "");
} }
const _c6 = function (a0) { return { requiredLength: a0 }; };
function PeopleCloudComponent_mat_error_16_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-error");
    ɵngcc0.ɵɵelementStart(1, "mat-icon", 27);
    ɵngcc0.ɵɵtext(2, "warning");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵpipe(4, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r11 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind2(4, 1, "ADF_CLOUD_PEOPLE_GROUPS.ERROR.INVALID_MAX_LENGTH", ɵngcc0.ɵɵpureFunction1(4, _c6, ctx_r11.getValidationMaxLength())), " ");
} }
function PeopleCloudComponent_mat_error_17_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-error");
    ɵngcc0.ɵɵelementStart(1, "mat-icon", 27);
    ɵngcc0.ɵɵtext(2, "warning");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵpipe(4, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r12 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind2(4, 1, "ADF_CLOUD_PEOPLE_GROUPS.ERROR.INVALID_MIN_LENGTH", ɵngcc0.ɵɵpureFunction1(4, _c6, ctx_r12.getValidationMinLength())), "");
} }
function PeopleCloudComponent_mat_error_18_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-error");
    ɵngcc0.ɵɵelementStart(1, "mat-icon", 27);
    ɵngcc0.ɵɵtext(2, "warning");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵpipe(4, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(4, 1, "ADF_CLOUD_PEOPLE_GROUPS.ERROR.REQUIRED"), " ");
} }
function PeopleCloudComponent_mat_error_19_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-error", 28);
    ɵngcc0.ɵɵelementStart(1, "mat-icon", 27);
    ɵngcc0.ɵɵtext(2, "warning");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵpipe(4, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r14 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind2(4, 1, "ADF_CLOUD_USERS.ERROR.NOT_FOUND", ɵngcc0.ɵɵpureFunction1(4, _c4, ctx_r14.searchedValue)), "");
} }
function EditServiceTaskFilterCloudComponent_mat_expansion_panel_header_2_ng_container_1_mat_panel_title_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-panel-title", 10);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r5 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(2, 1, ctx_r5.taskFilter.name));
} }
function EditServiceTaskFilterCloudComponent_mat_expansion_panel_header_2_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(2, 1, "ADF_CLOUD_EDIT_TASK_FILTER.TITLE"));
} }
function EditServiceTaskFilterCloudComponent_mat_expansion_panel_header_2_ng_container_1_div_4_ng_container_1_button_1_Template(rf, ctx) { if (rf & 1) {
    const _r12 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 13);
    ɵngcc0.ɵɵlistener("click", function EditServiceTaskFilterCloudComponent_mat_expansion_panel_header_2_ng_container_1_div_4_ng_container_1_button_1_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r12); const filterAction_r10 = ctx.$implicit; const ctx_r11 = ɵngcc0.ɵɵnextContext(5); return ctx_r11.executeFilterActions(filterAction_r10); });
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵelement(2, "adf-icon", 14);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const filterAction_r10 = ctx.$implicit;
    const ctx_r9 = ɵngcc0.ɵɵnextContext(5);
    ɵngcc0.ɵɵpropertyInterpolate("matTooltip", ɵngcc0.ɵɵpipeBind1(1, 4, filterAction_r10.tooltip));
    ɵngcc0.ɵɵproperty("disabled", ctx_r9.isDisabledAction(filterAction_r10));
    ɵngcc0.ɵɵattribute("data-automation-id", "adf-filter-action-" + filterAction_r10.actionType);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("value", filterAction_r10.icon);
} }
function EditServiceTaskFilterCloudComponent_mat_expansion_panel_header_2_ng_container_1_div_4_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, EditServiceTaskFilterCloudComponent_mat_expansion_panel_header_2_ng_container_1_div_4_ng_container_1_button_1_Template, 3, 6, "button", 12);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r8 = ɵngcc0.ɵɵnextContext(4);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r8.taskFilterActions);
} }
function EditServiceTaskFilterCloudComponent_mat_expansion_panel_header_2_ng_container_1_div_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 11);
    ɵngcc0.ɵɵtemplate(1, EditServiceTaskFilterCloudComponent_mat_expansion_panel_header_2_ng_container_1_div_4_ng_container_1_Template, 2, 1, "ng-container", 3);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r7 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r7.toggleFilterActions);
} }
function EditServiceTaskFilterCloudComponent_mat_expansion_panel_header_2_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, EditServiceTaskFilterCloudComponent_mat_expansion_panel_header_2_ng_container_1_mat_panel_title_1_Template, 3, 3, "mat-panel-title", 7);
    ɵngcc0.ɵɵelementStart(2, "mat-panel-description", 8);
    ɵngcc0.ɵɵtemplate(3, EditServiceTaskFilterCloudComponent_mat_expansion_panel_header_2_ng_container_1_span_3_Template, 3, 3, "span", 3);
    ɵngcc0.ɵɵtemplate(4, EditServiceTaskFilterCloudComponent_mat_expansion_panel_header_2_ng_container_1_div_4_Template, 2, 1, "div", 9);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r2.showTaskFilterName);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r2.showTitle);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r2.showFilterActions);
} }
function EditServiceTaskFilterCloudComponent_mat_expansion_panel_header_2_ng_template_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 15);
    ɵngcc0.ɵɵelement(1, "mat-spinner", 16);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("diameter", 30);
} }
function EditServiceTaskFilterCloudComponent_mat_expansion_panel_header_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-expansion-panel-header", 4);
    ɵngcc0.ɵɵtemplate(1, EditServiceTaskFilterCloudComponent_mat_expansion_panel_header_2_ng_container_1_Template, 5, 3, "ng-container", 5);
    ɵngcc0.ɵɵtemplate(2, EditServiceTaskFilterCloudComponent_mat_expansion_panel_header_2_ng_template_2_Template, 2, 1, "ng-template", null, 6, ɵngcc0.ɵɵtemplateRefExtractor);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const _r3 = ɵngcc0.ɵɵreference(3);
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r0.isLoading)("ngIfElse", _r3);
} }
function EditServiceTaskFilterCloudComponent_ng_container_3_form_1_ng_container_2_mat_form_field_1_mat_option_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-option", 14);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const propertyOption_r24 = ctx.$implicit;
    const taskFilterProperty_r15 = ɵngcc0.ɵɵnextContext(2).$implicit;
    ɵngcc0.ɵɵproperty("value", propertyOption_r24.value);
    ɵngcc0.ɵɵattribute("data-automation-id", "adf-cloud-edit-task-property-options-" + taskFilterProperty_r15.key);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 3, propertyOption_r24.label), " ");
} }
function EditServiceTaskFilterCloudComponent_ng_container_3_form_1_ng_container_2_mat_form_field_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-form-field", 26);
    ɵngcc0.ɵɵelementStart(1, "mat-select", 27);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵtemplate(3, EditServiceTaskFilterCloudComponent_ng_container_3_form_1_ng_container_2_mat_form_field_1_mat_option_3_Template, 3, 5, "mat-option", 28);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const taskFilterProperty_r15 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵproperty("floatLabel", "auto");
    ɵngcc0.ɵɵattribute("data-automation-id", taskFilterProperty_r15.key);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate("placeholder", ɵngcc0.ɵɵpipeBind1(2, 6, taskFilterProperty_r15.label));
    ɵngcc0.ɵɵproperty("formControlName", taskFilterProperty_r15.key);
    ɵngcc0.ɵɵattribute("data-automation-id", "adf-cloud-edit-task-property-" + taskFilterProperty_r15.key);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngForOf", taskFilterProperty_r15.options);
} }
function EditServiceTaskFilterCloudComponent_ng_container_3_form_1_ng_container_2_mat_form_field_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-form-field", 26);
    ɵngcc0.ɵɵelement(1, "input", 29);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const taskFilterProperty_r15 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵproperty("floatLabel", "auto");
    ɵngcc0.ɵɵattribute("data-automation-id", taskFilterProperty_r15.key);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate("placeholder", ɵngcc0.ɵɵpipeBind1(2, 5, taskFilterProperty_r15.label));
    ɵngcc0.ɵɵproperty("formControlName", taskFilterProperty_r15.key);
    ɵngcc0.ɵɵattribute("data-automation-id", "adf-cloud-edit-task-property-" + taskFilterProperty_r15.key);
} }
function EditServiceTaskFilterCloudComponent_ng_container_3_form_1_ng_container_2_mat_form_field_3_div_10_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div");
    ɵngcc0.ɵɵelementStart(1, "div", 34);
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(4, "mat-icon", 35);
    ɵngcc0.ɵɵtext(5, "warning");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(3, 1, "ADF_TASK_LIST.START_TASK.FORM.ERROR.DATE"));
} }
function EditServiceTaskFilterCloudComponent_ng_container_3_form_1_ng_container_2_mat_form_field_3_Template(rf, ctx) { if (rf & 1) {
    const _r31 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "mat-form-field", 26);
    ɵngcc0.ɵɵelementStart(1, "mat-label");
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(4, "input", 30);
    ɵngcc0.ɵɵlistener("keyup", function EditServiceTaskFilterCloudComponent_ng_container_3_form_1_ng_container_2_mat_form_field_3_Template_input_keyup_4_listener($event) { ɵngcc0.ɵɵrestoreView(_r31); const taskFilterProperty_r15 = ɵngcc0.ɵɵnextContext().$implicit; const ctx_r30 = ɵngcc0.ɵɵnextContext(3); return ctx_r30.onDateChanged($event.srcElement.value, taskFilterProperty_r15); })("dateChange", function EditServiceTaskFilterCloudComponent_ng_container_3_form_1_ng_container_2_mat_form_field_3_Template_input_dateChange_4_listener($event) { ɵngcc0.ɵɵrestoreView(_r31); const taskFilterProperty_r15 = ɵngcc0.ɵɵnextContext().$implicit; const ctx_r33 = ɵngcc0.ɵɵnextContext(3); return ctx_r33.onDateChanged($event.value, taskFilterProperty_r15); });
    ɵngcc0.ɵɵpipe(5, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(6, "mat-datepicker-toggle", 31);
    ɵngcc0.ɵɵelement(7, "mat-datepicker", null, 32);
    ɵngcc0.ɵɵelementStart(9, "div", 33);
    ɵngcc0.ɵɵtemplate(10, EditServiceTaskFilterCloudComponent_ng_container_3_form_1_ng_container_2_mat_form_field_3_div_10_Template, 6, 3, "div", 3);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const _r28 = ɵngcc0.ɵɵreference(8);
    const taskFilterProperty_r15 = ɵngcc0.ɵɵnextContext().$implicit;
    const ctx_r18 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵproperty("floatLabel", "auto");
    ɵngcc0.ɵɵattribute("data-automation-id", taskFilterProperty_r15.key);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(3, 10, taskFilterProperty_r15.label));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵpropertyInterpolate("placeholder", ɵngcc0.ɵɵpipeBind1(5, 12, taskFilterProperty_r15.label));
    ɵngcc0.ɵɵproperty("matDatepicker", _r28);
    ɵngcc0.ɵɵattribute("data-automation-id", "adf-cloud-edit-task-property-" + taskFilterProperty_r15.key);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("for", _r28);
    ɵngcc0.ɵɵattribute("data-automation-id", "adf-cloud-edit-task-property-date-toggle-" + taskFilterProperty_r15.key);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵattribute("data-automation-id", "adf-cloud-edit-task-property-date-picker-" + taskFilterProperty_r15.key);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r18.hasError(taskFilterProperty_r15));
} }
function EditServiceTaskFilterCloudComponent_ng_container_3_form_1_ng_container_2_div_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 36);
    ɵngcc0.ɵɵelementStart(1, "mat-checkbox", 37);
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const taskFilterProperty_r15 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("formControlName", taskFilterProperty_r15.key);
    ɵngcc0.ɵɵattribute("data-automation-id", taskFilterProperty_r15.key);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(3, 3, taskFilterProperty_r15.label));
} }
function EditServiceTaskFilterCloudComponent_ng_container_3_form_1_ng_container_2_adf_cloud_date_range_filter_5_Template(rf, ctx) { if (rf & 1) {
    const _r39 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "adf-cloud-date-range-filter", 38, 39);
    ɵngcc0.ɵɵlistener("dateTypeChange", function EditServiceTaskFilterCloudComponent_ng_container_3_form_1_ng_container_2_adf_cloud_date_range_filter_5_Template_adf_cloud_date_range_filter_dateTypeChange_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r39); const taskFilterProperty_r15 = ɵngcc0.ɵɵnextContext().$implicit; const ctx_r38 = ɵngcc0.ɵɵnextContext(3); return ctx_r38.onDateTypeChange($event, taskFilterProperty_r15); })("dateChanged", function EditServiceTaskFilterCloudComponent_ng_container_3_form_1_ng_container_2_adf_cloud_date_range_filter_5_Template_adf_cloud_date_range_filter_dateChanged_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r39); const taskFilterProperty_r15 = ɵngcc0.ɵɵnextContext().$implicit; const ctx_r41 = ɵngcc0.ɵɵnextContext(3); return ctx_r41.onDateRangeFilterChanged($event, taskFilterProperty_r15); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const taskFilterProperty_r15 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵproperty("processFilterProperty", taskFilterProperty_r15)("options", taskFilterProperty_r15.dateFilterOptions);
} }
function EditServiceTaskFilterCloudComponent_ng_container_3_form_1_ng_container_2_div_6_Template(rf, ctx) { if (rf & 1) {
    const _r45 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 40);
    ɵngcc0.ɵɵelementStart(1, "adf-cloud-people", 41);
    ɵngcc0.ɵɵlistener("changedUsers", function EditServiceTaskFilterCloudComponent_ng_container_3_form_1_ng_container_2_div_6_Template_adf_cloud_people_changedUsers_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r45); const taskFilterProperty_r15 = ɵngcc0.ɵɵnextContext().$implicit; const ctx_r44 = ɵngcc0.ɵɵnextContext(3); return ctx_r44.onChangedUser($event, taskFilterProperty_r15); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const taskFilterProperty_r15 = ɵngcc0.ɵɵnextContext().$implicit;
    const ctx_r21 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵclassMap("adf-edit-task-filter-" + taskFilterProperty_r15.key);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("preSelectUsers", taskFilterProperty_r15.value)("title", taskFilterProperty_r15.label)("validate", true)("appName", ctx_r21.appName)("mode", taskFilterProperty_r15.selectionMode);
} }
function EditServiceTaskFilterCloudComponent_ng_container_3_form_1_ng_container_2_adf_cloud_task_assignment_filter_7_Template(rf, ctx) { if (rf & 1) {
    const _r49 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "adf-cloud-task-assignment-filter", 42);
    ɵngcc0.ɵɵlistener("assignedChange", function EditServiceTaskFilterCloudComponent_ng_container_3_form_1_ng_container_2_adf_cloud_task_assignment_filter_7_Template_adf_cloud_task_assignment_filter_assignedChange_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r49); const ctx_r48 = ɵngcc0.ɵɵnextContext(4); return ctx_r48.onAssignedChange($event); })("assignedGroupChange", function EditServiceTaskFilterCloudComponent_ng_container_3_form_1_ng_container_2_adf_cloud_task_assignment_filter_7_Template_adf_cloud_task_assignment_filter_assignedGroupChange_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r49); const ctx_r50 = ɵngcc0.ɵɵnextContext(4); return ctx_r50.onAssignedGroupsChange($event); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const taskFilterProperty_r15 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵproperty("taskFilterProperty", taskFilterProperty_r15);
} }
function EditServiceTaskFilterCloudComponent_ng_container_3_form_1_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, EditServiceTaskFilterCloudComponent_ng_container_3_form_1_ng_container_2_mat_form_field_1_Template, 4, 8, "mat-form-field", 21);
    ɵngcc0.ɵɵtemplate(2, EditServiceTaskFilterCloudComponent_ng_container_3_form_1_ng_container_2_mat_form_field_2_Template, 3, 7, "mat-form-field", 21);
    ɵngcc0.ɵɵtemplate(3, EditServiceTaskFilterCloudComponent_ng_container_3_form_1_ng_container_2_mat_form_field_3_Template, 11, 14, "mat-form-field", 21);
    ɵngcc0.ɵɵtemplate(4, EditServiceTaskFilterCloudComponent_ng_container_3_form_1_ng_container_2_div_4_Template, 4, 5, "div", 22);
    ɵngcc0.ɵɵtemplate(5, EditServiceTaskFilterCloudComponent_ng_container_3_form_1_ng_container_2_adf_cloud_date_range_filter_5_Template, 2, 2, "adf-cloud-date-range-filter", 23);
    ɵngcc0.ɵɵtemplate(6, EditServiceTaskFilterCloudComponent_ng_container_3_form_1_ng_container_2_div_6_Template, 2, 8, "div", 24);
    ɵngcc0.ɵɵtemplate(7, EditServiceTaskFilterCloudComponent_ng_container_3_form_1_ng_container_2_adf_cloud_task_assignment_filter_7_Template, 1, 1, "adf-cloud-task-assignment-filter", 25);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const taskFilterProperty_r15 = ctx.$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", taskFilterProperty_r15.type === "select");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", taskFilterProperty_r15.type === "text");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", taskFilterProperty_r15.type === "date");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", taskFilterProperty_r15.type === "checkbox");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", taskFilterProperty_r15.type === "date-range");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", taskFilterProperty_r15.type === "people");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", taskFilterProperty_r15.type === "assignment");
} }
function EditServiceTaskFilterCloudComponent_ng_container_3_form_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "form", 18);
    ɵngcc0.ɵɵelementStart(1, "div", 19);
    ɵngcc0.ɵɵtemplate(2, EditServiceTaskFilterCloudComponent_ng_container_3_form_1_ng_container_2_Template, 8, 7, "ng-container", 20);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r13 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("formGroup", ctx_r13.editTaskFilterForm);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r13.taskFilterProperties);
} }
function EditServiceTaskFilterCloudComponent_ng_container_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, EditServiceTaskFilterCloudComponent_ng_container_3_form_1_Template, 3, 2, "form", 17);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r1.editTaskFilterForm);
} }
function EditTaskFilterCloudComponent_mat_expansion_panel_header_2_ng_container_1_mat_panel_title_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-panel-title", 10);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r5 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(2, 1, ctx_r5.taskFilter.name));
} }
function EditTaskFilterCloudComponent_mat_expansion_panel_header_2_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(2, 1, "ADF_CLOUD_EDIT_TASK_FILTER.TITLE"));
} }
function EditTaskFilterCloudComponent_mat_expansion_panel_header_2_ng_container_1_div_4_ng_container_1_button_1_Template(rf, ctx) { if (rf & 1) {
    const _r12 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 13);
    ɵngcc0.ɵɵlistener("click", function EditTaskFilterCloudComponent_mat_expansion_panel_header_2_ng_container_1_div_4_ng_container_1_button_1_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r12); const filterAction_r10 = ctx.$implicit; const ctx_r11 = ɵngcc0.ɵɵnextContext(5); return ctx_r11.executeFilterActions(filterAction_r10); });
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵelement(2, "adf-icon", 14);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const filterAction_r10 = ctx.$implicit;
    const ctx_r9 = ɵngcc0.ɵɵnextContext(5);
    ɵngcc0.ɵɵpropertyInterpolate("matTooltip", ɵngcc0.ɵɵpipeBind1(1, 4, filterAction_r10.tooltip));
    ɵngcc0.ɵɵproperty("disabled", ctx_r9.isDisabledAction(filterAction_r10));
    ɵngcc0.ɵɵattribute("data-automation-id", "adf-filter-action-" + filterAction_r10.actionType);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("value", filterAction_r10.icon);
} }
function EditTaskFilterCloudComponent_mat_expansion_panel_header_2_ng_container_1_div_4_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, EditTaskFilterCloudComponent_mat_expansion_panel_header_2_ng_container_1_div_4_ng_container_1_button_1_Template, 3, 6, "button", 12);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r8 = ɵngcc0.ɵɵnextContext(4);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r8.taskFilterActions);
} }
function EditTaskFilterCloudComponent_mat_expansion_panel_header_2_ng_container_1_div_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 11);
    ɵngcc0.ɵɵtemplate(1, EditTaskFilterCloudComponent_mat_expansion_panel_header_2_ng_container_1_div_4_ng_container_1_Template, 2, 1, "ng-container", 3);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r7 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r7.toggleFilterActions);
} }
function EditTaskFilterCloudComponent_mat_expansion_panel_header_2_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, EditTaskFilterCloudComponent_mat_expansion_panel_header_2_ng_container_1_mat_panel_title_1_Template, 3, 3, "mat-panel-title", 7);
    ɵngcc0.ɵɵelementStart(2, "mat-panel-description", 8);
    ɵngcc0.ɵɵtemplate(3, EditTaskFilterCloudComponent_mat_expansion_panel_header_2_ng_container_1_span_3_Template, 3, 3, "span", 3);
    ɵngcc0.ɵɵtemplate(4, EditTaskFilterCloudComponent_mat_expansion_panel_header_2_ng_container_1_div_4_Template, 2, 1, "div", 9);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r2.showTaskFilterName);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r2.showTitle);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r2.showFilterActions);
} }
function EditTaskFilterCloudComponent_mat_expansion_panel_header_2_ng_template_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 15);
    ɵngcc0.ɵɵelement(1, "mat-spinner", 16);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("diameter", 30);
} }
function EditTaskFilterCloudComponent_mat_expansion_panel_header_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-expansion-panel-header", 4);
    ɵngcc0.ɵɵtemplate(1, EditTaskFilterCloudComponent_mat_expansion_panel_header_2_ng_container_1_Template, 5, 3, "ng-container", 5);
    ɵngcc0.ɵɵtemplate(2, EditTaskFilterCloudComponent_mat_expansion_panel_header_2_ng_template_2_Template, 2, 1, "ng-template", null, 6, ɵngcc0.ɵɵtemplateRefExtractor);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const _r3 = ɵngcc0.ɵɵreference(3);
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r0.isLoading)("ngIfElse", _r3);
} }
function EditTaskFilterCloudComponent_ng_container_3_form_1_ng_container_2_mat_form_field_1_mat_option_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-option", 14);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const propertyOption_r24 = ctx.$implicit;
    const taskFilterProperty_r15 = ɵngcc0.ɵɵnextContext(2).$implicit;
    ɵngcc0.ɵɵproperty("value", propertyOption_r24.value);
    ɵngcc0.ɵɵattribute("data-automation-id", "adf-cloud-edit-task-property-options-" + taskFilterProperty_r15.key);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 3, propertyOption_r24.label), " ");
} }
function EditTaskFilterCloudComponent_ng_container_3_form_1_ng_container_2_mat_form_field_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-form-field", 26);
    ɵngcc0.ɵɵelementStart(1, "mat-select", 27);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵtemplate(3, EditTaskFilterCloudComponent_ng_container_3_form_1_ng_container_2_mat_form_field_1_mat_option_3_Template, 3, 5, "mat-option", 28);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const taskFilterProperty_r15 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵproperty("floatLabel", "auto");
    ɵngcc0.ɵɵattribute("data-automation-id", taskFilterProperty_r15.key);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate("placeholder", ɵngcc0.ɵɵpipeBind1(2, 6, taskFilterProperty_r15.label));
    ɵngcc0.ɵɵproperty("formControlName", taskFilterProperty_r15.key);
    ɵngcc0.ɵɵattribute("data-automation-id", "adf-cloud-edit-task-property-" + taskFilterProperty_r15.key);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngForOf", taskFilterProperty_r15.options);
} }
function EditTaskFilterCloudComponent_ng_container_3_form_1_ng_container_2_mat_form_field_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-form-field", 26);
    ɵngcc0.ɵɵelement(1, "input", 29);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const taskFilterProperty_r15 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵproperty("floatLabel", "auto");
    ɵngcc0.ɵɵattribute("data-automation-id", taskFilterProperty_r15.key);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate("placeholder", ɵngcc0.ɵɵpipeBind1(2, 5, taskFilterProperty_r15.label));
    ɵngcc0.ɵɵproperty("formControlName", taskFilterProperty_r15.key);
    ɵngcc0.ɵɵattribute("data-automation-id", "adf-cloud-edit-task-property-" + taskFilterProperty_r15.key);
} }
function EditTaskFilterCloudComponent_ng_container_3_form_1_ng_container_2_mat_form_field_3_div_10_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div");
    ɵngcc0.ɵɵelementStart(1, "div", 34);
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(4, "mat-icon", 35);
    ɵngcc0.ɵɵtext(5, "warning");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(3, 1, "ADF_TASK_LIST.START_TASK.FORM.ERROR.DATE"));
} }
function EditTaskFilterCloudComponent_ng_container_3_form_1_ng_container_2_mat_form_field_3_Template(rf, ctx) { if (rf & 1) {
    const _r31 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "mat-form-field", 26);
    ɵngcc0.ɵɵelementStart(1, "mat-label");
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(4, "input", 30);
    ɵngcc0.ɵɵlistener("keyup", function EditTaskFilterCloudComponent_ng_container_3_form_1_ng_container_2_mat_form_field_3_Template_input_keyup_4_listener($event) { ɵngcc0.ɵɵrestoreView(_r31); const taskFilterProperty_r15 = ɵngcc0.ɵɵnextContext().$implicit; const ctx_r30 = ɵngcc0.ɵɵnextContext(3); return ctx_r30.onDateChanged($event.srcElement.value, taskFilterProperty_r15); })("dateChange", function EditTaskFilterCloudComponent_ng_container_3_form_1_ng_container_2_mat_form_field_3_Template_input_dateChange_4_listener($event) { ɵngcc0.ɵɵrestoreView(_r31); const taskFilterProperty_r15 = ɵngcc0.ɵɵnextContext().$implicit; const ctx_r33 = ɵngcc0.ɵɵnextContext(3); return ctx_r33.onDateChanged($event.value, taskFilterProperty_r15); });
    ɵngcc0.ɵɵpipe(5, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(6, "mat-datepicker-toggle", 31);
    ɵngcc0.ɵɵelement(7, "mat-datepicker", null, 32);
    ɵngcc0.ɵɵelementStart(9, "div", 33);
    ɵngcc0.ɵɵtemplate(10, EditTaskFilterCloudComponent_ng_container_3_form_1_ng_container_2_mat_form_field_3_div_10_Template, 6, 3, "div", 3);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const _r28 = ɵngcc0.ɵɵreference(8);
    const taskFilterProperty_r15 = ɵngcc0.ɵɵnextContext().$implicit;
    const ctx_r18 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵproperty("floatLabel", "auto");
    ɵngcc0.ɵɵattribute("data-automation-id", taskFilterProperty_r15.key);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(3, 10, taskFilterProperty_r15.label));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵpropertyInterpolate("placeholder", ɵngcc0.ɵɵpipeBind1(5, 12, taskFilterProperty_r15.label));
    ɵngcc0.ɵɵproperty("matDatepicker", _r28);
    ɵngcc0.ɵɵattribute("data-automation-id", "adf-cloud-edit-task-property-" + taskFilterProperty_r15.key);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("for", _r28);
    ɵngcc0.ɵɵattribute("data-automation-id", "adf-cloud-edit-task-property-date-toggle-" + taskFilterProperty_r15.key);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵattribute("data-automation-id", "adf-cloud-edit-task-property-date-picker-" + taskFilterProperty_r15.key);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r18.hasError(taskFilterProperty_r15));
} }
function EditTaskFilterCloudComponent_ng_container_3_form_1_ng_container_2_div_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 36);
    ɵngcc0.ɵɵelementStart(1, "mat-checkbox", 37);
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const taskFilterProperty_r15 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("formControlName", taskFilterProperty_r15.key);
    ɵngcc0.ɵɵattribute("data-automation-id", taskFilterProperty_r15.key);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(3, 3, taskFilterProperty_r15.label));
} }
function EditTaskFilterCloudComponent_ng_container_3_form_1_ng_container_2_adf_cloud_date_range_filter_5_Template(rf, ctx) { if (rf & 1) {
    const _r39 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "adf-cloud-date-range-filter", 38, 39);
    ɵngcc0.ɵɵlistener("dateTypeChange", function EditTaskFilterCloudComponent_ng_container_3_form_1_ng_container_2_adf_cloud_date_range_filter_5_Template_adf_cloud_date_range_filter_dateTypeChange_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r39); const taskFilterProperty_r15 = ɵngcc0.ɵɵnextContext().$implicit; const ctx_r38 = ɵngcc0.ɵɵnextContext(3); return ctx_r38.onDateTypeChange($event, taskFilterProperty_r15); })("dateChanged", function EditTaskFilterCloudComponent_ng_container_3_form_1_ng_container_2_adf_cloud_date_range_filter_5_Template_adf_cloud_date_range_filter_dateChanged_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r39); const taskFilterProperty_r15 = ɵngcc0.ɵɵnextContext().$implicit; const ctx_r41 = ɵngcc0.ɵɵnextContext(3); return ctx_r41.onDateRangeFilterChanged($event, taskFilterProperty_r15); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const taskFilterProperty_r15 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵproperty("processFilterProperty", taskFilterProperty_r15)("options", taskFilterProperty_r15.dateFilterOptions);
} }
function EditTaskFilterCloudComponent_ng_container_3_form_1_ng_container_2_div_6_Template(rf, ctx) { if (rf & 1) {
    const _r45 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 40);
    ɵngcc0.ɵɵelementStart(1, "adf-cloud-people", 41);
    ɵngcc0.ɵɵlistener("changedUsers", function EditTaskFilterCloudComponent_ng_container_3_form_1_ng_container_2_div_6_Template_adf_cloud_people_changedUsers_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r45); const taskFilterProperty_r15 = ɵngcc0.ɵɵnextContext().$implicit; const ctx_r44 = ɵngcc0.ɵɵnextContext(3); return ctx_r44.onChangedUser($event, taskFilterProperty_r15); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const taskFilterProperty_r15 = ɵngcc0.ɵɵnextContext().$implicit;
    const ctx_r21 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵclassMap("adf-edit-task-filter-" + taskFilterProperty_r15.key);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("preSelectUsers", taskFilterProperty_r15.value)("title", taskFilterProperty_r15.label)("validate", true)("appName", ctx_r21.appName)("mode", taskFilterProperty_r15.selectionMode);
} }
function EditTaskFilterCloudComponent_ng_container_3_form_1_ng_container_2_adf_cloud_task_assignment_filter_7_Template(rf, ctx) { if (rf & 1) {
    const _r49 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "adf-cloud-task-assignment-filter", 42);
    ɵngcc0.ɵɵlistener("assignedChange", function EditTaskFilterCloudComponent_ng_container_3_form_1_ng_container_2_adf_cloud_task_assignment_filter_7_Template_adf_cloud_task_assignment_filter_assignedChange_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r49); const ctx_r48 = ɵngcc0.ɵɵnextContext(4); return ctx_r48.onAssignedChange($event); })("assignedGroupChange", function EditTaskFilterCloudComponent_ng_container_3_form_1_ng_container_2_adf_cloud_task_assignment_filter_7_Template_adf_cloud_task_assignment_filter_assignedGroupChange_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r49); const ctx_r50 = ɵngcc0.ɵɵnextContext(4); return ctx_r50.onAssignedGroupsChange($event); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const taskFilterProperty_r15 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵproperty("taskFilterProperty", taskFilterProperty_r15);
} }
function EditTaskFilterCloudComponent_ng_container_3_form_1_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, EditTaskFilterCloudComponent_ng_container_3_form_1_ng_container_2_mat_form_field_1_Template, 4, 8, "mat-form-field", 21);
    ɵngcc0.ɵɵtemplate(2, EditTaskFilterCloudComponent_ng_container_3_form_1_ng_container_2_mat_form_field_2_Template, 3, 7, "mat-form-field", 21);
    ɵngcc0.ɵɵtemplate(3, EditTaskFilterCloudComponent_ng_container_3_form_1_ng_container_2_mat_form_field_3_Template, 11, 14, "mat-form-field", 21);
    ɵngcc0.ɵɵtemplate(4, EditTaskFilterCloudComponent_ng_container_3_form_1_ng_container_2_div_4_Template, 4, 5, "div", 22);
    ɵngcc0.ɵɵtemplate(5, EditTaskFilterCloudComponent_ng_container_3_form_1_ng_container_2_adf_cloud_date_range_filter_5_Template, 2, 2, "adf-cloud-date-range-filter", 23);
    ɵngcc0.ɵɵtemplate(6, EditTaskFilterCloudComponent_ng_container_3_form_1_ng_container_2_div_6_Template, 2, 8, "div", 24);
    ɵngcc0.ɵɵtemplate(7, EditTaskFilterCloudComponent_ng_container_3_form_1_ng_container_2_adf_cloud_task_assignment_filter_7_Template, 1, 1, "adf-cloud-task-assignment-filter", 25);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const taskFilterProperty_r15 = ctx.$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", taskFilterProperty_r15.type === "select");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", taskFilterProperty_r15.type === "text");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", taskFilterProperty_r15.type === "date");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", taskFilterProperty_r15.type === "checkbox");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", taskFilterProperty_r15.type === "date-range");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", taskFilterProperty_r15.type === "people");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", taskFilterProperty_r15.type === "assignment");
} }
function EditTaskFilterCloudComponent_ng_container_3_form_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "form", 18);
    ɵngcc0.ɵɵelementStart(1, "div", 19);
    ɵngcc0.ɵɵtemplate(2, EditTaskFilterCloudComponent_ng_container_3_form_1_ng_container_2_Template, 8, 7, "ng-container", 20);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r13 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("formGroup", ctx_r13.editTaskFilterForm);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r13.taskFilterProperties);
} }
function EditTaskFilterCloudComponent_ng_container_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, EditTaskFilterCloudComponent_ng_container_3_form_1_Template, 3, 2, "form", 17);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r1.editTaskFilterForm);
} }
const _c7 = ".adf-edit-task-filter-checkbox{flex:1 23%;font-size:16px;padding-top:10px;text-align:center}.adf-edit-task-filter-date-error-container{height:20px;margin-top:12px;position:absolute;width:100%}.adf-edit-task-filter-date-error-container>div{display:flex;flex-flow:row;justify-content:flex-start}.adf-edit-task-filter-date-error-container .adf-error-text{color:var(--theme-warn-color);font-size:10px;height:16px;line-height:1.33;padding-right:8px;width:auto}.adf-edit-task-filter-date-error-container .adf-error-icon{color:var(--theme-warn-color);font-size:16px}.adf-edit-task-filter-dateRange mat-grid-list{width:450px}.adf-cloud-edit-task-filter-loading-margin{margin-left:calc(50% - 50px);margin-right:calc(50% - 50px)}";
function ServiceTaskFiltersCloudComponent_ng_container_0_div_1_adf_icon_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "adf-icon", 8);
} if (rf & 2) {
    const filter_r5 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵproperty("value", filter_r5.icon);
} }
function ServiceTaskFiltersCloudComponent_ng_container_0_div_1_span_7_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 9);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "async");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const filter_r5 = ɵngcc0.ɵɵnextContext().$implicit;
    const ctx_r7 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵclassProp("adf-active", ctx_r7.wasFilterUpdated(filter_r5.key));
    ɵngcc0.ɵɵattribute("data-automation-id", filter_r5.key + "_filter-counter");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 4, ctx_r7.counters$[filter_r5.key]), " ");
} }
function ServiceTaskFiltersCloudComponent_ng_container_0_div_1_Template(rf, ctx) { if (rf & 1) {
    const _r11 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 3);
    ɵngcc0.ɵɵelementStart(1, "button", 4);
    ɵngcc0.ɵɵlistener("click", function ServiceTaskFiltersCloudComponent_ng_container_0_div_1_Template_button_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r11); const filter_r5 = ctx.$implicit; const ctx_r10 = ɵngcc0.ɵɵnextContext(2); return ctx_r10.onFilterClick(filter_r5); });
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵtemplate(3, ServiceTaskFiltersCloudComponent_ng_container_0_div_1_adf_icon_3_Template, 1, 1, "adf-icon", 5);
    ɵngcc0.ɵɵelementStart(4, "span", 6);
    ɵngcc0.ɵɵtext(5);
    ɵngcc0.ɵɵpipe(6, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(7, ServiceTaskFiltersCloudComponent_ng_container_0_div_1_span_7_Template, 3, 6, "span", 7);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const filter_r5 = ctx.$implicit;
    const ctx_r4 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵclassProp("adf-active", ctx_r4.currentFilter === filter_r5);
    ɵngcc0.ɵɵproperty("id", filter_r5.id);
    ɵngcc0.ɵɵattribute("aria-label", ɵngcc0.ɵɵpipeBind1(2, 8, filter_r5.name))("data-automation-id", filter_r5.key + "_filter");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r4.showIcons);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(6, 10, filter_r5.name));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r4.counters$[filter_r5.key]);
} }
function ServiceTaskFiltersCloudComponent_ng_container_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, ServiceTaskFiltersCloudComponent_ng_container_0_div_1_Template, 8, 12, "div", 2);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const filterList_r3 = ctx.ngIf;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", filterList_r3);
} }
function ServiceTaskFiltersCloudComponent_ng_template_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "div", 10);
    ɵngcc0.ɵɵelement(2, "mat-spinner");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} }
const _c8 = ".adf-task-filters__entry{display:flex;font-size:14px!important;font-weight:700;height:24px;opacity:1;padding:12px 0!important;width:100%}.adf-task-filters__entry .adf-full-width{display:flex;width:100%}.adf-task-filters__entry .adf-filter-action-button{cursor:pointer;opacity:.54;padding:16px}.adf-task-filters__entry .adf-filter-action-button .adf-filter-action-button__label{margin:0 8px!important;padding-left:20px}.adf-task-filters__entry .adf-filter-action-button__counter{margin-left:10px;margin-top:6px;opacity:.54;padding:0 5px}.adf-task-filters__entry .adf-filter-action-button__counter.adf-active{background-color:var(--theme-accent-color);border-radius:15px;color:var(--theme-colors-mag-grey-light);font-size:smaller;margin-left:8px;margin-top:5px;padding:0 5px}.adf-task-filters__entry:hover{color:var(--theme-primary-color)}.adf-task-filters__entry:hover .adf-filter-action-button,.adf-task-filters__entry:hover .adf-filter-action-button__counter{opacity:1}.adf-task-filters__entry .adf-active{color:var(--theme-primary-color);opacity:1}";
function TaskAssignmentFilterCloudComponent_adf_cloud_group_13_Template(rf, ctx) { if (rf & 1) {
    const _r2 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "adf-cloud-group", 5);
    ɵngcc0.ɵɵlistener("changedGroups", function TaskAssignmentFilterCloudComponent_adf_cloud_group_13_Template_adf_cloud_group_changedGroups_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r2); const ctx_r1 = ɵngcc0.ɵɵnextContext(); return ctx_r1.onChangedGroups($event); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("mode", "multiple")("appName", ctx_r0.appName)("preSelectGroups", ctx_r0.candidateGroups)("searchGroupsControl", ctx_r0.groupForm)("title", "ADF_CLOUD_TASK_LIST.START_TASK.FORM.LABEL.CANDIDATE_GROUP");
} }
const _c9 = ["groupInput"];
function GroupCloudComponent_mat_label_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-label", 13);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(2, 1, ctx_r0.title || "ADF_CLOUD_GROUPS.SEARCH-GROUP"));
} }
function GroupCloudComponent_mat_chip_5_mat_icon_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-icon", 16);
    ɵngcc0.ɵɵtext(1, " cancel ");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const group_r15 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵattribute("data-automation-id", "adf-cloud-group-chip-remove-icon-" + group_r15.name);
} }
function GroupCloudComponent_mat_chip_5_Template(rf, ctx) { if (rf & 1) {
    const _r19 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "mat-chip", 14);
    ɵngcc0.ɵɵlistener("removed", function GroupCloudComponent_mat_chip_5_Template_mat_chip_removed_0_listener() { ɵngcc0.ɵɵrestoreView(_r19); const group_r15 = ctx.$implicit; const ctx_r18 = ɵngcc0.ɵɵnextContext(); return ctx_r18.onRemove(group_r15); });
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵtemplate(3, GroupCloudComponent_mat_chip_5_mat_icon_3_Template, 2, 1, "mat-icon", 15);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const group_r15 = ctx.$implicit;
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵpropertyInterpolate("matTooltip", ɵngcc0.ɵɵpipeBind1(1, 5, group_r15.readonly ? "ADF_CLOUD_GROUPS.MANDATORY" : ""));
    ɵngcc0.ɵɵproperty("removable", !group_r15.readonly);
    ɵngcc0.ɵɵattribute("data-automation-id", "adf-cloud-group-chip-" + group_r15.name);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", group_r15.name, " ");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !(group_r15.readonly || ctx_r2.readOnly));
} }
function GroupCloudComponent_input_6_Template(rf, ctx) { if (rf & 1) {
    const _r22 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "input", 17, 18);
    ɵngcc0.ɵɵlistener("focus", function GroupCloudComponent_input_6_Template_input_focus_0_listener() { ɵngcc0.ɵɵrestoreView(_r22); const ctx_r21 = ɵngcc0.ɵɵnextContext(); return ctx_r21.setFocus(true); })("blur", function GroupCloudComponent_input_6_Template_input_blur_0_listener() { ɵngcc0.ɵɵrestoreView(_r22); const ctx_r23 = ɵngcc0.ɵɵnextContext(); return ctx_r23.setFocus(false); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = ɵngcc0.ɵɵnextContext();
    const _r4 = ɵngcc0.ɵɵreference(8);
    const _r1 = ɵngcc0.ɵɵreference(4);
    ɵngcc0.ɵɵproperty("formControl", ctx_r3.searchGroupsControl)("matAutocomplete", _r4)("matChipInputFor", _r1);
} }
function GroupCloudComponent_ng_container_9_mat_option_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-option", 20);
    ɵngcc0.ɵɵelementStart(1, "div", 21);
    ɵngcc0.ɵɵelementStart(2, "button", 22);
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵpipe(4, "groupNameInitial");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(5, "span");
    ɵngcc0.ɵɵtext(6);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const group_r25 = ctx.$implicit;
    const i_r26 = ctx.index;
    ɵngcc0.ɵɵproperty("value", group_r25);
    ɵngcc0.ɵɵattribute("data-automation-id", "adf-cloud-group-chip-" + group_r25.name);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate1("id", "adf-group-", i_r26, "");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(4, 5, group_r25));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate(group_r25.name);
} }
function GroupCloudComponent_ng_container_9_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, GroupCloudComponent_ng_container_9_mat_option_1_Template, 7, 7, "mat-option", 19);
    ɵngcc0.ɵɵpipe(2, "async");
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r5 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", ɵngcc0.ɵɵpipeBind1(2, 1, ctx_r5.searchGroups$));
} }
const _c10 = function (a0) { return { groupName: a0 }; };
function GroupCloudComponent_ng_template_11_mat_option_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-option", 24);
    ɵngcc0.ɵɵelementStart(1, "span");
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r27 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind2(3, 1, "ADF_CLOUD_GROUPS.ERROR.NOT_FOUND", ɵngcc0.ɵɵpureFunction1(4, _c10, ctx_r27.searchedValue)), "");
} }
function GroupCloudComponent_ng_template_11_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, GroupCloudComponent_ng_template_11_mat_option_0_Template, 4, 6, "mat-option", 23);
} if (rf & 2) {
    const ctx_r7 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngIf", ctx_r7.searchGroupsControl.hasError("searchTypingError") && !ctx_r7.searchLoading);
} }
function GroupCloudComponent_mat_progress_bar_13_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "mat-progress-bar", 25);
} }
function GroupCloudComponent_mat_error_14_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-error");
    ɵngcc0.ɵɵelementStart(1, "mat-icon", 26);
    ɵngcc0.ɵɵtext(2, "warning");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵpipe(4, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r9 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind2(4, 1, "ADF_CLOUD_GROUPS.ERROR.NOT_FOUND", ɵngcc0.ɵɵpureFunction1(4, _c10, ctx_r9.validateGroupsMessage)), "");
} }
function GroupCloudComponent_mat_error_15_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-error");
    ɵngcc0.ɵɵelementStart(1, "mat-icon", 26);
    ɵngcc0.ɵɵtext(2, "warning");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵpipe(4, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r10 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind2(4, 1, "ADF_CLOUD_PEOPLE_GROUPS.ERROR.INVALID_PATTERN", ɵngcc0.ɵɵpureFunction1(4, _c5, ctx_r10.getValidationPattern())), "");
} }
function GroupCloudComponent_mat_error_16_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-error");
    ɵngcc0.ɵɵelementStart(1, "mat-icon", 26);
    ɵngcc0.ɵɵtext(2, "warning");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵpipe(4, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r11 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind2(4, 1, "ADF_CLOUD_PEOPLE_GROUPS.ERROR.INVALID_MAX_LENGTH", ɵngcc0.ɵɵpureFunction1(4, _c6, ctx_r11.getValidationMaxLength())), " ");
} }
function GroupCloudComponent_mat_error_17_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-error");
    ɵngcc0.ɵɵelementStart(1, "mat-icon", 26);
    ɵngcc0.ɵɵtext(2, "warning");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵpipe(4, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r12 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind2(4, 1, "ADF_CLOUD_PEOPLE_GROUPS.ERROR.INVALID_MIN_LENGTH", ɵngcc0.ɵɵpureFunction1(4, _c6, ctx_r12.getValidationMinLength())), "");
} }
function GroupCloudComponent_mat_error_18_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-error");
    ɵngcc0.ɵɵelementStart(1, "mat-icon", 26);
    ɵngcc0.ɵɵtext(2, "warning");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵpipe(4, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(4, 1, "ADF_CLOUD_PEOPLE_GROUPS.ERROR.REQUIRED"), " ");
} }
function GroupCloudComponent_mat_error_19_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-error", 27);
    ɵngcc0.ɵɵelementStart(1, "mat-icon", 26);
    ɵngcc0.ɵɵtext(2, "warning");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵpipe(4, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r14 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind2(4, 1, "ADF_CLOUD_GROUPS.ERROR.NOT_FOUND", ɵngcc0.ɵɵpureFunction1(4, _c10, ctx_r14.searchedValue)), "");
} }
const _c11 = ["peopleInput"];
function StartTaskCloudComponent_mat_error_13_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-error");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 1, "ADF_CLOUD_START_TASK.ERROR.REQUIRED"), " ");
} }
const _c12 = function (a0) { return { characters: a0 }; };
function StartTaskCloudComponent_mat_error_14_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-error");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind2(2, 1, "ADF_CLOUD_START_TASK.ERROR.MAXIMUM_LENGTH", ɵngcc0.ɵɵpureFunction1(4, _c12, ctx_r1.maxNameLength)), " ");
} }
function StartTaskCloudComponent_mat_option_27_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-option", 22);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const priorityOption_r8 = ctx.$implicit;
    ɵngcc0.ɵɵproperty("value", priorityOption_r8.value);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(2, 2, priorityOption_r8.label));
} }
function StartTaskCloudComponent_div_36_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div");
    ɵngcc0.ɵɵelementStart(1, "div", 23);
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(4, "mat-icon", 24);
    ɵngcc0.ɵɵtext(5, "warning");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(3, 1, "ADF_CLOUD_START_TASK.ERROR.DATE"));
} }
const _c13 = function (a0) { return [a0]; };
function StartTaskCloudComponent_adf_cloud_people_37_Template(rf, ctx) { if (rf & 1) {
    const _r11 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "adf-cloud-people", 25, 26);
    ɵngcc0.ɵɵlistener("selectUser", function StartTaskCloudComponent_adf_cloud_people_37_Template_adf_cloud_people_selectUser_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r11); const ctx_r10 = ɵngcc0.ɵɵnextContext(); return ctx_r10.onAssigneeSelect($event); })("removeUser", function StartTaskCloudComponent_adf_cloud_people_37_Template_adf_cloud_people_removeUser_0_listener() { ɵngcc0.ɵɵrestoreView(_r11); const ctx_r12 = ɵngcc0.ɵɵnextContext(); return ctx_r12.onAssigneeRemove(); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r5 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("appName", ctx_r5.appName)("preSelectUsers", ɵngcc0.ɵɵpureFunction1(4, _c13, ctx_r5.currentUser))("searchUserCtrl", ctx_r5.assigneeFormControl)("title", "ADF_CLOUD_TASK_LIST.START_TASK.FORM.LABEL.ASSIGNEE");
} }
function StartTaskCloudComponent_adf_cloud_group_39_Template(rf, ctx) { if (rf & 1) {
    const _r15 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "adf-cloud-group", 27, 28);
    ɵngcc0.ɵɵlistener("selectGroup", function StartTaskCloudComponent_adf_cloud_group_39_Template_adf_cloud_group_selectGroup_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r15); const ctx_r14 = ɵngcc0.ɵɵnextContext(); return ctx_r14.onCandidateGroupSelect($event); })("removeGroup", function StartTaskCloudComponent_adf_cloud_group_39_Template_adf_cloud_group_removeGroup_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r15); const ctx_r16 = ɵngcc0.ɵɵnextContext(); return ctx_r16.onCandidateGroupRemove($event); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r6 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("mode", "multiple")("title", "ADF_CLOUD_TASK_LIST.START_TASK.FORM.LABEL.CANDIDATE_GROUP")("appName", ctx_r6.appName)("searchGroupsControl", ctx_r6.candidateUserFormControl);
} }
function StartTaskCloudComponent_adf_cloud_form_definition_selector_40_Template(rf, ctx) { if (rf & 1) {
    const _r18 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "adf-cloud-form-definition-selector", 29);
    ɵngcc0.ɵɵlistener("selectForm", function StartTaskCloudComponent_adf_cloud_form_definition_selector_40_Template_adf_cloud_form_definition_selector_selectForm_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r18); const ctx_r17 = ɵngcc0.ɵɵnextContext(); return ctx_r17.onFormSelect($event); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r7 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("appName", ctx_r7.appName);
} }
const _c14 = function () { return { standalone: true }; };
function FormCloudComponent_div_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div");
    ɵngcc0.ɵɵprojection(1);
    ɵngcc0.ɵɵelementEnd();
} }
function FormCloudComponent_div_1_mat_card_header_2_div_3_i_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "i", 11);
    ɵngcc0.ɵɵtext(1, "check_circle");
    ɵngcc0.ɵɵelementEnd();
} }
function FormCloudComponent_div_1_mat_card_header_2_div_3_ng_template_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "i", 12);
    ɵngcc0.ɵɵtext(1, "error");
    ɵngcc0.ɵɵelementEnd();
} }
function FormCloudComponent_div_1_mat_card_header_2_div_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 8);
    ɵngcc0.ɵɵtemplate(1, FormCloudComponent_div_1_mat_card_header_2_div_3_i_1_Template, 2, 0, "i", 9);
    ɵngcc0.ɵɵtemplate(2, FormCloudComponent_div_1_mat_card_header_2_div_3_ng_template_2_Template, 2, 0, "ng-template", null, 10, ɵngcc0.ɵɵtemplateRefExtractor);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const _r8 = ɵngcc0.ɵɵreference(3);
    const ctx_r4 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r4.form.isValid)("ngIfElse", _r8);
} }
function FormCloudComponent_div_1_mat_card_header_2_div_4_Template(rf, ctx) { if (rf & 1) {
    const _r11 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 13);
    ɵngcc0.ɵɵelementStart(1, "button", 14);
    ɵngcc0.ɵɵlistener("click", function FormCloudComponent_div_1_mat_card_header_2_div_4_Template_button_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r11); const ctx_r10 = ɵngcc0.ɵɵnextContext(3); return ctx_r10.onRefreshClicked(); });
    ɵngcc0.ɵɵelementStart(2, "mat-icon");
    ɵngcc0.ɵɵtext(3, "refresh");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} }
function FormCloudComponent_div_1_mat_card_header_2_span_5_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 1, "FORM.FORM_RENDERER.NAMELESS_TASK"), " ");
} }
function FormCloudComponent_div_1_mat_card_header_2_span_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 15);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵtemplate(2, FormCloudComponent_div_1_mat_card_header_2_span_5_ng_container_2_Template, 3, 3, "ng-container", 0);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r6 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵproperty("matTooltip", ctx_r6.form.taskName);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r6.form.taskName, " ");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r6.form.taskName);
} }
function FormCloudComponent_div_1_mat_card_header_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-card-header");
    ɵngcc0.ɵɵelementStart(1, "mat-card-title");
    ɵngcc0.ɵɵelementStart(2, "h4");
    ɵngcc0.ɵɵtemplate(3, FormCloudComponent_div_1_mat_card_header_2_div_3_Template, 4, 2, "div", 5);
    ɵngcc0.ɵɵtemplate(4, FormCloudComponent_div_1_mat_card_header_2_div_4_Template, 4, 0, "div", 6);
    ɵngcc0.ɵɵtemplate(5, FormCloudComponent_div_1_mat_card_header_2_span_5_Template, 3, 3, "span", 7);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r2.showValidationIcon);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r2.showRefreshButton);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r2.isTitleEnabled());
} }
function FormCloudComponent_div_1_mat_card_actions_5_ng_container_2_button_1_Template(rf, ctx) { if (rf & 1) {
    const _r18 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 19);
    ɵngcc0.ɵɵlistener("click", function FormCloudComponent_div_1_mat_card_actions_5_ng_container_2_button_1_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r18); const outcome_r14 = ɵngcc0.ɵɵnextContext().$implicit; const ctx_r16 = ɵngcc0.ɵɵnextContext(3); return ctx_r16.onOutcomeClicked(outcome_r14); });
    ɵngcc0.ɵɵpipe(1, "formatSpace");
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "uppercase");
    ɵngcc0.ɵɵpipe(4, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const outcome_r14 = ɵngcc0.ɵɵnextContext().$implicit;
    const ctx_r15 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵclassProp("adf-form-hide-button", !ctx_r15.isOutcomeButtonVisible(outcome_r14, ctx_r15.form.readOnly));
    ɵngcc0.ɵɵproperty("id", ɵngcc0.ɵɵpipeBind1(1, 6, "adf-form-" + outcome_r14.name))("color", ctx_r15.getColorForOutcome(outcome_r14.name))("disabled", !ctx_r15.isOutcomeButtonEnabled(outcome_r14));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(3, 8, ɵngcc0.ɵɵpipeBind1(4, 10, outcome_r14.name)), " ");
} }
function FormCloudComponent_div_1_mat_card_actions_5_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, FormCloudComponent_div_1_mat_card_actions_5_ng_container_2_button_1_Template, 5, 12, "button", 18);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const outcome_r14 = ctx.$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", outcome_r14.isVisible);
} }
function FormCloudComponent_div_1_mat_card_actions_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-card-actions", 16);
    ɵngcc0.ɵɵprojection(1, 1);
    ɵngcc0.ɵɵtemplate(2, FormCloudComponent_div_1_mat_card_actions_5_ng_container_2_Template, 2, 1, "ng-container", 17);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r3.form.outcomes);
} }
function FormCloudComponent_div_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 2);
    ɵngcc0.ɵɵelementStart(1, "mat-card");
    ɵngcc0.ɵɵtemplate(2, FormCloudComponent_div_1_mat_card_header_2_Template, 6, 3, "mat-card-header", 0);
    ɵngcc0.ɵɵelementStart(3, "mat-card-content");
    ɵngcc0.ɵɵelement(4, "adf-form-renderer", 3);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(5, FormCloudComponent_div_1_mat_card_actions_5_Template, 3, 1, "mat-card-actions", 4);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r1.showTitle || ctx_r1.showRefreshButton || ctx_r1.showValidationIcon);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("formDefinition", ctx_r1.form);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r1.form.hasOutcomes());
} }
const _c15 = [[["", "empty-form", ""]], [["adf-cloud-form-custom-outcomes"]]];
const _c16 = ["[empty-form]", "adf-cloud-form-custom-outcomes"];
function FormDefinitionSelectorCloudComponent_mat_option_8_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-option", 2);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const form_r1 = ctx.$implicit;
    ɵngcc0.ɵɵproperty("value", form_r1.id);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(form_r1.name);
} }
const _c17 = ["*"];
function DateCloudWidgetComponent_span_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span");
    ɵngcc0.ɵɵtext(1, "*");
    ɵngcc0.ɵɵelementEnd();
} }
function DateCloudWidgetComponent_error_widget_9_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "error-widget", 11);
    ɵngcc0.ɵɵpipe(1, "translate");
} if (rf & 2) {
    ɵngcc0.ɵɵpropertyInterpolate("required", ɵngcc0.ɵɵpipeBind1(1, 1, "FORM.FIELD.REQUIRED"));
} }
function DropdownCloudWidgetComponent_span_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span");
    ɵngcc0.ɵɵtext(1, "*");
    ɵngcc0.ɵɵelementEnd();
} }
const _c18 = function (a0) { return { widgetId: a0 }; };
function DropdownCloudWidgetComponent_label_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "label", 9);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵattribute("for", ctx_r1.field.id);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind2(2, 2, "FORM.FIELD.DEPENDS_ON", ɵngcc0.ɵɵpureFunction1(5, _c18, ctx_r1.getLinkedWidgetId())), " ");
} }
function DropdownCloudWidgetComponent_mat_option_9_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-option", 10);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const opt_r5 = ctx.$implicit;
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("value", ctx_r2.getOptionValue(opt_r5, ctx_r2.field.value))("id", opt_r5.id);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1("", opt_r5.name, " ");
} }
function DropdownCloudWidgetComponent_mat_option_10_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-option", 11);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("value", ctx_r3.field.value);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r3.field.value);
} }
function DropdownCloudWidgetComponent_error_widget_12_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "error-widget", 12);
    ɵngcc0.ɵɵpipe(1, "translate");
} if (rf & 2) {
    ɵngcc0.ɵɵpropertyInterpolate("required", ɵngcc0.ɵɵpipeBind1(1, 1, "FORM.FIELD.REQUIRED"));
} }
function GroupCloudWidgetComponent_span_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span");
    ɵngcc0.ɵɵtext(1, "*");
    ɵngcc0.ɵɵelementEnd();
} }
function GroupCloudWidgetComponent_error_widget_7_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "error-widget", 5);
    ɵngcc0.ɵɵpipe(1, "translate");
} if (rf & 2) {
    ɵngcc0.ɵɵpropertyInterpolate("required", ɵngcc0.ɵɵpipeBind1(1, 1, "FORM.FIELD.REQUIRED"));
} }
function PeopleCloudWidgetComponent_span_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span");
    ɵngcc0.ɵɵtext(1, "*");
    ɵngcc0.ɵɵelementEnd();
} }
const _c19 = ["uploadFiles"];
function UploadCloudWidgetComponent_span_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span");
    ɵngcc0.ɵɵtext(1, "*");
    ɵngcc0.ɵɵelementEnd();
} }
function UploadCloudWidgetComponent_mat_list_7_mat_list_item_1_button_4_Template(rf, ctx) { if (rf & 1) {
    const _r10 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 10);
    ɵngcc0.ɵɵlistener("click", function UploadCloudWidgetComponent_mat_list_7_mat_list_item_1_button_4_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r10); const file_r6 = ɵngcc0.ɵɵnextContext().$implicit; const ctx_r8 = ɵngcc0.ɵɵnextContext(2); return ctx_r8.removeFile(file_r6); })("keyup.enter", function UploadCloudWidgetComponent_mat_list_7_mat_list_item_1_button_4_Template_button_keyup_enter_0_listener() { ɵngcc0.ɵɵrestoreView(_r10); const file_r6 = ɵngcc0.ɵɵnextContext().$implicit; const ctx_r11 = ɵngcc0.ɵɵnextContext(2); return ctx_r11.removeFile(file_r6); });
    ɵngcc0.ɵɵelementStart(1, "mat-icon", 11);
    ɵngcc0.ɵɵtext(2, "highlight_off");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const file_r6 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵproperty("id", "file-" + file_r6.id + "-remove");
} }
function UploadCloudWidgetComponent_mat_list_7_mat_list_item_1_Template(rf, ctx) { if (rf & 1) {
    const _r15 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "mat-list-item", 6);
    ɵngcc0.ɵɵelementStart(1, "img", 7);
    ɵngcc0.ɵɵlistener("click", function UploadCloudWidgetComponent_mat_list_7_mat_list_item_1_Template_img_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r15); const file_r6 = ctx.$implicit; const ctx_r14 = ɵngcc0.ɵɵnextContext(2); return ctx_r14.fileClicked(file_r6); })("keyup.enter", function UploadCloudWidgetComponent_mat_list_7_mat_list_item_1_Template_img_keyup_enter_1_listener() { ɵngcc0.ɵɵrestoreView(_r15); const file_r6 = ctx.$implicit; const ctx_r16 = ɵngcc0.ɵɵnextContext(2); return ctx_r16.fileClicked(file_r6); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(2, "span", 8);
    ɵngcc0.ɵɵlistener("click", function UploadCloudWidgetComponent_mat_list_7_mat_list_item_1_Template_span_click_2_listener() { ɵngcc0.ɵɵrestoreView(_r15); const file_r6 = ctx.$implicit; const ctx_r17 = ɵngcc0.ɵɵnextContext(2); return ctx_r17.fileClicked(file_r6); })("keyup.enter", function UploadCloudWidgetComponent_mat_list_7_mat_list_item_1_Template_span_keyup_enter_2_listener() { ɵngcc0.ɵɵrestoreView(_r15); const file_r6 = ctx.$implicit; const ctx_r18 = ɵngcc0.ɵɵnextContext(2); return ctx_r18.fileClicked(file_r6); });
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(4, UploadCloudWidgetComponent_mat_list_7_mat_list_item_1_button_4_Template, 3, 1, "button", 9);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const file_r6 = ctx.$implicit;
    const ctx_r5 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("id", "file-" + file_r6.id + "-icon")("src", ctx_r5.getIcon(file_r6.content.mimeType), ɵngcc0.ɵɵsanitizeUrl)("alt", ctx_r5.mimeTypeIcon);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate("id", "file-" + file_r6.id);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(file_r6.name);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r5.field.readOnly);
} }
function UploadCloudWidgetComponent_mat_list_7_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-list");
    ɵngcc0.ɵɵtemplate(1, UploadCloudWidgetComponent_mat_list_7_mat_list_item_1_Template, 5, 6, "mat-list-item", 5);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r1.uploadedFiles);
} }
function UploadCloudWidgetComponent_div_8_Template(rf, ctx) { if (rf & 1) {
    const _r21 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div");
    ɵngcc0.ɵɵelementStart(1, "button", 12);
    ɵngcc0.ɵɵlistener("click", function UploadCloudWidgetComponent_div_8_Template_button_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r21); const _r19 = ɵngcc0.ɵɵreference(7); return _r19.click(); });
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementStart(4, "mat-icon");
    ɵngcc0.ɵɵtext(5, "file_upload");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(6, "input", 13, 14);
    ɵngcc0.ɵɵlistener("change", function UploadCloudWidgetComponent_div_8_Template_input_change_6_listener($event) { ɵngcc0.ɵɵrestoreView(_r21); const ctx_r22 = ɵngcc0.ɵɵnextContext(); return ctx_r22.onFileChanged($event); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("matTooltip", ctx_r2.field.tooltip);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(3, 4, "FORM.FIELD.UPLOAD"), "");
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵproperty("multiple", ctx_r2.multipleOption)("id", ctx_r2.field.form.nodeId);
} }
function UploadCloudWidgetComponent_div_9_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 1, "FORM.FIELD.NO_FILE_ATTACHED"), " ");
} }
function UploadCloudWidgetComponent_error_widget_11_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "error-widget", 15);
    ɵngcc0.ɵɵpipe(1, "translate");
} if (rf & 2) {
    ɵngcc0.ɵɵpropertyInterpolate("required", ɵngcc0.ɵɵpipeBind1(1, 1, "FORM.FIELD.REQUIRED"));
} }
function AttachFileCloudWidgetComponent_span_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span");
    ɵngcc0.ɵɵtext(1, "*");
    ɵngcc0.ɵɵelementEnd();
} }
function AttachFileCloudWidgetComponent_div_6_Template(rf, ctx) { if (rf & 1) {
    const _r5 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 10);
    ɵngcc0.ɵɵelementStart(1, "button", 11);
    ɵngcc0.ɵɵlistener("click", function AttachFileCloudWidgetComponent_div_6_Template_button_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r5); const ctx_r4 = ɵngcc0.ɵɵnextContext(); return ctx_r4.openSelectDialog(); });
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementStart(4, "mat-icon");
    ɵngcc0.ɵɵtext(5);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("id", ctx_r1.field.id)("matTooltip", ctx_r1.field.tooltip);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(3, 4, "FORM.FIELD.ATTACH"), " ");
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate(ctx_r1.getWidgetIcon());
} }
function AttachFileCloudWidgetComponent_div_9_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 12);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵpropertyInterpolate("id", "adf-attach-empty-list-" + ctx_r2.field.id);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 2, "FORM.FIELD.NO_FILE_ATTACHED"), " ");
} }
function AttachFileCloudWidgetComponent_error_widget_11_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "error-widget", 13);
    ɵngcc0.ɵɵpipe(1, "translate");
} if (rf & 2) {
    ɵngcc0.ɵɵpropertyInterpolate("required", ɵngcc0.ɵɵpipeBind1(1, 1, "FORM.FIELD.REQUIRED"));
} }
function PropertiesViewerWidgetComponent_span_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span");
    ɵngcc0.ɵɵtext(1, "*");
    ɵngcc0.ɵɵelementEnd();
} }
function PropertiesViewerWidgetComponent_ng_template_5_adf_properties_viewer_wrapper_0_Template(rf, ctx) { if (rf & 1) {
    const _r6 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "adf-properties-viewer-wrapper", 6);
    ɵngcc0.ɵɵlistener("nodeContentLoaded", function PropertiesViewerWidgetComponent_ng_template_5_adf_properties_viewer_wrapper_0_Template_adf_properties_viewer_wrapper_nodeContentLoaded_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r6); const ctx_r5 = ɵngcc0.ɵɵnextContext(2); return ctx_r5.onNodeContentLoaded($event); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const properties_r3 = ɵngcc0.ɵɵnextContext().properties;
    const ctx_r4 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("nodeId", ctx_r4.field.value)("displayDefaultProperties", (properties_r3 == null ? null : properties_r3.displayDefaultProperties) !== undefined ? properties_r3 == null ? null : properties_r3.displayDefaultProperties : true)("expanded", (properties_r3 == null ? null : properties_r3.expanded) !== undefined ? properties_r3 == null ? null : properties_r3.expanded : true)("preset", properties_r3 == null ? null : properties_r3.preset)("displayEmpty", (properties_r3 == null ? null : properties_r3.displayEmpty) !== undefined ? properties_r3 == null ? null : properties_r3.displayEmpty : false)("editable", (properties_r3 == null ? null : properties_r3.editable) !== undefined ? properties_r3 == null ? null : properties_r3.editable : false)("multi", (properties_r3 == null ? null : properties_r3.multi) !== undefined ? properties_r3 == null ? null : properties_r3.multi : false)("displayAspect", (properties_r3 == null ? null : properties_r3.displayAspect) !== undefined ? properties_r3 == null ? null : properties_r3.displayAspect : null)("copyToClipboardAction", (properties_r3 == null ? null : properties_r3.copyToClipboardAction) !== undefined ? properties_r3 == null ? null : properties_r3.copyToClipboardAction : true)("useChipsForMultiValueProperty", (properties_r3 == null ? null : properties_r3.useChipsForMultiValueProperty) !== undefined ? properties_r3 == null ? null : properties_r3.useChipsForMultiValueProperty : true);
} }
function PropertiesViewerWidgetComponent_ng_template_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, PropertiesViewerWidgetComponent_ng_template_5_adf_properties_viewer_wrapper_0_Template, 1, 10, "adf-properties-viewer-wrapper", 5);
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngIf", ctx_r2.field.value);
} }
const _c20 = function (a0) { return { properties: a0 }; };
function PropertiesViewerWrapperComponent_adf_content_metadata_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "adf-content-metadata", 2);
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("displayDefaultProperties", ctx_r0.displayDefaultProperties)("expanded", ctx_r0.expanded)("node", ctx_r0.node)("preset", ctx_r0.preset)("displayEmpty", ctx_r0.displayEmpty)("editable", ctx_r0.editable)("multi", ctx_r0.multi)("displayAspect", ctx_r0.displayAspect)("copyToClipboardAction", ctx_r0.copyToClipboardAction)("useChipsForMultiValueProperty", ctx_r0.useChipsForMultiValueProperty);
} }
function PropertiesViewerWrapperComponent_ng_template_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 3);
    ɵngcc0.ɵɵelement(1, "mat-progress-spinner");
    ɵngcc0.ɵɵelementEnd();
} }
function RadioButtonsCloudWidgetComponent_span_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span");
    ɵngcc0.ɵɵtext(1, "*");
    ɵngcc0.ɵɵelementEnd();
} }
function RadioButtonsCloudWidgetComponent_mat_radio_button_7_Template(rf, ctx) { if (rf & 1) {
    const _r5 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "mat-radio-button", 8);
    ɵngcc0.ɵɵlistener("change", function RadioButtonsCloudWidgetComponent_mat_radio_button_7_Template_mat_radio_button_change_0_listener() { ɵngcc0.ɵɵrestoreView(_r5); const opt_r3 = ctx.$implicit; const ctx_r4 = ɵngcc0.ɵɵnextContext(); return ctx_r4.onOptionClick(opt_r3.id); });
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const opt_r3 = ctx.$implicit;
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("matTooltip", ctx_r1.field.tooltip)("id", ctx_r1.field.id + "-" + opt_r3.id)("name", ctx_r1.field.id)("value", opt_r3.id)("checked", ctx_r1.isChecked(opt_r3));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", opt_r3.name, " ");
} }
function RadioButtonsCloudWidgetComponent_error_widget_9_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "error-widget", 9);
    ɵngcc0.ɵɵpipe(1, "translate");
} if (rf & 2) {
    ɵngcc0.ɵɵpropertyInterpolate("required", ɵngcc0.ɵɵpipeBind1(1, 1, "FORM.FIELD.REQUIRED"));
} }
function FilePropertiesTableCloudComponent_table_1_th_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "th", 11);
} }
function FilePropertiesTableCloudComponent_table_1_td_3_mat_icon_1_Template(rf, ctx) { if (rf & 1) {
    const _r15 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "mat-icon", 15);
    ɵngcc0.ɵɵlistener("click", function FilePropertiesTableCloudComponent_table_1_td_3_mat_icon_1_Template_mat_icon_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r15); const element_r10 = ɵngcc0.ɵɵnextContext().$implicit; const ctx_r13 = ɵngcc0.ɵɵnextContext(2); return ctx_r13.onRowClicked(element_r10); });
    ɵngcc0.ɵɵtext(1, " check_circle ");
    ɵngcc0.ɵɵelementEnd();
} }
function FilePropertiesTableCloudComponent_table_1_td_3_img_2_Template(rf, ctx) { if (rf & 1) {
    const _r18 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "img", 16);
    ɵngcc0.ɵɵlistener("click", function FilePropertiesTableCloudComponent_table_1_td_3_img_2_Template_img_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r18); const element_r10 = ɵngcc0.ɵɵnextContext().$implicit; const ctx_r16 = ɵngcc0.ɵɵnextContext(2); return ctx_r16.onRowClicked(element_r10); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const element_r10 = ɵngcc0.ɵɵnextContext().$implicit;
    const ctx_r12 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("id", "file-" + (element_r10 == null ? null : element_r10.id) + "-icon")("src", element_r10.content ? ctx_r12.getIcon(element_r10.content.mimeType) : ctx_r12.getIcon(element_r10["mimeType"]), ɵngcc0.ɵɵsanitizeUrl)("alt", ctx_r12.mimeTypeIcon);
} }
function FilePropertiesTableCloudComponent_table_1_td_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "td", 12);
    ɵngcc0.ɵɵtemplate(1, FilePropertiesTableCloudComponent_table_1_td_3_mat_icon_1_Template, 2, 0, "mat-icon", 13);
    ɵngcc0.ɵɵtemplate(2, FilePropertiesTableCloudComponent_table_1_td_3_img_2_Template, 1, 3, "img", 14);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const element_r10 = ctx.$implicit;
    const ctx_r2 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r2.selectedNode && element_r10.id === ctx_r2.selectedNode.id);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r2.selectedNode || element_r10.id !== ctx_r2.selectedNode.id);
} }
function FilePropertiesTableCloudComponent_table_1_th_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "th", 11);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(2, 1, "FORM.FIELD.FILE_NAME"));
} }
function FilePropertiesTableCloudComponent_table_1_td_6_Template(rf, ctx) { if (rf & 1) {
    const _r22 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "td", 12);
    ɵngcc0.ɵɵelementStart(1, "span", 17);
    ɵngcc0.ɵɵlistener("click", function FilePropertiesTableCloudComponent_table_1_td_6_Template_span_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r22); const element_r20 = ctx.$implicit; const ctx_r21 = ɵngcc0.ɵɵnextContext(2); return ctx_r21.onRowClicked(element_r20); });
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const element_r20 = ctx.$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate("id", "file-" + (element_r20 == null ? null : element_r20.id));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(element_r20.name);
} }
function FilePropertiesTableCloudComponent_table_1_ng_container_7_th_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "th", 11);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "titlecase");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const columnName_r23 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(columnName_r23.title ? columnName_r23.title : ɵngcc0.ɵɵpipeBind1(2, 1, columnName_r23.name));
} }
function FilePropertiesTableCloudComponent_table_1_ng_container_7_td_2_Template(rf, ctx) { if (rf & 1) {
    const _r29 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "td", 12);
    ɵngcc0.ɵɵelementStart(1, "span", 19);
    ɵngcc0.ɵɵlistener("click", function FilePropertiesTableCloudComponent_table_1_ng_container_7_td_2_Template_span_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r29); const row_r27 = ctx.$implicit; const ctx_r28 = ɵngcc0.ɵɵnextContext(3); return ctx_r28.onRowClicked(row_r27); });
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const row_r27 = ctx.$implicit;
    const columnName_r23 = ɵngcc0.ɵɵnextContext().$implicit;
    const ctx_r25 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate("id", "fileProperty-" + (row_r27 == null ? null : row_r27.id) + "-" + (columnName_r23 == null ? null : columnName_r23.name));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r25.getColumnValue(row_r27, columnName_r23));
} }
function FilePropertiesTableCloudComponent_table_1_ng_container_7_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0, 18);
    ɵngcc0.ɵɵtemplate(1, FilePropertiesTableCloudComponent_table_1_ng_container_7_th_1_Template, 3, 3, "th", 4);
    ɵngcc0.ɵɵtemplate(2, FilePropertiesTableCloudComponent_table_1_ng_container_7_td_2_Template, 3, 2, "td", 5);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const columnName_r23 = ctx.$implicit;
    ɵngcc0.ɵɵproperty("matColumnDef", columnName_r23.name);
} }
function FilePropertiesTableCloudComponent_table_1_th_9_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "th", 11);
} }
function FilePropertiesTableCloudComponent_table_1_td_10_button_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "button", 25);
    ɵngcc0.ɵɵelementStart(1, "mat-icon");
    ɵngcc0.ɵɵtext(2, "more_vert");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const element_r31 = ɵngcc0.ɵɵnextContext().$implicit;
    const _r33 = ɵngcc0.ɵɵreference(3);
    ɵngcc0.ɵɵpropertyInterpolate("id", "file-" + (element_r31 == null ? null : element_r31.id) + "-option-menu");
    ɵngcc0.ɵɵproperty("matMenuTriggerFor", _r33);
} }
function FilePropertiesTableCloudComponent_table_1_td_10_button_4_Template(rf, ctx) { if (rf & 1) {
    const _r41 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 26);
    ɵngcc0.ɵɵlistener("click", function FilePropertiesTableCloudComponent_table_1_td_10_button_4_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r41); const element_r31 = ɵngcc0.ɵɵnextContext().$implicit; const ctx_r39 = ɵngcc0.ɵɵnextContext(2); return ctx_r39.onAttachFileClicked(element_r31); });
    ɵngcc0.ɵɵelementStart(1, "mat-icon");
    ɵngcc0.ɵɵtext(2, "visibility");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(3, "span");
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵpipe(5, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const element_r31 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵpropertyInterpolate("id", "file-" + (element_r31 == null ? null : element_r31.id) + "-show-file");
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(5, 2, "FORM.FIELD.VIEW_FILE"));
} }
function FilePropertiesTableCloudComponent_table_1_td_10_button_5_Template(rf, ctx) { if (rf & 1) {
    const _r45 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 26);
    ɵngcc0.ɵɵlistener("click", function FilePropertiesTableCloudComponent_table_1_td_10_button_5_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r45); const element_r31 = ɵngcc0.ɵɵnextContext().$implicit; const ctx_r43 = ɵngcc0.ɵɵnextContext(2); return ctx_r43.downloadContent(element_r31); });
    ɵngcc0.ɵɵelementStart(1, "mat-icon");
    ɵngcc0.ɵɵtext(2, "file_download");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(3, "span");
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵpipe(5, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const element_r31 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵpropertyInterpolate("id", "file-" + (element_r31 == null ? null : element_r31.id) + "-download-file");
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(5, 2, "FORM.FIELD.DOWNLOAD_FILE"));
} }
function FilePropertiesTableCloudComponent_table_1_td_10_button_6_Template(rf, ctx) { if (rf & 1) {
    const _r49 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 26);
    ɵngcc0.ɵɵlistener("click", function FilePropertiesTableCloudComponent_table_1_td_10_button_6_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r49); const element_r31 = ɵngcc0.ɵɵnextContext().$implicit; const ctx_r47 = ɵngcc0.ɵɵnextContext(2); return ctx_r47.contentModelFormFileHandler(element_r31); });
    ɵngcc0.ɵɵelementStart(1, "mat-icon", 27);
    ɵngcc0.ɵɵtext(2, "low_priority");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(3, "span");
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵpipe(5, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const element_r31 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵpropertyInterpolate("id", "file-" + (element_r31 == null ? null : element_r31.id) + "-retrieve-file-metadata");
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(5, 2, "ADF_CLOUD_FORM_COMPONENT.RETRIEVE_METADATA"));
} }
function FilePropertiesTableCloudComponent_table_1_td_10_button_7_Template(rf, ctx) { if (rf & 1) {
    const _r53 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 28);
    ɵngcc0.ɵɵlistener("click", function FilePropertiesTableCloudComponent_table_1_td_10_button_7_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r53); const element_r31 = ɵngcc0.ɵɵnextContext().$implicit; const ctx_r51 = ɵngcc0.ɵɵnextContext(2); return ctx_r51.onRemoveAttachFile(element_r31); })("keyup.enter", function FilePropertiesTableCloudComponent_table_1_td_10_button_7_Template_button_keyup_enter_0_listener() { ɵngcc0.ɵɵrestoreView(_r53); const element_r31 = ɵngcc0.ɵɵnextContext().$implicit; const ctx_r54 = ɵngcc0.ɵɵnextContext(2); return ctx_r54.onRemoveAttachFile(element_r31); });
    ɵngcc0.ɵɵelementStart(1, "mat-icon", 27);
    ɵngcc0.ɵɵtext(2, "highlight_off");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(3, "span");
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵpipe(5, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const element_r31 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵpropertyInterpolate("id", "file-" + (element_r31 == null ? null : element_r31.id) + "-remove-file");
    ɵngcc0.ɵɵproperty("id", "file-" + (element_r31 == null ? null : element_r31.id) + "-remove");
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(5, 3, "FORM.FIELD.REMOVE_FILE"));
} }
function FilePropertiesTableCloudComponent_table_1_td_10_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "td", 12);
    ɵngcc0.ɵɵtemplate(1, FilePropertiesTableCloudComponent_table_1_td_10_button_1_Template, 3, 2, "button", 20);
    ɵngcc0.ɵɵelementStart(2, "mat-menu", 21, 22);
    ɵngcc0.ɵɵtemplate(4, FilePropertiesTableCloudComponent_table_1_td_10_button_4_Template, 6, 4, "button", 23);
    ɵngcc0.ɵɵtemplate(5, FilePropertiesTableCloudComponent_table_1_td_10_button_5_Template, 6, 4, "button", 23);
    ɵngcc0.ɵɵtemplate(6, FilePropertiesTableCloudComponent_table_1_td_10_button_6_Template, 6, 4, "button", 23);
    ɵngcc0.ɵɵtemplate(7, FilePropertiesTableCloudComponent_table_1_td_10_button_7_Template, 6, 5, "button", 24);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const element_r31 = ctx.$implicit;
    const ctx_r7 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !!(element_r31.content == null ? null : element_r31.content.mimeType));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r7.displayMenuOption("show") && !!(element_r31.content == null ? null : element_r31.content.mimeType));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r7.displayMenuOption("download") && !!(element_r31.content == null ? null : element_r31.content.mimeType));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r7.displayMenuOption("retrieveMetadata") && !!(element_r31.content == null ? null : element_r31.content.mimeType));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r7.field.readOnly && ctx_r7.displayMenuOption("remove"));
} }
function FilePropertiesTableCloudComponent_table_1_tr_11_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "tr", 29);
} }
function FilePropertiesTableCloudComponent_table_1_tr_12_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "tr", 30);
} }
function FilePropertiesTableCloudComponent_table_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "table", 2);
    ɵngcc0.ɵɵelementContainerStart(1, 3);
    ɵngcc0.ɵɵtemplate(2, FilePropertiesTableCloudComponent_table_1_th_2_Template, 1, 0, "th", 4);
    ɵngcc0.ɵɵtemplate(3, FilePropertiesTableCloudComponent_table_1_td_3_Template, 3, 2, "td", 5);
    ɵngcc0.ɵɵelementContainerEnd();
    ɵngcc0.ɵɵelementContainerStart(4, 6);
    ɵngcc0.ɵɵtemplate(5, FilePropertiesTableCloudComponent_table_1_th_5_Template, 3, 3, "th", 4);
    ɵngcc0.ɵɵtemplate(6, FilePropertiesTableCloudComponent_table_1_td_6_Template, 3, 2, "td", 5);
    ɵngcc0.ɵɵelementContainerEnd();
    ɵngcc0.ɵɵtemplate(7, FilePropertiesTableCloudComponent_table_1_ng_container_7_Template, 3, 1, "ng-container", 7);
    ɵngcc0.ɵɵelementContainerStart(8, 8);
    ɵngcc0.ɵɵtemplate(9, FilePropertiesTableCloudComponent_table_1_th_9_Template, 1, 0, "th", 4);
    ɵngcc0.ɵɵtemplate(10, FilePropertiesTableCloudComponent_table_1_td_10_Template, 8, 5, "td", 5);
    ɵngcc0.ɵɵelementContainerEnd();
    ɵngcc0.ɵɵtemplate(11, FilePropertiesTableCloudComponent_table_1_tr_11_Template, 1, 0, "tr", 9);
    ɵngcc0.ɵɵtemplate(12, FilePropertiesTableCloudComponent_table_1_tr_12_Template, 1, 0, "tr", 10);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("dataSource", ctx_r0.uploadedFiles);
    ɵngcc0.ɵɵadvance(7);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r0.field == null ? null : ctx_r0.field.params == null ? null : ctx_r0.field.params.displayableCMProperties);
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵproperty("matHeaderRowDef", ctx_r0.displayedColumns);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("matRowDefColumns", ctx_r0.displayedColumns);
} }
function TaskHeaderCloudComponent_h3_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "h3", 4);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r0.taskDetails == null ? null : ctx_r0.taskDetails.name);
} }
function TaskHeaderCloudComponent_mat_card_2_adf_card_view_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "adf-card-view", 7);
} if (rf & 2) {
    const ctx_r4 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("displayNoneOption", false)("properties", ctx_r4.properties)("editable", ctx_r4.isTaskEditable())("displayClearAction", ctx_r4.displayDateClearAction);
} }
function TaskHeaderCloudComponent_mat_card_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-card", 5);
    ɵngcc0.ɵɵelementStart(1, "mat-card-content");
    ɵngcc0.ɵɵtemplate(2, TaskHeaderCloudComponent_mat_card_2_adf_card_view_2_Template, 1, 4, "adf-card-view", 6);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    const _r2 = ɵngcc0.ɵɵreference(4);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r1.isLoading)("ngIfElse", _r2);
} }
function TaskHeaderCloudComponent_ng_template_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 8);
    ɵngcc0.ɵɵelement(1, "mat-spinner");
    ɵngcc0.ɵɵelementEnd();
} }
function TaskFormCloudComponent_div_0_adf_cloud_form_1_ng_template_2_Template(rf, ctx) { }
function TaskFormCloudComponent_div_0_adf_cloud_form_1_Template(rf, ctx) { if (rf & 1) {
    const _r10 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "adf-cloud-form", 5);
    ɵngcc0.ɵɵlistener("formSaved", function TaskFormCloudComponent_div_0_adf_cloud_form_1_Template_adf_cloud_form_formSaved_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r10); const ctx_r9 = ɵngcc0.ɵɵnextContext(2); return ctx_r9.onFormSaved($event); })("formCompleted", function TaskFormCloudComponent_div_0_adf_cloud_form_1_Template_adf_cloud_form_formCompleted_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r10); const ctx_r11 = ɵngcc0.ɵɵnextContext(2); return ctx_r11.onFormCompleted($event); })("formError", function TaskFormCloudComponent_div_0_adf_cloud_form_1_Template_adf_cloud_form_formError_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r10); const ctx_r12 = ɵngcc0.ɵɵnextContext(2); return ctx_r12.onError($event); })("error", function TaskFormCloudComponent_div_0_adf_cloud_form_1_Template_adf_cloud_form_error_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r10); const ctx_r13 = ɵngcc0.ɵɵnextContext(2); return ctx_r13.onError($event); })("formContentClicked", function TaskFormCloudComponent_div_0_adf_cloud_form_1_Template_adf_cloud_form_formContentClicked_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r10); const ctx_r14 = ɵngcc0.ɵɵnextContext(2); return ctx_r14.onFormContentClicked($event); });
    ɵngcc0.ɵɵelementStart(1, "adf-cloud-form-custom-outcomes");
    ɵngcc0.ɵɵtemplate(2, TaskFormCloudComponent_div_0_adf_cloud_form_1_ng_template_2_Template, 0, 0, "ng-template", 6);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵnextContext();
    const _r6 = ɵngcc0.ɵɵreference(5);
    const ctx_r3 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("appName", ctx_r3.appName)("appVersion", ctx_r3.taskDetails.appVersion)("taskId", ctx_r3.taskId)("showTitle", ctx_r3.showTitle)("processInstanceId", ctx_r3.taskDetails.processInstanceId)("readOnly", ctx_r3.isReadOnly())("showRefreshButton", ctx_r3.showRefreshButton)("showValidationIcon", ctx_r3.showValidationIcon)("showCompleteButton", ctx_r3.canCompleteTask())("showSaveButton", ctx_r3.canCompleteTask());
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", _r6);
} }
function TaskFormCloudComponent_div_0_ng_template_2_mat_card_header_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-card-header");
    ɵngcc0.ɵɵelementStart(1, "mat-card-title");
    ɵngcc0.ɵɵelementStart(2, "h4");
    ɵngcc0.ɵɵelementStart(3, "span", 12);
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵpipe(5, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r15 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(5, 1, (ctx_r15.taskDetails == null ? null : ctx_r15.taskDetails.name) || "FORM.FORM_RENDERER.NAMELESS_TASK"), " ");
} }
function TaskFormCloudComponent_div_0_ng_template_2_ng_template_5_Template(rf, ctx) { }
function TaskFormCloudComponent_div_0_ng_template_2_button_6_Template(rf, ctx) { if (rf & 1) {
    const _r19 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 13);
    ɵngcc0.ɵɵlistener("success", function TaskFormCloudComponent_div_0_ng_template_2_button_6_Template_button_success_0_listener() { ɵngcc0.ɵɵrestoreView(_r19); const ctx_r18 = ɵngcc0.ɵɵnextContext(3); return ctx_r18.onCompleteTask(); })("error", function TaskFormCloudComponent_div_0_ng_template_2_button_6_Template_button_error_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r19); const ctx_r20 = ɵngcc0.ɵɵnextContext(3); return ctx_r20.onError($event); });
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r17 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵproperty("appName", ctx_r17.appName)("taskId", ctx_r17.taskId);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 3, "ADF_CLOUD_TASK_FORM.EMPTY_FORM.BUTTONS.COMPLETE"), " ");
} }
function TaskFormCloudComponent_div_0_ng_template_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-card", 7);
    ɵngcc0.ɵɵtemplate(1, TaskFormCloudComponent_div_0_ng_template_2_mat_card_header_1_Template, 6, 3, "mat-card-header", 8);
    ɵngcc0.ɵɵelementStart(2, "mat-card-content");
    ɵngcc0.ɵɵelement(3, "adf-empty-content", 9);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(4, "mat-card-actions", 10);
    ɵngcc0.ɵɵtemplate(5, TaskFormCloudComponent_div_0_ng_template_2_ng_template_5_Template, 0, 0, "ng-template", 6);
    ɵngcc0.ɵɵtemplate(6, TaskFormCloudComponent_div_0_ng_template_2_button_6_Template, 3, 5, "button", 11);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵnextContext();
    const _r6 = ɵngcc0.ɵɵreference(5);
    const ctx_r5 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r5.showTitle);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("icon", "description")("title", "ADF_CLOUD_TASK_FORM.EMPTY_FORM.TITLE")("subtitle", "ADF_CLOUD_TASK_FORM.EMPTY_FORM.SUBTITLE");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", _r6);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r5.canCompleteTask());
} }
function TaskFormCloudComponent_div_0_ng_template_4_button_0_Template(rf, ctx) { if (rf & 1) {
    const _r25 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 17);
    ɵngcc0.ɵɵlistener("click", function TaskFormCloudComponent_div_0_ng_template_4_button_0_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r25); const ctx_r24 = ɵngcc0.ɵɵnextContext(3); return ctx_r24.onCancelClick(); });
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 1, "ADF_CLOUD_TASK_FORM.EMPTY_FORM.BUTTONS.CANCEL"), " ");
} }
function TaskFormCloudComponent_div_0_ng_template_4_button_1_Template(rf, ctx) { if (rf & 1) {
    const _r27 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 18);
    ɵngcc0.ɵɵlistener("success", function TaskFormCloudComponent_div_0_ng_template_4_button_1_Template_button_success_0_listener() { ɵngcc0.ɵɵrestoreView(_r27); const ctx_r26 = ɵngcc0.ɵɵnextContext(3); return ctx_r26.onClaimTask(); })("error", function TaskFormCloudComponent_div_0_ng_template_4_button_1_Template_button_error_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r27); const ctx_r28 = ɵngcc0.ɵɵnextContext(3); return ctx_r28.onError($event); });
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r22 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵproperty("appName", ctx_r22.appName)("taskId", ctx_r22.taskId);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 3, "ADF_CLOUD_TASK_FORM.EMPTY_FORM.BUTTONS.CLAIM"), " ");
} }
function TaskFormCloudComponent_div_0_ng_template_4_button_2_Template(rf, ctx) { if (rf & 1) {
    const _r30 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 19);
    ɵngcc0.ɵɵlistener("success", function TaskFormCloudComponent_div_0_ng_template_4_button_2_Template_button_success_0_listener() { ɵngcc0.ɵɵrestoreView(_r30); const ctx_r29 = ɵngcc0.ɵɵnextContext(3); return ctx_r29.onUnclaimTask(); })("error", function TaskFormCloudComponent_div_0_ng_template_4_button_2_Template_button_error_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r30); const ctx_r31 = ɵngcc0.ɵɵnextContext(3); return ctx_r31.onError($event); });
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r23 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵproperty("appName", ctx_r23.appName)("taskId", ctx_r23.taskId);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 3, "ADF_CLOUD_TASK_FORM.EMPTY_FORM.BUTTONS.UNCLAIM"), " ");
} }
function TaskFormCloudComponent_div_0_ng_template_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, TaskFormCloudComponent_div_0_ng_template_4_button_0_Template, 3, 3, "button", 14);
    ɵngcc0.ɵɵtemplate(1, TaskFormCloudComponent_div_0_ng_template_4_button_1_Template, 3, 5, "button", 15);
    ɵngcc0.ɵɵtemplate(2, TaskFormCloudComponent_div_0_ng_template_4_button_2_Template, 3, 5, "button", 16);
} if (rf & 2) {
    const ctx_r7 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r7.showCancelButton);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r7.canClaimTask());
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r7.hasCandidateUsersOrGroups());
} }
function TaskFormCloudComponent_div_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div");
    ɵngcc0.ɵɵtemplate(1, TaskFormCloudComponent_div_0_adf_cloud_form_1_Template, 3, 11, "adf-cloud-form", 2);
    ɵngcc0.ɵɵtemplate(2, TaskFormCloudComponent_div_0_ng_template_2_Template, 7, 6, "ng-template", null, 3, ɵngcc0.ɵɵtemplateRefExtractor);
    ɵngcc0.ɵɵtemplate(4, TaskFormCloudComponent_div_0_ng_template_4_Template, 3, 3, "ng-template", null, 4, ɵngcc0.ɵɵtemplateRefExtractor);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const _r4 = ɵngcc0.ɵɵreference(3);
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.hasForm())("ngIfElse", _r4);
} }
function TaskFormCloudComponent_ng_template_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 20);
    ɵngcc0.ɵɵelement(1, "mat-spinner");
    ɵngcc0.ɵɵelementEnd();
} }
function ProcessFiltersCloudComponent_ng_container_0_div_1_adf_icon_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "adf-icon", 7);
} if (rf & 2) {
    const filter_r5 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵproperty("value", filter_r5.icon);
} }
function ProcessFiltersCloudComponent_ng_container_0_div_1_Template(rf, ctx) { if (rf & 1) {
    const _r9 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 3);
    ɵngcc0.ɵɵelementStart(1, "button", 4);
    ɵngcc0.ɵɵlistener("click", function ProcessFiltersCloudComponent_ng_container_0_div_1_Template_button_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r9); const filter_r5 = ctx.$implicit; const ctx_r8 = ɵngcc0.ɵɵnextContext(2); return ctx_r8.onFilterClick(filter_r5); });
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵtemplate(3, ProcessFiltersCloudComponent_ng_container_0_div_1_adf_icon_3_Template, 1, 1, "adf-icon", 5);
    ɵngcc0.ɵɵelementStart(4, "span", 6);
    ɵngcc0.ɵɵtext(5);
    ɵngcc0.ɵɵpipe(6, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const filter_r5 = ctx.$implicit;
    const ctx_r4 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵclassProp("adf-active", ctx_r4.currentFilter === filter_r5);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("id", filter_r5.id);
    ɵngcc0.ɵɵattribute("aria-label", ɵngcc0.ɵɵpipeBind1(2, 7, filter_r5.name))("data-automation-id", filter_r5.key + "_filter");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r4.showIcons);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(6, 9, filter_r5.name));
} }
function ProcessFiltersCloudComponent_ng_container_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, ProcessFiltersCloudComponent_ng_container_0_div_1_Template, 7, 11, "div", 2);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const filterList_r3 = ctx.ngIf;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", filterList_r3);
} }
function ProcessFiltersCloudComponent_ng_template_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "div", 8);
    ɵngcc0.ɵɵelement(2, "mat-spinner");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} }
function EditProcessFilterCloudComponent_mat_expansion_panel_header_2_ng_container_1_mat_panel_title_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-panel-title", 10);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r5 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(2, 1, ctx_r5.processFilter.name));
} }
function EditProcessFilterCloudComponent_mat_expansion_panel_header_2_ng_container_1_span_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 1, "ADF_CLOUD_EDIT_PROCESS_FILTER.TITLE"), "");
} }
function EditProcessFilterCloudComponent_mat_expansion_panel_header_2_ng_container_1_div_4_ng_container_1_button_1_Template(rf, ctx) { if (rf & 1) {
    const _r12 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 13);
    ɵngcc0.ɵɵlistener("click", function EditProcessFilterCloudComponent_mat_expansion_panel_header_2_ng_container_1_div_4_ng_container_1_button_1_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r12); const filterAction_r10 = ctx.$implicit; const ctx_r11 = ɵngcc0.ɵɵnextContext(5); return ctx_r11.executeFilterActions(filterAction_r10); });
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵelement(2, "adf-icon", 14);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const filterAction_r10 = ctx.$implicit;
    const ctx_r9 = ɵngcc0.ɵɵnextContext(5);
    ɵngcc0.ɵɵpropertyInterpolate("matTooltip", ɵngcc0.ɵɵpipeBind1(1, 4, filterAction_r10.tooltip));
    ɵngcc0.ɵɵproperty("disabled", ctx_r9.isDisabledAction(filterAction_r10));
    ɵngcc0.ɵɵattribute("data-automation-id", "adf-filter-action-" + filterAction_r10.actionType);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("value", filterAction_r10.icon);
} }
function EditProcessFilterCloudComponent_mat_expansion_panel_header_2_ng_container_1_div_4_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, EditProcessFilterCloudComponent_mat_expansion_panel_header_2_ng_container_1_div_4_ng_container_1_button_1_Template, 3, 6, "button", 12);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r8 = ɵngcc0.ɵɵnextContext(4);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r8.processFilterActions);
} }
function EditProcessFilterCloudComponent_mat_expansion_panel_header_2_ng_container_1_div_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 11);
    ɵngcc0.ɵɵtemplate(1, EditProcessFilterCloudComponent_mat_expansion_panel_header_2_ng_container_1_div_4_ng_container_1_Template, 2, 1, "ng-container", 3);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r7 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r7.toggleFilterActions);
} }
function EditProcessFilterCloudComponent_mat_expansion_panel_header_2_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, EditProcessFilterCloudComponent_mat_expansion_panel_header_2_ng_container_1_mat_panel_title_1_Template, 3, 3, "mat-panel-title", 7);
    ɵngcc0.ɵɵelementStart(2, "mat-panel-description", 8);
    ɵngcc0.ɵɵtemplate(3, EditProcessFilterCloudComponent_mat_expansion_panel_header_2_ng_container_1_span_3_Template, 3, 3, "span", 3);
    ɵngcc0.ɵɵtemplate(4, EditProcessFilterCloudComponent_mat_expansion_panel_header_2_ng_container_1_div_4_Template, 2, 1, "div", 9);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r2.showProcessFilterName);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r2.showTitle);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r2.showFilterActions);
} }
function EditProcessFilterCloudComponent_mat_expansion_panel_header_2_ng_template_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 15);
    ɵngcc0.ɵɵelement(1, "mat-spinner", 16);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("diameter", 30);
} }
function EditProcessFilterCloudComponent_mat_expansion_panel_header_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-expansion-panel-header", 4);
    ɵngcc0.ɵɵtemplate(1, EditProcessFilterCloudComponent_mat_expansion_panel_header_2_ng_container_1_Template, 5, 3, "ng-container", 5);
    ɵngcc0.ɵɵtemplate(2, EditProcessFilterCloudComponent_mat_expansion_panel_header_2_ng_template_2_Template, 2, 1, "ng-template", null, 6, ɵngcc0.ɵɵtemplateRefExtractor);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const _r3 = ɵngcc0.ɵɵreference(3);
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r0.isLoading)("ngIfElse", _r3);
} }
function EditProcessFilterCloudComponent_ng_container_3_form_1_ng_container_2_mat_form_field_1_mat_option_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-option", 14);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const propertyOption_r24 = ctx.$implicit;
    const processFilterProperty_r15 = ɵngcc0.ɵɵnextContext(2).$implicit;
    ɵngcc0.ɵɵproperty("value", propertyOption_r24.value);
    ɵngcc0.ɵɵattribute("data-automation-id", "adf-cloud-edit-process-property-options-" + processFilterProperty_r15.key);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(2, 3, propertyOption_r24.label));
} }
function EditProcessFilterCloudComponent_ng_container_3_form_1_ng_container_2_mat_form_field_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-form-field", 24);
    ɵngcc0.ɵɵelementStart(1, "mat-select", 25);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵtemplate(3, EditProcessFilterCloudComponent_ng_container_3_form_1_ng_container_2_mat_form_field_1_mat_option_3_Template, 3, 5, "mat-option", 26);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const processFilterProperty_r15 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵproperty("floatLabel", "auto");
    ɵngcc0.ɵɵattribute("data-automation-id", processFilterProperty_r15.key);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate("placeholder", ɵngcc0.ɵɵpipeBind1(2, 6, processFilterProperty_r15.label));
    ɵngcc0.ɵɵproperty("formControlName", processFilterProperty_r15.key);
    ɵngcc0.ɵɵattribute("data-automation-id", "adf-cloud-edit-process-property-" + processFilterProperty_r15.key);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngForOf", processFilterProperty_r15.options);
} }
function EditProcessFilterCloudComponent_ng_container_3_form_1_ng_container_2_mat_form_field_2_mat_option_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-option", 14);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const propertyOption_r28 = ctx.$implicit;
    const processFilterProperty_r15 = ɵngcc0.ɵɵnextContext(2).$implicit;
    ɵngcc0.ɵɵproperty("value", propertyOption_r28.value);
    ɵngcc0.ɵɵattribute("data-automation-id", "adf-cloud-edit-process-property-options-" + processFilterProperty_r15.key);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 3, propertyOption_r28.label), " ");
} }
function EditProcessFilterCloudComponent_ng_container_3_form_1_ng_container_2_mat_form_field_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-form-field", 24);
    ɵngcc0.ɵɵelementStart(1, "mat-select", 27);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵtemplate(3, EditProcessFilterCloudComponent_ng_container_3_form_1_ng_container_2_mat_form_field_2_mat_option_3_Template, 3, 5, "mat-option", 26);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const processFilterProperty_r15 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵproperty("floatLabel", "auto");
    ɵngcc0.ɵɵattribute("data-automation-id", processFilterProperty_r15.key);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate("placeholder", ɵngcc0.ɵɵpipeBind1(2, 7, processFilterProperty_r15.label));
    ɵngcc0.ɵɵproperty("formControlName", processFilterProperty_r15.key)("multiple", true);
    ɵngcc0.ɵɵattribute("data-automation-id", "adf-cloud-edit-process-property-" + processFilterProperty_r15.key);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngForOf", processFilterProperty_r15.options);
} }
function EditProcessFilterCloudComponent_ng_container_3_form_1_ng_container_2_mat_form_field_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-form-field", 24);
    ɵngcc0.ɵɵelement(1, "input", 28);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const processFilterProperty_r15 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵproperty("floatLabel", "auto");
    ɵngcc0.ɵɵattribute("data-automation-id", processFilterProperty_r15.key);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate("placeholder", ɵngcc0.ɵɵpipeBind1(2, 5, processFilterProperty_r15.label));
    ɵngcc0.ɵɵproperty("formControlName", processFilterProperty_r15.key);
    ɵngcc0.ɵɵattribute("data-automation-id", "adf-cloud-edit-process-property-" + processFilterProperty_r15.key);
} }
function EditProcessFilterCloudComponent_ng_container_3_form_1_ng_container_2_mat_form_field_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-form-field", 24);
    ɵngcc0.ɵɵelement(1, "input", 29);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const processFilterProperty_r15 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵproperty("floatLabel", "auto");
    ɵngcc0.ɵɵattribute("data-automation-id", processFilterProperty_r15.key);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate("placeholder", ɵngcc0.ɵɵpipeBind1(2, 5, processFilterProperty_r15.label));
    ɵngcc0.ɵɵproperty("formControlName", processFilterProperty_r15.key);
    ɵngcc0.ɵɵattribute("data-automation-id", "adf-cloud-edit-process-property-" + processFilterProperty_r15.key);
} }
function EditProcessFilterCloudComponent_ng_container_3_form_1_ng_container_2_mat_form_field_5_div_10_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div");
    ɵngcc0.ɵɵelementStart(1, "div", 34);
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(4, "mat-icon", 35);
    ɵngcc0.ɵɵtext(5, "warning");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(3, 1, "ADF_CLOUD_EDIT_PROCESS_FILTER.ERROR.DATE"));
} }
function EditProcessFilterCloudComponent_ng_container_3_form_1_ng_container_2_mat_form_field_5_Template(rf, ctx) { if (rf & 1) {
    const _r36 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "mat-form-field", 24);
    ɵngcc0.ɵɵelementStart(1, "mat-label");
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(4, "input", 30);
    ɵngcc0.ɵɵlistener("keyup", function EditProcessFilterCloudComponent_ng_container_3_form_1_ng_container_2_mat_form_field_5_Template_input_keyup_4_listener($event) { ɵngcc0.ɵɵrestoreView(_r36); const processFilterProperty_r15 = ɵngcc0.ɵɵnextContext().$implicit; const ctx_r35 = ɵngcc0.ɵɵnextContext(3); return ctx_r35.onDateChanged($event.srcElement.value, processFilterProperty_r15); })("dateChange", function EditProcessFilterCloudComponent_ng_container_3_form_1_ng_container_2_mat_form_field_5_Template_input_dateChange_4_listener($event) { ɵngcc0.ɵɵrestoreView(_r36); const processFilterProperty_r15 = ɵngcc0.ɵɵnextContext().$implicit; const ctx_r38 = ɵngcc0.ɵɵnextContext(3); return ctx_r38.onDateChanged($event.value, processFilterProperty_r15); });
    ɵngcc0.ɵɵpipe(5, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(6, "mat-datepicker-toggle", 31);
    ɵngcc0.ɵɵelement(7, "mat-datepicker", null, 32);
    ɵngcc0.ɵɵelementStart(9, "div", 33);
    ɵngcc0.ɵɵtemplate(10, EditProcessFilterCloudComponent_ng_container_3_form_1_ng_container_2_mat_form_field_5_div_10_Template, 6, 3, "div", 3);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const _r33 = ɵngcc0.ɵɵreference(8);
    const processFilterProperty_r15 = ɵngcc0.ɵɵnextContext().$implicit;
    const ctx_r20 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵproperty("floatLabel", "auto");
    ɵngcc0.ɵɵattribute("data-automation-id", processFilterProperty_r15.key);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(3, 11, processFilterProperty_r15.label));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵpropertyInterpolate("placeholder", ɵngcc0.ɵɵpipeBind1(5, 13, processFilterProperty_r15.label));
    ɵngcc0.ɵɵproperty("formControlName", processFilterProperty_r15.key)("matDatepicker", _r33);
    ɵngcc0.ɵɵattribute("data-automation-id", "adf-cloud-edit-process-property-" + processFilterProperty_r15.key);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("for", _r33);
    ɵngcc0.ɵɵattribute("data-automation-id", "adf-cloud-edit-process-property-date-toggle-" + processFilterProperty_r15.key);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵattribute("data-automation-id", "adf-cloud-edit-process-property-date-picker-" + processFilterProperty_r15.key);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r20.hasError(processFilterProperty_r15));
} }
function EditProcessFilterCloudComponent_ng_container_3_form_1_ng_container_2_adf_cloud_date_range_filter_6_Template(rf, ctx) { if (rf & 1) {
    const _r42 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "adf-cloud-date-range-filter", 36);
    ɵngcc0.ɵɵlistener("dateTypeChange", function EditProcessFilterCloudComponent_ng_container_3_form_1_ng_container_2_adf_cloud_date_range_filter_6_Template_adf_cloud_date_range_filter_dateTypeChange_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r42); const processFilterProperty_r15 = ɵngcc0.ɵɵnextContext().$implicit; const ctx_r41 = ɵngcc0.ɵɵnextContext(3); return ctx_r41.onDateTypeChange($event, processFilterProperty_r15); })("dateChanged", function EditProcessFilterCloudComponent_ng_container_3_form_1_ng_container_2_adf_cloud_date_range_filter_6_Template_adf_cloud_date_range_filter_dateChanged_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r42); const processFilterProperty_r15 = ɵngcc0.ɵɵnextContext().$implicit; const ctx_r44 = ɵngcc0.ɵɵnextContext(3); return ctx_r44.onDateRangeFilterChanged($event, processFilterProperty_r15); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const processFilterProperty_r15 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵproperty("processFilterProperty", processFilterProperty_r15)("options", processFilterProperty_r15.dateFilterOptions);
} }
function EditProcessFilterCloudComponent_ng_container_3_form_1_ng_container_2_div_7_Template(rf, ctx) { if (rf & 1) {
    const _r48 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 37);
    ɵngcc0.ɵɵelementStart(1, "adf-cloud-people", 38);
    ɵngcc0.ɵɵlistener("changedUsers", function EditProcessFilterCloudComponent_ng_container_3_form_1_ng_container_2_div_7_Template_adf_cloud_people_changedUsers_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r48); const processFilterProperty_r15 = ɵngcc0.ɵɵnextContext().$implicit; const ctx_r47 = ɵngcc0.ɵɵnextContext(3); return ctx_r47.onChangedUser($event, processFilterProperty_r15); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const processFilterProperty_r15 = ɵngcc0.ɵɵnextContext().$implicit;
    const ctx_r22 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("preSelectUsers", ctx_r22.initiatorOptions)("title", processFilterProperty_r15.label)("validate", true)("appName", ctx_r22.appName)("mode", processFilterProperty_r15.selectionMode);
} }
function EditProcessFilterCloudComponent_ng_container_3_form_1_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, EditProcessFilterCloudComponent_ng_container_3_form_1_ng_container_2_mat_form_field_1_Template, 4, 8, "mat-form-field", 21);
    ɵngcc0.ɵɵtemplate(2, EditProcessFilterCloudComponent_ng_container_3_form_1_ng_container_2_mat_form_field_2_Template, 4, 9, "mat-form-field", 21);
    ɵngcc0.ɵɵtemplate(3, EditProcessFilterCloudComponent_ng_container_3_form_1_ng_container_2_mat_form_field_3_Template, 3, 7, "mat-form-field", 21);
    ɵngcc0.ɵɵtemplate(4, EditProcessFilterCloudComponent_ng_container_3_form_1_ng_container_2_mat_form_field_4_Template, 3, 7, "mat-form-field", 21);
    ɵngcc0.ɵɵtemplate(5, EditProcessFilterCloudComponent_ng_container_3_form_1_ng_container_2_mat_form_field_5_Template, 11, 15, "mat-form-field", 21);
    ɵngcc0.ɵɵtemplate(6, EditProcessFilterCloudComponent_ng_container_3_form_1_ng_container_2_adf_cloud_date_range_filter_6_Template, 1, 2, "adf-cloud-date-range-filter", 22);
    ɵngcc0.ɵɵtemplate(7, EditProcessFilterCloudComponent_ng_container_3_form_1_ng_container_2_div_7_Template, 2, 5, "div", 23);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const processFilterProperty_r15 = ctx.$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", processFilterProperty_r15.type === "select");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", processFilterProperty_r15.type === "multi-select");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", processFilterProperty_r15.type === "text");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", processFilterProperty_r15.type === "number");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", processFilterProperty_r15.type === "date");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", processFilterProperty_r15.type === "date-range");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", processFilterProperty_r15.type === "people");
} }
function EditProcessFilterCloudComponent_ng_container_3_form_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "form", 18);
    ɵngcc0.ɵɵelementStart(1, "div", 19);
    ɵngcc0.ɵɵtemplate(2, EditProcessFilterCloudComponent_ng_container_3_form_1_ng_container_2_Template, 8, 7, "ng-container", 20);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r13 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("formGroup", ctx_r13.editProcessFilterForm);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r13.processFilterProperties);
} }
function EditProcessFilterCloudComponent_ng_container_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, EditProcessFilterCloudComponent_ng_container_3_form_1_Template, 3, 2, "form", 17);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r1.editProcessFilterForm);
} }
function ProcessListCloudComponent_ng_template_3_mat_progress_spinner_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "mat-progress-spinner", 3);
} if (rf & 2) {
    ɵngcc0.ɵɵproperty("color", "primary")("mode", "indeterminate");
} }
function ProcessListCloudComponent_ng_template_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, ProcessListCloudComponent_ng_template_3_mat_progress_spinner_0_Template, 1, 2, "mat-progress-spinner", 2);
    ɵngcc0.ɵɵprojection(1);
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r1.customLoadingContent);
} }
function ProcessListCloudComponent_ng_template_5_adf_empty_content_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "adf-empty-content", 5);
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵpipe(2, "translate");
} if (rf & 2) {
    ɵngcc0.ɵɵproperty("title", ɵngcc0.ɵɵpipeBind1(1, 2, "ADF_CLOUD_PROCESS_LIST.MESSAGES.TITLE"))("subtitle", ɵngcc0.ɵɵpipeBind1(2, 4, "ADF_CLOUD_PROCESS_LIST.MESSAGES.SUBTITLE"));
} }
function ProcessListCloudComponent_ng_template_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, ProcessListCloudComponent_ng_template_5_adf_empty_content_0_Template, 3, 6, "adf-empty-content", 4);
    ɵngcc0.ɵɵprojection(1, 1);
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r2.emptyCustomContent);
} }
const _c21 = [[["adf-custom-loading-content-template"]], [["adf-custom-empty-content-template"]]];
const _c22 = ["adf-custom-loading-content-template", "adf-custom-empty-content-template"];
function StartProcessCloudComponent_mat_card_subtitle_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-card-subtitle", 6);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 1, ctx_r0.errorMessageId), " ");
} }
function StartProcessCloudComponent_div_6_mat_option_11_Template(rf, ctx) { if (rf & 1) {
    const _r17 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "mat-option", 21);
    ɵngcc0.ɵɵlistener("click", function StartProcessCloudComponent_div_6_mat_option_11_Template_mat_option_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r17); const processDef_r15 = ctx.$implicit; const ctx_r16 = ɵngcc0.ɵɵnextContext(2); return ctx_r16.processDefinitionSelectionChanged(processDef_r15); });
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const processDef_r15 = ctx.$implicit;
    const ctx_r8 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("value", ctx_r8.getProcessDefinitionValue(processDef_r15));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r8.getProcessDefinitionValue(processDef_r15), " ");
} }
function StartProcessCloudComponent_div_6_button_12_Template(rf, ctx) { if (rf & 1) {
    const _r19 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 22);
    ɵngcc0.ɵɵlistener("click", function StartProcessCloudComponent_div_6_button_12_Template_button_click_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r19); const ctx_r18 = ɵngcc0.ɵɵnextContext(2); return ctx_r18.displayDropdown($event); });
    ɵngcc0.ɵɵelementStart(1, "mat-icon");
    ɵngcc0.ɵɵtext(2, "arrow_drop_down");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} }
function StartProcessCloudComponent_div_6_mat_error_13_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-error", 23);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 1, "ADF_CLOUD_PROCESS_LIST.ADF_CLOUD_START_PROCESS.ERROR.PROCESS_DEFINITION_REQUIRED"), " ");
} }
function StartProcessCloudComponent_div_6_mat_error_19_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-error", 24);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 1, "ADF_CLOUD_PROCESS_LIST.ADF_CLOUD_START_PROCESS.ERROR.PROCESS_NAME_REQUIRED"), " ");
} }
function StartProcessCloudComponent_div_6_mat_error_20_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-error", 25);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r12 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind2(2, 1, "ADF_CLOUD_PROCESS_LIST.ADF_CLOUD_START_PROCESS.ERROR.MAXIMUM_LENGTH", ɵngcc0.ɵɵpureFunction1(4, _c12, ctx_r12.maxNameLength)), " ");
} }
function StartProcessCloudComponent_div_6_mat_error_21_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-error");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 1, "ADF_CLOUD_PROCESS_LIST.ADF_CLOUD_START_PROCESS.ERROR.SPACE_VALIDATOR"), " ");
} }
function StartProcessCloudComponent_div_6_ng_container_22_ng_template_3_Template(rf, ctx) { }
function StartProcessCloudComponent_div_6_ng_container_22_Template(rf, ctx) { if (rf & 1) {
    const _r22 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "adf-cloud-form", 26);
    ɵngcc0.ɵɵlistener("formContentClicked", function StartProcessCloudComponent_div_6_ng_container_22_Template_adf_cloud_form_formContentClicked_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r22); const ctx_r21 = ɵngcc0.ɵɵnextContext(2); return ctx_r21.onFormContentClicked($event); })("formLoaded", function StartProcessCloudComponent_div_6_ng_container_22_Template_adf_cloud_form_formLoaded_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r22); const ctx_r23 = ɵngcc0.ɵɵnextContext(2); return ctx_r23.onFormLoaded($event); });
    ɵngcc0.ɵɵelementStart(2, "adf-cloud-form-custom-outcomes");
    ɵngcc0.ɵɵtemplate(3, StartProcessCloudComponent_div_6_ng_container_22_ng_template_3_Template, 0, 0, "ng-template", 27);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r14 = ɵngcc0.ɵɵnextContext(2);
    const _r2 = ɵngcc0.ɵɵreference(8);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("appName", ctx_r14.appName)("appVersion", ctx_r14.processDefinitionCurrent.appVersion)("data", ctx_r14.values)("formId", ctx_r14.processDefinitionCurrent.formKey)("showSaveButton", false)("showCompleteButton", false)("showRefreshButton", false)("showValidationIcon", false)("showTitle", false);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", _r2);
} }
function StartProcessCloudComponent_div_6_Template(rf, ctx) { if (rf & 1) {
    const _r25 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div");
    ɵngcc0.ɵɵelementStart(1, "form", 7);
    ɵngcc0.ɵɵelementStart(2, "mat-form-field", 8);
    ɵngcc0.ɵɵelementStart(3, "mat-label");
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵpipe(5, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(6, "input", 9, 10);
    ɵngcc0.ɵɵelementStart(8, "div", 11);
    ɵngcc0.ɵɵelementStart(9, "mat-autocomplete", 12, 13);
    ɵngcc0.ɵɵlistener("optionSelected", function StartProcessCloudComponent_div_6_Template_mat_autocomplete_optionSelected_9_listener($event) { ɵngcc0.ɵɵrestoreView(_r25); const ctx_r24 = ɵngcc0.ɵɵnextContext(); return ctx_r24.setProcessDefinitionOnForm($event.option.value); });
    ɵngcc0.ɵɵtemplate(11, StartProcessCloudComponent_div_6_mat_option_11_Template, 2, 2, "mat-option", 14);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(12, StartProcessCloudComponent_div_6_button_12_Template, 3, 0, "button", 15);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(13, StartProcessCloudComponent_div_6_mat_error_13_Template, 3, 3, "mat-error", 16);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(14, "mat-form-field", 8);
    ɵngcc0.ɵɵelementStart(15, "mat-label");
    ɵngcc0.ɵɵtext(16);
    ɵngcc0.ɵɵpipe(17, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(18, "input", 17);
    ɵngcc0.ɵɵtemplate(19, StartProcessCloudComponent_div_6_mat_error_19_Template, 3, 3, "mat-error", 18);
    ɵngcc0.ɵɵtemplate(20, StartProcessCloudComponent_div_6_mat_error_20_Template, 3, 6, "mat-error", 19);
    ɵngcc0.ɵɵtemplate(21, StartProcessCloudComponent_div_6_mat_error_21_Template, 3, 3, "mat-error", 20);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(22, StartProcessCloudComponent_div_6_ng_container_22_Template, 4, 10, "ng-container", 3);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const _r7 = ɵngcc0.ɵɵreference(10);
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    const _r2 = ɵngcc0.ɵɵreference(8);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("formGroup", ctx_r1.processForm);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("floatLabel", "always");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(5, 15, "ADF_CLOUD_PROCESS_LIST.ADF_CLOUD_START_PROCESS.FORM.LABEL.TYPE"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("matAutocomplete", _r7);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("displayWith", ctx_r1.displayProcessNameOnDropdown);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r1.filteredProcesses);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r1.showSelectProcessDropdown);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r1.processDefinition.hasError("required"));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("floatLabel", "always");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(17, 17, "ADF_CLOUD_PROCESS_LIST.ADF_CLOUD_START_PROCESS.FORM.LABEL.NAME"));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r1.processInstanceName.hasError("required"));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r1.processInstanceName.hasError("maxlength"));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r1.processInstanceName.hasError("pattern"));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r1.hasForm())("ngIfElse", _r2);
} }
function StartProcessCloudComponent_ng_template_7_Template(rf, ctx) { if (rf & 1) {
    const _r27 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 28);
    ɵngcc0.ɵɵelementStart(1, "button", 29);
    ɵngcc0.ɵɵlistener("click", function StartProcessCloudComponent_ng_template_7_Template_button_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r27); const ctx_r26 = ɵngcc0.ɵɵnextContext(); return ctx_r26.cancelStartProcess(); });
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "uppercase");
    ɵngcc0.ɵɵpipe(4, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(5, "button", 30);
    ɵngcc0.ɵɵlistener("click", function StartProcessCloudComponent_ng_template_7_Template_button_click_5_listener() { ɵngcc0.ɵɵrestoreView(_r27); const ctx_r28 = ɵngcc0.ɵɵnextContext(); return ctx_r28.startProcess(); });
    ɵngcc0.ɵɵtext(6);
    ɵngcc0.ɵɵpipe(7, "uppercase");
    ɵngcc0.ɵɵpipe(8, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(3, 3, ɵngcc0.ɵɵpipeBind1(4, 5, "ADF_CLOUD_PROCESS_LIST.ADF_CLOUD_START_PROCESS.FORM.ACTION.CANCEL")), " ");
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("disabled", ctx_r3.disableStartButton || !ctx_r3.isProcessFormValid());
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(7, 7, ɵngcc0.ɵɵpipeBind1(8, 9, "ADF_CLOUD_PROCESS_LIST.ADF_CLOUD_START_PROCESS.FORM.ACTION.START")), " ");
} }
function StartProcessCloudComponent_ng_template_9_mat_card_content_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-card-content");
    ɵngcc0.ɵɵelementStart(1, "mat-card-subtitle", 31);
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "uppercase");
    ɵngcc0.ɵɵpipe(4, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(3, 1, ɵngcc0.ɵɵpipeBind1(4, 3, "ADF_CLOUD_PROCESS_LIST.ADF_CLOUD_START_PROCESS.NO_PROCESS_DEFINITIONS")), " ");
} }
function StartProcessCloudComponent_ng_template_9_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, StartProcessCloudComponent_ng_template_9_mat_card_content_0_Template, 5, 5, "mat-card-content", 20);
} if (rf & 2) {
    const ctx_r5 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngIf", ctx_r5.processDefinitionLoaded);
} }
function ProcessHeaderCloudComponent_mat_card_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-card");
    ɵngcc0.ɵɵelementStart(1, "mat-card-content");
    ɵngcc0.ɵɵelement(2, "adf-card-view", 1);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("properties", ctx_r0.properties);
} }
const ɵ0 = { floatLabel: 'never' };
class MaterialModule {
}
MaterialModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MaterialModule });
MaterialModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MaterialModule_Factory(t) { return new (t || MaterialModule)(); }, providers: [
        { provide: MAT_FORM_FIELD_DEFAULT_OPTIONS, useValue: ɵ0 }
    ], imports: [[
            MatAutocompleteModule, MatButtonModule, MatCardModule, MatDialogModule,
            MatCheckboxModule, MatDatepickerModule, MatGridListModule, MatIconModule, MatInputModule,
            MatListModule, MatOptionModule, MatRadioModule, MatSelectModule, MatSlideToggleModule, MatTableModule,
            MatTabsModule, MatProgressSpinnerModule, MatNativeDateModule, MatRippleModule, MatTooltipModule,
            MatChipsModule, MatMenuModule, MatExpansionModule
        ], MatAutocompleteModule, MatButtonModule, MatCardModule, MatDialogModule,
        MatCheckboxModule, MatDatepickerModule, MatGridListModule, MatIconModule, MatInputModule,
        MatListModule, MatOptionModule, MatRadioModule, MatSelectModule, MatSlideToggleModule, MatTableModule,
        MatTabsModule, MatProgressSpinnerModule, MatNativeDateModule, MatRippleModule, MatTooltipModule,
        MatChipsModule, MatMenuModule, MatExpansionModule] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MaterialModule, { imports: function () { return [MatAutocompleteModule, MatButtonModule, MatCardModule, MatDialogModule,
        MatCheckboxModule, MatDatepickerModule, MatGridListModule, MatIconModule, MatInputModule,
        MatListModule, MatOptionModule, MatRadioModule, MatSelectModule, MatSlideToggleModule, MatTableModule,
        MatTabsModule, MatProgressSpinnerModule, MatNativeDateModule, MatRippleModule, MatTooltipModule,
        MatChipsModule, MatMenuModule, MatExpansionModule]; }, exports: function () { return [MatAutocompleteModule, MatButtonModule, MatCardModule, MatDialogModule,
        MatCheckboxModule, MatDatepickerModule, MatGridListModule, MatIconModule, MatInputModule,
        MatListModule, MatOptionModule, MatRadioModule, MatSelectModule, MatSlideToggleModule, MatTableModule,
        MatTabsModule, MatProgressSpinnerModule, MatNativeDateModule, MatRippleModule, MatTooltipModule,
        MatChipsModule, MatMenuModule, MatExpansionModule]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MaterialModule, [{
        type: NgModule,
        args: [{
                providers: [
                    { provide: MAT_FORM_FIELD_DEFAULT_OPTIONS, useValue: ɵ0 }
                ],
                imports: [
                    MatAutocompleteModule, MatButtonModule, MatCardModule, MatDialogModule,
                    MatCheckboxModule, MatDatepickerModule, MatGridListModule, MatIconModule, MatInputModule,
                    MatListModule, MatOptionModule, MatRadioModule, MatSelectModule, MatSlideToggleModule, MatTableModule,
                    MatTabsModule, MatProgressSpinnerModule, MatNativeDateModule, MatRippleModule, MatTooltipModule,
                    MatChipsModule, MatMenuModule, MatExpansionModule
                ],
                exports: [
                    MatAutocompleteModule, MatButtonModule, MatCardModule, MatDialogModule,
                    MatCheckboxModule, MatDatepickerModule, MatGridListModule, MatIconModule, MatInputModule,
                    MatListModule, MatOptionModule, MatRadioModule, MatSelectModule, MatSlideToggleModule, MatTableModule,
                    MatTabsModule, MatProgressSpinnerModule, MatNativeDateModule, MatRippleModule, MatTooltipModule,
                    MatChipsModule, MatMenuModule, MatExpansionModule
                ]
            }]
    }], null, null); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const DEFAULT_APP_INSTANCE_THEME = 'theme-2';
const DEFAULT_APP_INSTANCE_ICON = 'favorite_border';

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class AppDetailsCloudComponent {
    constructor() {
        this.selectedApp = new EventEmitter();
    }
    onSelectApp(app) {
        this.selectedApp.emit(app);
    }
    getTheme() {
        return this.applicationInstance.theme || DEFAULT_APP_INSTANCE_THEME;
    }
    getIcon() {
        return this.applicationInstance.icon || DEFAULT_APP_INSTANCE_ICON;
    }
}
AppDetailsCloudComponent.ɵfac = function AppDetailsCloudComponent_Factory(t) { return new (t || AppDetailsCloudComponent)(); };
AppDetailsCloudComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: AppDetailsCloudComponent, selectors: [["adf-cloud-app-details"]], inputs: { applicationInstance: "applicationInstance" }, outputs: { selectedApp: "selectedApp" }, decls: 12, vars: 5, consts: [[1, "adf-app-listgrid"], [1, "adf-app-listgrid-item"], ["tabindex", "0", "fxLayout", "column", "role", "button", 1, "adf-app-listgrid-item-card", 3, "title", "ngClass", "click", "keyup.enter"], [1, "adf-app-listgrid-item-card-logo"], [1, "adf-app-listgrid-item-card-logo-icon"], ["mat-card-title", "", 1, "adf-app-listgrid-item-card-title"], ["fxFlex", "1 0 auto", 1, "adf-app-listgrid-item-card-subtitle"], [1, "adf-line-clamp"]], template: function AppDetailsCloudComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "div", 1);
        ɵngcc0.ɵɵelementStart(2, "mat-card", 2);
        ɵngcc0.ɵɵlistener("click", function AppDetailsCloudComponent_Template_mat_card_click_2_listener() { return ctx.onSelectApp(ctx.applicationInstance); })("keyup.enter", function AppDetailsCloudComponent_Template_mat_card_keyup_enter_2_listener() { return ctx.onSelectApp(ctx.applicationInstance); });
        ɵngcc0.ɵɵelementStart(3, "div", 3);
        ɵngcc0.ɵɵelementStart(4, "mat-icon", 4);
        ɵngcc0.ɵɵtext(5);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(6, "div", 5);
        ɵngcc0.ɵɵelementStart(7, "h1");
        ɵngcc0.ɵɵtext(8);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(9, "mat-card-subtitle", 6);
        ɵngcc0.ɵɵelementStart(10, "div", 7);
        ɵngcc0.ɵɵtext(11);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵpropertyInterpolate("title", ctx.applicationInstance.name);
        ɵngcc0.ɵɵproperty("ngClass", ctx.getTheme());
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵtextInterpolate(ctx.getIcon());
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵtextInterpolate(ctx.applicationInstance.name);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵtextInterpolate(ctx.applicationInstance.description);
    } }, directives: [ɵngcc1.MatCard, ɵngcc2.DefaultLayoutDirective, ɵngcc3.NgClass, ɵngcc4.DefaultClassDirective, ɵngcc5.MatIcon, ɵngcc1.MatCardTitle, ɵngcc1.MatCardSubtitle, ɵngcc2.DefaultFlexDirective], styles: [".adf-app-listgrid{padding:8px}.adf-app-listgrid-item{box-sizing:border-box;outline:none;padding:8px}.adf-app-listgrid-item-card{min-height:200px;outline:none;padding:0!important;transition:transform .28s cubic-bezier(.4,0,.2,1),box-shadow .28s cubic-bezier(.4,0,.2,1)}.adf-app-listgrid-item-card.theme-1{background-color:#269abc}.adf-app-listgrid-item-card.theme-2{background-color:#7da9b0}.adf-app-listgrid-item-card.theme-3{background-color:#7689ab}.adf-app-listgrid-item-card.theme-4{background-color:#c74e3e}.adf-app-listgrid-item-card.theme-5{background-color:#fab96c}.adf-app-listgrid-item-card.theme-6{background-color:#759d4c}.adf-app-listgrid-item-card.theme-7{background-color:#b1b489}.adf-app-listgrid-item-card.theme-8{background-color:#a17299}.adf-app-listgrid-item-card.theme-9{background-color:#696c67}.adf-app-listgrid-item-card.theme-10{background-color:#cabb33}.adf-app-listgrid-item-card:hover{box-shadow:0 8px 10px 1px rgba(0,0,0,.14),0 3px 14px 2px rgba(0,0,0,.12),0 5px 5px -3px rgba(0,0,0,.2);cursor:pointer;transform:scale(1.015)}.adf-app-listgrid-item-card-logo{padding:16px;position:absolute;right:20px;top:20px;z-index:9}.adf-app-listgrid-item-card-logo-icon{font-size:70px;height:1em!important;width:1em!important}.theme-1 .adf-app-listgrid-item-card-logo-icon{color:#168aac}.theme-2 .adf-app-listgrid-item-card-logo-icon{color:#6d99a0}.theme-3 .adf-app-listgrid-item-card-logo-icon{color:#66799b}.theme-4 .adf-app-listgrid-item-card-logo-icon{color:#b73e2e}.theme-5 .adf-app-listgrid-item-card-logo-icon{color:#eaa95c}.theme-6 .adf-app-listgrid-item-card-logo-icon{color:#658d3c}.theme-7 .adf-app-listgrid-item-card-logo-icon{color:#a1a479}.theme-8 .adf-app-listgrid-item-card-logo-icon{color:#916289}.theme-9 .adf-app-listgrid-item-card-logo-icon{color:#595c57}.theme-10 .adf-app-listgrid-item-card-logo-icon{color:#baab23}.adf-app-listgrid-item-card-title{margin-bottom:0!important;padding:16px;z-index:9999}.adf-app-listgrid-item-card-title h1{color:#fff;font-size:24px;line-height:normal;margin:0;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;width:80%}.adf-app-listgrid-item-card-subtitle{color:#fff;padding:16px;z-index:9999}.adf-app-listgrid-item-card-subtitle .adf-line-clamp{line-height:1.25;overflow:hidden;padding:0!important;position:relative;text-overflow:ellipsis}@supports (-webkit-line-clamp:1){.adf-app-listgrid-item-card-subtitle .adf-line-clamp{-webkit-box-orient:vertical;-webkit-line-clamp:3;display:-webkit-box;height:3.7125em}}@supports not (-webkit-line-clamp:1){.adf-app-listgrid-item-card-subtitle .adf-line-clamp{white-space:nowrap;width:100%}}.adf-app-listgrid-item-card-actions{border-top:1px solid rgba(0,0,0,.1);box-sizing:border-box;min-height:48px;padding:0 16px 16px!important}.adf-app-listgrid-item-card-actions-icon{color:#e9f1f3}.adf-app-listgrid-item-card-actions.mat-card-actions{margin-left:0;margin-right:0}.adf-app-listgrid-item-card-actions.mat-card-actions:last-child{margin-bottom:0!important}"], encapsulation: 2 });
AppDetailsCloudComponent.propDecorators = {
    applicationInstance: [{ type: Input }],
    selectedApp: [{ type: Output }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AppDetailsCloudComponent, [{
        type: Component,
        args: [{
                selector: 'adf-cloud-app-details',
                template: "<div class=\"adf-app-listgrid\">\n    <div class=\"adf-app-listgrid-item\">\n        <mat-card tabindex=\"0\"\n            fxLayout=\"column\"\n            role=\"button\"\n            class=\"adf-app-listgrid-item-card\"\n            title=\"{{applicationInstance.name}}\"\n            [ngClass]=\"getTheme()\"\n            (click)=\"onSelectApp(applicationInstance)\"\n            (keyup.enter)=\"onSelectApp(applicationInstance)\">\n            <div class=\"adf-app-listgrid-item-card-logo\">\n                <mat-icon class=\"adf-app-listgrid-item-card-logo-icon\">{{ getIcon() }}</mat-icon>\n            </div>\n            <div mat-card-title class=\"adf-app-listgrid-item-card-title\">\n                <h1>{{applicationInstance.name}}</h1>\n            </div>\n            <mat-card-subtitle class=\"adf-app-listgrid-item-card-subtitle\" fxFlex=\"1 0 auto\">\n                <div class=\"adf-line-clamp\">{{applicationInstance.description}}</div>\n            </mat-card-subtitle>\n        </mat-card>\n    </div>\n  </div>\n",
                encapsulation: ViewEncapsulation.None,
                styles: [".adf-app-listgrid{padding:8px}.adf-app-listgrid-item{box-sizing:border-box;outline:none;padding:8px}.adf-app-listgrid-item-card{min-height:200px;outline:none;padding:0!important;transition:transform .28s cubic-bezier(.4,0,.2,1),box-shadow .28s cubic-bezier(.4,0,.2,1)}.adf-app-listgrid-item-card.theme-1{background-color:#269abc}.adf-app-listgrid-item-card.theme-2{background-color:#7da9b0}.adf-app-listgrid-item-card.theme-3{background-color:#7689ab}.adf-app-listgrid-item-card.theme-4{background-color:#c74e3e}.adf-app-listgrid-item-card.theme-5{background-color:#fab96c}.adf-app-listgrid-item-card.theme-6{background-color:#759d4c}.adf-app-listgrid-item-card.theme-7{background-color:#b1b489}.adf-app-listgrid-item-card.theme-8{background-color:#a17299}.adf-app-listgrid-item-card.theme-9{background-color:#696c67}.adf-app-listgrid-item-card.theme-10{background-color:#cabb33}.adf-app-listgrid-item-card:hover{box-shadow:0 8px 10px 1px rgba(0,0,0,.14),0 3px 14px 2px rgba(0,0,0,.12),0 5px 5px -3px rgba(0,0,0,.2);cursor:pointer;transform:scale(1.015)}.adf-app-listgrid-item-card-logo{padding:16px;position:absolute;right:20px;top:20px;z-index:9}.adf-app-listgrid-item-card-logo-icon{font-size:70px;height:1em!important;width:1em!important}.theme-1 .adf-app-listgrid-item-card-logo-icon{color:#168aac}.theme-2 .adf-app-listgrid-item-card-logo-icon{color:#6d99a0}.theme-3 .adf-app-listgrid-item-card-logo-icon{color:#66799b}.theme-4 .adf-app-listgrid-item-card-logo-icon{color:#b73e2e}.theme-5 .adf-app-listgrid-item-card-logo-icon{color:#eaa95c}.theme-6 .adf-app-listgrid-item-card-logo-icon{color:#658d3c}.theme-7 .adf-app-listgrid-item-card-logo-icon{color:#a1a479}.theme-8 .adf-app-listgrid-item-card-logo-icon{color:#916289}.theme-9 .adf-app-listgrid-item-card-logo-icon{color:#595c57}.theme-10 .adf-app-listgrid-item-card-logo-icon{color:#baab23}.adf-app-listgrid-item-card-title{margin-bottom:0!important;padding:16px;z-index:9999}.adf-app-listgrid-item-card-title h1{color:#fff;font-size:24px;line-height:normal;margin:0;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;width:80%}.adf-app-listgrid-item-card-subtitle{color:#fff;padding:16px;z-index:9999}.adf-app-listgrid-item-card-subtitle .adf-line-clamp{line-height:1.25;overflow:hidden;padding:0!important;position:relative;text-overflow:ellipsis}@supports (-webkit-line-clamp:1){.adf-app-listgrid-item-card-subtitle .adf-line-clamp{-webkit-box-orient:vertical;-webkit-line-clamp:3;display:-webkit-box;height:3.7125em}}@supports not (-webkit-line-clamp:1){.adf-app-listgrid-item-card-subtitle .adf-line-clamp{white-space:nowrap;width:100%}}.adf-app-listgrid-item-card-actions{border-top:1px solid rgba(0,0,0,.1);box-sizing:border-box;min-height:48px;padding:0 16px 16px!important}.adf-app-listgrid-item-card-actions-icon{color:#e9f1f3}.adf-app-listgrid-item-card-actions.mat-card-actions{margin-left:0;margin-right:0}.adf-app-listgrid-item-card-actions.mat-card-actions:last-child{margin-bottom:0!important}"]
            }]
    }], function () { return []; }, { selectedApp: [{
            type: Output
        }], applicationInstance: [{
            type: Input
        }] }); })();

class AppsProcessCloudService {
    constructor(apiService, logService, appConfigService) {
        this.apiService = apiService;
        this.logService = logService;
        this.appConfigService = appConfigService;
        this.loadApps();
    }
    getDeployedApplicationsByStatus(status, role) {
        return this.hasDeployedApps() ? of(this.deployedApps) : this.getApplicationsByStatus(status, role);
    }
    hasDeployedApps() {
        return this.deployedApps && this.deployedApps.length > 0;
    }
    loadApps() {
        const apps = this.appConfigService.get('alfresco-deployed-apps', []);
        apps.map((app) => {
            app.theme = app.theme ? app.theme : 'theme-1';
            app.icon = app.icon ? app.icon : 'favorite';
        });
        this.deployedApps = apps;
    }
    getApplicationsByStatus(status, role) {
        if (status === '') {
            return of([]);
        }
        const api = this.apiService.getInstance().oauth2Auth;
        const path = this.getApplicationUrl();
        const pathParams = {}, queryParams = { status: status, roles: role, sort: 'name' }, headerParams = {}, formParams = {}, bodyParam = {}, contentTypes = ['application/json'], accepts = ['application/json'];
        return from(api.callCustomApi(path, 'GET', pathParams, queryParams, headerParams, formParams, bodyParam, contentTypes, accepts))
            .pipe(map((applications) => {
            return applications.list.entries.map((application) => application.entry);
        }), catchError((err) => this.handleError(err)));
    }
    getApplicationUrl() {
        return `${this.appConfigService.get('bpmHost')}/deployment-service/v1/applications`;
    }
    handleError(error) {
        this.logService.error(error);
        return throwError(error || 'Server error');
    }
}
AppsProcessCloudService.ɵfac = function AppsProcessCloudService_Factory(t) { return new (t || AppsProcessCloudService)(ɵngcc0.ɵɵinject(ɵngcc6.AlfrescoApiService), ɵngcc0.ɵɵinject(ɵngcc6.LogService), ɵngcc0.ɵɵinject(ɵngcc6.AppConfigService)); };
AppsProcessCloudService.ɵprov = ɵɵdefineInjectable({ factory: function AppsProcessCloudService_Factory() { return new AppsProcessCloudService(ɵɵinject(AlfrescoApiService), ɵɵinject(LogService), ɵɵinject(AppConfigService)); }, token: AppsProcessCloudService, providedIn: "root" });
AppsProcessCloudService.ctorParameters = () => [
    { type: AlfrescoApiService },
    { type: LogService },
    { type: AppConfigService }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AppsProcessCloudService, [{
        type: Injectable,
        args: [{ providedIn: 'root' }]
    }], function () { return [{ type: ɵngcc6.AlfrescoApiService }, { type: ɵngcc6.LogService }, { type: ɵngcc6.AppConfigService }]; }, null); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class AppListCloudComponent {
    constructor(appsProcessCloudService) {
        this.appsProcessCloudService = appsProcessCloudService;
        this.layoutType = AppListCloudComponent.LAYOUT_GRID;
        this.appClick = new EventEmitter();
        this.loadingError$ = new Subject();
        this.hasEmptyCustomContentTemplate = false;
    }
    ngOnInit() {
        if (!this.isValidType()) {
            this.setDefaultLayoutType();
        }
        this.apps$ = this.appsProcessCloudService.getDeployedApplicationsByStatus(AppListCloudComponent.RUNNING_STATUS)
            .pipe(catchError(() => {
            this.loadingError$.next(true);
            return of();
        }));
    }
    ngAfterContentInit() {
        if (this.emptyCustomContent) {
            this.hasEmptyCustomContentTemplate = true;
        }
    }
    onSelectApp(app) {
        this.appClick.emit(app);
    }
    isValidType() {
        if (this.layoutType && (this.layoutType === AppListCloudComponent.LAYOUT_LIST || this.layoutType === AppListCloudComponent.LAYOUT_GRID)) {
            return true;
        }
        return false;
    }
    setDefaultLayoutType() {
        this.layoutType = AppListCloudComponent.LAYOUT_GRID;
    }
    isList() {
        return this.layoutType === AppListCloudComponent.LAYOUT_LIST;
    }
    isGrid() {
        return this.layoutType === AppListCloudComponent.LAYOUT_GRID;
    }
}
AppListCloudComponent.ɵfac = function AppListCloudComponent_Factory(t) { return new (t || AppListCloudComponent)(ɵngcc0.ɵɵdirectiveInject(AppsProcessCloudService)); };
AppListCloudComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: AppListCloudComponent, selectors: [["adf-cloud-app-list"]], contentQueries: function AppListCloudComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, CustomEmptyContentTemplateDirective, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.emptyCustomContent = _t.first);
    } }, inputs: { layoutType: "layoutType" }, outputs: { appClick: "appClick" }, ngContentSelectors: _c1, decls: 6, vars: 4, consts: [["class", "menu-container", 4, "ngIf", "ngIfElse"], ["noApps", ""], ["loadingOrError", ""], [1, "menu-container"], [4, "ngIf", "ngIfElse"], ["fxLayout", "row wrap", 4, "ngIf", "ngIfElse"], ["appList", ""], ["fxLayout", "row wrap"], ["fxFlex", "33.33333%", "fxFlex.lt-md", "50%", "fxFlex.lt-sm", "100%", 3, "applicationInstance", "selectedApp", 4, "ngFor", "ngForOf"], ["fxFlex", "33.33333%", "fxFlex.lt-md", "50%", "fxFlex.lt-sm", "100%", 3, "applicationInstance", "selectedApp"], [1, "adf-app-list"], ["class", "adf-app-list-item", "tabindex", "0", "role", "button", 3, "title", "click", "keyup.enter", 4, "ngFor", "ngForOf"], ["tabindex", "0", "role", "button", 1, "adf-app-list-item", 3, "title", "click", "keyup.enter"], ["matListIcon", ""], ["matLine", ""], [1, "adf-app-list-empty"], ["defaultEmptyTemplate", ""], ["icon", "apps", 3, "title", "subtitle"], ["class", "adf-app-list-error", 4, "ngIf", "ngIfElse"], ["loading", ""], [1, "adf-app-list-error"], ["icon", "error_outline", 3, "title", "subtitle"], [1, "adf-app-list-spinner"]], template: function AppListCloudComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef(_c0);
        ɵngcc0.ɵɵtemplate(0, AppListCloudComponent_div_0_Template, 2, 2, "div", 0);
        ɵngcc0.ɵɵpipe(1, "async");
        ɵngcc0.ɵɵtemplate(2, AppListCloudComponent_ng_template_2_Template, 4, 2, "ng-template", null, 1, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵtemplate(4, AppListCloudComponent_ng_template_4_Template, 4, 4, "ng-template", null, 2, ɵngcc0.ɵɵtemplateRefExtractor);
    } if (rf & 2) {
        const _r3 = ɵngcc0.ɵɵreference(5);
        ɵngcc0.ɵɵproperty("ngIf", ɵngcc0.ɵɵpipeBind1(1, 2, ctx.apps$))("ngIfElse", _r3);
    } }, directives: [ɵngcc3.NgIf, ɵngcc2.DefaultLayoutDirective, ɵngcc3.NgForOf, AppDetailsCloudComponent, ɵngcc2.DefaultFlexDirective, ɵngcc7.MatList, ɵngcc7.MatListItem, ɵngcc5.MatIcon, ɵngcc7.MatListIconCssMatStyler, ɵngcc8.MatLine, ɵngcc6.EmptyContentComponent, ɵngcc9.MatSpinner], pipes: [ɵngcc3.AsyncPipe, ɵngcc10.TranslatePipe], styles: ["[_nghost-%COMP%]{width:100%}.adf-app-list-item[_ngcontent-%COMP%]{cursor:pointer}.adf-app-list-empty[_ngcontent-%COMP%], .adf-app-list-error[_ngcontent-%COMP%], .adf-app-list-spinner[_ngcontent-%COMP%]{align-items:center;display:flex;flex-direction:column;height:85vh;justify-content:center}.adf-app-list-empty[_ngcontent-%COMP%]   .mat-spinner[_ngcontent-%COMP%], .adf-app-list-error[_ngcontent-%COMP%]   .mat-spinner[_ngcontent-%COMP%], .adf-app-list-spinner[_ngcontent-%COMP%]   .mat-spinner[_ngcontent-%COMP%]{margin:0 auto}"] });
AppListCloudComponent.LAYOUT_LIST = 'LIST';
AppListCloudComponent.LAYOUT_GRID = 'GRID';
AppListCloudComponent.RUNNING_STATUS = 'RUNNING';
AppListCloudComponent.ctorParameters = () => [
    { type: AppsProcessCloudService }
];
AppListCloudComponent.propDecorators = {
    emptyCustomContent: [{ type: ContentChild, args: [CustomEmptyContentTemplateDirective,] }],
    layoutType: [{ type: Input }],
    appClick: [{ type: Output }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AppListCloudComponent, [{
        type: Component,
        args: [{
                selector: 'adf-cloud-app-list',
                template: "<div class=\"menu-container\" *ngIf=\"apps$ | async as appsList; else loadingOrError\">\n    <ng-container *ngIf=\"appsList.length > 0; else noApps\">\n        <div *ngIf=\"isGrid(); else appList\" fxLayout=\"row wrap\">\n            <adf-cloud-app-details fxFlex=\"33.33333%\" fxFlex.lt-md=\"50%\" fxFlex.lt-sm=\"100%\"\n                *ngFor=\"let app of appsList\" [applicationInstance]=\"app\" (selectedApp)=\"onSelectApp($event)\">\n            </adf-cloud-app-details>\n        </div>\n\n        <ng-template #appList>\n            <mat-list class=\"adf-app-list\">\n                <mat-list-item class=\"adf-app-list-item\" (click)=\"onSelectApp(app)\" (keyup.enter)=\"onSelectApp(app)\"\n                    *ngFor=\"let app of appsList\" tabindex=\"0\" role=\"button\" title=\"{{app.name}}\">\n                    <mat-icon matListIcon>touch_app</mat-icon>\n                    <span matLine>{{app.name}}</span>\n                </mat-list-item>\n            </mat-list>\n        </ng-template>\n    </ng-container>\n</div>\n<ng-template #noApps>\n    <div class=\"adf-app-list-empty\">\n        <ng-content select=\"adf-custom-empty-content-template\" *ngIf=\"hasEmptyCustomContentTemplate; else defaultEmptyTemplate\"\n            class=\"adf-custom-empty-template\">\n        </ng-content>\n\n        <ng-template #defaultEmptyTemplate>\n            <adf-empty-content icon=\"apps\" [title]=\"'ADF_CLOUD_TASK_LIST.APPS.NO_APPS.TITLE' | translate\"\n                [subtitle]=\"'ADF_CLOUD_TASK_LIST.APPS.NO_APPS.SUBTITLE' | translate\">\n            </adf-empty-content>\n        </ng-template>\n    </div>\n</ng-template>\n<ng-template #loadingOrError>\n    <div *ngIf=\"loadingError$ | async; else loading\" class=\"adf-app-list-error\">\n        <adf-empty-content icon=\"error_outline\" [title]=\"'ADF_CLOUD_TASK_LIST.APPS.ERROR.TITLE' | translate\"\n            [subtitle]=\"'ADF_CLOUD_TASK_LIST.APPS.ERROR.SUBTITLE' | translate\">\n        </adf-empty-content>\n    </div>\n    <ng-template #loading>\n    <ng-container>\n        <div class=\"adf-app-list-spinner\">\n            <mat-spinner></mat-spinner>\n        </div>\n    </ng-container>\n</ng-template>\n</ng-template>\n",
                styles: [":host{width:100%}.adf-app-list-item{cursor:pointer}.adf-app-list-empty,.adf-app-list-error,.adf-app-list-spinner{align-items:center;display:flex;flex-direction:column;height:85vh;justify-content:center}.adf-app-list-empty .mat-spinner,.adf-app-list-error .mat-spinner,.adf-app-list-spinner .mat-spinner{margin:0 auto}"]
            }]
    }], function () { return [{ type: AppsProcessCloudService }]; }, { layoutType: [{
            type: Input
        }], appClick: [{
            type: Output
        }], emptyCustomContent: [{
            type: ContentChild,
            args: [CustomEmptyContentTemplateDirective]
        }] }); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class AppListCloudModule {
}
AppListCloudModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: AppListCloudModule });
AppListCloudModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function AppListCloudModule_Factory(t) { return new (t || AppListCloudModule)(); }, imports: [[
            CommonModule,
            TemplateModule,
            MaterialModule,
            FlexLayoutModule,
            CoreModule
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(AppListCloudModule, { declarations: function () { return [AppListCloudComponent, AppDetailsCloudComponent]; }, imports: function () { return [CommonModule,
        TemplateModule, MaterialModule, FlexLayoutModule,
        CoreModule]; }, exports: function () { return [AppListCloudComponent, AppDetailsCloudComponent]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AppListCloudModule, [{
        type: NgModule,
        args: [{
                imports: [
                    CommonModule,
                    TemplateModule,
                    MaterialModule,
                    FlexLayoutModule,
                    CoreModule
                ],
                declarations: [
                    AppListCloudComponent,
                    AppDetailsCloudComponent
                ],
                exports: [
                    AppListCloudComponent,
                    AppDetailsCloudComponent
                ]
            }]
    }], null, null); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class TaskQueryCloudRequestModel {
    constructor(obj) {
        if (obj) {
            this.appName = obj.appName;
            this.appVersion = obj.appVersion;
            this.assignee = obj.assignee;
            this.claimedDate = obj.claimedDate;
            this.createdDate = obj.createdDate;
            this.createdFrom = obj.createdFrom;
            this.createdTo = obj.createdTo;
            this.description = obj.description;
            this.dueDate = obj.dueDate;
            this.lastModifiedFrom = obj.lastModifiedFrom;
            this.lastModifiedTo = obj.lastModifiedTo;
            this.dueDateFrom = obj.dueDateFrom;
            this.dueDateTo = obj.dueDateTo;
            this.id = obj.id;
            this.name = obj.name;
            this.owner = obj.owner;
            this.parentTaskId = obj.parentTaskId;
            this.standalone = obj.standalone;
            this.priority = obj.priority;
            this.processDefinitionId = obj.processDefinitionId;
            this.processDefinitionName = obj.processDefinitionName;
            this.processInstanceId = obj.processInstanceId;
            this.status = obj.status;
            this.completedBy = obj.completedBy;
            this.maxItems = obj.maxItems;
            this.skipCount = obj.skipCount;
            this.sorting = obj.sorting;
            this.completedFrom = obj.completedFrom;
            this.completedTo = obj.completedTo;
            this.completedDate = obj.completedDate;
            this.candidateGroupId = obj.candidateGroupId;
        }
    }
}

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class BaseCloudService {
    constructor(apiService, appConfigService) {
        this.apiService = apiService;
        this.appConfigService = appConfigService;
        this.defaultParams = {
            path: '',
            httpMethod: '',
            contentTypes: ['application/json'],
            accepts: ['application/json'],
            returnType: Object
        };
    }
    getBasePath(appName) {
        return appName
            ? `${this.contextRoot}/${appName}`
            : this.contextRoot;
    }
    post(url, data) {
        return from(this.callApi(Object.assign(Object.assign({}, this.defaultParams), { path: url, httpMethod: 'POST', bodyParam: data })));
    }
    put(url, data) {
        return from(this.callApi(Object.assign(Object.assign({}, this.defaultParams), { path: url, httpMethod: 'PUT', bodyParam: data })));
    }
    delete(url) {
        return from(this.callApi(Object.assign(Object.assign({}, this.defaultParams), { path: url, httpMethod: 'DELETE' })));
    }
    get(url, queryParams) {
        return from(this.callApi(Object.assign(Object.assign({}, this.defaultParams), { path: url, httpMethod: 'GET', queryParams })));
    }
    callApi(params) {
        return this.apiService.getInstance()
            .oauth2Auth.callCustomApi(params.path, params.httpMethod, params.pathParams, params.queryParams, params.headerParams, params.formParams, params.bodyParam, params.contentTypes, params.accepts, params.returnType, params.contextRoot, params.responseType);
    }
    get contextRoot() {
        return this.appConfigService.get('bpmHost', '');
    }
}

class TaskListCloudService extends BaseCloudService {
    constructor(apiService, appConfigService, logService) {
        super(apiService, appConfigService);
        this.logService = logService;
    }
    getTaskByRequest(requestNode, queryUrl) {
        if (requestNode.appName || requestNode.appName === '') {
            queryUrl = queryUrl || `${this.getBasePath(requestNode.appName)}/query/v1/tasks`;
            const queryParams = this.buildQueryParams(requestNode);
            const sortingParams = this.buildSortingParam(requestNode.sorting);
            if (sortingParams) {
                queryParams['sort'] = sortingParams;
            }
            return this.get(queryUrl, queryParams).pipe(map((response) => {
                const entries = response.list && response.list.entries;
                if (entries) {
                    response.list.entries = entries.map((entryData) => entryData.entry);
                }
                return response;
            }));
        }
        else {
            this.logService.error('Appname is mandatory for querying task');
            return throwError('Appname not configured');
        }
    }
    buildQueryParams(requestNode) {
        const queryParam = {};
        for (const property in requestNode) {
            if (requestNode.hasOwnProperty(property) &&
                !this.isExcludedField(property) &&
                this.isPropertyValueValid(requestNode, property)) {
                queryParam[property] = requestNode[property];
            }
        }
        return queryParam;
    }
    isExcludedField(property) {
        return property === 'appName' || property === 'sorting';
    }
    isPropertyValueValid(requestNode, property) {
        return requestNode[property] !== '' && requestNode[property] !== null && requestNode[property] !== undefined;
    }
    buildSortingParam(models) {
        let finalSorting = '';
        if (models) {
            for (const sort of models) {
                if (!finalSorting) {
                    finalSorting = `${sort.orderBy},${sort.direction}`;
                }
                else {
                    finalSorting = `${finalSorting}&${sort.orderBy},${sort.direction}`;
                }
            }
        }
        return encodeURI(finalSorting);
    }
}
TaskListCloudService.ɵfac = function TaskListCloudService_Factory(t) { return new (t || TaskListCloudService)(ɵngcc0.ɵɵinject(ɵngcc6.AlfrescoApiService), ɵngcc0.ɵɵinject(ɵngcc6.AppConfigService), ɵngcc0.ɵɵinject(ɵngcc6.LogService)); };
TaskListCloudService.ɵprov = ɵɵdefineInjectable({ factory: function TaskListCloudService_Factory() { return new TaskListCloudService(ɵɵinject(AlfrescoApiService), ɵɵinject(AppConfigService), ɵɵinject(LogService)); }, token: TaskListCloudService, providedIn: "root" });
TaskListCloudService.ctorParameters = () => [
    { type: AlfrescoApiService },
    { type: AppConfigService },
    { type: LogService }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TaskListCloudService, [{
        type: Injectable,
        args: [{ providedIn: 'root' }]
    }], function () { return [{ type: ɵngcc6.AlfrescoApiService }, { type: ɵngcc6.AppConfigService }, { type: ɵngcc6.LogService }]; }, null); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const taskPresetsCloudDefaultModel = {
    'default': [
        {
            'key': 'name',
            'type': 'text',
            'title': 'ADF_CLOUD_TASK_LIST.PROPERTIES.NAME',
            'sortable': true
        },
        {
            'key': 'created',
            'type': 'text',
            'title': 'ADF_CLOUD_TASK_LIST.PROPERTIES.CREATED',
            'cssClass': 'hidden',
            'sortable': true
        },
        {
            'key': 'assignee',
            'type': 'text',
            'title': 'ADF_CLOUD_TASK_LIST.PROPERTIES.ASSIGNEE',
            'cssClass': 'hidden',
            'sortable': true
        }
    ]
};
const serviceTaskPresetsCloudDefaultModel = {
    'default': [
        {
            'key': 'activityName',
            'type': 'text',
            'title': 'ADF_CLOUD_SERVICE_TASK_LIST.PROPERTIES.ACTIVITY_NAME',
            'sortable': true
        },
        {
            'key': 'status',
            'type': 'text',
            'title': 'ADF_CLOUD_SERVICE_TASK_LIST.PROPERTIES.STATUS',
            'sortable': true
        },
        {
            'key': 'startedDate',
            'type': 'text',
            'title': 'ADF_CLOUD_SERVICE_TASK_LIST.PROPERTIES.STARTED_DATE',
            'cssClass': 'hidden',
            'sortable': true
        },
        {
            'key': 'completedDate',
            'type': 'text',
            'title': 'ADF_CLOUD_SERVICE_TASK_LIST.PROPERTIES.COMPLETED_DATE',
            'cssClass': 'hidden',
            'sortable': true
        }
    ]
};

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class TaskListCloudSortingModel {
    constructor(obj) {
        if (obj) {
            this.orderBy = obj.orderBy;
            this.direction = obj.direction;
        }
    }
}

class StartTaskCloudRequestModel {
    constructor(obj) {
        if (obj) {
            this.name = obj.name || null;
            this.description = obj.description || null;
            this.assignee = obj.assignee || null;
            this.priority = obj.priority || null;
            this.dueDate = obj.dueDate || null;
            this.candidateUsers = obj.candidateUsers || null;
            this.candidateGroups = obj.candidateGroups || null;
            this.formKey = obj.formKey || null;
            this.payloadType = 'CreateTaskPayload';
        }
    }
}

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class ProcessDefinitionCloud {
    constructor(obj) {
        this.id = obj && obj.id || null;
        this.name = obj && obj.name || null;
        this.appName = obj && obj.appName || null;
        this.key = obj && obj.key || null;
        this.formKey = obj && obj.formKey || null;
        this.version = obj && obj.version || 0;
        this.appVersion = obj && obj.appVersion || 0;
    }
}

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var ClaimTaskEnum;
(function (ClaimTaskEnum) {
    ClaimTaskEnum["claim"] = "claim";
    ClaimTaskEnum["unclaim"] = "unclaim";
})(ClaimTaskEnum || (ClaimTaskEnum = {}));
const DEFAULT_TASK_PRIORITIES = [
    { label: 'ADF_CLOUD_TASK_LIST.PROPERTIES.PRIORITY_VALUES.NONE', value: '0', key: '0' },
    { label: 'ADF_CLOUD_TASK_LIST.PROPERTIES.PRIORITY_VALUES.LOW', value: '1', key: '1' },
    { label: 'ADF_CLOUD_TASK_LIST.PROPERTIES.PRIORITY_VALUES.NORMAL', value: '2', key: '2' },
    { label: 'ADF_CLOUD_TASK_LIST.PROPERTIES.PRIORITY_VALUES.HIGH', value: '3', key: '3' }
];
const TASK_ASSIGNED_STATE = 'ASSIGNED';
const TASK_CREATED_STATE = 'CREATED';

class TaskCloudService extends BaseCloudService {
    constructor(apiService, appConfigService, logService, translateService, identityUserService) {
        super(apiService, appConfigService);
        this.logService = logService;
        this.translateService = translateService;
        this.identityUserService = identityUserService;
        this.dataChangesDetected$ = new Subject();
    }
    completeTask(appName, taskId) {
        if ((appName || appName === '') && taskId) {
            const url = `${this.getBasePath(appName)}/rb/v1/tasks/${taskId}/complete`;
            const payload = { 'payloadType': 'CompleteTaskPayload' };
            return this.post(url, payload);
        }
        else {
            this.logService.error('AppName and TaskId are mandatory for complete a task');
            return throwError('AppName/TaskId not configured');
        }
    }
    canCompleteTask(taskDetails) {
        return taskDetails && taskDetails.status === TASK_ASSIGNED_STATE && this.isAssignedToMe(taskDetails.assignee);
    }
    isTaskEditable(taskDetails) {
        return taskDetails && taskDetails.status === TASK_ASSIGNED_STATE && this.isAssignedToMe(taskDetails.assignee);
    }
    isAssigneePropertyClickable(taskDetails, candidateUsers, candidateGroups) {
        let isClickable = false;
        const states = [TASK_ASSIGNED_STATE];
        if ((candidateUsers === null || candidateUsers === void 0 ? void 0 : candidateUsers.length) || (candidateGroups === null || candidateGroups === void 0 ? void 0 : candidateGroups.length)) {
            isClickable = states.includes(taskDetails.status);
        }
        return isClickable;
    }
    canClaimTask(taskDetails) {
        return taskDetails && taskDetails.status === TASK_CREATED_STATE;
    }
    canUnclaimTask(taskDetails) {
        const currentUser = this.identityUserService.getCurrentUserInfo().username;
        return taskDetails && taskDetails.status === TASK_ASSIGNED_STATE && taskDetails.assignee === currentUser;
    }
    claimTask(appName, taskId, assignee) {
        if ((appName || appName === '') && taskId) {
            const queryUrl = `${this.getBasePath(appName)}/rb/v1/tasks/${taskId}/claim?assignee=${assignee}`;
            return this.post(queryUrl).pipe(map((res) => {
                this.dataChangesDetected$.next();
                return res.entry;
            }));
        }
        else {
            this.logService.error('AppName and TaskId are mandatory for querying a task');
            return throwError('AppName/TaskId not configured');
        }
    }
    unclaimTask(appName, taskId) {
        if ((appName || appName === '') && taskId) {
            const queryUrl = `${this.getBasePath(appName)}/rb/v1/tasks/${taskId}/release`;
            return this.post(queryUrl).pipe(map((res) => {
                this.dataChangesDetected$.next();
                return res.entry;
            }));
        }
        else {
            this.logService.error('AppName and TaskId are mandatory for querying a task');
            return throwError('AppName/TaskId not configured');
        }
    }
    getTaskById(appName, taskId) {
        if ((appName || appName === '') && taskId) {
            const queryUrl = `${this.getBasePath(appName)}/query/v1/tasks/${taskId}`;
            return this.get(queryUrl).pipe(map((res) => res.entry));
        }
        else {
            this.logService.error('AppName and TaskId are mandatory for querying a task');
            return throwError('AppName/TaskId not configured');
        }
    }
    createNewTask(startTaskRequest, appName) {
        const queryUrl = `${this.getBasePath(appName)}/rb/v1/tasks`;
        const payload = JSON.stringify(new StartTaskCloudRequestModel(startTaskRequest));
        return this.post(queryUrl, payload)
            .pipe(map(response => response.entry));
    }
    updateTask(appName, taskId, payload) {
        if ((appName || appName === '') && taskId) {
            payload.payloadType = 'UpdateTaskPayload';
            const queryUrl = `${this.getBasePath(appName)}/rb/v1/tasks/${taskId}`;
            return this.put(queryUrl, payload).pipe(map((res) => res.entry));
        }
        else {
            this.logService.error('AppName and TaskId are mandatory for querying a task');
            return throwError('AppName/TaskId not configured');
        }
    }
    getCandidateUsers(appName, taskId) {
        if ((appName || appName === '') && taskId) {
            const queryUrl = `${this.getBasePath(appName)}/query/v1/tasks/${taskId}/candidate-users`;
            return this.get(queryUrl);
        }
        else {
            this.logService.error('AppName and TaskId are mandatory to get candidate user');
            return of([]);
        }
    }
    getCandidateGroups(appName, taskId) {
        if ((appName || appName === '') && taskId) {
            const queryUrl = `${this.getBasePath(appName)}/query/v1/tasks/${taskId}/candidate-groups`;
            return this.get(queryUrl);
        }
        else {
            this.logService.error('AppName and TaskId are mandatory to get candidate groups');
            return of([]);
        }
    }
    getProcessDefinitions(appName) {
        if (appName || appName === '') {
            const url = `${this.getBasePath(appName)}/rb/v1/process-definitions`;
            return this.get(url).pipe(map((res) => {
                return res.list.entries.map((processDefs) => new ProcessDefinitionCloud(processDefs.entry));
            }));
        }
        else {
            this.logService.error('AppName is mandatory for querying task');
            return throwError('AppName not configured');
        }
    }
    assign(appName, taskId, assignee) {
        if (appName && taskId) {
            const payLoad = { 'assignee': assignee, 'taskId': taskId, 'payloadType': 'AssignTaskPayload' };
            const url = `${this.getBasePath(appName)}/rb/v1/tasks/${taskId}/assign`;
            return this.post(url, payLoad).pipe(map((res) => {
                return res.entry;
            }));
        }
        else {
            this.logService.error('AppName and TaskId are mandatory to change/update the task assignee');
            return throwError('AppName/TaskId not configured');
        }
    }
    getPriorityLabel(priority) {
        const priorityItem = this.priorities.find(item => item.value === priority.toString()) || this.priorities[0];
        return this.translateService.instant(priorityItem.label);
    }
    get priorities() {
        return this.appConfigService.get('adf-cloud-priority-values') || DEFAULT_TASK_PRIORITIES;
    }
    isAssignedToMe(assignee) {
        const currentUser = this.identityUserService.getCurrentUserInfo().username;
        return assignee === currentUser;
    }
}
TaskCloudService.ɵfac = function TaskCloudService_Factory(t) { return new (t || TaskCloudService)(ɵngcc0.ɵɵinject(ɵngcc6.AlfrescoApiService), ɵngcc0.ɵɵinject(ɵngcc6.AppConfigService), ɵngcc0.ɵɵinject(ɵngcc6.LogService), ɵngcc0.ɵɵinject(ɵngcc6.TranslationService), ɵngcc0.ɵɵinject(ɵngcc6.IdentityUserService)); };
TaskCloudService.ɵprov = ɵɵdefineInjectable({ factory: function TaskCloudService_Factory() { return new TaskCloudService(ɵɵinject(AlfrescoApiService), ɵɵinject(AppConfigService), ɵɵinject(LogService), ɵɵinject(TranslationService), ɵɵinject(IdentityUserService)); }, token: TaskCloudService, providedIn: "root" });
TaskCloudService.ctorParameters = () => [
    { type: AlfrescoApiService },
    { type: AppConfigService },
    { type: LogService },
    { type: TranslationService },
    { type: IdentityUserService }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TaskCloudService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc6.AlfrescoApiService }, { type: ɵngcc6.AppConfigService }, { type: ɵngcc6.LogService }, { type: ɵngcc6.TranslationService }, { type: ɵngcc6.IdentityUserService }]; }, null); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class BaseTaskListCloudComponent extends DataTableSchema {
    constructor(appConfigService, taskCloudService, userPreferences, presetKey) {
        super(appConfigService, presetKey, taskPresetsCloudDefaultModel);
        this.taskCloudService = taskCloudService;
        this.userPreferences = userPreferences;
        this.appName = '';
        this.selectionMode = 'single';
        this.multiselect = false;
        this.stickyHeader = false;
        this.showActions = false;
        this.actionsPosition = 'right';
        this.showContextMenu = false;
        this.showRowContextMenu = new EventEmitter();
        this.showRowActionsMenu = new EventEmitter();
        this.executeRowAction = new EventEmitter();
        this.rowClick = new EventEmitter();
        this.rowsSelected = new EventEmitter();
        this.success = new EventEmitter();
        this.error = new EventEmitter();
        this.rows = [];
        this.skipCount = 0;
        this.isLoading = true;
        this.defaultSorting = { key: 'startDate', direction: 'desc' };
        this.onDestroy$ = new Subject();
        this.size = userPreferences.paginationSize;
        this.pagination = new BehaviorSubject({
            maxItems: this.size,
            skipCount: 0,
            totalItems: 0
        });
        this.boundReplacePriorityValues = this.replacePriorityValues.bind(this);
    }
    ngOnInit() {
        this.userPreferences
            .select(UserPreferenceValues.PaginationSize)
            .pipe(takeUntil(this.onDestroy$))
            .subscribe(pageSize => this.size = pageSize);
    }
    ngOnChanges(changes) {
        if (changes['sorting']) {
            this.formatSorting(changes['sorting'].currentValue);
        }
        this.reload();
    }
    ngOnDestroy() {
        this.onDestroy$.next(true);
        this.onDestroy$.complete();
    }
    ngAfterContentInit() {
        this.createDatatableSchema();
    }
    reload() {
        this.requestNode = this.createRequestNode();
        if (this.requestNode.appName || this.requestNode.appName === '') {
            this.load(this.requestNode);
        }
        else {
            this.rows = [];
        }
    }
    isListEmpty() {
        return !this.rows || this.rows.length === 0;
    }
    resetPagination() {
        this.skipCount = 0;
        this.size = this.userPreferences.paginationSize;
        this.pagination.next({
            skipCount: 0,
            maxItems: this.size
        });
    }
    updatePagination(pagination) {
        this.size = pagination.maxItems;
        this.skipCount = pagination.skipCount;
        this.pagination.next(pagination);
        this.reload();
    }
    onSortingChanged(event) {
        this.setSorting(event.detail);
        this.formatSorting(this.sorting);
        this.reload();
    }
    onRowClick(item) {
        this.currentInstanceId = item.value.getValue('id');
        this.rowClick.emit(this.currentInstanceId);
    }
    onRowSelect(event) {
        this.selectedInstances = [...event.detail.selection];
        this.rowsSelected.emit(this.selectedInstances);
    }
    onRowUnselect(event) {
        this.selectedInstances = [...event.detail.selection];
        this.rowsSelected.emit(this.selectedInstances);
    }
    onRowKeyUp(event) {
        if (event.detail.keyboardEvent.key === 'Enter') {
            event.preventDefault();
            this.currentInstanceId = event.detail.row.getValue('id');
            this.rowClick.emit(this.currentInstanceId);
        }
    }
    onShowRowActionsMenu(event) {
        this.showRowActionsMenu.emit(event);
    }
    onShowRowContextMenu(event) {
        this.showRowContextMenu.emit(event);
    }
    onExecuteRowAction(row) {
        this.executeRowAction.emit(row);
    }
    setSorting(sortDetail) {
        const sorting = sortDetail ? {
            orderBy: sortDetail.key,
            direction: sortDetail.direction.toUpperCase()
        } : Object.assign({}, this.defaultSorting);
        this.sorting = [new TaskListCloudSortingModel(sorting)];
    }
    formatSorting(sorting) {
        this.formattedSorting = this.isValidSorting(sorting) ? [
            sorting[0].orderBy,
            sorting[0].direction.toLocaleLowerCase()
        ] : null;
    }
    isValidSorting(sorting) {
        return sorting && sorting.length && sorting[0].orderBy && sorting[0].direction;
    }
    replacePriorityValues(row, column) {
        return column.key.split('.').reduce((source, key) => {
            if (key === 'priority' && source && typeof (source[key]) === 'number') {
                return source[key] = this.taskCloudService.getPriorityLabel(source[key]);
            }
            return source && typeof (source) === 'object' ? source[key] : undefined;
        }, row.obj);
    }
}
BaseTaskListCloudComponent.ɵfac = function BaseTaskListCloudComponent_Factory(t) { return new (t || BaseTaskListCloudComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc6.AppConfigService), ɵngcc0.ɵɵdirectiveInject(TaskCloudService), ɵngcc0.ɵɵdirectiveInject(ɵngcc6.UserPreferencesService), ɵngcc0.ɵɵdirectiveInject(String)); };
BaseTaskListCloudComponent.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: BaseTaskListCloudComponent, contentQueries: function BaseTaskListCloudComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, CustomEmptyContentTemplateDirective, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.emptyCustomContent = _t.first);
    } }, inputs: { appName: "appName", selectionMode: "selectionMode", multiselect: "multiselect", stickyHeader: "stickyHeader", showActions: "showActions", actionsPosition: "actionsPosition", showContextMenu: "showContextMenu", sorting: "sorting" }, outputs: { showRowContextMenu: "showRowContextMenu", showRowActionsMenu: "showRowActionsMenu", executeRowAction: "executeRowAction", rowClick: "rowClick", rowsSelected: "rowsSelected", success: "success", error: "error" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature] });
BaseTaskListCloudComponent.ctorParameters = () => [
    { type: AppConfigService },
    { type: TaskCloudService },
    { type: UserPreferencesService },
    { type: String }
];
BaseTaskListCloudComponent.propDecorators = {
    emptyCustomContent: [{ type: ContentChild, args: [CustomEmptyContentTemplateDirective,] }],
    appName: [{ type: Input }],
    selectionMode: [{ type: Input }],
    multiselect: [{ type: Input }],
    stickyHeader: [{ type: Input }],
    sorting: [{ type: Input }],
    showActions: [{ type: Input }],
    actionsPosition: [{ type: Input }],
    showContextMenu: [{ type: Input }],
    showRowContextMenu: [{ type: Output }],
    showRowActionsMenu: [{ type: Output }],
    executeRowAction: [{ type: Output }],
    rowClick: [{ type: Output }],
    rowsSelected: [{ type: Output }],
    success: [{ type: Output }],
    error: [{ type: Output }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(BaseTaskListCloudComponent, [{
        type: Directive
    }], function () { return [{ type: ɵngcc6.AppConfigService }, { type: TaskCloudService }, { type: ɵngcc6.UserPreferencesService }, { type: String }]; }, { appName: [{
            type: Input
        }], selectionMode: [{
            type: Input
        }], multiselect: [{
            type: Input
        }], stickyHeader: [{
            type: Input
        }], showActions: [{
            type: Input
        }], actionsPosition: [{
            type: Input
        }], showContextMenu: [{
            type: Input
        }], showRowContextMenu: [{
            type: Output
        }], showRowActionsMenu: [{
            type: Output
        }], executeRowAction: [{
            type: Output
        }], rowClick: [{
            type: Output
        }], rowsSelected: [{
            type: Output
        }], success: [{
            type: Output
        }], error: [{
            type: Output
        }], sorting: [{
            type: Input
        }], emptyCustomContent: [{
            type: ContentChild,
            args: [CustomEmptyContentTemplateDirective]
        }] }); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class TaskListCloudComponent extends BaseTaskListCloudComponent {
    constructor(taskListCloudService, appConfigService, taskCloudService, userPreferences) {
        super(appConfigService, taskCloudService, userPreferences, TaskListCloudComponent.PRESET_KEY);
        this.taskListCloudService = taskListCloudService;
        this.assignee = '';
        this.createdFrom = '';
        this.createdTo = '';
        this.lastModifiedFrom = '';
        this.lastModifiedTo = '';
        this.dueDateFrom = '';
        this.dueDateTo = '';
        this.id = '';
        this.name = '';
        this.parentTaskId = '';
        this.processDefinitionName = '';
        this.processDefinitionId = '';
        this.processInstanceId = '';
        this.status = '';
        this.owner = '';
        this.standalone = false;
        this.completedDate = '';
        this.completedFrom = '';
        this.completedTo = '';
        this.candidateGroupId = '';
    }
    load(requestNode) {
        this.isLoading = true;
        this.taskListCloudService.getTaskByRequest(requestNode).subscribe((tasks) => {
            this.rows = tasks.list.entries;
            this.success.emit(tasks);
            this.isLoading = false;
            this.pagination.next(tasks.list.pagination);
        }, (error) => {
            this.error.emit(error);
            this.isLoading = false;
        });
    }
    createRequestNode() {
        const requestNode = {
            appName: this.appName,
            assignee: this.assignee,
            id: this.id,
            name: this.name,
            parentTaskId: this.parentTaskId,
            processDefinitionName: this.processDefinitionName,
            processDefinitionId: this.processDefinitionId,
            processInstanceId: this.processInstanceId,
            owner: this.owner,
            priority: this.priority,
            lastModifiedFrom: this.lastModifiedFrom,
            lastModifiedTo: this.lastModifiedTo,
            dueDateFrom: this.dueDateFrom,
            dueDateTo: this.dueDateTo,
            status: this.status,
            dueDate: this.dueDate,
            createdDate: this.createdDate,
            createdFrom: this.createdFrom,
            createdTo: this.createdTo,
            maxItems: this.size,
            skipCount: this.skipCount,
            sorting: this.sorting,
            standalone: this.standalone,
            completedBy: this.completedBy,
            completedFrom: this.completedFrom,
            completedTo: this.completedTo,
            completedDate: this.completedDate,
            candidateGroupId: this.candidateGroupId
        };
        return new TaskQueryCloudRequestModel(requestNode);
    }
}
TaskListCloudComponent.ɵfac = function TaskListCloudComponent_Factory(t) { return new (t || TaskListCloudComponent)(ɵngcc0.ɵɵdirectiveInject(TaskListCloudService), ɵngcc0.ɵɵdirectiveInject(ɵngcc6.AppConfigService), ɵngcc0.ɵɵdirectiveInject(TaskCloudService), ɵngcc0.ɵɵdirectiveInject(ɵngcc6.UserPreferencesService)); };
TaskListCloudComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: TaskListCloudComponent, selectors: [["adf-cloud-task-list"]], inputs: { assignee: "assignee", createdFrom: "createdFrom", createdTo: "createdTo", lastModifiedFrom: "lastModifiedFrom", lastModifiedTo: "lastModifiedTo", dueDateFrom: "dueDateFrom", dueDateTo: "dueDateTo", id: "id", name: "name", parentTaskId: "parentTaskId", processDefinitionName: "processDefinitionName", processDefinitionId: "processDefinitionId", processInstanceId: "processInstanceId", status: "status", owner: "owner", standalone: "standalone", completedDate: "completedDate", completedFrom: "completedFrom", completedTo: "completedTo", candidateGroupId: "candidateGroupId", createdDate: "createdDate", dueDate: "dueDate", priority: "priority", completedBy: "completedBy" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c1, decls: 2, vars: 2, consts: [[4, "ngIf"], [3, "rows", "columns", "loading", "sorting", "multiselect", "selectionMode", "stickyHeader", "actions", "actionsPosition", "contextMenu", "resolverFn", "showRowActionsMenu", "showRowContextMenu", "executeRowAction", "row-select", "row-unselect", "rowClick", "row-keyup", "sorting-changed"], [1, "adf-cloud-task-list-loading-margin", 3, "color", "mode"], ["icon", "assignment", 3, "title", "subtitle", 4, "ngIf"], ["icon", "assignment", 3, "title", "subtitle"]], template: function TaskListCloudComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef(_c0);
        ɵngcc0.ɵɵtemplate(0, TaskListCloudComponent_div_0_Template, 3, 3, "div", 0);
        ɵngcc0.ɵɵtemplate(1, TaskListCloudComponent_ng_container_1_Template, 6, 11, "ng-container", 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngIf", !ctx.rows);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.rows);
    } }, directives: [ɵngcc3.NgIf, ɵngcc6.DataTableComponent, ɵngcc6.LoadingContentTemplateDirective, ɵngcc6.NoContentTemplateDirective, ɵngcc9.MatProgressSpinner, ɵngcc6.EmptyContentComponent], pipes: [ɵngcc10.TranslatePipe], styles: [_c2], encapsulation: 2 });
TaskListCloudComponent.PRESET_KEY = 'adf-cloud-task-list.presets';
TaskListCloudComponent.ctorParameters = () => [
    { type: TaskListCloudService },
    { type: AppConfigService },
    { type: TaskCloudService },
    { type: UserPreferencesService }
];
TaskListCloudComponent.propDecorators = {
    assignee: [{ type: Input }],
    createdDate: [{ type: Input }],
    createdFrom: [{ type: Input }],
    createdTo: [{ type: Input }],
    dueDate: [{ type: Input }],
    lastModifiedFrom: [{ type: Input }],
    lastModifiedTo: [{ type: Input }],
    dueDateFrom: [{ type: Input }],
    dueDateTo: [{ type: Input }],
    id: [{ type: Input }],
    name: [{ type: Input }],
    parentTaskId: [{ type: Input }],
    processDefinitionName: [{ type: Input }],
    processDefinitionId: [{ type: Input }],
    processInstanceId: [{ type: Input }],
    status: [{ type: Input }],
    owner: [{ type: Input }],
    priority: [{ type: Input }],
    completedBy: [{ type: Input }],
    standalone: [{ type: Input }],
    completedDate: [{ type: Input }],
    completedFrom: [{ type: Input }],
    completedTo: [{ type: Input }],
    candidateGroupId: [{ type: Input }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TaskListCloudComponent, [{
        type: Component,
        args: [{
                selector: 'adf-cloud-task-list',
                template: "<div *ngIf=\"!rows\">{{ 'ADF_CLOUD_TASK_LIST.FILTERS.MESSAGES.NONE' | translate }}</div>\n<ng-container *ngIf=\"rows\">\n        <adf-datatable\n            [rows]=\"rows\"\n            [columns]=\"columns\"\n            [loading]=\"isLoading\"\n            [sorting]=\"formattedSorting\"\n            [multiselect]=\"multiselect\"\n            [selectionMode]=\"selectionMode\"\n            [stickyHeader]=\"stickyHeader\"\n            [actions]=\"showActions\"\n            [actionsPosition]=\"actionsPosition\"\n            [contextMenu]=\"showContextMenu\"\n            [resolverFn]=\"boundReplacePriorityValues\"\n            (showRowActionsMenu)=\"onShowRowActionsMenu($event)\"\n            (showRowContextMenu)=\"onShowRowContextMenu($event)\"\n            (executeRowAction)=\"onExecuteRowAction($event)\"\n            (row-select)=\"onRowSelect($any($event))\"\n            (row-unselect)=\"onRowUnselect($any($event))\"\n            (rowClick)=\"onRowClick($any($event))\"\n            (row-keyup)=\"onRowKeyUp($any($event))\"\n            (sorting-changed)=\"onSortingChanged($any($event))\">\n            <adf-loading-content-template>\n                <ng-template>\n                    <!-- Add your custom loading template here -->\n                    <mat-progress-spinner class=\"adf-cloud-task-list-loading-margin\"\n                                          [color]=\"'primary'\"\n                                          [mode]=\"'indeterminate'\">\n                    </mat-progress-spinner>\n                </ng-template>\n            </adf-loading-content-template>\n            <adf-no-content-template>\n                <ng-template>\n                    <adf-empty-content *ngIf=\"!emptyCustomContent\"\n                                       icon=\"assignment\"\n                                       [title]=\"'ADF_CLOUD_TASK_LIST.LIST.MESSAGES.TITLE' | translate\"\n                                       [subtitle]=\"'ADF_CLOUD_TASK_LIST.LIST.MESSAGES.SUBTITLE' | translate\">\n                    </adf-empty-content>\n                    <ng-content select=\"adf-custom-empty-content-template\"></ng-content>\n                </ng-template>\n            </adf-no-content-template>\n        </adf-datatable>\n</ng-container>\n",
                encapsulation: ViewEncapsulation.None,
                styles: [".adf-cloud-task-list-loading-margin{margin-left:calc(50% - 50px);margin-right:calc(50% - 50px)}"]
            }]
    }], function () { return [{ type: TaskListCloudService }, { type: ɵngcc6.AppConfigService }, { type: TaskCloudService }, { type: ɵngcc6.UserPreferencesService }]; }, { assignee: [{
            type: Input
        }], createdFrom: [{
            type: Input
        }], createdTo: [{
            type: Input
        }], lastModifiedFrom: [{
            type: Input
        }], lastModifiedTo: [{
            type: Input
        }], dueDateFrom: [{
            type: Input
        }], dueDateTo: [{
            type: Input
        }], id: [{
            type: Input
        }], name: [{
            type: Input
        }], parentTaskId: [{
            type: Input
        }], processDefinitionName: [{
            type: Input
        }], processDefinitionId: [{
            type: Input
        }], processInstanceId: [{
            type: Input
        }], status: [{
            type: Input
        }], owner: [{
            type: Input
        }], standalone: [{
            type: Input
        }], completedDate: [{
            type: Input
        }], completedFrom: [{
            type: Input
        }], completedTo: [{
            type: Input
        }], candidateGroupId: [{
            type: Input
        }], createdDate: [{
            type: Input
        }], dueDate: [{
            type: Input
        }], priority: [{
            type: Input
        }], completedBy: [{
            type: Input
        }] }); })();

class ServiceTaskListCloudService extends BaseCloudService {
    constructor(apiService, appConfigService, logService) {
        super(apiService, appConfigService);
        this.logService = logService;
    }
    getServiceTaskByRequest(requestNode) {
        if (requestNode.appName || requestNode.appName === '') {
            const queryUrl = `${this.getBasePath(requestNode.appName)}/query/admin/v1/service-tasks`;
            const queryParams = this.buildQueryParams(requestNode);
            const sortingParams = this.buildSortingParam(requestNode.sorting);
            if (sortingParams) {
                queryParams['sort'] = sortingParams;
            }
            return this.get(queryUrl, queryParams);
        }
        else {
            this.logService.error('Appname is mandatory for querying task');
            return throwError('Appname not configured');
        }
    }
    getServiceTaskStatus(appName, serviceTaskId) {
        if (appName) {
            const queryUrl = `${this.getBasePath(appName)}/query/admin/v1/service-tasks/${serviceTaskId}/integration-context`;
            return this.get(queryUrl).pipe(map((response) => response.entry));
        }
        else {
            this.logService.error('Appname is mandatory for querying task');
            return throwError('Appname not configured');
        }
    }
    buildQueryParams(requestNode) {
        const queryParam = {};
        for (const property in requestNode) {
            if (requestNode.hasOwnProperty(property) &&
                !this.isExcludedField(property) &&
                this.isPropertyValueValid(requestNode, property)) {
                queryParam[property] = requestNode[property];
            }
        }
        return queryParam;
    }
    isExcludedField(property) {
        return property === 'appName' || property === 'sorting';
    }
    isPropertyValueValid(requestNode, property) {
        return requestNode[property] !== '' && requestNode[property] !== null && requestNode[property] !== undefined;
    }
    buildSortingParam(models) {
        let finalSorting = '';
        if (models) {
            for (const sort of models) {
                if (!finalSorting) {
                    finalSorting = `${sort.orderBy},${sort.direction}`;
                }
                else {
                    finalSorting = `${finalSorting}&${sort.orderBy},${sort.direction}`;
                }
            }
        }
        return encodeURI(finalSorting);
    }
}
ServiceTaskListCloudService.ɵfac = function ServiceTaskListCloudService_Factory(t) { return new (t || ServiceTaskListCloudService)(ɵngcc0.ɵɵinject(ɵngcc6.AlfrescoApiService), ɵngcc0.ɵɵinject(ɵngcc6.AppConfigService), ɵngcc0.ɵɵinject(ɵngcc6.LogService)); };
ServiceTaskListCloudService.ɵprov = ɵɵdefineInjectable({ factory: function ServiceTaskListCloudService_Factory() { return new ServiceTaskListCloudService(ɵɵinject(AlfrescoApiService), ɵɵinject(AppConfigService), ɵɵinject(LogService)); }, token: ServiceTaskListCloudService, providedIn: "root" });
ServiceTaskListCloudService.ctorParameters = () => [
    { type: AlfrescoApiService },
    { type: AppConfigService },
    { type: LogService }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ServiceTaskListCloudService, [{
        type: Injectable,
        args: [{ providedIn: 'root' }]
    }], function () { return [{ type: ɵngcc6.AlfrescoApiService }, { type: ɵngcc6.AppConfigService }, { type: ɵngcc6.LogService }]; }, null); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class ServiceTaskListCloudComponent extends BaseTaskListCloudComponent {
    constructor(serviceTaskListCloudService, appConfigService, taskCloudService, userPreferences) {
        super(appConfigService, taskCloudService, userPreferences, ServiceTaskListCloudComponent.PRESET_KEY);
        this.serviceTaskListCloudService = serviceTaskListCloudService;
        this.queryParams = {};
    }
    load(requestNode) {
        this.isLoading = true;
        this.serviceTaskListCloudService.getServiceTaskByRequest(requestNode).subscribe((tasks) => {
            this.rows = tasks.list.entries;
            this.success.emit(tasks);
            this.isLoading = false;
            this.pagination.next(tasks.list.pagination);
        }, (error) => {
            this.error.emit(error);
            this.isLoading = false;
        });
    }
    createRequestNode() {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q;
        const requestNode = {
            appName: this.appName,
            maxItems: this.size,
            skipCount: this.skipCount,
            sorting: this.sorting,
            id: (_a = this.queryParams) === null || _a === void 0 ? void 0 : _a.serviceTaskId,
            activityName: (_b = this.queryParams) === null || _b === void 0 ? void 0 : _b.activityName,
            activityType: (_c = this.queryParams) === null || _c === void 0 ? void 0 : _c.activityType,
            completedDate: (_d = this.queryParams) === null || _d === void 0 ? void 0 : _d.completedDate,
            elementId: (_e = this.queryParams) === null || _e === void 0 ? void 0 : _e.elementId,
            executionId: (_f = this.queryParams) === null || _f === void 0 ? void 0 : _f.executionId,
            processDefinitionId: (_g = this.queryParams) === null || _g === void 0 ? void 0 : _g.processDefinitionId,
            processDefinitionKey: (_h = this.queryParams) === null || _h === void 0 ? void 0 : _h.processDefinitionKey,
            processDefinitionVersion: (_j = this.queryParams) === null || _j === void 0 ? void 0 : _j.processDefinitionVersion,
            processInstanceId: (_k = this.queryParams) === null || _k === void 0 ? void 0 : _k.processInstanceId,
            serviceFullName: (_l = this.queryParams) === null || _l === void 0 ? void 0 : _l.serviceFullName,
            serviceName: (_m = this.queryParams) === null || _m === void 0 ? void 0 : _m.serviceName,
            serviceVersion: (_o = this.queryParams) === null || _o === void 0 ? void 0 : _o.serviceVersion,
            startedDate: (_p = this.queryParams) === null || _p === void 0 ? void 0 : _p.startedDate,
            status: (_q = this.queryParams) === null || _q === void 0 ? void 0 : _q.status
        };
        return requestNode;
    }
}
ServiceTaskListCloudComponent.ɵfac = function ServiceTaskListCloudComponent_Factory(t) { return new (t || ServiceTaskListCloudComponent)(ɵngcc0.ɵɵdirectiveInject(ServiceTaskListCloudService), ɵngcc0.ɵɵdirectiveInject(ɵngcc6.AppConfigService), ɵngcc0.ɵɵdirectiveInject(TaskCloudService), ɵngcc0.ɵɵdirectiveInject(ɵngcc6.UserPreferencesService)); };
ServiceTaskListCloudComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ServiceTaskListCloudComponent, selectors: [["adf-cloud-service-task-list"]], inputs: { queryParams: "queryParams" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c1, decls: 2, vars: 2, consts: [[4, "ngIf"], [3, "rows", "columns", "loading", "sorting", "multiselect", "selectionMode", "stickyHeader", "actions", "actionsPosition", "contextMenu", "resolverFn", "showRowActionsMenu", "showRowContextMenu", "executeRowAction", "row-select", "row-unselect", "rowClick", "row-keyup", "sorting-changed"], [1, "adf-cloud-task-list-loading-margin", 3, "color", "mode"], ["icon", "assignment", 3, "title", "subtitle", 4, "ngIf"], ["icon", "assignment", 3, "title", "subtitle"]], template: function ServiceTaskListCloudComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef(_c0);
        ɵngcc0.ɵɵtemplate(0, ServiceTaskListCloudComponent_div_0_Template, 3, 3, "div", 0);
        ɵngcc0.ɵɵtemplate(1, ServiceTaskListCloudComponent_ng_container_1_Template, 6, 11, "ng-container", 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngIf", !ctx.rows);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.rows);
    } }, directives: [ɵngcc3.NgIf, ɵngcc6.DataTableComponent, ɵngcc6.LoadingContentTemplateDirective, ɵngcc6.NoContentTemplateDirective, ɵngcc9.MatProgressSpinner, ɵngcc6.EmptyContentComponent], pipes: [ɵngcc10.TranslatePipe], styles: [_c2], encapsulation: 2 });
ServiceTaskListCloudComponent.PRESET_KEY = 'adf-cloud-service-task-list.presets';
ServiceTaskListCloudComponent.ctorParameters = () => [
    { type: ServiceTaskListCloudService },
    { type: AppConfigService },
    { type: TaskCloudService },
    { type: UserPreferencesService }
];
ServiceTaskListCloudComponent.propDecorators = {
    queryParams: [{ type: Input }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ServiceTaskListCloudComponent, [{
        type: Component,
        args: [{
                selector: 'adf-cloud-service-task-list',
                template: "<div *ngIf=\"!rows\">{{ 'ADF_CLOUD_TASK_LIST.FILTERS.MESSAGES.NONE' | translate }}</div>\n<ng-container *ngIf=\"rows\">\n        <adf-datatable\n            [rows]=\"rows\"\n            [columns]=\"columns\"\n            [loading]=\"isLoading\"\n            [sorting]=\"formattedSorting\"\n            [multiselect]=\"multiselect\"\n            [selectionMode]=\"selectionMode\"\n            [stickyHeader]=\"stickyHeader\"\n            [actions]=\"showActions\"\n            [actionsPosition]=\"actionsPosition\"\n            [contextMenu]=\"showContextMenu\"\n            [resolverFn]=\"boundReplacePriorityValues\"\n            (showRowActionsMenu)=\"onShowRowActionsMenu($event)\"\n            (showRowContextMenu)=\"onShowRowContextMenu($event)\"\n            (executeRowAction)=\"onExecuteRowAction($event)\"\n            (row-select)=\"onRowSelect($any($event))\"\n            (row-unselect)=\"onRowUnselect($any($event))\"\n            (rowClick)=\"onRowClick($any($event))\"\n            (row-keyup)=\"onRowKeyUp($any($event))\"\n            (sorting-changed)=\"onSortingChanged($any($event))\">\n            <adf-loading-content-template>\n                <ng-template>\n                    <!-- Add your custom loading template here -->\n                    <mat-progress-spinner class=\"adf-cloud-task-list-loading-margin\"\n                                          [color]=\"'primary'\"\n                                          [mode]=\"'indeterminate'\">\n                    </mat-progress-spinner>\n                </ng-template>\n            </adf-loading-content-template>\n            <adf-no-content-template>\n                <ng-template>\n                    <adf-empty-content *ngIf=\"!emptyCustomContent\"\n                                       icon=\"assignment\"\n                                       [title]=\"'ADF_CLOUD_TASK_LIST.LIST.MESSAGES.TITLE' | translate\"\n                                       [subtitle]=\"'ADF_CLOUD_TASK_LIST.LIST.MESSAGES.SUBTITLE' | translate\">\n                    </adf-empty-content>\n                    <ng-content select=\"adf-custom-empty-content-template\"></ng-content>\n                </ng-template>\n            </adf-no-content-template>\n        </adf-datatable>\n</ng-container>\n",
                encapsulation: ViewEncapsulation.None,
                styles: [".adf-cloud-task-list-loading-margin{margin-left:calc(50% - 50px);margin-right:calc(50% - 50px)}"]
            }]
    }], function () { return [{ type: ServiceTaskListCloudService }, { type: ɵngcc6.AppConfigService }, { type: TaskCloudService }, { type: ɵngcc6.UserPreferencesService }]; }, { queryParams: [{
            type: Input
        }] }); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class TaskListCloudModule {
}
TaskListCloudModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: TaskListCloudModule });
TaskListCloudModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function TaskListCloudModule_Factory(t) { return new (t || TaskListCloudModule)(); }, imports: [[
            CommonModule,
            MaterialModule,
            CoreModule
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(TaskListCloudModule, { declarations: function () { return [TaskListCloudComponent, ServiceTaskListCloudComponent]; }, imports: function () { return [CommonModule, MaterialModule, CoreModule]; }, exports: function () { return [TaskListCloudComponent, ServiceTaskListCloudComponent]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TaskListCloudModule, [{
        type: NgModule,
        args: [{
                imports: [
                    CommonModule,
                    MaterialModule,
                    CoreModule
                ],
                declarations: [
                    TaskListCloudComponent,
                    ServiceTaskListCloudComponent
                ],
                exports: [
                    TaskListCloudComponent,
                    ServiceTaskListCloudComponent
                ]
            }]
    }], null, null); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var DateCloudFilterType;
(function (DateCloudFilterType) {
    DateCloudFilterType["NO_DATE"] = "NO_DATE";
    DateCloudFilterType["TODAY"] = "TODAY";
    DateCloudFilterType["TOMORROW"] = "TOMORROW";
    DateCloudFilterType["NEXT_7_DAYS"] = "NEXT_7_DAYS";
    DateCloudFilterType["WEEK"] = "WEEK";
    DateCloudFilterType["MONTH"] = "MONTH";
    DateCloudFilterType["QUARTER"] = "QUARTER";
    DateCloudFilterType["YEAR"] = "YEAR";
    DateCloudFilterType["RANGE"] = "RANGE";
})(DateCloudFilterType || (DateCloudFilterType = {}));

class DateRangeFilterService {
    constructor() {
        this.currentDate = new Date();
    }
    getDateRange(type) {
        switch (type) {
            case DateCloudFilterType.TODAY: return this.getTodayDateRange();
            case DateCloudFilterType.TOMORROW: return this.getTomorrowDateRange();
            case DateCloudFilterType.NEXT_7_DAYS: return this.getNext7DaysDateRange();
            case DateCloudFilterType.WEEK: return this.getCurrentWeekRange();
            case DateCloudFilterType.MONTH: return this.getCurrentMonthDateRange();
            case DateCloudFilterType.QUARTER: return this.getQuarterDateRange();
            case DateCloudFilterType.YEAR: return this.getCurrentYearDateRange();
            default: return this.resetDateRange();
        }
    }
    isDateRangeType(type) {
        return type === DateCloudFilterType.RANGE;
    }
    resetDateRange() {
        return {
            startDate: null,
            endDate: null
        };
    }
    getNext7DaysDateRange() {
        return {
            startDate: moment().startOf('day').toISOString(true),
            endDate: moment().add(7, 'days').endOf('day').toISOString(true)
        };
    }
    getTomorrowDateRange() {
        return {
            startDate: moment().endOf('day').toISOString(true),
            endDate: moment().add(1, 'days').endOf('day').toISOString(true)
        };
    }
    getCurrentYearDateRange() {
        return {
            startDate: moment().startOf('year').toISOString(true),
            endDate: moment().endOf('year').toISOString(true)
        };
    }
    getTodayDateRange() {
        return {
            startDate: moment().startOf('day').toISOString(true),
            endDate: moment().endOf('day').toISOString(true)
        };
    }
    getCurrentWeekRange() {
        return {
            startDate: moment().startOf('week').toISOString(true),
            endDate: moment().endOf('week').toISOString(true)
        };
    }
    getCurrentMonthDateRange() {
        return {
            startDate: moment().startOf('month').toISOString(true),
            endDate: moment().endOf('month').toISOString(true)
        };
    }
    getQuarterDateRange() {
        return {
            startDate: moment().startOf('quarter').toISOString(true),
            endDate: moment().endOf('quarter').toISOString(true)
        };
    }
}
DateRangeFilterService.ɵfac = function DateRangeFilterService_Factory(t) { return new (t || DateRangeFilterService)(); };
DateRangeFilterService.ɵprov = ɵɵdefineInjectable({ factory: function DateRangeFilterService_Factory() { return new DateRangeFilterService(); }, token: DateRangeFilterService, providedIn: "root" });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DateRangeFilterService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return []; }, null); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class TaskFilterCloudModel {
    constructor(obj) {
        this.dateRangeFilterService = new DateRangeFilterService();
        if (obj) {
            this.id = obj.id || Math.random().toString(36).substr(2, 9);
            this.name = obj.name || null;
            this.key = obj.key || null;
            this.icon = obj.icon || null;
            this.index = obj.index || null;
            this.appName = obj.appName || obj.appName === '' ? obj.appName : null;
            this.status = obj.status || null;
            this.sort = obj.sort || null;
            this.assignee = obj.assignee || null;
            this.order = obj.order || null;
            this.owner = obj.owner || null;
            this.processDefinitionName = obj.processDefinitionName || null;
            this.processDefinitionId = obj.processDefinitionId || null;
            this.processInstanceId = obj.processInstanceId || null;
            this.createdDate = obj.createdDate || null;
            this.dueDateType = obj.dueDateType || null;
            this.dueDate = obj.dueDate || null;
            this._dueDateFrom = obj._dueDateFrom || null;
            this._dueDateTo = obj._dueDateTo || null;
            this.taskName = obj.taskName || null;
            this.taskId = obj.taskId || null;
            this.parentTaskId = obj.parentTaskId || null;
            this.priority = obj.priority || null;
            this.standalone = obj.standalone || null;
            this.lastModifiedFrom = obj.lastModifiedFrom || null;
            this.lastModifiedTo = obj.lastModifiedTo || null;
            this.completedBy = obj.completedBy || null;
            this.completedDateType = obj.completedDateType || null;
            this.completedFrom = obj._completedFrom || null;
            this.completedTo = obj._completedTo || null;
            this.completedDate = obj.completedDate || null;
            this.createdDateType = obj.createdDateType || null;
            this.createdFrom = obj._createdFrom || null;
            this.createdTo = obj._createdTo || null;
            this.candidateGroups = obj.candidateGroups || null;
            this.showCounter = obj.showCounter || false;
        }
    }
    set dueDateFrom(dueDateFrom) {
        this._dueDateFrom = dueDateFrom;
    }
    set dueDateTo(dueDateTo) {
        this._dueDateTo = dueDateTo;
    }
    get dueDateFrom() {
        if (this.isDateRangeType(this.dueDateType)) {
            return this._dueDateFrom;
        }
        return this.getStartDate(this.dueDateType);
    }
    get dueDateTo() {
        if (this.isDateRangeType(this.dueDateType)) {
            return this._dueDateTo;
        }
        return this.getEndDate(this.dueDateType);
    }
    set completedFrom(completedFrom) {
        this._completedFrom = completedFrom;
    }
    set completedTo(completedTo) {
        this._completedTo = completedTo;
    }
    get completedFrom() {
        if (this.isDateRangeType(this.completedDateType)) {
            return this._completedFrom;
        }
        return this.getStartDate(this.completedDateType);
    }
    get completedTo() {
        if (this.isDateRangeType(this.completedDateType)) {
            return this._completedTo;
        }
        return this.getEndDate(this.completedDateType);
    }
    set createdFrom(createdFrom) {
        this._createdFrom = createdFrom;
    }
    set createdTo(createdTo) {
        this._createdTo = createdTo;
    }
    get createdFrom() {
        if (this.isDateRangeType(this.createdDateType)) {
            return this._createdFrom;
        }
        return this.getStartDate(this.createdDateType);
    }
    get createdTo() {
        if (this.isDateRangeType(this.createdDateType)) {
            return this._createdTo;
        }
        return this.getEndDate(this.createdDateType);
    }
    getStartDate(key) {
        return this.dateRangeFilterService.getDateRange(key).startDate;
    }
    getEndDate(key) {
        return this.dateRangeFilterService.getDateRange(key).endDate;
    }
    isDateRangeType(type) {
        return !!this.dateRangeFilterService.isDateRangeType(type);
    }
}
var AssignmentType;
(function (AssignmentType) {
    AssignmentType["CURRENT_USER"] = "CURRENT_USER";
    AssignmentType["UNASSIGNED"] = "UNASSIGNED";
    AssignmentType["CANDIDATE_GROUPS"] = "CANDIDATE_GROUPS";
})(AssignmentType || (AssignmentType = {}));

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const PROCESS_FILTERS_SERVICE_TOKEN = new InjectionToken('proccess-filters-cloud');
const TASK_FILTERS_SERVICE_TOKEN = new InjectionToken('task-filters-cloud');

class NotificationCloudService extends BaseCloudService {
    constructor(apiService, appConfigService, apollo, http) {
        super(apiService, appConfigService);
        this.apollo = apollo;
        this.http = http;
        this.appsListening = [];
    }
    get webSocketHost() {
        return this.contextRoot.split('://')[1];
    }
    get protocol() {
        return this.contextRoot.split('://')[0] === 'https' ? 'wss' : 'ws';
    }
    initNotificationsForApp(appName) {
        if (!this.appsListening.includes(appName)) {
            this.appsListening.push(appName);
            const httpLink = this.http.create({
                uri: `${this.getBasePath(appName)}/notifications/graphql`
            });
            const webSocketLink = new WebSocketLink({
                uri: `${this.protocol}://${this.webSocketHost}/${appName}/notifications/ws/graphql`,
                options: {
                    reconnect: true,
                    lazy: true,
                    connectionParams: {
                        kaInterval: 2000,
                        'X-Authorization': 'Bearer ' + this.apiService.getInstance().oauth2Auth.token
                    }
                }
            });
            const link = split(({ query }) => {
                const definition = getMainDefinition(query);
                return definition.kind === 'OperationDefinition' && definition.operation === 'subscription';
            }, webSocketLink, httpLink);
            const errorLink = onError(({ graphQLErrors, operation, forward }) => {
                if (graphQLErrors) {
                    for (const err of graphQLErrors) {
                        switch (err.extensions.code) {
                            case 'UNAUTHENTICATED':
                                const oldHeaders = operation.getContext().headers;
                                operation.setContext({
                                    headers: Object.assign(Object.assign({}, oldHeaders), { 'X-Authorization': 'Bearer ' + this.apiService.getInstance().oauth2Auth.token })
                                });
                                forward(operation);
                                break;
                            default:
                        }
                    }
                }
            });
            this.apollo.createNamed(appName, {
                link: ApolloLink.from([errorLink, link]),
                cache: new InMemoryCache({ merge: true }),
                defaultOptions: {
                    watchQuery: {
                        errorPolicy: 'all'
                    }
                }
            });
        }
    }
    makeGQLQuery(appName, gqlQuery) {
        this.initNotificationsForApp(appName);
        return this.apollo.use(appName).subscribe({ query: gql(gqlQuery) });
    }
}
NotificationCloudService.ɵfac = function NotificationCloudService_Factory(t) { return new (t || NotificationCloudService)(ɵngcc0.ɵɵinject(ɵngcc6.AlfrescoApiService), ɵngcc0.ɵɵinject(ɵngcc6.AppConfigService), ɵngcc0.ɵɵinject(ɵngcc11.Apollo), ɵngcc0.ɵɵinject(ɵngcc12.HttpLink)); };
NotificationCloudService.ɵprov = ɵɵdefineInjectable({ factory: function NotificationCloudService_Factory() { return new NotificationCloudService(ɵɵinject(AlfrescoApiService), ɵɵinject(AppConfigService), ɵɵinject(Apollo), ɵɵinject(HttpLink)); }, token: NotificationCloudService, providedIn: "root" });
NotificationCloudService.ctorParameters = () => [
    { type: AlfrescoApiService },
    { type: AppConfigService },
    { type: Apollo },
    { type: HttpLink }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NotificationCloudService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc6.AlfrescoApiService }, { type: ɵngcc6.AppConfigService }, { type: ɵngcc11.Apollo }, { type: ɵngcc12.HttpLink }]; }, null); })();

const TASK_EVENT_SUBSCRIPTION_QUERY = `
    subscription {
        engineEvents(eventType: [
            TASK_COMPLETED
            TASK_ASSIGNED
            TASK_ACTIVATED
            TASK_SUSPENDED
            TASK_CANCELLED,
            TASK_CREATED
        ]) {
            eventType
            entity
        }
    }
`;
class TaskFilterCloudService extends BaseCloudService {
    constructor(identityUserService, preferenceService, apiService, appConfigService, notificationCloudService) {
        super(apiService, appConfigService);
        this.identityUserService = identityUserService;
        this.preferenceService = preferenceService;
        this.notificationCloudService = notificationCloudService;
        this.filtersSubject = new BehaviorSubject([]);
        this.filters$ = this.filtersSubject.asObservable();
    }
    createDefaultFilters(appName) {
        const key = this.prepareKey(appName);
        this.preferenceService.getPreferences(appName, key).pipe(switchMap((response) => {
            const preferences = (response && response.list && response.list.entries) ? response.list.entries : [];
            if (!this.hasPreferences(preferences) || !this.hasTaskFilters(preferences, key)) {
                return this.createTaskFilters(appName, key, this.defaultTaskFilters(appName));
            }
            else {
                return of(this.findFiltersByKeyInPreferences(preferences, key));
            }
        })).subscribe((filters) => {
            this.addFiltersToStream(filters);
        });
    }
    hasPreferences(preferences) {
        return preferences && preferences.length > 0;
    }
    hasTaskFilters(preferences, key) {
        const filters = preferences.find((filter) => { return filter.entry.key === key; });
        return (filters && filters.entry) ? JSON.parse(filters.entry.value).length > 0 : false;
    }
    createTaskFilters(appName, key, filters) {
        return this.preferenceService.createPreference(appName, key, filters);
    }
    getTaskFiltersByKey(appName, key) {
        return this.preferenceService.getPreferenceByKey(appName, key);
    }
    getTaskListFilters(appName) {
        this.createDefaultFilters(appName);
        return this.filters$;
    }
    getTaskFilterById(appName, id) {
        const key = this.prepareKey(appName);
        return this.getTaskFiltersByKey(appName, key).pipe(switchMap((filters) => {
            if (filters && filters.length === 0) {
                return this.createTaskFilters(appName, key, this.defaultTaskFilters(appName));
            }
            else {
                return of(filters);
            }
        }), map((filters) => {
            return filters.filter((filter) => {
                return filter.id === id;
            })[0];
        }));
    }
    addFilter(newFilter) {
        const key = this.prepareKey(newFilter.appName);
        return this.getTaskFiltersByKey(newFilter.appName, key).pipe(switchMap((filters) => {
            if (filters && filters.length === 0) {
                return this.createTaskFilters(newFilter.appName, key, [newFilter]);
            }
            else {
                filters.push(newFilter);
                return this.preferenceService.updatePreference(newFilter.appName, key, filters);
            }
        }), map((filters) => {
            this.addFiltersToStream(filters);
            return filters;
        }));
    }
    addFiltersToStream(filters) {
        this.filtersSubject.next(filters);
    }
    updateFilter(updatedFilter) {
        const key = this.prepareKey(updatedFilter.appName);
        return this.getTaskFiltersByKey(updatedFilter.appName, key).pipe(switchMap((filters) => {
            if (filters && filters.length === 0) {
                return this.createTaskFilters(updatedFilter.appName, key, [updatedFilter]);
            }
            else {
                const itemIndex = filters.findIndex((filter) => filter.id === updatedFilter.id);
                filters[itemIndex] = updatedFilter;
                return this.updateTaskFilters(updatedFilter.appName, key, filters);
            }
        }), map((updatedFilters) => {
            this.addFiltersToStream(updatedFilters);
            return updatedFilters;
        }));
    }
    deleteFilter(deletedFilter) {
        const key = this.prepareKey(deletedFilter.appName);
        return this.getTaskFiltersByKey(deletedFilter.appName, key).pipe(switchMap((filters) => {
            if (filters && filters.length > 0) {
                filters = filters.filter(filter => filter.id !== deletedFilter.id);
                return this.updateTaskFilters(deletedFilter.appName, key, filters);
            }
            return of([]);
        }), map(filters => {
            this.addFiltersToStream(filters);
            return filters;
        }));
    }
    isDefaultFilter(filterName) {
        const defaultFilters = this.defaultTaskFilters();
        return defaultFilters.findIndex((filter) => filterName === filter.name) !== -1;
    }
    getTaskFilterCounter(taskFilter) {
        if (taskFilter.appName || taskFilter.appName === '') {
            const queryUrl = `${this.getBasePath(taskFilter.appName)}/query/v1/tasks`;
            const queryParams = {
                assignee: taskFilter.assignee,
                status: taskFilter.status,
                appName: taskFilter.appName,
                maxItems: 1
            };
            return this.get(queryUrl, queryParams).pipe(map((tasks) => tasks.list.pagination.totalItems));
        }
        else {
            return throwError('Appname not configured');
        }
    }
    updateTaskFilters(appName, key, filters) {
        return this.preferenceService.updatePreference(appName, key, filters);
    }
    prepareKey(appName) {
        return `task-filters-${appName}-${this.identityUserService.getCurrentUserInfo().username}`;
    }
    findFiltersByKeyInPreferences(preferences, key) {
        const result = preferences.find((filter) => { return filter.entry.key === key; });
        return result && result.entry ? JSON.parse(result.entry.value) : [];
    }
    defaultTaskFilters(appName) {
        return [
            new TaskFilterCloudModel({
                name: 'ADF_CLOUD_TASK_FILTERS.MY_TASKS',
                key: 'my-tasks',
                icon: 'inbox',
                appName,
                status: 'ASSIGNED',
                assignee: this.identityUserService.getCurrentUserInfo().username,
                sort: 'createdDate',
                order: 'DESC',
                showCounter: true
            }),
            new TaskFilterCloudModel({
                name: 'ADF_CLOUD_TASK_FILTERS.QUEUED_TASKS',
                key: 'queued-tasks',
                icon: 'queue',
                appName,
                status: 'CREATED',
                assignee: '',
                sort: 'createdDate',
                order: 'DESC',
                showCounter: true
            }),
            new TaskFilterCloudModel({
                name: 'ADF_CLOUD_TASK_FILTERS.COMPLETED_TASKS',
                key: 'completed-tasks',
                icon: 'done',
                appName,
                status: 'COMPLETED',
                assignee: '',
                sort: 'createdDate',
                order: 'DESC'
            })
        ];
    }
    getTaskNotificationSubscription(appName) {
        return this.notificationCloudService.makeGQLQuery(appName, TASK_EVENT_SUBSCRIPTION_QUERY)
            .pipe(map((events) => events.data.engineEvents));
    }
}
TaskFilterCloudService.ɵfac = function TaskFilterCloudService_Factory(t) { return new (t || TaskFilterCloudService)(ɵngcc0.ɵɵinject(ɵngcc6.IdentityUserService), ɵngcc0.ɵɵinject(TASK_FILTERS_SERVICE_TOKEN), ɵngcc0.ɵɵinject(ɵngcc6.AlfrescoApiService), ɵngcc0.ɵɵinject(ɵngcc6.AppConfigService), ɵngcc0.ɵɵinject(NotificationCloudService)); };
TaskFilterCloudService.ɵprov = ɵɵdefineInjectable({ factory: function TaskFilterCloudService_Factory() { return new TaskFilterCloudService(ɵɵinject(IdentityUserService), ɵɵinject(TASK_FILTERS_SERVICE_TOKEN), ɵɵinject(AlfrescoApiService), ɵɵinject(AppConfigService), ɵɵinject(NotificationCloudService)); }, token: TaskFilterCloudService, providedIn: "root" });
TaskFilterCloudService.ctorParameters = () => [
    { type: IdentityUserService },
    { type: undefined, decorators: [{ type: Inject, args: [TASK_FILTERS_SERVICE_TOKEN,] }] },
    { type: AlfrescoApiService },
    { type: AppConfigService },
    { type: NotificationCloudService }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TaskFilterCloudService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc6.IdentityUserService }, { type: undefined, decorators: [{
                type: Inject,
                args: [TASK_FILTERS_SERVICE_TOKEN]
            }] }, { type: ɵngcc6.AlfrescoApiService }, { type: ɵngcc6.AppConfigService }, { type: NotificationCloudService }]; }, null); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class BaseTaskFiltersCloudComponent {
    constructor() {
        this.appName = '';
        this.showIcons = false;
        this.success = new EventEmitter();
        this.error = new EventEmitter();
        this.counters$ = {};
        this.updatedCounters = [];
        this.onDestroy$ = new Subject();
    }
    ngOnDestroy() {
        this.onDestroy$.next(true);
        this.onDestroy$.complete();
    }
    wasFilterUpdated(filterKey) {
        return this.updatedCounters.includes(filterKey);
    }
    addToUpdatedCounters(filterKey) {
        if (!this.updatedCounters.includes(filterKey)) {
            this.updatedCounters.push(filterKey);
        }
    }
    resetFilterCounter(filterKey) {
        const filterIndex = this.updatedCounters.indexOf(filterKey);
        if (filterIndex > -1) {
            this.updatedCounters.splice(filterIndex, 1);
        }
    }
}
BaseTaskFiltersCloudComponent.ɵfac = function BaseTaskFiltersCloudComponent_Factory(t) { return new (t || BaseTaskFiltersCloudComponent)(); };
BaseTaskFiltersCloudComponent.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: BaseTaskFiltersCloudComponent, inputs: { appName: "appName", showIcons: "showIcons", filterParam: "filterParam" }, outputs: { success: "success", error: "error" } });
BaseTaskFiltersCloudComponent.propDecorators = {
    appName: [{ type: Input }],
    filterParam: [{ type: Input }],
    showIcons: [{ type: Input }],
    success: [{ type: Output }],
    error: [{ type: Output }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(BaseTaskFiltersCloudComponent, [{
        type: Directive
    }], function () { return []; }, { appName: [{
            type: Input
        }], showIcons: [{
            type: Input
        }], success: [{
            type: Output
        }], error: [{
            type: Output
        }], filterParam: [{
            type: Input
        }] }); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class TaskFiltersCloudComponent extends BaseTaskFiltersCloudComponent {
    constructor(taskFilterCloudService, translationService, appConfigService) {
        super();
        this.taskFilterCloudService = taskFilterCloudService;
        this.translationService = translationService;
        this.appConfigService = appConfigService;
        this.filterSelected = new EventEmitter();
        this.filterClicked = new EventEmitter();
        this.filterCounterUpdated = new EventEmitter();
        this.filters = [];
    }
    ngOnInit() {
        this.enableNotifications = this.appConfigService.get('notifications', true);
        this.initFilterCounterNotifications();
        this.getFilters(this.appName);
    }
    ngOnChanges(changes) {
        const appName = changes['appName'];
        const filter = changes['filterParam'];
        if (appName && appName.currentValue !== appName.previousValue) {
            this.getFilters(appName.currentValue);
        }
        else if (filter && filter.currentValue !== filter.previousValue) {
            this.selectFilterAndEmit(filter.currentValue);
        }
    }
    getFilters(appName) {
        this.filters$ = this.taskFilterCloudService.getTaskListFilters(appName);
        this.filters$.pipe(takeUntil(this.onDestroy$)).subscribe((res) => {
            this.resetFilter();
            this.filters = res || [];
            this.selectFilterAndEmit(this.filterParam);
            this.updateFilterCounters();
            this.success.emit(res);
        }, (err) => {
            this.error.emit(err);
        });
    }
    updateFilterCounters() {
        this.filters.forEach((filter) => this.updateFilterCounter(filter));
    }
    updateFilterCounter(filter) {
        if (filter === null || filter === void 0 ? void 0 : filter.showCounter) {
            this.counters$[filter.key] = this.taskFilterCloudService.getTaskFilterCounter(filter);
        }
    }
    initFilterCounterNotifications() {
        if (this.appName && this.enableNotifications) {
            this.taskFilterCloudService.getTaskNotificationSubscription(this.appName)
                .pipe(debounceTime(3000))
                .subscribe((result) => {
                result.map((taskEvent) => {
                    this.checkFilterCounter(taskEvent.entity);
                });
                if (this.updatedCounters.length) {
                    this.updateFilterCounters();
                    this.filterCounterUpdated.emit(result);
                }
            });
        }
    }
    checkFilterCounter(filterNotification) {
        this.filters.map((filter) => {
            if (this.isFilterPresent(filter, filterNotification)) {
                this.addToUpdatedCounters(filter.key);
            }
        });
    }
    isFilterPresent(filter, filterNotification) {
        return filter.status === filterNotification.status
            && (filter.assignee === filterNotification.assignee || filterNotification.assignee === undefined);
    }
    selectFilter(paramFilter) {
        if (paramFilter) {
            this.currentFilter = this.filters.find((filter, index) => paramFilter.index === index ||
                paramFilter.key === filter.key ||
                paramFilter.id === filter.id ||
                (paramFilter.name &&
                    (paramFilter.name.toLocaleLowerCase() === this.translationService.instant(filter.name).toLocaleLowerCase())));
        }
    }
    selectFilterAndEmit(newParamFilter) {
        if (newParamFilter) {
            this.selectFilter(newParamFilter);
            if (this.currentFilter) {
                this.resetFilterCounter(this.currentFilter.key);
                this.filterSelected.emit(this.currentFilter);
            }
        }
        else {
            this.currentFilter = undefined;
        }
    }
    onFilterClick(filter) {
        if (filter) {
            this.selectFilter(filter);
            this.updateFilterCounter(this.currentFilter);
            this.filterClicked.emit(this.currentFilter);
        }
        else {
            this.currentFilter = undefined;
        }
    }
    selectDefaultTaskFilter() {
        if (!this.isFilterListEmpty()) {
            this.currentFilter = this.filters[0];
        }
    }
    isFilterListEmpty() {
        return this.filters === undefined || (this.filters && this.filters.length === 0);
    }
    resetFilter() {
        this.filters = [];
        this.currentFilter = undefined;
    }
}
TaskFiltersCloudComponent.ɵfac = function TaskFiltersCloudComponent_Factory(t) { return new (t || TaskFiltersCloudComponent)(ɵngcc0.ɵɵdirectiveInject(TaskFilterCloudService), ɵngcc0.ɵɵdirectiveInject(ɵngcc6.TranslationService), ɵngcc0.ɵɵdirectiveInject(ɵngcc6.AppConfigService)); };
TaskFiltersCloudComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: TaskFiltersCloudComponent, selectors: [["adf-cloud-task-filters"]], outputs: { filterSelected: "filterSelected", filterClicked: "filterClicked", filterCounterUpdated: "filterCounterUpdated" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature], decls: 4, vars: 4, consts: [[4, "ngIf", "ngIfElse"], ["loading", ""], ["class", "adf-task-filters__entry", 4, "ngFor", "ngForOf"], [1, "adf-task-filters__entry"], ["mat-button", "", "fxLayout", "row", "fxLayoutAlign", "space-between center", 1, "adf-filter-action-button", "adf-full-width", 3, "id", "click"], ["data-automation-id", "adf-filter-icon", 3, "value", 4, "ngIf"], ["data-automation-id", "adf-filter-label", 1, "adf-filter-action-button__label"], ["class", "adf-filter-action-button__counter", 3, "adf-active", 4, "ngIf"], ["data-automation-id", "adf-filter-icon", 3, "value"], [1, "adf-filter-action-button__counter"], [1, "adf-app-list-spinner"]], template: function TaskFiltersCloudComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, TaskFiltersCloudComponent_ng_container_0_Template, 2, 1, "ng-container", 0);
        ɵngcc0.ɵɵpipe(1, "async");
        ɵngcc0.ɵɵtemplate(2, TaskFiltersCloudComponent_ng_template_2_Template, 3, 0, "ng-template", null, 1, ɵngcc0.ɵɵtemplateRefExtractor);
    } if (rf & 2) {
        const _r1 = ɵngcc0.ɵɵreference(3);
        ɵngcc0.ɵɵproperty("ngIf", ɵngcc0.ɵɵpipeBind1(1, 2, ctx.filters$))("ngIfElse", _r1);
    } }, directives: [ɵngcc3.NgIf, ɵngcc3.NgForOf, ɵngcc13.MatButton, ɵngcc2.DefaultLayoutDirective, ɵngcc2.DefaultLayoutAlignDirective, ɵngcc6.IconComponent, ɵngcc9.MatSpinner], pipes: [ɵngcc3.AsyncPipe, ɵngcc10.TranslatePipe], styles: [_c8], encapsulation: 2 });
TaskFiltersCloudComponent.ctorParameters = () => [
    { type: TaskFilterCloudService },
    { type: TranslationService },
    { type: AppConfigService }
];
TaskFiltersCloudComponent.propDecorators = {
    filterSelected: [{ type: Output }],
    filterClicked: [{ type: Output }],
    filterCounterUpdated: [{ type: Output }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TaskFiltersCloudComponent, [{
        type: Component,
        args: [{
                selector: 'adf-cloud-task-filters',
                template: "<ng-container *ngIf=\"filters$ | async as filterList; else loading\">\n    <div *ngFor=\"let filter of filterList\"\n         class=\"adf-task-filters__entry\">\n        <button (click)=\"onFilterClick(filter)\"\n                [attr.aria-label]=\"filter.name | translate\"\n                [id]=\"filter.id\"\n                [attr.data-automation-id]=\"filter.key + '_filter'\"\n                mat-button\n                [class.adf-active]=\"currentFilter === filter\"\n                class=\"adf-filter-action-button adf-full-width\"\n                fxLayout=\"row\"\n                fxLayoutAlign=\"space-between center\">\n            <adf-icon data-automation-id=\"adf-filter-icon\"\n                      *ngIf=\"showIcons\"\n                      [value]=\"filter.icon\"></adf-icon>\n            <span data-automation-id=\"adf-filter-label\"\n                  class=\"adf-filter-action-button__label\">{{ filter.name | translate }}</span>\n        </button>\n        <span *ngIf=\"counters$[filter.key]\"\n              [attr.data-automation-id]=\"filter.key + '_filter-counter'\"\n              class=\"adf-filter-action-button__counter\"\n              [class.adf-active]=wasFilterUpdated(filter.key)>\n            {{ counters$[filter.key] | async }}\n        </span>\n    </div>\n</ng-container>\n<ng-template #loading>\n    <ng-container>\n        <div class=\"adf-app-list-spinner\">\n            <mat-spinner></mat-spinner>\n        </div>\n    </ng-container>\n</ng-template>\n",
                encapsulation: ViewEncapsulation.None,
                styles: [".adf-task-filters__entry{display:flex;font-size:14px!important;font-weight:700;height:24px;opacity:1;padding:12px 0!important;width:100%}.adf-task-filters__entry .adf-full-width{display:flex;width:100%}.adf-task-filters__entry .adf-filter-action-button{cursor:pointer;opacity:.54;padding:16px}.adf-task-filters__entry .adf-filter-action-button .adf-filter-action-button__label{margin:0 8px!important;padding-left:20px}.adf-task-filters__entry .adf-filter-action-button__counter{margin-left:10px;margin-top:6px;opacity:.54;padding:0 5px}.adf-task-filters__entry .adf-filter-action-button__counter.adf-active{background-color:var(--theme-accent-color);border-radius:15px;color:var(--theme-colors-mag-grey-light);font-size:smaller;margin-left:8px;margin-top:5px;padding:0 5px}.adf-task-filters__entry:hover{color:var(--theme-primary-color)}.adf-task-filters__entry:hover .adf-filter-action-button,.adf-task-filters__entry:hover .adf-filter-action-button__counter{opacity:1}.adf-task-filters__entry .adf-active{color:var(--theme-primary-color);opacity:1}"]
            }]
    }], function () { return [{ type: TaskFilterCloudService }, { type: ɵngcc6.TranslationService }, { type: ɵngcc6.AppConfigService }]; }, { filterSelected: [{
            type: Output
        }], filterClicked: [{
            type: Output
        }], filterCounterUpdated: [{
            type: Output
        }] }); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class DateRangeFilterComponent {
    constructor() {
        this.dateChanged = new EventEmitter();
        this.dateTypeChange = new EventEmitter();
        this.filteredProperties = [];
        this.dateRangeForm = new FormGroup({
            from: new FormControl(),
            to: new FormControl()
        });
    }
    ngOnInit() {
        this.options = this.options ? this.options : this.createDefaultRangeOptions();
        const defaultProperties = this.createDefaultDateOptions();
        this.filteredProperties = defaultProperties.filter((filterProperty) => this.isValidProperty(this.options, filterProperty.value.toString()));
        if (this.hasPreselectedValues()) {
            this.setPreselectedValues();
        }
    }
    onSelectionChange(option) {
        this.type = option.value;
        if (!this.isDateRangeType()) {
            this.dateTypeChange.emit(this.type);
        }
    }
    isDateRangeType() {
        return this.type === DateCloudFilterType.RANGE;
    }
    onDateRangeClosed() {
        const dateRange = {
            startDate: moment(this.dateRangeForm.controls.from.value).startOf('day').toISOString(true),
            endDate: moment(this.dateRangeForm.controls.to.value).endOf('day').toISOString(true)
        };
        this.dateChanged.emit(dateRange);
    }
    hasPreselectedValues() {
        var _a, _b;
        return !!((_a = this.processFilterProperty) === null || _a === void 0 ? void 0 : _a.attributes) && !!((_b = this.processFilterProperty) === null || _b === void 0 ? void 0 : _b.value);
    }
    setPreselectedValues() {
        const from = this.getFilterAttribute('from');
        const to = this.getFilterAttribute('to');
        const type = this.getFilterAttribute('dateType');
        this.dateRangeForm.get('from').setValue(moment(this.getFilterValue(from)));
        this.dateRangeForm.get('to').setValue(moment(this.getFilterValue(to)));
        this.type = this.getFilterValue(type);
    }
    getFilterAttribute(key) {
        return this.processFilterProperty.attributes[key];
    }
    getFilterValue(attribute) {
        return this.processFilterProperty.value[attribute];
    }
    isValidProperty(filterProperties, key) {
        return filterProperties ? filterProperties.indexOf(key) >= 0 : true;
    }
    createDefaultRangeOptions() {
        return [
            DateCloudFilterType.NO_DATE,
            DateCloudFilterType.TODAY,
            DateCloudFilterType.WEEK,
            DateCloudFilterType.MONTH,
            DateCloudFilterType.QUARTER,
            DateCloudFilterType.YEAR,
            DateCloudFilterType.RANGE
        ];
    }
    createDefaultDateOptions() {
        return [
            {
                value: DateCloudFilterType.NO_DATE,
                label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.DATE_RANGE.NO_DATE'
            },
            {
                value: DateCloudFilterType.TODAY,
                label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.DATE_RANGE.TODAY'
            },
            {
                value: DateCloudFilterType.TOMORROW,
                label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.DATE_RANGE.TOMORROW'
            },
            {
                value: DateCloudFilterType.NEXT_7_DAYS,
                label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.DATE_RANGE.NEXT_7_DAYS'
            },
            {
                value: DateCloudFilterType.WEEK,
                label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.DATE_RANGE.WEEK'
            },
            {
                value: DateCloudFilterType.MONTH,
                label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.DATE_RANGE.MONTH'
            },
            {
                value: DateCloudFilterType.QUARTER,
                label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.DATE_RANGE.QUARTER'
            },
            {
                value: DateCloudFilterType.YEAR,
                label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.DATE_RANGE.YEAR'
            },
            {
                value: DateCloudFilterType.RANGE,
                label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.DATE_RANGE.RANGE'
            }
        ];
    }
}
DateRangeFilterComponent.ɵfac = function DateRangeFilterComponent_Factory(t) { return new (t || DateRangeFilterComponent)(); };
DateRangeFilterComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: DateRangeFilterComponent, selectors: [["adf-cloud-date-range-filter"]], inputs: { options: "options", processFilterProperty: "processFilterProperty" }, outputs: { dateChanged: "dateChanged", dateTypeChange: "dateTypeChange" }, decls: 5, vars: 9, consts: [[3, "floatLabel"], [3, "placeholder", "value", "selectionChange"], [3, "value", 4, "ngFor", "ngForOf"], [4, "ngIf"], [3, "value"], [1, "adf-cloud-date-range-picker", 3, "floatLabel"], [3, "formGroup", "rangePicker"], ["matStartDate", "", "formControlName", "from", 3, "placeholder"], ["matEndDate", "", "formControlName", "to", 3, "placeholder"], ["matSuffix", "", 3, "for"], [3, "closed"], ["picker", ""]], template: function DateRangeFilterComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "mat-form-field", 0);
        ɵngcc0.ɵɵelementStart(1, "mat-select", 1);
        ɵngcc0.ɵɵlistener("selectionChange", function DateRangeFilterComponent_Template_mat_select_selectionChange_1_listener($event) { return ctx.onSelectionChange($event); });
        ɵngcc0.ɵɵpipe(2, "translate");
        ɵngcc0.ɵɵtemplate(3, DateRangeFilterComponent_mat_option_3_Template, 3, 5, "mat-option", 2);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(4, DateRangeFilterComponent_ng_container_4_Template, 13, 14, "ng-container", 3);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("floatLabel", "auto");
        ɵngcc0.ɵɵattribute("data-automation-id", ctx.processFilterProperty.key);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵpropertyInterpolate("placeholder", ɵngcc0.ɵɵpipeBind1(2, 7, ctx.processFilterProperty.label));
        ɵngcc0.ɵɵproperty("value", ctx.type);
        ɵngcc0.ɵɵattribute("data-automation-id", "adf-cloud-edit-process-property-" + ctx.processFilterProperty.key);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.filteredProperties);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.isDateRangeType());
    } }, directives: [ɵngcc14.MatFormField, ɵngcc15.MatSelect, ɵngcc3.NgForOf, ɵngcc3.NgIf, ɵngcc8.MatOption, ɵngcc14.MatLabel, ɵngcc16.MatDateRangeInput, ɵngcc17.NgControlStatusGroup, ɵngcc17.FormGroupDirective, ɵngcc16.MatStartDate, ɵngcc17.DefaultValueAccessor, ɵngcc17.NgControlStatus, ɵngcc17.FormControlName, ɵngcc16.MatEndDate, ɵngcc16.MatDatepickerToggle, ɵngcc14.MatSuffix, ɵngcc16.MatDateRangePicker], pipes: [ɵngcc10.TranslatePipe], styles: [".adf-cloud-date-range-picker[_ngcontent-%COMP%]{margin:0 10px}"] });
DateRangeFilterComponent.propDecorators = {
    processFilterProperty: [{ type: Input }],
    options: [{ type: Input }],
    dateChanged: [{ type: Output }],
    dateTypeChange: [{ type: Output }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DateRangeFilterComponent, [{
        type: Component,
        args: [{
                selector: 'adf-cloud-date-range-filter',
                template: "\n<mat-form-field [floatLabel]=\"'auto'\" [attr.data-automation-id]=\"processFilterProperty.key\">\n    <mat-select\n        placeholder=\"{{ processFilterProperty.label | translate }}\"\n        [value]=\"type\"\n        (selectionChange)=\"onSelectionChange($event)\"\n        [attr.data-automation-id]=\"'adf-cloud-edit-process-property-' + processFilterProperty.key\">\n        <mat-option *ngFor=\"let propertyOption of filteredProperties\" [value]=\"propertyOption.value\" [attr.data-automation-id]=\"'adf-cloud-edit-process-property-options-' + propertyOption.value.toString()\">\n            {{ propertyOption.label | translate }}\n        </mat-option>\n    </mat-select>\n</mat-form-field>\n\n<ng-container *ngIf=\"isDateRangeType()\">\n    <mat-form-field [floatLabel]=\"'auto'\" class=\"adf-cloud-date-range-picker\">\n        <mat-label>{{ 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.DATE_RANGE_TITLE' | translate }}</mat-label>\n        <mat-date-range-input [formGroup]=\"dateRangeForm\" [rangePicker]=\"picker\">\n          <input matStartDate formControlName=\"from\" placeholder=\"{{ 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.START_DATE' | translate }}\">\n          <input matEndDate formControlName=\"to\" placeholder=\"{{ 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.END_DATE' | translate }}\">\n        </mat-date-range-input>\n        <mat-datepicker-toggle\n            matSuffix\n            [for]=\"picker\"\n            [attr.data-automation-id]=\"'adf-cloud-edit-process-property-date-range-' + processFilterProperty.key\"></mat-datepicker-toggle>\n        <mat-date-range-picker #picker (closed)=\"onDateRangeClosed()\"></mat-date-range-picker>\n    </mat-form-field>\n</ng-container>\n",
                styles: [".adf-cloud-date-range-picker{margin:0 10px}"]
            }]
    }], function () { return []; }, { dateChanged: [{
            type: Output
        }], dateTypeChange: [{
            type: Output
        }], options: [{
            type: Input
        }], processFilterProperty: [{
            type: Input
        }] }); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class ProcessCommonModule {
}
ProcessCommonModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: ProcessCommonModule });
ProcessCommonModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function ProcessCommonModule_Factory(t) { return new (t || ProcessCommonModule)(); }, providers: [
        DateRangeFilterService
    ], imports: [[
            CommonModule,
            CoreModule,
            MaterialModule
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ProcessCommonModule, { declarations: function () { return [DateRangeFilterComponent]; }, imports: function () { return [CommonModule,
        CoreModule, MaterialModule]; }, exports: function () { return [DateRangeFilterComponent]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ProcessCommonModule, [{
        type: NgModule,
        args: [{
                declarations: [DateRangeFilterComponent],
                imports: [
                    CommonModule,
                    CoreModule,
                    MaterialModule
                ],
                exports: [
                    DateRangeFilterComponent
                ],
                providers: [
                    DateRangeFilterService
                ]
            }]
    }], null, null); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class PeopleCloudComponent {
    constructor(identityUserService, logService) {
        this.identityUserService = identityUserService;
        this.logService = logService;
        this.mode = 'single';
        this.validate = false;
        this.readOnly = false;
        this.preSelectUsers = [];
        this.excludedUsers = [];
        this.userChipsCtrl = new FormControl({ value: '', disabled: false });
        this.searchUserCtrl = new FormControl({ value: '', disabled: false });
        this.selectUser = new EventEmitter();
        this.removeUser = new EventEmitter();
        this.changedUsers = new EventEmitter();
        this.warning = new EventEmitter();
        this._searchUsers = [];
        this.onDestroy$ = new Subject();
        this.selectedUsers = [];
        this.invalidUsers = [];
        this.searchUsers$ = new BehaviorSubject(this._searchUsers);
        this._subscriptAnimationState = 'enter';
        this.searchedValue = '';
        this.validationLoading = false;
        this.searchLoading = false;
    }
    ngOnInit() {
        this.loadClientId();
        this.initSearch();
    }
    ngOnChanges(changes) {
        if (this.valueChanged(changes.preSelectUsers)
            || this.valueChanged(changes.mode)
            || this.valueChanged(changes.validate)) {
            if (this.hasPreSelectUsers()) {
                this.loadPreSelectUsers();
            }
            else if (this.hasPreselectedUsersCleared(changes)) {
                this.selectedUsers = [];
                this.invalidUsers = [];
            }
            if (!this.isValidationEnabled()) {
                this.invalidUsers = [];
            }
        }
        if (changes.appName && this.isAppNameChanged(changes.appName)) {
            this.loadClientId();
        }
    }
    loadClientId() {
        return __awaiter(this, void 0, void 0, function* () {
            this.clientId = yield this.identityUserService.getClientIdByApplicationName(this.appName).toPromise();
            if (this.clientId) {
                this.searchUserCtrl.enable();
            }
        });
    }
    initSearch() {
        this.searchUserCtrl.valueChanges.pipe(filter((value) => {
            this.searchLoading = true;
            return typeof value === 'string';
        }), tap((value) => {
            if (value) {
                this.setTypingError();
            }
        }), debounceTime(500), distinctUntilChanged(), tap((value) => {
            if (value.trim()) {
                this.searchedValue = value;
            }
            else {
                this.searchUserCtrl.markAsPristine();
                this.searchUserCtrl.markAsUntouched();
            }
        }), tap(() => {
            this.resetSearchUsers();
        }), switchMap((search) => this.identityUserService.findUsersByName(search.trim())), mergeMap((users) => {
            this.resetSearchUsers();
            this.searchLoading = false;
            return users;
        }), filter(user => !this.isUserAlreadySelected(user) && !this.isExcludedUser(user)), mergeMap(user => {
            if (this.appName) {
                return this.checkUserHasAccess(user.id).pipe(mergeMap(hasRole => hasRole ? of(user) : of()));
            }
            else if (this.hasRoles()) {
                return this.filterUsersByRoles(user);
            }
            else {
                return of(user);
            }
        }), takeUntil(this.onDestroy$)).subscribe(user => {
            this._searchUsers.push(user);
            this.searchUsers$.next(this._searchUsers);
        });
    }
    ngOnDestroy() {
        this.onDestroy$.next(true);
        this.onDestroy$.complete();
    }
    isAppNameChanged(change) {
        return change && change.previousValue !== change.currentValue && this.appName && this.appName.length > 0;
    }
    isValidationEnabled() {
        return this.validate === true;
    }
    checkUserHasAccess(userId) {
        if (this.hasRoles()) {
            return this.identityUserService.checkUserHasAnyClientAppRole(userId, this.clientId, this.roles);
        }
        else {
            return this.identityUserService.checkUserHasClientApp(userId, this.clientId);
        }
    }
    hasRoles() {
        return this.roles && this.roles.length > 0;
    }
    filterUsersByRoles(user) {
        return this.identityUserService.checkUserHasRole(user.id, this.roles).pipe(map((hasRole) => ({ hasRole: hasRole, user: user })), filter((filteredUser) => filteredUser.hasRole), map((filteredUser) => filteredUser.user));
    }
    isUserAlreadySelected(searchUser) {
        if (this.selectedUsers && this.selectedUsers.length > 0) {
            const result = this.selectedUsers.find((selectedUser) => {
                return this.compare(selectedUser, searchUser);
            });
            return !!result;
        }
        return false;
    }
    isExcludedUser(searchUser) {
        var _a;
        if (((_a = this.excludedUsers) === null || _a === void 0 ? void 0 : _a.length) > 0) {
            return !!this.excludedUsers.find(excludedUser => this.compare(excludedUser, searchUser));
        }
        return false;
    }
    loadPreSelectUsers() {
        return __awaiter(this, void 0, void 0, function* () {
            this.selectedUsers = [];
            if (this.isSingleMode()) {
                this.selectedUsers = [this.preSelectUsers[0]];
            }
            else {
                this.selectedUsers = this.removeDuplicatedUsers(this.preSelectUsers);
            }
            this.userChipsCtrl.setValue(this.selectedUsers[0].username);
            if (this.isValidationEnabled()) {
                this.validationLoading = true;
                yield this.validatePreselectUsers();
                this.validationLoading = false;
            }
        });
    }
    getPreselectedUsers() {
        if (this.isSingleMode()) {
            return [this.preSelectUsers[0]];
        }
        else {
            return this.removeDuplicatedUsers(this.preSelectUsers);
        }
    }
    validatePreselectUsers() {
        return __awaiter(this, void 0, void 0, function* () {
            this.invalidUsers = [];
            const validUsers = [];
            for (const user of this.getPreselectedUsers()) {
                try {
                    const validationResult = yield this.searchUser(user);
                    if (this.compare(user, validationResult)) {
                        validationResult.readonly = user.readonly;
                        validUsers.push(validationResult);
                    }
                    else {
                        this.invalidUsers.push(user);
                    }
                }
                catch (error) {
                    this.invalidUsers.push(user);
                    this.logService.error(error);
                }
            }
            this.checkPreselectValidationErrors();
            this.selectedUsers = validUsers.concat(this.invalidUsers);
        });
    }
    compare(preselectedUser, identityUser) {
        if (preselectedUser && identityUser) {
            const uniquePropertyIdentifiers = ['id', 'username', 'email'];
            for (const property of Object.keys(preselectedUser)) {
                if (preselectedUser[property] !== undefined && uniquePropertyIdentifiers.includes(property)) {
                    return preselectedUser[property] === identityUser[property];
                }
            }
        }
        return false;
    }
    getSearchKey(user) {
        if (user.id) {
            return 'id';
        }
        else if (user.email) {
            return 'email';
        }
        else if (user.username) {
            return 'username';
        }
        else {
            return null;
        }
    }
    searchUser(user) {
        return __awaiter(this, void 0, void 0, function* () {
            const key = this.getSearchKey(user);
            switch (key) {
                case 'id':
                    return this.identityUserService.findUserById(user[key]).toPromise();
                case 'username':
                    return (yield this.identityUserService.findUserByUsername(user[key]).toPromise())[0];
                case 'email':
                    return (yield this.identityUserService.findUserByEmail(user[key]).toPromise())[0];
                default:
                    return null;
            }
        });
    }
    removeDuplicatedUsers(users) {
        return users.filter((user, index, self) => index === self.findIndex(auxUser => user.id === auxUser.id && user.username === auxUser.username && user.email === auxUser.email));
    }
    checkPreselectValidationErrors() {
        this.invalidUsers = this.removeDuplicatedUsers(this.invalidUsers);
        if (this.invalidUsers.length > 0) {
            this.generateInvalidUsersMessage();
        }
        this.warning.emit({
            message: 'INVALID_PRESELECTED_USERS',
            users: this.invalidUsers
        });
    }
    onSelect(user) {
        if (user) {
            this.selectUser.emit(user);
            if (this.isMultipleMode()) {
                if (!this.isUserAlreadySelected(user)) {
                    this.selectedUsers.push(user);
                }
            }
            else {
                this.invalidUsers = [];
                this.selectedUsers = [user];
            }
            this.userInput.nativeElement.value = '';
            this.searchUserCtrl.setValue('');
            this.userChipsCtrlValue(this.selectedUsers[0].username);
            this.changedUsers.emit(this.selectedUsers);
            this.resetSearchUsers();
        }
    }
    onRemove(userToRemove) {
        this.removeUser.emit(userToRemove);
        this.removeUserFromSelected(userToRemove);
        this.changedUsers.emit(this.selectedUsers);
        if (this.selectedUsers.length === 0) {
            this.userChipsCtrlValue('');
        }
        else {
            this.userChipsCtrlValue(this.selectedUsers[0].username);
        }
        this.searchUserCtrl.markAsDirty();
        this.searchUserCtrl.markAsTouched();
        if (this.isValidationEnabled()) {
            this.removeUserFromValidation(userToRemove);
            this.checkPreselectValidationErrors();
        }
    }
    userChipsCtrlValue(value) {
        this.userChipsCtrl.setValue(value);
        this.userChipsCtrl.markAsDirty();
        this.userChipsCtrl.markAsTouched();
    }
    removeUserFromSelected({ id, username, email }) {
        const indexToRemove = this.selectedUsers.findIndex(user => {
            return user.id === id
                && user.username === username
                && user.email === email;
        });
        if (indexToRemove !== -1) {
            this.selectedUsers.splice(indexToRemove, 1);
        }
    }
    removeUserFromValidation({ id, username, email }) {
        const indexToRemove = this.invalidUsers.findIndex(user => {
            return user.id === id
                && user.username === username
                && user.email === email;
        });
        if (indexToRemove !== -1) {
            this.invalidUsers.splice(indexToRemove, 1);
        }
    }
    generateInvalidUsersMessage() {
        this.validateUsersMessage = '';
        this.invalidUsers.forEach((invalidUser, index) => {
            if (index === this.invalidUsers.length - 1) {
                this.validateUsersMessage += `${invalidUser.username} `;
            }
            else {
                this.validateUsersMessage += `${invalidUser.username}, `;
            }
        });
    }
    setTypingError() {
        this.searchUserCtrl.setErrors(Object.assign({ searchTypingError: true }, this.searchUserCtrl.errors));
    }
    hasPreselectError() {
        return this.invalidUsers
            && this.invalidUsers.length > 0;
    }
    getDisplayName(user) {
        return FullNamePipe.prototype.transform(user);
    }
    isMultipleMode() {
        return this.mode === 'multiple';
    }
    isSingleMode() {
        return this.mode === 'single';
    }
    isSingleSelectionReadonly() {
        return this.isSingleMode()
            && this.selectedUsers.length === 1
            && this.selectedUsers[0].readonly === true;
    }
    hasPreSelectUsers() {
        return this.preSelectUsers
            && this.preSelectUsers.length > 0;
    }
    valueChanged(change) {
        return change
            && change.currentValue !== change.previousValue;
    }
    hasPreselectedUsersCleared(changes) {
        return changes
            && changes.preSelectUsers
            && changes.preSelectUsers.currentValue
            && changes.preSelectUsers.currentValue.length === 0;
    }
    resetSearchUsers() {
        this._searchUsers = [];
        this.searchUsers$.next(this._searchUsers);
    }
    getSelectedUsers() {
        return this.selectedUsers;
    }
    isReadonly() {
        return this.readOnly || this.isSingleSelectionReadonly();
    }
    isValidationLoading() {
        return this.isValidationEnabled() && this.validationLoading;
    }
    setFocus(isFocused) {
        this.isFocused = isFocused;
    }
    hasError() {
        return !!this.searchUserCtrl.errors;
    }
    getValidationPattern() {
        return this.searchUserCtrl.errors.pattern.requiredPattern;
    }
    getValidationMaxLength() {
        return this.searchUserCtrl.errors.maxlength.requiredLength;
    }
    getValidationMinLength() {
        return this.searchUserCtrl.errors.minlength.requiredLength;
    }
}
PeopleCloudComponent.ɵfac = function PeopleCloudComponent_Factory(t) { return new (t || PeopleCloudComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc6.IdentityUserService), ɵngcc0.ɵɵdirectiveInject(ɵngcc6.LogService)); };
PeopleCloudComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: PeopleCloudComponent, selectors: [["adf-cloud-people"]], viewQuery: function PeopleCloudComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c3, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.userInput = _t.first);
    } }, inputs: { mode: "mode", validate: "validate", readOnly: "readOnly", preSelectUsers: "preSelectUsers", excludedUsers: "excludedUsers", userChipsCtrl: "userChipsCtrl", searchUserCtrl: "searchUserCtrl", appName: "appName", roles: "roles", title: "title" }, outputs: { selectUser: "selectUser", removeUser: "removeUser", changedUsers: "changedUsers", warning: "warning" }, features: [ɵngcc0.ɵɵProvidersFeature([FullNamePipe]), ɵngcc0.ɵɵNgOnChangesFeature], decls: 20, vars: 17, consts: [[1, "adf-people-cloud", 3, "floatLabel"], ["id", "adf-people-cloud-title-id", 4, "ngIf"], ["data-automation-id", "adf-cloud-people-chip-list", 3, "disabled"], ["userMultipleChipList", ""], [3, "removable", "matTooltip", "removed", 4, "ngFor", "ngForOf"], ["matInput", "", "class", "adf-cloud-input", "data-automation-id", "adf-people-cloud-search-input", 3, "formControl", "matAutocomplete", "matChipInputFor", "focus", "blur", 4, "ngIf"], ["autoActiveFirstOption", "", 1, "adf-people-cloud-list", 3, "displayWith", "optionSelected"], ["auto", "matAutocomplete"], [4, "ngIf", "ngIfElse"], ["noResults", ""], ["mode", "indeterminate", 4, "ngIf"], [4, "ngIf"], ["data-automation-id", "invalid-users-typing-error", 4, "ngIf"], ["id", "adf-people-cloud-title-id"], [3, "removable", "matTooltip", "removed"], ["matChipRemove", "", 4, "ngIf"], ["matChipRemove", ""], ["matInput", "", "data-automation-id", "adf-people-cloud-search-input", 1, "adf-cloud-input", 3, "formControl", "matAutocomplete", "matChipInputFor", "focus", "blur"], ["userInput", ""], [3, "value", 4, "ngFor", "ngForOf"], [3, "value"], ["data-automation-id", "adf-people-cloud-row", 1, "adf-people-cloud-row", 3, "id"], [3, "outerHTML"], [1, "adf-people-label-name"], ["disabled", "", "class", "adf-people-cloud-option-not-active", "data-automation-id", "adf-people-cloud-no-results", 4, "ngIf"], ["disabled", "", "data-automation-id", "adf-people-cloud-no-results", 1, "adf-people-cloud-option-not-active"], ["mode", "indeterminate"], [1, "adf-start-task-cloud-error-icon"], ["data-automation-id", "invalid-users-typing-error"]], template: function PeopleCloudComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "form");
        ɵngcc0.ɵɵelementStart(1, "mat-form-field", 0);
        ɵngcc0.ɵɵtemplate(2, PeopleCloudComponent_mat_label_2_Template, 3, 3, "mat-label", 1);
        ɵngcc0.ɵɵelementStart(3, "mat-chip-list", 2, 3);
        ɵngcc0.ɵɵtemplate(5, PeopleCloudComponent_mat_chip_5_Template, 5, 9, "mat-chip", 4);
        ɵngcc0.ɵɵtemplate(6, PeopleCloudComponent_input_6_Template, 2, 3, "input", 5);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(7, "mat-autocomplete", 6, 7);
        ɵngcc0.ɵɵlistener("optionSelected", function PeopleCloudComponent_Template_mat_autocomplete_optionSelected_7_listener($event) { return ctx.onSelect($event.option.value); });
        ɵngcc0.ɵɵtemplate(9, PeopleCloudComponent_ng_container_9_Template, 3, 3, "ng-container", 8);
        ɵngcc0.ɵɵpipe(10, "async");
        ɵngcc0.ɵɵtemplate(11, PeopleCloudComponent_ng_template_11_Template, 1, 1, "ng-template", null, 9, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(13, PeopleCloudComponent_mat_progress_bar_13_Template, 1, 0, "mat-progress-bar", 10);
        ɵngcc0.ɵɵtemplate(14, PeopleCloudComponent_mat_error_14_Template, 5, 6, "mat-error", 11);
        ɵngcc0.ɵɵtemplate(15, PeopleCloudComponent_mat_error_15_Template, 5, 6, "mat-error", 11);
        ɵngcc0.ɵɵtemplate(16, PeopleCloudComponent_mat_error_16_Template, 5, 6, "mat-error", 11);
        ɵngcc0.ɵɵtemplate(17, PeopleCloudComponent_mat_error_17_Template, 5, 6, "mat-error", 11);
        ɵngcc0.ɵɵtemplate(18, PeopleCloudComponent_mat_error_18_Template, 5, 3, "mat-error", 11);
        ɵngcc0.ɵɵtemplate(19, PeopleCloudComponent_mat_error_19_Template, 5, 6, "mat-error", 12);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        const _r6 = ɵngcc0.ɵɵreference(12);
        var tmp_6_0 = null;
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("floatLabel", "auto");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.isReadonly());
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("disabled", ctx.isReadonly() || ctx.isValidationLoading());
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.selectedUsers);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.isReadonly());
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("displayWith", ctx.getDisplayName);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", (tmp_6_0 = ɵngcc0.ɵɵpipeBind1(10, 15, ctx.searchUsers$)) == null ? null : tmp_6_0.length)("ngIfElse", _r6);
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵproperty("ngIf", ctx.validationLoading);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.hasPreselectError() && !ctx.isValidationLoading());
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.searchUserCtrl.hasError("pattern"));
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.searchUserCtrl.hasError("maxlength"));
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.searchUserCtrl.hasError("minlength"));
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.searchUserCtrl.hasError("required") || ctx.userChipsCtrl.hasError("required"));
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.searchUserCtrl.hasError("searchTypingError") && !ctx.isFocused);
    } }, directives: [ɵngcc17.ɵangular_packages_forms_forms_y, ɵngcc17.NgControlStatusGroup, ɵngcc17.NgForm, ɵngcc14.MatFormField, ɵngcc3.NgIf, ɵngcc18.MatChipList, ɵngcc3.NgForOf, ɵngcc19.MatAutocomplete, ɵngcc14.MatLabel, ɵngcc18.MatChip, ɵngcc20.MatTooltip, ɵngcc5.MatIcon, ɵngcc18.MatChipRemove, ɵngcc21.MatInput, ɵngcc17.DefaultValueAccessor, ɵngcc19.MatAutocompleteTrigger, ɵngcc18.MatChipInput, ɵngcc17.NgControlStatus, ɵngcc17.FormControlDirective, ɵngcc8.MatOption, ɵngcc22.MatProgressBar, ɵngcc14.MatError], pipes: [ɵngcc3.AsyncPipe, ɵngcc10.TranslatePipe, ɵngcc6.FullNamePipe, ɵngcc6.InitialUsernamePipe], styles: [".adf-people-cloud{width:100%}.adf-people-cloud-option-not-active{background:inherit!important}.adf-people-cloud-list{margin:5px 0;padding:10px 0}.adf-people-cloud-row{align-items:center;column-gap:10px;display:flex}.adf-people-cloud-pic{align-items:center;background:var(--theme-primary-color);border-radius:100px;color:var(--theme-text-fg-color);display:flex;font-size:18px;font-weight:bolder;height:40px;justify-content:center;text-transform:uppercase;width:40px}.adf-start-task-cloud-error{height:20px;margin-top:-10px;position:absolute}.adf-start-task-cloud-error-message{color:var(--theme-warn-color);font-size:12px;height:16px;line-height:1.33;padding-right:8px;width:auto}.adf-start-task-cloud-error-icon{color:var(--theme-warn-color);font-size:17px}"], encapsulation: 2, data: { animation: [
            trigger('transitionMessages', [
                state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),
                transition('void => enter', [
                    style({ opacity: 0, transform: 'translateY(-100%)' }),
                    animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)')
                ])
            ])
        ] }, changeDetection: 0 });
PeopleCloudComponent.ctorParameters = () => [
    { type: IdentityUserService },
    { type: LogService }
];
PeopleCloudComponent.propDecorators = {
    appName: [{ type: Input }],
    mode: [{ type: Input }],
    roles: [{ type: Input }],
    validate: [{ type: Input }],
    readOnly: [{ type: Input }],
    preSelectUsers: [{ type: Input }],
    excludedUsers: [{ type: Input }],
    userChipsCtrl: [{ type: Input }],
    searchUserCtrl: [{ type: Input }],
    title: [{ type: Input }],
    selectUser: [{ type: Output }],
    removeUser: [{ type: Output }],
    changedUsers: [{ type: Output }],
    warning: [{ type: Output }],
    userInput: [{ type: ViewChild, args: ['userInput',] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(PeopleCloudComponent, [{
        type: Component,
        args: [{
                selector: 'adf-cloud-people',
                template: "<form>\n    <mat-form-field [floatLabel]=\"'auto'\" class=\"adf-people-cloud\">\n        <mat-label *ngIf=\"!isReadonly()\" id=\"adf-people-cloud-title-id\">{{ title | translate }}</mat-label>\n        <mat-chip-list #userMultipleChipList [disabled]=\"isReadonly() || isValidationLoading()\" data-automation-id=\"adf-cloud-people-chip-list\">\n            <mat-chip\n                *ngFor=\"let user of selectedUsers\"\n                [removable]=\"!(user.readonly)\"\n                [attr.data-automation-id]=\"'adf-people-cloud-chip-' + user.username\"\n                (removed)=\"onRemove(user)\"\n                matTooltip=\"{{ (user.readonly ? 'ADF_CLOUD_GROUPS.MANDATORY' : '') | translate }}\">\n                {{user | fullName}}\n                <mat-icon\n                    matChipRemove\n                    *ngIf=\"!(user.readonly || readOnly)\"\n                    [attr.data-automation-id]=\"'adf-people-cloud-chip-remove-icon-' + user.username\">\n                    cancel\n                </mat-icon>\n            </mat-chip>\n            <input *ngIf=\"!isReadonly()\" matInput\n                   [formControl]=\"searchUserCtrl\"\n                   [matAutocomplete]=\"auto\"\n                   [matChipInputFor]=\"userMultipleChipList\"\n                   (focus)=\"setFocus(true)\"\n                   (blur)=\"setFocus(false)\"\n                   class=\"adf-cloud-input\"\n                   data-automation-id=\"adf-people-cloud-search-input\" #userInput>\n        </mat-chip-list>\n\n        <mat-autocomplete autoActiveFirstOption class=\"adf-people-cloud-list\"\n                          #auto=\"matAutocomplete\"\n                          (optionSelected)=\"onSelect($event.option.value)\"\n                          [displayWith]=\"getDisplayName\">\n            <ng-container *ngIf=\"(searchUsers$ | async)?.length else noResults\" >\n            <mat-option *ngFor=\"let user of searchUsers$ | async; let i = index\" [value]=\"user\">\n                <div class=\"adf-people-cloud-row\" id=\"adf-people-cloud-user-{{user.username}}\"\n                     data-automation-id=\"adf-people-cloud-row\">\n                    <div [outerHTML]=\"user | usernameInitials:'adf-people-cloud-pic'\"></div>\n                    <span class=\"adf-people-label-name\"> {{user | fullName}}</span>\n                </div>\n            </mat-option>\n            </ng-container>\n            <ng-template #noResults>\n                <mat-option *ngIf=\"searchUserCtrl.hasError('searchTypingError') && !searchLoading\" disabled\n                            class=\"adf-people-cloud-option-not-active\"\n                            data-automation-id=\"adf-people-cloud-no-results\">\n                    <span> {{ 'ADF_CLOUD_USERS.ERROR.NOT_FOUND' | translate : { userName: searchedValue } }}</span>\n                </mat-option>\n            </ng-template>\n        </mat-autocomplete>\n    </mat-form-field>\n    <mat-progress-bar\n        *ngIf=\"validationLoading\"\n        mode=\"indeterminate\">\n    </mat-progress-bar>\n\n    <mat-error *ngIf=\"hasPreselectError() && !isValidationLoading()\">\n        <mat-icon class=\"adf-start-task-cloud-error-icon\">warning</mat-icon>\n        {{ 'ADF_CLOUD_USERS.ERROR.NOT_FOUND' | translate : { userName : validateUsersMessage } }}</mat-error>\n    <mat-error *ngIf=\"searchUserCtrl.hasError('pattern')\">\n        <mat-icon class=\"adf-start-task-cloud-error-icon\">warning</mat-icon>\n        {{ 'ADF_CLOUD_PEOPLE_GROUPS.ERROR.INVALID_PATTERN' | translate: { pattern: getValidationPattern() } }}</mat-error>\n    <mat-error *ngIf=\"searchUserCtrl.hasError('maxlength')\">\n        <mat-icon class=\"adf-start-task-cloud-error-icon\">warning</mat-icon>\n        {{ 'ADF_CLOUD_PEOPLE_GROUPS.ERROR.INVALID_MAX_LENGTH' | translate: { requiredLength: getValidationMaxLength() } }}\n    </mat-error>\n    <mat-error *ngIf=\"searchUserCtrl.hasError('minlength')\">\n        <mat-icon class=\"adf-start-task-cloud-error-icon\">warning</mat-icon>\n        {{ 'ADF_CLOUD_PEOPLE_GROUPS.ERROR.INVALID_MIN_LENGTH' | translate: { requiredLength: getValidationMinLength() } }}</mat-error>\n    <mat-error *ngIf=\"searchUserCtrl.hasError('required') || userChipsCtrl.hasError('required')\">\n        <mat-icon class=\"adf-start-task-cloud-error-icon\">warning</mat-icon>\n        {{ 'ADF_CLOUD_PEOPLE_GROUPS.ERROR.REQUIRED' | translate }} </mat-error>\n    <mat-error *ngIf=\"searchUserCtrl.hasError('searchTypingError') && !this.isFocused\" data-automation-id=\"invalid-users-typing-error\">\n        <mat-icon class=\"adf-start-task-cloud-error-icon\">warning</mat-icon>\n        {{ 'ADF_CLOUD_USERS.ERROR.NOT_FOUND' | translate : { userName : searchedValue } }}</mat-error>\n</form>\n",
                animations: [
                    trigger('transitionMessages', [
                        state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),
                        transition('void => enter', [
                            style({ opacity: 0, transform: 'translateY(-100%)' }),
                            animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)')
                        ])
                    ])
                ],
                providers: [FullNamePipe],
                changeDetection: ChangeDetectionStrategy.OnPush,
                encapsulation: ViewEncapsulation.None,
                styles: [".adf-people-cloud{width:100%}.adf-people-cloud-option-not-active{background:inherit!important}.adf-people-cloud-list{margin:5px 0;padding:10px 0}.adf-people-cloud-row{align-items:center;column-gap:10px;display:flex}.adf-people-cloud-pic{align-items:center;background:var(--theme-primary-color);border-radius:100px;color:var(--theme-text-fg-color);display:flex;font-size:18px;font-weight:bolder;height:40px;justify-content:center;text-transform:uppercase;width:40px}.adf-start-task-cloud-error{height:20px;margin-top:-10px;position:absolute}.adf-start-task-cloud-error-message{color:var(--theme-warn-color);font-size:12px;height:16px;line-height:1.33;padding-right:8px;width:auto}.adf-start-task-cloud-error-icon{color:var(--theme-warn-color);font-size:17px}"]
            }]
    }], function () { return [{ type: ɵngcc6.IdentityUserService }, { type: ɵngcc6.LogService }]; }, { mode: [{
            type: Input
        }], validate: [{
            type: Input
        }], readOnly: [{
            type: Input
        }], preSelectUsers: [{
            type: Input
        }], excludedUsers: [{
            type: Input
        }], userChipsCtrl: [{
            type: Input
        }], searchUserCtrl: [{
            type: Input
        }], selectUser: [{
            type: Output
        }], removeUser: [{
            type: Output
        }], changedUsers: [{
            type: Output
        }], warning: [{
            type: Output
        }], appName: [{
            type: Input
        }], roles: [{
            type: Input
        }], title: [{
            type: Input
        }], userInput: [{
            type: ViewChild,
            args: ['userInput']
        }] }); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class PeopleCloudModule {
}
PeopleCloudModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: PeopleCloudModule });
PeopleCloudModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function PeopleCloudModule_Factory(t) { return new (t || PeopleCloudModule)(); }, imports: [[
            CommonModule,
            FlexLayoutModule,
            MaterialModule,
            FormsModule,
            ReactiveFormsModule,
            CoreModule
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(PeopleCloudModule, { declarations: function () { return [PeopleCloudComponent]; }, imports: function () { return [CommonModule,
        FlexLayoutModule, MaterialModule, FormsModule,
        ReactiveFormsModule,
        CoreModule]; }, exports: function () { return [PeopleCloudComponent]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(PeopleCloudModule, [{
        type: NgModule,
        args: [{
                imports: [
                    CommonModule,
                    FlexLayoutModule,
                    MaterialModule,
                    FormsModule,
                    ReactiveFormsModule,
                    CoreModule
                ],
                declarations: [PeopleCloudComponent],
                exports: [
                    PeopleCloudComponent
                ]
            }]
    }], null, null); })();

class ServiceTaskFilterCloudService {
    constructor(identityUserService, preferenceService) {
        this.identityUserService = identityUserService;
        this.preferenceService = preferenceService;
        this.filtersSubject = new BehaviorSubject([]);
        this.filters$ = this.filtersSubject.asObservable();
    }
    createDefaultFilters(appName) {
        const key = this.prepareKey(appName);
        this.preferenceService.getPreferences(appName, key).pipe(switchMap((response) => {
            const preferences = (response && response.list && response.list.entries) ? response.list.entries : [];
            if (!this.hasPreferences(preferences) || !this.hasTaskFilters(preferences, key)) {
                return this.createTaskFilters(appName, key, this.defaultServiceTaskFilters(appName));
            }
            else {
                return of(this.findFiltersByKeyInPreferences(preferences, key));
            }
        })).subscribe((filters) => {
            this.addFiltersToStream(filters);
        });
    }
    hasPreferences(preferences) {
        return preferences && preferences.length > 0;
    }
    hasTaskFilters(preferences, key) {
        const filters = preferences.find((filter) => { return filter.entry.key === key; });
        return (filters && filters.entry) ? JSON.parse(filters.entry.value).length > 0 : false;
    }
    createTaskFilters(appName, key, filters) {
        return this.preferenceService.createPreference(appName, key, filters);
    }
    getTaskFiltersByKey(appName, key) {
        return this.preferenceService.getPreferenceByKey(appName, key);
    }
    getTaskListFilters(appName) {
        this.createDefaultFilters(appName);
        return this.filters$;
    }
    getTaskFilterById(appName, id) {
        const key = this.prepareKey(appName);
        return this.getTaskFiltersByKey(appName, key).pipe(switchMap((filters) => {
            if (filters && filters.length === 0) {
                return this.createTaskFilters(appName, key, this.defaultServiceTaskFilters(appName));
            }
            else {
                return of(filters);
            }
        }), map((filters) => {
            return filters.filter((filter) => {
                return filter.id === id;
            })[0];
        }));
    }
    addFilter(newFilter) {
        const key = this.prepareKey(newFilter.appName);
        return this.getTaskFiltersByKey(newFilter.appName, key).pipe(switchMap((filters) => {
            if (filters && filters.length === 0) {
                return this.createTaskFilters(newFilter.appName, key, [newFilter]);
            }
            else {
                filters.push(newFilter);
                return this.preferenceService.updatePreference(newFilter.appName, key, filters);
            }
        }), map((filters) => {
            this.addFiltersToStream(filters);
            return filters;
        }));
    }
    addFiltersToStream(filters) {
        this.filtersSubject.next(filters);
    }
    updateFilter(updatedFilter) {
        const key = this.prepareKey(updatedFilter.appName);
        return this.getTaskFiltersByKey(updatedFilter.appName, key).pipe(switchMap((filters) => {
            if (filters && filters.length === 0) {
                return this.createTaskFilters(updatedFilter.appName, key, [updatedFilter]);
            }
            else {
                const itemIndex = filters.findIndex((filter) => filter.id === updatedFilter.id);
                filters[itemIndex] = updatedFilter;
                return this.updateTaskFilters(updatedFilter.appName, key, filters);
            }
        }), map((updatedFilters) => {
            this.addFiltersToStream(updatedFilters);
            return updatedFilters;
        }));
    }
    deleteFilter(deletedFilter) {
        const key = this.prepareKey(deletedFilter.appName);
        return this.getTaskFiltersByKey(deletedFilter.appName, key).pipe(switchMap((filters) => {
            if (filters && filters.length > 0) {
                filters = filters.filter(filter => filter.id !== deletedFilter.id);
                return this.updateTaskFilters(deletedFilter.appName, key, filters);
            }
            return of([]);
        }), map(filters => {
            this.addFiltersToStream(filters);
            return filters;
        }));
    }
    isDefaultFilter(filterName) {
        const defaultFilters = this.defaultServiceTaskFilters();
        return defaultFilters.findIndex((filter) => filterName === filter.name) !== -1;
    }
    updateTaskFilters(appName, key, filters) {
        return this.preferenceService.updatePreference(appName, key, filters);
    }
    prepareKey(appName) {
        return `service-task-filters-${appName}-${this.identityUserService.getCurrentUserInfo().username}`;
    }
    findFiltersByKeyInPreferences(preferences, key) {
        const result = preferences.find((filter) => { return filter.entry.key === key; });
        return result && result.entry ? JSON.parse(result.entry.value) : [];
    }
    defaultServiceTaskFilters(appName) {
        return [
            {
                id: this.generateRandomId(),
                name: 'ADF_CLOUD_SERVICE_TASK_FILTERS.ALL_SERVICE_TASKS',
                key: 'my-service-tasks',
                icon: 'inbox',
                appName,
                status: '',
                sort: 'startedDate',
                order: 'DESC'
            },
            {
                id: this.generateRandomId(),
                name: 'ADF_CLOUD_SERVICE_TASK_FILTERS.COMPLETED_TASKS',
                key: 'completed-tasks',
                icon: 'done',
                appName,
                status: 'COMPLETED',
                sort: 'completedDate',
                order: 'DESC'
            },
            {
                id: this.generateRandomId(),
                name: 'ADF_CLOUD_SERVICE_TASK_FILTERS.ERRORED_TASKS',
                key: 'errored-service-tasks',
                icon: 'error',
                appName,
                status: 'ERROR',
                sort: 'startedDate',
                order: 'DESC'
            }
        ];
    }
    generateRandomId() {
        return Math.random().toString(36).substr(2, 9);
    }
}
ServiceTaskFilterCloudService.ɵfac = function ServiceTaskFilterCloudService_Factory(t) { return new (t || ServiceTaskFilterCloudService)(ɵngcc0.ɵɵinject(ɵngcc6.IdentityUserService), ɵngcc0.ɵɵinject(TASK_FILTERS_SERVICE_TOKEN)); };
ServiceTaskFilterCloudService.ɵprov = ɵɵdefineInjectable({ factory: function ServiceTaskFilterCloudService_Factory() { return new ServiceTaskFilterCloudService(ɵɵinject(IdentityUserService), ɵɵinject(TASK_FILTERS_SERVICE_TOKEN)); }, token: ServiceTaskFilterCloudService, providedIn: "root" });
ServiceTaskFilterCloudService.ctorParameters = () => [
    { type: IdentityUserService },
    { type: undefined, decorators: [{ type: Inject, args: [TASK_FILTERS_SERVICE_TOKEN,] }] }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ServiceTaskFilterCloudService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc6.IdentityUserService }, { type: undefined, decorators: [{
                type: Inject,
                args: [TASK_FILTERS_SERVICE_TOKEN]
            }] }]; }, null); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class TaskFilterDialogCloudComponent {
    constructor(fb, dialogRef, data) {
        this.fb = fb;
        this.dialogRef = dialogRef;
        this.data = data;
        this.defaultIcon = 'inbox';
    }
    ngOnInit() {
        this.filterForm = this.fb.group({
            name: [this.data.name, Validators.required]
        });
    }
    onSaveClick() {
        this.dialogRef.close({
            action: TaskFilterDialogCloudComponent.ACTION_SAVE,
            icon: this.defaultIcon,
            name: this.nameController.value
        });
    }
    onCancelClick() {
        this.dialogRef.close();
    }
    get nameController() {
        return this.filterForm.get('name');
    }
    isValid() {
        return this.filterForm.valid;
    }
}
TaskFilterDialogCloudComponent.ɵfac = function TaskFilterDialogCloudComponent_Factory(t) { return new (t || TaskFilterDialogCloudComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc17.FormBuilder), ɵngcc0.ɵɵdirectiveInject(ɵngcc23.MatDialogRef), ɵngcc0.ɵɵdirectiveInject(MAT_DIALOG_DATA)); };
TaskFilterDialogCloudComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: TaskFilterDialogCloudComponent, selectors: [["adf-cloud-task-filter-dialog"]], decls: 17, vars: 15, consts: [[1, "adf-task-filter-dialog"], ["mat-dialog-title", "", "id", "adf-task-filter-dialog-title"], [3, "formGroup"], ["fxFlex", "", 3, "floatLabel"], ["matInput", "", "formControlName", "name", "id", "adf-filter-name-id", 3, "placeholder"], ["fxLayout", "row", "fxLayoutAlign", "end end"], ["mat-button", "", "id", "adf-save-button-id", 3, "disabled", "click"], ["mat-button", "", "id", "adf-cancel-button-id", 3, "click"]], template: function TaskFilterDialogCloudComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "span", 1);
        ɵngcc0.ɵɵtext(2);
        ɵngcc0.ɵɵpipe(3, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(4, "mat-card");
        ɵngcc0.ɵɵelementStart(5, "mat-card-content");
        ɵngcc0.ɵɵelementStart(6, "form", 2);
        ɵngcc0.ɵɵelementStart(7, "mat-form-field", 3);
        ɵngcc0.ɵɵelement(8, "input", 4);
        ɵngcc0.ɵɵpipe(9, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(10, "mat-card-actions", 5);
        ɵngcc0.ɵɵelementStart(11, "button", 6);
        ɵngcc0.ɵɵlistener("click", function TaskFilterDialogCloudComponent_Template_button_click_11_listener() { return ctx.onSaveClick(); });
        ɵngcc0.ɵɵtext(12);
        ɵngcc0.ɵɵpipe(13, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(14, "button", 7);
        ɵngcc0.ɵɵlistener("click", function TaskFilterDialogCloudComponent_Template_button_click_14_listener() { return ctx.onCancelClick(); });
        ɵngcc0.ɵɵtext(15);
        ɵngcc0.ɵɵpipe(16, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(3, 7, "ADF_CLOUD_EDIT_TASK_FILTER.DIALOG.TITLE"), " ");
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵproperty("formGroup", ctx.filterForm);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("floatLabel", "auto");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵpropertyInterpolate("placeholder", ɵngcc0.ɵɵpipeBind1(9, 9, "ADF_CLOUD_EDIT_TASK_FILTER.FILTER_NAME"));
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("disabled", !ctx.isValid());
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(13, 11, "ADF_CLOUD_EDIT_TASK_FILTER.DIALOG.SAVE"), " ");
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(16, 13, "ADF_CLOUD_EDIT_TASK_FILTER.DIALOG.CANCEL"), " ");
    } }, directives: [ɵngcc23.MatDialogTitle, ɵngcc1.MatCard, ɵngcc1.MatCardContent, ɵngcc17.ɵangular_packages_forms_forms_y, ɵngcc17.NgControlStatusGroup, ɵngcc17.FormGroupDirective, ɵngcc14.MatFormField, ɵngcc2.DefaultFlexDirective, ɵngcc21.MatInput, ɵngcc17.DefaultValueAccessor, ɵngcc17.NgControlStatus, ɵngcc17.FormControlName, ɵngcc1.MatCardActions, ɵngcc2.DefaultLayoutDirective, ɵngcc2.DefaultLayoutAlignDirective, ɵngcc13.MatButton], pipes: [ɵngcc10.TranslatePipe], styles: [".adf-task-filter-dialog[_ngcontent-%COMP%]   .mat-card[_ngcontent-%COMP%], .adf-task-filter-dialog[_ngcontent-%COMP%]   .mat-card-content[_ngcontent-%COMP%]{box-shadow:none;padding:0}"] });
TaskFilterDialogCloudComponent.ACTION_SAVE = 'SAVE';
TaskFilterDialogCloudComponent.ctorParameters = () => [
    { type: FormBuilder },
    { type: MatDialogRef },
    { type: undefined, decorators: [{ type: Inject, args: [MAT_DIALOG_DATA,] }] }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TaskFilterDialogCloudComponent, [{
        type: Component,
        args: [{
                selector: 'adf-cloud-task-filter-dialog',
                template: "<div class=\"adf-task-filter-dialog\">\n    <span mat-dialog-title id=\"adf-task-filter-dialog-title\">\n         {{ 'ADF_CLOUD_EDIT_TASK_FILTER.DIALOG.TITLE' | translate}}\n    </span>\n    <mat-card>\n        <mat-card-content>\n        <form [formGroup]=\"filterForm\">\n            <mat-form-field fxFlex [floatLabel]=\"'auto'\">\n                <input matInput placeholder=\"{{ 'ADF_CLOUD_EDIT_TASK_FILTER.FILTER_NAME' | translate }}\" formControlName=\"name\" id=\"adf-filter-name-id\">\n            </mat-form-field>\n        </form>\n        </mat-card-content>\n        <mat-card-actions fxLayout=\"row\" fxLayoutAlign=\"end end\">\n            <button mat-button (click)=\"onSaveClick()\" id=\"adf-save-button-id\" [disabled]=\"!isValid()\">\n                {{ 'ADF_CLOUD_EDIT_TASK_FILTER.DIALOG.SAVE' | translate}}\n            </button>\n            <button mat-button (click)=\"onCancelClick()\" id=\"adf-cancel-button-id\">\n               {{ 'ADF_CLOUD_EDIT_TASK_FILTER.DIALOG.CANCEL' | translate}}\n            </button>\n        </mat-card-actions>\n    </mat-card>\n</div>\n",
                styles: [".adf-task-filter-dialog .mat-card,.adf-task-filter-dialog .mat-card-content{box-shadow:none;padding:0}"]
            }]
    }], function () { return [{ type: ɵngcc17.FormBuilder }, { type: ɵngcc23.MatDialogRef }, { type: undefined, decorators: [{
                type: Inject,
                args: [MAT_DIALOG_DATA]
            }] }]; }, null); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class BaseEditTaskFilterCloudComponent {
    constructor(formBuilder, dateAdapter, userPreferencesService, appsProcessCloudService, taskCloudService, dialog, translateService) {
        this.formBuilder = formBuilder;
        this.dateAdapter = dateAdapter;
        this.userPreferencesService = userPreferencesService;
        this.appsProcessCloudService = appsProcessCloudService;
        this.taskCloudService = taskCloudService;
        this.dialog = dialog;
        this.translateService = translateService;
        this.appName = '';
        this.showTitle = true;
        this.showTaskFilterName = true;
        this.filterProperties = [];
        this.role = '';
        this.showFilterActions = true;
        this.actions = BaseEditTaskFilterCloudComponent.DEFAULT_ACTIONS;
        this.sortProperties = [];
        this.action = new EventEmitter();
        this.applicationNames = [];
        this.processDefinitionNames = [];
        this.formHasBeenChanged = false;
        this.taskFilterProperties = [];
        this.taskFilterActions = [];
        this.toggleFilterActions = false;
        this.sortDirections = [
            { value: 'ASC', label: 'ADF_CLOUD_TASK_FILTERS.DIRECTION.ASCENDING' },
            { value: 'DESC', label: 'ADF_CLOUD_TASK_FILTERS.DIRECTION.DESCENDING' }
        ];
        this.allProcessDefinitionNamesOption = {
            value: '',
            label: 'ADF_CLOUD_TASK_FILTERS.STATUS.ALL'
        };
        this.filterChange = new EventEmitter();
        this.onDestroy$ = new Subject();
        this.isLoading = false;
    }
    ngOnInit() {
        this.userPreferencesService
            .select(UserPreferenceValues.Locale)
            .pipe(takeUntil(this.onDestroy$))
            .subscribe(locale => this.dateAdapter.setLocale(locale));
    }
    ngOnChanges(changes) {
        const id = changes['id'];
        if (id && id.currentValue !== id.previousValue) {
            this.retrieveTaskFilterAndBuildForm();
        }
    }
    ngOnDestroy() {
        this.onDestroy$.next(true);
        this.onDestroy$.complete();
    }
    createFilterActions() {
        return [
            {
                actionType: BaseEditTaskFilterCloudComponent.ACTION_SAVE,
                icon: 'adf:save',
                tooltip: 'ADF_CLOUD_EDIT_TASK_FILTER.TOOL_TIP.SAVE'
            },
            {
                actionType: BaseEditTaskFilterCloudComponent.ACTION_SAVE_AS,
                icon: 'adf:save-as',
                tooltip: 'ADF_CLOUD_EDIT_TASK_FILTER.TOOL_TIP.SAVE_AS'
            },
            {
                actionType: BaseEditTaskFilterCloudComponent.ACTION_DELETE,
                icon: 'delete',
                tooltip: 'ADF_CLOUD_EDIT_TASK_FILTER.TOOL_TIP.DELETE'
            }
        ];
    }
    hasFormChanged(action) {
        if (action.actionType === BaseEditTaskFilterCloudComponent.ACTION_SAVE) {
            return !this.formHasBeenChanged;
        }
        if (action.actionType === BaseEditTaskFilterCloudComponent.ACTION_SAVE_AS) {
            return !this.formHasBeenChanged;
        }
        if (action.actionType === BaseEditTaskFilterCloudComponent.ACTION_DELETE) {
            return false;
        }
        return false;
    }
    onExpand() {
        this.toggleFilterActions = true;
    }
    onClose() {
        this.toggleFilterActions = false;
    }
    isDisabledAction(action) {
        return this.isDisabledForDefaultFilters(action) ? true : this.hasFormChanged(action);
    }
    deepCompare(left, right) {
        return JSON.stringify(left).toLowerCase() === JSON.stringify(right).toLowerCase();
    }
    getSanitizeFilterName(filterName) {
        const nameWithHyphen = this.replaceSpaceWithHyphen(filterName.trim());
        return nameWithHyphen.toLowerCase();
    }
    replaceSpaceWithHyphen(name) {
        const regExt = new RegExp(' ', 'g');
        return name.replace(regExt, '-');
    }
    executeFilterActions(action) {
        if (action.actionType === BaseEditTaskFilterCloudComponent.ACTION_SAVE) {
            this.save(action);
        }
        else if (action.actionType === BaseEditTaskFilterCloudComponent.ACTION_SAVE_AS) {
            this.saveAs(action);
        }
        else if (action.actionType === BaseEditTaskFilterCloudComponent.ACTION_DELETE) {
            this.delete(action);
        }
    }
    getRunningApplications() {
        this.appsProcessCloudService
            .getDeployedApplicationsByStatus(BaseEditTaskFilterCloudComponent.APP_RUNNING_STATUS, this.role)
            .subscribe((applications) => {
            if (applications && applications.length > 0) {
                applications.map((application) => {
                    this.applicationNames.push({ label: application.name, value: application.name });
                });
            }
        });
    }
    getProcessDefinitions() {
        this.taskCloudService.getProcessDefinitions(this.appName)
            .subscribe((processDefinitions) => {
            if (processDefinitions && processDefinitions.length > 0) {
                this.processDefinitionNames.push(this.allProcessDefinitionNamesOption);
                processDefinitions.map((processDefinition) => {
                    this.processDefinitionNames.push({ label: processDefinition.name, value: processDefinition.name });
                });
            }
        });
    }
    checkMandatoryActions() {
        if (this.actions === undefined || this.actions.length === 0) {
            this.actions = BaseEditTaskFilterCloudComponent.DEFAULT_ACTIONS;
        }
    }
    isValidAction(actions, action) {
        return actions ? actions.indexOf(action.actionType) >= 0 : true;
    }
    isFormValid() {
        return this.editTaskFilterForm.valid;
    }
    getPropertyController(property) {
        return this.editTaskFilterForm.get(property.key);
    }
    onDateChanged(newDateValue, dateProperty) {
        if (newDateValue) {
            const momentDate = moment$1(newDateValue, BaseEditTaskFilterCloudComponent.FORMAT_DATE, true);
            const controller = this.getPropertyController(dateProperty);
            if (momentDate.isValid()) {
                controller.setValue(momentDate.toISOString(true));
                controller.setErrors(null);
            }
            else {
                controller.setErrors({ invalid: true });
            }
        }
    }
    onDateRangeFilterChanged(dateRange, property) {
        var _a, _b;
        this.editTaskFilterForm.get((_a = property.attributes) === null || _a === void 0 ? void 0 : _a.from).setValue(dateRange.startDate ? dateRange.startDate : null);
        this.editTaskFilterForm.get((_b = property.attributes) === null || _b === void 0 ? void 0 : _b.to).setValue(dateRange.endDate ? dateRange.endDate : null);
        this.editTaskFilterForm.get(property.attributes.dateType).setValue(DateCloudFilterType.RANGE);
    }
    onChangedUser(users, userProperty) {
        let selectedUsers;
        if (userProperty.selectionMode === 'single') {
            selectedUsers = users[0];
        }
        else {
            selectedUsers = users;
        }
        this.getPropertyController(userProperty).setValue(selectedUsers);
    }
    onAssignedChange(assignedValue) {
        this.editTaskFilterForm.get('candidateGroups').setValue([]);
        this.editTaskFilterForm.get('assignee').setValue(assignedValue === null || assignedValue === void 0 ? void 0 : assignedValue.username);
    }
    onAssignedGroupsChange(groups) {
        this.editTaskFilterForm.get('assignee').setValue(null);
        this.editTaskFilterForm.get('candidateGroups').setValue(groups);
    }
    hasError(property) {
        const controller = this.getPropertyController(property);
        return controller.errors && controller.errors.invalid;
    }
    hasLastModifiedProperty() {
        return this.filterProperties.indexOf(BaseEditTaskFilterCloudComponent.LAST_MODIFIED) >= 0;
    }
    get createSortProperties() {
        this.checkMandatorySortProperties();
        return this.sortProperties.map((property) => {
            return { label: property, value: property };
        });
    }
    createAndFilterActions() {
        this.checkMandatoryActions();
        return this.createFilterActions().filter(action => this.isValidAction(this.actions, action));
    }
    isValidProperty(filterProperties, key) {
        return filterProperties ? filterProperties.indexOf(key) >= 0 : true;
    }
    checkForProperty(property) {
        return this.filterProperties ? this.filterProperties.indexOf(property) >= 0 : false;
    }
    hasSortProperty() {
        return this.filterProperties.indexOf(BaseEditTaskFilterCloudComponent.SORT) >= 0;
    }
    removeOrderProperty(filteredProperties) {
        if (filteredProperties && filteredProperties.length > 0) {
            return filteredProperties.filter(property => property.key !== BaseEditTaskFilterCloudComponent.ORDER);
        }
        return [];
    }
    createAndFilterProperties() {
        this.checkMandatoryFilterProperties();
        if (this.checkForProperty(BaseEditTaskFilterCloudComponent.APPLICATION_NAME)) {
            this.applicationNames = [];
            this.getRunningApplications();
        }
        if (this.checkForProperty(BaseEditTaskFilterCloudComponent.PROCESS_DEFINITION_NAME)) {
            this.processDefinitionNames = [];
            this.getProcessDefinitions();
        }
        const defaultProperties = this.createTaskFilterProperties();
        let filteredProperties = defaultProperties.filter((filterProperty) => this.isValidProperty(this.filterProperties, filterProperty.key));
        if (!this.hasSortProperty()) {
            filteredProperties = this.removeOrderProperty(filteredProperties);
        }
        return filteredProperties;
    }
    onFilterChange() {
        this.editTaskFilterForm.valueChanges
            .pipe(debounceTime(500), filter(() => this.isFormValid()), takeUntil(this.onDestroy$))
            .subscribe((formValues) => {
            this.assignNewFilter(formValues);
        });
    }
    getFormControlsConfig(taskFilterProperties) {
        const properties = taskFilterProperties.map((property) => {
            if (!!property.attributes) {
                return this.getAttributesControlConfig(property);
            }
            else {
                return { [property.key]: property.value };
            }
        });
        return properties.reduce(((result, current) => Object.assign(result, current)), {});
    }
    getAttributesControlConfig(property) {
        return Object.values(property.attributes).reduce((result, key) => {
            result[key] = property.value[key];
            return result;
        }, {});
    }
    buildForm(taskFilterProperties) {
        this.formHasBeenChanged = false;
        this.editTaskFilterForm = this.formBuilder.group(this.getFormControlsConfig(taskFilterProperties));
        this.onFilterChange();
    }
    onDateTypeChange(dateType, property) {
        this.editTaskFilterForm.get(property.attributes.dateType).setValue(dateType);
    }
    retrieveTaskFilterAndBuildForm() {
        this.isLoading = true;
        this.getTaskFilterById(this.appName, this.id)
            .pipe(finalize(() => this.isLoading = false), takeUntil(this.onDestroy$))
            .subscribe(response => {
            this.taskFilter = response;
            this.taskFilterProperties = this.createAndFilterProperties();
            this.taskFilterActions = this.createAndFilterActions();
            this.buildForm(this.taskFilterProperties);
        });
    }
    delete(deleteAction) {
        this.deleteFilter(this.taskFilter)
            .pipe(filter((filters) => {
            deleteAction.filter = this.taskFilter;
            this.action.emit(deleteAction);
            return filters.length === 0;
        }), switchMap(() => this.restoreDefaultTaskFilters()), takeUntil(this.onDestroy$))
            .subscribe(() => { });
    }
    save(saveAction) {
        this.updateFilter(this.changedTaskFilter)
            .pipe(takeUntil(this.onDestroy$))
            .subscribe(() => {
            saveAction.filter = this.changedTaskFilter;
            this.action.emit(saveAction);
            this.formHasBeenChanged = this.deepCompare(this.changedTaskFilter, this.taskFilter);
        });
    }
    saveAs(saveAsAction) {
        var _a;
        const dialogRef = this.dialog.open(TaskFilterDialogCloudComponent, {
            data: {
                name: this.translateService.instant((_a = this.taskFilter) === null || _a === void 0 ? void 0 : _a.name)
            },
            height: 'auto',
            minWidth: '30%'
        });
        dialogRef.afterClosed().subscribe((result) => {
            if (result && result.action === TaskFilterDialogCloudComponent.ACTION_SAVE) {
                const filterId = Math.random().toString(36).substr(2, 9);
                const filterKey = this.getSanitizeFilterName(result.name);
                const newFilter = {
                    name: result.name,
                    icon: result.icon,
                    id: filterId,
                    key: 'custom-' + filterKey
                };
                const resultFilter = Object.assign({}, this.changedTaskFilter, newFilter);
                this.addFilter(resultFilter).subscribe(() => {
                    saveAsAction.filter = resultFilter;
                    this.action.emit(saveAsAction);
                });
            }
        });
    }
    checkMandatoryFilterProperties() {
        if (this.filterProperties === undefined || this.filterProperties.length === 0) {
            this.filterProperties = this.getDefaultFilterProperties();
        }
    }
    checkMandatorySortProperties() {
        if (this.sortProperties === undefined || this.sortProperties.length === 0) {
            this.sortProperties = this.getDefaultSortProperties();
        }
    }
}
BaseEditTaskFilterCloudComponent.ɵfac = function BaseEditTaskFilterCloudComponent_Factory(t) { return new (t || BaseEditTaskFilterCloudComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc17.FormBuilder), ɵngcc0.ɵɵdirectiveInject(ɵngcc8.DateAdapter), ɵngcc0.ɵɵdirectiveInject(ɵngcc6.UserPreferencesService), ɵngcc0.ɵɵdirectiveInject(AppsProcessCloudService), ɵngcc0.ɵɵdirectiveInject(TaskCloudService), ɵngcc0.ɵɵdirectiveInject(ɵngcc23.MatDialog), ɵngcc0.ɵɵdirectiveInject(ɵngcc6.TranslationService)); };
BaseEditTaskFilterCloudComponent.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: BaseEditTaskFilterCloudComponent, inputs: { appName: "appName", showTitle: "showTitle", showTaskFilterName: "showTaskFilterName", filterProperties: "filterProperties", role: "role", showFilterActions: "showFilterActions", actions: "actions", sortProperties: "sortProperties", id: "id" }, outputs: { action: "action", filterChange: "filterChange" }, features: [ɵngcc0.ɵɵNgOnChangesFeature] });
BaseEditTaskFilterCloudComponent.ACTION_SAVE = 'save';
BaseEditTaskFilterCloudComponent.ACTION_SAVE_AS = 'saveAs';
BaseEditTaskFilterCloudComponent.ACTION_DELETE = 'delete';
BaseEditTaskFilterCloudComponent.APP_RUNNING_STATUS = 'RUNNING';
BaseEditTaskFilterCloudComponent.APPLICATION_NAME = 'appName';
BaseEditTaskFilterCloudComponent.PROCESS_DEFINITION_NAME = 'processDefinitionName';
BaseEditTaskFilterCloudComponent.LAST_MODIFIED = 'lastModified';
BaseEditTaskFilterCloudComponent.SORT = 'sort';
BaseEditTaskFilterCloudComponent.ORDER = 'order';
BaseEditTaskFilterCloudComponent.DEFAULT_ACTIONS = ['save', 'saveAs', 'delete'];
BaseEditTaskFilterCloudComponent.FORMAT_DATE = 'DD/MM/YYYY';
BaseEditTaskFilterCloudComponent.ACTIONS_DISABLED_BY_DEFAULT = [
    BaseEditTaskFilterCloudComponent.ACTION_SAVE,
    BaseEditTaskFilterCloudComponent.ACTION_DELETE
];
BaseEditTaskFilterCloudComponent.ctorParameters = () => [
    { type: FormBuilder },
    { type: DateAdapter },
    { type: UserPreferencesService },
    { type: AppsProcessCloudService },
    { type: TaskCloudService },
    { type: MatDialog },
    { type: TranslationService }
];
BaseEditTaskFilterCloudComponent.propDecorators = {
    appName: [{ type: Input }],
    id: [{ type: Input }],
    showTitle: [{ type: Input }],
    showTaskFilterName: [{ type: Input }],
    filterProperties: [{ type: Input }],
    role: [{ type: Input }],
    showFilterActions: [{ type: Input }],
    actions: [{ type: Input }],
    sortProperties: [{ type: Input }],
    action: [{ type: Output }],
    filterChange: [{ type: Output }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(BaseEditTaskFilterCloudComponent, [{
        type: Directive
    }], function () { return [{ type: ɵngcc17.FormBuilder }, { type: ɵngcc8.DateAdapter }, { type: ɵngcc6.UserPreferencesService }, { type: AppsProcessCloudService }, { type: TaskCloudService }, { type: ɵngcc23.MatDialog }, { type: ɵngcc6.TranslationService }]; }, { appName: [{
            type: Input
        }], showTitle: [{
            type: Input
        }], showTaskFilterName: [{
            type: Input
        }], filterProperties: [{
            type: Input
        }], role: [{
            type: Input
        }], showFilterActions: [{
            type: Input
        }], actions: [{
            type: Input
        }], sortProperties: [{
            type: Input
        }], action: [{
            type: Output
        }], filterChange: [{
            type: Output
        }], id: [{
            type: Input
        }] }); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class EditServiceTaskFilterCloudComponent extends BaseEditTaskFilterCloudComponent {
    constructor(formBuilder, dialog, translateService, serviceTaskFilterCloudService, dateAdapter, userPreferencesService, appsProcessCloudService, taskCloudService) {
        super(formBuilder, dateAdapter, userPreferencesService, appsProcessCloudService, taskCloudService, dialog, translateService);
        this.serviceTaskFilterCloudService = serviceTaskFilterCloudService;
    }
    assignNewFilter(model) {
        this.changedTaskFilter = Object.assign(Object.assign({}, this.taskFilter), model);
        this.formHasBeenChanged = !this.deepCompare(this.changedTaskFilter, this.taskFilter);
        this.filterChange.emit(this.changedTaskFilter);
    }
    getTaskFilterById(appName, id) {
        return this.serviceTaskFilterCloudService.getTaskFilterById(appName, id);
    }
    getDefaultFilterProperties() {
        return ['appName', 'activityName', 'status', 'sort', 'order'];
    }
    getDefaultSortProperties() {
        return ['id', 'activityName', 'startedDate', 'completedDate'];
    }
    updateFilter(filterToUpdate) {
        return this.serviceTaskFilterCloudService.updateFilter(filterToUpdate);
    }
    deleteFilter(filterToDelete) {
        return this.serviceTaskFilterCloudService.deleteFilter(filterToDelete);
    }
    addFilter(filterToAdd) {
        return this.serviceTaskFilterCloudService
            .addFilter(filterToAdd)
            .pipe(takeUntil(this.onDestroy$));
    }
    isDisabledForDefaultFilters(action) {
        return (this.serviceTaskFilterCloudService.isDefaultFilter(this.taskFilter.name) &&
            EditServiceTaskFilterCloudComponent.ACTIONS_DISABLED_BY_DEFAULT.includes(action.actionType));
    }
    restoreDefaultTaskFilters() {
        return this.serviceTaskFilterCloudService.getTaskListFilters(this.appName);
    }
    getStatusOptions() {
        return [
            { value: '', label: 'ADF_CLOUD_SERVICE_TASK_FILTERS.STATUS.ALL' },
            { value: 'STARTED', label: 'ADF_CLOUD_SERVICE_TASK_FILTERS.STATUS.STARTED' },
            { value: 'COMPLETED', label: 'ADF_CLOUD_SERVICE_TASK_FILTERS.STATUS.COMPLETED' },
            { value: 'CANCELLED', label: 'ADF_CLOUD_SERVICE_TASK_FILTERS.STATUS.CANCELLED' },
            { value: 'ERROR', label: 'ADF_CLOUD_SERVICE_TASK_FILTERS.STATUS.ERROR' }
        ];
    }
    createTaskFilterProperties() {
        const statusOptions = this.getStatusOptions();
        return [
            {
                label: 'ADF_CLOUD_EDIT_SERVICE_TASK_FILTER.LABEL.APP_NAME',
                type: 'select',
                key: 'appName',
                value: this.taskFilter.appName || '',
                options: this.applicationNames
            },
            {
                label: 'ADF_CLOUD_EDIT_SERVICE_TASK_FILTER.LABEL.SERVICE_TASK_ID',
                type: 'text',
                key: 'serviceTaskId',
                value: this.taskFilter.serviceTaskId || ''
            },
            {
                label: 'ADF_CLOUD_EDIT_SERVICE_TASK_FILTER.LABEL.ELEMENT_ID',
                type: 'text',
                key: 'elementId',
                value: this.taskFilter.elementId || ''
            },
            {
                label: 'ADF_CLOUD_EDIT_SERVICE_TASK_FILTER.LABEL.ACTIVITY_NAME',
                type: 'text',
                key: 'activityName',
                value: this.taskFilter.activityName || ''
            },
            {
                label: 'ADF_CLOUD_EDIT_SERVICE_TASK_FILTER.LABEL.ACTIVITY_TYPE',
                type: 'text',
                key: 'activityType',
                value: this.taskFilter.activityType || ''
            },
            {
                label: 'ADF_CLOUD_EDIT_SERVICE_TASK_FILTER.LABEL.SORT',
                type: 'select',
                key: 'sort',
                value: this.taskFilter.sort || this.createSortProperties[0].value,
                options: this.createSortProperties
            },
            {
                label: 'ADF_CLOUD_EDIT_SERVICE_TASK_FILTER.LABEL.DIRECTION',
                type: 'select',
                key: 'order',
                value: this.taskFilter.order || this.sortDirections[0].value,
                options: [...this.sortDirections]
            },
            {
                label: 'ADF_CLOUD_EDIT_SERVICE_TASK_FILTER.LABEL.STATUS',
                type: 'select',
                key: 'status',
                value: this.taskFilter.status || statusOptions[0].value,
                options: statusOptions
            },
            {
                label: 'ADF_CLOUD_EDIT_SERVICE_TASK_FILTER.LABEL.STARTED_DATE',
                type: 'date',
                key: 'startedDate',
                value: this.taskFilter.completedDate || false
            },
            {
                label: 'ADF_CLOUD_EDIT_SERVICE_TASK_FILTER.LABEL.COMPLETED_DATE',
                type: 'date',
                key: 'completedDate',
                value: this.taskFilter.completedDate || false
            },
            {
                label: 'ADF_CLOUD_EDIT_SERVICE_TASK_FILTER.LABEL.PROCESS_INSTANCE_ID',
                type: 'text',
                key: 'processInstanceId',
                value: this.taskFilter.processInstanceId || ''
            },
            {
                label: 'ADF_CLOUD_EDIT_SERVICE_TASK_FILTER.LABEL.PROCESS_DEF_ID',
                type: 'text',
                key: 'processDefinitionId',
                value: this.taskFilter.processDefinitionId || ''
            },
            {
                label: 'ADF_CLOUD_EDIT_SERVICE_TASK_FILTER.LABEL.SERVICE_NAME',
                type: 'text',
                key: 'serviceName',
                value: this.taskFilter.serviceName || ''
            }
        ];
    }
}
EditServiceTaskFilterCloudComponent.ɵfac = function EditServiceTaskFilterCloudComponent_Factory(t) { return new (t || EditServiceTaskFilterCloudComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc17.FormBuilder), ɵngcc0.ɵɵdirectiveInject(ɵngcc23.MatDialog), ɵngcc0.ɵɵdirectiveInject(ɵngcc6.TranslationService), ɵngcc0.ɵɵdirectiveInject(ServiceTaskFilterCloudService), ɵngcc0.ɵɵdirectiveInject(ɵngcc8.DateAdapter), ɵngcc0.ɵɵdirectiveInject(ɵngcc6.UserPreferencesService), ɵngcc0.ɵɵdirectiveInject(AppsProcessCloudService), ɵngcc0.ɵɵdirectiveInject(TaskCloudService)); };
EditServiceTaskFilterCloudComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: EditServiceTaskFilterCloudComponent, selectors: [["adf-cloud-edit-service-task-filter"]], features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 4, vars: 3, consts: [[3, "hideToggle"], [3, "afterExpand", "closed"], ["id", "adf-edit-task-filter-expansion-header", 4, "ngIf"], [4, "ngIf"], ["id", "adf-edit-task-filter-expansion-header"], [4, "ngIf", "ngIfElse"], ["loadingTemplate", ""], ["fxLayoutAlign", "space-between center", "id", "adf-edit-task-filter-title-id", 4, "ngIf"], ["fxLayoutAlign", "space-between center", "id", "adf-edit-task-filter-sub-title-id"], ["class", "adf-cloud-edit-task-filter-actions", 4, "ngIf"], ["fxLayoutAlign", "space-between center", "id", "adf-edit-task-filter-title-id"], [1, "adf-cloud-edit-task-filter-actions"], ["mat-icon-button", "", 3, "matTooltip", "disabled", "click", 4, "ngFor", "ngForOf"], ["mat-icon-button", "", 3, "matTooltip", "disabled", "click"], [3, "value"], [1, "adf-cloud-edit-task-filter-loading-margin"], [3, "diameter"], [3, "formGroup", 4, "ngIf"], [3, "formGroup"], ["fxLayout", "row wrap", "fxLayout.xs", "column", "fxLayoutGap", "10px", "fxLayoutAlign", "start center"], [4, "ngFor", "ngForOf"], ["fxFlex", "23%", 3, "floatLabel", 4, "ngIf"], ["class", "adf-edit-task-filter-checkbox", 4, "ngIf"], [3, "processFilterProperty", "options", "dateTypeChange", "dateChanged", 4, "ngIf"], ["fxFlex", "23%", 3, "class", 4, "ngIf"], ["fxFlex", "23%", 3, "taskFilterProperty", "assignedChange", "assignedGroupChange", 4, "ngIf"], ["fxFlex", "23%", 3, "floatLabel"], [3, "placeholder", "formControlName"], [3, "value", 4, "ngFor", "ngForOf"], ["matInput", "", "type", "text", 3, "formControlName", "placeholder"], ["matInput", "", 3, "matDatepicker", "placeholder", "keyup", "dateChange"], ["matSuffix", "", 3, "for"], ["dateController", ""], [1, "adf-edit-task-filter-date-error-container"], [1, "adf-error-text"], [1, "adf-error-icon"], [1, "adf-edit-task-filter-checkbox"], ["color", "primary", 3, "formControlName"], [3, "processFilterProperty", "options", "dateTypeChange", "dateChanged"], ["dateRange", ""], ["fxFlex", "23%"], [3, "preSelectUsers", "title", "validate", "appName", "mode", "changedUsers"], ["fxFlex", "23%", 3, "taskFilterProperty", "assignedChange", "assignedGroupChange"]], template: function EditServiceTaskFilterCloudComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "mat-accordion", 0);
        ɵngcc0.ɵɵelementStart(1, "mat-expansion-panel", 1);
        ɵngcc0.ɵɵlistener("afterExpand", function EditServiceTaskFilterCloudComponent_Template_mat_expansion_panel_afterExpand_1_listener() { return ctx.onExpand(); })("closed", function EditServiceTaskFilterCloudComponent_Template_mat_expansion_panel_closed_1_listener() { return ctx.onClose(); });
        ɵngcc0.ɵɵtemplate(2, EditServiceTaskFilterCloudComponent_mat_expansion_panel_header_2_Template, 4, 2, "mat-expansion-panel-header", 2);
        ɵngcc0.ɵɵtemplate(3, EditServiceTaskFilterCloudComponent_ng_container_3_Template, 2, 1, "ng-container", 3);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("hideToggle", ctx.isLoading);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.taskFilter);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.isLoading);
    } }, directives: function () { return [ɵngcc24.MatAccordion, ɵngcc24.MatExpansionPanel, ɵngcc3.NgIf, ɵngcc24.MatExpansionPanelHeader, ɵngcc24.MatExpansionPanelDescription, ɵngcc2.DefaultLayoutAlignDirective, ɵngcc24.MatExpansionPanelTitle, ɵngcc3.NgForOf, ɵngcc13.MatButton, ɵngcc20.MatTooltip, ɵngcc6.IconComponent, ɵngcc9.MatSpinner, ɵngcc17.ɵangular_packages_forms_forms_y, ɵngcc17.NgControlStatusGroup, ɵngcc17.FormGroupDirective, ɵngcc2.DefaultLayoutDirective, ɵngcc2.DefaultLayoutGapDirective, ɵngcc14.MatFormField, ɵngcc2.DefaultFlexDirective, ɵngcc15.MatSelect, ɵngcc17.NgControlStatus, ɵngcc17.FormControlName, ɵngcc8.MatOption, ɵngcc21.MatInput, ɵngcc17.DefaultValueAccessor, ɵngcc14.MatLabel, ɵngcc16.MatDatepickerInput, ɵngcc16.MatDatepickerToggle, ɵngcc14.MatSuffix, ɵngcc16.MatDatepicker, ɵngcc5.MatIcon, ɵngcc25.MatCheckbox, DateRangeFilterComponent, PeopleCloudComponent, TaskAssignmentFilterCloudComponent]; }, pipes: function () { return [ɵngcc10.TranslatePipe]; }, styles: [_c7], encapsulation: 2 });
EditServiceTaskFilterCloudComponent.ctorParameters = () => [
    { type: FormBuilder },
    { type: MatDialog },
    { type: TranslationService },
    { type: ServiceTaskFilterCloudService },
    { type: DateAdapter },
    { type: UserPreferencesService },
    { type: AppsProcessCloudService },
    { type: TaskCloudService }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(EditServiceTaskFilterCloudComponent, [{
        type: Component,
        args: [{
                selector: 'adf-cloud-edit-service-task-filter',
                template: "<mat-accordion [hideToggle]=\"isLoading\">\n    <mat-expansion-panel (afterExpand)=\"onExpand()\" (closed)=\"onClose()\">\n        <mat-expansion-panel-header *ngIf=\"taskFilter\" id=\"adf-edit-task-filter-expansion-header\">\n            <ng-container *ngIf=\"!isLoading; else loadingTemplate\">\n                <mat-panel-title *ngIf=\"showTaskFilterName\" fxLayoutAlign=\"space-between center\" id=\"adf-edit-task-filter-title-id\"\n                    >{{taskFilter.name | translate}}</mat-panel-title>\n                <mat-panel-description fxLayoutAlign=\"space-between center\" id=\"adf-edit-task-filter-sub-title-id\">\n                    <span *ngIf=\"showTitle\">{{ 'ADF_CLOUD_EDIT_TASK_FILTER.TITLE' | translate}}</span>\n                    <div *ngIf=\"showFilterActions\" class=\"adf-cloud-edit-task-filter-actions\">\n                        <ng-container *ngIf=\"toggleFilterActions\">\n                            <button *ngFor=\"let filterAction of taskFilterActions\"\n                                    mat-icon-button\n                                    matTooltip=\"{{ filterAction.tooltip | translate}}\"\n                                    [attr.data-automation-id]=\"'adf-filter-action-' + filterAction.actionType\"\n                                    [disabled]=\"isDisabledAction(filterAction)\"\n                                    (click)=\"executeFilterActions(filterAction)\">\n                                <adf-icon [value]=\"filterAction.icon\"></adf-icon>\n                            </button>\n                        </ng-container>\n                    </div>\n                </mat-panel-description>\n            </ng-container>\n            <ng-template #loadingTemplate>\n                <div class=\"adf-cloud-edit-task-filter-loading-margin\">\n                    <mat-spinner [diameter]=\"30\"></mat-spinner>\n                </div>\n            </ng-template>\n        </mat-expansion-panel-header>\n        <ng-container *ngIf=\"!isLoading;\">\n            <form *ngIf=\"editTaskFilterForm\" [formGroup]=\"editTaskFilterForm\">\n                <div fxLayout=\"row wrap\" fxLayout.xs=\"column\" fxLayoutGap=\"10px\" fxLayoutAlign=\"start center\">\n                    <ng-container *ngFor=\"let taskFilterProperty of taskFilterProperties\">\n                        <mat-form-field fxFlex=\"23%\"\n                                        [floatLabel]=\"'auto'\"\n                                        *ngIf=\"taskFilterProperty.type === 'select'\"\n                                        [attr.data-automation-id]=\"taskFilterProperty.key\">\n                            <mat-select placeholder=\"{{taskFilterProperty.label | translate}}\"\n                                        [formControlName]=\"taskFilterProperty.key\"\n                                        [attr.data-automation-id]=\"'adf-cloud-edit-task-property-' + taskFilterProperty.key\">\n                                <mat-option *ngFor=\"let propertyOption of taskFilterProperty.options\"\n                                            [value]=\"propertyOption.value\"\n                                            [attr.data-automation-id]=\"'adf-cloud-edit-task-property-options-' + taskFilterProperty.key\">\n                                    {{ propertyOption.label | translate }}\n                                </mat-option>\n                            </mat-select>\n                        </mat-form-field>\n                        <mat-form-field fxFlex=\"23%\"\n                                        [floatLabel]=\"'auto'\"\n                                        *ngIf=\"taskFilterProperty.type === 'text'\"\n                                        [attr.data-automation-id]=\"taskFilterProperty.key\">\n                            <input matInput\n                                   [formControlName]=\"taskFilterProperty.key\"\n                                   type=\"text\"\n                                   placeholder=\"{{taskFilterProperty.label | translate}}\"\n                                   [attr.data-automation-id]=\"'adf-cloud-edit-task-property-' + taskFilterProperty.key\" />\n                        </mat-form-field>\n                        <mat-form-field fxFlex=\"23%\"\n                                        [floatLabel]=\"'auto'\"\n                                        *ngIf=\"taskFilterProperty.type === 'date'\"\n                                        [attr.data-automation-id]=\"taskFilterProperty.key\">\n                            <mat-label>{{taskFilterProperty.label | translate}}</mat-label>\n                            <input matInput\n                                   (keyup)=\"onDateChanged($any($event).srcElement.value, taskFilterProperty)\"\n                                   (dateChange)=\"onDateChanged($event.value, taskFilterProperty)\"\n                                   [matDatepicker]=\"dateController\"\n                                   placeholder=\"{{taskFilterProperty.label | translate}}\"\n                                   [attr.data-automation-id]=\"'adf-cloud-edit-task-property-' + taskFilterProperty.key\">\n                            <mat-datepicker-toggle matSuffix\n                                                   [for]=\"dateController\"\n                                                   [attr.data-automation-id]=\"'adf-cloud-edit-task-property-date-toggle-' + taskFilterProperty.key\">\n                            </mat-datepicker-toggle>\n                            <mat-datepicker #dateController\n                                            [attr.data-automation-id]=\"'adf-cloud-edit-task-property-date-picker-' + taskFilterProperty.key\">\n                            </mat-datepicker>\n                            <div class=\"adf-edit-task-filter-date-error-container\">\n                                <div *ngIf=\"hasError(taskFilterProperty)\">\n                                    <div class=\"adf-error-text\">{{'ADF_TASK_LIST.START_TASK.FORM.ERROR.DATE'|translate}}</div>\n                                    <mat-icon class=\"adf-error-icon\">warning</mat-icon>\n                                </div>\n                            </div>\n                        </mat-form-field>\n                        <div class=\"adf-edit-task-filter-checkbox\"\n                             *ngIf=\"taskFilterProperty.type === 'checkbox'\">\n                            <mat-checkbox color=\"primary\"\n                                          [formControlName]=\"taskFilterProperty.key\"\n                                          [attr.data-automation-id]=\"taskFilterProperty.key\"\n                            >{{taskFilterProperty.label | translate}}</mat-checkbox>\n                        </div>\n\n                        <adf-cloud-date-range-filter #dateRange\n                            *ngIf=\"taskFilterProperty.type === 'date-range'\"\n                            [processFilterProperty]=\"taskFilterProperty\"\n                            [options]=\"taskFilterProperty.dateFilterOptions\"\n                            (dateTypeChange)=\"onDateTypeChange($event, taskFilterProperty)\"\n                            (dateChanged)=\"onDateRangeFilterChanged($event, taskFilterProperty)\">\n                        </adf-cloud-date-range-filter>\n\n                        <div fxFlex=\"23%\" class=\"{{ 'adf-edit-task-filter-' + taskFilterProperty.key }}\" *ngIf=\"taskFilterProperty.type === 'people'\">\n                            <adf-cloud-people\n                                [preSelectUsers]=\"taskFilterProperty.value\"\n                                [title]=\"taskFilterProperty.label\"\n                                [validate]=\"true\"\n                                [appName]=\"appName\"\n                                [mode]=\"taskFilterProperty.selectionMode\"\n                                (changedUsers)=\"onChangedUser($event, taskFilterProperty)\">\n                            </adf-cloud-people>\n                        </div>\n\n                        <adf-cloud-task-assignment-filter fxFlex=\"23%\"\n                            *ngIf=\"taskFilterProperty.type === 'assignment'\"\n                            [taskFilterProperty]=\"taskFilterProperty\"\n                            (assignedChange)=\"onAssignedChange($event)\"\n                            (assignedGroupChange)=\"onAssignedGroupsChange($event)\">\n                        </adf-cloud-task-assignment-filter>\n                    </ng-container>\n                </div>\n            </form>\n        </ng-container>\n    </mat-expansion-panel>\n</mat-accordion>\n",
                encapsulation: ViewEncapsulation.None,
                styles: [".adf-edit-task-filter-checkbox{flex:1 23%;font-size:16px;padding-top:10px;text-align:center}.adf-edit-task-filter-date-error-container{height:20px;margin-top:12px;position:absolute;width:100%}.adf-edit-task-filter-date-error-container>div{display:flex;flex-flow:row;justify-content:flex-start}.adf-edit-task-filter-date-error-container .adf-error-text{color:var(--theme-warn-color);font-size:10px;height:16px;line-height:1.33;padding-right:8px;width:auto}.adf-edit-task-filter-date-error-container .adf-error-icon{color:var(--theme-warn-color);font-size:16px}.adf-edit-task-filter-dateRange mat-grid-list{width:450px}.adf-cloud-edit-task-filter-loading-margin{margin-left:calc(50% - 50px);margin-right:calc(50% - 50px)}"]
            }]
    }], function () { return [{ type: ɵngcc17.FormBuilder }, { type: ɵngcc23.MatDialog }, { type: ɵngcc6.TranslationService }, { type: ServiceTaskFilterCloudService }, { type: ɵngcc8.DateAdapter }, { type: ɵngcc6.UserPreferencesService }, { type: AppsProcessCloudService }, { type: TaskCloudService }]; }, null); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class EditTaskFilterCloudComponent extends BaseEditTaskFilterCloudComponent {
    constructor(formBuilder, dialog, translateService, taskFilterCloudService, dateAdapter, userPreferencesService, appsProcessCloudService, taskCloudService) {
        super(formBuilder, dateAdapter, userPreferencesService, appsProcessCloudService, taskCloudService, dialog, translateService);
        this.taskFilterCloudService = taskFilterCloudService;
    }
    assignNewFilter(model) {
        this.setLastModifiedToFilter(model);
        this.changedTaskFilter = new TaskFilterCloudModel(Object.assign({}, this.taskFilter, model));
        this.formHasBeenChanged = !this.deepCompare(this.changedTaskFilter, this.taskFilter);
        this.filterChange.emit(this.changedTaskFilter);
    }
    getTaskFilterById(appName, id) {
        return this.taskFilterCloudService
            .getTaskFilterById(appName, id)
            .pipe(map(response => new TaskFilterCloudModel(response)));
    }
    createAndFilterProperties() {
        const result = super.createAndFilterProperties();
        if (this.hasLastModifiedProperty()) {
            return [
                ...result,
                ...this.createLastModifiedProperty()
            ];
        }
        return result;
    }
    getDefaultFilterProperties() {
        return ['status', 'assignee', 'sort', 'order'];
    }
    getDefaultSortProperties() {
        return ['id', 'name', 'createdDate', 'priority'];
    }
    setLastModifiedToFilter(formValues) {
        if (formValues.lastModifiedTo && Date.parse(formValues.lastModifiedTo.toString())) {
            const lastModifiedToFilterValue = moment(formValues.lastModifiedTo);
            lastModifiedToFilterValue.set({
                hour: 23,
                minute: 59,
                second: 59
            });
            formValues.lastModifiedTo = lastModifiedToFilterValue.toISOString(true);
        }
    }
    updateFilter(filterToUpdate) {
        return this.taskFilterCloudService.updateFilter(filterToUpdate);
    }
    deleteFilter(filterToDelete) {
        return this.taskFilterCloudService.deleteFilter(filterToDelete);
    }
    addFilter(filterToAdd) {
        return this.taskFilterCloudService
            .addFilter(filterToAdd)
            .pipe(takeUntil(this.onDestroy$));
    }
    isDisabledForDefaultFilters(action) {
        return (this.taskFilterCloudService.isDefaultFilter(this.taskFilter.name) &&
            EditTaskFilterCloudComponent.ACTIONS_DISABLED_BY_DEFAULT.includes(action.actionType));
    }
    restoreDefaultTaskFilters() {
        return this.taskFilterCloudService.getTaskListFilters(this.appName);
    }
    createLastModifiedProperty() {
        return [
            {
                label: 'ADF_CLOUD_EDIT_TASK_FILTER.LABEL.LAST_MODIFIED_FROM',
                type: 'date',
                key: 'lastModifiedFrom',
                value: ''
            },
            {
                label: 'ADF_CLOUD_EDIT_TASK_FILTER.LABEL.LAST_MODIFIED_TO',
                type: 'date',
                key: 'lastModifiedTo',
                value: ''
            }
        ];
    }
    getStatusOptions() {
        return [
            { value: '', label: 'ADF_CLOUD_TASK_FILTERS.STATUS.ALL' },
            { value: 'CREATED', label: 'ADF_CLOUD_TASK_FILTERS.STATUS.CREATED' },
            { value: 'ASSIGNED', label: 'ADF_CLOUD_TASK_FILTERS.STATUS.ASSIGNED' },
            { value: 'SUSPENDED', label: 'ADF_CLOUD_TASK_FILTERS.STATUS.SUSPENDED' },
            { value: 'CANCELLED', label: 'ADF_CLOUD_TASK_FILTERS.STATUS.CANCELLED' },
            { value: 'COMPLETED', label: 'ADF_CLOUD_TASK_FILTERS.STATUS.COMPLETED' }
        ];
    }
    createTaskFilterProperties() {
        const statusOptions = this.getStatusOptions();
        const sortProperties = this.createSortProperties;
        return [
            {
                label: 'ADF_CLOUD_EDIT_TASK_FILTER.LABEL.APP_NAME',
                type: 'select',
                key: 'appName',
                value: this.taskFilter.appName || '',
                options: this.applicationNames
            },
            {
                label: 'ADF_CLOUD_EDIT_TASK_FILTER.LABEL.TASK_ID',
                type: 'text',
                key: 'taskId',
                value: ''
            },
            {
                label: 'ADF_CLOUD_EDIT_TASK_FILTER.LABEL.STATUS',
                type: 'select',
                key: 'status',
                value: this.taskFilter.status || statusOptions[0].value,
                options: statusOptions
            },
            {
                label: 'ADF_CLOUD_EDIT_TASK_FILTER.LABEL.ASSIGNMENT',
                type: 'text',
                key: 'assignee',
                value: this.taskFilter.assignee || ''
            },
            {
                label: 'ADF_CLOUD_EDIT_TASK_FILTER.LABEL.PROCESS_DEF_NAME',
                type: 'select',
                key: 'processDefinitionName',
                value: this.taskFilter.processDefinitionName || '',
                options: this.processDefinitionNames
            },
            {
                label: 'ADF_CLOUD_EDIT_TASK_FILTER.LABEL.PROCESS_INSTANCE_ID',
                type: 'text',
                key: 'processInstanceId',
                value: this.taskFilter.processInstanceId || ''
            },
            {
                label: 'ADF_CLOUD_EDIT_TASK_FILTER.LABEL.PROCESS_DEF_ID',
                type: 'text',
                key: 'processDefinitionId',
                value: this.taskFilter.processDefinitionId || ''
            },
            {
                label: 'ADF_CLOUD_EDIT_TASK_FILTER.LABEL.TASK_NAME',
                type: 'text',
                key: 'taskName',
                value: this.taskFilter.taskName || ''
            },
            {
                label: 'ADF_CLOUD_EDIT_TASK_FILTER.LABEL.PARENT_TASK_ID',
                type: 'text',
                key: 'parentTaskId',
                value: this.taskFilter.parentTaskId || ''
            },
            {
                label: 'ADF_CLOUD_EDIT_TASK_FILTER.LABEL.PRIORITY',
                type: 'select',
                key: 'priority',
                value: this.taskFilter.priority || '',
                options: this.taskCloudService.priorities
            },
            {
                label: 'ADF_CLOUD_EDIT_TASK_FILTER.LABEL.OWNER',
                type: 'text',
                key: 'owner',
                value: this.taskFilter.owner || ''
            },
            {
                label: 'ADF_CLOUD_EDIT_TASK_FILTER.LABEL.CREATED_DATE',
                type: 'date',
                key: 'createdDate',
                value: ''
            },
            {
                label: 'ADF_CLOUD_EDIT_TASK_FILTER.LABEL.SORT',
                type: 'select',
                key: 'sort',
                value: this.taskFilter.sort || sortProperties[0].value,
                options: sortProperties
            },
            {
                label: 'ADF_CLOUD_EDIT_TASK_FILTER.LABEL.DIRECTION',
                type: 'select',
                key: 'order',
                value: this.taskFilter.order || this.sortDirections[0].value,
                options: [...this.sortDirections]
            },
            {
                label: 'ADF_CLOUD_EDIT_TASK_FILTER.LABEL.STAND_ALONE',
                type: 'checkbox',
                key: 'standalone',
                value: this.taskFilter.standalone || false
            },
            {
                label: 'ADF_CLOUD_EDIT_TASK_FILTER.LABEL.DUE_DATE',
                type: 'date-range',
                key: 'dueDateRange',
                attributes: { dateType: 'dueDateType', from: '_dueDateFrom', to: '_dueDateTo' },
                value: {
                    dueDateType: this.taskFilter.dueDateType || null,
                    _dueDateFrom: this.taskFilter.dueDateFrom || null,
                    _dueDateTo: this.taskFilter.dueDateTo || null
                },
                dateFilterOptions: [
                    DateCloudFilterType.NO_DATE,
                    DateCloudFilterType.TODAY,
                    DateCloudFilterType.TOMORROW,
                    DateCloudFilterType.NEXT_7_DAYS,
                    DateCloudFilterType.RANGE
                ]
            },
            {
                label: 'ADF_CLOUD_EDIT_TASK_FILTER.LABEL.COMPLETED_DATE',
                type: 'date-range',
                key: 'completedDateRange',
                attributes: { dateType: 'completedDateType', from: '_completedFrom', to: '_completedTo' },
                value: {
                    completedDateType: this.taskFilter.completedDateType || null,
                    _completedFrom: this.taskFilter.completedFrom || null,
                    _completedTo: this.taskFilter.completedTo || null
                }
            },
            {
                label: 'ADF_CLOUD_EDIT_TASK_FILTER.LABEL.CREATED_DATE',
                type: 'date-range',
                key: 'createdDateRange',
                attributes: { dateType: 'createdDateType', from: '_createdFrom', to: '_createdTo' },
                value: {
                    createdDateType: this.taskFilter.createdDateType || null,
                    _createdFrom: this.taskFilter.createdFrom || null,
                    _createdTo: this.taskFilter.createdTo || null
                }
            },
            {
                label: 'ADF_CLOUD_EDIT_TASK_FILTER.LABEL.COMPLETED_BY',
                type: 'people',
                key: 'completedBy',
                value: this.taskFilter.completedBy ? [this.taskFilter.completedBy] : null,
                selectionMode: 'single'
            },
            {
                label: 'ADF_CLOUD_EDIT_TASK_FILTER.LABEL.ASSIGNMENT',
                type: 'assignment',
                key: 'assignment',
                attributes: { assignee: 'assignee', candidateGroups: 'candidateGroups' },
                value: {
                    assignee: this.taskFilter.assignee || null,
                    candidateGroups: this.taskFilter.candidateGroups || []
                }
            }
        ];
    }
}
EditTaskFilterCloudComponent.ɵfac = function EditTaskFilterCloudComponent_Factory(t) { return new (t || EditTaskFilterCloudComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc17.FormBuilder), ɵngcc0.ɵɵdirectiveInject(ɵngcc23.MatDialog), ɵngcc0.ɵɵdirectiveInject(ɵngcc6.TranslationService), ɵngcc0.ɵɵdirectiveInject(TaskFilterCloudService), ɵngcc0.ɵɵdirectiveInject(ɵngcc8.DateAdapter), ɵngcc0.ɵɵdirectiveInject(ɵngcc6.UserPreferencesService), ɵngcc0.ɵɵdirectiveInject(AppsProcessCloudService), ɵngcc0.ɵɵdirectiveInject(TaskCloudService)); };
EditTaskFilterCloudComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: EditTaskFilterCloudComponent, selectors: [["adf-cloud-edit-task-filter"]], features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 4, vars: 3, consts: [[3, "hideToggle"], [3, "afterExpand", "closed"], ["id", "adf-edit-task-filter-expansion-header", 4, "ngIf"], [4, "ngIf"], ["id", "adf-edit-task-filter-expansion-header"], [4, "ngIf", "ngIfElse"], ["loadingTemplate", ""], ["fxLayoutAlign", "space-between center", "id", "adf-edit-task-filter-title-id", 4, "ngIf"], ["fxLayoutAlign", "space-between center", "id", "adf-edit-task-filter-sub-title-id"], ["class", "adf-cloud-edit-task-filter-actions", 4, "ngIf"], ["fxLayoutAlign", "space-between center", "id", "adf-edit-task-filter-title-id"], [1, "adf-cloud-edit-task-filter-actions"], ["mat-icon-button", "", 3, "matTooltip", "disabled", "click", 4, "ngFor", "ngForOf"], ["mat-icon-button", "", 3, "matTooltip", "disabled", "click"], [3, "value"], [1, "adf-cloud-edit-task-filter-loading-margin"], [3, "diameter"], [3, "formGroup", 4, "ngIf"], [3, "formGroup"], ["fxLayout", "row wrap", "fxLayout.xs", "column", "fxLayoutGap", "10px", "fxLayoutAlign", "start center"], [4, "ngFor", "ngForOf"], ["fxFlex", "23%", 3, "floatLabel", 4, "ngIf"], ["class", "adf-edit-task-filter-checkbox", 4, "ngIf"], [3, "processFilterProperty", "options", "dateTypeChange", "dateChanged", 4, "ngIf"], ["fxFlex", "23%", 3, "class", 4, "ngIf"], ["fxFlex", "23%", 3, "taskFilterProperty", "assignedChange", "assignedGroupChange", 4, "ngIf"], ["fxFlex", "23%", 3, "floatLabel"], [3, "placeholder", "formControlName"], [3, "value", 4, "ngFor", "ngForOf"], ["matInput", "", "type", "text", 3, "formControlName", "placeholder"], ["matInput", "", 3, "matDatepicker", "placeholder", "keyup", "dateChange"], ["matSuffix", "", 3, "for"], ["dateController", ""], [1, "adf-edit-task-filter-date-error-container"], [1, "adf-error-text"], [1, "adf-error-icon"], [1, "adf-edit-task-filter-checkbox"], ["color", "primary", 3, "formControlName"], [3, "processFilterProperty", "options", "dateTypeChange", "dateChanged"], ["dateRange", ""], ["fxFlex", "23%"], [3, "preSelectUsers", "title", "validate", "appName", "mode", "changedUsers"], ["fxFlex", "23%", 3, "taskFilterProperty", "assignedChange", "assignedGroupChange"]], template: function EditTaskFilterCloudComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "mat-accordion", 0);
        ɵngcc0.ɵɵelementStart(1, "mat-expansion-panel", 1);
        ɵngcc0.ɵɵlistener("afterExpand", function EditTaskFilterCloudComponent_Template_mat_expansion_panel_afterExpand_1_listener() { return ctx.onExpand(); })("closed", function EditTaskFilterCloudComponent_Template_mat_expansion_panel_closed_1_listener() { return ctx.onClose(); });
        ɵngcc0.ɵɵtemplate(2, EditTaskFilterCloudComponent_mat_expansion_panel_header_2_Template, 4, 2, "mat-expansion-panel-header", 2);
        ɵngcc0.ɵɵtemplate(3, EditTaskFilterCloudComponent_ng_container_3_Template, 2, 1, "ng-container", 3);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("hideToggle", ctx.isLoading);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.taskFilter);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.isLoading);
    } }, directives: function () { return [ɵngcc24.MatAccordion, ɵngcc24.MatExpansionPanel, ɵngcc3.NgIf, ɵngcc24.MatExpansionPanelHeader, ɵngcc24.MatExpansionPanelDescription, ɵngcc2.DefaultLayoutAlignDirective, ɵngcc24.MatExpansionPanelTitle, ɵngcc3.NgForOf, ɵngcc13.MatButton, ɵngcc20.MatTooltip, ɵngcc6.IconComponent, ɵngcc9.MatSpinner, ɵngcc17.ɵangular_packages_forms_forms_y, ɵngcc17.NgControlStatusGroup, ɵngcc17.FormGroupDirective, ɵngcc2.DefaultLayoutDirective, ɵngcc2.DefaultLayoutGapDirective, ɵngcc14.MatFormField, ɵngcc2.DefaultFlexDirective, ɵngcc15.MatSelect, ɵngcc17.NgControlStatus, ɵngcc17.FormControlName, ɵngcc8.MatOption, ɵngcc21.MatInput, ɵngcc17.DefaultValueAccessor, ɵngcc14.MatLabel, ɵngcc16.MatDatepickerInput, ɵngcc16.MatDatepickerToggle, ɵngcc14.MatSuffix, ɵngcc16.MatDatepicker, ɵngcc5.MatIcon, ɵngcc25.MatCheckbox, DateRangeFilterComponent, PeopleCloudComponent, TaskAssignmentFilterCloudComponent]; }, pipes: function () { return [ɵngcc10.TranslatePipe]; }, styles: [_c7], encapsulation: 2 });
EditTaskFilterCloudComponent.ctorParameters = () => [
    { type: FormBuilder },
    { type: MatDialog },
    { type: TranslationService },
    { type: TaskFilterCloudService },
    { type: DateAdapter },
    { type: UserPreferencesService },
    { type: AppsProcessCloudService },
    { type: TaskCloudService }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(EditTaskFilterCloudComponent, [{
        type: Component,
        args: [{
                selector: 'adf-cloud-edit-task-filter',
                template: "<mat-accordion [hideToggle]=\"isLoading\">\n    <mat-expansion-panel (afterExpand)=\"onExpand()\" (closed)=\"onClose()\">\n        <mat-expansion-panel-header *ngIf=\"taskFilter\" id=\"adf-edit-task-filter-expansion-header\">\n            <ng-container *ngIf=\"!isLoading; else loadingTemplate\">\n                <mat-panel-title *ngIf=\"showTaskFilterName\" fxLayoutAlign=\"space-between center\" id=\"adf-edit-task-filter-title-id\"\n                    >{{taskFilter.name | translate}}</mat-panel-title>\n                <mat-panel-description fxLayoutAlign=\"space-between center\" id=\"adf-edit-task-filter-sub-title-id\">\n                    <span *ngIf=\"showTitle\">{{ 'ADF_CLOUD_EDIT_TASK_FILTER.TITLE' | translate}}</span>\n                    <div *ngIf=\"showFilterActions\" class=\"adf-cloud-edit-task-filter-actions\">\n                        <ng-container *ngIf=\"toggleFilterActions\">\n                            <button *ngFor=\"let filterAction of taskFilterActions\"\n                                    mat-icon-button\n                                    matTooltip=\"{{ filterAction.tooltip | translate}}\"\n                                    [attr.data-automation-id]=\"'adf-filter-action-' + filterAction.actionType\"\n                                    [disabled]=\"isDisabledAction(filterAction)\"\n                                    (click)=\"executeFilterActions(filterAction)\">\n                                <adf-icon [value]=\"filterAction.icon\"></adf-icon>\n                            </button>\n                        </ng-container>\n                    </div>\n                </mat-panel-description>\n            </ng-container>\n            <ng-template #loadingTemplate>\n                <div class=\"adf-cloud-edit-task-filter-loading-margin\">\n                    <mat-spinner [diameter]=\"30\"></mat-spinner>\n                </div>\n            </ng-template>\n        </mat-expansion-panel-header>\n        <ng-container *ngIf=\"!isLoading;\">\n            <form *ngIf=\"editTaskFilterForm\" [formGroup]=\"editTaskFilterForm\">\n                <div fxLayout=\"row wrap\" fxLayout.xs=\"column\" fxLayoutGap=\"10px\" fxLayoutAlign=\"start center\">\n                    <ng-container *ngFor=\"let taskFilterProperty of taskFilterProperties\">\n                        <mat-form-field fxFlex=\"23%\"\n                                        [floatLabel]=\"'auto'\"\n                                        *ngIf=\"taskFilterProperty.type === 'select'\"\n                                        [attr.data-automation-id]=\"taskFilterProperty.key\">\n                            <mat-select placeholder=\"{{taskFilterProperty.label | translate}}\"\n                                        [formControlName]=\"taskFilterProperty.key\"\n                                        [attr.data-automation-id]=\"'adf-cloud-edit-task-property-' + taskFilterProperty.key\">\n                                <mat-option *ngFor=\"let propertyOption of taskFilterProperty.options\"\n                                            [value]=\"propertyOption.value\"\n                                            [attr.data-automation-id]=\"'adf-cloud-edit-task-property-options-' + taskFilterProperty.key\">\n                                    {{ propertyOption.label | translate }}\n                                </mat-option>\n                            </mat-select>\n                        </mat-form-field>\n                        <mat-form-field fxFlex=\"23%\"\n                                        [floatLabel]=\"'auto'\"\n                                        *ngIf=\"taskFilterProperty.type === 'text'\"\n                                        [attr.data-automation-id]=\"taskFilterProperty.key\">\n                            <input matInput\n                                   [formControlName]=\"taskFilterProperty.key\"\n                                   type=\"text\"\n                                   placeholder=\"{{taskFilterProperty.label | translate}}\"\n                                   [attr.data-automation-id]=\"'adf-cloud-edit-task-property-' + taskFilterProperty.key\" />\n                        </mat-form-field>\n                        <mat-form-field fxFlex=\"23%\"\n                                        [floatLabel]=\"'auto'\"\n                                        *ngIf=\"taskFilterProperty.type === 'date'\"\n                                        [attr.data-automation-id]=\"taskFilterProperty.key\">\n                            <mat-label>{{taskFilterProperty.label | translate}}</mat-label>\n                            <input matInput\n                                   (keyup)=\"onDateChanged($any($event).srcElement.value, taskFilterProperty)\"\n                                   (dateChange)=\"onDateChanged($event.value, taskFilterProperty)\"\n                                   [matDatepicker]=\"dateController\"\n                                   placeholder=\"{{taskFilterProperty.label | translate}}\"\n                                   [attr.data-automation-id]=\"'adf-cloud-edit-task-property-' + taskFilterProperty.key\">\n                            <mat-datepicker-toggle matSuffix\n                                                   [for]=\"dateController\"\n                                                   [attr.data-automation-id]=\"'adf-cloud-edit-task-property-date-toggle-' + taskFilterProperty.key\">\n                            </mat-datepicker-toggle>\n                            <mat-datepicker #dateController\n                                            [attr.data-automation-id]=\"'adf-cloud-edit-task-property-date-picker-' + taskFilterProperty.key\">\n                            </mat-datepicker>\n                            <div class=\"adf-edit-task-filter-date-error-container\">\n                                <div *ngIf=\"hasError(taskFilterProperty)\">\n                                    <div class=\"adf-error-text\">{{'ADF_TASK_LIST.START_TASK.FORM.ERROR.DATE'|translate}}</div>\n                                    <mat-icon class=\"adf-error-icon\">warning</mat-icon>\n                                </div>\n                            </div>\n                        </mat-form-field>\n                        <div class=\"adf-edit-task-filter-checkbox\"\n                             *ngIf=\"taskFilterProperty.type === 'checkbox'\">\n                            <mat-checkbox color=\"primary\"\n                                          [formControlName]=\"taskFilterProperty.key\"\n                                          [attr.data-automation-id]=\"taskFilterProperty.key\"\n                            >{{taskFilterProperty.label | translate}}</mat-checkbox>\n                        </div>\n\n                        <adf-cloud-date-range-filter #dateRange\n                            *ngIf=\"taskFilterProperty.type === 'date-range'\"\n                            [processFilterProperty]=\"taskFilterProperty\"\n                            [options]=\"taskFilterProperty.dateFilterOptions\"\n                            (dateTypeChange)=\"onDateTypeChange($event, taskFilterProperty)\"\n                            (dateChanged)=\"onDateRangeFilterChanged($event, taskFilterProperty)\">\n                        </adf-cloud-date-range-filter>\n\n                        <div fxFlex=\"23%\" class=\"{{ 'adf-edit-task-filter-' + taskFilterProperty.key }}\" *ngIf=\"taskFilterProperty.type === 'people'\">\n                            <adf-cloud-people\n                                [preSelectUsers]=\"taskFilterProperty.value\"\n                                [title]=\"taskFilterProperty.label\"\n                                [validate]=\"true\"\n                                [appName]=\"appName\"\n                                [mode]=\"taskFilterProperty.selectionMode\"\n                                (changedUsers)=\"onChangedUser($event, taskFilterProperty)\">\n                            </adf-cloud-people>\n                        </div>\n\n                        <adf-cloud-task-assignment-filter fxFlex=\"23%\"\n                            *ngIf=\"taskFilterProperty.type === 'assignment'\"\n                            [taskFilterProperty]=\"taskFilterProperty\"\n                            (assignedChange)=\"onAssignedChange($event)\"\n                            (assignedGroupChange)=\"onAssignedGroupsChange($event)\">\n                        </adf-cloud-task-assignment-filter>\n                    </ng-container>\n                </div>\n            </form>\n        </ng-container>\n    </mat-expansion-panel>\n</mat-accordion>\n",
                encapsulation: ViewEncapsulation.None,
                styles: [".adf-edit-task-filter-checkbox{flex:1 23%;font-size:16px;padding-top:10px;text-align:center}.adf-edit-task-filter-date-error-container{height:20px;margin-top:12px;position:absolute;width:100%}.adf-edit-task-filter-date-error-container>div{display:flex;flex-flow:row;justify-content:flex-start}.adf-edit-task-filter-date-error-container .adf-error-text{color:var(--theme-warn-color);font-size:10px;height:16px;line-height:1.33;padding-right:8px;width:auto}.adf-edit-task-filter-date-error-container .adf-error-icon{color:var(--theme-warn-color);font-size:16px}.adf-edit-task-filter-dateRange mat-grid-list{width:450px}.adf-cloud-edit-task-filter-loading-margin{margin-left:calc(50% - 50px);margin-right:calc(50% - 50px)}"]
            }]
    }], function () { return [{ type: ɵngcc17.FormBuilder }, { type: ɵngcc23.MatDialog }, { type: ɵngcc6.TranslationService }, { type: TaskFilterCloudService }, { type: ɵngcc8.DateAdapter }, { type: ɵngcc6.UserPreferencesService }, { type: AppsProcessCloudService }, { type: TaskCloudService }]; }, null); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class ServiceTaskFiltersCloudComponent extends BaseTaskFiltersCloudComponent {
    constructor(serviceTaskFilterCloudService, translationService) {
        super();
        this.serviceTaskFilterCloudService = serviceTaskFilterCloudService;
        this.translationService = translationService;
        this.filterSelected = new EventEmitter();
        this.filterClicked = new EventEmitter();
        this.filters = [];
    }
    ngOnInit() {
        this.getFilters(this.appName);
    }
    ngOnChanges(changes) {
        const appName = changes['appName'];
        const filter = changes['filterParam'];
        if (appName && appName.currentValue !== appName.previousValue) {
            this.getFilters(appName.currentValue);
        }
        else if (filter && filter.currentValue !== filter.previousValue) {
            this.selectFilterAndEmit(filter.currentValue);
        }
    }
    getFilters(appName) {
        this.filters$ = this.serviceTaskFilterCloudService.getTaskListFilters(appName);
        this.filters$.pipe(takeUntil(this.onDestroy$)).subscribe((res) => {
            this.resetFilter();
            this.filters = res || [];
            this.selectFilterAndEmit(this.filterParam);
            this.success.emit(res);
        }, (err) => {
            this.error.emit(err);
        });
    }
    selectFilter(paramFilter) {
        if (paramFilter) {
            this.currentFilter = this.filters.find((filter, index) => paramFilter.index === index ||
                paramFilter.key === filter.key ||
                paramFilter.id === filter.id ||
                (paramFilter.name &&
                    (paramFilter.name.toLocaleLowerCase() === this.translationService.instant(filter.name).toLocaleLowerCase())));
        }
    }
    selectFilterAndEmit(newParamFilter) {
        if (newParamFilter) {
            this.selectFilter(newParamFilter);
            if (this.currentFilter) {
                this.filterSelected.emit(this.currentFilter);
            }
        }
        else {
            this.currentFilter = undefined;
        }
    }
    onFilterClick(filter) {
        if (filter) {
            this.selectFilter(filter);
            this.filterClicked.emit(this.currentFilter);
        }
        else {
            this.currentFilter = undefined;
        }
    }
    selectDefaultTaskFilter() {
        if (!this.isFilterListEmpty()) {
            this.currentFilter = this.filters[0];
        }
    }
    isFilterListEmpty() {
        return this.filters === undefined || (this.filters && this.filters.length === 0);
    }
    resetFilter() {
        this.filters = [];
        this.currentFilter = undefined;
    }
}
ServiceTaskFiltersCloudComponent.ɵfac = function ServiceTaskFiltersCloudComponent_Factory(t) { return new (t || ServiceTaskFiltersCloudComponent)(ɵngcc0.ɵɵdirectiveInject(ServiceTaskFilterCloudService), ɵngcc0.ɵɵdirectiveInject(ɵngcc6.TranslationService)); };
ServiceTaskFiltersCloudComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ServiceTaskFiltersCloudComponent, selectors: [["adf-cloud-service-task-filters"]], outputs: { filterSelected: "filterSelected", filterClicked: "filterClicked" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature], decls: 4, vars: 4, consts: [[4, "ngIf", "ngIfElse"], ["loading", ""], ["class", "adf-task-filters__entry", 4, "ngFor", "ngForOf"], [1, "adf-task-filters__entry"], ["mat-button", "", "fxLayout", "row", "fxLayoutAlign", "space-between center", 1, "adf-filter-action-button", "adf-full-width", 3, "id", "click"], ["data-automation-id", "adf-filter-icon", 3, "value", 4, "ngIf"], ["data-automation-id", "adf-filter-label", 1, "adf-filter-action-button__label"], ["class", "adf-filter-action-button__counter", 3, "adf-active", 4, "ngIf"], ["data-automation-id", "adf-filter-icon", 3, "value"], [1, "adf-filter-action-button__counter"], [1, "adf-app-list-spinner"]], template: function ServiceTaskFiltersCloudComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, ServiceTaskFiltersCloudComponent_ng_container_0_Template, 2, 1, "ng-container", 0);
        ɵngcc0.ɵɵpipe(1, "async");
        ɵngcc0.ɵɵtemplate(2, ServiceTaskFiltersCloudComponent_ng_template_2_Template, 3, 0, "ng-template", null, 1, ɵngcc0.ɵɵtemplateRefExtractor);
    } if (rf & 2) {
        const _r1 = ɵngcc0.ɵɵreference(3);
        ɵngcc0.ɵɵproperty("ngIf", ɵngcc0.ɵɵpipeBind1(1, 2, ctx.filters$))("ngIfElse", _r1);
    } }, directives: [ɵngcc3.NgIf, ɵngcc3.NgForOf, ɵngcc13.MatButton, ɵngcc2.DefaultLayoutDirective, ɵngcc2.DefaultLayoutAlignDirective, ɵngcc6.IconComponent, ɵngcc9.MatSpinner], pipes: [ɵngcc3.AsyncPipe, ɵngcc10.TranslatePipe], styles: [_c8], encapsulation: 2 });
ServiceTaskFiltersCloudComponent.ctorParameters = () => [
    { type: ServiceTaskFilterCloudService },
    { type: TranslationService }
];
ServiceTaskFiltersCloudComponent.propDecorators = {
    filterSelected: [{ type: Output }],
    filterClicked: [{ type: Output }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ServiceTaskFiltersCloudComponent, [{
        type: Component,
        args: [{
                selector: 'adf-cloud-service-task-filters',
                template: "<ng-container *ngIf=\"filters$ | async as filterList; else loading\">\n    <div *ngFor=\"let filter of filterList\"\n         class=\"adf-task-filters__entry\">\n        <button (click)=\"onFilterClick(filter)\"\n                [attr.aria-label]=\"filter.name | translate\"\n                [id]=\"filter.id\"\n                [attr.data-automation-id]=\"filter.key + '_filter'\"\n                mat-button\n                [class.adf-active]=\"currentFilter === filter\"\n                class=\"adf-filter-action-button adf-full-width\"\n                fxLayout=\"row\"\n                fxLayoutAlign=\"space-between center\">\n            <adf-icon data-automation-id=\"adf-filter-icon\"\n                      *ngIf=\"showIcons\"\n                      [value]=\"filter.icon\"></adf-icon>\n            <span data-automation-id=\"adf-filter-label\"\n                  class=\"adf-filter-action-button__label\">{{ filter.name | translate }}</span>\n        </button>\n        <span *ngIf=\"counters$[filter.key]\"\n              [attr.data-automation-id]=\"filter.key + '_filter-counter'\"\n              class=\"adf-filter-action-button__counter\"\n              [class.adf-active]=wasFilterUpdated(filter.key)>\n            {{ counters$[filter.key] | async }}\n        </span>\n    </div>\n</ng-container>\n<ng-template #loading>\n    <ng-container>\n        <div class=\"adf-app-list-spinner\">\n            <mat-spinner></mat-spinner>\n        </div>\n    </ng-container>\n</ng-template>\n",
                encapsulation: ViewEncapsulation.None,
                styles: [".adf-task-filters__entry{display:flex;font-size:14px!important;font-weight:700;height:24px;opacity:1;padding:12px 0!important;width:100%}.adf-task-filters__entry .adf-full-width{display:flex;width:100%}.adf-task-filters__entry .adf-filter-action-button{cursor:pointer;opacity:.54;padding:16px}.adf-task-filters__entry .adf-filter-action-button .adf-filter-action-button__label{margin:0 8px!important;padding-left:20px}.adf-task-filters__entry .adf-filter-action-button__counter{margin-left:10px;margin-top:6px;opacity:.54;padding:0 5px}.adf-task-filters__entry .adf-filter-action-button__counter.adf-active{background-color:var(--theme-accent-color);border-radius:15px;color:var(--theme-colors-mag-grey-light);font-size:smaller;margin-left:8px;margin-top:5px;padding:0 5px}.adf-task-filters__entry:hover{color:var(--theme-primary-color)}.adf-task-filters__entry:hover .adf-filter-action-button,.adf-task-filters__entry:hover .adf-filter-action-button__counter{opacity:1}.adf-task-filters__entry .adf-active{color:var(--theme-primary-color);opacity:1}"]
            }]
    }], function () { return [{ type: ServiceTaskFilterCloudService }, { type: ɵngcc6.TranslationService }]; }, { filterSelected: [{
            type: Output
        }], filterClicked: [{
            type: Output
        }] }); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class TaskAssignmentFilterCloudComponent {
    constructor(identityUserService) {
        this.identityUserService = identityUserService;
        this.assignedChange = new EventEmitter();
        this.assignedGroupChange = new EventEmitter();
        this.candidateGroups = [];
        this.groupForm = new FormControl('');
        this.assignmentTypeList = {
            unassigned: AssignmentType.UNASSIGNED,
            currentUser: AssignmentType.CURRENT_USER,
            candidateGroups: AssignmentType.CANDIDATE_GROUPS
        };
    }
    ngOnInit() {
        if (this.isFilterPropertyDefined()) {
            this.setDefaultAssignedGroups();
            this.setDefaultAssignmentType();
        }
    }
    isCandidateGroupsType() {
        return this.assignmentType === AssignmentType.CANDIDATE_GROUPS;
    }
    onAssignmentTypeChange(type) {
        this.candidateGroups = [];
        if (type === AssignmentType.CURRENT_USER) {
            this.assignedChange.emit(this.identityUserService.getCurrentUserInfo());
        }
        else if (type === AssignmentType.UNASSIGNED) {
            this.assignedChange.emit(null);
        }
    }
    onChangedGroups(groups) {
        this.assignedGroupChange.emit(groups);
    }
    setDefaultAssignmentType() {
        const assignmentAttr = this.taskFilterProperty.attributes['assignee'];
        const assignee = this.taskFilterProperty.value[assignmentAttr];
        if (this.candidateGroups.length > 0) {
            this.assignmentType = AssignmentType.CANDIDATE_GROUPS;
        }
        else if (assignee) {
            this.assignmentType = AssignmentType.CURRENT_USER;
        }
        else {
            this.assignmentType = AssignmentType.UNASSIGNED;
        }
    }
    setDefaultAssignedGroups() {
        const assignmentGroupsAttr = this.taskFilterProperty.attributes['candidateGroups'];
        this.candidateGroups = this.taskFilterProperty.value[assignmentGroupsAttr];
    }
    isFilterPropertyDefined() {
        return !!this.taskFilterProperty.attributes && !!this.taskFilterProperty.value;
    }
}
TaskAssignmentFilterCloudComponent.ɵfac = function TaskAssignmentFilterCloudComponent_Factory(t) { return new (t || TaskAssignmentFilterCloudComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc6.IdentityUserService)); };
TaskAssignmentFilterCloudComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: TaskAssignmentFilterCloudComponent, selectors: [["adf-cloud-task-assignment-filter"]], inputs: { appName: "appName", taskFilterProperty: "taskFilterProperty" }, outputs: { assignedChange: "assignedChange", assignedGroupChange: "assignedGroupChange" }, decls: 14, vars: 18, consts: [["fxLayout", "row", 1, "adf-cloud-assignment-container"], [3, "floatLabel"], [1, "adf-task-assignment-filter", 3, "placeholder", "ngModel", "ngModelChange"], [3, "value"], ["class", "adf-group-cloud-filter", 3, "mode", "appName", "preSelectGroups", "searchGroupsControl", "title", "changedGroups", 4, "ngIf"], [1, "adf-group-cloud-filter", 3, "mode", "appName", "preSelectGroups", "searchGroupsControl", "title", "changedGroups"]], template: function TaskAssignmentFilterCloudComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "mat-form-field", 1);
        ɵngcc0.ɵɵelementStart(2, "mat-select", 2);
        ɵngcc0.ɵɵlistener("ngModelChange", function TaskAssignmentFilterCloudComponent_Template_mat_select_ngModelChange_2_listener($event) { return ctx.assignmentType = $event; })("ngModelChange", function TaskAssignmentFilterCloudComponent_Template_mat_select_ngModelChange_2_listener() { return ctx.onAssignmentTypeChange(ctx.assignmentType); });
        ɵngcc0.ɵɵpipe(3, "translate");
        ɵngcc0.ɵɵelementStart(4, "mat-option", 3);
        ɵngcc0.ɵɵtext(5);
        ɵngcc0.ɵɵpipe(6, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(7, "mat-option", 3);
        ɵngcc0.ɵɵtext(8);
        ɵngcc0.ɵɵpipe(9, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(10, "mat-option", 3);
        ɵngcc0.ɵɵtext(11);
        ɵngcc0.ɵɵpipe(12, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(13, TaskAssignmentFilterCloudComponent_adf_cloud_group_13_Template, 1, 5, "adf-cloud-group", 4);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("floatLabel", "auto");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵpropertyInterpolate("placeholder", ɵngcc0.ɵɵpipeBind1(3, 10, "ADF_CLOUD_TASK_ASSIGNEMNT_FILTER.ASSIGNMENT_TYPE"));
        ɵngcc0.ɵɵproperty("ngModel", ctx.assignmentType);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("value", ctx.assignmentTypeList.currentUser);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate1("", ɵngcc0.ɵɵpipeBind1(6, 12, "ADF_CLOUD_TASK_ASSIGNEMNT_FILTER.ASSIGNED_TO_ME"), " ");
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("value", ctx.assignmentTypeList.unassigned);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate1("", ɵngcc0.ɵɵpipeBind1(9, 14, "ADF_CLOUD_TASK_ASSIGNEMNT_FILTER.UNASSIGNED"), " ");
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("value", ctx.assignmentTypeList.candidateGroups);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate1("", ɵngcc0.ɵɵpipeBind1(12, 16, "ADF_CLOUD_TASK_ASSIGNEMNT_FILTER.LIST_OF_CANDIDATE_GROUPS"), " ");
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.isCandidateGroupsType());
    } }, directives: function () { return [ɵngcc2.DefaultLayoutDirective, ɵngcc14.MatFormField, ɵngcc15.MatSelect, ɵngcc17.NgControlStatus, ɵngcc17.NgModel, ɵngcc8.MatOption, ɵngcc3.NgIf, GroupCloudComponent]; }, pipes: function () { return [ɵngcc10.TranslatePipe]; }, styles: [".adf-cloud-assignment-container[_ngcontent-%COMP%]{align-items:center}.adf-cloud-assignment-container[_ngcontent-%COMP%]   mat-form-field[_ngcontent-%COMP%]{width:100%}.adf-task-assignment-filter[_ngcontent-%COMP%]{margin-right:10px}.adf-group-cloud-filter[_ngcontent-%COMP%]{flex:1;margin-left:15px;width:100%}"] });
TaskAssignmentFilterCloudComponent.ctorParameters = () => [
    { type: IdentityUserService }
];
TaskAssignmentFilterCloudComponent.propDecorators = {
    appName: [{ type: Input }],
    taskFilterProperty: [{ type: Input }],
    assignedChange: [{ type: Output }],
    assignedGroupChange: [{ type: Output }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TaskAssignmentFilterCloudComponent, [{
        type: Component,
        args: [{
                selector: 'adf-cloud-task-assignment-filter',
                template: "<div class=\"adf-cloud-assignment-container\" fxLayout=\"row\">\n    <mat-form-field [floatLabel]=\"'auto'\">\n        <mat-select class=\"adf-task-assignment-filter\"\n                    placeholder=\"{{ 'ADF_CLOUD_TASK_ASSIGNEMNT_FILTER.ASSIGNMENT_TYPE' | translate }}\"\n                    [(ngModel)]=\"assignmentType\"\n                    (ngModelChange)=\"onAssignmentTypeChange(assignmentType)\">\n            <mat-option [value]=\"assignmentTypeList.currentUser\">{{ 'ADF_CLOUD_TASK_ASSIGNEMNT_FILTER.ASSIGNED_TO_ME' | translate }} </mat-option>\n            <mat-option [value]=\"assignmentTypeList.unassigned\">{{ 'ADF_CLOUD_TASK_ASSIGNEMNT_FILTER.UNASSIGNED' | translate }} </mat-option>\n            <mat-option [value]=\"assignmentTypeList.candidateGroups\">{{ 'ADF_CLOUD_TASK_ASSIGNEMNT_FILTER.LIST_OF_CANDIDATE_GROUPS' | translate }} </mat-option>\n        </mat-select>\n    </mat-form-field>\n\n    <adf-cloud-group class=\"adf-group-cloud-filter\" *ngIf=\"isCandidateGroupsType()\"\n        [mode]=\"'multiple'\"\n        [appName]=\"appName\"\n        [preSelectGroups]=\"candidateGroups\"\n        [searchGroupsControl]=\"groupForm\"\n        (changedGroups)=\"onChangedGroups($event)\"\n        [title]=\"'ADF_CLOUD_TASK_LIST.START_TASK.FORM.LABEL.CANDIDATE_GROUP'\"></adf-cloud-group>\n</div>\n",
                styles: [".adf-cloud-assignment-container{align-items:center}.adf-cloud-assignment-container mat-form-field{width:100%}.adf-task-assignment-filter{margin-right:10px}.adf-group-cloud-filter{flex:1;margin-left:15px;width:100%}"]
            }]
    }], function () { return [{ type: ɵngcc6.IdentityUserService }]; }, { assignedChange: [{
            type: Output
        }], assignedGroupChange: [{
            type: Output
        }], appName: [{
            type: Input
        }], taskFilterProperty: [{
            type: Input
        }] }); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class GroupCloudComponent {
    constructor(identityGroupService, logService) {
        this.identityGroupService = identityGroupService;
        this.logService = logService;
        this.mode = 'single';
        this.preSelectGroups = [];
        this.validate = false;
        this.readOnly = false;
        this.groupChipsCtrl = new FormControl({ value: '', disabled: false });
        this.searchGroupsControl = new FormControl({ value: '', disabled: false });
        this.roles = [];
        this.selectGroup = new EventEmitter();
        this.removeGroup = new EventEmitter();
        this.changedGroups = new EventEmitter();
        this.warning = new EventEmitter();
        this.searchGroups = [];
        this.onDestroy$ = new Subject();
        this.selectedGroups = [];
        this.invalidGroups = [];
        this.searchGroups$ = new BehaviorSubject(this.searchGroups);
        this._subscriptAnimationState = 'enter';
        this.searchedValue = '';
        this.validationLoading = false;
        this.searchLoading = false;
    }
    ngOnInit() {
        this.loadClientId();
        this.initSearch();
    }
    ngOnChanges(changes) {
        if (this.hasPreselectedGroupsChanged(changes) || this.hasModeChanged(changes) || this.isValidationChanged(changes)) {
            if (this.hasPreSelectGroups()) {
                this.loadPreSelectGroups();
            }
            else if (this.hasPreselectedGroupsCleared(changes)) {
                this.selectedGroups = [];
                this.invalidGroups = [];
            }
            if (!this.isValidationEnabled()) {
                this.invalidGroups = [];
            }
        }
        if (changes.appName && this.isAppNameChanged(changes.appName)) {
            this.loadClientId();
        }
    }
    isAppNameChanged(change) {
        return change
            && change.previousValue !== change.currentValue
            && this.appName
            && this.appName.length > 0;
    }
    loadClientId() {
        return __awaiter(this, void 0, void 0, function* () {
            this.clientId = yield this.identityGroupService.getClientIdByApplicationName(this.appName).toPromise();
            if (this.clientId) {
                this.searchGroupsControl.enable();
            }
        });
    }
    initSearch() {
        this.searchGroupsControl.valueChanges.pipe(filter((value) => {
            this.searchLoading = true;
            return typeof value === 'string';
        }), tap((value) => {
            if (value) {
                this.setTypingError();
            }
        }), debounceTime(500), distinctUntilChanged(), tap((value) => {
            if (value.trim()) {
                this.searchedValue = value;
            }
            else {
                this.searchGroupsControl.markAsPristine();
                this.searchGroupsControl.markAsUntouched();
            }
        }), tap(() => this.resetSearchGroups()), switchMap((name) => this.identityGroupService.findGroupsByName({ name: name.trim() })), mergeMap((groups) => {
            this.resetSearchGroups();
            this.searchLoading = false;
            return groups;
        }), filter(group => !this.isGroupAlreadySelected(group)), mergeMap(group => {
            if (this.appName) {
                return this.checkGroupHasAccess(group.id).pipe(mergeMap(hasRole => hasRole ? of(group) : of()));
            }
            else if (this.hasRoles()) {
                return this.filterGroupsByRoles(group);
            }
            else {
                return of(group);
            }
        }), takeUntil(this.onDestroy$)).subscribe(searchedGroup => {
            this.searchGroups.push(searchedGroup);
            this.searchGroups$.next(this.searchGroups);
        });
    }
    checkGroupHasAccess(groupId) {
        if (this.hasRoles()) {
            return this.identityGroupService.checkGroupHasAnyClientAppRole(groupId, this.clientId, this.roles);
        }
        else {
            return this.identityGroupService.checkGroupHasClientApp(groupId, this.clientId);
        }
    }
    isGroupAlreadySelected(group) {
        if (this.selectedGroups && this.selectedGroups.length > 0) {
            const result = this.selectedGroups.find((selectedGroup) => {
                return selectedGroup.name === group.name;
            });
            return !!result;
        }
        return false;
    }
    searchGroup(name) {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.identityGroupService.findGroupsByName({ name }).toPromise())[0];
        });
    }
    getPreselectedGroups() {
        if (this.isSingleMode()) {
            return [this.preSelectGroups[0]];
        }
        else {
            return this.removeDuplicatedGroups(this.preSelectGroups);
        }
    }
    validatePreselectGroups() {
        return __awaiter(this, void 0, void 0, function* () {
            this.invalidGroups = [];
            for (const group of this.getPreselectedGroups()) {
                try {
                    const validationResult = yield this.searchGroup(group.name);
                    if (this.isPreselectedGroupInvalid(group, validationResult)) {
                        this.invalidGroups.push(group);
                    }
                }
                catch (error) {
                    this.invalidGroups.push(group);
                    this.logService.error(error);
                }
            }
            this.checkPreselectValidationErrors();
        });
    }
    checkPreselectValidationErrors() {
        this.invalidGroups = this.removeDuplicatedGroups(this.invalidGroups);
        if (this.invalidGroups.length > 0) {
            this.generateInvalidGroupsMessage();
        }
        this.warning.emit({
            message: 'INVALID_PRESELECTED_GROUPS',
            groups: this.invalidGroups
        });
    }
    generateInvalidGroupsMessage() {
        this.validateGroupsMessage = '';
        this.invalidGroups.forEach((invalidGroup, index) => {
            if (index === this.invalidGroups.length - 1) {
                this.validateGroupsMessage += `${invalidGroup.name} `;
            }
            else {
                this.validateGroupsMessage += `${invalidGroup.name}, `;
            }
        });
    }
    loadPreSelectGroups() {
        return __awaiter(this, void 0, void 0, function* () {
            this.selectedGroups = [];
            if (this.isSingleMode()) {
                this.selectedGroups = [this.preSelectGroups[0]];
            }
            else {
                this.selectedGroups = this.removeDuplicatedGroups(this.preSelectGroups);
            }
            this.groupChipsCtrl.setValue(this.selectedGroups[0].name);
            if (this.isValidationEnabled()) {
                this.validationLoading = true;
                yield this.validatePreselectGroups();
                this.validationLoading = false;
            }
        });
    }
    filterGroupsByRoles(group) {
        return this.identityGroupService.checkGroupHasRole(group.id, this.roles).pipe(map((hasRole) => ({ hasRole: hasRole, group: group })), filter((filteredGroup) => filteredGroup.hasRole), map((filteredGroup) => filteredGroup.group));
    }
    onSelect(group) {
        if (group) {
            this.selectGroup.emit(group);
            if (this.isMultipleMode()) {
                if (!this.isGroupAlreadySelected(group)) {
                    this.selectedGroups.push(group);
                }
            }
            else {
                this.invalidGroups = [];
                this.selectedGroups = [group];
            }
            this.groupInput.nativeElement.value = '';
            this.searchGroupsControl.setValue('');
            this.groupChipsCtrlValue(this.selectedGroups[0].name);
            this.changedGroups.emit(this.selectedGroups);
            this.resetSearchGroups();
        }
    }
    onRemove(groupToRemove) {
        this.removeGroup.emit(groupToRemove);
        this.removeGroupFromSelected(groupToRemove);
        this.changedGroups.emit(this.selectedGroups);
        if (this.selectedGroups.length === 0) {
            this.groupChipsCtrlValue('');
        }
        else {
            this.groupChipsCtrlValue(this.selectedGroups[0].name);
        }
        this.searchGroupsControl.markAsDirty();
        this.searchGroupsControl.markAsTouched();
        if (this.isValidationEnabled()) {
            this.removeGroupFromValidation(groupToRemove);
            this.checkPreselectValidationErrors();
        }
    }
    groupChipsCtrlValue(value) {
        this.groupChipsCtrl.setValue(value);
        this.groupChipsCtrl.markAsDirty();
        this.groupChipsCtrl.markAsTouched();
    }
    removeGroupFromSelected({ id, name }) {
        const indexToRemove = this.selectedGroups.findIndex(group => {
            return group.id === id && group.name === name;
        });
        if (indexToRemove !== -1) {
            this.selectedGroups.splice(indexToRemove, 1);
        }
    }
    removeGroupFromValidation({ id, name }) {
        const indexToRemove = this.invalidGroups.findIndex(group => {
            return group.id === id && group.name === name;
        });
        if (indexToRemove !== -1) {
            this.invalidGroups.splice(indexToRemove, 1);
        }
    }
    resetSearchGroups() {
        this.searchGroups = [];
        this.searchGroups$.next(this.searchGroups);
    }
    isPreselectedGroupInvalid(preselectedGroup, validatedGroup) {
        if (validatedGroup && validatedGroup.name !== undefined) {
            return preselectedGroup.name !== validatedGroup.name;
        }
        else {
            return true;
        }
    }
    isSingleMode() {
        return this.mode === 'single';
    }
    isSingleSelectionReadonly() {
        return this.isSingleMode() && this.selectedGroups.length === 1 && this.selectedGroups[0].readonly === true;
    }
    hasPreselectError() {
        return this.invalidGroups && this.invalidGroups.length > 0;
    }
    isReadonly() {
        return this.readOnly || this.isSingleSelectionReadonly();
    }
    isMultipleMode() {
        return this.mode === 'multiple';
    }
    getDisplayName(group) {
        return group ? group.name : '';
    }
    removeDuplicatedGroups(groups) {
        return groups.filter((group, index, self) => index === self.findIndex((auxGroup) => {
            return group.id === auxGroup.id && group.name === auxGroup.name;
        }));
    }
    hasPreSelectGroups() {
        return this.preSelectGroups && this.preSelectGroups.length > 0;
    }
    hasModeChanged(changes) {
        return changes
            && changes.mode
            && changes.mode.currentValue !== changes.mode.previousValue;
    }
    isValidationChanged(changes) {
        return changes
            && changes.validate
            && changes.validate.currentValue !== changes.validate.previousValue;
    }
    hasPreselectedGroupsChanged(changes) {
        return changes
            && changes.preSelectGroups
            && changes.preSelectGroups.currentValue !== changes.preSelectGroups.previousValue;
    }
    hasPreselectedGroupsCleared(changes) {
        return changes
            && changes.preSelectGroups
            && changes.preSelectGroups.currentValue.length === 0;
    }
    hasRoles() {
        return this.roles && this.roles.length > 0;
    }
    setTypingError() {
        this.searchGroupsControl.setErrors(Object.assign({ searchTypingError: true }, this.searchGroupsControl.errors));
    }
    hasError() {
        return !!this.searchGroupsControl.errors;
    }
    isValidationLoading() {
        return this.isValidationEnabled() && this.validationLoading;
    }
    setFocus(isFocused) {
        this.isFocused = isFocused;
    }
    isValidationEnabled() {
        return this.validate === true;
    }
    getValidationPattern() {
        return this.searchGroupsControl.errors.pattern.requiredPattern;
    }
    getValidationMaxLength() {
        return this.searchGroupsControl.errors.maxlength.requiredLength;
    }
    getValidationMinLength() {
        return this.searchGroupsControl.errors.minlength.requiredLength;
    }
    ngOnDestroy() {
        this.onDestroy$.next(true);
        this.onDestroy$.complete();
    }
}
GroupCloudComponent.ɵfac = function GroupCloudComponent_Factory(t) { return new (t || GroupCloudComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc6.IdentityGroupService), ɵngcc0.ɵɵdirectiveInject(ɵngcc6.LogService)); };
GroupCloudComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: GroupCloudComponent, selectors: [["adf-cloud-group"]], viewQuery: function GroupCloudComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c9, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.groupInput = _t.first);
    } }, inputs: { mode: "mode", preSelectGroups: "preSelectGroups", validate: "validate", readOnly: "readOnly", groupChipsCtrl: "groupChipsCtrl", searchGroupsControl: "searchGroupsControl", roles: "roles", appName: "appName", title: "title" }, outputs: { selectGroup: "selectGroup", removeGroup: "removeGroup", changedGroups: "changedGroups", warning: "warning" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 20, vars: 16, consts: [[1, "adf-cloud-group"], ["id", "adf-group-cloud-title-id", 4, "ngIf"], ["data-automation-id", "adf-cloud-group-chip-list", 3, "disabled"], ["groupChipList", ""], [3, "removable", "matTooltip", "removed", 4, "ngFor", "ngForOf"], ["matInput", "", "class", "adf-group-input", "data-automation-id", "adf-cloud-group-search-input", 3, "formControl", "matAutocomplete", "matChipInputFor", "focus", "blur", 4, "ngIf"], ["autoActiveFirstOption", "", "data-automation-id", "adf-cloud-group-autocomplete", 1, "adf-cloud-group-list", 3, "displayWith", "optionSelected"], ["auto", "matAutocomplete"], [4, "ngIf", "ngIfElse"], ["noResults", ""], ["mode", "indeterminate", 4, "ngIf"], [4, "ngIf"], ["data-automation-id", "invalid-groups-typing-error", 4, "ngIf"], ["id", "adf-group-cloud-title-id"], [3, "removable", "matTooltip", "removed"], ["matChipRemove", "", 4, "ngIf"], ["matChipRemove", ""], ["matInput", "", "data-automation-id", "adf-cloud-group-search-input", 1, "adf-group-input", 3, "formControl", "matAutocomplete", "matChipInputFor", "focus", "blur"], ["groupInput", ""], [3, "value", 4, "ngFor", "ngForOf"], [3, "value"], ["fxLayout", "row", "fxLayoutAlign", "start center", "data-automation-id", "adf-cloud-group-row", "fxLayoutGap", "20px", 1, "adf-cloud-group-row", 3, "id"], ["mat-fab", "", 1, "adf-group-short-name"], ["disabled", "", "class", "adf-cloud-group-option-not-active", "data-automation-id", "adf-cloud-group-no-results", 4, "ngIf"], ["disabled", "", "data-automation-id", "adf-cloud-group-no-results", 1, "adf-cloud-group-option-not-active"], ["mode", "indeterminate"], [1, "adf-start-task-cloud-error-icon"], ["data-automation-id", "invalid-groups-typing-error"]], template: function GroupCloudComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "form");
        ɵngcc0.ɵɵelementStart(1, "mat-form-field", 0);
        ɵngcc0.ɵɵtemplate(2, GroupCloudComponent_mat_label_2_Template, 3, 3, "mat-label", 1);
        ɵngcc0.ɵɵelementStart(3, "mat-chip-list", 2, 3);
        ɵngcc0.ɵɵtemplate(5, GroupCloudComponent_mat_chip_5_Template, 4, 7, "mat-chip", 4);
        ɵngcc0.ɵɵtemplate(6, GroupCloudComponent_input_6_Template, 2, 3, "input", 5);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(7, "mat-autocomplete", 6, 7);
        ɵngcc0.ɵɵlistener("optionSelected", function GroupCloudComponent_Template_mat_autocomplete_optionSelected_7_listener($event) { return ctx.onSelect($event.option.value); });
        ɵngcc0.ɵɵtemplate(9, GroupCloudComponent_ng_container_9_Template, 3, 3, "ng-container", 8);
        ɵngcc0.ɵɵpipe(10, "async");
        ɵngcc0.ɵɵtemplate(11, GroupCloudComponent_ng_template_11_Template, 1, 1, "ng-template", null, 9, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(13, GroupCloudComponent_mat_progress_bar_13_Template, 1, 0, "mat-progress-bar", 10);
        ɵngcc0.ɵɵtemplate(14, GroupCloudComponent_mat_error_14_Template, 5, 6, "mat-error", 11);
        ɵngcc0.ɵɵtemplate(15, GroupCloudComponent_mat_error_15_Template, 5, 6, "mat-error", 11);
        ɵngcc0.ɵɵtemplate(16, GroupCloudComponent_mat_error_16_Template, 5, 6, "mat-error", 11);
        ɵngcc0.ɵɵtemplate(17, GroupCloudComponent_mat_error_17_Template, 5, 6, "mat-error", 11);
        ɵngcc0.ɵɵtemplate(18, GroupCloudComponent_mat_error_18_Template, 5, 3, "mat-error", 11);
        ɵngcc0.ɵɵtemplate(19, GroupCloudComponent_mat_error_19_Template, 5, 6, "mat-error", 12);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        const _r6 = ɵngcc0.ɵɵreference(12);
        var tmp_5_0 = null;
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.isReadonly());
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("disabled", ctx.isReadonly() || ctx.isValidationLoading());
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.selectedGroups);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.isReadonly());
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("displayWith", ctx.getDisplayName);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", (tmp_5_0 = ɵngcc0.ɵɵpipeBind1(10, 14, ctx.searchGroups$)) == null ? null : tmp_5_0.length)("ngIfElse", _r6);
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵproperty("ngIf", ctx.validationLoading);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.hasPreselectError() && !ctx.isValidationLoading());
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.searchGroupsControl.hasError("pattern"));
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.searchGroupsControl.hasError("maxlength"));
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.searchGroupsControl.hasError("minlength"));
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.searchGroupsControl.hasError("required") || ctx.groupChipsCtrl.hasError("required"));
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.searchGroupsControl.hasError("searchTypingError") && !ctx.isFocused);
    } }, directives: function () { return [ɵngcc17.ɵangular_packages_forms_forms_y, ɵngcc17.NgControlStatusGroup, ɵngcc17.NgForm, ɵngcc14.MatFormField, ɵngcc3.NgIf, ɵngcc18.MatChipList, ɵngcc3.NgForOf, ɵngcc19.MatAutocomplete, ɵngcc14.MatLabel, ɵngcc18.MatChip, ɵngcc20.MatTooltip, ɵngcc5.MatIcon, ɵngcc18.MatChipRemove, ɵngcc21.MatInput, ɵngcc17.DefaultValueAccessor, ɵngcc19.MatAutocompleteTrigger, ɵngcc18.MatChipInput, ɵngcc17.NgControlStatus, ɵngcc17.FormControlDirective, ɵngcc8.MatOption, ɵngcc2.DefaultLayoutDirective, ɵngcc2.DefaultLayoutAlignDirective, ɵngcc2.DefaultLayoutGapDirective, ɵngcc13.MatButton, ɵngcc22.MatProgressBar, ɵngcc14.MatError]; }, pipes: function () { return [ɵngcc3.AsyncPipe, ɵngcc10.TranslatePipe, InitialGroupNamePipe]; }, styles: [".adf-cloud-group-list{margin:5px 0;padding:10px 0}.adf-cloud-group{width:100%}.adf-cloud-group-option-not-active{background:inherit!important}.adf-cloud-group .mat-form-field{width:100%}.adf-cloud-group-error{height:20px;margin-top:-10px;position:absolute}.adf-cloud-group-error-message{color:var(--theme-warn-color);font-size:12px;height:16px;line-height:1.33;padding-right:8px;width:auto}.adf-cloud-group-error-icon{color:var(--theme-warn-color);font-size:17px}.mat-autocomplete-panel .mat-fab{background:var(--theme-primary-color);box-shadow:none!important;font-size:18px;font-weight:bolder;height:40px;width:40px}.mat-autocomplete-panel .mat-fab .mat-button-wrapper{display:inline!important}"], encapsulation: 2, data: { animation: [
            trigger('transitionMessages', [
                state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),
                transition('void => enter', [
                    style({ opacity: 0, transform: 'translateY(-100%)' }),
                    animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)')
                ])
            ])
        ] }, changeDetection: 0 });
GroupCloudComponent.ctorParameters = () => [
    { type: IdentityGroupService },
    { type: LogService }
];
GroupCloudComponent.propDecorators = {
    appName: [{ type: Input }],
    title: [{ type: Input }],
    mode: [{ type: Input }],
    preSelectGroups: [{ type: Input }],
    validate: [{ type: Input }],
    readOnly: [{ type: Input }],
    groupChipsCtrl: [{ type: Input }],
    searchGroupsControl: [{ type: Input }],
    roles: [{ type: Input }],
    selectGroup: [{ type: Output }],
    removeGroup: [{ type: Output }],
    changedGroups: [{ type: Output }],
    warning: [{ type: Output }],
    groupInput: [{ type: ViewChild, args: ['groupInput',] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(GroupCloudComponent, [{
        type: Component,
        args: [{
                selector: 'adf-cloud-group',
                template: "<form>\n    <mat-form-field class=\"adf-cloud-group\">\n        <mat-label *ngIf=\"!isReadonly()\"\n            id=\"adf-group-cloud-title-id\">{{ (title || 'ADF_CLOUD_GROUPS.SEARCH-GROUP') | translate }}</mat-label>\n        <mat-chip-list #groupChipList [disabled]=\"isReadonly() || isValidationLoading()\" data-automation-id=\"adf-cloud-group-chip-list\">\n            <mat-chip\n                *ngFor=\"let group of selectedGroups\"\n                [removable]=\"!(group.readonly)\"\n                [attr.data-automation-id]=\"'adf-cloud-group-chip-' + group.name\"\n                (removed)=\"onRemove(group)\"\n                matTooltip=\"{{ (group.readonly ? 'ADF_CLOUD_GROUPS.MANDATORY' : '') | translate }}\">\n                {{group.name}}\n                <mat-icon\n                    *ngIf=\"!(group.readonly || readOnly)\"\n                    matChipRemove [attr.data-automation-id]=\"'adf-cloud-group-chip-remove-icon-' + group.name\">\n                    cancel\n                </mat-icon>\n            </mat-chip>\n            <input *ngIf=\"!isReadonly()\" matInput\n                   [formControl]=\"searchGroupsControl\"\n                   [matAutocomplete]=\"auto\"\n                   [matChipInputFor]=\"groupChipList\"\n                   (focus)=\"setFocus(true)\"\n                   (blur)=\"setFocus(false)\"\n                   class=\"adf-group-input\"\n                   data-automation-id=\"adf-cloud-group-search-input\" #groupInput>\n        </mat-chip-list>\n\n        <mat-autocomplete\n            autoActiveFirstOption\n            #auto=\"matAutocomplete\"\n            class=\"adf-cloud-group-list\"\n            (optionSelected)=\"onSelect($event.option.value)\"\n            [displayWith]=\"getDisplayName\"\n            data-automation-id=\"adf-cloud-group-autocomplete\">\n            <ng-container *ngIf=\"(searchGroups$ | async)?.length else noResults\">\n                <mat-option *ngFor=\"let group of searchGroups$ | async; let i = index\" [value]=\"group\"\n                            [attr.data-automation-id]=\"'adf-cloud-group-chip-' + group.name\">\n                    <div class=\"adf-cloud-group-row\" id=\"adf-group-{{i}}\" fxLayout=\"row\" fxLayoutAlign=\"start center\"\n                         data-automation-id=\"adf-cloud-group-row\"\n                         fxLayoutGap=\"20px\">\n                        <button class=\"adf-group-short-name\" mat-fab>{{group | groupNameInitial }}</button>\n                        <span>{{group.name}}</span>\n                    </div>\n                </mat-option>\n            </ng-container>\n            <ng-template #noResults>\n                <mat-option *ngIf=\"searchGroupsControl.hasError('searchTypingError') && !searchLoading\" disabled\n                            class=\"adf-cloud-group-option-not-active\"\n                            data-automation-id=\"adf-cloud-group-no-results\">\n                    <span> {{ 'ADF_CLOUD_GROUPS.ERROR.NOT_FOUND' | translate : { groupName: searchedValue } }}</span>\n                </mat-option>\n            </ng-template>\n        </mat-autocomplete>\n    </mat-form-field>\n    <mat-progress-bar\n        *ngIf=\"validationLoading\"\n        mode=\"indeterminate\">\n    </mat-progress-bar>\n\n    <mat-error *ngIf=\"hasPreselectError() &&  !isValidationLoading()\">\n        <mat-icon class=\"adf-start-task-cloud-error-icon\">warning</mat-icon>\n        {{ 'ADF_CLOUD_GROUPS.ERROR.NOT_FOUND' | translate : { groupName : validateGroupsMessage } }}</mat-error>\n    <mat-error *ngIf=\"searchGroupsControl.hasError('pattern')\">\n        <mat-icon class=\"adf-start-task-cloud-error-icon\">warning</mat-icon>\n        {{ 'ADF_CLOUD_PEOPLE_GROUPS.ERROR.INVALID_PATTERN' | translate: { pattern: getValidationPattern() } }}</mat-error>\n    <mat-error *ngIf=\"searchGroupsControl.hasError('maxlength')\">\n        <mat-icon class=\"adf-start-task-cloud-error-icon\">warning</mat-icon>\n        {{ 'ADF_CLOUD_PEOPLE_GROUPS.ERROR.INVALID_MAX_LENGTH' | translate: { requiredLength: getValidationMaxLength() } }}\n    </mat-error>\n    <mat-error *ngIf=\"searchGroupsControl.hasError('minlength')\">\n        <mat-icon class=\"adf-start-task-cloud-error-icon\">warning</mat-icon>\n        {{ 'ADF_CLOUD_PEOPLE_GROUPS.ERROR.INVALID_MIN_LENGTH' | translate: { requiredLength: getValidationMinLength() } }}</mat-error>\n    <mat-error *ngIf=\"searchGroupsControl.hasError('required') || groupChipsCtrl.hasError('required')\">\n        <mat-icon class=\"adf-start-task-cloud-error-icon\">warning</mat-icon>\n        {{ 'ADF_CLOUD_PEOPLE_GROUPS.ERROR.REQUIRED' | translate }} </mat-error>\n    <mat-error *ngIf=\"searchGroupsControl.hasError('searchTypingError') && !this.isFocused\" data-automation-id=\"invalid-groups-typing-error\">\n        <mat-icon class=\"adf-start-task-cloud-error-icon\">warning</mat-icon>\n        {{ 'ADF_CLOUD_GROUPS.ERROR.NOT_FOUND' | translate : { groupName : searchedValue } }}</mat-error>\n</form>\n",
                animations: [
                    trigger('transitionMessages', [
                        state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),
                        transition('void => enter', [
                            style({ opacity: 0, transform: 'translateY(-100%)' }),
                            animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)')
                        ])
                    ])
                ],
                changeDetection: ChangeDetectionStrategy.OnPush,
                encapsulation: ViewEncapsulation.None,
                styles: [".adf-cloud-group-list{margin:5px 0;padding:10px 0}.adf-cloud-group{width:100%}.adf-cloud-group-option-not-active{background:inherit!important}.adf-cloud-group .mat-form-field{width:100%}.adf-cloud-group-error{height:20px;margin-top:-10px;position:absolute}.adf-cloud-group-error-message{color:var(--theme-warn-color);font-size:12px;height:16px;line-height:1.33;padding-right:8px;width:auto}.adf-cloud-group-error-icon{color:var(--theme-warn-color);font-size:17px}.mat-autocomplete-panel .mat-fab{background:var(--theme-primary-color);box-shadow:none!important;font-size:18px;font-weight:bolder;height:40px;width:40px}.mat-autocomplete-panel .mat-fab .mat-button-wrapper{display:inline!important}"]
            }]
    }], function () { return [{ type: ɵngcc6.IdentityGroupService }, { type: ɵngcc6.LogService }]; }, { mode: [{
            type: Input
        }], preSelectGroups: [{
            type: Input
        }], validate: [{
            type: Input
        }], readOnly: [{
            type: Input
        }], groupChipsCtrl: [{
            type: Input
        }], searchGroupsControl: [{
            type: Input
        }], roles: [{
            type: Input
        }], selectGroup: [{
            type: Output
        }], removeGroup: [{
            type: Output
        }], changedGroups: [{
            type: Output
        }], warning: [{
            type: Output
        }], appName: [{
            type: Input
        }], title: [{
            type: Input
        }], groupInput: [{
            type: ViewChild,
            args: ['groupInput']
        }] }); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class InitialGroupNamePipe {
    transform(group) {
        let result = '';
        if (group) {
            result = this.getInitialGroupName(group.name).toUpperCase();
        }
        return result;
    }
    getInitialGroupName(groupName) {
        groupName = (groupName ? groupName[0] : '');
        return groupName;
    }
}
InitialGroupNamePipe.ɵfac = function InitialGroupNamePipe_Factory(t) { return new (t || InitialGroupNamePipe)(); };
InitialGroupNamePipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "groupNameInitial", type: InitialGroupNamePipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(InitialGroupNamePipe, [{
        type: Pipe,
        args: [{
                name: 'groupNameInitial'
            }]
    }], null, null); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class GroupCloudModule {
}
GroupCloudModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: GroupCloudModule });
GroupCloudModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function GroupCloudModule_Factory(t) { return new (t || GroupCloudModule)(); }, imports: [[
            CommonModule,
            FlexLayoutModule,
            MaterialModule,
            FormsModule,
            ReactiveFormsModule,
            CoreModule
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(GroupCloudModule, { declarations: function () { return [GroupCloudComponent, InitialGroupNamePipe]; }, imports: function () { return [CommonModule,
        FlexLayoutModule, MaterialModule, FormsModule,
        ReactiveFormsModule,
        CoreModule]; }, exports: function () { return [GroupCloudComponent, InitialGroupNamePipe]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(GroupCloudModule, [{
        type: NgModule,
        args: [{
                imports: [
                    CommonModule,
                    FlexLayoutModule,
                    MaterialModule,
                    FormsModule,
                    ReactiveFormsModule,
                    CoreModule
                ],
                declarations: [GroupCloudComponent, InitialGroupNamePipe],
                exports: [GroupCloudComponent, InitialGroupNamePipe]
            }]
    }], null, null); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const ɵ0$1 = MOMENT_DATE_FORMATS;
class TaskFiltersCloudModule {
}
TaskFiltersCloudModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: TaskFiltersCloudModule });
TaskFiltersCloudModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function TaskFiltersCloudModule_Factory(t) { return new (t || TaskFiltersCloudModule)(); }, providers: [
        { provide: DateAdapter, useClass: MomentDateAdapter },
        { provide: MAT_DATE_FORMATS, useValue: ɵ0$1 }
    ], imports: [[
            FormsModule,
            ReactiveFormsModule,
            HttpClientModule,
            CommonModule,
            FlexLayoutModule,
            MaterialModule,
            AppListCloudModule,
            CoreModule,
            GroupCloudModule,
            ProcessCommonModule,
            PeopleCloudModule
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(TaskFiltersCloudModule, { declarations: function () { return [TaskFiltersCloudComponent, ServiceTaskFiltersCloudComponent, EditTaskFilterCloudComponent, EditServiceTaskFilterCloudComponent, TaskFilterDialogCloudComponent, TaskAssignmentFilterCloudComponent]; }, imports: function () { return [FormsModule,
        ReactiveFormsModule,
        HttpClientModule,
        CommonModule,
        FlexLayoutModule, MaterialModule, AppListCloudModule, CoreModule, GroupCloudModule, ProcessCommonModule, PeopleCloudModule]; }, exports: function () { return [TaskFiltersCloudComponent, ServiceTaskFiltersCloudComponent, EditTaskFilterCloudComponent, EditServiceTaskFilterCloudComponent]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TaskFiltersCloudModule, [{
        type: NgModule,
        args: [{
                imports: [
                    FormsModule,
                    ReactiveFormsModule,
                    HttpClientModule,
                    CommonModule,
                    FlexLayoutModule,
                    MaterialModule,
                    AppListCloudModule,
                    CoreModule,
                    GroupCloudModule,
                    ProcessCommonModule,
                    PeopleCloudModule
                ],
                declarations: [
                    TaskFiltersCloudComponent,
                    ServiceTaskFiltersCloudComponent,
                    EditTaskFilterCloudComponent,
                    EditServiceTaskFilterCloudComponent,
                    TaskFilterDialogCloudComponent,
                    TaskAssignmentFilterCloudComponent
                ],
                exports: [
                    TaskFiltersCloudComponent,
                    ServiceTaskFiltersCloudComponent,
                    EditTaskFilterCloudComponent,
                    EditServiceTaskFilterCloudComponent
                ],
                providers: [
                    { provide: DateAdapter, useClass: MomentDateAdapter },
                    { provide: MAT_DATE_FORMATS, useValue: ɵ0$1 }
                ]
            }]
    }], null, null); })();

const ɵ0$2 = MOMENT_DATE_FORMATS;
class StartTaskCloudComponent {
    constructor(taskService, dateAdapter, userPreferencesService, formBuilder, identityUserService, logService) {
        this.taskService = taskService;
        this.dateAdapter = dateAdapter;
        this.userPreferencesService = userPreferencesService;
        this.formBuilder = formBuilder;
        this.identityUserService = identityUserService;
        this.logService = logService;
        this.DATE_FORMAT = 'DD/MM/YYYY';
        this.appName = '';
        this.maxNameLength = StartTaskCloudComponent.MAX_NAME_LENGTH;
        this.name = '';
        this.success = new EventEmitter();
        this.cancel = new EventEmitter();
        this.error = new EventEmitter();
        this.submitted = false;
        this.candidateGroupNames = [];
        this.assigneeForm = new FormControl('');
        this.groupForm = new FormControl('');
        this.onDestroy$ = new Subject();
    }
    ngOnInit() {
        this.userPreferencesService
            .select(UserPreferenceValues.Locale)
            .pipe(takeUntil(this.onDestroy$))
            .subscribe(locale => this.dateAdapter.setLocale(locale));
        this.loadCurrentUser();
        this.buildForm();
        this.loadDefaultPriorities();
    }
    ngOnDestroy() {
        this.onDestroy$.next(true);
        this.onDestroy$.complete();
    }
    buildForm() {
        this.taskForm = this.formBuilder.group({
            name: new FormControl(this.name, [Validators.required, Validators.maxLength(this.getMaxNameLength()), this.whitespaceValidator]),
            priority: new FormControl(''),
            description: new FormControl('', [this.whitespaceValidator]),
            formKey: new FormControl()
        });
    }
    getMaxNameLength() {
        return this.maxNameLength > StartTaskCloudComponent.MAX_NAME_LENGTH ?
            StartTaskCloudComponent.MAX_NAME_LENGTH : this.maxNameLength;
    }
    loadCurrentUser() {
        this.currentUser = this.identityUserService.getCurrentUserInfo();
        this.assigneeName = this.currentUser.username;
    }
    loadDefaultPriorities() {
        this.priorities = this.taskService.priorities;
    }
    saveTask() {
        this.submitted = true;
        const newTask = Object.assign(this.taskForm.value);
        newTask.dueDate = this.dueDate;
        newTask.assignee = this.assigneeName;
        newTask.formKey = this.formKey;
        newTask.candidateGroups = this.candidateGroupNames;
        this.createNewTask(new StartTaskCloudRequestModel(newTask));
    }
    createNewTask(newTask) {
        this.taskService.createNewTask(newTask, this.appName)
            .subscribe((res) => {
            this.submitted = false;
            this.success.emit(res);
        }, (err) => {
            this.submitted = false;
            this.error.emit(err);
            this.logService.error('An error occurred while creating new task');
        });
    }
    onCancel() {
        this.cancel.emit();
    }
    onDateChanged(newDateValue) {
        this.dateError = false;
        if (newDateValue) {
            const momentDate = moment(newDateValue, this.DATE_FORMAT, true);
            if (!momentDate.isValid()) {
                this.dateError = true;
            }
        }
    }
    onAssigneeSelect(assignee) {
        this.assigneeName = assignee ? assignee.username : '';
    }
    onAssigneeRemove() {
        this.assigneeName = '';
    }
    onCandidateGroupSelect(candidateGroup) {
        if (candidateGroup.name) {
            this.candidateGroupNames.push(candidateGroup.name);
        }
    }
    onCandidateGroupRemove(candidateGroup) {
        if (candidateGroup.name) {
            this.candidateGroupNames = this.candidateGroupNames.filter((name) => {
                return name !== candidateGroup.name;
            });
        }
    }
    canStartTask() {
        return !(this.dateError ||
            !this.taskForm.valid ||
            this.submitted ||
            this.assignee.hasError() ||
            this.candidateGroups.hasError());
    }
    whitespaceValidator(control) {
        const isWhitespace = (control.value || '').trim().length === 0;
        const isValid = control.value.length === 0 || !isWhitespace;
        return isValid ? null : { 'whitespace': true };
    }
    get nameController() {
        return this.taskForm.get('name');
    }
    get priorityController() {
        return this.taskForm.get('priority');
    }
    get assigneeFormControl() {
        return this.assigneeForm;
    }
    get candidateUserFormControl() {
        return this.groupForm;
    }
    onFormSelect(formKey) {
        this.formKey = formKey || '';
    }
}
StartTaskCloudComponent.ɵfac = function StartTaskCloudComponent_Factory(t) { return new (t || StartTaskCloudComponent)(ɵngcc0.ɵɵdirectiveInject(TaskCloudService), ɵngcc0.ɵɵdirectiveInject(ɵngcc8.DateAdapter), ɵngcc0.ɵɵdirectiveInject(ɵngcc6.UserPreferencesService), ɵngcc0.ɵɵdirectiveInject(ɵngcc17.FormBuilder), ɵngcc0.ɵɵdirectiveInject(ɵngcc6.IdentityUserService), ɵngcc0.ɵɵdirectiveInject(ɵngcc6.LogService)); };
StartTaskCloudComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: StartTaskCloudComponent, selectors: [["adf-cloud-start-task"]], viewQuery: function StartTaskCloudComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c11, true);
        ɵngcc0.ɵɵviewQuery(_c9, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.assignee = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.candidateGroups = _t.first);
    } }, inputs: { appName: "appName", maxNameLength: "maxNameLength", name: "name" }, outputs: { success: "success", cancel: "cancel", error: "error" }, features: [ɵngcc0.ɵɵProvidersFeature([
            { provide: DateAdapter, useClass: MomentDateAdapter },
            { provide: MAT_DATE_FORMATS, useValue: ɵ0$2 }
        ])], decls: 49, vars: 36, consts: [["fxLayout", "row", "fxLayoutAlign", "start center", "fxLayoutGap", "10px", 1, "adf-cloud-start-task-heading"], ["fxLayout", "column", 3, "formGroup", "ngSubmit"], [1, "adf-task-name"], ["fxFlex", ""], ["matInput", "", "id", "name_id", "formControlName", "name", 1, "form-control"], [4, "ngIf"], ["fxLayout", "row", "fxLayout.lt-md", "column", "fxLayoutGap", "20px", "fxLayoutGap.lt-md", "0px"], ["matInput", "", "id", "description_id", "formControlName", "description", 1, "form-control"], ["fxFlex", "", 1, "adf-cloud-priority-container"], ["formControlName", "priority"], [3, "value", 4, "ngFor", "ngForOf"], ["matInput", "", "id", "date_id", 3, "matDatepicker", "placeholder", "ngModel", "ngModelOptions", "keydown", "focusout", "ngModelChange"], ["matSuffix", "", 3, "for"], [3, "touchUi", "dateChanged"], ["taskDatePicker", ""], [1, "adf-cloud-date-error-container"], ["fxFlex", "", 3, "appName", "preSelectUsers", "searchUserCtrl", "title", "selectUser", "removeUser", 4, "ngIf"], ["fxFlex", "", 3, "mode", "title", "appName", "searchGroupsControl", "selectGroup", "removeGroup", 4, "ngIf"], ["fxFlex", "", 3, "appName", "selectForm", 4, "ngIf"], ["fxLayout", "row", "fxLayoutAlign", "end end", 1, "adf-cloud-start-task-footer"], ["mat-button", "", "type", "button", "id", "button-cancel", 3, "click"], ["color", "primary", "type", "submit", "mat-button", "", "id", "button-start", 3, "disabled"], [3, "value"], [1, "adf-error-text"], [1, "adf-error-icon"], ["fxFlex", "", 3, "appName", "preSelectUsers", "searchUserCtrl", "title", "selectUser", "removeUser"], ["peopleInput", ""], ["fxFlex", "", 3, "mode", "title", "appName", "searchGroupsControl", "selectGroup", "removeGroup"], ["groupInput", ""], ["fxFlex", "", 3, "appName", "selectForm"]], template: function StartTaskCloudComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "mat-card");
        ɵngcc0.ɵɵelementStart(1, "mat-card-header", 0);
        ɵngcc0.ɵɵelementStart(2, "mat-card-title");
        ɵngcc0.ɵɵtext(3);
        ɵngcc0.ɵɵpipe(4, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(5, "form", 1);
        ɵngcc0.ɵɵlistener("ngSubmit", function StartTaskCloudComponent_Template_form_ngSubmit_5_listener() { return ctx.saveTask(); });
        ɵngcc0.ɵɵelementStart(6, "mat-card-content");
        ɵngcc0.ɵɵelementStart(7, "div", 2);
        ɵngcc0.ɵɵelementStart(8, "mat-form-field", 3);
        ɵngcc0.ɵɵelementStart(9, "mat-label");
        ɵngcc0.ɵɵtext(10);
        ɵngcc0.ɵɵpipe(11, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(12, "input", 4);
        ɵngcc0.ɵɵtemplate(13, StartTaskCloudComponent_mat_error_13_Template, 3, 3, "mat-error", 5);
        ɵngcc0.ɵɵtemplate(14, StartTaskCloudComponent_mat_error_14_Template, 3, 6, "mat-error", 5);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(15, "div", 6);
        ɵngcc0.ɵɵelementStart(16, "mat-form-field", 3);
        ɵngcc0.ɵɵelementStart(17, "mat-label");
        ɵngcc0.ɵɵtext(18);
        ɵngcc0.ɵɵpipe(19, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(20, "textarea", 7);
        ɵngcc0.ɵɵtext(21, "                    ");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(22, "mat-form-field", 8);
        ɵngcc0.ɵɵelementStart(23, "mat-label");
        ɵngcc0.ɵɵtext(24);
        ɵngcc0.ɵɵpipe(25, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(26, "mat-select", 9);
        ɵngcc0.ɵɵtemplate(27, StartTaskCloudComponent_mat_option_27_Template, 3, 4, "mat-option", 10);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(28, "div", 6);
        ɵngcc0.ɵɵelementStart(29, "mat-form-field", 3);
        ɵngcc0.ɵɵelementStart(30, "input", 11);
        ɵngcc0.ɵɵlistener("keydown", function StartTaskCloudComponent_Template_input_keydown_30_listener() { return true; })("focusout", function StartTaskCloudComponent_Template_input_focusout_30_listener($event) { return ctx.onDateChanged($event.srcElement.value); })("ngModelChange", function StartTaskCloudComponent_Template_input_ngModelChange_30_listener($event) { return ctx.dueDate = $event; });
        ɵngcc0.ɵɵpipe(31, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(32, "mat-datepicker-toggle", 12);
        ɵngcc0.ɵɵelementStart(33, "mat-datepicker", 13, 14);
        ɵngcc0.ɵɵlistener("dateChanged", function StartTaskCloudComponent_Template_mat_datepicker_dateChanged_33_listener($event) { return ctx.onDateChanged($event); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(35, "div", 15);
        ɵngcc0.ɵɵtemplate(36, StartTaskCloudComponent_div_36_Template, 6, 3, "div", 5);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(37, StartTaskCloudComponent_adf_cloud_people_37_Template, 2, 6, "adf-cloud-people", 16);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(38, "div", 6);
        ɵngcc0.ɵɵtemplate(39, StartTaskCloudComponent_adf_cloud_group_39_Template, 2, 4, "adf-cloud-group", 17);
        ɵngcc0.ɵɵtemplate(40, StartTaskCloudComponent_adf_cloud_form_definition_selector_40_Template, 1, 1, "adf-cloud-form-definition-selector", 18);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(41, "mat-card-actions");
        ɵngcc0.ɵɵelementStart(42, "div", 19);
        ɵngcc0.ɵɵelementStart(43, "button", 20);
        ɵngcc0.ɵɵlistener("click", function StartTaskCloudComponent_Template_button_click_43_listener() { return ctx.onCancel(); });
        ɵngcc0.ɵɵtext(44);
        ɵngcc0.ɵɵpipe(45, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(46, "button", 21);
        ɵngcc0.ɵɵtext(47);
        ɵngcc0.ɵɵpipe(48, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        const _r3 = ɵngcc0.ɵɵreference(34);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(4, 21, "ADF_CLOUD_TASK_LIST.START_TASK.FORM.TITLE"));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("formGroup", ctx.taskForm);
        ɵngcc0.ɵɵadvance(5);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(11, 23, "ADF_CLOUD_TASK_LIST.START_TASK.FORM.LABEL.NAME"));
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngIf", ctx.nameController.hasError("required"));
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.nameController.hasError("maxlength"));
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(19, 25, "ADF_CLOUD_TASK_LIST.START_TASK.FORM.LABEL.DESCRIPTION"));
        ɵngcc0.ɵɵadvance(6);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(25, 27, "ADF_CLOUD_TASK_LIST.START_TASK.FORM.LABEL.PRIORITY"));
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.priorities);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵpropertyInterpolate("placeholder", ɵngcc0.ɵɵpipeBind1(31, 29, "ADF_CLOUD_TASK_LIST.START_TASK.FORM.LABEL.DATE"));
        ɵngcc0.ɵɵproperty("matDatepicker", _r3)("ngModel", ctx.dueDate)("ngModelOptions", ɵngcc0.ɵɵpureFunction0(35, _c14));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("for", _r3);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("touchUi", true);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngIf", ctx.dateError);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.currentUser);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.currentUser);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.appName);
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(45, 31, "ADF_CLOUD_TASK_LIST.START_TASK.FORM.ACTION.CANCEL"), " ");
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("disabled", !ctx.canStartTask());
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(48, 33, "ADF_CLOUD_TASK_LIST.START_TASK.FORM.ACTION.START"), " ");
    } }, directives: function () { return [ɵngcc1.MatCard, ɵngcc1.MatCardHeader, ɵngcc2.DefaultLayoutDirective, ɵngcc2.DefaultLayoutAlignDirective, ɵngcc2.DefaultLayoutGapDirective, ɵngcc1.MatCardTitle, ɵngcc17.ɵangular_packages_forms_forms_y, ɵngcc17.NgControlStatusGroup, ɵngcc17.FormGroupDirective, ɵngcc1.MatCardContent, ɵngcc14.MatFormField, ɵngcc2.DefaultFlexDirective, ɵngcc14.MatLabel, ɵngcc21.MatInput, ɵngcc17.DefaultValueAccessor, ɵngcc17.NgControlStatus, ɵngcc17.FormControlName, ɵngcc3.NgIf, ɵngcc15.MatSelect, ɵngcc3.NgForOf, ɵngcc16.MatDatepickerInput, ɵngcc17.NgModel, ɵngcc16.MatDatepickerToggle, ɵngcc14.MatSuffix, ɵngcc16.MatDatepicker, ɵngcc1.MatCardActions, ɵngcc13.MatButton, ɵngcc14.MatError, ɵngcc8.MatOption, ɵngcc5.MatIcon, PeopleCloudComponent, GroupCloudComponent, FormDefinitionSelectorCloudComponent]; }, pipes: function () { return [ɵngcc10.TranslatePipe]; }, styles: [".adf-cloud-start-task-heading{border-bottom:1px solid var(--theme-fg-divider);margin-bottom:10px}.adf-cloud-start-task-heading .mat-card-title{font-size:18px;font-weight:700}.adf-cloud-priority-container{padding-top:1.1em}.adf-cloud-date-error-container{height:20px;margin-top:12px;position:absolute;width:100%}.adf-cloud-date-error-container>div{display:flex;flex-flow:row;justify-content:flex-start}.adf-cloud-date-error-container .adf-error-text{color:var(--theme-warn-color);font-size:12px;height:16px;line-height:1.33;padding-right:8px;width:auto}.adf-cloud-date-error-container .adf-error-icon{color:var(--theme-warn-color);font-size:17px}.adf-cloud-start-task-footer{border-top:1px solid #eee;font-size:18px;padding:4px}adf-cloud-start-task .adf-cloud-start-task-footer .mat-button{text-transform:uppercase!important}"], encapsulation: 2 });
StartTaskCloudComponent.MAX_NAME_LENGTH = 255;
StartTaskCloudComponent.ctorParameters = () => [
    { type: TaskCloudService },
    { type: DateAdapter },
    { type: UserPreferencesService },
    { type: FormBuilder },
    { type: IdentityUserService },
    { type: LogService }
];
StartTaskCloudComponent.propDecorators = {
    appName: [{ type: Input }],
    maxNameLength: [{ type: Input }],
    name: [{ type: Input }],
    success: [{ type: Output }],
    cancel: [{ type: Output }],
    error: [{ type: Output }],
    assignee: [{ type: ViewChild, args: ['peopleInput',] }],
    candidateGroups: [{ type: ViewChild, args: ['groupInput',] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(StartTaskCloudComponent, [{
        type: Component,
        args: [{
                selector: 'adf-cloud-start-task',
                template: "<mat-card>\n    <mat-card-header fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"10px\"\n                     class=\"adf-cloud-start-task-heading\">\n        <mat-card-title>{{'ADF_CLOUD_TASK_LIST.START_TASK.FORM.TITLE' | translate}}</mat-card-title>\n    </mat-card-header>\n    <form [formGroup]=\"taskForm\" fxLayout=\"column\" (ngSubmit)=\"saveTask()\">\n\n        <mat-card-content>\n            <div class=\"adf-task-name\">\n                <mat-form-field fxFlex>\n                    <mat-label>{{'ADF_CLOUD_TASK_LIST.START_TASK.FORM.LABEL.NAME' | translate }}</mat-label>\n                    <input\n                        matInput\n                        id=\"name_id\"\n                        class=\"form-control\"\n                        formControlName=\"name\">\n                    <mat-error *ngIf=\"nameController.hasError('required')\">\n                        {{ 'ADF_CLOUD_START_TASK.ERROR.REQUIRED' | translate }}\n                    </mat-error>\n                    <mat-error *ngIf=\"nameController.hasError('maxlength')\">\n                        {{ 'ADF_CLOUD_START_TASK.ERROR.MAXIMUM_LENGTH' | translate : {characters: maxNameLength} }}\n                    </mat-error>\n                </mat-form-field>\n            </div>\n            <div fxLayout=\"row\" fxLayout.lt-md=\"column\" fxLayoutGap=\"20px\" fxLayoutGap.lt-md=\"0px\">\n                <mat-form-field fxFlex>\n                    <mat-label>{{'ADF_CLOUD_TASK_LIST.START_TASK.FORM.LABEL.DESCRIPTION' | translate}}</mat-label>\n                    <textarea\n                        matInput\n                        class=\"form-control\"\n                        id=\"description_id\"\n                        formControlName=\"description\">\n                    </textarea>\n                </mat-form-field>\n\n                <mat-form-field fxFlex class=\"adf-cloud-priority-container\">\n                    <mat-label>{{ 'ADF_CLOUD_TASK_LIST.START_TASK.FORM.LABEL.PRIORITY' | translate }}</mat-label>\n                    <mat-select formControlName=\"priority\">\n                        <mat-option *ngFor=\"let priorityOption of priorities\" [value]=\"priorityOption.value\">{{ priorityOption.label | translate }}</mat-option>\n                    </mat-select>\n                </mat-form-field>\n            </div>\n            <div fxLayout=\"row\" fxLayout.lt-md=\"column\" fxLayoutGap=\"20px\" fxLayoutGap.lt-md=\"0px\">\n                <mat-form-field fxFlex>\n                    <input matInput\n                           [matDatepicker]=\"taskDatePicker\"\n                           (keydown)=\"true\"\n                           (focusout)=\"onDateChanged($any($event).srcElement.value)\"\n                           placeholder=\"{{'ADF_CLOUD_TASK_LIST.START_TASK.FORM.LABEL.DATE'|translate}}\"\n                           [(ngModel)]=\"dueDate\"\n                           [ngModelOptions]=\"{standalone: true}\"\n                           id=\"date_id\">\n                    <mat-datepicker-toggle matSuffix [for]=\"taskDatePicker\"></mat-datepicker-toggle>\n                    <mat-datepicker #taskDatePicker\n                                    [touchUi]=\"true\"\n                                    (dateChanged)=\"onDateChanged($event)\">\n                    </mat-datepicker>\n                    <div class=\"adf-cloud-date-error-container\">\n                        <div *ngIf=\"dateError\">\n                            <div class=\"adf-error-text\">{{'ADF_CLOUD_START_TASK.ERROR.DATE' | translate}}</div>\n                            <mat-icon class=\"adf-error-icon\">warning</mat-icon>\n                        </div>\n                    </div>\n                </mat-form-field>\n                <adf-cloud-people fxFlex #peopleInput *ngIf=\"currentUser\"\n                                  [appName]=\"appName\"\n                                  [preSelectUsers]=\"[currentUser]\"\n                                  [searchUserCtrl]=\"assigneeFormControl\"\n                                  (selectUser)=\"onAssigneeSelect($event)\"\n                                  [title]=\"'ADF_CLOUD_TASK_LIST.START_TASK.FORM.LABEL.ASSIGNEE'\"\n                                  (removeUser)=\"onAssigneeRemove()\"></adf-cloud-people>\n            </div>\n\n            <div fxLayout=\"row\" fxLayout.lt-md=\"column\" fxLayoutGap=\"20px\" fxLayoutGap.lt-md=\"0px\">\n                <adf-cloud-group fxFlex #groupInput *ngIf=\"currentUser\"\n                                 [mode]=\"'multiple'\"\n                                 [title]=\"'ADF_CLOUD_TASK_LIST.START_TASK.FORM.LABEL.CANDIDATE_GROUP'\"\n                                 [appName]=\"appName\"\n                                 [searchGroupsControl]=\"candidateUserFormControl\"\n                                 (selectGroup)=\"onCandidateGroupSelect($event)\"\n                                 (removeGroup)=\"onCandidateGroupRemove($event)\">\n                </adf-cloud-group>\n                <adf-cloud-form-definition-selector *ngIf=\"appName\"\n                                                    fxFlex\n                                                    [appName]=\"appName\"\n                                                    (selectForm)=\"onFormSelect($event)\">\n                </adf-cloud-form-definition-selector>\n            </div>\n        </mat-card-content>\n\n        <mat-card-actions>\n            <div class=\"adf-cloud-start-task-footer\" fxLayout=\"row\" fxLayoutAlign=\"end end\">\n                <button\n                    mat-button\n                    type=\"button\"\n                    (click)=\"onCancel()\"\n                    id=\"button-cancel\">\n                    {{'ADF_CLOUD_TASK_LIST.START_TASK.FORM.ACTION.CANCEL'|translate}}\n                </button>\n                <button\n                    color=\"primary\"\n                    type=\"submit\"\n                    [disabled]=\"!canStartTask()\"\n                    mat-button\n                    id=\"button-start\">\n                    {{'ADF_CLOUD_TASK_LIST.START_TASK.FORM.ACTION.START'|translate}}\n                </button>\n            </div>\n        </mat-card-actions>\n    </form>\n</mat-card>\n",
                providers: [
                    { provide: DateAdapter, useClass: MomentDateAdapter },
                    { provide: MAT_DATE_FORMATS, useValue: ɵ0$2 }
                ],
                encapsulation: ViewEncapsulation.None,
                styles: [".adf-cloud-start-task-heading{border-bottom:1px solid var(--theme-fg-divider);margin-bottom:10px}.adf-cloud-start-task-heading .mat-card-title{font-size:18px;font-weight:700}.adf-cloud-priority-container{padding-top:1.1em}.adf-cloud-date-error-container{height:20px;margin-top:12px;position:absolute;width:100%}.adf-cloud-date-error-container>div{display:flex;flex-flow:row;justify-content:flex-start}.adf-cloud-date-error-container .adf-error-text{color:var(--theme-warn-color);font-size:12px;height:16px;line-height:1.33;padding-right:8px;width:auto}.adf-cloud-date-error-container .adf-error-icon{color:var(--theme-warn-color);font-size:17px}.adf-cloud-start-task-footer{border-top:1px solid #eee;font-size:18px;padding:4px}adf-cloud-start-task .adf-cloud-start-task-footer .mat-button{text-transform:uppercase!important}"]
            }]
    }], function () { return [{ type: TaskCloudService }, { type: ɵngcc8.DateAdapter }, { type: ɵngcc6.UserPreferencesService }, { type: ɵngcc17.FormBuilder }, { type: ɵngcc6.IdentityUserService }, { type: ɵngcc6.LogService }]; }, { appName: [{
            type: Input
        }], maxNameLength: [{
            type: Input
        }], name: [{
            type: Input
        }], success: [{
            type: Output
        }], cancel: [{
            type: Output
        }], error: [{
            type: Output
        }], assignee: [{
            type: ViewChild,
            args: ['peopleInput']
        }], candidateGroups: [{
            type: ViewChild,
            args: ['groupInput']
        }] }); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class TaskVariableCloud {
    constructor(obj) {
        this.id = obj.name || null;
        this.name = obj.name || null;
        this.value = this.hasValue(obj) ? obj.value : null;
        this.type = obj.type || null;
    }
    hasValue(obj) {
        return typeof obj.value !== undefined && obj.value !== null;
    }
}

class FormCloudService extends BaseCloudService {
    constructor(apiService, appConfigService) {
        super(apiService, appConfigService);
    }
    get uploadApi() {
        var _a;
        this._uploadApi = (_a = this._uploadApi) !== null && _a !== void 0 ? _a : new UploadApi(this.apiService.getInstance());
        return this._uploadApi;
    }
    getTaskForm(appName, taskId, version) {
        return this.getTask(appName, taskId).pipe(switchMap(task => {
            return this.getForm(appName, task.formKey, version).pipe(map((form) => {
                const flattenForm = Object.assign(Object.assign(Object.assign({}, form.formRepresentation), form.formRepresentation.formDefinition), { taskId: task.id, taskName: task.name, processDefinitionId: task.processDefinitionId, processInstanceId: task.processInstanceId });
                delete flattenForm.formDefinition;
                return flattenForm;
            }));
        }));
    }
    saveTaskForm(appName, taskId, processInstanceId, formId, values) {
        const apiUrl = `${this.getBasePath(appName)}/form/v1/forms/${formId}/save`;
        const saveFormRepresentation = {
            values,
            taskId,
            processInstanceId
        };
        return this.post(apiUrl, saveFormRepresentation).pipe(map((res) => res.entry));
    }
    createTemporaryRawRelatedContent(file, nodeId, contentHost) {
        const changedConfig = this.apiService.lastConfig;
        changedConfig.provider = 'ALL';
        changedConfig.hostEcm = contentHost.replace('/alfresco', '');
        this.apiService.getInstance().setConfig(changedConfig);
        return from(this.uploadApi.uploadFile(file, '', nodeId, '', { overwrite: true })).pipe(map((res) => res.entry));
    }
    completeTaskForm(appName, taskId, processInstanceId, formId, formValues, outcome, version) {
        const apiUrl = `${this.getBasePath(appName)}/form/v1/forms/${formId}/submit/versions/${version}`;
        const completeFormRepresentation = {
            values: formValues,
            taskId: taskId,
            processInstanceId: processInstanceId
        };
        if (outcome) {
            completeFormRepresentation.outcome = outcome;
        }
        return this.post(apiUrl, completeFormRepresentation).pipe(map((res) => res.entry));
    }
    getTask(appName, taskId) {
        const apiUrl = `${this.getBasePath(appName)}/query/v1/tasks/${taskId}`;
        return this.get(apiUrl).pipe(map((res) => res.entry));
    }
    getTaskVariables(appName, taskId) {
        const apiUrl = `${this.getBasePath(appName)}/query/v1/tasks/${taskId}/variables`;
        return this.get(apiUrl).pipe(map((res) => {
            return res.list.entries.map((variable) => new TaskVariableCloud(variable.entry));
        }));
    }
    getForm(appName, formKey, version) {
        let url = `${this.getBasePath(appName)}/form/v1/forms/${formKey}`;
        if (version) {
            url += `/versions/${version}`;
        }
        return this.get(url);
    }
    getRestWidgetData(formName, widgetId, body = {}) {
        var _a;
        const appName = (_a = this.appConfigService.get('alfresco-deployed-apps')[0]) === null || _a === void 0 ? void 0 : _a.name;
        const apiUrl = `${this.getBasePath(appName)}/form/v1/forms/${formName}/values/${widgetId}`;
        return this.post(apiUrl, body);
    }
    parseForm(json, data, readOnly = false) {
        if (json) {
            const flattenForm = Object.assign(Object.assign({}, json.formRepresentation), json.formRepresentation.formDefinition);
            delete flattenForm.formDefinition;
            const formValues = {};
            (data || []).forEach(variable => {
                formValues[variable.name] = variable.value;
            });
            const form = new FormModel(flattenForm, formValues, readOnly);
            if (!json.fields) {
                form.outcomes = [
                    new FormOutcomeModel(form, {
                        id: '$save',
                        name: FormOutcomeModel.SAVE_ACTION,
                        isSystem: true
                    })
                ];
            }
            return form;
        }
        return null;
    }
}
FormCloudService.ɵfac = function FormCloudService_Factory(t) { return new (t || FormCloudService)(ɵngcc0.ɵɵinject(ɵngcc6.AlfrescoApiService), ɵngcc0.ɵɵinject(ɵngcc6.AppConfigService)); };
FormCloudService.ɵprov = ɵɵdefineInjectable({ factory: function FormCloudService_Factory() { return new FormCloudService(ɵɵinject(AlfrescoApiService), ɵɵinject(AppConfigService)); }, token: FormCloudService, providedIn: "root" });
FormCloudService.ctorParameters = () => [
    { type: AlfrescoApiService },
    { type: AppConfigService }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FormCloudService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc6.AlfrescoApiService }, { type: ɵngcc6.AppConfigService }]; }, null); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class FormCloudComponent extends FormBaseComponent {
    constructor(formCloudService, formService, visibilityService) {
        super();
        this.formCloudService = formCloudService;
        this.formService = formService;
        this.visibilityService = visibilityService;
        this.appName = '';
        this.fieldValidators = [...FORM_FIELD_VALIDATORS];
        this.formSaved = new EventEmitter();
        this.formCompleted = new EventEmitter();
        this.formLoaded = new EventEmitter();
        this.formDataRefreshed = new EventEmitter();
        this.formContentClicked = new EventEmitter();
        this.subscriptions = [];
        this.onDestroy$ = new Subject();
        this.formService.formContentClicked
            .pipe(takeUntil(this.onDestroy$))
            .subscribe((content) => {
            if (content instanceof UploadWidgetContentLinkModel) {
                this.form.setNodeIdValueForViewersLinkedToUploadWidget(content);
                this.onFormDataRefreshed(this.form);
            }
            else {
                this.formContentClicked.emit(content);
            }
        });
        this.formService.updateFormValuesRequested
            .pipe(takeUntil(this.onDestroy$))
            .subscribe((valuesToSetIfNotPresent) => {
            this.form.addValuesNotPresent(valuesToSetIfNotPresent);
            this.onFormDataRefreshed(this.form);
        });
    }
    onKeyDown(event) {
        event.cancelBubble = true;
    }
    ngOnChanges(changes) {
        const appName = changes['appName'];
        if (appName && appName.currentValue) {
            if (this.taskId) {
                this.getFormByTaskId(appName.currentValue, this.taskId, this.appVersion);
            }
            else if (this.formId) {
                this.getFormById(appName.currentValue, this.formId, this.appVersion);
            }
            return;
        }
        const formId = changes['formId'];
        if (formId && formId.currentValue && this.appName) {
            this.getFormById(this.appName, formId.currentValue, this.appVersion);
            return;
        }
        const taskId = changes['taskId'];
        if (taskId && taskId.currentValue && this.appName) {
            this.getFormByTaskId(this.appName, taskId.currentValue, this.appVersion);
            return;
        }
        const data = changes['data'];
        if (data && data.currentValue) {
            this.refreshFormData();
            return;
        }
    }
    onRefreshClicked() {
        this.loadForm();
    }
    loadForm() {
        if (this.appName && this.taskId) {
            this.getFormByTaskId(this.appName, this.taskId, this.appVersion);
        }
        else if (this.appName && this.formId) {
            this.getFormById(this.appName, this.formId, this.appVersion);
        }
    }
    findProcessVariablesByTaskId(appName, taskId) {
        return this.formCloudService.getTask(appName, taskId).pipe(switchMap(task => {
            if (this.isAProcessTask(task)) {
                return this.formCloudService.getTaskVariables(appName, taskId);
            }
            else {
                return of([]);
            }
        }));
    }
    isAProcessTask(taskRepresentation) {
        return taskRepresentation.processDefinitionId && taskRepresentation.processDefinitionDeploymentId !== 'null';
    }
    getFormByTaskId(appName, taskId, version) {
        return new Promise(resolve => {
            forkJoin(this.formCloudService.getTaskForm(appName, taskId, version), this.formCloudService.getTaskVariables(appName, taskId))
                .pipe(takeUntil(this.onDestroy$))
                .subscribe((data) => {
                this.formCloudRepresentationJSON = data[0];
                this.formCloudRepresentationJSON.processVariables = data[1];
                this.data = data[1];
                const parsedForm = this.parseForm(this.formCloudRepresentationJSON);
                this.visibilityService.refreshVisibility(parsedForm, this.data);
                parsedForm.validateForm();
                this.form = parsedForm;
                this.form.nodeId = '-my-';
                this.onFormLoaded(this.form);
                resolve(this.form);
            }, (error) => {
                this.handleError(error);
                resolve(null);
            });
        });
    }
    getFormById(appName, formId, appVersion) {
        this.formCloudService
            .getForm(appName, formId, appVersion)
            .pipe(map((form) => {
            const flattenForm = Object.assign(Object.assign({}, form.formRepresentation), form.formRepresentation.formDefinition);
            delete flattenForm.formDefinition;
            return flattenForm;
        }), takeUntil(this.onDestroy$))
            .subscribe((form) => {
            this.formCloudRepresentationJSON = form;
            const parsedForm = this.parseForm(form);
            this.visibilityService.refreshVisibility(parsedForm);
            parsedForm.validateForm();
            this.form = parsedForm;
            this.form.nodeId = '-my-';
            this.onFormLoaded(this.form);
        }, (error) => {
            this.handleError(error);
        });
    }
    saveTaskForm() {
        if (this.form && this.appName && this.taskId) {
            this.formCloudService
                .saveTaskForm(this.appName, this.taskId, this.processInstanceId, `${this.form.id}`, this.form.values)
                .pipe(takeUntil(this.onDestroy$))
                .subscribe(() => {
                this.onTaskSaved(this.form);
            }, (error) => this.onTaskSavedError(error));
        }
    }
    completeTaskForm(outcome) {
        if (this.form && this.appName && this.taskId) {
            this.formCloudService
                .completeTaskForm(this.appName, this.taskId, this.processInstanceId, `${this.form.id}`, this.form.values, outcome, this.appVersion)
                .pipe(takeUntil(this.onDestroy$))
                .subscribe(() => {
                this.onTaskCompleted(this.form);
            }, (error) => this.onTaskCompletedError(error));
        }
    }
    parseForm(formCloudRepresentationJSON) {
        if (formCloudRepresentationJSON) {
            const formValues = {};
            (this.data || []).forEach(variable => {
                formValues[variable.name] = variable.value;
            });
            const form = new FormModel(formCloudRepresentationJSON, formValues, this.readOnly);
            if (!form) {
                form.outcomes = this.getFormDefinitionOutcomes(form);
            }
            if (this.fieldValidators && this.fieldValidators.length > 0) {
                form.fieldValidators = this.fieldValidators;
            }
            return form;
        }
        return null;
    }
    getFormDefinitionOutcomes(form) {
        return [
            new FormOutcomeModel(form, { id: '$save', name: FormOutcomeModel.SAVE_ACTION, isSystem: true })
        ];
    }
    checkVisibility(field) {
        if (field && field.form) {
            this.visibilityService.refreshVisibility(field.form);
        }
    }
    refreshFormData() {
        this.form = this.parseForm(this.formCloudRepresentationJSON);
        this.onFormLoaded(this.form);
        this.onFormDataRefreshed(this.form);
    }
    onFormLoaded(form) {
        this.formLoaded.emit(form);
    }
    onFormDataRefreshed(form) {
        this.formDataRefreshed.emit(form);
    }
    onTaskSaved(form) {
        this.formSaved.emit(form);
    }
    onTaskSavedError(error) {
        this.handleError(error);
    }
    onTaskCompleted(form) {
        this.formCompleted.emit(form);
    }
    onTaskCompletedError(error) {
        this.handleError(error);
    }
    onExecuteOutcome(outcome) {
        const args = new FormOutcomeEvent(outcome);
        if (args.defaultPrevented) {
            return false;
        }
        this.executeOutcome.emit(args);
        return !args.defaultPrevented;
    }
    storeFormAsMetadata() {
    }
    ngOnDestroy() {
        this.onDestroy$.next(true);
        this.onDestroy$.complete();
    }
}
FormCloudComponent.ɵfac = function FormCloudComponent_Factory(t) { return new (t || FormCloudComponent)(ɵngcc0.ɵɵdirectiveInject(FormCloudService), ɵngcc0.ɵɵdirectiveInject(ɵngcc6.FormService), ɵngcc0.ɵɵdirectiveInject(ɵngcc6.WidgetVisibilityService)); };
FormCloudComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: FormCloudComponent, selectors: [["adf-cloud-form"]], hostBindings: function FormCloudComponent_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("keydown", function FormCloudComponent_keydown_HostBindingHandler($event) { return ctx.onKeyDown($event); });
    } }, inputs: { appName: "appName", fieldValidators: "fieldValidators", data: "data", form: "form", appVersion: "appVersion", formId: "formId", processInstanceId: "processInstanceId", taskId: "taskId" }, outputs: { formSaved: "formSaved", formCompleted: "formCompleted", formLoaded: "formLoaded", formDataRefreshed: "formDataRefreshed", formContentClicked: "formContentClicked" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature], ngContentSelectors: _c16, decls: 2, vars: 2, consts: [[4, "ngIf"], ["class", "adf-form-container", 4, "ngIf"], [1, "adf-form-container"], [3, "formDefinition"], ["class", "adf-form-mat-card-actions", 4, "ngIf"], ["class", "adf-form-validation-button", 4, "ngIf"], ["class", "adf-form-reload-button", 4, "ngIf"], ["class", "adf-form-title", 3, "matTooltip", 4, "ngIf"], [1, "adf-form-validation-button"], ["id", "adf-valid-form-icon", "class", "material-icons", 4, "ngIf", "ngIfElse"], ["no_valid_form", ""], ["id", "adf-valid-form-icon", 1, "material-icons"], ["id", "adf-invalid-form-icon", 1, "material-icons", "adf-invalid-color"], [1, "adf-form-reload-button"], ["mat-icon-button", "", 3, "click"], [1, "adf-form-title", 3, "matTooltip"], [1, "adf-form-mat-card-actions"], [4, "ngFor", "ngForOf"], ["mat-button", "", 3, "id", "color", "disabled", "adf-form-hide-button", "click", 4, "ngIf"], ["mat-button", "", 3, "id", "color", "disabled", "click"]], template: function FormCloudComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef(_c15);
        ɵngcc0.ɵɵtemplate(0, FormCloudComponent_div_0_Template, 2, 0, "div", 0);
        ɵngcc0.ɵɵtemplate(1, FormCloudComponent_div_1_Template, 6, 3, "div", 1);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngIf", !ctx.hasForm());
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.hasForm());
    } }, directives: [ɵngcc3.NgIf, ɵngcc1.MatCard, ɵngcc1.MatCardContent, ɵngcc6.FormRendererComponent, ɵngcc1.MatCardHeader, ɵngcc1.MatCardTitle, ɵngcc13.MatButton, ɵngcc5.MatIcon, ɵngcc20.MatTooltip, ɵngcc1.MatCardActions, ɵngcc3.NgForOf], pipes: [ɵngcc10.TranslatePipe, ɵngcc6.FormatSpacePipe, ɵngcc3.UpperCasePipe], encapsulation: 2 });
FormCloudComponent.ctorParameters = () => [
    { type: FormCloudService },
    { type: FormService },
    { type: WidgetVisibilityService }
];
FormCloudComponent.propDecorators = {
    appName: [{ type: Input }],
    appVersion: [{ type: Input }],
    formId: [{ type: Input }],
    processInstanceId: [{ type: Input }],
    form: [{ type: Input }],
    taskId: [{ type: Input }],
    data: [{ type: Input }],
    fieldValidators: [{ type: Input }],
    formSaved: [{ type: Output }],
    formCompleted: [{ type: Output }],
    formLoaded: [{ type: Output }],
    formDataRefreshed: [{ type: Output }],
    formContentClicked: [{ type: Output }],
    onKeyDown: [{ type: HostListener, args: ['keydown', ['$event'],] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FormCloudComponent, [{
        type: Component,
        args: [{
                selector: 'adf-cloud-form',
                template: "<div *ngIf=\"!hasForm()\">\n    <ng-content select=\"[empty-form]\">\n    </ng-content>\n</div>\n\n<div *ngIf=\"hasForm()\" class=\"adf-form-container\">\n    <mat-card>\n        <mat-card-header *ngIf=\"showTitle || showRefreshButton || showValidationIcon\">\n            <mat-card-title>\n                <h4>\n                    <div *ngIf=\"showValidationIcon\" class=\"adf-form-validation-button\">\n                        <i id=\"adf-valid-form-icon\" class=\"material-icons\"\n                            *ngIf=\"form.isValid; else no_valid_form\">check_circle</i>\n                        <ng-template #no_valid_form>\n                            <i id=\"adf-invalid-form-icon\" class=\"material-icons adf-invalid-color\">error</i>\n                        </ng-template>\n                    </div>\n                    <div *ngIf=\"showRefreshButton\" class=\"adf-form-reload-button\">\n                        <button mat-icon-button (click)=\"onRefreshClicked()\">\n                            <mat-icon>refresh</mat-icon>\n                        </button>\n                    </div>\n                    <span *ngIf=\"isTitleEnabled()\" class=\"adf-form-title\" [matTooltip]=\"form.taskName\">\n                        {{form.taskName}}\n                        <ng-container *ngIf=\"!form.taskName\">\n                            {{'FORM.FORM_RENDERER.NAMELESS_TASK' | translate}}\n                        </ng-container>\n                    </span>\n\n                </h4>\n            </mat-card-title>\n        </mat-card-header>\n        <mat-card-content>\n            <adf-form-renderer [formDefinition]=\"form\">\n            </adf-form-renderer>\n        </mat-card-content>\n        <mat-card-actions *ngIf=\"form.hasOutcomes()\" class=\"adf-form-mat-card-actions\">\n            <ng-content select=\"adf-cloud-form-custom-outcomes\"></ng-content>\n            <ng-container *ngFor=\"let outcome of form.outcomes\">\n                <button *ngIf=\"outcome.isVisible\" [id]=\"'adf-form-'+ outcome.name  | formatSpace\" [color]=\"getColorForOutcome(outcome.name)\"\n                    mat-button [disabled]=\"!isOutcomeButtonEnabled(outcome)\"\n                    [class.adf-form-hide-button]=\"!isOutcomeButtonVisible(outcome, form.readOnly)\"\n                    (click)=\"onOutcomeClicked(outcome)\">\n                    {{outcome.name | translate | uppercase }}\n                </button>\n            </ng-container>\n        </mat-card-actions>\n    </mat-card>\n</div>\n"
            }]
    }], function () { return [{ type: FormCloudService }, { type: ɵngcc6.FormService }, { type: ɵngcc6.WidgetVisibilityService }]; }, { appName: [{
            type: Input
        }], fieldValidators: [{
            type: Input
        }], formSaved: [{
            type: Output
        }], formCompleted: [{
            type: Output
        }], formLoaded: [{
            type: Output
        }], formDataRefreshed: [{
            type: Output
        }], formContentClicked: [{
            type: Output
        }], onKeyDown: [{
            type: HostListener,
            args: ['keydown', ['$event']]
        }], data: [{
            type: Input
        }], form: [{
            type: Input
        }], appVersion: [{
            type: Input
        }], formId: [{
            type: Input
        }], processInstanceId: [{
            type: Input
        }], taskId: [{
            type: Input
        }] }); })();

class FormDefinitionSelectorCloudService extends BaseCloudService {
    constructor(apiService, appConfigService) {
        super(apiService, appConfigService);
    }
    getForms(appName) {
        const url = `${this.getBasePath(appName)}/form/v1/forms`;
        return this.get(url).pipe(map((data) => {
            return data.map((formData) => {
                return formData.formRepresentation;
            });
        }));
    }
    getStandAloneTaskForms(appName) {
        return from(this.getForms(appName)).pipe(map((data) => {
            return data.filter((formData) => formData.standalone || formData.standalone === undefined);
        }));
    }
}
FormDefinitionSelectorCloudService.ɵfac = function FormDefinitionSelectorCloudService_Factory(t) { return new (t || FormDefinitionSelectorCloudService)(ɵngcc0.ɵɵinject(ɵngcc6.AlfrescoApiService), ɵngcc0.ɵɵinject(ɵngcc6.AppConfigService)); };
FormDefinitionSelectorCloudService.ɵprov = ɵɵdefineInjectable({ factory: function FormDefinitionSelectorCloudService_Factory() { return new FormDefinitionSelectorCloudService(ɵɵinject(AlfrescoApiService), ɵɵinject(AppConfigService)); }, token: FormDefinitionSelectorCloudService, providedIn: "root" });
FormDefinitionSelectorCloudService.ctorParameters = () => [
    { type: AlfrescoApiService },
    { type: AppConfigService }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FormDefinitionSelectorCloudService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc6.AlfrescoApiService }, { type: ɵngcc6.AppConfigService }]; }, null); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class FormDefinitionSelectorCloudComponent {
    constructor(formDefinitionCloudService) {
        this.formDefinitionCloudService = formDefinitionCloudService;
        this.appName = '';
        this.selectForm = new EventEmitter();
    }
    ngOnInit() {
        this.forms$ = this.formDefinitionCloudService.getStandAloneTaskForms(this.appName);
    }
    onSelect(event) {
        this.selectForm.emit(event.value);
    }
}
FormDefinitionSelectorCloudComponent.ɵfac = function FormDefinitionSelectorCloudComponent_Factory(t) { return new (t || FormDefinitionSelectorCloudComponent)(ɵngcc0.ɵɵdirectiveInject(FormDefinitionSelectorCloudService)); };
FormDefinitionSelectorCloudComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: FormDefinitionSelectorCloudComponent, selectors: [["adf-cloud-form-definition-selector"]], inputs: { appName: "appName" }, outputs: { selectForm: "selectForm" }, decls: 10, vars: 10, consts: [[1, "adf-form-definition-selector"], [1, "adf-form-selector-dropdown", 3, "selectionChange"], [3, "value"], [3, "value", 4, "ngFor", "ngForOf"]], template: function FormDefinitionSelectorCloudComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "mat-form-field", 0);
        ɵngcc0.ɵɵelementStart(1, "mat-label");
        ɵngcc0.ɵɵtext(2);
        ɵngcc0.ɵɵpipe(3, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(4, "mat-select", 1);
        ɵngcc0.ɵɵlistener("selectionChange", function FormDefinitionSelectorCloudComponent_Template_mat_select_selectionChange_4_listener($event) { return ctx.onSelect($event); });
        ɵngcc0.ɵɵelementStart(5, "mat-option", 2);
        ɵngcc0.ɵɵtext(6);
        ɵngcc0.ɵɵpipe(7, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(8, FormDefinitionSelectorCloudComponent_mat_option_8_Template, 2, 2, "mat-option", 3);
        ɵngcc0.ɵɵpipe(9, "async");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(3, 4, "ADF_CLOUD_TASK_LIST.START_TASK.FORM.LABEL.FORM"));
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("value", "");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(7, 6, "ADF_CLOUD_TASK_LIST.START_TASK.FORM.LABEL.NONE"));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngForOf", ɵngcc0.ɵɵpipeBind1(9, 8, ctx.forms$));
    } }, directives: [ɵngcc14.MatFormField, ɵngcc14.MatLabel, ɵngcc15.MatSelect, ɵngcc8.MatOption, ɵngcc3.NgForOf], pipes: [ɵngcc10.TranslatePipe, ɵngcc3.AsyncPipe], styles: [".adf-form-definition-selector[_ngcontent-%COMP%]{width:100%}"] });
FormDefinitionSelectorCloudComponent.ctorParameters = () => [
    { type: FormDefinitionSelectorCloudService }
];
FormDefinitionSelectorCloudComponent.propDecorators = {
    appName: [{ type: Input }],
    selectForm: [{ type: Output }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FormDefinitionSelectorCloudComponent, [{
        type: Component,
        args: [{
                selector: 'adf-cloud-form-definition-selector',
                template: "<mat-form-field class=\"adf-form-definition-selector\">\n    <mat-label>{{'ADF_CLOUD_TASK_LIST.START_TASK.FORM.LABEL.FORM'|translate}}</mat-label>\n    <mat-select class=\"adf-form-selector-dropdown\" (selectionChange)=\"onSelect($event)\">\n        <mat-option [value]=\"''\">{{'ADF_CLOUD_TASK_LIST.START_TASK.FORM.LABEL.NONE'|translate}}</mat-option>\n        <mat-option *ngFor=\"let form of forms$ | async\" [value]=\"form.id\">{{ form.name }}</mat-option>\n    </mat-select>\n</mat-form-field>\n",
                styles: [".adf-form-definition-selector{width:100%}"]
            }]
    }], function () { return [{ type: FormDefinitionSelectorCloudService }]; }, { appName: [{
            type: Input
        }], selectForm: [{
            type: Output
        }] }); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class FormCustomOutcomesComponent {
}
FormCustomOutcomesComponent.ɵfac = function FormCustomOutcomesComponent_Factory(t) { return new (t || FormCustomOutcomesComponent)(); };
FormCustomOutcomesComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: FormCustomOutcomesComponent, selectors: [["adf-cloud-form-custom-outcomes"]], ngContentSelectors: _c17, decls: 1, vars: 0, template: function FormCustomOutcomesComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FormCustomOutcomesComponent, [{
        type: Component,
        args: [{
                selector: 'adf-cloud-form-custom-outcomes',
                template: '<ng-content></ng-content>'
            }]
    }], null, null); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const ɵ0$3 = MOMENT_DATE_FORMATS;
class DateCloudWidgetComponent extends WidgetComponent {
    constructor(formService, dateAdapter, userPreferencesService) {
        super(formService);
        this.formService = formService;
        this.dateAdapter = dateAdapter;
        this.userPreferencesService = userPreferencesService;
        this.typeId = 'DateCloudWidgetComponent';
        this.DATE_FORMAT_CLOUD = 'YYYY-MM-DD';
        this.onDestroy$ = new Subject();
    }
    ngOnInit() {
        this.userPreferencesService
            .select(UserPreferenceValues.Locale)
            .pipe(takeUntil(this.onDestroy$))
            .subscribe(locale => this.dateAdapter.setLocale(locale));
        const momentDateAdapter = this.dateAdapter;
        momentDateAdapter.overrideDisplayFormat = this.field.dateDisplayFormat;
        if (this.field) {
            if (this.field.minValue) {
                this.minDate = moment(this.field.minValue, this.DATE_FORMAT_CLOUD);
            }
            if (this.field.maxValue) {
                this.maxDate = moment(this.field.maxValue, this.DATE_FORMAT_CLOUD);
            }
        }
    }
    ngOnDestroy() {
        this.onDestroy$.next(true);
        this.onDestroy$.complete();
    }
    onDateChanged(newDateValue) {
        const date = moment(newDateValue, this.field.dateDisplayFormat, true);
        if (date.isValid()) {
            this.field.value = date.format(this.field.dateDisplayFormat);
        }
        else {
            this.field.value = newDateValue;
        }
        this.onFieldChanged(this.field);
    }
}
DateCloudWidgetComponent.ɵfac = function DateCloudWidgetComponent_Factory(t) { return new (t || DateCloudWidgetComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc6.FormService), ɵngcc0.ɵɵdirectiveInject(ɵngcc8.DateAdapter), ɵngcc0.ɵɵdirectiveInject(ɵngcc6.UserPreferencesService)); };
DateCloudWidgetComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: DateCloudWidgetComponent, selectors: [["date-widget"]], hostBindings: function DateCloudWidgetComponent_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function DateCloudWidgetComponent_click_HostBindingHandler($event) { return ctx.event($event); })("blur", function DateCloudWidgetComponent_blur_HostBindingHandler($event) { return ctx.event($event); })("change", function DateCloudWidgetComponent_change_HostBindingHandler($event) { return ctx.event($event); })("focus", function DateCloudWidgetComponent_focus_HostBindingHandler($event) { return ctx.event($event); })("focusin", function DateCloudWidgetComponent_focusin_HostBindingHandler($event) { return ctx.event($event); })("focusout", function DateCloudWidgetComponent_focusout_HostBindingHandler($event) { return ctx.event($event); })("input", function DateCloudWidgetComponent_input_HostBindingHandler($event) { return ctx.event($event); })("invalid", function DateCloudWidgetComponent_invalid_HostBindingHandler($event) { return ctx.event($event); })("select", function DateCloudWidgetComponent_select_HostBindingHandler($event) { return ctx.event($event); });
    } }, features: [ɵngcc0.ɵɵProvidersFeature([
            { provide: DateAdapter, useClass: MomentDateAdapter },
            { provide: MAT_DATE_FORMATS, useValue: ɵ0$3 }
        ]), ɵngcc0.ɵɵInheritDefinitionFeature], decls: 15, vars: 35, consts: [["id", "data-widget"], [1, "adf-date-widget"], [1, "adf-label"], [4, "ngIf"], ["matInput", "", "matTooltipPosition", "above", "matTooltipShowDelay", "1000", 3, "id", "value", "required", "disabled", "placeholder", "matTooltip", "change"], ["matSuffix", "", 3, "for", "disabled"], [3, "error"], [3, "required", 4, "ngIf"], [3, "touchUi", "startAt", "disabled"], ["datePicker", ""], ["type", "hidden", 3, "matDatepicker", "value", "min", "max", "disabled", "dateInput"], [3, "required"]], template: function DateCloudWidgetComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "mat-form-field", 1);
        ɵngcc0.ɵɵelementStart(2, "label", 2);
        ɵngcc0.ɵɵtext(3);
        ɵngcc0.ɵɵpipe(4, "translate");
        ɵngcc0.ɵɵtemplate(5, DateCloudWidgetComponent_span_5_Template, 2, 0, "span", 3);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(6, "input", 4);
        ɵngcc0.ɵɵlistener("change", function DateCloudWidgetComponent_Template_input_change_6_listener($event) { return ctx.onDateChanged($event.srcElement.value); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(7, "mat-datepicker-toggle", 5);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(8, "error-widget", 6);
        ɵngcc0.ɵɵtemplate(9, DateCloudWidgetComponent_error_widget_9_Template, 2, 3, "error-widget", 7);
        ɵngcc0.ɵɵelement(10, "mat-datepicker", 8, 9);
        ɵngcc0.ɵɵpipe(12, "adfMomentDate");
        ɵngcc0.ɵɵelementStart(13, "input", 10);
        ɵngcc0.ɵɵlistener("dateInput", function DateCloudWidgetComponent_Template_input_dateInput_13_listener($event) { return ctx.onDateChanged($event.targetElement.value); });
        ɵngcc0.ɵɵpipe(14, "adfMomentDate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        const _r2 = ɵngcc0.ɵɵreference(11);
        ɵngcc0.ɵɵclassMap(ctx.field.className);
        ɵngcc0.ɵɵclassProp("adf-invalid", !ctx.field.isValid);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵattribute("for", ctx.field.id);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate2("", ɵngcc0.ɵɵpipeBind1(4, 27, ctx.field.name), " (", ctx.field.dateDisplayFormat, ")");
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.isRequired());
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("id", ctx.field.id)("value", ctx.field.value)("required", ctx.isRequired())("disabled", ctx.field.readOnly)("placeholder", ctx.field.placeholder)("matTooltip", ctx.field.tooltip);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("for", _r2)("disabled", ctx.field.readOnly);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("error", ctx.field.validationSummary);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.isInvalidFieldRequired());
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("touchUi", true)("startAt", ɵngcc0.ɵɵpipeBind2(12, 29, ctx.field.value, ctx.field.dateDisplayFormat))("disabled", ctx.field.readOnly);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("matDatepicker", _r2)("value", ɵngcc0.ɵɵpipeBind2(14, 32, ctx.field.value, ctx.field.dateDisplayFormat))("min", ctx.minDate)("max", ctx.maxDate)("disabled", ctx.field.readOnly);
    } }, directives: [ɵngcc14.MatFormField, ɵngcc3.NgIf, ɵngcc21.MatInput, ɵngcc20.MatTooltip, ɵngcc16.MatDatepickerToggle, ɵngcc14.MatSuffix, ɵngcc6.ErrorWidgetComponent, ɵngcc16.MatDatepicker, ɵngcc16.MatDatepickerInput], pipes: [ɵngcc10.TranslatePipe, ɵngcc6.MomentDatePipe], styles: [".adf-date-widget .mat-form-field-suffix{top:26px}.adf-date-widget .mat-form-field-label-wrapper{top:20px}"], encapsulation: 2 });
DateCloudWidgetComponent.ctorParameters = () => [
    { type: FormService },
    { type: DateAdapter },
    { type: UserPreferencesService }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DateCloudWidgetComponent, [{
        type: Component,
        args: [{
                selector: 'date-widget',
                providers: [
                    { provide: DateAdapter, useClass: MomentDateAdapter },
                    { provide: MAT_DATE_FORMATS, useValue: ɵ0$3 }
                ],
                template: "<div class=\"{{field.className}}\" id=\"data-widget\" [class.adf-invalid]=\"!field.isValid\">\n    <mat-form-field class=\"adf-date-widget\">\n        <label class=\"adf-label\" [attr.for]=\"field.id\">{{field.name | translate }} ({{field.dateDisplayFormat}})<span *ngIf=\"isRequired()\">*</span></label>\n        <input matInput\n               [id]=\"field.id\"\n               [value]=\"field.value\"\n               [required]=\"isRequired()\"\n               [disabled]=\"field.readOnly\"\n               (change)=\"onDateChanged($any($event).srcElement.value)\"\n               [placeholder]=\"field.placeholder\"\n               [matTooltip]=\"field.tooltip\"\n               matTooltipPosition=\"above\"\n               matTooltipShowDelay=\"1000\">\n        <mat-datepicker-toggle  matSuffix [for]=\"datePicker\" [disabled]=\"field.readOnly\" ></mat-datepicker-toggle>\n    </mat-form-field>\n    <error-widget [error]=\"field.validationSummary\"></error-widget>\n    <error-widget *ngIf=\"isInvalidFieldRequired()\" required=\"{{ 'FORM.FIELD.REQUIRED' | translate }}\"></error-widget>\n    <mat-datepicker #datePicker [touchUi]=\"true\" [startAt]=\"field.value | adfMomentDate: field.dateDisplayFormat\" [disabled]=\"field.readOnly\"></mat-datepicker>\n    <input\n        type=\"hidden\"\n        [matDatepicker]=\"datePicker\"\n        [value]=\"field.value | adfMomentDate: field.dateDisplayFormat\"\n        [min]=\"minDate\"\n        [max]=\"maxDate\"\n        [disabled]=\"field.readOnly\"\n        (dateInput)=\"onDateChanged($any($event).targetElement.value)\">\n</div>\n",
                host: {
                    '(click)': 'event($event)',
                    '(blur)': 'event($event)',
                    '(change)': 'event($event)',
                    '(focus)': 'event($event)',
                    '(focusin)': 'event($event)',
                    '(focusout)': 'event($event)',
                    '(input)': 'event($event)',
                    '(invalid)': 'event($event)',
                    '(select)': 'event($event)'
                },
                encapsulation: ViewEncapsulation.None,
                styles: [".adf-date-widget .mat-form-field-suffix{top:26px}.adf-date-widget .mat-form-field-label-wrapper{top:20px}"]
            }]
    }], function () { return [{ type: ɵngcc6.FormService }, { type: ɵngcc8.DateAdapter }, { type: ɵngcc6.UserPreferencesService }]; }, null); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class DropdownCloudWidgetComponent extends WidgetComponent {
    constructor(formService, formCloudService, logService) {
        super(formService);
        this.formService = formService;
        this.formCloudService = formCloudService;
        this.logService = logService;
        this.typeId = 'DropdownCloudWidgetComponent';
        this.onDestroy$ = new Subject();
    }
    ngOnInit() {
        if (this.hasRestUrl() && !this.isLinkedWidget()) {
            this.persistFieldOptionsFromRestApi();
        }
        if (this.isLinkedWidget()) {
            this.loadFieldOptionsForLinkedWidget();
            this.formService.formFieldValueChanged
                .pipe(filter((event) => this.isFormFieldEventOfTypeDropdown(event) && this.isParentFormFieldEvent(event)), takeUntil(this.onDestroy$))
                .subscribe((event) => {
                const valueOfParentWidget = event.field.value;
                this.parentValueChanged(valueOfParentWidget);
            });
        }
    }
    persistFieldOptionsFromRestApi() {
        if (this.isValidRestType()) {
            const bodyParam = this.buildBodyParam();
            this.formCloudService.getRestWidgetData(this.field.form.id, this.field.id, bodyParam)
                .pipe(takeUntil(this.onDestroy$))
                .subscribe((result) => {
                this.field.options = result;
                this.field.updateForm();
            }, (err) => this.handleError(err));
        }
    }
    buildBodyParam() {
        const bodyParam = Object.assign({});
        if (this.isLinkedWidget()) {
            const parentWidgetValue = this.getParentWidgetValue();
            const parentWidgetId = this.getLinkedWidgetId();
            bodyParam[parentWidgetId] = parentWidgetValue;
        }
        return bodyParam;
    }
    loadFieldOptionsForLinkedWidget() {
        const parentWidgetValue = this.getParentWidgetValue();
        this.parentValueChanged(parentWidgetValue);
    }
    getParentWidgetValue() {
        const parentWidgetId = this.getLinkedWidgetId();
        const parentWidget = this.getFormFieldById(parentWidgetId);
        return parentWidget === null || parentWidget === void 0 ? void 0 : parentWidget.value;
    }
    parentValueChanged(value) {
        if (this.isValidValue(value)) {
            this.isValidRestType() ? this.persistFieldOptionsFromRestApi() : this.persistFieldOptionsFromManualList(value);
        }
        else if (this.isDefaultValue(value)) {
            this.addDefaultOption();
        }
    }
    isValidValue(value) {
        return !!value && value !== DropdownCloudWidgetComponent.DEFAULT_OPTION.id;
    }
    isDefaultValue(value) {
        return value === DropdownCloudWidgetComponent.DEFAULT_OPTION.id;
    }
    getFormFieldById(fieldId) {
        return this.field.form.getFormFields().filter((field) => field.id === fieldId)[0];
    }
    persistFieldOptionsFromManualList(value) {
        if (this.hasRuleEntries()) {
            const rulesEntries = this.getRuleEntries();
            rulesEntries.forEach((ruleEntry) => {
                if (ruleEntry.key === value) {
                    this.field.options = ruleEntry.options;
                    this.field.updateForm();
                }
            });
        }
    }
    getRuleEntries() {
        return this.field.rule.entries;
    }
    hasRuleEntries() {
        return !!this.getRuleEntries().length;
    }
    addDefaultOption() {
        this.field.options = [DropdownCloudWidgetComponent.DEFAULT_OPTION];
    }
    selectionChangedForField(field) {
        const formFieldValueChangedEvent = new FormFieldEvent(field.form, field);
        this.formService.formFieldValueChanged.next(formFieldValueChangedEvent);
        this.onFieldChanged(field);
    }
    isParentFormFieldEvent(event) {
        return event.field.id === this.getLinkedWidgetId();
    }
    isFormFieldEventOfTypeDropdown(event) {
        return event.field.type === FormFieldTypes.DROPDOWN;
    }
    hasRestUrl() {
        var _a;
        return !!((_a = this.field) === null || _a === void 0 ? void 0 : _a.restUrl);
    }
    isLinkedWidget() {
        return !!this.getLinkedWidgetId();
    }
    getLinkedWidgetId() {
        var _a, _b;
        return (_b = (_a = this.field) === null || _a === void 0 ? void 0 : _a.rule) === null || _b === void 0 ? void 0 : _b.ruleOn;
    }
    compareDropdownValues(opt1, opt2) {
        if (!opt1 || !opt2) {
            return false;
        }
        if (typeof opt1 === 'string' && typeof opt2 === 'object') {
            return opt1 === opt2.id || opt1 === opt2.name;
        }
        if (typeof opt1 === 'object' && typeof opt2 === 'string') {
            return opt1.id === opt2 || opt1.name === opt2;
        }
        if (typeof opt1 === 'object' && typeof opt2 === 'object') {
            return opt1.id === opt2.id || opt1.name === opt2.name;
        }
        return opt1 === opt2;
    }
    getOptionValue(option, fieldValue) {
        if (this.field.hasMultipleValues) {
            return option;
        }
        let optionValue = '';
        if (option.id === DropdownCloudWidgetComponent.DEFAULT_OPTION.id || option.name !== fieldValue) {
            optionValue = option.id;
        }
        else {
            optionValue = option.name;
        }
        return optionValue;
    }
    isValidRestType() {
        return this.field.optionType === 'rest' && !!this.field.restUrl;
    }
    handleError(error) {
        this.logService.error(error);
    }
    isReadOnlyType() {
        return this.field.type === 'readonly';
    }
    ngOnDestroy() {
        this.onDestroy$.next(true);
        this.onDestroy$.complete();
    }
}
DropdownCloudWidgetComponent.ɵfac = function DropdownCloudWidgetComponent_Factory(t) { return new (t || DropdownCloudWidgetComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc6.FormService), ɵngcc0.ɵɵdirectiveInject(FormCloudService), ɵngcc0.ɵɵdirectiveInject(ɵngcc6.LogService)); };
DropdownCloudWidgetComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: DropdownCloudWidgetComponent, selectors: [["dropdown-cloud-widget"]], hostBindings: function DropdownCloudWidgetComponent_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function DropdownCloudWidgetComponent_click_HostBindingHandler($event) { return ctx.event($event); })("blur", function DropdownCloudWidgetComponent_blur_HostBindingHandler($event) { return ctx.event($event); })("change", function DropdownCloudWidgetComponent_change_HostBindingHandler($event) { return ctx.event($event); })("focus", function DropdownCloudWidgetComponent_focus_HostBindingHandler($event) { return ctx.event($event); })("focusin", function DropdownCloudWidgetComponent_focusin_HostBindingHandler($event) { return ctx.event($event); })("focusout", function DropdownCloudWidgetComponent_focusout_HostBindingHandler($event) { return ctx.event($event); })("input", function DropdownCloudWidgetComponent_input_HostBindingHandler($event) { return ctx.event($event); })("invalid", function DropdownCloudWidgetComponent_invalid_HostBindingHandler($event) { return ctx.event($event); })("select", function DropdownCloudWidgetComponent_select_HostBindingHandler($event) { return ctx.event($event); });
    } }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 13, vars: 23, consts: [[1, "adf-dropdown-widget-top-labels"], [1, "adf-label"], [4, "ngIf"], ["class", "adf-label adf-dropdown-widget-linked", 4, "ngIf"], ["matTooltipPosition", "above", "matTooltipShowDelay", "1000", 1, "adf-select", 3, "id", "ngModel", "disabled", "compareWith", "matTooltip", "multiple", "ngModelChange"], [3, "value", "id", 4, "ngFor", "ngForOf"], ["id", "readonlyOption", 3, "value", 4, "ngIf"], [3, "error"], ["class", "adf-dropdown-required-message", 3, "required", 4, "ngIf"], [1, "adf-label", "adf-dropdown-widget-linked"], [3, "value", "id"], ["id", "readonlyOption", 3, "value"], [1, "adf-dropdown-required-message", 3, "required"]], template: function DropdownCloudWidgetComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div");
        ɵngcc0.ɵɵelementStart(1, "div", 0);
        ɵngcc0.ɵɵelementStart(2, "label", 1);
        ɵngcc0.ɵɵtext(3);
        ɵngcc0.ɵɵpipe(4, "translate");
        ɵngcc0.ɵɵtemplate(5, DropdownCloudWidgetComponent_span_5_Template, 2, 0, "span", 2);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(6, DropdownCloudWidgetComponent_label_6_Template, 3, 7, "label", 3);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(7, "mat-form-field");
        ɵngcc0.ɵɵelementStart(8, "mat-select", 4);
        ɵngcc0.ɵɵlistener("ngModelChange", function DropdownCloudWidgetComponent_Template_mat_select_ngModelChange_8_listener($event) { return ctx.field.value = $event; })("ngModelChange", function DropdownCloudWidgetComponent_Template_mat_select_ngModelChange_8_listener() { return ctx.selectionChangedForField(ctx.field); });
        ɵngcc0.ɵɵtemplate(9, DropdownCloudWidgetComponent_mat_option_9_Template, 2, 3, "mat-option", 5);
        ɵngcc0.ɵɵtemplate(10, DropdownCloudWidgetComponent_mat_option_10_Template, 2, 2, "mat-option", 6);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(11, "error-widget", 7);
        ɵngcc0.ɵɵtemplate(12, DropdownCloudWidgetComponent_error_widget_12_Template, 2, 3, "error-widget", 8);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵclassMapInterpolate1("adf-dropdown-widget ", ctx.field.className, "");
        ɵngcc0.ɵɵclassProp("adf-invalid", !ctx.field.isValid)("adf-readonly", ctx.field.readOnly);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵattribute("for", ctx.field.id);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(4, 21, ctx.field.name));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.isRequired());
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.isLinkedWidget());
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("id", ctx.field.id)("ngModel", ctx.field.value)("disabled", ctx.field.readOnly)("compareWith", ctx.compareDropdownValues)("matTooltip", ctx.field.tooltip)("multiple", ctx.field.hasMultipleValues);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.field.options);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.isReadOnlyType());
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("error", ctx.field.validationSummary);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.isInvalidFieldRequired());
    } }, directives: [ɵngcc3.NgIf, ɵngcc14.MatFormField, ɵngcc15.MatSelect, ɵngcc17.NgControlStatus, ɵngcc17.NgModel, ɵngcc20.MatTooltip, ɵngcc3.NgForOf, ɵngcc6.ErrorWidgetComponent, ɵngcc8.MatOption], pipes: [ɵngcc10.TranslatePipe], styles: [".adf-dropdown-widget{margin-top:13px;width:100%}.adf-dropdown-widget .adf-select{padding-top:0!important;width:100%}.adf-dropdown-widget .mat-select-value-text{font-size:14px}.adf-dropdown-widget-top-labels{display:flex;flex-direction:row;height:16px;justify-content:space-between}.adf-dropdown-widget-top-labels .adf-dropdown-widget-linked{display:contents}.adf-dropdown-widget-select{width:100%}.adf-dropdown-widget-dropdown-required-message .adf-error-text-container{margin-top:1px!important}"], encapsulation: 2 });
DropdownCloudWidgetComponent.DEFAULT_OPTION = {
    id: 'empty',
    name: 'Choose one...'
};
DropdownCloudWidgetComponent.ctorParameters = () => [
    { type: FormService },
    { type: FormCloudService },
    { type: LogService }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DropdownCloudWidgetComponent, [{
        type: Component,
        args: [{
                selector: 'dropdown-cloud-widget',
                template: "<div class=\"adf-dropdown-widget {{field.className}}\"\n     [class.adf-invalid]=\"!field.isValid\" [class.adf-readonly]=\"field.readOnly\">\n    <div class=\"adf-dropdown-widget-top-labels\">\n        <label class=\"adf-label\" [attr.for]=\"field.id\">{{field.name | translate }}<span\n            *ngIf=\"isRequired()\">*</span></label>\n        <label class=\"adf-label adf-dropdown-widget-linked\"\n               *ngIf=\"isLinkedWidget()\"\n               [attr.for]=\"field.id\">\n            {{ 'FORM.FIELD.DEPENDS_ON' | translate: { widgetId: getLinkedWidgetId() } }}\n        </label>\n    </div>\n    <mat-form-field>\n        <mat-select class=\"adf-select\"\n                    [id]=\"field.id\"\n                    [(ngModel)]=\"field.value\"\n                    [disabled]=\"field.readOnly\"\n                    [compareWith]=\"compareDropdownValues\"\n                    (ngModelChange)=\"selectionChangedForField(field)\"\n                    [matTooltip]=\"field.tooltip\"\n                    matTooltipPosition=\"above\"\n                    matTooltipShowDelay=\"1000\"\n                    [multiple]=\"field.hasMultipleValues\">\n            <mat-option *ngFor=\"let opt of field.options\"\n                        [value]=\"getOptionValue(opt, field.value)\"\n                        [id]=\"opt.id\">{{opt.name}}\n            </mat-option>\n            <mat-option id=\"readonlyOption\" *ngIf=\"isReadOnlyType()\" [value]=\"field.value\">{{field.value}}</mat-option>\n        </mat-select>\n    </mat-form-field>\n    <error-widget [error]=\"field.validationSummary\"></error-widget>\n    <error-widget class=\"adf-dropdown-required-message\" *ngIf=\"isInvalidFieldRequired()\"\n                  required=\"{{ 'FORM.FIELD.REQUIRED' | translate }}\"></error-widget>\n</div>\n",
                host: {
                    '(click)': 'event($event)',
                    '(blur)': 'event($event)',
                    '(change)': 'event($event)',
                    '(focus)': 'event($event)',
                    '(focusin)': 'event($event)',
                    '(focusout)': 'event($event)',
                    '(input)': 'event($event)',
                    '(invalid)': 'event($event)',
                    '(select)': 'event($event)'
                },
                encapsulation: ViewEncapsulation.None,
                styles: [".adf-dropdown-widget{margin-top:13px;width:100%}.adf-dropdown-widget .adf-select{padding-top:0!important;width:100%}.adf-dropdown-widget .mat-select-value-text{font-size:14px}.adf-dropdown-widget-top-labels{display:flex;flex-direction:row;height:16px;justify-content:space-between}.adf-dropdown-widget-top-labels .adf-dropdown-widget-linked{display:contents}.adf-dropdown-widget-select{width:100%}.adf-dropdown-widget-dropdown-required-message .adf-error-text-container{margin-top:1px!important}"]
            }]
    }], function () { return [{ type: ɵngcc6.FormService }, { type: FormCloudService }, { type: ɵngcc6.LogService }]; }, null); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class GroupCloudWidgetComponent extends WidgetComponent {
    constructor(formService) {
        super(formService);
        this.onDestroy$ = new Subject();
        this.typeId = 'GroupCloudWidgetComponent';
    }
    ngOnInit() {
        if (this.field) {
            this.roles = this.field.roles;
            this.mode = this.field.optionType;
            this.title = this.field.placeholder;
            this.preSelectGroup = this.field.value ? this.field.value : [];
        }
        this.search = new FormControl({ value: '', disabled: this.field.readOnly }, []),
            this.search.statusChanges
                .pipe(filter((value) => {
                return value === 'INVALID';
            }), takeUntil(this.onDestroy$))
                .subscribe(() => {
                this.field.markAsInvalid();
                this.field.form.markAsInvalid();
            });
        this.search.statusChanges
            .pipe(filter((value) => {
            return value === 'VALID';
        }), takeUntil(this.onDestroy$))
            .subscribe(() => {
            this.field.validate();
            this.field.form.validateForm();
        });
    }
    ngOnDestroy() {
        this.onDestroy$.next(true);
        this.onDestroy$.complete();
    }
    onChangedGroup(groups) {
        this.field.value = [...groups];
        this.onFieldChanged(this.field);
    }
    isMultipleMode() {
        return this.mode === 'multiple';
    }
}
GroupCloudWidgetComponent.ɵfac = function GroupCloudWidgetComponent_Factory(t) { return new (t || GroupCloudWidgetComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc6.FormService)); };
GroupCloudWidgetComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: GroupCloudWidgetComponent, selectors: [["group-cloud-widget"]], hostBindings: function GroupCloudWidgetComponent_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function GroupCloudWidgetComponent_click_HostBindingHandler($event) { return ctx.event($event); })("blur", function GroupCloudWidgetComponent_blur_HostBindingHandler($event) { return ctx.event($event); })("change", function GroupCloudWidgetComponent_change_HostBindingHandler($event) { return ctx.event($event); })("focus", function GroupCloudWidgetComponent_focus_HostBindingHandler($event) { return ctx.event($event); })("focusin", function GroupCloudWidgetComponent_focusin_HostBindingHandler($event) { return ctx.event($event); })("focusout", function GroupCloudWidgetComponent_focusout_HostBindingHandler($event) { return ctx.event($event); })("input", function GroupCloudWidgetComponent_input_HostBindingHandler($event) { return ctx.event($event); })("invalid", function GroupCloudWidgetComponent_invalid_HostBindingHandler($event) { return ctx.event($event); })("select", function GroupCloudWidgetComponent_select_HostBindingHandler($event) { return ctx.event($event); });
    } }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 8, vars: 23, consts: [[1, "adf-label"], [4, "ngIf"], [3, "mode", "title", "readOnly", "roles", "searchGroupsControl", "preSelectGroups", "matTooltip", "matTooltipPosition", "matTooltipShowDelay", "changedGroups"], [3, "error"], ["class", "adf-dropdown-required-message", 3, "required", 4, "ngIf"], [1, "adf-dropdown-required-message", 3, "required"]], template: function GroupCloudWidgetComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div");
        ɵngcc0.ɵɵelementStart(1, "label", 0);
        ɵngcc0.ɵɵtext(2);
        ɵngcc0.ɵɵpipe(3, "translate");
        ɵngcc0.ɵɵtemplate(4, GroupCloudWidgetComponent_span_4_Template, 2, 0, "span", 1);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(5, "adf-cloud-group", 2);
        ɵngcc0.ɵɵlistener("changedGroups", function GroupCloudWidgetComponent_Template_adf_cloud_group_changedGroups_5_listener($event) { return ctx.onChangedGroup($event); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(6, "error-widget", 3);
        ɵngcc0.ɵɵtemplate(7, GroupCloudWidgetComponent_error_widget_7_Template, 2, 3, "error-widget", 4);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵclassMapInterpolate1("adf-dropdown-widget ", ctx.field.className, "");
        ɵngcc0.ɵɵclassProp("adf-invalid", !ctx.field.isValid)("adf-readonly", ctx.field.readOnly);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵattribute("for", ctx.field.id);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(3, 21, ctx.field.name));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.isRequired());
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("mode", ctx.mode)("title", ctx.title)("readOnly", ctx.field.readOnly)("roles", ctx.roles)("searchGroupsControl", ctx.search)("preSelectGroups", ctx.preSelectGroup)("matTooltip", ctx.field.tooltip)("matTooltipPosition", "above")("matTooltipShowDelay", 1000);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("error", ctx.field.validationSummary);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.isInvalidFieldRequired());
    } }, directives: [ɵngcc3.NgIf, GroupCloudComponent, ɵngcc20.MatTooltip, ɵngcc6.ErrorWidgetComponent], pipes: [ɵngcc10.TranslatePipe], encapsulation: 2 });
GroupCloudWidgetComponent.ctorParameters = () => [
    { type: FormService }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(GroupCloudWidgetComponent, [{
        type: Component,
        args: [{
                selector: 'group-cloud-widget',
                template: "<div class=\"adf-dropdown-widget {{field.className}}\"\n     [class.adf-invalid]=\"!field.isValid\" [class.adf-readonly]=\"field.readOnly\">\n    <label class=\"adf-label\" [attr.for]=\"field.id\">{{field.name | translate }}<span\n        *ngIf=\"isRequired()\">*</span></label>\n        <adf-cloud-group [mode]=\"mode\"\n                         [title]=\"title\"\n                         [readOnly]=\"field.readOnly\"\n                         [roles]=\"roles\"\n                         [searchGroupsControl]=\"search\"\n                         (changedGroups)=\"onChangedGroup($event)\"\n                         [preSelectGroups]=\"preSelectGroup\"\n                         [matTooltip]=\"field.tooltip\"\n                         [matTooltipPosition]=\"'above'\"\n                         [matTooltipShowDelay]=\"1000\">\n        </adf-cloud-group>\n        <error-widget [error]=\"field.validationSummary\"></error-widget>\n        <error-widget class=\"adf-dropdown-required-message\" *ngIf=\"isInvalidFieldRequired()\"\n                  required=\"{{ 'FORM.FIELD.REQUIRED' | translate }}\"></error-widget>\n</div>\n\n",
                host: {
                    '(click)': 'event($event)',
                    '(blur)': 'event($event)',
                    '(change)': 'event($event)',
                    '(focus)': 'event($event)',
                    '(focusin)': 'event($event)',
                    '(focusout)': 'event($event)',
                    '(input)': 'event($event)',
                    '(invalid)': 'event($event)',
                    '(select)': 'event($event)'
                },
                encapsulation: ViewEncapsulation.None
            }]
    }], function () { return [{ type: ɵngcc6.FormService }]; }, null); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class PeopleCloudWidgetComponent extends WidgetComponent {
    constructor(formService) {
        super(formService);
        this.onDestroy$ = new Subject();
        this.typeId = 'PeopleCloudWidgetComponent';
    }
    ngOnInit() {
        if (this.field) {
            this.roles = this.field.roles;
            this.mode = this.field.optionType;
            this.title = this.field.placeholder;
            this.preSelectUsers = this.field.value ? this.field.value : [];
        }
        this.search = new FormControl({ value: '', disabled: this.field.readOnly }, []),
            this.search.statusChanges
                .pipe(filter((value) => {
                return value === 'INVALID';
            }), takeUntil(this.onDestroy$))
                .subscribe(() => {
                this.field.markAsInvalid();
                this.field.form.markAsInvalid();
            });
        this.search.statusChanges
            .pipe(filter((value) => {
            return value === 'VALID';
        }), takeUntil(this.onDestroy$))
            .subscribe(() => {
            this.field.validate();
            this.field.form.validateForm();
        });
    }
    ngOnDestroy() {
        this.onDestroy$.next(true);
        this.onDestroy$.complete();
    }
    onChangedUser(users) {
        this.field.value = [...users];
        this.onFieldChanged(this.field);
    }
    isMultipleMode() {
        return this.mode === 'multiple';
    }
}
PeopleCloudWidgetComponent.ɵfac = function PeopleCloudWidgetComponent_Factory(t) { return new (t || PeopleCloudWidgetComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc6.FormService)); };
PeopleCloudWidgetComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: PeopleCloudWidgetComponent, selectors: [["people-cloud-widget"]], hostBindings: function PeopleCloudWidgetComponent_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function PeopleCloudWidgetComponent_click_HostBindingHandler($event) { return ctx.event($event); })("blur", function PeopleCloudWidgetComponent_blur_HostBindingHandler($event) { return ctx.event($event); })("change", function PeopleCloudWidgetComponent_change_HostBindingHandler($event) { return ctx.event($event); })("focus", function PeopleCloudWidgetComponent_focus_HostBindingHandler($event) { return ctx.event($event); })("focusin", function PeopleCloudWidgetComponent_focusin_HostBindingHandler($event) { return ctx.event($event); })("focusout", function PeopleCloudWidgetComponent_focusout_HostBindingHandler($event) { return ctx.event($event); })("input", function PeopleCloudWidgetComponent_input_HostBindingHandler($event) { return ctx.event($event); })("invalid", function PeopleCloudWidgetComponent_invalid_HostBindingHandler($event) { return ctx.event($event); })("select", function PeopleCloudWidgetComponent_select_HostBindingHandler($event) { return ctx.event($event); });
    } }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 7, vars: 22, consts: [[1, "adf-label"], [4, "ngIf"], ["matTooltipPosition", "above", "matTooltipShowDelay", "1000", 3, "preSelectUsers", "validate", "appName", "title", "readOnly", "searchUserCtrl", "roles", "mode", "matTooltip", "changedUsers"], [3, "error"]], template: function PeopleCloudWidgetComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div");
        ɵngcc0.ɵɵelementStart(1, "label", 0);
        ɵngcc0.ɵɵtext(2);
        ɵngcc0.ɵɵpipe(3, "translate");
        ɵngcc0.ɵɵtemplate(4, PeopleCloudWidgetComponent_span_4_Template, 2, 0, "span", 1);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(5, "adf-cloud-people", 2);
        ɵngcc0.ɵɵlistener("changedUsers", function PeopleCloudWidgetComponent_Template_adf_cloud_people_changedUsers_5_listener($event) { return ctx.onChangedUser($event); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(6, "error-widget", 3);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵclassMapInterpolate1("adf-dropdown-widget ", ctx.field.className, "");
        ɵngcc0.ɵɵclassProp("adf-invalid", !ctx.field.isValid)("adf-readonly", ctx.field.readOnly);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵattribute("for", ctx.field.id);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(3, 20, ctx.field.name));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.isRequired());
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("preSelectUsers", ctx.preSelectUsers)("validate", true)("appName", ctx.appName)("title", ctx.title)("readOnly", ctx.field.readOnly)("searchUserCtrl", ctx.search)("roles", ctx.roles)("mode", ctx.mode)("matTooltip", ctx.field.tooltip);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("error", ctx.field.validationSummary);
    } }, directives: [ɵngcc3.NgIf, PeopleCloudComponent, ɵngcc20.MatTooltip, ɵngcc6.ErrorWidgetComponent], pipes: [ɵngcc10.TranslatePipe], encapsulation: 2 });
PeopleCloudWidgetComponent.ctorParameters = () => [
    { type: FormService }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(PeopleCloudWidgetComponent, [{
        type: Component,
        args: [{
                selector: 'people-cloud-widget',
                template: "<div class=\"adf-dropdown-widget {{field.className}}\"\n     [class.adf-invalid]=\"!field.isValid\" [class.adf-readonly]=\"field.readOnly\">\n    <label class=\"adf-label\" [attr.for]=\"field.id\">{{field.name | translate }}<span *ngIf=\"isRequired()\">*</span></label>\n        <adf-cloud-people\n            [preSelectUsers]=\"preSelectUsers\"\n            [validate]=\"true\"\n            [appName]=\"appName\"\n            [title]=\"title\"\n            [readOnly]=\"field.readOnly\"\n            [searchUserCtrl]=\"search\"\n            (changedUsers)=\"onChangedUser($event)\"\n            [roles]=\"roles\"\n            [mode]=\"mode\"\n            [matTooltip]=\"field.tooltip\"\n            matTooltipPosition=\"above\"\n            matTooltipShowDelay=\"1000\">\n        </adf-cloud-people>\n    <error-widget [error]=\"field.validationSummary\"></error-widget>\n</div>\n\n",
                host: {
                    '(click)': 'event($event)',
                    '(blur)': 'event($event)',
                    '(change)': 'event($event)',
                    '(focus)': 'event($event)',
                    '(focusin)': 'event($event)',
                    '(focusout)': 'event($event)',
                    '(input)': 'event($event)',
                    '(invalid)': 'event($event)',
                    '(select)': 'event($event)'
                },
                encapsulation: ViewEncapsulation.None
            }]
    }], function () { return [{ type: ɵngcc6.FormService }]; }, null); })();

class ContentCloudNodeSelectorService {
    constructor(apiService, notificationService, logService, dialog) {
        this.apiService = apiService;
        this.notificationService = notificationService;
        this.logService = logService;
        this.dialog = dialog;
        this.sourceNodeNotFound = false;
    }
    get nodesApi() {
        var _a;
        this._nodesApi = (_a = this._nodesApi) !== null && _a !== void 0 ? _a : new NodesApi(this.apiService.getInstance());
        return this._nodesApi;
    }
    openUploadFileDialog(currentFolderId, selectionMode, isAllFileSources, restrictRootToCurrentFolderId) {
        const select = new Subject();
        select.subscribe({ complete: this.close.bind(this) });
        const data = {
            title: 'Select a file',
            actionName: NodeAction.ATTACH,
            currentFolderId,
            restrictRootToCurrentFolderId,
            select,
            selectionMode,
            isSelectionValid: (entry) => entry.isFile,
            showFilesInResult: true,
            showDropdownSiteList: false,
            showLocalUploadButton: isAllFileSources
        };
        this.openContentNodeDialog(data, 'adf-content-node-selector-dialog', '66%');
        return select;
    }
    getNodeIdFromPath(destinationFolderPath) {
        return __awaiter(this, void 0, void 0, function* () {
            if (destinationFolderPath.alias && destinationFolderPath.path) {
                try {
                    return yield this.getNodeId(destinationFolderPath.alias, destinationFolderPath.path).toPromise();
                }
                catch (error) {
                    this.logService.error(error);
                }
            }
            return this.getNodeId(destinationFolderPath.alias).toPromise();
        });
    }
    getNodeIdFromFolderVariableValue(variableValue, defaultAlias) {
        return __awaiter(this, void 0, void 0, function* () {
            const isExistingNode = yield this.isExistingNode(variableValue);
            return isExistingNode ? variableValue : this.getNodeId(defaultAlias).toPromise();
        });
    }
    isExistingNode(nodeId) {
        return __awaiter(this, void 0, void 0, function* () {
            let isExistingNode = false;
            if (nodeId) {
                try {
                    isExistingNode = yield this.getNodeId(nodeId).pipe(mapTo(true)).toPromise();
                }
                catch (error) {
                    this.logService.error(error);
                }
            }
            return isExistingNode;
        });
    }
    getNodeId(nodeId, relativePath) {
        let opts;
        if (relativePath) {
            opts = { relativePath };
        }
        return from(this.nodesApi.getNode(nodeId, opts)).pipe(map((nodeEntry) => nodeEntry.entry.id), catchError((error) => {
            this.sourceNodeNotFound = true;
            return this.handleError(error);
        }));
    }
    openContentNodeDialog(data, currentPanelClass, chosenWidth) {
        const contentNodeDialog = this.dialog.open(ContentNodeSelectorComponent, { data, panelClass: currentPanelClass, width: chosenWidth });
        contentNodeDialog.afterOpened().subscribe(() => {
            if (this.sourceNodeNotFound) {
                this.notificationService.showWarning('ADF_CLOUD_TASK_FORM.ERROR.DESTINATION_FOLDER_PATH_ERROR');
            }
        });
        contentNodeDialog.afterClosed().subscribe(() => {
            this.sourceNodeNotFound = false;
        });
    }
    close() {
        this.dialog.closeAll();
    }
    handleError(error) {
        return throwError(error || 'Server error');
    }
}
ContentCloudNodeSelectorService.ɵfac = function ContentCloudNodeSelectorService_Factory(t) { return new (t || ContentCloudNodeSelectorService)(ɵngcc0.ɵɵinject(ɵngcc6.AlfrescoApiService), ɵngcc0.ɵɵinject(ɵngcc6.NotificationService), ɵngcc0.ɵɵinject(ɵngcc6.LogService), ɵngcc0.ɵɵinject(ɵngcc23.MatDialog)); };
ContentCloudNodeSelectorService.ɵprov = ɵɵdefineInjectable({ factory: function ContentCloudNodeSelectorService_Factory() { return new ContentCloudNodeSelectorService(ɵɵinject(AlfrescoApiService), ɵɵinject(NotificationService), ɵɵinject(LogService), ɵɵinject(MatDialog)); }, token: ContentCloudNodeSelectorService, providedIn: "root" });
ContentCloudNodeSelectorService.ctorParameters = () => [
    { type: AlfrescoApiService },
    { type: NotificationService },
    { type: LogService },
    { type: MatDialog }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ContentCloudNodeSelectorService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc6.AlfrescoApiService }, { type: ɵngcc6.NotificationService }, { type: ɵngcc6.LogService }, { type: ɵngcc23.MatDialog }]; }, null); })();

class ProcessCloudContentService {
    constructor(apiService, logService, contentService, downloadService) {
        this.apiService = apiService;
        this.logService = logService;
        this.contentService = contentService;
        this.downloadService = downloadService;
    }
    get uploadApi() {
        var _a;
        this._uploadApi = (_a = this._uploadApi) !== null && _a !== void 0 ? _a : new UploadApi(this.apiService.getInstance());
        return this._uploadApi;
    }
    get authenticationApi() {
        var _a;
        this._authenticationApi = (_a = this._authenticationApi) !== null && _a !== void 0 ? _a : new AuthenticationApi(this.apiService.getInstance());
        return this._authenticationApi;
    }
    createTemporaryRawRelatedContent(file, nodeId) {
        return from(this.uploadApi.uploadFile(file, '', nodeId, '', { overwrite: true })).pipe(map((res) => {
            return Object.assign(Object.assign({}, res.entry), { nodeId: res.entry.id });
        }), catchError(err => this.handleError(err)));
    }
    getRawContentNode(nodeId) {
        return this.contentService.getNodeContent(nodeId);
    }
    downloadNodeContent(blob, fileName) {
        this.contentService.downloadBlob(blob, fileName);
    }
    downloadFile(nodeId) {
        return __awaiter(this, void 0, void 0, function* () {
            const ticket = yield this.getAuthTicket();
            const url = this.contentService.getContentUrl(nodeId, true, ticket);
            this.downloadService.downloadUrl(url, nodeId);
        });
    }
    getAuthTicket() {
        return __awaiter(this, void 0, void 0, function* () {
            const ticket = yield this.authenticationApi.getTicket();
            if (ticket && ticket.entry) {
                return ticket.entry.id || '';
            }
            return '';
        });
    }
    handleError(error) {
        this.logService.error(error);
        return throwError(error || 'Server error');
    }
}
ProcessCloudContentService.ɵfac = function ProcessCloudContentService_Factory(t) { return new (t || ProcessCloudContentService)(ɵngcc0.ɵɵinject(ɵngcc6.AlfrescoApiService), ɵngcc0.ɵɵinject(ɵngcc6.LogService), ɵngcc0.ɵɵinject(ɵngcc6.ContentService), ɵngcc0.ɵɵinject(ɵngcc6.DownloadService)); };
ProcessCloudContentService.ɵprov = ɵɵdefineInjectable({ factory: function ProcessCloudContentService_Factory() { return new ProcessCloudContentService(ɵɵinject(AlfrescoApiService), ɵɵinject(LogService), ɵɵinject(ContentService), ɵɵinject(DownloadService)); }, token: ProcessCloudContentService, providedIn: "root" });
ProcessCloudContentService.ctorParameters = () => [
    { type: AlfrescoApiService },
    { type: LogService },
    { type: ContentService },
    { type: DownloadService }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ProcessCloudContentService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc6.AlfrescoApiService }, { type: ɵngcc6.LogService }, { type: ɵngcc6.ContentService }, { type: ɵngcc6.DownloadService }]; }, null); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class FormCloudRepresentation {
    constructor(obj) {
        this.id = obj.id || null;
        this.name = obj.name || null;
        this.description = obj.description || null;
        this.version = obj.version || null;
        this.tabs = obj.tabs || null;
        this.fields = obj.fields || null;
        this.outcomes = obj.outcomes || null;
        this.metadata = obj.metadata || null;
        this.variables = obj.variables || null;
        this.taskId = obj.taskId || null;
        this.taskName = obj.taskName || null;
        this.processDefinitionId = obj.processDefinitionId || null;
        this.processInstanceId = obj.processInstanceId || null;
        this.selectedOutcome = obj.selectedOutcome || null;
    }
}
var FileSourceTypes;
(function (FileSourceTypes) {
    FileSourceTypes["ALL_FILE_SOURCES_SERVICE_ID"] = "all-file-sources";
    FileSourceTypes["ALFRESCO_CONTENT_SOURCES_SERVICE_ID"] = "alfresco-content";
})(FileSourceTypes || (FileSourceTypes = {}));
var DestinationFolderPathType;
(function (DestinationFolderPathType) {
    DestinationFolderPathType["STATIC_TYPE"] = "value";
    DestinationFolderPathType["STRING_TYPE"] = "string";
    DestinationFolderPathType["FOLDER_TYPE"] = "folder";
})(DestinationFolderPathType || (DestinationFolderPathType = {}));

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class UploadCloudWidgetComponent extends WidgetComponent {
    constructor(formService, thumbnailService, processCloudContentService, notificationService, logService) {
        super(formService);
        this.thumbnailService = thumbnailService;
        this.processCloudContentService = processCloudContentService;
        this.notificationService = notificationService;
        this.logService = logService;
        this.multipleOption = '';
    }
    ngOnInit() {
        if (this.field &&
            this.field.value &&
            this.field.value.length > 0) {
            this.hasFile = true;
            this.fixIncompatibilityFromPreviousAndNewForm([]);
        }
        this.getMultipleFileParam();
        this.setDestinationFolderPathFromMappedVariable();
    }
    removeFile(file) {
        if (this.field) {
            this.removeElementFromList(file);
        }
    }
    onFileChanged(event) {
        const files = [];
        const filesSaved = [];
        for (const file of Array.from(event.target.files)) {
            if (!this.isUploaded(file)) {
                files.push(file);
            }
            else {
                this.notificationService.showWarning('FORM.FIELD.FILE_ALREADY_UPLOADED');
            }
        }
        if (files && files.length > 0) {
            from(files)
                .pipe(mergeMap((file) => this.uploadRawContent(file)))
                .subscribe((res) => {
                filesSaved.push(res);
            }, (error) => this.logService.error(`Error uploading file. See console output for more details. ${error}`), () => {
                this.fixIncompatibilityFromPreviousAndNewForm(filesSaved);
                this.hasFile = true;
            });
        }
    }
    isUploaded(file) {
        const current = this.field.value || [];
        return current.some(entry => entry.name === file.name);
    }
    fixIncompatibilityFromPreviousAndNewForm(filesSaved) {
        const value = [...this.field.value || []];
        value.push(...filesSaved || []);
        this.field.value = value;
        this.field.form.values[this.field.id] = value;
        this.hasFile = value.length > 0;
    }
    getIcon(mimeType) {
        return this.thumbnailService.getMimeTypeIcon(mimeType);
    }
    uploadRawContent(file) {
        return this.processCloudContentService.createTemporaryRawRelatedContent(file, this.field.form.nodeId);
    }
    getMultipleFileParam() {
        if (this.field &&
            this.field.params &&
            this.field.params.multiple) {
            this.multipleOption = this.field.params.multiple ? 'multiple' : '';
        }
    }
    get uploadedFiles() {
        const result = this.field.value || this.field.form.values[this.field.id];
        return result || [];
    }
    removeElementFromList(file) {
        const filteredValues = this.uploadedFiles.filter(value => value.id !== file.id);
        this.resetFormValues(filteredValues);
    }
    resetFormValues(values) {
        if (values && values.length > 0) {
            this.field.value = values;
            this.field.form.values[this.field.id] = values;
            this.hasFile = true;
        }
        else {
            this.field.value = [];
            this.field.form.values[this.field.id] = [];
            this.hasFile = false;
        }
    }
    fileClicked(file) {
        this.formService.formContentClicked.next(file);
    }
    isAlfrescoAndLocal() {
        var _a, _b, _c;
        return ((_c = (_b = (_a = this.field) === null || _a === void 0 ? void 0 : _a.params) === null || _b === void 0 ? void 0 : _b.fileSource) === null || _c === void 0 ? void 0 : _c.serviceId) === FileSourceTypes.ALL_FILE_SOURCES_SERVICE_ID;
    }
    isPathVariableType(type) {
        var _a, _b, _c, _d;
        return ((_d = (_c = (_b = (_a = this.field) === null || _a === void 0 ? void 0 : _a.params) === null || _b === void 0 ? void 0 : _b.fileSource) === null || _c === void 0 ? void 0 : _c.destinationFolderPath) === null || _d === void 0 ? void 0 : _d.type) === type;
    }
    setDestinationFolderPathFromMappedVariable() {
        if (this.isAlfrescoAndLocal()) {
            this.prepareUploadWidgetDestinationFolderPathFromStringVariable();
            this.prepareUploadWidgetDestinationFolderPathFromFolderVariable();
        }
    }
    prepareUploadWidgetDestinationFolderPathFromStringVariable() {
        if (this.isPathVariableType(DestinationFolderPathType.STRING_TYPE)) {
            this.setUploadWidgetDestinationFolderPath(this.getDestinationFolderPathValue());
        }
    }
    prepareUploadWidgetDestinationFolderPathFromFolderVariable() {
        if (this.isPathVariableType(DestinationFolderPathType.FOLDER_TYPE)) {
            const folder = this.getDestinationFolderPathValue();
            this.setUploadWidgetDestinationFolderPath((folder === null || folder === void 0 ? void 0 : folder.length) ? folder[0].id : undefined);
        }
    }
    setUploadWidgetDestinationFolderPath(path) {
        this.field.params.fileSource.destinationFolderPath['value'] = path ? path : undefined;
    }
    getDestinationFolderPathValue() {
        var _a, _b;
        return this.field.form.getProcessVariableValue((_b = (_a = this.field.params.fileSource) === null || _a === void 0 ? void 0 : _a.destinationFolderPath) === null || _b === void 0 ? void 0 : _b.name);
    }
}
UploadCloudWidgetComponent.ɵfac = function UploadCloudWidgetComponent_Factory(t) { return new (t || UploadCloudWidgetComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc6.FormService), ɵngcc0.ɵɵdirectiveInject(ɵngcc6.ThumbnailService), ɵngcc0.ɵɵdirectiveInject(ProcessCloudContentService), ɵngcc0.ɵɵdirectiveInject(ɵngcc6.NotificationService), ɵngcc0.ɵɵdirectiveInject(ɵngcc6.LogService)); };
UploadCloudWidgetComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: UploadCloudWidgetComponent, selectors: [["upload-cloud-widget"]], viewQuery: function UploadCloudWidgetComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c19, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.fileInput = _t.first);
    } }, hostBindings: function UploadCloudWidgetComponent_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function UploadCloudWidgetComponent_click_HostBindingHandler($event) { return ctx.event($event); })("blur", function UploadCloudWidgetComponent_blur_HostBindingHandler($event) { return ctx.event($event); })("change", function UploadCloudWidgetComponent_change_HostBindingHandler($event) { return ctx.event($event); })("focus", function UploadCloudWidgetComponent_focus_HostBindingHandler($event) { return ctx.event($event); })("focusin", function UploadCloudWidgetComponent_focusin_HostBindingHandler($event) { return ctx.event($event); })("focusout", function UploadCloudWidgetComponent_focusout_HostBindingHandler($event) { return ctx.event($event); })("input", function UploadCloudWidgetComponent_input_HostBindingHandler($event) { return ctx.event($event); })("invalid", function UploadCloudWidgetComponent_invalid_HostBindingHandler($event) { return ctx.event($event); })("select", function UploadCloudWidgetComponent_select_HostBindingHandler($event) { return ctx.event($event); });
    } }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 12, vars: 17, consts: [[1, "adf-label"], [4, "ngIf"], [1, "adf-cloud-upload-widget-container"], [3, "error"], [3, "required", 4, "ngIf"], ["class", "adf-upload-files-row", 4, "ngFor", "ngForOf"], [1, "adf-upload-files-row"], ["mat-list-icon", "", "role", "button", "tabindex", "0", 1, "adf-upload-widget__icon", 3, "id", "src", "alt", "click", "keyup.enter"], ["matLine", "", "role", "button", "tabindex", "0", 1, "adf-file", 3, "id", "click", "keyup.enter"], ["mat-icon-button", "", 3, "id", "click", "keyup.enter", 4, "ngIf"], ["mat-icon-button", "", 3, "id", "click", "keyup.enter"], [1, "mat-24"], ["mat-raised-button", "", "color", "primary", "matTooltipPosition", "above", "matTooltipShowDelay", "1000", 3, "matTooltip", "click"], ["type", "file", 3, "multiple", "id", "change"], ["uploadFiles", ""], [3, "required"]], template: function UploadCloudWidgetComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div");
        ɵngcc0.ɵɵelementStart(1, "label", 0);
        ɵngcc0.ɵɵtext(2);
        ɵngcc0.ɵɵpipe(3, "translate");
        ɵngcc0.ɵɵtemplate(4, UploadCloudWidgetComponent_span_4_Template, 2, 0, "span", 1);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(5, "div", 2);
        ɵngcc0.ɵɵelementStart(6, "div");
        ɵngcc0.ɵɵtemplate(7, UploadCloudWidgetComponent_mat_list_7_Template, 2, 1, "mat-list", 1);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(8, UploadCloudWidgetComponent_div_8_Template, 8, 6, "div", 1);
        ɵngcc0.ɵɵtemplate(9, UploadCloudWidgetComponent_div_9_Template, 3, 3, "div", 1);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(10, "error-widget", 3);
        ɵngcc0.ɵɵtemplate(11, UploadCloudWidgetComponent_error_widget_11_Template, 2, 3, "error-widget", 4);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵclassMapInterpolate1("adf-upload-widget ", ctx.field.className, "");
        ɵngcc0.ɵɵclassProp("adf-invalid", !ctx.field.isValid)("adf-readonly", ctx.field.readOnly);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵattribute("for", ctx.field.id);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(3, 15, ctx.field.name));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.isRequired());
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngIf", ctx.hasFile);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", (!ctx.hasFile || ctx.multipleOption) && !ctx.field.readOnly);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.hasFile && ctx.field.readOnly);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("error", ctx.field.validationSummary);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.isInvalidFieldRequired());
    } }, directives: [ɵngcc3.NgIf, ɵngcc6.ErrorWidgetComponent, ɵngcc7.MatList, ɵngcc3.NgForOf, ɵngcc7.MatListItem, ɵngcc7.MatListIconCssMatStyler, ɵngcc8.MatLine, ɵngcc13.MatButton, ɵngcc5.MatIcon, ɵngcc20.MatTooltip], pipes: [ɵngcc10.TranslatePipe], styles: [".adf-cloud-upload-widget-container{margin-bottom:15px}.adf-cloud-upload-widget-container input{display:none}.adf-cloud-upload-widget{border-top:.84375em solid transparent;padding:.4375em 0;width:100%;word-break:break-all}.adf-cloud-upload-widget__icon{cursor:pointer;float:left;padding:6px}.adf-cloud-upload-widget__reset{margin-top:-2px}.adf-cloud-upload-files-row .mat-line{margin-bottom:0}"], encapsulation: 2 });
UploadCloudWidgetComponent.ctorParameters = () => [
    { type: FormService },
    { type: ThumbnailService },
    { type: ProcessCloudContentService },
    { type: NotificationService },
    { type: LogService }
];
UploadCloudWidgetComponent.propDecorators = {
    fileInput: [{ type: ViewChild, args: ['uploadFiles',] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(UploadCloudWidgetComponent, [{
        type: Component,
        args: [{
                selector: 'upload-cloud-widget',
                template: "<div class=\"adf-upload-widget {{field.className}}\" [class.adf-invalid]=\"!field.isValid\"\n    [class.adf-readonly]=\"field.readOnly\">\n    <label class=\"adf-label\" [attr.for]=\"field.id\">{{ field.name | translate }}<span\n            *ngIf=\"isRequired()\">*</span></label>\n    <div class=\"adf-cloud-upload-widget-container\">\n        <div>\n            <mat-list *ngIf=\"hasFile\">\n                <mat-list-item class=\"adf-upload-files-row\" *ngFor=\"let file of uploadedFiles\">\n                    <img mat-list-icon class=\"adf-upload-widget__icon\" [id]=\"'file-'+file.id+'-icon'\"\n                        [src]=\"getIcon(file.content.mimeType)\" [alt]=\"mimeTypeIcon\" (click)=\"fileClicked(file)\"\n                        (keyup.enter)=\"fileClicked(file)\" role=\"button\" tabindex=\"0\" />\n                    <span matLine id=\"{{'file-'+file.id}}\" (click)=\"fileClicked(file)\" (keyup.enter)=\"fileClicked(file)\"\n                        role=\"button\" tabindex=\"0\" class=\"adf-file\">{{file.name}}</span>\n                    <button *ngIf=\"!field.readOnly\" mat-icon-button [id]=\"'file-'+file.id+'-remove'\"\n                        (click)=\"removeFile(file);\" (keyup.enter)=\"removeFile(file);\">\n                        <mat-icon class=\"mat-24\">highlight_off</mat-icon>\n                    </button>\n                </mat-list-item>\n            </mat-list>\n        </div>\n\n        <div *ngIf=\"(!hasFile || multipleOption) && !field.readOnly\">\n            <button mat-raised-button color=\"primary\" (click)=\"uploadFiles.click()\" [matTooltip]=\"field.tooltip\"\n                matTooltipPosition=\"above\" matTooltipShowDelay=\"1000\">\n                {{ 'FORM.FIELD.UPLOAD' | translate }}<mat-icon>file_upload</mat-icon>\n                <input #uploadFiles [multiple]=\"multipleOption\" type=\"file\" [id]=\"field.form.nodeId\"\n                    (change)=\"onFileChanged($event)\" />\n            </button>\n        </div>\n\n        <div *ngIf=\"!hasFile && field.readOnly\">\n            {{ 'FORM.FIELD.NO_FILE_ATTACHED' | translate }}\n        </div>\n\n    </div>\n    <error-widget [error]=\"field.validationSummary\"></error-widget>\n    <error-widget *ngIf=\"isInvalidFieldRequired()\" required=\"{{ 'FORM.FIELD.REQUIRED' | translate }}\"></error-widget>\n</div>\n",
                host: {
                    '(click)': 'event($event)',
                    '(blur)': 'event($event)',
                    '(change)': 'event($event)',
                    '(focus)': 'event($event)',
                    '(focusin)': 'event($event)',
                    '(focusout)': 'event($event)',
                    '(input)': 'event($event)',
                    '(invalid)': 'event($event)',
                    '(select)': 'event($event)'
                },
                encapsulation: ViewEncapsulation.None,
                styles: [".adf-cloud-upload-widget-container{margin-bottom:15px}.adf-cloud-upload-widget-container input{display:none}.adf-cloud-upload-widget{border-top:.84375em solid transparent;padding:.4375em 0;width:100%;word-break:break-all}.adf-cloud-upload-widget__icon{cursor:pointer;float:left;padding:6px}.adf-cloud-upload-widget__reset{margin-top:-2px}.adf-cloud-upload-files-row .mat-line{margin-bottom:0}"]
            }]
    }], function () { return [{ type: ɵngcc6.FormService }, { type: ɵngcc6.ThumbnailService }, { type: ProcessCloudContentService }, { type: ɵngcc6.NotificationService }, { type: ɵngcc6.LogService }]; }, { fileInput: [{
            type: ViewChild,
            args: ['uploadFiles']
        }] }); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class AttachFileCloudWidgetComponent extends UploadCloudWidgetComponent {
    constructor(formService, logger, thumbnails, processCloudContentService, notificationService, contentNodeSelectorService, appConfigService, apiService, contentNodeSelectorPanelService) {
        super(formService, thumbnails, processCloudContentService, notificationService, logger);
        this.contentNodeSelectorService = contentNodeSelectorService;
        this.appConfigService = appConfigService;
        this.apiService = apiService;
        this.contentNodeSelectorPanelService = contentNodeSelectorPanelService;
        this.typeId = 'AttachFileCloudWidgetComponent';
        this.rootNodeId = AttachFileCloudWidgetComponent.ALIAS_USER_FOLDER;
        this.displayedColumns = ['icon', 'fileName', 'action'];
    }
    get nodesApi() {
        var _a;
        this._nodesApi = (_a = this._nodesApi) !== null && _a !== void 0 ? _a : new NodesApi(this.apiService.getInstance());
        return this._nodesApi;
    }
    ngOnInit() {
        var _a, _b;
        super.ngOnInit();
        if (this.hasFile && this.field.value.length === 1) {
            const files = this.field.value || this.field.form.values[this.field.id];
            this.contentModelFormFileHandler(files[0]);
        }
        this.field.params.displayableCMProperties = (_a = this.field.params.displayableCMProperties) !== null && _a !== void 0 ? _a : [];
        this.displayedColumns.splice(2, 0, ...(_b = this.field.params.displayableCMProperties) === null || _b === void 0 ? void 0 : _b.map(property => property === null || property === void 0 ? void 0 : property.name));
    }
    isPathStaticType() {
        var _a, _b, _c;
        return ((_c = (_b = (_a = this.field.params) === null || _a === void 0 ? void 0 : _a.fileSource) === null || _b === void 0 ? void 0 : _b.destinationFolderPath) === null || _c === void 0 ? void 0 : _c.type) === DestinationFolderPathType.STATIC_TYPE;
    }
    isUploadButtonVisible() {
        return (!this.hasFile || this.multipleOption) && !this.field.readOnly;
    }
    onRemoveAttachFile(file) {
        var _a;
        this.removeFile(file);
        if (file['id'] === ((_a = this.selectedNode) === null || _a === void 0 ? void 0 : _a.id)) {
            this.selectedNode = null;
            this.contentModelFormFileHandler();
        }
    }
    fetchAppNameFromAppConfig() {
        var _a;
        return (_a = this.appConfigService.get('alfresco-deployed-apps')[0]) === null || _a === void 0 ? void 0 : _a.name;
    }
    replaceAppNameAliasWithValue(path) {
        if (path === null || path === void 0 ? void 0 : path.match(AttachFileCloudWidgetComponent.APP_NAME)) {
            const appName = this.fetchAppNameFromAppConfig();
            return path.replace(AttachFileCloudWidgetComponent.APP_NAME, appName);
        }
        return path;
    }
    openSelectDialog() {
        return __awaiter(this, void 0, void 0, function* () {
            const selectedMode = this.field.params.multiple ? 'multiple' : 'single';
            const nodeId = yield this.getDestinationFolderNodeId();
            this.rootNodeId = nodeId ? nodeId : AttachFileCloudWidgetComponent.ALIAS_USER_FOLDER;
            this.contentNodeSelectorPanelService.customModels = this.field.params.customModels;
            this.contentNodeSelectorService
                .openUploadFileDialog(this.rootNodeId, selectedMode, this.isAlfrescoAndLocal(), true)
                .subscribe((selections) => {
                selections.forEach(node => (node['isExternal'] = true));
                const selectionWithoutDuplication = this.removeExistingSelection(selections);
                this.fixIncompatibilityFromPreviousAndNewForm(selectionWithoutDuplication);
                if (this.field.value.length === 1) {
                    this.contentModelFormFileHandler(selections && selections.length > 0 ? selections[0] : null);
                }
            });
        });
    }
    getDestinationFolderNodeId() {
        var _a, _b, _c, _d;
        return __awaiter(this, void 0, void 0, function* () {
            let rootNodeId;
            switch ((_d = (_c = (_b = (_a = this.field) === null || _a === void 0 ? void 0 : _a.params) === null || _b === void 0 ? void 0 : _b.fileSource) === null || _c === void 0 ? void 0 : _c.destinationFolderPath) === null || _d === void 0 ? void 0 : _d.type) {
                case DestinationFolderPathType.STATIC_TYPE:
                    rootNodeId = yield this.getNodeIdFromPath(this.field.params.fileSource.destinationFolderPath);
                    break;
                case DestinationFolderPathType.STRING_TYPE:
                    rootNodeId = yield this.getNodeIdFromPath(this.field.params.fileSource.destinationFolderPath);
                    break;
                case DestinationFolderPathType.FOLDER_TYPE:
                    rootNodeId = yield this.getNodeIdFromFolderVariableValue(this.field.params.fileSource.destinationFolderPath);
                    break;
                default:
                    rootNodeId = yield this.getNodeIdFromPath({ type: '', value: AttachFileCloudWidgetComponent.ALIAS_USER_FOLDER });
                    break;
            }
            return rootNodeId;
        });
    }
    getNodeIdFromPath(destinationFolderPath) {
        return __awaiter(this, void 0, void 0, function* () {
            let nodeId;
            const destinationPath = this.getAliasAndRelativePathFromDestinationFolderPath(destinationFolderPath.value);
            destinationPath.path = this.replaceAppNameAliasWithValue(destinationPath.path);
            try {
                nodeId = yield this.contentNodeSelectorService.getNodeIdFromPath(destinationPath);
            }
            catch (error) {
                this.logService.error(error);
            }
            return nodeId;
        });
    }
    getNodeIdFromFolderVariableValue(destinationFolderPath) {
        return __awaiter(this, void 0, void 0, function* () {
            let nodeId;
            try {
                nodeId = yield this.contentNodeSelectorService.getNodeIdFromFolderVariableValue(destinationFolderPath.value, AttachFileCloudWidgetComponent.ALIAS_USER_FOLDER);
            }
            catch (error) {
                this.logService.error(error);
            }
            return nodeId;
        });
    }
    getAliasAndRelativePathFromDestinationFolderPath(destinationFolderPath) {
        let alias;
        let path;
        if (destinationFolderPath) {
            const startOfRelativePathIndex = destinationFolderPath.indexOf('/');
            if (startOfRelativePathIndex >= 0) {
                alias = destinationFolderPath.substring(0, startOfRelativePathIndex);
                path = destinationFolderPath.substring(startOfRelativePathIndex, destinationFolderPath.length);
            }
            else {
                alias = destinationFolderPath;
            }
        }
        return this.isValidAlias(alias) ? { alias, path } : { alias: AttachFileCloudWidgetComponent.ALIAS_USER_FOLDER, path: undefined };
    }
    removeExistingSelection(selections) {
        const existingNode = [...this.field.value || []];
        return selections.filter(opt => !existingNode.some((node) => node.id === opt.id));
    }
    downloadContent(file) {
        this.processCloudContentService.downloadFile(file.id);
    }
    onAttachFileClicked(nodeSelector) {
        nodeSelector.nodeId = nodeSelector.id;
        this.fileClicked(new ContentLinkModel(nodeSelector));
    }
    getWidgetIcon() {
        return this.isAlfrescoAndLocal() ? 'file_upload' : 'attach_file';
    }
    onRowClicked(file) {
        var _a;
        if (((_a = this.selectedNode) === null || _a === void 0 ? void 0 : _a.id) === (file === null || file === void 0 ? void 0 : file.id)) {
            this.selectedNode = null;
        }
        else {
            this.selectedNode = file;
        }
        this.contentModelFormFileHandler(this.selectedNode);
    }
    contentModelFormFileHandler(file) {
        if ((file === null || file === void 0 ? void 0 : file.id) && this.isRetrieveMetadataOptionEnabled()) {
            const values = {};
            this.nodesApi.getNode(file.id).then(acsNode => {
                var _a;
                const metadata = (_a = acsNode === null || acsNode === void 0 ? void 0 : acsNode.entry) === null || _a === void 0 ? void 0 : _a.properties;
                if (metadata) {
                    const keys = Object.keys(metadata);
                    keys.forEach(key => {
                        const sanitizedKey = key.replace(':', '_');
                        values[sanitizedKey] = metadata[key];
                    });
                    this.formService.updateFormValuesRequested.next(values);
                }
            });
        }
        this.fileClicked(new UploadWidgetContentLinkModel(file, this.field.id));
    }
    isRetrieveMetadataOptionEnabled() {
        var _a, _b;
        return ((_b = (_a = this.field) === null || _a === void 0 ? void 0 : _a.params) === null || _b === void 0 ? void 0 : _b.menuOptions) && this.field.params.menuOptions[AttachFileCloudWidgetComponent.RETRIEVE_METADATA_OPTION];
    }
    isValidAlias(alias) {
        return alias && AttachFileCloudWidgetComponent.VALID_ALIAS.includes(alias);
    }
    ngOnDestroy() {
        this.contentNodeSelectorPanelService.customModels = [];
    }
}
AttachFileCloudWidgetComponent.ɵfac = function AttachFileCloudWidgetComponent_Factory(t) { return new (t || AttachFileCloudWidgetComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc6.FormService), ɵngcc0.ɵɵdirectiveInject(ɵngcc6.LogService), ɵngcc0.ɵɵdirectiveInject(ɵngcc6.ThumbnailService), ɵngcc0.ɵɵdirectiveInject(ProcessCloudContentService), ɵngcc0.ɵɵdirectiveInject(ɵngcc6.NotificationService), ɵngcc0.ɵɵdirectiveInject(ContentCloudNodeSelectorService), ɵngcc0.ɵɵdirectiveInject(ɵngcc6.AppConfigService), ɵngcc0.ɵɵdirectiveInject(ɵngcc6.AlfrescoApiService), ɵngcc0.ɵɵdirectiveInject(ɵngcc26.ContentNodeSelectorPanelService)); };
AttachFileCloudWidgetComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: AttachFileCloudWidgetComponent, selectors: [["adf-cloud-attach-file-cloud-widget"]], hostBindings: function AttachFileCloudWidgetComponent_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function AttachFileCloudWidgetComponent_click_HostBindingHandler($event) { return ctx.event($event); })("blur", function AttachFileCloudWidgetComponent_blur_HostBindingHandler($event) { return ctx.event($event); })("change", function AttachFileCloudWidgetComponent_change_HostBindingHandler($event) { return ctx.event($event); })("focus", function AttachFileCloudWidgetComponent_focus_HostBindingHandler($event) { return ctx.event($event); })("focusin", function AttachFileCloudWidgetComponent_focusin_HostBindingHandler($event) { return ctx.event($event); })("focusout", function AttachFileCloudWidgetComponent_focusout_HostBindingHandler($event) { return ctx.event($event); })("input", function AttachFileCloudWidgetComponent_input_HostBindingHandler($event) { return ctx.event($event); })("invalid", function AttachFileCloudWidgetComponent_invalid_HostBindingHandler($event) { return ctx.event($event); })("select", function AttachFileCloudWidgetComponent_select_HostBindingHandler($event) { return ctx.event($event); });
    } }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 12, vars: 20, consts: [[1, "adf-attach-file-widget-container"], [1, "adf-label"], [4, "ngIf"], [1, "adf-attach-widget-container"], ["class", "adf-attach-widget__menu-upload", 4, "ngIf"], ["id", "adf-attach-widget-readonly-list", 1, "adf-attach-widget-readonly-table"], [3, "uploadedFiles", "hasFile", "selectedNode", "field", "displayedColumns", "mimeTypeIcon", "rowClick", "attachFileClick", "downloadFile", "contentModelFileHandler", "removeAttachFile"], [3, "id", 4, "ngIf"], [3, "error"], [3, "required", 4, "ngIf"], [1, "adf-attach-widget__menu-upload"], ["mat-raised-button", "", "color", "primary", "matTooltipPosition", "above", "matTooltipShowDelay", "1000", 3, "id", "matTooltip", "click"], [3, "id"], [3, "required"]], template: function AttachFileCloudWidgetComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "div");
        ɵngcc0.ɵɵelementStart(2, "label", 1);
        ɵngcc0.ɵɵtext(3);
        ɵngcc0.ɵɵtemplate(4, AttachFileCloudWidgetComponent_span_4_Template, 2, 0, "span", 2);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(5, "div", 3);
        ɵngcc0.ɵɵtemplate(6, AttachFileCloudWidgetComponent_div_6_Template, 6, 6, "div", 4);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(7, "div", 5);
        ɵngcc0.ɵɵelementStart(8, "adf-cloud-file-properties-table", 6);
        ɵngcc0.ɵɵlistener("rowClick", function AttachFileCloudWidgetComponent_Template_adf_cloud_file_properties_table_rowClick_8_listener($event) { return ctx.onRowClicked($event); })("attachFileClick", function AttachFileCloudWidgetComponent_Template_adf_cloud_file_properties_table_attachFileClick_8_listener($event) { return ctx.onAttachFileClicked($event); })("downloadFile", function AttachFileCloudWidgetComponent_Template_adf_cloud_file_properties_table_downloadFile_8_listener($event) { return ctx.downloadContent($event); })("contentModelFileHandler", function AttachFileCloudWidgetComponent_Template_adf_cloud_file_properties_table_contentModelFileHandler_8_listener($event) { return ctx.contentModelFormFileHandler($event); })("removeAttachFile", function AttachFileCloudWidgetComponent_Template_adf_cloud_file_properties_table_removeAttachFile_8_listener($event) { return ctx.onRemoveAttachFile($event); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(9, AttachFileCloudWidgetComponent_div_9_Template, 3, 4, "div", 7);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(10, "error-widget", 8);
        ɵngcc0.ɵɵtemplate(11, AttachFileCloudWidgetComponent_error_widget_11_Template, 2, 3, "error-widget", 9);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵclassMapInterpolate1("adf-attach-widget ", ctx.field.className, "");
        ɵngcc0.ɵɵclassProp("adf-invalid", !ctx.field.isValid)("adf-readonly", ctx.field.readOnly);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵattribute("for", ctx.field.id);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate1("", ctx.field.name, " ");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.isRequired());
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.isUploadButtonVisible());
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("uploadedFiles", ctx.uploadedFiles)("hasFile", ctx.hasFile)("selectedNode", ctx.selectedNode)("field", ctx.field)("displayedColumns", ctx.displayedColumns)("mimeTypeIcon", ctx.mimeTypeIcon);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.hasFile && ctx.field.readOnly);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("error", ctx.field.validationSummary);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.isInvalidFieldRequired());
    } }, directives: function () { return [ɵngcc3.NgIf, FilePropertiesTableCloudComponent, ɵngcc6.ErrorWidgetComponent, ɵngcc13.MatButton, ɵngcc20.MatTooltip, ɵngcc5.MatIcon]; }, pipes: function () { return [ɵngcc10.TranslatePipe]; }, styles: [".adf-attach-widget-container{align-items:center;display:flex}.adf-attach-widget-container input{cursor:pointer;height:100%;opacity:0;position:absolute;right:0;top:0;width:300px;z-index:4}.adf-attach-widget__menu-upload{align-items:center;display:flex;margin-right:8px}.adf-attach-widget__menu-upload .mat-raised-button{font-size:12px;line-height:28px}.adf-attach-widget__menu-upload button span{font-size:12px}.adf-attach-widget__menu-upload button span mat-icon{height:12px;line-height:12px;width:12px}.adf-attach-widget__menu-upload button span .material-icons{font-size:18px}.adf-attach-widget__input-type{height:.1px;opacity:0;overflow:hidden;position:absolute;width:.1px;z-index:-1}.adf-attach-widget__image-logo{padding-left:5px}.adf-attach-widget-repo-button{padding-left:10px}.adf-attach-widget-repo-button .mat-button-wrapper{display:inline}.adf-attach-widget-repo-button .mat-mini-fab.mat-accent{background-color:inherit}.adf-attach-widget{background:var(--theme-colors-mat-grey);border-bottom:none;display:flex;justify-content:space-between;min-height:27px;padding:.4375em;word-break:break-all}.adf-attach-widget .adf-label{font-size:var(--theme-caption-font-size);line-height:var(--theme-headline-line-height);margin-left:8px;text-align:left;white-space:nowrap;width:32px}.adf-attach-widget__icon{cursor:pointer;float:left;padding:6px}.adf-attach-widget__reset{margin-top:-2px}.adf-attach-files-row div.mat-list-item-content{cursor:pointer}.adf-attach-files-row .mat-line{margin-bottom:0}.adf-attach-selected-file-row div.mat-list-item-content .adf-datatable-selected{color:var(--theme-primary-color);padding-right:6px}.adf-attach-file-widget-container{margin:15px}"], encapsulation: 2 });
AttachFileCloudWidgetComponent.ALIAS_ROOT_FOLDER = '-root-';
AttachFileCloudWidgetComponent.ALIAS_USER_FOLDER = '-my-';
AttachFileCloudWidgetComponent.APP_NAME = '-appname-';
AttachFileCloudWidgetComponent.VALID_ALIAS = [
    AttachFileCloudWidgetComponent.ALIAS_ROOT_FOLDER,
    AttachFileCloudWidgetComponent.ALIAS_USER_FOLDER, '-shared-'
];
AttachFileCloudWidgetComponent.RETRIEVE_METADATA_OPTION = 'retrieveMetadata';
AttachFileCloudWidgetComponent.ctorParameters = () => [
    { type: FormService },
    { type: LogService },
    { type: ThumbnailService },
    { type: ProcessCloudContentService },
    { type: NotificationService },
    { type: ContentCloudNodeSelectorService },
    { type: AppConfigService },
    { type: AlfrescoApiService },
    { type: ContentNodeSelectorPanelService }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AttachFileCloudWidgetComponent, [{
        type: Component,
        args: [{
                selector: 'adf-cloud-attach-file-cloud-widget',
                template: "<div class=\"adf-attach-file-widget-container\">\n    <div class=\"adf-attach-widget {{field.className}}\" [class.adf-invalid]=\"!field.isValid\"\n        [class.adf-readonly]=\"field.readOnly\">\n        <label class=\"adf-label\" [attr.for]=\"field.id\">{{field.name}}\n            <span *ngIf=\"isRequired()\">*</span>\n        </label>\n        <div class=\"adf-attach-widget-container\">\n            <div class=\"adf-attach-widget__menu-upload\" *ngIf=\"isUploadButtonVisible()\">\n                <button (click)=\"openSelectDialog()\" mat-raised-button color=\"primary\" [id]=\"field.id\"\n                    [matTooltip]=\"field.tooltip\" matTooltipPosition=\"above\" matTooltipShowDelay=\"1000\">\n                    {{ 'FORM.FIELD.ATTACH' | translate }}\n                    <mat-icon>{{getWidgetIcon()}}</mat-icon>\n                </button>\n            </div>\n        </div>\n    </div>\n\n    <div id=\"adf-attach-widget-readonly-list\" class=\"adf-attach-widget-readonly-table\">\n        <adf-cloud-file-properties-table\n            [uploadedFiles]=\"uploadedFiles\"\n            [hasFile]=\"hasFile\"\n            [selectedNode]=\"selectedNode\"\n            [field]=\"field\"\n            [displayedColumns]=\"displayedColumns\"\n            [mimeTypeIcon]=\"mimeTypeIcon\"\n            (rowClick)=\"onRowClicked($event)\"\n            (attachFileClick)=\"onAttachFileClicked($event)\"\n            (downloadFile)=\"downloadContent($event)\"\n            (contentModelFileHandler)=\"contentModelFormFileHandler($event)\"\n            (removeAttachFile)=\"onRemoveAttachFile($event)\"\n        ></adf-cloud-file-properties-table>\n        <div *ngIf=\"!hasFile && field.readOnly\" id=\"{{'adf-attach-empty-list-'+field.id}}\">\n            {{ 'FORM.FIELD.NO_FILE_ATTACHED' | translate }}\n        </div>\n\n    </div>\n\n    <error-widget [error]=\"field.validationSummary\"></error-widget>\n    <error-widget *ngIf=\"isInvalidFieldRequired()\" required=\"{{ 'FORM.FIELD.REQUIRED' | translate }}\"></error-widget>\n</div>\n",
                host: {
                    '(click)': 'event($event)',
                    '(blur)': 'event($event)',
                    '(change)': 'event($event)',
                    '(focus)': 'event($event)',
                    '(focusin)': 'event($event)',
                    '(focusout)': 'event($event)',
                    '(input)': 'event($event)',
                    '(invalid)': 'event($event)',
                    '(select)': 'event($event)'
                },
                encapsulation: ViewEncapsulation.None,
                styles: [".adf-attach-widget-container{align-items:center;display:flex}.adf-attach-widget-container input{cursor:pointer;height:100%;opacity:0;position:absolute;right:0;top:0;width:300px;z-index:4}.adf-attach-widget__menu-upload{align-items:center;display:flex;margin-right:8px}.adf-attach-widget__menu-upload .mat-raised-button{font-size:12px;line-height:28px}.adf-attach-widget__menu-upload button span{font-size:12px}.adf-attach-widget__menu-upload button span mat-icon{height:12px;line-height:12px;width:12px}.adf-attach-widget__menu-upload button span .material-icons{font-size:18px}.adf-attach-widget__input-type{height:.1px;opacity:0;overflow:hidden;position:absolute;width:.1px;z-index:-1}.adf-attach-widget__image-logo{padding-left:5px}.adf-attach-widget-repo-button{padding-left:10px}.adf-attach-widget-repo-button .mat-button-wrapper{display:inline}.adf-attach-widget-repo-button .mat-mini-fab.mat-accent{background-color:inherit}.adf-attach-widget{background:var(--theme-colors-mat-grey);border-bottom:none;display:flex;justify-content:space-between;min-height:27px;padding:.4375em;word-break:break-all}.adf-attach-widget .adf-label{font-size:var(--theme-caption-font-size);line-height:var(--theme-headline-line-height);margin-left:8px;text-align:left;white-space:nowrap;width:32px}.adf-attach-widget__icon{cursor:pointer;float:left;padding:6px}.adf-attach-widget__reset{margin-top:-2px}.adf-attach-files-row div.mat-list-item-content{cursor:pointer}.adf-attach-files-row .mat-line{margin-bottom:0}.adf-attach-selected-file-row div.mat-list-item-content .adf-datatable-selected{color:var(--theme-primary-color);padding-right:6px}.adf-attach-file-widget-container{margin:15px}"]
            }]
    }], function () { return [{ type: ɵngcc6.FormService }, { type: ɵngcc6.LogService }, { type: ɵngcc6.ThumbnailService }, { type: ProcessCloudContentService }, { type: ɵngcc6.NotificationService }, { type: ContentCloudNodeSelectorService }, { type: ɵngcc6.AppConfigService }, { type: ɵngcc6.AlfrescoApiService }, { type: ɵngcc26.ContentNodeSelectorPanelService }]; }, null); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class PropertiesViewerWidgetComponent extends WidgetComponent {
    constructor(formService) {
        super(formService);
        this.nodeContentLoaded = new EventEmitter();
    }
    onNodeContentLoaded(node) {
        this.nodeContentLoaded.emit(node);
    }
}
PropertiesViewerWidgetComponent.ɵfac = function PropertiesViewerWidgetComponent_Factory(t) { return new (t || PropertiesViewerWidgetComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc6.FormService)); };
PropertiesViewerWidgetComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: PropertiesViewerWidgetComponent, selectors: [["adf-properties-viewer-widget"]], hostBindings: function PropertiesViewerWidgetComponent_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function PropertiesViewerWidgetComponent_click_HostBindingHandler($event) { return ctx.event($event); })("blur", function PropertiesViewerWidgetComponent_blur_HostBindingHandler($event) { return ctx.event($event); })("change", function PropertiesViewerWidgetComponent_change_HostBindingHandler($event) { return ctx.event($event); })("focus", function PropertiesViewerWidgetComponent_focus_HostBindingHandler($event) { return ctx.event($event); })("focusin", function PropertiesViewerWidgetComponent_focusin_HostBindingHandler($event) { return ctx.event($event); })("focusout", function PropertiesViewerWidgetComponent_focusout_HostBindingHandler($event) { return ctx.event($event); })("input", function PropertiesViewerWidgetComponent_input_HostBindingHandler($event) { return ctx.event($event); })("invalid", function PropertiesViewerWidgetComponent_invalid_HostBindingHandler($event) { return ctx.event($event); })("select", function PropertiesViewerWidgetComponent_select_HostBindingHandler($event) { return ctx.event($event); });
    } }, outputs: { nodeContentLoaded: "nodeContentLoaded" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 8, vars: 17, consts: [[1, "adf-label"], [4, "ngIf"], [3, "ngTemplateOutlet", "ngTemplateOutletContext"], ["properties", ""], [3, "error"], [3, "nodeId", "displayDefaultProperties", "expanded", "preset", "displayEmpty", "editable", "multi", "displayAspect", "copyToClipboardAction", "useChipsForMultiValueProperty", "nodeContentLoaded", 4, "ngIf"], [3, "nodeId", "displayDefaultProperties", "expanded", "preset", "displayEmpty", "editable", "multi", "displayAspect", "copyToClipboardAction", "useChipsForMultiValueProperty", "nodeContentLoaded"]], template: function PropertiesViewerWidgetComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div");
        ɵngcc0.ɵɵelementStart(1, "label", 0);
        ɵngcc0.ɵɵtext(2);
        ɵngcc0.ɵɵpipe(3, "translate");
        ɵngcc0.ɵɵtemplate(4, PropertiesViewerWidgetComponent_span_4_Template, 2, 0, "span", 1);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(5, PropertiesViewerWidgetComponent_ng_template_5_Template, 1, 1, "ng-template", 2, 3, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵelement(7, "error-widget", 4);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        const _r1 = ɵngcc0.ɵɵreference(6);
        ɵngcc0.ɵɵclassMapInterpolate1("adf-file-viewer-widget ", ctx.field.className, "");
        ɵngcc0.ɵɵclassProp("adf-invalid", !ctx.field.isValid)("adf-readonly", ctx.field.readOnly);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵattribute("for", ctx.field.id);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(3, 13, ctx.field.name));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.isRequired());
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngTemplateOutlet", _r1)("ngTemplateOutletContext", ɵngcc0.ɵɵpureFunction1(15, _c20, ctx.field.params == null ? null : ctx.field.params.propertiesViewerOptions));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("error", ctx.field.validationSummary);
    } }, directives: function () { return [ɵngcc3.NgIf, ɵngcc3.NgTemplateOutlet, ɵngcc6.ErrorWidgetComponent, PropertiesViewerWrapperComponent]; }, pipes: function () { return [ɵngcc10.TranslatePipe]; }, styles: ["adf-properties-viewer-widget{height:100%;width:100%}adf-properties-viewer-widget adf-properties-viewer-wrapper{border:1px solid var(--theme-border-color);border-radius:6px;display:block;height:100%;width:100%}adf-properties-viewer-widget adf-properties-viewer-wrapper .adf-properties-viewer-wrapper-loading{height:100%;width:100%}adf-properties-viewer-widget adf-properties-viewer-wrapper .adf-properties-viewer-wrapper-loading mat-progress-spinner{display:block;margin:auto}"], encapsulation: 2 });
PropertiesViewerWidgetComponent.ctorParameters = () => [
    { type: FormService }
];
PropertiesViewerWidgetComponent.propDecorators = {
    nodeContentLoaded: [{ type: Output }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(PropertiesViewerWidgetComponent, [{
        type: Component,
        args: [{
                selector: 'adf-properties-viewer-widget',
                template: "<div class=\"adf-file-viewer-widget {{field.className}}\" [class.adf-invalid]=\"!field.isValid\"\n    [class.adf-readonly]=\"field.readOnly\">\n    <label class=\"adf-label\" [attr.for]=\"field.id\">{{field.name | translate }}<span\n            *ngIf=\"isRequired()\">*</span></label>\n    <ng-template #properties [ngTemplateOutlet]=\"properties\" let-properties=\"properties\" [ngTemplateOutletContext]=\"{ properties: field.params?.propertiesViewerOptions }\">\n        <adf-properties-viewer-wrapper *ngIf=\"field.value\" [nodeId]=\"field.value\"\n            [displayDefaultProperties]=\"properties?.displayDefaultProperties !== undefined ?  properties?.displayDefaultProperties : true\"\n            [expanded]=\"properties?.expanded !== undefined ? properties?.expanded : true\"\n            [preset]=\"properties?.preset\"\n            [displayEmpty]=\"properties?.displayEmpty !== undefined ? properties?.displayEmpty : false\"\n            [editable]=\"properties?.editable !== undefined ? properties?.editable : false\"\n            [multi]=\"properties?.multi !== undefined ? properties?.multi : false\"\n            [displayAspect]=\"properties?.displayAspect !== undefined ? properties?.displayAspect : null\"\n            [copyToClipboardAction]=\"properties?.copyToClipboardAction !== undefined ? properties?.copyToClipboardAction : true\"\n            [useChipsForMultiValueProperty]=\"properties?.useChipsForMultiValueProperty !== undefined ? properties?.useChipsForMultiValueProperty : true\"\n            (nodeContentLoaded)=\"onNodeContentLoaded($event)\">\n        </adf-properties-viewer-wrapper>\n    </ng-template>\n    <error-widget [error]=\"field.validationSummary\"></error-widget>\n</div>\n",
                host: {
                    '(click)': 'event($event)',
                    '(blur)': 'event($event)',
                    '(change)': 'event($event)',
                    '(focus)': 'event($event)',
                    '(focusin)': 'event($event)',
                    '(focusout)': 'event($event)',
                    '(input)': 'event($event)',
                    '(invalid)': 'event($event)',
                    '(select)': 'event($event)'
                },
                encapsulation: ViewEncapsulation.None,
                styles: ["adf-properties-viewer-widget{height:100%;width:100%}adf-properties-viewer-widget adf-properties-viewer-wrapper{border:1px solid var(--theme-border-color);border-radius:6px;display:block;height:100%;width:100%}adf-properties-viewer-widget adf-properties-viewer-wrapper .adf-properties-viewer-wrapper-loading{height:100%;width:100%}adf-properties-viewer-widget adf-properties-viewer-wrapper .adf-properties-viewer-wrapper-loading mat-progress-spinner{display:block;margin:auto}"]
            }]
    }], function () { return [{ type: ɵngcc6.FormService }]; }, { nodeContentLoaded: [{
            type: Output
        }] }); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class PropertiesViewerWrapperComponent {
    constructor(nodesApiService) {
        this.nodesApiService = nodesApiService;
        this.loading = true;
        this.displayAspect = null;
        this.nodeContentLoaded = new EventEmitter();
    }
    ngOnChanges(changes) {
        if (changes && changes['nodeId'] && changes['nodeId'].currentValue && !changes['nodeId'].isFirstChange()) {
            this.getNode(changes['nodeId'].currentValue);
        }
    }
    ngOnInit() {
        if (this.nodeId) {
            this.getNode(this.nodeId);
        }
    }
    getNode(nodeId) {
        this.loading = true;
        this.nodesApiService.getNode(nodeId).subscribe(retrievedNode => {
            this.node = retrievedNode;
            this.loading = false;
            this.nodeContentLoaded.emit(retrievedNode);
        });
    }
}
PropertiesViewerWrapperComponent.ɵfac = function PropertiesViewerWrapperComponent_Factory(t) { return new (t || PropertiesViewerWrapperComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc6.NodesApiService)); };
PropertiesViewerWrapperComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: PropertiesViewerWrapperComponent, selectors: [["adf-properties-viewer-wrapper"]], inputs: { displayAspect: "displayAspect", nodeId: "nodeId", editable: "editable", displayEmpty: "displayEmpty", expanded: "expanded", multi: "multi", preset: "preset", displayDefaultProperties: "displayDefaultProperties", copyToClipboardAction: "copyToClipboardAction", useChipsForMultiValueProperty: "useChipsForMultiValueProperty" }, outputs: { nodeContentLoaded: "nodeContentLoaded" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 3, vars: 2, consts: [[3, "displayDefaultProperties", "expanded", "node", "preset", "displayEmpty", "editable", "multi", "displayAspect", "copyToClipboardAction", "useChipsForMultiValueProperty", 4, "ngIf", "ngIfElse"], ["loadingTemplate", ""], [3, "displayDefaultProperties", "expanded", "node", "preset", "displayEmpty", "editable", "multi", "displayAspect", "copyToClipboardAction", "useChipsForMultiValueProperty"], [1, "adf-properties-viewer-wrapper-loading"]], template: function PropertiesViewerWrapperComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, PropertiesViewerWrapperComponent_adf_content_metadata_0_Template, 1, 10, "adf-content-metadata", 0);
        ɵngcc0.ɵɵtemplate(1, PropertiesViewerWrapperComponent_ng_template_1_Template, 2, 0, "ng-template", null, 1, ɵngcc0.ɵɵtemplateRefExtractor);
    } if (rf & 2) {
        const _r1 = ɵngcc0.ɵɵreference(2);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.loading)("ngIfElse", _r1);
    } }, directives: [ɵngcc3.NgIf, ɵngcc26.ContentMetadataComponent, ɵngcc9.MatProgressSpinner], encapsulation: 2 });
PropertiesViewerWrapperComponent.ctorParameters = () => [
    { type: NodesApiService }
];
PropertiesViewerWrapperComponent.propDecorators = {
    nodeId: [{ type: Input }],
    editable: [{ type: Input }],
    displayEmpty: [{ type: Input }],
    expanded: [{ type: Input }],
    multi: [{ type: Input }],
    preset: [{ type: Input }],
    displayDefaultProperties: [{ type: Input }],
    displayAspect: [{ type: Input }],
    copyToClipboardAction: [{ type: Input }],
    useChipsForMultiValueProperty: [{ type: Input }],
    nodeContentLoaded: [{ type: Output }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(PropertiesViewerWrapperComponent, [{
        type: Component,
        args: [{
                selector: 'adf-properties-viewer-wrapper',
                template: "<adf-content-metadata [displayDefaultProperties]=\"displayDefaultProperties\" [expanded]=\"expanded\" [node]=\"node\"\n    [preset]=\"preset\" [displayEmpty]=\"displayEmpty\" [editable]=\"editable\" [multi]=\"multi\"\n    [displayAspect]=\"displayAspect\" [copyToClipboardAction]=\"copyToClipboardAction\"\n    [useChipsForMultiValueProperty]=\"useChipsForMultiValueProperty\" *ngIf=\"!loading; else loadingTemplate\">\n</adf-content-metadata>\n<ng-template #loadingTemplate>\n    <div class=\"adf-properties-viewer-wrapper-loading\">\n        <mat-progress-spinner></mat-progress-spinner>\n    </div>\n</ng-template>\n",
                encapsulation: ViewEncapsulation.None
            }]
    }], function () { return [{ type: ɵngcc6.NodesApiService }]; }, { displayAspect: [{
            type: Input
        }], nodeContentLoaded: [{
            type: Output
        }], nodeId: [{
            type: Input
        }], editable: [{
            type: Input
        }], displayEmpty: [{
            type: Input
        }], expanded: [{
            type: Input
        }], multi: [{
            type: Input
        }], preset: [{
            type: Input
        }], displayDefaultProperties: [{
            type: Input
        }], copyToClipboardAction: [{
            type: Input
        }], useChipsForMultiValueProperty: [{
            type: Input
        }] }); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class RadioButtonsCloudWidgetComponent extends WidgetComponent {
    constructor(formService, formCloudService, logService) {
        super(formService);
        this.formService = formService;
        this.formCloudService = formCloudService;
        this.logService = logService;
        this.typeId = 'RadioButtonsCloudWidgetComponent';
        this.onDestroy$ = new Subject();
    }
    ngOnInit() {
        if (this.field && this.field.restUrl) {
            this.getValuesFromRestApi();
        }
    }
    getValuesFromRestApi() {
        this.formCloudService.getRestWidgetData(this.field.form.id, this.field.id)
            .pipe(takeUntil(this.onDestroy$))
            .subscribe((result) => {
            this.field.options = result;
            this.field.updateForm();
        }, (err) => this.handleError(err));
    }
    onOptionClick(optionSelected) {
        this.field.value = optionSelected;
        this.fieldChanged.emit(this.field);
    }
    handleError(error) {
        this.logService.error(error);
    }
    isChecked(option) {
        var _a, _b;
        if (this.field.value && typeof this.field.value === 'object') {
            let id = 'id';
            let name = 'name';
            if (this.field.restUrl) {
                id = (_a = this.field.restIdProperty) !== null && _a !== void 0 ? _a : 'id';
                name = (_b = this.field.restLabelProperty) !== null && _b !== void 0 ? _b : 'name';
            }
            return this.field.value[id] === option.id || this.field.value[name] === option.name;
        }
        return this.field.value === option.id;
    }
}
RadioButtonsCloudWidgetComponent.ɵfac = function RadioButtonsCloudWidgetComponent_Factory(t) { return new (t || RadioButtonsCloudWidgetComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc6.FormService), ɵngcc0.ɵɵdirectiveInject(FormCloudService), ɵngcc0.ɵɵdirectiveInject(ɵngcc6.LogService)); };
RadioButtonsCloudWidgetComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: RadioButtonsCloudWidgetComponent, selectors: [["radio-buttons-cloud-widget"]], hostBindings: function RadioButtonsCloudWidgetComponent_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function RadioButtonsCloudWidgetComponent_click_HostBindingHandler($event) { return ctx.event($event); })("blur", function RadioButtonsCloudWidgetComponent_blur_HostBindingHandler($event) { return ctx.event($event); })("change", function RadioButtonsCloudWidgetComponent_change_HostBindingHandler($event) { return ctx.event($event); })("focus", function RadioButtonsCloudWidgetComponent_focus_HostBindingHandler($event) { return ctx.event($event); })("focusin", function RadioButtonsCloudWidgetComponent_focusin_HostBindingHandler($event) { return ctx.event($event); })("focusout", function RadioButtonsCloudWidgetComponent_focusout_HostBindingHandler($event) { return ctx.event($event); })("input", function RadioButtonsCloudWidgetComponent_input_HostBindingHandler($event) { return ctx.event($event); })("invalid", function RadioButtonsCloudWidgetComponent_invalid_HostBindingHandler($event) { return ctx.event($event); })("select", function RadioButtonsCloudWidgetComponent_select_HostBindingHandler($event) { return ctx.event($event); });
    } }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 10, vars: 18, consts: [[3, "id"], [1, "adf-radio-button-container"], [1, "adf-label"], [4, "ngIf"], [1, "adf-radio-group", 3, "ngModel", "disabled", "ngModelChange"], ["matTooltipPosition", "above", "matTooltipShowDelay", "1000", "color", "primary", "class", "adf-radio-button", 3, "matTooltip", "id", "name", "value", "checked", "change", 4, "ngFor", "ngForOf"], [3, "error"], [3, "required", 4, "ngIf"], ["matTooltipPosition", "above", "matTooltipShowDelay", "1000", "color", "primary", 1, "adf-radio-button", 3, "matTooltip", "id", "name", "value", "checked", "change"], [3, "required"]], template: function RadioButtonsCloudWidgetComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "div", 1);
        ɵngcc0.ɵɵelementStart(2, "label", 2);
        ɵngcc0.ɵɵtext(3);
        ɵngcc0.ɵɵpipe(4, "translate");
        ɵngcc0.ɵɵtemplate(5, RadioButtonsCloudWidgetComponent_span_5_Template, 2, 0, "span", 3);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(6, "mat-radio-group", 4);
        ɵngcc0.ɵɵlistener("ngModelChange", function RadioButtonsCloudWidgetComponent_Template_mat_radio_group_ngModelChange_6_listener($event) { return ctx.field.value = $event; });
        ɵngcc0.ɵɵtemplate(7, RadioButtonsCloudWidgetComponent_mat_radio_button_7_Template, 2, 6, "mat-radio-button", 5);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(8, "error-widget", 6);
        ɵngcc0.ɵɵtemplate(9, RadioButtonsCloudWidgetComponent_error_widget_9_Template, 2, 3, "error-widget", 7);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵclassMapInterpolate1("adf-radio-buttons-widget-cloud ", ctx.field.className, "");
        ɵngcc0.ɵɵclassProp("adf-invalid", !ctx.field.isValid)("adf-readonly", ctx.field.readOnly);
        ɵngcc0.ɵɵproperty("id", ctx.field.id);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵattribute("for", ctx.field.id);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(4, 16, ctx.field.name));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.isRequired());
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngModel", ctx.field.value)("disabled", ctx.field.readOnly);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.field.options);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("error", ctx.field.validationSummary);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.isInvalidFieldRequired());
    } }, directives: [ɵngcc3.NgIf, ɵngcc27.MatRadioGroup, ɵngcc17.NgControlStatus, ɵngcc17.NgModel, ɵngcc3.NgForOf, ɵngcc6.ErrorWidgetComponent, ɵngcc27.MatRadioButton, ɵngcc20.MatTooltip], pipes: [ɵngcc10.TranslatePipe], styles: [".adf-radio-button-container{display:flex;flex-direction:column;margin-bottom:15px}.adf-radio-group{display:inline-flex;flex-direction:column;margin-left:5px;margin-top:15px}.adf-radio-button{margin:5px}"], encapsulation: 2 });
RadioButtonsCloudWidgetComponent.ctorParameters = () => [
    { type: FormService },
    { type: FormCloudService },
    { type: LogService }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(RadioButtonsCloudWidgetComponent, [{
        type: Component,
        args: [{
                selector: 'radio-buttons-cloud-widget',
                template: "<div class=\"adf-radio-buttons-widget-cloud {{field.className}}\"\n     [class.adf-invalid]=\"!field.isValid\" [class.adf-readonly]=\"field.readOnly\" [id]=\"field.id\">\n    <div class=\"adf-radio-button-container\">\n        <label class=\"adf-label\" [attr.for]=\"field.id\">{{field.name | translate }}<span *ngIf=\"isRequired()\">*</span></label>\n        <mat-radio-group class=\"adf-radio-group\" [(ngModel)]=\"field.value\" [disabled]=\"field.readOnly\">\n            <mat-radio-button\n                [matTooltip]=\"field.tooltip\"\n                matTooltipPosition=\"above\"\n                matTooltipShowDelay=\"1000\"\n                [id]=\"field.id + '-' + opt.id\"\n                [name]=\"field.id\"\n                [value]=\"opt.id\"\n                [checked]=\"isChecked(opt)\"\n                (change)=\"onOptionClick(opt.id)\"\n                color=\"primary\"\n                class=\"adf-radio-button\" *ngFor=\"let opt of field.options\" >\n                {{opt.name}}\n            </mat-radio-button>\n        </mat-radio-group>\n    </div>\n    <error-widget [error]=\"field.validationSummary\" ></error-widget>\n    <error-widget *ngIf=\"isInvalidFieldRequired()\" required=\"{{ 'FORM.FIELD.REQUIRED' | translate }}\"></error-widget>\n</div>\n",
                host: {
                    '(click)': 'event($event)',
                    '(blur)': 'event($event)',
                    '(change)': 'event($event)',
                    '(focus)': 'event($event)',
                    '(focusin)': 'event($event)',
                    '(focusout)': 'event($event)',
                    '(input)': 'event($event)',
                    '(invalid)': 'event($event)',
                    '(select)': 'event($event)'
                },
                encapsulation: ViewEncapsulation.None,
                styles: [".adf-radio-button-container{display:flex;flex-direction:column;margin-bottom:15px}.adf-radio-group{display:inline-flex;flex-direction:column;margin-left:5px;margin-top:15px}.adf-radio-button{margin:5px}"]
            }]
    }], function () { return [{ type: ɵngcc6.FormService }, { type: FormCloudService }, { type: ɵngcc6.LogService }]; }, null); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class FilePropertiesTableCloudComponent {
    constructor(localizedDatePipe, thumbnailService) {
        this.localizedDatePipe = localizedDatePipe;
        this.thumbnailService = thumbnailService;
        this.rowClick = new EventEmitter();
        this.attachFileClick = new EventEmitter();
        this.downloadFile = new EventEmitter();
        this.contentModelFileHandler = new EventEmitter();
        this.removeAttachFile = new EventEmitter();
    }
    onRowClicked(file) {
        this.rowClick.emit(file);
    }
    onAttachFileClicked(nodeSelector) {
        this.attachFileClick.emit(nodeSelector);
    }
    downloadContent(file) {
        this.downloadFile.emit(file);
    }
    contentModelFormFileHandler(file) {
        this.contentModelFileHandler.emit(file);
    }
    onRemoveAttachFile(file) {
        this.removeAttachFile.emit(file);
    }
    getIcon(mimeType) {
        return this.thumbnailService.getMimeTypeIcon(mimeType);
    }
    getColumnValue(file, displayableCMProperty) {
        var _a;
        if (!file.properties[displayableCMProperty.prefixedName]) {
            const fieldProperty = (_a = this.field.params.displayableCMProperties) === null || _a === void 0 ? void 0 : _a.find(property => property.name === displayableCMProperty.name);
            return fieldProperty.defaultValue ? this.checkDateTypeAndTransform(displayableCMProperty.dataType, fieldProperty.defaultValue) : '--';
        }
        return file.properties[displayableCMProperty.prefixedName] ?
            this.checkDateTypeAndTransform(displayableCMProperty.dataType, file.properties[displayableCMProperty.prefixedName]) :
            '--';
    }
    checkDateTypeAndTransform(dataType, value) {
        if (dataType === 'd:date') {
            return this.localizedDatePipe.transform(value);
        }
        else if (dataType === 'd:datetime') {
            return this.localizedDatePipe.transform(value, 'medium');
        }
        return value;
    }
    displayMenuOption(option) {
        var _a, _b;
        return ((_b = (_a = this.field) === null || _a === void 0 ? void 0 : _a.params) === null || _b === void 0 ? void 0 : _b.menuOptions) ? this.field.params.menuOptions[option] : option !== FilePropertiesTableCloudComponent.RETRIEVE_METADATA_OPTION;
    }
}
FilePropertiesTableCloudComponent.ɵfac = function FilePropertiesTableCloudComponent_Factory(t) { return new (t || FilePropertiesTableCloudComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc6.LocalizedDatePipe), ɵngcc0.ɵɵdirectiveInject(ɵngcc6.ThumbnailService)); };
FilePropertiesTableCloudComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: FilePropertiesTableCloudComponent, selectors: [["adf-cloud-file-properties-table"]], inputs: { uploadedFiles: "uploadedFiles", hasFile: "hasFile", selectedNode: "selectedNode", field: "field", displayedColumns: "displayedColumns", mimeTypeIcon: "mimeTypeIcon" }, outputs: { rowClick: "rowClick", attachFileClick: "attachFileClick", downloadFile: "downloadFile", contentModelFileHandler: "contentModelFileHandler", removeAttachFile: "removeAttachFile" }, decls: 2, vars: 1, consts: [[1, "adf-file-properties-table"], ["mat-table", "", "class", "mat-elevation-z0", 3, "dataSource", 4, "ngIf"], ["mat-table", "", 1, "mat-elevation-z0", 3, "dataSource"], ["matColumnDef", "icon"], ["mat-header-cell", "", 4, "matHeaderCellDef"], ["mat-cell", "", 4, "matCellDef"], ["matColumnDef", "fileName"], [3, "matColumnDef", 4, "ngFor", "ngForOf"], ["matColumnDef", "action"], ["mat-header-row", "", 4, "matHeaderRowDef"], ["mat-row", "", 4, "matRowDef", "matRowDefColumns"], ["mat-header-cell", ""], ["mat-cell", ""], ["mat-list-icon", "", "class", "adf-datatable-selected", 3, "click", 4, "ngIf"], ["mat-list-icon", "", "class", "adf-attach-widget__icon", "role", "button", "tabindex", "0", 3, "id", "src", "alt", "click", 4, "ngIf"], ["mat-list-icon", "", 1, "adf-datatable-selected", 3, "click"], ["mat-list-icon", "", "role", "button", "tabindex", "0", 1, "adf-attach-widget__icon", 3, "id", "src", "alt", "click"], ["matLine", "", "role", "button", "tabindex", "0", 1, "adf-file", 3, "id", "click"], [3, "matColumnDef"], ["matLine", "", "role", "button", "tabindex", "0", 3, "id", "click"], ["mat-icon-button", "", 3, "id", "matMenuTriggerFor", 4, "ngIf"], ["xPosition", "before"], ["fileActionMenu", "matMenu"], ["mat-menu-item", "", 3, "id", "click", 4, "ngIf"], ["mat-menu-item", "", 3, "id", "click", "keyup.enter", 4, "ngIf"], ["mat-icon-button", "", 3, "id", "matMenuTriggerFor"], ["mat-menu-item", "", 3, "id", "click"], [1, "mat-24"], ["mat-menu-item", "", 3, "id", "click", "keyup.enter"], ["mat-header-row", ""], ["mat-row", ""]], template: function FilePropertiesTableCloudComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵtemplate(1, FilePropertiesTableCloudComponent_table_1_Template, 13, 4, "table", 1);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.hasFile);
    } }, directives: [ɵngcc3.NgIf, ɵngcc28.MatTable, ɵngcc28.MatColumnDef, ɵngcc28.MatHeaderCellDef, ɵngcc28.MatCellDef, ɵngcc3.NgForOf, ɵngcc28.MatHeaderRowDef, ɵngcc28.MatRowDef, ɵngcc28.MatHeaderCell, ɵngcc28.MatCell, ɵngcc5.MatIcon, ɵngcc7.MatListIconCssMatStyler, ɵngcc8.MatLine, ɵngcc29._MatMenu, ɵngcc13.MatButton, ɵngcc29.MatMenuTrigger, ɵngcc29.MatMenuItem, ɵngcc28.MatHeaderRow, ɵngcc28.MatRow], pipes: [ɵngcc10.TranslatePipe, ɵngcc3.TitleCasePipe], styles: [".adf-file-properties-table[_ngcontent-%COMP%]   table[_ngcontent-%COMP%]{border:1px solid var(--theme-border-color);box-shadow:none;width:100%}.adf-file-properties-table[_ngcontent-%COMP%]   table[_ngcontent-%COMP%]   .adf-datatable-selected[_ngcontent-%COMP%]{padding:6px}.adf-file-properties-table[_ngcontent-%COMP%]   table[_ngcontent-%COMP%]   tr.mat-header-row[_ngcontent-%COMP%]{height:32px}.adf-file-properties-table[_ngcontent-%COMP%]   table[_ngcontent-%COMP%]   th[_ngcontent-%COMP%]{font-weight:700;padding-right:0!important}.adf-file-properties-table[_ngcontent-%COMP%]   table[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]{max-width:50px;overflow:hidden;padding-right:0!important;text-overflow:ellipsis;white-space:nowrap}.adf-file-properties-table[_ngcontent-%COMP%]   table[_ngcontent-%COMP%]   td.mat-cell[_ngcontent-%COMP%]:first-of-type, .adf-file-properties-table[_ngcontent-%COMP%]   table[_ngcontent-%COMP%]   td.mat-cell[_ngcontent-%COMP%]:last-of-type, .adf-file-properties-table[_ngcontent-%COMP%]   table[_ngcontent-%COMP%]   td.mat-footer-cell[_ngcontent-%COMP%]:first-of-type, .adf-file-properties-table[_ngcontent-%COMP%]   table[_ngcontent-%COMP%]   td.mat-footer-cell[_ngcontent-%COMP%]:last-of-type{width:18%!important}"] });
FilePropertiesTableCloudComponent.RETRIEVE_METADATA_OPTION = 'retrieveMetadata';
FilePropertiesTableCloudComponent.ctorParameters = () => [
    { type: LocalizedDatePipe },
    { type: ThumbnailService }
];
FilePropertiesTableCloudComponent.propDecorators = {
    uploadedFiles: [{ type: Input }],
    hasFile: [{ type: Input }],
    selectedNode: [{ type: Input }],
    field: [{ type: Input }],
    displayedColumns: [{ type: Input }],
    mimeTypeIcon: [{ type: Input }],
    rowClick: [{ type: Output }],
    attachFileClick: [{ type: Output }],
    downloadFile: [{ type: Output }],
    contentModelFileHandler: [{ type: Output }],
    removeAttachFile: [{ type: Output }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FilePropertiesTableCloudComponent, [{
        type: Component,
        args: [{
                selector: 'adf-cloud-file-properties-table',
                template: "<div class=\"adf-file-properties-table\">\n    <table mat-table [dataSource]=\"uploadedFiles\" class=\"mat-elevation-z0\" *ngIf=\"hasFile\">\n        <ng-container matColumnDef=\"icon\">\n            <th mat-header-cell *matHeaderCellDef></th>\n            <td mat-cell *matCellDef=\"let element\">\n                <mat-icon mat-list-icon class=\"adf-datatable-selected\"\n                    *ngIf=\"selectedNode && element.id === selectedNode.id\" (click)=\"onRowClicked(element)\">\n                    check_circle\n                </mat-icon>\n                <img mat-list-icon class=\"adf-attach-widget__icon\"\n                    *ngIf=\"!selectedNode || element.id !== selectedNode.id\" [id]=\"'file-'+element?.id+'-icon'\"\n                    (click)=\"onRowClicked(element)\"\n                    [src]=\"element.content ? getIcon(element.content.mimeType) : getIcon(element['mimeType'])\"\n                    [alt]=\"mimeTypeIcon\" role=\"button\" tabindex=\"0\" />\n            </td>\n        </ng-container>\n    \n        <ng-container matColumnDef=\"fileName\">\n            <th mat-header-cell *matHeaderCellDef>{{ 'FORM.FIELD.FILE_NAME' | translate }}</th>\n            <td mat-cell *matCellDef=\"let element\">\n                <span matLine id=\"{{'file-'+element?.id}}\" role=\"button\" tabindex=\"0\" class=\"adf-file\"\n                    (click)=\"onRowClicked(element)\">{{element.name}}</span>\n            </td>\n        </ng-container>\n    \n        <ng-container *ngFor=\"let columnName of field?.params?.displayableCMProperties\" [matColumnDef]=\"columnName.name\">\n            <th mat-header-cell *matHeaderCellDef>{{ columnName.title ? columnName.title : columnName.name | titlecase\n                }}</th>\n            <td mat-cell *matCellDef=\"let row\">\n                <span matLine id=\"{{'fileProperty-'+row?.id+'-'+columnName?.name}}\" role=\"button\" tabindex=\"0\"\n                    (click)=\"onRowClicked(row)\">{{ getColumnValue(row, columnName) }}</span>\n            </td>\n        </ng-container>\n    \n        <ng-container matColumnDef=\"action\">\n            <th mat-header-cell *matHeaderCellDef></th>\n            <td mat-cell *matCellDef=\"let element\">\n                <button id=\"{{'file-'+element?.id+'-option-menu'}}\" mat-icon-button [matMenuTriggerFor]=\"fileActionMenu\"\n                    *ngIf=\"!!element.content?.mimeType\">\n                    <mat-icon>more_vert</mat-icon>\n                </button>\n                <mat-menu #fileActionMenu=\"matMenu\" xPosition=\"before\">\n                    <button *ngIf=\"displayMenuOption('show') && !!element.content?.mimeType\"\n                        id=\"{{'file-'+element?.id+'-show-file'}}\" mat-menu-item (click)=\"onAttachFileClicked(element)\">\n                        <mat-icon>visibility</mat-icon>\n                        <span>{{ 'FORM.FIELD.VIEW_FILE' | translate }}</span>\n                    </button>\n                    <button *ngIf=\"displayMenuOption('download') && !!element.content?.mimeType\"\n                        id=\"{{'file-'+element?.id+'-download-file'}}\" mat-menu-item (click)=\"downloadContent(element)\">\n                        <mat-icon>file_download</mat-icon>\n                        <span>{{ 'FORM.FIELD.DOWNLOAD_FILE' | translate }}</span>\n                    </button>\n                    <button *ngIf=\"displayMenuOption('retrieveMetadata') && !!element.content?.mimeType\"\n                        id=\"{{'file-'+element?.id+'-retrieve-file-metadata'}}\" mat-menu-item\n                        (click)=\"contentModelFormFileHandler(element)\">\n                        <mat-icon class=\"mat-24\">low_priority</mat-icon>\n                        <span>{{ 'ADF_CLOUD_FORM_COMPONENT.RETRIEVE_METADATA' | translate }}</span>\n                    </button>\n                    <button *ngIf=\"!field.readOnly && displayMenuOption('remove')\"\n                        id=\"{{'file-'+element?.id+'-remove-file'}}\" mat-menu-item [id]=\"'file-'+element?.id+'-remove'\"\n                        (click)=\"onRemoveAttachFile(element);\" (keyup.enter)=\"onRemoveAttachFile(element);\">\n                        <mat-icon class=\"mat-24\">highlight_off</mat-icon>\n                        <span>{{ 'FORM.FIELD.REMOVE_FILE' | translate }}</span>\n                    </button>\n                </mat-menu>\n            </td>\n        </ng-container>\n        <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n        <tr mat-row *matRowDef=\"let row; columns: displayedColumns\"></tr>\n    \n    </table>\n</div>\n",
                styles: [".adf-file-properties-table table{border:1px solid var(--theme-border-color);box-shadow:none;width:100%}.adf-file-properties-table table .adf-datatable-selected{padding:6px}.adf-file-properties-table table tr.mat-header-row{height:32px}.adf-file-properties-table table th{font-weight:700;padding-right:0!important}.adf-file-properties-table table td{max-width:50px;overflow:hidden;padding-right:0!important;text-overflow:ellipsis;white-space:nowrap}.adf-file-properties-table table td.mat-cell:first-of-type,.adf-file-properties-table table td.mat-cell:last-of-type,.adf-file-properties-table table td.mat-footer-cell:first-of-type,.adf-file-properties-table table td.mat-footer-cell:last-of-type{width:18%!important}"]
            }]
    }], function () { return [{ type: ɵngcc6.LocalizedDatePipe }, { type: ɵngcc6.ThumbnailService }]; }, { rowClick: [{
            type: Output
        }], attachFileClick: [{
            type: Output
        }], downloadFile: [{
            type: Output
        }], contentModelFileHandler: [{
            type: Output
        }], removeAttachFile: [{
            type: Output
        }], uploadedFiles: [{
            type: Input
        }], hasFile: [{
            type: Input
        }], selectedNode: [{
            type: Input
        }], field: [{
            type: Input
        }], displayedColumns: [{
            type: Input
        }], mimeTypeIcon: [{
            type: Input
        }] }); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class FormCloudModule {
}
FormCloudModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: FormCloudModule });
FormCloudModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function FormCloudModule_Factory(t) { return new (t || FormCloudModule)(); }, imports: [[
            CommonModule,
            FlexLayoutModule,
            MaterialModule,
            FormsModule,
            ReactiveFormsModule,
            CoreModule,
            ContentNodeSelectorModule,
            PeopleCloudModule,
            GroupCloudModule,
            ContentMetadataModule
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(FormCloudModule, { declarations: function () { return [FormCloudComponent, UploadCloudWidgetComponent, FormDefinitionSelectorCloudComponent, FormCustomOutcomesComponent, DropdownCloudWidgetComponent, RadioButtonsCloudWidgetComponent, AttachFileCloudWidgetComponent, DateCloudWidgetComponent, PeopleCloudWidgetComponent, GroupCloudWidgetComponent, PropertiesViewerWrapperComponent, PropertiesViewerWidgetComponent, FilePropertiesTableCloudComponent]; }, imports: function () { return [CommonModule,
        FlexLayoutModule, MaterialModule, FormsModule,
        ReactiveFormsModule,
        CoreModule,
        ContentNodeSelectorModule, PeopleCloudModule, GroupCloudModule, ContentMetadataModule]; }, exports: function () { return [FormCloudComponent, UploadCloudWidgetComponent, FormDefinitionSelectorCloudComponent, FormCustomOutcomesComponent, DropdownCloudWidgetComponent, RadioButtonsCloudWidgetComponent, AttachFileCloudWidgetComponent, DateCloudWidgetComponent, PeopleCloudWidgetComponent, GroupCloudWidgetComponent, PropertiesViewerWidgetComponent]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FormCloudModule, [{
        type: NgModule,
        args: [{
                imports: [
                    CommonModule,
                    FlexLayoutModule,
                    MaterialModule,
                    FormsModule,
                    ReactiveFormsModule,
                    CoreModule,
                    ContentNodeSelectorModule,
                    PeopleCloudModule,
                    GroupCloudModule,
                    ContentMetadataModule
                ],
                declarations: [
                    FormCloudComponent,
                    UploadCloudWidgetComponent,
                    FormDefinitionSelectorCloudComponent,
                    FormCustomOutcomesComponent,
                    DropdownCloudWidgetComponent,
                    RadioButtonsCloudWidgetComponent,
                    AttachFileCloudWidgetComponent,
                    DateCloudWidgetComponent,
                    PeopleCloudWidgetComponent,
                    GroupCloudWidgetComponent,
                    PropertiesViewerWrapperComponent,
                    PropertiesViewerWidgetComponent,
                    FilePropertiesTableCloudComponent
                ],
                exports: [
                    FormCloudComponent,
                    UploadCloudWidgetComponent,
                    FormDefinitionSelectorCloudComponent,
                    FormCustomOutcomesComponent,
                    DropdownCloudWidgetComponent,
                    RadioButtonsCloudWidgetComponent,
                    AttachFileCloudWidgetComponent,
                    DateCloudWidgetComponent,
                    PeopleCloudWidgetComponent,
                    GroupCloudWidgetComponent,
                    PropertiesViewerWidgetComponent
                ]
            }]
    }], null, null); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class StartTaskCloudModule {
}
StartTaskCloudModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: StartTaskCloudModule });
StartTaskCloudModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function StartTaskCloudModule_Factory(t) { return new (t || StartTaskCloudModule)(); }, imports: [[
            CommonModule,
            FlexLayoutModule,
            MaterialModule,
            FormsModule,
            ReactiveFormsModule,
            GroupCloudModule,
            CoreModule,
            FormCloudModule,
            PeopleCloudModule
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(StartTaskCloudModule, { declarations: function () { return [StartTaskCloudComponent]; }, imports: function () { return [CommonModule,
        FlexLayoutModule, MaterialModule, FormsModule,
        ReactiveFormsModule, GroupCloudModule, CoreModule, FormCloudModule, PeopleCloudModule]; }, exports: function () { return [StartTaskCloudComponent]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(StartTaskCloudModule, [{
        type: NgModule,
        args: [{
                imports: [
                    CommonModule,
                    FlexLayoutModule,
                    MaterialModule,
                    FormsModule,
                    ReactiveFormsModule,
                    GroupCloudModule,
                    CoreModule,
                    FormCloudModule,
                    PeopleCloudModule
                ],
                declarations: [StartTaskCloudComponent],
                exports: [
                    StartTaskCloudComponent
                ]
            }]
    }], null, null); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class TaskHeaderCloudComponent {
    constructor(taskCloudService, translationService, appConfig, cardViewUpdateService) {
        this.taskCloudService = taskCloudService;
        this.translationService = translationService;
        this.appConfig = appConfig;
        this.cardViewUpdateService = cardViewUpdateService;
        this.appName = '';
        this.showTitle = true;
        this.claim = new EventEmitter();
        this.unclaim = new EventEmitter();
        this.error = new EventEmitter();
        this.taskDetails = {};
        this.candidateUsers = [];
        this.candidateGroups = [];
        this.inEdit = false;
        this.displayDateClearAction = false;
        this.isLoading = true;
        this.onDestroy$ = new Subject();
        this.dateFormat = this.appConfig.get('dateValues.defaultDateFormat');
        this.dateLocale = this.appConfig.get('dateValues.defaultDateLocale');
        this.dateTimeFormat = this.appConfig.get('dateValue.defaultDateTimeFormat');
    }
    ngOnInit() {
        this.taskCloudService.dataChangesDetected$
            .pipe(takeUntil(this.onDestroy$))
            .subscribe(() => {
            this.loadTaskDetailsById(this.appName, this.taskId);
        });
        this.cardViewUpdateService.itemUpdated$
            .pipe(takeUntil(this.onDestroy$))
            .subscribe(this.updateTaskDetails.bind(this));
    }
    ngOnChanges() {
        this.taskDetails = {};
        if ((this.appName || this.appName === '') && this.taskId) {
            this.loadTaskDetailsById(this.appName, this.taskId);
        }
        else {
            this.error.emit('App Name and Task Id are mandatory');
        }
    }
    loadTaskDetailsById(appName, taskId) {
        this.isLoading = true;
        this.taskCloudService.getTaskById(appName, taskId).pipe(concatMap((task) => forkJoin(of(task), this.taskCloudService.getCandidateUsers(this.appName, this.taskId), this.taskCloudService.getCandidateGroups(this.appName, this.taskId))), finalize(() => (this.isLoading = false))).subscribe(([taskDetails, candidateUsers, candidateGroups]) => {
            this.taskDetails = taskDetails;
            this.candidateGroups = candidateGroups.map((user) => ({ icon: 'group', value: user }));
            this.candidateUsers = candidateUsers.map((group) => ({ icon: 'person', value: group }));
            if (this.taskDetails.parentTaskId) {
                this.loadParentName(`${this.taskDetails.parentTaskId}`);
            }
            else {
                this.refreshData();
            }
        }, (err) => {
            this.error.emit(err);
        });
    }
    initDefaultProperties() {
        return [
            new CardViewTextItemModel({
                label: 'ADF_CLOUD_TASK_HEADER.PROPERTIES.ASSIGNEE',
                value: this.taskDetails.assignee,
                key: 'assignee',
                clickable: this.isAssigneePropertyClickable(),
                default: this.translationService.instant('ADF_CLOUD_TASK_HEADER.PROPERTIES.ASSIGNEE_DEFAULT'),
                icon: 'create'
            }),
            new CardViewTextItemModel({
                label: 'ADF_CLOUD_TASK_HEADER.PROPERTIES.STATUS',
                value: this.taskDetails.status,
                key: 'status'
            }),
            new CardViewSelectItemModel({
                label: 'ADF_CLOUD_TASK_HEADER.PROPERTIES.PRIORITY',
                value: this.taskDetails.priority.toString(),
                key: 'priority',
                editable: true,
                displayNoneOption: false,
                options$: of(this.taskCloudService.priorities)
            }),
            new CardViewDatetimeItemModel({
                label: 'ADF_CLOUD_TASK_HEADER.PROPERTIES.DUE_DATE',
                value: this.taskDetails.dueDate,
                key: 'dueDate',
                default: this.translationService.instant('ADF_CLOUD_TASK_HEADER.PROPERTIES.DUE_DATE_DEFAULT'),
                editable: true,
                format: this.dateTimeFormat,
                locale: this.dateLocale
            }),
            new CardViewTextItemModel({
                label: 'ADF_CLOUD_TASK_HEADER.PROPERTIES.CATEGORY',
                value: this.taskDetails.category,
                key: 'category',
                default: this.translationService.instant('ADF_CLOUD_TASK_HEADER.PROPERTIES.CATEGORY_DEFAULT')
            }),
            new CardViewDateItemModel({
                label: 'ADF_CLOUD_TASK_HEADER.PROPERTIES.CREATED',
                value: this.taskDetails.createdDate,
                key: 'created',
                format: this.dateFormat,
                locale: this.dateLocale
            }),
            new CardViewTextItemModel({
                label: 'ADF_CLOUD_TASK_HEADER.PROPERTIES.PARENT_NAME',
                value: this.parentTaskName,
                default: this.translationService.instant('ADF_CLOUD_TASK_HEADER.PROPERTIES.PARENT_NAME_DEFAULT'),
                key: 'parentName',
                clickable: true
            }),
            new CardViewTextItemModel({
                label: 'ADF_CLOUD_TASK_HEADER.PROPERTIES.PARENT_TASK_ID',
                value: this.taskDetails.parentTaskId,
                key: 'parentTaskId',
                clickable: true
            }),
            new CardViewDateItemModel({
                label: 'ADF_CLOUD_TASK_HEADER.PROPERTIES.END_DATE',
                value: this.taskDetails.completedDate,
                key: 'endDate',
                format: this.dateFormat,
                locale: this.dateLocale
            }),
            new CardViewTextItemModel({
                label: 'ADF_CLOUD_TASK_HEADER.PROPERTIES.ID',
                value: this.taskDetails.id,
                key: 'id'
            }),
            new CardViewTextItemModel({
                label: 'ADF_CLOUD_TASK_HEADER.PROPERTIES.DESCRIPTION',
                value: this.taskDetails.description,
                key: 'description',
                default: this.translationService.instant('ADF_CLOUD_TASK_HEADER.PROPERTIES.DESCRIPTION_DEFAULT'),
                multiline: true,
                editable: true
            }),
            new CardViewArrayItemModel({
                label: 'ADF_CLOUD_TASK_HEADER.PROPERTIES.CANDIDATE_USERS',
                value: of(this.candidateUsers),
                key: 'candidateUsers',
                icon: 'edit',
                clickable: false,
                default: this.translationService.instant('ADF_CLOUD_TASK_HEADER.PROPERTIES.CANDIDATE_USERS_DEFAULT'),
                noOfItemsToDisplay: 2
            }),
            new CardViewArrayItemModel({
                label: 'ADF_CLOUD_TASK_HEADER.PROPERTIES.CANDIDATE_GROUPS',
                value: of(this.candidateGroups),
                key: 'candidateGroups',
                icon: 'edit',
                clickable: false,
                default: this.translationService.instant('ADF_CLOUD_TASK_HEADER.PROPERTIES.CANDIDATE_GROUPS_DEFAULT'),
                noOfItemsToDisplay: 2
            })
        ];
    }
    refreshData() {
        if (this.taskDetails) {
            const defaultProperties = this.initDefaultProperties();
            const filteredProperties = this.appConfig.get('adf-cloud-task-header.presets.properties');
            this.properties = defaultProperties.filter((cardItem) => this.isValidSelection(filteredProperties, cardItem));
        }
    }
    updateTaskDetails(updateNotification) {
        this.taskCloudService.updateTask(this.appName, this.taskId, updateNotification.changed)
            .pipe(catchError(() => {
            this.cardViewUpdateService.updateElement(updateNotification.target);
            return of(null);
        }))
            .subscribe((taskDetails) => {
            if (taskDetails) {
                this.taskDetails = taskDetails;
            }
        });
    }
    loadParentName(taskId) {
        this.taskCloudService.getTaskById(this.appName, taskId)
            .subscribe((taskDetails) => {
            this.parentTaskName = taskDetails.name;
            this.refreshData();
        });
    }
    isCompleted() {
        return this.taskDetails && this.taskDetails.status === 'COMPLETED';
    }
    hasAssignee() {
        return !!this.taskDetails.assignee ? true : false;
    }
    isTaskValid() {
        return (this.appName || this.appName === '') && !!this.taskId;
    }
    isTaskAssigned() {
        return this.taskDetails.assignee !== undefined;
    }
    isTaskEditable() {
        return this.taskCloudService.isTaskEditable(this.taskDetails);
    }
    isAssigneePropertyClickable() {
        return this.taskCloudService.isAssigneePropertyClickable(this.taskDetails, this.candidateUsers, []);
    }
    isValidSelection(filteredProperties, cardItem) {
        return filteredProperties ? filteredProperties.indexOf(cardItem.key) >= 0 : true;
    }
    ngOnDestroy() {
        this.onDestroy$.next(true);
        this.onDestroy$.complete();
    }
}
TaskHeaderCloudComponent.ɵfac = function TaskHeaderCloudComponent_Factory(t) { return new (t || TaskHeaderCloudComponent)(ɵngcc0.ɵɵdirectiveInject(TaskCloudService), ɵngcc0.ɵɵdirectiveInject(ɵngcc6.TranslationService), ɵngcc0.ɵɵdirectiveInject(ɵngcc6.AppConfigService), ɵngcc0.ɵɵdirectiveInject(ɵngcc6.CardViewUpdateService)); };
TaskHeaderCloudComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: TaskHeaderCloudComponent, selectors: [["adf-cloud-task-header"]], inputs: { appName: "appName", showTitle: "showTitle", taskId: "taskId" }, outputs: { claim: "claim", unclaim: "unclaim", error: "error" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 5, vars: 2, consts: [["class", "adf-task-title", 4, "ngIf"], [1, "adf-task-header-container"], ["class", "adf-card-container", 4, "ngIf"], ["loadingTemplate", ""], [1, "adf-task-title"], [1, "adf-card-container"], [3, "displayNoneOption", "properties", "editable", "displayClearAction", 4, "ngIf", "ngIfElse"], [3, "displayNoneOption", "properties", "editable", "displayClearAction"], [1, "adf-task-header-loading"]], template: function TaskHeaderCloudComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, TaskHeaderCloudComponent_h3_0_Template, 2, 1, "h3", 0);
        ɵngcc0.ɵɵelementStart(1, "div", 1);
        ɵngcc0.ɵɵtemplate(2, TaskHeaderCloudComponent_mat_card_2_Template, 3, 2, "mat-card", 2);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(3, TaskHeaderCloudComponent_ng_template_3_Template, 2, 0, "ng-template", null, 3, ɵngcc0.ɵɵtemplateRefExtractor);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngIf", ctx.showTitle);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.isTaskValid());
    } }, directives: [ɵngcc3.NgIf, ɵngcc1.MatCard, ɵngcc1.MatCardContent, ɵngcc6.CardViewComponent, ɵngcc9.MatSpinner], styles: [".adf-controls{display:flex;justify-content:space-between}.adf-edit-controls{display:flex;justify-content:flex-end;margin-left:auto}.adf-save-edit-mode,.adf-switch-to-edit-mode{color:var(--theme-primary-color)}.adf-cancel-edit-mode,.adf-claim-controls{color:#838383}@media screen and (max-width:959px){adf-card-view .adf-property-value{overflow:hidden;text-overflow:ellipsis;white-space:nowrap}}.adf-task-header-loading{display:flex;justify-content:center}"], encapsulation: 2 });
TaskHeaderCloudComponent.ctorParameters = () => [
    { type: TaskCloudService },
    { type: TranslationService },
    { type: AppConfigService },
    { type: CardViewUpdateService }
];
TaskHeaderCloudComponent.propDecorators = {
    appName: [{ type: Input }],
    taskId: [{ type: Input }],
    showTitle: [{ type: Input }],
    claim: [{ type: Output }],
    unclaim: [{ type: Output }],
    error: [{ type: Output }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TaskHeaderCloudComponent, [{
        type: Component,
        args: [{
                selector: 'adf-cloud-task-header',
                template: "<h3 *ngIf=\"showTitle\" class=\"adf-task-title\">{{ taskDetails?.name }}</h3>\n\n<div class=\"adf-task-header-container\">\n    <mat-card *ngIf=\"isTaskValid()\" class=\"adf-card-container\">\n        <mat-card-content>\n            <adf-card-view\n                *ngIf=\"!isLoading; else loadingTemplate\"\n                [displayNoneOption]=\"false\"\n                [properties]=\"properties\"\n                [editable]=\"isTaskEditable()\"\n                [displayClearAction]=\"displayDateClearAction\">\n            </adf-card-view>\n        </mat-card-content>\n    </mat-card>\n</div>\n\n<ng-template #loadingTemplate>\n    <div class=\"adf-task-header-loading\">\n        <mat-spinner></mat-spinner>\n    </div>\n</ng-template>\n",
                encapsulation: ViewEncapsulation.None,
                styles: [".adf-controls{display:flex;justify-content:space-between}.adf-edit-controls{display:flex;justify-content:flex-end;margin-left:auto}.adf-save-edit-mode,.adf-switch-to-edit-mode{color:var(--theme-primary-color)}.adf-cancel-edit-mode,.adf-claim-controls{color:#838383}@media screen and (max-width:959px){adf-card-view .adf-property-value{overflow:hidden;text-overflow:ellipsis;white-space:nowrap}}.adf-task-header-loading{display:flex;justify-content:center}"]
            }]
    }], function () { return [{ type: TaskCloudService }, { type: ɵngcc6.TranslationService }, { type: ɵngcc6.AppConfigService }, { type: ɵngcc6.CardViewUpdateService }]; }, { appName: [{
            type: Input
        }], showTitle: [{
            type: Input
        }], claim: [{
            type: Output
        }], unclaim: [{
            type: Output
        }], error: [{
            type: Output
        }], taskId: [{
            type: Input
        }] }); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class TaskHeaderCloudModule {
}
TaskHeaderCloudModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: TaskHeaderCloudModule });
TaskHeaderCloudModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function TaskHeaderCloudModule_Factory(t) { return new (t || TaskHeaderCloudModule)(); }, imports: [[
            CommonModule,
            MaterialModule,
            CoreModule.forChild()
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(TaskHeaderCloudModule, { declarations: function () { return [TaskHeaderCloudComponent]; }, imports: function () { return [CommonModule, MaterialModule, ɵngcc6.CoreModule]; }, exports: function () { return [TaskHeaderCloudComponent]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TaskHeaderCloudModule, [{
        type: NgModule,
        args: [{
                imports: [
                    CommonModule,
                    MaterialModule,
                    CoreModule.forChild()
                ],
                declarations: [
                    TaskHeaderCloudComponent
                ],
                exports: [
                    TaskHeaderCloudComponent
                ]
            }]
    }], null, null); })();

class CompleteTaskDirective {
    constructor(taskListService) {
        this.taskListService = taskListService;
        this.appName = '';
        this.success = new EventEmitter();
        this.error = new EventEmitter();
        this.invalidParams = [];
    }
    ngOnInit() {
        this.validateInputs();
    }
    validateInputs() {
        if (!this.isTaskValid()) {
            this.invalidParams.push('taskId');
        }
        if (!this.isAppValid()) {
            this.invalidParams.push('appName');
        }
        if (this.invalidParams.length) {
            throw new Error(`Attribute ${this.invalidParams.join(', ')} is required`);
        }
    }
    isTaskValid() {
        return this.taskId && this.taskId.length > 0;
    }
    isAppValid() {
        return !!this.appName || this.appName === '';
    }
    onClick() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const result = yield this.taskListService.completeTask(this.appName, this.taskId).toPromise();
                if (result) {
                    this.success.emit(result);
                }
            }
            catch (error) {
                this.error.emit(error);
            }
        });
    }
}
CompleteTaskDirective.ɵfac = function CompleteTaskDirective_Factory(t) { return new (t || CompleteTaskDirective)(ɵngcc0.ɵɵdirectiveInject(TaskCloudService)); };
CompleteTaskDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CompleteTaskDirective, selectors: [["", "adf-cloud-complete-task", ""]], hostBindings: function CompleteTaskDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function CompleteTaskDirective_click_HostBindingHandler() { return ctx.onClick(); });
    } }, inputs: { appName: "appName", taskId: "taskId" }, outputs: { success: "success", error: "error" } });
CompleteTaskDirective.ctorParameters = () => [
    { type: TaskCloudService }
];
CompleteTaskDirective.propDecorators = {
    taskId: [{ type: Input }],
    appName: [{ type: Input }],
    success: [{ type: Output }],
    error: [{ type: Output }],
    onClick: [{ type: HostListener, args: ['click',] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CompleteTaskDirective, [{
        type: Directive,
        args: [{
                selector: '[adf-cloud-complete-task]'
            }]
    }], function () { return [{ type: TaskCloudService }]; }, { appName: [{
            type: Input
        }], success: [{
            type: Output
        }], error: [{
            type: Output
        }], onClick: [{
            type: HostListener,
            args: ['click']
        }], taskId: [{
            type: Input
        }] }); })();

class ClaimTaskCloudDirective {
    constructor(taskListService, identityUserService) {
        this.taskListService = taskListService;
        this.identityUserService = identityUserService;
        this.appName = '';
        this.success = new EventEmitter();
        this.error = new EventEmitter();
        this.invalidParams = [];
    }
    ngOnInit() {
        this.validateInputs();
    }
    validateInputs() {
        if (!this.isTaskValid()) {
            this.invalidParams.push('taskId');
        }
        if (!this.isAppValid()) {
            this.invalidParams.push('appName');
        }
        if (this.invalidParams.length) {
            throw new Error(`Attribute ${this.invalidParams.join(', ')} is required`);
        }
    }
    isTaskValid() {
        return this.taskId && this.taskId.length > 0;
    }
    isAppValid() {
        return !!this.appName || this.appName === '';
    }
    onClick() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                yield this.claimTask();
            }
            catch (error) {
                this.error.emit(error);
            }
        });
    }
    claimTask() {
        return __awaiter(this, void 0, void 0, function* () {
            const currentUser = this.identityUserService.getCurrentUserInfo().username;
            try {
                const result = yield this.taskListService.claimTask(this.appName, this.taskId, currentUser).toPromise();
                if (result) {
                    this.success.emit(result);
                }
            }
            catch (error) {
                this.error.emit(error);
            }
        });
    }
}
ClaimTaskCloudDirective.ɵfac = function ClaimTaskCloudDirective_Factory(t) { return new (t || ClaimTaskCloudDirective)(ɵngcc0.ɵɵdirectiveInject(TaskCloudService), ɵngcc0.ɵɵdirectiveInject(ɵngcc6.IdentityUserService)); };
ClaimTaskCloudDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ClaimTaskCloudDirective, selectors: [["", "adf-cloud-claim-task", ""]], hostBindings: function ClaimTaskCloudDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function ClaimTaskCloudDirective_click_HostBindingHandler() { return ctx.onClick(); });
    } }, inputs: { appName: "appName", taskId: "taskId" }, outputs: { success: "success", error: "error" } });
ClaimTaskCloudDirective.ctorParameters = () => [
    { type: TaskCloudService },
    { type: IdentityUserService }
];
ClaimTaskCloudDirective.propDecorators = {
    taskId: [{ type: Input }],
    appName: [{ type: Input }],
    success: [{ type: Output }],
    error: [{ type: Output }],
    onClick: [{ type: HostListener, args: ['click',] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ClaimTaskCloudDirective, [{
        type: Directive,
        args: [{
                selector: '[adf-cloud-claim-task]'
            }]
    }], function () { return [{ type: TaskCloudService }, { type: ɵngcc6.IdentityUserService }]; }, { appName: [{
            type: Input
        }], success: [{
            type: Output
        }], error: [{
            type: Output
        }], onClick: [{
            type: HostListener,
            args: ['click']
        }], taskId: [{
            type: Input
        }] }); })();

class UnClaimTaskCloudDirective {
    constructor(taskListService) {
        this.taskListService = taskListService;
        this.appName = '';
        this.success = new EventEmitter();
        this.error = new EventEmitter();
        this.invalidParams = [];
    }
    ngOnInit() {
        this.validateInputs();
    }
    validateInputs() {
        if (!this.isTaskValid()) {
            this.invalidParams.push('taskId');
        }
        if (!this.isAppValid()) {
            this.invalidParams.push('appName');
        }
        if (this.invalidParams.length) {
            throw new Error(`Attribute ${this.invalidParams.join(', ')} is required`);
        }
    }
    isTaskValid() {
        return this.taskId && this.taskId.length > 0;
    }
    isAppValid() {
        return !!this.appName || this.appName === '';
    }
    onClick() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                yield this.taskListService.unclaimTask(this.appName, this.taskId).toPromise();
                this.success.emit(this.taskId);
            }
            catch (error) {
                this.error.emit(error);
            }
        });
    }
}
UnClaimTaskCloudDirective.ɵfac = function UnClaimTaskCloudDirective_Factory(t) { return new (t || UnClaimTaskCloudDirective)(ɵngcc0.ɵɵdirectiveInject(TaskCloudService)); };
UnClaimTaskCloudDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: UnClaimTaskCloudDirective, selectors: [["", "adf-cloud-unclaim-task", ""]], hostBindings: function UnClaimTaskCloudDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function UnClaimTaskCloudDirective_click_HostBindingHandler() { return ctx.onClick(); });
    } }, inputs: { appName: "appName", taskId: "taskId" }, outputs: { success: "success", error: "error" } });
UnClaimTaskCloudDirective.ctorParameters = () => [
    { type: TaskCloudService }
];
UnClaimTaskCloudDirective.propDecorators = {
    taskId: [{ type: Input }],
    appName: [{ type: Input }],
    success: [{ type: Output }],
    error: [{ type: Output }],
    onClick: [{ type: HostListener, args: ['click',] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(UnClaimTaskCloudDirective, [{
        type: Directive,
        args: [{
                selector: '[adf-cloud-unclaim-task]'
            }]
    }], function () { return [{ type: TaskCloudService }]; }, { appName: [{
            type: Input
        }], success: [{
            type: Output
        }], error: [{
            type: Output
        }], onClick: [{
            type: HostListener,
            args: ['click']
        }], taskId: [{
            type: Input
        }] }); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class TaskDirectiveModule {
}
TaskDirectiveModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: TaskDirectiveModule });
TaskDirectiveModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function TaskDirectiveModule_Factory(t) { return new (t || TaskDirectiveModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(TaskDirectiveModule, { declarations: [CompleteTaskDirective, ClaimTaskCloudDirective, UnClaimTaskCloudDirective], exports: [CompleteTaskDirective, ClaimTaskCloudDirective, UnClaimTaskCloudDirective] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TaskDirectiveModule, [{
        type: NgModule,
        args: [{
                declarations: [
                    CompleteTaskDirective,
                    ClaimTaskCloudDirective,
                    UnClaimTaskCloudDirective
                ],
                exports: [
                    CompleteTaskDirective,
                    ClaimTaskCloudDirective,
                    UnClaimTaskCloudDirective
                ]
            }]
    }], null, null); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class TaskFormCloudComponent {
    constructor(taskCloudService, formRenderingService) {
        this.taskCloudService = taskCloudService;
        this.formRenderingService = formRenderingService;
        this.appName = '';
        this.showTitle = true;
        this.showRefreshButton = false;
        this.showValidationIcon = true;
        this.showCancelButton = true;
        this.showCompleteButton = true;
        this.readOnly = false;
        this.formSaved = new EventEmitter();
        this.formCompleted = new EventEmitter();
        this.taskCompleted = new EventEmitter();
        this.taskClaimed = new EventEmitter();
        this.taskUnclaimed = new EventEmitter();
        this.cancelClick = new EventEmitter();
        this.error = new EventEmitter();
        this.formContentClicked = new EventEmitter();
        this.candidateUsers = [];
        this.candidateGroups = [];
        this.loading = false;
        this.formRenderingService.setComponentTypeResolver('upload', () => AttachFileCloudWidgetComponent, true);
        this.formRenderingService.setComponentTypeResolver('dropdown', () => DropdownCloudWidgetComponent, true);
        this.formRenderingService.setComponentTypeResolver('date', () => DateCloudWidgetComponent, true);
    }
    ngOnInit() {
        if (this.appName === '' && this.taskId) {
            this.loadTask();
        }
    }
    ngOnChanges(changes) {
        const appName = changes['appName'];
        if (appName && (appName.currentValue !== appName.previousValue) && this.taskId) {
            this.loadTask();
            return;
        }
        const taskId = changes['taskId'];
        if (taskId && taskId.currentValue && this.appName) {
            this.loadTask();
            return;
        }
    }
    loadTask() {
        this.loading = true;
        this.taskCloudService
            .getTaskById(this.appName, this.taskId)
            .subscribe(details => {
            this.taskDetails = details;
            this.loading = false;
        });
        this.taskCloudService
            .getCandidateUsers(this.appName, this.taskId)
            .subscribe(users => this.candidateUsers = users || []);
        this.taskCloudService
            .getCandidateGroups(this.appName, this.taskId)
            .subscribe(groups => this.candidateGroups = groups || []);
    }
    hasForm() {
        return this.taskDetails && !!this.taskDetails.formKey;
    }
    canCompleteTask() {
        return this.showCompleteButton && !this.readOnly && this.taskCloudService.canCompleteTask(this.taskDetails);
    }
    canClaimTask() {
        return !this.readOnly && this.taskCloudService.canClaimTask(this.taskDetails);
    }
    hasCandidateUsers() {
        return this.candidateUsers.length !== 0;
    }
    hasCandidateGroups() {
        return this.candidateGroups.length !== 0;
    }
    hasCandidateUsersOrGroups() {
        var _a;
        let hasCandidateUsersOrGroups = false;
        if (((_a = this.taskDetails) === null || _a === void 0 ? void 0 : _a.status) === 'ASSIGNED') {
            hasCandidateUsersOrGroups = this.hasCandidateUsers() || this.hasCandidateGroups();
        }
        return hasCandidateUsersOrGroups;
    }
    canUnclaimTask() {
        return !this.readOnly && this.taskCloudService.canUnclaimTask(this.taskDetails);
    }
    isReadOnly() {
        return this.readOnly || !this.taskCloudService.canCompleteTask(this.taskDetails);
    }
    onCompleteTask() {
        this.loadTask();
        this.taskCompleted.emit(this.taskId);
    }
    onClaimTask() {
        this.loadTask();
        this.taskClaimed.emit(this.taskId);
    }
    onUnclaimTask() {
        this.loadTask();
        this.taskUnclaimed.emit(this.taskId);
    }
    onCancelClick() {
        this.cancelClick.emit(this.taskId);
    }
    onFormSaved(form) {
        this.formSaved.emit(form);
    }
    onFormCompleted(form) {
        this.formCompleted.emit(form);
        this.taskCompleted.emit(this.taskId);
    }
    onError(data) {
        this.error.emit(data);
    }
    onFormContentClicked(content) {
        this.formContentClicked.emit(content);
    }
}
TaskFormCloudComponent.ɵfac = function TaskFormCloudComponent_Factory(t) { return new (t || TaskFormCloudComponent)(ɵngcc0.ɵɵdirectiveInject(TaskCloudService), ɵngcc0.ɵɵdirectiveInject(ɵngcc6.FormRenderingService)); };
TaskFormCloudComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: TaskFormCloudComponent, selectors: [["adf-cloud-task-form"]], inputs: { appName: "appName", showTitle: "showTitle", showRefreshButton: "showRefreshButton", showValidationIcon: "showValidationIcon", showCancelButton: "showCancelButton", showCompleteButton: "showCompleteButton", readOnly: "readOnly", taskId: "taskId" }, outputs: { formSaved: "formSaved", formCompleted: "formCompleted", taskCompleted: "taskCompleted", taskClaimed: "taskClaimed", taskUnclaimed: "taskUnclaimed", cancelClick: "cancelClick", error: "error", formContentClicked: "formContentClicked" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 3, vars: 2, consts: [[4, "ngIf", "ngIfElse"], ["loadingTemplate", ""], [3, "appName", "appVersion", "taskId", "showTitle", "processInstanceId", "readOnly", "showRefreshButton", "showValidationIcon", "showCompleteButton", "showSaveButton", "formSaved", "formCompleted", "formError", "error", "formContentClicked", 4, "ngIf", "ngIfElse"], ["withoutForm", ""], ["taskFormCloudButtons", ""], [3, "appName", "appVersion", "taskId", "showTitle", "processInstanceId", "readOnly", "showRefreshButton", "showValidationIcon", "showCompleteButton", "showSaveButton", "formSaved", "formCompleted", "formError", "error", "formContentClicked"], [3, "ngTemplateOutlet"], [1, "adf-task-form-container"], [4, "ngIf"], [3, "icon", "title", "subtitle"], [1, "adf-task-form-actions"], ["mat-button", "", "adf-cloud-complete-task", "", "color", "primary", "id", "adf-form-complete", 3, "appName", "taskId", "success", "error", 4, "ngIf"], [1, "adf-form-title"], ["mat-button", "", "adf-cloud-complete-task", "", "color", "primary", "id", "adf-form-complete", 3, "appName", "taskId", "success", "error"], ["mat-button", "", "id", "adf-cloud-cancel-task", 3, "click", 4, "ngIf"], ["mat-button", "", "adf-cloud-claim-task", "", 3, "appName", "taskId", "success", "error", 4, "ngIf"], ["mat-button", "", "adf-cloud-unclaim-task", "", 3, "appName", "taskId", "success", "error", 4, "ngIf"], ["mat-button", "", "id", "adf-cloud-cancel-task", 3, "click"], ["mat-button", "", "adf-cloud-claim-task", "", 3, "appName", "taskId", "success", "error"], ["mat-button", "", "adf-cloud-unclaim-task", "", 3, "appName", "taskId", "success", "error"], ["fxLayout", "row", "fxLayoutAlign", "center stretch"]], template: function TaskFormCloudComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, TaskFormCloudComponent_div_0_Template, 6, 2, "div", 0);
        ɵngcc0.ɵɵtemplate(1, TaskFormCloudComponent_ng_template_1_Template, 2, 0, "ng-template", null, 1, ɵngcc0.ɵɵtemplateRefExtractor);
    } if (rf & 2) {
        const _r1 = ɵngcc0.ɵɵreference(2);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.loading)("ngIfElse", _r1);
    } }, directives: [ɵngcc3.NgIf, FormCloudComponent, FormCustomOutcomesComponent, ɵngcc3.NgTemplateOutlet, ɵngcc1.MatCard, ɵngcc1.MatCardContent, ɵngcc6.EmptyContentComponent, ɵngcc1.MatCardActions, ɵngcc1.MatCardHeader, ɵngcc1.MatCardTitle, ɵngcc13.MatButton, CompleteTaskDirective, ClaimTaskCloudDirective, UnClaimTaskCloudDirective, ɵngcc2.DefaultLayoutDirective, ɵngcc2.DefaultLayoutAlignDirective, ɵngcc9.MatSpinner], pipes: [ɵngcc10.TranslatePipe], styles: [".adf-task-form-container{overflow:hidden}.adf-task-form-actions{float:right;padding-bottom:25px!important;padding-right:25px!important}.adf-task-form-actions .mat-button{border-radius:5px;height:36px}.adf-task-form-actions .mat-button-wrapper{font-size:var(--theme-body-2-font-size);font-weight:700;height:20px;opacity:.54;width:58px}"], encapsulation: 2 });
TaskFormCloudComponent.ctorParameters = () => [
    { type: TaskCloudService },
    { type: FormRenderingService }
];
TaskFormCloudComponent.propDecorators = {
    appName: [{ type: Input }],
    taskId: [{ type: Input }],
    showTitle: [{ type: Input }],
    showRefreshButton: [{ type: Input }],
    showValidationIcon: [{ type: Input }],
    showCancelButton: [{ type: Input }],
    showCompleteButton: [{ type: Input }],
    readOnly: [{ type: Input }],
    formSaved: [{ type: Output }],
    formCompleted: [{ type: Output }],
    taskCompleted: [{ type: Output }],
    taskClaimed: [{ type: Output }],
    taskUnclaimed: [{ type: Output }],
    cancelClick: [{ type: Output }],
    error: [{ type: Output }],
    formContentClicked: [{ type: Output }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TaskFormCloudComponent, [{
        type: Component,
        args: [{
                selector: 'adf-cloud-task-form',
                template: "<div *ngIf=\"!loading; else loadingTemplate\">\n    <adf-cloud-form *ngIf=\"hasForm(); else withoutForm\"\n                    [appName]=\"appName\"\n                    [appVersion]=\"taskDetails.appVersion\"\n                    [taskId]=\"taskId\"\n                    [showTitle]=\"showTitle\"\n                    [processInstanceId]=\"taskDetails.processInstanceId\"\n                    [readOnly]=\"isReadOnly()\"\n                    [showRefreshButton]=\"showRefreshButton\"\n                    [showValidationIcon]=\"showValidationIcon\"\n                    [showCompleteButton]=\"canCompleteTask()\"\n                    [showSaveButton]=\"canCompleteTask()\"\n                    (formSaved)=\"onFormSaved($event)\"\n                    (formCompleted)=\"onFormCompleted($event)\"\n                    (formError)=\"onError($event)\"\n                    (error)=\"onError($event)\"\n                    (formContentClicked)=\"onFormContentClicked($event)\">\n        <adf-cloud-form-custom-outcomes>\n            <ng-template [ngTemplateOutlet]=\"taskFormCloudButtons\">\n            </ng-template>\n        </adf-cloud-form-custom-outcomes>\n    </adf-cloud-form>\n\n    <ng-template #withoutForm>\n        <mat-card class=\"adf-task-form-container\">\n            <mat-card-header *ngIf=\"showTitle\">\n                <mat-card-title>\n                    <h4>\n                        <span class=\"adf-form-title\">\n                            {{ taskDetails?.name || 'FORM.FORM_RENDERER.NAMELESS_TASK' | translate }}\n                        </span>\n                    </h4>\n                </mat-card-title>\n            </mat-card-header>\n            <mat-card-content>\n                <adf-empty-content\n                    [icon]=\"'description'\"\n                    [title]=\"'ADF_CLOUD_TASK_FORM.EMPTY_FORM.TITLE'\"\n                    [subtitle]=\"'ADF_CLOUD_TASK_FORM.EMPTY_FORM.SUBTITLE'\">\n                </adf-empty-content>\n            </mat-card-content>\n            <mat-card-actions class=\"adf-task-form-actions\">\n                <ng-template [ngTemplateOutlet]=\"taskFormCloudButtons\">\n                </ng-template>\n                <button mat-button *ngIf=\"canCompleteTask()\" adf-cloud-complete-task [appName]=\"appName\"\n                        [taskId]=\"taskId\" (success)=\"onCompleteTask()\" (error)=\"onError($event)\" color=\"primary\" id=\"adf-form-complete\">\n                    {{'ADF_CLOUD_TASK_FORM.EMPTY_FORM.BUTTONS.COMPLETE' | translate}}\n                </button>\n            </mat-card-actions>\n        </mat-card>\n    </ng-template>\n    <ng-template #taskFormCloudButtons>\n        <button mat-button *ngIf=\"showCancelButton\" id=\"adf-cloud-cancel-task\" (click)=\"onCancelClick()\">\n            {{'ADF_CLOUD_TASK_FORM.EMPTY_FORM.BUTTONS.CANCEL' | translate}}\n        </button>\n        <button mat-button *ngIf=\"canClaimTask()\" adf-cloud-claim-task [appName]=\"appName\" [taskId]=\"taskId\"\n                (success)=\"onClaimTask()\" (error)=\"onError($event)\">\n            {{'ADF_CLOUD_TASK_FORM.EMPTY_FORM.BUTTONS.CLAIM' | translate}}\n        </button>\n        <button mat-button *ngIf=\"hasCandidateUsersOrGroups()\" adf-cloud-unclaim-task [appName]=\"appName\" [taskId]=\"taskId\"\n                (success)=\"onUnclaimTask()\" (error)=\"onError($event)\">\n            {{'ADF_CLOUD_TASK_FORM.EMPTY_FORM.BUTTONS.UNCLAIM' | translate}}\n        </button>\n    </ng-template>\n</div>\n\n<ng-template #loadingTemplate>\n    <div fxLayout=\"row\" fxLayoutAlign=\"center stretch\">\n        <mat-spinner></mat-spinner>\n    </div>\n</ng-template>\n",
                encapsulation: ViewEncapsulation.None,
                styles: [".adf-task-form-container{overflow:hidden}.adf-task-form-actions{float:right;padding-bottom:25px!important;padding-right:25px!important}.adf-task-form-actions .mat-button{border-radius:5px;height:36px}.adf-task-form-actions .mat-button-wrapper{font-size:var(--theme-body-2-font-size);font-weight:700;height:20px;opacity:.54;width:58px}"]
            }]
    }], function () { return [{ type: TaskCloudService }, { type: ɵngcc6.FormRenderingService }]; }, { appName: [{
            type: Input
        }], showTitle: [{
            type: Input
        }], showRefreshButton: [{
            type: Input
        }], showValidationIcon: [{
            type: Input
        }], showCancelButton: [{
            type: Input
        }], showCompleteButton: [{
            type: Input
        }], readOnly: [{
            type: Input
        }], formSaved: [{
            type: Output
        }], formCompleted: [{
            type: Output
        }], taskCompleted: [{
            type: Output
        }], taskClaimed: [{
            type: Output
        }], taskUnclaimed: [{
            type: Output
        }], cancelClick: [{
            type: Output
        }], error: [{
            type: Output
        }], formContentClicked: [{
            type: Output
        }], taskId: [{
            type: Input
        }] }); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class TaskFormModule {
}
TaskFormModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: TaskFormModule });
TaskFormModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function TaskFormModule_Factory(t) { return new (t || TaskFormModule)(); }, imports: [[
            CoreModule,
            CommonModule,
            MaterialModule,
            FormCloudModule,
            TaskDirectiveModule,
            FlexLayoutModule
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(TaskFormModule, { declarations: function () { return [TaskFormCloudComponent]; }, imports: function () { return [CoreModule,
        CommonModule, MaterialModule, FormCloudModule, TaskDirectiveModule, FlexLayoutModule]; }, exports: function () { return [TaskFormCloudComponent]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TaskFormModule, [{
        type: NgModule,
        args: [{
                imports: [
                    CoreModule,
                    CommonModule,
                    MaterialModule,
                    FormCloudModule,
                    TaskDirectiveModule,
                    FlexLayoutModule
                ],
                declarations: [
                    TaskFormCloudComponent
                ],
                exports: [
                    TaskFormCloudComponent
                ]
            }]
    }], null, null); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class TaskCloudModule {
}
TaskCloudModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: TaskCloudModule });
TaskCloudModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function TaskCloudModule_Factory(t) { return new (t || TaskCloudModule)(); }, imports: [[
            TaskListCloudModule,
            TaskFiltersCloudModule,
            StartTaskCloudModule,
            TaskHeaderCloudModule,
            TaskDirectiveModule,
            TaskFormModule
        ], TaskListCloudModule, TaskFiltersCloudModule, StartTaskCloudModule, TaskHeaderCloudModule, TaskDirectiveModule, TaskFormModule] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(TaskCloudModule, { imports: [TaskListCloudModule, TaskFiltersCloudModule, StartTaskCloudModule, TaskHeaderCloudModule, TaskDirectiveModule, TaskFormModule], exports: [TaskListCloudModule, TaskFiltersCloudModule, StartTaskCloudModule, TaskHeaderCloudModule, TaskDirectiveModule, TaskFormModule] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TaskCloudModule, [{
        type: NgModule,
        args: [{
                imports: [
                    TaskListCloudModule,
                    TaskFiltersCloudModule,
                    StartTaskCloudModule,
                    TaskHeaderCloudModule,
                    TaskDirectiveModule,
                    TaskFormModule
                ],
                exports: [
                    TaskListCloudModule,
                    TaskFiltersCloudModule,
                    StartTaskCloudModule,
                    TaskHeaderCloudModule,
                    TaskDirectiveModule,
                    TaskFormModule
                ]
            }]
    }], null, null); })();

class ProcessFilterCloudModel {
    constructor(obj) {
        this.dateRangeFilterService = new DateRangeFilterService();
        if (obj) {
            this.id = obj.id || Math.random().toString(36).substring(2, 9);
            this.name = obj.name || null;
            this.key = obj.key || null;
            this.icon = obj.icon || null;
            this.index = obj.index || null;
            this.appName = obj.appName || obj.appName === '' ? obj.appName : null;
            this.appVersion = obj.appVersion || null;
            if (obj.appVersionMultiple && Array.isArray(obj.appVersionMultiple)) {
                this.appVersion = obj.appVersionMultiple;
            }
            this.processInstanceId = obj.processInstanceId || null;
            this.processName = obj.processName || null;
            this.initiator = obj.initiator || null;
            this.status = obj.status || null;
            this.sort = obj.sort || null;
            this.order = obj.order || null;
            this.processDefinitionId = obj.processDefinitionId || null;
            this.processDefinitionName = obj.processDefinitionName || null;
            this.processDefinitionKey = obj.processDefinitionKey || null;
            this.lastModified = obj.lastModified || null;
            this.lastModifiedTo = obj.lastModifiedTo || null;
            this.lastModifiedFrom = obj.lastModifiedFrom || null;
            this.startedDate = obj.startedDate || null;
            this.startFrom = obj._startFrom || null;
            this.startTo = obj._startTo || null;
            this.completedDateType = obj.completedDateType || null;
            this.startedDateType = obj.startedDateType || null;
            this.suspendedDateType = obj.suspendedDateType || null;
            this.completedFrom = obj._completedFrom || null;
            this.completedTo = obj._completedTo || null;
            this.completedDate = obj.completedDate || null;
            this._suspendedFrom = obj._suspendedFrom || null;
            this._suspendedTo = obj._suspendedTo || null;
        }
    }
    set completedFrom(completedFrom) {
        this._completedFrom = completedFrom;
    }
    set completedTo(completedTo) {
        this._completedTo = completedTo;
    }
    get completedFrom() {
        if (this.isDateRangeType(this.completedDateType)) {
            return this._completedFrom;
        }
        return this.getStartDate(this.completedDateType);
    }
    get completedTo() {
        if (this.isDateRangeType(this.completedDateType)) {
            return this._completedTo;
        }
        return this.getEndDate(this.completedDateType);
    }
    set startFrom(startFrom) {
        this._startFrom = startFrom;
    }
    set startTo(startTo) {
        this._startTo = startTo;
    }
    get startFrom() {
        if (this.isDateRangeType(this.startedDateType)) {
            return this._startFrom;
        }
        return this.getStartDate(this.startedDateType);
    }
    get startTo() {
        if (this.isDateRangeType(this.startedDateType)) {
            return this._startTo;
        }
        return this.getEndDate(this.startedDateType);
    }
    set suspendedFrom(suspendedFrom) {
        this._suspendedFrom = suspendedFrom;
    }
    set suspendedTo(suspendedTo) {
        this._suspendedTo = suspendedTo;
    }
    get suspendedFrom() {
        if (this.isDateRangeType(this.suspendedDateType)) {
            return this._suspendedFrom;
        }
        return this.getStartDate(this.suspendedDateType);
    }
    get suspendedTo() {
        if (this.isDateRangeType(this.suspendedDateType)) {
            return this._suspendedTo;
        }
        return this.getEndDate(this.suspendedDateType);
    }
    getStartDate(key) {
        return this.dateRangeFilterService.getDateRange(key).startDate;
    }
    getEndDate(key) {
        return this.dateRangeFilterService.getDateRange(key).endDate;
    }
    isDateRangeType(type) {
        return !!this.dateRangeFilterService.isDateRangeType(type);
    }
}

class ProcessFilterCloudService {
    constructor(preferenceService, identityUserService) {
        this.preferenceService = preferenceService;
        this.identityUserService = identityUserService;
        this.filtersSubject = new BehaviorSubject([]);
        this.filters$ = this.filtersSubject.asObservable();
    }
    readQueryParams(obj) {
        const model = Object.assign({}, obj);
        if (obj.hasOwnProperty('appVersion') && obj['appVersion']) {
            if (typeof obj['appVersion'] === 'string') {
                model.appVersion = obj['appVersion'].split(',').map(str => parseInt(str, 10));
            }
        }
        if (obj.hasOwnProperty('lastModifiedFrom')) {
            model.lastModifiedFrom = new Date(parseInt(obj['lastModifiedFrom'], 10));
        }
        if (obj.hasOwnProperty('lastModifiedTo')) {
            model.lastModifiedTo = new Date(parseInt(obj['lastModifiedTo'], 10));
        }
        return model;
    }
    writeQueryParams(value, filterProperties, appName, id) {
        value = value || {};
        const result = {
            appName: appName || value['appName'],
            id: id || value['id']
        };
        for (const prop of filterProperties) {
            if (prop === 'appVersionMultiple') {
                const versions = value['appVersion'];
                if (Array.isArray(versions) && versions.length > 0) {
                    result['appVersion'] = versions.join(',');
                }
            }
            else if (prop === 'lastModified') {
                if (value['lastModifiedFrom']) {
                    result['lastModifiedFrom'] = value['lastModifiedFrom'].valueOf();
                }
                if (value['lastModifiedTo']) {
                    result['lastModifiedTo'] = value['lastModifiedTo'].valueOf();
                }
            }
            else if (value.hasOwnProperty(prop)) {
                result[prop] = value[prop];
            }
        }
        return result;
    }
    createDefaultFilters(appName) {
        const key = this.prepareKey(appName);
        this.preferenceService.getPreferences(appName, key).pipe(switchMap((response) => {
            const preferences = (response && response.list && response.list.entries) ? response.list.entries : [];
            if (!this.hasPreferences(preferences)) {
                return this.createProcessFilters(appName, key, this.defaultProcessFilters(appName));
            }
            else if (!this.hasProcessFilters(preferences, key)) {
                return this.createProcessFilters(appName, key, this.defaultProcessFilters(appName));
            }
            else {
                return of(this.findFiltersByKeyInPreferences(preferences, key));
            }
        }), catchError((err) => this.handleProcessError(err))).subscribe((filters) => {
            this.addFiltersToStream(filters);
        });
    }
    getProcessFilters(appName) {
        this.createDefaultFilters(appName);
        return this.filters$;
    }
    getFilterById(appName, id) {
        const key = this.prepareKey(appName);
        return this.getProcessFiltersByKey(appName, key).pipe(switchMap((filters) => {
            if (filters && filters.length === 0) {
                return this.createProcessFilters(appName, key, this.defaultProcessFilters(appName));
            }
            else {
                return of(filters);
            }
        }), map((filters) => {
            return filters.filter((filter) => {
                return filter.id === id;
            })[0];
        }), catchError((err) => this.handleProcessError(err)));
    }
    addFilter(newFilter) {
        const { appName, name } = newFilter;
        const key = this.prepareKey(appName);
        return this.getProcessFiltersByKey(appName, key).pipe(switchMap((filters) => {
            if (filters && filters.length === 0) {
                return this.createProcessFilters(appName, key, [newFilter]);
            }
            else {
                const index = filters.findIndex(filter => filter.name === name);
                if (index >= 0) {
                    filters.splice(index, 1);
                }
                filters.push(newFilter);
                return this.preferenceService.updatePreference(appName, key, filters);
            }
        }), map((filters) => {
            this.addFiltersToStream(filters);
            return filters;
        }), catchError((err) => this.handleProcessError(err)));
    }
    updateFilter(updatedFilter) {
        const key = this.prepareKey(updatedFilter.appName);
        return this.getProcessFiltersByKey(updatedFilter.appName, key).pipe(switchMap((filters) => {
            if (filters && filters.length === 0) {
                return this.createProcessFilters(updatedFilter.appName, key, [updatedFilter]);
            }
            else {
                const itemIndex = filters.findIndex((filter) => filter.id === updatedFilter.id);
                filters[itemIndex] = updatedFilter;
                return this.updateProcessFilters(updatedFilter.appName, key, filters);
            }
        }), map((updatedFilters) => {
            this.addFiltersToStream(updatedFilters);
            return updatedFilters;
        }), catchError((err) => this.handleProcessError(err)));
    }
    deleteFilter(deletedFilter) {
        const key = this.prepareKey(deletedFilter.appName);
        return this.getProcessFiltersByKey(deletedFilter.appName, key).pipe(switchMap(filters => {
            if (filters && filters.length > 0) {
                filters = filters.filter(filter => filter.id !== deletedFilter.id);
                return this.updateProcessFilters(deletedFilter.appName, key, filters);
            }
            else {
                return of([]);
            }
        }), map((filters) => {
            this.addFiltersToStream(filters);
            return filters;
        }), catchError((err) => this.handleProcessError(err)));
    }
    isDefaultFilter(filterName) {
        const defaultFilters = this.defaultProcessFilters();
        return defaultFilters.findIndex((filter) => filterName === filter.name) !== -1;
    }
    hasPreferences(preferences) {
        return preferences && preferences.length > 0;
    }
    hasProcessFilters(preferences, key) {
        const filters = preferences.find((filter) => { return filter.entry.key === key; });
        return (filters && filters.entry) ? JSON.parse(filters.entry.value).length > 0 : false;
    }
    createProcessFilters(appName, key, filters) {
        return this.preferenceService.createPreference(appName, key, filters);
    }
    getProcessFiltersByKey(appName, key) {
        return this.preferenceService.getPreferenceByKey(appName, key);
    }
    updateProcessFilters(appName, key, filters) {
        return this.preferenceService.updatePreference(appName, key, filters);
    }
    prepareKey(appName) {
        const user = this.identityUserService.getCurrentUserInfo();
        return `process-filters-${appName}-${user.username}`;
    }
    findFiltersByKeyInPreferences(preferences, key) {
        const result = preferences.find((filter) => { return filter.entry.key === key; });
        return result && result.entry ? JSON.parse(result.entry.value) : [];
    }
    addFiltersToStream(filters) {
        this.filtersSubject.next(filters);
    }
    handleProcessError(error) {
        return throwError(error || 'Server error');
    }
    defaultProcessFilters(appName) {
        return [
            new ProcessFilterCloudModel({
                name: 'ADF_CLOUD_PROCESS_FILTERS.RUNNING_PROCESSES',
                icon: 'inbox',
                key: 'running-processes',
                appName,
                sort: 'startDate',
                status: 'RUNNING',
                order: 'DESC'
            }),
            new ProcessFilterCloudModel({
                name: 'ADF_CLOUD_PROCESS_FILTERS.COMPLETED_PROCESSES',
                icon: 'done',
                key: 'completed-processes',
                appName,
                sort: 'startDate',
                status: 'COMPLETED',
                order: 'DESC'
            }),
            new ProcessFilterCloudModel({
                name: 'ADF_CLOUD_PROCESS_FILTERS.ALL_PROCESSES',
                key: 'all-processes',
                icon: 'adjust',
                appName,
                sort: 'startDate',
                status: '',
                order: 'DESC'
            })
        ];
    }
}
ProcessFilterCloudService.ɵfac = function ProcessFilterCloudService_Factory(t) { return new (t || ProcessFilterCloudService)(ɵngcc0.ɵɵinject(PROCESS_FILTERS_SERVICE_TOKEN), ɵngcc0.ɵɵinject(ɵngcc6.IdentityUserService)); };
ProcessFilterCloudService.ɵprov = ɵɵdefineInjectable({ factory: function ProcessFilterCloudService_Factory() { return new ProcessFilterCloudService(ɵɵinject(PROCESS_FILTERS_SERVICE_TOKEN), ɵɵinject(IdentityUserService)); }, token: ProcessFilterCloudService, providedIn: "root" });
ProcessFilterCloudService.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [PROCESS_FILTERS_SERVICE_TOKEN,] }] },
    { type: IdentityUserService }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ProcessFilterCloudService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: undefined, decorators: [{
                type: Inject,
                args: [PROCESS_FILTERS_SERVICE_TOKEN]
            }] }, { type: ɵngcc6.IdentityUserService }]; }, null); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class ProcessFiltersCloudComponent {
    constructor(processFilterCloudService, translationService) {
        this.processFilterCloudService = processFilterCloudService;
        this.translationService = translationService;
        this.appName = '';
        this.showIcons = false;
        this.filterSelected = new EventEmitter();
        this.filterClicked = new EventEmitter();
        this.success = new EventEmitter();
        this.error = new EventEmitter();
        this.filters = [];
        this.onDestroy$ = new Subject();
    }
    ngOnInit() {
        if (this.appName === '') {
            this.getFilters(this.appName);
        }
    }
    ngOnChanges(changes) {
        const appName = changes['appName'];
        const filter = changes['filterParam'];
        if (appName && appName.currentValue) {
            this.getFilters(appName.currentValue);
        }
        else if (filter && filter.currentValue !== filter.previousValue) {
            this.selectFilterAndEmit(filter.currentValue);
        }
    }
    getFilters(appName) {
        this.filters$ = this.processFilterCloudService.getProcessFilters(appName);
        this.filters$.pipe(takeUntil(this.onDestroy$)).subscribe((res) => {
            this.resetFilter();
            this.filters = res || [];
            this.selectFilterAndEmit(this.filterParam);
            this.success.emit(res);
        }, (err) => {
            this.error.emit(err);
        });
    }
    selectFilter(paramFilter) {
        if (paramFilter) {
            this.currentFilter = this.filters.find((filter, index) => {
                return paramFilter.id === filter.id ||
                    (paramFilter.name && this.checkFilterNamesEquality(paramFilter.name, filter.name)) ||
                    (paramFilter.key && (paramFilter.key === filter.key)) ||
                    paramFilter.index === index;
            });
        }
    }
    checkFilterNamesEquality(name1, name2) {
        const translatedName1 = this.translationService.instant(name1);
        const translatedName2 = this.translationService.instant(name2);
        return translatedName1.toLocaleLowerCase() === translatedName2.toLocaleLowerCase();
    }
    selectFilterAndEmit(newParamFilter) {
        if (newParamFilter) {
            this.selectFilter(newParamFilter);
            this.filterSelected.emit(this.currentFilter);
        }
        else {
            this.currentFilter = undefined;
        }
    }
    selectFilterById(id) {
        this.selectFilterAndEmit({ id: id });
    }
    onFilterClick(filter) {
        if (filter) {
            this.selectFilter(filter);
            this.filterClicked.emit(this.currentFilter);
        }
        else {
            this.currentFilter = undefined;
        }
    }
    selectDefaultProcessFilter() {
        if (!this.isFilterListEmpty()) {
            this.currentFilter = this.filters[0];
        }
    }
    getCurrentFilter() {
        return this.currentFilter;
    }
    isFilterListEmpty() {
        return this.filters === undefined || (this.filters && this.filters.length === 0);
    }
    resetFilter() {
        this.filters = [];
        this.currentFilter = undefined;
    }
    ngOnDestroy() {
        this.onDestroy$.next(true);
        this.onDestroy$.complete();
    }
    isActiveFilter(filter) {
        return this.currentFilter.name === filter.name;
    }
}
ProcessFiltersCloudComponent.ɵfac = function ProcessFiltersCloudComponent_Factory(t) { return new (t || ProcessFiltersCloudComponent)(ɵngcc0.ɵɵdirectiveInject(ProcessFilterCloudService), ɵngcc0.ɵɵdirectiveInject(ɵngcc6.TranslationService)); };
ProcessFiltersCloudComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ProcessFiltersCloudComponent, selectors: [["adf-cloud-process-filters"]], inputs: { appName: "appName", showIcons: "showIcons", filterParam: "filterParam" }, outputs: { filterSelected: "filterSelected", filterClicked: "filterClicked", success: "success", error: "error" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 4, vars: 4, consts: [[4, "ngIf", "ngIfElse"], ["loading", ""], ["class", "adf-filters__entry", 3, "adf-active", 4, "ngFor", "ngForOf"], [1, "adf-filters__entry"], ["mat-button", "", "fxLayout", "row", "fxLayoutAlign", "space-between center", 1, "adf-filter-action-button", "adf-full-width", 3, "id", "click"], ["data-automation-id", "adf-filter-icon", 3, "value", 4, "ngIf"], ["data-automation-id", "adf-filter-label", 1, "adf-filter-action-button__label"], ["data-automation-id", "adf-filter-icon", 3, "value"], [1, "adf-app-list-spinner"]], template: function ProcessFiltersCloudComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, ProcessFiltersCloudComponent_ng_container_0_Template, 2, 1, "ng-container", 0);
        ɵngcc0.ɵɵpipe(1, "async");
        ɵngcc0.ɵɵtemplate(2, ProcessFiltersCloudComponent_ng_template_2_Template, 3, 0, "ng-template", null, 1, ɵngcc0.ɵɵtemplateRefExtractor);
    } if (rf & 2) {
        const _r1 = ɵngcc0.ɵɵreference(3);
        ɵngcc0.ɵɵproperty("ngIf", ɵngcc0.ɵɵpipeBind1(1, 2, ctx.filters$))("ngIfElse", _r1);
    } }, directives: [ɵngcc3.NgIf, ɵngcc3.NgForOf, ɵngcc13.MatButton, ɵngcc2.DefaultLayoutDirective, ɵngcc2.DefaultLayoutAlignDirective, ɵngcc6.IconComponent, ɵngcc9.MatSpinner], pipes: [ɵngcc3.AsyncPipe, ɵngcc10.TranslatePipe], styles: [".adf-filters__entry{cursor:pointer;font-size:14px!important;font-weight:700;height:24px;opacity:1;padding:12px 0!important;width:100%}.adf-filters__entry .adf-full-width{display:flex;width:100%}.adf-filters__entry .adf-filter-action-button .adf-filter-action-button__label{margin:0 8px!important;padding-left:20px}.adf-filters__entry.adf-active,.adf-filters__entry:hover{color:var(--theme-primary-color);opacity:1}"], encapsulation: 2 });
ProcessFiltersCloudComponent.ctorParameters = () => [
    { type: ProcessFilterCloudService },
    { type: TranslationService }
];
ProcessFiltersCloudComponent.propDecorators = {
    appName: [{ type: Input }],
    filterParam: [{ type: Input }],
    showIcons: [{ type: Input }],
    filterSelected: [{ type: Output }],
    filterClicked: [{ type: Output }],
    success: [{ type: Output }],
    error: [{ type: Output }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ProcessFiltersCloudComponent, [{
        type: Component,
        args: [{
                selector: 'adf-cloud-process-filters',
                template: "\n<ng-container *ngIf=\"filters$ | async as filterList; else loading\">\n    <div *ngFor=\"let filter of filterList\" class=\"adf-filters__entry\" [class.adf-active]=\"currentFilter === filter\">\n        <button (click)=\"onFilterClick(filter)\"\n          [attr.aria-label]=\"filter.name | translate\"\n          [id]=\"filter.id\"\n          [attr.data-automation-id]=\"filter.key + '_filter'\"\n          mat-button\n          class=\"adf-filter-action-button adf-full-width\" fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\n          <adf-icon data-automation-id=\"adf-filter-icon\" *ngIf=\"showIcons\" [value]=\"filter.icon\"></adf-icon>\n          <span data-automation-id=\"adf-filter-label\" class=\"adf-filter-action-button__label\">{{ filter.name | translate }}</span>\n        </button>\n    </div>\n</ng-container>\n<ng-template #loading>\n    <ng-container>\n        <div class=\"adf-app-list-spinner\">\n            <mat-spinner></mat-spinner>\n        </div>\n    </ng-container>\n</ng-template>\n",
                encapsulation: ViewEncapsulation.None,
                styles: [".adf-filters__entry{cursor:pointer;font-size:14px!important;font-weight:700;height:24px;opacity:1;padding:12px 0!important;width:100%}.adf-filters__entry .adf-full-width{display:flex;width:100%}.adf-filters__entry .adf-filter-action-button .adf-filter-action-button__label{margin:0 8px!important;padding-left:20px}.adf-filters__entry.adf-active,.adf-filters__entry:hover{color:var(--theme-primary-color);opacity:1}"]
            }]
    }], function () { return [{ type: ProcessFilterCloudService }, { type: ɵngcc6.TranslationService }]; }, { appName: [{
            type: Input
        }], showIcons: [{
            type: Input
        }], filterSelected: [{
            type: Output
        }], filterClicked: [{
            type: Output
        }], success: [{
            type: Output
        }], error: [{
            type: Output
        }], filterParam: [{
            type: Input
        }] }); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class ProcessFilterDialogCloudComponent {
    constructor(fb, dialogRef, data) {
        this.fb = fb;
        this.dialogRef = dialogRef;
        this.data = data;
        this.defaultIcon = 'inbox';
    }
    ngOnInit() {
        this.filterForm = this.fb.group({
            name: [this.data.name, Validators.required]
        });
    }
    onSaveClick() {
        this.dialogRef.close({
            action: ProcessFilterDialogCloudComponent.ACTION_SAVE,
            icon: this.defaultIcon,
            name: this.nameController.value
        });
    }
    onCancelClick() {
        this.dialogRef.close();
    }
    get nameController() {
        return this.filterForm.get('name');
    }
    isValid() {
        return this.filterForm.valid;
    }
}
ProcessFilterDialogCloudComponent.ɵfac = function ProcessFilterDialogCloudComponent_Factory(t) { return new (t || ProcessFilterDialogCloudComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc17.FormBuilder), ɵngcc0.ɵɵdirectiveInject(ɵngcc23.MatDialogRef), ɵngcc0.ɵɵdirectiveInject(MAT_DIALOG_DATA)); };
ProcessFilterDialogCloudComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ProcessFilterDialogCloudComponent, selectors: [["adf-cloud-process-filter-dialog-cloud"]], decls: 17, vars: 15, consts: [[1, "adf-process-filter-dialog"], ["mat-dialog-title", "", "id", "adf-process-filter-dialog-title"], [3, "formGroup"], ["fxFlex", "", 3, "floatLabel"], ["matInput", "", "formControlName", "name", "id", "adf-filter-name-id", 3, "placeholder"], ["fxLayout", "row", "fxLayoutAlign", "end end"], ["mat-button", "", "id", "adf-save-button-id", 3, "disabled", "click"], ["mat-button", "", "id", "adf-cancel-button-id", 3, "click"]], template: function ProcessFilterDialogCloudComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "span", 1);
        ɵngcc0.ɵɵtext(2);
        ɵngcc0.ɵɵpipe(3, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(4, "mat-card");
        ɵngcc0.ɵɵelementStart(5, "mat-card-content");
        ɵngcc0.ɵɵelementStart(6, "form", 2);
        ɵngcc0.ɵɵelementStart(7, "mat-form-field", 3);
        ɵngcc0.ɵɵelement(8, "input", 4);
        ɵngcc0.ɵɵpipe(9, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(10, "mat-card-actions", 5);
        ɵngcc0.ɵɵelementStart(11, "button", 6);
        ɵngcc0.ɵɵlistener("click", function ProcessFilterDialogCloudComponent_Template_button_click_11_listener() { return ctx.onSaveClick(); });
        ɵngcc0.ɵɵtext(12);
        ɵngcc0.ɵɵpipe(13, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(14, "button", 7);
        ɵngcc0.ɵɵlistener("click", function ProcessFilterDialogCloudComponent_Template_button_click_14_listener() { return ctx.onCancelClick(); });
        ɵngcc0.ɵɵtext(15);
        ɵngcc0.ɵɵpipe(16, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(3, 7, "ADF_CLOUD_EDIT_PROCESS_FILTER.DIALOG.TITLE"), " ");
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵproperty("formGroup", ctx.filterForm);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("floatLabel", "auto");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵpropertyInterpolate("placeholder", ɵngcc0.ɵɵpipeBind1(9, 9, "ADF_CLOUD_EDIT_PROCESS_FILTER.FILTER_NAME"));
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("disabled", !ctx.isValid());
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(13, 11, "ADF_CLOUD_EDIT_PROCESS_FILTER.DIALOG.SAVE"), " ");
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(16, 13, "ADF_CLOUD_EDIT_PROCESS_FILTER.DIALOG.CANCEL"), " ");
    } }, directives: [ɵngcc23.MatDialogTitle, ɵngcc1.MatCard, ɵngcc1.MatCardContent, ɵngcc17.ɵangular_packages_forms_forms_y, ɵngcc17.NgControlStatusGroup, ɵngcc17.FormGroupDirective, ɵngcc14.MatFormField, ɵngcc2.DefaultFlexDirective, ɵngcc21.MatInput, ɵngcc17.DefaultValueAccessor, ɵngcc17.NgControlStatus, ɵngcc17.FormControlName, ɵngcc1.MatCardActions, ɵngcc2.DefaultLayoutDirective, ɵngcc2.DefaultLayoutAlignDirective, ɵngcc13.MatButton], pipes: [ɵngcc10.TranslatePipe], styles: [".adf-process-filter-dialog[_ngcontent-%COMP%]   .mat-card[_ngcontent-%COMP%], .adf-process-filter-dialog[_ngcontent-%COMP%]   .mat-card-content[_ngcontent-%COMP%]{box-shadow:none;padding:0}"] });
ProcessFilterDialogCloudComponent.ACTION_SAVE = 'SAVE';
ProcessFilterDialogCloudComponent.ctorParameters = () => [
    { type: FormBuilder },
    { type: MatDialogRef },
    { type: undefined, decorators: [{ type: Inject, args: [MAT_DIALOG_DATA,] }] }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ProcessFilterDialogCloudComponent, [{
        type: Component,
        args: [{
                selector: 'adf-cloud-process-filter-dialog-cloud',
                template: "<div class=\"adf-process-filter-dialog\">\n    <span mat-dialog-title id=\"adf-process-filter-dialog-title\">\n         {{ 'ADF_CLOUD_EDIT_PROCESS_FILTER.DIALOG.TITLE' | translate}}\n    </span>\n    <mat-card>\n        <mat-card-content>\n        <form [formGroup]=\"filterForm\">\n            <mat-form-field fxFlex [floatLabel]=\"'auto'\">\n                <input matInput placeholder=\"{{ 'ADF_CLOUD_EDIT_PROCESS_FILTER.FILTER_NAME' | translate }}\" formControlName=\"name\" id=\"adf-filter-name-id\">\n            </mat-form-field>\n        </form>\n        </mat-card-content>\n        <mat-card-actions fxLayout=\"row\" fxLayoutAlign=\"end end\">\n            <button mat-button (click)=\"onSaveClick()\" id=\"adf-save-button-id\" [disabled]=\"!isValid()\">\n                {{ 'ADF_CLOUD_EDIT_PROCESS_FILTER.DIALOG.SAVE' | translate}}\n            </button>\n            <button mat-button (click)=\"onCancelClick()\" id=\"adf-cancel-button-id\">\n               {{ 'ADF_CLOUD_EDIT_PROCESS_FILTER.DIALOG.CANCEL' | translate}}\n            </button>\n        </mat-card-actions>\n    </mat-card>\n</div>\n",
                styles: [".adf-process-filter-dialog .mat-card,.adf-process-filter-dialog .mat-card-content{box-shadow:none;padding:0}"]
            }]
    }], function () { return [{ type: ɵngcc17.FormBuilder }, { type: ɵngcc23.MatDialogRef }, { type: undefined, decorators: [{
                type: Inject,
                args: [MAT_DIALOG_DATA]
            }] }]; }, null); })();

class ProcessCloudService extends BaseCloudService {
    constructor(apiService, appConfigService, logService) {
        super(apiService, appConfigService);
        this.logService = logService;
        this.dataChangesDetected = new Subject();
    }
    getProcessInstanceById(appName, processInstanceId) {
        if (appName && processInstanceId) {
            const url = `${this.getBasePath(appName)}/query/v1/process-instances/${processInstanceId}`;
            return this.get(url).pipe(map((res) => {
                this.dataChangesDetected.next(res.entry);
                return res.entry;
            }));
        }
        else {
            this.logService.error('AppName and ProcessInstanceId are mandatory for querying a process');
            return throwError('AppName/ProcessInstanceId not configured');
        }
    }
    getProcessDefinitions(appName) {
        if (appName || appName === '') {
            const url = `${this.getBasePath(appName)}/rb/v1/process-definitions`;
            return this.get(url).pipe(map((res) => {
                return res.list.entries.map((processDefs) => new ProcessDefinitionCloud(processDefs.entry));
            }));
        }
        else {
            this.logService.error('AppName is mandatory for querying task');
            return throwError('AppName not configured');
        }
    }
    getApplicationVersions(appName) {
        if (appName) {
            const url = `${this.getBasePath(appName)}/query/v1/applications`;
            return this.get(url).pipe(map((appEntities) => {
                return appEntities.list.entries;
            }), catchError((err) => this.handleError(err)));
        }
        else {
            this.logService.error('AppName is mandatory for querying the versions of an application');
            return throwError('AppName not configured');
        }
    }
    cancelProcess(appName, processInstanceId) {
        if (appName && processInstanceId) {
            const queryUrl = `${this.getBasePath(appName)}/rb/v1/process-instances/${processInstanceId}`;
            return this.delete(queryUrl).pipe(map((res) => {
                this.dataChangesDetected.next(res.entry);
                return res.entry;
            }));
        }
        else {
            this.logService.error('App name and Process id are mandatory for deleting a process');
            return throwError('App name and process id not configured');
        }
    }
    handleError(error) {
        this.logService.error(error);
        return throwError(error || 'Server error');
    }
}
ProcessCloudService.ɵfac = function ProcessCloudService_Factory(t) { return new (t || ProcessCloudService)(ɵngcc0.ɵɵinject(ɵngcc6.AlfrescoApiService), ɵngcc0.ɵɵinject(ɵngcc6.AppConfigService), ɵngcc0.ɵɵinject(ɵngcc6.LogService)); };
ProcessCloudService.ɵprov = ɵɵdefineInjectable({ factory: function ProcessCloudService_Factory() { return new ProcessCloudService(ɵɵinject(AlfrescoApiService), ɵɵinject(AppConfigService), ɵɵinject(LogService)); }, token: ProcessCloudService, providedIn: "root" });
ProcessCloudService.ctorParameters = () => [
    { type: AlfrescoApiService },
    { type: AppConfigService },
    { type: LogService }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ProcessCloudService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc6.AlfrescoApiService }, { type: ɵngcc6.AppConfigService }, { type: ɵngcc6.LogService }]; }, null); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class EditProcessFilterCloudComponent {
    constructor(formBuilder, dialog, dateAdapter, userPreferencesService, translateService, processFilterCloudService, appsProcessCloudService, processCloudService) {
        this.formBuilder = formBuilder;
        this.dialog = dialog;
        this.dateAdapter = dateAdapter;
        this.userPreferencesService = userPreferencesService;
        this.translateService = translateService;
        this.processFilterCloudService = processFilterCloudService;
        this.appsProcessCloudService = appsProcessCloudService;
        this.processCloudService = processCloudService;
        this.DATE_FORMAT = 'DD/MM/YYYY';
        this.appName = '';
        this.role = '';
        this.filterProperties = EditProcessFilterCloudComponent.DEFAULT_PROCESS_FILTER_PROPERTIES;
        this.sortProperties = EditProcessFilterCloudComponent.DEFAULT_SORT_PROPERTIES;
        this.actions = EditProcessFilterCloudComponent.DEFAULT_ACTIONS;
        this.showFilterActions = true;
        this.showTitle = true;
        this.showProcessFilterName = true;
        this.filterChange = new EventEmitter();
        this.action = new EventEmitter();
        this.filterHasBeenChanged = false;
        this.status = [
            { value: '', label: 'ADF_CLOUD_PROCESS_FILTERS.STATUS.ALL' },
            { value: 'RUNNING', label: 'ADF_CLOUD_PROCESS_FILTERS.STATUS.RUNNING' },
            { value: 'SUSPENDED', label: 'ADF_CLOUD_PROCESS_FILTERS.STATUS.SUSPENDED' },
            { value: 'CANCELLED', label: 'ADF_CLOUD_PROCESS_FILTERS.STATUS.CANCELLED' },
            { value: 'COMPLETED', label: 'ADF_CLOUD_PROCESS_FILTERS.STATUS.COMPLETED' }
        ];
        this.directions = [
            { value: 'ASC', label: 'ADF_CLOUD_PROCESS_FILTERS.DIRECTION.ASCENDING' },
            { value: 'DESC', label: 'ADF_CLOUD_PROCESS_FILTERS.DIRECTION.DESCENDING' }
        ];
        this.actionDisabledForDefault = [
            EditProcessFilterCloudComponent.ACTION_SAVE,
            EditProcessFilterCloudComponent.ACTION_DELETE
        ];
        this.applicationNames = [];
        this.allProcessDefinitionNamesOption = {
            label: 'ADF_CLOUD_PROCESS_FILTERS.STATUS.ALL',
            value: ''
        };
        this.processDefinitionNames = [];
        this.processFilterProperties = [];
        this.processFilterActions = [];
        this.toggleFilterActions = false;
        this.appVersionOptions = [];
        this.initiatorOptions = [];
        this.onDestroy$ = new Subject();
        this.isLoading = false;
    }
    get processFilter() {
        return this._filter;
    }
    set processFilter(value) {
        const isChanged = this.isFilterChanged(this._filter, value);
        this._filter = value;
        if (value === null || value === void 0 ? void 0 : value.appName) {
            this.appName = value.appName;
        }
        if (value === null || value === void 0 ? void 0 : value.id) {
            this.id = value.id;
        }
        this.processFilterProperties = this.createAndFilterProperties();
        this.processFilterActions = this.createAndFilterActions();
        this.buildForm(this.processFilterProperties);
        if (isChanged) {
            this.filterChange.emit(value);
        }
    }
    ngOnInit() {
        this.userPreferencesService
            .select(UserPreferenceValues.Locale)
            .pipe(takeUntil(this.onDestroy$))
            .subscribe(locale => this.dateAdapter.setLocale(locale));
    }
    ngOnChanges(changes) {
        const id = changes['id'];
        if (id && id.currentValue !== id.previousValue) {
            this.retrieveProcessFilterAndBuildForm();
        }
    }
    ngOnDestroy() {
        this.onDestroy$.next(true);
        this.onDestroy$.complete();
    }
    buildForm(processFilterProperties) {
        this.editProcessFilterForm = this.formBuilder.group(this.getFormControlsConfig(processFilterProperties));
        this.onFilterChange();
    }
    getFormControlsConfig(processFilterProperties) {
        const properties = processFilterProperties.map((property) => {
            if (!!property.attributes) {
                return this.getAttributesControlConfig(property);
            }
            else {
                return { [property.key]: property.value };
            }
        });
        return properties.reduce(((result, current) => Object.assign(result, current)), {});
    }
    getAttributesControlConfig(property) {
        return Object.values(property.attributes).reduce((result, key) => {
            result[key] = property.value[key];
            return result;
        }, {});
    }
    retrieveProcessFilterAndBuildForm() {
        this.isLoading = true;
        this.processFilterCloudService
            .getFilterById(this.appName, this.id)
            .pipe(finalize(() => this.isLoading = false))
            .subscribe(response => {
            this.filterHasBeenChanged = false;
            this.processFilter = new ProcessFilterCloudModel(Object.assign({}, response || {}, this.processFilter || {}));
        });
    }
    onFilterChange() {
        if (this.filterChangeSub) {
            this.filterChangeSub.unsubscribe();
            this.filterChangeSub = null;
        }
        this.filterChangeSub = this.editProcessFilterForm.valueChanges
            .pipe(debounceTime(500), filter(() => this.isFormValid()), takeUntil(this.onDestroy$))
            .subscribe((formValues) => {
            this.setLastModifiedToFilter(formValues);
            const newValue = new ProcessFilterCloudModel(Object.assign({}, this.processFilter, formValues));
            const changed = !this.compareFilters(newValue, this.processFilter);
            this.filterHasBeenChanged = changed;
            if (changed) {
                this._filter = newValue;
                this.filterChange.emit(newValue);
            }
        });
    }
    createAndFilterProperties() {
        this.checkMandatoryFilterProperties();
        if (this.filterProperties.includes('appName')) {
            this.getRunningApplications();
        }
        if (this.filterProperties.includes('processDefinitionName')) {
            this.getProcessDefinitions();
        }
        if (this.filterProperties.includes('appVersionMultiple')) {
            this.getAppVersionOptions();
        }
        if (this.filterProperties.includes('initiator')) {
            this.initiatorOptions = !!this.processFilter.initiator
                ? this.processFilter.initiator.split(',').map(username => Object.assign({}, { username: username }))
                : [];
        }
        const defaultProperties = this.createProcessFilterProperties(this.processFilter);
        let filteredProperties = defaultProperties.filter((filterProperty) => this.isValidProperty(this.filterProperties, filterProperty.key));
        if (!this.filterProperties.includes('sort')) {
            filteredProperties = filteredProperties.filter(property => property.key !== 'order');
        }
        if (this.filterProperties.includes('lastModified')) {
            filteredProperties = [
                ...filteredProperties,
                ...this.createLastModifiedProperty(this.processFilter)
            ];
        }
        return filteredProperties;
    }
    checkMandatoryFilterProperties() {
        if (this.filterProperties === undefined || this.filterProperties.length === 0) {
            this.filterProperties = EditProcessFilterCloudComponent.DEFAULT_PROCESS_FILTER_PROPERTIES;
        }
    }
    isValidProperty(filterProperties, key) {
        return filterProperties ? filterProperties.indexOf(key) >= 0 : true;
    }
    get createSortProperties() {
        this.checkMandatorySortProperties();
        const defaultSortProperties = this.createProcessSortProperties();
        return defaultSortProperties.filter((sortProperty) => this.isValidProperty(this.sortProperties, sortProperty.key));
    }
    getAppVersionOptions() {
        this.appVersionOptions = [];
        this.processCloudService.getApplicationVersions(this.appName).subscribe((appVersions) => {
            appVersions.forEach(appVersion => {
                this.appVersionOptions.push({ label: appVersion.entry.version, value: appVersion.entry.version });
            });
        });
    }
    checkMandatorySortProperties() {
        if (this.sortProperties === undefined || this.sortProperties.length === 0) {
            this.sortProperties = EditProcessFilterCloudComponent.DEFAULT_SORT_PROPERTIES;
        }
    }
    createAndFilterActions() {
        this.checkMandatoryActions();
        const actions = this.createFilterActions();
        return actions.filter((action) => this.isValidAction(this.actions, action));
    }
    checkMandatoryActions() {
        if (this.actions === undefined || this.actions.length === 0) {
            this.actions = EditProcessFilterCloudComponent.DEFAULT_ACTIONS;
        }
    }
    isValidAction(actions, action) {
        return actions ? actions.indexOf(action.actionType) >= 0 : true;
    }
    isFormValid() {
        return this.editProcessFilterForm.valid;
    }
    getPropertyController(property) {
        return this.editProcessFilterForm.get(property.key);
    }
    onDateChanged(newDateValue, dateProperty) {
        if (newDateValue) {
            const controller = this.getPropertyController(dateProperty);
            if (newDateValue.isValid()) {
                controller.setValue(newDateValue);
                controller.setErrors(null);
            }
            else {
                controller.setErrors({ invalid: true });
            }
        }
    }
    onDateTypeChange(dateType, property) {
        this.editProcessFilterForm.get(property.attributes.dateType).setValue(dateType);
    }
    onDateRangeFilterChanged(dateRange, property) {
        var _a, _b;
        this.editProcessFilterForm.get((_a = property.attributes) === null || _a === void 0 ? void 0 : _a.from).setValue(dateRange.startDate ? dateRange.startDate : null);
        this.editProcessFilterForm.get((_b = property.attributes) === null || _b === void 0 ? void 0 : _b.to).setValue(dateRange.endDate ? dateRange.endDate : null);
        this.editProcessFilterForm.get(property.attributes.dateType).setValue(DateCloudFilterType.RANGE);
    }
    onChangedUser(users, processProperty) {
        this.getPropertyController(processProperty).setValue(users.map(user => user.username).join(','));
    }
    hasError(property) {
        const controller = this.getPropertyController(property);
        return controller.errors && controller.errors.invalid;
    }
    compareFilters(editedQuery, currentQuery) {
        return JSON.stringify(editedQuery).toLowerCase() === JSON.stringify(currentQuery).toLowerCase();
    }
    getRunningApplications() {
        this.applicationNames = [];
        this.appsProcessCloudService
            .getDeployedApplicationsByStatus('RUNNING', this.role)
            .subscribe((applications) => {
            if (applications && applications.length > 0) {
                applications.map((application) => {
                    this.applicationNames.push({ label: application.name, value: application.name });
                });
            }
        });
    }
    getProcessDefinitions() {
        this.processDefinitionNames = [];
        this.processCloudService.getProcessDefinitions(this.appName).subscribe((processDefinitions) => {
            if (processDefinitions && processDefinitions.length > 0) {
                this.processDefinitionNames.push(this.allProcessDefinitionNamesOption);
                processDefinitions.map((processDefinition) => {
                    this.processDefinitionNames.push({ label: processDefinition.name, value: processDefinition.name });
                });
            }
        });
    }
    executeFilterActions(action) {
        if (action.actionType === EditProcessFilterCloudComponent.ACTION_SAVE) {
            this.save(action);
        }
        else if (action.actionType === EditProcessFilterCloudComponent.ACTION_SAVE_AS) {
            this.saveAs(action);
        }
        else if (action.actionType === EditProcessFilterCloudComponent.ACTION_DELETE) {
            this.delete(action);
        }
    }
    save(saveAction) {
        this.processFilterCloudService
            .updateFilter(this.processFilter)
            .subscribe(() => {
            saveAction.filter = this.processFilter;
            this.filterHasBeenChanged = false;
            this.action.emit(saveAction);
        });
    }
    delete(deleteAction) {
        this.processFilterCloudService
            .deleteFilter(this.processFilter)
            .pipe(filter((filters) => {
            deleteAction.filter = this.processFilter;
            this.action.emit(deleteAction);
            return filters.length === 0;
        }), switchMap(() => this.restoreDefaultProcessFilters()))
            .subscribe(() => { });
    }
    saveAs(saveAsAction) {
        const dialogRef = this.dialog.open(ProcessFilterDialogCloudComponent, {
            data: {
                name: this.translateService.instant(this.processFilter.name)
            },
            height: 'auto',
            minWidth: '30%'
        });
        dialogRef.afterClosed().subscribe((result) => {
            if (result && result.action === ProcessFilterDialogCloudComponent.ACTION_SAVE) {
                const filterId = Math.random().toString(36).substr(2, 9);
                const filterKey = this.getSanitizeFilterName(result.name);
                const newFilter = {
                    name: result.name,
                    icon: result.icon,
                    id: filterId,
                    key: 'custom-' + filterKey
                };
                const resultFilter = Object.assign({}, this.processFilter, newFilter);
                this.processFilterCloudService
                    .addFilter(resultFilter)
                    .subscribe(() => {
                    saveAsAction.filter = resultFilter;
                    this.filterHasBeenChanged = false;
                    this.action.emit(saveAsAction);
                });
            }
        });
    }
    getSanitizeFilterName(filterName) {
        const nameWithHyphen = this.replaceSpaceWithHyphen(filterName.trim());
        return nameWithHyphen.toLowerCase();
    }
    replaceSpaceWithHyphen(name) {
        const regExt = new RegExp(' ', 'g');
        return name.replace(regExt, '-');
    }
    restoreDefaultProcessFilters() {
        return this.processFilterCloudService.getProcessFilters(this.appName);
    }
    onExpand() {
        this.toggleFilterActions = true;
    }
    onClose() {
        this.toggleFilterActions = false;
    }
    isDisabledAction(action) {
        return (this.processFilterCloudService.isDefaultFilter(this.processFilter.name) &&
            this.actionDisabledForDefault.includes(action.actionType)) ? true : this.hasFilterChanged(action);
    }
    hasFilterChanged(action) {
        return action.actionType === EditProcessFilterCloudComponent.ACTION_SAVE ||
            action.actionType === EditProcessFilterCloudComponent.ACTION_SAVE_AS ?
            !this.filterHasBeenChanged : false;
    }
    setLastModifiedToFilter(formValues) {
        if (formValues.lastModifiedTo && Date.parse(formValues.lastModifiedTo.toString())) {
            const lastModifiedToFilterValue = moment(formValues.lastModifiedTo);
            lastModifiedToFilterValue.set({
                hour: 23,
                minute: 59,
                second: 59
            });
            formValues.lastModifiedTo = lastModifiedToFilterValue.toDate();
        }
    }
    createFilterActions() {
        return [
            {
                actionType: EditProcessFilterCloudComponent.ACTION_SAVE,
                icon: 'adf:save',
                tooltip: 'ADF_CLOUD_EDIT_PROCESS_FILTER.TOOL_TIP.SAVE'
            },
            {
                actionType: EditProcessFilterCloudComponent.ACTION_SAVE_AS,
                icon: 'adf:save-as',
                tooltip: 'ADF_CLOUD_EDIT_PROCESS_FILTER.TOOL_TIP.SAVE_AS'
            },
            {
                actionType: EditProcessFilterCloudComponent.ACTION_DELETE,
                icon: 'delete',
                tooltip: 'ADF_CLOUD_EDIT_PROCESS_FILTER.TOOL_TIP.DELETE'
            }
        ];
    }
    createLastModifiedProperty(filterModel) {
        let lastModifiedFrom;
        let lastModifiedTo;
        if (filterModel.lastModifiedFrom) {
            lastModifiedFrom = moment(filterModel.lastModifiedFrom);
        }
        if (filterModel.lastModifiedTo) {
            lastModifiedTo = moment(filterModel.lastModifiedTo);
        }
        return [
            {
                label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.LAST_MODIFIED_DATE_FORM',
                type: 'date',
                key: 'lastModifiedFrom',
                value: lastModifiedFrom
            },
            {
                label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.LAST_MODIFIED_TO',
                type: 'date',
                key: 'lastModifiedTo',
                value: lastModifiedTo
            }
        ];
    }
    createProcessSortProperties() {
        return [
            {
                label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.ID',
                key: 'id',
                value: 'id'
            },
            {
                label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.PROCESS_NAME',
                key: 'name',
                value: 'name'
            },
            {
                label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.START_DATE',
                key: 'startDate',
                value: 'startDate'
            },
            {
                label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.STATUS',
                key: 'status',
                value: 'status'
            },
            {
                label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.STARTED_BY',
                key: 'initiator',
                value: 'initiator'
            },
            {
                label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.APP_NAME',
                key: 'appName',
                value: 'appName'
            },
            {
                label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.APP_VERSION',
                key: 'appVersion',
                value: 'appVersion'
            },
            {
                label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.PROCESS_INS_ID',
                key: 'processInstanceId',
                value: 'processInstanceId'
            },
            {
                label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.PROCESS_DEF_ID',
                key: 'processDefinitionId',
                value: 'processDefinitionId'
            },
            {
                label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.PROCESS_DEF_NAME',
                key: 'processDefinitionName',
                value: 'processDefinitionName'
            },
            {
                label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.PROCESS_DEF_KEY',
                key: 'processDefinitionKey',
                value: 'processDefinitionKey'
            },
            {
                label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.LAST_MODIFIED',
                key: 'lastModified',
                value: 'lastModified'
            },
            {
                label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.BUSINESS_KEY',
                key: 'businessKey',
                value: 'businessKey'
            }
        ];
    }
    isFilterChanged(oldValue, newValue) {
        const oldJson = JSON.stringify(this.processFilterCloudService.writeQueryParams(oldValue || {}, this.filterProperties));
        const newJson = JSON.stringify(this.processFilterCloudService.writeQueryParams(newValue || {}, this.filterProperties));
        return oldJson !== newJson;
    }
    createProcessFilterProperties(filterModel) {
        const appVersionMultiple = [];
        if (filterModel.appVersion) {
            appVersionMultiple.push(Array.isArray(filterModel.appVersion)
                ? filterModel.appVersion.map(entry => entry.toString())
                : `${filterModel.appVersion}`);
        }
        return [
            {
                label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.APP_NAME',
                type: 'select',
                key: 'appName',
                value: filterModel.appName || '',
                options: this.applicationNames
            },
            {
                label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.APP_VERSION',
                type: 'number',
                key: 'appVersion',
                value: filterModel.appVersion
            },
            {
                label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.APP_VERSION',
                type: 'multi-select',
                key: 'appVersionMultiple',
                value: appVersionMultiple,
                options: this.appVersionOptions
            },
            {
                label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.PROCESS_INS_ID',
                type: 'text',
                key: 'processInstanceId',
                value: filterModel.processInstanceId || ''
            },
            {
                label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.PROCESS_NAME',
                type: 'text',
                key: 'processName',
                value: filterModel.processName || ''
            },
            {
                label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.PROCESS_DEF_NAME',
                type: 'select',
                key: 'processDefinitionName',
                value: filterModel.processDefinitionName || '',
                options: this.processDefinitionNames
            },
            {
                label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.STATUS',
                type: 'select',
                key: 'status',
                value: filterModel.status || this.status[0].value,
                options: this.status
            },
            {
                label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.PROCESS_DEF_ID',
                type: 'text',
                key: 'processDefinitionId',
                value: filterModel.processDefinitionId || ''
            },
            {
                label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.PROCESS_DEF_KEY',
                type: 'text',
                key: 'processDefinitionKey',
                value: filterModel.processDefinitionKey || ''
            },
            {
                label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.SORT',
                type: 'select',
                key: 'sort',
                value: filterModel.sort || this.createSortProperties[0].value,
                options: this.createSortProperties
            },
            {
                label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.DIRECTION',
                type: 'select',
                key: 'order',
                value: filterModel.order || this.directions[0].value,
                options: this.directions
            },
            {
                label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.COMPLETED_DATE',
                type: 'date',
                key: 'completedDate',
                value: filterModel.completedDate || false
            },
            {
                label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.STARTED_BY',
                type: 'people',
                key: 'initiator',
                value: filterModel.initiator,
                selectionMode: 'multiple'
            },
            {
                label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.COMPLETED_DATE',
                type: 'date-range',
                key: 'completedDateRange',
                attributes: { dateType: 'completedDateType', from: '_completedFrom', to: '_completedTo' },
                value: {
                    completedDateType: filterModel.completedDateType || null,
                    _completedFrom: filterModel.completedFrom || null,
                    _completedTo: filterModel.completedTo || null
                }
            },
            {
                label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.STARTED_DATE',
                type: 'date-range',
                key: 'startedDateRange',
                attributes: { dateType: 'startedDateType', from: '_startFrom', to: '_startTo' },
                value: {
                    startedDateType: filterModel.startedDateType || null,
                    _startFrom: filterModel.startFrom || null,
                    _startTo: filterModel.startTo || null
                }
            },
            {
                label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.SUSPENDED_DATE',
                type: 'date-range',
                key: 'suspendedDateRange',
                attributes: { dateType: 'suspendedDateType', from: '_suspendedFrom', to: '_suspendedTo' },
                value: {
                    suspendedDateType: filterModel.suspendedDateType || null,
                    _suspendedFrom: filterModel.suspendedFrom || null,
                    _suspendedTo: filterModel.suspendedTo || null
                }
            }
        ];
    }
}
EditProcessFilterCloudComponent.ɵfac = function EditProcessFilterCloudComponent_Factory(t) { return new (t || EditProcessFilterCloudComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc17.FormBuilder), ɵngcc0.ɵɵdirectiveInject(ɵngcc23.MatDialog), ɵngcc0.ɵɵdirectiveInject(ɵngcc8.DateAdapter), ɵngcc0.ɵɵdirectiveInject(ɵngcc6.UserPreferencesService), ɵngcc0.ɵɵdirectiveInject(ɵngcc6.TranslationService), ɵngcc0.ɵɵdirectiveInject(ProcessFilterCloudService), ɵngcc0.ɵɵdirectiveInject(AppsProcessCloudService), ɵngcc0.ɵɵdirectiveInject(ProcessCloudService)); };
EditProcessFilterCloudComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: EditProcessFilterCloudComponent, selectors: [["adf-cloud-edit-process-filter"]], inputs: { appName: "appName", role: "role", filterProperties: "filterProperties", sortProperties: "sortProperties", actions: "actions", showFilterActions: "showFilterActions", showTitle: "showTitle", showProcessFilterName: "showProcessFilterName", processFilter: "processFilter", id: "id" }, outputs: { filterChange: "filterChange", action: "action" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 4, vars: 3, consts: [[3, "hideToggle"], [3, "afterExpand", "closed"], ["id", "adf-edit-process-filter-expansion-header", 4, "ngIf"], [4, "ngIf"], ["id", "adf-edit-process-filter-expansion-header"], [4, "ngIf", "ngIfElse"], ["loadingTemplate", ""], ["fxLayoutAlign", "space-between center", "id", "adf-edit-process-filter-title-id", 4, "ngIf"], ["fxLayoutAlign", "space-between center", "id", "adf-edit-process-filter-sub-title-id"], ["class", "adf-cloud-edit-process-filter-actions", 4, "ngIf"], ["fxLayoutAlign", "space-between center", "id", "adf-edit-process-filter-title-id"], [1, "adf-cloud-edit-process-filter-actions"], ["mat-icon-button", "", 3, "matTooltip", "disabled", "click", 4, "ngFor", "ngForOf"], ["mat-icon-button", "", 3, "matTooltip", "disabled", "click"], [3, "value"], [1, "adf-cloud-edit-process-filter-loading-margin"], [3, "diameter"], [3, "formGroup", 4, "ngIf"], [3, "formGroup"], ["fxLayout", "row wrap", "fxLayout.xs", "column", "fxLayoutGap", "10px", "fxLayoutAlign", "start center"], [4, "ngFor", "ngForOf"], ["fxFlex", "23%", 3, "floatLabel", 4, "ngIf"], [3, "processFilterProperty", "options", "dateTypeChange", "dateChanged", 4, "ngIf"], ["fxFlex", "23%", 4, "ngIf"], ["fxFlex", "23%", 3, "floatLabel"], [3, "placeholder", "formControlName"], [3, "value", 4, "ngFor", "ngForOf"], [3, "placeholder", "formControlName", "multiple"], ["matInput", "", "type", "text", 3, "formControlName", "placeholder"], ["matInput", "", "type", "number", "min", "0", 3, "formControlName", "placeholder"], ["matInput", "", 3, "formControlName", "matDatepicker", "placeholder", "keyup", "dateChange"], ["matSuffix", "", 3, "for"], ["dateController", ""], [1, "adf-edit-process-filter-date-error-container"], [1, "adf-error-text"], [1, "adf-error-icon"], [3, "processFilterProperty", "options", "dateTypeChange", "dateChanged"], ["fxFlex", "23%"], [3, "preSelectUsers", "title", "validate", "appName", "mode", "changedUsers"]], template: function EditProcessFilterCloudComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "mat-accordion", 0);
        ɵngcc0.ɵɵelementStart(1, "mat-expansion-panel", 1);
        ɵngcc0.ɵɵlistener("afterExpand", function EditProcessFilterCloudComponent_Template_mat_expansion_panel_afterExpand_1_listener() { return ctx.onExpand(); })("closed", function EditProcessFilterCloudComponent_Template_mat_expansion_panel_closed_1_listener() { return ctx.onClose(); });
        ɵngcc0.ɵɵtemplate(2, EditProcessFilterCloudComponent_mat_expansion_panel_header_2_Template, 4, 2, "mat-expansion-panel-header", 2);
        ɵngcc0.ɵɵtemplate(3, EditProcessFilterCloudComponent_ng_container_3_Template, 2, 1, "ng-container", 3);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("hideToggle", ctx.isLoading);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.processFilter);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.isLoading);
    } }, directives: [ɵngcc24.MatAccordion, ɵngcc24.MatExpansionPanel, ɵngcc3.NgIf, ɵngcc24.MatExpansionPanelHeader, ɵngcc24.MatExpansionPanelDescription, ɵngcc2.DefaultLayoutAlignDirective, ɵngcc24.MatExpansionPanelTitle, ɵngcc3.NgForOf, ɵngcc13.MatButton, ɵngcc20.MatTooltip, ɵngcc6.IconComponent, ɵngcc9.MatSpinner, ɵngcc17.ɵangular_packages_forms_forms_y, ɵngcc17.NgControlStatusGroup, ɵngcc17.FormGroupDirective, ɵngcc2.DefaultLayoutDirective, ɵngcc2.DefaultLayoutGapDirective, ɵngcc14.MatFormField, ɵngcc2.DefaultFlexDirective, ɵngcc15.MatSelect, ɵngcc17.NgControlStatus, ɵngcc17.FormControlName, ɵngcc8.MatOption, ɵngcc21.MatInput, ɵngcc17.DefaultValueAccessor, ɵngcc17.NumberValueAccessor, ɵngcc14.MatLabel, ɵngcc16.MatDatepickerInput, ɵngcc16.MatDatepickerToggle, ɵngcc14.MatSuffix, ɵngcc16.MatDatepicker, ɵngcc5.MatIcon, DateRangeFilterComponent, PeopleCloudComponent], pipes: [ɵngcc10.TranslatePipe], styles: [".adf-edit-process-filter-date-error-container{height:20px;margin-top:12px;position:absolute;width:100%}.adf-edit-process-filter-date-error-container>div{display:flex;flex-flow:row;justify-content:flex-start}.adf-edit-process-filter-date-error-container .adf-error-text{color:var(--theme-warn-color);font-size:11px;height:16px;line-height:1.33;padding-right:8px;width:auto}.adf-edit-process-filter-date-error-container .adf-error-icon{color:var(--theme-warn-color);font-size:16px}.adf-cloud-edit-process-filter-loading-margin{margin-left:calc(50% - 50px);margin-right:calc(50% - 50px)}"], encapsulation: 2 });
EditProcessFilterCloudComponent.ACTION_SAVE = 'save';
EditProcessFilterCloudComponent.ACTION_SAVE_AS = 'saveAs';
EditProcessFilterCloudComponent.ACTION_DELETE = 'delete';
EditProcessFilterCloudComponent.DEFAULT_PROCESS_FILTER_PROPERTIES = ['status', 'sort', 'order', 'lastModified'];
EditProcessFilterCloudComponent.DEFAULT_SORT_PROPERTIES = ['id', 'name', 'status', 'startDate'];
EditProcessFilterCloudComponent.DEFAULT_ACTIONS = ['save', 'saveAs', 'delete'];
EditProcessFilterCloudComponent.ctorParameters = () => [
    { type: FormBuilder },
    { type: MatDialog },
    { type: DateAdapter },
    { type: UserPreferencesService },
    { type: TranslationService },
    { type: ProcessFilterCloudService },
    { type: AppsProcessCloudService },
    { type: ProcessCloudService }
];
EditProcessFilterCloudComponent.propDecorators = {
    appName: [{ type: Input }],
    role: [{ type: Input }],
    id: [{ type: Input }],
    filterProperties: [{ type: Input }],
    sortProperties: [{ type: Input }],
    actions: [{ type: Input }],
    showFilterActions: [{ type: Input }],
    showTitle: [{ type: Input }],
    showProcessFilterName: [{ type: Input }],
    filterChange: [{ type: Output }],
    action: [{ type: Output }],
    processFilter: [{ type: Input }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(EditProcessFilterCloudComponent, [{
        type: Component,
        args: [{
                selector: 'adf-cloud-edit-process-filter',
                template: "<mat-accordion [hideToggle]=\"isLoading\">\n    <mat-expansion-panel (afterExpand)=\"onExpand()\" (closed)=\"onClose()\">\n        <mat-expansion-panel-header *ngIf=\"processFilter\" id=\"adf-edit-process-filter-expansion-header\">\n            <ng-container *ngIf=\"!isLoading; else loadingTemplate\">\n                <mat-panel-title *ngIf=\"showProcessFilterName\" fxLayoutAlign=\"space-between center\" id=\"adf-edit-process-filter-title-id\">{{processFilter.name | translate}}</mat-panel-title>\n                <mat-panel-description fxLayoutAlign=\"space-between center\" id=\"adf-edit-process-filter-sub-title-id\">\n                    <span *ngIf=\"showTitle\"> {{ 'ADF_CLOUD_EDIT_PROCESS_FILTER.TITLE' | translate}}</span>\n                    <div *ngIf=\"showFilterActions\" class=\"adf-cloud-edit-process-filter-actions\">\n                        <ng-container *ngIf=\"toggleFilterActions\">\n                            <button *ngFor=\"let filterAction of processFilterActions\" mat-icon-button matTooltip=\"{{ filterAction.tooltip | translate}}\" [attr.data-automation-id]=\"'adf-filter-action-' + filterAction.actionType\" [disabled]=\"isDisabledAction(filterAction)\" (click)=\"executeFilterActions(filterAction)\">\n                                <adf-icon [value]=\"filterAction.icon\"></adf-icon>\n                            </button>\n                        </ng-container>\n                    </div>\n                </mat-panel-description>\n            </ng-container>\n            <ng-template #loadingTemplate>\n                <div class=\"adf-cloud-edit-process-filter-loading-margin\">\n                    <mat-spinner [diameter]=\"30\"></mat-spinner>\n                </div>\n            </ng-template>\n        </mat-expansion-panel-header>\n        <ng-container *ngIf=\"!isLoading\">\n            <form [formGroup]=\"editProcessFilterForm\" *ngIf=\"editProcessFilterForm\">\n                <div fxLayout=\"row wrap\" fxLayout.xs=\"column\" fxLayoutGap=\"10px\" fxLayoutAlign=\"start center\">\n                    <ng-container *ngFor=\"let processFilterProperty of processFilterProperties\">\n                        <mat-form-field [floatLabel]=\"'auto'\" fxFlex=\"23%\" *ngIf=\"processFilterProperty.type === 'select'\" [attr.data-automation-id]=\"processFilterProperty.key\">\n                            <mat-select\n                                placeholder=\"{{processFilterProperty.label | translate}}\"\n                                [formControlName]=\"processFilterProperty.key\"\n                                [attr.data-automation-id]=\"'adf-cloud-edit-process-property-' + processFilterProperty.key\">\n                                <mat-option\n                                    *ngFor=\"let propertyOption of processFilterProperty.options\"\n                                    [value]=\"propertyOption.value\"\n                                    [attr.data-automation-id]=\"'adf-cloud-edit-process-property-options-' + processFilterProperty.key\"\n                                >{{ propertyOption.label | translate }}</mat-option>\n                            </mat-select>\n                        </mat-form-field>\n                        <mat-form-field [floatLabel]=\"'auto'\" fxFlex=\"23%\" *ngIf=\"processFilterProperty.type === 'multi-select'\" [attr.data-automation-id]=\"processFilterProperty.key\">\n                            <mat-select\n                                placeholder=\"{{processFilterProperty.label | translate}}\"\n                                [formControlName]=\"processFilterProperty.key\"\n                                [attr.data-automation-id]=\"'adf-cloud-edit-process-property-' + processFilterProperty.key\"\n                                [multiple]=\"true\">\n                                <mat-option *ngFor=\"let propertyOption of processFilterProperty.options\" [value]=\"propertyOption.value\" [attr.data-automation-id]=\"'adf-cloud-edit-process-property-options-' + processFilterProperty.key\">\n                                    {{ propertyOption.label | translate }}\n                                </mat-option>\n                            </mat-select>\n                        </mat-form-field>\n                        <mat-form-field [floatLabel]=\"'auto'\" fxFlex=\"23%\" *ngIf=\"processFilterProperty.type === 'text'\" [attr.data-automation-id]=\"processFilterProperty.key\">\n                            <input matInput\n                                [formControlName]=\"processFilterProperty.key\"\n                                type=\"text\"\n                                placeholder=\"{{processFilterProperty.label | translate}}\"\n                                [attr.data-automation-id]=\"'adf-cloud-edit-process-property-' + processFilterProperty.key\"/>\n                        </mat-form-field>\n                        <mat-form-field [floatLabel]=\"'auto'\" fxFlex=\"23%\" *ngIf=\"processFilterProperty.type === 'number'\" [attr.data-automation-id]=\"processFilterProperty.key\">\n                            <input matInput\n                                [formControlName]=\"processFilterProperty.key\"\n                                type=\"number\" min=\"0\"\n                                placeholder=\"{{processFilterProperty.label | translate}}\"\n                                [attr.data-automation-id]=\"'adf-cloud-edit-process-property-' + processFilterProperty.key\"/>\n                        </mat-form-field>\n                        <mat-form-field [floatLabel]=\"'auto'\" fxFlex=\"23%\" *ngIf=\"processFilterProperty.type === 'date'\" [attr.data-automation-id]=\"processFilterProperty.key\">\n                            <mat-label>{{processFilterProperty.label | translate}}</mat-label>\n                            <input\n                                matInput\n                                [formControlName]=\"processFilterProperty.key\"\n                                (keyup)=\"onDateChanged($any($event).srcElement.value, processFilterProperty)\"\n                                (dateChange)=\"onDateChanged($event.value, processFilterProperty)\"\n                                [matDatepicker]=\"dateController\"\n                                placeholder=\"{{processFilterProperty.label | translate}}\"\n                                [attr.data-automation-id]=\"'adf-cloud-edit-process-property-' + processFilterProperty.key\">\n                        <mat-datepicker-toggle matSuffix [for]=\"dateController\" [attr.data-automation-id]=\"'adf-cloud-edit-process-property-date-toggle-' + processFilterProperty.key\"></mat-datepicker-toggle>\n                        <mat-datepicker #dateController [attr.data-automation-id]=\"'adf-cloud-edit-process-property-date-picker-' + processFilterProperty.key\"></mat-datepicker>\n                        <div class=\"adf-edit-process-filter-date-error-container\">\n                            <div *ngIf=\"hasError(processFilterProperty)\">\n                                <div class=\"adf-error-text\">{{'ADF_CLOUD_EDIT_PROCESS_FILTER.ERROR.DATE' | translate}}</div>\n                                <mat-icon class=\"adf-error-icon\">warning</mat-icon>\n                            </div>\n                        </div>\n                        </mat-form-field>\n\n                        <adf-cloud-date-range-filter *ngIf=\"processFilterProperty.type === 'date-range'\"\n                            [processFilterProperty]=\"processFilterProperty\"\n                            [options]=\"processFilterProperty.dateFilterOptions\"\n                            (dateTypeChange)=\"onDateTypeChange($event, processFilterProperty)\"\n                            (dateChanged)=\"onDateRangeFilterChanged($event, processFilterProperty)\"></adf-cloud-date-range-filter>\n\n                        <div fxFlex=\"23%\" *ngIf=\"processFilterProperty.type === 'people'\">\n                            <adf-cloud-people\n                                [preSelectUsers]=\"initiatorOptions\"\n                                [title]=\"processFilterProperty.label\"\n                                [validate]=\"true\"\n                                [appName]=\"appName\"\n                                [mode]=\"processFilterProperty.selectionMode\"\n                                (changedUsers)=\"onChangedUser($event, processFilterProperty)\"></adf-cloud-people>\n                        </div>\n                    </ng-container>\n                </div>\n            </form>\n        </ng-container>\n    </mat-expansion-panel>\n</mat-accordion>\n",
                encapsulation: ViewEncapsulation.None,
                styles: [".adf-edit-process-filter-date-error-container{height:20px;margin-top:12px;position:absolute;width:100%}.adf-edit-process-filter-date-error-container>div{display:flex;flex-flow:row;justify-content:flex-start}.adf-edit-process-filter-date-error-container .adf-error-text{color:var(--theme-warn-color);font-size:11px;height:16px;line-height:1.33;padding-right:8px;width:auto}.adf-edit-process-filter-date-error-container .adf-error-icon{color:var(--theme-warn-color);font-size:16px}.adf-cloud-edit-process-filter-loading-margin{margin-left:calc(50% - 50px);margin-right:calc(50% - 50px)}"]
            }]
    }], function () { return [{ type: ɵngcc17.FormBuilder }, { type: ɵngcc23.MatDialog }, { type: ɵngcc8.DateAdapter }, { type: ɵngcc6.UserPreferencesService }, { type: ɵngcc6.TranslationService }, { type: ProcessFilterCloudService }, { type: AppsProcessCloudService }, { type: ProcessCloudService }]; }, { appName: [{
            type: Input
        }], role: [{
            type: Input
        }], filterProperties: [{
            type: Input
        }], sortProperties: [{
            type: Input
        }], actions: [{
            type: Input
        }], showFilterActions: [{
            type: Input
        }], showTitle: [{
            type: Input
        }], showProcessFilterName: [{
            type: Input
        }], filterChange: [{
            type: Output
        }], action: [{
            type: Output
        }], processFilter: [{
            type: Input
        }], id: [{
            type: Input
        }] }); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const ɵ0$4 = MOMENT_DATE_FORMATS;
class ProcessFiltersCloudModule {
}
ProcessFiltersCloudModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: ProcessFiltersCloudModule });
ProcessFiltersCloudModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function ProcessFiltersCloudModule_Factory(t) { return new (t || ProcessFiltersCloudModule)(); }, providers: [
        { provide: DateAdapter, useClass: MomentDateAdapter },
        { provide: MAT_DATE_FORMATS, useValue: ɵ0$4 }
    ], imports: [[
            FormsModule,
            ReactiveFormsModule,
            HttpClientModule,
            CommonModule,
            FlexLayoutModule,
            MaterialModule,
            AppListCloudModule,
            CoreModule,
            ProcessCommonModule,
            PeopleCloudModule
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ProcessFiltersCloudModule, { declarations: function () { return [ProcessFiltersCloudComponent, EditProcessFilterCloudComponent, ProcessFilterDialogCloudComponent]; }, imports: function () { return [FormsModule,
        ReactiveFormsModule,
        HttpClientModule,
        CommonModule,
        FlexLayoutModule, MaterialModule, AppListCloudModule, CoreModule, ProcessCommonModule, PeopleCloudModule]; }, exports: function () { return [ProcessFiltersCloudComponent, EditProcessFilterCloudComponent, ProcessFilterDialogCloudComponent]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ProcessFiltersCloudModule, [{
        type: NgModule,
        args: [{
                imports: [
                    FormsModule,
                    ReactiveFormsModule,
                    HttpClientModule,
                    CommonModule,
                    FlexLayoutModule,
                    MaterialModule,
                    AppListCloudModule,
                    CoreModule,
                    ProcessCommonModule,
                    PeopleCloudModule
                ],
                declarations: [ProcessFiltersCloudComponent, EditProcessFilterCloudComponent, ProcessFilterDialogCloudComponent],
                exports: [ProcessFiltersCloudComponent, EditProcessFilterCloudComponent, ProcessFilterDialogCloudComponent],
                providers: [
                    { provide: DateAdapter, useClass: MomentDateAdapter },
                    { provide: MAT_DATE_FORMATS, useValue: ɵ0$4 }
                ]
            }]
    }], null, null); })();

class ProcessListCloudService extends BaseCloudService {
    constructor(apiService, appConfigService, logService) {
        super(apiService, appConfigService);
        this.logService = logService;
    }
    getProcessByRequest(requestNode, queryUrl) {
        if (requestNode.appName || requestNode.appName === '') {
            queryUrl = queryUrl || `${this.getBasePath(requestNode.appName)}/query/v1/process-instances`;
            const queryParams = this.buildQueryParams(requestNode);
            const sortingParams = this.buildSortingParam(requestNode.sorting);
            if (sortingParams) {
                queryParams['sort'] = sortingParams;
            }
            return this.get(queryUrl, queryParams).pipe(map((response) => {
                const entries = response.list && response.list.entries;
                if (entries) {
                    response.list.entries = entries.map((entryData) => {
                        return entryData.entry;
                    });
                }
                return response;
            }));
        }
        else {
            this.logService.error('Appname is mandatory for querying task');
            return throwError('Appname not configured');
        }
    }
    isPropertyValueValid(requestNode, property) {
        return requestNode[property] !== '' && requestNode[property] !== null && requestNode[property] !== undefined;
    }
    buildQueryParams(requestNode) {
        const queryParam = {};
        for (const property in requestNode) {
            if (requestNode.hasOwnProperty(property) &&
                !this.isExcludedField(property) &&
                this.isPropertyValueValid(requestNode, property)) {
                queryParam[property] = requestNode[property];
            }
        }
        if (!queryParam['status']) {
            queryParam['status'] = this.buildFilterForAllStatus();
        }
        return queryParam;
    }
    buildFilterForAllStatus() {
        return ['RUNNING', 'SUSPENDED', 'CANCELLED', 'COMPLETED'];
    }
    isExcludedField(property) {
        return property === 'appName' || property === 'sorting';
    }
    buildSortingParam(models) {
        let finalSorting = '';
        if (models) {
            for (const sort of models) {
                if (!finalSorting) {
                    finalSorting = `${sort.orderBy},${sort.direction}`;
                }
                else {
                    finalSorting = `${finalSorting}&${sort.orderBy},${sort.direction}`;
                }
            }
        }
        return encodeURI(finalSorting);
    }
}
ProcessListCloudService.ɵfac = function ProcessListCloudService_Factory(t) { return new (t || ProcessListCloudService)(ɵngcc0.ɵɵinject(ɵngcc6.AlfrescoApiService), ɵngcc0.ɵɵinject(ɵngcc6.AppConfigService), ɵngcc0.ɵɵinject(ɵngcc6.LogService)); };
ProcessListCloudService.ɵprov = ɵɵdefineInjectable({ factory: function ProcessListCloudService_Factory() { return new ProcessListCloudService(ɵɵinject(AlfrescoApiService), ɵɵinject(AppConfigService), ɵɵinject(LogService)); }, token: ProcessListCloudService, providedIn: "root" });
ProcessListCloudService.ctorParameters = () => [
    { type: AlfrescoApiService },
    { type: AppConfigService },
    { type: LogService }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ProcessListCloudService, [{
        type: Injectable,
        args: [{ providedIn: 'root' }]
    }], function () { return [{ type: ɵngcc6.AlfrescoApiService }, { type: ɵngcc6.AppConfigService }, { type: ɵngcc6.LogService }]; }, null); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
let processCloudPresetsDefaultModel = {
    'default': [
        {
            'key': 'name',
            'type': 'text',
            'title': 'ADF_CLOUD_PROCESS_LIST.PROPERTIES.NAME',
            'sortable': true
        },
        {
            'key': 'startDate',
            'type': 'date',
            'title': 'ADF_CLOUD_PROCESS_LIST.PROPERTIES.START_DATE',
            'cssClass': 'hidden',
            'sortable': true,
            'format': 'timeAgo'
        }
    ]
};

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class ProcessQueryCloudRequestModel {
    constructor(obj) {
        if (obj) {
            this.appName = obj.appName;
            this.appVersion = obj.appVersion;
            this.initiator = obj.initiator;
            this.id = obj.id;
            this.name = obj.name;
            this.processDefinitionId = obj.processDefinitionId;
            this.processDefinitionName = obj.processDefinitionName;
            this.processDefinitionKey = obj.processDefinitionKey;
            this.status = obj.status;
            this.startDate = obj.startDate;
            this.businessKey = obj.businessKey;
            this.lastModified = obj.lastModified;
            this.lastModifiedTo = obj.lastModifiedTo;
            this.lastModifiedFrom = obj.lastModifiedFrom;
            this.startFrom = obj.startFrom;
            this.startTo = obj.startTo;
            this.completedFrom = obj.completedFrom;
            this.completedTo = obj.completedTo;
            this.suspendedFrom = obj.suspendedFrom;
            this.suspendedTo = obj.suspendedTo;
            this.completedDate = obj.completedDate;
            this.maxItems = obj.maxItems;
            this.skipCount = obj.skipCount;
            this.sorting = obj.sorting;
        }
    }
}

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class ProcessListCloudSortingModel {
    constructor(obj) {
        if (obj) {
            this.orderBy = obj.orderBy;
            this.direction = obj.direction;
        }
    }
}

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class ProcessListCloudComponent extends DataTableSchema {
    constructor(processListCloudService, appConfigService, userPreferences) {
        super(appConfigService, ProcessListCloudComponent.PRESET_KEY, processCloudPresetsDefaultModel);
        this.processListCloudService = processListCloudService;
        this.userPreferences = userPreferences;
        this.appName = '';
        this.initiator = '';
        this.id = '';
        this.name = '';
        this.processDefinitionId = '';
        this.processDefinitionName = '';
        this.processDefinitionKey = '';
        this.status = '';
        this.businessKey = '';
        this.startFrom = '';
        this.startTo = '';
        this.completedFrom = '';
        this.completedTo = '';
        this.completedDate = '';
        this.suspendedFrom = '';
        this.suspendedTo = '';
        this.selectionMode = 'single';
        this.multiselect = false;
        this.showActions = false;
        this.actionsPosition = 'right';
        this.stickyHeader = false;
        this.showContextMenu = false;
        this.rowClick = new EventEmitter();
        this.rowsSelected = new EventEmitter();
        this.showRowContextMenu = new EventEmitter();
        this.showRowActionsMenu = new EventEmitter();
        this.executeRowAction = new EventEmitter();
        this.error = new EventEmitter();
        this.success = new EventEmitter();
        this.skipCount = 0;
        this.isLoading = true;
        this.rows = [];
        this.defaultSorting = { key: 'startDate', direction: 'desc' };
        this.size = userPreferences.paginationSize;
        this.userPreferences.select(UserPreferenceValues.PaginationSize).subscribe((pageSize) => {
            this.size = pageSize;
        });
        this.pagination = new BehaviorSubject({
            maxItems: this.size,
            skipCount: 0,
            totalItems: 0
        });
    }
    ngAfterContentInit() {
        this.createDatatableSchema();
    }
    ngOnChanges(changes) {
        if (this.isPropertyChanged(changes, 'sorting')) {
            this.formatSorting(changes['sorting'].currentValue);
        }
        if (this.isAnyPropertyChanged(changes)) {
            this.reload();
        }
    }
    getCurrentId() {
        return this.currentInstanceId;
    }
    reload() {
        this.requestNode = this.createRequestNode();
        if (this.requestNode.appName || this.requestNode.appName === '') {
            this.load(this.requestNode);
        }
        else {
            this.rows = [];
        }
    }
    load(requestNode) {
        this.isLoading = true;
        this.processListCloudService.getProcessByRequest(requestNode).subscribe((processes) => {
            this.rows = processes.list.entries;
            this.success.emit(processes);
            this.isLoading = false;
            this.pagination.next(processes.list.pagination);
        }, (error) => {
            this.error.emit(error);
            this.isLoading = false;
        });
    }
    isAnyPropertyChanged(changes) {
        for (const property in changes) {
            if (this.isPropertyChanged(changes, property)) {
                return true;
            }
        }
        return false;
    }
    isPropertyChanged(changes, property) {
        return changes.hasOwnProperty(property);
    }
    isListEmpty() {
        return !this.rows || this.rows.length === 0;
    }
    resetPagination() {
        this.skipCount = 0;
        this.size = this.userPreferences.paginationSize;
        this.pagination.next({
            skipCount: 0,
            maxItems: this.size
        });
    }
    updatePagination(pagination) {
        this.size = pagination.maxItems;
        this.skipCount = pagination.skipCount;
        this.pagination.next(pagination);
        this.reload();
    }
    onSortingChanged(event) {
        this.setSorting(event.detail);
        this.formatSorting(this.sorting);
        this.reload();
    }
    onRowClick(item) {
        this.currentInstanceId = item.value.getValue('id');
        this.rowClick.emit(this.currentInstanceId);
    }
    onRowSelect(event) {
        this.selectedInstances = [...event.detail.selection];
        this.rowsSelected.emit(this.selectedInstances);
    }
    onRowUnselect(event) {
        this.selectedInstances = [...event.detail.selection];
        this.rowsSelected.emit(this.selectedInstances);
    }
    onRowKeyUp(event) {
        if (event.detail.keyboardEvent.key === 'Enter') {
            event.preventDefault();
            this.currentInstanceId = event.detail.row.getValue('id');
            this.rowClick.emit(this.currentInstanceId);
        }
    }
    onShowRowActionsMenu(event) {
        this.showRowActionsMenu.emit(event);
    }
    onShowRowContextMenu(event) {
        this.showRowContextMenu.emit(event);
    }
    onExecuteRowAction(row) {
        this.executeRowAction.emit(row);
    }
    createRequestNode() {
        const requestNode = {
            appName: this.appName,
            appVersion: this.getAppVersions(),
            maxItems: this.size,
            skipCount: this.skipCount,
            initiator: this.initiator,
            id: this.id,
            name: this.name,
            processDefinitionId: this.processDefinitionId,
            processDefinitionName: this.processDefinitionName,
            processDefinitionKey: this.processDefinitionKey,
            status: this.status,
            businessKey: this.businessKey,
            lastModifiedFrom: this.lastModifiedFrom,
            lastModifiedTo: this.lastModifiedTo,
            startFrom: this.startFrom,
            startTo: this.startTo,
            completedFrom: this.completedFrom,
            completedTo: this.completedTo,
            suspendedFrom: this.suspendedFrom,
            suspendedTo: this.suspendedTo,
            completedDate: this.completedDate,
            sorting: this.sorting
        };
        return new ProcessQueryCloudRequestModel(requestNode);
    }
    getAppVersions() {
        return this.appVersion instanceof Array ? this.appVersion.join(',') : (this.appVersion ? String(this.appVersion) : '');
    }
    setSorting(sortDetail) {
        const sorting = sortDetail ? {
            orderBy: sortDetail.key,
            direction: sortDetail.direction.toUpperCase()
        } : Object.assign({}, this.defaultSorting);
        this.sorting = [new ProcessListCloudSortingModel(sorting)];
    }
    formatSorting(sorting) {
        this.formattedSorting = this.isValidSorting(sorting) ? [
            sorting[0].orderBy,
            sorting[0].direction.toLocaleLowerCase()
        ] : null;
    }
    isValidSorting(sorting) {
        return sorting.length && sorting[0].orderBy && sorting[0].direction;
    }
}
ProcessListCloudComponent.ɵfac = function ProcessListCloudComponent_Factory(t) { return new (t || ProcessListCloudComponent)(ɵngcc0.ɵɵdirectiveInject(ProcessListCloudService), ɵngcc0.ɵɵdirectiveInject(ɵngcc6.AppConfigService), ɵngcc0.ɵɵdirectiveInject(ɵngcc6.UserPreferencesService)); };
ProcessListCloudComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ProcessListCloudComponent, selectors: [["adf-cloud-process-list"]], contentQueries: function ProcessListCloudComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, CustomEmptyContentTemplateDirective, true);
        ɵngcc0.ɵɵcontentQuery(dirIndex, CustomLoadingContentTemplateDirective, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.emptyCustomContent = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.customLoadingContent = _t.first);
    } }, viewQuery: function ProcessListCloudComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(DataTableComponent, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.dataTable = _t.first);
    } }, inputs: { appName: "appName", initiator: "initiator", id: "id", name: "name", processDefinitionId: "processDefinitionId", processDefinitionName: "processDefinitionName", processDefinitionKey: "processDefinitionKey", status: "status", businessKey: "businessKey", startFrom: "startFrom", startTo: "startTo", completedFrom: "completedFrom", completedTo: "completedTo", completedDate: "completedDate", suspendedFrom: "suspendedFrom", suspendedTo: "suspendedTo", selectionMode: "selectionMode", multiselect: "multiselect", showActions: "showActions", actionsPosition: "actionsPosition", stickyHeader: "stickyHeader", showContextMenu: "showContextMenu", sorting: "sorting", appVersion: "appVersion", lastModifiedFrom: "lastModifiedFrom", lastModifiedTo: "lastModifiedTo" }, outputs: { rowClick: "rowClick", rowsSelected: "rowsSelected", showRowContextMenu: "showRowContextMenu", showRowActionsMenu: "showRowActionsMenu", executeRowAction: "executeRowAction", error: "error", success: "success" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature], ngContentSelectors: _c22, decls: 6, vars: 10, consts: [[3, "rows", "columns", "stickyHeader", "loading", "sorting", "selectionMode", "multiselect", "actions", "actionsPosition", "contextMenu", "showRowActionsMenu", "showRowContextMenu", "executeRowAction", "rowClick", "row-select", "row-unselect", "row-keyup", "sorting-changed"], ["dataTable", ""], ["class", "adf-cloud-process-list-loading-margin", 3, "color", "mode", 4, "ngIf"], [1, "adf-cloud-process-list-loading-margin", 3, "color", "mode"], ["icon", "assessment", 3, "title", "subtitle", 4, "ngIf"], ["icon", "assessment", 3, "title", "subtitle"]], template: function ProcessListCloudComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef(_c21);
        ɵngcc0.ɵɵelementStart(0, "adf-datatable", 0, 1);
        ɵngcc0.ɵɵlistener("showRowActionsMenu", function ProcessListCloudComponent_Template_adf_datatable_showRowActionsMenu_0_listener($event) { return ctx.onShowRowActionsMenu($event); })("showRowContextMenu", function ProcessListCloudComponent_Template_adf_datatable_showRowContextMenu_0_listener($event) { return ctx.onShowRowContextMenu($event); })("executeRowAction", function ProcessListCloudComponent_Template_adf_datatable_executeRowAction_0_listener($event) { return ctx.onExecuteRowAction($event); })("rowClick", function ProcessListCloudComponent_Template_adf_datatable_rowClick_0_listener($event) { return ctx.onRowClick($event); })("row-select", function ProcessListCloudComponent_Template_adf_datatable_row_select_0_listener($event) { return ctx.onRowSelect($event); })("row-unselect", function ProcessListCloudComponent_Template_adf_datatable_row_unselect_0_listener($event) { return ctx.onRowUnselect($event); })("row-keyup", function ProcessListCloudComponent_Template_adf_datatable_row_keyup_0_listener($event) { return ctx.onRowKeyUp($event); })("sorting-changed", function ProcessListCloudComponent_Template_adf_datatable_sorting_changed_0_listener($event) { return ctx.onSortingChanged($event); });
        ɵngcc0.ɵɵelementStart(2, "adf-loading-content-template");
        ɵngcc0.ɵɵtemplate(3, ProcessListCloudComponent_ng_template_3_Template, 2, 1, "ng-template");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(4, "adf-no-content-template");
        ɵngcc0.ɵɵtemplate(5, ProcessListCloudComponent_ng_template_5_Template, 2, 1, "ng-template");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("rows", ctx.rows)("columns", ctx.columns)("stickyHeader", ctx.stickyHeader)("loading", ctx.isLoading)("sorting", ctx.formattedSorting)("selectionMode", ctx.selectionMode)("multiselect", ctx.multiselect)("actions", ctx.showActions)("actionsPosition", ctx.actionsPosition)("contextMenu", ctx.showContextMenu);
    } }, directives: [ɵngcc6.DataTableComponent, ɵngcc6.LoadingContentTemplateDirective, ɵngcc6.NoContentTemplateDirective, ɵngcc3.NgIf, ɵngcc9.MatProgressSpinner, ɵngcc6.EmptyContentComponent], pipes: [ɵngcc10.TranslatePipe], styles: [".adf-cloud-process-list-loading-margin{margin-left:calc(50% - 50px);margin-right:calc(50% - 50px)}.adf-no-content-message{font-size:16px;font-weight:700;opacity:.54;text-align:center}"], encapsulation: 2 });
ProcessListCloudComponent.PRESET_KEY = 'adf-cloud-process-list.presets';
ProcessListCloudComponent.ctorParameters = () => [
    { type: ProcessListCloudService },
    { type: AppConfigService },
    { type: UserPreferencesService }
];
ProcessListCloudComponent.propDecorators = {
    dataTable: [{ type: ViewChild, args: [DataTableComponent,] }],
    emptyCustomContent: [{ type: ContentChild, args: [CustomEmptyContentTemplateDirective,] }],
    customLoadingContent: [{ type: ContentChild, args: [CustomLoadingContentTemplateDirective,] }],
    appName: [{ type: Input }],
    appVersion: [{ type: Input }],
    initiator: [{ type: Input }],
    id: [{ type: Input }],
    name: [{ type: Input }],
    processDefinitionId: [{ type: Input }],
    processDefinitionName: [{ type: Input }],
    processDefinitionKey: [{ type: Input }],
    status: [{ type: Input }],
    businessKey: [{ type: Input }],
    lastModifiedFrom: [{ type: Input }],
    lastModifiedTo: [{ type: Input }],
    startFrom: [{ type: Input }],
    startTo: [{ type: Input }],
    completedFrom: [{ type: Input }],
    completedTo: [{ type: Input }],
    completedDate: [{ type: Input }],
    suspendedFrom: [{ type: Input }],
    suspendedTo: [{ type: Input }],
    selectionMode: [{ type: Input }],
    multiselect: [{ type: Input }],
    sorting: [{ type: Input }],
    showActions: [{ type: Input }],
    actionsPosition: [{ type: Input }],
    stickyHeader: [{ type: Input }],
    showContextMenu: [{ type: Input }],
    rowClick: [{ type: Output }],
    rowsSelected: [{ type: Output }],
    showRowContextMenu: [{ type: Output }],
    showRowActionsMenu: [{ type: Output }],
    executeRowAction: [{ type: Output }],
    error: [{ type: Output }],
    success: [{ type: Output }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ProcessListCloudComponent, [{
        type: Component,
        args: [{
                selector: 'adf-cloud-process-list',
                template: "<adf-datatable #dataTable\n        [rows]=\"rows\"\n        [columns]=\"columns\"\n        [stickyHeader]=\"stickyHeader\"\n        [loading]=\"isLoading\"\n        [sorting]=\"formattedSorting\"\n        [selectionMode]=\"selectionMode\"\n        [multiselect]=\"multiselect\"\n        [actions]=\"showActions\"\n        [actionsPosition]=\"actionsPosition\"\n        [contextMenu]=\"showContextMenu\"\n        (showRowActionsMenu)=\"onShowRowActionsMenu($event)\"\n        (showRowContextMenu)=\"onShowRowContextMenu($event)\"\n        (executeRowAction)=\"onExecuteRowAction($event)\"\n        (rowClick)=\"onRowClick($any($event))\"\n        (row-select)=\"onRowSelect($any($event))\"\n        (row-unselect)=\"onRowUnselect($any($event))\"\n        (row-keyup)=\"onRowKeyUp($any($event))\"\n        (sorting-changed)=\"onSortingChanged($any($event))\">\n        <adf-loading-content-template>\n            <ng-template>\n                <mat-progress-spinner\n                    *ngIf=\"!customLoadingContent\"\n                    class=\"adf-cloud-process-list-loading-margin\"\n                    [color]=\"'primary'\"\n                    [mode]=\"'indeterminate'\">\n                </mat-progress-spinner>\n                <ng-content select=\"adf-custom-loading-content-template\"></ng-content>\n            </ng-template>\n        </adf-loading-content-template>\n        <adf-no-content-template>\n            <ng-template>\n                <adf-empty-content *ngIf=\"!emptyCustomContent\"\n                    icon=\"assessment\"\n                    [title]=\"'ADF_CLOUD_PROCESS_LIST.MESSAGES.TITLE' | translate\"\n                    [subtitle]=\"'ADF_CLOUD_PROCESS_LIST.MESSAGES.SUBTITLE'| translate\">\n                </adf-empty-content>\n                <ng-content select=\"adf-custom-empty-content-template\"></ng-content>\n            </ng-template>\n        </adf-no-content-template>\n</adf-datatable>\n",
                encapsulation: ViewEncapsulation.None,
                styles: [".adf-cloud-process-list-loading-margin{margin-left:calc(50% - 50px);margin-right:calc(50% - 50px)}.adf-no-content-message{font-size:16px;font-weight:700;opacity:.54;text-align:center}"]
            }]
    }], function () { return [{ type: ProcessListCloudService }, { type: ɵngcc6.AppConfigService }, { type: ɵngcc6.UserPreferencesService }]; }, { appName: [{
            type: Input
        }], initiator: [{
            type: Input
        }], id: [{
            type: Input
        }], name: [{
            type: Input
        }], processDefinitionId: [{
            type: Input
        }], processDefinitionName: [{
            type: Input
        }], processDefinitionKey: [{
            type: Input
        }], status: [{
            type: Input
        }], businessKey: [{
            type: Input
        }], startFrom: [{
            type: Input
        }], startTo: [{
            type: Input
        }], completedFrom: [{
            type: Input
        }], completedTo: [{
            type: Input
        }], completedDate: [{
            type: Input
        }], suspendedFrom: [{
            type: Input
        }], suspendedTo: [{
            type: Input
        }], selectionMode: [{
            type: Input
        }], multiselect: [{
            type: Input
        }], showActions: [{
            type: Input
        }], actionsPosition: [{
            type: Input
        }], stickyHeader: [{
            type: Input
        }], showContextMenu: [{
            type: Input
        }], rowClick: [{
            type: Output
        }], rowsSelected: [{
            type: Output
        }], showRowContextMenu: [{
            type: Output
        }], showRowActionsMenu: [{
            type: Output
        }], executeRowAction: [{
            type: Output
        }], error: [{
            type: Output
        }], success: [{
            type: Output
        }], sorting: [{
            type: Input
        }], dataTable: [{
            type: ViewChild,
            args: [DataTableComponent]
        }], emptyCustomContent: [{
            type: ContentChild,
            args: [CustomEmptyContentTemplateDirective]
        }], customLoadingContent: [{
            type: ContentChild,
            args: [CustomLoadingContentTemplateDirective]
        }], appVersion: [{
            type: Input
        }], lastModifiedFrom: [{
            type: Input
        }], lastModifiedTo: [{
            type: Input
        }] }); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class ProcessListCloudModule {
}
ProcessListCloudModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: ProcessListCloudModule });
ProcessListCloudModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function ProcessListCloudModule_Factory(t) { return new (t || ProcessListCloudModule)(); }, imports: [[
            CommonModule,
            MaterialModule,
            CoreModule
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ProcessListCloudModule, { declarations: function () { return [ProcessListCloudComponent]; }, imports: function () { return [CommonModule, MaterialModule, CoreModule]; }, exports: function () { return [ProcessListCloudComponent]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ProcessListCloudModule, [{
        type: NgModule,
        args: [{
                imports: [
                    CommonModule,
                    MaterialModule,
                    CoreModule
                ],
                declarations: [ProcessListCloudComponent],
                exports: [ProcessListCloudComponent]
            }]
    }], null, null); })();

class StartProcessCloudService extends BaseCloudService {
    constructor(apiService, logService, appConfigService) {
        super(apiService, appConfigService);
        this.logService = logService;
    }
    getProcessDefinitions(appName) {
        if (appName || appName === '') {
            const url = `${this.getBasePath(appName)}/rb/v1/process-definitions`;
            return this.get(url).pipe(map((res) => {
                return res.list.entries.map((processDefs) => new ProcessDefinitionCloud(processDefs.entry));
            }));
        }
        else {
            this.logService.error('AppName is mandatory for querying task');
            return throwError('AppName not configured');
        }
    }
    createProcess(appName, payload) {
        const url = `${this.getBasePath(appName)}/rb/v1/process-instances/create`;
        payload.payloadType = 'CreateProcessInstancePayload';
        return this.post(url, payload).pipe(map((result) => result.entry));
    }
    startCreatedProcess(appName, createdProcessInstanceId, payload) {
        const url = `${this.getBasePath(appName)}/rb/v1/process-instances/${createdProcessInstanceId}/start`;
        return this.post(url, payload).pipe(map((result) => result.entry));
    }
    startProcess(appName, payload) {
        const url = `${this.getBasePath(appName)}/rb/v1/process-instances`;
        payload.payloadType = 'StartProcessPayload';
        return this.post(url, payload);
    }
    updateProcess(appName, processInstanceId, payload) {
        const url = `${this.getBasePath(appName)}/rb/v1/process-instances/${processInstanceId}`;
        payload.payloadType = 'UpdateProcessPayload';
        return this.put(url, payload).pipe(map((processInstance) => processInstance.entry));
    }
    deleteProcess(appName, processInstanceId) {
        const url = `${this.getBasePath(appName)}/rb/v1/process-instances/${processInstanceId}`;
        return this.delete(url);
    }
}
StartProcessCloudService.ɵfac = function StartProcessCloudService_Factory(t) { return new (t || StartProcessCloudService)(ɵngcc0.ɵɵinject(ɵngcc6.AlfrescoApiService), ɵngcc0.ɵɵinject(ɵngcc6.LogService), ɵngcc0.ɵɵinject(ɵngcc6.AppConfigService)); };
StartProcessCloudService.ɵprov = ɵɵdefineInjectable({ factory: function StartProcessCloudService_Factory() { return new StartProcessCloudService(ɵɵinject(AlfrescoApiService), ɵɵinject(LogService), ɵɵinject(AppConfigService)); }, token: StartProcessCloudService, providedIn: "root" });
StartProcessCloudService.ctorParameters = () => [
    { type: AlfrescoApiService },
    { type: LogService },
    { type: AppConfigService }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(StartProcessCloudService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc6.AlfrescoApiService }, { type: ɵngcc6.LogService }, { type: ɵngcc6.AppConfigService }]; }, null); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class ProcessPayloadCloud {
    constructor(obj) {
        this.payloadType = 'StartProcessPayload';
        this.processDefinitionKey = obj && obj.processDefinitionKey ? obj.processDefinitionKey : null;
        this.name = obj && obj.name ? obj.name : null;
        this.businessKey = obj && obj.businessKey ? obj.businessKey : null;
        this.variables = obj && obj.variables ? obj.variables : {};
    }
}

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class ProcessNameCloudPipe {
    constructor(localizedDatePipe) {
        this.localizedDatePipe = localizedDatePipe;
    }
    transform(processNameFormat, processInstance) {
        let processName = processNameFormat;
        if (processName.match(ProcessNameCloudPipe.DATE_TIME_IDENTIFIER_REG_EXP)) {
            const presentDateTime = moment.now();
            processName = processName.replace(ProcessNameCloudPipe.DATE_TIME_IDENTIFIER_REG_EXP, this.localizedDatePipe.transform(presentDateTime, 'medium'));
        }
        if (processName.match(ProcessNameCloudPipe.PROCESS_DEFINITION_IDENTIFIER_REG_EXP)) {
            const selectedProcessDefinitionName = processInstance ? processInstance.processDefinitionName : '';
            processName = processName.replace(ProcessNameCloudPipe.PROCESS_DEFINITION_IDENTIFIER_REG_EXP, selectedProcessDefinitionName);
        }
        return processName;
    }
}
ProcessNameCloudPipe.ɵfac = function ProcessNameCloudPipe_Factory(t) { return new (t || ProcessNameCloudPipe)(ɵngcc0.ɵɵdirectiveInject(ɵngcc6.LocalizedDatePipe)); };
ProcessNameCloudPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "processNameCloud", type: ProcessNameCloudPipe, pure: true });
ProcessNameCloudPipe.DATE_TIME_IDENTIFIER_REG_EXP = new RegExp('%{datetime}', 'i');
ProcessNameCloudPipe.PROCESS_DEFINITION_IDENTIFIER_REG_EXP = new RegExp('%{processdefinition}', 'i');
ProcessNameCloudPipe.ctorParameters = () => [
    { type: LocalizedDatePipe }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ProcessNameCloudPipe, [{
        type: Pipe,
        args: [{ name: 'processNameCloud' }]
    }], function () { return [{ type: ɵngcc6.LocalizedDatePipe }]; }, null); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class StartProcessCloudComponent {
    constructor(startProcessCloudService, formBuilder, processNameCloudPipe) {
        this.startProcessCloudService = startProcessCloudService;
        this.formBuilder = formBuilder;
        this.processNameCloudPipe = processNameCloudPipe;
        this.appName = '';
        this.maxNameLength = StartProcessCloudComponent.MAX_NAME_LENGTH;
        this.name = '';
        this.showSelectProcessDropdown = true;
        this.success = new EventEmitter();
        this.cancel = new EventEmitter();
        this.error = new EventEmitter();
        this.formContentClicked = new EventEmitter();
        this.processDefinitionSelection = new EventEmitter();
        this.processDefinitionList = [];
        this.errorMessageId = '';
        this.processPayloadCloud = new ProcessPayloadCloud();
        this.filteredProcesses = [];
        this.isLoading = false;
        this.isFormCloudLoaded = false;
        this.disableStartButton = true;
        this.onDestroy$ = new Subject();
        this.processDefinitionLoaded = false;
    }
    ngOnInit() {
        this.processForm = this.formBuilder.group({
            processInstanceName: new FormControl('', [Validators.required, Validators.maxLength(this.getMaxNameLength()), Validators.pattern('^[^\\s]+(\\s+[^\\s]+)*$')]),
            processDefinition: new FormControl(this.processDefinitionName, [Validators.required, this.processDefinitionNameValidator()])
        });
        this.processDefinition.valueChanges
            .pipe(debounceTime(StartProcessCloudComponent.PROCESS_DEFINITION_DEBOUNCE))
            .pipe(takeUntil(this.onDestroy$))
            .subscribe((processDefinitionName) => {
            this.selectProcessDefinitionByProcesDefinitionName(processDefinitionName);
        });
        this.processForm.valueChanges
            .pipe(debounceTime(StartProcessCloudComponent.PROCESS_FORM_DEBOUNCE), tap(() => this.disableStartButton = true), distinctUntilChanged(), filter(() => this.isProcessSelectionValid()), switchMap(() => this.generateProcessInstance())).pipe(takeUntil(this.onDestroy$))
            .subscribe((res) => {
            this.currentCreatedProcess = res;
            this.disableStartButton = false;
        });
        if (this.processDefinitionName) {
            this.processDefinition.setValue(this.processDefinitionName);
            this.processDefinition.markAsDirty();
            this.processDefinition.markAsTouched();
        }
    }
    ngOnChanges(changes) {
        if (changes['appName'] && changes['appName'].currentValue !== changes['appName'].previousValue) {
            this.appName = changes['appName'].currentValue;
            if (this.appName || this.appName === '') {
                this.loadProcessDefinitions();
            }
        }
    }
    onKeyDown(event) {
        event.cancelBubble = true;
    }
    hasForm() {
        return this.processDefinitionCurrent && !!this.processDefinitionCurrent.formKey;
    }
    onFormLoaded(form) {
        this.isFormCloudLoaded = true;
        this.formCloud = form;
    }
    isProcessSelectionValid() {
        return this.processForm.valid && this.isProcessPayloadValid();
    }
    getMaxNameLength() {
        return this.maxNameLength > StartProcessCloudComponent.MAX_NAME_LENGTH ?
            StartProcessCloudComponent.MAX_NAME_LENGTH : this.maxNameLength;
    }
    generateProcessInstance() {
        const createPayload = new ProcessPayloadCloud({
            name: this.processInstanceName.value,
            processDefinitionKey: this.processPayloadCloud.processDefinitionKey
        });
        if (this.currentCreatedProcess && this.processPayloadCloud.processDefinitionKey === this.currentCreatedProcess.processDefinitionKey) {
            return this.startProcessCloudService.updateProcess(this.appName, this.currentCreatedProcess.id, createPayload);
        }
        else {
            return this.startProcessCloudService.createProcess(this.appName, createPayload);
        }
    }
    selectProcessDefinitionByProcesDefinitionName(processDefinitionName) {
        this.filteredProcesses = this.getProcessDefinitionListByNameOrKey(processDefinitionName);
        if (this.isProcessFormValid() &&
            this.filteredProcesses && this.filteredProcesses.length === 1) {
            this.setProcessDefinitionOnForm(this.filteredProcesses[0].name);
        }
    }
    setProcessDefinitionOnForm(selectedProcessDefinitionName) {
        this.processDefinitionCurrent = this.filteredProcesses.find((process) => process.name === selectedProcessDefinitionName || process.key === selectedProcessDefinitionName);
        this.isFormCloudLoaded = false;
        this.processPayloadCloud.processDefinitionKey = this.processDefinitionCurrent.key;
    }
    getProcessDefinitionListByNameOrKey(processDefinitionName) {
        return this.processDefinitionList.filter((processDefinitionCloud) => {
            return !processDefinitionName || this.getProcessDefinition(processDefinitionCloud, processDefinitionName);
        });
    }
    getProcessIfExists(processDefinition) {
        let matchedProcess = this.processDefinitionList.find((option) => this.getProcessDefinition(option, processDefinition));
        if (!matchedProcess) {
            matchedProcess = new ProcessDefinitionCloud();
        }
        return matchedProcess;
    }
    getProcessDefinitionByName(processDefinitionName) {
        const matchedProcess = processDefinitionName ? this.getProcessIfExists(processDefinitionName) : this.processDefinitionList[0];
        return matchedProcess;
    }
    selectDefaultProcessDefinition() {
        const selectedProcess = this.getProcessDefinitionByName(this.processDefinitionName);
        if (selectedProcess) {
            this.processDefinition.setValue(selectedProcess.name);
            this.processDefinitionSelectionChanged(selectedProcess);
        }
    }
    loadProcessDefinitions() {
        this.resetErrorMessage();
        this.startProcessCloudService.getProcessDefinitions(this.appName)
            .pipe(tap(() => this.processDefinitionLoaded = true), takeUntil(this.onDestroy$))
            .subscribe((processDefinitionRepresentations) => {
            this.processDefinitionList = processDefinitionRepresentations;
            if (processDefinitionRepresentations.length === 1) {
                this.selectDefaultProcessDefinition();
            }
            else if (this.processDefinitionName) {
                this.processDefinition.setValue(this.processDefinitionName);
            }
        }, () => {
            this.errorMessageId = 'ADF_CLOUD_PROCESS_LIST.ADF_CLOUD_START_PROCESS.ERROR.LOAD_PROCESS_DEFS';
        });
    }
    isValidName(name) {
        return !!name;
    }
    isProcessFormValid() {
        if (this.hasForm() && this.isFormCloudLoaded) {
            return this.formCloud.isValid || this.isLoading;
        }
        else {
            return this.processForm.valid || this.isLoading;
        }
    }
    isProcessPayloadValid() {
        return !!this.processPayloadCloud.processDefinitionKey;
    }
    getProcessDefinition(processDefinitionCloud, processDefinitionName) {
        return (this.isValidName(processDefinitionCloud.name) && processDefinitionCloud.name.toLowerCase().includes(processDefinitionName.toLowerCase())) ||
            (processDefinitionCloud.key && processDefinitionCloud.key.toLowerCase().includes(processDefinitionName.toLowerCase()));
    }
    isProcessDefinitionsEmpty() {
        return this.processDefinitionList.length === 0;
    }
    buildProcessCloudPayload() {
        this.processPayloadCloud.name = this.processInstanceName.value;
        if (this.variables) {
            this.processPayloadCloud.variables = this.variables;
        }
        if (this.hasForm()) {
            this.processPayloadCloud.variables = Object.assign(this.processPayloadCloud.variables, this.formCloud.values);
        }
    }
    startProcess() {
        this.isLoading = true;
        this.buildProcessCloudPayload();
        this.startProcessCloudService.startCreatedProcess(this.appName, this.currentCreatedProcess.id, this.processPayloadCloud)
            .subscribe((res) => {
            this.success.emit(res);
            this.isLoading = false;
        }, (err) => {
            this.errorMessageId = 'ADF_CLOUD_PROCESS_LIST.ADF_CLOUD_START_PROCESS.ERROR.START';
            this.error.emit(err);
            this.isLoading = false;
        });
    }
    cancelStartProcess() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.currentCreatedProcess) {
                yield this.startProcessCloudService.deleteProcess(this.appName, this.currentCreatedProcess.id);
            }
            this.currentCreatedProcess = null;
            this.cancel.emit();
        });
    }
    resetErrorMessage() {
        this.errorMessageId = '';
    }
    resetProcessDefinitionList() {
        this.processDefinition.setValue('');
        this.filteredProcesses = this.processDefinitionList;
    }
    displayProcessNameOnDropdown(process) {
        if (process) {
            let processName = process;
            if (typeof process !== 'string') {
                processName = process.name;
            }
            return processName;
        }
    }
    displayDropdown(event) {
        event.stopPropagation();
        if (!this.inputAutocomplete.panelOpen) {
            this.resetProcessDefinitionList();
            this.inputAutocomplete.openPanel();
        }
        else {
            this.inputAutocomplete.closePanel();
        }
    }
    processDefinitionNameValidator() {
        return (control) => {
            const processDefinitionFieldValue = control.value;
            let processDefinitionNameError = false;
            if (processDefinitionFieldValue) {
                const processDefinition = this.getProcessIfExists(processDefinitionFieldValue);
                if (!processDefinition.key) {
                    processDefinitionNameError = true;
                }
            }
            return processDefinitionNameError ? { 'invalid name': true } : null;
        };
    }
    getProcessDefinitionValue(process) {
        return !!process.name ? process.name : process.key;
    }
    get processInstanceName() {
        return this.processForm.get('processInstanceName');
    }
    get processDefinition() {
        return this.processForm.get('processDefinition');
    }
    onFormContentClicked(content) {
        this.formContentClicked.emit(content);
    }
    processDefinitionSelectionChanged(processDefinition) {
        if (processDefinition) {
            const processInstanceDetails = { processDefinitionName: processDefinition.name };
            const defaultProcessName = this.processNameCloudPipe.transform(this.name, processInstanceDetails);
            this.processInstanceName.setValue(defaultProcessName);
            this.processInstanceName.markAsDirty();
            this.processInstanceName.markAsTouched();
            this.processDefinitionSelection.emit(processDefinition);
        }
    }
    ngOnDestroy() {
        this.onDestroy$.next(true);
        this.onDestroy$.complete();
    }
}
StartProcessCloudComponent.ɵfac = function StartProcessCloudComponent_Factory(t) { return new (t || StartProcessCloudComponent)(ɵngcc0.ɵɵdirectiveInject(StartProcessCloudService), ɵngcc0.ɵɵdirectiveInject(ɵngcc17.FormBuilder), ɵngcc0.ɵɵdirectiveInject(ProcessNameCloudPipe)); };
StartProcessCloudComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: StartProcessCloudComponent, selectors: [["adf-cloud-start-process"]], viewQuery: function StartProcessCloudComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(MatAutocompleteTrigger, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.inputAutocomplete = _t.first);
    } }, hostBindings: function StartProcessCloudComponent_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("keydown", function StartProcessCloudComponent_keydown_HostBindingHandler($event) { return ctx.onKeyDown($event); });
    } }, inputs: { appName: "appName", maxNameLength: "maxNameLength", name: "name", showSelectProcessDropdown: "showSelectProcessDropdown", processDefinitionName: "processDefinitionName", variables: "variables", values: "values" }, outputs: { success: "success", cancel: "cancel", error: "error", formContentClicked: "formContentClicked", processDefinitionSelection: "processDefinitionSelection" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 11, vars: 6, consts: [[1, "adf-start-process"], [1, "adf-title"], ["id", "error-message", 4, "ngIf"], [4, "ngIf", "ngIfElse"], ["taskFormCloudButtons", ""], ["emptyProcessDefinitionsList", ""], ["id", "error-message"], [3, "formGroup"], [1, "adf-process-input-container", 3, "floatLabel"], ["matInput", "", "formControlName", "processDefinition", "id", "processDefinitionName", 3, "matAutocomplete"], ["inputAutocomplete", ""], [1, "adf-process-input-autocomplete"], ["id", "processDefinitionOptions", 3, "displayWith", "optionSelected"], ["auto", "matAutocomplete"], [3, "value", "click", 4, "ngFor", "ngForOf"], ["id", "adf-select-process-dropdown", "mat-icon-button", "", 3, "click", 4, "ngIf"], ["class", "adf-error-pb", 4, "ngIf"], ["matInput", "", "formControlName", "processInstanceName", "id", "processName"], ["id", "adf-start-process-required-error", 4, "ngIf"], ["id", "adf-start-process-maxlength-error", 4, "ngIf"], [4, "ngIf"], [3, "value", "click"], ["id", "adf-select-process-dropdown", "mat-icon-button", "", 3, "click"], [1, "adf-error-pb"], ["id", "adf-start-process-required-error"], ["id", "adf-start-process-maxlength-error"], [3, "appName", "appVersion", "data", "formId", "showSaveButton", "showCompleteButton", "showRefreshButton", "showValidationIcon", "showTitle", "formContentClicked", "formLoaded"], [3, "ngTemplateOutlet"], ["fxLayout", "row", "fxLayoutAlign", "end end"], ["mat-button", "", "id", "cancel_process", 3, "click"], ["color", "primary", "mat-button", "", "data-automation-id", "btn-start", "id", "button-start", 1, "btn-start", 3, "disabled", "click"], ["id", "no-process-message", 1, "error-message"]], template: function StartProcessCloudComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "mat-card", 0);
        ɵngcc0.ɵɵelementStart(1, "mat-card-title", 1);
        ɵngcc0.ɵɵtext(2);
        ɵngcc0.ɵɵpipe(3, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(4, "mat-card-content");
        ɵngcc0.ɵɵtemplate(5, StartProcessCloudComponent_mat_card_subtitle_5_Template, 3, 3, "mat-card-subtitle", 2);
        ɵngcc0.ɵɵtemplate(6, StartProcessCloudComponent_div_6_Template, 23, 19, "div", 3);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(7, StartProcessCloudComponent_ng_template_7_Template, 9, 11, "ng-template", null, 4, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵtemplate(9, StartProcessCloudComponent_ng_template_9_Template, 1, 1, "ng-template", null, 5, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        const _r4 = ɵngcc0.ɵɵreference(10);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵtextInterpolate1("", ɵngcc0.ɵɵpipeBind1(3, 4, "ADF_CLOUD_PROCESS_LIST.ADF_CLOUD_START_PROCESS.FORM.TITLE"), " ");
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngIf", ctx.errorMessageId);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.isProcessDefinitionsEmpty())("ngIfElse", _r4);
    } }, directives: [ɵngcc1.MatCard, ɵngcc1.MatCardTitle, ɵngcc1.MatCardContent, ɵngcc3.NgIf, ɵngcc1.MatCardSubtitle, ɵngcc17.ɵangular_packages_forms_forms_y, ɵngcc17.NgControlStatusGroup, ɵngcc17.FormGroupDirective, ɵngcc14.MatFormField, ɵngcc14.MatLabel, ɵngcc21.MatInput, ɵngcc17.DefaultValueAccessor, ɵngcc19.MatAutocompleteTrigger, ɵngcc17.NgControlStatus, ɵngcc17.FormControlName, ɵngcc19.MatAutocomplete, ɵngcc3.NgForOf, ɵngcc8.MatOption, ɵngcc13.MatButton, ɵngcc5.MatIcon, ɵngcc14.MatError, FormCloudComponent, FormCustomOutcomesComponent, ɵngcc3.NgTemplateOutlet, ɵngcc2.DefaultLayoutDirective, ɵngcc2.DefaultLayoutAlignDirective], pipes: [ɵngcc10.TranslatePipe, ɵngcc3.UpperCasePipe], styles: [".adf-start-process mat-form-field{width:100%}.adf-start-process .mat-form-field-label{color:var(--theme-colors-mat-grey-dark)}.adf-start-process mat-card-actions{text-align:right}.adf-start-process mat-card-actions .mat-button{text-transform:uppercase!important}.adf-title{padding-bottom:1.25em}.adf-process-input-container mat-form-field{width:100%}.adf-process-input-autocomplete{display:flex}.adf-process-input-autocomplete button{position:absolute;right:-14px;top:0}.adf-start-form-container .mat-card{box-shadow:none!important;padding:0!important}.adf-start-form-actions{text-align:right!important}"], encapsulation: 2 });
StartProcessCloudComponent.MAX_NAME_LENGTH = 255;
StartProcessCloudComponent.PROCESS_DEFINITION_DEBOUNCE = 300;
StartProcessCloudComponent.PROCESS_FORM_DEBOUNCE = 400;
StartProcessCloudComponent.ctorParameters = () => [
    { type: StartProcessCloudService },
    { type: FormBuilder },
    { type: ProcessNameCloudPipe }
];
StartProcessCloudComponent.propDecorators = {
    inputAutocomplete: [{ type: ViewChild, args: [MatAutocompleteTrigger,] }],
    appName: [{ type: Input }],
    maxNameLength: [{ type: Input }],
    name: [{ type: Input }],
    processDefinitionName: [{ type: Input }],
    variables: [{ type: Input }],
    values: [{ type: Input }],
    showSelectProcessDropdown: [{ type: Input }],
    success: [{ type: Output }],
    cancel: [{ type: Output }],
    error: [{ type: Output }],
    formContentClicked: [{ type: Output }],
    processDefinitionSelection: [{ type: Output }],
    onKeyDown: [{ type: HostListener, args: ['keydown', ['$event'],] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(StartProcessCloudComponent, [{
        type: Component,
        args: [{
                selector: 'adf-cloud-start-process',
                template: "<mat-card class=\"adf-start-process\">\n\n    <mat-card-title class=\"adf-title\">{{'ADF_CLOUD_PROCESS_LIST.ADF_CLOUD_START_PROCESS.FORM.TITLE' | translate}}\n    </mat-card-title>\n\n    <mat-card-content>\n        <mat-card-subtitle id=\"error-message\" *ngIf=\"errorMessageId\">\n            {{ errorMessageId | translate }}\n        </mat-card-subtitle>\n\n        <div *ngIf=\"!isProcessDefinitionsEmpty(); else emptyProcessDefinitionsList\">\n            <form [formGroup]=\"processForm\">\n                <mat-form-field class=\"adf-process-input-container\"  [floatLabel]=\"'always'\">\n                    <mat-label>{{ 'ADF_CLOUD_PROCESS_LIST.ADF_CLOUD_START_PROCESS.FORM.LABEL.TYPE' | translate }}</mat-label>\n                    <input\n                        #inputAutocomplete\n                        matInput\n                        formControlName=\"processDefinition\"\n                        [matAutocomplete]=\"auto\"\n                        id=\"processDefinitionName\">\n                    <div class=\"adf-process-input-autocomplete\">\n                        <mat-autocomplete #auto=\"matAutocomplete\" id=\"processDefinitionOptions\" [displayWith]=\"displayProcessNameOnDropdown\" (optionSelected)=\"setProcessDefinitionOnForm($event.option.value)\" >\n                            <mat-option *ngFor=\"let processDef of filteredProcesses\" [value]=\"getProcessDefinitionValue(processDef)\"\n                                        (click)=\"processDefinitionSelectionChanged(processDef)\">\n                                {{ getProcessDefinitionValue(processDef) }}\n                            </mat-option>\n                        </mat-autocomplete>\n                        <button id=\"adf-select-process-dropdown\" *ngIf=\"showSelectProcessDropdown\" mat-icon-button (click)=\"displayDropdown($event)\">\n                            <mat-icon>arrow_drop_down</mat-icon>\n                        </button>\n                    </div>\n                    <mat-error *ngIf=\"processDefinition.hasError('required')\" class=\"adf-error-pb\">\n                            {{ 'ADF_CLOUD_PROCESS_LIST.ADF_CLOUD_START_PROCESS.ERROR.PROCESS_DEFINITION_REQUIRED' | translate }}\n                        </mat-error>\n                </mat-form-field>\n\n                <mat-form-field class=\"adf-process-input-container\"  [floatLabel]=\"'always'\">\n                    <mat-label>{{ 'ADF_CLOUD_PROCESS_LIST.ADF_CLOUD_START_PROCESS.FORM.LABEL.NAME' | translate }}</mat-label>\n                    <input\n                        matInput\n                        formControlName=\"processInstanceName\"\n                        id=\"processName\">\n                    <mat-error id=\"adf-start-process-required-error\" *ngIf=\"processInstanceName.hasError('required')\">\n                        {{ 'ADF_CLOUD_PROCESS_LIST.ADF_CLOUD_START_PROCESS.ERROR.PROCESS_NAME_REQUIRED' | translate }}\n                    </mat-error>\n                    <mat-error id=\"adf-start-process-maxlength-error\" *ngIf=\"processInstanceName.hasError('maxlength')\">\n                        {{ 'ADF_CLOUD_PROCESS_LIST.ADF_CLOUD_START_PROCESS.ERROR.MAXIMUM_LENGTH' | translate : { characters : maxNameLength } }}\n                    </mat-error>\n                    <mat-error *ngIf=\"processInstanceName.hasError('pattern')\">\n                        {{ 'ADF_CLOUD_PROCESS_LIST.ADF_CLOUD_START_PROCESS.ERROR.SPACE_VALIDATOR' | translate }}\n                    </mat-error>\n                </mat-form-field>\n            </form>\n\n            <ng-container *ngIf=\"hasForm() else taskFormCloudButtons\">\n                <adf-cloud-form\n                    [appName]=\"appName\"\n                    [appVersion]=\"processDefinitionCurrent.appVersion\"\n                    [data]=\"values\"\n                    [formId]=\"processDefinitionCurrent.formKey\"\n                    [showSaveButton]=\"false\"\n                    [showCompleteButton]=\"false\"\n                    [showRefreshButton]=\"false\"\n                    [showValidationIcon]=\"false\"\n                    [showTitle]=\"false\"\n                    (formContentClicked)=\"onFormContentClicked($event)\"\n                    (formLoaded)=\"onFormLoaded($event)\">\n                    <adf-cloud-form-custom-outcomes>\n                        <ng-template [ngTemplateOutlet]=\"taskFormCloudButtons\">\n                        </ng-template>\n                    </adf-cloud-form-custom-outcomes>\n                </adf-cloud-form>\n            </ng-container>\n        </div>\n\n    </mat-card-content>\n\n    <ng-template #taskFormCloudButtons>\n        <div fxLayout=\"row\" fxLayoutAlign=\"end end\">\n            <button mat-button (click)=\"cancelStartProcess()\" id=\"cancel_process\">\n                {{ 'ADF_CLOUD_PROCESS_LIST.ADF_CLOUD_START_PROCESS.FORM.ACTION.CANCEL' | translate | uppercase}}\n            </button>\n            <button color=\"primary\" mat-button [disabled]=\"disableStartButton || !isProcessFormValid()\" (click)=\"startProcess()\"\n                data-automation-id=\"btn-start\" id=\"button-start\" class=\"btn-start\">\n                {{'ADF_CLOUD_PROCESS_LIST.ADF_CLOUD_START_PROCESS.FORM.ACTION.START' | translate | uppercase}}\n            </button>\n        </div>\n    </ng-template>\n\n    <ng-template #emptyProcessDefinitionsList>\n        <mat-card-content *ngIf=\"processDefinitionLoaded\">\n            <mat-card-subtitle class=\"error-message\" id=\"no-process-message\">\n                {{ 'ADF_CLOUD_PROCESS_LIST.ADF_CLOUD_START_PROCESS.NO_PROCESS_DEFINITIONS' | translate | uppercase}}\n            </mat-card-subtitle>\n        </mat-card-content>\n    </ng-template>\n</mat-card>\n",
                encapsulation: ViewEncapsulation.None,
                styles: [".adf-start-process mat-form-field{width:100%}.adf-start-process .mat-form-field-label{color:var(--theme-colors-mat-grey-dark)}.adf-start-process mat-card-actions{text-align:right}.adf-start-process mat-card-actions .mat-button{text-transform:uppercase!important}.adf-title{padding-bottom:1.25em}.adf-process-input-container mat-form-field{width:100%}.adf-process-input-autocomplete{display:flex}.adf-process-input-autocomplete button{position:absolute;right:-14px;top:0}.adf-start-form-container .mat-card{box-shadow:none!important;padding:0!important}.adf-start-form-actions{text-align:right!important}"]
            }]
    }], function () { return [{ type: StartProcessCloudService }, { type: ɵngcc17.FormBuilder }, { type: ProcessNameCloudPipe }]; }, { appName: [{
            type: Input
        }], maxNameLength: [{
            type: Input
        }], name: [{
            type: Input
        }], showSelectProcessDropdown: [{
            type: Input
        }], success: [{
            type: Output
        }], cancel: [{
            type: Output
        }], error: [{
            type: Output
        }], formContentClicked: [{
            type: Output
        }], processDefinitionSelection: [{
            type: Output
        }], onKeyDown: [{
            type: HostListener,
            args: ['keydown', ['$event']]
        }], inputAutocomplete: [{
            type: ViewChild,
            args: [MatAutocompleteTrigger]
        }], processDefinitionName: [{
            type: Input
        }], variables: [{
            type: Input
        }], values: [{
            type: Input
        }] }); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class StartProcessCloudModule {
}
StartProcessCloudModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: StartProcessCloudModule });
StartProcessCloudModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function StartProcessCloudModule_Factory(t) { return new (t || StartProcessCloudModule)(); }, imports: [[
            FormsModule,
            CommonModule,
            FormCloudModule,
            MaterialModule,
            FlexLayoutModule,
            ReactiveFormsModule,
            CoreModule
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(StartProcessCloudModule, { declarations: function () { return [StartProcessCloudComponent]; }, imports: function () { return [FormsModule,
        CommonModule, FormCloudModule, MaterialModule, FlexLayoutModule,
        ReactiveFormsModule,
        CoreModule]; }, exports: function () { return [StartProcessCloudComponent]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(StartProcessCloudModule, [{
        type: NgModule,
        args: [{
                imports: [
                    FormsModule,
                    CommonModule,
                    FormCloudModule,
                    MaterialModule,
                    FlexLayoutModule,
                    ReactiveFormsModule,
                    CoreModule
                ],
                declarations: [
                    StartProcessCloudComponent
                ],
                exports: [
                    StartProcessCloudComponent
                ]
            }]
    }], null, null); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class ProcessHeaderCloudComponent {
    constructor(processCloudService, translationService, appConfig) {
        this.processCloudService = processCloudService;
        this.translationService = translationService;
        this.appConfig = appConfig;
        this.appName = '';
        this.loaded = new EventEmitter();
        this.onDestroy$ = new Subject();
    }
    ngOnInit() {
        this.dateFormat = this.appConfig.get('dateValues.defaultDateFormat');
        this.dateLocale = this.appConfig.get('dateValues.defaultDateLocale');
        this.processCloudService.dataChangesDetected
            .pipe(takeUntil(this.onDestroy$))
            .subscribe((processDetails) => this.onLoaded(processDetails));
    }
    ngOnChanges() {
        if ((this.appName || this.appName === '') && this.processInstanceId) {
            this.loadProcessInstanceDetails(this.appName, this.processInstanceId);
        }
    }
    loadProcessInstanceDetails(appName, processInstanceId) {
        this.processCloudService
            .getProcessInstanceById(appName, processInstanceId)
            .subscribe((result) => this.onLoaded(result));
    }
    onLoaded(processInstanceDetails) {
        this.processInstanceDetails = processInstanceDetails;
        this.refreshData();
        this.loaded.emit(processInstanceDetails);
    }
    refreshData() {
        if (this.processInstanceDetails) {
            const defaultProperties = this.initDefaultProperties();
            const filteredProperties = this.appConfig.get('adf-cloud-process-header.presets.properties');
            this.properties = defaultProperties.filter((cardItem) => this.isValidSelection(filteredProperties, cardItem));
        }
    }
    initDefaultProperties() {
        return [
            new CardViewTextItemModel({
                label: 'ADF_CLOUD_PROCESS_HEADER.PROPERTIES.ID',
                value: this.processInstanceDetails.id,
                key: 'id'
            }),
            new CardViewTextItemModel({
                label: 'ADF_CLOUD_PROCESS_HEADER.PROPERTIES.NAME',
                value: this.processInstanceDetails.name,
                key: 'name',
                default: this.translationService.instant('ADF_CLOUD_PROCESS_HEADER.PROPERTIES.NAME_DEFAULT')
            }),
            new CardViewTextItemModel({
                label: 'ADF_CLOUD_PROCESS_HEADER.PROPERTIES.STATUS',
                value: this.processInstanceDetails.status,
                key: 'status'
            }),
            new CardViewTextItemModel({
                label: 'ADF_CLOUD_PROCESS_HEADER.PROPERTIES.INITIATOR',
                value: this.processInstanceDetails.initiator,
                key: 'initiator'
            }),
            new CardViewDateItemModel({
                label: 'ADF_CLOUD_PROCESS_HEADER.PROPERTIES.START_DATE',
                value: this.processInstanceDetails.startDate,
                key: 'startDate',
                format: this.dateFormat,
                locale: this.dateLocale
            }),
            new CardViewDateItemModel({
                label: 'ADF_CLOUD_PROCESS_HEADER.PROPERTIES.LAST_MODIFIED',
                value: this.processInstanceDetails.lastModified,
                key: 'lastModified',
                format: this.dateFormat,
                locale: this.dateLocale
            }),
            new CardViewTextItemModel({
                label: 'ADF_CLOUD_PROCESS_HEADER.PROPERTIES.PARENT_ID',
                value: this.processInstanceDetails.parentId,
                key: 'parentId',
                default: this.translationService.instant('ADF_CLOUD_PROCESS_HEADER.PROPERTIES.NONE')
            }),
            new CardViewTextItemModel({
                label: 'ADF_CLOUD_PROCESS_HEADER.PROPERTIES.BUSINESS_KEY',
                value: this.processInstanceDetails.businessKey,
                key: 'businessKey',
                default: this.translationService.instant('ADF_CLOUD_PROCESS_HEADER.PROPERTIES.NONE')
            })
        ];
    }
    isValidSelection(filteredProperties, cardItem) {
        return filteredProperties ? filteredProperties.indexOf(cardItem.key) >= 0 : true;
    }
    ngOnDestroy() {
        this.onDestroy$.next(true);
        this.onDestroy$.complete();
    }
}
ProcessHeaderCloudComponent.ɵfac = function ProcessHeaderCloudComponent_Factory(t) { return new (t || ProcessHeaderCloudComponent)(ɵngcc0.ɵɵdirectiveInject(ProcessCloudService), ɵngcc0.ɵɵdirectiveInject(ɵngcc6.TranslationService), ɵngcc0.ɵɵdirectiveInject(ɵngcc6.AppConfigService)); };
ProcessHeaderCloudComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ProcessHeaderCloudComponent, selectors: [["adf-cloud-process-header"]], hostAttrs: [1, "adf-cloud-process-header"], inputs: { appName: "appName", processInstanceId: "processInstanceId" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 1, vars: 1, consts: [[4, "ngIf"], [3, "properties"]], template: function ProcessHeaderCloudComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, ProcessHeaderCloudComponent_mat_card_0_Template, 3, 1, "mat-card", 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngIf", ctx.processInstanceDetails);
    } }, directives: [ɵngcc3.NgIf, ɵngcc1.MatCard, ɵngcc1.MatCardContent, ɵngcc6.CardViewComponent], encapsulation: 2 });
ProcessHeaderCloudComponent.ctorParameters = () => [
    { type: ProcessCloudService },
    { type: TranslationService },
    { type: AppConfigService }
];
ProcessHeaderCloudComponent.propDecorators = {
    appName: [{ type: Input }],
    processInstanceId: [{ type: Input }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ProcessHeaderCloudComponent, [{
        type: Component,
        args: [{
                selector: 'adf-cloud-process-header',
                template: "<mat-card *ngIf=\"processInstanceDetails\">\n  <mat-card-content>\n    <adf-card-view [properties]=\"properties\"></adf-card-view>\n  </mat-card-content>\n</mat-card>",
                encapsulation: ViewEncapsulation.None,
                host: { class: 'adf-cloud-process-header' }
            }]
    }], function () { return [{ type: ProcessCloudService }, { type: ɵngcc6.TranslationService }, { type: ɵngcc6.AppConfigService }]; }, { appName: [{
            type: Input
        }], processInstanceId: [{
            type: Input
        }] }); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class ProcessHeaderCloudModule {
}
ProcessHeaderCloudModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: ProcessHeaderCloudModule });
ProcessHeaderCloudModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function ProcessHeaderCloudModule_Factory(t) { return new (t || ProcessHeaderCloudModule)(); }, imports: [[
            CommonModule,
            MaterialModule,
            CoreModule
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ProcessHeaderCloudModule, { declarations: function () { return [ProcessHeaderCloudComponent]; }, imports: function () { return [CommonModule, MaterialModule, CoreModule]; }, exports: function () { return [ProcessHeaderCloudComponent]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ProcessHeaderCloudModule, [{
        type: NgModule,
        args: [{
                imports: [
                    CommonModule,
                    MaterialModule,
                    CoreModule
                ],
                declarations: [ProcessHeaderCloudComponent],
                exports: [ProcessHeaderCloudComponent]
            }]
    }], null, null); })();

class CancelProcessDirective {
    constructor(elementRef, processCloudService, identityUserService) {
        this.elementRef = elementRef;
        this.processCloudService = processCloudService;
        this.identityUserService = identityUserService;
        this.success = new EventEmitter();
        this.error = new EventEmitter();
        this.canCancelProcess = false;
        this.onDestroy$ = new Subject();
    }
    ngOnInit() {
        this.processCloudService.dataChangesDetected
            .pipe(takeUntil(this.onDestroy$))
            .subscribe((processDetails) => {
            this.processInstanceDetails = processDetails;
            this.canCancelProcess = this.checkCanCancelProcess();
            this.setElementVisibility();
        });
    }
    onClick() {
        this.cancelProcess();
    }
    setElementVisibility() {
        this.elementRef.nativeElement.disabled = !this.canCancelProcess;
    }
    checkCanCancelProcess() {
        const currentUser = this.identityUserService.getCurrentUserInfo().username;
        return this.processInstanceDetails.initiator === currentUser && this.processInstanceDetails.status === 'RUNNING';
    }
    cancelProcess() {
        if (this.canCancelProcess) {
            this.processCloudService.cancelProcess(this.processInstanceDetails.appName, this.processInstanceDetails.id)
                .subscribe((response) => this.success.emit(response), (error) => this.error.emit(error));
        }
        else {
            this.error.emit('Permission denied, only process initiator can cancel the process');
        }
    }
    ngOnDestroy() {
        this.onDestroy$.next(true);
        this.onDestroy$.complete();
    }
}
CancelProcessDirective.ɵfac = function CancelProcessDirective_Factory(t) { return new (t || CancelProcessDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ProcessCloudService), ɵngcc0.ɵɵdirectiveInject(ɵngcc6.IdentityUserService)); };
CancelProcessDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CancelProcessDirective, selectors: [["", "adf-cloud-cancel-process", ""]], hostBindings: function CancelProcessDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function CancelProcessDirective_click_HostBindingHandler() { return ctx.onClick(); });
    } }, outputs: { success: "success", error: "error" } });
CancelProcessDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: ProcessCloudService },
    { type: IdentityUserService }
];
CancelProcessDirective.propDecorators = {
    success: [{ type: Output }],
    error: [{ type: Output }],
    onClick: [{ type: HostListener, args: ['click',] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CancelProcessDirective, [{
        type: Directive,
        args: [{
                selector: '[adf-cloud-cancel-process]'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ProcessCloudService }, { type: ɵngcc6.IdentityUserService }]; }, { success: [{
            type: Output
        }], error: [{
            type: Output
        }], onClick: [{
            type: HostListener,
            args: ['click']
        }] }); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class ProcessDirectiveModule {
}
ProcessDirectiveModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: ProcessDirectiveModule });
ProcessDirectiveModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function ProcessDirectiveModule_Factory(t) { return new (t || ProcessDirectiveModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ProcessDirectiveModule, { declarations: [CancelProcessDirective], exports: [CancelProcessDirective] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ProcessDirectiveModule, [{
        type: NgModule,
        args: [{
                declarations: [
                    CancelProcessDirective
                ],
                exports: [
                    CancelProcessDirective
                ]
            }]
    }], null, null); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class ProcessCloudModule {
}
ProcessCloudModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: ProcessCloudModule });
ProcessCloudModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function ProcessCloudModule_Factory(t) { return new (t || ProcessCloudModule)(); }, providers: [ProcessNameCloudPipe], imports: [[
            CoreModule,
            ProcessFiltersCloudModule,
            ProcessListCloudModule,
            StartProcessCloudModule,
            ProcessHeaderCloudModule,
            ProcessDirectiveModule
        ], ProcessFiltersCloudModule, ProcessListCloudModule, StartProcessCloudModule, ProcessHeaderCloudModule, ProcessDirectiveModule] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ProcessCloudModule, { imports: function () { return [CoreModule, ProcessFiltersCloudModule, ProcessListCloudModule, StartProcessCloudModule, ProcessHeaderCloudModule, ProcessDirectiveModule]; }, exports: function () { return [ProcessFiltersCloudModule, ProcessListCloudModule, StartProcessCloudModule, ProcessHeaderCloudModule, ProcessDirectiveModule]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ProcessCloudModule, [{
        type: NgModule,
        args: [{
                imports: [
                    CoreModule,
                    ProcessFiltersCloudModule,
                    ProcessListCloudModule,
                    StartProcessCloudModule,
                    ProcessHeaderCloudModule,
                    ProcessDirectiveModule
                ],
                exports: [
                    ProcessFiltersCloudModule,
                    ProcessListCloudModule,
                    StartProcessCloudModule,
                    ProcessHeaderCloudModule,
                    ProcessDirectiveModule
                ],
                providers: [ProcessNameCloudPipe]
            }]
    }], null, null); })();

class UserPreferenceCloudService extends BaseCloudService {
    constructor(apiService, appConfigService, logService) {
        super(apiService, appConfigService);
        this.logService = logService;
    }
    getPreferences(appName) {
        if (appName) {
            const url = `${this.getBasePath(appName)}/preference/v1/preferences`;
            return this.get(url);
        }
        else {
            this.logService.error('Appname is mandatory for querying preferences');
            return throwError('Appname not configured');
        }
    }
    getPreferenceByKey(appName, key) {
        if (appName) {
            const url = `${this.getBasePath(appName)}/preference/v1/preferences/${key}`;
            return this.get(url);
        }
        else {
            this.logService.error('Appname and key are mandatory for querying preference');
            return throwError('Appname not configured');
        }
    }
    createPreference(appName, key, newPreference) {
        if (appName) {
            const url = `${this.getBasePath(appName)}/preference/v1/preferences/${key}`;
            const payload = JSON.stringify(newPreference);
            return this.put(url, payload);
        }
        else {
            this.logService.error('Appname  and key are  mandatory for creating preference');
            return throwError('Appname not configured');
        }
    }
    updatePreference(appName, key, updatedPreference) {
        return this.createPreference(appName, key, updatedPreference);
    }
    deletePreference(appName, key) {
        if (appName) {
            const url = `${this.getBasePath(appName)}/preference/v1/preferences/${key}`;
            return this.delete(url);
        }
        else {
            this.logService.error('Appname and key are mandatory to delete preference');
            return throwError('Appname not configured');
        }
    }
}
UserPreferenceCloudService.ɵfac = function UserPreferenceCloudService_Factory(t) { return new (t || UserPreferenceCloudService)(ɵngcc0.ɵɵinject(ɵngcc6.AlfrescoApiService), ɵngcc0.ɵɵinject(ɵngcc6.AppConfigService), ɵngcc0.ɵɵinject(ɵngcc6.LogService)); };
UserPreferenceCloudService.ɵprov = ɵɵdefineInjectable({ factory: function UserPreferenceCloudService_Factory() { return new UserPreferenceCloudService(ɵɵinject(AlfrescoApiService), ɵɵinject(AppConfigService), ɵɵinject(LogService)); }, token: UserPreferenceCloudService, providedIn: "root" });
UserPreferenceCloudService.ctorParameters = () => [
    { type: AlfrescoApiService },
    { type: AppConfigService },
    { type: LogService }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(UserPreferenceCloudService, [{
        type: Injectable,
        args: [{ providedIn: 'root' }]
    }], function () { return [{ type: ɵngcc6.AlfrescoApiService }, { type: ɵngcc6.AppConfigService }, { type: ɵngcc6.LogService }]; }, null); })();

class LocalPreferenceCloudService {
    constructor(storage) {
        this.storage = storage;
    }
    getPreferences(_, key) {
        if (key || key === '') {
            return of(this.prepareLocalPreferenceResponse(key));
        }
        return of({
            'list': {
                'entries': []
            }
        });
    }
    getPreferenceByKey(_, key) {
        return of(JSON.parse(this.storage.getItem(key)) || []);
    }
    createPreference(_, key, newPreference) {
        const storedFilters = JSON.parse(this.storage.getItem(key) || '[]');
        storedFilters.push(...newPreference);
        this.storage.setItem(key, JSON.stringify(storedFilters));
        return of(storedFilters);
    }
    updatePreference(_, key, updatedPreference) {
        if (key) {
            this.storage.setItem(key, JSON.stringify(updatedPreference));
        }
        return of(updatedPreference);
    }
    deletePreference(key, preferences) {
        if (key) {
            this.storage.setItem(key, JSON.stringify(preferences));
        }
        return of(preferences);
    }
    prepareLocalPreferenceResponse(key) {
        return {
            'list': {
                'entries': [
                    {
                        'entry': {
                            'key': key,
                            'value': this.storage.getItem(key) || '[]'
                        }
                    }
                ]
            }
        };
    }
}
LocalPreferenceCloudService.ɵfac = function LocalPreferenceCloudService_Factory(t) { return new (t || LocalPreferenceCloudService)(ɵngcc0.ɵɵinject(ɵngcc6.StorageService)); };
LocalPreferenceCloudService.ɵprov = ɵɵdefineInjectable({ factory: function LocalPreferenceCloudService_Factory() { return new LocalPreferenceCloudService(ɵɵinject(StorageService)); }, token: LocalPreferenceCloudService, providedIn: "root" });
LocalPreferenceCloudService.ctorParameters = () => [
    { type: StorageService }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(LocalPreferenceCloudService, [{
        type: Injectable,
        args: [{ providedIn: 'root' }]
    }], function () { return [{ type: ɵngcc6.StorageService }]; }, null); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var PeopleModeOptions;
(function (PeopleModeOptions) {
    PeopleModeOptions["single"] = "single";
    PeopleModeOptions["multiple"] = "multiple";
})(PeopleModeOptions || (PeopleModeOptions = {}));
var FormFieldType;
(function (FormFieldType) {
    FormFieldType["text"] = "text";
    FormFieldType["multiline"] = "multi-line-text";
    FormFieldType["number"] = "integer";
    FormFieldType["checkbox"] = "boolean";
    FormFieldType["date"] = "date";
    FormFieldType["datetime"] = "datetime";
    FormFieldType["dropdown"] = "dropdown";
    FormFieldType["typeahead"] = "typeahead";
    FormFieldType["amount"] = "amount";
    FormFieldType["radio"] = "radio-buttons";
    FormFieldType["people"] = "people";
    FormFieldType["groupOfPeople"] = "functional-group";
    FormFieldType["dynamicTable"] = "dynamicTable";
    FormFieldType["hyperlink"] = "hyperlink";
    FormFieldType["header"] = "group";
    FormFieldType["uploadFile"] = "upload";
    FormFieldType["uploadFolder"] = "uploadFolder";
    FormFieldType["displayValue"] = "readonly";
    FormFieldType["displayText"] = "readonly-text";
    FormFieldType["fileViewer"] = "file-viewer";
})(FormFieldType || (FormFieldType = {}));

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

class CloudFormRenderingService extends FormRenderingService {
    constructor() {
        super();
        this.register({
            'upload': () => AttachFileCloudWidgetComponent,
            'dropdown': () => DropdownCloudWidgetComponent,
            'date': () => DateCloudWidgetComponent,
            'people': () => PeopleCloudWidgetComponent,
            'functional-group': () => GroupCloudWidgetComponent,
            'properties-viewer': () => PropertiesViewerWidgetComponent,
            'radio-buttons': () => RadioButtonsCloudWidgetComponent
        }, true);
    }
}
CloudFormRenderingService.ɵfac = function CloudFormRenderingService_Factory(t) { return new (t || CloudFormRenderingService)(); };
CloudFormRenderingService.ɵprov = ɵɵdefineInjectable({ factory: function CloudFormRenderingService_Factory() { return new CloudFormRenderingService(); }, token: CloudFormRenderingService, providedIn: "root" });
CloudFormRenderingService.ctorParameters = () => [];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CloudFormRenderingService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return []; }, null); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class ProcessServicesCloudPipeModule {
}
ProcessServicesCloudPipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: ProcessServicesCloudPipeModule });
ProcessServicesCloudPipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function ProcessServicesCloudPipeModule_Factory(t) { return new (t || ProcessServicesCloudPipeModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ProcessServicesCloudPipeModule, { declarations: [ProcessNameCloudPipe], exports: [ProcessNameCloudPipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ProcessServicesCloudPipeModule, [{
        type: NgModule,
        args: [{
                declarations: [
                    ProcessNameCloudPipe
                ],
                exports: [
                    ProcessNameCloudPipe
                ]
            }]
    }], null, null); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const ɵ0$5 = {
    name: 'adf-process-services-cloud',
    source: 'assets/adf-process-services-cloud'
};
class ProcessServicesCloudModule {
    static forRoot(preferenceServiceInstance) {
        return {
            ngModule: ProcessServicesCloudModule,
            providers: [
                {
                    provide: TRANSLATION_PROVIDER,
                    multi: true,
                    useValue: {
                        name: 'adf-process-services-cloud',
                        source: 'assets/adf-process-services-cloud'
                    }
                },
                { provide: PROCESS_FILTERS_SERVICE_TOKEN, useExisting: preferenceServiceInstance !== null && preferenceServiceInstance !== void 0 ? preferenceServiceInstance : LocalPreferenceCloudService },
                { provide: TASK_FILTERS_SERVICE_TOKEN, useExisting: preferenceServiceInstance !== null && preferenceServiceInstance !== void 0 ? preferenceServiceInstance : LocalPreferenceCloudService },
                FormRenderingService,
                { provide: FormRenderingService, useClass: CloudFormRenderingService }
            ]
        };
    }
    static forChild() {
        return {
            ngModule: ProcessServicesCloudModule
        };
    }
}
ProcessServicesCloudModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: ProcessServicesCloudModule });
ProcessServicesCloudModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function ProcessServicesCloudModule_Factory(t) { return new (t || ProcessServicesCloudModule)(); }, providers: [
        {
            provide: TRANSLATION_PROVIDER,
            multi: true,
            useValue: ɵ0$5
        }
    ], imports: [[
            CoreModule,
            AppListCloudModule,
            ProcessCloudModule,
            TaskCloudModule,
            GroupCloudModule,
            PeopleCloudModule,
            FormCloudModule,
            TaskFormModule,
            ProcessServicesCloudPipeModule
        ], AppListCloudModule, ProcessCloudModule, TaskCloudModule, GroupCloudModule, FormCloudModule, TaskFormModule, PeopleCloudModule, ProcessServicesCloudPipeModule] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ProcessServicesCloudModule, { imports: function () { return [CoreModule, AppListCloudModule, ProcessCloudModule, TaskCloudModule, GroupCloudModule, PeopleCloudModule, FormCloudModule, TaskFormModule, ProcessServicesCloudPipeModule]; }, exports: function () { return [AppListCloudModule, ProcessCloudModule, TaskCloudModule, GroupCloudModule, FormCloudModule, TaskFormModule, PeopleCloudModule, ProcessServicesCloudPipeModule]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ProcessServicesCloudModule, [{
        type: NgModule,
        args: [{
                imports: [
                    CoreModule,
                    AppListCloudModule,
                    ProcessCloudModule,
                    TaskCloudModule,
                    GroupCloudModule,
                    PeopleCloudModule,
                    FormCloudModule,
                    TaskFormModule,
                    ProcessServicesCloudPipeModule
                ],
                providers: [
                    {
                        provide: TRANSLATION_PROVIDER,
                        multi: true,
                        useValue: ɵ0$5
                    }
                ],
                exports: [
                    AppListCloudModule,
                    ProcessCloudModule,
                    TaskCloudModule,
                    GroupCloudModule,
                    FormCloudModule,
                    TaskFormModule,
                    PeopleCloudModule,
                    ProcessServicesCloudPipeModule
                ]
            }]
    }], null, null); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

class StartTaskCloudService extends BaseCloudService {
    constructor(apiService, appConfigService) {
        super(apiService, appConfigService);
    }
    createNewTask(taskDetails) {
        const url = `${this.getBasePath(taskDetails.appName)}/rb/v1/tasks`;
        const payload = JSON.stringify(new StartTaskCloudRequestModel(taskDetails));
        return this.post(url, payload)
            .pipe(map(response => response.entry));
    }
}
StartTaskCloudService.ɵfac = function StartTaskCloudService_Factory(t) { return new (t || StartTaskCloudService)(ɵngcc0.ɵɵinject(ɵngcc6.AlfrescoApiService), ɵngcc0.ɵɵinject(ɵngcc6.AppConfigService)); };
StartTaskCloudService.ɵprov = ɵɵdefineInjectable({ factory: function StartTaskCloudService_Factory() { return new StartTaskCloudService(ɵɵinject(AlfrescoApiService), ɵɵinject(AppConfigService)); }, token: StartTaskCloudService, providedIn: "root" });
StartTaskCloudService.ctorParameters = () => [
    { type: AlfrescoApiService },
    { type: AppConfigService }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(StartTaskCloudService, [{
        type: Injectable,
        args: [{ providedIn: 'root' }]
    }], function () { return [{ type: ɵngcc6.AlfrescoApiService }, { type: ɵngcc6.AppConfigService }]; }, null); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class ApplicationVersionModel {
}
class ApplicationVersionResponseModel {
}

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

export { AppDetailsCloudComponent, AppListCloudComponent, AppListCloudModule, ApplicationVersionModel, ApplicationVersionResponseModel, AppsProcessCloudService, AssignmentType, AttachFileCloudWidgetComponent, CancelProcessDirective, ClaimTaskCloudDirective, ClaimTaskEnum, CloudFormRenderingService, CompleteTaskDirective, ContentCloudNodeSelectorService, DEFAULT_APP_INSTANCE_ICON, DEFAULT_APP_INSTANCE_THEME, DEFAULT_TASK_PRIORITIES, DateCloudFilterType, DateCloudWidgetComponent, DropdownCloudWidgetComponent, EditProcessFilterCloudComponent, EditServiceTaskFilterCloudComponent, EditTaskFilterCloudComponent, FormCloudComponent, FormCloudModule, FormCloudService, FormCustomOutcomesComponent, FormDefinitionSelectorCloudComponent, FormDefinitionSelectorCloudService, FormFieldType, GroupCloudComponent, GroupCloudModule, GroupCloudWidgetComponent, InitialGroupNamePipe, LocalPreferenceCloudService, NotificationCloudService, PROCESS_FILTERS_SERVICE_TOKEN, PeopleCloudComponent, PeopleCloudModule, PeopleCloudWidgetComponent, PeopleModeOptions, ProcessCloudContentService, ProcessCloudModule, ProcessCloudService, ProcessDefinitionCloud, ProcessDirectiveModule, ProcessFilterCloudModel, ProcessFilterCloudService, ProcessFilterDialogCloudComponent, ProcessFiltersCloudComponent, ProcessFiltersCloudModule, ProcessHeaderCloudComponent, ProcessHeaderCloudModule, ProcessListCloudComponent, ProcessListCloudModule, ProcessListCloudService, ProcessListCloudSortingModel, ProcessNameCloudPipe, ProcessPayloadCloud, ProcessQueryCloudRequestModel, ProcessServicesCloudModule, ProcessServicesCloudPipeModule, PropertiesViewerWidgetComponent, ServiceTaskFilterCloudService, ServiceTaskFiltersCloudComponent, ServiceTaskListCloudComponent, ServiceTaskListCloudService, StartProcessCloudComponent, StartProcessCloudModule, StartProcessCloudService, StartTaskCloudComponent, StartTaskCloudModule, StartTaskCloudService, TASK_ASSIGNED_STATE, TASK_CREATED_STATE, TASK_FILTERS_SERVICE_TOKEN, TaskCloudModule, TaskCloudService, TaskDirectiveModule, TaskFilterCloudModel, TaskFilterCloudService, TaskFiltersCloudComponent, TaskFiltersCloudModule, TaskFormCloudComponent, TaskFormModule, TaskHeaderCloudComponent, TaskHeaderCloudModule, TaskListCloudComponent, TaskListCloudModule, TaskListCloudService, TaskListCloudSortingModel, TaskQueryCloudRequestModel, TaskVariableCloud, UnClaimTaskCloudDirective, UploadCloudWidgetComponent, UserPreferenceCloudService, processCloudPresetsDefaultModel, serviceTaskPresetsCloudDefaultModel, taskPresetsCloudDefaultModel, ɵ0$5 as ɵ0, MaterialModule as ɵa, ProcessCommonModule as ɵb, DateRangeFilterComponent as ɵc, DateRangeFilterService as ɵd, BaseCloudService as ɵe, RadioButtonsCloudWidgetComponent as ɵf, PropertiesViewerWrapperComponent as ɵg, FilePropertiesTableCloudComponent as ɵh, BaseTaskListCloudComponent as ɵi, BaseTaskFiltersCloudComponent as ɵj, BaseEditTaskFilterCloudComponent as ɵk, TaskFilterDialogCloudComponent as ɵl, TaskAssignmentFilterCloudComponent as ɵm };

//# sourceMappingURL=adf-process-services-cloud.js.map