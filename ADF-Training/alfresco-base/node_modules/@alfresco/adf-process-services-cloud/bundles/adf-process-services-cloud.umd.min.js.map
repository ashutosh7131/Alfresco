{"version":3,"sources":["../../../process-services-cloud/src/lib/material.module.ts","../../../process-services-cloud/src/lib/app/models/application-instance.model.ts","../../../process-services-cloud/src/lib/app/components/app-details-cloud.component.ts","../../../process-services-cloud/src/lib/app/services/apps-process-cloud.service.ts","../../../process-services-cloud/src/lib/app/components/app-list-cloud.component.ts","../../../process-services-cloud/src/lib/app/app-list-cloud.module.ts","../../../../node_modules/tslib/tslib.es6.js","../../../process-services-cloud/src/lib/task/task-list/models/filter-cloud-model.ts","../../../process-services-cloud/src/lib/services/base-cloud.service.ts","../../../process-services-cloud/src/lib/task/task-list/services/task-list-cloud.service.ts","../../../process-services-cloud/src/lib/task/models/task.model.ts","../../../process-services-cloud/src/lib/task/task-list/models/task-preset-cloud.model.ts","../../../process-services-cloud/src/lib/task/task-list/models/task-list-sorting.model.ts","../../../process-services-cloud/src/lib/task/start-task/models/start-task-cloud-request.model.ts","../../../process-services-cloud/src/lib/models/process-definition-cloud.model.ts","../../../process-services-cloud/src/lib/task/services/task-cloud.service.ts","../../../process-services-cloud/src/lib/task/task-list/components/base-task-list-cloud.component.ts","../../../process-services-cloud/src/lib/task/task-list/components/task-list-cloud.component.ts","../../../process-services-cloud/src/lib/task/task-list/services/service-task-list-cloud.service.ts","../../../process-services-cloud/src/lib/task/task-list/components/service-task-list-cloud.component.ts","../../../process-services-cloud/src/lib/models/date-cloud-filter.model.ts","../../../process-services-cloud/src/lib/task/task-list/task-list-cloud.module.ts","../../../process-services-cloud/src/lib/common/date-range-filter/date-range-filter.service.ts","../../../process-services-cloud/src/lib/task/task-filters/models/filter-cloud.model.ts","../../../process-services-cloud/src/lib/services/cloud-token.service.ts","../../../process-services-cloud/src/lib/services/notification-cloud.service.ts","../../../process-services-cloud/src/lib/task/task-filters/services/task-filter-cloud.service.ts","../../../process-services-cloud/src/lib/task/task-filters/components/base-task-filters-cloud.component.ts","../../../process-services-cloud/src/lib/task/task-filters/components/task-filters-cloud.component.ts","../../../process-services-cloud/src/lib/common/date-range-filter/date-range-filter.component.ts","../../../process-services-cloud/src/lib/common/process-common.module.ts","../../../process-services-cloud/src/lib/people/components/people-cloud.component.ts","../../../process-services-cloud/src/lib/people/people-cloud.module.ts","../../../process-services-cloud/src/lib/task/task-filters/services/service-task-filter-cloud.service.ts","../../../process-services-cloud/src/lib/task/task-filters/components/task-filter-dialog/task-filter-dialog-cloud.component.ts","../../../process-services-cloud/src/lib/task/task-filters/components/edit-task-filters/base-edit-task-filter-cloud.component.ts","../../../process-services-cloud/src/lib/task/task-filters/components/edit-task-filters/edit-service-task-filter-cloud.component.ts","../../../process-services-cloud/src/lib/task/task-filters/components/edit-task-filters/edit-task-filter-cloud.component.ts","../../../process-services-cloud/src/lib/task/task-filters/components/service-task-filters-cloud.component.ts","../../../process-services-cloud/src/lib/task/task-filters/components/task-assignment-filter/task-assignment-filter.component.ts","../../../process-services-cloud/src/lib/group/components/group-cloud.component.ts","../../../process-services-cloud/src/lib/group/pipe/group-initial.pipe.ts","../../../process-services-cloud/src/lib/group/group-cloud.module.ts","../../../process-services-cloud/src/lib/task/task-filters/task-filters-cloud.module.ts","../../../process-services-cloud/src/lib/task/start-task/components/start-task-cloud.component.ts","../../../process-services-cloud/src/lib/form/models/task-variable-cloud.model.ts","../../../process-services-cloud/src/lib/form/services/form-cloud.service.ts","../../../process-services-cloud/src/lib/form/components/form-cloud.component.ts","../../../process-services-cloud/src/lib/form/services/form-definition-selector-cloud.service.ts","../../../process-services-cloud/src/lib/form/components/form-definition-selector-cloud.component.ts","../../../process-services-cloud/src/lib/form/components/form-cloud-custom-outcomes.component.ts","../../../process-services-cloud/src/lib/form/components/widgets/date/date-cloud.widget.ts","../../../process-services-cloud/src/lib/form/components/widgets/dropdown/dropdown-cloud.widget.ts","../../../process-services-cloud/src/lib/form/components/widgets/group/group-cloud.widget.ts","../../../process-services-cloud/src/lib/form/components/widgets/people/people-cloud.widget.ts","../../../process-services-cloud/src/lib/form/services/content-cloud-node-selector.service.ts","../../../process-services-cloud/src/lib/form/services/process-cloud-content.service.ts","../../../process-services-cloud/src/lib/form/models/form-cloud-representation.model.ts","../../../process-services-cloud/src/lib/form/components/widgets/attach-file/upload-cloud.widget.ts","../../../process-services-cloud/src/lib/form/components/widgets/attach-file/attach-file-cloud-widget.component.ts","../../../process-services-cloud/src/lib/form/components/widgets/properties-viewer/properties-viewer.widget.ts","../../../process-services-cloud/src/lib/form/components/widgets/properties-viewer/properties-viewer-wrapper/properties-viewer-wrapper.component.ts","../../../process-services-cloud/src/lib/form/components/widgets/radio-buttons/radio-buttons-cloud.widget.ts","../../../process-services-cloud/src/lib/form/components/widgets/attach-file/file-properties-table-cloud.component.ts","../../../process-services-cloud/src/lib/form/form-cloud.module.ts","../../../process-services-cloud/src/lib/task/start-task/start-task-cloud.module.ts","../../../process-services-cloud/src/lib/task/task-header/components/task-header-cloud.component.ts","../../../process-services-cloud/src/lib/task/task-header/task-header-cloud.module.ts","../../../process-services-cloud/src/lib/task/directives/complete-task.directive.ts","../../../process-services-cloud/src/lib/task/directives/claim-task-cloud.directive.ts","../../../process-services-cloud/src/lib/task/directives/unclaim-task-cloud.directive.ts","../../../process-services-cloud/src/lib/task/directives/task-directive.module.ts","../../../process-services-cloud/src/lib/task/task-form/components/task-form-cloud.component.ts","../../../process-services-cloud/src/lib/task/task-form/task-form.module.ts","../../../process-services-cloud/src/lib/task/task-cloud.module.ts","../../../process-services-cloud/src/lib/process/process-filters/models/process-filter-cloud.model.ts","../../../process-services-cloud/src/lib/process/process-filters/services/process-filter-cloud.service.ts","../../../process-services-cloud/src/lib/process/process-filters/components/process-filters-cloud.component.ts","../../../process-services-cloud/src/lib/process/process-filters/components/process-filter-dialog-cloud.component.ts","../../../process-services-cloud/src/lib/process/services/process-cloud.service.ts","../../../process-services-cloud/src/lib/process/process-filters/components/edit-process-filter-cloud.component.ts","../../../process-services-cloud/src/lib/process/process-filters/process-filters-cloud.module.ts","../../../process-services-cloud/src/lib/process/process-list/services/process-list-cloud.service.ts","../../../process-services-cloud/src/lib/process/process-list/models/process-cloud-preset.model.ts","../../../process-services-cloud/src/lib/process/process-list/models/process-cloud-query-request.model.ts","../../../process-services-cloud/src/lib/process/process-list/models/process-list-sorting.model.ts","../../../process-services-cloud/src/lib/process/process-list/components/process-list-cloud.component.ts","../../../process-services-cloud/src/lib/process/process-list/process-list-cloud.module.ts","../../../process-services-cloud/src/lib/process/start-process/services/start-process-cloud.service.ts","../../../process-services-cloud/src/lib/process/start-process/models/process-payload-cloud.model.ts","../../../process-services-cloud/src/lib/pipes/process-name-cloud.pipe.ts","../../../process-services-cloud/src/lib/process/start-process/components/start-process-cloud.component.ts","../../../process-services-cloud/src/lib/process/start-process/start-process-cloud.module.ts","../../../process-services-cloud/src/lib/process/process-header/components/process-header-cloud.component.ts","../../../process-services-cloud/src/lib/process/process-header/process-header-cloud.module.ts","../../../process-services-cloud/src/lib/process/directives/cancel-process.directive.ts","../../../process-services-cloud/src/lib/process/directives/process-directive.module.ts","../../../process-services-cloud/src/lib/process/process-cloud.module.ts","../../../process-services-cloud/src/lib/services/user-preference-cloud.service.ts","../../../process-services-cloud/src/lib/services/form-fields.interfaces.ts","../../../process-services-cloud/src/lib/services/local-preference-cloud.service.ts","../../../process-services-cloud/src/lib/form/components/cloud-form-rendering.service.ts","../../../process-services-cloud/src/lib/pipes/process-services-cloud-pipe.module.ts","../../../process-services-cloud/src/lib/process-services-cloud.module.ts","../../../process-services-cloud/src/lib/task/services/start-task-cloud.service.ts","../../../process-services-cloud/src/lib/models/application-version.model.ts"],"names":["NgModule","args","providers","provide","MAT_FORM_FIELD_DEFAULT_OPTIONS","useValue","floatLabel","imports","MatAutocompleteModule","MatButtonModule","MatCardModule","MatDialogModule","MatCheckboxModule","MatDatepickerModule","MatGridListModule","MatIconModule","MatInputModule","MatListModule","MatOptionModule","MatRadioModule","MatSelectModule","MatSlideToggleModule","MatTableModule","MatTabsModule","MatProgressSpinnerModule","MatNativeDateModule","MatRippleModule","MatTooltipModule","MatChipsModule","MatMenuModule","MatExpansionModule","exports","DEFAULT_APP_INSTANCE_THEME","DEFAULT_APP_INSTANCE_ICON","AppDetailsCloudComponent","this","selectedApp","EventEmitter","prototype","onSelectApp","app","emit","getTheme","applicationInstance","theme","getIcon","icon","Component","selector","template","encapsulation","ViewEncapsulation","None","Input","Output","AppsProcessCloudService","apiService","logService","appConfigService","loadApps","getDeployedApplicationsByStatus","status","role","hasDeployedApps","of","deployedApps","getApplicationsByStatus","length","apps","get","map","_this","api","getInstance","oauth2Auth","path","getApplicationUrl","queryParams","roles","sort","from","callCustomApi","pipe","applications","list","entries","application","entry","catchError","err","handleError","error","throwError","Injectable","providedIn","AlfrescoApiService","LogService","AppConfigService","AppListCloudComponent","appsProcessCloudService","layoutType","LAYOUT_GRID","appClick","loadingError$","Subject","hasEmptyCustomContentTemplate","ngOnInit","isValidType","setDefaultLayoutType","apps$","RUNNING_STATUS","next","ngAfterContentInit","emptyCustomContent","LAYOUT_LIST","isList","isGrid","ContentChild","CustomEmptyContentTemplateDirective","CommonModule","TemplateModule","MaterialModule","FlexLayoutModule","CoreModule","declarations","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","call","__extends","TypeError","String","__","constructor","create","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","e","rejected","result","done","then","apply","__generator","body","f","y","t","g","_","label","sent","trys","ops","verb","throw","return","Symbol","iterator","n","v","op","pop","push","__values","o","s","m","i","__read","r","ar","__spread","arguments","concat","obj","appName","appVersion","assignee","claimedDate","createdDate","createdFrom","createdTo","description","dueDate","lastModifiedFrom","lastModifiedTo","dueDateFrom","dueDateTo","id","name","owner","parentTaskId","standalone","priority","processDefinitionId","processDefinitionName","processInstanceId","completedBy","maxItems","skipCount","sorting","completedFrom","completedTo","completedDate","candidateGroupId","BaseCloudService","defaultParams","httpMethod","contentTypes","accepts","returnType","getBasePath","contextRoot","post","url","data","callApi","assign","bodyParam","put","delete","params","pathParams","headerParams","formParams","responseType","defineProperty","TaskListCloudService","_super","getTaskByRequest","requestNode","queryUrl","buildQueryParams","sortingParams","buildSortingParam","response","entryData","queryParam","property","isExcludedField","isPropertyValueValid","undefined","models","finalSorting","models_1","models_1_1","orderBy","direction","encodeURI","ClaimTaskEnum","taskPresetsCloudDefaultModel","default","key","type","title","sortable","cssClass","StartTaskCloudRequestModel","candidateUsers","candidateGroups","formKey","payloadType","version","DEFAULT_TASK_PRIORITIES","TASK_ASSIGNED_STATE","TASK_CREATED_STATE","TaskCloudService","translateService","identityUserService","dataChangesDetected$","completeTask","taskId","canCompleteTask","taskDetails","isAssignedToMe","isTaskEditable","isAssigneePropertyClickable","isClickable","states","includes","canClaimTask","canUnclaimTask","currentUser","getCurrentUserInfo","username","claimTask","res","unclaimTask","getTaskById","createNewTask","startTaskRequest","payload","JSON","stringify","updateTask","getCandidateUsers","getCandidateGroups","getProcessDefinitions","processDefs","ProcessDefinitionCloud","payLoad","getPriorityLabel","priorityItem","priorities","find","item","toString","instant","TranslationService","IdentityUserService","BaseTaskListCloudComponent","taskCloudService","userPreferences","presetKey","selectionMode","multiselect","stickyHeader","showActions","actionsPosition","showContextMenu","showRowContextMenu","showRowActionsMenu","executeRowAction","rowClick","rowsSelected","success","rows","isLoading","defaultSorting","onDestroy$","size","paginationSize","pagination","BehaviorSubject","totalItems","boundReplacePriorityValues","replacePriorityValues","bind","select","UserPreferenceValues","PaginationSize","takeUntil","subscribe","pageSize","ngOnChanges","changes","formatSorting","currentValue","reload","ngOnDestroy","complete","createDatatableSchema","createRequestNode","load","isListEmpty","resetPagination","updatePagination","onSortingChanged","event","setSorting","detail","onRowClick","currentInstanceId","getValue","onRowSelect","selectedInstances","selection","onRowUnselect","onRowKeyUp","keyboardEvent","preventDefault","row","onShowRowActionsMenu","onShowRowContextMenu","onExecuteRowAction","sortDetail","toUpperCase","TaskListCloudSortingModel","formattedSorting","isValidSorting","toLocaleLowerCase","column","split","reduce","source","DataTableSchema","Directive","UserPreferencesService","TaskListCloudComponent","taskListCloudService","PRESET_KEY","tasks","TaskQueryCloudRequestModel","ServiceTaskListCloudService","getServiceTaskByRequest","getServiceTaskStatus","serviceTaskId","ServiceTaskListCloudComponent","serviceTaskListCloudService","_a","activityName","_b","activityType","_c","_d","elementId","_e","executionId","_f","_g","processDefinitionKey","_h","processDefinitionVersion","_j","_k","serviceFullName","_l","serviceName","_m","serviceVersion","_o","startedDate","_p","_q","DateCloudFilterType","DateRangeFilterService","currentDate","Date","getDateRange","TODAY","getTodayDateRange","TOMORROW","getTomorrowDateRange","NEXT_7_DAYS","getNext7DaysDateRange","WEEK","getCurrentWeekRange","MONTH","getCurrentMonthDateRange","QUARTER","getQuarterDateRange","YEAR","getCurrentYearDateRange","resetDateRange","isDateRangeType","RANGE","startDate","endDate","moment","startOf","toISOString","add","endOf","AssignmentType","TaskFilterCloudModel","dateRangeFilterService","Math","random","substr","index","order","dueDateType","_dueDateFrom","_dueDateTo","taskName","completedDateType","_completedFrom","_completedTo","createdDateType","_createdFrom","_createdTo","showCounter","getStartDate","getEndDate","PROCESS_FILTERS_SERVICE_TOKEN","InjectionToken","TASK_FILTERS_SERVICE_TOKEN","NotificationCloudService","apollo","http","appsListening","initNotificationsForApp","httpLink","uri","webSocketLink","WebSocketLink","protocol","webSocketHost","options","reconnect","lazy","connectionParams","kaInterval","X-Authorization","token","link","query","definition","getMainDefinition","kind","operation","errorLink","onError","graphQLErrors","forward","graphQLErrors_1","graphQLErrors_1_1","extensions","code","oldHeaders","getContext","headers","setContext","createNamed","ApolloLink","cache","InMemoryCache","merge","defaultOptions","watchQuery","errorPolicy","makeGQLQuery","gqlQuery","use","gql","Apollo","HttpLink","TaskFilterCloudService","preferenceService","notificationCloudService","filtersSubject","filters$","asObservable","createDefaultFilters","prepareKey","getPreferences","switchMap","preferences","hasPreferences","hasTaskFilters","findFiltersByKeyInPreferences","createTaskFilters","defaultTaskFilters","filters","addFiltersToStream","filter","parse","createPreference","getTaskFiltersByKey","getPreferenceByKey","getTaskListFilters","getTaskFilterById","addFilter","newFilter","updatePreference","updateFilter","updatedFilter","itemIndex","findIndex","updateTaskFilters","updatedFilters","deleteFilter","deletedFilter","isDefaultFilter","filterName","getTaskFilterCounter","taskFilter","getTaskNotificationSubscription","events","engineEvents","Inject","BaseTaskFiltersCloudComponent","showIcons","counters$","updatedCounters","wasFilterUpdated","filterKey","addToUpdatedCounters","resetFilterCounter","filterIndex","indexOf","splice","TaskFiltersCloudComponent","taskFilterCloudService","translationService","filterSelected","filterClicked","filterCounterUpdated","enableNotifications","initFilterCounterNotifications","getFilters","previousValue","selectFilterAndEmit","resetFilter","filterParam","updateFilterCounters","forEach","updateFilterCounter","debounceTime","taskEvent","checkFilterCounter","entity","filterNotification","isFilterPresent","selectFilter","paramFilter","currentFilter","newParamFilter","onFilterClick","selectDefaultTaskFilter","isFilterListEmpty","DateRangeFilterComponent","dateChanged","dateTypeChange","filteredProperties","dateRangeForm","FormGroup","FormControl","to","createDefaultRangeOptions","defaultProperties","createDefaultDateOptions","filterProperty","isValidProperty","hasPreselectedValues","setPreselectedValues","onSelectionChange","option","onDateRangeClosed","dateRange","controls","processFilterProperty","attributes","getFilterAttribute","setValue","getFilterValue","attribute","filterProperties","NO_DATE","PeopleCloudComponent","mode","validate","readOnly","preSelectUsers","excludedUsers","userChipsCtrl","disabled","searchUserCtrl","selectUser","removeUser","changedUsers","warning","_searchUsers","selectedUsers","invalidUsers","searchUsers$","_subscriptAnimationState","searchedValue","validationLoading","searchLoading","loadClientId","initSearch","valueChanged","hasPreSelectUsers","loadPreSelectUsers","hasPreselectedUsersCleared","isValidationEnabled","isAppNameChanged","getClientIdByApplicationName","toPromise","clientId","enable","valueChanges","tap","setTypingError","distinctUntilChanged","trim","markAsPristine","markAsUntouched","resetSearchUsers","search","findUsersByName","mergeMap","users","user","isUserAlreadySelected","isExcludedUser","checkUserHasAccess","hasRole","hasRoles","filterUsersByRoles","change","userId","checkUserHasAnyClientAppRole","checkUserHasClientApp","checkUserHasRole","filteredUser","searchUser","selectedUser","compare","excludedUser","isSingleMode","removeDuplicatedUsers","validatePreselectUsers","getPreselectedUsers","validUsers","validationResult","readonly","error_1","checkPreselectValidationErrors","preselectedUser","identityUser","uniquePropertyIdentifiers","keys","getSearchKey","email","findUserById","findUserByUsername","findUserByEmail","self","auxUser","generateInvalidUsersMessage","message","onSelect","isMultipleMode","userInput","nativeElement","userChipsCtrlValue","onRemove","userToRemove","removeUserFromSelected","markAsDirty","markAsTouched","removeUserFromValidation","indexToRemove","validateUsersMessage","invalidUser","setErrors","searchTypingError","errors","hasPreselectError","getDisplayName","FullNamePipe","transform","isSingleSelectionReadonly","getSelectedUsers","isReadonly","isValidationLoading","setFocus","isFocused","hasError","getValidationPattern","pattern","requiredPattern","getValidationMaxLength","maxlength","requiredLength","getValidationMinLength","minlength","animations","trigger","state","style","opacity","transition","animate","changeDetection","ChangeDetectionStrategy","OnPush","ViewChild","FormsModule","ReactiveFormsModule","ServiceTaskFilterCloudService","defaultServiceTaskFilters","generateRandomId","TaskFilterDialogCloudComponent","fb","dialogRef","defaultIcon","filterForm","group","Validators","required","onSaveClick","close","action","ACTION_SAVE","nameController","onCancelClick","isValid","valid","FormBuilder","MatDialogRef","MAT_DIALOG_DATA","BaseEditTaskFilterCloudComponent","formBuilder","dateAdapter","userPreferencesService","dialog","showTitle","showTaskFilterName","showFilterActions","actions","DEFAULT_ACTIONS","sortProperties","applicationNames","processDefinitionNames","formHasBeenChanged","taskFilterProperties","taskFilterActions","toggleFilterActions","sortDirections","allProcessDefinitionNamesOption","filterChange","Locale","locale","setLocale","retrieveTaskFilterAndBuildForm","createFilterActions","actionType","tooltip","ACTION_SAVE_AS","ACTION_DELETE","hasFormChanged","onExpand","onClose","isDisabledAction","isDisabledForDefaultFilters","deepCompare","left","right","toLowerCase","getSanitizeFilterName","replaceSpaceWithHyphen","regExt","RegExp","replace","executeFilterActions","save","saveAs","getRunningApplications","APP_RUNNING_STATUS","processDefinitions","processDefinition","checkMandatoryActions","isValidAction","isFormValid","editTaskFilterForm","getPropertyController","onDateChanged","newDateValue","dateProperty","momentDate","FORMAT_DATE","controller","invalid","onDateRangeFilterChanged","dateType","onChangedUser","userProperty","onAssignedChange","assignedValue","onAssignedGroupsChange","groups","hasLastModifiedProperty","LAST_MODIFIED","checkMandatorySortProperties","createAndFilterActions","checkForProperty","hasSortProperty","SORT","removeOrderProperty","ORDER","createAndFilterProperties","checkMandatoryFilterProperties","APPLICATION_NAME","PROCESS_DEFINITION_NAME","createTaskFilterProperties","onFilterChange","formValues","assignNewFilter","getFormControlsConfig","getAttributesControlConfig","current","values","buildForm","onDateTypeChange","finalize","deleteAction","restoreDefaultTaskFilters","saveAction","changedTaskFilter","saveAsAction","open","height","minWidth","afterClosed","filterId","resultFilter_1","getDefaultFilterProperties","getDefaultSortProperties","ACTIONS_DISABLED_BY_DEFAULT","DateAdapter","MatDialog","EditServiceTaskFilterCloudComponent","serviceTaskFilterCloudService","model","filterToUpdate","filterToDelete","filterToAdd","getStatusOptions","statusOptions","createSortProperties","EditTaskFilterCloudComponent","setLastModifiedToFilter","createLastModifiedProperty","lastModifiedToFilterValue","set","hour","minute","second","dateFilterOptions","ServiceTaskFiltersCloudComponent","TaskAssignmentFilterCloudComponent","assignedChange","assignedGroupChange","groupForm","assignmentTypeList","unassigned","UNASSIGNED","CURRENT_USER","CANDIDATE_GROUPS","isFilterPropertyDefined","setDefaultAssignedGroups","setDefaultAssignmentType","isCandidateGroupsType","assignmentType","onAssignmentTypeChange","onChangedGroups","assignmentAttr","taskFilterProperty","assignmentGroupsAttr","GroupCloudComponent","identityGroupService","preSelectGroups","groupChipsCtrl","searchGroupsControl","selectGroup","removeGroup","changedGroups","searchGroups","selectedGroups","invalidGroups","searchGroups$","hasPreselectedGroupsChanged","hasModeChanged","isValidationChanged","hasPreSelectGroups","loadPreSelectGroups","hasPreselectedGroupsCleared","resetSearchGroups","findGroupsByName","isGroupAlreadySelected","checkGroupHasAccess","filterGroupsByRoles","searchedGroup","groupId","checkGroupHasAnyClientAppRole","checkGroupHasClientApp","selectedGroup","searchGroup","getPreselectedGroups","removeDuplicatedGroups","validatePreselectGroups","isPreselectedGroupInvalid","generateInvalidGroupsMessage","validateGroupsMessage","invalidGroup","checkGroupHasRole","filteredGroup","groupInput","groupChipsCtrlValue","groupToRemove","removeGroupFromSelected","removeGroupFromValidation","preselectedGroup","validatedGroup","auxGroup","IdentityGroupService","InitialGroupNamePipe","getInitialGroupName","groupName","Pipe","MOMENT_DATE_FORMATS","HttpClientModule","AppListCloudModule","GroupCloudModule","ProcessCommonModule","PeopleCloudModule","useClass","MomentDateAdapter","MAT_DATE_FORMATS","ɵ0$1","StartTaskCloudComponent","taskService","DATE_FORMAT","maxNameLength","MAX_NAME_LENGTH","cancel","submitted","candidateGroupNames","assigneeForm","loadCurrentUser","loadDefaultPriorities","taskForm","maxLength","getMaxNameLength","whitespaceValidator","assigneeName","saveTask","newTask","onCancel","dateError","onAssigneeSelect","onAssigneeRemove","onCandidateGroupSelect","candidateGroup","onCandidateGroupRemove","canStartTask","control","isWhitespace","whitespace","onFormSelect","ɵ0$2","TaskVariableCloud","hasValue","FormCloudService","_uploadApi","UploadApi","getTaskForm","getTask","task","getForm","form","flattenForm","formRepresentation","formDefinition","saveTaskForm","formId","apiUrl","saveFormRepresentation","createTemporaryRawRelatedContent","file","nodeId","contentHost","changedConfig","lastConfig","provider","hostEcm","setConfig","uploadApi","uploadFile","overwrite","completeTaskForm","outcome","completeFormRepresentation","getTaskVariables","variable","getRestWidgetData","formName","widgetId","parseForm","json","formValues_1","FormModel","fields","outcomes","FormOutcomeModel","SAVE_ACTION","isSystem","FormCloudComponent","formCloudService","formService","visibilityService","fieldValidators","FORM_FIELD_VALIDATORS","formSaved","formCompleted","formLoaded","formDataRefreshed","formContentClicked","subscriptions","content","UploadWidgetContentLinkModel","setNodeIdValueForViewersLinkedToUploadWidget","onFormDataRefreshed","updateFormValuesRequested","valuesToSetIfNotPresent","addValuesNotPresent","onKeyDown","cancelBubble","getFormByTaskId","getFormById","refreshFormData","onRefreshClicked","loadForm","findProcessVariablesByTaskId","isAProcessTask","taskRepresentation","processDefinitionDeploymentId","forkJoin","formCloudRepresentationJSON","processVariables","parsedForm","refreshVisibility","validateForm","onFormLoaded","onTaskSaved","onTaskSavedError","onTaskCompleted","onTaskCompletedError","getFormDefinitionOutcomes","checkVisibility","field","onExecuteOutcome","FormOutcomeEvent","defaultPrevented","executeOutcome","storeFormAsMetadata","FormBaseComponent","FormService","WidgetVisibilityService","HostListener","FormDefinitionSelectorCloudService","getForms","formData","getStandAloneTaskForms","FormDefinitionSelectorCloudComponent","formDefinitionCloudService","selectForm","forms$","DateCloudWidgetComponent","typeId","DATE_FORMAT_CLOUD","overrideDisplayFormat","dateDisplayFormat","minValue","minDate","maxValue","maxDate","date","format","onFieldChanged","WidgetComponent","ɵ0$3","host","(click)","(blur)","(change)","(focus)","(focusin)","(focusout)","(input)","(invalid)","(select)","DropdownCloudWidgetComponent","hasRestUrl","isLinkedWidget","persistFieldOptionsFromRestApi","loadFieldOptionsForLinkedWidget","formFieldValueChanged","isFormFieldEventOfTypeDropdown","isParentFormFieldEvent","valueOfParentWidget","parentValueChanged","isValidRestType","buildBodyParam","updateForm","parentWidgetValue","getParentWidgetValue","getLinkedWidgetId","parentWidgetId","parentWidget","getFormFieldById","isValidValue","persistFieldOptionsFromManualList","isDefaultValue","addDefaultOption","DEFAULT_OPTION","fieldId","getFormFields","hasRuleEntries","getRuleEntries","ruleEntry","rule","selectionChangedForField","formFieldValueChangedEvent","FormFieldEvent","FormFieldTypes","DROPDOWN","restUrl","ruleOn","compareDropdownValues","opt1","opt2","getOptionValue","fieldValue","hasMultipleValues","optionType","isReadOnlyType","GroupCloudWidgetComponent","placeholder","preSelectGroup","statusChanges","markAsInvalid","onChangedGroup","PeopleCloudWidgetComponent","ContentCloudNodeSelectorService","notificationService","sourceNodeNotFound","_nodesApi","NodesApi","openUploadFileDialog","currentFolderId","isAllFileSources","restrictRootToCurrentFolderId","actionName","NodeAction","ATTACH","isSelectionValid","isFile","showFilesInResult","showDropdownSiteList","showLocalUploadButton","openContentNodeDialog","getNodeIdFromPath","destinationFolderPath","alias","getNodeId","getNodeIdFromFolderVariableValue","variableValue","defaultAlias","isExistingNode","mapTo","error_2","relativePath","opts","nodesApi","getNode","nodeEntry","currentPanelClass","chosenWidth","contentNodeDialog","ContentNodeSelectorComponent","panelClass","width","afterOpened","showWarning","closeAll","NotificationService","ProcessCloudContentService","contentService","downloadService","_authenticationApi","AuthenticationApi","getRawContentNode","getNodeContent","downloadNodeContent","blob","fileName","downloadBlob","downloadFile","getAuthTicket","ticket","getContentUrl","downloadUrl","authenticationApi","getTicket","ContentService","DownloadService","FileSourceTypes","DestinationFolderPathType","UploadCloudWidgetComponent","thumbnailService","processCloudContentService","multipleOption","hasFile","fixIncompatibilityFromPreviousAndNewForm","getMultipleFileParam","setDestinationFolderPathFromMappedVariable","removeFile","removeElementFromList","onFileChanged","files","filesSaved","target","isUploaded","uploadRawContent","some","mimeType","getMimeTypeIcon","multiple","filteredValues","uploadedFiles","resetFormValues","fileClicked","isAlfrescoAndLocal","fileSource","serviceId","ALL_FILE_SOURCES_SERVICE_ID","isPathVariableType","prepareUploadWidgetDestinationFolderPathFromStringVariable","prepareUploadWidgetDestinationFolderPathFromFolderVariable","STRING_TYPE","setUploadWidgetDestinationFolderPath","getDestinationFolderPathValue","FOLDER_TYPE","folder","getProcessVariableValue","ThumbnailService","AttachFileCloudWidgetComponent","logger","thumbnails","contentNodeSelectorService","contentNodeSelectorPanelService","rootNodeId","ALIAS_USER_FOLDER","displayedColumns","contentModelFormFileHandler","displayableCMProperties","isPathStaticType","STATIC_TYPE","isUploadButtonVisible","onRemoveAttachFile","selectedNode","fetchAppNameFromAppConfig","replaceAppNameAliasWithValue","match","APP_NAME","openSelectDialog","selectedMode","getDestinationFolderNodeId","customModels","selections","node","selectionWithoutDuplication","removeExistingSelection","destinationPath","getAliasAndRelativePathFromDestinationFolderPath","startOfRelativePathIndex","substring","isValidAlias","existingNode","opt","downloadContent","onAttachFileClicked","nodeSelector","ContentLinkModel","getWidgetIcon","onRowClicked","isRetrieveMetadataOptionEnabled","values_1","acsNode","metadata","properties","sanitizedKey","menuOptions","RETRIEVE_METADATA_OPTION","VALID_ALIAS","ALIAS_ROOT_FOLDER","ContentNodeSelectorPanelService","PropertiesViewerWidgetComponent","nodeContentLoaded","onNodeContentLoaded","PropertiesViewerWrapperComponent","nodesApiService","loading","displayAspect","isFirstChange","retrievedNode","NodesApiService","RadioButtonsCloudWidgetComponent","getValuesFromRestApi","onOptionClick","optionSelected","fieldChanged","isChecked","restIdProperty","restLabelProperty","FilePropertiesTableCloudComponent","localizedDatePipe","attachFileClick","contentModelFileHandler","removeAttachFile","getColumnValue","displayableCMProperty","prefixedName","fieldProperty","defaultValue","checkDateTypeAndTransform","dataType","displayMenuOption","LocalizedDatePipe","ContentNodeSelectorModule","ContentMetadataModule","FormCustomOutcomesComponent","FormCloudModule","TaskHeaderCloudComponent","appConfig","cardViewUpdateService","claim","unclaim","inEdit","displayDateClearAction","dateFormat","dateLocale","dateTimeFormat","loadTaskDetailsById","itemUpdated$","updateTaskDetails","concatMap","loadParentName","refreshData","initDefaultProperties","CardViewTextItemModel","clickable","CardViewSelectItemModel","editable","displayNoneOption","options$","CardViewDatetimeItemModel","category","CardViewDateItemModel","parentTaskName","multiline","CardViewArrayItemModel","noOfItemsToDisplay","filteredProperties_1","cardItem","isValidSelection","updateNotification","changed","updateElement","isCompleted","hasAssignee","isTaskValid","isTaskAssigned","CardViewUpdateService","forChild","CompleteTaskDirective","taskListService","invalidParams","validateInputs","isAppValid","Error","join","onClick","ClaimTaskCloudDirective","UnClaimTaskCloudDirective","TaskFormCloudComponent","formRenderingService","showRefreshButton","showValidationIcon","showCancelButton","showCompleteButton","taskCompleted","taskClaimed","taskUnclaimed","cancelClick","setComponentTypeResolver","loadTask","details","hasForm","hasCandidateUsers","hasCandidateGroups","hasCandidateUsersOrGroups","isReadOnly","onCompleteTask","onClaimTask","onUnclaimTask","onFormSaved","onFormCompleted","onFormContentClicked","FormRenderingService","TaskDirectiveModule","TaskListCloudModule","TaskFiltersCloudModule","StartTaskCloudModule","TaskHeaderCloudModule","TaskFormModule","ProcessFilterCloudModel","appVersionMultiple","isArray","processName","initiator","lastModified","startFrom","_startFrom","startTo","_startTo","startedDateType","suspendedDateType","_suspendedFrom","_suspendedTo","suspendedFrom","suspendedTo","ProcessFilterCloudService","readQueryParams","str","parseInt","writeQueryParams","filterProperties_1","filterProperties_1_1","prop","versions","valueOf","hasProcessFilters","createProcessFilters","defaultProcessFilters","handleProcessError","getProcessFilters","getFilterById","getProcessFiltersByKey","updateProcessFilters","ProcessFiltersCloudComponent","processFilterCloudService","checkFilterNamesEquality","name1","name2","translatedName1","translatedName2","selectFilterById","selectDefaultProcessFilter","getCurrentFilter","isActiveFilter","ProcessFilterDialogCloudComponent","ProcessCloudService","dataChangesDetected","getProcessInstanceById","getApplicationVersions","appEntities","cancelProcess","EditProcessFilterCloudComponent","processCloudService","DEFAULT_PROCESS_FILTER_PROPERTIES","DEFAULT_SORT_PROPERTIES","showProcessFilterName","filterHasBeenChanged","directions","actionDisabledForDefault","processFilterProperties","processFilterActions","appVersionOptions","initiatorOptions","_filter","isChanged","isFilterChanged","retrieveProcessFilterAndBuildForm","editProcessFilterForm","processFilter","filterChangeSub","unsubscribe","newValue","compareFilters","getAppVersionOptions","createProcessFilterProperties","createProcessSortProperties","sortProperty","appVersions","processProperty","editedQuery","currentQuery","restoreDefaultProcessFilters","hasFilterChanged","toDate","filterModel","oldValue","ɵ0$4","ProcessListCloudService","getProcessByRequest","buildFilterForAllStatus","processCloudPresetsDefaultModel","businessKey","ProcessListCloudComponent","processListCloudService","isPropertyChanged","isAnyPropertyChanged","getCurrentId","processes","getAppVersions","ProcessQueryCloudRequestModel","ProcessListCloudSortingModel","DataTableComponent","CustomLoadingContentTemplateDirective","StartProcessCloudService","createProcess","startCreatedProcess","createdProcessInstanceId","startProcess","updateProcess","processInstance","deleteProcess","variables","ProcessNameCloudPipe","processNameFormat","DATE_TIME_IDENTIFIER_REG_EXP","presentDateTime","now","PROCESS_DEFINITION_IDENTIFIER_REG_EXP","selectedProcessDefinitionName","StartProcessCloudComponent","startProcessCloudService","processNameCloudPipe","showSelectProcessDropdown","processDefinitionSelection","processDefinitionList","errorMessageId","processPayloadCloud","ProcessPayloadCloud","filteredProcesses","isFormCloudLoaded","disableStartButton","processDefinitionLoaded","processForm","processInstanceName","processDefinitionNameValidator","PROCESS_DEFINITION_DEBOUNCE","selectProcessDefinitionByProcesDefinitionName","PROCESS_FORM_DEBOUNCE","isProcessSelectionValid","generateProcessInstance","currentCreatedProcess","loadProcessDefinitions","processDefinitionCurrent","formCloud","isProcessPayloadValid","createPayload","getProcessDefinitionListByNameOrKey","isProcessFormValid","setProcessDefinitionOnForm","process","processDefinitionCloud","getProcessDefinition","getProcessIfExists","matchedProcess","getProcessDefinitionByName","selectDefaultProcessDefinition","selectedProcess","processDefinitionSelectionChanged","resetErrorMessage","processDefinitionRepresentations","isValidName","isProcessDefinitionsEmpty","buildProcessCloudPayload","cancelStartProcess","resetProcessDefinitionList","displayProcessNameOnDropdown","displayDropdown","stopPropagation","inputAutocomplete","panelOpen","closePanel","openPanel","processDefinitionFieldValue","processDefinitionNameError","invalid name","getProcessDefinitionValue","processInstanceDetails","defaultProcessName","MatAutocompleteTrigger","ProcessHeaderCloudComponent","loaded","processDetails","onLoaded","loadProcessInstanceDetails","parentId","class","CancelProcessDirective","elementRef","canCancelProcess","checkCanCancelProcess","setElementVisibility","ElementRef","ProcessFiltersCloudModule","ProcessListCloudModule","StartProcessCloudModule","ProcessHeaderCloudModule","ProcessDirectiveModule","UserPreferenceCloudService","newPreference","updatedPreference","deletePreference","PeopleModeOptions","FormFieldType","LocalPreferenceCloudService","storage","prepareLocalPreferenceResponse","getItem","storedFilters","setItem","StorageService","CloudFormRenderingService","register","upload","dropdown","people","functional-group","properties-viewer","radio-buttons","ProcessServicesCloudModule","forRoot","preferenceServiceInstance","ngModule","TRANSLATION_PROVIDER","multi","useExisting","ProcessCloudModule","TaskCloudModule","ProcessServicesCloudPipeModule","ɵ0$5","StartTaskCloudService"],"mappings":"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","sourcesContent":["/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NgModule } from '@angular/core';\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatNativeDateModule, MatOptionModule, MatRippleModule } from '@angular/material/core';\nimport { MAT_FORM_FIELD_DEFAULT_OPTIONS } from '@angular/material/form-field';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatTooltipModule } from '@angular/material/tooltip';\n\n@NgModule({\n    providers: [\n        { provide: MAT_FORM_FIELD_DEFAULT_OPTIONS, useValue: { floatLabel: 'never' } }\n    ],\n    imports: [\n        MatAutocompleteModule, MatButtonModule, MatCardModule, MatDialogModule,\n        MatCheckboxModule, MatDatepickerModule, MatGridListModule, MatIconModule, MatInputModule,\n        MatListModule, MatOptionModule, MatRadioModule, MatSelectModule, MatSlideToggleModule, MatTableModule,\n        MatTabsModule, MatProgressSpinnerModule, MatNativeDateModule, MatRippleModule, MatTooltipModule,\n        MatChipsModule, MatMenuModule, MatExpansionModule\n    ],\n    exports: [\n        MatAutocompleteModule, MatButtonModule, MatCardModule, MatDialogModule,\n        MatCheckboxModule, MatDatepickerModule, MatGridListModule, MatIconModule, MatInputModule,\n        MatListModule, MatOptionModule, MatRadioModule, MatSelectModule, MatSlideToggleModule, MatTableModule,\n        MatTabsModule, MatProgressSpinnerModule, MatNativeDateModule, MatRippleModule, MatTooltipModule,\n        MatChipsModule, MatMenuModule, MatExpansionModule\n    ]\n})\nexport class MaterialModule {}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const DEFAULT_APP_INSTANCE_THEME = 'theme-2';\nexport const DEFAULT_APP_INSTANCE_ICON = 'favorite_border';\n\nexport interface ApplicationInstanceModel {\n    name?: string;\n    createdAt?: any;\n    status?: string;\n    theme?: string;\n    icon?: string;\n    description?: string;\n    connectors?: any;\n    descriptor?: Descriptor;\n}\n\nexport interface Descriptor {\n    name?: string;\n    projectId?: string;\n    releaseId?: string;\n    releaseVersion?: number;\n    security?: DescriptorSecurity[];\n    infrastructure?: DescriptorInfrastructure;\n    variables?: DescriptorVariables;\n    version?: string;\n}\n\nexport interface DescriptorSecurity {\n    role: string;\n    groups: string[];\n    users: string[];\n}\n\nexport interface DescriptorVariables {\n    [key: string]: any;\n    connectors?: { [key: string]: any; };\n}\n\nexport interface DescriptorInfrastructure {\n    [key: string]: any;\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, Input, Output, EventEmitter, ViewEncapsulation } from '@angular/core';\nimport { ApplicationInstanceModel, DEFAULT_APP_INSTANCE_ICON, DEFAULT_APP_INSTANCE_THEME } from '../models/application-instance.model';\n\n@Component({\n  selector: 'adf-cloud-app-details',\n  templateUrl: './app-details-cloud.component.html',\n  styleUrls: ['./app-details-cloud.component.scss'],\n  encapsulation: ViewEncapsulation.None\n})\n\nexport class AppDetailsCloudComponent {\n\n  @Input()\n  applicationInstance: ApplicationInstanceModel;\n\n  @Output()\n  selectedApp = new EventEmitter<ApplicationInstanceModel>();\n\n  /**\n   * Pass the selected app as next\n   * @param app\n   */\n  onSelectApp(app: ApplicationInstanceModel): void {\n    this.selectedApp.emit(app);\n  }\n\n  getTheme(): string {\n    return this.applicationInstance.theme || DEFAULT_APP_INSTANCE_THEME;\n  }\n\n  getIcon(): string {\n    return this.applicationInstance.icon || DEFAULT_APP_INSTANCE_ICON;\n  }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Injectable } from '@angular/core';\nimport { Observable, from, throwError, of } from 'rxjs';\nimport { map, catchError } from 'rxjs/operators';\nimport { AlfrescoApiService, AppConfigService, LogService } from '@alfresco/adf-core';\nimport { Oauth2Auth } from '@alfresco/js-api';\nimport { ApplicationInstanceModel } from '../models/application-instance.model';\n\n@Injectable({ providedIn: 'root' })\nexport class AppsProcessCloudService {\n\n    deployedApps: ApplicationInstanceModel[];\n\n    constructor(\n        private apiService: AlfrescoApiService,\n        private logService: LogService,\n        private appConfigService: AppConfigService) {\n        this.loadApps();\n    }\n\n    /**\n     * Gets a list of deployed apps for this user by status.\n     * @param status Required status value\n     * @param role to filter the apps\n     * @returns The list of deployed apps\n     */\n    getDeployedApplicationsByStatus(status: string, role?: string): Observable<ApplicationInstanceModel[]> {\n        return this.hasDeployedApps() ? of(this.deployedApps) : this.getApplicationsByStatus(status, role);\n    }\n\n    hasDeployedApps(): boolean {\n        return this.deployedApps && this.deployedApps.length > 0;\n    }\n\n    loadApps() {\n        const apps = this.appConfigService.get<any>('alfresco-deployed-apps', []);\n        apps.map((app) => {\n            app.theme = app.theme ? app.theme : 'theme-1';\n            app.icon = app.icon ? app.icon : 'favorite';\n        });\n        this.deployedApps = apps;\n    }\n\n    private getApplicationsByStatus(status: string, role?: string): Observable<ApplicationInstanceModel[]> {\n        if (status === '') {\n            return of([]);\n        }\n        const api: Oauth2Auth = this.apiService.getInstance().oauth2Auth;\n        const path = this.getApplicationUrl();\n        const pathParams = {}, queryParams = { status: status, roles : role, sort: 'name' },\n            headerParams = {}, formParams = {}, bodyParam = {},\n            contentTypes = ['application/json'], accepts = ['application/json'];\n\n        return from(api.callCustomApi(path, 'GET', pathParams, queryParams, headerParams, formParams, bodyParam,\n            contentTypes, accepts))\n            .pipe(\n                map((applications: any) => {\n                    return applications.list.entries.map((application) => application.entry);\n                }),\n                catchError((err) => this.handleError(err))\n            );\n    }\n\n    private getApplicationUrl(): string {\n        return `${this.appConfigService.get('bpmHost')}/deployment-service/v1/applications`;\n    }\n\n    private handleError(error?: any) {\n        this.logService.error(error);\n        return throwError(error || 'Server error');\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CustomEmptyContentTemplateDirective } from '@alfresco/adf-core';\nimport { AfterContentInit, Component, EventEmitter, Input, OnInit, Output, ContentChild } from '@angular/core';\nimport { Observable, of, Subject } from 'rxjs';\nimport { AppsProcessCloudService } from '../services/apps-process-cloud.service';\nimport { ApplicationInstanceModel } from '../models/application-instance.model';\nimport { catchError } from 'rxjs/operators';\n\n@Component({\n    selector: 'adf-cloud-app-list',\n    templateUrl: './app-list-cloud.component.html',\n    styleUrls: ['./app-list-cloud.component.scss']\n})\nexport class AppListCloudComponent implements OnInit, AfterContentInit {\n\n    public static LAYOUT_LIST: string = 'LIST';\n    public static LAYOUT_GRID: string = 'GRID';\n    public static RUNNING_STATUS: string = 'RUNNING';\n\n    @ContentChild(CustomEmptyContentTemplateDirective)\n    emptyCustomContent: CustomEmptyContentTemplateDirective;\n\n    /** (**required**) Defines the layout of the apps. There are two possible\n     * values, \"GRID\" and \"LIST\".\n     */\n    @Input()\n    layoutType: string = AppListCloudComponent.LAYOUT_GRID;\n\n    /** Emitted when an app entry is clicked. */\n    @Output()\n    appClick = new EventEmitter<ApplicationInstanceModel>();\n\n    apps$: Observable<any>;\n    loadingError$ = new Subject<boolean>();\n    hasEmptyCustomContentTemplate: boolean = false;\n\n    constructor(private appsProcessCloudService: AppsProcessCloudService) { }\n\n    ngOnInit() {\n        if (!this.isValidType()) {\n            this.setDefaultLayoutType();\n        }\n\n        this.apps$ = this.appsProcessCloudService.getDeployedApplicationsByStatus(AppListCloudComponent.RUNNING_STATUS)\n            .pipe(\n                catchError(() => {\n                    this.loadingError$.next(true);\n                    return of();\n                })\n            );\n    }\n\n    ngAfterContentInit() {\n        if (this.emptyCustomContent) {\n            this.hasEmptyCustomContentTemplate = true;\n        }\n    }\n\n    onSelectApp(app: ApplicationInstanceModel): void {\n        this.appClick.emit(app);\n    }\n\n    /**\n     * Check if the value of the layoutType property is an allowed value\n     */\n    isValidType(): boolean {\n        if (this.layoutType && (this.layoutType === AppListCloudComponent.LAYOUT_LIST || this.layoutType === AppListCloudComponent.LAYOUT_GRID)) {\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Assign the default value to LayoutType\n     */\n    setDefaultLayoutType(): void {\n        this.layoutType = AppListCloudComponent.LAYOUT_GRID;\n    }\n\n    /**\n     * Return true if the layout type is LIST\n     */\n    isList(): boolean {\n        return this.layoutType === AppListCloudComponent.LAYOUT_LIST;\n    }\n\n    /**\n     * Return true if the layout type is GRID\n     */\n    isGrid(): boolean {\n        return this.layoutType === AppListCloudComponent.LAYOUT_GRID;\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NgModule } from '@angular/core';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { MaterialModule } from '../material.module';\nimport { CommonModule } from '@angular/common';\nimport { AppDetailsCloudComponent } from './components/app-details-cloud.component';\nimport { AppListCloudComponent } from './components/app-list-cloud.component';\nimport { TemplateModule, CoreModule } from '@alfresco/adf-core';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        TemplateModule,\n        MaterialModule,\n        FlexLayoutModule,\n        CoreModule\n    ],\n    declarations: [\n        AppListCloudComponent,\n        AppDetailsCloudComponent\n    ],\n    exports: [\n        AppListCloudComponent,\n        AppDetailsCloudComponent\n    ]\n})\nexport class AppListCloudModule {\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\r\n\r\nexport function __spreadArray(to, from, pack) {\r\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n        if (ar || !(i in from)) {\r\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n            ar[i] = from[i];\r\n        }\r\n    }\r\n    return to.concat(ar || from);\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n}\r\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { TaskListCloudSortingModel } from './task-list-sorting.model';\n\nexport class TaskQueryCloudRequestModel {\n    appName: string;\n    appVersion?: string;\n    assignee?: string;\n    claimedDate?: string;\n    createdDate?: Date;\n    createdFrom?: string;\n    createdTo?: string;\n    description?: string;\n    dueDate?: any;\n    lastModifiedFrom?: any;\n    lastModifiedTo?: any;\n    dueDateFrom?: any;\n    dueDateTo?: any;\n    id?: string;\n    name?: string;\n    owner?: string;\n    parentTaskId?: string;\n    standalone?: boolean;\n    priority?: number;\n    processDefinitionId?: string;\n    processDefinitionName?: string;\n    processInstanceId?: string;\n    status?: string;\n    completedBy?: string;\n    maxItems: number;\n    skipCount: number;\n    sorting?: TaskListCloudSortingModel[];\n    completedDate?: Date;\n    completedFrom?: string;\n    completedTo?: string;\n    candidateGroupId?: string;\n\n    constructor(obj?: any) {\n        if (obj) {\n            this.appName = obj.appName;\n            this.appVersion = obj.appVersion;\n            this.assignee = obj.assignee;\n            this.claimedDate = obj.claimedDate;\n            this.createdDate = obj.createdDate;\n            this.createdFrom = obj.createdFrom;\n            this.createdTo = obj.createdTo;\n            this.description = obj.description;\n            this.dueDate = obj.dueDate;\n            this.lastModifiedFrom = obj.lastModifiedFrom;\n            this.lastModifiedTo = obj.lastModifiedTo;\n            this.dueDateFrom = obj.dueDateFrom;\n            this.dueDateTo = obj.dueDateTo;\n            this.id = obj.id;\n            this.name = obj.name;\n            this.owner = obj.owner;\n            this.parentTaskId = obj.parentTaskId;\n            this.standalone = obj.standalone;\n            this.priority = obj.priority;\n            this.processDefinitionId = obj.processDefinitionId;\n            this.processDefinitionName = obj.processDefinitionName;\n            this.processInstanceId = obj.processInstanceId;\n            this.status = obj.status;\n            this.completedBy = obj.completedBy;\n            this.maxItems = obj.maxItems;\n            this.skipCount = obj.skipCount;\n            this.sorting = obj.sorting;\n            this.completedFrom = obj.completedFrom;\n            this.completedTo = obj.completedTo;\n            this.completedDate = obj.completedDate;\n            this.candidateGroupId = obj.candidateGroupId;\n        }\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AlfrescoApiService, AppConfigService } from '@alfresco/adf-core';\nimport { from, Observable } from 'rxjs';\n\nexport interface CallApiParams {\n    path: string;\n    httpMethod: string;\n    pathParams?: any;\n    queryParams?: any;\n    headerParams?: any;\n    formParams?: any;\n    bodyParam?: any;\n    contentTypes?: string[];\n    accepts?: string[];\n    returnType?: any;\n    contextRoot?: string;\n    responseType?: string;\n}\n\nexport class BaseCloudService {\n\n    protected defaultParams: CallApiParams = {\n        path: '',\n        httpMethod: '',\n        contentTypes: ['application/json'],\n        accepts: ['application/json'],\n        returnType: Object\n    };\n\n    constructor(\n        protected apiService: AlfrescoApiService,\n        protected appConfigService: AppConfigService) {}\n\n    getBasePath(appName: string): string {\n        return appName\n            ? `${this.contextRoot}/${appName}`\n            : this.contextRoot;\n    }\n\n    protected post<T, R>(url: string, data?: T): Observable<R> {\n        return from(\n            this.callApi<R>({\n                ...this.defaultParams,\n                path: url,\n                httpMethod: 'POST',\n                bodyParam: data\n            })\n        );\n    }\n\n    protected put<T, R>(url: string, data?: T): Observable<R> {\n        return from(\n            this.callApi<R>({\n                ...this.defaultParams,\n                path: url,\n                httpMethod: 'PUT',\n                bodyParam: data\n            })\n        );\n    }\n\n    protected delete(url: string): Observable<void> {\n        return from(\n            this.callApi<void>({\n                ...this.defaultParams,\n                path: url,\n                httpMethod: 'DELETE'\n            })\n        );\n    }\n\n    protected get<T>(url: string, queryParams?: any): Observable<T> {\n        return from(\n            this.callApi<T>({\n                ...this.defaultParams,\n                path: url,\n                httpMethod: 'GET',\n                queryParams\n            })\n        );\n    }\n\n    protected callApi<T>(params: CallApiParams): Promise<T> {\n        return this.apiService.getInstance()\n            .oauth2Auth.callCustomApi(\n                params.path,\n                params.httpMethod,\n                params.pathParams,\n                params.queryParams,\n                params.headerParams,\n                params.formParams,\n                params.bodyParam,\n                params.contentTypes,\n                params.accepts,\n                params.returnType,\n                params.contextRoot,\n                params.responseType\n            );\n    }\n\n    protected get contextRoot() {\n        return this.appConfigService.get('bpmHost', '');\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Injectable } from '@angular/core';\nimport { AlfrescoApiService, AppConfigService, LogService } from '@alfresco/adf-core';\nimport { TaskQueryCloudRequestModel } from '../models/filter-cloud-model';\nimport { Observable, throwError } from 'rxjs';\nimport { TaskListCloudSortingModel } from '../models/task-list-sorting.model';\nimport { BaseCloudService } from '../../../services/base-cloud.service';\nimport { TaskCloudNodePaging } from '../models/task-cloud.model';\nimport { map } from 'rxjs/operators';\n\n@Injectable({ providedIn: 'root' })\nexport class TaskListCloudService extends BaseCloudService {\n\n    constructor(apiService: AlfrescoApiService,\n                appConfigService: AppConfigService,\n                protected logService: LogService) {\n        super(apiService, appConfigService);\n    }\n\n    /**\n     * Finds a task using an object with optional query properties.\n     * @param requestNode Query object\n     * @param queryUrl Query url\n     * @returns Task information\n     */\n    getTaskByRequest(requestNode: TaskQueryCloudRequestModel, queryUrl?: string): Observable<any> {\n        if (requestNode.appName || requestNode.appName === '') {\n            queryUrl = queryUrl || `${this.getBasePath(requestNode.appName)}/query/v1/tasks`;\n            const queryParams = this.buildQueryParams(requestNode);\n            const sortingParams = this.buildSortingParam(requestNode.sorting);\n            if (sortingParams) {\n                queryParams['sort'] = sortingParams;\n            }\n            return this.get<TaskCloudNodePaging>(queryUrl, queryParams).pipe(\n                map((response: any) => {\n                    const entries = response.list && response.list.entries;\n                    if (entries) {\n                        response.list.entries = entries.map((entryData: any) => entryData.entry);\n                    }\n                    return response;\n                })\n            );\n        } else {\n            this.logService.error('Appname is mandatory for querying task');\n            return throwError('Appname not configured');\n        }\n    }\n\n    protected buildQueryParams(requestNode: TaskQueryCloudRequestModel): Object {\n        const queryParam: Object = {};\n        for (const property in requestNode) {\n            if (requestNode.hasOwnProperty(property) &&\n                !this.isExcludedField(property) &&\n                this.isPropertyValueValid(requestNode, property)) {\n                queryParam[property] = requestNode[property];\n            }\n        }\n        return queryParam;\n    }\n\n    protected isExcludedField(property: string): boolean {\n        return property === 'appName' || property === 'sorting';\n    }\n\n    protected isPropertyValueValid(requestNode: any, property: string): boolean {\n        return requestNode[property] !== '' && requestNode[property] !== null && requestNode[property] !== undefined;\n    }\n\n    protected buildSortingParam(models: TaskListCloudSortingModel[]): string {\n        let finalSorting: string = '';\n        if (models) {\n            for (const sort of models) {\n                if (!finalSorting) {\n                    finalSorting = `${sort.orderBy},${sort.direction}`;\n                } else {\n                    finalSorting = `${finalSorting}&${sort.orderBy},${sort.direction}`;\n                }\n            }\n        }\n        return encodeURI(finalSorting);\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport enum ClaimTaskEnum {\n    claim = 'claim',\n    unclaim = 'unclaim'\n}\nexport interface TaskPriorityOption {\n    label: string;\n    key: string;\n    value: string;\n}\n\nexport const DEFAULT_TASK_PRIORITIES: TaskPriorityOption[] = [\n    { label: 'ADF_CLOUD_TASK_LIST.PROPERTIES.PRIORITY_VALUES.NONE', value: '0', key: '0' },\n    { label: 'ADF_CLOUD_TASK_LIST.PROPERTIES.PRIORITY_VALUES.LOW', value: '1', key: '1' },\n    { label: 'ADF_CLOUD_TASK_LIST.PROPERTIES.PRIORITY_VALUES.NORMAL', value: '2', key: '2' },\n    { label: 'ADF_CLOUD_TASK_LIST.PROPERTIES.PRIORITY_VALUES.HIGH', value: '3', key: '3' }\n];\n\nexport const TASK_ASSIGNED_STATE = 'ASSIGNED';\n\nexport const TASK_CREATED_STATE = 'CREATED';\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const taskPresetsCloudDefaultModel = {\n    'default': [\n        {\n            'key': 'name',\n            'type': 'text',\n            'title': 'ADF_CLOUD_TASK_LIST.PROPERTIES.NAME',\n            'sortable': true\n        },\n        {\n            'key': 'created',\n            'type': 'text',\n            'title': 'ADF_CLOUD_TASK_LIST.PROPERTIES.CREATED',\n            'cssClass': 'hidden',\n            'sortable': true\n        },\n        {\n            'key': 'assignee',\n            'type': 'text',\n            'title': 'ADF_CLOUD_TASK_LIST.PROPERTIES.ASSIGNEE',\n            'cssClass': 'hidden',\n            'sortable': true\n        }\n    ]\n};\n\nexport const serviceTaskPresetsCloudDefaultModel = {\n    'default': [\n        {\n            'key': 'activityName',\n            'type': 'text',\n            'title': 'ADF_CLOUD_SERVICE_TASK_LIST.PROPERTIES.ACTIVITY_NAME',\n            'sortable': true\n        },\n        {\n            'key': 'status',\n            'type': 'text',\n            'title': 'ADF_CLOUD_SERVICE_TASK_LIST.PROPERTIES.STATUS',\n            'sortable': true\n        },\n        {\n            'key': 'startedDate',\n            'type': 'text',\n            'title': 'ADF_CLOUD_SERVICE_TASK_LIST.PROPERTIES.STARTED_DATE',\n            'cssClass': 'hidden',\n            'sortable': true\n        },\n        {\n            'key': 'completedDate',\n            'type': 'text',\n            'title': 'ADF_CLOUD_SERVICE_TASK_LIST.PROPERTIES.COMPLETED_DATE',\n            'cssClass': 'hidden',\n            'sortable': true\n        }\n    ]\n};\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport class TaskListCloudSortingModel {\n    orderBy: string;\n    direction: string;\n\n    constructor(obj: any) {\n        if (obj) {\n            this.orderBy = obj.orderBy;\n            this.direction = obj.direction;\n        }\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport class StartTaskCloudRequestModel {\n\n    name: string;\n    description: string;\n    assignee: string;\n    priority: string;\n    dueDate: Date;\n    candidateUsers: string[];\n    candidateGroups: string[];\n    payloadType: string;\n    formKey: string;\n\n    constructor(obj?: any) {\n        if (obj) {\n            this.name = obj.name || null;\n            this.description = obj.description || null;\n            this.assignee = obj.assignee || null;\n            this.priority = obj.priority || null;\n            this.dueDate = obj.dueDate || null;\n            this.candidateUsers = obj.candidateUsers || null;\n            this.candidateGroups = obj.candidateGroups || null;\n            this.formKey = obj.formKey || null;\n            this.payloadType = 'CreateTaskPayload';\n        }\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport class ProcessDefinitionCloud {\n    id: string;\n    appName: string;\n    key: string;\n    formKey?: string;\n    appVersion: number;\n    version: number;\n    name: string;\n\n    constructor(obj?: any) {\n        this.id = obj && obj.id || null;\n        this.name = obj && obj.name || null;\n        this.appName = obj && obj.appName || null;\n        this.key = obj && obj.key || null;\n        this.formKey = obj && obj.formKey || null;\n        this.version = obj && obj.version || 0;\n        this.appVersion = obj && obj.appVersion || 0;\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Injectable } from '@angular/core';\nimport { AlfrescoApiService, LogService, AppConfigService, IdentityUserService, CardViewArrayItem, TranslationService } from '@alfresco/adf-core';\nimport { throwError, Observable, of, Subject } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { TaskDetailsCloudModel, StartTaskCloudResponseModel } from '../start-task/models/task-details-cloud.model';\nimport { BaseCloudService } from '../../services/base-cloud.service';\nimport { StartTaskCloudRequestModel } from '../start-task/models/start-task-cloud-request.model';\nimport { ProcessDefinitionCloud } from '../../models/process-definition-cloud.model';\nimport { DEFAULT_TASK_PRIORITIES, TaskPriorityOption, TASK_ASSIGNED_STATE, TASK_CREATED_STATE } from '../models/task.model';\nimport { TaskCloudServiceInterface } from './task-cloud.service.interface';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class TaskCloudService extends BaseCloudService implements TaskCloudServiceInterface {\n\n    dataChangesDetected$ = new Subject();\n\n    constructor(\n        apiService: AlfrescoApiService,\n        appConfigService: AppConfigService,\n        private logService: LogService,\n        private translateService: TranslationService,\n        private identityUserService: IdentityUserService\n    ) {\n        super(apiService, appConfigService);\n    }\n\n    /**\n     * Complete a task.\n     * @param appName Name of the app\n     * @param taskId ID of the task to complete\n     * @returns Details of the task that was completed\n     */\n    completeTask(appName: string, taskId: string): Observable<TaskDetailsCloudModel> {\n        if ((appName || appName === '') && taskId) {\n            const url = `${this.getBasePath(appName)}/rb/v1/tasks/${taskId}/complete`;\n            const payload = { 'payloadType': 'CompleteTaskPayload' };\n\n            return this.post<any, TaskDetailsCloudModel>(url, payload);\n        } else {\n            this.logService.error('AppName and TaskId are mandatory for complete a task');\n            return throwError('AppName/TaskId not configured');\n        }\n    }\n\n    /**\n     * Validate if a task can be completed.\n     * @param taskDetails task details object\n     * @returns Boolean value if the task can be completed\n     */\n    canCompleteTask(taskDetails: TaskDetailsCloudModel): boolean {\n        return taskDetails && taskDetails.status === TASK_ASSIGNED_STATE && this.isAssignedToMe(taskDetails.assignee);\n    }\n\n    /**\n     * Validate if a task is editable.\n     * @param taskDetails task details object\n     * @returns Boolean value if the task is editable\n     */\n    isTaskEditable(taskDetails: TaskDetailsCloudModel): boolean {\n        return taskDetails && taskDetails.status === TASK_ASSIGNED_STATE && this.isAssignedToMe(taskDetails.assignee);\n    }\n\n    isAssigneePropertyClickable(taskDetails: TaskDetailsCloudModel, candidateUsers: CardViewArrayItem[], candidateGroups: CardViewArrayItem[]): boolean {\n        let isClickable = false;\n        const states = [TASK_ASSIGNED_STATE];\n        if (candidateUsers?.length || candidateGroups?.length) {\n            isClickable = states.includes(taskDetails.status);\n        }\n        return isClickable;\n    }\n\n    /**\n     * Validate if a task can be claimed.\n     * @param taskDetails task details object\n     * @returns Boolean value if the task can be completed\n     */\n    canClaimTask(taskDetails: TaskDetailsCloudModel): boolean {\n        return taskDetails && taskDetails.status === TASK_CREATED_STATE;\n    }\n\n    /**\n     * Validate if a task can be unclaimed.\n     * @param taskDetails task details object\n     * @returns Boolean value if the task can be completed\n     */\n    canUnclaimTask(taskDetails: TaskDetailsCloudModel): boolean {\n        const currentUser = this.identityUserService.getCurrentUserInfo().username;\n        return taskDetails && taskDetails.status === TASK_ASSIGNED_STATE && taskDetails.assignee === currentUser;\n    }\n\n    /**\n     * Claims a task for an assignee.\n     * @param appName Name of the app\n     * @param taskId ID of the task to claim\n     * @param assignee User to assign the task to\n     * @returns Details of the claimed task\n     */\n    claimTask(appName: string, taskId: string, assignee: string): Observable<TaskDetailsCloudModel> {\n        if ((appName || appName === '') && taskId) {\n            const queryUrl = `${this.getBasePath(appName)}/rb/v1/tasks/${taskId}/claim?assignee=${assignee}`;\n\n            return this.post(queryUrl).pipe(\n                map((res: any) => {\n                    this.dataChangesDetected$.next();\n                    return res.entry;\n                })\n            );\n        } else {\n            this.logService.error('AppName and TaskId are mandatory for querying a task');\n            return throwError('AppName/TaskId not configured');\n        }\n    }\n\n    /**\n     * Un-claims a task.\n     * @param appName Name of the app\n     * @param taskId ID of the task to unclaim\n     * @returns Details of the task that was unclaimed\n     */\n    unclaimTask(appName: string, taskId: string): Observable<TaskDetailsCloudModel> {\n        if ((appName || appName === '') && taskId) {\n            const queryUrl = `${this.getBasePath(appName)}/rb/v1/tasks/${taskId}/release`;\n\n            return this.post(queryUrl).pipe(\n                map((res: any) => {\n                    this.dataChangesDetected$.next();\n                    return res.entry;\n                })\n            );\n        } else {\n            this.logService.error('AppName and TaskId are mandatory for querying a task');\n            return throwError('AppName/TaskId not configured');\n        }\n    }\n\n    /**\n     * Gets details of a task.\n     * @param appName Name of the app\n     * @param taskId ID of the task whose details you want\n     * @returns Task details\n     */\n    getTaskById(appName: string, taskId: string): Observable<TaskDetailsCloudModel> {\n        if ((appName || appName === '') && taskId) {\n            const queryUrl = `${this.getBasePath(appName)}/query/v1/tasks/${taskId}`;\n\n            return this.get(queryUrl).pipe(\n                map((res: any) => res.entry)\n            );\n        } else {\n            this.logService.error('AppName and TaskId are mandatory for querying a task');\n            return throwError('AppName/TaskId not configured');\n        }\n    }\n\n     /**\n      * Creates a new standalone task.\n      * @param taskDetails Details of the task to create\n      * @returns Details of the newly created task\n      */\n    createNewTask(startTaskRequest: StartTaskCloudRequestModel, appName: string): Observable<TaskDetailsCloudModel> {\n        const queryUrl = `${this.getBasePath(appName)}/rb/v1/tasks`;\n        const payload = JSON.stringify(new StartTaskCloudRequestModel(startTaskRequest));\n\n        return this.post<any, StartTaskCloudResponseModel>(queryUrl, payload)\n            .pipe(\n                map(response => response.entry)\n            );\n    }\n\n    /**\n     * Updates the details (name, description, due date) for a task.\n     * @param appName Name of the app\n     * @param taskId ID of the task to update\n     * @param payload Data to update the task\n     * @returns Updated task details\n     */\n    updateTask(appName: string, taskId: string, payload: any): Observable<TaskDetailsCloudModel> {\n        if ((appName || appName === '') && taskId) {\n            payload.payloadType = 'UpdateTaskPayload';\n            const queryUrl = `${this.getBasePath(appName)}/rb/v1/tasks/${taskId}`;\n\n            return this.put(queryUrl, payload).pipe(\n                map((res: any) => res.entry)\n            );\n        } else {\n            this.logService.error('AppName and TaskId are mandatory for querying a task');\n            return throwError('AppName/TaskId not configured');\n        }\n    }\n\n    /**\n     * Gets candidate users of the task.\n     * @param appName Name of the app\n     * @param taskId ID of the task\n     * @returns Candidate users\n     */\n    getCandidateUsers(appName: string, taskId: string): Observable<string[]> {\n        if ((appName || appName === '') && taskId) {\n            const queryUrl = `${this.getBasePath(appName)}/query/v1/tasks/${taskId}/candidate-users`;\n            return this.get<string[]>(queryUrl);\n        } else {\n            this.logService.error('AppName and TaskId are mandatory to get candidate user');\n            return of([]);\n        }\n    }\n\n    /**\n     * Gets candidate groups of the task.\n     * @param appName Name of the app\n     * @param taskId ID of the task\n     * @returns Candidate groups\n     */\n    getCandidateGroups(appName: string, taskId: string): Observable<string[]> {\n        if ((appName || appName === '') && taskId) {\n            const queryUrl = `${this.getBasePath(appName)}/query/v1/tasks/${taskId}/candidate-groups`;\n            return this.get<string[]>(queryUrl);\n        } else {\n            this.logService.error('AppName and TaskId are mandatory to get candidate groups');\n            return of([]);\n        }\n    }\n\n    /**\n     * Gets the process definitions associated with an app.\n     * @param appName Name of the target app\n     * @returns Array of process definitions\n     */\n    getProcessDefinitions(appName: string): Observable<ProcessDefinitionCloud[]> {\n        if (appName || appName === '') {\n            const url = `${this.getBasePath(appName)}/rb/v1/process-definitions`;\n\n            return this.get(url).pipe(\n                map((res: any) => {\n                    return res.list.entries.map((processDefs) => new ProcessDefinitionCloud(processDefs.entry));\n                })\n            );\n        } else {\n            this.logService.error('AppName is mandatory for querying task');\n            return throwError('AppName not configured');\n        }\n    }\n\n    /**\n     * Updates the task assignee.\n     * @param appName Name of the app\n     * @param taskId ID of the task to update assignee\n     * @param assignee assignee to update current user task assignee\n     * @returns Updated task details with new assignee\n     */\n    assign(appName: string, taskId: string, assignee: string): Observable<TaskDetailsCloudModel> {\n        if (appName && taskId) {\n            const payLoad = { 'assignee': assignee, 'taskId': taskId, 'payloadType': 'AssignTaskPayload' };\n            const url = `${this.getBasePath(appName)}/rb/v1/tasks/${taskId}/assign`;\n\n            return this.post(url, payLoad).pipe(\n                map((res: any) => {\n                    return res.entry;\n                })\n            );\n        } else {\n            this.logService.error('AppName and TaskId are mandatory to change/update the task assignee');\n            return throwError('AppName/TaskId not configured');\n        }\n      }\n\n    getPriorityLabel(priority: number): string {\n        const priorityItem = this.priorities.find(item => item.value === priority.toString()) || this.priorities[0];\n        return this.translateService.instant(priorityItem.label);\n    }\n\n    get priorities(): TaskPriorityOption[] {\n        return this.appConfigService.get('adf-cloud-priority-values') || DEFAULT_TASK_PRIORITIES;\n    }\n\n    private isAssignedToMe(assignee: string): boolean {\n        const currentUser = this.identityUserService.getCurrentUserInfo().username;\n        return assignee === currentUser;\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { OnChanges, Input, SimpleChanges, Output, EventEmitter, ContentChild, AfterContentInit, OnDestroy, OnInit, Directive } from '@angular/core';\nimport {\n    AppConfigService, UserPreferencesService,\n    DataTableSchema, UserPreferenceValues,\n    PaginatedComponent, PaginationModel,\n    DataRowEvent, CustomEmptyContentTemplateDirective, DataCellEvent, DataRowActionEvent, DataRow, DataColumn\n} from '@alfresco/adf-core';\nimport { taskPresetsCloudDefaultModel } from '../models/task-preset-cloud.model';\nimport { TaskQueryCloudRequestModel } from '../models/filter-cloud-model';\nimport { BehaviorSubject, Subject } from 'rxjs';\nimport { TaskListCloudSortingModel } from '../models/task-list-sorting.model';\nimport { takeUntil } from 'rxjs/operators';\nimport { TaskCloudService } from '../../services/task-cloud.service';\n\n@Directive()\n// tslint:disable-next-line: directive-class-suffix\nexport abstract class BaseTaskListCloudComponent extends DataTableSchema implements OnChanges, AfterContentInit, PaginatedComponent, OnDestroy, OnInit {\n\n    @ContentChild(CustomEmptyContentTemplateDirective)\n    emptyCustomContent: CustomEmptyContentTemplateDirective;\n\n    /** The name of the application. */\n    @Input()\n    appName: string = '';\n\n    /**\n     * Row selection mode. Can be none, `single` or `multiple`. For `multiple` mode,\n     * you can use the Cmd (macOS) or Ctrl (Win) modifier key to toggle selection for\n     * multiple rows.\n     */\n    @Input()\n    selectionMode: string = 'single'; // none|single|multiple\n\n    /** Toggles multiple row selection, rendering a checkbox at the beginning of each row. */\n    @Input()\n    multiselect: boolean = false;\n\n    /** Toggles the sticky header mode. */\n    @Input()\n    stickyHeader: boolean = false;\n\n    /**\n     * Specifies how the table should be sorted. The parameters are for BE sorting.\n     */\n    @Input()\n    sorting: TaskListCloudSortingModel[];\n\n    /** Toggles the data actions column. */\n    @Input()\n    showActions: boolean = false;\n\n    /** Position of the actions dropdown menu. Can be \"left\" or \"right\". */\n    @Input()\n    actionsPosition: string = 'right'; // left|right\n\n    /** Toggles custom context menu for the component. */\n    @Input()\n    showContextMenu: boolean = false;\n\n    /** Emitted before the context menu is displayed for a row. */\n    @Output()\n    showRowContextMenu = new EventEmitter<DataCellEvent>();\n\n    /** Emitted before the actions menu is displayed for a row. */\n    @Output()\n    showRowActionsMenu = new EventEmitter<DataCellEvent>();\n\n    /** Emitted when the user executes a row action. */\n    @Output()\n    executeRowAction = new EventEmitter<DataRowActionEvent>();\n\n    /** Emitted when a task in the list is clicked */\n    @Output()\n    rowClick: EventEmitter<string> = new EventEmitter<string>();\n\n    /** Emitted when rows are selected/unselected */\n    @Output()\n    rowsSelected: EventEmitter<any[]> = new EventEmitter<any[]>();\n\n    /** Emitted when the task list is loaded */\n    @Output()\n    success: EventEmitter<any> = new EventEmitter<any>();\n\n    /** Emitted when an error occurs. */\n    @Output()\n    error: EventEmitter<any> = new EventEmitter<any>();\n\n    pagination: BehaviorSubject<PaginationModel>;\n\n    requestNode: TaskQueryCloudRequestModel;\n    rows: any[] = [];\n    size: number;\n    skipCount: number = 0;\n    currentInstanceId: any;\n    isLoading = true;\n    selectedInstances: any[];\n    formattedSorting: any[];\n    private defaultSorting = { key: 'startDate', direction: 'desc' };\n    boundReplacePriorityValues: (row: DataRow, col: DataColumn) => any;\n\n    private onDestroy$ = new Subject<boolean>();\n\n    constructor(appConfigService: AppConfigService,\n                private taskCloudService: TaskCloudService,\n                private userPreferences: UserPreferencesService,\n                presetKey: string) {\n        super(appConfigService, presetKey, taskPresetsCloudDefaultModel);\n        this.size = userPreferences.paginationSize;\n\n        this.pagination = new BehaviorSubject<PaginationModel>(<PaginationModel> {\n            maxItems: this.size,\n            skipCount: 0,\n            totalItems: 0\n        });\n\n        this.boundReplacePriorityValues = this.replacePriorityValues.bind(this);\n    }\n\n    ngOnInit() {\n        this.userPreferences\n            .select(UserPreferenceValues.PaginationSize)\n            .pipe(takeUntil(this.onDestroy$))\n            .subscribe(pageSize => this.size = pageSize);\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes['sorting']) {\n            this.formatSorting(changes['sorting'].currentValue);\n        }\n        this.reload();\n    }\n\n    ngOnDestroy() {\n        this.onDestroy$.next(true);\n        this.onDestroy$.complete();\n    }\n\n    ngAfterContentInit() {\n        this.createDatatableSchema();\n    }\n\n    reload() {\n        this.requestNode = this.createRequestNode();\n        if (this.requestNode.appName || this.requestNode.appName === '') {\n            this.load(this.requestNode);\n        } else {\n            this.rows = [];\n        }\n    }\n\n    isListEmpty(): boolean {\n        return !this.rows || this.rows.length === 0;\n    }\n\n    /**\n     * Resets the pagination values\n     */\n    resetPagination() {\n        this.skipCount = 0;\n        this.size = this.userPreferences.paginationSize;\n        this.pagination.next({\n            skipCount: 0,\n            maxItems: this.size\n        });\n    }\n\n    /**\n     * Resets the pagination values and\n     * Reloads the task list\n     * @param pagination Pagination values to be set\n     */\n    updatePagination(pagination: PaginationModel) {\n        this.size = pagination.maxItems;\n        this.skipCount = pagination.skipCount;\n        this.pagination.next(pagination);\n        this.reload();\n    }\n\n    onSortingChanged(event: CustomEvent) {\n        this.setSorting(event.detail);\n        this.formatSorting(this.sorting);\n        this.reload();\n    }\n\n    onRowClick(item: DataRowEvent) {\n        this.currentInstanceId = item.value.getValue('id');\n        this.rowClick.emit(this.currentInstanceId);\n    }\n\n    onRowSelect(event: CustomEvent) {\n        this.selectedInstances = [...event.detail.selection];\n        this.rowsSelected.emit(this.selectedInstances);\n    }\n\n    onRowUnselect(event: CustomEvent) {\n        this.selectedInstances = [...event.detail.selection];\n        this.rowsSelected.emit(this.selectedInstances);\n    }\n\n    onRowKeyUp(event: CustomEvent) {\n        if (event.detail.keyboardEvent.key === 'Enter') {\n            event.preventDefault();\n            this.currentInstanceId = event.detail.row.getValue('id');\n            this.rowClick.emit(this.currentInstanceId);\n        }\n    }\n\n    onShowRowActionsMenu(event: DataCellEvent) {\n        this.showRowActionsMenu.emit(event);\n    }\n\n    onShowRowContextMenu(event: DataCellEvent) {\n        this.showRowContextMenu.emit(event);\n    }\n\n    onExecuteRowAction(row: DataRowActionEvent) {\n        this.executeRowAction.emit(row);\n    }\n\n    setSorting(sortDetail) {\n        const sorting = sortDetail ? {\n            orderBy: sortDetail.key,\n            direction: sortDetail.direction.toUpperCase()\n        } : { ... this.defaultSorting };\n        this.sorting = [new TaskListCloudSortingModel(sorting)];\n    }\n\n    formatSorting(sorting: TaskListCloudSortingModel[]) {\n        this.formattedSorting = this.isValidSorting(sorting) ? [\n            sorting[0].orderBy,\n            sorting[0].direction.toLocaleLowerCase()\n        ] : null;\n    }\n\n    isValidSorting(sorting: TaskListCloudSortingModel[]) {\n        return sorting && sorting.length && sorting[0].orderBy && sorting[0].direction;\n    }\n\n    replacePriorityValues(row: DataRow, column: DataColumn) {\n        return column.key.split('.').reduce((source, key) => {\n            if (key === 'priority' && source && typeof(source[key]) === 'number') {\n                return source[key] = this.taskCloudService.getPriorityLabel(source[key]);\n            }\n            return source && typeof(source) === 'object' ? source[key] : undefined;\n        }, row.obj);\n    }\n\n    abstract load(requestNode);\n    abstract createRequestNode();\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, ViewEncapsulation, Input } from '@angular/core';\nimport { AppConfigService, UserPreferencesService } from '@alfresco/adf-core';\nimport { TaskQueryCloudRequestModel } from '../models/filter-cloud-model';\nimport { TaskListCloudService } from '../services/task-list-cloud.service';\nimport { BaseTaskListCloudComponent } from './base-task-list-cloud.component';\nimport { TaskCloudService } from '../../services/task-cloud.service';\n\n@Component({\n    selector: 'adf-cloud-task-list',\n    templateUrl: './base-task-list-cloud.component.html',\n    styleUrls: ['./base-task-list-cloud.component.scss'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class TaskListCloudComponent extends BaseTaskListCloudComponent {\n\n    static PRESET_KEY = 'adf-cloud-task-list.presets';\n\n    /**\n     * The assignee of the process. Possible values are: \"assignee\" (the current user is the assignee),\n     * \"candidate\" (the current user is a task candidate\", \"group_x\" (the task is assigned to a group\n     * where the current user is a member, no value (the current user is involved).\n     */\n    @Input()\n    assignee: string = '';\n\n    /** Filter the tasks. Display only tasks created on the supplied date. */\n    @Input()\n    createdDate: Date;\n\n    /** Filter the tasks. Display only tasks with createdFrom equal to the supplied date. */\n    @Input()\n    createdFrom: string = '';\n\n    /** Filter the tasks. Display only tasks with createdTo equal to the supplied date. */\n    @Input()\n    createdTo: string = '';\n\n    /** Filter the tasks. Display only tasks with dueDate equal to the supplied date. */\n    @Input()\n    dueDate: Date;\n\n    /** Filter the tasks. Display only tasks with lastModifiedFrom equal to the supplied date. */\n    @Input()\n    lastModifiedFrom: string = '';\n\n    /** Filter the tasks. Display only tasks with lastModifiedTo equal to the supplied date. */\n    @Input()\n    lastModifiedTo: string = '';\n\n    /** Filter the tasks. Display only tasks with dueDate greater or equal than the supplied date. */\n    @Input()\n    dueDateFrom: string = '';\n\n    /** Filter the tasks. Display only tasks with dueDate less or equal to the supplied date. */\n    @Input()\n    dueDateTo: string = '';\n\n    /** Filter the tasks. Display only tasks with id equal to the supplied value. */\n    @Input()\n    id: string = '';\n\n    /** Filter the tasks. Display only tasks with the supplied name. */\n    @Input()\n    name: string = '';\n\n    /** Filter the tasks. Display only tasks with parentTaskId equal to the supplied value. */\n    @Input()\n    parentTaskId: string = '';\n\n    /** Filter the tasks. Display only tasks with processDefinitionName equal to the supplied value. */\n    @Input()\n    processDefinitionName: string = '';\n\n    /** Filter the tasks. Display only tasks with processDefinitionId equal to the supplied value. */\n    @Input()\n    processDefinitionId: string = '';\n\n    /** Filter the tasks. Display only tasks with processInstanceId equal to the supplied value. */\n    @Input()\n    processInstanceId: string = '';\n\n    /** Filter the tasks. Display only tasks with status equal to the supplied value. */\n    @Input()\n    status: string = '';\n\n    /** Filter the tasks. Display only tasks with owner equal to the supplied value. */\n    @Input()\n    owner: string = '';\n\n    /** Filter the tasks. Display only tasks with priority equal to the supplied value. */\n    @Input()\n    priority: number;\n\n    /** Filter the tasks. Display only tasks with createdBy equal to the supplied value. */\n    @Input()\n    completedBy: number;\n\n    /** Filter the tasks. Display only the tasks that belong to a process in case is false or tasks that doesn't belong to a process in case of true. */\n    @Input()\n    standalone: boolean = false;\n\n    /** Filter the tasks. Display only tasks with completedDate equal to the supplied date. */\n    @Input()\n    completedDate: string = '';\n\n    /** Filter the tasks. Display only tasks with completedFrom equal to the supplied date. */\n    @Input()\n    completedFrom: string = '';\n\n    /** Filter the tasks. Display only tasks with completedTo equal to the supplied date. */\n    @Input()\n    completedTo: string = '';\n\n    /** Filter the tasks. Display only tasks with candidateGroups equal to the supplied value. */\n    @Input()\n    candidateGroupId: string = '';\n\n    constructor(private taskListCloudService: TaskListCloudService,\n                appConfigService: AppConfigService,\n                taskCloudService: TaskCloudService,\n                userPreferences: UserPreferencesService) {\n        super(appConfigService, taskCloudService, userPreferences, TaskListCloudComponent.PRESET_KEY);\n    }\n\n    load(requestNode: TaskQueryCloudRequestModel) {\n        this.isLoading = true;\n        this.taskListCloudService.getTaskByRequest(requestNode).subscribe(\n            (tasks) => {\n                this.rows = tasks.list.entries;\n                this.success.emit(tasks);\n                this.isLoading = false;\n                this.pagination.next(tasks.list.pagination);\n            }, (error) => {\n                this.error.emit(error);\n                this.isLoading = false;\n            });\n    }\n\n    createRequestNode(): TaskQueryCloudRequestModel {\n        const requestNode = {\n            appName: this.appName,\n            assignee: this.assignee,\n            id: this.id,\n            name: this.name,\n            parentTaskId: this.parentTaskId,\n            processDefinitionName: this.processDefinitionName,\n            processDefinitionId: this.processDefinitionId,\n            processInstanceId: this.processInstanceId,\n            owner: this.owner,\n            priority: this.priority,\n            lastModifiedFrom: this.lastModifiedFrom,\n            lastModifiedTo: this.lastModifiedTo,\n            dueDateFrom: this.dueDateFrom,\n            dueDateTo: this.dueDateTo,\n            status: this.status,\n            dueDate: this.dueDate,\n            createdDate: this.createdDate,\n            createdFrom: this.createdFrom,\n            createdTo: this.createdTo,\n            maxItems: this.size,\n            skipCount: this.skipCount,\n            sorting: this.sorting,\n            standalone: this.standalone,\n            completedBy: this.completedBy,\n            completedFrom: this.completedFrom,\n            completedTo: this.completedTo,\n            completedDate: this.completedDate,\n            candidateGroupId: this.candidateGroupId\n        };\n        return new TaskQueryCloudRequestModel(requestNode);\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Injectable } from '@angular/core';\nimport { AlfrescoApiService, AppConfigService, LogService } from '@alfresco/adf-core';\nimport { ServiceTaskQueryCloudRequestModel, ServiceTaskIntegrationContextCloudModel } from '../models/service-task-cloud.model';\nimport { Observable, throwError } from 'rxjs';\nimport { TaskListCloudSortingModel } from '../models/task-list-sorting.model';\nimport { BaseCloudService } from '../../../services/base-cloud.service';\nimport { map } from 'rxjs/operators';\n\n@Injectable({ providedIn: 'root' })\nexport class ServiceTaskListCloudService extends BaseCloudService {\n\n    constructor(apiService: AlfrescoApiService,\n                appConfigService: AppConfigService,\n                private logService: LogService) {\n        super(apiService, appConfigService);\n    }\n\n    /**\n     * Finds a task using an object with optional query properties.\n     * @param requestNode Query object\n     * @returns Task information\n     */\n    getServiceTaskByRequest(requestNode: ServiceTaskQueryCloudRequestModel): Observable<any> {\n        if (requestNode.appName || requestNode.appName === '') {\n            const queryUrl = `${this.getBasePath(requestNode.appName)}/query/admin/v1/service-tasks`;\n            const queryParams = this.buildQueryParams(requestNode);\n            const sortingParams = this.buildSortingParam(requestNode.sorting);\n            if (sortingParams) {\n                queryParams['sort'] = sortingParams;\n            }\n            return this.get(queryUrl, queryParams);\n        } else {\n            this.logService.error('Appname is mandatory for querying task');\n            return throwError('Appname not configured');\n        }\n    }\n\n    /**\n     * Finds a service task integration context using an object with optional query properties.\n     * @param appName string\n     * @param serviceTaskId string\n     * @returns Service Task Integration Context information\n     */\n    getServiceTaskStatus(appName: string, serviceTaskId: string): Observable<ServiceTaskIntegrationContextCloudModel> {\n        if (appName) {\n            const queryUrl = `${this.getBasePath(appName)}/query/admin/v1/service-tasks/${serviceTaskId}/integration-context`;\n            return this.get(queryUrl).pipe(\n                map((response: any) => response.entry)\n            );\n        } else {\n            this.logService.error('Appname is mandatory for querying task');\n            return throwError('Appname not configured');\n        }\n    }\n\n    protected buildQueryParams(requestNode: ServiceTaskQueryCloudRequestModel): Object {\n        const queryParam: Object = {};\n        for (const property in requestNode) {\n            if (requestNode.hasOwnProperty(property) &&\n                !this.isExcludedField(property) &&\n                this.isPropertyValueValid(requestNode, property)) {\n                queryParam[property] = requestNode[property];\n            }\n        }\n        return queryParam;\n    }\n\n    protected isExcludedField(property: string): boolean {\n        return property === 'appName' || property === 'sorting';\n    }\n\n    protected isPropertyValueValid(requestNode: any, property: string): boolean {\n        return requestNode[property] !== '' && requestNode[property] !== null && requestNode[property] !== undefined;\n    }\n\n    protected buildSortingParam(models: TaskListCloudSortingModel[]): string {\n        let finalSorting: string = '';\n        if (models) {\n            for (const sort of models) {\n                if (!finalSorting) {\n                    finalSorting = `${sort.orderBy},${sort.direction}`;\n                } else {\n                    finalSorting = `${finalSorting}&${sort.orderBy},${sort.direction}`;\n                }\n            }\n        }\n        return encodeURI(finalSorting);\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, ViewEncapsulation, Input } from '@angular/core';\nimport {\n    AppConfigService, UserPreferencesService\n} from '@alfresco/adf-core';\nimport { ServiceTaskQueryCloudRequestModel } from '../models/service-task-cloud.model';\nimport { BaseTaskListCloudComponent } from './base-task-list-cloud.component';\nimport { ServiceTaskListCloudService } from '../services/service-task-list-cloud.service';\nimport { TaskCloudService } from '../../services/task-cloud.service';\n\n@Component({\n    selector: 'adf-cloud-service-task-list',\n    templateUrl: './base-task-list-cloud.component.html',\n    styleUrls: ['./base-task-list-cloud.component.scss'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class ServiceTaskListCloudComponent extends BaseTaskListCloudComponent {\n\n    static PRESET_KEY = 'adf-cloud-service-task-list.presets';\n\n    @Input()\n    queryParams: { [key: string]: any } = {};\n\n    constructor(private serviceTaskListCloudService: ServiceTaskListCloudService,\n                appConfigService: AppConfigService,\n                taskCloudService: TaskCloudService,\n                userPreferences: UserPreferencesService) {\n        super(appConfigService, taskCloudService, userPreferences, ServiceTaskListCloudComponent.PRESET_KEY);\n    }\n\n    load(requestNode: ServiceTaskQueryCloudRequestModel) {\n        this.isLoading = true;\n        this.serviceTaskListCloudService.getServiceTaskByRequest(requestNode).subscribe(\n            (tasks) => {\n                this.rows = tasks.list.entries;\n                this.success.emit(tasks);\n                this.isLoading = false;\n                this.pagination.next(tasks.list.pagination);\n            }, (error) => {\n                this.error.emit(error);\n                this.isLoading = false;\n            });\n    }\n\n    createRequestNode(): ServiceTaskQueryCloudRequestModel {\n        const requestNode: ServiceTaskQueryCloudRequestModel = {\n            appName: this.appName,\n            maxItems: this.size,\n            skipCount: this.skipCount,\n            sorting: this.sorting,\n            id: this.queryParams?.serviceTaskId,\n            activityName: this.queryParams?.activityName,\n            activityType: this.queryParams?.activityType,\n            completedDate: this.queryParams?.completedDate,\n            elementId: this.queryParams?.elementId,\n            executionId: this.queryParams?.executionId,\n            processDefinitionId: this.queryParams?.processDefinitionId,\n            processDefinitionKey: this.queryParams?.processDefinitionKey,\n            processDefinitionVersion: this.queryParams?.processDefinitionVersion,\n            processInstanceId: this.queryParams?.processInstanceId,\n            serviceFullName: this.queryParams?.serviceFullName,\n            serviceName: this.queryParams?.serviceName,\n            serviceVersion: this.queryParams?.serviceVersion,\n            startedDate: this.queryParams?.startedDate,\n            status: this.queryParams?.status\n        } as ServiceTaskQueryCloudRequestModel;\n        return requestNode;\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport enum DateCloudFilterType {\n    NO_DATE = 'NO_DATE',\n    TODAY = 'TODAY',\n    TOMORROW = 'TOMORROW',\n    NEXT_7_DAYS = 'NEXT_7_DAYS',\n    WEEK = 'WEEK',\n    MONTH = 'MONTH',\n    QUARTER = 'QUARTER',\n    YEAR = 'YEAR',\n    RANGE = 'RANGE'\n}\n\nexport interface DateRangeFilter {\n    startDate: string;\n    endDate: string;\n}\nexport interface RangeKeys {\n    from: string;\n    to: string;\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MaterialModule } from '../../material.module';\nimport { TaskListCloudComponent } from './components/task-list-cloud.component';\nimport { ServiceTaskListCloudComponent } from './components/service-task-list-cloud.component';\nimport { CoreModule } from '@alfresco/adf-core';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        MaterialModule,\n        CoreModule\n    ],\n    declarations: [\n        TaskListCloudComponent,\n        ServiceTaskListCloudComponent\n    ],\n    exports: [\n        TaskListCloudComponent,\n        ServiceTaskListCloudComponent\n    ]\n})\nexport class TaskListCloudModule { }\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Injectable } from '@angular/core';\nimport moment from 'moment-es6';\nimport { DateRangeFilter, DateCloudFilterType } from '../../models/date-cloud-filter.model';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class DateRangeFilterService {\n\n    currentDate = new Date();\n\n    getDateRange(type: DateCloudFilterType): DateRangeFilter {\n        switch (type) {\n            case DateCloudFilterType.TODAY: return this.getTodayDateRange();\n            case DateCloudFilterType.TOMORROW: return this.getTomorrowDateRange();\n            case DateCloudFilterType.NEXT_7_DAYS: return this.getNext7DaysDateRange();\n            case DateCloudFilterType.WEEK: return this.getCurrentWeekRange();\n            case DateCloudFilterType.MONTH: return this.getCurrentMonthDateRange();\n            case DateCloudFilterType.QUARTER: return this.getQuarterDateRange();\n            case DateCloudFilterType.YEAR: return this.getCurrentYearDateRange();\n            default: return this.resetDateRange();\n        }\n    }\n\n    isDateRangeType(type: DateCloudFilterType) {\n        return type === DateCloudFilterType.RANGE;\n    }\n\n    private resetDateRange(): DateRangeFilter {\n        return {\n            startDate: null,\n            endDate: null\n        };\n    }\n\n    private getNext7DaysDateRange(): DateRangeFilter {\n        return {\n            startDate: moment().startOf('day').toISOString(true),\n            endDate: moment().add(7, 'days').endOf('day').toISOString(true)\n        };\n    }\n\n    private getTomorrowDateRange(): DateRangeFilter {\n        return {\n            startDate: moment().endOf('day').toISOString(true),\n            endDate: moment().add(1, 'days').endOf('day').toISOString(true)\n        };\n    }\n\n    private getCurrentYearDateRange(): DateRangeFilter {\n        return {\n            startDate: moment().startOf('year').toISOString(true),\n            endDate: moment().endOf('year').toISOString(true)\n        };\n    }\n\n    private getTodayDateRange(): DateRangeFilter {\n        return {\n            startDate: moment().startOf('day').toISOString(true),\n            endDate: moment().endOf('day').toISOString(true)\n        };\n    }\n\n    private getCurrentWeekRange(): DateRangeFilter {\n        return  {\n            startDate: moment().startOf('week').toISOString(true),\n            endDate: moment().endOf('week').toISOString(true)\n        };\n    }\n\n    private getCurrentMonthDateRange(): DateRangeFilter {\n        return {\n            startDate: moment().startOf('month').toISOString(true),\n            endDate: moment().endOf('month').toISOString(true)\n        };\n    }\n\n    private getQuarterDateRange(): DateRangeFilter {\n        return {\n            startDate: moment().startOf('quarter').toISOString(true),\n            endDate: moment().endOf('quarter').toISOString(true)\n        };\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DateCloudFilterType } from '../../../models/date-cloud-filter.model';\nimport { DateRangeFilterService } from '../../../common/date-range-filter/date-range-filter.service';\nimport { ComponentSelectionMode } from '../../../types';\nimport { IdentityUserModel, IdentityGroupModel } from '@alfresco/adf-core';\n\nexport class TaskFilterCloudModel  {\n    id: string;\n    name: string;\n    key: string;\n    icon: string;\n    index: number;\n    appName: string;\n    status: string;\n    sort: string;\n    assignee: string;\n    candidateGroups: IdentityGroupModel[];\n    order: string;\n    owner: string;\n    processDefinitionName?: string;\n    processDefinitionId: string;\n    processInstanceId: string;\n    createdDate: Date;\n    dueDateType: DateCloudFilterType;\n    dueDate: Date;\n    taskName: string;\n    taskId: string;\n    parentTaskId: string;\n    priority: number;\n    standalone: boolean;\n    lastModifiedFrom: string;\n    lastModifiedTo: string;\n    completedDateType: DateCloudFilterType;\n    createdDateType: DateCloudFilterType;\n    assignmentType: AssignmentType;\n    completedDate: Date;\n    completedBy: IdentityUserModel;\n    showCounter: boolean;\n\n    private _completedFrom: string;\n    private _completedTo: string;\n    private _dueDateFrom: string;\n    private _dueDateTo: string;\n    private _createdFrom: string;\n    private _createdTo: string;\n    private dateRangeFilterService = new DateRangeFilterService();\n\n    constructor(obj?: any) {\n        if (obj) {\n            this.id = obj.id || Math.random().toString(36).substr(2, 9);\n            this.name = obj.name || null;\n            this.key = obj.key || null;\n            this.icon = obj.icon || null;\n            this.index = obj.index || null;\n            this.appName = obj.appName || obj.appName === '' ? obj.appName : null;\n            this.status = obj.status || null;\n            this.sort = obj.sort || null;\n            this.assignee = obj.assignee || null;\n            this.order = obj.order || null;\n            this.owner = obj.owner || null;\n            this.processDefinitionName = obj.processDefinitionName || null;\n            this.processDefinitionId = obj.processDefinitionId || null;\n            this.processInstanceId = obj.processInstanceId || null;\n            this.createdDate = obj.createdDate || null;\n            this.dueDateType = obj.dueDateType || null;\n            this.dueDate = obj.dueDate || null;\n            this._dueDateFrom = obj._dueDateFrom || null;\n            this._dueDateTo = obj._dueDateTo || null;\n            this.taskName = obj.taskName || null;\n            this.taskId = obj.taskId || null;\n            this.parentTaskId = obj.parentTaskId || null;\n            this.priority = obj.priority || null;\n            this.standalone = obj.standalone || null;\n            this.lastModifiedFrom = obj.lastModifiedFrom || null;\n            this.lastModifiedTo = obj.lastModifiedTo || null;\n            this.completedBy = obj.completedBy || null;\n            this.completedDateType = obj.completedDateType || null;\n            this.completedFrom = obj._completedFrom || null;\n            this.completedTo = obj._completedTo || null;\n            this.completedDate = obj.completedDate || null;\n            this.createdDateType = obj.createdDateType || null;\n            this.createdFrom = obj._createdFrom || null;\n            this.createdTo = obj._createdTo || null;\n            this.candidateGroups = obj.candidateGroups || null;\n            this.showCounter = obj.showCounter || false;\n        }\n    }\n\n    set dueDateFrom(dueDateFrom: string) {\n        this._dueDateFrom = dueDateFrom;\n    }\n\n    set dueDateTo(dueDateTo: string) {\n        this._dueDateTo = dueDateTo;\n    }\n\n    get dueDateFrom() {\n        if (this.isDateRangeType(this.dueDateType)) {\n            return this._dueDateFrom;\n        }\n        return this.getStartDate(this.dueDateType);\n    }\n\n    get dueDateTo() {\n        if (this.isDateRangeType(this.dueDateType)) {\n            return this._dueDateTo;\n        }\n        return this.getEndDate(this.dueDateType);\n    }\n\n    set completedFrom(completedFrom: string) {\n        this._completedFrom = completedFrom;\n    }\n\n    set completedTo(completedTo: string) {\n        this._completedTo = completedTo;\n    }\n\n    get completedFrom(): string {\n        if (this.isDateRangeType(this.completedDateType)) {\n            return this._completedFrom;\n        }\n        return this.getStartDate(this.completedDateType);\n    }\n\n    get completedTo(): string {\n        if (this.isDateRangeType(this.completedDateType)) {\n            return this._completedTo;\n        }\n        return this.getEndDate(this.completedDateType);\n    }\n\n    set createdFrom(createdFrom: string) {\n        this._createdFrom = createdFrom;\n    }\n\n    set createdTo(createdTo: string) {\n        this._createdTo = createdTo;\n    }\n\n    get createdFrom() {\n        if (this.isDateRangeType(this.createdDateType)) {\n            return this._createdFrom;\n        }\n        return this.getStartDate(this.createdDateType);\n    }\n\n    get createdTo() {\n        if (this.isDateRangeType(this.createdDateType)) {\n            return this._createdTo;\n        }\n        return this.getEndDate(this.createdDateType);\n    }\n\n    private getStartDate(key: DateCloudFilterType) {\n        return this.dateRangeFilterService.getDateRange(key).startDate;\n    }\n\n    private getEndDate(key: DateCloudFilterType) {\n        return this.dateRangeFilterService.getDateRange(key).endDate;\n    }\n\n    private isDateRangeType(type: DateCloudFilterType) {\n        return !!this.dateRangeFilterService.isDateRangeType(type);\n    }\n}\n\nexport interface ServiceTaskFilterCloudModel {\n    id?: string;\n    name?: string;\n    key?: string;\n    icon?: string;\n    index?: number;\n    appName?: string;\n    status?: string;\n    sort?: string;\n    order?: string;\n    activityName?: string;\n    activityType?: string;\n    completedDate?: Date;\n    elementId?: string;\n    executionId?: string;\n    processDefinitionId?: string;\n    processDefinitionKey?: string;\n    processDefinitionVersion?: number;\n    processInstanceId?: string;\n    serviceTaskId?: string;\n    serviceFullName?: string;\n    serviceName?: string;\n    serviceVersion?: string;\n    startedDate?: Date;\n}\n\nexport interface FilterParamsModel {\n    id?: string;\n    name?: string;\n    key?: string;\n    index?: number;\n}\n\nexport interface TaskFilterAction {\n    actionType?: string;\n    icon?: string;\n    tooltip?: string;\n    filter?: TaskFilterCloudModel | ServiceTaskFilterCloudModel;\n}\n\nexport interface FilterOptions {\n    label?: string;\n    value?: string;\n}\n\nexport enum AssignmentType {\n    CURRENT_USER = 'CURRENT_USER',\n    UNASSIGNED = 'UNASSIGNED',\n    CANDIDATE_GROUPS = 'CANDIDATE_GROUPS'\n}\n\nexport interface TaskFilterProperties {\n    label?: string;\n    type?: string;\n    value?: any;\n    key?: string;\n    attributes?: { [key: string]: string; };\n    options?: FilterOptions[];\n    dateFilterOptions?: DateCloudFilterType[];\n    selectionMode?: ComponentSelectionMode;\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { InjectionToken } from '@angular/core';\nimport { PreferenceCloudServiceInterface } from './preference-cloud.interface';\n\nexport const PROCESS_FILTERS_SERVICE_TOKEN = new InjectionToken<PreferenceCloudServiceInterface>('proccess-filters-cloud');\n\nexport const TASK_FILTERS_SERVICE_TOKEN = new InjectionToken<PreferenceCloudServiceInterface>('task-filters-cloud');\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Apollo } from 'apollo-angular';\nimport { HttpLink } from 'apollo-angular/http';\nimport { split, gql, InMemoryCache, ApolloLink, InMemoryCacheConfig } from '@apollo/client/core';\nimport { WebSocketLink } from '@apollo/client/link/ws';\nimport { onError } from '@apollo/client/link/error';\nimport { getMainDefinition } from '@apollo/client/utilities';\nimport { Injectable } from '@angular/core';\nimport { AppConfigService, AlfrescoApiService } from '@alfresco/adf-core';\nimport { BaseCloudService } from './base-cloud.service';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class NotificationCloudService extends BaseCloudService {\n\n    appsListening = [];\n\n    constructor(apiService: AlfrescoApiService,\n                appConfigService: AppConfigService,\n                public apollo: Apollo,\n                private http: HttpLink) {\n        super(apiService, appConfigService);\n    }\n\n    private get webSocketHost() {\n        return this.contextRoot.split('://')[1];\n    }\n\n    private get protocol() {\n        return this.contextRoot.split('://')[0] === 'https' ? 'wss' : 'ws';\n    }\n\n    initNotificationsForApp(appName: string) {\n        if (!this.appsListening.includes(appName)) {\n            this.appsListening.push(appName);\n            const httpLink = this.http.create({\n                uri: `${this.getBasePath(appName)}/notifications/graphql`\n            });\n\n            const webSocketLink = new WebSocketLink({\n                uri: `${this.protocol}://${this.webSocketHost}/${appName}/notifications/ws/graphql`,\n                options: {\n                    reconnect: true,\n                    lazy: true,\n                    connectionParams: {\n                        kaInterval: 2000,\n                        'X-Authorization': 'Bearer ' + this.apiService.getInstance().oauth2Auth.token\n                    }\n                }\n            });\n\n            const link = split(\n                ({ query }) => {\n                    const definition = getMainDefinition(query);\n                    return definition.kind === 'OperationDefinition' && definition.operation === 'subscription';\n                },\n                webSocketLink,\n                httpLink\n            );\n\n            const errorLink = onError(({ graphQLErrors, operation, forward }) => {\n                if (graphQLErrors) {\n                    for (const err of graphQLErrors) {\n                        switch (err.extensions.code) {\n                            case 'UNAUTHENTICATED':\n                                const oldHeaders = operation.getContext().headers;\n                                operation.setContext({\n                                    headers: {\n                                        ...oldHeaders,\n                                        'X-Authorization': 'Bearer ' + this.apiService.getInstance().oauth2Auth.token\n                                    }\n                                });\n                                forward(operation);\n                                break;\n                            default:\n                        }\n                    }\n                }\n            });\n\n            this.apollo.createNamed(appName, {\n                link: ApolloLink.from([errorLink, link]),\n                cache: new InMemoryCache({ merge: true } as InMemoryCacheConfig),\n                defaultOptions: {\n                    watchQuery: {\n                        errorPolicy: 'all'\n                    }\n                }\n            });\n        }\n    }\n\n    makeGQLQuery(appName: string, gqlQuery: string) {\n        this.initNotificationsForApp(appName);\n        return this.apollo.use(appName).subscribe({ query: gql(gqlQuery) });\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AlfrescoApiService, AppConfigService, IdentityUserService } from '@alfresco/adf-core';\nimport { Injectable, Inject } from '@angular/core';\nimport { Observable, of, BehaviorSubject, throwError } from 'rxjs';\nimport { TaskFilterCloudModel } from '../models/filter-cloud.model';\nimport { switchMap, map } from 'rxjs/operators';\nimport { BaseCloudService } from '../../../services/base-cloud.service';\nimport { PreferenceCloudServiceInterface } from '../../../services/preference-cloud.interface';\nimport { TASK_FILTERS_SERVICE_TOKEN } from '../../../services/cloud-token.service';\nimport { TaskCloudNodePaging } from '../../task-list/models/task-cloud.model';\nimport { NotificationCloudService } from '../../../services/notification-cloud.service';\nimport { TaskCloudEngineEvent } from '../../../models/engine-event-cloud.model';\n\nconst TASK_EVENT_SUBSCRIPTION_QUERY = `\n    subscription {\n        engineEvents(eventType: [\n            TASK_COMPLETED\n            TASK_ASSIGNED\n            TASK_ACTIVATED\n            TASK_SUSPENDED\n            TASK_CANCELLED,\n            TASK_CREATED\n        ]) {\n            eventType\n            entity\n        }\n    }\n`;\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class TaskFilterCloudService extends BaseCloudService {\n    private filtersSubject: BehaviorSubject<TaskFilterCloudModel[]>;\n    filters$: Observable<TaskFilterCloudModel[]>;\n\n    constructor(\n        private identityUserService: IdentityUserService,\n        @Inject(TASK_FILTERS_SERVICE_TOKEN)\n        public preferenceService: PreferenceCloudServiceInterface,\n        apiService: AlfrescoApiService,\n        appConfigService: AppConfigService,\n        private notificationCloudService: NotificationCloudService) {\n        super(apiService, appConfigService);\n        this.filtersSubject = new BehaviorSubject([]);\n        this.filters$ = this.filtersSubject.asObservable();\n    }\n\n    /**\n     * Creates and returns the default task filters for an app.\n     * @param appName Name of the target app\n     * @returns Observable of default filters task filters just created or created filters\n     */\n    private createDefaultFilters(appName: string) {\n        const key: string = this.prepareKey(appName);\n        this.preferenceService.getPreferences(appName, key).pipe(\n            switchMap((response: any) => {\n                const preferences = (response && response.list && response.list.entries) ? response.list.entries : [];\n                if (!this.hasPreferences(preferences) || !this.hasTaskFilters(preferences, key)) {\n                    return this.createTaskFilters(appName, key, this.defaultTaskFilters(appName));\n                } else {\n                    return of(this.findFiltersByKeyInPreferences(preferences, key));\n                }\n            })\n        ).subscribe((filters) => {\n            this.addFiltersToStream(filters);\n        });\n    }\n\n    /**\n     * Checks user preference are empty or not\n     * @param preferences User preferences of the target app\n     * @returns Boolean value if the preferences are not empty\n     */\n    private hasPreferences(preferences: any): boolean {\n        return preferences && preferences.length > 0;\n    }\n\n    /**\n     * Checks for task filters in given user preferences\n     * @param preferences User preferences of the target app\n     * @param key Key of the task filters\n     * @param filters Details of create filter\n     * @returns Boolean value if the preference has task filters\n     */\n    private hasTaskFilters(preferences: any, key: string): boolean {\n        const filters = preferences.find((filter: any) => { return filter.entry.key === key; });\n        return (filters && filters.entry) ? JSON.parse(filters.entry.value).length > 0 : false;\n    }\n\n    /**\n     * Calls create preference api to create task filters\n     * @param appName Name of the target app\n     * @param key Key of the task instance filters\n     * @param filters Details of new task filter\n     * @returns Observable of created task filters\n     */\n    private createTaskFilters(appName: string, key: string, filters: TaskFilterCloudModel[]): Observable<TaskFilterCloudModel[]> {\n        return this.preferenceService.createPreference(appName, key, filters);\n    }\n\n    /**\n     * Calls get preference api to get task filter by preference key\n     * @param appName Name of the target app\n     * @param key Key of the task filters\n     * @returns Observable of task filters\n     */\n    private getTaskFiltersByKey(appName: string, key: string): Observable<TaskFilterCloudModel[]> {\n        return this.preferenceService.getPreferenceByKey(appName, key);\n    }\n\n    /**\n     * Gets all task filters for a task app.\n     * @param appName Name of the target app\n     * @returns Observable of task filter details\n     */\n    getTaskListFilters(appName?: string): Observable<TaskFilterCloudModel[]> {\n        this.createDefaultFilters(appName);\n        return this.filters$;\n    }\n\n    /**\n     * Gets a task filter.\n     * @param appName Name of the target app\n     * @param id ID of the task\n     * @returns Details of the task filter\n     */\n    getTaskFilterById(appName: string, id: string): Observable<TaskFilterCloudModel> {\n        const key: string = this.prepareKey(appName);\n        return this.getTaskFiltersByKey(appName, key).pipe(\n            switchMap((filters: TaskFilterCloudModel[]) => {\n                if (filters && filters.length === 0) {\n                    return this.createTaskFilters(appName, key, this.defaultTaskFilters(appName));\n                } else {\n                    return of(filters);\n                }\n            }),\n            map((filters: any) => {\n                return filters.filter((filter: TaskFilterCloudModel) => {\n                    return filter.id === id;\n                })[0];\n            })\n        );\n    }\n\n    /**\n     * Adds a new task filter.\n     * @param filter The new filter to add\n     * @returns Observable of task instance filters with newly added filter\n     */\n    addFilter(newFilter: TaskFilterCloudModel): Observable<TaskFilterCloudModel[]> {\n        const key: string = this.prepareKey(newFilter.appName);\n        return this.getTaskFiltersByKey(newFilter.appName, key).pipe(\n            switchMap((filters: any) => {\n                if (filters && filters.length === 0) {\n                    return this.createTaskFilters(newFilter.appName, key, <TaskFilterCloudModel[]> [newFilter]);\n                } else {\n                    filters.push(newFilter);\n                    return this.preferenceService.updatePreference(newFilter.appName, key, filters);\n                }\n            }),\n            map((filters: TaskFilterCloudModel[]) => {\n                this.addFiltersToStream(filters);\n                return filters;\n            })\n        );\n    }\n\n    private addFiltersToStream(filters: TaskFilterCloudModel[]) {\n        this.filtersSubject.next(filters);\n    }\n\n    /**\n     * Updates a task filter.\n     * @param filter The filter to update\n     * @returns Observable of task instance filters with updated filter\n     */\n    updateFilter(updatedFilter: TaskFilterCloudModel): Observable<TaskFilterCloudModel[]> {\n        const key: string = this.prepareKey(updatedFilter.appName);\n        return this.getTaskFiltersByKey(updatedFilter.appName, key).pipe(\n            switchMap((filters: TaskFilterCloudModel[]) => {\n                if (filters && filters.length === 0) {\n                    return this.createTaskFilters(updatedFilter.appName, key, <TaskFilterCloudModel[]> [updatedFilter]);\n                } else {\n                    const itemIndex = filters.findIndex((filter: TaskFilterCloudModel) => filter.id === updatedFilter.id);\n                    filters[itemIndex] = updatedFilter;\n                    return this.updateTaskFilters(updatedFilter.appName, key, filters);\n                }\n            }),\n            map((updatedFilters: TaskFilterCloudModel[]) => {\n                this.addFiltersToStream(updatedFilters);\n                return updatedFilters;\n            })\n        );\n    }\n\n    /**\n     * Deletes a task filter\n     * @param filter The filter to delete\n     * @returns Observable of task instance filters without deleted filter\n     */\n    deleteFilter(deletedFilter: TaskFilterCloudModel): Observable<TaskFilterCloudModel[]> {\n        const key = this.prepareKey(deletedFilter.appName);\n        return this.getTaskFiltersByKey(deletedFilter.appName, key).pipe(\n            switchMap((filters: TaskFilterCloudModel[]) => {\n                if (filters && filters.length > 0) {\n                    filters = filters.filter(filter => filter.id !== deletedFilter.id);\n                    return this.updateTaskFilters(deletedFilter.appName, key, filters);\n                }\n                return of([]);\n            }),\n            map(filters => {\n                this.addFiltersToStream(filters);\n                return filters;\n            })\n        );\n    }\n\n    /**\n     * Checks if given filter is a default filter\n     * @param filterName Name of the target task filter\n     * @returns Boolean value for whether the filter is a default filter\n     */\n    isDefaultFilter(filterName: string): boolean {\n        const defaultFilters = this.defaultTaskFilters();\n        return defaultFilters.findIndex((filter) => filterName === filter.name) !== -1;\n    }\n\n    /**\n     * Finds a task using an object with optional query properties.\n     * @param requestNode Query object\n     * @returns Task information\n     */\n    getTaskFilterCounter(taskFilter: TaskFilterCloudModel): Observable<any> {\n        if (taskFilter.appName || taskFilter.appName === '') {\n            const queryUrl = `${this.getBasePath(taskFilter.appName)}/query/v1/tasks`;\n            const queryParams = {\n                assignee: taskFilter.assignee,\n                status: taskFilter.status,\n                appName: taskFilter.appName,\n                maxItems: 1\n            };\n            return this.get<TaskCloudNodePaging>(queryUrl, queryParams).pipe(\n                map((tasks) => tasks.list.pagination.totalItems)\n            );\n        } else {\n            return throwError('Appname not configured');\n        }\n    }\n\n    /**\n     * Calls update preference api to update task filter\n     * @param appName Name of the target app\n     * @param key Key of the task filters\n     * @param filters Details of update filter\n     * @returns Observable of updated task filters\n     */\n    private updateTaskFilters(appName: string, key: string, filters: TaskFilterCloudModel[]): Observable<TaskFilterCloudModel[]> {\n        return this.preferenceService.updatePreference(appName, key, filters);\n    }\n\n    /**\n     * Creates a uniq key with appName and username\n     * @param appName Name of the target app\n     * @returns String of task filters preference key\n     */\n    private prepareKey(appName: string): string {\n        return `task-filters-${appName}-${this.identityUserService.getCurrentUserInfo().username}`;\n    }\n\n    /**\n     * Finds and returns the task filters from preferences\n     * @param appName Name of the target app\n     * @returns Array of TaskFilterCloudModel\n     */\n    private findFiltersByKeyInPreferences(preferences: any, key: string): TaskFilterCloudModel[] {\n        const result = preferences.find((filter: any) => { return filter.entry.key === key; });\n        return result && result.entry ? JSON.parse(result.entry.value) : [];\n    }\n\n    /**\n     * Creates and returns the default filters for a task app.\n     * @param appName Name of the target app\n     * @returns Array of TaskFilterCloudModel\n     */\n    private defaultTaskFilters(appName?: string): TaskFilterCloudModel[] {\n        return [\n            new TaskFilterCloudModel({\n                name: 'ADF_CLOUD_TASK_FILTERS.MY_TASKS',\n                key: 'my-tasks',\n                icon: 'inbox',\n                appName,\n                status: 'ASSIGNED',\n                assignee: this.identityUserService.getCurrentUserInfo().username,\n                sort: 'createdDate',\n                order: 'DESC',\n                showCounter: true\n            }),\n            new TaskFilterCloudModel({\n                name: 'ADF_CLOUD_TASK_FILTERS.QUEUED_TASKS',\n                key: 'queued-tasks',\n                icon: 'queue',\n                appName,\n                status: 'CREATED',\n                assignee: '',\n                sort: 'createdDate',\n                order: 'DESC',\n                showCounter: true\n            }),\n            new TaskFilterCloudModel({\n                name: 'ADF_CLOUD_TASK_FILTERS.COMPLETED_TASKS',\n                key: 'completed-tasks',\n                icon: 'done',\n                appName,\n                status: 'COMPLETED',\n                assignee: '',\n                sort: 'createdDate',\n                order: 'DESC'\n            })\n        ];\n    }\n\n    getTaskNotificationSubscription(appName: string): Observable<TaskCloudEngineEvent[]> {\n        return this.notificationCloudService.makeGQLQuery(appName, TASK_EVENT_SUBSCRIPTION_QUERY)\n            .pipe(map((events: any) => events.data.engineEvents));\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { EventEmitter, Input, Output, OnDestroy, Directive } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\nimport { FilterParamsModel } from '../models/filter-cloud.model';\n\n@Directive()\n// tslint:disable-next-line: directive-class-suffix\nexport abstract class BaseTaskFiltersCloudComponent implements OnDestroy {\n    /** Display filters available to the current user for the application with the specified name. */\n    @Input()\n    appName: string = '';\n\n    /**\n     * Parameters to use for the task filter cloud. If there is no match then the default filter\n     * (the first one in the list) is selected.\n     */\n    @Input()\n    filterParam: FilterParamsModel;\n\n    /** Toggles display of the filter's icons. */\n    @Input()\n    showIcons: boolean = false;\n\n    /** Emitted when the list is loaded. */\n    @Output()\n    success: EventEmitter<any> = new EventEmitter<any>();\n\n    /** Emitted when an error occurs during loading. */\n    @Output()\n    error: EventEmitter<any> = new EventEmitter<any>();\n\n    counters$: {[key: string]: Observable<number>} = {};\n    updatedCounters: string[] = [];\n\n    protected onDestroy$ = new Subject<boolean>();\n\n    ngOnDestroy() {\n        this.onDestroy$.next(true);\n        this.onDestroy$.complete();\n    }\n\n    wasFilterUpdated(filterKey: string): boolean {\n        return this.updatedCounters.includes(filterKey);\n    }\n\n    addToUpdatedCounters(filterKey: string) {\n        if (!this.updatedCounters.includes(filterKey)) {\n            this.updatedCounters.push(filterKey);\n        }\n    }\n\n    resetFilterCounter(filterKey: string) {\n        const filterIndex = this.updatedCounters.indexOf(filterKey);\n        if (filterIndex > -1) {\n            this.updatedCounters.splice(filterIndex, 1);\n        }\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, EventEmitter, OnChanges, Output, SimpleChanges, OnInit, ViewEncapsulation } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { TaskFilterCloudService } from '../services/task-filter-cloud.service';\nimport { TaskFilterCloudModel, FilterParamsModel } from '../models/filter-cloud.model';\nimport { AppConfigService, TranslationService } from '@alfresco/adf-core';\nimport { debounceTime, takeUntil } from 'rxjs/operators';\nimport { BaseTaskFiltersCloudComponent } from './base-task-filters-cloud.component';\nimport { TaskDetailsCloudModel } from '../../start-task/models/task-details-cloud.model';\nimport { TaskCloudEngineEvent } from '../../../models/engine-event-cloud.model';\n\n@Component({\n    selector: 'adf-cloud-task-filters',\n    templateUrl: './base-task-filters-cloud.component.html',\n    styleUrls: ['./base-task-filters-cloud.component.scss'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class TaskFiltersCloudComponent extends BaseTaskFiltersCloudComponent implements OnInit, OnChanges {\n\n    /** Emitted when a filter is being selected based on the filterParam input. */\n    @Output()\n    filterSelected = new EventEmitter<TaskFilterCloudModel>();\n\n    /** Emitted when a filter is being clicked from the UI. */\n    @Output()\n    filterClicked = new EventEmitter<TaskFilterCloudModel>();\n\n    /** Emitted when filter counters are updated. */\n    @Output()\n    filterCounterUpdated: EventEmitter<TaskCloudEngineEvent[]> = new EventEmitter<TaskCloudEngineEvent[]>();\n\n    filters$: Observable<TaskFilterCloudModel[]>;\n    filters: TaskFilterCloudModel[] = [];\n    currentFilter: TaskFilterCloudModel;\n    enableNotifications: boolean;\n\n    constructor(private taskFilterCloudService: TaskFilterCloudService,\n                private translationService: TranslationService,\n                private appConfigService: AppConfigService) {\n        super();\n    }\n\n    ngOnInit() {\n        this.enableNotifications = this.appConfigService.get('notifications', true);\n        this.initFilterCounterNotifications();\n        this.getFilters(this.appName);\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        const appName = changes['appName'];\n        const filter = changes['filterParam'];\n        if (appName && appName.currentValue !== appName.previousValue) {\n            this.getFilters(appName.currentValue);\n        } else if (filter && filter.currentValue !== filter.previousValue) {\n            this.selectFilterAndEmit(filter.currentValue);\n        }\n    }\n\n    /**\n     * Return the filter list filtered by appName\n     */\n    getFilters(appName: string) {\n        this.filters$ = this.taskFilterCloudService.getTaskListFilters(appName);\n\n        this.filters$.pipe(takeUntil(this.onDestroy$)).subscribe(\n            (res: TaskFilterCloudModel[]) => {\n                this.resetFilter();\n                this.filters = res || [];\n                this.selectFilterAndEmit(this.filterParam);\n                this.updateFilterCounters();\n                this.success.emit(res);\n            },\n            (err: any) => {\n                this.error.emit(err);\n            }\n        );\n    }\n\n    updateFilterCounters() {\n        this.filters.forEach((filter: TaskFilterCloudModel) => this.updateFilterCounter(filter));\n    }\n\n    updateFilterCounter(filter: TaskFilterCloudModel) {\n        if (filter?.showCounter) {\n            this.counters$[filter.key] = this.taskFilterCloudService.getTaskFilterCounter(filter);\n        }\n    }\n\n    initFilterCounterNotifications() {\n        if (this.appName && this.enableNotifications) {\n            this.taskFilterCloudService.getTaskNotificationSubscription(this.appName)\n                .pipe(debounceTime(3000))\n                .subscribe((result: TaskCloudEngineEvent[]) => {\n                    result.map((taskEvent: TaskCloudEngineEvent) => {\n                        this.checkFilterCounter(taskEvent.entity);\n                    });\n\n                    if (this.updatedCounters.length) {\n                        this.updateFilterCounters();\n                        this.filterCounterUpdated.emit(result);\n                    }\n                });\n        }\n    }\n\n    checkFilterCounter(filterNotification: TaskDetailsCloudModel) {\n        this.filters.map((filter) => {\n            if (this.isFilterPresent(filter, filterNotification)) {\n                this.addToUpdatedCounters(filter.key);\n            }\n        });\n    }\n\n    isFilterPresent(filter: TaskFilterCloudModel, filterNotification: TaskDetailsCloudModel): boolean {\n        return filter.status === filterNotification.status\n            && (filter.assignee === filterNotification.assignee || filterNotification.assignee === undefined);\n    }\n\n    public selectFilter(paramFilter: FilterParamsModel) {\n        if (paramFilter) {\n            this.currentFilter = this.filters.find((filter, index) =>\n                paramFilter.index === index ||\n                paramFilter.key === filter.key ||\n                paramFilter.id === filter.id ||\n                (paramFilter.name &&\n                    (paramFilter.name.toLocaleLowerCase() === this.translationService.instant(filter.name).toLocaleLowerCase())\n                ));\n        }\n    }\n\n    public selectFilterAndEmit(newParamFilter: FilterParamsModel) {\n        if (newParamFilter) {\n            this.selectFilter(newParamFilter);\n\n            if (this.currentFilter) {\n                this.resetFilterCounter(this.currentFilter.key);\n                this.filterSelected.emit(this.currentFilter);\n            }\n        } else {\n            this.currentFilter = undefined;\n        }\n    }\n\n    /**\n     * Selects and emits the clicked filter.\n     */\n    public onFilterClick(filter: FilterParamsModel) {\n        if (filter) {\n            this.selectFilter(filter);\n            this.updateFilterCounter(this.currentFilter);\n            this.filterClicked.emit(this.currentFilter);\n        } else {\n            this.currentFilter = undefined;\n        }\n    }\n\n    /**\n     * Select as default task filter the first in the list\n     */\n    public selectDefaultTaskFilter() {\n        if (!this.isFilterListEmpty()) {\n            this.currentFilter = this.filters[0];\n        }\n    }\n\n    /**\n     * Check if the filter list is empty\n     */\n    isFilterListEmpty(): boolean {\n        return this.filters === undefined || (this.filters && this.filters.length === 0);\n    }\n\n    /**\n     * Reset the filters properties\n     */\n    private resetFilter() {\n        this.filters = [];\n        this.currentFilter = undefined;\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, Input, EventEmitter, Output } from '@angular/core';\nimport { MatSelectChange } from '@angular/material/select';\nimport { ProcessFilterProperties, ProcessFilterOptions } from '../../process/process-filters/models/process-filter-cloud.model';\nimport { FormGroup, FormControl } from '@angular/forms';\nimport { DateRangeFilter, DateCloudFilterType } from '../../models/date-cloud-filter.model';\nimport moment from 'moment-es6';\n\n@Component({\n     selector: 'adf-cloud-date-range-filter',\n     styleUrls: ['./date-range-filter.component.scss'],\n     templateUrl: './date-range-filter.component.html'\n })\n export class DateRangeFilterComponent {\n\n    @Input()\n    processFilterProperty: ProcessFilterProperties;\n\n    @Input()\n    options: DateCloudFilterType[];\n\n    @Output()\n    dateChanged = new EventEmitter<DateRangeFilter>();\n\n    @Output()\n    dateTypeChange = new EventEmitter<DateCloudFilterType>();\n\n    type: DateCloudFilterType;\n    filteredProperties: ProcessFilterOptions[] = [];\n    dateRangeForm = new FormGroup({\n        from: new FormControl(),\n        to: new FormControl()\n    });\n\n    ngOnInit() {\n        this.options = this.options ? this.options : this.createDefaultRangeOptions();\n        const defaultProperties = this.createDefaultDateOptions();\n        this.filteredProperties = defaultProperties.filter((filterProperty) => this.isValidProperty(this.options, filterProperty.value.toString()));\n        if (this.hasPreselectedValues()) {\n            this.setPreselectedValues();\n        }\n    }\n\n    onSelectionChange(option: MatSelectChange) {\n        this.type = option.value;\n        if (!this.isDateRangeType()) {\n            this.dateTypeChange.emit(this.type);\n        }\n    }\n\n    isDateRangeType(): boolean {\n        return this.type === DateCloudFilterType.RANGE;\n    }\n\n    onDateRangeClosed() {\n        const dateRange = {\n            startDate: moment(this.dateRangeForm.controls.from.value).startOf('day').toISOString(true),\n            endDate: moment(this.dateRangeForm.controls.to.value).endOf('day').toISOString(true)\n        };\n        this.dateChanged.emit(dateRange);\n    }\n\n    private hasPreselectedValues() {\n        return !!this.processFilterProperty?.attributes && !!this.processFilterProperty?.value;\n    }\n\n    private setPreselectedValues() {\n        const from = this.getFilterAttribute('from');\n        const to = this.getFilterAttribute('to');\n        const type = this.getFilterAttribute('dateType');\n\n        this.dateRangeForm.get('from').setValue(moment(this.getFilterValue(from)));\n        this.dateRangeForm.get('to').setValue(moment(this.getFilterValue(to)));\n        this.type = this.getFilterValue(type);\n    }\n\n    private getFilterAttribute(key: string): string {\n        return this.processFilterProperty.attributes[key];\n    }\n\n    private getFilterValue(attribute: string) {\n        return this.processFilterProperty.value[attribute];\n    }\n\n    private isValidProperty(filterProperties: string[], key: string): boolean {\n        return filterProperties ? filterProperties.indexOf(key) >= 0 : true;\n    }\n\n    private createDefaultRangeOptions(): DateCloudFilterType[] {\n        return [\n            DateCloudFilterType.NO_DATE,\n            DateCloudFilterType.TODAY,\n            DateCloudFilterType.WEEK,\n            DateCloudFilterType.MONTH,\n            DateCloudFilterType.QUARTER,\n            DateCloudFilterType.YEAR,\n            DateCloudFilterType.RANGE\n        ];\n    }\n\n    private createDefaultDateOptions(): ProcessFilterOptions[] {\n        return  [\n            {\n                value: DateCloudFilterType.NO_DATE,\n                label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.DATE_RANGE.NO_DATE'\n            },\n            {\n                value: DateCloudFilterType.TODAY,\n                label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.DATE_RANGE.TODAY'\n            },\n            {\n                value: DateCloudFilterType.TOMORROW,\n                label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.DATE_RANGE.TOMORROW'\n            },\n            {\n                value: DateCloudFilterType.NEXT_7_DAYS,\n                label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.DATE_RANGE.NEXT_7_DAYS'\n            },\n            {\n                value: DateCloudFilterType.WEEK,\n                label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.DATE_RANGE.WEEK'\n            },\n            {\n                value: DateCloudFilterType.MONTH,\n                label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.DATE_RANGE.MONTH'\n            },\n            {\n                value: DateCloudFilterType.QUARTER,\n                label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.DATE_RANGE.QUARTER'\n            },\n            {\n                value: DateCloudFilterType.YEAR,\n                label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.DATE_RANGE.YEAR'\n            },\n            {\n                value: DateCloudFilterType.RANGE,\n                label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.DATE_RANGE.RANGE'\n            }\n        ];\n    }\n }\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NgModule } from '@angular/core';\nimport { CoreModule } from '@alfresco/adf-core';\nimport { DateRangeFilterComponent } from './date-range-filter/date-range-filter.component';\nimport { MaterialModule } from '../material.module';\nimport { CommonModule } from '@angular/common';\nimport { DateRangeFilterService } from './date-range-filter/date-range-filter.service';\n\n@NgModule({\n    declarations: [ DateRangeFilterComponent ],\n    imports: [\n        CommonModule,\n        CoreModule,\n        MaterialModule\n    ],\n    exports: [\n        DateRangeFilterComponent\n    ],\n    providers: [\n        DateRangeFilterService\n    ]\n})\nexport class ProcessCommonModule {}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FormControl } from '@angular/forms';\nimport {\n    Component,\n    OnInit,\n    Output,\n    EventEmitter,\n    ViewEncapsulation,\n    Input,\n    SimpleChanges,\n    OnChanges,\n    OnDestroy,\n    ChangeDetectionStrategy,\n    ViewChild, ElementRef, SimpleChange\n} from '@angular/core';\nimport { Observable, of, BehaviorSubject, Subject } from 'rxjs';\nimport { switchMap, debounceTime, distinctUntilChanged, mergeMap, tap, filter, map, takeUntil } from 'rxjs/operators';\nimport {\n    FullNamePipe,\n    IdentityUserModel,\n    IdentityUserService,\n    LogService\n} from '@alfresco/adf-core';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport { ComponentSelectionMode } from '../../types';\n\n@Component({\n    selector: 'adf-cloud-people',\n    templateUrl: './people-cloud.component.html',\n    styleUrls: ['./people-cloud.component.scss'],\n    animations: [\n        trigger('transitionMessages', [\n            state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\n            transition('void => enter', [\n                style({ opacity: 0, transform: 'translateY(-100%)' }),\n                animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n            ])\n        ])\n    ],\n    providers: [FullNamePipe],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None\n})\n\nexport class PeopleCloudComponent implements OnInit, OnChanges, OnDestroy {\n\n    /** Name of the application. If specified, this shows the users who have access to the app. */\n    @Input()\n    appName: string;\n\n    /** User selection mode (single/multiple). */\n    @Input()\n    mode: ComponentSelectionMode = 'single';\n\n    /** Role names of the users to be listed. */\n    @Input()\n    roles: string[];\n\n    /** This flag enables the validation on the preSelectUsers passed as input.\n     * In case the flag is true the components call the identity service to verify the validity of the information passed as input.\n     * Otherwise, no check will be done.\n     */\n    @Input()\n    validate: boolean = false;\n\n    /** Show the info in readonly mode\n     */\n    @Input()\n    readOnly: boolean = false;\n\n    /** Array of users to be pre-selected. All users in the\n     * array are pre-selected in multi selection mode, but only the first user\n     * is pre-selected in single selection mode.\n     * Mandatory properties are: id, email, username\n     */\n    @Input()\n    preSelectUsers: IdentityUserModel[] = [];\n\n    /** Array of users to be excluded.\n     * Mandatory properties are: id, email, username\n     */\n    @Input()\n    excludedUsers: IdentityUserModel[] = [];\n\n    /** FormControl to list of users */\n    @Input()\n    userChipsCtrl: FormControl = new FormControl({ value: '', disabled: false });\n\n    /** FormControl to search the user */\n    @Input()\n    searchUserCtrl = new FormControl({ value: '', disabled: false });\n\n    /** Placeholder translation key\n     */\n    @Input()\n    title: string;\n\n    /** Emitted when a user is selected. */\n    @Output()\n    selectUser = new EventEmitter<IdentityUserModel>();\n\n    /** Emitted when a selected user is removed in multi selection mode. */\n    @Output()\n    removeUser = new EventEmitter<IdentityUserModel>();\n\n    /** Emitted when a user selection change. */\n    @Output()\n    changedUsers = new EventEmitter<IdentityUserModel[]>();\n\n    /** Emitted when an warning occurs. */\n    @Output()\n    warning = new EventEmitter<any>();\n\n    @ViewChild('userInput')\n    private userInput: ElementRef<HTMLInputElement>;\n\n    private _searchUsers: IdentityUserModel[] = [];\n    private onDestroy$ = new Subject<boolean>();\n\n    selectedUsers: IdentityUserModel[] = [];\n    invalidUsers: IdentityUserModel[] = [];\n\n    searchUsers$ = new BehaviorSubject<IdentityUserModel[]>(this._searchUsers);\n    _subscriptAnimationState: string = 'enter';\n    clientId: string;\n    isFocused: boolean;\n\n    validateUsersMessage: string;\n    searchedValue = '';\n\n    validationLoading = false;\n    searchLoading = false;\n\n    constructor(\n        private identityUserService: IdentityUserService,\n        private logService: LogService) {}\n\n    ngOnInit(): void {\n        this.loadClientId();\n        this.initSearch();\n    }\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if (this.valueChanged(changes.preSelectUsers)\n            || this.valueChanged(changes.mode)\n            || this.valueChanged(changes.validate)\n        ) {\n            if (this.hasPreSelectUsers()) {\n                this.loadPreSelectUsers();\n            } else if (this.hasPreselectedUsersCleared(changes)) {\n                this.selectedUsers = [];\n                this.invalidUsers = [];\n            }\n\n            if (!this.isValidationEnabled()) {\n                this.invalidUsers = [];\n            }\n        }\n\n        if (changes.appName && this.isAppNameChanged(changes.appName)) {\n            this.loadClientId();\n        }\n    }\n\n    private async loadClientId(): Promise<void> {\n        this.clientId = await this.identityUserService.getClientIdByApplicationName(this.appName).toPromise();\n        if (this.clientId) {\n            this.searchUserCtrl.enable();\n        }\n    }\n\n    private initSearch(): void {\n        this.searchUserCtrl.valueChanges.pipe(\n            filter((value) => {\n                this.searchLoading = true;\n                return typeof value === 'string';\n            }),\n            tap((value: string) => {\n                if (value) {\n                    this.setTypingError();\n                }\n            }),\n            debounceTime(500),\n            distinctUntilChanged(),\n            tap((value: string) => {\n                if (value.trim()) {\n                    this.searchedValue = value;\n                } else {\n                    this.searchUserCtrl.markAsPristine();\n                    this.searchUserCtrl.markAsUntouched();\n                }\n            }),\n            tap(() => {\n                this.resetSearchUsers();\n            }),\n            switchMap((search) =>\n                this.identityUserService.findUsersByName(search.trim())),\n            mergeMap((users) => {\n                this.resetSearchUsers();\n                this.searchLoading = false;\n                return users;\n            }),\n            filter(user => !this.isUserAlreadySelected(user) && !this.isExcludedUser(user)),\n            mergeMap(user => {\n                if (this.appName) {\n                    return this.checkUserHasAccess(user.id).pipe(\n                        mergeMap(\n                            hasRole => hasRole ? of(user) : of()\n                        )\n                    );\n                } else if (this.hasRoles()) {\n                    return this.filterUsersByRoles(user);\n                } else {\n                    return of(user);\n                }\n            }),\n            takeUntil(this.onDestroy$)\n        ).subscribe(user => {\n            this._searchUsers.push(user);\n            this.searchUsers$.next(this._searchUsers);\n        });\n    }\n\n    ngOnDestroy(): void {\n        this.onDestroy$.next(true);\n        this.onDestroy$.complete();\n    }\n\n    private isAppNameChanged(change: SimpleChange): boolean {\n        return change && change.previousValue !== change.currentValue && this.appName && this.appName.length > 0;\n    }\n\n    isValidationEnabled(): boolean {\n        return this.validate === true;\n    }\n\n    private checkUserHasAccess(userId: string): Observable<boolean> {\n        if (this.hasRoles()) {\n            return this.identityUserService.checkUserHasAnyClientAppRole(userId, this.clientId, this.roles);\n        } else {\n            return this.identityUserService.checkUserHasClientApp(userId, this.clientId);\n        }\n    }\n\n    private hasRoles(): boolean {\n        return this.roles && this.roles.length > 0;\n    }\n\n    filterUsersByRoles(user: IdentityUserModel): Observable<IdentityUserModel> {\n        return this.identityUserService.checkUserHasRole(user.id, this.roles).pipe(\n            map((hasRole: boolean) => ({ hasRole: hasRole, user: user })),\n            filter((filteredUser: { hasRole: boolean, user: IdentityUserModel }) => filteredUser.hasRole),\n            map((filteredUser: { hasRole: boolean, user: IdentityUserModel }) => filteredUser.user));\n    }\n\n    private isUserAlreadySelected(searchUser: IdentityUserModel): boolean {\n        if (this.selectedUsers && this.selectedUsers.length > 0) {\n            const result = this.selectedUsers.find((selectedUser) => {\n                return this.compare(selectedUser, searchUser);\n            });\n\n            return !!result;\n        }\n        return false;\n    }\n\n    private isExcludedUser(searchUser: IdentityUserModel): boolean {\n        if (this.excludedUsers?.length > 0) {\n            return !!this.excludedUsers.find(excludedUser => this.compare(excludedUser, searchUser));\n        }\n        return false;\n    }\n\n    private async loadPreSelectUsers(): Promise<void> {\n        this.selectedUsers = [];\n\n        if (this.isSingleMode()) {\n            this.selectedUsers = [this.preSelectUsers[0]];\n        } else {\n            this.selectedUsers = this.removeDuplicatedUsers(this.preSelectUsers);\n        }\n        this.userChipsCtrl.setValue(this.selectedUsers[0].username);\n        if (this.isValidationEnabled()) {\n            this.validationLoading = true;\n            await this.validatePreselectUsers();\n            this.validationLoading = false;\n        }\n    }\n\n    private getPreselectedUsers(): IdentityUserModel[] {\n        if (this.isSingleMode()) {\n            return [this.preSelectUsers[0]];\n        } else {\n            return this.removeDuplicatedUsers(this.preSelectUsers);\n        }\n    }\n\n    async validatePreselectUsers(): Promise<any> {\n        this.invalidUsers = [];\n        const validUsers: IdentityUserModel[] = [];\n\n        for (const user of this.getPreselectedUsers()) {\n            try {\n                const validationResult = await this.searchUser(user);\n\n                if (this.compare(user, validationResult)) {\n                    validationResult.readonly = user.readonly;\n                    validUsers.push(validationResult);\n                } else {\n                    this.invalidUsers.push(user);\n                }\n            } catch (error) {\n                this.invalidUsers.push(user);\n                this.logService.error(error);\n            }\n        }\n\n        this.checkPreselectValidationErrors();\n        this.selectedUsers = validUsers.concat(this.invalidUsers);\n    }\n\n    compare(preselectedUser: IdentityUserModel, identityUser: IdentityUserModel): boolean {\n        if (preselectedUser && identityUser) {\n            const uniquePropertyIdentifiers = ['id', 'username', 'email'];\n            for (const property of Object.keys(preselectedUser)) {\n                if (preselectedUser[property] !== undefined && uniquePropertyIdentifiers.includes(property)) {\n                    return preselectedUser[property] === identityUser[property];\n                }\n            }\n        }\n        return false;\n    }\n\n    private getSearchKey(user: IdentityUserModel): string {\n        if (user.id) {\n            return 'id';\n        } else if (user.email) {\n            return 'email';\n        } else if (user.username) {\n            return 'username';\n        } else {\n            return null;\n        }\n    }\n\n    async searchUser(user: IdentityUserModel): Promise<IdentityUserModel> {\n        const key = this.getSearchKey(user);\n\n        switch (key) {\n            case 'id':\n                return this.identityUserService.findUserById(user[key]).toPromise();\n            case 'username':\n                return (await this.identityUserService.findUserByUsername(user[key]).toPromise())[0];\n            case 'email':\n                return (await this.identityUserService.findUserByEmail(user[key]).toPromise())[0];\n            default:\n                return null;\n        }\n    }\n\n    removeDuplicatedUsers(users: IdentityUserModel[]): IdentityUserModel[] {\n        return users.filter((user, index, self) =>\n            index === self.findIndex(auxUser =>\n                user.id === auxUser.id && user.username === auxUser.username && user.email === auxUser.email\n            ));\n    }\n\n    checkPreselectValidationErrors(): void {\n        this.invalidUsers = this.removeDuplicatedUsers(this.invalidUsers);\n\n        if (this.invalidUsers.length > 0) {\n            this.generateInvalidUsersMessage();\n        }\n\n        this.warning.emit({\n            message: 'INVALID_PRESELECTED_USERS',\n            users: this.invalidUsers\n        });\n    }\n\n    onSelect(user: IdentityUserModel): void {\n        if (user) {\n            this.selectUser.emit(user);\n\n            if (this.isMultipleMode()) {\n                if (!this.isUserAlreadySelected(user)) {\n                    this.selectedUsers.push(user);\n                }\n            } else {\n                this.invalidUsers = [];\n                this.selectedUsers = [user];\n            }\n\n            this.userInput.nativeElement.value = '';\n            this.searchUserCtrl.setValue('');\n            this.userChipsCtrlValue(this.selectedUsers[0].username);\n\n            this.changedUsers.emit(this.selectedUsers);\n            this.resetSearchUsers();\n        }\n    }\n\n    onRemove(userToRemove: IdentityUserModel): void {\n        this.removeUser.emit(userToRemove);\n        this.removeUserFromSelected(userToRemove);\n        this.changedUsers.emit(this.selectedUsers);\n        if (this.selectedUsers.length === 0) {\n            this.userChipsCtrlValue('');\n\n        } else {\n            this.userChipsCtrlValue(this.selectedUsers[0].username);\n        }\n        this.searchUserCtrl.markAsDirty();\n        this.searchUserCtrl.markAsTouched();\n\n        if (this.isValidationEnabled()) {\n            this.removeUserFromValidation(userToRemove);\n            this.checkPreselectValidationErrors();\n        }\n    }\n\n    private userChipsCtrlValue(value: string) {\n        this.userChipsCtrl.setValue(value);\n        this.userChipsCtrl.markAsDirty();\n        this.userChipsCtrl.markAsTouched();\n    }\n\n    private removeUserFromSelected({ id, username, email }: IdentityUserModel): void {\n        const indexToRemove = this.selectedUsers.findIndex(user => {\n            return user.id === id\n                && user.username === username\n                && user.email === email;\n        });\n\n        if (indexToRemove !== -1) {\n            this.selectedUsers.splice(indexToRemove, 1);\n        }\n    }\n\n    private removeUserFromValidation({ id, username, email }: IdentityUserModel): void {\n        const indexToRemove = this.invalidUsers.findIndex(user => {\n            return user.id === id\n                && user.username === username\n                && user.email === email;\n        });\n\n        if (indexToRemove !== -1) {\n            this.invalidUsers.splice(indexToRemove, 1);\n        }\n    }\n\n    generateInvalidUsersMessage(): void {\n        this.validateUsersMessage = '';\n\n        this.invalidUsers.forEach((invalidUser, index) => {\n            if (index === this.invalidUsers.length - 1) {\n                this.validateUsersMessage += `${invalidUser.username} `;\n            } else {\n                this.validateUsersMessage += `${invalidUser.username}, `;\n            }\n        });\n    }\n\n    setTypingError(): void {\n        this.searchUserCtrl.setErrors({\n            searchTypingError: true,\n            ...this.searchUserCtrl.errors\n        });\n    }\n\n    hasPreselectError(): boolean {\n        return this.invalidUsers\n            && this.invalidUsers.length > 0;\n    }\n\n    getDisplayName(user): string {\n        return FullNamePipe.prototype.transform(user);\n    }\n\n    isMultipleMode(): boolean {\n        return this.mode === 'multiple';\n    }\n\n    isSingleMode(): boolean {\n        return this.mode === 'single';\n    }\n\n    private isSingleSelectionReadonly(): boolean {\n        return this.isSingleMode()\n            && this.selectedUsers.length === 1\n            && this.selectedUsers[0].readonly === true;\n    }\n\n    private hasPreSelectUsers(): boolean {\n        return this.preSelectUsers\n            && this.preSelectUsers.length > 0;\n    }\n\n    private valueChanged(change: SimpleChange): boolean {\n        return change\n            && change.currentValue !== change.previousValue;\n    }\n\n    private hasPreselectedUsersCleared(changes: SimpleChanges): boolean {\n        return changes\n            && changes.preSelectUsers\n            && changes.preSelectUsers.currentValue\n            && changes.preSelectUsers.currentValue.length === 0;\n    }\n\n    private resetSearchUsers(): void {\n        this._searchUsers = [];\n        this.searchUsers$.next(this._searchUsers);\n    }\n\n    getSelectedUsers(): IdentityUserModel[] {\n        return this.selectedUsers;\n    }\n\n    isReadonly(): boolean {\n        return this.readOnly || this.isSingleSelectionReadonly();\n    }\n\n    isValidationLoading(): boolean {\n        return this.isValidationEnabled() && this.validationLoading;\n    }\n\n    setFocus(isFocused: boolean) {\n        this.isFocused = isFocused;\n    }\n\n    hasError(): boolean {\n        return !!this.searchUserCtrl.errors;\n    }\n\n    getValidationPattern(): string {\n        return this.searchUserCtrl.errors.pattern.requiredPattern;\n    }\n\n    getValidationMaxLength(): string {\n        return this.searchUserCtrl.errors.maxlength.requiredLength;\n    }\n\n    getValidationMinLength(): string {\n        return this.searchUserCtrl.errors.minlength.requiredLength;\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NgModule } from '@angular/core';\nimport { PeopleCloudComponent } from './components/people-cloud.component';\nimport { CommonModule } from '@angular/common';\nimport { MaterialModule } from '../material.module';\nimport { CoreModule } from '@alfresco/adf-core';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FlexLayoutModule,\n        MaterialModule,\n        FormsModule,\n        ReactiveFormsModule,\n        CoreModule\n    ],\n    declarations: [PeopleCloudComponent],\n    exports: [\n        PeopleCloudComponent\n    ]\n})\nexport class PeopleCloudModule {\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { IdentityUserService } from '@alfresco/adf-core';\nimport { Injectable, Inject } from '@angular/core';\nimport { Observable, of, BehaviorSubject } from 'rxjs';\nimport { ServiceTaskFilterCloudModel } from '../models/filter-cloud.model';\nimport { switchMap, map } from 'rxjs/operators';\nimport { PreferenceCloudServiceInterface } from '../../../services/preference-cloud.interface';\nimport { TASK_FILTERS_SERVICE_TOKEN } from '../../../services/cloud-token.service';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class ServiceTaskFilterCloudService {\n    private filtersSubject: BehaviorSubject<ServiceTaskFilterCloudModel[]>;\n    filters$: Observable<ServiceTaskFilterCloudModel[]>;\n\n    constructor(\n        private identityUserService: IdentityUserService,\n        @Inject(TASK_FILTERS_SERVICE_TOKEN)\n        public preferenceService: PreferenceCloudServiceInterface\n    ) {\n        this.filtersSubject = new BehaviorSubject([]);\n        this.filters$ = this.filtersSubject.asObservable();\n    }\n\n    /**\n     * Creates and returns the default task filters for an app.\n     * @param appName Name of the target app\n     * @returns Observable of default filters task filters just created or created filters\n     */\n    private createDefaultFilters(appName: string) {\n        const key: string = this.prepareKey(appName);\n        this.preferenceService.getPreferences(appName, key).pipe(\n            switchMap((response: any) => {\n                const preferences = (response && response.list && response.list.entries) ? response.list.entries : [];\n                if (!this.hasPreferences(preferences) || !this.hasTaskFilters(preferences, key)) {\n                    return this.createTaskFilters(appName, key, this.defaultServiceTaskFilters(appName));\n                } else {\n                    return of(this.findFiltersByKeyInPreferences(preferences, key));\n                }\n            })\n        ).subscribe((filters) => {\n            this.addFiltersToStream(filters);\n        });\n    }\n\n    /**\n     * Checks user preference are empty or not\n     * @param preferences User preferences of the target app\n     * @returns Boolean value if the preferences are not empty\n     */\n    private hasPreferences(preferences: any): boolean {\n        return preferences && preferences.length > 0;\n    }\n\n    /**\n     * Checks for task filters in given user preferences\n     * @param preferences User preferences of the target app\n     * @param key Key of the task filters\n     * @param filters Details of create filter\n     * @returns Boolean value if the preference has task filters\n     */\n    private hasTaskFilters(preferences: any, key: string): boolean {\n        const filters = preferences.find((filter: any) => { return filter.entry.key === key; });\n        return (filters && filters.entry) ? JSON.parse(filters.entry.value).length > 0 : false;\n    }\n\n    /**\n     * Calls create preference api to create task filters\n     * @param appName Name of the target app\n     * @param key Key of the task instance filters\n     * @param filters Details of new task filter\n     * @returns Observable of created task filters\n     */\n    private createTaskFilters(appName: string, key: string, filters: ServiceTaskFilterCloudModel[]): Observable<ServiceTaskFilterCloudModel[]> {\n        return this.preferenceService.createPreference(appName, key, filters);\n    }\n\n    /**\n     * Calls get preference api to get task filter by preference key\n     * @param appName Name of the target app\n     * @param key Key of the task filters\n     * @returns Observable of task filters\n     */\n    private getTaskFiltersByKey(appName: string, key: string): Observable<ServiceTaskFilterCloudModel[]> {\n        return this.preferenceService.getPreferenceByKey(appName, key);\n    }\n\n    /**\n     * Gets all task filters for a task app.\n     * @param appName Name of the target app\n     * @returns Observable of task filter details\n     */\n    getTaskListFilters(appName?: string): Observable<ServiceTaskFilterCloudModel[]> {\n        this.createDefaultFilters(appName);\n        return this.filters$;\n    }\n\n    /**\n     * Gets a task filter.\n     * @param appName Name of the target app\n     * @param id ID of the task\n     * @returns Details of the task filter\n     */\n    getTaskFilterById(appName: string, id: string): Observable<ServiceTaskFilterCloudModel> {\n        const key: string = this.prepareKey(appName);\n        return this.getTaskFiltersByKey(appName, key).pipe(\n            switchMap((filters: ServiceTaskFilterCloudModel[]) => {\n                if (filters && filters.length === 0) {\n                    return this.createTaskFilters(appName, key, this.defaultServiceTaskFilters(appName));\n                } else {\n                    return of(filters);\n                }\n            }),\n            map((filters: any) => {\n                return filters.filter((filter: ServiceTaskFilterCloudModel) => {\n                    return filter.id === id;\n                })[0];\n            })\n        );\n    }\n\n    /**\n     * Adds a new task filter.\n     * @param filter The new filter to add\n     * @returns Observable of task instance filters with newly added filter\n     */\n    addFilter(newFilter: ServiceTaskFilterCloudModel): Observable<ServiceTaskFilterCloudModel[]> {\n        const key: string = this.prepareKey(newFilter.appName);\n        return this.getTaskFiltersByKey(newFilter.appName, key).pipe(\n            switchMap((filters: ServiceTaskFilterCloudModel[]) => {\n                if (filters && filters.length === 0) {\n                    return this.createTaskFilters(newFilter.appName, key, <ServiceTaskFilterCloudModel[]> [newFilter]);\n                } else {\n                    filters.push(newFilter);\n                    return this.preferenceService.updatePreference(newFilter.appName, key, filters);\n                }\n            }),\n            map((filters: ServiceTaskFilterCloudModel[]) => {\n                this.addFiltersToStream(filters);\n                return filters;\n            })\n        );\n    }\n\n    private addFiltersToStream(filters: ServiceTaskFilterCloudModel[]) {\n        this.filtersSubject.next(filters);\n    }\n\n    /**\n     * Updates a task filter.\n     * @param filter The filter to update\n     * @returns Observable of task instance filters with updated filter\n     */\n    updateFilter(updatedFilter: ServiceTaskFilterCloudModel): Observable<ServiceTaskFilterCloudModel[]> {\n        const key: string = this.prepareKey(updatedFilter.appName);\n        return this.getTaskFiltersByKey(updatedFilter.appName, key).pipe(\n            switchMap((filters: ServiceTaskFilterCloudModel[]) => {\n                if (filters && filters.length === 0) {\n                    return this.createTaskFilters(updatedFilter.appName, key, <ServiceTaskFilterCloudModel[]> [updatedFilter]);\n                } else {\n                    const itemIndex = filters.findIndex((filter: ServiceTaskFilterCloudModel) => filter.id === updatedFilter.id);\n                    filters[itemIndex] = updatedFilter;\n                    return this.updateTaskFilters(updatedFilter.appName, key, filters);\n                }\n            }),\n            map((updatedFilters: ServiceTaskFilterCloudModel[]) => {\n                this.addFiltersToStream(updatedFilters);\n                return updatedFilters;\n            })\n        );\n    }\n\n    /**\n     * Deletes a task filter\n     * @param filter The filter to delete\n     * @returns Observable of task instance filters without deleted filter\n     */\n    deleteFilter(deletedFilter: ServiceTaskFilterCloudModel): Observable<ServiceTaskFilterCloudModel[]> {\n        const key = this.prepareKey(deletedFilter.appName);\n        return this.getTaskFiltersByKey(deletedFilter.appName, key).pipe(\n            switchMap((filters: ServiceTaskFilterCloudModel[]) => {\n                if (filters && filters.length > 0) {\n                    filters = filters.filter(filter => filter.id !== deletedFilter.id);\n                    return this.updateTaskFilters(deletedFilter.appName, key, filters);\n                }\n                return of([]);\n            }),\n            map(filters => {\n                this.addFiltersToStream(filters);\n                return filters;\n            })\n        );\n    }\n\n    /**\n     * Checks if given filter is a default filter\n     * @param filterName Name of the target task filter\n     * @returns Boolean value for whether the filter is a default filter\n     */\n    isDefaultFilter(filterName: string): boolean {\n        const defaultFilters = this.defaultServiceTaskFilters();\n        return defaultFilters.findIndex((filter) => filterName === filter.name) !== -1;\n    }\n\n    /**\n     * Calls update preference api to update task filter\n     * @param appName Name of the target app\n     * @param key Key of the task filters\n     * @param filters Details of update filter\n     * @returns Observable of updated task filters\n     */\n    private updateTaskFilters(appName: string, key: string, filters: ServiceTaskFilterCloudModel[]): Observable<ServiceTaskFilterCloudModel[]> {\n        return this.preferenceService.updatePreference(appName, key, filters);\n    }\n\n    /**\n     * Creates a uniq key with appName and username\n     * @param appName Name of the target app\n     * @returns String of task filters preference key\n     */\n    private prepareKey(appName: string): string {\n        return `service-task-filters-${appName}-${this.identityUserService.getCurrentUserInfo().username}`;\n    }\n\n    /**\n     * Finds and returns the task filters from preferences\n     * @param appName Name of the target app\n     * @returns Array of TaskFilterCloudModel\n     */\n    private findFiltersByKeyInPreferences(preferences: any, key: string): ServiceTaskFilterCloudModel[] {\n        const result = preferences.find((filter: any) => { return filter.entry.key === key; });\n        return result && result.entry ? JSON.parse(result.entry.value) : [];\n    }\n\n    /**\n     * Creates and returns the default filters for a task app.\n     * @param appName Name of the target app\n     * @returns Array of TaskFilterCloudModel\n     */\n    private defaultServiceTaskFilters(appName?: string): ServiceTaskFilterCloudModel[] {\n        return [\n            {\n                id: this.generateRandomId(),\n                name: 'ADF_CLOUD_SERVICE_TASK_FILTERS.ALL_SERVICE_TASKS',\n                key: 'my-service-tasks',\n                icon: 'inbox',\n                appName,\n                status: '',\n                sort: 'startedDate',\n                order: 'DESC'\n            } as ServiceTaskFilterCloudModel,\n            {\n                id: this.generateRandomId(),\n                name: 'ADF_CLOUD_SERVICE_TASK_FILTERS.COMPLETED_TASKS',\n                key: 'completed-tasks',\n                icon: 'done',\n                appName,\n                status: 'COMPLETED',\n                sort: 'completedDate',\n                order: 'DESC'\n            } as ServiceTaskFilterCloudModel,\n            {\n                id: this.generateRandomId(),\n                name: 'ADF_CLOUD_SERVICE_TASK_FILTERS.ERRORED_TASKS',\n                key: 'errored-service-tasks',\n                icon: 'error',\n                appName,\n                status: 'ERROR',\n                sort: 'startedDate',\n                order: 'DESC'\n            } as ServiceTaskFilterCloudModel\n        ];\n    }\n\n    generateRandomId(): string {\n        return Math.random().toString(36).substr(2, 9);\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, Inject, OnInit } from '@angular/core';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\nimport { FormBuilder, FormGroup, AbstractControl, Validators } from '@angular/forms';\n\n@Component({\n  selector: 'adf-cloud-task-filter-dialog',\n  templateUrl: './task-filter-dialog-cloud.component.html',\n  styleUrls: ['./task-filter-dialog-cloud.component.scss']\n})\nexport class TaskFilterDialogCloudComponent implements OnInit {\n\n    public static ACTION_SAVE = 'SAVE';\n    defaultIcon = 'inbox';\n\n    filterForm: FormGroup;\n\n    constructor(\n        private fb: FormBuilder,\n        public dialogRef: MatDialogRef<TaskFilterDialogCloudComponent>,\n        @Inject(MAT_DIALOG_DATA) public data) {\n    }\n\n    ngOnInit() {\n        this.filterForm = this.fb.group({\n            name: [this.data.name, Validators.required]\n        });\n    }\n\n    onSaveClick() {\n        this.dialogRef.close({\n            action: TaskFilterDialogCloudComponent.ACTION_SAVE,\n            icon: this.defaultIcon,\n            name: this.nameController.value\n        });\n    }\n\n    onCancelClick() {\n        this.dialogRef.close();\n    }\n\n    get nameController(): AbstractControl {\n        return this.filterForm.get('name');\n    }\n\n    isValid(): boolean {\n        return this.filterForm.valid;\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { OnChanges, SimpleChanges, OnInit, OnDestroy, Directive, Input, Output, EventEmitter } from '@angular/core';\nimport { FilterOptions, TaskFilterAction, TaskFilterProperties } from '../../models/filter-cloud.model';\nimport { TaskCloudService } from './../../../services/task-cloud.service';\nimport { AppsProcessCloudService } from './../../../../app/services/apps-process-cloud.service';\nimport { DateCloudFilterType, DateRangeFilter } from '../../../../models/date-cloud-filter.model';\nimport moment, { Moment } from 'moment';\nimport { AbstractControl, FormBuilder, FormGroup } from '@angular/forms';\nimport { debounceTime, filter, finalize, switchMap, takeUntil } from 'rxjs/operators';\nimport { Observable, Subject } from 'rxjs';\nimport { DateAdapter } from '@angular/material/core';\nimport { IdentityGroupModel, IdentityUserModel, TranslationService, UserPreferencesService, UserPreferenceValues } from '@alfresco/adf-core';\nimport { TaskFilterDialogCloudComponent } from '../task-filter-dialog/task-filter-dialog-cloud.component';\nimport { MatDialog } from '@angular/material/dialog';\n\nexport interface DropdownOption {\n    value: string;\n    label: string;\n}\n\n@Directive()\n// tslint:disable-next-line: directive-class-suffix\nexport abstract class BaseEditTaskFilterCloudComponent<T> implements OnInit, OnChanges, OnDestroy {\n\n    public static ACTION_SAVE = 'save';\n    public static ACTION_SAVE_AS = 'saveAs';\n    public static ACTION_DELETE = 'delete';\n    public static APP_RUNNING_STATUS: string = 'RUNNING';\n    public static APPLICATION_NAME: string = 'appName';\n    public static PROCESS_DEFINITION_NAME: string = 'processDefinitionName';\n    public static LAST_MODIFIED: string = 'lastModified';\n    public static SORT: string = 'sort';\n    public static ORDER: string = 'order';\n    public static DEFAULT_ACTIONS = ['save', 'saveAs', 'delete'];\n    public static FORMAT_DATE: string = 'DD/MM/YYYY';\n    public static ACTIONS_DISABLED_BY_DEFAULT = [\n        BaseEditTaskFilterCloudComponent.ACTION_SAVE,\n        BaseEditTaskFilterCloudComponent.ACTION_DELETE\n    ];\n\n    /** (required) Name of the app. */\n    @Input()\n    appName: string = '';\n\n    /** (required) ID of the task filter. */\n    @Input()\n    id: string;\n\n    /** Toggles the title. */\n    @Input()\n    showTitle = true;\n\n    /** Toggles display of task filter name */\n    @Input()\n    showTaskFilterName = true;\n\n    /** List of task filter properties to display. */\n    @Input()\n    filterProperties: string[] = [];\n\n    /** user role. */\n    @Input()\n    role: string = '';\n\n    /** Toggles the filter actions. */\n    @Input()\n    showFilterActions = true;\n\n    /** List of task filter actions. */\n    @Input()\n    actions: string[] = BaseEditTaskFilterCloudComponent.DEFAULT_ACTIONS;\n\n    /** List of sort properties to display. */\n    @Input()\n    sortProperties: string[] = [];\n\n    /** Emitted when a filter action occurs (i.e Save, Save As, Delete). */\n    @Output()\n    action = new EventEmitter<TaskFilterAction>();\n\n    protected applicationNames: DropdownOption[] = [];\n    protected processDefinitionNames: DropdownOption[] = [];\n    protected formHasBeenChanged = false;\n\n    editTaskFilterForm: FormGroup;\n    taskFilterProperties: TaskFilterProperties[] = [];\n    taskFilterActions: TaskFilterAction[] = [];\n    toggleFilterActions: boolean = false;\n    sortDirections: DropdownOption[] = [\n        { value: 'ASC', label: 'ADF_CLOUD_TASK_FILTERS.DIRECTION.ASCENDING' },\n        { value: 'DESC', label: 'ADF_CLOUD_TASK_FILTERS.DIRECTION.DESCENDING' }\n    ];\n    allProcessDefinitionNamesOption: DropdownOption = {\n        value: '',\n        label: 'ADF_CLOUD_TASK_FILTERS.STATUS.ALL'\n    };\n\n    taskFilter: T;\n    changedTaskFilter: T;\n\n    /** Emitted when a task filter property changes. */\n    @Output()\n    filterChange = new EventEmitter<T>();\n\n    protected onDestroy$ = new Subject<boolean>();\n    isLoading: boolean = false;\n\n    constructor(\n        protected formBuilder: FormBuilder,\n        protected dateAdapter: DateAdapter<Moment>,\n        protected userPreferencesService: UserPreferencesService,\n        protected appsProcessCloudService: AppsProcessCloudService,\n        protected taskCloudService: TaskCloudService,\n        protected dialog: MatDialog,\n        protected translateService: TranslationService) {\n    }\n\n    ngOnInit() {\n        this.userPreferencesService\n            .select(UserPreferenceValues.Locale)\n            .pipe(takeUntil(this.onDestroy$))\n            .subscribe(locale => this.dateAdapter.setLocale(locale));\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        const id = changes['id'];\n        if (id && id.currentValue !== id.previousValue) {\n            this.retrieveTaskFilterAndBuildForm();\n        }\n    }\n\n    ngOnDestroy() {\n        this.onDestroy$.next(true);\n        this.onDestroy$.complete();\n    }\n\n    createFilterActions(): TaskFilterAction[] {\n        return [\n            {\n                actionType: BaseEditTaskFilterCloudComponent.ACTION_SAVE,\n                icon: 'adf:save',\n                tooltip: 'ADF_CLOUD_EDIT_TASK_FILTER.TOOL_TIP.SAVE'\n            },\n            {\n                actionType: BaseEditTaskFilterCloudComponent.ACTION_SAVE_AS,\n                icon: 'adf:save-as',\n                tooltip: 'ADF_CLOUD_EDIT_TASK_FILTER.TOOL_TIP.SAVE_AS'\n            },\n            {\n                actionType: BaseEditTaskFilterCloudComponent.ACTION_DELETE,\n                icon: 'delete',\n                tooltip: 'ADF_CLOUD_EDIT_TASK_FILTER.TOOL_TIP.DELETE'\n            }\n        ];\n    }\n\n    hasFormChanged(action: TaskFilterAction): boolean {\n        if (action.actionType === BaseEditTaskFilterCloudComponent.ACTION_SAVE) {\n            return !this.formHasBeenChanged;\n        }\n        if (action.actionType === BaseEditTaskFilterCloudComponent.ACTION_SAVE_AS) {\n            return !this.formHasBeenChanged;\n        }\n        if (action.actionType === BaseEditTaskFilterCloudComponent.ACTION_DELETE) {\n            return false;\n        }\n\n        return false;\n    }\n\n    onExpand(): void {\n        this.toggleFilterActions = true;\n    }\n\n    onClose(): void {\n        this.toggleFilterActions = false;\n    }\n\n    isDisabledAction(action: TaskFilterAction): boolean {\n        return this.isDisabledForDefaultFilters(action) ? true : this.hasFormChanged(action);\n    }\n\n    protected deepCompare(left: any, right: any): boolean {\n        return JSON.stringify(left).toLowerCase() === JSON.stringify(right).toLowerCase();\n    }\n\n    /**\n     * Return filter name\n     * @param filterName\n     */\n    getSanitizeFilterName(filterName: string): string {\n        const nameWithHyphen = this.replaceSpaceWithHyphen(filterName.trim());\n        return nameWithHyphen.toLowerCase();\n    }\n\n    private replaceSpaceWithHyphen(name: string): string {\n        const regExt = new RegExp(' ', 'g');\n        return name.replace(regExt, '-');\n    }\n\n    executeFilterActions(action: TaskFilterAction): void {\n        if (action.actionType === BaseEditTaskFilterCloudComponent.ACTION_SAVE) {\n            this.save(action);\n        } else if (action.actionType === BaseEditTaskFilterCloudComponent.ACTION_SAVE_AS) {\n            this.saveAs(action);\n        } else if (action.actionType === BaseEditTaskFilterCloudComponent.ACTION_DELETE) {\n            this.delete(action);\n        }\n    }\n\n    getRunningApplications() {\n        this.appsProcessCloudService\n            .getDeployedApplicationsByStatus(BaseEditTaskFilterCloudComponent.APP_RUNNING_STATUS, this.role)\n            .subscribe((applications) => {\n                if (applications && applications.length > 0) {\n                    applications.map((application) => {\n                        this.applicationNames.push({ label: application.name, value: application.name });\n                    });\n                }\n            });\n    }\n\n    getProcessDefinitions() {\n        this.taskCloudService.getProcessDefinitions(this.appName)\n            .subscribe((processDefinitions) => {\n                if (processDefinitions && processDefinitions.length > 0) {\n                    this.processDefinitionNames.push(this.allProcessDefinitionNamesOption);\n                    processDefinitions.map((processDefinition) => {\n                        this.processDefinitionNames.push({ label: processDefinition.name, value: processDefinition.name });\n                    });\n                }\n            });\n    }\n\n    checkMandatoryActions(): void {\n        if (this.actions === undefined || this.actions.length === 0) {\n            this.actions = BaseEditTaskFilterCloudComponent.DEFAULT_ACTIONS;\n        }\n    }\n\n    private isValidAction(actions: string[], action: any): boolean {\n        return actions ? actions.indexOf(action.actionType) >= 0 : true;\n    }\n\n    isFormValid(): boolean {\n        return this.editTaskFilterForm.valid;\n    }\n\n    getPropertyController(property: TaskFilterProperties): AbstractControl {\n        return this.editTaskFilterForm.get(property.key);\n    }\n\n    onDateChanged(newDateValue: any, dateProperty: TaskFilterProperties) {\n        if (newDateValue) {\n            const momentDate = moment(newDateValue, BaseEditTaskFilterCloudComponent.FORMAT_DATE, true);\n            const controller = this.getPropertyController(dateProperty);\n\n            if (momentDate.isValid()) {\n                controller.setValue(momentDate.toISOString(true));\n                controller.setErrors(null);\n            } else {\n                controller.setErrors({ invalid: true });\n            }\n        }\n    }\n\n    onDateRangeFilterChanged(dateRange: DateRangeFilter, property: TaskFilterProperties) {\n        this.editTaskFilterForm.get(property.attributes?.from).setValue(\n            dateRange.startDate ? dateRange.startDate : null\n        );\n        this.editTaskFilterForm.get(property.attributes?.to).setValue(\n            dateRange.endDate ? dateRange.endDate : null\n        );\n        this.editTaskFilterForm.get(property.attributes.dateType).setValue(DateCloudFilterType.RANGE);\n    }\n\n    onChangedUser(users: IdentityUserModel[], userProperty: TaskFilterProperties) {\n        let selectedUsers;\n        if (userProperty.selectionMode === 'single') {\n            selectedUsers = users[0];\n        } else {\n            selectedUsers = users;\n        }\n        this.getPropertyController(userProperty).setValue(selectedUsers);\n    }\n\n    onAssignedChange(assignedValue: IdentityUserModel) {\n        this.editTaskFilterForm.get('candidateGroups').setValue([]);\n        this.editTaskFilterForm.get('assignee').setValue(assignedValue?.username);\n    }\n\n    onAssignedGroupsChange(groups: IdentityGroupModel[]) {\n        this.editTaskFilterForm.get('assignee').setValue(null);\n        this.editTaskFilterForm.get('candidateGroups').setValue(groups);\n    }\n\n    hasError(property: TaskFilterProperties): boolean {\n        const controller = this.getPropertyController(property);\n        return controller.errors && controller.errors.invalid;\n    }\n\n    hasLastModifiedProperty(): boolean {\n        return this.filterProperties.indexOf(BaseEditTaskFilterCloudComponent.LAST_MODIFIED) >= 0;\n    }\n\n    get createSortProperties(): FilterOptions[] {\n        this.checkMandatorySortProperties();\n\n        return this.sortProperties.map((property: string) => {\n            return { label: property, value: property };\n        });\n    }\n\n    createAndFilterActions(): TaskFilterAction[] {\n        this.checkMandatoryActions();\n        return this.createFilterActions().filter(action => this.isValidAction(this.actions, action));\n    }\n\n    isValidProperty(filterProperties: string[], key: string): boolean {\n        return filterProperties ? filterProperties.indexOf(key) >= 0 : true;\n    }\n\n    checkForProperty(property: string): boolean {\n        return this.filterProperties ? this.filterProperties.indexOf(property) >= 0 : false;\n    }\n\n    hasSortProperty(): boolean {\n        return this.filterProperties.indexOf(BaseEditTaskFilterCloudComponent.SORT) >= 0;\n    }\n\n    removeOrderProperty(filteredProperties: TaskFilterProperties[]): TaskFilterProperties[] {\n        if (filteredProperties && filteredProperties.length > 0) {\n            return filteredProperties.filter(property => property.key !== BaseEditTaskFilterCloudComponent.ORDER);\n        }\n        return [];\n    }\n\n    createAndFilterProperties() {\n        this.checkMandatoryFilterProperties();\n\n        if (this.checkForProperty(BaseEditTaskFilterCloudComponent.APPLICATION_NAME)) {\n            this.applicationNames = [];\n            this.getRunningApplications();\n        }\n        if (this.checkForProperty(BaseEditTaskFilterCloudComponent.PROCESS_DEFINITION_NAME)) {\n            this.processDefinitionNames = [];\n            this.getProcessDefinitions();\n        }\n\n        const defaultProperties = this.createTaskFilterProperties();\n        let filteredProperties = defaultProperties.filter((filterProperty) => this.isValidProperty(this.filterProperties, filterProperty.key));\n\n        if (!this.hasSortProperty()) {\n            filteredProperties = this.removeOrderProperty(filteredProperties);\n        }\n\n        return filteredProperties;\n    }\n\n    /**\n     * Check for edit task filter form changes\n     */\n    onFilterChange() {\n        this.editTaskFilterForm.valueChanges\n            .pipe(\n                debounceTime(500),\n                filter(() => this.isFormValid()),\n                takeUntil(this.onDestroy$)\n            )\n            .subscribe((formValues) => {\n                this.assignNewFilter(formValues);\n            });\n    }\n\n    getFormControlsConfig(taskFilterProperties: TaskFilterProperties[]): any {\n        const properties = taskFilterProperties.map((property) => {\n            if (!!property.attributes) {\n                return this.getAttributesControlConfig(property);\n            } else {\n                return { [property.key]: property.value };\n            }\n        });\n        return properties.reduce(((result, current) => Object.assign(result, current)), {});\n    }\n\n    private getAttributesControlConfig(property: TaskFilterProperties) {\n        return Object.values(property.attributes).reduce((result, key) => {\n            result[key] = property.value[key];\n            return result;\n        }, {});\n    }\n\n    buildForm(taskFilterProperties: TaskFilterProperties[]) {\n        this.formHasBeenChanged = false;\n        this.editTaskFilterForm = this.formBuilder.group(this.getFormControlsConfig(taskFilterProperties));\n        this.onFilterChange();\n    }\n\n    onDateTypeChange(dateType: DateCloudFilterType, property: TaskFilterProperties) {\n        this.editTaskFilterForm.get(property.attributes.dateType).setValue(dateType);\n    }\n\n    protected retrieveTaskFilterAndBuildForm() {\n        this.isLoading = true;\n\n        this.getTaskFilterById(this.appName, this.id)\n            .pipe(\n                finalize(() => this.isLoading = false),\n                takeUntil(this.onDestroy$)\n            )\n            .subscribe(response => {\n                this.taskFilter = response;\n                this.taskFilterProperties = this.createAndFilterProperties();\n                this.taskFilterActions = this.createAndFilterActions();\n                this.buildForm(this.taskFilterProperties);\n            });\n    }\n\n    delete(deleteAction: TaskFilterAction): void {\n        this.deleteFilter(this.taskFilter)\n            .pipe(\n                filter((filters) => {\n                    deleteAction.filter = this.taskFilter;\n                    this.action.emit(deleteAction);\n                    return filters.length === 0;\n                }),\n                switchMap(() => this.restoreDefaultTaskFilters()),\n                takeUntil(this.onDestroy$))\n            .subscribe(() => { });\n    }\n\n    save(saveAction: TaskFilterAction): void {\n        this.updateFilter(this.changedTaskFilter)\n            .pipe(takeUntil(this.onDestroy$))\n            .subscribe(() => {\n                saveAction.filter = this.changedTaskFilter;\n                this.action.emit(saveAction);\n                this.formHasBeenChanged = this.deepCompare(this.changedTaskFilter, this.taskFilter);\n            });\n    }\n\n    saveAs(saveAsAction: TaskFilterAction): void {\n        const dialogRef = this.dialog.open(TaskFilterDialogCloudComponent, {\n            data: {\n                name: this.translateService.instant((this.taskFilter as any)?.name)\n            },\n            height: 'auto',\n            minWidth: '30%'\n        });\n        dialogRef.afterClosed().subscribe((result) => {\n            if (result && result.action === TaskFilterDialogCloudComponent.ACTION_SAVE) {\n                const filterId = Math.random().toString(36).substr(2, 9);\n                const filterKey = this.getSanitizeFilterName(result.name);\n                const newFilter = {\n                    name: result.name,\n                    icon: result.icon,\n                    id: filterId,\n                    key: 'custom-' + filterKey\n                };\n                const resultFilter: T = Object.assign({}, this.changedTaskFilter, newFilter);\n                this.addFilter(resultFilter).subscribe(() => {\n                    saveAsAction.filter = resultFilter;\n                    this.action.emit(saveAsAction);\n                });\n            }\n        });\n    }\n\n    checkMandatoryFilterProperties() {\n        if (this.filterProperties === undefined || this.filterProperties.length === 0) {\n            this.filterProperties = this.getDefaultFilterProperties();\n        }\n    }\n\n    checkMandatorySortProperties(): void {\n        if (this.sortProperties === undefined || this.sortProperties.length === 0) {\n            this.sortProperties = this.getDefaultSortProperties();\n        }\n    }\n\n    abstract getDefaultFilterProperties(): string[];\n    abstract getDefaultSortProperties(): string[];\n    abstract isDisabledForDefaultFilters(action: TaskFilterAction): boolean;\n    abstract createTaskFilterProperties(): TaskFilterProperties[];\n    protected abstract getTaskFilterById(appName: string, id: string);\n    abstract assignNewFilter(formValues): void;\n\n    protected abstract restoreDefaultTaskFilters(): Observable<T[]>;\n    protected abstract addFilter(filterToAdd: T): Observable<any>;\n    protected abstract deleteFilter(filterToDelete: T): Observable<T[]>;\n    protected abstract updateFilter(filterToUpdate: T): Observable<any>;\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, ViewEncapsulation } from '@angular/core';\nimport { FormBuilder } from '@angular/forms';\nimport { DateAdapter } from '@angular/material/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { takeUntil } from 'rxjs/operators';\nimport { Observable } from 'rxjs';\nimport { Moment } from 'moment';\n\nimport { TaskFilterProperties, TaskFilterAction, ServiceTaskFilterCloudModel } from '../../models/filter-cloud.model';\nimport { TranslationService, UserPreferencesService } from '@alfresco/adf-core';\nimport { AppsProcessCloudService } from '../../../../app/services/apps-process-cloud.service';\nimport { TaskCloudService } from '../../../services/task-cloud.service';\nimport { ServiceTaskFilterCloudService } from '../../services/service-task-filter-cloud.service';\nimport { BaseEditTaskFilterCloudComponent, DropdownOption } from './base-edit-task-filter-cloud.component';\n\n@Component({\n    selector: 'adf-cloud-edit-service-task-filter',\n    templateUrl: './base-edit-task-filter-cloud.component.html',\n    styleUrls: ['./base-edit-task-filter-cloud.component.scss'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class EditServiceTaskFilterCloudComponent extends BaseEditTaskFilterCloudComponent<ServiceTaskFilterCloudModel> {\n    constructor(\n        formBuilder: FormBuilder,\n        dialog: MatDialog,\n        translateService: TranslationService,\n        private serviceTaskFilterCloudService: ServiceTaskFilterCloudService,\n        dateAdapter: DateAdapter<Moment>,\n        userPreferencesService: UserPreferencesService,\n        appsProcessCloudService: AppsProcessCloudService,\n        taskCloudService: TaskCloudService) {\n        super(formBuilder, dateAdapter, userPreferencesService, appsProcessCloudService, taskCloudService, dialog, translateService);\n    }\n\n    assignNewFilter(model: ServiceTaskFilterCloudModel) {\n        this.changedTaskFilter = { ...this.taskFilter, ...model };\n        this.formHasBeenChanged = !this.deepCompare(this.changedTaskFilter, this.taskFilter);\n        this.filterChange.emit(this.changedTaskFilter);\n    }\n\n    protected getTaskFilterById(appName: string, id: string) {\n        return this.serviceTaskFilterCloudService.getTaskFilterById(appName, id);\n    }\n\n    getDefaultFilterProperties(): string[] {\n        return ['appName', 'activityName', 'status', 'sort', 'order'];\n    }\n\n    getDefaultSortProperties(): string[] {\n        return ['id', 'activityName', 'startedDate', 'completedDate'];\n    }\n\n    protected updateFilter(filterToUpdate: ServiceTaskFilterCloudModel) {\n        return this.serviceTaskFilterCloudService.updateFilter(filterToUpdate);\n    }\n\n    protected deleteFilter(filterToDelete: ServiceTaskFilterCloudModel): Observable<ServiceTaskFilterCloudModel[]> {\n        return this.serviceTaskFilterCloudService.deleteFilter(filterToDelete);\n    }\n\n    protected addFilter(filterToAdd: ServiceTaskFilterCloudModel): Observable<any> {\n        return this.serviceTaskFilterCloudService\n            .addFilter(filterToAdd)\n            .pipe(takeUntil(this.onDestroy$));\n    }\n\n    isDisabledForDefaultFilters(action: TaskFilterAction): boolean {\n        return (\n            this.serviceTaskFilterCloudService.isDefaultFilter(this.taskFilter.name) &&\n            EditServiceTaskFilterCloudComponent.ACTIONS_DISABLED_BY_DEFAULT.includes(action.actionType)\n        );\n    }\n\n    restoreDefaultTaskFilters(): Observable<ServiceTaskFilterCloudModel[]> {\n        return this.serviceTaskFilterCloudService.getTaskListFilters(this.appName);\n    }\n\n    private getStatusOptions(): DropdownOption[] {\n        return [\n            { value: '', label: 'ADF_CLOUD_SERVICE_TASK_FILTERS.STATUS.ALL' },\n            { value: 'STARTED', label: 'ADF_CLOUD_SERVICE_TASK_FILTERS.STATUS.STARTED' },\n            { value: 'COMPLETED', label: 'ADF_CLOUD_SERVICE_TASK_FILTERS.STATUS.COMPLETED' },\n            { value: 'CANCELLED', label: 'ADF_CLOUD_SERVICE_TASK_FILTERS.STATUS.CANCELLED' },\n            { value: 'ERROR', label: 'ADF_CLOUD_SERVICE_TASK_FILTERS.STATUS.ERROR' }\n        ];\n    }\n\n    createTaskFilterProperties(): TaskFilterProperties[] {\n        const statusOptions = this.getStatusOptions();\n\n        return [\n            {\n                label: 'ADF_CLOUD_EDIT_SERVICE_TASK_FILTER.LABEL.APP_NAME',\n                type: 'select',\n                key: 'appName',\n                value: this.taskFilter.appName || '',\n                options: this.applicationNames\n            },\n            {\n                label: 'ADF_CLOUD_EDIT_SERVICE_TASK_FILTER.LABEL.SERVICE_TASK_ID',\n                type: 'text',\n                key: 'serviceTaskId',\n                value: this.taskFilter.serviceTaskId || ''\n            },\n            {\n                label: 'ADF_CLOUD_EDIT_SERVICE_TASK_FILTER.LABEL.ELEMENT_ID',\n                type: 'text',\n                key: 'elementId',\n                value: this.taskFilter.elementId || ''\n            },\n            {\n                label: 'ADF_CLOUD_EDIT_SERVICE_TASK_FILTER.LABEL.ACTIVITY_NAME',\n                type: 'text',\n                key: 'activityName',\n                value: this.taskFilter.activityName || ''\n            },\n            {\n                label: 'ADF_CLOUD_EDIT_SERVICE_TASK_FILTER.LABEL.ACTIVITY_TYPE',\n                type: 'text',\n                key: 'activityType',\n                value: this.taskFilter.activityType || ''\n            },\n            {\n                label: 'ADF_CLOUD_EDIT_SERVICE_TASK_FILTER.LABEL.SORT',\n                type: 'select',\n                key: 'sort',\n                value: this.taskFilter.sort || this.createSortProperties[0].value,\n                options: this.createSortProperties\n            },\n            {\n                label: 'ADF_CLOUD_EDIT_SERVICE_TASK_FILTER.LABEL.DIRECTION',\n                type: 'select',\n                key: 'order',\n                value: this.taskFilter.order || this.sortDirections[0].value,\n                options: [...this.sortDirections]\n            },\n            {\n                label: 'ADF_CLOUD_EDIT_SERVICE_TASK_FILTER.LABEL.STATUS',\n                type: 'select',\n                key: 'status',\n                value: this.taskFilter.status || statusOptions[0].value,\n                options: statusOptions\n            },\n            {\n                label: 'ADF_CLOUD_EDIT_SERVICE_TASK_FILTER.LABEL.STARTED_DATE',\n                type: 'date',\n                key: 'startedDate',\n                value: this.taskFilter.completedDate || false\n            },\n            {\n                label: 'ADF_CLOUD_EDIT_SERVICE_TASK_FILTER.LABEL.COMPLETED_DATE',\n                type: 'date',\n                key: 'completedDate',\n                value: this.taskFilter.completedDate || false\n            },\n            {\n                label: 'ADF_CLOUD_EDIT_SERVICE_TASK_FILTER.LABEL.PROCESS_INSTANCE_ID',\n                type: 'text',\n                key: 'processInstanceId',\n                value: this.taskFilter.processInstanceId || ''\n            },\n            {\n                label: 'ADF_CLOUD_EDIT_SERVICE_TASK_FILTER.LABEL.PROCESS_DEF_ID',\n                type: 'text',\n                key: 'processDefinitionId',\n                value: this.taskFilter.processDefinitionId || ''\n            },\n            {\n                label: 'ADF_CLOUD_EDIT_SERVICE_TASK_FILTER.LABEL.SERVICE_NAME',\n                type: 'text',\n                key: 'serviceName',\n                value: this.taskFilter.serviceName || ''\n            }\n        ];\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, ViewEncapsulation } from '@angular/core';\nimport { FormBuilder } from '@angular/forms';\nimport { DateAdapter } from '@angular/material/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { takeUntil, map } from 'rxjs/operators';\nimport { Observable } from 'rxjs';\nimport moment from 'moment-es6';\nimport { Moment } from 'moment';\n\nimport { TaskFilterCloudModel, TaskFilterProperties, TaskFilterAction } from '../../models/filter-cloud.model';\nimport { TaskFilterCloudService } from '../../services/task-filter-cloud.service';\nimport { TranslationService, UserPreferencesService } from '@alfresco/adf-core';\nimport { AppsProcessCloudService } from '../../../../app/services/apps-process-cloud.service';\nimport { DateCloudFilterType } from '../../../../models/date-cloud-filter.model';\nimport { TaskCloudService } from '../../../services/task-cloud.service';\nimport { BaseEditTaskFilterCloudComponent, DropdownOption } from './base-edit-task-filter-cloud.component';\n\n@Component({\n    selector: 'adf-cloud-edit-task-filter',\n    templateUrl: './base-edit-task-filter-cloud.component.html',\n    styleUrls: ['./base-edit-task-filter-cloud.component.scss'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class EditTaskFilterCloudComponent extends BaseEditTaskFilterCloudComponent<TaskFilterCloudModel> {\n    constructor(\n        formBuilder: FormBuilder,\n        dialog: MatDialog,\n        translateService: TranslationService,\n        private taskFilterCloudService: TaskFilterCloudService,\n        dateAdapter: DateAdapter<Moment>,\n        userPreferencesService: UserPreferencesService,\n        appsProcessCloudService: AppsProcessCloudService,\n        taskCloudService: TaskCloudService) {\n        super(formBuilder, dateAdapter, userPreferencesService, appsProcessCloudService, taskCloudService, dialog, translateService);\n    }\n\n    assignNewFilter(model: TaskFilterCloudModel) {\n        this.setLastModifiedToFilter(model);\n        this.changedTaskFilter = new TaskFilterCloudModel(Object.assign({}, this.taskFilter, model));\n        this.formHasBeenChanged = !this.deepCompare(this.changedTaskFilter, this.taskFilter);\n        this.filterChange.emit(this.changedTaskFilter);\n    }\n\n    protected getTaskFilterById(appName: string, id: string) {\n        return this.taskFilterCloudService\n            .getTaskFilterById(appName, id)\n            .pipe(\n                map(response => new TaskFilterCloudModel(response))\n            );\n    }\n\n    createAndFilterProperties() {\n        const result = super.createAndFilterProperties();\n\n        if (this.hasLastModifiedProperty()) {\n            return [\n                ...result,\n                ...this.createLastModifiedProperty()\n            ];\n        }\n\n        return result;\n    }\n\n    getDefaultFilterProperties(): string[] {\n        return ['status', 'assignee', 'sort', 'order'];\n    }\n\n    getDefaultSortProperties(): string[] {\n        return ['id', 'name', 'createdDate', 'priority'];\n    }\n\n    private setLastModifiedToFilter(formValues: TaskFilterCloudModel) {\n        if (formValues.lastModifiedTo && Date.parse(formValues.lastModifiedTo.toString())) {\n            const lastModifiedToFilterValue = moment(formValues.lastModifiedTo);\n            lastModifiedToFilterValue.set({\n                hour: 23,\n                minute: 59,\n                second: 59\n            });\n            formValues.lastModifiedTo = lastModifiedToFilterValue.toISOString(true);\n        }\n    }\n\n    protected updateFilter(filterToUpdate: TaskFilterCloudModel): Observable<any> {\n        return this.taskFilterCloudService.updateFilter(filterToUpdate);\n    }\n\n    protected deleteFilter(filterToDelete: TaskFilterCloudModel): Observable<TaskFilterCloudModel[]> {\n        return this.taskFilterCloudService.deleteFilter(filterToDelete);\n    }\n\n    protected addFilter(filterToAdd: TaskFilterCloudModel): Observable<any> {\n        return this.taskFilterCloudService\n            .addFilter(filterToAdd)\n            .pipe(takeUntil(this.onDestroy$));\n    }\n\n    isDisabledForDefaultFilters(action: TaskFilterAction): boolean {\n        return (\n            this.taskFilterCloudService.isDefaultFilter(this.taskFilter.name) &&\n            EditTaskFilterCloudComponent.ACTIONS_DISABLED_BY_DEFAULT.includes(action.actionType)\n        );\n    }\n\n    restoreDefaultTaskFilters(): Observable<TaskFilterCloudModel[]> {\n        return this.taskFilterCloudService.getTaskListFilters(this.appName);\n    }\n\n    private createLastModifiedProperty(): TaskFilterProperties[] {\n        return [\n            {\n                label: 'ADF_CLOUD_EDIT_TASK_FILTER.LABEL.LAST_MODIFIED_FROM',\n                type: 'date',\n                key: 'lastModifiedFrom',\n                value: ''\n            },\n            {\n                label: 'ADF_CLOUD_EDIT_TASK_FILTER.LABEL.LAST_MODIFIED_TO',\n                type: 'date',\n                key: 'lastModifiedTo',\n                value: ''\n            }\n        ];\n    }\n\n    private getStatusOptions(): DropdownOption[] {\n        return [\n            { value: '', label: 'ADF_CLOUD_TASK_FILTERS.STATUS.ALL' },\n            { value: 'CREATED', label: 'ADF_CLOUD_TASK_FILTERS.STATUS.CREATED' },\n            { value: 'ASSIGNED', label: 'ADF_CLOUD_TASK_FILTERS.STATUS.ASSIGNED' },\n            { value: 'SUSPENDED', label: 'ADF_CLOUD_TASK_FILTERS.STATUS.SUSPENDED' },\n            { value: 'CANCELLED', label: 'ADF_CLOUD_TASK_FILTERS.STATUS.CANCELLED' },\n            { value: 'COMPLETED', label: 'ADF_CLOUD_TASK_FILTERS.STATUS.COMPLETED' }\n        ];\n    }\n\n    createTaskFilterProperties(): TaskFilterProperties[] {\n        const statusOptions = this.getStatusOptions();\n        const sortProperties = this.createSortProperties;\n\n        return [\n            {\n                label: 'ADF_CLOUD_EDIT_TASK_FILTER.LABEL.APP_NAME',\n                type: 'select',\n                key: 'appName',\n                value: this.taskFilter.appName || '',\n                options: this.applicationNames\n            },\n            {\n                label: 'ADF_CLOUD_EDIT_TASK_FILTER.LABEL.TASK_ID',\n                type: 'text',\n                key: 'taskId',\n                value: ''\n            },\n            {\n                label: 'ADF_CLOUD_EDIT_TASK_FILTER.LABEL.STATUS',\n                type: 'select',\n                key: 'status',\n                value: this.taskFilter.status || statusOptions[0].value,\n                options: statusOptions\n            },\n            {\n                label: 'ADF_CLOUD_EDIT_TASK_FILTER.LABEL.ASSIGNMENT',\n                type: 'text',\n                key: 'assignee',\n                value: this.taskFilter.assignee || ''\n            },\n            {\n                label: 'ADF_CLOUD_EDIT_TASK_FILTER.LABEL.PROCESS_DEF_NAME',\n                type: 'select',\n                key: 'processDefinitionName',\n                value: this.taskFilter.processDefinitionName || '',\n                options: this.processDefinitionNames\n            },\n            {\n                label: 'ADF_CLOUD_EDIT_TASK_FILTER.LABEL.PROCESS_INSTANCE_ID',\n                type: 'text',\n                key: 'processInstanceId',\n                value: this.taskFilter.processInstanceId || ''\n            },\n            {\n                label: 'ADF_CLOUD_EDIT_TASK_FILTER.LABEL.PROCESS_DEF_ID',\n                type: 'text',\n                key: 'processDefinitionId',\n                value: this.taskFilter.processDefinitionId || ''\n            },\n            {\n                label: 'ADF_CLOUD_EDIT_TASK_FILTER.LABEL.TASK_NAME',\n                type: 'text',\n                key: 'taskName',\n                value: this.taskFilter.taskName || ''\n            },\n            {\n                label: 'ADF_CLOUD_EDIT_TASK_FILTER.LABEL.PARENT_TASK_ID',\n                type: 'text',\n                key: 'parentTaskId',\n                value: this.taskFilter.parentTaskId || ''\n            },\n            {\n                label: 'ADF_CLOUD_EDIT_TASK_FILTER.LABEL.PRIORITY',\n                type: 'select',\n                key: 'priority',\n                value: this.taskFilter.priority || '',\n                options: this.taskCloudService.priorities\n            },\n            {\n                label: 'ADF_CLOUD_EDIT_TASK_FILTER.LABEL.OWNER',\n                type: 'text',\n                key: 'owner',\n                value: this.taskFilter.owner || ''\n            },\n            {\n                label: 'ADF_CLOUD_EDIT_TASK_FILTER.LABEL.CREATED_DATE',\n                type: 'date',\n                key: 'createdDate',\n                value: ''\n            },\n            {\n                label: 'ADF_CLOUD_EDIT_TASK_FILTER.LABEL.SORT',\n                type: 'select',\n                key: 'sort',\n                value: this.taskFilter.sort || sortProperties[0].value,\n                options: sortProperties\n            },\n            {\n                label: 'ADF_CLOUD_EDIT_TASK_FILTER.LABEL.DIRECTION',\n                type: 'select',\n                key: 'order',\n                value: this.taskFilter.order || this.sortDirections[0].value,\n                options: [...this.sortDirections]\n            },\n            {\n                label: 'ADF_CLOUD_EDIT_TASK_FILTER.LABEL.STAND_ALONE',\n                type: 'checkbox',\n                key: 'standalone',\n                value: this.taskFilter.standalone || false\n            },\n            {\n                label: 'ADF_CLOUD_EDIT_TASK_FILTER.LABEL.DUE_DATE',\n                type: 'date-range',\n                key: 'dueDateRange',\n                attributes: { dateType: 'dueDateType', from: '_dueDateFrom', to: '_dueDateTo'},\n                value: {\n                    dueDateType: this.taskFilter.dueDateType || null,\n                    _dueDateFrom: this.taskFilter.dueDateFrom || null,\n                    _dueDateTo: this.taskFilter.dueDateTo || null\n                },\n                dateFilterOptions: [\n                    DateCloudFilterType.NO_DATE,\n                    DateCloudFilterType.TODAY,\n                    DateCloudFilterType.TOMORROW,\n                    DateCloudFilterType.NEXT_7_DAYS,\n                    DateCloudFilterType.RANGE\n                ]\n            },\n            {\n                label: 'ADF_CLOUD_EDIT_TASK_FILTER.LABEL.COMPLETED_DATE',\n                type: 'date-range',\n                key: 'completedDateRange',\n                attributes: { dateType: 'completedDateType', from: '_completedFrom', to: '_completedTo'},\n                value: {\n                    completedDateType: this.taskFilter.completedDateType || null,\n                    _completedFrom: this.taskFilter.completedFrom || null,\n                    _completedTo: this.taskFilter.completedTo || null\n                }\n            },\n            {\n                label: 'ADF_CLOUD_EDIT_TASK_FILTER.LABEL.CREATED_DATE',\n                type: 'date-range',\n                key: 'createdDateRange',\n                attributes: { dateType: 'createdDateType', from: '_createdFrom', to: '_createdTo'},\n                value: {\n                    createdDateType: this.taskFilter.createdDateType || null,\n                    _createdFrom: this.taskFilter.createdFrom || null,\n                    _createdTo: this.taskFilter.createdTo || null\n                }\n            },\n            {\n                label: 'ADF_CLOUD_EDIT_TASK_FILTER.LABEL.COMPLETED_BY',\n                type: 'people',\n                key: 'completedBy',\n                value: this.taskFilter.completedBy ? [this.taskFilter.completedBy] : null,\n                selectionMode: 'single'\n            },\n            {\n                label: 'ADF_CLOUD_EDIT_TASK_FILTER.LABEL.ASSIGNMENT',\n                type: 'assignment',\n                key: 'assignment',\n                attributes: { assignee: 'assignee', candidateGroups: 'candidateGroups'},\n                value: {\n                    assignee: this.taskFilter.assignee || null,\n                    candidateGroups: this.taskFilter.candidateGroups || []\n                }\n            }\n        ];\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, EventEmitter, OnChanges, Output, SimpleChanges, OnInit, ViewEncapsulation } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { FilterParamsModel, ServiceTaskFilterCloudModel } from '../models/filter-cloud.model';\nimport { TranslationService } from '@alfresco/adf-core';\nimport { takeUntil } from 'rxjs/operators';\nimport { BaseTaskFiltersCloudComponent } from './base-task-filters-cloud.component';\nimport { ServiceTaskFilterCloudService } from '../services/service-task-filter-cloud.service';\n\n@Component({\n    selector: 'adf-cloud-service-task-filters',\n    templateUrl: './base-task-filters-cloud.component.html',\n    styleUrls: ['./base-task-filters-cloud.component.scss'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class ServiceTaskFiltersCloudComponent extends BaseTaskFiltersCloudComponent implements OnInit, OnChanges {\n\n    /** Emitted when a filter is being selected based on the filterParam input. */\n    @Output()\n    filterSelected = new EventEmitter<ServiceTaskFilterCloudModel>();\n\n    /** Emitted when a filter is being clicked from the UI. */\n    @Output()\n    filterClicked = new EventEmitter<ServiceTaskFilterCloudModel>();\n\n    filters$: Observable<ServiceTaskFilterCloudModel[]>;\n    filters: ServiceTaskFilterCloudModel[] = [];\n    currentFilter: ServiceTaskFilterCloudModel;\n\n    constructor(private serviceTaskFilterCloudService: ServiceTaskFilterCloudService,\n                private translationService: TranslationService) {\n            super();\n    }\n\n    ngOnInit() {\n        this.getFilters(this.appName);\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        const appName = changes['appName'];\n        const filter = changes['filterParam'];\n        if (appName && appName.currentValue !== appName.previousValue) {\n            this.getFilters(appName.currentValue);\n        } else if (filter && filter.currentValue !== filter.previousValue) {\n            this.selectFilterAndEmit(filter.currentValue);\n        }\n    }\n\n    /**\n     * Return the filter list filtered by appName\n     */\n    getFilters(appName: string) {\n        this.filters$ = this.serviceTaskFilterCloudService.getTaskListFilters(appName);\n\n        this.filters$.pipe(takeUntil(this.onDestroy$)).subscribe(\n            (res: ServiceTaskFilterCloudModel[]) => {\n                this.resetFilter();\n                this.filters = res || [];\n                this.selectFilterAndEmit(this.filterParam);\n                this.success.emit(res);\n            },\n            (err: any) => {\n                this.error.emit(err);\n            }\n        );\n    }\n\n    public selectFilter(paramFilter: FilterParamsModel) {\n        if (paramFilter) {\n            this.currentFilter = this.filters.find((filter, index) =>\n                paramFilter.index === index ||\n                paramFilter.key === filter.key ||\n                paramFilter.id === filter.id ||\n                (paramFilter.name &&\n                    (paramFilter.name.toLocaleLowerCase() === this.translationService.instant(filter.name).toLocaleLowerCase())\n                ));\n        }\n    }\n\n    public selectFilterAndEmit(newParamFilter: FilterParamsModel) {\n        if (newParamFilter) {\n            this.selectFilter(newParamFilter);\n\n            if (this.currentFilter) {\n                this.filterSelected.emit(this.currentFilter);\n            }\n        } else {\n            this.currentFilter = undefined;\n        }\n    }\n\n    /**\n     * Selects and emits the clicked filter.\n     */\n    public onFilterClick(filter: FilterParamsModel) {\n        if (filter) {\n            this.selectFilter(filter);\n            this.filterClicked.emit(this.currentFilter);\n        } else {\n            this.currentFilter = undefined;\n        }\n    }\n\n    /**\n     * Select as default task filter the first in the list\n     */\n    public selectDefaultTaskFilter() {\n        if (!this.isFilterListEmpty()) {\n            this.currentFilter = this.filters[0];\n        }\n    }\n\n    /**\n     * Check if the filter list is empty\n     */\n    isFilterListEmpty(): boolean {\n        return this.filters === undefined || (this.filters && this.filters.length === 0);\n    }\n\n    /**\n     * Reset the filters properties\n     */\n    private resetFilter() {\n        this.filters = [];\n        this.currentFilter = undefined;\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, Input, Output, EventEmitter, OnInit } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { IdentityGroupModel, IdentityUserModel, IdentityUserService } from '@alfresco/adf-core';\nimport { AssignmentType, TaskFilterProperties } from '../../models/filter-cloud.model';\n\n@Component({\n    selector: 'adf-cloud-task-assignment-filter',\n    templateUrl: './task-assignment-filter.component.html',\n    styleUrls: ['./task-assignment-filter.component.scss']\n})\nexport class TaskAssignmentFilterCloudComponent implements OnInit {\n\n    @Input() appName: string;\n\n    @Input() taskFilterProperty: TaskFilterProperties;\n\n    @Output() assignedChange = new EventEmitter<IdentityUserModel>();\n\n    @Output() assignedGroupChange = new EventEmitter<IdentityGroupModel[]>();\n\n    assignmentType: AssignmentType;\n    candidateGroups: IdentityGroupModel[] = [];\n    groupForm = new FormControl('');\n    assignmentTypeList = {\n        unassigned: AssignmentType.UNASSIGNED,\n        currentUser: AssignmentType.CURRENT_USER,\n        candidateGroups: AssignmentType.CANDIDATE_GROUPS\n    };\n\n    constructor(private identityUserService: IdentityUserService) {}\n\n    ngOnInit() {\n        if (this.isFilterPropertyDefined()) {\n            this.setDefaultAssignedGroups();\n            this.setDefaultAssignmentType();\n        }\n    }\n\n    isCandidateGroupsType(): boolean {\n        return this.assignmentType === AssignmentType.CANDIDATE_GROUPS;\n    }\n\n    onAssignmentTypeChange(type: any) {\n        this.candidateGroups = [];\n        if (type === AssignmentType.CURRENT_USER) {\n            this.assignedChange.emit(this.identityUserService.getCurrentUserInfo());\n        } else if (type === AssignmentType.UNASSIGNED) {\n            this.assignedChange.emit(null);\n        }\n    }\n\n    onChangedGroups(groups: IdentityGroupModel[]) {\n        this.assignedGroupChange.emit(groups);\n    }\n\n    private setDefaultAssignmentType() {\n        const assignmentAttr = this.taskFilterProperty.attributes['assignee'];\n        const assignee = this.taskFilterProperty.value[assignmentAttr];\n\n        if (this.candidateGroups.length > 0) {\n            this.assignmentType = AssignmentType.CANDIDATE_GROUPS;\n        } else if (assignee) {\n            this.assignmentType = AssignmentType.CURRENT_USER;\n        } else {\n            this.assignmentType = AssignmentType.UNASSIGNED;\n        }\n    }\n\n    private setDefaultAssignedGroups() {\n        const assignmentGroupsAttr = this.taskFilterProperty.attributes['candidateGroups'];\n        this.candidateGroups = this.taskFilterProperty.value[assignmentGroupsAttr];\n    }\n\n    private isFilterPropertyDefined(): boolean {\n        return !!this.taskFilterProperty.attributes && !!this.taskFilterProperty.value;\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n    Component,\n    ElementRef,\n    OnInit,\n    Output,\n    EventEmitter,\n    ViewChild,\n    ViewEncapsulation,\n    Input,\n    SimpleChanges,\n    OnChanges,\n    OnDestroy,\n    ChangeDetectionStrategy,\n    SimpleChange\n} from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport { Observable, of, BehaviorSubject, Subject } from 'rxjs';\nimport { distinctUntilChanged, switchMap, mergeMap, filter, tap, map, takeUntil, debounceTime } from 'rxjs/operators';\nimport { IdentityGroupModel, IdentityGroupService, LogService } from '@alfresco/adf-core';\nimport { ComponentSelectionMode } from '../../types';\n\n@Component({\n    selector: 'adf-cloud-group',\n    templateUrl: './group-cloud.component.html',\n    styleUrls: ['./group-cloud.component.scss'],\n    animations: [\n        trigger('transitionMessages', [\n            state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\n            transition('void => enter', [\n                style({ opacity: 0, transform: 'translateY(-100%)' }),\n                animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n            ])\n        ])\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None\n})\nexport class GroupCloudComponent implements OnInit, OnChanges, OnDestroy {\n\n    /** Name of the application. If specified this shows the groups who have access to the app. */\n    @Input()\n    appName: string;\n\n    /** Title of the field */\n    @Input()\n    title: string;\n\n    /** Group selection mode (single/multiple). */\n    @Input()\n    mode: ComponentSelectionMode = 'single';\n\n    /** Array of groups to be pre-selected. This pre-selects all groups in multi selection mode and only the first group of the array in single selection mode. */\n    @Input()\n    preSelectGroups: IdentityGroupModel[] = [];\n\n    /** This flag enables the validation on the preSelectGroups passed as input.\n     * In case the flag is true the components call the identity service to verify the validity of the information passed as input.\n     * Otherwise, no check will be done.\n     */\n    @Input()\n    validate = false;\n\n    /** Show the info in readonly mode\n     */\n    @Input()\n    readOnly = false;\n\n    /** FormControl to list of group */\n    @Input()\n    groupChipsCtrl = new FormControl({ value: '', disabled: false });\n\n    /** FormControl to search the group */\n    @Input()\n    searchGroupsControl = new FormControl({ value: '', disabled: false });\n\n    /** Role names of the groups to be listed. */\n    @Input()\n    roles: string[] = [];\n\n    /** Emitted when a group is selected. */\n    @Output()\n    selectGroup = new EventEmitter<IdentityGroupModel>();\n\n    /** Emitted when a group is removed. */\n    @Output()\n    removeGroup = new EventEmitter<IdentityGroupModel>();\n\n    /** Emitted when a group selection change. */\n    @Output()\n    changedGroups = new EventEmitter<IdentityGroupModel[]>();\n\n    /** Emitted when an warning occurs. */\n    @Output()\n    warning = new EventEmitter<any>();\n\n    @ViewChild('groupInput')\n    private groupInput: ElementRef<HTMLInputElement>;\n\n    private searchGroups: IdentityGroupModel[] = [];\n    private onDestroy$ = new Subject<boolean>();\n\n    selectedGroups: IdentityGroupModel[] = [];\n    invalidGroups: IdentityGroupModel[] = [];\n\n    searchGroups$ = new BehaviorSubject<IdentityGroupModel[]>(this.searchGroups);\n    _subscriptAnimationState = 'enter';\n    clientId: string;\n    isFocused: boolean;\n\n    validateGroupsMessage: string;\n    searchedValue = '';\n\n    validationLoading = false;\n    searchLoading = false;\n\n    constructor(\n        private identityGroupService: IdentityGroupService,\n        private logService: LogService) {}\n\n    ngOnInit(): void {\n        this.loadClientId();\n        this.initSearch();\n    }\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if (this.hasPreselectedGroupsChanged(changes) || this.hasModeChanged(changes) || this.isValidationChanged(changes)) {\n            if (this.hasPreSelectGroups()) {\n                this.loadPreSelectGroups();\n            } else if (this.hasPreselectedGroupsCleared(changes)) {\n                this.selectedGroups = [];\n                this.invalidGroups = [];\n            }\n\n            if (!this.isValidationEnabled()) {\n                this.invalidGroups = [];\n            }\n        }\n\n        if (changes.appName && this.isAppNameChanged(changes.appName)) {\n            this.loadClientId();\n        }\n    }\n\n    private isAppNameChanged(change: SimpleChange): boolean {\n        return change\n            && change.previousValue !== change.currentValue\n            && this.appName\n            && this.appName.length > 0;\n    }\n\n    private async loadClientId(): Promise<void> {\n        this.clientId = await this.identityGroupService.getClientIdByApplicationName(this.appName).toPromise();\n\n        if (this.clientId) {\n            this.searchGroupsControl.enable();\n        }\n    }\n\n    initSearch(): void {\n        this.searchGroupsControl.valueChanges.pipe(\n            filter((value) => {\n                this.searchLoading = true;\n                return typeof value === 'string';\n            }),\n            tap((value: string) => {\n                if (value) {\n                    this.setTypingError();\n                }\n            }),\n            debounceTime(500),\n            distinctUntilChanged(),\n            tap((value) => {\n                if (value.trim()) {\n                    this.searchedValue = value;\n                } else {\n                    this.searchGroupsControl.markAsPristine();\n                    this.searchGroupsControl.markAsUntouched();\n                }\n            }),\n            tap(() => this.resetSearchGroups()),\n            switchMap((name: string) =>\n                this.identityGroupService.findGroupsByName({ name: name.trim() })\n            ),\n            mergeMap((groups) => {\n                this.resetSearchGroups();\n                this.searchLoading = false;\n                return groups;\n            }),\n            filter(group => !this.isGroupAlreadySelected(group)),\n            mergeMap(group => {\n                if (this.appName) {\n                    return this.checkGroupHasAccess(group.id).pipe(\n                        mergeMap(\n                            hasRole => hasRole ? of(group) : of()\n                        )\n                    );\n                } else if (this.hasRoles()) {\n                    return this.filterGroupsByRoles(group);\n                } else {\n                    return of(group);\n                }\n            }),\n            takeUntil(this.onDestroy$)\n        ).subscribe(searchedGroup => {\n            this.searchGroups.push(searchedGroup);\n            this.searchGroups$.next(this.searchGroups);\n        });\n    }\n\n    checkGroupHasAccess(groupId: string): Observable<boolean> {\n        if (this.hasRoles()) {\n            return this.identityGroupService.checkGroupHasAnyClientAppRole(groupId, this.clientId, this.roles);\n        } else {\n            return this.identityGroupService.checkGroupHasClientApp(groupId, this.clientId);\n        }\n    }\n\n    private isGroupAlreadySelected(group: IdentityGroupModel): boolean {\n        if (this.selectedGroups && this.selectedGroups.length > 0) {\n            const result = this.selectedGroups.find((selectedGroup: IdentityGroupModel) => {\n                return selectedGroup.name === group.name;\n            });\n\n            return !!result;\n        }\n        return false;\n    }\n\n    async searchGroup(name: string): Promise<IdentityGroupModel> {\n        return (await this.identityGroupService.findGroupsByName({ name }).toPromise())[0];\n    }\n\n    private getPreselectedGroups(): IdentityGroupModel[] {\n        if (this.isSingleMode()) {\n           return [this.preSelectGroups[0]];\n        } else {\n            return this.removeDuplicatedGroups(this.preSelectGroups);\n        }\n    }\n\n    async validatePreselectGroups(): Promise<any> {\n        this.invalidGroups = [];\n\n        for (const group of this.getPreselectedGroups()) {\n            try {\n                const validationResult = await this.searchGroup(group.name);\n                if (this.isPreselectedGroupInvalid(group, validationResult)) {\n                    this.invalidGroups.push(group);\n                }\n            } catch (error) {\n                this.invalidGroups.push(group);\n                this.logService.error(error);\n            }\n        }\n\n        this.checkPreselectValidationErrors();\n    }\n\n    checkPreselectValidationErrors(): void {\n        this.invalidGroups = this.removeDuplicatedGroups(this.invalidGroups);\n\n        if (this.invalidGroups.length > 0) {\n            this.generateInvalidGroupsMessage();\n        }\n\n        this.warning.emit({\n            message: 'INVALID_PRESELECTED_GROUPS',\n            groups: this.invalidGroups\n        });\n    }\n\n    generateInvalidGroupsMessage(): void {\n        this.validateGroupsMessage = '';\n\n        this.invalidGroups.forEach((invalidGroup: IdentityGroupModel, index) => {\n            if (index === this.invalidGroups.length - 1) {\n                this.validateGroupsMessage += `${invalidGroup.name} `;\n            } else {\n                this.validateGroupsMessage += `${invalidGroup.name}, `;\n            }\n        });\n    }\n\n    private async loadPreSelectGroups(): Promise<void> {\n        this.selectedGroups = [];\n\n        if (this.isSingleMode()) {\n            this.selectedGroups = [this.preSelectGroups[0]];\n        } else {\n            this.selectedGroups = this.removeDuplicatedGroups(this.preSelectGroups);\n        }\n        this.groupChipsCtrl.setValue(this.selectedGroups[0].name);\n        if (this.isValidationEnabled()) {\n            this.validationLoading = true;\n            await this.validatePreselectGroups();\n            this.validationLoading = false;\n        }\n    }\n\n    filterGroupsByRoles(group: IdentityGroupModel): Observable<IdentityGroupModel> {\n        return this.identityGroupService.checkGroupHasRole(group.id, this.roles).pipe(\n            map((hasRole: boolean) => ({ hasRole: hasRole, group: group })),\n            filter((filteredGroup: { hasRole: boolean, group: IdentityGroupModel }) => filteredGroup.hasRole),\n            map((filteredGroup: { hasRole: boolean, group: IdentityGroupModel }) => filteredGroup.group));\n    }\n\n    onSelect(group: IdentityGroupModel): void {\n        if (group) {\n            this.selectGroup.emit(group);\n\n            if (this.isMultipleMode()) {\n                if (!this.isGroupAlreadySelected(group)) {\n                    this.selectedGroups.push(group);\n                }\n            } else {\n                this.invalidGroups = [];\n                this.selectedGroups = [group];\n            }\n\n            this.groupInput.nativeElement.value = '';\n            this.searchGroupsControl.setValue('');\n            this.groupChipsCtrlValue(this.selectedGroups[0].name);\n\n            this.changedGroups.emit(this.selectedGroups);\n            this.resetSearchGroups();\n        }\n    }\n\n    onRemove(groupToRemove: IdentityGroupModel): void {\n        this.removeGroup.emit(groupToRemove);\n        this.removeGroupFromSelected(groupToRemove);\n        this.changedGroups.emit(this.selectedGroups);\n        if (this.selectedGroups.length === 0) {\n            this.groupChipsCtrlValue('');\n\n        } else {\n            this.groupChipsCtrlValue(this.selectedGroups[0].name);\n        }\n        this.searchGroupsControl.markAsDirty();\n        this.searchGroupsControl.markAsTouched();\n\n        if (this.isValidationEnabled()) {\n            this.removeGroupFromValidation(groupToRemove);\n            this.checkPreselectValidationErrors();\n        }\n    }\n\n    private groupChipsCtrlValue(value: string) {\n        this.groupChipsCtrl.setValue(value);\n        this.groupChipsCtrl.markAsDirty();\n        this.groupChipsCtrl.markAsTouched();\n    }\n\n    private removeGroupFromSelected({ id, name }: IdentityGroupModel): void {\n        const indexToRemove = this.selectedGroups.findIndex(group => {\n            return group.id === id && group.name === name;\n        });\n\n        if (indexToRemove !== -1) {\n            this.selectedGroups.splice(indexToRemove, 1);\n        }\n    }\n\n    private removeGroupFromValidation({ id, name }: IdentityGroupModel): void {\n        const indexToRemove = this.invalidGroups.findIndex(group => {\n            return group.id === id && group.name === name;\n        });\n\n        if (indexToRemove !== -1) {\n            this.invalidGroups.splice(indexToRemove, 1);\n        }\n    }\n\n    private resetSearchGroups(): void {\n        this.searchGroups = [];\n        this.searchGroups$.next(this.searchGroups);\n    }\n\n    isPreselectedGroupInvalid(preselectedGroup: IdentityGroupModel, validatedGroup: IdentityGroupModel): boolean {\n        if (validatedGroup && validatedGroup.name !== undefined) {\n            return preselectedGroup.name !== validatedGroup.name;\n        } else {\n            return true;\n        }\n    }\n\n    isSingleMode(): boolean {\n        return this.mode === 'single';\n    }\n\n    private isSingleSelectionReadonly(): boolean {\n        return this.isSingleMode() && this.selectedGroups.length === 1 && this.selectedGroups[0].readonly === true;\n    }\n\n    hasPreselectError(): boolean {\n        return this.invalidGroups && this.invalidGroups.length > 0;\n    }\n\n    isReadonly(): boolean {\n        return this.readOnly || this.isSingleSelectionReadonly();\n    }\n\n    isMultipleMode(): boolean {\n        return this.mode === 'multiple';\n    }\n\n    getDisplayName(group: IdentityGroupModel): string {\n        return group ? group.name : '';\n    }\n\n    removeDuplicatedGroups(groups: IdentityGroupModel[]): IdentityGroupModel[] {\n        return groups.filter((group, index, self) =>\n            index === self.findIndex((auxGroup) => {\n                return group.id === auxGroup.id && group.name === auxGroup.name;\n            }));\n    }\n\n    private hasPreSelectGroups(): boolean {\n        return this.preSelectGroups && this.preSelectGroups.length > 0;\n    }\n\n    private hasModeChanged(changes: SimpleChanges): boolean {\n        return changes\n            && changes.mode\n            && changes.mode.currentValue !== changes.mode.previousValue;\n    }\n\n    private isValidationChanged(changes: SimpleChanges): boolean {\n        return changes\n            && changes.validate\n            && changes.validate.currentValue !== changes.validate.previousValue;\n    }\n\n    private hasPreselectedGroupsChanged(changes: SimpleChanges): boolean {\n        return changes\n            && changes.preSelectGroups\n            && changes.preSelectGroups.currentValue !== changes.preSelectGroups.previousValue;\n    }\n\n    private hasPreselectedGroupsCleared(changes: SimpleChanges): boolean {\n        return changes\n            && changes.preSelectGroups\n            && changes.preSelectGroups.currentValue.length === 0;\n    }\n\n    private hasRoles(): boolean {\n        return this.roles && this.roles.length > 0;\n    }\n\n    private setTypingError(): void {\n        this.searchGroupsControl.setErrors({\n            searchTypingError: true,\n            ...this.searchGroupsControl.errors\n        });\n    }\n\n    hasError(): boolean {\n        return !!this.searchGroupsControl.errors;\n    }\n\n    isValidationLoading(): boolean {\n        return this.isValidationEnabled() && this.validationLoading;\n    }\n\n    setFocus(isFocused: boolean) {\n        this.isFocused = isFocused;\n    }\n\n    isValidationEnabled(): boolean {\n        return this.validate === true;\n    }\n\n    getValidationPattern(): string {\n        return this.searchGroupsControl.errors.pattern.requiredPattern;\n    }\n\n    getValidationMaxLength(): string {\n        return this.searchGroupsControl.errors.maxlength.requiredLength;\n    }\n\n    getValidationMinLength(): string {\n        return this.searchGroupsControl.errors.minlength.requiredLength;\n    }\n\n    ngOnDestroy(): void {\n        this.onDestroy$.next(true);\n        this.onDestroy$.complete();\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Pipe, PipeTransform } from '@angular/core';\nimport { IdentityGroupModel } from '@alfresco/adf-core';\n\n@Pipe({\n    name: 'groupNameInitial'\n})\nexport class InitialGroupNamePipe implements PipeTransform {\n\n    transform(group: IdentityGroupModel): string {\n        let result = '';\n        if (group) {\n            result = this.getInitialGroupName(group.name).toUpperCase();\n        }\n        return result;\n    }\n\n    getInitialGroupName(groupName: string) {\n        groupName = (groupName ? groupName[0] : '');\n        return groupName;\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\nimport { FlexLayoutModule } from '@angular/flex-layout';\n\nimport { CoreModule } from '@alfresco/adf-core';\nimport { MaterialModule } from '../material.module';\nimport { GroupCloudComponent } from './components/group-cloud.component';\nimport { InitialGroupNamePipe } from './pipe/group-initial.pipe';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FlexLayoutModule,\n        MaterialModule,\n        FormsModule,\n        ReactiveFormsModule,\n        CoreModule\n    ],\n    declarations: [GroupCloudComponent, InitialGroupNamePipe],\n    exports: [GroupCloudComponent, InitialGroupNamePipe]\n})\nexport class GroupCloudModule { }\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { TaskFiltersCloudComponent } from './components/task-filters-cloud.component';\nimport { MaterialModule } from '../../material.module';\nimport { CoreModule, MomentDateAdapter, MOMENT_DATE_FORMATS } from '@alfresco/adf-core';\nimport { HttpClientModule } from '@angular/common/http';\nimport { AppListCloudModule } from './../../app/app-list-cloud.module';\nimport { DateAdapter, MAT_DATE_FORMATS } from '@angular/material/core';\nimport { ProcessCommonModule } from '../../common/process-common.module';\nimport { PeopleCloudModule } from '../../people/people-cloud.module';\nimport { EditServiceTaskFilterCloudComponent } from './components/edit-task-filters/edit-service-task-filter-cloud.component';\nimport { EditTaskFilterCloudComponent } from './components/edit-task-filters/edit-task-filter-cloud.component';\nimport { TaskFilterDialogCloudComponent } from './components/task-filter-dialog/task-filter-dialog-cloud.component';\nimport { ServiceTaskFiltersCloudComponent } from './components/service-task-filters-cloud.component';\nimport { TaskAssignmentFilterCloudComponent } from './components/task-assignment-filter/task-assignment-filter.component';\nimport { GroupCloudModule } from '../../group/group-cloud.module';\n\n@NgModule({\n    imports: [\n        FormsModule,\n        ReactiveFormsModule,\n        HttpClientModule,\n        CommonModule,\n        FlexLayoutModule,\n        MaterialModule,\n        AppListCloudModule,\n        CoreModule,\n        GroupCloudModule,\n        ProcessCommonModule,\n        PeopleCloudModule\n    ],\n    declarations: [\n        TaskFiltersCloudComponent,\n        ServiceTaskFiltersCloudComponent,\n        EditTaskFilterCloudComponent,\n        EditServiceTaskFilterCloudComponent,\n        TaskFilterDialogCloudComponent,\n        TaskAssignmentFilterCloudComponent\n    ],\n    exports: [\n        TaskFiltersCloudComponent,\n        ServiceTaskFiltersCloudComponent,\n        EditTaskFilterCloudComponent,\n        EditServiceTaskFilterCloudComponent\n    ],\n    providers: [\n        { provide: DateAdapter, useClass: MomentDateAdapter },\n        { provide: MAT_DATE_FORMATS, useValue: MOMENT_DATE_FORMATS }\n    ]\n})\nexport class TaskFiltersCloudModule { }\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Component, EventEmitter, Input, OnInit, Output, ViewEncapsulation, OnDestroy, ViewChild } from '@angular/core';\nimport { DateAdapter, MAT_DATE_FORMATS } from '@angular/material/core';\nimport moment from 'moment-es6';\nimport { Moment } from 'moment';\nimport { Observable, Subject } from 'rxjs';\nimport { FormBuilder, Validators, FormGroup, FormControl } from '@angular/forms';\nimport {\n    MOMENT_DATE_FORMATS, MomentDateAdapter,\n    LogService,\n    UserPreferencesService,\n    IdentityUserService,\n    IdentityUserModel,\n    UserPreferenceValues\n} from '@alfresco/adf-core';\nimport { PeopleCloudComponent } from '../../../people/components/people-cloud.component';\nimport { GroupCloudComponent } from '../../../group/components/group-cloud.component';\nimport { TaskCloudService } from '../../services/task-cloud.service';\nimport { StartTaskCloudRequestModel } from '../models/start-task-cloud-request.model';\nimport { takeUntil } from 'rxjs/operators';\nimport { TaskPriorityOption } from '../../models/task.model';\n\n@Component({\n    selector: 'adf-cloud-start-task',\n    templateUrl: './start-task-cloud.component.html',\n    styleUrls: ['./start-task-cloud.component.scss'],\n    providers: [\n        { provide: DateAdapter, useClass: MomentDateAdapter },\n        { provide: MAT_DATE_FORMATS, useValue: MOMENT_DATE_FORMATS }],\n    encapsulation: ViewEncapsulation.None\n})\n\nexport class StartTaskCloudComponent implements OnInit, OnDestroy {\n\n    static MAX_NAME_LENGTH = 255;\n\n    public DATE_FORMAT: string = 'DD/MM/YYYY';\n\n    /** (required) Name of the app. */\n    @Input()\n    appName: string = '';\n\n    /** Maximum length of the task name. */\n    @Input()\n    maxNameLength: number = StartTaskCloudComponent.MAX_NAME_LENGTH;\n\n    /** Name of the task. */\n    @Input()\n    name: string = '';\n\n    /** Emitted when the task is successfully created. */\n    @Output()\n    success: EventEmitter<any> = new EventEmitter<any>();\n\n    /** Emitted when the cancel button is clicked by the user. */\n    @Output()\n    cancel: EventEmitter<void> = new EventEmitter<void>();\n\n    /** Emitted when an error occurs. */\n    @Output()\n    error: EventEmitter<any> = new EventEmitter<any>();\n\n    @ViewChild('peopleInput')\n    assignee: PeopleCloudComponent;\n\n    @ViewChild('groupInput')\n    candidateGroups: GroupCloudComponent;\n\n    users$: Observable<any[]>;\n\n    taskId: string;\n\n    dueDate: Date;\n\n    submitted = false;\n\n    assigneeName: string;\n\n    candidateGroupNames: string[] = [];\n\n    dateError: boolean;\n\n    taskForm: FormGroup;\n\n    currentUser: IdentityUserModel;\n\n    formKey: string;\n\n    priorities: TaskPriorityOption[];\n\n    private assigneeForm = new FormControl('');\n    private groupForm = new FormControl('');\n    private onDestroy$ = new Subject<boolean>();\n\n    constructor(private taskService: TaskCloudService,\n                private dateAdapter: DateAdapter<Moment>,\n                private userPreferencesService: UserPreferencesService,\n                private formBuilder: FormBuilder,\n                private identityUserService: IdentityUserService,\n                private logService: LogService) {\n    }\n\n    ngOnInit() {\n        this.userPreferencesService\n            .select(UserPreferenceValues.Locale)\n            .pipe(takeUntil(this.onDestroy$))\n            .subscribe(locale => this.dateAdapter.setLocale(locale));\n        this.loadCurrentUser();\n        this.buildForm();\n        this.loadDefaultPriorities();\n    }\n\n    ngOnDestroy() {\n        this.onDestroy$.next(true);\n        this.onDestroy$.complete();\n    }\n\n    buildForm() {\n        this.taskForm = this.formBuilder.group({\n            name: new FormControl(this.name, [Validators.required, Validators.maxLength(this.getMaxNameLength()), this.whitespaceValidator]),\n            priority: new FormControl(''),\n            description: new FormControl('', [this.whitespaceValidator]),\n            formKey: new FormControl()\n        });\n    }\n\n    private getMaxNameLength(): number {\n        return this.maxNameLength > StartTaskCloudComponent.MAX_NAME_LENGTH ?\n            StartTaskCloudComponent.MAX_NAME_LENGTH : this.maxNameLength;\n    }\n\n    private loadCurrentUser() {\n        this.currentUser = this.identityUserService.getCurrentUserInfo();\n        this.assigneeName = this.currentUser.username;\n    }\n\n    private loadDefaultPriorities() {\n        this.priorities = this.taskService.priorities;\n    }\n\n    public saveTask() {\n        this.submitted = true;\n        const newTask = Object.assign(this.taskForm.value);\n        newTask.dueDate = this.dueDate;\n        newTask.assignee = this.assigneeName;\n        newTask.formKey = this.formKey;\n        newTask.candidateGroups = this.candidateGroupNames;\n\n        this.createNewTask(new StartTaskCloudRequestModel(newTask));\n    }\n\n    private createNewTask(newTask: StartTaskCloudRequestModel) {\n        this.taskService.createNewTask(newTask, this.appName)\n            .subscribe(\n                (res: any) => {\n                    this.submitted = false;\n                    this.success.emit(res);\n                },\n                (err) => {\n                    this.submitted = false;\n                    this.error.emit(err);\n                    this.logService.error('An error occurred while creating new task');\n                });\n    }\n\n    public onCancel() {\n        this.cancel.emit();\n    }\n\n    onDateChanged(newDateValue) {\n        this.dateError = false;\n\n        if (newDateValue) {\n            const momentDate = moment(newDateValue, this.DATE_FORMAT, true);\n            if (!momentDate.isValid()) {\n                this.dateError = true;\n            }\n        }\n    }\n\n    onAssigneeSelect(assignee: IdentityUserModel) {\n        this.assigneeName = assignee ? assignee.username : '';\n    }\n\n    onAssigneeRemove() {\n        this.assigneeName = '';\n    }\n\n    onCandidateGroupSelect(candidateGroup: any) {\n        if (candidateGroup.name) {\n            this.candidateGroupNames.push(candidateGroup.name);\n        }\n    }\n\n    onCandidateGroupRemove(candidateGroup: any) {\n        if (candidateGroup.name) {\n            this.candidateGroupNames = this.candidateGroupNames.filter((name: string) => {\n                return name !== candidateGroup.name;\n            });\n        }\n    }\n\n    canStartTask(): boolean {\n        return !(this.dateError ||\n                !this.taskForm.valid ||\n                this.submitted ||\n                this.assignee.hasError() ||\n                this.candidateGroups.hasError());\n    }\n\n    public whitespaceValidator(control: FormControl) {\n        const isWhitespace = (control.value || '').trim().length === 0;\n        const isValid = control.value.length === 0 || !isWhitespace;\n        return isValid ? null : { 'whitespace': true };\n    }\n\n    get nameController(): FormControl {\n        return this.taskForm.get('name') as FormControl;\n    }\n\n    get priorityController(): FormControl {\n        return this.taskForm.get('priority') as FormControl;\n    }\n\n    get assigneeFormControl(): FormControl {\n        return this.assigneeForm;\n    }\n\n    get candidateUserFormControl(): FormControl {\n        return this.groupForm;\n    }\n\n    onFormSelect(formKey: string) {\n        this.formKey = formKey || '';\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport class TaskVariableCloud {\n    name: string;\n    value: any;\n    type?: string;\n    id?: string;\n    constructor(obj) {\n        this.id = obj.name || null;\n        this.name = obj.name || null;\n        this.value = this.hasValue(obj) ? obj.value : null;\n        this.type = obj.type || null;\n    }\n\n    hasValue(obj: TaskVariableCloud): boolean {\n        return typeof obj.value !== undefined && obj.value !== null;\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Injectable } from '@angular/core';\nimport {\n    AlfrescoApiService,\n    FormValues,\n    AppConfigService,\n    FormOutcomeModel,\n    FormModel,\n    FormFieldOption\n} from '@alfresco/adf-core';\nimport { Observable, from } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\nimport { TaskDetailsCloudModel } from '../../task/start-task/models/task-details-cloud.model';\nimport { CompleteFormRepresentation, UploadApi } from '@alfresco/js-api';\nimport { TaskVariableCloud } from '../models/task-variable-cloud.model';\nimport { BaseCloudService } from '../../services/base-cloud.service';\nimport { FormContent } from '../../services/form-fields.interfaces';\nimport { FormCloudServiceInterface } from './form-cloud.service.interface';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class FormCloudService extends BaseCloudService implements FormCloudServiceInterface {\n\n    private _uploadApi;\n    get uploadApi(): UploadApi {\n        this._uploadApi = this._uploadApi ?? new UploadApi(this.apiService.getInstance());\n        return this._uploadApi;\n    }\n\n    constructor(\n        apiService: AlfrescoApiService,\n        appConfigService: AppConfigService\n    ) {\n        super(apiService, appConfigService);\n    }\n\n    /**\n     * Gets the form definition of a task.\n     * @param appName Name of the app\n     * @param taskId ID of the target task\n     * @param version Version of the form\n     * @returns Form definition\n     */\n    getTaskForm(appName: string, taskId: string, version?: number): Observable<any> {\n        return this.getTask(appName, taskId).pipe(\n            switchMap(task => {\n                return this.getForm(appName, task.formKey, version).pipe(\n                    map((form: FormContent) => {\n                        const flattenForm = {\n                            ...form.formRepresentation,\n                            ...form.formRepresentation.formDefinition,\n                            taskId: task.id,\n                            taskName: task.name,\n                            processDefinitionId: task.processDefinitionId,\n                            processInstanceId: task.processInstanceId\n                        };\n                        delete flattenForm.formDefinition;\n                        return flattenForm;\n                    })\n                );\n            })\n        );\n    }\n\n    /**\n     * Saves a task form.\n     * @param appName Name of the app\n     * @param taskId ID of the target task\n     * @param processInstanceId ID of processInstance\n     * @param formId ID of the form to save\n     * @param values Form values object\n     * @returns Updated task details\n     */\n    saveTaskForm(appName: string, taskId: string, processInstanceId: string, formId: string, values: FormValues): Observable<TaskDetailsCloudModel> {\n        const apiUrl = `${this.getBasePath(appName)}/form/v1/forms/${formId}/save`;\n        const saveFormRepresentation: any = {\n            values,\n            taskId,\n            processInstanceId\n        };\n\n        return this.post(apiUrl, saveFormRepresentation).pipe(\n            map((res: any) => res.entry)\n        );\n    }\n\n    createTemporaryRawRelatedContent(file: any, nodeId: string, contentHost: string): Observable<any> {\n\n        const changedConfig = this.apiService.lastConfig;\n        changedConfig.provider = 'ALL';\n        changedConfig.hostEcm = contentHost.replace('/alfresco', '');\n        this.apiService.getInstance().setConfig(changedConfig);\n        return from(this.uploadApi.uploadFile(\n            file,\n            '',\n            nodeId,\n            '',\n            { overwrite: true }\n        )).pipe(\n            map((res: any) => res.entry)\n        );\n    }\n\n    /**\n     * Completes a task form.\n     * @param appName Name of the app\n     * @param taskId ID of the target task\n     * @param processInstanceId ID of processInstance\n     * @param formId ID of the form to complete\n     * @param formValues Form values object\n     * @param outcome Form outcome\n     * @param version of the form\n     * @returns Updated task details\n     */\n    completeTaskForm(appName: string, taskId: string, processInstanceId: string, formId: string, formValues: FormValues, outcome: string, version: number): Observable<TaskDetailsCloudModel> {\n        const apiUrl = `${this.getBasePath(appName)}/form/v1/forms/${formId}/submit/versions/${version}`;\n        const completeFormRepresentation = <CompleteFormRepresentation> {\n            values: formValues,\n            taskId: taskId,\n            processInstanceId: processInstanceId\n        };\n        if (outcome) {\n            completeFormRepresentation.outcome = outcome;\n        }\n\n        return this.post(apiUrl, completeFormRepresentation).pipe(\n            map((res: any) => res.entry)\n        );\n    }\n\n    /**\n     * Gets details of a task\n     * @param appName Name of the app\n     * @param taskId ID of the target task\n     * @returns Details of the task\n     */\n    getTask(appName: string, taskId: string): Observable<TaskDetailsCloudModel> {\n        const apiUrl = `${this.getBasePath(appName)}/query/v1/tasks/${taskId}`;\n\n        return this.get(apiUrl).pipe(\n            map((res: any) => res.entry)\n        );\n    }\n\n    /**\n     * Gets the variables of a task.\n     * @param appName Name of the app\n     * @param taskId ID of the target task\n     * @returns Task variables\n     */\n    getTaskVariables(appName: string, taskId: string): Observable<TaskVariableCloud[]> {\n        const apiUrl = `${this.getBasePath(appName)}/query/v1/tasks/${taskId}/variables`;\n\n        return this.get(apiUrl).pipe(\n            map((res: any) => {\n                return res.list.entries.map((variable) => new TaskVariableCloud(variable.entry));\n            })\n        );\n    }\n\n    /**\n     * Gets a form definition.\n     * @param appName Name of the app\n     * @param formKey key of the target task\n     * @param version Version of the form\n     * @returns Form definition\n     */\n    getForm(appName: string, formKey: string, version?: number): Observable<FormContent> {\n        let url = `${this.getBasePath(appName)}/form/v1/forms/${formKey}`;\n\n        if (version) {\n            url += `/versions/${version}`;\n        }\n\n        return this.get(url);\n    }\n\n    getRestWidgetData(formName: string, widgetId: string, body: any = {}): Observable<FormFieldOption[]> {\n        const appName = this.appConfigService.get('alfresco-deployed-apps')[0]?.name;\n        const apiUrl = `${this.getBasePath(appName)}/form/v1/forms/${formName}/values/${widgetId}`;\n        return this.post(apiUrl, body);\n    }\n\n    /**\n     * Parses JSON data to create a corresponding form.\n     * @param json JSON data to create the form\n     * @param data Values for the form's fields\n     * @param readOnly Toggles whether or not the form should be read-only\n     * @returns Form created from the JSON specification\n     */\n    parseForm(json: any, data?: TaskVariableCloud[], readOnly: boolean = false): FormModel {\n        if (json) {\n            const flattenForm = {\n                ...json.formRepresentation,\n                ...json.formRepresentation.formDefinition\n            };\n            delete flattenForm.formDefinition;\n\n            const formValues: FormValues = {};\n            (data || []).forEach(variable => {\n                formValues[variable.name] = variable.value;\n            });\n\n            const form = new FormModel(flattenForm, formValues, readOnly);\n            if (!json.fields) {\n                form.outcomes = [\n                    new FormOutcomeModel(<any> form, {\n                        id: '$save',\n                        name: FormOutcomeModel.SAVE_ACTION,\n                        isSystem: true\n                    })\n                ];\n            }\n            return form;\n        }\n        return null;\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n    Component, EventEmitter, Input, OnChanges,\n    Output, SimpleChanges, OnDestroy, HostListener\n} from '@angular/core';\nimport { Observable, of, forkJoin, Subject, Subscription } from 'rxjs';\nimport { switchMap, takeUntil, map } from 'rxjs/operators';\nimport {\n    FormBaseComponent,\n    FormFieldModel,\n    FormOutcomeEvent,\n    FormOutcomeModel,\n    WidgetVisibilityService,\n    FormService,\n    FORM_FIELD_VALIDATORS,\n    FormFieldValidator,\n    FormValues,\n    FormModel,\n    ContentLinkModel,\n    UploadWidgetContentLinkModel\n} from '@alfresco/adf-core';\nimport { FormCloudService } from '../services/form-cloud.service';\nimport { TaskVariableCloud } from '../models/task-variable-cloud.model';\nimport { TaskDetailsCloudModel } from '../../task/start-task/models/task-details-cloud.model';\n\n@Component({\n    selector: 'adf-cloud-form',\n    templateUrl: './form-cloud.component.html'\n})\nexport class FormCloudComponent extends FormBaseComponent implements OnChanges, OnDestroy {\n\n    /** App name to fetch corresponding form and values. */\n    @Input()\n    appName: string = '';\n\n    /** The application version to use when fetching data */\n    @Input()\n    appVersion?: number;\n\n    /** Task id to fetch corresponding form and values. */\n    @Input()\n    formId: string;\n\n    /** ProcessInstanceId id to fetch corresponding form and values. */\n    @Input()\n    processInstanceId: string;\n\n    /** Underlying form model instance. */\n    @Input()\n    form: FormModel;\n\n    /** Task id to fetch corresponding form and values. */\n    @Input()\n    taskId: string;\n\n    /** Custom form values map to be used with the rendered form. */\n    @Input()\n    data: TaskVariableCloud[];\n\n    /** FormFieldValidator allow to override the form field validators provided. */\n    @Input()\n    fieldValidators: FormFieldValidator[] = [...FORM_FIELD_VALIDATORS];\n\n    /** Emitted when the form is submitted with the `Save` or custom outcomes. */\n    @Output()\n    formSaved = new EventEmitter<FormModel>();\n\n    /** Emitted when the form is submitted with the `Complete` outcome. */\n    @Output()\n    formCompleted = new EventEmitter<FormModel>();\n\n    /** Emitted when the form is loaded or reloaded. */\n    @Output()\n    formLoaded = new EventEmitter<FormModel>();\n\n    /** Emitted when form values are refreshed due to a data property change. */\n    @Output()\n    formDataRefreshed = new EventEmitter<FormModel>();\n\n    /** Emitted when form content is clicked. */\n    @Output()\n    formContentClicked = new EventEmitter<ContentLinkModel>();\n\n    protected subscriptions: Subscription[] = [];\n    nodeId: string;\n    formCloudRepresentationJSON: any;\n\n    protected onDestroy$ = new Subject<boolean>();\n\n    constructor(protected formCloudService: FormCloudService,\n                protected formService: FormService,\n                protected visibilityService: WidgetVisibilityService) {\n        super();\n\n        this.formService.formContentClicked\n            .pipe(takeUntil(this.onDestroy$))\n            .subscribe((content) => {\n                if (content instanceof UploadWidgetContentLinkModel) {\n                    this.form.setNodeIdValueForViewersLinkedToUploadWidget(content);\n                    this.onFormDataRefreshed(this.form);\n                } else {\n                    this.formContentClicked.emit(content);\n                }\n            });\n\n        this.formService.updateFormValuesRequested\n            .pipe(takeUntil(this.onDestroy$))\n            .subscribe((valuesToSetIfNotPresent) => {\n                this.form.addValuesNotPresent(valuesToSetIfNotPresent);\n                this.onFormDataRefreshed(this.form);\n            });\n    }\n\n    @HostListener('keydown', ['$event'])\n    onKeyDown(event: KeyboardEvent) {\n        event.cancelBubble = true;\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        const appName = changes['appName'];\n\n        if (appName && appName.currentValue) {\n            if (this.taskId) {\n                this.getFormByTaskId(appName.currentValue, this.taskId, this.appVersion);\n            } else if (this.formId) {\n                this.getFormById(appName.currentValue, this.formId, this.appVersion);\n            }\n            return;\n        }\n\n        const formId = changes['formId'];\n        if (formId && formId.currentValue && this.appName) {\n            this.getFormById(this.appName, formId.currentValue, this.appVersion);\n            return;\n        }\n\n        const taskId = changes['taskId'];\n        if (taskId && taskId.currentValue && this.appName) {\n            this.getFormByTaskId(this.appName, taskId.currentValue, this.appVersion);\n            return;\n        }\n\n        const data = changes['data'];\n        if (data && data.currentValue) {\n            this.refreshFormData();\n            return;\n        }\n    }\n\n    /**\n     * Invoked when user clicks form refresh button.\n     */\n    onRefreshClicked() {\n        this.loadForm();\n    }\n\n    loadForm() {\n        if (this.appName && this.taskId) {\n            this.getFormByTaskId(this.appName, this.taskId, this.appVersion);\n        } else if (this.appName && this.formId) {\n            this.getFormById(this.appName, this.formId, this.appVersion);\n        }\n\n    }\n\n    findProcessVariablesByTaskId(appName: string, taskId: string): Observable<TaskVariableCloud[]> {\n        return this.formCloudService.getTask(appName, taskId).pipe(\n            switchMap(task => {\n                if (this.isAProcessTask(task)) {\n                    return this.formCloudService.getTaskVariables(appName, taskId);\n                } else {\n                    return of([]);\n                }\n            })\n        );\n    }\n\n    isAProcessTask(taskRepresentation: TaskDetailsCloudModel): boolean {\n        return taskRepresentation.processDefinitionId && taskRepresentation.processDefinitionDeploymentId !== 'null';\n    }\n\n    getFormByTaskId(appName: string, taskId: string, version?: number): Promise<FormModel> {\n        return new Promise<FormModel>(resolve => {\n            forkJoin(\n                this.formCloudService.getTaskForm(appName, taskId, version),\n                this.formCloudService.getTaskVariables(appName, taskId)\n            )\n            .pipe(takeUntil(this.onDestroy$))\n            .subscribe(\n                (data) => {\n                    this.formCloudRepresentationJSON = data[0];\n\n                    this.formCloudRepresentationJSON.processVariables = data[1];\n                    this.data = data[1];\n\n                    const parsedForm = this.parseForm(this.formCloudRepresentationJSON);\n                    this.visibilityService.refreshVisibility(<any> parsedForm, this.data);\n                    parsedForm.validateForm();\n                    this.form = parsedForm;\n                    this.form.nodeId = '-my-';\n                    this.onFormLoaded(this.form);\n                    resolve(this.form);\n                },\n                (error) => {\n                    this.handleError(error);\n                    resolve(null);\n                }\n            );\n        });\n    }\n\n    getFormById(appName: string, formId: string, appVersion?: number) {\n        this.formCloudService\n            .getForm(appName, formId, appVersion)\n            .pipe(\n                map((form: any) => {\n                    const flattenForm = { ...form.formRepresentation, ...form.formRepresentation.formDefinition };\n                    delete flattenForm.formDefinition;\n                    return flattenForm;\n                }),\n                takeUntil(this.onDestroy$))\n            .subscribe(\n                (form) => {\n                    this.formCloudRepresentationJSON = form;\n                    const parsedForm = this.parseForm(form);\n                    this.visibilityService.refreshVisibility(<any> parsedForm);\n                    parsedForm.validateForm();\n                    this.form = parsedForm;\n                    this.form.nodeId = '-my-';\n                    this.onFormLoaded(this.form);\n                },\n                (error) => {\n                    this.handleError(error);\n                }\n            );\n    }\n\n    saveTaskForm() {\n        if (this.form && this.appName && this.taskId) {\n            this.formCloudService\n                .saveTaskForm(this.appName, this.taskId, this.processInstanceId, `${this.form.id}`, this.form.values)\n                .pipe(takeUntil(this.onDestroy$))\n                .subscribe(\n                    () => {\n                        this.onTaskSaved(this.form);\n                    },\n                    (error) => this.onTaskSavedError(error)\n                );\n        }\n    }\n\n    completeTaskForm(outcome?: string) {\n        if (this.form && this.appName && this.taskId) {\n            this.formCloudService\n                .completeTaskForm(this.appName, this.taskId, this.processInstanceId, `${this.form.id}`, this.form.values, outcome, this.appVersion)\n                .pipe(takeUntil(this.onDestroy$))\n                .subscribe(\n                    () => {\n                        this.onTaskCompleted(this.form);\n                    },\n                    (error) => this.onTaskCompletedError(error)\n                );\n        }\n    }\n\n    parseForm(formCloudRepresentationJSON: any): FormModel {\n        if (formCloudRepresentationJSON) {\n            const formValues: FormValues = {};\n            (this.data || []).forEach(variable => {\n                formValues[variable.name] = variable.value;\n            });\n\n            const form = new FormModel(formCloudRepresentationJSON, formValues, this.readOnly);\n            if (!form) {\n                form.outcomes = this.getFormDefinitionOutcomes(form);\n            }\n            if (this.fieldValidators && this.fieldValidators.length > 0) {\n                form.fieldValidators = this.fieldValidators;\n            }\n            return form;\n        }\n        return null;\n    }\n\n    /**\n     * Get custom set of outcomes for a Form Definition.\n     * @param form Form definition model.\n     */\n    getFormDefinitionOutcomes(form: FormModel): FormOutcomeModel[] {\n        return [\n            new FormOutcomeModel(<any> form, { id: '$save', name: FormOutcomeModel.SAVE_ACTION, isSystem: true })\n        ];\n    }\n\n    checkVisibility(field: FormFieldModel) {\n        if (field && field.form) {\n            this.visibilityService.refreshVisibility(field.form);\n        }\n    }\n\n    private refreshFormData() {\n        this.form = this.parseForm(this.formCloudRepresentationJSON);\n        this.onFormLoaded(this.form);\n        this.onFormDataRefreshed(this.form);\n    }\n\n    protected onFormLoaded(form: FormModel) {\n        this.formLoaded.emit(form);\n    }\n\n    protected onFormDataRefreshed(form: FormModel) {\n        this.formDataRefreshed.emit(form);\n    }\n\n    protected onTaskSaved(form: FormModel) {\n        this.formSaved.emit(form);\n    }\n\n    protected onTaskSavedError(error: any) {\n        this.handleError(error);\n    }\n\n    protected onTaskCompleted(form: FormModel) {\n        this.formCompleted.emit(form);\n    }\n\n    protected onTaskCompletedError(error: any) {\n        this.handleError(error);\n    }\n\n    protected onExecuteOutcome(outcome: FormOutcomeModel): boolean {\n        const args = new FormOutcomeEvent(outcome);\n\n        if (args.defaultPrevented) {\n            return false;\n        }\n\n        this.executeOutcome.emit(args);\n        return !args.defaultPrevented;\n    }\n\n    protected storeFormAsMetadata() {\n    }\n\n    ngOnDestroy() {\n        this.onDestroy$.next(true);\n        this.onDestroy$.complete();\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Injectable } from '@angular/core';\nimport { AlfrescoApiService, AppConfigService } from '@alfresco/adf-core';\nimport { map } from 'rxjs/operators';\nimport { from, Observable } from 'rxjs';\nimport { BaseCloudService } from '../../services/base-cloud.service';\nimport { FormRepresentation } from '../../services/form-fields.interfaces';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class FormDefinitionSelectorCloudService extends BaseCloudService {\n\n    constructor(apiService: AlfrescoApiService,\n                appConfigService: AppConfigService) {\n        super(apiService, appConfigService);\n    }\n\n    /**\n     * Get all forms of an app.\n     * @param appName Name of the application\n     * @returns Details of the forms\n     */\n    getForms(appName: string): Observable<FormRepresentation[]> {\n        const url = `${this.getBasePath(appName)}/form/v1/forms`;\n\n        return this.get(url).pipe(\n            map((data: any) => {\n                return data.map((formData: any) => {\n                    return <FormRepresentation> formData.formRepresentation;\n                });\n            })\n        );\n    }\n\n    /**\n     * Get all forms of an app.\n     * @param appName Name of the application\n     * @returns Details of the forms\n     */\n    getStandAloneTaskForms(appName: string): Observable<FormRepresentation[]> {\n        return from(this.getForms(appName)).pipe(\n            map((data: any) => {\n                return data.filter((formData: any) => formData.standalone || formData.standalone === undefined);\n            })\n        );\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { FormDefinitionSelectorCloudService } from '../services/form-definition-selector-cloud.service';\nimport { MatSelectChange } from '@angular/material/select';\nimport { FormRepresentation } from '../../services/form-fields.interfaces';\n\n@Component({\n    selector: 'adf-cloud-form-definition-selector',\n    templateUrl: './form-definition-selector-cloud.component.html',\n    styleUrls: ['./form-definition-selector-cloud.component.scss']\n})\n\nexport class FormDefinitionSelectorCloudComponent implements OnInit {\n\n    /** Name of the application. If specified, this shows the users who have access to the app. */\n    @Input()\n    appName: string = '';\n\n    /** Emitted when a form is selected. */\n    @Output()\n    selectForm: EventEmitter<string> = new EventEmitter<string>();\n\n    forms$: Observable<FormRepresentation[]>;\n\n    constructor(private formDefinitionCloudService: FormDefinitionSelectorCloudService) {\n    }\n\n    ngOnInit(): void {\n        this.forms$ = this.formDefinitionCloudService.getStandAloneTaskForms(this.appName);\n    }\n\n    onSelect(event: MatSelectChange) {\n        this.selectForm.emit(event.value);\n    }\n\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component } from '@angular/core';\n\n@Component({\n    selector: 'adf-cloud-form-custom-outcomes',\n    template: '<ng-content></ng-content>'\n})\nexport class FormCustomOutcomesComponent {}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* tslint:disable:component-selector  */\n\nimport { Component, OnInit, ViewEncapsulation, OnDestroy } from '@angular/core';\nimport { DateAdapter, MAT_DATE_FORMATS } from '@angular/material/core';\nimport moment from 'moment-es6';\nimport { Moment } from 'moment';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport {\n    MOMENT_DATE_FORMATS, MomentDateAdapter, WidgetComponent,\n    UserPreferencesService, UserPreferenceValues, FormService\n} from '@alfresco/adf-core';\n\n@Component({\n    selector: 'date-widget',\n    providers: [\n        { provide: DateAdapter, useClass: MomentDateAdapter },\n        { provide: MAT_DATE_FORMATS, useValue: MOMENT_DATE_FORMATS }],\n    templateUrl: './date-cloud.widget.html',\n    styleUrls: ['./date-cloud.widget.scss'],\n    host: {\n        '(click)': 'event($event)',\n        '(blur)': 'event($event)',\n        '(change)': 'event($event)',\n        '(focus)': 'event($event)',\n        '(focusin)': 'event($event)',\n        '(focusout)': 'event($event)',\n        '(input)': 'event($event)',\n        '(invalid)': 'event($event)',\n        '(select)': 'event($event)'\n    },\n    encapsulation: ViewEncapsulation.None\n})\nexport class DateCloudWidgetComponent extends WidgetComponent implements OnInit, OnDestroy {\n\n    typeId = 'DateCloudWidgetComponent';\n    DATE_FORMAT_CLOUD = 'YYYY-MM-DD';\n\n    minDate: Moment;\n    maxDate: Moment;\n\n    private onDestroy$ = new Subject<boolean>();\n\n    constructor(public formService: FormService,\n                private dateAdapter: DateAdapter<Moment>,\n                private userPreferencesService: UserPreferencesService) {\n        super(formService);\n    }\n\n    ngOnInit() {\n        this.userPreferencesService\n            .select(UserPreferenceValues.Locale)\n            .pipe(takeUntil(this.onDestroy$))\n            .subscribe(locale => this.dateAdapter.setLocale(locale));\n\n        const momentDateAdapter = <MomentDateAdapter> this.dateAdapter;\n        momentDateAdapter.overrideDisplayFormat = this.field.dateDisplayFormat;\n\n        if (this.field) {\n            if (this.field.minValue) {\n                this.minDate = moment(this.field.minValue, this.DATE_FORMAT_CLOUD);\n            }\n\n            if (this.field.maxValue) {\n                this.maxDate = moment(this.field.maxValue, this.DATE_FORMAT_CLOUD);\n            }\n        }\n    }\n\n    ngOnDestroy() {\n        this.onDestroy$.next(true);\n        this.onDestroy$.complete();\n    }\n\n    onDateChanged(newDateValue) {\n        const date = moment(newDateValue, this.field.dateDisplayFormat, true);\n        if (date.isValid()) {\n            this.field.value = date.format(this.field.dateDisplayFormat);\n        } else {\n            this.field.value = newDateValue;\n        }\n        this.onFieldChanged(this.field);\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, OnInit, ViewEncapsulation, OnDestroy } from '@angular/core';\nimport {\n    WidgetComponent,\n    FormService,\n    LogService,\n    FormFieldOption,\n    FormFieldEvent,\n    FormFieldModel,\n    FormFieldTypes,\n    RuleEntry\n} from '@alfresco/adf-core';\nimport { FormCloudService } from '../../../services/form-cloud.service';\nimport { Subject } from 'rxjs';\nimport { filter, takeUntil } from 'rxjs/operators';\n\n/* tslint:disable:component-selector  */\n\n@Component({\n    selector: 'dropdown-cloud-widget',\n    templateUrl: './dropdown-cloud.widget.html',\n    styleUrls: ['./dropdown-cloud.widget.scss'],\n    host: {\n        '(click)': 'event($event)',\n        '(blur)': 'event($event)',\n        '(change)': 'event($event)',\n        '(focus)': 'event($event)',\n        '(focusin)': 'event($event)',\n        '(focusout)': 'event($event)',\n        '(input)': 'event($event)',\n        '(invalid)': 'event($event)',\n        '(select)': 'event($event)'\n    },\n    encapsulation: ViewEncapsulation.None\n})\nexport class DropdownCloudWidgetComponent extends WidgetComponent implements OnInit, OnDestroy {\n    static DEFAULT_OPTION = {\n        id: 'empty',\n        name: 'Choose one...'\n    };\n\n    typeId = 'DropdownCloudWidgetComponent';\n    protected onDestroy$ = new Subject<boolean>();\n\n    constructor(public formService: FormService,\n                private formCloudService: FormCloudService,\n                private logService: LogService) {\n        super(formService);\n    }\n\n    ngOnInit() {\n        if (this.hasRestUrl() && !this.isLinkedWidget()) {\n            this.persistFieldOptionsFromRestApi();\n        }\n\n        if (this.isLinkedWidget()) {\n            this.loadFieldOptionsForLinkedWidget();\n\n            this.formService.formFieldValueChanged\n                .pipe(\n                    filter((event: FormFieldEvent) => this.isFormFieldEventOfTypeDropdown(event) && this.isParentFormFieldEvent(event)),\n                    takeUntil(this.onDestroy$))\n                .subscribe((event: FormFieldEvent) => {\n                    const valueOfParentWidget = event.field.value;\n                    this.parentValueChanged(valueOfParentWidget);\n                });\n        }\n    }\n\n    private persistFieldOptionsFromRestApi() {\n        if (this.isValidRestType()) {\n            const bodyParam = this.buildBodyParam();\n            this.formCloudService.getRestWidgetData(this.field.form.id, this.field.id, bodyParam)\n                .pipe(takeUntil(this.onDestroy$))\n                .subscribe((result: FormFieldOption[]) => {\n                    this.field.options = result;\n                    this.field.updateForm();\n                }, (err) => this.handleError(err));\n        }\n    }\n\n    private buildBodyParam(): any {\n        const bodyParam = Object.assign({});\n        if (this.isLinkedWidget()) {\n            const parentWidgetValue = this.getParentWidgetValue();\n            const parentWidgetId = this.getLinkedWidgetId();\n            bodyParam[parentWidgetId] = parentWidgetValue;\n        }\n        return bodyParam;\n    }\n\n    private loadFieldOptionsForLinkedWidget() {\n        const parentWidgetValue = this.getParentWidgetValue();\n        this.parentValueChanged(parentWidgetValue);\n    }\n\n    private getParentWidgetValue(): string {\n        const parentWidgetId = this.getLinkedWidgetId();\n        const parentWidget = this.getFormFieldById(parentWidgetId);\n        return parentWidget?.value;\n    }\n\n    private parentValueChanged(value: string) {\n        if (this.isValidValue(value)) {\n            this.isValidRestType() ? this.persistFieldOptionsFromRestApi() : this.persistFieldOptionsFromManualList(value);\n        } else if (this.isDefaultValue(value)) {\n            this.addDefaultOption();\n        }\n    }\n\n    private isValidValue(value: string): boolean {\n        return !!value && value !== DropdownCloudWidgetComponent.DEFAULT_OPTION.id;\n    }\n\n    private isDefaultValue(value: string): boolean {\n        return value === DropdownCloudWidgetComponent.DEFAULT_OPTION.id;\n    }\n\n    private getFormFieldById(fieldId): FormFieldModel {\n        return this.field.form.getFormFields().filter((field: FormFieldModel) => field.id === fieldId)[0];\n    }\n\n    private persistFieldOptionsFromManualList(value: string) {\n        if (this.hasRuleEntries()) {\n            const rulesEntries = this.getRuleEntries();\n            rulesEntries.forEach((ruleEntry: RuleEntry) => {\n                if (ruleEntry.key === value) {\n                    this.field.options = ruleEntry.options;\n                    this.field.updateForm();\n                }\n            });\n        }\n    }\n\n    private getRuleEntries(): RuleEntry[] {\n        return this.field.rule.entries;\n    }\n\n    private hasRuleEntries(): boolean {\n        return !!this.getRuleEntries().length;\n    }\n\n    private addDefaultOption() {\n        this.field.options = [DropdownCloudWidgetComponent.DEFAULT_OPTION];\n    }\n\n    selectionChangedForField(field: FormFieldModel) {\n        const formFieldValueChangedEvent = new FormFieldEvent(field.form, field);\n        this.formService.formFieldValueChanged.next(formFieldValueChangedEvent);\n        this.onFieldChanged(field);\n    }\n\n    private isParentFormFieldEvent(event: FormFieldEvent): boolean {\n        return event.field.id === this.getLinkedWidgetId();\n    }\n\n    private isFormFieldEventOfTypeDropdown(event: FormFieldEvent): boolean {\n        return event.field.type === FormFieldTypes.DROPDOWN;\n    }\n\n    private hasRestUrl(): boolean {\n        return !!this.field?.restUrl;\n    }\n\n    isLinkedWidget(): boolean {\n        return !!this.getLinkedWidgetId();\n    }\n\n    getLinkedWidgetId(): string {\n        return this.field?.rule?.ruleOn;\n    }\n\n    compareDropdownValues(opt1: FormFieldOption | string, opt2: FormFieldOption | string): boolean {\n        if (!opt1 || !opt2) {\n            return false;\n        }\n\n        if (typeof opt1 === 'string' && typeof opt2 === 'object') {\n            return opt1 === opt2.id || opt1 === opt2.name;\n        }\n\n        if (typeof opt1 === 'object' && typeof opt2 === 'string') {\n            return opt1.id === opt2 || opt1.name === opt2;\n        }\n\n        if (typeof opt1 === 'object' && typeof opt2 === 'object') {\n            return  opt1.id === opt2.id || opt1.name === opt2.name;\n        }\n\n        return opt1 === opt2;\n    }\n\n    getOptionValue(option: FormFieldOption, fieldValue: string): string | FormFieldOption {\n        if (this.field.hasMultipleValues) {\n            return option;\n        }\n\n        let optionValue: string = '';\n        if (option.id === DropdownCloudWidgetComponent.DEFAULT_OPTION.id || option.name !== fieldValue) {\n            optionValue = option.id;\n        } else {\n            optionValue = option.name;\n        }\n        return optionValue;\n    }\n\n    private isValidRestType(): boolean {\n        return this.field.optionType === 'rest' && !!this.field.restUrl;\n    }\n\n    private handleError(error: any) {\n        this.logService.error(error);\n    }\n\n    isReadOnlyType(): boolean {\n        return this.field.type === 'readonly';\n    }\n\n    ngOnDestroy() {\n        this.onDestroy$.next(true);\n        this.onDestroy$.complete();\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, OnInit, ViewEncapsulation } from '@angular/core';\nimport { WidgetComponent, IdentityGroupModel, FormService } from '@alfresco/adf-core';\nimport { FormControl } from '@angular/forms';\nimport { filter, takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs';\nimport { ComponentSelectionMode } from '../../../../types';\n\n/* tslint:disable:component-selector  */\n\n@Component({\n    selector: 'group-cloud-widget',\n    templateUrl: './group-cloud.widget.html',\n    host: {\n        '(click)': 'event($event)',\n        '(blur)': 'event($event)',\n        '(change)': 'event($event)',\n        '(focus)': 'event($event)',\n        '(focusin)': 'event($event)',\n        '(focusout)': 'event($event)',\n        '(input)': 'event($event)',\n        '(invalid)': 'event($event)',\n        '(select)': 'event($event)'\n    },\n    encapsulation: ViewEncapsulation.None\n})\nexport class GroupCloudWidgetComponent extends WidgetComponent implements OnInit {\n\n    private onDestroy$ = new Subject<boolean>();\n\n    typeId = 'GroupCloudWidgetComponent';\n    roles: string[];\n    mode: ComponentSelectionMode;\n    title: string;\n    preSelectGroup: IdentityGroupModel[];\n    search: FormControl;\n\n    constructor(formService: FormService) {\n        super(formService);\n    }\n\n    ngOnInit() {\n        if (this.field) {\n            this.roles = this.field.roles;\n            this.mode = this.field.optionType as ComponentSelectionMode;\n            this.title = this.field.placeholder;\n            this.preSelectGroup = this.field.value ? this.field.value : [];\n        }\n        this.search =  new FormControl({value: '', disabled: this.field.readOnly}, []),\n\n        this.search.statusChanges\n            .pipe(\n                filter((value: string) => {\n                    return value === 'INVALID';\n                }),\n                takeUntil(this.onDestroy$)\n            )\n            .subscribe(() => {\n                this.field.markAsInvalid();\n                this.field.form.markAsInvalid();\n            });\n\n        this.search.statusChanges\n            .pipe(\n                filter((value: string) => {\n                    return value === 'VALID';\n                }),\n                takeUntil(this.onDestroy$)\n            )\n            .subscribe(() => {\n                this.field.validate();\n                this.field.form.validateForm();\n            });\n    }\n\n    ngOnDestroy() {\n        this.onDestroy$.next(true);\n        this.onDestroy$.complete();\n    }\n\n    onChangedGroup(groups) {\n        this.field.value = [...groups];\n        this.onFieldChanged(this.field);\n    }\n\n    isMultipleMode(): boolean {\n        return this.mode === 'multiple';\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, OnInit, ViewEncapsulation } from '@angular/core';\nimport { WidgetComponent, IdentityUserModel, FormService } from '@alfresco/adf-core';\nimport { FormControl } from '@angular/forms';\nimport { filter, takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs';\nimport { ComponentSelectionMode } from '../../../../types';\n\n/* tslint:disable:component-selector  */\n\n@Component({\n    selector: 'people-cloud-widget',\n    templateUrl: './people-cloud.widget.html',\n    host: {\n        '(click)': 'event($event)',\n        '(blur)': 'event($event)',\n        '(change)': 'event($event)',\n        '(focus)': 'event($event)',\n        '(focusin)': 'event($event)',\n        '(focusout)': 'event($event)',\n        '(input)': 'event($event)',\n        '(invalid)': 'event($event)',\n        '(select)': 'event($event)'\n    },\n    encapsulation: ViewEncapsulation.None\n})\nexport class PeopleCloudWidgetComponent extends WidgetComponent implements OnInit {\n\n    private onDestroy$ = new Subject<boolean>();\n\n    typeId = 'PeopleCloudWidgetComponent';\n    appName: string;\n    roles: string[];\n    mode: ComponentSelectionMode;\n    title: string;\n    preSelectUsers: IdentityUserModel[];\n    search: FormControl;\n\n    constructor(formService: FormService) {\n        super(formService);\n    }\n\n    ngOnInit() {\n        if (this.field) {\n            this.roles = this.field.roles;\n            this.mode = this.field.optionType as ComponentSelectionMode;\n            this.title = this.field.placeholder;\n            this.preSelectUsers = this.field.value ? this.field.value : [];\n        }\n        this.search =  new FormControl({value: '', disabled: this.field.readOnly}, []),\n\n        this.search.statusChanges\n            .pipe(\n                filter((value: string) => {\n                    return value === 'INVALID';\n                }),\n                takeUntil(this.onDestroy$)\n            )\n            .subscribe(() => {\n                this.field.markAsInvalid();\n                this.field.form.markAsInvalid();\n            });\n\n        this.search.statusChanges\n            .pipe(\n                filter((value: string) => {\n                    return value === 'VALID';\n                }),\n                takeUntil(this.onDestroy$)\n            )\n            .subscribe(() => {\n                this.field.validate();\n                this.field.form.validateForm();\n            });\n    }\n\n    ngOnDestroy() {\n        this.onDestroy$.next(true);\n        this.onDestroy$.complete();\n    }\n\n    onChangedUser(users) {\n        this.field.value = [...users];\n        this.onFieldChanged(this.field);\n    }\n\n    isMultipleMode(): boolean {\n        return this.mode === 'multiple';\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Injectable } from '@angular/core';\nimport { AlfrescoApiService, LogService, NotificationService } from '@alfresco/adf-core';\nimport { MatDialog } from '@angular/material/dialog';\nimport {\n    ContentNodeSelectorComponent,\n    ContentNodeSelectorComponentData,\n    NodeAction\n} from '@alfresco/adf-content-services';\nimport { Node, NodeEntry, NodesApi } from '@alfresco/js-api';\nimport { from, Observable, Subject, throwError } from 'rxjs';\nimport { catchError, map, mapTo } from 'rxjs/operators';\nimport { DestinationFolderPathModel } from '../models/form-cloud-representation.model';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class ContentCloudNodeSelectorService {\n\n    private _nodesApi: NodesApi;\n    get nodesApi(): NodesApi {\n        this._nodesApi = this._nodesApi ?? new NodesApi(this.apiService.getInstance());\n        return this._nodesApi;\n    }\n\n    sourceNodeNotFound = false;\n\n    constructor(\n        private apiService: AlfrescoApiService,\n        private notificationService: NotificationService,\n        private logService: LogService,\n        private dialog: MatDialog) {\n    }\n\n    openUploadFileDialog(currentFolderId?: string, selectionMode?: string, isAllFileSources?: boolean, restrictRootToCurrentFolderId?: boolean): Observable<Node[]> {\n        const select = new Subject<Node[]>();\n        select.subscribe({ complete: this.close.bind(this) });\n        const data = <ContentNodeSelectorComponentData> {\n            title: 'Select a file',\n            actionName: NodeAction.ATTACH,\n            currentFolderId,\n            restrictRootToCurrentFolderId,\n            select,\n            selectionMode,\n            isSelectionValid: (entry: Node) => entry.isFile,\n            showFilesInResult: true,\n            showDropdownSiteList: false,\n            showLocalUploadButton: isAllFileSources\n        };\n        this.openContentNodeDialog(data, 'adf-content-node-selector-dialog', '66%');\n        return select;\n    }\n\n    async getNodeIdFromPath(destinationFolderPath: DestinationFolderPathModel): Promise<string> {\n        if (destinationFolderPath.alias && destinationFolderPath.path) {\n            try {\n                return await this.getNodeId(destinationFolderPath.alias, destinationFolderPath.path).toPromise();\n            } catch (error) {\n                this.logService.error(error);\n            }\n        }\n\n        return this.getNodeId(destinationFolderPath.alias).toPromise();\n    }\n\n    async getNodeIdFromFolderVariableValue(variableValue: string, defaultAlias?: string): Promise<string> {\n        const isExistingNode = await this.isExistingNode(variableValue);\n        return isExistingNode ? variableValue : this.getNodeId(defaultAlias).toPromise();\n    }\n\n    async isExistingNode(nodeId: string): Promise<boolean> {\n        let isExistingNode = false;\n        if (nodeId) {\n            try {\n                isExistingNode = await this.getNodeId(nodeId).pipe(mapTo(true)).toPromise();\n            } catch (error) {\n                this.logService.error(error);\n            }\n        }\n        return isExistingNode;\n    }\n\n    private getNodeId(nodeId: string, relativePath?: string): Observable<string> {\n        let opts: any;\n        if (relativePath) {\n            opts = { relativePath };\n        }\n        return from(this.nodesApi.getNode(nodeId, opts)).pipe(\n            map((nodeEntry: NodeEntry) => nodeEntry.entry.id),\n            catchError((error) => {\n                this.sourceNodeNotFound = true;\n                return this.handleError(error);\n            })\n        );\n    }\n\n    private openContentNodeDialog(data: ContentNodeSelectorComponentData, currentPanelClass: string, chosenWidth: string) {\n        const contentNodeDialog = this.dialog.open(ContentNodeSelectorComponent, { data, panelClass: currentPanelClass, width: chosenWidth });\n        contentNodeDialog.afterOpened().subscribe(() => {\n            if (this.sourceNodeNotFound) {\n                this.notificationService.showWarning('ADF_CLOUD_TASK_FORM.ERROR.DESTINATION_FOLDER_PATH_ERROR');\n            }\n        });\n        contentNodeDialog.afterClosed().subscribe(() => {\n            this.sourceNodeNotFound = false;\n        });\n    }\n\n    close() {\n        this.dialog.closeAll();\n    }\n\n    private handleError(error: any): Observable<any> {\n        return throwError(error || 'Server error');\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Injectable } from '@angular/core';\nimport { throwError, Observable, from } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport {\n    AlfrescoApiService,\n    LogService,\n    ContentService,\n    DownloadService\n} from '@alfresco/adf-core';\nimport { AuthenticationApi, Node, UploadApi } from '@alfresco/js-api';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class ProcessCloudContentService {\n\n    private _uploadApi;\n    get uploadApi(): UploadApi {\n        this._uploadApi = this._uploadApi ?? new UploadApi(this.apiService.getInstance());\n        return this._uploadApi;\n    }\n\n    private _authenticationApi;\n    get authenticationApi(): AuthenticationApi {\n        this._authenticationApi = this._authenticationApi ?? new AuthenticationApi(this.apiService.getInstance());\n        return this._authenticationApi;\n    }\n\n    constructor(\n        private apiService: AlfrescoApiService,\n        private logService: LogService,\n        public contentService: ContentService,\n        private downloadService: DownloadService\n    ) {\n    }\n\n    createTemporaryRawRelatedContent(\n        file: File,\n        nodeId: string\n    ): Observable<Node> {\n\n        return from(\n            this.uploadApi.uploadFile(file, '', nodeId, '', { overwrite: true })\n        ).pipe(\n            map((res: any) => {\n                return {\n                    ...res.entry,\n                    nodeId: res.entry.id\n                };\n            }),\n            catchError(err => this.handleError(err))\n        );\n    }\n\n    getRawContentNode(nodeId: string): Observable<Blob> {\n        return this.contentService.getNodeContent(nodeId);\n    }\n\n    downloadNodeContent(blob: Blob, fileName: string): void {\n        this.contentService.downloadBlob(blob, fileName);\n    }\n\n    async downloadFile(nodeId: string) {\n\n        const ticket = await this.getAuthTicket();\n        const url = this.contentService.getContentUrl(nodeId, true, ticket);\n\n        this.downloadService.downloadUrl(url, nodeId);\n    }\n\n    async getAuthTicket(): Promise<string> {\n        const ticket = await this.authenticationApi.getTicket();\n\n        if (ticket && ticket.entry) {\n            return ticket.entry.id || '';\n        }\n\n        return '';\n    }\n\n    private handleError(error: any) {\n        this.logService.error(error);\n        return throwError(error || 'Server error');\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport class FormCloudRepresentation {\n\n    id?: string;\n    name?: string;\n    description?: string;\n    version?: number;\n    tabs?: any[];\n    fields?: any[];\n    outcomes?: any[];\n    metadata?: any;\n    variables?: any[];\n    taskId?: string;\n    taskName?: string;\n    processDefinitionId?: string;\n    processInstanceId?: string;\n    selectedOutcome?: string;\n\n    constructor(obj?: any) {\n        this.id = obj.id || null;\n        this.name = obj.name || null;\n        this.description = obj.description || null;\n        this.version = obj.version || null;\n        this.tabs = obj.tabs || null;\n        this.fields = obj.fields || null;\n        this.outcomes = obj.outcomes || null;\n        this.metadata = obj.metadata || null;\n        this.variables = obj.variables || null;\n        this.taskId = obj.taskId || null;\n        this.taskName = obj.taskName || null;\n        this.processDefinitionId = obj.processDefinitionId || null;\n        this.processInstanceId = obj.processInstanceId || null;\n        this.selectedOutcome = obj.selectedOutcome || null;\n    }\n}\n\nexport interface DestinationFolderPathModel {\n    alias: string;\n    path: string;\n}\n\nexport enum FileSourceTypes {\n    ALL_FILE_SOURCES_SERVICE_ID = 'all-file-sources',\n    ALFRESCO_CONTENT_SOURCES_SERVICE_ID = 'alfresco-content'\n}\n\nexport enum DestinationFolderPathType {\n    STATIC_TYPE = 'value',\n    STRING_TYPE = 'string',\n    FOLDER_TYPE = 'folder'\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* tslint:disable:component-selector  */\n\nimport { Component, ElementRef, OnInit, ViewChild, ViewEncapsulation } from '@angular/core';\nimport { Node } from '@alfresco/js-api';\nimport { Observable, from } from 'rxjs';\nimport { mergeMap } from 'rxjs/operators';\nimport { WidgetComponent, LogService, FormService, ThumbnailService, NotificationService } from '@alfresco/adf-core';\nimport { ProcessCloudContentService } from '../../../services/process-cloud-content.service';\nimport { FileSourceTypes, DestinationFolderPathType } from '../../../models/form-cloud-representation.model';\n\n@Component({\n    selector: 'upload-cloud-widget',\n    templateUrl: './upload-cloud.widget.html',\n    styleUrls: ['./upload-cloud.widget.scss'],\n    host: {\n        '(click)': 'event($event)',\n        '(blur)': 'event($event)',\n        '(change)': 'event($event)',\n        '(focus)': 'event($event)',\n        '(focusin)': 'event($event)',\n        '(focusout)': 'event($event)',\n        '(input)': 'event($event)',\n        '(invalid)': 'event($event)',\n        '(select)': 'event($event)'\n    },\n    encapsulation: ViewEncapsulation.None\n})\nexport class UploadCloudWidgetComponent extends WidgetComponent implements OnInit {\n\n    hasFile: boolean;\n    displayText: string;\n    multipleOption: string = '';\n    mimeTypeIcon: string;\n\n    @ViewChild('uploadFiles')\n    fileInput: ElementRef;\n\n    constructor(\n        formService: FormService,\n        private thumbnailService: ThumbnailService,\n        protected processCloudContentService: ProcessCloudContentService,\n        protected notificationService: NotificationService,\n        protected logService: LogService) {\n        super(formService);\n    }\n\n    ngOnInit() {\n        if (this.field &&\n            this.field.value &&\n            this.field.value.length > 0) {\n            this.hasFile = true;\n            this.fixIncompatibilityFromPreviousAndNewForm([]);\n        }\n        this.getMultipleFileParam();\n        this.setDestinationFolderPathFromMappedVariable();\n    }\n\n    removeFile(file: any) {\n        if (this.field) {\n            this.removeElementFromList(file);\n        }\n    }\n\n    onFileChanged(event: any) {\n        const files: File[] = [];\n        const filesSaved: Node[] = [];\n\n        for (const file of Array.from<File>(event.target.files)) {\n            if (!this.isUploaded(file)) {\n                files.push(file);\n            } else {\n                this.notificationService.showWarning('FORM.FIELD.FILE_ALREADY_UPLOADED');\n            }\n        }\n\n        if (files && files.length > 0) {\n            from(files)\n                .pipe(mergeMap((file) => this.uploadRawContent(file)))\n                .subscribe(\n                    (res) => {\n                        filesSaved.push(res);\n                    },\n                    (error) => this.logService.error(`Error uploading file. See console output for more details. ${error}`),\n                    () => {\n                        this.fixIncompatibilityFromPreviousAndNewForm(filesSaved);\n                        this.hasFile = true;\n                    }\n                );\n        }\n    }\n\n    private isUploaded(file: File): boolean {\n        const current: Node[] = this.field.value || [];\n        return current.some(entry => entry.name === file.name);\n    }\n\n    protected fixIncompatibilityFromPreviousAndNewForm(filesSaved: Node[]) {\n        const value: Node[] = [...this.field.value || []];\n        value.push(...filesSaved || []);\n\n        this.field.value = value;\n        this.field.form.values[this.field.id] = value;\n\n        this.hasFile = value.length > 0;\n    }\n\n    getIcon(mimeType: string): string {\n        return this.thumbnailService.getMimeTypeIcon(mimeType);\n    }\n\n    private uploadRawContent(file: File): Observable<Node> {\n        return this.processCloudContentService.createTemporaryRawRelatedContent(file, this.field.form.nodeId);\n    }\n\n    getMultipleFileParam() {\n        if (this.field &&\n            this.field.params &&\n            this.field.params.multiple) {\n            this.multipleOption = this.field.params.multiple ? 'multiple' : '';\n        }\n    }\n\n    get uploadedFiles(): any[] {\n        const result = this.field.value || this.field.form.values[this.field.id];\n        return result || [];\n    }\n\n    private removeElementFromList(file: any) {\n        const filteredValues = this.uploadedFiles.filter(value => value.id !== file.id);\n        this.resetFormValues(filteredValues);\n    }\n\n    private resetFormValues(values: any[]) {\n        if (values && values.length > 0) {\n            this.field.value = values;\n            this.field.form.values[this.field.id] = values;\n            this.hasFile = true;\n        } else {\n            this.field.value = [];\n            this.field.form.values[this.field.id] = [];\n            this.hasFile = false;\n        }\n    }\n\n    fileClicked(file: any): void {\n        this.formService.formContentClicked.next(file);\n    }\n\n    isAlfrescoAndLocal(): boolean {\n        return this.field?.params?.fileSource?.serviceId === FileSourceTypes.ALL_FILE_SOURCES_SERVICE_ID;\n    }\n\n    isPathVariableType(type: string): boolean {\n        return this.field?.params?.fileSource?.destinationFolderPath?.type === type;\n    }\n\n    setDestinationFolderPathFromMappedVariable() {\n        if (this.isAlfrescoAndLocal()) {\n            this.prepareUploadWidgetDestinationFolderPathFromStringVariable();\n            this.prepareUploadWidgetDestinationFolderPathFromFolderVariable();\n        }\n    }\n\n    private prepareUploadWidgetDestinationFolderPathFromStringVariable() {\n        if (this.isPathVariableType(DestinationFolderPathType.STRING_TYPE)) {\n            this.setUploadWidgetDestinationFolderPath(this.getDestinationFolderPathValue());\n        }\n    }\n\n    private prepareUploadWidgetDestinationFolderPathFromFolderVariable() {\n        if (this.isPathVariableType(DestinationFolderPathType.FOLDER_TYPE)) {\n            const folder = this.getDestinationFolderPathValue();\n            this.setUploadWidgetDestinationFolderPath(folder?.length ? folder[0].id : undefined);\n        }\n    }\n\n    private setUploadWidgetDestinationFolderPath(path: string) {\n        this.field.params.fileSource.destinationFolderPath['value'] = path ? path : undefined;\n    }\n\n    private getDestinationFolderPathValue(): any {\n        return this.field.form.getProcessVariableValue(this.field.params.fileSource?.destinationFolderPath?.name);\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* tslint:disable:component-selector */\n\nimport { Component, OnDestroy, OnInit, ViewEncapsulation } from '@angular/core';\nimport {\n    FormService,\n    LogService,\n    ThumbnailService,\n    NotificationService,\n    FormValues,\n    ContentLinkModel,\n    AppConfigService,\n    AlfrescoApiService,\n    UploadWidgetContentLinkModel,\n    DestinationFolderPath\n} from '@alfresco/adf-core';\nimport { Node, NodesApi, RelatedContentRepresentation } from '@alfresco/js-api';\nimport { ContentCloudNodeSelectorService } from '../../../services/content-cloud-node-selector.service';\nimport { ProcessCloudContentService } from '../../../services/process-cloud-content.service';\nimport { UploadCloudWidgetComponent } from './upload-cloud.widget';\nimport { DestinationFolderPathModel, DestinationFolderPathType } from '../../../models/form-cloud-representation.model';\nimport { ContentNodeSelectorPanelService } from '@alfresco/adf-content-services';\n\n@Component({\n    selector: 'adf-cloud-attach-file-cloud-widget',\n    templateUrl: './attach-file-cloud-widget.component.html',\n    styleUrls: ['./attach-file-cloud-widget.component.scss'],\n    host: {\n        '(click)': 'event($event)',\n        '(blur)': 'event($event)',\n        '(change)': 'event($event)',\n        '(focus)': 'event($event)',\n        '(focusin)': 'event($event)',\n        '(focusout)': 'event($event)',\n        '(input)': 'event($event)',\n        '(invalid)': 'event($event)',\n        '(select)': 'event($event)'\n    },\n    encapsulation: ViewEncapsulation.None\n})\nexport class AttachFileCloudWidgetComponent extends UploadCloudWidgetComponent implements OnInit, OnDestroy {\n\n    static ALIAS_ROOT_FOLDER = '-root-';\n    static ALIAS_USER_FOLDER = '-my-';\n    static APP_NAME = '-appname-';\n    static VALID_ALIAS = [\n        AttachFileCloudWidgetComponent.ALIAS_ROOT_FOLDER,\n        AttachFileCloudWidgetComponent.ALIAS_USER_FOLDER, '-shared-'\n    ];\n    static RETRIEVE_METADATA_OPTION = 'retrieveMetadata';\n\n    typeId = 'AttachFileCloudWidgetComponent';\n    rootNodeId = AttachFileCloudWidgetComponent.ALIAS_USER_FOLDER;\n    selectedNode: Node;\n\n    _nodesApi: NodesApi;\n    get nodesApi(): NodesApi {\n        this._nodesApi = this._nodesApi ?? new NodesApi(this.apiService.getInstance());\n        return this._nodesApi;\n    }\n    displayedColumns = ['icon', 'fileName', 'action'];\n\n    constructor(\n        formService: FormService,\n        logger: LogService,\n        thumbnails: ThumbnailService,\n        processCloudContentService: ProcessCloudContentService,\n        notificationService: NotificationService,\n        private contentNodeSelectorService: ContentCloudNodeSelectorService,\n        private appConfigService: AppConfigService,\n        private apiService: AlfrescoApiService,\n        private contentNodeSelectorPanelService: ContentNodeSelectorPanelService\n    ) {\n        super(formService, thumbnails, processCloudContentService, notificationService, logger);\n    }\n\n    ngOnInit() {\n        super.ngOnInit();\n        if (this.hasFile && this.field.value.length === 1) {\n            const files = this.field.value || this.field.form.values[this.field.id];\n            this.contentModelFormFileHandler(files[0]);\n        }\n        this.field.params.displayableCMProperties = this.field.params.displayableCMProperties ?? [];\n        this.displayedColumns.splice(2, 0, ...this.field.params.displayableCMProperties?.map(property => property?.name));\n    }\n\n    isPathStaticType(): boolean {\n        return this.field.params?.fileSource?.destinationFolderPath?.type === DestinationFolderPathType.STATIC_TYPE;\n    }\n\n    isUploadButtonVisible(): boolean {\n        return (!this.hasFile || this.multipleOption) && !this.field.readOnly;\n    }\n\n    onRemoveAttachFile(file: File | RelatedContentRepresentation | Node) {\n        this.removeFile(file);\n        if (file['id'] === this.selectedNode?.id) {\n            this.selectedNode = null;\n            this.contentModelFormFileHandler();\n        }\n    }\n\n    fetchAppNameFromAppConfig(): string {\n        return this.appConfigService.get('alfresco-deployed-apps')[0]?.name;\n    }\n\n    replaceAppNameAliasWithValue(path: string): string {\n        if (path?.match(AttachFileCloudWidgetComponent.APP_NAME)) {\n            const appName = this.fetchAppNameFromAppConfig();\n            return path.replace(AttachFileCloudWidgetComponent.APP_NAME, appName);\n        }\n        return path;\n    }\n\n    async openSelectDialog() {\n        const selectedMode = this.field.params.multiple ? 'multiple' : 'single';\n        const nodeId = await this.getDestinationFolderNodeId();\n        this.rootNodeId = nodeId ? nodeId : AttachFileCloudWidgetComponent.ALIAS_USER_FOLDER;\n        this.contentNodeSelectorPanelService.customModels = this.field.params.customModels;\n\n        this.contentNodeSelectorService\n            .openUploadFileDialog(this.rootNodeId, selectedMode, this.isAlfrescoAndLocal(), true)\n            .subscribe((selections: Node[]) => {\n                selections.forEach(node => (node['isExternal'] = true));\n                const selectionWithoutDuplication = this.removeExistingSelection(selections);\n                this.fixIncompatibilityFromPreviousAndNewForm(selectionWithoutDuplication);\n                if (this.field.value.length === 1) {\n                    this.contentModelFormFileHandler(selections && selections.length > 0 ? selections[0] : null);\n                }\n            });\n    }\n\n    private async getDestinationFolderNodeId(): Promise<string> {\n        let rootNodeId: string;\n\n        switch (this.field?.params?.fileSource?.destinationFolderPath?.type) {\n            case DestinationFolderPathType.STATIC_TYPE:\n                rootNodeId = await this.getNodeIdFromPath(this.field.params.fileSource.destinationFolderPath);\n                break;\n            case DestinationFolderPathType.STRING_TYPE:\n                rootNodeId = await this.getNodeIdFromPath(this.field.params.fileSource.destinationFolderPath);\n                break;\n            case DestinationFolderPathType.FOLDER_TYPE:\n                rootNodeId = await this.getNodeIdFromFolderVariableValue(this.field.params.fileSource.destinationFolderPath);\n                break;\n            default:\n                rootNodeId = await this.getNodeIdFromPath({ type: '', value: AttachFileCloudWidgetComponent.ALIAS_USER_FOLDER });\n                break;\n        }\n\n        return rootNodeId;\n    }\n\n   async getNodeIdFromPath(destinationFolderPath: DestinationFolderPath): Promise<string> {\n        let nodeId: string;\n        const destinationPath =  this.getAliasAndRelativePathFromDestinationFolderPath(destinationFolderPath.value);\n        destinationPath.path = this.replaceAppNameAliasWithValue(destinationPath.path);\n        try {\n            nodeId = await this.contentNodeSelectorService.getNodeIdFromPath(destinationPath);\n        } catch (error) {\n            this.logService.error(error);\n        }\n\n        return nodeId;\n    }\n\n    async getNodeIdFromFolderVariableValue(destinationFolderPath: DestinationFolderPath): Promise<string> {\n        let nodeId: string;\n        try {\n            nodeId = await this.contentNodeSelectorService.getNodeIdFromFolderVariableValue(destinationFolderPath.value, AttachFileCloudWidgetComponent.ALIAS_USER_FOLDER);\n        } catch (error) {\n            this.logService.error(error);\n        }\n\n        return nodeId;\n    }\n\n    getAliasAndRelativePathFromDestinationFolderPath(destinationFolderPath: string): DestinationFolderPathModel {\n        let alias: string; let path: string;\n        if (destinationFolderPath) {\n            const startOfRelativePathIndex = destinationFolderPath.indexOf('/');\n            if (startOfRelativePathIndex >= 0) {\n                alias = destinationFolderPath.substring(0, startOfRelativePathIndex);\n                path = destinationFolderPath.substring(startOfRelativePathIndex, destinationFolderPath.length);\n            } else {\n                alias = destinationFolderPath;\n            }\n        }\n\n        return this.isValidAlias(alias) ? { alias, path } : { alias: AttachFileCloudWidgetComponent.ALIAS_USER_FOLDER, path: undefined };\n    }\n\n    removeExistingSelection(selections: Node[]) {\n        const existingNode: Node[] = [...this.field.value || []];\n        return selections.filter(opt => !existingNode.some((node) => node.id === opt.id));\n    }\n\n    downloadContent(file: Node): void {\n        this.processCloudContentService.downloadFile(file.id);\n    }\n\n    onAttachFileClicked(nodeSelector: any) {\n        nodeSelector.nodeId = nodeSelector.id;\n        this.fileClicked(new ContentLinkModel(nodeSelector));\n    }\n\n    getWidgetIcon(): string {\n        return this.isAlfrescoAndLocal() ? 'file_upload' : 'attach_file';\n    }\n\n    onRowClicked(file?: Node) {\n        if (this.selectedNode?.id === file?.id) {\n            this.selectedNode = null;\n        } else {\n            this.selectedNode = file;\n        }\n        this.contentModelFormFileHandler(this.selectedNode);\n    }\n\n    contentModelFormFileHandler(file?: any) {\n        if (file?.id && this.isRetrieveMetadataOptionEnabled()) {\n            const values: FormValues = {};\n            this.nodesApi.getNode(file.id).then(acsNode => {\n                const metadata = acsNode?.entry?.properties;\n                if (metadata) {\n                    const keys = Object.keys(metadata);\n                    keys.forEach(key => {\n                        const sanitizedKey = key.replace(':', '_');\n                        values[sanitizedKey] = metadata[key];\n                    });\n                    this.formService.updateFormValuesRequested.next(values);\n                }\n            });\n        }\n        this.fileClicked(new UploadWidgetContentLinkModel(file, this.field.id));\n    }\n\n    isRetrieveMetadataOptionEnabled(): boolean {\n        return this.field?.params?.menuOptions && this.field.params.menuOptions[AttachFileCloudWidgetComponent.RETRIEVE_METADATA_OPTION];\n    }\n\n    isValidAlias(alias: string): boolean {\n        return alias && AttachFileCloudWidgetComponent.VALID_ALIAS.includes(alias);\n    }\n\n    ngOnDestroy() {\n        this.contentNodeSelectorPanelService.customModels = [];\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, EventEmitter, Output, ViewEncapsulation } from '@angular/core';\nimport { FormService, WidgetComponent } from '@alfresco/adf-core';\nimport { Node } from '@alfresco/js-api';\n\n/* tslint:disable:component-selector  */\n\n@Component({\n    selector: 'adf-properties-viewer-widget',\n    templateUrl: './properties-viewer.widget.html',\n    styleUrls: ['./properties-viewer.widget.scss'],\n    host: {\n        '(click)': 'event($event)',\n        '(blur)': 'event($event)',\n        '(change)': 'event($event)',\n        '(focus)': 'event($event)',\n        '(focusin)': 'event($event)',\n        '(focusout)': 'event($event)',\n        '(input)': 'event($event)',\n        '(invalid)': 'event($event)',\n        '(select)': 'event($event)'\n    },\n    encapsulation: ViewEncapsulation.None\n})\nexport class PropertiesViewerWidgetComponent extends WidgetComponent {\n\n    @Output()\n    nodeContentLoaded: EventEmitter<Node> = new EventEmitter();\n\n    constructor(formService: FormService) {\n        super(formService);\n    }\n\n    onNodeContentLoaded(node: Node) {\n        this.nodeContentLoaded.emit(node);\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, EventEmitter, Input, OnChanges, OnInit, Output, SimpleChanges, ViewEncapsulation } from '@angular/core';\nimport { NodesApiService } from '@alfresco/adf-core';\nimport { Node } from '@alfresco/js-api';\nimport { PresetConfig } from '@alfresco/adf-content-services';\n\n/* tslint:disable:component-selector  */\n\n@Component({\n    selector: 'adf-properties-viewer-wrapper',\n    templateUrl: './properties-viewer-wrapper.component.html',\n    encapsulation: ViewEncapsulation.None\n})\nexport class PropertiesViewerWrapperComponent implements OnInit, OnChanges {\n\n    node: Node;\n    loading = true;\n\n    @Input()\n    nodeId: string;\n\n    /** Toggles whether the edit button should be shown */\n    @Input()\n    editable;\n\n    /** Toggles whether to display empty values in the card view */\n    @Input()\n    displayEmpty;\n\n    /** Toggles between expanded (ie, full information) and collapsed\n     * (ie, reduced information) in the display\n     */\n    @Input()\n    expanded;\n\n    /** The multi parameter of the underlying material expansion panel, set to true to allow multi accordion to be expanded at the same time */\n    @Input()\n    multi;\n\n    /** Name or configuration of the metadata preset, which defines aspects and their properties */\n    @Input()\n    preset: string | PresetConfig;\n\n    /** Toggles whether the metadata properties should be shown */\n    @Input()\n    displayDefaultProperties;\n\n    /** (optional) shows the given aspect in the expanded  card */\n    @Input()\n    displayAspect: string = null;\n\n    /** Toggles whether or not to enable copy to clipboard action. */\n    @Input()\n    copyToClipboardAction;\n\n    /** Toggles whether or not to enable chips for multivalued properties. */\n    @Input()\n    useChipsForMultiValueProperty;\n\n    @Output()\n    nodeContentLoaded: EventEmitter<Node> = new EventEmitter();\n\n    constructor(private nodesApiService: NodesApiService) { }\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if (changes && changes['nodeId'] && changes['nodeId'].currentValue && !changes['nodeId'].isFirstChange()) {\n            this.getNode(changes['nodeId'].currentValue);\n        }\n    }\n\n    ngOnInit(): void {\n        if (this.nodeId) {\n            this.getNode(this.nodeId);\n        }\n    }\n\n    private getNode(nodeId: string) {\n        this.loading = true;\n        this.nodesApiService.getNode(nodeId).subscribe(retrievedNode => {\n            this.node = retrievedNode;\n            this.loading = false;\n            this.nodeContentLoaded.emit(retrievedNode);\n        });\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* tslint:disable:component-selector  */\n\nimport { Component, OnInit, ViewEncapsulation } from '@angular/core';\nimport { WidgetComponent, FormService, LogService, FormFieldOption } from '@alfresco/adf-core';\nimport { FormCloudService } from '../../../services/form-cloud.service';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\n@Component({\n    selector: 'radio-buttons-cloud-widget',\n    templateUrl: './radio-buttons-cloud.widget.html',\n    styleUrls: ['./radio-buttons-cloud.widget.scss'],\n    host: {\n        '(click)': 'event($event)',\n        '(blur)': 'event($event)',\n        '(change)': 'event($event)',\n        '(focus)': 'event($event)',\n        '(focusin)': 'event($event)',\n        '(focusout)': 'event($event)',\n        '(input)': 'event($event)',\n        '(invalid)': 'event($event)',\n        '(select)': 'event($event)'\n    },\n    encapsulation: ViewEncapsulation.None\n})\nexport class RadioButtonsCloudWidgetComponent extends WidgetComponent implements OnInit {\n\n    typeId = 'RadioButtonsCloudWidgetComponent';\n    protected onDestroy$ = new Subject<boolean>();\n\n    constructor(public formService: FormService,\n                private formCloudService: FormCloudService,\n                private logService: LogService) {\n        super(formService);\n    }\n\n    ngOnInit() {\n        if (this.field && this.field.restUrl) {\n            this.getValuesFromRestApi();\n        }\n    }\n\n    getValuesFromRestApi() {\n        this.formCloudService.getRestWidgetData(this.field.form.id, this.field.id)\n            .pipe(takeUntil(this.onDestroy$))\n            .subscribe((result: FormFieldOption[]) => {\n                this.field.options = result;\n                this.field.updateForm();\n            }, (err) => this.handleError(err));\n    }\n\n    onOptionClick(optionSelected: any) {\n        this.field.value = optionSelected;\n        this.fieldChanged.emit(this.field);\n    }\n\n    handleError(error: any) {\n        this.logService.error(error);\n    }\n\n    isChecked(option: FormFieldOption): boolean {\n        if (this.field.value && typeof this.field.value === 'object') {\n            let id = 'id';\n            let name = 'name';\n            if (this.field.restUrl) {\n                id = this.field.restIdProperty ?? 'id';\n                name = this.field.restLabelProperty ?? 'name';\n            }\n            return this.field.value[id] === option.id || this.field.value[name] === option.name;\n        }\n        return this.field.value === option.id;\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* tslint:disable:component-selector  */\n\nimport { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { LocalizedDatePipe, ThumbnailService } from '@alfresco/adf-core';\nimport { Node } from '@alfresco/js-api';\n\n@Component({\n    selector: 'adf-cloud-file-properties-table',\n    templateUrl: './file-properties-table-cloud.component.html',\n    styleUrls: ['./file-properties-table-cloud.component.scss']\n})\nexport class FilePropertiesTableCloudComponent {\n\n    static RETRIEVE_METADATA_OPTION = 'retrieveMetadata';\n\n    @Input()\n    uploadedFiles;\n\n    @Input()\n    hasFile: boolean;\n\n    @Input()\n    selectedNode: Node;\n\n    @Input()\n    field;\n\n    @Input()\n    displayedColumns;\n\n    @Input()\n    mimeTypeIcon;\n\n    @Output()\n    rowClick: EventEmitter<Node> = new EventEmitter<Node>();\n\n    @Output()\n    attachFileClick: EventEmitter<any> = new EventEmitter<any>();\n\n    @Output()\n    downloadFile: EventEmitter<Node> = new EventEmitter<Node>();\n\n    @Output()\n    contentModelFileHandler: EventEmitter<any> = new EventEmitter<Node>();\n\n    @Output()\n    removeAttachFile: EventEmitter<any> = new EventEmitter<any>();\n\n    constructor(private localizedDatePipe: LocalizedDatePipe, private thumbnailService: ThumbnailService) {}\n\n    onRowClicked(file?: Node) {\n        this.rowClick.emit(file);\n    }\n\n    onAttachFileClicked(nodeSelector: any) {\n        this.attachFileClick.emit(nodeSelector);\n    }\n\n    downloadContent(file: Node) {\n        this.downloadFile.emit(file);\n    }\n\n    contentModelFormFileHandler(file?: any) {\n        this.contentModelFileHandler.emit(file);\n    }\n\n    onRemoveAttachFile(file: any) {\n        this.removeAttachFile.emit(file);\n    }\n\n    getIcon(mimeType: string): string {\n        return this.thumbnailService.getMimeTypeIcon(mimeType);\n    }\n\n    getColumnValue(file, displayableCMProperty): string {\n        if (!file.properties[displayableCMProperty.prefixedName]) {\n            const fieldProperty = this.field.params.displayableCMProperties?.find(property => property.name === displayableCMProperty.name);\n            return fieldProperty.defaultValue ? this.checkDateTypeAndTransform(displayableCMProperty.dataType, fieldProperty.defaultValue) : '--' ;\n        }\n        return file.properties[displayableCMProperty.prefixedName] ?\n            this.checkDateTypeAndTransform(displayableCMProperty.dataType, file.properties[displayableCMProperty.prefixedName]) :\n            '--' ;\n    }\n\n    checkDateTypeAndTransform(dataType, value): string {\n        if (dataType === 'd:date') {\n            return this.localizedDatePipe.transform(value);\n        } else if (dataType === 'd:datetime') {\n            return this.localizedDatePipe.transform(value, 'medium');\n        }\n        return value;\n    }\n\n    displayMenuOption(option: string): boolean {\n        return this.field?.params?.menuOptions ? this.field.params.menuOptions[option] : option !== FilePropertiesTableCloudComponent.RETRIEVE_METADATA_OPTION;\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { CoreModule } from '@alfresco/adf-core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MaterialModule } from '../material.module';\nimport { FormCloudComponent } from './components/form-cloud.component';\nimport { FormDefinitionSelectorCloudComponent } from './components/form-definition-selector-cloud.component';\nimport { FormCustomOutcomesComponent } from './components/form-cloud-custom-outcomes.component';\nimport { ContentMetadataModule, ContentNodeSelectorModule } from '@alfresco/adf-content-services';\n\nimport { DateCloudWidgetComponent } from './components/widgets/date/date-cloud.widget';\nimport { DropdownCloudWidgetComponent } from './components/widgets/dropdown/dropdown-cloud.widget';\nimport { GroupCloudWidgetComponent } from './components/widgets/group/group-cloud.widget';\nimport { PeopleCloudWidgetComponent } from './components/widgets/people/people-cloud.widget';\nimport { AttachFileCloudWidgetComponent } from './components/widgets/attach-file/attach-file-cloud-widget.component';\n\nimport { UploadCloudWidgetComponent } from './components/widgets/attach-file/upload-cloud.widget';\nimport { PeopleCloudModule } from '../people/people-cloud.module';\nimport { GroupCloudModule } from '../group/group-cloud.module';\nimport { PropertiesViewerWidgetComponent } from './components/widgets/properties-viewer/properties-viewer.widget';\nimport { PropertiesViewerWrapperComponent } from './components/widgets/properties-viewer/properties-viewer-wrapper/properties-viewer-wrapper.component';\nimport { RadioButtonsCloudWidgetComponent } from './components/widgets/radio-buttons/radio-buttons-cloud.widget';\nimport { FilePropertiesTableCloudComponent } from './components/widgets/attach-file/file-properties-table-cloud.component';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FlexLayoutModule,\n        MaterialModule,\n        FormsModule,\n        ReactiveFormsModule,\n        CoreModule,\n        ContentNodeSelectorModule,\n        PeopleCloudModule,\n        GroupCloudModule,\n        ContentMetadataModule\n    ],\n    declarations: [\n        FormCloudComponent,\n        UploadCloudWidgetComponent,\n        FormDefinitionSelectorCloudComponent,\n        FormCustomOutcomesComponent,\n        DropdownCloudWidgetComponent,\n        RadioButtonsCloudWidgetComponent,\n        AttachFileCloudWidgetComponent,\n        DateCloudWidgetComponent,\n        PeopleCloudWidgetComponent,\n        GroupCloudWidgetComponent,\n        PropertiesViewerWrapperComponent,\n        PropertiesViewerWidgetComponent,\n        FilePropertiesTableCloudComponent\n    ],\n    exports: [\n        FormCloudComponent,\n        UploadCloudWidgetComponent,\n        FormDefinitionSelectorCloudComponent,\n        FormCustomOutcomesComponent,\n        DropdownCloudWidgetComponent,\n        RadioButtonsCloudWidgetComponent,\n        AttachFileCloudWidgetComponent,\n        DateCloudWidgetComponent,\n        PeopleCloudWidgetComponent,\n        GroupCloudWidgetComponent,\n        PropertiesViewerWidgetComponent\n    ]\n})\nexport class FormCloudModule {\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { MaterialModule } from '../../material.module';\nimport { CoreModule } from '@alfresco/adf-core';\nimport { StartTaskCloudComponent } from './components/start-task-cloud.component';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { GroupCloudModule } from '../../group/group-cloud.module';\nimport { FormCloudModule } from '../../form/form-cloud.module';\nimport { PeopleCloudModule } from '../../people/people-cloud.module';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FlexLayoutModule,\n        MaterialModule,\n        FormsModule,\n        ReactiveFormsModule,\n        GroupCloudModule,\n        CoreModule,\n        FormCloudModule,\n        PeopleCloudModule\n    ],\n    declarations: [StartTaskCloudComponent],\n    exports: [\n        StartTaskCloudComponent\n    ]\n})\nexport class StartTaskCloudModule {\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, Input, EventEmitter, Output, OnDestroy, OnChanges, OnInit, ViewEncapsulation } from '@angular/core';\nimport { takeUntil, concatMap, catchError, finalize } from 'rxjs/operators';\nimport { Subject, of, forkJoin } from 'rxjs';\nimport {\n    CardViewDateItemModel,\n    CardViewItem,\n    CardViewTextItemModel,\n    CardViewBaseItemModel,\n    CardViewArrayItemModel,\n    TranslationService,\n    AppConfigService,\n    UpdateNotification,\n    CardViewUpdateService,\n    CardViewDatetimeItemModel,\n    CardViewArrayItem,\n    CardViewSelectItemModel\n} from '@alfresco/adf-core';\nimport { TaskDetailsCloudModel } from '../../start-task/models/task-details-cloud.model';\nimport { TaskCloudService } from '../../services/task-cloud.service';\n\n@Component({\n    selector: 'adf-cloud-task-header',\n    templateUrl: './task-header-cloud.component.html',\n    styleUrls: ['./task-header-cloud.component.scss'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class TaskHeaderCloudComponent implements OnInit, OnDestroy, OnChanges {\n\n    /** (Required) The name of the application. */\n    @Input()\n    appName: string = '';\n\n    /** (Required) The id of the task. */\n    @Input()\n    taskId: string;\n\n    /** Show/Hide the task title */\n    @Input()\n    showTitle: boolean = true;\n\n    /** Emitted when the task is claimed. */\n    @Output()\n    claim: EventEmitter<any> = new EventEmitter<any>();\n\n    /** Emitted when the task is unclaimed (ie, requeued). */\n    @Output()\n    unclaim: EventEmitter<any> = new EventEmitter<any>();\n\n    /** Emitted when the given task has errors. */\n    @Output()\n    error: EventEmitter<any> = new EventEmitter<any>();\n\n    taskDetails: TaskDetailsCloudModel = {};\n    candidateUsers: CardViewArrayItem[] = [];\n    candidateGroups: CardViewArrayItem[] = [];\n    properties: CardViewItem[];\n    inEdit: boolean = false;\n    parentTaskName: string;\n    dateFormat: string;\n    dateTimeFormat: string;\n    dateLocale: string;\n    displayDateClearAction = false;\n    isLoading = true;\n\n    private onDestroy$ = new Subject<boolean>();\n\n    constructor(\n        private taskCloudService: TaskCloudService,\n        private translationService: TranslationService,\n        private appConfig: AppConfigService,\n        private cardViewUpdateService: CardViewUpdateService\n    ) {\n        this.dateFormat = this.appConfig.get('dateValues.defaultDateFormat');\n        this.dateLocale = this.appConfig.get('dateValues.defaultDateLocale');\n        this.dateTimeFormat = this.appConfig.get('dateValue.defaultDateTimeFormat');\n    }\n\n    ngOnInit() {\n        this.taskCloudService.dataChangesDetected$\n            .pipe(takeUntil(this.onDestroy$))\n            .subscribe(() => {\n            this.loadTaskDetailsById(this.appName, this.taskId);\n        });\n\n        this.cardViewUpdateService.itemUpdated$\n            .pipe(takeUntil(this.onDestroy$))\n            .subscribe(this.updateTaskDetails.bind(this)\n        );\n    }\n\n    ngOnChanges() {\n        this.taskDetails = {};\n        if ((this.appName || this.appName === '') && this.taskId) {\n            this.loadTaskDetailsById(this.appName, this.taskId);\n        } else {\n            this.error.emit('App Name and Task Id are mandatory');\n        }\n    }\n\n    loadTaskDetailsById(appName: string, taskId: string) {\n        this.isLoading = true;\n        this.taskCloudService.getTaskById(appName, taskId).pipe(\n            concatMap((task) =>\n                forkJoin(\n                    of(task),\n                    this.taskCloudService.getCandidateUsers(this.appName, this.taskId),\n                    this.taskCloudService.getCandidateGroups(this.appName, this.taskId)\n                )\n            ),\n            finalize(() => (this.isLoading = false))\n        ).subscribe(([taskDetails, candidateUsers, candidateGroups]) => {\n                this.taskDetails = taskDetails;\n                this.candidateGroups = candidateGroups.map((user) => <CardViewArrayItem> { icon: 'group', value: user });\n                this.candidateUsers = candidateUsers.map((group) => <CardViewArrayItem> { icon: 'person', value: group });\n                if (this.taskDetails.parentTaskId) {\n                    this.loadParentName(`${this.taskDetails.parentTaskId}`);\n                } else {\n                    this.refreshData();\n                }\n            },\n            (err) => {\n                this.error.emit(err);\n            });\n    }\n\n    private initDefaultProperties() {\n        return [\n            new CardViewTextItemModel(\n                {\n                    label: 'ADF_CLOUD_TASK_HEADER.PROPERTIES.ASSIGNEE',\n                    value: this.taskDetails.assignee,\n                    key: 'assignee',\n                    clickable: this.isAssigneePropertyClickable(),\n                    default: this.translationService.instant('ADF_CLOUD_TASK_HEADER.PROPERTIES.ASSIGNEE_DEFAULT'),\n                    icon: 'create'\n                }\n            ),\n            new CardViewTextItemModel(\n                {\n                    label: 'ADF_CLOUD_TASK_HEADER.PROPERTIES.STATUS',\n                    value: this.taskDetails.status,\n                    key: 'status'\n                }\n            ),\n            new CardViewSelectItemModel(\n                {\n                    label: 'ADF_CLOUD_TASK_HEADER.PROPERTIES.PRIORITY',\n                    value: this.taskDetails.priority.toString(),\n                    key: 'priority',\n                    editable: true,\n                    displayNoneOption: false,\n                    options$: of(this.taskCloudService.priorities)\n                }\n            ),\n            new CardViewDatetimeItemModel(\n                {\n                    label: 'ADF_CLOUD_TASK_HEADER.PROPERTIES.DUE_DATE',\n                    value: this.taskDetails.dueDate,\n                    key: 'dueDate',\n                    default: this.translationService.instant('ADF_CLOUD_TASK_HEADER.PROPERTIES.DUE_DATE_DEFAULT'),\n                    editable: true,\n                    format: this.dateTimeFormat,\n                    locale: this.dateLocale\n                }\n            ),\n            new CardViewTextItemModel(\n                {\n                    label: 'ADF_CLOUD_TASK_HEADER.PROPERTIES.CATEGORY',\n                    value: this.taskDetails.category,\n                    key: 'category',\n                    default: this.translationService.instant('ADF_CLOUD_TASK_HEADER.PROPERTIES.CATEGORY_DEFAULT')\n                }\n            ),\n            new CardViewDateItemModel(\n                {\n                    label: 'ADF_CLOUD_TASK_HEADER.PROPERTIES.CREATED',\n                    value: this.taskDetails.createdDate,\n                    key: 'created',\n                    format: this.dateFormat,\n                    locale: this.dateLocale\n                }\n            ),\n            new CardViewTextItemModel(\n                {\n                    label: 'ADF_CLOUD_TASK_HEADER.PROPERTIES.PARENT_NAME',\n                    value: this.parentTaskName,\n                    default: this.translationService.instant('ADF_CLOUD_TASK_HEADER.PROPERTIES.PARENT_NAME_DEFAULT'),\n                    key: 'parentName',\n                    clickable: true\n                }\n            ),\n            new CardViewTextItemModel(\n                {\n                    label: 'ADF_CLOUD_TASK_HEADER.PROPERTIES.PARENT_TASK_ID',\n                    value: this.taskDetails.parentTaskId,\n                    key: 'parentTaskId',\n                    clickable: true\n                }\n            ),\n            new CardViewDateItemModel(\n                {\n                    label: 'ADF_CLOUD_TASK_HEADER.PROPERTIES.END_DATE',\n                    value: this.taskDetails.completedDate,\n                    key: 'endDate',\n                    format: this.dateFormat,\n                    locale: this.dateLocale\n                }\n            ),\n            new CardViewTextItemModel(\n                {\n                    label: 'ADF_CLOUD_TASK_HEADER.PROPERTIES.ID',\n                    value: this.taskDetails.id,\n                    key: 'id'\n                }\n            ),\n            new CardViewTextItemModel(\n                {\n                    label: 'ADF_CLOUD_TASK_HEADER.PROPERTIES.DESCRIPTION',\n                    value: this.taskDetails.description,\n                    key: 'description',\n                    default: this.translationService.instant('ADF_CLOUD_TASK_HEADER.PROPERTIES.DESCRIPTION_DEFAULT'),\n                    multiline: true,\n                    editable: true\n                }\n            ),\n            new CardViewArrayItemModel(\n                {\n                    label: 'ADF_CLOUD_TASK_HEADER.PROPERTIES.CANDIDATE_USERS',\n                    value: of(this.candidateUsers),\n                    key: 'candidateUsers',\n                    icon: 'edit',\n                    clickable: false,\n                    default: this.translationService.instant('ADF_CLOUD_TASK_HEADER.PROPERTIES.CANDIDATE_USERS_DEFAULT'),\n                    noOfItemsToDisplay: 2\n                }\n            ),\n            new CardViewArrayItemModel(\n                {\n                    label: 'ADF_CLOUD_TASK_HEADER.PROPERTIES.CANDIDATE_GROUPS',\n                    value: of(this.candidateGroups),\n                    key: 'candidateGroups',\n                    icon: 'edit',\n                    clickable: false,\n                    default: this.translationService.instant('ADF_CLOUD_TASK_HEADER.PROPERTIES.CANDIDATE_GROUPS_DEFAULT'),\n                    noOfItemsToDisplay: 2\n                }\n            )\n        ];\n    }\n\n    /**\n     * Refresh the card data\n     */\n    refreshData() {\n        if (this.taskDetails) {\n            const defaultProperties = this.initDefaultProperties();\n            const filteredProperties: string[] = this.appConfig.get('adf-cloud-task-header.presets.properties');\n            this.properties = defaultProperties.filter((cardItem) => this.isValidSelection(filteredProperties, cardItem));\n        }\n    }\n\n    /**\n     * Save a task detail and update it after a successful response\n     *\n     * @param updateNotification\n     */\n    private updateTaskDetails(updateNotification: UpdateNotification) {\n        this.taskCloudService.updateTask(this.appName, this.taskId, updateNotification.changed)\n            .pipe(catchError(() => {\n                this.cardViewUpdateService.updateElement(updateNotification.target);\n                return of(null);\n            }))\n            .subscribe((taskDetails) => {\n                    if (taskDetails) {\n                        this.taskDetails = taskDetails;\n                    }\n                });\n    }\n\n    private loadParentName(taskId: string) {\n        this.taskCloudService.getTaskById(this.appName, taskId)\n            .subscribe(\n                (taskDetails) => {\n                    this.parentTaskName = taskDetails.name;\n                    this.refreshData();\n                }\n            );\n    }\n\n    isCompleted(): boolean {\n        return this.taskDetails && this.taskDetails.status === 'COMPLETED';\n    }\n\n    hasAssignee(): boolean {\n        return !!this.taskDetails.assignee ? true : false;\n    }\n\n    isTaskValid(): boolean {\n        return (this.appName || this.appName === '') && !!this.taskId;\n    }\n\n    isTaskAssigned(): boolean {\n        return this.taskDetails.assignee !== undefined;\n    }\n\n    isTaskEditable(): boolean {\n        return this.taskCloudService.isTaskEditable(this.taskDetails);\n    }\n\n    /**\n     * as per [ACA-3960] it required an empty array argument for now\n     * Empty array will be replaced with candidateGroups in feature\n     */\n    isAssigneePropertyClickable(): boolean {\n        return this.taskCloudService.isAssigneePropertyClickable(this.taskDetails, this.candidateUsers, []);\n    }\n\n    private isValidSelection(filteredProperties: string[], cardItem: CardViewBaseItemModel): boolean {\n        return filteredProperties ? filteredProperties.indexOf(cardItem.key) >= 0 : true;\n    }\n\n    ngOnDestroy() {\n        this.onDestroy$.next(true);\n        this.onDestroy$.complete();\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MaterialModule } from '../../material.module';\nimport { CoreModule } from '@alfresco/adf-core';\nimport { TaskHeaderCloudComponent } from './components/task-header-cloud.component';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        MaterialModule,\n        CoreModule.forChild()\n    ],\n    declarations: [\n        TaskHeaderCloudComponent\n    ],\n    exports: [\n        TaskHeaderCloudComponent\n    ]\n})\nexport class TaskHeaderCloudModule { }\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Directive, Input, HostListener, Output, EventEmitter, OnInit } from '@angular/core';\nimport { TaskCloudService } from '../services/task-cloud.service';\n\n@Directive({\n    // tslint:disable-next-line: directive-selector\n    selector: '[adf-cloud-complete-task]'\n})\nexport class CompleteTaskDirective implements OnInit {\n\n    /** (Required) The id of the task. */\n    @Input()\n    taskId: string;\n\n    /** (Required) The name of the application. */\n    @Input()\n    appName: string = '';\n\n    /** Emitted when the task is completed. */\n    @Output()\n    success: EventEmitter<any> = new EventEmitter<any>();\n\n    /** Emitted when the task cannot be completed. */\n    @Output()\n    error: EventEmitter<any> = new EventEmitter<any>();\n\n    invalidParams: string[] = [];\n\n    constructor(private taskListService: TaskCloudService) {}\n\n    ngOnInit() {\n        this.validateInputs();\n    }\n\n    validateInputs() {\n\n        if (!this.isTaskValid()) {\n            this.invalidParams.push('taskId');\n        }\n        if (!this.isAppValid()) {\n            this.invalidParams.push('appName');\n        }\n        if (this.invalidParams.length) {\n            throw new Error(`Attribute ${this.invalidParams.join(', ')} is required`);\n        }\n    }\n\n    isTaskValid(): boolean {\n        return this.taskId && this.taskId.length > 0;\n    }\n\n    isAppValid(): boolean {\n        return !!this.appName || this.appName === '';\n    }\n\n    @HostListener('click')\n    async onClick() {\n        try {\n            const result = await this.taskListService.completeTask(this.appName, this.taskId).toPromise();\n            if (result) {\n                this.success.emit(result);\n            }\n        } catch (error) {\n            this.error.emit(error);\n        }\n\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Directive, Input, HostListener, Output, EventEmitter, OnInit } from '@angular/core';\nimport { IdentityUserService } from '@alfresco/adf-core';\nimport { TaskCloudService } from '../services/task-cloud.service';\n\n@Directive({\n    // tslint:disable-next-line: directive-selector\n    selector: '[adf-cloud-claim-task]'\n})\nexport class ClaimTaskCloudDirective implements OnInit {\n\n    /** (Required) The id of the task. */\n    @Input()\n    taskId: string;\n\n    /** (Required) The name of the application. */\n    @Input()\n    appName: string = '';\n\n    /** Emitted when the task is completed. */\n    @Output()\n    success: EventEmitter<any> = new EventEmitter<any>();\n\n    /** Emitted when the task cannot be completed. */\n    @Output()\n    error: EventEmitter<any> = new EventEmitter<any>();\n\n    invalidParams: string[] = [];\n\n    constructor(\n        private taskListService: TaskCloudService,\n        private identityUserService: IdentityUserService) { }\n\n    ngOnInit() {\n        this.validateInputs();\n    }\n\n    validateInputs() {\n\n        if (!this.isTaskValid()) {\n            this.invalidParams.push('taskId');\n        }\n        if (!this.isAppValid()) {\n            this.invalidParams.push('appName');\n        }\n        if (this.invalidParams.length) {\n            throw new Error(`Attribute ${this.invalidParams.join(', ')} is required`);\n        }\n    }\n\n    isTaskValid(): boolean {\n        return this.taskId && this.taskId.length > 0;\n    }\n\n    isAppValid(): boolean {\n        return !!this.appName || this.appName === '';\n    }\n\n    @HostListener('click')\n    async onClick() {\n        try {\n            await this.claimTask();\n        } catch (error) {\n            this.error.emit(error);\n        }\n\n    }\n\n    private async claimTask() {\n        const currentUser: string = this.identityUserService.getCurrentUserInfo().username;\n        try {\n            const result = await this.taskListService.claimTask(this.appName, this.taskId, currentUser).toPromise();\n            if (result) {\n                this.success.emit(result);\n            }\n        } catch (error) {\n            this.error.emit(error);\n        }\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Directive, Input, HostListener, Output, EventEmitter, OnInit } from '@angular/core';\nimport { TaskCloudService } from '../services/task-cloud.service';\n\n@Directive({\n    // tslint:disable-next-line: directive-selector\n    selector: '[adf-cloud-unclaim-task]'\n})\nexport class UnClaimTaskCloudDirective implements OnInit {\n\n    /** (Required) The id of the task. */\n    @Input()\n    taskId: string;\n\n    /** (Required) The name of the application. */\n    @Input()\n    appName: string = '';\n\n    /** Emitted when the task is completed. */\n    @Output()\n    success: EventEmitter<any> = new EventEmitter<any>();\n\n    /** Emitted when the task cannot be completed. */\n    @Output()\n    error: EventEmitter<any> = new EventEmitter<any>();\n\n    invalidParams: string[] = [];\n\n    constructor(\n        private taskListService: TaskCloudService) { }\n\n    ngOnInit() {\n        this.validateInputs();\n    }\n\n    validateInputs() {\n\n        if (!this.isTaskValid()) {\n            this.invalidParams.push('taskId');\n        }\n        if (!this.isAppValid()) {\n            this.invalidParams.push('appName');\n        }\n        if (this.invalidParams.length) {\n            throw new Error(`Attribute ${this.invalidParams.join(', ')} is required`);\n        }\n    }\n\n    isTaskValid(): boolean {\n        return this.taskId && this.taskId.length > 0;\n    }\n\n    isAppValid(): boolean {\n        return !!this.appName || this.appName === '';\n    }\n\n    @HostListener('click')\n    async onClick() {\n        try {\n            await this.taskListService.unclaimTask(this.appName, this.taskId).toPromise();\n            this.success.emit(this.taskId);\n        } catch (error) {\n            this.error.emit(error);\n        }\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NgModule } from '@angular/core';\nimport { CompleteTaskDirective } from './complete-task.directive';\nimport { ClaimTaskCloudDirective } from './claim-task-cloud.directive';\nimport { UnClaimTaskCloudDirective } from './unclaim-task-cloud.directive';\n\n@NgModule({\n    declarations: [\n        CompleteTaskDirective,\n        ClaimTaskCloudDirective,\n        UnClaimTaskCloudDirective\n    ],\n    exports: [\n        CompleteTaskDirective,\n        ClaimTaskCloudDirective,\n        UnClaimTaskCloudDirective\n    ]\n})\nexport class TaskDirectiveModule { }\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n    Component, EventEmitter, Input, OnChanges,\n    Output, SimpleChanges, OnInit, ViewEncapsulation\n} from '@angular/core';\nimport { TaskDetailsCloudModel } from '../../start-task/models/task-details-cloud.model';\nimport { TaskCloudService } from '../../services/task-cloud.service';\nimport { FormRenderingService, FormModel, ContentLinkModel } from '@alfresco/adf-core';\nimport { AttachFileCloudWidgetComponent } from '../../../form/components/widgets/attach-file/attach-file-cloud-widget.component';\nimport { DropdownCloudWidgetComponent } from '../../../form/components/widgets/dropdown/dropdown-cloud.widget';\nimport { DateCloudWidgetComponent } from '../../../form/components/widgets/date/date-cloud.widget';\n\n@Component({\n    selector: 'adf-cloud-task-form',\n    templateUrl: './task-form-cloud.component.html',\n    styleUrls: ['./task-form-cloud.component.scss'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class TaskFormCloudComponent implements OnInit, OnChanges {\n\n    /** App id to fetch corresponding form and values. */\n    @Input()\n    appName: string = '';\n\n    /** Task id to fetch corresponding form and values. */\n    @Input()\n    taskId: string;\n\n    /** Toggle rendering of the form title. */\n    @Input()\n    showTitle: boolean = true;\n\n    /** Toggle rendering of the `Refresh` button. */\n    @Input()\n    showRefreshButton = false;\n\n    /** Toggle rendering of the `Validation` icon. */\n    @Input()\n    showValidationIcon = true;\n\n    /** Toggle rendering of the `Cancel` button. */\n    @Input()\n    showCancelButton = true;\n\n    /** Toggle rendering of the `Complete` button. */\n    @Input()\n    showCompleteButton = true;\n\n    /** Toggle readonly state of the task. */\n    @Input()\n    readOnly = false;\n\n    /** Emitted when the form is saved. */\n    @Output()\n    formSaved = new EventEmitter<FormModel>();\n\n    /** Emitted when the form is submitted with the `Complete` outcome. */\n    @Output()\n    formCompleted = new EventEmitter<FormModel>();\n\n    /** Emitted when the task is completed. */\n    @Output()\n    taskCompleted = new EventEmitter<string>();\n\n    /** Emitted when the task is claimed. */\n    @Output()\n    taskClaimed = new EventEmitter<string>();\n\n    /** Emitted when the task is unclaimed. */\n    @Output()\n    taskUnclaimed = new EventEmitter<string>();\n\n    /** Emitted when the cancel button is clicked. */\n    @Output()\n    cancelClick = new EventEmitter<string>();\n\n    /** Emitted when any error occurs. */\n    @Output()\n    error = new EventEmitter<any>();\n\n    /** Emitted when form content is clicked. */\n    @Output()\n    formContentClicked: EventEmitter<ContentLinkModel> = new EventEmitter();\n\n    taskDetails: TaskDetailsCloudModel;\n\n    candidateUsers: string[] = [];\n    candidateGroups: string[] = [];\n\n    loading: boolean = false;\n\n    constructor(\n        private taskCloudService: TaskCloudService,\n        private formRenderingService: FormRenderingService) {\n        this.formRenderingService.setComponentTypeResolver('upload', () => AttachFileCloudWidgetComponent, true);\n        this.formRenderingService.setComponentTypeResolver('dropdown', () => DropdownCloudWidgetComponent, true);\n        this.formRenderingService.setComponentTypeResolver('date', () => DateCloudWidgetComponent, true);\n    }\n\n    ngOnInit() {\n        if (this.appName === '' && this.taskId) {\n            this.loadTask();\n        }\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        const appName = changes['appName'];\n        if (appName && (appName.currentValue !== appName.previousValue) && this.taskId) {\n            this.loadTask();\n            return;\n        }\n\n        const taskId = changes['taskId'];\n        if (taskId && taskId.currentValue && this.appName) {\n            this.loadTask();\n            return;\n        }\n    }\n\n    loadTask() {\n        this.loading = true;\n\n        this.taskCloudService\n            .getTaskById(this.appName, this.taskId)\n            .subscribe(details => {\n                this.taskDetails = details;\n                this.loading = false;\n            });\n\n        this.taskCloudService\n            .getCandidateUsers(this.appName, this.taskId)\n            .subscribe(users => this.candidateUsers = users || []);\n\n        this.taskCloudService\n            .getCandidateGroups(this.appName, this.taskId)\n            .subscribe(groups => this.candidateGroups = groups || []);\n    }\n\n    hasForm(): boolean {\n        return this.taskDetails && !!this.taskDetails.formKey;\n    }\n\n    canCompleteTask(): boolean {\n        return this.showCompleteButton && !this.readOnly && this.taskCloudService.canCompleteTask(this.taskDetails);\n    }\n\n    canClaimTask(): boolean {\n        return !this.readOnly && this.taskCloudService.canClaimTask(this.taskDetails);\n    }\n\n    hasCandidateUsers(): boolean {\n        return this.candidateUsers.length !== 0;\n    }\n\n    hasCandidateGroups(): boolean {\n        return this.candidateGroups.length !== 0;\n    }\n\n    hasCandidateUsersOrGroups(): boolean {\n        let hasCandidateUsersOrGroups = false;\n\n        if (this.taskDetails?.status === 'ASSIGNED') {\n            hasCandidateUsersOrGroups = this.hasCandidateUsers() || this.hasCandidateGroups();\n        }\n        return hasCandidateUsersOrGroups;\n    }\n\n    canUnclaimTask(): boolean {\n        return !this.readOnly && this.taskCloudService.canUnclaimTask(this.taskDetails);\n    }\n\n    isReadOnly(): boolean {\n        return this.readOnly || !this.taskCloudService.canCompleteTask(this.taskDetails);\n    }\n\n    onCompleteTask() {\n        this.loadTask();\n        this.taskCompleted.emit(this.taskId);\n    }\n\n    onClaimTask() {\n        this.loadTask();\n        this.taskClaimed.emit(this.taskId);\n    }\n\n    onUnclaimTask() {\n        this.loadTask();\n        this.taskUnclaimed.emit(this.taskId);\n    }\n\n    onCancelClick() {\n        this.cancelClick.emit(this.taskId);\n    }\n\n    onFormSaved(form: FormModel) {\n        this.formSaved.emit(form);\n    }\n\n    onFormCompleted(form: FormModel) {\n        this.formCompleted.emit(form);\n        this.taskCompleted.emit(this.taskId);\n    }\n\n    onError(data: any) {\n        this.error.emit(data);\n    }\n\n    onFormContentClicked(content: ContentLinkModel) {\n        this.formContentClicked.emit(content);\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MaterialModule } from '../../material.module';\nimport { FormCloudModule } from '../../form/form-cloud.module';\nimport { TaskDirectiveModule } from '../directives/task-directive.module';\n\nimport { TaskFormCloudComponent } from './components/task-form-cloud.component';\nimport { CoreModule } from '@alfresco/adf-core';\nimport { FlexLayoutModule } from '@angular/flex-layout';\n\n@NgModule({\n    imports: [\n        CoreModule,\n        CommonModule,\n        MaterialModule,\n        FormCloudModule,\n        TaskDirectiveModule,\n        FlexLayoutModule\n    ],\n    declarations: [\n        TaskFormCloudComponent\n    ],\n    exports: [\n        TaskFormCloudComponent\n    ]\n})\nexport class TaskFormModule { }\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NgModule } from '@angular/core';\nimport { TaskListCloudModule } from './task-list/task-list-cloud.module';\nimport { TaskFiltersCloudModule } from './task-filters/task-filters-cloud.module';\nimport { StartTaskCloudModule } from './start-task/start-task-cloud.module';\nimport { TaskHeaderCloudModule } from './task-header/task-header-cloud.module';\nimport { TaskDirectiveModule } from './directives/task-directive.module';\nimport { TaskFormModule } from './task-form/task-form.module';\n\n@NgModule({\n    imports: [\n        TaskListCloudModule,\n        TaskFiltersCloudModule,\n        StartTaskCloudModule,\n        TaskHeaderCloudModule,\n        TaskDirectiveModule,\n        TaskFormModule\n    ],\n    exports: [\n        TaskListCloudModule,\n        TaskFiltersCloudModule,\n        StartTaskCloudModule,\n        TaskHeaderCloudModule,\n        TaskDirectiveModule,\n        TaskFormModule\n    ]\n})\nexport class TaskCloudModule { }\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { DateCloudFilterType } from '../../../models/date-cloud-filter.model';\nimport { DateRangeFilterService } from '../../../common/date-range-filter/date-range-filter.service';\nimport { ComponentSelectionMode } from '../../../types';\n\nexport class ProcessFilterCloudModel {\n\n    private dateRangeFilterService = new DateRangeFilterService();\n\n    id: string;\n    name: string;\n    key: string;\n    icon: string;\n    index: number;\n    appName: string;\n    appVersion?: number | number[];\n    processName: string;\n    processInstanceId: string;\n    initiator: string;\n    status: string;\n    sort: string;\n    order: string;\n    processDefinitionId: string;\n    processDefinitionName?: string;\n    processDefinitionKey: string;\n    lastModified: Date;\n    lastModifiedTo: Date;\n    lastModifiedFrom: Date;\n    startedDate: Date;\n    completedDateType: DateCloudFilterType;\n    startedDateType: DateCloudFilterType;\n    suspendedDateType: DateCloudFilterType;\n    completedDate: Date;\n\n    private _completedFrom: string;\n    private _completedTo: string;\n    private _startFrom: string;\n    private _startTo: string;\n    private _suspendedFrom: string;\n    private _suspendedTo: string;\n\n    constructor(obj?: any) {\n        if (obj) {\n            this.id = obj.id || Math.random().toString(36).substring(2, 9);\n            this.name = obj.name || null;\n            this.key = obj.key || null;\n            this.icon = obj.icon || null;\n            this.index = obj.index || null;\n            this.appName = obj.appName || obj.appName === '' ? obj.appName : null;\n            this.appVersion = obj.appVersion || null;\n\n            if (obj.appVersionMultiple && Array.isArray(obj.appVersionMultiple)) {\n                this.appVersion = obj.appVersionMultiple;\n            }\n\n            this.processInstanceId = obj.processInstanceId || null;\n            this.processName = obj.processName || null;\n            this.initiator = obj.initiator || null;\n            this.status = obj.status || null;\n            this.sort = obj.sort || null;\n            this.order = obj.order || null;\n            this.processDefinitionId = obj.processDefinitionId || null;\n            this.processDefinitionName = obj.processDefinitionName || null;\n            this.processDefinitionKey = obj.processDefinitionKey || null;\n            this.lastModified = obj.lastModified || null;\n            this.lastModifiedTo = obj.lastModifiedTo || null;\n            this.lastModifiedFrom = obj.lastModifiedFrom || null;\n            this.startedDate = obj.startedDate || null;\n            this.startFrom = obj._startFrom || null;\n            this.startTo = obj._startTo || null;\n            this.completedDateType = obj.completedDateType || null;\n            this.startedDateType = obj.startedDateType || null;\n            this.suspendedDateType = obj.suspendedDateType || null;\n            this.completedFrom = obj._completedFrom || null;\n            this.completedTo = obj._completedTo || null;\n            this.completedDate = obj.completedDate || null;\n            this._suspendedFrom = obj._suspendedFrom || null;\n            this._suspendedTo = obj._suspendedTo || null;\n        }\n    }\n\n    set completedFrom(completedFrom: string) {\n        this._completedFrom = completedFrom;\n    }\n\n    set completedTo(completedTo: string) {\n        this._completedTo = completedTo;\n    }\n\n    get completedFrom() {\n        if (this.isDateRangeType(this.completedDateType)) {\n            return this._completedFrom;\n        }\n        return this.getStartDate(this.completedDateType);\n    }\n\n    get completedTo() {\n        if (this.isDateRangeType(this.completedDateType)) {\n            return this._completedTo;\n        }\n        return this.getEndDate(this.completedDateType);\n    }\n\n    set startFrom(startFrom: string) {\n        this._startFrom = startFrom;\n    }\n\n    set startTo(startTo: string) {\n        this._startTo = startTo;\n    }\n\n    get startFrom() {\n        if (this.isDateRangeType(this.startedDateType)) {\n            return this._startFrom;\n        }\n        return this.getStartDate(this.startedDateType);\n    }\n\n    get startTo() {\n        if (this.isDateRangeType(this.startedDateType)) {\n            return this._startTo;\n        }\n        return this.getEndDate(this.startedDateType);\n    }\n\n    set suspendedFrom(suspendedFrom: string) {\n        this._suspendedFrom = suspendedFrom;\n    }\n\n    set suspendedTo(suspendedTo: string) {\n        this._suspendedTo = suspendedTo;\n    }\n\n    get suspendedFrom(): string {\n        if (this.isDateRangeType(this.suspendedDateType)) {\n            return this._suspendedFrom;\n        }\n        return this.getStartDate(this.suspendedDateType);\n    }\n\n    get suspendedTo(): string {\n        if (this.isDateRangeType(this.suspendedDateType)) {\n            return this._suspendedTo;\n        }\n        return this.getEndDate(this.suspendedDateType);\n    }\n\n    private getStartDate(key: DateCloudFilterType) {\n        return this.dateRangeFilterService.getDateRange(key).startDate;\n    }\n\n    private getEndDate(key: DateCloudFilterType) {\n        return this.dateRangeFilterService.getDateRange(key).endDate;\n    }\n\n    private isDateRangeType(type: DateCloudFilterType) {\n        return !!this.dateRangeFilterService.isDateRangeType(type);\n    }\n}\n\nexport interface ProcessFilterAction {\n    actionType?: string;\n    icon?: string;\n    tooltip?: string;\n    filter?: ProcessFilterCloudModel;\n}\n\nexport interface ProcessFilterOptions {\n    label?: string;\n    value?: string | object;\n}\n\nexport interface ProcessFilterProperties {\n    label?: string;\n    type?: string;\n    value?: any;\n    key?: string;\n    attributes?: { [key: string]: string; };\n    options?: ProcessFilterOptions[];\n    dateFilterOptions?: DateCloudFilterType[];\n    selectionMode?: ComponentSelectionMode;\n}\n\nexport interface ProcessSortFilterProperty {\n    label: string;\n    value: string | object;\n    key: string;\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { IdentityUserService } from '@alfresco/adf-core';\nimport { Injectable, Inject } from '@angular/core';\nimport { Observable, of, BehaviorSubject, throwError } from 'rxjs';\nimport { ProcessFilterCloudModel } from '../models/process-filter-cloud.model';\nimport { switchMap, map, catchError } from 'rxjs/operators';\nimport { PROCESS_FILTERS_SERVICE_TOKEN } from '../../../services/cloud-token.service';\nimport { PreferenceCloudServiceInterface } from '../../../services/preference-cloud.interface';\n@Injectable({\n    providedIn: 'root'\n})\nexport class ProcessFilterCloudService {\n\n    private filtersSubject: BehaviorSubject<ProcessFilterCloudModel[]>;\n    filters$: Observable<ProcessFilterCloudModel[]>;\n\n    constructor(\n        @Inject(PROCESS_FILTERS_SERVICE_TOKEN) public preferenceService: PreferenceCloudServiceInterface,\n        private identityUserService: IdentityUserService) {\n        this.filtersSubject = new BehaviorSubject([]);\n        this.filters$ = this.filtersSubject.asObservable();\n    }\n\n    readQueryParams(obj: Object): ProcessFilterCloudModel {\n        const model = Object.assign({}, obj) as ProcessFilterCloudModel;\n\n        if (obj.hasOwnProperty('appVersion') && obj['appVersion']) {\n            if (typeof obj['appVersion'] === 'string') {\n                model.appVersion = obj['appVersion'].split(',').map(str => parseInt(str, 10));\n            }\n        }\n\n        if (obj.hasOwnProperty('lastModifiedFrom')) {\n            model.lastModifiedFrom = new Date(parseInt(obj['lastModifiedFrom'], 10));\n        }\n\n        if (obj.hasOwnProperty('lastModifiedTo')) {\n            model.lastModifiedTo = new Date(parseInt(obj['lastModifiedTo'], 10));\n        }\n\n        return model;\n    }\n\n    writeQueryParams(value: Object, filterProperties: string[], appName?: string, id?: string): Object {\n        value = value || {};\n        const result = {\n            appName: appName || value['appName'],\n            id: id || value['id']\n        };\n\n        for (const prop of filterProperties) {\n            if (prop === 'appVersionMultiple') {\n                const versions = value['appVersion'];\n\n                if (Array.isArray(versions) && versions.length > 0) {\n                    result['appVersion'] = versions.join(',');\n                }\n            } else if (prop === 'lastModified') {\n                if (value['lastModifiedFrom']) {\n                    result['lastModifiedFrom'] = value['lastModifiedFrom'].valueOf();\n                }\n\n                if (value['lastModifiedTo']) {\n                    result['lastModifiedTo'] = value['lastModifiedTo'].valueOf();\n                }\n\n            } else if (value.hasOwnProperty(prop)) {\n                result[prop] = value[prop];\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * Creates and returns the default process instance filters for a app.\n     * @param appName Name of the target app\n     * @returns Observable of default process instance filters just created or created filters\n     */\n    private createDefaultFilters(appName: string) {\n        const key: string = this.prepareKey(appName);\n        this.preferenceService.getPreferences(appName, key).pipe(\n            switchMap((response: any) => {\n                const preferences = (response && response.list && response.list.entries) ? response.list.entries : [];\n                if (!this.hasPreferences(preferences)) {\n                    return this.createProcessFilters(appName, key, this.defaultProcessFilters(appName));\n                } else if (!this.hasProcessFilters(preferences, key)) {\n                    return this.createProcessFilters(appName, key, this.defaultProcessFilters(appName));\n                } else {\n                    return of(this.findFiltersByKeyInPreferences(preferences, key));\n                }\n            }),\n            catchError((err) => this.handleProcessError(err))\n        ).subscribe((filters) => {\n            this.addFiltersToStream(filters);\n        });\n    }\n\n    /**\n     * Gets all process instance filters for a process app.\n     * @param appName Name of the target app\n     * @returns Observable of process filters details\n     */\n    getProcessFilters(appName: string): Observable<ProcessFilterCloudModel[]> {\n        this.createDefaultFilters(appName);\n        return this.filters$;\n    }\n\n    /**\n     * Get process instance filter for given filter id\n     * @param appName Name of the target app\n     * @param id Id of the target process instance filter\n     * @returns Observable of process instance filter details\n     */\n    getFilterById(appName: string, id: string): Observable<ProcessFilterCloudModel> {\n        const key: string = this.prepareKey(appName);\n        return this.getProcessFiltersByKey(appName, key).pipe(\n            switchMap((filters: ProcessFilterCloudModel[]) => {\n                if (filters && filters.length === 0) {\n                    return this.createProcessFilters(appName, key, this.defaultProcessFilters(appName));\n                } else {\n                    return of(filters);\n                }\n            }),\n            map((filters: ProcessFilterCloudModel[]) => {\n                return filters.filter((filter: ProcessFilterCloudModel) => {\n                    return filter.id === id;\n                })[0];\n            }),\n            catchError((err) => this.handleProcessError(err))\n            );\n    }\n\n    /**\n     * Adds a new process instance filter\n     * @param filter The new filter to add\n     * @returns Observable of process instance filters with newly added filter\n     */\n    addFilter(newFilter: ProcessFilterCloudModel): Observable<ProcessFilterCloudModel[]> {\n        const { appName, name } = newFilter;\n        const key: string = this.prepareKey(appName);\n\n        return this.getProcessFiltersByKey(appName, key).pipe(\n            switchMap((filters: ProcessFilterCloudModel[]) => {\n                if (filters && filters.length === 0) {\n                    return this.createProcessFilters(appName, key, [newFilter]);\n                } else {\n                    const index = filters.findIndex(filter => filter.name === name);\n                    if (index >= 0) {\n                        filters.splice(index, 1);\n                    }\n\n                    filters.push(newFilter);\n                    return this.preferenceService.updatePreference(appName, key, filters);\n                }\n            }),\n            map((filters: ProcessFilterCloudModel[]) => {\n                this.addFiltersToStream(filters);\n                return filters;\n            }),\n            catchError((err) => this.handleProcessError(err))\n        );\n    }\n\n    /**\n     *  Update process instance filter\n     * @param filter The new filter to update\n     * @returns Observable of process instance filters with updated filter\n     */\n    updateFilter(updatedFilter: ProcessFilterCloudModel): Observable<ProcessFilterCloudModel[]> {\n        const key: string = this.prepareKey(updatedFilter.appName);\n        return this.getProcessFiltersByKey(updatedFilter.appName, key).pipe(\n            switchMap((filters: any) => {\n                if (filters && filters.length === 0) {\n                    return this.createProcessFilters(updatedFilter.appName, key, [updatedFilter]);\n                } else {\n                    const itemIndex = filters.findIndex((filter: ProcessFilterCloudModel) => filter.id === updatedFilter.id);\n                    filters[itemIndex] = updatedFilter;\n                    return this.updateProcessFilters(updatedFilter.appName, key, filters);\n                }\n            }),\n            map((updatedFilters: ProcessFilterCloudModel[]) => {\n                this.addFiltersToStream(updatedFilters);\n                return updatedFilters;\n            }),\n            catchError((err) => this.handleProcessError(err))\n        );\n    }\n\n    /**\n     *  Delete process instance filter\n     * @param filter The new filter to delete\n     * @returns Observable of process instance filters without deleted filter\n     */\n    deleteFilter(deletedFilter: ProcessFilterCloudModel): Observable<ProcessFilterCloudModel[]> {\n        const key = this.prepareKey(deletedFilter.appName);\n\n        return this.getProcessFiltersByKey(deletedFilter.appName, key).pipe(\n            switchMap(filters => {\n                if (filters && filters.length > 0) {\n                    filters = filters.filter(filter => filter.id !== deletedFilter.id);\n                    return this.updateProcessFilters(deletedFilter.appName, key, filters);\n                } else {\n                    return of([]);\n                }\n            }),\n            map((filters: ProcessFilterCloudModel[]) => {\n                this.addFiltersToStream(filters);\n                return filters;\n            }),\n            catchError((err) => this.handleProcessError(err))\n        );\n    }\n\n    /**\n     * Checks if given filter is a default filter\n     * @param filterName Name of the target process filter\n     * @returns Boolean value for whether the filter is a default filter\n     */\n    isDefaultFilter(filterName: string): boolean {\n        const defaultFilters = this.defaultProcessFilters();\n        return defaultFilters.findIndex((filter) => filterName === filter.name) !== -1;\n    }\n\n    /**\n     * Checks user preference are empty or not\n     * @param preferences User preferences of the target app\n     * @returns Boolean value if the preferences are not empty\n     */\n    private hasPreferences(preferences: any): boolean {\n        return preferences && preferences.length > 0;\n    }\n\n    /**\n     * Checks for process instance filters in given user preferences\n     * @param preferences User preferences of the target app\n     * @param key Key of the process instance filters\n     * @param filters Details of create filter\n     * @returns Boolean value if the preference has process instance filters\n     */\n    private hasProcessFilters(preferences: any, key: string): boolean {\n        const filters = preferences.find((filter: any) => { return filter.entry.key === key; });\n        return (filters && filters.entry) ? JSON.parse(filters.entry.value).length > 0 : false;\n    }\n\n    /**\n     * Calls create preference api to create process instance filters\n     * @param appName Name of the target app\n     * @param key Key of the process instance filters\n     * @param filters Details of new process instance filter\n     * @returns Observable of created process instance filters\n     */\n    private createProcessFilters(appName: string, key: string, filters: ProcessFilterCloudModel[]): Observable<ProcessFilterCloudModel[]> {\n        return this.preferenceService.createPreference(appName, key, filters);\n    }\n\n    /**\n     * Calls get preference api to get process instance filter by preference key\n     * @param appName Name of the target app\n     * @param key Key of the process instance filters\n     * @returns Observable of process instance filters\n     */\n    private getProcessFiltersByKey(appName: string, key: string): Observable<ProcessFilterCloudModel[]> {\n        return this.preferenceService.getPreferenceByKey(appName, key);\n    }\n\n    /**\n     * Calls update preference api to update process instance filter\n     * @param appName Name of the target app\n     * @param key Key of the process instance filters\n     * @param filters Details of update filter\n     * @returns Observable of updated process instance filters\n     */\n    private updateProcessFilters(appName: string, key: string, filters: ProcessFilterCloudModel[]): Observable<ProcessFilterCloudModel[]> {\n        return this.preferenceService.updatePreference(appName, key, filters);\n    }\n\n    /**\n     * Creates a uniq key with appName and username\n     * @param appName Name of the target app\n     * @returns String of process instance filters preference key\n     */\n    private prepareKey(appName: string): string {\n        const user = this.identityUserService.getCurrentUserInfo();\n        return `process-filters-${appName}-${user.username}`;\n    }\n\n    /**\n     * Finds and returns the process instance filters from preferences\n     * @returns Array of ProcessFilterCloudModel\n     * @param preferences\n     * @param key\n     */\n    private findFiltersByKeyInPreferences(preferences: any, key: string): ProcessFilterCloudModel[] {\n        const result = preferences.find((filter: any) => { return filter.entry.key === key; });\n        return result && result.entry ? JSON.parse(result.entry.value) : [];\n    }\n\n    private addFiltersToStream(filters: ProcessFilterCloudModel[]) {\n        this.filtersSubject.next(filters);\n    }\n\n    private handleProcessError(error: any) {\n        return throwError(error || 'Server error');\n    }\n\n    /**\n     * Creates and returns the default filters for a process app.\n     * @param appName Name of the target app\n     * @returns Array of ProcessFilterCloudModel\n     */\n    private defaultProcessFilters(appName?: string): ProcessFilterCloudModel[] {\n        return [\n            new ProcessFilterCloudModel({\n                name: 'ADF_CLOUD_PROCESS_FILTERS.RUNNING_PROCESSES',\n                icon: 'inbox',\n                key: 'running-processes',\n                appName,\n                sort: 'startDate',\n                status: 'RUNNING',\n                order: 'DESC'\n            }),\n            new ProcessFilterCloudModel({\n                name: 'ADF_CLOUD_PROCESS_FILTERS.COMPLETED_PROCESSES',\n                icon: 'done',\n                key: 'completed-processes',\n                appName,\n                sort: 'startDate',\n                status: 'COMPLETED',\n                order: 'DESC'\n            }),\n            new ProcessFilterCloudModel({\n                name: 'ADF_CLOUD_PROCESS_FILTERS.ALL_PROCESSES',\n                key: 'all-processes',\n                icon: 'adjust',\n                appName,\n                sort: 'startDate',\n                status: '',\n                order: 'DESC'\n            })\n        ];\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, EventEmitter, Input, OnChanges, Output, SimpleChanges, OnDestroy, OnInit, ViewEncapsulation } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\nimport { ProcessFilterCloudService } from '../services/process-filter-cloud.service';\nimport { ProcessFilterCloudModel } from '../models/process-filter-cloud.model';\nimport { TranslationService } from '@alfresco/adf-core';\nimport { FilterParamsModel } from '../../../task/task-filters/models/filter-cloud.model';\nimport { takeUntil } from 'rxjs/operators';\n\n@Component({\n    selector: 'adf-cloud-process-filters',\n    templateUrl: './process-filters-cloud.component.html',\n    styleUrls: ['./process-filters-cloud.component.scss'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class ProcessFiltersCloudComponent implements OnInit, OnChanges, OnDestroy {\n\n    /** (required) The application name */\n    @Input()\n    appName: string = '';\n\n    /** (optional) The filter to be selected by default */\n    @Input()\n    filterParam: FilterParamsModel;\n\n    /** (optional) Toggles showing an icon by the side of each filter */\n    @Input()\n    showIcons: boolean = false;\n\n    /** Emitted when a filter is being selected based on the filterParam input. */\n    @Output()\n    filterSelected = new EventEmitter<ProcessFilterCloudModel>();\n\n    /** Emitted when a filter is being clicked from the UI. */\n    @Output()\n    filterClicked = new EventEmitter<ProcessFilterCloudModel>();\n\n    /** Emitted when filters are loaded successfully */\n    @Output()\n    success = new EventEmitter<any>();\n\n    /** Emitted when any error occurs while loading the filters */\n    @Output()\n    error = new EventEmitter<any>();\n\n    filters$: Observable<ProcessFilterCloudModel[]>;\n\n    currentFilter: ProcessFilterCloudModel;\n\n    filters: ProcessFilterCloudModel [] = [];\n\n    private onDestroy$ = new Subject<boolean>();\n\n    constructor(\n        private processFilterCloudService: ProcessFilterCloudService,\n        private translationService: TranslationService ) { }\n\n    ngOnInit() {\n        if (this.appName === '') {\n            this.getFilters(this.appName);\n        }\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        const appName = changes['appName'];\n        const filter = changes['filterParam'];\n        if (appName && appName.currentValue) {\n            this.getFilters(appName.currentValue);\n        } else if (filter && filter.currentValue !== filter.previousValue) {\n            this.selectFilterAndEmit(filter.currentValue);\n        }\n    }\n\n    /**\n     * Fetch the filter list based on appName\n     */\n    getFilters(appName: string) {\n        this.filters$ = this.processFilterCloudService.getProcessFilters(appName);\n\n        this.filters$.pipe(takeUntil(this.onDestroy$)).subscribe(\n            (res: ProcessFilterCloudModel[]) => {\n                this.resetFilter();\n                this.filters = res || [];\n                this.selectFilterAndEmit(this.filterParam);\n                this.success.emit(res);\n            },\n            (err: any) => {\n                this.error.emit(err);\n            }\n        );\n    }\n\n    /**\n     * Pass the selected filter as next\n     */\n    public selectFilter(paramFilter: FilterParamsModel) {\n        if (paramFilter) {\n            this.currentFilter = this.filters.find((filter, index) => {\n                return paramFilter.id === filter.id ||\n                (paramFilter.name && this.checkFilterNamesEquality(paramFilter.name, filter.name)) ||\n                (paramFilter.key && (paramFilter.key === filter.key)) ||\n                paramFilter.index === index;\n            });\n        }\n    }\n\n    /**\n     * Check equality of the filter names by translating the given name strings\n     */\n    private checkFilterNamesEquality(name1: string, name2: string ): boolean {\n        const translatedName1 = this.translationService.instant(name1);\n        const translatedName2 = this.translationService.instant(name2);\n\n        return translatedName1.toLocaleLowerCase() === translatedName2.toLocaleLowerCase();\n    }\n\n    /**\n     * Selects and emits the given filter\n     */\n    public selectFilterAndEmit(newParamFilter: FilterParamsModel) {\n        if (newParamFilter) {\n            this.selectFilter(newParamFilter);\n            this.filterSelected.emit(this.currentFilter);\n        } else {\n            this.currentFilter = undefined;\n        }\n    }\n\n    /**\n     * Select filter with the id\n     */\n    public selectFilterById(id: string) {\n        this.selectFilterAndEmit(<ProcessFilterCloudModel> {id: id});\n    }\n\n    /**\n     * Selects and emits the clicked filter\n     */\n    public onFilterClick(filter: ProcessFilterCloudModel) {\n        if (filter) {\n            this.selectFilter(filter);\n            this.filterClicked.emit(this.currentFilter);\n        } else {\n            this.currentFilter = undefined;\n        }\n    }\n\n    /**\n     * Select as default process filter the first in the list\n     */\n    public selectDefaultProcessFilter() {\n        if (!this.isFilterListEmpty()) {\n            this.currentFilter = this.filters[0];\n        }\n    }\n\n    /**\n     * Return the current process\n     */\n    getCurrentFilter(): ProcessFilterCloudModel {\n        return this.currentFilter;\n    }\n\n    /**\n     * Check if the filter list is empty\n     */\n    isFilterListEmpty(): boolean {\n        return this.filters === undefined || (this.filters && this.filters.length === 0);\n    }\n\n    /**\n     * Reset the filters\n     */\n    private resetFilter() {\n        this.filters = [];\n        this.currentFilter = undefined;\n    }\n\n    ngOnDestroy() {\n        this.onDestroy$.next(true);\n        this.onDestroy$.complete();\n    }\n\n    isActiveFilter(filter: any): boolean {\n        return this.currentFilter.name === filter.name;\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, Inject, OnInit } from '@angular/core';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\nimport { FormBuilder, FormGroup, AbstractControl, Validators } from '@angular/forms';\n\n@Component({\n  selector: 'adf-cloud-process-filter-dialog-cloud',\n  templateUrl: './process-filter-dialog-cloud.component.html',\n  styleUrls: ['./process-filter-dialog-cloud.component.scss']\n})\nexport class ProcessFilterDialogCloudComponent implements OnInit {\n\n    public static ACTION_SAVE = 'SAVE';\n    defaultIcon = 'inbox';\n\n    filterForm: FormGroup;\n\n    constructor(\n        private fb: FormBuilder,\n        public dialogRef: MatDialogRef<ProcessFilterDialogCloudComponent>,\n        @Inject(MAT_DIALOG_DATA) public data) {\n    }\n\n    ngOnInit() {\n        this.filterForm = this.fb.group({\n            name: [this.data.name, Validators.required]\n        });\n    }\n\n    onSaveClick() {\n        this.dialogRef.close({\n            action: ProcessFilterDialogCloudComponent.ACTION_SAVE,\n            icon: this.defaultIcon,\n            name: this.nameController.value\n        });\n    }\n\n    onCancelClick() {\n        this.dialogRef.close();\n    }\n\n    get nameController(): AbstractControl {\n        return this.filterForm.get('name');\n    }\n\n    isValid(): boolean {\n        return this.filterForm.valid;\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AlfrescoApiService, LogService, AppConfigService } from '@alfresco/adf-core';\nimport { Injectable } from '@angular/core';\nimport { Observable, Subject, throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { ProcessInstanceCloud } from '../start-process/models/process-instance-cloud.model';\nimport { BaseCloudService } from '../../services/base-cloud.service';\nimport { ProcessDefinitionCloud } from '../../models/process-definition-cloud.model';\nimport { ApplicationVersionModel, ApplicationVersionResponseModel } from '../../models/application-version.model';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class ProcessCloudService extends BaseCloudService {\n\n    dataChangesDetected = new Subject<ProcessInstanceCloud>();\n\n    constructor(apiService: AlfrescoApiService,\n                appConfigService: AppConfigService,\n                private logService: LogService) {\n        super(apiService, appConfigService);\n    }\n\n    /**\n     * Gets details of a process instance.\n     * @param appName Name of the app\n     * @param processInstanceId ID of the process instance whose details you want\n     * @returns Process instance details\n     */\n    getProcessInstanceById(appName: string, processInstanceId: string): Observable<ProcessInstanceCloud> {\n        if (appName && processInstanceId) {\n            const url = `${this.getBasePath(appName)}/query/v1/process-instances/${processInstanceId}`;\n\n            return this.get<{ entry: ProcessInstanceCloud }>(url).pipe(\n                map((res) => {\n                    this.dataChangesDetected.next(res.entry);\n                    return res.entry;\n                })\n            );\n        } else {\n            this.logService.error('AppName and ProcessInstanceId are mandatory for querying a process');\n            return throwError('AppName/ProcessInstanceId not configured');\n        }\n    }\n\n    /**\n     * Gets the process definitions associated with an app.\n     * @param appName Name of the target app\n     * @returns Array of process definitions\n     */\n    getProcessDefinitions(appName: string): Observable<ProcessDefinitionCloud[]> {\n        if (appName || appName === '') {\n            const url = `${this.getBasePath(appName)}/rb/v1/process-definitions`;\n\n            return this.get(url).pipe(\n                map((res: any) => {\n                    return res.list.entries.map((processDefs) => new ProcessDefinitionCloud(processDefs.entry));\n                })\n            );\n        } else {\n            this.logService.error('AppName is mandatory for querying task');\n            return throwError('AppName not configured');\n        }\n    }\n\n    /**\n     * Gets the application versions associated with an app.\n     * @param appName Name of the target app\n     * @returns Array of Application Version Models\n     */\n    getApplicationVersions(appName: string): Observable<ApplicationVersionModel[]> {\n        if (appName) {\n            const url = `${this.getBasePath(appName)}/query/v1/applications`;\n\n            return this.get<any>(url).pipe(\n                map((appEntities: ApplicationVersionResponseModel) => {\n                    return appEntities.list.entries;\n                }),\n                catchError((err) => this.handleError(err))\n            );\n        } else {\n            this.logService.error('AppName is mandatory for querying the versions of an application');\n            return throwError('AppName not configured');\n        }\n    }\n\n    /**\n     * Cancels a process.\n     * @param appName Name of the app\n     * @param processInstanceId Id of the process to cancel\n     * @returns Operation Information\n     */\n    cancelProcess(appName: string, processInstanceId: string): Observable<ProcessInstanceCloud> {\n        if (appName && processInstanceId) {\n            const queryUrl = `${this.getBasePath(appName)}/rb/v1/process-instances/${processInstanceId}`;\n            return this.delete(queryUrl).pipe(\n                map((res: any) => {\n                   this.dataChangesDetected.next(res.entry);\n                   return res.entry;\n                })\n            );\n        } else {\n            this.logService.error('App name and Process id are mandatory for deleting a process');\n            return throwError('App name and process id not configured');\n        }\n    }\n\n    private handleError(error?: any) {\n        this.logService.error(error);\n        return throwError(error || 'Server error');\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, Input, Output, EventEmitter, OnInit, OnChanges, SimpleChanges, OnDestroy, ViewEncapsulation } from '@angular/core';\nimport { FormGroup, FormBuilder, AbstractControl } from '@angular/forms';\nimport { DateAdapter } from '@angular/material/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { debounceTime, filter, takeUntil, finalize, switchMap } from 'rxjs/operators';\nimport { Subject, Observable, Subscription } from 'rxjs';\nimport moment from 'moment-es6';\nimport { Moment } from 'moment';\nimport { AppsProcessCloudService } from '../../../app/services/apps-process-cloud.service';\nimport { ProcessFilterCloudModel, ProcessFilterProperties, ProcessFilterAction, ProcessFilterOptions, ProcessSortFilterProperty } from '../models/process-filter-cloud.model';\nimport { IdentityUserModel, TranslationService, UserPreferencesService, UserPreferenceValues } from '@alfresco/adf-core';\nimport { ProcessFilterCloudService } from '../services/process-filter-cloud.service';\nimport { ProcessFilterDialogCloudComponent } from './process-filter-dialog-cloud.component';\nimport { ProcessCloudService } from '../../services/process-cloud.service';\nimport { DateCloudFilterType, DateRangeFilter } from '../../../models/date-cloud-filter.model';\n\nexport interface DropdownOption {\n    value: string;\n    label: string;\n}\n\n@Component({\n    selector: 'adf-cloud-edit-process-filter',\n    templateUrl: './edit-process-filter-cloud.component.html',\n    styleUrls: ['./edit-process-filter-cloud.component.scss'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class EditProcessFilterCloudComponent implements OnInit, OnChanges, OnDestroy {\n\n    public static ACTION_SAVE = 'save';\n    public static ACTION_SAVE_AS = 'saveAs';\n    public static ACTION_DELETE = 'delete';\n    public static DEFAULT_PROCESS_FILTER_PROPERTIES = ['status', 'sort', 'order', 'lastModified'];\n    public static DEFAULT_SORT_PROPERTIES = ['id', 'name', 'status', 'startDate'];\n    public static DEFAULT_ACTIONS = ['save', 'saveAs', 'delete'];\n    public DATE_FORMAT: string = 'DD/MM/YYYY';\n\n    /** The name of the application. */\n    @Input()\n    appName: string = '';\n\n    /** roles to filter the apps */\n    @Input()\n    role: string = '';\n\n    /** Id of the process instance filter. */\n    @Input()\n    id: string;\n\n    /** List of process filter properties to display */\n    @Input()\n    filterProperties = EditProcessFilterCloudComponent.DEFAULT_PROCESS_FILTER_PROPERTIES;\n\n    /** List of sort properties to display. */\n    @Input()\n    sortProperties = EditProcessFilterCloudComponent.DEFAULT_SORT_PROPERTIES;\n\n    /** List of sort actions. */\n    @Input()\n    actions = EditProcessFilterCloudComponent.DEFAULT_ACTIONS;\n\n    /** Toggles editing of process filter actions. */\n    @Input()\n    showFilterActions = true;\n\n    /** Toggles editing of the process filter title. */\n    @Input()\n    showTitle = true;\n\n     /** Toggles the appearance of the process filter name . */\n    @Input()\n    showProcessFilterName = true;\n\n    /** Emitted when a process instance filter property changes. */\n    @Output()\n    filterChange = new EventEmitter<ProcessFilterCloudModel>();\n\n    /** Emitted when a filter action occurs i.e Save, SaveAs, Delete. */\n    @Output()\n    action = new EventEmitter<ProcessFilterAction>();\n\n    private _filter: ProcessFilterCloudModel;\n    protected filterHasBeenChanged = false;\n\n    get processFilter() {\n        return this._filter;\n    }\n\n    @Input()\n    set processFilter(value: ProcessFilterCloudModel) {\n        const isChanged = this.isFilterChanged(this._filter, value);\n\n        this._filter = value;\n\n        if (value?.appName) {\n            this.appName = value.appName;\n        }\n\n        if (value?.id) {\n            this.id = value.id;\n        }\n\n        this.processFilterProperties = this.createAndFilterProperties();\n        this.processFilterActions = this.createAndFilterActions();\n\n        this.buildForm(this.processFilterProperties);\n\n        if (isChanged) {\n            this.filterChange.emit(value);\n        }\n    }\n\n    status: Array<DropdownOption> = [\n        { value: '', label: 'ADF_CLOUD_PROCESS_FILTERS.STATUS.ALL' },\n        { value: 'RUNNING', label: 'ADF_CLOUD_PROCESS_FILTERS.STATUS.RUNNING' },\n        { value: 'SUSPENDED', label: 'ADF_CLOUD_PROCESS_FILTERS.STATUS.SUSPENDED' },\n        { value: 'CANCELLED', label: 'ADF_CLOUD_PROCESS_FILTERS.STATUS.CANCELLED' },\n        { value: 'COMPLETED', label: 'ADF_CLOUD_PROCESS_FILTERS.STATUS.COMPLETED' }\n    ];\n    directions: Array<DropdownOption> = [\n        { value: 'ASC', label: 'ADF_CLOUD_PROCESS_FILTERS.DIRECTION.ASCENDING' },\n        { value: 'DESC', label: 'ADF_CLOUD_PROCESS_FILTERS.DIRECTION.DESCENDING' }\n    ];\n    actionDisabledForDefault = [\n        EditProcessFilterCloudComponent.ACTION_SAVE,\n        EditProcessFilterCloudComponent.ACTION_DELETE\n    ];\n    applicationNames: any[] = [];\n    allProcessDefinitionNamesOption: DropdownOption = {\n        label: 'ADF_CLOUD_PROCESS_FILTERS.STATUS.ALL',\n        value: ''\n    };\n    processDefinitionNames: any[] = [];\n    editProcessFilterForm: FormGroup;\n    processFilterProperties: ProcessFilterProperties[] = [];\n    processFilterActions: ProcessFilterAction[] = [];\n    toggleFilterActions: boolean = false;\n    appVersionOptions: ProcessFilterOptions[] = [];\n    initiatorOptions: IdentityUserModel[] = [];\n\n    private onDestroy$ = new Subject<boolean>();\n    isLoading: boolean = false;\n    private filterChangeSub: Subscription;\n\n    constructor(\n        private formBuilder: FormBuilder,\n        public dialog: MatDialog,\n        private dateAdapter: DateAdapter<Moment>,\n        private userPreferencesService: UserPreferencesService,\n        private translateService: TranslationService,\n        private processFilterCloudService: ProcessFilterCloudService,\n        private appsProcessCloudService: AppsProcessCloudService,\n        private processCloudService: ProcessCloudService) {\n    }\n\n    ngOnInit() {\n        this.userPreferencesService\n            .select(UserPreferenceValues.Locale)\n            .pipe(takeUntil(this.onDestroy$))\n            .subscribe(locale => this.dateAdapter.setLocale(locale));\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        const id = changes['id'];\n        if (id && id.currentValue !== id.previousValue) {\n            this.retrieveProcessFilterAndBuildForm();\n        }\n    }\n\n    ngOnDestroy() {\n        this.onDestroy$.next(true);\n        this.onDestroy$.complete();\n    }\n\n    buildForm(processFilterProperties: ProcessFilterProperties[]) {\n        this.editProcessFilterForm = this.formBuilder.group(this.getFormControlsConfig(processFilterProperties));\n        this.onFilterChange();\n    }\n\n    getFormControlsConfig(processFilterProperties: ProcessFilterProperties[]): any {\n        const properties = processFilterProperties.map((property) => {\n            if (!!property.attributes) {\n                return this.getAttributesControlConfig(property);\n            } else {\n                return { [property.key]: property.value };\n            }\n        });\n        return properties.reduce(((result, current) => Object.assign(result, current)), {});\n    }\n\n    private getAttributesControlConfig(property: ProcessFilterProperties) {\n        return Object.values(property.attributes).reduce((result, key) => {\n            result[key] = property.value[key];\n            return result;\n        }, {});\n    }\n\n    /**\n     * Fetches process instance filter by application name and filter id and creates filter properties, build form\n     */\n    retrieveProcessFilterAndBuildForm() {\n        this.isLoading = true;\n        this.processFilterCloudService\n            .getFilterById(this.appName, this.id)\n            .pipe(finalize(() => this.isLoading = false))\n            .subscribe(response => {\n                this.filterHasBeenChanged = false;\n                this.processFilter = new ProcessFilterCloudModel(\n                    Object.assign({}, response || {}, this.processFilter || {})\n                );\n            });\n    }\n\n    /**\n     * Check process instance filter changes\n     */\n    onFilterChange() {\n        if (this.filterChangeSub) {\n            this.filterChangeSub.unsubscribe();\n            this.filterChangeSub = null;\n        }\n\n        this.filterChangeSub = this.editProcessFilterForm.valueChanges\n            .pipe(\n                debounceTime(500),\n                filter(() => this.isFormValid()),\n                takeUntil(this.onDestroy$)\n            )\n            .subscribe((formValues: ProcessFilterCloudModel) => {\n                this.setLastModifiedToFilter(formValues);\n\n                const newValue = new ProcessFilterCloudModel(Object.assign({}, this.processFilter, formValues));\n                const changed = !this.compareFilters(newValue, this.processFilter);\n                this.filterHasBeenChanged = changed;\n\n                if (changed) {\n                    this._filter = newValue;\n                    this.filterChange.emit(newValue);\n                }\n            });\n    }\n\n    createAndFilterProperties(): ProcessFilterProperties[] {\n        this.checkMandatoryFilterProperties();\n\n        if (this.filterProperties.includes('appName')) {\n            this.getRunningApplications();\n        }\n\n        if (this.filterProperties.includes('processDefinitionName')) {\n            this.getProcessDefinitions();\n        }\n\n        if (this.filterProperties.includes('appVersionMultiple')) {\n            this.getAppVersionOptions();\n        }\n\n        if (this.filterProperties.includes('initiator')) {\n            this.initiatorOptions = !!this.processFilter.initiator\n                ? this.processFilter.initiator.split(',').map( username => Object.assign({}, { username: username }))\n                : [];\n        }\n\n        const defaultProperties = this.createProcessFilterProperties(this.processFilter);\n        let filteredProperties = defaultProperties.filter((filterProperty) => this.isValidProperty(this.filterProperties, filterProperty.key));\n\n        if (!this.filterProperties.includes('sort')) {\n            filteredProperties = filteredProperties.filter(property => property.key !== 'order');\n        }\n\n        if (this.filterProperties.includes('lastModified')) {\n            filteredProperties = [\n                ...filteredProperties,\n                ...this.createLastModifiedProperty(this.processFilter)\n            ];\n        }\n\n        return filteredProperties;\n    }\n\n    checkMandatoryFilterProperties() {\n        if (this.filterProperties === undefined || this.filterProperties.length === 0) {\n            this.filterProperties = EditProcessFilterCloudComponent.DEFAULT_PROCESS_FILTER_PROPERTIES;\n        }\n    }\n\n    private isValidProperty(filterProperties: string[], key: string): boolean {\n        return filterProperties ? filterProperties.indexOf(key) >= 0 : true;\n    }\n\n    get createSortProperties(): ProcessFilterOptions[] {\n        this.checkMandatorySortProperties();\n        const defaultSortProperties = this.createProcessSortProperties();\n        return defaultSortProperties.filter((sortProperty) => this.isValidProperty(this.sortProperties, sortProperty.key));\n    }\n\n    getAppVersionOptions() {\n        this.appVersionOptions = [];\n\n        this.processCloudService.getApplicationVersions(this.appName).subscribe((appVersions) => {\n            appVersions.forEach(appVersion => {\n                this.appVersionOptions.push({ label: appVersion.entry.version, value: appVersion.entry.version });\n            });\n        });\n    }\n\n    checkMandatorySortProperties() {\n        if (this.sortProperties === undefined || this.sortProperties.length === 0) {\n            this.sortProperties = EditProcessFilterCloudComponent.DEFAULT_SORT_PROPERTIES;\n        }\n    }\n\n    createAndFilterActions() {\n        this.checkMandatoryActions();\n        const actions = this.createFilterActions();\n        return actions.filter((action) => this.isValidAction(this.actions, action));\n    }\n\n    checkMandatoryActions() {\n        if (this.actions === undefined || this.actions.length === 0) {\n            this.actions = EditProcessFilterCloudComponent.DEFAULT_ACTIONS;\n        }\n    }\n\n    private isValidAction(actions: string[], action: ProcessFilterAction): boolean {\n        return actions ? actions.indexOf(action.actionType) >= 0 : true;\n    }\n\n    isFormValid(): boolean {\n        return this.editProcessFilterForm.valid;\n    }\n\n    getPropertyController(property: ProcessFilterProperties): AbstractControl {\n        return this.editProcessFilterForm.get(property.key);\n    }\n\n    onDateChanged(newDateValue: Moment, dateProperty: ProcessFilterProperties) {\n        if (newDateValue) {\n            const controller = this.getPropertyController(dateProperty);\n\n            if (newDateValue.isValid()) {\n                controller.setValue(newDateValue);\n                controller.setErrors(null);\n            } else {\n                controller.setErrors({ invalid: true });\n            }\n        }\n    }\n\n    onDateTypeChange(dateType: DateCloudFilterType, property: ProcessFilterProperties) {\n        this.editProcessFilterForm.get(property.attributes.dateType).setValue(dateType);\n    }\n\n    onDateRangeFilterChanged(dateRange: DateRangeFilter, property: ProcessFilterProperties) {\n        this.editProcessFilterForm.get(property.attributes?.from).setValue(\n            dateRange.startDate ? dateRange.startDate : null\n        );\n        this.editProcessFilterForm.get(property.attributes?.to).setValue(\n            dateRange.endDate ? dateRange.endDate : null\n        );\n        this.editProcessFilterForm.get(property.attributes.dateType).setValue(DateCloudFilterType.RANGE);\n    }\n\n    onChangedUser(users: IdentityUserModel[], processProperty: ProcessFilterProperties) {\n        this.getPropertyController(processProperty).setValue(users.map( user => user.username).join(','));\n    }\n\n    hasError(property: ProcessFilterProperties): boolean {\n        const controller = this.getPropertyController(property);\n        return controller.errors && controller.errors.invalid;\n    }\n\n    compareFilters(editedQuery: ProcessFilterCloudModel, currentQuery: ProcessFilterCloudModel): boolean {\n        return JSON.stringify(editedQuery).toLowerCase() === JSON.stringify(currentQuery).toLowerCase();\n    }\n\n    getRunningApplications() {\n        this.applicationNames = [];\n\n        this.appsProcessCloudService\n            .getDeployedApplicationsByStatus('RUNNING', this.role)\n            .subscribe((applications) => {\n                if (applications && applications.length > 0) {\n                    applications.map((application) => {\n                        this.applicationNames.push({ label: application.name, value: application.name });\n                    });\n                }\n            });\n    }\n\n    getProcessDefinitions() {\n        this.processDefinitionNames = [];\n\n        this.processCloudService.getProcessDefinitions(this.appName).subscribe((processDefinitions) => {\n            if (processDefinitions && processDefinitions.length > 0) {\n                this.processDefinitionNames.push(this.allProcessDefinitionNamesOption);\n                processDefinitions.map((processDefinition) => {\n                    this.processDefinitionNames.push({ label: processDefinition.name, value: processDefinition.name });\n                });\n            }\n        });\n    }\n\n    executeFilterActions(action: ProcessFilterAction): void {\n        if (action.actionType === EditProcessFilterCloudComponent.ACTION_SAVE) {\n            this.save(action);\n        } else if (action.actionType === EditProcessFilterCloudComponent.ACTION_SAVE_AS) {\n            this.saveAs(action);\n        } else if (action.actionType === EditProcessFilterCloudComponent.ACTION_DELETE) {\n            this.delete(action);\n        }\n    }\n\n    save(saveAction: ProcessFilterAction) {\n        this.processFilterCloudService\n            .updateFilter(this.processFilter)\n            .subscribe(() => {\n                saveAction.filter = this.processFilter;\n                this.filterHasBeenChanged = false;\n                this.action.emit(saveAction);\n            });\n    }\n\n    /**\n     * Delete a process instance filter\n     */\n    delete(deleteAction: ProcessFilterAction) {\n        this.processFilterCloudService\n            .deleteFilter(this.processFilter)\n            .pipe(\n                filter((filters) => {\n                    deleteAction.filter = this.processFilter;\n                    this.action.emit(deleteAction);\n                    return filters.length === 0;\n                }),\n                switchMap(() => this.restoreDefaultProcessFilters()))\n            .subscribe(() => {});\n    }\n\n    /**\n     * Save As a process instance filter\n     */\n    saveAs(saveAsAction: ProcessFilterAction) {\n        const dialogRef = this.dialog.open(ProcessFilterDialogCloudComponent, {\n            data: {\n                name: this.translateService.instant(this.processFilter.name)\n            },\n            height: 'auto',\n            minWidth: '30%'\n        });\n        dialogRef.afterClosed().subscribe((result) => {\n            if (result && result.action === ProcessFilterDialogCloudComponent.ACTION_SAVE) {\n                const filterId = Math.random().toString(36).substr(2, 9);\n                const filterKey = this.getSanitizeFilterName(result.name);\n                const newFilter = {\n                    name: result.name,\n                    icon: result.icon,\n                    id: filterId,\n                    key: 'custom-' + filterKey\n                };\n                const resultFilter: ProcessFilterCloudModel = Object.assign({}, this.processFilter, newFilter);\n                this.processFilterCloudService\n                    .addFilter(resultFilter)\n                    .subscribe(() => {\n                        saveAsAction.filter = resultFilter;\n                        this.filterHasBeenChanged = false;\n                        this.action.emit(saveAsAction);\n                    });\n            }\n        });\n    }\n\n    /**\n     * Return filter name\n     * @param filterName\n     */\n    getSanitizeFilterName(filterName: string): string {\n        const nameWithHyphen = this.replaceSpaceWithHyphen(filterName.trim());\n        return nameWithHyphen.toLowerCase();\n    }\n\n    /**\n     * Return name with hyphen\n     * @param name\n     */\n    replaceSpaceWithHyphen(name: string): string {\n        const regExt = new RegExp(' ', 'g');\n        return name.replace(regExt, '-');\n    }\n\n    restoreDefaultProcessFilters(): Observable<ProcessFilterCloudModel[]> {\n        return this.processFilterCloudService.getProcessFilters(this.appName);\n    }\n\n    onExpand() {\n        this.toggleFilterActions = true;\n    }\n\n    onClose() {\n        this.toggleFilterActions = false;\n    }\n\n    isDisabledAction(action: ProcessFilterAction): boolean {\n        return (\n            this.processFilterCloudService.isDefaultFilter(this.processFilter.name) &&\n            this.actionDisabledForDefault.includes(action.actionType)\n        ) ? true : this.hasFilterChanged(action);\n    }\n\n    hasFilterChanged(action: ProcessFilterAction): boolean {\n        return action.actionType === EditProcessFilterCloudComponent.ACTION_SAVE ||\n            action.actionType === EditProcessFilterCloudComponent.ACTION_SAVE_AS ?\n            !this.filterHasBeenChanged : false;\n    }\n\n    private setLastModifiedToFilter(formValues: ProcessFilterCloudModel) {\n        if (formValues.lastModifiedTo && Date.parse(formValues.lastModifiedTo.toString())) {\n            const lastModifiedToFilterValue = moment(formValues.lastModifiedTo);\n            lastModifiedToFilterValue.set({\n                hour: 23,\n                minute: 59,\n                second: 59\n            });\n            formValues.lastModifiedTo = lastModifiedToFilterValue.toDate();\n        }\n    }\n\n    private createFilterActions(): ProcessFilterAction[] {\n        return [\n            {\n                actionType: EditProcessFilterCloudComponent.ACTION_SAVE,\n                icon: 'adf:save',\n                tooltip: 'ADF_CLOUD_EDIT_PROCESS_FILTER.TOOL_TIP.SAVE'\n            },\n            {\n                actionType: EditProcessFilterCloudComponent.ACTION_SAVE_AS,\n                icon: 'adf:save-as',\n                tooltip: 'ADF_CLOUD_EDIT_PROCESS_FILTER.TOOL_TIP.SAVE_AS'\n            },\n            {\n                actionType: EditProcessFilterCloudComponent.ACTION_DELETE,\n                icon: 'delete',\n                tooltip: 'ADF_CLOUD_EDIT_PROCESS_FILTER.TOOL_TIP.DELETE'\n            }\n        ];\n    }\n\n    private createLastModifiedProperty(filterModel: ProcessFilterCloudModel): ProcessFilterProperties[] {\n        let lastModifiedFrom;\n        let lastModifiedTo;\n\n        if (filterModel.lastModifiedFrom) {\n            lastModifiedFrom = moment(filterModel.lastModifiedFrom);\n        }\n\n        if (filterModel.lastModifiedTo) {\n            lastModifiedTo = moment(filterModel.lastModifiedTo);\n        }\n\n        return [\n            {\n                label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.LAST_MODIFIED_DATE_FORM',\n                type: 'date',\n                key: 'lastModifiedFrom',\n                value: lastModifiedFrom\n            },\n            {\n                label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.LAST_MODIFIED_TO',\n                type: 'date',\n                key: 'lastModifiedTo',\n                value: lastModifiedTo\n            }\n        ];\n    }\n\n    private createProcessSortProperties(): ProcessSortFilterProperty[] {\n        return [\n            {\n                label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.ID',\n                key: 'id',\n                value: 'id'\n            },\n            {\n                label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.PROCESS_NAME',\n                key: 'name',\n                value: 'name'\n            },\n            {\n                label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.START_DATE',\n                key: 'startDate',\n                value: 'startDate'\n            },\n            {\n                label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.STATUS',\n                key: 'status',\n                value: 'status'\n            },\n            {\n                label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.STARTED_BY',\n                key: 'initiator',\n                value: 'initiator'\n            },\n            {\n                label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.APP_NAME',\n                key: 'appName',\n                value: 'appName'\n            },\n            {\n                label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.APP_VERSION',\n                key: 'appVersion',\n                value: 'appVersion'\n            },\n            {\n                label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.PROCESS_INS_ID',\n                key: 'processInstanceId',\n                value: 'processInstanceId'\n            },\n            {\n                label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.PROCESS_DEF_ID',\n                key: 'processDefinitionId',\n                value: 'processDefinitionId'\n            },\n            {\n                label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.PROCESS_DEF_NAME',\n                key: 'processDefinitionName',\n                value: 'processDefinitionName'\n            },\n            {\n                label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.PROCESS_DEF_KEY',\n                key: 'processDefinitionKey',\n                value: 'processDefinitionKey'\n            },\n            {\n                label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.LAST_MODIFIED',\n                key: 'lastModified',\n                value: 'lastModified'\n            },\n            {\n                label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.BUSINESS_KEY',\n                key: 'businessKey',\n                value: 'businessKey'\n            }\n        ];\n    }\n\n    private isFilterChanged(oldValue: ProcessFilterCloudModel, newValue: ProcessFilterCloudModel): boolean {\n        const oldJson = JSON.stringify(\n            this.processFilterCloudService.writeQueryParams(oldValue || {}, this.filterProperties)\n        );\n        const newJson = JSON.stringify(\n            this.processFilterCloudService.writeQueryParams(newValue || {}, this.filterProperties)\n        );\n\n        return oldJson !== newJson;\n    }\n\n    private createProcessFilterProperties(filterModel: ProcessFilterCloudModel): ProcessFilterProperties[] {\n        const appVersionMultiple = [];\n\n        if (filterModel.appVersion) {\n            appVersionMultiple.push(\n                Array.isArray(filterModel.appVersion)\n                    ? filterModel.appVersion.map(entry => entry.toString())\n                    : `${filterModel.appVersion}`\n            );\n        }\n\n        return [\n            {\n                label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.APP_NAME',\n                type: 'select',\n                key: 'appName',\n                value: filterModel.appName || '',\n                options: this.applicationNames\n            },\n            {\n                label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.APP_VERSION',\n                type: 'number',\n                key: 'appVersion',\n                value: filterModel.appVersion\n            },\n            {\n                label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.APP_VERSION',\n                type: 'multi-select',\n                key: 'appVersionMultiple',\n                value: appVersionMultiple,\n                options: this.appVersionOptions\n            },\n            {\n                label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.PROCESS_INS_ID',\n                type: 'text',\n                key: 'processInstanceId',\n                value: filterModel.processInstanceId || ''\n            },\n            {\n                label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.PROCESS_NAME',\n                type: 'text',\n                key: 'processName',\n                value: filterModel.processName || ''\n            },\n            {\n                label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.PROCESS_DEF_NAME',\n                type: 'select',\n                key: 'processDefinitionName',\n                value: filterModel.processDefinitionName || '',\n                options: this.processDefinitionNames\n            },\n            {\n                label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.STATUS',\n                type: 'select',\n                key: 'status',\n                value: filterModel.status || this.status[0].value,\n                options: this.status\n            },\n            {\n                label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.PROCESS_DEF_ID',\n                type: 'text',\n                key: 'processDefinitionId',\n                value: filterModel.processDefinitionId || ''\n            },\n            {\n                label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.PROCESS_DEF_KEY',\n                type: 'text',\n                key: 'processDefinitionKey',\n                value: filterModel.processDefinitionKey || ''\n            },\n            {\n                label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.SORT',\n                type: 'select',\n                key: 'sort',\n                value: filterModel.sort || this.createSortProperties[0].value,\n                options: this.createSortProperties\n            },\n            {\n                label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.DIRECTION',\n                type: 'select',\n                key: 'order',\n                value: filterModel.order || this.directions[0].value,\n                options: this.directions\n            },\n            {\n                label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.COMPLETED_DATE',\n                type: 'date',\n                key: 'completedDate',\n                value: filterModel.completedDate || false\n            },\n            {\n                label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.STARTED_BY',\n                type: 'people',\n                key: 'initiator',\n                value: filterModel.initiator,\n                selectionMode: 'multiple'\n            },\n            {\n                label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.COMPLETED_DATE',\n                type: 'date-range',\n                key: 'completedDateRange',\n                attributes: { dateType: 'completedDateType', from: '_completedFrom', to: '_completedTo'},\n                value: {\n                    completedDateType: filterModel.completedDateType || null,\n                    _completedFrom: filterModel.completedFrom || null,\n                    _completedTo: filterModel.completedTo || null\n                }\n            },\n            {\n                label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.STARTED_DATE',\n                type: 'date-range',\n                key: 'startedDateRange',\n                attributes: { dateType: 'startedDateType', from: '_startFrom', to: '_startTo'},\n                value: {\n                    startedDateType: filterModel.startedDateType || null,\n                    _startFrom: filterModel.startFrom || null,\n                    _startTo: filterModel.startTo || null\n                }\n            },\n            {\n                label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.SUSPENDED_DATE',\n                type: 'date-range',\n                key: 'suspendedDateRange',\n                attributes: { dateType: 'suspendedDateType', from: '_suspendedFrom', to: '_suspendedTo'},\n                value: {\n                    suspendedDateType: filterModel.suspendedDateType || null,\n                    _suspendedFrom: filterModel.suspendedFrom || null,\n                    _suspendedTo: filterModel.suspendedTo || null\n                }\n            }\n        ];\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { ProcessFiltersCloudComponent } from './components/process-filters-cloud.component';\nimport { MaterialModule } from '../../material.module';\nimport { CoreModule, MomentDateAdapter, MOMENT_DATE_FORMATS } from '@alfresco/adf-core';\nimport { HttpClientModule } from '@angular/common/http';\nimport { EditProcessFilterCloudComponent } from './components/edit-process-filter-cloud.component';\nimport { ProcessFilterDialogCloudComponent } from './components/process-filter-dialog-cloud.component';\nimport { AppListCloudModule } from './../../app/app-list-cloud.module';\nimport { DateAdapter, MAT_DATE_FORMATS } from '@angular/material/core';\nimport { ProcessCommonModule } from '../../common/process-common.module';\nimport { PeopleCloudModule } from '../../people/people-cloud.module';\n\n@NgModule({\n    imports: [\n        FormsModule,\n        ReactiveFormsModule,\n        HttpClientModule,\n        CommonModule,\n        FlexLayoutModule,\n        MaterialModule,\n        AppListCloudModule,\n        CoreModule,\n        ProcessCommonModule,\n        PeopleCloudModule\n    ],\n    declarations: [ProcessFiltersCloudComponent, EditProcessFilterCloudComponent, ProcessFilterDialogCloudComponent],\n    exports: [ProcessFiltersCloudComponent, EditProcessFilterCloudComponent, ProcessFilterDialogCloudComponent],\n    providers: [\n        { provide: DateAdapter, useClass: MomentDateAdapter },\n        { provide: MAT_DATE_FORMATS, useValue: MOMENT_DATE_FORMATS }\n    ]\n})\nexport class ProcessFiltersCloudModule { }\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Injectable } from '@angular/core';\nimport { AlfrescoApiService, AppConfigService, LogService } from '@alfresco/adf-core';\nimport { ProcessQueryCloudRequestModel } from '../models/process-cloud-query-request.model';\nimport { Observable, throwError } from 'rxjs';\nimport { ProcessListCloudSortingModel } from '../models/process-list-sorting.model';\nimport { BaseCloudService } from '../../../services/base-cloud.service';\nimport { map } from 'rxjs/operators';\n\n@Injectable({ providedIn: 'root' })\nexport class ProcessListCloudService extends BaseCloudService {\n\n    constructor(apiService: AlfrescoApiService,\n                appConfigService: AppConfigService,\n                private logService: LogService) {\n        super(apiService, appConfigService);\n    }\n\n    /**\n     * Finds a process using an object with optional query properties.\n     * @param requestNode Query object\n     * @param queryUrl Query url\n     * @returns Process information\n     */\n    getProcessByRequest(requestNode: ProcessQueryCloudRequestModel, queryUrl?: string): Observable<any> {\n        if (requestNode.appName || requestNode.appName === '') {\n            queryUrl = queryUrl || `${this.getBasePath(requestNode.appName)}/query/v1/process-instances`;\n            const queryParams = this.buildQueryParams(requestNode);\n            const sortingParams = this.buildSortingParam(requestNode.sorting);\n            if (sortingParams) {\n                queryParams['sort'] = sortingParams;\n            }\n\n            return this.get(queryUrl, queryParams).pipe(\n                map((response: any) => {\n                    const entries = response.list && response.list.entries;\n                    if (entries) {\n                        response.list.entries = entries.map((entryData) => {\n                            return entryData.entry;\n                        });\n                    }\n                    return response;\n                })\n            );\n        } else {\n            this.logService.error('Appname is mandatory for querying task');\n            return throwError('Appname not configured');\n        }\n    }\n\n    protected isPropertyValueValid(requestNode: any, property: string): boolean {\n        return requestNode[property] !== '' && requestNode[property] !== null && requestNode[property] !== undefined;\n    }\n\n    protected buildQueryParams(requestNode: ProcessQueryCloudRequestModel): Object {\n        const queryParam = {};\n\n        for (const property in requestNode) {\n            if (requestNode.hasOwnProperty(property) &&\n                !this.isExcludedField(property) &&\n                this.isPropertyValueValid(requestNode, property)) {\n                queryParam[property] = requestNode[property];\n            }\n        }\n\n        if (!queryParam['status']) {\n            queryParam['status'] = this.buildFilterForAllStatus();\n        }\n\n        return queryParam;\n    }\n\n    protected buildFilterForAllStatus(): string[] {\n        return ['RUNNING', 'SUSPENDED', 'CANCELLED', 'COMPLETED'];\n    }\n\n    protected isExcludedField(property: string): boolean {\n        return property === 'appName' || property === 'sorting';\n    }\n\n    protected buildSortingParam(models: ProcessListCloudSortingModel[]): string {\n        let finalSorting: string = '';\n        if (models) {\n            for (const sort of models) {\n                if (!finalSorting) {\n                    finalSorting = `${sort.orderBy},${sort.direction}`;\n                } else {\n                    finalSorting = `${finalSorting}&${sort.orderBy},${sort.direction}`;\n                }\n            }\n        }\n        return encodeURI(finalSorting);\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport let processCloudPresetsDefaultModel = {\n    'default': [\n        {\n            'key': 'name',\n            'type': 'text',\n            'title': 'ADF_CLOUD_PROCESS_LIST.PROPERTIES.NAME',\n            'sortable': true\n        },\n        {\n            'key': 'startDate',\n            'type': 'date',\n            'title': 'ADF_CLOUD_PROCESS_LIST.PROPERTIES.START_DATE',\n            'cssClass': 'hidden',\n            'sortable': true,\n            'format': 'timeAgo'\n        }\n    ]\n};\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ProcessListCloudSortingModel } from './process-list-sorting.model';\n\nexport class ProcessQueryCloudRequestModel {\n   appName: string;\n   appVersion?: number | string;\n   initiator?: null;\n   id?: string;\n   name?: string;\n   processDefinitionId?: string;\n   processDefinitionName?: string;\n   processDefinitionKey?: string;\n   status?: string;\n   startDate?: string;\n   businessKey?: string;\n   lastModified?: string;\n   lastModifiedTo?: string;\n   lastModifiedFrom?: string;\n   startFrom?: string;\n   startTo?: string;\n   completedFrom?: string;\n   completedTo?: string;\n   suspendedFrom?: string;\n   suspendedTo?: string;\n   completedDate?: string;\n   maxItems: number;\n   skipCount: number;\n   sorting?: ProcessListCloudSortingModel[];\n    constructor(obj?: any) {\n       if (obj) {\n           this.appName = obj.appName;\n           this.appVersion = obj.appVersion;\n           this.initiator = obj.initiator;\n           this.id = obj.id;\n           this.name = obj.name;\n           this.processDefinitionId = obj.processDefinitionId;\n           this.processDefinitionName = obj.processDefinitionName;\n           this.processDefinitionKey = obj.processDefinitionKey;\n           this.status = obj.status;\n           this.startDate = obj.startDate;\n           this.businessKey = obj.businessKey;\n           this.lastModified = obj.lastModified;\n           this.lastModifiedTo = obj.lastModifiedTo;\n           this.lastModifiedFrom = obj.lastModifiedFrom;\n           this.startFrom = obj.startFrom;\n           this.startTo = obj.startTo;\n           this.completedFrom = obj.completedFrom;\n           this.completedTo = obj.completedTo;\n           this.suspendedFrom = obj.suspendedFrom;\n           this.suspendedTo = obj.suspendedTo;\n           this.completedDate = obj.completedDate;\n           this.maxItems = obj.maxItems;\n           this.skipCount = obj.skipCount;\n           this.sorting = obj.sorting;\n       }\n   }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport class ProcessListCloudSortingModel {\n    orderBy: string;\n    direction: string;\n     constructor(obj: any) {\n        if (obj) {\n            this.orderBy = obj.orderBy;\n            this.direction = obj.direction;\n        }\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, ViewEncapsulation, OnChanges, AfterContentInit, ContentChild, Output, EventEmitter, SimpleChanges, Input, ViewChild } from '@angular/core';\nimport { DataTableSchema, PaginatedComponent,\n         CustomEmptyContentTemplateDirective, AppConfigService,\n         UserPreferencesService, PaginationModel,\n         UserPreferenceValues, DataRowEvent, CustomLoadingContentTemplateDirective, DataCellEvent, DataRowActionEvent, DataTableComponent } from '@alfresco/adf-core';\nimport { ProcessListCloudService } from '../services/process-list-cloud.service';\nimport { BehaviorSubject } from 'rxjs';\nimport { processCloudPresetsDefaultModel } from '../models/process-cloud-preset.model';\nimport { ProcessQueryCloudRequestModel } from '../models/process-cloud-query-request.model';\nimport { ProcessListCloudSortingModel } from '../models/process-list-sorting.model';\n\n@Component({\n    selector: 'adf-cloud-process-list',\n    templateUrl: './process-list-cloud.component.html',\n    styleUrls: ['./process-list-cloud.component.scss'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class ProcessListCloudComponent extends DataTableSchema implements OnChanges, AfterContentInit, PaginatedComponent {\n\n    static PRESET_KEY = 'adf-cloud-process-list.presets';\n\n    @ViewChild(DataTableComponent)\n    dataTable: DataTableComponent;\n\n    @ContentChild(CustomEmptyContentTemplateDirective)\n    emptyCustomContent: CustomEmptyContentTemplateDirective;\n\n    @ContentChild(CustomLoadingContentTemplateDirective)\n    customLoadingContent: CustomLoadingContentTemplateDirective;\n\n    /** The name of the application. */\n    @Input()\n    appName: string = '';\n\n    /** The version of the application. */\n    @Input()\n    appVersion: number | number[];\n\n    /** Name of the initiator of the process. */\n    @Input()\n    initiator: string = '';\n\n    /** Filter the processes to display only the ones with this ID. */\n    @Input()\n    id: string = '';\n\n    /** Filter the processes to display only the ones with this name. */\n    @Input()\n    name: string = '';\n\n    /** Filter the processes to display only the ones with this process definition ID. */\n    @Input()\n    processDefinitionId: string = '';\n\n    /** Filter the processes to display only the ones with this process definition name. */\n    @Input()\n    processDefinitionName: string = '';\n\n    /** Filter the processes to display only the ones with this process definition key. */\n    @Input()\n    processDefinitionKey: string = '';\n\n    /** Filter the processes to display only the ones with this status. */\n    @Input()\n    status: string = '';\n\n    /** Filter the processes to display only the ones with this businessKey value. */\n    @Input()\n    businessKey: string = '';\n\n    /** Filter the processes. Display only process with lastModifiedTo equal to the supplied date. */\n    @Input()\n    lastModifiedFrom: Date;\n\n    /** Filter the processes. Display only process with lastModifiedTo equal to the supplied date. */\n    @Input()\n    lastModifiedTo: Date;\n\n    /** Filter the processes. Display only process with startedDate greater then the supplied date. */\n    @Input()\n    startFrom: string = '';\n\n    /** Filter the processes. Display only process with startedDate less than the supplied date. */\n    @Input()\n    startTo: string = '';\n\n    /** Filter the processes. Display only process with completedFrom equal to the supplied date. */\n    @Input()\n    completedFrom: string = '';\n\n    /** Filter the processes. Display only process with completedTo equal to the supplied date. */\n    @Input()\n    completedTo: string = '';\n\n    /** Filter the processes. Display only process with completedDate equal to the supplied date. */\n    @Input()\n    completedDate: string = '';\n\n    /** Filter the processes. Display only process with suspendedFrom equal to the supplied date. */\n    @Input()\n    suspendedFrom: string = '';\n\n    /** Filter the processes. Display only process with suspendedTo equal to the supplied date. */\n    @Input()\n    suspendedTo: string = '';\n\n    /**\n     * Row selection mode. Can be \"none\", \"single\" or \"multiple\".\n     * For multiple mode, you can use Cmd (macOS) or Ctrl (Win) modifier\n     * key to toggle selection for multiple rows.\n     */\n    @Input()\n    selectionMode: string = 'single'; // none|single|multiple\n\n    /** Toggles multiple row selection and renders checkboxes at the beginning of each row */\n    @Input()\n    multiselect: boolean = false;\n\n    /**\n     * Array of objects specifying the sort order and direction for the\n     * list. The sort parameters are for BE sorting.\n     */\n    @Input()\n    sorting: ProcessListCloudSortingModel[];\n\n    /** Toggles the data actions column. */\n    @Input()\n    showActions: boolean = false;\n\n    /** Position of the actions dropdown menu. Can be \"left\" or \"right\". */\n    @Input()\n    actionsPosition: string = 'right'; // left|right\n\n    /** Toggles the sticky header mode. */\n    @Input()\n    stickyHeader: boolean = false;\n\n    /** Toggles custom context menu for the component. */\n    @Input()\n    showContextMenu: boolean = false;\n\n    /** Emitted when a row in the process list is clicked. */\n    @Output()\n    rowClick: EventEmitter<string> = new EventEmitter<string>();\n\n    /** Emitted when rows are selected/unselected. */\n    @Output()\n    rowsSelected: EventEmitter<any[]> = new EventEmitter<any[]>();\n\n    /** Emitted before the context menu is displayed for a row. */\n    @Output()\n    showRowContextMenu = new EventEmitter<DataCellEvent>();\n\n    /** Emitted before the actions menu is displayed for a row. */\n    @Output()\n    showRowActionsMenu = new EventEmitter<DataCellEvent>();\n\n    /** Emitted when the user executes a row action. */\n    @Output()\n    executeRowAction = new EventEmitter<DataRowActionEvent>();\n\n    /** Emitted when an error occurs while loading the list of process instances from the server. */\n    @Output()\n    error: EventEmitter<any> = new EventEmitter<any>();\n\n    /** Emitted when the list of process instances has been loaded successfully from the server. */\n    @Output()\n    success: EventEmitter<any> = new EventEmitter<any>();\n\n    pagination: BehaviorSubject<PaginationModel>;\n    size: number;\n    skipCount: number = 0;\n    currentInstanceId: string;\n    selectedInstances: any[];\n    isLoading = true;\n    rows: any[] = [];\n    formattedSorting: any[];\n    requestNode: ProcessQueryCloudRequestModel;\n    private defaultSorting = { key: 'startDate', direction: 'desc' };\n\n    constructor(private processListCloudService: ProcessListCloudService,\n                appConfigService: AppConfigService,\n                private userPreferences: UserPreferencesService) {\n        super(appConfigService, ProcessListCloudComponent.PRESET_KEY, processCloudPresetsDefaultModel);\n        this.size = userPreferences.paginationSize;\n        this.userPreferences.select(UserPreferenceValues.PaginationSize).subscribe((pageSize) => {\n            this.size = pageSize;\n        });\n        this.pagination = new BehaviorSubject<PaginationModel>(<PaginationModel> {\n            maxItems: this.size,\n            skipCount: 0,\n            totalItems: 0\n        });\n    }\n\n    ngAfterContentInit() {\n        this.createDatatableSchema();\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (this.isPropertyChanged(changes, 'sorting')) {\n            this.formatSorting(changes['sorting'].currentValue);\n        }\n        if (this.isAnyPropertyChanged(changes)) {\n            this.reload();\n        }\n    }\n\n    getCurrentId(): string {\n        return this.currentInstanceId;\n    }\n\n    reload() {\n        this.requestNode = this.createRequestNode();\n        if (this.requestNode.appName || this.requestNode.appName === '') {\n            this.load(this.requestNode);\n        } else {\n            this.rows = [];\n        }\n    }\n\n    private load(requestNode: ProcessQueryCloudRequestModel) {\n        this.isLoading = true;\n        this.processListCloudService.getProcessByRequest(requestNode).subscribe(\n            (processes) => {\n                this.rows = processes.list.entries;\n                this.success.emit(processes);\n                this.isLoading = false;\n                this.pagination.next(processes.list.pagination);\n            }, (error) => {\n                this.error.emit(error);\n                this.isLoading = false;\n            });\n    }\n\n    private isAnyPropertyChanged(changes: SimpleChanges): boolean {\n        for (const property in changes) {\n            if (this.isPropertyChanged(changes, property)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    private isPropertyChanged(changes: SimpleChanges, property: string): boolean {\n        return changes.hasOwnProperty(property);\n    }\n\n    isListEmpty(): boolean {\n        return !this.rows || this.rows.length === 0;\n    }\n\n    /**\n     * Resets the pagination values\n     */\n    resetPagination() {\n        this.skipCount = 0;\n        this.size = this.userPreferences.paginationSize;\n        this.pagination.next({\n            skipCount: 0,\n            maxItems: this.size\n        });\n    }\n\n    /**\n     * Resets the pagination values and\n     * Reloads the process list\n     * @param pagination Pagination values to be set\n     */\n    updatePagination(pagination: PaginationModel) {\n        this.size = pagination.maxItems;\n        this.skipCount = pagination.skipCount;\n        this.pagination.next(pagination);\n        this.reload();\n    }\n\n    onSortingChanged(event: CustomEvent) {\n        this.setSorting(event.detail);\n        this.formatSorting(this.sorting);\n        this.reload();\n    }\n\n    onRowClick(item: DataRowEvent) {\n        this.currentInstanceId = item.value.getValue('id');\n        this.rowClick.emit(this.currentInstanceId);\n    }\n\n    onRowSelect(event: CustomEvent) {\n        this.selectedInstances = [...event.detail.selection];\n        this.rowsSelected.emit(this.selectedInstances);\n    }\n\n    onRowUnselect(event: CustomEvent) {\n        this.selectedInstances = [...event.detail.selection];\n        this.rowsSelected.emit(this.selectedInstances);\n    }\n\n    onRowKeyUp(event: CustomEvent) {\n        if (event.detail.keyboardEvent.key === 'Enter') {\n            event.preventDefault();\n            this.currentInstanceId = event.detail.row.getValue('id');\n            this.rowClick.emit(this.currentInstanceId);\n        }\n    }\n\n    onShowRowActionsMenu(event: DataCellEvent) {\n        this.showRowActionsMenu.emit(event);\n    }\n\n    onShowRowContextMenu(event: DataCellEvent) {\n        this.showRowContextMenu.emit(event);\n    }\n\n    onExecuteRowAction(row: DataRowActionEvent) {\n        this.executeRowAction.emit(row);\n    }\n\n    private createRequestNode(): ProcessQueryCloudRequestModel {\n        const requestNode = {\n            appName: this.appName,\n            appVersion: this.getAppVersions(),\n            maxItems: this.size,\n            skipCount: this.skipCount,\n            initiator: this.initiator,\n            id: this.id,\n            name: this.name,\n            processDefinitionId: this.processDefinitionId,\n            processDefinitionName: this.processDefinitionName,\n            processDefinitionKey: this.processDefinitionKey,\n            status: this.status,\n            businessKey: this.businessKey,\n            lastModifiedFrom: this.lastModifiedFrom,\n            lastModifiedTo: this.lastModifiedTo,\n            startFrom: this.startFrom,\n            startTo: this.startTo,\n            completedFrom: this.completedFrom,\n            completedTo: this.completedTo,\n            suspendedFrom: this.suspendedFrom,\n            suspendedTo: this.suspendedTo,\n            completedDate: this.completedDate,\n            sorting: this.sorting\n        };\n        return new ProcessQueryCloudRequestModel(requestNode);\n    }\n\n    getAppVersions(): string {\n        return this.appVersion instanceof Array ? this.appVersion.join(',') : (this.appVersion ? String(this.appVersion) : '');\n    }\n\n    setSorting(sortDetail) {\n        const sorting = sortDetail ? {\n            orderBy: sortDetail.key,\n            direction: sortDetail.direction.toUpperCase()\n        } : { ... this.defaultSorting };\n        this.sorting = [new ProcessListCloudSortingModel(sorting)];\n    }\n\n    formatSorting(sorting: ProcessListCloudSortingModel[]) {\n        this.formattedSorting = this.isValidSorting(sorting) ? [\n            sorting[0].orderBy,\n            sorting[0].direction.toLocaleLowerCase()\n        ] : null;\n    }\n\n    isValidSorting(sorting: ProcessListCloudSortingModel[]) {\n        return sorting.length && sorting[0].orderBy && sorting[0].direction;\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ProcessListCloudComponent } from './components/process-list-cloud.component';\nimport { MaterialModule } from '../../material.module';\nimport { CoreModule } from '@alfresco/adf-core';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        MaterialModule,\n        CoreModule\n\n    ],\n    declarations: [ProcessListCloudComponent],\n    exports: [ProcessListCloudComponent]\n})\nexport class ProcessListCloudModule { }\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AlfrescoApiService, AppConfigService, LogService } from '@alfresco/adf-core';\nimport { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { ProcessInstanceCloud } from '../models/process-instance-cloud.model';\nimport { ProcessPayloadCloud } from '../models/process-payload-cloud.model';\nimport { ProcessDefinitionCloud } from '../../../models/process-definition-cloud.model';\nimport { BaseCloudService } from '../../../services/base-cloud.service';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class StartProcessCloudService extends BaseCloudService {\n\n    constructor(apiService: AlfrescoApiService,\n                private logService: LogService,\n                appConfigService: AppConfigService) {\n        super(apiService, appConfigService);\n    }\n\n    /**\n     * Gets the process definitions associated with an app.\n     * @param appName Name of the target app\n     * @returns Array of process definitions\n     */\n    getProcessDefinitions(appName: string): Observable<ProcessDefinitionCloud[]> {\n        if (appName || appName === '') {\n            const url = `${this.getBasePath(appName)}/rb/v1/process-definitions`;\n\n            return this.get(url).pipe(\n                map((res: any) => {\n                    return res.list.entries.map((processDefs) => new ProcessDefinitionCloud(processDefs.entry));\n                })\n            );\n        } else {\n            this.logService.error('AppName is mandatory for querying task');\n            return throwError('AppName not configured');\n        }\n    }\n\n    /**\n     * Create a process based on a process definition, name, form values or variables.\n     * @param appName name of the Application\n     * @param payload Details of the process (definition key, name, variables, etc)\n     * @returns Details of the process instance just created\n     */\n    createProcess(appName: string, payload: ProcessPayloadCloud): Observable<ProcessInstanceCloud> {\n        const url = `${this.getBasePath(appName)}/rb/v1/process-instances/create`;\n        payload.payloadType = 'CreateProcessInstancePayload';\n\n        return this.post(url, payload).pipe(\n            map((result: any) => result.entry)\n        );\n    }\n\n    /**\n     * Starts an already created process using the process instance id.\n     * @param createdProcessInstanceId process instance id of the process previously created\n     * @returns Details of the process instance just started\n     */\n    startCreatedProcess(appName: string, createdProcessInstanceId: string, payload: ProcessPayloadCloud): Observable<ProcessInstanceCloud> {\n        const url = `${this.getBasePath(appName)}/rb/v1/process-instances/${createdProcessInstanceId}/start`;\n\n        return this.post(url, payload).pipe(\n            map((result: any) => result.entry)\n        );\n    }\n\n    /**\n     * Starts a process based on a process definition, name, form values or variables.\n     * @param appName name of the Application\n     * @param payload Details of the process (definition key, name, variables, etc)\n     * @returns Details of the process instance just started\n     */\n    startProcess(appName: string, payload: ProcessPayloadCloud): Observable<ProcessInstanceCloud> {\n        const url = `${this.getBasePath(appName)}/rb/v1/process-instances`;\n        payload.payloadType = 'StartProcessPayload';\n\n        return this.post(url, payload);\n    }\n\n    /**\n     * Update an existing process instance\n     * @param appName name of the Application\n     * @param processInstanceId process instance to update\n     * @param payload Details of the process (definition key, name, variables, etc)\n     * @returns Details of the process instance just started\n     */\n    updateProcess(appName: string, processInstanceId: string, payload: ProcessPayloadCloud): Observable<ProcessInstanceCloud> {\n        const url = `${this.getBasePath(appName)}/rb/v1/process-instances/${processInstanceId}`;\n        payload.payloadType = 'UpdateProcessPayload';\n\n        return this.put(url, payload).pipe(\n            map((processInstance: any) => processInstance.entry)\n        );\n    }\n\n    /**\n     * Delete an existing process instance\n     * @param appName name of the Application\n     * @param processInstanceId process instance to update\n     */\n    deleteProcess(appName: string, processInstanceId: string): Observable<void> {\n        const url = `${this.getBasePath(appName)}/rb/v1/process-instances/${processInstanceId}`;\n\n        return this.delete(url);\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport class ProcessPayloadCloud {\n    processDefinitionKey: string;\n    name: string;\n    businessKey: string;\n    variables: {};\n    payloadType: string = 'StartProcessPayload';\n\n    constructor(obj?: any) {\n        this.processDefinitionKey = obj && obj.processDefinitionKey ? obj.processDefinitionKey : null;\n        this.name = obj && obj.name ? obj.name : null;\n        this.businessKey = obj && obj.businessKey ? obj.businessKey : null;\n        this.variables = obj && obj.variables ? obj.variables : {};\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Pipe, PipeTransform } from '@angular/core';\nimport moment from 'moment-es6';\nimport { LocalizedDatePipe } from '@alfresco/adf-core';\nimport { ProcessInstanceCloud } from '../process/start-process/models/process-instance-cloud.model';\n\n@Pipe({ name: 'processNameCloud' })\nexport class ProcessNameCloudPipe implements PipeTransform {\n    static DATE_TIME_IDENTIFIER_REG_EXP = new RegExp('%{datetime}', 'i');\n    static PROCESS_DEFINITION_IDENTIFIER_REG_EXP = new RegExp('%{processdefinition}', 'i');\n\n    constructor(private localizedDatePipe: LocalizedDatePipe) {\n    }\n\n    transform(processNameFormat: string, processInstance?: ProcessInstanceCloud): string {\n        let processName = processNameFormat;\n        if (processName.match(ProcessNameCloudPipe.DATE_TIME_IDENTIFIER_REG_EXP)) {\n            const presentDateTime = moment.now();\n            processName = processName.replace(\n                ProcessNameCloudPipe.DATE_TIME_IDENTIFIER_REG_EXP,\n                this.localizedDatePipe.transform(presentDateTime, 'medium')\n            );\n        }\n\n        if (processName.match(ProcessNameCloudPipe.PROCESS_DEFINITION_IDENTIFIER_REG_EXP)) {\n            const selectedProcessDefinitionName = processInstance ? processInstance.processDefinitionName : '';\n            processName = processName.replace(\n                ProcessNameCloudPipe.PROCESS_DEFINITION_IDENTIFIER_REG_EXP,\n                selectedProcessDefinitionName\n            );\n        }\n        return processName;\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n    Component, EventEmitter, Input, OnChanges, OnInit,\n    Output, SimpleChanges, ViewChild, ViewEncapsulation, OnDestroy, HostListener\n} from '@angular/core';\n\nimport { ProcessInstanceCloud } from '../models/process-instance-cloud.model';\nimport { StartProcessCloudService } from '../services/start-process-cloud.service';\nimport { FormControl, Validators, FormGroup, AbstractControl, FormBuilder, ValidatorFn } from '@angular/forms';\nimport { FormModel, ContentLinkModel } from '@alfresco/adf-core';\nimport { MatAutocompleteTrigger } from '@angular/material/autocomplete';\nimport { ProcessPayloadCloud } from '../models/process-payload-cloud.model';\nimport { debounceTime, takeUntil, switchMap, filter, distinctUntilChanged, tap } from 'rxjs/operators';\nimport { ProcessDefinitionCloud } from '../../../models/process-definition-cloud.model';\nimport { Subject, Observable } from 'rxjs';\nimport { TaskVariableCloud } from '../../../form/models/task-variable-cloud.model';\nimport { ProcessNameCloudPipe } from '../../../pipes/process-name-cloud.pipe';\n@Component({\n    selector: 'adf-cloud-start-process',\n    templateUrl: './start-process-cloud.component.html',\n    styleUrls: ['./start-process-cloud.component.scss'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class StartProcessCloudComponent implements OnChanges, OnInit, OnDestroy {\n\n    static MAX_NAME_LENGTH: number = 255;\n    static PROCESS_DEFINITION_DEBOUNCE: number = 300;\n    static PROCESS_FORM_DEBOUNCE: number = 400;\n\n    @ViewChild(MatAutocompleteTrigger)\n    inputAutocomplete: MatAutocompleteTrigger;\n\n    /** (required) Name of the app. */\n    @Input()\n    appName: string = '';\n\n    /** Maximum length of the process name. */\n    @Input()\n    maxNameLength: number = StartProcessCloudComponent.MAX_NAME_LENGTH;\n\n    /** Name of the process. */\n    @Input()\n    name: string = '';\n\n    /** Name of the process definition. */\n    @Input()\n    processDefinitionName: string;\n\n    /** Variables to attach to the payload. */\n    @Input()\n    variables: {};\n\n    /** Parameter to pass form field values in the start form if one is associated. */\n    @Input()\n    values: TaskVariableCloud[];\n\n    /** Show/hide the process dropdown list. */\n    @Input()\n    showSelectProcessDropdown: boolean = true;\n\n    /** Emitted when the process is successfully started. */\n    @Output()\n    success = new EventEmitter<ProcessInstanceCloud>();\n\n    /** Emitted when the starting process is cancelled */\n    @Output()\n    cancel = new EventEmitter<ProcessInstanceCloud>();\n\n    /** Emitted when an error occurs. */\n    @Output()\n    error = new EventEmitter<ProcessInstanceCloud>();\n\n    /** Emitted when form content is clicked. */\n    @Output()\n    formContentClicked: EventEmitter<ContentLinkModel> = new EventEmitter();\n\n    /** Emitted when process definition selection changes. */\n    @Output()\n    processDefinitionSelection: EventEmitter<ProcessDefinitionCloud> = new EventEmitter<ProcessDefinitionCloud>();\n\n    processDefinitionList: ProcessDefinitionCloud[] = [];\n    processDefinitionCurrent: ProcessDefinitionCloud;\n    errorMessageId: string = '';\n    processForm: FormGroup;\n    processPayloadCloud = new ProcessPayloadCloud();\n    filteredProcesses: ProcessDefinitionCloud[] = [];\n    isLoading = false;\n    isFormCloudLoaded = false;\n    formCloud: FormModel;\n    currentCreatedProcess: ProcessInstanceCloud;\n    disableStartButton: boolean = true;\n\n    protected onDestroy$ = new Subject<boolean>();\n    processDefinitionLoaded = false;\n\n    constructor(private startProcessCloudService: StartProcessCloudService,\n                private formBuilder: FormBuilder,\n                private processNameCloudPipe: ProcessNameCloudPipe) {\n    }\n\n    ngOnInit() {\n        this.processForm = this.formBuilder.group({\n            processInstanceName: new FormControl('', [Validators.required, Validators.maxLength(this.getMaxNameLength()), Validators.pattern('^[^\\\\s]+(\\\\s+[^\\\\s]+)*$')]),\n            processDefinition: new FormControl(this.processDefinitionName, [Validators.required, this.processDefinitionNameValidator()])\n        });\n\n        this.processDefinition.valueChanges\n            .pipe(debounceTime(StartProcessCloudComponent.PROCESS_DEFINITION_DEBOUNCE))\n            .pipe(takeUntil(this.onDestroy$))\n            .subscribe((processDefinitionName) => {\n                this.selectProcessDefinitionByProcesDefinitionName(processDefinitionName);\n            });\n\n        this.processForm.valueChanges\n            .pipe(\n                debounceTime(StartProcessCloudComponent.PROCESS_FORM_DEBOUNCE),\n                tap(() => this.disableStartButton = true),\n                distinctUntilChanged(),\n                filter(() => this.isProcessSelectionValid()),\n                switchMap(() => this.generateProcessInstance())\n            ).pipe(takeUntil(this.onDestroy$))\n            .subscribe((res) => {\n                this.currentCreatedProcess = res;\n                this.disableStartButton = false;\n            });\n\n        if (this.processDefinitionName) {\n            this.processDefinition.setValue(this.processDefinitionName);\n            this.processDefinition.markAsDirty();\n            this.processDefinition.markAsTouched();\n        }\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes['appName'] && changes['appName'].currentValue !== changes['appName'].previousValue) {\n            this.appName = changes['appName'].currentValue;\n\n            if (this.appName || this.appName === '') {\n                this.loadProcessDefinitions();\n            }\n        }\n    }\n\n    @HostListener('keydown', ['$event'])\n    onKeyDown(event: KeyboardEvent) {\n        event.cancelBubble = true;\n    }\n\n    hasForm(): boolean {\n        return this.processDefinitionCurrent && !!this.processDefinitionCurrent.formKey;\n    }\n\n    onFormLoaded(form: FormModel) {\n        this.isFormCloudLoaded = true;\n        this.formCloud = form;\n    }\n\n    private isProcessSelectionValid(): boolean {\n        return this.processForm.valid && this.isProcessPayloadValid();\n    }\n\n    private getMaxNameLength(): number {\n        return this.maxNameLength > StartProcessCloudComponent.MAX_NAME_LENGTH ?\n            StartProcessCloudComponent.MAX_NAME_LENGTH : this.maxNameLength;\n    }\n\n    private generateProcessInstance(): Observable<ProcessInstanceCloud> {\n        const createPayload: ProcessPayloadCloud = new ProcessPayloadCloud({\n            name: this.processInstanceName.value,\n            processDefinitionKey: this.processPayloadCloud.processDefinitionKey\n        });\n\n        if (this.currentCreatedProcess && this.processPayloadCloud.processDefinitionKey === this.currentCreatedProcess.processDefinitionKey) {\n            return this.startProcessCloudService.updateProcess(this.appName, this.currentCreatedProcess.id, createPayload);\n        } else {\n            return this.startProcessCloudService.createProcess(this.appName, createPayload);\n        }\n    }\n\n    private selectProcessDefinitionByProcesDefinitionName(processDefinitionName: string): void {\n        this.filteredProcesses = this.getProcessDefinitionListByNameOrKey(processDefinitionName);\n        if (this.isProcessFormValid() &&\n            this.filteredProcesses && this.filteredProcesses.length === 1) {\n            this.setProcessDefinitionOnForm(this.filteredProcesses[0].name);\n        }\n    }\n\n    setProcessDefinitionOnForm(selectedProcessDefinitionName: string) {\n        this.processDefinitionCurrent = this.filteredProcesses.find((process: ProcessDefinitionCloud) =>\n            process.name === selectedProcessDefinitionName || process.key === selectedProcessDefinitionName);\n\n        this.isFormCloudLoaded = false;\n        this.processPayloadCloud.processDefinitionKey = this.processDefinitionCurrent.key;\n    }\n\n    private getProcessDefinitionListByNameOrKey(processDefinitionName: string): ProcessDefinitionCloud[] {\n        return this.processDefinitionList.filter((processDefinitionCloud) => {\n            return !processDefinitionName || this.getProcessDefinition(processDefinitionCloud, processDefinitionName);\n        });\n    }\n\n    private getProcessIfExists(processDefinition: string): ProcessDefinitionCloud {\n        let matchedProcess = this.processDefinitionList.find((option) => this.getProcessDefinition(option, processDefinition));\n        if (!matchedProcess) {\n            matchedProcess = new ProcessDefinitionCloud();\n        }\n\n        return matchedProcess;\n    }\n\n    private getProcessDefinitionByName(processDefinitionName: string): ProcessDefinitionCloud {\n        const matchedProcess = processDefinitionName ? this.getProcessIfExists(processDefinitionName) : this.processDefinitionList[0];\n        return matchedProcess;\n    }\n\n    private selectDefaultProcessDefinition() {\n        const selectedProcess = this.getProcessDefinitionByName(this.processDefinitionName);\n        if (selectedProcess) {\n            this.processDefinition.setValue(selectedProcess.name);\n            this.processDefinitionSelectionChanged(selectedProcess);\n        }\n    }\n\n    public loadProcessDefinitions() {\n        this.resetErrorMessage();\n\n        this.startProcessCloudService.getProcessDefinitions(this.appName)\n            .pipe(\n                tap(() => this.processDefinitionLoaded = true),\n                takeUntil(this.onDestroy$))\n            .subscribe((processDefinitionRepresentations: ProcessDefinitionCloud[]) => {\n                    this.processDefinitionList = processDefinitionRepresentations;\n                    if (processDefinitionRepresentations.length === 1) {\n                        this.selectDefaultProcessDefinition();\n                    } else if (this.processDefinitionName) {\n                        this.processDefinition.setValue(this.processDefinitionName);\n                    }\n                },\n                () => {\n                    this.errorMessageId = 'ADF_CLOUD_PROCESS_LIST.ADF_CLOUD_START_PROCESS.ERROR.LOAD_PROCESS_DEFS';\n                });\n    }\n\n    private isValidName(name: string): boolean {\n        return !!name;\n    }\n\n    isProcessFormValid(): boolean {\n        if (this.hasForm() && this.isFormCloudLoaded) {\n            return this.formCloud.isValid || this.isLoading;\n        } else {\n            return this.processForm.valid || this.isLoading;\n        }\n    }\n\n    private isProcessPayloadValid(): boolean {\n        return !!this.processPayloadCloud.processDefinitionKey;\n    }\n\n    private getProcessDefinition(processDefinitionCloud: ProcessDefinitionCloud, processDefinitionName: string): boolean {\n        return (this.isValidName(processDefinitionCloud.name) && processDefinitionCloud.name.toLowerCase().includes(processDefinitionName.toLowerCase())) ||\n            (processDefinitionCloud.key && processDefinitionCloud.key.toLowerCase().includes(processDefinitionName.toLowerCase()));\n    }\n\n    isProcessDefinitionsEmpty(): boolean {\n        return this.processDefinitionList.length === 0;\n    }\n\n    buildProcessCloudPayload() {\n        this.processPayloadCloud.name = this.processInstanceName.value;\n        if (this.variables) {\n            this.processPayloadCloud.variables = this.variables;\n        }\n\n        if (this.hasForm()) {\n            this.processPayloadCloud.variables = Object.assign(this.processPayloadCloud.variables, this.formCloud.values);\n        }\n    }\n\n    startProcess() {\n        this.isLoading = true;\n        this.buildProcessCloudPayload();\n        this.startProcessCloudService.startCreatedProcess(this.appName,\n            this.currentCreatedProcess.id,\n            this.processPayloadCloud)\n            .subscribe(\n                (res) => {\n                    this.success.emit(res);\n                    this.isLoading = false;\n                },\n                (err) => {\n                    this.errorMessageId = 'ADF_CLOUD_PROCESS_LIST.ADF_CLOUD_START_PROCESS.ERROR.START';\n                    this.error.emit(err);\n                    this.isLoading = false;\n                }\n            );\n    }\n\n    async cancelStartProcess() {\n        if (this.currentCreatedProcess) {\n            await this.startProcessCloudService.deleteProcess(this.appName, this.currentCreatedProcess.id);\n        }\n\n        this.currentCreatedProcess = null;\n        this.cancel.emit();\n    }\n\n    private resetErrorMessage() {\n        this.errorMessageId = '';\n    }\n\n    private resetProcessDefinitionList() {\n        this.processDefinition.setValue('');\n        this.filteredProcesses = this.processDefinitionList;\n    }\n\n    displayProcessNameOnDropdown(process: any) {\n        if (process) {\n            let processName = process;\n            if (typeof process !== 'string') {\n                processName = process.name;\n            }\n            return processName;\n        }\n    }\n\n    displayDropdown(event) {\n        event.stopPropagation();\n        if (!this.inputAutocomplete.panelOpen) {\n            this.resetProcessDefinitionList();\n            this.inputAutocomplete.openPanel();\n        } else {\n            this.inputAutocomplete.closePanel();\n        }\n    }\n\n    processDefinitionNameValidator(): ValidatorFn {\n        return (control: AbstractControl): { [key: string]: any } | null => {\n            const processDefinitionFieldValue = control.value;\n            let processDefinitionNameError = false;\n\n            if (processDefinitionFieldValue) {\n                const processDefinition = this.getProcessIfExists(processDefinitionFieldValue);\n                if (!processDefinition.key) {\n                    processDefinitionNameError = true;\n                }\n            }\n\n            return processDefinitionNameError ? { 'invalid name': true } : null;\n        };\n    }\n\n    getProcessDefinitionValue(process: ProcessDefinitionCloud): string {\n        return !!process.name ? process.name : process.key;\n    }\n\n    get processInstanceName(): AbstractControl {\n        return this.processForm.get('processInstanceName');\n    }\n\n    get processDefinition(): AbstractControl {\n        return this.processForm.get('processDefinition');\n    }\n\n    onFormContentClicked(content: ContentLinkModel) {\n        this.formContentClicked.emit(content);\n    }\n\n    processDefinitionSelectionChanged(processDefinition: ProcessDefinitionCloud) {\n        if (processDefinition) {\n            const processInstanceDetails: ProcessInstanceCloud = { processDefinitionName: processDefinition.name };\n            const defaultProcessName = this.processNameCloudPipe.transform(this.name, processInstanceDetails);\n            this.processInstanceName.setValue(defaultProcessName);\n            this.processInstanceName.markAsDirty();\n            this.processInstanceName.markAsTouched();\n            this.processDefinitionSelection.emit(processDefinition);\n        }\n    }\n\n    ngOnDestroy() {\n        this.onDestroy$.next(true);\n        this.onDestroy$.complete();\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { MaterialModule } from '../../material.module';\nimport { FormCloudModule } from '../../form/form-cloud.module';\nimport { StartProcessCloudComponent } from './components/start-process-cloud.component';\nimport { CoreModule } from '@alfresco/adf-core';\n@NgModule({\n    imports: [\n        FormsModule,\n        CommonModule,\n        FormCloudModule,\n        MaterialModule,\n        FlexLayoutModule,\n        ReactiveFormsModule,\n        CoreModule\n    ],\n    declarations: [\n        StartProcessCloudComponent\n    ],\n    exports: [\n        StartProcessCloudComponent\n    ]\n})\nexport class StartProcessCloudModule { }\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, Input, OnChanges, OnInit, OnDestroy, EventEmitter, ViewEncapsulation } from '@angular/core';\nimport { CardViewItem, CardViewTextItemModel, TranslationService, AppConfigService, CardViewDateItemModel, CardViewBaseItemModel } from '@alfresco/adf-core';\nimport { ProcessInstanceCloud } from '../../start-process/models/process-instance-cloud.model';\nimport { ProcessCloudService } from '../../services/process-cloud.service';\nimport { takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs';\n\n@Component({\n    selector: 'adf-cloud-process-header',\n    templateUrl: './process-header-cloud.component.html',\n    encapsulation: ViewEncapsulation.None,\n    host: { class: 'adf-cloud-process-header' }\n})\nexport class ProcessHeaderCloudComponent implements OnChanges, OnInit, OnDestroy {\n\n    /** (Required) The name of the application. */\n    @Input()\n    appName: string = '';\n\n    /** (Required) The id of the process instance. */\n    @Input()\n    processInstanceId: string;\n\n    processInstanceDetails: ProcessInstanceCloud;\n    properties: CardViewItem[];\n    dateFormat: string;\n    dateLocale: string;\n\n    /** Gets emitted each time a new process instance details are loaded. */\n    loaded = new EventEmitter<ProcessInstanceCloud>();\n\n    private onDestroy$ = new Subject<boolean>();\n\n    constructor(\n        private processCloudService: ProcessCloudService,\n        private translationService: TranslationService,\n        private appConfig: AppConfigService) {\n    }\n\n    ngOnInit() {\n        this.dateFormat = this.appConfig.get('dateValues.defaultDateFormat');\n        this.dateLocale = this.appConfig.get('dateValues.defaultDateLocale');\n\n        this.processCloudService.dataChangesDetected\n            .pipe(takeUntil(this.onDestroy$))\n            .subscribe((processDetails) => this.onLoaded(processDetails));\n    }\n\n    ngOnChanges() {\n        if ((this.appName || this.appName === '') && this.processInstanceId) {\n            this.loadProcessInstanceDetails(this.appName, this.processInstanceId);\n        }\n    }\n\n    private loadProcessInstanceDetails(appName: string, processInstanceId: string) {\n        this.processCloudService\n            .getProcessInstanceById(appName, processInstanceId)\n            .subscribe((result) => this.onLoaded(result));\n    }\n\n    private onLoaded(processInstanceDetails: ProcessInstanceCloud) {\n        this.processInstanceDetails = processInstanceDetails;\n        this.refreshData();\n\n        this.loaded.emit(processInstanceDetails);\n    }\n\n    /**\n     * Refresh the card data\n     */\n    refreshData() {\n        if (this.processInstanceDetails) {\n            const defaultProperties = this.initDefaultProperties();\n            const filteredProperties = this.appConfig.get<string[]>('adf-cloud-process-header.presets.properties');\n            this.properties = defaultProperties.filter((cardItem) => this.isValidSelection(filteredProperties, cardItem));\n        }\n    }\n\n    private initDefaultProperties(): any[] {\n        return [\n            new CardViewTextItemModel(\n                {\n                    label: 'ADF_CLOUD_PROCESS_HEADER.PROPERTIES.ID',\n                    value: this.processInstanceDetails.id,\n                    key: 'id'\n                }),\n            new CardViewTextItemModel(\n                {\n                    label: 'ADF_CLOUD_PROCESS_HEADER.PROPERTIES.NAME',\n                    value: this.processInstanceDetails.name,\n                    key: 'name',\n                    default: this.translationService.instant('ADF_CLOUD_PROCESS_HEADER.PROPERTIES.NAME_DEFAULT')\n                }),\n            new CardViewTextItemModel(\n                {\n                    label: 'ADF_CLOUD_PROCESS_HEADER.PROPERTIES.STATUS',\n                    value: this.processInstanceDetails.status,\n                    key: 'status'\n                }),\n            new CardViewTextItemModel(\n                {\n                    label: 'ADF_CLOUD_PROCESS_HEADER.PROPERTIES.INITIATOR',\n                    value: this.processInstanceDetails.initiator,\n                    key: 'initiator'\n                }),\n            new CardViewDateItemModel(\n                {\n                    label: 'ADF_CLOUD_PROCESS_HEADER.PROPERTIES.START_DATE',\n                    value: this.processInstanceDetails.startDate,\n                    key: 'startDate',\n                    format: this.dateFormat,\n                    locale: this.dateLocale\n                }),\n            new CardViewDateItemModel(\n                {\n                    label: 'ADF_CLOUD_PROCESS_HEADER.PROPERTIES.LAST_MODIFIED',\n                    value: this.processInstanceDetails.lastModified,\n                    key: 'lastModified',\n                    format: this.dateFormat,\n                    locale: this.dateLocale\n                }),\n            new CardViewTextItemModel(\n                {\n                    label: 'ADF_CLOUD_PROCESS_HEADER.PROPERTIES.PARENT_ID',\n                    value: this.processInstanceDetails.parentId,\n                    key: 'parentId',\n                    default: this.translationService.instant('ADF_CLOUD_PROCESS_HEADER.PROPERTIES.NONE')\n                }),\n            new CardViewTextItemModel(\n                {\n                    label: 'ADF_CLOUD_PROCESS_HEADER.PROPERTIES.BUSINESS_KEY',\n                    value: this.processInstanceDetails.businessKey,\n                    key: 'businessKey',\n                    default: this.translationService.instant('ADF_CLOUD_PROCESS_HEADER.PROPERTIES.NONE')\n                })\n        ];\n    }\n\n    private isValidSelection(filteredProperties: string[], cardItem: CardViewBaseItemModel): boolean {\n        return filteredProperties ? filteredProperties.indexOf(cardItem.key) >= 0 : true;\n    }\n\n    ngOnDestroy() {\n        this.onDestroy$.next(true);\n        this.onDestroy$.complete();\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MaterialModule } from '../../material.module';\nimport { CoreModule } from '@alfresco/adf-core';\nimport { ProcessHeaderCloudComponent } from './components/process-header-cloud.component';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        MaterialModule,\n        CoreModule\n\n    ],\n    declarations: [ProcessHeaderCloudComponent],\n    exports: [ProcessHeaderCloudComponent]\n})\nexport class ProcessHeaderCloudModule { }\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Directive, HostListener, Output, EventEmitter, OnInit, OnDestroy, ElementRef } from '@angular/core';\nimport { IdentityUserService } from '@alfresco/adf-core';\nimport { ProcessCloudService } from '../services/process-cloud.service';\nimport { takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs';\nimport { ProcessInstanceCloud } from '../start-process/models/process-instance-cloud.model';\n\n@Directive({\n    // tslint:disable-next-line: directive-selector\n    selector: '[adf-cloud-cancel-process]'\n})\nexport class CancelProcessDirective implements OnInit, OnDestroy {\n\n    /** Emitted when the process is cancelled. */\n    @Output()\n    success = new EventEmitter<any>();\n\n    /** Emitted when the process cannot be cancelled. */\n    @Output()\n    error = new EventEmitter<any>();\n\n    processInstanceDetails: ProcessInstanceCloud;\n\n    canCancelProcess = false;\n\n    private onDestroy$ = new Subject<boolean>();\n\n    constructor(\n        private elementRef: ElementRef,\n        private processCloudService: ProcessCloudService,\n        private identityUserService: IdentityUserService) {}\n\n    ngOnInit() {\n        this.processCloudService.dataChangesDetected\n            .pipe(takeUntil(this.onDestroy$))\n            .subscribe((processDetails) => {\n                this.processInstanceDetails = processDetails;\n                this.canCancelProcess = this.checkCanCancelProcess();\n                this.setElementVisibility();\n            });\n    }\n\n    @HostListener('click')\n    onClick() {\n        this.cancelProcess();\n    }\n\n    private setElementVisibility() {\n        this.elementRef.nativeElement.disabled = !this.canCancelProcess;\n    }\n\n    checkCanCancelProcess(): boolean {\n        const currentUser = this.identityUserService.getCurrentUserInfo().username;\n        return this.processInstanceDetails.initiator === currentUser && this.processInstanceDetails.status === 'RUNNING';\n    }\n\n    cancelProcess() {\n        if (this.canCancelProcess) {\n            this.processCloudService.cancelProcess(this.processInstanceDetails.appName, this.processInstanceDetails.id)\n                .subscribe(\n                    (response) => this.success.emit(response),\n                    (error) => this.error.emit(error)\n                );\n        } else {\n            this.error.emit('Permission denied, only process initiator can cancel the process');\n        }\n    }\n\n    ngOnDestroy() {\n        this.onDestroy$.next(true);\n        this.onDestroy$.complete();\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NgModule } from '@angular/core';\nimport { CancelProcessDirective } from './cancel-process.directive';\n\n@NgModule({\n    declarations: [\n        CancelProcessDirective\n    ],\n    exports: [\n        CancelProcessDirective\n    ]\n})\nexport class ProcessDirectiveModule { }\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NgModule } from '@angular/core';\nimport { ProcessFiltersCloudModule } from './process-filters/process-filters-cloud.module';\nimport { ProcessListCloudModule } from './process-list/process-list-cloud.module';\nimport { StartProcessCloudModule } from './start-process/start-process-cloud.module';\nimport { CoreModule } from '@alfresco/adf-core';\nimport { ProcessHeaderCloudModule } from './process-header/process-header-cloud.module';\nimport { ProcessDirectiveModule } from './directives/process-directive.module';\nimport { ProcessNameCloudPipe } from '../pipes/process-name-cloud.pipe';\n\n@NgModule({\n    imports: [\n        CoreModule,\n        ProcessFiltersCloudModule,\n        ProcessListCloudModule,\n        StartProcessCloudModule,\n        ProcessHeaderCloudModule,\n        ProcessDirectiveModule\n    ],\n    exports: [\n        ProcessFiltersCloudModule,\n        ProcessListCloudModule,\n        StartProcessCloudModule,\n        ProcessHeaderCloudModule,\n        ProcessDirectiveModule\n    ],\n    providers: [ProcessNameCloudPipe]\n})\nexport class ProcessCloudModule { }\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Injectable } from '@angular/core';\nimport { PreferenceCloudServiceInterface } from './preference-cloud.interface';\nimport { AlfrescoApiService, AppConfigService, LogService } from '@alfresco/adf-core';\nimport { throwError, Observable } from 'rxjs';\nimport { BaseCloudService } from './base-cloud.service';\n\n@Injectable({ providedIn: 'root' })\nexport class UserPreferenceCloudService extends BaseCloudService implements PreferenceCloudServiceInterface {\n\n  constructor(\n    apiService: AlfrescoApiService,\n    appConfigService: AppConfigService,\n    private logService: LogService) {\n    super(apiService, appConfigService);\n  }\n\n  /**\n   * Gets user preferences\n   * @param appName Name of the target app\n   * @returns List of user preferences\n   */\n  getPreferences(appName: string): Observable<any> {\n    if (appName) {\n      const url = `${this.getBasePath(appName)}/preference/v1/preferences`;\n      return this.get(url);\n    } else {\n      this.logService.error('Appname is mandatory for querying preferences');\n      return throwError('Appname not configured');\n    }\n  }\n\n  /**\n   * Gets user preference.\n   * @param appName Name of the target app\n   * @param key Key of the target preference\n   * @returns Observable of user preference\n   */\n  getPreferenceByKey(appName: string, key: string): Observable<any> {\n    if (appName) {\n      const url = `${this.getBasePath(appName)}/preference/v1/preferences/${key}`;\n      return this.get(url);\n    } else {\n      this.logService.error('Appname and key are mandatory for querying preference');\n      return throwError('Appname not configured');\n    }\n  }\n\n  /**\n   * Creates user preference.\n   * @param appName Name of the target app\n   * @param key Key of the target preference\n   * @newPreference Details of new user preference\n   * @returns Observable of created user preferences\n   */\n  createPreference(appName: string, key: string, newPreference: any): Observable<any> {\n    if (appName) {\n      const url = `${this.getBasePath(appName)}/preference/v1/preferences/${key}`;\n      const payload = JSON.stringify(newPreference);\n\n      return this.put(url, payload);\n    } else {\n      this.logService.error('Appname  and key are  mandatory for creating preference');\n      return throwError('Appname not configured');\n    }\n  }\n\n  /**\n   * Updates user preference.\n   * @param appName Name of the target app\n   * @param key Key of the target preference\n   * @param updatedPreference Details of updated preference\n   * @returns Observable of updated user preferences\n   */\n  updatePreference(appName: string, key: string, updatedPreference: any): Observable<any> {\n    return this.createPreference(appName, key, updatedPreference);\n  }\n\n  /**\n   * Deletes user preference by given preference key.\n   * @param appName Name of the target app\n   * @param key Key of the target preference\n   * @returns Observable of delete operation status\n   */\n  deletePreference(appName: string, key: string): Observable<any> {\n    if (appName) {\n      const url = `${this.getBasePath(appName)}/preference/v1/preferences/${key}`;\n      return this.delete(url);\n    } else {\n      this.logService.error('Appname and key are mandatory to delete preference');\n      return throwError('Appname not configured');\n    }\n  }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Moment } from 'moment';\n\nexport interface FormContent {\n    formRepresentation: FormRepresentation;\n}\n\nexport interface FormRepresentation {\n    id: string;\n    name: string;\n    description: string;\n    version?: number;\n    formDefinition?: FormDefinition;\n    standAlone?: boolean;\n}\n\nexport interface FormTab {\n    id: string;\n    title: string;\n    visibilityCondition: VisibilityCondition | null;\n}\n\nexport interface FormOutcome {\n    id: string;\n    name: string;\n}\n\nexport interface FormDefinition {\n    tabs: FormTab[];\n    fields: Container[] | HeaderRepresentation[];\n    outcomes: FormOutcome[];\n    metadata: {};\n    variables: any[];\n}\n\nexport interface Container {\n    id: string;\n    type: string;\n    tab: string;\n    name: string;\n    numberOfColumns: number;\n    fields: {\n        [key: string]: FormFieldRepresentation[]\n    };\n}\n\nexport type FormFieldRepresentation = (DateField | DateTimeField | TextField | AttachFileField | DropDownField |\n    RadioField | TypeaheadField | PeopleField | AmountField | NumberField | CheckboxField | HyperlinkField );\n\nexport interface AttachFileField extends FormField {\n    required: boolean;\n}\n\nexport interface TypeaheadField extends RestField {\n    required: boolean;\n}\n\nexport interface RestField extends FormField {\n    required: boolean;\n    restUrl: string;\n    restResponsePath: string;\n    restIdProperty: string;\n    restLabelProperty: string;\n}\n\nexport interface HeaderRepresentation extends Container {\n    numberOfColumns: number;\n    params: {\n        [key: string]: any\n    };\n    visibilityCondition: VisibilityCondition;\n}\n\nexport interface ColumnDefinitionRepresentation extends Container {\n    id: string;\n    name: string;\n    type: string;\n    value: any;\n    required: boolean;\n    editable: boolean;\n    sortable: boolean;\n    visible: boolean;\n}\n\nexport interface DynamicTableRepresentation extends FormField {\n    required: boolean;\n    tab: string;\n    placeholder: string;\n    columnDefinitions: ColumnDefinitionRepresentation[];\n}\n\nexport interface VisibilityCondition {\n    leftType: string;\n    leftValue: string;\n    operator: string;\n    rightValue: string | number | Date | Moment;\n    rightType: string;\n    nextConditionOperator?: string;\n    nextCondition?: VisibilityCondition;\n}\n\nexport interface FormField {\n    id: string;\n    name: string;\n    value: any;\n    type: FormFieldType | string;\n    readOnly?: boolean;\n    colspan: number;\n    params: {\n        [anyKey: string]: any\n    };\n    visibilityCondition: null | VisibilityCondition;\n}\n\nexport interface FormOption {\n    id: string;\n    name: string;\n}\n\nexport interface OptionsField {\n    value: any;\n    restUrl: string | null;\n    restResponsePath: string | null;\n    restIdProperty: string | null;\n    restLabelProperty: string | null;\n    optionType: 'manual' | 'rest';\n    options: FormOption[];\n}\n\nexport interface AmountField extends FormField {\n    required: boolean;\n    placeholder: string | null;\n    minValue: number | null;\n    maxValue: number | null;\n    enableFractions: boolean;\n    currency: string;\n}\n\nexport interface CheckboxField extends FormField {\n    required: boolean;\n}\n\nexport interface DateField extends FormField {\n    required: boolean;\n    placeholder: string | null;\n    minValue: string | null;\n    maxValue: string | null;\n    dateDisplayFormat: string;\n}\n\nexport interface DateTimeField extends FormField {\n    required: boolean;\n    placeholder: string | null;\n    minValue: string | null;\n    maxValue: string | null;\n    dateDisplayFormat: string;\n}\n\nexport interface DropDownField extends OptionsField, FormField {\n    required: boolean;\n}\n\nexport interface HyperlinkField extends FormField {\n    hyperlinkUrl: string | null;\n    displayText: string | null;\n}\n\nexport interface NumberField extends FormField {\n    placeholder: string | null;\n    minValue: number | null;\n    maxValue: number | null;\n    required: boolean;\n}\n\nexport interface RadioField extends OptionsField, FormField {\n    required: boolean;\n}\n\nexport interface TextField extends FormField {\n    regexPattern: string | null;\n    required: boolean;\n    minLength: number;\n    maxLength: number;\n    placeholder: string | null;\n}\n\nexport enum PeopleModeOptions {\n    single = 'single',\n    multiple = 'multiple'\n}\n\nexport interface PeopleField extends FormField {\n    required: boolean;\n    optionType: PeopleModeOptions;\n}\n\nexport enum FormFieldType {\n    text = 'text',\n    multiline = 'multi-line-text',\n    number = 'integer',\n    checkbox = 'boolean',\n    date = 'date',\n    datetime = 'datetime',\n    dropdown = 'dropdown',\n    typeahead = 'typeahead',\n    amount = 'amount',\n    radio = 'radio-buttons',\n    people = 'people',\n    groupOfPeople = 'functional-group',\n    dynamicTable = 'dynamicTable',\n    hyperlink = 'hyperlink',\n    header = 'group',\n    uploadFile = 'upload',\n    uploadFolder = 'uploadFolder',\n    displayValue = 'readonly',\n    displayText = 'readonly-text',\n    fileViewer = 'file-viewer'\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Injectable } from '@angular/core';\nimport { PreferenceCloudServiceInterface } from './preference-cloud.interface';\nimport { StorageService } from '@alfresco/adf-core';\nimport { Observable, of } from 'rxjs';\n\n@Injectable({ providedIn: 'root' })\nexport class LocalPreferenceCloudService implements PreferenceCloudServiceInterface {\n\n  constructor(private storage: StorageService) { }\n\n    /**\n     * Gets local preferences\n     * @param _ Name of the target app\n     * @param key Key of the target preference\n     * @returns List of local preferences\n     */\n    getPreferences(_: string, key: string): Observable<any> {\n        if (key || key === '') {\n            return of(this.prepareLocalPreferenceResponse(key));\n        }\n        return of(\n            {\n                'list': {\n                    'entries': []\n                }\n            }\n        );\n    }\n\n    /**\n     * Gets local preference.\n     * @param _ Name of the target app\n     * @param key Key of the target preference\n     * @returns Observable of local preference\n     */\n    getPreferenceByKey(_: string, key: string): Observable<any> {\n        return of(JSON.parse(this.storage.getItem(key)) || []);\n    }\n\n    /**\n     * Creates local preference.\n     * @param _ Name of the target app\n     * @param key Key of the target preference\n     * @param newPreference Details of new local preference\n     * @returns Observable of created local preferences\n     */\n    createPreference(_: string, key: string, newPreference: any): Observable<any> {\n        const storedFilters = JSON.parse(this.storage.getItem(key) || '[]');\n        storedFilters.push(...newPreference);\n        this.storage.setItem(key, JSON.stringify(storedFilters));\n        return of(storedFilters);\n    }\n\n    /**\n     * Updates local preference.\n     * @param _ Name of the target app\n     * @param key Key of the target preference\n     * @param updatedPreference Details of updated preference\n     * @returns Observable of updated local preferences\n     */\n    updatePreference(_: string, key: string, updatedPreference: any): Observable<any> {\n        if (key) {\n            this.storage.setItem(key, JSON.stringify(updatedPreference));\n        }\n        return of(updatedPreference);\n    }\n\n    /**\n     * Deletes local preference by given preference key.\n     * @param key Key of the target preference\n     * @param preferences Details of updated preferences\n     * @returns Observable of preferences without deleted preference\n     */\n    deletePreference(key: string, preferences: any): Observable<any> {\n        if (key) {\n            this.storage.setItem(key, JSON.stringify(preferences));\n        }\n        return of(preferences);\n    }\n\n    prepareLocalPreferenceResponse(key: string): any {\n        return {\n            'list': {\n                'entries': [\n                    {\n                        'entry': {\n                            'key': key,\n                            'value': this.storage.getItem(key) || '[]'\n                        }\n                    }\n                ]\n            }\n        };\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Injectable } from '@angular/core';\nimport { FormRenderingService } from '@alfresco/adf-core';\nimport { AttachFileCloudWidgetComponent } from './widgets/attach-file/attach-file-cloud-widget.component';\nimport { DropdownCloudWidgetComponent } from './widgets/dropdown/dropdown-cloud.widget';\nimport { DateCloudWidgetComponent } from './widgets/date/date-cloud.widget';\nimport { PeopleCloudWidgetComponent } from './widgets/people/people-cloud.widget';\nimport { GroupCloudWidgetComponent } from './widgets/group/group-cloud.widget';\nimport { PropertiesViewerWidgetComponent } from './widgets/properties-viewer/properties-viewer.widget';\nimport { RadioButtonsCloudWidgetComponent } from './widgets/radio-buttons/radio-buttons-cloud.widget';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class CloudFormRenderingService extends FormRenderingService {\n    constructor() {\n        super();\n\n        this.register({\n            'upload': () => AttachFileCloudWidgetComponent,\n            'dropdown': () => DropdownCloudWidgetComponent,\n            'date': () => DateCloudWidgetComponent,\n            'people': () => PeopleCloudWidgetComponent,\n            'functional-group': () => GroupCloudWidgetComponent,\n            'properties-viewer': () => PropertiesViewerWidgetComponent,\n            'radio-buttons': () => RadioButtonsCloudWidgetComponent\n        }, true);\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NgModule } from '@angular/core';\nimport { ProcessNameCloudPipe } from './process-name-cloud.pipe';\n\n@NgModule({\n    declarations: [\n        ProcessNameCloudPipe\n    ],\n    exports: [\n        ProcessNameCloudPipe\n    ]\n})\nexport class ProcessServicesCloudPipeModule {\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NgModule, ModuleWithProviders } from '@angular/core';\nimport { TRANSLATION_PROVIDER, CoreModule, FormRenderingService } from '@alfresco/adf-core';\nimport { AppListCloudModule } from './app/app-list-cloud.module';\nimport { TaskCloudModule } from './task/task-cloud.module';\nimport { ProcessCloudModule } from './process/process-cloud.module';\nimport { GroupCloudModule } from './group/group-cloud.module';\nimport { FormCloudModule } from './form/form-cloud.module';\nimport { TaskFormModule } from './task/task-form/task-form.module';\nimport {\n    LocalPreferenceCloudService,\n    PreferenceCloudServiceInterface,\n    PROCESS_FILTERS_SERVICE_TOKEN,\n    TASK_FILTERS_SERVICE_TOKEN\n} from './services/public-api';\nimport { PeopleCloudModule } from './people/people-cloud.module';\nimport { CloudFormRenderingService } from './form/components/cloud-form-rendering.service';\nimport { ProcessServicesCloudPipeModule } from './pipes/process-services-cloud-pipe.module';\n\n@NgModule({\n    imports: [\n        CoreModule,\n        AppListCloudModule,\n        ProcessCloudModule,\n        TaskCloudModule,\n        GroupCloudModule,\n        PeopleCloudModule,\n        FormCloudModule,\n        TaskFormModule,\n        ProcessServicesCloudPipeModule\n    ],\n    providers: [\n        {\n            provide: TRANSLATION_PROVIDER,\n            multi: true,\n            useValue: {\n                name: 'adf-process-services-cloud',\n                source: 'assets/adf-process-services-cloud'\n            }\n        }\n    ],\n    exports: [\n        AppListCloudModule,\n        ProcessCloudModule,\n        TaskCloudModule,\n        GroupCloudModule,\n        FormCloudModule,\n        TaskFormModule,\n        PeopleCloudModule,\n        ProcessServicesCloudPipeModule\n    ]\n})\nexport class ProcessServicesCloudModule {\n    static forRoot(preferenceServiceInstance?: PreferenceCloudServiceInterface): ModuleWithProviders<ProcessServicesCloudModule> {\n        return {\n            ngModule: ProcessServicesCloudModule,\n            providers: [\n                {\n                    provide: TRANSLATION_PROVIDER,\n                    multi: true,\n                    useValue: {\n                        name: 'adf-process-services-cloud',\n                        source: 'assets/adf-process-services-cloud'\n                    }\n                },\n                { provide: PROCESS_FILTERS_SERVICE_TOKEN, useExisting: preferenceServiceInstance ?? LocalPreferenceCloudService },\n                { provide: TASK_FILTERS_SERVICE_TOKEN, useExisting: preferenceServiceInstance ?? LocalPreferenceCloudService },\n                FormRenderingService,\n                { provide: FormRenderingService, useClass: CloudFormRenderingService }\n            ]\n        };\n    }\n\n    static forChild(): ModuleWithProviders<ProcessServicesCloudModule> {\n        return {\n            ngModule: ProcessServicesCloudModule\n        };\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Injectable } from '@angular/core';\nimport { AlfrescoApiService, AppConfigService } from '@alfresco/adf-core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { StartTaskCloudRequestModel } from '../start-task/models/start-task-cloud-request.model';\nimport { TaskDetailsCloudModel, StartTaskCloudResponseModel } from '../start-task/models/task-details-cloud.model';\nimport { BaseCloudService } from '../../services/base-cloud.service';\n\n@Injectable({ providedIn: 'root' })\nexport class StartTaskCloudService extends BaseCloudService {\n\n    constructor(\n        apiService: AlfrescoApiService,\n        appConfigService: AppConfigService) {\n        super(apiService, appConfigService);\n    }\n\n     /**\n      * @deprecated in 3.5.0, use TaskCloudService instead.\n      * Creates a new standalone task.\n      * @param taskDetails Details of the task to create\n      * @returns Details of the newly created task\n      */\n    createNewTask(taskDetails: TaskDetailsCloudModel): Observable<TaskDetailsCloudModel> {\n        const url = `${this.getBasePath(taskDetails.appName)}/rb/v1/tasks`;\n        const payload = JSON.stringify(new StartTaskCloudRequestModel(taskDetails));\n\n        return this.post<any, StartTaskCloudResponseModel>(url, payload)\n            .pipe(\n                map(response => response.entry)\n            );\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Pagination } from '@alfresco/js-api';\n\nexport class ApplicationVersionModel {\n    entry: {\n        id: string;\n        name: string;\n        version: string;\n    };\n\n}\n\nexport class ApplicationVersionResponseModel {\n    list: {\n        entries: ApplicationVersionModel[];\n        pagination: Pagination;\n    };\n}\n"]}