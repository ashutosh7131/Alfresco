(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@alfresco/adf-core'), require('@angular/flex-layout'), require('@angular/material/autocomplete'), require('@angular/material/button'), require('@angular/material/card'), require('@angular/material/checkbox'), require('@angular/material/chips'), require('@angular/material/core'), require('@angular/material/form-field'), require('@angular/material/datepicker'), require('@angular/material/dialog'), require('@angular/material/expansion'), require('@angular/material/grid-list'), require('@angular/material/icon'), require('@angular/material/input'), require('@angular/material/list'), require('@angular/material/menu'), require('@angular/material/progress-spinner'), require('@angular/material/radio'), require('@angular/material/select'), require('@angular/material/slide-toggle'), require('@angular/material/table'), require('@angular/material/tabs'), require('@angular/material/tooltip'), require('@angular/common'), require('rxjs'), require('rxjs/operators'), require('@angular/forms'), require('moment-es6'), require('apollo-angular'), require('apollo-angular/http'), require('@apollo/client/core'), require('@apollo/client/link/ws'), require('@apollo/client/link/error'), require('@apollo/client/utilities'), require('@angular/common/http'), require('@angular/animations'), require('moment'), require('@alfresco/js-api'), require('@alfresco/adf-content-services')) :
    typeof define === 'function' && define.amd ? define('@alfresco/adf-process-services-cloud', ['exports', '@angular/core', '@alfresco/adf-core', '@angular/flex-layout', '@angular/material/autocomplete', '@angular/material/button', '@angular/material/card', '@angular/material/checkbox', '@angular/material/chips', '@angular/material/core', '@angular/material/form-field', '@angular/material/datepicker', '@angular/material/dialog', '@angular/material/expansion', '@angular/material/grid-list', '@angular/material/icon', '@angular/material/input', '@angular/material/list', '@angular/material/menu', '@angular/material/progress-spinner', '@angular/material/radio', '@angular/material/select', '@angular/material/slide-toggle', '@angular/material/table', '@angular/material/tabs', '@angular/material/tooltip', '@angular/common', 'rxjs', 'rxjs/operators', '@angular/forms', 'moment-es6', 'apollo-angular', 'apollo-angular/http', '@apollo/client/core', '@apollo/client/link/ws', '@apollo/client/link/error', '@apollo/client/utilities', '@angular/common/http', '@angular/animations', 'moment', '@alfresco/js-api', '@alfresco/adf-content-services'], factory) :
    (global = global || self, factory((global.alfresco = global.alfresco || {}, global.alfresco['adf-process-services-cloud'] = {}), global.ng.core, global['@alfresco/adf-core'], global.ng.flexLayout, global.ng.material.autocomplete, global.ng.material.button, global.ng.material.card, global.ng.material.checkbox, global.ng.material.chips, global.ng.material.core, global.ng.material.formField, global.ng.material.datepicker, global.ng.material.dialog, global.ng.material.expansion, global.ng.material.gridList, global.ng.material.icon, global.ng.material.input, global.ng.material.list, global.ng.material.menu, global.ng.material.progressSpinner, global.ng.material.radio, global.ng.material.select, global.ng.material.slideToggle, global.ng.material.table, global.ng.material.tabs, global.ng.material.tooltip, global.ng.common, global.rxjs, global.rxjs.operators, global.ng.forms, global['moment-es6'], global['apollo-angular'], global['apollo-angular/http'], global['@apollo/client/core'], global['@apollo/client/link/ws'], global['@apollo/client/link/error'], global['@apollo/client/utilities'], global.ng.common.http, global.ng.animations, global.moment, global['@alfresco/js-api'], global['@alfresco/adf-content-services']));
}(this, (function (exports, i0, i1, flexLayout, autocomplete, button, card, checkbox, chips, core, formField, datepicker, i2, expansion, gridList, icon, input, list, menu, progressSpinner, radio, select, slideToggle, table, tabs, tooltip, common, rxjs, operators, forms, moment, i2$1, i3, core$1, ws, error, utilities, http, animations, moment$1, jsApi, adfContentServices) { 'use strict';

    moment = moment && Object.prototype.hasOwnProperty.call(moment, 'default') ? moment['default'] : moment;
    moment$1 = moment$1 && Object.prototype.hasOwnProperty.call(moment$1, 'default') ? moment$1['default'] : moment$1;

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var ɵ0 = { floatLabel: 'never' };
    var MaterialModule = /** @class */ (function () {
        function MaterialModule() {
        }
        return MaterialModule;
    }());
    MaterialModule.decorators = [
        { type: i0.NgModule, args: [{
                    providers: [
                        { provide: formField.MAT_FORM_FIELD_DEFAULT_OPTIONS, useValue: ɵ0 }
                    ],
                    imports: [
                        autocomplete.MatAutocompleteModule, button.MatButtonModule, card.MatCardModule, i2.MatDialogModule,
                        checkbox.MatCheckboxModule, datepicker.MatDatepickerModule, gridList.MatGridListModule, icon.MatIconModule, input.MatInputModule,
                        list.MatListModule, core.MatOptionModule, radio.MatRadioModule, select.MatSelectModule, slideToggle.MatSlideToggleModule, table.MatTableModule,
                        tabs.MatTabsModule, progressSpinner.MatProgressSpinnerModule, core.MatNativeDateModule, core.MatRippleModule, tooltip.MatTooltipModule,
                        chips.MatChipsModule, menu.MatMenuModule, expansion.MatExpansionModule
                    ],
                    exports: [
                        autocomplete.MatAutocompleteModule, button.MatButtonModule, card.MatCardModule, i2.MatDialogModule,
                        checkbox.MatCheckboxModule, datepicker.MatDatepickerModule, gridList.MatGridListModule, icon.MatIconModule, input.MatInputModule,
                        list.MatListModule, core.MatOptionModule, radio.MatRadioModule, select.MatSelectModule, slideToggle.MatSlideToggleModule, table.MatTableModule,
                        tabs.MatTabsModule, progressSpinner.MatProgressSpinnerModule, core.MatNativeDateModule, core.MatRippleModule, tooltip.MatTooltipModule,
                        chips.MatChipsModule, menu.MatMenuModule, expansion.MatExpansionModule
                    ]
                },] }
    ];

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var DEFAULT_APP_INSTANCE_THEME = 'theme-2';
    var DEFAULT_APP_INSTANCE_ICON = 'favorite_border';

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var AppDetailsCloudComponent = /** @class */ (function () {
        function AppDetailsCloudComponent() {
            this.selectedApp = new i0.EventEmitter();
        }
        AppDetailsCloudComponent.prototype.onSelectApp = function (app) {
            this.selectedApp.emit(app);
        };
        AppDetailsCloudComponent.prototype.getTheme = function () {
            return this.applicationInstance.theme || DEFAULT_APP_INSTANCE_THEME;
        };
        AppDetailsCloudComponent.prototype.getIcon = function () {
            return this.applicationInstance.icon || DEFAULT_APP_INSTANCE_ICON;
        };
        return AppDetailsCloudComponent;
    }());
    AppDetailsCloudComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'adf-cloud-app-details',
                    template: "<div class=\"adf-app-listgrid\">\n    <div class=\"adf-app-listgrid-item\">\n        <mat-card tabindex=\"0\"\n            fxLayout=\"column\"\n            role=\"button\"\n            class=\"adf-app-listgrid-item-card\"\n            title=\"{{applicationInstance.name}}\"\n            [ngClass]=\"getTheme()\"\n            (click)=\"onSelectApp(applicationInstance)\"\n            (keyup.enter)=\"onSelectApp(applicationInstance)\">\n            <div class=\"adf-app-listgrid-item-card-logo\">\n                <mat-icon class=\"adf-app-listgrid-item-card-logo-icon\">{{ getIcon() }}</mat-icon>\n            </div>\n            <div mat-card-title class=\"adf-app-listgrid-item-card-title\">\n                <h1>{{applicationInstance.name}}</h1>\n            </div>\n            <mat-card-subtitle class=\"adf-app-listgrid-item-card-subtitle\" fxFlex=\"1 0 auto\">\n                <div class=\"adf-line-clamp\">{{applicationInstance.description}}</div>\n            </mat-card-subtitle>\n        </mat-card>\n    </div>\n  </div>\n",
                    encapsulation: i0.ViewEncapsulation.None,
                    styles: [".adf-app-listgrid{padding:8px}.adf-app-listgrid-item{box-sizing:border-box;outline:none;padding:8px}.adf-app-listgrid-item-card{min-height:200px;outline:none;padding:0!important;transition:transform .28s cubic-bezier(.4,0,.2,1),box-shadow .28s cubic-bezier(.4,0,.2,1)}.adf-app-listgrid-item-card.theme-1{background-color:#269abc}.adf-app-listgrid-item-card.theme-2{background-color:#7da9b0}.adf-app-listgrid-item-card.theme-3{background-color:#7689ab}.adf-app-listgrid-item-card.theme-4{background-color:#c74e3e}.adf-app-listgrid-item-card.theme-5{background-color:#fab96c}.adf-app-listgrid-item-card.theme-6{background-color:#759d4c}.adf-app-listgrid-item-card.theme-7{background-color:#b1b489}.adf-app-listgrid-item-card.theme-8{background-color:#a17299}.adf-app-listgrid-item-card.theme-9{background-color:#696c67}.adf-app-listgrid-item-card.theme-10{background-color:#cabb33}.adf-app-listgrid-item-card:hover{box-shadow:0 8px 10px 1px rgba(0,0,0,.14),0 3px 14px 2px rgba(0,0,0,.12),0 5px 5px -3px rgba(0,0,0,.2);cursor:pointer;transform:scale(1.015)}.adf-app-listgrid-item-card-logo{padding:16px;position:absolute;right:20px;top:20px;z-index:9}.adf-app-listgrid-item-card-logo-icon{font-size:70px;height:1em!important;width:1em!important}.theme-1 .adf-app-listgrid-item-card-logo-icon{color:#168aac}.theme-2 .adf-app-listgrid-item-card-logo-icon{color:#6d99a0}.theme-3 .adf-app-listgrid-item-card-logo-icon{color:#66799b}.theme-4 .adf-app-listgrid-item-card-logo-icon{color:#b73e2e}.theme-5 .adf-app-listgrid-item-card-logo-icon{color:#eaa95c}.theme-6 .adf-app-listgrid-item-card-logo-icon{color:#658d3c}.theme-7 .adf-app-listgrid-item-card-logo-icon{color:#a1a479}.theme-8 .adf-app-listgrid-item-card-logo-icon{color:#916289}.theme-9 .adf-app-listgrid-item-card-logo-icon{color:#595c57}.theme-10 .adf-app-listgrid-item-card-logo-icon{color:#baab23}.adf-app-listgrid-item-card-title{margin-bottom:0!important;padding:16px;z-index:9999}.adf-app-listgrid-item-card-title h1{color:#fff;font-size:24px;line-height:normal;margin:0;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;width:80%}.adf-app-listgrid-item-card-subtitle{color:#fff;padding:16px;z-index:9999}.adf-app-listgrid-item-card-subtitle .adf-line-clamp{line-height:1.25;overflow:hidden;padding:0!important;position:relative;text-overflow:ellipsis}@supports (-webkit-line-clamp:1){.adf-app-listgrid-item-card-subtitle .adf-line-clamp{-webkit-box-orient:vertical;-webkit-line-clamp:3;display:-webkit-box;height:3.7125em}}@supports not (-webkit-line-clamp:1){.adf-app-listgrid-item-card-subtitle .adf-line-clamp{white-space:nowrap;width:100%}}.adf-app-listgrid-item-card-actions{border-top:1px solid rgba(0,0,0,.1);box-sizing:border-box;min-height:48px;padding:0 16px 16px!important}.adf-app-listgrid-item-card-actions-icon{color:#e9f1f3}.adf-app-listgrid-item-card-actions.mat-card-actions{margin-left:0;margin-right:0}.adf-app-listgrid-item-card-actions.mat-card-actions:last-child{margin-bottom:0!important}"]
                },] }
    ];
    AppDetailsCloudComponent.propDecorators = {
        applicationInstance: [{ type: i0.Input }],
        selectedApp: [{ type: i0.Output }]
    };

    var AppsProcessCloudService = /** @class */ (function () {
        function AppsProcessCloudService(apiService, logService, appConfigService) {
            this.apiService = apiService;
            this.logService = logService;
            this.appConfigService = appConfigService;
            this.loadApps();
        }
        AppsProcessCloudService.prototype.getDeployedApplicationsByStatus = function (status, role) {
            return this.hasDeployedApps() ? rxjs.of(this.deployedApps) : this.getApplicationsByStatus(status, role);
        };
        AppsProcessCloudService.prototype.hasDeployedApps = function () {
            return this.deployedApps && this.deployedApps.length > 0;
        };
        AppsProcessCloudService.prototype.loadApps = function () {
            var apps = this.appConfigService.get('alfresco-deployed-apps', []);
            apps.map(function (app) {
                app.theme = app.theme ? app.theme : 'theme-1';
                app.icon = app.icon ? app.icon : 'favorite';
            });
            this.deployedApps = apps;
        };
        AppsProcessCloudService.prototype.getApplicationsByStatus = function (status, role) {
            var _this = this;
            if (status === '') {
                return rxjs.of([]);
            }
            var api = this.apiService.getInstance().oauth2Auth;
            var path = this.getApplicationUrl();
            var pathParams = {}, queryParams = { status: status, roles: role, sort: 'name' }, headerParams = {}, formParams = {}, bodyParam = {}, contentTypes = ['application/json'], accepts = ['application/json'];
            return rxjs.from(api.callCustomApi(path, 'GET', pathParams, queryParams, headerParams, formParams, bodyParam, contentTypes, accepts))
                .pipe(operators.map(function (applications) {
                return applications.list.entries.map(function (application) { return application.entry; });
            }), operators.catchError(function (err) { return _this.handleError(err); }));
        };
        AppsProcessCloudService.prototype.getApplicationUrl = function () {
            return this.appConfigService.get('bpmHost') + "/deployment-service/v1/applications";
        };
        AppsProcessCloudService.prototype.handleError = function (error) {
            this.logService.error(error);
            return rxjs.throwError(error || 'Server error');
        };
        return AppsProcessCloudService;
    }());
    AppsProcessCloudService.ɵprov = i0.ɵɵdefineInjectable({ factory: function AppsProcessCloudService_Factory() { return new AppsProcessCloudService(i0.ɵɵinject(i1.AlfrescoApiService), i0.ɵɵinject(i1.LogService), i0.ɵɵinject(i1.AppConfigService)); }, token: AppsProcessCloudService, providedIn: "root" });
    AppsProcessCloudService.decorators = [
        { type: i0.Injectable, args: [{ providedIn: 'root' },] }
    ];
    AppsProcessCloudService.ctorParameters = function () { return [
        { type: i1.AlfrescoApiService },
        { type: i1.LogService },
        { type: i1.AppConfigService }
    ]; };

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var AppListCloudComponent = /** @class */ (function () {
        function AppListCloudComponent(appsProcessCloudService) {
            this.appsProcessCloudService = appsProcessCloudService;
            this.layoutType = AppListCloudComponent.LAYOUT_GRID;
            this.appClick = new i0.EventEmitter();
            this.loadingError$ = new rxjs.Subject();
            this.hasEmptyCustomContentTemplate = false;
        }
        AppListCloudComponent.prototype.ngOnInit = function () {
            var _this = this;
            if (!this.isValidType()) {
                this.setDefaultLayoutType();
            }
            this.apps$ = this.appsProcessCloudService.getDeployedApplicationsByStatus(AppListCloudComponent.RUNNING_STATUS)
                .pipe(operators.catchError(function () {
                _this.loadingError$.next(true);
                return rxjs.of();
            }));
        };
        AppListCloudComponent.prototype.ngAfterContentInit = function () {
            if (this.emptyCustomContent) {
                this.hasEmptyCustomContentTemplate = true;
            }
        };
        AppListCloudComponent.prototype.onSelectApp = function (app) {
            this.appClick.emit(app);
        };
        AppListCloudComponent.prototype.isValidType = function () {
            if (this.layoutType && (this.layoutType === AppListCloudComponent.LAYOUT_LIST || this.layoutType === AppListCloudComponent.LAYOUT_GRID)) {
                return true;
            }
            return false;
        };
        AppListCloudComponent.prototype.setDefaultLayoutType = function () {
            this.layoutType = AppListCloudComponent.LAYOUT_GRID;
        };
        AppListCloudComponent.prototype.isList = function () {
            return this.layoutType === AppListCloudComponent.LAYOUT_LIST;
        };
        AppListCloudComponent.prototype.isGrid = function () {
            return this.layoutType === AppListCloudComponent.LAYOUT_GRID;
        };
        return AppListCloudComponent;
    }());
    AppListCloudComponent.LAYOUT_LIST = 'LIST';
    AppListCloudComponent.LAYOUT_GRID = 'GRID';
    AppListCloudComponent.RUNNING_STATUS = 'RUNNING';
    AppListCloudComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'adf-cloud-app-list',
                    template: "<div class=\"menu-container\" *ngIf=\"apps$ | async as appsList; else loadingOrError\">\n    <ng-container *ngIf=\"appsList.length > 0; else noApps\">\n        <div *ngIf=\"isGrid(); else appList\" fxLayout=\"row wrap\">\n            <adf-cloud-app-details fxFlex=\"33.33333%\" fxFlex.lt-md=\"50%\" fxFlex.lt-sm=\"100%\"\n                *ngFor=\"let app of appsList\" [applicationInstance]=\"app\" (selectedApp)=\"onSelectApp($event)\">\n            </adf-cloud-app-details>\n        </div>\n\n        <ng-template #appList>\n            <mat-list class=\"adf-app-list\">\n                <mat-list-item class=\"adf-app-list-item\" (click)=\"onSelectApp(app)\" (keyup.enter)=\"onSelectApp(app)\"\n                    *ngFor=\"let app of appsList\" tabindex=\"0\" role=\"button\" title=\"{{app.name}}\">\n                    <mat-icon matListIcon>touch_app</mat-icon>\n                    <span matLine>{{app.name}}</span>\n                </mat-list-item>\n            </mat-list>\n        </ng-template>\n    </ng-container>\n</div>\n<ng-template #noApps>\n    <div class=\"adf-app-list-empty\">\n        <ng-content select=\"adf-custom-empty-content-template\" *ngIf=\"hasEmptyCustomContentTemplate; else defaultEmptyTemplate\"\n            class=\"adf-custom-empty-template\">\n        </ng-content>\n\n        <ng-template #defaultEmptyTemplate>\n            <adf-empty-content icon=\"apps\" [title]=\"'ADF_CLOUD_TASK_LIST.APPS.NO_APPS.TITLE' | translate\"\n                [subtitle]=\"'ADF_CLOUD_TASK_LIST.APPS.NO_APPS.SUBTITLE' | translate\">\n            </adf-empty-content>\n        </ng-template>\n    </div>\n</ng-template>\n<ng-template #loadingOrError>\n    <div *ngIf=\"loadingError$ | async; else loading\" class=\"adf-app-list-error\">\n        <adf-empty-content icon=\"error_outline\" [title]=\"'ADF_CLOUD_TASK_LIST.APPS.ERROR.TITLE' | translate\"\n            [subtitle]=\"'ADF_CLOUD_TASK_LIST.APPS.ERROR.SUBTITLE' | translate\">\n        </adf-empty-content>\n    </div>\n    <ng-template #loading>\n    <ng-container>\n        <div class=\"adf-app-list-spinner\">\n            <mat-spinner></mat-spinner>\n        </div>\n    </ng-container>\n</ng-template>\n</ng-template>\n",
                    styles: [":host{width:100%}.adf-app-list-item{cursor:pointer}.adf-app-list-empty,.adf-app-list-error,.adf-app-list-spinner{align-items:center;display:flex;flex-direction:column;height:85vh;justify-content:center}.adf-app-list-empty .mat-spinner,.adf-app-list-error .mat-spinner,.adf-app-list-spinner .mat-spinner{margin:0 auto}"]
                },] }
    ];
    AppListCloudComponent.ctorParameters = function () { return [
        { type: AppsProcessCloudService }
    ]; };
    AppListCloudComponent.propDecorators = {
        emptyCustomContent: [{ type: i0.ContentChild, args: [i1.CustomEmptyContentTemplateDirective,] }],
        layoutType: [{ type: i0.Input }],
        appClick: [{ type: i0.Output }]
    };

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var AppListCloudModule = /** @class */ (function () {
        function AppListCloudModule() {
        }
        return AppListCloudModule;
    }());
    AppListCloudModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [
                        common.CommonModule,
                        i1.TemplateModule,
                        MaterialModule,
                        flexLayout.FlexLayoutModule,
                        i1.CoreModule
                    ],
                    declarations: [
                        AppListCloudComponent,
                        AppDetailsCloudComponent
                    ],
                    exports: [
                        AppListCloudComponent,
                        AppDetailsCloudComponent
                    ]
                },] }
    ];

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, o) {
        for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
                __createBinding(o, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    /** @deprecated */
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    /** @deprecated */
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    function __spreadArray(to, from, pack) {
        if (pack || arguments.length === 2)
            for (var i = 0, l = from.length, ar; i < l; i++) {
                if (ar || !(i in from)) {
                    if (!ar)
                        ar = Array.prototype.slice.call(from, 0, i);
                    ar[i] = from[i];
                }
            }
        return to.concat(ar || from);
    }
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, state, kind, f) {
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    }
    function __classPrivateFieldSet(receiver, state, value, kind, f) {
        if (kind === "m")
            throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
    }

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var TaskQueryCloudRequestModel = /** @class */ (function () {
        function TaskQueryCloudRequestModel(obj) {
            if (obj) {
                this.appName = obj.appName;
                this.appVersion = obj.appVersion;
                this.assignee = obj.assignee;
                this.claimedDate = obj.claimedDate;
                this.createdDate = obj.createdDate;
                this.createdFrom = obj.createdFrom;
                this.createdTo = obj.createdTo;
                this.description = obj.description;
                this.dueDate = obj.dueDate;
                this.lastModifiedFrom = obj.lastModifiedFrom;
                this.lastModifiedTo = obj.lastModifiedTo;
                this.dueDateFrom = obj.dueDateFrom;
                this.dueDateTo = obj.dueDateTo;
                this.id = obj.id;
                this.name = obj.name;
                this.owner = obj.owner;
                this.parentTaskId = obj.parentTaskId;
                this.standalone = obj.standalone;
                this.priority = obj.priority;
                this.processDefinitionId = obj.processDefinitionId;
                this.processDefinitionName = obj.processDefinitionName;
                this.processInstanceId = obj.processInstanceId;
                this.status = obj.status;
                this.completedBy = obj.completedBy;
                this.maxItems = obj.maxItems;
                this.skipCount = obj.skipCount;
                this.sorting = obj.sorting;
                this.completedFrom = obj.completedFrom;
                this.completedTo = obj.completedTo;
                this.completedDate = obj.completedDate;
                this.candidateGroupId = obj.candidateGroupId;
            }
        }
        return TaskQueryCloudRequestModel;
    }());

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var BaseCloudService = /** @class */ (function () {
        function BaseCloudService(apiService, appConfigService) {
            this.apiService = apiService;
            this.appConfigService = appConfigService;
            this.defaultParams = {
                path: '',
                httpMethod: '',
                contentTypes: ['application/json'],
                accepts: ['application/json'],
                returnType: Object
            };
        }
        BaseCloudService.prototype.getBasePath = function (appName) {
            return appName
                ? this.contextRoot + "/" + appName
                : this.contextRoot;
        };
        BaseCloudService.prototype.post = function (url, data) {
            return rxjs.from(this.callApi(Object.assign(Object.assign({}, this.defaultParams), { path: url, httpMethod: 'POST', bodyParam: data })));
        };
        BaseCloudService.prototype.put = function (url, data) {
            return rxjs.from(this.callApi(Object.assign(Object.assign({}, this.defaultParams), { path: url, httpMethod: 'PUT', bodyParam: data })));
        };
        BaseCloudService.prototype.delete = function (url) {
            return rxjs.from(this.callApi(Object.assign(Object.assign({}, this.defaultParams), { path: url, httpMethod: 'DELETE' })));
        };
        BaseCloudService.prototype.get = function (url, queryParams) {
            return rxjs.from(this.callApi(Object.assign(Object.assign({}, this.defaultParams), { path: url, httpMethod: 'GET', queryParams: queryParams })));
        };
        BaseCloudService.prototype.callApi = function (params) {
            return this.apiService.getInstance()
                .oauth2Auth.callCustomApi(params.path, params.httpMethod, params.pathParams, params.queryParams, params.headerParams, params.formParams, params.bodyParam, params.contentTypes, params.accepts, params.returnType, params.contextRoot, params.responseType);
        };
        Object.defineProperty(BaseCloudService.prototype, "contextRoot", {
            get: function () {
                return this.appConfigService.get('bpmHost', '');
            },
            enumerable: false,
            configurable: true
        });
        return BaseCloudService;
    }());

    var TaskListCloudService = /** @class */ (function (_super) {
        __extends(TaskListCloudService, _super);
        function TaskListCloudService(apiService, appConfigService, logService) {
            var _this = _super.call(this, apiService, appConfigService) || this;
            _this.logService = logService;
            return _this;
        }
        TaskListCloudService.prototype.getTaskByRequest = function (requestNode, queryUrl) {
            if (requestNode.appName || requestNode.appName === '') {
                queryUrl = queryUrl || this.getBasePath(requestNode.appName) + "/query/v1/tasks";
                var queryParams = this.buildQueryParams(requestNode);
                var sortingParams = this.buildSortingParam(requestNode.sorting);
                if (sortingParams) {
                    queryParams['sort'] = sortingParams;
                }
                return this.get(queryUrl, queryParams).pipe(operators.map(function (response) {
                    var entries = response.list && response.list.entries;
                    if (entries) {
                        response.list.entries = entries.map(function (entryData) { return entryData.entry; });
                    }
                    return response;
                }));
            }
            else {
                this.logService.error('Appname is mandatory for querying task');
                return rxjs.throwError('Appname not configured');
            }
        };
        TaskListCloudService.prototype.buildQueryParams = function (requestNode) {
            var queryParam = {};
            for (var property in requestNode) {
                if (requestNode.hasOwnProperty(property) &&
                    !this.isExcludedField(property) &&
                    this.isPropertyValueValid(requestNode, property)) {
                    queryParam[property] = requestNode[property];
                }
            }
            return queryParam;
        };
        TaskListCloudService.prototype.isExcludedField = function (property) {
            return property === 'appName' || property === 'sorting';
        };
        TaskListCloudService.prototype.isPropertyValueValid = function (requestNode, property) {
            return requestNode[property] !== '' && requestNode[property] !== null && requestNode[property] !== undefined;
        };
        TaskListCloudService.prototype.buildSortingParam = function (models) {
            var e_1, _a;
            var finalSorting = '';
            if (models) {
                try {
                    for (var models_1 = __values(models), models_1_1 = models_1.next(); !models_1_1.done; models_1_1 = models_1.next()) {
                        var sort = models_1_1.value;
                        if (!finalSorting) {
                            finalSorting = sort.orderBy + "," + sort.direction;
                        }
                        else {
                            finalSorting = finalSorting + "&" + sort.orderBy + "," + sort.direction;
                        }
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (models_1_1 && !models_1_1.done && (_a = models_1.return)) _a.call(models_1);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
            }
            return encodeURI(finalSorting);
        };
        return TaskListCloudService;
    }(BaseCloudService));
    TaskListCloudService.ɵprov = i0.ɵɵdefineInjectable({ factory: function TaskListCloudService_Factory() { return new TaskListCloudService(i0.ɵɵinject(i1.AlfrescoApiService), i0.ɵɵinject(i1.AppConfigService), i0.ɵɵinject(i1.LogService)); }, token: TaskListCloudService, providedIn: "root" });
    TaskListCloudService.decorators = [
        { type: i0.Injectable, args: [{ providedIn: 'root' },] }
    ];
    TaskListCloudService.ctorParameters = function () { return [
        { type: i1.AlfrescoApiService },
        { type: i1.AppConfigService },
        { type: i1.LogService }
    ]; };

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var taskPresetsCloudDefaultModel = {
        'default': [
            {
                'key': 'name',
                'type': 'text',
                'title': 'ADF_CLOUD_TASK_LIST.PROPERTIES.NAME',
                'sortable': true
            },
            {
                'key': 'created',
                'type': 'text',
                'title': 'ADF_CLOUD_TASK_LIST.PROPERTIES.CREATED',
                'cssClass': 'hidden',
                'sortable': true
            },
            {
                'key': 'assignee',
                'type': 'text',
                'title': 'ADF_CLOUD_TASK_LIST.PROPERTIES.ASSIGNEE',
                'cssClass': 'hidden',
                'sortable': true
            }
        ]
    };
    var serviceTaskPresetsCloudDefaultModel = {
        'default': [
            {
                'key': 'activityName',
                'type': 'text',
                'title': 'ADF_CLOUD_SERVICE_TASK_LIST.PROPERTIES.ACTIVITY_NAME',
                'sortable': true
            },
            {
                'key': 'status',
                'type': 'text',
                'title': 'ADF_CLOUD_SERVICE_TASK_LIST.PROPERTIES.STATUS',
                'sortable': true
            },
            {
                'key': 'startedDate',
                'type': 'text',
                'title': 'ADF_CLOUD_SERVICE_TASK_LIST.PROPERTIES.STARTED_DATE',
                'cssClass': 'hidden',
                'sortable': true
            },
            {
                'key': 'completedDate',
                'type': 'text',
                'title': 'ADF_CLOUD_SERVICE_TASK_LIST.PROPERTIES.COMPLETED_DATE',
                'cssClass': 'hidden',
                'sortable': true
            }
        ]
    };

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var TaskListCloudSortingModel = /** @class */ (function () {
        function TaskListCloudSortingModel(obj) {
            if (obj) {
                this.orderBy = obj.orderBy;
                this.direction = obj.direction;
            }
        }
        return TaskListCloudSortingModel;
    }());

    var StartTaskCloudRequestModel = /** @class */ (function () {
        function StartTaskCloudRequestModel(obj) {
            if (obj) {
                this.name = obj.name || null;
                this.description = obj.description || null;
                this.assignee = obj.assignee || null;
                this.priority = obj.priority || null;
                this.dueDate = obj.dueDate || null;
                this.candidateUsers = obj.candidateUsers || null;
                this.candidateGroups = obj.candidateGroups || null;
                this.formKey = obj.formKey || null;
                this.payloadType = 'CreateTaskPayload';
            }
        }
        return StartTaskCloudRequestModel;
    }());

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var ProcessDefinitionCloud = /** @class */ (function () {
        function ProcessDefinitionCloud(obj) {
            this.id = obj && obj.id || null;
            this.name = obj && obj.name || null;
            this.appName = obj && obj.appName || null;
            this.key = obj && obj.key || null;
            this.formKey = obj && obj.formKey || null;
            this.version = obj && obj.version || 0;
            this.appVersion = obj && obj.appVersion || 0;
        }
        return ProcessDefinitionCloud;
    }());

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    (function (ClaimTaskEnum) {
        ClaimTaskEnum["claim"] = "claim";
        ClaimTaskEnum["unclaim"] = "unclaim";
    })(exports.ClaimTaskEnum || (exports.ClaimTaskEnum = {}));
    var DEFAULT_TASK_PRIORITIES = [
        { label: 'ADF_CLOUD_TASK_LIST.PROPERTIES.PRIORITY_VALUES.NONE', value: '0', key: '0' },
        { label: 'ADF_CLOUD_TASK_LIST.PROPERTIES.PRIORITY_VALUES.LOW', value: '1', key: '1' },
        { label: 'ADF_CLOUD_TASK_LIST.PROPERTIES.PRIORITY_VALUES.NORMAL', value: '2', key: '2' },
        { label: 'ADF_CLOUD_TASK_LIST.PROPERTIES.PRIORITY_VALUES.HIGH', value: '3', key: '3' }
    ];
    var TASK_ASSIGNED_STATE = 'ASSIGNED';
    var TASK_CREATED_STATE = 'CREATED';

    var TaskCloudService = /** @class */ (function (_super) {
        __extends(TaskCloudService, _super);
        function TaskCloudService(apiService, appConfigService, logService, translateService, identityUserService) {
            var _this = _super.call(this, apiService, appConfigService) || this;
            _this.logService = logService;
            _this.translateService = translateService;
            _this.identityUserService = identityUserService;
            _this.dataChangesDetected$ = new rxjs.Subject();
            return _this;
        }
        TaskCloudService.prototype.completeTask = function (appName, taskId) {
            if ((appName || appName === '') && taskId) {
                var url = this.getBasePath(appName) + "/rb/v1/tasks/" + taskId + "/complete";
                var payload = { 'payloadType': 'CompleteTaskPayload' };
                return this.post(url, payload);
            }
            else {
                this.logService.error('AppName and TaskId are mandatory for complete a task');
                return rxjs.throwError('AppName/TaskId not configured');
            }
        };
        TaskCloudService.prototype.canCompleteTask = function (taskDetails) {
            return taskDetails && taskDetails.status === TASK_ASSIGNED_STATE && this.isAssignedToMe(taskDetails.assignee);
        };
        TaskCloudService.prototype.isTaskEditable = function (taskDetails) {
            return taskDetails && taskDetails.status === TASK_ASSIGNED_STATE && this.isAssignedToMe(taskDetails.assignee);
        };
        TaskCloudService.prototype.isAssigneePropertyClickable = function (taskDetails, candidateUsers, candidateGroups) {
            var isClickable = false;
            var states = [TASK_ASSIGNED_STATE];
            if ((candidateUsers === null || candidateUsers === void 0 ? void 0 : candidateUsers.length) || (candidateGroups === null || candidateGroups === void 0 ? void 0 : candidateGroups.length)) {
                isClickable = states.includes(taskDetails.status);
            }
            return isClickable;
        };
        TaskCloudService.prototype.canClaimTask = function (taskDetails) {
            return taskDetails && taskDetails.status === TASK_CREATED_STATE;
        };
        TaskCloudService.prototype.canUnclaimTask = function (taskDetails) {
            var currentUser = this.identityUserService.getCurrentUserInfo().username;
            return taskDetails && taskDetails.status === TASK_ASSIGNED_STATE && taskDetails.assignee === currentUser;
        };
        TaskCloudService.prototype.claimTask = function (appName, taskId, assignee) {
            var _this = this;
            if ((appName || appName === '') && taskId) {
                var queryUrl = this.getBasePath(appName) + "/rb/v1/tasks/" + taskId + "/claim?assignee=" + assignee;
                return this.post(queryUrl).pipe(operators.map(function (res) {
                    _this.dataChangesDetected$.next();
                    return res.entry;
                }));
            }
            else {
                this.logService.error('AppName and TaskId are mandatory for querying a task');
                return rxjs.throwError('AppName/TaskId not configured');
            }
        };
        TaskCloudService.prototype.unclaimTask = function (appName, taskId) {
            var _this = this;
            if ((appName || appName === '') && taskId) {
                var queryUrl = this.getBasePath(appName) + "/rb/v1/tasks/" + taskId + "/release";
                return this.post(queryUrl).pipe(operators.map(function (res) {
                    _this.dataChangesDetected$.next();
                    return res.entry;
                }));
            }
            else {
                this.logService.error('AppName and TaskId are mandatory for querying a task');
                return rxjs.throwError('AppName/TaskId not configured');
            }
        };
        TaskCloudService.prototype.getTaskById = function (appName, taskId) {
            if ((appName || appName === '') && taskId) {
                var queryUrl = this.getBasePath(appName) + "/query/v1/tasks/" + taskId;
                return this.get(queryUrl).pipe(operators.map(function (res) { return res.entry; }));
            }
            else {
                this.logService.error('AppName and TaskId are mandatory for querying a task');
                return rxjs.throwError('AppName/TaskId not configured');
            }
        };
        TaskCloudService.prototype.createNewTask = function (startTaskRequest, appName) {
            var queryUrl = this.getBasePath(appName) + "/rb/v1/tasks";
            var payload = JSON.stringify(new StartTaskCloudRequestModel(startTaskRequest));
            return this.post(queryUrl, payload)
                .pipe(operators.map(function (response) { return response.entry; }));
        };
        TaskCloudService.prototype.updateTask = function (appName, taskId, payload) {
            if ((appName || appName === '') && taskId) {
                payload.payloadType = 'UpdateTaskPayload';
                var queryUrl = this.getBasePath(appName) + "/rb/v1/tasks/" + taskId;
                return this.put(queryUrl, payload).pipe(operators.map(function (res) { return res.entry; }));
            }
            else {
                this.logService.error('AppName and TaskId are mandatory for querying a task');
                return rxjs.throwError('AppName/TaskId not configured');
            }
        };
        TaskCloudService.prototype.getCandidateUsers = function (appName, taskId) {
            if ((appName || appName === '') && taskId) {
                var queryUrl = this.getBasePath(appName) + "/query/v1/tasks/" + taskId + "/candidate-users";
                return this.get(queryUrl);
            }
            else {
                this.logService.error('AppName and TaskId are mandatory to get candidate user');
                return rxjs.of([]);
            }
        };
        TaskCloudService.prototype.getCandidateGroups = function (appName, taskId) {
            if ((appName || appName === '') && taskId) {
                var queryUrl = this.getBasePath(appName) + "/query/v1/tasks/" + taskId + "/candidate-groups";
                return this.get(queryUrl);
            }
            else {
                this.logService.error('AppName and TaskId are mandatory to get candidate groups');
                return rxjs.of([]);
            }
        };
        TaskCloudService.prototype.getProcessDefinitions = function (appName) {
            if (appName || appName === '') {
                var url = this.getBasePath(appName) + "/rb/v1/process-definitions";
                return this.get(url).pipe(operators.map(function (res) {
                    return res.list.entries.map(function (processDefs) { return new ProcessDefinitionCloud(processDefs.entry); });
                }));
            }
            else {
                this.logService.error('AppName is mandatory for querying task');
                return rxjs.throwError('AppName not configured');
            }
        };
        TaskCloudService.prototype.assign = function (appName, taskId, assignee) {
            if (appName && taskId) {
                var payLoad = { 'assignee': assignee, 'taskId': taskId, 'payloadType': 'AssignTaskPayload' };
                var url = this.getBasePath(appName) + "/rb/v1/tasks/" + taskId + "/assign";
                return this.post(url, payLoad).pipe(operators.map(function (res) {
                    return res.entry;
                }));
            }
            else {
                this.logService.error('AppName and TaskId are mandatory to change/update the task assignee');
                return rxjs.throwError('AppName/TaskId not configured');
            }
        };
        TaskCloudService.prototype.getPriorityLabel = function (priority) {
            var priorityItem = this.priorities.find(function (item) { return item.value === priority.toString(); }) || this.priorities[0];
            return this.translateService.instant(priorityItem.label);
        };
        Object.defineProperty(TaskCloudService.prototype, "priorities", {
            get: function () {
                return this.appConfigService.get('adf-cloud-priority-values') || DEFAULT_TASK_PRIORITIES;
            },
            enumerable: false,
            configurable: true
        });
        TaskCloudService.prototype.isAssignedToMe = function (assignee) {
            var currentUser = this.identityUserService.getCurrentUserInfo().username;
            return assignee === currentUser;
        };
        return TaskCloudService;
    }(BaseCloudService));
    TaskCloudService.ɵprov = i0.ɵɵdefineInjectable({ factory: function TaskCloudService_Factory() { return new TaskCloudService(i0.ɵɵinject(i1.AlfrescoApiService), i0.ɵɵinject(i1.AppConfigService), i0.ɵɵinject(i1.LogService), i0.ɵɵinject(i1.TranslationService), i0.ɵɵinject(i1.IdentityUserService)); }, token: TaskCloudService, providedIn: "root" });
    TaskCloudService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    TaskCloudService.ctorParameters = function () { return [
        { type: i1.AlfrescoApiService },
        { type: i1.AppConfigService },
        { type: i1.LogService },
        { type: i1.TranslationService },
        { type: i1.IdentityUserService }
    ]; };

    var BaseTaskListCloudComponent = /** @class */ (function (_super) {
        __extends(BaseTaskListCloudComponent, _super);
        function BaseTaskListCloudComponent(appConfigService, taskCloudService, userPreferences, presetKey) {
            var _this = _super.call(this, appConfigService, presetKey, taskPresetsCloudDefaultModel) || this;
            _this.taskCloudService = taskCloudService;
            _this.userPreferences = userPreferences;
            _this.appName = '';
            _this.selectionMode = 'single';
            _this.multiselect = false;
            _this.stickyHeader = false;
            _this.showActions = false;
            _this.actionsPosition = 'right';
            _this.showContextMenu = false;
            _this.showRowContextMenu = new i0.EventEmitter();
            _this.showRowActionsMenu = new i0.EventEmitter();
            _this.executeRowAction = new i0.EventEmitter();
            _this.rowClick = new i0.EventEmitter();
            _this.rowsSelected = new i0.EventEmitter();
            _this.success = new i0.EventEmitter();
            _this.error = new i0.EventEmitter();
            _this.rows = [];
            _this.skipCount = 0;
            _this.isLoading = true;
            _this.defaultSorting = { key: 'startDate', direction: 'desc' };
            _this.onDestroy$ = new rxjs.Subject();
            _this.size = userPreferences.paginationSize;
            _this.pagination = new rxjs.BehaviorSubject({
                maxItems: _this.size,
                skipCount: 0,
                totalItems: 0
            });
            _this.boundReplacePriorityValues = _this.replacePriorityValues.bind(_this);
            return _this;
        }
        BaseTaskListCloudComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.userPreferences
                .select(i1.UserPreferenceValues.PaginationSize)
                .pipe(operators.takeUntil(this.onDestroy$))
                .subscribe(function (pageSize) { return _this.size = pageSize; });
        };
        BaseTaskListCloudComponent.prototype.ngOnChanges = function (changes) {
            if (changes['sorting']) {
                this.formatSorting(changes['sorting'].currentValue);
            }
            this.reload();
        };
        BaseTaskListCloudComponent.prototype.ngOnDestroy = function () {
            this.onDestroy$.next(true);
            this.onDestroy$.complete();
        };
        BaseTaskListCloudComponent.prototype.ngAfterContentInit = function () {
            this.createDatatableSchema();
        };
        BaseTaskListCloudComponent.prototype.reload = function () {
            this.requestNode = this.createRequestNode();
            if (this.requestNode.appName || this.requestNode.appName === '') {
                this.load(this.requestNode);
            }
            else {
                this.rows = [];
            }
        };
        BaseTaskListCloudComponent.prototype.isListEmpty = function () {
            return !this.rows || this.rows.length === 0;
        };
        BaseTaskListCloudComponent.prototype.resetPagination = function () {
            this.skipCount = 0;
            this.size = this.userPreferences.paginationSize;
            this.pagination.next({
                skipCount: 0,
                maxItems: this.size
            });
        };
        BaseTaskListCloudComponent.prototype.updatePagination = function (pagination) {
            this.size = pagination.maxItems;
            this.skipCount = pagination.skipCount;
            this.pagination.next(pagination);
            this.reload();
        };
        BaseTaskListCloudComponent.prototype.onSortingChanged = function (event) {
            this.setSorting(event.detail);
            this.formatSorting(this.sorting);
            this.reload();
        };
        BaseTaskListCloudComponent.prototype.onRowClick = function (item) {
            this.currentInstanceId = item.value.getValue('id');
            this.rowClick.emit(this.currentInstanceId);
        };
        BaseTaskListCloudComponent.prototype.onRowSelect = function (event) {
            this.selectedInstances = __spread(event.detail.selection);
            this.rowsSelected.emit(this.selectedInstances);
        };
        BaseTaskListCloudComponent.prototype.onRowUnselect = function (event) {
            this.selectedInstances = __spread(event.detail.selection);
            this.rowsSelected.emit(this.selectedInstances);
        };
        BaseTaskListCloudComponent.prototype.onRowKeyUp = function (event) {
            if (event.detail.keyboardEvent.key === 'Enter') {
                event.preventDefault();
                this.currentInstanceId = event.detail.row.getValue('id');
                this.rowClick.emit(this.currentInstanceId);
            }
        };
        BaseTaskListCloudComponent.prototype.onShowRowActionsMenu = function (event) {
            this.showRowActionsMenu.emit(event);
        };
        BaseTaskListCloudComponent.prototype.onShowRowContextMenu = function (event) {
            this.showRowContextMenu.emit(event);
        };
        BaseTaskListCloudComponent.prototype.onExecuteRowAction = function (row) {
            this.executeRowAction.emit(row);
        };
        BaseTaskListCloudComponent.prototype.setSorting = function (sortDetail) {
            var sorting = sortDetail ? {
                orderBy: sortDetail.key,
                direction: sortDetail.direction.toUpperCase()
            } : Object.assign({}, this.defaultSorting);
            this.sorting = [new TaskListCloudSortingModel(sorting)];
        };
        BaseTaskListCloudComponent.prototype.formatSorting = function (sorting) {
            this.formattedSorting = this.isValidSorting(sorting) ? [
                sorting[0].orderBy,
                sorting[0].direction.toLocaleLowerCase()
            ] : null;
        };
        BaseTaskListCloudComponent.prototype.isValidSorting = function (sorting) {
            return sorting && sorting.length && sorting[0].orderBy && sorting[0].direction;
        };
        BaseTaskListCloudComponent.prototype.replacePriorityValues = function (row, column) {
            var _this = this;
            return column.key.split('.').reduce(function (source, key) {
                if (key === 'priority' && source && typeof (source[key]) === 'number') {
                    return source[key] = _this.taskCloudService.getPriorityLabel(source[key]);
                }
                return source && typeof (source) === 'object' ? source[key] : undefined;
            }, row.obj);
        };
        return BaseTaskListCloudComponent;
    }(i1.DataTableSchema));
    BaseTaskListCloudComponent.decorators = [
        { type: i0.Directive }
    ];
    BaseTaskListCloudComponent.ctorParameters = function () { return [
        { type: i1.AppConfigService },
        { type: TaskCloudService },
        { type: i1.UserPreferencesService },
        { type: String }
    ]; };
    BaseTaskListCloudComponent.propDecorators = {
        emptyCustomContent: [{ type: i0.ContentChild, args: [i1.CustomEmptyContentTemplateDirective,] }],
        appName: [{ type: i0.Input }],
        selectionMode: [{ type: i0.Input }],
        multiselect: [{ type: i0.Input }],
        stickyHeader: [{ type: i0.Input }],
        sorting: [{ type: i0.Input }],
        showActions: [{ type: i0.Input }],
        actionsPosition: [{ type: i0.Input }],
        showContextMenu: [{ type: i0.Input }],
        showRowContextMenu: [{ type: i0.Output }],
        showRowActionsMenu: [{ type: i0.Output }],
        executeRowAction: [{ type: i0.Output }],
        rowClick: [{ type: i0.Output }],
        rowsSelected: [{ type: i0.Output }],
        success: [{ type: i0.Output }],
        error: [{ type: i0.Output }]
    };

    var TaskListCloudComponent = /** @class */ (function (_super) {
        __extends(TaskListCloudComponent, _super);
        function TaskListCloudComponent(taskListCloudService, appConfigService, taskCloudService, userPreferences) {
            var _this = _super.call(this, appConfigService, taskCloudService, userPreferences, TaskListCloudComponent.PRESET_KEY) || this;
            _this.taskListCloudService = taskListCloudService;
            _this.assignee = '';
            _this.createdFrom = '';
            _this.createdTo = '';
            _this.lastModifiedFrom = '';
            _this.lastModifiedTo = '';
            _this.dueDateFrom = '';
            _this.dueDateTo = '';
            _this.id = '';
            _this.name = '';
            _this.parentTaskId = '';
            _this.processDefinitionName = '';
            _this.processDefinitionId = '';
            _this.processInstanceId = '';
            _this.status = '';
            _this.owner = '';
            _this.standalone = false;
            _this.completedDate = '';
            _this.completedFrom = '';
            _this.completedTo = '';
            _this.candidateGroupId = '';
            return _this;
        }
        TaskListCloudComponent.prototype.load = function (requestNode) {
            var _this = this;
            this.isLoading = true;
            this.taskListCloudService.getTaskByRequest(requestNode).subscribe(function (tasks) {
                _this.rows = tasks.list.entries;
                _this.success.emit(tasks);
                _this.isLoading = false;
                _this.pagination.next(tasks.list.pagination);
            }, function (error) {
                _this.error.emit(error);
                _this.isLoading = false;
            });
        };
        TaskListCloudComponent.prototype.createRequestNode = function () {
            var requestNode = {
                appName: this.appName,
                assignee: this.assignee,
                id: this.id,
                name: this.name,
                parentTaskId: this.parentTaskId,
                processDefinitionName: this.processDefinitionName,
                processDefinitionId: this.processDefinitionId,
                processInstanceId: this.processInstanceId,
                owner: this.owner,
                priority: this.priority,
                lastModifiedFrom: this.lastModifiedFrom,
                lastModifiedTo: this.lastModifiedTo,
                dueDateFrom: this.dueDateFrom,
                dueDateTo: this.dueDateTo,
                status: this.status,
                dueDate: this.dueDate,
                createdDate: this.createdDate,
                createdFrom: this.createdFrom,
                createdTo: this.createdTo,
                maxItems: this.size,
                skipCount: this.skipCount,
                sorting: this.sorting,
                standalone: this.standalone,
                completedBy: this.completedBy,
                completedFrom: this.completedFrom,
                completedTo: this.completedTo,
                completedDate: this.completedDate,
                candidateGroupId: this.candidateGroupId
            };
            return new TaskQueryCloudRequestModel(requestNode);
        };
        return TaskListCloudComponent;
    }(BaseTaskListCloudComponent));
    TaskListCloudComponent.PRESET_KEY = 'adf-cloud-task-list.presets';
    TaskListCloudComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'adf-cloud-task-list',
                    template: "<div *ngIf=\"!rows\">{{ 'ADF_CLOUD_TASK_LIST.FILTERS.MESSAGES.NONE' | translate }}</div>\n<ng-container *ngIf=\"rows\">\n        <adf-datatable\n            [rows]=\"rows\"\n            [columns]=\"columns\"\n            [loading]=\"isLoading\"\n            [sorting]=\"formattedSorting\"\n            [multiselect]=\"multiselect\"\n            [selectionMode]=\"selectionMode\"\n            [stickyHeader]=\"stickyHeader\"\n            [actions]=\"showActions\"\n            [actionsPosition]=\"actionsPosition\"\n            [contextMenu]=\"showContextMenu\"\n            [resolverFn]=\"boundReplacePriorityValues\"\n            (showRowActionsMenu)=\"onShowRowActionsMenu($event)\"\n            (showRowContextMenu)=\"onShowRowContextMenu($event)\"\n            (executeRowAction)=\"onExecuteRowAction($event)\"\n            (row-select)=\"onRowSelect($any($event))\"\n            (row-unselect)=\"onRowUnselect($any($event))\"\n            (rowClick)=\"onRowClick($any($event))\"\n            (row-keyup)=\"onRowKeyUp($any($event))\"\n            (sorting-changed)=\"onSortingChanged($any($event))\">\n            <adf-loading-content-template>\n                <ng-template>\n                    <!-- Add your custom loading template here -->\n                    <mat-progress-spinner class=\"adf-cloud-task-list-loading-margin\"\n                                          [color]=\"'primary'\"\n                                          [mode]=\"'indeterminate'\">\n                    </mat-progress-spinner>\n                </ng-template>\n            </adf-loading-content-template>\n            <adf-no-content-template>\n                <ng-template>\n                    <adf-empty-content *ngIf=\"!emptyCustomContent\"\n                                       icon=\"assignment\"\n                                       [title]=\"'ADF_CLOUD_TASK_LIST.LIST.MESSAGES.TITLE' | translate\"\n                                       [subtitle]=\"'ADF_CLOUD_TASK_LIST.LIST.MESSAGES.SUBTITLE' | translate\">\n                    </adf-empty-content>\n                    <ng-content select=\"adf-custom-empty-content-template\"></ng-content>\n                </ng-template>\n            </adf-no-content-template>\n        </adf-datatable>\n</ng-container>\n",
                    encapsulation: i0.ViewEncapsulation.None,
                    styles: [".adf-cloud-task-list-loading-margin{margin-left:calc(50% - 50px);margin-right:calc(50% - 50px)}"]
                },] }
    ];
    TaskListCloudComponent.ctorParameters = function () { return [
        { type: TaskListCloudService },
        { type: i1.AppConfigService },
        { type: TaskCloudService },
        { type: i1.UserPreferencesService }
    ]; };
    TaskListCloudComponent.propDecorators = {
        assignee: [{ type: i0.Input }],
        createdDate: [{ type: i0.Input }],
        createdFrom: [{ type: i0.Input }],
        createdTo: [{ type: i0.Input }],
        dueDate: [{ type: i0.Input }],
        lastModifiedFrom: [{ type: i0.Input }],
        lastModifiedTo: [{ type: i0.Input }],
        dueDateFrom: [{ type: i0.Input }],
        dueDateTo: [{ type: i0.Input }],
        id: [{ type: i0.Input }],
        name: [{ type: i0.Input }],
        parentTaskId: [{ type: i0.Input }],
        processDefinitionName: [{ type: i0.Input }],
        processDefinitionId: [{ type: i0.Input }],
        processInstanceId: [{ type: i0.Input }],
        status: [{ type: i0.Input }],
        owner: [{ type: i0.Input }],
        priority: [{ type: i0.Input }],
        completedBy: [{ type: i0.Input }],
        standalone: [{ type: i0.Input }],
        completedDate: [{ type: i0.Input }],
        completedFrom: [{ type: i0.Input }],
        completedTo: [{ type: i0.Input }],
        candidateGroupId: [{ type: i0.Input }]
    };

    var ServiceTaskListCloudService = /** @class */ (function (_super) {
        __extends(ServiceTaskListCloudService, _super);
        function ServiceTaskListCloudService(apiService, appConfigService, logService) {
            var _this = _super.call(this, apiService, appConfigService) || this;
            _this.logService = logService;
            return _this;
        }
        ServiceTaskListCloudService.prototype.getServiceTaskByRequest = function (requestNode) {
            if (requestNode.appName || requestNode.appName === '') {
                var queryUrl = this.getBasePath(requestNode.appName) + "/query/admin/v1/service-tasks";
                var queryParams = this.buildQueryParams(requestNode);
                var sortingParams = this.buildSortingParam(requestNode.sorting);
                if (sortingParams) {
                    queryParams['sort'] = sortingParams;
                }
                return this.get(queryUrl, queryParams);
            }
            else {
                this.logService.error('Appname is mandatory for querying task');
                return rxjs.throwError('Appname not configured');
            }
        };
        ServiceTaskListCloudService.prototype.getServiceTaskStatus = function (appName, serviceTaskId) {
            if (appName) {
                var queryUrl = this.getBasePath(appName) + "/query/admin/v1/service-tasks/" + serviceTaskId + "/integration-context";
                return this.get(queryUrl).pipe(operators.map(function (response) { return response.entry; }));
            }
            else {
                this.logService.error('Appname is mandatory for querying task');
                return rxjs.throwError('Appname not configured');
            }
        };
        ServiceTaskListCloudService.prototype.buildQueryParams = function (requestNode) {
            var queryParam = {};
            for (var property in requestNode) {
                if (requestNode.hasOwnProperty(property) &&
                    !this.isExcludedField(property) &&
                    this.isPropertyValueValid(requestNode, property)) {
                    queryParam[property] = requestNode[property];
                }
            }
            return queryParam;
        };
        ServiceTaskListCloudService.prototype.isExcludedField = function (property) {
            return property === 'appName' || property === 'sorting';
        };
        ServiceTaskListCloudService.prototype.isPropertyValueValid = function (requestNode, property) {
            return requestNode[property] !== '' && requestNode[property] !== null && requestNode[property] !== undefined;
        };
        ServiceTaskListCloudService.prototype.buildSortingParam = function (models) {
            var e_1, _a;
            var finalSorting = '';
            if (models) {
                try {
                    for (var models_1 = __values(models), models_1_1 = models_1.next(); !models_1_1.done; models_1_1 = models_1.next()) {
                        var sort = models_1_1.value;
                        if (!finalSorting) {
                            finalSorting = sort.orderBy + "," + sort.direction;
                        }
                        else {
                            finalSorting = finalSorting + "&" + sort.orderBy + "," + sort.direction;
                        }
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (models_1_1 && !models_1_1.done && (_a = models_1.return)) _a.call(models_1);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
            }
            return encodeURI(finalSorting);
        };
        return ServiceTaskListCloudService;
    }(BaseCloudService));
    ServiceTaskListCloudService.ɵprov = i0.ɵɵdefineInjectable({ factory: function ServiceTaskListCloudService_Factory() { return new ServiceTaskListCloudService(i0.ɵɵinject(i1.AlfrescoApiService), i0.ɵɵinject(i1.AppConfigService), i0.ɵɵinject(i1.LogService)); }, token: ServiceTaskListCloudService, providedIn: "root" });
    ServiceTaskListCloudService.decorators = [
        { type: i0.Injectable, args: [{ providedIn: 'root' },] }
    ];
    ServiceTaskListCloudService.ctorParameters = function () { return [
        { type: i1.AlfrescoApiService },
        { type: i1.AppConfigService },
        { type: i1.LogService }
    ]; };

    var ServiceTaskListCloudComponent = /** @class */ (function (_super) {
        __extends(ServiceTaskListCloudComponent, _super);
        function ServiceTaskListCloudComponent(serviceTaskListCloudService, appConfigService, taskCloudService, userPreferences) {
            var _this = _super.call(this, appConfigService, taskCloudService, userPreferences, ServiceTaskListCloudComponent.PRESET_KEY) || this;
            _this.serviceTaskListCloudService = serviceTaskListCloudService;
            _this.queryParams = {};
            return _this;
        }
        ServiceTaskListCloudComponent.prototype.load = function (requestNode) {
            var _this = this;
            this.isLoading = true;
            this.serviceTaskListCloudService.getServiceTaskByRequest(requestNode).subscribe(function (tasks) {
                _this.rows = tasks.list.entries;
                _this.success.emit(tasks);
                _this.isLoading = false;
                _this.pagination.next(tasks.list.pagination);
            }, function (error) {
                _this.error.emit(error);
                _this.isLoading = false;
            });
        };
        ServiceTaskListCloudComponent.prototype.createRequestNode = function () {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q;
            var requestNode = {
                appName: this.appName,
                maxItems: this.size,
                skipCount: this.skipCount,
                sorting: this.sorting,
                id: (_a = this.queryParams) === null || _a === void 0 ? void 0 : _a.serviceTaskId,
                activityName: (_b = this.queryParams) === null || _b === void 0 ? void 0 : _b.activityName,
                activityType: (_c = this.queryParams) === null || _c === void 0 ? void 0 : _c.activityType,
                completedDate: (_d = this.queryParams) === null || _d === void 0 ? void 0 : _d.completedDate,
                elementId: (_e = this.queryParams) === null || _e === void 0 ? void 0 : _e.elementId,
                executionId: (_f = this.queryParams) === null || _f === void 0 ? void 0 : _f.executionId,
                processDefinitionId: (_g = this.queryParams) === null || _g === void 0 ? void 0 : _g.processDefinitionId,
                processDefinitionKey: (_h = this.queryParams) === null || _h === void 0 ? void 0 : _h.processDefinitionKey,
                processDefinitionVersion: (_j = this.queryParams) === null || _j === void 0 ? void 0 : _j.processDefinitionVersion,
                processInstanceId: (_k = this.queryParams) === null || _k === void 0 ? void 0 : _k.processInstanceId,
                serviceFullName: (_l = this.queryParams) === null || _l === void 0 ? void 0 : _l.serviceFullName,
                serviceName: (_m = this.queryParams) === null || _m === void 0 ? void 0 : _m.serviceName,
                serviceVersion: (_o = this.queryParams) === null || _o === void 0 ? void 0 : _o.serviceVersion,
                startedDate: (_p = this.queryParams) === null || _p === void 0 ? void 0 : _p.startedDate,
                status: (_q = this.queryParams) === null || _q === void 0 ? void 0 : _q.status
            };
            return requestNode;
        };
        return ServiceTaskListCloudComponent;
    }(BaseTaskListCloudComponent));
    ServiceTaskListCloudComponent.PRESET_KEY = 'adf-cloud-service-task-list.presets';
    ServiceTaskListCloudComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'adf-cloud-service-task-list',
                    template: "<div *ngIf=\"!rows\">{{ 'ADF_CLOUD_TASK_LIST.FILTERS.MESSAGES.NONE' | translate }}</div>\n<ng-container *ngIf=\"rows\">\n        <adf-datatable\n            [rows]=\"rows\"\n            [columns]=\"columns\"\n            [loading]=\"isLoading\"\n            [sorting]=\"formattedSorting\"\n            [multiselect]=\"multiselect\"\n            [selectionMode]=\"selectionMode\"\n            [stickyHeader]=\"stickyHeader\"\n            [actions]=\"showActions\"\n            [actionsPosition]=\"actionsPosition\"\n            [contextMenu]=\"showContextMenu\"\n            [resolverFn]=\"boundReplacePriorityValues\"\n            (showRowActionsMenu)=\"onShowRowActionsMenu($event)\"\n            (showRowContextMenu)=\"onShowRowContextMenu($event)\"\n            (executeRowAction)=\"onExecuteRowAction($event)\"\n            (row-select)=\"onRowSelect($any($event))\"\n            (row-unselect)=\"onRowUnselect($any($event))\"\n            (rowClick)=\"onRowClick($any($event))\"\n            (row-keyup)=\"onRowKeyUp($any($event))\"\n            (sorting-changed)=\"onSortingChanged($any($event))\">\n            <adf-loading-content-template>\n                <ng-template>\n                    <!-- Add your custom loading template here -->\n                    <mat-progress-spinner class=\"adf-cloud-task-list-loading-margin\"\n                                          [color]=\"'primary'\"\n                                          [mode]=\"'indeterminate'\">\n                    </mat-progress-spinner>\n                </ng-template>\n            </adf-loading-content-template>\n            <adf-no-content-template>\n                <ng-template>\n                    <adf-empty-content *ngIf=\"!emptyCustomContent\"\n                                       icon=\"assignment\"\n                                       [title]=\"'ADF_CLOUD_TASK_LIST.LIST.MESSAGES.TITLE' | translate\"\n                                       [subtitle]=\"'ADF_CLOUD_TASK_LIST.LIST.MESSAGES.SUBTITLE' | translate\">\n                    </adf-empty-content>\n                    <ng-content select=\"adf-custom-empty-content-template\"></ng-content>\n                </ng-template>\n            </adf-no-content-template>\n        </adf-datatable>\n</ng-container>\n",
                    encapsulation: i0.ViewEncapsulation.None,
                    styles: [".adf-cloud-task-list-loading-margin{margin-left:calc(50% - 50px);margin-right:calc(50% - 50px)}"]
                },] }
    ];
    ServiceTaskListCloudComponent.ctorParameters = function () { return [
        { type: ServiceTaskListCloudService },
        { type: i1.AppConfigService },
        { type: TaskCloudService },
        { type: i1.UserPreferencesService }
    ]; };
    ServiceTaskListCloudComponent.propDecorators = {
        queryParams: [{ type: i0.Input }]
    };

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var TaskListCloudModule = /** @class */ (function () {
        function TaskListCloudModule() {
        }
        return TaskListCloudModule;
    }());
    TaskListCloudModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [
                        common.CommonModule,
                        MaterialModule,
                        i1.CoreModule
                    ],
                    declarations: [
                        TaskListCloudComponent,
                        ServiceTaskListCloudComponent
                    ],
                    exports: [
                        TaskListCloudComponent,
                        ServiceTaskListCloudComponent
                    ]
                },] }
    ];

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    (function (DateCloudFilterType) {
        DateCloudFilterType["NO_DATE"] = "NO_DATE";
        DateCloudFilterType["TODAY"] = "TODAY";
        DateCloudFilterType["TOMORROW"] = "TOMORROW";
        DateCloudFilterType["NEXT_7_DAYS"] = "NEXT_7_DAYS";
        DateCloudFilterType["WEEK"] = "WEEK";
        DateCloudFilterType["MONTH"] = "MONTH";
        DateCloudFilterType["QUARTER"] = "QUARTER";
        DateCloudFilterType["YEAR"] = "YEAR";
        DateCloudFilterType["RANGE"] = "RANGE";
    })(exports.DateCloudFilterType || (exports.DateCloudFilterType = {}));

    var DateRangeFilterService = /** @class */ (function () {
        function DateRangeFilterService() {
            this.currentDate = new Date();
        }
        DateRangeFilterService.prototype.getDateRange = function (type) {
            switch (type) {
                case exports.DateCloudFilterType.TODAY: return this.getTodayDateRange();
                case exports.DateCloudFilterType.TOMORROW: return this.getTomorrowDateRange();
                case exports.DateCloudFilterType.NEXT_7_DAYS: return this.getNext7DaysDateRange();
                case exports.DateCloudFilterType.WEEK: return this.getCurrentWeekRange();
                case exports.DateCloudFilterType.MONTH: return this.getCurrentMonthDateRange();
                case exports.DateCloudFilterType.QUARTER: return this.getQuarterDateRange();
                case exports.DateCloudFilterType.YEAR: return this.getCurrentYearDateRange();
                default: return this.resetDateRange();
            }
        };
        DateRangeFilterService.prototype.isDateRangeType = function (type) {
            return type === exports.DateCloudFilterType.RANGE;
        };
        DateRangeFilterService.prototype.resetDateRange = function () {
            return {
                startDate: null,
                endDate: null
            };
        };
        DateRangeFilterService.prototype.getNext7DaysDateRange = function () {
            return {
                startDate: moment().startOf('day').toISOString(true),
                endDate: moment().add(7, 'days').endOf('day').toISOString(true)
            };
        };
        DateRangeFilterService.prototype.getTomorrowDateRange = function () {
            return {
                startDate: moment().endOf('day').toISOString(true),
                endDate: moment().add(1, 'days').endOf('day').toISOString(true)
            };
        };
        DateRangeFilterService.prototype.getCurrentYearDateRange = function () {
            return {
                startDate: moment().startOf('year').toISOString(true),
                endDate: moment().endOf('year').toISOString(true)
            };
        };
        DateRangeFilterService.prototype.getTodayDateRange = function () {
            return {
                startDate: moment().startOf('day').toISOString(true),
                endDate: moment().endOf('day').toISOString(true)
            };
        };
        DateRangeFilterService.prototype.getCurrentWeekRange = function () {
            return {
                startDate: moment().startOf('week').toISOString(true),
                endDate: moment().endOf('week').toISOString(true)
            };
        };
        DateRangeFilterService.prototype.getCurrentMonthDateRange = function () {
            return {
                startDate: moment().startOf('month').toISOString(true),
                endDate: moment().endOf('month').toISOString(true)
            };
        };
        DateRangeFilterService.prototype.getQuarterDateRange = function () {
            return {
                startDate: moment().startOf('quarter').toISOString(true),
                endDate: moment().endOf('quarter').toISOString(true)
            };
        };
        return DateRangeFilterService;
    }());
    DateRangeFilterService.ɵprov = i0.ɵɵdefineInjectable({ factory: function DateRangeFilterService_Factory() { return new DateRangeFilterService(); }, token: DateRangeFilterService, providedIn: "root" });
    DateRangeFilterService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var TaskFilterCloudModel = /** @class */ (function () {
        function TaskFilterCloudModel(obj) {
            this.dateRangeFilterService = new DateRangeFilterService();
            if (obj) {
                this.id = obj.id || Math.random().toString(36).substr(2, 9);
                this.name = obj.name || null;
                this.key = obj.key || null;
                this.icon = obj.icon || null;
                this.index = obj.index || null;
                this.appName = obj.appName || obj.appName === '' ? obj.appName : null;
                this.status = obj.status || null;
                this.sort = obj.sort || null;
                this.assignee = obj.assignee || null;
                this.order = obj.order || null;
                this.owner = obj.owner || null;
                this.processDefinitionName = obj.processDefinitionName || null;
                this.processDefinitionId = obj.processDefinitionId || null;
                this.processInstanceId = obj.processInstanceId || null;
                this.createdDate = obj.createdDate || null;
                this.dueDateType = obj.dueDateType || null;
                this.dueDate = obj.dueDate || null;
                this._dueDateFrom = obj._dueDateFrom || null;
                this._dueDateTo = obj._dueDateTo || null;
                this.taskName = obj.taskName || null;
                this.taskId = obj.taskId || null;
                this.parentTaskId = obj.parentTaskId || null;
                this.priority = obj.priority || null;
                this.standalone = obj.standalone || null;
                this.lastModifiedFrom = obj.lastModifiedFrom || null;
                this.lastModifiedTo = obj.lastModifiedTo || null;
                this.completedBy = obj.completedBy || null;
                this.completedDateType = obj.completedDateType || null;
                this.completedFrom = obj._completedFrom || null;
                this.completedTo = obj._completedTo || null;
                this.completedDate = obj.completedDate || null;
                this.createdDateType = obj.createdDateType || null;
                this.createdFrom = obj._createdFrom || null;
                this.createdTo = obj._createdTo || null;
                this.candidateGroups = obj.candidateGroups || null;
                this.showCounter = obj.showCounter || false;
            }
        }
        Object.defineProperty(TaskFilterCloudModel.prototype, "dueDateFrom", {
            get: function () {
                if (this.isDateRangeType(this.dueDateType)) {
                    return this._dueDateFrom;
                }
                return this.getStartDate(this.dueDateType);
            },
            set: function (dueDateFrom) {
                this._dueDateFrom = dueDateFrom;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(TaskFilterCloudModel.prototype, "dueDateTo", {
            get: function () {
                if (this.isDateRangeType(this.dueDateType)) {
                    return this._dueDateTo;
                }
                return this.getEndDate(this.dueDateType);
            },
            set: function (dueDateTo) {
                this._dueDateTo = dueDateTo;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(TaskFilterCloudModel.prototype, "completedFrom", {
            get: function () {
                if (this.isDateRangeType(this.completedDateType)) {
                    return this._completedFrom;
                }
                return this.getStartDate(this.completedDateType);
            },
            set: function (completedFrom) {
                this._completedFrom = completedFrom;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(TaskFilterCloudModel.prototype, "completedTo", {
            get: function () {
                if (this.isDateRangeType(this.completedDateType)) {
                    return this._completedTo;
                }
                return this.getEndDate(this.completedDateType);
            },
            set: function (completedTo) {
                this._completedTo = completedTo;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(TaskFilterCloudModel.prototype, "createdFrom", {
            get: function () {
                if (this.isDateRangeType(this.createdDateType)) {
                    return this._createdFrom;
                }
                return this.getStartDate(this.createdDateType);
            },
            set: function (createdFrom) {
                this._createdFrom = createdFrom;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(TaskFilterCloudModel.prototype, "createdTo", {
            get: function () {
                if (this.isDateRangeType(this.createdDateType)) {
                    return this._createdTo;
                }
                return this.getEndDate(this.createdDateType);
            },
            set: function (createdTo) {
                this._createdTo = createdTo;
            },
            enumerable: false,
            configurable: true
        });
        TaskFilterCloudModel.prototype.getStartDate = function (key) {
            return this.dateRangeFilterService.getDateRange(key).startDate;
        };
        TaskFilterCloudModel.prototype.getEndDate = function (key) {
            return this.dateRangeFilterService.getDateRange(key).endDate;
        };
        TaskFilterCloudModel.prototype.isDateRangeType = function (type) {
            return !!this.dateRangeFilterService.isDateRangeType(type);
        };
        return TaskFilterCloudModel;
    }());
    (function (AssignmentType) {
        AssignmentType["CURRENT_USER"] = "CURRENT_USER";
        AssignmentType["UNASSIGNED"] = "UNASSIGNED";
        AssignmentType["CANDIDATE_GROUPS"] = "CANDIDATE_GROUPS";
    })(exports.AssignmentType || (exports.AssignmentType = {}));

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var PROCESS_FILTERS_SERVICE_TOKEN = new i0.InjectionToken('proccess-filters-cloud');
    var TASK_FILTERS_SERVICE_TOKEN = new i0.InjectionToken('task-filters-cloud');

    var NotificationCloudService = /** @class */ (function (_super) {
        __extends(NotificationCloudService, _super);
        function NotificationCloudService(apiService, appConfigService, apollo, http) {
            var _this = _super.call(this, apiService, appConfigService) || this;
            _this.apollo = apollo;
            _this.http = http;
            _this.appsListening = [];
            return _this;
        }
        Object.defineProperty(NotificationCloudService.prototype, "webSocketHost", {
            get: function () {
                return this.contextRoot.split('://')[1];
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NotificationCloudService.prototype, "protocol", {
            get: function () {
                return this.contextRoot.split('://')[0] === 'https' ? 'wss' : 'ws';
            },
            enumerable: false,
            configurable: true
        });
        NotificationCloudService.prototype.initNotificationsForApp = function (appName) {
            var _this = this;
            if (!this.appsListening.includes(appName)) {
                this.appsListening.push(appName);
                var httpLink = this.http.create({
                    uri: this.getBasePath(appName) + "/notifications/graphql"
                });
                var webSocketLink = new ws.WebSocketLink({
                    uri: this.protocol + "://" + this.webSocketHost + "/" + appName + "/notifications/ws/graphql",
                    options: {
                        reconnect: true,
                        lazy: true,
                        connectionParams: {
                            kaInterval: 2000,
                            'X-Authorization': 'Bearer ' + this.apiService.getInstance().oauth2Auth.token
                        }
                    }
                });
                var link = core$1.split(function (_a) {
                    var query = _a.query;
                    var definition = utilities.getMainDefinition(query);
                    return definition.kind === 'OperationDefinition' && definition.operation === 'subscription';
                }, webSocketLink, httpLink);
                var errorLink = error.onError(function (_a) {
                    var e_1, _b;
                    var graphQLErrors = _a.graphQLErrors, operation = _a.operation, forward = _a.forward;
                    if (graphQLErrors) {
                        try {
                            for (var graphQLErrors_1 = __values(graphQLErrors), graphQLErrors_1_1 = graphQLErrors_1.next(); !graphQLErrors_1_1.done; graphQLErrors_1_1 = graphQLErrors_1.next()) {
                                var err = graphQLErrors_1_1.value;
                                switch (err.extensions.code) {
                                    case 'UNAUTHENTICATED':
                                        var oldHeaders = operation.getContext().headers;
                                        operation.setContext({
                                            headers: Object.assign(Object.assign({}, oldHeaders), { 'X-Authorization': 'Bearer ' + _this.apiService.getInstance().oauth2Auth.token })
                                        });
                                        forward(operation);
                                        break;
                                    default:
                                }
                            }
                        }
                        catch (e_1_1) { e_1 = { error: e_1_1 }; }
                        finally {
                            try {
                                if (graphQLErrors_1_1 && !graphQLErrors_1_1.done && (_b = graphQLErrors_1.return)) _b.call(graphQLErrors_1);
                            }
                            finally { if (e_1) throw e_1.error; }
                        }
                    }
                });
                this.apollo.createNamed(appName, {
                    link: core$1.ApolloLink.from([errorLink, link]),
                    cache: new core$1.InMemoryCache({ merge: true }),
                    defaultOptions: {
                        watchQuery: {
                            errorPolicy: 'all'
                        }
                    }
                });
            }
        };
        NotificationCloudService.prototype.makeGQLQuery = function (appName, gqlQuery) {
            this.initNotificationsForApp(appName);
            return this.apollo.use(appName).subscribe({ query: core$1.gql(gqlQuery) });
        };
        return NotificationCloudService;
    }(BaseCloudService));
    NotificationCloudService.ɵprov = i0.ɵɵdefineInjectable({ factory: function NotificationCloudService_Factory() { return new NotificationCloudService(i0.ɵɵinject(i1.AlfrescoApiService), i0.ɵɵinject(i1.AppConfigService), i0.ɵɵinject(i2$1.Apollo), i0.ɵɵinject(i3.HttpLink)); }, token: NotificationCloudService, providedIn: "root" });
    NotificationCloudService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    NotificationCloudService.ctorParameters = function () { return [
        { type: i1.AlfrescoApiService },
        { type: i1.AppConfigService },
        { type: i2$1.Apollo },
        { type: i3.HttpLink }
    ]; };

    var TASK_EVENT_SUBSCRIPTION_QUERY = "\n    subscription {\n        engineEvents(eventType: [\n            TASK_COMPLETED\n            TASK_ASSIGNED\n            TASK_ACTIVATED\n            TASK_SUSPENDED\n            TASK_CANCELLED,\n            TASK_CREATED\n        ]) {\n            eventType\n            entity\n        }\n    }\n";
    var TaskFilterCloudService = /** @class */ (function (_super) {
        __extends(TaskFilterCloudService, _super);
        function TaskFilterCloudService(identityUserService, preferenceService, apiService, appConfigService, notificationCloudService) {
            var _this = _super.call(this, apiService, appConfigService) || this;
            _this.identityUserService = identityUserService;
            _this.preferenceService = preferenceService;
            _this.notificationCloudService = notificationCloudService;
            _this.filtersSubject = new rxjs.BehaviorSubject([]);
            _this.filters$ = _this.filtersSubject.asObservable();
            return _this;
        }
        TaskFilterCloudService.prototype.createDefaultFilters = function (appName) {
            var _this = this;
            var key = this.prepareKey(appName);
            this.preferenceService.getPreferences(appName, key).pipe(operators.switchMap(function (response) {
                var preferences = (response && response.list && response.list.entries) ? response.list.entries : [];
                if (!_this.hasPreferences(preferences) || !_this.hasTaskFilters(preferences, key)) {
                    return _this.createTaskFilters(appName, key, _this.defaultTaskFilters(appName));
                }
                else {
                    return rxjs.of(_this.findFiltersByKeyInPreferences(preferences, key));
                }
            })).subscribe(function (filters) {
                _this.addFiltersToStream(filters);
            });
        };
        TaskFilterCloudService.prototype.hasPreferences = function (preferences) {
            return preferences && preferences.length > 0;
        };
        TaskFilterCloudService.prototype.hasTaskFilters = function (preferences, key) {
            var filters = preferences.find(function (filter) { return filter.entry.key === key; });
            return (filters && filters.entry) ? JSON.parse(filters.entry.value).length > 0 : false;
        };
        TaskFilterCloudService.prototype.createTaskFilters = function (appName, key, filters) {
            return this.preferenceService.createPreference(appName, key, filters);
        };
        TaskFilterCloudService.prototype.getTaskFiltersByKey = function (appName, key) {
            return this.preferenceService.getPreferenceByKey(appName, key);
        };
        TaskFilterCloudService.prototype.getTaskListFilters = function (appName) {
            this.createDefaultFilters(appName);
            return this.filters$;
        };
        TaskFilterCloudService.prototype.getTaskFilterById = function (appName, id) {
            var _this = this;
            var key = this.prepareKey(appName);
            return this.getTaskFiltersByKey(appName, key).pipe(operators.switchMap(function (filters) {
                if (filters && filters.length === 0) {
                    return _this.createTaskFilters(appName, key, _this.defaultTaskFilters(appName));
                }
                else {
                    return rxjs.of(filters);
                }
            }), operators.map(function (filters) {
                return filters.filter(function (filter) {
                    return filter.id === id;
                })[0];
            }));
        };
        TaskFilterCloudService.prototype.addFilter = function (newFilter) {
            var _this = this;
            var key = this.prepareKey(newFilter.appName);
            return this.getTaskFiltersByKey(newFilter.appName, key).pipe(operators.switchMap(function (filters) {
                if (filters && filters.length === 0) {
                    return _this.createTaskFilters(newFilter.appName, key, [newFilter]);
                }
                else {
                    filters.push(newFilter);
                    return _this.preferenceService.updatePreference(newFilter.appName, key, filters);
                }
            }), operators.map(function (filters) {
                _this.addFiltersToStream(filters);
                return filters;
            }));
        };
        TaskFilterCloudService.prototype.addFiltersToStream = function (filters) {
            this.filtersSubject.next(filters);
        };
        TaskFilterCloudService.prototype.updateFilter = function (updatedFilter) {
            var _this = this;
            var key = this.prepareKey(updatedFilter.appName);
            return this.getTaskFiltersByKey(updatedFilter.appName, key).pipe(operators.switchMap(function (filters) {
                if (filters && filters.length === 0) {
                    return _this.createTaskFilters(updatedFilter.appName, key, [updatedFilter]);
                }
                else {
                    var itemIndex = filters.findIndex(function (filter) { return filter.id === updatedFilter.id; });
                    filters[itemIndex] = updatedFilter;
                    return _this.updateTaskFilters(updatedFilter.appName, key, filters);
                }
            }), operators.map(function (updatedFilters) {
                _this.addFiltersToStream(updatedFilters);
                return updatedFilters;
            }));
        };
        TaskFilterCloudService.prototype.deleteFilter = function (deletedFilter) {
            var _this = this;
            var key = this.prepareKey(deletedFilter.appName);
            return this.getTaskFiltersByKey(deletedFilter.appName, key).pipe(operators.switchMap(function (filters) {
                if (filters && filters.length > 0) {
                    filters = filters.filter(function (filter) { return filter.id !== deletedFilter.id; });
                    return _this.updateTaskFilters(deletedFilter.appName, key, filters);
                }
                return rxjs.of([]);
            }), operators.map(function (filters) {
                _this.addFiltersToStream(filters);
                return filters;
            }));
        };
        TaskFilterCloudService.prototype.isDefaultFilter = function (filterName) {
            var defaultFilters = this.defaultTaskFilters();
            return defaultFilters.findIndex(function (filter) { return filterName === filter.name; }) !== -1;
        };
        TaskFilterCloudService.prototype.getTaskFilterCounter = function (taskFilter) {
            if (taskFilter.appName || taskFilter.appName === '') {
                var queryUrl = this.getBasePath(taskFilter.appName) + "/query/v1/tasks";
                var queryParams = {
                    assignee: taskFilter.assignee,
                    status: taskFilter.status,
                    appName: taskFilter.appName,
                    maxItems: 1
                };
                return this.get(queryUrl, queryParams).pipe(operators.map(function (tasks) { return tasks.list.pagination.totalItems; }));
            }
            else {
                return rxjs.throwError('Appname not configured');
            }
        };
        TaskFilterCloudService.prototype.updateTaskFilters = function (appName, key, filters) {
            return this.preferenceService.updatePreference(appName, key, filters);
        };
        TaskFilterCloudService.prototype.prepareKey = function (appName) {
            return "task-filters-" + appName + "-" + this.identityUserService.getCurrentUserInfo().username;
        };
        TaskFilterCloudService.prototype.findFiltersByKeyInPreferences = function (preferences, key) {
            var result = preferences.find(function (filter) { return filter.entry.key === key; });
            return result && result.entry ? JSON.parse(result.entry.value) : [];
        };
        TaskFilterCloudService.prototype.defaultTaskFilters = function (appName) {
            return [
                new TaskFilterCloudModel({
                    name: 'ADF_CLOUD_TASK_FILTERS.MY_TASKS',
                    key: 'my-tasks',
                    icon: 'inbox',
                    appName: appName,
                    status: 'ASSIGNED',
                    assignee: this.identityUserService.getCurrentUserInfo().username,
                    sort: 'createdDate',
                    order: 'DESC',
                    showCounter: true
                }),
                new TaskFilterCloudModel({
                    name: 'ADF_CLOUD_TASK_FILTERS.QUEUED_TASKS',
                    key: 'queued-tasks',
                    icon: 'queue',
                    appName: appName,
                    status: 'CREATED',
                    assignee: '',
                    sort: 'createdDate',
                    order: 'DESC',
                    showCounter: true
                }),
                new TaskFilterCloudModel({
                    name: 'ADF_CLOUD_TASK_FILTERS.COMPLETED_TASKS',
                    key: 'completed-tasks',
                    icon: 'done',
                    appName: appName,
                    status: 'COMPLETED',
                    assignee: '',
                    sort: 'createdDate',
                    order: 'DESC'
                })
            ];
        };
        TaskFilterCloudService.prototype.getTaskNotificationSubscription = function (appName) {
            return this.notificationCloudService.makeGQLQuery(appName, TASK_EVENT_SUBSCRIPTION_QUERY)
                .pipe(operators.map(function (events) { return events.data.engineEvents; }));
        };
        return TaskFilterCloudService;
    }(BaseCloudService));
    TaskFilterCloudService.ɵprov = i0.ɵɵdefineInjectable({ factory: function TaskFilterCloudService_Factory() { return new TaskFilterCloudService(i0.ɵɵinject(i1.IdentityUserService), i0.ɵɵinject(TASK_FILTERS_SERVICE_TOKEN), i0.ɵɵinject(i1.AlfrescoApiService), i0.ɵɵinject(i1.AppConfigService), i0.ɵɵinject(NotificationCloudService)); }, token: TaskFilterCloudService, providedIn: "root" });
    TaskFilterCloudService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    TaskFilterCloudService.ctorParameters = function () { return [
        { type: i1.IdentityUserService },
        { type: undefined, decorators: [{ type: i0.Inject, args: [TASK_FILTERS_SERVICE_TOKEN,] }] },
        { type: i1.AlfrescoApiService },
        { type: i1.AppConfigService },
        { type: NotificationCloudService }
    ]; };

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var BaseTaskFiltersCloudComponent = /** @class */ (function () {
        function BaseTaskFiltersCloudComponent() {
            this.appName = '';
            this.showIcons = false;
            this.success = new i0.EventEmitter();
            this.error = new i0.EventEmitter();
            this.counters$ = {};
            this.updatedCounters = [];
            this.onDestroy$ = new rxjs.Subject();
        }
        BaseTaskFiltersCloudComponent.prototype.ngOnDestroy = function () {
            this.onDestroy$.next(true);
            this.onDestroy$.complete();
        };
        BaseTaskFiltersCloudComponent.prototype.wasFilterUpdated = function (filterKey) {
            return this.updatedCounters.includes(filterKey);
        };
        BaseTaskFiltersCloudComponent.prototype.addToUpdatedCounters = function (filterKey) {
            if (!this.updatedCounters.includes(filterKey)) {
                this.updatedCounters.push(filterKey);
            }
        };
        BaseTaskFiltersCloudComponent.prototype.resetFilterCounter = function (filterKey) {
            var filterIndex = this.updatedCounters.indexOf(filterKey);
            if (filterIndex > -1) {
                this.updatedCounters.splice(filterIndex, 1);
            }
        };
        return BaseTaskFiltersCloudComponent;
    }());
    BaseTaskFiltersCloudComponent.decorators = [
        { type: i0.Directive }
    ];
    BaseTaskFiltersCloudComponent.propDecorators = {
        appName: [{ type: i0.Input }],
        filterParam: [{ type: i0.Input }],
        showIcons: [{ type: i0.Input }],
        success: [{ type: i0.Output }],
        error: [{ type: i0.Output }]
    };

    var TaskFiltersCloudComponent = /** @class */ (function (_super) {
        __extends(TaskFiltersCloudComponent, _super);
        function TaskFiltersCloudComponent(taskFilterCloudService, translationService, appConfigService) {
            var _this = _super.call(this) || this;
            _this.taskFilterCloudService = taskFilterCloudService;
            _this.translationService = translationService;
            _this.appConfigService = appConfigService;
            _this.filterSelected = new i0.EventEmitter();
            _this.filterClicked = new i0.EventEmitter();
            _this.filterCounterUpdated = new i0.EventEmitter();
            _this.filters = [];
            return _this;
        }
        TaskFiltersCloudComponent.prototype.ngOnInit = function () {
            this.enableNotifications = this.appConfigService.get('notifications', true);
            this.initFilterCounterNotifications();
            this.getFilters(this.appName);
        };
        TaskFiltersCloudComponent.prototype.ngOnChanges = function (changes) {
            var appName = changes['appName'];
            var filter = changes['filterParam'];
            if (appName && appName.currentValue !== appName.previousValue) {
                this.getFilters(appName.currentValue);
            }
            else if (filter && filter.currentValue !== filter.previousValue) {
                this.selectFilterAndEmit(filter.currentValue);
            }
        };
        TaskFiltersCloudComponent.prototype.getFilters = function (appName) {
            var _this = this;
            this.filters$ = this.taskFilterCloudService.getTaskListFilters(appName);
            this.filters$.pipe(operators.takeUntil(this.onDestroy$)).subscribe(function (res) {
                _this.resetFilter();
                _this.filters = res || [];
                _this.selectFilterAndEmit(_this.filterParam);
                _this.updateFilterCounters();
                _this.success.emit(res);
            }, function (err) {
                _this.error.emit(err);
            });
        };
        TaskFiltersCloudComponent.prototype.updateFilterCounters = function () {
            var _this = this;
            this.filters.forEach(function (filter) { return _this.updateFilterCounter(filter); });
        };
        TaskFiltersCloudComponent.prototype.updateFilterCounter = function (filter) {
            if (filter === null || filter === void 0 ? void 0 : filter.showCounter) {
                this.counters$[filter.key] = this.taskFilterCloudService.getTaskFilterCounter(filter);
            }
        };
        TaskFiltersCloudComponent.prototype.initFilterCounterNotifications = function () {
            var _this = this;
            if (this.appName && this.enableNotifications) {
                this.taskFilterCloudService.getTaskNotificationSubscription(this.appName)
                    .pipe(operators.debounceTime(3000))
                    .subscribe(function (result) {
                    result.map(function (taskEvent) {
                        _this.checkFilterCounter(taskEvent.entity);
                    });
                    if (_this.updatedCounters.length) {
                        _this.updateFilterCounters();
                        _this.filterCounterUpdated.emit(result);
                    }
                });
            }
        };
        TaskFiltersCloudComponent.prototype.checkFilterCounter = function (filterNotification) {
            var _this = this;
            this.filters.map(function (filter) {
                if (_this.isFilterPresent(filter, filterNotification)) {
                    _this.addToUpdatedCounters(filter.key);
                }
            });
        };
        TaskFiltersCloudComponent.prototype.isFilterPresent = function (filter, filterNotification) {
            return filter.status === filterNotification.status
                && (filter.assignee === filterNotification.assignee || filterNotification.assignee === undefined);
        };
        TaskFiltersCloudComponent.prototype.selectFilter = function (paramFilter) {
            var _this = this;
            if (paramFilter) {
                this.currentFilter = this.filters.find(function (filter, index) { return paramFilter.index === index ||
                    paramFilter.key === filter.key ||
                    paramFilter.id === filter.id ||
                    (paramFilter.name &&
                        (paramFilter.name.toLocaleLowerCase() === _this.translationService.instant(filter.name).toLocaleLowerCase())); });
            }
        };
        TaskFiltersCloudComponent.prototype.selectFilterAndEmit = function (newParamFilter) {
            if (newParamFilter) {
                this.selectFilter(newParamFilter);
                if (this.currentFilter) {
                    this.resetFilterCounter(this.currentFilter.key);
                    this.filterSelected.emit(this.currentFilter);
                }
            }
            else {
                this.currentFilter = undefined;
            }
        };
        TaskFiltersCloudComponent.prototype.onFilterClick = function (filter) {
            if (filter) {
                this.selectFilter(filter);
                this.updateFilterCounter(this.currentFilter);
                this.filterClicked.emit(this.currentFilter);
            }
            else {
                this.currentFilter = undefined;
            }
        };
        TaskFiltersCloudComponent.prototype.selectDefaultTaskFilter = function () {
            if (!this.isFilterListEmpty()) {
                this.currentFilter = this.filters[0];
            }
        };
        TaskFiltersCloudComponent.prototype.isFilterListEmpty = function () {
            return this.filters === undefined || (this.filters && this.filters.length === 0);
        };
        TaskFiltersCloudComponent.prototype.resetFilter = function () {
            this.filters = [];
            this.currentFilter = undefined;
        };
        return TaskFiltersCloudComponent;
    }(BaseTaskFiltersCloudComponent));
    TaskFiltersCloudComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'adf-cloud-task-filters',
                    template: "<ng-container *ngIf=\"filters$ | async as filterList; else loading\">\n    <div *ngFor=\"let filter of filterList\"\n         class=\"adf-task-filters__entry\">\n        <button (click)=\"onFilterClick(filter)\"\n                [attr.aria-label]=\"filter.name | translate\"\n                [id]=\"filter.id\"\n                [attr.data-automation-id]=\"filter.key + '_filter'\"\n                mat-button\n                [class.adf-active]=\"currentFilter === filter\"\n                class=\"adf-filter-action-button adf-full-width\"\n                fxLayout=\"row\"\n                fxLayoutAlign=\"space-between center\">\n            <adf-icon data-automation-id=\"adf-filter-icon\"\n                      *ngIf=\"showIcons\"\n                      [value]=\"filter.icon\"></adf-icon>\n            <span data-automation-id=\"adf-filter-label\"\n                  class=\"adf-filter-action-button__label\">{{ filter.name | translate }}</span>\n        </button>\n        <span *ngIf=\"counters$[filter.key]\"\n              [attr.data-automation-id]=\"filter.key + '_filter-counter'\"\n              class=\"adf-filter-action-button__counter\"\n              [class.adf-active]=wasFilterUpdated(filter.key)>\n            {{ counters$[filter.key] | async }}\n        </span>\n    </div>\n</ng-container>\n<ng-template #loading>\n    <ng-container>\n        <div class=\"adf-app-list-spinner\">\n            <mat-spinner></mat-spinner>\n        </div>\n    </ng-container>\n</ng-template>\n",
                    encapsulation: i0.ViewEncapsulation.None,
                    styles: [".adf-task-filters__entry{display:flex;font-size:14px!important;font-weight:700;height:24px;opacity:1;padding:12px 0!important;width:100%}.adf-task-filters__entry .adf-full-width{display:flex;width:100%}.adf-task-filters__entry .adf-filter-action-button{cursor:pointer;opacity:.54;padding:16px}.adf-task-filters__entry .adf-filter-action-button .adf-filter-action-button__label{margin:0 8px!important;padding-left:20px}.adf-task-filters__entry .adf-filter-action-button__counter{margin-left:10px;margin-top:6px;opacity:.54;padding:0 5px}.adf-task-filters__entry .adf-filter-action-button__counter.adf-active{background-color:var(--theme-accent-color);border-radius:15px;color:var(--theme-colors-mag-grey-light);font-size:smaller;margin-left:8px;margin-top:5px;padding:0 5px}.adf-task-filters__entry:hover{color:var(--theme-primary-color)}.adf-task-filters__entry:hover .adf-filter-action-button,.adf-task-filters__entry:hover .adf-filter-action-button__counter{opacity:1}.adf-task-filters__entry .adf-active{color:var(--theme-primary-color);opacity:1}"]
                },] }
    ];
    TaskFiltersCloudComponent.ctorParameters = function () { return [
        { type: TaskFilterCloudService },
        { type: i1.TranslationService },
        { type: i1.AppConfigService }
    ]; };
    TaskFiltersCloudComponent.propDecorators = {
        filterSelected: [{ type: i0.Output }],
        filterClicked: [{ type: i0.Output }],
        filterCounterUpdated: [{ type: i0.Output }]
    };

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var DateRangeFilterComponent = /** @class */ (function () {
        function DateRangeFilterComponent() {
            this.dateChanged = new i0.EventEmitter();
            this.dateTypeChange = new i0.EventEmitter();
            this.filteredProperties = [];
            this.dateRangeForm = new forms.FormGroup({
                from: new forms.FormControl(),
                to: new forms.FormControl()
            });
        }
        DateRangeFilterComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.options = this.options ? this.options : this.createDefaultRangeOptions();
            var defaultProperties = this.createDefaultDateOptions();
            this.filteredProperties = defaultProperties.filter(function (filterProperty) { return _this.isValidProperty(_this.options, filterProperty.value.toString()); });
            if (this.hasPreselectedValues()) {
                this.setPreselectedValues();
            }
        };
        DateRangeFilterComponent.prototype.onSelectionChange = function (option) {
            this.type = option.value;
            if (!this.isDateRangeType()) {
                this.dateTypeChange.emit(this.type);
            }
        };
        DateRangeFilterComponent.prototype.isDateRangeType = function () {
            return this.type === exports.DateCloudFilterType.RANGE;
        };
        DateRangeFilterComponent.prototype.onDateRangeClosed = function () {
            var dateRange = {
                startDate: moment(this.dateRangeForm.controls.from.value).startOf('day').toISOString(true),
                endDate: moment(this.dateRangeForm.controls.to.value).endOf('day').toISOString(true)
            };
            this.dateChanged.emit(dateRange);
        };
        DateRangeFilterComponent.prototype.hasPreselectedValues = function () {
            var _a, _b;
            return !!((_a = this.processFilterProperty) === null || _a === void 0 ? void 0 : _a.attributes) && !!((_b = this.processFilterProperty) === null || _b === void 0 ? void 0 : _b.value);
        };
        DateRangeFilterComponent.prototype.setPreselectedValues = function () {
            var from = this.getFilterAttribute('from');
            var to = this.getFilterAttribute('to');
            var type = this.getFilterAttribute('dateType');
            this.dateRangeForm.get('from').setValue(moment(this.getFilterValue(from)));
            this.dateRangeForm.get('to').setValue(moment(this.getFilterValue(to)));
            this.type = this.getFilterValue(type);
        };
        DateRangeFilterComponent.prototype.getFilterAttribute = function (key) {
            return this.processFilterProperty.attributes[key];
        };
        DateRangeFilterComponent.prototype.getFilterValue = function (attribute) {
            return this.processFilterProperty.value[attribute];
        };
        DateRangeFilterComponent.prototype.isValidProperty = function (filterProperties, key) {
            return filterProperties ? filterProperties.indexOf(key) >= 0 : true;
        };
        DateRangeFilterComponent.prototype.createDefaultRangeOptions = function () {
            return [
                exports.DateCloudFilterType.NO_DATE,
                exports.DateCloudFilterType.TODAY,
                exports.DateCloudFilterType.WEEK,
                exports.DateCloudFilterType.MONTH,
                exports.DateCloudFilterType.QUARTER,
                exports.DateCloudFilterType.YEAR,
                exports.DateCloudFilterType.RANGE
            ];
        };
        DateRangeFilterComponent.prototype.createDefaultDateOptions = function () {
            return [
                {
                    value: exports.DateCloudFilterType.NO_DATE,
                    label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.DATE_RANGE.NO_DATE'
                },
                {
                    value: exports.DateCloudFilterType.TODAY,
                    label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.DATE_RANGE.TODAY'
                },
                {
                    value: exports.DateCloudFilterType.TOMORROW,
                    label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.DATE_RANGE.TOMORROW'
                },
                {
                    value: exports.DateCloudFilterType.NEXT_7_DAYS,
                    label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.DATE_RANGE.NEXT_7_DAYS'
                },
                {
                    value: exports.DateCloudFilterType.WEEK,
                    label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.DATE_RANGE.WEEK'
                },
                {
                    value: exports.DateCloudFilterType.MONTH,
                    label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.DATE_RANGE.MONTH'
                },
                {
                    value: exports.DateCloudFilterType.QUARTER,
                    label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.DATE_RANGE.QUARTER'
                },
                {
                    value: exports.DateCloudFilterType.YEAR,
                    label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.DATE_RANGE.YEAR'
                },
                {
                    value: exports.DateCloudFilterType.RANGE,
                    label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.DATE_RANGE.RANGE'
                }
            ];
        };
        return DateRangeFilterComponent;
    }());
    DateRangeFilterComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'adf-cloud-date-range-filter',
                    template: "\n<mat-form-field [floatLabel]=\"'auto'\" [attr.data-automation-id]=\"processFilterProperty.key\">\n    <mat-select\n        placeholder=\"{{ processFilterProperty.label | translate }}\"\n        [value]=\"type\"\n        (selectionChange)=\"onSelectionChange($event)\"\n        [attr.data-automation-id]=\"'adf-cloud-edit-process-property-' + processFilterProperty.key\">\n        <mat-option *ngFor=\"let propertyOption of filteredProperties\" [value]=\"propertyOption.value\" [attr.data-automation-id]=\"'adf-cloud-edit-process-property-options-' + propertyOption.value.toString()\">\n            {{ propertyOption.label | translate }}\n        </mat-option>\n    </mat-select>\n</mat-form-field>\n\n<ng-container *ngIf=\"isDateRangeType()\">\n    <mat-form-field [floatLabel]=\"'auto'\" class=\"adf-cloud-date-range-picker\">\n        <mat-label>{{ 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.DATE_RANGE_TITLE' | translate }}</mat-label>\n        <mat-date-range-input [formGroup]=\"dateRangeForm\" [rangePicker]=\"picker\">\n          <input matStartDate formControlName=\"from\" placeholder=\"{{ 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.START_DATE' | translate }}\">\n          <input matEndDate formControlName=\"to\" placeholder=\"{{ 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.END_DATE' | translate }}\">\n        </mat-date-range-input>\n        <mat-datepicker-toggle\n            matSuffix\n            [for]=\"picker\"\n            [attr.data-automation-id]=\"'adf-cloud-edit-process-property-date-range-' + processFilterProperty.key\"></mat-datepicker-toggle>\n        <mat-date-range-picker #picker (closed)=\"onDateRangeClosed()\"></mat-date-range-picker>\n    </mat-form-field>\n</ng-container>\n",
                    styles: [".adf-cloud-date-range-picker{margin:0 10px}"]
                },] }
    ];
    DateRangeFilterComponent.propDecorators = {
        processFilterProperty: [{ type: i0.Input }],
        options: [{ type: i0.Input }],
        dateChanged: [{ type: i0.Output }],
        dateTypeChange: [{ type: i0.Output }]
    };

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var ProcessCommonModule = /** @class */ (function () {
        function ProcessCommonModule() {
        }
        return ProcessCommonModule;
    }());
    ProcessCommonModule.decorators = [
        { type: i0.NgModule, args: [{
                    declarations: [DateRangeFilterComponent],
                    imports: [
                        common.CommonModule,
                        i1.CoreModule,
                        MaterialModule
                    ],
                    exports: [
                        DateRangeFilterComponent
                    ],
                    providers: [
                        DateRangeFilterService
                    ]
                },] }
    ];

    var PeopleCloudComponent = /** @class */ (function () {
        function PeopleCloudComponent(identityUserService, logService) {
            this.identityUserService = identityUserService;
            this.logService = logService;
            this.mode = 'single';
            this.validate = false;
            this.readOnly = false;
            this.preSelectUsers = [];
            this.excludedUsers = [];
            this.userChipsCtrl = new forms.FormControl({ value: '', disabled: false });
            this.searchUserCtrl = new forms.FormControl({ value: '', disabled: false });
            this.selectUser = new i0.EventEmitter();
            this.removeUser = new i0.EventEmitter();
            this.changedUsers = new i0.EventEmitter();
            this.warning = new i0.EventEmitter();
            this._searchUsers = [];
            this.onDestroy$ = new rxjs.Subject();
            this.selectedUsers = [];
            this.invalidUsers = [];
            this.searchUsers$ = new rxjs.BehaviorSubject(this._searchUsers);
            this._subscriptAnimationState = 'enter';
            this.searchedValue = '';
            this.validationLoading = false;
            this.searchLoading = false;
        }
        PeopleCloudComponent.prototype.ngOnInit = function () {
            this.loadClientId();
            this.initSearch();
        };
        PeopleCloudComponent.prototype.ngOnChanges = function (changes) {
            if (this.valueChanged(changes.preSelectUsers)
                || this.valueChanged(changes.mode)
                || this.valueChanged(changes.validate)) {
                if (this.hasPreSelectUsers()) {
                    this.loadPreSelectUsers();
                }
                else if (this.hasPreselectedUsersCleared(changes)) {
                    this.selectedUsers = [];
                    this.invalidUsers = [];
                }
                if (!this.isValidationEnabled()) {
                    this.invalidUsers = [];
                }
            }
            if (changes.appName && this.isAppNameChanged(changes.appName)) {
                this.loadClientId();
            }
        };
        PeopleCloudComponent.prototype.loadClientId = function () {
            return __awaiter(this, void 0, void 0, function () {
                var _b;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            _b = this;
                            return [4 /*yield*/, this.identityUserService.getClientIdByApplicationName(this.appName).toPromise()];
                        case 1:
                            _b.clientId = _c.sent();
                            if (this.clientId) {
                                this.searchUserCtrl.enable();
                            }
                            return [2 /*return*/];
                    }
                });
            });
        };
        PeopleCloudComponent.prototype.initSearch = function () {
            var _this = this;
            this.searchUserCtrl.valueChanges.pipe(operators.filter(function (value) {
                _this.searchLoading = true;
                return typeof value === 'string';
            }), operators.tap(function (value) {
                if (value) {
                    _this.setTypingError();
                }
            }), operators.debounceTime(500), operators.distinctUntilChanged(), operators.tap(function (value) {
                if (value.trim()) {
                    _this.searchedValue = value;
                }
                else {
                    _this.searchUserCtrl.markAsPristine();
                    _this.searchUserCtrl.markAsUntouched();
                }
            }), operators.tap(function () {
                _this.resetSearchUsers();
            }), operators.switchMap(function (search) { return _this.identityUserService.findUsersByName(search.trim()); }), operators.mergeMap(function (users) {
                _this.resetSearchUsers();
                _this.searchLoading = false;
                return users;
            }), operators.filter(function (user) { return !_this.isUserAlreadySelected(user) && !_this.isExcludedUser(user); }), operators.mergeMap(function (user) {
                if (_this.appName) {
                    return _this.checkUserHasAccess(user.id).pipe(operators.mergeMap(function (hasRole) { return hasRole ? rxjs.of(user) : rxjs.of(); }));
                }
                else if (_this.hasRoles()) {
                    return _this.filterUsersByRoles(user);
                }
                else {
                    return rxjs.of(user);
                }
            }), operators.takeUntil(this.onDestroy$)).subscribe(function (user) {
                _this._searchUsers.push(user);
                _this.searchUsers$.next(_this._searchUsers);
            });
        };
        PeopleCloudComponent.prototype.ngOnDestroy = function () {
            this.onDestroy$.next(true);
            this.onDestroy$.complete();
        };
        PeopleCloudComponent.prototype.isAppNameChanged = function (change) {
            return change && change.previousValue !== change.currentValue && this.appName && this.appName.length > 0;
        };
        PeopleCloudComponent.prototype.isValidationEnabled = function () {
            return this.validate === true;
        };
        PeopleCloudComponent.prototype.checkUserHasAccess = function (userId) {
            if (this.hasRoles()) {
                return this.identityUserService.checkUserHasAnyClientAppRole(userId, this.clientId, this.roles);
            }
            else {
                return this.identityUserService.checkUserHasClientApp(userId, this.clientId);
            }
        };
        PeopleCloudComponent.prototype.hasRoles = function () {
            return this.roles && this.roles.length > 0;
        };
        PeopleCloudComponent.prototype.filterUsersByRoles = function (user) {
            return this.identityUserService.checkUserHasRole(user.id, this.roles).pipe(operators.map(function (hasRole) { return ({ hasRole: hasRole, user: user }); }), operators.filter(function (filteredUser) { return filteredUser.hasRole; }), operators.map(function (filteredUser) { return filteredUser.user; }));
        };
        PeopleCloudComponent.prototype.isUserAlreadySelected = function (searchUser) {
            var _this = this;
            if (this.selectedUsers && this.selectedUsers.length > 0) {
                var result = this.selectedUsers.find(function (selectedUser) {
                    return _this.compare(selectedUser, searchUser);
                });
                return !!result;
            }
            return false;
        };
        PeopleCloudComponent.prototype.isExcludedUser = function (searchUser) {
            var _this = this;
            var _a;
            if (((_a = this.excludedUsers) === null || _a === void 0 ? void 0 : _a.length) > 0) {
                return !!this.excludedUsers.find(function (excludedUser) { return _this.compare(excludedUser, searchUser); });
            }
            return false;
        };
        PeopleCloudComponent.prototype.loadPreSelectUsers = function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            this.selectedUsers = [];
                            if (this.isSingleMode()) {
                                this.selectedUsers = [this.preSelectUsers[0]];
                            }
                            else {
                                this.selectedUsers = this.removeDuplicatedUsers(this.preSelectUsers);
                            }
                            this.userChipsCtrl.setValue(this.selectedUsers[0].username);
                            if (!this.isValidationEnabled()) return [3 /*break*/, 2];
                            this.validationLoading = true;
                            return [4 /*yield*/, this.validatePreselectUsers()];
                        case 1:
                            _b.sent();
                            this.validationLoading = false;
                            _b.label = 2;
                        case 2: return [2 /*return*/];
                    }
                });
            });
        };
        PeopleCloudComponent.prototype.getPreselectedUsers = function () {
            if (this.isSingleMode()) {
                return [this.preSelectUsers[0]];
            }
            else {
                return this.removeDuplicatedUsers(this.preSelectUsers);
            }
        };
        PeopleCloudComponent.prototype.validatePreselectUsers = function () {
            return __awaiter(this, void 0, void 0, function () {
                var validUsers, _b, _c, user, validationResult, error_1, e_1_1;
                var e_1, _d;
                return __generator(this, function (_e) {
                    switch (_e.label) {
                        case 0:
                            this.invalidUsers = [];
                            validUsers = [];
                            _e.label = 1;
                        case 1:
                            _e.trys.push([1, 8, 9, 10]);
                            _b = __values(this.getPreselectedUsers()), _c = _b.next();
                            _e.label = 2;
                        case 2:
                            if (!!_c.done) return [3 /*break*/, 7];
                            user = _c.value;
                            _e.label = 3;
                        case 3:
                            _e.trys.push([3, 5, , 6]);
                            return [4 /*yield*/, this.searchUser(user)];
                        case 4:
                            validationResult = _e.sent();
                            if (this.compare(user, validationResult)) {
                                validationResult.readonly = user.readonly;
                                validUsers.push(validationResult);
                            }
                            else {
                                this.invalidUsers.push(user);
                            }
                            return [3 /*break*/, 6];
                        case 5:
                            error_1 = _e.sent();
                            this.invalidUsers.push(user);
                            this.logService.error(error_1);
                            return [3 /*break*/, 6];
                        case 6:
                            _c = _b.next();
                            return [3 /*break*/, 2];
                        case 7: return [3 /*break*/, 10];
                        case 8:
                            e_1_1 = _e.sent();
                            e_1 = { error: e_1_1 };
                            return [3 /*break*/, 10];
                        case 9:
                            try {
                                if (_c && !_c.done && (_d = _b.return)) _d.call(_b);
                            }
                            finally { if (e_1) throw e_1.error; }
                            return [7 /*endfinally*/];
                        case 10:
                            this.checkPreselectValidationErrors();
                            this.selectedUsers = validUsers.concat(this.invalidUsers);
                            return [2 /*return*/];
                    }
                });
            });
        };
        PeopleCloudComponent.prototype.compare = function (preselectedUser, identityUser) {
            var e_2, _b;
            if (preselectedUser && identityUser) {
                var uniquePropertyIdentifiers = ['id', 'username', 'email'];
                try {
                    for (var _c = __values(Object.keys(preselectedUser)), _d = _c.next(); !_d.done; _d = _c.next()) {
                        var property = _d.value;
                        if (preselectedUser[property] !== undefined && uniquePropertyIdentifiers.includes(property)) {
                            return preselectedUser[property] === identityUser[property];
                        }
                    }
                }
                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                finally {
                    try {
                        if (_d && !_d.done && (_b = _c.return)) _b.call(_c);
                    }
                    finally { if (e_2) throw e_2.error; }
                }
            }
            return false;
        };
        PeopleCloudComponent.prototype.getSearchKey = function (user) {
            if (user.id) {
                return 'id';
            }
            else if (user.email) {
                return 'email';
            }
            else if (user.username) {
                return 'username';
            }
            else {
                return null;
            }
        };
        PeopleCloudComponent.prototype.searchUser = function (user) {
            return __awaiter(this, void 0, void 0, function () {
                var key, _b;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            key = this.getSearchKey(user);
                            _b = key;
                            switch (_b) {
                                case 'id': return [3 /*break*/, 1];
                                case 'username': return [3 /*break*/, 2];
                                case 'email': return [3 /*break*/, 4];
                            }
                            return [3 /*break*/, 6];
                        case 1: return [2 /*return*/, this.identityUserService.findUserById(user[key]).toPromise()];
                        case 2: return [4 /*yield*/, this.identityUserService.findUserByUsername(user[key]).toPromise()];
                        case 3: return [2 /*return*/, (_c.sent())[0]];
                        case 4: return [4 /*yield*/, this.identityUserService.findUserByEmail(user[key]).toPromise()];
                        case 5: return [2 /*return*/, (_c.sent())[0]];
                        case 6: return [2 /*return*/, null];
                    }
                });
            });
        };
        PeopleCloudComponent.prototype.removeDuplicatedUsers = function (users) {
            return users.filter(function (user, index, self) { return index === self.findIndex(function (auxUser) { return user.id === auxUser.id && user.username === auxUser.username && user.email === auxUser.email; }); });
        };
        PeopleCloudComponent.prototype.checkPreselectValidationErrors = function () {
            this.invalidUsers = this.removeDuplicatedUsers(this.invalidUsers);
            if (this.invalidUsers.length > 0) {
                this.generateInvalidUsersMessage();
            }
            this.warning.emit({
                message: 'INVALID_PRESELECTED_USERS',
                users: this.invalidUsers
            });
        };
        PeopleCloudComponent.prototype.onSelect = function (user) {
            if (user) {
                this.selectUser.emit(user);
                if (this.isMultipleMode()) {
                    if (!this.isUserAlreadySelected(user)) {
                        this.selectedUsers.push(user);
                    }
                }
                else {
                    this.invalidUsers = [];
                    this.selectedUsers = [user];
                }
                this.userInput.nativeElement.value = '';
                this.searchUserCtrl.setValue('');
                this.userChipsCtrlValue(this.selectedUsers[0].username);
                this.changedUsers.emit(this.selectedUsers);
                this.resetSearchUsers();
            }
        };
        PeopleCloudComponent.prototype.onRemove = function (userToRemove) {
            this.removeUser.emit(userToRemove);
            this.removeUserFromSelected(userToRemove);
            this.changedUsers.emit(this.selectedUsers);
            if (this.selectedUsers.length === 0) {
                this.userChipsCtrlValue('');
            }
            else {
                this.userChipsCtrlValue(this.selectedUsers[0].username);
            }
            this.searchUserCtrl.markAsDirty();
            this.searchUserCtrl.markAsTouched();
            if (this.isValidationEnabled()) {
                this.removeUserFromValidation(userToRemove);
                this.checkPreselectValidationErrors();
            }
        };
        PeopleCloudComponent.prototype.userChipsCtrlValue = function (value) {
            this.userChipsCtrl.setValue(value);
            this.userChipsCtrl.markAsDirty();
            this.userChipsCtrl.markAsTouched();
        };
        PeopleCloudComponent.prototype.removeUserFromSelected = function (_b) {
            var id = _b.id, username = _b.username, email = _b.email;
            var indexToRemove = this.selectedUsers.findIndex(function (user) {
                return user.id === id
                    && user.username === username
                    && user.email === email;
            });
            if (indexToRemove !== -1) {
                this.selectedUsers.splice(indexToRemove, 1);
            }
        };
        PeopleCloudComponent.prototype.removeUserFromValidation = function (_b) {
            var id = _b.id, username = _b.username, email = _b.email;
            var indexToRemove = this.invalidUsers.findIndex(function (user) {
                return user.id === id
                    && user.username === username
                    && user.email === email;
            });
            if (indexToRemove !== -1) {
                this.invalidUsers.splice(indexToRemove, 1);
            }
        };
        PeopleCloudComponent.prototype.generateInvalidUsersMessage = function () {
            var _this = this;
            this.validateUsersMessage = '';
            this.invalidUsers.forEach(function (invalidUser, index) {
                if (index === _this.invalidUsers.length - 1) {
                    _this.validateUsersMessage += invalidUser.username + " ";
                }
                else {
                    _this.validateUsersMessage += invalidUser.username + ", ";
                }
            });
        };
        PeopleCloudComponent.prototype.setTypingError = function () {
            this.searchUserCtrl.setErrors(Object.assign({ searchTypingError: true }, this.searchUserCtrl.errors));
        };
        PeopleCloudComponent.prototype.hasPreselectError = function () {
            return this.invalidUsers
                && this.invalidUsers.length > 0;
        };
        PeopleCloudComponent.prototype.getDisplayName = function (user) {
            return i1.FullNamePipe.prototype.transform(user);
        };
        PeopleCloudComponent.prototype.isMultipleMode = function () {
            return this.mode === 'multiple';
        };
        PeopleCloudComponent.prototype.isSingleMode = function () {
            return this.mode === 'single';
        };
        PeopleCloudComponent.prototype.isSingleSelectionReadonly = function () {
            return this.isSingleMode()
                && this.selectedUsers.length === 1
                && this.selectedUsers[0].readonly === true;
        };
        PeopleCloudComponent.prototype.hasPreSelectUsers = function () {
            return this.preSelectUsers
                && this.preSelectUsers.length > 0;
        };
        PeopleCloudComponent.prototype.valueChanged = function (change) {
            return change
                && change.currentValue !== change.previousValue;
        };
        PeopleCloudComponent.prototype.hasPreselectedUsersCleared = function (changes) {
            return changes
                && changes.preSelectUsers
                && changes.preSelectUsers.currentValue
                && changes.preSelectUsers.currentValue.length === 0;
        };
        PeopleCloudComponent.prototype.resetSearchUsers = function () {
            this._searchUsers = [];
            this.searchUsers$.next(this._searchUsers);
        };
        PeopleCloudComponent.prototype.getSelectedUsers = function () {
            return this.selectedUsers;
        };
        PeopleCloudComponent.prototype.isReadonly = function () {
            return this.readOnly || this.isSingleSelectionReadonly();
        };
        PeopleCloudComponent.prototype.isValidationLoading = function () {
            return this.isValidationEnabled() && this.validationLoading;
        };
        PeopleCloudComponent.prototype.setFocus = function (isFocused) {
            this.isFocused = isFocused;
        };
        PeopleCloudComponent.prototype.hasError = function () {
            return !!this.searchUserCtrl.errors;
        };
        PeopleCloudComponent.prototype.getValidationPattern = function () {
            return this.searchUserCtrl.errors.pattern.requiredPattern;
        };
        PeopleCloudComponent.prototype.getValidationMaxLength = function () {
            return this.searchUserCtrl.errors.maxlength.requiredLength;
        };
        PeopleCloudComponent.prototype.getValidationMinLength = function () {
            return this.searchUserCtrl.errors.minlength.requiredLength;
        };
        return PeopleCloudComponent;
    }());
    PeopleCloudComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'adf-cloud-people',
                    template: "<form>\n    <mat-form-field [floatLabel]=\"'auto'\" class=\"adf-people-cloud\">\n        <mat-label *ngIf=\"!isReadonly()\" id=\"adf-people-cloud-title-id\">{{ title | translate }}</mat-label>\n        <mat-chip-list #userMultipleChipList [disabled]=\"isReadonly() || isValidationLoading()\" data-automation-id=\"adf-cloud-people-chip-list\">\n            <mat-chip\n                *ngFor=\"let user of selectedUsers\"\n                [removable]=\"!(user.readonly)\"\n                [attr.data-automation-id]=\"'adf-people-cloud-chip-' + user.username\"\n                (removed)=\"onRemove(user)\"\n                matTooltip=\"{{ (user.readonly ? 'ADF_CLOUD_GROUPS.MANDATORY' : '') | translate }}\">\n                {{user | fullName}}\n                <mat-icon\n                    matChipRemove\n                    *ngIf=\"!(user.readonly || readOnly)\"\n                    [attr.data-automation-id]=\"'adf-people-cloud-chip-remove-icon-' + user.username\">\n                    cancel\n                </mat-icon>\n            </mat-chip>\n            <input *ngIf=\"!isReadonly()\" matInput\n                   [formControl]=\"searchUserCtrl\"\n                   [matAutocomplete]=\"auto\"\n                   [matChipInputFor]=\"userMultipleChipList\"\n                   (focus)=\"setFocus(true)\"\n                   (blur)=\"setFocus(false)\"\n                   class=\"adf-cloud-input\"\n                   data-automation-id=\"adf-people-cloud-search-input\" #userInput>\n        </mat-chip-list>\n\n        <mat-autocomplete autoActiveFirstOption class=\"adf-people-cloud-list\"\n                          #auto=\"matAutocomplete\"\n                          (optionSelected)=\"onSelect($event.option.value)\"\n                          [displayWith]=\"getDisplayName\">\n            <ng-container *ngIf=\"(searchUsers$ | async)?.length else noResults\" >\n            <mat-option *ngFor=\"let user of searchUsers$ | async; let i = index\" [value]=\"user\">\n                <div class=\"adf-people-cloud-row\" id=\"adf-people-cloud-user-{{user.username}}\"\n                     data-automation-id=\"adf-people-cloud-row\">\n                    <div [outerHTML]=\"user | usernameInitials:'adf-people-cloud-pic'\"></div>\n                    <span class=\"adf-people-label-name\"> {{user | fullName}}</span>\n                </div>\n            </mat-option>\n            </ng-container>\n            <ng-template #noResults>\n                <mat-option *ngIf=\"searchUserCtrl.hasError('searchTypingError') && !searchLoading\" disabled\n                            class=\"adf-people-cloud-option-not-active\"\n                            data-automation-id=\"adf-people-cloud-no-results\">\n                    <span> {{ 'ADF_CLOUD_USERS.ERROR.NOT_FOUND' | translate : { userName: searchedValue } }}</span>\n                </mat-option>\n            </ng-template>\n        </mat-autocomplete>\n    </mat-form-field>\n    <mat-progress-bar\n        *ngIf=\"validationLoading\"\n        mode=\"indeterminate\">\n    </mat-progress-bar>\n\n    <mat-error *ngIf=\"hasPreselectError() && !isValidationLoading()\">\n        <mat-icon class=\"adf-start-task-cloud-error-icon\">warning</mat-icon>\n        {{ 'ADF_CLOUD_USERS.ERROR.NOT_FOUND' | translate : { userName : validateUsersMessage } }}</mat-error>\n    <mat-error *ngIf=\"searchUserCtrl.hasError('pattern')\">\n        <mat-icon class=\"adf-start-task-cloud-error-icon\">warning</mat-icon>\n        {{ 'ADF_CLOUD_PEOPLE_GROUPS.ERROR.INVALID_PATTERN' | translate: { pattern: getValidationPattern() } }}</mat-error>\n    <mat-error *ngIf=\"searchUserCtrl.hasError('maxlength')\">\n        <mat-icon class=\"adf-start-task-cloud-error-icon\">warning</mat-icon>\n        {{ 'ADF_CLOUD_PEOPLE_GROUPS.ERROR.INVALID_MAX_LENGTH' | translate: { requiredLength: getValidationMaxLength() } }}\n    </mat-error>\n    <mat-error *ngIf=\"searchUserCtrl.hasError('minlength')\">\n        <mat-icon class=\"adf-start-task-cloud-error-icon\">warning</mat-icon>\n        {{ 'ADF_CLOUD_PEOPLE_GROUPS.ERROR.INVALID_MIN_LENGTH' | translate: { requiredLength: getValidationMinLength() } }}</mat-error>\n    <mat-error *ngIf=\"searchUserCtrl.hasError('required') || userChipsCtrl.hasError('required')\">\n        <mat-icon class=\"adf-start-task-cloud-error-icon\">warning</mat-icon>\n        {{ 'ADF_CLOUD_PEOPLE_GROUPS.ERROR.REQUIRED' | translate }} </mat-error>\n    <mat-error *ngIf=\"searchUserCtrl.hasError('searchTypingError') && !this.isFocused\" data-automation-id=\"invalid-users-typing-error\">\n        <mat-icon class=\"adf-start-task-cloud-error-icon\">warning</mat-icon>\n        {{ 'ADF_CLOUD_USERS.ERROR.NOT_FOUND' | translate : { userName : searchedValue } }}</mat-error>\n</form>\n",
                    animations: [
                        animations.trigger('transitionMessages', [
                            animations.state('enter', animations.style({ opacity: 1, transform: 'translateY(0%)' })),
                            animations.transition('void => enter', [
                                animations.style({ opacity: 0, transform: 'translateY(-100%)' }),
                                animations.animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)')
                            ])
                        ])
                    ],
                    providers: [i1.FullNamePipe],
                    changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    encapsulation: i0.ViewEncapsulation.None,
                    styles: [".adf-people-cloud{width:100%}.adf-people-cloud-option-not-active{background:inherit!important}.adf-people-cloud-list{margin:5px 0;padding:10px 0}.adf-people-cloud-row{align-items:center;column-gap:10px;display:flex}.adf-people-cloud-pic{align-items:center;background:var(--theme-primary-color);border-radius:100px;color:var(--theme-text-fg-color);display:flex;font-size:18px;font-weight:bolder;height:40px;justify-content:center;text-transform:uppercase;width:40px}.adf-start-task-cloud-error{height:20px;margin-top:-10px;position:absolute}.adf-start-task-cloud-error-message{color:var(--theme-warn-color);font-size:12px;height:16px;line-height:1.33;padding-right:8px;width:auto}.adf-start-task-cloud-error-icon{color:var(--theme-warn-color);font-size:17px}"]
                },] }
    ];
    PeopleCloudComponent.ctorParameters = function () { return [
        { type: i1.IdentityUserService },
        { type: i1.LogService }
    ]; };
    PeopleCloudComponent.propDecorators = {
        appName: [{ type: i0.Input }],
        mode: [{ type: i0.Input }],
        roles: [{ type: i0.Input }],
        validate: [{ type: i0.Input }],
        readOnly: [{ type: i0.Input }],
        preSelectUsers: [{ type: i0.Input }],
        excludedUsers: [{ type: i0.Input }],
        userChipsCtrl: [{ type: i0.Input }],
        searchUserCtrl: [{ type: i0.Input }],
        title: [{ type: i0.Input }],
        selectUser: [{ type: i0.Output }],
        removeUser: [{ type: i0.Output }],
        changedUsers: [{ type: i0.Output }],
        warning: [{ type: i0.Output }],
        userInput: [{ type: i0.ViewChild, args: ['userInput',] }]
    };

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var PeopleCloudModule = /** @class */ (function () {
        function PeopleCloudModule() {
        }
        return PeopleCloudModule;
    }());
    PeopleCloudModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [
                        common.CommonModule,
                        flexLayout.FlexLayoutModule,
                        MaterialModule,
                        forms.FormsModule,
                        forms.ReactiveFormsModule,
                        i1.CoreModule
                    ],
                    declarations: [PeopleCloudComponent],
                    exports: [
                        PeopleCloudComponent
                    ]
                },] }
    ];

    var ServiceTaskFilterCloudService = /** @class */ (function () {
        function ServiceTaskFilterCloudService(identityUserService, preferenceService) {
            this.identityUserService = identityUserService;
            this.preferenceService = preferenceService;
            this.filtersSubject = new rxjs.BehaviorSubject([]);
            this.filters$ = this.filtersSubject.asObservable();
        }
        ServiceTaskFilterCloudService.prototype.createDefaultFilters = function (appName) {
            var _this = this;
            var key = this.prepareKey(appName);
            this.preferenceService.getPreferences(appName, key).pipe(operators.switchMap(function (response) {
                var preferences = (response && response.list && response.list.entries) ? response.list.entries : [];
                if (!_this.hasPreferences(preferences) || !_this.hasTaskFilters(preferences, key)) {
                    return _this.createTaskFilters(appName, key, _this.defaultServiceTaskFilters(appName));
                }
                else {
                    return rxjs.of(_this.findFiltersByKeyInPreferences(preferences, key));
                }
            })).subscribe(function (filters) {
                _this.addFiltersToStream(filters);
            });
        };
        ServiceTaskFilterCloudService.prototype.hasPreferences = function (preferences) {
            return preferences && preferences.length > 0;
        };
        ServiceTaskFilterCloudService.prototype.hasTaskFilters = function (preferences, key) {
            var filters = preferences.find(function (filter) { return filter.entry.key === key; });
            return (filters && filters.entry) ? JSON.parse(filters.entry.value).length > 0 : false;
        };
        ServiceTaskFilterCloudService.prototype.createTaskFilters = function (appName, key, filters) {
            return this.preferenceService.createPreference(appName, key, filters);
        };
        ServiceTaskFilterCloudService.prototype.getTaskFiltersByKey = function (appName, key) {
            return this.preferenceService.getPreferenceByKey(appName, key);
        };
        ServiceTaskFilterCloudService.prototype.getTaskListFilters = function (appName) {
            this.createDefaultFilters(appName);
            return this.filters$;
        };
        ServiceTaskFilterCloudService.prototype.getTaskFilterById = function (appName, id) {
            var _this = this;
            var key = this.prepareKey(appName);
            return this.getTaskFiltersByKey(appName, key).pipe(operators.switchMap(function (filters) {
                if (filters && filters.length === 0) {
                    return _this.createTaskFilters(appName, key, _this.defaultServiceTaskFilters(appName));
                }
                else {
                    return rxjs.of(filters);
                }
            }), operators.map(function (filters) {
                return filters.filter(function (filter) {
                    return filter.id === id;
                })[0];
            }));
        };
        ServiceTaskFilterCloudService.prototype.addFilter = function (newFilter) {
            var _this = this;
            var key = this.prepareKey(newFilter.appName);
            return this.getTaskFiltersByKey(newFilter.appName, key).pipe(operators.switchMap(function (filters) {
                if (filters && filters.length === 0) {
                    return _this.createTaskFilters(newFilter.appName, key, [newFilter]);
                }
                else {
                    filters.push(newFilter);
                    return _this.preferenceService.updatePreference(newFilter.appName, key, filters);
                }
            }), operators.map(function (filters) {
                _this.addFiltersToStream(filters);
                return filters;
            }));
        };
        ServiceTaskFilterCloudService.prototype.addFiltersToStream = function (filters) {
            this.filtersSubject.next(filters);
        };
        ServiceTaskFilterCloudService.prototype.updateFilter = function (updatedFilter) {
            var _this = this;
            var key = this.prepareKey(updatedFilter.appName);
            return this.getTaskFiltersByKey(updatedFilter.appName, key).pipe(operators.switchMap(function (filters) {
                if (filters && filters.length === 0) {
                    return _this.createTaskFilters(updatedFilter.appName, key, [updatedFilter]);
                }
                else {
                    var itemIndex = filters.findIndex(function (filter) { return filter.id === updatedFilter.id; });
                    filters[itemIndex] = updatedFilter;
                    return _this.updateTaskFilters(updatedFilter.appName, key, filters);
                }
            }), operators.map(function (updatedFilters) {
                _this.addFiltersToStream(updatedFilters);
                return updatedFilters;
            }));
        };
        ServiceTaskFilterCloudService.prototype.deleteFilter = function (deletedFilter) {
            var _this = this;
            var key = this.prepareKey(deletedFilter.appName);
            return this.getTaskFiltersByKey(deletedFilter.appName, key).pipe(operators.switchMap(function (filters) {
                if (filters && filters.length > 0) {
                    filters = filters.filter(function (filter) { return filter.id !== deletedFilter.id; });
                    return _this.updateTaskFilters(deletedFilter.appName, key, filters);
                }
                return rxjs.of([]);
            }), operators.map(function (filters) {
                _this.addFiltersToStream(filters);
                return filters;
            }));
        };
        ServiceTaskFilterCloudService.prototype.isDefaultFilter = function (filterName) {
            var defaultFilters = this.defaultServiceTaskFilters();
            return defaultFilters.findIndex(function (filter) { return filterName === filter.name; }) !== -1;
        };
        ServiceTaskFilterCloudService.prototype.updateTaskFilters = function (appName, key, filters) {
            return this.preferenceService.updatePreference(appName, key, filters);
        };
        ServiceTaskFilterCloudService.prototype.prepareKey = function (appName) {
            return "service-task-filters-" + appName + "-" + this.identityUserService.getCurrentUserInfo().username;
        };
        ServiceTaskFilterCloudService.prototype.findFiltersByKeyInPreferences = function (preferences, key) {
            var result = preferences.find(function (filter) { return filter.entry.key === key; });
            return result && result.entry ? JSON.parse(result.entry.value) : [];
        };
        ServiceTaskFilterCloudService.prototype.defaultServiceTaskFilters = function (appName) {
            return [
                {
                    id: this.generateRandomId(),
                    name: 'ADF_CLOUD_SERVICE_TASK_FILTERS.ALL_SERVICE_TASKS',
                    key: 'my-service-tasks',
                    icon: 'inbox',
                    appName: appName,
                    status: '',
                    sort: 'startedDate',
                    order: 'DESC'
                },
                {
                    id: this.generateRandomId(),
                    name: 'ADF_CLOUD_SERVICE_TASK_FILTERS.COMPLETED_TASKS',
                    key: 'completed-tasks',
                    icon: 'done',
                    appName: appName,
                    status: 'COMPLETED',
                    sort: 'completedDate',
                    order: 'DESC'
                },
                {
                    id: this.generateRandomId(),
                    name: 'ADF_CLOUD_SERVICE_TASK_FILTERS.ERRORED_TASKS',
                    key: 'errored-service-tasks',
                    icon: 'error',
                    appName: appName,
                    status: 'ERROR',
                    sort: 'startedDate',
                    order: 'DESC'
                }
            ];
        };
        ServiceTaskFilterCloudService.prototype.generateRandomId = function () {
            return Math.random().toString(36).substr(2, 9);
        };
        return ServiceTaskFilterCloudService;
    }());
    ServiceTaskFilterCloudService.ɵprov = i0.ɵɵdefineInjectable({ factory: function ServiceTaskFilterCloudService_Factory() { return new ServiceTaskFilterCloudService(i0.ɵɵinject(i1.IdentityUserService), i0.ɵɵinject(TASK_FILTERS_SERVICE_TOKEN)); }, token: ServiceTaskFilterCloudService, providedIn: "root" });
    ServiceTaskFilterCloudService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    ServiceTaskFilterCloudService.ctorParameters = function () { return [
        { type: i1.IdentityUserService },
        { type: undefined, decorators: [{ type: i0.Inject, args: [TASK_FILTERS_SERVICE_TOKEN,] }] }
    ]; };

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var TaskFilterDialogCloudComponent = /** @class */ (function () {
        function TaskFilterDialogCloudComponent(fb, dialogRef, data) {
            this.fb = fb;
            this.dialogRef = dialogRef;
            this.data = data;
            this.defaultIcon = 'inbox';
        }
        TaskFilterDialogCloudComponent.prototype.ngOnInit = function () {
            this.filterForm = this.fb.group({
                name: [this.data.name, forms.Validators.required]
            });
        };
        TaskFilterDialogCloudComponent.prototype.onSaveClick = function () {
            this.dialogRef.close({
                action: TaskFilterDialogCloudComponent.ACTION_SAVE,
                icon: this.defaultIcon,
                name: this.nameController.value
            });
        };
        TaskFilterDialogCloudComponent.prototype.onCancelClick = function () {
            this.dialogRef.close();
        };
        Object.defineProperty(TaskFilterDialogCloudComponent.prototype, "nameController", {
            get: function () {
                return this.filterForm.get('name');
            },
            enumerable: false,
            configurable: true
        });
        TaskFilterDialogCloudComponent.prototype.isValid = function () {
            return this.filterForm.valid;
        };
        return TaskFilterDialogCloudComponent;
    }());
    TaskFilterDialogCloudComponent.ACTION_SAVE = 'SAVE';
    TaskFilterDialogCloudComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'adf-cloud-task-filter-dialog',
                    template: "<div class=\"adf-task-filter-dialog\">\n    <span mat-dialog-title id=\"adf-task-filter-dialog-title\">\n         {{ 'ADF_CLOUD_EDIT_TASK_FILTER.DIALOG.TITLE' | translate}}\n    </span>\n    <mat-card>\n        <mat-card-content>\n        <form [formGroup]=\"filterForm\">\n            <mat-form-field fxFlex [floatLabel]=\"'auto'\">\n                <input matInput placeholder=\"{{ 'ADF_CLOUD_EDIT_TASK_FILTER.FILTER_NAME' | translate }}\" formControlName=\"name\" id=\"adf-filter-name-id\">\n            </mat-form-field>\n        </form>\n        </mat-card-content>\n        <mat-card-actions fxLayout=\"row\" fxLayoutAlign=\"end end\">\n            <button mat-button (click)=\"onSaveClick()\" id=\"adf-save-button-id\" [disabled]=\"!isValid()\">\n                {{ 'ADF_CLOUD_EDIT_TASK_FILTER.DIALOG.SAVE' | translate}}\n            </button>\n            <button mat-button (click)=\"onCancelClick()\" id=\"adf-cancel-button-id\">\n               {{ 'ADF_CLOUD_EDIT_TASK_FILTER.DIALOG.CANCEL' | translate}}\n            </button>\n        </mat-card-actions>\n    </mat-card>\n</div>\n",
                    styles: [".adf-task-filter-dialog .mat-card,.adf-task-filter-dialog .mat-card-content{box-shadow:none;padding:0}"]
                },] }
    ];
    TaskFilterDialogCloudComponent.ctorParameters = function () { return [
        { type: forms.FormBuilder },
        { type: i2.MatDialogRef },
        { type: undefined, decorators: [{ type: i0.Inject, args: [i2.MAT_DIALOG_DATA,] }] }
    ]; };

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var BaseEditTaskFilterCloudComponent = /** @class */ (function () {
        function BaseEditTaskFilterCloudComponent(formBuilder, dateAdapter, userPreferencesService, appsProcessCloudService, taskCloudService, dialog, translateService) {
            this.formBuilder = formBuilder;
            this.dateAdapter = dateAdapter;
            this.userPreferencesService = userPreferencesService;
            this.appsProcessCloudService = appsProcessCloudService;
            this.taskCloudService = taskCloudService;
            this.dialog = dialog;
            this.translateService = translateService;
            this.appName = '';
            this.showTitle = true;
            this.showTaskFilterName = true;
            this.filterProperties = [];
            this.role = '';
            this.showFilterActions = true;
            this.actions = BaseEditTaskFilterCloudComponent.DEFAULT_ACTIONS;
            this.sortProperties = [];
            this.action = new i0.EventEmitter();
            this.applicationNames = [];
            this.processDefinitionNames = [];
            this.formHasBeenChanged = false;
            this.taskFilterProperties = [];
            this.taskFilterActions = [];
            this.toggleFilterActions = false;
            this.sortDirections = [
                { value: 'ASC', label: 'ADF_CLOUD_TASK_FILTERS.DIRECTION.ASCENDING' },
                { value: 'DESC', label: 'ADF_CLOUD_TASK_FILTERS.DIRECTION.DESCENDING' }
            ];
            this.allProcessDefinitionNamesOption = {
                value: '',
                label: 'ADF_CLOUD_TASK_FILTERS.STATUS.ALL'
            };
            this.filterChange = new i0.EventEmitter();
            this.onDestroy$ = new rxjs.Subject();
            this.isLoading = false;
        }
        BaseEditTaskFilterCloudComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.userPreferencesService
                .select(i1.UserPreferenceValues.Locale)
                .pipe(operators.takeUntil(this.onDestroy$))
                .subscribe(function (locale) { return _this.dateAdapter.setLocale(locale); });
        };
        BaseEditTaskFilterCloudComponent.prototype.ngOnChanges = function (changes) {
            var id = changes['id'];
            if (id && id.currentValue !== id.previousValue) {
                this.retrieveTaskFilterAndBuildForm();
            }
        };
        BaseEditTaskFilterCloudComponent.prototype.ngOnDestroy = function () {
            this.onDestroy$.next(true);
            this.onDestroy$.complete();
        };
        BaseEditTaskFilterCloudComponent.prototype.createFilterActions = function () {
            return [
                {
                    actionType: BaseEditTaskFilterCloudComponent.ACTION_SAVE,
                    icon: 'adf:save',
                    tooltip: 'ADF_CLOUD_EDIT_TASK_FILTER.TOOL_TIP.SAVE'
                },
                {
                    actionType: BaseEditTaskFilterCloudComponent.ACTION_SAVE_AS,
                    icon: 'adf:save-as',
                    tooltip: 'ADF_CLOUD_EDIT_TASK_FILTER.TOOL_TIP.SAVE_AS'
                },
                {
                    actionType: BaseEditTaskFilterCloudComponent.ACTION_DELETE,
                    icon: 'delete',
                    tooltip: 'ADF_CLOUD_EDIT_TASK_FILTER.TOOL_TIP.DELETE'
                }
            ];
        };
        BaseEditTaskFilterCloudComponent.prototype.hasFormChanged = function (action) {
            if (action.actionType === BaseEditTaskFilterCloudComponent.ACTION_SAVE) {
                return !this.formHasBeenChanged;
            }
            if (action.actionType === BaseEditTaskFilterCloudComponent.ACTION_SAVE_AS) {
                return !this.formHasBeenChanged;
            }
            if (action.actionType === BaseEditTaskFilterCloudComponent.ACTION_DELETE) {
                return false;
            }
            return false;
        };
        BaseEditTaskFilterCloudComponent.prototype.onExpand = function () {
            this.toggleFilterActions = true;
        };
        BaseEditTaskFilterCloudComponent.prototype.onClose = function () {
            this.toggleFilterActions = false;
        };
        BaseEditTaskFilterCloudComponent.prototype.isDisabledAction = function (action) {
            return this.isDisabledForDefaultFilters(action) ? true : this.hasFormChanged(action);
        };
        BaseEditTaskFilterCloudComponent.prototype.deepCompare = function (left, right) {
            return JSON.stringify(left).toLowerCase() === JSON.stringify(right).toLowerCase();
        };
        BaseEditTaskFilterCloudComponent.prototype.getSanitizeFilterName = function (filterName) {
            var nameWithHyphen = this.replaceSpaceWithHyphen(filterName.trim());
            return nameWithHyphen.toLowerCase();
        };
        BaseEditTaskFilterCloudComponent.prototype.replaceSpaceWithHyphen = function (name) {
            var regExt = new RegExp(' ', 'g');
            return name.replace(regExt, '-');
        };
        BaseEditTaskFilterCloudComponent.prototype.executeFilterActions = function (action) {
            if (action.actionType === BaseEditTaskFilterCloudComponent.ACTION_SAVE) {
                this.save(action);
            }
            else if (action.actionType === BaseEditTaskFilterCloudComponent.ACTION_SAVE_AS) {
                this.saveAs(action);
            }
            else if (action.actionType === BaseEditTaskFilterCloudComponent.ACTION_DELETE) {
                this.delete(action);
            }
        };
        BaseEditTaskFilterCloudComponent.prototype.getRunningApplications = function () {
            var _this = this;
            this.appsProcessCloudService
                .getDeployedApplicationsByStatus(BaseEditTaskFilterCloudComponent.APP_RUNNING_STATUS, this.role)
                .subscribe(function (applications) {
                if (applications && applications.length > 0) {
                    applications.map(function (application) {
                        _this.applicationNames.push({ label: application.name, value: application.name });
                    });
                }
            });
        };
        BaseEditTaskFilterCloudComponent.prototype.getProcessDefinitions = function () {
            var _this = this;
            this.taskCloudService.getProcessDefinitions(this.appName)
                .subscribe(function (processDefinitions) {
                if (processDefinitions && processDefinitions.length > 0) {
                    _this.processDefinitionNames.push(_this.allProcessDefinitionNamesOption);
                    processDefinitions.map(function (processDefinition) {
                        _this.processDefinitionNames.push({ label: processDefinition.name, value: processDefinition.name });
                    });
                }
            });
        };
        BaseEditTaskFilterCloudComponent.prototype.checkMandatoryActions = function () {
            if (this.actions === undefined || this.actions.length === 0) {
                this.actions = BaseEditTaskFilterCloudComponent.DEFAULT_ACTIONS;
            }
        };
        BaseEditTaskFilterCloudComponent.prototype.isValidAction = function (actions, action) {
            return actions ? actions.indexOf(action.actionType) >= 0 : true;
        };
        BaseEditTaskFilterCloudComponent.prototype.isFormValid = function () {
            return this.editTaskFilterForm.valid;
        };
        BaseEditTaskFilterCloudComponent.prototype.getPropertyController = function (property) {
            return this.editTaskFilterForm.get(property.key);
        };
        BaseEditTaskFilterCloudComponent.prototype.onDateChanged = function (newDateValue, dateProperty) {
            if (newDateValue) {
                var momentDate = moment$1(newDateValue, BaseEditTaskFilterCloudComponent.FORMAT_DATE, true);
                var controller = this.getPropertyController(dateProperty);
                if (momentDate.isValid()) {
                    controller.setValue(momentDate.toISOString(true));
                    controller.setErrors(null);
                }
                else {
                    controller.setErrors({ invalid: true });
                }
            }
        };
        BaseEditTaskFilterCloudComponent.prototype.onDateRangeFilterChanged = function (dateRange, property) {
            var _a, _b;
            this.editTaskFilterForm.get((_a = property.attributes) === null || _a === void 0 ? void 0 : _a.from).setValue(dateRange.startDate ? dateRange.startDate : null);
            this.editTaskFilterForm.get((_b = property.attributes) === null || _b === void 0 ? void 0 : _b.to).setValue(dateRange.endDate ? dateRange.endDate : null);
            this.editTaskFilterForm.get(property.attributes.dateType).setValue(exports.DateCloudFilterType.RANGE);
        };
        BaseEditTaskFilterCloudComponent.prototype.onChangedUser = function (users, userProperty) {
            var selectedUsers;
            if (userProperty.selectionMode === 'single') {
                selectedUsers = users[0];
            }
            else {
                selectedUsers = users;
            }
            this.getPropertyController(userProperty).setValue(selectedUsers);
        };
        BaseEditTaskFilterCloudComponent.prototype.onAssignedChange = function (assignedValue) {
            this.editTaskFilterForm.get('candidateGroups').setValue([]);
            this.editTaskFilterForm.get('assignee').setValue(assignedValue === null || assignedValue === void 0 ? void 0 : assignedValue.username);
        };
        BaseEditTaskFilterCloudComponent.prototype.onAssignedGroupsChange = function (groups) {
            this.editTaskFilterForm.get('assignee').setValue(null);
            this.editTaskFilterForm.get('candidateGroups').setValue(groups);
        };
        BaseEditTaskFilterCloudComponent.prototype.hasError = function (property) {
            var controller = this.getPropertyController(property);
            return controller.errors && controller.errors.invalid;
        };
        BaseEditTaskFilterCloudComponent.prototype.hasLastModifiedProperty = function () {
            return this.filterProperties.indexOf(BaseEditTaskFilterCloudComponent.LAST_MODIFIED) >= 0;
        };
        Object.defineProperty(BaseEditTaskFilterCloudComponent.prototype, "createSortProperties", {
            get: function () {
                this.checkMandatorySortProperties();
                return this.sortProperties.map(function (property) {
                    return { label: property, value: property };
                });
            },
            enumerable: false,
            configurable: true
        });
        BaseEditTaskFilterCloudComponent.prototype.createAndFilterActions = function () {
            var _this = this;
            this.checkMandatoryActions();
            return this.createFilterActions().filter(function (action) { return _this.isValidAction(_this.actions, action); });
        };
        BaseEditTaskFilterCloudComponent.prototype.isValidProperty = function (filterProperties, key) {
            return filterProperties ? filterProperties.indexOf(key) >= 0 : true;
        };
        BaseEditTaskFilterCloudComponent.prototype.checkForProperty = function (property) {
            return this.filterProperties ? this.filterProperties.indexOf(property) >= 0 : false;
        };
        BaseEditTaskFilterCloudComponent.prototype.hasSortProperty = function () {
            return this.filterProperties.indexOf(BaseEditTaskFilterCloudComponent.SORT) >= 0;
        };
        BaseEditTaskFilterCloudComponent.prototype.removeOrderProperty = function (filteredProperties) {
            if (filteredProperties && filteredProperties.length > 0) {
                return filteredProperties.filter(function (property) { return property.key !== BaseEditTaskFilterCloudComponent.ORDER; });
            }
            return [];
        };
        BaseEditTaskFilterCloudComponent.prototype.createAndFilterProperties = function () {
            var _this = this;
            this.checkMandatoryFilterProperties();
            if (this.checkForProperty(BaseEditTaskFilterCloudComponent.APPLICATION_NAME)) {
                this.applicationNames = [];
                this.getRunningApplications();
            }
            if (this.checkForProperty(BaseEditTaskFilterCloudComponent.PROCESS_DEFINITION_NAME)) {
                this.processDefinitionNames = [];
                this.getProcessDefinitions();
            }
            var defaultProperties = this.createTaskFilterProperties();
            var filteredProperties = defaultProperties.filter(function (filterProperty) { return _this.isValidProperty(_this.filterProperties, filterProperty.key); });
            if (!this.hasSortProperty()) {
                filteredProperties = this.removeOrderProperty(filteredProperties);
            }
            return filteredProperties;
        };
        BaseEditTaskFilterCloudComponent.prototype.onFilterChange = function () {
            var _this = this;
            this.editTaskFilterForm.valueChanges
                .pipe(operators.debounceTime(500), operators.filter(function () { return _this.isFormValid(); }), operators.takeUntil(this.onDestroy$))
                .subscribe(function (formValues) {
                _this.assignNewFilter(formValues);
            });
        };
        BaseEditTaskFilterCloudComponent.prototype.getFormControlsConfig = function (taskFilterProperties) {
            var _this = this;
            var properties = taskFilterProperties.map(function (property) {
                var _c;
                if (!!property.attributes) {
                    return _this.getAttributesControlConfig(property);
                }
                else {
                    return _c = {}, _c[property.key] = property.value, _c;
                }
            });
            return properties.reduce((function (result, current) { return Object.assign(result, current); }), {});
        };
        BaseEditTaskFilterCloudComponent.prototype.getAttributesControlConfig = function (property) {
            return Object.values(property.attributes).reduce(function (result, key) {
                result[key] = property.value[key];
                return result;
            }, {});
        };
        BaseEditTaskFilterCloudComponent.prototype.buildForm = function (taskFilterProperties) {
            this.formHasBeenChanged = false;
            this.editTaskFilterForm = this.formBuilder.group(this.getFormControlsConfig(taskFilterProperties));
            this.onFilterChange();
        };
        BaseEditTaskFilterCloudComponent.prototype.onDateTypeChange = function (dateType, property) {
            this.editTaskFilterForm.get(property.attributes.dateType).setValue(dateType);
        };
        BaseEditTaskFilterCloudComponent.prototype.retrieveTaskFilterAndBuildForm = function () {
            var _this = this;
            this.isLoading = true;
            this.getTaskFilterById(this.appName, this.id)
                .pipe(operators.finalize(function () { return _this.isLoading = false; }), operators.takeUntil(this.onDestroy$))
                .subscribe(function (response) {
                _this.taskFilter = response;
                _this.taskFilterProperties = _this.createAndFilterProperties();
                _this.taskFilterActions = _this.createAndFilterActions();
                _this.buildForm(_this.taskFilterProperties);
            });
        };
        BaseEditTaskFilterCloudComponent.prototype.delete = function (deleteAction) {
            var _this = this;
            this.deleteFilter(this.taskFilter)
                .pipe(operators.filter(function (filters) {
                deleteAction.filter = _this.taskFilter;
                _this.action.emit(deleteAction);
                return filters.length === 0;
            }), operators.switchMap(function () { return _this.restoreDefaultTaskFilters(); }), operators.takeUntil(this.onDestroy$))
                .subscribe(function () { });
        };
        BaseEditTaskFilterCloudComponent.prototype.save = function (saveAction) {
            var _this = this;
            this.updateFilter(this.changedTaskFilter)
                .pipe(operators.takeUntil(this.onDestroy$))
                .subscribe(function () {
                saveAction.filter = _this.changedTaskFilter;
                _this.action.emit(saveAction);
                _this.formHasBeenChanged = _this.deepCompare(_this.changedTaskFilter, _this.taskFilter);
            });
        };
        BaseEditTaskFilterCloudComponent.prototype.saveAs = function (saveAsAction) {
            var _this = this;
            var _a;
            var dialogRef = this.dialog.open(TaskFilterDialogCloudComponent, {
                data: {
                    name: this.translateService.instant((_a = this.taskFilter) === null || _a === void 0 ? void 0 : _a.name)
                },
                height: 'auto',
                minWidth: '30%'
            });
            dialogRef.afterClosed().subscribe(function (result) {
                if (result && result.action === TaskFilterDialogCloudComponent.ACTION_SAVE) {
                    var filterId = Math.random().toString(36).substr(2, 9);
                    var filterKey = _this.getSanitizeFilterName(result.name);
                    var newFilter = {
                        name: result.name,
                        icon: result.icon,
                        id: filterId,
                        key: 'custom-' + filterKey
                    };
                    var resultFilter_1 = Object.assign({}, _this.changedTaskFilter, newFilter);
                    _this.addFilter(resultFilter_1).subscribe(function () {
                        saveAsAction.filter = resultFilter_1;
                        _this.action.emit(saveAsAction);
                    });
                }
            });
        };
        BaseEditTaskFilterCloudComponent.prototype.checkMandatoryFilterProperties = function () {
            if (this.filterProperties === undefined || this.filterProperties.length === 0) {
                this.filterProperties = this.getDefaultFilterProperties();
            }
        };
        BaseEditTaskFilterCloudComponent.prototype.checkMandatorySortProperties = function () {
            if (this.sortProperties === undefined || this.sortProperties.length === 0) {
                this.sortProperties = this.getDefaultSortProperties();
            }
        };
        return BaseEditTaskFilterCloudComponent;
    }());
    BaseEditTaskFilterCloudComponent.ACTION_SAVE = 'save';
    BaseEditTaskFilterCloudComponent.ACTION_SAVE_AS = 'saveAs';
    BaseEditTaskFilterCloudComponent.ACTION_DELETE = 'delete';
    BaseEditTaskFilterCloudComponent.APP_RUNNING_STATUS = 'RUNNING';
    BaseEditTaskFilterCloudComponent.APPLICATION_NAME = 'appName';
    BaseEditTaskFilterCloudComponent.PROCESS_DEFINITION_NAME = 'processDefinitionName';
    BaseEditTaskFilterCloudComponent.LAST_MODIFIED = 'lastModified';
    BaseEditTaskFilterCloudComponent.SORT = 'sort';
    BaseEditTaskFilterCloudComponent.ORDER = 'order';
    BaseEditTaskFilterCloudComponent.DEFAULT_ACTIONS = ['save', 'saveAs', 'delete'];
    BaseEditTaskFilterCloudComponent.FORMAT_DATE = 'DD/MM/YYYY';
    BaseEditTaskFilterCloudComponent.ACTIONS_DISABLED_BY_DEFAULT = [
        BaseEditTaskFilterCloudComponent.ACTION_SAVE,
        BaseEditTaskFilterCloudComponent.ACTION_DELETE
    ];
    BaseEditTaskFilterCloudComponent.decorators = [
        { type: i0.Directive }
    ];
    BaseEditTaskFilterCloudComponent.ctorParameters = function () { return [
        { type: forms.FormBuilder },
        { type: core.DateAdapter },
        { type: i1.UserPreferencesService },
        { type: AppsProcessCloudService },
        { type: TaskCloudService },
        { type: i2.MatDialog },
        { type: i1.TranslationService }
    ]; };
    BaseEditTaskFilterCloudComponent.propDecorators = {
        appName: [{ type: i0.Input }],
        id: [{ type: i0.Input }],
        showTitle: [{ type: i0.Input }],
        showTaskFilterName: [{ type: i0.Input }],
        filterProperties: [{ type: i0.Input }],
        role: [{ type: i0.Input }],
        showFilterActions: [{ type: i0.Input }],
        actions: [{ type: i0.Input }],
        sortProperties: [{ type: i0.Input }],
        action: [{ type: i0.Output }],
        filterChange: [{ type: i0.Output }]
    };

    var EditServiceTaskFilterCloudComponent = /** @class */ (function (_super) {
        __extends(EditServiceTaskFilterCloudComponent, _super);
        function EditServiceTaskFilterCloudComponent(formBuilder, dialog, translateService, serviceTaskFilterCloudService, dateAdapter, userPreferencesService, appsProcessCloudService, taskCloudService) {
            var _this = _super.call(this, formBuilder, dateAdapter, userPreferencesService, appsProcessCloudService, taskCloudService, dialog, translateService) || this;
            _this.serviceTaskFilterCloudService = serviceTaskFilterCloudService;
            return _this;
        }
        EditServiceTaskFilterCloudComponent.prototype.assignNewFilter = function (model) {
            this.changedTaskFilter = Object.assign(Object.assign({}, this.taskFilter), model);
            this.formHasBeenChanged = !this.deepCompare(this.changedTaskFilter, this.taskFilter);
            this.filterChange.emit(this.changedTaskFilter);
        };
        EditServiceTaskFilterCloudComponent.prototype.getTaskFilterById = function (appName, id) {
            return this.serviceTaskFilterCloudService.getTaskFilterById(appName, id);
        };
        EditServiceTaskFilterCloudComponent.prototype.getDefaultFilterProperties = function () {
            return ['appName', 'activityName', 'status', 'sort', 'order'];
        };
        EditServiceTaskFilterCloudComponent.prototype.getDefaultSortProperties = function () {
            return ['id', 'activityName', 'startedDate', 'completedDate'];
        };
        EditServiceTaskFilterCloudComponent.prototype.updateFilter = function (filterToUpdate) {
            return this.serviceTaskFilterCloudService.updateFilter(filterToUpdate);
        };
        EditServiceTaskFilterCloudComponent.prototype.deleteFilter = function (filterToDelete) {
            return this.serviceTaskFilterCloudService.deleteFilter(filterToDelete);
        };
        EditServiceTaskFilterCloudComponent.prototype.addFilter = function (filterToAdd) {
            return this.serviceTaskFilterCloudService
                .addFilter(filterToAdd)
                .pipe(operators.takeUntil(this.onDestroy$));
        };
        EditServiceTaskFilterCloudComponent.prototype.isDisabledForDefaultFilters = function (action) {
            return (this.serviceTaskFilterCloudService.isDefaultFilter(this.taskFilter.name) &&
                EditServiceTaskFilterCloudComponent.ACTIONS_DISABLED_BY_DEFAULT.includes(action.actionType));
        };
        EditServiceTaskFilterCloudComponent.prototype.restoreDefaultTaskFilters = function () {
            return this.serviceTaskFilterCloudService.getTaskListFilters(this.appName);
        };
        EditServiceTaskFilterCloudComponent.prototype.getStatusOptions = function () {
            return [
                { value: '', label: 'ADF_CLOUD_SERVICE_TASK_FILTERS.STATUS.ALL' },
                { value: 'STARTED', label: 'ADF_CLOUD_SERVICE_TASK_FILTERS.STATUS.STARTED' },
                { value: 'COMPLETED', label: 'ADF_CLOUD_SERVICE_TASK_FILTERS.STATUS.COMPLETED' },
                { value: 'CANCELLED', label: 'ADF_CLOUD_SERVICE_TASK_FILTERS.STATUS.CANCELLED' },
                { value: 'ERROR', label: 'ADF_CLOUD_SERVICE_TASK_FILTERS.STATUS.ERROR' }
            ];
        };
        EditServiceTaskFilterCloudComponent.prototype.createTaskFilterProperties = function () {
            var statusOptions = this.getStatusOptions();
            return [
                {
                    label: 'ADF_CLOUD_EDIT_SERVICE_TASK_FILTER.LABEL.APP_NAME',
                    type: 'select',
                    key: 'appName',
                    value: this.taskFilter.appName || '',
                    options: this.applicationNames
                },
                {
                    label: 'ADF_CLOUD_EDIT_SERVICE_TASK_FILTER.LABEL.SERVICE_TASK_ID',
                    type: 'text',
                    key: 'serviceTaskId',
                    value: this.taskFilter.serviceTaskId || ''
                },
                {
                    label: 'ADF_CLOUD_EDIT_SERVICE_TASK_FILTER.LABEL.ELEMENT_ID',
                    type: 'text',
                    key: 'elementId',
                    value: this.taskFilter.elementId || ''
                },
                {
                    label: 'ADF_CLOUD_EDIT_SERVICE_TASK_FILTER.LABEL.ACTIVITY_NAME',
                    type: 'text',
                    key: 'activityName',
                    value: this.taskFilter.activityName || ''
                },
                {
                    label: 'ADF_CLOUD_EDIT_SERVICE_TASK_FILTER.LABEL.ACTIVITY_TYPE',
                    type: 'text',
                    key: 'activityType',
                    value: this.taskFilter.activityType || ''
                },
                {
                    label: 'ADF_CLOUD_EDIT_SERVICE_TASK_FILTER.LABEL.SORT',
                    type: 'select',
                    key: 'sort',
                    value: this.taskFilter.sort || this.createSortProperties[0].value,
                    options: this.createSortProperties
                },
                {
                    label: 'ADF_CLOUD_EDIT_SERVICE_TASK_FILTER.LABEL.DIRECTION',
                    type: 'select',
                    key: 'order',
                    value: this.taskFilter.order || this.sortDirections[0].value,
                    options: __spread(this.sortDirections)
                },
                {
                    label: 'ADF_CLOUD_EDIT_SERVICE_TASK_FILTER.LABEL.STATUS',
                    type: 'select',
                    key: 'status',
                    value: this.taskFilter.status || statusOptions[0].value,
                    options: statusOptions
                },
                {
                    label: 'ADF_CLOUD_EDIT_SERVICE_TASK_FILTER.LABEL.STARTED_DATE',
                    type: 'date',
                    key: 'startedDate',
                    value: this.taskFilter.completedDate || false
                },
                {
                    label: 'ADF_CLOUD_EDIT_SERVICE_TASK_FILTER.LABEL.COMPLETED_DATE',
                    type: 'date',
                    key: 'completedDate',
                    value: this.taskFilter.completedDate || false
                },
                {
                    label: 'ADF_CLOUD_EDIT_SERVICE_TASK_FILTER.LABEL.PROCESS_INSTANCE_ID',
                    type: 'text',
                    key: 'processInstanceId',
                    value: this.taskFilter.processInstanceId || ''
                },
                {
                    label: 'ADF_CLOUD_EDIT_SERVICE_TASK_FILTER.LABEL.PROCESS_DEF_ID',
                    type: 'text',
                    key: 'processDefinitionId',
                    value: this.taskFilter.processDefinitionId || ''
                },
                {
                    label: 'ADF_CLOUD_EDIT_SERVICE_TASK_FILTER.LABEL.SERVICE_NAME',
                    type: 'text',
                    key: 'serviceName',
                    value: this.taskFilter.serviceName || ''
                }
            ];
        };
        return EditServiceTaskFilterCloudComponent;
    }(BaseEditTaskFilterCloudComponent));
    EditServiceTaskFilterCloudComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'adf-cloud-edit-service-task-filter',
                    template: "<mat-accordion [hideToggle]=\"isLoading\">\n    <mat-expansion-panel (afterExpand)=\"onExpand()\" (closed)=\"onClose()\">\n        <mat-expansion-panel-header *ngIf=\"taskFilter\" id=\"adf-edit-task-filter-expansion-header\">\n            <ng-container *ngIf=\"!isLoading; else loadingTemplate\">\n                <mat-panel-title *ngIf=\"showTaskFilterName\" fxLayoutAlign=\"space-between center\" id=\"adf-edit-task-filter-title-id\"\n                    >{{taskFilter.name | translate}}</mat-panel-title>\n                <mat-panel-description fxLayoutAlign=\"space-between center\" id=\"adf-edit-task-filter-sub-title-id\">\n                    <span *ngIf=\"showTitle\">{{ 'ADF_CLOUD_EDIT_TASK_FILTER.TITLE' | translate}}</span>\n                    <div *ngIf=\"showFilterActions\" class=\"adf-cloud-edit-task-filter-actions\">\n                        <ng-container *ngIf=\"toggleFilterActions\">\n                            <button *ngFor=\"let filterAction of taskFilterActions\"\n                                    mat-icon-button\n                                    matTooltip=\"{{ filterAction.tooltip | translate}}\"\n                                    [attr.data-automation-id]=\"'adf-filter-action-' + filterAction.actionType\"\n                                    [disabled]=\"isDisabledAction(filterAction)\"\n                                    (click)=\"executeFilterActions(filterAction)\">\n                                <adf-icon [value]=\"filterAction.icon\"></adf-icon>\n                            </button>\n                        </ng-container>\n                    </div>\n                </mat-panel-description>\n            </ng-container>\n            <ng-template #loadingTemplate>\n                <div class=\"adf-cloud-edit-task-filter-loading-margin\">\n                    <mat-spinner [diameter]=\"30\"></mat-spinner>\n                </div>\n            </ng-template>\n        </mat-expansion-panel-header>\n        <ng-container *ngIf=\"!isLoading;\">\n            <form *ngIf=\"editTaskFilterForm\" [formGroup]=\"editTaskFilterForm\">\n                <div fxLayout=\"row wrap\" fxLayout.xs=\"column\" fxLayoutGap=\"10px\" fxLayoutAlign=\"start center\">\n                    <ng-container *ngFor=\"let taskFilterProperty of taskFilterProperties\">\n                        <mat-form-field fxFlex=\"23%\"\n                                        [floatLabel]=\"'auto'\"\n                                        *ngIf=\"taskFilterProperty.type === 'select'\"\n                                        [attr.data-automation-id]=\"taskFilterProperty.key\">\n                            <mat-select placeholder=\"{{taskFilterProperty.label | translate}}\"\n                                        [formControlName]=\"taskFilterProperty.key\"\n                                        [attr.data-automation-id]=\"'adf-cloud-edit-task-property-' + taskFilterProperty.key\">\n                                <mat-option *ngFor=\"let propertyOption of taskFilterProperty.options\"\n                                            [value]=\"propertyOption.value\"\n                                            [attr.data-automation-id]=\"'adf-cloud-edit-task-property-options-' + taskFilterProperty.key\">\n                                    {{ propertyOption.label | translate }}\n                                </mat-option>\n                            </mat-select>\n                        </mat-form-field>\n                        <mat-form-field fxFlex=\"23%\"\n                                        [floatLabel]=\"'auto'\"\n                                        *ngIf=\"taskFilterProperty.type === 'text'\"\n                                        [attr.data-automation-id]=\"taskFilterProperty.key\">\n                            <input matInput\n                                   [formControlName]=\"taskFilterProperty.key\"\n                                   type=\"text\"\n                                   placeholder=\"{{taskFilterProperty.label | translate}}\"\n                                   [attr.data-automation-id]=\"'adf-cloud-edit-task-property-' + taskFilterProperty.key\" />\n                        </mat-form-field>\n                        <mat-form-field fxFlex=\"23%\"\n                                        [floatLabel]=\"'auto'\"\n                                        *ngIf=\"taskFilterProperty.type === 'date'\"\n                                        [attr.data-automation-id]=\"taskFilterProperty.key\">\n                            <mat-label>{{taskFilterProperty.label | translate}}</mat-label>\n                            <input matInput\n                                   (keyup)=\"onDateChanged($any($event).srcElement.value, taskFilterProperty)\"\n                                   (dateChange)=\"onDateChanged($event.value, taskFilterProperty)\"\n                                   [matDatepicker]=\"dateController\"\n                                   placeholder=\"{{taskFilterProperty.label | translate}}\"\n                                   [attr.data-automation-id]=\"'adf-cloud-edit-task-property-' + taskFilterProperty.key\">\n                            <mat-datepicker-toggle matSuffix\n                                                   [for]=\"dateController\"\n                                                   [attr.data-automation-id]=\"'adf-cloud-edit-task-property-date-toggle-' + taskFilterProperty.key\">\n                            </mat-datepicker-toggle>\n                            <mat-datepicker #dateController\n                                            [attr.data-automation-id]=\"'adf-cloud-edit-task-property-date-picker-' + taskFilterProperty.key\">\n                            </mat-datepicker>\n                            <div class=\"adf-edit-task-filter-date-error-container\">\n                                <div *ngIf=\"hasError(taskFilterProperty)\">\n                                    <div class=\"adf-error-text\">{{'ADF_TASK_LIST.START_TASK.FORM.ERROR.DATE'|translate}}</div>\n                                    <mat-icon class=\"adf-error-icon\">warning</mat-icon>\n                                </div>\n                            </div>\n                        </mat-form-field>\n                        <div class=\"adf-edit-task-filter-checkbox\"\n                             *ngIf=\"taskFilterProperty.type === 'checkbox'\">\n                            <mat-checkbox color=\"primary\"\n                                          [formControlName]=\"taskFilterProperty.key\"\n                                          [attr.data-automation-id]=\"taskFilterProperty.key\"\n                            >{{taskFilterProperty.label | translate}}</mat-checkbox>\n                        </div>\n\n                        <adf-cloud-date-range-filter #dateRange\n                            *ngIf=\"taskFilterProperty.type === 'date-range'\"\n                            [processFilterProperty]=\"taskFilterProperty\"\n                            [options]=\"taskFilterProperty.dateFilterOptions\"\n                            (dateTypeChange)=\"onDateTypeChange($event, taskFilterProperty)\"\n                            (dateChanged)=\"onDateRangeFilterChanged($event, taskFilterProperty)\">\n                        </adf-cloud-date-range-filter>\n\n                        <div fxFlex=\"23%\" class=\"{{ 'adf-edit-task-filter-' + taskFilterProperty.key }}\" *ngIf=\"taskFilterProperty.type === 'people'\">\n                            <adf-cloud-people\n                                [preSelectUsers]=\"taskFilterProperty.value\"\n                                [title]=\"taskFilterProperty.label\"\n                                [validate]=\"true\"\n                                [appName]=\"appName\"\n                                [mode]=\"taskFilterProperty.selectionMode\"\n                                (changedUsers)=\"onChangedUser($event, taskFilterProperty)\">\n                            </adf-cloud-people>\n                        </div>\n\n                        <adf-cloud-task-assignment-filter fxFlex=\"23%\"\n                            *ngIf=\"taskFilterProperty.type === 'assignment'\"\n                            [taskFilterProperty]=\"taskFilterProperty\"\n                            (assignedChange)=\"onAssignedChange($event)\"\n                            (assignedGroupChange)=\"onAssignedGroupsChange($event)\">\n                        </adf-cloud-task-assignment-filter>\n                    </ng-container>\n                </div>\n            </form>\n        </ng-container>\n    </mat-expansion-panel>\n</mat-accordion>\n",
                    encapsulation: i0.ViewEncapsulation.None,
                    styles: [".adf-edit-task-filter-checkbox{flex:1 23%;font-size:16px;padding-top:10px;text-align:center}.adf-edit-task-filter-date-error-container{height:20px;margin-top:12px;position:absolute;width:100%}.adf-edit-task-filter-date-error-container>div{display:flex;flex-flow:row;justify-content:flex-start}.adf-edit-task-filter-date-error-container .adf-error-text{color:var(--theme-warn-color);font-size:10px;height:16px;line-height:1.33;padding-right:8px;width:auto}.adf-edit-task-filter-date-error-container .adf-error-icon{color:var(--theme-warn-color);font-size:16px}.adf-edit-task-filter-dateRange mat-grid-list{width:450px}.adf-cloud-edit-task-filter-loading-margin{margin-left:calc(50% - 50px);margin-right:calc(50% - 50px)}"]
                },] }
    ];
    EditServiceTaskFilterCloudComponent.ctorParameters = function () { return [
        { type: forms.FormBuilder },
        { type: i2.MatDialog },
        { type: i1.TranslationService },
        { type: ServiceTaskFilterCloudService },
        { type: core.DateAdapter },
        { type: i1.UserPreferencesService },
        { type: AppsProcessCloudService },
        { type: TaskCloudService }
    ]; };

    var EditTaskFilterCloudComponent = /** @class */ (function (_super) {
        __extends(EditTaskFilterCloudComponent, _super);
        function EditTaskFilterCloudComponent(formBuilder, dialog, translateService, taskFilterCloudService, dateAdapter, userPreferencesService, appsProcessCloudService, taskCloudService) {
            var _this = _super.call(this, formBuilder, dateAdapter, userPreferencesService, appsProcessCloudService, taskCloudService, dialog, translateService) || this;
            _this.taskFilterCloudService = taskFilterCloudService;
            return _this;
        }
        EditTaskFilterCloudComponent.prototype.assignNewFilter = function (model) {
            this.setLastModifiedToFilter(model);
            this.changedTaskFilter = new TaskFilterCloudModel(Object.assign({}, this.taskFilter, model));
            this.formHasBeenChanged = !this.deepCompare(this.changedTaskFilter, this.taskFilter);
            this.filterChange.emit(this.changedTaskFilter);
        };
        EditTaskFilterCloudComponent.prototype.getTaskFilterById = function (appName, id) {
            return this.taskFilterCloudService
                .getTaskFilterById(appName, id)
                .pipe(operators.map(function (response) { return new TaskFilterCloudModel(response); }));
        };
        EditTaskFilterCloudComponent.prototype.createAndFilterProperties = function () {
            var result = _super.prototype.createAndFilterProperties.call(this);
            if (this.hasLastModifiedProperty()) {
                return __spread(result, this.createLastModifiedProperty());
            }
            return result;
        };
        EditTaskFilterCloudComponent.prototype.getDefaultFilterProperties = function () {
            return ['status', 'assignee', 'sort', 'order'];
        };
        EditTaskFilterCloudComponent.prototype.getDefaultSortProperties = function () {
            return ['id', 'name', 'createdDate', 'priority'];
        };
        EditTaskFilterCloudComponent.prototype.setLastModifiedToFilter = function (formValues) {
            if (formValues.lastModifiedTo && Date.parse(formValues.lastModifiedTo.toString())) {
                var lastModifiedToFilterValue = moment(formValues.lastModifiedTo);
                lastModifiedToFilterValue.set({
                    hour: 23,
                    minute: 59,
                    second: 59
                });
                formValues.lastModifiedTo = lastModifiedToFilterValue.toISOString(true);
            }
        };
        EditTaskFilterCloudComponent.prototype.updateFilter = function (filterToUpdate) {
            return this.taskFilterCloudService.updateFilter(filterToUpdate);
        };
        EditTaskFilterCloudComponent.prototype.deleteFilter = function (filterToDelete) {
            return this.taskFilterCloudService.deleteFilter(filterToDelete);
        };
        EditTaskFilterCloudComponent.prototype.addFilter = function (filterToAdd) {
            return this.taskFilterCloudService
                .addFilter(filterToAdd)
                .pipe(operators.takeUntil(this.onDestroy$));
        };
        EditTaskFilterCloudComponent.prototype.isDisabledForDefaultFilters = function (action) {
            return (this.taskFilterCloudService.isDefaultFilter(this.taskFilter.name) &&
                EditTaskFilterCloudComponent.ACTIONS_DISABLED_BY_DEFAULT.includes(action.actionType));
        };
        EditTaskFilterCloudComponent.prototype.restoreDefaultTaskFilters = function () {
            return this.taskFilterCloudService.getTaskListFilters(this.appName);
        };
        EditTaskFilterCloudComponent.prototype.createLastModifiedProperty = function () {
            return [
                {
                    label: 'ADF_CLOUD_EDIT_TASK_FILTER.LABEL.LAST_MODIFIED_FROM',
                    type: 'date',
                    key: 'lastModifiedFrom',
                    value: ''
                },
                {
                    label: 'ADF_CLOUD_EDIT_TASK_FILTER.LABEL.LAST_MODIFIED_TO',
                    type: 'date',
                    key: 'lastModifiedTo',
                    value: ''
                }
            ];
        };
        EditTaskFilterCloudComponent.prototype.getStatusOptions = function () {
            return [
                { value: '', label: 'ADF_CLOUD_TASK_FILTERS.STATUS.ALL' },
                { value: 'CREATED', label: 'ADF_CLOUD_TASK_FILTERS.STATUS.CREATED' },
                { value: 'ASSIGNED', label: 'ADF_CLOUD_TASK_FILTERS.STATUS.ASSIGNED' },
                { value: 'SUSPENDED', label: 'ADF_CLOUD_TASK_FILTERS.STATUS.SUSPENDED' },
                { value: 'CANCELLED', label: 'ADF_CLOUD_TASK_FILTERS.STATUS.CANCELLED' },
                { value: 'COMPLETED', label: 'ADF_CLOUD_TASK_FILTERS.STATUS.COMPLETED' }
            ];
        };
        EditTaskFilterCloudComponent.prototype.createTaskFilterProperties = function () {
            var statusOptions = this.getStatusOptions();
            var sortProperties = this.createSortProperties;
            return [
                {
                    label: 'ADF_CLOUD_EDIT_TASK_FILTER.LABEL.APP_NAME',
                    type: 'select',
                    key: 'appName',
                    value: this.taskFilter.appName || '',
                    options: this.applicationNames
                },
                {
                    label: 'ADF_CLOUD_EDIT_TASK_FILTER.LABEL.TASK_ID',
                    type: 'text',
                    key: 'taskId',
                    value: ''
                },
                {
                    label: 'ADF_CLOUD_EDIT_TASK_FILTER.LABEL.STATUS',
                    type: 'select',
                    key: 'status',
                    value: this.taskFilter.status || statusOptions[0].value,
                    options: statusOptions
                },
                {
                    label: 'ADF_CLOUD_EDIT_TASK_FILTER.LABEL.ASSIGNMENT',
                    type: 'text',
                    key: 'assignee',
                    value: this.taskFilter.assignee || ''
                },
                {
                    label: 'ADF_CLOUD_EDIT_TASK_FILTER.LABEL.PROCESS_DEF_NAME',
                    type: 'select',
                    key: 'processDefinitionName',
                    value: this.taskFilter.processDefinitionName || '',
                    options: this.processDefinitionNames
                },
                {
                    label: 'ADF_CLOUD_EDIT_TASK_FILTER.LABEL.PROCESS_INSTANCE_ID',
                    type: 'text',
                    key: 'processInstanceId',
                    value: this.taskFilter.processInstanceId || ''
                },
                {
                    label: 'ADF_CLOUD_EDIT_TASK_FILTER.LABEL.PROCESS_DEF_ID',
                    type: 'text',
                    key: 'processDefinitionId',
                    value: this.taskFilter.processDefinitionId || ''
                },
                {
                    label: 'ADF_CLOUD_EDIT_TASK_FILTER.LABEL.TASK_NAME',
                    type: 'text',
                    key: 'taskName',
                    value: this.taskFilter.taskName || ''
                },
                {
                    label: 'ADF_CLOUD_EDIT_TASK_FILTER.LABEL.PARENT_TASK_ID',
                    type: 'text',
                    key: 'parentTaskId',
                    value: this.taskFilter.parentTaskId || ''
                },
                {
                    label: 'ADF_CLOUD_EDIT_TASK_FILTER.LABEL.PRIORITY',
                    type: 'select',
                    key: 'priority',
                    value: this.taskFilter.priority || '',
                    options: this.taskCloudService.priorities
                },
                {
                    label: 'ADF_CLOUD_EDIT_TASK_FILTER.LABEL.OWNER',
                    type: 'text',
                    key: 'owner',
                    value: this.taskFilter.owner || ''
                },
                {
                    label: 'ADF_CLOUD_EDIT_TASK_FILTER.LABEL.CREATED_DATE',
                    type: 'date',
                    key: 'createdDate',
                    value: ''
                },
                {
                    label: 'ADF_CLOUD_EDIT_TASK_FILTER.LABEL.SORT',
                    type: 'select',
                    key: 'sort',
                    value: this.taskFilter.sort || sortProperties[0].value,
                    options: sortProperties
                },
                {
                    label: 'ADF_CLOUD_EDIT_TASK_FILTER.LABEL.DIRECTION',
                    type: 'select',
                    key: 'order',
                    value: this.taskFilter.order || this.sortDirections[0].value,
                    options: __spread(this.sortDirections)
                },
                {
                    label: 'ADF_CLOUD_EDIT_TASK_FILTER.LABEL.STAND_ALONE',
                    type: 'checkbox',
                    key: 'standalone',
                    value: this.taskFilter.standalone || false
                },
                {
                    label: 'ADF_CLOUD_EDIT_TASK_FILTER.LABEL.DUE_DATE',
                    type: 'date-range',
                    key: 'dueDateRange',
                    attributes: { dateType: 'dueDateType', from: '_dueDateFrom', to: '_dueDateTo' },
                    value: {
                        dueDateType: this.taskFilter.dueDateType || null,
                        _dueDateFrom: this.taskFilter.dueDateFrom || null,
                        _dueDateTo: this.taskFilter.dueDateTo || null
                    },
                    dateFilterOptions: [
                        exports.DateCloudFilterType.NO_DATE,
                        exports.DateCloudFilterType.TODAY,
                        exports.DateCloudFilterType.TOMORROW,
                        exports.DateCloudFilterType.NEXT_7_DAYS,
                        exports.DateCloudFilterType.RANGE
                    ]
                },
                {
                    label: 'ADF_CLOUD_EDIT_TASK_FILTER.LABEL.COMPLETED_DATE',
                    type: 'date-range',
                    key: 'completedDateRange',
                    attributes: { dateType: 'completedDateType', from: '_completedFrom', to: '_completedTo' },
                    value: {
                        completedDateType: this.taskFilter.completedDateType || null,
                        _completedFrom: this.taskFilter.completedFrom || null,
                        _completedTo: this.taskFilter.completedTo || null
                    }
                },
                {
                    label: 'ADF_CLOUD_EDIT_TASK_FILTER.LABEL.CREATED_DATE',
                    type: 'date-range',
                    key: 'createdDateRange',
                    attributes: { dateType: 'createdDateType', from: '_createdFrom', to: '_createdTo' },
                    value: {
                        createdDateType: this.taskFilter.createdDateType || null,
                        _createdFrom: this.taskFilter.createdFrom || null,
                        _createdTo: this.taskFilter.createdTo || null
                    }
                },
                {
                    label: 'ADF_CLOUD_EDIT_TASK_FILTER.LABEL.COMPLETED_BY',
                    type: 'people',
                    key: 'completedBy',
                    value: this.taskFilter.completedBy ? [this.taskFilter.completedBy] : null,
                    selectionMode: 'single'
                },
                {
                    label: 'ADF_CLOUD_EDIT_TASK_FILTER.LABEL.ASSIGNMENT',
                    type: 'assignment',
                    key: 'assignment',
                    attributes: { assignee: 'assignee', candidateGroups: 'candidateGroups' },
                    value: {
                        assignee: this.taskFilter.assignee || null,
                        candidateGroups: this.taskFilter.candidateGroups || []
                    }
                }
            ];
        };
        return EditTaskFilterCloudComponent;
    }(BaseEditTaskFilterCloudComponent));
    EditTaskFilterCloudComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'adf-cloud-edit-task-filter',
                    template: "<mat-accordion [hideToggle]=\"isLoading\">\n    <mat-expansion-panel (afterExpand)=\"onExpand()\" (closed)=\"onClose()\">\n        <mat-expansion-panel-header *ngIf=\"taskFilter\" id=\"adf-edit-task-filter-expansion-header\">\n            <ng-container *ngIf=\"!isLoading; else loadingTemplate\">\n                <mat-panel-title *ngIf=\"showTaskFilterName\" fxLayoutAlign=\"space-between center\" id=\"adf-edit-task-filter-title-id\"\n                    >{{taskFilter.name | translate}}</mat-panel-title>\n                <mat-panel-description fxLayoutAlign=\"space-between center\" id=\"adf-edit-task-filter-sub-title-id\">\n                    <span *ngIf=\"showTitle\">{{ 'ADF_CLOUD_EDIT_TASK_FILTER.TITLE' | translate}}</span>\n                    <div *ngIf=\"showFilterActions\" class=\"adf-cloud-edit-task-filter-actions\">\n                        <ng-container *ngIf=\"toggleFilterActions\">\n                            <button *ngFor=\"let filterAction of taskFilterActions\"\n                                    mat-icon-button\n                                    matTooltip=\"{{ filterAction.tooltip | translate}}\"\n                                    [attr.data-automation-id]=\"'adf-filter-action-' + filterAction.actionType\"\n                                    [disabled]=\"isDisabledAction(filterAction)\"\n                                    (click)=\"executeFilterActions(filterAction)\">\n                                <adf-icon [value]=\"filterAction.icon\"></adf-icon>\n                            </button>\n                        </ng-container>\n                    </div>\n                </mat-panel-description>\n            </ng-container>\n            <ng-template #loadingTemplate>\n                <div class=\"adf-cloud-edit-task-filter-loading-margin\">\n                    <mat-spinner [diameter]=\"30\"></mat-spinner>\n                </div>\n            </ng-template>\n        </mat-expansion-panel-header>\n        <ng-container *ngIf=\"!isLoading;\">\n            <form *ngIf=\"editTaskFilterForm\" [formGroup]=\"editTaskFilterForm\">\n                <div fxLayout=\"row wrap\" fxLayout.xs=\"column\" fxLayoutGap=\"10px\" fxLayoutAlign=\"start center\">\n                    <ng-container *ngFor=\"let taskFilterProperty of taskFilterProperties\">\n                        <mat-form-field fxFlex=\"23%\"\n                                        [floatLabel]=\"'auto'\"\n                                        *ngIf=\"taskFilterProperty.type === 'select'\"\n                                        [attr.data-automation-id]=\"taskFilterProperty.key\">\n                            <mat-select placeholder=\"{{taskFilterProperty.label | translate}}\"\n                                        [formControlName]=\"taskFilterProperty.key\"\n                                        [attr.data-automation-id]=\"'adf-cloud-edit-task-property-' + taskFilterProperty.key\">\n                                <mat-option *ngFor=\"let propertyOption of taskFilterProperty.options\"\n                                            [value]=\"propertyOption.value\"\n                                            [attr.data-automation-id]=\"'adf-cloud-edit-task-property-options-' + taskFilterProperty.key\">\n                                    {{ propertyOption.label | translate }}\n                                </mat-option>\n                            </mat-select>\n                        </mat-form-field>\n                        <mat-form-field fxFlex=\"23%\"\n                                        [floatLabel]=\"'auto'\"\n                                        *ngIf=\"taskFilterProperty.type === 'text'\"\n                                        [attr.data-automation-id]=\"taskFilterProperty.key\">\n                            <input matInput\n                                   [formControlName]=\"taskFilterProperty.key\"\n                                   type=\"text\"\n                                   placeholder=\"{{taskFilterProperty.label | translate}}\"\n                                   [attr.data-automation-id]=\"'adf-cloud-edit-task-property-' + taskFilterProperty.key\" />\n                        </mat-form-field>\n                        <mat-form-field fxFlex=\"23%\"\n                                        [floatLabel]=\"'auto'\"\n                                        *ngIf=\"taskFilterProperty.type === 'date'\"\n                                        [attr.data-automation-id]=\"taskFilterProperty.key\">\n                            <mat-label>{{taskFilterProperty.label | translate}}</mat-label>\n                            <input matInput\n                                   (keyup)=\"onDateChanged($any($event).srcElement.value, taskFilterProperty)\"\n                                   (dateChange)=\"onDateChanged($event.value, taskFilterProperty)\"\n                                   [matDatepicker]=\"dateController\"\n                                   placeholder=\"{{taskFilterProperty.label | translate}}\"\n                                   [attr.data-automation-id]=\"'adf-cloud-edit-task-property-' + taskFilterProperty.key\">\n                            <mat-datepicker-toggle matSuffix\n                                                   [for]=\"dateController\"\n                                                   [attr.data-automation-id]=\"'adf-cloud-edit-task-property-date-toggle-' + taskFilterProperty.key\">\n                            </mat-datepicker-toggle>\n                            <mat-datepicker #dateController\n                                            [attr.data-automation-id]=\"'adf-cloud-edit-task-property-date-picker-' + taskFilterProperty.key\">\n                            </mat-datepicker>\n                            <div class=\"adf-edit-task-filter-date-error-container\">\n                                <div *ngIf=\"hasError(taskFilterProperty)\">\n                                    <div class=\"adf-error-text\">{{'ADF_TASK_LIST.START_TASK.FORM.ERROR.DATE'|translate}}</div>\n                                    <mat-icon class=\"adf-error-icon\">warning</mat-icon>\n                                </div>\n                            </div>\n                        </mat-form-field>\n                        <div class=\"adf-edit-task-filter-checkbox\"\n                             *ngIf=\"taskFilterProperty.type === 'checkbox'\">\n                            <mat-checkbox color=\"primary\"\n                                          [formControlName]=\"taskFilterProperty.key\"\n                                          [attr.data-automation-id]=\"taskFilterProperty.key\"\n                            >{{taskFilterProperty.label | translate}}</mat-checkbox>\n                        </div>\n\n                        <adf-cloud-date-range-filter #dateRange\n                            *ngIf=\"taskFilterProperty.type === 'date-range'\"\n                            [processFilterProperty]=\"taskFilterProperty\"\n                            [options]=\"taskFilterProperty.dateFilterOptions\"\n                            (dateTypeChange)=\"onDateTypeChange($event, taskFilterProperty)\"\n                            (dateChanged)=\"onDateRangeFilterChanged($event, taskFilterProperty)\">\n                        </adf-cloud-date-range-filter>\n\n                        <div fxFlex=\"23%\" class=\"{{ 'adf-edit-task-filter-' + taskFilterProperty.key }}\" *ngIf=\"taskFilterProperty.type === 'people'\">\n                            <adf-cloud-people\n                                [preSelectUsers]=\"taskFilterProperty.value\"\n                                [title]=\"taskFilterProperty.label\"\n                                [validate]=\"true\"\n                                [appName]=\"appName\"\n                                [mode]=\"taskFilterProperty.selectionMode\"\n                                (changedUsers)=\"onChangedUser($event, taskFilterProperty)\">\n                            </adf-cloud-people>\n                        </div>\n\n                        <adf-cloud-task-assignment-filter fxFlex=\"23%\"\n                            *ngIf=\"taskFilterProperty.type === 'assignment'\"\n                            [taskFilterProperty]=\"taskFilterProperty\"\n                            (assignedChange)=\"onAssignedChange($event)\"\n                            (assignedGroupChange)=\"onAssignedGroupsChange($event)\">\n                        </adf-cloud-task-assignment-filter>\n                    </ng-container>\n                </div>\n            </form>\n        </ng-container>\n    </mat-expansion-panel>\n</mat-accordion>\n",
                    encapsulation: i0.ViewEncapsulation.None,
                    styles: [".adf-edit-task-filter-checkbox{flex:1 23%;font-size:16px;padding-top:10px;text-align:center}.adf-edit-task-filter-date-error-container{height:20px;margin-top:12px;position:absolute;width:100%}.adf-edit-task-filter-date-error-container>div{display:flex;flex-flow:row;justify-content:flex-start}.adf-edit-task-filter-date-error-container .adf-error-text{color:var(--theme-warn-color);font-size:10px;height:16px;line-height:1.33;padding-right:8px;width:auto}.adf-edit-task-filter-date-error-container .adf-error-icon{color:var(--theme-warn-color);font-size:16px}.adf-edit-task-filter-dateRange mat-grid-list{width:450px}.adf-cloud-edit-task-filter-loading-margin{margin-left:calc(50% - 50px);margin-right:calc(50% - 50px)}"]
                },] }
    ];
    EditTaskFilterCloudComponent.ctorParameters = function () { return [
        { type: forms.FormBuilder },
        { type: i2.MatDialog },
        { type: i1.TranslationService },
        { type: TaskFilterCloudService },
        { type: core.DateAdapter },
        { type: i1.UserPreferencesService },
        { type: AppsProcessCloudService },
        { type: TaskCloudService }
    ]; };

    var ServiceTaskFiltersCloudComponent = /** @class */ (function (_super) {
        __extends(ServiceTaskFiltersCloudComponent, _super);
        function ServiceTaskFiltersCloudComponent(serviceTaskFilterCloudService, translationService) {
            var _this = _super.call(this) || this;
            _this.serviceTaskFilterCloudService = serviceTaskFilterCloudService;
            _this.translationService = translationService;
            _this.filterSelected = new i0.EventEmitter();
            _this.filterClicked = new i0.EventEmitter();
            _this.filters = [];
            return _this;
        }
        ServiceTaskFiltersCloudComponent.prototype.ngOnInit = function () {
            this.getFilters(this.appName);
        };
        ServiceTaskFiltersCloudComponent.prototype.ngOnChanges = function (changes) {
            var appName = changes['appName'];
            var filter = changes['filterParam'];
            if (appName && appName.currentValue !== appName.previousValue) {
                this.getFilters(appName.currentValue);
            }
            else if (filter && filter.currentValue !== filter.previousValue) {
                this.selectFilterAndEmit(filter.currentValue);
            }
        };
        ServiceTaskFiltersCloudComponent.prototype.getFilters = function (appName) {
            var _this = this;
            this.filters$ = this.serviceTaskFilterCloudService.getTaskListFilters(appName);
            this.filters$.pipe(operators.takeUntil(this.onDestroy$)).subscribe(function (res) {
                _this.resetFilter();
                _this.filters = res || [];
                _this.selectFilterAndEmit(_this.filterParam);
                _this.success.emit(res);
            }, function (err) {
                _this.error.emit(err);
            });
        };
        ServiceTaskFiltersCloudComponent.prototype.selectFilter = function (paramFilter) {
            var _this = this;
            if (paramFilter) {
                this.currentFilter = this.filters.find(function (filter, index) { return paramFilter.index === index ||
                    paramFilter.key === filter.key ||
                    paramFilter.id === filter.id ||
                    (paramFilter.name &&
                        (paramFilter.name.toLocaleLowerCase() === _this.translationService.instant(filter.name).toLocaleLowerCase())); });
            }
        };
        ServiceTaskFiltersCloudComponent.prototype.selectFilterAndEmit = function (newParamFilter) {
            if (newParamFilter) {
                this.selectFilter(newParamFilter);
                if (this.currentFilter) {
                    this.filterSelected.emit(this.currentFilter);
                }
            }
            else {
                this.currentFilter = undefined;
            }
        };
        ServiceTaskFiltersCloudComponent.prototype.onFilterClick = function (filter) {
            if (filter) {
                this.selectFilter(filter);
                this.filterClicked.emit(this.currentFilter);
            }
            else {
                this.currentFilter = undefined;
            }
        };
        ServiceTaskFiltersCloudComponent.prototype.selectDefaultTaskFilter = function () {
            if (!this.isFilterListEmpty()) {
                this.currentFilter = this.filters[0];
            }
        };
        ServiceTaskFiltersCloudComponent.prototype.isFilterListEmpty = function () {
            return this.filters === undefined || (this.filters && this.filters.length === 0);
        };
        ServiceTaskFiltersCloudComponent.prototype.resetFilter = function () {
            this.filters = [];
            this.currentFilter = undefined;
        };
        return ServiceTaskFiltersCloudComponent;
    }(BaseTaskFiltersCloudComponent));
    ServiceTaskFiltersCloudComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'adf-cloud-service-task-filters',
                    template: "<ng-container *ngIf=\"filters$ | async as filterList; else loading\">\n    <div *ngFor=\"let filter of filterList\"\n         class=\"adf-task-filters__entry\">\n        <button (click)=\"onFilterClick(filter)\"\n                [attr.aria-label]=\"filter.name | translate\"\n                [id]=\"filter.id\"\n                [attr.data-automation-id]=\"filter.key + '_filter'\"\n                mat-button\n                [class.adf-active]=\"currentFilter === filter\"\n                class=\"adf-filter-action-button adf-full-width\"\n                fxLayout=\"row\"\n                fxLayoutAlign=\"space-between center\">\n            <adf-icon data-automation-id=\"adf-filter-icon\"\n                      *ngIf=\"showIcons\"\n                      [value]=\"filter.icon\"></adf-icon>\n            <span data-automation-id=\"adf-filter-label\"\n                  class=\"adf-filter-action-button__label\">{{ filter.name | translate }}</span>\n        </button>\n        <span *ngIf=\"counters$[filter.key]\"\n              [attr.data-automation-id]=\"filter.key + '_filter-counter'\"\n              class=\"adf-filter-action-button__counter\"\n              [class.adf-active]=wasFilterUpdated(filter.key)>\n            {{ counters$[filter.key] | async }}\n        </span>\n    </div>\n</ng-container>\n<ng-template #loading>\n    <ng-container>\n        <div class=\"adf-app-list-spinner\">\n            <mat-spinner></mat-spinner>\n        </div>\n    </ng-container>\n</ng-template>\n",
                    encapsulation: i0.ViewEncapsulation.None,
                    styles: [".adf-task-filters__entry{display:flex;font-size:14px!important;font-weight:700;height:24px;opacity:1;padding:12px 0!important;width:100%}.adf-task-filters__entry .adf-full-width{display:flex;width:100%}.adf-task-filters__entry .adf-filter-action-button{cursor:pointer;opacity:.54;padding:16px}.adf-task-filters__entry .adf-filter-action-button .adf-filter-action-button__label{margin:0 8px!important;padding-left:20px}.adf-task-filters__entry .adf-filter-action-button__counter{margin-left:10px;margin-top:6px;opacity:.54;padding:0 5px}.adf-task-filters__entry .adf-filter-action-button__counter.adf-active{background-color:var(--theme-accent-color);border-radius:15px;color:var(--theme-colors-mag-grey-light);font-size:smaller;margin-left:8px;margin-top:5px;padding:0 5px}.adf-task-filters__entry:hover{color:var(--theme-primary-color)}.adf-task-filters__entry:hover .adf-filter-action-button,.adf-task-filters__entry:hover .adf-filter-action-button__counter{opacity:1}.adf-task-filters__entry .adf-active{color:var(--theme-primary-color);opacity:1}"]
                },] }
    ];
    ServiceTaskFiltersCloudComponent.ctorParameters = function () { return [
        { type: ServiceTaskFilterCloudService },
        { type: i1.TranslationService }
    ]; };
    ServiceTaskFiltersCloudComponent.propDecorators = {
        filterSelected: [{ type: i0.Output }],
        filterClicked: [{ type: i0.Output }]
    };

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var TaskAssignmentFilterCloudComponent = /** @class */ (function () {
        function TaskAssignmentFilterCloudComponent(identityUserService) {
            this.identityUserService = identityUserService;
            this.assignedChange = new i0.EventEmitter();
            this.assignedGroupChange = new i0.EventEmitter();
            this.candidateGroups = [];
            this.groupForm = new forms.FormControl('');
            this.assignmentTypeList = {
                unassigned: exports.AssignmentType.UNASSIGNED,
                currentUser: exports.AssignmentType.CURRENT_USER,
                candidateGroups: exports.AssignmentType.CANDIDATE_GROUPS
            };
        }
        TaskAssignmentFilterCloudComponent.prototype.ngOnInit = function () {
            if (this.isFilterPropertyDefined()) {
                this.setDefaultAssignedGroups();
                this.setDefaultAssignmentType();
            }
        };
        TaskAssignmentFilterCloudComponent.prototype.isCandidateGroupsType = function () {
            return this.assignmentType === exports.AssignmentType.CANDIDATE_GROUPS;
        };
        TaskAssignmentFilterCloudComponent.prototype.onAssignmentTypeChange = function (type) {
            this.candidateGroups = [];
            if (type === exports.AssignmentType.CURRENT_USER) {
                this.assignedChange.emit(this.identityUserService.getCurrentUserInfo());
            }
            else if (type === exports.AssignmentType.UNASSIGNED) {
                this.assignedChange.emit(null);
            }
        };
        TaskAssignmentFilterCloudComponent.prototype.onChangedGroups = function (groups) {
            this.assignedGroupChange.emit(groups);
        };
        TaskAssignmentFilterCloudComponent.prototype.setDefaultAssignmentType = function () {
            var assignmentAttr = this.taskFilterProperty.attributes['assignee'];
            var assignee = this.taskFilterProperty.value[assignmentAttr];
            if (this.candidateGroups.length > 0) {
                this.assignmentType = exports.AssignmentType.CANDIDATE_GROUPS;
            }
            else if (assignee) {
                this.assignmentType = exports.AssignmentType.CURRENT_USER;
            }
            else {
                this.assignmentType = exports.AssignmentType.UNASSIGNED;
            }
        };
        TaskAssignmentFilterCloudComponent.prototype.setDefaultAssignedGroups = function () {
            var assignmentGroupsAttr = this.taskFilterProperty.attributes['candidateGroups'];
            this.candidateGroups = this.taskFilterProperty.value[assignmentGroupsAttr];
        };
        TaskAssignmentFilterCloudComponent.prototype.isFilterPropertyDefined = function () {
            return !!this.taskFilterProperty.attributes && !!this.taskFilterProperty.value;
        };
        return TaskAssignmentFilterCloudComponent;
    }());
    TaskAssignmentFilterCloudComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'adf-cloud-task-assignment-filter',
                    template: "<div class=\"adf-cloud-assignment-container\" fxLayout=\"row\">\n    <mat-form-field [floatLabel]=\"'auto'\">\n        <mat-select class=\"adf-task-assignment-filter\"\n                    placeholder=\"{{ 'ADF_CLOUD_TASK_ASSIGNEMNT_FILTER.ASSIGNMENT_TYPE' | translate }}\"\n                    [(ngModel)]=\"assignmentType\"\n                    (ngModelChange)=\"onAssignmentTypeChange(assignmentType)\">\n            <mat-option [value]=\"assignmentTypeList.currentUser\">{{ 'ADF_CLOUD_TASK_ASSIGNEMNT_FILTER.ASSIGNED_TO_ME' | translate }} </mat-option>\n            <mat-option [value]=\"assignmentTypeList.unassigned\">{{ 'ADF_CLOUD_TASK_ASSIGNEMNT_FILTER.UNASSIGNED' | translate }} </mat-option>\n            <mat-option [value]=\"assignmentTypeList.candidateGroups\">{{ 'ADF_CLOUD_TASK_ASSIGNEMNT_FILTER.LIST_OF_CANDIDATE_GROUPS' | translate }} </mat-option>\n        </mat-select>\n    </mat-form-field>\n\n    <adf-cloud-group class=\"adf-group-cloud-filter\" *ngIf=\"isCandidateGroupsType()\"\n        [mode]=\"'multiple'\"\n        [appName]=\"appName\"\n        [preSelectGroups]=\"candidateGroups\"\n        [searchGroupsControl]=\"groupForm\"\n        (changedGroups)=\"onChangedGroups($event)\"\n        [title]=\"'ADF_CLOUD_TASK_LIST.START_TASK.FORM.LABEL.CANDIDATE_GROUP'\"></adf-cloud-group>\n</div>\n",
                    styles: [".adf-cloud-assignment-container{align-items:center}.adf-cloud-assignment-container mat-form-field{width:100%}.adf-task-assignment-filter{margin-right:10px}.adf-group-cloud-filter{flex:1;margin-left:15px;width:100%}"]
                },] }
    ];
    TaskAssignmentFilterCloudComponent.ctorParameters = function () { return [
        { type: i1.IdentityUserService }
    ]; };
    TaskAssignmentFilterCloudComponent.propDecorators = {
        appName: [{ type: i0.Input }],
        taskFilterProperty: [{ type: i0.Input }],
        assignedChange: [{ type: i0.Output }],
        assignedGroupChange: [{ type: i0.Output }]
    };

    var GroupCloudComponent = /** @class */ (function () {
        function GroupCloudComponent(identityGroupService, logService) {
            this.identityGroupService = identityGroupService;
            this.logService = logService;
            this.mode = 'single';
            this.preSelectGroups = [];
            this.validate = false;
            this.readOnly = false;
            this.groupChipsCtrl = new forms.FormControl({ value: '', disabled: false });
            this.searchGroupsControl = new forms.FormControl({ value: '', disabled: false });
            this.roles = [];
            this.selectGroup = new i0.EventEmitter();
            this.removeGroup = new i0.EventEmitter();
            this.changedGroups = new i0.EventEmitter();
            this.warning = new i0.EventEmitter();
            this.searchGroups = [];
            this.onDestroy$ = new rxjs.Subject();
            this.selectedGroups = [];
            this.invalidGroups = [];
            this.searchGroups$ = new rxjs.BehaviorSubject(this.searchGroups);
            this._subscriptAnimationState = 'enter';
            this.searchedValue = '';
            this.validationLoading = false;
            this.searchLoading = false;
        }
        GroupCloudComponent.prototype.ngOnInit = function () {
            this.loadClientId();
            this.initSearch();
        };
        GroupCloudComponent.prototype.ngOnChanges = function (changes) {
            if (this.hasPreselectedGroupsChanged(changes) || this.hasModeChanged(changes) || this.isValidationChanged(changes)) {
                if (this.hasPreSelectGroups()) {
                    this.loadPreSelectGroups();
                }
                else if (this.hasPreselectedGroupsCleared(changes)) {
                    this.selectedGroups = [];
                    this.invalidGroups = [];
                }
                if (!this.isValidationEnabled()) {
                    this.invalidGroups = [];
                }
            }
            if (changes.appName && this.isAppNameChanged(changes.appName)) {
                this.loadClientId();
            }
        };
        GroupCloudComponent.prototype.isAppNameChanged = function (change) {
            return change
                && change.previousValue !== change.currentValue
                && this.appName
                && this.appName.length > 0;
        };
        GroupCloudComponent.prototype.loadClientId = function () {
            return __awaiter(this, void 0, void 0, function () {
                var _a;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            _a = this;
                            return [4 /*yield*/, this.identityGroupService.getClientIdByApplicationName(this.appName).toPromise()];
                        case 1:
                            _a.clientId = _b.sent();
                            if (this.clientId) {
                                this.searchGroupsControl.enable();
                            }
                            return [2 /*return*/];
                    }
                });
            });
        };
        GroupCloudComponent.prototype.initSearch = function () {
            var _this = this;
            this.searchGroupsControl.valueChanges.pipe(operators.filter(function (value) {
                _this.searchLoading = true;
                return typeof value === 'string';
            }), operators.tap(function (value) {
                if (value) {
                    _this.setTypingError();
                }
            }), operators.debounceTime(500), operators.distinctUntilChanged(), operators.tap(function (value) {
                if (value.trim()) {
                    _this.searchedValue = value;
                }
                else {
                    _this.searchGroupsControl.markAsPristine();
                    _this.searchGroupsControl.markAsUntouched();
                }
            }), operators.tap(function () { return _this.resetSearchGroups(); }), operators.switchMap(function (name) { return _this.identityGroupService.findGroupsByName({ name: name.trim() }); }), operators.mergeMap(function (groups) {
                _this.resetSearchGroups();
                _this.searchLoading = false;
                return groups;
            }), operators.filter(function (group) { return !_this.isGroupAlreadySelected(group); }), operators.mergeMap(function (group) {
                if (_this.appName) {
                    return _this.checkGroupHasAccess(group.id).pipe(operators.mergeMap(function (hasRole) { return hasRole ? rxjs.of(group) : rxjs.of(); }));
                }
                else if (_this.hasRoles()) {
                    return _this.filterGroupsByRoles(group);
                }
                else {
                    return rxjs.of(group);
                }
            }), operators.takeUntil(this.onDestroy$)).subscribe(function (searchedGroup) {
                _this.searchGroups.push(searchedGroup);
                _this.searchGroups$.next(_this.searchGroups);
            });
        };
        GroupCloudComponent.prototype.checkGroupHasAccess = function (groupId) {
            if (this.hasRoles()) {
                return this.identityGroupService.checkGroupHasAnyClientAppRole(groupId, this.clientId, this.roles);
            }
            else {
                return this.identityGroupService.checkGroupHasClientApp(groupId, this.clientId);
            }
        };
        GroupCloudComponent.prototype.isGroupAlreadySelected = function (group) {
            if (this.selectedGroups && this.selectedGroups.length > 0) {
                var result = this.selectedGroups.find(function (selectedGroup) {
                    return selectedGroup.name === group.name;
                });
                return !!result;
            }
            return false;
        };
        GroupCloudComponent.prototype.searchGroup = function (name) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.identityGroupService.findGroupsByName({ name: name }).toPromise()];
                        case 1: return [2 /*return*/, (_a.sent())[0]];
                    }
                });
            });
        };
        GroupCloudComponent.prototype.getPreselectedGroups = function () {
            if (this.isSingleMode()) {
                return [this.preSelectGroups[0]];
            }
            else {
                return this.removeDuplicatedGroups(this.preSelectGroups);
            }
        };
        GroupCloudComponent.prototype.validatePreselectGroups = function () {
            return __awaiter(this, void 0, void 0, function () {
                var _a, _b, group, validationResult, error_1, e_1_1;
                var e_1, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0:
                            this.invalidGroups = [];
                            _d.label = 1;
                        case 1:
                            _d.trys.push([1, 8, 9, 10]);
                            _a = __values(this.getPreselectedGroups()), _b = _a.next();
                            _d.label = 2;
                        case 2:
                            if (!!_b.done) return [3 /*break*/, 7];
                            group = _b.value;
                            _d.label = 3;
                        case 3:
                            _d.trys.push([3, 5, , 6]);
                            return [4 /*yield*/, this.searchGroup(group.name)];
                        case 4:
                            validationResult = _d.sent();
                            if (this.isPreselectedGroupInvalid(group, validationResult)) {
                                this.invalidGroups.push(group);
                            }
                            return [3 /*break*/, 6];
                        case 5:
                            error_1 = _d.sent();
                            this.invalidGroups.push(group);
                            this.logService.error(error_1);
                            return [3 /*break*/, 6];
                        case 6:
                            _b = _a.next();
                            return [3 /*break*/, 2];
                        case 7: return [3 /*break*/, 10];
                        case 8:
                            e_1_1 = _d.sent();
                            e_1 = { error: e_1_1 };
                            return [3 /*break*/, 10];
                        case 9:
                            try {
                                if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                            }
                            finally { if (e_1) throw e_1.error; }
                            return [7 /*endfinally*/];
                        case 10:
                            this.checkPreselectValidationErrors();
                            return [2 /*return*/];
                    }
                });
            });
        };
        GroupCloudComponent.prototype.checkPreselectValidationErrors = function () {
            this.invalidGroups = this.removeDuplicatedGroups(this.invalidGroups);
            if (this.invalidGroups.length > 0) {
                this.generateInvalidGroupsMessage();
            }
            this.warning.emit({
                message: 'INVALID_PRESELECTED_GROUPS',
                groups: this.invalidGroups
            });
        };
        GroupCloudComponent.prototype.generateInvalidGroupsMessage = function () {
            var _this = this;
            this.validateGroupsMessage = '';
            this.invalidGroups.forEach(function (invalidGroup, index) {
                if (index === _this.invalidGroups.length - 1) {
                    _this.validateGroupsMessage += invalidGroup.name + " ";
                }
                else {
                    _this.validateGroupsMessage += invalidGroup.name + ", ";
                }
            });
        };
        GroupCloudComponent.prototype.loadPreSelectGroups = function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.selectedGroups = [];
                            if (this.isSingleMode()) {
                                this.selectedGroups = [this.preSelectGroups[0]];
                            }
                            else {
                                this.selectedGroups = this.removeDuplicatedGroups(this.preSelectGroups);
                            }
                            this.groupChipsCtrl.setValue(this.selectedGroups[0].name);
                            if (!this.isValidationEnabled()) return [3 /*break*/, 2];
                            this.validationLoading = true;
                            return [4 /*yield*/, this.validatePreselectGroups()];
                        case 1:
                            _a.sent();
                            this.validationLoading = false;
                            _a.label = 2;
                        case 2: return [2 /*return*/];
                    }
                });
            });
        };
        GroupCloudComponent.prototype.filterGroupsByRoles = function (group) {
            return this.identityGroupService.checkGroupHasRole(group.id, this.roles).pipe(operators.map(function (hasRole) { return ({ hasRole: hasRole, group: group }); }), operators.filter(function (filteredGroup) { return filteredGroup.hasRole; }), operators.map(function (filteredGroup) { return filteredGroup.group; }));
        };
        GroupCloudComponent.prototype.onSelect = function (group) {
            if (group) {
                this.selectGroup.emit(group);
                if (this.isMultipleMode()) {
                    if (!this.isGroupAlreadySelected(group)) {
                        this.selectedGroups.push(group);
                    }
                }
                else {
                    this.invalidGroups = [];
                    this.selectedGroups = [group];
                }
                this.groupInput.nativeElement.value = '';
                this.searchGroupsControl.setValue('');
                this.groupChipsCtrlValue(this.selectedGroups[0].name);
                this.changedGroups.emit(this.selectedGroups);
                this.resetSearchGroups();
            }
        };
        GroupCloudComponent.prototype.onRemove = function (groupToRemove) {
            this.removeGroup.emit(groupToRemove);
            this.removeGroupFromSelected(groupToRemove);
            this.changedGroups.emit(this.selectedGroups);
            if (this.selectedGroups.length === 0) {
                this.groupChipsCtrlValue('');
            }
            else {
                this.groupChipsCtrlValue(this.selectedGroups[0].name);
            }
            this.searchGroupsControl.markAsDirty();
            this.searchGroupsControl.markAsTouched();
            if (this.isValidationEnabled()) {
                this.removeGroupFromValidation(groupToRemove);
                this.checkPreselectValidationErrors();
            }
        };
        GroupCloudComponent.prototype.groupChipsCtrlValue = function (value) {
            this.groupChipsCtrl.setValue(value);
            this.groupChipsCtrl.markAsDirty();
            this.groupChipsCtrl.markAsTouched();
        };
        GroupCloudComponent.prototype.removeGroupFromSelected = function (_a) {
            var id = _a.id, name = _a.name;
            var indexToRemove = this.selectedGroups.findIndex(function (group) {
                return group.id === id && group.name === name;
            });
            if (indexToRemove !== -1) {
                this.selectedGroups.splice(indexToRemove, 1);
            }
        };
        GroupCloudComponent.prototype.removeGroupFromValidation = function (_a) {
            var id = _a.id, name = _a.name;
            var indexToRemove = this.invalidGroups.findIndex(function (group) {
                return group.id === id && group.name === name;
            });
            if (indexToRemove !== -1) {
                this.invalidGroups.splice(indexToRemove, 1);
            }
        };
        GroupCloudComponent.prototype.resetSearchGroups = function () {
            this.searchGroups = [];
            this.searchGroups$.next(this.searchGroups);
        };
        GroupCloudComponent.prototype.isPreselectedGroupInvalid = function (preselectedGroup, validatedGroup) {
            if (validatedGroup && validatedGroup.name !== undefined) {
                return preselectedGroup.name !== validatedGroup.name;
            }
            else {
                return true;
            }
        };
        GroupCloudComponent.prototype.isSingleMode = function () {
            return this.mode === 'single';
        };
        GroupCloudComponent.prototype.isSingleSelectionReadonly = function () {
            return this.isSingleMode() && this.selectedGroups.length === 1 && this.selectedGroups[0].readonly === true;
        };
        GroupCloudComponent.prototype.hasPreselectError = function () {
            return this.invalidGroups && this.invalidGroups.length > 0;
        };
        GroupCloudComponent.prototype.isReadonly = function () {
            return this.readOnly || this.isSingleSelectionReadonly();
        };
        GroupCloudComponent.prototype.isMultipleMode = function () {
            return this.mode === 'multiple';
        };
        GroupCloudComponent.prototype.getDisplayName = function (group) {
            return group ? group.name : '';
        };
        GroupCloudComponent.prototype.removeDuplicatedGroups = function (groups) {
            return groups.filter(function (group, index, self) { return index === self.findIndex(function (auxGroup) {
                return group.id === auxGroup.id && group.name === auxGroup.name;
            }); });
        };
        GroupCloudComponent.prototype.hasPreSelectGroups = function () {
            return this.preSelectGroups && this.preSelectGroups.length > 0;
        };
        GroupCloudComponent.prototype.hasModeChanged = function (changes) {
            return changes
                && changes.mode
                && changes.mode.currentValue !== changes.mode.previousValue;
        };
        GroupCloudComponent.prototype.isValidationChanged = function (changes) {
            return changes
                && changes.validate
                && changes.validate.currentValue !== changes.validate.previousValue;
        };
        GroupCloudComponent.prototype.hasPreselectedGroupsChanged = function (changes) {
            return changes
                && changes.preSelectGroups
                && changes.preSelectGroups.currentValue !== changes.preSelectGroups.previousValue;
        };
        GroupCloudComponent.prototype.hasPreselectedGroupsCleared = function (changes) {
            return changes
                && changes.preSelectGroups
                && changes.preSelectGroups.currentValue.length === 0;
        };
        GroupCloudComponent.prototype.hasRoles = function () {
            return this.roles && this.roles.length > 0;
        };
        GroupCloudComponent.prototype.setTypingError = function () {
            this.searchGroupsControl.setErrors(Object.assign({ searchTypingError: true }, this.searchGroupsControl.errors));
        };
        GroupCloudComponent.prototype.hasError = function () {
            return !!this.searchGroupsControl.errors;
        };
        GroupCloudComponent.prototype.isValidationLoading = function () {
            return this.isValidationEnabled() && this.validationLoading;
        };
        GroupCloudComponent.prototype.setFocus = function (isFocused) {
            this.isFocused = isFocused;
        };
        GroupCloudComponent.prototype.isValidationEnabled = function () {
            return this.validate === true;
        };
        GroupCloudComponent.prototype.getValidationPattern = function () {
            return this.searchGroupsControl.errors.pattern.requiredPattern;
        };
        GroupCloudComponent.prototype.getValidationMaxLength = function () {
            return this.searchGroupsControl.errors.maxlength.requiredLength;
        };
        GroupCloudComponent.prototype.getValidationMinLength = function () {
            return this.searchGroupsControl.errors.minlength.requiredLength;
        };
        GroupCloudComponent.prototype.ngOnDestroy = function () {
            this.onDestroy$.next(true);
            this.onDestroy$.complete();
        };
        return GroupCloudComponent;
    }());
    GroupCloudComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'adf-cloud-group',
                    template: "<form>\n    <mat-form-field class=\"adf-cloud-group\">\n        <mat-label *ngIf=\"!isReadonly()\"\n            id=\"adf-group-cloud-title-id\">{{ (title || 'ADF_CLOUD_GROUPS.SEARCH-GROUP') | translate }}</mat-label>\n        <mat-chip-list #groupChipList [disabled]=\"isReadonly() || isValidationLoading()\" data-automation-id=\"adf-cloud-group-chip-list\">\n            <mat-chip\n                *ngFor=\"let group of selectedGroups\"\n                [removable]=\"!(group.readonly)\"\n                [attr.data-automation-id]=\"'adf-cloud-group-chip-' + group.name\"\n                (removed)=\"onRemove(group)\"\n                matTooltip=\"{{ (group.readonly ? 'ADF_CLOUD_GROUPS.MANDATORY' : '') | translate }}\">\n                {{group.name}}\n                <mat-icon\n                    *ngIf=\"!(group.readonly || readOnly)\"\n                    matChipRemove [attr.data-automation-id]=\"'adf-cloud-group-chip-remove-icon-' + group.name\">\n                    cancel\n                </mat-icon>\n            </mat-chip>\n            <input *ngIf=\"!isReadonly()\" matInput\n                   [formControl]=\"searchGroupsControl\"\n                   [matAutocomplete]=\"auto\"\n                   [matChipInputFor]=\"groupChipList\"\n                   (focus)=\"setFocus(true)\"\n                   (blur)=\"setFocus(false)\"\n                   class=\"adf-group-input\"\n                   data-automation-id=\"adf-cloud-group-search-input\" #groupInput>\n        </mat-chip-list>\n\n        <mat-autocomplete\n            autoActiveFirstOption\n            #auto=\"matAutocomplete\"\n            class=\"adf-cloud-group-list\"\n            (optionSelected)=\"onSelect($event.option.value)\"\n            [displayWith]=\"getDisplayName\"\n            data-automation-id=\"adf-cloud-group-autocomplete\">\n            <ng-container *ngIf=\"(searchGroups$ | async)?.length else noResults\">\n                <mat-option *ngFor=\"let group of searchGroups$ | async; let i = index\" [value]=\"group\"\n                            [attr.data-automation-id]=\"'adf-cloud-group-chip-' + group.name\">\n                    <div class=\"adf-cloud-group-row\" id=\"adf-group-{{i}}\" fxLayout=\"row\" fxLayoutAlign=\"start center\"\n                         data-automation-id=\"adf-cloud-group-row\"\n                         fxLayoutGap=\"20px\">\n                        <button class=\"adf-group-short-name\" mat-fab>{{group | groupNameInitial }}</button>\n                        <span>{{group.name}}</span>\n                    </div>\n                </mat-option>\n            </ng-container>\n            <ng-template #noResults>\n                <mat-option *ngIf=\"searchGroupsControl.hasError('searchTypingError') && !searchLoading\" disabled\n                            class=\"adf-cloud-group-option-not-active\"\n                            data-automation-id=\"adf-cloud-group-no-results\">\n                    <span> {{ 'ADF_CLOUD_GROUPS.ERROR.NOT_FOUND' | translate : { groupName: searchedValue } }}</span>\n                </mat-option>\n            </ng-template>\n        </mat-autocomplete>\n    </mat-form-field>\n    <mat-progress-bar\n        *ngIf=\"validationLoading\"\n        mode=\"indeterminate\">\n    </mat-progress-bar>\n\n    <mat-error *ngIf=\"hasPreselectError() &&  !isValidationLoading()\">\n        <mat-icon class=\"adf-start-task-cloud-error-icon\">warning</mat-icon>\n        {{ 'ADF_CLOUD_GROUPS.ERROR.NOT_FOUND' | translate : { groupName : validateGroupsMessage } }}</mat-error>\n    <mat-error *ngIf=\"searchGroupsControl.hasError('pattern')\">\n        <mat-icon class=\"adf-start-task-cloud-error-icon\">warning</mat-icon>\n        {{ 'ADF_CLOUD_PEOPLE_GROUPS.ERROR.INVALID_PATTERN' | translate: { pattern: getValidationPattern() } }}</mat-error>\n    <mat-error *ngIf=\"searchGroupsControl.hasError('maxlength')\">\n        <mat-icon class=\"adf-start-task-cloud-error-icon\">warning</mat-icon>\n        {{ 'ADF_CLOUD_PEOPLE_GROUPS.ERROR.INVALID_MAX_LENGTH' | translate: { requiredLength: getValidationMaxLength() } }}\n    </mat-error>\n    <mat-error *ngIf=\"searchGroupsControl.hasError('minlength')\">\n        <mat-icon class=\"adf-start-task-cloud-error-icon\">warning</mat-icon>\n        {{ 'ADF_CLOUD_PEOPLE_GROUPS.ERROR.INVALID_MIN_LENGTH' | translate: { requiredLength: getValidationMinLength() } }}</mat-error>\n    <mat-error *ngIf=\"searchGroupsControl.hasError('required') || groupChipsCtrl.hasError('required')\">\n        <mat-icon class=\"adf-start-task-cloud-error-icon\">warning</mat-icon>\n        {{ 'ADF_CLOUD_PEOPLE_GROUPS.ERROR.REQUIRED' | translate }} </mat-error>\n    <mat-error *ngIf=\"searchGroupsControl.hasError('searchTypingError') && !this.isFocused\" data-automation-id=\"invalid-groups-typing-error\">\n        <mat-icon class=\"adf-start-task-cloud-error-icon\">warning</mat-icon>\n        {{ 'ADF_CLOUD_GROUPS.ERROR.NOT_FOUND' | translate : { groupName : searchedValue } }}</mat-error>\n</form>\n",
                    animations: [
                        animations.trigger('transitionMessages', [
                            animations.state('enter', animations.style({ opacity: 1, transform: 'translateY(0%)' })),
                            animations.transition('void => enter', [
                                animations.style({ opacity: 0, transform: 'translateY(-100%)' }),
                                animations.animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)')
                            ])
                        ])
                    ],
                    changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    encapsulation: i0.ViewEncapsulation.None,
                    styles: [".adf-cloud-group-list{margin:5px 0;padding:10px 0}.adf-cloud-group{width:100%}.adf-cloud-group-option-not-active{background:inherit!important}.adf-cloud-group .mat-form-field{width:100%}.adf-cloud-group-error{height:20px;margin-top:-10px;position:absolute}.adf-cloud-group-error-message{color:var(--theme-warn-color);font-size:12px;height:16px;line-height:1.33;padding-right:8px;width:auto}.adf-cloud-group-error-icon{color:var(--theme-warn-color);font-size:17px}.mat-autocomplete-panel .mat-fab{background:var(--theme-primary-color);box-shadow:none!important;font-size:18px;font-weight:bolder;height:40px;width:40px}.mat-autocomplete-panel .mat-fab .mat-button-wrapper{display:inline!important}"]
                },] }
    ];
    GroupCloudComponent.ctorParameters = function () { return [
        { type: i1.IdentityGroupService },
        { type: i1.LogService }
    ]; };
    GroupCloudComponent.propDecorators = {
        appName: [{ type: i0.Input }],
        title: [{ type: i0.Input }],
        mode: [{ type: i0.Input }],
        preSelectGroups: [{ type: i0.Input }],
        validate: [{ type: i0.Input }],
        readOnly: [{ type: i0.Input }],
        groupChipsCtrl: [{ type: i0.Input }],
        searchGroupsControl: [{ type: i0.Input }],
        roles: [{ type: i0.Input }],
        selectGroup: [{ type: i0.Output }],
        removeGroup: [{ type: i0.Output }],
        changedGroups: [{ type: i0.Output }],
        warning: [{ type: i0.Output }],
        groupInput: [{ type: i0.ViewChild, args: ['groupInput',] }]
    };

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var InitialGroupNamePipe = /** @class */ (function () {
        function InitialGroupNamePipe() {
        }
        InitialGroupNamePipe.prototype.transform = function (group) {
            var result = '';
            if (group) {
                result = this.getInitialGroupName(group.name).toUpperCase();
            }
            return result;
        };
        InitialGroupNamePipe.prototype.getInitialGroupName = function (groupName) {
            groupName = (groupName ? groupName[0] : '');
            return groupName;
        };
        return InitialGroupNamePipe;
    }());
    InitialGroupNamePipe.decorators = [
        { type: i0.Pipe, args: [{
                    name: 'groupNameInitial'
                },] }
    ];

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var GroupCloudModule = /** @class */ (function () {
        function GroupCloudModule() {
        }
        return GroupCloudModule;
    }());
    GroupCloudModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [
                        common.CommonModule,
                        flexLayout.FlexLayoutModule,
                        MaterialModule,
                        forms.FormsModule,
                        forms.ReactiveFormsModule,
                        i1.CoreModule
                    ],
                    declarations: [GroupCloudComponent, InitialGroupNamePipe],
                    exports: [GroupCloudComponent, InitialGroupNamePipe]
                },] }
    ];

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var ɵ0$1 = i1.MOMENT_DATE_FORMATS;
    var TaskFiltersCloudModule = /** @class */ (function () {
        function TaskFiltersCloudModule() {
        }
        return TaskFiltersCloudModule;
    }());
    TaskFiltersCloudModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [
                        forms.FormsModule,
                        forms.ReactiveFormsModule,
                        http.HttpClientModule,
                        common.CommonModule,
                        flexLayout.FlexLayoutModule,
                        MaterialModule,
                        AppListCloudModule,
                        i1.CoreModule,
                        GroupCloudModule,
                        ProcessCommonModule,
                        PeopleCloudModule
                    ],
                    declarations: [
                        TaskFiltersCloudComponent,
                        ServiceTaskFiltersCloudComponent,
                        EditTaskFilterCloudComponent,
                        EditServiceTaskFilterCloudComponent,
                        TaskFilterDialogCloudComponent,
                        TaskAssignmentFilterCloudComponent
                    ],
                    exports: [
                        TaskFiltersCloudComponent,
                        ServiceTaskFiltersCloudComponent,
                        EditTaskFilterCloudComponent,
                        EditServiceTaskFilterCloudComponent
                    ],
                    providers: [
                        { provide: core.DateAdapter, useClass: i1.MomentDateAdapter },
                        { provide: core.MAT_DATE_FORMATS, useValue: ɵ0$1 }
                    ]
                },] }
    ];

    var ɵ0$2 = i1.MOMENT_DATE_FORMATS;
    var StartTaskCloudComponent = /** @class */ (function () {
        function StartTaskCloudComponent(taskService, dateAdapter, userPreferencesService, formBuilder, identityUserService, logService) {
            this.taskService = taskService;
            this.dateAdapter = dateAdapter;
            this.userPreferencesService = userPreferencesService;
            this.formBuilder = formBuilder;
            this.identityUserService = identityUserService;
            this.logService = logService;
            this.DATE_FORMAT = 'DD/MM/YYYY';
            this.appName = '';
            this.maxNameLength = StartTaskCloudComponent.MAX_NAME_LENGTH;
            this.name = '';
            this.success = new i0.EventEmitter();
            this.cancel = new i0.EventEmitter();
            this.error = new i0.EventEmitter();
            this.submitted = false;
            this.candidateGroupNames = [];
            this.assigneeForm = new forms.FormControl('');
            this.groupForm = new forms.FormControl('');
            this.onDestroy$ = new rxjs.Subject();
        }
        StartTaskCloudComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.userPreferencesService
                .select(i1.UserPreferenceValues.Locale)
                .pipe(operators.takeUntil(this.onDestroy$))
                .subscribe(function (locale) { return _this.dateAdapter.setLocale(locale); });
            this.loadCurrentUser();
            this.buildForm();
            this.loadDefaultPriorities();
        };
        StartTaskCloudComponent.prototype.ngOnDestroy = function () {
            this.onDestroy$.next(true);
            this.onDestroy$.complete();
        };
        StartTaskCloudComponent.prototype.buildForm = function () {
            this.taskForm = this.formBuilder.group({
                name: new forms.FormControl(this.name, [forms.Validators.required, forms.Validators.maxLength(this.getMaxNameLength()), this.whitespaceValidator]),
                priority: new forms.FormControl(''),
                description: new forms.FormControl('', [this.whitespaceValidator]),
                formKey: new forms.FormControl()
            });
        };
        StartTaskCloudComponent.prototype.getMaxNameLength = function () {
            return this.maxNameLength > StartTaskCloudComponent.MAX_NAME_LENGTH ?
                StartTaskCloudComponent.MAX_NAME_LENGTH : this.maxNameLength;
        };
        StartTaskCloudComponent.prototype.loadCurrentUser = function () {
            this.currentUser = this.identityUserService.getCurrentUserInfo();
            this.assigneeName = this.currentUser.username;
        };
        StartTaskCloudComponent.prototype.loadDefaultPriorities = function () {
            this.priorities = this.taskService.priorities;
        };
        StartTaskCloudComponent.prototype.saveTask = function () {
            this.submitted = true;
            var newTask = Object.assign(this.taskForm.value);
            newTask.dueDate = this.dueDate;
            newTask.assignee = this.assigneeName;
            newTask.formKey = this.formKey;
            newTask.candidateGroups = this.candidateGroupNames;
            this.createNewTask(new StartTaskCloudRequestModel(newTask));
        };
        StartTaskCloudComponent.prototype.createNewTask = function (newTask) {
            var _this = this;
            this.taskService.createNewTask(newTask, this.appName)
                .subscribe(function (res) {
                _this.submitted = false;
                _this.success.emit(res);
            }, function (err) {
                _this.submitted = false;
                _this.error.emit(err);
                _this.logService.error('An error occurred while creating new task');
            });
        };
        StartTaskCloudComponent.prototype.onCancel = function () {
            this.cancel.emit();
        };
        StartTaskCloudComponent.prototype.onDateChanged = function (newDateValue) {
            this.dateError = false;
            if (newDateValue) {
                var momentDate = moment(newDateValue, this.DATE_FORMAT, true);
                if (!momentDate.isValid()) {
                    this.dateError = true;
                }
            }
        };
        StartTaskCloudComponent.prototype.onAssigneeSelect = function (assignee) {
            this.assigneeName = assignee ? assignee.username : '';
        };
        StartTaskCloudComponent.prototype.onAssigneeRemove = function () {
            this.assigneeName = '';
        };
        StartTaskCloudComponent.prototype.onCandidateGroupSelect = function (candidateGroup) {
            if (candidateGroup.name) {
                this.candidateGroupNames.push(candidateGroup.name);
            }
        };
        StartTaskCloudComponent.prototype.onCandidateGroupRemove = function (candidateGroup) {
            if (candidateGroup.name) {
                this.candidateGroupNames = this.candidateGroupNames.filter(function (name) {
                    return name !== candidateGroup.name;
                });
            }
        };
        StartTaskCloudComponent.prototype.canStartTask = function () {
            return !(this.dateError ||
                !this.taskForm.valid ||
                this.submitted ||
                this.assignee.hasError() ||
                this.candidateGroups.hasError());
        };
        StartTaskCloudComponent.prototype.whitespaceValidator = function (control) {
            var isWhitespace = (control.value || '').trim().length === 0;
            var isValid = control.value.length === 0 || !isWhitespace;
            return isValid ? null : { 'whitespace': true };
        };
        Object.defineProperty(StartTaskCloudComponent.prototype, "nameController", {
            get: function () {
                return this.taskForm.get('name');
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(StartTaskCloudComponent.prototype, "priorityController", {
            get: function () {
                return this.taskForm.get('priority');
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(StartTaskCloudComponent.prototype, "assigneeFormControl", {
            get: function () {
                return this.assigneeForm;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(StartTaskCloudComponent.prototype, "candidateUserFormControl", {
            get: function () {
                return this.groupForm;
            },
            enumerable: false,
            configurable: true
        });
        StartTaskCloudComponent.prototype.onFormSelect = function (formKey) {
            this.formKey = formKey || '';
        };
        return StartTaskCloudComponent;
    }());
    StartTaskCloudComponent.MAX_NAME_LENGTH = 255;
    StartTaskCloudComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'adf-cloud-start-task',
                    template: "<mat-card>\n    <mat-card-header fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"10px\"\n                     class=\"adf-cloud-start-task-heading\">\n        <mat-card-title>{{'ADF_CLOUD_TASK_LIST.START_TASK.FORM.TITLE' | translate}}</mat-card-title>\n    </mat-card-header>\n    <form [formGroup]=\"taskForm\" fxLayout=\"column\" (ngSubmit)=\"saveTask()\">\n\n        <mat-card-content>\n            <div class=\"adf-task-name\">\n                <mat-form-field fxFlex>\n                    <mat-label>{{'ADF_CLOUD_TASK_LIST.START_TASK.FORM.LABEL.NAME' | translate }}</mat-label>\n                    <input\n                        matInput\n                        id=\"name_id\"\n                        class=\"form-control\"\n                        formControlName=\"name\">\n                    <mat-error *ngIf=\"nameController.hasError('required')\">\n                        {{ 'ADF_CLOUD_START_TASK.ERROR.REQUIRED' | translate }}\n                    </mat-error>\n                    <mat-error *ngIf=\"nameController.hasError('maxlength')\">\n                        {{ 'ADF_CLOUD_START_TASK.ERROR.MAXIMUM_LENGTH' | translate : {characters: maxNameLength} }}\n                    </mat-error>\n                </mat-form-field>\n            </div>\n            <div fxLayout=\"row\" fxLayout.lt-md=\"column\" fxLayoutGap=\"20px\" fxLayoutGap.lt-md=\"0px\">\n                <mat-form-field fxFlex>\n                    <mat-label>{{'ADF_CLOUD_TASK_LIST.START_TASK.FORM.LABEL.DESCRIPTION' | translate}}</mat-label>\n                    <textarea\n                        matInput\n                        class=\"form-control\"\n                        id=\"description_id\"\n                        formControlName=\"description\">\n                    </textarea>\n                </mat-form-field>\n\n                <mat-form-field fxFlex class=\"adf-cloud-priority-container\">\n                    <mat-label>{{ 'ADF_CLOUD_TASK_LIST.START_TASK.FORM.LABEL.PRIORITY' | translate }}</mat-label>\n                    <mat-select formControlName=\"priority\">\n                        <mat-option *ngFor=\"let priorityOption of priorities\" [value]=\"priorityOption.value\">{{ priorityOption.label | translate }}</mat-option>\n                    </mat-select>\n                </mat-form-field>\n            </div>\n            <div fxLayout=\"row\" fxLayout.lt-md=\"column\" fxLayoutGap=\"20px\" fxLayoutGap.lt-md=\"0px\">\n                <mat-form-field fxFlex>\n                    <input matInput\n                           [matDatepicker]=\"taskDatePicker\"\n                           (keydown)=\"true\"\n                           (focusout)=\"onDateChanged($any($event).srcElement.value)\"\n                           placeholder=\"{{'ADF_CLOUD_TASK_LIST.START_TASK.FORM.LABEL.DATE'|translate}}\"\n                           [(ngModel)]=\"dueDate\"\n                           [ngModelOptions]=\"{standalone: true}\"\n                           id=\"date_id\">\n                    <mat-datepicker-toggle matSuffix [for]=\"taskDatePicker\"></mat-datepicker-toggle>\n                    <mat-datepicker #taskDatePicker\n                                    [touchUi]=\"true\"\n                                    (dateChanged)=\"onDateChanged($event)\">\n                    </mat-datepicker>\n                    <div class=\"adf-cloud-date-error-container\">\n                        <div *ngIf=\"dateError\">\n                            <div class=\"adf-error-text\">{{'ADF_CLOUD_START_TASK.ERROR.DATE' | translate}}</div>\n                            <mat-icon class=\"adf-error-icon\">warning</mat-icon>\n                        </div>\n                    </div>\n                </mat-form-field>\n                <adf-cloud-people fxFlex #peopleInput *ngIf=\"currentUser\"\n                                  [appName]=\"appName\"\n                                  [preSelectUsers]=\"[currentUser]\"\n                                  [searchUserCtrl]=\"assigneeFormControl\"\n                                  (selectUser)=\"onAssigneeSelect($event)\"\n                                  [title]=\"'ADF_CLOUD_TASK_LIST.START_TASK.FORM.LABEL.ASSIGNEE'\"\n                                  (removeUser)=\"onAssigneeRemove()\"></adf-cloud-people>\n            </div>\n\n            <div fxLayout=\"row\" fxLayout.lt-md=\"column\" fxLayoutGap=\"20px\" fxLayoutGap.lt-md=\"0px\">\n                <adf-cloud-group fxFlex #groupInput *ngIf=\"currentUser\"\n                                 [mode]=\"'multiple'\"\n                                 [title]=\"'ADF_CLOUD_TASK_LIST.START_TASK.FORM.LABEL.CANDIDATE_GROUP'\"\n                                 [appName]=\"appName\"\n                                 [searchGroupsControl]=\"candidateUserFormControl\"\n                                 (selectGroup)=\"onCandidateGroupSelect($event)\"\n                                 (removeGroup)=\"onCandidateGroupRemove($event)\">\n                </adf-cloud-group>\n                <adf-cloud-form-definition-selector *ngIf=\"appName\"\n                                                    fxFlex\n                                                    [appName]=\"appName\"\n                                                    (selectForm)=\"onFormSelect($event)\">\n                </adf-cloud-form-definition-selector>\n            </div>\n        </mat-card-content>\n\n        <mat-card-actions>\n            <div class=\"adf-cloud-start-task-footer\" fxLayout=\"row\" fxLayoutAlign=\"end end\">\n                <button\n                    mat-button\n                    type=\"button\"\n                    (click)=\"onCancel()\"\n                    id=\"button-cancel\">\n                    {{'ADF_CLOUD_TASK_LIST.START_TASK.FORM.ACTION.CANCEL'|translate}}\n                </button>\n                <button\n                    color=\"primary\"\n                    type=\"submit\"\n                    [disabled]=\"!canStartTask()\"\n                    mat-button\n                    id=\"button-start\">\n                    {{'ADF_CLOUD_TASK_LIST.START_TASK.FORM.ACTION.START'|translate}}\n                </button>\n            </div>\n        </mat-card-actions>\n    </form>\n</mat-card>\n",
                    providers: [
                        { provide: core.DateAdapter, useClass: i1.MomentDateAdapter },
                        { provide: core.MAT_DATE_FORMATS, useValue: ɵ0$2 }
                    ],
                    encapsulation: i0.ViewEncapsulation.None,
                    styles: [".adf-cloud-start-task-heading{border-bottom:1px solid var(--theme-fg-divider);margin-bottom:10px}.adf-cloud-start-task-heading .mat-card-title{font-size:18px;font-weight:700}.adf-cloud-priority-container{padding-top:1.1em}.adf-cloud-date-error-container{height:20px;margin-top:12px;position:absolute;width:100%}.adf-cloud-date-error-container>div{display:flex;flex-flow:row;justify-content:flex-start}.adf-cloud-date-error-container .adf-error-text{color:var(--theme-warn-color);font-size:12px;height:16px;line-height:1.33;padding-right:8px;width:auto}.adf-cloud-date-error-container .adf-error-icon{color:var(--theme-warn-color);font-size:17px}.adf-cloud-start-task-footer{border-top:1px solid #eee;font-size:18px;padding:4px}adf-cloud-start-task .adf-cloud-start-task-footer .mat-button{text-transform:uppercase!important}"]
                },] }
    ];
    StartTaskCloudComponent.ctorParameters = function () { return [
        { type: TaskCloudService },
        { type: core.DateAdapter },
        { type: i1.UserPreferencesService },
        { type: forms.FormBuilder },
        { type: i1.IdentityUserService },
        { type: i1.LogService }
    ]; };
    StartTaskCloudComponent.propDecorators = {
        appName: [{ type: i0.Input }],
        maxNameLength: [{ type: i0.Input }],
        name: [{ type: i0.Input }],
        success: [{ type: i0.Output }],
        cancel: [{ type: i0.Output }],
        error: [{ type: i0.Output }],
        assignee: [{ type: i0.ViewChild, args: ['peopleInput',] }],
        candidateGroups: [{ type: i0.ViewChild, args: ['groupInput',] }]
    };

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var TaskVariableCloud = /** @class */ (function () {
        function TaskVariableCloud(obj) {
            this.id = obj.name || null;
            this.name = obj.name || null;
            this.value = this.hasValue(obj) ? obj.value : null;
            this.type = obj.type || null;
        }
        TaskVariableCloud.prototype.hasValue = function (obj) {
            return typeof obj.value !== undefined && obj.value !== null;
        };
        return TaskVariableCloud;
    }());

    var FormCloudService = /** @class */ (function (_super) {
        __extends(FormCloudService, _super);
        function FormCloudService(apiService, appConfigService) {
            return _super.call(this, apiService, appConfigService) || this;
        }
        Object.defineProperty(FormCloudService.prototype, "uploadApi", {
            get: function () {
                var _a;
                this._uploadApi = (_a = this._uploadApi) !== null && _a !== void 0 ? _a : new jsApi.UploadApi(this.apiService.getInstance());
                return this._uploadApi;
            },
            enumerable: false,
            configurable: true
        });
        FormCloudService.prototype.getTaskForm = function (appName, taskId, version) {
            var _this = this;
            return this.getTask(appName, taskId).pipe(operators.switchMap(function (task) {
                return _this.getForm(appName, task.formKey, version).pipe(operators.map(function (form) {
                    var flattenForm = Object.assign(Object.assign(Object.assign({}, form.formRepresentation), form.formRepresentation.formDefinition), { taskId: task.id, taskName: task.name, processDefinitionId: task.processDefinitionId, processInstanceId: task.processInstanceId });
                    delete flattenForm.formDefinition;
                    return flattenForm;
                }));
            }));
        };
        FormCloudService.prototype.saveTaskForm = function (appName, taskId, processInstanceId, formId, values) {
            var apiUrl = this.getBasePath(appName) + "/form/v1/forms/" + formId + "/save";
            var saveFormRepresentation = {
                values: values,
                taskId: taskId,
                processInstanceId: processInstanceId
            };
            return this.post(apiUrl, saveFormRepresentation).pipe(operators.map(function (res) { return res.entry; }));
        };
        FormCloudService.prototype.createTemporaryRawRelatedContent = function (file, nodeId, contentHost) {
            var changedConfig = this.apiService.lastConfig;
            changedConfig.provider = 'ALL';
            changedConfig.hostEcm = contentHost.replace('/alfresco', '');
            this.apiService.getInstance().setConfig(changedConfig);
            return rxjs.from(this.uploadApi.uploadFile(file, '', nodeId, '', { overwrite: true })).pipe(operators.map(function (res) { return res.entry; }));
        };
        FormCloudService.prototype.completeTaskForm = function (appName, taskId, processInstanceId, formId, formValues, outcome, version) {
            var apiUrl = this.getBasePath(appName) + "/form/v1/forms/" + formId + "/submit/versions/" + version;
            var completeFormRepresentation = {
                values: formValues,
                taskId: taskId,
                processInstanceId: processInstanceId
            };
            if (outcome) {
                completeFormRepresentation.outcome = outcome;
            }
            return this.post(apiUrl, completeFormRepresentation).pipe(operators.map(function (res) { return res.entry; }));
        };
        FormCloudService.prototype.getTask = function (appName, taskId) {
            var apiUrl = this.getBasePath(appName) + "/query/v1/tasks/" + taskId;
            return this.get(apiUrl).pipe(operators.map(function (res) { return res.entry; }));
        };
        FormCloudService.prototype.getTaskVariables = function (appName, taskId) {
            var apiUrl = this.getBasePath(appName) + "/query/v1/tasks/" + taskId + "/variables";
            return this.get(apiUrl).pipe(operators.map(function (res) {
                return res.list.entries.map(function (variable) { return new TaskVariableCloud(variable.entry); });
            }));
        };
        FormCloudService.prototype.getForm = function (appName, formKey, version) {
            var url = this.getBasePath(appName) + "/form/v1/forms/" + formKey;
            if (version) {
                url += "/versions/" + version;
            }
            return this.get(url);
        };
        FormCloudService.prototype.getRestWidgetData = function (formName, widgetId, body) {
            if (body === void 0) { body = {}; }
            var _a;
            var appName = (_a = this.appConfigService.get('alfresco-deployed-apps')[0]) === null || _a === void 0 ? void 0 : _a.name;
            var apiUrl = this.getBasePath(appName) + "/form/v1/forms/" + formName + "/values/" + widgetId;
            return this.post(apiUrl, body);
        };
        FormCloudService.prototype.parseForm = function (json, data, readOnly) {
            if (readOnly === void 0) { readOnly = false; }
            if (json) {
                var flattenForm = Object.assign(Object.assign({}, json.formRepresentation), json.formRepresentation.formDefinition);
                delete flattenForm.formDefinition;
                var formValues_1 = {};
                (data || []).forEach(function (variable) {
                    formValues_1[variable.name] = variable.value;
                });
                var form = new i1.FormModel(flattenForm, formValues_1, readOnly);
                if (!json.fields) {
                    form.outcomes = [
                        new i1.FormOutcomeModel(form, {
                            id: '$save',
                            name: i1.FormOutcomeModel.SAVE_ACTION,
                            isSystem: true
                        })
                    ];
                }
                return form;
            }
            return null;
        };
        return FormCloudService;
    }(BaseCloudService));
    FormCloudService.ɵprov = i0.ɵɵdefineInjectable({ factory: function FormCloudService_Factory() { return new FormCloudService(i0.ɵɵinject(i1.AlfrescoApiService), i0.ɵɵinject(i1.AppConfigService)); }, token: FormCloudService, providedIn: "root" });
    FormCloudService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    FormCloudService.ctorParameters = function () { return [
        { type: i1.AlfrescoApiService },
        { type: i1.AppConfigService }
    ]; };

    var FormCloudComponent = /** @class */ (function (_super) {
        __extends(FormCloudComponent, _super);
        function FormCloudComponent(formCloudService, formService, visibilityService) {
            var _this = _super.call(this) || this;
            _this.formCloudService = formCloudService;
            _this.formService = formService;
            _this.visibilityService = visibilityService;
            _this.appName = '';
            _this.fieldValidators = __spread(i1.FORM_FIELD_VALIDATORS);
            _this.formSaved = new i0.EventEmitter();
            _this.formCompleted = new i0.EventEmitter();
            _this.formLoaded = new i0.EventEmitter();
            _this.formDataRefreshed = new i0.EventEmitter();
            _this.formContentClicked = new i0.EventEmitter();
            _this.subscriptions = [];
            _this.onDestroy$ = new rxjs.Subject();
            _this.formService.formContentClicked
                .pipe(operators.takeUntil(_this.onDestroy$))
                .subscribe(function (content) {
                if (content instanceof i1.UploadWidgetContentLinkModel) {
                    _this.form.setNodeIdValueForViewersLinkedToUploadWidget(content);
                    _this.onFormDataRefreshed(_this.form);
                }
                else {
                    _this.formContentClicked.emit(content);
                }
            });
            _this.formService.updateFormValuesRequested
                .pipe(operators.takeUntil(_this.onDestroy$))
                .subscribe(function (valuesToSetIfNotPresent) {
                _this.form.addValuesNotPresent(valuesToSetIfNotPresent);
                _this.onFormDataRefreshed(_this.form);
            });
            return _this;
        }
        FormCloudComponent.prototype.onKeyDown = function (event) {
            event.cancelBubble = true;
        };
        FormCloudComponent.prototype.ngOnChanges = function (changes) {
            var appName = changes['appName'];
            if (appName && appName.currentValue) {
                if (this.taskId) {
                    this.getFormByTaskId(appName.currentValue, this.taskId, this.appVersion);
                }
                else if (this.formId) {
                    this.getFormById(appName.currentValue, this.formId, this.appVersion);
                }
                return;
            }
            var formId = changes['formId'];
            if (formId && formId.currentValue && this.appName) {
                this.getFormById(this.appName, formId.currentValue, this.appVersion);
                return;
            }
            var taskId = changes['taskId'];
            if (taskId && taskId.currentValue && this.appName) {
                this.getFormByTaskId(this.appName, taskId.currentValue, this.appVersion);
                return;
            }
            var data = changes['data'];
            if (data && data.currentValue) {
                this.refreshFormData();
                return;
            }
        };
        FormCloudComponent.prototype.onRefreshClicked = function () {
            this.loadForm();
        };
        FormCloudComponent.prototype.loadForm = function () {
            if (this.appName && this.taskId) {
                this.getFormByTaskId(this.appName, this.taskId, this.appVersion);
            }
            else if (this.appName && this.formId) {
                this.getFormById(this.appName, this.formId, this.appVersion);
            }
        };
        FormCloudComponent.prototype.findProcessVariablesByTaskId = function (appName, taskId) {
            var _this = this;
            return this.formCloudService.getTask(appName, taskId).pipe(operators.switchMap(function (task) {
                if (_this.isAProcessTask(task)) {
                    return _this.formCloudService.getTaskVariables(appName, taskId);
                }
                else {
                    return rxjs.of([]);
                }
            }));
        };
        FormCloudComponent.prototype.isAProcessTask = function (taskRepresentation) {
            return taskRepresentation.processDefinitionId && taskRepresentation.processDefinitionDeploymentId !== 'null';
        };
        FormCloudComponent.prototype.getFormByTaskId = function (appName, taskId, version) {
            var _this = this;
            return new Promise(function (resolve) {
                rxjs.forkJoin(_this.formCloudService.getTaskForm(appName, taskId, version), _this.formCloudService.getTaskVariables(appName, taskId))
                    .pipe(operators.takeUntil(_this.onDestroy$))
                    .subscribe(function (data) {
                    _this.formCloudRepresentationJSON = data[0];
                    _this.formCloudRepresentationJSON.processVariables = data[1];
                    _this.data = data[1];
                    var parsedForm = _this.parseForm(_this.formCloudRepresentationJSON);
                    _this.visibilityService.refreshVisibility(parsedForm, _this.data);
                    parsedForm.validateForm();
                    _this.form = parsedForm;
                    _this.form.nodeId = '-my-';
                    _this.onFormLoaded(_this.form);
                    resolve(_this.form);
                }, function (error) {
                    _this.handleError(error);
                    resolve(null);
                });
            });
        };
        FormCloudComponent.prototype.getFormById = function (appName, formId, appVersion) {
            var _this = this;
            this.formCloudService
                .getForm(appName, formId, appVersion)
                .pipe(operators.map(function (form) {
                var flattenForm = Object.assign(Object.assign({}, form.formRepresentation), form.formRepresentation.formDefinition);
                delete flattenForm.formDefinition;
                return flattenForm;
            }), operators.takeUntil(this.onDestroy$))
                .subscribe(function (form) {
                _this.formCloudRepresentationJSON = form;
                var parsedForm = _this.parseForm(form);
                _this.visibilityService.refreshVisibility(parsedForm);
                parsedForm.validateForm();
                _this.form = parsedForm;
                _this.form.nodeId = '-my-';
                _this.onFormLoaded(_this.form);
            }, function (error) {
                _this.handleError(error);
            });
        };
        FormCloudComponent.prototype.saveTaskForm = function () {
            var _this = this;
            if (this.form && this.appName && this.taskId) {
                this.formCloudService
                    .saveTaskForm(this.appName, this.taskId, this.processInstanceId, "" + this.form.id, this.form.values)
                    .pipe(operators.takeUntil(this.onDestroy$))
                    .subscribe(function () {
                    _this.onTaskSaved(_this.form);
                }, function (error) { return _this.onTaskSavedError(error); });
            }
        };
        FormCloudComponent.prototype.completeTaskForm = function (outcome) {
            var _this = this;
            if (this.form && this.appName && this.taskId) {
                this.formCloudService
                    .completeTaskForm(this.appName, this.taskId, this.processInstanceId, "" + this.form.id, this.form.values, outcome, this.appVersion)
                    .pipe(operators.takeUntil(this.onDestroy$))
                    .subscribe(function () {
                    _this.onTaskCompleted(_this.form);
                }, function (error) { return _this.onTaskCompletedError(error); });
            }
        };
        FormCloudComponent.prototype.parseForm = function (formCloudRepresentationJSON) {
            if (formCloudRepresentationJSON) {
                var formValues_1 = {};
                (this.data || []).forEach(function (variable) {
                    formValues_1[variable.name] = variable.value;
                });
                var form = new i1.FormModel(formCloudRepresentationJSON, formValues_1, this.readOnly);
                if (!form) {
                    form.outcomes = this.getFormDefinitionOutcomes(form);
                }
                if (this.fieldValidators && this.fieldValidators.length > 0) {
                    form.fieldValidators = this.fieldValidators;
                }
                return form;
            }
            return null;
        };
        FormCloudComponent.prototype.getFormDefinitionOutcomes = function (form) {
            return [
                new i1.FormOutcomeModel(form, { id: '$save', name: i1.FormOutcomeModel.SAVE_ACTION, isSystem: true })
            ];
        };
        FormCloudComponent.prototype.checkVisibility = function (field) {
            if (field && field.form) {
                this.visibilityService.refreshVisibility(field.form);
            }
        };
        FormCloudComponent.prototype.refreshFormData = function () {
            this.form = this.parseForm(this.formCloudRepresentationJSON);
            this.onFormLoaded(this.form);
            this.onFormDataRefreshed(this.form);
        };
        FormCloudComponent.prototype.onFormLoaded = function (form) {
            this.formLoaded.emit(form);
        };
        FormCloudComponent.prototype.onFormDataRefreshed = function (form) {
            this.formDataRefreshed.emit(form);
        };
        FormCloudComponent.prototype.onTaskSaved = function (form) {
            this.formSaved.emit(form);
        };
        FormCloudComponent.prototype.onTaskSavedError = function (error) {
            this.handleError(error);
        };
        FormCloudComponent.prototype.onTaskCompleted = function (form) {
            this.formCompleted.emit(form);
        };
        FormCloudComponent.prototype.onTaskCompletedError = function (error) {
            this.handleError(error);
        };
        FormCloudComponent.prototype.onExecuteOutcome = function (outcome) {
            var args = new i1.FormOutcomeEvent(outcome);
            if (args.defaultPrevented) {
                return false;
            }
            this.executeOutcome.emit(args);
            return !args.defaultPrevented;
        };
        FormCloudComponent.prototype.storeFormAsMetadata = function () {
        };
        FormCloudComponent.prototype.ngOnDestroy = function () {
            this.onDestroy$.next(true);
            this.onDestroy$.complete();
        };
        return FormCloudComponent;
    }(i1.FormBaseComponent));
    FormCloudComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'adf-cloud-form',
                    template: "<div *ngIf=\"!hasForm()\">\n    <ng-content select=\"[empty-form]\">\n    </ng-content>\n</div>\n\n<div *ngIf=\"hasForm()\" class=\"adf-form-container\">\n    <mat-card>\n        <mat-card-header *ngIf=\"showTitle || showRefreshButton || showValidationIcon\">\n            <mat-card-title>\n                <h4>\n                    <div *ngIf=\"showValidationIcon\" class=\"adf-form-validation-button\">\n                        <i id=\"adf-valid-form-icon\" class=\"material-icons\"\n                            *ngIf=\"form.isValid; else no_valid_form\">check_circle</i>\n                        <ng-template #no_valid_form>\n                            <i id=\"adf-invalid-form-icon\" class=\"material-icons adf-invalid-color\">error</i>\n                        </ng-template>\n                    </div>\n                    <div *ngIf=\"showRefreshButton\" class=\"adf-form-reload-button\">\n                        <button mat-icon-button (click)=\"onRefreshClicked()\">\n                            <mat-icon>refresh</mat-icon>\n                        </button>\n                    </div>\n                    <span *ngIf=\"isTitleEnabled()\" class=\"adf-form-title\" [matTooltip]=\"form.taskName\">\n                        {{form.taskName}}\n                        <ng-container *ngIf=\"!form.taskName\">\n                            {{'FORM.FORM_RENDERER.NAMELESS_TASK' | translate}}\n                        </ng-container>\n                    </span>\n\n                </h4>\n            </mat-card-title>\n        </mat-card-header>\n        <mat-card-content>\n            <adf-form-renderer [formDefinition]=\"form\">\n            </adf-form-renderer>\n        </mat-card-content>\n        <mat-card-actions *ngIf=\"form.hasOutcomes()\" class=\"adf-form-mat-card-actions\">\n            <ng-content select=\"adf-cloud-form-custom-outcomes\"></ng-content>\n            <ng-container *ngFor=\"let outcome of form.outcomes\">\n                <button *ngIf=\"outcome.isVisible\" [id]=\"'adf-form-'+ outcome.name  | formatSpace\" [color]=\"getColorForOutcome(outcome.name)\"\n                    mat-button [disabled]=\"!isOutcomeButtonEnabled(outcome)\"\n                    [class.adf-form-hide-button]=\"!isOutcomeButtonVisible(outcome, form.readOnly)\"\n                    (click)=\"onOutcomeClicked(outcome)\">\n                    {{outcome.name | translate | uppercase }}\n                </button>\n            </ng-container>\n        </mat-card-actions>\n    </mat-card>\n</div>\n"
                },] }
    ];
    FormCloudComponent.ctorParameters = function () { return [
        { type: FormCloudService },
        { type: i1.FormService },
        { type: i1.WidgetVisibilityService }
    ]; };
    FormCloudComponent.propDecorators = {
        appName: [{ type: i0.Input }],
        appVersion: [{ type: i0.Input }],
        formId: [{ type: i0.Input }],
        processInstanceId: [{ type: i0.Input }],
        form: [{ type: i0.Input }],
        taskId: [{ type: i0.Input }],
        data: [{ type: i0.Input }],
        fieldValidators: [{ type: i0.Input }],
        formSaved: [{ type: i0.Output }],
        formCompleted: [{ type: i0.Output }],
        formLoaded: [{ type: i0.Output }],
        formDataRefreshed: [{ type: i0.Output }],
        formContentClicked: [{ type: i0.Output }],
        onKeyDown: [{ type: i0.HostListener, args: ['keydown', ['$event'],] }]
    };

    var FormDefinitionSelectorCloudService = /** @class */ (function (_super) {
        __extends(FormDefinitionSelectorCloudService, _super);
        function FormDefinitionSelectorCloudService(apiService, appConfigService) {
            return _super.call(this, apiService, appConfigService) || this;
        }
        FormDefinitionSelectorCloudService.prototype.getForms = function (appName) {
            var url = this.getBasePath(appName) + "/form/v1/forms";
            return this.get(url).pipe(operators.map(function (data) {
                return data.map(function (formData) {
                    return formData.formRepresentation;
                });
            }));
        };
        FormDefinitionSelectorCloudService.prototype.getStandAloneTaskForms = function (appName) {
            return rxjs.from(this.getForms(appName)).pipe(operators.map(function (data) {
                return data.filter(function (formData) { return formData.standalone || formData.standalone === undefined; });
            }));
        };
        return FormDefinitionSelectorCloudService;
    }(BaseCloudService));
    FormDefinitionSelectorCloudService.ɵprov = i0.ɵɵdefineInjectable({ factory: function FormDefinitionSelectorCloudService_Factory() { return new FormDefinitionSelectorCloudService(i0.ɵɵinject(i1.AlfrescoApiService), i0.ɵɵinject(i1.AppConfigService)); }, token: FormDefinitionSelectorCloudService, providedIn: "root" });
    FormDefinitionSelectorCloudService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    FormDefinitionSelectorCloudService.ctorParameters = function () { return [
        { type: i1.AlfrescoApiService },
        { type: i1.AppConfigService }
    ]; };

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var FormDefinitionSelectorCloudComponent = /** @class */ (function () {
        function FormDefinitionSelectorCloudComponent(formDefinitionCloudService) {
            this.formDefinitionCloudService = formDefinitionCloudService;
            this.appName = '';
            this.selectForm = new i0.EventEmitter();
        }
        FormDefinitionSelectorCloudComponent.prototype.ngOnInit = function () {
            this.forms$ = this.formDefinitionCloudService.getStandAloneTaskForms(this.appName);
        };
        FormDefinitionSelectorCloudComponent.prototype.onSelect = function (event) {
            this.selectForm.emit(event.value);
        };
        return FormDefinitionSelectorCloudComponent;
    }());
    FormDefinitionSelectorCloudComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'adf-cloud-form-definition-selector',
                    template: "<mat-form-field class=\"adf-form-definition-selector\">\n    <mat-label>{{'ADF_CLOUD_TASK_LIST.START_TASK.FORM.LABEL.FORM'|translate}}</mat-label>\n    <mat-select class=\"adf-form-selector-dropdown\" (selectionChange)=\"onSelect($event)\">\n        <mat-option [value]=\"''\">{{'ADF_CLOUD_TASK_LIST.START_TASK.FORM.LABEL.NONE'|translate}}</mat-option>\n        <mat-option *ngFor=\"let form of forms$ | async\" [value]=\"form.id\">{{ form.name }}</mat-option>\n    </mat-select>\n</mat-form-field>\n",
                    styles: [".adf-form-definition-selector{width:100%}"]
                },] }
    ];
    FormDefinitionSelectorCloudComponent.ctorParameters = function () { return [
        { type: FormDefinitionSelectorCloudService }
    ]; };
    FormDefinitionSelectorCloudComponent.propDecorators = {
        appName: [{ type: i0.Input }],
        selectForm: [{ type: i0.Output }]
    };

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var FormCustomOutcomesComponent = /** @class */ (function () {
        function FormCustomOutcomesComponent() {
        }
        return FormCustomOutcomesComponent;
    }());
    FormCustomOutcomesComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'adf-cloud-form-custom-outcomes',
                    template: '<ng-content></ng-content>'
                },] }
    ];

    var ɵ0$3 = i1.MOMENT_DATE_FORMATS;
    var DateCloudWidgetComponent = /** @class */ (function (_super) {
        __extends(DateCloudWidgetComponent, _super);
        function DateCloudWidgetComponent(formService, dateAdapter, userPreferencesService) {
            var _this = _super.call(this, formService) || this;
            _this.formService = formService;
            _this.dateAdapter = dateAdapter;
            _this.userPreferencesService = userPreferencesService;
            _this.typeId = 'DateCloudWidgetComponent';
            _this.DATE_FORMAT_CLOUD = 'YYYY-MM-DD';
            _this.onDestroy$ = new rxjs.Subject();
            return _this;
        }
        DateCloudWidgetComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.userPreferencesService
                .select(i1.UserPreferenceValues.Locale)
                .pipe(operators.takeUntil(this.onDestroy$))
                .subscribe(function (locale) { return _this.dateAdapter.setLocale(locale); });
            var momentDateAdapter = this.dateAdapter;
            momentDateAdapter.overrideDisplayFormat = this.field.dateDisplayFormat;
            if (this.field) {
                if (this.field.minValue) {
                    this.minDate = moment(this.field.minValue, this.DATE_FORMAT_CLOUD);
                }
                if (this.field.maxValue) {
                    this.maxDate = moment(this.field.maxValue, this.DATE_FORMAT_CLOUD);
                }
            }
        };
        DateCloudWidgetComponent.prototype.ngOnDestroy = function () {
            this.onDestroy$.next(true);
            this.onDestroy$.complete();
        };
        DateCloudWidgetComponent.prototype.onDateChanged = function (newDateValue) {
            var date = moment(newDateValue, this.field.dateDisplayFormat, true);
            if (date.isValid()) {
                this.field.value = date.format(this.field.dateDisplayFormat);
            }
            else {
                this.field.value = newDateValue;
            }
            this.onFieldChanged(this.field);
        };
        return DateCloudWidgetComponent;
    }(i1.WidgetComponent));
    DateCloudWidgetComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'date-widget',
                    providers: [
                        { provide: core.DateAdapter, useClass: i1.MomentDateAdapter },
                        { provide: core.MAT_DATE_FORMATS, useValue: ɵ0$3 }
                    ],
                    template: "<div class=\"{{field.className}}\" id=\"data-widget\" [class.adf-invalid]=\"!field.isValid\">\n    <mat-form-field class=\"adf-date-widget\">\n        <label class=\"adf-label\" [attr.for]=\"field.id\">{{field.name | translate }} ({{field.dateDisplayFormat}})<span *ngIf=\"isRequired()\">*</span></label>\n        <input matInput\n               [id]=\"field.id\"\n               [value]=\"field.value\"\n               [required]=\"isRequired()\"\n               [disabled]=\"field.readOnly\"\n               (change)=\"onDateChanged($any($event).srcElement.value)\"\n               [placeholder]=\"field.placeholder\"\n               [matTooltip]=\"field.tooltip\"\n               matTooltipPosition=\"above\"\n               matTooltipShowDelay=\"1000\">\n        <mat-datepicker-toggle  matSuffix [for]=\"datePicker\" [disabled]=\"field.readOnly\" ></mat-datepicker-toggle>\n    </mat-form-field>\n    <error-widget [error]=\"field.validationSummary\"></error-widget>\n    <error-widget *ngIf=\"isInvalidFieldRequired()\" required=\"{{ 'FORM.FIELD.REQUIRED' | translate }}\"></error-widget>\n    <mat-datepicker #datePicker [touchUi]=\"true\" [startAt]=\"field.value | adfMomentDate: field.dateDisplayFormat\" [disabled]=\"field.readOnly\"></mat-datepicker>\n    <input\n        type=\"hidden\"\n        [matDatepicker]=\"datePicker\"\n        [value]=\"field.value | adfMomentDate: field.dateDisplayFormat\"\n        [min]=\"minDate\"\n        [max]=\"maxDate\"\n        [disabled]=\"field.readOnly\"\n        (dateInput)=\"onDateChanged($any($event).targetElement.value)\">\n</div>\n",
                    host: {
                        '(click)': 'event($event)',
                        '(blur)': 'event($event)',
                        '(change)': 'event($event)',
                        '(focus)': 'event($event)',
                        '(focusin)': 'event($event)',
                        '(focusout)': 'event($event)',
                        '(input)': 'event($event)',
                        '(invalid)': 'event($event)',
                        '(select)': 'event($event)'
                    },
                    encapsulation: i0.ViewEncapsulation.None,
                    styles: [".adf-date-widget .mat-form-field-suffix{top:26px}.adf-date-widget .mat-form-field-label-wrapper{top:20px}"]
                },] }
    ];
    DateCloudWidgetComponent.ctorParameters = function () { return [
        { type: i1.FormService },
        { type: core.DateAdapter },
        { type: i1.UserPreferencesService }
    ]; };

    var DropdownCloudWidgetComponent = /** @class */ (function (_super) {
        __extends(DropdownCloudWidgetComponent, _super);
        function DropdownCloudWidgetComponent(formService, formCloudService, logService) {
            var _this = _super.call(this, formService) || this;
            _this.formService = formService;
            _this.formCloudService = formCloudService;
            _this.logService = logService;
            _this.typeId = 'DropdownCloudWidgetComponent';
            _this.onDestroy$ = new rxjs.Subject();
            return _this;
        }
        DropdownCloudWidgetComponent.prototype.ngOnInit = function () {
            var _this = this;
            if (this.hasRestUrl() && !this.isLinkedWidget()) {
                this.persistFieldOptionsFromRestApi();
            }
            if (this.isLinkedWidget()) {
                this.loadFieldOptionsForLinkedWidget();
                this.formService.formFieldValueChanged
                    .pipe(operators.filter(function (event) { return _this.isFormFieldEventOfTypeDropdown(event) && _this.isParentFormFieldEvent(event); }), operators.takeUntil(this.onDestroy$))
                    .subscribe(function (event) {
                    var valueOfParentWidget = event.field.value;
                    _this.parentValueChanged(valueOfParentWidget);
                });
            }
        };
        DropdownCloudWidgetComponent.prototype.persistFieldOptionsFromRestApi = function () {
            var _this = this;
            if (this.isValidRestType()) {
                var bodyParam = this.buildBodyParam();
                this.formCloudService.getRestWidgetData(this.field.form.id, this.field.id, bodyParam)
                    .pipe(operators.takeUntil(this.onDestroy$))
                    .subscribe(function (result) {
                    _this.field.options = result;
                    _this.field.updateForm();
                }, function (err) { return _this.handleError(err); });
            }
        };
        DropdownCloudWidgetComponent.prototype.buildBodyParam = function () {
            var bodyParam = Object.assign({});
            if (this.isLinkedWidget()) {
                var parentWidgetValue = this.getParentWidgetValue();
                var parentWidgetId = this.getLinkedWidgetId();
                bodyParam[parentWidgetId] = parentWidgetValue;
            }
            return bodyParam;
        };
        DropdownCloudWidgetComponent.prototype.loadFieldOptionsForLinkedWidget = function () {
            var parentWidgetValue = this.getParentWidgetValue();
            this.parentValueChanged(parentWidgetValue);
        };
        DropdownCloudWidgetComponent.prototype.getParentWidgetValue = function () {
            var parentWidgetId = this.getLinkedWidgetId();
            var parentWidget = this.getFormFieldById(parentWidgetId);
            return parentWidget === null || parentWidget === void 0 ? void 0 : parentWidget.value;
        };
        DropdownCloudWidgetComponent.prototype.parentValueChanged = function (value) {
            if (this.isValidValue(value)) {
                this.isValidRestType() ? this.persistFieldOptionsFromRestApi() : this.persistFieldOptionsFromManualList(value);
            }
            else if (this.isDefaultValue(value)) {
                this.addDefaultOption();
            }
        };
        DropdownCloudWidgetComponent.prototype.isValidValue = function (value) {
            return !!value && value !== DropdownCloudWidgetComponent.DEFAULT_OPTION.id;
        };
        DropdownCloudWidgetComponent.prototype.isDefaultValue = function (value) {
            return value === DropdownCloudWidgetComponent.DEFAULT_OPTION.id;
        };
        DropdownCloudWidgetComponent.prototype.getFormFieldById = function (fieldId) {
            return this.field.form.getFormFields().filter(function (field) { return field.id === fieldId; })[0];
        };
        DropdownCloudWidgetComponent.prototype.persistFieldOptionsFromManualList = function (value) {
            var _this = this;
            if (this.hasRuleEntries()) {
                var rulesEntries = this.getRuleEntries();
                rulesEntries.forEach(function (ruleEntry) {
                    if (ruleEntry.key === value) {
                        _this.field.options = ruleEntry.options;
                        _this.field.updateForm();
                    }
                });
            }
        };
        DropdownCloudWidgetComponent.prototype.getRuleEntries = function () {
            return this.field.rule.entries;
        };
        DropdownCloudWidgetComponent.prototype.hasRuleEntries = function () {
            return !!this.getRuleEntries().length;
        };
        DropdownCloudWidgetComponent.prototype.addDefaultOption = function () {
            this.field.options = [DropdownCloudWidgetComponent.DEFAULT_OPTION];
        };
        DropdownCloudWidgetComponent.prototype.selectionChangedForField = function (field) {
            var formFieldValueChangedEvent = new i1.FormFieldEvent(field.form, field);
            this.formService.formFieldValueChanged.next(formFieldValueChangedEvent);
            this.onFieldChanged(field);
        };
        DropdownCloudWidgetComponent.prototype.isParentFormFieldEvent = function (event) {
            return event.field.id === this.getLinkedWidgetId();
        };
        DropdownCloudWidgetComponent.prototype.isFormFieldEventOfTypeDropdown = function (event) {
            return event.field.type === i1.FormFieldTypes.DROPDOWN;
        };
        DropdownCloudWidgetComponent.prototype.hasRestUrl = function () {
            var _a;
            return !!((_a = this.field) === null || _a === void 0 ? void 0 : _a.restUrl);
        };
        DropdownCloudWidgetComponent.prototype.isLinkedWidget = function () {
            return !!this.getLinkedWidgetId();
        };
        DropdownCloudWidgetComponent.prototype.getLinkedWidgetId = function () {
            var _a, _b;
            return (_b = (_a = this.field) === null || _a === void 0 ? void 0 : _a.rule) === null || _b === void 0 ? void 0 : _b.ruleOn;
        };
        DropdownCloudWidgetComponent.prototype.compareDropdownValues = function (opt1, opt2) {
            if (!opt1 || !opt2) {
                return false;
            }
            if (typeof opt1 === 'string' && typeof opt2 === 'object') {
                return opt1 === opt2.id || opt1 === opt2.name;
            }
            if (typeof opt1 === 'object' && typeof opt2 === 'string') {
                return opt1.id === opt2 || opt1.name === opt2;
            }
            if (typeof opt1 === 'object' && typeof opt2 === 'object') {
                return opt1.id === opt2.id || opt1.name === opt2.name;
            }
            return opt1 === opt2;
        };
        DropdownCloudWidgetComponent.prototype.getOptionValue = function (option, fieldValue) {
            if (this.field.hasMultipleValues) {
                return option;
            }
            var optionValue = '';
            if (option.id === DropdownCloudWidgetComponent.DEFAULT_OPTION.id || option.name !== fieldValue) {
                optionValue = option.id;
            }
            else {
                optionValue = option.name;
            }
            return optionValue;
        };
        DropdownCloudWidgetComponent.prototype.isValidRestType = function () {
            return this.field.optionType === 'rest' && !!this.field.restUrl;
        };
        DropdownCloudWidgetComponent.prototype.handleError = function (error) {
            this.logService.error(error);
        };
        DropdownCloudWidgetComponent.prototype.isReadOnlyType = function () {
            return this.field.type === 'readonly';
        };
        DropdownCloudWidgetComponent.prototype.ngOnDestroy = function () {
            this.onDestroy$.next(true);
            this.onDestroy$.complete();
        };
        return DropdownCloudWidgetComponent;
    }(i1.WidgetComponent));
    DropdownCloudWidgetComponent.DEFAULT_OPTION = {
        id: 'empty',
        name: 'Choose one...'
    };
    DropdownCloudWidgetComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'dropdown-cloud-widget',
                    template: "<div class=\"adf-dropdown-widget {{field.className}}\"\n     [class.adf-invalid]=\"!field.isValid\" [class.adf-readonly]=\"field.readOnly\">\n    <div class=\"adf-dropdown-widget-top-labels\">\n        <label class=\"adf-label\" [attr.for]=\"field.id\">{{field.name | translate }}<span\n            *ngIf=\"isRequired()\">*</span></label>\n        <label class=\"adf-label adf-dropdown-widget-linked\"\n               *ngIf=\"isLinkedWidget()\"\n               [attr.for]=\"field.id\">\n            {{ 'FORM.FIELD.DEPENDS_ON' | translate: { widgetId: getLinkedWidgetId() } }}\n        </label>\n    </div>\n    <mat-form-field>\n        <mat-select class=\"adf-select\"\n                    [id]=\"field.id\"\n                    [(ngModel)]=\"field.value\"\n                    [disabled]=\"field.readOnly\"\n                    [compareWith]=\"compareDropdownValues\"\n                    (ngModelChange)=\"selectionChangedForField(field)\"\n                    [matTooltip]=\"field.tooltip\"\n                    matTooltipPosition=\"above\"\n                    matTooltipShowDelay=\"1000\"\n                    [multiple]=\"field.hasMultipleValues\">\n            <mat-option *ngFor=\"let opt of field.options\"\n                        [value]=\"getOptionValue(opt, field.value)\"\n                        [id]=\"opt.id\">{{opt.name}}\n            </mat-option>\n            <mat-option id=\"readonlyOption\" *ngIf=\"isReadOnlyType()\" [value]=\"field.value\">{{field.value}}</mat-option>\n        </mat-select>\n    </mat-form-field>\n    <error-widget [error]=\"field.validationSummary\"></error-widget>\n    <error-widget class=\"adf-dropdown-required-message\" *ngIf=\"isInvalidFieldRequired()\"\n                  required=\"{{ 'FORM.FIELD.REQUIRED' | translate }}\"></error-widget>\n</div>\n",
                    host: {
                        '(click)': 'event($event)',
                        '(blur)': 'event($event)',
                        '(change)': 'event($event)',
                        '(focus)': 'event($event)',
                        '(focusin)': 'event($event)',
                        '(focusout)': 'event($event)',
                        '(input)': 'event($event)',
                        '(invalid)': 'event($event)',
                        '(select)': 'event($event)'
                    },
                    encapsulation: i0.ViewEncapsulation.None,
                    styles: [".adf-dropdown-widget{margin-top:13px;width:100%}.adf-dropdown-widget .adf-select{padding-top:0!important;width:100%}.adf-dropdown-widget .mat-select-value-text{font-size:14px}.adf-dropdown-widget-top-labels{display:flex;flex-direction:row;height:16px;justify-content:space-between}.adf-dropdown-widget-top-labels .adf-dropdown-widget-linked{display:contents}.adf-dropdown-widget-select{width:100%}.adf-dropdown-widget-dropdown-required-message .adf-error-text-container{margin-top:1px!important}"]
                },] }
    ];
    DropdownCloudWidgetComponent.ctorParameters = function () { return [
        { type: i1.FormService },
        { type: FormCloudService },
        { type: i1.LogService }
    ]; };

    var GroupCloudWidgetComponent = /** @class */ (function (_super) {
        __extends(GroupCloudWidgetComponent, _super);
        function GroupCloudWidgetComponent(formService) {
            var _this = _super.call(this, formService) || this;
            _this.onDestroy$ = new rxjs.Subject();
            _this.typeId = 'GroupCloudWidgetComponent';
            return _this;
        }
        GroupCloudWidgetComponent.prototype.ngOnInit = function () {
            var _this = this;
            if (this.field) {
                this.roles = this.field.roles;
                this.mode = this.field.optionType;
                this.title = this.field.placeholder;
                this.preSelectGroup = this.field.value ? this.field.value : [];
            }
            this.search = new forms.FormControl({ value: '', disabled: this.field.readOnly }, []),
                this.search.statusChanges
                    .pipe(operators.filter(function (value) {
                    return value === 'INVALID';
                }), operators.takeUntil(this.onDestroy$))
                    .subscribe(function () {
                    _this.field.markAsInvalid();
                    _this.field.form.markAsInvalid();
                });
            this.search.statusChanges
                .pipe(operators.filter(function (value) {
                return value === 'VALID';
            }), operators.takeUntil(this.onDestroy$))
                .subscribe(function () {
                _this.field.validate();
                _this.field.form.validateForm();
            });
        };
        GroupCloudWidgetComponent.prototype.ngOnDestroy = function () {
            this.onDestroy$.next(true);
            this.onDestroy$.complete();
        };
        GroupCloudWidgetComponent.prototype.onChangedGroup = function (groups) {
            this.field.value = __spread(groups);
            this.onFieldChanged(this.field);
        };
        GroupCloudWidgetComponent.prototype.isMultipleMode = function () {
            return this.mode === 'multiple';
        };
        return GroupCloudWidgetComponent;
    }(i1.WidgetComponent));
    GroupCloudWidgetComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'group-cloud-widget',
                    template: "<div class=\"adf-dropdown-widget {{field.className}}\"\n     [class.adf-invalid]=\"!field.isValid\" [class.adf-readonly]=\"field.readOnly\">\n    <label class=\"adf-label\" [attr.for]=\"field.id\">{{field.name | translate }}<span\n        *ngIf=\"isRequired()\">*</span></label>\n        <adf-cloud-group [mode]=\"mode\"\n                         [title]=\"title\"\n                         [readOnly]=\"field.readOnly\"\n                         [roles]=\"roles\"\n                         [searchGroupsControl]=\"search\"\n                         (changedGroups)=\"onChangedGroup($event)\"\n                         [preSelectGroups]=\"preSelectGroup\"\n                         [matTooltip]=\"field.tooltip\"\n                         [matTooltipPosition]=\"'above'\"\n                         [matTooltipShowDelay]=\"1000\">\n        </adf-cloud-group>\n        <error-widget [error]=\"field.validationSummary\"></error-widget>\n        <error-widget class=\"adf-dropdown-required-message\" *ngIf=\"isInvalidFieldRequired()\"\n                  required=\"{{ 'FORM.FIELD.REQUIRED' | translate }}\"></error-widget>\n</div>\n\n",
                    host: {
                        '(click)': 'event($event)',
                        '(blur)': 'event($event)',
                        '(change)': 'event($event)',
                        '(focus)': 'event($event)',
                        '(focusin)': 'event($event)',
                        '(focusout)': 'event($event)',
                        '(input)': 'event($event)',
                        '(invalid)': 'event($event)',
                        '(select)': 'event($event)'
                    },
                    encapsulation: i0.ViewEncapsulation.None
                },] }
    ];
    GroupCloudWidgetComponent.ctorParameters = function () { return [
        { type: i1.FormService }
    ]; };

    var PeopleCloudWidgetComponent = /** @class */ (function (_super) {
        __extends(PeopleCloudWidgetComponent, _super);
        function PeopleCloudWidgetComponent(formService) {
            var _this = _super.call(this, formService) || this;
            _this.onDestroy$ = new rxjs.Subject();
            _this.typeId = 'PeopleCloudWidgetComponent';
            return _this;
        }
        PeopleCloudWidgetComponent.prototype.ngOnInit = function () {
            var _this = this;
            if (this.field) {
                this.roles = this.field.roles;
                this.mode = this.field.optionType;
                this.title = this.field.placeholder;
                this.preSelectUsers = this.field.value ? this.field.value : [];
            }
            this.search = new forms.FormControl({ value: '', disabled: this.field.readOnly }, []),
                this.search.statusChanges
                    .pipe(operators.filter(function (value) {
                    return value === 'INVALID';
                }), operators.takeUntil(this.onDestroy$))
                    .subscribe(function () {
                    _this.field.markAsInvalid();
                    _this.field.form.markAsInvalid();
                });
            this.search.statusChanges
                .pipe(operators.filter(function (value) {
                return value === 'VALID';
            }), operators.takeUntil(this.onDestroy$))
                .subscribe(function () {
                _this.field.validate();
                _this.field.form.validateForm();
            });
        };
        PeopleCloudWidgetComponent.prototype.ngOnDestroy = function () {
            this.onDestroy$.next(true);
            this.onDestroy$.complete();
        };
        PeopleCloudWidgetComponent.prototype.onChangedUser = function (users) {
            this.field.value = __spread(users);
            this.onFieldChanged(this.field);
        };
        PeopleCloudWidgetComponent.prototype.isMultipleMode = function () {
            return this.mode === 'multiple';
        };
        return PeopleCloudWidgetComponent;
    }(i1.WidgetComponent));
    PeopleCloudWidgetComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'people-cloud-widget',
                    template: "<div class=\"adf-dropdown-widget {{field.className}}\"\n     [class.adf-invalid]=\"!field.isValid\" [class.adf-readonly]=\"field.readOnly\">\n    <label class=\"adf-label\" [attr.for]=\"field.id\">{{field.name | translate }}<span *ngIf=\"isRequired()\">*</span></label>\n        <adf-cloud-people\n            [preSelectUsers]=\"preSelectUsers\"\n            [validate]=\"true\"\n            [appName]=\"appName\"\n            [title]=\"title\"\n            [readOnly]=\"field.readOnly\"\n            [searchUserCtrl]=\"search\"\n            (changedUsers)=\"onChangedUser($event)\"\n            [roles]=\"roles\"\n            [mode]=\"mode\"\n            [matTooltip]=\"field.tooltip\"\n            matTooltipPosition=\"above\"\n            matTooltipShowDelay=\"1000\">\n        </adf-cloud-people>\n    <error-widget [error]=\"field.validationSummary\"></error-widget>\n</div>\n\n",
                    host: {
                        '(click)': 'event($event)',
                        '(blur)': 'event($event)',
                        '(change)': 'event($event)',
                        '(focus)': 'event($event)',
                        '(focusin)': 'event($event)',
                        '(focusout)': 'event($event)',
                        '(input)': 'event($event)',
                        '(invalid)': 'event($event)',
                        '(select)': 'event($event)'
                    },
                    encapsulation: i0.ViewEncapsulation.None
                },] }
    ];
    PeopleCloudWidgetComponent.ctorParameters = function () { return [
        { type: i1.FormService }
    ]; };

    var ContentCloudNodeSelectorService = /** @class */ (function () {
        function ContentCloudNodeSelectorService(apiService, notificationService, logService, dialog) {
            this.apiService = apiService;
            this.notificationService = notificationService;
            this.logService = logService;
            this.dialog = dialog;
            this.sourceNodeNotFound = false;
        }
        Object.defineProperty(ContentCloudNodeSelectorService.prototype, "nodesApi", {
            get: function () {
                var _a;
                this._nodesApi = (_a = this._nodesApi) !== null && _a !== void 0 ? _a : new jsApi.NodesApi(this.apiService.getInstance());
                return this._nodesApi;
            },
            enumerable: false,
            configurable: true
        });
        ContentCloudNodeSelectorService.prototype.openUploadFileDialog = function (currentFolderId, selectionMode, isAllFileSources, restrictRootToCurrentFolderId) {
            var select = new rxjs.Subject();
            select.subscribe({ complete: this.close.bind(this) });
            var data = {
                title: 'Select a file',
                actionName: adfContentServices.NodeAction.ATTACH,
                currentFolderId: currentFolderId,
                restrictRootToCurrentFolderId: restrictRootToCurrentFolderId,
                select: select,
                selectionMode: selectionMode,
                isSelectionValid: function (entry) { return entry.isFile; },
                showFilesInResult: true,
                showDropdownSiteList: false,
                showLocalUploadButton: isAllFileSources
            };
            this.openContentNodeDialog(data, 'adf-content-node-selector-dialog', '66%');
            return select;
        };
        ContentCloudNodeSelectorService.prototype.getNodeIdFromPath = function (destinationFolderPath) {
            return __awaiter(this, void 0, void 0, function () {
                var error_1;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            if (!(destinationFolderPath.alias && destinationFolderPath.path)) return [3 /*break*/, 4];
                            _b.label = 1;
                        case 1:
                            _b.trys.push([1, 3, , 4]);
                            return [4 /*yield*/, this.getNodeId(destinationFolderPath.alias, destinationFolderPath.path).toPromise()];
                        case 2: return [2 /*return*/, _b.sent()];
                        case 3:
                            error_1 = _b.sent();
                            this.logService.error(error_1);
                            return [3 /*break*/, 4];
                        case 4: return [2 /*return*/, this.getNodeId(destinationFolderPath.alias).toPromise()];
                    }
                });
            });
        };
        ContentCloudNodeSelectorService.prototype.getNodeIdFromFolderVariableValue = function (variableValue, defaultAlias) {
            return __awaiter(this, void 0, void 0, function () {
                var isExistingNode;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0: return [4 /*yield*/, this.isExistingNode(variableValue)];
                        case 1:
                            isExistingNode = _b.sent();
                            return [2 /*return*/, isExistingNode ? variableValue : this.getNodeId(defaultAlias).toPromise()];
                    }
                });
            });
        };
        ContentCloudNodeSelectorService.prototype.isExistingNode = function (nodeId) {
            return __awaiter(this, void 0, void 0, function () {
                var isExistingNode, error_2;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            isExistingNode = false;
                            if (!nodeId) return [3 /*break*/, 4];
                            _b.label = 1;
                        case 1:
                            _b.trys.push([1, 3, , 4]);
                            return [4 /*yield*/, this.getNodeId(nodeId).pipe(operators.mapTo(true)).toPromise()];
                        case 2:
                            isExistingNode = _b.sent();
                            return [3 /*break*/, 4];
                        case 3:
                            error_2 = _b.sent();
                            this.logService.error(error_2);
                            return [3 /*break*/, 4];
                        case 4: return [2 /*return*/, isExistingNode];
                    }
                });
            });
        };
        ContentCloudNodeSelectorService.prototype.getNodeId = function (nodeId, relativePath) {
            var _this = this;
            var opts;
            if (relativePath) {
                opts = { relativePath: relativePath };
            }
            return rxjs.from(this.nodesApi.getNode(nodeId, opts)).pipe(operators.map(function (nodeEntry) { return nodeEntry.entry.id; }), operators.catchError(function (error) {
                _this.sourceNodeNotFound = true;
                return _this.handleError(error);
            }));
        };
        ContentCloudNodeSelectorService.prototype.openContentNodeDialog = function (data, currentPanelClass, chosenWidth) {
            var _this = this;
            var contentNodeDialog = this.dialog.open(adfContentServices.ContentNodeSelectorComponent, { data: data, panelClass: currentPanelClass, width: chosenWidth });
            contentNodeDialog.afterOpened().subscribe(function () {
                if (_this.sourceNodeNotFound) {
                    _this.notificationService.showWarning('ADF_CLOUD_TASK_FORM.ERROR.DESTINATION_FOLDER_PATH_ERROR');
                }
            });
            contentNodeDialog.afterClosed().subscribe(function () {
                _this.sourceNodeNotFound = false;
            });
        };
        ContentCloudNodeSelectorService.prototype.close = function () {
            this.dialog.closeAll();
        };
        ContentCloudNodeSelectorService.prototype.handleError = function (error) {
            return rxjs.throwError(error || 'Server error');
        };
        return ContentCloudNodeSelectorService;
    }());
    ContentCloudNodeSelectorService.ɵprov = i0.ɵɵdefineInjectable({ factory: function ContentCloudNodeSelectorService_Factory() { return new ContentCloudNodeSelectorService(i0.ɵɵinject(i1.AlfrescoApiService), i0.ɵɵinject(i1.NotificationService), i0.ɵɵinject(i1.LogService), i0.ɵɵinject(i2.MatDialog)); }, token: ContentCloudNodeSelectorService, providedIn: "root" });
    ContentCloudNodeSelectorService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    ContentCloudNodeSelectorService.ctorParameters = function () { return [
        { type: i1.AlfrescoApiService },
        { type: i1.NotificationService },
        { type: i1.LogService },
        { type: i2.MatDialog }
    ]; };

    var ProcessCloudContentService = /** @class */ (function () {
        function ProcessCloudContentService(apiService, logService, contentService, downloadService) {
            this.apiService = apiService;
            this.logService = logService;
            this.contentService = contentService;
            this.downloadService = downloadService;
        }
        Object.defineProperty(ProcessCloudContentService.prototype, "uploadApi", {
            get: function () {
                var _a;
                this._uploadApi = (_a = this._uploadApi) !== null && _a !== void 0 ? _a : new jsApi.UploadApi(this.apiService.getInstance());
                return this._uploadApi;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ProcessCloudContentService.prototype, "authenticationApi", {
            get: function () {
                var _a;
                this._authenticationApi = (_a = this._authenticationApi) !== null && _a !== void 0 ? _a : new jsApi.AuthenticationApi(this.apiService.getInstance());
                return this._authenticationApi;
            },
            enumerable: false,
            configurable: true
        });
        ProcessCloudContentService.prototype.createTemporaryRawRelatedContent = function (file, nodeId) {
            var _this = this;
            return rxjs.from(this.uploadApi.uploadFile(file, '', nodeId, '', { overwrite: true })).pipe(operators.map(function (res) {
                return Object.assign(Object.assign({}, res.entry), { nodeId: res.entry.id });
            }), operators.catchError(function (err) { return _this.handleError(err); }));
        };
        ProcessCloudContentService.prototype.getRawContentNode = function (nodeId) {
            return this.contentService.getNodeContent(nodeId);
        };
        ProcessCloudContentService.prototype.downloadNodeContent = function (blob, fileName) {
            this.contentService.downloadBlob(blob, fileName);
        };
        ProcessCloudContentService.prototype.downloadFile = function (nodeId) {
            return __awaiter(this, void 0, void 0, function () {
                var ticket, url;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0: return [4 /*yield*/, this.getAuthTicket()];
                        case 1:
                            ticket = _b.sent();
                            url = this.contentService.getContentUrl(nodeId, true, ticket);
                            this.downloadService.downloadUrl(url, nodeId);
                            return [2 /*return*/];
                    }
                });
            });
        };
        ProcessCloudContentService.prototype.getAuthTicket = function () {
            return __awaiter(this, void 0, void 0, function () {
                var ticket;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0: return [4 /*yield*/, this.authenticationApi.getTicket()];
                        case 1:
                            ticket = _b.sent();
                            if (ticket && ticket.entry) {
                                return [2 /*return*/, ticket.entry.id || ''];
                            }
                            return [2 /*return*/, ''];
                    }
                });
            });
        };
        ProcessCloudContentService.prototype.handleError = function (error) {
            this.logService.error(error);
            return rxjs.throwError(error || 'Server error');
        };
        return ProcessCloudContentService;
    }());
    ProcessCloudContentService.ɵprov = i0.ɵɵdefineInjectable({ factory: function ProcessCloudContentService_Factory() { return new ProcessCloudContentService(i0.ɵɵinject(i1.AlfrescoApiService), i0.ɵɵinject(i1.LogService), i0.ɵɵinject(i1.ContentService), i0.ɵɵinject(i1.DownloadService)); }, token: ProcessCloudContentService, providedIn: "root" });
    ProcessCloudContentService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    ProcessCloudContentService.ctorParameters = function () { return [
        { type: i1.AlfrescoApiService },
        { type: i1.LogService },
        { type: i1.ContentService },
        { type: i1.DownloadService }
    ]; };

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var FormCloudRepresentation = /** @class */ (function () {
        function FormCloudRepresentation(obj) {
            this.id = obj.id || null;
            this.name = obj.name || null;
            this.description = obj.description || null;
            this.version = obj.version || null;
            this.tabs = obj.tabs || null;
            this.fields = obj.fields || null;
            this.outcomes = obj.outcomes || null;
            this.metadata = obj.metadata || null;
            this.variables = obj.variables || null;
            this.taskId = obj.taskId || null;
            this.taskName = obj.taskName || null;
            this.processDefinitionId = obj.processDefinitionId || null;
            this.processInstanceId = obj.processInstanceId || null;
            this.selectedOutcome = obj.selectedOutcome || null;
        }
        return FormCloudRepresentation;
    }());
    var FileSourceTypes;
    (function (FileSourceTypes) {
        FileSourceTypes["ALL_FILE_SOURCES_SERVICE_ID"] = "all-file-sources";
        FileSourceTypes["ALFRESCO_CONTENT_SOURCES_SERVICE_ID"] = "alfresco-content";
    })(FileSourceTypes || (FileSourceTypes = {}));
    var DestinationFolderPathType;
    (function (DestinationFolderPathType) {
        DestinationFolderPathType["STATIC_TYPE"] = "value";
        DestinationFolderPathType["STRING_TYPE"] = "string";
        DestinationFolderPathType["FOLDER_TYPE"] = "folder";
    })(DestinationFolderPathType || (DestinationFolderPathType = {}));

    var UploadCloudWidgetComponent = /** @class */ (function (_super) {
        __extends(UploadCloudWidgetComponent, _super);
        function UploadCloudWidgetComponent(formService, thumbnailService, processCloudContentService, notificationService, logService) {
            var _this = _super.call(this, formService) || this;
            _this.thumbnailService = thumbnailService;
            _this.processCloudContentService = processCloudContentService;
            _this.notificationService = notificationService;
            _this.logService = logService;
            _this.multipleOption = '';
            return _this;
        }
        UploadCloudWidgetComponent.prototype.ngOnInit = function () {
            if (this.field &&
                this.field.value &&
                this.field.value.length > 0) {
                this.hasFile = true;
                this.fixIncompatibilityFromPreviousAndNewForm([]);
            }
            this.getMultipleFileParam();
            this.setDestinationFolderPathFromMappedVariable();
        };
        UploadCloudWidgetComponent.prototype.removeFile = function (file) {
            if (this.field) {
                this.removeElementFromList(file);
            }
        };
        UploadCloudWidgetComponent.prototype.onFileChanged = function (event) {
            var e_1, _e;
            var _this = this;
            var files = [];
            var filesSaved = [];
            try {
                for (var _f = __values(Array.from(event.target.files)), _g = _f.next(); !_g.done; _g = _f.next()) {
                    var file = _g.value;
                    if (!this.isUploaded(file)) {
                        files.push(file);
                    }
                    else {
                        this.notificationService.showWarning('FORM.FIELD.FILE_ALREADY_UPLOADED');
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_g && !_g.done && (_e = _f.return)) _e.call(_f);
                }
                finally { if (e_1) throw e_1.error; }
            }
            if (files && files.length > 0) {
                rxjs.from(files)
                    .pipe(operators.mergeMap(function (file) { return _this.uploadRawContent(file); }))
                    .subscribe(function (res) {
                    filesSaved.push(res);
                }, function (error) { return _this.logService.error("Error uploading file. See console output for more details. " + error); }, function () {
                    _this.fixIncompatibilityFromPreviousAndNewForm(filesSaved);
                    _this.hasFile = true;
                });
            }
        };
        UploadCloudWidgetComponent.prototype.isUploaded = function (file) {
            var current = this.field.value || [];
            return current.some(function (entry) { return entry.name === file.name; });
        };
        UploadCloudWidgetComponent.prototype.fixIncompatibilityFromPreviousAndNewForm = function (filesSaved) {
            var value = __spread(this.field.value || []);
            value.push.apply(value, __spread(filesSaved || []));
            this.field.value = value;
            this.field.form.values[this.field.id] = value;
            this.hasFile = value.length > 0;
        };
        UploadCloudWidgetComponent.prototype.getIcon = function (mimeType) {
            return this.thumbnailService.getMimeTypeIcon(mimeType);
        };
        UploadCloudWidgetComponent.prototype.uploadRawContent = function (file) {
            return this.processCloudContentService.createTemporaryRawRelatedContent(file, this.field.form.nodeId);
        };
        UploadCloudWidgetComponent.prototype.getMultipleFileParam = function () {
            if (this.field &&
                this.field.params &&
                this.field.params.multiple) {
                this.multipleOption = this.field.params.multiple ? 'multiple' : '';
            }
        };
        Object.defineProperty(UploadCloudWidgetComponent.prototype, "uploadedFiles", {
            get: function () {
                var result = this.field.value || this.field.form.values[this.field.id];
                return result || [];
            },
            enumerable: false,
            configurable: true
        });
        UploadCloudWidgetComponent.prototype.removeElementFromList = function (file) {
            var filteredValues = this.uploadedFiles.filter(function (value) { return value.id !== file.id; });
            this.resetFormValues(filteredValues);
        };
        UploadCloudWidgetComponent.prototype.resetFormValues = function (values) {
            if (values && values.length > 0) {
                this.field.value = values;
                this.field.form.values[this.field.id] = values;
                this.hasFile = true;
            }
            else {
                this.field.value = [];
                this.field.form.values[this.field.id] = [];
                this.hasFile = false;
            }
        };
        UploadCloudWidgetComponent.prototype.fileClicked = function (file) {
            this.formService.formContentClicked.next(file);
        };
        UploadCloudWidgetComponent.prototype.isAlfrescoAndLocal = function () {
            var _a, _b, _c;
            return ((_c = (_b = (_a = this.field) === null || _a === void 0 ? void 0 : _a.params) === null || _b === void 0 ? void 0 : _b.fileSource) === null || _c === void 0 ? void 0 : _c.serviceId) === FileSourceTypes.ALL_FILE_SOURCES_SERVICE_ID;
        };
        UploadCloudWidgetComponent.prototype.isPathVariableType = function (type) {
            var _a, _b, _c, _d;
            return ((_d = (_c = (_b = (_a = this.field) === null || _a === void 0 ? void 0 : _a.params) === null || _b === void 0 ? void 0 : _b.fileSource) === null || _c === void 0 ? void 0 : _c.destinationFolderPath) === null || _d === void 0 ? void 0 : _d.type) === type;
        };
        UploadCloudWidgetComponent.prototype.setDestinationFolderPathFromMappedVariable = function () {
            if (this.isAlfrescoAndLocal()) {
                this.prepareUploadWidgetDestinationFolderPathFromStringVariable();
                this.prepareUploadWidgetDestinationFolderPathFromFolderVariable();
            }
        };
        UploadCloudWidgetComponent.prototype.prepareUploadWidgetDestinationFolderPathFromStringVariable = function () {
            if (this.isPathVariableType(DestinationFolderPathType.STRING_TYPE)) {
                this.setUploadWidgetDestinationFolderPath(this.getDestinationFolderPathValue());
            }
        };
        UploadCloudWidgetComponent.prototype.prepareUploadWidgetDestinationFolderPathFromFolderVariable = function () {
            if (this.isPathVariableType(DestinationFolderPathType.FOLDER_TYPE)) {
                var folder = this.getDestinationFolderPathValue();
                this.setUploadWidgetDestinationFolderPath((folder === null || folder === void 0 ? void 0 : folder.length) ? folder[0].id : undefined);
            }
        };
        UploadCloudWidgetComponent.prototype.setUploadWidgetDestinationFolderPath = function (path) {
            this.field.params.fileSource.destinationFolderPath['value'] = path ? path : undefined;
        };
        UploadCloudWidgetComponent.prototype.getDestinationFolderPathValue = function () {
            var _a, _b;
            return this.field.form.getProcessVariableValue((_b = (_a = this.field.params.fileSource) === null || _a === void 0 ? void 0 : _a.destinationFolderPath) === null || _b === void 0 ? void 0 : _b.name);
        };
        return UploadCloudWidgetComponent;
    }(i1.WidgetComponent));
    UploadCloudWidgetComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'upload-cloud-widget',
                    template: "<div class=\"adf-upload-widget {{field.className}}\" [class.adf-invalid]=\"!field.isValid\"\n    [class.adf-readonly]=\"field.readOnly\">\n    <label class=\"adf-label\" [attr.for]=\"field.id\">{{ field.name | translate }}<span\n            *ngIf=\"isRequired()\">*</span></label>\n    <div class=\"adf-cloud-upload-widget-container\">\n        <div>\n            <mat-list *ngIf=\"hasFile\">\n                <mat-list-item class=\"adf-upload-files-row\" *ngFor=\"let file of uploadedFiles\">\n                    <img mat-list-icon class=\"adf-upload-widget__icon\" [id]=\"'file-'+file.id+'-icon'\"\n                        [src]=\"getIcon(file.content.mimeType)\" [alt]=\"mimeTypeIcon\" (click)=\"fileClicked(file)\"\n                        (keyup.enter)=\"fileClicked(file)\" role=\"button\" tabindex=\"0\" />\n                    <span matLine id=\"{{'file-'+file.id}}\" (click)=\"fileClicked(file)\" (keyup.enter)=\"fileClicked(file)\"\n                        role=\"button\" tabindex=\"0\" class=\"adf-file\">{{file.name}}</span>\n                    <button *ngIf=\"!field.readOnly\" mat-icon-button [id]=\"'file-'+file.id+'-remove'\"\n                        (click)=\"removeFile(file);\" (keyup.enter)=\"removeFile(file);\">\n                        <mat-icon class=\"mat-24\">highlight_off</mat-icon>\n                    </button>\n                </mat-list-item>\n            </mat-list>\n        </div>\n\n        <div *ngIf=\"(!hasFile || multipleOption) && !field.readOnly\">\n            <button mat-raised-button color=\"primary\" (click)=\"uploadFiles.click()\" [matTooltip]=\"field.tooltip\"\n                matTooltipPosition=\"above\" matTooltipShowDelay=\"1000\">\n                {{ 'FORM.FIELD.UPLOAD' | translate }}<mat-icon>file_upload</mat-icon>\n                <input #uploadFiles [multiple]=\"multipleOption\" type=\"file\" [id]=\"field.form.nodeId\"\n                    (change)=\"onFileChanged($event)\" />\n            </button>\n        </div>\n\n        <div *ngIf=\"!hasFile && field.readOnly\">\n            {{ 'FORM.FIELD.NO_FILE_ATTACHED' | translate }}\n        </div>\n\n    </div>\n    <error-widget [error]=\"field.validationSummary\"></error-widget>\n    <error-widget *ngIf=\"isInvalidFieldRequired()\" required=\"{{ 'FORM.FIELD.REQUIRED' | translate }}\"></error-widget>\n</div>\n",
                    host: {
                        '(click)': 'event($event)',
                        '(blur)': 'event($event)',
                        '(change)': 'event($event)',
                        '(focus)': 'event($event)',
                        '(focusin)': 'event($event)',
                        '(focusout)': 'event($event)',
                        '(input)': 'event($event)',
                        '(invalid)': 'event($event)',
                        '(select)': 'event($event)'
                    },
                    encapsulation: i0.ViewEncapsulation.None,
                    styles: [".adf-cloud-upload-widget-container{margin-bottom:15px}.adf-cloud-upload-widget-container input{display:none}.adf-cloud-upload-widget{border-top:.84375em solid transparent;padding:.4375em 0;width:100%;word-break:break-all}.adf-cloud-upload-widget__icon{cursor:pointer;float:left;padding:6px}.adf-cloud-upload-widget__reset{margin-top:-2px}.adf-cloud-upload-files-row .mat-line{margin-bottom:0}"]
                },] }
    ];
    UploadCloudWidgetComponent.ctorParameters = function () { return [
        { type: i1.FormService },
        { type: i1.ThumbnailService },
        { type: ProcessCloudContentService },
        { type: i1.NotificationService },
        { type: i1.LogService }
    ]; };
    UploadCloudWidgetComponent.propDecorators = {
        fileInput: [{ type: i0.ViewChild, args: ['uploadFiles',] }]
    };

    var AttachFileCloudWidgetComponent = /** @class */ (function (_super) {
        __extends(AttachFileCloudWidgetComponent, _super);
        function AttachFileCloudWidgetComponent(formService, logger, thumbnails, processCloudContentService, notificationService, contentNodeSelectorService, appConfigService, apiService, contentNodeSelectorPanelService) {
            var _this = _super.call(this, formService, thumbnails, processCloudContentService, notificationService, logger) || this;
            _this.contentNodeSelectorService = contentNodeSelectorService;
            _this.appConfigService = appConfigService;
            _this.apiService = apiService;
            _this.contentNodeSelectorPanelService = contentNodeSelectorPanelService;
            _this.typeId = 'AttachFileCloudWidgetComponent';
            _this.rootNodeId = AttachFileCloudWidgetComponent.ALIAS_USER_FOLDER;
            _this.displayedColumns = ['icon', 'fileName', 'action'];
            return _this;
        }
        Object.defineProperty(AttachFileCloudWidgetComponent.prototype, "nodesApi", {
            get: function () {
                var _a;
                this._nodesApi = (_a = this._nodesApi) !== null && _a !== void 0 ? _a : new jsApi.NodesApi(this.apiService.getInstance());
                return this._nodesApi;
            },
            enumerable: false,
            configurable: true
        });
        AttachFileCloudWidgetComponent.prototype.ngOnInit = function () {
            var _e;
            var _a, _b;
            _super.prototype.ngOnInit.call(this);
            if (this.hasFile && this.field.value.length === 1) {
                var files = this.field.value || this.field.form.values[this.field.id];
                this.contentModelFormFileHandler(files[0]);
            }
            this.field.params.displayableCMProperties = (_a = this.field.params.displayableCMProperties) !== null && _a !== void 0 ? _a : [];
            (_e = this.displayedColumns).splice.apply(_e, __spread([2, 0], (_b = this.field.params.displayableCMProperties) === null || _b === void 0 ? void 0 : _b.map(function (property) { return property === null || property === void 0 ? void 0 : property.name; })));
        };
        AttachFileCloudWidgetComponent.prototype.isPathStaticType = function () {
            var _a, _b, _c;
            return ((_c = (_b = (_a = this.field.params) === null || _a === void 0 ? void 0 : _a.fileSource) === null || _b === void 0 ? void 0 : _b.destinationFolderPath) === null || _c === void 0 ? void 0 : _c.type) === DestinationFolderPathType.STATIC_TYPE;
        };
        AttachFileCloudWidgetComponent.prototype.isUploadButtonVisible = function () {
            return (!this.hasFile || this.multipleOption) && !this.field.readOnly;
        };
        AttachFileCloudWidgetComponent.prototype.onRemoveAttachFile = function (file) {
            var _a;
            this.removeFile(file);
            if (file['id'] === ((_a = this.selectedNode) === null || _a === void 0 ? void 0 : _a.id)) {
                this.selectedNode = null;
                this.contentModelFormFileHandler();
            }
        };
        AttachFileCloudWidgetComponent.prototype.fetchAppNameFromAppConfig = function () {
            var _a;
            return (_a = this.appConfigService.get('alfresco-deployed-apps')[0]) === null || _a === void 0 ? void 0 : _a.name;
        };
        AttachFileCloudWidgetComponent.prototype.replaceAppNameAliasWithValue = function (path) {
            if (path === null || path === void 0 ? void 0 : path.match(AttachFileCloudWidgetComponent.APP_NAME)) {
                var appName = this.fetchAppNameFromAppConfig();
                return path.replace(AttachFileCloudWidgetComponent.APP_NAME, appName);
            }
            return path;
        };
        AttachFileCloudWidgetComponent.prototype.openSelectDialog = function () {
            return __awaiter(this, void 0, void 0, function () {
                var selectedMode, nodeId;
                var _this = this;
                return __generator(this, function (_e) {
                    switch (_e.label) {
                        case 0:
                            selectedMode = this.field.params.multiple ? 'multiple' : 'single';
                            return [4 /*yield*/, this.getDestinationFolderNodeId()];
                        case 1:
                            nodeId = _e.sent();
                            this.rootNodeId = nodeId ? nodeId : AttachFileCloudWidgetComponent.ALIAS_USER_FOLDER;
                            this.contentNodeSelectorPanelService.customModels = this.field.params.customModels;
                            this.contentNodeSelectorService
                                .openUploadFileDialog(this.rootNodeId, selectedMode, this.isAlfrescoAndLocal(), true)
                                .subscribe(function (selections) {
                                selections.forEach(function (node) { return (node['isExternal'] = true); });
                                var selectionWithoutDuplication = _this.removeExistingSelection(selections);
                                _this.fixIncompatibilityFromPreviousAndNewForm(selectionWithoutDuplication);
                                if (_this.field.value.length === 1) {
                                    _this.contentModelFormFileHandler(selections && selections.length > 0 ? selections[0] : null);
                                }
                            });
                            return [2 /*return*/];
                    }
                });
            });
        };
        AttachFileCloudWidgetComponent.prototype.getDestinationFolderNodeId = function () {
            var _a, _b, _c, _d;
            return __awaiter(this, void 0, void 0, function () {
                var rootNodeId, _e;
                return __generator(this, function (_f) {
                    switch (_f.label) {
                        case 0:
                            _e = (_d = (_c = (_b = (_a = this.field) === null || _a === void 0 ? void 0 : _a.params) === null || _b === void 0 ? void 0 : _b.fileSource) === null || _c === void 0 ? void 0 : _c.destinationFolderPath) === null || _d === void 0 ? void 0 : _d.type;
                            switch (_e) {
                                case DestinationFolderPathType.STATIC_TYPE: return [3 /*break*/, 1];
                                case DestinationFolderPathType.STRING_TYPE: return [3 /*break*/, 3];
                                case DestinationFolderPathType.FOLDER_TYPE: return [3 /*break*/, 5];
                            }
                            return [3 /*break*/, 7];
                        case 1: return [4 /*yield*/, this.getNodeIdFromPath(this.field.params.fileSource.destinationFolderPath)];
                        case 2:
                            rootNodeId = _f.sent();
                            return [3 /*break*/, 9];
                        case 3: return [4 /*yield*/, this.getNodeIdFromPath(this.field.params.fileSource.destinationFolderPath)];
                        case 4:
                            rootNodeId = _f.sent();
                            return [3 /*break*/, 9];
                        case 5: return [4 /*yield*/, this.getNodeIdFromFolderVariableValue(this.field.params.fileSource.destinationFolderPath)];
                        case 6:
                            rootNodeId = _f.sent();
                            return [3 /*break*/, 9];
                        case 7: return [4 /*yield*/, this.getNodeIdFromPath({ type: '', value: AttachFileCloudWidgetComponent.ALIAS_USER_FOLDER })];
                        case 8:
                            rootNodeId = _f.sent();
                            return [3 /*break*/, 9];
                        case 9: return [2 /*return*/, rootNodeId];
                    }
                });
            });
        };
        AttachFileCloudWidgetComponent.prototype.getNodeIdFromPath = function (destinationFolderPath) {
            return __awaiter(this, void 0, void 0, function () {
                var nodeId, destinationPath, error_1;
                return __generator(this, function (_e) {
                    switch (_e.label) {
                        case 0:
                            destinationPath = this.getAliasAndRelativePathFromDestinationFolderPath(destinationFolderPath.value);
                            destinationPath.path = this.replaceAppNameAliasWithValue(destinationPath.path);
                            _e.label = 1;
                        case 1:
                            _e.trys.push([1, 3, , 4]);
                            return [4 /*yield*/, this.contentNodeSelectorService.getNodeIdFromPath(destinationPath)];
                        case 2:
                            nodeId = _e.sent();
                            return [3 /*break*/, 4];
                        case 3:
                            error_1 = _e.sent();
                            this.logService.error(error_1);
                            return [3 /*break*/, 4];
                        case 4: return [2 /*return*/, nodeId];
                    }
                });
            });
        };
        AttachFileCloudWidgetComponent.prototype.getNodeIdFromFolderVariableValue = function (destinationFolderPath) {
            return __awaiter(this, void 0, void 0, function () {
                var nodeId, error_2;
                return __generator(this, function (_e) {
                    switch (_e.label) {
                        case 0:
                            _e.trys.push([0, 2, , 3]);
                            return [4 /*yield*/, this.contentNodeSelectorService.getNodeIdFromFolderVariableValue(destinationFolderPath.value, AttachFileCloudWidgetComponent.ALIAS_USER_FOLDER)];
                        case 1:
                            nodeId = _e.sent();
                            return [3 /*break*/, 3];
                        case 2:
                            error_2 = _e.sent();
                            this.logService.error(error_2);
                            return [3 /*break*/, 3];
                        case 3: return [2 /*return*/, nodeId];
                    }
                });
            });
        };
        AttachFileCloudWidgetComponent.prototype.getAliasAndRelativePathFromDestinationFolderPath = function (destinationFolderPath) {
            var alias;
            var path;
            if (destinationFolderPath) {
                var startOfRelativePathIndex = destinationFolderPath.indexOf('/');
                if (startOfRelativePathIndex >= 0) {
                    alias = destinationFolderPath.substring(0, startOfRelativePathIndex);
                    path = destinationFolderPath.substring(startOfRelativePathIndex, destinationFolderPath.length);
                }
                else {
                    alias = destinationFolderPath;
                }
            }
            return this.isValidAlias(alias) ? { alias: alias, path: path } : { alias: AttachFileCloudWidgetComponent.ALIAS_USER_FOLDER, path: undefined };
        };
        AttachFileCloudWidgetComponent.prototype.removeExistingSelection = function (selections) {
            var existingNode = __spread(this.field.value || []);
            return selections.filter(function (opt) { return !existingNode.some(function (node) { return node.id === opt.id; }); });
        };
        AttachFileCloudWidgetComponent.prototype.downloadContent = function (file) {
            this.processCloudContentService.downloadFile(file.id);
        };
        AttachFileCloudWidgetComponent.prototype.onAttachFileClicked = function (nodeSelector) {
            nodeSelector.nodeId = nodeSelector.id;
            this.fileClicked(new i1.ContentLinkModel(nodeSelector));
        };
        AttachFileCloudWidgetComponent.prototype.getWidgetIcon = function () {
            return this.isAlfrescoAndLocal() ? 'file_upload' : 'attach_file';
        };
        AttachFileCloudWidgetComponent.prototype.onRowClicked = function (file) {
            var _a;
            if (((_a = this.selectedNode) === null || _a === void 0 ? void 0 : _a.id) === (file === null || file === void 0 ? void 0 : file.id)) {
                this.selectedNode = null;
            }
            else {
                this.selectedNode = file;
            }
            this.contentModelFormFileHandler(this.selectedNode);
        };
        AttachFileCloudWidgetComponent.prototype.contentModelFormFileHandler = function (file) {
            var _this = this;
            if ((file === null || file === void 0 ? void 0 : file.id) && this.isRetrieveMetadataOptionEnabled()) {
                var values_1 = {};
                this.nodesApi.getNode(file.id).then(function (acsNode) {
                    var _a;
                    var metadata = (_a = acsNode === null || acsNode === void 0 ? void 0 : acsNode.entry) === null || _a === void 0 ? void 0 : _a.properties;
                    if (metadata) {
                        var keys = Object.keys(metadata);
                        keys.forEach(function (key) {
                            var sanitizedKey = key.replace(':', '_');
                            values_1[sanitizedKey] = metadata[key];
                        });
                        _this.formService.updateFormValuesRequested.next(values_1);
                    }
                });
            }
            this.fileClicked(new i1.UploadWidgetContentLinkModel(file, this.field.id));
        };
        AttachFileCloudWidgetComponent.prototype.isRetrieveMetadataOptionEnabled = function () {
            var _a, _b;
            return ((_b = (_a = this.field) === null || _a === void 0 ? void 0 : _a.params) === null || _b === void 0 ? void 0 : _b.menuOptions) && this.field.params.menuOptions[AttachFileCloudWidgetComponent.RETRIEVE_METADATA_OPTION];
        };
        AttachFileCloudWidgetComponent.prototype.isValidAlias = function (alias) {
            return alias && AttachFileCloudWidgetComponent.VALID_ALIAS.includes(alias);
        };
        AttachFileCloudWidgetComponent.prototype.ngOnDestroy = function () {
            this.contentNodeSelectorPanelService.customModels = [];
        };
        return AttachFileCloudWidgetComponent;
    }(UploadCloudWidgetComponent));
    AttachFileCloudWidgetComponent.ALIAS_ROOT_FOLDER = '-root-';
    AttachFileCloudWidgetComponent.ALIAS_USER_FOLDER = '-my-';
    AttachFileCloudWidgetComponent.APP_NAME = '-appname-';
    AttachFileCloudWidgetComponent.VALID_ALIAS = [
        AttachFileCloudWidgetComponent.ALIAS_ROOT_FOLDER,
        AttachFileCloudWidgetComponent.ALIAS_USER_FOLDER, '-shared-'
    ];
    AttachFileCloudWidgetComponent.RETRIEVE_METADATA_OPTION = 'retrieveMetadata';
    AttachFileCloudWidgetComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'adf-cloud-attach-file-cloud-widget',
                    template: "<div class=\"adf-attach-file-widget-container\">\n    <div class=\"adf-attach-widget {{field.className}}\" [class.adf-invalid]=\"!field.isValid\"\n        [class.adf-readonly]=\"field.readOnly\">\n        <label class=\"adf-label\" [attr.for]=\"field.id\">{{field.name}}\n            <span *ngIf=\"isRequired()\">*</span>\n        </label>\n        <div class=\"adf-attach-widget-container\">\n            <div class=\"adf-attach-widget__menu-upload\" *ngIf=\"isUploadButtonVisible()\">\n                <button (click)=\"openSelectDialog()\" mat-raised-button color=\"primary\" [id]=\"field.id\"\n                    [matTooltip]=\"field.tooltip\" matTooltipPosition=\"above\" matTooltipShowDelay=\"1000\">\n                    {{ 'FORM.FIELD.ATTACH' | translate }}\n                    <mat-icon>{{getWidgetIcon()}}</mat-icon>\n                </button>\n            </div>\n        </div>\n    </div>\n\n    <div id=\"adf-attach-widget-readonly-list\" class=\"adf-attach-widget-readonly-table\">\n        <adf-cloud-file-properties-table\n            [uploadedFiles]=\"uploadedFiles\"\n            [hasFile]=\"hasFile\"\n            [selectedNode]=\"selectedNode\"\n            [field]=\"field\"\n            [displayedColumns]=\"displayedColumns\"\n            [mimeTypeIcon]=\"mimeTypeIcon\"\n            (rowClick)=\"onRowClicked($event)\"\n            (attachFileClick)=\"onAttachFileClicked($event)\"\n            (downloadFile)=\"downloadContent($event)\"\n            (contentModelFileHandler)=\"contentModelFormFileHandler($event)\"\n            (removeAttachFile)=\"onRemoveAttachFile($event)\"\n        ></adf-cloud-file-properties-table>\n        <div *ngIf=\"!hasFile && field.readOnly\" id=\"{{'adf-attach-empty-list-'+field.id}}\">\n            {{ 'FORM.FIELD.NO_FILE_ATTACHED' | translate }}\n        </div>\n\n    </div>\n\n    <error-widget [error]=\"field.validationSummary\"></error-widget>\n    <error-widget *ngIf=\"isInvalidFieldRequired()\" required=\"{{ 'FORM.FIELD.REQUIRED' | translate }}\"></error-widget>\n</div>\n",
                    host: {
                        '(click)': 'event($event)',
                        '(blur)': 'event($event)',
                        '(change)': 'event($event)',
                        '(focus)': 'event($event)',
                        '(focusin)': 'event($event)',
                        '(focusout)': 'event($event)',
                        '(input)': 'event($event)',
                        '(invalid)': 'event($event)',
                        '(select)': 'event($event)'
                    },
                    encapsulation: i0.ViewEncapsulation.None,
                    styles: [".adf-attach-widget-container{align-items:center;display:flex}.adf-attach-widget-container input{cursor:pointer;height:100%;opacity:0;position:absolute;right:0;top:0;width:300px;z-index:4}.adf-attach-widget__menu-upload{align-items:center;display:flex;margin-right:8px}.adf-attach-widget__menu-upload .mat-raised-button{font-size:12px;line-height:28px}.adf-attach-widget__menu-upload button span{font-size:12px}.adf-attach-widget__menu-upload button span mat-icon{height:12px;line-height:12px;width:12px}.adf-attach-widget__menu-upload button span .material-icons{font-size:18px}.adf-attach-widget__input-type{height:.1px;opacity:0;overflow:hidden;position:absolute;width:.1px;z-index:-1}.adf-attach-widget__image-logo{padding-left:5px}.adf-attach-widget-repo-button{padding-left:10px}.adf-attach-widget-repo-button .mat-button-wrapper{display:inline}.adf-attach-widget-repo-button .mat-mini-fab.mat-accent{background-color:inherit}.adf-attach-widget{background:var(--theme-colors-mat-grey);border-bottom:none;display:flex;justify-content:space-between;min-height:27px;padding:.4375em;word-break:break-all}.adf-attach-widget .adf-label{font-size:var(--theme-caption-font-size);line-height:var(--theme-headline-line-height);margin-left:8px;text-align:left;white-space:nowrap;width:32px}.adf-attach-widget__icon{cursor:pointer;float:left;padding:6px}.adf-attach-widget__reset{margin-top:-2px}.adf-attach-files-row div.mat-list-item-content{cursor:pointer}.adf-attach-files-row .mat-line{margin-bottom:0}.adf-attach-selected-file-row div.mat-list-item-content .adf-datatable-selected{color:var(--theme-primary-color);padding-right:6px}.adf-attach-file-widget-container{margin:15px}"]
                },] }
    ];
    AttachFileCloudWidgetComponent.ctorParameters = function () { return [
        { type: i1.FormService },
        { type: i1.LogService },
        { type: i1.ThumbnailService },
        { type: ProcessCloudContentService },
        { type: i1.NotificationService },
        { type: ContentCloudNodeSelectorService },
        { type: i1.AppConfigService },
        { type: i1.AlfrescoApiService },
        { type: adfContentServices.ContentNodeSelectorPanelService }
    ]; };

    var PropertiesViewerWidgetComponent = /** @class */ (function (_super) {
        __extends(PropertiesViewerWidgetComponent, _super);
        function PropertiesViewerWidgetComponent(formService) {
            var _this = _super.call(this, formService) || this;
            _this.nodeContentLoaded = new i0.EventEmitter();
            return _this;
        }
        PropertiesViewerWidgetComponent.prototype.onNodeContentLoaded = function (node) {
            this.nodeContentLoaded.emit(node);
        };
        return PropertiesViewerWidgetComponent;
    }(i1.WidgetComponent));
    PropertiesViewerWidgetComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'adf-properties-viewer-widget',
                    template: "<div class=\"adf-file-viewer-widget {{field.className}}\" [class.adf-invalid]=\"!field.isValid\"\n    [class.adf-readonly]=\"field.readOnly\">\n    <label class=\"adf-label\" [attr.for]=\"field.id\">{{field.name | translate }}<span\n            *ngIf=\"isRequired()\">*</span></label>\n    <ng-template #properties [ngTemplateOutlet]=\"properties\" let-properties=\"properties\" [ngTemplateOutletContext]=\"{ properties: field.params?.propertiesViewerOptions }\">\n        <adf-properties-viewer-wrapper *ngIf=\"field.value\" [nodeId]=\"field.value\"\n            [displayDefaultProperties]=\"properties?.displayDefaultProperties !== undefined ?  properties?.displayDefaultProperties : true\"\n            [expanded]=\"properties?.expanded !== undefined ? properties?.expanded : true\"\n            [preset]=\"properties?.preset\"\n            [displayEmpty]=\"properties?.displayEmpty !== undefined ? properties?.displayEmpty : false\"\n            [editable]=\"properties?.editable !== undefined ? properties?.editable : false\"\n            [multi]=\"properties?.multi !== undefined ? properties?.multi : false\"\n            [displayAspect]=\"properties?.displayAspect !== undefined ? properties?.displayAspect : null\"\n            [copyToClipboardAction]=\"properties?.copyToClipboardAction !== undefined ? properties?.copyToClipboardAction : true\"\n            [useChipsForMultiValueProperty]=\"properties?.useChipsForMultiValueProperty !== undefined ? properties?.useChipsForMultiValueProperty : true\"\n            (nodeContentLoaded)=\"onNodeContentLoaded($event)\">\n        </adf-properties-viewer-wrapper>\n    </ng-template>\n    <error-widget [error]=\"field.validationSummary\"></error-widget>\n</div>\n",
                    host: {
                        '(click)': 'event($event)',
                        '(blur)': 'event($event)',
                        '(change)': 'event($event)',
                        '(focus)': 'event($event)',
                        '(focusin)': 'event($event)',
                        '(focusout)': 'event($event)',
                        '(input)': 'event($event)',
                        '(invalid)': 'event($event)',
                        '(select)': 'event($event)'
                    },
                    encapsulation: i0.ViewEncapsulation.None,
                    styles: ["adf-properties-viewer-widget{height:100%;width:100%}adf-properties-viewer-widget adf-properties-viewer-wrapper{border:1px solid var(--theme-border-color);border-radius:6px;display:block;height:100%;width:100%}adf-properties-viewer-widget adf-properties-viewer-wrapper .adf-properties-viewer-wrapper-loading{height:100%;width:100%}adf-properties-viewer-widget adf-properties-viewer-wrapper .adf-properties-viewer-wrapper-loading mat-progress-spinner{display:block;margin:auto}"]
                },] }
    ];
    PropertiesViewerWidgetComponent.ctorParameters = function () { return [
        { type: i1.FormService }
    ]; };
    PropertiesViewerWidgetComponent.propDecorators = {
        nodeContentLoaded: [{ type: i0.Output }]
    };

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var PropertiesViewerWrapperComponent = /** @class */ (function () {
        function PropertiesViewerWrapperComponent(nodesApiService) {
            this.nodesApiService = nodesApiService;
            this.loading = true;
            this.displayAspect = null;
            this.nodeContentLoaded = new i0.EventEmitter();
        }
        PropertiesViewerWrapperComponent.prototype.ngOnChanges = function (changes) {
            if (changes && changes['nodeId'] && changes['nodeId'].currentValue && !changes['nodeId'].isFirstChange()) {
                this.getNode(changes['nodeId'].currentValue);
            }
        };
        PropertiesViewerWrapperComponent.prototype.ngOnInit = function () {
            if (this.nodeId) {
                this.getNode(this.nodeId);
            }
        };
        PropertiesViewerWrapperComponent.prototype.getNode = function (nodeId) {
            var _this = this;
            this.loading = true;
            this.nodesApiService.getNode(nodeId).subscribe(function (retrievedNode) {
                _this.node = retrievedNode;
                _this.loading = false;
                _this.nodeContentLoaded.emit(retrievedNode);
            });
        };
        return PropertiesViewerWrapperComponent;
    }());
    PropertiesViewerWrapperComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'adf-properties-viewer-wrapper',
                    template: "<adf-content-metadata [displayDefaultProperties]=\"displayDefaultProperties\" [expanded]=\"expanded\" [node]=\"node\"\n    [preset]=\"preset\" [displayEmpty]=\"displayEmpty\" [editable]=\"editable\" [multi]=\"multi\"\n    [displayAspect]=\"displayAspect\" [copyToClipboardAction]=\"copyToClipboardAction\"\n    [useChipsForMultiValueProperty]=\"useChipsForMultiValueProperty\" *ngIf=\"!loading; else loadingTemplate\">\n</adf-content-metadata>\n<ng-template #loadingTemplate>\n    <div class=\"adf-properties-viewer-wrapper-loading\">\n        <mat-progress-spinner></mat-progress-spinner>\n    </div>\n</ng-template>\n",
                    encapsulation: i0.ViewEncapsulation.None
                },] }
    ];
    PropertiesViewerWrapperComponent.ctorParameters = function () { return [
        { type: i1.NodesApiService }
    ]; };
    PropertiesViewerWrapperComponent.propDecorators = {
        nodeId: [{ type: i0.Input }],
        editable: [{ type: i0.Input }],
        displayEmpty: [{ type: i0.Input }],
        expanded: [{ type: i0.Input }],
        multi: [{ type: i0.Input }],
        preset: [{ type: i0.Input }],
        displayDefaultProperties: [{ type: i0.Input }],
        displayAspect: [{ type: i0.Input }],
        copyToClipboardAction: [{ type: i0.Input }],
        useChipsForMultiValueProperty: [{ type: i0.Input }],
        nodeContentLoaded: [{ type: i0.Output }]
    };

    var RadioButtonsCloudWidgetComponent = /** @class */ (function (_super) {
        __extends(RadioButtonsCloudWidgetComponent, _super);
        function RadioButtonsCloudWidgetComponent(formService, formCloudService, logService) {
            var _this = _super.call(this, formService) || this;
            _this.formService = formService;
            _this.formCloudService = formCloudService;
            _this.logService = logService;
            _this.typeId = 'RadioButtonsCloudWidgetComponent';
            _this.onDestroy$ = new rxjs.Subject();
            return _this;
        }
        RadioButtonsCloudWidgetComponent.prototype.ngOnInit = function () {
            if (this.field && this.field.restUrl) {
                this.getValuesFromRestApi();
            }
        };
        RadioButtonsCloudWidgetComponent.prototype.getValuesFromRestApi = function () {
            var _this = this;
            this.formCloudService.getRestWidgetData(this.field.form.id, this.field.id)
                .pipe(operators.takeUntil(this.onDestroy$))
                .subscribe(function (result) {
                _this.field.options = result;
                _this.field.updateForm();
            }, function (err) { return _this.handleError(err); });
        };
        RadioButtonsCloudWidgetComponent.prototype.onOptionClick = function (optionSelected) {
            this.field.value = optionSelected;
            this.fieldChanged.emit(this.field);
        };
        RadioButtonsCloudWidgetComponent.prototype.handleError = function (error) {
            this.logService.error(error);
        };
        RadioButtonsCloudWidgetComponent.prototype.isChecked = function (option) {
            var _a, _b;
            if (this.field.value && typeof this.field.value === 'object') {
                var id = 'id';
                var name = 'name';
                if (this.field.restUrl) {
                    id = (_a = this.field.restIdProperty) !== null && _a !== void 0 ? _a : 'id';
                    name = (_b = this.field.restLabelProperty) !== null && _b !== void 0 ? _b : 'name';
                }
                return this.field.value[id] === option.id || this.field.value[name] === option.name;
            }
            return this.field.value === option.id;
        };
        return RadioButtonsCloudWidgetComponent;
    }(i1.WidgetComponent));
    RadioButtonsCloudWidgetComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'radio-buttons-cloud-widget',
                    template: "<div class=\"adf-radio-buttons-widget-cloud {{field.className}}\"\n     [class.adf-invalid]=\"!field.isValid\" [class.adf-readonly]=\"field.readOnly\" [id]=\"field.id\">\n    <div class=\"adf-radio-button-container\">\n        <label class=\"adf-label\" [attr.for]=\"field.id\">{{field.name | translate }}<span *ngIf=\"isRequired()\">*</span></label>\n        <mat-radio-group class=\"adf-radio-group\" [(ngModel)]=\"field.value\" [disabled]=\"field.readOnly\">\n            <mat-radio-button\n                [matTooltip]=\"field.tooltip\"\n                matTooltipPosition=\"above\"\n                matTooltipShowDelay=\"1000\"\n                [id]=\"field.id + '-' + opt.id\"\n                [name]=\"field.id\"\n                [value]=\"opt.id\"\n                [checked]=\"isChecked(opt)\"\n                (change)=\"onOptionClick(opt.id)\"\n                color=\"primary\"\n                class=\"adf-radio-button\" *ngFor=\"let opt of field.options\" >\n                {{opt.name}}\n            </mat-radio-button>\n        </mat-radio-group>\n    </div>\n    <error-widget [error]=\"field.validationSummary\" ></error-widget>\n    <error-widget *ngIf=\"isInvalidFieldRequired()\" required=\"{{ 'FORM.FIELD.REQUIRED' | translate }}\"></error-widget>\n</div>\n",
                    host: {
                        '(click)': 'event($event)',
                        '(blur)': 'event($event)',
                        '(change)': 'event($event)',
                        '(focus)': 'event($event)',
                        '(focusin)': 'event($event)',
                        '(focusout)': 'event($event)',
                        '(input)': 'event($event)',
                        '(invalid)': 'event($event)',
                        '(select)': 'event($event)'
                    },
                    encapsulation: i0.ViewEncapsulation.None,
                    styles: [".adf-radio-button-container{display:flex;flex-direction:column;margin-bottom:15px}.adf-radio-group{display:inline-flex;flex-direction:column;margin-left:5px;margin-top:15px}.adf-radio-button{margin:5px}"]
                },] }
    ];
    RadioButtonsCloudWidgetComponent.ctorParameters = function () { return [
        { type: i1.FormService },
        { type: FormCloudService },
        { type: i1.LogService }
    ]; };

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var FilePropertiesTableCloudComponent = /** @class */ (function () {
        function FilePropertiesTableCloudComponent(localizedDatePipe, thumbnailService) {
            this.localizedDatePipe = localizedDatePipe;
            this.thumbnailService = thumbnailService;
            this.rowClick = new i0.EventEmitter();
            this.attachFileClick = new i0.EventEmitter();
            this.downloadFile = new i0.EventEmitter();
            this.contentModelFileHandler = new i0.EventEmitter();
            this.removeAttachFile = new i0.EventEmitter();
        }
        FilePropertiesTableCloudComponent.prototype.onRowClicked = function (file) {
            this.rowClick.emit(file);
        };
        FilePropertiesTableCloudComponent.prototype.onAttachFileClicked = function (nodeSelector) {
            this.attachFileClick.emit(nodeSelector);
        };
        FilePropertiesTableCloudComponent.prototype.downloadContent = function (file) {
            this.downloadFile.emit(file);
        };
        FilePropertiesTableCloudComponent.prototype.contentModelFormFileHandler = function (file) {
            this.contentModelFileHandler.emit(file);
        };
        FilePropertiesTableCloudComponent.prototype.onRemoveAttachFile = function (file) {
            this.removeAttachFile.emit(file);
        };
        FilePropertiesTableCloudComponent.prototype.getIcon = function (mimeType) {
            return this.thumbnailService.getMimeTypeIcon(mimeType);
        };
        FilePropertiesTableCloudComponent.prototype.getColumnValue = function (file, displayableCMProperty) {
            var _a;
            if (!file.properties[displayableCMProperty.prefixedName]) {
                var fieldProperty = (_a = this.field.params.displayableCMProperties) === null || _a === void 0 ? void 0 : _a.find(function (property) { return property.name === displayableCMProperty.name; });
                return fieldProperty.defaultValue ? this.checkDateTypeAndTransform(displayableCMProperty.dataType, fieldProperty.defaultValue) : '--';
            }
            return file.properties[displayableCMProperty.prefixedName] ?
                this.checkDateTypeAndTransform(displayableCMProperty.dataType, file.properties[displayableCMProperty.prefixedName]) :
                '--';
        };
        FilePropertiesTableCloudComponent.prototype.checkDateTypeAndTransform = function (dataType, value) {
            if (dataType === 'd:date') {
                return this.localizedDatePipe.transform(value);
            }
            else if (dataType === 'd:datetime') {
                return this.localizedDatePipe.transform(value, 'medium');
            }
            return value;
        };
        FilePropertiesTableCloudComponent.prototype.displayMenuOption = function (option) {
            var _a, _b;
            return ((_b = (_a = this.field) === null || _a === void 0 ? void 0 : _a.params) === null || _b === void 0 ? void 0 : _b.menuOptions) ? this.field.params.menuOptions[option] : option !== FilePropertiesTableCloudComponent.RETRIEVE_METADATA_OPTION;
        };
        return FilePropertiesTableCloudComponent;
    }());
    FilePropertiesTableCloudComponent.RETRIEVE_METADATA_OPTION = 'retrieveMetadata';
    FilePropertiesTableCloudComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'adf-cloud-file-properties-table',
                    template: "<div class=\"adf-file-properties-table\">\n    <table mat-table [dataSource]=\"uploadedFiles\" class=\"mat-elevation-z0\" *ngIf=\"hasFile\">\n        <ng-container matColumnDef=\"icon\">\n            <th mat-header-cell *matHeaderCellDef></th>\n            <td mat-cell *matCellDef=\"let element\">\n                <mat-icon mat-list-icon class=\"adf-datatable-selected\"\n                    *ngIf=\"selectedNode && element.id === selectedNode.id\" (click)=\"onRowClicked(element)\">\n                    check_circle\n                </mat-icon>\n                <img mat-list-icon class=\"adf-attach-widget__icon\"\n                    *ngIf=\"!selectedNode || element.id !== selectedNode.id\" [id]=\"'file-'+element?.id+'-icon'\"\n                    (click)=\"onRowClicked(element)\"\n                    [src]=\"element.content ? getIcon(element.content.mimeType) : getIcon(element['mimeType'])\"\n                    [alt]=\"mimeTypeIcon\" role=\"button\" tabindex=\"0\" />\n            </td>\n        </ng-container>\n    \n        <ng-container matColumnDef=\"fileName\">\n            <th mat-header-cell *matHeaderCellDef>{{ 'FORM.FIELD.FILE_NAME' | translate }}</th>\n            <td mat-cell *matCellDef=\"let element\">\n                <span matLine id=\"{{'file-'+element?.id}}\" role=\"button\" tabindex=\"0\" class=\"adf-file\"\n                    (click)=\"onRowClicked(element)\">{{element.name}}</span>\n            </td>\n        </ng-container>\n    \n        <ng-container *ngFor=\"let columnName of field?.params?.displayableCMProperties\" [matColumnDef]=\"columnName.name\">\n            <th mat-header-cell *matHeaderCellDef>{{ columnName.title ? columnName.title : columnName.name | titlecase\n                }}</th>\n            <td mat-cell *matCellDef=\"let row\">\n                <span matLine id=\"{{'fileProperty-'+row?.id+'-'+columnName?.name}}\" role=\"button\" tabindex=\"0\"\n                    (click)=\"onRowClicked(row)\">{{ getColumnValue(row, columnName) }}</span>\n            </td>\n        </ng-container>\n    \n        <ng-container matColumnDef=\"action\">\n            <th mat-header-cell *matHeaderCellDef></th>\n            <td mat-cell *matCellDef=\"let element\">\n                <button id=\"{{'file-'+element?.id+'-option-menu'}}\" mat-icon-button [matMenuTriggerFor]=\"fileActionMenu\"\n                    *ngIf=\"!!element.content?.mimeType\">\n                    <mat-icon>more_vert</mat-icon>\n                </button>\n                <mat-menu #fileActionMenu=\"matMenu\" xPosition=\"before\">\n                    <button *ngIf=\"displayMenuOption('show') && !!element.content?.mimeType\"\n                        id=\"{{'file-'+element?.id+'-show-file'}}\" mat-menu-item (click)=\"onAttachFileClicked(element)\">\n                        <mat-icon>visibility</mat-icon>\n                        <span>{{ 'FORM.FIELD.VIEW_FILE' | translate }}</span>\n                    </button>\n                    <button *ngIf=\"displayMenuOption('download') && !!element.content?.mimeType\"\n                        id=\"{{'file-'+element?.id+'-download-file'}}\" mat-menu-item (click)=\"downloadContent(element)\">\n                        <mat-icon>file_download</mat-icon>\n                        <span>{{ 'FORM.FIELD.DOWNLOAD_FILE' | translate }}</span>\n                    </button>\n                    <button *ngIf=\"displayMenuOption('retrieveMetadata') && !!element.content?.mimeType\"\n                        id=\"{{'file-'+element?.id+'-retrieve-file-metadata'}}\" mat-menu-item\n                        (click)=\"contentModelFormFileHandler(element)\">\n                        <mat-icon class=\"mat-24\">low_priority</mat-icon>\n                        <span>{{ 'ADF_CLOUD_FORM_COMPONENT.RETRIEVE_METADATA' | translate }}</span>\n                    </button>\n                    <button *ngIf=\"!field.readOnly && displayMenuOption('remove')\"\n                        id=\"{{'file-'+element?.id+'-remove-file'}}\" mat-menu-item [id]=\"'file-'+element?.id+'-remove'\"\n                        (click)=\"onRemoveAttachFile(element);\" (keyup.enter)=\"onRemoveAttachFile(element);\">\n                        <mat-icon class=\"mat-24\">highlight_off</mat-icon>\n                        <span>{{ 'FORM.FIELD.REMOVE_FILE' | translate }}</span>\n                    </button>\n                </mat-menu>\n            </td>\n        </ng-container>\n        <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n        <tr mat-row *matRowDef=\"let row; columns: displayedColumns\"></tr>\n    \n    </table>\n</div>\n",
                    styles: [".adf-file-properties-table table{border:1px solid var(--theme-border-color);box-shadow:none;width:100%}.adf-file-properties-table table .adf-datatable-selected{padding:6px}.adf-file-properties-table table tr.mat-header-row{height:32px}.adf-file-properties-table table th{font-weight:700;padding-right:0!important}.adf-file-properties-table table td{max-width:50px;overflow:hidden;padding-right:0!important;text-overflow:ellipsis;white-space:nowrap}.adf-file-properties-table table td.mat-cell:first-of-type,.adf-file-properties-table table td.mat-cell:last-of-type,.adf-file-properties-table table td.mat-footer-cell:first-of-type,.adf-file-properties-table table td.mat-footer-cell:last-of-type{width:18%!important}"]
                },] }
    ];
    FilePropertiesTableCloudComponent.ctorParameters = function () { return [
        { type: i1.LocalizedDatePipe },
        { type: i1.ThumbnailService }
    ]; };
    FilePropertiesTableCloudComponent.propDecorators = {
        uploadedFiles: [{ type: i0.Input }],
        hasFile: [{ type: i0.Input }],
        selectedNode: [{ type: i0.Input }],
        field: [{ type: i0.Input }],
        displayedColumns: [{ type: i0.Input }],
        mimeTypeIcon: [{ type: i0.Input }],
        rowClick: [{ type: i0.Output }],
        attachFileClick: [{ type: i0.Output }],
        downloadFile: [{ type: i0.Output }],
        contentModelFileHandler: [{ type: i0.Output }],
        removeAttachFile: [{ type: i0.Output }]
    };

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var FormCloudModule = /** @class */ (function () {
        function FormCloudModule() {
        }
        return FormCloudModule;
    }());
    FormCloudModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [
                        common.CommonModule,
                        flexLayout.FlexLayoutModule,
                        MaterialModule,
                        forms.FormsModule,
                        forms.ReactiveFormsModule,
                        i1.CoreModule,
                        adfContentServices.ContentNodeSelectorModule,
                        PeopleCloudModule,
                        GroupCloudModule,
                        adfContentServices.ContentMetadataModule
                    ],
                    declarations: [
                        FormCloudComponent,
                        UploadCloudWidgetComponent,
                        FormDefinitionSelectorCloudComponent,
                        FormCustomOutcomesComponent,
                        DropdownCloudWidgetComponent,
                        RadioButtonsCloudWidgetComponent,
                        AttachFileCloudWidgetComponent,
                        DateCloudWidgetComponent,
                        PeopleCloudWidgetComponent,
                        GroupCloudWidgetComponent,
                        PropertiesViewerWrapperComponent,
                        PropertiesViewerWidgetComponent,
                        FilePropertiesTableCloudComponent
                    ],
                    exports: [
                        FormCloudComponent,
                        UploadCloudWidgetComponent,
                        FormDefinitionSelectorCloudComponent,
                        FormCustomOutcomesComponent,
                        DropdownCloudWidgetComponent,
                        RadioButtonsCloudWidgetComponent,
                        AttachFileCloudWidgetComponent,
                        DateCloudWidgetComponent,
                        PeopleCloudWidgetComponent,
                        GroupCloudWidgetComponent,
                        PropertiesViewerWidgetComponent
                    ]
                },] }
    ];

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var StartTaskCloudModule = /** @class */ (function () {
        function StartTaskCloudModule() {
        }
        return StartTaskCloudModule;
    }());
    StartTaskCloudModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [
                        common.CommonModule,
                        flexLayout.FlexLayoutModule,
                        MaterialModule,
                        forms.FormsModule,
                        forms.ReactiveFormsModule,
                        GroupCloudModule,
                        i1.CoreModule,
                        FormCloudModule,
                        PeopleCloudModule
                    ],
                    declarations: [StartTaskCloudComponent],
                    exports: [
                        StartTaskCloudComponent
                    ]
                },] }
    ];

    var TaskHeaderCloudComponent = /** @class */ (function () {
        function TaskHeaderCloudComponent(taskCloudService, translationService, appConfig, cardViewUpdateService) {
            this.taskCloudService = taskCloudService;
            this.translationService = translationService;
            this.appConfig = appConfig;
            this.cardViewUpdateService = cardViewUpdateService;
            this.appName = '';
            this.showTitle = true;
            this.claim = new i0.EventEmitter();
            this.unclaim = new i0.EventEmitter();
            this.error = new i0.EventEmitter();
            this.taskDetails = {};
            this.candidateUsers = [];
            this.candidateGroups = [];
            this.inEdit = false;
            this.displayDateClearAction = false;
            this.isLoading = true;
            this.onDestroy$ = new rxjs.Subject();
            this.dateFormat = this.appConfig.get('dateValues.defaultDateFormat');
            this.dateLocale = this.appConfig.get('dateValues.defaultDateLocale');
            this.dateTimeFormat = this.appConfig.get('dateValue.defaultDateTimeFormat');
        }
        TaskHeaderCloudComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.taskCloudService.dataChangesDetected$
                .pipe(operators.takeUntil(this.onDestroy$))
                .subscribe(function () {
                _this.loadTaskDetailsById(_this.appName, _this.taskId);
            });
            this.cardViewUpdateService.itemUpdated$
                .pipe(operators.takeUntil(this.onDestroy$))
                .subscribe(this.updateTaskDetails.bind(this));
        };
        TaskHeaderCloudComponent.prototype.ngOnChanges = function () {
            this.taskDetails = {};
            if ((this.appName || this.appName === '') && this.taskId) {
                this.loadTaskDetailsById(this.appName, this.taskId);
            }
            else {
                this.error.emit('App Name and Task Id are mandatory');
            }
        };
        TaskHeaderCloudComponent.prototype.loadTaskDetailsById = function (appName, taskId) {
            var _this = this;
            this.isLoading = true;
            this.taskCloudService.getTaskById(appName, taskId).pipe(operators.concatMap(function (task) { return rxjs.forkJoin(rxjs.of(task), _this.taskCloudService.getCandidateUsers(_this.appName, _this.taskId), _this.taskCloudService.getCandidateGroups(_this.appName, _this.taskId)); }), operators.finalize(function () { return (_this.isLoading = false); })).subscribe(function (_a) {
                var _b = __read(_a, 3), taskDetails = _b[0], candidateUsers = _b[1], candidateGroups = _b[2];
                _this.taskDetails = taskDetails;
                _this.candidateGroups = candidateGroups.map(function (user) { return ({ icon: 'group', value: user }); });
                _this.candidateUsers = candidateUsers.map(function (group) { return ({ icon: 'person', value: group }); });
                if (_this.taskDetails.parentTaskId) {
                    _this.loadParentName("" + _this.taskDetails.parentTaskId);
                }
                else {
                    _this.refreshData();
                }
            }, function (err) {
                _this.error.emit(err);
            });
        };
        TaskHeaderCloudComponent.prototype.initDefaultProperties = function () {
            return [
                new i1.CardViewTextItemModel({
                    label: 'ADF_CLOUD_TASK_HEADER.PROPERTIES.ASSIGNEE',
                    value: this.taskDetails.assignee,
                    key: 'assignee',
                    clickable: this.isAssigneePropertyClickable(),
                    default: this.translationService.instant('ADF_CLOUD_TASK_HEADER.PROPERTIES.ASSIGNEE_DEFAULT'),
                    icon: 'create'
                }),
                new i1.CardViewTextItemModel({
                    label: 'ADF_CLOUD_TASK_HEADER.PROPERTIES.STATUS',
                    value: this.taskDetails.status,
                    key: 'status'
                }),
                new i1.CardViewSelectItemModel({
                    label: 'ADF_CLOUD_TASK_HEADER.PROPERTIES.PRIORITY',
                    value: this.taskDetails.priority.toString(),
                    key: 'priority',
                    editable: true,
                    displayNoneOption: false,
                    options$: rxjs.of(this.taskCloudService.priorities)
                }),
                new i1.CardViewDatetimeItemModel({
                    label: 'ADF_CLOUD_TASK_HEADER.PROPERTIES.DUE_DATE',
                    value: this.taskDetails.dueDate,
                    key: 'dueDate',
                    default: this.translationService.instant('ADF_CLOUD_TASK_HEADER.PROPERTIES.DUE_DATE_DEFAULT'),
                    editable: true,
                    format: this.dateTimeFormat,
                    locale: this.dateLocale
                }),
                new i1.CardViewTextItemModel({
                    label: 'ADF_CLOUD_TASK_HEADER.PROPERTIES.CATEGORY',
                    value: this.taskDetails.category,
                    key: 'category',
                    default: this.translationService.instant('ADF_CLOUD_TASK_HEADER.PROPERTIES.CATEGORY_DEFAULT')
                }),
                new i1.CardViewDateItemModel({
                    label: 'ADF_CLOUD_TASK_HEADER.PROPERTIES.CREATED',
                    value: this.taskDetails.createdDate,
                    key: 'created',
                    format: this.dateFormat,
                    locale: this.dateLocale
                }),
                new i1.CardViewTextItemModel({
                    label: 'ADF_CLOUD_TASK_HEADER.PROPERTIES.PARENT_NAME',
                    value: this.parentTaskName,
                    default: this.translationService.instant('ADF_CLOUD_TASK_HEADER.PROPERTIES.PARENT_NAME_DEFAULT'),
                    key: 'parentName',
                    clickable: true
                }),
                new i1.CardViewTextItemModel({
                    label: 'ADF_CLOUD_TASK_HEADER.PROPERTIES.PARENT_TASK_ID',
                    value: this.taskDetails.parentTaskId,
                    key: 'parentTaskId',
                    clickable: true
                }),
                new i1.CardViewDateItemModel({
                    label: 'ADF_CLOUD_TASK_HEADER.PROPERTIES.END_DATE',
                    value: this.taskDetails.completedDate,
                    key: 'endDate',
                    format: this.dateFormat,
                    locale: this.dateLocale
                }),
                new i1.CardViewTextItemModel({
                    label: 'ADF_CLOUD_TASK_HEADER.PROPERTIES.ID',
                    value: this.taskDetails.id,
                    key: 'id'
                }),
                new i1.CardViewTextItemModel({
                    label: 'ADF_CLOUD_TASK_HEADER.PROPERTIES.DESCRIPTION',
                    value: this.taskDetails.description,
                    key: 'description',
                    default: this.translationService.instant('ADF_CLOUD_TASK_HEADER.PROPERTIES.DESCRIPTION_DEFAULT'),
                    multiline: true,
                    editable: true
                }),
                new i1.CardViewArrayItemModel({
                    label: 'ADF_CLOUD_TASK_HEADER.PROPERTIES.CANDIDATE_USERS',
                    value: rxjs.of(this.candidateUsers),
                    key: 'candidateUsers',
                    icon: 'edit',
                    clickable: false,
                    default: this.translationService.instant('ADF_CLOUD_TASK_HEADER.PROPERTIES.CANDIDATE_USERS_DEFAULT'),
                    noOfItemsToDisplay: 2
                }),
                new i1.CardViewArrayItemModel({
                    label: 'ADF_CLOUD_TASK_HEADER.PROPERTIES.CANDIDATE_GROUPS',
                    value: rxjs.of(this.candidateGroups),
                    key: 'candidateGroups',
                    icon: 'edit',
                    clickable: false,
                    default: this.translationService.instant('ADF_CLOUD_TASK_HEADER.PROPERTIES.CANDIDATE_GROUPS_DEFAULT'),
                    noOfItemsToDisplay: 2
                })
            ];
        };
        TaskHeaderCloudComponent.prototype.refreshData = function () {
            var _this = this;
            if (this.taskDetails) {
                var defaultProperties = this.initDefaultProperties();
                var filteredProperties_1 = this.appConfig.get('adf-cloud-task-header.presets.properties');
                this.properties = defaultProperties.filter(function (cardItem) { return _this.isValidSelection(filteredProperties_1, cardItem); });
            }
        };
        TaskHeaderCloudComponent.prototype.updateTaskDetails = function (updateNotification) {
            var _this = this;
            this.taskCloudService.updateTask(this.appName, this.taskId, updateNotification.changed)
                .pipe(operators.catchError(function () {
                _this.cardViewUpdateService.updateElement(updateNotification.target);
                return rxjs.of(null);
            }))
                .subscribe(function (taskDetails) {
                if (taskDetails) {
                    _this.taskDetails = taskDetails;
                }
            });
        };
        TaskHeaderCloudComponent.prototype.loadParentName = function (taskId) {
            var _this = this;
            this.taskCloudService.getTaskById(this.appName, taskId)
                .subscribe(function (taskDetails) {
                _this.parentTaskName = taskDetails.name;
                _this.refreshData();
            });
        };
        TaskHeaderCloudComponent.prototype.isCompleted = function () {
            return this.taskDetails && this.taskDetails.status === 'COMPLETED';
        };
        TaskHeaderCloudComponent.prototype.hasAssignee = function () {
            return !!this.taskDetails.assignee ? true : false;
        };
        TaskHeaderCloudComponent.prototype.isTaskValid = function () {
            return (this.appName || this.appName === '') && !!this.taskId;
        };
        TaskHeaderCloudComponent.prototype.isTaskAssigned = function () {
            return this.taskDetails.assignee !== undefined;
        };
        TaskHeaderCloudComponent.prototype.isTaskEditable = function () {
            return this.taskCloudService.isTaskEditable(this.taskDetails);
        };
        TaskHeaderCloudComponent.prototype.isAssigneePropertyClickable = function () {
            return this.taskCloudService.isAssigneePropertyClickable(this.taskDetails, this.candidateUsers, []);
        };
        TaskHeaderCloudComponent.prototype.isValidSelection = function (filteredProperties, cardItem) {
            return filteredProperties ? filteredProperties.indexOf(cardItem.key) >= 0 : true;
        };
        TaskHeaderCloudComponent.prototype.ngOnDestroy = function () {
            this.onDestroy$.next(true);
            this.onDestroy$.complete();
        };
        return TaskHeaderCloudComponent;
    }());
    TaskHeaderCloudComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'adf-cloud-task-header',
                    template: "<h3 *ngIf=\"showTitle\" class=\"adf-task-title\">{{ taskDetails?.name }}</h3>\n\n<div class=\"adf-task-header-container\">\n    <mat-card *ngIf=\"isTaskValid()\" class=\"adf-card-container\">\n        <mat-card-content>\n            <adf-card-view\n                *ngIf=\"!isLoading; else loadingTemplate\"\n                [displayNoneOption]=\"false\"\n                [properties]=\"properties\"\n                [editable]=\"isTaskEditable()\"\n                [displayClearAction]=\"displayDateClearAction\">\n            </adf-card-view>\n        </mat-card-content>\n    </mat-card>\n</div>\n\n<ng-template #loadingTemplate>\n    <div class=\"adf-task-header-loading\">\n        <mat-spinner></mat-spinner>\n    </div>\n</ng-template>\n",
                    encapsulation: i0.ViewEncapsulation.None,
                    styles: [".adf-controls{display:flex;justify-content:space-between}.adf-edit-controls{display:flex;justify-content:flex-end;margin-left:auto}.adf-save-edit-mode,.adf-switch-to-edit-mode{color:var(--theme-primary-color)}.adf-cancel-edit-mode,.adf-claim-controls{color:#838383}@media screen and (max-width:959px){adf-card-view .adf-property-value{overflow:hidden;text-overflow:ellipsis;white-space:nowrap}}.adf-task-header-loading{display:flex;justify-content:center}"]
                },] }
    ];
    TaskHeaderCloudComponent.ctorParameters = function () { return [
        { type: TaskCloudService },
        { type: i1.TranslationService },
        { type: i1.AppConfigService },
        { type: i1.CardViewUpdateService }
    ]; };
    TaskHeaderCloudComponent.propDecorators = {
        appName: [{ type: i0.Input }],
        taskId: [{ type: i0.Input }],
        showTitle: [{ type: i0.Input }],
        claim: [{ type: i0.Output }],
        unclaim: [{ type: i0.Output }],
        error: [{ type: i0.Output }]
    };

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var TaskHeaderCloudModule = /** @class */ (function () {
        function TaskHeaderCloudModule() {
        }
        return TaskHeaderCloudModule;
    }());
    TaskHeaderCloudModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [
                        common.CommonModule,
                        MaterialModule,
                        i1.CoreModule.forChild()
                    ],
                    declarations: [
                        TaskHeaderCloudComponent
                    ],
                    exports: [
                        TaskHeaderCloudComponent
                    ]
                },] }
    ];

    var CompleteTaskDirective = /** @class */ (function () {
        function CompleteTaskDirective(taskListService) {
            this.taskListService = taskListService;
            this.appName = '';
            this.success = new i0.EventEmitter();
            this.error = new i0.EventEmitter();
            this.invalidParams = [];
        }
        CompleteTaskDirective.prototype.ngOnInit = function () {
            this.validateInputs();
        };
        CompleteTaskDirective.prototype.validateInputs = function () {
            if (!this.isTaskValid()) {
                this.invalidParams.push('taskId');
            }
            if (!this.isAppValid()) {
                this.invalidParams.push('appName');
            }
            if (this.invalidParams.length) {
                throw new Error("Attribute " + this.invalidParams.join(', ') + " is required");
            }
        };
        CompleteTaskDirective.prototype.isTaskValid = function () {
            return this.taskId && this.taskId.length > 0;
        };
        CompleteTaskDirective.prototype.isAppValid = function () {
            return !!this.appName || this.appName === '';
        };
        CompleteTaskDirective.prototype.onClick = function () {
            return __awaiter(this, void 0, void 0, function () {
                var result, error_1;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 2, , 3]);
                            return [4 /*yield*/, this.taskListService.completeTask(this.appName, this.taskId).toPromise()];
                        case 1:
                            result = _a.sent();
                            if (result) {
                                this.success.emit(result);
                            }
                            return [3 /*break*/, 3];
                        case 2:
                            error_1 = _a.sent();
                            this.error.emit(error_1);
                            return [3 /*break*/, 3];
                        case 3: return [2 /*return*/];
                    }
                });
            });
        };
        return CompleteTaskDirective;
    }());
    CompleteTaskDirective.decorators = [
        { type: i0.Directive, args: [{
                    selector: '[adf-cloud-complete-task]'
                },] }
    ];
    CompleteTaskDirective.ctorParameters = function () { return [
        { type: TaskCloudService }
    ]; };
    CompleteTaskDirective.propDecorators = {
        taskId: [{ type: i0.Input }],
        appName: [{ type: i0.Input }],
        success: [{ type: i0.Output }],
        error: [{ type: i0.Output }],
        onClick: [{ type: i0.HostListener, args: ['click',] }]
    };

    var ClaimTaskCloudDirective = /** @class */ (function () {
        function ClaimTaskCloudDirective(taskListService, identityUserService) {
            this.taskListService = taskListService;
            this.identityUserService = identityUserService;
            this.appName = '';
            this.success = new i0.EventEmitter();
            this.error = new i0.EventEmitter();
            this.invalidParams = [];
        }
        ClaimTaskCloudDirective.prototype.ngOnInit = function () {
            this.validateInputs();
        };
        ClaimTaskCloudDirective.prototype.validateInputs = function () {
            if (!this.isTaskValid()) {
                this.invalidParams.push('taskId');
            }
            if (!this.isAppValid()) {
                this.invalidParams.push('appName');
            }
            if (this.invalidParams.length) {
                throw new Error("Attribute " + this.invalidParams.join(', ') + " is required");
            }
        };
        ClaimTaskCloudDirective.prototype.isTaskValid = function () {
            return this.taskId && this.taskId.length > 0;
        };
        ClaimTaskCloudDirective.prototype.isAppValid = function () {
            return !!this.appName || this.appName === '';
        };
        ClaimTaskCloudDirective.prototype.onClick = function () {
            return __awaiter(this, void 0, void 0, function () {
                var error_1;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 2, , 3]);
                            return [4 /*yield*/, this.claimTask()];
                        case 1:
                            _a.sent();
                            return [3 /*break*/, 3];
                        case 2:
                            error_1 = _a.sent();
                            this.error.emit(error_1);
                            return [3 /*break*/, 3];
                        case 3: return [2 /*return*/];
                    }
                });
            });
        };
        ClaimTaskCloudDirective.prototype.claimTask = function () {
            return __awaiter(this, void 0, void 0, function () {
                var currentUser, result, error_2;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            currentUser = this.identityUserService.getCurrentUserInfo().username;
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 3, , 4]);
                            return [4 /*yield*/, this.taskListService.claimTask(this.appName, this.taskId, currentUser).toPromise()];
                        case 2:
                            result = _a.sent();
                            if (result) {
                                this.success.emit(result);
                            }
                            return [3 /*break*/, 4];
                        case 3:
                            error_2 = _a.sent();
                            this.error.emit(error_2);
                            return [3 /*break*/, 4];
                        case 4: return [2 /*return*/];
                    }
                });
            });
        };
        return ClaimTaskCloudDirective;
    }());
    ClaimTaskCloudDirective.decorators = [
        { type: i0.Directive, args: [{
                    selector: '[adf-cloud-claim-task]'
                },] }
    ];
    ClaimTaskCloudDirective.ctorParameters = function () { return [
        { type: TaskCloudService },
        { type: i1.IdentityUserService }
    ]; };
    ClaimTaskCloudDirective.propDecorators = {
        taskId: [{ type: i0.Input }],
        appName: [{ type: i0.Input }],
        success: [{ type: i0.Output }],
        error: [{ type: i0.Output }],
        onClick: [{ type: i0.HostListener, args: ['click',] }]
    };

    var UnClaimTaskCloudDirective = /** @class */ (function () {
        function UnClaimTaskCloudDirective(taskListService) {
            this.taskListService = taskListService;
            this.appName = '';
            this.success = new i0.EventEmitter();
            this.error = new i0.EventEmitter();
            this.invalidParams = [];
        }
        UnClaimTaskCloudDirective.prototype.ngOnInit = function () {
            this.validateInputs();
        };
        UnClaimTaskCloudDirective.prototype.validateInputs = function () {
            if (!this.isTaskValid()) {
                this.invalidParams.push('taskId');
            }
            if (!this.isAppValid()) {
                this.invalidParams.push('appName');
            }
            if (this.invalidParams.length) {
                throw new Error("Attribute " + this.invalidParams.join(', ') + " is required");
            }
        };
        UnClaimTaskCloudDirective.prototype.isTaskValid = function () {
            return this.taskId && this.taskId.length > 0;
        };
        UnClaimTaskCloudDirective.prototype.isAppValid = function () {
            return !!this.appName || this.appName === '';
        };
        UnClaimTaskCloudDirective.prototype.onClick = function () {
            return __awaiter(this, void 0, void 0, function () {
                var error_1;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 2, , 3]);
                            return [4 /*yield*/, this.taskListService.unclaimTask(this.appName, this.taskId).toPromise()];
                        case 1:
                            _a.sent();
                            this.success.emit(this.taskId);
                            return [3 /*break*/, 3];
                        case 2:
                            error_1 = _a.sent();
                            this.error.emit(error_1);
                            return [3 /*break*/, 3];
                        case 3: return [2 /*return*/];
                    }
                });
            });
        };
        return UnClaimTaskCloudDirective;
    }());
    UnClaimTaskCloudDirective.decorators = [
        { type: i0.Directive, args: [{
                    selector: '[adf-cloud-unclaim-task]'
                },] }
    ];
    UnClaimTaskCloudDirective.ctorParameters = function () { return [
        { type: TaskCloudService }
    ]; };
    UnClaimTaskCloudDirective.propDecorators = {
        taskId: [{ type: i0.Input }],
        appName: [{ type: i0.Input }],
        success: [{ type: i0.Output }],
        error: [{ type: i0.Output }],
        onClick: [{ type: i0.HostListener, args: ['click',] }]
    };

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var TaskDirectiveModule = /** @class */ (function () {
        function TaskDirectiveModule() {
        }
        return TaskDirectiveModule;
    }());
    TaskDirectiveModule.decorators = [
        { type: i0.NgModule, args: [{
                    declarations: [
                        CompleteTaskDirective,
                        ClaimTaskCloudDirective,
                        UnClaimTaskCloudDirective
                    ],
                    exports: [
                        CompleteTaskDirective,
                        ClaimTaskCloudDirective,
                        UnClaimTaskCloudDirective
                    ]
                },] }
    ];

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var TaskFormCloudComponent = /** @class */ (function () {
        function TaskFormCloudComponent(taskCloudService, formRenderingService) {
            this.taskCloudService = taskCloudService;
            this.formRenderingService = formRenderingService;
            this.appName = '';
            this.showTitle = true;
            this.showRefreshButton = false;
            this.showValidationIcon = true;
            this.showCancelButton = true;
            this.showCompleteButton = true;
            this.readOnly = false;
            this.formSaved = new i0.EventEmitter();
            this.formCompleted = new i0.EventEmitter();
            this.taskCompleted = new i0.EventEmitter();
            this.taskClaimed = new i0.EventEmitter();
            this.taskUnclaimed = new i0.EventEmitter();
            this.cancelClick = new i0.EventEmitter();
            this.error = new i0.EventEmitter();
            this.formContentClicked = new i0.EventEmitter();
            this.candidateUsers = [];
            this.candidateGroups = [];
            this.loading = false;
            this.formRenderingService.setComponentTypeResolver('upload', function () { return AttachFileCloudWidgetComponent; }, true);
            this.formRenderingService.setComponentTypeResolver('dropdown', function () { return DropdownCloudWidgetComponent; }, true);
            this.formRenderingService.setComponentTypeResolver('date', function () { return DateCloudWidgetComponent; }, true);
        }
        TaskFormCloudComponent.prototype.ngOnInit = function () {
            if (this.appName === '' && this.taskId) {
                this.loadTask();
            }
        };
        TaskFormCloudComponent.prototype.ngOnChanges = function (changes) {
            var appName = changes['appName'];
            if (appName && (appName.currentValue !== appName.previousValue) && this.taskId) {
                this.loadTask();
                return;
            }
            var taskId = changes['taskId'];
            if (taskId && taskId.currentValue && this.appName) {
                this.loadTask();
                return;
            }
        };
        TaskFormCloudComponent.prototype.loadTask = function () {
            var _this = this;
            this.loading = true;
            this.taskCloudService
                .getTaskById(this.appName, this.taskId)
                .subscribe(function (details) {
                _this.taskDetails = details;
                _this.loading = false;
            });
            this.taskCloudService
                .getCandidateUsers(this.appName, this.taskId)
                .subscribe(function (users) { return _this.candidateUsers = users || []; });
            this.taskCloudService
                .getCandidateGroups(this.appName, this.taskId)
                .subscribe(function (groups) { return _this.candidateGroups = groups || []; });
        };
        TaskFormCloudComponent.prototype.hasForm = function () {
            return this.taskDetails && !!this.taskDetails.formKey;
        };
        TaskFormCloudComponent.prototype.canCompleteTask = function () {
            return this.showCompleteButton && !this.readOnly && this.taskCloudService.canCompleteTask(this.taskDetails);
        };
        TaskFormCloudComponent.prototype.canClaimTask = function () {
            return !this.readOnly && this.taskCloudService.canClaimTask(this.taskDetails);
        };
        TaskFormCloudComponent.prototype.hasCandidateUsers = function () {
            return this.candidateUsers.length !== 0;
        };
        TaskFormCloudComponent.prototype.hasCandidateGroups = function () {
            return this.candidateGroups.length !== 0;
        };
        TaskFormCloudComponent.prototype.hasCandidateUsersOrGroups = function () {
            var _a;
            var hasCandidateUsersOrGroups = false;
            if (((_a = this.taskDetails) === null || _a === void 0 ? void 0 : _a.status) === 'ASSIGNED') {
                hasCandidateUsersOrGroups = this.hasCandidateUsers() || this.hasCandidateGroups();
            }
            return hasCandidateUsersOrGroups;
        };
        TaskFormCloudComponent.prototype.canUnclaimTask = function () {
            return !this.readOnly && this.taskCloudService.canUnclaimTask(this.taskDetails);
        };
        TaskFormCloudComponent.prototype.isReadOnly = function () {
            return this.readOnly || !this.taskCloudService.canCompleteTask(this.taskDetails);
        };
        TaskFormCloudComponent.prototype.onCompleteTask = function () {
            this.loadTask();
            this.taskCompleted.emit(this.taskId);
        };
        TaskFormCloudComponent.prototype.onClaimTask = function () {
            this.loadTask();
            this.taskClaimed.emit(this.taskId);
        };
        TaskFormCloudComponent.prototype.onUnclaimTask = function () {
            this.loadTask();
            this.taskUnclaimed.emit(this.taskId);
        };
        TaskFormCloudComponent.prototype.onCancelClick = function () {
            this.cancelClick.emit(this.taskId);
        };
        TaskFormCloudComponent.prototype.onFormSaved = function (form) {
            this.formSaved.emit(form);
        };
        TaskFormCloudComponent.prototype.onFormCompleted = function (form) {
            this.formCompleted.emit(form);
            this.taskCompleted.emit(this.taskId);
        };
        TaskFormCloudComponent.prototype.onError = function (data) {
            this.error.emit(data);
        };
        TaskFormCloudComponent.prototype.onFormContentClicked = function (content) {
            this.formContentClicked.emit(content);
        };
        return TaskFormCloudComponent;
    }());
    TaskFormCloudComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'adf-cloud-task-form',
                    template: "<div *ngIf=\"!loading; else loadingTemplate\">\n    <adf-cloud-form *ngIf=\"hasForm(); else withoutForm\"\n                    [appName]=\"appName\"\n                    [appVersion]=\"taskDetails.appVersion\"\n                    [taskId]=\"taskId\"\n                    [showTitle]=\"showTitle\"\n                    [processInstanceId]=\"taskDetails.processInstanceId\"\n                    [readOnly]=\"isReadOnly()\"\n                    [showRefreshButton]=\"showRefreshButton\"\n                    [showValidationIcon]=\"showValidationIcon\"\n                    [showCompleteButton]=\"canCompleteTask()\"\n                    [showSaveButton]=\"canCompleteTask()\"\n                    (formSaved)=\"onFormSaved($event)\"\n                    (formCompleted)=\"onFormCompleted($event)\"\n                    (formError)=\"onError($event)\"\n                    (error)=\"onError($event)\"\n                    (formContentClicked)=\"onFormContentClicked($event)\">\n        <adf-cloud-form-custom-outcomes>\n            <ng-template [ngTemplateOutlet]=\"taskFormCloudButtons\">\n            </ng-template>\n        </adf-cloud-form-custom-outcomes>\n    </adf-cloud-form>\n\n    <ng-template #withoutForm>\n        <mat-card class=\"adf-task-form-container\">\n            <mat-card-header *ngIf=\"showTitle\">\n                <mat-card-title>\n                    <h4>\n                        <span class=\"adf-form-title\">\n                            {{ taskDetails?.name || 'FORM.FORM_RENDERER.NAMELESS_TASK' | translate }}\n                        </span>\n                    </h4>\n                </mat-card-title>\n            </mat-card-header>\n            <mat-card-content>\n                <adf-empty-content\n                    [icon]=\"'description'\"\n                    [title]=\"'ADF_CLOUD_TASK_FORM.EMPTY_FORM.TITLE'\"\n                    [subtitle]=\"'ADF_CLOUD_TASK_FORM.EMPTY_FORM.SUBTITLE'\">\n                </adf-empty-content>\n            </mat-card-content>\n            <mat-card-actions class=\"adf-task-form-actions\">\n                <ng-template [ngTemplateOutlet]=\"taskFormCloudButtons\">\n                </ng-template>\n                <button mat-button *ngIf=\"canCompleteTask()\" adf-cloud-complete-task [appName]=\"appName\"\n                        [taskId]=\"taskId\" (success)=\"onCompleteTask()\" (error)=\"onError($event)\" color=\"primary\" id=\"adf-form-complete\">\n                    {{'ADF_CLOUD_TASK_FORM.EMPTY_FORM.BUTTONS.COMPLETE' | translate}}\n                </button>\n            </mat-card-actions>\n        </mat-card>\n    </ng-template>\n    <ng-template #taskFormCloudButtons>\n        <button mat-button *ngIf=\"showCancelButton\" id=\"adf-cloud-cancel-task\" (click)=\"onCancelClick()\">\n            {{'ADF_CLOUD_TASK_FORM.EMPTY_FORM.BUTTONS.CANCEL' | translate}}\n        </button>\n        <button mat-button *ngIf=\"canClaimTask()\" adf-cloud-claim-task [appName]=\"appName\" [taskId]=\"taskId\"\n                (success)=\"onClaimTask()\" (error)=\"onError($event)\">\n            {{'ADF_CLOUD_TASK_FORM.EMPTY_FORM.BUTTONS.CLAIM' | translate}}\n        </button>\n        <button mat-button *ngIf=\"hasCandidateUsersOrGroups()\" adf-cloud-unclaim-task [appName]=\"appName\" [taskId]=\"taskId\"\n                (success)=\"onUnclaimTask()\" (error)=\"onError($event)\">\n            {{'ADF_CLOUD_TASK_FORM.EMPTY_FORM.BUTTONS.UNCLAIM' | translate}}\n        </button>\n    </ng-template>\n</div>\n\n<ng-template #loadingTemplate>\n    <div fxLayout=\"row\" fxLayoutAlign=\"center stretch\">\n        <mat-spinner></mat-spinner>\n    </div>\n</ng-template>\n",
                    encapsulation: i0.ViewEncapsulation.None,
                    styles: [".adf-task-form-container{overflow:hidden}.adf-task-form-actions{float:right;padding-bottom:25px!important;padding-right:25px!important}.adf-task-form-actions .mat-button{border-radius:5px;height:36px}.adf-task-form-actions .mat-button-wrapper{font-size:var(--theme-body-2-font-size);font-weight:700;height:20px;opacity:.54;width:58px}"]
                },] }
    ];
    TaskFormCloudComponent.ctorParameters = function () { return [
        { type: TaskCloudService },
        { type: i1.FormRenderingService }
    ]; };
    TaskFormCloudComponent.propDecorators = {
        appName: [{ type: i0.Input }],
        taskId: [{ type: i0.Input }],
        showTitle: [{ type: i0.Input }],
        showRefreshButton: [{ type: i0.Input }],
        showValidationIcon: [{ type: i0.Input }],
        showCancelButton: [{ type: i0.Input }],
        showCompleteButton: [{ type: i0.Input }],
        readOnly: [{ type: i0.Input }],
        formSaved: [{ type: i0.Output }],
        formCompleted: [{ type: i0.Output }],
        taskCompleted: [{ type: i0.Output }],
        taskClaimed: [{ type: i0.Output }],
        taskUnclaimed: [{ type: i0.Output }],
        cancelClick: [{ type: i0.Output }],
        error: [{ type: i0.Output }],
        formContentClicked: [{ type: i0.Output }]
    };

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var TaskFormModule = /** @class */ (function () {
        function TaskFormModule() {
        }
        return TaskFormModule;
    }());
    TaskFormModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [
                        i1.CoreModule,
                        common.CommonModule,
                        MaterialModule,
                        FormCloudModule,
                        TaskDirectiveModule,
                        flexLayout.FlexLayoutModule
                    ],
                    declarations: [
                        TaskFormCloudComponent
                    ],
                    exports: [
                        TaskFormCloudComponent
                    ]
                },] }
    ];

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var TaskCloudModule = /** @class */ (function () {
        function TaskCloudModule() {
        }
        return TaskCloudModule;
    }());
    TaskCloudModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [
                        TaskListCloudModule,
                        TaskFiltersCloudModule,
                        StartTaskCloudModule,
                        TaskHeaderCloudModule,
                        TaskDirectiveModule,
                        TaskFormModule
                    ],
                    exports: [
                        TaskListCloudModule,
                        TaskFiltersCloudModule,
                        StartTaskCloudModule,
                        TaskHeaderCloudModule,
                        TaskDirectiveModule,
                        TaskFormModule
                    ]
                },] }
    ];

    var ProcessFilterCloudModel = /** @class */ (function () {
        function ProcessFilterCloudModel(obj) {
            this.dateRangeFilterService = new DateRangeFilterService();
            if (obj) {
                this.id = obj.id || Math.random().toString(36).substring(2, 9);
                this.name = obj.name || null;
                this.key = obj.key || null;
                this.icon = obj.icon || null;
                this.index = obj.index || null;
                this.appName = obj.appName || obj.appName === '' ? obj.appName : null;
                this.appVersion = obj.appVersion || null;
                if (obj.appVersionMultiple && Array.isArray(obj.appVersionMultiple)) {
                    this.appVersion = obj.appVersionMultiple;
                }
                this.processInstanceId = obj.processInstanceId || null;
                this.processName = obj.processName || null;
                this.initiator = obj.initiator || null;
                this.status = obj.status || null;
                this.sort = obj.sort || null;
                this.order = obj.order || null;
                this.processDefinitionId = obj.processDefinitionId || null;
                this.processDefinitionName = obj.processDefinitionName || null;
                this.processDefinitionKey = obj.processDefinitionKey || null;
                this.lastModified = obj.lastModified || null;
                this.lastModifiedTo = obj.lastModifiedTo || null;
                this.lastModifiedFrom = obj.lastModifiedFrom || null;
                this.startedDate = obj.startedDate || null;
                this.startFrom = obj._startFrom || null;
                this.startTo = obj._startTo || null;
                this.completedDateType = obj.completedDateType || null;
                this.startedDateType = obj.startedDateType || null;
                this.suspendedDateType = obj.suspendedDateType || null;
                this.completedFrom = obj._completedFrom || null;
                this.completedTo = obj._completedTo || null;
                this.completedDate = obj.completedDate || null;
                this._suspendedFrom = obj._suspendedFrom || null;
                this._suspendedTo = obj._suspendedTo || null;
            }
        }
        Object.defineProperty(ProcessFilterCloudModel.prototype, "completedFrom", {
            get: function () {
                if (this.isDateRangeType(this.completedDateType)) {
                    return this._completedFrom;
                }
                return this.getStartDate(this.completedDateType);
            },
            set: function (completedFrom) {
                this._completedFrom = completedFrom;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ProcessFilterCloudModel.prototype, "completedTo", {
            get: function () {
                if (this.isDateRangeType(this.completedDateType)) {
                    return this._completedTo;
                }
                return this.getEndDate(this.completedDateType);
            },
            set: function (completedTo) {
                this._completedTo = completedTo;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ProcessFilterCloudModel.prototype, "startFrom", {
            get: function () {
                if (this.isDateRangeType(this.startedDateType)) {
                    return this._startFrom;
                }
                return this.getStartDate(this.startedDateType);
            },
            set: function (startFrom) {
                this._startFrom = startFrom;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ProcessFilterCloudModel.prototype, "startTo", {
            get: function () {
                if (this.isDateRangeType(this.startedDateType)) {
                    return this._startTo;
                }
                return this.getEndDate(this.startedDateType);
            },
            set: function (startTo) {
                this._startTo = startTo;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ProcessFilterCloudModel.prototype, "suspendedFrom", {
            get: function () {
                if (this.isDateRangeType(this.suspendedDateType)) {
                    return this._suspendedFrom;
                }
                return this.getStartDate(this.suspendedDateType);
            },
            set: function (suspendedFrom) {
                this._suspendedFrom = suspendedFrom;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ProcessFilterCloudModel.prototype, "suspendedTo", {
            get: function () {
                if (this.isDateRangeType(this.suspendedDateType)) {
                    return this._suspendedTo;
                }
                return this.getEndDate(this.suspendedDateType);
            },
            set: function (suspendedTo) {
                this._suspendedTo = suspendedTo;
            },
            enumerable: false,
            configurable: true
        });
        ProcessFilterCloudModel.prototype.getStartDate = function (key) {
            return this.dateRangeFilterService.getDateRange(key).startDate;
        };
        ProcessFilterCloudModel.prototype.getEndDate = function (key) {
            return this.dateRangeFilterService.getDateRange(key).endDate;
        };
        ProcessFilterCloudModel.prototype.isDateRangeType = function (type) {
            return !!this.dateRangeFilterService.isDateRangeType(type);
        };
        return ProcessFilterCloudModel;
    }());

    var ProcessFilterCloudService = /** @class */ (function () {
        function ProcessFilterCloudService(preferenceService, identityUserService) {
            this.preferenceService = preferenceService;
            this.identityUserService = identityUserService;
            this.filtersSubject = new rxjs.BehaviorSubject([]);
            this.filters$ = this.filtersSubject.asObservable();
        }
        ProcessFilterCloudService.prototype.readQueryParams = function (obj) {
            var model = Object.assign({}, obj);
            if (obj.hasOwnProperty('appVersion') && obj['appVersion']) {
                if (typeof obj['appVersion'] === 'string') {
                    model.appVersion = obj['appVersion'].split(',').map(function (str) { return parseInt(str, 10); });
                }
            }
            if (obj.hasOwnProperty('lastModifiedFrom')) {
                model.lastModifiedFrom = new Date(parseInt(obj['lastModifiedFrom'], 10));
            }
            if (obj.hasOwnProperty('lastModifiedTo')) {
                model.lastModifiedTo = new Date(parseInt(obj['lastModifiedTo'], 10));
            }
            return model;
        };
        ProcessFilterCloudService.prototype.writeQueryParams = function (value, filterProperties, appName, id) {
            var e_1, _a;
            value = value || {};
            var result = {
                appName: appName || value['appName'],
                id: id || value['id']
            };
            try {
                for (var filterProperties_1 = __values(filterProperties), filterProperties_1_1 = filterProperties_1.next(); !filterProperties_1_1.done; filterProperties_1_1 = filterProperties_1.next()) {
                    var prop = filterProperties_1_1.value;
                    if (prop === 'appVersionMultiple') {
                        var versions = value['appVersion'];
                        if (Array.isArray(versions) && versions.length > 0) {
                            result['appVersion'] = versions.join(',');
                        }
                    }
                    else if (prop === 'lastModified') {
                        if (value['lastModifiedFrom']) {
                            result['lastModifiedFrom'] = value['lastModifiedFrom'].valueOf();
                        }
                        if (value['lastModifiedTo']) {
                            result['lastModifiedTo'] = value['lastModifiedTo'].valueOf();
                        }
                    }
                    else if (value.hasOwnProperty(prop)) {
                        result[prop] = value[prop];
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (filterProperties_1_1 && !filterProperties_1_1.done && (_a = filterProperties_1.return)) _a.call(filterProperties_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
            return result;
        };
        ProcessFilterCloudService.prototype.createDefaultFilters = function (appName) {
            var _this = this;
            var key = this.prepareKey(appName);
            this.preferenceService.getPreferences(appName, key).pipe(operators.switchMap(function (response) {
                var preferences = (response && response.list && response.list.entries) ? response.list.entries : [];
                if (!_this.hasPreferences(preferences)) {
                    return _this.createProcessFilters(appName, key, _this.defaultProcessFilters(appName));
                }
                else if (!_this.hasProcessFilters(preferences, key)) {
                    return _this.createProcessFilters(appName, key, _this.defaultProcessFilters(appName));
                }
                else {
                    return rxjs.of(_this.findFiltersByKeyInPreferences(preferences, key));
                }
            }), operators.catchError(function (err) { return _this.handleProcessError(err); })).subscribe(function (filters) {
                _this.addFiltersToStream(filters);
            });
        };
        ProcessFilterCloudService.prototype.getProcessFilters = function (appName) {
            this.createDefaultFilters(appName);
            return this.filters$;
        };
        ProcessFilterCloudService.prototype.getFilterById = function (appName, id) {
            var _this = this;
            var key = this.prepareKey(appName);
            return this.getProcessFiltersByKey(appName, key).pipe(operators.switchMap(function (filters) {
                if (filters && filters.length === 0) {
                    return _this.createProcessFilters(appName, key, _this.defaultProcessFilters(appName));
                }
                else {
                    return rxjs.of(filters);
                }
            }), operators.map(function (filters) {
                return filters.filter(function (filter) {
                    return filter.id === id;
                })[0];
            }), operators.catchError(function (err) { return _this.handleProcessError(err); }));
        };
        ProcessFilterCloudService.prototype.addFilter = function (newFilter) {
            var _this = this;
            var appName = newFilter.appName, name = newFilter.name;
            var key = this.prepareKey(appName);
            return this.getProcessFiltersByKey(appName, key).pipe(operators.switchMap(function (filters) {
                if (filters && filters.length === 0) {
                    return _this.createProcessFilters(appName, key, [newFilter]);
                }
                else {
                    var index = filters.findIndex(function (filter) { return filter.name === name; });
                    if (index >= 0) {
                        filters.splice(index, 1);
                    }
                    filters.push(newFilter);
                    return _this.preferenceService.updatePreference(appName, key, filters);
                }
            }), operators.map(function (filters) {
                _this.addFiltersToStream(filters);
                return filters;
            }), operators.catchError(function (err) { return _this.handleProcessError(err); }));
        };
        ProcessFilterCloudService.prototype.updateFilter = function (updatedFilter) {
            var _this = this;
            var key = this.prepareKey(updatedFilter.appName);
            return this.getProcessFiltersByKey(updatedFilter.appName, key).pipe(operators.switchMap(function (filters) {
                if (filters && filters.length === 0) {
                    return _this.createProcessFilters(updatedFilter.appName, key, [updatedFilter]);
                }
                else {
                    var itemIndex = filters.findIndex(function (filter) { return filter.id === updatedFilter.id; });
                    filters[itemIndex] = updatedFilter;
                    return _this.updateProcessFilters(updatedFilter.appName, key, filters);
                }
            }), operators.map(function (updatedFilters) {
                _this.addFiltersToStream(updatedFilters);
                return updatedFilters;
            }), operators.catchError(function (err) { return _this.handleProcessError(err); }));
        };
        ProcessFilterCloudService.prototype.deleteFilter = function (deletedFilter) {
            var _this = this;
            var key = this.prepareKey(deletedFilter.appName);
            return this.getProcessFiltersByKey(deletedFilter.appName, key).pipe(operators.switchMap(function (filters) {
                if (filters && filters.length > 0) {
                    filters = filters.filter(function (filter) { return filter.id !== deletedFilter.id; });
                    return _this.updateProcessFilters(deletedFilter.appName, key, filters);
                }
                else {
                    return rxjs.of([]);
                }
            }), operators.map(function (filters) {
                _this.addFiltersToStream(filters);
                return filters;
            }), operators.catchError(function (err) { return _this.handleProcessError(err); }));
        };
        ProcessFilterCloudService.prototype.isDefaultFilter = function (filterName) {
            var defaultFilters = this.defaultProcessFilters();
            return defaultFilters.findIndex(function (filter) { return filterName === filter.name; }) !== -1;
        };
        ProcessFilterCloudService.prototype.hasPreferences = function (preferences) {
            return preferences && preferences.length > 0;
        };
        ProcessFilterCloudService.prototype.hasProcessFilters = function (preferences, key) {
            var filters = preferences.find(function (filter) { return filter.entry.key === key; });
            return (filters && filters.entry) ? JSON.parse(filters.entry.value).length > 0 : false;
        };
        ProcessFilterCloudService.prototype.createProcessFilters = function (appName, key, filters) {
            return this.preferenceService.createPreference(appName, key, filters);
        };
        ProcessFilterCloudService.prototype.getProcessFiltersByKey = function (appName, key) {
            return this.preferenceService.getPreferenceByKey(appName, key);
        };
        ProcessFilterCloudService.prototype.updateProcessFilters = function (appName, key, filters) {
            return this.preferenceService.updatePreference(appName, key, filters);
        };
        ProcessFilterCloudService.prototype.prepareKey = function (appName) {
            var user = this.identityUserService.getCurrentUserInfo();
            return "process-filters-" + appName + "-" + user.username;
        };
        ProcessFilterCloudService.prototype.findFiltersByKeyInPreferences = function (preferences, key) {
            var result = preferences.find(function (filter) { return filter.entry.key === key; });
            return result && result.entry ? JSON.parse(result.entry.value) : [];
        };
        ProcessFilterCloudService.prototype.addFiltersToStream = function (filters) {
            this.filtersSubject.next(filters);
        };
        ProcessFilterCloudService.prototype.handleProcessError = function (error) {
            return rxjs.throwError(error || 'Server error');
        };
        ProcessFilterCloudService.prototype.defaultProcessFilters = function (appName) {
            return [
                new ProcessFilterCloudModel({
                    name: 'ADF_CLOUD_PROCESS_FILTERS.RUNNING_PROCESSES',
                    icon: 'inbox',
                    key: 'running-processes',
                    appName: appName,
                    sort: 'startDate',
                    status: 'RUNNING',
                    order: 'DESC'
                }),
                new ProcessFilterCloudModel({
                    name: 'ADF_CLOUD_PROCESS_FILTERS.COMPLETED_PROCESSES',
                    icon: 'done',
                    key: 'completed-processes',
                    appName: appName,
                    sort: 'startDate',
                    status: 'COMPLETED',
                    order: 'DESC'
                }),
                new ProcessFilterCloudModel({
                    name: 'ADF_CLOUD_PROCESS_FILTERS.ALL_PROCESSES',
                    key: 'all-processes',
                    icon: 'adjust',
                    appName: appName,
                    sort: 'startDate',
                    status: '',
                    order: 'DESC'
                })
            ];
        };
        return ProcessFilterCloudService;
    }());
    ProcessFilterCloudService.ɵprov = i0.ɵɵdefineInjectable({ factory: function ProcessFilterCloudService_Factory() { return new ProcessFilterCloudService(i0.ɵɵinject(PROCESS_FILTERS_SERVICE_TOKEN), i0.ɵɵinject(i1.IdentityUserService)); }, token: ProcessFilterCloudService, providedIn: "root" });
    ProcessFilterCloudService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    ProcessFilterCloudService.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: i0.Inject, args: [PROCESS_FILTERS_SERVICE_TOKEN,] }] },
        { type: i1.IdentityUserService }
    ]; };

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var ProcessFiltersCloudComponent = /** @class */ (function () {
        function ProcessFiltersCloudComponent(processFilterCloudService, translationService) {
            this.processFilterCloudService = processFilterCloudService;
            this.translationService = translationService;
            this.appName = '';
            this.showIcons = false;
            this.filterSelected = new i0.EventEmitter();
            this.filterClicked = new i0.EventEmitter();
            this.success = new i0.EventEmitter();
            this.error = new i0.EventEmitter();
            this.filters = [];
            this.onDestroy$ = new rxjs.Subject();
        }
        ProcessFiltersCloudComponent.prototype.ngOnInit = function () {
            if (this.appName === '') {
                this.getFilters(this.appName);
            }
        };
        ProcessFiltersCloudComponent.prototype.ngOnChanges = function (changes) {
            var appName = changes['appName'];
            var filter = changes['filterParam'];
            if (appName && appName.currentValue) {
                this.getFilters(appName.currentValue);
            }
            else if (filter && filter.currentValue !== filter.previousValue) {
                this.selectFilterAndEmit(filter.currentValue);
            }
        };
        ProcessFiltersCloudComponent.prototype.getFilters = function (appName) {
            var _this = this;
            this.filters$ = this.processFilterCloudService.getProcessFilters(appName);
            this.filters$.pipe(operators.takeUntil(this.onDestroy$)).subscribe(function (res) {
                _this.resetFilter();
                _this.filters = res || [];
                _this.selectFilterAndEmit(_this.filterParam);
                _this.success.emit(res);
            }, function (err) {
                _this.error.emit(err);
            });
        };
        ProcessFiltersCloudComponent.prototype.selectFilter = function (paramFilter) {
            var _this = this;
            if (paramFilter) {
                this.currentFilter = this.filters.find(function (filter, index) {
                    return paramFilter.id === filter.id ||
                        (paramFilter.name && _this.checkFilterNamesEquality(paramFilter.name, filter.name)) ||
                        (paramFilter.key && (paramFilter.key === filter.key)) ||
                        paramFilter.index === index;
                });
            }
        };
        ProcessFiltersCloudComponent.prototype.checkFilterNamesEquality = function (name1, name2) {
            var translatedName1 = this.translationService.instant(name1);
            var translatedName2 = this.translationService.instant(name2);
            return translatedName1.toLocaleLowerCase() === translatedName2.toLocaleLowerCase();
        };
        ProcessFiltersCloudComponent.prototype.selectFilterAndEmit = function (newParamFilter) {
            if (newParamFilter) {
                this.selectFilter(newParamFilter);
                this.filterSelected.emit(this.currentFilter);
            }
            else {
                this.currentFilter = undefined;
            }
        };
        ProcessFiltersCloudComponent.prototype.selectFilterById = function (id) {
            this.selectFilterAndEmit({ id: id });
        };
        ProcessFiltersCloudComponent.prototype.onFilterClick = function (filter) {
            if (filter) {
                this.selectFilter(filter);
                this.filterClicked.emit(this.currentFilter);
            }
            else {
                this.currentFilter = undefined;
            }
        };
        ProcessFiltersCloudComponent.prototype.selectDefaultProcessFilter = function () {
            if (!this.isFilterListEmpty()) {
                this.currentFilter = this.filters[0];
            }
        };
        ProcessFiltersCloudComponent.prototype.getCurrentFilter = function () {
            return this.currentFilter;
        };
        ProcessFiltersCloudComponent.prototype.isFilterListEmpty = function () {
            return this.filters === undefined || (this.filters && this.filters.length === 0);
        };
        ProcessFiltersCloudComponent.prototype.resetFilter = function () {
            this.filters = [];
            this.currentFilter = undefined;
        };
        ProcessFiltersCloudComponent.prototype.ngOnDestroy = function () {
            this.onDestroy$.next(true);
            this.onDestroy$.complete();
        };
        ProcessFiltersCloudComponent.prototype.isActiveFilter = function (filter) {
            return this.currentFilter.name === filter.name;
        };
        return ProcessFiltersCloudComponent;
    }());
    ProcessFiltersCloudComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'adf-cloud-process-filters',
                    template: "\n<ng-container *ngIf=\"filters$ | async as filterList; else loading\">\n    <div *ngFor=\"let filter of filterList\" class=\"adf-filters__entry\" [class.adf-active]=\"currentFilter === filter\">\n        <button (click)=\"onFilterClick(filter)\"\n          [attr.aria-label]=\"filter.name | translate\"\n          [id]=\"filter.id\"\n          [attr.data-automation-id]=\"filter.key + '_filter'\"\n          mat-button\n          class=\"adf-filter-action-button adf-full-width\" fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\n          <adf-icon data-automation-id=\"adf-filter-icon\" *ngIf=\"showIcons\" [value]=\"filter.icon\"></adf-icon>\n          <span data-automation-id=\"adf-filter-label\" class=\"adf-filter-action-button__label\">{{ filter.name | translate }}</span>\n        </button>\n    </div>\n</ng-container>\n<ng-template #loading>\n    <ng-container>\n        <div class=\"adf-app-list-spinner\">\n            <mat-spinner></mat-spinner>\n        </div>\n    </ng-container>\n</ng-template>\n",
                    encapsulation: i0.ViewEncapsulation.None,
                    styles: [".adf-filters__entry{cursor:pointer;font-size:14px!important;font-weight:700;height:24px;opacity:1;padding:12px 0!important;width:100%}.adf-filters__entry .adf-full-width{display:flex;width:100%}.adf-filters__entry .adf-filter-action-button .adf-filter-action-button__label{margin:0 8px!important;padding-left:20px}.adf-filters__entry.adf-active,.adf-filters__entry:hover{color:var(--theme-primary-color);opacity:1}"]
                },] }
    ];
    ProcessFiltersCloudComponent.ctorParameters = function () { return [
        { type: ProcessFilterCloudService },
        { type: i1.TranslationService }
    ]; };
    ProcessFiltersCloudComponent.propDecorators = {
        appName: [{ type: i0.Input }],
        filterParam: [{ type: i0.Input }],
        showIcons: [{ type: i0.Input }],
        filterSelected: [{ type: i0.Output }],
        filterClicked: [{ type: i0.Output }],
        success: [{ type: i0.Output }],
        error: [{ type: i0.Output }]
    };

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var ProcessFilterDialogCloudComponent = /** @class */ (function () {
        function ProcessFilterDialogCloudComponent(fb, dialogRef, data) {
            this.fb = fb;
            this.dialogRef = dialogRef;
            this.data = data;
            this.defaultIcon = 'inbox';
        }
        ProcessFilterDialogCloudComponent.prototype.ngOnInit = function () {
            this.filterForm = this.fb.group({
                name: [this.data.name, forms.Validators.required]
            });
        };
        ProcessFilterDialogCloudComponent.prototype.onSaveClick = function () {
            this.dialogRef.close({
                action: ProcessFilterDialogCloudComponent.ACTION_SAVE,
                icon: this.defaultIcon,
                name: this.nameController.value
            });
        };
        ProcessFilterDialogCloudComponent.prototype.onCancelClick = function () {
            this.dialogRef.close();
        };
        Object.defineProperty(ProcessFilterDialogCloudComponent.prototype, "nameController", {
            get: function () {
                return this.filterForm.get('name');
            },
            enumerable: false,
            configurable: true
        });
        ProcessFilterDialogCloudComponent.prototype.isValid = function () {
            return this.filterForm.valid;
        };
        return ProcessFilterDialogCloudComponent;
    }());
    ProcessFilterDialogCloudComponent.ACTION_SAVE = 'SAVE';
    ProcessFilterDialogCloudComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'adf-cloud-process-filter-dialog-cloud',
                    template: "<div class=\"adf-process-filter-dialog\">\n    <span mat-dialog-title id=\"adf-process-filter-dialog-title\">\n         {{ 'ADF_CLOUD_EDIT_PROCESS_FILTER.DIALOG.TITLE' | translate}}\n    </span>\n    <mat-card>\n        <mat-card-content>\n        <form [formGroup]=\"filterForm\">\n            <mat-form-field fxFlex [floatLabel]=\"'auto'\">\n                <input matInput placeholder=\"{{ 'ADF_CLOUD_EDIT_PROCESS_FILTER.FILTER_NAME' | translate }}\" formControlName=\"name\" id=\"adf-filter-name-id\">\n            </mat-form-field>\n        </form>\n        </mat-card-content>\n        <mat-card-actions fxLayout=\"row\" fxLayoutAlign=\"end end\">\n            <button mat-button (click)=\"onSaveClick()\" id=\"adf-save-button-id\" [disabled]=\"!isValid()\">\n                {{ 'ADF_CLOUD_EDIT_PROCESS_FILTER.DIALOG.SAVE' | translate}}\n            </button>\n            <button mat-button (click)=\"onCancelClick()\" id=\"adf-cancel-button-id\">\n               {{ 'ADF_CLOUD_EDIT_PROCESS_FILTER.DIALOG.CANCEL' | translate}}\n            </button>\n        </mat-card-actions>\n    </mat-card>\n</div>\n",
                    styles: [".adf-process-filter-dialog .mat-card,.adf-process-filter-dialog .mat-card-content{box-shadow:none;padding:0}"]
                },] }
    ];
    ProcessFilterDialogCloudComponent.ctorParameters = function () { return [
        { type: forms.FormBuilder },
        { type: i2.MatDialogRef },
        { type: undefined, decorators: [{ type: i0.Inject, args: [i2.MAT_DIALOG_DATA,] }] }
    ]; };

    var ProcessCloudService = /** @class */ (function (_super) {
        __extends(ProcessCloudService, _super);
        function ProcessCloudService(apiService, appConfigService, logService) {
            var _this = _super.call(this, apiService, appConfigService) || this;
            _this.logService = logService;
            _this.dataChangesDetected = new rxjs.Subject();
            return _this;
        }
        ProcessCloudService.prototype.getProcessInstanceById = function (appName, processInstanceId) {
            var _this = this;
            if (appName && processInstanceId) {
                var url = this.getBasePath(appName) + "/query/v1/process-instances/" + processInstanceId;
                return this.get(url).pipe(operators.map(function (res) {
                    _this.dataChangesDetected.next(res.entry);
                    return res.entry;
                }));
            }
            else {
                this.logService.error('AppName and ProcessInstanceId are mandatory for querying a process');
                return rxjs.throwError('AppName/ProcessInstanceId not configured');
            }
        };
        ProcessCloudService.prototype.getProcessDefinitions = function (appName) {
            if (appName || appName === '') {
                var url = this.getBasePath(appName) + "/rb/v1/process-definitions";
                return this.get(url).pipe(operators.map(function (res) {
                    return res.list.entries.map(function (processDefs) { return new ProcessDefinitionCloud(processDefs.entry); });
                }));
            }
            else {
                this.logService.error('AppName is mandatory for querying task');
                return rxjs.throwError('AppName not configured');
            }
        };
        ProcessCloudService.prototype.getApplicationVersions = function (appName) {
            var _this = this;
            if (appName) {
                var url = this.getBasePath(appName) + "/query/v1/applications";
                return this.get(url).pipe(operators.map(function (appEntities) {
                    return appEntities.list.entries;
                }), operators.catchError(function (err) { return _this.handleError(err); }));
            }
            else {
                this.logService.error('AppName is mandatory for querying the versions of an application');
                return rxjs.throwError('AppName not configured');
            }
        };
        ProcessCloudService.prototype.cancelProcess = function (appName, processInstanceId) {
            var _this = this;
            if (appName && processInstanceId) {
                var queryUrl = this.getBasePath(appName) + "/rb/v1/process-instances/" + processInstanceId;
                return this.delete(queryUrl).pipe(operators.map(function (res) {
                    _this.dataChangesDetected.next(res.entry);
                    return res.entry;
                }));
            }
            else {
                this.logService.error('App name and Process id are mandatory for deleting a process');
                return rxjs.throwError('App name and process id not configured');
            }
        };
        ProcessCloudService.prototype.handleError = function (error) {
            this.logService.error(error);
            return rxjs.throwError(error || 'Server error');
        };
        return ProcessCloudService;
    }(BaseCloudService));
    ProcessCloudService.ɵprov = i0.ɵɵdefineInjectable({ factory: function ProcessCloudService_Factory() { return new ProcessCloudService(i0.ɵɵinject(i1.AlfrescoApiService), i0.ɵɵinject(i1.AppConfigService), i0.ɵɵinject(i1.LogService)); }, token: ProcessCloudService, providedIn: "root" });
    ProcessCloudService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    ProcessCloudService.ctorParameters = function () { return [
        { type: i1.AlfrescoApiService },
        { type: i1.AppConfigService },
        { type: i1.LogService }
    ]; };

    var EditProcessFilterCloudComponent = /** @class */ (function () {
        function EditProcessFilterCloudComponent(formBuilder, dialog, dateAdapter, userPreferencesService, translateService, processFilterCloudService, appsProcessCloudService, processCloudService) {
            this.formBuilder = formBuilder;
            this.dialog = dialog;
            this.dateAdapter = dateAdapter;
            this.userPreferencesService = userPreferencesService;
            this.translateService = translateService;
            this.processFilterCloudService = processFilterCloudService;
            this.appsProcessCloudService = appsProcessCloudService;
            this.processCloudService = processCloudService;
            this.DATE_FORMAT = 'DD/MM/YYYY';
            this.appName = '';
            this.role = '';
            this.filterProperties = EditProcessFilterCloudComponent.DEFAULT_PROCESS_FILTER_PROPERTIES;
            this.sortProperties = EditProcessFilterCloudComponent.DEFAULT_SORT_PROPERTIES;
            this.actions = EditProcessFilterCloudComponent.DEFAULT_ACTIONS;
            this.showFilterActions = true;
            this.showTitle = true;
            this.showProcessFilterName = true;
            this.filterChange = new i0.EventEmitter();
            this.action = new i0.EventEmitter();
            this.filterHasBeenChanged = false;
            this.status = [
                { value: '', label: 'ADF_CLOUD_PROCESS_FILTERS.STATUS.ALL' },
                { value: 'RUNNING', label: 'ADF_CLOUD_PROCESS_FILTERS.STATUS.RUNNING' },
                { value: 'SUSPENDED', label: 'ADF_CLOUD_PROCESS_FILTERS.STATUS.SUSPENDED' },
                { value: 'CANCELLED', label: 'ADF_CLOUD_PROCESS_FILTERS.STATUS.CANCELLED' },
                { value: 'COMPLETED', label: 'ADF_CLOUD_PROCESS_FILTERS.STATUS.COMPLETED' }
            ];
            this.directions = [
                { value: 'ASC', label: 'ADF_CLOUD_PROCESS_FILTERS.DIRECTION.ASCENDING' },
                { value: 'DESC', label: 'ADF_CLOUD_PROCESS_FILTERS.DIRECTION.DESCENDING' }
            ];
            this.actionDisabledForDefault = [
                EditProcessFilterCloudComponent.ACTION_SAVE,
                EditProcessFilterCloudComponent.ACTION_DELETE
            ];
            this.applicationNames = [];
            this.allProcessDefinitionNamesOption = {
                label: 'ADF_CLOUD_PROCESS_FILTERS.STATUS.ALL',
                value: ''
            };
            this.processDefinitionNames = [];
            this.processFilterProperties = [];
            this.processFilterActions = [];
            this.toggleFilterActions = false;
            this.appVersionOptions = [];
            this.initiatorOptions = [];
            this.onDestroy$ = new rxjs.Subject();
            this.isLoading = false;
        }
        Object.defineProperty(EditProcessFilterCloudComponent.prototype, "processFilter", {
            get: function () {
                return this._filter;
            },
            set: function (value) {
                var isChanged = this.isFilterChanged(this._filter, value);
                this._filter = value;
                if (value === null || value === void 0 ? void 0 : value.appName) {
                    this.appName = value.appName;
                }
                if (value === null || value === void 0 ? void 0 : value.id) {
                    this.id = value.id;
                }
                this.processFilterProperties = this.createAndFilterProperties();
                this.processFilterActions = this.createAndFilterActions();
                this.buildForm(this.processFilterProperties);
                if (isChanged) {
                    this.filterChange.emit(value);
                }
            },
            enumerable: false,
            configurable: true
        });
        EditProcessFilterCloudComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.userPreferencesService
                .select(i1.UserPreferenceValues.Locale)
                .pipe(operators.takeUntil(this.onDestroy$))
                .subscribe(function (locale) { return _this.dateAdapter.setLocale(locale); });
        };
        EditProcessFilterCloudComponent.prototype.ngOnChanges = function (changes) {
            var id = changes['id'];
            if (id && id.currentValue !== id.previousValue) {
                this.retrieveProcessFilterAndBuildForm();
            }
        };
        EditProcessFilterCloudComponent.prototype.ngOnDestroy = function () {
            this.onDestroy$.next(true);
            this.onDestroy$.complete();
        };
        EditProcessFilterCloudComponent.prototype.buildForm = function (processFilterProperties) {
            this.editProcessFilterForm = this.formBuilder.group(this.getFormControlsConfig(processFilterProperties));
            this.onFilterChange();
        };
        EditProcessFilterCloudComponent.prototype.getFormControlsConfig = function (processFilterProperties) {
            var _this = this;
            var properties = processFilterProperties.map(function (property) {
                var _c;
                if (!!property.attributes) {
                    return _this.getAttributesControlConfig(property);
                }
                else {
                    return _c = {}, _c[property.key] = property.value, _c;
                }
            });
            return properties.reduce((function (result, current) { return Object.assign(result, current); }), {});
        };
        EditProcessFilterCloudComponent.prototype.getAttributesControlConfig = function (property) {
            return Object.values(property.attributes).reduce(function (result, key) {
                result[key] = property.value[key];
                return result;
            }, {});
        };
        EditProcessFilterCloudComponent.prototype.retrieveProcessFilterAndBuildForm = function () {
            var _this = this;
            this.isLoading = true;
            this.processFilterCloudService
                .getFilterById(this.appName, this.id)
                .pipe(operators.finalize(function () { return _this.isLoading = false; }))
                .subscribe(function (response) {
                _this.filterHasBeenChanged = false;
                _this.processFilter = new ProcessFilterCloudModel(Object.assign({}, response || {}, _this.processFilter || {}));
            });
        };
        EditProcessFilterCloudComponent.prototype.onFilterChange = function () {
            var _this = this;
            if (this.filterChangeSub) {
                this.filterChangeSub.unsubscribe();
                this.filterChangeSub = null;
            }
            this.filterChangeSub = this.editProcessFilterForm.valueChanges
                .pipe(operators.debounceTime(500), operators.filter(function () { return _this.isFormValid(); }), operators.takeUntil(this.onDestroy$))
                .subscribe(function (formValues) {
                _this.setLastModifiedToFilter(formValues);
                var newValue = new ProcessFilterCloudModel(Object.assign({}, _this.processFilter, formValues));
                var changed = !_this.compareFilters(newValue, _this.processFilter);
                _this.filterHasBeenChanged = changed;
                if (changed) {
                    _this._filter = newValue;
                    _this.filterChange.emit(newValue);
                }
            });
        };
        EditProcessFilterCloudComponent.prototype.createAndFilterProperties = function () {
            var _this = this;
            this.checkMandatoryFilterProperties();
            if (this.filterProperties.includes('appName')) {
                this.getRunningApplications();
            }
            if (this.filterProperties.includes('processDefinitionName')) {
                this.getProcessDefinitions();
            }
            if (this.filterProperties.includes('appVersionMultiple')) {
                this.getAppVersionOptions();
            }
            if (this.filterProperties.includes('initiator')) {
                this.initiatorOptions = !!this.processFilter.initiator
                    ? this.processFilter.initiator.split(',').map(function (username) { return Object.assign({}, { username: username }); })
                    : [];
            }
            var defaultProperties = this.createProcessFilterProperties(this.processFilter);
            var filteredProperties = defaultProperties.filter(function (filterProperty) { return _this.isValidProperty(_this.filterProperties, filterProperty.key); });
            if (!this.filterProperties.includes('sort')) {
                filteredProperties = filteredProperties.filter(function (property) { return property.key !== 'order'; });
            }
            if (this.filterProperties.includes('lastModified')) {
                filteredProperties = __spread(filteredProperties, this.createLastModifiedProperty(this.processFilter));
            }
            return filteredProperties;
        };
        EditProcessFilterCloudComponent.prototype.checkMandatoryFilterProperties = function () {
            if (this.filterProperties === undefined || this.filterProperties.length === 0) {
                this.filterProperties = EditProcessFilterCloudComponent.DEFAULT_PROCESS_FILTER_PROPERTIES;
            }
        };
        EditProcessFilterCloudComponent.prototype.isValidProperty = function (filterProperties, key) {
            return filterProperties ? filterProperties.indexOf(key) >= 0 : true;
        };
        Object.defineProperty(EditProcessFilterCloudComponent.prototype, "createSortProperties", {
            get: function () {
                var _this = this;
                this.checkMandatorySortProperties();
                var defaultSortProperties = this.createProcessSortProperties();
                return defaultSortProperties.filter(function (sortProperty) { return _this.isValidProperty(_this.sortProperties, sortProperty.key); });
            },
            enumerable: false,
            configurable: true
        });
        EditProcessFilterCloudComponent.prototype.getAppVersionOptions = function () {
            var _this = this;
            this.appVersionOptions = [];
            this.processCloudService.getApplicationVersions(this.appName).subscribe(function (appVersions) {
                appVersions.forEach(function (appVersion) {
                    _this.appVersionOptions.push({ label: appVersion.entry.version, value: appVersion.entry.version });
                });
            });
        };
        EditProcessFilterCloudComponent.prototype.checkMandatorySortProperties = function () {
            if (this.sortProperties === undefined || this.sortProperties.length === 0) {
                this.sortProperties = EditProcessFilterCloudComponent.DEFAULT_SORT_PROPERTIES;
            }
        };
        EditProcessFilterCloudComponent.prototype.createAndFilterActions = function () {
            var _this = this;
            this.checkMandatoryActions();
            var actions = this.createFilterActions();
            return actions.filter(function (action) { return _this.isValidAction(_this.actions, action); });
        };
        EditProcessFilterCloudComponent.prototype.checkMandatoryActions = function () {
            if (this.actions === undefined || this.actions.length === 0) {
                this.actions = EditProcessFilterCloudComponent.DEFAULT_ACTIONS;
            }
        };
        EditProcessFilterCloudComponent.prototype.isValidAction = function (actions, action) {
            return actions ? actions.indexOf(action.actionType) >= 0 : true;
        };
        EditProcessFilterCloudComponent.prototype.isFormValid = function () {
            return this.editProcessFilterForm.valid;
        };
        EditProcessFilterCloudComponent.prototype.getPropertyController = function (property) {
            return this.editProcessFilterForm.get(property.key);
        };
        EditProcessFilterCloudComponent.prototype.onDateChanged = function (newDateValue, dateProperty) {
            if (newDateValue) {
                var controller = this.getPropertyController(dateProperty);
                if (newDateValue.isValid()) {
                    controller.setValue(newDateValue);
                    controller.setErrors(null);
                }
                else {
                    controller.setErrors({ invalid: true });
                }
            }
        };
        EditProcessFilterCloudComponent.prototype.onDateTypeChange = function (dateType, property) {
            this.editProcessFilterForm.get(property.attributes.dateType).setValue(dateType);
        };
        EditProcessFilterCloudComponent.prototype.onDateRangeFilterChanged = function (dateRange, property) {
            var _a, _b;
            this.editProcessFilterForm.get((_a = property.attributes) === null || _a === void 0 ? void 0 : _a.from).setValue(dateRange.startDate ? dateRange.startDate : null);
            this.editProcessFilterForm.get((_b = property.attributes) === null || _b === void 0 ? void 0 : _b.to).setValue(dateRange.endDate ? dateRange.endDate : null);
            this.editProcessFilterForm.get(property.attributes.dateType).setValue(exports.DateCloudFilterType.RANGE);
        };
        EditProcessFilterCloudComponent.prototype.onChangedUser = function (users, processProperty) {
            this.getPropertyController(processProperty).setValue(users.map(function (user) { return user.username; }).join(','));
        };
        EditProcessFilterCloudComponent.prototype.hasError = function (property) {
            var controller = this.getPropertyController(property);
            return controller.errors && controller.errors.invalid;
        };
        EditProcessFilterCloudComponent.prototype.compareFilters = function (editedQuery, currentQuery) {
            return JSON.stringify(editedQuery).toLowerCase() === JSON.stringify(currentQuery).toLowerCase();
        };
        EditProcessFilterCloudComponent.prototype.getRunningApplications = function () {
            var _this = this;
            this.applicationNames = [];
            this.appsProcessCloudService
                .getDeployedApplicationsByStatus('RUNNING', this.role)
                .subscribe(function (applications) {
                if (applications && applications.length > 0) {
                    applications.map(function (application) {
                        _this.applicationNames.push({ label: application.name, value: application.name });
                    });
                }
            });
        };
        EditProcessFilterCloudComponent.prototype.getProcessDefinitions = function () {
            var _this = this;
            this.processDefinitionNames = [];
            this.processCloudService.getProcessDefinitions(this.appName).subscribe(function (processDefinitions) {
                if (processDefinitions && processDefinitions.length > 0) {
                    _this.processDefinitionNames.push(_this.allProcessDefinitionNamesOption);
                    processDefinitions.map(function (processDefinition) {
                        _this.processDefinitionNames.push({ label: processDefinition.name, value: processDefinition.name });
                    });
                }
            });
        };
        EditProcessFilterCloudComponent.prototype.executeFilterActions = function (action) {
            if (action.actionType === EditProcessFilterCloudComponent.ACTION_SAVE) {
                this.save(action);
            }
            else if (action.actionType === EditProcessFilterCloudComponent.ACTION_SAVE_AS) {
                this.saveAs(action);
            }
            else if (action.actionType === EditProcessFilterCloudComponent.ACTION_DELETE) {
                this.delete(action);
            }
        };
        EditProcessFilterCloudComponent.prototype.save = function (saveAction) {
            var _this = this;
            this.processFilterCloudService
                .updateFilter(this.processFilter)
                .subscribe(function () {
                saveAction.filter = _this.processFilter;
                _this.filterHasBeenChanged = false;
                _this.action.emit(saveAction);
            });
        };
        EditProcessFilterCloudComponent.prototype.delete = function (deleteAction) {
            var _this = this;
            this.processFilterCloudService
                .deleteFilter(this.processFilter)
                .pipe(operators.filter(function (filters) {
                deleteAction.filter = _this.processFilter;
                _this.action.emit(deleteAction);
                return filters.length === 0;
            }), operators.switchMap(function () { return _this.restoreDefaultProcessFilters(); }))
                .subscribe(function () { });
        };
        EditProcessFilterCloudComponent.prototype.saveAs = function (saveAsAction) {
            var _this = this;
            var dialogRef = this.dialog.open(ProcessFilterDialogCloudComponent, {
                data: {
                    name: this.translateService.instant(this.processFilter.name)
                },
                height: 'auto',
                minWidth: '30%'
            });
            dialogRef.afterClosed().subscribe(function (result) {
                if (result && result.action === ProcessFilterDialogCloudComponent.ACTION_SAVE) {
                    var filterId = Math.random().toString(36).substr(2, 9);
                    var filterKey = _this.getSanitizeFilterName(result.name);
                    var newFilter = {
                        name: result.name,
                        icon: result.icon,
                        id: filterId,
                        key: 'custom-' + filterKey
                    };
                    var resultFilter_1 = Object.assign({}, _this.processFilter, newFilter);
                    _this.processFilterCloudService
                        .addFilter(resultFilter_1)
                        .subscribe(function () {
                        saveAsAction.filter = resultFilter_1;
                        _this.filterHasBeenChanged = false;
                        _this.action.emit(saveAsAction);
                    });
                }
            });
        };
        EditProcessFilterCloudComponent.prototype.getSanitizeFilterName = function (filterName) {
            var nameWithHyphen = this.replaceSpaceWithHyphen(filterName.trim());
            return nameWithHyphen.toLowerCase();
        };
        EditProcessFilterCloudComponent.prototype.replaceSpaceWithHyphen = function (name) {
            var regExt = new RegExp(' ', 'g');
            return name.replace(regExt, '-');
        };
        EditProcessFilterCloudComponent.prototype.restoreDefaultProcessFilters = function () {
            return this.processFilterCloudService.getProcessFilters(this.appName);
        };
        EditProcessFilterCloudComponent.prototype.onExpand = function () {
            this.toggleFilterActions = true;
        };
        EditProcessFilterCloudComponent.prototype.onClose = function () {
            this.toggleFilterActions = false;
        };
        EditProcessFilterCloudComponent.prototype.isDisabledAction = function (action) {
            return (this.processFilterCloudService.isDefaultFilter(this.processFilter.name) &&
                this.actionDisabledForDefault.includes(action.actionType)) ? true : this.hasFilterChanged(action);
        };
        EditProcessFilterCloudComponent.prototype.hasFilterChanged = function (action) {
            return action.actionType === EditProcessFilterCloudComponent.ACTION_SAVE ||
                action.actionType === EditProcessFilterCloudComponent.ACTION_SAVE_AS ?
                !this.filterHasBeenChanged : false;
        };
        EditProcessFilterCloudComponent.prototype.setLastModifiedToFilter = function (formValues) {
            if (formValues.lastModifiedTo && Date.parse(formValues.lastModifiedTo.toString())) {
                var lastModifiedToFilterValue = moment(formValues.lastModifiedTo);
                lastModifiedToFilterValue.set({
                    hour: 23,
                    minute: 59,
                    second: 59
                });
                formValues.lastModifiedTo = lastModifiedToFilterValue.toDate();
            }
        };
        EditProcessFilterCloudComponent.prototype.createFilterActions = function () {
            return [
                {
                    actionType: EditProcessFilterCloudComponent.ACTION_SAVE,
                    icon: 'adf:save',
                    tooltip: 'ADF_CLOUD_EDIT_PROCESS_FILTER.TOOL_TIP.SAVE'
                },
                {
                    actionType: EditProcessFilterCloudComponent.ACTION_SAVE_AS,
                    icon: 'adf:save-as',
                    tooltip: 'ADF_CLOUD_EDIT_PROCESS_FILTER.TOOL_TIP.SAVE_AS'
                },
                {
                    actionType: EditProcessFilterCloudComponent.ACTION_DELETE,
                    icon: 'delete',
                    tooltip: 'ADF_CLOUD_EDIT_PROCESS_FILTER.TOOL_TIP.DELETE'
                }
            ];
        };
        EditProcessFilterCloudComponent.prototype.createLastModifiedProperty = function (filterModel) {
            var lastModifiedFrom;
            var lastModifiedTo;
            if (filterModel.lastModifiedFrom) {
                lastModifiedFrom = moment(filterModel.lastModifiedFrom);
            }
            if (filterModel.lastModifiedTo) {
                lastModifiedTo = moment(filterModel.lastModifiedTo);
            }
            return [
                {
                    label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.LAST_MODIFIED_DATE_FORM',
                    type: 'date',
                    key: 'lastModifiedFrom',
                    value: lastModifiedFrom
                },
                {
                    label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.LAST_MODIFIED_TO',
                    type: 'date',
                    key: 'lastModifiedTo',
                    value: lastModifiedTo
                }
            ];
        };
        EditProcessFilterCloudComponent.prototype.createProcessSortProperties = function () {
            return [
                {
                    label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.ID',
                    key: 'id',
                    value: 'id'
                },
                {
                    label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.PROCESS_NAME',
                    key: 'name',
                    value: 'name'
                },
                {
                    label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.START_DATE',
                    key: 'startDate',
                    value: 'startDate'
                },
                {
                    label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.STATUS',
                    key: 'status',
                    value: 'status'
                },
                {
                    label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.STARTED_BY',
                    key: 'initiator',
                    value: 'initiator'
                },
                {
                    label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.APP_NAME',
                    key: 'appName',
                    value: 'appName'
                },
                {
                    label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.APP_VERSION',
                    key: 'appVersion',
                    value: 'appVersion'
                },
                {
                    label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.PROCESS_INS_ID',
                    key: 'processInstanceId',
                    value: 'processInstanceId'
                },
                {
                    label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.PROCESS_DEF_ID',
                    key: 'processDefinitionId',
                    value: 'processDefinitionId'
                },
                {
                    label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.PROCESS_DEF_NAME',
                    key: 'processDefinitionName',
                    value: 'processDefinitionName'
                },
                {
                    label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.PROCESS_DEF_KEY',
                    key: 'processDefinitionKey',
                    value: 'processDefinitionKey'
                },
                {
                    label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.LAST_MODIFIED',
                    key: 'lastModified',
                    value: 'lastModified'
                },
                {
                    label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.BUSINESS_KEY',
                    key: 'businessKey',
                    value: 'businessKey'
                }
            ];
        };
        EditProcessFilterCloudComponent.prototype.isFilterChanged = function (oldValue, newValue) {
            var oldJson = JSON.stringify(this.processFilterCloudService.writeQueryParams(oldValue || {}, this.filterProperties));
            var newJson = JSON.stringify(this.processFilterCloudService.writeQueryParams(newValue || {}, this.filterProperties));
            return oldJson !== newJson;
        };
        EditProcessFilterCloudComponent.prototype.createProcessFilterProperties = function (filterModel) {
            var appVersionMultiple = [];
            if (filterModel.appVersion) {
                appVersionMultiple.push(Array.isArray(filterModel.appVersion)
                    ? filterModel.appVersion.map(function (entry) { return entry.toString(); })
                    : "" + filterModel.appVersion);
            }
            return [
                {
                    label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.APP_NAME',
                    type: 'select',
                    key: 'appName',
                    value: filterModel.appName || '',
                    options: this.applicationNames
                },
                {
                    label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.APP_VERSION',
                    type: 'number',
                    key: 'appVersion',
                    value: filterModel.appVersion
                },
                {
                    label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.APP_VERSION',
                    type: 'multi-select',
                    key: 'appVersionMultiple',
                    value: appVersionMultiple,
                    options: this.appVersionOptions
                },
                {
                    label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.PROCESS_INS_ID',
                    type: 'text',
                    key: 'processInstanceId',
                    value: filterModel.processInstanceId || ''
                },
                {
                    label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.PROCESS_NAME',
                    type: 'text',
                    key: 'processName',
                    value: filterModel.processName || ''
                },
                {
                    label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.PROCESS_DEF_NAME',
                    type: 'select',
                    key: 'processDefinitionName',
                    value: filterModel.processDefinitionName || '',
                    options: this.processDefinitionNames
                },
                {
                    label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.STATUS',
                    type: 'select',
                    key: 'status',
                    value: filterModel.status || this.status[0].value,
                    options: this.status
                },
                {
                    label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.PROCESS_DEF_ID',
                    type: 'text',
                    key: 'processDefinitionId',
                    value: filterModel.processDefinitionId || ''
                },
                {
                    label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.PROCESS_DEF_KEY',
                    type: 'text',
                    key: 'processDefinitionKey',
                    value: filterModel.processDefinitionKey || ''
                },
                {
                    label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.SORT',
                    type: 'select',
                    key: 'sort',
                    value: filterModel.sort || this.createSortProperties[0].value,
                    options: this.createSortProperties
                },
                {
                    label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.DIRECTION',
                    type: 'select',
                    key: 'order',
                    value: filterModel.order || this.directions[0].value,
                    options: this.directions
                },
                {
                    label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.COMPLETED_DATE',
                    type: 'date',
                    key: 'completedDate',
                    value: filterModel.completedDate || false
                },
                {
                    label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.STARTED_BY',
                    type: 'people',
                    key: 'initiator',
                    value: filterModel.initiator,
                    selectionMode: 'multiple'
                },
                {
                    label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.COMPLETED_DATE',
                    type: 'date-range',
                    key: 'completedDateRange',
                    attributes: { dateType: 'completedDateType', from: '_completedFrom', to: '_completedTo' },
                    value: {
                        completedDateType: filterModel.completedDateType || null,
                        _completedFrom: filterModel.completedFrom || null,
                        _completedTo: filterModel.completedTo || null
                    }
                },
                {
                    label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.STARTED_DATE',
                    type: 'date-range',
                    key: 'startedDateRange',
                    attributes: { dateType: 'startedDateType', from: '_startFrom', to: '_startTo' },
                    value: {
                        startedDateType: filterModel.startedDateType || null,
                        _startFrom: filterModel.startFrom || null,
                        _startTo: filterModel.startTo || null
                    }
                },
                {
                    label: 'ADF_CLOUD_EDIT_PROCESS_FILTER.LABEL.SUSPENDED_DATE',
                    type: 'date-range',
                    key: 'suspendedDateRange',
                    attributes: { dateType: 'suspendedDateType', from: '_suspendedFrom', to: '_suspendedTo' },
                    value: {
                        suspendedDateType: filterModel.suspendedDateType || null,
                        _suspendedFrom: filterModel.suspendedFrom || null,
                        _suspendedTo: filterModel.suspendedTo || null
                    }
                }
            ];
        };
        return EditProcessFilterCloudComponent;
    }());
    EditProcessFilterCloudComponent.ACTION_SAVE = 'save';
    EditProcessFilterCloudComponent.ACTION_SAVE_AS = 'saveAs';
    EditProcessFilterCloudComponent.ACTION_DELETE = 'delete';
    EditProcessFilterCloudComponent.DEFAULT_PROCESS_FILTER_PROPERTIES = ['status', 'sort', 'order', 'lastModified'];
    EditProcessFilterCloudComponent.DEFAULT_SORT_PROPERTIES = ['id', 'name', 'status', 'startDate'];
    EditProcessFilterCloudComponent.DEFAULT_ACTIONS = ['save', 'saveAs', 'delete'];
    EditProcessFilterCloudComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'adf-cloud-edit-process-filter',
                    template: "<mat-accordion [hideToggle]=\"isLoading\">\n    <mat-expansion-panel (afterExpand)=\"onExpand()\" (closed)=\"onClose()\">\n        <mat-expansion-panel-header *ngIf=\"processFilter\" id=\"adf-edit-process-filter-expansion-header\">\n            <ng-container *ngIf=\"!isLoading; else loadingTemplate\">\n                <mat-panel-title *ngIf=\"showProcessFilterName\" fxLayoutAlign=\"space-between center\" id=\"adf-edit-process-filter-title-id\">{{processFilter.name | translate}}</mat-panel-title>\n                <mat-panel-description fxLayoutAlign=\"space-between center\" id=\"adf-edit-process-filter-sub-title-id\">\n                    <span *ngIf=\"showTitle\"> {{ 'ADF_CLOUD_EDIT_PROCESS_FILTER.TITLE' | translate}}</span>\n                    <div *ngIf=\"showFilterActions\" class=\"adf-cloud-edit-process-filter-actions\">\n                        <ng-container *ngIf=\"toggleFilterActions\">\n                            <button *ngFor=\"let filterAction of processFilterActions\" mat-icon-button matTooltip=\"{{ filterAction.tooltip | translate}}\" [attr.data-automation-id]=\"'adf-filter-action-' + filterAction.actionType\" [disabled]=\"isDisabledAction(filterAction)\" (click)=\"executeFilterActions(filterAction)\">\n                                <adf-icon [value]=\"filterAction.icon\"></adf-icon>\n                            </button>\n                        </ng-container>\n                    </div>\n                </mat-panel-description>\n            </ng-container>\n            <ng-template #loadingTemplate>\n                <div class=\"adf-cloud-edit-process-filter-loading-margin\">\n                    <mat-spinner [diameter]=\"30\"></mat-spinner>\n                </div>\n            </ng-template>\n        </mat-expansion-panel-header>\n        <ng-container *ngIf=\"!isLoading\">\n            <form [formGroup]=\"editProcessFilterForm\" *ngIf=\"editProcessFilterForm\">\n                <div fxLayout=\"row wrap\" fxLayout.xs=\"column\" fxLayoutGap=\"10px\" fxLayoutAlign=\"start center\">\n                    <ng-container *ngFor=\"let processFilterProperty of processFilterProperties\">\n                        <mat-form-field [floatLabel]=\"'auto'\" fxFlex=\"23%\" *ngIf=\"processFilterProperty.type === 'select'\" [attr.data-automation-id]=\"processFilterProperty.key\">\n                            <mat-select\n                                placeholder=\"{{processFilterProperty.label | translate}}\"\n                                [formControlName]=\"processFilterProperty.key\"\n                                [attr.data-automation-id]=\"'adf-cloud-edit-process-property-' + processFilterProperty.key\">\n                                <mat-option\n                                    *ngFor=\"let propertyOption of processFilterProperty.options\"\n                                    [value]=\"propertyOption.value\"\n                                    [attr.data-automation-id]=\"'adf-cloud-edit-process-property-options-' + processFilterProperty.key\"\n                                >{{ propertyOption.label | translate }}</mat-option>\n                            </mat-select>\n                        </mat-form-field>\n                        <mat-form-field [floatLabel]=\"'auto'\" fxFlex=\"23%\" *ngIf=\"processFilterProperty.type === 'multi-select'\" [attr.data-automation-id]=\"processFilterProperty.key\">\n                            <mat-select\n                                placeholder=\"{{processFilterProperty.label | translate}}\"\n                                [formControlName]=\"processFilterProperty.key\"\n                                [attr.data-automation-id]=\"'adf-cloud-edit-process-property-' + processFilterProperty.key\"\n                                [multiple]=\"true\">\n                                <mat-option *ngFor=\"let propertyOption of processFilterProperty.options\" [value]=\"propertyOption.value\" [attr.data-automation-id]=\"'adf-cloud-edit-process-property-options-' + processFilterProperty.key\">\n                                    {{ propertyOption.label | translate }}\n                                </mat-option>\n                            </mat-select>\n                        </mat-form-field>\n                        <mat-form-field [floatLabel]=\"'auto'\" fxFlex=\"23%\" *ngIf=\"processFilterProperty.type === 'text'\" [attr.data-automation-id]=\"processFilterProperty.key\">\n                            <input matInput\n                                [formControlName]=\"processFilterProperty.key\"\n                                type=\"text\"\n                                placeholder=\"{{processFilterProperty.label | translate}}\"\n                                [attr.data-automation-id]=\"'adf-cloud-edit-process-property-' + processFilterProperty.key\"/>\n                        </mat-form-field>\n                        <mat-form-field [floatLabel]=\"'auto'\" fxFlex=\"23%\" *ngIf=\"processFilterProperty.type === 'number'\" [attr.data-automation-id]=\"processFilterProperty.key\">\n                            <input matInput\n                                [formControlName]=\"processFilterProperty.key\"\n                                type=\"number\" min=\"0\"\n                                placeholder=\"{{processFilterProperty.label | translate}}\"\n                                [attr.data-automation-id]=\"'adf-cloud-edit-process-property-' + processFilterProperty.key\"/>\n                        </mat-form-field>\n                        <mat-form-field [floatLabel]=\"'auto'\" fxFlex=\"23%\" *ngIf=\"processFilterProperty.type === 'date'\" [attr.data-automation-id]=\"processFilterProperty.key\">\n                            <mat-label>{{processFilterProperty.label | translate}}</mat-label>\n                            <input\n                                matInput\n                                [formControlName]=\"processFilterProperty.key\"\n                                (keyup)=\"onDateChanged($any($event).srcElement.value, processFilterProperty)\"\n                                (dateChange)=\"onDateChanged($event.value, processFilterProperty)\"\n                                [matDatepicker]=\"dateController\"\n                                placeholder=\"{{processFilterProperty.label | translate}}\"\n                                [attr.data-automation-id]=\"'adf-cloud-edit-process-property-' + processFilterProperty.key\">\n                        <mat-datepicker-toggle matSuffix [for]=\"dateController\" [attr.data-automation-id]=\"'adf-cloud-edit-process-property-date-toggle-' + processFilterProperty.key\"></mat-datepicker-toggle>\n                        <mat-datepicker #dateController [attr.data-automation-id]=\"'adf-cloud-edit-process-property-date-picker-' + processFilterProperty.key\"></mat-datepicker>\n                        <div class=\"adf-edit-process-filter-date-error-container\">\n                            <div *ngIf=\"hasError(processFilterProperty)\">\n                                <div class=\"adf-error-text\">{{'ADF_CLOUD_EDIT_PROCESS_FILTER.ERROR.DATE' | translate}}</div>\n                                <mat-icon class=\"adf-error-icon\">warning</mat-icon>\n                            </div>\n                        </div>\n                        </mat-form-field>\n\n                        <adf-cloud-date-range-filter *ngIf=\"processFilterProperty.type === 'date-range'\"\n                            [processFilterProperty]=\"processFilterProperty\"\n                            [options]=\"processFilterProperty.dateFilterOptions\"\n                            (dateTypeChange)=\"onDateTypeChange($event, processFilterProperty)\"\n                            (dateChanged)=\"onDateRangeFilterChanged($event, processFilterProperty)\"></adf-cloud-date-range-filter>\n\n                        <div fxFlex=\"23%\" *ngIf=\"processFilterProperty.type === 'people'\">\n                            <adf-cloud-people\n                                [preSelectUsers]=\"initiatorOptions\"\n                                [title]=\"processFilterProperty.label\"\n                                [validate]=\"true\"\n                                [appName]=\"appName\"\n                                [mode]=\"processFilterProperty.selectionMode\"\n                                (changedUsers)=\"onChangedUser($event, processFilterProperty)\"></adf-cloud-people>\n                        </div>\n                    </ng-container>\n                </div>\n            </form>\n        </ng-container>\n    </mat-expansion-panel>\n</mat-accordion>\n",
                    encapsulation: i0.ViewEncapsulation.None,
                    styles: [".adf-edit-process-filter-date-error-container{height:20px;margin-top:12px;position:absolute;width:100%}.adf-edit-process-filter-date-error-container>div{display:flex;flex-flow:row;justify-content:flex-start}.adf-edit-process-filter-date-error-container .adf-error-text{color:var(--theme-warn-color);font-size:11px;height:16px;line-height:1.33;padding-right:8px;width:auto}.adf-edit-process-filter-date-error-container .adf-error-icon{color:var(--theme-warn-color);font-size:16px}.adf-cloud-edit-process-filter-loading-margin{margin-left:calc(50% - 50px);margin-right:calc(50% - 50px)}"]
                },] }
    ];
    EditProcessFilterCloudComponent.ctorParameters = function () { return [
        { type: forms.FormBuilder },
        { type: i2.MatDialog },
        { type: core.DateAdapter },
        { type: i1.UserPreferencesService },
        { type: i1.TranslationService },
        { type: ProcessFilterCloudService },
        { type: AppsProcessCloudService },
        { type: ProcessCloudService }
    ]; };
    EditProcessFilterCloudComponent.propDecorators = {
        appName: [{ type: i0.Input }],
        role: [{ type: i0.Input }],
        id: [{ type: i0.Input }],
        filterProperties: [{ type: i0.Input }],
        sortProperties: [{ type: i0.Input }],
        actions: [{ type: i0.Input }],
        showFilterActions: [{ type: i0.Input }],
        showTitle: [{ type: i0.Input }],
        showProcessFilterName: [{ type: i0.Input }],
        filterChange: [{ type: i0.Output }],
        action: [{ type: i0.Output }],
        processFilter: [{ type: i0.Input }]
    };

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var ɵ0$4 = i1.MOMENT_DATE_FORMATS;
    var ProcessFiltersCloudModule = /** @class */ (function () {
        function ProcessFiltersCloudModule() {
        }
        return ProcessFiltersCloudModule;
    }());
    ProcessFiltersCloudModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [
                        forms.FormsModule,
                        forms.ReactiveFormsModule,
                        http.HttpClientModule,
                        common.CommonModule,
                        flexLayout.FlexLayoutModule,
                        MaterialModule,
                        AppListCloudModule,
                        i1.CoreModule,
                        ProcessCommonModule,
                        PeopleCloudModule
                    ],
                    declarations: [ProcessFiltersCloudComponent, EditProcessFilterCloudComponent, ProcessFilterDialogCloudComponent],
                    exports: [ProcessFiltersCloudComponent, EditProcessFilterCloudComponent, ProcessFilterDialogCloudComponent],
                    providers: [
                        { provide: core.DateAdapter, useClass: i1.MomentDateAdapter },
                        { provide: core.MAT_DATE_FORMATS, useValue: ɵ0$4 }
                    ]
                },] }
    ];

    var ProcessListCloudService = /** @class */ (function (_super) {
        __extends(ProcessListCloudService, _super);
        function ProcessListCloudService(apiService, appConfigService, logService) {
            var _this = _super.call(this, apiService, appConfigService) || this;
            _this.logService = logService;
            return _this;
        }
        ProcessListCloudService.prototype.getProcessByRequest = function (requestNode, queryUrl) {
            if (requestNode.appName || requestNode.appName === '') {
                queryUrl = queryUrl || this.getBasePath(requestNode.appName) + "/query/v1/process-instances";
                var queryParams = this.buildQueryParams(requestNode);
                var sortingParams = this.buildSortingParam(requestNode.sorting);
                if (sortingParams) {
                    queryParams['sort'] = sortingParams;
                }
                return this.get(queryUrl, queryParams).pipe(operators.map(function (response) {
                    var entries = response.list && response.list.entries;
                    if (entries) {
                        response.list.entries = entries.map(function (entryData) {
                            return entryData.entry;
                        });
                    }
                    return response;
                }));
            }
            else {
                this.logService.error('Appname is mandatory for querying task');
                return rxjs.throwError('Appname not configured');
            }
        };
        ProcessListCloudService.prototype.isPropertyValueValid = function (requestNode, property) {
            return requestNode[property] !== '' && requestNode[property] !== null && requestNode[property] !== undefined;
        };
        ProcessListCloudService.prototype.buildQueryParams = function (requestNode) {
            var queryParam = {};
            for (var property in requestNode) {
                if (requestNode.hasOwnProperty(property) &&
                    !this.isExcludedField(property) &&
                    this.isPropertyValueValid(requestNode, property)) {
                    queryParam[property] = requestNode[property];
                }
            }
            if (!queryParam['status']) {
                queryParam['status'] = this.buildFilterForAllStatus();
            }
            return queryParam;
        };
        ProcessListCloudService.prototype.buildFilterForAllStatus = function () {
            return ['RUNNING', 'SUSPENDED', 'CANCELLED', 'COMPLETED'];
        };
        ProcessListCloudService.prototype.isExcludedField = function (property) {
            return property === 'appName' || property === 'sorting';
        };
        ProcessListCloudService.prototype.buildSortingParam = function (models) {
            var e_1, _a;
            var finalSorting = '';
            if (models) {
                try {
                    for (var models_1 = __values(models), models_1_1 = models_1.next(); !models_1_1.done; models_1_1 = models_1.next()) {
                        var sort = models_1_1.value;
                        if (!finalSorting) {
                            finalSorting = sort.orderBy + "," + sort.direction;
                        }
                        else {
                            finalSorting = finalSorting + "&" + sort.orderBy + "," + sort.direction;
                        }
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (models_1_1 && !models_1_1.done && (_a = models_1.return)) _a.call(models_1);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
            }
            return encodeURI(finalSorting);
        };
        return ProcessListCloudService;
    }(BaseCloudService));
    ProcessListCloudService.ɵprov = i0.ɵɵdefineInjectable({ factory: function ProcessListCloudService_Factory() { return new ProcessListCloudService(i0.ɵɵinject(i1.AlfrescoApiService), i0.ɵɵinject(i1.AppConfigService), i0.ɵɵinject(i1.LogService)); }, token: ProcessListCloudService, providedIn: "root" });
    ProcessListCloudService.decorators = [
        { type: i0.Injectable, args: [{ providedIn: 'root' },] }
    ];
    ProcessListCloudService.ctorParameters = function () { return [
        { type: i1.AlfrescoApiService },
        { type: i1.AppConfigService },
        { type: i1.LogService }
    ]; };

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var processCloudPresetsDefaultModel = {
        'default': [
            {
                'key': 'name',
                'type': 'text',
                'title': 'ADF_CLOUD_PROCESS_LIST.PROPERTIES.NAME',
                'sortable': true
            },
            {
                'key': 'startDate',
                'type': 'date',
                'title': 'ADF_CLOUD_PROCESS_LIST.PROPERTIES.START_DATE',
                'cssClass': 'hidden',
                'sortable': true,
                'format': 'timeAgo'
            }
        ]
    };

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var ProcessQueryCloudRequestModel = /** @class */ (function () {
        function ProcessQueryCloudRequestModel(obj) {
            if (obj) {
                this.appName = obj.appName;
                this.appVersion = obj.appVersion;
                this.initiator = obj.initiator;
                this.id = obj.id;
                this.name = obj.name;
                this.processDefinitionId = obj.processDefinitionId;
                this.processDefinitionName = obj.processDefinitionName;
                this.processDefinitionKey = obj.processDefinitionKey;
                this.status = obj.status;
                this.startDate = obj.startDate;
                this.businessKey = obj.businessKey;
                this.lastModified = obj.lastModified;
                this.lastModifiedTo = obj.lastModifiedTo;
                this.lastModifiedFrom = obj.lastModifiedFrom;
                this.startFrom = obj.startFrom;
                this.startTo = obj.startTo;
                this.completedFrom = obj.completedFrom;
                this.completedTo = obj.completedTo;
                this.suspendedFrom = obj.suspendedFrom;
                this.suspendedTo = obj.suspendedTo;
                this.completedDate = obj.completedDate;
                this.maxItems = obj.maxItems;
                this.skipCount = obj.skipCount;
                this.sorting = obj.sorting;
            }
        }
        return ProcessQueryCloudRequestModel;
    }());

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var ProcessListCloudSortingModel = /** @class */ (function () {
        function ProcessListCloudSortingModel(obj) {
            if (obj) {
                this.orderBy = obj.orderBy;
                this.direction = obj.direction;
            }
        }
        return ProcessListCloudSortingModel;
    }());

    var ProcessListCloudComponent = /** @class */ (function (_super) {
        __extends(ProcessListCloudComponent, _super);
        function ProcessListCloudComponent(processListCloudService, appConfigService, userPreferences) {
            var _this = _super.call(this, appConfigService, ProcessListCloudComponent.PRESET_KEY, processCloudPresetsDefaultModel) || this;
            _this.processListCloudService = processListCloudService;
            _this.userPreferences = userPreferences;
            _this.appName = '';
            _this.initiator = '';
            _this.id = '';
            _this.name = '';
            _this.processDefinitionId = '';
            _this.processDefinitionName = '';
            _this.processDefinitionKey = '';
            _this.status = '';
            _this.businessKey = '';
            _this.startFrom = '';
            _this.startTo = '';
            _this.completedFrom = '';
            _this.completedTo = '';
            _this.completedDate = '';
            _this.suspendedFrom = '';
            _this.suspendedTo = '';
            _this.selectionMode = 'single';
            _this.multiselect = false;
            _this.showActions = false;
            _this.actionsPosition = 'right';
            _this.stickyHeader = false;
            _this.showContextMenu = false;
            _this.rowClick = new i0.EventEmitter();
            _this.rowsSelected = new i0.EventEmitter();
            _this.showRowContextMenu = new i0.EventEmitter();
            _this.showRowActionsMenu = new i0.EventEmitter();
            _this.executeRowAction = new i0.EventEmitter();
            _this.error = new i0.EventEmitter();
            _this.success = new i0.EventEmitter();
            _this.skipCount = 0;
            _this.isLoading = true;
            _this.rows = [];
            _this.defaultSorting = { key: 'startDate', direction: 'desc' };
            _this.size = userPreferences.paginationSize;
            _this.userPreferences.select(i1.UserPreferenceValues.PaginationSize).subscribe(function (pageSize) {
                _this.size = pageSize;
            });
            _this.pagination = new rxjs.BehaviorSubject({
                maxItems: _this.size,
                skipCount: 0,
                totalItems: 0
            });
            return _this;
        }
        ProcessListCloudComponent.prototype.ngAfterContentInit = function () {
            this.createDatatableSchema();
        };
        ProcessListCloudComponent.prototype.ngOnChanges = function (changes) {
            if (this.isPropertyChanged(changes, 'sorting')) {
                this.formatSorting(changes['sorting'].currentValue);
            }
            if (this.isAnyPropertyChanged(changes)) {
                this.reload();
            }
        };
        ProcessListCloudComponent.prototype.getCurrentId = function () {
            return this.currentInstanceId;
        };
        ProcessListCloudComponent.prototype.reload = function () {
            this.requestNode = this.createRequestNode();
            if (this.requestNode.appName || this.requestNode.appName === '') {
                this.load(this.requestNode);
            }
            else {
                this.rows = [];
            }
        };
        ProcessListCloudComponent.prototype.load = function (requestNode) {
            var _this = this;
            this.isLoading = true;
            this.processListCloudService.getProcessByRequest(requestNode).subscribe(function (processes) {
                _this.rows = processes.list.entries;
                _this.success.emit(processes);
                _this.isLoading = false;
                _this.pagination.next(processes.list.pagination);
            }, function (error) {
                _this.error.emit(error);
                _this.isLoading = false;
            });
        };
        ProcessListCloudComponent.prototype.isAnyPropertyChanged = function (changes) {
            for (var property in changes) {
                if (this.isPropertyChanged(changes, property)) {
                    return true;
                }
            }
            return false;
        };
        ProcessListCloudComponent.prototype.isPropertyChanged = function (changes, property) {
            return changes.hasOwnProperty(property);
        };
        ProcessListCloudComponent.prototype.isListEmpty = function () {
            return !this.rows || this.rows.length === 0;
        };
        ProcessListCloudComponent.prototype.resetPagination = function () {
            this.skipCount = 0;
            this.size = this.userPreferences.paginationSize;
            this.pagination.next({
                skipCount: 0,
                maxItems: this.size
            });
        };
        ProcessListCloudComponent.prototype.updatePagination = function (pagination) {
            this.size = pagination.maxItems;
            this.skipCount = pagination.skipCount;
            this.pagination.next(pagination);
            this.reload();
        };
        ProcessListCloudComponent.prototype.onSortingChanged = function (event) {
            this.setSorting(event.detail);
            this.formatSorting(this.sorting);
            this.reload();
        };
        ProcessListCloudComponent.prototype.onRowClick = function (item) {
            this.currentInstanceId = item.value.getValue('id');
            this.rowClick.emit(this.currentInstanceId);
        };
        ProcessListCloudComponent.prototype.onRowSelect = function (event) {
            this.selectedInstances = __spread(event.detail.selection);
            this.rowsSelected.emit(this.selectedInstances);
        };
        ProcessListCloudComponent.prototype.onRowUnselect = function (event) {
            this.selectedInstances = __spread(event.detail.selection);
            this.rowsSelected.emit(this.selectedInstances);
        };
        ProcessListCloudComponent.prototype.onRowKeyUp = function (event) {
            if (event.detail.keyboardEvent.key === 'Enter') {
                event.preventDefault();
                this.currentInstanceId = event.detail.row.getValue('id');
                this.rowClick.emit(this.currentInstanceId);
            }
        };
        ProcessListCloudComponent.prototype.onShowRowActionsMenu = function (event) {
            this.showRowActionsMenu.emit(event);
        };
        ProcessListCloudComponent.prototype.onShowRowContextMenu = function (event) {
            this.showRowContextMenu.emit(event);
        };
        ProcessListCloudComponent.prototype.onExecuteRowAction = function (row) {
            this.executeRowAction.emit(row);
        };
        ProcessListCloudComponent.prototype.createRequestNode = function () {
            var requestNode = {
                appName: this.appName,
                appVersion: this.getAppVersions(),
                maxItems: this.size,
                skipCount: this.skipCount,
                initiator: this.initiator,
                id: this.id,
                name: this.name,
                processDefinitionId: this.processDefinitionId,
                processDefinitionName: this.processDefinitionName,
                processDefinitionKey: this.processDefinitionKey,
                status: this.status,
                businessKey: this.businessKey,
                lastModifiedFrom: this.lastModifiedFrom,
                lastModifiedTo: this.lastModifiedTo,
                startFrom: this.startFrom,
                startTo: this.startTo,
                completedFrom: this.completedFrom,
                completedTo: this.completedTo,
                suspendedFrom: this.suspendedFrom,
                suspendedTo: this.suspendedTo,
                completedDate: this.completedDate,
                sorting: this.sorting
            };
            return new ProcessQueryCloudRequestModel(requestNode);
        };
        ProcessListCloudComponent.prototype.getAppVersions = function () {
            return this.appVersion instanceof Array ? this.appVersion.join(',') : (this.appVersion ? String(this.appVersion) : '');
        };
        ProcessListCloudComponent.prototype.setSorting = function (sortDetail) {
            var sorting = sortDetail ? {
                orderBy: sortDetail.key,
                direction: sortDetail.direction.toUpperCase()
            } : Object.assign({}, this.defaultSorting);
            this.sorting = [new ProcessListCloudSortingModel(sorting)];
        };
        ProcessListCloudComponent.prototype.formatSorting = function (sorting) {
            this.formattedSorting = this.isValidSorting(sorting) ? [
                sorting[0].orderBy,
                sorting[0].direction.toLocaleLowerCase()
            ] : null;
        };
        ProcessListCloudComponent.prototype.isValidSorting = function (sorting) {
            return sorting.length && sorting[0].orderBy && sorting[0].direction;
        };
        return ProcessListCloudComponent;
    }(i1.DataTableSchema));
    ProcessListCloudComponent.PRESET_KEY = 'adf-cloud-process-list.presets';
    ProcessListCloudComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'adf-cloud-process-list',
                    template: "<adf-datatable #dataTable\n        [rows]=\"rows\"\n        [columns]=\"columns\"\n        [stickyHeader]=\"stickyHeader\"\n        [loading]=\"isLoading\"\n        [sorting]=\"formattedSorting\"\n        [selectionMode]=\"selectionMode\"\n        [multiselect]=\"multiselect\"\n        [actions]=\"showActions\"\n        [actionsPosition]=\"actionsPosition\"\n        [contextMenu]=\"showContextMenu\"\n        (showRowActionsMenu)=\"onShowRowActionsMenu($event)\"\n        (showRowContextMenu)=\"onShowRowContextMenu($event)\"\n        (executeRowAction)=\"onExecuteRowAction($event)\"\n        (rowClick)=\"onRowClick($any($event))\"\n        (row-select)=\"onRowSelect($any($event))\"\n        (row-unselect)=\"onRowUnselect($any($event))\"\n        (row-keyup)=\"onRowKeyUp($any($event))\"\n        (sorting-changed)=\"onSortingChanged($any($event))\">\n        <adf-loading-content-template>\n            <ng-template>\n                <mat-progress-spinner\n                    *ngIf=\"!customLoadingContent\"\n                    class=\"adf-cloud-process-list-loading-margin\"\n                    [color]=\"'primary'\"\n                    [mode]=\"'indeterminate'\">\n                </mat-progress-spinner>\n                <ng-content select=\"adf-custom-loading-content-template\"></ng-content>\n            </ng-template>\n        </adf-loading-content-template>\n        <adf-no-content-template>\n            <ng-template>\n                <adf-empty-content *ngIf=\"!emptyCustomContent\"\n                    icon=\"assessment\"\n                    [title]=\"'ADF_CLOUD_PROCESS_LIST.MESSAGES.TITLE' | translate\"\n                    [subtitle]=\"'ADF_CLOUD_PROCESS_LIST.MESSAGES.SUBTITLE'| translate\">\n                </adf-empty-content>\n                <ng-content select=\"adf-custom-empty-content-template\"></ng-content>\n            </ng-template>\n        </adf-no-content-template>\n</adf-datatable>\n",
                    encapsulation: i0.ViewEncapsulation.None,
                    styles: [".adf-cloud-process-list-loading-margin{margin-left:calc(50% - 50px);margin-right:calc(50% - 50px)}.adf-no-content-message{font-size:16px;font-weight:700;opacity:.54;text-align:center}"]
                },] }
    ];
    ProcessListCloudComponent.ctorParameters = function () { return [
        { type: ProcessListCloudService },
        { type: i1.AppConfigService },
        { type: i1.UserPreferencesService }
    ]; };
    ProcessListCloudComponent.propDecorators = {
        dataTable: [{ type: i0.ViewChild, args: [i1.DataTableComponent,] }],
        emptyCustomContent: [{ type: i0.ContentChild, args: [i1.CustomEmptyContentTemplateDirective,] }],
        customLoadingContent: [{ type: i0.ContentChild, args: [i1.CustomLoadingContentTemplateDirective,] }],
        appName: [{ type: i0.Input }],
        appVersion: [{ type: i0.Input }],
        initiator: [{ type: i0.Input }],
        id: [{ type: i0.Input }],
        name: [{ type: i0.Input }],
        processDefinitionId: [{ type: i0.Input }],
        processDefinitionName: [{ type: i0.Input }],
        processDefinitionKey: [{ type: i0.Input }],
        status: [{ type: i0.Input }],
        businessKey: [{ type: i0.Input }],
        lastModifiedFrom: [{ type: i0.Input }],
        lastModifiedTo: [{ type: i0.Input }],
        startFrom: [{ type: i0.Input }],
        startTo: [{ type: i0.Input }],
        completedFrom: [{ type: i0.Input }],
        completedTo: [{ type: i0.Input }],
        completedDate: [{ type: i0.Input }],
        suspendedFrom: [{ type: i0.Input }],
        suspendedTo: [{ type: i0.Input }],
        selectionMode: [{ type: i0.Input }],
        multiselect: [{ type: i0.Input }],
        sorting: [{ type: i0.Input }],
        showActions: [{ type: i0.Input }],
        actionsPosition: [{ type: i0.Input }],
        stickyHeader: [{ type: i0.Input }],
        showContextMenu: [{ type: i0.Input }],
        rowClick: [{ type: i0.Output }],
        rowsSelected: [{ type: i0.Output }],
        showRowContextMenu: [{ type: i0.Output }],
        showRowActionsMenu: [{ type: i0.Output }],
        executeRowAction: [{ type: i0.Output }],
        error: [{ type: i0.Output }],
        success: [{ type: i0.Output }]
    };

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var ProcessListCloudModule = /** @class */ (function () {
        function ProcessListCloudModule() {
        }
        return ProcessListCloudModule;
    }());
    ProcessListCloudModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [
                        common.CommonModule,
                        MaterialModule,
                        i1.CoreModule
                    ],
                    declarations: [ProcessListCloudComponent],
                    exports: [ProcessListCloudComponent]
                },] }
    ];

    var StartProcessCloudService = /** @class */ (function (_super) {
        __extends(StartProcessCloudService, _super);
        function StartProcessCloudService(apiService, logService, appConfigService) {
            var _this = _super.call(this, apiService, appConfigService) || this;
            _this.logService = logService;
            return _this;
        }
        StartProcessCloudService.prototype.getProcessDefinitions = function (appName) {
            if (appName || appName === '') {
                var url = this.getBasePath(appName) + "/rb/v1/process-definitions";
                return this.get(url).pipe(operators.map(function (res) {
                    return res.list.entries.map(function (processDefs) { return new ProcessDefinitionCloud(processDefs.entry); });
                }));
            }
            else {
                this.logService.error('AppName is mandatory for querying task');
                return rxjs.throwError('AppName not configured');
            }
        };
        StartProcessCloudService.prototype.createProcess = function (appName, payload) {
            var url = this.getBasePath(appName) + "/rb/v1/process-instances/create";
            payload.payloadType = 'CreateProcessInstancePayload';
            return this.post(url, payload).pipe(operators.map(function (result) { return result.entry; }));
        };
        StartProcessCloudService.prototype.startCreatedProcess = function (appName, createdProcessInstanceId, payload) {
            var url = this.getBasePath(appName) + "/rb/v1/process-instances/" + createdProcessInstanceId + "/start";
            return this.post(url, payload).pipe(operators.map(function (result) { return result.entry; }));
        };
        StartProcessCloudService.prototype.startProcess = function (appName, payload) {
            var url = this.getBasePath(appName) + "/rb/v1/process-instances";
            payload.payloadType = 'StartProcessPayload';
            return this.post(url, payload);
        };
        StartProcessCloudService.prototype.updateProcess = function (appName, processInstanceId, payload) {
            var url = this.getBasePath(appName) + "/rb/v1/process-instances/" + processInstanceId;
            payload.payloadType = 'UpdateProcessPayload';
            return this.put(url, payload).pipe(operators.map(function (processInstance) { return processInstance.entry; }));
        };
        StartProcessCloudService.prototype.deleteProcess = function (appName, processInstanceId) {
            var url = this.getBasePath(appName) + "/rb/v1/process-instances/" + processInstanceId;
            return this.delete(url);
        };
        return StartProcessCloudService;
    }(BaseCloudService));
    StartProcessCloudService.ɵprov = i0.ɵɵdefineInjectable({ factory: function StartProcessCloudService_Factory() { return new StartProcessCloudService(i0.ɵɵinject(i1.AlfrescoApiService), i0.ɵɵinject(i1.LogService), i0.ɵɵinject(i1.AppConfigService)); }, token: StartProcessCloudService, providedIn: "root" });
    StartProcessCloudService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    StartProcessCloudService.ctorParameters = function () { return [
        { type: i1.AlfrescoApiService },
        { type: i1.LogService },
        { type: i1.AppConfigService }
    ]; };

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var ProcessPayloadCloud = /** @class */ (function () {
        function ProcessPayloadCloud(obj) {
            this.payloadType = 'StartProcessPayload';
            this.processDefinitionKey = obj && obj.processDefinitionKey ? obj.processDefinitionKey : null;
            this.name = obj && obj.name ? obj.name : null;
            this.businessKey = obj && obj.businessKey ? obj.businessKey : null;
            this.variables = obj && obj.variables ? obj.variables : {};
        }
        return ProcessPayloadCloud;
    }());

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var ProcessNameCloudPipe = /** @class */ (function () {
        function ProcessNameCloudPipe(localizedDatePipe) {
            this.localizedDatePipe = localizedDatePipe;
        }
        ProcessNameCloudPipe.prototype.transform = function (processNameFormat, processInstance) {
            var processName = processNameFormat;
            if (processName.match(ProcessNameCloudPipe.DATE_TIME_IDENTIFIER_REG_EXP)) {
                var presentDateTime = moment.now();
                processName = processName.replace(ProcessNameCloudPipe.DATE_TIME_IDENTIFIER_REG_EXP, this.localizedDatePipe.transform(presentDateTime, 'medium'));
            }
            if (processName.match(ProcessNameCloudPipe.PROCESS_DEFINITION_IDENTIFIER_REG_EXP)) {
                var selectedProcessDefinitionName = processInstance ? processInstance.processDefinitionName : '';
                processName = processName.replace(ProcessNameCloudPipe.PROCESS_DEFINITION_IDENTIFIER_REG_EXP, selectedProcessDefinitionName);
            }
            return processName;
        };
        return ProcessNameCloudPipe;
    }());
    ProcessNameCloudPipe.DATE_TIME_IDENTIFIER_REG_EXP = new RegExp('%{datetime}', 'i');
    ProcessNameCloudPipe.PROCESS_DEFINITION_IDENTIFIER_REG_EXP = new RegExp('%{processdefinition}', 'i');
    ProcessNameCloudPipe.decorators = [
        { type: i0.Pipe, args: [{ name: 'processNameCloud' },] }
    ];
    ProcessNameCloudPipe.ctorParameters = function () { return [
        { type: i1.LocalizedDatePipe }
    ]; };

    var StartProcessCloudComponent = /** @class */ (function () {
        function StartProcessCloudComponent(startProcessCloudService, formBuilder, processNameCloudPipe) {
            this.startProcessCloudService = startProcessCloudService;
            this.formBuilder = formBuilder;
            this.processNameCloudPipe = processNameCloudPipe;
            this.appName = '';
            this.maxNameLength = StartProcessCloudComponent.MAX_NAME_LENGTH;
            this.name = '';
            this.showSelectProcessDropdown = true;
            this.success = new i0.EventEmitter();
            this.cancel = new i0.EventEmitter();
            this.error = new i0.EventEmitter();
            this.formContentClicked = new i0.EventEmitter();
            this.processDefinitionSelection = new i0.EventEmitter();
            this.processDefinitionList = [];
            this.errorMessageId = '';
            this.processPayloadCloud = new ProcessPayloadCloud();
            this.filteredProcesses = [];
            this.isLoading = false;
            this.isFormCloudLoaded = false;
            this.disableStartButton = true;
            this.onDestroy$ = new rxjs.Subject();
            this.processDefinitionLoaded = false;
        }
        StartProcessCloudComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.processForm = this.formBuilder.group({
                processInstanceName: new forms.FormControl('', [forms.Validators.required, forms.Validators.maxLength(this.getMaxNameLength()), forms.Validators.pattern('^[^\\s]+(\\s+[^\\s]+)*$')]),
                processDefinition: new forms.FormControl(this.processDefinitionName, [forms.Validators.required, this.processDefinitionNameValidator()])
            });
            this.processDefinition.valueChanges
                .pipe(operators.debounceTime(StartProcessCloudComponent.PROCESS_DEFINITION_DEBOUNCE))
                .pipe(operators.takeUntil(this.onDestroy$))
                .subscribe(function (processDefinitionName) {
                _this.selectProcessDefinitionByProcesDefinitionName(processDefinitionName);
            });
            this.processForm.valueChanges
                .pipe(operators.debounceTime(StartProcessCloudComponent.PROCESS_FORM_DEBOUNCE), operators.tap(function () { return _this.disableStartButton = true; }), operators.distinctUntilChanged(), operators.filter(function () { return _this.isProcessSelectionValid(); }), operators.switchMap(function () { return _this.generateProcessInstance(); })).pipe(operators.takeUntil(this.onDestroy$))
                .subscribe(function (res) {
                _this.currentCreatedProcess = res;
                _this.disableStartButton = false;
            });
            if (this.processDefinitionName) {
                this.processDefinition.setValue(this.processDefinitionName);
                this.processDefinition.markAsDirty();
                this.processDefinition.markAsTouched();
            }
        };
        StartProcessCloudComponent.prototype.ngOnChanges = function (changes) {
            if (changes['appName'] && changes['appName'].currentValue !== changes['appName'].previousValue) {
                this.appName = changes['appName'].currentValue;
                if (this.appName || this.appName === '') {
                    this.loadProcessDefinitions();
                }
            }
        };
        StartProcessCloudComponent.prototype.onKeyDown = function (event) {
            event.cancelBubble = true;
        };
        StartProcessCloudComponent.prototype.hasForm = function () {
            return this.processDefinitionCurrent && !!this.processDefinitionCurrent.formKey;
        };
        StartProcessCloudComponent.prototype.onFormLoaded = function (form) {
            this.isFormCloudLoaded = true;
            this.formCloud = form;
        };
        StartProcessCloudComponent.prototype.isProcessSelectionValid = function () {
            return this.processForm.valid && this.isProcessPayloadValid();
        };
        StartProcessCloudComponent.prototype.getMaxNameLength = function () {
            return this.maxNameLength > StartProcessCloudComponent.MAX_NAME_LENGTH ?
                StartProcessCloudComponent.MAX_NAME_LENGTH : this.maxNameLength;
        };
        StartProcessCloudComponent.prototype.generateProcessInstance = function () {
            var createPayload = new ProcessPayloadCloud({
                name: this.processInstanceName.value,
                processDefinitionKey: this.processPayloadCloud.processDefinitionKey
            });
            if (this.currentCreatedProcess && this.processPayloadCloud.processDefinitionKey === this.currentCreatedProcess.processDefinitionKey) {
                return this.startProcessCloudService.updateProcess(this.appName, this.currentCreatedProcess.id, createPayload);
            }
            else {
                return this.startProcessCloudService.createProcess(this.appName, createPayload);
            }
        };
        StartProcessCloudComponent.prototype.selectProcessDefinitionByProcesDefinitionName = function (processDefinitionName) {
            this.filteredProcesses = this.getProcessDefinitionListByNameOrKey(processDefinitionName);
            if (this.isProcessFormValid() &&
                this.filteredProcesses && this.filteredProcesses.length === 1) {
                this.setProcessDefinitionOnForm(this.filteredProcesses[0].name);
            }
        };
        StartProcessCloudComponent.prototype.setProcessDefinitionOnForm = function (selectedProcessDefinitionName) {
            this.processDefinitionCurrent = this.filteredProcesses.find(function (process) { return process.name === selectedProcessDefinitionName || process.key === selectedProcessDefinitionName; });
            this.isFormCloudLoaded = false;
            this.processPayloadCloud.processDefinitionKey = this.processDefinitionCurrent.key;
        };
        StartProcessCloudComponent.prototype.getProcessDefinitionListByNameOrKey = function (processDefinitionName) {
            var _this = this;
            return this.processDefinitionList.filter(function (processDefinitionCloud) {
                return !processDefinitionName || _this.getProcessDefinition(processDefinitionCloud, processDefinitionName);
            });
        };
        StartProcessCloudComponent.prototype.getProcessIfExists = function (processDefinition) {
            var _this = this;
            var matchedProcess = this.processDefinitionList.find(function (option) { return _this.getProcessDefinition(option, processDefinition); });
            if (!matchedProcess) {
                matchedProcess = new ProcessDefinitionCloud();
            }
            return matchedProcess;
        };
        StartProcessCloudComponent.prototype.getProcessDefinitionByName = function (processDefinitionName) {
            var matchedProcess = processDefinitionName ? this.getProcessIfExists(processDefinitionName) : this.processDefinitionList[0];
            return matchedProcess;
        };
        StartProcessCloudComponent.prototype.selectDefaultProcessDefinition = function () {
            var selectedProcess = this.getProcessDefinitionByName(this.processDefinitionName);
            if (selectedProcess) {
                this.processDefinition.setValue(selectedProcess.name);
                this.processDefinitionSelectionChanged(selectedProcess);
            }
        };
        StartProcessCloudComponent.prototype.loadProcessDefinitions = function () {
            var _this = this;
            this.resetErrorMessage();
            this.startProcessCloudService.getProcessDefinitions(this.appName)
                .pipe(operators.tap(function () { return _this.processDefinitionLoaded = true; }), operators.takeUntil(this.onDestroy$))
                .subscribe(function (processDefinitionRepresentations) {
                _this.processDefinitionList = processDefinitionRepresentations;
                if (processDefinitionRepresentations.length === 1) {
                    _this.selectDefaultProcessDefinition();
                }
                else if (_this.processDefinitionName) {
                    _this.processDefinition.setValue(_this.processDefinitionName);
                }
            }, function () {
                _this.errorMessageId = 'ADF_CLOUD_PROCESS_LIST.ADF_CLOUD_START_PROCESS.ERROR.LOAD_PROCESS_DEFS';
            });
        };
        StartProcessCloudComponent.prototype.isValidName = function (name) {
            return !!name;
        };
        StartProcessCloudComponent.prototype.isProcessFormValid = function () {
            if (this.hasForm() && this.isFormCloudLoaded) {
                return this.formCloud.isValid || this.isLoading;
            }
            else {
                return this.processForm.valid || this.isLoading;
            }
        };
        StartProcessCloudComponent.prototype.isProcessPayloadValid = function () {
            return !!this.processPayloadCloud.processDefinitionKey;
        };
        StartProcessCloudComponent.prototype.getProcessDefinition = function (processDefinitionCloud, processDefinitionName) {
            return (this.isValidName(processDefinitionCloud.name) && processDefinitionCloud.name.toLowerCase().includes(processDefinitionName.toLowerCase())) ||
                (processDefinitionCloud.key && processDefinitionCloud.key.toLowerCase().includes(processDefinitionName.toLowerCase()));
        };
        StartProcessCloudComponent.prototype.isProcessDefinitionsEmpty = function () {
            return this.processDefinitionList.length === 0;
        };
        StartProcessCloudComponent.prototype.buildProcessCloudPayload = function () {
            this.processPayloadCloud.name = this.processInstanceName.value;
            if (this.variables) {
                this.processPayloadCloud.variables = this.variables;
            }
            if (this.hasForm()) {
                this.processPayloadCloud.variables = Object.assign(this.processPayloadCloud.variables, this.formCloud.values);
            }
        };
        StartProcessCloudComponent.prototype.startProcess = function () {
            var _this = this;
            this.isLoading = true;
            this.buildProcessCloudPayload();
            this.startProcessCloudService.startCreatedProcess(this.appName, this.currentCreatedProcess.id, this.processPayloadCloud)
                .subscribe(function (res) {
                _this.success.emit(res);
                _this.isLoading = false;
            }, function (err) {
                _this.errorMessageId = 'ADF_CLOUD_PROCESS_LIST.ADF_CLOUD_START_PROCESS.ERROR.START';
                _this.error.emit(err);
                _this.isLoading = false;
            });
        };
        StartProcessCloudComponent.prototype.cancelStartProcess = function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!this.currentCreatedProcess) return [3 /*break*/, 2];
                            return [4 /*yield*/, this.startProcessCloudService.deleteProcess(this.appName, this.currentCreatedProcess.id)];
                        case 1:
                            _a.sent();
                            _a.label = 2;
                        case 2:
                            this.currentCreatedProcess = null;
                            this.cancel.emit();
                            return [2 /*return*/];
                    }
                });
            });
        };
        StartProcessCloudComponent.prototype.resetErrorMessage = function () {
            this.errorMessageId = '';
        };
        StartProcessCloudComponent.prototype.resetProcessDefinitionList = function () {
            this.processDefinition.setValue('');
            this.filteredProcesses = this.processDefinitionList;
        };
        StartProcessCloudComponent.prototype.displayProcessNameOnDropdown = function (process) {
            if (process) {
                var processName = process;
                if (typeof process !== 'string') {
                    processName = process.name;
                }
                return processName;
            }
        };
        StartProcessCloudComponent.prototype.displayDropdown = function (event) {
            event.stopPropagation();
            if (!this.inputAutocomplete.panelOpen) {
                this.resetProcessDefinitionList();
                this.inputAutocomplete.openPanel();
            }
            else {
                this.inputAutocomplete.closePanel();
            }
        };
        StartProcessCloudComponent.prototype.processDefinitionNameValidator = function () {
            var _this = this;
            return function (control) {
                var processDefinitionFieldValue = control.value;
                var processDefinitionNameError = false;
                if (processDefinitionFieldValue) {
                    var processDefinition = _this.getProcessIfExists(processDefinitionFieldValue);
                    if (!processDefinition.key) {
                        processDefinitionNameError = true;
                    }
                }
                return processDefinitionNameError ? { 'invalid name': true } : null;
            };
        };
        StartProcessCloudComponent.prototype.getProcessDefinitionValue = function (process) {
            return !!process.name ? process.name : process.key;
        };
        Object.defineProperty(StartProcessCloudComponent.prototype, "processInstanceName", {
            get: function () {
                return this.processForm.get('processInstanceName');
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(StartProcessCloudComponent.prototype, "processDefinition", {
            get: function () {
                return this.processForm.get('processDefinition');
            },
            enumerable: false,
            configurable: true
        });
        StartProcessCloudComponent.prototype.onFormContentClicked = function (content) {
            this.formContentClicked.emit(content);
        };
        StartProcessCloudComponent.prototype.processDefinitionSelectionChanged = function (processDefinition) {
            if (processDefinition) {
                var processInstanceDetails = { processDefinitionName: processDefinition.name };
                var defaultProcessName = this.processNameCloudPipe.transform(this.name, processInstanceDetails);
                this.processInstanceName.setValue(defaultProcessName);
                this.processInstanceName.markAsDirty();
                this.processInstanceName.markAsTouched();
                this.processDefinitionSelection.emit(processDefinition);
            }
        };
        StartProcessCloudComponent.prototype.ngOnDestroy = function () {
            this.onDestroy$.next(true);
            this.onDestroy$.complete();
        };
        return StartProcessCloudComponent;
    }());
    StartProcessCloudComponent.MAX_NAME_LENGTH = 255;
    StartProcessCloudComponent.PROCESS_DEFINITION_DEBOUNCE = 300;
    StartProcessCloudComponent.PROCESS_FORM_DEBOUNCE = 400;
    StartProcessCloudComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'adf-cloud-start-process',
                    template: "<mat-card class=\"adf-start-process\">\n\n    <mat-card-title class=\"adf-title\">{{'ADF_CLOUD_PROCESS_LIST.ADF_CLOUD_START_PROCESS.FORM.TITLE' | translate}}\n    </mat-card-title>\n\n    <mat-card-content>\n        <mat-card-subtitle id=\"error-message\" *ngIf=\"errorMessageId\">\n            {{ errorMessageId | translate }}\n        </mat-card-subtitle>\n\n        <div *ngIf=\"!isProcessDefinitionsEmpty(); else emptyProcessDefinitionsList\">\n            <form [formGroup]=\"processForm\">\n                <mat-form-field class=\"adf-process-input-container\"  [floatLabel]=\"'always'\">\n                    <mat-label>{{ 'ADF_CLOUD_PROCESS_LIST.ADF_CLOUD_START_PROCESS.FORM.LABEL.TYPE' | translate }}</mat-label>\n                    <input\n                        #inputAutocomplete\n                        matInput\n                        formControlName=\"processDefinition\"\n                        [matAutocomplete]=\"auto\"\n                        id=\"processDefinitionName\">\n                    <div class=\"adf-process-input-autocomplete\">\n                        <mat-autocomplete #auto=\"matAutocomplete\" id=\"processDefinitionOptions\" [displayWith]=\"displayProcessNameOnDropdown\" (optionSelected)=\"setProcessDefinitionOnForm($event.option.value)\" >\n                            <mat-option *ngFor=\"let processDef of filteredProcesses\" [value]=\"getProcessDefinitionValue(processDef)\"\n                                        (click)=\"processDefinitionSelectionChanged(processDef)\">\n                                {{ getProcessDefinitionValue(processDef) }}\n                            </mat-option>\n                        </mat-autocomplete>\n                        <button id=\"adf-select-process-dropdown\" *ngIf=\"showSelectProcessDropdown\" mat-icon-button (click)=\"displayDropdown($event)\">\n                            <mat-icon>arrow_drop_down</mat-icon>\n                        </button>\n                    </div>\n                    <mat-error *ngIf=\"processDefinition.hasError('required')\" class=\"adf-error-pb\">\n                            {{ 'ADF_CLOUD_PROCESS_LIST.ADF_CLOUD_START_PROCESS.ERROR.PROCESS_DEFINITION_REQUIRED' | translate }}\n                        </mat-error>\n                </mat-form-field>\n\n                <mat-form-field class=\"adf-process-input-container\"  [floatLabel]=\"'always'\">\n                    <mat-label>{{ 'ADF_CLOUD_PROCESS_LIST.ADF_CLOUD_START_PROCESS.FORM.LABEL.NAME' | translate }}</mat-label>\n                    <input\n                        matInput\n                        formControlName=\"processInstanceName\"\n                        id=\"processName\">\n                    <mat-error id=\"adf-start-process-required-error\" *ngIf=\"processInstanceName.hasError('required')\">\n                        {{ 'ADF_CLOUD_PROCESS_LIST.ADF_CLOUD_START_PROCESS.ERROR.PROCESS_NAME_REQUIRED' | translate }}\n                    </mat-error>\n                    <mat-error id=\"adf-start-process-maxlength-error\" *ngIf=\"processInstanceName.hasError('maxlength')\">\n                        {{ 'ADF_CLOUD_PROCESS_LIST.ADF_CLOUD_START_PROCESS.ERROR.MAXIMUM_LENGTH' | translate : { characters : maxNameLength } }}\n                    </mat-error>\n                    <mat-error *ngIf=\"processInstanceName.hasError('pattern')\">\n                        {{ 'ADF_CLOUD_PROCESS_LIST.ADF_CLOUD_START_PROCESS.ERROR.SPACE_VALIDATOR' | translate }}\n                    </mat-error>\n                </mat-form-field>\n            </form>\n\n            <ng-container *ngIf=\"hasForm() else taskFormCloudButtons\">\n                <adf-cloud-form\n                    [appName]=\"appName\"\n                    [appVersion]=\"processDefinitionCurrent.appVersion\"\n                    [data]=\"values\"\n                    [formId]=\"processDefinitionCurrent.formKey\"\n                    [showSaveButton]=\"false\"\n                    [showCompleteButton]=\"false\"\n                    [showRefreshButton]=\"false\"\n                    [showValidationIcon]=\"false\"\n                    [showTitle]=\"false\"\n                    (formContentClicked)=\"onFormContentClicked($event)\"\n                    (formLoaded)=\"onFormLoaded($event)\">\n                    <adf-cloud-form-custom-outcomes>\n                        <ng-template [ngTemplateOutlet]=\"taskFormCloudButtons\">\n                        </ng-template>\n                    </adf-cloud-form-custom-outcomes>\n                </adf-cloud-form>\n            </ng-container>\n        </div>\n\n    </mat-card-content>\n\n    <ng-template #taskFormCloudButtons>\n        <div fxLayout=\"row\" fxLayoutAlign=\"end end\">\n            <button mat-button (click)=\"cancelStartProcess()\" id=\"cancel_process\">\n                {{ 'ADF_CLOUD_PROCESS_LIST.ADF_CLOUD_START_PROCESS.FORM.ACTION.CANCEL' | translate | uppercase}}\n            </button>\n            <button color=\"primary\" mat-button [disabled]=\"disableStartButton || !isProcessFormValid()\" (click)=\"startProcess()\"\n                data-automation-id=\"btn-start\" id=\"button-start\" class=\"btn-start\">\n                {{'ADF_CLOUD_PROCESS_LIST.ADF_CLOUD_START_PROCESS.FORM.ACTION.START' | translate | uppercase}}\n            </button>\n        </div>\n    </ng-template>\n\n    <ng-template #emptyProcessDefinitionsList>\n        <mat-card-content *ngIf=\"processDefinitionLoaded\">\n            <mat-card-subtitle class=\"error-message\" id=\"no-process-message\">\n                {{ 'ADF_CLOUD_PROCESS_LIST.ADF_CLOUD_START_PROCESS.NO_PROCESS_DEFINITIONS' | translate | uppercase}}\n            </mat-card-subtitle>\n        </mat-card-content>\n    </ng-template>\n</mat-card>\n",
                    encapsulation: i0.ViewEncapsulation.None,
                    styles: [".adf-start-process mat-form-field{width:100%}.adf-start-process .mat-form-field-label{color:var(--theme-colors-mat-grey-dark)}.adf-start-process mat-card-actions{text-align:right}.adf-start-process mat-card-actions .mat-button{text-transform:uppercase!important}.adf-title{padding-bottom:1.25em}.adf-process-input-container mat-form-field{width:100%}.adf-process-input-autocomplete{display:flex}.adf-process-input-autocomplete button{position:absolute;right:-14px;top:0}.adf-start-form-container .mat-card{box-shadow:none!important;padding:0!important}.adf-start-form-actions{text-align:right!important}"]
                },] }
    ];
    StartProcessCloudComponent.ctorParameters = function () { return [
        { type: StartProcessCloudService },
        { type: forms.FormBuilder },
        { type: ProcessNameCloudPipe }
    ]; };
    StartProcessCloudComponent.propDecorators = {
        inputAutocomplete: [{ type: i0.ViewChild, args: [autocomplete.MatAutocompleteTrigger,] }],
        appName: [{ type: i0.Input }],
        maxNameLength: [{ type: i0.Input }],
        name: [{ type: i0.Input }],
        processDefinitionName: [{ type: i0.Input }],
        variables: [{ type: i0.Input }],
        values: [{ type: i0.Input }],
        showSelectProcessDropdown: [{ type: i0.Input }],
        success: [{ type: i0.Output }],
        cancel: [{ type: i0.Output }],
        error: [{ type: i0.Output }],
        formContentClicked: [{ type: i0.Output }],
        processDefinitionSelection: [{ type: i0.Output }],
        onKeyDown: [{ type: i0.HostListener, args: ['keydown', ['$event'],] }]
    };

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var StartProcessCloudModule = /** @class */ (function () {
        function StartProcessCloudModule() {
        }
        return StartProcessCloudModule;
    }());
    StartProcessCloudModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [
                        forms.FormsModule,
                        common.CommonModule,
                        FormCloudModule,
                        MaterialModule,
                        flexLayout.FlexLayoutModule,
                        forms.ReactiveFormsModule,
                        i1.CoreModule
                    ],
                    declarations: [
                        StartProcessCloudComponent
                    ],
                    exports: [
                        StartProcessCloudComponent
                    ]
                },] }
    ];

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var ProcessHeaderCloudComponent = /** @class */ (function () {
        function ProcessHeaderCloudComponent(processCloudService, translationService, appConfig) {
            this.processCloudService = processCloudService;
            this.translationService = translationService;
            this.appConfig = appConfig;
            this.appName = '';
            this.loaded = new i0.EventEmitter();
            this.onDestroy$ = new rxjs.Subject();
        }
        ProcessHeaderCloudComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.dateFormat = this.appConfig.get('dateValues.defaultDateFormat');
            this.dateLocale = this.appConfig.get('dateValues.defaultDateLocale');
            this.processCloudService.dataChangesDetected
                .pipe(operators.takeUntil(this.onDestroy$))
                .subscribe(function (processDetails) { return _this.onLoaded(processDetails); });
        };
        ProcessHeaderCloudComponent.prototype.ngOnChanges = function () {
            if ((this.appName || this.appName === '') && this.processInstanceId) {
                this.loadProcessInstanceDetails(this.appName, this.processInstanceId);
            }
        };
        ProcessHeaderCloudComponent.prototype.loadProcessInstanceDetails = function (appName, processInstanceId) {
            var _this = this;
            this.processCloudService
                .getProcessInstanceById(appName, processInstanceId)
                .subscribe(function (result) { return _this.onLoaded(result); });
        };
        ProcessHeaderCloudComponent.prototype.onLoaded = function (processInstanceDetails) {
            this.processInstanceDetails = processInstanceDetails;
            this.refreshData();
            this.loaded.emit(processInstanceDetails);
        };
        ProcessHeaderCloudComponent.prototype.refreshData = function () {
            var _this = this;
            if (this.processInstanceDetails) {
                var defaultProperties = this.initDefaultProperties();
                var filteredProperties_1 = this.appConfig.get('adf-cloud-process-header.presets.properties');
                this.properties = defaultProperties.filter(function (cardItem) { return _this.isValidSelection(filteredProperties_1, cardItem); });
            }
        };
        ProcessHeaderCloudComponent.prototype.initDefaultProperties = function () {
            return [
                new i1.CardViewTextItemModel({
                    label: 'ADF_CLOUD_PROCESS_HEADER.PROPERTIES.ID',
                    value: this.processInstanceDetails.id,
                    key: 'id'
                }),
                new i1.CardViewTextItemModel({
                    label: 'ADF_CLOUD_PROCESS_HEADER.PROPERTIES.NAME',
                    value: this.processInstanceDetails.name,
                    key: 'name',
                    default: this.translationService.instant('ADF_CLOUD_PROCESS_HEADER.PROPERTIES.NAME_DEFAULT')
                }),
                new i1.CardViewTextItemModel({
                    label: 'ADF_CLOUD_PROCESS_HEADER.PROPERTIES.STATUS',
                    value: this.processInstanceDetails.status,
                    key: 'status'
                }),
                new i1.CardViewTextItemModel({
                    label: 'ADF_CLOUD_PROCESS_HEADER.PROPERTIES.INITIATOR',
                    value: this.processInstanceDetails.initiator,
                    key: 'initiator'
                }),
                new i1.CardViewDateItemModel({
                    label: 'ADF_CLOUD_PROCESS_HEADER.PROPERTIES.START_DATE',
                    value: this.processInstanceDetails.startDate,
                    key: 'startDate',
                    format: this.dateFormat,
                    locale: this.dateLocale
                }),
                new i1.CardViewDateItemModel({
                    label: 'ADF_CLOUD_PROCESS_HEADER.PROPERTIES.LAST_MODIFIED',
                    value: this.processInstanceDetails.lastModified,
                    key: 'lastModified',
                    format: this.dateFormat,
                    locale: this.dateLocale
                }),
                new i1.CardViewTextItemModel({
                    label: 'ADF_CLOUD_PROCESS_HEADER.PROPERTIES.PARENT_ID',
                    value: this.processInstanceDetails.parentId,
                    key: 'parentId',
                    default: this.translationService.instant('ADF_CLOUD_PROCESS_HEADER.PROPERTIES.NONE')
                }),
                new i1.CardViewTextItemModel({
                    label: 'ADF_CLOUD_PROCESS_HEADER.PROPERTIES.BUSINESS_KEY',
                    value: this.processInstanceDetails.businessKey,
                    key: 'businessKey',
                    default: this.translationService.instant('ADF_CLOUD_PROCESS_HEADER.PROPERTIES.NONE')
                })
            ];
        };
        ProcessHeaderCloudComponent.prototype.isValidSelection = function (filteredProperties, cardItem) {
            return filteredProperties ? filteredProperties.indexOf(cardItem.key) >= 0 : true;
        };
        ProcessHeaderCloudComponent.prototype.ngOnDestroy = function () {
            this.onDestroy$.next(true);
            this.onDestroy$.complete();
        };
        return ProcessHeaderCloudComponent;
    }());
    ProcessHeaderCloudComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'adf-cloud-process-header',
                    template: "<mat-card *ngIf=\"processInstanceDetails\">\n  <mat-card-content>\n    <adf-card-view [properties]=\"properties\"></adf-card-view>\n  </mat-card-content>\n</mat-card>",
                    encapsulation: i0.ViewEncapsulation.None,
                    host: { class: 'adf-cloud-process-header' }
                },] }
    ];
    ProcessHeaderCloudComponent.ctorParameters = function () { return [
        { type: ProcessCloudService },
        { type: i1.TranslationService },
        { type: i1.AppConfigService }
    ]; };
    ProcessHeaderCloudComponent.propDecorators = {
        appName: [{ type: i0.Input }],
        processInstanceId: [{ type: i0.Input }]
    };

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var ProcessHeaderCloudModule = /** @class */ (function () {
        function ProcessHeaderCloudModule() {
        }
        return ProcessHeaderCloudModule;
    }());
    ProcessHeaderCloudModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [
                        common.CommonModule,
                        MaterialModule,
                        i1.CoreModule
                    ],
                    declarations: [ProcessHeaderCloudComponent],
                    exports: [ProcessHeaderCloudComponent]
                },] }
    ];

    var CancelProcessDirective = /** @class */ (function () {
        function CancelProcessDirective(elementRef, processCloudService, identityUserService) {
            this.elementRef = elementRef;
            this.processCloudService = processCloudService;
            this.identityUserService = identityUserService;
            this.success = new i0.EventEmitter();
            this.error = new i0.EventEmitter();
            this.canCancelProcess = false;
            this.onDestroy$ = new rxjs.Subject();
        }
        CancelProcessDirective.prototype.ngOnInit = function () {
            var _this = this;
            this.processCloudService.dataChangesDetected
                .pipe(operators.takeUntil(this.onDestroy$))
                .subscribe(function (processDetails) {
                _this.processInstanceDetails = processDetails;
                _this.canCancelProcess = _this.checkCanCancelProcess();
                _this.setElementVisibility();
            });
        };
        CancelProcessDirective.prototype.onClick = function () {
            this.cancelProcess();
        };
        CancelProcessDirective.prototype.setElementVisibility = function () {
            this.elementRef.nativeElement.disabled = !this.canCancelProcess;
        };
        CancelProcessDirective.prototype.checkCanCancelProcess = function () {
            var currentUser = this.identityUserService.getCurrentUserInfo().username;
            return this.processInstanceDetails.initiator === currentUser && this.processInstanceDetails.status === 'RUNNING';
        };
        CancelProcessDirective.prototype.cancelProcess = function () {
            var _this = this;
            if (this.canCancelProcess) {
                this.processCloudService.cancelProcess(this.processInstanceDetails.appName, this.processInstanceDetails.id)
                    .subscribe(function (response) { return _this.success.emit(response); }, function (error) { return _this.error.emit(error); });
            }
            else {
                this.error.emit('Permission denied, only process initiator can cancel the process');
            }
        };
        CancelProcessDirective.prototype.ngOnDestroy = function () {
            this.onDestroy$.next(true);
            this.onDestroy$.complete();
        };
        return CancelProcessDirective;
    }());
    CancelProcessDirective.decorators = [
        { type: i0.Directive, args: [{
                    selector: '[adf-cloud-cancel-process]'
                },] }
    ];
    CancelProcessDirective.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: ProcessCloudService },
        { type: i1.IdentityUserService }
    ]; };
    CancelProcessDirective.propDecorators = {
        success: [{ type: i0.Output }],
        error: [{ type: i0.Output }],
        onClick: [{ type: i0.HostListener, args: ['click',] }]
    };

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var ProcessDirectiveModule = /** @class */ (function () {
        function ProcessDirectiveModule() {
        }
        return ProcessDirectiveModule;
    }());
    ProcessDirectiveModule.decorators = [
        { type: i0.NgModule, args: [{
                    declarations: [
                        CancelProcessDirective
                    ],
                    exports: [
                        CancelProcessDirective
                    ]
                },] }
    ];

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var ProcessCloudModule = /** @class */ (function () {
        function ProcessCloudModule() {
        }
        return ProcessCloudModule;
    }());
    ProcessCloudModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [
                        i1.CoreModule,
                        ProcessFiltersCloudModule,
                        ProcessListCloudModule,
                        StartProcessCloudModule,
                        ProcessHeaderCloudModule,
                        ProcessDirectiveModule
                    ],
                    exports: [
                        ProcessFiltersCloudModule,
                        ProcessListCloudModule,
                        StartProcessCloudModule,
                        ProcessHeaderCloudModule,
                        ProcessDirectiveModule
                    ],
                    providers: [ProcessNameCloudPipe]
                },] }
    ];

    var UserPreferenceCloudService = /** @class */ (function (_super) {
        __extends(UserPreferenceCloudService, _super);
        function UserPreferenceCloudService(apiService, appConfigService, logService) {
            var _this = _super.call(this, apiService, appConfigService) || this;
            _this.logService = logService;
            return _this;
        }
        UserPreferenceCloudService.prototype.getPreferences = function (appName) {
            if (appName) {
                var url = this.getBasePath(appName) + "/preference/v1/preferences";
                return this.get(url);
            }
            else {
                this.logService.error('Appname is mandatory for querying preferences');
                return rxjs.throwError('Appname not configured');
            }
        };
        UserPreferenceCloudService.prototype.getPreferenceByKey = function (appName, key) {
            if (appName) {
                var url = this.getBasePath(appName) + "/preference/v1/preferences/" + key;
                return this.get(url);
            }
            else {
                this.logService.error('Appname and key are mandatory for querying preference');
                return rxjs.throwError('Appname not configured');
            }
        };
        UserPreferenceCloudService.prototype.createPreference = function (appName, key, newPreference) {
            if (appName) {
                var url = this.getBasePath(appName) + "/preference/v1/preferences/" + key;
                var payload = JSON.stringify(newPreference);
                return this.put(url, payload);
            }
            else {
                this.logService.error('Appname  and key are  mandatory for creating preference');
                return rxjs.throwError('Appname not configured');
            }
        };
        UserPreferenceCloudService.prototype.updatePreference = function (appName, key, updatedPreference) {
            return this.createPreference(appName, key, updatedPreference);
        };
        UserPreferenceCloudService.prototype.deletePreference = function (appName, key) {
            if (appName) {
                var url = this.getBasePath(appName) + "/preference/v1/preferences/" + key;
                return this.delete(url);
            }
            else {
                this.logService.error('Appname and key are mandatory to delete preference');
                return rxjs.throwError('Appname not configured');
            }
        };
        return UserPreferenceCloudService;
    }(BaseCloudService));
    UserPreferenceCloudService.ɵprov = i0.ɵɵdefineInjectable({ factory: function UserPreferenceCloudService_Factory() { return new UserPreferenceCloudService(i0.ɵɵinject(i1.AlfrescoApiService), i0.ɵɵinject(i1.AppConfigService), i0.ɵɵinject(i1.LogService)); }, token: UserPreferenceCloudService, providedIn: "root" });
    UserPreferenceCloudService.decorators = [
        { type: i0.Injectable, args: [{ providedIn: 'root' },] }
    ];
    UserPreferenceCloudService.ctorParameters = function () { return [
        { type: i1.AlfrescoApiService },
        { type: i1.AppConfigService },
        { type: i1.LogService }
    ]; };

    var LocalPreferenceCloudService = /** @class */ (function () {
        function LocalPreferenceCloudService(storage) {
            this.storage = storage;
        }
        LocalPreferenceCloudService.prototype.getPreferences = function (_, key) {
            if (key || key === '') {
                return rxjs.of(this.prepareLocalPreferenceResponse(key));
            }
            return rxjs.of({
                'list': {
                    'entries': []
                }
            });
        };
        LocalPreferenceCloudService.prototype.getPreferenceByKey = function (_, key) {
            return rxjs.of(JSON.parse(this.storage.getItem(key)) || []);
        };
        LocalPreferenceCloudService.prototype.createPreference = function (_, key, newPreference) {
            var storedFilters = JSON.parse(this.storage.getItem(key) || '[]');
            storedFilters.push.apply(storedFilters, __spread(newPreference));
            this.storage.setItem(key, JSON.stringify(storedFilters));
            return rxjs.of(storedFilters);
        };
        LocalPreferenceCloudService.prototype.updatePreference = function (_, key, updatedPreference) {
            if (key) {
                this.storage.setItem(key, JSON.stringify(updatedPreference));
            }
            return rxjs.of(updatedPreference);
        };
        LocalPreferenceCloudService.prototype.deletePreference = function (key, preferences) {
            if (key) {
                this.storage.setItem(key, JSON.stringify(preferences));
            }
            return rxjs.of(preferences);
        };
        LocalPreferenceCloudService.prototype.prepareLocalPreferenceResponse = function (key) {
            return {
                'list': {
                    'entries': [
                        {
                            'entry': {
                                'key': key,
                                'value': this.storage.getItem(key) || '[]'
                            }
                        }
                    ]
                }
            };
        };
        return LocalPreferenceCloudService;
    }());
    LocalPreferenceCloudService.ɵprov = i0.ɵɵdefineInjectable({ factory: function LocalPreferenceCloudService_Factory() { return new LocalPreferenceCloudService(i0.ɵɵinject(i1.StorageService)); }, token: LocalPreferenceCloudService, providedIn: "root" });
    LocalPreferenceCloudService.decorators = [
        { type: i0.Injectable, args: [{ providedIn: 'root' },] }
    ];
    LocalPreferenceCloudService.ctorParameters = function () { return [
        { type: i1.StorageService }
    ]; };

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    (function (PeopleModeOptions) {
        PeopleModeOptions["single"] = "single";
        PeopleModeOptions["multiple"] = "multiple";
    })(exports.PeopleModeOptions || (exports.PeopleModeOptions = {}));
    (function (FormFieldType) {
        FormFieldType["text"] = "text";
        FormFieldType["multiline"] = "multi-line-text";
        FormFieldType["number"] = "integer";
        FormFieldType["checkbox"] = "boolean";
        FormFieldType["date"] = "date";
        FormFieldType["datetime"] = "datetime";
        FormFieldType["dropdown"] = "dropdown";
        FormFieldType["typeahead"] = "typeahead";
        FormFieldType["amount"] = "amount";
        FormFieldType["radio"] = "radio-buttons";
        FormFieldType["people"] = "people";
        FormFieldType["groupOfPeople"] = "functional-group";
        FormFieldType["dynamicTable"] = "dynamicTable";
        FormFieldType["hyperlink"] = "hyperlink";
        FormFieldType["header"] = "group";
        FormFieldType["uploadFile"] = "upload";
        FormFieldType["uploadFolder"] = "uploadFolder";
        FormFieldType["displayValue"] = "readonly";
        FormFieldType["displayText"] = "readonly-text";
        FormFieldType["fileViewer"] = "file-viewer";
    })(exports.FormFieldType || (exports.FormFieldType = {}));

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    var CloudFormRenderingService = /** @class */ (function (_super) {
        __extends(CloudFormRenderingService, _super);
        function CloudFormRenderingService() {
            var _this = _super.call(this) || this;
            _this.register({
                'upload': function () { return AttachFileCloudWidgetComponent; },
                'dropdown': function () { return DropdownCloudWidgetComponent; },
                'date': function () { return DateCloudWidgetComponent; },
                'people': function () { return PeopleCloudWidgetComponent; },
                'functional-group': function () { return GroupCloudWidgetComponent; },
                'properties-viewer': function () { return PropertiesViewerWidgetComponent; },
                'radio-buttons': function () { return RadioButtonsCloudWidgetComponent; }
            }, true);
            return _this;
        }
        return CloudFormRenderingService;
    }(i1.FormRenderingService));
    CloudFormRenderingService.ɵprov = i0.ɵɵdefineInjectable({ factory: function CloudFormRenderingService_Factory() { return new CloudFormRenderingService(); }, token: CloudFormRenderingService, providedIn: "root" });
    CloudFormRenderingService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    CloudFormRenderingService.ctorParameters = function () { return []; };

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var ProcessServicesCloudPipeModule = /** @class */ (function () {
        function ProcessServicesCloudPipeModule() {
        }
        return ProcessServicesCloudPipeModule;
    }());
    ProcessServicesCloudPipeModule.decorators = [
        { type: i0.NgModule, args: [{
                    declarations: [
                        ProcessNameCloudPipe
                    ],
                    exports: [
                        ProcessNameCloudPipe
                    ]
                },] }
    ];

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var ɵ0$5 = {
        name: 'adf-process-services-cloud',
        source: 'assets/adf-process-services-cloud'
    };
    var ProcessServicesCloudModule = /** @class */ (function () {
        function ProcessServicesCloudModule() {
        }
        ProcessServicesCloudModule.forRoot = function (preferenceServiceInstance) {
            return {
                ngModule: ProcessServicesCloudModule,
                providers: [
                    {
                        provide: i1.TRANSLATION_PROVIDER,
                        multi: true,
                        useValue: {
                            name: 'adf-process-services-cloud',
                            source: 'assets/adf-process-services-cloud'
                        }
                    },
                    { provide: PROCESS_FILTERS_SERVICE_TOKEN, useExisting: preferenceServiceInstance !== null && preferenceServiceInstance !== void 0 ? preferenceServiceInstance : LocalPreferenceCloudService },
                    { provide: TASK_FILTERS_SERVICE_TOKEN, useExisting: preferenceServiceInstance !== null && preferenceServiceInstance !== void 0 ? preferenceServiceInstance : LocalPreferenceCloudService },
                    i1.FormRenderingService,
                    { provide: i1.FormRenderingService, useClass: CloudFormRenderingService }
                ]
            };
        };
        ProcessServicesCloudModule.forChild = function () {
            return {
                ngModule: ProcessServicesCloudModule
            };
        };
        return ProcessServicesCloudModule;
    }());
    ProcessServicesCloudModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [
                        i1.CoreModule,
                        AppListCloudModule,
                        ProcessCloudModule,
                        TaskCloudModule,
                        GroupCloudModule,
                        PeopleCloudModule,
                        FormCloudModule,
                        TaskFormModule,
                        ProcessServicesCloudPipeModule
                    ],
                    providers: [
                        {
                            provide: i1.TRANSLATION_PROVIDER,
                            multi: true,
                            useValue: ɵ0$5
                        }
                    ],
                    exports: [
                        AppListCloudModule,
                        ProcessCloudModule,
                        TaskCloudModule,
                        GroupCloudModule,
                        FormCloudModule,
                        TaskFormModule,
                        PeopleCloudModule,
                        ProcessServicesCloudPipeModule
                    ]
                },] }
    ];

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    var StartTaskCloudService = /** @class */ (function (_super) {
        __extends(StartTaskCloudService, _super);
        function StartTaskCloudService(apiService, appConfigService) {
            return _super.call(this, apiService, appConfigService) || this;
        }
        StartTaskCloudService.prototype.createNewTask = function (taskDetails) {
            var url = this.getBasePath(taskDetails.appName) + "/rb/v1/tasks";
            var payload = JSON.stringify(new StartTaskCloudRequestModel(taskDetails));
            return this.post(url, payload)
                .pipe(operators.map(function (response) { return response.entry; }));
        };
        return StartTaskCloudService;
    }(BaseCloudService));
    StartTaskCloudService.ɵprov = i0.ɵɵdefineInjectable({ factory: function StartTaskCloudService_Factory() { return new StartTaskCloudService(i0.ɵɵinject(i1.AlfrescoApiService), i0.ɵɵinject(i1.AppConfigService)); }, token: StartTaskCloudService, providedIn: "root" });
    StartTaskCloudService.decorators = [
        { type: i0.Injectable, args: [{ providedIn: 'root' },] }
    ];
    StartTaskCloudService.ctorParameters = function () { return [
        { type: i1.AlfrescoApiService },
        { type: i1.AppConfigService }
    ]; };

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var ApplicationVersionModel = /** @class */ (function () {
        function ApplicationVersionModel() {
        }
        return ApplicationVersionModel;
    }());
    var ApplicationVersionResponseModel = /** @class */ (function () {
        function ApplicationVersionResponseModel() {
        }
        return ApplicationVersionResponseModel;
    }());

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    exports.AppDetailsCloudComponent = AppDetailsCloudComponent;
    exports.AppListCloudComponent = AppListCloudComponent;
    exports.AppListCloudModule = AppListCloudModule;
    exports.ApplicationVersionModel = ApplicationVersionModel;
    exports.ApplicationVersionResponseModel = ApplicationVersionResponseModel;
    exports.AppsProcessCloudService = AppsProcessCloudService;
    exports.AttachFileCloudWidgetComponent = AttachFileCloudWidgetComponent;
    exports.CancelProcessDirective = CancelProcessDirective;
    exports.ClaimTaskCloudDirective = ClaimTaskCloudDirective;
    exports.CloudFormRenderingService = CloudFormRenderingService;
    exports.CompleteTaskDirective = CompleteTaskDirective;
    exports.ContentCloudNodeSelectorService = ContentCloudNodeSelectorService;
    exports.DEFAULT_APP_INSTANCE_ICON = DEFAULT_APP_INSTANCE_ICON;
    exports.DEFAULT_APP_INSTANCE_THEME = DEFAULT_APP_INSTANCE_THEME;
    exports.DEFAULT_TASK_PRIORITIES = DEFAULT_TASK_PRIORITIES;
    exports.DateCloudWidgetComponent = DateCloudWidgetComponent;
    exports.DropdownCloudWidgetComponent = DropdownCloudWidgetComponent;
    exports.EditProcessFilterCloudComponent = EditProcessFilterCloudComponent;
    exports.EditServiceTaskFilterCloudComponent = EditServiceTaskFilterCloudComponent;
    exports.EditTaskFilterCloudComponent = EditTaskFilterCloudComponent;
    exports.FormCloudComponent = FormCloudComponent;
    exports.FormCloudModule = FormCloudModule;
    exports.FormCloudService = FormCloudService;
    exports.FormCustomOutcomesComponent = FormCustomOutcomesComponent;
    exports.FormDefinitionSelectorCloudComponent = FormDefinitionSelectorCloudComponent;
    exports.FormDefinitionSelectorCloudService = FormDefinitionSelectorCloudService;
    exports.GroupCloudComponent = GroupCloudComponent;
    exports.GroupCloudModule = GroupCloudModule;
    exports.GroupCloudWidgetComponent = GroupCloudWidgetComponent;
    exports.InitialGroupNamePipe = InitialGroupNamePipe;
    exports.LocalPreferenceCloudService = LocalPreferenceCloudService;
    exports.NotificationCloudService = NotificationCloudService;
    exports.PROCESS_FILTERS_SERVICE_TOKEN = PROCESS_FILTERS_SERVICE_TOKEN;
    exports.PeopleCloudComponent = PeopleCloudComponent;
    exports.PeopleCloudModule = PeopleCloudModule;
    exports.PeopleCloudWidgetComponent = PeopleCloudWidgetComponent;
    exports.ProcessCloudContentService = ProcessCloudContentService;
    exports.ProcessCloudModule = ProcessCloudModule;
    exports.ProcessCloudService = ProcessCloudService;
    exports.ProcessDefinitionCloud = ProcessDefinitionCloud;
    exports.ProcessDirectiveModule = ProcessDirectiveModule;
    exports.ProcessFilterCloudModel = ProcessFilterCloudModel;
    exports.ProcessFilterCloudService = ProcessFilterCloudService;
    exports.ProcessFilterDialogCloudComponent = ProcessFilterDialogCloudComponent;
    exports.ProcessFiltersCloudComponent = ProcessFiltersCloudComponent;
    exports.ProcessFiltersCloudModule = ProcessFiltersCloudModule;
    exports.ProcessHeaderCloudComponent = ProcessHeaderCloudComponent;
    exports.ProcessHeaderCloudModule = ProcessHeaderCloudModule;
    exports.ProcessListCloudComponent = ProcessListCloudComponent;
    exports.ProcessListCloudModule = ProcessListCloudModule;
    exports.ProcessListCloudService = ProcessListCloudService;
    exports.ProcessListCloudSortingModel = ProcessListCloudSortingModel;
    exports.ProcessNameCloudPipe = ProcessNameCloudPipe;
    exports.ProcessPayloadCloud = ProcessPayloadCloud;
    exports.ProcessQueryCloudRequestModel = ProcessQueryCloudRequestModel;
    exports.ProcessServicesCloudModule = ProcessServicesCloudModule;
    exports.ProcessServicesCloudPipeModule = ProcessServicesCloudPipeModule;
    exports.PropertiesViewerWidgetComponent = PropertiesViewerWidgetComponent;
    exports.ServiceTaskFilterCloudService = ServiceTaskFilterCloudService;
    exports.ServiceTaskFiltersCloudComponent = ServiceTaskFiltersCloudComponent;
    exports.ServiceTaskListCloudComponent = ServiceTaskListCloudComponent;
    exports.ServiceTaskListCloudService = ServiceTaskListCloudService;
    exports.StartProcessCloudComponent = StartProcessCloudComponent;
    exports.StartProcessCloudModule = StartProcessCloudModule;
    exports.StartProcessCloudService = StartProcessCloudService;
    exports.StartTaskCloudComponent = StartTaskCloudComponent;
    exports.StartTaskCloudModule = StartTaskCloudModule;
    exports.StartTaskCloudService = StartTaskCloudService;
    exports.TASK_ASSIGNED_STATE = TASK_ASSIGNED_STATE;
    exports.TASK_CREATED_STATE = TASK_CREATED_STATE;
    exports.TASK_FILTERS_SERVICE_TOKEN = TASK_FILTERS_SERVICE_TOKEN;
    exports.TaskCloudModule = TaskCloudModule;
    exports.TaskCloudService = TaskCloudService;
    exports.TaskDirectiveModule = TaskDirectiveModule;
    exports.TaskFilterCloudModel = TaskFilterCloudModel;
    exports.TaskFilterCloudService = TaskFilterCloudService;
    exports.TaskFiltersCloudComponent = TaskFiltersCloudComponent;
    exports.TaskFiltersCloudModule = TaskFiltersCloudModule;
    exports.TaskFormCloudComponent = TaskFormCloudComponent;
    exports.TaskFormModule = TaskFormModule;
    exports.TaskHeaderCloudComponent = TaskHeaderCloudComponent;
    exports.TaskHeaderCloudModule = TaskHeaderCloudModule;
    exports.TaskListCloudComponent = TaskListCloudComponent;
    exports.TaskListCloudModule = TaskListCloudModule;
    exports.TaskListCloudService = TaskListCloudService;
    exports.TaskListCloudSortingModel = TaskListCloudSortingModel;
    exports.TaskQueryCloudRequestModel = TaskQueryCloudRequestModel;
    exports.TaskVariableCloud = TaskVariableCloud;
    exports.UnClaimTaskCloudDirective = UnClaimTaskCloudDirective;
    exports.UploadCloudWidgetComponent = UploadCloudWidgetComponent;
    exports.UserPreferenceCloudService = UserPreferenceCloudService;
    exports.processCloudPresetsDefaultModel = processCloudPresetsDefaultModel;
    exports.serviceTaskPresetsCloudDefaultModel = serviceTaskPresetsCloudDefaultModel;
    exports.taskPresetsCloudDefaultModel = taskPresetsCloudDefaultModel;
    exports.ɵ0 = ɵ0$5;
    exports.ɵa = MaterialModule;
    exports.ɵb = ProcessCommonModule;
    exports.ɵc = DateRangeFilterComponent;
    exports.ɵd = DateRangeFilterService;
    exports.ɵe = BaseCloudService;
    exports.ɵf = RadioButtonsCloudWidgetComponent;
    exports.ɵg = PropertiesViewerWrapperComponent;
    exports.ɵh = FilePropertiesTableCloudComponent;
    exports.ɵi = BaseTaskListCloudComponent;
    exports.ɵj = BaseTaskFiltersCloudComponent;
    exports.ɵk = BaseEditTaskFilterCloudComponent;
    exports.ɵl = TaskFilterDialogCloudComponent;
    exports.ɵm = TaskAssignmentFilterCloudComponent;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=adf-process-services-cloud.umd.js.map
