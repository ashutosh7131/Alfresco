/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { AlfrescoApiService, LogService } from '@alfresco/adf-core';
import { Observable } from 'rxjs';
import { FilterRepresentationModel, TaskQueryRequestRepresentationModel } from '../models/filter.model';
import { Form } from '../models/form.model';
import { TaskDetailsModel } from '../models/task-details.model';
import { TaskListModel } from '../models/task-list.model';
import { TaskUpdateRepresentation, ModelsApi, TaskActionsApi, TasksApi, ChecklistsApi } from '@alfresco/js-api';
import * as ɵngcc0 from '@angular/core';
export declare class TaskListService {
    private apiService;
    private logService;
    private _modelsApi;
    get modelsApi(): ModelsApi;
    private _tasksApi;
    get tasksApi(): TasksApi;
    private _taskActionsApi;
    get taskActionsApi(): TaskActionsApi;
    private _checklistsApi;
    get checklistsApi(): ChecklistsApi;
    constructor(apiService: AlfrescoApiService, logService: LogService);
    getFilterForTaskById(taskId: string, filterList: FilterRepresentationModel[]): Observable<FilterRepresentationModel>;
    private generateTaskRequestNodeFromFilter;
    isTaskRelatedToFilter(taskId: string, filterModel: FilterRepresentationModel): Observable<FilterRepresentationModel>;
    getTasks(requestNode: TaskQueryRequestRepresentationModel): Observable<TaskListModel>;
    findTasksByState(requestNode: TaskQueryRequestRepresentationModel, state?: string): Observable<TaskListModel>;
    findAllTaskByState(requestNode: TaskQueryRequestRepresentationModel, state?: string): Observable<TaskListModel>;
    findAllTasksWithoutState(requestNode: TaskQueryRequestRepresentationModel): Observable<TaskListModel>;
    getTaskDetails(taskId: string): Observable<TaskDetailsModel>;
    getTaskChecklist(id: string): Observable<TaskDetailsModel[]>;
    getFormList(): Observable<Form[]>;
    attachFormToATask(taskId: string, formId: number): Observable<any>;
    addTask(task: TaskDetailsModel): Observable<TaskDetailsModel>;
    deleteTask(taskId: string): Observable<TaskDetailsModel>;
    deleteForm(taskId: string): Observable<TaskDetailsModel>;
    completeTask(taskId: string): Observable<any>;
    getTotalTasks(requestNode: TaskQueryRequestRepresentationModel): Observable<any>;
    createNewTask(task: TaskDetailsModel): Observable<TaskDetailsModel>;
    assignTask(taskId: string, requestNode: any): Observable<TaskDetailsModel>;
    assignTaskByUserId(taskId: string, userId: string): Observable<TaskDetailsModel>;
    claimTask(taskId: string): Observable<TaskDetailsModel>;
    unclaimTask(taskId: string): Observable<TaskDetailsModel>;
    updateTask(taskId: string, updated: TaskUpdateRepresentation): Observable<TaskDetailsModel>;
    fetchTaskAuditPdfById(taskId: string): Observable<Blob>;
    fetchTaskAuditJsonById(taskId: string): Observable<any>;
    private callApiTasksFiltered;
    private callApiTaskDetails;
    private callApiAddTask;
    private callApiDeleteTask;
    private callApiDeleteForm;
    private callApiTaskChecklist;
    private callApiCreateTask;
    private callApiAssignTask;
    private handleError;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<TaskListService, never>;
}

//# sourceMappingURL=tasklist.service.d.ts.map