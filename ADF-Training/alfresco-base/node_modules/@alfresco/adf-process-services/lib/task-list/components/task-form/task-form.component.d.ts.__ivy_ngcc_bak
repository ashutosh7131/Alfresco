/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { OnInit, EventEmitter, SimpleChanges } from '@angular/core';
import { FormModel, ContentLinkModel, FormFieldValidator, FormOutcomeEvent, AuthenticationService, TranslationService, FormFieldModel } from '@alfresco/adf-core';
import { TaskDetailsModel } from '../../models/task-details.model';
import { TaskListService } from '../../services/tasklist.service';
import { UserRepresentation } from '@alfresco/js-api';
import { Observable } from 'rxjs';
export declare class TaskFormComponent implements OnInit {
    private taskListService;
    private authService;
    private translationService;
    taskId: string;
    showFormTitle: boolean;
    showFormCompleteButton: boolean;
    showFormSaveButton: boolean;
    showCancelButton: boolean;
    readOnlyForm: boolean;
    showFormRefreshButton: boolean;
    showFormValidationIcon: boolean;
    fieldValidators: FormFieldValidator[];
    formSaved: EventEmitter<FormModel>;
    formCompleted: EventEmitter<FormModel>;
    formContentClicked: EventEmitter<ContentLinkModel>;
    formLoaded: EventEmitter<FormModel>;
    showAttachForm: EventEmitter<void>;
    executeOutcome: EventEmitter<FormOutcomeEvent>;
    completed: EventEmitter<void>;
    formError: EventEmitter<FormFieldModel[]>;
    error: EventEmitter<any>;
    cancel: EventEmitter<void>;
    taskClaimed: EventEmitter<string>;
    taskUnclaimed: EventEmitter<string>;
    taskDetails: TaskDetailsModel;
    currentLoggedUser: UserRepresentation;
    loading: boolean;
    completedTaskMessage: string;
    internalReadOnlyForm: boolean;
    constructor(taskListService: TaskListService, authService: AuthenticationService, translationService: TranslationService);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    loadTask(taskId: string): void;
    onFormSaved(savedForm: FormModel): void;
    onFormCompleted(form: FormModel): void;
    onFormLoaded(form: FormModel): void;
    onFormContentClick(content: ContentLinkModel): void;
    onFormExecuteOutcome(outcome: FormOutcomeEvent): void;
    onFormError(error: any): void;
    onError(error: any): void;
    onCompleteTask(): void;
    onCancel(): void;
    onShowAttachForm(): void;
    hasFormKey(): boolean;
    isStandaloneTask(): boolean;
    isTaskLoaded(): boolean;
    isCompletedTask(): boolean;
    isCompleteButtonVisible(): boolean;
    isTaskActive(): boolean;
    isAssigned(): boolean;
    private hasEmailAddress;
    isAssignedToMe(): boolean;
    private isEmailEqual;
    private isExternalIdEqual;
    isCompleteButtonEnabled(): boolean;
    canInitiatorComplete(): boolean;
    isReadOnlyForm(): boolean;
    isCurrentUserInvolved(): boolean;
    canCurrentUserAsInitiatorComplete(): boolean;
    isProcessInitiator(): boolean;
    isSaveButtonVisible(): boolean;
    canCompleteNoFormTask(): boolean;
    getCompletedTaskTranslatedMessage(): Observable<string>;
    isCandidateMember(): boolean;
    isTaskClaimable(): boolean;
    isTaskClaimedByCandidateMember(): boolean;
    reloadTask(): void;
    onClaimTask(taskId: string): void;
    onClaimTaskError(error: any): void;
    onUnclaimTask(taskId: string): void;
    onUnclaimTaskError(error: any): void;
}
