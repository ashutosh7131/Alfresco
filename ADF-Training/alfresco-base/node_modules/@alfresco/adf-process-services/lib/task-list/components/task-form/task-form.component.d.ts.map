{"version":3,"file":"task-form.component.d.ts","sources":["task-form.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { OnInit, EventEmitter, SimpleChanges } from '@angular/core';\nimport { FormModel, ContentLinkModel, FormFieldValidator, FormOutcomeEvent, AuthenticationService, TranslationService, FormFieldModel } from '@alfresco/adf-core';\nimport { TaskDetailsModel } from '../../models/task-details.model';\nimport { TaskListService } from '../../services/tasklist.service';\nimport { UserRepresentation } from '@alfresco/js-api';\nimport { Observable } from 'rxjs';\nexport declare class TaskFormComponent implements OnInit {\n    private taskListService;\n    private authService;\n    private translationService;\n    taskId: string;\n    showFormTitle: boolean;\n    showFormCompleteButton: boolean;\n    showFormSaveButton: boolean;\n    showCancelButton: boolean;\n    readOnlyForm: boolean;\n    showFormRefreshButton: boolean;\n    showFormValidationIcon: boolean;\n    fieldValidators: FormFieldValidator[];\n    formSaved: EventEmitter<FormModel>;\n    formCompleted: EventEmitter<FormModel>;\n    formContentClicked: EventEmitter<ContentLinkModel>;\n    formLoaded: EventEmitter<FormModel>;\n    showAttachForm: EventEmitter<void>;\n    executeOutcome: EventEmitter<FormOutcomeEvent>;\n    completed: EventEmitter<void>;\n    formError: EventEmitter<FormFieldModel[]>;\n    error: EventEmitter<any>;\n    cancel: EventEmitter<void>;\n    taskClaimed: EventEmitter<string>;\n    taskUnclaimed: EventEmitter<string>;\n    taskDetails: TaskDetailsModel;\n    currentLoggedUser: UserRepresentation;\n    loading: boolean;\n    completedTaskMessage: string;\n    internalReadOnlyForm: boolean;\n    constructor(taskListService: TaskListService, authService: AuthenticationService, translationService: TranslationService);\n    ngOnInit(): void;\n    ngOnChanges(changes: SimpleChanges): void;\n    loadTask(taskId: string): void;\n    onFormSaved(savedForm: FormModel): void;\n    onFormCompleted(form: FormModel): void;\n    onFormLoaded(form: FormModel): void;\n    onFormContentClick(content: ContentLinkModel): void;\n    onFormExecuteOutcome(outcome: FormOutcomeEvent): void;\n    onFormError(error: any): void;\n    onError(error: any): void;\n    onCompleteTask(): void;\n    onCancel(): void;\n    onShowAttachForm(): void;\n    hasFormKey(): boolean;\n    isStandaloneTask(): boolean;\n    isTaskLoaded(): boolean;\n    isCompletedTask(): boolean;\n    isCompleteButtonVisible(): boolean;\n    isTaskActive(): boolean;\n    isAssigned(): boolean;\n    private hasEmailAddress;\n    isAssignedToMe(): boolean;\n    private isEmailEqual;\n    private isExternalIdEqual;\n    isCompleteButtonEnabled(): boolean;\n    canInitiatorComplete(): boolean;\n    isReadOnlyForm(): boolean;\n    isCurrentUserInvolved(): boolean;\n    canCurrentUserAsInitiatorComplete(): boolean;\n    isProcessInitiator(): boolean;\n    isSaveButtonVisible(): boolean;\n    canCompleteNoFormTask(): boolean;\n    getCompletedTaskTranslatedMessage(): Observable<string>;\n    isCandidateMember(): boolean;\n    isTaskClaimable(): boolean;\n    isTaskClaimedByCandidateMember(): boolean;\n    reloadTask(): void;\n    onClaimTask(taskId: string): void;\n    onClaimTaskError(error: any): void;\n    onUnclaimTask(taskId: string): void;\n    onUnclaimTaskError(error: any): void;\n}\n"]}