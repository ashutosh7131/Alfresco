{"version":3,"file":"task-details.component.d.ts","sources":["task-details.component.d.ts"],"names":[],"mappingssourcesContent":["/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { PeopleProcessService, UserProcessModel, CardViewUpdateService, LogService, CommentsComponent, ContentLinkModel, FormFieldValidator, FormModel, FormOutcomeEvent } from '@alfresco/adf-core';\nimport { EventEmitter, OnChanges, OnInit, SimpleChanges, TemplateRef, OnDestroy } from '@angular/core';\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\nimport { Observable } from 'rxjs';\nimport { TaskDetailsModel } from '../models/task-details.model';\nimport { TaskListService } from './../services/tasklist.service';\nimport { TaskFormComponent } from './task-form/task-form.component';\nexport declare class TaskDetailsComponent implements OnInit, OnChanges, OnDestroy {\n    private taskListService;\n    private peopleProcessService;\n    private logService;\n    private cardViewUpdateService;\n    private dialog;\n    activitiComments: CommentsComponent;\n    activitiChecklist: any;\n    errorDialog: TemplateRef<any>;\n    taskFormComponent: TaskFormComponent;\n    debugMode: boolean;\n    taskId: string;\n    showNextTask: boolean;\n    showHeader: boolean;\n    showHeaderContent: boolean;\n    showInvolvePeople: boolean;\n    showComments: boolean;\n    showChecklist: boolean;\n    showFormTitle: boolean;\n    showFormCompleteButton: boolean;\n    showFormSaveButton: boolean;\n    readOnlyForm: boolean;\n    showFormRefreshButton: boolean;\n    fieldValidators: FormFieldValidator[];\n    formSaved: EventEmitter<FormModel>;\n    formCompleted: EventEmitter<FormModel>;\n    formContentClicked: EventEmitter<ContentLinkModel>;\n    formLoaded: EventEmitter<FormModel>;\n    taskCreated: EventEmitter<TaskDetailsModel>;\n    taskDeleted: EventEmitter<string>;\n    error: EventEmitter<any>;\n    executeOutcome: EventEmitter<FormOutcomeEvent>;\n    assignTask: EventEmitter<void>;\n    claimedTask: EventEmitter<string>;\n    unClaimedTask: EventEmitter<string>;\n    taskDetails: TaskDetailsModel;\n    taskFormName: string;\n    taskPeople: UserProcessModel[];\n    noTaskDetailsTemplateComponent: TemplateRef<any>;\n    showAssignee: boolean;\n    showAttachForm: boolean;\n    internalReadOnlyForm: boolean;\n    private peopleSearchObserver;\n    errorDialogRef: MatDialogRef<TemplateRef<any>>;\n    private onDestroy$;\n    peopleSearch: Observable<UserProcessModel[]>;\n    data: any;\n    constructor(taskListService: TaskListService, peopleProcessService: PeopleProcessService, logService: LogService, cardViewUpdateService: CardViewUpdateService, dialog: MatDialog);\n    ngOnInit(): void;\n    ngOnDestroy(): void;\n    ngOnChanges(changes: SimpleChanges): void;\n    isShowAttachForm(): boolean;\n    private reset;\n    isTaskActive(): boolean;\n    private updateTaskDetails;\n    private clickTaskDetails;\n    private loadDetails;\n    isAssigned(): boolean;\n    private loadNextTask;\n    onComplete(): void;\n    onShowAttachForm(): void;\n    onCancelAttachForm(): void;\n    onCompleteAttachForm(): void;\n    onFormContentClick(content: ContentLinkModel): void;\n    onFormSaved(form: FormModel): void;\n    onFormCompleted(form: FormModel): void;\n    onFormLoaded(form: FormModel): void;\n    onChecklistTaskCreated(task: TaskDetailsModel): void;\n    onChecklistTaskDeleted(taskId: string): void;\n    onFormError(error: any): void;\n    onFormExecuteOutcome(event: FormOutcomeEvent): void;\n    closeErrorDialog(): void;\n    onClaimAction(taskId: string): void;\n    onUnclaimAction(taskId: string): void;\n    searchUser(searchedWord: string): void;\n    onCloseSearch(): void;\n    assignTaskToUser(selectedUser: UserProcessModel): void;\n    getTaskHeaderViewClass(): string;\n    isReadOnlyComment(): boolean;\n}\n"]}