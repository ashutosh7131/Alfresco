{"version":3,"file":"start-task.component.d.ts","sources":["start-task.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { LogService, UserPreferencesService, UserProcessModel, FormFieldModel } from '@alfresco/adf-core';\nimport { EventEmitter, OnInit, OnDestroy } from '@angular/core';\nimport { DateAdapter } from '@angular/material/core';\nimport { Moment } from 'moment';\nimport { Observable } from 'rxjs';\nimport { Form } from '../models/form.model';\nimport { TaskDetailsModel } from '../models/task-details.model';\nimport { TaskListService } from './../services/tasklist.service';\nimport { FormBuilder, AbstractControl, FormGroup, FormControl } from '@angular/forms';\nexport declare class StartTaskComponent implements OnInit, OnDestroy {\n    private taskService;\n    private dateAdapter;\n    private userPreferencesService;\n    private formBuilder;\n    private logService;\n    FORMAT_DATE: string;\n    MAX_LENGTH: number;\n    appId: number;\n    name: string;\n    success: EventEmitter<any>;\n    cancel: EventEmitter<void>;\n    error: EventEmitter<any>;\n    taskDetailsModel: TaskDetailsModel;\n    forms$: Observable<Form[]>;\n    assigneeId: number;\n    field: FormFieldModel;\n    taskForm: FormGroup;\n    dateError: boolean;\n    maxTaskNameLength: number;\n    loading: boolean;\n    private onDestroy$;\n    constructor(taskService: TaskListService, dateAdapter: DateAdapter<Moment>, userPreferencesService: UserPreferencesService, formBuilder: FormBuilder, logService: LogService);\n    ngOnInit(): void;\n    ngOnDestroy(): void;\n    buildForm(): void;\n    whitespaceValidator(control: FormControl): any;\n    setTaskDetails(form: any): void;\n    isFormValid(): boolean;\n    saveTask(): void;\n    getAssigneeId(userId: number): void;\n    private attachForm;\n    private assignTaskByUserId;\n    onCancel(): void;\n    private loadFormsTask;\n    isUserNameEmpty(user: UserProcessModel): boolean;\n    private isEmpty;\n    getDisplayUser(firstName: string, lastName: string, delimiter?: string): string;\n    onDateChanged(newDateValue: any): void;\n    private validateMaxTaskNameLength;\n    get nameController(): AbstractControl;\n    get descriptionController(): AbstractControl;\n    get formKeyController(): AbstractControl;\n}\n"]}