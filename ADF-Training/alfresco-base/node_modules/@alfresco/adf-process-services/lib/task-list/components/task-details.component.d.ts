/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { PeopleProcessService, UserProcessModel, CardViewUpdateService, LogService, CommentsComponent, ContentLinkModel, FormFieldValidator, FormModel, FormOutcomeEvent } from '@alfresco/adf-core';
import { EventEmitter, OnChanges, OnInit, SimpleChanges, TemplateRef, OnDestroy } from '@angular/core';
import { MatDialog, MatDialogRef } from '@angular/material/dialog';
import { Observable } from 'rxjs';
import { TaskDetailsModel } from '../models/task-details.model';
import { TaskListService } from './../services/tasklist.service';
import { TaskFormComponent } from './task-form/task-form.component';
import * as ɵngcc0 from '@angular/core';
export declare class TaskDetailsComponent implements OnInit, OnChanges, OnDestroy {
    private taskListService;
    private peopleProcessService;
    private logService;
    private cardViewUpdateService;
    private dialog;
    activitiComments: CommentsComponent;
    activitiChecklist: any;
    errorDialog: TemplateRef<any>;
    taskFormComponent: TaskFormComponent;
    debugMode: boolean;
    taskId: string;
    showNextTask: boolean;
    showHeader: boolean;
    showHeaderContent: boolean;
    showInvolvePeople: boolean;
    showComments: boolean;
    showChecklist: boolean;
    showFormTitle: boolean;
    showFormCompleteButton: boolean;
    showFormSaveButton: boolean;
    readOnlyForm: boolean;
    showFormRefreshButton: boolean;
    fieldValidators: FormFieldValidator[];
    formSaved: EventEmitter<FormModel>;
    formCompleted: EventEmitter<FormModel>;
    formContentClicked: EventEmitter<ContentLinkModel>;
    formLoaded: EventEmitter<FormModel>;
    taskCreated: EventEmitter<TaskDetailsModel>;
    taskDeleted: EventEmitter<string>;
    error: EventEmitter<any>;
    executeOutcome: EventEmitter<FormOutcomeEvent>;
    assignTask: EventEmitter<void>;
    claimedTask: EventEmitter<string>;
    unClaimedTask: EventEmitter<string>;
    taskDetails: TaskDetailsModel;
    taskFormName: string;
    taskPeople: UserProcessModel[];
    noTaskDetailsTemplateComponent: TemplateRef<any>;
    showAssignee: boolean;
    showAttachForm: boolean;
    internalReadOnlyForm: boolean;
    private peopleSearchObserver;
    errorDialogRef: MatDialogRef<TemplateRef<any>>;
    private onDestroy$;
    peopleSearch: Observable<UserProcessModel[]>;
    data: any;
    constructor(taskListService: TaskListService, peopleProcessService: PeopleProcessService, logService: LogService, cardViewUpdateService: CardViewUpdateService, dialog: MatDialog);
    ngOnInit(): void;
    ngOnDestroy(): void;
    ngOnChanges(changes: SimpleChanges): void;
    isShowAttachForm(): boolean;
    private reset;
    isTaskActive(): boolean;
    private updateTaskDetails;
    private clickTaskDetails;
    private loadDetails;
    isAssigned(): boolean;
    private loadNextTask;
    onComplete(): void;
    onShowAttachForm(): void;
    onCancelAttachForm(): void;
    onCompleteAttachForm(): void;
    onFormContentClick(content: ContentLinkModel): void;
    onFormSaved(form: FormModel): void;
    onFormCompleted(form: FormModel): void;
    onFormLoaded(form: FormModel): void;
    onChecklistTaskCreated(task: TaskDetailsModel): void;
    onChecklistTaskDeleted(taskId: string): void;
    onFormError(error: any): void;
    onFormExecuteOutcome(event: FormOutcomeEvent): void;
    closeErrorDialog(): void;
    onClaimAction(taskId: string): void;
    onUnclaimAction(taskId: string): void;
    searchUser(searchedWord: string): void;
    onCloseSearch(): void;
    assignTaskToUser(selectedUser: UserProcessModel): void;
    getTaskHeaderViewClass(): string;
    isReadOnlyComment(): boolean;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<TaskDetailsComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<TaskDetailsComponent, "adf-task-details", never, { "debugMode": "debugMode"; "showNextTask": "showNextTask"; "showHeader": "showHeader"; "showHeaderContent": "showHeaderContent"; "showInvolvePeople": "showInvolvePeople"; "showComments": "showComments"; "showChecklist": "showChecklist"; "showFormTitle": "showFormTitle"; "showFormCompleteButton": "showFormCompleteButton"; "showFormSaveButton": "showFormSaveButton"; "readOnlyForm": "readOnlyForm"; "showFormRefreshButton": "showFormRefreshButton"; "fieldValidators": "fieldValidators"; "taskId": "taskId"; }, { "formSaved": "formSaved"; "formCompleted": "formCompleted"; "formContentClicked": "formContentClicked"; "formLoaded": "formLoaded"; "taskCreated": "taskCreated"; "taskDeleted": "taskDeleted"; "error": "error"; "executeOutcome": "executeOutcome"; "assignTask": "assignTask"; "claimedTask": "claimedTask"; "unClaimedTask": "unClaimedTask"; }, never, never>;
}

//# sourceMappingURL=task-details.component.d.ts.map