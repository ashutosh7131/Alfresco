/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { LogService, UserPreferencesService, UserProcessModel, FormFieldModel } from '@alfresco/adf-core';
import { EventEmitter, OnInit, OnDestroy } from '@angular/core';
import { DateAdapter } from '@angular/material/core';
import { Moment } from 'moment';
import { Observable } from 'rxjs';
import { Form } from '../models/form.model';
import { TaskDetailsModel } from '../models/task-details.model';
import { TaskListService } from './../services/tasklist.service';
import { FormBuilder, AbstractControl, FormGroup, FormControl } from '@angular/forms';
import * as ɵngcc0 from '@angular/core';
export declare class StartTaskComponent implements OnInit, OnDestroy {
    private taskService;
    private dateAdapter;
    private userPreferencesService;
    private formBuilder;
    private logService;
    FORMAT_DATE: string;
    MAX_LENGTH: number;
    appId: number;
    name: string;
    success: EventEmitter<any>;
    cancel: EventEmitter<void>;
    error: EventEmitter<any>;
    taskDetailsModel: TaskDetailsModel;
    forms$: Observable<Form[]>;
    assigneeId: number;
    field: FormFieldModel;
    taskForm: FormGroup;
    dateError: boolean;
    maxTaskNameLength: number;
    loading: boolean;
    private onDestroy$;
    constructor(taskService: TaskListService, dateAdapter: DateAdapter<Moment>, userPreferencesService: UserPreferencesService, formBuilder: FormBuilder, logService: LogService);
    ngOnInit(): void;
    ngOnDestroy(): void;
    buildForm(): void;
    whitespaceValidator(control: FormControl): any;
    setTaskDetails(form: any): void;
    isFormValid(): boolean;
    saveTask(): void;
    getAssigneeId(userId: number): void;
    private attachForm;
    private assignTaskByUserId;
    onCancel(): void;
    private loadFormsTask;
    isUserNameEmpty(user: UserProcessModel): boolean;
    private isEmpty;
    getDisplayUser(firstName: string, lastName: string, delimiter?: string): string;
    onDateChanged(newDateValue: any): void;
    private validateMaxTaskNameLength;
    get nameController(): AbstractControl;
    get descriptionController(): AbstractControl;
    get formKeyController(): AbstractControl;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<StartTaskComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<StartTaskComponent, "adf-start-task", never, { "name": "name"; "appId": "appId"; }, { "success": "success"; "cancel": "cancel"; "error": "error"; }, never, never>;
}

//# sourceMappingURL=start-task.component.d.ts.map