/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { DataRowEvent, DataTableAdapter, DataTableSchema, CustomEmptyContentTemplateDirective, CustomLoadingContentTemplateDirective, AppConfigService, PaginatedComponent, UserPreferencesService, PaginationModel, DataCellEvent } from '@alfresco/adf-core';
import { AfterContentInit, EventEmitter, OnChanges, SimpleChanges, OnDestroy, OnInit } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { TaskQueryRequestRepresentationModel } from '../models/filter.model';
import { TaskListService } from './../services/tasklist.service';
export declare class TaskListComponent extends DataTableSchema implements OnChanges, AfterContentInit, PaginatedComponent, OnDestroy, OnInit {
    private taskListService;
    private userPreferences;
    static PRESET_KEY: string;
    customEmptyContent: CustomEmptyContentTemplateDirective;
    customLoadingContent: CustomLoadingContentTemplateDirective;
    requestNode: TaskQueryRequestRepresentationModel;
    appId: number;
    processInstanceId: string;
    processDefinitionId: string;
    state: string;
    assignment: string;
    sort: string;
    name: string;
    landingTaskId: string;
    data: DataTableAdapter;
    selectionMode: string;
    multiselect: boolean;
    selectFirstRow: boolean;
    taskId: string;
    includeProcessInstance: boolean;
    start: number;
    showContextMenu: boolean;
    stickyHeader: boolean;
    showRowContextMenu: EventEmitter<DataCellEvent>;
    rowClick: EventEmitter<string>;
    rowsSelected: EventEmitter<any[]>;
    success: EventEmitter<any>;
    error: EventEmitter<any>;
    currentInstanceId: string;
    selectedInstances: any[];
    pagination: BehaviorSubject<PaginationModel>;
    page: number;
    size: number;
    dueAfter: string;
    dueBefore: string;
    rows: any[];
    isLoading: boolean;
    sorting: any[];
    hasCustomDataSource: boolean;
    private onDestroy$;
    constructor(taskListService: TaskListService, appConfigService: AppConfigService, userPreferences: UserPreferencesService);
    ngAfterContentInit(): void;
    ngOnInit(): void;
    ngOnDestroy(): void;
    setCustomDataSource(rows: any[]): void;
    ngOnChanges(changes: SimpleChanges): void;
    private isSortChanged;
    private isPropertyChanged;
    reload(): void;
    private load;
    private loadTasksByState;
    selectTask(taskIdSelected: string): void;
    getCurrentId(): string;
    isEqualToCurrentId(taskId: string): boolean;
    isListEmpty(): boolean;
    onRowClick(item: DataRowEvent): void;
    onRowSelect(event: CustomEvent): void;
    onRowUnselect(event: CustomEvent): void;
    onRowKeyUp(event: CustomEvent): void;
    onShowRowContextMenu(event: DataCellEvent): void;
    private optimizeTaskDetails;
    private createRequestNode;
    updatePagination(params: PaginationModel): void;
    currentPage(skipCount: number, maxItems: number): number;
}
