/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { EventEmitter, SimpleChanges, OnInit, OnDestroy, OnChanges } from '@angular/core';
import { EcmModelService, NodeService, WidgetVisibilityService, FormService, FormBaseComponent, FormOutcomeModel, FormFieldModel, FormModel, FormValues, ContentLinkModel } from '@alfresco/adf-core';
import { Observable, Subject } from 'rxjs';
import * as ɵngcc0 from '@angular/core';
export declare class FormComponent extends FormBaseComponent implements OnInit, OnDestroy, OnChanges {
    protected formService: FormService;
    protected visibilityService: WidgetVisibilityService;
    protected ecmModelService: EcmModelService;
    protected nodeService: NodeService;
    form: FormModel;
    taskId: string;
    nodeId: string;
    formId: number;
    formName: string;
    saveMetadata: boolean;
    data: FormValues;
    enableFixedSpacedForm: boolean;
    formSaved: EventEmitter<FormModel>;
    formCompleted: EventEmitter<FormModel>;
    formContentClicked: EventEmitter<ContentLinkModel>;
    formLoaded: EventEmitter<FormModel>;
    formDataRefreshed: EventEmitter<FormModel>;
    debugMode: boolean;
    protected onDestroy$: Subject<boolean>;
    constructor(formService: FormService, visibilityService: WidgetVisibilityService, ecmModelService: EcmModelService, nodeService: NodeService);
    ngOnInit(): void;
    ngOnDestroy(): void;
    ngOnChanges(changes: SimpleChanges): void;
    onRefreshClicked(): void;
    loadForm(): void;
    findProcessVariablesByTaskId(taskId: string): Observable<any>;
    isAProcessTask(taskRepresentation: any): boolean;
    getFormByTaskId(taskId: string): Promise<FormModel>;
    getFormDefinitionByFormId(formId: number): void;
    getFormDefinitionByFormName(formName: string): void;
    saveTaskForm(): void;
    completeTaskForm(outcome?: string): void;
    handleError(err: any): any;
    parseForm(formRepresentationJSON: any): FormModel;
    getFormDefinitionOutcomes(form: FormModel): FormOutcomeModel[];
    checkVisibility(field: FormFieldModel): void;
    private refreshFormData;
    private loadFormForEcmNode;
    loadFormFromActiviti(nodeType: string): any;
    private loadFormFromFormId;
    protected storeFormAsMetadata(): void;
    protected onFormLoaded(form: FormModel): void;
    protected onFormDataRefreshed(form: FormModel): void;
    protected onTaskSaved(form: FormModel): void;
    protected onTaskSavedError(form: FormModel, error: any): void;
    protected onTaskCompleted(form: FormModel): void;
    protected onTaskCompletedError(form: FormModel, error: any): void;
    protected onExecuteOutcome(outcome: FormOutcomeModel): boolean;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<FormComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<FormComponent, "adf-form", never, { "saveMetadata": "saveMetadata"; "enableFixedSpacedForm": "enableFixedSpacedForm"; "form": "form"; "formName": "formName"; "data": "data"; "formId": "formId"; "taskId": "taskId"; "nodeId": "nodeId"; }, { "formSaved": "formSaved"; "formCompleted": "formCompleted"; "formContentClicked": "formContentClicked"; "formLoaded": "formLoaded"; "formDataRefreshed": "formDataRefreshed"; }, never, ["[empty-form]", "adf-form-custom-outcomes"]>;
}

//# sourceMappingURL=form.component.d.ts.map