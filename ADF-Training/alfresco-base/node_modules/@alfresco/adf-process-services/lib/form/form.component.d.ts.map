{"version":3,"file":"form.component.d.ts","sources":["form.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { EventEmitter, SimpleChanges, OnInit, OnDestroy, OnChanges } from '@angular/core';\nimport { EcmModelService, NodeService, WidgetVisibilityService, FormService, FormBaseComponent, FormOutcomeModel, FormFieldModel, FormModel, FormValues, ContentLinkModel } from '@alfresco/adf-core';\nimport { Observable, Subject } from 'rxjs';\nexport declare class FormComponent extends FormBaseComponent implements OnInit, OnDestroy, OnChanges {\n    protected formService: FormService;\n    protected visibilityService: WidgetVisibilityService;\n    protected ecmModelService: EcmModelService;\n    protected nodeService: NodeService;\n    form: FormModel;\n    taskId: string;\n    nodeId: string;\n    formId: number;\n    formName: string;\n    saveMetadata: boolean;\n    data: FormValues;\n    enableFixedSpacedForm: boolean;\n    formSaved: EventEmitter<FormModel>;\n    formCompleted: EventEmitter<FormModel>;\n    formContentClicked: EventEmitter<ContentLinkModel>;\n    formLoaded: EventEmitter<FormModel>;\n    formDataRefreshed: EventEmitter<FormModel>;\n    debugMode: boolean;\n    protected onDestroy$: Subject<boolean>;\n    constructor(formService: FormService, visibilityService: WidgetVisibilityService, ecmModelService: EcmModelService, nodeService: NodeService);\n    ngOnInit(): void;\n    ngOnDestroy(): void;\n    ngOnChanges(changes: SimpleChanges): void;\n    onRefreshClicked(): void;\n    loadForm(): void;\n    findProcessVariablesByTaskId(taskId: string): Observable<any>;\n    isAProcessTask(taskRepresentation: any): boolean;\n    getFormByTaskId(taskId: string): Promise<FormModel>;\n    getFormDefinitionByFormId(formId: number): void;\n    getFormDefinitionByFormName(formName: string): void;\n    saveTaskForm(): void;\n    completeTaskForm(outcome?: string): void;\n    handleError(err: any): any;\n    parseForm(formRepresentationJSON: any): FormModel;\n    getFormDefinitionOutcomes(form: FormModel): FormOutcomeModel[];\n    checkVisibility(field: FormFieldModel): void;\n    private refreshFormData;\n    private loadFormForEcmNode;\n    loadFormFromActiviti(nodeType: string): any;\n    private loadFormFromFormId;\n    protected storeFormAsMetadata(): void;\n    protected onFormLoaded(form: FormModel): void;\n    protected onFormDataRefreshed(form: FormModel): void;\n    protected onTaskSaved(form: FormModel): void;\n    protected onTaskSavedError(form: FormModel, error: any): void;\n    protected onTaskCompleted(form: FormModel): void;\n    protected onTaskCompletedError(form: FormModel, error: any): void;\n    protected onExecuteOutcome(outcome: FormOutcomeModel): boolean;\n}\n"]}