{"version":3,"file":"start-process.component.d.ts","sources":["start-process.component.d.ts"],"names":[],"mappingssourcesContent":["/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { EventEmitter, OnChanges, OnInit, SimpleChanges, OnDestroy } from '@angular/core';\nimport { ActivitiContentService, AppConfigService, AppsProcessService, FormValues } from '@alfresco/adf-core';\nimport { ProcessInstanceVariable } from '../models/process-instance-variable.model';\nimport { ProcessDefinitionRepresentation } from './../models/process-definition.model';\nimport { ProcessInstance } from './../models/process-instance.model';\nimport { ProcessService } from './../services/process.service';\nimport { FormControl, AbstractControl } from '@angular/forms';\nimport { Observable } from 'rxjs';\nimport { MatAutocompleteTrigger } from '@angular/material/autocomplete';\nimport { MatSelectChange } from '@angular/material/select';\nimport { StartFormComponent } from '../../form';\nimport { AppDefinitionRepresentationModel } from '../../task-list';\nimport { ProcessNamePipe } from '../../pipes/process-name.pipe';\nexport declare class StartProcessInstanceComponent implements OnChanges, OnInit, OnDestroy {\n    private activitiProcess;\n    private activitiContentService;\n    private appsProcessService;\n    private appConfig;\n    private processNamePipe;\n    MAX_LENGTH: number;\n    appId: number;\n    title: string;\n    processDefinitionName: string;\n    variables: ProcessInstanceVariable[];\n    values: FormValues;\n    name: string;\n    showSelectProcessDropdown: boolean;\n    showSelectApplicationDropdown: boolean;\n    processFilterSelector: boolean;\n    start: EventEmitter<ProcessInstance>;\n    cancel: EventEmitter<void>;\n    error: EventEmitter<any>;\n    processDefinitionSelection: EventEmitter<ProcessDefinitionRepresentation>;\n    applicationSelection: EventEmitter<AppDefinitionRepresentationModel>;\n    startForm: StartFormComponent;\n    inputAutocomplete: MatAutocompleteTrigger;\n    processDefinitions: ProcessDefinitionRepresentation[];\n    selectedProcessDef: ProcessDefinitionRepresentation;\n    processNameInput: FormControl;\n    processDefinitionInput: FormControl;\n    filteredProcessesDefinitions$: Observable<ProcessDefinitionRepresentation[]>;\n    maxProcessNameLength: number;\n    alfrescoRepositoryName: string;\n    applications: AppDefinitionRepresentationModel[];\n    selectedApplication: AppDefinitionRepresentationModel;\n    isProcessDefinitionsLoading: boolean;\n    isAppsLoading: boolean;\n    movedNodeToPS: FormValues;\n    private onDestroy$;\n    constructor(activitiProcess: ProcessService, activitiContentService: ActivitiContentService, appsProcessService: AppsProcessService, appConfig: AppConfigService, processNamePipe: ProcessNamePipe);\n    ngOnInit(): void;\n    ngOnDestroy(): void;\n    ngOnChanges(changes: SimpleChanges): void;\n    private isAppIdChanged;\n    private isProcessDefinitionChanged;\n    private _filter;\n    getSelectedProcess(selectedProcess: string): ProcessDefinitionRepresentation;\n    load(): void;\n    loadProcessDefinitions(appId: any): void;\n    filterProcessDefinitionByName(): void;\n    loadApps(): void;\n    loadProcessDefinitionsBasedOnSelectedApp(): void;\n    onAppSelectionChange(selectedApplication: MatSelectChange): void;\n    private isAppSelected;\n    private removeDefaultApps;\n    hasApplications(): boolean;\n    hasProcessDefinitions(): boolean;\n    isProcessDefinitionSelected(): boolean;\n    isProcessDefinitionsEmpty(): boolean;\n    disableDropdownButton(): boolean;\n    getAlfrescoRepositoryName(): string;\n    moveNodeFromCStoPS(): void;\n    startProcess(outcome?: string): void;\n    cancelStartProcess(): void;\n    hasStartForm(): boolean;\n    isStartFormMissingOrValid(): boolean;\n    validateForm(): boolean;\n    private resetSelectedProcessDefinition;\n    private resetProcessDefinitions;\n    onOutcomeClick(outcome: string): void;\n    reset(): void;\n    displayFn(process: any): string;\n    displayDropdown(event: any): void;\n    get nameController(): AbstractControl;\n    get processDefinitionController(): AbstractControl;\n    private toggleProcessNameAndDefinitionsDropdown;\n    processDefinitionSelectionChanged(processDefinition: ProcessDefinitionRepresentation): void;\n    isLoading(): boolean;\n}\n"]}