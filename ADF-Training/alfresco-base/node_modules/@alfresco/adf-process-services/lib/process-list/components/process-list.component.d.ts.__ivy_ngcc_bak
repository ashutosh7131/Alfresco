/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { DataTableSchema, DataRowEvent, DataTableAdapter, CustomEmptyContentTemplateDirective, CustomLoadingContentTemplateDirective, DataRow, DataColumn, AppConfigService, PaginatedComponent, PaginationModel, UserPreferencesService, DataCellEvent } from '@alfresco/adf-core';
import { AfterContentInit, EventEmitter, OnChanges, SimpleChanges } from '@angular/core';
import { ProcessFilterParamRepresentationModel } from '../models/filter-process.model';
import { ProcessService } from '../services/process.service';
import { BehaviorSubject } from 'rxjs';
import { ProcessListModel } from '../models/process-list.model';
export declare class ProcessInstanceListComponent extends DataTableSchema implements OnChanges, AfterContentInit, PaginatedComponent {
    private processService;
    private userPreferences;
    static PRESET_KEY: string;
    customEmptyContent: CustomEmptyContentTemplateDirective;
    customLoadingContent: CustomLoadingContentTemplateDirective;
    appId: number;
    processDefinitionId: string;
    processInstanceId: number | string;
    state: string;
    sort: string;
    page: number;
    size: number;
    data: DataTableAdapter;
    multiselect: boolean;
    selectionMode: string;
    selectFirstRow: boolean;
    stickyHeader: boolean;
    showContextMenu: boolean;
    showRowContextMenu: EventEmitter<DataCellEvent>;
    resolverFn: (row: DataRow, col: DataColumn) => any;
    rowClick: EventEmitter<string>;
    success: EventEmitter<ProcessListModel>;
    error: EventEmitter<any>;
    requestNode: ProcessFilterParamRepresentationModel;
    currentInstanceId: string;
    isLoading: boolean;
    rows: any[];
    sorting: any[];
    pagination: BehaviorSubject<PaginationModel>;
    constructor(processService: ProcessService, userPreferences: UserPreferencesService, appConfig: AppConfigService);
    ngAfterContentInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    private isSortChanged;
    private isPropertyChanged;
    reload(): void;
    private load;
    selectFirst(): void;
    getCurrentId(): string;
    isListEmpty(): boolean;
    onRowClick(event: DataRowEvent): void;
    onRowKeyUp(event: CustomEvent<any>): void;
    onShowRowContextMenu(event: DataCellEvent): void;
    private createRequestNode;
    updatePagination(params: PaginationModel): void;
    currentPage(skipCount: number, maxItems: number): number;
}
