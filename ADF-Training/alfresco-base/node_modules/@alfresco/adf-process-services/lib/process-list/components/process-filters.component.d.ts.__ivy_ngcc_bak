/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { AppsProcessService } from '@alfresco/adf-core';
import { EventEmitter, OnChanges, OnInit, SimpleChanges } from '@angular/core';
import { ProcessInstanceFilterRepresentation, UserProcessInstanceFilterRepresentation } from '@alfresco/js-api';
import { Observable } from 'rxjs';
import { FilterProcessRepresentationModel } from '../models/filter-process.model';
import { ProcessFilterService } from './../services/process-filter.service';
export declare class ProcessFiltersComponent implements OnInit, OnChanges {
    private processFilterService;
    private appsProcessService;
    filterParam: FilterProcessRepresentationModel;
    filterClicked: EventEmitter<UserProcessInstanceFilterRepresentation>;
    success: EventEmitter<ProcessInstanceFilterRepresentation[]>;
    error: EventEmitter<any>;
    appId: number;
    appName: string;
    showIcon: boolean;
    filterSelected: EventEmitter<UserProcessInstanceFilterRepresentation>;
    filter$: Observable<ProcessInstanceFilterRepresentation>;
    currentFilter: ProcessInstanceFilterRepresentation;
    filters: UserProcessInstanceFilterRepresentation[];
    active: boolean;
    private iconsMDL;
    constructor(processFilterService: ProcessFilterService, appsProcessService: AppsProcessService);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    getFiltersByAppId(appId?: number): void;
    getFiltersByAppName(appName: string): void;
    selectFilter(filter: ProcessInstanceFilterRepresentation): void;
    selectProcessFilter(filterParam: FilterProcessRepresentationModel): void;
    selectRunningFilter(): void;
    selectDefaultTaskFilter(): void;
    getCurrentFilter(): ProcessInstanceFilterRepresentation;
    isFilterListEmpty(): boolean;
    private resetFilter;
    getFilterIcon(icon: string): string;
}
