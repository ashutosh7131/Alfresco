/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { EventEmitter, OnChanges, OnInit, SimpleChanges, OnDestroy } from '@angular/core';
import { ActivitiContentService, AppConfigService, AppsProcessService, FormValues } from '@alfresco/adf-core';
import { ProcessInstanceVariable } from '../models/process-instance-variable.model';
import { ProcessDefinitionRepresentation } from './../models/process-definition.model';
import { ProcessInstance } from './../models/process-instance.model';
import { ProcessService } from './../services/process.service';
import { FormControl, AbstractControl } from '@angular/forms';
import { Observable } from 'rxjs';
import { MatAutocompleteTrigger } from '@angular/material/autocomplete';
import { MatSelectChange } from '@angular/material/select';
import { StartFormComponent } from '../../form';
import { AppDefinitionRepresentationModel } from '../../task-list';
import { ProcessNamePipe } from '../../pipes/process-name.pipe';
import * as ɵngcc0 from '@angular/core';
export declare class StartProcessInstanceComponent implements OnChanges, OnInit, OnDestroy {
    private activitiProcess;
    private activitiContentService;
    private appsProcessService;
    private appConfig;
    private processNamePipe;
    MAX_LENGTH: number;
    appId: number;
    title: string;
    processDefinitionName: string;
    variables: ProcessInstanceVariable[];
    values: FormValues;
    name: string;
    showSelectProcessDropdown: boolean;
    showSelectApplicationDropdown: boolean;
    processFilterSelector: boolean;
    start: EventEmitter<ProcessInstance>;
    cancel: EventEmitter<void>;
    error: EventEmitter<any>;
    processDefinitionSelection: EventEmitter<ProcessDefinitionRepresentation>;
    applicationSelection: EventEmitter<AppDefinitionRepresentationModel>;
    startForm: StartFormComponent;
    inputAutocomplete: MatAutocompleteTrigger;
    processDefinitions: ProcessDefinitionRepresentation[];
    selectedProcessDef: ProcessDefinitionRepresentation;
    processNameInput: FormControl;
    processDefinitionInput: FormControl;
    filteredProcessesDefinitions$: Observable<ProcessDefinitionRepresentation[]>;
    maxProcessNameLength: number;
    alfrescoRepositoryName: string;
    applications: AppDefinitionRepresentationModel[];
    selectedApplication: AppDefinitionRepresentationModel;
    isProcessDefinitionsLoading: boolean;
    isAppsLoading: boolean;
    movedNodeToPS: FormValues;
    private onDestroy$;
    constructor(activitiProcess: ProcessService, activitiContentService: ActivitiContentService, appsProcessService: AppsProcessService, appConfig: AppConfigService, processNamePipe: ProcessNamePipe);
    ngOnInit(): void;
    ngOnDestroy(): void;
    ngOnChanges(changes: SimpleChanges): void;
    private isAppIdChanged;
    private isProcessDefinitionChanged;
    private _filter;
    getSelectedProcess(selectedProcess: string): ProcessDefinitionRepresentation;
    load(): void;
    loadProcessDefinitions(appId: any): void;
    filterProcessDefinitionByName(): void;
    loadApps(): void;
    loadProcessDefinitionsBasedOnSelectedApp(): void;
    onAppSelectionChange(selectedApplication: MatSelectChange): void;
    private isAppSelected;
    private removeDefaultApps;
    hasApplications(): boolean;
    hasProcessDefinitions(): boolean;
    isProcessDefinitionSelected(): boolean;
    isProcessDefinitionsEmpty(): boolean;
    disableDropdownButton(): boolean;
    getAlfrescoRepositoryName(): string;
    moveNodeFromCStoPS(): void;
    startProcess(outcome?: string): void;
    cancelStartProcess(): void;
    hasStartForm(): boolean;
    isStartFormMissingOrValid(): boolean;
    validateForm(): boolean;
    private resetSelectedProcessDefinition;
    private resetProcessDefinitions;
    onOutcomeClick(outcome: string): void;
    reset(): void;
    displayFn(process: any): string;
    displayDropdown(event: any): void;
    get nameController(): AbstractControl;
    get processDefinitionController(): AbstractControl;
    private toggleProcessNameAndDefinitionsDropdown;
    processDefinitionSelectionChanged(processDefinition: ProcessDefinitionRepresentation): void;
    isLoading(): boolean;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<StartProcessInstanceComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<StartProcessInstanceComponent, "adf-start-process", never, { "name": "name"; "showSelectProcessDropdown": "showSelectProcessDropdown"; "showSelectApplicationDropdown": "showSelectApplicationDropdown"; "processFilterSelector": "processFilterSelector"; "appId": "appId"; "processDefinitionName": "processDefinitionName"; "title": "title"; "variables": "variables"; "values": "values"; }, { "start": "start"; "cancel": "cancel"; "error": "error"; "processDefinitionSelection": "processDefinitionSelection"; "applicationSelection": "applicationSelection"; }, never, never>;
}

//# sourceMappingURL=start-process.component.d.ts.map