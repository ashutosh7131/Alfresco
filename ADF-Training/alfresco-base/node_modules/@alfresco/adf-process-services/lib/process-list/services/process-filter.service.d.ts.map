{"version":3,"file":"process-filter.service.d.ts","sources":["process-filter.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { AlfrescoApiService } from '@alfresco/adf-core';\nimport { Observable } from 'rxjs';\nimport { FilterProcessRepresentationModel } from '../models/filter-process.model';\nimport { ResultListDataRepresentationUserProcessInstanceFilterRepresentation, UserFiltersApi } from '@alfresco/js-api';\nexport declare class ProcessFilterService {\n    private alfrescoApiService;\n    private _userFiltersApi;\n    get userFiltersApi(): UserFiltersApi;\n    constructor(alfrescoApiService: AlfrescoApiService);\n    getProcessFilters(appId: number): Observable<FilterProcessRepresentationModel[]>;\n    getProcessFilterById(filterId: number, appId?: number): Observable<FilterProcessRepresentationModel>;\n    getProcessFilterByName(filterName: string, appId?: number): Observable<FilterProcessRepresentationModel>;\n    createDefaultFilters(appId: number): Observable<FilterProcessRepresentationModel[]>;\n    getRunningFilterInstance(appId: number, index?: number): FilterProcessRepresentationModel;\n    private getCompletedFilterInstance;\n    private getAllFilterInstance;\n    addProcessFilter(filter: FilterProcessRepresentationModel): Observable<FilterProcessRepresentationModel>;\n    callApiProcessFilters(appId?: number): Promise<ResultListDataRepresentationUserProcessInstanceFilterRepresentation>;\n    private handleProcessError;\n}\n"]}