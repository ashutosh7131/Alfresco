(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@alfresco/adf-core'), require('@angular/core'), require('rxjs'), require('rxjs/operators'), require('@alfresco/js-api'), require('@angular/common'), require('@angular/material/dialog'), require('moment-es6'), require('@angular/material/core'), require('@angular/forms'), require('@angular/flex-layout'), require('@angular/material/autocomplete'), require('@angular/material/button'), require('@angular/material/card'), require('@angular/material/checkbox'), require('@angular/material/chips'), require('@angular/material/form-field'), require('@angular/material/datepicker'), require('@angular/material/grid-list'), require('@angular/material/icon'), require('@angular/material/input'), require('@angular/material/list'), require('@angular/material/menu'), require('@angular/material/progress-spinner'), require('@angular/material/radio'), require('@angular/material/select'), require('@angular/material/slide-toggle'), require('@angular/material/table'), require('@angular/material/tabs'), require('@angular/material/tooltip'), require('@alfresco/adf-content-services')) :
    typeof define === 'function' && define.amd ? define('@alfresco/adf-process-services', ['exports', '@alfresco/adf-core', '@angular/core', 'rxjs', 'rxjs/operators', '@alfresco/js-api', '@angular/common', '@angular/material/dialog', 'moment-es6', '@angular/material/core', '@angular/forms', '@angular/flex-layout', '@angular/material/autocomplete', '@angular/material/button', '@angular/material/card', '@angular/material/checkbox', '@angular/material/chips', '@angular/material/form-field', '@angular/material/datepicker', '@angular/material/grid-list', '@angular/material/icon', '@angular/material/input', '@angular/material/list', '@angular/material/menu', '@angular/material/progress-spinner', '@angular/material/radio', '@angular/material/select', '@angular/material/slide-toggle', '@angular/material/table', '@angular/material/tabs', '@angular/material/tooltip', '@alfresco/adf-content-services'], factory) :
    (global = global || self, factory((global.alfresco = global.alfresco || {}, global.alfresco['adf-process-services'] = {}), global['@alfresco/adf-core'], global.ng.core, global.rxjs, global.rxjs.operators, global['@alfresco/js-api'], global.ng.common, global.ng.material.dialog, global['moment-es6'], global.ng.material.core, global.ng.forms, global.ng.flexLayout, global.ng.material.autocomplete, global.ng.material.button, global.ng.material.card, global.ng.material.checkbox, global.ng.material.chips, global.ng.material.formField, global.ng.material.datepicker, global.ng.material.gridList, global.ng.material.icon, global.ng.material.input, global.ng.material.list, global.ng.material.menu, global.ng.material.progressSpinner, global.ng.material.radio, global.ng.material.select, global.ng.material.slideToggle, global.ng.material.table, global.ng.material.tabs, global.ng.material.tooltip, global['@alfresco/adf-content-services']));
}(this, (function (exports, i1, i0, rxjs, operators, jsApi, common, i1$1, moment$1, core, forms, flexLayout, autocomplete, button, card, checkbox, chips, formField, datepicker, gridList, icon, input, list, menu, progressSpinner, radio, select, slideToggle, table, tabs, tooltip, adfContentServices) { 'use strict';

    moment$1 = moment$1 && Object.prototype.hasOwnProperty.call(moment$1, 'default') ? moment$1['default'] : moment$1;

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var FilterProcessRepresentationModel = /** @class */ (function () {
        function FilterProcessRepresentationModel(obj) {
            if (obj) {
                this.id = obj.id || null;
                this.appId = obj.appId || null;
                this.name = obj.name || null;
                this.recent = !!obj.recent;
                this.icon = obj.icon || null;
                this.filter = obj.filter || null;
                this.index = obj.index;
            }
        }
        FilterProcessRepresentationModel.prototype.hasFilter = function () {
            return !!this.filter;
        };
        return FilterProcessRepresentationModel;
    }());
    var ProcessFilterParamRepresentationModel = /** @class */ (function () {
        function ProcessFilterParamRepresentationModel(obj) {
            this.processDefinitionId = obj.processDefinitionId || null;
            this.appDefinitionId = obj.appDefinitionId || null;
            this.processInstanceId = obj.processInstanceId || null;
            this.state = obj.state || null;
            this.sort = obj.sort || null;
            this.page = obj.page || null;
            this.size = obj.size || null;
        }
        return ProcessFilterParamRepresentationModel;
    }());

    var ProcessFilterService = /** @class */ (function () {
        function ProcessFilterService(alfrescoApiService) {
            this.alfrescoApiService = alfrescoApiService;
        }
        Object.defineProperty(ProcessFilterService.prototype, "userFiltersApi", {
            get: function () {
                var _a;
                this._userFiltersApi = (_a = this._userFiltersApi) !== null && _a !== void 0 ? _a : new jsApi.UserFiltersApi(this.alfrescoApiService.getInstance());
                return this._userFiltersApi;
            },
            enumerable: false,
            configurable: true
        });
        ProcessFilterService.prototype.getProcessFilters = function (appId) {
            var _this = this;
            return rxjs.from(this.callApiProcessFilters(appId))
                .pipe(operators.map(function (response) {
                var filters = [];
                response.data.forEach(function (filter) {
                    var filterModel = new FilterProcessRepresentationModel(filter);
                    filters.push(filterModel);
                });
                return filters;
            }), operators.catchError(function (err) { return _this.handleProcessError(err); }));
        };
        ProcessFilterService.prototype.getProcessFilterById = function (filterId, appId) {
            var _this = this;
            return rxjs.from(this.callApiProcessFilters(appId))
                .pipe(operators.map(function (response) {
                return response.data.find(function (filter) { return filter.id === filterId; });
            }), operators.catchError(function (err) { return _this.handleProcessError(err); }));
        };
        ProcessFilterService.prototype.getProcessFilterByName = function (filterName, appId) {
            var _this = this;
            return rxjs.from(this.callApiProcessFilters(appId))
                .pipe(operators.map(function (response) {
                return response.data.find(function (filter) { return filter.name === filterName; });
            }), operators.catchError(function (err) { return _this.handleProcessError(err); }));
        };
        ProcessFilterService.prototype.createDefaultFilters = function (appId) {
            var _this = this;
            var runningFilter = this.getRunningFilterInstance(appId, 0);
            var runningObservable = this.addProcessFilter(runningFilter);
            var completedFilter = this.getCompletedFilterInstance(appId, 1);
            var completedObservable = this.addProcessFilter(completedFilter);
            var allFilter = this.getAllFilterInstance(appId, 2);
            var allObservable = this.addProcessFilter(allFilter);
            return new rxjs.Observable(function (observer) {
                rxjs.forkJoin([
                    runningObservable,
                    completedObservable,
                    allObservable
                ]).subscribe(function (res) {
                    var filters = [];
                    res.forEach(function (filter) {
                        if (filter.name === runningFilter.name) {
                            filters.push(new FilterProcessRepresentationModel(Object.assign(Object.assign({}, filter), { filter: runningFilter.filter, appId: appId })));
                        }
                        else if (filter.name === completedFilter.name) {
                            filters.push(new FilterProcessRepresentationModel(Object.assign(Object.assign({}, filter), { filter: completedFilter.filter, appId: appId })));
                        }
                        else if (filter.name === allFilter.name) {
                            filters.push(new FilterProcessRepresentationModel(Object.assign(Object.assign({}, filter), { filter: allFilter.filter, appId: appId })));
                        }
                    });
                    observer.next(filters);
                    observer.complete();
                }, function (err) {
                    _this.handleProcessError(err);
                });
            });
        };
        ProcessFilterService.prototype.getRunningFilterInstance = function (appId, index) {
            return new FilterProcessRepresentationModel({
                'name': 'Running',
                'appId': appId,
                'recent': true,
                'icon': 'glyphicon-random',
                'filter': { 'sort': 'created-desc', 'name': '', 'state': 'running' },
                index: index
            });
        };
        ProcessFilterService.prototype.getCompletedFilterInstance = function (appId, index) {
            return new FilterProcessRepresentationModel({
                'name': 'Completed',
                'appId': appId,
                'recent': false,
                'icon': 'glyphicon-ok-sign',
                'filter': { 'sort': 'created-desc', 'name': '', 'state': 'completed' },
                index: index
            });
        };
        ProcessFilterService.prototype.getAllFilterInstance = function (appId, index) {
            return new FilterProcessRepresentationModel({
                'name': 'All',
                'appId': appId,
                'recent': true,
                'icon': 'glyphicon-th',
                'filter': { 'sort': 'created-desc', 'name': '', 'state': 'all' },
                index: index
            });
        };
        ProcessFilterService.prototype.addProcessFilter = function (filter) {
            var _this = this;
            return rxjs.from(this.userFiltersApi.createUserProcessInstanceFilter(filter))
                .pipe(operators.map(function (response) {
                return response;
            }), operators.catchError(function (err) { return _this.handleProcessError(err); }));
        };
        ProcessFilterService.prototype.callApiProcessFilters = function (appId) {
            if (appId) {
                return this.userFiltersApi.getUserProcessInstanceFilters({ appId: appId });
            }
            else {
                return this.userFiltersApi.getUserProcessInstanceFilters();
            }
        };
        ProcessFilterService.prototype.handleProcessError = function (error) {
            return rxjs.throwError(error || 'Server error');
        };
        return ProcessFilterService;
    }());
    ProcessFilterService.ɵprov = i0.ɵɵdefineInjectable({ factory: function ProcessFilterService_Factory() { return new ProcessFilterService(i0.ɵɵinject(i1.AlfrescoApiService)); }, token: ProcessFilterService, providedIn: "root" });
    ProcessFilterService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    ProcessFilterService.ctorParameters = function () { return [
        { type: i1.AlfrescoApiService }
    ]; };

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var IconModel = /** @class */ (function () {
        function IconModel() {
            this.initIconsMDL();
        }
        IconModel.prototype.mapGlyphiconToMaterialDesignIcons = function (icon) {
            return this.iconsMDL.get(icon) ? this.iconsMDL.get(icon) : IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON;
        };
        IconModel.prototype.initIconsMDL = function () {
            this.iconsMDL = new Map();
            this.iconsMDL.set('glyphicon-asterisk', 'ac_unit');
            this.iconsMDL.set('glyphicon-plus', 'add');
            this.iconsMDL.set('glyphicon-euro', 'euro_symbol');
            this.iconsMDL.set('glyphicon-cloud', 'cloud');
            this.iconsMDL.set('glyphicon-envelope', 'mail');
            this.iconsMDL.set('glyphicon-pencil', 'create');
            this.iconsMDL.set('glyphicon-glass', 'local_bar');
            this.iconsMDL.set('glyphicon-music', 'music_note');
            this.iconsMDL.set('glyphicon-search', 'search');
            this.iconsMDL.set('glyphicon-heart', 'favorite');
            this.iconsMDL.set('glyphicon-heart-empty', 'favorite_border');
            this.iconsMDL.set('glyphicon-star', 'star');
            this.iconsMDL.set('glyphicon-star-empty', 'star_border');
            this.iconsMDL.set('glyphicon-user', 'person');
            this.iconsMDL.set('glyphicon-film', 'movie_creation');
            this.iconsMDL.set('glyphicon-th-large', 'view_comfy');
            this.iconsMDL.set('glyphicon-th', 'dashboard');
            this.iconsMDL.set('glyphicon-th-list', 'list');
            this.iconsMDL.set('glyphicon-ok', 'done');
            this.iconsMDL.set('glyphicon-remove', 'cancel');
            this.iconsMDL.set('glyphicon-zoom-in', 'zoom_in');
            this.iconsMDL.set('glyphicon-zoom-out', 'zoom_out');
            this.iconsMDL.set('glyphicon-off', 'highlight_off');
            this.iconsMDL.set('glyphicon-signal', 'signal_cellular_4_bar');
            this.iconsMDL.set('glyphicon-cog', 'settings');
            this.iconsMDL.set('glyphicon-trash', 'delete');
            this.iconsMDL.set('glyphicon-home', 'home');
            this.iconsMDL.set('glyphicon-file', 'insert_drive_file');
            this.iconsMDL.set('glyphicon-time', 'access_time');
            this.iconsMDL.set('glyphicon-road', 'map');
            this.iconsMDL.set('glyphicon-download-alt', 'file_download');
            this.iconsMDL.set('glyphicon-download', 'file_download');
            this.iconsMDL.set('glyphicon-upload', 'file_upload');
            this.iconsMDL.set('glyphicon-inbox', 'inbox');
            this.iconsMDL.set('glyphicon-play-circle', 'play_circle_outline');
            this.iconsMDL.set('glyphicon-repeat', 'refresh');
            this.iconsMDL.set('glyphicon-refresh', 'sync');
            this.iconsMDL.set('glyphicon-list-alt', 'event_note');
            this.iconsMDL.set('glyphicon-lock', 'lock_outline');
            this.iconsMDL.set('glyphicon-flag', 'assistant_photo');
            this.iconsMDL.set('glyphicon-headphones', 'headset');
            this.iconsMDL.set('glyphicon-volume-up', 'volume_up');
            this.iconsMDL.set('glyphicon-tag', 'local_offer');
            this.iconsMDL.set('glyphicon-tags', 'local_offer');
            this.iconsMDL.set('glyphicon-book', 'library_books');
            this.iconsMDL.set('glyphicon-bookmark', 'collections_bookmark');
            this.iconsMDL.set('glyphicon-print', 'local_printshop');
            this.iconsMDL.set('glyphicon-camera', 'local_see');
            this.iconsMDL.set('glyphicon-list', 'view_list');
            this.iconsMDL.set('glyphicon-facetime-video', 'video_call');
            this.iconsMDL.set('glyphicon-picture', 'photo');
            this.iconsMDL.set('glyphicon-map-marker', 'add_location');
            this.iconsMDL.set('glyphicon-adjust', 'brightness_4');
            this.iconsMDL.set('glyphicon-tint', 'invert_colors');
            this.iconsMDL.set('glyphicon-edit', 'edit');
            this.iconsMDL.set('glyphicon-share', 'share');
            this.iconsMDL.set('glyphicon-check', 'assignment_turned_in');
            this.iconsMDL.set('glyphicon-move', 'open_with');
            this.iconsMDL.set('glyphicon-play', 'play_arrow');
            this.iconsMDL.set('glyphicon-eject', 'eject');
            this.iconsMDL.set('glyphicon-plus-sign', 'add_circle');
            this.iconsMDL.set('glyphicon-minus-sign', 'remove_circle');
            this.iconsMDL.set('glyphicon-remove-sign', 'cancel');
            this.iconsMDL.set('glyphicon-ok-sign', 'check_circle');
            this.iconsMDL.set('glyphicon-question-sign', 'help');
            this.iconsMDL.set('glyphicon-info-sign', 'info');
            this.iconsMDL.set('glyphicon-screenshot', 'flare');
            this.iconsMDL.set('glyphicon-remove-circle', 'cancel');
            this.iconsMDL.set('glyphicon-ok-circle', 'add_circle');
            this.iconsMDL.set('glyphicon-ban-circle', 'block');
            this.iconsMDL.set('glyphicon-share-alt', 'redo');
            this.iconsMDL.set('glyphicon-exclamation-sign', 'error');
            this.iconsMDL.set('glyphicon-gift', 'giftcard');
            this.iconsMDL.set('glyphicon-leaf', 'spa');
            this.iconsMDL.set('glyphicon-fire', 'whatshot');
            this.iconsMDL.set('glyphicon-eye-open', 'remove_red_eye');
            this.iconsMDL.set('glyphicon-eye-close', 'remove_red_eye');
            this.iconsMDL.set('glyphicon-warning-sign', 'warning');
            this.iconsMDL.set('glyphicon-plane', 'airplanemode_active');
            this.iconsMDL.set('glyphicon-calendar', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);
            this.iconsMDL.set('glyphicon-random', 'shuffle');
            this.iconsMDL.set('glyphicon-comment', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);
            this.iconsMDL.set('glyphicon-magnet', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);
            this.iconsMDL.set('glyphicon-retweet', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);
            this.iconsMDL.set('glyphicon-shopping-cart', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);
            this.iconsMDL.set('glyphicon-folder-close', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);
            this.iconsMDL.set('glyphicon-folder-open', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);
            this.iconsMDL.set('glyphicon-hdd', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);
            this.iconsMDL.set('glyphicon-bullhorn', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);
            this.iconsMDL.set('glyphicon-bell', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);
            this.iconsMDL.set('glyphicon-certificate', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);
            this.iconsMDL.set('glyphicon-thumbs-up', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);
            this.iconsMDL.set('glyphicon-thumbs-down', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);
            this.iconsMDL.set('glyphicon-hand-left', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);
            this.iconsMDL.set('glyphicon-globe', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);
            this.iconsMDL.set('glyphicon-wrench', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);
            this.iconsMDL.set('glyphicon-tasks', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);
            this.iconsMDL.set('glyphicon-filter', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);
            this.iconsMDL.set('glyphicon-briefcase', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);
            this.iconsMDL.set('glyphicon-dashboard', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);
            this.iconsMDL.set('glyphicon-paperclip', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);
            this.iconsMDL.set('glyphicon-link', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);
            this.iconsMDL.set('glyphicon-phone', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);
            this.iconsMDL.set('glyphicon-pushpin', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);
            this.iconsMDL.set('glyphicon-usd', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);
            this.iconsMDL.set('glyphicon-gbp', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);
            this.iconsMDL.set('glyphicon-sort', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);
            this.iconsMDL.set('glyphicon-flash', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);
            this.iconsMDL.set('glyphicon-record', 'radio_button_checked');
            this.iconsMDL.set('glyphicon-save', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);
            this.iconsMDL.set('glyphicon-open', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);
            this.iconsMDL.set('glyphicon-saved', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);
            this.iconsMDL.set('glyphicon-send', 'send');
            this.iconsMDL.set('glyphicon-floppy-disk', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);
            this.iconsMDL.set('glyphicon-credit-card', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);
            this.iconsMDL.set('glyphicon-cutlery', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);
            this.iconsMDL.set('glyphicon-earphone', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);
            this.iconsMDL.set('glyphicon-phone-alt', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);
            this.iconsMDL.set('glyphicon-tower', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);
            this.iconsMDL.set('glyphicon-stats', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);
            this.iconsMDL.set('glyphicon-cloud-download', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);
            this.iconsMDL.set('glyphicon-cloud-upload', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);
            this.iconsMDL.set('glyphicon-tree-conifer', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);
            this.iconsMDL.set('glyphicon-tree-deciduous', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);
            this.iconsMDL.set('glyphicon-align-left', 'format_align_left');
        };
        return IconModel;
    }());
    IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON = 'favorite_border';

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var ProcessFiltersComponent = /** @class */ (function () {
        function ProcessFiltersComponent(processFilterService, appsProcessService) {
            this.processFilterService = processFilterService;
            this.appsProcessService = appsProcessService;
            this.filterClicked = new i0.EventEmitter();
            this.success = new i0.EventEmitter();
            this.error = new i0.EventEmitter();
            this.showIcon = true;
            this.filterSelected = new i0.EventEmitter();
            this.filters = [];
            this.active = false;
        }
        ProcessFiltersComponent.prototype.ngOnInit = function () {
            this.iconsMDL = new IconModel();
        };
        ProcessFiltersComponent.prototype.ngOnChanges = function (changes) {
            var appId = changes['appId'];
            var appName = changes['appName'];
            var filter = changes['filterParam'];
            if (appId && (appId.currentValue || appId.currentValue === null)) {
                this.getFiltersByAppId(appId.currentValue);
            }
            else if (appName && appName.currentValue) {
                this.getFiltersByAppName(appName.currentValue);
            }
            else if (filter && filter.currentValue !== filter.previousValue) {
                this.selectProcessFilter(filter.currentValue);
            }
        };
        ProcessFiltersComponent.prototype.getFiltersByAppId = function (appId) {
            var _this = this;
            this.processFilterService.getProcessFilters(appId).subscribe(function (res) {
                if (res.length === 0 && _this.isFilterListEmpty()) {
                    _this.processFilterService.createDefaultFilters(appId).subscribe(function (resDefault) {
                        _this.resetFilter();
                        _this.filters = resDefault;
                        _this.selectProcessFilter(_this.filterParam);
                        _this.success.emit(resDefault);
                    }, function (errDefault) {
                        _this.error.emit(errDefault);
                    });
                }
                else {
                    _this.resetFilter();
                    _this.filters = res;
                    _this.selectProcessFilter(_this.filterParam);
                    _this.success.emit(res);
                }
            }, function (err) {
                _this.error.emit(err);
            });
        };
        ProcessFiltersComponent.prototype.getFiltersByAppName = function (appName) {
            var _this = this;
            this.appsProcessService.getDeployedApplicationsByName(appName).subscribe(function (application) {
                _this.getFiltersByAppId(application.id);
                _this.selectProcessFilter(_this.filterParam);
            }, function (err) {
                _this.error.emit(err);
            });
        };
        ProcessFiltersComponent.prototype.selectFilter = function (filter) {
            this.currentFilter = filter;
            this.active = true;
            this.filterClicked.emit(filter);
        };
        ProcessFiltersComponent.prototype.selectProcessFilter = function (filterParam) {
            if (filterParam) {
                var newFilter = this.filters.find(function (processFilter, index) { return filterParam.index === index ||
                    filterParam.id === processFilter.id ||
                    (filterParam.name &&
                        (filterParam.name.toLocaleLowerCase() === processFilter.name.toLocaleLowerCase())); });
                this.currentFilter = newFilter;
                if (newFilter) {
                    this.filterSelected.emit(newFilter);
                }
            }
        };
        ProcessFiltersComponent.prototype.selectRunningFilter = function () {
            this.selectProcessFilter(this.processFilterService.getRunningFilterInstance(null));
        };
        ProcessFiltersComponent.prototype.selectDefaultTaskFilter = function () {
            if (!this.isFilterListEmpty()) {
                this.currentFilter = this.filters[0];
                this.filterSelected.emit(this.filters[0]);
            }
        };
        ProcessFiltersComponent.prototype.getCurrentFilter = function () {
            return this.currentFilter;
        };
        ProcessFiltersComponent.prototype.isFilterListEmpty = function () {
            return this.filters === undefined || (this.filters && this.filters.length === 0);
        };
        ProcessFiltersComponent.prototype.resetFilter = function () {
            this.filters = [];
            this.currentFilter = undefined;
        };
        ProcessFiltersComponent.prototype.getFilterIcon = function (icon) {
            return this.iconsMDL.mapGlyphiconToMaterialDesignIcons(icon);
        };
        return ProcessFiltersComponent;
    }());
    ProcessFiltersComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'adf-process-instance-filters',
                    template: "<div *ngFor=\"let filter of filters\" class=\"adf-filters__entry\" [class.adf-active]=\"currentFilter === filter\">\n    <button (click)=\"selectFilter(filter)\"\n      [attr.aria-label]=\"filter.name | translate\"\n      [id]=\"filter.id\"\n      [attr.data-automation-id]=\"filter.name + '_filter'\"\n      mat-button\n      class=\"adf-filter-action-button adf-full-width\" fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\n      <adf-icon data-automation-id=\"adf-filter-icon\" *ngIf=\"showIcon\" [value]=\"getFilterIcon(filter.icon)\"></adf-icon>\n      <span data-automation-id=\"adf-filter-label\" class=\"adf-filter-action-button__label\">{{ filter.name | translate }}</span>\n    </button>\n</div>\n",
                    encapsulation: i0.ViewEncapsulation.None,
                    styles: [".adf-filters__entry{cursor:pointer;font-size:14px!important;font-weight:700;height:24px;opacity:.54;padding:12px 0!important;width:100%}.adf-filters__entry .adf-full-width{display:flex;width:100%}.adf-filters__entry .adf-filter-action-button .adf-filter-action-button__label{margin:0 8px!important;padding-left:20px}.adf-filters__entry.adf-active,.adf-filters__entry:hover{color:var(--theme-primary-color);opacity:1}"]
                },] }
    ];
    ProcessFiltersComponent.ctorParameters = function () { return [
        { type: ProcessFilterService },
        { type: i1.AppsProcessService }
    ]; };
    ProcessFiltersComponent.propDecorators = {
        filterParam: [{ type: i0.Input }],
        filterClicked: [{ type: i0.Output }],
        success: [{ type: i0.Output }],
        error: [{ type: i0.Output }],
        appId: [{ type: i0.Input }],
        appName: [{ type: i0.Input }],
        showIcon: [{ type: i0.Input }],
        filterSelected: [{ type: i0.Output }]
    };

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var ProcessDefinitionRepresentation = /** @class */ (function () {
        function ProcessDefinitionRepresentation(obj) {
            this.id = obj && obj.id || null;
            this.name = obj && obj.name || null;
            this.description = obj && obj.description || null;
            this.key = obj && obj.key || null;
            this.category = obj && obj.category || null;
            this.version = obj && obj.version || 0;
            this.deploymentId = obj && obj.deploymentId || null;
            this.tenantId = obj && obj.tenantId || null;
            this.metaDataValues = obj && obj.metaDataValues || [];
            this.hasStartForm = obj && obj.hasStartForm === true;
        }
        return ProcessDefinitionRepresentation;
    }());

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var ProcessInstanceVariable = /** @class */ (function () {
        function ProcessInstanceVariable(obj) {
            this.name = obj && obj.name !== undefined ? obj.name : null;
            this.scope = obj && obj.scope !== undefined ? obj.scope : null;
            this.value = obj && obj.value !== undefined ? obj.value : null;
            this.valueUrl = obj && obj.valueUrl !== undefined ? obj.valueUrl : null;
        }
        return ProcessInstanceVariable;
    }());

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var ProcessInstance = /** @class */ (function () {
        function ProcessInstance(data) {
            this.businessKey = data && data.businessKey !== undefined ? data.businessKey : null;
            this.ended = data && data.ended !== undefined ? data.ended : null;
            this.graphicalNotationDefined = data && data.graphicalNotationDefined !== undefined ? data.graphicalNotationDefined : null;
            this.id = data && data.id !== undefined ? data.id : null;
            this.name = data && data.name !== undefined ? data.name : null;
            this.processDefinitionCategory = data && data.processDefinitionCategory !== undefined ? data.processDefinitionCategory : null;
            this.processDefinitionDeploymentId = data && data.processDefinitionDeploymentId !== undefined ? data.processDefinitionDeploymentId : null;
            this.processDefinitionDescription = data && data.processDefinitionDescription !== undefined ? data.processDefinitionDescription : null;
            this.processDefinitionId = data && data.processDefinitionId !== undefined ? data.processDefinitionId : null;
            this.processDefinitionKey = data && data.processDefinitionKey !== undefined ? data.processDefinitionKey : null;
            this.processDefinitionName = data && data.processDefinitionName !== undefined ? data.processDefinitionName : null;
            this.processDefinitionVersion = data && data.processDefinitionVersion !== undefined ? data.processDefinitionVersion : null;
            this.startFormDefined = data && data.startFormDefined !== undefined ? data.startFormDefined : null;
            this.started = data && data.started !== undefined ? data.started : null;
            this.startedBy = data && data.startedBy !== undefined ? data.startedBy : null;
            this.tenantId = data && data.tenantId !== undefined ? data.tenantId : null;
            this.variables = data && data.variables !== undefined ? data.variables : null;
        }
        return ProcessInstance;
    }());

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var ProcessListModel = /** @class */ (function () {
        function ProcessListModel(obj) {
            if (obj) {
                this.size = obj.size || null;
                this.total = obj.total || null;
                this.start = obj.start || null;
                this.length = obj.length || null;
                this.data = obj.data || [];
            }
        }
        return ProcessListModel;
    }());

    var ProcessService = /** @class */ (function () {
        function ProcessService(alfrescoApiService) {
            this.alfrescoApiService = alfrescoApiService;
        }
        Object.defineProperty(ProcessService.prototype, "tasksApi", {
            get: function () {
                var _a;
                this._tasksApi = (_a = this._tasksApi) !== null && _a !== void 0 ? _a : new jsApi.TasksApi(this.alfrescoApiService.getInstance());
                return this._tasksApi;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ProcessService.prototype, "processDefinitionsApi", {
            get: function () {
                var _a;
                this._processDefinitionsApi = (_a = this._processDefinitionsApi) !== null && _a !== void 0 ? _a : new jsApi.ProcessDefinitionsApi(this.alfrescoApiService.getInstance());
                return this._processDefinitionsApi;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ProcessService.prototype, "processInstancesApi", {
            get: function () {
                var _a;
                this._processInstancesApi = (_a = this._processInstancesApi) !== null && _a !== void 0 ? _a : new jsApi.ProcessInstancesApi(this.alfrescoApiService.getInstance());
                return this._processInstancesApi;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ProcessService.prototype, "processInstanceVariablesApi", {
            get: function () {
                var _a;
                this._processInstanceVariablesApi = (_a = this._processInstanceVariablesApi) !== null && _a !== void 0 ? _a : new jsApi.ProcessInstanceVariablesApi(this.alfrescoApiService.getInstance());
                return this._processInstanceVariablesApi;
            },
            enumerable: false,
            configurable: true
        });
        ProcessService.prototype.getProcessInstances = function (requestNode, processDefinitionKey) {
            var _this = this;
            return rxjs.from(this.processInstancesApi.getProcessInstances(requestNode))
                .pipe(operators.map(function (res) {
                if (processDefinitionKey) {
                    var filtered = res.data.filter(function (process) { return process.processDefinitionKey === processDefinitionKey; });
                    res.data = filtered;
                    return res;
                }
                else {
                    return res;
                }
            }), operators.catchError(function (err) { return _this.handleProcessError(err); }));
        };
        ProcessService.prototype.getProcesses = function (requestNode, processDefinitionKey) {
            var _this = this;
            return this.getProcessInstances(requestNode, processDefinitionKey)
                .pipe(operators.map(function (response) {
                return Object.assign(Object.assign({}, response), { data: (response.data || []).map(function (instance) {
                        instance.name = _this.getProcessNameOrDescription(instance, 'medium');
                        return instance;
                    }) });
            }), operators.catchError(function () { return rxjs.of(new ProcessListModel({})); }));
        };
        ProcessService.prototype.getProcessNameOrDescription = function (processInstance, dateFormat) {
            var name = '';
            if (processInstance) {
                name = processInstance.name ||
                    processInstance.processDefinitionName + ' - ' + this.getFormatDate(processInstance.started, dateFormat);
            }
            return name;
        };
        ProcessService.prototype.getFormatDate = function (value, format) {
            var datePipe = new common.DatePipe('en-US');
            try {
                return datePipe.transform(value, format);
            }
            catch (err) {
                return '';
            }
        };
        ProcessService.prototype.fetchProcessAuditPdfById = function (processId) {
            var _this = this;
            return rxjs.from(this.processInstancesApi.getProcessAuditPdf(processId))
                .pipe(operators.catchError(function (err) { return _this.handleProcessError(err); }));
        };
        ProcessService.prototype.fetchProcessAuditJsonById = function (processId) {
            var _this = this;
            return rxjs.from(this.processInstancesApi.getTaskAuditLog(processId))
                .pipe(operators.catchError(function (err) { return _this.handleProcessError(err); }));
        };
        ProcessService.prototype.getProcess = function (processInstanceId) {
            var _this = this;
            return rxjs.from(this.processInstancesApi.getProcessInstance(processInstanceId))
                .pipe(operators.catchError(function (err) { return _this.handleProcessError(err); }));
        };
        ProcessService.prototype.getProcessTasks = function (processInstanceId, state) {
            var _this = this;
            var taskOpts = state ? {
                processInstanceId: processInstanceId,
                state: state
            } : {
                processInstanceId: processInstanceId
            };
            return rxjs.from(this.tasksApi.listTasks(taskOpts))
                .pipe(operators.map(this.extractData), operators.map(function (tasks) { return tasks.map(function (task) {
                task.created = moment(task.created, 'YYYY-MM-DD').format();
                return task;
            }); }), operators.catchError(function (err) { return _this.handleProcessError(err); }));
        };
        ProcessService.prototype.getProcessDefinitions = function (appId) {
            var _this = this;
            var opts = appId ? {
                latest: true,
                appDefinitionId: appId
            } : {
                latest: true
            };
            return rxjs.from(this.processDefinitionsApi.getProcessDefinitions(opts))
                .pipe(operators.map(this.extractData), operators.map(function (processDefs) { return processDefs.map(function (pd) { return new ProcessDefinitionRepresentation(pd); }); }), operators.catchError(function (err) { return _this.handleProcessError(err); }));
        };
        ProcessService.prototype.startProcess = function (processDefinitionId, name, outcome, startFormValues, variables) {
            var _this = this;
            var startRequest = {
                name: name,
                processDefinitionId: processDefinitionId
            };
            if (outcome) {
                startRequest.outcome = outcome;
            }
            if (startFormValues) {
                startRequest.values = startFormValues;
            }
            if (variables) {
                startRequest.variables = variables;
            }
            return rxjs.from(this.processInstancesApi.startNewProcessInstance(startRequest))
                .pipe(operators.map(function (pd) { return new ProcessInstance(pd); }), operators.catchError(function (err) { return _this.handleProcessError(err); }));
        };
        ProcessService.prototype.cancelProcess = function (processInstanceId) {
            var _this = this;
            return rxjs.from(this.processInstancesApi.deleteProcessInstance(processInstanceId))
                .pipe(operators.catchError(function (err) { return _this.handleProcessError(err); }));
        };
        ProcessService.prototype.getProcessInstanceVariables = function (processInstanceId) {
            var _this = this;
            return rxjs.from(this.processInstanceVariablesApi.getProcessInstanceVariables(processInstanceId))
                .pipe(operators.map(function (processVars) { return processVars.map(function (currentProcessVar) { return new ProcessInstanceVariable(currentProcessVar); }); }), operators.catchError(function (err) { return _this.handleProcessError(err); }));
        };
        ProcessService.prototype.createOrUpdateProcessInstanceVariables = function (processInstanceId, variables) {
            var _this = this;
            return rxjs.from(this.processInstanceVariablesApi.createOrUpdateProcessInstanceVariables(processInstanceId, variables)).pipe(operators.catchError(function (err) { return _this.handleProcessError(err); }));
        };
        ProcessService.prototype.deleteProcessInstanceVariable = function (processInstanceId, variableName) {
            var _this = this;
            return rxjs.from(this.processInstanceVariablesApi.deleteProcessInstanceVariable(processInstanceId, variableName))
                .pipe(operators.catchError(function (err) { return _this.handleProcessError(err); }));
        };
        ProcessService.prototype.extractData = function (res) {
            return res.data || {};
        };
        ProcessService.prototype.handleProcessError = function (error) {
            return rxjs.throwError(error || 'Server error');
        };
        return ProcessService;
    }());
    ProcessService.ɵprov = i0.ɵɵdefineInjectable({ factory: function ProcessService_Factory() { return new ProcessService(i0.ɵɵinject(i1.AlfrescoApiService)); }, token: ProcessService, providedIn: "root" });
    ProcessService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    ProcessService.ctorParameters = function () { return [
        { type: i1.AlfrescoApiService }
    ]; };

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var ProcessInstanceDetailsComponent = /** @class */ (function () {
        function ProcessInstanceDetailsComponent(activitiProcess, logService) {
            this.activitiProcess = activitiProcess;
            this.logService = logService;
            this.showTitle = true;
            this.showRefreshButton = true;
            this.processCancelled = new i0.EventEmitter();
            this.error = new i0.EventEmitter();
            this.taskClick = new i0.EventEmitter();
            this.showProcessDiagram = new i0.EventEmitter();
        }
        ProcessInstanceDetailsComponent.prototype.ngOnChanges = function (changes) {
            var processInstanceId = changes['processInstanceId'];
            if (processInstanceId && !processInstanceId.currentValue) {
                this.reset();
                return;
            }
            if (processInstanceId && processInstanceId.currentValue) {
                this.load(processInstanceId.currentValue);
                return;
            }
        };
        ProcessInstanceDetailsComponent.prototype.reset = function () {
            this.processInstanceDetails = null;
        };
        ProcessInstanceDetailsComponent.prototype.load = function (processId) {
            var _this = this;
            if (processId) {
                this.activitiProcess.getProcess(processId).subscribe(function (res) {
                    _this.processInstanceDetails = res;
                });
            }
        };
        ProcessInstanceDetailsComponent.prototype.isRunning = function () {
            return this.processInstanceDetails && !this.processInstanceDetails.ended;
        };
        ProcessInstanceDetailsComponent.prototype.cancelProcess = function () {
            var _this = this;
            this.activitiProcess.cancelProcess(this.processInstanceId).subscribe(function (data) {
                _this.processCancelled.emit(data);
            }, function (err) {
                _this.error.emit(err);
            });
        };
        ProcessInstanceDetailsComponent.prototype.onTaskClicked = function (event) {
            this.taskClick.emit(event);
        };
        ProcessInstanceDetailsComponent.prototype.getProcessNameOrDescription = function (dateFormat) {
            var name = '';
            if (this.processInstanceDetails) {
                name = this.processInstanceDetails.name ||
                    this.processInstanceDetails.processDefinitionName + ' - ' + this.getFormatDate(this.processInstanceDetails.started, dateFormat);
            }
            return name;
        };
        ProcessInstanceDetailsComponent.prototype.getFormatDate = function (value, format) {
            var datePipe = new common.DatePipe('en-US');
            try {
                return datePipe.transform(value, format);
            }
            catch (err) {
                this.logService.error("ProcessListInstanceHeader: error parsing date " + value + " to format " + format);
            }
        };
        ProcessInstanceDetailsComponent.prototype.onShowProcessDiagram = function () {
            this.showProcessDiagram.emit({ value: this.processInstanceId });
        };
        return ProcessInstanceDetailsComponent;
    }());
    ProcessInstanceDetailsComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'adf-process-instance-details',
                    template: "<div *ngIf=\"!processInstanceDetails\">{{ 'ADF_PROCESS_LIST.DETAILS.MESSAGES.NONE'|translate }}</div>\n<mat-card *ngIf=\"processInstanceDetails\">\n    <mat-card-header>\n        <mat-card-title>{{ getProcessNameOrDescription('medium') }}</mat-card-title>\n    </mat-card-header>\n    <mat-card-content>\n        <adf-process-instance-header\n            #processInstanceHeader\n            [processInstance]=\"processInstanceDetails\"\n            (showProcessDiagram)=\"onShowProcessDiagram()\">\n        </adf-process-instance-header>\n\n        <button\n            class=\"adf-in-medias-res-button\"\n            mat-button id=\"show-diagram-button\"\n            type=\"button\"\n            mat-button mat-raised-button\n            [disabled]=\"!isRunning()\"\n            (click)=\"onShowProcessDiagram()\">{{ 'ADF_PROCESS_LIST.DETAILS.BUTTON.SHOW_DIAGRAM' | translate }}</button>\n\n        <mat-card>\n            <mat-card-content>\n                <adf-process-instance-tasks\n                    #processInstanceTasks\n                    [processInstanceDetails]=\"processInstanceDetails\"\n                    (taskClick)=\"onTaskClicked($event)\">\n                </adf-process-instance-tasks>\n            </mat-card-content>\n        </mat-card>\n\n        <div data-automation-id=\"header-status\" *ngIf=\"isRunning()\" class=\"adf-in-medias-res-button\">\n            <button mat-button type=\"button\" (click)=\"cancelProcess()\">{{ 'ADF_PROCESS_LIST.DETAILS.BUTTON.CANCEL' | translate }}</button>\n        </div>\n\n        <mat-card>\n            <mat-card-content>\n                <adf-process-instance-comments #activitiComments\n                    [readOnly]=\"false\"\n                    [processInstanceId]=\"processInstanceDetails.id\">\n                </adf-process-instance-comments>\n            </mat-card-content>\n        </mat-card>\n\n    </mat-card-content>\n</mat-card>\n",
                    styles: [":host{width:100%}.activiti-process-container{min-height:100px;overflow:visible;padding:10px;width:100%}.adf-comments-dialog{position:fixed;top:50%;transform:translateY(-50%);width:40%}.adf-in-medias-res-button{margin:16px 0}"]
                },] }
    ];
    ProcessInstanceDetailsComponent.ctorParameters = function () { return [
        { type: ProcessService },
        { type: i1.LogService }
    ]; };
    ProcessInstanceDetailsComponent.propDecorators = {
        processInstanceId: [{ type: i0.Input }],
        processInstanceHeader: [{ type: i0.ViewChild, args: ['processInstanceHeader',] }],
        tasksList: [{ type: i0.ViewChild, args: ['processInstanceTasks',] }],
        showTitle: [{ type: i0.Input }],
        showRefreshButton: [{ type: i0.Input }],
        processCancelled: [{ type: i0.Output }],
        error: [{ type: i0.Output }],
        taskClick: [{ type: i0.Output }],
        showProcessDiagram: [{ type: i0.Output }]
    };

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var JSON_FORMAT = 'json';
    var PDF_FORMAT = 'pdf';
    var ProcessAuditDirective = /** @class */ (function () {
        function ProcessAuditDirective(downloadService, processListService) {
            this.downloadService = downloadService;
            this.processListService = processListService;
            this.fileName = 'Audit';
            this.format = 'pdf';
            this.download = true;
            this.clicked = new i0.EventEmitter();
            this.error = new i0.EventEmitter();
        }
        ProcessAuditDirective.prototype.ngOnChanges = function () {
            if (!this.isValidType()) {
                this.setDefaultFormatType();
            }
        };
        ProcessAuditDirective.prototype.isValidType = function () {
            return this.format && (this.isJsonFormat() || this.isPdfFormat());
        };
        ProcessAuditDirective.prototype.setDefaultFormatType = function () {
            this.format = PDF_FORMAT;
        };
        ProcessAuditDirective.prototype.fetchAuditInfo = function () {
            var _this = this;
            if (this.isPdfFormat()) {
                this.processListService.fetchProcessAuditPdfById(this.processId).subscribe(function (blob) {
                    if (_this.download) {
                        _this.downloadService.downloadBlob(blob, _this.fileName + '.pdf');
                    }
                    _this.clicked.emit({ format: _this.format, value: blob, fileName: _this.fileName });
                }, function (err) { return _this.error.emit(err); });
            }
            else {
                this.processListService.fetchProcessAuditJsonById(this.processId).subscribe(function (res) { return _this.clicked.emit({ format: _this.format, value: res, fileName: _this.fileName }); }, function (err) { return _this.error.emit(err); });
            }
        };
        ProcessAuditDirective.prototype.onClickAudit = function () {
            this.fetchAuditInfo();
        };
        ProcessAuditDirective.prototype.isJsonFormat = function () {
            return this.format === JSON_FORMAT;
        };
        ProcessAuditDirective.prototype.isPdfFormat = function () {
            return this.format === PDF_FORMAT;
        };
        return ProcessAuditDirective;
    }());
    ProcessAuditDirective.decorators = [
        { type: i0.Directive, args: [{
                    selector: 'button[adf-process-audit]',
                    host: {
                        'role': 'button',
                        '(click)': 'onClickAudit()'
                    }
                },] }
    ];
    ProcessAuditDirective.ctorParameters = function () { return [
        { type: i1.DownloadService },
        { type: ProcessService }
    ]; };
    ProcessAuditDirective.propDecorators = {
        processId: [{ type: i0.Input, args: ['process-id',] }],
        fileName: [{ type: i0.Input }],
        format: [{ type: i0.Input }],
        download: [{ type: i0.Input }],
        clicked: [{ type: i0.Output }],
        error: [{ type: i0.Output }]
    };

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var ProcessInstanceHeaderComponent = /** @class */ (function () {
        function ProcessInstanceHeaderComponent(translationService, appConfig) {
            this.translationService = translationService;
            this.appConfig = appConfig;
            this.dateFormat = this.appConfig.get('dateValues.defaultDateFormat');
            this.dateLocale = this.appConfig.get('dateValues.defaultDateLocale');
        }
        ProcessInstanceHeaderComponent.prototype.ngOnChanges = function () {
            this.refreshData();
        };
        ProcessInstanceHeaderComponent.prototype.refreshData = function () {
            var _this = this;
            if (this.processInstance) {
                var defaultProperties = this.initDefaultProperties();
                var filteredProperties_1 = this.appConfig.get('adf-process-instance-header.presets.properties');
                this.properties = defaultProperties.filter(function (cardItem) { return _this.isValidSelection(filteredProperties_1, cardItem); });
            }
        };
        ProcessInstanceHeaderComponent.prototype.initDefaultProperties = function () {
            return [
                new i1.CardViewTextItemModel({
                    label: 'ADF_PROCESS_LIST.PROPERTIES.STATUS',
                    value: this.getProcessStatus(),
                    key: 'status'
                }),
                new i1.CardViewDateItemModel({
                    label: 'ADF_PROCESS_LIST.PROPERTIES.END_DATE',
                    value: this.processInstance.ended,
                    format: this.dateFormat,
                    locale: this.dateLocale,
                    key: 'ended',
                    default: this.translationService.instant('ADF_PROCESS_LIST.PROPERTIES.END_DATE_DEFAULT')
                }),
                new i1.CardViewTextItemModel({
                    label: 'ADF_PROCESS_LIST.PROPERTIES.CATEGORY',
                    value: this.processInstance.processDefinitionCategory,
                    key: 'category',
                    default: this.translationService.instant('ADF_PROCESS_LIST.PROPERTIES.CATEGORY_DEFAULT')
                }),
                new i1.CardViewTextItemModel({
                    label: 'ADF_PROCESS_LIST.PROPERTIES.BUSINESS_KEY',
                    value: this.processInstance.businessKey,
                    key: 'businessKey',
                    default: this.translationService.instant('ADF_PROCESS_LIST.PROPERTIES.BUSINESS_KEY_DEFAULT')
                }),
                new i1.CardViewTextItemModel({
                    label: 'ADF_PROCESS_LIST.PROPERTIES.CREATED_BY',
                    value: this.getStartedByFullName(),
                    key: 'createdBy',
                    default: this.translationService.instant('ADF_PROCESS_LIST.PROPERTIES.CREATED_BY_DEFAULT')
                }),
                new i1.CardViewDateItemModel({
                    label: 'ADF_PROCESS_LIST.PROPERTIES.CREATED',
                    value: this.processInstance.started,
                    format: this.dateFormat,
                    locale: this.dateLocale,
                    key: 'created'
                }),
                new i1.CardViewTextItemModel({ label: 'ADF_PROCESS_LIST.PROPERTIES.ID',
                    value: this.processInstance.id,
                    key: 'id'
                }),
                new i1.CardViewTextItemModel({ label: 'ADF_PROCESS_LIST.PROPERTIES.DESCRIPTION',
                    value: this.processInstance.processDefinitionDescription,
                    key: 'description',
                    default: this.translationService.instant('ADF_PROCESS_LIST.PROPERTIES.DESCRIPTION_DEFAULT')
                })
            ];
        };
        ProcessInstanceHeaderComponent.prototype.isValidSelection = function (filteredProperties, cardItem) {
            return filteredProperties ? filteredProperties.indexOf(cardItem.key) >= 0 : true;
        };
        ProcessInstanceHeaderComponent.prototype.getProcessStatus = function () {
            if (this.processInstance) {
                return this.isRunning() ? 'Running' : 'Completed';
            }
            return 'Unknown';
        };
        ProcessInstanceHeaderComponent.prototype.getStartedByFullName = function () {
            var fullName = '';
            if (this.processInstance && this.processInstance.startedBy) {
                fullName += this.processInstance.startedBy.firstName || '';
                fullName += fullName ? ' ' : '';
                fullName += this.processInstance.startedBy.lastName || '';
            }
            return fullName;
        };
        ProcessInstanceHeaderComponent.prototype.isRunning = function () {
            return this.processInstance && !this.processInstance.ended;
        };
        return ProcessInstanceHeaderComponent;
    }());
    ProcessInstanceHeaderComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'adf-process-instance-header',
                    template: "<mat-card *ngIf=\"processInstance\" class=\"adf-card-container\">\n    <mat-card-content>\n        <adf-card-view [properties]=\"properties\"></adf-card-view>\n    </mat-card-content>\n</mat-card>\n",
                    styles: [":host{width:100%}.adf-card-container{font-family:inherit}"]
                },] }
    ];
    ProcessInstanceHeaderComponent.ctorParameters = function () { return [
        { type: i1.TranslationService },
        { type: i1.AppConfigService }
    ]; };
    ProcessInstanceHeaderComponent.propDecorators = {
        processInstance: [{ type: i0.Input }]
    };

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, o) {
        for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
                __createBinding(o, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    /** @deprecated */
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    /** @deprecated */
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    function __spreadArray(to, from, pack) {
        if (pack || arguments.length === 2)
            for (var i = 0, l = from.length, ar; i < l; i++) {
                if (ar || !(i in from)) {
                    if (!ar)
                        ar = Array.prototype.slice.call(from, 0, i);
                    ar[i] = from[i];
                }
            }
        return to.concat(ar || from);
    }
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, state, kind, f) {
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    }
    function __classPrivateFieldSet(receiver, state, value, kind, f) {
        if (kind === "m")
            throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
    }

    var AppDefinitionRepresentationModel = /** @class */ (function () {
        function AppDefinitionRepresentationModel(obj) {
            if (obj) {
                this.defaultAppId = obj.defaultAppId ? obj.defaultAppId : null;
                this.deploymentId = obj.deploymentId ? obj.deploymentId : null;
                this.name = obj.name ? obj.name : null;
                this.description = obj.description ? obj.description : null;
                this.theme = obj.theme ? obj.theme : null;
                this.icon = obj.icon ? obj.icon : null;
                this.id = obj.id ? obj.id : null;
                this.modelId = obj.modelId ? obj.modelId : null;
                this.tenantId = obj.tenantId ? obj.tenantId : null;
            }
        }
        return AppDefinitionRepresentationModel;
    }());
    var FilterParamsModel = /** @class */ (function () {
        function FilterParamsModel(obj) {
            if (obj) {
                this.id = obj.id || null;
                this.name = obj.name || null;
                this.index = obj.index;
            }
        }
        return FilterParamsModel;
    }());
    var FilterRepresentationModel = /** @class */ (function () {
        function FilterRepresentationModel(obj) {
            if (obj) {
                this.id = obj.id || null;
                this.appId = obj.appId || null;
                this.name = obj.name || null;
                this.recent = !!obj.recent;
                this.icon = obj.icon || null;
                this.filter = new jsApi.UserTaskFilterRepresentation(obj.filter);
                this.index = obj.index;
            }
        }
        FilterRepresentationModel.prototype.hasFilter = function () {
            return !!this.filter;
        };
        return FilterRepresentationModel;
    }());
    var TaskQueryRequestRepresentationModel = /** @class */ (function (_super) {
        __extends(TaskQueryRequestRepresentationModel, _super);
        function TaskQueryRequestRepresentationModel() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return TaskQueryRequestRepresentationModel;
    }(jsApi.TaskQueryRepresentation));

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var taskPresetsDefaultModel = {
        'default': [
            {
                'key': 'name',
                'type': 'text',
                'title': 'ADF_TASK_LIST.PROPERTIES.NAME',
                'sortable': true
            },
            {
                'key': 'created',
                'type': 'text',
                'title': 'ADF_TASK_LIST.PROPERTIES.CREATED',
                'cssClass': 'hidden',
                'sortable': true
            },
            {
                'key': 'assignee',
                'type': 'text',
                'title': 'ADF_TASK_LIST.PROPERTIES.ASSIGNEE',
                'cssClass': 'hidden',
                'sortable': true
            }
        ]
    };

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var Form = /** @class */ (function () {
        function Form(id, name) {
            this.name = name;
            this.id = id;
        }
        return Form;
    }());

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var TaskDetailsModel = /** @class */ (function () {
        function TaskDetailsModel(obj) {
            this.processDefinitionVersion = 0;
            if (obj) {
                this.id = obj.id || null;
                this.name = obj.name || null;
                this.priority = obj.priority;
                this.assignee = obj.assignee ? new i1.UserProcessModel(obj.assignee) : null;
                this.adhocTaskCanBeReassigned = obj.adhocTaskCanBeReassigned;
                this.category = obj.category || null;
                this.created = obj.created || null;
                this.description = obj.description || null;
                this.dueDate = obj.dueDate || null;
                this.duration = obj.duration || null;
                this.endDate = obj.endDate || null;
                this.executionId = obj.executionId || null;
                this.formKey = obj.formKey || null;
                this.initiatorCanCompleteTask = !!obj.initiatorCanCompleteTask;
                this.managerOfCandidateGroup = !!obj.managerOfCandidateGroup;
                this.memberOfCandidateGroup = !!obj.memberOfCandidateGroup;
                this.memberOfCandidateUsers = !!obj.memberOfCandidateUsers;
                this.involvedGroups = obj.involvedGroups;
                this.involvedPeople = obj.involvedPeople;
                this.parentTaskId = obj.parentTaskId || null;
                this.parentTaskName = obj.parentTaskName || null;
                this.processDefinitionCategory = obj.processDefinitionCategory || null;
                this.processDefinitionDeploymentId = obj.processDefinitionDeploymentId || null;
                this.processDefinitionDescription = obj.processDefinitionDescription || null;
                this.processDefinitionId = obj.processDefinitionId || null;
                this.processDefinitionKey = obj.processDefinitionKey || null;
                this.processDefinitionName = obj.processDefinitionName || null;
                this.processDefinitionVersion = obj.processDefinitionVersion || 0;
                this.processInstanceId = obj.processInstanceId || null;
                this.processInstanceName = obj.processInstanceName || null;
                this.processInstanceStartUserId = obj.processInstanceStartUserId || null;
                this.taskDefinitionKey = obj.taskDefinitionKey || null;
            }
        }
        TaskDetailsModel.prototype.getFullName = function () {
            var fullName = '';
            if (this.assignee) {
                var firstName = this.assignee.firstName ? this.assignee.firstName : '';
                var lastName = this.assignee.lastName ? this.assignee.lastName : '';
                fullName = firstName + " " + lastName;
            }
            return fullName.trim();
        };
        TaskDetailsModel.prototype.isCompleted = function () {
            return !!this.endDate;
        };
        return TaskDetailsModel;
    }());

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var TaskListModel = /** @class */ (function () {
        function TaskListModel(input) {
            this.data = [];
            if (input) {
                Object.assign(this, input);
                if (input.data) {
                    this.data = input.data.map(function (item) {
                        return new TaskDetailsModel(item);
                    });
                }
            }
        }
        return TaskListModel;
    }());

    var TaskListService = /** @class */ (function () {
        function TaskListService(apiService, logService) {
            this.apiService = apiService;
            this.logService = logService;
        }
        Object.defineProperty(TaskListService.prototype, "modelsApi", {
            get: function () {
                var _a;
                this._modelsApi = (_a = this._modelsApi) !== null && _a !== void 0 ? _a : new jsApi.ModelsApi(this.apiService.getInstance());
                return this._modelsApi;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(TaskListService.prototype, "tasksApi", {
            get: function () {
                var _a;
                this._tasksApi = (_a = this._tasksApi) !== null && _a !== void 0 ? _a : new jsApi.TasksApi(this.apiService.getInstance());
                return this._tasksApi;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(TaskListService.prototype, "taskActionsApi", {
            get: function () {
                var _a;
                this._taskActionsApi = (_a = this._taskActionsApi) !== null && _a !== void 0 ? _a : new jsApi.TaskActionsApi(this.apiService.getInstance());
                return this._taskActionsApi;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(TaskListService.prototype, "checklistsApi", {
            get: function () {
                var _a;
                this._checklistsApi = (_a = this._checklistsApi) !== null && _a !== void 0 ? _a : new jsApi.ChecklistsApi(this.apiService.getInstance());
                return this._checklistsApi;
            },
            enumerable: false,
            configurable: true
        });
        TaskListService.prototype.getFilterForTaskById = function (taskId, filterList) {
            var _this = this;
            return rxjs.from(filterList)
                .pipe(operators.flatMap(function (data) { return _this.isTaskRelatedToFilter(taskId, data); }), operators.filter(function (data) { return data != null; }));
        };
        TaskListService.prototype.generateTaskRequestNodeFromFilter = function (filterModel) {
            var requestNode = {
                appDefinitionId: filterModel.appId,
                assignment: filterModel.filter.assignment,
                state: filterModel.filter.state,
                sort: filterModel.filter.sort
            };
            return new TaskQueryRequestRepresentationModel(requestNode);
        };
        TaskListService.prototype.isTaskRelatedToFilter = function (taskId, filterModel) {
            var _this = this;
            var requestNodeForFilter = this.generateTaskRequestNodeFromFilter(filterModel);
            return rxjs.from(this.callApiTasksFiltered(requestNodeForFilter))
                .pipe(operators.map(function (res) {
                return res.data.find(function (element) { return element.id === taskId; }) ? filterModel : null;
            }), operators.catchError(function (err) { return _this.handleError(err); }));
        };
        TaskListService.prototype.getTasks = function (requestNode) {
            var _this = this;
            return rxjs.from(this.callApiTasksFiltered(requestNode))
                .pipe(operators.catchError(function (err) { return _this.handleError(err); }));
        };
        TaskListService.prototype.findTasksByState = function (requestNode, state) {
            if (state) {
                requestNode.state = state;
            }
            return this.getTasks(requestNode)
                .pipe(operators.catchError(function () { return rxjs.of(new TaskListModel()); }));
        };
        TaskListService.prototype.findAllTaskByState = function (requestNode, state) {
            var _this = this;
            if (state) {
                requestNode.state = state;
            }
            return this.getTotalTasks(requestNode)
                .pipe(operators.switchMap(function (res) {
                requestNode.size = res.total;
                return _this.getTasks(requestNode);
            }));
        };
        TaskListService.prototype.findAllTasksWithoutState = function (requestNode) {
            return rxjs.forkJoin(this.findTasksByState(requestNode, 'open'), this.findAllTaskByState(requestNode, 'completed'), function (activeTasks, completedTasks) {
                var tasks = Object.assign({}, activeTasks);
                tasks.total += completedTasks.total;
                tasks.data = tasks.data.concat(completedTasks.data);
                return tasks;
            });
        };
        TaskListService.prototype.getTaskDetails = function (taskId) {
            var _this = this;
            return rxjs.from(this.callApiTaskDetails(taskId))
                .pipe(operators.map(function (details) {
                return new TaskDetailsModel(details);
            }), operators.catchError(function (err) { return _this.handleError(err); }));
        };
        TaskListService.prototype.getTaskChecklist = function (id) {
            var _this = this;
            return rxjs.from(this.callApiTaskChecklist(id))
                .pipe(operators.map(function (response) {
                var checklists = [];
                response.data.forEach(function (checklist) {
                    checklists.push(new TaskDetailsModel(checklist));
                });
                return checklists;
            }), operators.catchError(function (err) { return _this.handleError(err); }));
        };
        TaskListService.prototype.getFormList = function () {
            var _this = this;
            var opts = {
                'filter': 'myReusableForms',
                'sort': 'modifiedDesc',
                'modelType': 2
            };
            return rxjs.from(this.modelsApi.getModels(opts))
                .pipe(operators.map(function (response) {
                var forms = [];
                response.data.forEach(function (form) {
                    forms.push(new Form(form.id, form.name));
                });
                return forms;
            }), operators.catchError(function (err) { return _this.handleError(err); }));
        };
        TaskListService.prototype.attachFormToATask = function (taskId, formId) {
            var _this = this;
            return rxjs.from(this.taskActionsApi.attachForm(taskId, { 'formId': formId }))
                .pipe(operators.catchError(function (err) { return _this.handleError(err); }));
        };
        TaskListService.prototype.addTask = function (task) {
            var _this = this;
            return rxjs.from(this.callApiAddTask(task))
                .pipe(operators.map(function (response) {
                return new TaskDetailsModel(response);
            }), operators.catchError(function (err) { return _this.handleError(err); }));
        };
        TaskListService.prototype.deleteTask = function (taskId) {
            var _this = this;
            return rxjs.from(this.callApiDeleteTask(taskId))
                .pipe(operators.catchError(function (err) { return _this.handleError(err); }));
        };
        TaskListService.prototype.deleteForm = function (taskId) {
            var _this = this;
            return rxjs.from(this.callApiDeleteForm(taskId))
                .pipe(operators.catchError(function (err) { return _this.handleError(err); }));
        };
        TaskListService.prototype.completeTask = function (taskId) {
            var _this = this;
            return rxjs.from(this.taskActionsApi.completeTask(taskId))
                .pipe(operators.catchError(function (err) { return _this.handleError(err); }));
        };
        TaskListService.prototype.getTotalTasks = function (requestNode) {
            var _this = this;
            requestNode.size = 0;
            return rxjs.from(this.callApiTasksFiltered(requestNode))
                .pipe(operators.catchError(function (err) { return _this.handleError(err); }));
        };
        TaskListService.prototype.createNewTask = function (task) {
            var _this = this;
            return rxjs.from(this.callApiCreateTask(task))
                .pipe(operators.map(function (response) {
                return new TaskDetailsModel(response);
            }), operators.catchError(function (err) { return _this.handleError(err); }));
        };
        TaskListService.prototype.assignTask = function (taskId, requestNode) {
            var _this = this;
            var assignee = { assignee: requestNode.id };
            return rxjs.from(this.callApiAssignTask(taskId, assignee))
                .pipe(operators.map(function (response) {
                return new TaskDetailsModel(response);
            }), operators.catchError(function (err) { return _this.handleError(err); }));
        };
        TaskListService.prototype.assignTaskByUserId = function (taskId, userId) {
            var _this = this;
            var assignee = { assignee: userId };
            return rxjs.from(this.callApiAssignTask(taskId, assignee))
                .pipe(operators.map(function (response) {
                return new TaskDetailsModel(response);
            }), operators.catchError(function (err) { return _this.handleError(err); }));
        };
        TaskListService.prototype.claimTask = function (taskId) {
            var _this = this;
            return rxjs.from(this.taskActionsApi.claimTask(taskId))
                .pipe(operators.catchError(function (err) { return _this.handleError(err); }));
        };
        TaskListService.prototype.unclaimTask = function (taskId) {
            var _this = this;
            return rxjs.from(this.taskActionsApi.unclaimTask(taskId))
                .pipe(operators.catchError(function (err) { return _this.handleError(err); }));
        };
        TaskListService.prototype.updateTask = function (taskId, updated) {
            var _this = this;
            return rxjs.from(this.tasksApi.updateTask(taskId, updated))
                .pipe(operators.map(function (result) { return result; }), operators.catchError(function (err) { return _this.handleError(err); }));
        };
        TaskListService.prototype.fetchTaskAuditPdfById = function (taskId) {
            var _this = this;
            return rxjs.from(this.tasksApi.getTaskAuditPdf(taskId))
                .pipe(operators.map(function (data) { return data; }), operators.catchError(function (err) { return _this.handleError(err); }));
        };
        TaskListService.prototype.fetchTaskAuditJsonById = function (taskId) {
            var _this = this;
            return rxjs.from(this.tasksApi.getTaskAuditLog(taskId))
                .pipe(operators.catchError(function (err) { return _this.handleError(err); }));
        };
        TaskListService.prototype.callApiTasksFiltered = function (requestNode) {
            return this.tasksApi.listTasks(requestNode);
        };
        TaskListService.prototype.callApiTaskDetails = function (taskId) {
            return this.tasksApi.getTask(taskId);
        };
        TaskListService.prototype.callApiAddTask = function (task) {
            return this.checklistsApi.addSubtask(task.parentTaskId, task);
        };
        TaskListService.prototype.callApiDeleteTask = function (taskId) {
            return this.tasksApi.deleteTask(taskId);
        };
        TaskListService.prototype.callApiDeleteForm = function (taskId) {
            return this.taskActionsApi.removeForm(taskId);
        };
        TaskListService.prototype.callApiTaskChecklist = function (taskId) {
            return this.checklistsApi.getChecklist(taskId);
        };
        TaskListService.prototype.callApiCreateTask = function (task) {
            return this.tasksApi.createNewTask(task);
        };
        TaskListService.prototype.callApiAssignTask = function (taskId, requestNode) {
            return this.taskActionsApi.assignTask(taskId, requestNode);
        };
        TaskListService.prototype.handleError = function (error) {
            this.logService.error(error);
            return rxjs.throwError(error || 'Server error');
        };
        return TaskListService;
    }());
    TaskListService.ɵprov = i0.ɵɵdefineInjectable({ factory: function TaskListService_Factory() { return new TaskListService(i0.ɵɵinject(i1.AlfrescoApiService), i0.ɵɵinject(i1.LogService)); }, token: TaskListService, providedIn: "root" });
    TaskListService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    TaskListService.ctorParameters = function () { return [
        { type: i1.AlfrescoApiService },
        { type: i1.LogService }
    ]; };

    var TaskListComponent = /** @class */ (function (_super) {
        __extends(TaskListComponent, _super);
        function TaskListComponent(taskListService, appConfigService, userPreferences) {
            var _this = _super.call(this, appConfigService, TaskListComponent.PRESET_KEY, taskPresetsDefaultModel) || this;
            _this.taskListService = taskListService;
            _this.userPreferences = userPreferences;
            _this.selectionMode = 'single';
            _this.multiselect = false;
            _this.selectFirstRow = true;
            _this.showContextMenu = false;
            _this.stickyHeader = false;
            _this.showRowContextMenu = new i0.EventEmitter();
            _this.rowClick = new i0.EventEmitter();
            _this.rowsSelected = new i0.EventEmitter();
            _this.success = new i0.EventEmitter();
            _this.error = new i0.EventEmitter();
            _this.page = 0;
            _this.size = i1.PaginationComponent.DEFAULT_PAGINATION.maxItems;
            _this.rows = [];
            _this.isLoading = true;
            _this.sorting = ['created', 'desc'];
            _this.hasCustomDataSource = false;
            _this.onDestroy$ = new rxjs.Subject();
            _this.pagination = new rxjs.BehaviorSubject({
                maxItems: _this.size,
                skipCount: 0,
                totalItems: 0
            });
            return _this;
        }
        TaskListComponent.prototype.ngAfterContentInit = function () {
            this.createDatatableSchema();
            if (this.data && this.data.getColumns().length === 0) {
                this.data.setColumns(this.columns);
            }
            if (this.appId) {
                this.reload();
            }
        };
        TaskListComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.userPreferences
                .select(i1.UserPreferenceValues.PaginationSize)
                .pipe(operators.takeUntil(this.onDestroy$))
                .subscribe(function (pageSize) { return _this.size = pageSize; });
        };
        TaskListComponent.prototype.ngOnDestroy = function () {
            this.onDestroy$.next(true);
            this.onDestroy$.complete();
        };
        TaskListComponent.prototype.setCustomDataSource = function (rows) {
            if (rows) {
                this.rows = rows;
                this.hasCustomDataSource = true;
            }
        };
        TaskListComponent.prototype.ngOnChanges = function (changes) {
            if (this.isPropertyChanged(changes)) {
                if (this.isSortChanged(changes)) {
                    this.sorting = this.sort ? this.sort.split('-') : this.sorting;
                }
                this.reload();
            }
            var presetColumnChanges = changes['presetColumn'];
            if (presetColumnChanges && !presetColumnChanges.firstChange) {
                this.columns = this.mergeJsonAndHtmlSchema();
            }
        };
        TaskListComponent.prototype.isSortChanged = function (changes) {
            var actualSort = changes['sort'];
            return actualSort && actualSort.currentValue && actualSort.currentValue !== actualSort.previousValue;
        };
        TaskListComponent.prototype.isPropertyChanged = function (changes) {
            var changed = true;
            var landingTaskId = changes['landingTaskId'];
            var page = changes['page'];
            var size = changes['size'];
            if (landingTaskId && landingTaskId.currentValue && this.isEqualToCurrentId(landingTaskId.currentValue)) {
                changed = false;
            }
            else if (page && page.currentValue !== page.previousValue) {
                changed = true;
            }
            else if (size && size.currentValue !== size.previousValue) {
                changed = true;
            }
            return changed;
        };
        TaskListComponent.prototype.reload = function () {
            if (!this.hasCustomDataSource) {
                this.requestNode = this.createRequestNode();
                this.load();
            }
            else {
                this.isLoading = false;
            }
        };
        TaskListComponent.prototype.load = function () {
            var _this = this;
            this.isLoading = true;
            this.loadTasksByState()
                .pipe(operators.finalize(function () { return _this.isLoading = false; }))
                .subscribe(function (tasks) {
                _this.rows = _this.optimizeTaskDetails(tasks.data);
                _this.selectTask(_this.landingTaskId);
                _this.success.emit(tasks);
                _this.pagination.next({
                    count: tasks.data.length,
                    maxItems: _this.size,
                    skipCount: _this.page * _this.size,
                    totalItems: tasks.total
                });
            }, function (error) {
                _this.error.emit(error);
            });
        };
        TaskListComponent.prototype.loadTasksByState = function () {
            return this.requestNode.state === 'all'
                ? this.taskListService.findAllTasksWithoutState(this.requestNode)
                : this.taskListService.findTasksByState(this.requestNode);
        };
        TaskListComponent.prototype.selectTask = function (taskIdSelected) {
            if (!this.isListEmpty()) {
                var dataRow = null;
                if (taskIdSelected) {
                    dataRow = this.rows.find(function (currentRow) {
                        return currentRow['id'] === taskIdSelected;
                    });
                }
                if (!dataRow && this.selectFirstRow) {
                    dataRow = this.rows[0];
                }
                if (dataRow) {
                    dataRow.isSelected = true;
                    this.currentInstanceId = dataRow['id'];
                }
            }
            else {
                this.currentInstanceId = null;
            }
        };
        TaskListComponent.prototype.getCurrentId = function () {
            return this.currentInstanceId;
        };
        TaskListComponent.prototype.isEqualToCurrentId = function (taskId) {
            return this.currentInstanceId === taskId;
        };
        TaskListComponent.prototype.isListEmpty = function () {
            return !this.rows || this.rows.length === 0;
        };
        TaskListComponent.prototype.onRowClick = function (item) {
            this.currentInstanceId = item.value.getValue('id');
            this.rowClick.emit(this.currentInstanceId);
        };
        TaskListComponent.prototype.onRowSelect = function (event) {
            this.selectedInstances = __spread(event.detail.selection);
            this.rowsSelected.emit(this.selectedInstances);
        };
        TaskListComponent.prototype.onRowUnselect = function (event) {
            this.selectedInstances = __spread(event.detail.selection);
            this.rowsSelected.emit(this.selectedInstances);
        };
        TaskListComponent.prototype.onRowKeyUp = function (event) {
            if (event.detail.keyboardEvent.key === 'Enter') {
                event.preventDefault();
                this.currentInstanceId = event.detail.row.getValue('id');
                this.rowClick.emit(this.currentInstanceId);
            }
        };
        TaskListComponent.prototype.onShowRowContextMenu = function (event) {
            this.showRowContextMenu.emit(event);
        };
        TaskListComponent.prototype.optimizeTaskDetails = function (instances) {
            instances = instances.map(function (task) {
                if (!task.name) {
                    task.name = 'No name';
                }
                return task;
            });
            return instances;
        };
        TaskListComponent.prototype.createRequestNode = function () {
            var requestNode = {
                appDefinitionId: this.appId,
                dueAfter: this.dueAfter ? moment$1(this.dueAfter).toDate() : null,
                dueBefore: this.dueBefore ? moment$1(this.dueBefore).toDate() : null,
                processInstanceId: this.processInstanceId,
                processDefinitionId: this.processDefinitionId,
                text: this.name,
                assignment: this.assignment,
                state: this.state,
                sort: this.sort,
                page: this.page,
                size: this.size,
                start: this.start,
                taskId: this.taskId,
                includeProcessInstance: this.includeProcessInstance
            };
            return new TaskQueryRequestRepresentationModel(requestNode);
        };
        TaskListComponent.prototype.updatePagination = function (params) {
            var needsReload = params.maxItems || params.skipCount;
            this.size = params.maxItems;
            this.page = this.currentPage(params.skipCount, params.maxItems);
            if (needsReload) {
                this.reload();
            }
        };
        TaskListComponent.prototype.currentPage = function (skipCount, maxItems) {
            return (skipCount && maxItems) ? Math.floor(skipCount / maxItems) : 0;
        };
        return TaskListComponent;
    }(i1.DataTableSchema));
    TaskListComponent.PRESET_KEY = 'adf-task-list.presets';
    TaskListComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'adf-tasklist',
                    template: "<div *ngIf=\"!requestNode\">{{ 'ADF_TASK_LIST.FILTERS.MESSAGES.NONE' | translate }}</div>\n<ng-container *ngIf=\"requestNode\">\n        <adf-datatable\n            [data]=\"data\"\n            [rows]=\"rows\"\n            [columns]=\"columns\"\n            [sorting]=\"sorting\"\n            [loading]=\"isLoading\"\n            [stickyHeader]=\"stickyHeader\"\n            [multiselect]=\"multiselect\"\n            [selectionMode]=\"selectionMode\"\n            [contextMenu]=\"showContextMenu\"\n            (showRowContextMenu)=\"onShowRowContextMenu($event)\"\n            (row-select)=\"onRowSelect($any($event))\"\n            (row-unselect)=\"onRowUnselect($any($event))\"\n            (rowClick)=\"onRowClick($any($event))\"\n            (row-keyup)=\"onRowKeyUp($any($event))\">\n            <adf-loading-content-template>\n                <ng-template>\n                    <!--Add your custom loading template here-->\n                    <mat-progress-spinner\n                        *ngIf=\"!customLoadingContent\"\n                        class=\"adf-task-list-loading-margin\"\n                        color=\"primary\"\n                        mode=\"indeterminate\">\n                    </mat-progress-spinner>\n                    <ng-content select=\"adf-custom-loading-content-template\"></ng-content>\n                </ng-template>\n            </adf-loading-content-template>\n            <adf-no-content-template>\n                <ng-template>\n                    <adf-empty-content *ngIf=\"!customEmptyContent\"\n                        icon=\"assignment\"\n                        [title]=\"'ADF_TASK_LIST.LIST.MESSAGES.TITLE' | translate\"\n                        [subtitle]=\"'ADF_TASK_LIST.LIST.MESSAGES.SUBTITLE' | translate\">\n                    </adf-empty-content>\n                    <ng-content select=\"adf-custom-empty-content-template\"></ng-content>\n                </ng-template>\n            </adf-no-content-template>\n        </adf-datatable>\n</ng-container>\n",
                    styles: [".adf-task-list-loading-margin{margin-left:calc(50% - 50px);margin-right:calc(50% - 50px)}"]
                },] }
    ];
    TaskListComponent.ctorParameters = function () { return [
        { type: TaskListService },
        { type: i1.AppConfigService },
        { type: i1.UserPreferencesService }
    ]; };
    TaskListComponent.propDecorators = {
        customEmptyContent: [{ type: i0.ContentChild, args: [i1.CustomEmptyContentTemplateDirective,] }],
        customLoadingContent: [{ type: i0.ContentChild, args: [i1.CustomLoadingContentTemplateDirective,] }],
        appId: [{ type: i0.Input }],
        processInstanceId: [{ type: i0.Input }],
        processDefinitionId: [{ type: i0.Input }],
        state: [{ type: i0.Input }],
        assignment: [{ type: i0.Input }],
        sort: [{ type: i0.Input }],
        name: [{ type: i0.Input }],
        landingTaskId: [{ type: i0.Input }],
        data: [{ type: i0.Input }],
        selectionMode: [{ type: i0.Input }],
        multiselect: [{ type: i0.Input }],
        selectFirstRow: [{ type: i0.Input }],
        taskId: [{ type: i0.Input }],
        includeProcessInstance: [{ type: i0.Input }],
        start: [{ type: i0.Input }],
        showContextMenu: [{ type: i0.Input }],
        stickyHeader: [{ type: i0.Input }],
        showRowContextMenu: [{ type: i0.Output }],
        rowClick: [{ type: i0.Output }],
        rowsSelected: [{ type: i0.Output }],
        success: [{ type: i0.Output }],
        error: [{ type: i0.Output }],
        page: [{ type: i0.Input }],
        size: [{ type: i0.Input }],
        dueAfter: [{ type: i0.Input }],
        dueBefore: [{ type: i0.Input }]
    };

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var ChecklistComponent = /** @class */ (function () {
        function ChecklistComponent(activitiTaskList, dialog) {
            this.activitiTaskList = activitiTaskList;
            this.dialog = dialog;
            this.readOnly = false;
            this.checklistTaskCreated = new i0.EventEmitter();
            this.checklistTaskDeleted = new i0.EventEmitter();
            this.error = new i0.EventEmitter();
            this.checklist = [];
        }
        ChecklistComponent.prototype.ngOnChanges = function (changes) {
            var taskId = changes['taskId'];
            if (taskId && taskId.currentValue) {
                this.getTaskChecklist();
                return;
            }
        };
        ChecklistComponent.prototype.getTaskChecklist = function () {
            var _this = this;
            this.checklist = [];
            if (this.taskId) {
                this.activitiTaskList.getTaskChecklist(this.taskId).subscribe(function (taskDetailsModel) {
                    taskDetailsModel.forEach(function (task) {
                        _this.checklist.push(task);
                    });
                }, function (error) {
                    _this.error.emit(error);
                });
            }
            else {
                this.checklist = [];
            }
        };
        ChecklistComponent.prototype.showDialog = function () {
            this.dialog.open(this.addNewDialog, { width: '350px' });
        };
        ChecklistComponent.prototype.add = function () {
            var _this = this;
            var newTask = new TaskDetailsModel({
                name: this.taskName,
                parentTaskId: this.taskId,
                assignee: { id: this.assignee }
            });
            this.activitiTaskList.addTask(newTask).subscribe(function (taskDetailsModel) {
                _this.checklist.push(taskDetailsModel);
                _this.checklistTaskCreated.emit(taskDetailsModel);
                _this.taskName = '';
            }, function (error) {
                _this.error.emit(error);
            });
            this.cancel();
        };
        ChecklistComponent.prototype.delete = function (taskId) {
            var _this = this;
            this.activitiTaskList.deleteTask(taskId).subscribe(function () {
                _this.checklist = _this.checklist.filter(function (check) { return check.id !== taskId; });
                _this.checklistTaskDeleted.emit(taskId);
            }, function (error) {
                _this.error.emit(error);
            });
        };
        ChecklistComponent.prototype.cancel = function () {
            this.dialog.closeAll();
            this.taskName = '';
        };
        return ChecklistComponent;
    }());
    ChecklistComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'adf-checklist',
                    template: "<div class=\"adf-checklist-control\">\n    <mat-chip-list data-automation-id=\"checklist-label\">\n        <span class=\"adf-activiti-label\">{{ 'ADF_TASK_LIST.DETAILS.LABELS.CHECKLIST' | translate }}</span>\n        <mat-chip class=\"adf-process-badge\" color=\"accent\" selected=\"true\">{{checklist?.length}}</mat-chip>\n    </mat-chip-list>\n\n\n    <button mat-icon-button *ngIf=\"!readOnly\" matTooltip=\"Add a checklist\" [matTooltipPosition]=\"'before'\"\n            id=\"add-checklist\" class=\"adf-add-to-checklist-button\" (click)=\"showDialog()\">\n        <mat-icon>add</mat-icon>\n    </button>\n</div>\n\n<div class=\"adf-checklist-menu-container\" *ngIf=\"checklist?.length > 0\">\n    <mat-chip-list class=\"mat-chip-list-stacked\">\n        <mat-chip id=\"check-{{check.id}}\" class=\"adf-checklist-chip\" *ngFor=\"let check of checklist\"\n                  (removed)=\"delete(check.id)\">\n            <span>{{check.name}}</span>\n            <mat-icon *ngIf=\"!readOnly && !check.endDate\" id=\"remove-{{check.id}}\" matChipRemove>cancel\n            </mat-icon>\n        </mat-chip>\n    </mat-chip-list>\n\n</div>\n<div *ngIf=\"checklist?.length === 0\" id=\"checklist-none-message\" class=\"adf-checklist-none-message\">\n    {{ 'ADF_TASK_LIST.DETAILS.CHECKLIST.NONE' | translate }}\n</div>\n\n<ng-template #dialog>\n    <div class=\"adf-checklist-dialog\" id=\"checklist-dialog\">\n        <h4 matDialogTitle id=\"add-checklist-title\">{{ 'ADF_TASK_LIST.DETAILS.CHECKLIST.DIALOG.TITLE' | translate }}</h4>\n        <mat-dialog-content>\n            <mat-form-field>\n                <input matInput placeholder=\"{{ 'ADF_TASK_LIST.DETAILS.CHECKLIST.DIALOG.PLACEHOLDER' | translate }}\" [(ngModel)]=\"taskName\" id=\"checklist-name\"\n                       data-automation-id=\"checklist-name\">\n            </mat-form-field>\n        </mat-dialog-content>\n        <mat-dialog-actions class=\"adf-checklist-dialog-actions\">\n            <button mat-button type=\"button\" id=\"close-check-dialog\" (click)=\"cancel()\">{{ 'ADF_TASK_LIST.DETAILS.CHECKLIST.DIALOG.CANCEL-BUTTON' | translate | uppercase }}</button>\n            <button mat-button type=\"button\" id=\"add-check\" (click)=\"add()\">{{ 'ADF_TASK_LIST.DETAILS.CHECKLIST.DIALOG.ADD-BUTTON' | translate | uppercase  }}</button>\n        </mat-dialog-actions>\n    </div>\n</ng-template>\n",
                    styles: [":host{width:100%}.adf-activiti-label{font-weight:bolder}.mat-form-field{width:100%}.adf-checklist-cancel-button{float:right;margin-right:-13px;margin-top:-13px}.adf-checklist-chip{outline:none}.adf-checklist-menu-container,.adf-checklist-none-message{margin-top:10px}.adf-checklist-control{display:flex;justify-content:space-between}.adf-checklist-control .adfactiviti-label{margin-right:10px;margin-top:6px}.adf-checklist-control .adf-add-to-checklist-button{float:right}.adf-checklist-dialog-actions{display:flex;justify-content:flex-end}"]
                },] }
    ];
    ChecklistComponent.ctorParameters = function () { return [
        { type: TaskListService },
        { type: i1$1.MatDialog }
    ]; };
    ChecklistComponent.propDecorators = {
        taskId: [{ type: i0.Input }],
        readOnly: [{ type: i0.Input }],
        assignee: [{ type: i0.Input }],
        checklistTaskCreated: [{ type: i0.Output }],
        checklistTaskDeleted: [{ type: i0.Output }],
        error: [{ type: i0.Output }],
        addNewDialog: [{ type: i0.ViewChild, args: ['dialog', { static: true },] }]
    };

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var TaskDescriptionValidator = /** @class */ (function () {
        function TaskDescriptionValidator() {
            this.message = 'ADF_CLOUD_TASK_HEADER.FORM_VALIDATION.INVALID_FIELD';
        }
        TaskDescriptionValidator.prototype.isValid = function (value) {
            var isWhitespace = (value || '').trim().length === 0;
            return value.length === 0 || !isWhitespace;
        };
        return TaskDescriptionValidator;
    }());

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var TaskHeaderComponent = /** @class */ (function () {
        function TaskHeaderComponent(bpmUserService, translationService, appConfig) {
            this.bpmUserService = bpmUserService;
            this.translationService = translationService;
            this.appConfig = appConfig;
            this.formName = null;
            this.showClaimRelease = true;
            this.claim = new i0.EventEmitter();
            this.unclaim = new i0.EventEmitter();
            this.properties = [];
            this.inEdit = false;
            this.displayDateClearAction = false;
            this.dateFormat = this.appConfig.get('dateValues.defaultDateFormat');
            this.dateLocale = this.appConfig.get('dateValues.defaultDateLocale');
        }
        TaskHeaderComponent.prototype.ngOnInit = function () {
            this.loadCurrentBpmUserId();
            this.initData();
        };
        TaskHeaderComponent.prototype.ngOnChanges = function (changes) {
            var _a, _b;
            var taskDetailsChange = changes['taskDetails'];
            if (((_a = taskDetailsChange === null || taskDetailsChange === void 0 ? void 0 : taskDetailsChange.currentValue) === null || _a === void 0 ? void 0 : _a.id) !== ((_b = taskDetailsChange === null || taskDetailsChange === void 0 ? void 0 : taskDetailsChange.previousValue) === null || _b === void 0 ? void 0 : _b.id)) {
                this.initData();
            }
            else {
                this.refreshData();
            }
        };
        TaskHeaderComponent.prototype.initDefaultProperties = function (parentInfoMap) {
            return [
                new i1.CardViewTextItemModel({
                    label: 'ADF_TASK_LIST.PROPERTIES.ASSIGNEE',
                    value: this.taskDetails.getFullName(),
                    key: 'assignee',
                    default: this.translationService.instant('ADF_TASK_LIST.PROPERTIES.ASSIGNEE_DEFAULT'),
                    clickable: !this.isCompleted(),
                    icon: 'create'
                }),
                new i1.CardViewTextItemModel({
                    label: 'ADF_TASK_LIST.PROPERTIES.STATUS',
                    value: this.getTaskStatus(),
                    key: 'status'
                }),
                new i1.CardViewIntItemModel({
                    label: 'ADF_TASK_LIST.PROPERTIES.PRIORITY',
                    value: this.taskDetails.priority,
                    key: 'priority',
                    editable: true,
                    validators: [new i1.CardViewItemLengthValidator(1, 10)]
                }),
                new i1.CardViewDateItemModel({
                    label: 'ADF_TASK_LIST.PROPERTIES.DUE_DATE',
                    value: this.taskDetails.dueDate,
                    key: 'dueDate',
                    default: this.translationService.instant('ADF_TASK_LIST.PROPERTIES.DUE_DATE_DEFAULT'),
                    editable: true,
                    format: this.dateFormat,
                    locale: this.dateLocale
                }),
                new i1.CardViewTextItemModel({
                    label: 'ADF_TASK_LIST.PROPERTIES.CATEGORY',
                    value: this.taskDetails.category,
                    key: 'category',
                    default: this.translationService.instant('ADF_TASK_LIST.PROPERTIES.CATEGORY_DEFAULT')
                }),
                new i1.CardViewMapItemModel({
                    label: 'ADF_TASK_LIST.PROPERTIES.PARENT_NAME',
                    value: parentInfoMap,
                    key: 'parentName',
                    default: this.translationService.instant('ADF_TASK_LIST.PROPERTIES.PARENT_NAME_DEFAULT'),
                    clickable: true
                }),
                new i1.CardViewDateItemModel({
                    label: 'ADF_TASK_LIST.PROPERTIES.CREATED',
                    value: this.taskDetails.created,
                    key: 'created',
                    format: this.dateFormat,
                    locale: this.dateLocale
                }),
                new i1.CardViewTextItemModel({
                    label: 'ADF_TASK_LIST.PROPERTIES.DURATION',
                    value: this.getTaskDuration(),
                    key: 'duration'
                }),
                new i1.CardViewTextItemModel({
                    label: 'ADF_TASK_LIST.PROPERTIES.PARENT_TASK_ID',
                    value: this.taskDetails.parentTaskId,
                    key: 'parentTaskId'
                }),
                new i1.CardViewDateItemModel({
                    label: 'ADF_TASK_LIST.PROPERTIES.END_DATE',
                    value: this.taskDetails.endDate,
                    key: 'endDate',
                    format: this.dateFormat,
                    locale: this.dateLocale
                }),
                new i1.CardViewTextItemModel({
                    label: 'ADF_TASK_LIST.PROPERTIES.ID',
                    value: this.taskDetails.id,
                    key: 'id'
                }),
                new i1.CardViewTextItemModel({
                    label: 'ADF_TASK_LIST.PROPERTIES.DESCRIPTION',
                    value: this.taskDetails.description,
                    key: 'description',
                    default: this.translationService.instant('ADF_TASK_LIST.PROPERTIES.DESCRIPTION_DEFAULT'),
                    multiline: true,
                    editable: true,
                    validators: [new TaskDescriptionValidator()]
                }),
                new i1.CardViewTextItemModel({
                    label: 'ADF_TASK_LIST.PROPERTIES.FORM_NAME',
                    value: this.formName,
                    key: 'formName',
                    default: this.translationService.instant('ADF_TASK_LIST.PROPERTIES.FORM_NAME_DEFAULT'),
                    clickable: this.isFormClickable(),
                    icon: 'create'
                })
            ];
        };
        TaskHeaderComponent.prototype.initData = function () {
            var _this = this;
            if (this.taskDetails) {
                var parentInfoMap = this.getParentInfo();
                var defaultProperties = this.initDefaultProperties(parentInfoMap);
                var filteredProperties_1 = this.appConfig.get('adf-task-header.presets.properties');
                this.properties = defaultProperties.filter(function (cardItem) { return _this.isValidSelection(filteredProperties_1, cardItem); });
            }
        };
        TaskHeaderComponent.prototype.refreshData = function () {
            var _this = this;
            this.properties = this.properties.map(function (cardItem) {
                if (cardItem.key === 'formName' && cardItem.value !== _this.formName) {
                    return new i1.CardViewTextItemModel({
                        label: 'ADF_TASK_LIST.PROPERTIES.FORM_NAME',
                        value: _this.formName,
                        key: 'formName',
                        default: _this.translationService.instant('ADF_TASK_LIST.PROPERTIES.FORM_NAME_DEFAULT'),
                        clickable: _this.isFormClickable(),
                        icon: 'create'
                    });
                }
                else {
                    return cardItem;
                }
            });
        };
        TaskHeaderComponent.prototype.isValidSelection = function (filteredProperties, cardItem) {
            return filteredProperties ? filteredProperties.indexOf(cardItem.key) >= 0 : true;
        };
        TaskHeaderComponent.prototype.loadCurrentBpmUserId = function () {
            var _this = this;
            this.bpmUserService.getCurrentUserInfo().subscribe(function (res) {
                _this.currentUserId = res ? +res.id : null;
            });
        };
        TaskHeaderComponent.prototype.getParentInfo = function () {
            if (this.taskDetails.processInstanceId && this.taskDetails.processDefinitionName) {
                return new Map([[this.taskDetails.processInstanceId, this.taskDetails.processDefinitionName]]);
            }
            return new Map();
        };
        TaskHeaderComponent.prototype.hasAssignee = function () {
            return !!this.taskDetails.assignee;
        };
        TaskHeaderComponent.prototype.isAssignedTo = function (userId) {
            return this.hasAssignee() ? this.taskDetails.assignee.id === userId : false;
        };
        TaskHeaderComponent.prototype.isAssignedToCurrentUser = function () {
            return this.hasAssignee() && this.isAssignedTo(this.currentUserId);
        };
        TaskHeaderComponent.prototype.isCandidateMember = function () {
            return this.taskDetails.managerOfCandidateGroup || this.taskDetails.memberOfCandidateGroup || this.taskDetails.memberOfCandidateUsers;
        };
        TaskHeaderComponent.prototype.isTaskClaimable = function () {
            return !this.hasAssignee() && this.isCandidateMember();
        };
        TaskHeaderComponent.prototype.isTaskClaimedByCandidateMember = function () {
            return this.isCandidateMember() && this.isAssignedToCurrentUser() && !this.isCompleted();
        };
        TaskHeaderComponent.prototype.getTaskStatus = function () {
            return (this.taskDetails && this.taskDetails.isCompleted()) ? 'Completed' : 'Running';
        };
        TaskHeaderComponent.prototype.onClaimTask = function (taskId) {
            this.claim.emit(taskId);
        };
        TaskHeaderComponent.prototype.onUnclaimTask = function (taskId) {
            this.unclaim.emit(taskId);
        };
        TaskHeaderComponent.prototype.isCompleted = function () {
            return this.taskDetails && !!this.taskDetails.endDate;
        };
        TaskHeaderComponent.prototype.isFormClickable = function () {
            return !!this.formName && !this.isCompleted();
        };
        TaskHeaderComponent.prototype.getTaskDuration = function () {
            return this.taskDetails.duration ? this.taskDetails.duration + " ms" : '';
        };
        return TaskHeaderComponent;
    }());
    TaskHeaderComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'adf-task-header',
                    template: "<mat-card *ngIf=\"taskDetails\" class=\"adf-card-container\">\n    <mat-card-content>\n        <adf-card-view [properties]=\"properties\" [editable]=\"!isCompleted()\" [displayClearAction]=\"displayDateClearAction\"></adf-card-view>\n    </mat-card-content>\n\n    <mat-card-actions class=\"adf-controls\" *ngIf=\"showClaimRelease\">\n        <button *ngIf=\"isTaskClaimedByCandidateMember()\" \n            mat-button \n            data-automation-id=\"header-unclaim-button\" \n            id=\"unclaim-task\" \n            class=\"adf-claim-controls\"\n            adf-unclaim-task\n            [taskId]=\"taskDetails.id\"\n            (success)=\"onUnclaimTask($event)\">\n            {{ 'ADF_TASK_LIST.DETAILS.BUTTON.UNCLAIM' | translate }}\n        </button>\n        <button *ngIf=\"isTaskClaimable()\" \n            mat-button \n            data-automation-id=\"header-claim-button\" \n            id=\"claim-task\" \n            class=\"adf-claim-controls\"\n            adf-claim-task\n            [taskId]=\"taskDetails.id\"\n            (success)=\"onClaimTask($event)\">\n            {{ 'ADF_TASK_LIST.DETAILS.BUTTON.CLAIM' | translate }}\n        </button>\n    </mat-card-actions>\n</mat-card>\n",
                    encapsulation: i0.ViewEncapsulation.None,
                    styles: [".adf-controls{display:flex;justify-content:space-between}.adf-edit-controls{display:flex;justify-content:flex-end;margin-left:auto}.adf-save-edit-mode,.adf-switch-to-edit-mode{color:var(--theme-primary-color)}.adf-cancel-edit-mode,.adf-claim-controls{color:#838383}.adf-card-container{font-family:inherit}@media screen and (max-width:959px){adf-card-view .adf-property-value{overflow:hidden;text-overflow:ellipsis;white-space:nowrap}}"]
                },] }
    ];
    TaskHeaderComponent.ctorParameters = function () { return [
        { type: i1.BpmUserService },
        { type: i1.TranslationService },
        { type: i1.AppConfigService }
    ]; };
    TaskHeaderComponent.propDecorators = {
        formName: [{ type: i0.Input }],
        taskDetails: [{ type: i0.Input }],
        showClaimRelease: [{ type: i0.Input }],
        claim: [{ type: i0.Output }],
        unclaim: [{ type: i0.Output }]
    };

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var TaskDetailsComponent = /** @class */ (function () {
        function TaskDetailsComponent(taskListService, peopleProcessService, logService, cardViewUpdateService, dialog) {
            this.taskListService = taskListService;
            this.peopleProcessService = peopleProcessService;
            this.logService = logService;
            this.cardViewUpdateService = cardViewUpdateService;
            this.dialog = dialog;
            this.debugMode = false;
            this.showNextTask = true;
            this.showHeader = true;
            this.showHeaderContent = true;
            this.showInvolvePeople = true;
            this.showComments = true;
            this.showChecklist = true;
            this.showFormTitle = false;
            this.showFormCompleteButton = true;
            this.showFormSaveButton = true;
            this.readOnlyForm = false;
            this.showFormRefreshButton = true;
            this.fieldValidators = [];
            this.formSaved = new i0.EventEmitter();
            this.formCompleted = new i0.EventEmitter();
            this.formContentClicked = new i0.EventEmitter();
            this.formLoaded = new i0.EventEmitter();
            this.taskCreated = new i0.EventEmitter();
            this.taskDeleted = new i0.EventEmitter();
            this.error = new i0.EventEmitter();
            this.executeOutcome = new i0.EventEmitter();
            this.assignTask = new i0.EventEmitter();
            this.claimedTask = new i0.EventEmitter();
            this.unClaimedTask = new i0.EventEmitter();
            this.taskFormName = null;
            this.taskPeople = [];
            this.showAssignee = false;
            this.showAttachForm = false;
            this.internalReadOnlyForm = false;
            this.onDestroy$ = new rxjs.Subject();
        }
        TaskDetailsComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.peopleSearch = new rxjs.Observable(function (observer) { return _this.peopleSearchObserver = observer; }).pipe(operators.share());
            if (this.taskId) {
                this.loadDetails(this.taskId);
            }
            this.cardViewUpdateService.itemUpdated$
                .pipe(operators.takeUntil(this.onDestroy$))
                .subscribe(this.updateTaskDetails.bind(this));
            this.cardViewUpdateService.itemClicked$
                .pipe(operators.takeUntil(this.onDestroy$))
                .subscribe(this.clickTaskDetails.bind(this));
        };
        TaskDetailsComponent.prototype.ngOnDestroy = function () {
            this.onDestroy$.next(true);
            this.onDestroy$.complete();
        };
        TaskDetailsComponent.prototype.ngOnChanges = function (changes) {
            var taskId = changes.taskId;
            this.showAssignee = false;
            if (taskId && !taskId.currentValue) {
                this.reset();
            }
            else if (taskId && taskId.currentValue) {
                this.loadDetails(taskId.currentValue);
            }
        };
        TaskDetailsComponent.prototype.isShowAttachForm = function () {
            return this.showAttachForm;
        };
        TaskDetailsComponent.prototype.reset = function () {
            this.taskDetails = null;
        };
        TaskDetailsComponent.prototype.isTaskActive = function () {
            return this.taskDetails && this.taskDetails.duration === null;
        };
        TaskDetailsComponent.prototype.updateTaskDetails = function (updateNotification) {
            var _this = this;
            this.taskListService
                .updateTask(this.taskId, updateNotification.changed)
                .pipe(operators.catchError(function () {
                _this.cardViewUpdateService.updateElement(updateNotification.target);
                return rxjs.of(null);
            }))
                .subscribe(function () { return _this.loadDetails(_this.taskId); });
        };
        TaskDetailsComponent.prototype.clickTaskDetails = function (clickNotification) {
            if (clickNotification.target.key === 'assignee') {
                this.showAssignee = true;
            }
            if (clickNotification.target.key === 'formName') {
                this.showAttachForm = true;
            }
        };
        TaskDetailsComponent.prototype.loadDetails = function (taskId) {
            var _this = this;
            this.taskPeople = [];
            if (taskId) {
                this.taskListService.getTaskDetails(taskId).subscribe(function (res) {
                    _this.showAttachForm = false;
                    _this.taskDetails = res;
                    if (_this.taskDetails.name === 'null') {
                        _this.taskDetails.name = 'No name';
                    }
                    var endDate = res.endDate;
                    if (endDate && !isNaN(endDate.getTime())) {
                        _this.internalReadOnlyForm = true;
                    }
                    else {
                        _this.internalReadOnlyForm = _this.readOnlyForm;
                    }
                    if (_this.taskDetails && _this.taskDetails.involvedPeople) {
                        _this.taskDetails.involvedPeople.forEach(function (user) {
                            _this.taskPeople.push(new i1.UserProcessModel(user));
                        });
                    }
                });
            }
        };
        TaskDetailsComponent.prototype.isAssigned = function () {
            return !!this.taskDetails.assignee;
        };
        TaskDetailsComponent.prototype.loadNextTask = function (processInstanceId, processDefinitionId) {
            var _this = this;
            var requestNode = new TaskQueryRequestRepresentationModel({
                processInstanceId: processInstanceId,
                processDefinitionId: processDefinitionId
            });
            this.taskListService.getTasks(requestNode).subscribe(function (response) {
                if (response && response.length > 0) {
                    _this.taskDetails = new TaskDetailsModel(response[0]);
                }
                else {
                    _this.reset();
                }
            }, function (error) {
                _this.error.emit(error);
            });
        };
        TaskDetailsComponent.prototype.onComplete = function () {
            this.onFormCompleted(null);
        };
        TaskDetailsComponent.prototype.onShowAttachForm = function () {
            this.showAttachForm = true;
        };
        TaskDetailsComponent.prototype.onCancelAttachForm = function () {
            this.showAttachForm = false;
        };
        TaskDetailsComponent.prototype.onCompleteAttachForm = function () {
            this.taskFormName = null;
            this.showAttachForm = false;
            this.taskFormComponent.loadTask(this.taskId);
            this.loadDetails(this.taskId);
        };
        TaskDetailsComponent.prototype.onFormContentClick = function (content) {
            this.formContentClicked.emit(content);
        };
        TaskDetailsComponent.prototype.onFormSaved = function (form) {
            this.formSaved.emit(form);
        };
        TaskDetailsComponent.prototype.onFormCompleted = function (form) {
            this.formCompleted.emit(form);
            if (this.showNextTask && (this.taskDetails.processInstanceId || this.taskDetails.processDefinitionId)) {
                this.loadNextTask(this.taskDetails.processInstanceId, this.taskDetails.processDefinitionId);
            }
        };
        TaskDetailsComponent.prototype.onFormLoaded = function (form) {
            this.taskFormName = (form && form.name ? form.name : null);
            this.formLoaded.emit(form);
        };
        TaskDetailsComponent.prototype.onChecklistTaskCreated = function (task) {
            this.taskCreated.emit(task);
        };
        TaskDetailsComponent.prototype.onChecklistTaskDeleted = function (taskId) {
            this.taskDeleted.emit(taskId);
        };
        TaskDetailsComponent.prototype.onFormError = function (error) {
            this.errorDialogRef = this.dialog.open(this.errorDialog, { width: '500px' });
            this.error.emit(error);
        };
        TaskDetailsComponent.prototype.onFormExecuteOutcome = function (event) {
            this.executeOutcome.emit(event);
        };
        TaskDetailsComponent.prototype.closeErrorDialog = function () {
            this.dialog.closeAll();
        };
        TaskDetailsComponent.prototype.onClaimAction = function (taskId) {
            this.claimedTask.emit(taskId);
            this.loadDetails(taskId);
        };
        TaskDetailsComponent.prototype.onUnclaimAction = function (taskId) {
            this.unClaimedTask.emit(taskId);
            this.loadDetails(taskId);
        };
        TaskDetailsComponent.prototype.searchUser = function (searchedWord) {
            var _this = this;
            this.peopleProcessService.getWorkflowUsers(null, searchedWord)
                .subscribe(function (users) {
                users = users.filter(function (user) { return user.id !== _this.taskDetails.assignee.id; });
                _this.peopleSearchObserver.next(users);
            }, function () { return _this.logService.error('Could not load users'); });
        };
        TaskDetailsComponent.prototype.onCloseSearch = function () {
            this.showAssignee = false;
        };
        TaskDetailsComponent.prototype.assignTaskToUser = function (selectedUser) {
            var _this = this;
            this.taskListService
                .assignTask(this.taskDetails.id, selectedUser)
                .subscribe(function () {
                _this.logService.info('Task Assigned to ' + selectedUser.email);
                _this.assignTask.emit();
            });
            this.showAssignee = false;
        };
        TaskDetailsComponent.prototype.getTaskHeaderViewClass = function () {
            if (this.showAssignee) {
                return 'assign-edit-view';
            }
            else {
                return 'default-view';
            }
        };
        TaskDetailsComponent.prototype.isReadOnlyComment = function () {
            return (this.taskDetails && this.taskDetails.isCompleted()) && (this.taskPeople && this.taskPeople.length === 0);
        };
        return TaskDetailsComponent;
    }());
    TaskDetailsComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'adf-task-details',
                    template: "<div *ngIf=\"!taskDetails\" data-automation-id=\"adf-tasks-details--empty\">\n    <ng-template *ngIf=\"noTaskDetailsTemplateComponent\" ngFor [ngForOf]=\"[data]\"\n                 [ngForTemplate]=\"noTaskDetailsTemplateComponent\">\n        {{ 'ADF_TASK_LIST.DETAILS.MESSAGES.NONE' | translate }}\n    </ng-template>\n    <div *ngIf=\"!noTaskDetailsTemplateComponent\">\n        {{ 'ADF_TASK_LIST.DETAILS.MESSAGES.NONE' | translate }}\n    </div>\n</div>\n<div *ngIf=\"taskDetails\" class=\"adf-task-details\">\n\n    <div *ngIf=\"showHeader\" class=\"adf-task-details-header\">\n        <h2 class=\"adf-activiti-task-details__header\">\n            <span>{{taskDetails.name || 'No name'}}</span>\n        </h2>\n    </div>\n\n    <div class=\"adf-task-details-core\"\n        fxLayout=\"column\"\n        fxLayoutGap=\"8px\"\n        fxLayout.lt-lg=\"column\">\n\n        <div class=\"adf-task-details-core-form\">\n            <div *ngIf=\"isAssigned()\">\n                <adf-task-form\n                          [taskId]=\"taskDetails.id\"\n                          [showFormTitle]=\"showFormTitle\"\n                          [showFormRefreshButton]=\"showFormRefreshButton\"\n                          [showCancelButton]=\"true\"\n                          [fieldValidators]=\"fieldValidators\"\n                          (formSaved)='onFormSaved($event)'\n                          (formCompleted)='onFormCompleted($event)'\n                          (formContentClicked)='onFormContentClick($event)'\n                          (formLoaded)='onFormLoaded($event)'\n                          (completed)=\"onComplete()\"\n                          (showAttachForm)=\"onShowAttachForm()\"\n                          (executeOutcome)='onFormExecuteOutcome($event)'\n                          (taskClaimed)=\"onClaimAction($event)\"\n                          (taskUnclaimed)=\"onUnclaimAction($event)\"\n                          (error)=\"onFormError($event)\" #activitiTaskForm>\n                </adf-task-form>\n                <adf-attach-form *ngIf=\"isShowAttachForm()\"\n                                 [taskId]=\"taskDetails.id\"\n                                 [formKey]=\"taskDetails.formKey\"\n                                 (cancelAttachForm)=\"onCancelAttachForm()\"\n                                 (success)=\"onCompleteAttachForm()\">\n                </adf-attach-form>\n            </div>\n            <div *ngIf=\"!isAssigned()\" id=\"claim-message-id\">\n                {{ 'ADF_TASK_LIST.DETAILS.MESSAGES.CLAIM' | translate }}\n            </div>\n        </div>\n        <div class=\"adf-task-details-core-sidebar\">\n            <adf-info-drawer *ngIf=\"showHeaderContent\" title=\"ADF_TASK_LIST.DETAILS.LABELS.INFO_DRAWER_TITLE\" id=\"adf-task-details-core-sidebar-drawer\" class=\"adf-task-details-core-sidebar-drawer\">\n                <adf-info-drawer-tab label=\"ADF_TASK_LIST.DETAILS.LABELS.INFO_DRAWER_TAB_DETAILS_TITLE\">\n                    <div class=\"adf-assignment-container\" *ngIf=\"showAssignee\">\n                        <adf-people-search\n                            (searchPeople)=\"searchUser($event)\"\n                            (success)=\"assignTaskToUser($event)\"\n                            (closeSearch)=\"onCloseSearch()\"\n                            [results]=\"peopleSearch\">\n                            <ng-container adf-people-search-title>{{ 'ADF_TASK_LIST.DETAILS.LABELS.ADD_ASSIGNEE' | translate }}\n                            </ng-container>\n                            <ng-container adf-people-search-action-label>{{ 'ADF_TASK_LIST.PEOPLE.ADD_ASSIGNEE' | translate }}\n                            </ng-container>\n                        </adf-people-search>\n                    </div>\n                    <adf-task-header\n                        [class]=\"getTaskHeaderViewClass()\"\n                        [taskDetails]=\"taskDetails\"\n                        [formName]=\"taskFormName\"\n                        (claim)=\"onClaimAction($event)\"\n                        (unclaim)=\"onUnclaimAction($event)\">\n                    </adf-task-header>\n                    <adf-people *ngIf=\"showInvolvePeople\" #people\n                                [people]=\"taskPeople\"\n                                [readOnly]=\"internalReadOnlyForm\"\n                                [taskId]=\"taskDetails.id\">\n                    </adf-people>\n                </adf-info-drawer-tab>\n\n                <adf-info-drawer-tab label=\"ADF_TASK_LIST.DETAILS.LABELS.INFO_DRAWER_TAB_ACTIVITY_TITLE\">\n                    <mat-card *ngIf=\"showComments\">\n                        <mat-card-content>\n                            <adf-comments #activitiComments\n                                          [readOnly]=\"isReadOnlyComment()\"\n                                          [taskId]=\"taskDetails.id\">\n                            </adf-comments>\n                        </mat-card-content>\n                    </mat-card>\n                </adf-info-drawer-tab>\n\n            </adf-info-drawer>\n\n            <div *ngIf=\"showHeaderContent\" class=\"adf-task-details-core-sidebar-checklist\">\n                <div *ngIf=\"showChecklist\">\n                    <adf-checklist #activitiChecklist\n                                   [readOnly]=\"internalReadOnlyForm\"\n                                   [taskId]=\"taskDetails.id\"\n                                   [assignee]=\"$any(taskDetails)?.assignee?.id\"\n                                   (checklistTaskCreated)=\"onChecklistTaskCreated($event)\"\n                                   (checklistTaskDeleted)=\"onChecklistTaskDeleted($event)\">\n                    </adf-checklist>\n                </div>\n            </div>\n        </div>\n    </div>\n\n    <ng-template #errorDialog>\n        <h3 matDialogTitle>{{'ADF_TASK_LIST.DETAILS.ERROR.TITLE'|translate}}</h3>\n        <mat-dialog-content>\n            <p>{{'ADF_TASK_LIST.DETAILS.ERROR.DESCRIPTION'|translate}}</p>\n        </mat-dialog-content>\n        <mat-dialog-actions>\n            <button mat-button type=\"button\" (click)=\"closeErrorDialog()\">{{'ADF_TASK_LIST.DETAILS.ERROR.CLOSE'|translate}}\n            </button>\n        </mat-dialog-actions>\n    </ng-template>\n\n</div>\n",
                    styles: [":host{width:100%}.adf-error-dialog h3{margin:16px 0}.adf-activiti-task-details__header{-moz-user-select:none;-ms-user-select:none;-webkit-user-select:none;align-self:flex-end;cursor:pointer;display:flex;font-size:24px;font-weight:300;line-height:normal;margin:8px 0 16px;overflow:hidden;user-select:none}.adf-activiti-task-details__action-button{text-transform:uppercase}.adf-assignment-container{padding:10px 20px;width:auto}adf-task-header.adf-assign-edit-view ::ng-deep adf-card-view ::ng-deep .adf-property[data-automation-id=header-assignee]{display:none}.adf-task-details-header{display:flex;justify-content:space-between}.adf-task-details-header-toggle{-moz-user-select:none;-ms-user-select:none;-webkit-user-select:none;cursor:pointer;height:23px;margin-right:2px;position:relative;top:10px;user-select:none}.adf-task-details-toggle{position:relative}.adf-task-details-core{display:flex;justify-content:space-between}@media screen and (max-width:1279px){.adf-task-details-core-sidebar-drawer{margin-left:0}}.adf-task-details-core-sidebar-checklist{margin-top:30px;padding-left:20px;padding-right:20px}.adf-task-details-core-form{flex-grow:1}.adf-task-details-core-form ::ng-deep .adf-form-debug-container{display:flex;flex-direction:column;padding:20px 0}.adf-task-details-core-form ::ng-deep .adf-form-debug-container .mat-slide-toggle{margin-left:auto}.adf-task-details-core-form ::ng-deep .adf-form-debug-container .mat-slide-toggle+div{background-color:#000;clear:both;color:#fff;margin-top:30px;padding:20px}.adf-task-details-core-form ::ng-deep .mat-tab-label{flex-grow:1}"]
                },] }
    ];
    TaskDetailsComponent.ctorParameters = function () { return [
        { type: TaskListService },
        { type: i1.PeopleProcessService },
        { type: i1.LogService },
        { type: i1.CardViewUpdateService },
        { type: i1$1.MatDialog }
    ]; };
    TaskDetailsComponent.propDecorators = {
        activitiComments: [{ type: i0.ViewChild, args: ['activitiComments',] }],
        activitiChecklist: [{ type: i0.ViewChild, args: ['activitiChecklist',] }],
        errorDialog: [{ type: i0.ViewChild, args: ['errorDialog',] }],
        taskFormComponent: [{ type: i0.ViewChild, args: ['activitiTaskForm',] }],
        debugMode: [{ type: i0.Input }],
        taskId: [{ type: i0.Input }],
        showNextTask: [{ type: i0.Input }],
        showHeader: [{ type: i0.Input }],
        showHeaderContent: [{ type: i0.Input }],
        showInvolvePeople: [{ type: i0.Input }],
        showComments: [{ type: i0.Input }],
        showChecklist: [{ type: i0.Input }],
        showFormTitle: [{ type: i0.Input }],
        showFormCompleteButton: [{ type: i0.Input }],
        showFormSaveButton: [{ type: i0.Input }],
        readOnlyForm: [{ type: i0.Input }],
        showFormRefreshButton: [{ type: i0.Input }],
        fieldValidators: [{ type: i0.Input }],
        formSaved: [{ type: i0.Output }],
        formCompleted: [{ type: i0.Output }],
        formContentClicked: [{ type: i0.Output }],
        formLoaded: [{ type: i0.Output }],
        taskCreated: [{ type: i0.Output }],
        taskDeleted: [{ type: i0.Output }],
        error: [{ type: i0.Output }],
        executeOutcome: [{ type: i0.Output }],
        assignTask: [{ type: i0.Output }],
        claimedTask: [{ type: i0.Output }],
        unClaimedTask: [{ type: i0.Output }]
    };

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var NoTaskDetailsTemplateDirective = /** @class */ (function () {
        function NoTaskDetailsTemplateDirective(activitiTaskDetails) {
            this.activitiTaskDetails = activitiTaskDetails;
        }
        NoTaskDetailsTemplateDirective.prototype.ngAfterContentInit = function () {
            this.activitiTaskDetails.noTaskDetailsTemplateComponent = this.template;
        };
        return NoTaskDetailsTemplateDirective;
    }());
    NoTaskDetailsTemplateDirective.decorators = [
        { type: i0.Directive, args: [{
                    selector: 'adf-no-task-details-template, no-task-details-template'
                },] }
    ];
    NoTaskDetailsTemplateDirective.ctorParameters = function () { return [
        { type: TaskDetailsComponent }
    ]; };
    NoTaskDetailsTemplateDirective.propDecorators = {
        template: [{ type: i0.ContentChild, args: [i0.TemplateRef,] }]
    };

    var TaskFilterService = /** @class */ (function () {
        function TaskFilterService(apiService, logService) {
            this.apiService = apiService;
            this.logService = logService;
        }
        Object.defineProperty(TaskFilterService.prototype, "userFiltersApi", {
            get: function () {
                var _a;
                this._userFiltersApi = (_a = this._userFiltersApi) !== null && _a !== void 0 ? _a : new jsApi.UserFiltersApi(this.apiService.getInstance());
                return this._userFiltersApi;
            },
            enumerable: false,
            configurable: true
        });
        TaskFilterService.prototype.createDefaultFilters = function (appId) {
            var _this = this;
            var myTasksFilter = this.getMyTasksFilterInstance(appId, 0);
            var myTaskObservable = this.addFilter(myTasksFilter);
            var involvedTasksFilter = this.getInvolvedTasksFilterInstance(appId, 1);
            var involvedObservable = this.addFilter(involvedTasksFilter);
            var queuedTasksFilter = this.getQueuedTasksFilterInstance(appId, 2);
            var queuedObservable = this.addFilter(queuedTasksFilter);
            var completedTasksFilter = this.getCompletedTasksFilterInstance(appId, 3);
            var completeObservable = this.addFilter(completedTasksFilter);
            return new rxjs.Observable(function (observer) {
                rxjs.forkJoin([
                    myTaskObservable,
                    involvedObservable,
                    queuedObservable,
                    completeObservable
                ]).subscribe(function (res) {
                    var filters = [];
                    res.forEach(function (filter) {
                        if (filter.name === involvedTasksFilter.name) {
                            filters.push(new FilterRepresentationModel(Object.assign(Object.assign({}, filter), { filter: involvedTasksFilter.filter, appId: appId })));
                        }
                        else if (filter.name === myTasksFilter.name) {
                            filters.push(new FilterRepresentationModel(Object.assign(Object.assign({}, filter), { filter: myTasksFilter.filter, appId: appId })));
                        }
                        else if (filter.name === queuedTasksFilter.name) {
                            filters.push(new FilterRepresentationModel(Object.assign(Object.assign({}, filter), { filter: queuedTasksFilter.filter, appId: appId })));
                        }
                        else if (filter.name === completedTasksFilter.name) {
                            filters.push(new FilterRepresentationModel(Object.assign(Object.assign({}, filter), { filter: completedTasksFilter.filter, appId: appId })));
                        }
                    });
                    observer.next(filters);
                    observer.complete();
                }, function (err) {
                    _this.logService.error(err);
                });
            });
        };
        TaskFilterService.prototype.getTaskListFilters = function (appId) {
            var _this = this;
            return rxjs.from(this.callApiTaskFilters(appId))
                .pipe(operators.map(function (response) {
                var filters = [];
                response.data.forEach(function (filter) {
                    var filterModel = new FilterRepresentationModel(filter);
                    filters.push(filterModel);
                });
                return filters;
            }), operators.catchError(function (err) { return _this.handleError(err); }));
        };
        TaskFilterService.prototype.getTaskFilterById = function (filterId, appId) {
            var _this = this;
            return rxjs.from(this.callApiTaskFilters(appId)).pipe(operators.map(function (response) { return response.data.find(function (filter) { return filter.id === filterId; }); }), operators.catchError(function (err) { return _this.handleError(err); }));
        };
        TaskFilterService.prototype.getTaskFilterByName = function (taskName, appId) {
            var _this = this;
            return rxjs.from(this.callApiTaskFilters(appId)).pipe(operators.map(function (response) { return response.data.find(function (filter) { return filter.name === taskName; }); }), operators.catchError(function (err) { return _this.handleError(err); }));
        };
        TaskFilterService.prototype.addFilter = function (filter) {
            var _this = this;
            return rxjs.from(this.userFiltersApi.createUserTaskFilter(filter))
                .pipe(operators.map(function (response) {
                return response;
            }), operators.catchError(function (err) { return _this.handleError(err); }));
        };
        TaskFilterService.prototype.callApiTaskFilters = function (appId) {
            if (appId) {
                return this.userFiltersApi.getUserTaskFilters({ appId: appId });
            }
            else {
                return this.userFiltersApi.getUserTaskFilters();
            }
        };
        TaskFilterService.prototype.getMyTasksFilterInstance = function (appId, index) {
            return new FilterRepresentationModel({
                'name': 'My Tasks',
                'appId': appId,
                'recent': false,
                'icon': 'glyphicon-inbox',
                'filter': { 'sort': 'created-desc', 'name': '', 'state': 'open', 'assignment': 'assignee' },
                index: index
            });
        };
        TaskFilterService.prototype.getInvolvedTasksFilterInstance = function (appId, index) {
            return new FilterRepresentationModel({
                'name': 'Involved Tasks',
                'appId': appId,
                'recent': false,
                'icon': 'glyphicon-align-left',
                'filter': { 'sort': 'created-desc', 'name': '', 'state': 'open', 'assignment': 'involved' },
                index: index
            });
        };
        TaskFilterService.prototype.getQueuedTasksFilterInstance = function (appId, index) {
            return new FilterRepresentationModel({
                'name': 'Queued Tasks',
                'appId': appId,
                'recent': false,
                'icon': 'glyphicon-record',
                'filter': { 'sort': 'created-desc', 'name': '', 'state': 'open', 'assignment': 'candidate' },
                index: index
            });
        };
        TaskFilterService.prototype.getCompletedTasksFilterInstance = function (appId, index) {
            return new FilterRepresentationModel({
                'name': 'Completed Tasks',
                'appId': appId,
                'recent': true,
                'icon': 'glyphicon-ok-sign',
                'filter': { 'sort': 'created-desc', 'name': '', 'state': 'completed', 'assignment': 'involved' },
                index: index
            });
        };
        TaskFilterService.prototype.handleError = function (error) {
            this.logService.error(error);
            return rxjs.throwError(error || 'Server error');
        };
        return TaskFilterService;
    }());
    TaskFilterService.ɵprov = i0.ɵɵdefineInjectable({ factory: function TaskFilterService_Factory() { return new TaskFilterService(i0.ɵɵinject(i1.AlfrescoApiService), i0.ɵɵinject(i1.LogService)); }, token: TaskFilterService, providedIn: "root" });
    TaskFilterService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    TaskFilterService.ctorParameters = function () { return [
        { type: i1.AlfrescoApiService },
        { type: i1.LogService }
    ]; };

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var TaskFiltersComponent = /** @class */ (function () {
        function TaskFiltersComponent(taskFilterService, taskListService, appsProcessService) {
            this.taskFilterService = taskFilterService;
            this.taskListService = taskListService;
            this.appsProcessService = appsProcessService;
            this.filterClicked = new i0.EventEmitter();
            this.filterSelected = new i0.EventEmitter();
            this.success = new i0.EventEmitter();
            this.error = new i0.EventEmitter();
            this.filters = [];
        }
        TaskFiltersComponent.prototype.ngOnInit = function () {
            this.iconsMDL = new IconModel();
        };
        TaskFiltersComponent.prototype.ngOnChanges = function (changes) {
            var appName = changes['appName'];
            var appId = changes['appId'];
            var filter = changes['filterParam'];
            if (appName && appName.currentValue) {
                this.getFiltersByAppName(appName.currentValue);
            }
            else if (appId && appId.currentValue !== appId.previousValue) {
                this.getFiltersByAppId(appId.currentValue);
            }
            else if (filter && filter.currentValue !== filter.previousValue) {
                this.selectFilterAndEmit(filter.currentValue);
            }
        };
        TaskFiltersComponent.prototype.getFilters = function (appId, appName) {
            appName ? this.getFiltersByAppName(appName) : this.getFiltersByAppId(appId);
        };
        TaskFiltersComponent.prototype.getFiltersByAppId = function (appId) {
            var _this = this;
            this.taskFilterService.getTaskListFilters(appId).subscribe(function (res) {
                if (res.length === 0 && _this.isFilterListEmpty()) {
                    _this.createFiltersByAppId(appId);
                }
                else {
                    _this.resetFilter();
                    _this.filters = res;
                    _this.selectFilter(_this.filterParam);
                    _this.success.emit(res);
                }
            }, function (err) {
                _this.error.emit(err);
            });
        };
        TaskFiltersComponent.prototype.getFiltersByAppName = function (appName) {
            var _this = this;
            this.appsProcessService.getDeployedApplicationsByName(appName).subscribe(function (application) {
                _this.getFiltersByAppId(application.id);
            }, function (err) {
                _this.error.emit(err);
            });
        };
        TaskFiltersComponent.prototype.createFiltersByAppId = function (appId) {
            var _this = this;
            this.taskFilterService.createDefaultFilters(appId).subscribe(function (resDefault) {
                _this.resetFilter();
                _this.filters = resDefault;
                _this.selectFilter(_this.filterParam);
                _this.success.emit(resDefault);
            }, function (errDefault) {
                _this.error.emit(errDefault);
            });
        };
        TaskFiltersComponent.prototype.selectFilter = function (newFilter) {
            if (newFilter) {
                this.currentFilter = this.filters.find(function (filter, index) { return newFilter.index === index ||
                    newFilter.id === filter.id ||
                    (newFilter.name &&
                        (newFilter.name.toLocaleLowerCase() === filter.name.toLocaleLowerCase())); });
            }
        };
        TaskFiltersComponent.prototype.selectFilterAndEmit = function (newFilter) {
            this.selectFilter(newFilter);
            this.filterSelected.emit(this.currentFilter);
        };
        TaskFiltersComponent.prototype.onFilterClick = function (filter) {
            this.selectFilter(filter);
            this.filterClicked.emit(this.currentFilter);
        };
        TaskFiltersComponent.prototype.selectFilterWithTask = function (taskId) {
            var _this = this;
            var filteredFilterList = [];
            this.taskListService.getFilterForTaskById(taskId, this.filters).subscribe(function (filter) {
                filteredFilterList.push(filter);
            }, function (err) {
                _this.error.emit(err);
            }, function () {
                if (filteredFilterList.length > 0) {
                    _this.selectFilter(filteredFilterList[0]);
                    _this.filterSelected.emit(_this.currentFilter);
                }
            });
        };
        TaskFiltersComponent.prototype.selectDefaultTaskFilter = function () {
            if (!this.isFilterListEmpty()) {
                this.currentFilter = this.filters[0];
            }
        };
        TaskFiltersComponent.prototype.getCurrentFilter = function () {
            return this.currentFilter;
        };
        TaskFiltersComponent.prototype.isFilterListEmpty = function () {
            return this.filters === undefined || (this.filters && this.filters.length === 0);
        };
        TaskFiltersComponent.prototype.resetFilter = function () {
            this.filters = [];
            this.currentFilter = undefined;
        };
        TaskFiltersComponent.prototype.getFilterIcon = function (icon) {
            return this.iconsMDL.mapGlyphiconToMaterialDesignIcons(icon);
        };
        return TaskFiltersComponent;
    }());
    TaskFiltersComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'adf-task-filters',
                    template: "<div *ngFor=\"let filter of filters\" class=\"adf-filters__entry\" [class.adf-active]=\"currentFilter === filter\">\n    <button (click)=\"onFilterClick(filter)\"\n      [attr.aria-label]=\"filter.name | translate\"\n      [id]=\"filter.id\"\n      [attr.data-automation-id]=\"filter.name + '_filter'\"\n      mat-button\n      class=\"adf-filter-action-button adf-full-width\" fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\n      <ng-container *ngIf=\"showIcon\">\n        <adf-icon data-automation-id=\"adf-filter-icon\" [value]=\"getFilterIcon(filter.icon)\"></adf-icon>\n      </ng-container>\n      <span data-automation-id=\"adf-filter-label\" class=\"adf-filter-action-button__label\">{{ filter.name | translate }}</span>\n    </button>\n</div>\n",
                    encapsulation: i0.ViewEncapsulation.None,
                    styles: [".adf-filters__entry{cursor:pointer;font-size:14px!important;font-weight:700;height:24px;opacity:.54;padding:12px 0!important;width:100%}.adf-filters__entry .adf-full-width{display:flex;width:100%}.adf-filters__entry .adf-filter-action-button .adf-filter-action-button__label{margin:0 8px!important;padding-left:20px}.adf-filters__entry.adf-active,.adf-filters__entry:hover{color:var(--theme-primary-color);opacity:1}"]
                },] }
    ];
    TaskFiltersComponent.ctorParameters = function () { return [
        { type: TaskFilterService },
        { type: TaskListService },
        { type: i1.AppsProcessService }
    ]; };
    TaskFiltersComponent.propDecorators = {
        filterParam: [{ type: i0.Input }],
        filterClicked: [{ type: i0.Output }],
        filterSelected: [{ type: i0.Output }],
        success: [{ type: i0.Output }],
        error: [{ type: i0.Output }],
        appId: [{ type: i0.Input }],
        appName: [{ type: i0.Input }],
        showIcon: [{ type: i0.Input }]
    };

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var TaskFormComponent = /** @class */ (function () {
        function TaskFormComponent(taskListService, authService, translationService) {
            this.taskListService = taskListService;
            this.authService = authService;
            this.translationService = translationService;
            this.showFormTitle = false;
            this.showFormCompleteButton = true;
            this.showFormSaveButton = true;
            this.showCancelButton = true;
            this.readOnlyForm = false;
            this.showFormRefreshButton = true;
            this.showFormValidationIcon = true;
            this.fieldValidators = [];
            this.formSaved = new i0.EventEmitter();
            this.formCompleted = new i0.EventEmitter();
            this.formContentClicked = new i0.EventEmitter();
            this.formLoaded = new i0.EventEmitter();
            this.showAttachForm = new i0.EventEmitter();
            this.executeOutcome = new i0.EventEmitter();
            this.completed = new i0.EventEmitter();
            this.formError = new i0.EventEmitter();
            this.error = new i0.EventEmitter();
            this.cancel = new i0.EventEmitter();
            this.taskClaimed = new i0.EventEmitter();
            this.taskUnclaimed = new i0.EventEmitter();
            this.loading = false;
            this.internalReadOnlyForm = false;
        }
        TaskFormComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.authService.getBpmLoggedUser().subscribe(function (user) {
                _this.currentLoggedUser = user;
            });
            this.loadTask(this.taskId);
        };
        TaskFormComponent.prototype.ngOnChanges = function (changes) {
            var taskId = changes['taskId'];
            if (taskId && taskId.currentValue) {
                this.loadTask(this.taskId);
                return;
            }
        };
        TaskFormComponent.prototype.loadTask = function (taskId) {
            var _this = this;
            this.loading = true;
            if (taskId) {
                this.taskListService.getTaskDetails(taskId).subscribe(function (res) {
                    _this.taskDetails = res;
                    if (!_this.taskDetails.name) {
                        _this.taskDetails.name = 'No name';
                    }
                    var endDate = res.endDate;
                    if (endDate && !isNaN(endDate.getTime())) {
                        _this.internalReadOnlyForm = true;
                    }
                    else {
                        _this.internalReadOnlyForm = _this.readOnlyForm;
                    }
                    _this.loading = false;
                });
            }
        };
        TaskFormComponent.prototype.onFormSaved = function (savedForm) {
            this.formSaved.emit(savedForm);
        };
        TaskFormComponent.prototype.onFormCompleted = function (form) {
            this.formCompleted.emit(form);
        };
        TaskFormComponent.prototype.onFormLoaded = function (form) {
            this.formLoaded.emit(form);
        };
        TaskFormComponent.prototype.onFormContentClick = function (content) {
            this.formContentClicked.emit(content);
        };
        TaskFormComponent.prototype.onFormExecuteOutcome = function (outcome) {
            this.executeOutcome.emit(outcome);
        };
        TaskFormComponent.prototype.onFormError = function (error) {
            this.formError.emit(error);
        };
        TaskFormComponent.prototype.onError = function (error) {
            this.error.emit(error);
        };
        TaskFormComponent.prototype.onCompleteTask = function () {
            var _this = this;
            this.taskListService.completeTask(this.taskDetails.id).subscribe(function () { return _this.completed.emit(); }, function (error) { return _this.error.emit(error); });
        };
        TaskFormComponent.prototype.onCancel = function () {
            this.cancel.emit();
        };
        TaskFormComponent.prototype.onShowAttachForm = function () {
            this.showAttachForm.emit();
        };
        TaskFormComponent.prototype.hasFormKey = function () {
            return (this.taskDetails && (!!this.taskDetails.formKey));
        };
        TaskFormComponent.prototype.isStandaloneTask = function () {
            return !(this.taskDetails && (!!this.taskDetails.processDefinitionId));
        };
        TaskFormComponent.prototype.isTaskLoaded = function () {
            return !!this.taskDetails;
        };
        TaskFormComponent.prototype.isCompletedTask = function () {
            return this.taskDetails && this.taskDetails.endDate !== undefined && this.taskDetails.endDate !== null;
        };
        TaskFormComponent.prototype.isCompleteButtonVisible = function () {
            return !this.hasFormKey() && this.isTaskActive() && this.isCompleteButtonEnabled();
        };
        TaskFormComponent.prototype.isTaskActive = function () {
            return this.taskDetails && this.taskDetails.duration === null;
        };
        TaskFormComponent.prototype.isAssigned = function () {
            return !!this.taskDetails.assignee;
        };
        TaskFormComponent.prototype.hasEmailAddress = function () {
            return this.taskDetails.assignee.email ? true : false;
        };
        TaskFormComponent.prototype.isAssignedToMe = function () {
            return this.isAssigned() && this.hasEmailAddress() ?
                this.isEmailEqual() :
                this.isExternalIdEqual();
        };
        TaskFormComponent.prototype.isEmailEqual = function () {
            return (this.taskDetails.assignee && this.currentLoggedUser) && (this.taskDetails.assignee.email.toLocaleLowerCase() === this.currentLoggedUser.email.toLocaleLowerCase());
        };
        TaskFormComponent.prototype.isExternalIdEqual = function () {
            return (this.taskDetails.assignee && this.currentLoggedUser) && (this.taskDetails.assignee.externalId === this.currentLoggedUser.externalId);
        };
        TaskFormComponent.prototype.isCompleteButtonEnabled = function () {
            return this.isAssignedToMe() || this.canInitiatorComplete();
        };
        TaskFormComponent.prototype.canInitiatorComplete = function () {
            return this.taskDetails.initiatorCanCompleteTask;
        };
        TaskFormComponent.prototype.isReadOnlyForm = function () {
            var readOnlyForm;
            if (this.isCandidateMember()) {
                readOnlyForm = this.internalReadOnlyForm || !this.isAssignedToMe();
            }
            else {
                readOnlyForm = this.internalReadOnlyForm || !(this.isAssignedToMe() || this.canCurrentUserAsInitiatorComplete() || this.isCurrentUserInvolved());
            }
            return readOnlyForm;
        };
        TaskFormComponent.prototype.isCurrentUserInvolved = function () {
            var _this = this;
            var _a, _b;
            var isInvolved = false;
            if (this.taskDetails.involvedPeople && this.currentLoggedUser) {
                var userInvolved = this.taskDetails.involvedPeople.find(function (involvedUser) { return involvedUser.email.toLocaleLowerCase() === _this.currentLoggedUser.email.toLocaleLowerCase() ||
                    involvedUser.id + '' === _this.currentLoggedUser.externalId; });
                isInvolved = !!userInvolved;
            }
            if (((_a = this.taskDetails.involvedGroups) === null || _a === void 0 ? void 0 : _a.length) && ((_b = this.currentLoggedUser.groups) === null || _b === void 0 ? void 0 : _b.length) && !isInvolved) {
                var userGroup = this.taskDetails.involvedGroups.find(function (involvedGroup) { return _this.currentLoggedUser.groups.find(function (group) { return group.name === involvedGroup.name.toLocaleLowerCase() || group.id === involvedGroup.id; }); });
                isInvolved = !!userGroup;
            }
            return isInvolved;
        };
        TaskFormComponent.prototype.canCurrentUserAsInitiatorComplete = function () {
            return this.canInitiatorComplete() && this.isProcessInitiator();
        };
        TaskFormComponent.prototype.isProcessInitiator = function () {
            return this.currentLoggedUser && (this.currentLoggedUser.id === +this.taskDetails.processInstanceStartUserId);
        };
        TaskFormComponent.prototype.isSaveButtonVisible = function () {
            return this.showFormSaveButton && (!this.canInitiatorComplete() || this.isAssignedToMe() || this.isCurrentUserInvolved());
        };
        TaskFormComponent.prototype.canCompleteNoFormTask = function () {
            return this.isReadOnlyForm();
        };
        TaskFormComponent.prototype.getCompletedTaskTranslatedMessage = function () {
            return this.translationService.get('ADF_TASK_FORM.COMPLETED_TASK.TITLE', { taskName: this.taskDetails.name });
        };
        TaskFormComponent.prototype.isCandidateMember = function () {
            return this.taskDetails.managerOfCandidateGroup || this.taskDetails.memberOfCandidateGroup || this.taskDetails.memberOfCandidateUsers;
        };
        TaskFormComponent.prototype.isTaskClaimable = function () {
            return this.isCandidateMember() && !this.isAssigned();
        };
        TaskFormComponent.prototype.isTaskClaimedByCandidateMember = function () {
            return this.isCandidateMember() && this.isAssignedToMe() && !this.isCompletedTask();
        };
        TaskFormComponent.prototype.reloadTask = function () {
            this.loadTask(this.taskId);
        };
        TaskFormComponent.prototype.onClaimTask = function (taskId) {
            this.taskClaimed.emit(taskId);
        };
        TaskFormComponent.prototype.onClaimTaskError = function (error) {
            this.error.emit(error);
        };
        TaskFormComponent.prototype.onUnclaimTask = function (taskId) {
            this.taskUnclaimed.emit(taskId);
        };
        TaskFormComponent.prototype.onUnclaimTaskError = function (error) {
            this.error.emit(error);
        };
        return TaskFormComponent;
    }());
    TaskFormComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'adf-task-form',
                    template: "<ng-container *ngIf=\"!loading; else loadingTemplate\">\n  <adf-form *ngIf=\"hasFormKey(); else withoutForm\"\n    [taskId]=\"taskDetails?.id\"\n    [showTitle]=\"showFormTitle\"\n    [showValidationIcon]=\"showFormValidationIcon\"\n    [showRefreshButton]=\"showFormRefreshButton\"\n    [showCompleteButton]=\"showFormCompleteButton\"\n    [showSaveButton]=\"isSaveButtonVisible()\"\n    [disableCompleteButton]=\"!isCompleteButtonEnabled()\"\n    [readOnly]=\"isReadOnlyForm()\"\n    [fieldValidators]=\"fieldValidators\"\n    (formSaved)='onFormSaved($event)'\n    (formCompleted)='onFormCompleted($event)'\n    (formContentClicked)='onFormContentClick($event)'\n    (formLoaded)='onFormLoaded($event)'\n    (formError)='onFormError($event)'\n    (error)='onError($event)'\n    (executeOutcome)='onFormExecuteOutcome($event)'>\n    <adf-form-custom-outcomes>\n        <ng-template [ngTemplateOutlet]=\"taskFormButtons\">\n        </ng-template>\n    </adf-form-custom-outcomes>\n  </adf-form>\n  <ng-template #withoutForm>\n    <adf-task-standalone *ngIf=\"isStandaloneTask(); else emptyFormMessage\"\n        [taskName]=\"taskDetails.name\"\n        [taskId]=\"taskDetails.id\"\n        [isCompleted]=\"isCompletedTask()\"\n        [hasCompletePermission]=\"isCompleteButtonVisible()\"\n        [hideCancelButton]=\"showCancelButton\"\n        (complete)=\"onCompleteTask()\"\n        (showAttachForm)=\"onShowAttachForm()\">\n    </adf-task-standalone>\n      <ng-template #emptyFormMessage>\n        <mat-card class=\"adf-task-form-container\">\n            <mat-card-header>\n                <mat-card-title>\n                    <h4>\n                        <span class=\"adf-form-title\">\n                            {{taskDetails.name}}\n                            <ng-container *ngIf=\"!taskDetails.name\">\n                                {{'FORM.FORM_RENDERER.NAMELESS_TASK' | translate}}\n                            </ng-container>\n                        </span>\n                    </h4>\n                </mat-card-title>\n            </mat-card-header>\n            <mat-card-content>\n                <adf-empty-content *ngIf=\"isCompletedTask(); else emptyFormTemplate\"\n                    [icon]=\"'description'\"\n                    [title]=\"getCompletedTaskTranslatedMessage() | async\"\n                    [subtitle]=\"'ADF_TASK_FORM.COMPLETED_TASK.SUBTITLE'\">\n                </adf-empty-content>\n                <ng-template #emptyFormTemplate>\n                    <adf-empty-content\n                        [icon]=\"'description'\"\n                        [title]=\"'ADF_TASK_LIST.STANDALONE_TASK.NO_FORM_MESSAGE'\"\n                        [subtitle]=\"'ADF_TASK_FORM.EMPTY_FORM.SUBTITLE'\">\n                    </adf-empty-content>\n                </ng-template>\n            </mat-card-content>\n            <mat-card-actions class=\"adf-task-form-actions\">\n                <ng-template [ngTemplateOutlet]=\"taskFormButtons\"></ng-template>\n                <button mat-button\n                    *ngIf=\"!isCompletedTask()\" id=\"adf-no-form-complete-button\"\n                    color=\"primary\"\n                    [disabled]=\"canCompleteNoFormTask()\"\n                    (click)=\"onCompleteTask()\">\n                    {{'ADF_TASK_FORM.EMPTY_FORM.BUTTONS.COMPLETE' | translate}}\n                </button>\n            </mat-card-actions>\n        </mat-card>\n      </ng-template>\n  </ng-template>\n\n  <ng-template #taskFormButtons>\n        <button mat-button id=\"adf-no-form-cancel-button\"\n            *ngIf=\"showCancelButton\"\n            (click)=\"onCancel()\">\n            {{'ADF_TASK_FORM.EMPTY_FORM.BUTTONS.CANCEL' | translate}}\n        </button>\n        <button mat-button data-automation-id=\"adf-task-form-claim-button\"\n            *ngIf=\"isTaskClaimable()\"\n            adf-claim-task\n            [taskId]=\"taskId\"\n            (success)=\"onClaimTask($event)\"\n            (error)=\"onClaimTaskError($event)\">\n            {{ 'ADF_TASK_FORM.EMPTY_FORM.BUTTONS.CLAIM' | translate }}\n        </button>\n        <button mat-button data-automation-id=\"adf-task-form-unclaim-button\"\n            *ngIf=\"isTaskClaimedByCandidateMember()\"\n            adf-unclaim-task\n            [taskId]=\"taskId\"\n            (success)=\"onUnclaimTask($event)\"\n            (error)=\"onUnclaimTaskError($event)\">\n            {{ 'ADF_TASK_FORM.EMPTY_FORM.BUTTONS.UNCLAIM' | translate }}\n        </button>\n  </ng-template>\n</ng-container>\n<ng-template #loadingTemplate>\n  <div fxLayout=\"row\" fxLayoutAlign=\"center stretch\">\n      <mat-spinner></mat-spinner>\n  </div>\n</ng-template>\n",
                    encapsulation: i0.ViewEncapsulation.None,
                    styles: [".adf-task-form-container{overflow:hidden}.adf-task-form-actions{float:right;padding-bottom:25px!important;padding-right:25px!important}.adf-task-form-actions .mat-button{border-radius:5px;height:36px}.adf-task-form-actions .mat-button-wrapper{font-size:var(--theme-body-2-font-size);font-weight:700;height:20px;opacity:.54;width:58px}"]
                },] }
    ];
    TaskFormComponent.ctorParameters = function () { return [
        { type: TaskListService },
        { type: i1.AuthenticationService },
        { type: i1.TranslationService }
    ]; };
    TaskFormComponent.propDecorators = {
        taskId: [{ type: i0.Input }],
        showFormTitle: [{ type: i0.Input }],
        showFormCompleteButton: [{ type: i0.Input }],
        showFormSaveButton: [{ type: i0.Input }],
        showCancelButton: [{ type: i0.Input }],
        readOnlyForm: [{ type: i0.Input }],
        showFormRefreshButton: [{ type: i0.Input }],
        showFormValidationIcon: [{ type: i0.Input }],
        fieldValidators: [{ type: i0.Input }],
        formSaved: [{ type: i0.Output }],
        formCompleted: [{ type: i0.Output }],
        formContentClicked: [{ type: i0.Output }],
        formLoaded: [{ type: i0.Output }],
        showAttachForm: [{ type: i0.Output }],
        executeOutcome: [{ type: i0.Output }],
        completed: [{ type: i0.Output }],
        formError: [{ type: i0.Output }],
        error: [{ type: i0.Output }],
        cancel: [{ type: i0.Output }],
        taskClaimed: [{ type: i0.Output }],
        taskUnclaimed: [{ type: i0.Output }]
    };

    var ClaimTaskDirective = /** @class */ (function () {
        function ClaimTaskDirective(taskListService, logService) {
            this.taskListService = taskListService;
            this.logService = logService;
            this.success = new i0.EventEmitter();
            this.error = new i0.EventEmitter();
            this.invalidParams = [];
        }
        ClaimTaskDirective.prototype.ngOnInit = function () {
            this.validateInputs();
        };
        ClaimTaskDirective.prototype.validateInputs = function () {
            if (!this.isTaskValid()) {
                this.invalidParams.push('taskId');
            }
            if (this.invalidParams.length) {
                throw new Error("Attribute " + this.invalidParams.join(', ') + " is required");
            }
        };
        ClaimTaskDirective.prototype.isTaskValid = function () {
            return this.taskId && this.taskId.length > 0;
        };
        ClaimTaskDirective.prototype.onClick = function () {
            return __awaiter(this, void 0, void 0, function () {
                var error_1;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 2, , 3]);
                            return [4 /*yield*/, this.claimTask()];
                        case 1:
                            _a.sent();
                            return [3 /*break*/, 3];
                        case 2:
                            error_1 = _a.sent();
                            this.error.emit(error_1);
                            return [3 /*break*/, 3];
                        case 3: return [2 /*return*/];
                    }
                });
            });
        };
        ClaimTaskDirective.prototype.claimTask = function () {
            return __awaiter(this, void 0, void 0, function () {
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.taskListService.claimTask(this.taskId).subscribe(function () {
                                _this.logService.info('Task claimed');
                                _this.success.emit(_this.taskId);
                            }, function (error) { return _this.error.emit(error); })];
                        case 1:
                            _a.sent();
                            return [2 /*return*/];
                    }
                });
            });
        };
        return ClaimTaskDirective;
    }());
    ClaimTaskDirective.decorators = [
        { type: i0.Directive, args: [{
                    selector: '[adf-claim-task]'
                },] }
    ];
    ClaimTaskDirective.ctorParameters = function () { return [
        { type: TaskListService },
        { type: i1.LogService }
    ]; };
    ClaimTaskDirective.propDecorators = {
        taskId: [{ type: i0.Input }],
        success: [{ type: i0.Output }],
        error: [{ type: i0.Output }],
        onClick: [{ type: i0.HostListener, args: ['click',] }]
    };

    var UnclaimTaskDirective = /** @class */ (function () {
        function UnclaimTaskDirective(taskListService, logService) {
            this.taskListService = taskListService;
            this.logService = logService;
            this.success = new i0.EventEmitter();
            this.error = new i0.EventEmitter();
            this.invalidParams = [];
        }
        UnclaimTaskDirective.prototype.ngOnInit = function () {
            this.validateInputs();
        };
        UnclaimTaskDirective.prototype.validateInputs = function () {
            if (!this.isTaskValid()) {
                this.invalidParams.push('taskId');
            }
            if (this.invalidParams.length) {
                throw new Error("Attribute " + this.invalidParams.join(', ') + " is required");
            }
        };
        UnclaimTaskDirective.prototype.isTaskValid = function () {
            return this.taskId && this.taskId.length > 0;
        };
        UnclaimTaskDirective.prototype.onClick = function () {
            return __awaiter(this, void 0, void 0, function () {
                var error_1;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 2, , 3]);
                            return [4 /*yield*/, this.unclaimTask()];
                        case 1:
                            _a.sent();
                            return [3 /*break*/, 3];
                        case 2:
                            error_1 = _a.sent();
                            this.error.emit(error_1);
                            return [3 /*break*/, 3];
                        case 3: return [2 /*return*/];
                    }
                });
            });
        };
        UnclaimTaskDirective.prototype.unclaimTask = function () {
            return __awaiter(this, void 0, void 0, function () {
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.taskListService.unclaimTask(this.taskId).subscribe(function () {
                                _this.logService.info('Task unclaimed');
                                _this.success.emit(_this.taskId);
                            }, function (error) { return _this.error.emit(error); })];
                        case 1:
                            _a.sent();
                            return [2 /*return*/];
                    }
                });
            });
        };
        return UnclaimTaskDirective;
    }());
    UnclaimTaskDirective.decorators = [
        { type: i0.Directive, args: [{
                    selector: '[adf-unclaim-task]'
                },] }
    ];
    UnclaimTaskDirective.ctorParameters = function () { return [
        { type: TaskListService },
        { type: i1.LogService }
    ]; };
    UnclaimTaskDirective.propDecorators = {
        taskId: [{ type: i0.Input }],
        success: [{ type: i0.Output }],
        error: [{ type: i0.Output }],
        onClick: [{ type: i0.HostListener, args: ['click',] }]
    };

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var JSON_FORMAT$1 = 'json';
    var PDF_FORMAT$1 = 'pdf';
    var TaskAuditDirective = /** @class */ (function () {
        function TaskAuditDirective(contentService, taskListService) {
            this.contentService = contentService;
            this.taskListService = taskListService;
            this.fileName = 'Audit';
            this.format = 'pdf';
            this.download = true;
            this.clicked = new i0.EventEmitter();
            this.error = new i0.EventEmitter();
        }
        TaskAuditDirective.prototype.ngOnChanges = function () {
            if (!this.isValidType()) {
                this.setDefaultFormatType();
            }
        };
        TaskAuditDirective.prototype.isValidType = function () {
            return this.format && (this.isJsonFormat() || this.isPdfFormat());
        };
        TaskAuditDirective.prototype.setDefaultFormatType = function () {
            this.format = PDF_FORMAT$1;
        };
        TaskAuditDirective.prototype.fetchAuditInfo = function () {
            var _this = this;
            if (this.isPdfFormat()) {
                this.taskListService.fetchTaskAuditPdfById(this.taskId).subscribe(function (blob) {
                    _this.audit = blob;
                    if (_this.download) {
                        _this.contentService.downloadBlob(_this.audit, _this.fileName + '.pdf');
                    }
                    _this.clicked.emit({ format: _this.format, value: _this.audit, fileName: _this.fileName });
                }, function (err) {
                    _this.error.emit(err);
                });
            }
            else {
                this.taskListService.fetchTaskAuditJsonById(this.taskId).subscribe(function (res) {
                    _this.audit = res;
                    _this.clicked.emit({ format: _this.format, value: _this.audit, fileName: _this.fileName });
                }, function (err) {
                    _this.error.emit(err);
                });
            }
        };
        TaskAuditDirective.prototype.onClickAudit = function () {
            this.fetchAuditInfo();
        };
        TaskAuditDirective.prototype.isJsonFormat = function () {
            return this.format === JSON_FORMAT$1;
        };
        TaskAuditDirective.prototype.isPdfFormat = function () {
            return this.format === PDF_FORMAT$1;
        };
        return TaskAuditDirective;
    }());
    TaskAuditDirective.decorators = [
        { type: i0.Directive, args: [{
                    selector: 'button[adf-task-audit]',
                    host: {
                        'role': 'button',
                        '(click)': 'onClickAudit()'
                    }
                },] }
    ];
    TaskAuditDirective.ctorParameters = function () { return [
        { type: i1.ContentService },
        { type: TaskListService }
    ]; };
    TaskAuditDirective.propDecorators = {
        taskId: [{ type: i0.Input, args: ['task-id',] }],
        fileName: [{ type: i0.Input }],
        format: [{ type: i0.Input }],
        download: [{ type: i0.Input }],
        clicked: [{ type: i0.Output }],
        error: [{ type: i0.Output }]
    };

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var ɵ0 = i1.MOMENT_DATE_FORMATS;
    var StartTaskComponent = /** @class */ (function () {
        function StartTaskComponent(taskService, dateAdapter, userPreferencesService, formBuilder, logService) {
            this.taskService = taskService;
            this.dateAdapter = dateAdapter;
            this.userPreferencesService = userPreferencesService;
            this.formBuilder = formBuilder;
            this.logService = logService;
            this.FORMAT_DATE = 'DD/MM/YYYY';
            this.MAX_LENGTH = 255;
            this.name = '';
            this.success = new i0.EventEmitter();
            this.cancel = new i0.EventEmitter();
            this.error = new i0.EventEmitter();
            this.taskDetailsModel = new TaskDetailsModel();
            this.dateError = false;
            this.maxTaskNameLength = this.MAX_LENGTH;
            this.loading = false;
            this.onDestroy$ = new rxjs.Subject();
        }
        StartTaskComponent.prototype.ngOnInit = function () {
            var _this = this;
            if (this.name) {
                this.taskDetailsModel.name = this.name;
            }
            this.validateMaxTaskNameLength();
            this.field = new i1.FormFieldModel(new i1.FormModel(), { id: this.assigneeId, value: this.assigneeId, placeholder: 'Assignee' });
            this.userPreferencesService
                .select(i1.UserPreferenceValues.Locale)
                .pipe(operators.takeUntil(this.onDestroy$))
                .subscribe(function (locale) { return _this.dateAdapter.setLocale(locale); });
            this.loadFormsTask();
            this.buildForm();
        };
        StartTaskComponent.prototype.ngOnDestroy = function () {
            this.onDestroy$.next(true);
            this.onDestroy$.complete();
        };
        StartTaskComponent.prototype.buildForm = function () {
            var _this = this;
            this.taskForm = this.formBuilder.group({
                name: new forms.FormControl(this.taskDetailsModel.name, [forms.Validators.required, forms.Validators.maxLength(this.maxTaskNameLength), this.whitespaceValidator]),
                description: new forms.FormControl('', [this.whitespaceValidator]),
                formKey: new forms.FormControl('')
            });
            this.taskForm.valueChanges
                .pipe(operators.takeUntil(this.onDestroy$))
                .subscribe(function (taskFormValues) { return _this.setTaskDetails(taskFormValues); });
        };
        StartTaskComponent.prototype.whitespaceValidator = function (control) {
            if (control.value) {
                var isWhitespace = (control.value || '').trim().length === 0;
                var isValid = control.value.length === 0 || !isWhitespace;
                return isValid ? null : { 'whitespace': true };
            }
            return null;
        };
        StartTaskComponent.prototype.setTaskDetails = function (form) {
            this.taskDetailsModel.name = form.name;
            this.taskDetailsModel.description = form.description;
            this.taskDetailsModel.formKey = form.formKey ? form.formKey.toString() : null;
        };
        StartTaskComponent.prototype.isFormValid = function () {
            return this.taskForm.valid && !this.dateError && !this.loading;
        };
        StartTaskComponent.prototype.saveTask = function () {
            var _this = this;
            this.loading = true;
            if (this.appId) {
                this.taskDetailsModel.category = this.appId.toString();
            }
            this.taskService.createNewTask(this.taskDetailsModel)
                .pipe(operators.switchMap(function (createRes) { return _this.attachForm(createRes.id, _this.taskDetailsModel.formKey).pipe(operators.defaultIfEmpty(createRes), operators.switchMap(function (attachRes) { return _this.assignTaskByUserId(createRes.id, _this.assigneeId).pipe(operators.defaultIfEmpty(attachRes ? attachRes : createRes)); })); }))
                .subscribe(function (res) {
                _this.loading = false;
                _this.success.emit(res);
            }, function (err) {
                _this.loading = false;
                _this.error.emit(err);
                _this.logService.error('An error occurred while creating new task');
            });
        };
        StartTaskComponent.prototype.getAssigneeId = function (userId) {
            this.assigneeId = userId;
        };
        StartTaskComponent.prototype.attachForm = function (taskId, formKey) {
            var response = rxjs.of();
            if (taskId && formKey) {
                response = this.taskService.attachFormToATask(taskId, parseInt(formKey, 10));
            }
            return response;
        };
        StartTaskComponent.prototype.assignTaskByUserId = function (taskId, userId) {
            var response = rxjs.of();
            if (taskId && userId) {
                response = this.taskService.assignTaskByUserId(taskId, userId);
            }
            return response;
        };
        StartTaskComponent.prototype.onCancel = function () {
            this.cancel.emit();
        };
        StartTaskComponent.prototype.loadFormsTask = function () {
            this.forms$ = this.taskService.getFormList();
        };
        StartTaskComponent.prototype.isUserNameEmpty = function (user) {
            return !user || (this.isEmpty(user.firstName) && this.isEmpty(user.lastName));
        };
        StartTaskComponent.prototype.isEmpty = function (data) {
            return data === undefined || data === null || data.trim().length === 0;
        };
        StartTaskComponent.prototype.getDisplayUser = function (firstName, lastName, delimiter) {
            if (delimiter === void 0) { delimiter = '-'; }
            firstName = (firstName !== null ? firstName : '');
            lastName = (lastName !== null ? lastName : '');
            return firstName + delimiter + lastName;
        };
        StartTaskComponent.prototype.onDateChanged = function (newDateValue) {
            this.dateError = false;
            if (newDateValue) {
                var momentDate = void 0;
                if (typeof newDateValue === 'string') {
                    momentDate = moment$1(newDateValue, this.FORMAT_DATE, true);
                }
                else {
                    momentDate = newDateValue;
                }
                if (momentDate.isValid()) {
                    this.taskDetailsModel.dueDate = momentDate.toDate();
                }
                else {
                    this.dateError = true;
                    this.taskDetailsModel.dueDate = null;
                }
            }
            else {
                this.taskDetailsModel.dueDate = null;
            }
        };
        StartTaskComponent.prototype.validateMaxTaskNameLength = function () {
            if (this.maxTaskNameLength > this.MAX_LENGTH) {
                this.maxTaskNameLength = this.MAX_LENGTH;
                this.logService.log("the task name length cannot be greater than " + this.MAX_LENGTH);
            }
        };
        Object.defineProperty(StartTaskComponent.prototype, "nameController", {
            get: function () {
                return this.taskForm.get('name');
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(StartTaskComponent.prototype, "descriptionController", {
            get: function () {
                return this.taskForm.get('description');
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(StartTaskComponent.prototype, "formKeyController", {
            get: function () {
                return this.taskForm.get('formKey');
            },
            enumerable: false,
            configurable: true
        });
        return StartTaskComponent;
    }());
    StartTaskComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'adf-start-task',
                    template: "<mat-card fxFlex=\"70%\" class=\"adf-new-task-layout-card\">\n    <mat-card-header fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"10px\" class=\"adf-new-task-heading\">\n        <mat-card-title>{{'ADF_TASK_LIST.START_TASK.FORM.TITLE' | translate}}</mat-card-title>\n    </mat-card-header>\n    <mat-card-content>\n        <form [formGroup]=\"taskForm\" fxLayout=\"column\" fxLayoutGap=\"10px\">\n            <div class=\"adf-task-name\">\n                <mat-form-field fxFlex>\n                    <mat-label>{{'ADF_TASK_LIST.START_TASK.FORM.LABEL.NAME' | translate}}</mat-label>\n                    <input\n                        matInput\n                        id=\"name_id\"\n                        formControlName=\"name\">\n                        <mat-error *ngIf=\"nameController.hasError('required') || nameController.hasError('whitespace')\">\n                            {{ 'ADF_TASK_LIST.START_TASK.FORM.ERROR.REQUIRED' | translate }}\n                        </mat-error>\n                        <mat-error *ngIf=\"nameController.hasError('maxlength')\">\n                            {{ 'ADF_TASK_LIST.START_TASK.FORM.ERROR.MAXIMUM_LENGTH' | translate : { characters : maxTaskNameLength } }}\n                        </mat-error>\n                </mat-form-field>\n            </div>\n            <div class=\"adf-task-description\">\n                <mat-form-field fxFlex>\n                    <mat-label>{{'ADF_TASK_LIST.START_TASK.FORM.LABEL.DESCRIPTION' | translate}}</mat-label>\n                    <textarea\n                        matInput\n                        rows=\"1\"\n                        id=\"description_id\"\n                        formControlName=\"description\">\n                    </textarea>\n                    <mat-error *ngIf=\"descriptionController.hasError('whitespace')\">\n                        {{ 'ADF_TASK_LIST.START_TASK.FORM.ERROR.MESSAGE' | translate }}\n                    </mat-error>\n                </mat-form-field>\n            </div>\n            <div class=\"input-row\" fxLayout=\"row\" fxLayout.lt-md=\"column\" fxLayoutGap=\"20px\" fxLayoutGap.lt-md=\"0px\">\n                <mat-form-field fxFlex>\n                    <input\n                        matInput\n                        (keyup)=\"onDateChanged($any($event).srcElement.value)\"\n                        (dateInput)=\"onDateChanged($any($event).value)\"\n                        [matDatepicker]=\"taskDatePicker\"\n                        placeholder=\"{{'ADF_TASK_LIST.START_TASK.FORM.LABEL.DATE'|translate}}\"\n                        id=\"date_id\">\n                    <mat-datepicker-toggle\n                        matSuffix\n                        [for]=\"taskDatePicker\"></mat-datepicker-toggle>\n                    <mat-datepicker\n                        #taskDatePicker\n                        [touchUi]=\"true\">\n                    </mat-datepicker>\n                    <div class=\"adf-error-text-container\">\n                        <div *ngIf=\"dateError\">\n                            <div class=\"adf-error-text\">{{'ADF_TASK_LIST.START_TASK.FORM.ERROR.DATE'|translate}}</div>\n                            <mat-icon class=\"adf-error-icon\">warning</mat-icon>\n                        </div>\n                    </div>\n                </mat-form-field>\n                <div fxFlex>\n                    <people-widget\n                        (peopleSelected)=\"getAssigneeId($event)\"\n                        [field]=\"field\"\n                        class=\"adf-people-widget-content\"></people-widget>\n                </div>\n            </div>\n            <div class=\"adf-task-form\">\n                <mat-form-field fxFlex=\"48%\" fxFlex.xs=\"100%\">\n                    <mat-label id=\"form_label\">{{'ADF_TASK_LIST.START_TASK.FORM.LABEL.FORM'|translate}}</mat-label>\n                    <mat-select\n                        id=\"form_id\"\n                        class=\"form-control\"\n                        formControlName=\"formKey\">\n                    <mat-option>{{'ADF_TASK_LIST.START_TASK.FORM.LABEL.NONE'|translate}}</mat-option>\n                    <mat-option *ngFor=\"let form of forms$ | async\" [value]=\"form.id\">{{ form.name }}</mat-option>\n                    </mat-select>\n                </mat-form-field>\n            </div>\n        </form>\n    </mat-card-content>\n    <mat-card-actions>\n        <div class=\"adf-new-task-footer\" fxLayout=\"row\" fxLayoutAlign=\"end end\">\n            <button\n                mat-button\n                class=\"adf-uppercase\"\n                (click)=\"onCancel()\"\n                id=\"button-cancel\">\n                {{ 'ADF_TASK_LIST.START_TASK.FORM.ACTION.CANCEL' | translate }}\n            </button>\n            <button\n                color=\"primary\"\n                mat-button\n                class=\"adf-uppercase\"\n                [disabled]=\"!isFormValid()\"\n                (click)=\"saveTask()\"\n                id=\"button-start\">\n                {{ 'ADF_TASK_LIST.START_TASK.FORM.ACTION.START' | translate }}\n            </button>\n        </div>\n    </mat-card-actions>\n</mat-card>\n",
                    providers: [
                        { provide: core.DateAdapter, useClass: i1.MomentDateAdapter },
                        { provide: core.MAT_DATE_FORMATS, useValue: ɵ0 }
                    ],
                    encapsulation: i0.ViewEncapsulation.None,
                    styles: [".adf-new-task-heading{border-bottom:1px solid var(--theme-fg-divider);padding-top:12px}.adf-new-task-heading .mat-card-title{font-size:18px;font-weight:700}.adf-new-task-form{width:100%}.adf-new-task-layout-card{margin:10px auto}.adf-new-task-footer{border-top:1px solid #eee;font-size:18px;padding:4px}.adf-mat-select{padding-top:0}adf-start-task .mat-button.adf-uppercase{text-transform:uppercase}adf-start-task people-widget{width:100%}adf-start-task people-widget .mat-form-field-label-wrapper{top:-14px!important}adf-start-task .adf-people-widget-content .mat-form-field{width:100%}adf-start-task .adf-people-widget-content .adf-label{line-height:0}adf-start-task .adf-people-widget-content .adf-error-text-container{margin-top:-10px}adf-start-task .adf-start-task-input-container .mat-form-field-wrapper{padding-top:8px}adf-start-task .adf-error-text-container{height:20px;margin-top:12px;position:absolute;width:100%}adf-start-task .adf-error-text-container>div{display:flex;flex-flow:row;justify-content:flex-start}adf-start-task .adf-error-text{color:var(--theme-warn-color);font-size:12px;height:16px;line-height:1.33;padding-right:8px;width:auto}adf-start-task .adf-error-icon{color:var(--theme-warn-color);font-size:17px}adf-start-task .adf-label{color:#bababa}adf-start-task .adf-invalid .mat-form-field-underline{background-color:#f44336!important}adf-start-task .adf-invalid .adf-file{border-color:var(--theme-warn-color)}adf-start-task .adf-invalid .mat-form-field-prefix{color:var(--theme-warn-color)}adf-start-task .adf-invalid .adf-input{border-color:var(--theme-warn-color)}adf-start-task .adf-invalid .adf-label{color:var(--theme-warn-color)}adf-start-task .adf-invalid .adf-label:after{background-color:var(--theme-warn-color)}"]
                },] }
    ];
    StartTaskComponent.ctorParameters = function () { return [
        { type: TaskListService },
        { type: core.DateAdapter },
        { type: i1.UserPreferencesService },
        { type: forms.FormBuilder },
        { type: i1.LogService }
    ]; };
    StartTaskComponent.propDecorators = {
        appId: [{ type: i0.Input }],
        name: [{ type: i0.Input }],
        success: [{ type: i0.Output }],
        cancel: [{ type: i0.Output }],
        error: [{ type: i0.Output }]
    };

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var TaskStandaloneComponent = /** @class */ (function () {
        function TaskStandaloneComponent() {
            this.isCompleted = false;
            this.hasCompletePermission = true;
            this.hideCancelButton = true;
            this.cancel = new i0.EventEmitter();
            this.complete = new i0.EventEmitter();
            this.showAttachForm = new i0.EventEmitter();
        }
        TaskStandaloneComponent.prototype.onCancelButtonClick = function () {
            this.cancel.emit();
        };
        TaskStandaloneComponent.prototype.onCompleteButtonClick = function () {
            this.complete.emit();
        };
        TaskStandaloneComponent.prototype.hasCompleteButton = function () {
            return this.hasCompletePermission && !this.isCompleted;
        };
        TaskStandaloneComponent.prototype.hasCancelButton = function () {
            return !this.hideCancelButton && !this.isCompleted;
        };
        TaskStandaloneComponent.prototype.hasAttachFormButton = function () {
            return !this.isCompleted;
        };
        TaskStandaloneComponent.prototype.onShowAttachForm = function () {
            this.showAttachForm.emit();
        };
        return TaskStandaloneComponent;
    }());
    TaskStandaloneComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'adf-task-standalone',
                    template: "<mat-card class=\"adf-message-card\">\n    <mat-card-content>\n        <div class=\"adf-no-form-message-container\">\n            <div class=\"adf-no-form-message-list\">\n                <div *ngIf=\"!isCompleted; else completedMessage\" class=\"adf-no-form-message\">\n                    <span id=\"adf-no-form-message\">{{'ADF_TASK_LIST.STANDALONE_TASK.NO_FORM_MESSAGE' | translate}}</span>\n                </div>\n                <ng-template #completedMessage>\n                    <div id=\"adf-completed-form-message\" class=\"adf-no-form-message\">\n                        <p>{{'ADF_TASK_LIST.STANDALONE_TASK.COMPLETE_TASK_MESSAGE' | translate : {taskName : taskName} }}</p>\n                    </div>\n                    <div class=\"adf-no-form-submessage\">\n                        {{'ADF_TASK_LIST.STANDALONE_TASK.COMPLETE_TASK_SUB_MESSAGE' | translate}}\n                    </div>\n                </ng-template>\n            </div>\n        </div>\n    </mat-card-content>\n\n    <mat-card-actions class=\"adf-no-form-mat-card-actions\">\n        <button mat-button *ngIf=\"hasAttachFormButton()\" id=\"adf-no-form-attach-form-button\" (click)=\"onShowAttachForm()\">{{ 'ADF_TASK_LIST.START_TASK.FORM.LABEL.ATTACHFORM' | translate }}</button>\n        <div>\n            <button mat-button *ngIf=\"hasCancelButton()\" id=\"adf-no-form-cancel-button\" (click)=\"onCancelButtonClick()\">{{ 'ADF_TASK_LIST.START_TASK.FORM.ACTION.CANCEL' | translate }}</button>\n            <button mat-button *ngIf=\"hasCompleteButton()\" id=\"adf-no-form-complete-button\" color=\"primary\" (click)=\"onCompleteButtonClick()\">{{ 'ADF_TASK_LIST.DETAILS.BUTTON.COMPLETE' | translate }}</button>\n        </div>\n    </mat-card-actions>\n</mat-card>\n",
                    encapsulation: i0.ViewEncapsulation.None,
                    styles: [".adf-message-card{box-sizing:border-box;margin:16px auto;width:60%}.adf-message-card .mat-card-actions{border-top:1px solid var(--theme-status-bar-bg-color)}.adf-no-form-message-container{display:table;height:256px;width:100%}.adf-no-form-message-list{display:table-cell;text-align:center!important;vertical-align:middle}.adf-no-form-message{font-size:var(--theme-display-1-font-size);letter-spacing:-1.3px;line-height:36px;padding-bottom:10px}.adf-no-form-message,.adf-no-form-submessage{margin:auto;opacity:.54;width:-webkit-fit-content!important;width:-moz-fit-content!important;width:fit-content!important}.adf-no-form-submessage{font-size:var(--theme-subheading-2-font-size)}.adf-no-form-mat-card-actions.mat-card-actions{display:flex;justify-content:space-between}.adf-no-form-mat-card-actions.mat-card-actions .mat-button{border-radius:5px;text-transform:uppercase}.adf-no-form-mat-card-actions.mat-card-actions .mat-button-wrapper{font-size:var(--theme-button-font-size);font-weight:700;opacity:.54}"]
                },] }
    ];
    TaskStandaloneComponent.ctorParameters = function () { return []; };
    TaskStandaloneComponent.propDecorators = {
        taskName: [{ type: i0.Input }],
        taskId: [{ type: i0.Input }],
        isCompleted: [{ type: i0.Input }],
        hasCompletePermission: [{ type: i0.Input }],
        hideCancelButton: [{ type: i0.Input }],
        cancel: [{ type: i0.Output }],
        complete: [{ type: i0.Output }],
        showAttachForm: [{ type: i0.Output }]
    };

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var AttachFormComponent = /** @class */ (function () {
        function AttachFormComponent(taskService, logService, formService) {
            this.taskService = taskService;
            this.logService = logService;
            this.formService = formService;
            this.cancelAttachForm = new i0.EventEmitter();
            this.success = new i0.EventEmitter();
            this.error = new i0.EventEmitter();
            this.disableSubmit = true;
        }
        AttachFormComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.attachFormControl = new forms.FormControl('', forms.Validators.required);
            this.attachFormControl.valueChanges.subscribe(function (currentValue) {
                if (_this.attachFormControl.valid) {
                    _this.disableSubmit = _this.formId === currentValue;
                }
            });
        };
        AttachFormComponent.prototype.ngOnChanges = function () {
            this.formId = undefined;
            this.disableSubmit = true;
            this.loadFormsTask();
            if (this.formKey) {
                this.onFormAttached();
            }
        };
        AttachFormComponent.prototype.onCancelButtonClick = function () {
            this.selectedFormId = this.formId;
            this.cancelAttachForm.emit();
        };
        AttachFormComponent.prototype.onRemoveButtonClick = function () {
            var _this = this;
            this.taskService.deleteForm(this.taskId).subscribe(function () {
                _this.formId = _this.selectedFormId = null;
                _this.success.emit();
            }, function (err) {
                _this.error.emit(err);
                _this.logService.error('An error occurred while trying to delete the form');
            });
        };
        AttachFormComponent.prototype.onAttachFormButtonClick = function () {
            this.attachForm(this.taskId, this.selectedFormId);
        };
        AttachFormComponent.prototype.loadFormsTask = function () {
            var _this = this;
            this.taskService.getFormList().subscribe(function (form) {
                _this.forms = form;
            }, function (err) {
                _this.error.emit(err);
                _this.logService.error('An error occurred while trying to get the forms');
            });
        };
        AttachFormComponent.prototype.onFormAttached = function () {
            var _this = this;
            this.formService.getTaskForm(this.taskId)
                .subscribe(function (res) {
                _this.formService.getFormDefinitionByName(res.name).subscribe(function (formDef) {
                    _this.formId = _this.selectedFormId = formDef;
                });
            }, function (err) {
                _this.error.emit(err);
                _this.logService.error('Could not load forms');
            });
        };
        AttachFormComponent.prototype.attachForm = function (taskId, formId) {
            var _this = this;
            if (taskId && formId) {
                this.taskService.attachFormToATask(taskId, formId)
                    .subscribe(function () {
                    _this.success.emit();
                }, function (err) {
                    _this.error.emit(err);
                    _this.logService.error('Could not attach form');
                });
            }
        };
        return AttachFormComponent;
    }());
    AttachFormComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'adf-attach-form',
                    template: "<div class=\"adf-attach-form\">\n    <mat-card>\n        <mat-card-content>\n            <div class=\"adf-attache-form-message-container\">\n                <mat-card-title class=\"mat-card-title\">\n                    <h4 class=\"adf-form-title\">{{ 'ADF_TASK_LIST.ATTACH_FORM.SELECT_FORM' | translate }}</h4>\n                </mat-card-title>\n                <div class=\"adf-attach-form-row\">\n                    <mat-form-field class=\"adf-grid-full-width\">\n                        <mat-select [formControl]=\"attachFormControl\" placeholder=\"{{ 'ADF_TASK_LIST.ATTACH_FORM.SELECT_OPTION' | translate }}\" id=\"form_id\" [(ngModel)]=\"selectedFormId\">\n                            <mat-option *ngFor=\"let form of forms\" [value]=\"form.id\">{{ form.name }}</mat-option>\n                        </mat-select>\n                    </mat-form-field>\n                </div>\n\n                <adf-form *ngIf=\"this.attachFormControl.valid\"\n                    [formId]=\"selectedFormId\"\n                    [readOnly]=\"true\"\n                    [showCompleteButton]=\"false\"\n                    [showRefreshButton]=\"false\"\n                    [showValidationIcon]=\"false\">\n                </adf-form>\n            </div>\n        </mat-card-content>\n\n        <mat-card-actions class=\"adf-attach-form-mat-card-actions\">\n            <div>\n                <button mat-button id=\"adf-attach-form-remove-button\" color=\"warn\" *ngIf=\"formKey\" (click)=\"onRemoveButtonClick()\">{{ 'ADF_TASK_LIST.ATTACH_FORM.REMOVE_FORM' | translate }}</button>\n            </div>\n            <div>\n                <button mat-button id=\"adf-attach-form-cancel-button\" (click)=\"onCancelButtonClick()\">{{ 'ADF_TASK_LIST.START_TASK.FORM.ACTION.CANCEL' | translate }}</button>\n                <button mat-button id=\"adf-attach-form-attach-button\" [disabled]=\"disableSubmit\" color=\"primary\" (click)=\"onAttachFormButtonClick()\">{{ 'ADF_TASK_LIST.START_TASK.FORM.LABEL.ATTACHFORM' | translate }}</button>\n            </div>\n        </mat-card-actions>\n    </mat-card>\n</div>\n",
                    styles: [".adf-attach-form .mat-form-field{width:100%}.adf-attach-form-row{display:flex;justify-content:space-between;margin:20px 0}.adf-attach-form .adf-attach-form-mat-card-actions{justify-content:space-between;margin-top:30px;text-align:right}"]
                },] }
    ];
    AttachFormComponent.ctorParameters = function () { return [
        { type: TaskListService },
        { type: i1.LogService },
        { type: i1.FormService }
    ]; };
    AttachFormComponent.propDecorators = {
        taskId: [{ type: i0.Input }],
        formKey: [{ type: i0.Input }],
        cancelAttachForm: [{ type: i0.Output }],
        success: [{ type: i0.Output }],
        error: [{ type: i0.Output }]
    };

    var ProcessUploadService = /** @class */ (function (_super) {
        __extends(ProcessUploadService, _super);
        function ProcessUploadService(apiService, appConfigService, discoveryApiService) {
            var _this = _super.call(this, apiService, appConfigService, discoveryApiService) || this;
            _this.apiService = apiService;
            return _this;
        }
        Object.defineProperty(ProcessUploadService.prototype, "contentApi", {
            get: function () {
                var _a;
                this._contentApi = (_a = this._contentApi) !== null && _a !== void 0 ? _a : new jsApi.ActivitiContentApi(this.apiService.getInstance());
                return this._contentApi;
            },
            enumerable: false,
            configurable: true
        });
        ProcessUploadService.prototype.getUploadPromise = function (file) {
            var _this = this;
            var opts = {
                isRelatedContent: true
            };
            var processInstanceId = file.options.parentId;
            var promise = this.contentApi.createRelatedContentOnProcessInstance(processInstanceId, file.file, opts);
            promise.catch(function (err) { return _this.handleError(err); });
            return promise;
        };
        ProcessUploadService.prototype.handleError = function (error) {
            return rxjs.throwError(error || 'Server error');
        };
        return ProcessUploadService;
    }(i1.UploadService));
    ProcessUploadService.ɵprov = i0.ɵɵdefineInjectable({ factory: function ProcessUploadService_Factory() { return new ProcessUploadService(i0.ɵɵinject(i1.AlfrescoApiService), i0.ɵɵinject(i1.AppConfigService), i0.ɵɵinject(i1.DiscoveryApiService)); }, token: ProcessUploadService, providedIn: "root" });
    ProcessUploadService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    ProcessUploadService.ctorParameters = function () { return [
        { type: i1.AlfrescoApiService },
        { type: i1.AppConfigService },
        { type: i1.DiscoveryApiService }
    ]; };

    var TaskUploadService = /** @class */ (function (_super) {
        __extends(TaskUploadService, _super);
        function TaskUploadService(apiService, appConfigService, discoveryApiService) {
            var _this = _super.call(this, apiService, appConfigService, discoveryApiService) || this;
            _this.apiService = apiService;
            return _this;
        }
        Object.defineProperty(TaskUploadService.prototype, "contentApi", {
            get: function () {
                var _a;
                this._contentApi = (_a = this._contentApi) !== null && _a !== void 0 ? _a : new jsApi.ActivitiContentApi(this.apiService.getInstance());
                return this._contentApi;
            },
            enumerable: false,
            configurable: true
        });
        TaskUploadService.prototype.getUploadPromise = function (file) {
            var _this = this;
            var opts = {
                isRelatedContent: true
            };
            var taskId = file.options.parentId;
            var promise = this.contentApi.createRelatedContentOnTask(taskId, file.file, opts);
            promise.catch(function (err) { return _this.handleError(err); });
            return promise;
        };
        TaskUploadService.prototype.handleError = function (error) {
            return rxjs.throwError(error || 'Server error');
        };
        return TaskUploadService;
    }(i1.UploadService));
    TaskUploadService.ɵprov = i0.ɵɵdefineInjectable({ factory: function TaskUploadService_Factory() { return new TaskUploadService(i0.ɵɵinject(i1.AlfrescoApiService), i0.ɵɵinject(i1.AppConfigService), i0.ɵɵinject(i1.DiscoveryApiService)); }, token: TaskUploadService, providedIn: "root" });
    TaskUploadService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    TaskUploadService.ctorParameters = function () { return [
        { type: i1.AlfrescoApiService },
        { type: i1.AppConfigService },
        { type: i1.DiscoveryApiService }
    ]; };

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var StartTaskModel = /** @class */ (function () {
        function StartTaskModel(obj) {
            this.name = obj && obj.name || null;
            this.description = obj && obj.description || null;
            this.assignee = obj && obj.assignee ? new i1.UserProcessModel(obj.assignee) : null;
            this.dueDate = obj && obj.dueDate || null;
            this.formKey = obj && obj.formKey || null;
            this.category = obj && obj.category || null;
        }
        return StartTaskModel;
    }());

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var TaskDetailsEvent = /** @class */ (function () {
        function TaskDetailsEvent(value) {
            this._defaultPrevented = false;
            this._value = value;
        }
        Object.defineProperty(TaskDetailsEvent.prototype, "value", {
            get: function () {
                return this._value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(TaskDetailsEvent.prototype, "defaultPrevented", {
            get: function () {
                return this._defaultPrevented;
            },
            enumerable: false,
            configurable: true
        });
        TaskDetailsEvent.prototype.preventDefault = function () {
            this._defaultPrevented = true;
        };
        return TaskDetailsEvent;
    }());

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var ɵ0$1 = { floatLabel: 'never' };
    var MaterialModule = /** @class */ (function () {
        function MaterialModule() {
        }
        return MaterialModule;
    }());
    MaterialModule.decorators = [
        { type: i0.NgModule, args: [{
                    providers: [
                        { provide: formField.MAT_FORM_FIELD_DEFAULT_OPTIONS, useValue: ɵ0$1 }
                    ],
                    imports: [
                        autocomplete.MatAutocompleteModule, button.MatButtonModule, card.MatCardModule, i1$1.MatDialogModule,
                        checkbox.MatCheckboxModule, datepicker.MatDatepickerModule, gridList.MatGridListModule, icon.MatIconModule, input.MatInputModule,
                        list.MatListModule, core.MatOptionModule, radio.MatRadioModule, select.MatSelectModule, slideToggle.MatSlideToggleModule, table.MatTableModule,
                        tabs.MatTabsModule, progressSpinner.MatProgressSpinnerModule, core.MatNativeDateModule, core.MatRippleModule, tooltip.MatTooltipModule,
                        chips.MatChipsModule, menu.MatMenuModule
                    ],
                    exports: [
                        autocomplete.MatAutocompleteModule, button.MatButtonModule, card.MatCardModule, i1$1.MatDialogModule,
                        checkbox.MatCheckboxModule, datepicker.MatDatepickerModule, gridList.MatGridListModule, icon.MatIconModule, input.MatInputModule,
                        list.MatListModule, core.MatOptionModule, radio.MatRadioModule, select.MatSelectModule, slideToggle.MatSlideToggleModule, table.MatTableModule,
                        tabs.MatTabsModule, progressSpinner.MatProgressSpinnerModule, core.MatNativeDateModule, core.MatRippleModule, tooltip.MatTooltipModule,
                        chips.MatChipsModule, menu.MatMenuModule
                    ]
                },] }
    ];

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var ProcessCommentsComponent = /** @class */ (function () {
        function ProcessCommentsComponent(commentProcessService) {
            var _this = this;
            this.commentProcessService = commentProcessService;
            this.readOnly = true;
            this.error = new i0.EventEmitter();
            this.comments = [];
            this.onDestroy$ = new rxjs.Subject();
            this.beingAdded = false;
            this.comment$ = new rxjs.Observable(function (observer) { return _this.commentObserver = observer; }).pipe(operators.share());
            this.comment$
                .pipe(operators.takeUntil(this.onDestroy$))
                .subscribe(function (comment) { return _this.comments.push(comment); });
        }
        ProcessCommentsComponent.prototype.ngOnDestroy = function () {
            this.onDestroy$.next(true);
            this.onDestroy$.complete();
        };
        ProcessCommentsComponent.prototype.ngOnChanges = function (changes) {
            var processInstanceId = changes['processInstanceId'];
            if (processInstanceId) {
                if (processInstanceId.currentValue) {
                    this.getProcessInstanceComments(processInstanceId.currentValue);
                }
                else {
                    this.resetComments();
                }
            }
        };
        ProcessCommentsComponent.prototype.getProcessInstanceComments = function (processInstanceId) {
            var _this = this;
            this.resetComments();
            if (processInstanceId) {
                this.commentProcessService.getProcessInstanceComments(processInstanceId).subscribe(function (res) {
                    res = res.sort(function (comment1, comment2) {
                        var date1 = new Date(comment1.created);
                        var date2 = new Date(comment2.created);
                        return date1 > date2 ? -1 : date1 < date2 ? 1 : 0;
                    });
                    res.forEach(function (comment) {
                        _this.commentObserver.next(comment);
                    });
                }, function (err) {
                    _this.error.emit(err);
                });
            }
        };
        ProcessCommentsComponent.prototype.resetComments = function () {
            this.comments = [];
        };
        ProcessCommentsComponent.prototype.add = function () {
            var _this = this;
            if (this.message && this.message.trim() && !this.beingAdded) {
                this.beingAdded = true;
                this.commentProcessService.addProcessInstanceComment(this.processInstanceId, this.message)
                    .subscribe(function (res) {
                    _this.comments.unshift(res);
                    _this.message = '';
                    _this.beingAdded = false;
                }, function (err) {
                    _this.error.emit(err);
                    _this.beingAdded = false;
                });
            }
        };
        ProcessCommentsComponent.prototype.clear = function () {
            this.message = '';
        };
        ProcessCommentsComponent.prototype.isReadOnly = function () {
            return this.readOnly;
        };
        ProcessCommentsComponent.prototype.onError = function (error) {
            this.error.emit(error);
        };
        return ProcessCommentsComponent;
    }());
    ProcessCommentsComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'adf-process-instance-comments',
                    template: "<div class=\"adf-comments-container\">\n    <div id=\"comment-header\" class=\"adf-comments-header\">\n        {{'ADF_PROCESS_LIST.DETAILS.COMMENTS.HEADER' | translate: { count: comments?.length} }}\n    </div>\n    <div class=\"adf-comments-input-container\" *ngIf=\"!isReadOnly()\">\n        <mat-form-field class=\"adf-full-width\">\n            <input matInput id=\"comment-input\" placeholder=\"{{'ADF_PROCESS_LIST.DETAILS.COMMENTS.ADD' | translate}}\" [(ngModel)]=\"message\" (keyup.enter)=\"add()\" (keyup.esc)=\"clear()\">\n        </mat-form-field>\n    </div>\n\n    <div *ngIf=\"comments.length > 0\">\n        <adf-comment-list [comments]=\"comments\">\n        </adf-comment-list>\n    </div>\n</div>\n",
                    encapsulation: i0.ViewEncapsulation.None,
                    host: { class: 'adf-process-instance-comments' },
                    styles: [".adf-process-instance-comments{width:100%}.adf-activiti-label{font-weight:bolder;vertical-align:top}.adf-activiti-label+.adf-icon{position:relative;top:-2px}.adf-list-wrap{-o-hyphens:auto;-webkit-hyphens:auto;hyphens:auto;word-break:break-all;word-wrap:break-word}.adf-hide-long-names{overflow:auto}.adf-comments-container{height:100%;overflow:auto;width:100%}.adf-comments-header{border-bottom:1px solid var(--theme-fg-divider);font-size:14px;font-weight:600;padding:10px 20px}.adf-comments-input-container{border-bottom:1px solid var(--theme-fg-divider);padding:8px 15px 0;width:calc(100% - 30px)}.adf-full-width{width:100%}adf-comment-list{float:left;height:calc(100% - 101px);overflow:auto;width:100%}"]
                },] }
    ];
    ProcessCommentsComponent.ctorParameters = function () { return [
        { type: i1.CommentProcessService }
    ]; };
    ProcessCommentsComponent.propDecorators = {
        processInstanceId: [{ type: i0.Input }],
        readOnly: [{ type: i0.Input }],
        error: [{ type: i0.Output }]
    };

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var ProcessCommentsModule = /** @class */ (function () {
        function ProcessCommentsModule() {
        }
        return ProcessCommentsModule;
    }());
    ProcessCommentsModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [
                        forms.FormsModule,
                        forms.ReactiveFormsModule,
                        MaterialModule,
                        common.CommonModule,
                        i1.CoreModule
                    ],
                    declarations: [
                        ProcessCommentsComponent
                    ],
                    exports: [
                        ProcessCommentsComponent
                    ]
                },] }
    ];

    var PeopleComponent = /** @class */ (function () {
        function PeopleComponent(logService, peopleProcessService) {
            var _this = this;
            this.logService = logService;
            this.peopleProcessService = peopleProcessService;
            this.people = [];
            this.taskId = '';
            this.readOnly = false;
            this.showAssignment = false;
            this.peopleSearch$ = new rxjs.Observable(function (observer) { return _this.peopleSearchObserver = observer; })
                .pipe(operators.share());
        }
        PeopleComponent.prototype.involveUserAndCloseSearch = function () {
            if (this.peopleSearch) {
                this.peopleSearch.involveUserAndClose();
            }
        };
        PeopleComponent.prototype.involveUserWithoutCloseSearch = function () {
            if (this.peopleSearch) {
                this.peopleSearch.involveUser();
            }
        };
        PeopleComponent.prototype.searchUser = function (searchedWord) {
            var _this = this;
            this.peopleProcessService.getWorkflowUsers(this.taskId, searchedWord)
                .subscribe(function (users) {
                _this.peopleSearchObserver.next(users);
            }, function (error) { return _this.logService.error(error); });
        };
        PeopleComponent.prototype.involveUser = function (user) {
            var _this = this;
            if (user && user.id) {
                this.peopleProcessService
                    .involveUserWithTask(this.taskId, user.id.toString())
                    .subscribe(function () { return _this.people = __spread(_this.people, [user]); }, function () { return _this.logService.error('Impossible to involve user with task'); });
            }
        };
        PeopleComponent.prototype.removeInvolvedUser = function (user) {
            var _this = this;
            this.peopleProcessService
                .removeInvolvedUser(this.taskId, user.id.toString())
                .subscribe(function () {
                _this.people = _this.people.filter(function (involvedUser) { return involvedUser.id !== user.id; });
            }, function () { return _this.logService.error('Impossible to remove involved user from task'); });
        };
        PeopleComponent.prototype.getDisplayUser = function (firstName, lastName, delimiter) {
            if (delimiter === void 0) { delimiter = '-'; }
            firstName = (firstName !== null ? firstName : '');
            lastName = (lastName !== null ? lastName : '');
            return firstName + delimiter + lastName;
        };
        PeopleComponent.prototype.getInitialUserName = function (firstName, lastName) {
            firstName = (firstName !== null && firstName !== '' ? firstName[0] : '');
            lastName = (lastName !== null && lastName !== '' ? lastName[0] : '');
            return this.getDisplayUser(firstName, lastName, '');
        };
        PeopleComponent.prototype.onAddAssignment = function () {
            this.showAssignment = true;
        };
        PeopleComponent.prototype.onClickAction = function (event) {
            if (event && event.value && event.type === 'remove') {
                this.removeInvolvedUser(event.value);
            }
        };
        PeopleComponent.prototype.hasPeople = function () {
            return this.people && this.people.length > 0;
        };
        PeopleComponent.prototype.isEditMode = function () {
            return !this.readOnly;
        };
        PeopleComponent.prototype.onCloseSearch = function () {
            this.showAssignment = false;
        };
        return PeopleComponent;
    }());
    PeopleComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'adf-people',
                    template: "<mat-card class=\"adf-assignment-top-container\">\n    <div mat-card-content class=\"adf-assignment-top-container-content\">\n        <div class=\"assignment-header\">\n                <div *ngIf=\"hasPeople()\" class=\"adf-assignment-count\" id=\"people-title\">\n                    {{ 'ADF_TASK_LIST.DETAILS.LABELS.PEOPLE' | translate }} {{ ' (' + people.length + ')' }}\n                </div>\n                <div *ngIf=\"!hasPeople()\" class=\"adf-assignment-count\" id=\"no-people-label\">\n                    {{ 'ADF_TASK_LIST.DETAILS.PEOPLE.NONE' | translate }}\n                </div>\n                <div *ngIf=\"isEditMode()\" class=\"adf-add-people\" (click)=\"onAddAssignment()\">\n                    <mat-icon class=\"adf-add-person-icon\">person_add</mat-icon>\n                </div>\n            </div>\n            <div class=\"adf-assignment-container\" *ngIf=\"showAssignment\">\n                <adf-people-search\n                    #peopleSearch\n                    (searchPeople)=\"searchUser($event)\"\n                    (success)=\"involveUser($event)\"\n                    (closeSearch)=\"onCloseSearch()\"\n                    [results]=\"peopleSearch$\">\n                    <ng-container adf-people-search-title>{{ 'ADF_TASK_LIST.DETAILS.LABELS.ADD_PEOPLE' | translate }}</ng-container>\n                    <ng-container adf-people-search-action-label>{{ 'ADF_TASK_LIST.PEOPLE.ADD_USER' | translate }}</ng-container>\n                </adf-people-search>\n            </div>\n            <div class=\"adf-assignment-list-container\" id=\"assignment-people-list\" *ngIf=\"hasPeople()\">\n                <adf-people-list\n                [users]=\"people\"\n                [actions]=\"isEditMode()\"\n                (clickAction)=\"onClickAction($event)\">\n                    <data-columns>\n                        <data-column key=\"firstName\">\n                            <ng-template let-entry=\"$implicit\">\n                                <div *ngIf=\"!entry.row.obj.pictureId\" class=\"adf-people-search-people-pic\">\n                                    {{getInitialUserName(entry.row.obj.firstName, entry.row.obj.lastName)}}</div>\n                                <div>\n                                    <img [alt]=\"getDisplayUser(entry.row.obj.firstName, entry.row.obj.lastName, ' ')\" *ngIf=\"entry.row.obj.pictureId\" class=\"adf-people-img\"\n                                        [src]=\"peopleProcessService.getUserImage(entry.row.obj)\"/>\n                                </div>\n                            </ng-template>\n                        </data-column>\n                        <data-column key=\"email\" class=\"adf-full-width\">\n                            <ng-template let-entry=\"$implicit\">\n                                <div class=\"adf-people-user-info\">\n                                    <div [attr.data-automation-id]=\"'adf-people-full-name-'+ getDisplayUser(entry.row.obj.firstName, entry.row.obj.lastName, '-')\" class=\"adf-people-full-name\">{{ getDisplayUser(entry.row.obj.firstName, entry.row.obj.lastName, ' ') }}</div>\n                                    <div [attr.data-automation-id]=\"'adf-people-email-'+ getDisplayUser(entry.row.obj.firstName, entry.row.obj.lastName, '-')\"  class=\"adf-people-email\">{{ entry.row.obj.email }}</div>\n                                </div>\n                            </ng-template>\n                        </data-column>\n                    </data-columns>\n                </adf-people-list>\n            </div>\n    </div>\n</mat-card>\n",
                    encapsulation: i0.ViewEncapsulation.None,
                    styles: [".adf-assignment-header{border-bottom:1px solid var(--theme-fg-divider);padding:6px 20px}.adf-assignment-count{float:left;font-weight:bolder;margin:13px;opacity:.54;padding:10px 0}.adf-add-people{cursor:pointer;float:right;height:26px;margin:13px;opacity:.54;padding:8px}.adf-add-people:hover{color:var(--theme-primary-color)}.adf-assignment-top-container.mat-card{align-items:stretch;border-top:1px solid var(--theme-fg-divider);display:flex;flex-flow:row wrap;margin:0;padding:0}.adf-assignment-top-container-content{align-items:stretch;display:flex;flex:1 0 auto;flex-flow:column;max-width:100%}.adf-assignment-container{border-bottom:1px solid var(--theme-fg-divider);max-width:100%;padding:10px 20px}.adf-assignment-list-container{padding:0}adf-people-list adf-datatable thead{display:none}adf-people-list adf-datatable .adf-datatable-cell{margin:13px}adf-people-list adf-datatable .adf-datatable .adf-datatable-cell .adf-cell-container{align-items:left;flex-direction:column}adf-people-list adf-datatable .adf-people-email{opacity:.54}.adf-people-img{border-radius:90%;height:40px;vertical-align:middle;width:40px}.adf-people-search-people-pic{background:var(--theme-primary-color);border-radius:100px;color:#fff;font-size:18px;font-weight:bolder;padding:10px 5px;text-align:center;text-transform:uppercase;vertical-align:text-bottom;width:30px}.adf-people-user-info{flex-direction:column;text-align:center}"]
                },] }
    ];
    PeopleComponent.ctorParameters = function () { return [
        { type: i1.LogService },
        { type: i1.PeopleProcessService }
    ]; };
    PeopleComponent.propDecorators = {
        people: [{ type: i0.Input }],
        taskId: [{ type: i0.Input }],
        readOnly: [{ type: i0.Input }],
        peopleSearch: [{ type: i0.ViewChild, args: ['peopleSearch',] }]
    };

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var PeopleListComponent = /** @class */ (function () {
        function PeopleListComponent() {
            this.actions = false;
            this.clickRow = new i0.EventEmitter();
            this.clickAction = new i0.EventEmitter();
            this.showHeader = i1.ShowHeaderMode.Never;
        }
        PeopleListComponent.prototype.ngAfterContentInit = function () {
            this.peopleDataTable.columnList = this.columnList;
        };
        PeopleListComponent.prototype.selectUser = function (event) {
            this.user = event.value.obj;
            this.clickRow.emit(this.user);
        };
        PeopleListComponent.prototype.hasActions = function () {
            return this.actions;
        };
        PeopleListComponent.prototype.onShowRowActionsMenu = function (event) {
            var removeAction = {
                title: 'Remove',
                name: 'remove'
            };
            event.value.actions = [
                removeAction
            ];
        };
        PeopleListComponent.prototype.onExecuteRowAction = function (event) {
            var args = event.value;
            var action = args.action;
            this.clickAction.emit({ type: action.name, value: args.row.obj });
        };
        return PeopleListComponent;
    }());
    PeopleListComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'adf-people-list',
                    template: "<adf-datatable\n    #dataTable\n    class=\"adf-task-people-list\"\n    [rows]=\"users\"\n    [actions]=\"hasActions()\"\n    [showHeader]=\"showHeader\"\n    (rowClick)=\"selectUser($event)\"\n    (rowDblClick)=\"selectUser($event)\"\n    (showRowActionsMenu)=\"onShowRowActionsMenu($event)\"\n    (executeRowAction)=\"onExecuteRowAction($event)\">\n</adf-datatable>\n",
                    styles: [".adf-task-people-list .adf-datatable-list{width:100%}"]
                },] }
    ];
    PeopleListComponent.propDecorators = {
        columnList: [{ type: i0.ContentChild, args: [i1.DataColumnListComponent,] }],
        peopleDataTable: [{ type: i0.ViewChild, args: ['dataTable', { static: true },] }],
        users: [{ type: i0.Input }],
        actions: [{ type: i0.Input }],
        clickRow: [{ type: i0.Output }],
        clickAction: [{ type: i0.Output }]
    };

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var PeopleSearchComponent = /** @class */ (function () {
        function PeopleSearchComponent() {
            this.searchPeople = new i0.EventEmitter();
            this.success = new i0.EventEmitter();
            this.closeSearch = new i0.EventEmitter();
            this.selectedUser = {};
        }
        PeopleSearchComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.filteredResults$ = this.results
                .pipe(operators.map(function (users) {
                return users.filter(function (user) { return user.id !== _this.selectedUser.id; });
            }));
            this.performSearch = this.performSearchCallback.bind(this);
        };
        PeopleSearchComponent.prototype.performSearchCallback = function (event) {
            this.searchPeople.emit(event);
            return this.filteredResults$;
        };
        PeopleSearchComponent.prototype.onRowClick = function (user) {
            this.selectedUser = user;
        };
        PeopleSearchComponent.prototype.closeSearchList = function () {
            this.closeSearch.emit();
        };
        PeopleSearchComponent.prototype.involveUserAndClose = function () {
            this.involveUser();
            this.closeSearchList();
        };
        PeopleSearchComponent.prototype.involveUser = function () {
            if (this.selectedUser === undefined) {
                return;
            }
            this.success.emit(this.selectedUser);
        };
        return PeopleSearchComponent;
    }());
    PeopleSearchComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'adf-people-search',
                    template: "<div class=\"adf-search-text-header\">\n    <ng-content select=\"[adf-people-search-title], [people-search-title]\"></ng-content>\n</div>\n\n<adf-people-search-field [performSearch]=\"performSearch\" (rowClick)=\"onRowClick($event)\"></adf-people-search-field>\n\n<div class=\"search-list-action-container\">\n    <button mat-button type=\"button\" id=\"close-people-search\" (click)=\"closeSearchList()\">\n        {{'ADF_TASK_LIST.PEOPLE.DIALOG_CLOSE' | translate }}\n    </button>\n    <button mat-button type=\"button\" id=\"add-people\" (click)=\"involveUserAndClose()\">\n        <ng-content select=\"[adf-people-search-action-label], [people-search-action-label]\"></ng-content>\n    </button>\n</div>\n",
                    host: {
                        'class': 'adf-people-search'
                    },
                    encapsulation: i0.ViewEncapsulation.None,
                    styles: [".adf-people-search{width:100%}.adf-people-search .adf-activiti-label{font-weight:bolder}.adf-people-search .adf-fix-element-user-list{padding:0}.adf-people-search .adf-search-text-header{font-weight:700;opacity:.54}.adf-people-search .adf-search-list-action-container{border-top:1px solid #eee;margin-top:5px;padding:5px 0;text-align:right}.adf-people-search .adf-search-list-action-container>button{font-weight:bolder;opacity:.54}.adf-people-search .adf-search-list-action-container>button:hover{color:var(--theme-primary-color)}"]
                },] }
    ];
    PeopleSearchComponent.ctorParameters = function () { return []; };
    PeopleSearchComponent.propDecorators = {
        results: [{ type: i0.Input }],
        searchPeople: [{ type: i0.Output }],
        success: [{ type: i0.Output }],
        closeSearch: [{ type: i0.Output }]
    };

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function getDisplayUser(firstName, lastName, delimiter) {
        if (delimiter === void 0) { delimiter = '-'; }
        firstName = (firstName !== null ? firstName : '');
        lastName = (lastName !== null ? lastName : '');
        return firstName + delimiter + lastName;
    }

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var PeopleSearchFieldComponent = /** @class */ (function () {
        function PeopleSearchFieldComponent(peopleProcessService, translationService) {
            var _this = this;
            this.peopleProcessService = peopleProcessService;
            this.translationService = translationService;
            this.rowClick = new i0.EventEmitter();
            this.searchUser = new forms.FormControl();
            this.defaultPlaceholder = 'ADF_TASK_LIST.PEOPLE.SEARCH_USER';
            this.users$ = this.searchUser.valueChanges
                .pipe(operators.debounceTime(200), operators.switchMap(function (searchWord) {
                if (searchWord && searchWord.trim()) {
                    return _this.performSearch(searchWord);
                }
                else {
                    return rxjs.of([]);
                }
            }));
            this.defaultPlaceholder = this.translationService.instant(this.defaultPlaceholder);
        }
        PeopleSearchFieldComponent.prototype.reset = function () {
            this.searchUser.reset();
        };
        Object.defineProperty(PeopleSearchFieldComponent.prototype, "searchPlaceholder", {
            get: function () {
                return this.placeholder || this.defaultPlaceholder;
            },
            enumerable: false,
            configurable: true
        });
        PeopleSearchFieldComponent.prototype.onRowClick = function (model) {
            this.rowClick.emit(model);
        };
        PeopleSearchFieldComponent.prototype.getDisplayUser = function (firstName, lastName, delimiter) {
            if (delimiter === void 0) { delimiter = '-'; }
            return getDisplayUser(firstName, lastName, delimiter);
        };
        PeopleSearchFieldComponent.prototype.getInitialUserName = function (firstName, lastName) {
            firstName = (firstName !== null && firstName !== '' ? firstName[0] : '');
            lastName = (lastName !== null && lastName !== '' ? lastName[0] : '');
            return this.getDisplayUser(firstName, lastName, '');
        };
        return PeopleSearchFieldComponent;
    }());
    PeopleSearchFieldComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'adf-people-search-field',
                    template: "<mat-form-field class=\"adf-search-text-container\">\n    <input\n        matInput\n        placeholder=\"{{ searchPlaceholder }}\"\n        type=\"text\"\n        id=\"userSearchText\"\n        [value]=\"\"\n        [formControl]=\"searchUser\"\n        data-automation-id=\"adf-people-search-input\">\n</mat-form-field>\n<ng-container *ngIf=\"users$ | async; let users\">\n    <div class=\"adf-search-list-container\" id=\"search-people-list\" *ngIf=\"users.length > 0\">\n        <adf-people-list [users]=\"users\" (clickRow)=\"onRowClick($event)\">\n            <data-columns>\n                <data-column key=\"firstName\">\n                    <ng-template let-entry=\"$implicit\">\n                            <div *ngIf=\"!entry.row.obj.pictureId\" class=\"adf-people-pic\">\n                                {{getInitialUserName(entry.row.obj.firstName, entry.row.obj.lastName)}}</div>\n                            <div>\n                                <img [alt]=\"getDisplayUser(entry.row.obj.firstName, entry.row.obj.lastName, ' ')\" *ngIf=\"entry.row.obj.pictureId\" class=\"adf-people-img\"\n                                    [src]=\"peopleProcessService.getUserImage(entry.row.obj)\"/>\n                            </div>\n                    </ng-template>\n                </data-column>\n                <data-column key=\"email\" class=\"adf-full-width\">\n                    <ng-template let-entry=\"$implicit\">\n                        <div [attr.data-automation-id]=\"'adf-people-full-name-'+ getDisplayUser(entry.row.obj.firstName, entry.row.obj.lastName, '-')\" class=\"adf-people-full-name\">{{ getDisplayUser(entry.row.obj.firstName, entry.row.obj.lastName, ' ') }}</div>\n                    </ng-template>\n                </data-column>\n            </data-columns>\n        </adf-people-list>\n    </div>\n</ng-container>\n",
                    host: { 'class': 'adf-people-search-field' },
                    encapsulation: i0.ViewEncapsulation.None,
                    styles: [".adf-people-search-field,.adf-people-search-field .adf-search-text-container{width:100%}.adf-people-search-field .adf-search-text-container input{line-height:normal}.adf-people-search-field .adf-search-list-container{max-height:152px;overflow-y:auto;width:100%}.adf-people-search-field adf-people-list ::ng-deep adf-datatable ::ng-deep thead{display:none}.adf-people-search-field .adf-people-pic{background:var(--theme-primary-color);border-radius:90%;color:#fff;font-size:18px;font-weight:bolder;padding:10px 5px;text-align:center;text-transform:uppercase;vertical-align:text-bottom;width:30px}.adf-people-search-field .adf-people-img{border-radius:90%;height:40px;vertical-align:middle;width:40px}"]
                },] }
    ];
    PeopleSearchFieldComponent.ctorParameters = function () { return [
        { type: i1.PeopleProcessService },
        { type: i1.TranslationService }
    ]; };
    PeopleSearchFieldComponent.propDecorators = {
        performSearch: [{ type: i0.Input }],
        placeholder: [{ type: i0.Input }],
        rowClick: [{ type: i0.Output }]
    };

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var DEFAULT_ASSIGNEE_PLACEHOLDER = 'ADF_TASK_LIST.PEOPLE.ASSIGNEE';
    var PeopleSelectorComponent = /** @class */ (function () {
        function PeopleSelectorComponent(peopleProcessService, logService, translationService) {
            this.peopleProcessService = peopleProcessService;
            this.logService = logService;
            this.translationService = translationService;
            this.peopleIdChange = new i0.EventEmitter();
            this.performSearch = this.searchUser.bind(this);
            this.defaultPlaceholder = this.translationService.instant(DEFAULT_ASSIGNEE_PLACEHOLDER);
        }
        PeopleSelectorComponent.prototype.searchUser = function (searchWord) {
            return this.peopleProcessService.getWorkflowUsers(undefined, searchWord)
                .pipe(operators.catchError(this.onSearchUserError.bind(this)));
        };
        PeopleSelectorComponent.prototype.onSearchUserError = function () {
            this.logService.error('getWorkflowUsers threw error');
            return rxjs.of([]);
        };
        PeopleSelectorComponent.prototype.userSelected = function (user) {
            this.updateUserSelection(user);
        };
        PeopleSelectorComponent.prototype.userDeselected = function () {
            this.updateUserSelection(undefined);
        };
        PeopleSelectorComponent.prototype.updateUserSelection = function (user) {
            this.selectedUser = user;
            this.peopleIdChange.emit(user && user.id || undefined);
            this.searchFieldComponent.reset();
        };
        Object.defineProperty(PeopleSelectorComponent.prototype, "placeholder", {
            get: function () {
                if (!this.selectedUser) {
                    return this.defaultPlaceholder;
                }
                return getDisplayUser(this.selectedUser.firstName, this.selectedUser.lastName, ' ');
            },
            enumerable: false,
            configurable: true
        });
        return PeopleSelectorComponent;
    }());
    PeopleSelectorComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'adf-people-selector',
                    template: "<adf-people-search-field\n    #peopleSearchField\n    class=\"adf-people-selector-field\"\n    [performSearch]=\"performSearch\"\n    [placeholder]=\"placeholder\"\n    (rowClick)=\"userSelected($event)\">\n</adf-people-search-field>\n<button\n    *ngIf=\"selectedUser\"\n    mat-icon-button\n    class=\"adf-people-selector-deselect\"\n    data-automation-id=\"adf-people-selector-deselect\"\n    (click)=\"userDeselected()\">\n        <mat-icon>cancel</mat-icon>\n</button>\n",
                    host: { 'class': 'adf-people-selector' },
                    encapsulation: i0.ViewEncapsulation.None,
                    styles: [".adf-people-selector{display:flex;flex-flow:row;justify-content:space-between}.adf-people-selector-field{flex:1 1 auto}.adf-people-selector-deselect{flex:0 0 auto;right:5px;top:5px}"]
                },] }
    ];
    PeopleSelectorComponent.ctorParameters = function () { return [
        { type: i1.PeopleProcessService },
        { type: i1.LogService },
        { type: i1.TranslationService }
    ]; };
    PeopleSelectorComponent.propDecorators = {
        peopleId: [{ type: i0.Input }],
        peopleIdChange: [{ type: i0.Output }],
        searchFieldComponent: [{ type: i0.ViewChild, args: ['peopleSearchField', { static: true },] }]
    };

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var PeopleSearchActionLabelDirective = /** @class */ (function () {
        function PeopleSearchActionLabelDirective() {
        }
        return PeopleSearchActionLabelDirective;
    }());
    PeopleSearchActionLabelDirective.decorators = [
        { type: i0.Directive, args: [{ selector: 'adf-people-search-action-label, people-search-action-label' },] }
    ];

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var PeopleSearchTitleDirective = /** @class */ (function () {
        function PeopleSearchTitleDirective() {
        }
        return PeopleSearchTitleDirective;
    }());
    PeopleSearchTitleDirective.decorators = [
        { type: i0.Directive, args: [{ selector: '[adf-people-search-title]' },] }
    ];

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var PeopleModule = /** @class */ (function () {
        function PeopleModule() {
        }
        return PeopleModule;
    }());
    PeopleModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [
                        forms.FormsModule,
                        forms.ReactiveFormsModule,
                        MaterialModule,
                        common.CommonModule,
                        i1.CoreModule
                    ],
                    declarations: [
                        PeopleComponent,
                        PeopleSearchComponent,
                        PeopleSearchFieldComponent,
                        PeopleSelectorComponent,
                        PeopleSearchTitleDirective,
                        PeopleSearchActionLabelDirective,
                        PeopleListComponent
                    ],
                    exports: [
                        PeopleComponent,
                        PeopleSearchComponent,
                        PeopleSearchFieldComponent,
                        PeopleSelectorComponent,
                        PeopleSearchTitleDirective,
                        PeopleSearchActionLabelDirective,
                        PeopleListComponent
                    ]
                },] }
    ];

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var AttachFileWidgetDialogComponent = /** @class */ (function () {
        function AttachFileWidgetDialogComponent(translation, data, externalApiService, authenticationService, matDialogRef) {
            this.translation = translation;
            this.data = data;
            this.externalApiService = externalApiService;
            this.authenticationService = authenticationService;
            this.matDialogRef = matDialogRef;
            externalApiService.init(data.ecmHost, data.context);
            this.action = data.actionName ? data.actionName.toUpperCase() : 'CHOOSE';
            this.buttonActionName = "ATTACH-FILE.ACTIONS." + this.action;
            this.updateTitle('DROPDOWN.MY_FILES_OPTION');
            this.updateExternalHost();
        }
        AttachFileWidgetDialogComponent.prototype.updateExternalHost = function () {
            var _this = this;
            this.authenticationService.onLogin.subscribe(function () { return _this.registerAndClose(); });
            if (this.externalApiService.getInstance().isLoggedIn()) {
                this.registerAndClose();
            }
        };
        AttachFileWidgetDialogComponent.prototype.registerAndClose = function () {
            this.data.registerExternalHost(this.data.accountIdentifier, this.externalApiService);
            if (this.data.loginOnly) {
                this.data.selected.complete();
                this.matDialogRef.close();
            }
        };
        AttachFileWidgetDialogComponent.prototype.isLoggedIn = function () {
            return this.externalApiService.getInstance().isLoggedIn();
        };
        AttachFileWidgetDialogComponent.prototype.performLogin = function () {
            this.loginPanel.submitForm();
        };
        AttachFileWidgetDialogComponent.prototype.close = function () {
            this.data.selected.complete();
        };
        AttachFileWidgetDialogComponent.prototype.onSelect = function (nodeList) {
            this.chosenNode = nodeList;
        };
        AttachFileWidgetDialogComponent.prototype.onSiteChange = function (siteTitle) {
            this.updateTitle(siteTitle);
        };
        AttachFileWidgetDialogComponent.prototype.onClick = function () {
            this.data.selected.next(this.chosenNode);
            this.data.selected.complete();
        };
        AttachFileWidgetDialogComponent.prototype.updateTitle = function (siteTitle) {
            if (this.action === 'CHOOSE' && siteTitle) {
                this.title = this.getTitleTranslation(this.action, siteTitle);
            }
        };
        AttachFileWidgetDialogComponent.prototype.getTitleTranslation = function (action, name) {
            return this.translation.instant("ATTACH-FILE.ACTIONS." + action + "_ITEM", { name: this.translation.instant(name) });
        };
        AttachFileWidgetDialogComponent.prototype.hasNodeSelected = function () {
            var _a;
            return ((_a = this.chosenNode) === null || _a === void 0 ? void 0 : _a.length) > 0;
        };
        return AttachFileWidgetDialogComponent;
    }());
    AttachFileWidgetDialogComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'adf-attach-file-widget-dialog',
                    template: "<header\n    mat-dialog-title\n    data-automation-id=\"content-node-selector-title\">\n    <span *ngIf=\"isLoggedIn(); else loginTitle\">{{title}}</span>\n    <ng-template #loginTitle>{{data.title}}</ng-template>\n</header>\n\n<mat-dialog-content class=\"adf-login-dialog-content\">\n    <adf-login-dialog-panel id=\"attach-file-login-panel\" #adfLoginPanel *ngIf=\"!isLoggedIn()\">\n    </adf-login-dialog-panel>\n    <adf-content-node-selector-panel *ngIf=\"isLoggedIn()\"\n                                     id=\"attach-file-content-node\"\n                                     [currentFolderId]=\"data?.currentFolderId\"\n                                     [isSelectionValid]=\"data?.isSelectionValid\"\n                                     [showFilesInResult]=\"data?.showFilesInResult\"\n                                     (select)=\"onSelect($event)\"\n                                     (siteChange)=\"onSiteChange($event)\">\n    </adf-content-node-selector-panel>\n</mat-dialog-content>\n\n<mat-dialog-actions align=\"end\">\n    <button\n        mat-button\n        (click)=\"close()\"\n        data-automation-id=\"attach-file-dialog-actions-cancel\">{{ 'ATTACH-FILE.ACTIONS.CANCEL' | translate }}\n    </button>\n\n    <button *ngIf=\"!isLoggedIn()\"\n        mat-button\n        (click)=\"performLogin()\"\n        data-automation-id=\"attach-file-dialog-actions-login\">{{ 'ATTACH-FILE.ACTIONS.LOGIN' | translate }}\n    </button>\n\n    <button *ngIf=\"isLoggedIn()\"\n        mat-button\n        [disabled]=\"!hasNodeSelected()\"\n        class=\"adf-choose-action\"\n        (click)=\"onClick()\"\n        data-automation-id=\"attach-file-dialog-actions-choose\">{{ buttonActionName | translate }}\n    </button>\n\n</mat-dialog-actions>\n",
                    encapsulation: i0.ViewEncapsulation.None,
                    providers: [
                        i1.AuthenticationService,
                        adfContentServices.DocumentListService,
                        i1.SitesService,
                        i1.SearchService,
                        { provide: i1.AlfrescoApiService, useClass: i1.ExternalAlfrescoApiService }
                    ],
                    styles: [".adf-attach-file-widget-dialog .mat-dialog-actions{background-color:var(--theme-background-color);color:var(--theme-foreground-text-color);display:flex;justify-content:flex-end}.adf-attach-file-widget-dialog .mat-dialog-actions button{font-weight:400;text-transform:uppercase}.adf-attach-file-widget-dialog .mat-dialog-actions .adf-choose-action[disabled]{color:var(--theme-secondary-text-color)}.adf-attach-file-widget-dialog .mat-dialog-actions .adf-choose-action:enabled{color:var(--theme-primary-color)}"]
                },] }
    ];
    AttachFileWidgetDialogComponent.ctorParameters = function () { return [
        { type: i1.TranslationService },
        { type: undefined, decorators: [{ type: i0.Inject, args: [i1$1.MAT_DIALOG_DATA,] }] },
        { type: i1.AlfrescoApiService },
        { type: i1.AuthenticationService },
        { type: i1$1.MatDialogRef }
    ]; };
    AttachFileWidgetDialogComponent.propDecorators = {
        loginPanel: [{ type: i0.ViewChild, args: ['adfLoginPanel',] }]
    };

    var AttachFileWidgetDialogService = /** @class */ (function () {
        function AttachFileWidgetDialogService(dialog, translation) {
            this.dialog = dialog;
            this.translation = translation;
            this.externalApis = {};
            this.error = new i0.EventEmitter();
        }
        AttachFileWidgetDialogService.prototype.openLogin = function (repository, currentFolderId, accountIdentifier) {
            if (currentFolderId === void 0) { currentFolderId = '-my-'; }
            var _b = this.constructPayload(repository), title = _b.title, ecmHost = _b.ecmHost, selected = _b.selected, registerExternalHost = _b.registerExternalHost;
            var data = {
                title: title,
                selected: selected,
                ecmHost: ecmHost,
                currentFolderId: currentFolderId,
                isSelectionValid: function (entry) { return entry.isFile; },
                showFilesInResult: true,
                registerExternalHost: registerExternalHost,
                accountIdentifier: accountIdentifier
            };
            this.openLoginDialog(data, 'adf-attach-file-widget-dialog', '630px');
            return selected;
        };
        AttachFileWidgetDialogService.prototype.openLoginDialog = function (data, currentPanelClass, chosenWidth) {
            this.dialog.open(AttachFileWidgetDialogComponent, { data: data, panelClass: currentPanelClass, width: chosenWidth });
        };
        AttachFileWidgetDialogService.prototype.showExternalHostLoginDialog = function (repository) {
            var data = Object.assign(Object.assign({}, this.constructPayload(repository)), { loginOnly: true });
            return this.dialog.open(AttachFileWidgetDialogComponent, { data: data, panelClass: 'adf-attach-file-widget-dialog', width: '630px' })
                .afterClosed();
        };
        AttachFileWidgetDialogService.prototype.downloadURL = function (repository, sourceId) {
            var _this = this;
            var _a;
            var accountIdentifier = this.constructPayload(repository).accountIdentifier;
            if ((_a = this.externalApis[accountIdentifier]) === null || _a === void 0 ? void 0 : _a.getInstance()) {
                var contentApi = new jsApi.ContentApi(this.externalApis[accountIdentifier].getInstance());
                if (this.externalApis[accountIdentifier].getInstance().isLoggedIn()) {
                    return rxjs.of(contentApi.getContentUrl(sourceId));
                }
            }
            return this.showExternalHostLoginDialog(repository).pipe(operators.switchMap(function () {
                var contentApi = new jsApi.ContentApi(_this.externalApis[accountIdentifier].getInstance());
                return rxjs.of(contentApi.getContentUrl(sourceId));
            }));
        };
        AttachFileWidgetDialogService.prototype.constructPayload = function (repository) {
            var accountIdentifier = 'alfresco-' + repository.id + '-' + repository.name;
            var ecmHost = repository.repositoryUrl.replace('/alfresco', '');
            var selected = new rxjs.Subject();
            selected.subscribe({
                complete: this.close.bind(this)
            });
            var title = this.getLoginTitleTranslation(ecmHost);
            var registerExternalHost = this.addService.bind(this);
            return { ecmHost: ecmHost, accountIdentifier: accountIdentifier, selected: selected, title: title, registerExternalHost: registerExternalHost };
        };
        AttachFileWidgetDialogService.prototype.addService = function (accountIdentifier, apiService) {
            if (!this.externalApis[accountIdentifier]) {
                this.externalApis[accountIdentifier] = apiService;
            }
        };
        AttachFileWidgetDialogService.prototype.close = function () {
            this.dialog.closeAll();
        };
        AttachFileWidgetDialogService.prototype.getLoginTitleTranslation = function (ecmHost) {
            return this.translation.instant("ATTACH-FILE.DIALOG.LOGIN", { ecmHost: ecmHost });
        };
        return AttachFileWidgetDialogService;
    }());
    AttachFileWidgetDialogService.ɵprov = i0.ɵɵdefineInjectable({ factory: function AttachFileWidgetDialogService_Factory() { return new AttachFileWidgetDialogService(i0.ɵɵinject(i1$1.MatDialog), i0.ɵɵinject(i1.TranslationService)); }, token: AttachFileWidgetDialogService, providedIn: "root" });
    AttachFileWidgetDialogService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    AttachFileWidgetDialogService.ctorParameters = function () { return [
        { type: i1$1.MatDialog },
        { type: i1.TranslationService }
    ]; };
    AttachFileWidgetDialogService.propDecorators = {
        error: [{ type: i0.Output }]
    };

    var AttachFileWidgetComponent = /** @class */ (function (_super) {
        __extends(AttachFileWidgetComponent, _super);
        function AttachFileWidgetComponent(formService, logger, thumbnails, processContentService, activitiContentService, contentService, contentDialog, appConfigService, downloadService, attachDialogService) {
            var _this = _super.call(this, formService, logger, thumbnails, processContentService) || this;
            _this.formService = formService;
            _this.logger = logger;
            _this.thumbnails = thumbnails;
            _this.processContentService = processContentService;
            _this.activitiContentService = activitiContentService;
            _this.contentService = contentService;
            _this.contentDialog = contentDialog;
            _this.appConfigService = appConfigService;
            _this.downloadService = downloadService;
            _this.attachDialogService = attachDialogService;
            _this.typeId = 'AttachFileWidgetComponent';
            _this.repositoryList = [];
            _this.tempFilesList = [];
            _this.onDestroy$ = new rxjs.Subject();
            return _this;
        }
        AttachFileWidgetComponent.prototype.ngOnInit = function () {
            var _this = this;
            _super.prototype.ngOnInit.call(this);
            this.activitiContentService.getAlfrescoRepositories().subscribe(function (repoList) {
                _this.repositoryList = repoList;
            });
            this.formService.taskSaved
                .pipe(operators.takeUntil(this.onDestroy$))
                .subscribe(function (formSaved) {
                if (formSaved.form.id === _this.field.form.id) {
                    _this.tempFilesList = [];
                }
            });
        };
        AttachFileWidgetComponent.prototype.ngOnDestroy = function () {
            this.onDestroy$.next(true);
            this.onDestroy$.complete();
        };
        AttachFileWidgetComponent.prototype.isFileSourceConfigured = function () {
            return !!this.field.params && !!this.field.params.fileSource;
        };
        AttachFileWidgetComponent.prototype.isMultipleSourceUpload = function () {
            return !this.field.readOnly && this.isFileSourceConfigured() && !this.isOnlyLocalSourceSelected();
        };
        AttachFileWidgetComponent.prototype.isAllFileSourceSelected = function () {
            return this.field.params &&
                this.field.params.fileSource &&
                this.field.params.fileSource.serviceId === 'all-file-sources' &&
                !this.field.params.link;
        };
        AttachFileWidgetComponent.prototype.isOnlyLocalSourceSelected = function () {
            return this.field.params &&
                this.field.params.fileSource &&
                this.field.params.fileSource.serviceId === 'local-file';
        };
        AttachFileWidgetComponent.prototype.isSimpleUploadButton = function () {
            return this.isUploadButtonVisible() &&
                !this.isFileSourceConfigured() ||
                this.isOnlyLocalSourceSelected();
        };
        AttachFileWidgetComponent.prototype.isUploadButtonVisible = function () {
            return (!this.hasFile || this.multipleOption) && !this.field.readOnly;
        };
        AttachFileWidgetComponent.prototype.isDefinedSourceFolder = function () {
            var _a, _b;
            return !!((_b = (_a = this.field.params) === null || _a === void 0 ? void 0 : _a.fileSource) === null || _b === void 0 ? void 0 : _b.selectedFolder);
        };
        AttachFileWidgetComponent.prototype.isTemporaryFile = function (file) {
            return this.tempFilesList.findIndex(function (elem) { return elem.name === file.name; }) >= 0;
        };
        AttachFileWidgetComponent.prototype.getNodeFromTempFile = function (file) {
            return this.tempFilesList.find(function (elem) { return elem.name === file.name; });
        };
        AttachFileWidgetComponent.prototype.openSelectDialogFromFileSource = function () {
            var _this = this;
            var _a, _b;
            var params = this.field.params;
            var repository = this.repositoryList.find(function (repo) { var _a; return repo.name === ((_a = params === null || params === void 0 ? void 0 : params.fileSource) === null || _a === void 0 ? void 0 : _a.name); });
            if (repository && this.isExternalHost(repository)) {
                this.uploadFileFromExternalCS(repository, (_b = (_a = params === null || params === void 0 ? void 0 : params.fileSource) === null || _a === void 0 ? void 0 : _a.selectedFolder) === null || _b === void 0 ? void 0 : _b.pathId);
            }
            else {
                this.contentDialog.openFileBrowseDialogByFolderId(params.fileSource.selectedFolder.pathId).subscribe(function (selections) {
                    var _c;
                    (_c = _this.tempFilesList).push.apply(_c, __spread(selections));
                    _this.uploadFileFromCS(selections, _this.field.params.fileSource.selectedFolder.accountId, _this.field.params.fileSource.selectedFolder.siteId);
                });
            }
        };
        AttachFileWidgetComponent.prototype.onAttachFileChanged = function (event) {
            var _c;
            (_c = this.tempFilesList).push.apply(_c, __spread(Array.from(event.target.files)));
            this.onFileChanged(event);
        };
        AttachFileWidgetComponent.prototype.onRemoveAttachFile = function (file) {
            if (this.isTemporaryFile(file)) {
                this.tempFilesList.splice(this.tempFilesList.indexOf(file.contentBlob), 1);
            }
            this.removeFile(file);
        };
        AttachFileWidgetComponent.prototype.onAttachFileClicked = function (file) {
            if (file.isExternal || !file.contentAvailable) {
                this.logger.info("The file " + file.name + " comes from an external source and cannot be showed at this moment");
                return;
            }
            if (this.isTemporaryFile(file)) {
                this.formService.formContentClicked.next(file);
            }
            else {
                this.fileClicked(file);
            }
        };
        AttachFileWidgetComponent.prototype.downloadContent = function (file) {
            var _this = this;
            if (this.isTemporaryFile(file)) {
                var fileBlob = file.contentBlob;
                if (fileBlob) {
                    this.downloadService.downloadBlob(fileBlob, file.name);
                }
                else {
                    var nodeUploaded = this.getNodeFromTempFile(file);
                    var nodeUrl = this.contentService.getContentUrl(nodeUploaded.id);
                    this.downloadService.downloadUrl(nodeUrl, file.name);
                }
            }
            if (file.sourceId) {
                var sourceHost = this.findSource(file.source);
                if (sourceHost && this.isExternalHost(sourceHost)) {
                    this.attachDialogService.downloadURL(sourceHost, file.sourceId).subscribe(function (nodeUrl) {
                        _this.downloadService.downloadUrl(nodeUrl, file.name);
                    });
                }
                else {
                    var nodeUrl = this.contentService.getContentUrl(file.sourceId);
                    this.downloadService.downloadUrl(nodeUrl, file.name);
                }
            }
            else {
                this.processContentService.getFileRawContent(file.id).subscribe(function (blob) {
                    _this.downloadService.downloadBlob(blob, file.name);
                }, function () {
                    _this.logger.error('Impossible retrieve content for download');
                });
            }
        };
        AttachFileWidgetComponent.prototype.openSelectDialog = function (repository) {
            var _this = this;
            if (this.isExternalHost(repository)) {
                this.uploadFileFromExternalCS(repository);
            }
            else {
                this.contentDialog.openFileBrowseDialogByDefaultLocation().subscribe(function (selections) {
                    var _c;
                    (_c = _this.tempFilesList).push.apply(_c, __spread(selections));
                    _this.uploadFileFromCS(selections, "alfresco-" + repository.id + "-" + repository.name);
                });
            }
        };
        AttachFileWidgetComponent.prototype.isExternalHost = function (repository) {
            var currentECMHost = this.getDomainHost(this.appConfigService.get(i1.AppConfigValues.ECMHOST));
            var chosenRepositoryHost = this.getDomainHost(repository.repositoryUrl);
            return chosenRepositoryHost !== currentECMHost;
        };
        AttachFileWidgetComponent.prototype.findSource = function (sourceIdentifier) {
            return this.repositoryList.find(function (repository) { return sourceIdentifier === "alfresco-" + repository.id + "-" + repository.name; });
        };
        AttachFileWidgetComponent.prototype.uploadFileFromExternalCS = function (repository, currentFolderId) {
            var _this = this;
            var accountIdentifier = "alfresco-" + repository.id + "-" + repository.name;
            this.attachDialogService.openLogin(repository, currentFolderId, accountIdentifier).subscribe(function (selections) {
                var _c;
                selections.forEach(function (node) { return node.isExternal = true; });
                (_c = _this.tempFilesList).push.apply(_c, __spread(selections));
                _this.uploadFileFromCS(selections, accountIdentifier);
            });
        };
        AttachFileWidgetComponent.prototype.uploadFileFromCS = function (fileNodeList, accountId, siteId) {
            var _this = this;
            var filesSaved = [];
            fileNodeList.forEach(function (node) {
                node.isLink = _this.field.params.link;
            });
            rxjs.from(fileNodeList).pipe(operators.mergeMap(function (node) {
                var _a;
                return rxjs.zip(rxjs.of((_a = node === null || node === void 0 ? void 0 : node.content) === null || _a === void 0 ? void 0 : _a.mimeType), _this.activitiContentService.applyAlfrescoNode(node, siteId, accountId), rxjs.of(node.isExternal));
            }))
                .subscribe(function (_c) {
                var _d = __read(_c, 3), mimeType = _d[0], res = _d[1], isExternal = _d[2];
                res.mimeType = mimeType;
                res.isExternal = isExternal;
                filesSaved.push(res);
            }, function (error) {
                _this.logger.error(error);
            }, function () {
                var previousFiles = _this.field.value ? _this.field.value : [];
                _this.field.value = __spread(previousFiles, filesSaved);
                _this.field.json.value = __spread(previousFiles, filesSaved);
                _this.hasFile = true;
            });
        };
        AttachFileWidgetComponent.prototype.getDomainHost = function (urlToCheck) {
            var result = urlToCheck.match('^(?:https?:\/\/)?(?:[^@\/\n]+@)?(?:www\.)?([^:\/?\n]+)');
            return result[1];
        };
        return AttachFileWidgetComponent;
    }(i1.UploadWidgetComponent));
    AttachFileWidgetComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'attach-widget',
                    template: "<div class=\"adf-attach-widget {{field.className}}\"\n    [class.adf-invalid]=\"!field.isValid\"\n    [class.adf-readonly]=\"field.readOnly\">\n    <label class=\"adf-label\" [attr.for]=\"field.id\">{{field.name | translate}}\n        <span *ngIf=\"isRequired()\">*</span>\n    </label>\n    <div class=\"adf-attach-widget-container\">\n        <div id=\"adf-attach-widget-simple-upload\" *ngIf=\"isSimpleUploadButton() && isUploadButtonVisible()\">\n            <a mat-raised-button color=\"primary\">\n                {{ 'FORM.FIELD.UPLOAD' | translate }}\n                <mat-icon>file_upload</mat-icon>\n                <input #uploadFiles\n                        [multiple]=\"multipleOption\"\n                        type=\"file\"\n                        [id]=\"field.id\"\n                        (change)=\"onAttachFileChanged($event)\" />\n            </a>\n        </div>\n        <div class=\"adf-attach-widget__menu-upload\" *ngIf=\"isUploadButtonVisible() && isMultipleSourceUpload()\">\n            <button mat-raised-button color=\"primary\" [matMenuTriggerFor]=\"menu\" [id]=\"field.id\">\n                    {{ 'FORM.FIELD.UPLOAD' | translate }}\n                    <mat-icon>attach_file</mat-icon>\n            </button>\n            <mat-menu #menu=\"matMenu\" class=\"adf-attach-widget__menu-content\">\n                <button mat-menu-item (click)=\"uploadFile.click()\"\n                        id=\"attach-local-file\"\n                        *ngIf=\"isAllFileSourceSelected()\">\n                    {{ 'FORM.FIELD.LOCALSTORAGE' | translate }}\n                    <mat-icon>file_upload</mat-icon>\n                    <input #uploadFile\n                            class=\"adf-attach-widget__input-type\"\n                            [multiple]=\"multipleOption\"\n                            type=\"file\"\n                            [id]=\"field.id\"\n                            (change)=\"onAttachFileChanged($event)\" />\n                </button>\n                <button mat-menu-item\n                        *ngIf=\"isDefinedSourceFolder()\"\n                        id=\"attach-{{field.params?.fileSource?.name}}\"\n                        (click)=\"openSelectDialogFromFileSource()\">\n                        {{field.params?.fileSource?.name}}\n                        <mat-icon>\n                            <img alt=\"alfresco\" class=\"adf-attach-widget__image-logo\" src=\"../assets/images/alfresco-flower.svg\">\n                        </mat-icon>\n                </button>\n                <div *ngIf=\"!isDefinedSourceFolder()\">\n                    <button mat-menu-item *ngFor=\"let repo of repositoryList\"\n                            id=\"attach-{{repo?.name}}\"\n                           (click)=\"openSelectDialog(repo)\">\n                            {{repo.name}}\n                            <mat-icon>\n                                <img alt=\"alfresco\" class=\"adf-attach-widget__image-logo\" src=\"../assets/images/alfresco-flower.svg\">\n                            </mat-icon>\n                    </button>\n                </div>\n            </mat-menu>\n        </div>\n    </div>\n</div>\n\n<div id=\"adf-attach-widget-readonly-list\">\n    <mat-list *ngIf=\"hasFile\">\n        <mat-list-item class=\"adf-attach-files-row\" *ngFor=\"let file of field.value\">\n            <img mat-list-icon class=\"adf-attach-widget__icon\"\n                 [id]=\"'file-'+file.id+'-icon'\"\n                 [src]=\"file.content ? getIcon(file.content.mimeType) : getIcon(file.mimeType)\"\n                 [alt]=\"mimeTypeIcon\"\n                 (click)=\"onAttachFileClicked(file)\"\n                 (keyup.enter)=\"onAttachFileClicked(file)\"\n                 role=\"button\"\n                 tabindex=\"0\"/>\n            <span matLine id=\"{{'file-'+file.id}}\" (click)=\"onAttachFileClicked(file)\" (keyup.enter)=\"onAttachFileClicked(file)\"\n                  role=\"button\" tabindex=\"0\" class=\"adf-file\">{{file.name}}</span>\n            <button id=\"{{'file-'+file.id+'-option-menu'}}\" mat-icon-button [matMenuTriggerFor]=\"fileActionMenu\">\n                <mat-icon>more_vert</mat-icon>\n            </button>\n            <mat-menu #fileActionMenu=\"matMenu\" xPosition=\"before\">\n                <button id=\"{{'file-'+file.id+'-show-file'}}\"\n                    [disabled]=\"file.isExternal || !file.contentAvailable || !file.mimeType\"\n                    mat-menu-item (click)=\"onAttachFileClicked(file)\">\n                    <mat-icon>visibility</mat-icon>\n                    <span>{{ 'FORM.FIELD.VIEW_FILE' | translate }}</span>\n                </button>\n                <button id=\"{{'file-'+file.id+'-download-file'}}\"\n                    [disabled]=\"file.isExternal || !file.mimeType\"\n                    mat-menu-item (click)=\"downloadContent(file)\">\n                    <mat-icon>file_download</mat-icon>\n                    <span>{{ 'FORM.FIELD.DOWNLOAD_FILE' | translate }}</span>\n                </button>\n                <button *ngIf=\"!field.readOnly\" id=\"{{'file-'+file.id+'-remove-file'}}\"\n                        mat-menu-item [id]=\"'file-'+file.id+'-remove'\"\n                        (click)=\"onRemoveAttachFile(file);\" (keyup.enter)=\"onRemoveAttachFile(file);\">\n                    <mat-icon class=\"mat-24\">highlight_off</mat-icon>\n                    <span>{{ 'FORM.FIELD.REMOVE_FILE' | translate }}</span>\n                </button>\n            </mat-menu>\n        </mat-list-item>\n    </mat-list>\n</div>\n\n<error-widget [error]=\"field.validationSummary\"></error-widget>\n<error-widget *ngIf=\"isInvalidFieldRequired()\" required=\"{{ 'FORM.FIELD.REQUIRED' | translate }}\"></error-widget>\n",
                    host: {
                        '(click)': 'event($event)',
                        '(blur)': 'event($event)',
                        '(change)': 'event($event)',
                        '(focus)': 'event($event)',
                        '(focusin)': 'event($event)',
                        '(focusout)': 'event($event)',
                        '(input)': 'event($event)',
                        '(invalid)': 'event($event)',
                        '(select)': 'event($event)'
                    },
                    encapsulation: i0.ViewEncapsulation.None,
                    styles: [".adf-attach-widget-container{align-items:center;display:flex;margin-bottom:15px}.adf-attach-widget-container input{cursor:pointer;height:100%;opacity:0;position:absolute;right:0;top:0;width:300px;z-index:4}.adf-attach-widget__menu-upload{align-items:center;display:flex}.adf-attach-widget__input-type{height:.1px;opacity:0;overflow:hidden;position:absolute;width:.1px;z-index:-1}.adf-attach-widget__image-logo{padding-left:5px}.adf-attach-widget-repo-button{padding-left:10px}.adf-attach-widget-repo-button .mat-button-wrapper{display:inline}.adf-attach-widget-repo-button .mat-mini-fab.mat-accent{background-color:inherit}.adf-attach-widget{border-top:.84375em solid transparent;padding:.4375em 0;width:100%;word-break:break-all}.adf-attach-widget__icon{cursor:pointer;float:left;padding:6px}.adf-attach-widget__reset{margin-top:-2px}.adf-attach-files-row .mat-line{margin-bottom:0}"]
                },] }
    ];
    AttachFileWidgetComponent.ctorParameters = function () { return [
        { type: i1.FormService },
        { type: i1.LogService },
        { type: i1.ThumbnailService },
        { type: i1.ProcessContentService },
        { type: i1.ActivitiContentService },
        { type: i1.ContentService },
        { type: adfContentServices.ContentNodeDialogService },
        { type: i1.AppConfigService },
        { type: i1.DownloadService },
        { type: AttachFileWidgetDialogService }
    ]; };

    var AttachFolderWidgetComponent = /** @class */ (function (_super) {
        __extends(AttachFolderWidgetComponent, _super);
        function AttachFolderWidgetComponent(contentDialog, formService, nodeService) {
            var _this = _super.call(this) || this;
            _this.contentDialog = contentDialog;
            _this.formService = formService;
            _this.nodeService = nodeService;
            _this.typeId = 'AttachFolderWidgetComponent';
            _this.hasFolder = false;
            _this.selectedFolderName = '';
            return _this;
        }
        AttachFolderWidgetComponent.prototype.ngOnInit = function () {
            var _this = this;
            if (this.field &&
                this.field.value) {
                this.hasFolder = true;
                this.nodeService.getNode(this.field.value).subscribe(function (node) {
                    _this.selectedFolderName = node.name;
                });
            }
        };
        AttachFolderWidgetComponent.prototype.isDefinedSourceFolder = function () {
            return !!this.field.params &&
                !!this.field.params.folderSource &&
                !!this.field.params.folderSource.selectedFolder;
        };
        AttachFolderWidgetComponent.prototype.openSelectDialogFromFileSource = function () {
            var _this = this;
            var params = this.field.params;
            if (this.isDefinedSourceFolder()) {
                this.contentDialog.openFolderBrowseDialogByFolderId(params.folderSource.selectedFolder.pathId).subscribe(function (selections) {
                    _this.selectedFolderName = selections[0].name;
                    _this.field.value = selections[0].id;
                    _this.hasFolder = true;
                });
            }
            else {
                this.contentDialog.openFolderBrowseDialogBySite().subscribe(function (selections) {
                    _this.selectedFolderName = selections[0].name;
                    _this.field.value = selections[0].id;
                    _this.hasFolder = true;
                });
            }
        };
        AttachFolderWidgetComponent.prototype.removeFolder = function () {
            this.field.value = null;
            this.selectedFolderName = '';
            this.hasFolder = false;
        };
        return AttachFolderWidgetComponent;
    }(i1.WidgetComponent));
    AttachFolderWidgetComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'attach-folder-widget',
                    template: "<div class=\"adf-attach-folder-widget {{field.className}}\"\n     [class.adf-invalid]=\"!field.isValid\"\n     [class.adf-readonly]=\"field.readOnly\">\n    <label class=\"adf-label\" [attr.for]=\"field.id\">{{field.name | translate}}<span *ngIf=\"isRequired()\">*</span></label>\n    <div class=\"adf-attach-folder-widget-container\">\n        <div *ngIf=\"hasFolder\" class=\"adf-attach-folder-result\">\n            <mat-icon>folder</mat-icon>\n            <div class=\"adf-attach-folder-files-row\">\n                <span matLine id=\"{{'folder-'+field?.id}}\"\n                        role=\"button\" tabindex=\"0\" class=\"adf-folder\">{{selectedFolderName}}</span>\n                <button *ngIf=\"!field.readOnly\" mat-icon-button [id]=\"'folder-'+field?.id+'-remove'\"\n                        (click)=\"removeFolder();\">\n                    <mat-icon class=\"mat-24\">highlight_off</mat-icon>\n                </button>\n            </div>\n        </div>\n\n        <div *ngIf=\"!hasFolder && !field.readOnly\">\n            <button mat-raised-button\n                color=\"primary\"\n                (click)=\"openSelectDialogFromFileSource()\"\n                [id]=\"'folder-'+field?.id+'-button'\">\n                    {{ 'FORM.FIELD.UPLOAD' | translate }}\n                <mat-icon>cloud_upload</mat-icon>\n            </button>\n        </div>\n    </div>\n    <error-widget [error]=\"field.validationSummary\"></error-widget>\n    <error-widget *ngIf=\"isInvalidFieldRequired()\" required=\"{{ 'FORM.FIELD.REQUIRED' | translate }}\"></error-widget>\n</div>\n",
                    host: {
                        '(click)': 'event($event)',
                        '(blur)': 'event($event)',
                        '(change)': 'event($event)',
                        '(focus)': 'event($event)',
                        '(focusin)': 'event($event)',
                        '(focusout)': 'event($event)',
                        '(input)': 'event($event)',
                        '(invalid)': 'event($event)',
                        '(select)': 'event($event)'
                    },
                    encapsulation: i0.ViewEncapsulation.None,
                    styles: [".adf-attach-folder-widget-container{align-items:center;display:flex;margin-bottom:15px}.adf-attach-folder-widget-container input{cursor:pointer;height:100%;opacity:0;position:absolute;right:0;top:0;width:300px;z-index:4}.adf-attach-folder-widget{border-top:.84375em solid transparent;padding:.4375em 0;width:100%;word-break:break-all}.adf-attach-folder-files-row{padding-left:8px}.adf-attach-folder-files-row .mat-line{margin-bottom:0}.adf-attach-folder-result{align-items:center;display:flex}"]
                },] }
    ];
    AttachFolderWidgetComponent.ctorParameters = function () { return [
        { type: adfContentServices.ContentNodeDialogService },
        { type: i1.FormService },
        { type: i1.NodesApiService }
    ]; };

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var ContentWidgetModule = /** @class */ (function () {
        function ContentWidgetModule() {
        }
        return ContentWidgetModule;
    }());
    ContentWidgetModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [
                        i1.CoreModule,
                        adfContentServices.ContentNodeSelectorModule,
                        MaterialModule
                    ],
                    declarations: [
                        AttachFileWidgetComponent,
                        AttachFolderWidgetComponent,
                        AttachFileWidgetDialogComponent
                    ],
                    exports: [
                        AttachFileWidgetComponent,
                        AttachFolderWidgetComponent,
                        AttachFileWidgetDialogComponent
                    ]
                },] }
    ];

    var FormComponent = /** @class */ (function (_super) {
        __extends(FormComponent, _super);
        function FormComponent(formService, visibilityService, ecmModelService, nodeService) {
            var _this = _super.call(this) || this;
            _this.formService = formService;
            _this.visibilityService = visibilityService;
            _this.ecmModelService = ecmModelService;
            _this.nodeService = nodeService;
            _this.saveMetadata = false;
            _this.enableFixedSpacedForm = true;
            _this.formSaved = new i0.EventEmitter();
            _this.formCompleted = new i0.EventEmitter();
            _this.formContentClicked = new i0.EventEmitter();
            _this.formLoaded = new i0.EventEmitter();
            _this.formDataRefreshed = new i0.EventEmitter();
            _this.debugMode = false;
            _this.onDestroy$ = new rxjs.Subject();
            return _this;
        }
        FormComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.formService.formContentClicked
                .pipe(operators.takeUntil(this.onDestroy$))
                .subscribe(function (content) { return _this.formContentClicked.emit(content); });
            this.formService.validateForm
                .pipe(operators.takeUntil(this.onDestroy$))
                .subscribe(function (validateFormEvent) {
                if (validateFormEvent.errorsField.length > 0) {
                    _this.formError.next(validateFormEvent.errorsField);
                }
            });
        };
        FormComponent.prototype.ngOnDestroy = function () {
            this.onDestroy$.next(true);
            this.onDestroy$.complete();
        };
        FormComponent.prototype.ngOnChanges = function (changes) {
            var taskId = changes['taskId'];
            if (taskId && taskId.currentValue) {
                this.getFormByTaskId(taskId.currentValue);
                return;
            }
            var formId = changes['formId'];
            if (formId && formId.currentValue) {
                this.getFormDefinitionByFormId(formId.currentValue);
                return;
            }
            var formName = changes['formName'];
            if (formName && formName.currentValue) {
                this.getFormDefinitionByFormName(formName.currentValue);
                return;
            }
            var nodeId = changes['nodeId'];
            if (nodeId && nodeId.currentValue) {
                this.loadFormForEcmNode(nodeId.currentValue);
                return;
            }
            var data = changes['data'];
            if (data && data.currentValue) {
                this.refreshFormData();
                return;
            }
        };
        FormComponent.prototype.onRefreshClicked = function () {
            this.loadForm();
        };
        FormComponent.prototype.loadForm = function () {
            if (this.taskId) {
                this.getFormByTaskId(this.taskId);
                return;
            }
            if (this.formId) {
                this.getFormDefinitionByFormId(this.formId);
                return;
            }
            if (this.formName) {
                this.getFormDefinitionByFormName(this.formName);
                return;
            }
        };
        FormComponent.prototype.findProcessVariablesByTaskId = function (taskId) {
            var _this = this;
            return this.formService.getTask(taskId).pipe(operators.switchMap(function (task) {
                if (_this.isAProcessTask(task)) {
                    return _this.visibilityService.getTaskProcessVariable(taskId);
                }
                else {
                    return rxjs.of({});
                }
            }));
        };
        FormComponent.prototype.isAProcessTask = function (taskRepresentation) {
            return taskRepresentation.processDefinitionId && taskRepresentation.processDefinitionDeploymentId !== 'null';
        };
        FormComponent.prototype.getFormByTaskId = function (taskId) {
            var _this = this;
            return new Promise(function (resolve) {
                _this.findProcessVariablesByTaskId(taskId).subscribe(function () {
                    _this.formService
                        .getTaskForm(taskId)
                        .subscribe(function (form) {
                        var parsedForm = _this.parseForm(form);
                        _this.visibilityService.refreshVisibility(parsedForm);
                        parsedForm.validateForm();
                        _this.form = parsedForm;
                        _this.onFormLoaded(_this.form);
                        resolve(_this.form);
                    }, function (error) {
                        _this.handleError(error);
                        resolve(null);
                    });
                });
            });
        };
        FormComponent.prototype.getFormDefinitionByFormId = function (formId) {
            var _this = this;
            this.formService
                .getFormDefinitionById(formId)
                .subscribe(function (form) {
                _this.formName = form.name;
                _this.form = _this.parseForm(form);
                _this.visibilityService.refreshVisibility(_this.form);
                _this.form.validateForm();
                _this.onFormLoaded(_this.form);
            }, function (error) {
                _this.handleError(error);
            });
        };
        FormComponent.prototype.getFormDefinitionByFormName = function (formName) {
            var _this = this;
            this.formService
                .getFormDefinitionByName(formName)
                .subscribe(function (id) {
                _this.formService.getFormDefinitionById(id).subscribe(function (form) {
                    _this.form = _this.parseForm(form);
                    _this.visibilityService.refreshVisibility(_this.form);
                    _this.form.validateForm();
                    _this.onFormLoaded(_this.form);
                }, function (error) {
                    _this.handleError(error);
                });
            }, function (error) {
                _this.handleError(error);
            });
        };
        FormComponent.prototype.saveTaskForm = function () {
            var _this = this;
            if (this.form && this.form.taskId) {
                this.formService
                    .saveTaskForm(this.form.taskId, this.form.values)
                    .subscribe(function () {
                    _this.onTaskSaved(_this.form);
                    _this.storeFormAsMetadata();
                }, function (error) { return _this.onTaskSavedError(_this.form, error); });
            }
        };
        FormComponent.prototype.completeTaskForm = function (outcome) {
            var _this = this;
            if (this.form && this.form.taskId) {
                this.formService
                    .completeTaskForm(this.form.taskId, this.form.values, outcome)
                    .subscribe(function () {
                    _this.onTaskCompleted(_this.form);
                    _this.storeFormAsMetadata();
                }, function (error) { return _this.onTaskCompletedError(_this.form, error); });
            }
        };
        FormComponent.prototype.handleError = function (err) {
            this.error.emit(err);
        };
        FormComponent.prototype.parseForm = function (formRepresentationJSON) {
            if (formRepresentationJSON) {
                var form = new i1.FormModel(formRepresentationJSON, this.data, this.readOnly, this.formService, this.enableFixedSpacedForm);
                if (!formRepresentationJSON.fields) {
                    form.outcomes = this.getFormDefinitionOutcomes(form);
                }
                if (this.fieldValidators && this.fieldValidators.length > 0) {
                    form.fieldValidators = this.fieldValidators;
                }
                return form;
            }
            return null;
        };
        FormComponent.prototype.getFormDefinitionOutcomes = function (form) {
            return [
                new i1.FormOutcomeModel(form, { id: '$save', name: i1.FormOutcomeModel.SAVE_ACTION, isSystem: true })
            ];
        };
        FormComponent.prototype.checkVisibility = function (field) {
            if (field && field.form) {
                this.visibilityService.refreshVisibility(field.form);
            }
        };
        FormComponent.prototype.refreshFormData = function () {
            this.form = this.parseForm(this.form.json);
            this.onFormLoaded(this.form);
            this.onFormDataRefreshed(this.form);
        };
        FormComponent.prototype.loadFormForEcmNode = function (nodeId) {
            var _this = this;
            this.nodeService.getNodeMetadata(nodeId).subscribe(function (data) {
                _this.data = data.metadata;
                _this.loadFormFromActiviti(data.nodeType);
            }, this.handleError);
        };
        FormComponent.prototype.loadFormFromActiviti = function (nodeType) {
            var _this = this;
            this.formService.searchFrom(nodeType).subscribe(function (form) {
                if (!form) {
                    _this.formService.createFormFromANode(nodeType).subscribe(function (formMetadata) {
                        _this.loadFormFromFormId(formMetadata.id);
                    });
                }
                else {
                    _this.loadFormFromFormId(form.id);
                }
            }, function (error) {
                _this.handleError(error);
            });
        };
        FormComponent.prototype.loadFormFromFormId = function (formId) {
            this.formId = formId;
            this.loadForm();
        };
        FormComponent.prototype.storeFormAsMetadata = function () {
            var _this = this;
            if (this.saveMetadata) {
                this.ecmModelService.createEcmTypeForActivitiForm(this.formName, this.form).subscribe(function (type) {
                    _this.nodeService.createNodeMetadata(type.nodeType || type.entry.prefixedName, i1.EcmModelService.MODEL_NAMESPACE, _this.form.values, _this.path, _this.nameNode);
                }, function (error) {
                    _this.handleError(error);
                });
            }
        };
        FormComponent.prototype.onFormLoaded = function (form) {
            this.formLoaded.emit(form);
            this.formService.formLoaded.next(new i1.FormEvent(form));
        };
        FormComponent.prototype.onFormDataRefreshed = function (form) {
            this.formDataRefreshed.emit(form);
            this.formService.formDataRefreshed.next(new i1.FormEvent(form));
        };
        FormComponent.prototype.onTaskSaved = function (form) {
            this.formSaved.emit(form);
            this.formService.taskSaved.next(new i1.FormEvent(form));
        };
        FormComponent.prototype.onTaskSavedError = function (form, error) {
            this.handleError(error);
            this.formService.taskSavedError.next(new i1.FormErrorEvent(form, error));
        };
        FormComponent.prototype.onTaskCompleted = function (form) {
            this.formCompleted.emit(form);
            this.formService.taskCompleted.next(new i1.FormEvent(form));
        };
        FormComponent.prototype.onTaskCompletedError = function (form, error) {
            this.handleError(error);
            this.formService.taskCompletedError.next(new i1.FormErrorEvent(form, error));
        };
        FormComponent.prototype.onExecuteOutcome = function (outcome) {
            var args = new i1.FormOutcomeEvent(outcome);
            this.formService.executeOutcome.next(args);
            if (args.defaultPrevented) {
                return false;
            }
            this.executeOutcome.emit(args);
            return !args.defaultPrevented;
        };
        return FormComponent;
    }(i1.FormBaseComponent));
    FormComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'adf-form',
                    template: "<div *ngIf=\"!hasForm()\">\n    <ng-content select=\"[empty-form]\">\n    </ng-content>\n</div>\n\n<div *ngIf=\"hasForm()\" class=\"adf-form-container\">\n    <mat-card>\n        <mat-card-header>\n            <mat-card-title>\n                <h4>\n                    <div *ngIf=\"showValidationIcon\" class=\"adf-form-validation-button\">\n                        <i id=\"adf-valid-form-icon\" class=\"material-icons\"\n                            *ngIf=\"form.isValid; else no_valid_form\">check_circle</i>\n                        <ng-template #no_valid_form>\n                            <i id=\"adf-invalid-form-icon\" class=\"material-icons adf-invalid-color\">error</i>\n                        </ng-template>\n                    </div>\n                    <div *ngIf=\"showRefreshButton\" class=\"adf-form-reload-button\">\n                        <button mat-icon-button (click)=\"onRefreshClicked()\">\n                            <mat-icon>refresh</mat-icon>\n                        </button>\n                    </div>\n                    <span *ngIf=\"isTitleEnabled()\" class=\"adf-form-title\" [matTooltip]=\"form.taskName\">\n                        {{form.taskName}}\n                        <ng-container *ngIf=\"!form.taskName\">\n                            {{'FORM.FORM_RENDERER.NAMELESS_TASK' | translate}}\n                        </ng-container>\n                    </span>\n                </h4>\n            </mat-card-title>\n        </mat-card-header>\n        <mat-card-content>\n            <adf-form-renderer [formDefinition]=\"form\">\n            </adf-form-renderer>\n        </mat-card-content>\n        <mat-card-actions *ngIf=\"form.hasOutcomes()\" class=\"adf-form-mat-card-actions\">\n            <ng-content select=\"adf-form-custom-outcomes\"></ng-content>\n            <button [id]=\"'adf-form-'+ outcome.name  | formatSpace\" *ngFor=\"let outcome of form.outcomes\"\n                [color]=\"getColorForOutcome(outcome.name)\" mat-button [disabled]=\"!isOutcomeButtonEnabled(outcome)\"\n                [class.adf-form-hide-button]=\"!isOutcomeButtonVisible(outcome, form.readOnly)\"\n                (click)=\"onOutcomeClicked(outcome)\">\n                {{outcome.name | translate | uppercase }}\n            </button>\n        </mat-card-actions>\n    </mat-card>\n</div>\n",
                    encapsulation: i0.ViewEncapsulation.None
                },] }
    ];
    FormComponent.ctorParameters = function () { return [
        { type: i1.FormService },
        { type: i1.WidgetVisibilityService },
        { type: i1.EcmModelService },
        { type: i1.NodeService }
    ]; };
    FormComponent.propDecorators = {
        form: [{ type: i0.Input }],
        taskId: [{ type: i0.Input }],
        nodeId: [{ type: i0.Input }],
        formId: [{ type: i0.Input }],
        formName: [{ type: i0.Input }],
        saveMetadata: [{ type: i0.Input }],
        data: [{ type: i0.Input }],
        enableFixedSpacedForm: [{ type: i0.Input }],
        formSaved: [{ type: i0.Output }],
        formCompleted: [{ type: i0.Output }],
        formContentClicked: [{ type: i0.Output }],
        formLoaded: [{ type: i0.Output }],
        formDataRefreshed: [{ type: i0.Output }]
    };

    var StartFormComponent = /** @class */ (function (_super) {
        __extends(StartFormComponent, _super);
        function StartFormComponent(formService, visibilityService) {
            var _this = _super.call(this, formService, visibilityService, null, null) || this;
            _this.showOutcomeButtons = true;
            _this.showRefreshButton = true;
            _this.readOnlyForm = false;
            _this.outcomeClick = new i0.EventEmitter();
            _this.formContentClicked = new i0.EventEmitter();
            _this.outcomesContainer = null;
            _this.showTitle = false;
            return _this;
        }
        StartFormComponent.prototype.ngOnChanges = function (changes) {
            var processDefinitionId = changes['processDefinitionId'];
            if (processDefinitionId && processDefinitionId.currentValue) {
                this.processDefinitionId = processDefinitionId.currentValue;
                this.visibilityService.cleanProcessVariable();
                this.getStartFormDefinition(this.processDefinitionId);
                return;
            }
            var data = changes['data'];
            if (data && data.currentValue) {
                this.parseRefreshVisibilityValidateForm(this.form.json);
                return;
            }
            var processId = changes['processId'];
            if (processId && processId.currentValue) {
                this.visibilityService.cleanProcessVariable();
                this.loadStartForm(processId.currentValue);
                return;
            }
        };
        StartFormComponent.prototype.loadStartForm = function (processId) {
            var _this = this;
            this.formService.getProcessInstance(processId)
                .subscribe(function (instance) {
                _this.formService
                    .getStartFormInstance(processId)
                    .subscribe(function (form) {
                    _this.formName = form.name;
                    if (instance.variables) {
                        form.processVariables = instance.variables;
                    }
                    _this.parseRefreshVisibilityValidateForm(form);
                }, function (error) { return _this.handleError(error); });
            });
        };
        StartFormComponent.prototype.getStartFormDefinition = function (processId) {
            var _this = this;
            this.formService
                .getStartFormDefinition(processId)
                .subscribe(function (form) {
                _this.formName = form.processDefinitionName;
                _this.parseRefreshVisibilityValidateForm(form);
            }, function (error) { return _this.handleError(error); });
        };
        StartFormComponent.prototype.parseRefreshVisibilityValidateForm = function (form) {
            this.form = this.parseForm(form);
            this.visibilityService.refreshVisibility(this.form);
            this.form.validateForm();
            this.form.readOnly = this.readOnlyForm;
            this.onFormLoaded(this.form);
        };
        StartFormComponent.prototype.isOutcomeButtonVisible = function (outcome, isFormReadOnly) {
            if (outcome && outcome.isSystem && (outcome.name === i1.FormOutcomeModel.SAVE_ACTION ||
                outcome.name === i1.FormOutcomeModel.COMPLETE_ACTION)) {
                return false;
            }
            else if (outcome && outcome.name === i1.FormOutcomeModel.START_PROCESS_ACTION) {
                return true;
            }
            return _super.prototype.isOutcomeButtonVisible.call(this, outcome, isFormReadOnly);
        };
        StartFormComponent.prototype.saveTaskForm = function () {
        };
        StartFormComponent.prototype.onRefreshClicked = function () {
            if (this.processDefinitionId) {
                this.visibilityService.cleanProcessVariable();
                this.getStartFormDefinition(this.processDefinitionId);
            }
            else if (this.processId) {
                this.visibilityService.cleanProcessVariable();
                this.loadStartForm(this.processId);
            }
        };
        StartFormComponent.prototype.completeTaskForm = function (outcome) {
            this.outcomeClick.emit(outcome);
        };
        return StartFormComponent;
    }(FormComponent));
    StartFormComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'adf-start-form',
                    template: "<div class=\"adf-start-form-container\" *ngIf=\"hasForm()\">\n    <mat-card>\n        <mat-card-header>\n            <mat-card-title>\n                <h2 *ngIf=\"isTitleEnabled()\" class=\"mdl-card__title-text\">{{form.taskName}}</h2>\n            </mat-card-title>\n        </mat-card-header>\n        <mat-card-content>\n            <div *ngIf=\"form.hasTabs()\">\n                <tabs-widget [tabs]=\"form.tabs\" (formTabChanged)=\"checkVisibility($event);\"></tabs-widget>\n            </div>\n\n            <div *ngIf=\"!form.hasTabs() && form.hasFields()\">\n                <div *ngFor=\"let field of form.fields\">\n                    <adf-form-field [field]=\"field.field\"></adf-form-field>\n                </div>\n            </div>\n        </mat-card-content>\n        <mat-card-content class=\"adf-start-form-actions\" *ngIf=\"showOutcomeButtons && form.hasOutcomes()\"\n                          #outcomesContainer>\n            <ng-content select=\"[adf-form-custom-button], [form-custom-button]\"></ng-content>\n\n            <button *ngFor=\"let outcome of form.outcomes\"\n                    mat-button\n                    [attr.data-automation-id]=\"'adf-form-' + outcome.name  | lowercase\"\n                    [disabled]=\"!isOutcomeButtonEnabled(outcome)\"\n                    [class.mdl-button--colored]=\"!outcome.isSystem\"\n                    [class.adf-form-hide-button]=\"!isOutcomeButtonVisible(outcome, form.readOnly)\"\n                    (click)=\"onOutcomeClicked(outcome)\">\n                {{ outcome.name | uppercase | translate | uppercase }}\n            </button>\n        </mat-card-content>\n        <mat-card-actions *ngIf=\"showRefreshButton\">\n            <button mat-button\n                    (click)=\"onRefreshClicked()\">\n                <mat-icon>refresh</mat-icon>\n            </button>\n        </mat-card-actions>\n    </mat-card>\n</div>\n",
                    encapsulation: i0.ViewEncapsulation.None,
                    styles: [".adf-form-container{max-height:100%!important;max-width:100%!important}.adf-form-container .mat-card{overflow:hidden;padding:16px 24px}.adf-form-container .mat-card-header-text{margin:0!important}.adf-form-container .mat-tab-body-content{overflow:hidden}.adf-form-container .mat-tab-label{color:var(--theme-text-color);font-size:var(--theme-subheading-2-font-size);letter-spacing:-.4px;line-height:var(--theme-headline-line-height);text-align:left;text-transform:uppercase}.adf-form-container .mat-ink-bar{height:4px}.adf-form-container .mat-form-field-wrapper{margin:0 12px 0 0}.adf-form-title{font-size:var(--theme-title-font-size)}.adf-form-debug-container{padding:10px}.adf-form-debug-container .adf-debug-toggle-text{cursor:pointer;padding-left:15px}.adf-form-debug-container .adf-debug-toggle-text:hover{font-weight:700}.adf-form-reload-button{position:absolute;right:12px;top:30px}.adf-form-validation-button{color:var(--theme-accent-color);position:absolute;right:50px;top:39px}.adf-form-validation-button .adf-invalid-color{color:var(--theme-warn-color)}.adf-form-hide-button{display:none!important}.adf-task-title{text-align:center}.adf-label{font-size:var(--theme-caption-font-size);height:16px;line-height:var(--theme-headline-line-height);text-align:left;white-space:nowrap;width:32px}.adf-form-mat-card-actions{float:right;padding-bottom:25px!important;padding-right:25px!important}.adf-form-mat-card-actions .mat-button{border-radius:5px;height:36px}.adf-form-mat-card-actions .mat-button-wrapper{font-size:var(--theme-body-2-font-size);font-weight:700;height:20px;opacity:.54;width:58px}form-field{width:100%}form-field .mat-input-element{font-size:var(--theme-body-2-font-size);line-height:normal;padding-top:8px}[dir=rtl] .adf-form-validation-button{left:50px;right:unset}"]
                },] }
    ];
    StartFormComponent.ctorParameters = function () { return [
        { type: i1.FormService },
        { type: i1.WidgetVisibilityService }
    ]; };
    StartFormComponent.propDecorators = {
        processDefinitionId: [{ type: i0.Input }],
        processId: [{ type: i0.Input }],
        showOutcomeButtons: [{ type: i0.Input }],
        showRefreshButton: [{ type: i0.Input }],
        readOnlyForm: [{ type: i0.Input }],
        outcomeClick: [{ type: i0.Output }],
        formContentClicked: [{ type: i0.Output }],
        outcomesContainer: [{ type: i0.ViewChild, args: ['outcomesContainer',] }]
    };

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var FormCustomOutcomesComponent = /** @class */ (function () {
        function FormCustomOutcomesComponent() {
        }
        return FormCustomOutcomesComponent;
    }());
    FormCustomOutcomesComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'adf-form-custom-outcomes',
                    template: '<ng-content></ng-content>'
                },] }
    ];

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var FormModule = /** @class */ (function () {
        function FormModule() {
        }
        return FormModule;
    }());
    FormModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [
                        i1.CoreModule,
                        MaterialModule
                    ],
                    declarations: [
                        FormComponent,
                        StartFormComponent,
                        FormCustomOutcomesComponent
                    ],
                    exports: [
                        FormComponent,
                        StartFormComponent,
                        FormCustomOutcomesComponent
                    ]
                },] }
    ];

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var TaskListModule = /** @class */ (function () {
        function TaskListModule() {
        }
        return TaskListModule;
    }());
    TaskListModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [
                        common.CommonModule,
                        flexLayout.FlexLayoutModule,
                        MaterialModule,
                        forms.FormsModule,
                        FormModule,
                        forms.ReactiveFormsModule,
                        i1.CoreModule,
                        PeopleModule,
                        ProcessCommentsModule,
                        ContentWidgetModule
                    ],
                    declarations: [
                        NoTaskDetailsTemplateDirective,
                        TaskFiltersComponent,
                        TaskListComponent,
                        TaskDetailsComponent,
                        TaskFormComponent,
                        TaskAuditDirective,
                        ChecklistComponent,
                        TaskHeaderComponent,
                        StartTaskComponent,
                        TaskStandaloneComponent,
                        AttachFormComponent,
                        ClaimTaskDirective,
                        UnclaimTaskDirective
                    ],
                    exports: [
                        NoTaskDetailsTemplateDirective,
                        TaskFiltersComponent,
                        TaskListComponent,
                        TaskDetailsComponent,
                        TaskFormComponent,
                        TaskAuditDirective,
                        ChecklistComponent,
                        TaskHeaderComponent,
                        StartTaskComponent,
                        TaskStandaloneComponent,
                        AttachFormComponent,
                        ClaimTaskDirective,
                        UnclaimTaskDirective
                    ]
                },] }
    ];

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var ProcessInstanceTasksComponent = /** @class */ (function () {
        function ProcessInstanceTasksComponent(activitiProcess, logService, dialog) {
            var _this = this;
            this.activitiProcess = activitiProcess;
            this.logService = logService;
            this.dialog = dialog;
            this.showRefreshButton = true;
            this.error = new i0.EventEmitter();
            this.activeTasks = [];
            this.completedTasks = [];
            this.onDestroy$ = new rxjs.Subject();
            this.taskClick = new i0.EventEmitter();
            this.task$ = new rxjs.Observable(function (observer) { return _this.taskObserver = observer; })
                .pipe(operators.share());
            this.completedTask$ = new rxjs.Observable(function (observer) { return _this.completedTaskObserver = observer; })
                .pipe(operators.share());
        }
        ProcessInstanceTasksComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.task$
                .pipe(operators.takeUntil(this.onDestroy$))
                .subscribe(function (task) { return _this.activeTasks.push(task); });
            this.completedTask$
                .pipe(operators.takeUntil(this.onDestroy$))
                .subscribe(function (task) { return _this.completedTasks.push(task); });
        };
        ProcessInstanceTasksComponent.prototype.ngOnDestroy = function () {
            this.onDestroy$.next(true);
            this.onDestroy$.complete();
        };
        ProcessInstanceTasksComponent.prototype.ngOnChanges = function (changes) {
            var processInstanceDetails = changes['processInstanceDetails'];
            if (processInstanceDetails && processInstanceDetails.currentValue) {
                this.load(processInstanceDetails.currentValue.id);
            }
        };
        ProcessInstanceTasksComponent.prototype.load = function (processInstanceId) {
            this.loadActive(processInstanceId);
            this.loadCompleted(processInstanceId);
        };
        ProcessInstanceTasksComponent.prototype.loadActive = function (processInstanceId) {
            var _this = this;
            this.activeTasks = [];
            if (processInstanceId) {
                this.activitiProcess.getProcessTasks(processInstanceId, null).subscribe(function (res) {
                    res.forEach(function (task) {
                        _this.taskObserver.next(task);
                    });
                }, function (err) {
                    _this.error.emit(err);
                });
            }
            else {
                this.activeTasks = [];
            }
        };
        ProcessInstanceTasksComponent.prototype.loadCompleted = function (processInstanceId) {
            var _this = this;
            this.completedTasks = [];
            if (processInstanceId) {
                this.activitiProcess.getProcessTasks(processInstanceId, 'completed').subscribe(function (res) {
                    res.forEach(function (task) {
                        _this.completedTaskObserver.next(task);
                    });
                }, function (err) {
                    _this.error.emit(err);
                });
            }
            else {
                this.completedTasks = [];
            }
        };
        ProcessInstanceTasksComponent.prototype.hasStartFormDefined = function () {
            return this.processInstanceDetails && this.processInstanceDetails.startFormDefined === true;
        };
        ProcessInstanceTasksComponent.prototype.getUserFullName = function (user) {
            if (user) {
                return (user.firstName && user.firstName !== 'null'
                    ? user.firstName + ' ' : '') +
                    user.lastName;
            }
            return 'Nobody';
        };
        ProcessInstanceTasksComponent.prototype.getFormatDate = function (value, format) {
            var datePipe = new common.DatePipe('en-US');
            try {
                return datePipe.transform(value, format);
            }
            catch (err) {
                this.logService.error("ProcessListInstanceTask: error parsing date " + value + " to format " + format);
                return value;
            }
        };
        ProcessInstanceTasksComponent.prototype.clickTask = function (task) {
            var args = new TaskDetailsEvent(task);
            this.taskClick.emit(args);
        };
        ProcessInstanceTasksComponent.prototype.clickStartTask = function () {
            this.processId = this.processInstanceDetails.id;
            this.showStartDialog();
        };
        ProcessInstanceTasksComponent.prototype.showStartDialog = function () {
            this.dialog.open(this.startDialog, { height: '500px', width: '700px' });
        };
        ProcessInstanceTasksComponent.prototype.closeStartDialog = function () {
            this.dialog.closeAll();
        };
        ProcessInstanceTasksComponent.prototype.onRefreshClicked = function () {
            this.load(this.processInstanceDetails.id);
        };
        ProcessInstanceTasksComponent.prototype.onFormContentClick = function () {
            this.closeStartDialog();
        };
        return ProcessInstanceTasksComponent;
    }());
    ProcessInstanceTasksComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'adf-process-instance-tasks',
                    template: "<div  *ngIf=\"showRefreshButton\" class=\"process-tasks-refresh\" >\n    <button mat-icon-button (click)=\"onRefreshClicked()\">\n        <mat-icon class=\"md-24\" aria-label=\"Refresh\">refresh</mat-icon>\n    </button>\n</div>\n\n<!-- ACTIVE FORM -->\n\n<mat-chip-list>\n    <span class=\"adf-chip-label\">{{ 'ADF_PROCESS_LIST.DETAILS.LABELS.TASKS_ACTIVE'|translate }}</span>\n    <mat-chip class=\"adf-process-badge\" color=\"accent\" selected=\"true\">{{activeTasks?.length}}</mat-chip>\n</mat-chip-list>\n\n<div class=\"menu-container\" *ngIf=\"activeTasks?.length > 0\" data-automation-id=\"active-tasks\">\n    <mat-list>\n        <mat-list-item class=\"process-tasks__task-item\" *ngFor=\"let task of activeTasks\" (click)=\"clickTask(task)\">\n                <mat-icon mat-list-icon>assignment</mat-icon>\n                <h3 matLine>{{task.name || 'Nameless task'}}</h3>\n                <span matLine>\n                    {{ 'ADF_PROCESS_LIST.DETAILS.LABELS.TASK_SUBTITLE' | translate:{user: getUserFullName(task.assignee), created: getFormatDate(task.created, 'mediumDate') } }}\n                </span>\n        </mat-list-item>\n    </mat-list>\n</div>\n\n<!-- START FORM -->\n\n<div *ngIf=\"activeTasks?.length === 0\" data-automation-id=\"active-tasks-none\" class=\"no-results\">\n    {{ 'ADF_PROCESS_LIST.DETAILS.TASKS.NO_ACTIVE' | translate }}\n</div>\n\n<div *ngIf=\"hasStartFormDefined()\">\n    <span class=\"adf-activiti-label\">{{ 'ADF_PROCESS_LIST.DETAILS.LABELS.START_FORM'|translate }}</span>\n\n    <!--IF START TASK COMPLETED -->\n    <div class=\"menu-container\" data-automation-id=\"start-form\">\n        <mat-list>\n            <mat-list-item class=\"process-tasks__task-item\" (click)=\"clickStartTask()\">\n                <mat-icon mat-list-icon>assignment</mat-icon>\n                <h3 matLine>{{ 'ADF_PROCESS_LIST.DETAILS.LABELS.START_FORM'|translate }}</h3>\n                <span matLine>\n                    {{ 'ADF_PROCESS_LIST.DETAILS.LABELS.TASK_SUBTITLE' | translate:{user:getUserFullName(processInstanceDetails.startedBy), created: getFormatDate(processInstanceDetails.started, 'mediumDate') } }}\n                </span>\n            </mat-list-item>\n        </mat-list>\n    </div>\n\n</div>\n\n<!-- COMPLETED FORM -->\n<mat-chip-list>\n        <span class=\"adf-chip-label\">{{ 'ADF_PROCESS_LIST.DETAILS.LABELS.TASKS_COMPLETED'|translate }}</span>\n        <mat-chip class=\"adf-process-badge\" color=\"accent\" selected=\"true\">{{completedTasks?.length}}</mat-chip>\n</mat-chip-list>\n\n<div class=\"menu-container\" *ngIf=\"completedTasks?.length > 0\" data-automation-id=\"completed-tasks\">\n    <mat-list>\n        <mat-list-item class=\"process-tasks__task-item\" *ngFor=\"let task of completedTasks\" (click)=\"clickTask(task)\">\n            <mat-icon mat-list-icon>assignment</mat-icon>\n            <h3 matLine>{{task.name || 'Nameless task'}}</h3>\n            <span matLine>\n                {{ 'ADF_PROCESS_LIST.DETAILS.LABELS.TASK_SUBTITLE' | translate:{user:getUserFullName(task.assignee), created: getFormatDate(task.created, 'mediumDate') } }}\n            </span>\n        </mat-list-item>\n    </mat-list>\n</div>\n\n<div *ngIf=\"completedTasks?.length === 0\" data-automation-id=\"completed-tasks-none\" class=\"no-results\">\n    {{ 'ADF_PROCESS_LIST.DETAILS.TASKS.NO_COMPLETED' | translate }}\n</div>\n\n<ng-template *ngIf=\"hasStartFormDefined()\" #startDialog>\n    <div id=\"adf-start-process-dialog\" class=\"adf-start-process-dialog\">\n        <h4 matDialogTitle>{{ 'ADF_PROCESS_LIST.DETAILS.LABELS.START_FORM'|translate }}</h4>\n        <div mat-dialog-content class=\"adf-start-process-dialog-content\">\n            <adf-start-form [processId]=\"processId\"\n                                 [showRefreshButton]=\"false\" [readOnlyForm]=\"true\"\n                                 (formContentClicked)='onFormContentClick()'>\n            </adf-start-form>\n        </div>\n        <div mat-dialog-actions class=\"adf-start-process-dialog-actions\">\n            <button mat-button type=\"button\" (click)=\"closeStartDialog()\">{{ 'ADF_PROCESS_LIST.DETAILS.TASKS.TASK_CLOSE' | translate }}</button>\n        </div>\n    </div>\n</ng-template>\n",
                    styles: [":host{width:100%}.activiti-label{font-weight:bolder;vertical-align:top}.adf-process-badge{outline:none;pointer-events:none}.adf-chip-label{font-weight:700;margin-right:8px;position:relative;top:5px}.menu-container{margin-bottom:32px}.activiti-label+.icon{position:relative;top:-2px}.task-details-dialog{position:fixed;top:50%;transform:translateY(-50%);width:40%}.process-tasks-refresh{float:right}.adf-start-process-dialog{display:flex;flex-direction:column;height:100%;width:100%}.adf-start-process-dialog-content{flex-grow:1}.adf-start-process-dialog-actions{display:flex;justify-content:flex-end}.no-results{color:rgba(0,0,0,.54);display:block;font-size:14px;font-weight:400;letter-spacing:0;line-height:18px;margin-left:9px;padding:12px}.process-tasks__task-item{cursor:pointer}"]
                },] }
    ];
    ProcessInstanceTasksComponent.ctorParameters = function () { return [
        { type: ProcessService },
        { type: i1.LogService },
        { type: i1$1.MatDialog }
    ]; };
    ProcessInstanceTasksComponent.propDecorators = {
        processInstanceDetails: [{ type: i0.Input }],
        showRefreshButton: [{ type: i0.Input }],
        error: [{ type: i0.Output }],
        startDialog: [{ type: i0.ViewChild, args: ['startDialog',] }],
        taskDetails: [{ type: i0.ViewChild, args: ['taskDetails',] }],
        taskClick: [{ type: i0.Output }]
    };

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var processPresetsDefaultModel = {
        'default': [
            {
                'key': 'name',
                'type': 'text',
                'title': 'ADF_PROCESS_LIST.PROPERTIES.NAME',
                'sortable': true
            },
            {
                'key': 'created',
                'type': 'text',
                'title': 'ADF_PROCESS_LIST.PROPERTIES.CREATED',
                'cssClass': 'hidden',
                'sortable': true
            }
        ]
    };

    var ProcessInstanceListComponent = /** @class */ (function (_super) {
        __extends(ProcessInstanceListComponent, _super);
        function ProcessInstanceListComponent(processService, userPreferences, appConfig) {
            var _this = _super.call(this, appConfig, ProcessInstanceListComponent.PRESET_KEY, processPresetsDefaultModel) || this;
            _this.processService = processService;
            _this.userPreferences = userPreferences;
            _this.page = 0;
            _this.size = i1.PaginationComponent.DEFAULT_PAGINATION.maxItems;
            _this.multiselect = false;
            _this.selectionMode = 'single';
            _this.selectFirstRow = true;
            _this.stickyHeader = false;
            _this.showContextMenu = false;
            _this.showRowContextMenu = new i0.EventEmitter();
            _this.resolverFn = null;
            _this.rowClick = new i0.EventEmitter();
            _this.success = new i0.EventEmitter();
            _this.error = new i0.EventEmitter();
            _this.isLoading = true;
            _this.rows = [];
            _this.sorting = ['created', 'desc'];
            _this.size = _this.userPreferences.paginationSize;
            _this.pagination = new rxjs.BehaviorSubject({
                maxItems: _this.size,
                skipCount: 0,
                totalItems: 0
            });
            return _this;
        }
        ProcessInstanceListComponent.prototype.ngAfterContentInit = function () {
            this.createDatatableSchema();
            if (this.data && this.data.getColumns().length === 0) {
                this.data.setColumns(this.columns);
            }
            if (this.appId != null) {
                this.reload();
            }
        };
        ProcessInstanceListComponent.prototype.ngOnChanges = function (changes) {
            if (this.isPropertyChanged(changes)) {
                if (this.isSortChanged(changes)) {
                    this.sorting = this.sort ? this.sort.split('-') : this.sorting;
                }
                this.reload();
            }
            var presetColumnChanges = changes['presetColumn'];
            if (presetColumnChanges && !presetColumnChanges.firstChange) {
                this.columns = this.mergeJsonAndHtmlSchema();
            }
        };
        ProcessInstanceListComponent.prototype.isSortChanged = function (changes) {
            var actualSort = changes['sort'];
            return actualSort && actualSort.currentValue && actualSort.currentValue !== actualSort.previousValue;
        };
        ProcessInstanceListComponent.prototype.isPropertyChanged = function (changes) {
            var changed = false;
            var appId = changes['appId'];
            var processDefinitionId = changes['processDefinitionId'];
            var processInstanceId = changes['processInstanceId'];
            var state = changes['state'];
            var sort = changes['sort'];
            var page = changes['page'];
            var size = changes['size'];
            if (appId && appId.currentValue) {
                changed = true;
            }
            else if (processDefinitionId) {
                changed = true;
            }
            else if (processInstanceId) {
                changed = true;
            }
            else if (state && state.currentValue) {
                changed = true;
            }
            else if (sort && sort.currentValue) {
                changed = true;
            }
            else if (page && page.currentValue !== page.previousValue) {
                changed = true;
            }
            else if (size && size.currentValue !== size.previousValue) {
                changed = true;
            }
            return changed;
        };
        ProcessInstanceListComponent.prototype.reload = function () {
            this.requestNode = this.createRequestNode();
            this.load(this.requestNode);
        };
        ProcessInstanceListComponent.prototype.load = function (requestNode) {
            var _this = this;
            this.isLoading = true;
            this.processService.getProcesses(requestNode)
                .pipe(operators.finalize(function () { return _this.isLoading = false; }))
                .subscribe(function (response) {
                _this.rows = response.data;
                _this.selectFirst();
                _this.success.emit(response);
                _this.pagination.next({
                    count: response.data.length,
                    maxItems: _this.size,
                    skipCount: _this.page * _this.size,
                    totalItems: response.total
                });
            }, function (error) {
                _this.error.emit(error);
            });
        };
        ProcessInstanceListComponent.prototype.selectFirst = function () {
            if (this.selectFirstRow) {
                if (!this.isListEmpty()) {
                    var dataRow = this.rows[0];
                    dataRow.isSelected = true;
                    this.currentInstanceId = dataRow['id'];
                }
                else {
                    this.currentInstanceId = null;
                }
            }
        };
        ProcessInstanceListComponent.prototype.getCurrentId = function () {
            return this.currentInstanceId;
        };
        ProcessInstanceListComponent.prototype.isListEmpty = function () {
            return !this.rows || this.rows.length === 0;
        };
        ProcessInstanceListComponent.prototype.onRowClick = function (event) {
            var item = event;
            this.currentInstanceId = item.value.getValue('id');
            this.rowClick.emit(this.currentInstanceId);
        };
        ProcessInstanceListComponent.prototype.onRowKeyUp = function (event) {
            if (event.detail.keyboardEvent.key === 'Enter') {
                event.preventDefault();
                this.currentInstanceId = event.detail.row.getValue('id');
                this.rowClick.emit(this.currentInstanceId);
            }
        };
        ProcessInstanceListComponent.prototype.onShowRowContextMenu = function (event) {
            this.showRowContextMenu.emit(event);
        };
        ProcessInstanceListComponent.prototype.createRequestNode = function () {
            return new ProcessFilterParamRepresentationModel({
                appDefinitionId: this.appId,
                processDefinitionId: this.processDefinitionId,
                processInstanceId: this.processInstanceId,
                state: this.state,
                sort: this.sort,
                page: this.page,
                size: this.size,
                start: 0
            });
        };
        ProcessInstanceListComponent.prototype.updatePagination = function (params) {
            var needsReload = params.maxItems || params.skipCount;
            this.size = params.maxItems;
            this.page = this.currentPage(params.skipCount, params.maxItems);
            if (needsReload) {
                this.reload();
            }
        };
        ProcessInstanceListComponent.prototype.currentPage = function (skipCount, maxItems) {
            return (skipCount && maxItems) ? Math.floor(skipCount / maxItems) : 0;
        };
        return ProcessInstanceListComponent;
    }(i1.DataTableSchema));
    ProcessInstanceListComponent.PRESET_KEY = 'adf-process-list.presets';
    ProcessInstanceListComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'adf-process-instance-list',
                    template: "<adf-datatable #dataTable\n    [data]=\"data\"\n    [rows]=\"rows\"\n    [columns]=\"columns\"\n    [sorting]=\"sorting\"\n    [loading]=\"isLoading\"\n    [stickyHeader]=\"stickyHeader\"\n    [selectionMode]=\"selectionMode\"\n    [multiselect]=\"multiselect\"\n    [resolverFn]=\"resolverFn\"\n    [contextMenu]=\"showContextMenu\"\n    (showRowContextMenu)=\"onShowRowContextMenu($event)\"\n    (rowClick)=\"onRowClick($event)\"\n    (row-keyup)=\"onRowKeyUp($any($event))\">\n    <adf-loading-content-template>\n        <ng-template>\n            <mat-progress-spinner\n                *ngIf=\"!customLoadingContent\"\n                class=\"adf-process-list-loading-margin\"\n                color=\"primary\"\n                mode=\"indeterminate\">\n            </mat-progress-spinner>\n            <ng-content select=\"adf-custom-loading-content-template\"></ng-content>\n        </ng-template>\n    </adf-loading-content-template>\n    <adf-no-content-template>\n        <ng-template>\n                <adf-empty-content *ngIf=\"!customEmptyContent\"\n                    icon=\"assessment\"\n                    [title]=\"(requestNode ? 'ADF_PROCESS_LIST.LIST.TITLE' : 'ADF_PROCESS_LIST.FILTERS.MESSAGES.NONE') | translate\"\n                    [subtitle]=\"'ADF_PROCESS_LIST.LIST.SUBTITLE'| translate\">\n                </adf-empty-content>\n            <ng-content select=\"adf-custom-empty-content-template\"></ng-content>\n        </ng-template>\n    </adf-no-content-template>\n</adf-datatable>\n",
                    styles: [".adf-process-list-loading-margin{margin-left:calc(50% - 50px);margin-right:calc(50% - 50px)}.no-content-message{color:#000;font-size:16px;font-weight:700;opacity:.54;text-align:center}"]
                },] }
    ];
    ProcessInstanceListComponent.ctorParameters = function () { return [
        { type: ProcessService },
        { type: i1.UserPreferencesService },
        { type: i1.AppConfigService }
    ]; };
    ProcessInstanceListComponent.propDecorators = {
        customEmptyContent: [{ type: i0.ContentChild, args: [i1.CustomEmptyContentTemplateDirective,] }],
        customLoadingContent: [{ type: i0.ContentChild, args: [i1.CustomLoadingContentTemplateDirective,] }],
        appId: [{ type: i0.Input }],
        processDefinitionId: [{ type: i0.Input }],
        processInstanceId: [{ type: i0.Input }],
        state: [{ type: i0.Input }],
        sort: [{ type: i0.Input }],
        page: [{ type: i0.Input }],
        size: [{ type: i0.Input }],
        data: [{ type: i0.Input }],
        multiselect: [{ type: i0.Input }],
        selectionMode: [{ type: i0.Input }],
        selectFirstRow: [{ type: i0.Input }],
        stickyHeader: [{ type: i0.Input }],
        showContextMenu: [{ type: i0.Input }],
        showRowContextMenu: [{ type: i0.Output }],
        resolverFn: [{ type: i0.Input }],
        rowClick: [{ type: i0.Output }],
        success: [{ type: i0.Output }],
        error: [{ type: i0.Output }]
    };

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var ProcessNamePipe = /** @class */ (function () {
        function ProcessNamePipe(localizedDatePipe) {
            this.localizedDatePipe = localizedDatePipe;
        }
        ProcessNamePipe.prototype.transform = function (processNameFormat, processInstance) {
            var processName = processNameFormat;
            if (processName.match(ProcessNamePipe.DATE_TIME_IDENTIFIER_REG_EXP)) {
                var presentDateTime = moment$1.now();
                processName = processName.replace(ProcessNamePipe.DATE_TIME_IDENTIFIER_REG_EXP, this.localizedDatePipe.transform(presentDateTime, 'medium'));
            }
            if (processName.match(ProcessNamePipe.PROCESS_DEFINITION_IDENTIFIER_REG_EXP)) {
                var selectedProcessDefinitionName = processInstance ? processInstance.processDefinitionName : '';
                processName = processName.replace(ProcessNamePipe.PROCESS_DEFINITION_IDENTIFIER_REG_EXP, selectedProcessDefinitionName);
            }
            return processName;
        };
        return ProcessNamePipe;
    }());
    ProcessNamePipe.DATE_TIME_IDENTIFIER_REG_EXP = new RegExp('%{datetime}', 'i');
    ProcessNamePipe.PROCESS_DEFINITION_IDENTIFIER_REG_EXP = new RegExp('%{processdefinition}', 'i');
    ProcessNamePipe.decorators = [
        { type: i0.Pipe, args: [{ name: 'processName' },] }
    ];
    ProcessNamePipe.ctorParameters = function () { return [
        { type: i1.LocalizedDatePipe }
    ]; };

    var StartProcessInstanceComponent = /** @class */ (function () {
        function StartProcessInstanceComponent(activitiProcess, activitiContentService, appsProcessService, appConfig, processNamePipe) {
            this.activitiProcess = activitiProcess;
            this.activitiContentService = activitiContentService;
            this.appsProcessService = appsProcessService;
            this.appConfig = appConfig;
            this.processNamePipe = processNamePipe;
            this.MAX_LENGTH = 255;
            this.name = '';
            this.showSelectProcessDropdown = true;
            this.showSelectApplicationDropdown = false;
            this.processFilterSelector = true;
            this.start = new i0.EventEmitter();
            this.cancel = new i0.EventEmitter();
            this.error = new i0.EventEmitter();
            this.processDefinitionSelection = new i0.EventEmitter();
            this.applicationSelection = new i0.EventEmitter();
            this.processDefinitions = [];
            this.maxProcessNameLength = this.MAX_LENGTH;
            this.applications = [];
            this.isProcessDefinitionsLoading = true;
            this.isAppsLoading = true;
            this.onDestroy$ = new rxjs.Subject();
        }
        StartProcessInstanceComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.processNameInput = new forms.FormControl('', [forms.Validators.required, forms.Validators.maxLength(this.maxProcessNameLength), forms.Validators.pattern('^[^\\s]+(\\s+[^\\s]+)*$')]);
            this.processDefinitionInput = new forms.FormControl();
            this.load();
            this.filteredProcessesDefinitions$ = this.processDefinitionInput.valueChanges
                .pipe(operators.map(function (value) { return _this._filter(value); }), operators.takeUntil(this.onDestroy$));
            this.activitiContentService.getAlfrescoRepositories().subscribe(function (repoList) {
                if (repoList && repoList[0]) {
                    var alfrescoRepository = repoList[0];
                    _this.alfrescoRepositoryName = "alfresco-" + alfrescoRepository.id + "-" + alfrescoRepository.name;
                }
            });
        };
        StartProcessInstanceComponent.prototype.ngOnDestroy = function () {
            this.onDestroy$.next(true);
            this.onDestroy$.complete();
        };
        StartProcessInstanceComponent.prototype.ngOnChanges = function (changes) {
            if (changes['values'] && changes['values'].currentValue) {
                this.moveNodeFromCStoPS();
            }
            if (this.isAppIdChanged(changes)) {
                this.appId = changes['appId'].currentValue;
                this.load();
            }
            if (this.isProcessDefinitionChanged(changes)) {
                this.processDefinitionName = changes['processDefinitionName'].currentValue;
                this.filterProcessDefinitionByName();
            }
        };
        StartProcessInstanceComponent.prototype.isAppIdChanged = function (changes) {
            return changes['appId'] && changes['appId'].currentValue && changes['appId'].currentValue !== changes['appId'].previousValue;
        };
        StartProcessInstanceComponent.prototype.isProcessDefinitionChanged = function (changes) {
            return changes['processDefinitionName'] && changes['processDefinitionName'].currentValue &&
                changes['processDefinitionName'].currentValue !== changes['processDefinitionName'].previousValue;
        };
        StartProcessInstanceComponent.prototype._filter = function (value) {
            if (value !== null && value !== undefined) {
                var filterValue_1 = value.toLowerCase();
                var filteredProcess = this.processDefinitions.filter(function (option) { return option.name.toLowerCase().includes(filterValue_1); });
                if (this.processFilterSelector) {
                    this.selectedProcessDef = this.getSelectedProcess(filterValue_1);
                }
                return filteredProcess;
            }
            return [];
        };
        StartProcessInstanceComponent.prototype.getSelectedProcess = function (selectedProcess) {
            var processSelected = this.processDefinitions.find(function (process) { return process.name.toLowerCase() === selectedProcess; });
            if (!processSelected) {
                processSelected = new ProcessDefinitionRepresentation();
            }
            return processSelected;
        };
        StartProcessInstanceComponent.prototype.load = function () {
            if (this.showSelectApplicationDropdown) {
                this.loadApps();
            }
            else {
                this.loadProcessDefinitions(this.appId);
            }
        };
        StartProcessInstanceComponent.prototype.loadProcessDefinitions = function (appId) {
            var _this = this;
            this.isProcessDefinitionsLoading = true;
            this.resetSelectedProcessDefinition();
            this.activitiProcess.getProcessDefinitions(appId).pipe(operators.map(function (processDefinitionRepresentations) {
                var currentProcessDef;
                if (processDefinitionRepresentations.length === 1) {
                    currentProcessDef = processDefinitionRepresentations[0];
                }
                if (_this.processDefinitionName) {
                    var filteredProcessDefinition = processDefinitionRepresentations.find(function (processDefinition) {
                        return processDefinition.name === _this.processDefinitionName;
                    });
                    if (filteredProcessDefinition) {
                        currentProcessDef = filteredProcessDefinition;
                    }
                }
                return { currentProcessDef: currentProcessDef, processDefinitionRepresentations: processDefinitionRepresentations };
            })).subscribe(function (filteredProcessDefinitions) {
                _this.processDefinitions = filteredProcessDefinitions.processDefinitionRepresentations;
                _this.processDefinitionSelectionChanged(filteredProcessDefinitions.currentProcessDef);
                _this.processDefinitionInput.setValue(_this.selectedProcessDef ? _this.selectedProcessDef.name : '');
                _this.isProcessDefinitionsLoading = false;
            }, function (error) {
                _this.isProcessDefinitionsLoading = false;
                _this.error.emit(error);
            });
        };
        StartProcessInstanceComponent.prototype.filterProcessDefinitionByName = function () {
            var _this = this;
            if (this.processDefinitionName) {
                var filteredProcessDef = this.processDefinitions.find(function (processDefinition) {
                    return processDefinition.name === _this.processDefinitionName;
                });
                if (filteredProcessDef) {
                    this.processDefinitionSelectionChanged(filteredProcessDef);
                    this.processDefinitionInput.setValue(this.selectedProcessDef ? this.selectedProcessDef.name : '');
                }
            }
        };
        StartProcessInstanceComponent.prototype.loadApps = function () {
            var _this = this;
            this.isAppsLoading = true;
            this.appsProcessService
                .getDeployedApplications()
                .pipe(operators.map(function (response) {
                var applications = _this.removeDefaultApps(response);
                var currentApplication;
                if (applications && applications.length === 1) {
                    currentApplication = applications[0];
                }
                var filteredApp = applications.find(function (app) { return app.id === +_this.appId; });
                if (filteredApp) {
                    currentApplication = filteredApp;
                }
                return { currentApplication: currentApplication, applications: applications };
            }))
                .subscribe(function (filteredApps) {
                _this.applications = filteredApps.applications;
                _this.selectedApplication = filteredApps.currentApplication;
                _this.applicationSelection.emit(_this.selectedApplication);
                _this.toggleProcessNameAndDefinitionsDropdown();
                _this.isAppsLoading = false;
                _this.loadProcessDefinitionsBasedOnSelectedApp();
            }, function (err) {
                _this.isAppsLoading = false;
                _this.error.emit(err);
            });
        };
        StartProcessInstanceComponent.prototype.loadProcessDefinitionsBasedOnSelectedApp = function () {
            if (this.selectedApplication && this.selectedApplication.id) {
                this.loadProcessDefinitions(this.selectedApplication ? this.selectedApplication.id : null);
            }
            else {
                this.isProcessDefinitionsLoading = false;
                this.resetProcessDefinitions();
            }
        };
        StartProcessInstanceComponent.prototype.onAppSelectionChange = function (selectedApplication) {
            this.resetProcessDefinitions();
            this.selectedApplication = selectedApplication.value;
            this.applicationSelection.emit(this.selectedApplication);
            this.toggleProcessNameAndDefinitionsDropdown();
            this.loadProcessDefinitionsBasedOnSelectedApp();
        };
        StartProcessInstanceComponent.prototype.isAppSelected = function () {
            return !!(this.selectedApplication && this.selectedApplication.id);
        };
        StartProcessInstanceComponent.prototype.removeDefaultApps = function (apps) {
            return apps.filter(function (app) { return app.id; });
        };
        StartProcessInstanceComponent.prototype.hasApplications = function () {
            return this.applications && this.applications.length > 0;
        };
        StartProcessInstanceComponent.prototype.hasProcessDefinitions = function () {
            return this.processDefinitions && this.processDefinitions.length > 0;
        };
        StartProcessInstanceComponent.prototype.isProcessDefinitionSelected = function () {
            return !!(this.selectedProcessDef && this.selectedProcessDef.id);
        };
        StartProcessInstanceComponent.prototype.isProcessDefinitionsEmpty = function () {
            return this.processDefinitions.length === 0;
        };
        StartProcessInstanceComponent.prototype.disableDropdownButton = function () {
            return this.showSelectApplicationDropdown && !this.isAppSelected();
        };
        StartProcessInstanceComponent.prototype.getAlfrescoRepositoryName = function () {
            var alfrescoRepositoryName = this.appConfig.get(i1.AppConfigValues.ALFRESCO_REPOSITORY_NAME);
            if (!alfrescoRepositoryName) {
                alfrescoRepositoryName = this.alfrescoRepositoryName;
            }
            return alfrescoRepositoryName + 'Alfresco';
        };
        StartProcessInstanceComponent.prototype.moveNodeFromCStoPS = function () {
            var _this = this;
            var accountIdentifier = this.getAlfrescoRepositoryName();
            var _loop_1 = function (key) {
                if (this_1.values.hasOwnProperty(key)) {
                    var currentValue = Array.isArray(this_1.values[key]) ? this_1.values[key] : [this_1.values[key]];
                    var contents = currentValue.filter(function (value) { return value && value.isFile; })
                        .map(function (content) { return _this.activitiContentService.applyAlfrescoNode(content, null, accountIdentifier); });
                    rxjs.forkJoin(contents).subscribe(function (res) {
                        var _a;
                        _this.movedNodeToPS = (_a = {}, _a[key] = __spread(res), _a);
                    });
                }
            };
            var this_1 = this;
            for (var key in this.values) {
                _loop_1(key);
            }
        };
        StartProcessInstanceComponent.prototype.startProcess = function (outcome) {
            var _this = this;
            if (this.selectedProcessDef && this.selectedProcessDef.id && this.nameController.value) {
                var formValues = this.startForm ? this.startForm.form.values : undefined;
                this.activitiProcess.startProcess(this.selectedProcessDef.id, this.nameController.value, outcome, formValues, this.variables).subscribe(function (res) {
                    _this.name = '';
                    _this.start.emit(res);
                }, function (err) {
                    _this.error.emit(err);
                });
            }
        };
        StartProcessInstanceComponent.prototype.cancelStartProcess = function () {
            this.cancel.emit();
        };
        StartProcessInstanceComponent.prototype.hasStartForm = function () {
            return this.selectedProcessDef && this.selectedProcessDef.hasStartForm;
        };
        StartProcessInstanceComponent.prototype.isStartFormMissingOrValid = function () {
            if (this.startForm) {
                return this.startForm.form && this.startForm.form.isValid;
            }
            else {
                return true;
            }
        };
        StartProcessInstanceComponent.prototype.validateForm = function () {
            return this.selectedProcessDef && this.selectedProcessDef.id && this.processNameInput.valid && this.isStartFormMissingOrValid();
        };
        StartProcessInstanceComponent.prototype.resetSelectedProcessDefinition = function () {
            this.selectedProcessDef = undefined;
            if (this.processDefinitionInput) {
                this.processDefinitionInput.setValue('');
            }
        };
        StartProcessInstanceComponent.prototype.resetProcessDefinitions = function () {
            this.processDefinitions = [];
            this.resetSelectedProcessDefinition();
        };
        StartProcessInstanceComponent.prototype.onOutcomeClick = function (outcome) {
            this.startProcess(outcome);
        };
        StartProcessInstanceComponent.prototype.reset = function () {
            this.resetSelectedProcessDefinition();
            this.name = '';
            if (this.startForm) {
                this.startForm.data = {};
            }
        };
        StartProcessInstanceComponent.prototype.displayFn = function (process) {
            if (process) {
                var processName = process;
                if (typeof process !== 'string') {
                    processName = process.name;
                }
                return processName;
            }
            return undefined;
        };
        StartProcessInstanceComponent.prototype.displayDropdown = function (event) {
            event.stopPropagation();
            if (!this.inputAutocomplete.panelOpen) {
                this.processDefinitionInput.setValue('');
                this.inputAutocomplete.openPanel();
            }
            else {
                this.inputAutocomplete.closePanel();
            }
        };
        Object.defineProperty(StartProcessInstanceComponent.prototype, "nameController", {
            get: function () {
                return this.processNameInput;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(StartProcessInstanceComponent.prototype, "processDefinitionController", {
            get: function () {
                return this.processDefinitionInput;
            },
            enumerable: false,
            configurable: true
        });
        StartProcessInstanceComponent.prototype.toggleProcessNameAndDefinitionsDropdown = function () {
            if (!this.isAppSelected()) {
                this.processDefinitionController.disable();
                this.nameController.disable();
            }
            else {
                this.processDefinitionController.enable();
                this.nameController.enable();
            }
        };
        StartProcessInstanceComponent.prototype.processDefinitionSelectionChanged = function (processDefinition) {
            if (processDefinition) {
                var processInstanceDetails = new ProcessInstance({ processDefinitionName: processDefinition.name });
                var processName = this.processNamePipe.transform(this.name, processInstanceDetails);
                this.processNameInput.setValue(processName);
                this.processNameInput.markAsDirty();
                this.processNameInput.markAsTouched();
                this.selectedProcessDef = processDefinition;
                this.processDefinitionSelection.emit(this.selectedProcessDef);
            }
            else {
                this.nameController.reset();
            }
        };
        StartProcessInstanceComponent.prototype.isLoading = function () {
            return this.showSelectApplicationDropdown ? this.isAppsLoading : false;
        };
        return StartProcessInstanceComponent;
    }());
    StartProcessInstanceComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'adf-start-process',
                    template: "\n<ng-container *ngIf=\"isLoading(); then showLoadingTemplate; else showStartProcessTemplate\"></ng-container>\n    <ng-template #showLoadingTemplate>\n        <mat-spinner class=\"adf-start-process-loading\"></mat-spinner>\n    </ng-template>\n<ng-template #showStartProcessTemplate>\n    <ng-container *ngIf=\"hasApplications() || hasProcessDefinitions() ; else showEmptyTemplate\">\n        <div class=\"adf-start-process\">\n            <div class=\"adf-title\" *ngIf=\"title\">{{ title | translate}}</div>\n            <div class=\"content\">\n                <div class=\"adf-start-process-definition-container\">\n                    <mat-form-field *ngIf=\"showSelectApplicationDropdown\" [floatLabel]=\"'always'\" class=\"adf-start-process-app-list\">\n                        <mat-select\n                            placeholder=\"{{ 'ADF_PROCESS_LIST.START_PROCESS.FORM.LABEL.SELECT_APPLICATION' | translate }}\"\n                            (selectionChange)=\"onAppSelectionChange($event)\"\n                            [(ngModel)]=\"selectedApplication\"\n                            data-automation-id=\"adf-start-process-apps-drop-down\">\n                            <mat-option \n                                *ngFor=\"let application of applications\"\n                                [value]=\"application\"\n                                [attr.data-automation-id]=\"'adf-start-process-apps-option-' + application.name\">\n                                {{ application.name }}\n                            </mat-option>\n                        </mat-select>\n                    </mat-form-field>\n                    <mat-form-field class=\"adf-process-input-container\" [floatLabel]=\"'always'\">\n                        <mat-label>{{'ADF_PROCESS_LIST.START_PROCESS.FORM.LABEL.TYPE' | translate}}</mat-label>\n                        <input\n                            type=\"text\"\n                            matInput\n                            [formControl]=\"processDefinitionInput\"\n                            [matAutocomplete]=\"auto\"\n                            id=\"processDefinitionName\"\n                            #inputAutocomplete>\n                        <div class=\"adf-process-input-autocomplete\">\n                            <mat-autocomplete\n                                #auto=\"matAutocomplete\"\n                                id=\"processDefinitionOptions\"\n                                [displayWith]=\"displayFn\">\n                                <mat-option *ngFor=\"let processDef of filteredProcessesDefinitions$ | async\" [value]=\"processDef.name\"\n                                (click)=\"processDefinitionSelectionChanged(processDef)\">\n                                    {{ processDef.name }}\n                                </mat-option>\n                            </mat-autocomplete>\n                            <ng-container *ngIf=\"!isProcessDefinitionsLoading ; else showProcessDefLoadingTemplate\">\n                                <button\n                                    id=\"adf-select-process-dropdown\"\n                                    *ngIf=\"showSelectProcessDropdown\"\n                                    mat-icon-button\n                                    (click)=\"displayDropdown($event)\"\n                                    [disabled]=\"disableDropdownButton()\">\n                                    <mat-icon>arrow_drop_down</mat-icon>\n                                </button>\n                            </ng-container>\n                            <ng-template #showProcessDefLoadingTemplate>\n                                <mat-spinner id=\"adf-select-process-spinner\" [diameter]=\"20\"></mat-spinner>\n                            </ng-template>\n                        </div>\n                    </mat-form-field>\n                </div>\n                <mat-form-field class=\"adf-process-input-container\" [floatLabel]=\"'always'\">\n                    <mat-label>{{'ADF_PROCESS_LIST.START_PROCESS.FORM.LABEL.NAME' | translate}}</mat-label>\n                    <input\n                        matInput\n                        [formControl]=\"processNameInput\"\n                        id=\"processName\"\n                        required/>\n                    <mat-error *ngIf=\"nameController.hasError('maxlength')\">\n                        {{ 'ADF_PROCESS_LIST.START_PROCESS.ERROR.MAXIMUM_LENGTH' | translate : { characters : maxProcessNameLength } }}\n                    </mat-error>\n                    <mat-error *ngIf=\"nameController.hasError('required')\">\n                        {{ 'ADF_PROCESS_LIST.START_PROCESS.ERROR.PROCESS_NAME_REQUIRED' | translate }}\n                    </mat-error>\n                    <mat-error *ngIf=\"nameController.hasError('pattern')\">\n                        {{ 'ADF_PROCESS_LIST.START_PROCESS.ERROR.SPACE_VALIDATOR' | translate }}\n                    </mat-error>\n                </mat-form-field>\n        \n                <ng-container *ngIf=\"!isProcessDefinitionsLoading ; else showStartFormLoadingTemplate\">\n                    <ng-container *ngIf=\"isProcessDefinitionSelected() ; else emptyProcessDefTemplate\">\n                        <ng-container  *ngIf=\"hasStartForm(); else noStartFormTemplate\">\n                            <adf-start-form\n                                #startForm\n                                [data]=\"movedNodeToPS\"\n                                [disableStartProcessButton]=\"processNameInput.invalid\"\n                                [processDefinitionId]=\"selectedProcessDef.id\"\n                                (outcomeClick)=\"onOutcomeClick($event)\"\n                                [showRefreshButton]=\"false\">\n                                <button\n                                    adf-form-custom-button\n                                    mat-button\n                                    (click)=\"cancelStartProcess()\"\n                                    id=\"cancel_process\">\n                                    {{'ADF_PROCESS_LIST.START_PROCESS.FORM.ACTION.CANCEL'| translate | uppercase}}\n                                </button>\n                            </adf-start-form>\n                        </ng-container>\n                        <ng-template #noStartFormTemplate>\n                            <adf-empty-content \n                                class=\"adf-start-process-empty-template\"\n                                [icon]=\"'assessment'\"\n                                [title]=\"'ADF_PROCESS_LIST.START_PROCESS.NO_START_FORM'  | translate\">\n                            </adf-empty-content>\n                        </ng-template>\n                    </ng-container>\n                    <ng-template #emptyProcessDefTemplate>\n                        <adf-empty-content class=\"adf-start-process-empty-template\"\n                            [icon]=\"'assessment'\"\n                            [title]=\"'ADF_PROCESS_LIST.START_PROCESS.NO_PROCESS_DEF_SELECTED'  | translate\">\n                        </adf-empty-content>\n                    </ng-template>\n                </ng-container>\n                <ng-template #showStartFormLoadingTemplate>\n                    <mat-spinner class=\"adf-start-process-loading\"></mat-spinner>\n                </ng-template>\n            </div>\n            <div class=\"mat-content-actions\" *ngIf=\"!hasStartForm()\">\n                <button\n                    mat-button\n                    *ngIf=\"!hasStartForm()\"\n                    (click)=\"cancelStartProcess()\"\n                    id=\"cancel_process\">\n                    {{'ADF_PROCESS_LIST.START_PROCESS.FORM.ACTION.CANCEL'| translate | uppercase}}\n                </button>\n                <button\n                    color=\"primary\"\n                    mat-button\n                    *ngIf=\"!hasStartForm()\"\n                    [disabled]=\"!validateForm()\"\n                    (click)=\"startProcess()\"\n                    data-automation-id=\"btn-start\"\n                    id=\"button-start\"\n                    class=\"btn-start\">\n                    {{'ADF_PROCESS_LIST.START_PROCESS.FORM.ACTION.START' | translate | uppercase}}\n                </button>\n            </div>\n        </div>\n    </ng-container>\n        <ng-template #showEmptyTemplate>\n            <adf-empty-content class=\"adf-start-process-empty-template\"\n                [icon]=\"'assessment'\"\n                [title]=\"'ADF_PROCESS_LIST.START_PROCESS.NO_PROCESS_DEFINITIONS' | translate\">\n            </adf-empty-content>\n        </ng-template>    \n</ng-template>\n",
                    encapsulation: i0.ViewEncapsulation.None,
                    styles: [".adf-start-process{margin-left:auto;margin-right:auto;margin-top:10px;width:96%}.adf-start-process mat-form-field{width:100%}.adf-start-process .mat-form-field-label{color:var(--theme-colors-mat-grey-dark)}.adf-start-process .mat-content-actions{text-align:right}.adf-start-process .mat-button{text-transform:uppercase!important}.adf-title{padding-bottom:1.25em}.adf-process-input-container mat-form-field{width:100%}.adf-process-input-autocomplete{display:flex}.adf-process-input-autocomplete button{position:absolute;right:-14px;top:0}.adf-process-input-autocomplete mat-spinner{position:absolute;right:-1px;top:0}.adf-start-form-container .mat-card{box-shadow:none!important;padding:0!important}.adf-start-form-actions{text-align:right!important}.adf-start-process-definition-container{align-items:baseline;display:flex;flex-direction:row;justify-content:space-around}.adf-start-process-app-list{margin-right:10px}@media (max-width:600px){.adf-start-process{margin-left:auto;margin-right:auto;width:90%}}.adf-start-process-loading{margin-left:calc(50% - 50px);margin-right:calc(50% - 50px)}"]
                },] }
    ];
    StartProcessInstanceComponent.ctorParameters = function () { return [
        { type: ProcessService },
        { type: i1.ActivitiContentService },
        { type: i1.AppsProcessService },
        { type: i1.AppConfigService },
        { type: ProcessNamePipe }
    ]; };
    StartProcessInstanceComponent.propDecorators = {
        appId: [{ type: i0.Input }],
        title: [{ type: i0.Input }],
        processDefinitionName: [{ type: i0.Input }],
        variables: [{ type: i0.Input }],
        values: [{ type: i0.Input }],
        name: [{ type: i0.Input }],
        showSelectProcessDropdown: [{ type: i0.Input }],
        showSelectApplicationDropdown: [{ type: i0.Input }],
        processFilterSelector: [{ type: i0.Input }],
        start: [{ type: i0.Output }],
        cancel: [{ type: i0.Output }],
        error: [{ type: i0.Output }],
        processDefinitionSelection: [{ type: i0.Output }],
        applicationSelection: [{ type: i0.Output }],
        startForm: [{ type: i0.ViewChild, args: ['startForm',] }],
        inputAutocomplete: [{ type: i0.ViewChild, args: [autocomplete.MatAutocompleteTrigger,] }]
    };

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var ProcessFilterRequestRepresentation = /** @class */ (function () {
        function ProcessFilterRequestRepresentation(obj) {
            this.processDefinitionId = obj && obj.processDefinitionId || null;
            this.appDefinitionId = obj && obj.appDefinitionId || null;
            this.state = obj && obj.state || null;
            this.sort = obj && obj.sort || null;
            this.page = obj && obj.page || 0;
            this.size = obj && obj.size || 25;
        }
        return ProcessFilterRequestRepresentation;
    }());

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var ProcessListModule = /** @class */ (function () {
        function ProcessListModule() {
        }
        return ProcessListModule;
    }());
    ProcessListModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [
                        common.CommonModule,
                        MaterialModule,
                        flexLayout.FlexLayoutModule,
                        forms.FormsModule,
                        forms.ReactiveFormsModule,
                        i1.CoreModule,
                        TaskListModule,
                        PeopleModule,
                        ContentWidgetModule,
                        ProcessCommentsModule,
                        FormModule
                    ],
                    declarations: [
                        ProcessInstanceListComponent,
                        ProcessFiltersComponent,
                        ProcessInstanceDetailsComponent,
                        ProcessAuditDirective,
                        ProcessInstanceHeaderComponent,
                        ProcessInstanceTasksComponent,
                        StartProcessInstanceComponent
                    ],
                    exports: [
                        ProcessInstanceListComponent,
                        ProcessFiltersComponent,
                        ProcessInstanceDetailsComponent,
                        ProcessAuditDirective,
                        ProcessInstanceHeaderComponent,
                        ProcessInstanceTasksComponent,
                        StartProcessInstanceComponent
                    ],
                    providers: [
                        ProcessNamePipe
                    ]
                },] }
    ];

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var AppsListComponent = /** @class */ (function () {
        function AppsListComponent(appsProcessService, translationService) {
            var _this = this;
            this.appsProcessService = appsProcessService;
            this.translationService = translationService;
            this.layoutType = AppsListComponent.LAYOUT_GRID;
            this.appClick = new i0.EventEmitter();
            this.error = new i0.EventEmitter();
            this.appList = [];
            this.loading = false;
            this.hasEmptyCustomContentTemplate = false;
            this.onDestroy$ = new rxjs.Subject();
            this.apps$ = new rxjs.Observable(function (observer) { return _this.appsObserver = observer; })
                .pipe(operators.share());
        }
        AppsListComponent.prototype.ngOnInit = function () {
            var _this = this;
            if (!this.isValidType()) {
                this.setDefaultLayoutType();
            }
            this.apps$
                .pipe(operators.takeUntil(this.onDestroy$))
                .subscribe(function (app) { return _this.appList.push(app); });
            this.iconsMDL = new IconModel();
            this.load();
        };
        AppsListComponent.prototype.ngOnDestroy = function () {
            this.onDestroy$.next(true);
            this.onDestroy$.complete();
        };
        AppsListComponent.prototype.ngAfterContentInit = function () {
            if (this.emptyCustomContent) {
                this.hasEmptyCustomContentTemplate = true;
            }
        };
        AppsListComponent.prototype.load = function () {
            var _this = this;
            this.loading = true;
            this.appsProcessService
                .getDeployedApplications()
                .pipe(operators.finalize(function () { return _this.loading = false; }))
                .subscribe(function (res) {
                _this.filterApps(res).forEach(function (app) {
                    if (_this.isDefaultApp(app)) {
                        app.theme = AppsListComponent.DEFAULT_TASKS_APP_THEME;
                        app.icon = AppsListComponent.DEFAULT_TASKS_APP_ICON;
                        _this.appsObserver.next(app);
                    }
                    else if (app.deploymentId) {
                        _this.appsObserver.next(app);
                    }
                });
            }, function (err) {
                _this.error.emit(err);
            });
        };
        AppsListComponent.prototype.isDefaultApp = function (app) {
            return app.defaultAppId === AppsListComponent.DEFAULT_TASKS_APP;
        };
        AppsListComponent.prototype.getAppName = function (app) {
            return this.isDefaultApp(app)
                ? this.translationService.get(AppsListComponent.DEFAULT_TASKS_APP_NAME)
                : rxjs.of(app.name);
        };
        AppsListComponent.prototype.selectApp = function (app) {
            this.currentApp = app;
            this.appClick.emit(app);
        };
        AppsListComponent.prototype.isSelected = function (appId) {
            return (this.currentApp !== undefined && appId === this.currentApp.id);
        };
        AppsListComponent.prototype.filterApps = function (apps) {
            var _this = this;
            var filteredApps = [];
            if (this.filtersAppId) {
                apps.filter(function (app) {
                    _this.filtersAppId.forEach(function (filter) {
                        if (app.defaultAppId === filter.defaultAppId ||
                            app.deploymentId === filter.deploymentId ||
                            app.name === filter.name ||
                            app.id === filter.id ||
                            app.modelId === filter.modelId ||
                            app.tenantId === filter.tenantId) {
                            filteredApps.push(app);
                        }
                    });
                });
            }
            else {
                return apps;
            }
            return filteredApps;
        };
        AppsListComponent.prototype.isValidType = function () {
            return this.layoutType && (this.layoutType === AppsListComponent.LAYOUT_LIST || this.layoutType === AppsListComponent.LAYOUT_GRID);
        };
        AppsListComponent.prototype.setDefaultLayoutType = function () {
            this.layoutType = AppsListComponent.LAYOUT_GRID;
        };
        AppsListComponent.prototype.isList = function () {
            return this.layoutType === AppsListComponent.LAYOUT_LIST;
        };
        AppsListComponent.prototype.isGrid = function () {
            return this.layoutType === AppsListComponent.LAYOUT_GRID;
        };
        AppsListComponent.prototype.isEmpty = function () {
            return this.appList.length === 0;
        };
        AppsListComponent.prototype.isLoading = function () {
            return this.loading;
        };
        AppsListComponent.prototype.getTheme = function (app) {
            return app.theme ? app.theme : '';
        };
        AppsListComponent.prototype.getBackgroundIcon = function (app) {
            return this.iconsMDL.mapGlyphiconToMaterialDesignIcons(app.icon);
        };
        return AppsListComponent;
    }());
    AppsListComponent.LAYOUT_LIST = 'LIST';
    AppsListComponent.LAYOUT_GRID = 'GRID';
    AppsListComponent.DEFAULT_TASKS_APP = 'tasks';
    AppsListComponent.DEFAULT_TASKS_APP_NAME = 'ADF_TASK_LIST.APPS.TASK_APP_NAME';
    AppsListComponent.DEFAULT_TASKS_APP_THEME = 'theme-2';
    AppsListComponent.DEFAULT_TASKS_APP_ICON = 'glyphicon-asterisk';
    AppsListComponent.DEFAULT_TASKS_APP_MATERIAL_ICON = 'favorite_border';
    AppsListComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'adf-apps',
                    template: "<div class=\"menu-container\" *ngIf=\"!isEmpty()\">\n    <mat-list *ngIf=\"isList()\" class=\"adf-app-list\">\n        <mat-list-item class=\"adf-app-list-item\" (click)=\"selectApp(app)\" (keyup.enter)=\"selectApp(app)\" *ngFor=\"let app of appList\" tabindex=\"0\" role=\"button\" title=\"{{app.name}}\">\n            <mat-icon matListIcon>touch_app</mat-icon>\n            <span matLine>{{getAppName(app) | async}}</span>\n        </mat-list-item>\n    </mat-list>\n    <div fxLayout=\"row wrap\" *ngIf=\"isGrid()\" class=\"adf-app-listgrid\">\n        <div *ngFor=\"let app of appList\"\n            class=\"adf-app-listgrid-item\"\n            fxFlex=\"33.33333%\" fxFlex.lt-md=\"50%\" fxFlex.lt-sm=\"100%\">\n                <mat-card tabindex=\"0\"\n                    fxLayout=\"column\"\n                    role=\"button\"\n                    class=\"adf-app-listgrid-item-card\"\n                    title=\"{{getAppName(app) | async}}\"\n                    [ngClass]=\"[getTheme(app)]\"\n                    (click)=\"selectApp(app)\"\n                    (keyup.enter)=\"selectApp(app)\">\n                        <div class=\"adf-app-listgrid-item-card-logo\">\n                            <mat-icon class=\"adf-app-listgrid-item-card-logo-icon\">{{getBackgroundIcon(app)}}</mat-icon>\n                        </div>\n                        <div mat-card-title class=\"adf-app-listgrid-item-card-title\">\n                            <h1>{{getAppName(app) | async}}</h1>\n                        </div>\n                        <mat-card-subtitle class=\"adf-app-listgrid-item-card-subtitle\" fxFlex=\"1 0 auto\">\n                            <div class=\"adf-line-clamp\">{{app.description}}</div>\n                        </mat-card-subtitle>\n\n                        <mat-card-actions class=\"adf-app-listgrid-item-card-actions\">\n                            <mat-icon class=\"adf-app-listgrid-item-card-actions-icon\" *ngIf=\"isSelected(app.id)\">done</mat-icon>\n                        </mat-card-actions>\n                </mat-card>\n        </div>\n    </div>\n</div>\n\n<ng-container *ngIf=\"isLoading(); else empty\">\n    <div class=\"adf-app-list-spinner\">\n        <mat-spinner></mat-spinner>\n    </div>\n</ng-container>\n\n<ng-template #empty>\n    <div class=\"adf-app-list-empty\" *ngIf=\"isEmpty()\">\n        <ng-content select=\"adf-custom-empty-content-template\" *ngIf=\"hasEmptyCustomContentTemplate; else defaultEmptyTemplate\" class=\"adf-custom-empty-template\"></ng-content>\n\n        <ng-template #defaultEmptyTemplate>\n            <adf-empty-content\n                icon=\"apps\"\n                [title]=\"'ADF_TASK_LIST.APPS.TITLE' | translate\"\n                [subtitle]=\"'ADF_TASK_LIST.APPS.SUBTITLE' | translate\">\n            </adf-empty-content>\n        </ng-template>\n    </div>\n</ng-template>\n",
                    encapsulation: i0.ViewEncapsulation.None,
                    host: { class: 'adf-apps' },
                    styles: [".adf-apps{width:100%}.adf-app-list-item{cursor:pointer}.adf-app-list-empty,.adf-app-list-spinner{align-items:center;display:flex;flex-direction:column;height:85vh;justify-content:center}.adf-app-list-empty .mat-spinner,.adf-app-list-spinner .mat-spinner{margin:0 auto}.adf-app-listgrid{padding:8px}.adf-app-listgrid-item{box-sizing:border-box;outline:none;padding:8px}.adf-app-listgrid-item-card{min-height:200px;outline:none;padding:0!important;transition:transform .28s cubic-bezier(.4,0,.2,1),box-shadow .28s cubic-bezier(.4,0,.2,1)}.adf-app-listgrid-item-card.theme-1{background-color:#269abc}.adf-app-listgrid-item-card.theme-2{background-color:#7da9b0}.adf-app-listgrid-item-card.theme-3{background-color:#7689ab}.adf-app-listgrid-item-card.theme-4{background-color:#c74e3e}.adf-app-listgrid-item-card.theme-5{background-color:#fab96c}.adf-app-listgrid-item-card.theme-6{background-color:#759d4c}.adf-app-listgrid-item-card.theme-7{background-color:#b1b489}.adf-app-listgrid-item-card.theme-8{background-color:#a17299}.adf-app-listgrid-item-card.theme-9{background-color:#696c67}.adf-app-listgrid-item-card.theme-10{background-color:#cabb33}.adf-app-listgrid-item-card:hover{box-shadow:0 8px 10px 1px rgba(0,0,0,.14),0 3px 14px 2px rgba(0,0,0,.12),0 5px 5px -3px rgba(0,0,0,.2);cursor:pointer;transform:scale(1.015)}.adf-app-listgrid-item-card-logo{padding:16px;position:absolute;right:20px;top:20px;z-index:9}.adf-app-listgrid-item-card-logo-icon{font-size:70px;height:1em!important;width:1em!important}.theme-1 .adf-app-listgrid-item-card-logo-icon{color:#168aac}.theme-2 .adf-app-listgrid-item-card-logo-icon{color:#6d99a0}.theme-3 .adf-app-listgrid-item-card-logo-icon{color:#66799b}.theme-4 .adf-app-listgrid-item-card-logo-icon{color:#b73e2e}.theme-5 .adf-app-listgrid-item-card-logo-icon{color:#eaa95c}.theme-6 .adf-app-listgrid-item-card-logo-icon{color:#658d3c}.theme-7 .adf-app-listgrid-item-card-logo-icon{color:#a1a479}.theme-8 .adf-app-listgrid-item-card-logo-icon{color:#916289}.theme-9 .adf-app-listgrid-item-card-logo-icon{color:#595c57}.theme-10 .adf-app-listgrid-item-card-logo-icon{color:#baab23}.adf-app-listgrid-item-card-title{margin-bottom:0!important;padding:16px;z-index:9999}.adf-app-listgrid-item-card-title h1{color:#fff;font-size:24px;line-height:normal;margin:0;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;width:80%}.adf-app-listgrid-item-card-subtitle{color:#fff;padding:16px;z-index:9999}.adf-app-listgrid-item-card-subtitle .adf-line-clamp{line-height:1.25;overflow:hidden;padding:0!important;position:relative;text-overflow:ellipsis}@supports (-webkit-line-clamp:1){.adf-app-listgrid-item-card-subtitle .adf-line-clamp{-webkit-box-orient:vertical;-webkit-line-clamp:3;display:-webkit-box;height:3.7125em}}@supports not (-webkit-line-clamp:1){.adf-app-listgrid-item-card-subtitle .adf-line-clamp{white-space:nowrap;width:100%}}.adf-app-listgrid-item-card-actions{border-top:1px solid rgba(0,0,0,.1);box-sizing:border-box;min-height:48px;padding:0 16px 16px!important}.adf-app-listgrid-item-card-actions-icon{color:#e9f1f3}.adf-app-listgrid-item-card-actions.mat-card-actions{margin-left:0;margin-right:0}.adf-app-listgrid-item-card-actions.mat-card-actions:last-child{margin-bottom:0!important}"]
                },] }
    ];
    AppsListComponent.ctorParameters = function () { return [
        { type: i1.AppsProcessService },
        { type: i1.TranslationService }
    ]; };
    AppsListComponent.propDecorators = {
        emptyCustomContent: [{ type: i0.ContentChild, args: [i1.CustomEmptyContentTemplateDirective,] }],
        layoutType: [{ type: i0.Input }],
        filtersAppId: [{ type: i0.Input }],
        appClick: [{ type: i0.Output }],
        error: [{ type: i0.Output }]
    };

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var SelectAppsDialogComponent = /** @class */ (function () {
        function SelectAppsDialogComponent(appsProcessService, dialogRef, data) {
            var _this = this;
            this.appsProcessService = appsProcessService;
            this.dialogRef = dialogRef;
            this.data = data;
            this.appsProcessService.getDeployedApplications().subscribe(function (apps) {
                _this.processApps = apps.filter(function (currentApp) {
                    return currentApp.id;
                });
            });
        }
        SelectAppsDialogComponent.prototype.onStart = function () {
            this.dialogRef.close(this.selectedProcess);
        };
        return SelectAppsDialogComponent;
    }());
    SelectAppsDialogComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'adf-select-apps-dialog',
                    template: "<header mat-dialog-title id=\"adf-select-app-dialog-title\">{{'APP.DIALOG.TITLE' | translate}}</header>\n<section mat-dialog-content>\n\n    <mat-select id=\"adf-select-app-dialog-dropdown\" placeholder=\"{{'APP.DIALOG.LIST' | translate}}\" [(value)]=\"selectedProcess\" >\n        <mat-option *ngFor=\"let currentProcessApp of processApps\" [value]=\"currentProcessApp\">\n            {{ currentProcessApp.name }}\n        </mat-option>\n    </mat-select>\n\n</section>\n<footer mat-dialog-actions fxLayout=\"row\" fxLayoutAlign=\"end center\">\n    <button mat-button (click)=\"onStart()\">{{'APP.DIALOG.START' | translate}}</button>\n</footer>\n"
                },] }
    ];
    SelectAppsDialogComponent.ctorParameters = function () { return [
        { type: i1.AppsProcessService },
        { type: i1$1.MatDialogRef },
        { type: undefined, decorators: [{ type: i0.Inject, args: [i1$1.MAT_DIALOG_DATA,] }] }
    ]; };

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var AppsListModule = /** @class */ (function () {
        function AppsListModule() {
        }
        return AppsListModule;
    }());
    AppsListModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [
                        common.CommonModule,
                        MaterialModule,
                        flexLayout.FlexLayoutModule,
                        i1.CoreModule
                    ],
                    declarations: [
                        AppsListComponent,
                        SelectAppsDialogComponent
                    ],
                    exports: [
                        AppsListComponent,
                        SelectAppsDialogComponent
                    ]
                },] }
    ];

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var TaskAttachmentListComponent = /** @class */ (function () {
        function TaskAttachmentListComponent(activitiContentService, contentService, thumbnailService, ngZone) {
            this.activitiContentService = activitiContentService;
            this.contentService = contentService;
            this.thumbnailService = thumbnailService;
            this.ngZone = ngZone;
            this.disabled = false;
            this.attachmentClick = new i0.EventEmitter();
            this.success = new i0.EventEmitter();
            this.error = new i0.EventEmitter();
            this.hasCustomTemplate = false;
            this.attachments = [];
            this.isLoading = false;
        }
        TaskAttachmentListComponent.prototype.ngOnChanges = function (changes) {
            if (changes['taskId'] && changes['taskId'].currentValue) {
                this.loadAttachmentsByTaskId(changes['taskId'].currentValue);
            }
        };
        TaskAttachmentListComponent.prototype.ngAfterContentInit = function () {
            if (this.emptyTemplate) {
                this.hasCustomTemplate = true;
            }
        };
        TaskAttachmentListComponent.prototype.reset = function () {
            this.attachments = [];
        };
        TaskAttachmentListComponent.prototype.hasCustomEmptyTemplate = function () {
            return !!this.emptyTemplate;
        };
        TaskAttachmentListComponent.prototype.reload = function () {
            var _this = this;
            this.ngZone.run(function () {
                _this.loadAttachmentsByTaskId(_this.taskId);
            });
        };
        TaskAttachmentListComponent.prototype.add = function (content) {
            var _this = this;
            this.ngZone.run(function () {
                _this.attachments.push({
                    id: content.id,
                    name: content.name,
                    created: content.created,
                    createdBy: content.createdBy.firstName + ' ' + content.createdBy.lastName,
                    icon: _this.thumbnailService.getMimeTypeIcon(content.mimeType)
                });
            });
        };
        TaskAttachmentListComponent.prototype.loadAttachmentsByTaskId = function (taskId) {
            var _this = this;
            if (taskId) {
                this.isLoading = true;
                this.reset();
                var isRelatedContent = 'true';
                this.activitiContentService.getTaskRelatedContent(taskId, { isRelatedContent: isRelatedContent }).subscribe(function (res) {
                    var attachList = [];
                    res.data.forEach(function (content) {
                        attachList.push({
                            id: content.id,
                            name: content.name,
                            created: content.created,
                            createdBy: content.createdBy.firstName + ' ' + content.createdBy.lastName,
                            icon: _this.thumbnailService.getMimeTypeIcon(content.mimeType)
                        });
                    });
                    _this.attachments = attachList;
                    _this.success.emit(_this.attachments);
                    _this.isLoading = false;
                }, function (err) {
                    _this.error.emit(err);
                    _this.isLoading = false;
                });
            }
        };
        TaskAttachmentListComponent.prototype.deleteAttachmentById = function (contentId) {
            var _this = this;
            if (contentId) {
                this.activitiContentService.deleteRelatedContent(contentId).subscribe(function () {
                    _this.attachments = _this.attachments.filter(function (content) {
                        return content.id !== contentId;
                    });
                }, function (err) {
                    _this.error.emit(err);
                });
            }
        };
        TaskAttachmentListComponent.prototype.isEmpty = function () {
            return this.attachments && this.attachments.length === 0;
        };
        TaskAttachmentListComponent.prototype.onShowRowActionsMenu = function (event) {
            var viewAction = {
                title: 'ADF_TASK_LIST.MENU_ACTIONS.VIEW_CONTENT',
                name: 'view'
            };
            var removeAction = {
                title: 'ADF_TASK_LIST.MENU_ACTIONS.REMOVE_CONTENT',
                name: 'remove'
            };
            var downloadAction = {
                title: 'ADF_TASK_LIST.MENU_ACTIONS.DOWNLOAD_CONTENT',
                name: 'download'
            };
            event.value.actions = [
                viewAction,
                downloadAction
            ];
            if (!this.disabled) {
                event.value.actions.splice(1, 0, removeAction);
            }
        };
        TaskAttachmentListComponent.prototype.onExecuteRowAction = function (event) {
            var args = event.value;
            var action = args.action;
            if (action.name === 'view') {
                this.emitDocumentContent(args.row.obj);
            }
            else if (action.name === 'remove') {
                this.deleteAttachmentById(args.row.obj.id);
            }
            else if (action.name === 'download') {
                this.downloadContent(args.row.obj);
            }
        };
        TaskAttachmentListComponent.prototype.openContent = function (event) {
            var content = event.value.obj;
            this.emitDocumentContent(content);
        };
        TaskAttachmentListComponent.prototype.emitDocumentContent = function (content) {
            var _this = this;
            this.activitiContentService.getContentPreview(content.id).subscribe(function (blob) {
                content.contentBlob = blob;
                _this.attachmentClick.emit(content);
            }, function (err) {
                _this.error.emit(err);
            });
        };
        TaskAttachmentListComponent.prototype.downloadContent = function (content) {
            var _this = this;
            this.activitiContentService.getFileRawContent(content.id).subscribe(function (blob) { return _this.contentService.downloadBlob(blob, content.name); }, function (err) {
                _this.error.emit(err);
            });
        };
        TaskAttachmentListComponent.prototype.isDisabled = function () {
            return this.disabled;
        };
        return TaskAttachmentListComponent;
    }());
    TaskAttachmentListComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'adf-task-attachment-list',
                    template: "<adf-datatable [rows]=\"attachments\"\n               [actions]=\"true\"\n               [loading]=\"isLoading\"\n               (rowDblClick)=\"openContent($event)\"\n               (showRowActionsMenu)=\"onShowRowActionsMenu($event)\"\n               (executeRowAction)=\"onExecuteRowAction($event)\">\n            <adf-no-content-template>\n                <ng-template>\n                    <ng-content *ngIf=\"hasCustomTemplate; else defaulEmptyList\" class=\"adf-custom-empty-template\"></ng-content>\n                    <ng-template #defaulEmptyList>\n                        <adf-empty-list>\n                            <div adf-empty-list-header class=\"adf-empty-list-header\">\n                                {{'ADF_TASK_LIST.ATTACHMENT.EMPTY.HEADER' | translate}}\n                            </div>\n                        </adf-empty-list>\n                    </ng-template>\n                </ng-template>\n            </adf-no-content-template>\n\n            <data-columns>\n                <data-column key=\"icon\" type=\"image\" srTitle=\"ADF_TASK_LIST.PROPERTIES.THUMBNAIL\" [sortable]=\"false\"></data-column>\n                <data-column key=\"name\" type=\"text\" title=\"ADF_TASK_LIST.PROPERTIES.NAME\" class=\"adf-full-width adf-ellipsis-cell\" [sortable]=\"true\"></data-column>\n                <data-column key=\"created\" type=\"date\" format=\"shortDate\" title=\"ADF_TASK_LIST.PROPERTIES.CREATED\"></data-column>\n            </data-columns>\n            <adf-loading-content-template>\n                <ng-template>\n                <!--Add your custom loading template here-->\n                    <mat-progress-spinner class=\"adf-attachment-list-loading-margin\" [color]=\"'primary'\" [mode]=\"'indeterminate'\">\n                    </mat-progress-spinner>\n                </ng-template>\n            </adf-loading-content-template>\n</adf-datatable>\n",
                    encapsulation: i0.ViewEncapsulation.None,
                    styles: ["adf-datatable .adf-data-cell{cursor:pointer!important}.adf-attachment-list-loading-margin{margin-left:calc(50% - 50px);margin-right:calc(50% - 50px)}.adf-empty-list-header{font-size:24px;height:32px;letter-spacing:-1px;line-height:1.33;opacity:.26}.adf-empty-list-drag_drop{font-size:56px;letter-spacing:-2px;line-height:1;margin-top:40px;min-height:56px;opacity:.54;white-space:pre-line;word-break:break-all}@media screen and (max-width:599px){.adf-empty-list-drag_drop{font-size:40px}}.adf-empty-list__any-files-here-to-add{font-size:16px;letter-spacing:-.4px;line-height:1.5;margin-top:17px;min-height:24px;opacity:.54;white-space:pre-line;word-break:break-all}.adf-empty-list__empty_doc_lib{height:161px;margin-top:17px;max-width:100%;object-fit:contain;width:565px}@media screen and (max-width:599px){.adf-empty-list__empty_doc_lib{width:250px}}"]
                },] }
    ];
    TaskAttachmentListComponent.ctorParameters = function () { return [
        { type: i1.ProcessContentService },
        { type: i1.ContentService },
        { type: i1.ThumbnailService },
        { type: i0.NgZone }
    ]; };
    TaskAttachmentListComponent.propDecorators = {
        emptyTemplate: [{ type: i0.ContentChild, args: [i1.EmptyListComponent,] }],
        taskId: [{ type: i0.Input }],
        disabled: [{ type: i0.Input }],
        attachmentClick: [{ type: i0.Output }],
        success: [{ type: i0.Output }],
        error: [{ type: i0.Output }]
    };

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var ProcessAttachmentListComponent = /** @class */ (function () {
        function ProcessAttachmentListComponent(activitiContentService, contentService, thumbnailService, ngZone) {
            this.activitiContentService = activitiContentService;
            this.contentService = contentService;
            this.thumbnailService = thumbnailService;
            this.ngZone = ngZone;
            this.disabled = false;
            this.attachmentClick = new i0.EventEmitter();
            this.success = new i0.EventEmitter();
            this.error = new i0.EventEmitter();
            this.hasCustomTemplate = false;
            this.attachments = [];
            this.isLoading = false;
        }
        ProcessAttachmentListComponent.prototype.ngOnChanges = function (changes) {
            if (changes['processInstanceId'] && changes['processInstanceId'].currentValue) {
                this.loadAttachmentsByProcessInstanceId(changes['processInstanceId'].currentValue);
            }
        };
        ProcessAttachmentListComponent.prototype.ngAfterContentInit = function () {
            if (this.emptyTemplate) {
                this.hasCustomTemplate = true;
            }
        };
        ProcessAttachmentListComponent.prototype.reset = function () {
            this.attachments = [];
        };
        ProcessAttachmentListComponent.prototype.reload = function () {
            var _this = this;
            this.ngZone.run(function () {
                _this.loadAttachmentsByProcessInstanceId(_this.processInstanceId);
            });
        };
        ProcessAttachmentListComponent.prototype.hasCustomEmptyTemplate = function () {
            return !!this.emptyTemplate;
        };
        ProcessAttachmentListComponent.prototype.add = function (content) {
            var _this = this;
            this.ngZone.run(function () {
                _this.attachments.push({
                    id: content.id,
                    name: content.name,
                    created: content.created,
                    createdBy: content.createdBy.firstName + ' ' + content.createdBy.lastName,
                    icon: _this.thumbnailService.getMimeTypeIcon(content.mimeType)
                });
            });
        };
        ProcessAttachmentListComponent.prototype.loadAttachmentsByProcessInstanceId = function (processInstanceId) {
            var _this = this;
            if (processInstanceId) {
                this.reset();
                this.isLoading = true;
                var isRelatedContent = 'true';
                this.activitiContentService.getProcessRelatedContent(processInstanceId, { isRelatedContent: isRelatedContent }).subscribe(function (res) {
                    res.data.forEach(function (content) {
                        _this.attachments.push({
                            id: content.id,
                            name: content.name,
                            created: content.created,
                            createdBy: content.createdBy.firstName + ' ' + content.createdBy.lastName,
                            icon: _this.thumbnailService.getMimeTypeIcon(content.mimeType)
                        });
                    });
                    _this.success.emit(_this.attachments);
                    _this.isLoading = false;
                }, function (err) {
                    _this.error.emit(err);
                    _this.isLoading = false;
                });
            }
        };
        ProcessAttachmentListComponent.prototype.deleteAttachmentById = function (contentId) {
            var _this = this;
            if (contentId) {
                this.activitiContentService.deleteRelatedContent(contentId).subscribe(function () {
                    _this.attachments = _this.attachments.filter(function (content) {
                        return content.id !== contentId;
                    });
                }, function (err) {
                    _this.error.emit(err);
                });
            }
        };
        ProcessAttachmentListComponent.prototype.isEmpty = function () {
            return this.attachments && this.attachments.length === 0;
        };
        ProcessAttachmentListComponent.prototype.onShowRowActionsMenu = function (event) {
            var viewAction = {
                title: 'ADF_PROCESS_LIST.MENU_ACTIONS.VIEW_CONTENT',
                name: 'view'
            };
            var removeAction = {
                title: 'ADF_PROCESS_LIST.MENU_ACTIONS.REMOVE_CONTENT',
                name: 'remove'
            };
            var downloadAction = {
                title: 'ADF_PROCESS_LIST.MENU_ACTIONS.DOWNLOAD_CONTENT',
                name: 'download'
            };
            event.value.actions = [
                viewAction,
                downloadAction
            ];
            if (!this.disabled) {
                event.value.actions.splice(1, 0, removeAction);
            }
        };
        ProcessAttachmentListComponent.prototype.onExecuteRowAction = function (event) {
            var args = event.value;
            var action = args.action;
            if (action.name === 'view') {
                this.emitDocumentContent(args.row.obj);
            }
            else if (action.name === 'remove') {
                this.deleteAttachmentById(args.row.obj.id);
            }
            else if (action.name === 'download') {
                this.downloadContent(args.row.obj);
            }
        };
        ProcessAttachmentListComponent.prototype.openContent = function (event) {
            var content = event.value.obj;
            this.emitDocumentContent(content);
        };
        ProcessAttachmentListComponent.prototype.emitDocumentContent = function (content) {
            var _this = this;
            this.activitiContentService.getContentPreview(content.id).subscribe(function (blob) {
                content.contentBlob = blob;
                _this.attachmentClick.emit(content);
            }, function (err) {
                _this.error.emit(err);
            });
        };
        ProcessAttachmentListComponent.prototype.downloadContent = function (content) {
            var _this = this;
            this.activitiContentService.getFileRawContent(content.id).subscribe(function (blob) { return _this.contentService.downloadBlob(blob, content.name); }, function (err) {
                _this.error.emit(err);
            });
        };
        ProcessAttachmentListComponent.prototype.isDisabled = function () {
            return this.disabled;
        };
        return ProcessAttachmentListComponent;
    }());
    ProcessAttachmentListComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'adf-process-attachment-list',
                    template: "<adf-datatable  [rows]=\"attachments\"\n                [actions]=\"true\"\n                [loading]=\"isLoading\"\n                (rowDblClick)=\"openContent($event)\"\n                (showRowActionsMenu)=\"onShowRowActionsMenu($event)\"\n                (executeRowAction)=\"onExecuteRowAction($event)\">\n\n                <adf-no-content-template>\n                    <ng-template>\n                        <ng-content *ngIf=\"hasCustomTemplate; else defaulEmptyList\" class=\"adf-custom-empty-template\"></ng-content>\n                        <ng-template #defaulEmptyList>\n                            <adf-empty-list>\n                                <div adf-empty-list-header class=\"adf-empty-list-header\">\n                                    {{'ADF_PROCESS_LIST.PROCESS-ATTACHMENT.EMPTY.HEADER' | translate}}\n                                </div>\n                            </adf-empty-list>\n                        </ng-template>\n                    </ng-template>\n                </adf-no-content-template>\n\n    <data-columns>\n        <data-column key=\"icon\" type=\"image\" srTitle=\"ADF_PROCESS_LIST.PROPERTIES.THUMBNAIL\" [sortable]=\"false\"></data-column>\n        <data-column key=\"name\" type=\"text\" title=\"{{'ADF_PROCESS_LIST.PROPERTIES.NAME' | translate}}\" class=\"adf-full-width adf-ellipsis-cell\" [sortable]=\"true\"></data-column>\n        <data-column key=\"created\" type=\"date\" format=\"shortDate\" title=\"{{'ADF_PROCESS_LIST.PROPERTIES.CREATED' | translate}}\"></data-column>\n    </data-columns>\n\n    <adf-loading-content-template>\n        <ng-template>\n            <!--Add your custom loading template here-->\n            <mat-progress-spinner class=\"adf-attachment-list-loading-margin\" [color]=\"'primary'\" [mode]=\"'indeterminate'\">\n            </mat-progress-spinner>\n        </ng-template>\n    </adf-loading-content-template>\n\n</adf-datatable>\n",
                    encapsulation: i0.ViewEncapsulation.None,
                    styles: [".adf-data-cell{cursor:pointer!important}.adf-attachment-list-loading-margin{margin-left:calc(50% - 50px);margin-right:calc(50% - 50px)}.adf-empty-list-header{font-size:24px;height:32px;letter-spacing:-1px;line-height:1.33;opacity:.26!important}.adf-empty-list-drag_drop{font-size:56px;letter-spacing:-2px;line-height:1;margin-top:40px!important;min-height:56px;opacity:.54;white-space:pre-line;word-break:break-all}.adf-empty-list__any-files-here-to-add{font-size:16px;letter-spacing:-.4px;line-height:1.5;margin-top:17px;min-height:24px;opacity:.54;white-space:pre-line;word-break:break-all}.adf-empty-list__empty_doc_lib{height:161px;margin-top:17px;object-fit:contain;width:565px}@media screen and (max-width:599px){.adf-empty-list__empty_doc_lib{width:250px}}"]
                },] }
    ];
    ProcessAttachmentListComponent.ctorParameters = function () { return [
        { type: i1.ProcessContentService },
        { type: i1.ContentService },
        { type: i1.ThumbnailService },
        { type: i0.NgZone }
    ]; };
    ProcessAttachmentListComponent.propDecorators = {
        emptyTemplate: [{ type: i0.ContentChild, args: [i1.EmptyListComponent,] }],
        processInstanceId: [{ type: i0.Input }],
        disabled: [{ type: i0.Input }],
        attachmentClick: [{ type: i0.Output }],
        success: [{ type: i0.Output }],
        error: [{ type: i0.Output }]
    };

    var CreateProcessAttachmentComponent = /** @class */ (function () {
        function CreateProcessAttachmentComponent(activitiContentService) {
            this.activitiContentService = activitiContentService;
            this.error = new i0.EventEmitter();
            this.success = new i0.EventEmitter();
        }
        CreateProcessAttachmentComponent.prototype.ngOnChanges = function (changes) {
            if (changes['processInstanceId'] && changes['processInstanceId'].currentValue) {
                this.processInstanceId = changes['processInstanceId'].currentValue;
            }
        };
        CreateProcessAttachmentComponent.prototype.onFileUpload = function (event) {
            var e_1, _a;
            var _this = this;
            var filesList = event.detail.files.map(function (obj) { return obj.file; });
            try {
                for (var filesList_1 = __values(filesList), filesList_1_1 = filesList_1.next(); !filesList_1_1.done; filesList_1_1 = filesList_1.next()) {
                    var fileInfoObj = filesList_1_1.value;
                    var file = fileInfoObj;
                    var opts = {
                        isRelatedContent: true
                    };
                    this.activitiContentService.createProcessRelatedContent(this.processInstanceId, file, opts).subscribe(function (res) {
                        _this.success.emit(res);
                    }, function (err) {
                        _this.error.emit(err);
                    });
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (filesList_1_1 && !filesList_1_1.done && (_a = filesList_1.return)) _a.call(filesList_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
        };
        return CreateProcessAttachmentComponent;
    }());
    CreateProcessAttachmentComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'adf-create-process-attachment',
                    template: "<button\n    id=\"add_new_process_content_button\"\n    color=\"primary\"\n    mat-button\n    mat-raised-button\n    mat-icon-button\n    class=\"adf-create-attachment\"\n    [adf-upload]=\"true\"\n    [mode]=\"['click']\"\n    [multiple]=\"true\"\n    (upload-files)=\"onFileUpload($event)\">\n    <mat-icon>add</mat-icon>\n</button>\n",
                    styles: [".adf-create-attachment{display:inline-block;line-height:0;vertical-align:middle}"]
                },] }
    ];
    CreateProcessAttachmentComponent.ctorParameters = function () { return [
        { type: i1.ProcessContentService }
    ]; };
    CreateProcessAttachmentComponent.propDecorators = {
        processInstanceId: [{ type: i0.Input }],
        error: [{ type: i0.Output }],
        success: [{ type: i0.Output }]
    };

    var AttachmentComponent = /** @class */ (function () {
        function AttachmentComponent(activitiContentService) {
            this.activitiContentService = activitiContentService;
            this.error = new i0.EventEmitter();
            this.success = new i0.EventEmitter();
        }
        AttachmentComponent.prototype.ngOnChanges = function (changes) {
            if (changes['taskId'] && changes['taskId'].currentValue) {
                this.taskId = changes['taskId'].currentValue;
            }
        };
        AttachmentComponent.prototype.onFileUpload = function (event) {
            var e_1, _a;
            var _this = this;
            var filesList = event.detail.files.map(function (obj) { return obj.file; });
            try {
                for (var filesList_1 = __values(filesList), filesList_1_1 = filesList_1.next(); !filesList_1_1.done; filesList_1_1 = filesList_1.next()) {
                    var fileInfoObj = filesList_1_1.value;
                    var file = fileInfoObj;
                    var opts = {
                        isRelatedContent: true
                    };
                    this.activitiContentService.createTaskRelatedContent(this.taskId, file, opts).subscribe(function (res) {
                        _this.success.emit(res);
                    }, function (err) {
                        _this.error.emit(err);
                    });
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (filesList_1_1 && !filesList_1_1.done && (_a = filesList_1.return)) _a.call(filesList_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
        };
        return AttachmentComponent;
    }());
    AttachmentComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'adf-create-task-attachment',
                    template: "<button\n    color=\"primary\"\n    mat-button\n    mat-raised-button\n    mat-icon-button\n    class=\"adf-create-attachment\"\n    [adf-upload]=\"true\"\n    [mode]=\"['click']\"\n    [multiple]=\"true\"\n    (upload-files)=\"onFileUpload($event)\">\n    <mat-icon>add</mat-icon>\n</button>\n",
                    styles: [".adf-create-attachment{display:inline-block;line-height:0;vertical-align:middle}"]
                },] }
    ];
    AttachmentComponent.ctorParameters = function () { return [
        { type: i1.ProcessContentService }
    ]; };
    AttachmentComponent.propDecorators = {
        taskId: [{ type: i0.Input }],
        error: [{ type: i0.Output }],
        success: [{ type: i0.Output }]
    };

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var AttachmentModule = /** @class */ (function () {
        function AttachmentModule() {
        }
        return AttachmentModule;
    }());
    AttachmentModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [
                        i1.CoreModule,
                        MaterialModule
                    ],
                    declarations: [
                        TaskAttachmentListComponent,
                        ProcessAttachmentListComponent,
                        CreateProcessAttachmentComponent,
                        CreateProcessAttachmentComponent,
                        AttachmentComponent
                    ],
                    exports: [
                        TaskAttachmentListComponent,
                        ProcessAttachmentListComponent,
                        CreateProcessAttachmentComponent,
                        CreateProcessAttachmentComponent,
                        AttachmentComponent
                    ]
                },] }
    ];

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    var ProcessFormRenderingService = /** @class */ (function (_super) {
        __extends(ProcessFormRenderingService, _super);
        function ProcessFormRenderingService() {
            var _this = _super.call(this) || this;
            _this.register({
                'upload': function () { return AttachFileWidgetComponent; },
                'select-folder': function () { return AttachFolderWidgetComponent; }
            }, true);
            return _this;
        }
        return ProcessFormRenderingService;
    }(i1.FormRenderingService));
    ProcessFormRenderingService.ɵprov = i0.ɵɵdefineInjectable({ factory: function ProcessFormRenderingService_Factory() { return new ProcessFormRenderingService(); }, token: ProcessFormRenderingService, providedIn: "root" });
    ProcessFormRenderingService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    ProcessFormRenderingService.ctorParameters = function () { return []; };

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var ProcessServicesPipeModule = /** @class */ (function () {
        function ProcessServicesPipeModule() {
        }
        return ProcessServicesPipeModule;
    }());
    ProcessServicesPipeModule.decorators = [
        { type: i0.NgModule, args: [{
                    declarations: [
                        ProcessNamePipe
                    ],
                    exports: [
                        ProcessNamePipe
                    ]
                },] }
    ];

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var ɵ0$2 = {
        name: 'adf-process-services',
        source: 'assets/adf-process-services'
    };
    var ProcessModule = /** @class */ (function () {
        function ProcessModule() {
        }
        ProcessModule.forRoot = function () {
            return {
                ngModule: ProcessModule,
                providers: [
                    {
                        provide: i1.TRANSLATION_PROVIDER,
                        multi: true,
                        useValue: {
                            name: 'adf-process-services',
                            source: 'assets/adf-process-services'
                        }
                    },
                    i1.FormRenderingService,
                    { provide: i1.FormRenderingService, useClass: ProcessFormRenderingService }
                ]
            };
        };
        ProcessModule.forChild = function () {
            return {
                ngModule: ProcessModule
            };
        };
        return ProcessModule;
    }());
    ProcessModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [
                        i1.CoreModule,
                        common.CommonModule,
                        ProcessCommentsModule,
                        forms.FormsModule,
                        forms.ReactiveFormsModule,
                        MaterialModule,
                        ProcessListModule,
                        TaskListModule,
                        AppsListModule,
                        AttachmentModule,
                        PeopleModule,
                        FormModule,
                        ProcessServicesPipeModule
                    ],
                    providers: [
                        {
                            provide: i1.TRANSLATION_PROVIDER,
                            multi: true,
                            useValue: ɵ0$2
                        }
                    ],
                    exports: [
                        common.CommonModule,
                        ProcessCommentsModule,
                        forms.FormsModule,
                        forms.ReactiveFormsModule,
                        ProcessListModule,
                        TaskListModule,
                        AppsListModule,
                        AttachmentModule,
                        PeopleModule,
                        FormModule,
                        ProcessServicesPipeModule
                    ]
                },] }
    ];

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    exports.AppDefinitionRepresentationModel = AppDefinitionRepresentationModel;
    exports.AppsListComponent = AppsListComponent;
    exports.AppsListModule = AppsListModule;
    exports.AttachFileWidgetComponent = AttachFileWidgetComponent;
    exports.AttachFileWidgetDialogComponent = AttachFileWidgetDialogComponent;
    exports.AttachFileWidgetDialogService = AttachFileWidgetDialogService;
    exports.AttachFolderWidgetComponent = AttachFolderWidgetComponent;
    exports.AttachFormComponent = AttachFormComponent;
    exports.AttachmentComponent = AttachmentComponent;
    exports.AttachmentModule = AttachmentModule;
    exports.ChecklistComponent = ChecklistComponent;
    exports.ClaimTaskDirective = ClaimTaskDirective;
    exports.ContentWidgetModule = ContentWidgetModule;
    exports.CreateProcessAttachmentComponent = CreateProcessAttachmentComponent;
    exports.FilterParamsModel = FilterParamsModel;
    exports.FilterProcessRepresentationModel = FilterProcessRepresentationModel;
    exports.FilterRepresentationModel = FilterRepresentationModel;
    exports.Form = Form;
    exports.FormComponent = FormComponent;
    exports.FormCustomOutcomesComponent = FormCustomOutcomesComponent;
    exports.FormModule = FormModule;
    exports.MaterialModule = MaterialModule;
    exports.NoTaskDetailsTemplateDirective = NoTaskDetailsTemplateDirective;
    exports.PeopleComponent = PeopleComponent;
    exports.PeopleListComponent = PeopleListComponent;
    exports.PeopleModule = PeopleModule;
    exports.PeopleSearchActionLabelDirective = PeopleSearchActionLabelDirective;
    exports.PeopleSearchComponent = PeopleSearchComponent;
    exports.PeopleSearchFieldComponent = PeopleSearchFieldComponent;
    exports.PeopleSearchTitleDirective = PeopleSearchTitleDirective;
    exports.PeopleSelectorComponent = PeopleSelectorComponent;
    exports.ProcessAttachmentListComponent = ProcessAttachmentListComponent;
    exports.ProcessAuditDirective = ProcessAuditDirective;
    exports.ProcessCommentsComponent = ProcessCommentsComponent;
    exports.ProcessCommentsModule = ProcessCommentsModule;
    exports.ProcessDefinitionRepresentation = ProcessDefinitionRepresentation;
    exports.ProcessFilterParamRepresentationModel = ProcessFilterParamRepresentationModel;
    exports.ProcessFilterRequestRepresentation = ProcessFilterRequestRepresentation;
    exports.ProcessFilterService = ProcessFilterService;
    exports.ProcessFiltersComponent = ProcessFiltersComponent;
    exports.ProcessFormRenderingService = ProcessFormRenderingService;
    exports.ProcessInstance = ProcessInstance;
    exports.ProcessInstanceDetailsComponent = ProcessInstanceDetailsComponent;
    exports.ProcessInstanceHeaderComponent = ProcessInstanceHeaderComponent;
    exports.ProcessInstanceListComponent = ProcessInstanceListComponent;
    exports.ProcessInstanceTasksComponent = ProcessInstanceTasksComponent;
    exports.ProcessInstanceVariable = ProcessInstanceVariable;
    exports.ProcessListModule = ProcessListModule;
    exports.ProcessModule = ProcessModule;
    exports.ProcessNamePipe = ProcessNamePipe;
    exports.ProcessService = ProcessService;
    exports.ProcessServicesPipeModule = ProcessServicesPipeModule;
    exports.ProcessUploadService = ProcessUploadService;
    exports.SelectAppsDialogComponent = SelectAppsDialogComponent;
    exports.StartFormComponent = StartFormComponent;
    exports.StartProcessInstanceComponent = StartProcessInstanceComponent;
    exports.StartTaskComponent = StartTaskComponent;
    exports.StartTaskModel = StartTaskModel;
    exports.TaskAttachmentListComponent = TaskAttachmentListComponent;
    exports.TaskAuditDirective = TaskAuditDirective;
    exports.TaskDetailsComponent = TaskDetailsComponent;
    exports.TaskDetailsEvent = TaskDetailsEvent;
    exports.TaskDetailsModel = TaskDetailsModel;
    exports.TaskFilterService = TaskFilterService;
    exports.TaskFiltersComponent = TaskFiltersComponent;
    exports.TaskFormComponent = TaskFormComponent;
    exports.TaskHeaderComponent = TaskHeaderComponent;
    exports.TaskListComponent = TaskListComponent;
    exports.TaskListModel = TaskListModel;
    exports.TaskListModule = TaskListModule;
    exports.TaskListService = TaskListService;
    exports.TaskQueryRequestRepresentationModel = TaskQueryRequestRepresentationModel;
    exports.TaskStandaloneComponent = TaskStandaloneComponent;
    exports.TaskUploadService = TaskUploadService;
    exports.UnclaimTaskDirective = UnclaimTaskDirective;
    exports.ɵ0 = ɵ0;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=adf-process-services.umd.js.map
