/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, EventEmitter, Input, Output, ViewEncapsulation } from '@angular/core';
import { EcmModelService, NodeService, WidgetVisibilityService, FormService, FormBaseComponent, FormOutcomeModel, FormEvent, FormErrorEvent, FormModel, FormOutcomeEvent } from '@alfresco/adf-core';
import { of, Subject } from 'rxjs';
import { switchMap, takeUntil } from 'rxjs/operators';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@alfresco/adf-core';
import * as ɵngcc2 from '@angular/common';
import * as ɵngcc3 from '@angular/material/card';
import * as ɵngcc4 from '@angular/material/button';
import * as ɵngcc5 from '@angular/material/icon';
import * as ɵngcc6 from '@angular/material/tooltip';
import * as ɵngcc7 from '@ngx-translate/core';

function FormComponent_div_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div");
    ɵngcc0.ɵɵprojection(1);
    ɵngcc0.ɵɵelementEnd();
} }
function FormComponent_div_1_div_5_i_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "i", 11);
    ɵngcc0.ɵɵtext(1, "check_circle");
    ɵngcc0.ɵɵelementEnd();
} }
function FormComponent_div_1_div_5_ng_template_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "i", 12);
    ɵngcc0.ɵɵtext(1, "error");
    ɵngcc0.ɵɵelementEnd();
} }
function FormComponent_div_1_div_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 8);
    ɵngcc0.ɵɵtemplate(1, FormComponent_div_1_div_5_i_1_Template, 2, 0, "i", 9);
    ɵngcc0.ɵɵtemplate(2, FormComponent_div_1_div_5_ng_template_2_Template, 2, 0, "ng-template", null, 10, ɵngcc0.ɵɵtemplateRefExtractor);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const _r7 = ɵngcc0.ɵɵreference(3);
    const ctx_r2 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r2.form.isValid)("ngIfElse", _r7);
} }
function FormComponent_div_1_div_6_Template(rf, ctx) { if (rf & 1) {
    const _r10 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 13);
    ɵngcc0.ɵɵelementStart(1, "button", 14);
    ɵngcc0.ɵɵlistener("click", function FormComponent_div_1_div_6_Template_button_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r10); const ctx_r9 = ɵngcc0.ɵɵnextContext(2); return ctx_r9.onRefreshClicked(); });
    ɵngcc0.ɵɵelementStart(2, "mat-icon");
    ɵngcc0.ɵɵtext(3, "refresh");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} }
function FormComponent_div_1_span_7_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 1, "FORM.FORM_RENDERER.NAMELESS_TASK"), " ");
} }
function FormComponent_div_1_span_7_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 15);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵtemplate(2, FormComponent_div_1_span_7_ng_container_2_Template, 3, 3, "ng-container", 0);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r4 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("matTooltip", ctx_r4.form.taskName);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r4.form.taskName, " ");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r4.form.taskName);
} }
function FormComponent_div_1_mat_card_actions_10_button_2_Template(rf, ctx) { if (rf & 1) {
    const _r15 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 18);
    ɵngcc0.ɵɵlistener("click", function FormComponent_div_1_mat_card_actions_10_button_2_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r15); const outcome_r13 = ctx.$implicit; const ctx_r14 = ɵngcc0.ɵɵnextContext(3); return ctx_r14.onOutcomeClicked(outcome_r13); });
    ɵngcc0.ɵɵpipe(1, "formatSpace");
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "uppercase");
    ɵngcc0.ɵɵpipe(4, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const outcome_r13 = ctx.$implicit;
    const ctx_r12 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵclassProp("adf-form-hide-button", !ctx_r12.isOutcomeButtonVisible(outcome_r13, ctx_r12.form.readOnly));
    ɵngcc0.ɵɵproperty("id", ɵngcc0.ɵɵpipeBind1(1, 6, "adf-form-" + outcome_r13.name))("color", ctx_r12.getColorForOutcome(outcome_r13.name))("disabled", !ctx_r12.isOutcomeButtonEnabled(outcome_r13));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(3, 8, ɵngcc0.ɵɵpipeBind1(4, 10, outcome_r13.name)), " ");
} }
function FormComponent_div_1_mat_card_actions_10_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-card-actions", 16);
    ɵngcc0.ɵɵprojection(1, 1);
    ɵngcc0.ɵɵtemplate(2, FormComponent_div_1_mat_card_actions_10_button_2_Template, 5, 12, "button", 17);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r5 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r5.form.outcomes);
} }
function FormComponent_div_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 2);
    ɵngcc0.ɵɵelementStart(1, "mat-card");
    ɵngcc0.ɵɵelementStart(2, "mat-card-header");
    ɵngcc0.ɵɵelementStart(3, "mat-card-title");
    ɵngcc0.ɵɵelementStart(4, "h4");
    ɵngcc0.ɵɵtemplate(5, FormComponent_div_1_div_5_Template, 4, 2, "div", 3);
    ɵngcc0.ɵɵtemplate(6, FormComponent_div_1_div_6_Template, 4, 0, "div", 4);
    ɵngcc0.ɵɵtemplate(7, FormComponent_div_1_span_7_Template, 3, 3, "span", 5);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(8, "mat-card-content");
    ɵngcc0.ɵɵelement(9, "adf-form-renderer", 6);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(10, FormComponent_div_1_mat_card_actions_10_Template, 3, 1, "mat-card-actions", 7);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(5);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r1.showValidationIcon);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r1.showRefreshButton);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r1.isTitleEnabled());
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("formDefinition", ctx_r1.form);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r1.form.hasOutcomes());
} }
const _c0 = [[["", "empty-form", ""]], [["adf-form-custom-outcomes"]]];
const _c1 = ["[empty-form]", "adf-form-custom-outcomes"];
export class FormComponent extends FormBaseComponent {
    constructor(formService, visibilityService, ecmModelService, nodeService) {
        super();
        this.formService = formService;
        this.visibilityService = visibilityService;
        this.ecmModelService = ecmModelService;
        this.nodeService = nodeService;
        this.saveMetadata = false;
        this.enableFixedSpacedForm = true;
        this.formSaved = new EventEmitter();
        this.formCompleted = new EventEmitter();
        this.formContentClicked = new EventEmitter();
        this.formLoaded = new EventEmitter();
        this.formDataRefreshed = new EventEmitter();
        this.debugMode = false;
        this.onDestroy$ = new Subject();
    }
    ngOnInit() {
        this.formService.formContentClicked
            .pipe(takeUntil(this.onDestroy$))
            .subscribe(content => this.formContentClicked.emit(content));
        this.formService.validateForm
            .pipe(takeUntil(this.onDestroy$))
            .subscribe(validateFormEvent => {
            if (validateFormEvent.errorsField.length > 0) {
                this.formError.next(validateFormEvent.errorsField);
            }
        });
    }
    ngOnDestroy() {
        this.onDestroy$.next(true);
        this.onDestroy$.complete();
    }
    ngOnChanges(changes) {
        const taskId = changes['taskId'];
        if (taskId && taskId.currentValue) {
            this.getFormByTaskId(taskId.currentValue);
            return;
        }
        const formId = changes['formId'];
        if (formId && formId.currentValue) {
            this.getFormDefinitionByFormId(formId.currentValue);
            return;
        }
        const formName = changes['formName'];
        if (formName && formName.currentValue) {
            this.getFormDefinitionByFormName(formName.currentValue);
            return;
        }
        const nodeId = changes['nodeId'];
        if (nodeId && nodeId.currentValue) {
            this.loadFormForEcmNode(nodeId.currentValue);
            return;
        }
        const data = changes['data'];
        if (data && data.currentValue) {
            this.refreshFormData();
            return;
        }
    }
    onRefreshClicked() {
        this.loadForm();
    }
    loadForm() {
        if (this.taskId) {
            this.getFormByTaskId(this.taskId);
            return;
        }
        if (this.formId) {
            this.getFormDefinitionByFormId(this.formId);
            return;
        }
        if (this.formName) {
            this.getFormDefinitionByFormName(this.formName);
            return;
        }
    }
    findProcessVariablesByTaskId(taskId) {
        return this.formService.getTask(taskId).pipe(switchMap((task) => {
            if (this.isAProcessTask(task)) {
                return this.visibilityService.getTaskProcessVariable(taskId);
            }
            else {
                return of({});
            }
        }));
    }
    isAProcessTask(taskRepresentation) {
        return taskRepresentation.processDefinitionId && taskRepresentation.processDefinitionDeploymentId !== 'null';
    }
    getFormByTaskId(taskId) {
        return new Promise(resolve => {
            this.findProcessVariablesByTaskId(taskId).subscribe(() => {
                this.formService
                    .getTaskForm(taskId)
                    .subscribe((form) => {
                    const parsedForm = this.parseForm(form);
                    this.visibilityService.refreshVisibility(parsedForm);
                    parsedForm.validateForm();
                    this.form = parsedForm;
                    this.onFormLoaded(this.form);
                    resolve(this.form);
                }, (error) => {
                    this.handleError(error);
                    resolve(null);
                });
            });
        });
    }
    getFormDefinitionByFormId(formId) {
        this.formService
            .getFormDefinitionById(formId)
            .subscribe((form) => {
            this.formName = form.name;
            this.form = this.parseForm(form);
            this.visibilityService.refreshVisibility(this.form);
            this.form.validateForm();
            this.onFormLoaded(this.form);
        }, (error) => {
            this.handleError(error);
        });
    }
    getFormDefinitionByFormName(formName) {
        this.formService
            .getFormDefinitionByName(formName)
            .subscribe((id) => {
            this.formService.getFormDefinitionById(id).subscribe((form) => {
                this.form = this.parseForm(form);
                this.visibilityService.refreshVisibility(this.form);
                this.form.validateForm();
                this.onFormLoaded(this.form);
            }, (error) => {
                this.handleError(error);
            });
        }, (error) => {
            this.handleError(error);
        });
    }
    saveTaskForm() {
        if (this.form && this.form.taskId) {
            this.formService
                .saveTaskForm(this.form.taskId, this.form.values)
                .subscribe(() => {
                this.onTaskSaved(this.form);
                this.storeFormAsMetadata();
            }, (error) => this.onTaskSavedError(this.form, error));
        }
    }
    completeTaskForm(outcome) {
        if (this.form && this.form.taskId) {
            this.formService
                .completeTaskForm(this.form.taskId, this.form.values, outcome)
                .subscribe(() => {
                this.onTaskCompleted(this.form);
                this.storeFormAsMetadata();
            }, (error) => this.onTaskCompletedError(this.form, error));
        }
    }
    handleError(err) {
        this.error.emit(err);
    }
    parseForm(formRepresentationJSON) {
        if (formRepresentationJSON) {
            const form = new FormModel(formRepresentationJSON, this.data, this.readOnly, this.formService, this.enableFixedSpacedForm);
            if (!formRepresentationJSON.fields) {
                form.outcomes = this.getFormDefinitionOutcomes(form);
            }
            if (this.fieldValidators && this.fieldValidators.length > 0) {
                form.fieldValidators = this.fieldValidators;
            }
            return form;
        }
        return null;
    }
    getFormDefinitionOutcomes(form) {
        return [
            new FormOutcomeModel(form, { id: '$save', name: FormOutcomeModel.SAVE_ACTION, isSystem: true })
        ];
    }
    checkVisibility(field) {
        if (field && field.form) {
            this.visibilityService.refreshVisibility(field.form);
        }
    }
    refreshFormData() {
        this.form = this.parseForm(this.form.json);
        this.onFormLoaded(this.form);
        this.onFormDataRefreshed(this.form);
    }
    loadFormForEcmNode(nodeId) {
        this.nodeService.getNodeMetadata(nodeId).subscribe((data) => {
            this.data = data.metadata;
            this.loadFormFromActiviti(data.nodeType);
        }, this.handleError);
    }
    loadFormFromActiviti(nodeType) {
        this.formService.searchFrom(nodeType).subscribe((form) => {
            if (!form) {
                this.formService.createFormFromANode(nodeType).subscribe((formMetadata) => {
                    this.loadFormFromFormId(formMetadata.id);
                });
            }
            else {
                this.loadFormFromFormId(form.id);
            }
        }, (error) => {
            this.handleError(error);
        });
    }
    loadFormFromFormId(formId) {
        this.formId = formId;
        this.loadForm();
    }
    storeFormAsMetadata() {
        if (this.saveMetadata) {
            this.ecmModelService.createEcmTypeForActivitiForm(this.formName, this.form).subscribe((type) => {
                this.nodeService.createNodeMetadata(type.nodeType || type.entry.prefixedName, EcmModelService.MODEL_NAMESPACE, this.form.values, this.path, this.nameNode);
            }, (error) => {
                this.handleError(error);
            });
        }
    }
    onFormLoaded(form) {
        this.formLoaded.emit(form);
        this.formService.formLoaded.next(new FormEvent(form));
    }
    onFormDataRefreshed(form) {
        this.formDataRefreshed.emit(form);
        this.formService.formDataRefreshed.next(new FormEvent(form));
    }
    onTaskSaved(form) {
        this.formSaved.emit(form);
        this.formService.taskSaved.next(new FormEvent(form));
    }
    onTaskSavedError(form, error) {
        this.handleError(error);
        this.formService.taskSavedError.next(new FormErrorEvent(form, error));
    }
    onTaskCompleted(form) {
        this.formCompleted.emit(form);
        this.formService.taskCompleted.next(new FormEvent(form));
    }
    onTaskCompletedError(form, error) {
        this.handleError(error);
        this.formService.taskCompletedError.next(new FormErrorEvent(form, error));
    }
    onExecuteOutcome(outcome) {
        const args = new FormOutcomeEvent(outcome);
        this.formService.executeOutcome.next(args);
        if (args.defaultPrevented) {
            return false;
        }
        this.executeOutcome.emit(args);
        return !args.defaultPrevented;
    }
}
FormComponent.ɵfac = function FormComponent_Factory(t) { return new (t || FormComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FormService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.WidgetVisibilityService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.EcmModelService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NodeService)); };
FormComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: FormComponent, selectors: [["adf-form"]], inputs: { saveMetadata: "saveMetadata", enableFixedSpacedForm: "enableFixedSpacedForm", form: "form", formName: "formName", data: "data", formId: "formId", taskId: "taskId", nodeId: "nodeId" }, outputs: { formSaved: "formSaved", formCompleted: "formCompleted", formContentClicked: "formContentClicked", formLoaded: "formLoaded", formDataRefreshed: "formDataRefreshed" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature], ngContentSelectors: _c1, decls: 2, vars: 2, consts: [[4, "ngIf"], ["class", "adf-form-container", 4, "ngIf"], [1, "adf-form-container"], ["class", "adf-form-validation-button", 4, "ngIf"], ["class", "adf-form-reload-button", 4, "ngIf"], ["class", "adf-form-title", 3, "matTooltip", 4, "ngIf"], [3, "formDefinition"], ["class", "adf-form-mat-card-actions", 4, "ngIf"], [1, "adf-form-validation-button"], ["id", "adf-valid-form-icon", "class", "material-icons", 4, "ngIf", "ngIfElse"], ["no_valid_form", ""], ["id", "adf-valid-form-icon", 1, "material-icons"], ["id", "adf-invalid-form-icon", 1, "material-icons", "adf-invalid-color"], [1, "adf-form-reload-button"], ["mat-icon-button", "", 3, "click"], [1, "adf-form-title", 3, "matTooltip"], [1, "adf-form-mat-card-actions"], ["mat-button", "", 3, "id", "color", "disabled", "adf-form-hide-button", "click", 4, "ngFor", "ngForOf"], ["mat-button", "", 3, "id", "color", "disabled", "click"]], template: function FormComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef(_c0);
        ɵngcc0.ɵɵtemplate(0, FormComponent_div_0_Template, 2, 0, "div", 0);
        ɵngcc0.ɵɵtemplate(1, FormComponent_div_1_Template, 11, 5, "div", 1);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngIf", !ctx.hasForm());
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.hasForm());
    } }, directives: [ɵngcc2.NgIf, ɵngcc3.MatCard, ɵngcc3.MatCardHeader, ɵngcc3.MatCardTitle, ɵngcc3.MatCardContent, ɵngcc1.FormRendererComponent, ɵngcc4.MatButton, ɵngcc5.MatIcon, ɵngcc6.MatTooltip, ɵngcc3.MatCardActions, ɵngcc2.NgForOf], pipes: [ɵngcc7.TranslatePipe, ɵngcc1.FormatSpacePipe, ɵngcc2.UpperCasePipe], encapsulation: 2 });
FormComponent.ctorParameters = () => [
    { type: FormService },
    { type: WidgetVisibilityService },
    { type: EcmModelService },
    { type: NodeService }
];
FormComponent.propDecorators = {
    form: [{ type: Input }],
    taskId: [{ type: Input }],
    nodeId: [{ type: Input }],
    formId: [{ type: Input }],
    formName: [{ type: Input }],
    saveMetadata: [{ type: Input }],
    data: [{ type: Input }],
    enableFixedSpacedForm: [{ type: Input }],
    formSaved: [{ type: Output }],
    formCompleted: [{ type: Output }],
    formContentClicked: [{ type: Output }],
    formLoaded: [{ type: Output }],
    formDataRefreshed: [{ type: Output }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FormComponent, [{
        type: Component,
        args: [{
                selector: 'adf-form',
                template: "<div *ngIf=\"!hasForm()\">\n    <ng-content select=\"[empty-form]\">\n    </ng-content>\n</div>\n\n<div *ngIf=\"hasForm()\" class=\"adf-form-container\">\n    <mat-card>\n        <mat-card-header>\n            <mat-card-title>\n                <h4>\n                    <div *ngIf=\"showValidationIcon\" class=\"adf-form-validation-button\">\n                        <i id=\"adf-valid-form-icon\" class=\"material-icons\"\n                            *ngIf=\"form.isValid; else no_valid_form\">check_circle</i>\n                        <ng-template #no_valid_form>\n                            <i id=\"adf-invalid-form-icon\" class=\"material-icons adf-invalid-color\">error</i>\n                        </ng-template>\n                    </div>\n                    <div *ngIf=\"showRefreshButton\" class=\"adf-form-reload-button\">\n                        <button mat-icon-button (click)=\"onRefreshClicked()\">\n                            <mat-icon>refresh</mat-icon>\n                        </button>\n                    </div>\n                    <span *ngIf=\"isTitleEnabled()\" class=\"adf-form-title\" [matTooltip]=\"form.taskName\">\n                        {{form.taskName}}\n                        <ng-container *ngIf=\"!form.taskName\">\n                            {{'FORM.FORM_RENDERER.NAMELESS_TASK' | translate}}\n                        </ng-container>\n                    </span>\n                </h4>\n            </mat-card-title>\n        </mat-card-header>\n        <mat-card-content>\n            <adf-form-renderer [formDefinition]=\"form\">\n            </adf-form-renderer>\n        </mat-card-content>\n        <mat-card-actions *ngIf=\"form.hasOutcomes()\" class=\"adf-form-mat-card-actions\">\n            <ng-content select=\"adf-form-custom-outcomes\"></ng-content>\n            <button [id]=\"'adf-form-'+ outcome.name  | formatSpace\" *ngFor=\"let outcome of form.outcomes\"\n                [color]=\"getColorForOutcome(outcome.name)\" mat-button [disabled]=\"!isOutcomeButtonEnabled(outcome)\"\n                [class.adf-form-hide-button]=\"!isOutcomeButtonVisible(outcome, form.readOnly)\"\n                (click)=\"onOutcomeClicked(outcome)\">\n                {{outcome.name | translate | uppercase }}\n            </button>\n        </mat-card-actions>\n    </mat-card>\n</div>\n",
                encapsulation: ViewEncapsulation.None
            }]
    }], function () { return [{ type: ɵngcc1.FormService }, { type: ɵngcc1.WidgetVisibilityService }, { type: ɵngcc1.EcmModelService }, { type: ɵngcc1.NodeService }]; }, { saveMetadata: [{
            type: Input
        }], enableFixedSpacedForm: [{
            type: Input
        }], formSaved: [{
            type: Output
        }], formCompleted: [{
            type: Output
        }], formContentClicked: [{
            type: Output
        }], formLoaded: [{
            type: Output
        }], formDataRefreshed: [{
            type: Output
        }], form: [{
            type: Input
        }], formName: [{
            type: Input
        }], data: [{
            type: Input
        }], formId: [{
            type: Input
        }], taskId: [{
            type: Input
        }], nodeId: [{
            type: Input
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,