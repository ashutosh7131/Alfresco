/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { ContentService } from '@alfresco/adf-core';
import { Directive, EventEmitter, Input, Output } from '@angular/core';
import { TaskListService } from './../services/tasklist.service';
const JSON_FORMAT = 'json';
const PDF_FORMAT = 'pdf';
export class TaskAuditDirective {
    constructor(contentService, taskListService) {
        this.contentService = contentService;
        this.taskListService = taskListService;
        this.fileName = 'Audit';
        this.format = 'pdf';
        this.download = true;
        this.clicked = new EventEmitter();
        this.error = new EventEmitter();
    }
    ngOnChanges() {
        if (!this.isValidType()) {
            this.setDefaultFormatType();
        }
    }
    isValidType() {
        return this.format && (this.isJsonFormat() || this.isPdfFormat());
    }
    setDefaultFormatType() {
        this.format = PDF_FORMAT;
    }
    fetchAuditInfo() {
        if (this.isPdfFormat()) {
            this.taskListService.fetchTaskAuditPdfById(this.taskId).subscribe((blob) => {
                this.audit = blob;
                if (this.download) {
                    this.contentService.downloadBlob(this.audit, this.fileName + '.pdf');
                }
                this.clicked.emit({ format: this.format, value: this.audit, fileName: this.fileName });
            }, (err) => {
                this.error.emit(err);
            });
        }
        else {
            this.taskListService.fetchTaskAuditJsonById(this.taskId).subscribe((res) => {
                this.audit = res;
                this.clicked.emit({ format: this.format, value: this.audit, fileName: this.fileName });
            }, (err) => {
                this.error.emit(err);
            });
        }
    }
    onClickAudit() {
        this.fetchAuditInfo();
    }
    isJsonFormat() {
        return this.format === JSON_FORMAT;
    }
    isPdfFormat() {
        return this.format === PDF_FORMAT;
    }
}
TaskAuditDirective.decorators = [
    { type: Directive, args: [{
                selector: 'button[adf-task-audit]',
                host: {
                    'role': 'button',
                    '(click)': 'onClickAudit()'
                }
            },] }
];
TaskAuditDirective.ctorParameters = () => [
    { type: ContentService },
    { type: TaskListService }
];
TaskAuditDirective.propDecorators = {
    taskId: [{ type: Input, args: ['task-id',] }],
    fileName: [{ type: Input }],
    format: [{ type: Input }],
    download: [{ type: Input }],
    clicked: [{ type: Output }],
    error: [{ type: Output }]
};
//# sourceMappingURL=data:application/json;base64,