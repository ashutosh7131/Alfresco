/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { __awaiter } from "tslib";
import { Directive, HostListener, Input, Output, EventEmitter } from '@angular/core';
import { TaskListService } from '../../services/tasklist.service';
import { LogService } from '@alfresco/adf-core';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../../services/tasklist.service';
import * as ɵngcc2 from '@alfresco/adf-core';
export class UnclaimTaskDirective {
    constructor(taskListService, logService) {
        this.taskListService = taskListService;
        this.logService = logService;
        this.success = new EventEmitter();
        this.error = new EventEmitter();
        this.invalidParams = [];
    }
    ngOnInit() {
        this.validateInputs();
    }
    validateInputs() {
        if (!this.isTaskValid()) {
            this.invalidParams.push('taskId');
        }
        if (this.invalidParams.length) {
            throw new Error(`Attribute ${this.invalidParams.join(', ')} is required`);
        }
    }
    isTaskValid() {
        return this.taskId && this.taskId.length > 0;
    }
    onClick() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                yield this.unclaimTask();
            }
            catch (error) {
                this.error.emit(error);
            }
        });
    }
    unclaimTask() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.taskListService.unclaimTask(this.taskId).subscribe(() => {
                this.logService.info('Task unclaimed');
                this.success.emit(this.taskId);
            }, error => this.error.emit(error));
        });
    }
}
UnclaimTaskDirective.ɵfac = function UnclaimTaskDirective_Factory(t) { return new (t || UnclaimTaskDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.TaskListService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.LogService)); };
UnclaimTaskDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: UnclaimTaskDirective, selectors: [["", "adf-unclaim-task", ""]], hostBindings: function UnclaimTaskDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function UnclaimTaskDirective_click_HostBindingHandler() { return ctx.onClick(); });
    } }, inputs: { taskId: "taskId" }, outputs: { success: "success", error: "error" } });
UnclaimTaskDirective.ctorParameters = () => [
    { type: TaskListService },
    { type: LogService }
];
UnclaimTaskDirective.propDecorators = {
    taskId: [{ type: Input }],
    success: [{ type: Output }],
    error: [{ type: Output }],
    onClick: [{ type: HostListener, args: ['click',] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(UnclaimTaskDirective, [{
        type: Directive,
        args: [{
                selector: '[adf-unclaim-task]'
            }]
    }], function () { return [{ type: ɵngcc1.TaskListService }, { type: ɵngcc2.LogService }]; }, { success: [{
            type: Output
        }], error: [{
            type: Output
        }], onClick: [{
            type: HostListener,
            args: ['click']
        }], taskId: [{
            type: Input
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidW5jbGFpbS10YXNrLmRpcmVjdGl2ZS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vaG9tZS90cmF2aXMvYnVpbGQvQWxmcmVzY28vYWxmcmVzY28tbmcyLWNvbXBvbmVudHMvbGliL3Byb2Nlc3Mtc2VydmljZXMvc3JjL2xpYi90YXNrLWxpc3QvY29tcG9uZW50cy90YXNrLWZvcm0vdW5jbGFpbS10YXNrLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxPQUFPLEVBQ0gsU0FBUyxFQUNULFlBQVksRUFDWixLQUFLLEVBQ0wsTUFBTSxFQUNOLFlBQVksRUFDZixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0saUNBQWlDLENBQUM7QUFDbEUsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLG9CQUFvQixDQUFDOzs7O0FBTWhELE1BQU0sT0FBTyxvQkFBb0I7QUFDakMsSUFjSSxZQUNZLGVBQWdDLEVBQ2hDLFVBQXNCO0FBQUksUUFEMUIsb0JBQWUsR0FBZixlQUFlLENBQWlCO0FBQUMsUUFDakMsZUFBVSxHQUFWLFVBQVUsQ0FBWTtBQUFDLFFBVm5DLFlBQU8sR0FBc0IsSUFBSSxZQUFZLEVBQU8sQ0FBQztBQUN6RCxRQUdJLFVBQUssR0FBc0IsSUFBSSxZQUFZLEVBQU8sQ0FBQztBQUN2RCxRQUNJLGtCQUFhLEdBQWEsRUFBRSxDQUFDO0FBQ2pDLElBR3lDLENBQUM7QUFDMUMsSUFDSSxRQUFRO0FBQ1osUUFBUSxJQUFJLENBQUMsY0FBYyxFQUFFLENBQUM7QUFDOUIsSUFBSSxDQUFDO0FBQ0wsSUFDSSxjQUFjO0FBQ2xCLFFBQVEsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsRUFBRTtBQUNqQyxZQUFZLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQzlDLFNBQVM7QUFDVCxRQUFRLElBQUksSUFBSSxDQUFDLGFBQWEsQ0FBQyxNQUFNLEVBQUU7QUFDdkMsWUFBWSxNQUFNLElBQUksS0FBSyxDQUNYLGFBQWEsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FDM0QsQ0FBQztBQUNkLFNBQVM7QUFDVCxJQUFJLENBQUM7QUFDTCxJQUNJLFdBQVc7QUFBSyxRQUNaLE9BQU8sSUFBSSxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7QUFDckQsSUFBSSxDQUFDO0FBQ0wsSUFFVSxPQUFPO0FBQ2pCO0FBRVUsWUFGRixJQUFJO0FBQ1osZ0JBQVksTUFBTSxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7QUFDckMsYUFBUztBQUFDLFlBQUEsT0FBTyxLQUFLLEVBQUU7QUFDeEIsZ0JBQVksSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDbkMsYUFBUztBQUNULFFBQUksQ0FBQztBQUVKLEtBRkk7QUFDTCxJQUNrQixXQUFXO0FBQzdCO0FBQThELFlBQXRELE1BQU0sSUFBSSxDQUFDLGVBQWUsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLFNBQVMsQ0FDekQsR0FBRyxFQUFFO0FBQ2pCLGdCQUFnQixJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0FBQ3ZELGdCQUFnQixJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDL0MsWUFBWSxDQUFDLEVBQ0QsS0FBSyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FDbEMsQ0FBQztBQUNWLFFBQUksQ0FBQztBQUVMLEtBRks7QUFDTDtnREE1REMsU0FBUyxTQUFDLGtCQUVQLFFBQVEsRUFBRSxvQkFBb0IsY0FDakM7OzswRkFDSTtBQUFDO0FBQ1UsWUFSUCxlQUFlO0FBQUksWUFDbkIsVUFBVTtBQUFHO0FBQUc7QUFHdkIscUJBS0csS0FBSztBQUNSLHNCQUdHLE1BQU07QUFDVCxvQkFHRyxNQUFNO0FBQ1Qsc0JBMkJHLFlBQVksU0FBQyxPQUFPO0FBQ3JCOzs7Ozs7Ozs7Ozs7Ozs7b0JBQUU7QUFBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7XG4gICAgRGlyZWN0aXZlLFxuICAgIEhvc3RMaXN0ZW5lcixcbiAgICBJbnB1dCxcbiAgICBPdXRwdXQsXG4gICAgRXZlbnRFbWl0dGVyXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgVGFza0xpc3RTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vc2VydmljZXMvdGFza2xpc3Quc2VydmljZSc7XG5pbXBvcnQgeyBMb2dTZXJ2aWNlIH0gZnJvbSAnQGFsZnJlc2NvL2FkZi1jb3JlJztcblxuQERpcmVjdGl2ZSh7XG4gICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOiBkaXJlY3RpdmUtc2VsZWN0b3JcbiAgICBzZWxlY3RvcjogJ1thZGYtdW5jbGFpbS10YXNrXSdcbn0pXG5leHBvcnQgY2xhc3MgVW5jbGFpbVRhc2tEaXJlY3RpdmUge1xuICAgIC8qKiAoUmVxdWlyZWQpIFRoZSBpZCBvZiB0aGUgdGFzay4gKi9cbiAgICBASW5wdXQoKVxuICAgIHRhc2tJZDogc3RyaW5nO1xuXG4gICAgLyoqIEVtaXR0ZWQgd2hlbiB0aGUgdGFzayBpcyByZWxlYXNlZC4gKi9cbiAgICBAT3V0cHV0KClcbiAgICBzdWNjZXNzOiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xuXG4gICAgLyoqIEVtaXR0ZWQgd2hlbiB0aGUgdGFzayBjYW5ub3QgYmUgcmVsZWFzZWQuICovXG4gICAgQE91dHB1dCgpXG4gICAgZXJyb3I6IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XG5cbiAgICBpbnZhbGlkUGFyYW1zOiBzdHJpbmdbXSA9IFtdO1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHByaXZhdGUgdGFza0xpc3RTZXJ2aWNlOiBUYXNrTGlzdFNlcnZpY2UsXG4gICAgICAgIHByaXZhdGUgbG9nU2VydmljZTogTG9nU2VydmljZSkge31cblxuICAgIG5nT25Jbml0KCkge1xuICAgICAgICB0aGlzLnZhbGlkYXRlSW5wdXRzKCk7XG4gICAgfVxuXG4gICAgdmFsaWRhdGVJbnB1dHMoKSB7XG4gICAgICAgIGlmICghdGhpcy5pc1Rhc2tWYWxpZCgpKSB7XG4gICAgICAgICAgICB0aGlzLmludmFsaWRQYXJhbXMucHVzaCgndGFza0lkJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuaW52YWxpZFBhcmFtcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAgICAgICBgQXR0cmlidXRlICR7dGhpcy5pbnZhbGlkUGFyYW1zLmpvaW4oJywgJyl9IGlzIHJlcXVpcmVkYFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGlzVGFza1ZhbGlkKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy50YXNrSWQgJiYgdGhpcy50YXNrSWQubGVuZ3RoID4gMDtcbiAgICB9XG5cbiAgICBASG9zdExpc3RlbmVyKCdjbGljaycpXG4gICAgYXN5bmMgb25DbGljaygpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMudW5jbGFpbVRhc2soKTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIHRoaXMuZXJyb3IuZW1pdChlcnJvcik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGFzeW5jIHVuY2xhaW1UYXNrKCkge1xuICAgICAgICBhd2FpdCB0aGlzLnRhc2tMaXN0U2VydmljZS51bmNsYWltVGFzayh0aGlzLnRhc2tJZCkuc3Vic2NyaWJlKFxuICAgICAgICAgICAgKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMubG9nU2VydmljZS5pbmZvKCdUYXNrIHVuY2xhaW1lZCcpO1xuICAgICAgICAgICAgICAgIHRoaXMuc3VjY2Vzcy5lbWl0KHRoaXMudGFza0lkKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBlcnJvciA9PiB0aGlzLmVycm9yLmVtaXQoZXJyb3IpXG4gICAgICAgICk7XG4gICAgfVxufVxuIl19