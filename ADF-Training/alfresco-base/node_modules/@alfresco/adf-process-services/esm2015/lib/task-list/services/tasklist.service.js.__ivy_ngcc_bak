import { AlfrescoApiService, LogService } from '@alfresco/adf-core';
import { Injectable } from '@angular/core';
import { from, forkJoin, throwError, of } from 'rxjs';
import { map, catchError, switchMap, flatMap, filter } from 'rxjs/operators';
import { TaskQueryRequestRepresentationModel } from '../models/filter.model';
import { Form } from '../models/form.model';
import { TaskDetailsModel } from '../models/task-details.model';
import { TaskListModel } from '../models/task-list.model';
import { ModelsApi, TaskActionsApi, TasksApi, ChecklistsApi } from '@alfresco/js-api';
import * as i0 from "@angular/core";
import * as i1 from "@alfresco/adf-core";
export class TaskListService {
    constructor(apiService, logService) {
        this.apiService = apiService;
        this.logService = logService;
    }
    get modelsApi() {
        var _a;
        this._modelsApi = (_a = this._modelsApi) !== null && _a !== void 0 ? _a : new ModelsApi(this.apiService.getInstance());
        return this._modelsApi;
    }
    get tasksApi() {
        var _a;
        this._tasksApi = (_a = this._tasksApi) !== null && _a !== void 0 ? _a : new TasksApi(this.apiService.getInstance());
        return this._tasksApi;
    }
    get taskActionsApi() {
        var _a;
        this._taskActionsApi = (_a = this._taskActionsApi) !== null && _a !== void 0 ? _a : new TaskActionsApi(this.apiService.getInstance());
        return this._taskActionsApi;
    }
    get checklistsApi() {
        var _a;
        this._checklistsApi = (_a = this._checklistsApi) !== null && _a !== void 0 ? _a : new ChecklistsApi(this.apiService.getInstance());
        return this._checklistsApi;
    }
    getFilterForTaskById(taskId, filterList) {
        return from(filterList)
            .pipe(flatMap((data) => this.isTaskRelatedToFilter(taskId, data)), filter((data) => data != null));
    }
    generateTaskRequestNodeFromFilter(filterModel) {
        const requestNode = {
            appDefinitionId: filterModel.appId,
            assignment: filterModel.filter.assignment,
            state: filterModel.filter.state,
            sort: filterModel.filter.sort
        };
        return new TaskQueryRequestRepresentationModel(requestNode);
    }
    isTaskRelatedToFilter(taskId, filterModel) {
        const requestNodeForFilter = this.generateTaskRequestNodeFromFilter(filterModel);
        return from(this.callApiTasksFiltered(requestNodeForFilter))
            .pipe(map(res => {
            return res.data.find((element) => element.id === taskId) ? filterModel : null;
        }), catchError((err) => this.handleError(err)));
    }
    getTasks(requestNode) {
        return from(this.callApiTasksFiltered(requestNode))
            .pipe(catchError((err) => this.handleError(err)));
    }
    findTasksByState(requestNode, state) {
        if (state) {
            requestNode.state = state;
        }
        return this.getTasks(requestNode)
            .pipe(catchError(() => of(new TaskListModel())));
    }
    findAllTaskByState(requestNode, state) {
        if (state) {
            requestNode.state = state;
        }
        return this.getTotalTasks(requestNode)
            .pipe(switchMap((res) => {
            requestNode.size = res.total;
            return this.getTasks(requestNode);
        }));
    }
    findAllTasksWithoutState(requestNode) {
        return forkJoin(this.findTasksByState(requestNode, 'open'), this.findAllTaskByState(requestNode, 'completed'), (activeTasks, completedTasks) => {
            const tasks = Object.assign({}, activeTasks);
            tasks.total += completedTasks.total;
            tasks.data = tasks.data.concat(completedTasks.data);
            return tasks;
        });
    }
    getTaskDetails(taskId) {
        return from(this.callApiTaskDetails(taskId))
            .pipe(map(details => {
            return new TaskDetailsModel(details);
        }), catchError((err) => this.handleError(err)));
    }
    getTaskChecklist(id) {
        return from(this.callApiTaskChecklist(id))
            .pipe(map(response => {
            const checklists = [];
            response.data.forEach((checklist) => {
                checklists.push(new TaskDetailsModel(checklist));
            });
            return checklists;
        }), catchError((err) => this.handleError(err)));
    }
    getFormList() {
        const opts = {
            'filter': 'myReusableForms',
            'sort': 'modifiedDesc',
            'modelType': 2
        };
        return from(this.modelsApi.getModels(opts))
            .pipe(map(response => {
            const forms = [];
            response.data.forEach((form) => {
                forms.push(new Form(form.id, form.name));
            });
            return forms;
        }), catchError((err) => this.handleError(err)));
    }
    attachFormToATask(taskId, formId) {
        return from(this.taskActionsApi.attachForm(taskId, { 'formId': formId }))
            .pipe(catchError((err) => this.handleError(err)));
    }
    addTask(task) {
        return from(this.callApiAddTask(task))
            .pipe(map((response) => {
            return new TaskDetailsModel(response);
        }), catchError((err) => this.handleError(err)));
    }
    deleteTask(taskId) {
        return from(this.callApiDeleteTask(taskId))
            .pipe(catchError((err) => this.handleError(err)));
    }
    deleteForm(taskId) {
        return from(this.callApiDeleteForm(taskId))
            .pipe(catchError((err) => this.handleError(err)));
    }
    completeTask(taskId) {
        return from(this.taskActionsApi.completeTask(taskId))
            .pipe(catchError((err) => this.handleError(err)));
    }
    getTotalTasks(requestNode) {
        requestNode.size = 0;
        return from(this.callApiTasksFiltered(requestNode))
            .pipe(catchError((err) => this.handleError(err)));
    }
    createNewTask(task) {
        return from(this.callApiCreateTask(task))
            .pipe(map((response) => {
            return new TaskDetailsModel(response);
        }), catchError((err) => this.handleError(err)));
    }
    assignTask(taskId, requestNode) {
        const assignee = { assignee: requestNode.id };
        return from(this.callApiAssignTask(taskId, assignee))
            .pipe(map((response) => {
            return new TaskDetailsModel(response);
        }), catchError((err) => this.handleError(err)));
    }
    assignTaskByUserId(taskId, userId) {
        const assignee = { assignee: userId };
        return from(this.callApiAssignTask(taskId, assignee))
            .pipe(map((response) => {
            return new TaskDetailsModel(response);
        }), catchError((err) => this.handleError(err)));
    }
    claimTask(taskId) {
        return from(this.taskActionsApi.claimTask(taskId))
            .pipe(catchError((err) => this.handleError(err)));
    }
    unclaimTask(taskId) {
        return from(this.taskActionsApi.unclaimTask(taskId))
            .pipe(catchError((err) => this.handleError(err)));
    }
    updateTask(taskId, updated) {
        return from(this.tasksApi.updateTask(taskId, updated))
            .pipe(map((result) => result), catchError((err) => this.handleError(err)));
    }
    fetchTaskAuditPdfById(taskId) {
        return from(this.tasksApi.getTaskAuditPdf(taskId))
            .pipe(map((data) => data), catchError((err) => this.handleError(err)));
    }
    fetchTaskAuditJsonById(taskId) {
        return from(this.tasksApi.getTaskAuditLog(taskId))
            .pipe(catchError((err) => this.handleError(err)));
    }
    callApiTasksFiltered(requestNode) {
        return this.tasksApi.listTasks(requestNode);
    }
    callApiTaskDetails(taskId) {
        return this.tasksApi.getTask(taskId);
    }
    callApiAddTask(task) {
        return this.checklistsApi.addSubtask(task.parentTaskId, task);
    }
    callApiDeleteTask(taskId) {
        return this.tasksApi.deleteTask(taskId);
    }
    callApiDeleteForm(taskId) {
        return this.taskActionsApi.removeForm(taskId);
    }
    callApiTaskChecklist(taskId) {
        return this.checklistsApi.getChecklist(taskId);
    }
    callApiCreateTask(task) {
        return this.tasksApi.createNewTask(task);
    }
    callApiAssignTask(taskId, requestNode) {
        return this.taskActionsApi.assignTask(taskId, requestNode);
    }
    handleError(error) {
        this.logService.error(error);
        return throwError(error || 'Server error');
    }
}
TaskListService.ɵprov = i0.ɵɵdefineInjectable({ factory: function TaskListService_Factory() { return new TaskListService(i0.ɵɵinject(i1.AlfrescoApiService), i0.ɵɵinject(i1.LogService)); }, token: TaskListService, providedIn: "root" });
TaskListService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
TaskListService.ctorParameters = () => [
    { type: AlfrescoApiService },
    { type: LogService }
];
//# sourceMappingURL=data:application/json;base64,