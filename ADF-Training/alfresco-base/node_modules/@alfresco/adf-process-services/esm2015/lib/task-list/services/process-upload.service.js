import { AlfrescoApiService, AppConfigService, DiscoveryApiService, UploadService } from '@alfresco/adf-core';
import { ActivitiContentApi } from '@alfresco/js-api';
import { Injectable } from '@angular/core';
import { throwError } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "@alfresco/adf-core";
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@alfresco/adf-core';
export class ProcessUploadService extends UploadService {
    constructor(apiService, appConfigService, discoveryApiService) {
        super(apiService, appConfigService, discoveryApiService);
        this.apiService = apiService;
    }
    get contentApi() {
        var _a;
        this._contentApi = (_a = this._contentApi) !== null && _a !== void 0 ? _a : new ActivitiContentApi(this.apiService.getInstance());
        return this._contentApi;
    }
    getUploadPromise(file) {
        const opts = {
            isRelatedContent: true
        };
        const processInstanceId = file.options.parentId;
        const promise = this.contentApi.createRelatedContentOnProcessInstance(processInstanceId, file.file, opts);
        promise.catch((err) => this.handleError(err));
        return promise;
    }
    handleError(error) {
        return throwError(error || 'Server error');
    }
}
ProcessUploadService.ɵfac = function ProcessUploadService_Factory(t) { return new (t || ProcessUploadService)(ɵngcc0.ɵɵinject(ɵngcc1.AlfrescoApiService), ɵngcc0.ɵɵinject(ɵngcc1.AppConfigService), ɵngcc0.ɵɵinject(ɵngcc1.DiscoveryApiService)); };
ProcessUploadService.ɵprov = i0.ɵɵdefineInjectable({ factory: function ProcessUploadService_Factory() { return new ProcessUploadService(i0.ɵɵinject(i1.AlfrescoApiService), i0.ɵɵinject(i1.AppConfigService), i0.ɵɵinject(i1.DiscoveryApiService)); }, token: ProcessUploadService, providedIn: "root" });
ProcessUploadService.ctorParameters = () => [
    { type: AlfrescoApiService },
    { type: AppConfigService },
    { type: DiscoveryApiService }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ProcessUploadService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc1.AlfrescoApiService }, { type: ɵngcc1.AppConfigService }, { type: ɵngcc1.DiscoveryApiService }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvY2Vzcy11cGxvYWQuc2VydmljZS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vaG9tZS90cmF2aXMvYnVpbGQvQWxmcmVzY28vYWxmcmVzY28tbmcyLWNvbXBvbmVudHMvbGliL3Byb2Nlc3Mtc2VydmljZXMvc3JjL2xpYi90YXNrLWxpc3Qvc2VydmljZXMvcHJvY2Vzcy11cGxvYWQuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFpQkEsT0FBTyxFQUFFLGtCQUFrQixFQUFFLGdCQUFnQixFQUFFLG1CQUFtQixFQUFFLGFBQWEsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQzlHLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQ3RELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUNsQztBQUVzQjs7O0FBRXRCLE1BQU0sT0FBTyxvQkFBcUIsU0FBUSxhQUFhO0FBQ3ZELElBT0ksWUFBc0IsVUFBOEIsRUFBRSxnQkFBa0MsRUFBRSxtQkFBd0M7QUFDdEksUUFBUSxLQUFLLENBQUMsVUFBVSxFQUFFLGdCQUFnQixFQUFFLG1CQUFtQixDQUFDLENBQUM7QUFDakUsUUFGMEIsZUFBVSxHQUFWLFVBQVUsQ0FBb0I7QUFBQyxJQUVyRCxDQUFDO0FBQ0wsSUFSSSxJQUFJLFVBQVU7QUFBSztBQUFnQixRQUMvQixJQUFJLENBQUMsV0FBVyxTQUFHLElBQUksQ0FBQyxXQUFXLG1DQUFJLElBQUksa0JBQWtCLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDO0FBQ3JHLFFBQVEsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDO0FBQ2hDLElBQUksQ0FBQztBQUNMLElBS0ksZ0JBQWdCLENBQUMsSUFBUztBQUFJLFFBQzFCLE1BQU0sSUFBSSxHQUFHO0FBQ3JCLFlBQVksZ0JBQWdCLEVBQUUsSUFBSTtBQUNsQyxTQUFTLENBQUM7QUFDVixRQUFRLE1BQU0saUJBQWlCLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUM7QUFDeEQsUUFBUSxNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLHFDQUFxQyxDQUFDLGlCQUFpQixFQUFFLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDbEgsUUFDUSxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFDdEQsUUFDUSxPQUFPLE9BQU8sQ0FBQztBQUN2QixJQUFJLENBQUM7QUFDTCxJQUNZLFdBQVcsQ0FBQyxLQUFVO0FBQ2xDLFFBQVEsT0FBTyxVQUFVLENBQUMsS0FBSyxJQUFJLGNBQWMsQ0FBQyxDQUFDO0FBQ25ELElBQUksQ0FBQztBQUNMO29QQUNBO0FBQUMsMFNBNUJJO0FBQUM7RUFITCxVQUFVLFNBQUMsckJBR3dDLFlBUjNDLGtCQUFrQjtLQU12QixVQUFVLEVBQUUsTUFBTSx2QkFOUyxZQUFGLGdCQUFnQjtLQU81QyxMQVBnRCxZQUFGLG1CQUFtQjtBQUFHOzs7Ozs7NEpBQUU7QUFBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IEFsZnJlc2NvQXBpU2VydmljZSwgQXBwQ29uZmlnU2VydmljZSwgRGlzY292ZXJ5QXBpU2VydmljZSwgVXBsb2FkU2VydmljZSB9IGZyb20gJ0BhbGZyZXNjby9hZGYtY29yZSc7XG5pbXBvcnQgeyBBY3Rpdml0aUNvbnRlbnRBcGkgfSBmcm9tICdAYWxmcmVzY28vanMtYXBpJztcbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IHRocm93RXJyb3IgfSBmcm9tICdyeGpzJztcblxuQEluamVjdGFibGUoe1xuICAgIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBQcm9jZXNzVXBsb2FkU2VydmljZSBleHRlbmRzIFVwbG9hZFNlcnZpY2Uge1xuXG4gICAgcHJpdmF0ZSBfY29udGVudEFwaTtcbiAgICBnZXQgY29udGVudEFwaSgpOiBBY3Rpdml0aUNvbnRlbnRBcGkge1xuICAgICAgICB0aGlzLl9jb250ZW50QXBpID0gdGhpcy5fY29udGVudEFwaSA/PyBuZXcgQWN0aXZpdGlDb250ZW50QXBpKHRoaXMuYXBpU2VydmljZS5nZXRJbnN0YW5jZSgpKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NvbnRlbnRBcGk7XG4gICAgfVxuXG4gICAgY29uc3RydWN0b3IocHJvdGVjdGVkIGFwaVNlcnZpY2U6IEFsZnJlc2NvQXBpU2VydmljZSwgYXBwQ29uZmlnU2VydmljZTogQXBwQ29uZmlnU2VydmljZSwgZGlzY292ZXJ5QXBpU2VydmljZTogRGlzY292ZXJ5QXBpU2VydmljZSkge1xuICAgICAgICBzdXBlcihhcGlTZXJ2aWNlLCBhcHBDb25maWdTZXJ2aWNlLCBkaXNjb3ZlcnlBcGlTZXJ2aWNlKTtcbiAgICB9XG5cbiAgICBnZXRVcGxvYWRQcm9taXNlKGZpbGU6IGFueSk6IGFueSB7XG4gICAgICAgIGNvbnN0IG9wdHMgPSB7XG4gICAgICAgICAgICBpc1JlbGF0ZWRDb250ZW50OiB0cnVlXG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IHByb2Nlc3NJbnN0YW5jZUlkID0gZmlsZS5vcHRpb25zLnBhcmVudElkO1xuICAgICAgICBjb25zdCBwcm9taXNlID0gdGhpcy5jb250ZW50QXBpLmNyZWF0ZVJlbGF0ZWRDb250ZW50T25Qcm9jZXNzSW5zdGFuY2UocHJvY2Vzc0luc3RhbmNlSWQsIGZpbGUuZmlsZSwgb3B0cyk7XG5cbiAgICAgICAgcHJvbWlzZS5jYXRjaCgoZXJyKSA9PiB0aGlzLmhhbmRsZUVycm9yKGVycikpO1xuXG4gICAgICAgIHJldHVybiBwcm9taXNlO1xuICAgIH1cblxuICAgIHByaXZhdGUgaGFuZGxlRXJyb3IoZXJyb3I6IGFueSkge1xuICAgICAgICByZXR1cm4gdGhyb3dFcnJvcihlcnJvciB8fCAnU2VydmVyIGVycm9yJyk7XG4gICAgfVxuXG59XG4iXX0=