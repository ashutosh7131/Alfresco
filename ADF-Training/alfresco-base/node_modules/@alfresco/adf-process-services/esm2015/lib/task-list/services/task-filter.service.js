import { AlfrescoApiService, LogService } from '@alfresco/adf-core';
import { Injectable } from '@angular/core';
import { Observable, forkJoin, from, throwError } from 'rxjs';
import { FilterRepresentationModel } from '../models/filter.model';
import { map, catchError } from 'rxjs/operators';
import { UserFiltersApi } from '@alfresco/js-api';
import * as i0 from "@angular/core";
import * as i1 from "@alfresco/adf-core";
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@alfresco/adf-core';
export class TaskFilterService {
    constructor(apiService, logService) {
        this.apiService = apiService;
        this.logService = logService;
    }
    get userFiltersApi() {
        var _a;
        this._userFiltersApi = (_a = this._userFiltersApi) !== null && _a !== void 0 ? _a : new UserFiltersApi(this.apiService.getInstance());
        return this._userFiltersApi;
    }
    createDefaultFilters(appId) {
        const myTasksFilter = this.getMyTasksFilterInstance(appId, 0);
        const myTaskObservable = this.addFilter(myTasksFilter);
        const involvedTasksFilter = this.getInvolvedTasksFilterInstance(appId, 1);
        const involvedObservable = this.addFilter(involvedTasksFilter);
        const queuedTasksFilter = this.getQueuedTasksFilterInstance(appId, 2);
        const queuedObservable = this.addFilter(queuedTasksFilter);
        const completedTasksFilter = this.getCompletedTasksFilterInstance(appId, 3);
        const completeObservable = this.addFilter(completedTasksFilter);
        return new Observable((observer) => {
            forkJoin([
                myTaskObservable,
                involvedObservable,
                queuedObservable,
                completeObservable
            ]).subscribe((res) => {
                const filters = [];
                res.forEach((filter) => {
                    if (filter.name === involvedTasksFilter.name) {
                        filters.push(new FilterRepresentationModel(Object.assign(Object.assign({}, filter), { filter: involvedTasksFilter.filter, appId })));
                    }
                    else if (filter.name === myTasksFilter.name) {
                        filters.push(new FilterRepresentationModel(Object.assign(Object.assign({}, filter), { filter: myTasksFilter.filter, appId })));
                    }
                    else if (filter.name === queuedTasksFilter.name) {
                        filters.push(new FilterRepresentationModel(Object.assign(Object.assign({}, filter), { filter: queuedTasksFilter.filter, appId })));
                    }
                    else if (filter.name === completedTasksFilter.name) {
                        filters.push(new FilterRepresentationModel(Object.assign(Object.assign({}, filter), { filter: completedTasksFilter.filter, appId })));
                    }
                });
                observer.next(filters);
                observer.complete();
            }, (err) => {
                this.logService.error(err);
            });
        });
    }
    getTaskListFilters(appId) {
        return from(this.callApiTaskFilters(appId))
            .pipe(map((response) => {
            const filters = [];
            response.data.forEach((filter) => {
                const filterModel = new FilterRepresentationModel(filter);
                filters.push(filterModel);
            });
            return filters;
        }), catchError((err) => this.handleError(err)));
    }
    getTaskFilterById(filterId, appId) {
        return from(this.callApiTaskFilters(appId)).pipe(map((response) => response.data.find((filter) => filter.id === filterId)), catchError((err) => this.handleError(err)));
    }
    getTaskFilterByName(taskName, appId) {
        return from(this.callApiTaskFilters(appId)).pipe(map((response) => response.data.find((filter) => filter.name === taskName)), catchError((err) => this.handleError(err)));
    }
    addFilter(filter) {
        return from(this.userFiltersApi.createUserTaskFilter(filter))
            .pipe(map((response) => {
            return response;
        }), catchError((err) => this.handleError(err)));
    }
    callApiTaskFilters(appId) {
        if (appId) {
            return this.userFiltersApi.getUserTaskFilters({ appId: appId });
        }
        else {
            return this.userFiltersApi.getUserTaskFilters();
        }
    }
    getMyTasksFilterInstance(appId, index) {
        return new FilterRepresentationModel({
            'name': 'My Tasks',
            'appId': appId,
            'recent': false,
            'icon': 'glyphicon-inbox',
            'filter': { 'sort': 'created-desc', 'name': '', 'state': 'open', 'assignment': 'assignee' },
            index
        });
    }
    getInvolvedTasksFilterInstance(appId, index) {
        return new FilterRepresentationModel({
            'name': 'Involved Tasks',
            'appId': appId,
            'recent': false,
            'icon': 'glyphicon-align-left',
            'filter': { 'sort': 'created-desc', 'name': '', 'state': 'open', 'assignment': 'involved' },
            index
        });
    }
    getQueuedTasksFilterInstance(appId, index) {
        return new FilterRepresentationModel({
            'name': 'Queued Tasks',
            'appId': appId,
            'recent': false,
            'icon': 'glyphicon-record',
            'filter': { 'sort': 'created-desc', 'name': '', 'state': 'open', 'assignment': 'candidate' },
            index
        });
    }
    getCompletedTasksFilterInstance(appId, index) {
        return new FilterRepresentationModel({
            'name': 'Completed Tasks',
            'appId': appId,
            'recent': true,
            'icon': 'glyphicon-ok-sign',
            'filter': { 'sort': 'created-desc', 'name': '', 'state': 'completed', 'assignment': 'involved' },
            index
        });
    }
    handleError(error) {
        this.logService.error(error);
        return throwError(error || 'Server error');
    }
}
TaskFilterService.ɵfac = function TaskFilterService_Factory(t) { return new (t || TaskFilterService)(ɵngcc0.ɵɵinject(ɵngcc1.AlfrescoApiService), ɵngcc0.ɵɵinject(ɵngcc1.LogService)); };
TaskFilterService.ɵprov = i0.ɵɵdefineInjectable({ factory: function TaskFilterService_Factory() { return new TaskFilterService(i0.ɵɵinject(i1.AlfrescoApiService), i0.ɵɵinject(i1.LogService)); }, token: TaskFilterService, providedIn: "root" });
TaskFilterService.ctorParameters = () => [
    { type: AlfrescoApiService },
    { type: LogService }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TaskFilterService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc1.AlfrescoApiService }, { type: ɵngcc1.LogService }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,