/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { AppsProcessService } from '@alfresco/adf-core';
import { Component, EventEmitter, Input, Output, ViewEncapsulation } from '@angular/core';
import { FilterParamsModel } from '../models/filter.model';
import { TaskFilterService } from './../services/task-filter.service';
import { TaskListService } from './../services/tasklist.service';
import { IconModel } from '../../app-list/icon.model';
export class TaskFiltersComponent {
    constructor(taskFilterService, taskListService, appsProcessService) {
        this.taskFilterService = taskFilterService;
        this.taskListService = taskListService;
        this.appsProcessService = appsProcessService;
        this.filterClicked = new EventEmitter();
        this.filterSelected = new EventEmitter();
        this.success = new EventEmitter();
        this.error = new EventEmitter();
        this.filters = [];
    }
    ngOnInit() {
        this.iconsMDL = new IconModel();
    }
    ngOnChanges(changes) {
        const appName = changes['appName'];
        const appId = changes['appId'];
        const filter = changes['filterParam'];
        if (appName && appName.currentValue) {
            this.getFiltersByAppName(appName.currentValue);
        }
        else if (appId && appId.currentValue !== appId.previousValue) {
            this.getFiltersByAppId(appId.currentValue);
        }
        else if (filter && filter.currentValue !== filter.previousValue) {
            this.selectFilterAndEmit(filter.currentValue);
        }
    }
    getFilters(appId, appName) {
        appName ? this.getFiltersByAppName(appName) : this.getFiltersByAppId(appId);
    }
    getFiltersByAppId(appId) {
        this.taskFilterService.getTaskListFilters(appId).subscribe((res) => {
            if (res.length === 0 && this.isFilterListEmpty()) {
                this.createFiltersByAppId(appId);
            }
            else {
                this.resetFilter();
                this.filters = res;
                this.selectFilter(this.filterParam);
                this.success.emit(res);
            }
        }, (err) => {
            this.error.emit(err);
        });
    }
    getFiltersByAppName(appName) {
        this.appsProcessService.getDeployedApplicationsByName(appName).subscribe((application) => {
            this.getFiltersByAppId(application.id);
        }, (err) => {
            this.error.emit(err);
        });
    }
    createFiltersByAppId(appId) {
        this.taskFilterService.createDefaultFilters(appId).subscribe((resDefault) => {
            this.resetFilter();
            this.filters = resDefault;
            this.selectFilter(this.filterParam);
            this.success.emit(resDefault);
        }, (errDefault) => {
            this.error.emit(errDefault);
        });
    }
    selectFilter(newFilter) {
        if (newFilter) {
            this.currentFilter = this.filters.find((filter, index) => newFilter.index === index ||
                newFilter.id === filter.id ||
                (newFilter.name &&
                    (newFilter.name.toLocaleLowerCase() === filter.name.toLocaleLowerCase())));
        }
    }
    selectFilterAndEmit(newFilter) {
        this.selectFilter(newFilter);
        this.filterSelected.emit(this.currentFilter);
    }
    onFilterClick(filter) {
        this.selectFilter(filter);
        this.filterClicked.emit(this.currentFilter);
    }
    selectFilterWithTask(taskId) {
        const filteredFilterList = [];
        this.taskListService.getFilterForTaskById(taskId, this.filters).subscribe((filter) => {
            filteredFilterList.push(filter);
        }, (err) => {
            this.error.emit(err);
        }, () => {
            if (filteredFilterList.length > 0) {
                this.selectFilter(filteredFilterList[0]);
                this.filterSelected.emit(this.currentFilter);
            }
        });
    }
    selectDefaultTaskFilter() {
        if (!this.isFilterListEmpty()) {
            this.currentFilter = this.filters[0];
        }
    }
    getCurrentFilter() {
        return this.currentFilter;
    }
    isFilterListEmpty() {
        return this.filters === undefined || (this.filters && this.filters.length === 0);
    }
    resetFilter() {
        this.filters = [];
        this.currentFilter = undefined;
    }
    getFilterIcon(icon) {
        return this.iconsMDL.mapGlyphiconToMaterialDesignIcons(icon);
    }
}
TaskFiltersComponent.decorators = [
    { type: Component, args: [{
                selector: 'adf-task-filters',
                template: "<div *ngFor=\"let filter of filters\" class=\"adf-filters__entry\" [class.adf-active]=\"currentFilter === filter\">\n    <button (click)=\"onFilterClick(filter)\"\n      [attr.aria-label]=\"filter.name | translate\"\n      [id]=\"filter.id\"\n      [attr.data-automation-id]=\"filter.name + '_filter'\"\n      mat-button\n      class=\"adf-filter-action-button adf-full-width\" fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\n      <ng-container *ngIf=\"showIcon\">\n        <adf-icon data-automation-id=\"adf-filter-icon\" [value]=\"getFilterIcon(filter.icon)\"></adf-icon>\n      </ng-container>\n      <span data-automation-id=\"adf-filter-label\" class=\"adf-filter-action-button__label\">{{ filter.name | translate }}</span>\n    </button>\n</div>\n",
                encapsulation: ViewEncapsulation.None,
                styles: [".adf-filters__entry{cursor:pointer;font-size:14px!important;font-weight:700;height:24px;opacity:.54;padding:12px 0!important;width:100%}.adf-filters__entry .adf-full-width{display:flex;width:100%}.adf-filters__entry .adf-filter-action-button .adf-filter-action-button__label{margin:0 8px!important;padding-left:20px}.adf-filters__entry.adf-active,.adf-filters__entry:hover{color:var(--theme-primary-color);opacity:1}"]
            },] }
];
TaskFiltersComponent.ctorParameters = () => [
    { type: TaskFilterService },
    { type: TaskListService },
    { type: AppsProcessService }
];
TaskFiltersComponent.propDecorators = {
    filterParam: [{ type: Input }],
    filterClicked: [{ type: Output }],
    filterSelected: [{ type: Output }],
    success: [{ type: Output }],
    error: [{ type: Output }],
    appId: [{ type: Input }],
    appName: [{ type: Input }],
    showIcon: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,