/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, Input, Output, EventEmitter, ViewEncapsulation } from '@angular/core';
import { AuthenticationService, TranslationService } from '@alfresco/adf-core';
import { TaskListService } from '../../services/tasklist.service';
export class TaskFormComponent {
    constructor(taskListService, authService, translationService) {
        this.taskListService = taskListService;
        this.authService = authService;
        this.translationService = translationService;
        this.showFormTitle = false;
        this.showFormCompleteButton = true;
        this.showFormSaveButton = true;
        this.showCancelButton = true;
        this.readOnlyForm = false;
        this.showFormRefreshButton = true;
        this.showFormValidationIcon = true;
        this.fieldValidators = [];
        this.formSaved = new EventEmitter();
        this.formCompleted = new EventEmitter();
        this.formContentClicked = new EventEmitter();
        this.formLoaded = new EventEmitter();
        this.showAttachForm = new EventEmitter();
        this.executeOutcome = new EventEmitter();
        this.completed = new EventEmitter();
        this.formError = new EventEmitter();
        this.error = new EventEmitter();
        this.cancel = new EventEmitter();
        this.taskClaimed = new EventEmitter();
        this.taskUnclaimed = new EventEmitter();
        this.loading = false;
        this.internalReadOnlyForm = false;
    }
    ngOnInit() {
        this.authService.getBpmLoggedUser().subscribe(user => {
            this.currentLoggedUser = user;
        });
        this.loadTask(this.taskId);
    }
    ngOnChanges(changes) {
        const taskId = changes['taskId'];
        if (taskId && taskId.currentValue) {
            this.loadTask(this.taskId);
            return;
        }
    }
    loadTask(taskId) {
        this.loading = true;
        if (taskId) {
            this.taskListService.getTaskDetails(taskId).subscribe((res) => {
                this.taskDetails = res;
                if (!this.taskDetails.name) {
                    this.taskDetails.name = 'No name';
                }
                const endDate = res.endDate;
                if (endDate && !isNaN(endDate.getTime())) {
                    this.internalReadOnlyForm = true;
                }
                else {
                    this.internalReadOnlyForm = this.readOnlyForm;
                }
                this.loading = false;
            });
        }
    }
    onFormSaved(savedForm) {
        this.formSaved.emit(savedForm);
    }
    onFormCompleted(form) {
        this.formCompleted.emit(form);
    }
    onFormLoaded(form) {
        this.formLoaded.emit(form);
    }
    onFormContentClick(content) {
        this.formContentClicked.emit(content);
    }
    onFormExecuteOutcome(outcome) {
        this.executeOutcome.emit(outcome);
    }
    onFormError(error) {
        this.formError.emit(error);
    }
    onError(error) {
        this.error.emit(error);
    }
    onCompleteTask() {
        this.taskListService.completeTask(this.taskDetails.id).subscribe(() => this.completed.emit(), (error) => this.error.emit(error));
    }
    onCancel() {
        this.cancel.emit();
    }
    onShowAttachForm() {
        this.showAttachForm.emit();
    }
    hasFormKey() {
        return (this.taskDetails && (!!this.taskDetails.formKey));
    }
    isStandaloneTask() {
        return !(this.taskDetails && (!!this.taskDetails.processDefinitionId));
    }
    isTaskLoaded() {
        return !!this.taskDetails;
    }
    isCompletedTask() {
        return this.taskDetails && this.taskDetails.endDate !== undefined && this.taskDetails.endDate !== null;
    }
    isCompleteButtonVisible() {
        return !this.hasFormKey() && this.isTaskActive() && this.isCompleteButtonEnabled();
    }
    isTaskActive() {
        return this.taskDetails && this.taskDetails.duration === null;
    }
    isAssigned() {
        return !!this.taskDetails.assignee;
    }
    hasEmailAddress() {
        return this.taskDetails.assignee.email ? true : false;
    }
    isAssignedToMe() {
        return this.isAssigned() && this.hasEmailAddress() ?
            this.isEmailEqual() :
            this.isExternalIdEqual();
    }
    isEmailEqual() {
        return (this.taskDetails.assignee && this.currentLoggedUser) && (this.taskDetails.assignee.email.toLocaleLowerCase() === this.currentLoggedUser.email.toLocaleLowerCase());
    }
    isExternalIdEqual() {
        return (this.taskDetails.assignee && this.currentLoggedUser) && (this.taskDetails.assignee.externalId === this.currentLoggedUser.externalId);
    }
    isCompleteButtonEnabled() {
        return this.isAssignedToMe() || this.canInitiatorComplete();
    }
    canInitiatorComplete() {
        return this.taskDetails.initiatorCanCompleteTask;
    }
    isReadOnlyForm() {
        let readOnlyForm;
        if (this.isCandidateMember()) {
            readOnlyForm = this.internalReadOnlyForm || !this.isAssignedToMe();
        }
        else {
            readOnlyForm = this.internalReadOnlyForm || !(this.isAssignedToMe() || this.canCurrentUserAsInitiatorComplete() || this.isCurrentUserInvolved());
        }
        return readOnlyForm;
    }
    isCurrentUserInvolved() {
        var _a, _b;
        let isInvolved = false;
        if (this.taskDetails.involvedPeople && this.currentLoggedUser) {
            const userInvolved = this.taskDetails.involvedPeople.find((involvedUser) => involvedUser.email.toLocaleLowerCase() === this.currentLoggedUser.email.toLocaleLowerCase() ||
                involvedUser.id + '' === this.currentLoggedUser.externalId);
            isInvolved = !!userInvolved;
        }
        if (((_a = this.taskDetails.involvedGroups) === null || _a === void 0 ? void 0 : _a.length) && ((_b = this.currentLoggedUser.groups) === null || _b === void 0 ? void 0 : _b.length) && !isInvolved) {
            const userGroup = this.taskDetails.involvedGroups.find((involvedGroup) => this.currentLoggedUser.groups.find(group => group.name === involvedGroup.name.toLocaleLowerCase() || group.id === involvedGroup.id));
            isInvolved = !!userGroup;
        }
        return isInvolved;
    }
    canCurrentUserAsInitiatorComplete() {
        return this.canInitiatorComplete() && this.isProcessInitiator();
    }
    isProcessInitiator() {
        return this.currentLoggedUser && (this.currentLoggedUser.id === +this.taskDetails.processInstanceStartUserId);
    }
    isSaveButtonVisible() {
        return this.showFormSaveButton && (!this.canInitiatorComplete() || this.isAssignedToMe() || this.isCurrentUserInvolved());
    }
    canCompleteNoFormTask() {
        return this.isReadOnlyForm();
    }
    getCompletedTaskTranslatedMessage() {
        return this.translationService.get('ADF_TASK_FORM.COMPLETED_TASK.TITLE', { taskName: this.taskDetails.name });
    }
    isCandidateMember() {
        return this.taskDetails.managerOfCandidateGroup || this.taskDetails.memberOfCandidateGroup || this.taskDetails.memberOfCandidateUsers;
    }
    isTaskClaimable() {
        return this.isCandidateMember() && !this.isAssigned();
    }
    isTaskClaimedByCandidateMember() {
        return this.isCandidateMember() && this.isAssignedToMe() && !this.isCompletedTask();
    }
    reloadTask() {
        this.loadTask(this.taskId);
    }
    onClaimTask(taskId) {
        this.taskClaimed.emit(taskId);
    }
    onClaimTaskError(error) {
        this.error.emit(error);
    }
    onUnclaimTask(taskId) {
        this.taskUnclaimed.emit(taskId);
    }
    onUnclaimTaskError(error) {
        this.error.emit(error);
    }
}
TaskFormComponent.decorators = [
    { type: Component, args: [{
                selector: 'adf-task-form',
                template: "<ng-container *ngIf=\"!loading; else loadingTemplate\">\n  <adf-form *ngIf=\"hasFormKey(); else withoutForm\"\n    [taskId]=\"taskDetails?.id\"\n    [showTitle]=\"showFormTitle\"\n    [showValidationIcon]=\"showFormValidationIcon\"\n    [showRefreshButton]=\"showFormRefreshButton\"\n    [showCompleteButton]=\"showFormCompleteButton\"\n    [showSaveButton]=\"isSaveButtonVisible()\"\n    [disableCompleteButton]=\"!isCompleteButtonEnabled()\"\n    [readOnly]=\"isReadOnlyForm()\"\n    [fieldValidators]=\"fieldValidators\"\n    (formSaved)='onFormSaved($event)'\n    (formCompleted)='onFormCompleted($event)'\n    (formContentClicked)='onFormContentClick($event)'\n    (formLoaded)='onFormLoaded($event)'\n    (formError)='onFormError($event)'\n    (error)='onError($event)'\n    (executeOutcome)='onFormExecuteOutcome($event)'>\n    <adf-form-custom-outcomes>\n        <ng-template [ngTemplateOutlet]=\"taskFormButtons\">\n        </ng-template>\n    </adf-form-custom-outcomes>\n  </adf-form>\n  <ng-template #withoutForm>\n    <adf-task-standalone *ngIf=\"isStandaloneTask(); else emptyFormMessage\"\n        [taskName]=\"taskDetails.name\"\n        [taskId]=\"taskDetails.id\"\n        [isCompleted]=\"isCompletedTask()\"\n        [hasCompletePermission]=\"isCompleteButtonVisible()\"\n        [hideCancelButton]=\"showCancelButton\"\n        (complete)=\"onCompleteTask()\"\n        (showAttachForm)=\"onShowAttachForm()\">\n    </adf-task-standalone>\n      <ng-template #emptyFormMessage>\n        <mat-card class=\"adf-task-form-container\">\n            <mat-card-header>\n                <mat-card-title>\n                    <h4>\n                        <span class=\"adf-form-title\">\n                            {{taskDetails.name}}\n                            <ng-container *ngIf=\"!taskDetails.name\">\n                                {{'FORM.FORM_RENDERER.NAMELESS_TASK' | translate}}\n                            </ng-container>\n                        </span>\n                    </h4>\n                </mat-card-title>\n            </mat-card-header>\n            <mat-card-content>\n                <adf-empty-content *ngIf=\"isCompletedTask(); else emptyFormTemplate\"\n                    [icon]=\"'description'\"\n                    [title]=\"getCompletedTaskTranslatedMessage() | async\"\n                    [subtitle]=\"'ADF_TASK_FORM.COMPLETED_TASK.SUBTITLE'\">\n                </adf-empty-content>\n                <ng-template #emptyFormTemplate>\n                    <adf-empty-content\n                        [icon]=\"'description'\"\n                        [title]=\"'ADF_TASK_LIST.STANDALONE_TASK.NO_FORM_MESSAGE'\"\n                        [subtitle]=\"'ADF_TASK_FORM.EMPTY_FORM.SUBTITLE'\">\n                    </adf-empty-content>\n                </ng-template>\n            </mat-card-content>\n            <mat-card-actions class=\"adf-task-form-actions\">\n                <ng-template [ngTemplateOutlet]=\"taskFormButtons\"></ng-template>\n                <button mat-button\n                    *ngIf=\"!isCompletedTask()\" id=\"adf-no-form-complete-button\"\n                    color=\"primary\"\n                    [disabled]=\"canCompleteNoFormTask()\"\n                    (click)=\"onCompleteTask()\">\n                    {{'ADF_TASK_FORM.EMPTY_FORM.BUTTONS.COMPLETE' | translate}}\n                </button>\n            </mat-card-actions>\n        </mat-card>\n      </ng-template>\n  </ng-template>\n\n  <ng-template #taskFormButtons>\n        <button mat-button id=\"adf-no-form-cancel-button\"\n            *ngIf=\"showCancelButton\"\n            (click)=\"onCancel()\">\n            {{'ADF_TASK_FORM.EMPTY_FORM.BUTTONS.CANCEL' | translate}}\n        </button>\n        <button mat-button data-automation-id=\"adf-task-form-claim-button\"\n            *ngIf=\"isTaskClaimable()\"\n            adf-claim-task\n            [taskId]=\"taskId\"\n            (success)=\"onClaimTask($event)\"\n            (error)=\"onClaimTaskError($event)\">\n            {{ 'ADF_TASK_FORM.EMPTY_FORM.BUTTONS.CLAIM' | translate }}\n        </button>\n        <button mat-button data-automation-id=\"adf-task-form-unclaim-button\"\n            *ngIf=\"isTaskClaimedByCandidateMember()\"\n            adf-unclaim-task\n            [taskId]=\"taskId\"\n            (success)=\"onUnclaimTask($event)\"\n            (error)=\"onUnclaimTaskError($event)\">\n            {{ 'ADF_TASK_FORM.EMPTY_FORM.BUTTONS.UNCLAIM' | translate }}\n        </button>\n  </ng-template>\n</ng-container>\n<ng-template #loadingTemplate>\n  <div fxLayout=\"row\" fxLayoutAlign=\"center stretch\">\n      <mat-spinner></mat-spinner>\n  </div>\n</ng-template>\n",
                encapsulation: ViewEncapsulation.None,
                styles: [".adf-task-form-container{overflow:hidden}.adf-task-form-actions{float:right;padding-bottom:25px!important;padding-right:25px!important}.adf-task-form-actions .mat-button{border-radius:5px;height:36px}.adf-task-form-actions .mat-button-wrapper{font-size:var(--theme-body-2-font-size);font-weight:700;height:20px;opacity:.54;width:58px}"]
            },] }
];
TaskFormComponent.ctorParameters = () => [
    { type: TaskListService },
    { type: AuthenticationService },
    { type: TranslationService }
];
TaskFormComponent.propDecorators = {
    taskId: [{ type: Input }],
    showFormTitle: [{ type: Input }],
    showFormCompleteButton: [{ type: Input }],
    showFormSaveButton: [{ type: Input }],
    showCancelButton: [{ type: Input }],
    readOnlyForm: [{ type: Input }],
    showFormRefreshButton: [{ type: Input }],
    showFormValidationIcon: [{ type: Input }],
    fieldValidators: [{ type: Input }],
    formSaved: [{ type: Output }],
    formCompleted: [{ type: Output }],
    formContentClicked: [{ type: Output }],
    formLoaded: [{ type: Output }],
    showAttachForm: [{ type: Output }],
    executeOutcome: [{ type: Output }],
    completed: [{ type: Output }],
    formError: [{ type: Output }],
    error: [{ type: Output }],
    cancel: [{ type: Output }],
    taskClaimed: [{ type: Output }],
    taskUnclaimed: [{ type: Output }]
};
//# sourceMappingURL=data:application/json;base64,