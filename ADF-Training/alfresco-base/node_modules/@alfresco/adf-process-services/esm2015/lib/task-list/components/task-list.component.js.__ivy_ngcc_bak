/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { DataTableSchema, CustomEmptyContentTemplateDirective, CustomLoadingContentTemplateDirective, AppConfigService, PaginationComponent, UserPreferencesService, UserPreferenceValues } from '@alfresco/adf-core';
import { Component, ContentChild, EventEmitter, Input, Output } from '@angular/core';
import { BehaviorSubject, Subject } from 'rxjs';
import { TaskQueryRequestRepresentationModel } from '../models/filter.model';
import { taskPresetsDefaultModel } from '../models/task-preset.model';
import { TaskListService } from './../services/tasklist.service';
import moment from 'moment-es6';
import { takeUntil, finalize } from 'rxjs/operators';
export class TaskListComponent extends DataTableSchema {
    constructor(taskListService, appConfigService, userPreferences) {
        super(appConfigService, TaskListComponent.PRESET_KEY, taskPresetsDefaultModel);
        this.taskListService = taskListService;
        this.userPreferences = userPreferences;
        this.selectionMode = 'single';
        this.multiselect = false;
        this.selectFirstRow = true;
        this.showContextMenu = false;
        this.stickyHeader = false;
        this.showRowContextMenu = new EventEmitter();
        this.rowClick = new EventEmitter();
        this.rowsSelected = new EventEmitter();
        this.success = new EventEmitter();
        this.error = new EventEmitter();
        this.page = 0;
        this.size = PaginationComponent.DEFAULT_PAGINATION.maxItems;
        this.rows = [];
        this.isLoading = true;
        this.sorting = ['created', 'desc'];
        this.hasCustomDataSource = false;
        this.onDestroy$ = new Subject();
        this.pagination = new BehaviorSubject({
            maxItems: this.size,
            skipCount: 0,
            totalItems: 0
        });
    }
    ngAfterContentInit() {
        this.createDatatableSchema();
        if (this.data && this.data.getColumns().length === 0) {
            this.data.setColumns(this.columns);
        }
        if (this.appId) {
            this.reload();
        }
    }
    ngOnInit() {
        this.userPreferences
            .select(UserPreferenceValues.PaginationSize)
            .pipe(takeUntil(this.onDestroy$))
            .subscribe(pageSize => this.size = pageSize);
    }
    ngOnDestroy() {
        this.onDestroy$.next(true);
        this.onDestroy$.complete();
    }
    setCustomDataSource(rows) {
        if (rows) {
            this.rows = rows;
            this.hasCustomDataSource = true;
        }
    }
    ngOnChanges(changes) {
        if (this.isPropertyChanged(changes)) {
            if (this.isSortChanged(changes)) {
                this.sorting = this.sort ? this.sort.split('-') : this.sorting;
            }
            this.reload();
        }
        const presetColumnChanges = changes['presetColumn'];
        if (presetColumnChanges && !presetColumnChanges.firstChange) {
            this.columns = this.mergeJsonAndHtmlSchema();
        }
    }
    isSortChanged(changes) {
        const actualSort = changes['sort'];
        return actualSort && actualSort.currentValue && actualSort.currentValue !== actualSort.previousValue;
    }
    isPropertyChanged(changes) {
        let changed = true;
        const landingTaskId = changes['landingTaskId'];
        const page = changes['page'];
        const size = changes['size'];
        if (landingTaskId && landingTaskId.currentValue && this.isEqualToCurrentId(landingTaskId.currentValue)) {
            changed = false;
        }
        else if (page && page.currentValue !== page.previousValue) {
            changed = true;
        }
        else if (size && size.currentValue !== size.previousValue) {
            changed = true;
        }
        return changed;
    }
    reload() {
        if (!this.hasCustomDataSource) {
            this.requestNode = this.createRequestNode();
            this.load();
        }
        else {
            this.isLoading = false;
        }
    }
    load() {
        this.isLoading = true;
        this.loadTasksByState()
            .pipe(finalize(() => this.isLoading = false))
            .subscribe(tasks => {
            this.rows = this.optimizeTaskDetails(tasks.data);
            this.selectTask(this.landingTaskId);
            this.success.emit(tasks);
            this.pagination.next({
                count: tasks.data.length,
                maxItems: this.size,
                skipCount: this.page * this.size,
                totalItems: tasks.total
            });
        }, error => {
            this.error.emit(error);
        });
    }
    loadTasksByState() {
        return this.requestNode.state === 'all'
            ? this.taskListService.findAllTasksWithoutState(this.requestNode)
            : this.taskListService.findTasksByState(this.requestNode);
    }
    selectTask(taskIdSelected) {
        if (!this.isListEmpty()) {
            let dataRow = null;
            if (taskIdSelected) {
                dataRow = this.rows.find((currentRow) => {
                    return currentRow['id'] === taskIdSelected;
                });
            }
            if (!dataRow && this.selectFirstRow) {
                dataRow = this.rows[0];
            }
            if (dataRow) {
                dataRow.isSelected = true;
                this.currentInstanceId = dataRow['id'];
            }
        }
        else {
            this.currentInstanceId = null;
        }
    }
    getCurrentId() {
        return this.currentInstanceId;
    }
    isEqualToCurrentId(taskId) {
        return this.currentInstanceId === taskId;
    }
    isListEmpty() {
        return !this.rows || this.rows.length === 0;
    }
    onRowClick(item) {
        this.currentInstanceId = item.value.getValue('id');
        this.rowClick.emit(this.currentInstanceId);
    }
    onRowSelect(event) {
        this.selectedInstances = [...event.detail.selection];
        this.rowsSelected.emit(this.selectedInstances);
    }
    onRowUnselect(event) {
        this.selectedInstances = [...event.detail.selection];
        this.rowsSelected.emit(this.selectedInstances);
    }
    onRowKeyUp(event) {
        if (event.detail.keyboardEvent.key === 'Enter') {
            event.preventDefault();
            this.currentInstanceId = event.detail.row.getValue('id');
            this.rowClick.emit(this.currentInstanceId);
        }
    }
    onShowRowContextMenu(event) {
        this.showRowContextMenu.emit(event);
    }
    optimizeTaskDetails(instances) {
        instances = instances.map((task) => {
            if (!task.name) {
                task.name = 'No name';
            }
            return task;
        });
        return instances;
    }
    createRequestNode() {
        const requestNode = {
            appDefinitionId: this.appId,
            dueAfter: this.dueAfter ? moment(this.dueAfter).toDate() : null,
            dueBefore: this.dueBefore ? moment(this.dueBefore).toDate() : null,
            processInstanceId: this.processInstanceId,
            processDefinitionId: this.processDefinitionId,
            text: this.name,
            assignment: this.assignment,
            state: this.state,
            sort: this.sort,
            page: this.page,
            size: this.size,
            start: this.start,
            taskId: this.taskId,
            includeProcessInstance: this.includeProcessInstance
        };
        return new TaskQueryRequestRepresentationModel(requestNode);
    }
    updatePagination(params) {
        const needsReload = params.maxItems || params.skipCount;
        this.size = params.maxItems;
        this.page = this.currentPage(params.skipCount, params.maxItems);
        if (needsReload) {
            this.reload();
        }
    }
    currentPage(skipCount, maxItems) {
        return (skipCount && maxItems) ? Math.floor(skipCount / maxItems) : 0;
    }
}
TaskListComponent.PRESET_KEY = 'adf-task-list.presets';
TaskListComponent.decorators = [
    { type: Component, args: [{
                selector: 'adf-tasklist',
                template: "<div *ngIf=\"!requestNode\">{{ 'ADF_TASK_LIST.FILTERS.MESSAGES.NONE' | translate }}</div>\n<ng-container *ngIf=\"requestNode\">\n        <adf-datatable\n            [data]=\"data\"\n            [rows]=\"rows\"\n            [columns]=\"columns\"\n            [sorting]=\"sorting\"\n            [loading]=\"isLoading\"\n            [stickyHeader]=\"stickyHeader\"\n            [multiselect]=\"multiselect\"\n            [selectionMode]=\"selectionMode\"\n            [contextMenu]=\"showContextMenu\"\n            (showRowContextMenu)=\"onShowRowContextMenu($event)\"\n            (row-select)=\"onRowSelect($any($event))\"\n            (row-unselect)=\"onRowUnselect($any($event))\"\n            (rowClick)=\"onRowClick($any($event))\"\n            (row-keyup)=\"onRowKeyUp($any($event))\">\n            <adf-loading-content-template>\n                <ng-template>\n                    <!--Add your custom loading template here-->\n                    <mat-progress-spinner\n                        *ngIf=\"!customLoadingContent\"\n                        class=\"adf-task-list-loading-margin\"\n                        color=\"primary\"\n                        mode=\"indeterminate\">\n                    </mat-progress-spinner>\n                    <ng-content select=\"adf-custom-loading-content-template\"></ng-content>\n                </ng-template>\n            </adf-loading-content-template>\n            <adf-no-content-template>\n                <ng-template>\n                    <adf-empty-content *ngIf=\"!customEmptyContent\"\n                        icon=\"assignment\"\n                        [title]=\"'ADF_TASK_LIST.LIST.MESSAGES.TITLE' | translate\"\n                        [subtitle]=\"'ADF_TASK_LIST.LIST.MESSAGES.SUBTITLE' | translate\">\n                    </adf-empty-content>\n                    <ng-content select=\"adf-custom-empty-content-template\"></ng-content>\n                </ng-template>\n            </adf-no-content-template>\n        </adf-datatable>\n</ng-container>\n",
                styles: [".adf-task-list-loading-margin{margin-left:calc(50% - 50px);margin-right:calc(50% - 50px)}"]
            },] }
];
TaskListComponent.ctorParameters = () => [
    { type: TaskListService },
    { type: AppConfigService },
    { type: UserPreferencesService }
];
TaskListComponent.propDecorators = {
    customEmptyContent: [{ type: ContentChild, args: [CustomEmptyContentTemplateDirective,] }],
    customLoadingContent: [{ type: ContentChild, args: [CustomLoadingContentTemplateDirective,] }],
    appId: [{ type: Input }],
    processInstanceId: [{ type: Input }],
    processDefinitionId: [{ type: Input }],
    state: [{ type: Input }],
    assignment: [{ type: Input }],
    sort: [{ type: Input }],
    name: [{ type: Input }],
    landingTaskId: [{ type: Input }],
    data: [{ type: Input }],
    selectionMode: [{ type: Input }],
    multiselect: [{ type: Input }],
    selectFirstRow: [{ type: Input }],
    taskId: [{ type: Input }],
    includeProcessInstance: [{ type: Input }],
    start: [{ type: Input }],
    showContextMenu: [{ type: Input }],
    stickyHeader: [{ type: Input }],
    showRowContextMenu: [{ type: Output }],
    rowClick: [{ type: Output }],
    rowsSelected: [{ type: Output }],
    success: [{ type: Output }],
    error: [{ type: Output }],
    page: [{ type: Input }],
    size: [{ type: Input }],
    dueAfter: [{ type: Input }],
    dueBefore: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,