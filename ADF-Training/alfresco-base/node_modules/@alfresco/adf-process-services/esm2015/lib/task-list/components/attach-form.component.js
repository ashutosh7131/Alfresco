/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { FormService, LogService } from '@alfresco/adf-core';
import { Component, EventEmitter, Input, Output } from '@angular/core';
import { TaskListService } from './../services/tasklist.service';
import { FormControl, Validators } from '@angular/forms';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './../services/tasklist.service';
import * as ɵngcc2 from '@alfresco/adf-core';
import * as ɵngcc3 from '@angular/material/card';
import * as ɵngcc4 from '@angular/material/form-field';
import * as ɵngcc5 from '@angular/material/select';
import * as ɵngcc6 from '@angular/forms';
import * as ɵngcc7 from '@angular/common';
import * as ɵngcc8 from '@angular/material/button';
import * as ɵngcc9 from '@angular/material/core';
import * as ɵngcc10 from '../../form/form.component';
import * as ɵngcc11 from '@ngx-translate/core';

function AttachFormComponent_mat_option_12_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-option", 13);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const form_r3 = ctx.$implicit;
    ɵngcc0.ɵɵproperty("value", form_r3.id);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(form_r3.name);
} }
function AttachFormComponent_adf_form_13_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "adf-form", 14);
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("formId", ctx_r1.selectedFormId)("readOnly", true)("showCompleteButton", false)("showRefreshButton", false)("showValidationIcon", false);
} }
function AttachFormComponent_button_16_Template(rf, ctx) { if (rf & 1) {
    const _r5 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 15);
    ɵngcc0.ɵɵlistener("click", function AttachFormComponent_button_16_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r5); const ctx_r4 = ɵngcc0.ɵɵnextContext(); return ctx_r4.onRemoveButtonClick(); });
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(2, 1, "ADF_TASK_LIST.ATTACH_FORM.REMOVE_FORM"));
} }
export class AttachFormComponent {
    constructor(taskService, logService, formService) {
        this.taskService = taskService;
        this.logService = logService;
        this.formService = formService;
        this.cancelAttachForm = new EventEmitter();
        this.success = new EventEmitter();
        this.error = new EventEmitter();
        this.disableSubmit = true;
    }
    ngOnInit() {
        this.attachFormControl = new FormControl('', Validators.required);
        this.attachFormControl.valueChanges.subscribe((currentValue) => {
            if (this.attachFormControl.valid) {
                this.disableSubmit = this.formId === currentValue;
            }
        });
    }
    ngOnChanges() {
        this.formId = undefined;
        this.disableSubmit = true;
        this.loadFormsTask();
        if (this.formKey) {
            this.onFormAttached();
        }
    }
    onCancelButtonClick() {
        this.selectedFormId = this.formId;
        this.cancelAttachForm.emit();
    }
    onRemoveButtonClick() {
        this.taskService.deleteForm(this.taskId).subscribe(() => {
            this.formId = this.selectedFormId = null;
            this.success.emit();
        }, (err) => {
            this.error.emit(err);
            this.logService.error('An error occurred while trying to delete the form');
        });
    }
    onAttachFormButtonClick() {
        this.attachForm(this.taskId, this.selectedFormId);
    }
    loadFormsTask() {
        this.taskService.getFormList().subscribe((form) => {
            this.forms = form;
        }, (err) => {
            this.error.emit(err);
            this.logService.error('An error occurred while trying to get the forms');
        });
    }
    onFormAttached() {
        this.formService.getTaskForm(this.taskId)
            .subscribe((res) => {
            this.formService.getFormDefinitionByName(res.name).subscribe((formDef) => {
                this.formId = this.selectedFormId = formDef;
            });
        }, (err) => {
            this.error.emit(err);
            this.logService.error('Could not load forms');
        });
    }
    attachForm(taskId, formId) {
        if (taskId && formId) {
            this.taskService.attachFormToATask(taskId, formId)
                .subscribe(() => {
                this.success.emit();
            }, (err) => {
                this.error.emit(err);
                this.logService.error('Could not attach form');
            });
        }
    }
}
AttachFormComponent.ɵfac = function AttachFormComponent_Factory(t) { return new (t || AttachFormComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.TaskListService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.LogService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.FormService)); };
AttachFormComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: AttachFormComponent, selectors: [["adf-attach-form"]], inputs: { taskId: "taskId", formKey: "formKey" }, outputs: { cancelAttachForm: "cancelAttachForm", success: "success", error: "error" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 24, vars: 18, consts: [[1, "adf-attach-form"], [1, "adf-attache-form-message-container"], [1, "mat-card-title"], [1, "adf-form-title"], [1, "adf-attach-form-row"], [1, "adf-grid-full-width"], ["id", "form_id", 3, "formControl", "placeholder", "ngModel", "ngModelChange"], [3, "value", 4, "ngFor", "ngForOf"], [3, "formId", "readOnly", "showCompleteButton", "showRefreshButton", "showValidationIcon", 4, "ngIf"], [1, "adf-attach-form-mat-card-actions"], ["mat-button", "", "id", "adf-attach-form-remove-button", "color", "warn", 3, "click", 4, "ngIf"], ["mat-button", "", "id", "adf-attach-form-cancel-button", 3, "click"], ["mat-button", "", "id", "adf-attach-form-attach-button", "color", "primary", 3, "disabled", "click"], [3, "value"], [3, "formId", "readOnly", "showCompleteButton", "showRefreshButton", "showValidationIcon"], ["mat-button", "", "id", "adf-attach-form-remove-button", "color", "warn", 3, "click"]], template: function AttachFormComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "mat-card");
        ɵngcc0.ɵɵelementStart(2, "mat-card-content");
        ɵngcc0.ɵɵelementStart(3, "div", 1);
        ɵngcc0.ɵɵelementStart(4, "mat-card-title", 2);
        ɵngcc0.ɵɵelementStart(5, "h4", 3);
        ɵngcc0.ɵɵtext(6);
        ɵngcc0.ɵɵpipe(7, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(8, "div", 4);
        ɵngcc0.ɵɵelementStart(9, "mat-form-field", 5);
        ɵngcc0.ɵɵelementStart(10, "mat-select", 6);
        ɵngcc0.ɵɵlistener("ngModelChange", function AttachFormComponent_Template_mat_select_ngModelChange_10_listener($event) { return ctx.selectedFormId = $event; });
        ɵngcc0.ɵɵpipe(11, "translate");
        ɵngcc0.ɵɵtemplate(12, AttachFormComponent_mat_option_12_Template, 2, 2, "mat-option", 7);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(13, AttachFormComponent_adf_form_13_Template, 1, 5, "adf-form", 8);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(14, "mat-card-actions", 9);
        ɵngcc0.ɵɵelementStart(15, "div");
        ɵngcc0.ɵɵtemplate(16, AttachFormComponent_button_16_Template, 3, 3, "button", 10);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(17, "div");
        ɵngcc0.ɵɵelementStart(18, "button", 11);
        ɵngcc0.ɵɵlistener("click", function AttachFormComponent_Template_button_click_18_listener() { return ctx.onCancelButtonClick(); });
        ɵngcc0.ɵɵtext(19);
        ɵngcc0.ɵɵpipe(20, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(21, "button", 12);
        ɵngcc0.ɵɵlistener("click", function AttachFormComponent_Template_button_click_21_listener() { return ctx.onAttachFormButtonClick(); });
        ɵngcc0.ɵɵtext(22);
        ɵngcc0.ɵɵpipe(23, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(6);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(7, 10, "ADF_TASK_LIST.ATTACH_FORM.SELECT_FORM"));
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵpropertyInterpolate("placeholder", ɵngcc0.ɵɵpipeBind1(11, 12, "ADF_TASK_LIST.ATTACH_FORM.SELECT_OPTION"));
        ɵngcc0.ɵɵproperty("formControl", ctx.attachFormControl)("ngModel", ctx.selectedFormId);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.forms);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.attachFormControl.valid);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngIf", ctx.formKey);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(20, 14, "ADF_TASK_LIST.START_TASK.FORM.ACTION.CANCEL"));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("disabled", ctx.disableSubmit);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(23, 16, "ADF_TASK_LIST.START_TASK.FORM.LABEL.ATTACHFORM"));
    } }, directives: [ɵngcc3.MatCard, ɵngcc3.MatCardContent, ɵngcc3.MatCardTitle, ɵngcc4.MatFormField, ɵngcc5.MatSelect, ɵngcc6.NgControlStatus, ɵngcc6.FormControlDirective, ɵngcc7.NgForOf, ɵngcc7.NgIf, ɵngcc3.MatCardActions, ɵngcc8.MatButton, ɵngcc9.MatOption, ɵngcc10.FormComponent], pipes: [ɵngcc11.TranslatePipe], styles: [".adf-attach-form[_ngcontent-%COMP%]   .mat-form-field[_ngcontent-%COMP%]{width:100%}.adf-attach-form-row[_ngcontent-%COMP%]{display:flex;justify-content:space-between;margin:20px 0}.adf-attach-form[_ngcontent-%COMP%]   .adf-attach-form-mat-card-actions[_ngcontent-%COMP%]{justify-content:space-between;margin-top:30px;text-align:right}"] });
AttachFormComponent.ctorParameters = () => [
    { type: TaskListService },
    { type: LogService },
    { type: FormService }
];
AttachFormComponent.propDecorators = {
    taskId: [{ type: Input }],
    formKey: [{ type: Input }],
    cancelAttachForm: [{ type: Output }],
    success: [{ type: Output }],
    error: [{ type: Output }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AttachFormComponent, [{
        type: Component,
        args: [{
                selector: 'adf-attach-form',
                template: "<div class=\"adf-attach-form\">\n    <mat-card>\n        <mat-card-content>\n            <div class=\"adf-attache-form-message-container\">\n                <mat-card-title class=\"mat-card-title\">\n                    <h4 class=\"adf-form-title\">{{ 'ADF_TASK_LIST.ATTACH_FORM.SELECT_FORM' | translate }}</h4>\n                </mat-card-title>\n                <div class=\"adf-attach-form-row\">\n                    <mat-form-field class=\"adf-grid-full-width\">\n                        <mat-select [formControl]=\"attachFormControl\" placeholder=\"{{ 'ADF_TASK_LIST.ATTACH_FORM.SELECT_OPTION' | translate }}\" id=\"form_id\" [(ngModel)]=\"selectedFormId\">\n                            <mat-option *ngFor=\"let form of forms\" [value]=\"form.id\">{{ form.name }}</mat-option>\n                        </mat-select>\n                    </mat-form-field>\n                </div>\n\n                <adf-form *ngIf=\"this.attachFormControl.valid\"\n                    [formId]=\"selectedFormId\"\n                    [readOnly]=\"true\"\n                    [showCompleteButton]=\"false\"\n                    [showRefreshButton]=\"false\"\n                    [showValidationIcon]=\"false\">\n                </adf-form>\n            </div>\n        </mat-card-content>\n\n        <mat-card-actions class=\"adf-attach-form-mat-card-actions\">\n            <div>\n                <button mat-button id=\"adf-attach-form-remove-button\" color=\"warn\" *ngIf=\"formKey\" (click)=\"onRemoveButtonClick()\">{{ 'ADF_TASK_LIST.ATTACH_FORM.REMOVE_FORM' | translate }}</button>\n            </div>\n            <div>\n                <button mat-button id=\"adf-attach-form-cancel-button\" (click)=\"onCancelButtonClick()\">{{ 'ADF_TASK_LIST.START_TASK.FORM.ACTION.CANCEL' | translate }}</button>\n                <button mat-button id=\"adf-attach-form-attach-button\" [disabled]=\"disableSubmit\" color=\"primary\" (click)=\"onAttachFormButtonClick()\">{{ 'ADF_TASK_LIST.START_TASK.FORM.LABEL.ATTACHFORM' | translate }}</button>\n            </div>\n        </mat-card-actions>\n    </mat-card>\n</div>\n",
                styles: [".adf-attach-form .mat-form-field{width:100%}.adf-attach-form-row{display:flex;justify-content:space-between;margin:20px 0}.adf-attach-form .adf-attach-form-mat-card-actions{justify-content:space-between;margin-top:30px;text-align:right}"]
            }]
    }], function () { return [{ type: ɵngcc1.TaskListService }, { type: ɵngcc2.LogService }, { type: ɵngcc2.FormService }]; }, { cancelAttachForm: [{
            type: Output
        }], success: [{
            type: Output
        }], error: [{
            type: Output
        }], taskId: [{
            type: Input
        }], formKey: [{
            type: Input
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXR0YWNoLWZvcm0uY29tcG9uZW50LmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9ob21lL3RyYXZpcy9idWlsZC9BbGZyZXNjby9hbGZyZXNjby1uZzItY29tcG9uZW50cy9saWIvcHJvY2Vzcy1zZXJ2aWNlcy9zcmMvbGliL3Rhc2stbGlzdC9jb21wb25lbnRzL2F0dGFjaC1mb3JtLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBRUgsT0FBTyxFQUFFLFdBQVcsRUFBRSxVQUFVLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUM3RCxPQUFPLEVBQUUsU0FBUyxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQXFCLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUxRixPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFDakUsT0FBTyxFQUFFLFdBQVcsRUFBRSxVQUFVLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFRekQsTUFBTSxPQUFPLG1CQUFtQjtBQUFHLElBQy9CLFlBQW9CLFdBQTRCLEVBQzVCLFVBQXNCLEVBQ3RCLFdBQXdCO0FBQUksUUFGNUIsZ0JBQVcsR0FBWCxXQUFXLENBQWlCO0FBQUMsUUFDN0IsZUFBVSxHQUFWLFVBQVUsQ0FBWTtBQUFDLFFBQ3ZCLGdCQUFXLEdBQVgsV0FBVyxDQUFhO0FBQUMsUUFZN0MscUJBQWdCLEdBQXVCLElBQUksWUFBWSxFQUFRLENBQUM7QUFDcEUsUUFHSSxZQUFPLEdBQXVCLElBQUksWUFBWSxFQUFRLENBQUM7QUFDM0QsUUFHSSxVQUFLLEdBQXNCLElBQUksWUFBWSxFQUFPLENBQUM7QUFDdkQsUUFJSSxr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QUFBRztBQUFHO0FBQ3ZCLHFCQWlCRSxLQUFLO0FBQ1Isc0JBR0csS0FBSztBQUNSLCtCQUdHLE1BQU07QUFDVCxzQkFHRyxNQUFNO0FBQ1Qsb0JBR0csTUFBTTtBQUNWOzs7Ozs7Ozs7Ozs7Ozs7Ozs7b0JBQUU7QUFBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IEZvcm1TZXJ2aWNlLCBMb2dTZXJ2aWNlIH0gZnJvbSAnQGFsZnJlc2NvL2FkZi1jb3JlJztcbmltcG9ydCB7IENvbXBvbmVudCwgRXZlbnRFbWl0dGVyLCBJbnB1dCwgT25DaGFuZ2VzLCBPbkluaXQsIE91dHB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRm9ybSB9IGZyb20gJy4uL21vZGVscy9mb3JtLm1vZGVsJztcbmltcG9ydCB7IFRhc2tMaXN0U2VydmljZSB9IGZyb20gJy4vLi4vc2VydmljZXMvdGFza2xpc3Quc2VydmljZSc7XG5pbXBvcnQgeyBGb3JtQ29udHJvbCwgVmFsaWRhdG9ycyB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICdhZGYtYXR0YWNoLWZvcm0nLFxuICAgIHRlbXBsYXRlVXJsOiAnLi9hdHRhY2gtZm9ybS5jb21wb25lbnQuaHRtbCcsXG4gICAgc3R5bGVVcmxzOiBbJy4vYXR0YWNoLWZvcm0uY29tcG9uZW50LnNjc3MnXVxufSlcblxuZXhwb3J0IGNsYXNzIEF0dGFjaEZvcm1Db21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIE9uQ2hhbmdlcyB7XG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSB0YXNrU2VydmljZTogVGFza0xpc3RTZXJ2aWNlLFxuICAgICAgICAgICAgICAgIHByaXZhdGUgbG9nU2VydmljZTogTG9nU2VydmljZSxcbiAgICAgICAgICAgICAgICBwcml2YXRlIGZvcm1TZXJ2aWNlOiBGb3JtU2VydmljZSkgeyB9XG5cbiAgICAvKiogSWQgb2YgdGhlIHRhc2suICovXG4gICAgQElucHV0KClcbiAgICB0YXNrSWQ7XG5cbiAgICAvKiogSWRlbnRpZmllciBvZiB0aGUgZm9ybSB0byBhdHRhY2guICovXG4gICAgQElucHV0KClcbiAgICBmb3JtS2V5O1xuXG4gICAgLyoqIEVtaXR0ZWQgd2hlbiB0aGUgXCJDYW5jZWxcIiBidXR0b24gaXMgY2xpY2tlZC4gKi9cbiAgICBAT3V0cHV0KClcbiAgICBjYW5jZWxBdHRhY2hGb3JtOiBFdmVudEVtaXR0ZXI8dm9pZD4gPSBuZXcgRXZlbnRFbWl0dGVyPHZvaWQ+KCk7XG5cbiAgICAvKiogRW1pdHRlZCB3aGVuIHRoZSBmb3JtIGlzIGF0dGFjaGVkIHN1Y2Nlc3NmdWxseS4gKi9cbiAgICBAT3V0cHV0KClcbiAgICBzdWNjZXNzOiBFdmVudEVtaXR0ZXI8dm9pZD4gPSBuZXcgRXZlbnRFbWl0dGVyPHZvaWQ+KCk7XG5cbiAgICAvKiogRW1pdHRlZCB3aGVuIGFuIGVycm9yIG9jY3Vycy4gKi9cbiAgICBAT3V0cHV0KClcbiAgICBlcnJvcjogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcblxuICAgIGZvcm1zOiBGb3JtW107XG5cbiAgICBmb3JtSWQ6IG51bWJlcjtcbiAgICBkaXNhYmxlU3VibWl0OiBib29sZWFuID0gdHJ1ZTtcbiAgICBzZWxlY3RlZEZvcm1JZDogbnVtYmVyO1xuXG4gICAgYXR0YWNoRm9ybUNvbnRyb2w6IEZvcm1Db250cm9sO1xuXG4gICAgbmdPbkluaXQoKSB7XG4gICAgICAgIHRoaXMuYXR0YWNoRm9ybUNvbnRyb2wgPSBuZXcgRm9ybUNvbnRyb2woJycsIFZhbGlkYXRvcnMucmVxdWlyZWQpO1xuICAgICAgICB0aGlzLmF0dGFjaEZvcm1Db250cm9sLnZhbHVlQ2hhbmdlcy5zdWJzY3JpYmUoIChjdXJyZW50VmFsdWUpID0+IHtcbiAgICAgICAgICAgIGlmICh0aGlzLmF0dGFjaEZvcm1Db250cm9sLnZhbGlkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5kaXNhYmxlU3VibWl0ID0gdGhpcy5mb3JtSWQgPT09IGN1cnJlbnRWYWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgbmdPbkNoYW5nZXMoKSB7XG4gICAgICAgIHRoaXMuZm9ybUlkID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLmRpc2FibGVTdWJtaXQgPSB0cnVlO1xuICAgICAgICB0aGlzLmxvYWRGb3Jtc1Rhc2soKTtcbiAgICAgICAgaWYgKHRoaXMuZm9ybUtleSkge1xuICAgICAgICAgICAgdGhpcy5vbkZvcm1BdHRhY2hlZCgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgb25DYW5jZWxCdXR0b25DbGljaygpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5zZWxlY3RlZEZvcm1JZCA9IHRoaXMuZm9ybUlkO1xuICAgICAgICB0aGlzLmNhbmNlbEF0dGFjaEZvcm0uZW1pdCgpO1xuICAgIH1cblxuICAgIG9uUmVtb3ZlQnV0dG9uQ2xpY2soKTogdm9pZCB7XG4gICAgICAgIHRoaXMudGFza1NlcnZpY2UuZGVsZXRlRm9ybSh0aGlzLnRhc2tJZCkuc3Vic2NyaWJlKFxuICAgICAgICAgICAgKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuZm9ybUlkID0gdGhpcy5zZWxlY3RlZEZvcm1JZCA9IG51bGw7XG4gICAgICAgICAgICAgICAgdGhpcy5zdWNjZXNzLmVtaXQoKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAoZXJyKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5lcnJvci5lbWl0KGVycik7XG4gICAgICAgICAgICAgICAgdGhpcy5sb2dTZXJ2aWNlLmVycm9yKCdBbiBlcnJvciBvY2N1cnJlZCB3aGlsZSB0cnlpbmcgdG8gZGVsZXRlIHRoZSBmb3JtJyk7XG4gICAgICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBvbkF0dGFjaEZvcm1CdXR0b25DbGljaygpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5hdHRhY2hGb3JtKHRoaXMudGFza0lkLCB0aGlzLnNlbGVjdGVkRm9ybUlkKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGxvYWRGb3Jtc1Rhc2soKTogdm9pZCB7XG4gICAgICAgIHRoaXMudGFza1NlcnZpY2UuZ2V0Rm9ybUxpc3QoKS5zdWJzY3JpYmUoKGZvcm06IEZvcm1bXSkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuZm9ybXMgPSBmb3JtO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIChlcnIpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmVycm9yLmVtaXQoZXJyKTtcbiAgICAgICAgICAgICAgICB0aGlzLmxvZ1NlcnZpY2UuZXJyb3IoJ0FuIGVycm9yIG9jY3VycmVkIHdoaWxlIHRyeWluZyB0byBnZXQgdGhlIGZvcm1zJyk7XG4gICAgICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBwcml2YXRlIG9uRm9ybUF0dGFjaGVkKCkge1xuICAgICAgICB0aGlzLmZvcm1TZXJ2aWNlLmdldFRhc2tGb3JtKHRoaXMudGFza0lkKVxuICAgICAgICAgICAgLnN1YnNjcmliZSgocmVzKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5mb3JtU2VydmljZS5nZXRGb3JtRGVmaW5pdGlvbkJ5TmFtZShyZXMubmFtZSkuc3Vic2NyaWJlKChmb3JtRGVmKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZm9ybUlkID0gdGhpcy5zZWxlY3RlZEZvcm1JZCA9IGZvcm1EZWY7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9LCAoZXJyKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5lcnJvci5lbWl0KGVycik7XG4gICAgICAgICAgICAgICAgdGhpcy5sb2dTZXJ2aWNlLmVycm9yKCdDb3VsZCBub3QgbG9hZCBmb3JtcycpO1xuICAgICAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBhdHRhY2hGb3JtKHRhc2tJZDogc3RyaW5nLCBmb3JtSWQ6IG51bWJlcikge1xuICAgICAgICBpZiAodGFza0lkICYmIGZvcm1JZCkge1xuICAgICAgICAgICAgdGhpcy50YXNrU2VydmljZS5hdHRhY2hGb3JtVG9BVGFzayh0YXNrSWQsIGZvcm1JZClcbiAgICAgICAgICAgICAgICAuc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdWNjZXNzLmVtaXQoKTtcbiAgICAgICAgICAgICAgICB9LCAoZXJyKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZXJyb3IuZW1pdChlcnIpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmxvZ1NlcnZpY2UuZXJyb3IoJ0NvdWxkIG5vdCBhdHRhY2ggZm9ybScpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxufVxuIl19