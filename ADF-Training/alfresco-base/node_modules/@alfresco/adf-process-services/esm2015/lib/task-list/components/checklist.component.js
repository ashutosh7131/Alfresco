/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, EventEmitter, Input, Output, ViewChild } from '@angular/core';
import { MatDialog } from '@angular/material/dialog';
import { TaskDetailsModel } from '../models/task-details.model';
import { TaskListService } from './../services/tasklist.service';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './../services/tasklist.service';
import * as ɵngcc2 from '@angular/material/dialog';
import * as ɵngcc3 from '@angular/material/chips';
import * as ɵngcc4 from '@angular/common';
import * as ɵngcc5 from '@angular/material/button';
import * as ɵngcc6 from '@angular/material/tooltip';
import * as ɵngcc7 from '@angular/material/icon';
import * as ɵngcc8 from '@angular/material/form-field';
import * as ɵngcc9 from '@angular/material/input';
import * as ɵngcc10 from '@angular/forms';
import * as ɵngcc11 from '@ngx-translate/core';

const _c0 = ["dialog"];
function ChecklistComponent_button_7_Template(rf, ctx) { if (rf & 1) {
    const _r6 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 8);
    ɵngcc0.ɵɵlistener("click", function ChecklistComponent_button_7_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r6); const ctx_r5 = ɵngcc0.ɵɵnextContext(); return ctx_r5.showDialog(); });
    ɵngcc0.ɵɵelementStart(1, "mat-icon");
    ɵngcc0.ɵɵtext(2, "add");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵproperty("matTooltipPosition", "before");
} }
function ChecklistComponent_div_8_mat_chip_2_mat_icon_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-icon", 14);
    ɵngcc0.ɵɵtext(1, "cancel ");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const check_r8 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵpropertyInterpolate1("id", "remove-", check_r8.id, "");
} }
function ChecklistComponent_div_8_mat_chip_2_Template(rf, ctx) { if (rf & 1) {
    const _r12 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "mat-chip", 12);
    ɵngcc0.ɵɵlistener("removed", function ChecklistComponent_div_8_mat_chip_2_Template_mat_chip_removed_0_listener() { ɵngcc0.ɵɵrestoreView(_r12); const check_r8 = ctx.$implicit; const ctx_r11 = ɵngcc0.ɵɵnextContext(2); return ctx_r11.delete(check_r8.id); });
    ɵngcc0.ɵɵelementStart(1, "span");
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(3, ChecklistComponent_div_8_mat_chip_2_mat_icon_3_Template, 2, 1, "mat-icon", 13);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const check_r8 = ctx.$implicit;
    const ctx_r7 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵpropertyInterpolate1("id", "check-", check_r8.id, "");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(check_r8.name);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r7.readOnly && !check_r8.endDate);
} }
function ChecklistComponent_div_8_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 9);
    ɵngcc0.ɵɵelementStart(1, "mat-chip-list", 10);
    ɵngcc0.ɵɵtemplate(2, ChecklistComponent_div_8_mat_chip_2_Template, 4, 3, "mat-chip", 11);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r1.checklist);
} }
function ChecklistComponent_div_9_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 15);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 1, "ADF_TASK_LIST.DETAILS.CHECKLIST.NONE"), "\n");
} }
function ChecklistComponent_ng_template_10_Template(rf, ctx) { if (rf & 1) {
    const _r14 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 16);
    ɵngcc0.ɵɵelementStart(1, "h4", 17);
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(4, "mat-dialog-content");
    ɵngcc0.ɵɵelementStart(5, "mat-form-field");
    ɵngcc0.ɵɵelementStart(6, "input", 18);
    ɵngcc0.ɵɵlistener("ngModelChange", function ChecklistComponent_ng_template_10_Template_input_ngModelChange_6_listener($event) { ɵngcc0.ɵɵrestoreView(_r14); const ctx_r13 = ɵngcc0.ɵɵnextContext(); return ctx_r13.taskName = $event; });
    ɵngcc0.ɵɵpipe(7, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(8, "mat-dialog-actions", 19);
    ɵngcc0.ɵɵelementStart(9, "button", 20);
    ɵngcc0.ɵɵlistener("click", function ChecklistComponent_ng_template_10_Template_button_click_9_listener() { ɵngcc0.ɵɵrestoreView(_r14); const ctx_r15 = ɵngcc0.ɵɵnextContext(); return ctx_r15.cancel(); });
    ɵngcc0.ɵɵtext(10);
    ɵngcc0.ɵɵpipe(11, "uppercase");
    ɵngcc0.ɵɵpipe(12, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(13, "button", 21);
    ɵngcc0.ɵɵlistener("click", function ChecklistComponent_ng_template_10_Template_button_click_13_listener() { ɵngcc0.ɵɵrestoreView(_r14); const ctx_r16 = ɵngcc0.ɵɵnextContext(); return ctx_r16.add(); });
    ɵngcc0.ɵɵtext(14);
    ɵngcc0.ɵɵpipe(15, "uppercase");
    ɵngcc0.ɵɵpipe(16, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r4 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(3, 5, "ADF_TASK_LIST.DETAILS.CHECKLIST.DIALOG.TITLE"));
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵpropertyInterpolate("placeholder", ɵngcc0.ɵɵpipeBind1(7, 7, "ADF_TASK_LIST.DETAILS.CHECKLIST.DIALOG.PLACEHOLDER"));
    ɵngcc0.ɵɵproperty("ngModel", ctx_r4.taskName);
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(11, 9, ɵngcc0.ɵɵpipeBind1(12, 11, "ADF_TASK_LIST.DETAILS.CHECKLIST.DIALOG.CANCEL-BUTTON")));
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(15, 13, ɵngcc0.ɵɵpipeBind1(16, 15, "ADF_TASK_LIST.DETAILS.CHECKLIST.DIALOG.ADD-BUTTON")));
} }
export class ChecklistComponent {
    constructor(activitiTaskList, dialog) {
        this.activitiTaskList = activitiTaskList;
        this.dialog = dialog;
        this.readOnly = false;
        this.checklistTaskCreated = new EventEmitter();
        this.checklistTaskDeleted = new EventEmitter();
        this.error = new EventEmitter();
        this.checklist = [];
    }
    ngOnChanges(changes) {
        const taskId = changes['taskId'];
        if (taskId && taskId.currentValue) {
            this.getTaskChecklist();
            return;
        }
    }
    getTaskChecklist() {
        this.checklist = [];
        if (this.taskId) {
            this.activitiTaskList.getTaskChecklist(this.taskId).subscribe((taskDetailsModel) => {
                taskDetailsModel.forEach((task) => {
                    this.checklist.push(task);
                });
            }, (error) => {
                this.error.emit(error);
            });
        }
        else {
            this.checklist = [];
        }
    }
    showDialog() {
        this.dialog.open(this.addNewDialog, { width: '350px' });
    }
    add() {
        const newTask = new TaskDetailsModel({
            name: this.taskName,
            parentTaskId: this.taskId,
            assignee: { id: this.assignee }
        });
        this.activitiTaskList.addTask(newTask).subscribe((taskDetailsModel) => {
            this.checklist.push(taskDetailsModel);
            this.checklistTaskCreated.emit(taskDetailsModel);
            this.taskName = '';
        }, (error) => {
            this.error.emit(error);
        });
        this.cancel();
    }
    delete(taskId) {
        this.activitiTaskList.deleteTask(taskId).subscribe(() => {
            this.checklist = this.checklist.filter((check) => check.id !== taskId);
            this.checklistTaskDeleted.emit(taskId);
        }, (error) => {
            this.error.emit(error);
        });
    }
    cancel() {
        this.dialog.closeAll();
        this.taskName = '';
    }
}
ChecklistComponent.ɵfac = function ChecklistComponent_Factory(t) { return new (t || ChecklistComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.TaskListService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.MatDialog)); };
ChecklistComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ChecklistComponent, selectors: [["adf-checklist"]], viewQuery: function ChecklistComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵstaticViewQuery(_c0, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.addNewDialog = _t.first);
    } }, inputs: { readOnly: "readOnly", taskId: "taskId", assignee: "assignee" }, outputs: { checklistTaskCreated: "checklistTaskCreated", checklistTaskDeleted: "checklistTaskDeleted", error: "error" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 12, vars: 7, consts: [[1, "adf-checklist-control"], ["data-automation-id", "checklist-label"], [1, "adf-activiti-label"], ["color", "accent", "selected", "true", 1, "adf-process-badge"], ["mat-icon-button", "", "matTooltip", "Add a checklist", "id", "add-checklist", "class", "adf-add-to-checklist-button", 3, "matTooltipPosition", "click", 4, "ngIf"], ["class", "adf-checklist-menu-container", 4, "ngIf"], ["id", "checklist-none-message", "class", "adf-checklist-none-message", 4, "ngIf"], ["dialog", ""], ["mat-icon-button", "", "matTooltip", "Add a checklist", "id", "add-checklist", 1, "adf-add-to-checklist-button", 3, "matTooltipPosition", "click"], [1, "adf-checklist-menu-container"], [1, "mat-chip-list-stacked"], ["class", "adf-checklist-chip", 3, "id", "removed", 4, "ngFor", "ngForOf"], [1, "adf-checklist-chip", 3, "id", "removed"], ["matChipRemove", "", 3, "id", 4, "ngIf"], ["matChipRemove", "", 3, "id"], ["id", "checklist-none-message", 1, "adf-checklist-none-message"], ["id", "checklist-dialog", 1, "adf-checklist-dialog"], ["matDialogTitle", "", "id", "add-checklist-title"], ["matInput", "", "id", "checklist-name", "data-automation-id", "checklist-name", 3, "placeholder", "ngModel", "ngModelChange"], [1, "adf-checklist-dialog-actions"], ["mat-button", "", "type", "button", "id", "close-check-dialog", 3, "click"], ["mat-button", "", "type", "button", "id", "add-check", 3, "click"]], template: function ChecklistComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "mat-chip-list", 1);
        ɵngcc0.ɵɵelementStart(2, "span", 2);
        ɵngcc0.ɵɵtext(3);
        ɵngcc0.ɵɵpipe(4, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(5, "mat-chip", 3);
        ɵngcc0.ɵɵtext(6);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(7, ChecklistComponent_button_7_Template, 3, 1, "button", 4);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(8, ChecklistComponent_div_8_Template, 3, 1, "div", 5);
        ɵngcc0.ɵɵtemplate(9, ChecklistComponent_div_9_Template, 3, 3, "div", 6);
        ɵngcc0.ɵɵtemplate(10, ChecklistComponent_ng_template_10_Template, 17, 17, "ng-template", null, 7, ɵngcc0.ɵɵtemplateRefExtractor);
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(4, 5, "ADF_TASK_LIST.DETAILS.LABELS.CHECKLIST"));
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵtextInterpolate(ctx.checklist == null ? null : ctx.checklist.length);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.readOnly);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", (ctx.checklist == null ? null : ctx.checklist.length) > 0);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", (ctx.checklist == null ? null : ctx.checklist.length) === 0);
    } }, directives: [ɵngcc3.MatChipList, ɵngcc3.MatChip, ɵngcc4.NgIf, ɵngcc5.MatButton, ɵngcc6.MatTooltip, ɵngcc7.MatIcon, ɵngcc4.NgForOf, ɵngcc3.MatChipRemove, ɵngcc2.MatDialogTitle, ɵngcc2.MatDialogContent, ɵngcc8.MatFormField, ɵngcc9.MatInput, ɵngcc10.DefaultValueAccessor, ɵngcc10.NgControlStatus, ɵngcc10.NgModel, ɵngcc2.MatDialogActions], pipes: [ɵngcc11.TranslatePipe, ɵngcc4.UpperCasePipe], styles: ["[_nghost-%COMP%]{width:100%}.adf-activiti-label[_ngcontent-%COMP%]{font-weight:bolder}.mat-form-field[_ngcontent-%COMP%]{width:100%}.adf-checklist-cancel-button[_ngcontent-%COMP%]{float:right;margin-right:-13px;margin-top:-13px}.adf-checklist-chip[_ngcontent-%COMP%]{outline:none}.adf-checklist-menu-container[_ngcontent-%COMP%], .adf-checklist-none-message[_ngcontent-%COMP%]{margin-top:10px}.adf-checklist-control[_ngcontent-%COMP%]{display:flex;justify-content:space-between}.adf-checklist-control[_ngcontent-%COMP%]   .adfactiviti-label[_ngcontent-%COMP%]{margin-right:10px;margin-top:6px}.adf-checklist-control[_ngcontent-%COMP%]   .adf-add-to-checklist-button[_ngcontent-%COMP%]{float:right}.adf-checklist-dialog-actions[_ngcontent-%COMP%]{display:flex;justify-content:flex-end}"] });
ChecklistComponent.ctorParameters = () => [
    { type: TaskListService },
    { type: MatDialog }
];
ChecklistComponent.propDecorators = {
    taskId: [{ type: Input }],
    readOnly: [{ type: Input }],
    assignee: [{ type: Input }],
    checklistTaskCreated: [{ type: Output }],
    checklistTaskDeleted: [{ type: Output }],
    error: [{ type: Output }],
    addNewDialog: [{ type: ViewChild, args: ['dialog', { static: true },] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ChecklistComponent, [{
        type: Component,
        args: [{
                selector: 'adf-checklist',
                template: "<div class=\"adf-checklist-control\">\n    <mat-chip-list data-automation-id=\"checklist-label\">\n        <span class=\"adf-activiti-label\">{{ 'ADF_TASK_LIST.DETAILS.LABELS.CHECKLIST' | translate }}</span>\n        <mat-chip class=\"adf-process-badge\" color=\"accent\" selected=\"true\">{{checklist?.length}}</mat-chip>\n    </mat-chip-list>\n\n\n    <button mat-icon-button *ngIf=\"!readOnly\" matTooltip=\"Add a checklist\" [matTooltipPosition]=\"'before'\"\n            id=\"add-checklist\" class=\"adf-add-to-checklist-button\" (click)=\"showDialog()\">\n        <mat-icon>add</mat-icon>\n    </button>\n</div>\n\n<div class=\"adf-checklist-menu-container\" *ngIf=\"checklist?.length > 0\">\n    <mat-chip-list class=\"mat-chip-list-stacked\">\n        <mat-chip id=\"check-{{check.id}}\" class=\"adf-checklist-chip\" *ngFor=\"let check of checklist\"\n                  (removed)=\"delete(check.id)\">\n            <span>{{check.name}}</span>\n            <mat-icon *ngIf=\"!readOnly && !check.endDate\" id=\"remove-{{check.id}}\" matChipRemove>cancel\n            </mat-icon>\n        </mat-chip>\n    </mat-chip-list>\n\n</div>\n<div *ngIf=\"checklist?.length === 0\" id=\"checklist-none-message\" class=\"adf-checklist-none-message\">\n    {{ 'ADF_TASK_LIST.DETAILS.CHECKLIST.NONE' | translate }}\n</div>\n\n<ng-template #dialog>\n    <div class=\"adf-checklist-dialog\" id=\"checklist-dialog\">\n        <h4 matDialogTitle id=\"add-checklist-title\">{{ 'ADF_TASK_LIST.DETAILS.CHECKLIST.DIALOG.TITLE' | translate }}</h4>\n        <mat-dialog-content>\n            <mat-form-field>\n                <input matInput placeholder=\"{{ 'ADF_TASK_LIST.DETAILS.CHECKLIST.DIALOG.PLACEHOLDER' | translate }}\" [(ngModel)]=\"taskName\" id=\"checklist-name\"\n                       data-automation-id=\"checklist-name\">\n            </mat-form-field>\n        </mat-dialog-content>\n        <mat-dialog-actions class=\"adf-checklist-dialog-actions\">\n            <button mat-button type=\"button\" id=\"close-check-dialog\" (click)=\"cancel()\">{{ 'ADF_TASK_LIST.DETAILS.CHECKLIST.DIALOG.CANCEL-BUTTON' | translate | uppercase }}</button>\n            <button mat-button type=\"button\" id=\"add-check\" (click)=\"add()\">{{ 'ADF_TASK_LIST.DETAILS.CHECKLIST.DIALOG.ADD-BUTTON' | translate | uppercase  }}</button>\n        </mat-dialog-actions>\n    </div>\n</ng-template>\n",
                styles: [":host{width:100%}.adf-activiti-label{font-weight:bolder}.mat-form-field{width:100%}.adf-checklist-cancel-button{float:right;margin-right:-13px;margin-top:-13px}.adf-checklist-chip{outline:none}.adf-checklist-menu-container,.adf-checklist-none-message{margin-top:10px}.adf-checklist-control{display:flex;justify-content:space-between}.adf-checklist-control .adfactiviti-label{margin-right:10px;margin-top:6px}.adf-checklist-control .adf-add-to-checklist-button{float:right}.adf-checklist-dialog-actions{display:flex;justify-content:flex-end}"]
            }]
    }], function () { return [{ type: ɵngcc1.TaskListService }, { type: ɵngcc2.MatDialog }]; }, { readOnly: [{
            type: Input
        }], checklistTaskCreated: [{
            type: Output
        }], checklistTaskDeleted: [{
            type: Output
        }], error: [{
            type: Output
        }], taskId: [{
            type: Input
        }], assignee: [{
            type: Input
        }], addNewDialog: [{
            type: ViewChild,
            args: ['dialog', { static: true }]
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,