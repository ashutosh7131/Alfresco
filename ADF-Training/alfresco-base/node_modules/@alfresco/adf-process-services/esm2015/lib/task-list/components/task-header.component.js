/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, EventEmitter, Input, Output, ViewEncapsulation } from '@angular/core';
import { BpmUserService, CardViewDateItemModel, CardViewMapItemModel, CardViewTextItemModel, TranslationService, AppConfigService, CardViewIntItemModel, CardViewItemLengthValidator } from '@alfresco/adf-core';
import { TaskDetailsModel } from '../models/task-details.model';
import { TaskDescriptionValidator } from '../validators/task-description.validator';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@alfresco/adf-core';
import * as ɵngcc2 from '@angular/common';
import * as ɵngcc3 from '@angular/material/card';
import * as ɵngcc4 from '@angular/material/button';
import * as ɵngcc5 from './task-form/unclaim-task.directive';
import * as ɵngcc6 from './task-form/claim-task.directive';
import * as ɵngcc7 from '@ngx-translate/core';

function TaskHeaderComponent_mat_card_0_mat_card_actions_3_button_1_Template(rf, ctx) { if (rf & 1) {
    const _r5 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 7);
    ɵngcc0.ɵɵlistener("success", function TaskHeaderComponent_mat_card_0_mat_card_actions_3_button_1_Template_button_success_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r5); const ctx_r4 = ɵngcc0.ɵɵnextContext(3); return ctx_r4.onUnclaimTask($event); });
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵproperty("taskId", ctx_r2.taskDetails.id);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 2, "ADF_TASK_LIST.DETAILS.BUTTON.UNCLAIM"), " ");
} }
function TaskHeaderComponent_mat_card_0_mat_card_actions_3_button_2_Template(rf, ctx) { if (rf & 1) {
    const _r7 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 8);
    ɵngcc0.ɵɵlistener("success", function TaskHeaderComponent_mat_card_0_mat_card_actions_3_button_2_Template_button_success_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r7); const ctx_r6 = ɵngcc0.ɵɵnextContext(3); return ctx_r6.onClaimTask($event); });
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵproperty("taskId", ctx_r3.taskDetails.id);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 2, "ADF_TASK_LIST.DETAILS.BUTTON.CLAIM"), " ");
} }
function TaskHeaderComponent_mat_card_0_mat_card_actions_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-card-actions", 4);
    ɵngcc0.ɵɵtemplate(1, TaskHeaderComponent_mat_card_0_mat_card_actions_3_button_1_Template, 3, 4, "button", 5);
    ɵngcc0.ɵɵtemplate(2, TaskHeaderComponent_mat_card_0_mat_card_actions_3_button_2_Template, 3, 4, "button", 6);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r1.isTaskClaimedByCandidateMember());
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r1.isTaskClaimable());
} }
function TaskHeaderComponent_mat_card_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-card", 1);
    ɵngcc0.ɵɵelementStart(1, "mat-card-content");
    ɵngcc0.ɵɵelement(2, "adf-card-view", 2);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(3, TaskHeaderComponent_mat_card_0_mat_card_actions_3_Template, 3, 2, "mat-card-actions", 3);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("properties", ctx_r0.properties)("editable", !ctx_r0.isCompleted())("displayClearAction", ctx_r0.displayDateClearAction);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.showClaimRelease);
} }
export class TaskHeaderComponent {
    constructor(bpmUserService, translationService, appConfig) {
        this.bpmUserService = bpmUserService;
        this.translationService = translationService;
        this.appConfig = appConfig;
        this.formName = null;
        this.showClaimRelease = true;
        this.claim = new EventEmitter();
        this.unclaim = new EventEmitter();
        this.properties = [];
        this.inEdit = false;
        this.displayDateClearAction = false;
        this.dateFormat = this.appConfig.get('dateValues.defaultDateFormat');
        this.dateLocale = this.appConfig.get('dateValues.defaultDateLocale');
    }
    ngOnInit() {
        this.loadCurrentBpmUserId();
        this.initData();
    }
    ngOnChanges(changes) {
        var _a, _b;
        const taskDetailsChange = changes['taskDetails'];
        if (((_a = taskDetailsChange === null || taskDetailsChange === void 0 ? void 0 : taskDetailsChange.currentValue) === null || _a === void 0 ? void 0 : _a.id) !== ((_b = taskDetailsChange === null || taskDetailsChange === void 0 ? void 0 : taskDetailsChange.previousValue) === null || _b === void 0 ? void 0 : _b.id)) {
            this.initData();
        }
        else {
            this.refreshData();
        }
    }
    initDefaultProperties(parentInfoMap) {
        return [
            new CardViewTextItemModel({
                label: 'ADF_TASK_LIST.PROPERTIES.ASSIGNEE',
                value: this.taskDetails.getFullName(),
                key: 'assignee',
                default: this.translationService.instant('ADF_TASK_LIST.PROPERTIES.ASSIGNEE_DEFAULT'),
                clickable: !this.isCompleted(),
                icon: 'create'
            }),
            new CardViewTextItemModel({
                label: 'ADF_TASK_LIST.PROPERTIES.STATUS',
                value: this.getTaskStatus(),
                key: 'status'
            }),
            new CardViewIntItemModel({
                label: 'ADF_TASK_LIST.PROPERTIES.PRIORITY',
                value: this.taskDetails.priority,
                key: 'priority',
                editable: true,
                validators: [new CardViewItemLengthValidator(1, 10)]
            }),
            new CardViewDateItemModel({
                label: 'ADF_TASK_LIST.PROPERTIES.DUE_DATE',
                value: this.taskDetails.dueDate,
                key: 'dueDate',
                default: this.translationService.instant('ADF_TASK_LIST.PROPERTIES.DUE_DATE_DEFAULT'),
                editable: true,
                format: this.dateFormat,
                locale: this.dateLocale
            }),
            new CardViewTextItemModel({
                label: 'ADF_TASK_LIST.PROPERTIES.CATEGORY',
                value: this.taskDetails.category,
                key: 'category',
                default: this.translationService.instant('ADF_TASK_LIST.PROPERTIES.CATEGORY_DEFAULT')
            }),
            new CardViewMapItemModel({
                label: 'ADF_TASK_LIST.PROPERTIES.PARENT_NAME',
                value: parentInfoMap,
                key: 'parentName',
                default: this.translationService.instant('ADF_TASK_LIST.PROPERTIES.PARENT_NAME_DEFAULT'),
                clickable: true
            }),
            new CardViewDateItemModel({
                label: 'ADF_TASK_LIST.PROPERTIES.CREATED',
                value: this.taskDetails.created,
                key: 'created',
                format: this.dateFormat,
                locale: this.dateLocale
            }),
            new CardViewTextItemModel({
                label: 'ADF_TASK_LIST.PROPERTIES.DURATION',
                value: this.getTaskDuration(),
                key: 'duration'
            }),
            new CardViewTextItemModel({
                label: 'ADF_TASK_LIST.PROPERTIES.PARENT_TASK_ID',
                value: this.taskDetails.parentTaskId,
                key: 'parentTaskId'
            }),
            new CardViewDateItemModel({
                label: 'ADF_TASK_LIST.PROPERTIES.END_DATE',
                value: this.taskDetails.endDate,
                key: 'endDate',
                format: this.dateFormat,
                locale: this.dateLocale
            }),
            new CardViewTextItemModel({
                label: 'ADF_TASK_LIST.PROPERTIES.ID',
                value: this.taskDetails.id,
                key: 'id'
            }),
            new CardViewTextItemModel({
                label: 'ADF_TASK_LIST.PROPERTIES.DESCRIPTION',
                value: this.taskDetails.description,
                key: 'description',
                default: this.translationService.instant('ADF_TASK_LIST.PROPERTIES.DESCRIPTION_DEFAULT'),
                multiline: true,
                editable: true,
                validators: [new TaskDescriptionValidator()]
            }),
            new CardViewTextItemModel({
                label: 'ADF_TASK_LIST.PROPERTIES.FORM_NAME',
                value: this.formName,
                key: 'formName',
                default: this.translationService.instant('ADF_TASK_LIST.PROPERTIES.FORM_NAME_DEFAULT'),
                clickable: this.isFormClickable(),
                icon: 'create'
            })
        ];
    }
    initData() {
        if (this.taskDetails) {
            const parentInfoMap = this.getParentInfo();
            const defaultProperties = this.initDefaultProperties(parentInfoMap);
            const filteredProperties = this.appConfig.get('adf-task-header.presets.properties');
            this.properties = defaultProperties.filter((cardItem) => this.isValidSelection(filteredProperties, cardItem));
        }
    }
    refreshData() {
        this.properties = this.properties.map((cardItem) => {
            if (cardItem.key === 'formName' && cardItem.value !== this.formName) {
                return new CardViewTextItemModel({
                    label: 'ADF_TASK_LIST.PROPERTIES.FORM_NAME',
                    value: this.formName,
                    key: 'formName',
                    default: this.translationService.instant('ADF_TASK_LIST.PROPERTIES.FORM_NAME_DEFAULT'),
                    clickable: this.isFormClickable(),
                    icon: 'create'
                });
            }
            else {
                return cardItem;
            }
        });
    }
    isValidSelection(filteredProperties, cardItem) {
        return filteredProperties ? filteredProperties.indexOf(cardItem.key) >= 0 : true;
    }
    loadCurrentBpmUserId() {
        this.bpmUserService.getCurrentUserInfo().subscribe((res) => {
            this.currentUserId = res ? +res.id : null;
        });
    }
    getParentInfo() {
        if (this.taskDetails.processInstanceId && this.taskDetails.processDefinitionName) {
            return new Map([[this.taskDetails.processInstanceId, this.taskDetails.processDefinitionName]]);
        }
        return new Map();
    }
    hasAssignee() {
        return !!this.taskDetails.assignee;
    }
    isAssignedTo(userId) {
        return this.hasAssignee() ? this.taskDetails.assignee.id === userId : false;
    }
    isAssignedToCurrentUser() {
        return this.hasAssignee() && this.isAssignedTo(this.currentUserId);
    }
    isCandidateMember() {
        return this.taskDetails.managerOfCandidateGroup || this.taskDetails.memberOfCandidateGroup || this.taskDetails.memberOfCandidateUsers;
    }
    isTaskClaimable() {
        return !this.hasAssignee() && this.isCandidateMember();
    }
    isTaskClaimedByCandidateMember() {
        return this.isCandidateMember() && this.isAssignedToCurrentUser() && !this.isCompleted();
    }
    getTaskStatus() {
        return (this.taskDetails && this.taskDetails.isCompleted()) ? 'Completed' : 'Running';
    }
    onClaimTask(taskId) {
        this.claim.emit(taskId);
    }
    onUnclaimTask(taskId) {
        this.unclaim.emit(taskId);
    }
    isCompleted() {
        return this.taskDetails && !!this.taskDetails.endDate;
    }
    isFormClickable() {
        return !!this.formName && !this.isCompleted();
    }
    getTaskDuration() {
        return this.taskDetails.duration ? `${this.taskDetails.duration} ms` : '';
    }
}
TaskHeaderComponent.ɵfac = function TaskHeaderComponent_Factory(t) { return new (t || TaskHeaderComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.BpmUserService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.TranslationService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.AppConfigService)); };
TaskHeaderComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: TaskHeaderComponent, selectors: [["adf-task-header"]], inputs: { formName: "formName", showClaimRelease: "showClaimRelease", taskDetails: "taskDetails" }, outputs: { claim: "claim", unclaim: "unclaim" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 1, vars: 1, consts: [["class", "adf-card-container", 4, "ngIf"], [1, "adf-card-container"], [3, "properties", "editable", "displayClearAction"], ["class", "adf-controls", 4, "ngIf"], [1, "adf-controls"], ["mat-button", "", "data-automation-id", "header-unclaim-button", "id", "unclaim-task", "class", "adf-claim-controls", "adf-unclaim-task", "", 3, "taskId", "success", 4, "ngIf"], ["mat-button", "", "data-automation-id", "header-claim-button", "id", "claim-task", "class", "adf-claim-controls", "adf-claim-task", "", 3, "taskId", "success", 4, "ngIf"], ["mat-button", "", "data-automation-id", "header-unclaim-button", "id", "unclaim-task", "adf-unclaim-task", "", 1, "adf-claim-controls", 3, "taskId", "success"], ["mat-button", "", "data-automation-id", "header-claim-button", "id", "claim-task", "adf-claim-task", "", 1, "adf-claim-controls", 3, "taskId", "success"]], template: function TaskHeaderComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, TaskHeaderComponent_mat_card_0_Template, 4, 4, "mat-card", 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngIf", ctx.taskDetails);
    } }, directives: [ɵngcc2.NgIf, ɵngcc3.MatCard, ɵngcc3.MatCardContent, ɵngcc1.CardViewComponent, ɵngcc3.MatCardActions, ɵngcc4.MatButton, ɵngcc5.UnclaimTaskDirective, ɵngcc6.ClaimTaskDirective], pipes: [ɵngcc7.TranslatePipe], styles: [".adf-controls{display:flex;justify-content:space-between}.adf-edit-controls{display:flex;justify-content:flex-end;margin-left:auto}.adf-save-edit-mode,.adf-switch-to-edit-mode{color:var(--theme-primary-color)}.adf-cancel-edit-mode,.adf-claim-controls{color:#838383}.adf-card-container{font-family:inherit}@media screen and (max-width:959px){adf-card-view .adf-property-value{overflow:hidden;text-overflow:ellipsis;white-space:nowrap}}"], encapsulation: 2 });
TaskHeaderComponent.ctorParameters = () => [
    { type: BpmUserService },
    { type: TranslationService },
    { type: AppConfigService }
];
TaskHeaderComponent.propDecorators = {
    formName: [{ type: Input }],
    taskDetails: [{ type: Input }],
    showClaimRelease: [{ type: Input }],
    claim: [{ type: Output }],
    unclaim: [{ type: Output }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TaskHeaderComponent, [{
        type: Component,
        args: [{
                selector: 'adf-task-header',
                template: "<mat-card *ngIf=\"taskDetails\" class=\"adf-card-container\">\n    <mat-card-content>\n        <adf-card-view [properties]=\"properties\" [editable]=\"!isCompleted()\" [displayClearAction]=\"displayDateClearAction\"></adf-card-view>\n    </mat-card-content>\n\n    <mat-card-actions class=\"adf-controls\" *ngIf=\"showClaimRelease\">\n        <button *ngIf=\"isTaskClaimedByCandidateMember()\" \n            mat-button \n            data-automation-id=\"header-unclaim-button\" \n            id=\"unclaim-task\" \n            class=\"adf-claim-controls\"\n            adf-unclaim-task\n            [taskId]=\"taskDetails.id\"\n            (success)=\"onUnclaimTask($event)\">\n            {{ 'ADF_TASK_LIST.DETAILS.BUTTON.UNCLAIM' | translate }}\n        </button>\n        <button *ngIf=\"isTaskClaimable()\" \n            mat-button \n            data-automation-id=\"header-claim-button\" \n            id=\"claim-task\" \n            class=\"adf-claim-controls\"\n            adf-claim-task\n            [taskId]=\"taskDetails.id\"\n            (success)=\"onClaimTask($event)\">\n            {{ 'ADF_TASK_LIST.DETAILS.BUTTON.CLAIM' | translate }}\n        </button>\n    </mat-card-actions>\n</mat-card>\n",
                encapsulation: ViewEncapsulation.None,
                styles: [".adf-controls{display:flex;justify-content:space-between}.adf-edit-controls{display:flex;justify-content:flex-end;margin-left:auto}.adf-save-edit-mode,.adf-switch-to-edit-mode{color:var(--theme-primary-color)}.adf-cancel-edit-mode,.adf-claim-controls{color:#838383}.adf-card-container{font-family:inherit}@media screen and (max-width:959px){adf-card-view .adf-property-value{overflow:hidden;text-overflow:ellipsis;white-space:nowrap}}"]
            }]
    }], function () { return [{ type: ɵngcc1.BpmUserService }, { type: ɵngcc1.TranslationService }, { type: ɵngcc1.AppConfigService }]; }, { formName: [{
            type: Input
        }], showClaimRelease: [{
            type: Input
        }], claim: [{
            type: Output
        }], unclaim: [{
            type: Output
        }], taskDetails: [{
            type: Input
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,