import { AlfrescoApiService, AppConfigService, DiscoveryApiService, UploadService } from '@alfresco/adf-core';
import { Injectable } from '@angular/core';
import { throwError } from 'rxjs';
import { ActivitiContentApi } from '@alfresco/js-api';
import * as i0 from "@angular/core";
import * as i1 from "@alfresco/adf-core";
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@alfresco/adf-core';
export class TaskUploadService extends UploadService {
    constructor(apiService, appConfigService, discoveryApiService) {
        super(apiService, appConfigService, discoveryApiService);
        this.apiService = apiService;
    }
    get contentApi() {
        var _a;
        this._contentApi = (_a = this._contentApi) !== null && _a !== void 0 ? _a : new ActivitiContentApi(this.apiService.getInstance());
        return this._contentApi;
    }
    getUploadPromise(file) {
        const opts = {
            isRelatedContent: true
        };
        const taskId = file.options.parentId;
        const promise = this.contentApi.createRelatedContentOnTask(taskId, file.file, opts);
        promise.catch((err) => this.handleError(err));
        return promise;
    }
    handleError(error) {
        return throwError(error || 'Server error');
    }
}
TaskUploadService.ɵfac = function TaskUploadService_Factory(t) { return new (t || TaskUploadService)(ɵngcc0.ɵɵinject(ɵngcc1.AlfrescoApiService), ɵngcc0.ɵɵinject(ɵngcc1.AppConfigService), ɵngcc0.ɵɵinject(ɵngcc1.DiscoveryApiService)); };
TaskUploadService.ɵprov = i0.ɵɵdefineInjectable({ factory: function TaskUploadService_Factory() { return new TaskUploadService(i0.ɵɵinject(i1.AlfrescoApiService), i0.ɵɵinject(i1.AppConfigService), i0.ɵɵinject(i1.DiscoveryApiService)); }, token: TaskUploadService, providedIn: "root" });
TaskUploadService.ctorParameters = () => [
    { type: AlfrescoApiService },
    { type: AppConfigService },
    { type: DiscoveryApiService }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TaskUploadService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc1.AlfrescoApiService }, { type: ɵngcc1.AppConfigService }, { type: ɵngcc1.DiscoveryApiService }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFzay11cGxvYWQuc2VydmljZS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vaG9tZS90cmF2aXMvYnVpbGQvQWxmcmVzY28vYWxmcmVzY28tbmcyLWNvbXBvbmVudHMvbGliL3Byb2Nlc3Mtc2VydmljZXMvc3JjL2xpYi90YXNrLWxpc3Qvc2VydmljZXMvdGFzay11cGxvYWQuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFpQkEsT0FBTyxFQUFFLGtCQUFrQixFQUFFLGdCQUFnQixFQUFFLG1CQUFtQixFQUFFLGFBQWEsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQzlHLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUNsQyxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUN0RDtBQUVzQjs7O0FBRXRCLE1BQU0sT0FBTyxpQkFBa0IsU0FBUSxhQUFhO0FBQ3BELElBT0ksWUFBc0IsVUFBOEIsRUFBRSxnQkFBa0MsRUFBRSxtQkFBd0M7QUFDdEksUUFBUSxLQUFLLENBQUMsVUFBVSxFQUFFLGdCQUFnQixFQUFFLG1CQUFtQixDQUFDLENBQUM7QUFDakUsUUFGMEIsZUFBVSxHQUFWLFVBQVUsQ0FBb0I7QUFBQyxJQUVyRCxDQUFDO0FBQ0wsSUFSSSxJQUFJLFVBQVU7QUFBSztBQUFnQixRQUMvQixJQUFJLENBQUMsV0FBVyxTQUFHLElBQUksQ0FBQyxXQUFXLG1DQUFJLElBQUksa0JBQWtCLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDO0FBQ3JHLFFBQVEsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDO0FBQ2hDLElBQUksQ0FBQztBQUNMLElBS0ksZ0JBQWdCLENBQUMsSUFBUztBQUFJLFFBQzFCLE1BQU0sSUFBSSxHQUFHO0FBQ3JCLFlBQVksZ0JBQWdCLEVBQUUsSUFBSTtBQUNsQyxTQUFTLENBQUM7QUFDVixRQUFRLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDO0FBQzdDLFFBQVEsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQywwQkFBMEIsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztBQUM1RixRQUNRLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztBQUN0RCxRQUNRLE9BQU8sT0FBTyxDQUFDO0FBQ3ZCLElBQUksQ0FBQztBQUNMLElBQ1ksV0FBVyxDQUFDLEtBQVU7QUFDbEMsUUFBUSxPQUFPLFVBQVUsQ0FBQyxLQUFLLElBQUksY0FBYyxDQUFDLENBQUM7QUFDbkQsSUFBSSxDQUFDO0FBQ0w7Mk9BQ0E7QUFBQyw4UkE1Qkk7QUFBQztFQUhMLFVBQVUsU0FBQyxyQkFHcUMsWUFSeEMsa0JBQWtCO0tBTXZCLFVBQVUsRUFBRSxNQUFNLHZCQU5TLFlBQUYsZ0JBQWdCO0tBTzVDLExBUGdELFlBQUYsbUJBQW1CO0FBQUc7Ozs7Ozs0SkFBRTtBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgQWxmcmVzY29BcGlTZXJ2aWNlLCBBcHBDb25maWdTZXJ2aWNlLCBEaXNjb3ZlcnlBcGlTZXJ2aWNlLCBVcGxvYWRTZXJ2aWNlIH0gZnJvbSAnQGFsZnJlc2NvL2FkZi1jb3JlJztcbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IHRocm93RXJyb3IgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IEFjdGl2aXRpQ29udGVudEFwaSB9IGZyb20gJ0BhbGZyZXNjby9qcy1hcGknO1xuXG5ASW5qZWN0YWJsZSh7XG4gICAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIFRhc2tVcGxvYWRTZXJ2aWNlIGV4dGVuZHMgVXBsb2FkU2VydmljZSB7XG5cbiAgICBwcml2YXRlIF9jb250ZW50QXBpO1xuICAgIGdldCBjb250ZW50QXBpKCk6IEFjdGl2aXRpQ29udGVudEFwaSB7XG4gICAgICAgIHRoaXMuX2NvbnRlbnRBcGkgPSB0aGlzLl9jb250ZW50QXBpID8/IG5ldyBBY3Rpdml0aUNvbnRlbnRBcGkodGhpcy5hcGlTZXJ2aWNlLmdldEluc3RhbmNlKCkpO1xuICAgICAgICByZXR1cm4gdGhpcy5fY29udGVudEFwaTtcbiAgICB9XG5cbiAgICBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgYXBpU2VydmljZTogQWxmcmVzY29BcGlTZXJ2aWNlLCBhcHBDb25maWdTZXJ2aWNlOiBBcHBDb25maWdTZXJ2aWNlLCBkaXNjb3ZlcnlBcGlTZXJ2aWNlOiBEaXNjb3ZlcnlBcGlTZXJ2aWNlKSB7XG4gICAgICAgIHN1cGVyKGFwaVNlcnZpY2UsIGFwcENvbmZpZ1NlcnZpY2UsIGRpc2NvdmVyeUFwaVNlcnZpY2UpO1xuICAgIH1cblxuICAgIGdldFVwbG9hZFByb21pc2UoZmlsZTogYW55KTogYW55IHtcbiAgICAgICAgY29uc3Qgb3B0cyA9IHtcbiAgICAgICAgICAgIGlzUmVsYXRlZENvbnRlbnQ6IHRydWVcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgdGFza0lkID0gZmlsZS5vcHRpb25zLnBhcmVudElkO1xuICAgICAgICBjb25zdCBwcm9taXNlID0gdGhpcy5jb250ZW50QXBpLmNyZWF0ZVJlbGF0ZWRDb250ZW50T25UYXNrKHRhc2tJZCwgZmlsZS5maWxlLCBvcHRzKTtcblxuICAgICAgICBwcm9taXNlLmNhdGNoKChlcnIpID0+IHRoaXMuaGFuZGxlRXJyb3IoZXJyKSk7XG5cbiAgICAgICAgcmV0dXJuIHByb21pc2U7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBoYW5kbGVFcnJvcihlcnJvcjogYW55KSB7XG4gICAgICAgIHJldHVybiB0aHJvd0Vycm9yKGVycm9yIHx8ICdTZXJ2ZXIgZXJyb3InKTtcbiAgICB9XG5cbn1cbiJdfQ==