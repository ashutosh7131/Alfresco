/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { AppsProcessService } from '@alfresco/adf-core';
import { Component, EventEmitter, Input, Output, ViewEncapsulation } from '@angular/core';
import { FilterParamsModel } from '../models/filter.model';
import { TaskFilterService } from './../services/task-filter.service';
import { TaskListService } from './../services/tasklist.service';
import { IconModel } from '../../app-list/icon.model';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './../services/task-filter.service';
import * as ɵngcc2 from './../services/tasklist.service';
import * as ɵngcc3 from '@alfresco/adf-core';
import * as ɵngcc4 from '@angular/common';
import * as ɵngcc5 from '@angular/material/button';
import * as ɵngcc6 from '@angular/flex-layout/flex';
import * as ɵngcc7 from '@ngx-translate/core';

function TaskFiltersComponent_div_0_ng_container_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelement(1, "adf-icon", 5);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const filter_r1 = ɵngcc0.ɵɵnextContext().$implicit;
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("value", ctx_r2.getFilterIcon(filter_r1.icon));
} }
function TaskFiltersComponent_div_0_Template(rf, ctx) { if (rf & 1) {
    const _r5 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 1);
    ɵngcc0.ɵɵelementStart(1, "button", 2);
    ɵngcc0.ɵɵlistener("click", function TaskFiltersComponent_div_0_Template_button_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r5); const filter_r1 = ctx.$implicit; const ctx_r4 = ɵngcc0.ɵɵnextContext(); return ctx_r4.onFilterClick(filter_r1); });
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵtemplate(3, TaskFiltersComponent_div_0_ng_container_3_Template, 2, 1, "ng-container", 3);
    ɵngcc0.ɵɵelementStart(4, "span", 4);
    ɵngcc0.ɵɵtext(5);
    ɵngcc0.ɵɵpipe(6, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const filter_r1 = ctx.$implicit;
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵclassProp("adf-active", ctx_r0.currentFilter === filter_r1);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("id", filter_r1.id);
    ɵngcc0.ɵɵattribute("aria-label", ɵngcc0.ɵɵpipeBind1(2, 7, filter_r1.name))("data-automation-id", filter_r1.name + "_filter");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.showIcon);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(6, 9, filter_r1.name));
} }
export class TaskFiltersComponent {
    constructor(taskFilterService, taskListService, appsProcessService) {
        this.taskFilterService = taskFilterService;
        this.taskListService = taskListService;
        this.appsProcessService = appsProcessService;
        this.filterClicked = new EventEmitter();
        this.filterSelected = new EventEmitter();
        this.success = new EventEmitter();
        this.error = new EventEmitter();
        this.filters = [];
    }
    ngOnInit() {
        this.iconsMDL = new IconModel();
    }
    ngOnChanges(changes) {
        const appName = changes['appName'];
        const appId = changes['appId'];
        const filter = changes['filterParam'];
        if (appName && appName.currentValue) {
            this.getFiltersByAppName(appName.currentValue);
        }
        else if (appId && appId.currentValue !== appId.previousValue) {
            this.getFiltersByAppId(appId.currentValue);
        }
        else if (filter && filter.currentValue !== filter.previousValue) {
            this.selectFilterAndEmit(filter.currentValue);
        }
    }
    getFilters(appId, appName) {
        appName ? this.getFiltersByAppName(appName) : this.getFiltersByAppId(appId);
    }
    getFiltersByAppId(appId) {
        this.taskFilterService.getTaskListFilters(appId).subscribe((res) => {
            if (res.length === 0 && this.isFilterListEmpty()) {
                this.createFiltersByAppId(appId);
            }
            else {
                this.resetFilter();
                this.filters = res;
                this.selectFilter(this.filterParam);
                this.success.emit(res);
            }
        }, (err) => {
            this.error.emit(err);
        });
    }
    getFiltersByAppName(appName) {
        this.appsProcessService.getDeployedApplicationsByName(appName).subscribe((application) => {
            this.getFiltersByAppId(application.id);
        }, (err) => {
            this.error.emit(err);
        });
    }
    createFiltersByAppId(appId) {
        this.taskFilterService.createDefaultFilters(appId).subscribe((resDefault) => {
            this.resetFilter();
            this.filters = resDefault;
            this.selectFilter(this.filterParam);
            this.success.emit(resDefault);
        }, (errDefault) => {
            this.error.emit(errDefault);
        });
    }
    selectFilter(newFilter) {
        if (newFilter) {
            this.currentFilter = this.filters.find((filter, index) => newFilter.index === index ||
                newFilter.id === filter.id ||
                (newFilter.name &&
                    (newFilter.name.toLocaleLowerCase() === filter.name.toLocaleLowerCase())));
        }
    }
    selectFilterAndEmit(newFilter) {
        this.selectFilter(newFilter);
        this.filterSelected.emit(this.currentFilter);
    }
    onFilterClick(filter) {
        this.selectFilter(filter);
        this.filterClicked.emit(this.currentFilter);
    }
    selectFilterWithTask(taskId) {
        const filteredFilterList = [];
        this.taskListService.getFilterForTaskById(taskId, this.filters).subscribe((filter) => {
            filteredFilterList.push(filter);
        }, (err) => {
            this.error.emit(err);
        }, () => {
            if (filteredFilterList.length > 0) {
                this.selectFilter(filteredFilterList[0]);
                this.filterSelected.emit(this.currentFilter);
            }
        });
    }
    selectDefaultTaskFilter() {
        if (!this.isFilterListEmpty()) {
            this.currentFilter = this.filters[0];
        }
    }
    getCurrentFilter() {
        return this.currentFilter;
    }
    isFilterListEmpty() {
        return this.filters === undefined || (this.filters && this.filters.length === 0);
    }
    resetFilter() {
        this.filters = [];
        this.currentFilter = undefined;
    }
    getFilterIcon(icon) {
        return this.iconsMDL.mapGlyphiconToMaterialDesignIcons(icon);
    }
}
TaskFiltersComponent.ɵfac = function TaskFiltersComponent_Factory(t) { return new (t || TaskFiltersComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.TaskFilterService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.TaskListService), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.AppsProcessService)); };
TaskFiltersComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: TaskFiltersComponent, selectors: [["adf-task-filters"]], inputs: { filterParam: "filterParam", appId: "appId", appName: "appName", showIcon: "showIcon" }, outputs: { filterClicked: "filterClicked", filterSelected: "filterSelected", success: "success", error: "error" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 1, vars: 1, consts: [["class", "adf-filters__entry", 3, "adf-active", 4, "ngFor", "ngForOf"], [1, "adf-filters__entry"], ["mat-button", "", "fxLayout", "row", "fxLayoutAlign", "space-between center", 1, "adf-filter-action-button", "adf-full-width", 3, "id", "click"], [4, "ngIf"], ["data-automation-id", "adf-filter-label", 1, "adf-filter-action-button__label"], ["data-automation-id", "adf-filter-icon", 3, "value"]], template: function TaskFiltersComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, TaskFiltersComponent_div_0_Template, 7, 11, "div", 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngForOf", ctx.filters);
    } }, directives: [ɵngcc4.NgForOf, ɵngcc5.MatButton, ɵngcc6.DefaultLayoutDirective, ɵngcc6.DefaultLayoutAlignDirective, ɵngcc4.NgIf, ɵngcc3.IconComponent], pipes: [ɵngcc7.TranslatePipe], styles: [".adf-filters__entry{cursor:pointer;font-size:14px!important;font-weight:700;height:24px;opacity:.54;padding:12px 0!important;width:100%}.adf-filters__entry .adf-full-width{display:flex;width:100%}.adf-filters__entry .adf-filter-action-button .adf-filter-action-button__label{margin:0 8px!important;padding-left:20px}.adf-filters__entry.adf-active,.adf-filters__entry:hover{color:var(--theme-primary-color);opacity:1}"], encapsulation: 2 });
TaskFiltersComponent.ctorParameters = () => [
    { type: TaskFilterService },
    { type: TaskListService },
    { type: AppsProcessService }
];
TaskFiltersComponent.propDecorators = {
    filterParam: [{ type: Input }],
    filterClicked: [{ type: Output }],
    filterSelected: [{ type: Output }],
    success: [{ type: Output }],
    error: [{ type: Output }],
    appId: [{ type: Input }],
    appName: [{ type: Input }],
    showIcon: [{ type: Input }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TaskFiltersComponent, [{
        type: Component,
        args: [{
                selector: 'adf-task-filters',
                template: "<div *ngFor=\"let filter of filters\" class=\"adf-filters__entry\" [class.adf-active]=\"currentFilter === filter\">\n    <button (click)=\"onFilterClick(filter)\"\n      [attr.aria-label]=\"filter.name | translate\"\n      [id]=\"filter.id\"\n      [attr.data-automation-id]=\"filter.name + '_filter'\"\n      mat-button\n      class=\"adf-filter-action-button adf-full-width\" fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\n      <ng-container *ngIf=\"showIcon\">\n        <adf-icon data-automation-id=\"adf-filter-icon\" [value]=\"getFilterIcon(filter.icon)\"></adf-icon>\n      </ng-container>\n      <span data-automation-id=\"adf-filter-label\" class=\"adf-filter-action-button__label\">{{ filter.name | translate }}</span>\n    </button>\n</div>\n",
                encapsulation: ViewEncapsulation.None,
                styles: [".adf-filters__entry{cursor:pointer;font-size:14px!important;font-weight:700;height:24px;opacity:.54;padding:12px 0!important;width:100%}.adf-filters__entry .adf-full-width{display:flex;width:100%}.adf-filters__entry .adf-filter-action-button .adf-filter-action-button__label{margin:0 8px!important;padding-left:20px}.adf-filters__entry.adf-active,.adf-filters__entry:hover{color:var(--theme-primary-color);opacity:1}"]
            }]
    }], function () { return [{ type: ɵngcc1.TaskFilterService }, { type: ɵngcc2.TaskListService }, { type: ɵngcc3.AppsProcessService }]; }, { filterClicked: [{
            type: Output
        }], filterSelected: [{
            type: Output
        }], success: [{
            type: Output
        }], error: [{
            type: Output
        }], filterParam: [{
            type: Input
        }], appId: [{
            type: Input
        }], appName: [{
            type: Input
        }], showIcon: [{
            type: Input
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,