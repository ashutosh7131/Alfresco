/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { AppsProcessService } from '@alfresco/adf-core';
import { Component, EventEmitter, Input, Output, ViewEncapsulation } from '@angular/core';
import { FilterProcessRepresentationModel } from '../models/filter-process.model';
import { ProcessFilterService } from './../services/process-filter.service';
import { IconModel } from '../../app-list/icon.model';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './../services/process-filter.service';
import * as ɵngcc2 from '@alfresco/adf-core';
import * as ɵngcc3 from '@angular/common';
import * as ɵngcc4 from '@angular/material/button';
import * as ɵngcc5 from '@angular/flex-layout/flex';
import * as ɵngcc6 from '@ngx-translate/core';

function ProcessFiltersComponent_div_0_adf_icon_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "adf-icon", 5);
} if (rf & 2) {
    const filter_r1 = ɵngcc0.ɵɵnextContext().$implicit;
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("value", ctx_r2.getFilterIcon(filter_r1.icon));
} }
function ProcessFiltersComponent_div_0_Template(rf, ctx) { if (rf & 1) {
    const _r5 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 1);
    ɵngcc0.ɵɵelementStart(1, "button", 2);
    ɵngcc0.ɵɵlistener("click", function ProcessFiltersComponent_div_0_Template_button_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r5); const filter_r1 = ctx.$implicit; const ctx_r4 = ɵngcc0.ɵɵnextContext(); return ctx_r4.selectFilter(filter_r1); });
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵtemplate(3, ProcessFiltersComponent_div_0_adf_icon_3_Template, 1, 1, "adf-icon", 3);
    ɵngcc0.ɵɵelementStart(4, "span", 4);
    ɵngcc0.ɵɵtext(5);
    ɵngcc0.ɵɵpipe(6, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const filter_r1 = ctx.$implicit;
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵclassProp("adf-active", ctx_r0.currentFilter === filter_r1);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("id", filter_r1.id);
    ɵngcc0.ɵɵattribute("aria-label", ɵngcc0.ɵɵpipeBind1(2, 7, filter_r1.name))("data-automation-id", filter_r1.name + "_filter");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.showIcon);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(6, 9, filter_r1.name));
} }
export class ProcessFiltersComponent {
    constructor(processFilterService, appsProcessService) {
        this.processFilterService = processFilterService;
        this.appsProcessService = appsProcessService;
        this.filterClicked = new EventEmitter();
        this.success = new EventEmitter();
        this.error = new EventEmitter();
        this.showIcon = true;
        this.filterSelected = new EventEmitter();
        this.filters = [];
        this.active = false;
    }
    ngOnInit() {
        this.iconsMDL = new IconModel();
    }
    ngOnChanges(changes) {
        const appId = changes['appId'];
        const appName = changes['appName'];
        const filter = changes['filterParam'];
        if (appId && (appId.currentValue || appId.currentValue === null)) {
            this.getFiltersByAppId(appId.currentValue);
        }
        else if (appName && appName.currentValue) {
            this.getFiltersByAppName(appName.currentValue);
        }
        else if (filter && filter.currentValue !== filter.previousValue) {
            this.selectProcessFilter(filter.currentValue);
        }
    }
    getFiltersByAppId(appId) {
        this.processFilterService.getProcessFilters(appId).subscribe((res) => {
            if (res.length === 0 && this.isFilterListEmpty()) {
                this.processFilterService.createDefaultFilters(appId).subscribe((resDefault) => {
                    this.resetFilter();
                    this.filters = resDefault;
                    this.selectProcessFilter(this.filterParam);
                    this.success.emit(resDefault);
                }, (errDefault) => {
                    this.error.emit(errDefault);
                });
            }
            else {
                this.resetFilter();
                this.filters = res;
                this.selectProcessFilter(this.filterParam);
                this.success.emit(res);
            }
        }, (err) => {
            this.error.emit(err);
        });
    }
    getFiltersByAppName(appName) {
        this.appsProcessService.getDeployedApplicationsByName(appName).subscribe((application) => {
            this.getFiltersByAppId(application.id);
            this.selectProcessFilter(this.filterParam);
        }, (err) => {
            this.error.emit(err);
        });
    }
    selectFilter(filter) {
        this.currentFilter = filter;
        this.active = true;
        this.filterClicked.emit(filter);
    }
    selectProcessFilter(filterParam) {
        if (filterParam) {
            const newFilter = this.filters.find((processFilter, index) => filterParam.index === index ||
                filterParam.id === processFilter.id ||
                (filterParam.name &&
                    (filterParam.name.toLocaleLowerCase() === processFilter.name.toLocaleLowerCase())));
            this.currentFilter = newFilter;
            if (newFilter) {
                this.filterSelected.emit(newFilter);
            }
        }
    }
    selectRunningFilter() {
        this.selectProcessFilter(this.processFilterService.getRunningFilterInstance(null));
    }
    selectDefaultTaskFilter() {
        if (!this.isFilterListEmpty()) {
            this.currentFilter = this.filters[0];
            this.filterSelected.emit(this.filters[0]);
        }
    }
    getCurrentFilter() {
        return this.currentFilter;
    }
    isFilterListEmpty() {
        return this.filters === undefined || (this.filters && this.filters.length === 0);
    }
    resetFilter() {
        this.filters = [];
        this.currentFilter = undefined;
    }
    getFilterIcon(icon) {
        return this.iconsMDL.mapGlyphiconToMaterialDesignIcons(icon);
    }
}
ProcessFiltersComponent.ɵfac = function ProcessFiltersComponent_Factory(t) { return new (t || ProcessFiltersComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ProcessFilterService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.AppsProcessService)); };
ProcessFiltersComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ProcessFiltersComponent, selectors: [["adf-process-instance-filters"]], inputs: { showIcon: "showIcon", filterParam: "filterParam", appId: "appId", appName: "appName" }, outputs: { filterClicked: "filterClicked", success: "success", error: "error", filterSelected: "filterSelected" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 1, vars: 1, consts: [["class", "adf-filters__entry", 3, "adf-active", 4, "ngFor", "ngForOf"], [1, "adf-filters__entry"], ["mat-button", "", "fxLayout", "row", "fxLayoutAlign", "space-between center", 1, "adf-filter-action-button", "adf-full-width", 3, "id", "click"], ["data-automation-id", "adf-filter-icon", 3, "value", 4, "ngIf"], ["data-automation-id", "adf-filter-label", 1, "adf-filter-action-button__label"], ["data-automation-id", "adf-filter-icon", 3, "value"]], template: function ProcessFiltersComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, ProcessFiltersComponent_div_0_Template, 7, 11, "div", 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngForOf", ctx.filters);
    } }, directives: [ɵngcc3.NgForOf, ɵngcc4.MatButton, ɵngcc5.DefaultLayoutDirective, ɵngcc5.DefaultLayoutAlignDirective, ɵngcc3.NgIf, ɵngcc2.IconComponent], pipes: [ɵngcc6.TranslatePipe], styles: [".adf-filters__entry{cursor:pointer;font-size:14px!important;font-weight:700;height:24px;opacity:.54;padding:12px 0!important;width:100%}.adf-filters__entry .adf-full-width{display:flex;width:100%}.adf-filters__entry .adf-filter-action-button .adf-filter-action-button__label{margin:0 8px!important;padding-left:20px}.adf-filters__entry.adf-active,.adf-filters__entry:hover{color:var(--theme-primary-color);opacity:1}"], encapsulation: 2 });
ProcessFiltersComponent.ctorParameters = () => [
    { type: ProcessFilterService },
    { type: AppsProcessService }
];
ProcessFiltersComponent.propDecorators = {
    filterParam: [{ type: Input }],
    filterClicked: [{ type: Output }],
    success: [{ type: Output }],
    error: [{ type: Output }],
    appId: [{ type: Input }],
    appName: [{ type: Input }],
    showIcon: [{ type: Input }],
    filterSelected: [{ type: Output }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ProcessFiltersComponent, [{
        type: Component,
        args: [{
                selector: 'adf-process-instance-filters',
                template: "<div *ngFor=\"let filter of filters\" class=\"adf-filters__entry\" [class.adf-active]=\"currentFilter === filter\">\n    <button (click)=\"selectFilter(filter)\"\n      [attr.aria-label]=\"filter.name | translate\"\n      [id]=\"filter.id\"\n      [attr.data-automation-id]=\"filter.name + '_filter'\"\n      mat-button\n      class=\"adf-filter-action-button adf-full-width\" fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\n      <adf-icon data-automation-id=\"adf-filter-icon\" *ngIf=\"showIcon\" [value]=\"getFilterIcon(filter.icon)\"></adf-icon>\n      <span data-automation-id=\"adf-filter-label\" class=\"adf-filter-action-button__label\">{{ filter.name | translate }}</span>\n    </button>\n</div>\n",
                encapsulation: ViewEncapsulation.None,
                styles: [".adf-filters__entry{cursor:pointer;font-size:14px!important;font-weight:700;height:24px;opacity:.54;padding:12px 0!important;width:100%}.adf-filters__entry .adf-full-width{display:flex;width:100%}.adf-filters__entry .adf-filter-action-button .adf-filter-action-button__label{margin:0 8px!important;padding-left:20px}.adf-filters__entry.adf-active,.adf-filters__entry:hover{color:var(--theme-primary-color);opacity:1}"]
            }]
    }], function () { return [{ type: ɵngcc1.ProcessFilterService }, { type: ɵngcc2.AppsProcessService }]; }, { filterClicked: [{
            type: Output
        }], success: [{
            type: Output
        }], error: [{
            type: Output
        }], showIcon: [{
            type: Input
        }], filterSelected: [{
            type: Output
        }], filterParam: [{
            type: Input
        }], appId: [{
            type: Input
        }], appName: [{
            type: Input
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,