/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { LogService } from '@alfresco/adf-core';
import { DatePipe } from '@angular/common';
import { Component, EventEmitter, Input, Output, ViewChild } from '@angular/core';
import { MatDialog } from '@angular/material/dialog';
import { Observable, Subject } from 'rxjs';
import { TaskDetailsEvent } from '../../task-list';
import { ProcessInstance } from '../models/process-instance.model';
import { ProcessService } from './../services/process.service';
import { share, takeUntil } from 'rxjs/operators';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './../services/process.service';
import * as ɵngcc2 from '@alfresco/adf-core';
import * as ɵngcc3 from '@angular/material/dialog';
import * as ɵngcc4 from '@angular/common';
import * as ɵngcc5 from '@angular/material/chips';
import * as ɵngcc6 from '@angular/material/button';
import * as ɵngcc7 from '@angular/material/icon';
import * as ɵngcc8 from '@angular/material/list';
import * as ɵngcc9 from '@angular/material/core';
import * as ɵngcc10 from '../../form/start-form.component';
import * as ɵngcc11 from '@ngx-translate/core';

const _c0 = ["startDialog"];
const _c1 = ["taskDetails"];
function ProcessInstanceTasksComponent_div_0_Template(rf, ctx) { if (rf & 1) {
    const _r8 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 8);
    ɵngcc0.ɵɵelementStart(1, "button", 9);
    ɵngcc0.ɵɵlistener("click", function ProcessInstanceTasksComponent_div_0_Template_button_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r8); const ctx_r7 = ɵngcc0.ɵɵnextContext(); return ctx_r7.onRefreshClicked(); });
    ɵngcc0.ɵɵelementStart(2, "mat-icon", 10);
    ɵngcc0.ɵɵtext(3, "refresh");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} }
const _c2 = function (a0, a1) { return { user: a0, created: a1 }; };
function ProcessInstanceTasksComponent_div_7_mat_list_item_2_Template(rf, ctx) { if (rf & 1) {
    const _r12 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "mat-list-item", 13);
    ɵngcc0.ɵɵlistener("click", function ProcessInstanceTasksComponent_div_7_mat_list_item_2_Template_mat_list_item_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r12); const task_r10 = ctx.$implicit; const ctx_r11 = ɵngcc0.ɵɵnextContext(2); return ctx_r11.clickTask(task_r10); });
    ɵngcc0.ɵɵelementStart(1, "mat-icon", 14);
    ɵngcc0.ɵɵtext(2, "assignment");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(3, "h3", 15);
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(5, "span", 15);
    ɵngcc0.ɵɵtext(6);
    ɵngcc0.ɵɵpipe(7, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const task_r10 = ctx.$implicit;
    const ctx_r9 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵtextInterpolate(task_r10.name || "Nameless task");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind2(7, 2, "ADF_PROCESS_LIST.DETAILS.LABELS.TASK_SUBTITLE", ɵngcc0.ɵɵpureFunction2(5, _c2, ctx_r9.getUserFullName(task_r10.assignee), ctx_r9.getFormatDate(task_r10.created, "mediumDate"))), " ");
} }
function ProcessInstanceTasksComponent_div_7_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 11);
    ɵngcc0.ɵɵelementStart(1, "mat-list");
    ɵngcc0.ɵɵtemplate(2, ProcessInstanceTasksComponent_div_7_mat_list_item_2_Template, 8, 8, "mat-list-item", 12);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r1.activeTasks);
} }
function ProcessInstanceTasksComponent_div_8_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 16);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 1, "ADF_PROCESS_LIST.DETAILS.TASKS.NO_ACTIVE"), "\n");
} }
function ProcessInstanceTasksComponent_div_9_Template(rf, ctx) { if (rf & 1) {
    const _r14 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div");
    ɵngcc0.ɵɵelementStart(1, "span", 17);
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(4, "div", 18);
    ɵngcc0.ɵɵelementStart(5, "mat-list");
    ɵngcc0.ɵɵelementStart(6, "mat-list-item", 13);
    ɵngcc0.ɵɵlistener("click", function ProcessInstanceTasksComponent_div_9_Template_mat_list_item_click_6_listener() { ɵngcc0.ɵɵrestoreView(_r14); const ctx_r13 = ɵngcc0.ɵɵnextContext(); return ctx_r13.clickStartTask(); });
    ɵngcc0.ɵɵelementStart(7, "mat-icon", 14);
    ɵngcc0.ɵɵtext(8, "assignment");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(9, "h3", 15);
    ɵngcc0.ɵɵtext(10);
    ɵngcc0.ɵɵpipe(11, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(12, "span", 15);
    ɵngcc0.ɵɵtext(13);
    ɵngcc0.ɵɵpipe(14, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(3, 3, "ADF_PROCESS_LIST.DETAILS.LABELS.START_FORM"));
    ɵngcc0.ɵɵadvance(8);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(11, 5, "ADF_PROCESS_LIST.DETAILS.LABELS.START_FORM"));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind2(14, 7, "ADF_PROCESS_LIST.DETAILS.LABELS.TASK_SUBTITLE", ɵngcc0.ɵɵpureFunction2(10, _c2, ctx_r3.getUserFullName(ctx_r3.processInstanceDetails.startedBy), ctx_r3.getFormatDate(ctx_r3.processInstanceDetails.started, "mediumDate"))), " ");
} }
function ProcessInstanceTasksComponent_div_16_mat_list_item_2_Template(rf, ctx) { if (rf & 1) {
    const _r18 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "mat-list-item", 13);
    ɵngcc0.ɵɵlistener("click", function ProcessInstanceTasksComponent_div_16_mat_list_item_2_Template_mat_list_item_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r18); const task_r16 = ctx.$implicit; const ctx_r17 = ɵngcc0.ɵɵnextContext(2); return ctx_r17.clickTask(task_r16); });
    ɵngcc0.ɵɵelementStart(1, "mat-icon", 14);
    ɵngcc0.ɵɵtext(2, "assignment");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(3, "h3", 15);
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(5, "span", 15);
    ɵngcc0.ɵɵtext(6);
    ɵngcc0.ɵɵpipe(7, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const task_r16 = ctx.$implicit;
    const ctx_r15 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵtextInterpolate(task_r16.name || "Nameless task");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind2(7, 2, "ADF_PROCESS_LIST.DETAILS.LABELS.TASK_SUBTITLE", ɵngcc0.ɵɵpureFunction2(5, _c2, ctx_r15.getUserFullName(task_r16.assignee), ctx_r15.getFormatDate(task_r16.created, "mediumDate"))), " ");
} }
function ProcessInstanceTasksComponent_div_16_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 19);
    ɵngcc0.ɵɵelementStart(1, "mat-list");
    ɵngcc0.ɵɵtemplate(2, ProcessInstanceTasksComponent_div_16_mat_list_item_2_Template, 8, 8, "mat-list-item", 12);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r4 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r4.completedTasks);
} }
function ProcessInstanceTasksComponent_div_17_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 20);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 1, "ADF_PROCESS_LIST.DETAILS.TASKS.NO_COMPLETED"), "\n");
} }
function ProcessInstanceTasksComponent_18_ng_template_0_Template(rf, ctx) { if (rf & 1) {
    const _r22 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 22);
    ɵngcc0.ɵɵelementStart(1, "h4", 23);
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(4, "div", 24);
    ɵngcc0.ɵɵelementStart(5, "adf-start-form", 25);
    ɵngcc0.ɵɵlistener("formContentClicked", function ProcessInstanceTasksComponent_18_ng_template_0_Template_adf_start_form_formContentClicked_5_listener() { ɵngcc0.ɵɵrestoreView(_r22); const ctx_r21 = ɵngcc0.ɵɵnextContext(2); return ctx_r21.onFormContentClick(); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(6, "div", 26);
    ɵngcc0.ɵɵelementStart(7, "button", 27);
    ɵngcc0.ɵɵlistener("click", function ProcessInstanceTasksComponent_18_ng_template_0_Template_button_click_7_listener() { ɵngcc0.ɵɵrestoreView(_r22); const ctx_r23 = ɵngcc0.ɵɵnextContext(2); return ctx_r23.closeStartDialog(); });
    ɵngcc0.ɵɵtext(8);
    ɵngcc0.ɵɵpipe(9, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r20 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(3, 5, "ADF_PROCESS_LIST.DETAILS.LABELS.START_FORM"));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("processId", ctx_r20.processId)("showRefreshButton", false)("readOnlyForm", true);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(9, 7, "ADF_PROCESS_LIST.DETAILS.TASKS.TASK_CLOSE"));
} }
function ProcessInstanceTasksComponent_18_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, ProcessInstanceTasksComponent_18_ng_template_0_Template, 10, 9, "ng-template", null, 21, ɵngcc0.ɵɵtemplateRefExtractor);
} }
export class ProcessInstanceTasksComponent {
    constructor(activitiProcess, logService, dialog) {
        this.activitiProcess = activitiProcess;
        this.logService = logService;
        this.dialog = dialog;
        this.showRefreshButton = true;
        this.error = new EventEmitter();
        this.activeTasks = [];
        this.completedTasks = [];
        this.onDestroy$ = new Subject();
        this.taskClick = new EventEmitter();
        this.task$ = new Observable((observer) => this.taskObserver = observer)
            .pipe(share());
        this.completedTask$ = new Observable((observer) => this.completedTaskObserver = observer)
            .pipe(share());
    }
    ngOnInit() {
        this.task$
            .pipe(takeUntil(this.onDestroy$))
            .subscribe(task => this.activeTasks.push(task));
        this.completedTask$
            .pipe(takeUntil(this.onDestroy$))
            .subscribe(task => this.completedTasks.push(task));
    }
    ngOnDestroy() {
        this.onDestroy$.next(true);
        this.onDestroy$.complete();
    }
    ngOnChanges(changes) {
        const processInstanceDetails = changes['processInstanceDetails'];
        if (processInstanceDetails && processInstanceDetails.currentValue) {
            this.load(processInstanceDetails.currentValue.id);
        }
    }
    load(processInstanceId) {
        this.loadActive(processInstanceId);
        this.loadCompleted(processInstanceId);
    }
    loadActive(processInstanceId) {
        this.activeTasks = [];
        if (processInstanceId) {
            this.activitiProcess.getProcessTasks(processInstanceId, null).subscribe((res) => {
                res.forEach((task) => {
                    this.taskObserver.next(task);
                });
            }, (err) => {
                this.error.emit(err);
            });
        }
        else {
            this.activeTasks = [];
        }
    }
    loadCompleted(processInstanceId) {
        this.completedTasks = [];
        if (processInstanceId) {
            this.activitiProcess.getProcessTasks(processInstanceId, 'completed').subscribe((res) => {
                res.forEach((task) => {
                    this.completedTaskObserver.next(task);
                });
            }, (err) => {
                this.error.emit(err);
            });
        }
        else {
            this.completedTasks = [];
        }
    }
    hasStartFormDefined() {
        return this.processInstanceDetails && this.processInstanceDetails.startFormDefined === true;
    }
    getUserFullName(user) {
        if (user) {
            return (user.firstName && user.firstName !== 'null'
                ? user.firstName + ' ' : '') +
                user.lastName;
        }
        return 'Nobody';
    }
    getFormatDate(value, format) {
        const datePipe = new DatePipe('en-US');
        try {
            return datePipe.transform(value, format);
        }
        catch (err) {
            this.logService.error(`ProcessListInstanceTask: error parsing date ${value} to format ${format}`);
            return value;
        }
    }
    clickTask(task) {
        const args = new TaskDetailsEvent(task);
        this.taskClick.emit(args);
    }
    clickStartTask() {
        this.processId = this.processInstanceDetails.id;
        this.showStartDialog();
    }
    showStartDialog() {
        this.dialog.open(this.startDialog, { height: '500px', width: '700px' });
    }
    closeStartDialog() {
        this.dialog.closeAll();
    }
    onRefreshClicked() {
        this.load(this.processInstanceDetails.id);
    }
    onFormContentClick() {
        this.closeStartDialog();
    }
}
ProcessInstanceTasksComponent.ɵfac = function ProcessInstanceTasksComponent_Factory(t) { return new (t || ProcessInstanceTasksComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ProcessService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.LogService), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.MatDialog)); };
ProcessInstanceTasksComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ProcessInstanceTasksComponent, selectors: [["adf-process-instance-tasks"]], viewQuery: function ProcessInstanceTasksComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c0, true);
        ɵngcc0.ɵɵviewQuery(_c1, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.startDialog = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.taskDetails = _t.first);
    } }, inputs: { showRefreshButton: "showRefreshButton", processInstanceDetails: "processInstanceDetails" }, outputs: { error: "error", taskClick: "taskClick" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 19, vars: 15, consts: [["class", "process-tasks-refresh", 4, "ngIf"], [1, "adf-chip-label"], ["color", "accent", "selected", "true", 1, "adf-process-badge"], ["class", "menu-container", "data-automation-id", "active-tasks", 4, "ngIf"], ["data-automation-id", "active-tasks-none", "class", "no-results", 4, "ngIf"], [4, "ngIf"], ["class", "menu-container", "data-automation-id", "completed-tasks", 4, "ngIf"], ["data-automation-id", "completed-tasks-none", "class", "no-results", 4, "ngIf"], [1, "process-tasks-refresh"], ["mat-icon-button", "", 3, "click"], ["aria-label", "Refresh", 1, "md-24"], ["data-automation-id", "active-tasks", 1, "menu-container"], ["class", "process-tasks__task-item", 3, "click", 4, "ngFor", "ngForOf"], [1, "process-tasks__task-item", 3, "click"], ["mat-list-icon", ""], ["matLine", ""], ["data-automation-id", "active-tasks-none", 1, "no-results"], [1, "adf-activiti-label"], ["data-automation-id", "start-form", 1, "menu-container"], ["data-automation-id", "completed-tasks", 1, "menu-container"], ["data-automation-id", "completed-tasks-none", 1, "no-results"], ["startDialog", ""], ["id", "adf-start-process-dialog", 1, "adf-start-process-dialog"], ["matDialogTitle", ""], ["mat-dialog-content", "", 1, "adf-start-process-dialog-content"], [3, "processId", "showRefreshButton", "readOnlyForm", "formContentClicked"], ["mat-dialog-actions", "", 1, "adf-start-process-dialog-actions"], ["mat-button", "", "type", "button", 3, "click"]], template: function ProcessInstanceTasksComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, ProcessInstanceTasksComponent_div_0_Template, 4, 0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "mat-chip-list");
        ɵngcc0.ɵɵelementStart(2, "span", 1);
        ɵngcc0.ɵɵtext(3);
        ɵngcc0.ɵɵpipe(4, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(5, "mat-chip", 2);
        ɵngcc0.ɵɵtext(6);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(7, ProcessInstanceTasksComponent_div_7_Template, 3, 1, "div", 3);
        ɵngcc0.ɵɵtemplate(8, ProcessInstanceTasksComponent_div_8_Template, 3, 3, "div", 4);
        ɵngcc0.ɵɵtemplate(9, ProcessInstanceTasksComponent_div_9_Template, 15, 13, "div", 5);
        ɵngcc0.ɵɵelementStart(10, "mat-chip-list");
        ɵngcc0.ɵɵelementStart(11, "span", 1);
        ɵngcc0.ɵɵtext(12);
        ɵngcc0.ɵɵpipe(13, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(14, "mat-chip", 2);
        ɵngcc0.ɵɵtext(15);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(16, ProcessInstanceTasksComponent_div_16_Template, 3, 1, "div", 6);
        ɵngcc0.ɵɵtemplate(17, ProcessInstanceTasksComponent_div_17_Template, 3, 3, "div", 7);
        ɵngcc0.ɵɵtemplate(18, ProcessInstanceTasksComponent_18_Template, 2, 0, undefined, 5);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngIf", ctx.showRefreshButton);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(4, 11, "ADF_PROCESS_LIST.DETAILS.LABELS.TASKS_ACTIVE"));
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵtextInterpolate(ctx.activeTasks == null ? null : ctx.activeTasks.length);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", (ctx.activeTasks == null ? null : ctx.activeTasks.length) > 0);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", (ctx.activeTasks == null ? null : ctx.activeTasks.length) === 0);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.hasStartFormDefined());
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(13, 13, "ADF_PROCESS_LIST.DETAILS.LABELS.TASKS_COMPLETED"));
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵtextInterpolate(ctx.completedTasks == null ? null : ctx.completedTasks.length);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", (ctx.completedTasks == null ? null : ctx.completedTasks.length) > 0);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", (ctx.completedTasks == null ? null : ctx.completedTasks.length) === 0);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.hasStartFormDefined());
    } }, directives: [ɵngcc4.NgIf, ɵngcc5.MatChipList, ɵngcc5.MatChip, ɵngcc6.MatButton, ɵngcc7.MatIcon, ɵngcc8.MatList, ɵngcc4.NgForOf, ɵngcc8.MatListItem, ɵngcc8.MatListIconCssMatStyler, ɵngcc9.MatLine, ɵngcc3.MatDialogTitle, ɵngcc3.MatDialogContent, ɵngcc10.StartFormComponent, ɵngcc3.MatDialogActions], pipes: [ɵngcc11.TranslatePipe], styles: ["[_nghost-%COMP%]{width:100%}.activiti-label[_ngcontent-%COMP%]{font-weight:bolder;vertical-align:top}.adf-process-badge[_ngcontent-%COMP%]{outline:none;pointer-events:none}.adf-chip-label[_ngcontent-%COMP%]{font-weight:700;margin-right:8px;position:relative;top:5px}.menu-container[_ngcontent-%COMP%]{margin-bottom:32px}.activiti-label[_ngcontent-%COMP%] + .icon[_ngcontent-%COMP%]{position:relative;top:-2px}.task-details-dialog[_ngcontent-%COMP%]{position:fixed;top:50%;transform:translateY(-50%);width:40%}.process-tasks-refresh[_ngcontent-%COMP%]{float:right}.adf-start-process-dialog[_ngcontent-%COMP%]{display:flex;flex-direction:column;height:100%;width:100%}.adf-start-process-dialog-content[_ngcontent-%COMP%]{flex-grow:1}.adf-start-process-dialog-actions[_ngcontent-%COMP%]{display:flex;justify-content:flex-end}.no-results[_ngcontent-%COMP%]{color:rgba(0,0,0,.54);display:block;font-size:14px;font-weight:400;letter-spacing:0;line-height:18px;margin-left:9px;padding:12px}.process-tasks__task-item[_ngcontent-%COMP%]{cursor:pointer}"] });
ProcessInstanceTasksComponent.ctorParameters = () => [
    { type: ProcessService },
    { type: LogService },
    { type: MatDialog }
];
ProcessInstanceTasksComponent.propDecorators = {
    processInstanceDetails: [{ type: Input }],
    showRefreshButton: [{ type: Input }],
    error: [{ type: Output }],
    startDialog: [{ type: ViewChild, args: ['startDialog',] }],
    taskDetails: [{ type: ViewChild, args: ['taskDetails',] }],
    taskClick: [{ type: Output }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ProcessInstanceTasksComponent, [{
        type: Component,
        args: [{
                selector: 'adf-process-instance-tasks',
                template: "<div  *ngIf=\"showRefreshButton\" class=\"process-tasks-refresh\" >\n    <button mat-icon-button (click)=\"onRefreshClicked()\">\n        <mat-icon class=\"md-24\" aria-label=\"Refresh\">refresh</mat-icon>\n    </button>\n</div>\n\n<!-- ACTIVE FORM -->\n\n<mat-chip-list>\n    <span class=\"adf-chip-label\">{{ 'ADF_PROCESS_LIST.DETAILS.LABELS.TASKS_ACTIVE'|translate }}</span>\n    <mat-chip class=\"adf-process-badge\" color=\"accent\" selected=\"true\">{{activeTasks?.length}}</mat-chip>\n</mat-chip-list>\n\n<div class=\"menu-container\" *ngIf=\"activeTasks?.length > 0\" data-automation-id=\"active-tasks\">\n    <mat-list>\n        <mat-list-item class=\"process-tasks__task-item\" *ngFor=\"let task of activeTasks\" (click)=\"clickTask(task)\">\n                <mat-icon mat-list-icon>assignment</mat-icon>\n                <h3 matLine>{{task.name || 'Nameless task'}}</h3>\n                <span matLine>\n                    {{ 'ADF_PROCESS_LIST.DETAILS.LABELS.TASK_SUBTITLE' | translate:{user: getUserFullName(task.assignee), created: getFormatDate(task.created, 'mediumDate') } }}\n                </span>\n        </mat-list-item>\n    </mat-list>\n</div>\n\n<!-- START FORM -->\n\n<div *ngIf=\"activeTasks?.length === 0\" data-automation-id=\"active-tasks-none\" class=\"no-results\">\n    {{ 'ADF_PROCESS_LIST.DETAILS.TASKS.NO_ACTIVE' | translate }}\n</div>\n\n<div *ngIf=\"hasStartFormDefined()\">\n    <span class=\"adf-activiti-label\">{{ 'ADF_PROCESS_LIST.DETAILS.LABELS.START_FORM'|translate }}</span>\n\n    <!--IF START TASK COMPLETED -->\n    <div class=\"menu-container\" data-automation-id=\"start-form\">\n        <mat-list>\n            <mat-list-item class=\"process-tasks__task-item\" (click)=\"clickStartTask()\">\n                <mat-icon mat-list-icon>assignment</mat-icon>\n                <h3 matLine>{{ 'ADF_PROCESS_LIST.DETAILS.LABELS.START_FORM'|translate }}</h3>\n                <span matLine>\n                    {{ 'ADF_PROCESS_LIST.DETAILS.LABELS.TASK_SUBTITLE' | translate:{user:getUserFullName(processInstanceDetails.startedBy), created: getFormatDate(processInstanceDetails.started, 'mediumDate') } }}\n                </span>\n            </mat-list-item>\n        </mat-list>\n    </div>\n\n</div>\n\n<!-- COMPLETED FORM -->\n<mat-chip-list>\n        <span class=\"adf-chip-label\">{{ 'ADF_PROCESS_LIST.DETAILS.LABELS.TASKS_COMPLETED'|translate }}</span>\n        <mat-chip class=\"adf-process-badge\" color=\"accent\" selected=\"true\">{{completedTasks?.length}}</mat-chip>\n</mat-chip-list>\n\n<div class=\"menu-container\" *ngIf=\"completedTasks?.length > 0\" data-automation-id=\"completed-tasks\">\n    <mat-list>\n        <mat-list-item class=\"process-tasks__task-item\" *ngFor=\"let task of completedTasks\" (click)=\"clickTask(task)\">\n            <mat-icon mat-list-icon>assignment</mat-icon>\n            <h3 matLine>{{task.name || 'Nameless task'}}</h3>\n            <span matLine>\n                {{ 'ADF_PROCESS_LIST.DETAILS.LABELS.TASK_SUBTITLE' | translate:{user:getUserFullName(task.assignee), created: getFormatDate(task.created, 'mediumDate') } }}\n            </span>\n        </mat-list-item>\n    </mat-list>\n</div>\n\n<div *ngIf=\"completedTasks?.length === 0\" data-automation-id=\"completed-tasks-none\" class=\"no-results\">\n    {{ 'ADF_PROCESS_LIST.DETAILS.TASKS.NO_COMPLETED' | translate }}\n</div>\n\n<ng-template *ngIf=\"hasStartFormDefined()\" #startDialog>\n    <div id=\"adf-start-process-dialog\" class=\"adf-start-process-dialog\">\n        <h4 matDialogTitle>{{ 'ADF_PROCESS_LIST.DETAILS.LABELS.START_FORM'|translate }}</h4>\n        <div mat-dialog-content class=\"adf-start-process-dialog-content\">\n            <adf-start-form [processId]=\"processId\"\n                                 [showRefreshButton]=\"false\" [readOnlyForm]=\"true\"\n                                 (formContentClicked)='onFormContentClick()'>\n            </adf-start-form>\n        </div>\n        <div mat-dialog-actions class=\"adf-start-process-dialog-actions\">\n            <button mat-button type=\"button\" (click)=\"closeStartDialog()\">{{ 'ADF_PROCESS_LIST.DETAILS.TASKS.TASK_CLOSE' | translate }}</button>\n        </div>\n    </div>\n</ng-template>\n",
                styles: [":host{width:100%}.activiti-label{font-weight:bolder;vertical-align:top}.adf-process-badge{outline:none;pointer-events:none}.adf-chip-label{font-weight:700;margin-right:8px;position:relative;top:5px}.menu-container{margin-bottom:32px}.activiti-label+.icon{position:relative;top:-2px}.task-details-dialog{position:fixed;top:50%;transform:translateY(-50%);width:40%}.process-tasks-refresh{float:right}.adf-start-process-dialog{display:flex;flex-direction:column;height:100%;width:100%}.adf-start-process-dialog-content{flex-grow:1}.adf-start-process-dialog-actions{display:flex;justify-content:flex-end}.no-results{color:rgba(0,0,0,.54);display:block;font-size:14px;font-weight:400;letter-spacing:0;line-height:18px;margin-left:9px;padding:12px}.process-tasks__task-item{cursor:pointer}"]
            }]
    }], function () { return [{ type: ɵngcc1.ProcessService }, { type: ɵngcc2.LogService }, { type: ɵngcc3.MatDialog }]; }, { showRefreshButton: [{
            type: Input
        }], error: [{
            type: Output
        }], taskClick: [{
            type: Output
        }], processInstanceDetails: [{
            type: Input
        }], startDialog: [{
            type: ViewChild,
            args: ['startDialog']
        }], taskDetails: [{
            type: ViewChild,
            args: ['taskDetails']
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,