import { AlfrescoApiService } from '@alfresco/adf-core';
import { Injectable } from '@angular/core';
import { TasksApi, ProcessDefinitionsApi, ProcessInstancesApi, ProcessInstanceVariablesApi } from '@alfresco/js-api';
import { from, throwError, of } from 'rxjs';
import { ProcessDefinitionRepresentation } from '../models/process-definition.model';
import { ProcessInstanceVariable } from '../models/process-instance-variable.model';
import { ProcessInstance } from '../models/process-instance.model';
import { ProcessListModel } from '../models/process-list.model';
import { map, catchError } from 'rxjs/operators';
import { DatePipe } from '@angular/common';
import * as i0 from "@angular/core";
import * as i1 from "@alfresco/adf-core";
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@alfresco/adf-core';
export class ProcessService {
    constructor(alfrescoApiService) {
        this.alfrescoApiService = alfrescoApiService;
    }
    get tasksApi() {
        var _a;
        this._tasksApi = (_a = this._tasksApi) !== null && _a !== void 0 ? _a : new TasksApi(this.alfrescoApiService.getInstance());
        return this._tasksApi;
    }
    get processDefinitionsApi() {
        var _a;
        this._processDefinitionsApi = (_a = this._processDefinitionsApi) !== null && _a !== void 0 ? _a : new ProcessDefinitionsApi(this.alfrescoApiService.getInstance());
        return this._processDefinitionsApi;
    }
    get processInstancesApi() {
        var _a;
        this._processInstancesApi = (_a = this._processInstancesApi) !== null && _a !== void 0 ? _a : new ProcessInstancesApi(this.alfrescoApiService.getInstance());
        return this._processInstancesApi;
    }
    get processInstanceVariablesApi() {
        var _a;
        this._processInstanceVariablesApi = (_a = this._processInstanceVariablesApi) !== null && _a !== void 0 ? _a : new ProcessInstanceVariablesApi(this.alfrescoApiService.getInstance());
        return this._processInstanceVariablesApi;
    }
    getProcessInstances(requestNode, processDefinitionKey) {
        return from(this.processInstancesApi.getProcessInstances(requestNode))
            .pipe(map((res) => {
            if (processDefinitionKey) {
                const filtered = res.data.filter((process) => process.processDefinitionKey === processDefinitionKey);
                res.data = filtered;
                return res;
            }
            else {
                return res;
            }
        }), catchError((err) => this.handleProcessError(err)));
    }
    getProcesses(requestNode, processDefinitionKey) {
        return this.getProcessInstances(requestNode, processDefinitionKey)
            .pipe(map(response => {
            return Object.assign(Object.assign({}, response), { data: (response.data || []).map(instance => {
                    instance.name = this.getProcessNameOrDescription(instance, 'medium');
                    return instance;
                }) });
        }), catchError(() => of(new ProcessListModel({}))));
    }
    getProcessNameOrDescription(processInstance, dateFormat) {
        let name = '';
        if (processInstance) {
            name = processInstance.name ||
                processInstance.processDefinitionName + ' - ' + this.getFormatDate(processInstance.started, dateFormat);
        }
        return name;
    }
    getFormatDate(value, format) {
        const datePipe = new DatePipe('en-US');
        try {
            return datePipe.transform(value, format);
        }
        catch (err) {
            return '';
        }
    }
    fetchProcessAuditPdfById(processId) {
        return from(this.processInstancesApi.getProcessAuditPdf(processId))
            .pipe(catchError((err) => this.handleProcessError(err)));
    }
    fetchProcessAuditJsonById(processId) {
        return from(this.processInstancesApi.getTaskAuditLog(processId))
            .pipe(catchError((err) => this.handleProcessError(err)));
    }
    getProcess(processInstanceId) {
        return from(this.processInstancesApi.getProcessInstance(processInstanceId))
            .pipe(catchError((err) => this.handleProcessError(err)));
    }
    getProcessTasks(processInstanceId, state) {
        const taskOpts = state ? {
            processInstanceId: processInstanceId,
            state: state
        } : {
            processInstanceId: processInstanceId
        };
        return from(this.tasksApi.listTasks(taskOpts))
            .pipe(map(this.extractData), map((tasks) => tasks.map((task) => {
            task.created = moment(task.created, 'YYYY-MM-DD').format();
            return task;
        })), catchError((err) => this.handleProcessError(err)));
    }
    getProcessDefinitions(appId) {
        const opts = appId ? {
            latest: true,
            appDefinitionId: appId
        } : {
            latest: true
        };
        return from(this.processDefinitionsApi.getProcessDefinitions(opts))
            .pipe(map(this.extractData), map((processDefs) => processDefs.map((pd) => new ProcessDefinitionRepresentation(pd))), catchError((err) => this.handleProcessError(err)));
    }
    startProcess(processDefinitionId, name, outcome, startFormValues, variables) {
        const startRequest = {
            name: name,
            processDefinitionId: processDefinitionId
        };
        if (outcome) {
            startRequest.outcome = outcome;
        }
        if (startFormValues) {
            startRequest.values = startFormValues;
        }
        if (variables) {
            startRequest.variables = variables;
        }
        return from(this.processInstancesApi.startNewProcessInstance(startRequest))
            .pipe(map((pd) => new ProcessInstance(pd)), catchError((err) => this.handleProcessError(err)));
    }
    cancelProcess(processInstanceId) {
        return from(this.processInstancesApi.deleteProcessInstance(processInstanceId))
            .pipe(catchError((err) => this.handleProcessError(err)));
    }
    getProcessInstanceVariables(processInstanceId) {
        return from(this.processInstanceVariablesApi.getProcessInstanceVariables(processInstanceId))
            .pipe(map((processVars) => processVars.map((currentProcessVar) => new ProcessInstanceVariable(currentProcessVar))), catchError((err) => this.handleProcessError(err)));
    }
    createOrUpdateProcessInstanceVariables(processInstanceId, variables) {
        return from(this.processInstanceVariablesApi.createOrUpdateProcessInstanceVariables(processInstanceId, variables)).pipe(catchError((err) => this.handleProcessError(err)));
    }
    deleteProcessInstanceVariable(processInstanceId, variableName) {
        return from(this.processInstanceVariablesApi.deleteProcessInstanceVariable(processInstanceId, variableName))
            .pipe(catchError((err) => this.handleProcessError(err)));
    }
    extractData(res) {
        return res.data || {};
    }
    handleProcessError(error) {
        return throwError(error || 'Server error');
    }
}
ProcessService.ɵfac = function ProcessService_Factory(t) { return new (t || ProcessService)(ɵngcc0.ɵɵinject(ɵngcc1.AlfrescoApiService)); };
ProcessService.ɵprov = i0.ɵɵdefineInjectable({ factory: function ProcessService_Factory() { return new ProcessService(i0.ɵɵinject(i1.AlfrescoApiService)); }, token: ProcessService, providedIn: "root" });
ProcessService.ctorParameters = () => [
    { type: AlfrescoApiService }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ProcessService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc1.AlfrescoApiService }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,