/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { DownloadService } from '@alfresco/adf-core';
import { Directive, EventEmitter, Input, Output } from '@angular/core';
import { ProcessService } from './../services/process.service';
const JSON_FORMAT = 'json';
const PDF_FORMAT = 'pdf';
export class ProcessAuditDirective {
    constructor(downloadService, processListService) {
        this.downloadService = downloadService;
        this.processListService = processListService;
        this.fileName = 'Audit';
        this.format = 'pdf';
        this.download = true;
        this.clicked = new EventEmitter();
        this.error = new EventEmitter();
    }
    ngOnChanges() {
        if (!this.isValidType()) {
            this.setDefaultFormatType();
        }
    }
    isValidType() {
        return this.format && (this.isJsonFormat() || this.isPdfFormat());
    }
    setDefaultFormatType() {
        this.format = PDF_FORMAT;
    }
    fetchAuditInfo() {
        if (this.isPdfFormat()) {
            this.processListService.fetchProcessAuditPdfById(this.processId).subscribe((blob) => {
                if (this.download) {
                    this.downloadService.downloadBlob(blob, this.fileName + '.pdf');
                }
                this.clicked.emit({ format: this.format, value: blob, fileName: this.fileName });
            }, (err) => this.error.emit(err));
        }
        else {
            this.processListService.fetchProcessAuditJsonById(this.processId).subscribe((res) => this.clicked.emit({ format: this.format, value: res, fileName: this.fileName }), (err) => this.error.emit(err));
        }
    }
    onClickAudit() {
        this.fetchAuditInfo();
    }
    isJsonFormat() {
        return this.format === JSON_FORMAT;
    }
    isPdfFormat() {
        return this.format === PDF_FORMAT;
    }
}
ProcessAuditDirective.decorators = [
    { type: Directive, args: [{
                selector: 'button[adf-process-audit]',
                host: {
                    'role': 'button',
                    '(click)': 'onClickAudit()'
                }
            },] }
];
ProcessAuditDirective.ctorParameters = () => [
    { type: DownloadService },
    { type: ProcessService }
];
ProcessAuditDirective.propDecorators = {
    processId: [{ type: Input, args: ['process-id',] }],
    fileName: [{ type: Input }],
    format: [{ type: Input }],
    download: [{ type: Input }],
    clicked: [{ type: Output }],
    error: [{ type: Output }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvY2Vzcy1hdWRpdC5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiL2hvbWUvdHJhdmlzL2J1aWxkL0FsZnJlc2NvL2FsZnJlc2NvLW5nMi1jb21wb25lbnRzL2xpYi9wcm9jZXNzLXNlcnZpY2VzL3NyYy8iLCJzb3VyY2VzIjpbImxpYi9wcm9jZXNzLWxpc3QvY29tcG9uZW50cy9wcm9jZXNzLWF1ZGl0LmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7O0dBZUc7QUFJSCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDckQsT0FBTyxFQUFFLFNBQVMsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFhLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNsRixPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFFL0QsTUFBTSxXQUFXLEdBQVcsTUFBTSxDQUFDO0FBQ25DLE1BQU0sVUFBVSxHQUFXLEtBQUssQ0FBQztBQVVqQyxNQUFNLE9BQU8scUJBQXFCO0lBOEI5QixZQUFvQixlQUFnQyxFQUNoQyxrQkFBa0M7UUFEbEMsb0JBQWUsR0FBZixlQUFlLENBQWlCO1FBQ2hDLHVCQUFrQixHQUFsQixrQkFBa0IsQ0FBZ0I7UUF2QnRELGFBQVEsR0FBVyxPQUFPLENBQUM7UUFJM0IsV0FBTSxHQUFXLEtBQUssQ0FBQztRQUl2QixhQUFRLEdBQVksSUFBSSxDQUFDO1FBSXpCLFlBQU8sR0FBc0IsSUFBSSxZQUFZLEVBQU8sQ0FBQztRQUlyRCxVQUFLLEdBQXNCLElBQUksWUFBWSxFQUFPLENBQUM7SUFRbkQsQ0FBQztJQUVELFdBQVc7UUFDUCxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxFQUFFO1lBQ3JCLElBQUksQ0FBQyxvQkFBb0IsRUFBRSxDQUFDO1NBQy9CO0lBQ0wsQ0FBQztJQUVELFdBQVc7UUFDUCxPQUFPLElBQUksQ0FBQyxNQUFNLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFLElBQUksSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUM7SUFDdEUsQ0FBQztJQUVELG9CQUFvQjtRQUNoQixJQUFJLENBQUMsTUFBTSxHQUFHLFVBQVUsQ0FBQztJQUM3QixDQUFDO0lBS0QsY0FBYztRQUNWLElBQUksSUFBSSxDQUFDLFdBQVcsRUFBRSxFQUFFO1lBQ3BCLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyx3QkFBd0IsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsU0FBUyxDQUN0RSxDQUFDLElBQVUsRUFBRSxFQUFFO2dCQUNYLElBQUksSUFBSSxDQUFDLFFBQVEsRUFBRTtvQkFDZixJQUFJLENBQUMsZUFBZSxDQUFDLFlBQVksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLFFBQVEsR0FBRyxNQUFNLENBQUMsQ0FBQztpQkFDbkU7Z0JBQ0QsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUFDLE1BQU0sRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztZQUNyRixDQUFDLEVBQ0QsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7U0FDdEM7YUFBTTtZQUNILElBQUksQ0FBQyxrQkFBa0IsQ0FBQyx5QkFBeUIsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsU0FBUyxDQUN2RSxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUFDLE1BQU0sRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLFFBQVEsRUFBRSxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUMsRUFDeEYsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7U0FDdEM7SUFDTCxDQUFDO0lBRUQsWUFBWTtRQUNSLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQztJQUMxQixDQUFDO0lBRUQsWUFBWTtRQUNSLE9BQU8sSUFBSSxDQUFDLE1BQU0sS0FBSyxXQUFXLENBQUM7SUFDdkMsQ0FBQztJQUVELFdBQVc7UUFDUCxPQUFPLElBQUksQ0FBQyxNQUFNLEtBQUssVUFBVSxDQUFDO0lBQ3RDLENBQUM7OztZQXRGSixTQUFTLFNBQUM7Z0JBRVAsUUFBUSxFQUFFLDJCQUEyQjtnQkFDckMsSUFBSSxFQUFFO29CQUNGLE1BQU0sRUFBRSxRQUFRO29CQUNoQixTQUFTLEVBQUUsZ0JBQWdCO2lCQUM5QjthQUNKOzs7WUFkUSxlQUFlO1lBRWYsY0FBYzs7O3dCQWdCbEIsS0FBSyxTQUFDLFlBQVk7dUJBSWxCLEtBQUs7cUJBSUwsS0FBSzt1QkFJTCxLQUFLO3NCQUlMLE1BQU07b0JBSU4sTUFBTSIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbi8qIHRzbGludDpkaXNhYmxlOm5vLWlucHV0LXJlbmFtZSAgKi9cblxuaW1wb3J0IHsgRG93bmxvYWRTZXJ2aWNlIH0gZnJvbSAnQGFsZnJlc2NvL2FkZi1jb3JlJztcbmltcG9ydCB7IERpcmVjdGl2ZSwgRXZlbnRFbWl0dGVyLCBJbnB1dCwgT25DaGFuZ2VzLCBPdXRwdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFByb2Nlc3NTZXJ2aWNlIH0gZnJvbSAnLi8uLi9zZXJ2aWNlcy9wcm9jZXNzLnNlcnZpY2UnO1xuXG5jb25zdCBKU09OX0ZPUk1BVDogc3RyaW5nID0gJ2pzb24nO1xuY29uc3QgUERGX0ZPUk1BVDogc3RyaW5nID0gJ3BkZic7XG5cbkBEaXJlY3RpdmUoe1xuICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTogZGlyZWN0aXZlLXNlbGVjdG9yXG4gICAgc2VsZWN0b3I6ICdidXR0b25bYWRmLXByb2Nlc3MtYXVkaXRdJyxcbiAgICBob3N0OiB7XG4gICAgICAgICdyb2xlJzogJ2J1dHRvbicsXG4gICAgICAgICcoY2xpY2spJzogJ29uQ2xpY2tBdWRpdCgpJ1xuICAgIH1cbn0pXG5leHBvcnQgY2xhc3MgUHJvY2Vzc0F1ZGl0RGlyZWN0aXZlIGltcGxlbWVudHMgT25DaGFuZ2VzIHtcblxuICAgIC8qKiBJRCBvZiB0aGUgcHJvY2Vzcy4gKi9cbiAgICBASW5wdXQoJ3Byb2Nlc3MtaWQnKVxuICAgIHByb2Nlc3NJZDogc3RyaW5nO1xuXG4gICAgLyoqIE5hbWUgb2YgdGhlIGZpbGUgdG8gZG93bmxvYWQgKGZvciBQREYgZG93bmxvYWRzKS4gKi9cbiAgICBASW5wdXQoKVxuICAgIGZpbGVOYW1lOiBzdHJpbmcgPSAnQXVkaXQnO1xuXG4gICAgLyoqIEZvcm1hdCBmb3IgdGhlIGF1ZGl0IGluZm9ybWF0aW9uIChjYW4gYmUgXCJwZGZcIiBvciBcImpzb25cIikuICovXG4gICAgQElucHV0KClcbiAgICBmb3JtYXQ6IHN0cmluZyA9ICdwZGYnO1xuXG4gICAgLyoqIEVuYWJsZXMgZG93bmxvYWRpbmcgb2YgdGhlIGF1ZGl0IGZpbGUgb24gY2xpY2tpbmcuICovXG4gICAgQElucHV0KClcbiAgICBkb3dubG9hZDogYm9vbGVhbiA9IHRydWU7XG5cbiAgICAvKiogRW1pdHRlZCB3aGVuIHRoZSBkZWNvcmF0ZWQgZWxlbWVudCBpcyBjbGlja2VkLiAqL1xuICAgIEBPdXRwdXQoKVxuICAgIGNsaWNrZWQ6IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XG5cbiAgICAvKiogRW1pdHRlZCB3aGVuIGFuIGVycm9yIG9jY3Vycy4gKi9cbiAgICBAT3V0cHV0KClcbiAgICBlcnJvcjogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSBkb3dubG9hZFNlcnZpY2VcbiAgICAgKiBAcGFyYW0gcHJvY2Vzc0xpc3RTZXJ2aWNlXG4gICAgICovXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBkb3dubG9hZFNlcnZpY2U6IERvd25sb2FkU2VydmljZSxcbiAgICAgICAgICAgICAgICBwcml2YXRlIHByb2Nlc3NMaXN0U2VydmljZTogUHJvY2Vzc1NlcnZpY2UpIHtcbiAgICB9XG5cbiAgICBuZ09uQ2hhbmdlcygpOiB2b2lkIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzVmFsaWRUeXBlKCkpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0RGVmYXVsdEZvcm1hdFR5cGUoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGlzVmFsaWRUeXBlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5mb3JtYXQgJiYgKHRoaXMuaXNKc29uRm9ybWF0KCkgfHwgdGhpcy5pc1BkZkZvcm1hdCgpKTtcbiAgICB9XG5cbiAgICBzZXREZWZhdWx0Rm9ybWF0VHlwZSgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5mb3JtYXQgPSBQREZfRk9STUFUO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGZldGNoIHRoZSBhdWRpdCBpbmZvcm1hdGlvbiBpbiB0aGUgcmVxdWVzdGVkIGZvcm1hdFxuICAgICAqL1xuICAgIGZldGNoQXVkaXRJbmZvKCk6IHZvaWQge1xuICAgICAgICBpZiAodGhpcy5pc1BkZkZvcm1hdCgpKSB7XG4gICAgICAgICAgICB0aGlzLnByb2Nlc3NMaXN0U2VydmljZS5mZXRjaFByb2Nlc3NBdWRpdFBkZkJ5SWQodGhpcy5wcm9jZXNzSWQpLnN1YnNjcmliZShcbiAgICAgICAgICAgICAgICAoYmxvYjogQmxvYikgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5kb3dubG9hZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kb3dubG9hZFNlcnZpY2UuZG93bmxvYWRCbG9iKGJsb2IsIHRoaXMuZmlsZU5hbWUgKyAnLnBkZicpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2xpY2tlZC5lbWl0KHsgZm9ybWF0OiB0aGlzLmZvcm1hdCwgdmFsdWU6IGJsb2IsIGZpbGVOYW1lOiB0aGlzLmZpbGVOYW1lIH0pO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgKGVycikgPT4gdGhpcy5lcnJvci5lbWl0KGVycikpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5wcm9jZXNzTGlzdFNlcnZpY2UuZmV0Y2hQcm9jZXNzQXVkaXRKc29uQnlJZCh0aGlzLnByb2Nlc3NJZCkuc3Vic2NyaWJlKFxuICAgICAgICAgICAgICAgIChyZXMpID0+IHRoaXMuY2xpY2tlZC5lbWl0KHsgZm9ybWF0OiB0aGlzLmZvcm1hdCwgdmFsdWU6IHJlcywgZmlsZU5hbWU6IHRoaXMuZmlsZU5hbWUgfSksXG4gICAgICAgICAgICAgICAgKGVycikgPT4gdGhpcy5lcnJvci5lbWl0KGVycikpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgb25DbGlja0F1ZGl0KCkge1xuICAgICAgICB0aGlzLmZldGNoQXVkaXRJbmZvKCk7XG4gICAgfVxuXG4gICAgaXNKc29uRm9ybWF0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5mb3JtYXQgPT09IEpTT05fRk9STUFUO1xuICAgIH1cblxuICAgIGlzUGRmRm9ybWF0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5mb3JtYXQgPT09IFBERl9GT1JNQVQ7XG4gICAgfVxuXG59XG4iXX0=