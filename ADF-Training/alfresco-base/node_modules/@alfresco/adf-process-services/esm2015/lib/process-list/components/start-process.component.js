/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, EventEmitter, Input, Output, ViewChild, ViewEncapsulation } from '@angular/core';
import { ActivitiContentService, AppConfigService, AppConfigValues, AppsProcessService } from '@alfresco/adf-core';
import { ProcessDefinitionRepresentation } from './../models/process-definition.model';
import { ProcessInstance } from './../models/process-instance.model';
import { ProcessService } from './../services/process.service';
import { FormControl, Validators } from '@angular/forms';
import { Subject, forkJoin } from 'rxjs';
import { map, takeUntil } from 'rxjs/operators';
import { MatAutocompleteTrigger } from '@angular/material/autocomplete';
import { StartFormComponent } from '../../form';
import { ProcessNamePipe } from '../../pipes/process-name.pipe';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './../services/process.service';
import * as ɵngcc2 from '@alfresco/adf-core';
import * as ɵngcc3 from '../../pipes/process-name.pipe';
import * as ɵngcc4 from '@angular/common';
import * as ɵngcc5 from '@angular/material/progress-spinner';
import * as ɵngcc6 from '@angular/material/form-field';
import * as ɵngcc7 from '@angular/material/input';
import * as ɵngcc8 from '@angular/forms';
import * as ɵngcc9 from '@angular/material/autocomplete';
import * as ɵngcc10 from '@angular/material/select';
import * as ɵngcc11 from '@angular/material/core';
import * as ɵngcc12 from '@angular/material/button';
import * as ɵngcc13 from '@angular/material/icon';
import * as ɵngcc14 from '../../form/start-form.component';
import * as ɵngcc15 from '@ngx-translate/core';

const _c0 = ["startForm"];
function StartProcessInstanceComponent_ng_container_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
function StartProcessInstanceComponent_ng_template_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "mat-spinner", 3);
} }
function StartProcessInstanceComponent_ng_template_3_ng_container_0_div_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 23);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r8 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(2, 1, ctx_r8.title));
} }
function StartProcessInstanceComponent_ng_template_3_ng_container_0_mat_form_field_5_mat_option_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-option", 27);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const application_r24 = ctx.$implicit;
    ɵngcc0.ɵɵproperty("value", application_r24);
    ɵngcc0.ɵɵattribute("data-automation-id", "adf-start-process-apps-option-" + application_r24.name);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", application_r24.name, " ");
} }
function StartProcessInstanceComponent_ng_template_3_ng_container_0_mat_form_field_5_Template(rf, ctx) { if (rf & 1) {
    const _r26 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "mat-form-field", 24);
    ɵngcc0.ɵɵelementStart(1, "mat-select", 25);
    ɵngcc0.ɵɵlistener("selectionChange", function StartProcessInstanceComponent_ng_template_3_ng_container_0_mat_form_field_5_Template_mat_select_selectionChange_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r26); const ctx_r25 = ɵngcc0.ɵɵnextContext(3); return ctx_r25.onAppSelectionChange($event); })("ngModelChange", function StartProcessInstanceComponent_ng_template_3_ng_container_0_mat_form_field_5_Template_mat_select_ngModelChange_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r26); const ctx_r27 = ɵngcc0.ɵɵnextContext(3); return ctx_r27.selectedApplication = $event; });
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵtemplate(3, StartProcessInstanceComponent_ng_template_3_ng_container_0_mat_form_field_5_mat_option_3_Template, 2, 3, "mat-option", 26);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r9 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵproperty("floatLabel", "always");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate("placeholder", ɵngcc0.ɵɵpipeBind1(2, 4, "ADF_PROCESS_LIST.START_PROCESS.FORM.LABEL.SELECT_APPLICATION"));
    ɵngcc0.ɵɵproperty("ngModel", ctx_r9.selectedApplication);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r9.applications);
} }
function StartProcessInstanceComponent_ng_template_3_ng_container_0_mat_option_15_Template(rf, ctx) { if (rf & 1) {
    const _r30 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "mat-option", 28);
    ɵngcc0.ɵɵlistener("click", function StartProcessInstanceComponent_ng_template_3_ng_container_0_mat_option_15_Template_mat_option_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r30); const processDef_r28 = ctx.$implicit; const ctx_r29 = ɵngcc0.ɵɵnextContext(3); return ctx_r29.processDefinitionSelectionChanged(processDef_r28); });
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const processDef_r28 = ctx.$implicit;
    ɵngcc0.ɵɵproperty("value", processDef_r28.name);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", processDef_r28.name, " ");
} }
function StartProcessInstanceComponent_ng_template_3_ng_container_0_ng_container_17_button_1_Template(rf, ctx) { if (rf & 1) {
    const _r33 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 30);
    ɵngcc0.ɵɵlistener("click", function StartProcessInstanceComponent_ng_template_3_ng_container_0_ng_container_17_button_1_Template_button_click_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r33); const ctx_r32 = ɵngcc0.ɵɵnextContext(4); return ctx_r32.displayDropdown($event); });
    ɵngcc0.ɵɵelementStart(1, "mat-icon");
    ɵngcc0.ɵɵtext(2, "arrow_drop_down");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r31 = ɵngcc0.ɵɵnextContext(4);
    ɵngcc0.ɵɵproperty("disabled", ctx_r31.disableDropdownButton());
} }
function StartProcessInstanceComponent_ng_template_3_ng_container_0_ng_container_17_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, StartProcessInstanceComponent_ng_template_3_ng_container_0_ng_container_17_button_1_Template, 3, 1, "button", 29);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r13 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r13.showSelectProcessDropdown);
} }
function StartProcessInstanceComponent_ng_template_3_ng_container_0_ng_template_18_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "mat-spinner", 31);
} if (rf & 2) {
    ɵngcc0.ɵɵproperty("diameter", 20);
} }
const _c1 = function (a0) { return { characters: a0 }; };
function StartProcessInstanceComponent_ng_template_3_ng_container_0_mat_error_25_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-error");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r16 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind2(2, 1, "ADF_PROCESS_LIST.START_PROCESS.ERROR.MAXIMUM_LENGTH", ɵngcc0.ɵɵpureFunction1(4, _c1, ctx_r16.maxProcessNameLength)), " ");
} }
function StartProcessInstanceComponent_ng_template_3_ng_container_0_mat_error_26_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-error");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 1, "ADF_PROCESS_LIST.START_PROCESS.ERROR.PROCESS_NAME_REQUIRED"), " ");
} }
function StartProcessInstanceComponent_ng_template_3_ng_container_0_mat_error_27_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-error");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 1, "ADF_PROCESS_LIST.START_PROCESS.ERROR.SPACE_VALIDATOR"), " ");
} }
function StartProcessInstanceComponent_ng_template_3_ng_container_0_ng_container_28_ng_container_1_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    const _r42 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "adf-start-form", 34, 35);
    ɵngcc0.ɵɵlistener("outcomeClick", function StartProcessInstanceComponent_ng_template_3_ng_container_0_ng_container_28_ng_container_1_ng_container_1_Template_adf_start_form_outcomeClick_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r42); const ctx_r41 = ɵngcc0.ɵɵnextContext(5); return ctx_r41.onOutcomeClick($event); });
    ɵngcc0.ɵɵelementStart(3, "button", 36);
    ɵngcc0.ɵɵlistener("click", function StartProcessInstanceComponent_ng_template_3_ng_container_0_ng_container_28_ng_container_1_ng_container_1_Template_button_click_3_listener() { ɵngcc0.ɵɵrestoreView(_r42); const ctx_r43 = ɵngcc0.ɵɵnextContext(5); return ctx_r43.cancelStartProcess(); });
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵpipe(5, "uppercase");
    ɵngcc0.ɵɵpipe(6, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r37 = ɵngcc0.ɵɵnextContext(5);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("data", ctx_r37.movedNodeToPS)("disableStartProcessButton", ctx_r37.processNameInput.invalid)("processDefinitionId", ctx_r37.selectedProcessDef.id)("showRefreshButton", false);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(5, 5, ɵngcc0.ɵɵpipeBind1(6, 7, "ADF_PROCESS_LIST.START_PROCESS.FORM.ACTION.CANCEL")), " ");
} }
function StartProcessInstanceComponent_ng_template_3_ng_container_0_ng_container_28_ng_container_1_ng_template_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "adf-empty-content", 37);
    ɵngcc0.ɵɵpipe(1, "translate");
} if (rf & 2) {
    ɵngcc0.ɵɵproperty("icon", "assessment")("title", ɵngcc0.ɵɵpipeBind1(1, 2, "ADF_PROCESS_LIST.START_PROCESS.NO_START_FORM"));
} }
function StartProcessInstanceComponent_ng_template_3_ng_container_0_ng_container_28_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, StartProcessInstanceComponent_ng_template_3_ng_container_0_ng_container_28_ng_container_1_ng_container_1_Template, 7, 9, "ng-container", 4);
    ɵngcc0.ɵɵtemplate(2, StartProcessInstanceComponent_ng_template_3_ng_container_0_ng_container_28_ng_container_1_ng_template_2_Template, 2, 4, "ng-template", null, 33, ɵngcc0.ɵɵtemplateRefExtractor);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const _r38 = ɵngcc0.ɵɵreference(3);
    const ctx_r34 = ɵngcc0.ɵɵnextContext(4);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r34.hasStartForm())("ngIfElse", _r38);
} }
function StartProcessInstanceComponent_ng_template_3_ng_container_0_ng_container_28_ng_template_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "adf-empty-content", 37);
    ɵngcc0.ɵɵpipe(1, "translate");
} if (rf & 2) {
    ɵngcc0.ɵɵproperty("icon", "assessment")("title", ɵngcc0.ɵɵpipeBind1(1, 2, "ADF_PROCESS_LIST.START_PROCESS.NO_PROCESS_DEF_SELECTED"));
} }
function StartProcessInstanceComponent_ng_template_3_ng_container_0_ng_container_28_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, StartProcessInstanceComponent_ng_template_3_ng_container_0_ng_container_28_ng_container_1_Template, 4, 2, "ng-container", 4);
    ɵngcc0.ɵɵtemplate(2, StartProcessInstanceComponent_ng_template_3_ng_container_0_ng_container_28_ng_template_2_Template, 2, 4, "ng-template", null, 32, ɵngcc0.ɵɵtemplateRefExtractor);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const _r35 = ɵngcc0.ɵɵreference(3);
    const ctx_r19 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r19.isProcessDefinitionSelected())("ngIfElse", _r35);
} }
function StartProcessInstanceComponent_ng_template_3_ng_container_0_ng_template_29_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "mat-spinner", 3);
} }
function StartProcessInstanceComponent_ng_template_3_ng_container_0_div_31_button_1_Template(rf, ctx) { if (rf & 1) {
    const _r47 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 41);
    ɵngcc0.ɵɵlistener("click", function StartProcessInstanceComponent_ng_template_3_ng_container_0_div_31_button_1_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r47); const ctx_r46 = ɵngcc0.ɵɵnextContext(4); return ctx_r46.cancelStartProcess(); });
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "uppercase");
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 1, ɵngcc0.ɵɵpipeBind1(3, 3, "ADF_PROCESS_LIST.START_PROCESS.FORM.ACTION.CANCEL")), " ");
} }
function StartProcessInstanceComponent_ng_template_3_ng_container_0_div_31_button_2_Template(rf, ctx) { if (rf & 1) {
    const _r49 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 42);
    ɵngcc0.ɵɵlistener("click", function StartProcessInstanceComponent_ng_template_3_ng_container_0_div_31_button_2_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r49); const ctx_r48 = ɵngcc0.ɵɵnextContext(4); return ctx_r48.startProcess(); });
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "uppercase");
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r45 = ɵngcc0.ɵɵnextContext(4);
    ɵngcc0.ɵɵproperty("disabled", !ctx_r45.validateForm());
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 2, ɵngcc0.ɵɵpipeBind1(3, 4, "ADF_PROCESS_LIST.START_PROCESS.FORM.ACTION.START")), " ");
} }
function StartProcessInstanceComponent_ng_template_3_ng_container_0_div_31_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 38);
    ɵngcc0.ɵɵtemplate(1, StartProcessInstanceComponent_ng_template_3_ng_container_0_div_31_button_1_Template, 4, 5, "button", 39);
    ɵngcc0.ɵɵtemplate(2, StartProcessInstanceComponent_ng_template_3_ng_container_0_div_31_button_2_Template, 4, 6, "button", 40);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r22 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r22.hasStartForm());
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r22.hasStartForm());
} }
function StartProcessInstanceComponent_ng_template_3_ng_container_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "div", 6);
    ɵngcc0.ɵɵtemplate(2, StartProcessInstanceComponent_ng_template_3_ng_container_0_div_2_Template, 3, 3, "div", 7);
    ɵngcc0.ɵɵelementStart(3, "div", 8);
    ɵngcc0.ɵɵelementStart(4, "div", 9);
    ɵngcc0.ɵɵtemplate(5, StartProcessInstanceComponent_ng_template_3_ng_container_0_mat_form_field_5_Template, 4, 6, "mat-form-field", 10);
    ɵngcc0.ɵɵelementStart(6, "mat-form-field", 11);
    ɵngcc0.ɵɵelementStart(7, "mat-label");
    ɵngcc0.ɵɵtext(8);
    ɵngcc0.ɵɵpipe(9, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(10, "input", 12, 13);
    ɵngcc0.ɵɵelementStart(12, "div", 14);
    ɵngcc0.ɵɵelementStart(13, "mat-autocomplete", 15, 16);
    ɵngcc0.ɵɵtemplate(15, StartProcessInstanceComponent_ng_template_3_ng_container_0_mat_option_15_Template, 2, 2, "mat-option", 17);
    ɵngcc0.ɵɵpipe(16, "async");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(17, StartProcessInstanceComponent_ng_template_3_ng_container_0_ng_container_17_Template, 2, 1, "ng-container", 4);
    ɵngcc0.ɵɵtemplate(18, StartProcessInstanceComponent_ng_template_3_ng_container_0_ng_template_18_Template, 1, 1, "ng-template", null, 18, ɵngcc0.ɵɵtemplateRefExtractor);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(20, "mat-form-field", 11);
    ɵngcc0.ɵɵelementStart(21, "mat-label");
    ɵngcc0.ɵɵtext(22);
    ɵngcc0.ɵɵpipe(23, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(24, "input", 19);
    ɵngcc0.ɵɵtemplate(25, StartProcessInstanceComponent_ng_template_3_ng_container_0_mat_error_25_Template, 3, 6, "mat-error", 20);
    ɵngcc0.ɵɵtemplate(26, StartProcessInstanceComponent_ng_template_3_ng_container_0_mat_error_26_Template, 3, 3, "mat-error", 20);
    ɵngcc0.ɵɵtemplate(27, StartProcessInstanceComponent_ng_template_3_ng_container_0_mat_error_27_Template, 3, 3, "mat-error", 20);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(28, StartProcessInstanceComponent_ng_template_3_ng_container_0_ng_container_28_Template, 4, 2, "ng-container", 4);
    ɵngcc0.ɵɵtemplate(29, StartProcessInstanceComponent_ng_template_3_ng_container_0_ng_template_29_Template, 1, 0, "ng-template", null, 21, ɵngcc0.ɵɵtemplateRefExtractor);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(31, StartProcessInstanceComponent_ng_template_3_ng_container_0_div_31_Template, 3, 2, "div", 22);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const _r11 = ɵngcc0.ɵɵreference(14);
    const _r14 = ɵngcc0.ɵɵreference(19);
    const _r20 = ɵngcc0.ɵɵreference(30);
    const ctx_r5 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r5.title);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r5.showSelectApplicationDropdown);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("floatLabel", "always");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(9, 19, "ADF_PROCESS_LIST.START_PROCESS.FORM.LABEL.TYPE"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("formControl", ctx_r5.processDefinitionInput)("matAutocomplete", _r11);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("displayWith", ctx_r5.displayFn);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngForOf", ɵngcc0.ɵɵpipeBind1(16, 21, ctx_r5.filteredProcessesDefinitions$));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r5.isProcessDefinitionsLoading)("ngIfElse", _r14);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("floatLabel", "always");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(23, 23, "ADF_PROCESS_LIST.START_PROCESS.FORM.LABEL.NAME"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("formControl", ctx_r5.processNameInput);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r5.nameController.hasError("maxlength"));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r5.nameController.hasError("required"));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r5.nameController.hasError("pattern"));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r5.isProcessDefinitionsLoading)("ngIfElse", _r20);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r5.hasStartForm());
} }
function StartProcessInstanceComponent_ng_template_3_ng_template_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "adf-empty-content", 37);
    ɵngcc0.ɵɵpipe(1, "translate");
} if (rf & 2) {
    ɵngcc0.ɵɵproperty("icon", "assessment")("title", ɵngcc0.ɵɵpipeBind1(1, 2, "ADF_PROCESS_LIST.START_PROCESS.NO_PROCESS_DEFINITIONS"));
} }
function StartProcessInstanceComponent_ng_template_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, StartProcessInstanceComponent_ng_template_3_ng_container_0_Template, 32, 25, "ng-container", 4);
    ɵngcc0.ɵɵtemplate(1, StartProcessInstanceComponent_ng_template_3_ng_template_1_Template, 2, 4, "ng-template", null, 5, ɵngcc0.ɵɵtemplateRefExtractor);
} if (rf & 2) {
    const _r6 = ɵngcc0.ɵɵreference(2);
    const ctx_r4 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngIf", ctx_r4.hasApplications() || ctx_r4.hasProcessDefinitions())("ngIfElse", _r6);
} }
export class StartProcessInstanceComponent {
    constructor(activitiProcess, activitiContentService, appsProcessService, appConfig, processNamePipe) {
        this.activitiProcess = activitiProcess;
        this.activitiContentService = activitiContentService;
        this.appsProcessService = appsProcessService;
        this.appConfig = appConfig;
        this.processNamePipe = processNamePipe;
        this.MAX_LENGTH = 255;
        this.name = '';
        this.showSelectProcessDropdown = true;
        this.showSelectApplicationDropdown = false;
        this.processFilterSelector = true;
        this.start = new EventEmitter();
        this.cancel = new EventEmitter();
        this.error = new EventEmitter();
        this.processDefinitionSelection = new EventEmitter();
        this.applicationSelection = new EventEmitter();
        this.processDefinitions = [];
        this.maxProcessNameLength = this.MAX_LENGTH;
        this.applications = [];
        this.isProcessDefinitionsLoading = true;
        this.isAppsLoading = true;
        this.onDestroy$ = new Subject();
    }
    ngOnInit() {
        this.processNameInput = new FormControl('', [Validators.required, Validators.maxLength(this.maxProcessNameLength), Validators.pattern('^[^\\s]+(\\s+[^\\s]+)*$')]);
        this.processDefinitionInput = new FormControl();
        this.load();
        this.filteredProcessesDefinitions$ = this.processDefinitionInput.valueChanges
            .pipe(map((value) => this._filter(value)), takeUntil(this.onDestroy$));
        this.activitiContentService.getAlfrescoRepositories().subscribe((repoList) => {
            if (repoList && repoList[0]) {
                const alfrescoRepository = repoList[0];
                this.alfrescoRepositoryName = `alfresco-${alfrescoRepository.id}-${alfrescoRepository.name}`;
            }
        });
    }
    ngOnDestroy() {
        this.onDestroy$.next(true);
        this.onDestroy$.complete();
    }
    ngOnChanges(changes) {
        if (changes['values'] && changes['values'].currentValue) {
            this.moveNodeFromCStoPS();
        }
        if (this.isAppIdChanged(changes)) {
            this.appId = changes['appId'].currentValue;
            this.load();
        }
        if (this.isProcessDefinitionChanged(changes)) {
            this.processDefinitionName = changes['processDefinitionName'].currentValue;
            this.filterProcessDefinitionByName();
        }
    }
    isAppIdChanged(changes) {
        return changes['appId'] && changes['appId'].currentValue && changes['appId'].currentValue !== changes['appId'].previousValue;
    }
    isProcessDefinitionChanged(changes) {
        return changes['processDefinitionName'] && changes['processDefinitionName'].currentValue &&
            changes['processDefinitionName'].currentValue !== changes['processDefinitionName'].previousValue;
    }
    _filter(value) {
        if (value !== null && value !== undefined) {
            const filterValue = value.toLowerCase();
            const filteredProcess = this.processDefinitions.filter((option) => option.name.toLowerCase().includes(filterValue));
            if (this.processFilterSelector) {
                this.selectedProcessDef = this.getSelectedProcess(filterValue);
            }
            return filteredProcess;
        }
        return [];
    }
    getSelectedProcess(selectedProcess) {
        let processSelected = this.processDefinitions.find((process) => process.name.toLowerCase() === selectedProcess);
        if (!processSelected) {
            processSelected = new ProcessDefinitionRepresentation();
        }
        return processSelected;
    }
    load() {
        if (this.showSelectApplicationDropdown) {
            this.loadApps();
        }
        else {
            this.loadProcessDefinitions(this.appId);
        }
    }
    loadProcessDefinitions(appId) {
        this.isProcessDefinitionsLoading = true;
        this.resetSelectedProcessDefinition();
        this.activitiProcess.getProcessDefinitions(appId).pipe(map((processDefinitionRepresentations) => {
            let currentProcessDef;
            if (processDefinitionRepresentations.length === 1) {
                currentProcessDef = processDefinitionRepresentations[0];
            }
            if (this.processDefinitionName) {
                const filteredProcessDefinition = processDefinitionRepresentations.find((processDefinition) => {
                    return processDefinition.name === this.processDefinitionName;
                });
                if (filteredProcessDefinition) {
                    currentProcessDef = filteredProcessDefinition;
                }
            }
            return { currentProcessDef, processDefinitionRepresentations };
        })).subscribe((filteredProcessDefinitions) => {
            this.processDefinitions = filteredProcessDefinitions.processDefinitionRepresentations;
            this.processDefinitionSelectionChanged(filteredProcessDefinitions.currentProcessDef);
            this.processDefinitionInput.setValue(this.selectedProcessDef ? this.selectedProcessDef.name : '');
            this.isProcessDefinitionsLoading = false;
        }, (error) => {
            this.isProcessDefinitionsLoading = false;
            this.error.emit(error);
        });
    }
    filterProcessDefinitionByName() {
        if (this.processDefinitionName) {
            const filteredProcessDef = this.processDefinitions.find((processDefinition) => {
                return processDefinition.name === this.processDefinitionName;
            });
            if (filteredProcessDef) {
                this.processDefinitionSelectionChanged(filteredProcessDef);
                this.processDefinitionInput.setValue(this.selectedProcessDef ? this.selectedProcessDef.name : '');
            }
        }
    }
    loadApps() {
        this.isAppsLoading = true;
        this.appsProcessService
            .getDeployedApplications()
            .pipe(map((response) => {
            const applications = this.removeDefaultApps(response);
            let currentApplication;
            if (applications && applications.length === 1) {
                currentApplication = applications[0];
            }
            const filteredApp = applications.find(app => app.id === +this.appId);
            if (filteredApp) {
                currentApplication = filteredApp;
            }
            return { currentApplication, applications };
        }))
            .subscribe((filteredApps) => {
            this.applications = filteredApps.applications;
            this.selectedApplication = filteredApps.currentApplication;
            this.applicationSelection.emit(this.selectedApplication);
            this.toggleProcessNameAndDefinitionsDropdown();
            this.isAppsLoading = false;
            this.loadProcessDefinitionsBasedOnSelectedApp();
        }, (err) => {
            this.isAppsLoading = false;
            this.error.emit(err);
        });
    }
    loadProcessDefinitionsBasedOnSelectedApp() {
        if (this.selectedApplication && this.selectedApplication.id) {
            this.loadProcessDefinitions(this.selectedApplication ? this.selectedApplication.id : null);
        }
        else {
            this.isProcessDefinitionsLoading = false;
            this.resetProcessDefinitions();
        }
    }
    onAppSelectionChange(selectedApplication) {
        this.resetProcessDefinitions();
        this.selectedApplication = selectedApplication.value;
        this.applicationSelection.emit(this.selectedApplication);
        this.toggleProcessNameAndDefinitionsDropdown();
        this.loadProcessDefinitionsBasedOnSelectedApp();
    }
    isAppSelected() {
        return !!(this.selectedApplication && this.selectedApplication.id);
    }
    removeDefaultApps(apps) {
        return apps.filter((app) => app.id);
    }
    hasApplications() {
        return this.applications && this.applications.length > 0;
    }
    hasProcessDefinitions() {
        return this.processDefinitions && this.processDefinitions.length > 0;
    }
    isProcessDefinitionSelected() {
        return !!(this.selectedProcessDef && this.selectedProcessDef.id);
    }
    isProcessDefinitionsEmpty() {
        return this.processDefinitions.length === 0;
    }
    disableDropdownButton() {
        return this.showSelectApplicationDropdown && !this.isAppSelected();
    }
    getAlfrescoRepositoryName() {
        let alfrescoRepositoryName = this.appConfig.get(AppConfigValues.ALFRESCO_REPOSITORY_NAME);
        if (!alfrescoRepositoryName) {
            alfrescoRepositoryName = this.alfrescoRepositoryName;
        }
        return alfrescoRepositoryName + 'Alfresco';
    }
    moveNodeFromCStoPS() {
        const accountIdentifier = this.getAlfrescoRepositoryName();
        for (const key in this.values) {
            if (this.values.hasOwnProperty(key)) {
                const currentValue = Array.isArray(this.values[key]) ? this.values[key] : [this.values[key]];
                const contents = currentValue.filter((value) => value && value.isFile)
                    .map((content) => this.activitiContentService.applyAlfrescoNode(content, null, accountIdentifier));
                forkJoin(contents).subscribe((res) => {
                    this.movedNodeToPS = { [key]: [...res] };
                });
            }
        }
    }
    startProcess(outcome) {
        if (this.selectedProcessDef && this.selectedProcessDef.id && this.nameController.value) {
            const formValues = this.startForm ? this.startForm.form.values : undefined;
            this.activitiProcess.startProcess(this.selectedProcessDef.id, this.nameController.value, outcome, formValues, this.variables).subscribe((res) => {
                this.name = '';
                this.start.emit(res);
            }, (err) => {
                this.error.emit(err);
            });
        }
    }
    cancelStartProcess() {
        this.cancel.emit();
    }
    hasStartForm() {
        return this.selectedProcessDef && this.selectedProcessDef.hasStartForm;
    }
    isStartFormMissingOrValid() {
        if (this.startForm) {
            return this.startForm.form && this.startForm.form.isValid;
        }
        else {
            return true;
        }
    }
    validateForm() {
        return this.selectedProcessDef && this.selectedProcessDef.id && this.processNameInput.valid && this.isStartFormMissingOrValid();
    }
    resetSelectedProcessDefinition() {
        this.selectedProcessDef = undefined;
        if (this.processDefinitionInput) {
            this.processDefinitionInput.setValue('');
        }
    }
    resetProcessDefinitions() {
        this.processDefinitions = [];
        this.resetSelectedProcessDefinition();
    }
    onOutcomeClick(outcome) {
        this.startProcess(outcome);
    }
    reset() {
        this.resetSelectedProcessDefinition();
        this.name = '';
        if (this.startForm) {
            this.startForm.data = {};
        }
    }
    displayFn(process) {
        if (process) {
            let processName = process;
            if (typeof process !== 'string') {
                processName = process.name;
            }
            return processName;
        }
        return undefined;
    }
    displayDropdown(event) {
        event.stopPropagation();
        if (!this.inputAutocomplete.panelOpen) {
            this.processDefinitionInput.setValue('');
            this.inputAutocomplete.openPanel();
        }
        else {
            this.inputAutocomplete.closePanel();
        }
    }
    get nameController() {
        return this.processNameInput;
    }
    get processDefinitionController() {
        return this.processDefinitionInput;
    }
    toggleProcessNameAndDefinitionsDropdown() {
        if (!this.isAppSelected()) {
            this.processDefinitionController.disable();
            this.nameController.disable();
        }
        else {
            this.processDefinitionController.enable();
            this.nameController.enable();
        }
    }
    processDefinitionSelectionChanged(processDefinition) {
        if (processDefinition) {
            const processInstanceDetails = new ProcessInstance({ processDefinitionName: processDefinition.name });
            const processName = this.processNamePipe.transform(this.name, processInstanceDetails);
            this.processNameInput.setValue(processName);
            this.processNameInput.markAsDirty();
            this.processNameInput.markAsTouched();
            this.selectedProcessDef = processDefinition;
            this.processDefinitionSelection.emit(this.selectedProcessDef);
        }
        else {
            this.nameController.reset();
        }
    }
    isLoading() {
        return this.showSelectApplicationDropdown ? this.isAppsLoading : false;
    }
}
StartProcessInstanceComponent.ɵfac = function StartProcessInstanceComponent_Factory(t) { return new (t || StartProcessInstanceComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ProcessService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.ActivitiContentService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.AppsProcessService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.AppConfigService), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.ProcessNamePipe)); };
StartProcessInstanceComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: StartProcessInstanceComponent, selectors: [["adf-start-process"]], viewQuery: function StartProcessInstanceComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c0, true);
        ɵngcc0.ɵɵviewQuery(MatAutocompleteTrigger, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.startForm = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.inputAutocomplete = _t.first);
    } }, inputs: { name: "name", showSelectProcessDropdown: "showSelectProcessDropdown", showSelectApplicationDropdown: "showSelectApplicationDropdown", processFilterSelector: "processFilterSelector", appId: "appId", processDefinitionName: "processDefinitionName", title: "title", variables: "variables", values: "values" }, outputs: { start: "start", cancel: "cancel", error: "error", processDefinitionSelection: "processDefinitionSelection", applicationSelection: "applicationSelection" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 5, vars: 3, consts: [[4, "ngIf", "ngIfThen", "ngIfElse"], ["showLoadingTemplate", ""], ["showStartProcessTemplate", ""], [1, "adf-start-process-loading"], [4, "ngIf", "ngIfElse"], ["showEmptyTemplate", ""], [1, "adf-start-process"], ["class", "adf-title", 4, "ngIf"], [1, "content"], [1, "adf-start-process-definition-container"], ["class", "adf-start-process-app-list", 3, "floatLabel", 4, "ngIf"], [1, "adf-process-input-container", 3, "floatLabel"], ["type", "text", "matInput", "", "id", "processDefinitionName", 3, "formControl", "matAutocomplete"], ["inputAutocomplete", ""], [1, "adf-process-input-autocomplete"], ["id", "processDefinitionOptions", 3, "displayWith"], ["auto", "matAutocomplete"], [3, "value", "click", 4, "ngFor", "ngForOf"], ["showProcessDefLoadingTemplate", ""], ["matInput", "", "id", "processName", "required", "", 3, "formControl"], [4, "ngIf"], ["showStartFormLoadingTemplate", ""], ["class", "mat-content-actions", 4, "ngIf"], [1, "adf-title"], [1, "adf-start-process-app-list", 3, "floatLabel"], ["data-automation-id", "adf-start-process-apps-drop-down", 3, "placeholder", "ngModel", "selectionChange", "ngModelChange"], [3, "value", 4, "ngFor", "ngForOf"], [3, "value"], [3, "value", "click"], ["id", "adf-select-process-dropdown", "mat-icon-button", "", 3, "disabled", "click", 4, "ngIf"], ["id", "adf-select-process-dropdown", "mat-icon-button", "", 3, "disabled", "click"], ["id", "adf-select-process-spinner", 3, "diameter"], ["emptyProcessDefTemplate", ""], ["noStartFormTemplate", ""], [3, "data", "disableStartProcessButton", "processDefinitionId", "showRefreshButton", "outcomeClick"], ["startForm", ""], ["adf-form-custom-button", "", "mat-button", "", "id", "cancel_process", 3, "click"], [1, "adf-start-process-empty-template", 3, "icon", "title"], [1, "mat-content-actions"], ["mat-button", "", "id", "cancel_process", 3, "click", 4, "ngIf"], ["color", "primary", "mat-button", "", "data-automation-id", "btn-start", "id", "button-start", "class", "btn-start", 3, "disabled", "click", 4, "ngIf"], ["mat-button", "", "id", "cancel_process", 3, "click"], ["color", "primary", "mat-button", "", "data-automation-id", "btn-start", "id", "button-start", 1, "btn-start", 3, "disabled", "click"]], template: function StartProcessInstanceComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, StartProcessInstanceComponent_ng_container_0_Template, 1, 0, "ng-container", 0);
        ɵngcc0.ɵɵtemplate(1, StartProcessInstanceComponent_ng_template_1_Template, 1, 0, "ng-template", null, 1, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵtemplate(3, StartProcessInstanceComponent_ng_template_3_Template, 3, 2, "ng-template", null, 2, ɵngcc0.ɵɵtemplateRefExtractor);
    } if (rf & 2) {
        const _r1 = ɵngcc0.ɵɵreference(2);
        const _r3 = ɵngcc0.ɵɵreference(4);
        ɵngcc0.ɵɵproperty("ngIf", ctx.isLoading())("ngIfThen", _r1)("ngIfElse", _r3);
    } }, directives: [ɵngcc4.NgIf, ɵngcc5.MatSpinner, ɵngcc6.MatFormField, ɵngcc6.MatLabel, ɵngcc7.MatInput, ɵngcc8.DefaultValueAccessor, ɵngcc9.MatAutocompleteTrigger, ɵngcc8.NgControlStatus, ɵngcc8.FormControlDirective, ɵngcc9.MatAutocomplete, ɵngcc4.NgForOf, ɵngcc8.RequiredValidator, ɵngcc10.MatSelect, ɵngcc8.NgModel, ɵngcc11.MatOption, ɵngcc12.MatButton, ɵngcc13.MatIcon, ɵngcc6.MatError, ɵngcc14.StartFormComponent, ɵngcc2.StartFormCustomButtonDirective, ɵngcc2.EmptyContentComponent], pipes: [ɵngcc15.TranslatePipe, ɵngcc4.AsyncPipe, ɵngcc4.UpperCasePipe], styles: [".adf-start-process{margin-left:auto;margin-right:auto;margin-top:10px;width:96%}.adf-start-process mat-form-field{width:100%}.adf-start-process .mat-form-field-label{color:var(--theme-colors-mat-grey-dark)}.adf-start-process .mat-content-actions{text-align:right}.adf-start-process .mat-button{text-transform:uppercase!important}.adf-title{padding-bottom:1.25em}.adf-process-input-container mat-form-field{width:100%}.adf-process-input-autocomplete{display:flex}.adf-process-input-autocomplete button{position:absolute;right:-14px;top:0}.adf-process-input-autocomplete mat-spinner{position:absolute;right:-1px;top:0}.adf-start-form-container .mat-card{box-shadow:none!important;padding:0!important}.adf-start-form-actions{text-align:right!important}.adf-start-process-definition-container{align-items:baseline;display:flex;flex-direction:row;justify-content:space-around}.adf-start-process-app-list{margin-right:10px}@media (max-width:600px){.adf-start-process{margin-left:auto;margin-right:auto;width:90%}}.adf-start-process-loading{margin-left:calc(50% - 50px);margin-right:calc(50% - 50px)}"], encapsulation: 2 });
StartProcessInstanceComponent.ctorParameters = () => [
    { type: ProcessService },
    { type: ActivitiContentService },
    { type: AppsProcessService },
    { type: AppConfigService },
    { type: ProcessNamePipe }
];
StartProcessInstanceComponent.propDecorators = {
    appId: [{ type: Input }],
    title: [{ type: Input }],
    processDefinitionName: [{ type: Input }],
    variables: [{ type: Input }],
    values: [{ type: Input }],
    name: [{ type: Input }],
    showSelectProcessDropdown: [{ type: Input }],
    showSelectApplicationDropdown: [{ type: Input }],
    processFilterSelector: [{ type: Input }],
    start: [{ type: Output }],
    cancel: [{ type: Output }],
    error: [{ type: Output }],
    processDefinitionSelection: [{ type: Output }],
    applicationSelection: [{ type: Output }],
    startForm: [{ type: ViewChild, args: ['startForm',] }],
    inputAutocomplete: [{ type: ViewChild, args: [MatAutocompleteTrigger,] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(StartProcessInstanceComponent, [{
        type: Component,
        args: [{
                selector: 'adf-start-process',
                template: "\n<ng-container *ngIf=\"isLoading(); then showLoadingTemplate; else showStartProcessTemplate\"></ng-container>\n    <ng-template #showLoadingTemplate>\n        <mat-spinner class=\"adf-start-process-loading\"></mat-spinner>\n    </ng-template>\n<ng-template #showStartProcessTemplate>\n    <ng-container *ngIf=\"hasApplications() || hasProcessDefinitions() ; else showEmptyTemplate\">\n        <div class=\"adf-start-process\">\n            <div class=\"adf-title\" *ngIf=\"title\">{{ title | translate}}</div>\n            <div class=\"content\">\n                <div class=\"adf-start-process-definition-container\">\n                    <mat-form-field *ngIf=\"showSelectApplicationDropdown\" [floatLabel]=\"'always'\" class=\"adf-start-process-app-list\">\n                        <mat-select\n                            placeholder=\"{{ 'ADF_PROCESS_LIST.START_PROCESS.FORM.LABEL.SELECT_APPLICATION' | translate }}\"\n                            (selectionChange)=\"onAppSelectionChange($event)\"\n                            [(ngModel)]=\"selectedApplication\"\n                            data-automation-id=\"adf-start-process-apps-drop-down\">\n                            <mat-option \n                                *ngFor=\"let application of applications\"\n                                [value]=\"application\"\n                                [attr.data-automation-id]=\"'adf-start-process-apps-option-' + application.name\">\n                                {{ application.name }}\n                            </mat-option>\n                        </mat-select>\n                    </mat-form-field>\n                    <mat-form-field class=\"adf-process-input-container\" [floatLabel]=\"'always'\">\n                        <mat-label>{{'ADF_PROCESS_LIST.START_PROCESS.FORM.LABEL.TYPE' | translate}}</mat-label>\n                        <input\n                            type=\"text\"\n                            matInput\n                            [formControl]=\"processDefinitionInput\"\n                            [matAutocomplete]=\"auto\"\n                            id=\"processDefinitionName\"\n                            #inputAutocomplete>\n                        <div class=\"adf-process-input-autocomplete\">\n                            <mat-autocomplete\n                                #auto=\"matAutocomplete\"\n                                id=\"processDefinitionOptions\"\n                                [displayWith]=\"displayFn\">\n                                <mat-option *ngFor=\"let processDef of filteredProcessesDefinitions$ | async\" [value]=\"processDef.name\"\n                                (click)=\"processDefinitionSelectionChanged(processDef)\">\n                                    {{ processDef.name }}\n                                </mat-option>\n                            </mat-autocomplete>\n                            <ng-container *ngIf=\"!isProcessDefinitionsLoading ; else showProcessDefLoadingTemplate\">\n                                <button\n                                    id=\"adf-select-process-dropdown\"\n                                    *ngIf=\"showSelectProcessDropdown\"\n                                    mat-icon-button\n                                    (click)=\"displayDropdown($event)\"\n                                    [disabled]=\"disableDropdownButton()\">\n                                    <mat-icon>arrow_drop_down</mat-icon>\n                                </button>\n                            </ng-container>\n                            <ng-template #showProcessDefLoadingTemplate>\n                                <mat-spinner id=\"adf-select-process-spinner\" [diameter]=\"20\"></mat-spinner>\n                            </ng-template>\n                        </div>\n                    </mat-form-field>\n                </div>\n                <mat-form-field class=\"adf-process-input-container\" [floatLabel]=\"'always'\">\n                    <mat-label>{{'ADF_PROCESS_LIST.START_PROCESS.FORM.LABEL.NAME' | translate}}</mat-label>\n                    <input\n                        matInput\n                        [formControl]=\"processNameInput\"\n                        id=\"processName\"\n                        required/>\n                    <mat-error *ngIf=\"nameController.hasError('maxlength')\">\n                        {{ 'ADF_PROCESS_LIST.START_PROCESS.ERROR.MAXIMUM_LENGTH' | translate : { characters : maxProcessNameLength } }}\n                    </mat-error>\n                    <mat-error *ngIf=\"nameController.hasError('required')\">\n                        {{ 'ADF_PROCESS_LIST.START_PROCESS.ERROR.PROCESS_NAME_REQUIRED' | translate }}\n                    </mat-error>\n                    <mat-error *ngIf=\"nameController.hasError('pattern')\">\n                        {{ 'ADF_PROCESS_LIST.START_PROCESS.ERROR.SPACE_VALIDATOR' | translate }}\n                    </mat-error>\n                </mat-form-field>\n        \n                <ng-container *ngIf=\"!isProcessDefinitionsLoading ; else showStartFormLoadingTemplate\">\n                    <ng-container *ngIf=\"isProcessDefinitionSelected() ; else emptyProcessDefTemplate\">\n                        <ng-container  *ngIf=\"hasStartForm(); else noStartFormTemplate\">\n                            <adf-start-form\n                                #startForm\n                                [data]=\"movedNodeToPS\"\n                                [disableStartProcessButton]=\"processNameInput.invalid\"\n                                [processDefinitionId]=\"selectedProcessDef.id\"\n                                (outcomeClick)=\"onOutcomeClick($event)\"\n                                [showRefreshButton]=\"false\">\n                                <button\n                                    adf-form-custom-button\n                                    mat-button\n                                    (click)=\"cancelStartProcess()\"\n                                    id=\"cancel_process\">\n                                    {{'ADF_PROCESS_LIST.START_PROCESS.FORM.ACTION.CANCEL'| translate | uppercase}}\n                                </button>\n                            </adf-start-form>\n                        </ng-container>\n                        <ng-template #noStartFormTemplate>\n                            <adf-empty-content \n                                class=\"adf-start-process-empty-template\"\n                                [icon]=\"'assessment'\"\n                                [title]=\"'ADF_PROCESS_LIST.START_PROCESS.NO_START_FORM'  | translate\">\n                            </adf-empty-content>\n                        </ng-template>\n                    </ng-container>\n                    <ng-template #emptyProcessDefTemplate>\n                        <adf-empty-content class=\"adf-start-process-empty-template\"\n                            [icon]=\"'assessment'\"\n                            [title]=\"'ADF_PROCESS_LIST.START_PROCESS.NO_PROCESS_DEF_SELECTED'  | translate\">\n                        </adf-empty-content>\n                    </ng-template>\n                </ng-container>\n                <ng-template #showStartFormLoadingTemplate>\n                    <mat-spinner class=\"adf-start-process-loading\"></mat-spinner>\n                </ng-template>\n            </div>\n            <div class=\"mat-content-actions\" *ngIf=\"!hasStartForm()\">\n                <button\n                    mat-button\n                    *ngIf=\"!hasStartForm()\"\n                    (click)=\"cancelStartProcess()\"\n                    id=\"cancel_process\">\n                    {{'ADF_PROCESS_LIST.START_PROCESS.FORM.ACTION.CANCEL'| translate | uppercase}}\n                </button>\n                <button\n                    color=\"primary\"\n                    mat-button\n                    *ngIf=\"!hasStartForm()\"\n                    [disabled]=\"!validateForm()\"\n                    (click)=\"startProcess()\"\n                    data-automation-id=\"btn-start\"\n                    id=\"button-start\"\n                    class=\"btn-start\">\n                    {{'ADF_PROCESS_LIST.START_PROCESS.FORM.ACTION.START' | translate | uppercase}}\n                </button>\n            </div>\n        </div>\n    </ng-container>\n        <ng-template #showEmptyTemplate>\n            <adf-empty-content class=\"adf-start-process-empty-template\"\n                [icon]=\"'assessment'\"\n                [title]=\"'ADF_PROCESS_LIST.START_PROCESS.NO_PROCESS_DEFINITIONS' | translate\">\n            </adf-empty-content>\n        </ng-template>    \n</ng-template>\n",
                encapsulation: ViewEncapsulation.None,
                styles: [".adf-start-process{margin-left:auto;margin-right:auto;margin-top:10px;width:96%}.adf-start-process mat-form-field{width:100%}.adf-start-process .mat-form-field-label{color:var(--theme-colors-mat-grey-dark)}.adf-start-process .mat-content-actions{text-align:right}.adf-start-process .mat-button{text-transform:uppercase!important}.adf-title{padding-bottom:1.25em}.adf-process-input-container mat-form-field{width:100%}.adf-process-input-autocomplete{display:flex}.adf-process-input-autocomplete button{position:absolute;right:-14px;top:0}.adf-process-input-autocomplete mat-spinner{position:absolute;right:-1px;top:0}.adf-start-form-container .mat-card{box-shadow:none!important;padding:0!important}.adf-start-form-actions{text-align:right!important}.adf-start-process-definition-container{align-items:baseline;display:flex;flex-direction:row;justify-content:space-around}.adf-start-process-app-list{margin-right:10px}@media (max-width:600px){.adf-start-process{margin-left:auto;margin-right:auto;width:90%}}.adf-start-process-loading{margin-left:calc(50% - 50px);margin-right:calc(50% - 50px)}"]
            }]
    }], function () { return [{ type: ɵngcc1.ProcessService }, { type: ɵngcc2.ActivitiContentService }, { type: ɵngcc2.AppsProcessService }, { type: ɵngcc2.AppConfigService }, { type: ɵngcc3.ProcessNamePipe }]; }, { name: [{
            type: Input
        }], showSelectProcessDropdown: [{
            type: Input
        }], showSelectApplicationDropdown: [{
            type: Input
        }], processFilterSelector: [{
            type: Input
        }], start: [{
            type: Output
        }], cancel: [{
            type: Output
        }], error: [{
            type: Output
        }], processDefinitionSelection: [{
            type: Output
        }], applicationSelection: [{
            type: Output
        }], appId: [{
            type: Input
        }], processDefinitionName: [{
            type: Input
        }], title: [{
            type: Input
        }], variables: [{
            type: Input
        }], values: [{
            type: Input
        }], startForm: [{
            type: ViewChild,
            args: ['startForm']
        }], inputAutocomplete: [{
            type: ViewChild,
            args: [MatAutocompleteTrigger]
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,