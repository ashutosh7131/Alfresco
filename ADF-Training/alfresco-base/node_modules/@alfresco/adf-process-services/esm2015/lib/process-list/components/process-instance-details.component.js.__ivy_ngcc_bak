/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { LogService } from '@alfresco/adf-core';
import { DatePipe } from '@angular/common';
import { Component, EventEmitter, Input, Output, ViewChild } from '@angular/core';
import { ProcessService } from './../services/process.service';
import { ProcessInstanceHeaderComponent } from './process-instance-header.component';
import { ProcessInstanceTasksComponent } from './process-instance-tasks.component';
export class ProcessInstanceDetailsComponent {
    constructor(activitiProcess, logService) {
        this.activitiProcess = activitiProcess;
        this.logService = logService;
        this.showTitle = true;
        this.showRefreshButton = true;
        this.processCancelled = new EventEmitter();
        this.error = new EventEmitter();
        this.taskClick = new EventEmitter();
        this.showProcessDiagram = new EventEmitter();
    }
    ngOnChanges(changes) {
        const processInstanceId = changes['processInstanceId'];
        if (processInstanceId && !processInstanceId.currentValue) {
            this.reset();
            return;
        }
        if (processInstanceId && processInstanceId.currentValue) {
            this.load(processInstanceId.currentValue);
            return;
        }
    }
    reset() {
        this.processInstanceDetails = null;
    }
    load(processId) {
        if (processId) {
            this.activitiProcess.getProcess(processId).subscribe((res) => {
                this.processInstanceDetails = res;
            });
        }
    }
    isRunning() {
        return this.processInstanceDetails && !this.processInstanceDetails.ended;
    }
    cancelProcess() {
        this.activitiProcess.cancelProcess(this.processInstanceId).subscribe((data) => {
            this.processCancelled.emit(data);
        }, (err) => {
            this.error.emit(err);
        });
    }
    onTaskClicked(event) {
        this.taskClick.emit(event);
    }
    getProcessNameOrDescription(dateFormat) {
        let name = '';
        if (this.processInstanceDetails) {
            name = this.processInstanceDetails.name ||
                this.processInstanceDetails.processDefinitionName + ' - ' + this.getFormatDate(this.processInstanceDetails.started, dateFormat);
        }
        return name;
    }
    getFormatDate(value, format) {
        const datePipe = new DatePipe('en-US');
        try {
            return datePipe.transform(value, format);
        }
        catch (err) {
            this.logService.error(`ProcessListInstanceHeader: error parsing date ${value} to format ${format}`);
        }
    }
    onShowProcessDiagram() {
        this.showProcessDiagram.emit({ value: this.processInstanceId });
    }
}
ProcessInstanceDetailsComponent.decorators = [
    { type: Component, args: [{
                selector: 'adf-process-instance-details',
                template: "<div *ngIf=\"!processInstanceDetails\">{{ 'ADF_PROCESS_LIST.DETAILS.MESSAGES.NONE'|translate }}</div>\n<mat-card *ngIf=\"processInstanceDetails\">\n    <mat-card-header>\n        <mat-card-title>{{ getProcessNameOrDescription('medium') }}</mat-card-title>\n    </mat-card-header>\n    <mat-card-content>\n        <adf-process-instance-header\n            #processInstanceHeader\n            [processInstance]=\"processInstanceDetails\"\n            (showProcessDiagram)=\"onShowProcessDiagram()\">\n        </adf-process-instance-header>\n\n        <button\n            class=\"adf-in-medias-res-button\"\n            mat-button id=\"show-diagram-button\"\n            type=\"button\"\n            mat-button mat-raised-button\n            [disabled]=\"!isRunning()\"\n            (click)=\"onShowProcessDiagram()\">{{ 'ADF_PROCESS_LIST.DETAILS.BUTTON.SHOW_DIAGRAM' | translate }}</button>\n\n        <mat-card>\n            <mat-card-content>\n                <adf-process-instance-tasks\n                    #processInstanceTasks\n                    [processInstanceDetails]=\"processInstanceDetails\"\n                    (taskClick)=\"onTaskClicked($event)\">\n                </adf-process-instance-tasks>\n            </mat-card-content>\n        </mat-card>\n\n        <div data-automation-id=\"header-status\" *ngIf=\"isRunning()\" class=\"adf-in-medias-res-button\">\n            <button mat-button type=\"button\" (click)=\"cancelProcess()\">{{ 'ADF_PROCESS_LIST.DETAILS.BUTTON.CANCEL' | translate }}</button>\n        </div>\n\n        <mat-card>\n            <mat-card-content>\n                <adf-process-instance-comments #activitiComments\n                    [readOnly]=\"false\"\n                    [processInstanceId]=\"processInstanceDetails.id\">\n                </adf-process-instance-comments>\n            </mat-card-content>\n        </mat-card>\n\n    </mat-card-content>\n</mat-card>\n",
                styles: [":host{width:100%}.activiti-process-container{min-height:100px;overflow:visible;padding:10px;width:100%}.adf-comments-dialog{position:fixed;top:50%;transform:translateY(-50%);width:40%}.adf-in-medias-res-button{margin:16px 0}"]
            },] }
];
ProcessInstanceDetailsComponent.ctorParameters = () => [
    { type: ProcessService },
    { type: LogService }
];
ProcessInstanceDetailsComponent.propDecorators = {
    processInstanceId: [{ type: Input }],
    processInstanceHeader: [{ type: ViewChild, args: ['processInstanceHeader',] }],
    tasksList: [{ type: ViewChild, args: ['processInstanceTasks',] }],
    showTitle: [{ type: Input }],
    showRefreshButton: [{ type: Input }],
    processCancelled: [{ type: Output }],
    error: [{ type: Output }],
    taskClick: [{ type: Output }],
    showProcessDiagram: [{ type: Output }]
};
//# sourceMappingURL=data:application/json;base64,