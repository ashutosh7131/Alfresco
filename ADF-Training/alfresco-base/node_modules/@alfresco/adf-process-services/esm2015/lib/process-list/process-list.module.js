/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { CommonModule } from '@angular/common';
import { NgModule } from '@angular/core';
import { FlexLayoutModule } from '@angular/flex-layout';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { CoreModule } from '@alfresco/adf-core';
import { MaterialModule } from '../material.module';
import { ProcessCommentsModule } from '../process-comments/process-comments.module';
import { TaskListModule } from '../task-list/task-list.module';
import { PeopleModule } from '../people/people.module';
import { ContentWidgetModule } from '../content-widget/content-widget.module';
import { ProcessAuditDirective } from './components/process-audit.directive';
import { ProcessFiltersComponent } from './components/process-filters.component';
import { ProcessInstanceDetailsComponent } from './components/process-instance-details.component';
import { ProcessInstanceHeaderComponent } from './components/process-instance-header.component';
import { ProcessInstanceTasksComponent } from './components/process-instance-tasks.component';
import { ProcessInstanceListComponent } from './components/process-list.component';
import { StartProcessInstanceComponent } from './components/start-process.component';
import { FormModule } from '../form/form.module';
import { ProcessNamePipe } from '../pipes/process-name.pipe';
import * as ɵngcc0 from '@angular/core';
export class ProcessListModule {
}
ProcessListModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: ProcessListModule });
ProcessListModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function ProcessListModule_Factory(t) { return new (t || ProcessListModule)(); }, providers: [
        ProcessNamePipe
    ], imports: [[
            CommonModule,
            MaterialModule,
            FlexLayoutModule,
            FormsModule,
            ReactiveFormsModule,
            CoreModule,
            TaskListModule,
            PeopleModule,
            ContentWidgetModule,
            ProcessCommentsModule,
            FormModule
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ProcessListModule, { declarations: function () { return [ProcessInstanceListComponent,
        ProcessFiltersComponent,
        ProcessInstanceDetailsComponent,
        ProcessAuditDirective,
        ProcessInstanceHeaderComponent,
        ProcessInstanceTasksComponent,
        StartProcessInstanceComponent]; }, imports: function () { return [CommonModule,
        MaterialModule,
        FlexLayoutModule,
        FormsModule,
        ReactiveFormsModule,
        CoreModule,
        TaskListModule,
        PeopleModule,
        ContentWidgetModule,
        ProcessCommentsModule,
        FormModule]; }, exports: function () { return [ProcessInstanceListComponent,
        ProcessFiltersComponent,
        ProcessInstanceDetailsComponent,
        ProcessAuditDirective,
        ProcessInstanceHeaderComponent,
        ProcessInstanceTasksComponent,
        StartProcessInstanceComponent]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ProcessListModule, [{
        type: NgModule,
        args: [{
                imports: [
                    CommonModule,
                    MaterialModule,
                    FlexLayoutModule,
                    FormsModule,
                    ReactiveFormsModule,
                    CoreModule,
                    TaskListModule,
                    PeopleModule,
                    ContentWidgetModule,
                    ProcessCommentsModule,
                    FormModule
                ],
                declarations: [
                    ProcessInstanceListComponent,
                    ProcessFiltersComponent,
                    ProcessInstanceDetailsComponent,
                    ProcessAuditDirective,
                    ProcessInstanceHeaderComponent,
                    ProcessInstanceTasksComponent,
                    StartProcessInstanceComponent
                ],
                exports: [
                    ProcessInstanceListComponent,
                    ProcessFiltersComponent,
                    ProcessInstanceDetailsComponent,
                    ProcessAuditDirective,
                    ProcessInstanceHeaderComponent,
                    ProcessInstanceTasksComponent,
                    StartProcessInstanceComponent
                ],
                providers: [
                    ProcessNamePipe
                ]
            }]
    }], null, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvY2Vzcy1saXN0Lm1vZHVsZS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vaG9tZS90cmF2aXMvYnVpbGQvQWxmcmVzY28vYWxmcmVzY28tbmcyLWNvbXBvbmVudHMvbGliL3Byb2Nlc3Mtc2VydmljZXMvc3JjL2xpYi9wcm9jZXNzLWxpc3QvcHJvY2Vzcy1saXN0Lm1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBRUgsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQy9DLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDekMsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDeEQsT0FBTyxFQUFFLFdBQVcsRUFBRSxtQkFBbUIsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ2xFLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUNoRCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDcEQsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sNkNBQTZDLENBQUM7QUFDcEYsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBQy9ELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUN2RCxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSx5Q0FBeUMsQ0FBQztBQUM5RSxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSxzQ0FBc0MsQ0FBQztBQUM3RSxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSx3Q0FBd0MsQ0FBQztBQUNqRixPQUFPLEVBQUUsK0JBQStCLEVBQUUsTUFBTSxpREFBaUQsQ0FBQztBQUNsRyxPQUFPLEVBQUUsOEJBQThCLEVBQUUsTUFBTSxnREFBZ0QsQ0FBQztBQUNoRyxPQUFPLEVBQUUsNkJBQTZCLEVBQUUsTUFBTSwrQ0FBK0MsQ0FBQztBQUM5RixPQUFPLEVBQUUsNEJBQTRCLEVBQUUsTUFBTSxxQ0FBcUMsQ0FBQztBQUNuRixPQUFPLEVBQUUsNkJBQTZCLEVBQUUsTUFBTSxzQ0FBc0MsQ0FBQztBQUNyRixPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDakQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLDRCQUE0QixDQUFDOztBQXNDN0QsTUFBTSxPQUFPLGlCQUFpQjtBQUM5Qjs2Q0FyQ0MsUUFBUSxTQUFDO0NBQ04sT0FBTyxFQUFFLHNCQUNMLFlBQVksc0JBQ1osY0FBYyxzQkFDZCxnQkFBZ0Isc0JBQ2hCLFdBQVc7a0JBQ1g7YUFBbUI7Z0JBQ25CO0FBQVUsc0JBQ1Y7UUFBYztBQUNkLFlBQVk7U0FDWixtQkFBbUI7aUJBQ25CO2NBQXFCO1FBQ3JCLFVBQVU7VUFDYixrQkFDRDtPQUFZLEVBQUUsc0JBQ1Y7O0NBQTRCO1FBQzVCLHVCQUF1QixzQkFDdkIsK0JBQStCLHNCQUMvQixxQkFBcUIsc0JBQ3JCO0FBQThCLHNCQUM5QjtrQkFBNkIsc0JBQzdCOzRCQUE2QjtlQUNoQyxrQkFDRDtBQUFPLEVBQUUsc0JBQ0w7YUFBNEIsc0JBQzVCLHVCQUF1QixzQkFDdkI7dUJBQStCO3FCQUMvQjtnQkFBcUI7aUJBQ3JCO2tCQUE4QjtvQkFDOUI7O0dBQTZCLHNCQUM3Qjt5QkFBNkI7WUFDaEMsa0JBQ0QsU0FBUyxFQUFFLHNCQUNQLGVBQWU7V0FDbEIsY0FDSjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7MEJBQ0k7QUFBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IENvbW1vbk1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRmxleExheW91dE1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2ZsZXgtbGF5b3V0JztcbmltcG9ydCB7IEZvcm1zTW9kdWxlLCBSZWFjdGl2ZUZvcm1zTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHsgQ29yZU1vZHVsZSB9IGZyb20gJ0BhbGZyZXNjby9hZGYtY29yZSc7XG5pbXBvcnQgeyBNYXRlcmlhbE1vZHVsZSB9IGZyb20gJy4uL21hdGVyaWFsLm1vZHVsZSc7XG5pbXBvcnQgeyBQcm9jZXNzQ29tbWVudHNNb2R1bGUgfSBmcm9tICcuLi9wcm9jZXNzLWNvbW1lbnRzL3Byb2Nlc3MtY29tbWVudHMubW9kdWxlJztcbmltcG9ydCB7IFRhc2tMaXN0TW9kdWxlIH0gZnJvbSAnLi4vdGFzay1saXN0L3Rhc2stbGlzdC5tb2R1bGUnO1xuaW1wb3J0IHsgUGVvcGxlTW9kdWxlIH0gZnJvbSAnLi4vcGVvcGxlL3Blb3BsZS5tb2R1bGUnO1xuaW1wb3J0IHsgQ29udGVudFdpZGdldE1vZHVsZSB9IGZyb20gJy4uL2NvbnRlbnQtd2lkZ2V0L2NvbnRlbnQtd2lkZ2V0Lm1vZHVsZSc7XG5pbXBvcnQgeyBQcm9jZXNzQXVkaXREaXJlY3RpdmUgfSBmcm9tICcuL2NvbXBvbmVudHMvcHJvY2Vzcy1hdWRpdC5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgUHJvY2Vzc0ZpbHRlcnNDb21wb25lbnQgfSBmcm9tICcuL2NvbXBvbmVudHMvcHJvY2Vzcy1maWx0ZXJzLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBQcm9jZXNzSW5zdGFuY2VEZXRhaWxzQ29tcG9uZW50IH0gZnJvbSAnLi9jb21wb25lbnRzL3Byb2Nlc3MtaW5zdGFuY2UtZGV0YWlscy5jb21wb25lbnQnO1xuaW1wb3J0IHsgUHJvY2Vzc0luc3RhbmNlSGVhZGVyQ29tcG9uZW50IH0gZnJvbSAnLi9jb21wb25lbnRzL3Byb2Nlc3MtaW5zdGFuY2UtaGVhZGVyLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBQcm9jZXNzSW5zdGFuY2VUYXNrc0NvbXBvbmVudCB9IGZyb20gJy4vY29tcG9uZW50cy9wcm9jZXNzLWluc3RhbmNlLXRhc2tzLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBQcm9jZXNzSW5zdGFuY2VMaXN0Q29tcG9uZW50IH0gZnJvbSAnLi9jb21wb25lbnRzL3Byb2Nlc3MtbGlzdC5jb21wb25lbnQnO1xuaW1wb3J0IHsgU3RhcnRQcm9jZXNzSW5zdGFuY2VDb21wb25lbnQgfSBmcm9tICcuL2NvbXBvbmVudHMvc3RhcnQtcHJvY2Vzcy5jb21wb25lbnQnO1xuaW1wb3J0IHsgRm9ybU1vZHVsZSB9IGZyb20gJy4uL2Zvcm0vZm9ybS5tb2R1bGUnO1xuaW1wb3J0IHsgUHJvY2Vzc05hbWVQaXBlIH0gZnJvbSAnLi4vcGlwZXMvcHJvY2Vzcy1uYW1lLnBpcGUnO1xuXG5ATmdNb2R1bGUoe1xuICAgIGltcG9ydHM6IFtcbiAgICAgICAgQ29tbW9uTW9kdWxlLFxuICAgICAgICBNYXRlcmlhbE1vZHVsZSxcbiAgICAgICAgRmxleExheW91dE1vZHVsZSxcbiAgICAgICAgRm9ybXNNb2R1bGUsXG4gICAgICAgIFJlYWN0aXZlRm9ybXNNb2R1bGUsXG4gICAgICAgIENvcmVNb2R1bGUsXG4gICAgICAgIFRhc2tMaXN0TW9kdWxlLFxuICAgICAgICBQZW9wbGVNb2R1bGUsXG4gICAgICAgIENvbnRlbnRXaWRnZXRNb2R1bGUsXG4gICAgICAgIFByb2Nlc3NDb21tZW50c01vZHVsZSxcbiAgICAgICAgRm9ybU1vZHVsZVxuICAgIF0sXG4gICAgZGVjbGFyYXRpb25zOiBbXG4gICAgICAgIFByb2Nlc3NJbnN0YW5jZUxpc3RDb21wb25lbnQsXG4gICAgICAgIFByb2Nlc3NGaWx0ZXJzQ29tcG9uZW50LFxuICAgICAgICBQcm9jZXNzSW5zdGFuY2VEZXRhaWxzQ29tcG9uZW50LFxuICAgICAgICBQcm9jZXNzQXVkaXREaXJlY3RpdmUsXG4gICAgICAgIFByb2Nlc3NJbnN0YW5jZUhlYWRlckNvbXBvbmVudCxcbiAgICAgICAgUHJvY2Vzc0luc3RhbmNlVGFza3NDb21wb25lbnQsXG4gICAgICAgIFN0YXJ0UHJvY2Vzc0luc3RhbmNlQ29tcG9uZW50XG4gICAgXSxcbiAgICBleHBvcnRzOiBbXG4gICAgICAgIFByb2Nlc3NJbnN0YW5jZUxpc3RDb21wb25lbnQsXG4gICAgICAgIFByb2Nlc3NGaWx0ZXJzQ29tcG9uZW50LFxuICAgICAgICBQcm9jZXNzSW5zdGFuY2VEZXRhaWxzQ29tcG9uZW50LFxuICAgICAgICBQcm9jZXNzQXVkaXREaXJlY3RpdmUsXG4gICAgICAgIFByb2Nlc3NJbnN0YW5jZUhlYWRlckNvbXBvbmVudCxcbiAgICAgICAgUHJvY2Vzc0luc3RhbmNlVGFza3NDb21wb25lbnQsXG4gICAgICAgIFN0YXJ0UHJvY2Vzc0luc3RhbmNlQ29tcG9uZW50XG4gICAgXSxcbiAgICBwcm92aWRlcnM6IFtcbiAgICAgICAgUHJvY2Vzc05hbWVQaXBlXG4gICAgXVxufSlcbmV4cG9ydCBjbGFzcyBQcm9jZXNzTGlzdE1vZHVsZSB7XG59XG4iXX0=