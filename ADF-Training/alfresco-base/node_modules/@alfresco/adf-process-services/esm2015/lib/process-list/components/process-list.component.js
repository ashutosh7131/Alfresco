/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { DataTableSchema, CustomEmptyContentTemplateDirective, CustomLoadingContentTemplateDirective, AppConfigService, PaginationComponent, UserPreferencesService } from '@alfresco/adf-core';
import { Component, ContentChild, EventEmitter, Input, Output } from '@angular/core';
import { ProcessFilterParamRepresentationModel } from '../models/filter-process.model';
import { processPresetsDefaultModel } from '../models/process-preset.model';
import { ProcessService } from '../services/process.service';
import { BehaviorSubject } from 'rxjs';
import { finalize } from 'rxjs/operators';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../services/process.service';
import * as ɵngcc2 from '@alfresco/adf-core';
import * as ɵngcc3 from '@angular/common';
import * as ɵngcc4 from '@angular/material/progress-spinner';
import * as ɵngcc5 from '@ngx-translate/core';

function ProcessInstanceListComponent_ng_template_3_mat_progress_spinner_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "mat-progress-spinner", 3);
} }
function ProcessInstanceListComponent_ng_template_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, ProcessInstanceListComponent_ng_template_3_mat_progress_spinner_0_Template, 1, 0, "mat-progress-spinner", 2);
    ɵngcc0.ɵɵprojection(1);
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r1.customLoadingContent);
} }
function ProcessInstanceListComponent_ng_template_5_adf_empty_content_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "adf-empty-content", 5);
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵpipe(2, "translate");
} if (rf & 2) {
    const ctx_r4 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("title", ɵngcc0.ɵɵpipeBind1(1, 2, ctx_r4.requestNode ? "ADF_PROCESS_LIST.LIST.TITLE" : "ADF_PROCESS_LIST.FILTERS.MESSAGES.NONE"))("subtitle", ɵngcc0.ɵɵpipeBind1(2, 4, "ADF_PROCESS_LIST.LIST.SUBTITLE"));
} }
function ProcessInstanceListComponent_ng_template_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, ProcessInstanceListComponent_ng_template_5_adf_empty_content_0_Template, 3, 6, "adf-empty-content", 4);
    ɵngcc0.ɵɵprojection(1, 1);
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r2.customEmptyContent);
} }
const _c0 = [[["adf-custom-loading-content-template"]], [["adf-custom-empty-content-template"]]];
const _c1 = ["adf-custom-loading-content-template", "adf-custom-empty-content-template"];
export class ProcessInstanceListComponent extends DataTableSchema {
    constructor(processService, userPreferences, appConfig) {
        super(appConfig, ProcessInstanceListComponent.PRESET_KEY, processPresetsDefaultModel);
        this.processService = processService;
        this.userPreferences = userPreferences;
        this.page = 0;
        this.size = PaginationComponent.DEFAULT_PAGINATION.maxItems;
        this.multiselect = false;
        this.selectionMode = 'single';
        this.selectFirstRow = true;
        this.stickyHeader = false;
        this.showContextMenu = false;
        this.showRowContextMenu = new EventEmitter();
        this.resolverFn = null;
        this.rowClick = new EventEmitter();
        this.success = new EventEmitter();
        this.error = new EventEmitter();
        this.isLoading = true;
        this.rows = [];
        this.sorting = ['created', 'desc'];
        this.size = this.userPreferences.paginationSize;
        this.pagination = new BehaviorSubject({
            maxItems: this.size,
            skipCount: 0,
            totalItems: 0
        });
    }
    ngAfterContentInit() {
        this.createDatatableSchema();
        if (this.data && this.data.getColumns().length === 0) {
            this.data.setColumns(this.columns);
        }
        if (this.appId != null) {
            this.reload();
        }
    }
    ngOnChanges(changes) {
        if (this.isPropertyChanged(changes)) {
            if (this.isSortChanged(changes)) {
                this.sorting = this.sort ? this.sort.split('-') : this.sorting;
            }
            this.reload();
        }
        const presetColumnChanges = changes['presetColumn'];
        if (presetColumnChanges && !presetColumnChanges.firstChange) {
            this.columns = this.mergeJsonAndHtmlSchema();
        }
    }
    isSortChanged(changes) {
        const actualSort = changes['sort'];
        return actualSort && actualSort.currentValue && actualSort.currentValue !== actualSort.previousValue;
    }
    isPropertyChanged(changes) {
        let changed = false;
        const appId = changes['appId'];
        const processDefinitionId = changes['processDefinitionId'];
        const processInstanceId = changes['processInstanceId'];
        const state = changes['state'];
        const sort = changes['sort'];
        const page = changes['page'];
        const size = changes['size'];
        if (appId && appId.currentValue) {
            changed = true;
        }
        else if (processDefinitionId) {
            changed = true;
        }
        else if (processInstanceId) {
            changed = true;
        }
        else if (state && state.currentValue) {
            changed = true;
        }
        else if (sort && sort.currentValue) {
            changed = true;
        }
        else if (page && page.currentValue !== page.previousValue) {
            changed = true;
        }
        else if (size && size.currentValue !== size.previousValue) {
            changed = true;
        }
        return changed;
    }
    reload() {
        this.requestNode = this.createRequestNode();
        this.load(this.requestNode);
    }
    load(requestNode) {
        this.isLoading = true;
        this.processService.getProcesses(requestNode)
            .pipe(finalize(() => this.isLoading = false))
            .subscribe(response => {
            this.rows = response.data;
            this.selectFirst();
            this.success.emit(response);
            this.pagination.next({
                count: response.data.length,
                maxItems: this.size,
                skipCount: this.page * this.size,
                totalItems: response.total
            });
        }, error => {
            this.error.emit(error);
        });
    }
    selectFirst() {
        if (this.selectFirstRow) {
            if (!this.isListEmpty()) {
                const dataRow = this.rows[0];
                dataRow.isSelected = true;
                this.currentInstanceId = dataRow['id'];
            }
            else {
                this.currentInstanceId = null;
            }
        }
    }
    getCurrentId() {
        return this.currentInstanceId;
    }
    isListEmpty() {
        return !this.rows || this.rows.length === 0;
    }
    onRowClick(event) {
        const item = event;
        this.currentInstanceId = item.value.getValue('id');
        this.rowClick.emit(this.currentInstanceId);
    }
    onRowKeyUp(event) {
        if (event.detail.keyboardEvent.key === 'Enter') {
            event.preventDefault();
            this.currentInstanceId = event.detail.row.getValue('id');
            this.rowClick.emit(this.currentInstanceId);
        }
    }
    onShowRowContextMenu(event) {
        this.showRowContextMenu.emit(event);
    }
    createRequestNode() {
        return new ProcessFilterParamRepresentationModel({
            appDefinitionId: this.appId,
            processDefinitionId: this.processDefinitionId,
            processInstanceId: this.processInstanceId,
            state: this.state,
            sort: this.sort,
            page: this.page,
            size: this.size,
            start: 0
        });
    }
    updatePagination(params) {
        const needsReload = params.maxItems || params.skipCount;
        this.size = params.maxItems;
        this.page = this.currentPage(params.skipCount, params.maxItems);
        if (needsReload) {
            this.reload();
        }
    }
    currentPage(skipCount, maxItems) {
        return (skipCount && maxItems) ? Math.floor(skipCount / maxItems) : 0;
    }
}
ProcessInstanceListComponent.ɵfac = function ProcessInstanceListComponent_Factory(t) { return new (t || ProcessInstanceListComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ProcessService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.UserPreferencesService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.AppConfigService)); };
ProcessInstanceListComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ProcessInstanceListComponent, selectors: [["adf-process-instance-list"]], contentQueries: function ProcessInstanceListComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, CustomEmptyContentTemplateDirective, true);
        ɵngcc0.ɵɵcontentQuery(dirIndex, CustomLoadingContentTemplateDirective, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.customEmptyContent = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.customLoadingContent = _t.first);
    } }, inputs: { page: "page", size: "size", multiselect: "multiselect", selectionMode: "selectionMode", selectFirstRow: "selectFirstRow", stickyHeader: "stickyHeader", showContextMenu: "showContextMenu", resolverFn: "resolverFn", appId: "appId", processDefinitionId: "processDefinitionId", processInstanceId: "processInstanceId", state: "state", sort: "sort", data: "data" }, outputs: { showRowContextMenu: "showRowContextMenu", rowClick: "rowClick", success: "success", error: "error" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature], ngContentSelectors: _c1, decls: 6, vars: 10, consts: [[3, "data", "rows", "columns", "sorting", "loading", "stickyHeader", "selectionMode", "multiselect", "resolverFn", "contextMenu", "showRowContextMenu", "rowClick", "row-keyup"], ["dataTable", ""], ["class", "adf-process-list-loading-margin", "color", "primary", "mode", "indeterminate", 4, "ngIf"], ["color", "primary", "mode", "indeterminate", 1, "adf-process-list-loading-margin"], ["icon", "assessment", 3, "title", "subtitle", 4, "ngIf"], ["icon", "assessment", 3, "title", "subtitle"]], template: function ProcessInstanceListComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef(_c0);
        ɵngcc0.ɵɵelementStart(0, "adf-datatable", 0, 1);
        ɵngcc0.ɵɵlistener("showRowContextMenu", function ProcessInstanceListComponent_Template_adf_datatable_showRowContextMenu_0_listener($event) { return ctx.onShowRowContextMenu($event); })("rowClick", function ProcessInstanceListComponent_Template_adf_datatable_rowClick_0_listener($event) { return ctx.onRowClick($event); })("row-keyup", function ProcessInstanceListComponent_Template_adf_datatable_row_keyup_0_listener($event) { return ctx.onRowKeyUp($event); });
        ɵngcc0.ɵɵelementStart(2, "adf-loading-content-template");
        ɵngcc0.ɵɵtemplate(3, ProcessInstanceListComponent_ng_template_3_Template, 2, 1, "ng-template");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(4, "adf-no-content-template");
        ɵngcc0.ɵɵtemplate(5, ProcessInstanceListComponent_ng_template_5_Template, 2, 1, "ng-template");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("data", ctx.data)("rows", ctx.rows)("columns", ctx.columns)("sorting", ctx.sorting)("loading", ctx.isLoading)("stickyHeader", ctx.stickyHeader)("selectionMode", ctx.selectionMode)("multiselect", ctx.multiselect)("resolverFn", ctx.resolverFn)("contextMenu", ctx.showContextMenu);
    } }, directives: [ɵngcc2.DataTableComponent, ɵngcc2.LoadingContentTemplateDirective, ɵngcc2.NoContentTemplateDirective, ɵngcc3.NgIf, ɵngcc4.MatProgressSpinner, ɵngcc2.EmptyContentComponent], pipes: [ɵngcc5.TranslatePipe], styles: [".adf-process-list-loading-margin[_ngcontent-%COMP%]{margin-left:calc(50% - 50px);margin-right:calc(50% - 50px)}.no-content-message[_ngcontent-%COMP%]{color:#000;font-size:16px;font-weight:700;opacity:.54;text-align:center}"] });
ProcessInstanceListComponent.PRESET_KEY = 'adf-process-list.presets';
ProcessInstanceListComponent.ctorParameters = () => [
    { type: ProcessService },
    { type: UserPreferencesService },
    { type: AppConfigService }
];
ProcessInstanceListComponent.propDecorators = {
    customEmptyContent: [{ type: ContentChild, args: [CustomEmptyContentTemplateDirective,] }],
    customLoadingContent: [{ type: ContentChild, args: [CustomLoadingContentTemplateDirective,] }],
    appId: [{ type: Input }],
    processDefinitionId: [{ type: Input }],
    processInstanceId: [{ type: Input }],
    state: [{ type: Input }],
    sort: [{ type: Input }],
    page: [{ type: Input }],
    size: [{ type: Input }],
    data: [{ type: Input }],
    multiselect: [{ type: Input }],
    selectionMode: [{ type: Input }],
    selectFirstRow: [{ type: Input }],
    stickyHeader: [{ type: Input }],
    showContextMenu: [{ type: Input }],
    showRowContextMenu: [{ type: Output }],
    resolverFn: [{ type: Input }],
    rowClick: [{ type: Output }],
    success: [{ type: Output }],
    error: [{ type: Output }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ProcessInstanceListComponent, [{
        type: Component,
        args: [{
                selector: 'adf-process-instance-list',
                template: "<adf-datatable #dataTable\n    [data]=\"data\"\n    [rows]=\"rows\"\n    [columns]=\"columns\"\n    [sorting]=\"sorting\"\n    [loading]=\"isLoading\"\n    [stickyHeader]=\"stickyHeader\"\n    [selectionMode]=\"selectionMode\"\n    [multiselect]=\"multiselect\"\n    [resolverFn]=\"resolverFn\"\n    [contextMenu]=\"showContextMenu\"\n    (showRowContextMenu)=\"onShowRowContextMenu($event)\"\n    (rowClick)=\"onRowClick($event)\"\n    (row-keyup)=\"onRowKeyUp($any($event))\">\n    <adf-loading-content-template>\n        <ng-template>\n            <mat-progress-spinner\n                *ngIf=\"!customLoadingContent\"\n                class=\"adf-process-list-loading-margin\"\n                color=\"primary\"\n                mode=\"indeterminate\">\n            </mat-progress-spinner>\n            <ng-content select=\"adf-custom-loading-content-template\"></ng-content>\n        </ng-template>\n    </adf-loading-content-template>\n    <adf-no-content-template>\n        <ng-template>\n                <adf-empty-content *ngIf=\"!customEmptyContent\"\n                    icon=\"assessment\"\n                    [title]=\"(requestNode ? 'ADF_PROCESS_LIST.LIST.TITLE' : 'ADF_PROCESS_LIST.FILTERS.MESSAGES.NONE') | translate\"\n                    [subtitle]=\"'ADF_PROCESS_LIST.LIST.SUBTITLE'| translate\">\n                </adf-empty-content>\n            <ng-content select=\"adf-custom-empty-content-template\"></ng-content>\n        </ng-template>\n    </adf-no-content-template>\n</adf-datatable>\n",
                styles: [".adf-process-list-loading-margin{margin-left:calc(50% - 50px);margin-right:calc(50% - 50px)}.no-content-message{color:#000;font-size:16px;font-weight:700;opacity:.54;text-align:center}"]
            }]
    }], function () { return [{ type: ɵngcc1.ProcessService }, { type: ɵngcc2.UserPreferencesService }, { type: ɵngcc2.AppConfigService }]; }, { page: [{
            type: Input
        }], size: [{
            type: Input
        }], multiselect: [{
            type: Input
        }], selectionMode: [{
            type: Input
        }], selectFirstRow: [{
            type: Input
        }], stickyHeader: [{
            type: Input
        }], showContextMenu: [{
            type: Input
        }], showRowContextMenu: [{
            type: Output
        }], resolverFn: [{
            type: Input
        }], rowClick: [{
            type: Output
        }], success: [{
            type: Output
        }], error: [{
            type: Output
        }], customEmptyContent: [{
            type: ContentChild,
            args: [CustomEmptyContentTemplateDirective]
        }], customLoadingContent: [{
            type: ContentChild,
            args: [CustomLoadingContentTemplateDirective]
        }], appId: [{
            type: Input
        }], processDefinitionId: [{
            type: Input
        }], processInstanceId: [{
            type: Input
        }], state: [{
            type: Input
        }], sort: [{
            type: Input
        }], data: [{
            type: Input
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,