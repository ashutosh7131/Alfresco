/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { DownloadService } from '@alfresco/adf-core';
import { Directive, EventEmitter, Input, Output } from '@angular/core';
import { ProcessService } from './../services/process.service';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@alfresco/adf-core';
import * as ɵngcc2 from './../services/process.service';
const JSON_FORMAT = 'json';
const PDF_FORMAT = 'pdf';
export class ProcessAuditDirective {
    constructor(downloadService, processListService) {
        this.downloadService = downloadService;
        this.processListService = processListService;
        this.fileName = 'Audit';
        this.format = 'pdf';
        this.download = true;
        this.clicked = new EventEmitter();
        this.error = new EventEmitter();
    }
    ngOnChanges() {
        if (!this.isValidType()) {
            this.setDefaultFormatType();
        }
    }
    isValidType() {
        return this.format && (this.isJsonFormat() || this.isPdfFormat());
    }
    setDefaultFormatType() {
        this.format = PDF_FORMAT;
    }
    fetchAuditInfo() {
        if (this.isPdfFormat()) {
            this.processListService.fetchProcessAuditPdfById(this.processId).subscribe((blob) => {
                if (this.download) {
                    this.downloadService.downloadBlob(blob, this.fileName + '.pdf');
                }
                this.clicked.emit({ format: this.format, value: blob, fileName: this.fileName });
            }, (err) => this.error.emit(err));
        }
        else {
            this.processListService.fetchProcessAuditJsonById(this.processId).subscribe((res) => this.clicked.emit({ format: this.format, value: res, fileName: this.fileName }), (err) => this.error.emit(err));
        }
    }
    onClickAudit() {
        this.fetchAuditInfo();
    }
    isJsonFormat() {
        return this.format === JSON_FORMAT;
    }
    isPdfFormat() {
        return this.format === PDF_FORMAT;
    }
}
ProcessAuditDirective.ɵfac = function ProcessAuditDirective_Factory(t) { return new (t || ProcessAuditDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DownloadService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.ProcessService)); };
ProcessAuditDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ProcessAuditDirective, selectors: [["button", "adf-process-audit", ""]], hostAttrs: ["role", "button"], hostBindings: function ProcessAuditDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function ProcessAuditDirective_click_HostBindingHandler() { return ctx.onClickAudit(); });
    } }, inputs: { fileName: "fileName", format: "format", download: "download", processId: ["process-id", "processId"] }, outputs: { clicked: "clicked", error: "error" }, features: [ɵngcc0.ɵɵNgOnChangesFeature] });
ProcessAuditDirective.ctorParameters = () => [
    { type: DownloadService },
    { type: ProcessService }
];
ProcessAuditDirective.propDecorators = {
    processId: [{ type: Input, args: ['process-id',] }],
    fileName: [{ type: Input }],
    format: [{ type: Input }],
    download: [{ type: Input }],
    clicked: [{ type: Output }],
    error: [{ type: Output }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ProcessAuditDirective, [{
        type: Directive,
        args: [{
                selector: 'button[adf-process-audit]',
                host: {
                    'role': 'button',
                    '(click)': 'onClickAudit()'
                }
            }]
    }], function () { return [{ type: ɵngcc1.DownloadService }, { type: ɵngcc2.ProcessService }]; }, { fileName: [{
            type: Input
        }], format: [{
            type: Input
        }], download: [{
            type: Input
        }], clicked: [{
            type: Output
        }], error: [{
            type: Output
        }], processId: [{
            type: Input,
            args: ['process-id']
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,