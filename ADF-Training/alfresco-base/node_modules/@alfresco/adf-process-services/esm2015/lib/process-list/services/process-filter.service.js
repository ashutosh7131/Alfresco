import { AlfrescoApiService } from '@alfresco/adf-core';
import { Injectable } from '@angular/core';
import { Observable, from, forkJoin, throwError } from 'rxjs';
import { FilterProcessRepresentationModel } from '../models/filter-process.model';
import { map, catchError } from 'rxjs/operators';
import { UserFiltersApi } from '@alfresco/js-api';
import * as i0 from "@angular/core";
import * as i1 from "@alfresco/adf-core";
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@alfresco/adf-core';
export class ProcessFilterService {
    constructor(alfrescoApiService) {
        this.alfrescoApiService = alfrescoApiService;
    }
    get userFiltersApi() {
        var _a;
        this._userFiltersApi = (_a = this._userFiltersApi) !== null && _a !== void 0 ? _a : new UserFiltersApi(this.alfrescoApiService.getInstance());
        return this._userFiltersApi;
    }
    getProcessFilters(appId) {
        return from(this.callApiProcessFilters(appId))
            .pipe(map((response) => {
            const filters = [];
            response.data.forEach((filter) => {
                const filterModel = new FilterProcessRepresentationModel(filter);
                filters.push(filterModel);
            });
            return filters;
        }), catchError((err) => this.handleProcessError(err)));
    }
    getProcessFilterById(filterId, appId) {
        return from(this.callApiProcessFilters(appId))
            .pipe(map((response) => {
            return response.data.find((filter) => filter.id === filterId);
        }), catchError((err) => this.handleProcessError(err)));
    }
    getProcessFilterByName(filterName, appId) {
        return from(this.callApiProcessFilters(appId))
            .pipe(map((response) => {
            return response.data.find((filter) => filter.name === filterName);
        }), catchError((err) => this.handleProcessError(err)));
    }
    createDefaultFilters(appId) {
        const runningFilter = this.getRunningFilterInstance(appId, 0);
        const runningObservable = this.addProcessFilter(runningFilter);
        const completedFilter = this.getCompletedFilterInstance(appId, 1);
        const completedObservable = this.addProcessFilter(completedFilter);
        const allFilter = this.getAllFilterInstance(appId, 2);
        const allObservable = this.addProcessFilter(allFilter);
        return new Observable((observer) => {
            forkJoin([
                runningObservable,
                completedObservable,
                allObservable
            ]).subscribe((res) => {
                const filters = [];
                res.forEach((filter) => {
                    if (filter.name === runningFilter.name) {
                        filters.push(new FilterProcessRepresentationModel(Object.assign(Object.assign({}, filter), { filter: runningFilter.filter, appId })));
                    }
                    else if (filter.name === completedFilter.name) {
                        filters.push(new FilterProcessRepresentationModel(Object.assign(Object.assign({}, filter), { filter: completedFilter.filter, appId })));
                    }
                    else if (filter.name === allFilter.name) {
                        filters.push(new FilterProcessRepresentationModel(Object.assign(Object.assign({}, filter), { filter: allFilter.filter, appId })));
                    }
                });
                observer.next(filters);
                observer.complete();
            }, (err) => {
                this.handleProcessError(err);
            });
        });
    }
    getRunningFilterInstance(appId, index) {
        return new FilterProcessRepresentationModel({
            'name': 'Running',
            'appId': appId,
            'recent': true,
            'icon': 'glyphicon-random',
            'filter': { 'sort': 'created-desc', 'name': '', 'state': 'running' },
            index
        });
    }
    getCompletedFilterInstance(appId, index) {
        return new FilterProcessRepresentationModel({
            'name': 'Completed',
            'appId': appId,
            'recent': false,
            'icon': 'glyphicon-ok-sign',
            'filter': { 'sort': 'created-desc', 'name': '', 'state': 'completed' },
            index
        });
    }
    getAllFilterInstance(appId, index) {
        return new FilterProcessRepresentationModel({
            'name': 'All',
            'appId': appId,
            'recent': true,
            'icon': 'glyphicon-th',
            'filter': { 'sort': 'created-desc', 'name': '', 'state': 'all' },
            index
        });
    }
    addProcessFilter(filter) {
        return from(this.userFiltersApi.createUserProcessInstanceFilter(filter))
            .pipe(map((response) => {
            return response;
        }), catchError((err) => this.handleProcessError(err)));
    }
    callApiProcessFilters(appId) {
        if (appId) {
            return this.userFiltersApi.getUserProcessInstanceFilters({ appId: appId });
        }
        else {
            return this.userFiltersApi.getUserProcessInstanceFilters();
        }
    }
    handleProcessError(error) {
        return throwError(error || 'Server error');
    }
}
ProcessFilterService.ɵfac = function ProcessFilterService_Factory(t) { return new (t || ProcessFilterService)(ɵngcc0.ɵɵinject(ɵngcc1.AlfrescoApiService)); };
ProcessFilterService.ɵprov = i0.ɵɵdefineInjectable({ factory: function ProcessFilterService_Factory() { return new ProcessFilterService(i0.ɵɵinject(i1.AlfrescoApiService)); }, token: ProcessFilterService, providedIn: "root" });
ProcessFilterService.ctorParameters = () => [
    { type: AlfrescoApiService }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ProcessFilterService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc1.AlfrescoApiService }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,