import { AlfrescoApiService } from '@alfresco/adf-core';
import { Injectable } from '@angular/core';
import { Observable, from, forkJoin, throwError } from 'rxjs';
import { FilterProcessRepresentationModel } from '../models/filter-process.model';
import { map, catchError } from 'rxjs/operators';
import { UserFiltersApi } from '@alfresco/js-api';
import * as i0 from "@angular/core";
import * as i1 from "@alfresco/adf-core";
export class ProcessFilterService {
    constructor(alfrescoApiService) {
        this.alfrescoApiService = alfrescoApiService;
    }
    get userFiltersApi() {
        var _a;
        this._userFiltersApi = (_a = this._userFiltersApi) !== null && _a !== void 0 ? _a : new UserFiltersApi(this.alfrescoApiService.getInstance());
        return this._userFiltersApi;
    }
    getProcessFilters(appId) {
        return from(this.callApiProcessFilters(appId))
            .pipe(map((response) => {
            const filters = [];
            response.data.forEach((filter) => {
                const filterModel = new FilterProcessRepresentationModel(filter);
                filters.push(filterModel);
            });
            return filters;
        }), catchError((err) => this.handleProcessError(err)));
    }
    getProcessFilterById(filterId, appId) {
        return from(this.callApiProcessFilters(appId))
            .pipe(map((response) => {
            return response.data.find((filter) => filter.id === filterId);
        }), catchError((err) => this.handleProcessError(err)));
    }
    getProcessFilterByName(filterName, appId) {
        return from(this.callApiProcessFilters(appId))
            .pipe(map((response) => {
            return response.data.find((filter) => filter.name === filterName);
        }), catchError((err) => this.handleProcessError(err)));
    }
    createDefaultFilters(appId) {
        const runningFilter = this.getRunningFilterInstance(appId, 0);
        const runningObservable = this.addProcessFilter(runningFilter);
        const completedFilter = this.getCompletedFilterInstance(appId, 1);
        const completedObservable = this.addProcessFilter(completedFilter);
        const allFilter = this.getAllFilterInstance(appId, 2);
        const allObservable = this.addProcessFilter(allFilter);
        return new Observable((observer) => {
            forkJoin([
                runningObservable,
                completedObservable,
                allObservable
            ]).subscribe((res) => {
                const filters = [];
                res.forEach((filter) => {
                    if (filter.name === runningFilter.name) {
                        filters.push(new FilterProcessRepresentationModel(Object.assign(Object.assign({}, filter), { filter: runningFilter.filter, appId })));
                    }
                    else if (filter.name === completedFilter.name) {
                        filters.push(new FilterProcessRepresentationModel(Object.assign(Object.assign({}, filter), { filter: completedFilter.filter, appId })));
                    }
                    else if (filter.name === allFilter.name) {
                        filters.push(new FilterProcessRepresentationModel(Object.assign(Object.assign({}, filter), { filter: allFilter.filter, appId })));
                    }
                });
                observer.next(filters);
                observer.complete();
            }, (err) => {
                this.handleProcessError(err);
            });
        });
    }
    getRunningFilterInstance(appId, index) {
        return new FilterProcessRepresentationModel({
            'name': 'Running',
            'appId': appId,
            'recent': true,
            'icon': 'glyphicon-random',
            'filter': { 'sort': 'created-desc', 'name': '', 'state': 'running' },
            index
        });
    }
    getCompletedFilterInstance(appId, index) {
        return new FilterProcessRepresentationModel({
            'name': 'Completed',
            'appId': appId,
            'recent': false,
            'icon': 'glyphicon-ok-sign',
            'filter': { 'sort': 'created-desc', 'name': '', 'state': 'completed' },
            index
        });
    }
    getAllFilterInstance(appId, index) {
        return new FilterProcessRepresentationModel({
            'name': 'All',
            'appId': appId,
            'recent': true,
            'icon': 'glyphicon-th',
            'filter': { 'sort': 'created-desc', 'name': '', 'state': 'all' },
            index
        });
    }
    addProcessFilter(filter) {
        return from(this.userFiltersApi.createUserProcessInstanceFilter(filter))
            .pipe(map((response) => {
            return response;
        }), catchError((err) => this.handleProcessError(err)));
    }
    callApiProcessFilters(appId) {
        if (appId) {
            return this.userFiltersApi.getUserProcessInstanceFilters({ appId: appId });
        }
        else {
            return this.userFiltersApi.getUserProcessInstanceFilters();
        }
    }
    handleProcessError(error) {
        return throwError(error || 'Server error');
    }
}
ProcessFilterService.ɵprov = i0.ɵɵdefineInjectable({ factory: function ProcessFilterService_Factory() { return new ProcessFilterService(i0.ɵɵinject(i1.AlfrescoApiService)); }, token: ProcessFilterService, providedIn: "root" });
ProcessFilterService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
ProcessFilterService.ctorParameters = () => [
    { type: AlfrescoApiService }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvY2Vzcy1maWx0ZXIuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIvaG9tZS90cmF2aXMvYnVpbGQvQWxmcmVzY28vYWxmcmVzY28tbmcyLWNvbXBvbmVudHMvbGliL3Byb2Nlc3Mtc2VydmljZXMvc3JjLyIsInNvdXJjZXMiOlsibGliL3Byb2Nlc3MtbGlzdC9zZXJ2aWNlcy9wcm9jZXNzLWZpbHRlci5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWlCQSxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUN4RCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxVQUFVLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxVQUFVLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDOUQsT0FBTyxFQUFFLGdDQUFnQyxFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFDbEYsT0FBTyxFQUFFLEdBQUcsRUFBRSxVQUFVLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNqRCxPQUFPLEVBRUgsY0FBYyxFQUNqQixNQUFNLGtCQUFrQixDQUFDOzs7QUFLMUIsTUFBTSxPQUFPLG9CQUFvQjtJQVE3QixZQUFvQixrQkFBc0M7UUFBdEMsdUJBQWtCLEdBQWxCLGtCQUFrQixDQUFvQjtJQUMxRCxDQUFDO0lBTkQsSUFBSSxjQUFjOztRQUNkLElBQUksQ0FBQyxlQUFlLFNBQUcsSUFBSSxDQUFDLGVBQWUsbUNBQUksSUFBSSxjQUFjLENBQUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUM7UUFDekcsT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDO0lBQ2hDLENBQUM7SUFVRCxpQkFBaUIsQ0FBQyxLQUFhO1FBQzNCLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxLQUFLLENBQUMsQ0FBQzthQUN6QyxJQUFJLENBQ0QsR0FBRyxDQUFDLENBQUMsUUFBUSxFQUFFLEVB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QUMsNkJBQTZCLEVBQUUsQ0FBQztTQUM5RDtJQUNMLENBQUM7SUFFTyxrQkFBa0IsQ0FBQyxLQUFVO1FBQ2pDLE9BQU8sVUFBVSxDQUFDLEtBQUssSUFBSSxjQUFjLENBQUMsQ0FBQztJQUMvQyxDQUFDOzs7O1lBN0xKLFVBQVUsU0FBQztnQkFDUixVQUFVLEVBQUUsTUFBTTthQUNyQjs7O1lBWlEsa0JBQWtCIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgQWxmcmVzY29BcGlTZXJ2aWNlIH0gZnJvbSAnQGFsZnJlc2NvL2FkZi1jb3JlJztcbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUsIGZyb20sIGZvcmtKb2luLCB0aHJvd0Vycm9yIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBGaWx0ZXJQcm9jZXNzUmVwcmVzZW50YXRpb25Nb2RlbCB9IGZyb20gJy4uL21vZGVscy9maWx0ZXItcHJvY2Vzcy5tb2RlbCc7XG5pbXBvcnQgeyBtYXAsIGNhdGNoRXJyb3IgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQge1xuICAgIFJlc3VsdExpc3REYXRhUmVwcmVzZW50YXRpb25Vc2VyUHJvY2Vzc0luc3RhbmNlRmlsdGVyUmVwcmVzZW50YXRpb24sXG4gICAgVXNlckZpbHRlcnNBcGlcbn0gZnJvbSAnQGFsZnJlc2NvL2pzLWFwaSc7XG5cbkBJbmplY3RhYmxlKHtcbiAgICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgUHJvY2Vzc0ZpbHRlclNlcnZpY2Uge1xuXG4gICAgcHJpdmF0ZSBfdXNlckZpbHRlcnNBcGk7XG4gICAgZ2V0IHVzZXJGaWx0ZXJzQXBpKCk6IFVzZXJGaWx0ZXJzQXBpIHtcbiAgICAgICAgdGhpcy5fdXNlckZpbHRlcnNBcGkgPSB0aGlzLl91c2VyRmlsdGVyc0FwaSA/PyBuZXcgVXNlckZpbHRlcnNBcGkodGhpcy5hbGZyZXNjb0FwaVNlcnZpY2UuZ2V0SW5zdGFuY2UoKSk7XG4gICAgICAgIHJldHVybiB0aGlzLl91c2VyRmlsdGVyc0FwaTtcbiAgICB9XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGFsZnJlc2NvQXBpU2VydmljZTogQWxmcmVzY29BcGlTZXJ2aWNlKSB7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyBhbGwgZmlsdGVycyBkZWZpbmVkIGZvciBhIFByb2Nlc3MgQXBwLlxuICAgICAqIEBwYXJhbSBhcHBJZCBJRCBvZiB0aGUgdGFyZ2V0IGFwcFxuICAgICAqIEByZXR1cm5zIEFycmF5IG9mIGZpbHRlciBkZXRhaWxzXG4gICAgICovXG4gICAgZ2V0UHJvY2Vzc0ZpbHRlcnMoYXBwSWQ6IG51bWJlcik6IE9ic2VydmFibGU8RmlsdGVyUHJvY2Vzc1JlcHJlc2VudGF0aW9uTW9kZWxbXT4ge1xuICAgICAgICByZXR1cm4gZnJvbSh0aGlzLmNhbGxBcGlQcm9jZXNzRmlsdGVycyhhcHBJZCkpXG4gICAgICAgICAgICAucGlwZShcbiAgICAgICAgICAgICAgICBtYXAoKHJlc3BvbnNlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGZpbHRlcnM6IEZpbHRlclByb2Nlc3NSZXByZXNlbnRhdGlvbk1vZGVsW10gPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2UuZGF0YS5mb3JFYWNoKChmaWx0ZXIpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGZpbHRlck1vZGVsID0gbmV3IEZpbHRlclByb2Nlc3NSZXByZXNlbnRhdGlvbk1vZGVsKGZpbHRlcik7XG4gICAgICAgICAgICAgICAgICAgICAgICBmaWx0ZXJzLnB1c2goZmlsdGVyTW9kZWwpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZpbHRlcnM7XG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgY2F0Y2hFcnJvcigoZXJyKSA9PiB0aGlzLmhhbmRsZVByb2Nlc3NFcnJvcihlcnIpKVxuICAgICAgICAgICAgKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXRyaWV2ZXMgdGhlIHByb2Nlc3MgZmlsdGVyIGJ5IElELlxuICAgICAqIEBwYXJhbSBmaWx0ZXJJZCBJRCBvZiB0aGUgZmlsdGVyXG4gICAgICogQHBhcmFtIGFwcElkIElEIG9mIHRoZSB0YXJnZXQgYXBwXG4gICAgICogQHJldHVybnMgRGV0YWlscyBvZiB0aGUgZmlsdGVyXG4gICAgICovXG4gICAgZ2V0UHJvY2Vzc0ZpbHRlckJ5SWQoZmlsdGVySWQ6IG51bWJlciwgYXBwSWQ/OiBudW1iZXIpOiBPYnNlcnZhYmxlPEZpbHRlclByb2Nlc3NSZXByZXNlbnRhdGlvbk1vZGVsPiB7XG4gICAgICAgIHJldHVybiBmcm9tKHRoaXMuY2FsbEFwaVByb2Nlc3NGaWx0ZXJzKGFwcElkKSlcbiAgICAgICAgICAgIC5waXBlKFxuICAgICAgICAgICAgICAgIG1hcCgocmVzcG9uc2U6IGFueSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzcG9uc2UuZGF0YS5maW5kKChmaWx0ZXIpID0+IGZpbHRlci5pZCA9PT0gZmlsdGVySWQpO1xuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgIGNhdGNoRXJyb3IoKGVycikgPT4gdGhpcy5oYW5kbGVQcm9jZXNzRXJyb3IoZXJyKSlcbiAgICAgICAgICAgICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0cmlldmVzIHRoZSBwcm9jZXNzIGZpbHRlciBieSBuYW1lLlxuICAgICAqIEBwYXJhbSBmaWx0ZXJOYW1lIE5hbWUgb2YgdGhlIGZpbHRlclxuICAgICAqIEBwYXJhbSBhcHBJZCBJRCBvZiB0aGUgdGFyZ2V0IGFwcFxuICAgICAqIEByZXR1cm5zIERldGFpbHMgb2YgdGhlIGZpbHRlclxuICAgICAqL1xuICAgIGdldFByb2Nlc3NGaWx0ZXJCeU5hbWUoZmlsdGVyTmFtZTogc3RyaW5nLCBhcHBJZD86IG51bWJlcik6IE9ic2VydmFibGU8RmlsdGVyUHJvY2Vzc1JlcHJlc2VudGF0aW9uTW9kZWw+IHtcbiAgICAgICAgcmV0dXJuIGZyb20odGhpcy5jYWxsQXBpUHJvY2Vzc0ZpbHRlcnMoYXBwSWQpKVxuICAgICAgICAgICAgLnBpcGUoXG4gICAgICAgICAgICAgICAgbWFwKChyZXNwb25zZTogYW55KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXNwb25zZS5kYXRhLmZpbmQoKGZpbHRlcikgPT4gZmlsdGVyLm5hbWUgPT09IGZpbHRlck5hbWUpO1xuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgIGNhdGNoRXJyb3IoKGVycikgPT4gdGhpcy5oYW5kbGVQcm9jZXNzRXJyb3IoZXJyKSlcbiAgICAgICAgICAgICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbmQgcmV0dXJucyB0aGUgZGVmYXVsdCBmaWx0ZXJzIGZvciBhbiBhcHAuXG4gICAgICogQHBhcmFtIGFwcElkIElEIG9mIHRoZSB0YXJnZXQgYXBwXG4gICAgICogQHJldHVybnMgRGVmYXVsdCBmaWx0ZXJzIGp1c3QgY3JlYXRlZFxuICAgICAqL1xuICAgIHB1YmxpYyBjcmVhdGVEZWZhdWx0RmlsdGVycyhhcHBJZDogbnVtYmVyKTogT2JzZXJ2YWJsZTxGaWx0ZXJQcm9jZXNzUmVwcmVzZW50YXRpb25Nb2RlbFtdPiB7XG4gICAgICAgIGNvbnN0IHJ1bm5pbmdGaWx0ZXIgPSB0aGlzLmdldFJ1bm5pbmdGaWx0ZXJJbnN0YW5jZShhcHBJZCwgMCk7XG4gICAgICAgIGNvbnN0IHJ1bm5pbmdPYnNlcnZhYmxlID0gdGhpcy5hZGRQcm9jZXNzRmlsdGVyKHJ1bm5pbmdGaWx0ZXIpO1xuXG4gICAgICAgIGNvbnN0IGNvbXBsZXRlZEZpbHRlciA9IHRoaXMuZ2V0Q29tcGxldGVkRmlsdGVySW5zdGFuY2UoYXBwSWQsIDEpO1xuICAgICAgICBjb25zdCBjb21wbGV0ZWRPYnNlcnZhYmxlID0gdGhpcy5hZGRQcm9jZXNzRmlsdGVyKGNvbXBsZXRlZEZpbHRlcik7XG5cbiAgICAgICAgY29uc3QgYWxsRmlsdGVyID0gdGhpcy5nZXRBbGxGaWx0ZXJJbnN0YW5jZShhcHBJZCwgMik7XG4gICAgICAgIGNvbnN0IGFsbE9ic2VydmFibGUgPSB0aGlzLmFkZFByb2Nlc3NGaWx0ZXIoYWxsRmlsdGVyKTtcblxuICAgICAgICByZXR1cm4gbmV3IE9ic2VydmFibGUoKG9ic2VydmVyKSA9PiB7XG4gICAgICAgICAgICBmb3JrSm9pbihbXG4gICAgICAgICAgICAgICAgICAgIHJ1bm5pbmdPYnNlcnZhYmxlLFxuICAgICAgICAgICAgICAgICAgICBjb21wbGV0ZWRPYnNlcnZhYmxlLFxuICAgICAgICAgICAgICAgICAgICBhbGxPYnNlcnZhYmxlXG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgKS5zdWJzY3JpYmUoXG4gICAgICAgICAgICAgICAgKHJlcykgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBmaWx0ZXJzOiBGaWx0ZXJQcm9jZXNzUmVwcmVzZW50YXRpb25Nb2RlbFtdID0gW107XG4gICAgICAgICAgICAgICAgICAgIHJlcy5mb3JFYWNoKChmaWx0ZXIpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmaWx0ZXIubmFtZSA9PT0gcnVubmluZ0ZpbHRlci5uYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsdGVycy5wdXNoKG5ldyBGaWx0ZXJQcm9jZXNzUmVwcmVzZW50YXRpb25Nb2RlbCh7IC4uLmZpbHRlciwgZmlsdGVyOiBydW5uaW5nRmlsdGVyLmZpbHRlciwgYXBwSWQgfSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChmaWx0ZXIubmFtZSA9PT0gY29tcGxldGVkRmlsdGVyLm5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWx0ZXJzLnB1c2gobmV3IEZpbHRlclByb2Nlc3NSZXByZXNlbnRhdGlvbk1vZGVsKHsgLi4uZmlsdGVyLCBmaWx0ZXI6IGNvbXBsZXRlZEZpbHRlci5maWx0ZXIsIGFwcElkIH0pKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZmlsdGVyLm5hbWUgPT09IGFsbEZpbHRlci5uYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsdGVycy5wdXNoKG5ldyBGaWx0ZXJQcm9jZXNzUmVwcmVzZW50YXRpb25Nb2RlbCh7IC4uLmZpbHRlciwgZmlsdGVyOiBhbGxGaWx0ZXIuZmlsdGVyLCBhcHBJZCB9KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBvYnNlcnZlci5uZXh0KGZpbHRlcnMpO1xuICAgICAgICAgICAgICAgICAgICBvYnNlcnZlci5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgKGVycjogYW55KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaGFuZGxlUHJvY2Vzc0Vycm9yKGVycik7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW5kIHJldHVybnMgYSBmaWx0ZXIgdGhhdCBtYXRjaGVzIFwicnVubmluZ1wiIHByb2Nlc3MgaW5zdGFuY2VzLlxuICAgICAqIEBwYXJhbSBhcHBJZCBJRCBvZiB0aGUgdGFyZ2V0IGFwcFxuICAgICAqIEBwYXJhbSBpbmRleCBvZiB0aGUgZmlsdGVyIChvcHRpb25hbClcbiAgICAgKiBAcmV0dXJucyBGaWx0ZXIganVzdCBjcmVhdGVkXG4gICAgICovXG4gICAgcHVibGljIGdldFJ1bm5pbmdGaWx0ZXJJbnN0YW5jZShhcHBJZDogbnVtYmVyLCBpbmRleD86IG51bWJlcik6IEZpbHRlclByb2Nlc3NSZXByZXNlbnRhdGlvbk1vZGVsIHtcbiAgICAgICAgcmV0dXJuICBuZXcgRmlsdGVyUHJvY2Vzc1JlcHJlc2VudGF0aW9uTW9kZWwoe1xuICAgICAgICAgICAgJ25hbWUnOiAnUnVubmluZycsXG4gICAgICAgICAgICAnYXBwSWQnOiBhcHBJZCxcbiAgICAgICAgICAgICdyZWNlbnQnOiB0cnVlLFxuICAgICAgICAgICAgJ2ljb24nOiAnZ2x5cGhpY29uLXJhbmRvbScsXG4gICAgICAgICAgICAnZmlsdGVyJzogeyAnc29ydCc6ICdjcmVhdGVkLWRlc2MnLCAnbmFtZSc6ICcnLCAnc3RhdGUnOiAncnVubmluZycgfSxcbiAgICAgICAgICAgIGluZGV4XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBzdGF0aWMgQ29tcGxldGVkIGZpbHRlciBpbnN0YW5jZS5cbiAgICAgKiBAcGFyYW0gYXBwSWQgSUQgb2YgdGhlIHRhcmdldCBhcHBcbiAgICAgKiBAcGFyYW0gaW5kZXggb2YgdGhlIGZpbHRlciAob3B0aW9uYWwpXG4gICAgICogQHJldHVybnMgRGV0YWlscyBvZiB0aGUgZmlsdGVyXG4gICAgICovXG4gICAgcHJpdmF0ZSBnZXRDb21wbGV0ZWRGaWx0ZXJJbnN0YW5jZShhcHBJZDogbnVtYmVyLCBpbmRleD86IG51bWJlcik6IEZpbHRlclByb2Nlc3NSZXByZXNlbnRhdGlvbk1vZGVsIHtcbiAgICAgICAgcmV0dXJuIG5ldyBGaWx0ZXJQcm9jZXNzUmVwcmVzZW50YXRpb25Nb2RlbCh7XG4gICAgICAgICAgICAnbmFtZSc6ICdDb21wbGV0ZWQnLFxuICAgICAgICAgICAgJ2FwcElkJzogYXBwSWQsXG4gICAgICAgICAgICAncmVjZW50JzogZmFsc2UsXG4gICAgICAgICAgICAnaWNvbic6ICdnbHlwaGljb24tb2stc2lnbicsXG4gICAgICAgICAgICAnZmlsdGVyJzogeyAnc29ydCc6ICdjcmVhdGVkLWRlc2MnLCAnbmFtZSc6ICcnLCAnc3RhdGUnOiAnY29tcGxldGVkJyB9LFxuICAgICAgICAgICAgaW5kZXhcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIHN0YXRpYyBBbGwgZmlsdGVyIGluc3RhbmNlLlxuICAgICAqIEBwYXJhbSBhcHBJZCBJRCBvZiB0aGUgdGFyZ2V0IGFwcFxuICAgICAqIEBwYXJhbSBpbmRleCBvZiB0aGUgZmlsdGVyIChvcHRpb25hbClcbiAgICAgKiBAcmV0dXJucyBEZXRhaWxzIG9mIHRoZSBmaWx0ZXJcbiAgICAgKi9cbiAgICBwcml2YXRlIGdldEFsbEZpbHRlckluc3RhbmNlKGFwcElkOiBudW1iZXIsIGluZGV4PzogbnVtYmVyKTogRmlsdGVyUHJvY2Vzc1JlcHJlc2VudGF0aW9uTW9kZWwge1xuICAgICAgICByZXR1cm4gbmV3IEZpbHRlclByb2Nlc3NSZXByZXNlbnRhdGlvbk1vZGVsKHtcbiAgICAgICAgICAgICduYW1lJzogJ0FsbCcsXG4gICAgICAgICAgICAnYXBwSWQnOiBhcHBJZCxcbiAgICAgICAgICAgICdyZWNlbnQnOiB0cnVlLFxuICAgICAgICAgICAgJ2ljb24nOiAnZ2x5cGhpY29uLXRoJyxcbiAgICAgICAgICAgICdmaWx0ZXInOiB7ICdzb3J0JzogJ2NyZWF0ZWQtZGVzYycsICduYW1lJzogJycsICdzdGF0ZSc6ICdhbGwnIH0sXG4gICAgICAgICAgICBpbmRleFxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBZGRzIGEgZmlsdGVyLlxuICAgICAqIEBwYXJhbSBmaWx0ZXIgVGhlIGZpbHRlciB0byBhZGRcbiAgICAgKiBAcmV0dXJucyBUaGUgZmlsdGVyIGp1c3QgYWRkZWRcbiAgICAgKi9cbiAgICBhZGRQcm9jZXNzRmlsdGVyKGZpbHRlcjogRmlsdGVyUHJvY2Vzc1JlcHJlc2VudGF0aW9uTW9kZWwpOiBPYnNlcnZhYmxlPEZpbHRlclByb2Nlc3NSZXByZXNlbnRhdGlvbk1vZGVsPiB7XG4gICAgICAgIHJldHVybiBmcm9tKHRoaXMudXNlckZpbHRlcnNBcGkuY3JlYXRlVXNlclByb2Nlc3NJbnN0YW5jZUZpbHRlcihmaWx0ZXIpKVxuICAgICAgICAgICAgLnBpcGUoXG4gICAgICAgICAgICAgICAgbWFwKChyZXNwb25zZTogRmlsdGVyUHJvY2Vzc1JlcHJlc2VudGF0aW9uTW9kZWwpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlO1xuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgIGNhdGNoRXJyb3IoKGVycikgPT4gdGhpcy5oYW5kbGVQcm9jZXNzRXJyb3IoZXJyKSlcbiAgICAgICAgICAgICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2FsbHMgYGdldFVzZXJQcm9jZXNzSW5zdGFuY2VGaWx0ZXJzYCBmcm9tIHRoZSBBbGZyZXNjbyBKUyBBUEkuXG4gICAgICogQHBhcmFtIGFwcElkIElEIG9mIHRoZSB0YXJnZXQgYXBwXG4gICAgICogQHJldHVybnMgTGlzdCBvZiBmaWx0ZXIgZGV0YWlsc1xuICAgICAqL1xuICAgIGNhbGxBcGlQcm9jZXNzRmlsdGVycyhhcHBJZD86IG51bWJlcik6IFByb21pc2U8UmVzdWx0TGlzdERhdGFSZXByZXNlbnRhdGlvblVzZXJQcm9jZXNzSW5zdGFuY2VGaWx0ZXJSZXByZXNlbnRhdGlvbj4ge1xuICAgICAgICBpZiAoYXBwSWQpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnVzZXJGaWx0ZXJzQXBpLmdldFVzZXJQcm9jZXNzSW5zdGFuY2VGaWx0ZXJzKHsgYXBwSWQ6IGFwcElkIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMudXNlckZpbHRlcnNBcGkuZ2V0VXNlclByb2Nlc3NJbnN0YW5jZUZpbHRlcnMoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgaGFuZGxlUHJvY2Vzc0Vycm9yKGVycm9yOiBhbnkpIHtcbiAgICAgICAgcmV0dXJuIHRocm93RXJyb3IoZXJyb3IgfHwgJ1NlcnZlciBlcnJvcicpO1xuICAgIH1cbn1cbiJdfQ==