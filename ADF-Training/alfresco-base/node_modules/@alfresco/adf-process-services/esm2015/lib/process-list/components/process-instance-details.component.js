/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { LogService } from '@alfresco/adf-core';
import { DatePipe } from '@angular/common';
import { Component, EventEmitter, Input, Output, ViewChild } from '@angular/core';
import { ProcessService } from './../services/process.service';
import { ProcessInstanceHeaderComponent } from './process-instance-header.component';
import { ProcessInstanceTasksComponent } from './process-instance-tasks.component';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './../services/process.service';
import * as ɵngcc2 from '@alfresco/adf-core';
import * as ɵngcc3 from '@angular/common';
import * as ɵngcc4 from '@angular/material/card';
import * as ɵngcc5 from './process-instance-header.component';
import * as ɵngcc6 from '@angular/material/button';
import * as ɵngcc7 from './process-instance-tasks.component';
import * as ɵngcc8 from '../../process-comments/process-comments.component';
import * as ɵngcc9 from '@ngx-translate/core';

const _c0 = ["processInstanceHeader"];
const _c1 = ["processInstanceTasks"];
function ProcessInstanceDetailsComponent_div_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(2, 1, "ADF_PROCESS_LIST.DETAILS.MESSAGES.NONE"));
} }
function ProcessInstanceDetailsComponent_mat_card_1_div_14_Template(rf, ctx) { if (rf & 1) {
    const _r7 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 9);
    ɵngcc0.ɵɵelementStart(1, "button", 10);
    ɵngcc0.ɵɵlistener("click", function ProcessInstanceDetailsComponent_mat_card_1_div_14_Template_button_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r7); const ctx_r6 = ɵngcc0.ɵɵnextContext(2); return ctx_r6.cancelProcess(); });
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(3, 1, "ADF_PROCESS_LIST.DETAILS.BUTTON.CANCEL"));
} }
function ProcessInstanceDetailsComponent_mat_card_1_Template(rf, ctx) { if (rf & 1) {
    const _r9 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "mat-card");
    ɵngcc0.ɵɵelementStart(1, "mat-card-header");
    ɵngcc0.ɵɵelementStart(2, "mat-card-title");
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(4, "mat-card-content");
    ɵngcc0.ɵɵelementStart(5, "adf-process-instance-header", 1, 2);
    ɵngcc0.ɵɵlistener("showProcessDiagram", function ProcessInstanceDetailsComponent_mat_card_1_Template_adf_process_instance_header_showProcessDiagram_5_listener() { ɵngcc0.ɵɵrestoreView(_r9); const ctx_r8 = ɵngcc0.ɵɵnextContext(); return ctx_r8.onShowProcessDiagram(); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(7, "button", 3);
    ɵngcc0.ɵɵlistener("click", function ProcessInstanceDetailsComponent_mat_card_1_Template_button_click_7_listener() { ɵngcc0.ɵɵrestoreView(_r9); const ctx_r10 = ɵngcc0.ɵɵnextContext(); return ctx_r10.onShowProcessDiagram(); });
    ɵngcc0.ɵɵtext(8);
    ɵngcc0.ɵɵpipe(9, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(10, "mat-card");
    ɵngcc0.ɵɵelementStart(11, "mat-card-content");
    ɵngcc0.ɵɵelementStart(12, "adf-process-instance-tasks", 4, 5);
    ɵngcc0.ɵɵlistener("taskClick", function ProcessInstanceDetailsComponent_mat_card_1_Template_adf_process_instance_tasks_taskClick_12_listener($event) { ɵngcc0.ɵɵrestoreView(_r9); const ctx_r11 = ɵngcc0.ɵɵnextContext(); return ctx_r11.onTaskClicked($event); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(14, ProcessInstanceDetailsComponent_mat_card_1_div_14_Template, 4, 3, "div", 6);
    ɵngcc0.ɵɵelementStart(15, "mat-card");
    ɵngcc0.ɵɵelementStart(16, "mat-card-content");
    ɵngcc0.ɵɵelement(17, "adf-process-instance-comments", 7, 8);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate(ctx_r1.getProcessNameOrDescription("medium"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("processInstance", ctx_r1.processInstanceDetails);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("disabled", !ctx_r1.isRunning());
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(9, 8, "ADF_PROCESS_LIST.DETAILS.BUTTON.SHOW_DIAGRAM"));
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵproperty("processInstanceDetails", ctx_r1.processInstanceDetails);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r1.isRunning());
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("readOnly", false)("processInstanceId", ctx_r1.processInstanceDetails.id);
} }
export class ProcessInstanceDetailsComponent {
    constructor(activitiProcess, logService) {
        this.activitiProcess = activitiProcess;
        this.logService = logService;
        this.showTitle = true;
        this.showRefreshButton = true;
        this.processCancelled = new EventEmitter();
        this.error = new EventEmitter();
        this.taskClick = new EventEmitter();
        this.showProcessDiagram = new EventEmitter();
    }
    ngOnChanges(changes) {
        const processInstanceId = changes['processInstanceId'];
        if (processInstanceId && !processInstanceId.currentValue) {
            this.reset();
            return;
        }
        if (processInstanceId && processInstanceId.currentValue) {
            this.load(processInstanceId.currentValue);
            return;
        }
    }
    reset() {
        this.processInstanceDetails = null;
    }
    load(processId) {
        if (processId) {
            this.activitiProcess.getProcess(processId).subscribe((res) => {
                this.processInstanceDetails = res;
            });
        }
    }
    isRunning() {
        return this.processInstanceDetails && !this.processInstanceDetails.ended;
    }
    cancelProcess() {
        this.activitiProcess.cancelProcess(this.processInstanceId).subscribe((data) => {
            this.processCancelled.emit(data);
        }, (err) => {
            this.error.emit(err);
        });
    }
    onTaskClicked(event) {
        this.taskClick.emit(event);
    }
    getProcessNameOrDescription(dateFormat) {
        let name = '';
        if (this.processInstanceDetails) {
            name = this.processInstanceDetails.name ||
                this.processInstanceDetails.processDefinitionName + ' - ' + this.getFormatDate(this.processInstanceDetails.started, dateFormat);
        }
        return name;
    }
    getFormatDate(value, format) {
        const datePipe = new DatePipe('en-US');
        try {
            return datePipe.transform(value, format);
        }
        catch (err) {
            this.logService.error(`ProcessListInstanceHeader: error parsing date ${value} to format ${format}`);
        }
    }
    onShowProcessDiagram() {
        this.showProcessDiagram.emit({ value: this.processInstanceId });
    }
}
ProcessInstanceDetailsComponent.ɵfac = function ProcessInstanceDetailsComponent_Factory(t) { return new (t || ProcessInstanceDetailsComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ProcessService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.LogService)); };
ProcessInstanceDetailsComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ProcessInstanceDetailsComponent, selectors: [["adf-process-instance-details"]], viewQuery: function ProcessInstanceDetailsComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c0, true);
        ɵngcc0.ɵɵviewQuery(_c1, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.processInstanceHeader = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.tasksList = _t.first);
    } }, inputs: { showTitle: "showTitle", showRefreshButton: "showRefreshButton", processInstanceId: "processInstanceId" }, outputs: { processCancelled: "processCancelled", error: "error", taskClick: "taskClick", showProcessDiagram: "showProcessDiagram" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 2, vars: 2, consts: [[4, "ngIf"], [3, "processInstance", "showProcessDiagram"], ["processInstanceHeader", ""], ["mat-button", "", "id", "show-diagram-button", "type", "button", "mat-button", "", "mat-raised-button", "", 1, "adf-in-medias-res-button", 3, "disabled", "click"], [3, "processInstanceDetails", "taskClick"], ["processInstanceTasks", ""], ["data-automation-id", "header-status", "class", "adf-in-medias-res-button", 4, "ngIf"], [3, "readOnly", "processInstanceId"], ["activitiComments", ""], ["data-automation-id", "header-status", 1, "adf-in-medias-res-button"], ["mat-button", "", "type", "button", 3, "click"]], template: function ProcessInstanceDetailsComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, ProcessInstanceDetailsComponent_div_0_Template, 3, 3, "div", 0);
        ɵngcc0.ɵɵtemplate(1, ProcessInstanceDetailsComponent_mat_card_1_Template, 19, 10, "mat-card", 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngIf", !ctx.processInstanceDetails);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.processInstanceDetails);
    } }, directives: [ɵngcc3.NgIf, ɵngcc4.MatCard, ɵngcc4.MatCardHeader, ɵngcc4.MatCardTitle, ɵngcc4.MatCardContent, ɵngcc5.ProcessInstanceHeaderComponent, ɵngcc6.MatButton, ɵngcc7.ProcessInstanceTasksComponent, ɵngcc8.ProcessCommentsComponent], pipes: [ɵngcc9.TranslatePipe], styles: ["[_nghost-%COMP%]{width:100%}.activiti-process-container[_ngcontent-%COMP%]{min-height:100px;overflow:visible;padding:10px;width:100%}.adf-comments-dialog[_ngcontent-%COMP%]{position:fixed;top:50%;transform:translateY(-50%);width:40%}.adf-in-medias-res-button[_ngcontent-%COMP%]{margin:16px 0}"] });
ProcessInstanceDetailsComponent.ctorParameters = () => [
    { type: ProcessService },
    { type: LogService }
];
ProcessInstanceDetailsComponent.propDecorators = {
    processInstanceId: [{ type: Input }],
    processInstanceHeader: [{ type: ViewChild, args: ['processInstanceHeader',] }],
    tasksList: [{ type: ViewChild, args: ['processInstanceTasks',] }],
    showTitle: [{ type: Input }],
    showRefreshButton: [{ type: Input }],
    processCancelled: [{ type: Output }],
    error: [{ type: Output }],
    taskClick: [{ type: Output }],
    showProcessDiagram: [{ type: Output }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ProcessInstanceDetailsComponent, [{
        type: Component,
        args: [{
                selector: 'adf-process-instance-details',
                template: "<div *ngIf=\"!processInstanceDetails\">{{ 'ADF_PROCESS_LIST.DETAILS.MESSAGES.NONE'|translate }}</div>\n<mat-card *ngIf=\"processInstanceDetails\">\n    <mat-card-header>\n        <mat-card-title>{{ getProcessNameOrDescription('medium') }}</mat-card-title>\n    </mat-card-header>\n    <mat-card-content>\n        <adf-process-instance-header\n            #processInstanceHeader\n            [processInstance]=\"processInstanceDetails\"\n            (showProcessDiagram)=\"onShowProcessDiagram()\">\n        </adf-process-instance-header>\n\n        <button\n            class=\"adf-in-medias-res-button\"\n            mat-button id=\"show-diagram-button\"\n            type=\"button\"\n            mat-button mat-raised-button\n            [disabled]=\"!isRunning()\"\n            (click)=\"onShowProcessDiagram()\">{{ 'ADF_PROCESS_LIST.DETAILS.BUTTON.SHOW_DIAGRAM' | translate }}</button>\n\n        <mat-card>\n            <mat-card-content>\n                <adf-process-instance-tasks\n                    #processInstanceTasks\n                    [processInstanceDetails]=\"processInstanceDetails\"\n                    (taskClick)=\"onTaskClicked($event)\">\n                </adf-process-instance-tasks>\n            </mat-card-content>\n        </mat-card>\n\n        <div data-automation-id=\"header-status\" *ngIf=\"isRunning()\" class=\"adf-in-medias-res-button\">\n            <button mat-button type=\"button\" (click)=\"cancelProcess()\">{{ 'ADF_PROCESS_LIST.DETAILS.BUTTON.CANCEL' | translate }}</button>\n        </div>\n\n        <mat-card>\n            <mat-card-content>\n                <adf-process-instance-comments #activitiComments\n                    [readOnly]=\"false\"\n                    [processInstanceId]=\"processInstanceDetails.id\">\n                </adf-process-instance-comments>\n            </mat-card-content>\n        </mat-card>\n\n    </mat-card-content>\n</mat-card>\n",
                styles: [":host{width:100%}.activiti-process-container{min-height:100px;overflow:visible;padding:10px;width:100%}.adf-comments-dialog{position:fixed;top:50%;transform:translateY(-50%);width:40%}.adf-in-medias-res-button{margin:16px 0}"]
            }]
    }], function () { return [{ type: ɵngcc1.ProcessService }, { type: ɵngcc2.LogService }]; }, { showTitle: [{
            type: Input
        }], showRefreshButton: [{
            type: Input
        }], processCancelled: [{
            type: Output
        }], error: [{
            type: Output
        }], taskClick: [{
            type: Output
        }], showProcessDiagram: [{
            type: Output
        }], processInstanceId: [{
            type: Input
        }], processInstanceHeader: [{
            type: ViewChild,
            args: ['processInstanceHeader']
        }], tasksList: [{
            type: ViewChild,
            args: ['processInstanceTasks']
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,