/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { CommonModule } from '@angular/common';
import { NgModule } from '@angular/core';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { CoreModule, TRANSLATION_PROVIDER, FormRenderingService } from '@alfresco/adf-core';
import { MaterialModule } from './material.module';
import { ProcessListModule } from './process-list/process-list.module';
import { TaskListModule } from './task-list/task-list.module';
import { AppsListModule } from './app-list/apps-list.module';
import { ProcessCommentsModule } from './process-comments/process-comments.module';
import { AttachmentModule } from './attachment/attachment.module';
import { PeopleModule } from './people/people.module';
import { FormModule } from './form/form.module';
import { ProcessFormRenderingService } from './form/process-form-rendering.service';
import { ProcessServicesPipeModule } from './pipes/process-services-pipe.module';
import * as ɵngcc0 from '@angular/core';
const ɵ0 = {
    name: 'adf-process-services',
    source: 'assets/adf-process-services'
};
export class ProcessModule {
    static forRoot() {
        return {
            ngModule: ProcessModule,
            providers: [
                {
                    provide: TRANSLATION_PROVIDER,
                    multi: true,
                    useValue: {
                        name: 'adf-process-services',
                        source: 'assets/adf-process-services'
                    }
                },
                FormRenderingService,
                { provide: FormRenderingService, useClass: ProcessFormRenderingService }
            ]
        };
    }
    static forChild() {
        return {
            ngModule: ProcessModule
        };
    }
}
ProcessModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: ProcessModule });
ProcessModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function ProcessModule_Factory(t) { return new (t || ProcessModule)(); }, providers: [
        {
            provide: TRANSLATION_PROVIDER,
            multi: true,
            useValue: ɵ0
        }
    ], imports: [[
            CoreModule,
            CommonModule,
            ProcessCommentsModule,
            FormsModule,
            ReactiveFormsModule,
            MaterialModule,
            ProcessListModule,
            TaskListModule,
            AppsListModule,
            AttachmentModule,
            PeopleModule,
            FormModule,
            ProcessServicesPipeModule
        ], CommonModule,
        ProcessCommentsModule,
        FormsModule,
        ReactiveFormsModule,
        ProcessListModule,
        TaskListModule,
        AppsListModule,
        AttachmentModule,
        PeopleModule,
        FormModule,
        ProcessServicesPipeModule] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ProcessModule, { imports: function () { return [CoreModule,
        CommonModule,
        ProcessCommentsModule,
        FormsModule,
        ReactiveFormsModule,
        MaterialModule,
        ProcessListModule,
        TaskListModule,
        AppsListModule,
        AttachmentModule,
        PeopleModule,
        FormModule,
        ProcessServicesPipeModule]; }, exports: function () { return [CommonModule,
        ProcessCommentsModule,
        FormsModule,
        ReactiveFormsModule,
        ProcessListModule,
        TaskListModule,
        AppsListModule,
        AttachmentModule,
        PeopleModule,
        FormModule,
        ProcessServicesPipeModule]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ProcessModule, [{
        type: NgModule,
        args: [{
                imports: [
                    CoreModule,
                    CommonModule,
                    ProcessCommentsModule,
                    FormsModule,
                    ReactiveFormsModule,
                    MaterialModule,
                    ProcessListModule,
                    TaskListModule,
                    AppsListModule,
                    AttachmentModule,
                    PeopleModule,
                    FormModule,
                    ProcessServicesPipeModule
                ],
                providers: [
                    {
                        provide: TRANSLATION_PROVIDER,
                        multi: true,
                        useValue: ɵ0
                    }
                ],
                exports: [
                    CommonModule,
                    ProcessCommentsModule,
                    FormsModule,
                    ReactiveFormsModule,
                    ProcessListModule,
                    TaskListModule,
                    AppsListModule,
                    AttachmentModule,
                    PeopleModule,
                    FormModule,
                    ProcessServicesPipeModule
                ]
            }]
    }], null, null); })();
export { ɵ0 };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvY2Vzcy5tb2R1bGUuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL2hvbWUvdHJhdmlzL2J1aWxkL0FsZnJlc2NvL2FsZnJlc2NvLW5nMi1jb21wb25lbnRzL2xpYi9wcm9jZXNzLXNlcnZpY2VzL3NyYy9saWIvcHJvY2Vzcy5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUVILE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMvQyxPQUFPLEVBQUUsUUFBUSxFQUF1QixNQUFNLGVBQWUsQ0FBQztBQUM5RCxPQUFPLEVBQUUsV0FBVyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDbEUsT0FBTyxFQUFFLFVBQVUsRUFBRSxvQkFBb0IsRUFBRSxvQkFBb0IsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBRTVGLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUVuRCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxvQ0FBb0MsQ0FBQztBQUN2RSxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFDOUQsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBQzdELE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLDRDQUE0QyxDQUFDO0FBQ25GLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBQ2xFLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUN0RCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDaEQsT0FBTyxFQUFFLDJCQUEyQixFQUFFLE1BQU0sdUNBQXVDLENBQUM7QUFDcEYsT0FBTyxFQUFFLHlCQUF5QixFQUFFLE1BQU0sc0NBQXNDLENBQUM7O0FBQ2pGLFdBcUJzQjtBQUN0QixJQUFnQixJQUFJLEVBQUUsc0JBQXNCO0FBQzVDLElBQWdCLE1BQU0sRUFBRSw2QkFBNkI7QUFDckQsQ0FBYTtBQWlCYixNQUFNLE9BQU8sYUFBYTtBQUMxQixJQUFJLE1BQU0sQ0FBQyxPQUFPO0FBQUssUUFDZixPQUFPO0FBQ2YsWUFBWSxRQUFRLEVBQUUsYUFBYTtBQUNuQyxZQUFZLFNBQVMsRUFBRTtBQUN2QixnQkFBZ0I7QUFDaEIsb0JBQW9CLE9BQU8sRUFBRSxvQkFBb0I7QUFDakQsb0JBQW9CLEtBQUssRUFBRSxJQUFJO0FBQy9CLG9CQUFvQixRQUFRLEVBQUU7QUFDOUIsd0JBQXdCLElBQUksRUFBRSxzQkFBc0I7QUFDcEQsd0JBQXdCLE1BQU0sRUFBRSw2QkFBNkI7QUFDN0QscUJBQXFCO0FBQ3JCLGlCQUFpQjtBQUNqQixnQkFBZ0Isb0JBQW9CO0FBQ3BDLGdCQUFnQixFQUFFLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxRQUFRLEVBQUUsMkJBQTJCLEVBQUU7QUFDeEYsYUFBYTtBQUNiLFNBQVMsQ0FBQztBQUNWLElBQUksQ0FBQztBQUNMLElBQ0ksTUFBTSxDQUFDLFFBQVE7QUFBSyxRQUNoQixPQUFPO0FBQ2YsWUFBWSxRQUFRLEVBQUUsYUFBYTtBQUNuQyxTQUFTLENBQUM7QUFDVixJQUFJLENBQUM7QUFDTDt5Q0FoRUMsUUFBUSxTQUFDO0tBQ04sT0FBTyxFQUFFLHNCQUNMLFVBQVUsc0JBQ1YsWUFBWSxzQkFDWixxQkFBcUI7RUFDckI7R0FBVyxzQkFDWDtDQUFtQixzQkFDbkI7WUFBYztTQUNkO2dCQUFpQjttQkFDakI7U0FBYztLQUNkLGNBQWM7TUFDZCxnQkFBZ0I7bUJBQ2hCLFlBQVk7b0JBQ1o7RUFBVSxzQkFDVjtrQkFBeUI7UUFDNUIsa0JBQ0Q7T0FBUyxFQUFFO0NBQ1A7Q0FDSSxPQUFPLEVBQUU7TUFBb0IsMEJBQzdCLEtBQUs7Q0FBRSxJQUFJO01BQ1gsUUFBUSxJQUdQO1NBQ0o7TUFDSixrQkFDRDtFQUFPLEVBQUUsc0JBQ0w7V0FBWTtTQUNaO01BQXFCO0VBQ3JCLFdBQVc7YUFDWDtZQUFtQixzQkFDbkI7WUFBaUIsc0JBQ2pCLGNBQWMsc0JBQ2QsY0FBYyxzQkFDZCxnQkFBZ0Isc0JBQ2hCO0lBQVk7SUFDWixVQUFVO0tBQ1Y7U0FBeUIsa0JBQzVCO1lBQ0o7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzswQkFDSTtBQUFDO0FBQWUiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBDb21tb25Nb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHsgTmdNb2R1bGUsIE1vZHVsZVdpdGhQcm92aWRlcnMgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEZvcm1zTW9kdWxlLCBSZWFjdGl2ZUZvcm1zTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHsgQ29yZU1vZHVsZSwgVFJBTlNMQVRJT05fUFJPVklERVIsIEZvcm1SZW5kZXJpbmdTZXJ2aWNlIH0gZnJvbSAnQGFsZnJlc2NvL2FkZi1jb3JlJztcblxuaW1wb3J0IHsgTWF0ZXJpYWxNb2R1bGUgfSBmcm9tICcuL21hdGVyaWFsLm1vZHVsZSc7XG5cbmltcG9ydCB7IFByb2Nlc3NMaXN0TW9kdWxlIH0gZnJvbSAnLi9wcm9jZXNzLWxpc3QvcHJvY2Vzcy1saXN0Lm1vZHVsZSc7XG5pbXBvcnQgeyBUYXNrTGlzdE1vZHVsZSB9IGZyb20gJy4vdGFzay1saXN0L3Rhc2stbGlzdC5tb2R1bGUnO1xuaW1wb3J0IHsgQXBwc0xpc3RNb2R1bGUgfSBmcm9tICcuL2FwcC1saXN0L2FwcHMtbGlzdC5tb2R1bGUnO1xuaW1wb3J0IHsgUHJvY2Vzc0NvbW1lbnRzTW9kdWxlIH0gZnJvbSAnLi9wcm9jZXNzLWNvbW1lbnRzL3Byb2Nlc3MtY29tbWVudHMubW9kdWxlJztcbmltcG9ydCB7IEF0dGFjaG1lbnRNb2R1bGUgfSBmcm9tICcuL2F0dGFjaG1lbnQvYXR0YWNobWVudC5tb2R1bGUnO1xuaW1wb3J0IHsgUGVvcGxlTW9kdWxlIH0gZnJvbSAnLi9wZW9wbGUvcGVvcGxlLm1vZHVsZSc7XG5pbXBvcnQgeyBGb3JtTW9kdWxlIH0gZnJvbSAnLi9mb3JtL2Zvcm0ubW9kdWxlJztcbmltcG9ydCB7IFByb2Nlc3NGb3JtUmVuZGVyaW5nU2VydmljZSB9IGZyb20gJy4vZm9ybS9wcm9jZXNzLWZvcm0tcmVuZGVyaW5nLnNlcnZpY2UnO1xuaW1wb3J0IHsgUHJvY2Vzc1NlcnZpY2VzUGlwZU1vZHVsZSB9IGZyb20gJy4vcGlwZXMvcHJvY2Vzcy1zZXJ2aWNlcy1waXBlLm1vZHVsZSc7XG5cbkBOZ01vZHVsZSh7XG4gICAgaW1wb3J0czogW1xuICAgICAgICBDb3JlTW9kdWxlLFxuICAgICAgICBDb21tb25Nb2R1bGUsXG4gICAgICAgIFByb2Nlc3NDb21tZW50c01vZHVsZSxcbiAgICAgICAgRm9ybXNNb2R1bGUsXG4gICAgICAgIFJlYWN0aXZlRm9ybXNNb2R1bGUsXG4gICAgICAgIE1hdGVyaWFsTW9kdWxlLFxuICAgICAgICBQcm9jZXNzTGlzdE1vZHVsZSxcbiAgICAgICAgVGFza0xpc3RNb2R1bGUsXG4gICAgICAgIEFwcHNMaXN0TW9kdWxlLFxuICAgICAgICBBdHRhY2htZW50TW9kdWxlLFxuICAgICAgICBQZW9wbGVNb2R1bGUsXG4gICAgICAgIEZvcm1Nb2R1bGUsXG4gICAgICAgIFByb2Nlc3NTZXJ2aWNlc1BpcGVNb2R1bGVcbiAgICBdLFxuICAgIHByb3ZpZGVyczogW1xuICAgICAgICB7XG4gICAgICAgICAgICBwcm92aWRlOiBUUkFOU0xBVElPTl9QUk9WSURFUixcbiAgICAgICAgICAgIG11bHRpOiB0cnVlLFxuICAgICAgICAgICAgdXNlVmFsdWU6IHtcbiAgICAgICAgICAgICAgICBuYW1lOiAnYWRmLXByb2Nlc3Mtc2VydmljZXMnLFxuICAgICAgICAgICAgICAgIHNvdXJjZTogJ2Fzc2V0cy9hZGYtcHJvY2Vzcy1zZXJ2aWNlcydcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIF0sXG4gICAgZXhwb3J0czogW1xuICAgICAgICBDb21tb25Nb2R1bGUsXG4gICAgICAgIFByb2Nlc3NDb21tZW50c01vZHVsZSxcbiAgICAgICAgRm9ybXNNb2R1bGUsXG4gICAgICAgIFJlYWN0aXZlRm9ybXNNb2R1bGUsXG4gICAgICAgIFByb2Nlc3NMaXN0TW9kdWxlLFxuICAgICAgICBUYXNrTGlzdE1vZHVsZSxcbiAgICAgICAgQXBwc0xpc3RNb2R1bGUsXG4gICAgICAgIEF0dGFjaG1lbnRNb2R1bGUsXG4gICAgICAgIFBlb3BsZU1vZHVsZSxcbiAgICAgICAgRm9ybU1vZHVsZSxcbiAgICAgICAgUHJvY2Vzc1NlcnZpY2VzUGlwZU1vZHVsZVxuICAgIF1cbn0pXG5leHBvcnQgY2xhc3MgUHJvY2Vzc01vZHVsZSB7XG4gICAgc3RhdGljIGZvclJvb3QoKTogTW9kdWxlV2l0aFByb3ZpZGVyczxQcm9jZXNzTW9kdWxlPiB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBuZ01vZHVsZTogUHJvY2Vzc01vZHVsZSxcbiAgICAgICAgICAgIHByb3ZpZGVyczogW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgcHJvdmlkZTogVFJBTlNMQVRJT05fUFJPVklERVIsXG4gICAgICAgICAgICAgICAgICAgIG11bHRpOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICB1c2VWYWx1ZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogJ2FkZi1wcm9jZXNzLXNlcnZpY2VzJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZTogJ2Fzc2V0cy9hZGYtcHJvY2Vzcy1zZXJ2aWNlcydcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgRm9ybVJlbmRlcmluZ1NlcnZpY2UsXG4gICAgICAgICAgICAgICAgeyBwcm92aWRlOiBGb3JtUmVuZGVyaW5nU2VydmljZSwgdXNlQ2xhc3M6IFByb2Nlc3NGb3JtUmVuZGVyaW5nU2VydmljZSB9XG4gICAgICAgICAgICBdXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgc3RhdGljIGZvckNoaWxkKCk6IE1vZHVsZVdpdGhQcm92aWRlcnM8UHJvY2Vzc01vZHVsZT4ge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbmdNb2R1bGU6IFByb2Nlc3NNb2R1bGVcbiAgICAgICAgfTtcbiAgICB9XG59XG4iXX0=