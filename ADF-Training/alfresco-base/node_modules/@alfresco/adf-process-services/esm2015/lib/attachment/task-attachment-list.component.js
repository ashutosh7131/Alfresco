/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { ContentService, ThumbnailService, EmptyListComponent, ProcessContentService } from '@alfresco/adf-core';
import { ContentChild, Component, EventEmitter, Input, NgZone, Output, ViewEncapsulation } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@alfresco/adf-core';
import * as ɵngcc2 from '@angular/common';
import * as ɵngcc3 from '@angular/material/progress-spinner';
import * as ɵngcc4 from '@ngx-translate/core';

function TaskAttachmentListComponent_ng_template_2_ng_content_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵprojection(0, 0, ["*ngIf", "hasCustomTemplate; else defaulEmptyList", "class", "adf-custom-empty-template"]);
} }
function TaskAttachmentListComponent_ng_template_2_ng_template_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "adf-empty-list");
    ɵngcc0.ɵɵelementStart(1, "div", 6);
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(3, 1, "ADF_TASK_LIST.ATTACHMENT.EMPTY.HEADER"), " ");
} }
function TaskAttachmentListComponent_ng_template_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, TaskAttachmentListComponent_ng_template_2_ng_content_0_Template, 1, 0, "ng-content", 4);
    ɵngcc0.ɵɵtemplate(1, TaskAttachmentListComponent_ng_template_2_ng_template_1_Template, 4, 3, "ng-template", null, 5, ɵngcc0.ɵɵtemplateRefExtractor);
} if (rf & 2) {
    const _r3 = ɵngcc0.ɵɵreference(2);
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.hasCustomTemplate)("ngIfElse", _r3);
} }
function TaskAttachmentListComponent_ng_template_8_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "mat-progress-spinner", 7);
} if (rf & 2) {
    ɵngcc0.ɵɵproperty("color", "primary")("mode", "indeterminate");
} }
const _c0 = ["*"];
export class TaskAttachmentListComponent {
    constructor(activitiContentService, contentService, thumbnailService, ngZone) {
        this.activitiContentService = activitiContentService;
        this.contentService = contentService;
        this.thumbnailService = thumbnailService;
        this.ngZone = ngZone;
        this.disabled = false;
        this.attachmentClick = new EventEmitter();
        this.success = new EventEmitter();
        this.error = new EventEmitter();
        this.hasCustomTemplate = false;
        this.attachments = [];
        this.isLoading = false;
    }
    ngOnChanges(changes) {
        if (changes['taskId'] && changes['taskId'].currentValue) {
            this.loadAttachmentsByTaskId(changes['taskId'].currentValue);
        }
    }
    ngAfterContentInit() {
        if (this.emptyTemplate) {
            this.hasCustomTemplate = true;
        }
    }
    reset() {
        this.attachments = [];
    }
    hasCustomEmptyTemplate() {
        return !!this.emptyTemplate;
    }
    reload() {
        this.ngZone.run(() => {
            this.loadAttachmentsByTaskId(this.taskId);
        });
    }
    add(content) {
        this.ngZone.run(() => {
            this.attachments.push({
                id: content.id,
                name: content.name,
                created: content.created,
                createdBy: content.createdBy.firstName + ' ' + content.createdBy.lastName,
                icon: this.thumbnailService.getMimeTypeIcon(content.mimeType)
            });
        });
    }
    loadAttachmentsByTaskId(taskId) {
        if (taskId) {
            this.isLoading = true;
            this.reset();
            const isRelatedContent = 'true';
            this.activitiContentService.getTaskRelatedContent(taskId, { isRelatedContent }).subscribe((res) => {
                const attachList = [];
                res.data.forEach((content) => {
                    attachList.push({
                        id: content.id,
                        name: content.name,
                        created: content.created,
                        createdBy: content.createdBy.firstName + ' ' + content.createdBy.lastName,
                        icon: this.thumbnailService.getMimeTypeIcon(content.mimeType)
                    });
                });
                this.attachments = attachList;
                this.success.emit(this.attachments);
                this.isLoading = false;
            }, (err) => {
                this.error.emit(err);
                this.isLoading = false;
            });
        }
    }
    deleteAttachmentById(contentId) {
        if (contentId) {
            this.activitiContentService.deleteRelatedContent(contentId).subscribe(() => {
                this.attachments = this.attachments.filter((content) => {
                    return content.id !== contentId;
                });
            }, (err) => {
                this.error.emit(err);
            });
        }
    }
    isEmpty() {
        return this.attachments && this.attachments.length === 0;
    }
    onShowRowActionsMenu(event) {
        const viewAction = {
            title: 'ADF_TASK_LIST.MENU_ACTIONS.VIEW_CONTENT',
            name: 'view'
        };
        const removeAction = {
            title: 'ADF_TASK_LIST.MENU_ACTIONS.REMOVE_CONTENT',
            name: 'remove'
        };
        const downloadAction = {
            title: 'ADF_TASK_LIST.MENU_ACTIONS.DOWNLOAD_CONTENT',
            name: 'download'
        };
        event.value.actions = [
            viewAction,
            downloadAction
        ];
        if (!this.disabled) {
            event.value.actions.splice(1, 0, removeAction);
        }
    }
    onExecuteRowAction(event) {
        const args = event.value;
        const action = args.action;
        if (action.name === 'view') {
            this.emitDocumentContent(args.row.obj);
        }
        else if (action.name === 'remove') {
            this.deleteAttachmentById(args.row.obj.id);
        }
        else if (action.name === 'download') {
            this.downloadContent(args.row.obj);
        }
    }
    openContent(event) {
        const content = event.value.obj;
        this.emitDocumentContent(content);
    }
    emitDocumentContent(content) {
        this.activitiContentService.getContentPreview(content.id).subscribe((blob) => {
            content.contentBlob = blob;
            this.attachmentClick.emit(content);
        }, (err) => {
            this.error.emit(err);
        });
    }
    downloadContent(content) {
        this.activitiContentService.getFileRawContent(content.id).subscribe((blob) => this.contentService.downloadBlob(blob, content.name), (err) => {
            this.error.emit(err);
        });
    }
    isDisabled() {
        return this.disabled;
    }
}
TaskAttachmentListComponent.ɵfac = function TaskAttachmentListComponent_Factory(t) { return new (t || TaskAttachmentListComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ProcessContentService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ContentService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ThumbnailService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
TaskAttachmentListComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: TaskAttachmentListComponent, selectors: [["adf-task-attachment-list"]], contentQueries: function TaskAttachmentListComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, EmptyListComponent, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.emptyTemplate = _t.first);
    } }, inputs: { disabled: "disabled", taskId: "taskId" }, outputs: { attachmentClick: "attachmentClick", success: "success", error: "error" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], ngContentSelectors: _c0, decls: 9, vars: 5, consts: [[3, "rows", "actions", "loading", "rowDblClick", "showRowActionsMenu", "executeRowAction"], ["key", "icon", "type", "image", "srTitle", "ADF_TASK_LIST.PROPERTIES.THUMBNAIL", 3, "sortable"], ["key", "name", "type", "text", "title", "ADF_TASK_LIST.PROPERTIES.NAME", 1, "adf-full-width", "adf-ellipsis-cell", 3, "sortable"], ["key", "created", "type", "date", "format", "shortDate", "title", "ADF_TASK_LIST.PROPERTIES.CREATED"], [4, "ngIf", "ngIfElse"], ["defaulEmptyList", ""], ["adf-empty-list-header", "", 1, "adf-empty-list-header"], [1, "adf-attachment-list-loading-margin", 3, "color", "mode"]], template: function TaskAttachmentListComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵelementStart(0, "adf-datatable", 0);
        ɵngcc0.ɵɵlistener("rowDblClick", function TaskAttachmentListComponent_Template_adf_datatable_rowDblClick_0_listener($event) { return ctx.openContent($event); })("showRowActionsMenu", function TaskAttachmentListComponent_Template_adf_datatable_showRowActionsMenu_0_listener($event) { return ctx.onShowRowActionsMenu($event); })("executeRowAction", function TaskAttachmentListComponent_Template_adf_datatable_executeRowAction_0_listener($event) { return ctx.onExecuteRowAction($event); });
        ɵngcc0.ɵɵelementStart(1, "adf-no-content-template");
        ɵngcc0.ɵɵtemplate(2, TaskAttachmentListComponent_ng_template_2_Template, 3, 2, "ng-template");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(3, "data-columns");
        ɵngcc0.ɵɵelement(4, "data-column", 1);
        ɵngcc0.ɵɵelement(5, "data-column", 2);
        ɵngcc0.ɵɵelement(6, "data-column", 3);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(7, "adf-loading-content-template");
        ɵngcc0.ɵɵtemplate(8, TaskAttachmentListComponent_ng_template_8_Template, 1, 2, "ng-template");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("rows", ctx.attachments)("actions", true)("loading", ctx.isLoading);
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵproperty("sortable", false);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("sortable", true);
    } }, directives: [ɵngcc1.DataTableComponent, ɵngcc1.NoContentTemplateDirective, ɵngcc1.DataColumnListComponent, ɵngcc1.DataColumnComponent, ɵngcc1.LoadingContentTemplateDirective, ɵngcc2.NgIf, ɵngcc1.EmptyListComponent, ɵngcc1.EmptyListHeaderDirective, ɵngcc3.MatProgressSpinner], pipes: [ɵngcc4.TranslatePipe], styles: ["adf-datatable .adf-data-cell{cursor:pointer!important}.adf-attachment-list-loading-margin{margin-left:calc(50% - 50px);margin-right:calc(50% - 50px)}.adf-empty-list-header{font-size:24px;height:32px;letter-spacing:-1px;line-height:1.33;opacity:.26}.adf-empty-list-drag_drop{font-size:56px;letter-spacing:-2px;line-height:1;margin-top:40px;min-height:56px;opacity:.54;white-space:pre-line;word-break:break-all}@media screen and (max-width:599px){.adf-empty-list-drag_drop{font-size:40px}}.adf-empty-list__any-files-here-to-add{font-size:16px;letter-spacing:-.4px;line-height:1.5;margin-top:17px;min-height:24px;opacity:.54;white-space:pre-line;word-break:break-all}.adf-empty-list__empty_doc_lib{height:161px;margin-top:17px;max-width:100%;object-fit:contain;width:565px}@media screen and (max-width:599px){.adf-empty-list__empty_doc_lib{width:250px}}"], encapsulation: 2 });
TaskAttachmentListComponent.ctorParameters = () => [
    { type: ProcessContentService },
    { type: ContentService },
    { type: ThumbnailService },
    { type: NgZone }
];
TaskAttachmentListComponent.propDecorators = {
    emptyTemplate: [{ type: ContentChild, args: [EmptyListComponent,] }],
    taskId: [{ type: Input }],
    disabled: [{ type: Input }],
    attachmentClick: [{ type: Output }],
    success: [{ type: Output }],
    error: [{ type: Output }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TaskAttachmentListComponent, [{
        type: Component,
        args: [{
                selector: 'adf-task-attachment-list',
                template: "<adf-datatable [rows]=\"attachments\"\n               [actions]=\"true\"\n               [loading]=\"isLoading\"\n               (rowDblClick)=\"openContent($event)\"\n               (showRowActionsMenu)=\"onShowRowActionsMenu($event)\"\n               (executeRowAction)=\"onExecuteRowAction($event)\">\n            <adf-no-content-template>\n                <ng-template>\n                    <ng-content *ngIf=\"hasCustomTemplate; else defaulEmptyList\" class=\"adf-custom-empty-template\"></ng-content>\n                    <ng-template #defaulEmptyList>\n                        <adf-empty-list>\n                            <div adf-empty-list-header class=\"adf-empty-list-header\">\n                                {{'ADF_TASK_LIST.ATTACHMENT.EMPTY.HEADER' | translate}}\n                            </div>\n                        </adf-empty-list>\n                    </ng-template>\n                </ng-template>\n            </adf-no-content-template>\n\n            <data-columns>\n                <data-column key=\"icon\" type=\"image\" srTitle=\"ADF_TASK_LIST.PROPERTIES.THUMBNAIL\" [sortable]=\"false\"></data-column>\n                <data-column key=\"name\" type=\"text\" title=\"ADF_TASK_LIST.PROPERTIES.NAME\" class=\"adf-full-width adf-ellipsis-cell\" [sortable]=\"true\"></data-column>\n                <data-column key=\"created\" type=\"date\" format=\"shortDate\" title=\"ADF_TASK_LIST.PROPERTIES.CREATED\"></data-column>\n            </data-columns>\n            <adf-loading-content-template>\n                <ng-template>\n                <!--Add your custom loading template here-->\n                    <mat-progress-spinner class=\"adf-attachment-list-loading-margin\" [color]=\"'primary'\" [mode]=\"'indeterminate'\">\n                    </mat-progress-spinner>\n                </ng-template>\n            </adf-loading-content-template>\n</adf-datatable>\n",
                encapsulation: ViewEncapsulation.None,
                styles: ["adf-datatable .adf-data-cell{cursor:pointer!important}.adf-attachment-list-loading-margin{margin-left:calc(50% - 50px);margin-right:calc(50% - 50px)}.adf-empty-list-header{font-size:24px;height:32px;letter-spacing:-1px;line-height:1.33;opacity:.26}.adf-empty-list-drag_drop{font-size:56px;letter-spacing:-2px;line-height:1;margin-top:40px;min-height:56px;opacity:.54;white-space:pre-line;word-break:break-all}@media screen and (max-width:599px){.adf-empty-list-drag_drop{font-size:40px}}.adf-empty-list__any-files-here-to-add{font-size:16px;letter-spacing:-.4px;line-height:1.5;margin-top:17px;min-height:24px;opacity:.54;white-space:pre-line;word-break:break-all}.adf-empty-list__empty_doc_lib{height:161px;margin-top:17px;max-width:100%;object-fit:contain;width:565px}@media screen and (max-width:599px){.adf-empty-list__empty_doc_lib{width:250px}}"]
            }]
    }], function () { return [{ type: ɵngcc1.ProcessContentService }, { type: ɵngcc1.ContentService }, { type: ɵngcc1.ThumbnailService }, { type: ɵngcc0.NgZone }]; }, { disabled: [{
            type: Input
        }], attachmentClick: [{
            type: Output
        }], success: [{
            type: Output
        }], error: [{
            type: Output
        }], emptyTemplate: [{
            type: ContentChild,
            args: [EmptyListComponent]
        }], taskId: [{
            type: Input
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,