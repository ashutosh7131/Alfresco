/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, EventEmitter, Input, Output } from '@angular/core';
import { ProcessContentService } from '@alfresco/adf-core';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@alfresco/adf-core';
import * as ɵngcc2 from '@angular/material/button';
import * as ɵngcc3 from '@angular/material/icon';

const _c0 = function () { return ["click"]; };
export class CreateProcessAttachmentComponent {
    constructor(activitiContentService) {
        this.activitiContentService = activitiContentService;
        this.error = new EventEmitter();
        this.success = new EventEmitter();
    }
    ngOnChanges(changes) {
        if (changes['processInstanceId'] && changes['processInstanceId'].currentValue) {
            this.processInstanceId = changes['processInstanceId'].currentValue;
        }
    }
    onFileUpload(event) {
        const filesList = event.detail.files.map((obj) => obj.file);
        for (const fileInfoObj of filesList) {
            const file = fileInfoObj;
            const opts = {
                isRelatedContent: true
            };
            this.activitiContentService.createProcessRelatedContent(this.processInstanceId, file, opts).subscribe((res) => {
                this.success.emit(res);
            }, (err) => {
                this.error.emit(err);
            });
        }
    }
}
CreateProcessAttachmentComponent.ɵfac = function CreateProcessAttachmentComponent_Factory(t) { return new (t || CreateProcessAttachmentComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ProcessContentService)); };
CreateProcessAttachmentComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: CreateProcessAttachmentComponent, selectors: [["adf-create-process-attachment"]], inputs: { processInstanceId: "processInstanceId" }, outputs: { error: "error", success: "success" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 3, vars: 4, consts: [["id", "add_new_process_content_button", "color", "primary", "mat-button", "", "mat-raised-button", "", "mat-icon-button", "", 1, "adf-create-attachment", 3, "adf-upload", "mode", "multiple", "upload-files"]], template: function CreateProcessAttachmentComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "button", 0);
        ɵngcc0.ɵɵlistener("upload-files", function CreateProcessAttachmentComponent_Template_button_upload_files_0_listener($event) { return ctx.onFileUpload($event); });
        ɵngcc0.ɵɵelementStart(1, "mat-icon");
        ɵngcc0.ɵɵtext(2, "add");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("adf-upload", true)("mode", ɵngcc0.ɵɵpureFunction0(3, _c0))("multiple", true);
    } }, directives: [ɵngcc2.MatButton, ɵngcc1.UploadDirective, ɵngcc3.MatIcon], styles: [".adf-create-attachment[_ngcontent-%COMP%]{display:inline-block;line-height:0;vertical-align:middle}"] });
CreateProcessAttachmentComponent.ctorParameters = () => [
    { type: ProcessContentService }
];
CreateProcessAttachmentComponent.propDecorators = {
    processInstanceId: [{ type: Input }],
    error: [{ type: Output }],
    success: [{ type: Output }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CreateProcessAttachmentComponent, [{
        type: Component,
        args: [{
                selector: 'adf-create-process-attachment',
                template: "<button\n    id=\"add_new_process_content_button\"\n    color=\"primary\"\n    mat-button\n    mat-raised-button\n    mat-icon-button\n    class=\"adf-create-attachment\"\n    [adf-upload]=\"true\"\n    [mode]=\"['click']\"\n    [multiple]=\"true\"\n    (upload-files)=\"onFileUpload($event)\">\n    <mat-icon>add</mat-icon>\n</button>\n",
                styles: [".adf-create-attachment{display:inline-block;line-height:0;vertical-align:middle}"]
            }]
    }], function () { return [{ type: ɵngcc1.ProcessContentService }]; }, { error: [{
            type: Output
        }], success: [{
            type: Output
        }], processInstanceId: [{
            type: Input
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlLXByb2Nlc3MtYXR0YWNobWVudC5jb21wb25lbnQuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL2hvbWUvdHJhdmlzL2J1aWxkL0FsZnJlc2NvL2FsZnJlc2NvLW5nMi1jb21wb25lbnRzL2xpYi9wcm9jZXNzLXNlcnZpY2VzL3NyYy9saWIvYXR0YWNobWVudC9jcmVhdGUtcHJvY2Vzcy1hdHRhY2htZW50LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBRUgsT0FBTyxFQUFFLFNBQVMsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFhLE1BQU0sRUFBaUIsTUFBTSxlQUFlLENBQUM7QUFDakcsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sb0JBQW9CLENBQUM7Ozs7Ozs7QUFPM0QsTUFBTSxPQUFPLGdDQUFnQztBQUFHLElBa0I1QyxZQUFvQixzQkFBNkM7QUFDckUsUUFEd0IsMkJBQXNCLEdBQXRCLHNCQUFzQixDQUF1QjtBQUFDLFFBUmxFLFVBQUssR0FBc0IsSUFBSSxZQUFZLEVBQU8sQ0FBQztBQUN2RCxRQUtJLFlBQU8sR0FBc0IsSUFBSSxZQUFZLEVBQU8sQ0FBQztBQUN6RCxJQUVJLENBQUM7QUFDTCxJQUNJLFdBQVcsQ0FBQyxPQUFzQjtBQUN0QyxRQUFRLElBQUksT0FBTyxDQUFDLG1CQUFtQixDQUFDLElBQUksT0FBTyxDQUFDLG1CQUFtQixDQUFDLENBQUMsWUFBWSxFQUFFO0FBQ3ZGLFlBQVksSUFBSSxDQUFDLGlCQUFpQixHQUFHLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLFlBQVksQ0FBQztBQUMvRSxTQUFTO0FBQ1QsSUFBSSxDQUFDO0FBQ0wsSUFDSSxZQUFZLENBQUMsS0FBVTtBQUMzQixRQUFRLE1BQU0sU0FBUyxHQUFXLEtBQUssQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQzVFLFFBQ1EsS0FBSyxNQUFNLFdBQVcsSUFBSSxTQUFTLEVBQUU7QUFDN0MsWUFBWSxNQUFNLElBQUksR0FBUyxXQUFXLENBQUM7QUFDM0MsWUFBWSxNQUFNLElBQUksR0FBRztBQUN6QixnQkFBZ0IsZ0JBQWdCLEVBQUUsSUFBSTtBQUN0QyxhQUFhLENBQUM7QUFDZCxZQUFZLElBQUksQ0FBQyxzQkFBc0IsQ0FBQywyQkFBMkIsQ0FBQyxJQUFJLENBQUMsaUJBQWlCLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDLFNBQVMsQ0FDakcsQ0FBQyxHQUFHLEVBQUUsRUFBRTtBQUN4QixnQkFBb0IsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDM0MsWUFBZ0IsQ0FBQyxFQUNELENBQUMsR0FBRyxFQUFFLEVBQUU7QUFDeEIsZ0JBQW9CLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ3pDLFlBQWdCLENBQUMsQ0FBQyxDQUFDO0FBQ25CLFNBQVM7QUFDVCxJQUFJLENBQUM7QUFDTDs0REFqREMsU0FBUyxTQUFDLGtCQUNQLFFBQVEsRUFBRSwrQkFBK0Isa0JBRXpDOzBTQUF5RCw0SEFDNUQ7Ozs7Ozs7OztvTUFDSTtBQUFDO0FBQTBELFlBUHZELHFCQUFxQjtBQUFHO0FBQUc7QUFHdEIsZ0NBT1QsS0FBSztBQUNSLG9CQUtHLE1BQU07QUFDVCxzQkFLRyxNQUFNO0FBQ1Y7Ozs7Ozs7Ozs7Ozs7O29CQUFFO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBDb21wb25lbnQsIEV2ZW50RW1pdHRlciwgSW5wdXQsIE9uQ2hhbmdlcywgT3V0cHV0LCBTaW1wbGVDaGFuZ2VzIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBQcm9jZXNzQ29udGVudFNlcnZpY2UgfSBmcm9tICdAYWxmcmVzY28vYWRmLWNvcmUnO1xuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ2FkZi1jcmVhdGUtcHJvY2Vzcy1hdHRhY2htZW50JyxcbiAgICBzdHlsZVVybHM6IFsnLi9jcmVhdGUtcHJvY2Vzcy1hdHRhY2htZW50LmNvbXBvbmVudC5jc3MnXSxcbiAgICB0ZW1wbGF0ZVVybDogJy4vY3JlYXRlLXByb2Nlc3MtYXR0YWNobWVudC5jb21wb25lbnQuaHRtbCdcbn0pXG5leHBvcnQgY2xhc3MgQ3JlYXRlUHJvY2Vzc0F0dGFjaG1lbnRDb21wb25lbnQgaW1wbGVtZW50cyBPbkNoYW5nZXMge1xuXG4gICAgLyoqIChyZXF1aXJlZCkgVGhlIElEIG9mIHRoZSBwcm9jZXNzIGluc3RhbmNlIHRvIGRpc3BsYXkuICovXG4gICAgQElucHV0KClcbiAgICBwcm9jZXNzSW5zdGFuY2VJZDogc3RyaW5nO1xuXG4gICAgLyoqIEVtaXR0ZWQgd2hlbiBhbiBlcnJvciBvY2N1cnMgd2hpbGUgY3JlYXRpbmcgb3IgdXBsb2FkaW5nIGFuIGF0dGFjaG1lbnRcbiAgICAgKiBmcm9tIHRoZSB1c2VyIHdpdGhpbiB0aGUgY29tcG9uZW50LlxuICAgICAqL1xuICAgIEBPdXRwdXQoKVxuICAgIGVycm9yOiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xuXG4gICAgLyoqIEVtaXR0ZWQgd2hlbiBhbiBhdHRhY2htZW50IGlzIHN1Y2Nlc3NmdWxseSBjcmVhdGVkIG9yIHVwbG9hZGVkXG4gICAgICogZnJvbSB3aXRoaW4gdGhlIGNvbXBvbmVudC5cbiAgICAgKi9cbiAgICBAT3V0cHV0KClcbiAgICBzdWNjZXNzOiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBhY3Rpdml0aUNvbnRlbnRTZXJ2aWNlOiBQcm9jZXNzQ29udGVudFNlcnZpY2UpIHtcbiAgICB9XG5cbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKSB7XG4gICAgICAgIGlmIChjaGFuZ2VzWydwcm9jZXNzSW5zdGFuY2VJZCddICYmIGNoYW5nZXNbJ3Byb2Nlc3NJbnN0YW5jZUlkJ10uY3VycmVudFZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLnByb2Nlc3NJbnN0YW5jZUlkID0gY2hhbmdlc1sncHJvY2Vzc0luc3RhbmNlSWQnXS5jdXJyZW50VmFsdWU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBvbkZpbGVVcGxvYWQoZXZlbnQ6IGFueSkge1xuICAgICAgICBjb25zdCBmaWxlc0xpc3Q6IEZpbGVbXSA9IGV2ZW50LmRldGFpbC5maWxlcy5tYXAoKG9iaikgPT4gb2JqLmZpbGUpO1xuXG4gICAgICAgIGZvciAoY29uc3QgZmlsZUluZm9PYmogb2YgZmlsZXNMaXN0KSB7XG4gICAgICAgICAgICBjb25zdCBmaWxlOiBGaWxlID0gZmlsZUluZm9PYmo7XG4gICAgICAgICAgICBjb25zdCBvcHRzID0ge1xuICAgICAgICAgICAgICAgIGlzUmVsYXRlZENvbnRlbnQ6IHRydWVcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB0aGlzLmFjdGl2aXRpQ29udGVudFNlcnZpY2UuY3JlYXRlUHJvY2Vzc1JlbGF0ZWRDb250ZW50KHRoaXMucHJvY2Vzc0luc3RhbmNlSWQsIGZpbGUsIG9wdHMpLnN1YnNjcmliZShcbiAgICAgICAgICAgICAgICAocmVzKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3VjY2Vzcy5lbWl0KHJlcyk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAoZXJyKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZXJyb3IuZW1pdChlcnIpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxufVxuIl19