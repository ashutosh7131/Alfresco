/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, EventEmitter, Input, Output } from '@angular/core';
import { ProcessContentService } from '@alfresco/adf-core';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@alfresco/adf-core';
import * as ɵngcc2 from '@angular/material/button';
import * as ɵngcc3 from '@angular/material/icon';

const _c0 = function () { return ["click"]; };
export class AttachmentComponent {
    constructor(activitiContentService) {
        this.activitiContentService = activitiContentService;
        this.error = new EventEmitter();
        this.success = new EventEmitter();
    }
    ngOnChanges(changes) {
        if (changes['taskId'] && changes['taskId'].currentValue) {
            this.taskId = changes['taskId'].currentValue;
        }
    }
    onFileUpload(event) {
        const filesList = event.detail.files.map((obj) => obj.file);
        for (const fileInfoObj of filesList) {
            const file = fileInfoObj;
            const opts = {
                isRelatedContent: true
            };
            this.activitiContentService.createTaskRelatedContent(this.taskId, file, opts).subscribe((res) => {
                this.success.emit(res);
            }, (err) => {
                this.error.emit(err);
            });
        }
    }
}
AttachmentComponent.ɵfac = function AttachmentComponent_Factory(t) { return new (t || AttachmentComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ProcessContentService)); };
AttachmentComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: AttachmentComponent, selectors: [["adf-create-task-attachment"]], inputs: { taskId: "taskId" }, outputs: { error: "error", success: "success" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 3, vars: 4, consts: [["color", "primary", "mat-button", "", "mat-raised-button", "", "mat-icon-button", "", 1, "adf-create-attachment", 3, "adf-upload", "mode", "multiple", "upload-files"]], template: function AttachmentComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "button", 0);
        ɵngcc0.ɵɵlistener("upload-files", function AttachmentComponent_Template_button_upload_files_0_listener($event) { return ctx.onFileUpload($event); });
        ɵngcc0.ɵɵelementStart(1, "mat-icon");
        ɵngcc0.ɵɵtext(2, "add");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("adf-upload", true)("mode", ɵngcc0.ɵɵpureFunction0(3, _c0))("multiple", true);
    } }, directives: [ɵngcc2.MatButton, ɵngcc1.UploadDirective, ɵngcc3.MatIcon], styles: [".adf-create-attachment[_ngcontent-%COMP%]{display:inline-block;line-height:0;vertical-align:middle}"] });
AttachmentComponent.ctorParameters = () => [
    { type: ProcessContentService }
];
AttachmentComponent.propDecorators = {
    taskId: [{ type: Input }],
    error: [{ type: Output }],
    success: [{ type: Output }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AttachmentComponent, [{
        type: Component,
        args: [{
                selector: 'adf-create-task-attachment',
                template: "<button\n    color=\"primary\"\n    mat-button\n    mat-raised-button\n    mat-icon-button\n    class=\"adf-create-attachment\"\n    [adf-upload]=\"true\"\n    [mode]=\"['click']\"\n    [multiple]=\"true\"\n    (upload-files)=\"onFileUpload($event)\">\n    <mat-icon>add</mat-icon>\n</button>\n",
                styles: [".adf-create-attachment{display:inline-block;line-height:0;vertical-align:middle}"]
            }]
    }], function () { return [{ type: ɵngcc1.ProcessContentService }]; }, { error: [{
            type: Output
        }], success: [{
            type: Output
        }], taskId: [{
            type: Input
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlLXRhc2stYXR0YWNobWVudC5jb21wb25lbnQuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL2hvbWUvdHJhdmlzL2J1aWxkL0FsZnJlc2NvL2FsZnJlc2NvLW5nMi1jb21wb25lbnRzL2xpYi9wcm9jZXNzLXNlcnZpY2VzL3NyYy9saWIvYXR0YWNobWVudC9jcmVhdGUtdGFzay1hdHRhY2htZW50LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBRUgsT0FBTyxFQUFFLFNBQVMsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFhLE1BQU0sRUFBaUIsTUFBTSxlQUFlLENBQUM7QUFDakcsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sb0JBQW9CLENBQUM7Ozs7Ozs7QUFPM0QsTUFBTSxPQUFPLG1CQUFtQjtBQUFHLElBa0IvQixZQUFvQixzQkFBNkM7QUFDckUsUUFEd0IsMkJBQXNCLEdBQXRCLHNCQUFzQixDQUF1QjtBQUFDLFFBUmxFLFVBQUssR0FBc0IsSUFBSSxZQUFZLEVBQU8sQ0FBQztBQUN2RCxRQUtJLFlBQU8sR0FBc0IsSUFBSSxZQUFZLEVBQU8sQ0FBQztBQUN6RCxJQUVJLENBQUM7QUFDTCxJQUNJLFdBQVcsQ0FBQyxPQUFzQjtBQUN0QyxRQUFRLElBQUksT0FBTyxDQUFDLFFBQVEsQ0FBQyxJQUFJLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQyxZQUFZLEVBQUU7QUFDakUsWUFBWSxJQUFJLENBQUMsTUFBTSxHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQyxZQUFZLENBQUM7QUFDekQsU0FBUztBQUNULElBQUksQ0FBQztBQUNMLElBQ0ksWUFBWSxDQUFDLEtBQVU7QUFDM0IsUUFBUSxNQUFNLFNBQVMsR0FBVyxLQUFLLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUM1RSxRQUNRLEtBQUssTUFBTSxXQUFXLElBQUksU0FBUyxFQUFFO0FBQzdDLFlBQVksTUFBTSxJQUFJLEdBQVMsV0FBVyxDQUFDO0FBQzNDLFlBQVksTUFBTSxJQUFJLEdBQUc7QUFDekIsZ0JBQWdCLGdCQUFnQixFQUFFLElBQUk7QUFDdEMsYUFBYSxDQUFDO0FBQ2QsWUFBWSxJQUFJLENBQUMsc0JBQXNCLENBQUMsd0JBQXdCLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUMsU0FBUyxDQUNuRixDQUFDLEdBQUcsRUFBRSxFQUFFO0FBQ3hCLGdCQUFvQixJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUMzQyxZQUFnQixDQUFDLEVBQ0QsQ0FBQyxHQUFHLEVBQUUsRUFBRTtBQUN4QixnQkFBb0IsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDekMsWUFBZ0IsQ0FBQyxDQUNKLENBQUM7QUFDZCxTQUFTO0FBQ1QsSUFBSSxDQUFDO0FBQ0w7K0NBbERDLFNBQVMsU0FBQyxrQkFDUCxRQUFRLEVBQUUsNEJBQTRCLGtCQUV0QztzUkFBc0QsNEhBQ3pEOzs7Ozs7Ozs7b01BQ0k7QUFBQztBQUE2QyxZQVAxQyxxQkFBcUI7QUFBRztBQUFHO0FBR25DLHFCQU9JLEtBQUs7QUFDUixvQkFLRyxNQUFNO0FBQ1Qsc0JBS0csTUFBTTtBQUNWOzs7Ozs7Ozs7Ozs7OztvQkFBRTtBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgQ29tcG9uZW50LCBFdmVudEVtaXR0ZXIsIElucHV0LCBPbkNoYW5nZXMsIE91dHB1dCwgU2ltcGxlQ2hhbmdlcyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUHJvY2Vzc0NvbnRlbnRTZXJ2aWNlIH0gZnJvbSAnQGFsZnJlc2NvL2FkZi1jb3JlJztcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICdhZGYtY3JlYXRlLXRhc2stYXR0YWNobWVudCcsXG4gICAgc3R5bGVVcmxzOiBbJy4vY3JlYXRlLXRhc2stYXR0YWNobWVudC5jb21wb25lbnQuc2NzcyddLFxuICAgIHRlbXBsYXRlVXJsOiAnLi9jcmVhdGUtdGFzay1hdHRhY2htZW50LmNvbXBvbmVudC5odG1sJ1xufSlcbmV4cG9ydCBjbGFzcyBBdHRhY2htZW50Q29tcG9uZW50IGltcGxlbWVudHMgT25DaGFuZ2VzIHtcblxuICAgIC8qKiAocmVxdWlyZWQpIFRoZSBudW1lcmljIElEIG9mIHRoZSB0YXNrIHRvIGRpc3BsYXkuICovXG4gICAgQElucHV0KClcbiAgICB0YXNrSWQ6IHN0cmluZztcblxuICAgIC8qKiBFbWl0dGVkIHdoZW4gYW4gZXJyb3Igb2NjdXJzIHdoaWxlIGNyZWF0aW5nIG9yIHVwbG9hZGluZyBhblxuICAgICAqICBhdHRhY2htZW50IGZyb20gdGhlIHVzZXIgd2l0aGluIHRoZSBjb21wb25lbnQuXG4gICAgICovXG4gICAgQE91dHB1dCgpXG4gICAgZXJyb3I6IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XG5cbiAgICAvKiogRW1pdHRlZCB3aGVuIGFuIGF0dGFjaG1lbnQgaXMgY3JlYXRlZCBvciB1cGxvYWRlZCBzdWNjZXNzZnVsbHlcbiAgICAgKiBmcm9tIHdpdGhpbiB0aGUgY29tcG9uZW50LlxuICAgICAqL1xuICAgIEBPdXRwdXQoKVxuICAgIHN1Y2Nlc3M6IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGFjdGl2aXRpQ29udGVudFNlcnZpY2U6IFByb2Nlc3NDb250ZW50U2VydmljZSkge1xuICAgIH1cblxuICAgIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpIHtcbiAgICAgICAgaWYgKGNoYW5nZXNbJ3Rhc2tJZCddICYmIGNoYW5nZXNbJ3Rhc2tJZCddLmN1cnJlbnRWYWx1ZSkge1xuICAgICAgICAgICAgdGhpcy50YXNrSWQgPSBjaGFuZ2VzWyd0YXNrSWQnXS5jdXJyZW50VmFsdWU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBvbkZpbGVVcGxvYWQoZXZlbnQ6IGFueSkge1xuICAgICAgICBjb25zdCBmaWxlc0xpc3Q6IEZpbGVbXSA9IGV2ZW50LmRldGFpbC5maWxlcy5tYXAoKG9iaikgPT4gb2JqLmZpbGUpO1xuXG4gICAgICAgIGZvciAoY29uc3QgZmlsZUluZm9PYmogb2YgZmlsZXNMaXN0KSB7XG4gICAgICAgICAgICBjb25zdCBmaWxlOiBGaWxlID0gZmlsZUluZm9PYmo7XG4gICAgICAgICAgICBjb25zdCBvcHRzID0ge1xuICAgICAgICAgICAgICAgIGlzUmVsYXRlZENvbnRlbnQ6IHRydWVcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB0aGlzLmFjdGl2aXRpQ29udGVudFNlcnZpY2UuY3JlYXRlVGFza1JlbGF0ZWRDb250ZW50KHRoaXMudGFza0lkLCBmaWxlLCBvcHRzKS5zdWJzY3JpYmUoXG4gICAgICAgICAgICAgICAgKHJlcykgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnN1Y2Nlc3MuZW1pdChyZXMpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgKGVycikgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmVycm9yLmVtaXQoZXJyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgfVxufVxuIl19