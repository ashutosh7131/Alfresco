/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, Inject, ViewEncapsulation, ViewChild } from '@angular/core';
import { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';
import { ExternalAlfrescoApiService, AlfrescoApiService, LoginDialogPanelComponent, SearchService, TranslationService, AuthenticationService, SitesService } from '@alfresco/adf-core';
import { DocumentListService } from '@alfresco/adf-content-services';
export class AttachFileWidgetDialogComponent {
    constructor(translation, data, externalApiService, authenticationService, matDialogRef) {
        this.translation = translation;
        this.data = data;
        this.externalApiService = externalApiService;
        this.authenticationService = authenticationService;
        this.matDialogRef = matDialogRef;
        externalApiService.init(data.ecmHost, data.context);
        this.action = data.actionName ? data.actionName.toUpperCase() : 'CHOOSE';
        this.buttonActionName = `ATTACH-FILE.ACTIONS.${this.action}`;
        this.updateTitle('DROPDOWN.MY_FILES_OPTION');
        this.updateExternalHost();
    }
    updateExternalHost() {
        this.authenticationService.onLogin.subscribe(() => this.registerAndClose());
        if (this.externalApiService.getInstance().isLoggedIn()) {
            this.registerAndClose();
        }
    }
    registerAndClose() {
        this.data.registerExternalHost(this.data.accountIdentifier, this.externalApiService);
        if (this.data.loginOnly) {
            this.data.selected.complete();
            this.matDialogRef.close();
        }
    }
    isLoggedIn() {
        return this.externalApiService.getInstance().isLoggedIn();
    }
    performLogin() {
        this.loginPanel.submitForm();
    }
    close() {
        this.data.selected.complete();
    }
    onSelect(nodeList) {
        this.chosenNode = nodeList;
    }
    onSiteChange(siteTitle) {
        this.updateTitle(siteTitle);
    }
    onClick() {
        this.data.selected.next(this.chosenNode);
        this.data.selected.complete();
    }
    updateTitle(siteTitle) {
        if (this.action === 'CHOOSE' && siteTitle) {
            this.title = this.getTitleTranslation(this.action, siteTitle);
        }
    }
    getTitleTranslation(action, name) {
        return this.translation.instant(`ATTACH-FILE.ACTIONS.${action}_ITEM`, { name: this.translation.instant(name) });
    }
    hasNodeSelected() {
        var _a;
        return ((_a = this.chosenNode) === null || _a === void 0 ? void 0 : _a.length) > 0;
    }
}
AttachFileWidgetDialogComponent.decorators = [
    { type: Component, args: [{
                selector: 'adf-attach-file-widget-dialog',
                template: "<header\n    mat-dialog-title\n    data-automation-id=\"content-node-selector-title\">\n    <span *ngIf=\"isLoggedIn(); else loginTitle\">{{title}}</span>\n    <ng-template #loginTitle>{{data.title}}</ng-template>\n</header>\n\n<mat-dialog-content class=\"adf-login-dialog-content\">\n    <adf-login-dialog-panel id=\"attach-file-login-panel\" #adfLoginPanel *ngIf=\"!isLoggedIn()\">\n    </adf-login-dialog-panel>\n    <adf-content-node-selector-panel *ngIf=\"isLoggedIn()\"\n                                     id=\"attach-file-content-node\"\n                                     [currentFolderId]=\"data?.currentFolderId\"\n                                     [isSelectionValid]=\"data?.isSelectionValid\"\n                                     [showFilesInResult]=\"data?.showFilesInResult\"\n                                     (select)=\"onSelect($event)\"\n                                     (siteChange)=\"onSiteChange($event)\">\n    </adf-content-node-selector-panel>\n</mat-dialog-content>\n\n<mat-dialog-actions align=\"end\">\n    <button\n        mat-button\n        (click)=\"close()\"\n        data-automation-id=\"attach-file-dialog-actions-cancel\">{{ 'ATTACH-FILE.ACTIONS.CANCEL' | translate }}\n    </button>\n\n    <button *ngIf=\"!isLoggedIn()\"\n        mat-button\n        (click)=\"performLogin()\"\n        data-automation-id=\"attach-file-dialog-actions-login\">{{ 'ATTACH-FILE.ACTIONS.LOGIN' | translate }}\n    </button>\n\n    <button *ngIf=\"isLoggedIn()\"\n        mat-button\n        [disabled]=\"!hasNodeSelected()\"\n        class=\"adf-choose-action\"\n        (click)=\"onClick()\"\n        data-automation-id=\"attach-file-dialog-actions-choose\">{{ buttonActionName | translate }}\n    </button>\n\n</mat-dialog-actions>\n",
                encapsulation: ViewEncapsulation.None,
                providers: [
                    AuthenticationService,
                    DocumentListService,
                    SitesService,
                    SearchService,
                    { provide: AlfrescoApiService, useClass: ExternalAlfrescoApiService }
                ],
                styles: [".adf-attach-file-widget-dialog .mat-dialog-actions{background-color:var(--theme-background-color);color:var(--theme-foreground-text-color);display:flex;justify-content:flex-end}.adf-attach-file-widget-dialog .mat-dialog-actions button{font-weight:400;text-transform:uppercase}.adf-attach-file-widget-dialog .mat-dialog-actions .adf-choose-action[disabled]{color:var(--theme-secondary-text-color)}.adf-attach-file-widget-dialog .mat-dialog-actions .adf-choose-action:enabled{color:var(--theme-primary-color)}"]
            },] }
];
AttachFileWidgetDialogComponent.ctorParameters = () => [
    { type: TranslationService },
    { type: undefined, decorators: [{ type: Inject, args: [MAT_DIALOG_DATA,] }] },
    { type: AlfrescoApiService },
    { type: AuthenticationService },
    { type: MatDialogRef }
];
AttachFileWidgetDialogComponent.propDecorators = {
    loginPanel: [{ type: ViewChild, args: ['adfLoginPanel',] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXR0YWNoLWZpbGUtd2lkZ2V0LWRpYWxvZy5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiL2hvbWUvdHJhdmlzL2J1aWxkL0FsZnJlc2NvL2FsZnJlc2NvLW5nMi1jb21wb25lbnRzL2xpYi9wcm9jZXNzLXNlcnZpY2VzL3NyYy8iLCJzb3VyY2VzIjpbImxpYi9jb250ZW50LXdpZGdldC9hdHRhY2gtZmlsZS13aWRnZXQtZGlhbG9nLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7O0dBZUc7QUFFSCxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxpQkFBaUIsRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDaEYsT0FBTyxFQUFFLGVBQWUsRUFBRSxZQUFZLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUN6RSxPQUFPLEVBQUUsMEJBQTBCLEVBQUUsa0JBQWtCLEVBQUUseUJBQXlCLEVBQUUsYUFBYSxFQUFFLGtCQUFrQixFQUFFLHFCQUFxQixFQUFFLFlBQVksRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBRXZMLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBZXJFLE1BQU0sT0FBTywrQkFBK0I7SUFVeEMsWUFBb0IsV0FBK0IsRUFDUCxJQUF5QyxFQUNqRSxrQkFBc0MsRUFDdEMscUJBQTRDLEVBQzVDLFlBQTJEO1FBSjNELGdCQUFXLEdBQVgsV0FBVyxDQUFvQjtRQUNQLFNBQUksR0FBSixJQUFJLENBQXFDO1FBQ2pFLHVCQUFrQixHQUFsQixrQkFBa0IsQ0FBb0I7UUFDdEMsMEJBQXFCLEdBQXJCLHFCQUFxQixDQUF1QjtRQUM1QyxpQkFBWSxHQUFaLFlBQVksQ0FBK0M7UUFDcEUsa0JBQW1CLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQzVELElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFD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a0JBQWtCLEVBQUUsUUFBUSxFQUFFLDBCQUEwQixFQUFFO2lCQUFFOzthQUM5RTs7O1lBaEJrRyxrQkFBa0I7NENBNEJwRyxNQUFNLFNBQUMsZUFBZTtZQTVCRixrQkFBa0I7WUFBZ0UscUJBQXFCO1lBRGxILFlBQVk7Ozt5QkFvQmpDLFNBQVMsU0FBQyxlQUFlIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgQ29tcG9uZW50LCBJbmplY3QsIFZpZXdFbmNhcHN1bGF0aW9uLCBWaWV3Q2hpbGQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE1BVF9ESUFMT0dfREFUQSwgTWF0RGlhbG9nUmVmIH0gZnJvbSAnQGFuZ3VsYXIvbWF0ZXJpYWwvZGlhbG9nJztcbmltcG9ydCB7IEV4dGVybmFsQWxmcmVzY29BcGlTZXJ2aWNlLCBBbGZyZXNjb0FwaVNlcnZpY2UsIExvZ2luRGlhbG9nUGFuZWxDb21wb25lbnQsIFNlYXJjaFNlcnZpY2UsIFRyYW5zbGF0aW9uU2VydmljZSwgQXV0aGVudGljYXRpb25TZXJ2aWNlLCBTaXRlc1NlcnZpY2UgfSBmcm9tICdAYWxmcmVzY28vYWRmLWNvcmUnO1xuaW1wb3J0IHsgQXR0YWNoRmlsZVdpZGdldERpYWxvZ0NvbXBvbmVudERhdGEgfSBmcm9tICcuL2F0dGFjaC1maWxlLXdpZGdldC1kaWFsb2ctY29tcG9uZW50LmludGVyZmFjZSc7XG5pbXBvcnQgeyBEb2N1bWVudExpc3RTZXJ2aWNlIH0gZnJvbSAnQGFsZnJlc2NvL2FkZi1jb250ZW50LXNlcnZpY2VzJztcbmltcG9ydCB7IE5vZGUgfSBmcm9tICdAYWxmcmVzY28vanMtYXBpJztcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICdhZGYtYXR0YWNoLWZpbGUtd2lkZ2V0LWRpYWxvZycsXG4gICAgdGVtcGxhdGVVcmw6ICcuL2F0dGFjaC1maWxlLXdpZGdldC1kaWFsb2cuY29tcG9uZW50Lmh0bWwnLFxuICAgIHN0eWxlVXJsczogWycuL2F0dGFjaC1maWxlLXdpZGdldC1kaWFsb2cuY29tcG9uZW50LnNjc3MnXSxcbiAgICBlbmNhcHN1bGF0aW9uOiBWaWV3RW5jYXBzdWxhdGlvbi5Ob25lLFxuICAgIHByb3ZpZGVyczogW1xuICAgICAgICBBdXRoZW50aWNhdGlvblNlcnZpY2UsXG4gICAgICAgIERvY3VtZW50TGlzdFNlcnZpY2UsXG4gICAgICAgIFNpdGVzU2VydmljZSxcbiAgICAgICAgU2VhcmNoU2VydmljZSxcbiAgICAgICAgeyBwcm92aWRlOiBBbGZyZXNjb0FwaVNlcnZpY2UsIHVzZUNsYXNzOiBFeHRlcm5hbEFsZnJlc2NvQXBpU2VydmljZSB9IF1cbn0pXG5leHBvcnQgY2xhc3MgQXR0YWNoRmlsZVdpZGdldERpYWxvZ0NvbXBvbmVudCB7XG5cbiAgICBAVmlld0NoaWxkKCdhZGZMb2dpblBhbmVsJylcbiAgICBsb2dpblBhbmVsOiBMb2dpbkRpYWxvZ1BhbmVsQ29tcG9uZW50O1xuXG4gICAgdGl0bGU6IHN0cmluZztcbiAgICBhY3Rpb246IHN0cmluZztcbiAgICBidXR0b25BY3Rpb25OYW1lOiBzdHJpbmc7XG4gICAgY2hvc2VuTm9kZTogTm9kZVtdO1xuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSB0cmFuc2xhdGlvbjogVHJhbnNsYXRpb25TZXJ2aWNlLFxuICAgICAgICAgICAgICAgIEBJbmplY3QoTUFUX0RJQUxPR19EQVRBKSBwdWJsaWMgZGF0YTogQXR0YWNoRmlsZVdpZGdldERpYWxvZ0NvbXBvbmVudERhdGEsXG4gICAgICAgICAgICAgICAgcHJpdmF0ZSBleHRlcm5hbEFwaVNlcnZpY2U6IEFsZnJlc2NvQXBpU2VydmljZSxcbiAgICAgICAgICAgICAgICBwcml2YXRlIGF1dGhlbnRpY2F0aW9uU2VydmljZTogQXV0aGVudGljYXRpb25TZXJ2aWNlLFxuICAgICAgICAgICAgICAgIHByaXZhdGUgbWF0RGlhbG9nUmVmOiBNYXREaWFsb2dSZWY8QXR0YWNoRmlsZVdpZGdldERpYWxvZ0NvbXBvbmVudD4pIHtcbiAgICAgICAgKDxhbnk+IGV4dGVybmFsQXBpU2VydmljZSkuaW5pdChkYXRhLmVjbUhvc3QsIGRhdGEuY29udGV4dCk7XG4gICAgICAgIHRoaXMuYWN0aW9uID0gZGF0YS5hY3Rpb25OYW1lID8gZGF0YS5hY3Rpb25OYW1lLnRvVXBwZXJDYXNlKCkgOiAnQ0hPT1NFJztcbiAgICAgICAgdGhpcy5idXR0b25BY3Rpb25OYW1lID0gYEFUVEFDSC1GSUxFLkFDVElPTlMuJHt0aGlzLmFjdGlvbn1gO1xuICAgICAgICB0aGlzLnVwZGF0ZVRpdGxlKCdEUk9QRE9XTi5NWV9GSUxFU19PUFRJT04nKTtcbiAgICAgICAgdGhpcy51cGRhdGVFeHRlcm5hbEhvc3QoKTtcbiAgICB9XG5cbiAgICB1cGRhdGVFeHRlcm5hbEhvc3QoKSB7XG4gICAgICAgIHRoaXMuYXV0aGVudGljYXRpb25TZXJ2aWNlLm9uTG9naW4uc3Vic2NyaWJlKCgpID0+IHRoaXMucmVnaXN0ZXJBbmRDbG9zZSgpKTtcbiAgICAgICAgaWYgKHRoaXMuZXh0ZXJuYWxBcGlTZXJ2aWNlLmdldEluc3RhbmNlKCkuaXNMb2dnZWRJbigpKSB7XG4gICAgICAgICAgICB0aGlzLnJlZ2lzdGVyQW5kQ2xvc2UoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgcmVnaXN0ZXJBbmRDbG9zZSgpIHtcbiAgICAgICAgdGhpcy5kYXRhLnJlZ2lzdGVyRXh0ZXJuYWxIb3N0KHRoaXMuZGF0YS5hY2NvdW50SWRlbnRpZmllciwgdGhpcy5leHRlcm5hbEFwaVNlcnZpY2UpO1xuICAgICAgICBpZiAodGhpcy5kYXRhLmxvZ2luT25seSkge1xuICAgICAgICAgICAgdGhpcy5kYXRhLnNlbGVjdGVkLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICB0aGlzLm1hdERpYWxvZ1JlZi5jbG9zZSgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaXNMb2dnZWRJbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZXh0ZXJuYWxBcGlTZXJ2aWNlLmdldEluc3RhbmNlKCkuaXNMb2dnZWRJbigpO1xuICAgIH1cblxuICAgIHBlcmZvcm1Mb2dpbigpIHtcbiAgICAgICAgdGhpcy5sb2dpblBhbmVsLnN1Ym1pdEZvcm0oKTtcbiAgICB9XG5cbiAgICBjbG9zZSgpIHtcbiAgICAgICAgdGhpcy5kYXRhLnNlbGVjdGVkLmNvbXBsZXRlKCk7XG4gICAgfVxuXG4gICAgb25TZWxlY3Qobm9kZUxpc3Q6IE5vZGVbXSkge1xuICAgICAgICB0aGlzLmNob3Nlbk5vZGUgPSBub2RlTGlzdDtcbiAgICB9XG5cbiAgICBvblNpdGVDaGFuZ2Uoc2l0ZVRpdGxlOiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy51cGRhdGVUaXRsZShzaXRlVGl0bGUpO1xuICAgIH1cblxuICAgIG9uQ2xpY2soKSB7XG4gICAgICAgIHRoaXMuZGF0YS5zZWxlY3RlZC5uZXh0KHRoaXMuY2hvc2VuTm9kZSk7XG4gICAgICAgIHRoaXMuZGF0YS5zZWxlY3RlZC5jb21wbGV0ZSgpO1xuICAgIH1cblxuICAgIHVwZGF0ZVRpdGxlKHNpdGVUaXRsZTogc3RyaW5nKSB7XG4gICAgICAgIGlmICh0aGlzLmFjdGlvbiA9PT0gJ0NIT09TRScgJiYgc2l0ZVRpdGxlKSB7XG4gICAgICAgICAgICB0aGlzLnRpdGxlID0gdGhpcy5nZXRUaXRsZVRyYW5zbGF0aW9uKHRoaXMuYWN0aW9uLCBzaXRlVGl0bGUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZ2V0VGl0bGVUcmFuc2xhdGlvbihhY3Rpb246IHN0cmluZywgbmFtZT86IHN0cmluZyk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiB0aGlzLnRyYW5zbGF0aW9uLmluc3RhbnQoYEFUVEFDSC1GSUxFLkFDVElPTlMuJHthY3Rpb259X0lURU1gLCB7IG5hbWU6IHRoaXMudHJhbnNsYXRpb24uaW5zdGFudChuYW1lKSB9KTtcbiAgICB9XG5cbiAgICBoYXNOb2RlU2VsZWN0ZWQoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLmNob3Nlbk5vZGU/Lmxlbmd0aCA+IDA7XG4gICAgfVxufVxuIl19