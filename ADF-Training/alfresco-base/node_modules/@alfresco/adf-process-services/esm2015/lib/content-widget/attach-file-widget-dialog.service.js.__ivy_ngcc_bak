import { MatDialog } from '@angular/material/dialog';
import { EventEmitter, Injectable, Output } from '@angular/core';
import { TranslationService } from '@alfresco/adf-core';
import { of, Subject } from 'rxjs';
import { ContentApi } from '@alfresco/js-api';
import { AttachFileWidgetDialogComponent } from './attach-file-widget-dialog.component';
import { switchMap } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@angular/material/dialog";
import * as i2 from "@alfresco/adf-core";
export class AttachFileWidgetDialogService {
    constructor(dialog, translation) {
        this.dialog = dialog;
        this.translation = translation;
        this.externalApis = {};
        this.error = new EventEmitter();
    }
    openLogin(repository, currentFolderId = '-my-', accountIdentifier) {
        const { title, ecmHost, selected, registerExternalHost } = this.constructPayload(repository);
        const data = {
            title,
            selected,
            ecmHost,
            currentFolderId,
            isSelectionValid: (entry) => entry.isFile,
            showFilesInResult: true,
            registerExternalHost,
            accountIdentifier
        };
        this.openLoginDialog(data, 'adf-attach-file-widget-dialog', '630px');
        return selected;
    }
    openLoginDialog(data, currentPanelClass, chosenWidth) {
        this.dialog.open(AttachFileWidgetDialogComponent, { data, panelClass: currentPanelClass, width: chosenWidth });
    }
    showExternalHostLoginDialog(repository) {
        const data = Object.assign(Object.assign({}, this.constructPayload(repository)), { loginOnly: true });
        return this.dialog.open(AttachFileWidgetDialogComponent, { data, panelClass: 'adf-attach-file-widget-dialog', width: '630px' })
            .afterClosed();
    }
    downloadURL(repository, sourceId) {
        var _a;
        const { accountIdentifier } = this.constructPayload(repository);
        if ((_a = this.externalApis[accountIdentifier]) === null || _a === void 0 ? void 0 : _a.getInstance()) {
            const contentApi = new ContentApi(this.externalApis[accountIdentifier].getInstance());
            if (this.externalApis[accountIdentifier].getInstance().isLoggedIn()) {
                return of(contentApi.getContentUrl(sourceId));
            }
        }
        return this.showExternalHostLoginDialog(repository).pipe(switchMap(() => {
            const contentApi = new ContentApi(this.externalApis[accountIdentifier].getInstance());
            return of(contentApi.getContentUrl(sourceId));
        }));
    }
    constructPayload(repository) {
        const accountIdentifier = 'alfresco-' + repository.id + '-' + repository.name;
        const ecmHost = repository.repositoryUrl.replace('/alfresco', '');
        const selected = new Subject();
        selected.subscribe({
            complete: this.close.bind(this)
        });
        const title = this.getLoginTitleTranslation(ecmHost);
        const registerExternalHost = this.addService.bind(this);
        return { ecmHost, accountIdentifier, selected, title, registerExternalHost };
    }
    addService(accountIdentifier, apiService) {
        if (!this.externalApis[accountIdentifier]) {
            this.externalApis[accountIdentifier] = apiService;
        }
    }
    close() {
        this.dialog.closeAll();
    }
    getLoginTitleTranslation(ecmHost) {
        return this.translation.instant(`ATTACH-FILE.DIALOG.LOGIN`, { ecmHost });
    }
}
AttachFileWidgetDialogService.ɵprov = i0.ɵɵdefineInjectable({ factory: function AttachFileWidgetDialogService_Factory() { return new AttachFileWidgetDialogService(i0.ɵɵinject(i1.MatDialog), i0.ɵɵinject(i2.TranslationService)); }, token: AttachFileWidgetDialogService, providedIn: "root" });
AttachFileWidgetDialogService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
AttachFileWidgetDialogService.ctorParameters = () => [
    { type: MatDialog },
    { type: TranslationService }
];
AttachFileWidgetDialogService.propDecorators = {
    error: [{ type: Output }]
};
//# sourceMappingURL=data:application/json;base64,