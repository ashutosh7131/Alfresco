/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { TranslationService, PeopleProcessService } from '@alfresco/adf-core';
import { Component, EventEmitter, Input, Output, ViewEncapsulation } from '@angular/core';
import { FormControl } from '@angular/forms';
import { debounceTime, switchMap } from 'rxjs/operators';
import { of } from 'rxjs';
import { getDisplayUser } from '../../helpers/get-display-user';
export class PeopleSearchFieldComponent {
    constructor(peopleProcessService, translationService) {
        this.peopleProcessService = peopleProcessService;
        this.translationService = translationService;
        this.rowClick = new EventEmitter();
        this.searchUser = new FormControl();
        this.defaultPlaceholder = 'ADF_TASK_LIST.PEOPLE.SEARCH_USER';
        this.users$ = this.searchUser.valueChanges
            .pipe(debounceTime(200), switchMap((searchWord) => {
            if (searchWord && searchWord.trim()) {
                return this.performSearch(searchWord);
            }
            else {
                return of([]);
            }
        }));
        this.defaultPlaceholder = this.translationService.instant(this.defaultPlaceholder);
    }
    reset() {
        this.searchUser.reset();
    }
    get searchPlaceholder() {
        return this.placeholder || this.defaultPlaceholder;
    }
    onRowClick(model) {
        this.rowClick.emit(model);
    }
    getDisplayUser(firstName, lastName, delimiter = '-') {
        return getDisplayUser(firstName, lastName, delimiter);
    }
    getInitialUserName(firstName, lastName) {
        firstName = (firstName !== null && firstName !== '' ? firstName[0] : '');
        lastName = (lastName !== null && lastName !== '' ? lastName[0] : '');
        return this.getDisplayUser(firstName, lastName, '');
    }
}
PeopleSearchFieldComponent.decorators = [
    { type: Component, args: [{
                selector: 'adf-people-search-field',
                template: "<mat-form-field class=\"adf-search-text-container\">\n    <input\n        matInput\n        placeholder=\"{{ searchPlaceholder }}\"\n        type=\"text\"\n        id=\"userSearchText\"\n        [value]=\"\"\n        [formControl]=\"searchUser\"\n        data-automation-id=\"adf-people-search-input\">\n</mat-form-field>\n<ng-container *ngIf=\"users$ | async; let users\">\n    <div class=\"adf-search-list-container\" id=\"search-people-list\" *ngIf=\"users.length > 0\">\n        <adf-people-list [users]=\"users\" (clickRow)=\"onRowClick($event)\">\n            <data-columns>\n                <data-column key=\"firstName\">\n                    <ng-template let-entry=\"$implicit\">\n                            <div *ngIf=\"!entry.row.obj.pictureId\" class=\"adf-people-pic\">\n                                {{getInitialUserName(entry.row.obj.firstName, entry.row.obj.lastName)}}</div>\n                            <div>\n                                <img [alt]=\"getDisplayUser(entry.row.obj.firstName, entry.row.obj.lastName, ' ')\" *ngIf=\"entry.row.obj.pictureId\" class=\"adf-people-img\"\n                                    [src]=\"peopleProcessService.getUserImage(entry.row.obj)\"/>\n                            </div>\n                    </ng-template>\n                </data-column>\n                <data-column key=\"email\" class=\"adf-full-width\">\n                    <ng-template let-entry=\"$implicit\">\n                        <div [attr.data-automation-id]=\"'adf-people-full-name-'+ getDisplayUser(entry.row.obj.firstName, entry.row.obj.lastName, '-')\" class=\"adf-people-full-name\">{{ getDisplayUser(entry.row.obj.firstName, entry.row.obj.lastName, ' ') }}</div>\n                    </ng-template>\n                </data-column>\n            </data-columns>\n        </adf-people-list>\n    </div>\n</ng-container>\n",
                host: { 'class': 'adf-people-search-field' },
                encapsulation: ViewEncapsulation.None,
                styles: [".adf-people-search-field,.adf-people-search-field .adf-search-text-container{width:100%}.adf-people-search-field .adf-search-text-container input{line-height:normal}.adf-people-search-field .adf-search-list-container{max-height:152px;overflow-y:auto;width:100%}.adf-people-search-field adf-people-list ::ng-deep adf-datatable ::ng-deep thead{display:none}.adf-people-search-field .adf-people-pic{background:var(--theme-primary-color);border-radius:90%;color:#fff;font-size:18px;font-weight:bolder;padding:10px 5px;text-align:center;text-transform:uppercase;vertical-align:text-bottom;width:30px}.adf-people-search-field .adf-people-img{border-radius:90%;height:40px;vertical-align:middle;width:40px}"]
            },] }
];
PeopleSearchFieldComponent.ctorParameters = () => [
    { type: PeopleProcessService },
    { type: TranslationService }
];
PeopleSearchFieldComponent.propDecorators = {
    performSearch: [{ type: Input }],
    placeholder: [{ type: Input }],
    rowClick: [{ type: Output }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGVvcGxlLXNlYXJjaC1maWVsZC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiL2hvbWUvdHJhdmlzL2J1aWxkL0FsZnJlc2NvL2FsZnJlc2NvLW5nMi1jb21wb25lbnRzL2xpYi9wcm9jZXNzLXNlcnZpY2VzL3NyYy8iLCJzb3VyY2VzIjpbImxpYi9wZW9wbGUvY29tcG9uZW50cy9wZW9wbGUtc2VhcmNoLWZpZWxkL3Blb3BsZS1zZWFyY2gtZmllbGQuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7R0FlRztBQUVILE9BQU8sRUFBb0Isa0JBQWtCLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUNoRyxPQUFPLEVBQUUsU0FBUyxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLGlCQUFpQixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzFGLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUM3QyxPQUFPLEVBQUUsWUFBWSxFQUFFLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3pELE9BQU8sRUFBYyxFQUFFLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFFdEMsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBVWhFLE1BQU0sT0FBTywwQkFBMEI7SUFnQm5DLFlBQW1CLG9CQUEwQyxFQUN6QyxrQkFBc0M7UUFEdkMseUJBQW9CLEdBQXBCLG9CQUFvQixDQUFzQjtRQUN6Qyx1QkFBa0IsR0FBbEIsa0JBQWtCLENBQW9CO1FBUjFELGFBQVEsR0FBRyxJQUFJLFlBQVksRUFBb0IsQ0FBQztRQUdoRCxlQUFVLEdBQWdCLElBQUksV0FBVyxFQUFFLENBQUM7UUFFNUMsdUJBQWtCLEdBQUcsa0NBQWtDLENBQUM7UUFJcEQsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLFlBQVk7YUFDckMsSUFBSSxDQUNELFlBQVksQ0FBQyxHQUFHLENBQUMsRUFDakIsU0FBUyxDQUFDLENBQUMsVUFBa0IsRUFBRSxFQUFFO1lBQzdCLElBQUksVUFBVSxJQUFJLFVBQVUsQ0FBQyxJQUFJLEVBQUUsRUFBRTtnQkFDakMsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLFVBQVUsQ0FBQyxDQUFDO2FBQ3pDO2lCQUFNO2dCQUNILE9BQU8sRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO2FBQ2pCO1FBQ0wsQ0FBQyxDQUFDLENBQ0wsQ0FBQztRQUVOLElBQUksQ0FBQyxrQkFBa0IsR0FBRyxJQUFJLENBQUMsa0JBQWtCLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO0lBQ3ZGLENBQUM7SUFFRCxLQUFLO1FBQ0QsSUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUM1QixDQUFDO0lBRUQsSUFBSSxpQkFBaUI7UUFDakIsT0FBTyxJQUFJLENBQUMsV0FBVyxJQUFJLElBQUksQ0FBQyxrQkFBa0IsQ0FBQztJQUN2RCxDQUFDO0lBRUQsVUFBVSxDQUFDLEtBQXVCO1FBQzlCLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzlCLENBQUM7SUFFRCxjQUFjLENBQUMsU0FBaUIsRUFBRSxRQUFnQixFQUFFLFlBQW9CLEdBQUc7UUFDdkUsT0FBTyxjQUFjLENBQUMsU0FBUyxFQUFFLFFBQVEsRUFBRSxTQUFTLENBQUMsQ0FBQztJQUMxRCxDQUFDO0lBRUQsa0JBQWtCLENBQUMsU0FBaUIsRUFBRSxRQUFnQjtRQUNsRCxTQUFTLEdBQUcsQ0FBQyxTQUFTLEtBQUssSUFBSSxJQUFJLFNBQVMsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDekUsUUFBUSxHQUFHLENBQUMsUUFBUSxLQUFLLElBQUksSUFBSSxRQUFRLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ3JFLE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQyxTQUFTLEVBQUUsUUFBUSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQ3hELENBQUM7OztZQTdESixTQUFTLFNBQUM7Z0JBQ1AsUUFBUSxFQUFFLHlCQUF5QjtnQkFDbkMsODBEQUFtRDtnQkFFbkQsSUFBSSxFQUFFLEVBQUUsT0FBTyxFQUFFLHlCQUF5QixFQUFFO2dCQUM1QyxhQUFhLEVBQUUsaUJBQWlCLENBQUMsSUFBSTs7YUFDeEM7OztZQWQ4QyxvQkFBb0I7WUFBeEMsa0JBQWtCOzs7NEJBa0J4QyxLQUFLOzBCQUdMLEtBQUs7dUJBR0wsTUFBTSIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IFVzZXJQcm9jZXNzTW9kZWwsIFRyYW5zbGF0aW9uU2VydmljZSwgUGVvcGxlUHJvY2Vzc1NlcnZpY2UgfSBmcm9tICdAYWxmcmVzY28vYWRmLWNvcmUnO1xuaW1wb3J0IHsgQ29tcG9uZW50LCBFdmVudEVtaXR0ZXIsIElucHV0LCBPdXRwdXQsIFZpZXdFbmNhcHN1bGF0aW9uIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBGb3JtQ29udHJvbCB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IGRlYm91bmNlVGltZSwgc3dpdGNoTWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgb2YgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IFBlcmZvcm1TZWFyY2hDYWxsYmFjayB9IGZyb20gJy4uLy4uL2ludGVyZmFjZXMvcGVyZm9ybS1zZWFyY2gtY2FsbGJhY2suaW50ZXJmYWNlJztcbmltcG9ydCB7IGdldERpc3BsYXlVc2VyIH0gZnJvbSAnLi4vLi4vaGVscGVycy9nZXQtZGlzcGxheS11c2VyJztcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICdhZGYtcGVvcGxlLXNlYXJjaC1maWVsZCcsXG4gICAgdGVtcGxhdGVVcmw6ICcuL3Blb3BsZS1zZWFyY2gtZmllbGQuY29tcG9uZW50Lmh0bWwnLFxuICAgIHN0eWxlVXJsczogWycuL3Blb3BsZS1zZWFyY2gtZmllbGQuY29tcG9uZW50LnNjc3MnXSxcbiAgICBob3N0OiB7ICdjbGFzcyc6ICdhZGYtcGVvcGxlLXNlYXJjaC1maWVsZCcgfSxcbiAgICBlbmNhcHN1bGF0aW9uOiBWaWV3RW5jYXBzdWxhdGlvbi5Ob25lXG59KVxuXG5leHBvcnQgY2xhc3MgUGVvcGxlU2VhcmNoRmllbGRDb21wb25lbnQge1xuXG4gICAgQElucHV0KClcbiAgICBwZXJmb3JtU2VhcmNoOiBQZXJmb3JtU2VhcmNoQ2FsbGJhY2s7XG5cbiAgICBASW5wdXQoKVxuICAgIHBsYWNlaG9sZGVyOiBzdHJpbmc7XG5cbiAgICBAT3V0cHV0KClcbiAgICByb3dDbGljayA9IG5ldyBFdmVudEVtaXR0ZXI8VXNlclByb2Nlc3NNb2RlbD4oKTtcblxuICAgIHVzZXJzJDogT2JzZXJ2YWJsZTxVc2VyUHJvY2Vzc01vZGVsW10+O1xuICAgIHNlYXJjaFVzZXI6IEZvcm1Db250cm9sID0gbmV3IEZvcm1Db250cm9sKCk7XG5cbiAgICBkZWZhdWx0UGxhY2Vob2xkZXIgPSAnQURGX1RBU0tfTElTVC5QRU9QTEUuU0VBUkNIX1VTRVInO1xuXG4gICAgY29uc3RydWN0b3IocHVibGljIHBlb3BsZVByb2Nlc3NTZXJ2aWNlOiBQZW9wbGVQcm9jZXNzU2VydmljZSxcbiAgICAgICAgICAgICAgICBwcml2YXRlIHRyYW5zbGF0aW9uU2VydmljZTogVHJhbnNsYXRpb25TZXJ2aWNlKSB7XG4gICAgICAgIHRoaXMudXNlcnMkID0gdGhpcy5zZWFyY2hVc2VyLnZhbHVlQ2hhbmdlc1xuICAgICAgICAgICAgLnBpcGUoXG4gICAgICAgICAgICAgICAgZGVib3VuY2VUaW1lKDIwMCksXG4gICAgICAgICAgICAgICAgc3dpdGNoTWFwKChzZWFyY2hXb3JkOiBzdHJpbmcpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNlYXJjaFdvcmQgJiYgc2VhcmNoV29yZC50cmltKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnBlcmZvcm1TZWFyY2goc2VhcmNoV29yZCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gb2YoW10pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgdGhpcy5kZWZhdWx0UGxhY2Vob2xkZXIgPSB0aGlzLnRyYW5zbGF0aW9uU2VydmljZS5pbnN0YW50KHRoaXMuZGVmYXVsdFBsYWNlaG9sZGVyKTtcbiAgICB9XG5cbiAgICByZXNldCgpIHtcbiAgICAgICAgdGhpcy5zZWFyY2hVc2VyLnJlc2V0KCk7XG4gICAgfVxuXG4gICAgZ2V0IHNlYXJjaFBsYWNlaG9sZGVyKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiB0aGlzLnBsYWNlaG9sZGVyIHx8IHRoaXMuZGVmYXVsdFBsYWNlaG9sZGVyO1xuICAgIH1cblxuICAgIG9uUm93Q2xpY2sobW9kZWw6IFVzZXJQcm9jZXNzTW9kZWwpIHtcbiAgICAgICAgdGhpcy5yb3dDbGljay5lbWl0KG1vZGVsKTtcbiAgICB9XG5cbiAgICBnZXREaXNwbGF5VXNlcihmaXJzdE5hbWU6IHN0cmluZywgbGFzdE5hbWU6IHN0cmluZywgZGVsaW1pdGVyOiBzdHJpbmcgPSAnLScpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gZ2V0RGlzcGxheVVzZXIoZmlyc3ROYW1lLCBsYXN0TmFtZSwgZGVsaW1pdGVyKTtcbiAgICB9XG5cbiAgICBnZXRJbml0aWFsVXNlck5hbWUoZmlyc3ROYW1lOiBzdHJpbmcsIGxhc3ROYW1lOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgICAgICBmaXJzdE5hbWUgPSAoZmlyc3ROYW1lICE9PSBudWxsICYmIGZpcnN0TmFtZSAhPT0gJycgPyBmaXJzdE5hbWVbMF0gOiAnJyk7XG4gICAgICAgIGxhc3ROYW1lID0gKGxhc3ROYW1lICE9PSBudWxsICYmIGxhc3ROYW1lICE9PSAnJyA/IGxhc3ROYW1lWzBdIDogJycpO1xuICAgICAgICByZXR1cm4gdGhpcy5nZXREaXNwbGF5VXNlcihmaXJzdE5hbWUsIGxhc3ROYW1lLCAnJyk7XG4gICAgfVxufVxuIl19