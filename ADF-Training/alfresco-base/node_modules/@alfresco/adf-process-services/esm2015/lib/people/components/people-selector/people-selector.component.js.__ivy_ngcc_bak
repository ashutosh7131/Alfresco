/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, ViewChild, ViewEncapsulation, EventEmitter, Input, Output } from '@angular/core';
import { PeopleProcessService, UserProcessModel, LogService, TranslationService } from '@alfresco/adf-core';
import { PeopleSearchFieldComponent } from '../people-search-field/people-search-field.component';
import { getDisplayUser } from '../../helpers/get-display-user';
import { of } from 'rxjs';
import { catchError } from 'rxjs/operators';
const DEFAULT_ASSIGNEE_PLACEHOLDER = 'ADF_TASK_LIST.PEOPLE.ASSIGNEE';
export class PeopleSelectorComponent {
    constructor(peopleProcessService, logService, translationService) {
        this.peopleProcessService = peopleProcessService;
        this.logService = logService;
        this.translationService = translationService;
        this.peopleIdChange = new EventEmitter();
        this.performSearch = this.searchUser.bind(this);
        this.defaultPlaceholder = this.translationService.instant(DEFAULT_ASSIGNEE_PLACEHOLDER);
    }
    searchUser(searchWord) {
        return this.peopleProcessService.getWorkflowUsers(undefined, searchWord)
            .pipe(catchError(this.onSearchUserError.bind(this)));
    }
    onSearchUserError() {
        this.logService.error('getWorkflowUsers threw error');
        return of([]);
    }
    userSelected(user) {
        this.updateUserSelection(user);
    }
    userDeselected() {
        this.updateUserSelection(undefined);
    }
    updateUserSelection(user) {
        this.selectedUser = user;
        this.peopleIdChange.emit(user && user.id || undefined);
        this.searchFieldComponent.reset();
    }
    get placeholder() {
        if (!this.selectedUser) {
            return this.defaultPlaceholder;
        }
        return getDisplayUser(this.selectedUser.firstName, this.selectedUser.lastName, ' ');
    }
}
PeopleSelectorComponent.decorators = [
    { type: Component, args: [{
                selector: 'adf-people-selector',
                template: "<adf-people-search-field\n    #peopleSearchField\n    class=\"adf-people-selector-field\"\n    [performSearch]=\"performSearch\"\n    [placeholder]=\"placeholder\"\n    (rowClick)=\"userSelected($event)\">\n</adf-people-search-field>\n<button\n    *ngIf=\"selectedUser\"\n    mat-icon-button\n    class=\"adf-people-selector-deselect\"\n    data-automation-id=\"adf-people-selector-deselect\"\n    (click)=\"userDeselected()\">\n        <mat-icon>cancel</mat-icon>\n</button>\n",
                host: { 'class': 'adf-people-selector' },
                encapsulation: ViewEncapsulation.None,
                styles: [".adf-people-selector{display:flex;flex-flow:row;justify-content:space-between}.adf-people-selector-field{flex:1 1 auto}.adf-people-selector-deselect{flex:0 0 auto;right:5px;top:5px}"]
            },] }
];
PeopleSelectorComponent.ctorParameters = () => [
    { type: PeopleProcessService },
    { type: LogService },
    { type: TranslationService }
];
PeopleSelectorComponent.propDecorators = {
    peopleId: [{ type: Input }],
    peopleIdChange: [{ type: Output }],
    searchFieldComponent: [{ type: ViewChild, args: ['peopleSearchField', { static: true },] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGVvcGxlLXNlbGVjdG9yLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIvaG9tZS90cmF2aXMvYnVpbGQvQWxmcmVzY28vYWxmcmVzY28tbmcyLWNvbXBvbmVudHMvbGliL3Byb2Nlc3Mtc2VydmljZXMvc3JjLyIsInNvdXJjZXMiOlsibGliL3Blb3BsZS9jb21wb25lbnRzL3Blb3BsZS1zZWxlY3Rvci9wZW9wbGUtc2VsZWN0b3IuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7R0FlRztBQUVILE9BQU8sRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLGlCQUFpQixFQUFFLFlBQVksRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRXJHLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxnQkFBZ0IsRUFBRSxVQUFVLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUM1RyxPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSxzREFBc0QsQ0FBQztBQUNsRyxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFDaEUsT0FBTyxFQUFjLEVBQUUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUN0QyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFNUMsTUFBTSw0QkFBNEIsR0FBRywrQkFBK0IsQ0FBQztBQVVyRSxNQUFNLE9BQU8sdUJBQXVCO0lBZ0JoQyxZQUNZLG9CQUEwQyxFQUMxQyxVQUFzQixFQUN0QixrQkFBc0M7UUFGdEMseUJBQW9CLEdBQXBCLG9CQUFvQixDQUFzQjtRQUMxQyxlQUFVLEdBQVYsVUFBVSxDQUFZO1FBQ3RCLHVCQUFrQixHQUFsQixrQkFBa0IsQ0FBb0I7UUFFOUMsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO1FBQ3pDLElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDaEQsSUFBSSxDQUFDLGtCQUFrQixHQUFHLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxPQUFPLENBQUMsNEJBQTRCLENBQUMsQ0FBQztJQUM1RixDQUFDO0lBRUQsVUFBVSxDQUFDLFVBQWtCO1FBQ3pCLE9BQU8sSUFBSSxDQUFDLG9CQUFvQixDQUFDLGdCQUFnQixDQUFDLFNBQVMsRUFBRSxVQUFVLENBQUM7YUFDbkUsSUFBSSxDQUNELFVBQVUsQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQ2hELENBQUM7SUFDVixDQUFDO0lBRU8saUJBQWlCO1FBQ3JCLElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLDhCQUE4QixDQUFDLENBQUM7UUFDdEQsT0FBTyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDbEIsQ0FBQztJQUVELFlBQVksQ0FBQyxJQUFzQjtRQUMvQixJQUFJLENBQUMsbUJBQW1CLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDbkMsQ0FBQztJQUVELGNBQWM7UUFDVixJQUFJLENBQUMsbUJBQW1CLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDeEMsQ0FBQztJQUVPLG1CQUFtQixDQUFDLElBQXNCO1FBQzlDLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDO1FBQ3pCLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsRUFBRSxJQUFJLFNBQVMsQ0FBQyxDQUFDO1FBQ3ZELElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUN0QyxDQUFDO0lBRUQsSUFBSSxXQUFXO1FBQ1gsSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLEVBQUU7WUFDcEIsT0FBTyxJQUFJLENBQUMsa0JBQWtCLENBQUM7U0FDbEM7UUFFRCxPQUFPLGNBQWMsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsRUFBRSxHQUFHLENBQUMsQ0FBQztJQUN4RixDQUFDOzs7WUFsRUosU0FBUyxTQUFDO2dCQUNQLFFBQVEsRUFBRSxxQkFBcUI7Z0JBQy9CLHllQUErQztnQkFFL0MsSUFBSSxFQUFFLEVBQUUsT0FBTyxFQUFFLHFCQUFxQixFQUFFO2dCQUN4QyxhQUFhLEVBQUUsaUJBQWlCLENBQUMsSUFBSTs7YUFDeEM7OztZQWRRLG9CQUFvQjtZQUFvQixVQUFVO1lBQUUsa0JBQWtCOzs7dUJBa0IxRSxLQUFLOzZCQUlMLE1BQU07bUNBR04sU0FBUyxTQUFDLG1CQUFtQixFQUFFLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IENvbXBvbmVudCwgVmlld0NoaWxkLCBWaWV3RW5jYXBzdWxhdGlvbiwgRXZlbnRFbWl0dGVyLCBJbnB1dCwgT3V0cHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBQZXJmb3JtU2VhcmNoQ2FsbGJhY2sgfSBmcm9tICcuLi8uLi9pbnRlcmZhY2VzL3BlcmZvcm0tc2VhcmNoLWNhbGxiYWNrLmludGVyZmFjZSc7XG5pbXBvcnQgeyBQZW9wbGVQcm9jZXNzU2VydmljZSwgVXNlclByb2Nlc3NNb2RlbCwgTG9nU2VydmljZSwgVHJhbnNsYXRpb25TZXJ2aWNlIH0gZnJvbSAnQGFsZnJlc2NvL2FkZi1jb3JlJztcbmltcG9ydCB7IFBlb3BsZVNlYXJjaEZpZWxkQ29tcG9uZW50IH0gZnJvbSAnLi4vcGVvcGxlLXNlYXJjaC1maWVsZC9wZW9wbGUtc2VhcmNoLWZpZWxkLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBnZXREaXNwbGF5VXNlciB9IGZyb20gJy4uLy4uL2hlbHBlcnMvZ2V0LWRpc3BsYXktdXNlcic7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBvZiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgY2F0Y2hFcnJvciB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuY29uc3QgREVGQVVMVF9BU1NJR05FRV9QTEFDRUhPTERFUiA9ICdBREZfVEFTS19MSVNULlBFT1BMRS5BU1NJR05FRSc7XG5cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAnYWRmLXBlb3BsZS1zZWxlY3RvcicsXG4gICAgdGVtcGxhdGVVcmw6ICcuL3Blb3BsZS1zZWxlY3Rvci5jb21wb25lbnQuaHRtbCcsXG4gICAgc3R5bGVVcmxzOiBbJy4vcGVvcGxlLXNlbGVjdG9yLmNvbXBvbmVudC5zY3NzJ10sXG4gICAgaG9zdDogeyAnY2xhc3MnOiAnYWRmLXBlb3BsZS1zZWxlY3RvcicgfSxcbiAgICBlbmNhcHN1bGF0aW9uOiBWaWV3RW5jYXBzdWxhdGlvbi5Ob25lXG59KVxuXG5leHBvcnQgY2xhc3MgUGVvcGxlU2VsZWN0b3JDb21wb25lbnQge1xuXG4gICAgQElucHV0KClcbiAgICBwZW9wbGVJZDogVXNlclByb2Nlc3NNb2RlbDtcblxuICAgIC8vIFBvb3JseSBkb2N1bWVudGVkIEFuZ3VsYXIgbWFnaWMgZm9yIFsocGVvcGxlSWQpXVxuICAgIEBPdXRwdXQoKVxuICAgIHBlb3BsZUlkQ2hhbmdlOiBFdmVudEVtaXR0ZXI8bnVtYmVyPjtcblxuICAgIEBWaWV3Q2hpbGQoJ3Blb3BsZVNlYXJjaEZpZWxkJywgeyBzdGF0aWM6IHRydWUgfSlcbiAgICBzZWFyY2hGaWVsZENvbXBvbmVudDogUGVvcGxlU2VhcmNoRmllbGRDb21wb25lbnQ7XG5cbiAgICBwZXJmb3JtU2VhcmNoOiBQZXJmb3JtU2VhcmNoQ2FsbGJhY2s7XG4gICAgc2VsZWN0ZWRVc2VyOiBVc2VyUHJvY2Vzc01vZGVsO1xuICAgIGRlZmF1bHRQbGFjZWhvbGRlcjogc3RyaW5nO1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHByaXZhdGUgcGVvcGxlUHJvY2Vzc1NlcnZpY2U6IFBlb3BsZVByb2Nlc3NTZXJ2aWNlLFxuICAgICAgICBwcml2YXRlIGxvZ1NlcnZpY2U6IExvZ1NlcnZpY2UsXG4gICAgICAgIHByaXZhdGUgdHJhbnNsYXRpb25TZXJ2aWNlOiBUcmFuc2xhdGlvblNlcnZpY2UpIHtcblxuICAgICAgICB0aGlzLnBlb3BsZUlkQ2hhbmdlID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuICAgICAgICB0aGlzLnBlcmZvcm1TZWFyY2ggPSB0aGlzLnNlYXJjaFVzZXIuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5kZWZhdWx0UGxhY2Vob2xkZXIgPSB0aGlzLnRyYW5zbGF0aW9uU2VydmljZS5pbnN0YW50KERFRkFVTFRfQVNTSUdORUVfUExBQ0VIT0xERVIpO1xuICAgIH1cblxuICAgIHNlYXJjaFVzZXIoc2VhcmNoV29yZDogc3RyaW5nKTogT2JzZXJ2YWJsZTx7fSB8IFVzZXJQcm9jZXNzTW9kZWxbXT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5wZW9wbGVQcm9jZXNzU2VydmljZS5nZXRXb3JrZmxvd1VzZXJzKHVuZGVmaW5lZCwgc2VhcmNoV29yZClcbiAgICAgICAgICAgIC5waXBlKFxuICAgICAgICAgICAgICAgIGNhdGNoRXJyb3IodGhpcy5vblNlYXJjaFVzZXJFcnJvci5iaW5kKHRoaXMpKVxuICAgICAgICAgICAgKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIG9uU2VhcmNoVXNlckVycm9yKCk6IE9ic2VydmFibGU8VXNlclByb2Nlc3NNb2RlbFtdPiB7XG4gICAgICAgIHRoaXMubG9nU2VydmljZS5lcnJvcignZ2V0V29ya2Zsb3dVc2VycyB0aHJldyBlcnJvcicpO1xuICAgICAgICByZXR1cm4gb2YoW10pO1xuICAgIH1cblxuICAgIHVzZXJTZWxlY3RlZCh1c2VyOiBVc2VyUHJvY2Vzc01vZGVsKTogdm9pZCB7XG4gICAgICAgIHRoaXMudXBkYXRlVXNlclNlbGVjdGlvbih1c2VyKTtcbiAgICB9XG5cbiAgICB1c2VyRGVzZWxlY3RlZCgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy51cGRhdGVVc2VyU2VsZWN0aW9uKHVuZGVmaW5lZCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSB1cGRhdGVVc2VyU2VsZWN0aW9uKHVzZXI6IFVzZXJQcm9jZXNzTW9kZWwpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5zZWxlY3RlZFVzZXIgPSB1c2VyO1xuICAgICAgICB0aGlzLnBlb3BsZUlkQ2hhbmdlLmVtaXQodXNlciAmJiB1c2VyLmlkIHx8IHVuZGVmaW5lZCk7XG4gICAgICAgIHRoaXMuc2VhcmNoRmllbGRDb21wb25lbnQucmVzZXQoKTtcbiAgICB9XG5cbiAgICBnZXQgcGxhY2Vob2xkZXIoKSB7XG4gICAgICAgIGlmICghdGhpcy5zZWxlY3RlZFVzZXIpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmRlZmF1bHRQbGFjZWhvbGRlcjtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBnZXREaXNwbGF5VXNlcih0aGlzLnNlbGVjdGVkVXNlci5maXJzdE5hbWUsIHRoaXMuc2VsZWN0ZWRVc2VyLmxhc3ROYW1lLCAnICcpO1xuICAgIH1cbn1cbiJdfQ==