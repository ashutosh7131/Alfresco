/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, EventEmitter, Input, Output, ViewEncapsulation } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';
export class PeopleSearchComponent {
    constructor() {
        this.searchPeople = new EventEmitter();
        this.success = new EventEmitter();
        this.closeSearch = new EventEmitter();
        this.selectedUser = {};
    }
    ngOnInit() {
        this.filteredResults$ = this.results
            .pipe(map((users) => {
            return users.filter((user) => user.id !== this.selectedUser.id);
        }));
        this.performSearch = this.performSearchCallback.bind(this);
    }
    performSearchCallback(event) {
        this.searchPeople.emit(event);
        return this.filteredResults$;
    }
    onRowClick(user) {
        this.selectedUser = user;
    }
    closeSearchList() {
        this.closeSearch.emit();
    }
    involveUserAndClose() {
        this.involveUser();
        this.closeSearchList();
    }
    involveUser() {
        if (this.selectedUser === undefined) {
            return;
        }
        this.success.emit(this.selectedUser);
    }
}
PeopleSearchComponent.decorators = [
    { type: Component, args: [{
                selector: 'adf-people-search',
                template: "<div class=\"adf-search-text-header\">\n    <ng-content select=\"[adf-people-search-title], [people-search-title]\"></ng-content>\n</div>\n\n<adf-people-search-field [performSearch]=\"performSearch\" (rowClick)=\"onRowClick($event)\"></adf-people-search-field>\n\n<div class=\"search-list-action-container\">\n    <button mat-button type=\"button\" id=\"close-people-search\" (click)=\"closeSearchList()\">\n        {{'ADF_TASK_LIST.PEOPLE.DIALOG_CLOSE' | translate }}\n    </button>\n    <button mat-button type=\"button\" id=\"add-people\" (click)=\"involveUserAndClose()\">\n        <ng-content select=\"[adf-people-search-action-label], [people-search-action-label]\"></ng-content>\n    </button>\n</div>\n",
                host: {
                    'class': 'adf-people-search'
                },
                encapsulation: ViewEncapsulation.None,
                styles: [".adf-people-search{width:100%}.adf-people-search .adf-activiti-label{font-weight:bolder}.adf-people-search .adf-fix-element-user-list{padding:0}.adf-people-search .adf-search-text-header{font-weight:700;opacity:.54}.adf-people-search .adf-search-list-action-container{border-top:1px solid #eee;margin-top:5px;padding:5px 0;text-align:right}.adf-people-search .adf-search-list-action-container>button{font-weight:bolder;opacity:.54}.adf-people-search .adf-search-list-action-container>button:hover{color:var(--theme-primary-color)}"]
            },] }
];
PeopleSearchComponent.ctorParameters = () => [];
PeopleSearchComponent.propDecorators = {
    results: [{ type: Input }],
    searchPeople: [{ type: Output }],
    success: [{ type: Output }],
    closeSearch: [{ type: Output }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGVvcGxlLXNlYXJjaC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiL2hvbWUvdHJhdmlzL2J1aWxkL0FsZnJlc2NvL2FsZnJlc2NvLW5nMi1jb21wb25lbnRzL2xpYi9wcm9jZXNzLXNlcnZpY2VzL3NyYy8iLCJzb3VyY2VzIjpbImxpYi9wZW9wbGUvY29tcG9uZW50cy9wZW9wbGUtc2VhcmNoL3Blb3BsZS1zZWFyY2guY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7R0FlRztBQUdILE9BQU8sRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFVLEtBQUssRUFBRSxNQUFNLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDbEcsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUVsQyxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFZckMsTUFBTSxPQUFPLHFCQUFxQjtJQXNCOUI7UUFkQSxpQkFBWSxHQUFHLElBQUksWUFBWSxFQUFPLENBQUM7UUFJdkMsWUFBTyxHQUFHLElBQUksWUFBWSxFQUFvQixDQUFDO1FBSS9DLGdCQUFXLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUdqQyxpQkFBWSxHQUFxQixFQUFFLENBQUM7SUFHckIsQ0FBQztJQUVoQixRQUFRO1FBQ0osSUFBSSxDQUFDLGdCQUFnQixHQUFHLElBQUksQ0FBQyxPQUFPO2FBQy9CLElBQUksQ0FDRCxHQUFHLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRTtZQUNWLE9BQU8sS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsS0FBSyxJQUFJLENBQUMsWUFBWSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ3BFLENBQUMsQ0FBQyxDQUNMLENBQUM7UUFDTixJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDL0QsQ0FBQztJQUVPLHFCQUFxQixDQUFDLEtBQVU7UUFDcEMsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDOUIsT0FBTyxJQUFJLENBQUMsZ0JBQWdCLENBQUM7SUFDakMsQ0FBQztJQUVELFVBQVUsQ0FBQyxJQUFzQjtRQUM3QixJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQztJQUM3QixDQUFDO0lBRUQsZUFBZTtRQUNYLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDNUIsQ0FBQztJQUVELG1CQUFtQjtRQUNmLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUNuQixJQUFJLENBQUMsZUFBZSxFQUFFLENBQUM7SUFDM0IsQ0FBQztJQUVELFdBQVc7UUFDUCxJQUFJLElBQUksQ0FBQyxZQUFZLEtBQUssU0FBUyxFQUFFO1lBQ2pDLE9BQU87U0FDVjtRQUNELElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUN6QyxDQUFDOzs7WUFuRUosU0FBUyxTQUFDO2dCQUNQLFFBQVEsRUFBRSxtQkFBbUI7Z0JBQzdCLGt0QkFBNkM7Z0JBRTdDLElBQUksRUFBRTtvQkFDRixPQUFPLEVBQUUsbUJBQW1CO2lCQUMvQjtnQkFDRCxhQUFhLEVBQUUsaUJBQWlCLENBQUMsSUFBSTs7YUFDeEM7Ozs7c0JBS0ksS0FBSzsyQkFJTCxNQUFNO3NCQUlOLE1BQU07MEJBSU4sTUFBTSIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IFVzZXJQcm9jZXNzTW9kZWwgfSBmcm9tICdAYWxmcmVzY28vYWRmLWNvcmUnO1xuaW1wb3J0IHsgQ29tcG9uZW50LCBFdmVudEVtaXR0ZXIsIE9uSW5pdCwgSW5wdXQsIE91dHB1dCwgVmlld0VuY2Fwc3VsYXRpb24gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IFBlcmZvcm1TZWFyY2hDYWxsYmFjayB9IGZyb20gJy4uLy4uL2ludGVyZmFjZXMvcGVyZm9ybS1zZWFyY2gtY2FsbGJhY2suaW50ZXJmYWNlJztcbmltcG9ydCB7IG1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICdhZGYtcGVvcGxlLXNlYXJjaCcsXG4gICAgdGVtcGxhdGVVcmw6ICcuL3Blb3BsZS1zZWFyY2guY29tcG9uZW50Lmh0bWwnLFxuICAgIHN0eWxlVXJsczogWycuL3Blb3BsZS1zZWFyY2guY29tcG9uZW50LnNjc3MnXSxcbiAgICBob3N0OiB7XG4gICAgICAgICdjbGFzcyc6ICdhZGYtcGVvcGxlLXNlYXJjaCdcbiAgICB9LFxuICAgIGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLk5vbmVcbn0pXG5cbmV4cG9ydCBjbGFzcyBQZW9wbGVTZWFyY2hDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuXG4gICAgLyoqIFBhcmFtZXRlcnMgZm9yIGRpc3BsYXlpbmcgdGhlIGxpc3QuICovXG4gICAgQElucHV0KClcbiAgICByZXN1bHRzOiBPYnNlcnZhYmxlPFVzZXJQcm9jZXNzTW9kZWxbXT47XG5cbiAgICAvKiogRW1pdHRlZCB3aGVuIGEgc2VhcmNoIGlzIHBlcmZvcm1lZCB3aXRoIGEgbmV3IGtleXdvcmQuICovXG4gICAgQE91dHB1dCgpXG4gICAgc2VhcmNoUGVvcGxlID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XG5cbiAgICAvKiogRW1pdHRlZCB3aGVuIGEgdXNlciBpcyBzZWxlY3RlZCBhbmQgdGhlIGFjdGlvbiBidXR0b24gaXMgY2xpY2tlZC4gKi9cbiAgICBAT3V0cHV0KClcbiAgICBzdWNjZXNzID0gbmV3IEV2ZW50RW1pdHRlcjxVc2VyUHJvY2Vzc01vZGVsPigpO1xuXG4gICAgLyoqIEVtaXR0ZWQgd2hlbiB0aGUgXCJjbG9zZVwiIGJ1dHRvbiBpcyBjbGlja2VkLiAqL1xuICAgIEBPdXRwdXQoKVxuICAgIGNsb3NlU2VhcmNoID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuXG4gICAgZmlsdGVyZWRSZXN1bHRzJDogT2JzZXJ2YWJsZTxVc2VyUHJvY2Vzc01vZGVsW10+O1xuICAgIHNlbGVjdGVkVXNlcjogVXNlclByb2Nlc3NNb2RlbCA9IHt9O1xuICAgIHBlcmZvcm1TZWFyY2g6IFBlcmZvcm1TZWFyY2hDYWxsYmFjaztcblxuICAgIGNvbnN0cnVjdG9yKCkge31cblxuICAgIG5nT25Jbml0KCkge1xuICAgICAgICB0aGlzLmZpbHRlcmVkUmVzdWx0cyQgPSB0aGlzLnJlc3VsdHNcbiAgICAgICAgICAgIC5waXBlKFxuICAgICAgICAgICAgICAgIG1hcCgodXNlcnMpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVzZXJzLmZpbHRlcigodXNlcikgPT4gdXNlci5pZCAhPT0gdGhpcy5zZWxlY3RlZFVzZXIuaWQpO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICApO1xuICAgICAgICB0aGlzLnBlcmZvcm1TZWFyY2ggPSB0aGlzLnBlcmZvcm1TZWFyY2hDYWxsYmFjay5iaW5kKHRoaXMpO1xuICAgIH1cblxuICAgIHByaXZhdGUgcGVyZm9ybVNlYXJjaENhbGxiYWNrKGV2ZW50OiBhbnkpOiBPYnNlcnZhYmxlPFVzZXJQcm9jZXNzTW9kZWxbXT4ge1xuICAgICAgICB0aGlzLnNlYXJjaFBlb3BsZS5lbWl0KGV2ZW50KTtcbiAgICAgICAgcmV0dXJuIHRoaXMuZmlsdGVyZWRSZXN1bHRzJDtcbiAgICB9XG5cbiAgICBvblJvd0NsaWNrKHVzZXI6IFVzZXJQcm9jZXNzTW9kZWwpIHtcbiAgICAgICAgdGhpcy5zZWxlY3RlZFVzZXIgPSB1c2VyO1xuICAgIH1cblxuICAgIGNsb3NlU2VhcmNoTGlzdCgpIHtcbiAgICAgICAgdGhpcy5jbG9zZVNlYXJjaC5lbWl0KCk7XG4gICAgfVxuXG4gICAgaW52b2x2ZVVzZXJBbmRDbG9zZSgpIHtcbiAgICAgICAgdGhpcy5pbnZvbHZlVXNlcigpO1xuICAgICAgICB0aGlzLmNsb3NlU2VhcmNoTGlzdCgpO1xuICAgIH1cblxuICAgIGludm9sdmVVc2VyKCkge1xuICAgICAgICBpZiAodGhpcy5zZWxlY3RlZFVzZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc3VjY2Vzcy5lbWl0KHRoaXMuc2VsZWN0ZWRVc2VyKTtcbiAgICB9XG59XG4iXX0=