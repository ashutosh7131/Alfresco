/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { CommonModule } from '@angular/common';
import { NgModule } from '@angular/core';
import { MaterialModule } from '../material.module';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { CoreModule } from '@alfresco/adf-core';
import { PeopleComponent } from './components/people/people.component';
import { PeopleListComponent } from './components/people-list/people-list.component';
import { PeopleSearchComponent } from './components/people-search/people-search.component';
import { PeopleSearchFieldComponent } from './components/people-search-field/people-search-field.component';
import { PeopleSelectorComponent } from './components/people-selector/people-selector.component';
import { PeopleSearchActionLabelDirective } from './directives/people-search-action-label.directive';
import { PeopleSearchTitleDirective } from './directives/people-search-title.directive';
export class PeopleModule {
}
PeopleModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    FormsModule,
                    ReactiveFormsModule,
                    MaterialModule,
                    CommonModule,
                    CoreModule
                ],
                declarations: [
                    PeopleComponent,
                    PeopleSearchComponent,
                    PeopleSearchFieldComponent,
                    PeopleSelectorComponent,
                    PeopleSearchTitleDirective,
                    PeopleSearchActionLabelDirective,
                    PeopleListComponent
                ],
                exports: [
                    PeopleComponent,
                    PeopleSearchComponent,
                    PeopleSearchFieldComponent,
                    PeopleSelectorComponent,
                    PeopleSearchTitleDirective,
                    PeopleSearchActionLabelDirective,
                    PeopleListComponent
                ]
            },] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGVvcGxlLm1vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiIvaG9tZS90cmF2aXMvYnVpbGQvQWxmcmVzY28vYWxmcmVzY28tbmcyLWNvbXBvbmVudHMvbGliL3Byb2Nlc3Mtc2VydmljZXMvc3JjLyIsInNvdXJjZXMiOlsibGliL3Blb3BsZS9wZW9wbGUubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7R0FlRztBQUVILE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMvQyxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3pDLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUNwRCxPQUFPLEVBQUUsV0FBVyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFbEUsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ2hELE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxzQ0FBc0MsQ0FBQztBQUN2RSxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxnREFBZ0QsQ0FBQztBQUNyRixPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSxvREFBb0QsQ0FBQztBQUMzRixPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSxnRUFBZ0UsQ0FBQztBQUM1RyxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSx3REFBd0QsQ0FBQztBQUVqRyxPQUFPLEVBQUUsZ0NBQWdDLEVBQUUsTUFBTSxtREFBbUQsQ0FBQztBQUNyRyxPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSw0Q0FBNEMsQ0FBQztBQTZCeEYsTUFBTSxPQUFPLFlBQVk7OztZQTNCeEIsUUFBUSxTQUFDO2dCQUNOLE9BQU8sRUFBRTtvQkFDTCxXQUFXO29CQUNYLG1CQUFtQjtvQkFDbkIsY0FBYztvQkFDZCxZQUFZO29CQUNaLFVBQVU7aUJBQ2I7Z0JBQ0QsWUFBWSxFQUFFO29CQUNWLGVBQWU7b0JBQ2YscUJBQXFCO29CQUNyQiwwQkFBMEI7b0JBQzFCLHVCQUF1QjtvQkFDdkIsMEJBQTBCO29CQUMxQixnQ0FBZ0M7b0JBQ2hDLG1CQUFtQjtpQkFDdEI7Z0JBQ0QsT0FBTyxFQUFFO29CQUNMLGVBQWU7b0JBQ2YscUJBQXFCO29CQUNyQiwwQkFBMEI7b0JBQzFCLHVCQUF1QjtvQkFDdkIsMEJBQTBCO29CQUMxQixnQ0FBZ0M7b0JBQ2hDLG1CQUFtQjtpQkFDdEI7YUFDSiIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IENvbW1vbk1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTWF0ZXJpYWxNb2R1bGUgfSBmcm9tICcuLi9tYXRlcmlhbC5tb2R1bGUnO1xuaW1wb3J0IHsgRm9ybXNNb2R1bGUsIFJlYWN0aXZlRm9ybXNNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5cbmltcG9ydCB7IENvcmVNb2R1bGUgfSBmcm9tICdAYWxmcmVzY28vYWRmLWNvcmUnO1xuaW1wb3J0IHsgUGVvcGxlQ29tcG9uZW50IH0gZnJvbSAnLi9jb21wb25lbnRzL3Blb3BsZS9wZW9wbGUuY29tcG9uZW50JztcbmltcG9ydCB7IFBlb3BsZUxpc3RDb21wb25lbnQgfSBmcm9tICcuL2NvbXBvbmVudHMvcGVvcGxlLWxpc3QvcGVvcGxlLWxpc3QuY29tcG9uZW50JztcbmltcG9ydCB7IFBlb3BsZVNlYXJjaENvbXBvbmVudCB9IGZyb20gJy4vY29tcG9uZW50cy9wZW9wbGUtc2VhcmNoL3Blb3BsZS1zZWFyY2guY29tcG9uZW50JztcbmltcG9ydCB7IFBlb3BsZVNlYXJjaEZpZWxkQ29tcG9uZW50IH0gZnJvbSAnLi9jb21wb25lbnRzL3Blb3BsZS1zZWFyY2gtZmllbGQvcGVvcGxlLXNlYXJjaC1maWVsZC5jb21wb25lbnQnO1xuaW1wb3J0IHsgUGVvcGxlU2VsZWN0b3JDb21wb25lbnQgfSBmcm9tICcuL2NvbXBvbmVudHMvcGVvcGxlLXNlbGVjdG9yL3Blb3BsZS1zZWxlY3Rvci5jb21wb25lbnQnO1xuXG5pbXBvcnQgeyBQZW9wbGVTZWFyY2hBY3Rpb25MYWJlbERpcmVjdGl2ZSB9IGZyb20gJy4vZGlyZWN0aXZlcy9wZW9wbGUtc2VhcmNoLWFjdGlvbi1sYWJlbC5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgUGVvcGxlU2VhcmNoVGl0bGVEaXJlY3RpdmUgfSBmcm9tICcuL2RpcmVjdGl2ZXMvcGVvcGxlLXNlYXJjaC10aXRsZS5kaXJlY3RpdmUnO1xuXG5ATmdNb2R1bGUoe1xuICAgIGltcG9ydHM6IFtcbiAgICAgICAgRm9ybXNNb2R1bGUsXG4gICAgICAgIFJlYWN0aXZlRm9ybXNNb2R1bGUsXG4gICAgICAgIE1hdGVyaWFsTW9kdWxlLFxuICAgICAgICBDb21tb25Nb2R1bGUsXG4gICAgICAgIENvcmVNb2R1bGVcbiAgICBdLFxuICAgIGRlY2xhcmF0aW9uczogW1xuICAgICAgICBQZW9wbGVDb21wb25lbnQsXG4gICAgICAgIFBlb3BsZVNlYXJjaENvbXBvbmVudCxcbiAgICAgICAgUGVvcGxlU2VhcmNoRmllbGRDb21wb25lbnQsXG4gICAgICAgIFBlb3BsZVNlbGVjdG9yQ29tcG9uZW50LFxuICAgICAgICBQZW9wbGVTZWFyY2hUaXRsZURpcmVjdGl2ZSxcbiAgICAgICAgUGVvcGxlU2VhcmNoQWN0aW9uTGFiZWxEaXJlY3RpdmUsXG4gICAgICAgIFBlb3BsZUxpc3RDb21wb25lbnRcbiAgICBdLFxuICAgIGV4cG9ydHM6IFtcbiAgICAgICAgUGVvcGxlQ29tcG9uZW50LFxuICAgICAgICBQZW9wbGVTZWFyY2hDb21wb25lbnQsXG4gICAgICAgIFBlb3BsZVNlYXJjaEZpZWxkQ29tcG9uZW50LFxuICAgICAgICBQZW9wbGVTZWxlY3RvckNvbXBvbmVudCxcbiAgICAgICAgUGVvcGxlU2VhcmNoVGl0bGVEaXJlY3RpdmUsXG4gICAgICAgIFBlb3BsZVNlYXJjaEFjdGlvbkxhYmVsRGlyZWN0aXZlLFxuICAgICAgICBQZW9wbGVMaXN0Q29tcG9uZW50XG4gICAgXVxufSlcbmV4cG9ydCBjbGFzcyBQZW9wbGVNb2R1bGUge1xufVxuIl19