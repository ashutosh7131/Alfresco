/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Injectable, Optional, Inject, InjectionToken } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
export const SEARCH_QUERY_TOKEN = new InjectionToken('Alfresco Search Query Token');
export class SearchPermissionConfigurationService {
    constructor(queryProvider) {
        this.queryProvider = queryProvider;
    }
    generateQueryBody(searchTerm, maxResults, skipCount) {
        const defaultQueryBody = {
            query: {
                query: this.getQuery(searchTerm)
            },
            include: ['properties', 'aspectNames'],
            paging: {
                maxItems: maxResults,
                skipCount: skipCount
            },
            filterQueries: [
                { query: "TYPE:'cm:authority'" }
            ]
        };
        return defaultQueryBody;
    }
    getQuery(searchTerm) {
        let query;
        if (this.queryProvider && this.queryProvider.query) {
            query = this.queryProvider.query.replace(new RegExp(/\${([^}]+)}/g), searchTerm);
        }
        else {
            query = `(email:*${searchTerm}* OR firstName:*${searchTerm}* OR lastName:*${searchTerm}* OR displayName:*${searchTerm}* OR authorityName:*${searchTerm}* OR authorityDisplayName:*${searchTerm}*) AND ANAME:(\"0/APP.DEFAULT\")`;
        }
        return query;
    }
}
SearchPermissionConfigurationService.ɵfac = function SearchPermissionConfigurationService_Factory(t) { return new (t || SearchPermissionConfigurationService)(ɵngcc0.ɵɵinject(SEARCH_QUERY_TOKEN, 8)); };
SearchPermissionConfigurationService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: SearchPermissionConfigurationService, factory: SearchPermissionConfigurationService.ɵfac });
SearchPermissionConfigurationService.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [SEARCH_QUERY_TOKEN,] }] }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SearchPermissionConfigurationService, [{
        type: Injectable
    }], function () { return [{ type: undefined, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [SEARCH_QUERY_TOKEN]
            }] }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VhcmNoLWNvbmZpZy1wZXJtaXNzaW9uLnNlcnZpY2UuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL2hvbWUvdHJhdmlzL2J1aWxkL0FsZnJlc2NvL2FsZnJlc2NvLW5nMi1jb21wb25lbnRzL2xpYi9jb250ZW50LXNlcnZpY2VzL3NyYy9saWIvcGVybWlzc2lvbi1tYW5hZ2VyL2NvbXBvbmVudHMvYWRkLXBlcm1pc3Npb24vc2VhcmNoLWNvbmZpZy1wZXJtaXNzaW9uLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUlILE9BQU8sRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxjQUFjLEVBQUUsTUFBTSxlQUFlLENBQUM7O0FBRTdFLE1BQU0sQ0FBQyxNQUFNLGtCQUFrQixHQUFHLElBQUksY0FBYyxDQUFnQiw2QkFBNkIsQ0FBQyxDQUFDO0FBTW5HLE1BQU0sT0FBTyxvQ0FBb0M7QUFBRyxJQUVoRCxZQUdZLGFBQTRCO0FBQzVDLFFBRGdCLGtCQUFhLEdBQWIsYUFBYSxDQUFlO0FBQUMsSUFDekMsQ0FBQztBQUNMLElBQ1csaUJBQWlCLENBQUMsVUFBa0IsRUFBRSxVQUFrQixFQUFFLFNBQWlCO0FBQUksUUFDbEYsTUFBTSxnQkFBZ0IsR0FBYztBQUM1QyxZQUFZLEtBQUssRUFBRTtBQUNuQixnQkFBZ0IsS0FBSyxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDO0FBQ2hELGFBQWE7QUFDYixZQUFZLE9BQU8sRUFBRSxDQUFDLFlBQVksRUFBRSxhQUFhLENBQUM7QUFDbEQsWUFBWSxNQUFNLEVBQUU7QUFDcEIsZ0JBQWdCLFFBQVEsRUFBRSxVQUFVO0FBQ3BDLGdCQUFnQixTQUFTLEVBQUUsU0FBUztBQUNwQyxhQUFhO0FBQ2IsWUFBWSxhQUFhLEVBQUU7QUFDM0IsZ0JBQ2dCLEVBQUUsS0FBSyxFQUFFLHFCQUFxQixFQUFFO0FBQUMsYUFBQTtBQUNqRCxTQUFTLENBQUM7QUFDVixRQUNRLE9BQU8sZ0JBQWdCLENBQUM7QUFDaEMsSUFBSSxDQUFDO0FBQ0wsSUFDWSxRQUFRLENBQUMsVUFBa0I7QUFDdkMsUUFBUSxJQUFJLEtBQWEsQ0FBQztBQUMxQixRQUFRLElBQUksSUFBSSxDQUFDLGFBQWEsSUFBSSxJQUFJLENBQUMsYUFBYSxDQUFDLEtBQUssRUFBRTtBQUM1RCxZQUFZLEtBQUssR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQ3BDLElBQUksTUFBTSxDQUFDLGNBQWMsQ0FBQyxFQUFFLFVBQVUsQ0FBQyxDQUFDO0FBQ3hELFNBQVM7QUFBQyxhQUFLO0FBQ2YsWUFBWSxLQUFLLEdBQUcsV0FBVyxVQUFVLG1CQUFtQixVQUFVLGtCQUFrQixVQUFVLHFCQUFxQixVQUFVLHVCQUF1QixVQUFVLDhCQUE4QixVQUFVLGtDQUFrQyxDQUFDO0FBQzdPLFNBQVM7QUFDVCxRQUFRLE9BQU8sS0FBSyxDQUFDO0FBQ3JCLElBQUksQ0FBQztBQUNMO2dFQXJDQyxVQUFVOzRLQUNUO0FBQUM7QUFBOEQsNENBR3hELFFBQVEsWUFDUixNQUFNLFNBQUMsa0JBQWtCO0FBQzVCOzs7Ozs7OztrQ0FBRTtBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgUXVlcnlCb2R5IH0gZnJvbSAnQGFsZnJlc2NvL2pzLWFwaSc7XG5pbXBvcnQgeyBTZWFyY2hDb25maWd1cmF0aW9uSW50ZXJmYWNlIH0gZnJvbSAnQGFsZnJlc2NvL2FkZi1jb3JlJztcbmltcG9ydCB7IEluamVjdGFibGUsIE9wdGlvbmFsLCBJbmplY3QsIEluamVjdGlvblRva2VuIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmV4cG9ydCBjb25zdCBTRUFSQ0hfUVVFUllfVE9LRU4gPSBuZXcgSW5qZWN0aW9uVG9rZW48UXVlcnlQcm92aWRlcj4oJ0FsZnJlc2NvIFNlYXJjaCBRdWVyeSBUb2tlbicpO1xuZXhwb3J0IGludGVyZmFjZSBRdWVyeVByb3ZpZGVyIHtcbiAgICBxdWVyeTogc3RyaW5nO1xufVxuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgU2VhcmNoUGVybWlzc2lvbkNvbmZpZ3VyYXRpb25TZXJ2aWNlIGltcGxlbWVudHMgU2VhcmNoQ29uZmlndXJhdGlvbkludGVyZmFjZSB7XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgQE9wdGlvbmFsKClcbiAgICAgICAgQEluamVjdChTRUFSQ0hfUVVFUllfVE9LRU4pXG4gICAgICAgIHByaXZhdGUgcXVlcnlQcm92aWRlcjogUXVlcnlQcm92aWRlcikge1xuICAgIH1cblxuICAgIHB1YmxpYyBnZW5lcmF0ZVF1ZXJ5Qm9keShzZWFyY2hUZXJtOiBzdHJpbmcsIG1heFJlc3VsdHM6IG51bWJlciwgc2tpcENvdW50OiBudW1iZXIpOiBRdWVyeUJvZHkge1xuICAgICAgICBjb25zdCBkZWZhdWx0UXVlcnlCb2R5OiBRdWVyeUJvZHkgPSB7XG4gICAgICAgICAgICBxdWVyeToge1xuICAgICAgICAgICAgICAgIHF1ZXJ5OiB0aGlzLmdldFF1ZXJ5KHNlYXJjaFRlcm0pXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgaW5jbHVkZTogWydwcm9wZXJ0aWVzJywgJ2FzcGVjdE5hbWVzJ10sXG4gICAgICAgICAgICBwYWdpbmc6IHtcbiAgICAgICAgICAgICAgICBtYXhJdGVtczogbWF4UmVzdWx0cyxcbiAgICAgICAgICAgICAgICBza2lwQ291bnQ6IHNraXBDb3VudFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGZpbHRlclF1ZXJpZXM6IFtcbiAgICAgICAgICAgICAgICAvKnRzbGludDpkaXNhYmxlLW5leHQtbGluZSAqL1xuICAgICAgICAgICAgICAgIHsgcXVlcnk6IFwiVFlQRTonY206YXV0aG9yaXR5J1wiIH1dXG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIGRlZmF1bHRRdWVyeUJvZHk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBnZXRRdWVyeShzZWFyY2hUZXJtOiBzdHJpbmcpIHtcbiAgICAgICAgbGV0IHF1ZXJ5OiBzdHJpbmc7XG4gICAgICAgIGlmICh0aGlzLnF1ZXJ5UHJvdmlkZXIgJiYgdGhpcy5xdWVyeVByb3ZpZGVyLnF1ZXJ5KSB7XG4gICAgICAgICAgICBxdWVyeSA9IHRoaXMucXVlcnlQcm92aWRlci5xdWVyeS5yZXBsYWNlKFxuICAgICAgICAgICAgICAgIG5ldyBSZWdFeHAoL1xcJHsoW159XSspfS9nKSwgc2VhcmNoVGVybSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBxdWVyeSA9IGAoZW1haWw6KiR7c2VhcmNoVGVybX0qIE9SIGZpcnN0TmFtZToqJHtzZWFyY2hUZXJtfSogT1IgbGFzdE5hbWU6KiR7c2VhcmNoVGVybX0qIE9SIGRpc3BsYXlOYW1lOioke3NlYXJjaFRlcm19KiBPUiBhdXRob3JpdHlOYW1lOioke3NlYXJjaFRlcm19KiBPUiBhdXRob3JpdHlEaXNwbGF5TmFtZToqJHtzZWFyY2hUZXJtfSopIEFORCBBTkFNRTooXFxcIjAvQVBQLkRFRkFVTFRcXFwiKWA7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHF1ZXJ5O1xuICAgIH1cbn1cbiJdfQ==