import { AlfrescoApiService, NodesApiService, SearchService, TranslationService, EcmUserModel } from '@alfresco/adf-core';
import { Group, GroupsApi } from '@alfresco/js-api';
import { Injectable } from '@angular/core';
import { forkJoin, from, of, throwError } from 'rxjs';
import { catchError, map, switchMap } from 'rxjs/operators';
import { PermissionDisplayModel } from '../models/permission.model';
import * as i0 from "@angular/core";
import * as i1 from "@alfresco/adf-core";
export class NodePermissionService {
    constructor(apiService, searchApiService, nodeService, translation) {
        this.apiService = apiService;
        this.searchApiService = searchApiService;
        this.nodeService = nodeService;
        this.translation = translation;
    }
    get groupsApi() {
        var _a;
        this._groupsApi = (_a = this._groupsApi) !== null && _a !== void 0 ? _a : new GroupsApi(this.apiService.getInstance());
        return this._groupsApi;
    }
    getNodeRoles(node) {
        const retrieveSiteQueryBody = this.buildRetrieveSiteQueryBody(node.path.elements);
        return this.searchApiService.searchByQueryBody(retrieveSiteQueryBody)
            .pipe(switchMap((siteNodeList) => {
            var _a;
            if (siteNodeList.list.entries.length > 0) {
                const siteName = siteNodeList.list.entries[0].entry.name;
                return this.getGroupMembersBySiteName(siteName);
            }
            else {
                return of((_a = node.permissions) === null || _a === void 0 ? void 0 : _a.settable);
            }
        }));
    }
    getNodePermissions(node) {
        var _a, _b;
        const result = [];
        if ((_a = node === null || node === void 0 ? void 0 : node.permissions) === null || _a === void 0 ? void 0 : _a.locallySet) {
            node.permissions.locallySet.map((permissionElement) => {
                result.push(new PermissionDisplayModel(permissionElement));
            });
        }
        if ((_b = node === null || node === void 0 ? void 0 : node.permissions) === null || _b === void 0 ? void 0 : _b.inherited) {
            node.permissions.inherited.map((permissionElement) => {
                const permissionInherited = new PermissionDisplayModel(permissionElement);
                permissionInherited.isInherited = true;
                result.push(permissionInherited);
            });
        }
        return result;
    }
    updatePermissionRole(node, updatedPermissionRole) {
        const permissionBody = { permissions: { locallySet: [] } };
        const index = node.permissions.locallySet.map((permission) => permission.authorityId).indexOf(updatedPermissionRole.authorityId);
        permissionBody.permissions.locallySet = permissionBody.permissions.locallySet.concat(node.permissions.locallySet);
        if (index !== -1) {
            permissionBody.permissions.locallySet[index] = updatedPermissionRole;
        }
        else {
            permissionBody.permissions.locallySet.push(updatedPermissionRole);
        }
        return this.nodeService.updateNode(node.id, permissionBody);
    }
    updateNodePermissions(nodeId, permissionList) {
        return this.nodeService.getNode(nodeId).pipe(switchMap((node) => this.updateLocallySetPermissions(node, permissionList)));
    }
    updateLocallySetPermissions(node, permissions) {
        const permissionBody = { permissions: { locallySet: [] } };
        const permissionList = permissions;
        const duplicatedPermissions = this.getDuplicatedPermissions(node.permissions.locallySet, permissionList);
        if (duplicatedPermissions.length > 0) {
            const list = duplicatedPermissions.map((permission) => 'authority -> ' + permission.authorityId + ' / role -> ' + permission.name).join(', ');
            const duplicatePermissionMessage = this.translation.instant('PERMISSION_MANAGER.ERROR.DUPLICATE-PERMISSION', { list });
            return throwError(duplicatePermissionMessage);
        }
        permissionBody.permissions.locallySet = node.permissions.locallySet ? node.permissions.locallySet.concat(permissionList) : permissionList;
        return this.nodeService.updateNode(node.id, permissionBody);
    }
    getDuplicatedPermissions(nodeLocallySet, permissionListAdded) {
        const duplicatePermissions = [];
        if (nodeLocallySet) {
            permissionListAdded.forEach((permission) => {
                const duplicate = nodeLocallySet.find((localPermission) => this.isEqualPermission(localPermission, permission));
                if (duplicate) {
                    duplicatePermissions.push(duplicate);
                }
            });
        }
        return duplicatePermissions;
    }
    isEqualPermission(oldPermission, newPermission) {
        return oldPermission.accessStatus === newPermission.accessStatus &&
            oldPermission.authorityId === newPermission.authorityId &&
            oldPermission.name === newPermission.name;
    }
    removePermission(node, permissionToRemove) {
        const permissionBody = { permissions: { locallySet: [] } };
        const index = node.permissions.locallySet.map((permission) => permission.authorityId).indexOf(permissionToRemove.authorityId);
        if (index !== -1) {
            node.permissions.locallySet.splice(index, 1);
            permissionBody.permissions.locallySet = node.permissions.locallySet;
            return this.nodeService.updateNode(node.id, permissionBody);
        }
        else {
            return of(node);
        }
    }
    getGroupMembersBySiteName(siteName) {
        const groupName = 'GROUP_site_' + siteName;
        return this.getGroupMemberByGroupName(groupName)
            .pipe(map((groupMemberPaging) => {
            const displayResult = [];
            groupMemberPaging.list.entries.forEach((member) => {
                displayResult.push(this.formattedRoleName(member.entry.displayName, 'site_' + siteName));
            });
            return displayResult;
        }));
    }
    getGroupMemberByGroupName(groupName, opts) {
        return from(this.groupsApi.listGroupMemberships(groupName, opts));
    }
    formattedRoleName(displayName, siteName) {
        return displayName.replace(siteName + '_', '');
    }
    buildRetrieveSiteQueryBody(nodePath) {
        const pathNames = nodePath.map((node) => 'name: "' + node.name + '"');
        const builtPathNames = pathNames.join(' OR ');
        return {
            'query': {
                'query': builtPathNames
            },
            'paging': {
                'maxItems': 100,
                'skipCount': 0
            },
            'include': ['aspectNames', 'properties'],
            'filterQueries': [
                {
                    'query': "TYPE:'st:site'"
                }
            ]
        };
    }
    getLocalPermissions(node) {
        var _a;
        const result = [];
        if ((_a = node === null || node === void 0 ? void 0 : node.permissions) === null || _a === void 0 ? void 0 : _a.locallySet) {
            node.permissions.locallySet.forEach((permissionElement) => {
                result.push(new PermissionDisplayModel(permissionElement));
            });
        }
        return result;
    }
    getInheritedPermission(node) {
        var _a;
        const result = [];
        if ((_a = node === null || node === void 0 ? void 0 : node.permissions) === null || _a === void 0 ? void 0 : _a.inherited) {
            node.permissions.inherited.forEach((permissionElement) => {
                const permissionInherited = new PermissionDisplayModel(permissionElement);
                permissionInherited.isInherited = true;
                result.push(permissionInherited);
            });
        }
        return result;
    }
    removePermissions(node, permissions) {
        const permissionBody = { permissions: { locallySet: [] } };
        permissions.forEach((permission) => {
            const index = node.permissions.locallySet.findIndex((locallySet) => locallySet.authorityId === permission.authorityId);
            if (index !== -1) {
                node.permissions.locallySet.splice(index, 1);
            }
        });
        permissionBody.permissions.locallySet = node.permissions.locallySet;
        return this.nodeService.updateNode(node.id, permissionBody);
    }
    updatePermissions(node, permissions) {
        const permissionBody = { permissions: { locallySet: [] } };
        permissionBody.permissions.locallySet = permissions;
        return this.nodeService.updateNode(node.id, permissionBody);
    }
    getNodeWithRoles(nodeId) {
        return this.nodeService.getNode(nodeId).pipe(switchMap(node => {
            return forkJoin({
                node: of(node),
                roles: this.getNodeRoles(node)
                    .pipe(catchError(() => { var _a; return of((_a = node.permissions) === null || _a === void 0 ? void 0 : _a.settable); }), map(_roles => _roles.map(role => ({ role, label: role }))))
            });
        }));
    }
    transformNodeToUserPerson(node) {
        let person = null, group = null;
        if (node.nodeType === 'cm:person') {
            const firstName = node.properties['cm:firstName'];
            const lastName = node.properties['cm:lastName'];
            const email = node.properties['cm:email'];
            const id = node.properties['cm:userName'];
            person = new EcmUserModel({ id, firstName, lastName, email });
        }
        if (node.nodeType === 'cm:authorityContainer') {
            const displayName = node.properties['cm:authorityDisplayName'] || node.properties['cm:authorityName'];
            const id = node.properties['cm:authorityName'];
            group = new Group({ displayName, id });
        }
        return { person, group };
    }
}
NodePermissionService.ɵprov = i0.ɵɵdefineInjectable({ factory: function NodePermissionService_Factory() { return new NodePermissionService(i0.ɵɵinject(i1.AlfrescoApiService), i0.ɵɵinject(i1.SearchService), i0.ɵɵinject(i1.NodesApiService), i0.ɵɵinject(i1.TranslationService)); }, token: NodePermissionService, providedIn: "root" });
NodePermissionService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
NodePermissionService.ctorParameters = () => [
    { type: AlfrescoApiService },
    { type: SearchService },
    { type: NodesApiService },
    { type: TranslationService }
];
//# sourceMappingURL=data:application/json;base64,