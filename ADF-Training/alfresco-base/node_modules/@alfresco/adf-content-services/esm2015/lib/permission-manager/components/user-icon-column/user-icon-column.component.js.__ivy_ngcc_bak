/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { NodeEntry } from '@alfresco/js-api';
import { Component, Input, ViewEncapsulation } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { NodePermissionService } from '../../services/node-permission.service';
export class UserIconColumnComponent {
    constructor(nodePermissionService) {
        this.nodePermissionService = nodePermissionService;
        this.selected = false;
        this.displayText$ = new BehaviorSubject(null);
        this.group = false;
    }
    get isSelected() {
        var _a, _b;
        return ((_b = (_a = this.context) === null || _a === void 0 ? void 0 : _a.row) === null || _b === void 0 ? void 0 : _b.isSelected) || this.selected;
    }
    ngOnInit() {
        var _a, _b;
        if (this.context) {
            const { person, group, authorityId } = (_b = (_a = this.context.row.obj) === null || _a === void 0 ? void 0 : _a.entry) !== null && _b !== void 0 ? _b : this.context.row.obj;
            this.group = this.isGroup(group, authorityId);
            this.displayText$.next(person || group || { displayName: authorityId });
        }
        if (this.node) {
            const { person, group } = this.nodePermissionService.transformNodeToUserPerson(this.node.entry);
            this.group = this.isGroup(group, null);
            this.displayText$.next(person || group);
        }
    }
    isGroup(group, authorityId) {
        return !!group || (authorityId === null || authorityId === void 0 ? void 0 : authorityId.startsWith('GROUP_')) || (authorityId === null || authorityId === void 0 ? void 0 : authorityId.startsWith('ROLE_'));
    }
}
UserIconColumnComponent.decorators = [
    { type: Component, args: [{
                selector: 'adf-user-icon-column',
                template: `
        <div class="adf-cell-value" [attr.id]="group ? 'group-icon' : 'person-icon'"  *ngIf="!isSelected">
            <ng-container *ngIf="displayText$ | async as user">
                <mat-icon *ngIf="group" class="adf-group-icon">people_alt_outline</mat-icon>
                <div *ngIf="!group" [outerHTML]="user | usernameInitials: 'adf-people-initial'"></div>
            </ng-container>
        </div>
        <div class="adf-cell-value" *ngIf="isSelected">
            <mat-icon class="adf-people-select-icon adf-datatable-selected" svgIcon="selected"></mat-icon>
        </div>
    `,
                encapsulation: ViewEncapsulation.None,
                host: { class: 'adf-user-icon-column adf-datatable-content-cell' },
                styles: [".adf-people-initial{align-items:center;display:flex;font-size:18px;height:40px;justify-content:center;text-transform:uppercase;width:40px}.adf-group-icon,.adf-people-initial{background:var(--theme-primary-color);border-radius:50%;color:var(--theme-primary-color-default-contrast)!important;font-weight:bolder}.adf-group-icon{font-size:20px;height:20px!important;padding:10px;width:20px!important}.adf-people-select-icon{margin:0!important}.adf-people-select-icon svg{fill:var(--theme-accent-color);height:40px;width:40px}"]
            },] }
];
UserIconColumnComponent.ctorParameters = () => [
    { type: NodePermissionService }
];
UserIconColumnComponent.propDecorators = {
    context: [{ type: Input }],
    node: [{ type: Input }],
    selected: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlci1pY29uLWNvbHVtbi5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiL2hvbWUvdHJhdmlzL2J1aWxkL0FsZnJlc2NvL2FsZnJlc2NvLW5nMi1jb21wb25lbnRzL2xpYi9jb250ZW50LXNlcnZpY2VzL3NyYy8iLCJzb3VyY2VzIjpbImxpYi9wZXJtaXNzaW9uLW1hbmFnZXIvY29tcG9uZW50cy91c2VyLWljb24tY29sdW1uL3VzZXItaWNvbi1jb2x1bW4uY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7R0FlRztBQUdILE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUM3QyxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBVSxpQkFBaUIsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM1RSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ3ZDLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLHdDQUF3QyxDQUFDO0FBbUIvRSxNQUFNLE9BQU8sdUJBQXVCO0lBaUJoQyxZQUFvQixxQkFBNEM7UUFBNUMsMEJBQXFCLEdBQXJCLHFCQUFxQixDQUF1QjtRQVRoRSxhQUFRLEdBQVksS0FBSyxDQUFDO1FBRTFCLGlCQUFZLEdBQUcsSUFBSSxlQUFlLENBQU8sSUFBSSxDQUFDLENBQUM7UUFDL0MsVUFBSyxHQUFHLEtBQUssQ0FBQztJQU1xRCxDQUFDO0lBSnBFLElBQUksVUFBVTs7UUFDVixPQUFPLGFBQUEsSUFBSSxDQUFDLE9BQU8sMENBQUUsR0FBRywwQ0FBRSxVQUFVLEtBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQztJQUMxRCxDQUFDO0lBSUQsUUFBUTs7UUFDSixJQUFJLElBQUksQ0FBQyxPQUFPLEVBQUU7WUFDZCxNQUFNLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxXQUFXLEVBQUUsZUFBRyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLDBDQUFFLEtBQUssbUNBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDO1lBQzNGLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsV0FBVyxDQUFDLENBQUM7WUFDOUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsTUFBTSxJQUFJLEtBQUssSUFBSSxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsQ0FBQyxDQUFDO1NBQzNFO1FBRUQsSUFBSSxJQUFJLENBQUMsSUFBSSxFQUFFO1lBQ1gsTUFBTSxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsR0FBRyxJQUFJLENBQUMscUJBQXFCLENBQUMseUJBQXlCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUNoRyxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxDQUFDO1lBQ3ZDLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLE1BQU0sSUFBSSxLQUFLLENBQUMsQ0FBQztTQUMzQztJQUNMLENBQUM7SUFFTyxPQUFPLENBQUMsS0FBSyxFQUFFLFdBQVc7UUFDOUIsT0FBTyxDQUFDLENBQUMsS0FBSyxLQUFJLFdBQVcsYUFBWCxXQUFXLHVCQUFYLFdBQVcsQ0FBRSxVQUFVLENBQUMsUUFBUSxFQUFDLEtBQUksV0FBVyxhQUFYLFdBQVcsdUJBQVgsV0FBVyxDQUFFLFVBQVUsQ0FBQyxPQUFPLEVBQUMsQ0FBQztJQUM1RixDQUFDOzs7WUFwREosU0FBUyxTQUFDO2dCQUNQLFFBQVEsRUFBRSxzQkFBc0I7Z0JBQ2hDLFFBQVEsRUFBRTs7Ozs7Ozs7OztLQVVUO2dCQUVELGFBQWEsRUFBRSxpQkFBaUIsQ0FBQyxJQUFJO2dCQUNyQyxJQUFJLEVBQUUsRUFBRSxLQUFLLEVBQUUsaURBQWlELEVBQUU7O2FBQ3JFOzs7WUFsQlEscUJBQXFCOzs7c0JBb0J6QixLQUFLO21CQUdMLEtBQUs7dUJBR0wsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IFVzZXIgfSBmcm9tICdAYWxmcmVzY28vYWRmLWNvcmUnO1xuaW1wb3J0IHsgTm9kZUVudHJ5IH0gZnJvbSAnQGFsZnJlc2NvL2pzLWFwaSc7XG5pbXBvcnQgeyBDb21wb25lbnQsIElucHV0LCBPbkluaXQsIFZpZXdFbmNhcHN1bGF0aW9uIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBCZWhhdmlvclN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IE5vZGVQZXJtaXNzaW9uU2VydmljZSB9IGZyb20gJy4uLy4uL3NlcnZpY2VzL25vZGUtcGVybWlzc2lvbi5zZXJ2aWNlJztcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICdhZGYtdXNlci1pY29uLWNvbHVtbicsXG4gICAgdGVtcGxhdGU6IGBcbiAgICAgICAgPGRpdiBjbGFzcz1cImFkZi1jZWxsLXZhbHVlXCIgW2F0dHIuaWRdPVwiZ3JvdXAgPyAnZ3JvdXAtaWNvbicgOiAncGVyc29uLWljb24nXCIgICpuZ0lmPVwiIWlzU2VsZWN0ZWRcIj5cbiAgICAgICAgICAgIDxuZy1jb250YWluZXIgKm5nSWY9XCJkaXNwbGF5VGV4dCQgfCBhc3luYyBhcyB1c2VyXCI+XG4gICAgICAgICAgICAgICAgPG1hdC1pY29uICpuZ0lmPVwiZ3JvdXBcIiBjbGFzcz1cImFkZi1ncm91cC1pY29uXCI+cGVvcGxlX2FsdF9vdXRsaW5lPC9tYXQtaWNvbj5cbiAgICAgICAgICAgICAgICA8ZGl2ICpuZ0lmPVwiIWdyb3VwXCIgW291dGVySFRNTF09XCJ1c2VyIHwgdXNlcm5hbWVJbml0aWFsczogJ2FkZi1wZW9wbGUtaW5pdGlhbCdcIj48L2Rpdj5cbiAgICAgICAgICAgIDwvbmctY29udGFpbmVyPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImFkZi1jZWxsLXZhbHVlXCIgKm5nSWY9XCJpc1NlbGVjdGVkXCI+XG4gICAgICAgICAgICA8bWF0LWljb24gY2xhc3M9XCJhZGYtcGVvcGxlLXNlbGVjdC1pY29uIGFkZi1kYXRhdGFibGUtc2VsZWN0ZWRcIiBzdmdJY29uPVwic2VsZWN0ZWRcIj48L21hdC1pY29uPlxuICAgICAgICA8L2Rpdj5cbiAgICBgLFxuICAgIHN0eWxlVXJsczogWycuL3VzZXItaWNvbi1jb2x1bW4uY29tcG9uZW50LnNjc3MnXSxcbiAgICBlbmNhcHN1bGF0aW9uOiBWaWV3RW5jYXBzdWxhdGlvbi5Ob25lLFxuICAgIGhvc3Q6IHsgY2xhc3M6ICdhZGYtdXNlci1pY29uLWNvbHVtbiBhZGYtZGF0YXRhYmxlLWNvbnRlbnQtY2VsbCcgfVxufSlcbmV4cG9ydCBjbGFzcyBVc2VySWNvbkNvbHVtbkNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gICAgQElucHV0KClcbiAgICBjb250ZXh0OiBhbnk7XG5cbiAgICBASW5wdXQoKVxuICAgIG5vZGU6IE5vZGVFbnRyeTtcblxuICAgIEBJbnB1dCgpXG4gICAgc2VsZWN0ZWQ6IGJvb2xlYW4gPSBmYWxzZTtcblxuICAgIGRpc3BsYXlUZXh0JCA9IG5ldyBCZWhhdmlvclN1YmplY3Q8VXNlcj4obnVsbCk7XG4gICAgZ3JvdXAgPSBmYWxzZTtcblxuICAgIGdldCBpc1NlbGVjdGVkKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5jb250ZXh0Py5yb3c/LmlzU2VsZWN0ZWQgfHwgdGhpcy5zZWxlY3RlZDtcbiAgICB9XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIG5vZGVQZXJtaXNzaW9uU2VydmljZTogTm9kZVBlcm1pc3Npb25TZXJ2aWNlKSB7fVxuXG4gICAgbmdPbkluaXQoKSB7XG4gICAgICAgIGlmICh0aGlzLmNvbnRleHQpIHtcbiAgICAgICAgICAgIGNvbnN0IHsgcGVyc29uLCBncm91cCwgYXV0aG9yaXR5SWQgfSA9IHRoaXMuY29udGV4dC5yb3cub2JqPy5lbnRyeSA/PyB0aGlzLmNvbnRleHQucm93Lm9iajtcbiAgICAgICAgICAgIHRoaXMuZ3JvdXAgPSB0aGlzLmlzR3JvdXAoZ3JvdXAsIGF1dGhvcml0eUlkKTtcbiAgICAgICAgICAgIHRoaXMuZGlzcGxheVRleHQkLm5leHQocGVyc29uIHx8IGdyb3VwIHx8IHsgZGlzcGxheU5hbWU6IGF1dGhvcml0eUlkIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMubm9kZSkge1xuICAgICAgICAgICAgY29uc3QgeyBwZXJzb24sIGdyb3VwIH0gPSB0aGlzLm5vZGVQZXJtaXNzaW9uU2VydmljZS50cmFuc2Zvcm1Ob2RlVG9Vc2VyUGVyc29uKHRoaXMubm9kZS5lbnRyeSk7XG4gICAgICAgICAgICB0aGlzLmdyb3VwID0gdGhpcy5pc0dyb3VwKGdyb3VwLCBudWxsKTtcbiAgICAgICAgICAgIHRoaXMuZGlzcGxheVRleHQkLm5leHQocGVyc29uIHx8IGdyb3VwKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgaXNHcm91cChncm91cCwgYXV0aG9yaXR5SWQpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuICEhZ3JvdXAgfHwgYXV0aG9yaXR5SWQ/LnN0YXJ0c1dpdGgoJ0dST1VQXycpIHx8IGF1dGhvcml0eUlkPy5zdGFydHNXaXRoKCdST0xFXycpO1xuICAgIH1cbn1cbiJdfQ==