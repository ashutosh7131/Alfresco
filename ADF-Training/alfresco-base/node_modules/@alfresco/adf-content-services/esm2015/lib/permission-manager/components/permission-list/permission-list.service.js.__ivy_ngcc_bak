import { AllowableOperationsEnum, ContentService, NodesApiService, NotificationService } from '@alfresco/adf-core';
import { EventEmitter, Injectable } from '@angular/core';
import { BehaviorSubject, forkJoin, of, Subject } from 'rxjs';
import { finalize, map, switchMap } from 'rxjs/operators';
import { NodePermissionService } from '../../services/node-permission.service';
import { NodePermissionDialogService } from '../../services/node-permission-dialog.service';
import * as i0 from "@angular/core";
import * as i1 from "@alfresco/adf-core";
import * as i2 from "../../services/node-permission.service";
import * as i3 from "../../services/node-permission-dialog.service";
export class PermissionListService {
    constructor(nodeService, nodePermissionService, nodePermissionDialogService, contentService, notificationService) {
        this.nodeService = nodeService;
        this.nodePermissionService = nodePermissionService;
        this.nodePermissionDialogService = nodePermissionDialogService;
        this.contentService = contentService;
        this.notificationService = notificationService;
        this.updated = new EventEmitter();
        this.errored = new EventEmitter();
        this.loading$ = new BehaviorSubject(true);
        this.error$ = new Subject();
        this.nodeWithRoles$ = new Subject();
        this.data$ = this.nodeWithRoles$.pipe(map(({ node, roles }) => {
            const nodeLocalPermissions = this.nodePermissionService.getLocalPermissions(node);
            const localPermissions = this.updateReadOnlyPermission(node, nodeLocalPermissions);
            return {
                node,
                roles,
                localPermissions,
                inheritedPermissions: this.nodePermissionService.getInheritedPermission(node)
            };
        }));
        this.SITE_MANAGER_ROLE = 'SiteManager';
    }
    fetchPermission(nodeId) {
        this.loading$.next(true);
        this.nodePermissionService.getNodeWithRoles(nodeId)
            .pipe(finalize(() => this.loading$.next(false)))
            .subscribe(({ node, roles }) => {
            this.node = node;
            this.roles = roles;
            this.nodeWithRoles$.next({ node, roles });
        }, () => this.error$.next(true));
    }
    toggleInherited(change) {
        if (this.contentService.hasAllowableOperations(this.node, AllowableOperationsEnum.UPDATEPERMISSIONS)) {
            let updateLocalPermission$ = of(null);
            const nodeBody = {
                permissions: {
                    isInheritanceEnabled: !this.node.permissions.isInheritanceEnabled
                }
            };
            const authorityId = this.getManagerAuthority(this.node);
            if (authorityId) {
                const permissions = [
                    ...(this.node.permissions.locallySet || []),
                    { authorityId, name: this.SITE_MANAGER_ROLE, accessStatus: 'ALLOWED' }
                ];
                updateLocalPermission$ = this.nodePermissionService.updatePermissions(this.node, permissions);
            }
            updateLocalPermission$.pipe(switchMap(() => this.nodeService.updateNode(this.node.id, nodeBody, { include: ['permissions'] })))
                .subscribe((nodeUpdated) => {
                var _a, _b;
                const message = nodeUpdated.permissions.isInheritanceEnabled ? 'PERMISSION_MANAGER.MESSAGE.INHERIT-ENABLE-SUCCESS' : 'PERMISSION_MANAGER.MESSAGE.INHERIT-DISABLE-SUCCESS';
                this.notificationService.showInfo(message);
                nodeUpdated.permissions.inherited = (_b = (_a = nodeUpdated.permissions) === null || _a === void 0 ? void 0 : _a.inherited) !== null && _b !== void 0 ? _b : [];
                this.reloadNode(nodeUpdated);
            }, () => {
                change.source.checked = this.node.permissions.isInheritanceEnabled;
                this.notificationService.showWarning('PERMISSION_MANAGER.MESSAGE.TOGGLE-PERMISSION-FAILED');
            });
        }
        else {
            change.source.checked = this.node.permissions.isInheritanceEnabled;
            this.notificationService.showError('PERMISSION_MANAGER.ERROR.NOT-ALLOWED');
        }
    }
    updateNodePermissionByDialog() {
        this.nodePermissionDialogService
            .openAddPermissionDialog(this.node, this.roles, 'PERMISSION_MANAGER.ADD-PERMISSION.TITLE')
            .pipe(switchMap(selection => {
            const total = selection.length;
            const group = selection.filter(({ authorityId }) => this.isGroup(authorityId)).length;
            return forkJoin({
                user: of(total - group),
                group: of(group),
                node: this.nodePermissionService.updateNodePermissions(this.node.id, selection)
            });
        }))
            .subscribe(({ user, group, node }) => {
            this.notificationService.showInfo('PERMISSION_MANAGER.MESSAGE.PERMISSION-ADD-SUCCESS', null, { user, group });
            this.reloadNode(node);
        }, () => {
            this.notificationService.showError('PERMISSION_MANAGER.MESSAGE.PERMISSION-ADD-FAIL');
            this.reloadNode();
        });
    }
    deletePermissions(permissions) {
        this.nodePermissionService.removePermissions(this.node, permissions)
            .subscribe((node) => {
            const total = permissions.length;
            const group = permissions.filter(({ authorityId }) => this.isGroup(authorityId)).length;
            this.notificationService.showInfo('PERMISSION_MANAGER.MESSAGE.PERMISSION-BULK-DELETE-SUCCESS', null, { user: total - group, group });
            this.reloadNode(node);
        }, () => {
            this.notificationService.showError('PERMISSION_MANAGER.MESSAGE.PERMISSION-DELETE-FAIL');
            this.reloadNode();
        });
    }
    updateRole(role, permission) {
        const updatedPermissionRole = this.buildUpdatedPermission(role, permission);
        this.nodePermissionService.updatePermissionRole(this.node, updatedPermissionRole)
            .subscribe((node) => {
            this.notificationService.showInfo('PERMISSION_MANAGER.MESSAGE.PERMISSION-UPDATE-SUCCESS');
            this.reloadNode(node);
            this.updated.emit(permission);
        }, () => {
            this.notificationService.showError('PERMISSION_MANAGER.MESSAGE.PERMISSION-UPDATE-FAIL');
            this.reloadNode();
            this.errored.emit(permission);
        });
    }
    bulkRoleUpdate(role) {
        const permissions = [...this.node.permissions.locallySet].map((permission) => this.buildUpdatedPermission(role, permission));
        this.nodePermissionService.updatePermissions(this.node, permissions)
            .subscribe((node) => {
            const total = permissions.length;
            const group = permissions.filter(({ authorityId }) => this.isGroup(authorityId)).length;
            this.notificationService.showInfo('PERMISSION_MANAGER.MESSAGE.PERMISSION-BULK-UPDATE-SUCCESS', null, { user: total - group, group });
            this.reloadNode(node);
        }, () => {
            this.notificationService.showError('PERMISSION_MANAGER.MESSAGE.PERMISSION-UPDATE-FAIL');
            this.reloadNode();
        });
    }
    deletePermission(permission) {
        const cloneNode = Object.assign(Object.assign({}, this.node), { permissions: Object.assign(Object.assign({}, this.node.permissions), { locallySet: [...this.node.permissions.locallySet] }) });
        this.nodePermissionService
            .removePermission(cloneNode, permission)
            .subscribe((node) => {
            this.notificationService.showInfo('PERMISSION_MANAGER.MESSAGE.PERMISSION-DELETE-SUCCESS');
            if (!node.permissions.locallySet) {
                node.permissions.locallySet = [];
            }
            this.reloadNode(node);
        }, () => {
            this.notificationService.showError('PERMISSION_MANAGER.MESSAGE.PERMISSION-DELETE-FAIL');
            this.reloadNode();
        });
    }
    buildUpdatedPermission(role, permission) {
        return {
            accessStatus: permission.accessStatus,
            name: this.canUpdateThePermission(this.node, permission) ? role : permission.name,
            authorityId: permission.authorityId
        };
    }
    reloadNode(node) {
        if (node != null) {
            Object.assign(this.node.permissions, node.permissions);
        }
        this.nodeWithRoles$.next({ node: this.node, roles: this.roles });
    }
    getManagerAuthority(node) {
        var _a;
        const sitePath = node.path.elements.find((path) => path.nodeType === 'st:site');
        let hasLocalManagerPermission = false, authorityId;
        if (sitePath) {
            authorityId = `GROUP_site_${sitePath.name}_${this.SITE_MANAGER_ROLE}`;
            hasLocalManagerPermission = !!((_a = node.permissions.locallySet) === null || _a === void 0 ? void 0 : _a.find((permission) => permission.authorityId === authorityId && permission.name === this.SITE_MANAGER_ROLE));
        }
        if (!hasLocalManagerPermission && authorityId) {
            return authorityId;
        }
        return null;
    }
    updateReadOnlyPermission(node, permissions) {
        permissions.forEach((permission) => {
            if (!this.canUpdateThePermission(node, permission)) {
                permission.readonly = true;
            }
        });
        return permissions;
    }
    canUpdateThePermission(node, permission) {
        const sitePath = node.path.elements.find((path) => path.nodeType === 'st:site');
        if (!node.permissions.isInheritanceEnabled && sitePath) {
            const authorityId = `GROUP_site_${sitePath.name}_${this.SITE_MANAGER_ROLE}`;
            return !(permission.authorityId === authorityId && permission.name === this.SITE_MANAGER_ROLE);
        }
        return true;
    }
    isGroup(authorityId) {
        return authorityId.startsWith('GROUP_') || authorityId.startsWith('ROLE_');
    }
}
PermissionListService.Éµprov = i0.ÉµÉµdefineInjectable({ factory: function PermissionListService_Factory() { return new PermissionListService(i0.ÉµÉµinject(i1.NodesApiService), i0.ÉµÉµinject(i2.NodePermissionService), i0.ÉµÉµinject(i3.NodePermissionDialogService), i0.ÉµÉµinject(i1.ContentService), i0.ÉµÉµinject(i1.NotificationService)); }, token: PermissionListService, providedIn: "root" });
PermissionListService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
PermissionListService.ctorParameters = () => [
    { type: NodesApiService },
    { type: NodePermissionService },
    { type: NodePermissionDialogService },
    { type: ContentService },
    { type: NotificationService }
];
//# sourceMappingURL=data:application/json;base64,