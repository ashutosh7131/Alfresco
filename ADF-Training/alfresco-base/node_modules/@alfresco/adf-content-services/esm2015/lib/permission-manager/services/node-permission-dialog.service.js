import { AllowableOperationsEnum, ContentService } from '@alfresco/adf-core';
import { MatDialog } from '@angular/material/dialog';
import { Injectable } from '@angular/core';
import { Subject, throwError } from 'rxjs';
import { switchMap } from 'rxjs/operators';
import { NodePermissionService } from './node-permission.service';
import { AddPermissionDialogComponent } from '../components/add-permission/add-permission-dialog.component';
import * as i0 from "@angular/core";
import * as i1 from "@angular/material/dialog";
import * as i2 from "./node-permission.service";
import * as i3 from "@alfresco/adf-core";
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/material/dialog';
import * as ɵngcc2 from './node-permission.service';
import * as ɵngcc3 from '@alfresco/adf-core';
export class NodePermissionDialogService {
    constructor(dialog, nodePermissionService, contentService) {
        this.dialog = dialog;
        this.nodePermissionService = nodePermissionService;
        this.contentService = contentService;
    }
    openAddPermissionDialog(node, roles, title) {
        if (this.contentService.hasAllowableOperations(node, AllowableOperationsEnum.UPDATEPERMISSIONS)) {
            const confirm = new Subject();
            confirm.subscribe({
                complete: this.close.bind(this)
            });
            const data = {
                node: node,
                title: title,
                confirm: confirm,
                roles
            };
            this.openDialog(data, 'adf-add-permission-dialog', '800px');
            return confirm;
        }
        else {
            const errors = new Error(JSON.stringify({ error: { statusCode: 403 } }));
            errors.message = 'PERMISSION_MANAGER.ERROR.NOT-ALLOWED';
            return throwError(errors);
        }
    }
    openDialog(data, currentPanelClass, chosenWidth) {
        this.dialog.open(AddPermissionDialogComponent, { data, panelClass: currentPanelClass, width: chosenWidth, restoreFocus: true });
    }
    close() {
        this.dialog.closeAll();
    }
    updateNodePermissionByDialog(nodeId, title) {
        return this.nodePermissionService.getNodeWithRoles(nodeId)
            .pipe(switchMap(({ node, roles }) => {
            return this.openAddPermissionDialog(node, roles, title)
                .pipe(switchMap((selection) => {
                return this.nodePermissionService.updateNodePermissions(nodeId, selection);
            }));
        }));
    }
}
NodePermissionDialogService.ɵfac = function NodePermissionDialogService_Factory(t) { return new (t || NodePermissionDialogService)(ɵngcc0.ɵɵinject(ɵngcc1.MatDialog), ɵngcc0.ɵɵinject(ɵngcc2.NodePermissionService), ɵngcc0.ɵɵinject(ɵngcc3.ContentService)); };
NodePermissionDialogService.ɵprov = i0.ɵɵdefineInjectable({ factory: function NodePermissionDialogService_Factory() { return new NodePermissionDialogService(i0.ɵɵinject(i1.MatDialog), i0.ɵɵinject(i2.NodePermissionService), i0.ɵɵinject(i3.ContentService)); }, token: NodePermissionDialogService, providedIn: "root" });
NodePermissionDialogService.ctorParameters = () => [
    { type: MatDialog },
    { type: NodePermissionService },
    { type: ContentService }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NodePermissionDialogService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc1.MatDialog }, { type: ɵngcc2.NodePermissionService }, { type: ɵngcc3.ContentService }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9kZS1wZXJtaXNzaW9uLWRpYWxvZy5zZXJ2aWNlLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9ob21lL3RyYXZpcy9idWlsZC9BbGZyZXNjby9hbGZyZXNjby1uZzItY29tcG9uZW50cy9saWIvY29udGVudC1zZXJ2aWNlcy9zcmMvbGliL3Blcm1pc3Npb24tbWFuYWdlci9zZXJ2aWNlcy9ub2RlLXBlcm1pc3Npb24tZGlhbG9nLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBaUJBLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxjQUFjLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUU3RSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDckQsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQWMsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUN2RCxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDM0MsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFDbEUsT0FBTyxFQUFFLDRCQUE0QixFQUFFLE1BQU0sOERBQThELENBQUM7QUFDNUc7QUFBcUM7QUFBZ0Q7QUFDNUQ7Ozs7O0FBS3pCLE1BQU0sT0FBTywyQkFBMkI7QUFDeEMsSUFDSSxZQUFvQixNQUFpQixFQUNqQixxQkFBNEMsRUFDNUMsY0FBOEI7QUFDdEQsUUFId0IsV0FBTSxHQUFOLE1BQU0sQ0FBVztBQUFDLFFBQ2xCLDBCQUFxQixHQUFyQixxQkFBcUIsQ0FBdUI7QUFBQyxRQUM3QyxtQkFBYyxHQUFkLGNBQWMsQ0FBZ0I7QUFBQyxJQUNuRCxDQUFDO0FBQ0wsSUFRSSx1QkFBdUIsQ0FBQyxJQUFVLEVBQUUsS0FBa0IsRUFBRSxLQUFjO0FBQUksUUFDdEUsSUFBSSxJQUFJLENBQUMsY0FBYyxDQUFDLHNCQUFzQixDQUFDLElBQUksRUFBRSx1QkFBdUIsQ0FBQyxpQkFBaUIsQ0FBQyxFQUFFO0FBQ3pHLFlBQVksTUFBTSxPQUFPLEdBQUcsSUFBSSxPQUFPLEVBQXVCLENBQUM7QUFDL0QsWUFDWSxPQUFPLENBQUMsU0FBUyxDQUFDO0FBQzlCLGdCQUFnQixRQUFRLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDO0FBQy9DLGFBQWEsQ0FBQyxDQUFDO0FBQ2YsWUFDWSxNQUFNLElBQUksR0FBNEI7QUFDbEQsZ0JBQWdCLElBQUksRUFBRSxJQUFJO0FBQzFCLGdCQUFnQixLQUFLLEVBQUUsS0FBSztBQUM1QixnQkFBZ0IsT0FBTyxFQUFFLE9BQU87QUFDaEMsZ0JBQWdCLEtBQUs7QUFDckIsYUFBYSxDQUFDO0FBQ2QsWUFDWSxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksRUFBRSwyQkFBMkIsRUFBRSxPQUFPLENBQUMsQ0FBQztBQUN4RSxZQUFZLE9BQU8sT0FBTyxDQUFDO0FBQzNCLFNBQVM7QUFBQyxhQUFLO0FBQ2YsWUFBWSxNQUFNLE1BQU0sR0FBRyxJQUFJLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEVBQUUsS0FBSyxFQUFFLEVBQUUsVUFBVSxFQUFFLEdBQUcsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQ3JGLFlBQVksTUFBTSxDQUFDLE9BQU8sR0FBRyxzQ0FBc0MsQ0FBQztBQUNwRSxZQUFZLE9BQU8sVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQ3RDLFNBQVM7QUFDVCxJQUFJLENBQUM7QUFDTCxJQUNZLFVBQVUsQ0FBQyxJQUFTLEVBQUUsaUJBQXlCLEVBQUUsV0FBbUI7QUFDaEYsUUFBUSxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyw0QkFBNEIsRUFBRSxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUUsaUJBQWlCLEVBQUUsS0FBSyxFQUFFLFdBQVcsRUFBRSxZQUFZLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztBQUN4SSxJQUFJLENBQUM7QUFDTCxJQUlJLEtBQUs7QUFDVCxRQUFRLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUM7QUFDL0IsSUFBSSxDQUFDO0FBQ0wsSUFPSSw0QkFBNEIsQ0FBQyxNQUFlLEVBQUUsS0FBYztBQUFJLFFBQzVELE9BQU8sSUFBSSxDQUFDLHFCQUFxQixDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQztBQUNsRSxhQUFhLElBQUksQ0FDRCxTQUFTLENBQUMsQ0FBQyxFQUFDLElBQUksRUFBRSxLQUFLLEVBQUMsRUFBRSxFQUFFO0FBQzVDLFlBQW9CLE9BQU8sSUFBSSxDQUFDLHVCQUF1QixDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsS0FBSyxDQUFDO0FBQzNFLGlCQUF5QixJQUFJLENBQ0QsU0FBUyxDQUFDLENBQUMsU0FBUyxFQUFFLEVBQUU7QUFDcEQsZ0JBQWdDLE9BQU8sSUFBSSxDQUFDLHFCQUFxQixDQUFDLHFCQUFxQixDQUFDLE1BQU0sRUFBRSxTQUFTLENBQUMsQ0FBQztBQUMzRyxZQUE0QixDQUFDLENBQUMsQ0FDTCxDQUFDO0FBQzFCLFFBQWdCLENBQUMsQ0FBQyxDQUNMLENBQUM7QUFDZCxJQUFJLENBQUM7QUFDTDtnUUFBQztBQUNELDZUQXJFSztBQUFDO0VBSEwsVUFBVSxTQUFDLHJCQUtHLFlBZE4sU0FBUztjQVVkLFVBQVUsRUFBRSxNQUFNLGhDQVZBLFlBSWIscUJBQXFCO1NBTzdCLFRBUGlDLFlBTkEsY0FBYztBQUFHOzs7Ozs7bUpBQUU7QUFBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IEFsbG93YWJsZU9wZXJhdGlvbnNFbnVtLCBDb250ZW50U2VydmljZSB9IGZyb20gJ0BhbGZyZXNjby9hZGYtY29yZSc7XG5pbXBvcnQgeyBOb2RlLCBQZXJtaXNzaW9uRWxlbWVudCB9IGZyb20gJ0BhbGZyZXNjby9qcy1hcGknO1xuaW1wb3J0IHsgTWF0RGlhbG9nIH0gZnJvbSAnQGFuZ3VsYXIvbWF0ZXJpYWwvZGlhbG9nJztcbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUsIFN1YmplY3QsIHRocm93RXJyb3IgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IHN3aXRjaE1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IE5vZGVQZXJtaXNzaW9uU2VydmljZSB9IGZyb20gJy4vbm9kZS1wZXJtaXNzaW9uLnNlcnZpY2UnO1xuaW1wb3J0IHsgQWRkUGVybWlzc2lvbkRpYWxvZ0NvbXBvbmVudCB9IGZyb20gJy4uL2NvbXBvbmVudHMvYWRkLXBlcm1pc3Npb24vYWRkLXBlcm1pc3Npb24tZGlhbG9nLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBBZGRQZXJtaXNzaW9uRGlhbG9nRGF0YSB9IGZyb20gJy4uL2NvbXBvbmVudHMvYWRkLXBlcm1pc3Npb24vYWRkLXBlcm1pc3Npb24tZGlhbG9nLWRhdGEuaW50ZXJmYWNlJztcbmltcG9ydCB7IFJvbGVNb2RlbCB9IGZyb20gJy4uL21vZGVscy9yb2xlLm1vZGVsJztcblxuQEluamVjdGFibGUoe1xuICAgIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBOb2RlUGVybWlzc2lvbkRpYWxvZ1NlcnZpY2Uge1xuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBkaWFsb2c6IE1hdERpYWxvZyxcbiAgICAgICAgICAgICAgICBwcml2YXRlIG5vZGVQZXJtaXNzaW9uU2VydmljZTogTm9kZVBlcm1pc3Npb25TZXJ2aWNlLFxuICAgICAgICAgICAgICAgIHByaXZhdGUgY29udGVudFNlcnZpY2U6IENvbnRlbnRTZXJ2aWNlKSB7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogT3BlbnMgYSBkaWFsb2cgdG8gYWRkIHBlcm1pc3Npb25zIHRvIGEgbm9kZS5cbiAgICAgKiBAcGFyYW0gbm9kZSB0YXJnZXQgbm9kZVxuICAgICAqIEBwYXJhbSByb2xlcyBzZXR0YWJsZSByb2xlcyBmb3IgdGhlIG5vZGVcbiAgICAgKiBAcGFyYW0gdGl0bGUgRGlhbG9nIHRpdGxlXG4gICAgICogQHJldHVybnMgTm9kZSB3aXRoIHVwZGF0ZWQgcGVybWlzc2lvbnNcbiAgICAgKi9cbiAgICBvcGVuQWRkUGVybWlzc2lvbkRpYWxvZyhub2RlOiBOb2RlLCByb2xlczogUm9sZU1vZGVsW10sIHRpdGxlPzogc3RyaW5nKTogT2JzZXJ2YWJsZTxQZXJtaXNzaW9uRWxlbWVudFtdPiB7XG4gICAgICAgIGlmICh0aGlzLmNvbnRlbnRTZXJ2aWNlLmhhc0FsbG93YWJsZU9wZXJhdGlvbnMobm9kZSwgQWxsb3dhYmxlT3BlcmF0aW9uc0VudW0uVVBEQVRFUEVSTUlTU0lPTlMpKSB7XG4gICAgICAgICAgICBjb25zdCBjb25maXJtID0gbmV3IFN1YmplY3Q8UGVybWlzc2lvbkVsZW1lbnRbXT4oKTtcblxuICAgICAgICAgICAgY29uZmlybS5zdWJzY3JpYmUoe1xuICAgICAgICAgICAgICAgIGNvbXBsZXRlOiB0aGlzLmNsb3NlLmJpbmQodGhpcylcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBjb25zdCBkYXRhOiBBZGRQZXJtaXNzaW9uRGlhbG9nRGF0YSA9IHtcbiAgICAgICAgICAgICAgICBub2RlOiBub2RlLFxuICAgICAgICAgICAgICAgIHRpdGxlOiB0aXRsZSxcbiAgICAgICAgICAgICAgICBjb25maXJtOiBjb25maXJtLFxuICAgICAgICAgICAgICAgIHJvbGVzXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICB0aGlzLm9wZW5EaWFsb2coZGF0YSwgJ2FkZi1hZGQtcGVybWlzc2lvbi1kaWFsb2cnLCAnODAwcHgnKTtcbiAgICAgICAgICAgIHJldHVybiBjb25maXJtO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgZXJyb3JzID0gbmV3IEVycm9yKEpTT04uc3RyaW5naWZ5KHsgZXJyb3I6IHsgc3RhdHVzQ29kZTogNDAzIH0gfSkpO1xuICAgICAgICAgICAgZXJyb3JzLm1lc3NhZ2UgPSAnUEVSTUlTU0lPTl9NQU5BR0VSLkVSUk9SLk5PVC1BTExPV0VEJztcbiAgICAgICAgICAgIHJldHVybiB0aHJvd0Vycm9yKGVycm9ycyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIG9wZW5EaWFsb2coZGF0YTogYW55LCBjdXJyZW50UGFuZWxDbGFzczogc3RyaW5nLCBjaG9zZW5XaWR0aDogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMuZGlhbG9nLm9wZW4oQWRkUGVybWlzc2lvbkRpYWxvZ0NvbXBvbmVudCwgeyBkYXRhLCBwYW5lbENsYXNzOiBjdXJyZW50UGFuZWxDbGFzcywgd2lkdGg6IGNob3NlbldpZHRoLCByZXN0b3JlRm9jdXM6IHRydWUgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2xvc2VzIHRoZSBjdXJyZW50bHktb3BlbiBkaWFsb2cuXG4gICAgICovXG4gICAgY2xvc2UoKSB7XG4gICAgICAgIHRoaXMuZGlhbG9nLmNsb3NlQWxsKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogT3BlbnMgYSBkaWFsb2cgdG8gdXBkYXRlIHBlcm1pc3Npb25zIGZvciBhIG5vZGUuXG4gICAgICogQHBhcmFtIG5vZGVJZCBJRCBvZiB0aGUgdGFyZ2V0IG5vZGVcbiAgICAgKiBAcGFyYW0gdGl0bGUgRGlhbG9nIHRpdGxlXG4gICAgICogQHJldHVybnMgTm9kZSB3aXRoIHVwZGF0ZWQgcGVybWlzc2lvbnNcbiAgICAgKi9cbiAgICB1cGRhdGVOb2RlUGVybWlzc2lvbkJ5RGlhbG9nKG5vZGVJZD86IHN0cmluZywgdGl0bGU/OiBzdHJpbmcpOiBPYnNlcnZhYmxlPE5vZGU+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMubm9kZVBlcm1pc3Npb25TZXJ2aWNlLmdldE5vZGVXaXRoUm9sZXMobm9kZUlkKVxuICAgICAgICAgICAgLnBpcGUoXG4gICAgICAgICAgICAgICAgc3dpdGNoTWFwKCh7bm9kZSwgcm9sZXN9KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm9wZW5BZGRQZXJtaXNzaW9uRGlhbG9nKG5vZGUsIHJvbGVzLCB0aXRsZSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC5waXBlKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaE1hcCgoc2VsZWN0aW9uKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm5vZGVQZXJtaXNzaW9uU2VydmljZS51cGRhdGVOb2RlUGVybWlzc2lvbnMobm9kZUlkLCBzZWxlY3Rpb24pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICApO1xuICAgIH1cbn1cbiJdfQ==