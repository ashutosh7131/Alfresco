import { AllowableOperationsEnum, ContentService } from '@alfresco/adf-core';
import { MatDialog } from '@angular/material/dialog';
import { Injectable } from '@angular/core';
import { Subject, throwError } from 'rxjs';
import { switchMap } from 'rxjs/operators';
import { NodePermissionService } from './node-permission.service';
import { AddPermissionDialogComponent } from '../components/add-permission/add-permission-dialog.component';
import * as i0 from "@angular/core";
import * as i1 from "@angular/material/dialog";
import * as i2 from "./node-permission.service";
import * as i3 from "@alfresco/adf-core";
export class NodePermissionDialogService {
    constructor(dialog, nodePermissionService, contentService) {
        this.dialog = dialog;
        this.nodePermissionService = nodePermissionService;
        this.contentService = contentService;
    }
    openAddPermissionDialog(node, roles, title) {
        if (this.contentService.hasAllowableOperations(node, AllowableOperationsEnum.UPDATEPERMISSIONS)) {
            const confirm = new Subject();
            confirm.subscribe({
                complete: this.close.bind(this)
            });
            const data = {
                node: node,
                title: title,
                confirm: confirm,
                roles
            };
            this.openDialog(data, 'adf-add-permission-dialog', '800px');
            return confirm;
        }
        else {
            const errors = new Error(JSON.stringify({ error: { statusCode: 403 } }));
            errors.message = 'PERMISSION_MANAGER.ERROR.NOT-ALLOWED';
            return throwError(errors);
        }
    }
    openDialog(data, currentPanelClass, chosenWidth) {
        this.dialog.open(AddPermissionDialogComponent, { data, panelClass: currentPanelClass, width: chosenWidth, restoreFocus: true });
    }
    close() {
        this.dialog.closeAll();
    }
    updateNodePermissionByDialog(nodeId, title) {
        return this.nodePermissionService.getNodeWithRoles(nodeId)
            .pipe(switchMap(({ node, roles }) => {
            return this.openAddPermissionDialog(node, roles, title)
                .pipe(switchMap((selection) => {
                return this.nodePermissionService.updateNodePermissions(nodeId, selection);
            }));
        }));
    }
}
NodePermissionDialogService.ɵprov = i0.ɵɵdefineInjectable({ factory: function NodePermissionDialogService_Factory() { return new NodePermissionDialogService(i0.ɵɵinject(i1.MatDialog), i0.ɵɵinject(i2.NodePermissionService), i0.ɵɵinject(i3.ContentService)); }, token: NodePermissionDialogService, providedIn: "root" });
NodePermissionDialogService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
NodePermissionDialogService.ctorParameters = () => [
    { type: MatDialog },
    { type: NodePermissionService },
    { type: ContentService }
];
//# sourceMappingURL=data:application/json;base64,