/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Injectable, Optional, Inject, InjectionToken } from '@angular/core';
export const SEARCH_QUERY_TOKEN = new InjectionToken('Alfresco Search Query Token');
export class SearchPermissionConfigurationService {
    constructor(queryProvider) {
        this.queryProvider = queryProvider;
    }
    generateQueryBody(searchTerm, maxResults, skipCount) {
        const defaultQueryBody = {
            query: {
                query: this.getQuery(searchTerm)
            },
            include: ['properties', 'aspectNames'],
            paging: {
                maxItems: maxResults,
                skipCount: skipCount
            },
            filterQueries: [
                { query: "TYPE:'cm:authority'" }
            ]
        };
        return defaultQueryBody;
    }
    getQuery(searchTerm) {
        let query;
        if (this.queryProvider && this.queryProvider.query) {
            query = this.queryProvider.query.replace(new RegExp(/\${([^}]+)}/g), searchTerm);
        }
        else {
            query = `(email:*${searchTerm}* OR firstName:*${searchTerm}* OR lastName:*${searchTerm}* OR displayName:*${searchTerm}* OR authorityName:*${searchTerm}* OR authorityDisplayName:*${searchTerm}*) AND ANAME:(\"0/APP.DEFAULT\")`;
        }
        return query;
    }
}
SearchPermissionConfigurationService.decorators = [
    { type: Injectable }
];
SearchPermissionConfigurationService.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [SEARCH_QUERY_TOKEN,] }] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VhcmNoLWNvbmZpZy1wZXJtaXNzaW9uLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiL2hvbWUvdHJhdmlzL2J1aWxkL0FsZnJlc2NvL2FsZnJlc2NvLW5nMi1jb21wb25lbnRzL2xpYi9jb250ZW50LXNlcnZpY2VzL3NyYy8iLCJzb3VyY2VzIjpbImxpYi9wZXJtaXNzaW9uLW1hbmFnZXIvY29tcG9uZW50cy9hZGQtcGVybWlzc2lvbi9zZWFyY2gtY29uZmlnLXBlcm1pc3Npb24uc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7O0dBZUc7QUFJSCxPQUFPLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUUsY0FBYyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTdFLE1BQU0sQ0FBQyxNQUFNLGtCQUFrQixHQUFHLElBQUksY0FBYyxDQUFnQiw2QkFBNkIsQ0FBQyxDQUFDO0FBTW5HLE1BQU0sT0FBTyxvQ0FBb0M7SUFFN0MsWUFHWSxhQUE0QjtRQUE1QixrQkFBYSxHQUFiLGFBQWEsQ0FBZTtJQUN4QyxDQUFDO0lBRU0saUJBQWlCLENBQUMsVUFBa0IsRUFBRSxVQUFrQixFQUFFLFNBQWlCO1FBQzlFLE1BQU0sZ0JBQWdCLEdBQWM7WUFDaEMsS0FBSyxFQUFFO2dCQUNILEtBQUssRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQzthQUNuQztZQUNELE9BQU8sRUFBRSxDQUFDLFlBQVksRUFBRSxhQUFhLENBQUM7WUFDdEMsTUFBTSxFQUFFO2dCQUNKLFFBQVEsRUFBRSxVQUFVO2dCQUNwQixTQUFTLEVBQUUsU0FBUzthQUN2QjtZQUNELGFBQWEsRUFBRTtnQkFFWCxFQUFFLEtBQUssRUFBRSxxQkFBcUIsRUFBRTthQUFDO1NBQ3hDLENBQUM7UUFFRixPQUFPLGdCQUFnQixDQUFDO0lBQzVCLENBQUM7SUFFTyxRQUFRLENBQUMsVUFBa0I7UUFDL0IsSUFBSSxLQUFhLENBQUM7UUFDbEIsSUFBSSxJQUFJLENBQUMsYUFBYSxJQUFJLElBQUksQ0FBQyxhQUFhLENBQUMsS0FBSyxFQUFFO1lBQ2hELEtBQUssR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQ3BDLElBQUksTUFBTSxDQUFDLGNBQWMsQ0FBQyxFQUFFLFVBQVUsQ0FBQyxDQUFDO1NBQy9DO2FBQU07WUFDSCxLQUFLLEdBQUcsV0FBVyxVQUFVLG1CQUFtQixVQUFVLGtCQUFrQixVQUFVLHFCQUFxQixVQUFVLHVCQUF1QixVQUFVLDhCQUE4QixVQUFVLGtDQUFrQyxDQUFDO1NBQ3BPO1FBQ0QsT0FBTyxLQUFLLENBQUM7SUFDakIsQ0FBQzs7O1lBcENKLFVBQVU7Ozs0Q0FJRixRQUFRLFlBQ1IsTUFBTSxTQUFDLGtCQUFrQiIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IFF1ZXJ5Qm9keSB9IGZyb20gJ0BhbGZyZXNjby9qcy1hcGknO1xuaW1wb3J0IHsgU2VhcmNoQ29uZmlndXJhdGlvbkludGVyZmFjZSB9IGZyb20gJ0BhbGZyZXNjby9hZGYtY29yZSc7XG5pbXBvcnQgeyBJbmplY3RhYmxlLCBPcHRpb25hbCwgSW5qZWN0LCBJbmplY3Rpb25Ub2tlbiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5leHBvcnQgY29uc3QgU0VBUkNIX1FVRVJZX1RPS0VOID0gbmV3IEluamVjdGlvblRva2VuPFF1ZXJ5UHJvdmlkZXI+KCdBbGZyZXNjbyBTZWFyY2ggUXVlcnkgVG9rZW4nKTtcbmV4cG9ydCBpbnRlcmZhY2UgUXVlcnlQcm92aWRlciB7XG4gICAgcXVlcnk6IHN0cmluZztcbn1cblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFNlYXJjaFBlcm1pc3Npb25Db25maWd1cmF0aW9uU2VydmljZSBpbXBsZW1lbnRzIFNlYXJjaENvbmZpZ3VyYXRpb25JbnRlcmZhY2Uge1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIEBPcHRpb25hbCgpXG4gICAgICAgIEBJbmplY3QoU0VBUkNIX1FVRVJZX1RPS0VOKVxuICAgICAgICBwcml2YXRlIHF1ZXJ5UHJvdmlkZXI6IFF1ZXJ5UHJvdmlkZXIpIHtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2VuZXJhdGVRdWVyeUJvZHkoc2VhcmNoVGVybTogc3RyaW5nLCBtYXhSZXN1bHRzOiBudW1iZXIsIHNraXBDb3VudDogbnVtYmVyKTogUXVlcnlCb2R5IHtcbiAgICAgICAgY29uc3QgZGVmYXVsdFF1ZXJ5Qm9keTogUXVlcnlCb2R5ID0ge1xuICAgICAgICAgICAgcXVlcnk6IHtcbiAgICAgICAgICAgICAgICBxdWVyeTogdGhpcy5nZXRRdWVyeShzZWFyY2hUZXJtKVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGluY2x1ZGU6IFsncHJvcGVydGllcycsICdhc3BlY3ROYW1lcyddLFxuICAgICAgICAgICAgcGFnaW5nOiB7XG4gICAgICAgICAgICAgICAgbWF4SXRlbXM6IG1heFJlc3VsdHMsXG4gICAgICAgICAgICAgICAgc2tpcENvdW50OiBza2lwQ291bnRcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBmaWx0ZXJRdWVyaWVzOiBbXG4gICAgICAgICAgICAgICAgLyp0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmUgKi9cbiAgICAgICAgICAgICAgICB7IHF1ZXJ5OiBcIlRZUEU6J2NtOmF1dGhvcml0eSdcIiB9XVxuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBkZWZhdWx0UXVlcnlCb2R5O1xuICAgIH1cblxuICAgIHByaXZhdGUgZ2V0UXVlcnkoc2VhcmNoVGVybTogc3RyaW5nKSB7XG4gICAgICAgIGxldCBxdWVyeTogc3RyaW5nO1xuICAgICAgICBpZiAodGhpcy5xdWVyeVByb3ZpZGVyICYmIHRoaXMucXVlcnlQcm92aWRlci5xdWVyeSkge1xuICAgICAgICAgICAgcXVlcnkgPSB0aGlzLnF1ZXJ5UHJvdmlkZXIucXVlcnkucmVwbGFjZShcbiAgICAgICAgICAgICAgICBuZXcgUmVnRXhwKC9cXCR7KFtefV0rKX0vZyksIHNlYXJjaFRlcm0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcXVlcnkgPSBgKGVtYWlsOioke3NlYXJjaFRlcm19KiBPUiBmaXJzdE5hbWU6KiR7c2VhcmNoVGVybX0qIE9SIGxhc3ROYW1lOioke3NlYXJjaFRlcm19KiBPUiBkaXNwbGF5TmFtZToqJHtzZWFyY2hUZXJtfSogT1IgYXV0aG9yaXR5TmFtZToqJHtzZWFyY2hUZXJtfSogT1IgYXV0aG9yaXR5RGlzcGxheU5hbWU6KiR7c2VhcmNoVGVybX0qKSBBTkQgQU5BTUU6KFxcXCIwL0FQUC5ERUZBVUxUXFxcIilgO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBxdWVyeTtcbiAgICB9XG59XG4iXX0=