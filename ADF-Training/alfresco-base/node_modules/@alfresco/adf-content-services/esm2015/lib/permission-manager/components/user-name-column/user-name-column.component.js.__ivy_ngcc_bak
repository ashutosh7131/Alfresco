/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, Input, ViewEncapsulation } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { NodeEntry } from '@alfresco/js-api';
import { NodePermissionService } from '../../services/node-permission.service';
export class UserNameColumnComponent {
    constructor(nodePermissionService) {
        this.nodePermissionService = nodePermissionService;
        this.displayText$ = new BehaviorSubject('');
        this.subTitleText$ = new BehaviorSubject('');
    }
    ngOnInit() {
        var _a, _b;
        if (this.context != null) {
            const { person, group, authorityId } = (_b = (_a = this.context.row.obj) === null || _a === void 0 ? void 0 : _a.entry) !== null && _b !== void 0 ? _b : this.context.row.obj;
            const permissionGroup = authorityId ? { displayName: authorityId } : null;
            this.updatePerson(person);
            this.updateGroup(group || permissionGroup);
        }
        if (this.node) {
            const { person, group } = this.nodePermissionService.transformNodeToUserPerson(this.node.entry);
            this.updatePerson(person);
            this.updateGroup(group);
        }
    }
    updatePerson(person) {
        var _a, _b, _c;
        if (person) {
            this.displayText$.next(`${(_a = person.firstName) !== null && _a !== void 0 ? _a : ''} ${(_b = person.lastName) !== null && _b !== void 0 ? _b : ''}`);
            this.subTitleText$.next((_c = person.email) !== null && _c !== void 0 ? _c : '');
        }
    }
    updateGroup(group) {
        if (group) {
            this.displayText$.next(group.displayName);
        }
    }
}
UserNameColumnComponent.decorators = [
    { type: Component, args: [{
                selector: 'adf-user-name-column',
                template: `
        <div class="adf-ellipsis-cell" [attr.data-automation-id]="displayText$ | async">
            <span class="adf-user-name-column" title="{{ displayText$ | async }}"> {{ displayText$ | async }}</span>
            <br/>
            <span class="adf-user-email-column" title="{{ subTitleText$ | async }}" *ngIf="subTitleText$ | async">
                {{ subTitleText$ | async }}
            </span>
        </div>
    `,
                encapsulation: ViewEncapsulation.None,
                host: { class: 'adf-user-name-column adf-datatable-content-cell adf-expand-cell-5 adf-ellipsis-cell' },
                styles: [".adf-user-name-column{font-size:14px;font-weight:600}.adf-user-email-column{color:var(--theme-foreground-text-color);font-size:14px;letter-spacing:-.2px;line-height:1.43}"]
            },] }
];
UserNameColumnComponent.ctorParameters = () => [
    { type: NodePermissionService }
];
UserNameColumnComponent.propDecorators = {
    context: [{ type: Input }],
    node: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlci1uYW1lLWNvbHVtbi5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiL2hvbWUvdHJhdmlzL2J1aWxkL0FsZnJlc2NvL2FsZnJlc2NvLW5nMi1jb21wb25lbnRzL2xpYi9jb250ZW50LXNlcnZpY2VzL3NyYy8iLCJzb3VyY2VzIjpbImxpYi9wZXJtaXNzaW9uLW1hbmFnZXIvY29tcG9uZW50cy91c2VyLW5hbWUtY29sdW1uL3VzZXItbmFtZS1jb2x1bW4uY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7R0FlRztBQUVILE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFVLGlCQUFpQixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzVFLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDdkMsT0FBTyxFQUFTLFNBQVMsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQ3BELE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLHdDQUF3QyxDQUFDO0FBa0IvRSxNQUFNLE9BQU8sdUJBQXVCO0lBVWhDLFlBQW9CLHFCQUE0QztRQUE1QywwQkFBcUIsR0FBckIscUJBQXFCLENBQXVCO1FBSGhFLGlCQUFZLEdBQUcsSUFBSSxlQUFlLENBQVMsRUFBRSxDQUFDLENBQUM7UUFDL0Msa0JBQWEsR0FBRyxJQUFJLGVBQWUsQ0FBUyxFQUFFLENBQUMsQ0FBQztJQUVtQixDQUFDO0lBRXBFLFFBQVE7O1FBQ0osSUFBSSxJQUFJLENBQUMsT0FBTyxJQUFJLElBQUksRUFBRTtZQUN0QixNQUFNLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxXQUFXLEVBQUUsZUFBRyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLDBDQUFFLEtBQUssbUNBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDO1lBQzNGLE1BQU0sZUFBZSxHQUFHLFdBQVcsQ0FBQyxDQUFDLENBQUMsRUFBRSxXQUFXLEVBQUUsV0FBVyxFQUFZLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztZQUNwRixJQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQzFCLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxJQUFJLGVBQWUsQ0FBQyxDQUFDO1NBQzlDO1FBRUQsSUFBSSxJQUFJLENBQUMsSUFBSSxFQUFFO1lBQ1gsTUFBTSxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsR0FBRyxJQUFJLENBQUMscUJBQXFCLENBQUMseUJBQXlCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUNoRyxJQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQzFCLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDM0I7SUFDTCxDQUFDO0lBRU8sWUFBWSxDQUFDLE1BQW9COztRQUNyQyxJQUFJLE1BQU0sRUFBRTtZQUNSLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLEdBQUcsTUFBQSxNQUFNLENBQUMsU0FBUyxtQ0FBSSxFQUFFLElBQUksTUFBQSxNQUFNLENBQUMsUUFBUSxtQ0FBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1lBQzdFLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxPQUFDLE1BQU0sQ0FBQyxLQUFLLG1DQUFJLEVBQUUsQ0FBQyxDQUFDO1NBQy9DO0lBQ04sQ0FBQztJQUVRLFdBQVcsQ0FBQyxLQUFZO1FBQzVCLElBQUksS0FBSyxFQUFFO1lBQ1AsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1NBQzdDO0lBQ0wsQ0FBQzs7O1lBckRKLFNBQVMsU0FBQztnQkFDUCxRQUFRLEVBQUUsc0JBQXNCO2dCQUNoQyxRQUFRLEVBQUU7Ozs7Ozs7O0tBUVQ7Z0JBRUQsYUFBYSxFQUFFLGlCQUFpQixDQUFDLElBQUk7Z0JBQ3JDLElBQUksRUFBRSxFQUFFLEtBQUssRUFBRSxxRkFBcUYsRUFBRTs7YUFDekc7OztZQWpCUSxxQkFBcUI7OztzQkFtQnpCLEtBQUs7bUJBR0wsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQsIE9uSW5pdCwgVmlld0VuY2Fwc3VsYXRpb24gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEJlaGF2aW9yU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgR3JvdXAsIE5vZGVFbnRyeSB9IGZyb20gJ0BhbGZyZXNjby9qcy1hcGknO1xuaW1wb3J0IHsgTm9kZVBlcm1pc3Npb25TZXJ2aWNlIH0gZnJvbSAnLi4vLi4vc2VydmljZXMvbm9kZS1wZXJtaXNzaW9uLnNlcnZpY2UnO1xuaW1wb3J0IHsgRWNtVXNlck1vZGVsIH0gZnJvbSAnQGFsZnJlc2NvL2FkZi1jb3JlJztcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICdhZGYtdXNlci1uYW1lLWNvbHVtbicsXG4gICAgdGVtcGxhdGU6IGBcbiAgICAgICAgPGRpdiBjbGFzcz1cImFkZi1lbGxpcHNpcy1jZWxsXCIgW2F0dHIuZGF0YS1hdXRvbWF0aW9uLWlkXT1cImRpc3BsYXlUZXh0JCB8IGFzeW5jXCI+XG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cImFkZi11c2VyLW5hbWUtY29sdW1uXCIgdGl0bGU9XCJ7eyBkaXNwbGF5VGV4dCQgfCBhc3luYyB9fVwiPiB7eyBkaXNwbGF5VGV4dCQgfCBhc3luYyB9fTwvc3Bhbj5cbiAgICAgICAgICAgIDxici8+XG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cImFkZi11c2VyLWVtYWlsLWNvbHVtblwiIHRpdGxlPVwie3sgc3ViVGl0bGVUZXh0JCB8IGFzeW5jIH19XCIgKm5nSWY9XCJzdWJUaXRsZVRleHQkIHwgYXN5bmNcIj5cbiAgICAgICAgICAgICAgICB7eyBzdWJUaXRsZVRleHQkIHwgYXN5bmMgfX1cbiAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgPC9kaXY+XG4gICAgYCxcbiAgICBzdHlsZVVybHM6IFsnLi91c2VyLW5hbWUtY29sdW1uLmNvbXBvbmVudC5zY3NzJ10sXG4gICAgZW5jYXBzdWxhdGlvbjogVmlld0VuY2Fwc3VsYXRpb24uTm9uZSxcbiAgICBob3N0OiB7IGNsYXNzOiAnYWRmLXVzZXItbmFtZS1jb2x1bW4gYWRmLWRhdGF0YWJsZS1jb250ZW50LWNlbGwgYWRmLWV4cGFuZC1jZWxsLTUgYWRmLWVsbGlwc2lzLWNlbGwnIH1cbn0pXG5leHBvcnQgY2xhc3MgVXNlck5hbWVDb2x1bW5Db21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuICAgIEBJbnB1dCgpXG4gICAgY29udGV4dDogYW55O1xuXG4gICAgQElucHV0KClcbiAgICBub2RlOiBOb2RlRW50cnk7XG5cbiAgICBkaXNwbGF5VGV4dCQgPSBuZXcgQmVoYXZpb3JTdWJqZWN0PHN0cmluZz4oJycpO1xuICAgIHN1YlRpdGxlVGV4dCQgPSBuZXcgQmVoYXZpb3JTdWJqZWN0PHN0cmluZz4oJycpO1xuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBub2RlUGVybWlzc2lvblNlcnZpY2U6IE5vZGVQZXJtaXNzaW9uU2VydmljZSkge31cblxuICAgIG5nT25Jbml0KCkge1xuICAgICAgICBpZiAodGhpcy5jb250ZXh0ICE9IG51bGwpIHtcbiAgICAgICAgICAgIGNvbnN0IHsgcGVyc29uLCBncm91cCwgYXV0aG9yaXR5SWQgfSA9IHRoaXMuY29udGV4dC5yb3cub2JqPy5lbnRyeSA/PyB0aGlzLmNvbnRleHQucm93Lm9iajtcbiAgICAgICAgICAgIGNvbnN0IHBlcm1pc3Npb25Hcm91cCA9IGF1dGhvcml0eUlkID8geyBkaXNwbGF5TmFtZTogYXV0aG9yaXR5SWQgfSBhcyAgR3JvdXAgOiBudWxsO1xuICAgICAgICAgICAgdGhpcy51cGRhdGVQZXJzb24ocGVyc29uKTtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlR3JvdXAoZ3JvdXAgfHwgcGVybWlzc2lvbkdyb3VwKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLm5vZGUpIHtcbiAgICAgICAgICAgIGNvbnN0IHsgcGVyc29uLCBncm91cCB9ID0gdGhpcy5ub2RlUGVybWlzc2lvblNlcnZpY2UudHJhbnNmb3JtTm9kZVRvVXNlclBlcnNvbih0aGlzLm5vZGUuZW50cnkpO1xuICAgICAgICAgICAgdGhpcy51cGRhdGVQZXJzb24ocGVyc29uKTtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlR3JvdXAoZ3JvdXApO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSB1cGRhdGVQZXJzb24ocGVyc29uOiBFY21Vc2VyTW9kZWwpIHtcbiAgICAgICAgaWYgKHBlcnNvbikge1xuICAgICAgICAgICAgdGhpcy5kaXNwbGF5VGV4dCQubmV4dChgJHtwZXJzb24uZmlyc3ROYW1lID8/ICcnfSAke3BlcnNvbi5sYXN0TmFtZSA/PyAnJ31gKTtcbiAgICAgICAgICAgIHRoaXMuc3ViVGl0bGVUZXh0JC5uZXh0KHBlcnNvbi5lbWFpbCA/PyAnJyk7XG4gICAgICAgIH1cbiAgIH1cblxuICAgIHByaXZhdGUgdXBkYXRlR3JvdXAoZ3JvdXA6IEdyb3VwKSB7XG4gICAgICAgIGlmIChncm91cCkge1xuICAgICAgICAgICAgdGhpcy5kaXNwbGF5VGV4dCQubmV4dChncm91cC5kaXNwbGF5TmFtZSk7XG4gICAgICAgIH1cbiAgICB9XG59XG4iXX0=