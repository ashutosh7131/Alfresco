/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, EventEmitter, Input, Output } from '@angular/core';
export class UserRoleColumnComponent {
    constructor() {
        this.readonly = false;
        this.placeholder = 'PERMISSION_MANAGER.LABELS.SELECT-ROLE';
        this.roleChanged = new EventEmitter();
    }
    onRoleChanged(newRole) {
        this.value = newRole;
        this.roleChanged.emit(newRole);
    }
}
UserRoleColumnComponent.decorators = [
    { type: Component, args: [{
                selector: 'adf-user-role-column',
                template: `
      <mat-form-field floatLabel="never" class="adf-role-selector-field" *ngIf="!readonly">
          <mat-select
              (click)="$event.stopPropagation()"
              [placeholder]="placeholder | translate"
              [value]="value"
              (selectionChange)="onRoleChanged($event.value)">
              <mat-option *ngFor="let role of roles" [value]="role.role">
                  {{ role.label | adfLocalizedRole }}
              </mat-option>
          </mat-select>
      </mat-form-field>

      <span class="adf-datatable-cell-value adf-readonly-role" [title]="value | adfLocalizedRole" *ngIf="readonly">
          {{value | adfLocalizedRole}}
      </span>
  `,
                host: { class: 'adf-user-role-column adf-datatable-content-cell adf-expand-cell-4' },
                styles: [`.adf-role-selector-field {
            width: 100%;
            .mat-form-field {
                width: 100%;
                max-width: 200px;
            }
        }
        .adf-readonly-role {
            padding-left: 0 !important;
        }
        `]
            },] }
];
UserRoleColumnComponent.propDecorators = {
    roles: [{ type: Input }],
    value: [{ type: Input }],
    readonly: [{ type: Input }],
    placeholder: [{ type: Input }],
    roleChanged: [{ type: Output }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlci1yb2xlLWNvbHVtbi5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiL2hvbWUvdHJhdmlzL2J1aWxkL0FsZnJlc2NvL2FsZnJlc2NvLW5nMi1jb21wb25lbnRzL2xpYi9jb250ZW50LXNlcnZpY2VzL3NyYy8iLCJzb3VyY2VzIjpbImxpYi9wZXJtaXNzaW9uLW1hbmFnZXIvY29tcG9uZW50cy91c2VyLXJvbGUtY29sdW1uL3VzZXItcm9sZS1jb2x1bW4uY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7R0FlRztBQUVILE9BQU8sRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFxQ3ZFLE1BQU0sT0FBTyx1QkFBdUI7SUFsQ3BDO1FBMkNJLGFBQVEsR0FBRyxLQUFLLENBQUM7UUFHakIsZ0JBQVcsR0FBVyx1Q0FBdUMsQ0FBQztRQUc5RCxnQkFBVyxHQUF5QixJQUFJLFlBQVksRUFBVSxDQUFDO0lBTW5FLENBQUM7SUFKRyxhQUFhLENBQUMsT0FBZTtRQUN6QixJQUFJLENBQUMsS0FBSyxHQUFHLE9BQU8sQ0FBQztRQUNyQixJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUNuQyxDQUFDOzs7WUF0REosU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxzQkFBc0I7Z0JBQ2hDLFFBQVEsRUFBRTs7Ozs7Ozs7Ozs7Ozs7OztHQWdCVDtnQkFDQyxJQUFJLEVBQUUsRUFBRSxLQUFLLEVBQUUsbUVBQW1FLEVBQUU7eUJBRWhGOzs7Ozs7Ozs7O1NBVUM7YUFFUjs7O29CQUdJLEtBQUs7b0JBR0wsS0FBSzt1QkFHTCxLQUFLOzBCQUdMLEtBQUs7MEJBR0wsTUFBTSIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IENvbXBvbmVudCwgRXZlbnRFbWl0dGVyLCBJbnB1dCwgT3V0cHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBSb2xlTW9kZWwgfSBmcm9tICcuLi8uLi9tb2RlbHMvcm9sZS5tb2RlbCc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2FkZi11c2VyLXJvbGUtY29sdW1uJyxcbiAgdGVtcGxhdGU6IGBcbiAgICAgIDxtYXQtZm9ybS1maWVsZCBmbG9hdExhYmVsPVwibmV2ZXJcIiBjbGFzcz1cImFkZi1yb2xlLXNlbGVjdG9yLWZpZWxkXCIgKm5nSWY9XCIhcmVhZG9ubHlcIj5cbiAgICAgICAgICA8bWF0LXNlbGVjdFxuICAgICAgICAgICAgICAoY2xpY2spPVwiJGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpXCJcbiAgICAgICAgICAgICAgW3BsYWNlaG9sZGVyXT1cInBsYWNlaG9sZGVyIHwgdHJhbnNsYXRlXCJcbiAgICAgICAgICAgICAgW3ZhbHVlXT1cInZhbHVlXCJcbiAgICAgICAgICAgICAgKHNlbGVjdGlvbkNoYW5nZSk9XCJvblJvbGVDaGFuZ2VkKCRldmVudC52YWx1ZSlcIj5cbiAgICAgICAgICAgICAgPG1hdC1vcHRpb24gKm5nRm9yPVwibGV0IHJvbGUgb2Ygcm9sZXNcIiBbdmFsdWVdPVwicm9sZS5yb2xlXCI+XG4gICAgICAgICAgICAgICAgICB7eyByb2xlLmxhYmVsIHwgYWRmTG9jYWxpemVkUm9sZSB9fVxuICAgICAgICAgICAgICA8L21hdC1vcHRpb24+XG4gICAgICAgICAgPC9tYXQtc2VsZWN0PlxuICAgICAgPC9tYXQtZm9ybS1maWVsZD5cblxuICAgICAgPHNwYW4gY2xhc3M9XCJhZGYtZGF0YXRhYmxlLWNlbGwtdmFsdWUgYWRmLXJlYWRvbmx5LXJvbGVcIiBbdGl0bGVdPVwidmFsdWUgfCBhZGZMb2NhbGl6ZWRSb2xlXCIgKm5nSWY9XCJyZWFkb25seVwiPlxuICAgICAgICAgIHt7dmFsdWUgfCBhZGZMb2NhbGl6ZWRSb2xlfX1cbiAgICAgIDwvc3Bhbj5cbiAgYCxcbiAgICBob3N0OiB7IGNsYXNzOiAnYWRmLXVzZXItcm9sZS1jb2x1bW4gYWRmLWRhdGF0YWJsZS1jb250ZW50LWNlbGwgYWRmLWV4cGFuZC1jZWxsLTQnIH0sXG4gICAgc3R5bGVzOiBbXG4gICAgICAgIGAuYWRmLXJvbGUtc2VsZWN0b3ItZmllbGQge1xuICAgICAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgICAgICAubWF0LWZvcm0tZmllbGQge1xuICAgICAgICAgICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgICAgICAgICAgIG1heC13aWR0aDogMjAwcHg7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLmFkZi1yZWFkb25seS1yb2xlIHtcbiAgICAgICAgICAgIHBhZGRpbmctbGVmdDogMCAhaW1wb3J0YW50O1xuICAgICAgICB9XG4gICAgICAgIGBcbiAgICBdXG59KVxuZXhwb3J0IGNsYXNzIFVzZXJSb2xlQ29sdW1uQ29tcG9uZW50IHtcblxuICAgIEBJbnB1dCgpXG4gICAgcm9sZXM6IFJvbGVNb2RlbFtdO1xuXG4gICAgQElucHV0KClcbiAgICB2YWx1ZTogc3RyaW5nO1xuXG4gICAgQElucHV0KClcbiAgICByZWFkb25seSA9IGZhbHNlO1xuXG4gICAgQElucHV0KClcbiAgICBwbGFjZWhvbGRlcjogc3RyaW5nID0gJ1BFUk1JU1NJT05fTUFOQUdFUi5MQUJFTFMuU0VMRUNULVJPTEUnO1xuXG4gICAgQE91dHB1dCgpXG4gICAgcm9sZUNoYW5nZWQ6IEV2ZW50RW1pdHRlcjxzdHJpbmc+ID0gbmV3IEV2ZW50RW1pdHRlcjxzdHJpbmc+KCk7XG5cbiAgICBvblJvbGVDaGFuZ2VkKG5ld1JvbGU6IHN0cmluZykge1xuICAgICAgICB0aGlzLnZhbHVlID0gbmV3Um9sZTtcbiAgICAgICAgdGhpcy5yb2xlQ2hhbmdlZC5lbWl0KG5ld1JvbGUpO1xuICAgIH1cbn1cbiJdfQ==