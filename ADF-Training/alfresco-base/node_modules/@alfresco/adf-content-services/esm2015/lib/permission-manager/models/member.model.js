/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Group } from '@alfresco/js-api';
import { EcmUserModel } from '@alfresco/adf-core';
export class MemberModel {
    constructor(input) {
        this.readonly = false;
        if (input) {
            Object.assign(this, input);
        }
    }
    static parseFromSearchResult({ entry }) {
        const result = new MemberModel();
        if (entry.nodeType === 'cm:person') {
            const person = new EcmUserModel({
                firstName: entry.properties['cm:firstName'],
                lastName: entry.properties['cm:lastName'],
                email: entry.properties['cm:email'],
                id: entry.properties['cm:userName']
            });
            result.id = person.id;
            result.entry = { person };
            result.accessStatus = 'ALLOWED';
            return result;
        }
        if (entry.nodeType === 'cm:authorityContainer') {
            const group = new Group({
                id: entry.properties['cm:authorityName'],
                displayName: entry.properties['cm:authorityDisplayName'] || entry.properties['cm:authorityName']
            });
            result.id = group.id;
            result.entry = { group };
            result.accessStatus = 'ALLOWED';
            return result;
        }
        return null;
    }
    toPermissionElement() {
        return {
            authorityId: this.id,
            name: this.role,
            accessStatus: this.accessStatus
        };
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVtYmVyLm1vZGVsLmpzIiwic291cmNlUm9vdCI6Ii9ob21lL3RyYXZpcy9idWlsZC9BbGZyZXNjby9hbGZyZXNjby1uZzItY29tcG9uZW50cy9saWIvY29udGVudC1zZXJ2aWNlcy9zcmMvIiwic291cmNlcyI6WyJsaWIvcGVybWlzc2lvbi1tYW5hZ2VyL21vZGVscy9tZW1iZXIubW9kZWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7OztHQWVHO0FBRUgsT0FBTyxFQUFFLEtBQUssRUFBc0MsTUFBTSxrQkFBa0IsQ0FBQztBQUc3RSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFTbEQsTUFBTSxPQUFPLFdBQVc7SUFVcEIsWUFBWSxLQUFNO1FBRmxCLGFBQVEsR0FBWSxLQUFLLENBQUM7UUFHdEIsSUFBSSxLQUFLLEVBQUU7WUFDUCxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQztTQUM5QjtJQUNMLENBQUM7SUFFRCxNQUFNLENBQUMscUJBQXFCLENBQUMsRUFBRSxLQUFLLEVBQWE7UUFDN0MsTUFBTSxNQUFNLEdBQUcsSUFBSSxXQUFXLEVBQUUsQ0FBQztRQUVqQyxJQUFJLEtBQUssQ0FBQyxRQUFRLEtBQUssV0FBVyxFQUFFO1lBQ2hDLE1BQU0sTUFBTSxHQUFHLElBQUksWUFBWSxDQUFDO2dCQUM1QixTQUFTLEVBQUUsS0FBSyxDQUFDLFVBQVUsQ0FBQyxjQUFjLENBQUM7Z0JBQzNDLFFBQVEsRUFBRSxLQUFLLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQztnQkFDekMsS0FBSyxFQUFFLEtBQUssQ0FBQyxVQUFVLENBQUMsVUFBVSxDQUFDO2dCQUNuQyxFQUFFLEVBQUUsS0FBSyxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUM7YUFDdEMsQ0FBQyxDQUFDO1lBRUgsTUFBTSxDQUFDLEVBQUUsR0FBRyxNQUFNLENBQUMsRUFBRSxDQUFDO1lBQ3RCLE1BQU0sQ0FBQyxLQUFLLEdBQUcsRUFBRSxNQUFNLEVBQUUsQ0FBQztZQUMxQixNQUFNLENBQUMsWUFBWSxHQUFHLFNBQVMsQ0FBQztZQUVoQyxPQUFPLE1BQU0sQ0FBQztTQUNqQjtRQUVELElBQUksS0FBSyxDQUFDLFFBQVEsS0FBSyx1QkFBdUIsRUFBRTtZQUM1QyxNQUFNLEtBQUssR0FBRyxJQUFJLEtBQUssQ0FBQztnQkFDcEIsRUFBRSxFQUFFLEtBQUssQ0FBQyxVQUFVLENBQUMsa0JBQWtCLENBQUM7Z0JBQ3hDLFdBQVcsRUFBRSxLQUFLLENBQUMsVUFBVSxDQUFDLHlCQUF5QixDQUFDLElBQUksS0FBSyxDQUFDLFVBQVUsQ0FBQyxrQkFBa0IsQ0FBQzthQUNuRyxDQUFDLENBQUM7WUFFSCxNQUFNLENBQUMsRUFBRSxHQUFHLEtBQUssQ0FBQyxFQUFFLENBQUM7WUFDckIsTUFBTSxDQUFDLEtBQUssR0FBRyxFQUFFLEtBQUssRUFBRSxDQUFDO1lBQ3pCLE1BQU0sQ0FBQyxZQUFZLEdBQUcsU0FBUyxDQUFDO1lBRWhDLE9BQU8sTUFBTSxDQUFDO1NBQ2pCO1FBQ0QsT0FBTyxJQUFJLENBQUM7SUFDaEIsQ0FBQztJQUVELG1CQUFtQjtRQUNmLE9BQU87WUFDSCxXQUFXLEVBQUUsSUFBSSxDQUFDLEVBQUU7WUFDcEIsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJO1lBQ2YsWUFBWSxFQUFFLElBQUksQ0FBQyxZQUFZO1NBQ2xDLENBQUM7SUFDTixDQUFDO0NBQ0oiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBHcm91cCwgTm9kZSwgTm9kZUVudHJ5LCBQZXJtaXNzaW9uRWxlbWVudCB9IGZyb20gJ0BhbGZyZXNjby9qcy1hcGknO1xuaW1wb3J0IHsgUGVybWlzc2lvbkRpc3BsYXlNb2RlbCB9IGZyb20gJy4vcGVybWlzc2lvbi5tb2RlbCc7XG5pbXBvcnQgeyBSb2xlTW9kZWwgfSBmcm9tICcuL3JvbGUubW9kZWwnO1xuaW1wb3J0IHsgRWNtVXNlck1vZGVsIH0gZnJvbSAnQGFsZnJlc2NvL2FkZi1jb3JlJztcblxuZXhwb3J0IGludGVyZmFjZSBOb2RlUGVybWlzc2lvbnNNb2RlbCB7XG4gICAgbm9kZTogTm9kZTtcbiAgICByb2xlczogUm9sZU1vZGVsW107XG4gICAgaW5oZXJpdGVkUGVybWlzc2lvbnM6IFBlcm1pc3Npb25EaXNwbGF5TW9kZWxbXTtcbiAgICBsb2NhbFBlcm1pc3Npb25zOiBQZXJtaXNzaW9uRGlzcGxheU1vZGVsW107XG59XG5cbmV4cG9ydCBjbGFzcyBNZW1iZXJNb2RlbCB7XG4gICAgaWQ6IHN0cmluZztcbiAgICByb2xlOiBzdHJpbmc7XG4gICAgYWNjZXNzU3RhdHVzOiBQZXJtaXNzaW9uRWxlbWVudC5BY2Nlc3NTdGF0dXNFbnVtIHwgc3RyaW5nO1xuICAgIGVudHJ5OiB7XG4gICAgICAgIHBlcnNvbj86IEVjbVVzZXJNb2RlbDtcbiAgICAgICAgZ3JvdXA/OiBHcm91cDtcbiAgICB9O1xuICAgIHJlYWRvbmx5OiBib29sZWFuID0gZmFsc2U7XG5cbiAgICBjb25zdHJ1Y3RvcihpbnB1dD8pIHtcbiAgICAgICAgaWYgKGlucHV0KSB7XG4gICAgICAgICAgICBPYmplY3QuYXNzaWduKHRoaXMsIGlucHV0KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHN0YXRpYyBwYXJzZUZyb21TZWFyY2hSZXN1bHQoeyBlbnRyeSB9OiBOb2RlRW50cnkpOiBNZW1iZXJNb2RlbCB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IG5ldyBNZW1iZXJNb2RlbCgpO1xuXG4gICAgICAgIGlmIChlbnRyeS5ub2RlVHlwZSA9PT0gJ2NtOnBlcnNvbicpIHtcbiAgICAgICAgICAgIGNvbnN0IHBlcnNvbiA9IG5ldyBFY21Vc2VyTW9kZWwoe1xuICAgICAgICAgICAgICAgIGZpcnN0TmFtZTogZW50cnkucHJvcGVydGllc1snY206Zmlyc3ROYW1lJ10sXG4gICAgICAgICAgICAgICAgbGFzdE5hbWU6IGVudHJ5LnByb3BlcnRpZXNbJ2NtOmxhc3ROYW1lJ10sXG4gICAgICAgICAgICAgICAgZW1haWw6IGVudHJ5LnByb3BlcnRpZXNbJ2NtOmVtYWlsJ10sXG4gICAgICAgICAgICAgICAgaWQ6IGVudHJ5LnByb3BlcnRpZXNbJ2NtOnVzZXJOYW1lJ11cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICByZXN1bHQuaWQgPSBwZXJzb24uaWQ7XG4gICAgICAgICAgICByZXN1bHQuZW50cnkgPSB7IHBlcnNvbiB9O1xuICAgICAgICAgICAgcmVzdWx0LmFjY2Vzc1N0YXR1cyA9ICdBTExPV0VEJztcblxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChlbnRyeS5ub2RlVHlwZSA9PT0gJ2NtOmF1dGhvcml0eUNvbnRhaW5lcicpIHtcbiAgICAgICAgICAgIGNvbnN0IGdyb3VwID0gbmV3IEdyb3VwKHtcbiAgICAgICAgICAgICAgICBpZDogZW50cnkucHJvcGVydGllc1snY206YXV0aG9yaXR5TmFtZSddLFxuICAgICAgICAgICAgICAgIGRpc3BsYXlOYW1lOiBlbnRyeS5wcm9wZXJ0aWVzWydjbTphdXRob3JpdHlEaXNwbGF5TmFtZSddIHx8IGVudHJ5LnByb3BlcnRpZXNbJ2NtOmF1dGhvcml0eU5hbWUnXVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHJlc3VsdC5pZCA9IGdyb3VwLmlkO1xuICAgICAgICAgICAgcmVzdWx0LmVudHJ5ID0geyBncm91cCB9O1xuICAgICAgICAgICAgcmVzdWx0LmFjY2Vzc1N0YXR1cyA9ICdBTExPV0VEJztcblxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICB0b1Blcm1pc3Npb25FbGVtZW50KCk6IFBlcm1pc3Npb25FbGVtZW50IHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGF1dGhvcml0eUlkOiB0aGlzLmlkLFxuICAgICAgICAgICAgbmFtZTogdGhpcy5yb2xlLFxuICAgICAgICAgICAgYWNjZXNzU3RhdHVzOiB0aGlzLmFjY2Vzc1N0YXR1c1xuICAgICAgICB9O1xuICAgIH1cbn1cbiJdfQ==