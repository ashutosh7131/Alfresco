import { AlfrescoApiService, LogService } from '@alfresco/adf-core';
import { EventEmitter, Injectable, Output } from '@angular/core';
import { from, throwError } from 'rxjs';
import { catchError } from 'rxjs/operators';
import { TagBody, TagsApi } from '@alfresco/js-api';
import * as i0 from "@angular/core";
import * as i1 from "@alfresco/adf-core";
export class TagService {
    constructor(apiService, logService) {
        this.apiService = apiService;
        this.logService = logService;
        this.refresh = new EventEmitter();
    }
    get tagsApi() {
        var _a;
        this._tagsApi = (_a = this._tagsApi) !== null && _a !== void 0 ? _a : new TagsApi(this.apiService.getInstance());
        return this._tagsApi;
    }
    getTagsByNodeId(nodeId) {
        return from(this.tagsApi.listTagsForNode(nodeId)).pipe(catchError((err) => this.handleError(err)));
    }
    getAllTheTags(opts) {
        return from(this.tagsApi.listTags(opts))
            .pipe(catchError((err) => this.handleError(err)));
    }
    addTag(nodeId, tagName) {
        const tagBody = new TagBody();
        tagBody.tag = tagName;
        const observableAdd = from(this.tagsApi.createTagForNode(nodeId, [tagBody]));
        observableAdd.subscribe((tagEntry) => {
            this.refresh.emit(tagEntry);
        }, (err) => {
            this.handleError(err);
        });
        return observableAdd;
    }
    removeTag(nodeId, tag) {
        const observableRemove = from(this.tagsApi.deleteTagFromNode(nodeId, tag));
        observableRemove.subscribe((data) => {
            this.refresh.emit(data);
        }, (err) => {
            this.handleError(err);
        });
        return observableRemove;
    }
    handleError(error) {
        this.logService.error(error);
        return throwError(error || 'Server error');
    }
}
TagService.ɵprov = i0.ɵɵdefineInjectable({ factory: function TagService_Factory() { return new TagService(i0.ɵɵinject(i1.AlfrescoApiService), i0.ɵɵinject(i1.LogService)); }, token: TagService, providedIn: "root" });
TagService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
TagService.ctorParameters = () => [
    { type: AlfrescoApiService },
    { type: LogService }
];
TagService.propDecorators = {
    refresh: [{ type: Output }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFnLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiL2hvbWUvdHJhdmlzL2J1aWxkL0FsZnJlc2NvL2FsZnJlc2NvLW5nMi1jb21wb25lbnRzL2xpYi9jb250ZW50LXNlcnZpY2VzL3NyYy8iLCJzb3VyY2VzIjpbImxpYi90YWcvc2VydmljZXMvdGFnLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBaUJBLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxVQUFVLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUNwRSxPQUFPLEVBQUUsWUFBWSxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDakUsT0FBTyxFQUFjLElBQUksRUFBRSxVQUFVLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDcEQsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzVDLE9BQU8sRUFBRSxPQUFPLEVBQXVCLE9BQU8sRUFBRSxNQUFNLGtCQUFrQixDQUFDOzs7QUFNekUsTUFBTSxPQUFPLFVBQVU7SUFZbkIsWUFBb0IsVUFBOEIsRUFDOUIsVUFBc0I7UUFEdEIsZUFBVSxHQUFWLFVBQVUsQ0FBb0I7UUFDOUIsZUFBVSxHQUFWLFVBQVUsQ0FBWTtRQUgxQyxZQUFPLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztJQUk3QixDQUFDO0lBWEQsSUFBSSxPQUFPOztRQUNQLElBQUksQ0FBQyxRQUFRLFNBQUcsSUFBSSxDQUFDLFFBQVEsbUNBQUksSUFBSSxPQUFPLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDO1FBQzVFLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQztJQUN6QixDQUFDO0lBZUQsZUFBZSxDQUFDLE1BQWM7UUFDMUIsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQ2xELFVBQVUsQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUM3QyxDQUFDO0lBQ04sQ0FBQztJQU9ELGFBQWEsQ0FBQyxJQUFVO1FBQ3BCLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDO2FBQ25DLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzFELENBQUM7SUFRRCxNQUFNLENBQUMsTUFBYyxFQUFFLE9BQWU7UUFDbEMsTUFBTSxPQUFPLEdBQUcsSUFBSSxPQUFPLEVBQUUsQ0FBQztRQUM5QixPQUFPLENBQUMsR0FBRyxHQUFHLE9BQU8sQ0FBQztRQUV0QixNQUFNLGFBQWEsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFFN0UsYUFBYSxDQUFDLFNBQVMsQ0FBQyxDQUFDLFFBQWtCLEVBQUUsRUFBRTtZQUMzQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUNoQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsRUFBRTtZQUNQLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDMUIsQ0FBQyxDQUFDLENBQUM7UUFFSCxPQUFPLGFBQWEsQ0FBQztJQUN6QixDQUFDO0lBUUQsU0FBUyxDQUFDLE1BQWMsRUFBRSxHQUFXO1FBQ2pDLE1BQU0sZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsaUJBQWlCLENBQUMsTUFBTSxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFFM0UsZ0JBQWdCLENBQUMsU0FBUyxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUU7WUFDaEMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDNUIsQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLEVBQUU7WUFDUCxJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzFCLENBQUMsQ0FBQyxDQUFDO1FBRUgsT0FBTyxnQkFBZ0IsQ0FBQztJQUM1QixDQUFDO0lBRU8sV0FBVyxDQUFDLEtBQVU7UUFDMUIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDN0IsT0FBTyxVQUFVLENBQUMsS0FBSyxJQUFJLGNBQWMsQ0FBQyxDQUFDO0lBQy9DLENBQUM7Ozs7WUFuRkosVUFBVSxTQUFDO2dCQUNSLFVBQVUsRUFBRSxNQUFNO2FBQ3JCOzs7WUFSUSxrQkFBa0I7WUFBRSxVQUFVOzs7c0JBbUJsQyxNQUFNIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgQWxmcmVzY29BcGlTZXJ2aWNlLCBMb2dTZXJ2aWNlIH0gZnJvbSAnQGFsZnJlc2NvL2FkZi1jb3JlJztcbmltcG9ydCB7IEV2ZW50RW1pdHRlciwgSW5qZWN0YWJsZSwgT3V0cHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBmcm9tLCB0aHJvd0Vycm9yIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBjYXRjaEVycm9yIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgVGFnQm9keSwgVGFnUGFnaW5nLCBUYWdFbnRyeSwgVGFnc0FwaSB9IGZyb20gJ0BhbGZyZXNjby9qcy1hcGknO1xuXG5ASW5qZWN0YWJsZSh7XG4gICAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOiBkaXJlY3RpdmUtY2xhc3Mtc3VmZml4XG5leHBvcnQgY2xhc3MgVGFnU2VydmljZSB7XG5cbiAgICBfdGFnc0FwaTogVGFnc0FwaTtcbiAgICBnZXQgdGFnc0FwaSgpOiBUYWdzQXBpIHtcbiAgICAgICAgdGhpcy5fdGFnc0FwaSA9IHRoaXMuX3RhZ3NBcGkgPz8gbmV3IFRhZ3NBcGkodGhpcy5hcGlTZXJ2aWNlLmdldEluc3RhbmNlKCkpO1xuICAgICAgICByZXR1cm4gdGhpcy5fdGFnc0FwaTtcbiAgICB9XG5cbiAgICAvKiogRW1pdHRlZCB3aGVuIHRhZyBpbmZvcm1hdGlvbiBpcyB1cGRhdGVkLiAqL1xuICAgIEBPdXRwdXQoKVxuICAgIHJlZnJlc2ggPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGFwaVNlcnZpY2U6IEFsZnJlc2NvQXBpU2VydmljZSxcbiAgICAgICAgICAgICAgICBwcml2YXRlIGxvZ1NlcnZpY2U6IExvZ1NlcnZpY2UpIHtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIGEgbGlzdCBvZiB0YWdzIGFkZGVkIHRvIGEgbm9kZS5cbiAgICAgKiBAcGFyYW0gbm9kZUlkIElEIG9mIHRoZSB0YXJnZXQgbm9kZVxuICAgICAqIEByZXR1cm5zIFRhZ1BhZ2luZyBvYmplY3QgKGRlZmluZWQgaW4gSlMtQVBJKSBjb250YWluaW5nIHRoZSB0YWdzXG4gICAgICovXG4gICAgZ2V0VGFnc0J5Tm9kZUlkKG5vZGVJZDogc3RyaW5nKTogT2JzZXJ2YWJsZTxUYWdQYWdpbmc+IHtcbiAgICAgICAgcmV0dXJuIGZyb20odGhpcy50YWdzQXBpLmxpc3RUYWdzRm9yTm9kZShub2RlSWQpKS5waXBlKFxuICAgICAgICAgICAgY2F0Y2hFcnJvcigoZXJyKSA9PiB0aGlzLmhhbmRsZUVycm9yKGVycikpXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyBhIGxpc3Qgb2YgYWxsIHRoZSB0YWdzIGFscmVhZHkgZGVmaW5lZCBpbiB0aGUgcmVwb3NpdG9yeS5cbiAgICAgKiBAcGFyYW0gb3B0cyBPcHRpb25zIHN1cHBvcnRlZCBieSBKUy1BUElcbiAgICAgKiBAcmV0dXJucyBUYWdQYWdpbmcgb2JqZWN0IChkZWZpbmVkIGluIEpTLUFQSSkgY29udGFpbmluZyB0aGUgdGFnc1xuICAgICAqL1xuICAgIGdldEFsbFRoZVRhZ3Mob3B0cz86IGFueSk6IE9ic2VydmFibGU8VGFnUGFnaW5nPiB7XG4gICAgICAgIHJldHVybiBmcm9tKHRoaXMudGFnc0FwaS5saXN0VGFncyhvcHRzKSlcbiAgICAgICAgICAgIC5waXBlKGNhdGNoRXJyb3IoKGVycikgPT4gdGhpcy5oYW5kbGVFcnJvcihlcnIpKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWRkcyBhIHRhZyB0byBhIG5vZGUuXG4gICAgICogQHBhcmFtIG5vZGVJZCBJRCBvZiB0aGUgdGFyZ2V0IG5vZGVcbiAgICAgKiBAcGFyYW0gdGFnTmFtZSBOYW1lIG9mIHRoZSB0YWcgdG8gYWRkXG4gICAgICogQHJldHVybnMgVGFnRW50cnkgb2JqZWN0IChkZWZpbmVkIGluIEpTLUFQSSkgd2l0aCBkZXRhaWxzIG9mIHRoZSBuZXcgdGFnXG4gICAgICovXG4gICAgYWRkVGFnKG5vZGVJZDogc3RyaW5nLCB0YWdOYW1lOiBzdHJpbmcpOiBPYnNlcnZhYmxlPFRhZ0VudHJ5PiB7XG4gICAgICAgIGNvbnN0IHRhZ0JvZHkgPSBuZXcgVGFnQm9keSgpO1xuICAgICAgICB0YWdCb2R5LnRhZyA9IHRhZ05hbWU7XG5cbiAgICAgICAgY29uc3Qgb2JzZXJ2YWJsZUFkZCA9IGZyb20odGhpcy50YWdzQXBpLmNyZWF0ZVRhZ0Zvck5vZGUobm9kZUlkLCBbdGFnQm9keV0pKTtcblxuICAgICAgICBvYnNlcnZhYmxlQWRkLnN1YnNjcmliZSgodGFnRW50cnk6IFRhZ0VudHJ5KSA9PiB7XG4gICAgICAgICAgICB0aGlzLnJlZnJlc2guZW1pdCh0YWdFbnRyeSk7XG4gICAgICAgIH0sIChlcnIpID0+IHtcbiAgICAgICAgICAgIHRoaXMuaGFuZGxlRXJyb3IoZXJyKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIG9ic2VydmFibGVBZGQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBhIHRhZyBmcm9tIGEgbm9kZS5cbiAgICAgKiBAcGFyYW0gbm9kZUlkIElEIG9mIHRoZSB0YXJnZXQgbm9kZVxuICAgICAqIEBwYXJhbSB0YWcgTmFtZSBvZiB0aGUgdGFnIHRvIHJlbW92ZVxuICAgICAqIEByZXR1cm5zIE51bGwgb2JqZWN0IHdoZW4gdGhlIG9wZXJhdGlvbiBjb21wbGV0ZXNcbiAgICAgKi9cbiAgICByZW1vdmVUYWcobm9kZUlkOiBzdHJpbmcsIHRhZzogc3RyaW5nKTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICAgICAgY29uc3Qgb2JzZXJ2YWJsZVJlbW92ZSA9IGZyb20odGhpcy50YWdzQXBpLmRlbGV0ZVRhZ0Zyb21Ob2RlKG5vZGVJZCwgdGFnKSk7XG5cbiAgICAgICAgb2JzZXJ2YWJsZVJlbW92ZS5zdWJzY3JpYmUoKGRhdGEpID0+IHtcbiAgICAgICAgICAgIHRoaXMucmVmcmVzaC5lbWl0KGRhdGEpO1xuICAgICAgICB9LCAoZXJyKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmhhbmRsZUVycm9yKGVycik7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBvYnNlcnZhYmxlUmVtb3ZlO1xuICAgIH1cblxuICAgIHByaXZhdGUgaGFuZGxlRXJyb3IoZXJyb3I6IGFueSkge1xuICAgICAgICB0aGlzLmxvZ1NlcnZpY2UuZXJyb3IoZXJyb3IpO1xuICAgICAgICByZXR1cm4gdGhyb3dFcnJvcihlcnJvciB8fCAnU2VydmVyIGVycm9yJyk7XG4gICAgfVxufVxuIl19