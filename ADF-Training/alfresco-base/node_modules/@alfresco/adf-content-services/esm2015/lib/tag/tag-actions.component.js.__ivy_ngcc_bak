/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { TranslationService } from '@alfresco/adf-core';
import { Component, EventEmitter, Input, Output, ViewEncapsulation } from '@angular/core';
import { TagService } from './services/tag.service';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
export class TagActionsComponent {
    constructor(tagService, translateService) {
        this.tagService = tagService;
        this.translateService = translateService;
        this.successAdd = new EventEmitter();
        this.error = new EventEmitter();
        this.result = new EventEmitter();
        this.disableAddTag = true;
        this.onDestroy$ = new Subject();
    }
    ngOnInit() {
        this.tagService.refresh
            .pipe(takeUntil(this.onDestroy$))
            .subscribe(() => this.refreshTag());
    }
    ngOnChanges() {
        return this.refreshTag();
    }
    ngOnDestroy() {
        this.onDestroy$.next(true);
        this.onDestroy$.complete();
    }
    refreshTag() {
        if (this.nodeId) {
            this.tagService.getTagsByNodeId(this.nodeId).subscribe((tagPaging) => {
                this.tagsEntries = tagPaging.list.entries;
                this.disableAddTag = false;
                this.result.emit(this.tagsEntries);
            }, () => {
                this.tagsEntries = null;
                this.disableAddTag = true;
                this.result.emit(this.tagsEntries);
            });
        }
    }
    addTag() {
        if (this.searchTag(this.newTagName)) {
            this.errorMsg = this.translateService.instant('TAG.MESSAGES.EXIST');
            this.error.emit(this.errorMsg);
        }
        else {
            this.tagService.addTag(this.nodeId, this.newTagName).subscribe(() => {
                this.newTagName = '';
                this.successAdd.emit(this.nodeId);
            });
        }
    }
    searchTag(searchTagName) {
        if (this.tagsEntries) {
            return this.tagsEntries.find((currentTag) => {
                return (searchTagName === currentTag.entry.tag);
            });
        }
    }
    cleanErrorMsg() {
        this.errorMsg = '';
    }
    removeTag(tag) {
        this.tagService.removeTag(this.nodeId, tag);
    }
}
TagActionsComponent.decorators = [
    { type: Component, args: [{
                selector: 'adf-tag-node-actions-list',
                template: "<mat-list>\n    <mat-list-item *ngFor=\"let currentEntry of tagsEntries; let idx = index\">\n        <div class=\"adf-tag-actions-container\" id=\"tag_delete_{{currentEntry.entry.tag}}\" (click)=\"removeTag(currentEntry.entry.id)\">\n            <div class=\"adf-tag-actions-delete-text\" id=\"tag_name_{{currentEntry.entry.tag}}\">{{currentEntry.entry.tag}}</div>\n            <mat-icon class=\"adf-tag-actions-delete-icon\">delete</mat-icon>\n        </div>\n    </mat-list-item>\n</mat-list>\n<table class=\"adf-full-width\" cellspacing=\"0\">\n    <tr>\n        <td>\n            <mat-form-field class=\"adf-full-width\">\n                <input\n                    id=\"new-tag-text\"\n                    matInput placeholder=\"{{'TAG.LABEL.NEWTAG' | translate }}\"\n                    type=\"text\"\n                    (keypress)=\"cleanErrorMsg()\"\n                    [(ngModel)]=\"newTagName\"\n                />\n                <mat-hint data-automation-id=\"errorMessage\" *ngIf=\"error\" [ngStyle]=\"{'color': 'red'}\" align=\"start\">{{errorMsg}}</mat-hint>\n            </mat-form-field>\n        </td>\n        <td>\n            <button\n                id=\"add-tag\"\n                class=\"adf-full-width\"\n                color=\"primary\"\n                (click)=\"addTag()\"\n                [disabled]=\"disableAddTag\"\n                mat-raised-button\n            >{{'TAG.BUTTON.ADD' | translate }}</button>\n        </td>\n    </tr>\n</table>\n",
                encapsulation: ViewEncapsulation.None,
                host: { class: 'adf-tag-node-actions-list' },
                styles: [".adf-tag-node-actions-list .adf-full-width{width:100%}.adf-tag-node-actions-list .adf-tag-actions-delete-icon{cursor:pointer;float:right}.adf-tag-node-actions-list .adf-tag-actions-delete-text{float:left;font-size:16px}.adf-tag-node-actions-list .adf-tag-actions-container{height:20px;padding:8px 0}"]
            },] }
];
TagActionsComponent.ctorParameters = () => [
    { type: TagService },
    { type: TranslationService }
];
TagActionsComponent.propDecorators = {
    nodeId: [{ type: Input }],
    successAdd: [{ type: Output }],
    error: [{ type: Output }],
    result: [{ type: Output }]
};
//# sourceMappingURL=data:application/json;base64,