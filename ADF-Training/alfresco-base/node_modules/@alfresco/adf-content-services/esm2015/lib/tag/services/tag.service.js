import { AlfrescoApiService, LogService } from '@alfresco/adf-core';
import { EventEmitter, Injectable, Output } from '@angular/core';
import { from, throwError } from 'rxjs';
import { catchError } from 'rxjs/operators';
import { TagBody, TagsApi } from '@alfresco/js-api';
import * as i0 from "@angular/core";
import * as i1 from "@alfresco/adf-core";
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@alfresco/adf-core';
export class TagService {
    constructor(apiService, logService) {
        this.apiService = apiService;
        this.logService = logService;
        this.refresh = new EventEmitter();
    }
    get tagsApi() {
        var _a;
        this._tagsApi = (_a = this._tagsApi) !== null && _a !== void 0 ? _a : new TagsApi(this.apiService.getInstance());
        return this._tagsApi;
    }
    getTagsByNodeId(nodeId) {
        return from(this.tagsApi.listTagsForNode(nodeId)).pipe(catchError((err) => this.handleError(err)));
    }
    getAllTheTags(opts) {
        return from(this.tagsApi.listTags(opts))
            .pipe(catchError((err) => this.handleError(err)));
    }
    addTag(nodeId, tagName) {
        const tagBody = new TagBody();
        tagBody.tag = tagName;
        const observableAdd = from(this.tagsApi.createTagForNode(nodeId, [tagBody]));
        observableAdd.subscribe((tagEntry) => {
            this.refresh.emit(tagEntry);
        }, (err) => {
            this.handleError(err);
        });
        return observableAdd;
    }
    removeTag(nodeId, tag) {
        const observableRemove = from(this.tagsApi.deleteTagFromNode(nodeId, tag));
        observableRemove.subscribe((data) => {
            this.refresh.emit(data);
        }, (err) => {
            this.handleError(err);
        });
        return observableRemove;
    }
    handleError(error) {
        this.logService.error(error);
        return throwError(error || 'Server error');
    }
}
TagService.ɵfac = function TagService_Factory(t) { return new (t || TagService)(ɵngcc0.ɵɵinject(ɵngcc1.AlfrescoApiService), ɵngcc0.ɵɵinject(ɵngcc1.LogService)); };
TagService.ɵprov = i0.ɵɵdefineInjectable({ factory: function TagService_Factory() { return new TagService(i0.ɵɵinject(i1.AlfrescoApiService), i0.ɵɵinject(i1.LogService)); }, token: TagService, providedIn: "root" });
TagService.ctorParameters = () => [
    { type: AlfrescoApiService },
    { type: LogService }
];
TagService.propDecorators = {
    refresh: [{ type: Output }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TagService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc1.AlfrescoApiService }, { type: ɵngcc1.LogService }]; }, { refresh: [{
            type: Output
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,