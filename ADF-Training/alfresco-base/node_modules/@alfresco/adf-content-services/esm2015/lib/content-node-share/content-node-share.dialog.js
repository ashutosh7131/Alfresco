/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, Inject, ViewEncapsulation, ViewChild } from '@angular/core';
import { MAT_DIALOG_DATA, MatDialogRef, MatDialog } from '@angular/material/dialog';
import { FormGroup, FormControl } from '@angular/forms';
import { Subject } from 'rxjs';
import { SharedLinksApiService, NodesApiService, ContentService, RenditionsService, AppConfigService } from '@alfresco/adf-core';
import { ConfirmDialogComponent } from '../dialogs/confirm.dialog';
import moment from 'moment-es6';
import { takeUntil, debounceTime } from 'rxjs/operators';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@alfresco/adf-core';
import * as ɵngcc2 from '@angular/material/dialog';
import * as ɵngcc3 from '@angular/material/slide-toggle';
import * as ɵngcc4 from '@angular/forms';
import * as ɵngcc5 from '@angular/material/form-field';
import * as ɵngcc6 from '@angular/material/input';
import * as ɵngcc7 from '@angular/material/icon';
import * as ɵngcc8 from '@mat-datetimepicker/core';
import * as ɵngcc9 from '@angular/material/button';
import * as ɵngcc10 from '@ngx-translate/core';

const _c0 = ["slideToggleExpirationDate"];
const _c1 = ["dateTimePickerInput"];
export class ShareDialogComponent {
    constructor(appConfigService, sharedLinksApiService, dialogRef, dialog, nodesApiService, contentService, renditionService, data) {
        this.appConfigService = appConfigService;
        this.sharedLinksApiService = sharedLinksApiService;
        this.dialogRef = dialogRef;
        this.dialog = dialog;
        this.nodesApiService = nodesApiService;
        this.contentService = contentService;
        this.renditionService = renditionService;
        this.data = data;
        this.minDate = moment().add(1, 'd');
        this.isFileShared = false;
        this.isDisabled = false;
        this.form = new FormGroup({
            sharedUrl: new FormControl(''),
            time: new FormControl({ value: '', disabled: true })
        });
        this.type = 'datetime';
        this.maxDebounceTime = 500;
        this.onDestroy$ = new Subject();
    }
    ngOnInit() {
        this.type = this.appConfigService.get('sharedLinkDateTimePickerType', 'datetime');
        if (this.data.node && this.data.node.entry) {
            this.fileName = this.data.node.entry.name;
            this.baseShareUrl = this.data.baseShareUrl;
            const properties = this.data.node.entry.properties;
            if (!properties || !properties['qshare:sharedId']) {
                this.createSharedLinks(this.data.node.entry.id);
            }
            else {
                this.sharedId = properties['qshare:sharedId'];
                this.isFileShared = true;
                this.updateForm();
            }
        }
        this.time.valueChanges
            .pipe(debounceTime(this.maxDebounceTime), takeUntil(this.onDestroy$))
            .subscribe(value => this.onTimeChanged(value));
    }
    onTimeChanged(date) {
        this.updateNode(date).subscribe(() => this.updateEntryExpiryDate(date));
    }
    get time() {
        return this.form.controls['time'];
    }
    ngOnDestroy() {
        this.onDestroy$.next(true);
        this.onDestroy$.complete();
    }
    onSlideShareChange(event) {
        if (event.checked) {
            this.createSharedLinks(this.data.node.entry.id);
        }
        else {
            this.openConfirmationDialog();
        }
    }
    get canUpdate() {
        const { entry } = this.data.node;
        if (entry && entry.allowableOperations) {
            return this.contentService.hasAllowableOperations(entry, 'update');
        }
        return true;
    }
    onToggleExpirationDate(slideToggle) {
        if (slideToggle.checked) {
            this.time.enable();
        }
        else {
            this.time.disable();
            this.time.setValue(null);
        }
    }
    onDatetimepickerClosed() {
        this.dateTimePickerInput.nativeElement.blur();
        if (!this.time.value) {
            this.slideToggleExpirationDate.checked = false;
        }
    }
    openConfirmationDialog() {
        this.isFileShared = false;
        this.dialog
            .open(ConfirmDialogComponent, {
            data: {
                title: 'SHARE.CONFIRMATION.DIALOG-TITLE',
                message: 'SHARE.CONFIRMATION.MESSAGE',
                yesLabel: 'SHARE.CONFIRMATION.REMOVE',
                noLabel: 'SHARE.CONFIRMATION.CANCEL'
            },
            minWidth: '250px',
            closeOnNavigation: true
        })
            .beforeClosed()
            .subscribe((deleteSharedLink) => {
            if (deleteSharedLink) {
                this.deleteSharedLink(this.sharedId);
            }
            else {
                this.isFileShared = true;
            }
        });
    }
    createSharedLinks(nodeId) {
        this.isDisabled = true;
        this.sharedLinksApiService.createSharedLinks(nodeId).subscribe((sharedLink) => {
            if (sharedLink.entry) {
                this.sharedId = sharedLink.entry.id;
                if (this.data.node.entry.properties) {
                    this.data.node.entry.properties['qshare:sharedId'] = this.sharedId;
                }
                else {
                    this.data.node.entry.properties = {
                        'qshare:sharedId': this.sharedId
                    };
                }
                this.isDisabled = false;
                this.isFileShared = true;
                this.renditionService
                    .generateRenditionForNode(this.data.node.entry.id)
                    .subscribe(() => { });
                this.updateForm();
            }
        }, () => {
            this.isDisabled = false;
            this.isFileShared = false;
        });
    }
    deleteSharedLink(sharedId) {
        this.isDisabled = true;
        this.sharedLinksApiService
            .deleteSharedLink(sharedId)
            .subscribe((response) => {
            if (response instanceof Error) {
                this.isDisabled = false;
                this.isFileShared = true;
                this.handleError(response);
            }
            else {
                if (this.data.node.entry.properties) {
                    this.data.node.entry.properties['qshare:sharedId'] = null;
                    this.data.node.entry.properties['qshare:expiryDate'] = null;
                }
                this.dialogRef.close(false);
            }
        });
    }
    handleError(error) {
        let message = 'SHARE.UNSHARE_ERROR';
        let statusCode = 0;
        try {
            statusCode = JSON.parse(error.message).error.statusCode;
        }
        catch (_a) { }
        if (statusCode === 403) {
            message = 'SHARE.UNSHARE_PERMISSION_ERROR';
        }
        this.sharedLinksApiService.error.next({
            statusCode,
            message
        });
    }
    updateForm() {
        const { entry } = this.data.node;
        let expiryDate = null;
        if (entry && entry.properties) {
            expiryDate = entry.properties['qshare:expiryDate'];
        }
        this.form.setValue({
            sharedUrl: `${this.baseShareUrl}${this.sharedId}`,
            time: expiryDate ? moment(expiryDate).local() : null
        });
        if (expiryDate) {
            this.time.enable();
        }
        else {
            this.time.disable();
        }
    }
    updateNode(date) {
        const expiryDate = date
            ? (this.type === 'date' ? date.endOf('day').utc().format() : date.utc().format())
            : null;
        return this.nodesApiService.updateNode(this.data.node.entry.id, {
            properties: {
                'qshare:expiryDate': expiryDate
            }
        });
    }
    updateEntryExpiryDate(date) {
        const { properties } = this.data.node.entry;
        if (properties) {
            properties['qshare:expiryDate'] = date
                ? date.local()
                : null;
        }
    }
}
ShareDialogComponent.ɵfac = function ShareDialogComponent_Factory(t) { return new (t || ShareDialogComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.AppConfigService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.SharedLinksApiService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.MatDialogRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.MatDialog), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NodesApiService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ContentService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.RenditionsService), ɵngcc0.ɵɵdirectiveInject(MAT_DIALOG_DATA)); };
ShareDialogComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ShareDialogComponent, selectors: [["adf-share-dialog"]], viewQuery: function ShareDialogComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵstaticViewQuery(_c0, true);
        ɵngcc0.ɵɵstaticViewQuery(_c1, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.slideToggleExpirationDate = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.dateTimePickerInput = _t.first);
    } }, hostAttrs: [1, "adf-share-dialog"], decls: 41, vars: 43, consts: [[1, "adf-share-link__dialog-content"], ["data-automation-id", "adf-share-dialog-title", 1, "adf-share-link__title"], [1, "adf-share-link__info"], [1, "adf-share-link--row"], [1, "adf-share-link__label"], ["color", "primary", "data-automation-id", "adf-share-toggle", 3, "aria-label", "checked", "disabled", "change"], [3, "formGroup"], ["floatLabel", "always", 1, "adf-full-width", "adf-float-label"], ["data-automation-id", "adf-share-link", "matInput", "", "cdkFocusInitial", "", "formControlName", "sharedUrl", "readonly", "readonly", 1, "adf-share-link__input", 3, "placeholder"], ["sharedLinkInput", ""], ["matSuffix", "", 1, "adf-input-action", 3, "clipboard-notification", "adf-clipboard", "target"], ["color", "primary", "data-automation-id", "adf-expire-toggle", 3, "disabled", "aria-label", "checked", "change"], ["slideToggleExpirationDate", ""], ["matSuffix", "", 3, "disabled", "for"], ["matDatetimepickerToggle", "matDatetimepickerToggle"], [3, "type", "timeInterval", "closed"], ["datetimePicker", ""], ["matInput", "", "formControlName", "time", 1, "adf-share-link__input", 3, "placeholder", "min", "matDatetimepicker"], ["dateTimePickerInput", ""], ["mat-dialog-actions", ""], ["data-automation-id", "adf-share-dialog-close", "mat-button", "", "color", "primary", "mat-dialog-close", ""]], template: function ShareDialogComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "div", 1);
        ɵngcc0.ɵɵtext(2);
        ɵngcc0.ɵɵpipe(3, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(4, "mat-dialog-content");
        ɵngcc0.ɵɵelementStart(5, "p", 2);
        ɵngcc0.ɵɵtext(6);
        ɵngcc0.ɵɵpipe(7, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(8, "div", 3);
        ɵngcc0.ɵɵelementStart(9, "div", 4);
        ɵngcc0.ɵɵtext(10);
        ɵngcc0.ɵɵpipe(11, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(12, "mat-slide-toggle", 5);
        ɵngcc0.ɵɵlistener("change", function ShareDialogComponent_Template_mat_slide_toggle_change_12_listener($event) { return ctx.onSlideShareChange($event); });
        ɵngcc0.ɵɵpipe(13, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(14, "form", 6);
        ɵngcc0.ɵɵelementStart(15, "mat-form-field", 7);
        ɵngcc0.ɵɵelement(16, "input", 8, 9);
        ɵngcc0.ɵɵpipe(18, "translate");
        ɵngcc0.ɵɵelementStart(19, "mat-icon", 10);
        ɵngcc0.ɵɵpipe(20, "translate");
        ɵngcc0.ɵɵtext(21, " link ");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(22, "div", 3);
        ɵngcc0.ɵɵelementStart(23, "div", 4);
        ɵngcc0.ɵɵtext(24);
        ɵngcc0.ɵɵpipe(25, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(26, "mat-slide-toggle", 11, 12);
        ɵngcc0.ɵɵlistener("change", function ShareDialogComponent_Template_mat_slide_toggle_change_26_listener($event) { return ctx.onToggleExpirationDate($event); });
        ɵngcc0.ɵɵpipe(28, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(29, "mat-form-field", 7);
        ɵngcc0.ɵɵelement(30, "mat-datetimepicker-toggle", 13, 14);
        ɵngcc0.ɵɵelementStart(32, "mat-datetimepicker", 15, 16);
        ɵngcc0.ɵɵlistener("closed", function ShareDialogComponent_Template_mat_datetimepicker_closed_32_listener() { return ctx.onDatetimepickerClosed(); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(34, "input", 17, 18);
        ɵngcc0.ɵɵpipe(36, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(37, "div", 19);
        ɵngcc0.ɵɵelementStart(38, "button", 20);
        ɵngcc0.ɵɵtext(39);
        ɵngcc0.ɵɵpipe(40, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        const _r0 = ɵngcc0.ɵɵreference(17);
        const _r3 = ɵngcc0.ɵɵreference(33);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵtextInterpolate2(" ", ɵngcc0.ɵɵpipeBind1(3, 23, "SHARE.DIALOG-TITLE"), " ", ctx.fileName, " ");
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(7, 25, "SHARE.DESCRIPTION"));
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(11, 27, "SHARE.TITLE"));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵpropertyInterpolate("aria-label", ɵngcc0.ɵɵpipeBind1(13, 29, "SHARE.TITLE"));
        ɵngcc0.ɵɵproperty("checked", ctx.isFileShared)("disabled", !ctx.canUpdate || ctx.isDisabled);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("formGroup", ctx.form);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵpropertyInterpolate("placeholder", ɵngcc0.ɵɵpipeBind1(18, 31, "SHARE.PUBLIC-LINK"));
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("clipboard-notification", ɵngcc0.ɵɵpipeBind1(20, 33, "SHARE.CLIPBOARD-MESSAGE"))("target", _r0);
        ɵngcc0.ɵɵadvance(5);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(25, 35, "SHARE.EXPIRES"));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵpropertyInterpolate("aria-label", ɵngcc0.ɵɵpipeBind1(28, 37, "SHARE.EXPIRES"));
        ɵngcc0.ɵɵproperty("disabled", !ctx.canUpdate)("checked", ctx.time.value);
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵproperty("disabled", ctx.time.disabled)("for", _r3);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("type", ctx.type)("timeInterval", 1);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵpropertyInterpolate("placeholder", ɵngcc0.ɵɵpipeBind1(36, 39, "SHARE.EXPIRATION-LABEL"));
        ɵngcc0.ɵɵproperty("min", ctx.minDate)("matDatetimepicker", _r3);
        ɵngcc0.ɵɵadvance(5);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(40, 41, "SHARE.CLOSE"), " ");
    } }, directives: [ɵngcc2.MatDialogContent, ɵngcc3.MatSlideToggle, ɵngcc4.ɵangular_packages_forms_forms_y, ɵngcc4.NgControlStatusGroup, ɵngcc4.FormGroupDirective, ɵngcc5.MatFormField, ɵngcc6.MatInput, ɵngcc4.DefaultValueAccessor, ɵngcc4.NgControlStatus, ɵngcc4.FormControlName, ɵngcc7.MatIcon, ɵngcc5.MatSuffix, ɵngcc1.ClipboardDirective, ɵngcc8.MatDatetimepickerToggle, ɵngcc8.MatDatetimepicker, ɵngcc8.MatDatetimepickerInput, ɵngcc2.MatDialogActions, ɵngcc9.MatButton, ɵngcc2.MatDialogClose], pipes: [ɵngcc10.TranslatePipe], styles: [".adf-float-label{padding-top:20px}.adf-share-link-dialog .adf-share-link__dialog-content{display:flex;flex-direction:column}.adf-share-link-dialog .adf-share-link__info,.adf-share-link-dialog .adf-share-link__label,.adf-share-link-dialog .adf-share-link__title{color:var(--theme-text-bold-color);font-size:16px;font-stretch:normal;font-style:normal;font-weight:400;letter-spacing:-.4px;line-height:2}.adf-share-link-dialog .adf-share-link__label{flex:1 1 auto}.adf-share-link-dialog .adf-share-link__info{color:var(--theme-text-color);font-size:13px}.adf-share-link-dialog .adf-share-link--row{align-items:center;display:flex;flex-direction:row;flex-wrap:wrap}.adf-share-link-dialog .adf-share-link__input{color:var(--theme-text-bold-color)}.adf-share-link-dialog .adf-input-action{cursor:pointer}.adf-share-link-dialog .adf-full-width{width:100%}.adf-share-link-dialog .mat-form-field-infix{border-top:unset}.adf-share-link-dialog .mat-dialog-actions{justify-content:flex-end}.adf-share-link-dialog .mat-dialog-actions>button{text-transform:uppercase}.adf-share-link-dialog .mat-form-field-flex{align-items:center}"], encapsulation: 2 });
ShareDialogComponent.ctorParameters = () => [
    { type: AppConfigService },
    { type: SharedLinksApiService },
    { type: MatDialogRef },
    { type: MatDialog },
    { type: NodesApiService },
    { type: ContentService },
    { type: RenditionsService },
    { type: undefined, decorators: [{ type: Inject, args: [MAT_DIALOG_DATA,] }] }
];
ShareDialogComponent.propDecorators = {
    slideToggleExpirationDate: [{ type: ViewChild, args: ['slideToggleExpirationDate', { static: true },] }],
    dateTimePickerInput: [{ type: ViewChild, args: ['dateTimePickerInput', { static: true },] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ShareDialogComponent, [{
        type: Component,
        args: [{
                selector: 'adf-share-dialog',
                template: "<div class=\"adf-share-link__dialog-content\">\n    <div data-automation-id=\"adf-share-dialog-title\" class=\"adf-share-link__title\">\n        {{ 'SHARE.DIALOG-TITLE' | translate }} {{ fileName }}\n    </div>\n\n    <mat-dialog-content>\n        <p class=\"adf-share-link__info\">{{ 'SHARE.DESCRIPTION' | translate }}</p>\n\n        <div class=\"adf-share-link--row\">\n            <div class=\"adf-share-link__label\">{{ 'SHARE.TITLE' | translate }}</div>\n\n            <mat-slide-toggle\n                color=\"primary\"\n                data-automation-id=\"adf-share-toggle\"\n                aria-label=\"{{ 'SHARE.TITLE' | translate }}\"\n                [checked]=\"isFileShared\"\n                [disabled]=\"!canUpdate || isDisabled\"\n                (change)=\"onSlideShareChange($event)\">\n            </mat-slide-toggle>\n        </div>\n\n        <form [formGroup]=\"form\">\n            <mat-form-field class=\"adf-full-width adf-float-label\" floatLabel='always'>\n                <input\n                    #sharedLinkInput\n                    data-automation-id=\"adf-share-link\"\n                    class=\"adf-share-link__input\"\n                    matInput\n                    cdkFocusInitial\n                    placeholder=\"{{ 'SHARE.PUBLIC-LINK' | translate }}\"\n                    formControlName=\"sharedUrl\"\n                    readonly=\"readonly\">\n                <mat-icon\n                    class=\"adf-input-action\"\n                    matSuffix\n                    [clipboard-notification]=\"'SHARE.CLIPBOARD-MESSAGE' | translate\" [adf-clipboard]\n                    [target]=\"sharedLinkInput\">\n                    link\n                </mat-icon>\n            </mat-form-field>\n\n            <div class=\"adf-share-link--row\">\n                <div class=\"adf-share-link__label\">{{ 'SHARE.EXPIRES' | translate }}</div>\n                <mat-slide-toggle\n                    #slideToggleExpirationDate\n                    [disabled]=\"!canUpdate\"\n                    color=\"primary\"\n                    data-automation-id=\"adf-expire-toggle\"\n                    aria-label=\"{{ 'SHARE.EXPIRES' | translate }}\"\n                    [checked]=\"time.value\"\n                    (change)=\"onToggleExpirationDate($event)\">\n                </mat-slide-toggle>\n            </div>\n\n            <mat-form-field class=\"adf-full-width adf-float-label\" floatLabel='always'>\n                <mat-datetimepicker-toggle\n                    #matDatetimepickerToggle=\"matDatetimepickerToggle\"\n                    [disabled]=\"time.disabled\"\n                    [for]=\"datetimePicker\"\n                    matSuffix>\n                </mat-datetimepicker-toggle>\n                <mat-datetimepicker\n                    #datetimePicker\n                    (closed)=\"onDatetimepickerClosed()\"\n                    [type]=\"type\"\n                    [timeInterval]=\"1\">\n                </mat-datetimepicker>\n                <input class=\"adf-share-link__input\"\n                    #dateTimePickerInput\n                    matInput\n                    placeholder=\"{{ 'SHARE.EXPIRATION-LABEL' | translate }}\"\n                    [min]=\"minDate\"\n                    formControlName=\"time\"\n                    [matDatetimepicker]=\"datetimePicker\" />\n            </mat-form-field>\n        </form>\n    </mat-dialog-content>\n\n    <div mat-dialog-actions>\n        <button data-automation-id=\"adf-share-dialog-close\" mat-button color=\"primary\" mat-dialog-close>\n            {{ 'SHARE.CLOSE' | translate }}\n        </button>\n    </div>\n</div>\n",
                host: { class: 'adf-share-dialog' },
                encapsulation: ViewEncapsulation.None,
                styles: [".adf-float-label{padding-top:20px}.adf-share-link-dialog .adf-share-link__dialog-content{display:flex;flex-direction:column}.adf-share-link-dialog .adf-share-link__info,.adf-share-link-dialog .adf-share-link__label,.adf-share-link-dialog .adf-share-link__title{color:var(--theme-text-bold-color);font-size:16px;font-stretch:normal;font-style:normal;font-weight:400;letter-spacing:-.4px;line-height:2}.adf-share-link-dialog .adf-share-link__label{flex:1 1 auto}.adf-share-link-dialog .adf-share-link__info{color:var(--theme-text-color);font-size:13px}.adf-share-link-dialog .adf-share-link--row{align-items:center;display:flex;flex-direction:row;flex-wrap:wrap}.adf-share-link-dialog .adf-share-link__input{color:var(--theme-text-bold-color)}.adf-share-link-dialog .adf-input-action{cursor:pointer}.adf-share-link-dialog .adf-full-width{width:100%}.adf-share-link-dialog .mat-form-field-infix{border-top:unset}.adf-share-link-dialog .mat-dialog-actions{justify-content:flex-end}.adf-share-link-dialog .mat-dialog-actions>button{text-transform:uppercase}.adf-share-link-dialog .mat-form-field-flex{align-items:center}"]
            }]
    }], function () { return [{ type: ɵngcc1.AppConfigService }, { type: ɵngcc1.SharedLinksApiService }, { type: ɵngcc2.MatDialogRef }, { type: ɵngcc2.MatDialog }, { type: ɵngcc1.NodesApiService }, { type: ɵngcc1.ContentService }, { type: ɵngcc1.RenditionsService }, { type: undefined, decorators: [{
                type: Inject,
                args: [MAT_DIALOG_DATA]
            }] }]; }, { slideToggleExpirationDate: [{
            type: ViewChild,
            args: ['slideToggleExpirationDate', { static: true }]
        }], dateTimePickerInput: [{
            type: ViewChild,
            args: ['dateTimePickerInput', { static: true }]
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,