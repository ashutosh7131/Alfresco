/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, EventEmitter, Input, Output, ViewEncapsulation } from '@angular/core';
import { NodesApiService } from '@alfresco/adf-core';
import { Subject, zip } from 'rxjs';
import { concatMap, map, takeUntil, tap } from 'rxjs/operators';
import { AspectListService } from './aspect-list.service';
export class AspectListComponent {
    constructor(aspectListService, nodeApiService) {
        this.aspectListService = aspectListService;
        this.nodeApiService = nodeApiService;
        this.nodeId = '';
        this.valueChanged = new EventEmitter();
        this.propertyColumns = ['name', 'title', 'dataType'];
        this.aspects$ = null;
        this.nodeAspects = [];
        this.nodeAspectStatus = [];
        this.hasEqualAspect = true;
        this.onDestroy$ = new Subject();
    }
    ngOnDestroy() {
        this.onDestroy$.next(true);
        this.onDestroy$.complete();
    }
    ngOnInit() {
        if (this.nodeId) {
            const node$ = this.nodeApiService.getNode(this.nodeId);
            const customAspect$ = this.aspectListService.getCustomAspects()
                .pipe(map((customAspects) => customAspects.flatMap((customAspect) => customAspect.entry.id)));
            this.aspects$ = zip(node$, customAspect$).pipe(tap(([node, customAspects]) => {
                this.nodeAspects = node.aspectNames.filter((aspect) => this.aspectListService.getVisibleAspects().includes(aspect) || customAspects.includes(aspect));
                this.nodeAspectStatus = [...this.nodeAspects];
                this.valueChanged.emit(this.nodeAspects);
            }), concatMap(() => this.aspectListService.getAspects()), takeUntil(this.onDestroy$));
        }
        else {
            this.aspects$ = this.aspectListService.getAspects()
                .pipe(takeUntil(this.onDestroy$));
        }
    }
    onCheckBoxClick(event) {
        event.stopImmediatePropagation();
    }
    onChange(change, prefixedName) {
        if (change.checked) {
            this.nodeAspects.push(prefixedName);
        }
        else {
            this.nodeAspects.splice(this.nodeAspects.indexOf(prefixedName), 1);
        }
        this.updateEqualityOfAspectList();
        this.valueChanged.emit(this.nodeAspects);
    }
    reset() {
        if (this.nodeAspectStatus && this.nodeAspectStatus.length > 0) {
            this.nodeAspects.splice(0, this.nodeAspects.length, ...this.nodeAspectStatus);
            this.hasEqualAspect = true;
            this.valueChanged.emit(this.nodeAspects);
        }
        else {
            this.clear();
        }
    }
    clear() {
        this.nodeAspects = [];
        this.updateEqualityOfAspectList();
        this.valueChanged.emit(this.nodeAspects);
    }
    getId(aspect) {
        var _a, _b, _c;
        return ((_a = aspect === null || aspect === void 0 ? void 0 : aspect.entry) === null || _a === void 0 ? void 0 : _a.title) ? (_b = aspect === null || aspect === void 0 ? void 0 : aspect.entry) === null || _b === void 0 ? void 0 : _b.title : (_c = aspect === null || aspect === void 0 ? void 0 : aspect.entry) === null || _c === void 0 ? void 0 : _c.id.replace(':', '-');
    }
    getTitle(aspect) {
        var _a, _b, _c;
        return ((_a = aspect === null || aspect === void 0 ? void 0 : aspect.entry) === null || _a === void 0 ? void 0 : _a.title) ? (_b = aspect === null || aspect === void 0 ? void 0 : aspect.entry) === null || _b === void 0 ? void 0 : _b.title : (_c = aspect === null || aspect === void 0 ? void 0 : aspect.entry) === null || _c === void 0 ? void 0 : _c.id;
    }
    updateEqualityOfAspectList() {
        if (this.nodeAspectStatus.length !== this.nodeAspects.length) {
            this.hasEqualAspect = false;
        }
        else {
            this.hasEqualAspect = this.nodeAspects.every((aspect) => this.nodeAspectStatus.includes(aspect));
        }
    }
}
AspectListComponent.decorators = [
    { type: Component, args: [{
                selector: 'adf-aspect-list',
                template: "<div id=\"aspect-list-container\" class=\"adf-aspect-list-container\" *ngIf=\"aspects$ | async as aspects; else loading\">\n    <mat-accordion class=\"adf-accordion-aspect-list\">\n        <mat-expansion-panel *ngFor=\"let aspect of aspects; let colIndex = index\" [id]=\"'aspect-list-'+getId(aspect)\">\n            <mat-expansion-panel-header [id]=\"'aspect-list-'+(getId(aspect))+'header'\">\n                <mat-panel-title>\n                    <mat-checkbox class=\"adf-aspect-list-check-button\" [id]=\"'aspect-list-'+colIndex+'-check'\"\n                                  [checked]=\"nodeAspects?.includes(aspect?.entry?.id)\"\n                                  (click)=\"onCheckBoxClick($event)\"\n                                  (change)=\"onChange($event, aspect?.entry?.id)\">\n                    </mat-checkbox>\n                    <p class=\"adf-aspect-list-element-title\">{{getTitle(aspect)}}</p>\n                </mat-panel-title>\n                <mat-panel-description [id]=\"'aspect-list-'+colIndex+'-title'\"\n                                        [matTooltip]=\"getTitle(aspect)\">\n                    {{getTitle(aspect)}}\n                </mat-panel-description>\n            </mat-expansion-panel-header>\n            <p class=\"adf-property-paragraph\" [id]=\"'aspect-list-'+colIndex+'-description'\"> {{aspect?.entry?.description}}</p>\n\n            <table mat-table [dataSource]=\"aspect?.entry?.properties\" *ngIf=\"aspect?.entry?.properties?.length > 0\" class=\"adf-aspect-property-table\" [id]=\"'aspect-list-'+colIndex+'-properties-table'\">\n                <ng-container matColumnDef=\"name\">\n                  <th mat-header-cell *matHeaderCellDef> {{'ADF-ASPECT-LIST.PROPERTY_NAME' | translate}} </th>\n                  <td mat-cell *matCellDef=\"let property\"> {{property.id}} </td>\n                </ng-container>\n                <ng-container matColumnDef=\"title\">\n                  <th mat-header-cell *matHeaderCellDef> {{'ADF-ASPECT-LIST.DESCRIPTION' | translate}} </th>\n                  <td mat-cell *matCellDef=\"let property\"> {{property.title}} </td>\n                </ng-container>\n                <ng-container matColumnDef=\"dataType\">\n                  <th mat-header-cell *matHeaderCellDef> {{'ADF-ASPECT-LIST.DATA_TYPE' | translate}} </th>\n                  <td mat-cell *matCellDef=\"let property\"> {{property.dataType}} </td>\n                </ng-container>\n                <tr mat-header-row *matHeaderRowDef=\"propertyColumns\"></tr>\n                <tr mat-row *matRowDef=\"let row; columns: propertyColumns;\"></tr>\n              </table>\n        </mat-expansion-panel>\n    </mat-accordion>\n</div>\n\n<ng-template #loading>\n    <div class=\"adf-aspect-list-spinner\">\n       <mat-spinner id=\"adf-aspect-spinner\"></mat-spinner>\n    </div>\n</ng-template>\n",
                encapsulation: ViewEncapsulation.None,
                styles: [".adf-aspect-list-spinner{align-items:center;display:flex;justify-content:center;min-height:400px}.adf-aspect-list-container{border:1px solid var(--theme-border-color);height:400px;overflow:auto;padding-top:3px}.adf-aspect-list-container .adf-aspect-list-check-button{align-items:center;display:flex;margin-right:5px}.adf-aspect-list-container .adf-aspect-list-element-title{align-items:center;display:flex}.adf-aspect-list-container .adf-accordion-aspect-list .mat-expansion-panel-spacing{margin:0}.adf-aspect-list-container .adf-accordion-aspect-list .mat-expansion-panel-header{font-size:smaller}.adf-aspect-list-container .adf-accordion-aspect-list .mat-expansion-panel-header-title{flex:1 1 0}.adf-aspect-list-container .adf-accordion-aspect-list .mat-expansion-panel-header-description{align-items:center;flex:1 1 0;justify-content:flex-start;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.adf-aspect-property-table{width:100%}.adf-aspect-property-table .mat-column-name{width:15%}.adf-aspect-property-table .mat-column-description{width:65%}.adf-aspect-property-table .mat-column-type{padding-left:10px;width:20%}"]
            },] }
];
AspectListComponent.ctorParameters = () => [
    { type: AspectListService },
    { type: NodesApiService }
];
AspectListComponent.propDecorators = {
    nodeId: [{ type: Input }],
    valueChanged: [{ type: Output }]
};
//# sourceMappingURL=data:application/json;base64,