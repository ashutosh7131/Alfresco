import { Injectable } from '@angular/core';
import { AlfrescoApiService, CardViewUpdateService, NodesApiService } from '@alfresco/adf-core';
import { AspectListService } from './aspect-list.service';
import * as i0 from "@angular/core";
import * as i1 from "@alfresco/adf-core";
import * as i2 from "./aspect-list.service";
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@alfresco/adf-core';
import * as ɵngcc2 from './aspect-list.service';
export class NodeAspectService {
    constructor(alfrescoApiService, nodesApiService, aspectListService, cardViewUpdateService) {
        this.alfrescoApiService = alfrescoApiService;
        this.nodesApiService = nodesApiService;
        this.aspectListService = aspectListService;
        this.cardViewUpdateService = cardViewUpdateService;
    }
    updateNodeAspects(nodeId) {
        this.aspectListService.openAspectListDialog(nodeId).subscribe((aspectList) => {
            this.nodesApiService.updateNode(nodeId, { aspectNames: [...aspectList] }).subscribe((updatedNode) => {
                this.alfrescoApiService.nodeUpdated.next(updatedNode);
                this.cardViewUpdateService.updateNodeAspect(updatedNode);
            });
        });
    }
}
NodeAspectService.ɵfac = function NodeAspectService_Factory(t) { return new (t || NodeAspectService)(ɵngcc0.ɵɵinject(ɵngcc1.AlfrescoApiService), ɵngcc0.ɵɵinject(ɵngcc1.NodesApiService), ɵngcc0.ɵɵinject(ɵngcc2.AspectListService), ɵngcc0.ɵɵinject(ɵngcc1.CardViewUpdateService)); };
NodeAspectService.ɵprov = i0.ɵɵdefineInjectable({ factory: function NodeAspectService_Factory() { return new NodeAspectService(i0.ɵɵinject(i1.AlfrescoApiService), i0.ɵɵinject(i1.NodesApiService), i0.ɵɵinject(i2.AspectListService), i0.ɵɵinject(i1.CardViewUpdateService)); }, token: NodeAspectService, providedIn: "root" });
NodeAspectService.ctorParameters = () => [
    { type: AlfrescoApiService },
    { type: NodesApiService },
    { type: AspectListService },
    { type: CardViewUpdateService }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NodeAspectService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc1.AlfrescoApiService }, { type: ɵngcc1.NodesApiService }, { type: ɵngcc2.AspectListService }, { type: ɵngcc1.CardViewUpdateService }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9kZS1hc3BlY3Quc2VydmljZS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vaG9tZS90cmF2aXMvYnVpbGQvQWxmcmVzY28vYWxmcmVzY28tbmcyLWNvbXBvbmVudHMvbGliL2NvbnRlbnQtc2VydmljZXMvc3JjL2xpYi9hc3BlY3QtbGlzdC9ub2RlLWFzcGVjdC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWlCQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxxQkFBcUIsRUFBRSxlQUFlLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUNoRyxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUMxRDtBQUVzQjtBQUlsQjs7OztBQUZKLE1BQU0sT0FBTyxpQkFBaUI7QUFDOUIsSUFDSSxZQUFvQixrQkFBc0MsRUFDdEMsZUFBZ0MsRUFDaEMsaUJBQW9DLEVBQ3BDLHFCQUE0QztBQUNwRSxRQUp3Qix1QkFBa0IsR0FBbEIsa0JBQWtCLENBQW9CO0FBQUMsUUFDdkMsb0JBQWUsR0FBZixlQUFlLENBQWlCO0FBQUMsUUFDakMsc0JBQWlCLEdBQWpCLGlCQUFpQixDQUFtQjtBQUFDLFFBQ3JDLDBCQUFxQixHQUFyQixxQkFBcUIsQ0FBdUI7QUFBQyxJQUNqRSxDQUFDO0FBQ0wsSUFDSSxpQkFBaUIsQ0FBQyxNQUFjO0FBQ3BDLFFBQVEsSUFBSSxDQUFDLGlCQUFpQixDQUFDLG9CQUFvQixDQUFDLE1BQU0sQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLFVBQVUsRUFBRSxFQUFFO0FBQ3JGLFlBQVksSUFBSSxDQUFDLGVBQWUsQ0FBQyxVQUFVLENBQUMsTUFBTSxFQUFFLEVBQUUsV0FBVyxFQUFFLENBQUMsR0FBRyxVQUFVLENBQUMsRUFBRSxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsV0FBVyxFQUFFLEVBQUU7QUFDaEgsZ0JBQWdCLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0FBQ3RFLGdCQUFnQixJQUFJLENBQUMscUJBQXFCLENBQUMsZ0JBQWdCLENBQUMsV0FBVyxDQUFDLENBQUM7QUFDekUsWUFBWSxDQUFDLENBQUMsQ0FBQztBQUNmLFFBQVEsQ0FBQyxDQUFDLENBQUM7QUFDWCxJQUFJLENBQUM7QUFDTDt1UkFBQztBQUNELGtVQWpCSztBQUFDO0VBSEwsVUFBVSxTQUFDLHJCQUtHLFlBUk4sa0JBQWtCO0tBSXZCLFVBQVUsRUFBRSxNQUFNLHZCQUpTLFlBQXFCLGVBQWU7TUFLbEUsTkFMc0UsWUFDOUQsaUJBQWlCO0FBQUksWUFERCxxQkFBcUI7QUFBRzs7Ozs7O2lNQUFFO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBBbGZyZXNjb0FwaVNlcnZpY2UsIENhcmRWaWV3VXBkYXRlU2VydmljZSwgTm9kZXNBcGlTZXJ2aWNlIH0gZnJvbSAnQGFsZnJlc2NvL2FkZi1jb3JlJztcbmltcG9ydCB7IEFzcGVjdExpc3RTZXJ2aWNlIH0gZnJvbSAnLi9hc3BlY3QtbGlzdC5zZXJ2aWNlJztcblxuQEluamVjdGFibGUoe1xuICAgIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBOb2RlQXNwZWN0U2VydmljZSB7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGFsZnJlc2NvQXBpU2VydmljZTogQWxmcmVzY29BcGlTZXJ2aWNlLFxuICAgICAgICAgICAgICAgIHByaXZhdGUgbm9kZXNBcGlTZXJ2aWNlOiBOb2Rlc0FwaVNlcnZpY2UsXG4gICAgICAgICAgICAgICAgcHJpdmF0ZSBhc3BlY3RMaXN0U2VydmljZTogQXNwZWN0TGlzdFNlcnZpY2UsXG4gICAgICAgICAgICAgICAgcHJpdmF0ZSBjYXJkVmlld1VwZGF0ZVNlcnZpY2U6IENhcmRWaWV3VXBkYXRlU2VydmljZSkge1xuICAgIH1cblxuICAgIHVwZGF0ZU5vZGVBc3BlY3RzKG5vZGVJZDogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMuYXNwZWN0TGlzdFNlcnZpY2Uub3BlbkFzcGVjdExpc3REaWFsb2cobm9kZUlkKS5zdWJzY3JpYmUoKGFzcGVjdExpc3QpID0+IHtcbiAgICAgICAgICAgIHRoaXMubm9kZXNBcGlTZXJ2aWNlLnVwZGF0ZU5vZGUobm9kZUlkLCB7IGFzcGVjdE5hbWVzOiBbLi4uYXNwZWN0TGlzdF0gfSkuc3Vic2NyaWJlKCh1cGRhdGVkTm9kZSkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuYWxmcmVzY29BcGlTZXJ2aWNlLm5vZGVVcGRhdGVkLm5leHQodXBkYXRlZE5vZGUpO1xuICAgICAgICAgICAgICAgIHRoaXMuY2FyZFZpZXdVcGRhdGVTZXJ2aWNlLnVwZGF0ZU5vZGVBc3BlY3QodXBkYXRlZE5vZGUpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbn1cbiJdfQ==