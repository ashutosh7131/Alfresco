import { Injectable } from '@angular/core';
import { MatDialog } from '@angular/material/dialog';
import { AlfrescoApiService, AppConfigService, LogService } from '@alfresco/adf-core';
import { from, of, Subject, zip } from 'rxjs';
import { AspectListDialogComponent } from './aspect-list-dialog.component';
import { catchError, map } from 'rxjs/operators';
import { AspectsApi } from '@alfresco/js-api';
import * as i0 from "@angular/core";
import * as i1 from "@alfresco/adf-core";
import * as i2 from "@angular/material/dialog";
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@alfresco/adf-core';
import * as ɵngcc2 from '@angular/material/dialog';
export class AspectListService {
    constructor(alfrescoApiService, appConfigService, dialog, logService) {
        this.alfrescoApiService = alfrescoApiService;
        this.appConfigService = appConfigService;
        this.dialog = dialog;
        this.logService = logService;
    }
    get aspectsApi() {
        var _a;
        this._aspectsApi = (_a = this._aspectsApi) !== null && _a !== void 0 ? _a : new AspectsApi(this.alfrescoApiService.getInstance());
        return this._aspectsApi;
    }
    getAspects() {
        const visibleAspectList = this.getVisibleAspects();
        const standardAspects$ = this.getStandardAspects(visibleAspectList);
        const customAspects$ = this.getCustomAspects();
        return zip(standardAspects$, customAspects$).pipe(map(([standardAspectList, customAspectList]) => [...standardAspectList, ...customAspectList]));
    }
    getStandardAspects(whiteList) {
        const where = `(modelId in ('cm:contentmodel', 'emailserver:emailserverModel', 'smf:smartFolder', 'app:applicationmodel' ))`;
        const opts = {
            where,
            include: ['properties']
        };
        return from(this.aspectsApi.listAspects(opts))
            .pipe(map((result) => { var _a; return this.filterAspectByConfig(whiteList, (_a = result === null || result === void 0 ? void 0 : result.list) === null || _a === void 0 ? void 0 : _a.entries); }), catchError((error) => {
            this.logService.error(error);
            return of([]);
        }));
    }
    getCustomAspects() {
        const where = `(not namespaceUri matches('http://www.alfresco.*'))`;
        const opts = {
            where,
            include: ['properties']
        };
        return from(this.aspectsApi.listAspects(opts))
            .pipe(map((result) => { var _a; return (_a = result === null || result === void 0 ? void 0 : result.list) === null || _a === void 0 ? void 0 : _a.entries; }), catchError((error) => {
            this.logService.error(error);
            return of([]);
        }));
    }
    filterAspectByConfig(visibleAspectList, aspectEntries) {
        let result = aspectEntries ? aspectEntries : [];
        if ((visibleAspectList === null || visibleAspectList === void 0 ? void 0 : visibleAspectList.length) > 0 && aspectEntries) {
            result = aspectEntries.filter((value) => {
                var _a;
                return visibleAspectList.includes((_a = value === null || value === void 0 ? void 0 : value.entry) === null || _a === void 0 ? void 0 : _a.id);
            });
        }
        return result;
    }
    getVisibleAspects() {
        let visibleAspectList = [];
        const aspectVisibleConfig = this.appConfigService.get('aspect-visible');
        if (aspectVisibleConfig) {
            for (const aspectGroup of Object.keys(aspectVisibleConfig)) {
                visibleAspectList = visibleAspectList.concat(aspectVisibleConfig[aspectGroup]);
            }
        }
        return visibleAspectList;
    }
    openAspectListDialog(nodeId) {
        const select = new Subject();
        select.subscribe({
            complete: this.close.bind(this)
        });
        const data = {
            title: 'ADF-ASPECT-LIST.DIALOG.TITLE',
            description: 'ADF-ASPECT-LIST.DIALOG.DESCRIPTION',
            overTableMessage: 'ADF-ASPECT-LIST.DIALOG.OVER-TABLE-MESSAGE',
            select,
            nodeId
        };
        this.openDialog(data, 'adf-aspect-list-dialog', '750px');
        return select;
    }
    openDialog(data, panelClass, width) {
        this.dialog.open(AspectListDialogComponent, {
            data,
            panelClass,
            width,
            disableClose: true
        });
    }
    close() {
        this.dialog.closeAll();
    }
}
AspectListService.ɵfac = function AspectListService_Factory(t) { return new (t || AspectListService)(ɵngcc0.ɵɵinject(ɵngcc1.AlfrescoApiService), ɵngcc0.ɵɵinject(ɵngcc1.AppConfigService), ɵngcc0.ɵɵinject(ɵngcc2.MatDialog), ɵngcc0.ɵɵinject(ɵngcc1.LogService)); };
AspectListService.ɵprov = i0.ɵɵdefineInjectable({ factory: function AspectListService_Factory() { return new AspectListService(i0.ɵɵinject(i1.AlfrescoApiService), i0.ɵɵinject(i1.AppConfigService), i0.ɵɵinject(i2.MatDialog), i0.ɵɵinject(i1.LogService)); }, token: AspectListService, providedIn: "root" });
AspectListService.ctorParameters = () => [
    { type: AlfrescoApiService },
    { type: AppConfigService },
    { type: MatDialog },
    { type: LogService }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AspectListService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc1.AlfrescoApiService }, { type: ɵngcc1.AppConfigService }, { type: ɵngcc2.MatDialog }, { type: ɵngcc1.LogService }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXNwZWN0LWxpc3Quc2VydmljZS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vaG9tZS90cmF2aXMvYnVpbGQvQWxmcmVzY28vYWxmcmVzY28tbmcyLWNvbXBvbmVudHMvbGliL2NvbnRlbnQtc2VydmljZXMvc3JjL2xpYi9hc3BlY3QtbGlzdC9hc3BlY3QtbGlzdC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWlCQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUNyRCxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsZ0JBQWdCLEVBQUUsVUFBVSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDdEYsT0FBTyxFQUFFLElBQUksRUFBYyxFQUFFLEVBQUUsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUUxRCxPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUMzRSxPQUFPLEVBQUUsVUFBVSxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ2pELE9BQU8sRUFBNkIsVUFBVSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDekU7QUFFc0I7QUFJbEI7Ozs7QUFGSixNQUFNLE9BQU8saUJBQWlCO0FBQzlCLElBT0ksWUFBb0Isa0JBQXNDLEVBQ3RDLGdCQUFrQyxFQUNsQyxNQUFpQixFQUNqQixVQUFzQjtBQUM5QyxRQUp3Qix1QkFBa0IsR0FBbEIsa0JBQWtCLENBQW9CO0FBQUMsUUFDdkMscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFrQjtBQUFDLFFBQ25DLFdBQU0sR0FBTixNQUFNLENBQVc7QUFBQyxRQUNsQixlQUFVLEdBQVYsVUFBVSxDQUFZO0FBQUMsSUFDM0MsQ0FBQztBQUNMLElBVkksSUFBSSxVQUFVO0FBQUs7QUFDbkIsUUFBSSxJQUFJLENBQUMs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RCxZQUFZLGdCQUFnQixFQUFFLDJDQUEyQztBQUN6RSxZQUFZLE1BQU07QUFDbEIsWUFBWSxNQUFNO0FBQ2xCLFNBQVMsQ0FBQztBQUNWLFFBQ1EsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQUUsd0JBQXdCLEVBQUUsT0FBTyxDQUFDLENBQUM7QUFDakUsUUFBUSxPQUFPLE1BQU0sQ0FBQztBQUN0QixJQUFJLENBQUM7QUFDTCxJQUNZLFVBQVUsQ0FBQyxJQUFtQyxFQUFFLFVBQWtCLEVBQUUsS0FBYTtBQUM3RixRQUFRLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLHlCQUF5QixFQUFFO0FBQ3BELFlBQVksSUFBSTtBQUNoQixZQUFZLFVBQVU7QUFDdEIsWUFBWSxLQUFLO0FBQ2pCLFlBQVksWUFBWSxFQUFFLElBQUk7QUFDOUIsU0FBUyxDQUFDLENBQUM7QUFDWCxJQUFJLENBQUM7QUFDTCxJQUNJLEtBQUs7QUFDVCxRQUFRLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUM7QUFDL0IsSUFBSSxDQUFDO0FBQ0w7cVFBQUM7QUFDRCxnVEEzR0s7QUFBQztFQUhMLFVBQVUsU0FBQyxyQkFLRyxZQVpOLGtCQUFrQjtLQVF2QixVQUFVLEVBQUUsTUFBTSx2QkFSUyxZQUFGLGdCQUFnQjtLQVM1QyxMQVRnRCxZQUR4QyxTQUFTO0FBQUksWUFDeUIsVUFBVTtBQUFHOzs7Ozs7K0tBQUU7QUFBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE1hdERpYWxvZyB9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsL2RpYWxvZyc7XG5pbXBvcnQgeyBBbGZyZXNjb0FwaVNlcnZpY2UsIEFwcENvbmZpZ1NlcnZpY2UsIExvZ1NlcnZpY2UgfSBmcm9tICdAYWxmcmVzY28vYWRmLWNvcmUnO1xuaW1wb3J0IHsgZnJvbSwgT2JzZXJ2YWJsZSwgb2YsIFN1YmplY3QsIHppcCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgQXNwZWN0TGlzdERpYWxvZ0NvbXBvbmVudERhdGEgfSBmcm9tICcuL2FzcGVjdC1saXN0LWRpYWxvZy1kYXRhLmludGVyZmFjZSc7XG5pbXBvcnQgeyBBc3BlY3RMaXN0RGlhbG9nQ29tcG9uZW50IH0gZnJvbSAnLi9hc3BlY3QtbGlzdC1kaWFsb2cuY29tcG9uZW50JztcbmltcG9ydCB7IGNhdGNoRXJyb3IsIG1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IEFzcGVjdEVudHJ5LCBBc3BlY3RQYWdpbmcsIEFzcGVjdHNBcGkgfSBmcm9tICdAYWxmcmVzY28vanMtYXBpJztcblxuQEluamVjdGFibGUoe1xuICAgIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBBc3BlY3RMaXN0U2VydmljZSB7XG5cbiAgICBfYXNwZWN0c0FwaTogQXNwZWN0c0FwaTtcbiAgICBnZXQgYXNwZWN0c0FwaSgpOiBBc3BlY3RzQXBpIHtcbiAgICAgICAgdGhpcy5fYXNwZWN0c0FwaSA9IHRoaXMuX2FzcGVjdHNBcGkgPz8gbmV3IEFzcGVjdHNBcGkodGhpcy5hbGZyZXNjb0FwaVNlcnZpY2UuZ2V0SW5zdGFuY2UoKSk7XG4gICAgICAgIHJldHVybiB0aGlzLl9hc3BlY3RzQXBpO1xuICAgIH1cblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgYWxmcmVzY29BcGlTZXJ2aWNlOiBBbGZyZXNjb0FwaVNlcnZpY2UsXG4gICAgICAgICAgICAgICAgcHJpdmF0ZSBhcHBDb25maWdTZXJ2aWNlOiBBcHBDb25maWdTZXJ2aWNlLFxuICAgICAgICAgICAgICAgIHByaXZhdGUgZGlhbG9nOiBNYXREaWFsb2csXG4gICAgICAgICAgICAgICAgcHJpdmF0ZSBsb2dTZXJ2aWNlOiBMb2dTZXJ2aWNlKSB7XG4gICAgfVxuXG4gICAgZ2V0QXNwZWN0cygpOiBPYnNlcnZhYmxlPEFzcGVjdEVudHJ5W10+IHtcbiAgICAgICAgY29uc3QgdmlzaWJsZUFzcGVjdExpc3QgPSB0aGlzLmdldFZpc2libGVBc3BlY3RzKCk7XG4gICAgICAgIGNvbnN0IHN0YW5kYXJkQXNwZWN0cyQgPSB0aGlzLmdldFN0YW5kYXJkQXNwZWN0cyh2aXNpYmxlQXNwZWN0TGlzdCk7XG4gICAgICAgIGNvbnN0IGN1c3RvbUFzcGVjdHMkID0gdGhpcy5nZXRDdXN0b21Bc3BlY3RzKCk7XG4gICAgICAgIHJldHVybiB6aXAoc3RhbmRhcmRBc3BlY3RzJCwgY3VzdG9tQXNwZWN0cyQpLnBpcGUoXG4gICAgICAgICAgICBtYXAoKFtzdGFuZGFyZEFzcGVjdExpc3QsIGN1c3RvbUFzcGVjdExpc3RdKSA9PiBbLi4uc3RhbmRhcmRBc3BlY3RMaXN0LCAuLi5jdXN0b21Bc3BlY3RMaXN0XSlcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBnZXRTdGFuZGFyZEFzcGVjdHMod2hpdGVMaXN0OiBzdHJpbmdbXSk6IE9ic2VydmFibGU8QXNwZWN0RW50cnlbXT4ge1xuICAgICAgICBjb25zdCB3aGVyZSA9IGAobW9kZWxJZCBpbiAoJ2NtOmNvbnRlbnRtb2RlbCcsICdlbWFpbHNlcnZlcjplbWFpbHNlcnZlck1vZGVsJywgJ3NtZjpzbWFydEZvbGRlcicsICdhcHA6YXBwbGljYXRpb25tb2RlbCcgKSlgO1xuICAgICAgICBjb25zdCBvcHRzOiBhbnkgPSB7XG4gICAgICAgICAgICB3aGVyZSxcbiAgICAgICAgICAgIGluY2x1ZGU6IFsncHJvcGVydGllcyddXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBmcm9tKHRoaXMuYXNwZWN0c0FwaS5saXN0QXNwZWN0cyhvcHRzKSlcbiAgICAgICAgICAgIC5waXBlKFxuICAgICAgICAgICAgICAgIG1hcCgocmVzdWx0OiBBc3BlY3RQYWdpbmcpID0+IHRoaXMuZmlsdGVyQXNwZWN0QnlDb25maWcod2hpdGVMaXN0LCByZXN1bHQ/Lmxpc3Q/LmVudHJpZXMpKSxcbiAgICAgICAgICAgICAgICBjYXRjaEVycm9yKChlcnJvcikgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmxvZ1NlcnZpY2UuZXJyb3IoZXJyb3IpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gb2YoW10pO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICApO1xuICAgIH1cblxuICAgIGdldEN1c3RvbUFzcGVjdHMoKTogT2JzZXJ2YWJsZTxBc3BlY3RFbnRyeVtdPiB7XG4gICAgICAgIGNvbnN0IHdoZXJlID0gYChub3QgbmFtZXNwYWNlVXJpIG1hdGNoZXMoJ2h0dHA6Ly93d3cuYWxmcmVzY28uKicpKWA7XG4gICAgICAgIGNvbnN0IG9wdHM6IGFueSA9IHtcbiAgICAgICAgICAgIHdoZXJlLFxuICAgICAgICAgICAgaW5jbHVkZTogWydwcm9wZXJ0aWVzJ11cbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIGZyb20odGhpcy5hc3BlY3RzQXBpLmxpc3RBc3BlY3RzKG9wdHMpKVxuICAgICAgICAgICAgLnBpcGUoXG4gICAgICAgICAgICAgICAgbWFwKChyZXN1bHQ6IEFzcGVjdFBhZ2luZykgPT4gcmVzdWx0Py5saXN0Py5lbnRyaWVzKSxcbiAgICAgICAgICAgICAgICBjYXRjaEVycm9yKChlcnJvcikgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmxvZ1NlcnZpY2UuZXJyb3IoZXJyb3IpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gb2YoW10pO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICApO1xuICAgIH1cblxuICAgIHByaXZhdGUgZmlsdGVyQXNwZWN0QnlDb25maWcodmlzaWJsZUFzcGVjdExpc3Q6IHN0cmluZ1tdLCBhc3BlY3RFbnRyaWVzOiBBc3BlY3RFbnRyeVtdKTogQXNwZWN0RW50cnlbXSB7XG4gICAgICAgIGxldCByZXN1bHQgPSBhc3BlY3RFbnRyaWVzID8gYXNwZWN0RW50cmllcyA6IFtdO1xuICAgICAgICBpZiAodmlzaWJsZUFzcGVjdExpc3Q/Lmxlbmd0aCA+IDAgJiYgYXNwZWN0RW50cmllcykge1xuICAgICAgICAgICAgcmVzdWx0ID0gYXNwZWN0RW50cmllcy5maWx0ZXIoKHZhbHVlKSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZpc2libGVBc3BlY3RMaXN0LmluY2x1ZGVzKHZhbHVlPy5lbnRyeT8uaWQpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICBnZXRWaXNpYmxlQXNwZWN0cygpOiBzdHJpbmdbXSB7XG4gICAgICAgIGxldCB2aXNpYmxlQXNwZWN0TGlzdDogc3RyaW5nW10gPSBbXTtcbiAgICAgICAgY29uc3QgYXNwZWN0VmlzaWJsZUNvbmZpZyA9IHRoaXMuYXBwQ29uZmlnU2VydmljZS5nZXQoJ2FzcGVjdC12aXNpYmxlJyk7XG4gICAgICAgIGlmIChhc3BlY3RWaXNpYmxlQ29uZmlnKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGFzcGVjdEdyb3VwIG9mIE9iamVjdC5rZXlzKGFzcGVjdFZpc2libGVDb25maWcpKSB7XG4gICAgICAgICAgICAgICAgdmlzaWJsZUFzcGVjdExpc3QgPSB2aXNpYmxlQXNwZWN0TGlzdC5jb25jYXQoYXNwZWN0VmlzaWJsZUNvbmZpZ1thc3BlY3RHcm91cF0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB2aXNpYmxlQXNwZWN0TGlzdDtcbiAgICB9XG5cbiAgICBvcGVuQXNwZWN0TGlzdERpYWxvZyhub2RlSWQ/OiBzdHJpbmcpOiBPYnNlcnZhYmxlPHN0cmluZ1tdPiB7XG4gICAgICAgIGNvbnN0IHNlbGVjdCA9IG5ldyBTdWJqZWN0PHN0cmluZ1tdPigpO1xuICAgICAgICBzZWxlY3Quc3Vic2NyaWJlKHtcbiAgICAgICAgICAgIGNvbXBsZXRlOiB0aGlzLmNsb3NlLmJpbmQodGhpcylcbiAgICAgICAgfSk7XG5cbiAgICAgICAgY29uc3QgZGF0YTogQXNwZWN0TGlzdERpYWxvZ0NvbXBvbmVudERhdGEgPSB7XG4gICAgICAgICAgICB0aXRsZTogJ0FERi1BU1BFQ1QtTElTVC5ESUFMT0cuVElUTEUnLFxuICAgICAgICAgICAgZGVzY3JpcHRpb246ICdBREYtQVNQRUNULUxJU1QuRElBTE9HLkRFU0NSSVBUSU9OJyxcbiAgICAgICAgICAgIG92ZXJUYWJsZU1lc3NhZ2U6ICdBREYtQVNQRUNULUxJU1QuRElBTE9HLk9WRVItVEFCTEUtTUVTU0FHRScsXG4gICAgICAgICAgICBzZWxlY3QsXG4gICAgICAgICAgICBub2RlSWRcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLm9wZW5EaWFsb2coZGF0YSwgJ2FkZi1hc3BlY3QtbGlzdC1kaWFsb2cnLCAnNzUwcHgnKTtcbiAgICAgICAgcmV0dXJuIHNlbGVjdDtcbiAgICB9XG5cbiAgICBwcml2YXRlIG9wZW5EaWFsb2coZGF0YTogQXNwZWN0TGlzdERpYWxvZ0NvbXBvbmVudERhdGEsIHBhbmVsQ2xhc3M6IHN0cmluZywgd2lkdGg6IHN0cmluZykge1xuICAgICAgICB0aGlzLmRpYWxvZy5vcGVuKEFzcGVjdExpc3REaWFsb2dDb21wb25lbnQsIHtcbiAgICAgICAgICAgIGRhdGEsXG4gICAgICAgICAgICBwYW5lbENsYXNzLFxuICAgICAgICAgICAgd2lkdGgsXG4gICAgICAgICAgICBkaXNhYmxlQ2xvc2U6IHRydWVcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgY2xvc2UoKSB7XG4gICAgICAgIHRoaXMuZGlhbG9nLmNsb3NlQWxsKCk7XG4gICAgfVxufVxuIl19