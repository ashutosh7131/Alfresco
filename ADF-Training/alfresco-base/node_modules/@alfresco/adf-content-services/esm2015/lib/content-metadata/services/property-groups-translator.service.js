import { Injectable } from '@angular/core';
import { CardViewTextItemModel, CardViewBoolItemModel, CardViewDateItemModel, CardViewSelectItemModel, CardViewDatetimeItemModel, CardViewIntItemModel, CardViewFloatItemModel, LogService, MultiValuePipe, AppConfigService, DecimalNumberPipe } from '@alfresco/adf-core';
import { of } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "@alfresco/adf-core";
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@alfresco/adf-core';
const D_TEXT = 'd:text';
const D_MLTEXT = 'd:mltext';
const D_DATE = 'd:date';
const D_DATETIME = 'd:datetime';
const D_INT = 'd:int';
const D_LONG = 'd:long';
const D_FLOAT = 'd:float';
const D_DOUBLE = 'd:double';
const D_BOOLEAN = 'd:boolean';
export class PropertyGroupTranslatorService {
    constructor(logService, multiValuePipe, decimalNumberPipe, appConfig) {
        this.logService = logService;
        this.multiValuePipe = multiValuePipe;
        this.decimalNumberPipe = decimalNumberPipe;
        this.appConfig = appConfig;
        this.valueSeparator = this.appConfig.get('content-metadata.multi-value-pipe-separator');
    }
    translateToCardViewGroups(propertyGroups, propertyValues, definition) {
        return propertyGroups.map((propertyGroup) => {
            const translatedPropertyGroup = Object.assign({}, propertyGroup);
            translatedPropertyGroup.properties = this.translateArray(propertyGroup.properties, propertyValues, definition);
            return translatedPropertyGroup;
        });
    }
    translateProperty(property, startValue, allowEditing = false) {
        this.checkECMTypeValidity(property.dataType);
        const prefix = 'properties.';
        const propertyDefinition = {
            label: property.title || property.id,
            value: startValue ? startValue : property.defaultValue,
            key: `${prefix}${property.id}`,
            default: property.defaultValue,
            editable: property.isProtected ? false : allowEditing,
            constraints: property === null || property === void 0 ? void 0 : property.constraints
        };
        return this.transform(propertyDefinition, property.dataType, property.isMultiValued);
    }
    translateArray(properties, propertyValues, definition) {
        return properties.map((property) => {
            return this.translate(property, propertyValues, this.getPropertyConstraints(property.name, definition));
        });
    }
    translate(property, propertyValues, constraints) {
        let propertyValue;
        if (propertyValues && !this.isEmpty(propertyValues[property.name])) {
            propertyValue = propertyValues[property.name];
        }
        this.checkECMTypeValidity(property.dataType);
        const prefix = 'properties.';
        const propertyDefinition = {
            label: property.title || property.name,
            value: propertyValue,
            key: `${prefix}${property.name}`,
            default: property.defaultValue,
            editable: property.protected ? false : property.editable !== undefined ? property.editable : true,
            constraints: constraints
        };
        return this.transform(propertyDefinition, property.dataType, property.multiValued);
    }
    transform(propertyDefinition, dataType, isMultiValued) {
        let cardViewItemProperty;
        if (this.isListOfValues(propertyDefinition.constraints)) {
            const options = propertyDefinition.constraints[0].parameters.allowedValues.map((value) => ({ key: value, label: value }));
            const properties = Object.assign(propertyDefinition, { options$: of(options) });
            cardViewItemProperty = new CardViewSelectItemModel(properties);
        }
        else {
            switch (dataType) {
                case D_MLTEXT:
                    cardViewItemProperty = new CardViewTextItemModel(Object.assign(propertyDefinition, {
                        multiline: true
                    }));
                    break;
                case D_INT:
                case D_LONG:
                    cardViewItemProperty = new CardViewIntItemModel(Object.assign(propertyDefinition, {
                        multivalued: isMultiValued,
                        pipes: [{ pipe: this.multiValuePipe, params: [this.valueSeparator] }]
                    }));
                    break;
                case D_FLOAT:
                case D_DOUBLE:
                    cardViewItemProperty = new CardViewFloatItemModel(Object.assign(propertyDefinition, {
                        multivalued: isMultiValued,
                        pipes: [
                            { pipe: this.decimalNumberPipe },
                            { pipe: this.multiValuePipe, params: [this.valueSeparator] }
                        ]
                    }));
                    break;
                case D_DATE:
                    cardViewItemProperty = new CardViewDateItemModel(Object.assign(propertyDefinition, {
                        multivalued: isMultiValued,
                        pipes: [{ pipe: this.multiValuePipe, params: [this.valueSeparator] }]
                    }));
                    break;
                case D_DATETIME:
                    cardViewItemProperty = new CardViewDatetimeItemModel(Object.assign(propertyDefinition, {
                        multivalued: isMultiValued,
                        pipes: [{ pipe: this.multiValuePipe, params: [this.valueSeparator] }]
                    }));
                    break;
                case D_BOOLEAN:
                    cardViewItemProperty = new CardViewBoolItemModel(propertyDefinition);
                    break;
                case D_TEXT:
                default:
                    cardViewItemProperty = new CardViewTextItemModel(Object.assign(propertyDefinition, {
                        multivalued: isMultiValued,
                        multiline: isMultiValued,
                        pipes: [{ pipe: this.multiValuePipe, params: [this.valueSeparator] }]
                    }));
            }
        }
        return cardViewItemProperty;
    }
    isListOfValues(constraint) {
        var _a;
        return ((_a = constraint === null || constraint === void 0 ? void 0 : constraint[0]) === null || _a === void 0 ? void 0 : _a.type) === 'LIST';
    }
    getPropertyConstraints(propertyName, definition) {
        var _a, _b;
        return (_b = (_a = definition === null || definition === void 0 ? void 0 : definition.properties.find((item) => item.id === propertyName)) === null || _a === void 0 ? void 0 : _a.constraints) !== null && _b !== void 0 ? _b : [];
    }
    checkECMTypeValidity(ecmPropertyType) {
        if (PropertyGroupTranslatorService.RECOGNISED_ECM_TYPES.indexOf(ecmPropertyType) === -1) {
            this.logService.error(`Unknown type for mapping: ${ecmPropertyType}`);
        }
    }
    isEmpty(value) {
        return value === undefined || value === null || value === '';
    }
}
PropertyGroupTranslatorService.ɵfac = function PropertyGroupTranslatorService_Factory(t) { return new (t || PropertyGroupTranslatorService)(ɵngcc0.ɵɵinject(ɵngcc1.LogService), ɵngcc0.ɵɵinject(ɵngcc1.MultiValuePipe), ɵngcc0.ɵɵinject(ɵngcc1.DecimalNumberPipe), ɵngcc0.ɵɵinject(ɵngcc1.AppConfigService)); };
PropertyGroupTranslatorService.RECOGNISED_ECM_TYPES = [D_TEXT, D_MLTEXT, D_DATE, D_DATETIME, D_INT, D_LONG, D_FLOAT, D_DOUBLE, D_BOOLEAN];
PropertyGroupTranslatorService.ɵprov = i0.ɵɵdefineInjectable({ factory: function PropertyGroupTranslatorService_Factory() { return new PropertyGroupTranslatorService(i0.ɵɵinject(i1.LogService), i0.ɵɵinject(i1.MultiValuePipe), i0.ɵɵinject(i1.DecimalNumberPipe), i0.ɵɵinject(i1.AppConfigService)); }, token: PropertyGroupTranslatorService, providedIn: "root" });
PropertyGroupTranslatorService.ctorParameters = () => [
    { type: LogService },
    { type: MultiValuePipe },
    { type: DecimalNumberPipe },
    { type: AppConfigService }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(PropertyGroupTranslatorService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc1.LogService }, { type: ɵngcc1.MultiValuePipe }, { type: ɵngcc1.DecimalNumberPipe }, { type: ɵngcc1.AppConfigService }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,