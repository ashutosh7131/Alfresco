import { Injectable } from '@angular/core';
import { AppConfigService, LogService } from '@alfresco/adf-core';
import { AspectOrientedConfigService } from './aspect-oriented-config.service';
import { IndifferentConfigService } from './indifferent-config.service';
import { LayoutOrientedConfigService } from './layout-oriented-config.service';
import * as i0 from "@angular/core";
import * as i1 from "@alfresco/adf-core";
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@alfresco/adf-core';
export class ContentMetadataConfigFactory {
    constructor(appConfigService, logService) {
        this.appConfigService = appConfigService;
        this.logService = logService;
    }
    get(presetName = 'default') {
        let presetConfig;
        try {
            presetConfig = this.appConfigService.config['content-metadata'].presets[presetName];
        }
        catch (_a) {
            if (presetName !== ContentMetadataConfigFactory.DEFAULT_PRESET_NAME) {
                this.logService.error(`No content-metadata preset for: ${presetName}`);
            }
            presetConfig = ContentMetadataConfigFactory.INDIFFERENT_PRESET;
        }
        return this.createConfig(presetConfig);
    }
    createConfig(presetConfig) {
        let config;
        if (this.isLayoutOrientedPreset(presetConfig)) {
            config = new LayoutOrientedConfigService(presetConfig);
        }
        else if (this.isAspectOrientedPreset(presetConfig)) {
            config = new AspectOrientedConfigService(presetConfig);
        }
        else {
            config = new IndifferentConfigService();
        }
        Object.freeze(config);
        return config;
    }
    isAspectOrientedPreset(presetConfig) {
        return this.isObject(presetConfig);
    }
    isLayoutOrientedPreset(presetConfig) {
        return Array.isArray(presetConfig);
    }
    isObject(x) {
        return x != null && typeof x === 'object';
    }
}
ContentMetadataConfigFactory.ɵfac = function ContentMetadataConfigFactory_Factory(t) { return new (t || ContentMetadataConfigFactory)(ɵngcc0.ɵɵinject(ɵngcc1.AppConfigService), ɵngcc0.ɵɵinject(ɵngcc1.LogService)); };
ContentMetadataConfigFactory.INDIFFERENT_PRESET = '*';
ContentMetadataConfigFactory.DEFAULT_PRESET_NAME = 'default';
ContentMetadataConfigFactory.ɵprov = i0.ɵɵdefineInjectable({ factory: function ContentMetadataConfigFactory_Factory() { return new ContentMetadataConfigFactory(i0.ɵɵinject(i1.AppConfigService), i0.ɵɵinject(i1.LogService)); }, token: ContentMetadataConfigFactory, providedIn: "root" });
ContentMetadataConfigFactory.ctorParameters = () => [
    { type: AppConfigService },
    { type: LogService }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ContentMetadataConfigFactory, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc1.AppConfigService }, { type: ɵngcc1.LogService }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udGVudC1tZXRhZGF0YS1jb25maWcuZmFjdG9yeS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vaG9tZS90cmF2aXMvYnVpbGQvQWxmcmVzY28vYWxmcmVzY28tbmcyLWNvbXBvbmVudHMvbGliL2NvbnRlbnQtc2VydmljZXMvc3JjL2xpYi9jb250ZW50LW1ldGFkYXRhL3NlcnZpY2VzL2NvbmZpZy9jb250ZW50LW1ldGFkYXRhLWNvbmZpZy5mYWN0b3J5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWlCQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxVQUFVLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUNsRSxPQUFPLEVBQUUsMkJBQTJCLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQztBQUMvRSxPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQUN4RSxPQUFPLEVBQUUsMkJBQTJCLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQztBQUMvRTtBQUVVOzs7QUFRVixNQUFNLE9BQU8sNEJBQTRCO0FBQ3pDLElBSUksWUFBb0IsZ0JBQWtDLEVBQVUsVUFBc0I7QUFBSSxRQUF0RSxxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQWtCO0FBQUMsUUFBUyxlQUFVLEdBQVYsVUFBVSxDQUFZO0FBQUMsSUFBRSxDQUFDO0FBQzlGLElBQ1csR0FBRyxDQUFDLGFBQXFCLFNBQVM7QUFBSSxRQUN6QyxJQUFJLFlBQTBCLENBQUM7QUFDdkMsUUFBUSxJQUFJO0FBQ1osWUFBWSxZQUFZLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQztBQUNoRyxTQUFTO0FBQUMsUUFBQSxXQUFNO0FBQ2hCLFlBQVksSUFBSSxVQUFVLEtBQUssNEJBQTRCLENBQUMsbUJBQW1CLEVBQUU7QUFDakYsZ0JBQWdCLElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLG1DQUFtQyxVQUFVLEVBQUUsQ0FBQyxDQUFDO0FBQ3ZGLGFBQWE7QUFDYixZQUFZLFlBQVksR0FBRyw0QkFBNEIsQ0FBQyxrQkFBa0IsQ0FBQztBQUMzRSxTQUFTO0FBQ1QsUUFDUSxPQUFPLElBQUksQ0FBQyxZQUFZLENBQUMsWUFBWSxDQUFDLENBQUM7QUFDL0MsSUFBSSxDQUFDO0FBQ0wsSUFDVyxZQUFZLENBQUMsWUFBMEI7QUFBSSxRQUM5QyxJQUFJLE1BQTZCLENBQUM7QUFDMUMsUUFDUSxJQUFJLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxZQUFZLENBQUMsRUFBRTtBQUN2RCxZQUFZLE1BQU0sR0FBRyxJQUFJLDJCQUEyQixDQUF3QixZQUFZLENBQUMsQ0FBQztBQUMxRixTQUFTO0FBQUMsYUFBSyxJQUFJLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxZQUFZLENBQUMsRUFBRTtBQUM5RCxZQUFZLE1BQU0sR0FBRyxJQUFJLDJCQUEyQixDQUF3QixZQUFZLENBQUMsQ0FBQztBQUMxRixTQUFTO0FBQUMsYUFBSztBQUNmLFlBQVksTUFBTSxHQUFHLElBQUksd0JBQXdCLEVBQUUsQ0FBQztBQUNwRCxTQUFTO0FBQ1QsUUFDUSxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQzlCLFFBQVEsT0FBTyxNQUFNLENBQUM7QUFDdEIsSUFBSSxDQUFDO0FBQ0wsSUFDWSxzQkFBc0IsQ0FBQyxZQUEwQjtBQUFJLFFBQ3pELE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQUMsQ0FBQztBQUMzQyxJQUFJLENBQUM7QUFDTCxJQUNZLHNCQUFzQixDQUFDLFlBQTBCO0FBQUksUUFDekQsT0FBTyxLQUFLLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFDO0FBQzNDLElBQUksQ0FBQztBQUNMLElBQ1ksUUFBUSxDQUFDLENBQU07QUFBSSxRQUN2QixPQUFPLENBQUMsSUFBSSxJQUFJLElBQUksT0FBTyxDQUFDLEtBQUssUUFBUSxDQUFDO0FBQ2xELElBQUksQ0FBQztBQUNMO3VOQUFDO0FBN0NtQiwrQ0FBa0IsR0FBRyxHQUFHLENBQUM7QUFDekIsZ0RBQW1CLEdBQUcsU0FBUyxDQUFDO0FBQ3BELDZSQUpLO0FBQUM7RUFITCxVQUFVLFNBQUMsckJBS0csWUFoQk4sZ0JBQWdCO09BWXJCLFVBQVUsRUFBRSxuQkFaYSxZQUFGLFVBQVU7QUFZZixBQVprQjtXQWF2Qzs7Ozs7OEdBYnlDO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBBcHBDb25maWdTZXJ2aWNlLCBMb2dTZXJ2aWNlIH0gZnJvbSAnQGFsZnJlc2NvL2FkZi1jb3JlJztcbmltcG9ydCB7IEFzcGVjdE9yaWVudGVkQ29uZmlnU2VydmljZSB9IGZyb20gJy4vYXNwZWN0LW9yaWVudGVkLWNvbmZpZy5zZXJ2aWNlJztcbmltcG9ydCB7IEluZGlmZmVyZW50Q29uZmlnU2VydmljZSB9IGZyb20gJy4vaW5kaWZmZXJlbnQtY29uZmlnLnNlcnZpY2UnO1xuaW1wb3J0IHsgTGF5b3V0T3JpZW50ZWRDb25maWdTZXJ2aWNlIH0gZnJvbSAnLi9sYXlvdXQtb3JpZW50ZWQtY29uZmlnLnNlcnZpY2UnO1xuaW1wb3J0IHtcbiAgICBQcmVzZXRDb25maWcsXG4gICAgQ29udGVudE1ldGFkYXRhQ29uZmlnLFxuICAgIEFzcGVjdE9yaWVudGVkQ29uZmlnLFxuICAgIExheW91dE9yaWVudGVkQ29uZmlnXG59IGZyb20gJy4uLy4uL2ludGVyZmFjZXMvY29udGVudC1tZXRhZGF0YS5pbnRlcmZhY2VzJztcblxuQEluamVjdGFibGUoe1xuICAgIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBDb250ZW50TWV0YWRhdGFDb25maWdGYWN0b3J5IHtcblxuICAgIHN0YXRpYyByZWFkb25seSBJTkRJRkZFUkVOVF9QUkVTRVQgPSAnKic7XG4gICAgc3RhdGljIHJlYWRvbmx5IERFRkFVTFRfUFJFU0VUX05BTUUgPSAnZGVmYXVsdCc7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGFwcENvbmZpZ1NlcnZpY2U6IEFwcENvbmZpZ1NlcnZpY2UsIHByaXZhdGUgbG9nU2VydmljZTogTG9nU2VydmljZSkge31cblxuICAgIHB1YmxpYyBnZXQocHJlc2V0TmFtZTogc3RyaW5nID0gJ2RlZmF1bHQnKTogQ29udGVudE1ldGFkYXRhQ29uZmlnIHtcbiAgICAgICAgbGV0IHByZXNldENvbmZpZzogUHJlc2V0Q29uZmlnO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcHJlc2V0Q29uZmlnID0gdGhpcy5hcHBDb25maWdTZXJ2aWNlLmNvbmZpZ1snY29udGVudC1tZXRhZGF0YSddLnByZXNldHNbcHJlc2V0TmFtZV07XG4gICAgICAgIH0gY2F0Y2gge1xuICAgICAgICAgICAgaWYgKHByZXNldE5hbWUgIT09IENvbnRlbnRNZXRhZGF0YUNvbmZpZ0ZhY3RvcnkuREVGQVVMVF9QUkVTRVRfTkFNRSkge1xuICAgICAgICAgICAgICAgIHRoaXMubG9nU2VydmljZS5lcnJvcihgTm8gY29udGVudC1tZXRhZGF0YSBwcmVzZXQgZm9yOiAke3ByZXNldE5hbWV9YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwcmVzZXRDb25maWcgPSBDb250ZW50TWV0YWRhdGFDb25maWdGYWN0b3J5LklORElGRkVSRU5UX1BSRVNFVDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLmNyZWF0ZUNvbmZpZyhwcmVzZXRDb25maWcpO1xuICAgIH1cblxuICAgIHB1YmxpYyBjcmVhdGVDb25maWcocHJlc2V0Q29uZmlnOiBQcmVzZXRDb25maWcpOiBDb250ZW50TWV0YWRhdGFDb25maWcge1xuICAgICAgICBsZXQgY29uZmlnOiBDb250ZW50TWV0YWRhdGFDb25maWc7XG5cbiAgICAgICAgaWYgKHRoaXMuaXNMYXlvdXRPcmllbnRlZFByZXNldChwcmVzZXRDb25maWcpKSB7XG4gICAgICAgICAgICBjb25maWcgPSBuZXcgTGF5b3V0T3JpZW50ZWRDb25maWdTZXJ2aWNlKDxMYXlvdXRPcmllbnRlZENvbmZpZz4gcHJlc2V0Q29uZmlnKTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLmlzQXNwZWN0T3JpZW50ZWRQcmVzZXQocHJlc2V0Q29uZmlnKSkge1xuICAgICAgICAgICAgY29uZmlnID0gbmV3IEFzcGVjdE9yaWVudGVkQ29uZmlnU2VydmljZSg8QXNwZWN0T3JpZW50ZWRDb25maWc+IHByZXNldENvbmZpZyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25maWcgPSBuZXcgSW5kaWZmZXJlbnRDb25maWdTZXJ2aWNlKCk7XG4gICAgICAgIH1cblxuICAgICAgICBPYmplY3QuZnJlZXplKGNvbmZpZyk7XG4gICAgICAgIHJldHVybiBjb25maWc7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBpc0FzcGVjdE9yaWVudGVkUHJlc2V0KHByZXNldENvbmZpZzogUHJlc2V0Q29uZmlnKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLmlzT2JqZWN0KHByZXNldENvbmZpZyk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBpc0xheW91dE9yaWVudGVkUHJlc2V0KHByZXNldENvbmZpZzogUHJlc2V0Q29uZmlnKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiBBcnJheS5pc0FycmF5KHByZXNldENvbmZpZyk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBpc09iamVjdCh4OiBhbnkpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHggIT0gbnVsbCAmJiB0eXBlb2YgeCA9PT0gJ29iamVjdCc7XG4gICAgfVxufVxuIl19