import { Injectable } from '@angular/core';
import { AppConfigService, LogService } from '@alfresco/adf-core';
import { AspectOrientedConfigService } from './aspect-oriented-config.service';
import { IndifferentConfigService } from './indifferent-config.service';
import { LayoutOrientedConfigService } from './layout-oriented-config.service';
import * as i0 from "@angular/core";
import * as i1 from "@alfresco/adf-core";
export class ContentMetadataConfigFactory {
    constructor(appConfigService, logService) {
        this.appConfigService = appConfigService;
        this.logService = logService;
    }
    get(presetName = 'default') {
        let presetConfig;
        try {
            presetConfig = this.appConfigService.config['content-metadata'].presets[presetName];
        }
        catch (_a) {
            if (presetName !== ContentMetadataConfigFactory.DEFAULT_PRESET_NAME) {
                this.logService.error(`No content-metadata preset for: ${presetName}`);
            }
            presetConfig = ContentMetadataConfigFactory.INDIFFERENT_PRESET;
        }
        return this.createConfig(presetConfig);
    }
    createConfig(presetConfig) {
        let config;
        if (this.isLayoutOrientedPreset(presetConfig)) {
            config = new LayoutOrientedConfigService(presetConfig);
        }
        else if (this.isAspectOrientedPreset(presetConfig)) {
            config = new AspectOrientedConfigService(presetConfig);
        }
        else {
            config = new IndifferentConfigService();
        }
        Object.freeze(config);
        return config;
    }
    isAspectOrientedPreset(presetConfig) {
        return this.isObject(presetConfig);
    }
    isLayoutOrientedPreset(presetConfig) {
        return Array.isArray(presetConfig);
    }
    isObject(x) {
        return x != null && typeof x === 'object';
    }
}
ContentMetadataConfigFactory.INDIFFERENT_PRESET = '*';
ContentMetadataConfigFactory.DEFAULT_PRESET_NAME = 'default';
ContentMetadataConfigFactory.ɵprov = i0.ɵɵdefineInjectable({ factory: function ContentMetadataConfigFactory_Factory() { return new ContentMetadataConfigFactory(i0.ɵɵinject(i1.AppConfigService), i0.ɵɵinject(i1.LogService)); }, token: ContentMetadataConfigFactory, providedIn: "root" });
ContentMetadataConfigFactory.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
ContentMetadataConfigFactory.ctorParameters = () => [
    { type: AppConfigService },
    { type: LogService }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udGVudC1tZXRhZGF0YS1jb25maWcuZmFjdG9yeS5qcyIsInNvdXJjZVJvb3QiOiIvaG9tZS90cmF2aXMvYnVpbGQvQWxmcmVzY28vYWxmcmVzY28tbmcyLWNvbXBvbmVudHMvbGliL2NvbnRlbnQtc2VydmljZXMvc3JjLyIsInNvdXJjZXMiOlsibGliL2NvbnRlbnQtbWV0YWRhdGEvc2VydmljZXMvY29uZmlnL2NvbnRlbnQtbWV0YWRhdGEtY29uZmlnLmZhY3RvcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBaUJBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLGdCQUFnQixFQUFFLFVBQVUsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ2xFLE9BQU8sRUFBRSwyQkFBMkIsRUFBRSxNQUFNLGtDQUFrQyxDQUFDO0FBQy9FLE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBQ3hFLE9BQU8sRUFBRSwyQkFBMkIsRUFBRSxNQUFNLGtDQUFrQyxDQUFDOzs7QUFXL0UsTUFBTSxPQUFPLDRCQUE0QjtJQUtyQyxZQUFvQixnQkFBa0MsRUFBVSxVQUFzQjtRQUFsRSxxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQWtCO1FBQVUsZUFBVSxHQUFWLFVBQVUsQ0FBWTtJQUFHLENBQUM7SUFFbkYsR0FBRyxDQUFDLGFBQXFCLFNBQVM7UUFDckMsSUFBSSxZQUEwQixDQUFDO1FBQy9CLElBQUk7WUFDQSxZQUFZLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQztTQUN2RjtRQUFDLFdBQU07WUFDSixJQUFJLFVBQVUsS0FBSyw0QkFBNEIsQ0FBQyxtQkFBbUIsRUFBRTtnQkFDakUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsbUNBQW1DLFVBQVUsRUFBRSxDQUFDLENBQUM7YUFDMUU7WUFDRCxZQUFZLEdBQUcsNEJBQTRCLENBQUMsa0JBQWtCLENBQUM7U0FDbEU7UUFFRCxPQUFPLElBQUksQ0FBQyxZQUFZLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDM0MsQ0FBQztJQUVNLFlBQVksQ0FBQyxZQUEwQjtRQUMxQyxJQUFJLE1BQTZCLENBQUM7UUFFbEMsSUFBSSxJQUFJLENBQUMsc0JBQXNCLENBQUMsWUFBWSxDQUFDLEVBQUU7WUFDM0MsTUFBTSxHQUFHLElBQUksMkJBQTJCLENBQXdCLFlBQVksQ0FBQyxDQUFDO1NBQ2pGO2FBQU0sSUFBSSxJQUFJLENBQUMsc0JBQXNCLENBQUMsWUFBWSxDQUFDLEVBQUU7WUFDbEQsTUFBTSxHQUFHLElBQUksMkJBQTJCLENBQXdCLFlBQVksQ0FBQyxDQUFDO1NBQ2pGO2FBQU07WUFDSCxNQUFNLEdBQUcsSUFBSSx3QkFBd0IsRUFBRSxDQUFDO1NBQzNDO1FBRUQsTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN0QixPQUFPLE1BQU0sQ0FBQztJQUNsQixDQUFDO0lBRU8sc0JBQXNCLENBQUMsWUFBMEI7UUFDckQsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQ3ZDLENBQUM7SUFFTyxzQkFBc0IsQ0FBQyxZQUEwQjtRQUNyRCxPQUFPLEtBQUssQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDdkMsQ0FBQztJQUVPLFFBQVEsQ0FBQyxDQUFNO1FBQ25CLE9BQU8sQ0FBQyxJQUFJLElBQUksSUFBSSxPQUFPLENBQUMsS0FBSyxRQUFRLENBQUM7SUFDOUMsQ0FBQzs7QUE1Q2UsK0NBQWtCLEdBQUcsR0FBRyxDQUFDO0FBQ3pCLGdEQUFtQixHQUFHLFNBQVMsQ0FBQzs7O1lBTm5ELFVBQVUsU0FBQztnQkFDUixVQUFVLEVBQUUsTUFBTTthQUNyQjs7O1lBYlEsZ0JBQWdCO1lBQUUsVUFBVSIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEFwcENvbmZpZ1NlcnZpY2UsIExvZ1NlcnZpY2UgfSBmcm9tICdAYWxmcmVzY28vYWRmLWNvcmUnO1xuaW1wb3J0IHsgQXNwZWN0T3JpZW50ZWRDb25maWdTZXJ2aWNlIH0gZnJvbSAnLi9hc3BlY3Qtb3JpZW50ZWQtY29uZmlnLnNlcnZpY2UnO1xuaW1wb3J0IHsgSW5kaWZmZXJlbnRDb25maWdTZXJ2aWNlIH0gZnJvbSAnLi9pbmRpZmZlcmVudC1jb25maWcuc2VydmljZSc7XG5pbXBvcnQgeyBMYXlvdXRPcmllbnRlZENvbmZpZ1NlcnZpY2UgfSBmcm9tICcuL2xheW91dC1vcmllbnRlZC1jb25maWcuc2VydmljZSc7XG5pbXBvcnQge1xuICAgIFByZXNldENvbmZpZyxcbiAgICBDb250ZW50TWV0YWRhdGFDb25maWcsXG4gICAgQXNwZWN0T3JpZW50ZWRDb25maWcsXG4gICAgTGF5b3V0T3JpZW50ZWRDb25maWdcbn0gZnJvbSAnLi4vLi4vaW50ZXJmYWNlcy9jb250ZW50LW1ldGFkYXRhLmludGVyZmFjZXMnO1xuXG5ASW5qZWN0YWJsZSh7XG4gICAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIENvbnRlbnRNZXRhZGF0YUNvbmZpZ0ZhY3Rvcnkge1xuXG4gICAgc3RhdGljIHJlYWRvbmx5IElORElGRkVSRU5UX1BSRVNFVCA9ICcqJztcbiAgICBzdGF0aWMgcmVhZG9ubHkgREVGQVVMVF9QUkVTRVRfTkFNRSA9ICdkZWZhdWx0JztcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgYXBwQ29uZmlnU2VydmljZTogQXBwQ29uZmlnU2VydmljZSwgcHJpdmF0ZSBsb2dTZXJ2aWNlOiBMb2dTZXJ2aWNlKSB7fVxuXG4gICAgcHVibGljIGdldChwcmVzZXROYW1lOiBzdHJpbmcgPSAnZGVmYXVsdCcpOiBDb250ZW50TWV0YWRhdGFDb25maWcge1xuICAgICAgICBsZXQgcHJlc2V0Q29uZmlnOiBQcmVzZXRDb25maWc7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBwcmVzZXRDb25maWcgPSB0aGlzLmFwcENvbmZpZ1NlcnZpY2UuY29uZmlnWydjb250ZW50LW1ldGFkYXRhJ10ucHJlc2V0c1twcmVzZXROYW1lXTtcbiAgICAgICAgfSBjYXRjaCB7XG4gICAgICAgICAgICBpZiAocHJlc2V0TmFtZSAhPT0gQ29udGVudE1ldGFkYXRhQ29uZmlnRmFjdG9yeS5ERUZBVUxUX1BSRVNFVF9OQU1FKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5sb2dTZXJ2aWNlLmVycm9yKGBObyBjb250ZW50LW1ldGFkYXRhIHByZXNldCBmb3I6ICR7cHJlc2V0TmFtZX1gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHByZXNldENvbmZpZyA9IENvbnRlbnRNZXRhZGF0YUNvbmZpZ0ZhY3RvcnkuSU5ESUZGRVJFTlRfUFJFU0VUO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlQ29uZmlnKHByZXNldENvbmZpZyk7XG4gICAgfVxuXG4gICAgcHVibGljIGNyZWF0ZUNvbmZpZyhwcmVzZXRDb25maWc6IFByZXNldENvbmZpZyk6IENvbnRlbnRNZXRhZGF0YUNvbmZpZyB7XG4gICAgICAgIGxldCBjb25maWc6IENvbnRlbnRNZXRhZGF0YUNvbmZpZztcblxuICAgICAgICBpZiAodGhpcy5pc0xheW91dE9yaWVudGVkUHJlc2V0KHByZXNldENvbmZpZykpIHtcbiAgICAgICAgICAgIGNvbmZpZyA9IG5ldyBMYXlvdXRPcmllbnRlZENvbmZpZ1NlcnZpY2UoPExheW91dE9yaWVudGVkQ29uZmlnPiBwcmVzZXRDb25maWcpO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuaXNBc3BlY3RPcmllbnRlZFByZXNldChwcmVzZXRDb25maWcpKSB7XG4gICAgICAgICAgICBjb25maWcgPSBuZXcgQXNwZWN0T3JpZW50ZWRDb25maWdTZXJ2aWNlKDxBc3BlY3RPcmllbnRlZENvbmZpZz4gcHJlc2V0Q29uZmlnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbmZpZyA9IG5ldyBJbmRpZmZlcmVudENvbmZpZ1NlcnZpY2UoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIE9iamVjdC5mcmVlemUoY29uZmlnKTtcbiAgICAgICAgcmV0dXJuIGNvbmZpZztcbiAgICB9XG5cbiAgICBwcml2YXRlIGlzQXNwZWN0T3JpZW50ZWRQcmVzZXQocHJlc2V0Q29uZmlnOiBQcmVzZXRDb25maWcpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNPYmplY3QocHJlc2V0Q29uZmlnKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGlzTGF5b3V0T3JpZW50ZWRQcmVzZXQocHJlc2V0Q29uZmlnOiBQcmVzZXRDb25maWcpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIEFycmF5LmlzQXJyYXkocHJlc2V0Q29uZmlnKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGlzT2JqZWN0KHg6IGFueSk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4geCAhPSBudWxsICYmIHR5cGVvZiB4ID09PSAnb2JqZWN0JztcbiAgICB9XG59XG4iXX0=