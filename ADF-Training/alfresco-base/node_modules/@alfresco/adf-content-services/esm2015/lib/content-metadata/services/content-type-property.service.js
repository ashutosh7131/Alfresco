import { Injectable } from '@angular/core';
import { MatDialog } from '@angular/material/dialog';
import { CardViewSelectItemModel, CardViewTextItemModel, VersionCompatibilityService } from '@alfresco/adf-core';
import { of, Subject, zip } from 'rxjs';
import { distinctUntilChanged, map } from 'rxjs/operators';
import { ContentTypeDialogComponent } from '../../content-type/content-type-dialog.component';
import { ContentTypeService } from '../../content-type/content-type.service';
import { PropertyGroupTranslatorService } from './property-groups-translator.service';
import * as i0 from "@angular/core";
import * as i1 from "../../content-type/content-type.service";
import * as i2 from "@angular/material/dialog";
import * as i3 from "@alfresco/adf-core";
import * as i4 from "./property-groups-translator.service";
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../../content-type/content-type.service';
import * as ɵngcc2 from '@angular/material/dialog';
import * as ɵngcc3 from '@alfresco/adf-core';
import * as ɵngcc4 from './property-groups-translator.service';
export class ContentTypePropertiesService {
    constructor(contentTypeService, dialog, versionCompatibilityService, propertyGroupTranslatorService) {
        this.contentTypeService = contentTypeService;
        this.dialog = dialog;
        this.versionCompatibilityService = versionCompatibilityService;
        this.propertyGroupTranslatorService = propertyGroupTranslatorService;
    }
    getContentTypeCardItem(node) {
        if (this.versionCompatibilityService.isVersionSupported('7')) {
            return this.contentTypeService.getContentTypeByPrefix(node.nodeType).
                pipe(map((contentType) => {
                const contentTypesOptions$ = this.getContentTypesAsSelectOption(contentType);
                const contentTypeCard = this.buildContentTypeSelectCardModel(contentType.entry.id, contentTypesOptions$);
                const filteredProperties = this.getContentTypeSpecificProperties(contentType);
                const propertiesCard = this.buildCardItemsFromPropertyList(filteredProperties, node.properties);
                return [contentTypeCard, ...propertiesCard];
            }));
        }
        else {
            return of([this.buildContentTypeTextCardModel(node.nodeType)]);
        }
    }
    buildCardItemsFromPropertyList(properties, currentProperties) {
        return properties.map((property) => {
            const propertyValue = currentProperties ? currentProperties[property.id] : null;
            return this.buildCardItemFromProperty(property, propertyValue);
        });
    }
    buildCardItemFromProperty(property, propertyValue) {
        return this.propertyGroupTranslatorService.translateProperty(property, propertyValue, true);
    }
    getContentTypeSpecificProperties(contentType) {
        return contentType.entry.properties.filter((property) => property.id.startsWith(contentType.entry.model.namespacePrefix));
    }
    buildContentTypeTextCardModel(currentValue) {
        const contentTypeCard = new CardViewTextItemModel({
            label: 'CORE.METADATA.BASIC.CONTENT_TYPE',
            value: currentValue,
            key: 'nodeType',
            editable: false
        });
        return contentTypeCard;
    }
    buildContentTypeSelectCardModel(currentValue, options$) {
        const contentTypeCard = new CardViewSelectItemModel({
            label: 'CORE.METADATA.BASIC.CONTENT_TYPE',
            value: currentValue,
            key: 'nodeType',
            editable: true,
            options$: options$,
            displayNoneOption: false
        });
        return contentTypeCard;
    }
    getContentTypesAsSelectOption(currentType) {
        const childrenTypes$ = this.contentTypeService.getContentTypeChildren(currentType.entry.id);
        return zip(childrenTypes$, of(currentType)).pipe(distinctUntilChanged(), map(([contentTypesEntries, currentContentType]) => {
            const updatedTypes = this.appendCurrentType(currentContentType, contentTypesEntries);
            return updatedTypes.map((contentType) => { var _a; return ({ key: contentType.entry.id, label: (_a = contentType.entry.title) !== null && _a !== void 0 ? _a : contentType.entry.id }); });
        }));
    }
    appendCurrentType(currentType, contentTypesEntries) {
        const resultTypes = [...contentTypesEntries];
        const currentTypePresent = contentTypesEntries.find((type) => type.entry.id === currentType.entry.id);
        if (!currentTypePresent) {
            resultTypes.push(currentType);
        }
        return resultTypes;
    }
    openContentTypeDialogConfirm(nodeType) {
        const select = new Subject();
        select.subscribe({
            complete: this.close.bind(this)
        });
        const data = {
            title: 'CORE.METADATA.CONTENT_TYPE.DIALOG.TITLE',
            description: 'CORE.METADATA.CONTENT_TYPE.DIALOG.DESCRIPTION',
            confirmMessage: 'CORE.METADATA.CONTENT_TYPE.DIALOG.CONFIRM',
            select: select,
            nodeType
        };
        this.openDialog(data, 'adf-content-type-dialog', '600px');
        return select;
    }
    close() {
        this.dialog.closeAll();
    }
    openDialog(data, panelClass, width) {
        this.dialog.open(ContentTypeDialogComponent, {
            data,
            panelClass,
            width,
            disableClose: true
        });
    }
}
ContentTypePropertiesService.ɵfac = function ContentTypePropertiesService_Factory(t) { return new (t || ContentTypePropertiesService)(ɵngcc0.ɵɵinject(ɵngcc1.ContentTypeService), ɵngcc0.ɵɵinject(ɵngcc2.MatDialog), ɵngcc0.ɵɵinject(ɵngcc3.VersionCompatibilityService), ɵngcc0.ɵɵinject(ɵngcc4.PropertyGroupTranslatorService)); };
ContentTypePropertiesService.ɵprov = i0.ɵɵdefineInjectable({ factory: function ContentTypePropertiesService_Factory() { return new ContentTypePropertiesService(i0.ɵɵinject(i1.ContentTypeService), i0.ɵɵinject(i2.MatDialog), i0.ɵɵinject(i3.VersionCompatibilityService), i0.ɵɵinject(i4.PropertyGroupTranslatorService)); }, token: ContentTypePropertiesService, providedIn: "root" });
ContentTypePropertiesService.ctorParameters = () => [
    { type: ContentTypeService },
    { type: MatDialog },
    { type: VersionCompatibilityService },
    { type: PropertyGroupTranslatorService }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ContentTypePropertiesService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc1.ContentTypeService }, { type: ɵngcc2.MatDialog }, { type: ɵngcc3.VersionCompatibilityService }, { type: ɵngcc4.PropertyGroupTranslatorService }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,