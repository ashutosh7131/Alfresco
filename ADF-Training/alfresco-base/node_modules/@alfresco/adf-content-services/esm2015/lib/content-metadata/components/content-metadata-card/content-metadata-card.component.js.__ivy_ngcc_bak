/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, Input, ViewEncapsulation } from '@angular/core';
import { Node } from '@alfresco/js-api';
import { ContentService, AllowableOperationsEnum, VersionCompatibilityService } from '@alfresco/adf-core';
import { NodeAspectService } from '../../../aspect-list/node-aspect.service';
export class ContentMetadataCardComponent {
    constructor(contentService, nodeAspectService, versionCompatibilityService) {
        this.contentService = contentService;
        this.nodeAspectService = nodeAspectService;
        this.versionCompatibilityService = versionCompatibilityService;
        this.displayEmpty = false;
        this.displayAspect = null;
        this.readOnly = false;
        this.multi = false;
        this._displayDefaultProperties = true;
        this.editable = false;
        this.editAspectSupported = false;
        this.editAspectSupported = this.versionCompatibilityService.isVersionSupported('7');
    }
    set displayDefaultProperties(value) {
        this._displayDefaultProperties = value;
        this.onDisplayDefaultPropertiesChange();
    }
    get displayDefaultProperties() {
        return this._displayDefaultProperties;
    }
    ngOnChanges(changes) {
        if (changes.displayAspect && changes.displayAspect.currentValue) {
            this.expanded = true;
        }
    }
    onDisplayDefaultPropertiesChange() {
        this.expanded = !this._displayDefaultProperties;
    }
    toggleEdit() {
        this.editable = !this.editable;
    }
    toggleExpanded() {
        this.expanded = !this.expanded;
    }
    hasAllowableOperations() {
        return this.contentService.hasAllowableOperations(this.node, AllowableOperationsEnum.UPDATE);
    }
    openAspectDialog() {
        this.nodeAspectService.updateNodeAspects(this.node.id);
    }
    isEditAspectSupported() {
        return !this.readOnly && this.hasAllowableOperations() && this.editAspectSupported;
    }
}
ContentMetadataCardComponent.decorators = [
    { type: Component, args: [{
                selector: 'adf-content-metadata-card',
                template: "<mat-card *ngIf=\"node\">\n    <mat-card-content>\n        <adf-content-metadata\n            [displayDefaultProperties]=\"displayDefaultProperties\"\n            [expanded]=\"expanded\"\n            [node]=\"node\"\n            [displayEmpty]=\"displayEmpty\"\n            [editable]=\"editable\"\n            [multi]=\"multi\"\n            [displayAspect]=\"displayAspect\"\n            [preset]=\"preset\">\n        </adf-content-metadata>\n    </mat-card-content>\n    <mat-card-footer class=\"adf-content-metadata-card-footer\" fxLayout=\"row\" fxLayoutAlign=\"space-between stretch\">\n        <div>\n            <button *ngIf=\"isEditAspectSupported()\"\n                mat-icon-button\n                (click)=\"openAspectDialog()\"\n                [attr.title]=\"'CORE.METADATA.ACTIONS.EDIT_ASPECTS' | translate\"\n                [attr.aria-label]=\"'CORE.METADATA.ACCESSIBILITY.EDIT_ASPECTS' | translate\"\n                data-automation-id=\"meta-data-card-edit-aspect\">\n                <mat-icon>menu</mat-icon>\n            </button>\n            <button *ngIf=\"!readOnly && hasAllowableOperations()\"\n                mat-icon-button\n                (click)=\"toggleEdit()\"\n                [attr.title]=\"'CORE.METADATA.ACTIONS.EDIT' | translate\"\n                [attr.aria-label]=\"'CORE.METADATA.ACCESSIBILITY.EDIT' | translate\"\n                data-automation-id=\"meta-data-card-toggle-edit\">\n                <mat-icon>mode_edit</mat-icon>\n            </button>\n        </div>\n        <button *ngIf=\"displayDefaultProperties\" mat-button (click)=\"toggleExpanded()\" data-automation-id=\"meta-data-card-toggle-expand\">\n            <ng-container *ngIf=\"!expanded\">\n                <span data-automation-id=\"meta-data-card-toggle-expand-label\">{{ 'ADF_VIEWER.SIDEBAR.METADATA.MORE_INFORMATION' | translate }}</span>\n                <mat-icon>keyboard_arrow_down</mat-icon>\n            </ng-container>\n            <ng-container *ngIf=\"expanded\">\n                <span data-automation-id=\"meta-data-card-toggle-expand-label\">{{ 'ADF_VIEWER.SIDEBAR.METADATA.LESS_INFORMATION' | translate }}</span>\n                <mat-icon>keyboard_arrow_up</mat-icon>\n            </ng-container>\n        </button>\n    </mat-card-footer>\n</mat-card>\n",
                encapsulation: ViewEncapsulation.None,
                host: { 'class': 'adf-content-metadata-card' },
                styles: [".adf-content-metadata-card .mat-card{padding:0}.adf-content-metadata-card .mat-card .mat-card-content{margin-bottom:0}.adf-content-metadata-card-footer.mat-card-footer{border-top:1px solid var(--theme-border-color);margin:0;padding:8px 12px}.adf-content-metadata-card-footer.mat-card-footer button{color:var(--theme-text-color)}.adf-content-metadata-card-footer.mat-card-footer button:hover{color:var(--theme-text-bold-color)}"]
            },] }
];
ContentMetadataCardComponent.ctorParameters = () => [
    { type: ContentService },
    { type: NodeAspectService },
    { type: VersionCompatibilityService }
];
ContentMetadataCardComponent.propDecorators = {
    node: [{ type: Input }],
    displayEmpty: [{ type: Input }],
    displayAspect: [{ type: Input }],
    preset: [{ type: Input }],
    readOnly: [{ type: Input }],
    multi: [{ type: Input }],
    displayDefaultProperties: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udGVudC1tZXRhZGF0YS1jYXJkLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIvaG9tZS90cmF2aXMvYnVpbGQvQWxmcmVzY28vYWxmcmVzY28tbmcyLWNvbXBvbmVudHMvbGliL2NvbnRlbnQtc2VydmljZXMvc3JjLyIsInNvdXJjZXMiOlsibGliL2NvbnRlbnQtbWV0YWRhdGEvY29tcG9uZW50cy9jb250ZW50LW1ldGFkYXRhLWNhcmQvY29udGVudC1tZXRhZGF0YS1jYXJkLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7O0dBZUc7QUFFSCxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBNEIsaUJBQWlCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDOUYsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQ3hDLE9BQU8sRUFBRSxjQUFjLEVBQUUsdUJBQXVCLEVBQUUsMkJBQTJCLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUMxRyxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSwwQ0FBMEMsQ0FBQztBQVM3RSxNQUFNLE9BQU8sNEJBQTRCO0lBeURyQyxZQUFvQixjQUE4QixFQUFVLGlCQUFvQyxFQUFVLDJCQUF3RDtRQUE5SSxtQkFBYyxHQUFkLGNBQWMsQ0FBZ0I7UUFBVSxzQkFBaUIsR0FBakIsaUJBQWlCLENBQW1CO1FBQVUsZ0NBQTJCLEdBQTNCLDJCQUEyQixDQUE2QjtRQS9DbEssaUJBQVksR0FBWSxLQUFLLENBQUM7UUFNOUIsa0JBQWEsR0FBVyxJQUFJLENBQUM7UUFZN0IsYUFBUSxHQUFHLEtBQUssQ0FBQztRQU1qQixVQUFLLEdBQUcsS0FBSyxDQUFDO1FBRU4sOEJBQXlCLEdBQVksSUFBSSxDQUFDO1FBZWxELGFBQVEsR0FBWSxLQUFLLENBQUM7UUFJMUIsd0JBQW1CLEdBQUcsS0FBSyxDQUFDO1FBR3hCLElBQUksQ0FBQyxtQkFBbUIsR0FBRyxJQUFJLENBQUMsMkJBQTJCLENBQUMsa0JBQWtCLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDeEYsQ0FBQztJQWxCRCxJQUNJLHdCQUF3QixDQUFDLEtBQWM7UUFDdkMsSUFBSSxDQUFDLHlCQUF5QixHQUFHLEtBQUssQ0FBQztRQUN2QyxJQUFJLENBQUMsZ0NBQWdDLEVBQUUsQ0FBQztJQUM1QyxDQUFDO0lBRUQsSUFBSSx3QkFBd0I7UUFDeEIsT0FBTyxJQUFJLENBQUMseUJBQXlCLENBQUM7SUFDMUMsQ0FBQztJQVlELFdBQVcsQ0FBQyxPQUFzQjtRQUM5QixJQUFJLE9BQU8sQ0FBQyxhQUFhLElBQUksT0FBTyxDQUFDLGFBQWEsQ0FBQyxZQUFZLEVBQUU7WUFDN0QsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUM7U0FDeEI7SUFDTCxDQUFDO0lBRUQsZ0NBQWdDO1FBQzVCLElBQUksQ0FBQyxRQUFRLEdBQUcsQ0FBQyxJQUFJLENBQUMseUJBQXlCLENBQUM7SUFDcEQsQ0FBQztJQUVELFVBQVU7UUFDTixJQUFJLENBQUMsUUFBUSxHQUFHLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQztJQUNuQyxDQUFDO0lBRUQsY0FBYztRQUNWLElBQUksQ0FBQyxRQUFRLEdBQUcsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDO0lBQ25DLENBQUM7SUFFRCxzQkFBc0I7UUFDbEIsT0FBTyxJQUFJLENBQUMsY0FBYyxDQUFDLHNCQUFzQixDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsdUJBQXVCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDakcsQ0FBQztJQUVELGdCQUFnQjtRQUNaLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQzNELENBQUM7SUFFRCxxQkFBcUI7UUFDakIsT0FBTyxDQUFDLElBQUksQ0FBQyxRQUFRLElBQUksSUFBSSxDQUFDLHNCQUFzQixFQUFFLElBQUksSUFBSSxDQUFDLG1CQUFtQixDQUFDO0lBQ3ZGLENBQUM7OztZQWhHSixTQUFTLFNBQUM7Z0JBQ1AsUUFBUSxFQUFFLDJCQUEyQjtnQkFDckMsNHZFQUFxRDtnQkFFckQsYUFBYSxFQUFFLGlCQUFpQixDQUFDLElBQUk7Z0JBQ3JDLElBQUksRUFBRSxFQUFFLE9BQU8sRUFBRSwyQkFBMkIsRUFBRTs7YUFDakQ7OztZQVRRLGNBQWM7WUFDZCxpQkFBaUI7WUFEd0IsMkJBQTJCOzs7bUJBYXhFLEtBQUs7MkJBTUwsS0FBSzs0QkFNTCxLQUFLO3FCQU1MLEtBQUs7dUJBTUwsS0FBSztvQkFNTCxLQUFLO3VDQVFMLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBDb21wb25lbnQsIElucHV0LCBPbkNoYW5nZXMsIFNpbXBsZUNoYW5nZXMsIFZpZXdFbmNhcHN1bGF0aW9uIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBOb2RlIH0gZnJvbSAnQGFsZnJlc2NvL2pzLWFwaSc7XG5pbXBvcnQgeyBDb250ZW50U2VydmljZSwgQWxsb3dhYmxlT3BlcmF0aW9uc0VudW0sIFZlcnNpb25Db21wYXRpYmlsaXR5U2VydmljZSB9IGZyb20gJ0BhbGZyZXNjby9hZGYtY29yZSc7XG5pbXBvcnQgeyBOb2RlQXNwZWN0U2VydmljZSB9IGZyb20gJy4uLy4uLy4uL2FzcGVjdC1saXN0L25vZGUtYXNwZWN0LnNlcnZpY2UnO1xuaW1wb3J0IHsgUHJlc2V0Q29uZmlnIH0gZnJvbSAnLi4vLi4vaW50ZXJmYWNlcy9jb250ZW50LW1ldGFkYXRhLmludGVyZmFjZXMnO1xuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICdhZGYtY29udGVudC1tZXRhZGF0YS1jYXJkJyxcbiAgICB0ZW1wbGF0ZVVybDogJy4vY29udGVudC1tZXRhZGF0YS1jYXJkLmNvbXBvbmVudC5odG1sJyxcbiAgICBzdHlsZVVybHM6IFsnLi9jb250ZW50LW1ldGFkYXRhLWNhcmQuY29tcG9uZW50LnNjc3MnXSxcbiAgICBlbmNhcHN1bGF0aW9uOiBWaWV3RW5jYXBzdWxhdGlvbi5Ob25lLFxuICAgIGhvc3Q6IHsgJ2NsYXNzJzogJ2FkZi1jb250ZW50LW1ldGFkYXRhLWNhcmQnIH1cbn0pXG5leHBvcnQgY2xhc3MgQ29udGVudE1ldGFkYXRhQ2FyZENvbXBvbmVudCBpbXBsZW1lbnRzIE9uQ2hhbmdlcyB7XG5cbiAgICAvKiogKHJlcXVpcmVkKSBUaGUgbm9kZSBlbnRpdHkgdG8gZmV0Y2ggbWV0YWRhdGEgYWJvdXQgKi9cbiAgICBASW5wdXQoKVxuICAgIG5vZGU6IE5vZGU7XG5cbiAgICAvKiogKG9wdGlvbmFsKSBUaGlzIGZsYWcgZGlzcGxheXMvaGlkZXMgZW1wdHkgbWV0YWRhdGFcbiAgICAgKiBmaWVsZHMuXG4gICAgICovXG4gICAgQElucHV0KClcbiAgICBkaXNwbGF5RW1wdHk6IGJvb2xlYW4gPSBmYWxzZTtcblxuICAgIC8qKiAob3B0aW9uYWwpIFRoaXMgZmxhZyBkaXNwbGF5cyBkZXNpcmVkIGFzcGVjdCB3aGVuIG9wZW4gZm9yIHRoZSBmaXJzdCB0aW1lXG4gICAgICogZmllbGRzLlxuICAgICAqL1xuICAgIEBJbnB1dCgpXG4gICAgZGlzcGxheUFzcGVjdDogc3RyaW5nID0gbnVsbDtcblxuICAgIC8qKiAocmVxdWlyZWQpIE5hbWUgb3IgY29uZmlndXJhdGlvbiBvZiB0aGUgbWV0YWRhdGEgcHJlc2V0LCB3aGljaCBkZWZpbmVzIGFzcGVjdHNcbiAgICAgKiBhbmQgdGhlaXIgcHJvcGVydGllcy5cbiAgICAgKi9cbiAgICBASW5wdXQoKVxuICAgIHByZXNldDogc3RyaW5nIHwgUHJlc2V0Q29uZmlnO1xuXG4gICAgLyoqIChvcHRpb25hbCkgVGhpcyBmbGFnIHNldHMgdGhlIG1ldGFkYXRhIGluIHJlYWQgb25seSBtb2RlXG4gICAgICogcHJldmVudGluZyBjaGFuZ2VzLlxuICAgICAqL1xuICAgIEBJbnB1dCgpXG4gICAgcmVhZE9ubHkgPSBmYWxzZTtcblxuICAgIC8qKiAob3B0aW9uYWwpIFRoaXMgZmxhZyBhbGxvd3MgdGhlIGNvbXBvbmVudCB0byBkaXNwbGF5IG1vcmVcbiAgICAgKiB0aGFuIG9uZSBhY2NvcmRpb24gYXQgYSB0aW1lLlxuICAgICAqL1xuICAgIEBJbnB1dCgpXG4gICAgbXVsdGkgPSBmYWxzZTtcblxuICAgIHByaXZhdGUgX2Rpc3BsYXlEZWZhdWx0UHJvcGVydGllczogYm9vbGVhbiA9IHRydWU7XG5cbiAgICAvKiogKG9wdGlvbmFsKSBUaGlzIGZsYWcgZGlzcGxheXMvaGlkZXMgdGhlIG1ldGFkYXRhXG4gICAgICogcHJvcGVydGllcy5cbiAgICAgKi9cbiAgICBASW5wdXQoKVxuICAgIHNldCBkaXNwbGF5RGVmYXVsdFByb3BlcnRpZXModmFsdWU6IGJvb2xlYW4pIHtcbiAgICAgICAgdGhpcy5fZGlzcGxheURlZmF1bHRQcm9wZXJ0aWVzID0gdmFsdWU7XG4gICAgICAgIHRoaXMub25EaXNwbGF5RGVmYXVsdFByb3BlcnRpZXNDaGFuZ2UoKTtcbiAgICB9XG5cbiAgICBnZXQgZGlzcGxheURlZmF1bHRQcm9wZXJ0aWVzKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5fZGlzcGxheURlZmF1bHRQcm9wZXJ0aWVzO1xuICAgIH1cblxuICAgIGVkaXRhYmxlOiBib29sZWFuID0gZmFsc2U7XG5cbiAgICBleHBhbmRlZDogYm9vbGVhbjtcblxuICAgIGVkaXRBc3BlY3RTdXBwb3J0ZWQgPSBmYWxzZTtcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgY29udGVudFNlcnZpY2U6IENvbnRlbnRTZXJ2aWNlLCBwcml2YXRlIG5vZGVBc3BlY3RTZXJ2aWNlOiBOb2RlQXNwZWN0U2VydmljZSwgcHJpdmF0ZSB2ZXJzaW9uQ29tcGF0aWJpbGl0eVNlcnZpY2U6IFZlcnNpb25Db21wYXRpYmlsaXR5U2VydmljZSkge1xuICAgICAgICB0aGlzLmVkaXRBc3BlY3RTdXBwb3J0ZWQgPSB0aGlzLnZlcnNpb25Db21wYXRpYmlsaXR5U2VydmljZS5pc1ZlcnNpb25TdXBwb3J0ZWQoJzcnKTtcbiAgICB9XG5cbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZCB7XG4gICAgICAgIGlmIChjaGFuZ2VzLmRpc3BsYXlBc3BlY3QgJiYgY2hhbmdlcy5kaXNwbGF5QXNwZWN0LmN1cnJlbnRWYWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5leHBhbmRlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBvbkRpc3BsYXlEZWZhdWx0UHJvcGVydGllc0NoYW5nZSgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5leHBhbmRlZCA9ICF0aGlzLl9kaXNwbGF5RGVmYXVsdFByb3BlcnRpZXM7XG4gICAgfVxuXG4gICAgdG9nZ2xlRWRpdCgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5lZGl0YWJsZSA9ICF0aGlzLmVkaXRhYmxlO1xuICAgIH1cblxuICAgIHRvZ2dsZUV4cGFuZGVkKCk6IHZvaWQge1xuICAgICAgICB0aGlzLmV4cGFuZGVkID0gIXRoaXMuZXhwYW5kZWQ7XG4gICAgfVxuXG4gICAgaGFzQWxsb3dhYmxlT3BlcmF0aW9ucygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29udGVudFNlcnZpY2UuaGFzQWxsb3dhYmxlT3BlcmF0aW9ucyh0aGlzLm5vZGUsIEFsbG93YWJsZU9wZXJhdGlvbnNFbnVtLlVQREFURSk7XG4gICAgfVxuXG4gICAgb3BlbkFzcGVjdERpYWxvZygpIHtcbiAgICAgICAgdGhpcy5ub2RlQXNwZWN0U2VydmljZS51cGRhdGVOb2RlQXNwZWN0cyh0aGlzLm5vZGUuaWQpO1xuICAgIH1cblxuICAgIGlzRWRpdEFzcGVjdFN1cHBvcnRlZCgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuICF0aGlzLnJlYWRPbmx5ICYmIHRoaXMuaGFzQWxsb3dhYmxlT3BlcmF0aW9ucygpICYmIHRoaXMuZWRpdEFzcGVjdFN1cHBvcnRlZDtcbiAgICB9XG59XG4iXX0=