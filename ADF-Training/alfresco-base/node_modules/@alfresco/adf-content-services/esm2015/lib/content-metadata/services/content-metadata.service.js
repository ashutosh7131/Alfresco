import { Injectable } from '@angular/core';
import { BasicPropertiesService } from './basic-properties.service';
import { of, iif, Subject } from 'rxjs';
import { PropertyGroupTranslatorService } from './property-groups-translator.service';
import { ContentMetadataConfigFactory } from './config/content-metadata-config.factory';
import { PropertyDescriptorsService } from './property-descriptors.service';
import { map, switchMap } from 'rxjs/operators';
import { ContentTypePropertiesService } from './content-type-property.service';
import * as i0 from "@angular/core";
import * as i1 from "./basic-properties.service";
import * as i2 from "./config/content-metadata-config.factory";
import * as i3 from "./property-groups-translator.service";
import * as i4 from "./property-descriptors.service";
import * as i5 from "./content-type-property.service";
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './basic-properties.service';
import * as ɵngcc2 from './config/content-metadata-config.factory';
import * as ɵngcc3 from './property-groups-translator.service';
import * as ɵngcc4 from './property-descriptors.service';
import * as ɵngcc5 from './content-type-property.service';
export class ContentMetadataService {
    constructor(basicPropertiesService, contentMetadataConfigFactory, propertyGroupTranslatorService, propertyDescriptorsService, contentTypePropertyService) {
        this.basicPropertiesService = basicPropertiesService;
        this.contentMetadataConfigFactory = contentMetadataConfigFactory;
        this.propertyGroupTranslatorService = propertyGroupTranslatorService;
        this.propertyDescriptorsService = propertyDescriptorsService;
        this.contentTypePropertyService = contentTypePropertyService;
        this.error = new Subject();
    }
    getBasicProperties(node) {
        return of(this.basicPropertiesService.getProperties(node));
    }
    getContentTypeProperty(node) {
        return this.contentTypePropertyService.getContentTypeCardItem(node);
    }
    openConfirmDialog(changedProperties) {
        return this.contentTypePropertyService.openContentTypeDialogConfirm(changedProperties.nodeType);
    }
    getGroupedProperties(node, preset = 'default') {
        let groupedProperties = of([]);
        if (node.aspectNames) {
            let contentMetadataConfig;
            if (typeof preset === 'string') {
                contentMetadataConfig = this.contentMetadataConfigFactory.get(preset);
            }
            else {
                contentMetadataConfig = this.contentMetadataConfigFactory.createConfig(preset);
            }
            const groupNames = node.aspectNames
                .concat(node.nodeType)
                .filter((groupName) => contentMetadataConfig.isGroupAllowed(groupName));
            if (groupNames.length > 0) {
                groupedProperties = this.propertyDescriptorsService.load(groupNames).pipe(switchMap((groups) => iif(() => contentMetadataConfig.isIncludeAllEnabled(), of(contentMetadataConfig.appendAllPreset(groups).concat(contentMetadataConfig.reorganiseByConfig(groups))), of(contentMetadataConfig.reorganiseByConfig(groups)))), map((groups) => contentMetadataConfig.filterExcludedPreset(groups)), map((groups) => this.filterEmptyPreset(groups)), map((groups) => this.setTitleToNameIfNotSet(groups)), map((groups) => this.propertyGroupTranslatorService.translateToCardViewGroups(groups, node.properties, node.definition)));
            }
        }
        return groupedProperties;
    }
    setTitleToNameIfNotSet(propertyGroups) {
        propertyGroups.map((propertyGroup) => {
            propertyGroup.title = propertyGroup.title || propertyGroup.name;
        });
        return propertyGroups;
    }
    filterEmptyPreset(propertyGroups) {
        return propertyGroups.filter((props) => props.properties.length);
    }
}
ContentMetadataService.ɵfac = function ContentMetadataService_Factory(t) { return new (t || ContentMetadataService)(ɵngcc0.ɵɵinject(ɵngcc1.BasicPropertiesService), ɵngcc0.ɵɵinject(ɵngcc2.ContentMetadataConfigFactory), ɵngcc0.ɵɵinject(ɵngcc3.PropertyGroupTranslatorService), ɵngcc0.ɵɵinject(ɵngcc4.PropertyDescriptorsService), ɵngcc0.ɵɵinject(ɵngcc5.ContentTypePropertiesService)); };
ContentMetadataService.ɵprov = i0.ɵɵdefineInjectable({ factory: function ContentMetadataService_Factory() { return new ContentMetadataService(i0.ɵɵinject(i1.BasicPropertiesService), i0.ɵɵinject(i2.ContentMetadataConfigFactory), i0.ɵɵinject(i3.PropertyGroupTranslatorService), i0.ɵɵinject(i4.PropertyDescriptorsService), i0.ɵɵinject(i5.ContentTypePropertiesService)); }, token: ContentMetadataService, providedIn: "root" });
ContentMetadataService.ctorParameters = () => [
    { type: BasicPropertiesService },
    { type: ContentMetadataConfigFactory },
    { type: PropertyGroupTranslatorService },
    { type: PropertyDescriptorsService },
    { type: ContentTypePropertiesService }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ContentMetadataService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc1.BasicPropertiesService }, { type: ɵngcc2.ContentMetadataConfigFactory }, { type: ɵngcc3.PropertyGroupTranslatorService }, { type: ɵngcc4.PropertyDescriptorsService }, { type: ɵngcc5.ContentTypePropertiesService }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,