import { Injectable } from '@angular/core';
import { CardViewDateItemModel, CardViewTextItemModel, FileSizePipe } from '@alfresco/adf-core';
import * as i0 from "@angular/core";
import * as i1 from "@alfresco/adf-core";
export class BasicPropertiesService {
    constructor(fileSizePipe) {
        this.fileSizePipe = fileSizePipe;
    }
    getProperties(node) {
        const sizeInBytes = node.content ? node.content.sizeInBytes : '', mimeTypeName = node.content ? node.content.mimeTypeName : '', author = node.properties ? node.properties['cm:author'] : '', description = node.properties ? node.properties['cm:description'] : '', title = node.properties ? node.properties['cm:title'] : '';
        return [
            new CardViewTextItemModel({
                label: 'CORE.METADATA.BASIC.NAME',
                value: node.name,
                key: 'properties.cm:name',
                editable: true
            }),
            new CardViewTextItemModel({
                label: 'CORE.METADATA.BASIC.TITLE',
                value: title,
                key: 'properties.cm:title',
                editable: true
            }),
            new CardViewTextItemModel({
                label: 'CORE.METADATA.BASIC.CREATOR',
                value: node.createdByUser.displayName,
                key: 'createdByUser.displayName',
                editable: false
            }),
            new CardViewDateItemModel({
                label: 'CORE.METADATA.BASIC.CREATED_DATE',
                value: node.createdAt,
                key: 'createdAt',
                editable: false,
                format: 'mediumDate'
            }),
            new CardViewTextItemModel({
                label: 'CORE.METADATA.BASIC.SIZE',
                value: sizeInBytes,
                key: 'content.sizeInBytes',
                pipes: [{ pipe: this.fileSizePipe }],
                editable: false
            }),
            new CardViewTextItemModel({
                label: 'CORE.METADATA.BASIC.MODIFIER',
                value: node.modifiedByUser.displayName,
                key: 'modifiedByUser.displayName',
                editable: false
            }),
            new CardViewDateItemModel({
                label: 'CORE.METADATA.BASIC.MODIFIED_DATE',
                value: node.modifiedAt,
                key: 'modifiedAt',
                editable: false,
                format: 'mediumDate'
            }),
            new CardViewTextItemModel({
                label: 'CORE.METADATA.BASIC.MIMETYPE',
                value: mimeTypeName,
                key: 'content.mimeTypeName',
                editable: false
            }),
            new CardViewTextItemModel({
                label: 'CORE.METADATA.BASIC.AUTHOR',
                value: author,
                key: 'properties.cm:author',
                editable: true
            }),
            new CardViewTextItemModel({
                label: 'CORE.METADATA.BASIC.DESCRIPTION',
                value: description,
                key: 'properties.cm:description',
                multiline: true,
                editable: true
            })
        ];
    }
}
BasicPropertiesService.ɵprov = i0.ɵɵdefineInjectable({ factory: function BasicPropertiesService_Factory() { return new BasicPropertiesService(i0.ɵɵinject(i1.FileSizePipe)); }, token: BasicPropertiesService, providedIn: "root" });
BasicPropertiesService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
BasicPropertiesService.ctorParameters = () => [
    { type: FileSizePipe }
];
//# sourceMappingURL=data:application/json;base64,