/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, Input, ViewEncapsulation } from '@angular/core';
import { Node } from '@alfresco/js-api';
import { Subject, of, zip } from 'rxjs';
import { NodesApiService, LogService, CardViewUpdateService, AlfrescoApiService, TranslationService, AppConfigService } from '@alfresco/adf-core';
import { ContentMetadataService } from '../../services/content-metadata.service';
import { takeUntil, debounceTime, catchError, map } from 'rxjs/operators';
export class ContentMetadataComponent {
    constructor(contentMetadataService, cardViewUpdateService, nodesApiService, logService, alfrescoApiService, translationService, appConfig) {
        this.contentMetadataService = contentMetadataService;
        this.cardViewUpdateService = cardViewUpdateService;
        this.nodesApiService = nodesApiService;
        this.logService = logService;
        this.alfrescoApiService = alfrescoApiService;
        this.translationService = translationService;
        this.appConfig = appConfig;
        this.onDestroy$ = new Subject();
        this.editable = false;
        this.displayEmpty = false;
        this.expanded = false;
        this.multi = false;
        this.displayDefaultProperties = true;
        this.displayAspect = null;
        this.copyToClipboardAction = true;
        this.useChipsForMultiValueProperty = true;
        this.changedProperties = {};
        this.hasMetadataChanged = false;
        this.copyToClipboardAction = this.appConfig.get('content-metadata.copy-to-clipboard-action');
        this.multiValueSeparator = this.appConfig.get('content-metadata.multi-value-pipe-separator') || ContentMetadataComponent.DEFAULT_SEPARATOR;
        this.useChipsForMultiValueProperty = this.appConfig.get('content-metadata.multi-value-chips');
    }
    ngOnInit() {
        this.cardViewUpdateService.itemUpdated$
            .pipe(debounceTime(500), takeUntil(this.onDestroy$))
            .subscribe((updatedNode) => {
            this.hasMetadataChanged = true;
            this.targetProperty = updatedNode.target;
            this.updateChanges(updatedNode.changed);
        });
        this.cardViewUpdateService.updatedAspect$.pipe(debounceTime(500), takeUntil(this.onDestroy$))
            .subscribe((node) => this.loadProperties(node));
        this.loadProperties(this.node);
    }
    handleUpdateError(error) {
        this.logService.error(error);
        let statusCode = 0;
        try {
            statusCode = JSON.parse(error.message).error.statusCode;
        }
        catch (_a) {
        }
        let message = `METADATA.ERRORS.${statusCode}`;
        if (this.translationService.instant(message) === message) {
            message = 'METADATA.ERRORS.GENERIC';
        }
        this.contentMetadataService.error.next({
            statusCode,
            message
        });
    }
    ngOnChanges(changes) {
        if (changes.node && !changes.node.firstChange) {
            this.loadProperties(changes.node.currentValue);
        }
    }
    loadProperties(node) {
        if (node) {
            this.basicProperties$ = this.getProperties(node);
            this.groupedProperties$ = this.contentMetadataService.getGroupedProperties(node, this.preset);
        }
    }
    getProperties(node) {
        const properties$ = this.contentMetadataService.getBasicProperties(node);
        const contentTypeProperty$ = this.contentMetadataService.getContentTypeProperty(node);
        return zip(properties$, contentTypeProperty$)
            .pipe(map(([properties, contentTypeProperty]) => {
            const filteredProperties = contentTypeProperty.filter((property) => properties.findIndex((baseProperty) => baseProperty.key === property.key) === -1);
            return [...properties, ...filteredProperties];
        }));
    }
    updateChanges(updatedNodeChanges) {
        Object.keys(updatedNodeChanges).map((propertyGroup) => {
            if (typeof updatedNodeChanges[propertyGroup] === 'object') {
                this.changedProperties[propertyGroup] = Object.assign(Object.assign({}, this.changedProperties[propertyGroup]), updatedNodeChanges[propertyGroup]);
            }
            else {
                this.changedProperties[propertyGroup] = updatedNodeChanges[propertyGroup];
            }
        });
    }
    saveChanges() {
        if (this.hasContentTypeChanged(this.changedProperties)) {
            this.contentMetadataService.openConfirmDialog(this.changedProperties).subscribe(() => {
                this.updateNode();
            });
        }
        else {
            this.updateNode();
        }
    }
    updateNode() {
        this.nodesApiService.updateNode(this.node.id, this.changedProperties).pipe(catchError((err) => {
            this.cardViewUpdateService.updateElement(this.targetProperty);
            this.handleUpdateError(err);
            return of(null);
        }))
            .subscribe((updatedNode) => {
            if (updatedNode) {
                if (this.hasContentTypeChanged(this.changedProperties)) {
                    this.cardViewUpdateService.updateNodeAspect(this.node);
                }
                this.revertChanges();
                Object.assign(this.node, updatedNode);
                this.alfrescoApiService.nodeUpdated.next(this.node);
            }
        });
    }
    hasContentTypeChanged(changedProperties) {
        return !!(changedProperties === null || changedProperties === void 0 ? void 0 : changedProperties.nodeType);
    }
    revertChanges() {
        this.changedProperties = {};
        this.hasMetadataChanged = false;
    }
    cancelChanges() {
        this.revertChanges();
        this.loadProperties(this.node);
    }
    showGroup(group) {
        const properties = group.properties.filter((property) => {
            return !this.isEmpty(property.displayValue);
        });
        return properties.length > 0;
    }
    ngOnDestroy() {
        this.onDestroy$.next(true);
        this.onDestroy$.complete();
    }
    canExpandTheCard(group) {
        return group.title === this.displayAspect;
    }
    canExpandProperties() {
        return !this.expanded || this.displayAspect === 'Properties';
    }
    keyDown(event) {
        if (event.keyCode === 37 || event.keyCode === 39) {
            event.stopPropagation();
        }
    }
    isEmpty(value) {
        return value === undefined || value === null || value === '';
    }
}
ContentMetadataComponent.DEFAULT_SEPARATOR = ', ';
ContentMetadataComponent.decorators = [
    { type: Component, args: [{
                selector: 'adf-content-metadata',
                template: "<div class=\"adf-metadata-properties\">\n    <mat-accordion displayMode=\"flat\"\n                   [multi]=\"multi\">\n        <mat-expansion-panel *ngIf=\"displayDefaultProperties\"\n                             [expanded]=\"canExpandProperties()\"\n                             [attr.data-automation-id]=\"'adf-metadata-group-properties'\">\n            <mat-expansion-panel-header>\n                <mat-panel-title role=\"heading\">\n                    {{ 'CORE.METADATA.BASIC.HEADER' | translate }}\n                </mat-panel-title>\n            </mat-expansion-panel-header>\n            <adf-card-view\n                (keydown)=\"keyDown($event)\"\n                [properties]=\"basicProperties$ | async\"\n                [editable]=\"editable\"\n                [displayEmpty]=\"displayEmpty\"\n                [copyToClipboardAction]=\"copyToClipboardAction\"\n                [useChipsForMultiValueProperty]=\"useChipsForMultiValueProperty\"\n                [multiValueSeparator]=\"multiValueSeparator\">\n            </adf-card-view>\n        </mat-expansion-panel>\n\n        <ng-container *ngIf=\"expanded\">\n            <ng-container *ngIf=\"groupedProperties$ | async; else loading; let groupedProperties\">\n                <div *ngFor=\"let group of groupedProperties; let first = first;\"\n                     class=\"adf-metadata-grouped-properties-container\">\n                    <mat-expansion-panel *ngIf=\"showGroup(group) || editable\"\n                                         [attr.data-automation-id]=\"'adf-metadata-group-' + group.title\"\n                                         [expanded]=\"canExpandTheCard(group) || !displayDefaultProperties && first\">\n                        <mat-expansion-panel-header>\n                            <mat-panel-title>\n                                {{ group.title | translate }}\n                            </mat-panel-title>\n                        </mat-expansion-panel-header>\n\n                        <adf-card-view\n                            (keydown)=\"keyDown($event)\"\n                            [properties]=\"group.properties\"\n                            [editable]=\"editable\"\n                            [displayEmpty]=\"displayEmpty\"\n                            [copyToClipboardAction]=\"copyToClipboardAction\"\n                            [useChipsForMultiValueProperty]=\"useChipsForMultiValueProperty\"\n                            [multiValueSeparator]=\"multiValueSeparator\">\n                        </adf-card-view>\n                    </mat-expansion-panel>\n\n                </div>\n            </ng-container>\n            <ng-template #loading>\n                <mat-progress-bar mode=\"indeterminate\"></mat-progress-bar>\n            </ng-template>\n        </ng-container>\n    </mat-accordion>\n\n    <div class=\"adf-metadata-action-buttons\"\n         *ngIf=\"editable\">\n        <button mat-button\n                (click)=\"cancelChanges()\"\n                data-automation-id=\"reset-metadata\"\n                [disabled]=\"!hasMetadataChanged\">\n                {{ 'CORE.METADATA.ACTIONS.CANCEL' | translate }}\n        </button>\n        <button mat-raised-button\n                (click)=\"saveChanges()\"\n                color=\"primary\"\n                data-automation-id=\"save-metadata\"\n                [disabled]=\"!hasMetadataChanged\">\n                {{ 'CORE.METADATA.ACTIONS.SAVE' | translate }}\n            </button>\n    </div>\n\n</div>\n",
                host: { 'class': 'adf-content-metadata' },
                encapsulation: ViewEncapsulation.None,
                styles: [".adf-metadata-properties .mat-expansion-panel-header.mat-expanded:focus,.adf-metadata-properties .mat-expansion-panel-header.mat-expanded:hover{background:var(--theme-bg-hover-color)}.adf-metadata-properties mat-expansion-panel-header{height:64px}.adf-metadata-properties .mat-expansion-panel:not([class*=mat-elevation-z]){box-shadow:none}.adf-metadata-action-buttons{display:flex;justify-content:space-evenly;margin:10px}"]
            },] }
];
ContentMetadataComponent.ctorParameters = () => [
    { type: ContentMetadataService },
    { type: CardViewUpdateService },
    { type: NodesApiService },
    { type: LogService },
    { type: AlfrescoApiService },
    { type: TranslationService },
    { type: AppConfigService }
];
ContentMetadataComponent.propDecorators = {
    node: [{ type: Input }],
    editable: [{ type: Input }],
    displayEmpty: [{ type: Input }],
    expanded: [{ type: Input }],
    multi: [{ type: Input }],
    preset: [{ type: Input }],
    displayDefaultProperties: [{ type: Input }],
    displayAspect: [{ type: Input }],
    copyToClipboardAction: [{ type: Input }],
    useChipsForMultiValueProperty: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,