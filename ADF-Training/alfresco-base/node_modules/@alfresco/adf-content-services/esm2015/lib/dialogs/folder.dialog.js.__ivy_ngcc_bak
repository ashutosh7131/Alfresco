/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, Inject, Optional, EventEmitter, Output, ViewEncapsulation } from '@angular/core';
import { FormBuilder, Validators } from '@angular/forms';
import { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';
import { NodesApiService, TranslationService } from '@alfresco/adf-core';
import { forbidEndingDot, forbidOnlySpaces, forbidSpecialCharacters } from './folder-name.validators';
export class FolderDialogComponent {
    constructor(formBuilder, dialog, nodesApi, translation, data) {
        this.formBuilder = formBuilder;
        this.dialog = dialog;
        this.nodesApi = nodesApi;
        this.translation = translation;
        this.data = data;
        this.folder = null;
        this.error = new EventEmitter();
        this.success = new EventEmitter();
        this.editTitle = 'CORE.FOLDER_DIALOG.EDIT_FOLDER_TITLE';
        this.createTitle = 'CORE.FOLDER_DIALOG.CREATE_FOLDER_TITLE';
        this.nodeType = 'cm:folder';
        if (data) {
            this.editTitle = data.editTitle || this.editTitle;
            this.createTitle = data.createTitle || this.createTitle;
            this.nodeType = data.nodeType || this.nodeType;
        }
    }
    get editing() {
        return !!this.data.folder;
    }
    ngOnInit() {
        var _a, _b;
        const { folder } = this.data;
        let name = '';
        let title = '';
        let description = '';
        if (folder) {
            const { properties } = folder;
            name = folder.name || '';
            title = (_a = properties === null || properties === void 0 ? void 0 : properties['cm:title']) !== null && _a !== void 0 ? _a : '';
            description = (_b = properties === null || properties === void 0 ? void 0 : properties['cm:description']) !== null && _b !== void 0 ? _b : '';
        }
        const validators = {
            name: [
                Validators.required,
                forbidSpecialCharacters,
                forbidEndingDot,
                forbidOnlySpaces
            ]
        };
        this.form = this.formBuilder.group({
            name: [name, validators.name],
            title: [title],
            description: [description]
        });
    }
    get name() {
        const { name } = this.form.value;
        return (name || '').trim();
    }
    get title() {
        const { title } = this.form.value;
        return (title || '').trim();
    }
    get description() {
        const { description } = this.form.value;
        return (description || '').trim();
    }
    get properties() {
        const { title, description } = this;
        return {
            'cm:title': title,
            'cm:description': description
        };
    }
    create() {
        const { name, properties, nodeType, nodesApi, data: { parentNodeId } } = this;
        return nodesApi.createFolder(parentNodeId, { name, properties, nodeType });
    }
    edit() {
        const { name, properties, nodesApi, data: { folder: { id: nodeId } } } = this;
        return nodesApi.updateNode(nodeId, { name, properties });
    }
    submit() {
        const { form, dialog, editing } = this;
        if (!form.valid) {
            return;
        }
        (editing ? this.edit() : this.create())
            .subscribe((folder) => {
            this.success.emit(folder);
            dialog.close(folder);
        }, (error) => this.handleError(error));
    }
    handleError(error) {
        let errorMessage = 'CORE.MESSAGES.ERRORS.GENERIC';
        try {
            const { error: { statusCode } } = JSON.parse(error.message);
            if (statusCode === 409) {
                errorMessage = 'CORE.MESSAGES.ERRORS.EXISTENT_FOLDER';
            }
        }
        catch (err) { }
        this.error.emit(this.translation.instant(errorMessage));
        return error;
    }
}
FolderDialogComponent.decorators = [
    { type: Component, args: [{
                selector: 'adf-folder-dialog',
                template: "<h2 mat-dialog-title>\n    {{ (editing ? editTitle : createTitle) | translate }}\n</h2>\n\n<mat-dialog-content>\n    <form [formGroup]=\"form\" (submit)=\"submit()\">\n        <mat-form-field class=\"adf-full-width\">\n            <input\n                id=\"adf-folder-name-input\"\n                placeholder=\"{{ 'CORE.FOLDER_DIALOG.FOLDER_NAME.LABEL' | translate }}\"\n                matInput\n                required\n                [formControlName]=\"'name'\"\n            />\n\n            <mat-hint *ngIf=\"form.controls['name'].dirty\">\n                <span *ngIf=\"form.controls['name'].errors?.required\">\n                    {{ 'CORE.FOLDER_DIALOG.FOLDER_NAME.ERRORS.REQUIRED' | translate }}\n                </span>\n\n                <span *ngIf=\"!form.controls['name'].errors?.required && form.controls['name'].errors?.message\">\n                    {{ form.controls['name'].errors?.message | translate }}\n                </span>\n            </mat-hint>\n        </mat-form-field>\n\n        <mat-form-field class=\"adf-full-width\">\n            <input\n                id=\"adf-folder-title-input\"\n                matInput\n                placeholder=\"{{ 'CORE.FOLDER_DIALOG.FOLDER_TITLE.LABEL' | translate }}\"\n                [formControlName]=\"'title'\"\n            />\n        </mat-form-field>\n\n        <mat-form-field class=\"adf-full-width\">\n            <textarea\n                id=\"adf-folder-description-input\"\n                matInput\n                placeholder=\"{{ 'CORE.FOLDER_DIALOG.FOLDER_DESCRIPTION.LABEL' | translate }}\"\n                rows=\"4\"\n                [formControlName]=\"'description'\">\n            </textarea>\n        </mat-form-field>\n    </form>\n</mat-dialog-content>\n\n<mat-dialog-actions class=\"adf-dialog-buttons\">\n    <span class=\"adf-fill-remaining-space\"></span>\n\n    <button\n        mat-button\n        id=\"adf-folder-cancel-button\"\n        mat-dialog-close>\n        {{ 'CORE.FOLDER_DIALOG.CANCEL_BUTTON.LABEL' | translate }}\n    </button>\n\n    <button class=\"adf-dialog-action-button\"\n            id=\"adf-folder-create-button\"\n            mat-button\n            (click)=\"submit()\"\n            [disabled]=\"!form.valid\">\n        {{\n        (editing\n        ? 'CORE.FOLDER_DIALOG.UPDATE_BUTTON.LABEL'\n        : 'CORE.FOLDER_DIALOG.CREATE_BUTTON.LABEL'\n        ) | translate\n        }}\n    </button>\n</mat-dialog-actions>\n",
                encapsulation: ViewEncapsulation.None,
                styles: [".adf-fill-remaining-space{flex:1 1 auto}.adf-full-width,.adf-lock-file-name .mat-checkbox-layout{width:100%}.adf-lock-file-name .mat-checkbox-label{overflow:hidden;text-overflow:ellipsis}.adf-lock-file-name .mat-checkbox-inner-container{margin:auto 8px auto 0}.adf-dialog-buttons button{text-transform:uppercase}.adf-dialog-action-button:enabled{color:var(--theme-primary-color)}.adf-dialog-action-button:disabled>span{color:var(--theme-text-color)}"]
            },] }
];
FolderDialogComponent.ctorParameters = () => [
    { type: FormBuilder },
    { type: MatDialogRef },
    { type: NodesApiService },
    { type: TranslationService },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_DIALOG_DATA,] }] }
];
FolderDialogComponent.propDecorators = {
    error: [{ type: Output }],
    success: [{ type: Output }]
};
//# sourceMappingURL=data:application/json;base64,