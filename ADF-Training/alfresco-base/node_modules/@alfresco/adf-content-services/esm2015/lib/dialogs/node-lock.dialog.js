/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import moment from 'moment-es6';
import { Component, Inject, Optional, ViewEncapsulation } from '@angular/core';
import { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';
import { FormBuilder } from '@angular/forms';
import { NodeBodyLock, NodesApi } from '@alfresco/js-api';
import { AlfrescoApiService } from '@alfresco/adf-core';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/forms';
import * as ɵngcc2 from '@angular/material/dialog';
import * as ɵngcc3 from '@alfresco/adf-core';
import * as ɵngcc4 from '@angular/material/checkbox';
import * as ɵngcc5 from '@angular/material/tooltip';
import * as ɵngcc6 from '@angular/common';
import * as ɵngcc7 from '@angular/material/button';
import * as ɵngcc8 from '@angular/material/form-field';
import * as ɵngcc9 from '@mat-datetimepicker/core';
import * as ɵngcc10 from '@angular/material/input';
import * as ɵngcc11 from '@ngx-translate/core';

function NodeLockDialogComponent_div_12_mat_form_field_9_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-form-field");
    ɵngcc0.ɵɵelement(1, "mat-datetimepicker-toggle", 9);
    ɵngcc0.ɵɵelement(2, "mat-datetimepicker", 10, 11);
    ɵngcc0.ɵɵelement(4, "input", 12);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const _r2 = ɵngcc0.ɵɵreference(3);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("for", _r2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("openOnFocus", true)("timeInterval", 1);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("formControlName", "time")("matDatetimepicker", _r2);
} }
function NodeLockDialogComponent_div_12_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div");
    ɵngcc0.ɵɵelementStart(1, "mat-checkbox", 8);
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(4, "br");
    ɵngcc0.ɵɵelementStart(5, "mat-checkbox", 8);
    ɵngcc0.ɵɵtext(6);
    ɵngcc0.ɵɵpipe(7, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(8, "br");
    ɵngcc0.ɵɵtemplate(9, NodeLockDialogComponent_div_12_mat_form_field_9_Template, 5, 5, "mat-form-field", 3);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("formControlName", "allowOwner");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(3, 5, "CORE.FILE_DIALOG.ALLOW_OTHERS_CHECKBOX"), " ");
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("formControlName", "isTimeLock");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(7, 7, "CORE.FILE_DIALOG.TIME_LOCK_CHECKBOX"), " ");
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.form.value.isTimeLock);
} }
export class NodeLockDialogComponent {
    constructor(formBuilder, dialog, alfrescoApi, data) {
        this.formBuilder = formBuilder;
        this.dialog = dialog;
        this.alfrescoApi = alfrescoApi;
        this.data = data;
        this.node = null;
    }
    get nodesApi() {
        var _a;
        this._nodesApi = (_a = this._nodesApi) !== null && _a !== void 0 ? _a : new NodesApi(this.alfrescoApi.getInstance());
        return this._nodesApi;
    }
    ngOnInit() {
        const { node } = this.data;
        this.nodeName = node.name;
        this.form = this.formBuilder.group({
            isLocked: node.isLocked || false,
            allowOwner: node.properties['cm:lockType'] === 'WRITE_LOCK',
            isTimeLock: !!node.properties['cm:expiryDate'],
            time: !!node.properties['cm:expiryDate'] ? moment(node.properties['cm:expiryDate']) : moment()
        });
    }
    get lockTimeInSeconds() {
        if (this.form.value.isTimeLock) {
            const duration = moment.duration(moment(this.form.value.time).diff(moment()));
            return duration.asSeconds();
        }
        return 0;
    }
    get nodeBodyLock() {
        return new NodeBodyLock({
            'timeToExpire': this.lockTimeInSeconds,
            'type': this.form.value.allowOwner ? 'ALLOW_OWNER_CHANGES' : 'FULL',
            'lifetime': 'PERSISTENT'
        });
    }
    toggleLock() {
        const { data: { node } } = this;
        if (this.form.value.isLocked) {
            return this.nodesApi.lockNode(node.id, this.nodeBodyLock);
        }
        return this.nodesApi.unlockNode(node.id);
    }
    submit() {
        this.toggleLock()
            .then((node) => {
            this.data.node.isLocked = this.form.value.isLocked;
            this.dialog.close(node.entry);
        })
            .catch((error) => this.data.onError(error));
    }
}
NodeLockDialogComponent.ɵfac = function NodeLockDialogComponent_Factory(t) { return new (t || NodeLockDialogComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FormBuilder), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.MatDialogRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.AlfrescoApiService), ɵngcc0.ɵɵdirectiveInject(MAT_DIALOG_DATA, 8)); };
NodeLockDialogComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: NodeLockDialogComponent, selectors: [["adf-node-lock"]], decls: 22, vars: 17, consts: [["mat-dialog-title", ""], [3, "formGroup", "submit"], ["data-automation-id", "adf-lock-node-checkbox", "ngDefaultControl", "", 1, "adf-lock-file-name", 3, "matTooltip", "formControlName"], [4, "ngIf"], [1, "adf-dialog-buttons"], [1, "adf-fill-remaining-space"], ["mat-button", "", "mat-dialog-close", "", "data-automation-id", "lock-dialog-btn-cancel"], ["mat-button", "", 1, "adf-dialog-action-button", 3, "click"], ["ngDefaultControl", "", 1, "adf-lock-file-name", 3, "formControlName"], ["matSuffix", "", 3, "for"], ["type", "datetime", 3, "openOnFocus", "timeInterval"], ["datetimePicker", ""], ["matInput", "", "required", "", "autocomplete", "false", 3, "formControlName", "matDatetimepicker"]], template: function NodeLockDialogComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "h2", 0);
        ɵngcc0.ɵɵtext(1);
        ɵngcc0.ɵɵpipe(2, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(3, "mat-dialog-content");
        ɵngcc0.ɵɵelement(4, "br");
        ɵngcc0.ɵɵelementStart(5, "form", 1);
        ɵngcc0.ɵɵlistener("submit", function NodeLockDialogComponent_Template_form_submit_5_listener() { return ctx.submit(); });
        ɵngcc0.ɵɵelementStart(6, "mat-checkbox", 2);
        ɵngcc0.ɵɵtext(7);
        ɵngcc0.ɵɵpipe(8, "translate");
        ɵngcc0.ɵɵelementStart(9, "strong");
        ɵngcc0.ɵɵtext(10);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(11, "br");
        ɵngcc0.ɵɵtemplate(12, NodeLockDialogComponent_div_12_Template, 10, 9, "div", 3);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(13, "br");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(14, "mat-dialog-actions", 4);
        ɵngcc0.ɵɵelement(15, "span", 5);
        ɵngcc0.ɵɵelementStart(16, "button", 6);
        ɵngcc0.ɵɵtext(17);
        ɵngcc0.ɵɵpipe(18, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(19, "button", 7);
        ɵngcc0.ɵɵlistener("click", function NodeLockDialogComponent_Template_button_click_19_listener() { return ctx.submit(); });
        ɵngcc0.ɵɵtext(20);
        ɵngcc0.ɵɵpipe(21, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 9, "CORE.FILE_DIALOG.FILE_LOCK"), "\n");
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵproperty("formGroup", ctx.form);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵpropertyInterpolate("matTooltip", ctx.nodeName);
        ɵngcc0.ɵɵproperty("formControlName", "isLocked");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(8, 11, "CORE.FILE_DIALOG.FILE_LOCK_CHECKBOX"), " ");
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵtextInterpolate1("\"", ctx.nodeName, "\"");
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.form.value.isLocked);
        ɵngcc0.ɵɵadvance(5);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(18, 13, "CORE.FILE_DIALOG.CANCEL_BUTTON.LABEL"), " ");
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(21, 15, "CORE.FILE_DIALOG.SAVE_BUTTON.LABEL"), " ");
    } }, directives: [ɵngcc2.MatDialogTitle, ɵngcc2.MatDialogContent, ɵngcc1.ɵangular_packages_forms_forms_y, ɵngcc1.NgControlStatusGroup, ɵngcc1.FormGroupDirective, ɵngcc4.MatCheckbox, ɵngcc1.DefaultValueAccessor, ɵngcc5.MatTooltip, ɵngcc1.NgControlStatus, ɵngcc1.FormControlName, ɵngcc6.NgIf, ɵngcc2.MatDialogActions, ɵngcc7.MatButton, ɵngcc2.MatDialogClose, ɵngcc8.MatFormField, ɵngcc9.MatDatetimepickerToggle, ɵngcc8.MatSuffix, ɵngcc9.MatDatetimepicker, ɵngcc10.MatInput, ɵngcc9.MatDatetimepickerInput, ɵngcc1.RequiredValidator], pipes: [ɵngcc11.TranslatePipe], encapsulation: 2 });
NodeLockDialogComponent.ctorParameters = () => [
    { type: FormBuilder },
    { type: MatDialogRef },
    { type: AlfrescoApiService },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_DIALOG_DATA,] }] }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NodeLockDialogComponent, [{
        type: Component,
        args: [{
                selector: 'adf-node-lock',
                template: "<h2 mat-dialog-title>\n    {{ 'CORE.FILE_DIALOG.FILE_LOCK' | translate }}\n</h2>\n\n<mat-dialog-content>\n    <br />\n    <form [formGroup]=\"form\" (submit)=\"submit()\">\n        <mat-checkbox  data-automation-id=\"adf-lock-node-checkbox\" class=\"adf-lock-file-name\" matTooltip=\"{{ nodeName }}\" [formControlName]=\"'isLocked'\" ngDefaultControl>\n            {{ 'CORE.FILE_DIALOG.FILE_LOCK_CHECKBOX' | translate }} <strong>\"{{ nodeName }}\"</strong>\n        </mat-checkbox>\n\n        <br />\n\n        <div *ngIf=\"form.value.isLocked\">\n            <mat-checkbox class=\"adf-lock-file-name\" [formControlName]=\"'allowOwner'\" ngDefaultControl>\n                {{ 'CORE.FILE_DIALOG.ALLOW_OTHERS_CHECKBOX' | translate }}\n            </mat-checkbox>\n\n            <br />\n\n            <mat-checkbox class=\"adf-lock-file-name\" [formControlName]=\"'isTimeLock'\" ngDefaultControl>\n                {{ 'CORE.FILE_DIALOG.TIME_LOCK_CHECKBOX' | translate }}\n            </mat-checkbox>\n\n            <br />\n\n            <mat-form-field *ngIf=\"form.value.isTimeLock\">\n                <mat-datetimepicker-toggle [for]=\"datetimePicker\" matSuffix></mat-datetimepicker-toggle>\n                <mat-datetimepicker #datetimePicker type=\"datetime\" [openOnFocus]=\"true\" [timeInterval]=\"1\"></mat-datetimepicker>\n                <input matInput [formControlName]=\"'time'\" [matDatetimepicker]=\"datetimePicker\" required autocomplete=\"false\">\n            </mat-form-field>\n        </div>\n    </form>\n    <br />\n</mat-dialog-content>\n\n<mat-dialog-actions class=\"adf-dialog-buttons\">\n    <span class=\"adf-fill-remaining-space\"></span>\n\n    <button mat-button mat-dialog-close data-automation-id=\"lock-dialog-btn-cancel\">\n        {{ 'CORE.FILE_DIALOG.CANCEL_BUTTON.LABEL' | translate }}\n    </button>\n\n    <button class=\"adf-dialog-action-button\" mat-button (click)=\"submit()\">\n        {{ 'CORE.FILE_DIALOG.SAVE_BUTTON.LABEL' | translate }}\n    </button>\n</mat-dialog-actions>\n",
                encapsulation: ViewEncapsulation.None
            }]
    }], function () { return [{ type: ɵngcc1.FormBuilder }, { type: ɵngcc2.MatDialogRef }, { type: ɵngcc3.AlfrescoApiService }, { type: undefined, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [MAT_DIALOG_DATA]
            }] }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,