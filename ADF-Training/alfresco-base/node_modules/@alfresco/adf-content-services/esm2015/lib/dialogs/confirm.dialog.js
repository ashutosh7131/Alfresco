/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, Inject, ViewEncapsulation, SecurityContext } from '@angular/core';
import { MAT_DIALOG_DATA } from '@angular/material/dialog';
import { DomSanitizer } from '@angular/platform-browser';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/platform-browser';
import * as ɵngcc2 from '@angular/material/dialog';
import * as ɵngcc3 from '@angular/common';
import * as ɵngcc4 from '@angular/material/button';
import * as ɵngcc5 from '@ngx-translate/core';

function ConfirmDialogComponent_p_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "p", 7);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 1, ctx_r0.message), " ");
} }
function ConfirmDialogComponent_ng_template_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "span", 8);
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("innerHTML", ctx_r2.sanitizedHtmlContent(), ɵngcc0.ɵɵsanitizeHtml);
} }
function ConfirmDialogComponent_button_12_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "button", 9);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("mat-dialog-close", ctx_r3.thirdOptionLabel);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(2, 2, ctx_r3.thirdOptionLabel));
} }
export class ConfirmDialogComponent {
    constructor(data, sanitizer) {
        this.sanitizer = sanitizer;
        data = data || {};
        this.title = data.title || 'ADF_CONFIRM_DIALOG.CONFIRM';
        this.message = data.message || 'ADF_CONFIRM_DIALOG.MESSAGE';
        this.yesLabel = data.yesLabel || 'ADF_CONFIRM_DIALOG.YES_LABEL';
        this.thirdOptionLabel = data.thirdOptionLabel;
        this.noLabel = data.noLabel || 'ADF_CONFIRM_DIALOG.NO_LABEL';
        this.htmlContent = data.htmlContent;
    }
    sanitizedHtmlContent() {
        return this.sanitizer.sanitize(SecurityContext.HTML, this.htmlContent);
    }
}
ConfirmDialogComponent.ɵfac = function ConfirmDialogComponent_Factory(t) { return new (t || ConfirmDialogComponent)(ɵngcc0.ɵɵdirectiveInject(MAT_DIALOG_DATA), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DomSanitizer)); };
ConfirmDialogComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ConfirmDialogComponent, selectors: [["adf-confirm-dialog"]], hostAttrs: [1, "adf-confirm-dialog"], decls: 16, vars: 14, consts: [["mat-dialog-title", "", "data-automation-id", "adf-confirm-dialog-title"], ["data-automation-id", "adf-confirm-dialog-base-message", 4, "ngIf", "ngIfElse"], ["cutomContent", ""], ["data-automation-id", "adf-confirm-dialog-spacer", 1, "adf-dialog-spacer"], ["id", "adf-confirm-accept", "mat-button", "", "color", "primary", "data-automation-id", "adf-confirm-dialog-confirmation", 3, "mat-dialog-close"], ["id", "adf-confirm-all", "mat-button", "", "data-automation-id", "adf-confirm-dialog-confirm-all", 3, "mat-dialog-close", 4, "ngIf"], ["id", "adf-confirm-cancel", "mat-button", "", "data-automation-id", "adf-confirm-dialog-reject", "cdkFocusInitial", "", 3, "mat-dialog-close"], ["data-automation-id", "adf-confirm-dialog-base-message"], ["data-automation-id", "adf-confirm-dialog-custom-content", 3, "innerHTML"], ["id", "adf-confirm-all", "mat-button", "", "data-automation-id", "adf-confirm-dialog-confirm-all", 3, "mat-dialog-close"]], template: function ConfirmDialogComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "h1", 0);
        ɵngcc0.ɵɵtext(1);
        ɵngcc0.ɵɵpipe(2, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(3, "mat-dialog-content");
        ɵngcc0.ɵɵtemplate(4, ConfirmDialogComponent_p_4_Template, 3, 3, "p", 1);
        ɵngcc0.ɵɵtemplate(5, ConfirmDialogComponent_ng_template_5_Template, 1, 1, "ng-template", null, 2, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(7, "mat-dialog-actions");
        ɵngcc0.ɵɵelement(8, "span", 3);
        ɵngcc0.ɵɵelementStart(9, "button", 4);
        ɵngcc0.ɵɵtext(10);
        ɵngcc0.ɵɵpipe(11, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(12, ConfirmDialogComponent_button_12_Template, 3, 4, "button", 5);
        ɵngcc0.ɵɵelementStart(13, "button", 6);
        ɵngcc0.ɵɵtext(14);
        ɵngcc0.ɵɵpipe(15, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        const _r1 = ɵngcc0.ɵɵreference(6);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(2, 8, ctx.title));
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.htmlContent)("ngIfElse", _r1);
        ɵngcc0.ɵɵadvance(5);
        ɵngcc0.ɵɵproperty("mat-dialog-close", true);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(11, 10, ctx.yesLabel));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.thirdOptionLabel);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("mat-dialog-close", false);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(15, 12, ctx.noLabel));
    } }, directives: [ɵngcc2.MatDialogTitle, ɵngcc2.MatDialogContent, ɵngcc3.NgIf, ɵngcc2.MatDialogActions, ɵngcc4.MatButton, ɵngcc2.MatDialogClose], pipes: [ɵngcc5.TranslatePipe], styles: [".adf-dialog-spacer{flex:1 1 auto}.adf-confirm-dialog .mat-dialog-actions .mat-button-wrapper{text-transform:uppercase}"], encapsulation: 2 });
ConfirmDialogComponent.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [MAT_DIALOG_DATA,] }] },
    { type: DomSanitizer }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ConfirmDialogComponent, [{
        type: Component,
        args: [{
                selector: 'adf-confirm-dialog',
                template: "<h1 mat-dialog-title data-automation-id=\"adf-confirm-dialog-title\">{{ title | translate }}</h1>\n<mat-dialog-content>\n    <p *ngIf=\"!htmlContent; else cutomContent\" data-automation-id=\"adf-confirm-dialog-base-message\">\n        {{ message | translate }}\n    </p>\n    <ng-template #cutomContent>\n        <span [innerHTML]=\"sanitizedHtmlContent()\" data-automation-id=\"adf-confirm-dialog-custom-content\">\n        </span>\n    </ng-template>\n</mat-dialog-content>\n<mat-dialog-actions>\n    <span class=\"adf-dialog-spacer\" data-automation-id=\"adf-confirm-dialog-spacer\"></span>\n    <button id=\"adf-confirm-accept\" mat-button color=\"primary\" data-automation-id=\"adf-confirm-dialog-confirmation\"\n        [mat-dialog-close]=\"true\">{{ yesLabel | translate }}</button>\n    <button id=\"adf-confirm-all\" mat-button *ngIf=\"thirdOptionLabel\" [mat-dialog-close]=\"thirdOptionLabel\" data-automation-id=\"adf-confirm-dialog-confirm-all\">{{ thirdOptionLabel | translate }}</button>\n    <button id=\"adf-confirm-cancel\" mat-button [mat-dialog-close]=\"false\" data-automation-id=\"adf-confirm-dialog-reject\"\n        cdkFocusInitial>{{ noLabel | translate }}</button>\n</mat-dialog-actions>\n",
                host: { 'class': 'adf-confirm-dialog' },
                encapsulation: ViewEncapsulation.None,
                styles: [".adf-dialog-spacer{flex:1 1 auto}.adf-confirm-dialog .mat-dialog-actions .mat-button-wrapper{text-transform:uppercase}"]
            }]
    }], function () { return [{ type: undefined, decorators: [{
                type: Inject,
                args: [MAT_DIALOG_DATA]
            }] }, { type: ɵngcc1.DomSanitizer }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlybS5kaWFsb2cuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL2hvbWUvdHJhdmlzL2J1aWxkL0FsZnJlc2NvL2FsZnJlc2NvLW5nMi1jb21wb25lbnRzL2xpYi9jb250ZW50LXNlcnZpY2VzL3NyYy9saWIvZGlhbG9ncy9jb25maXJtLmRpYWxvZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBRUgsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUUsaUJBQWlCLEVBQUUsZUFBZSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3RGLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUMzRCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sMkJBQTJCLENBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBa0J6RCxNQUFNLE9BQU8sc0JBQXNCO0FBQ25DLElBUUksWUFBcUMsSUFBaUMsRUFBVSxTQUF1QjtBQUMzRyxRQURvRixjQUFTLEdBQVQsU0FBUyxDQUFjO0FBQUMsUUFDcEcsSUFBSSxHQUFHLElBQUksSUFBSSxFQUFFLENBQUM7QUFDMUIsUUFBUSxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLElBQUksNEJBQTRCLENBQUM7QUFDaEUsUUFBUSxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxPQUFPLElBQUksNEJBQTRCLENBQUM7QUFDcEUsUUFBUSxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxRQUFRLElBQUksOEJBQThCLENBQUM7QUFDeEUsUUFBUSxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDO0FBQ3RELFFBQVEsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsT0FBTyxJQUFJLDZCQUE2QixDQUFDO0FBQ3JFLFFBQVEsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDO0FBQzVDLElBQUksQ0FBQztBQUNMLElBQ0ksb0JBQW9CO0FBQUssUUFDckIsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxlQUFlLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztBQUMvRSxJQUFJLENBQUM7QUFDTDtrREE3QkMsU0FBUyxTQUFDLGtCQUNQLFFBQVEsRUFBRSxvQkFBb0Isa0JBQzlCOzhuQ0FBb0Msa0JBRXBDLElBQUksRUFBRSxFQUFFLE9BQU8sRUFBRSxvQkFBb0IsRUFBRTtXQUN2QyxhQUFhLEVBQUU7QUFBaUIsQ0FBQyxJQUFJOzs7O2VBQ3hDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzZVQUNJO0FBQUM7QUFFUyw0Q0FPRSxNQUFNLFNBQUMsZUFBZTtBQUFTLFlBM0J2QyxZQUFZO0FBQUc7Ozs7Ozs7Ozs7Ozs7aUVBQUU7QUFBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IENvbXBvbmVudCwgSW5qZWN0LCBWaWV3RW5jYXBzdWxhdGlvbiwgU2VjdXJpdHlDb250ZXh0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBNQVRfRElBTE9HX0RBVEEgfSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbC9kaWFsb2cnO1xuaW1wb3J0IHsgRG9tU2FuaXRpemVyIH0gZnJvbSAnQGFuZ3VsYXIvcGxhdGZvcm0tYnJvd3Nlcic7XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ29uZmlybURpYWxvZ0NvbXBvbmVudFByb3BzIHtcbiAgICB0aXRsZT86IHN0cmluZztcbiAgICBtZXNzYWdlPzogc3RyaW5nO1xuICAgIHllc0xhYmVsPzogc3RyaW5nO1xuICAgIHRoaXJkT3B0aW9uTGFiZWw/OiBzdHJpbmc7XG4gICAgbm9MYWJlbD86IHN0cmluZztcbiAgICBodG1sQ29udGVudD86IHN0cmluZztcbn1cblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICdhZGYtY29uZmlybS1kaWFsb2cnLFxuICAgIHRlbXBsYXRlVXJsOiAnLi9jb25maXJtLmRpYWxvZy5odG1sJyxcbiAgICBzdHlsZVVybHM6IFsnLi9jb25maXJtLmRpYWxvZy5zY3NzJ10sXG4gICAgaG9zdDogeyAnY2xhc3MnOiAnYWRmLWNvbmZpcm0tZGlhbG9nJyB9LFxuICAgIGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLk5vbmVcbn0pXG5leHBvcnQgY2xhc3MgQ29uZmlybURpYWxvZ0NvbXBvbmVudCB7XG5cbiAgICB0aXRsZTogc3RyaW5nO1xuICAgIG1lc3NhZ2U6IHN0cmluZztcbiAgICB5ZXNMYWJlbDogc3RyaW5nO1xuICAgIG5vTGFiZWw6IHN0cmluZztcbiAgICB0aGlyZE9wdGlvbkxhYmVsOiBzdHJpbmc7XG4gICAgaHRtbENvbnRlbnQ6IHN0cmluZztcblxuICAgIGNvbnN0cnVjdG9yKEBJbmplY3QoTUFUX0RJQUxPR19EQVRBKSBkYXRhOiBDb25maXJtRGlhbG9nQ29tcG9uZW50UHJvcHMsIHByaXZhdGUgc2FuaXRpemVyOiBEb21TYW5pdGl6ZXIpIHtcbiAgICAgICAgZGF0YSA9IGRhdGEgfHwge307XG4gICAgICAgIHRoaXMudGl0bGUgPSBkYXRhLnRpdGxlIHx8ICdBREZfQ09ORklSTV9ESUFMT0cuQ09ORklSTSc7XG4gICAgICAgIHRoaXMubWVzc2FnZSA9IGRhdGEubWVzc2FnZSB8fCAnQURGX0NPTkZJUk1fRElBTE9HLk1FU1NBR0UnO1xuICAgICAgICB0aGlzLnllc0xhYmVsID0gZGF0YS55ZXNMYWJlbCB8fCAnQURGX0NPTkZJUk1fRElBTE9HLllFU19MQUJFTCc7XG4gICAgICAgIHRoaXMudGhpcmRPcHRpb25MYWJlbCA9IGRhdGEudGhpcmRPcHRpb25MYWJlbDtcbiAgICAgICAgdGhpcy5ub0xhYmVsID0gZGF0YS5ub0xhYmVsIHx8ICdBREZfQ09ORklSTV9ESUFMT0cuTk9fTEFCRUwnO1xuICAgICAgICB0aGlzLmh0bWxDb250ZW50ID0gZGF0YS5odG1sQ29udGVudDtcbiAgICB9XG5cbiAgICBzYW5pdGl6ZWRIdG1sQ29udGVudCgpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gdGhpcy5zYW5pdGl6ZXIuc2FuaXRpemUoU2VjdXJpdHlDb250ZXh0LkhUTUwsIHRoaXMuaHRtbENvbnRlbnQpO1xuICAgIH1cblxufVxuIl19