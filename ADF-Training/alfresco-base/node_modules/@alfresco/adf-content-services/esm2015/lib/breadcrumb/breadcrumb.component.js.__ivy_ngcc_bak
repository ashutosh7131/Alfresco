/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, EventEmitter, Input, Output, ViewChild, ViewEncapsulation } from '@angular/core';
import { MatSelect } from '@angular/material/select';
import { Node } from '@alfresco/js-api';
import { DocumentListComponent } from '../document-list';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
export class BreadcrumbComponent {
    constructor() {
        this.folderNode = null;
        this.root = null;
        this.rootId = null;
        this.route = [];
        this.onDestroy$ = new Subject();
        this.readOnly = false;
        this.navigate = new EventEmitter();
    }
    get hasRoot() {
        return !!this.root;
    }
    ngOnInit() {
        this.transform = this.transform ? this.transform : null;
        if (this.target) {
            this.target.$folderNode
                .pipe(takeUntil(this.onDestroy$))
                .subscribe((folderNode) => {
                this.folderNode = folderNode;
                this.recalculateNodes();
            });
        }
    }
    ngOnChanges() {
        this.recalculateNodes();
    }
    recalculateNodes() {
        const node = this.transform ? this.transform(this.folderNode) : this.folderNode;
        this.route = this.parseRoute(node);
        if (this.maxItems && this.route.length > this.maxItems) {
            this.lastNodes = this.route.slice(this.route.length - this.maxItems);
            this.previousNodes = this.route.slice(0, this.route.length - this.maxItems);
            this.previousNodes.reverse();
        }
        else {
            this.lastNodes = this.route;
            this.previousNodes = null;
        }
    }
    open() {
        if (this.dropdown) {
            this.dropdown.open();
            this.dropdown.focus();
        }
    }
    hasPreviousNodes() {
        return !!this.previousNodes;
    }
    parseRoute(node) {
        if (node && node.path) {
            const route = (node.path.elements || []).slice();
            route.push({
                id: node.id,
                name: node.name,
                node: node
            });
            const rootPos = this.getElementPosition(route, this.rootId);
            if (rootPos > 0) {
                route.splice(0, rootPos);
            }
            if (rootPos === -1 && this.rootId) {
                route[0].id = this.rootId;
            }
            if (this.root) {
                route[0].name = this.root;
            }
            return route;
        }
        return [];
    }
    getElementPosition(route, nodeId) {
        let position = -1;
        if (route && route.length > 0 && nodeId) {
            position = route.findIndex((el) => el.id === nodeId);
        }
        return position;
    }
    breadcrumbItemIsAnchor(lastItem) {
        return !this.readOnly && !lastItem;
    }
    onRoutePathClick(route, event) {
        if (event && event.type === 'click') {
            event.preventDefault();
        }
        this.onRouteClick(route);
    }
    onRouteClick(route) {
        if (route && !this.readOnly) {
            this.navigate.emit(route);
            if (this.target) {
                this.target.navigateTo(route.id);
            }
        }
    }
    ngOnDestroy() {
        this.onDestroy$.next(true);
        this.onDestroy$.complete();
    }
}
BreadcrumbComponent.decorators = [
    { type: Component, args: [{
                selector: 'adf-breadcrumb',
                template: "<nav\n    *ngIf=\"folderNode\"\n    data-automation-id=\"breadcrumb\"\n    class=\"adf-breadcrumb-container\"\n    role=\"navigation\"\n    [attr.aria-label]=\"'BREADCRUMB.ARIA-LABEL.BREADCRUMB' | translate\"\n>\n    <button\n        *ngIf=\"hasPreviousNodes()\"\n        tabindex=\"0\"\n        class=\"adf-breadcrumb-dropdown-trigger\"\n        (click)=\"open()\"\n        [attr.aria-label]=\"'BREADCRUMB.ARIA-LABEL.DROPDOWN' | translate\"\n    >\n        <div class=\"adf-breadcrumb-dropdown-trigger-icon\">\n            <mat-icon [class.adf-isRoot]=\"!hasPreviousNodes()\">folder</mat-icon>\n            <mat-icon\n                [class.adf-isRoot]=\"!hasPreviousNodes()\"\n                class=\"adf-breadcrumb-dropdown-trigger-arrow\"\n                >arrow_drop_down</mat-icon\n            >\n        </div>\n    </button>\n\n    <mat-select\n        #dropdown\n        *ngIf=\"hasPreviousNodes()\"\n        class=\"adf-breadcrumb-dropdown-path\"\n        tabindex=\"-1\"\n    >\n        <mat-option\n            *ngFor=\"let node of previousNodes\"\n            (click)=\"onRoutePathClick(node, $event)\"\n            (onSelectionChange)=\"onRouteClick(node)\"\n            class=\"adf-breadcrumb-path-option\"\n            [disabled]=\"readOnly\"\n        >\n            {{ node.name | translate }}\n        </mat-option>\n    </mat-select>\n\n    <div\n        *ngFor=\"let item of lastNodes; let last = last\"\n        [class.adf-active]=\"last\"\n        [ngSwitch]=\"breadcrumbItemIsAnchor(last)\"\n        title=\"{{ item.name | translate }}\"\n        class=\"adf-breadcrumb-item\">\n        <a\n            *ngSwitchCase=\"true\"\n            href=\"#\"\n            [attr.data-automation-id]=\"'breadcrumb_' + item.name\"\n            class=\"adf-breadcrumb-item-anchor\"\n            (click)=\"onRoutePathClick(item, $event)\"\n        >\n            {{ item.name | translate }}\n        </a>\n\n        <div *ngSwitchDefault class=\"adf-breadcrumb-item-current\" role=\"heading\" aria-level=\"2\"\n            aria-current=\"location\">\n            {{ item.name | translate }}\n        </div>\n\n        <mat-icon class=\"adf-breadcrumb-item-chevron\" *ngIf=\"!last\">\n            chevron_right\n        </mat-icon>\n    </div>\n</nav>\n\n<nav\n    *ngIf=\"!folderNode && hasRoot\"\n    data-automation-id=\"breadcrumb\"\n    role=\"navigation\"\n    [attr.aria-label]=\"'BREADCRUMB.ARIA-LABEL.BREADCRUMB' | translate\"\n>\n    <div class=\"adf-breadcrumb-item adf-active\" role=\"listitem\">\n        <div class=\"adf-breadcrumb-item-current\" role=\"heading\" aria-level=\"2\">\n            {{ root | translate }}\n        </div>\n    </div>\n</nav>\n",
                encapsulation: ViewEncapsulation.None,
                host: { 'class': 'adf-breadcrumb' },
                styles: [".adf-breadcrumb{color:var(--theme-text-color);display:flex;flex:1;font-size:14px;font-weight:600;letter-spacing:-.2px;line-height:24px;overflow:hidden}.adf-breadcrumb-container{cursor:default;display:flex;list-style-type:none;margin:0;overflow:hidden;padding:0}.adf-breadcrumb-dropdown-path{height:0;margin-top:35px;overflow:hidden;width:0}.adf-breadcrumb-dropdown-path.mat-select{width:0}.adf-breadcrumb-dropdown-trigger{background:transparent;border:none;cursor:pointer;margin-right:5px;margin-top:2px;padding:0;width:30px}.adf-breadcrumb-dropdown-trigger:focus{color:var(--theme-primary-color);outline:none}.adf-breadcrumb-dropdown-trigger-icon{position:relative}.adf-breadcrumb-dropdown-trigger-arrow{color:#fff;font-size:17px;left:4px;position:absolute;top:4px;z-index:2}.adf-breadcrumb-dropdown-trigger-arrow.adf-isRoot{visibility:hidden}.adf-breadcrumb-dropdown-trigger-arrow.adf-focus{border:none}.adf-breadcrumb-dropdown-trigger.adf-isRoot{cursor:not-allowed}.adf-breadcrumb-item{color:var(--theme-text-color);display:flex;flex:0 1 auto;font-size:14px;font-weight:600;letter-spacing:-.2px;line-height:33px;margin-top:auto;min-width:35px;overflow:hidden;padding-right:2px;text-align:left;text-overflow:ellipsis}.adf-breadcrumb-item.adf-active,.adf-breadcrumb-item:hover{color:var(--adf-breadcrumb-item-active-hover-color)}.adf-breadcrumb-item.adf-active{color:var(--adf-breadcrumb-item-active-color)}.adf-breadcrumb-item-chevron{font-size:17px;margin-top:9px;opacity:1}.adf-breadcrumb-item.mat-primary{color:var(--theme-primary-color)}.adf-breadcrumb-item.mat-accent{color:var(--theme-accent-color)}.adf-breadcrumb-item.mat-warn{color:var(--theme-warn-color)}.adf-breadcrumb-item-anchor{box-sizing:border-box;color:inherit;display:inline-block;flex:0 1 auto;overflow:hidden;padding:0 2px;text-align:center;text-decoration:none;text-overflow:ellipsis;white-space:nowrap;width:100%}.adf-breadcrumb-item-anchor:focus{outline:1px solid var(--theme-accent-color-a200);outline-offset:-1px}.adf-breadcrumb-item-current{overflow:hidden;text-overflow:ellipsis;white-space:nowrap}"]
            },] }
];
BreadcrumbComponent.propDecorators = {
    folderNode: [{ type: Input }],
    root: [{ type: Input }],
    rootId: [{ type: Input }],
    target: [{ type: Input }],
    transform: [{ type: Input }],
    dropdown: [{ type: ViewChild, args: ['dropdown',] }],
    maxItems: [{ type: Input }],
    readOnly: [{ type: Input }],
    navigate: [{ type: Output }]
};
//# sourceMappingURL=data:application/json;base64,