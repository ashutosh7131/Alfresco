import { NodesApiService } from '@alfresco/adf-core';
import { Injectable } from '@angular/core';
import { TreeBaseNode } from '../models/tree-view.model';
import { map } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@alfresco/adf-core";
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@alfresco/adf-core';
export class TreeViewService {
    constructor(nodeApi) {
        this.nodeApi = nodeApi;
    }
    getTreeNodes(nodeId) {
        return this.nodeApi.getNodeChildren(nodeId)
            .pipe(map((nodePage) => {
            return nodePage.list.entries.filter((node) => node.entry.isFolder ? node : null);
        }), map((nodes) => nodes.map((node) => new TreeBaseNode(node))));
    }
}
TreeViewService.ɵfac = function TreeViewService_Factory(t) { return new (t || TreeViewService)(ɵngcc0.ɵɵinject(ɵngcc1.NodesApiService)); };
TreeViewService.ɵprov = i0.ɵɵdefineInjectable({ factory: function TreeViewService_Factory() { return new TreeViewService(i0.ɵɵinject(i1.NodesApiService)); }, token: TreeViewService, providedIn: "root" });
TreeViewService.ctorParameters = () => [
    { type: NodesApiService }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TreeViewService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc1.NodesApiService }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJlZS12aWV3LnNlcnZpY2UuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL2hvbWUvdHJhdmlzL2J1aWxkL0FsZnJlc2NvL2FsZnJlc2NvLW5nMi1jb21wb25lbnRzL2xpYi9jb250ZW50LXNlcnZpY2VzL3NyYy9saWIvdHJlZS12aWV3L3NlcnZpY2VzL3RyZWUtdmlldy5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWlCQSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDckQsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUzQyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFFekQsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3JDO0FBRXNCOzs7QUFFdEIsTUFBTSxPQUFPLGVBQWU7QUFDNUIsSUFDSSxZQUFvQixPQUF3QjtBQUNoRCxRQUR3QixZQUFPLEdBQVAsT0FBTyxDQUFpQjtBQUFDLElBQzdDLENBQUM7QUFDTCxJQUNJLFlBQVksQ0FBQyxNQUFNO0FBQUksUUFDbkIsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLGVBQWUsQ0FBQyxNQUFNLENBQUM7QUFDbkQsYUFBYSxJQUFJLENBQ0QsR0FBRyxDQUFDLENBQUMsUUFBb0IsRUFBRSxFQUFFO0FBQzdDLFlBQW9CLE9BQU8sUUFBUSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUNyRyxRQUFnQixDQUFDLENBQUMsRUFDRixHQUFHLENBQUMsQ0FBQyxLQUFrQixFQUFFLEVBQUUsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxJQUFJLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQzNFLENBQUM7QUFDZCxJQUFJLENBQUM7QUFDTDsySUFDQTtBQUFDLDRNQWZJO0FBQUM7RUFITCxVQUFVLFNBQUMsckJBS0csWUFaTixlQUFlO0FBQUc7TUFRdkIsVUFBVSxFQUFFLE1BQU0sY0FDckI7Ozs7O2dGQVQ0QjtBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgTm9kZXNBcGlTZXJ2aWNlIH0gZnJvbSAnQGFsZnJlc2NvL2FkZi1jb3JlJztcbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IFRyZWVCYXNlTm9kZSB9IGZyb20gJy4uL21vZGVscy90cmVlLXZpZXcubW9kZWwnO1xuaW1wb3J0IHsgTm9kZVBhZ2luZywgTm9kZUVudHJ5IH0gZnJvbSAnQGFsZnJlc2NvL2pzLWFwaSc7XG5pbXBvcnQgeyBtYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbkBJbmplY3RhYmxlKHtcbiAgICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgVHJlZVZpZXdTZXJ2aWNlIHtcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgbm9kZUFwaTogTm9kZXNBcGlTZXJ2aWNlKSB7XG4gICAgfVxuXG4gICAgZ2V0VHJlZU5vZGVzKG5vZGVJZCk6IE9ic2VydmFibGU8VHJlZUJhc2VOb2RlW10+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMubm9kZUFwaS5nZXROb2RlQ2hpbGRyZW4obm9kZUlkKVxuICAgICAgICAgICAgLnBpcGUoXG4gICAgICAgICAgICAgICAgbWFwKChub2RlUGFnZTogTm9kZVBhZ2luZykgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbm9kZVBhZ2UubGlzdC5lbnRyaWVzLmZpbHRlcigobm9kZSkgPT4gbm9kZS5lbnRyeS5pc0ZvbGRlciA/IG5vZGUgOiBudWxsKTtcbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICBtYXAoKG5vZGVzOiBOb2RlRW50cnlbXSkgPT4gbm9kZXMubWFwKChub2RlKSA9PiBuZXcgVHJlZUJhc2VOb2RlKG5vZGUpKSlcbiAgICAgICAgICAgICk7XG4gICAgfVxuXG59XG4iXX0=