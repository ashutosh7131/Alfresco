/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { FlatTreeControl } from '@angular/cdk/tree';
import { Component, Input, Output, EventEmitter } from '@angular/core';
import { TreeViewDataSource } from '../data/tree-view-datasource';
import { TreeViewService } from '../services/tree-view.service';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../services/tree-view.service';
import * as ɵngcc2 from '@angular/common';
import * as ɵngcc3 from '@angular/material/tree';
import * as ɵngcc4 from '@angular/material/button';
import * as ɵngcc5 from '@angular/material/icon';
import * as ɵngcc6 from '@ngx-translate/core';

function TreeViewComponent_mat_tree_0_mat_tree_node_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-tree-node", 5);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const treeNode_r5 = ctx.$implicit;
    ɵngcc0.ɵɵpropertyInterpolate("id", treeNode_r5.name + "-tree-node");
    ɵngcc0.ɵɵproperty("matTreeNodePaddingIndent", 15);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", treeNode_r5.name, " ");
} }
const _c0 = function (a0) { return { name: a0 }; };
function TreeViewComponent_mat_tree_0_mat_tree_node_2_Template(rf, ctx) { if (rf & 1) {
    const _r8 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "mat-tree-node", 5);
    ɵngcc0.ɵɵelementStart(1, "button", 6);
    ɵngcc0.ɵɵlistener("click", function TreeViewComponent_mat_tree_0_mat_tree_node_2_Template_button_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r8); const treeNode_r6 = ctx.$implicit; const ctx_r7 = ɵngcc0.ɵɵnextContext(2); return ctx_r7.onNodeClicked(treeNode_r6.node); });
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementStart(3, "mat-icon", 7);
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(5, "span", 8);
    ɵngcc0.ɵɵlistener("click", function TreeViewComponent_mat_tree_0_mat_tree_node_2_Template_span_click_5_listener() { ɵngcc0.ɵɵrestoreView(_r8); const treeNode_r6 = ctx.$implicit; const ctx_r9 = ɵngcc0.ɵɵnextContext(2); return ctx_r9.onNodeClicked(treeNode_r6.node); });
    ɵngcc0.ɵɵtext(6);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const treeNode_r6 = ctx.$implicit;
    const ctx_r4 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵpropertyInterpolate("id", treeNode_r6.name + "-tree-child-node");
    ɵngcc0.ɵɵproperty("matTreeNodePaddingIndent", 15);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate("id", "button-" + treeNode_r6.name);
    ɵngcc0.ɵɵattribute("aria-label", ɵngcc0.ɵɵpipeBind2(2, 6, "ADF-TREE-VIEW.ACCESSIBILITY.ARIA_LABEL", ɵngcc0.ɵɵpureFunction1(9, _c0, treeNode_r6.name)));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r4.treeControl.isExpanded(treeNode_r6) ? "folder_open" : "folder", " ");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(treeNode_r6.name);
} }
function TreeViewComponent_mat_tree_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-tree", 2);
    ɵngcc0.ɵɵtemplate(1, TreeViewComponent_mat_tree_0_mat_tree_node_1_Template, 2, 3, "mat-tree-node", 3);
    ɵngcc0.ɵɵtemplate(2, TreeViewComponent_mat_tree_0_mat_tree_node_2_Template, 7, 11, "mat-tree-node", 4);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("dataSource", ctx_r0.dataSource)("treeControl", ctx_r0.treeControl);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("matTreeNodeDefWhen", ctx_r0.hasChild);
} }
function TreeViewComponent_ng_template_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 9);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 1, "ADF-TREE-VIEW.MISSING-ID"), " ");
} }
export class TreeViewComponent {
    constructor(treeViewService) {
        this.treeViewService = treeViewService;
        this.nodeClicked = new EventEmitter();
        this.error = new EventEmitter();
        this.getLevel = (node) => node.level;
        this.isExpandable = (node) => node.expandable;
        this.hasChild = (_, nodeData) => nodeData.expandable;
        this.treeControl = new FlatTreeControl(this.getLevel, this.isExpandable);
        this.dataSource = new TreeViewDataSource(this.treeControl, this.treeViewService);
    }
    ngOnChanges(changes) {
        if (changes['nodeId'] && changes['nodeId'].currentValue &&
            changes['nodeId'].currentValue !== changes['nodeId'].previousValue) {
            this.loadTreeNode();
        }
        else {
            this.dataSource.data = [];
        }
    }
    onNodeClicked(node) {
        this.nodeClicked.emit(node);
    }
    loadTreeNode() {
        this.treeViewService.getTreeNodes(this.nodeId)
            .subscribe((treeNode) => {
            this.dataSource.data = treeNode;
        }, (error) => this.error.emit(error));
    }
}
TreeViewComponent.ɵfac = function TreeViewComponent_Factory(t) { return new (t || TreeViewComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.TreeViewService)); };
TreeViewComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: TreeViewComponent, selectors: [["adf-tree-view-list"]], inputs: { nodeId: "nodeId" }, outputs: { nodeClicked: "nodeClicked", error: "error" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 3, vars: 2, consts: [["class", "adf-tree-view-main", 3, "dataSource", "treeControl", 4, "ngIf", "ngIfElse"], ["missingNodeId", ""], [1, "adf-tree-view-main", 3, "dataSource", "treeControl"], ["class", "adf-tree-view-node", "matTreeNodePadding", "", 3, "id", "matTreeNodePaddingIndent", 4, "matTreeNodeDef"], ["class", "adf-tree-view-node", "matTreeNodePadding", "", 3, "id", "matTreeNodePaddingIndent", 4, "matTreeNodeDef", "matTreeNodeDefWhen"], ["matTreeNodePadding", "", 1, "adf-tree-view-node", 3, "id", "matTreeNodePaddingIndent"], ["matTreeNodeToggle", "", "mat-icon-button", "", 3, "id", "click"], [1, "adf-tree-view-icon"], ["matTreeNodeToggle", "", 1, "adf-tree-view-label", 3, "click"], ["id", "adf-tree-view-missing-node"]], template: function TreeViewComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, TreeViewComponent_mat_tree_0_Template, 3, 3, "mat-tree", 0);
        ɵngcc0.ɵɵtemplate(1, TreeViewComponent_ng_template_1_Template, 3, 3, "ng-template", null, 1, ɵngcc0.ɵɵtemplateRefExtractor);
    } if (rf & 2) {
        const _r1 = ɵngcc0.ɵɵreference(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.nodeId)("ngIfElse", _r1);
    } }, directives: [ɵngcc2.NgIf, ɵngcc3.MatTree, ɵngcc3.MatTreeNodeDef, ɵngcc3.MatTreeNode, ɵngcc3.MatTreeNodePadding, ɵngcc4.MatButton, ɵngcc3.MatTreeNodeToggle, ɵngcc5.MatIcon], pipes: [ɵngcc6.TranslatePipe], styles: [".adf-tree-view-icon[_ngcontent-%COMP%]{color:#d9e022}.adf-tree-view-node.mat-tree-node[_ngcontent-%COMP%]{align-items:baseline;font-size:12px;min-height:40px}.adf-tree-view-label[_ngcontent-%COMP%]{cursor:pointer}"] });
TreeViewComponent.ctorParameters = () => [
    { type: TreeViewService }
];
TreeViewComponent.propDecorators = {
    nodeId: [{ type: Input }],
    nodeClicked: [{ type: Output }],
    error: [{ type: Output }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TreeViewComponent, [{
        type: Component,
        args: [{
                selector: 'adf-tree-view-list',
                template: "<mat-tree class=\"adf-tree-view-main\" [dataSource]=\"dataSource\"\n          [treeControl]=\"treeControl\" *ngIf=\"nodeId; else missingNodeId\">\n    <mat-tree-node class=\"adf-tree-view-node\"\n        *matTreeNodeDef=\"let treeNode\" id=\"{{treeNode.name + '-tree-node'}}\"\n        matTreeNodePadding [matTreeNodePaddingIndent]=\"15\">\n        {{treeNode.name}}\n    </mat-tree-node>\n    <mat-tree-node class=\"adf-tree-view-node\"\n        id=\"{{treeNode.name + '-tree-child-node'}}\" *matTreeNodeDef=\"let treeNode; when: hasChild\"\n        matTreeNodePadding [matTreeNodePaddingIndent]=\"15\">\n        <button matTreeNodeToggle id=\"{{'button-'+treeNode.name}}\" (click)=\"onNodeClicked(treeNode.node)\"\n                mat-icon-button [attr.aria-label]=\"'ADF-TREE-VIEW.ACCESSIBILITY.ARIA_LABEL' | translate: {\n                    name:  treeNode.name\n                }\">\n            <mat-icon class=\"adf-tree-view-icon\">\n                {{treeControl.isExpanded(treeNode) ? 'folder_open' : 'folder'}}\n            </mat-icon>\n        </button>\n        <span class=\"adf-tree-view-label\" matTreeNodeToggle (click)=\"onNodeClicked(treeNode.node)\">{{treeNode.name}}</span>\n    </mat-tree-node>\n</mat-tree>\n<ng-template #missingNodeId>\n    <div id=\"adf-tree-view-missing-node\">\n        {{'ADF-TREE-VIEW.MISSING-ID' | translate}}\n    </div>\n</ng-template>\n",
                styles: [".adf-tree-view-icon{color:#d9e022}.adf-tree-view-node.mat-tree-node{align-items:baseline;font-size:12px;min-height:40px}.adf-tree-view-label{cursor:pointer}"]
            }]
    }], function () { return [{ type: ɵngcc1.TreeViewService }]; }, { nodeClicked: [{
            type: Output
        }], error: [{
            type: Output
        }], nodeId: [{
            type: Input
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJlZS12aWV3LmNvbXBvbmVudC5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vaG9tZS90cmF2aXMvYnVpbGQvQWxmcmVzY28vYWxmcmVzY28tbmcyLWNvbXBvbmVudHMvbGliL2NvbnRlbnQtc2VydmljZXMvc3JjL2xpYi90cmVlLXZpZXcvY29tcG9uZW50cy90cmVlLXZpZXcuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFFSCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDcEQsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQTRCLE1BQU0sRUFBRSxZQUFZLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFakcsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFDbEUsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLCtCQUErQixDQUFDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFTaEUsTUFBTSxPQUFPLGlCQUFpQjtBQUFHLElBaUI3QixZQUFvQixlQUFnQztBQUN4RCxRQUR3QixvQkFBZSxHQUFmLGVBQWUsQ0FBaUI7QUFBQyxRQVRyRCxnQkFBVyxHQUE0QixJQUFJLFlBQVksRUFBRSxDQUFDO0FBQzlELFFBR0ksVUFBSyxHQUFzQixJQUFJLFlBQVksRUFBRSxDQUFDO0FBQ2xELFFBc0JJLGFBQVEsR0FBRyxDQUFDLElBQWtCLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUM7QUFDbEQsUUFDSSxpQkFBWSxHQUFHLENBQUMsSUFBa0IsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQztBQUMzRCxRQUNJLGFBQVEsR0FBRyxDQUFDLENBQVMsRUFBRSxRQUFzQixFQUFFLEVBQUUsQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDO0FBQzFFLFFBdEJRLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxlQUFlLENBQWUsSUFBSSxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7QUFDL0YsUUFBUSxJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksa0JBQWtCLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUM7QUFDekYsSUFBSSxDQUFDO0FBQ0wsSUFDSSxXQUFXLENBQUMsT0FBc0I7QUFDdEMsUUFBUSxJQUFJLE9BQU8sQ0FBQyxRQUFRLENBQUMsSUFBSSxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUMsWUFBWTtBQUMvRCxZQUFZLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQyxZQUFZLEtBQUssT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDLGFBQWEsRUFBRTtBQUNoRixZQUFZLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQztBQUNoQyxTQUFTO0FBQUMsYUFBSztBQUNmLFlBQVksSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLEdBQUcsRUFBRSxDQUFDO0FBQ3RDLFNBQVM7QUFDVCxJQUFJLENBQUM7QUFDTCxJQUNJLGFBQWEsQ0FBQyxJQUFlO0FBQ2pDLFFBQVEsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDcEMsSUFBSSxDQUFDO0FBQ0wsSUFPWSxZQUFZO0FBQ3hCLFFBQVEsSUFBSSxDQUFDLGVBQWUsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQztBQUN0RCxhQUFhLFNBQVMsQ0FDTixDQUFDLFFBQXdCLEVBQUUsRUFBRTtBQUM3QyxZQUFvQixJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksR0FBRyxRQUFRLENBQUM7QUFDcEQsUUFBZ0IsQ0FBQyxFQUNELENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FDcEMsQ0FBQztBQUNkLElBQUksQ0FBQztBQUNMOzZDQXhEQyxTQUFTLFNBQUMsa0JBQ1AsUUFBUSxFQUFFLG9CQUFvQixrQkFDOUI7Ozs7OzsrQkFBeUM7dUtBRTVDLG1SQUVHO0FBQUM7QUFBMkMsWUFUdkMsZUFBZTtBQUFHO0FBQUc7QUFDNUIscUJBV0csS0FBSztBQUNSLDBCQUdHLE1BQU07QUFDVCxvQkFHRyxNQUFNO0FBQ1Y7Ozs7Ozs7Ozs7Ozs7O29CQUFFO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBGbGF0VHJlZUNvbnRyb2wgfSBmcm9tICdAYW5ndWxhci9jZGsvdHJlZSc7XG5pbXBvcnQgeyBDb21wb25lbnQsIElucHV0LCBPbkNoYW5nZXMsIFNpbXBsZUNoYW5nZXMsIE91dHB1dCwgRXZlbnRFbWl0dGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBUcmVlQmFzZU5vZGUgfSBmcm9tICcuLi9tb2RlbHMvdHJlZS12aWV3Lm1vZGVsJztcbmltcG9ydCB7IFRyZWVWaWV3RGF0YVNvdXJjZSB9IGZyb20gJy4uL2RhdGEvdHJlZS12aWV3LWRhdGFzb3VyY2UnO1xuaW1wb3J0IHsgVHJlZVZpZXdTZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZXMvdHJlZS12aWV3LnNlcnZpY2UnO1xuaW1wb3J0IHsgTm9kZUVudHJ5IH0gZnJvbSAnQGFsZnJlc2NvL2pzLWFwaSc7XG5cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAnYWRmLXRyZWUtdmlldy1saXN0JyxcbiAgICB0ZW1wbGF0ZVVybDogJy4vdHJlZS12aWV3LmNvbXBvbmVudC5odG1sJyxcbiAgICBzdHlsZVVybHM6IFsnLi90cmVlLXZpZXcuY29tcG9uZW50LnNjc3MnXVxufSlcblxuZXhwb3J0IGNsYXNzIFRyZWVWaWV3Q29tcG9uZW50IGltcGxlbWVudHMgT25DaGFuZ2VzIHtcblxuICAgIC8qKiBJZGVudGlmaWVyIG9mIHRoZSBub2RlIHRvIGRpc3BsYXkuICovXG4gICAgQElucHV0KClcbiAgICBub2RlSWQ6IHN0cmluZztcblxuICAgIC8qKiBFbWl0dGVkIHdoZW4gYSBub2RlIGluIHRoZSB0cmVlIHZpZXcgaXMgY2xpY2tlZC4gKi9cbiAgICBAT3V0cHV0KClcbiAgICBub2RlQ2xpY2tlZDogRXZlbnRFbWl0dGVyPE5vZGVFbnRyeT4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbiAgICAvKiogRW1pdHRlZCB3aGVuIGFuIGludmFsaWQgbm9kZSBpZCBpcyBnaXZlbi4gKi9cbiAgICBAT3V0cHV0KClcbiAgICBlcnJvcjogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbiAgICB0cmVlQ29udHJvbDogRmxhdFRyZWVDb250cm9sPFRyZWVCYXNlTm9kZT47XG4gICAgZGF0YVNvdXJjZTogVHJlZVZpZXdEYXRhU291cmNlO1xuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSB0cmVlVmlld1NlcnZpY2U6IFRyZWVWaWV3U2VydmljZSkge1xuICAgICAgICB0aGlzLnRyZWVDb250cm9sID0gbmV3IEZsYXRUcmVlQ29udHJvbDxUcmVlQmFzZU5vZGU+KHRoaXMuZ2V0TGV2ZWwsIHRoaXMuaXNFeHBhbmRhYmxlKTtcbiAgICAgICAgdGhpcy5kYXRhU291cmNlID0gbmV3IFRyZWVWaWV3RGF0YVNvdXJjZSh0aGlzLnRyZWVDb250cm9sLCB0aGlzLnRyZWVWaWV3U2VydmljZSk7XG4gICAgfVxuXG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcykge1xuICAgICAgICBpZiAoY2hhbmdlc1snbm9kZUlkJ10gJiYgY2hhbmdlc1snbm9kZUlkJ10uY3VycmVudFZhbHVlICYmXG4gICAgICAgICAgICBjaGFuZ2VzWydub2RlSWQnXS5jdXJyZW50VmFsdWUgIT09IGNoYW5nZXNbJ25vZGVJZCddLnByZXZpb3VzVmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMubG9hZFRyZWVOb2RlKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmRhdGFTb3VyY2UuZGF0YSA9IFtdO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgb25Ob2RlQ2xpY2tlZChub2RlOiBOb2RlRW50cnkpIHtcbiAgICAgICAgdGhpcy5ub2RlQ2xpY2tlZC5lbWl0KG5vZGUpO1xuICAgIH1cblxuICAgIGdldExldmVsID0gKG5vZGU6IFRyZWVCYXNlTm9kZSkgPT4gbm9kZS5sZXZlbDtcblxuICAgIGlzRXhwYW5kYWJsZSA9IChub2RlOiBUcmVlQmFzZU5vZGUpID0+IG5vZGUuZXhwYW5kYWJsZTtcblxuICAgIGhhc0NoaWxkID0gKF86IG51bWJlciwgbm9kZURhdGE6IFRyZWVCYXNlTm9kZSkgPT4gbm9kZURhdGEuZXhwYW5kYWJsZTtcblxuICAgIHByaXZhdGUgbG9hZFRyZWVOb2RlKCkge1xuICAgICAgICB0aGlzLnRyZWVWaWV3U2VydmljZS5nZXRUcmVlTm9kZXModGhpcy5ub2RlSWQpXG4gICAgICAgICAgICAuc3Vic2NyaWJlKFxuICAgICAgICAgICAgICAgICh0cmVlTm9kZTogVHJlZUJhc2VOb2RlW10pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kYXRhU291cmNlLmRhdGEgPSB0cmVlTm9kZTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIChlcnJvcikgPT4gdGhpcy5lcnJvci5lbWl0KGVycm9yKVxuICAgICAgICAgICAgKTtcbiAgICB9XG59XG4iXX0=