/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Injectable } from '@angular/core';
import { BehaviorSubject, merge } from 'rxjs';
import { map } from 'rxjs/operators';
import { FlatTreeControl } from '@angular/cdk/tree';
import { TreeViewService } from '../services/tree-view.service';
export class TreeViewDataSource {
    constructor(treeControl, treeViewService) {
        this.treeControl = treeControl;
        this.treeViewService = treeViewService;
        this.dataChange = new BehaviorSubject([]);
        this.childrenSubscription = null;
        this.changeSubscription = null;
        this.dataChange.subscribe((treeNodes) => this.treeNodes = treeNodes);
    }
    get data() {
        return this.treeNodes;
    }
    set data(value) {
        this.treeControl.dataNodes = value;
        this.dataChange.next(value);
    }
    connect(collectionViewer) {
        this.changeSubscription = this.treeControl.expansionModel.changed.subscribe((change) => {
            if (change.added &&
                change.added.length > 0) {
                this.expandTreeNodes(change);
            }
            else if (change.removed) {
                this.reduceTreeNodes(change);
            }
        });
        return merge(collectionViewer.viewChange, this.dataChange).pipe(map(() => this.data));
    }
    disconnect() {
        if (this.childrenSubscription) {
            this.childrenSubscription.unsubscribe();
        }
        if (this.changeSubscription) {
            this.changeSubscription.unsubscribe();
        }
    }
    expandTreeNodes(change) {
        change.added.forEach((node) => this.expandNode(node));
    }
    reduceTreeNodes(change) {
        change.removed.slice().reverse().forEach((node) => this.toggleNode(node));
    }
    expandNode(node) {
        this.childrenSubscription = this.treeViewService.getTreeNodes(node.nodeId)
            .subscribe((children) => {
            const index = this.data.indexOf(node);
            if (!children || index < 0) {
                node.expandable = false;
                return;
            }
            const nodes = children.map((actualNode) => {
                actualNode.level = node.level + 1;
                return actualNode;
            });
            this.data.splice(index + 1, 0, ...nodes);
            this.dataChange.next(this.data);
        });
    }
    toggleNode(node) {
        const index = this.data.indexOf(node);
        let count = 0;
        for (let i = index + 1; i < this.data.length
            && this.data[i].level > node.level; i++, count++) { }
        this.data.splice(index + 1, count);
        this.dataChange.next(this.data);
    }
}
TreeViewDataSource.decorators = [
    { type: Injectable }
];
TreeViewDataSource.ctorParameters = () => [
    { type: FlatTreeControl },
    { type: TreeViewService }
];
//# sourceMappingURL=data:application/json;base64,