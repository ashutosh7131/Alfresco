/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Injectable } from '@angular/core';
import { BehaviorSubject, merge } from 'rxjs';
import { map } from 'rxjs/operators';
import { FlatTreeControl } from '@angular/cdk/tree';
import { TreeViewService } from '../services/tree-view.service';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/cdk/tree';
import * as ɵngcc2 from '../services/tree-view.service';
export class TreeViewDataSource {
    constructor(treeControl, treeViewService) {
        this.treeControl = treeControl;
        this.treeViewService = treeViewService;
        this.dataChange = new BehaviorSubject([]);
        this.childrenSubscription = null;
        this.changeSubscription = null;
        this.dataChange.subscribe((treeNodes) => this.treeNodes = treeNodes);
    }
    get data() {
        return this.treeNodes;
    }
    set data(value) {
        this.treeControl.dataNodes = value;
        this.dataChange.next(value);
    }
    connect(collectionViewer) {
        this.changeSubscription = this.treeControl.expansionModel.changed.subscribe((change) => {
            if (change.added &&
                change.added.length > 0) {
                this.expandTreeNodes(change);
            }
            else if (change.removed) {
                this.reduceTreeNodes(change);
            }
        });
        return merge(collectionViewer.viewChange, this.dataChange).pipe(map(() => this.data));
    }
    disconnect() {
        if (this.childrenSubscription) {
            this.childrenSubscription.unsubscribe();
        }
        if (this.changeSubscription) {
            this.changeSubscription.unsubscribe();
        }
    }
    expandTreeNodes(change) {
        change.added.forEach((node) => this.expandNode(node));
    }
    reduceTreeNodes(change) {
        change.removed.slice().reverse().forEach((node) => this.toggleNode(node));
    }
    expandNode(node) {
        this.childrenSubscription = this.treeViewService.getTreeNodes(node.nodeId)
            .subscribe((children) => {
            const index = this.data.indexOf(node);
            if (!children || index < 0) {
                node.expandable = false;
                return;
            }
            const nodes = children.map((actualNode) => {
                actualNode.level = node.level + 1;
                return actualNode;
            });
            this.data.splice(index + 1, 0, ...nodes);
            this.dataChange.next(this.data);
        });
    }
    toggleNode(node) {
        const index = this.data.indexOf(node);
        let count = 0;
        for (let i = index + 1; i < this.data.length
            && this.data[i].level > node.level; i++, count++) { }
        this.data.splice(index + 1, count);
        this.dataChange.next(this.data);
    }
}
TreeViewDataSource.ɵfac = function TreeViewDataSource_Factory(t) { return new (t || TreeViewDataSource)(ɵngcc0.ɵɵinject(ɵngcc1.FlatTreeControl), ɵngcc0.ɵɵinject(ɵngcc2.TreeViewService)); };
TreeViewDataSource.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: TreeViewDataSource, factory: TreeViewDataSource.ɵfac });
TreeViewDataSource.ctorParameters = () => [
    { type: FlatTreeControl },
    { type: TreeViewService }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TreeViewDataSource, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc1.FlatTreeControl }, { type: ɵngcc2.TreeViewService }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJlZS12aWV3LWRhdGFzb3VyY2UuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL2hvbWUvdHJhdmlzL2J1aWxkL0FsZnJlc2NvL2FsZnJlc2NvLW5nMi1jb21wb25lbnRzL2xpYi9jb250ZW50LXNlcnZpY2VzL3NyYy9saWIvdHJlZS12aWV3L2RhdGEvdHJlZS12aWV3LWRhdGFzb3VyY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUVILE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFM0MsT0FBTyxFQUFFLGVBQWUsRUFBRSxLQUFLLEVBQWMsTUFBTSxNQUFNLENBQUM7QUFDMUQsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3JDLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUVwRCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sK0JBQStCLENBQUM7Ozs7QUFHaEUsTUFBTSxPQUFPLGtCQUFrQjtBQUMvQixJQWVJLFlBQW9CLFdBQTBDLEVBQzFDLGVBQWdDO0FBQ3hELFFBRndCLGdCQUFXLEdBQVgsV0FBVyxDQUErQjtBQUFDLFFBQzNDLG9CQUFlLEdBQWYsZUFBZSxDQUFpQjtBQUFDLFFBZHJELGVBQVUsR0FBRyxJQUFJLGVBQWUsQ0FBaUIsRUFBRSxDQUFDLENBQUM7QUFDekQsUUFBSSx5QkFBb0IsR0FBRyxJQUFJLENBQUM7QUFDaEMsUUFBSSx1QkFBa0IsR0FBRyxJQUFJLENBQUM7QUFDOUIsUUFZUSxJQUFJLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxDQUFDLFNBQVMsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUMsQ0FBQztBQUM3RSxJ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Q0FBQyxDQUFDO0FBQ3RELGdCQUFvQixPQUFPLFVBQVUsQ0FBQztBQUN0QyxZQUFnQixDQUFDLENBQUMsQ0FBQztBQUNuQixZQUFnQixJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxHQUFHLEtBQUssQ0FBQyxDQUFDO0FBQ3pELFlBQWdCLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUNoRCxRQUFZLENBQUMsQ0FBQyxDQUFDO0FBQ2YsSUFBSSxDQUFDO0FBQ0wsSUFDSSxVQUFVLENBQUMsSUFBa0I7QUFDakMsUUFBUSxNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUM5QyxRQUFRLElBQUksS0FBSyxHQUFHLENBQUMsQ0FBQztBQUN0QixRQUFRLEtBQUssSUFBSSxDQUFDLEdBQUcsS0FBSyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNO0FBQ3BELGVBQWUsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDLEVBQUUsRUFBRyxLQUFLLEVBQUUsRUFBRSxHQUFHO0FBQ2xFLFFBQVEsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxHQUFHLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQztBQUMzQyxRQUFRLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUN4QyxJQUFJLENBQUM7QUFDTDs4Q0E1RUMsVUFBVTtzSEFDVDtBQUFDO0FBRVMsWUFQSCxlQUFlO0FBQUksWUFFbkIsZUFBZTtBQUFHOzs7a0hBQUU7QUFBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvbGxlY3Rpb25WaWV3ZXIsIFNlbGVjdGlvbkNoYW5nZSB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9jb2xsZWN0aW9ucyc7XG5pbXBvcnQgeyBCZWhhdmlvclN1YmplY3QsIG1lcmdlLCBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBtYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBGbGF0VHJlZUNvbnRyb2wgfSBmcm9tICdAYW5ndWxhci9jZGsvdHJlZSc7XG5pbXBvcnQgeyBUcmVlQmFzZU5vZGUgfSBmcm9tICcuLi9tb2RlbHMvdHJlZS12aWV3Lm1vZGVsJztcbmltcG9ydCB7IFRyZWVWaWV3U2VydmljZSB9IGZyb20gJy4uL3NlcnZpY2VzL3RyZWUtdmlldy5zZXJ2aWNlJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFRyZWVWaWV3RGF0YVNvdXJjZSB7XG5cbiAgICB0cmVlTm9kZXM6IFRyZWVCYXNlTm9kZVtdO1xuICAgIGRhdGFDaGFuZ2UgPSBuZXcgQmVoYXZpb3JTdWJqZWN0PFRyZWVCYXNlTm9kZVtdPihbXSk7XG4gICAgY2hpbGRyZW5TdWJzY3JpcHRpb24gPSBudWxsO1xuICAgIGNoYW5nZVN1YnNjcmlwdGlvbiA9IG51bGw7XG5cbiAgICBnZXQgZGF0YSgpOiBUcmVlQmFzZU5vZGVbXSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRyZWVOb2RlcztcbiAgICB9XG5cbiAgICBzZXQgZGF0YSh2YWx1ZTogVHJlZUJhc2VOb2RlW10pIHtcbiAgICAgICAgdGhpcy50cmVlQ29udHJvbC5kYXRhTm9kZXMgPSB2YWx1ZTtcbiAgICAgICAgdGhpcy5kYXRhQ2hhbmdlLm5leHQodmFsdWUpO1xuICAgIH1cblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgdHJlZUNvbnRyb2w6IEZsYXRUcmVlQ29udHJvbDxUcmVlQmFzZU5vZGU+LFxuICAgICAgICAgICAgICAgIHByaXZhdGUgdHJlZVZpZXdTZXJ2aWNlOiBUcmVlVmlld1NlcnZpY2UpIHtcbiAgICAgICAgdGhpcy5kYXRhQ2hhbmdlLnN1YnNjcmliZSgodHJlZU5vZGVzKSA9PiB0aGlzLnRyZWVOb2RlcyA9IHRyZWVOb2Rlcyk7XG4gICAgfVxuXG4gICAgY29ubmVjdChjb2xsZWN0aW9uVmlld2VyOiBDb2xsZWN0aW9uVmlld2VyKTogT2JzZXJ2YWJsZTxUcmVlQmFzZU5vZGVbXT4ge1xuICAgICAgICB0aGlzLmNoYW5nZVN1YnNjcmlwdGlvbiA9IHRoaXMudHJlZUNvbnRyb2wuZXhwYW5zaW9uTW9kZWwuY2hhbmdlZC5zdWJzY3JpYmUoKGNoYW5nZSkgPT4ge1xuICAgICAgICAgICAgaWYgKChjaGFuZ2UgYXMgU2VsZWN0aW9uQ2hhbmdlPFRyZWVCYXNlTm9kZT4pLmFkZGVkICYmXG4gICAgICAgICAgICAgICAgKGNoYW5nZSBhcyBTZWxlY3Rpb25DaGFuZ2U8VHJlZUJhc2VOb2RlPikuYWRkZWQubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIHRoaXMuZXhwYW5kVHJlZU5vZGVzKGNoYW5nZSBhcyBTZWxlY3Rpb25DaGFuZ2U8VHJlZUJhc2VOb2RlPik7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKChjaGFuZ2UgYXMgU2VsZWN0aW9uQ2hhbmdlPFRyZWVCYXNlTm9kZT4pLnJlbW92ZWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnJlZHVjZVRyZWVOb2RlcyhjaGFuZ2UgYXMgU2VsZWN0aW9uQ2hhbmdlPFRyZWVCYXNlTm9kZT4pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIG1lcmdlKGNvbGxlY3Rpb25WaWV3ZXIudmlld0NoYW5nZSwgdGhpcy5kYXRhQ2hhbmdlKS5waXBlKG1hcCgoKSA9PiB0aGlzLmRhdGEpKTtcbiAgICB9XG5cbiAgICBkaXNjb25uZWN0KCkge1xuICAgICAgICBpZiAodGhpcy5jaGlsZHJlblN1YnNjcmlwdGlvbikge1xuICAgICAgICAgICAgdGhpcy5jaGlsZHJlblN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmNoYW5nZVN1YnNjcmlwdGlvbikge1xuICAgICAgICAgICAgdGhpcy5jaGFuZ2VTdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgZXhwYW5kVHJlZU5vZGVzKGNoYW5nZTogU2VsZWN0aW9uQ2hhbmdlPFRyZWVCYXNlTm9kZT4pIHtcbiAgICAgICAgY2hhbmdlLmFkZGVkLmZvckVhY2goKG5vZGUpID0+IHRoaXMuZXhwYW5kTm9kZShub2RlKSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSByZWR1Y2VUcmVlTm9kZXMoY2hhbmdlOiBTZWxlY3Rpb25DaGFuZ2U8VHJlZUJhc2VOb2RlPikge1xuICAgICAgICBjaGFuZ2UucmVtb3ZlZC5zbGljZSgpLnJldmVyc2UoKS5mb3JFYWNoKChub2RlKSA9PiB0aGlzLnRvZ2dsZU5vZGUobm9kZSkpO1xuICAgIH1cblxuICAgIHByaXZhdGUgZXhwYW5kTm9kZShub2RlOiBUcmVlQmFzZU5vZGUpIHtcbiAgICAgICAgdGhpcy5jaGlsZHJlblN1YnNjcmlwdGlvbiA9IHRoaXMudHJlZVZpZXdTZXJ2aWNlLmdldFRyZWVOb2Rlcyhub2RlLm5vZGVJZClcbiAgICAgICAgICAgIC5zdWJzY3JpYmUoKGNoaWxkcmVuKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgaW5kZXggPSB0aGlzLmRhdGEuaW5kZXhPZihub2RlKTtcbiAgICAgICAgICAgICAgICBpZiAoIWNoaWxkcmVuIHx8IGluZGV4IDwgMCkge1xuICAgICAgICAgICAgICAgICAgICBub2RlLmV4cGFuZGFibGUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCBub2RlcyA9IGNoaWxkcmVuLm1hcCgoYWN0dWFsTm9kZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBhY3R1YWxOb2RlLmxldmVsID0gbm9kZS5sZXZlbCArIDE7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBhY3R1YWxOb2RlO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHRoaXMuZGF0YS5zcGxpY2UoaW5kZXggKyAxLCAwLCAuLi5ub2Rlcyk7XG4gICAgICAgICAgICAgICAgdGhpcy5kYXRhQ2hhbmdlLm5leHQodGhpcy5kYXRhKTtcbiAgICAgICAgICAgIH0pO1xuICAgIH1cblxuICAgIHRvZ2dsZU5vZGUobm9kZTogVHJlZUJhc2VOb2RlKSB7XG4gICAgICAgIGNvbnN0IGluZGV4ID0gdGhpcy5kYXRhLmluZGV4T2Yobm9kZSk7XG4gICAgICAgIGxldCBjb3VudCA9IDA7XG4gICAgICAgIGZvciAobGV0IGkgPSBpbmRleCArIDE7IGkgPCB0aGlzLmRhdGEubGVuZ3RoXG4gICAgICAgICAgICAmJiB0aGlzLmRhdGFbaV0ubGV2ZWwgPiBub2RlLmxldmVsOyBpKysgLCBjb3VudCsrKSB7IH1cbiAgICAgICAgdGhpcy5kYXRhLnNwbGljZShpbmRleCArIDEsIGNvdW50KTtcbiAgICAgICAgdGhpcy5kYXRhQ2hhbmdlLm5leHQodGhpcy5kYXRhKTtcbiAgICB9XG5cbn1cbiJdfQ==