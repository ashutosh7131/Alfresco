import { __awaiter } from "tslib";
import { Injectable } from '@angular/core';
import { GroupsApi } from '@alfresco/js-api';
import { AlfrescoApiService } from '@alfresco/adf-core';
import * as i0 from "@angular/core";
import * as i1 from "@alfresco/adf-core";
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@alfresco/adf-core';
export class GroupService {
    constructor(alfrescoApiService) {
        this.alfrescoApiService = alfrescoApiService;
    }
    get groupsApi() {
        var _a;
        this._groupsApi = (_a = this._groupsApi) !== null && _a !== void 0 ? _a : new GroupsApi(this.alfrescoApiService.getInstance());
        return this._groupsApi;
    }
    listAllGroupMembershipsForPerson(personId, opts, accumulator = []) {
        return __awaiter(this, void 0, void 0, function* () {
            const groupsPaginated = yield this.groupsApi.listGroupMembershipsForPerson(personId, opts);
            accumulator = [...accumulator, ...groupsPaginated.list.entries];
            if (groupsPaginated.list.pagination.hasMoreItems) {
                const skip = groupsPaginated.list.pagination.skipCount + groupsPaginated.list.pagination.count;
                return this.listAllGroupMembershipsForPerson(personId, {
                    maxItems: opts.maxItems,
                    skipCount: skip
                }, accumulator);
            }
            else {
                return accumulator;
            }
        });
    }
}
GroupService.ɵfac = function GroupService_Factory(t) { return new (t || GroupService)(ɵngcc0.ɵɵinject(ɵngcc1.AlfrescoApiService)); };
GroupService.ɵprov = i0.ɵɵdefineInjectable({ factory: function GroupService_Factory() { return new GroupService(i0.ɵɵinject(i1.AlfrescoApiService)); }, token: GroupService, providedIn: "root" });
GroupService.ctorParameters = () => [
    { type: AlfrescoApiService }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(GroupService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc1.AlfrescoApiService }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JvdXAuc2VydmljZS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vaG9tZS90cmF2aXMvYnVpbGQvQWxmcmVzY28vYWxmcmVzY28tbmcyLWNvbXBvbmVudHMvbGliL2NvbnRlbnQtc2VydmljZXMvc3JjL2xpYi9ncm91cC9zZXJ2aWNlcy9ncm91cC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFpQkEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQWMsU0FBUyxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDekQsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDeEQ7QUFFc0I7OztBQUV0QixNQUFNLE9BQU8sWUFBWTtBQUN6QixJQU9JLFlBQ1ksa0JBQXNDO0FBQ25ELFFBRGEsdUJBQWtCLEdBQWxCLGtCQUFrQixDQUFvQjtBQUN0RCxJQUNJLENBQUM7QUFDTCxJQVRJLElBQUksU0FBUztBQUFLO0FBQ2pCLFFBQUcsSUFBSSxDQUFDLFVBQVUsU0FBRyxJQUFJLENBQUMsVUFBVSxtQ0FBSSxJQUFJLFNBQVMsQ0FBQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQztBQUNsRyxRQUFRLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQztBQUMvQixJQUFJLENBQUM7QUFDTCxJQU1VLGdDQUFnQyxDQUFDLFFBQWdCLEVBQUUsSUFBVSxFQUFFLFdBQVcsR0FBRyxFQUFFO0FBQUk7QUFDdEQsWUFBL0IsTUFBTSxlQUFlLEdBQUcsTUFBTSxJQUFJLENBQUMsU0FBUyxDQUFDLDZCQUE2QixDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsQ0FBQztBQUNuRyxZQUFRLFdBQVcsR0FBRyxDQUFDLEdBQUcsV0FBVyxFQUFFLEdBQUcsZUFBZSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUN4RSxZQUFRLElBQUksZUFBZSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsWUFBWSxFQUFFO0FBQzFELGdCQUFZLE1BQU0sSUFBSSxHQUFHLGVBQWUsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLFNBQVMsR0FBRyxlQUFlLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUM7QUFDM0csZ0JBQVksT0FBTyxJQUFJLENBQUMsZ0NBQWdDLENBQUMsUUFBUSxFQUFFO0FBQ25FLG9CQUFnQixRQUFRLEVBQUUsSUFBSSxDQUFDLFFBQVE7QUFDdkMsb0JBQWdCLFNBQVMsRUFBRSxJQUFJO0FBQy9CLGlCQUFhLEVBQUUsV0FBVyxDQUFDLENBQUM7QUFDNUIsYUFBUztBQUFDLGlCQUFLO0FBQ2YsZ0JBQVksT0FBTyxXQUFXLENBQUM7QUFDL0IsYUFBUztBQUNULFFBQUksQ0FBQztBQUVMLEtBRks7QUFDTDtxSUFBQztBQUNELG1NQTNCSztBQUFDO0VBSEwsVUFBVSxTQUFDLHJCQUtHLFlBUE4sa0JBQWtCO0FBQUc7R0FHMUIsVUFBVSxFQUFFLE1BQU0sY0FDckI7Ozs7O21GQUorQjtBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgR3JvdXBFbnRyeSwgR3JvdXBzQXBpIH0gZnJvbSAnQGFsZnJlc2NvL2pzLWFwaSc7XG5pbXBvcnQgeyBBbGZyZXNjb0FwaVNlcnZpY2UgfSBmcm9tICdAYWxmcmVzY28vYWRmLWNvcmUnO1xuXG5ASW5qZWN0YWJsZSh7XG4gICAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIEdyb3VwU2VydmljZSB7XG5cbiAgICBfZ3JvdXBzQXBpOiBHcm91cHNBcGk7XG4gICAgZ2V0IGdyb3Vwc0FwaSgpOiBHcm91cHNBcGkge1xuICAgICAgICB0aGlzLl9ncm91cHNBcGkgPSB0aGlzLl9ncm91cHNBcGkgPz8gbmV3IEdyb3Vwc0FwaSh0aGlzLmFsZnJlc2NvQXBpU2VydmljZS5nZXRJbnN0YW5jZSgpKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2dyb3Vwc0FwaTtcbiAgICB9XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHJpdmF0ZSBhbGZyZXNjb0FwaVNlcnZpY2U6IEFsZnJlc2NvQXBpU2VydmljZVxuICAgICkge1xuICAgIH1cblxuICAgIGFzeW5jIGxpc3RBbGxHcm91cE1lbWJlcnNoaXBzRm9yUGVyc29uKHBlcnNvbklkOiBzdHJpbmcsIG9wdHM/OiBhbnksIGFjY3VtdWxhdG9yID0gW10pOiBQcm9taXNlPEdyb3VwRW50cnlbXT4ge1xuICAgICAgICBjb25zdCBncm91cHNQYWdpbmF0ZWQgPSBhd2FpdCB0aGlzLmdyb3Vwc0FwaS5saXN0R3JvdXBNZW1iZXJzaGlwc0ZvclBlcnNvbihwZXJzb25JZCwgb3B0cyk7XG4gICAgICAgIGFjY3VtdWxhdG9yID0gWy4uLmFjY3VtdWxhdG9yLCAuLi5ncm91cHNQYWdpbmF0ZWQubGlzdC5lbnRyaWVzXTtcbiAgICAgICAgaWYgKGdyb3Vwc1BhZ2luYXRlZC5saXN0LnBhZ2luYXRpb24uaGFzTW9yZUl0ZW1zKSB7XG4gICAgICAgICAgICBjb25zdCBza2lwID0gZ3JvdXBzUGFnaW5hdGVkLmxpc3QucGFnaW5hdGlvbi5za2lwQ291bnQgKyBncm91cHNQYWdpbmF0ZWQubGlzdC5wYWdpbmF0aW9uLmNvdW50O1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubGlzdEFsbEdyb3VwTWVtYmVyc2hpcHNGb3JQZXJzb24ocGVyc29uSWQsIHtcbiAgICAgICAgICAgICAgICBtYXhJdGVtczogb3B0cy5tYXhJdGVtcyxcbiAgICAgICAgICAgICAgICBza2lwQ291bnQ6IHNraXBcbiAgICAgICAgICAgIH0sIGFjY3VtdWxhdG9yKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgICAgICAgfVxuICAgIH1cbn1cbiJdfQ==