import { TypesApi } from '@alfresco/js-api';
import { Injectable } from '@angular/core';
import { AlfrescoApiService } from '@alfresco/adf-core';
import { from } from 'rxjs';
import { map } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@alfresco/adf-core";
export class ContentTypeService {
    constructor(alfrescoApiService) {
        this.alfrescoApiService = alfrescoApiService;
    }
    get typesApi() {
        var _a;
        this._typesApi = (_a = this._typesApi) !== null && _a !== void 0 ? _a : new TypesApi(this.alfrescoApiService.getInstance());
        return this._typesApi;
    }
    getContentTypeByPrefix(prefixedType) {
        return from(this.typesApi.getType(prefixedType));
    }
    getContentTypeChildren(nodeType) {
        const where = `(parentId in ('${nodeType}') and not namespaceUri matches('http://www.alfresco.*'))`;
        const opts = {
            where,
            include: ['properties']
        };
        return from(this.typesApi.listTypes(opts)).pipe(map((result) => result.list.entries));
    }
}
ContentTypeService.ɵprov = i0.ɵɵdefineInjectable({ factory: function ContentTypeService_Factory() { return new ContentTypeService(i0.ɵɵinject(i1.AlfrescoApiService)); }, token: ContentTypeService, providedIn: "root" });
ContentTypeService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
ContentTypeService.ctorParameters = () => [
    { type: AlfrescoApiService }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udGVudC10eXBlLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiL2hvbWUvdHJhdmlzL2J1aWxkL0FsZnJlc2NvL2FsZnJlc2NvLW5nMi1jb21wb25lbnRzL2xpYi9jb250ZW50LXNlcnZpY2VzL3NyYy8iLCJzb3VyY2VzIjpbImxpYi9jb250ZW50LXR5cGUvY29udGVudC10eXBlLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBaUJBLE9BQU8sRUFBeUIsUUFBUSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDbkUsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUN4RCxPQUFPLEVBQUUsSUFBSSxFQUFjLE1BQU0sTUFBTSxDQUFDO0FBQ3hDLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7O0FBSXJDLE1BQU0sT0FBTyxrQkFBa0I7SUFRM0IsWUFBb0Isa0JBQXNDO1FBQXRDLHVCQUFrQixHQUFsQixrQkFBa0IsQ0FBb0I7SUFDMUQsQ0FBQztJQU5ELElBQUksUUFBUTs7UUFDUixJQUFJLENBQUMsU0FBUyxTQUFHLElBQUksQ0FBQyxTQUFTLG1DQUFJLElBQUksUUFBUSxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDO1FBQ3ZGLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQztJQUMxQixDQUFDO0lBS0Qsc0JBQXNCLENBQUMsWUFBb0I7UUFDdkMsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQztJQUNyRCxDQUFDO0lBRUQsc0JBQXNCLENBQUMsUUFBZ0I7UUFDbkMsTUFBTSxLQUFLLEdBQUcsa0JBQWtCLFFBQVEsMkRBQTJELENBQUM7UUFDcEcsTUFBTSxJQUFJLEdBQVE7WUFDZCxLQUFLO1lBQ0wsT0FBTyxFQUFFLENBQUMsWUFBWSxDQUFDO1NBQzFCLENBQUM7UUFDRixPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FDM0MsR0FBRyxDQUFDLENBQUMsTUFBa0IsRUFBRSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FDbkQsQ0FBQztJQUNOLENBQUM7Ozs7WUEzQkosVUFBVSxTQUFDO2dCQUNSLFVBQVUsRUFBRSxNQUFNO2FBQ3JCOzs7WUFMUSxrQkFBa0IiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBUeXBlRW50cnksIFR5cGVQYWdpbmcsIFR5cGVzQXBpIH0gZnJvbSAnQGFsZnJlc2NvL2pzLWFwaSc7XG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBBbGZyZXNjb0FwaVNlcnZpY2UgfSBmcm9tICdAYWxmcmVzY28vYWRmLWNvcmUnO1xuaW1wb3J0IHsgZnJvbSwgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgbWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuQEluamVjdGFibGUoe1xuICAgIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBDb250ZW50VHlwZVNlcnZpY2Uge1xuXG4gICAgX3R5cGVzQXBpOiBUeXBlc0FwaTtcbiAgICBnZXQgdHlwZXNBcGkoKTogVHlwZXNBcGkge1xuICAgICAgICB0aGlzLl90eXBlc0FwaSA9IHRoaXMuX3R5cGVzQXBpID8/IG5ldyBUeXBlc0FwaSh0aGlzLmFsZnJlc2NvQXBpU2VydmljZS5nZXRJbnN0YW5jZSgpKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3R5cGVzQXBpO1xuICAgIH1cblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgYWxmcmVzY29BcGlTZXJ2aWNlOiBBbGZyZXNjb0FwaVNlcnZpY2UpIHtcbiAgICB9XG5cbiAgICBnZXRDb250ZW50VHlwZUJ5UHJlZml4KHByZWZpeGVkVHlwZTogc3RyaW5nKTogT2JzZXJ2YWJsZTxUeXBlRW50cnk+IHtcbiAgICAgICAgcmV0dXJuIGZyb20odGhpcy50eXBlc0FwaS5nZXRUeXBlKHByZWZpeGVkVHlwZSkpO1xuICAgIH1cblxuICAgIGdldENvbnRlbnRUeXBlQ2hpbGRyZW4obm9kZVR5cGU6IHN0cmluZyk6IE9ic2VydmFibGU8VHlwZUVudHJ5W10+IHtcbiAgICAgICAgY29uc3Qgd2hlcmUgPSBgKHBhcmVudElkIGluICgnJHtub2RlVHlwZX0nKSBhbmQgbm90IG5hbWVzcGFjZVVyaSBtYXRjaGVzKCdodHRwOi8vd3d3LmFsZnJlc2NvLionKSlgO1xuICAgICAgICBjb25zdCBvcHRzOiBhbnkgPSB7XG4gICAgICAgICAgICB3aGVyZSxcbiAgICAgICAgICAgIGluY2x1ZGU6IFsncHJvcGVydGllcyddXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBmcm9tKHRoaXMudHlwZXNBcGkubGlzdFR5cGVzKG9wdHMpKS5waXBlKFxuICAgICAgICAgICAgbWFwKChyZXN1bHQ6IFR5cGVQYWdpbmcpID0+IHJlc3VsdC5saXN0LmVudHJpZXMpXG4gICAgICAgICk7XG4gICAgfVxufVxuIl19