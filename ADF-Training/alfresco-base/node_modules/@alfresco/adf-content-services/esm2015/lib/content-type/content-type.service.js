import { TypesApi } from '@alfresco/js-api';
import { Injectable } from '@angular/core';
import { AlfrescoApiService } from '@alfresco/adf-core';
import { from } from 'rxjs';
import { map } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@alfresco/adf-core";
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@alfresco/adf-core';
export class ContentTypeService {
    constructor(alfrescoApiService) {
        this.alfrescoApiService = alfrescoApiService;
    }
    get typesApi() {
        var _a;
        this._typesApi = (_a = this._typesApi) !== null && _a !== void 0 ? _a : new TypesApi(this.alfrescoApiService.getInstance());
        return this._typesApi;
    }
    getContentTypeByPrefix(prefixedType) {
        return from(this.typesApi.getType(prefixedType));
    }
    getContentTypeChildren(nodeType) {
        const where = `(parentId in ('${nodeType}') and not namespaceUri matches('http://www.alfresco.*'))`;
        const opts = {
            where,
            include: ['properties']
        };
        return from(this.typesApi.listTypes(opts)).pipe(map((result) => result.list.entries));
    }
}
ContentTypeService.ɵfac = function ContentTypeService_Factory(t) { return new (t || ContentTypeService)(ɵngcc0.ɵɵinject(ɵngcc1.AlfrescoApiService)); };
ContentTypeService.ɵprov = i0.ɵɵdefineInjectable({ factory: function ContentTypeService_Factory() { return new ContentTypeService(i0.ɵɵinject(i1.AlfrescoApiService)); }, token: ContentTypeService, providedIn: "root" });
ContentTypeService.ctorParameters = () => [
    { type: AlfrescoApiService }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ContentTypeService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc1.AlfrescoApiService }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udGVudC10eXBlLnNlcnZpY2UuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL2hvbWUvdHJhdmlzL2J1aWxkL0FsZnJlc2NvL2FsZnJlc2NvLW5nMi1jb21wb25lbnRzL2xpYi9jb250ZW50LXNlcnZpY2VzL3NyYy9saWIvY29udGVudC10eXBlL2NvbnRlbnQtdHlwZS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWlCQSxPQUFPLEVBQXlCLFFBQVEsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQ25FLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDeEQsT0FBTyxFQUFFLElBQUksRUFBYyxNQUFNLE1BQU0sQ0FBQztBQUN4QyxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDckM7QUFFQTs7O0FBQ0EsTUFBTSxPQUFPLGtCQUFrQjtBQUMvQixJQU9JLFlBQW9CLGtCQUFzQztBQUM5RCxRQUR3Qix1QkFBa0IsR0FBbEIsa0JBQWtCLENBQW9CO0FBQUMsSUFDM0QsQ0FBQztBQUNMLElBUEksSUFBSSxRQUFRO0FBQUs7QUFDZixRQUFFLElBQUksQ0FBQyxTQUFTLFNBQUcsSUFBSSxDQUFDLFNBQVMsbUNBQUksSUFBSSxRQUFRLENBQUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUM7QUFDL0YsUUFBUSxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUM7QUFDOUIsSUFBSSxDQUFDO0FBQ0wsSUFJSSxzQkFBc0IsQ0FBQyxZQUFvQjtBQUFJLFFBQzNDLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUM7QUFDekQsSUFBSSxDQUFDO0FBQ0wsSUFDSSxzQkFBc0IsQ0FBQyxRQUFnQjtBQUFJLFFBQ3ZDLE1BQU0sS0FBSyxHQUFHLGtCQUFrQixRQUFRLDJEQUEyRCxDQUFDO0FBQzVHLFFBQVEsTUFBTSxJQUFJLEdBQVE7QUFDMUIsWUFBWSxLQUFLO0FBQ2pCLFlBQVksT0FBTyxFQUFFLENBQUMsWUFBWSxDQUFDO0FBQ25DLFNBQVMsQ0FBQztBQUNWLFFBQVEsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQzNDLEdBQUcsQ0FBQyxDQUFDLE1BQWtCLEVBQUUsRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQ25ELENBQUM7QUFDVixJQUFJLENBQUM7QUFDTDt1SkFBQztBQUNELDJOQTFCSztBQUFDO0VBSEwsVUFBVSxTQUFDLHJCQUtHLFlBUk4sa0JBQWtCO0FBQUc7R0FJMUIsVUFBVSxFQUFFLE1BQU0sY0FDckI7Ozs7O21GQUwrQjtBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgVHlwZUVudHJ5LCBUeXBlUGFnaW5nLCBUeXBlc0FwaSB9IGZyb20gJ0BhbGZyZXNjby9qcy1hcGknO1xuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQWxmcmVzY29BcGlTZXJ2aWNlIH0gZnJvbSAnQGFsZnJlc2NvL2FkZi1jb3JlJztcbmltcG9ydCB7IGZyb20sIE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IG1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbkBJbmplY3RhYmxlKHtcbiAgICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgQ29udGVudFR5cGVTZXJ2aWNlIHtcblxuICAgIF90eXBlc0FwaTogVHlwZXNBcGk7XG4gICAgZ2V0IHR5cGVzQXBpKCk6IFR5cGVzQXBpIHtcbiAgICAgICAgdGhpcy5fdHlwZXNBcGkgPSB0aGlzLl90eXBlc0FwaSA/PyBuZXcgVHlwZXNBcGkodGhpcy5hbGZyZXNjb0FwaVNlcnZpY2UuZ2V0SW5zdGFuY2UoKSk7XG4gICAgICAgIHJldHVybiB0aGlzLl90eXBlc0FwaTtcbiAgICB9XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGFsZnJlc2NvQXBpU2VydmljZTogQWxmcmVzY29BcGlTZXJ2aWNlKSB7XG4gICAgfVxuXG4gICAgZ2V0Q29udGVudFR5cGVCeVByZWZpeChwcmVmaXhlZFR5cGU6IHN0cmluZyk6IE9ic2VydmFibGU8VHlwZUVudHJ5PiB7XG4gICAgICAgIHJldHVybiBmcm9tKHRoaXMudHlwZXNBcGkuZ2V0VHlwZShwcmVmaXhlZFR5cGUpKTtcbiAgICB9XG5cbiAgICBnZXRDb250ZW50VHlwZUNoaWxkcmVuKG5vZGVUeXBlOiBzdHJpbmcpOiBPYnNlcnZhYmxlPFR5cGVFbnRyeVtdPiB7XG4gICAgICAgIGNvbnN0IHdoZXJlID0gYChwYXJlbnRJZCBpbiAoJyR7bm9kZVR5cGV9JykgYW5kIG5vdCBuYW1lc3BhY2VVcmkgbWF0Y2hlcygnaHR0cDovL3d3dy5hbGZyZXNjby4qJykpYDtcbiAgICAgICAgY29uc3Qgb3B0czogYW55ID0ge1xuICAgICAgICAgICAgd2hlcmUsXG4gICAgICAgICAgICBpbmNsdWRlOiBbJ3Byb3BlcnRpZXMnXVxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gZnJvbSh0aGlzLnR5cGVzQXBpLmxpc3RUeXBlcyhvcHRzKSkucGlwZShcbiAgICAgICAgICAgIG1hcCgocmVzdWx0OiBUeXBlUGFnaW5nKSA9PiByZXN1bHQubGlzdC5lbnRyaWVzKVxuICAgICAgICApO1xuICAgIH1cbn1cbiJdfQ==