/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, Input, ViewChild, ViewContainerRef, ComponentFactoryResolver, Inject } from '@angular/core';
import { SearchFilterService } from '../../services/search-filter.service';
import { BaseQueryBuilderService } from '../../services/base-query-builder.service';
import { SEARCH_QUERY_SERVICE_TOKEN } from '../../search-query-service.token';
export class SearchWidgetContainerComponent {
    constructor(searchFilterService, queryBuilder, componentFactoryResolver) {
        this.searchFilterService = searchFilterService;
        this.queryBuilder = queryBuilder;
        this.componentFactoryResolver = componentFactoryResolver;
    }
    ngOnInit() {
        const componentType = this.searchFilterService.widgets[this.selector];
        if (componentType) {
            const factory = this.componentFactoryResolver.resolveComponentFactory(componentType);
            if (factory) {
                this.content.clear();
                this.componentRef = this.content.createComponent(factory, 0);
                this.setupWidget(this.componentRef);
            }
        }
    }
    ngOnChanges(changes) {
        var _a, _b;
        if (((_a = changes['value']) === null || _a === void 0 ? void 0 : _a.currentValue) && ((_b = this.componentRef) === null || _b === void 0 ? void 0 : _b.instance)) {
            this.componentRef.instance.isActive = true;
            this.componentRef.instance.setValue(changes['value'].currentValue);
        }
    }
    setupWidget(ref) {
        if (ref && ref.instance) {
            ref.instance.id = this.id;
            ref.instance.settings = Object.assign({}, this.settings);
            ref.instance.context = this.queryBuilder;
            if (this.value) {
                ref.instance.isActive = true;
                ref.instance.startValue = this.value;
            }
        }
    }
    ngOnDestroy() {
        if (this.componentRef) {
            this.componentRef.destroy();
            this.componentRef = null;
        }
    }
    applyInnerWidget() {
        this.componentRef.instance.submitValues();
    }
    setValue(currentValue) {
        this.componentRef.instance.isActive = true;
        this.componentRef.instance.setValue(currentValue);
    }
    hasValueSelected() {
        return this.componentRef.instance.hasValidValue();
    }
    getCurrentValue() {
        return this.componentRef.instance.getCurrentValue();
    }
    getDisplayValue() {
        var _a;
        if (!((_a = this.componentRef) === null || _a === void 0 ? void 0 : _a.instance)) {
            return null;
        }
        return this.componentRef.instance.displayValue$;
    }
    resetInnerWidget() {
        if (this.componentRef && this.componentRef.instance) {
            this.componentRef.instance.reset();
        }
    }
}
SearchWidgetContainerComponent.decorators = [
    { type: Component, args: [{
                selector: 'adf-search-widget-container',
                template: '<div #content></div>'
            },] }
];
SearchWidgetContainerComponent.ctorParameters = () => [
    { type: SearchFilterService },
    { type: BaseQueryBuilderService, decorators: [{ type: Inject, args: [SEARCH_QUERY_SERVICE_TOKEN,] }] },
    { type: ComponentFactoryResolver }
];
SearchWidgetContainerComponent.propDecorators = {
    content: [{ type: ViewChild, args: ['content', { read: ViewContainerRef, static: true },] }],
    id: [{ type: Input }],
    selector: [{ type: Input }],
    settings: [{ type: Input }],
    config: [{ type: Input }],
    value: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,