/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, Input, Output, EventEmitter, ViewEncapsulation, ViewChild, Inject, ElementRef } from '@angular/core';
import { ConfigurableFocusTrapFactory } from '@angular/cdk/a11y';
import { TranslationService } from '@alfresco/adf-core';
import { SearchWidgetContainerComponent } from '../search-widget-container/search-widget-container.component';
import { SearchHeaderQueryBuilderService } from '../../services/search-header-query-builder.service';
import { SEARCH_QUERY_SERVICE_TOKEN } from '../../search-query-service.token';
import { Subject } from 'rxjs';
export class SearchFilterContainerComponent {
    constructor(searchFilterQueryBuilder, translationService, focusTrapFactory) {
        this.searchFilterQueryBuilder = searchFilterQueryBuilder;
        this.translationService = translationService;
        this.focusTrapFactory = focusTrapFactory;
        this.filterChange = new EventEmitter();
        this.onDestroy$ = new Subject();
    }
    ngOnInit() {
        this.category = this.searchFilterQueryBuilder.getCategoryForColumn(this.col.key);
        this.initialValue = this.value && this.value[this.col.key] ? this.value[this.col.key] : undefined;
    }
    ngOnDestroy() {
        this.onDestroy$.next(true);
        this.onDestroy$.complete();
    }
    onKeyPressed(event, menuTrigger) {
        if (event.key === 'Enter' && this.widgetContainer.selector !== 'check-list') {
            this.onApply();
            menuTrigger.closeMenu();
        }
    }
    onApply() {
        if (this.widgetContainer.hasValueSelected()) {
            this.searchFilterQueryBuilder.setActiveFilter(this.category.columnKey, this.widgetContainer.getCurrentValue());
            this.filterChange.emit();
            this.widgetContainer.applyInnerWidget();
        }
        else {
            this.resetSearchFilter();
        }
    }
    onClearButtonClick(event) {
        event.stopPropagation();
        this.resetSearchFilter();
    }
    resetSearchFilter() {
        this.widgetContainer.resetInnerWidget();
        this.searchFilterQueryBuilder.removeActiveFilter(this.category.columnKey);
        this.filterChange.emit();
    }
    getTooltipTranslation(columnTitle) {
        if (!columnTitle) {
            columnTitle = 'SEARCH.SEARCH_HEADER.TYPE';
        }
        return this.translationService.instant('SEARCH.SEARCH_HEADER.FILTER_BY', { category: this.translationService.instant(columnTitle) });
    }
    isActive() {
        return this.widgetContainer && this.widgetContainer.componentRef && this.widgetContainer.componentRef.instance.isActive;
    }
    onMenuOpen() {
        if (this.filterContainer && !this.focusTrap) {
            this.focusTrap = this.focusTrapFactory.create(this.filterContainer.nativeElement);
            this.focusTrap.focusInitialElement();
        }
    }
    onClosed() {
        this.focusTrap.destroy();
        this.focusTrap = null;
    }
}
SearchFilterContainerComponent.decorators = [
    { type: Component, args: [{
                selector: 'adf-search-filter-container',
                template: "<div *ngIf=\"!!category\"\n     class=\"adf-filter\">\n    <button mat-icon-button\n            [matMenuTriggerFor]=\"filter\"\n            id=\"filter-menu-button\"\n            #menuTrigger=\"matMenuTrigger\"\n            (click)=\"$event.stopPropagation()\"\n            (menuOpened)=\"onMenuOpen()\"\n            (keyup.enter)=\"$event.stopPropagation()\"\n            class=\"adf-filter-button\"\n            [attr.aria-label]=\"getTooltipTranslation(col?.title)\"\n            [matTooltip]=\"getTooltipTranslation(col?.title)\">\n        <adf-icon value=\"adf:filter\"\n                  [ngClass]=\"{ 'adf-icon-active': isActive() || menuTrigger.menuOpen }\"\n                  matBadge=\"filter\"\n                  matBadgeColor=\"warn\"\n                  [matBadgeHidden]=\"!isActive()\">\n        </adf-icon>\n    </button>\n\n    <mat-menu #filter=\"matMenu\"\n              class=\"adf-filter-menu\"\n              (closed)=\"onClosed()\">\n        <div #filterContainer\n             (keydown.tab)=\"$event.stopPropagation();\">\n            <div (click)=\"$event.stopPropagation()\"\n                 class=\"adf-filter-container\">\n                <div class=\"adf-filter-title\">{{ category?.name | translate }}</div>\n                <adf-search-widget-container (keypress)=\"onKeyPressed($event, menuTrigger)\"\n                                             [id]=\"category?.id\"\n                                             [selector]=\"category?.component?.selector\"\n                                             [settings]=\"category?.component?.settings\"\n                                             [value]=\"initialValue\">\n                </adf-search-widget-container>\n            </div>\n            <mat-dialog-actions class=\"adf-filter-actions\">\n                <button mat-button\n                        id=\"clear-filter-button\"\n                        (click)=\"onClearButtonClick($event)\">{{ 'SEARCH.SEARCH_HEADER.CLEAR' | translate | uppercase }}\n                </button>\n                <button mat-button\n                        color=\"primary\"\n                        id=\"apply-filter-button\"\n                        class=\"adf-filter-apply-button\"\n                        (click)=\"onApply()\">{{ 'SEARCH.SEARCH_HEADER.APPLY' | translate | uppercase }}\n                </button>\n            </mat-dialog-actions>\n        </div>\n    </mat-menu>\n</div>\n",
                encapsulation: ViewEncapsulation.None,
                styles: [".adf-filter-button{margin-left:-7px!important}.adf-filter-button .adf-icon{color:var(--theme-icon-fg-color);opacity:1}.adf-filter-button .adf-icon-active{color:var(--theme-primary-color)}.adf-filter-button .adf-icon .mat-badge-active{border:2px solid var(--theme-card-bg-color)!important}.adf-filter-button .mat-icon{height:18px;width:18px}.adf-filter-button .mat-badge-content{height:10px;right:-6px!important;top:-3px!important;width:10px}.adf-filter-container{color:var(--theme-text-bold-color)!important;display:flex;flex-direction:column;padding:15px 15px 10px}.adf-filter-container .adf-facet-buttons{display:none}.adf-filter-container .adf-search-check-list{padding:5px 0}.adf-filter-container input{background:2px solid var(--theme-card-bg-color)!important}.adf-filter-title{color:var(--theme-text-bold-color);font-size:1.1em;padding-bottom:5px}.adf-filter-actions{background-color:var(--theme-hover-bg-color);display:flex;justify-content:flex-end;padding:15px}.adf-filter-actions>button{color:var(--theme-text-bold-color);font-size:.9em}.mat-menu-panel.adf-filter-menu .mat-menu-content{min-width:260px;padding:0}"]
            },] }
];
SearchFilterContainerComponent.ctorParameters = () => [
    { type: SearchHeaderQueryBuilderService, decorators: [{ type: Inject, args: [SEARCH_QUERY_SERVICE_TOKEN,] }] },
    { type: TranslationService },
    { type: ConfigurableFocusTrapFactory }
];
SearchFilterContainerComponent.propDecorators = {
    col: [{ type: Input }],
    value: [{ type: Input }],
    filterChange: [{ type: Output }],
    widgetContainer: [{ type: ViewChild, args: [SearchWidgetContainerComponent,] }],
    filterContainer: [{ type: ViewChild, args: ['filterContainer',] }]
};
//# sourceMappingURL=data:application/json;base64,