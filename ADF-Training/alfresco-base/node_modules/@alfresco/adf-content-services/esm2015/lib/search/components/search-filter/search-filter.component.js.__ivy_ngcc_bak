/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, Inject, Input, ViewEncapsulation } from '@angular/core';
import { SearchQueryBuilderService } from '../../services/search-query-builder.service';
import { SEARCH_QUERY_SERVICE_TOKEN } from '../../search-query-service.token';
import { SearchFacetFiltersService } from '../../services/search-facet-filters.service';
export class SearchFilterComponent {
    constructor(queryBuilder, facetFiltersService) {
        this.queryBuilder = queryBuilder;
        this.facetFiltersService = facetFiltersService;
        this.showContextFacets = true;
        this.facetQueriesLabel = 'Facet Queries';
        this.facetExpanded = {
            'default': false
        };
        if (queryBuilder.config && queryBuilder.config.facetQueries) {
            this.facetQueriesLabel = queryBuilder.config.facetQueries.label || 'Facet Queries';
            this.facetExpanded['query'] = queryBuilder.config.facetQueries.expanded;
        }
        if (queryBuilder.config && queryBuilder.config.facetFields) {
            this.facetExpanded['field'] = queryBuilder.config.facetFields.expanded;
        }
        if (queryBuilder.config && queryBuilder.config.facetIntervals) {
            this.facetExpanded['interval'] = queryBuilder.config.facetIntervals.expanded;
        }
        this.displayResetButton = this.queryBuilder.config && !!this.queryBuilder.config.resetButton;
    }
    shouldExpand(field) {
        return this.facetExpanded[field.type] || this.facetExpanded['default'];
    }
    getBucketCountDisplay(bucket) {
        return bucket.count === null ? '' : `(${bucket.count})`;
    }
}
SearchFilterComponent.decorators = [
    { type: Component, args: [{
                selector: 'adf-search-filter',
                template: "<mat-accordion multi=\"true\" displayMode=\"flat\">\n\n    <button *ngIf=\"displayResetButton && facetFiltersService.responseFacets\"\n            mat-button\n            color=\"primary\"\n            matTooltip=\"{{ 'SEARCH.FILTER.BUTTONS.RESET-ALL.TOOLTIP' | translate }}\"\n            matTooltipPosition=\"right\"\n            adf-reset-search>\n        {{ 'SEARCH.FILTER.BUTTONS.RESET-ALL.LABEL' | translate }}\n    </button>\n    <mat-expansion-panel\n        *ngFor=\"let category of queryBuilder.categories\"\n        [attr.data-automation-id]=\"'expansion-panel-'+category.name\"\n        [(expanded)]=\"category.expanded\">\n        <mat-expansion-panel-header>\n            <mat-panel-title>\n                {{ category.name | translate }}\n            </mat-panel-title>\n        </mat-expansion-panel-header>\n        <adf-search-widget-container\n            [id]=\"category.id\"\n            [selector]=\"category.component.selector\"\n            [settings]=\"category.component.settings\">\n        </adf-search-widget-container>\n    </mat-expansion-panel>\n\n    <ng-container *ngIf=\"facetFiltersService.responseFacets && showContextFacets\">\n        <mat-expansion-panel [attr.data-automation-id]=\"'expansion-panel-'+field.label\" *ngFor=\"let field of facetFiltersService.responseFacets\"\n                             [expanded]=\"shouldExpand(field)\">\n            <mat-expansion-panel-header>\n                <mat-panel-title>{{ field.label | translate }}</mat-panel-title>\n            </mat-expansion-panel-header>\n\n            <adf-search-facet-field [field]=\"field\"></adf-search-facet-field>\n\n        </mat-expansion-panel>\n    </ng-container>\n</mat-accordion>\n",
                encapsulation: ViewEncapsulation.None,
                host: { class: 'adf-search-filter' },
                styles: [".adf-search-filter .mat-expansion-panel-header-title{color:var(--theme-text-bold-color);font-size:14px}.adf-search-filter .mat-checkbox-label,.adf-search-filter .mat-radio-label{color:var(--theme-text-color)}"]
            },] }
];
SearchFilterComponent.ctorParameters = () => [
    { type: SearchQueryBuilderService, decorators: [{ type: Inject, args: [SEARCH_QUERY_SERVICE_TOKEN,] }] },
    { type: SearchFacetFiltersService }
];
SearchFilterComponent.propDecorators = {
    showContextFacets: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VhcmNoLWZpbHRlci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiL2hvbWUvdHJhdmlzL2J1aWxkL0FsZnJlc2NvL2FsZnJlc2NvLW5nMi1jb21wb25lbnRzL2xpYi9jb250ZW50LXNlcnZpY2VzL3NyYy8iLCJzb3VyY2VzIjpbImxpYi9zZWFyY2gvY29tcG9uZW50cy9zZWFyY2gtZmlsdGVyL3NlYXJjaC1maWx0ZXIuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7R0FlRztBQUVILE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM1RSxPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSw2Q0FBNkMsQ0FBQztBQUd4RixPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQztBQUM5RSxPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSw2Q0FBNkMsQ0FBQztBQVN4RixNQUFNLE9BQU8scUJBQXFCO0lBWTlCLFlBQXVELFlBQXVDLEVBQzNFLG1CQUE4QztRQURWLGlCQUFZLEdBQVosWUFBWSxDQUEyQjtRQUMzRSx3QkFBbUIsR0FBbkIsbUJBQW1CLENBQTJCO1FBVGpFLHNCQUFpQixHQUFZLElBQUksQ0FBQztRQUVsQyxzQkFBaUIsR0FBVyxlQUFlLENBQUM7UUFDNUMsa0JBQWEsR0FBRztZQUNaLFNBQVMsRUFBRSxLQUFLO1NBQ25CLENBQUM7UUFLRSxJQUFJLFlBQVksQ0FBQyxNQUFNLElBQUksWUFBWSxDQUFDLE1BQU0sQ0FBQyxZQUFZLEVBQUU7WUFDekQsSUFBSSxDQUFDLGlCQUFpQixHQUFHLFlBQVksQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDLEtBQUssSUFBSSxlQUFlLENBQUM7WUFDbkYsSUFBSSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsR0FBRyxZQUFZLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUM7U0FDM0U7UUFDRCxJQUFJLFlBQVksQ0FBQyxNQUFNLElBQUksWUFBWSxDQUFDLE1BQU0sQ0FBQyxXQUFXLEVBQUU7WUFDeEQsSUFBSSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsR0FBRyxZQUFZLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUM7U0FDMUU7UUFDRCxJQUFJLFlBQVksQ0FBQyxNQUFNLElBQUksWUFBWSxDQUFDLE1BQU0sQ0FBQyxjQUFjLEVBQUU7WUFDM0QsSUFBSSxDQUFDLGFBQWEsQ0FBQyxVQUFVLENBQUMsR0FBRyxZQUFZLENBQUMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxRQUFRLENBQUM7U0FDaEY7UUFDRCxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQztJQUNqRyxDQUFDO0lBRUQsWUFBWSxDQUFDLEtBQWlCO1FBQzFCLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksSUFBSSxDQUFDLGFBQWEsQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUMzRSxDQUFDO0lBRUQscUJBQXFCLENBQUMsTUFBd0I7UUFDMUMsT0FBTyxNQUFNLENBQUMsS0FBSyxLQUFLLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLE1BQU0sQ0FBQyxLQUFLLEdBQUcsQ0FBQztJQUM1RCxDQUFDOzs7WUF4Q0osU0FBUyxTQUFDO2dCQUNQLFFBQVEsRUFBRSxtQkFBbUI7Z0JBQzdCLHFyREFBNkM7Z0JBRTdDLGFBQWEsRUFBRSxpQkFBaUIsQ0FBQyxJQUFJO2dCQUNyQyxJQUFJLEVBQUUsRUFBRSxLQUFLLEVBQUUsbUJBQW1CLEVBQUU7O2FBQ3ZDOzs7WUFaUSx5QkFBeUIsdUJBeUJqQixNQUFNLFNBQUMsMEJBQTBCO1lBckJ6Qyx5QkFBeUI7OztnQ0FZN0IsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IENvbXBvbmVudCwgSW5qZWN0LCBJbnB1dCwgVmlld0VuY2Fwc3VsYXRpb24gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFNlYXJjaFF1ZXJ5QnVpbGRlclNlcnZpY2UgfSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9zZWFyY2gtcXVlcnktYnVpbGRlci5zZXJ2aWNlJztcbmltcG9ydCB7IEZhY2V0RmllbGRCdWNrZXQgfSBmcm9tICcuLi8uLi9tb2RlbHMvZmFjZXQtZmllbGQtYnVja2V0LmludGVyZmFjZSc7XG5pbXBvcnQgeyBGYWNldEZpZWxkIH0gZnJvbSAnLi4vLi4vbW9kZWxzL2ZhY2V0LWZpZWxkLmludGVyZmFjZSc7XG5pbXBvcnQgeyBTRUFSQ0hfUVVFUllfU0VSVklDRV9UT0tFTiB9IGZyb20gJy4uLy4uL3NlYXJjaC1xdWVyeS1zZXJ2aWNlLnRva2VuJztcbmltcG9ydCB7IFNlYXJjaEZhY2V0RmlsdGVyc1NlcnZpY2UgfSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9zZWFyY2gtZmFjZXQtZmlsdGVycy5zZXJ2aWNlJztcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICdhZGYtc2VhcmNoLWZpbHRlcicsXG4gICAgdGVtcGxhdGVVcmw6ICcuL3NlYXJjaC1maWx0ZXIuY29tcG9uZW50Lmh0bWwnLFxuICAgIHN0eWxlVXJsczogWycuL3NlYXJjaC1maWx0ZXIuY29tcG9uZW50LnNjc3MnXSxcbiAgICBlbmNhcHN1bGF0aW9uOiBWaWV3RW5jYXBzdWxhdGlvbi5Ob25lLFxuICAgIGhvc3Q6IHsgY2xhc3M6ICdhZGYtc2VhcmNoLWZpbHRlcicgfVxufSlcbmV4cG9ydCBjbGFzcyBTZWFyY2hGaWx0ZXJDb21wb25lbnQge1xuXG4gICAgLyoqIFRvZ2dsZXMgd2hldGhlciB0byBzaG93IG9yIG5vdCB0aGUgY29udGV4dCBmYWNldCBmaWx0ZXJzLiAqL1xuICAgIEBJbnB1dCgpXG4gICAgc2hvd0NvbnRleHRGYWNldHM6IGJvb2xlYW4gPSB0cnVlO1xuXG4gICAgZmFjZXRRdWVyaWVzTGFiZWw6IHN0cmluZyA9ICdGYWNldCBRdWVyaWVzJztcbiAgICBmYWNldEV4cGFuZGVkID0ge1xuICAgICAgICAnZGVmYXVsdCc6IGZhbHNlXG4gICAgfTtcbiAgICBkaXNwbGF5UmVzZXRCdXR0b246IGJvb2xlYW47XG5cbiAgICBjb25zdHJ1Y3RvcihASW5qZWN0KFNFQVJDSF9RVUVSWV9TRVJWSUNFX1RPS0VOKSBwdWJsaWMgcXVlcnlCdWlsZGVyOiBTZWFyY2hRdWVyeUJ1aWxkZXJTZXJ2aWNlLFxuICAgICAgICAgICAgICAgIHB1YmxpYyBmYWNldEZpbHRlcnNTZXJ2aWNlOiBTZWFyY2hGYWNldEZpbHRlcnNTZXJ2aWNlKSB7XG4gICAgICAgIGlmIChxdWVyeUJ1aWxkZXIuY29uZmlnICYmIHF1ZXJ5QnVpbGRlci5jb25maWcuZmFjZXRRdWVyaWVzKSB7XG4gICAgICAgICAgICB0aGlzLmZhY2V0UXVlcmllc0xhYmVsID0gcXVlcnlCdWlsZGVyLmNvbmZpZy5mYWNldFF1ZXJpZXMubGFiZWwgfHwgJ0ZhY2V0IFF1ZXJpZXMnO1xuICAgICAgICAgICAgdGhpcy5mYWNldEV4cGFuZGVkWydxdWVyeSddID0gcXVlcnlCdWlsZGVyLmNvbmZpZy5mYWNldFF1ZXJpZXMuZXhwYW5kZWQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHF1ZXJ5QnVpbGRlci5jb25maWcgJiYgcXVlcnlCdWlsZGVyLmNvbmZpZy5mYWNldEZpZWxkcykge1xuICAgICAgICAgICAgdGhpcy5mYWNldEV4cGFuZGVkWydmaWVsZCddID0gcXVlcnlCdWlsZGVyLmNvbmZpZy5mYWNldEZpZWxkcy5leHBhbmRlZDtcbiAgICAgICAgfVxuICAgICAgICBpZiAocXVlcnlCdWlsZGVyLmNvbmZpZyAmJiBxdWVyeUJ1aWxkZXIuY29uZmlnLmZhY2V0SW50ZXJ2YWxzKSB7XG4gICAgICAgICAgICB0aGlzLmZhY2V0RXhwYW5kZWRbJ2ludGVydmFsJ10gPSBxdWVyeUJ1aWxkZXIuY29uZmlnLmZhY2V0SW50ZXJ2YWxzLmV4cGFuZGVkO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZGlzcGxheVJlc2V0QnV0dG9uID0gdGhpcy5xdWVyeUJ1aWxkZXIuY29uZmlnICYmICEhdGhpcy5xdWVyeUJ1aWxkZXIuY29uZmlnLnJlc2V0QnV0dG9uO1xuICAgIH1cblxuICAgIHNob3VsZEV4cGFuZChmaWVsZDogRmFjZXRGaWVsZCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5mYWNldEV4cGFuZGVkW2ZpZWxkLnR5cGVdIHx8IHRoaXMuZmFjZXRFeHBhbmRlZFsnZGVmYXVsdCddO1xuICAgIH1cblxuICAgIGdldEJ1Y2tldENvdW50RGlzcGxheShidWNrZXQ6IEZhY2V0RmllbGRCdWNrZXQpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gYnVja2V0LmNvdW50ID09PSBudWxsID8gJycgOiBgKCR7YnVja2V0LmNvdW50fSlgO1xuICAgIH1cbn1cbiJdfQ==