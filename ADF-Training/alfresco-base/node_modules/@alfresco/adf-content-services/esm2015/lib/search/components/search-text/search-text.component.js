/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, Input, ViewEncapsulation } from '@angular/core';
import { Subject } from 'rxjs';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/material/form-field';
import * as ɵngcc2 from '@angular/material/input';
import * as ɵngcc3 from '@angular/forms';
import * as ɵngcc4 from '@angular/common';
import * as ɵngcc5 from '@angular/material/button';
import * as ɵngcc6 from '@angular/material/icon';
import * as ɵngcc7 from '@ngx-translate/core';

function SearchTextComponent_button_3_Template(rf, ctx) { if (rf & 1) {
    const _r2 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 2);
    ɵngcc0.ɵɵlistener("click", function SearchTextComponent_button_3_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r2); const ctx_r1 = ɵngcc0.ɵɵnextContext(); return ctx_r1.clear(); });
    ɵngcc0.ɵɵelementStart(1, "mat-icon");
    ɵngcc0.ɵɵtext(2, "close");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} }
export class SearchTextComponent {
    constructor() {
        this.value = '';
        this.isActive = false;
        this.enableChangeUpdate = true;
        this.displayValue$ = new Subject();
    }
    ngOnInit() {
        if (this.context && this.settings && this.settings.pattern) {
            const pattern = new RegExp(this.settings.pattern, 'g');
            const match = pattern.exec(this.context.queryFragments[this.id] || '');
            if (this.settings.allowUpdateOnChange !== undefined &&
                this.settings.allowUpdateOnChange !== null) {
                this.enableChangeUpdate = this.settings.allowUpdateOnChange;
            }
            if (match && match.length > 1) {
                this.value = match[1];
            }
            if (this.startValue) {
                this.setValue(this.startValue);
            }
        }
    }
    clear() {
        this.isActive = false;
        this.value = '';
        if (this.enableChangeUpdate) {
            this.updateQuery(null);
        }
    }
    reset() {
        this.value = '';
        this.updateQuery(null);
    }
    onChangedHandler(event) {
        this.value = event.target.value;
        this.isActive = !!this.value;
        if (this.enableChangeUpdate) {
            this.updateQuery(this.value);
        }
    }
    updateQuery(value) {
        this.displayValue$.next(value);
        if (this.context && this.settings && this.settings.field) {
            this.context.queryFragments[this.id] = value ? `${this.settings.field}:'${this.getSearchPrefix()}${value}${this.getSearchSuffix()}'` : '';
            this.context.update();
        }
    }
    submitValues() {
        this.updateQuery(this.value);
    }
    hasValidValue() {
        return !!this.value;
    }
    getCurrentValue() {
        return this.value;
    }
    setValue(value) {
        this.value = value;
        this.displayValue$.next(this.value);
        this.submitValues();
    }
    getSearchPrefix() {
        return this.settings.searchPrefix ? this.settings.searchPrefix : '';
    }
    getSearchSuffix() {
        return this.settings.searchSuffix ? this.settings.searchSuffix : '';
    }
}
SearchTextComponent.ɵfac = function SearchTextComponent_Factory(t) { return new (t || SearchTextComponent)(); };
SearchTextComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: SearchTextComponent, selectors: [["adf-search-text"]], hostAttrs: [1, "adf-search-text"], inputs: { value: "value" }, decls: 4, vars: 5, consts: [["matInput", "", 3, "placeholder", "ngModel", "ngModelChange", "change"], ["mat-button", "", "matSuffix", "", "mat-icon-button", "", 3, "click", 4, "ngIf"], ["mat-button", "", "matSuffix", "", "mat-icon-button", "", 3, "click"]], template: function SearchTextComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "mat-form-field");
        ɵngcc0.ɵɵelementStart(1, "input", 0);
        ɵngcc0.ɵɵlistener("ngModelChange", function SearchTextComponent_Template_input_ngModelChange_1_listener($event) { return ctx.value = $event; })("change", function SearchTextComponent_Template_input_change_1_listener($event) { return ctx.onChangedHandler($event); });
        ɵngcc0.ɵɵpipe(2, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(3, SearchTextComponent_button_3_Template, 3, 0, "button", 1);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵpropertyInterpolate("placeholder", ɵngcc0.ɵɵpipeBind1(2, 3, ctx.settings == null ? null : ctx.settings.placeholder));
        ɵngcc0.ɵɵproperty("ngModel", ctx.value);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.value);
    } }, directives: [ɵngcc1.MatFormField, ɵngcc2.MatInput, ɵngcc3.DefaultValueAccessor, ɵngcc3.NgControlStatus, ɵngcc3.NgModel, ɵngcc4.NgIf, ɵngcc5.MatButton, ɵngcc1.MatSuffix, ɵngcc6.MatIcon], pipes: [ɵngcc7.TranslatePipe], styles: [".adf-search-text .mat-form-field{max-width:168px;width:100%}"], encapsulation: 2 });
SearchTextComponent.propDecorators = {
    value: [{ type: Input }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SearchTextComponent, [{
        type: Component,
        args: [{
                selector: 'adf-search-text',
                template: "<mat-form-field>\n    <input\n        matInput\n        placeholder=\"{{ settings?.placeholder | translate }}\"\n        [(ngModel)]=\"value\"\n        (change)=\"onChangedHandler($event)\">\n    <button mat-button *ngIf=\"value\" matSuffix mat-icon-button (click)=\"clear()\">\n        <mat-icon>close</mat-icon>\n    </button>\n</mat-form-field>\n",
                encapsulation: ViewEncapsulation.None,
                host: { class: 'adf-search-text' },
                styles: [".adf-search-text .mat-form-field{max-width:168px;width:100%}"]
            }]
    }], function () { return []; }, { value: [{
            type: Input
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,