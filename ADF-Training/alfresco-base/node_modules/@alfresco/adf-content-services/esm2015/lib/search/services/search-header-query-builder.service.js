import { Injectable } from '@angular/core';
import { AlfrescoApiService, AppConfigService, NodesApiService } from '@alfresco/adf-core';
import { BaseQueryBuilderService } from './base-query-builder.service';
import { filter } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@alfresco/adf-core";
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@alfresco/adf-core';
export class SearchHeaderQueryBuilderService extends BaseQueryBuilderService {
    constructor(appConfig, alfrescoApiService, nodeApiService) {
        super(appConfig, alfrescoApiService);
        this.nodeApiService = nodeApiService;
        this.customSources = ['-trashcan-', '-sharedlinks-', '-sites-', '-mysites-', '-favorites-', '-recent-', '-my-'];
        this.activeFilters = [];
        this.updated.pipe(filter((query) => !!query)).subscribe(() => {
            this.execute();
        });
    }
    isFilterServiceActive() {
        return true;
    }
    loadConfiguration() {
        return this.appConfig.get('search-headers');
    }
    setupCurrentPagination(maxItems, skipCount) {
        if (!this.paging ||
            (this.paging &&
                this.paging.maxItems !== maxItems || this.paging.skipCount !== skipCount)) {
            this.paging = { maxItems, skipCount };
            this.execute();
        }
    }
    setActiveFilter(columnActivated, filterValue) {
        const selectedFilter = this.activeFilters.find((activeFilter) => activeFilter.key === columnActivated);
        if (!selectedFilter) {
            this.activeFilters.push({
                key: columnActivated,
                value: filterValue
            });
        }
        else {
            selectedFilter.value = filterValue;
        }
    }
    resetActiveFilters() {
        this.activeFilters = [];
    }
    getActiveFilters() {
        return this.activeFilters;
    }
    isNoFilterActive() {
        return this.activeFilters.length === 0;
    }
    removeActiveFilter(columnRemoved) {
        const filterIndex = this.activeFilters.map((activeFilter) => activeFilter.key).indexOf(columnRemoved);
        if (filterIndex >= 0) {
            this.activeFilters.splice(filterIndex, 1);
        }
    }
    setSorting(dataSorting) {
        this.sorting = [];
        dataSorting.forEach((columnSorting) => {
            const fieldValue = this.getSortingFieldFromColumnName(columnSorting.key);
            if (fieldValue) {
                const optionAscending = columnSorting.direction.toLocaleLowerCase() === 'asc';
                const type = fieldValue === 'score' ? 'SCORE' : 'FIELD';
                const currentSort = {
                    key: columnSorting.key,
                    label: 'current',
                    type: type,
                    field: fieldValue,
                    ascending: optionAscending
                };
                this.sorting.push(currentSort);
            }
        });
        this.execute();
    }
    getSortingFieldFromColumnName(columnName) {
        if (this.sortingOptions.length > 0) {
            const sortOption = this.sortingOptions.find((option) => option.key === columnName);
            return sortOption ? sortOption.field : '';
        }
        return '';
    }
    getCategoryForColumn(columnKey) {
        let foundCategory = null;
        if (this.categories !== null) {
            foundCategory = this.categories.find(category => category.columnKey === columnKey);
        }
        return foundCategory;
    }
    setCurrentRootFolderId(currentFolderId) {
        const alreadyAddedFilter = this.filterQueries.find(filterQueries => filterQueries.query.includes(currentFolderId));
        if (alreadyAddedFilter !== undefined) {
            this.filterQueries = [];
        }
        this.filterQueries = [{
                query: `PARENT:"workspace://SpacesStore/${currentFolderId}"`
            }];
        this.execute();
    }
    isCustomSourceNode(currentNodeId) {
        return this.customSources.includes(currentNodeId);
    }
    getNodeIdForCustomSource(customSourceId) {
        return this.nodeApiService.getNode(customSourceId);
    }
}
SearchHeaderQueryBuilderService.ɵfac = function SearchHeaderQueryBuilderService_Factory(t) { return new (t || SearchHeaderQueryBuilderService)(ɵngcc0.ɵɵinject(ɵngcc1.AppConfigService), ɵngcc0.ɵɵinject(ɵngcc1.AlfrescoApiService), ɵngcc0.ɵɵinject(ɵngcc1.NodesApiService)); };
SearchHeaderQueryBuilderService.ɵprov = i0.ɵɵdefineInjectable({ factory: function SearchHeaderQueryBuilderService_Factory() { return new SearchHeaderQueryBuilderService(i0.ɵɵinject(i1.AppConfigService), i0.ɵɵinject(i1.AlfrescoApiService), i0.ɵɵinject(i1.NodesApiService)); }, token: SearchHeaderQueryBuilderService, providedIn: "root" });
SearchHeaderQueryBuilderService.ctorParameters = () => [
    { type: AppConfigService },
    { type: AlfrescoApiService },
    { type: NodesApiService }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SearchHeaderQueryBuilderService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc1.AppConfigService }, { type: ɵngcc1.AlfrescoApiService }, { type: ɵngcc1.NodesApiService }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,