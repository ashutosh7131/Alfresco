/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { AuthenticationService, ThumbnailService, SearchTextInputComponent } from '@alfresco/adf-core';
import { Component, EventEmitter, Input, Output, QueryList, ViewEncapsulation, ViewChild, ViewChildren, ContentChild } from '@angular/core';
import { Subject } from 'rxjs';
import { SearchComponent } from './search.component';
import { MatListItem } from '@angular/material/list';
import { EmptySearchResultComponent } from './empty-search-result.component';
export class SearchControlComponent {
    constructor(authService, thumbnailService) {
        this.authService = authService;
        this.thumbnailService = thumbnailService;
        this.highlight = false;
        this.inputType = 'text';
        this.liveSearchEnabled = true;
        this.autocomplete = false;
        this.expandable = true;
        this.liveSearchMaxResults = 5;
        this.submit = new EventEmitter();
        this.searchChange = new EventEmitter();
        this.optionClicked = new EventEmitter();
        this.focusSubject = new Subject();
        this.noSearchResultTemplate = null;
        this.searchTerm = '';
        this.onDestroy$ = new Subject();
    }
    isNoSearchTemplatePresent() {
        return !!this.emptySearchTemplate;
    }
    ngOnDestroy() {
        this.onDestroy$.next(true);
        this.onDestroy$.complete();
    }
    isLoggedIn() {
        return this.authService.isEcmLoggedIn();
    }
    inputChange(value) {
        this.searchTerm = value;
        this.searchChange.emit(value);
    }
    getMimeTypeIcon(node) {
        const mimeType = this.getMimeType(node);
        return this.thumbnailService.getMimeTypeIcon(mimeType);
    }
    getMimeType(node) {
        let mimeType;
        if (node.entry.content && node.entry.content.mimeType) {
            mimeType = node.entry.content.mimeType;
        }
        if (node.entry.isFolder) {
            mimeType = 'folder';
        }
        return mimeType;
    }
    elementClicked(item) {
        if (item.entry) {
            this.optionClicked.next(item);
            this.focusSubject.next(new FocusEvent('blur'));
        }
    }
    onFocus(event) {
        this.focusSubject.next(event);
    }
    onBlur(event) {
        const nextElement = this.getNextElementSibling(event.target);
        if (!nextElement && !this.isListElement(event)) {
            this.focusSubject.next(event);
        }
    }
    onSelectFirstResult() {
        if (this.listResultElement && this.listResultElement.length > 0) {
            const firstElement = this.listResultElement.first;
            firstElement._getHostElement().focus();
        }
    }
    onRowArrowDown(event) {
        const nextElement = this.getNextElementSibling(event.target);
        if (nextElement) {
            nextElement.focus();
        }
    }
    onRowArrowUp(event) {
        const previousElement = this.getPreviousElementSibling(event.target);
        if (previousElement) {
            previousElement.focus();
        }
        else {
            this.focusSubject.next(new FocusEvent('focus'));
        }
    }
    onReset(status) {
        if (status) {
            this.searchAutocomplete.resetResults();
        }
    }
    isListElement(event) {
        return event.relatedTarget && event.relatedTarget.children[0] && event.relatedTarget.children[0].className === 'mat-list-item-content';
    }
    getNextElementSibling(node) {
        return node.nextElementSibling;
    }
    getPreviousElementSibling(node) {
        return node.previousElementSibling;
    }
}
SearchControlComponent.decorators = [
    { type: Component, args: [{
                selector: 'adf-search-control',
                template: "<div *ngIf=\"isLoggedIn()\">\n    <adf-search-text-input  #searchTextInput\n                            [searchTerm]= \"searchTerm\"\n                            [expandable]=\"expandable\"\n                            [autocomplete]=\"autocomplete\"\n                            [liveSearchEnabled]=\"liveSearchEnabled\"\n                            [focusListener]=\"focusSubject.asObservable()\"\n                            [searchAutocomplete]=\"auto\"\n                            (searchChange)=\"inputChange($event)\"\n                            (reset)=\"onReset($event)\"\n                            (selectResult)=\"onSelectFirstResult()\"\n                            (submit)=\"submit.emit($event)\"></adf-search-text-input>\n\n    <adf-search #search\n                #auto=\"searchAutocomplete\"\n                class=\"adf-search-result-autocomplete\"\n                [maxResults]=\"liveSearchMaxResults\">\n        <ng-template let-data>\n            <mat-list *ngIf=\"searchTextInput?.isSearchBarActive()\" id=\"autocomplete-search-result-list\">\n                <mat-list-item\n                    *ngFor=\"let item of data?.list?.entries; let idx = index\"\n                    id=\"result_option_{{idx}}\"\n                    [attr.data-automation-id]=\"'autocomplete_for_' + item.entry.name\"\n                    [tabindex]=\"0\"\n                    (blur)=\"onBlur($event)\"\n                    (keyup.arrowdown)=\"onRowArrowDown($event)\"\n                    (keyup.arrowup)=\"onRowArrowUp($event)\"\n                    class=\"adf-search-autocomplete-item\"\n                    (click)=\"elementClicked(item)\"\n                    (keyup.enter)=\"elementClicked(item)\"\n                    (touchend)=\"elementClicked(item)\">\n                    <!-- This is a comment -->\n                    <mat-icon mat-list-icon>\n                        <img [alt]=\"getMimeType(item)\" [src]=\"getMimeTypeIcon(item)\"/>\n                    </mat-icon>\n                    <h4 mat-line id=\"result_name_{{idx}}\"\n                        *ngIf=\"highlight; else elseBlock\"\n                        class=\"adf-search-fixed-text\"\n                        [innerHtml]=\"item.entry.name | highlight: searchTerm\">\n                        {{ item?.entry.name }}\n                    </h4>\n                    <ng-template #elseBlock>\n                        <h4 class=\"adf-search-fixed-text\" mat-line id=\"result_name_{{idx}}\"\n                            [innerHtml]=\"item.entry.name\"></h4>\n                    </ng-template>\n                    <p mat-line class=\"adf-search-fixed-text\"> {{item?.entry.createdByUser.displayName}} </p>\n                </mat-list-item>\n                <mat-list-item id=\"search_no_result\"\n                            data-automation-id=\"search_no_result_found\"\n                            *ngIf=\"data?.list?.entries.length === 0\">\n                    <ng-content\n                        selector=\"adf-empty-search-result\"\n                        *ngIf=\"isNoSearchTemplatePresent() else defaultNoResult\">\n                    </ng-content>\n                    <ng-template #defaultNoResult>\n                        <p mat-line class=\"adf-search-fixed-text\">{{ 'SEARCH.RESULTS.NONE' | translate:{searchTerm:\n                            searchTerm} }}</p>\n                    </ng-template>\n                </mat-list-item>\n            </mat-list>\n        </ng-template>\n    </adf-search>\n</div>\n",
                encapsulation: ViewEncapsulation.None,
                host: { class: 'adf-search-control' },
                styles: [".adf-search-result-autocomplete{-webkit-overflow-scrolling:touch;background-color:var(--theme-card-bg-color);border-radius:2px;color:var(--theme-text-fg-color);font-size:15px;margin-left:45px;margin-top:-22px;max-height:400px;max-width:280px;min-width:112px;overflow:auto;position:absolute;transform:translateX(-40px);transform-origin:top left;z-index:5}.adf-search-result-autocomplete:not([class*=mat-elevation-z]){box-shadow:0 3px 1px -2px rgba(0,0,0,.2),0 2px 2px 0 rgba(0,0,0,.14),0 1px 5px 0 rgba(0,0,0,.12)}@media screen and (max-width:959px){.adf-search-result-autocomplete{overflow:hidden;text-overflow:ellipsis;white-space:nowrap}}.adf-search-autocomplete-item:hover{background-color:var(--theme-bg-hover-color);opacity:1}"]
            },] }
];
SearchControlComponent.ctorParameters = () => [
    { type: AuthenticationService },
    { type: ThumbnailService }
];
SearchControlComponent.propDecorators = {
    highlight: [{ type: Input }],
    inputType: [{ type: Input }],
    liveSearchEnabled: [{ type: Input }],
    autocomplete: [{ type: Input }],
    expandable: [{ type: Input }],
    liveSearchMaxResults: [{ type: Input }],
    submit: [{ type: Output }],
    searchChange: [{ type: Output }],
    optionClicked: [{ type: Output }],
    searchTextInput: [{ type: ViewChild, args: ['searchTextInput',] }],
    searchAutocomplete: [{ type: ViewChild, args: ['search',] }],
    listResultElement: [{ type: ViewChildren, args: [MatListItem,] }],
    emptySearchTemplate: [{ type: ContentChild, args: [EmptySearchResultComponent,] }]
};
//# sourceMappingURL=data:application/json;base64,