import { __awaiter } from "tslib";
import { Injectable } from '@angular/core';
import { Subject, from, ReplaySubject } from 'rxjs';
import { AlfrescoApiService, AppConfigService } from '@alfresco/adf-core';
import { RequestSortDefinitionInner, SearchApi } from '@alfresco/js-api';
import * as i0 from "@angular/core";
import * as i1 from "@alfresco/adf-core";
export class BaseQueryBuilderService {
    constructor(appConfig, alfrescoApiService) {
        this.appConfig = appConfig;
        this.alfrescoApiService = alfrescoApiService;
        this.configUpdated = new Subject();
        this.updated = new Subject();
        this.executed = new Subject();
        this.error = new Subject();
        this.searchForms = new ReplaySubject(1);
        this.categories = [];
        this.queryFragments = {};
        this.filterQueries = [];
        this.paging = null;
        this.sorting = [];
        this.sortingOptions = [];
        this._userQuery = '';
        this.userFacetBuckets = {};
        this.config = {
            categories: []
        };
        this.ranges = {};
        this.resetToDefaults();
    }
    get searchApi() {
        var _a;
        this._searchApi = (_a = this._searchApi) !== null && _a !== void 0 ? _a : new SearchApi(this.alfrescoApiService.getInstance());
        return this._searchApi;
    }
    get userQuery() {
        return this._userQuery;
    }
    set userQuery(value) {
        value = (value || '').trim();
        this._userQuery = value ? `(${value})` : '';
    }
    resetToDefaults() {
        const currentConfig = this.getDefaultConfiguration();
        this.resetSearchOptions();
        this.configUpdated.next(currentConfig);
        this.searchForms.next(this.getSearchFormDetails());
        this.setUpSearchConfiguration(currentConfig);
    }
    getDefaultConfiguration() {
        const configurations = this.loadConfiguration();
        if (this.selectedConfiguration !== undefined) {
            return configurations[this.selectedConfiguration];
        }
        if (Array.isArray(configurations)) {
            return configurations.find((configuration) => configuration.default);
        }
        return configurations;
    }
    updateSelectedConfiguration(index) {
        const currentConfig = this.loadConfiguration();
        if (Array.isArray(currentConfig) && currentConfig[index] !== undefined) {
            this.selectedConfiguration = index;
            this.configUpdated.next(currentConfig[index]);
            this.searchForms.next(this.getSearchFormDetails());
            this.resetSearchOptions();
            this.setUpSearchConfiguration(currentConfig[index]);
            this.update();
        }
    }
    resetSearchOptions() {
        this.categories = [];
        this.queryFragments = {};
        this.filterQueries = [];
        this.sorting = [];
        this.sortingOptions = [];
        this.userFacetBuckets = {};
        this.scope = null;
    }
    getSearchFormDetails() {
        const configurations = this.loadConfiguration();
        if (Array.isArray(configurations)) {
            return configurations.map((configuration, index) => ({
                index,
                name: configuration.name || 'SEARCH.UNKNOWN_CONFIGURATION',
                default: configuration.default || false,
                selected: this.selectedConfiguration !== undefined ? index === this.selectedConfiguration : configuration.default
            }));
        }
        else if (!!configurations) {
            return [{
                    index: 0,
                    name: configurations.name || 'SEARCH.UNKNOWN_CONFIGURATION',
                    default: true,
                    selected: true
                }];
        }
        return [];
    }
    setUpSearchConfiguration(currentConfiguration) {
        if (currentConfiguration) {
            this.config = JSON.parse(JSON.stringify(currentConfiguration));
            this.categories = (this.config.categories || []).filter(category => category.enabled);
            this.filterQueries = this.config.filterQueries || [];
            this.userFacetBuckets = {};
            if (this.config.sorting) {
                this.sorting = this.config.sorting.defaults || [];
                this.sortingOptions = this.config.sorting.options || [];
            }
        }
    }
    addUserFacetBucket(field, bucket) {
        if (field && field.field && bucket) {
            const buckets = this.userFacetBuckets[field.field] || [];
            const existing = buckets.find((facetBucket) => facetBucket.label === bucket.label);
            if (!existing) {
                buckets.push(bucket);
            }
            this.userFacetBuckets[field.field] = buckets;
        }
    }
    getUserFacetBuckets(field) {
        return this.userFacetBuckets[field] || [];
    }
    removeUserFacetBucket(field, bucket) {
        if (field && field.field && bucket) {
            const buckets = this.userFacetBuckets[field.field] || [];
            this.userFacetBuckets[field.field] = buckets
                .filter((facetBucket) => facetBucket.label !== bucket.label);
        }
    }
    addFilterQuery(query) {
        if (query) {
            const existing = this.filterQueries.find((filterQuery) => filterQuery.query === query);
            if (!existing) {
                this.filterQueries.push({ query: query });
            }
        }
    }
    removeFilterQuery(query) {
        if (query) {
            this.filterQueries = this.filterQueries
                .filter((filterQuery) => filterQuery.query !== query);
        }
    }
    getFacetQuery(label) {
        if (label && this.hasFacetQueries) {
            const result = this.config.facetQueries.queries.find((query) => query.label === label);
            if (result) {
                return Object.assign({}, result);
            }
        }
        return null;
    }
    getFacetField(label) {
        if (label) {
            const fields = this.config.facetFields.fields || [];
            const result = fields.find((field) => field.label === label);
            if (result) {
                result.label = this.getSupportedLabel(result.label);
                return Object.assign({}, result);
            }
        }
        return null;
    }
    setScope(scope) {
        this.scope = scope;
    }
    getScope() {
        return this.scope;
    }
    update(queryBody) {
        const query = queryBody ? queryBody : this.buildQuery();
        this.updated.next(query);
    }
    execute(queryBody) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const query = queryBody ? queryBody : this.buildQuery();
                if (query) {
                    const resultSetPaging = yield this.searchApi.search(query);
                    this.executed.next(resultSetPaging);
                }
            }
            catch (error) {
                this.error.next(error);
                this.executed.next({
                    list: {
                        pagination: {
                            totalItems: 0
                        },
                        entries: []
                    }
                });
            }
        });
    }
    search(queryBody) {
        const promise = this.searchApi.search(queryBody);
        promise.then((resultSetPaging) => {
            this.executed.next(resultSetPaging);
        });
        return from(promise);
    }
    buildQuery() {
        const query = this.getFinalQuery();
        const include = this.config.include || [];
        if (include.length === 0) {
            include.push('path', 'allowableOperations');
        }
        if (query) {
            const result = {
                query: {
                    query: query,
                    language: 'afts'
                },
                include: include,
                paging: this.paging,
                fields: this.config.fields,
                filterQueries: this.filterQueries,
                facetQueries: this.facetQueries,
                facetIntervals: this.facetIntervals,
                facetFields: this.facetFields,
                sort: this.sort,
                highlight: this.highlight
            };
            if (this.scope) {
                result['scope'] = this.scope;
            }
            result['facetFormat'] = 'V2';
            return result;
        }
        return null;
    }
    getPrimarySorting() {
        if (this.sorting && this.sorting.length > 0) {
            return this.sorting[0];
        }
        return null;
    }
    getSortingOptions() {
        if (this.config && this.config.sorting) {
            return this.config.sorting.options || [];
        }
        return [];
    }
    getQueryGroup(query) {
        return query.group || this.config.facetQueries.label || 'Facet Queries';
    }
    get hasFacetQueries() {
        if (this.config
            && this.config.facetQueries
            && this.config.facetQueries.queries
            && this.config.facetQueries.queries.length > 0) {
            return true;
        }
        return false;
    }
    get hasFacetIntervals() {
        return this.config
            && this.config.facetIntervals
            && this.config.facetIntervals.intervals
            && this.config.facetIntervals.intervals.length > 0;
    }
    get hasFacetHighlight() {
        return !!(this.config && this.config.highlight);
    }
    get sort() {
        return this.sorting.map((def) => {
            return new RequestSortDefinitionInner({
                type: def.type,
                field: def.field,
                ascending: def.ascending
            });
        });
    }
    get facetQueries() {
        if (this.hasFacetQueries) {
            return this.config.facetQueries.queries.map((query) => {
                query.group = this.getQueryGroup(query);
                return Object.assign({}, query);
            });
        }
        return null;
    }
    get facetIntervals() {
        if (this.hasFacetIntervals) {
            const configIntervals = this.config.facetIntervals;
            return {
                intervals: configIntervals.intervals.map((interval) => ({
                    label: this.getSupportedLabel(interval.label),
                    field: interval.field,
                    sets: interval.sets.map((set) => ({
                        label: this.getSupportedLabel(set.label),
                        start: set.start,
                        end: set.end,
                        startInclusive: set.startInclusive,
                        endInclusive: set.endInclusive
                    }))
                }))
            };
        }
        return null;
    }
    get highlight() {
        return this.hasFacetHighlight ? this.config.highlight : null;
    }
    getFinalQuery() {
        let query = '';
        this.categories.forEach((facet) => {
            const customQuery = this.queryFragments[facet.id];
            if (customQuery) {
                if (query.length > 0) {
                    query += ' AND ';
                }
                query += `(${customQuery})`;
            }
        });
        let result = [this.userQuery, query]
            .filter((entry) => entry)
            .join(' AND ');
        if (this.userFacetBuckets) {
            Object.keys(this.userFacetBuckets).forEach((key) => {
                const subQuery = (this.userFacetBuckets[key] || [])
                    .filter((bucket) => bucket.filterQuery)
                    .map((bucket) => bucket.filterQuery)
                    .join(' OR ');
                if (subQuery) {
                    if (result.length > 0) {
                        result += ' AND ';
                    }
                    result += `(${subQuery})`;
                }
            });
        }
        return result;
    }
    get facetFields() {
        const facetFields = this.config.facetFields && this.config.facetFields.fields;
        if (facetFields && facetFields.length > 0) {
            return {
                facets: facetFields.map((facet) => ({
                    field: facet.field,
                    mincount: facet.mincount,
                    label: this.getSupportedLabel(facet.label),
                    limit: facet.limit,
                    offset: facet.offset,
                    prefix: facet.prefix
                }))
            };
        }
        return null;
    }
    getSupportedLabel(configLabel) {
        const spaceInsideLabelIndex = configLabel.search(/\s/g);
        if (spaceInsideLabelIndex > -1) {
            return `"${configLabel}"`;
        }
        return configLabel;
    }
}
BaseQueryBuilderService.ɵprov = i0.ɵɵdefineInjectable({ factory: function BaseQueryBuilderService_Factory() { return new BaseQueryBuilderService(i0.ɵɵinject(i1.AppConfigService), i0.ɵɵinject(i1.AlfrescoApiService)); }, token: BaseQueryBuilderService, providedIn: "root" });
BaseQueryBuilderService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
BaseQueryBuilderService.ctorParameters = () => [
    { type: AppConfigService },
    { type: AlfrescoApiService }
];
//# sourceMappingURL=data:application/json;base64,