/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, Inject, Input, ViewEncapsulation } from '@angular/core';
import { SearchQueryBuilderService } from '../../services/search-query-builder.service';
import { SEARCH_QUERY_SERVICE_TOKEN } from '../../search-query-service.token';
import { SearchFacetFiltersService } from '../../services/search-facet-filters.service';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../../services/search-facet-filters.service';
import * as ɵngcc2 from '@angular/material/expansion';
import * as ɵngcc3 from '@angular/common';
import * as ɵngcc4 from '@angular/material/button';
import * as ɵngcc5 from '../reset-search.directive';
import * as ɵngcc6 from '@angular/material/tooltip';
import * as ɵngcc7 from '../search-widget-container/search-widget-container.component';
import * as ɵngcc8 from '../search-facet-field/search-facet-field.component';
import * as ɵngcc9 from '@ngx-translate/core';
import * as ɵngcc10 from '../../services/search-query-builder.service';

function SearchFilterComponent_button_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "button", 4);
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵpropertyInterpolate("matTooltip", ɵngcc0.ɵɵpipeBind1(1, 2, "SEARCH.FILTER.BUTTONS.RESET-ALL.TOOLTIP"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(3, 4, "SEARCH.FILTER.BUTTONS.RESET-ALL.LABEL"), " ");
} }
function SearchFilterComponent_mat_expansion_panel_2_Template(rf, ctx) { if (rf & 1) {
    const _r5 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "mat-expansion-panel", 5);
    ɵngcc0.ɵɵlistener("expandedChange", function SearchFilterComponent_mat_expansion_panel_2_Template_mat_expansion_panel_expandedChange_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r5); const category_r3 = ctx.$implicit; return category_r3.expanded = $event; });
    ɵngcc0.ɵɵelementStart(1, "mat-expansion-panel-header");
    ɵngcc0.ɵɵelementStart(2, "mat-panel-title");
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵpipe(4, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(5, "adf-search-widget-container", 6);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const category_r3 = ctx.$implicit;
    ɵngcc0.ɵɵproperty("expanded", category_r3.expanded);
    ɵngcc0.ɵɵattribute("data-automation-id", "expansion-panel-" + category_r3.name);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(4, 6, category_r3.name), " ");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("id", category_r3.id)("selector", category_r3.component.selector)("settings", category_r3.component.settings);
} }
function SearchFilterComponent_ng_container_3_mat_expansion_panel_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-expansion-panel", 8);
    ɵngcc0.ɵɵelementStart(1, "mat-expansion-panel-header");
    ɵngcc0.ɵɵelementStart(2, "mat-panel-title");
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵpipe(4, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(5, "adf-search-facet-field", 9);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const field_r7 = ctx.$implicit;
    const ctx_r6 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("expanded", ctx_r6.shouldExpand(field_r7));
    ɵngcc0.ɵɵattribute("data-automation-id", "expansion-panel-" + field_r7.label);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(4, 4, field_r7.label));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("field", field_r7);
} }
function SearchFilterComponent_ng_container_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, SearchFilterComponent_ng_container_3_mat_expansion_panel_1_Template, 6, 6, "mat-expansion-panel", 7);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r2.facetFiltersService.responseFacets);
} }
export class SearchFilterComponent {
    constructor(queryBuilder, facetFiltersService) {
        this.queryBuilder = queryBuilder;
        this.facetFiltersService = facetFiltersService;
        this.showContextFacets = true;
        this.facetQueriesLabel = 'Facet Queries';
        this.facetExpanded = {
            'default': false
        };
        if (queryBuilder.config && queryBuilder.config.facetQueries) {
            this.facetQueriesLabel = queryBuilder.config.facetQueries.label || 'Facet Queries';
            this.facetExpanded['query'] = queryBuilder.config.facetQueries.expanded;
        }
        if (queryBuilder.config && queryBuilder.config.facetFields) {
            this.facetExpanded['field'] = queryBuilder.config.facetFields.expanded;
        }
        if (queryBuilder.config && queryBuilder.config.facetIntervals) {
            this.facetExpanded['interval'] = queryBuilder.config.facetIntervals.expanded;
        }
        this.displayResetButton = this.queryBuilder.config && !!this.queryBuilder.config.resetButton;
    }
    shouldExpand(field) {
        return this.facetExpanded[field.type] || this.facetExpanded['default'];
    }
    getBucketCountDisplay(bucket) {
        return bucket.count === null ? '' : `(${bucket.count})`;
    }
}
SearchFilterComponent.ɵfac = function SearchFilterComponent_Factory(t) { return new (t || SearchFilterComponent)(ɵngcc0.ɵɵdirectiveInject(SEARCH_QUERY_SERVICE_TOKEN), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.SearchFacetFiltersService)); };
SearchFilterComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: SearchFilterComponent, selectors: [["adf-search-filter"]], hostAttrs: [1, "adf-search-filter"], inputs: { showContextFacets: "showContextFacets" }, decls: 4, vars: 3, consts: [["multi", "true", "displayMode", "flat"], ["mat-button", "", "color", "primary", "matTooltipPosition", "right", "adf-reset-search", "", 3, "matTooltip", 4, "ngIf"], [3, "expanded", "expandedChange", 4, "ngFor", "ngForOf"], [4, "ngIf"], ["mat-button", "", "color", "primary", "matTooltipPosition", "right", "adf-reset-search", "", 3, "matTooltip"], [3, "expanded", "expandedChange"], [3, "id", "selector", "settings"], [3, "expanded", 4, "ngFor", "ngForOf"], [3, "expanded"], [3, "field"]], template: function SearchFilterComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "mat-accordion", 0);
        ɵngcc0.ɵɵtemplate(1, SearchFilterComponent_button_1_Template, 4, 6, "button", 1);
        ɵngcc0.ɵɵtemplate(2, SearchFilterComponent_mat_expansion_panel_2_Template, 6, 8, "mat-expansion-panel", 2);
        ɵngcc0.ɵɵtemplate(3, SearchFilterComponent_ng_container_3_Template, 2, 1, "ng-container", 3);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.displayResetButton && ctx.facetFiltersService.responseFacets);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.queryBuilder.categories);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.facetFiltersService.responseFacets && ctx.showContextFacets);
    } }, directives: [ɵngcc2.MatAccordion, ɵngcc3.NgIf, ɵngcc3.NgForOf, ɵngcc4.MatButton, ɵngcc5.ResetSearchDirective, ɵngcc6.MatTooltip, ɵngcc2.MatExpansionPanel, ɵngcc2.MatExpansionPanelHeader, ɵngcc2.MatExpansionPanelTitle, ɵngcc7.SearchWidgetContainerComponent, ɵngcc8.SearchFacetFieldComponent], pipes: [ɵngcc9.TranslatePipe], styles: [".adf-search-filter .mat-expansion-panel-header-title{color:var(--theme-text-bold-color);font-size:14px}.adf-search-filter .mat-checkbox-label,.adf-search-filter .mat-radio-label{color:var(--theme-text-color)}"], encapsulation: 2 });
SearchFilterComponent.ctorParameters = () => [
    { type: SearchQueryBuilderService, decorators: [{ type: Inject, args: [SEARCH_QUERY_SERVICE_TOKEN,] }] },
    { type: SearchFacetFiltersService }
];
SearchFilterComponent.propDecorators = {
    showContextFacets: [{ type: Input }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SearchFilterComponent, [{
        type: Component,
        args: [{
                selector: 'adf-search-filter',
                template: "<mat-accordion multi=\"true\" displayMode=\"flat\">\n\n    <button *ngIf=\"displayResetButton && facetFiltersService.responseFacets\"\n            mat-button\n            color=\"primary\"\n            matTooltip=\"{{ 'SEARCH.FILTER.BUTTONS.RESET-ALL.TOOLTIP' | translate }}\"\n            matTooltipPosition=\"right\"\n            adf-reset-search>\n        {{ 'SEARCH.FILTER.BUTTONS.RESET-ALL.LABEL' | translate }}\n    </button>\n    <mat-expansion-panel\n        *ngFor=\"let category of queryBuilder.categories\"\n        [attr.data-automation-id]=\"'expansion-panel-'+category.name\"\n        [(expanded)]=\"category.expanded\">\n        <mat-expansion-panel-header>\n            <mat-panel-title>\n                {{ category.name | translate }}\n            </mat-panel-title>\n        </mat-expansion-panel-header>\n        <adf-search-widget-container\n            [id]=\"category.id\"\n            [selector]=\"category.component.selector\"\n            [settings]=\"category.component.settings\">\n        </adf-search-widget-container>\n    </mat-expansion-panel>\n\n    <ng-container *ngIf=\"facetFiltersService.responseFacets && showContextFacets\">\n        <mat-expansion-panel [attr.data-automation-id]=\"'expansion-panel-'+field.label\" *ngFor=\"let field of facetFiltersService.responseFacets\"\n                             [expanded]=\"shouldExpand(field)\">\n            <mat-expansion-panel-header>\n                <mat-panel-title>{{ field.label | translate }}</mat-panel-title>\n            </mat-expansion-panel-header>\n\n            <adf-search-facet-field [field]=\"field\"></adf-search-facet-field>\n\n        </mat-expansion-panel>\n    </ng-container>\n</mat-accordion>\n",
                encapsulation: ViewEncapsulation.None,
                host: { class: 'adf-search-filter' },
                styles: [".adf-search-filter .mat-expansion-panel-header-title{color:var(--theme-text-bold-color);font-size:14px}.adf-search-filter .mat-checkbox-label,.adf-search-filter .mat-radio-label{color:var(--theme-text-color)}"]
            }]
    }], function () { return [{ type: ɵngcc10.SearchQueryBuilderService, decorators: [{
                type: Inject,
                args: [SEARCH_QUERY_SERVICE_TOKEN]
            }] }, { type: ɵngcc1.SearchFacetFiltersService }]; }, { showContextFacets: [{
            type: Input
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VhcmNoLWZpbHRlci5jb21wb25lbnQuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL2hvbWUvdHJhdmlzL2J1aWxkL0FsZnJlc2NvL2FsZnJlc2NvLW5nMi1jb21wb25lbnRzL2xpYi9jb250ZW50LXNlcnZpY2VzL3NyYy9saWIvc2VhcmNoL2NvbXBvbmVudHMvc2VhcmNoLWZpbHRlci9zZWFyY2gtZmlsdGVyLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBRUgsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzVFLE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxNQUFNLDZDQUE2QyxDQUFDO0FBR3hGLE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxNQUFNLGtDQUFrQyxDQUFDO0FBQzlFLE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxNQUFNLDZDQUE2QyxDQUFDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQVN4RixNQUFNLE9BQU8scUJBQXFCO0FBQ2xDLElBV0ksWUFBdUQsWUFBdUMsRUFDM0UsbUJBQThDO0FBQ3JFLFFBRjJELGlCQUFZLEdBQVosWUFBWSxDQUEyQjtBQUFDLFFBQzVFLHdCQUFtQixHQUFuQixtQkFBbUIsQ0FBMkI7QUFBQyxRQVRsRSxzQkFBaUIsR0FBWSxJQUFJLENBQUM7QUFDdEMsUUFDSSxzQkFBaUIsR0FBVyxlQUFlLENBQUM7QUFDaEQsUUFBSSxrQkFBYSxHQUFHO0FBQ3BCLFlBQVEsU0FBUyxFQUFFLEtBQUs7QUFDeEIsU0FBSyxDQUFDO0FBQ04sUUFJUSxJQUFJLFlBQVksQ0FBQyxNQUFNLElBQUksWUFBWSxDQUFDLE1BQU0sQ0FBQyxZQUFZLEVBQUU7QUFDckUsWUFBWSxJQUFJLENBQUMsaUJBQWlCLEdBQUcsWUFBWSxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsS0FBSyxJQUFJLGVBQWUsQ0FBQztBQUMvRixZQUFZLElBQUksQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLEdBQUcsWUFBWSxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDO0FBQ3BGLFNBQVM7QUFDVCxRQUFRLElBQUksWUFBWSxDQUFDLE1BQU0sSUFBSSxZQUFZLENBQUMsTUFBTSxDQUFDLFdBQVcsRUFBRTtBQUNwRSxZQUFZLElBQUksQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLEdBQUcsWUFBWSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDO0FBQ25GLFNBQVM7QUFDVCxRQUFRLElBQUksWUFBWSxDQUFDLE1BQU0sSUFBSSxZQUFZLENBQUMsTUFBTSxDQUFDLGNBQWMsRUFBRTtBQUN2RSxZQUFZLElBQUksQ0FBQyxhQUFhLENBQUMsVUFBVSxDQUFDLEdBQUcsWUFBWSxDQUFDLE1BQU0sQ0FBQyxjQUFjLENBQUMsUUFBUSxDQUFDO0FBQ3pGLFNBQVM7QUFDVCxRQUFRLElBQUksQ0FBQyxrQkFBa0IsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDO0FBQ3JHLElBQUksQ0FBQztBQUNMLElBQ0ksWUFBWSxDQUFDLEtBQWlCO0FBQUksUUFDOUIsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxJQUFJLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQy9FLElBQUksQ0FBQztBQUNMLElBQ0kscUJBQXFCLENBQUMsTUFBd0I7QUFBSSxRQUM5QyxPQUFPLE1BQU0sQ0FBQyxLQUFLLEtBQUssSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksTUFBTSxDQUFDLEtBQUssR0FBRyxDQUFDO0FBQ2hFLElBQUksQ0FBQztBQUNMO2lEQXpDQyxTQUFTLFNBQUMsa0JBQ1AsUUFBUSxFQUFFLG1CQUFtQixrQkFDN0I7Ozs7Ozs7Ozs7Ozs7OytDQUE2QyxrQkFFN0MsYUFBYSxFQUFFLGlCQUFpQixDQUFDLElBQUksa0JBQ3JDLElBQUksRUFBRSxFQUFFLEtBQUssRUFBRSxtQkFBbUIsRUFBRSw0UEFDdkMsc0tBQ0k7QUFBQztBQUVTLFlBZk4seUJBQXlCLHVCQXlCakIsTUFBTSxTQUFDLDBCQUEwQjtBQUFTLFlBckJsRCx5QkFBeUI7QUFBRztBQUFHO0FBQXlDLGdDQVk1RSxLQUFLO0FBQ1Q7Ozs7Ozs7Ozs7Ozs7OztvQkFBRTtBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgQ29tcG9uZW50LCBJbmplY3QsIElucHV0LCBWaWV3RW5jYXBzdWxhdGlvbiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgU2VhcmNoUXVlcnlCdWlsZGVyU2VydmljZSB9IGZyb20gJy4uLy4uL3NlcnZpY2VzL3NlYXJjaC1xdWVyeS1idWlsZGVyLnNlcnZpY2UnO1xuaW1wb3J0IHsgRmFjZXRGaWVsZEJ1Y2tldCB9IGZyb20gJy4uLy4uL21vZGVscy9mYWNldC1maWVsZC1idWNrZXQuaW50ZXJmYWNlJztcbmltcG9ydCB7IEZhY2V0RmllbGQgfSBmcm9tICcuLi8uLi9tb2RlbHMvZmFjZXQtZmllbGQuaW50ZXJmYWNlJztcbmltcG9ydCB7IFNFQVJDSF9RVUVSWV9TRVJWSUNFX1RPS0VOIH0gZnJvbSAnLi4vLi4vc2VhcmNoLXF1ZXJ5LXNlcnZpY2UudG9rZW4nO1xuaW1wb3J0IHsgU2VhcmNoRmFjZXRGaWx0ZXJzU2VydmljZSB9IGZyb20gJy4uLy4uL3NlcnZpY2VzL3NlYXJjaC1mYWNldC1maWx0ZXJzLnNlcnZpY2UnO1xuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ2FkZi1zZWFyY2gtZmlsdGVyJyxcbiAgICB0ZW1wbGF0ZVVybDogJy4vc2VhcmNoLWZpbHRlci5jb21wb25lbnQuaHRtbCcsXG4gICAgc3R5bGVVcmxzOiBbJy4vc2VhcmNoLWZpbHRlci5jb21wb25lbnQuc2NzcyddLFxuICAgIGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLk5vbmUsXG4gICAgaG9zdDogeyBjbGFzczogJ2FkZi1zZWFyY2gtZmlsdGVyJyB9XG59KVxuZXhwb3J0IGNsYXNzIFNlYXJjaEZpbHRlckNvbXBvbmVudCB7XG5cbiAgICAvKiogVG9nZ2xlcyB3aGV0aGVyIHRvIHNob3cgb3Igbm90IHRoZSBjb250ZXh0IGZhY2V0IGZpbHRlcnMuICovXG4gICAgQElucHV0KClcbiAgICBzaG93Q29udGV4dEZhY2V0czogYm9vbGVhbiA9IHRydWU7XG5cbiAgICBmYWNldFF1ZXJpZXNMYWJlbDogc3RyaW5nID0gJ0ZhY2V0IFF1ZXJpZXMnO1xuICAgIGZhY2V0RXhwYW5kZWQgPSB7XG4gICAgICAgICdkZWZhdWx0JzogZmFsc2VcbiAgICB9O1xuICAgIGRpc3BsYXlSZXNldEJ1dHRvbjogYm9vbGVhbjtcblxuICAgIGNvbnN0cnVjdG9yKEBJbmplY3QoU0VBUkNIX1FVRVJZX1NFUlZJQ0VfVE9LRU4pIHB1YmxpYyBxdWVyeUJ1aWxkZXI6IFNlYXJjaFF1ZXJ5QnVpbGRlclNlcnZpY2UsXG4gICAgICAgICAgICAgICAgcHVibGljIGZhY2V0RmlsdGVyc1NlcnZpY2U6IFNlYXJjaEZhY2V0RmlsdGVyc1NlcnZpY2UpIHtcbiAgICAgICAgaWYgKHF1ZXJ5QnVpbGRlci5jb25maWcgJiYgcXVlcnlCdWlsZGVyLmNvbmZpZy5mYWNldFF1ZXJpZXMpIHtcbiAgICAgICAgICAgIHRoaXMuZmFjZXRRdWVyaWVzTGFiZWwgPSBxdWVyeUJ1aWxkZXIuY29uZmlnLmZhY2V0UXVlcmllcy5sYWJlbCB8fCAnRmFjZXQgUXVlcmllcyc7XG4gICAgICAgICAgICB0aGlzLmZhY2V0RXhwYW5kZWRbJ3F1ZXJ5J10gPSBxdWVyeUJ1aWxkZXIuY29uZmlnLmZhY2V0UXVlcmllcy5leHBhbmRlZDtcbiAgICAgICAgfVxuICAgICAgICBpZiAocXVlcnlCdWlsZGVyLmNvbmZpZyAmJiBxdWVyeUJ1aWxkZXIuY29uZmlnLmZhY2V0RmllbGRzKSB7XG4gICAgICAgICAgICB0aGlzLmZhY2V0RXhwYW5kZWRbJ2ZpZWxkJ10gPSBxdWVyeUJ1aWxkZXIuY29uZmlnLmZhY2V0RmllbGRzLmV4cGFuZGVkO1xuICAgICAgICB9XG4gICAgICAgIGlmIChxdWVyeUJ1aWxkZXIuY29uZmlnICYmIHF1ZXJ5QnVpbGRlci5jb25maWcuZmFjZXRJbnRlcnZhbHMpIHtcbiAgICAgICAgICAgIHRoaXMuZmFjZXRFeHBhbmRlZFsnaW50ZXJ2YWwnXSA9IHF1ZXJ5QnVpbGRlci5jb25maWcuZmFjZXRJbnRlcnZhbHMuZXhwYW5kZWQ7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5kaXNwbGF5UmVzZXRCdXR0b24gPSB0aGlzLnF1ZXJ5QnVpbGRlci5jb25maWcgJiYgISF0aGlzLnF1ZXJ5QnVpbGRlci5jb25maWcucmVzZXRCdXR0b247XG4gICAgfVxuXG4gICAgc2hvdWxkRXhwYW5kKGZpZWxkOiBGYWNldEZpZWxkKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLmZhY2V0RXhwYW5kZWRbZmllbGQudHlwZV0gfHwgdGhpcy5mYWNldEV4cGFuZGVkWydkZWZhdWx0J107XG4gICAgfVxuXG4gICAgZ2V0QnVja2V0Q291bnREaXNwbGF5KGJ1Y2tldDogRmFjZXRGaWVsZEJ1Y2tldCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiBidWNrZXQuY291bnQgPT09IG51bGwgPyAnJyA6IGAoJHtidWNrZXQuY291bnR9KWA7XG4gICAgfVxufVxuIl19