import { Inject, Injectable } from '@angular/core';
import { Subject } from 'rxjs';
import { SEARCH_QUERY_SERVICE_TOKEN } from '../search-query-service.token';
import { SearchQueryBuilderService } from './search-query-builder.service';
import { SearchService, TranslationService } from '@alfresco/adf-core';
import { takeUntil } from 'rxjs/operators';
import { SearchFilterList } from '../models/search-filter-list.model';
import * as i0 from "@angular/core";
import * as i1 from "../search-query-service.token";
import * as i2 from "@alfresco/adf-core";
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@alfresco/adf-core';
import * as ɵngcc2 from './search-query-builder.service';
export class SearchFacetFiltersService {
    constructor(queryBuilder, searchService, translationService) {
        this.queryBuilder = queryBuilder;
        this.searchService = searchService;
        this.translationService = translationService;
        this.responseFacets = null;
        this.selectedBuckets = [];
        this.DEFAULT_PAGE_SIZE = 5;
        this.facetQueriesPageSize = this.DEFAULT_PAGE_SIZE;
        this.onDestroy$ = new Subject();
        if (queryBuilder.config && queryBuilder.config.facetQueries) {
            this.facetQueriesPageSize = queryBuilder.config.facetQueries.pageSize || this.DEFAULT_PAGE_SIZE;
        }
        this.queryBuilder.configUpdated
            .pipe(takeUntil(this.onDestroy$))
            .subscribe(() => {
            this.selectedBuckets = [];
            this.responseFacets = null;
        });
        this.queryBuilder.updated
            .pipe(takeUntil(this.onDestroy$))
            .subscribe((query) => this.queryBuilder.execute(query));
        this.queryBuilder.executed
            .pipe(takeUntil(this.onDestroy$))
            .subscribe((resultSetPaging) => {
            this.onDataLoaded(resultSetPaging);
            this.searchService.dataLoaded.next(resultSetPaging);
        });
    }
    onDataLoaded(data) {
        const context = data.list.context;
        if (context) {
            this.parseFacets(context);
        }
        else {
            this.responseFacets = null;
        }
    }
    parseFacets(context) {
        this.parseFacetFields(context);
        this.parseFacetIntervals(context);
        this.parseFacetQueries(context);
    }
    parseFacetItems(context, configFacetFields, itemType) {
        configFacetFields.forEach((field) => {
            const responseField = this.findFacet(context, itemType, field.label);
            const responseBuckets = this.getResponseBuckets(responseField, field)
                .filter(this.getFilterByMinCount(field.mincount));
            const alreadyExistingField = this.findResponseFacet(itemType, field.label);
            if (alreadyExistingField) {
                const alreadyExistingBuckets = alreadyExistingField.buckets && alreadyExistingField.buckets.items || [];
                this.updateExistingBuckets(responseField, responseBuckets, alreadyExistingField, alreadyExistingBuckets);
            }
            else if (responseField) {
                if (responseBuckets.length > 0) {
                    const bucketList = new SearchFilterList(responseBuckets, field.pageSize);
                    bucketList.filter = this.getBucketFilterFunction(bucketList);
                    if (!this.responseFacets) {
                        this.responseFacets = [];
                    }
                    this.responseFacets.push(Object.assign(Object.assign({}, field), { type: responseField.type || itemType, label: field.label, pageSize: field.pageSize | this.DEFAULT_PAGE_SIZE, currentPageSize: field.pageSize | this.DEFAULT_PAGE_SIZE, buckets: bucketList }));
                }
            }
        });
    }
    parseFacetFields(context) {
        const configFacetFields = this.queryBuilder.config.facetFields && this.queryBuilder.config.facetFields.fields || [];
        this.parseFacetItems(context, configFacetFields, 'field');
    }
    parseFacetIntervals(context) {
        const configFacetIntervals = this.queryBuilder.config.facetIntervals && this.queryBuilder.config.facetIntervals.intervals || [];
        this.parseFacetItems(context, configFacetIntervals, 'interval');
    }
    parseFacetQueries(context) {
        var _a;
        const facetQuerySetting = ((_a = this.queryBuilder.config.facetQueries) === null || _a === void 0 ? void 0 : _a.settings) || {};
        const configFacetQueries = this.queryBuilder.config.facetQueries && this.queryBuilder.config.facetQueries.queries || [];
        const configGroups = configFacetQueries.reduce((acc, query) => {
            const group = this.queryBuilder.getQueryGroup(query);
            if (acc[group]) {
                acc[group].push(query);
            }
            else {
                acc[group] = [query];
            }
            return acc;
        }, []);
        const mincount = this.queryBuilder.config.facetQueries && this.queryBuilder.config.facetQueries.mincount;
        const mincountFilter = this.getFilterByMinCount(mincount);
        Object.keys(configGroups).forEach((group) => {
            const responseField = this.findFacet(context, 'query', group);
            const responseBuckets = this.getResponseQueryBuckets(responseField, configGroups[group])
                .filter(mincountFilter);
            const alreadyExistingField = this.findResponseFacet('query', group);
            if (alreadyExistingField) {
                const alreadyExistingBuckets = alreadyExistingField.buckets && alreadyExistingField.buckets.items || [];
                this.updateExistingBuckets(responseField, responseBuckets, alreadyExistingField, alreadyExistingBuckets);
            }
            else if (responseField) {
                if (responseBuckets.length > 0) {
                    const bucketList = new SearchFilterList(responseBuckets, this.facetQueriesPageSize);
                    bucketList.filter = this.getBucketFilterFunction(bucketList);
                    if (!this.responseFacets) {
                        this.responseFacets = [];
                    }
                    this.responseFacets.push({
                        field: group,
                        type: responseField.type || 'query',
                        label: group,
                        pageSize: this.DEFAULT_PAGE_SIZE,
                        currentPageSize: this.DEFAULT_PAGE_SIZE,
                        buckets: bucketList,
                        settings: facetQuerySetting
                    });
                }
            }
        });
    }
    getResponseBuckets(responseField, configField) {
        return ((responseField && responseField.buckets) || []).map((respBucket) => {
            respBucket['count'] = this.getCountValue(respBucket);
            respBucket.filterQuery = respBucket.filterQuery || this.getCorrespondingFilterQuery(configField, respBucket.label);
            return Object.assign(Object.assign({}, respBucket), { checked: false, display: respBucket.display, label: respBucket.label });
        });
    }
    getResponseQueryBuckets(responseField, configGroup) {
        return (configGroup || []).map((query) => {
            const respBucket = ((responseField && responseField.buckets) || [])
                .find((bucket) => bucket.label === query.label) || {};
            respBucket['count'] = this.getCountValue(respBucket);
            return Object.assign(Object.assign({}, respBucket), { checked: false, display: respBucket.display, label: respBucket.label });
        });
    }
    getCountValue(bucket) {
        var _a, _b;
        return (!!bucket && !!bucket.metrics && ((_b = (_a = bucket.metrics[0]) === null || _a === void 0 ? void 0 : _a.value) === null || _b === void 0 ? void 0 : _b.count)) || 0;
    }
    getBucketCountDisplay(bucket) {
        return bucket.count === null ? '' : `(${bucket.count})`;
    }
    getFilterByMinCount(mincountInput) {
        return (bucket) => {
            let mincount = mincountInput;
            if (mincount === undefined) {
                mincount = 1;
            }
            return bucket.count >= mincount;
        };
    }
    getCorrespondingFilterQuery(configFacetItem, bucketLabel) {
        let filterQuery = null;
        if (configFacetItem.field && bucketLabel) {
            if (configFacetItem.sets) {
                const configSet = configFacetItem.sets.find((set) => bucketLabel === set.label);
                if (configSet) {
                    filterQuery = this.buildIntervalQuery(configFacetItem.field, configSet);
                }
            }
            else {
                filterQuery = `${configFacetItem.field}:"${bucketLabel}"`;
            }
        }
        return filterQuery;
    }
    buildIntervalQuery(fieldName, interval) {
        const start = interval.start;
        const end = interval.end;
        const startLimit = (interval.startInclusive === undefined || interval.startInclusive === true) ? '[' : '<';
        const endLimit = (interval.endInclusive === undefined || interval.endInclusive === true) ? ']' : '>';
        return `${fieldName}:${startLimit}"${start}" TO "${end}"${endLimit}`;
    }
    findFacet(context, itemType, fieldLabel) {
        return (context.facets || []).find((response) => response.type === itemType && response.label === fieldLabel) || {};
    }
    findResponseFacet(itemType, fieldLabel) {
        return (this.responseFacets || []).find((response) => response.type === itemType && response.label === fieldLabel);
    }
    updateExistingBuckets(responseField, responseBuckets, alreadyExistingField, alreadyExistingBuckets) {
        const bucketsToDelete = [];
        alreadyExistingBuckets
            .map((bucket) => {
            const responseBucket = ((responseField && responseField.buckets) || []).find((respBucket) => respBucket.label === bucket.label);
            if (!responseBucket) {
                bucketsToDelete.push(bucket);
            }
            bucket.count = this.getCountValue(responseBucket);
            return bucket;
        });
        const hasSelection = this.selectedBuckets
            .find((selBuckets) => alreadyExistingField.label === selBuckets.field.label && alreadyExistingField.type === selBuckets.field.type);
        if (!hasSelection && bucketsToDelete.length) {
            bucketsToDelete.forEach((bucket) => {
                alreadyExistingField.buckets.deleteItem(bucket);
            });
        }
        responseBuckets.forEach((respBucket) => {
            const existingBucket = alreadyExistingBuckets.find((oldBucket) => oldBucket.label === respBucket.label);
            if (!existingBucket) {
                alreadyExistingField.buckets.addItem(respBucket);
            }
        });
    }
    getBucketFilterFunction(bucketList) {
        return (bucket) => {
            if (bucket && bucketList.filterText) {
                const pattern = (bucketList.filterText || '').toLowerCase();
                const label = (this.translationService.instant(bucket.display) || this.translationService.instant(bucket.label)).toLowerCase();
                return this.queryBuilder.config.filterWithContains ? label.indexOf(pattern) !== -1 : label.startsWith(pattern);
            }
            return true;
        };
    }
    unselectFacetBucket(field, bucket) {
        if (bucket) {
            bucket.checked = false;
            this.queryBuilder.removeUserFacetBucket(field, bucket);
            this.updateSelectedBuckets();
            this.queryBuilder.update();
        }
    }
    updateSelectedBuckets() {
        if (this.responseFacets) {
            this.selectedBuckets = [];
            for (const field of this.responseFacets) {
                if (field.buckets) {
                    this.selectedBuckets.push(...this.queryBuilder.getUserFacetBuckets(field.field)
                        .filter((bucket) => bucket.checked)
                        .map((bucket) => {
                        return { field, bucket };
                    }));
                }
            }
        }
        else {
            this.selectedBuckets = [];
        }
    }
    ngOnDestroy() {
        this.onDestroy$.next();
        this.onDestroy$.complete();
    }
    resetAllSelectedBuckets() {
        this.responseFacets.forEach((field) => {
            if (field && field.buckets) {
                for (const bucket of field.buckets.items) {
                    bucket.checked = false;
                    this.queryBuilder.removeUserFacetBucket(field, bucket);
                }
                this.updateSelectedBuckets();
            }
        });
        this.queryBuilder.update();
    }
    resetQueryFragments() {
        this.queryBuilder.queryFragments = {};
        this.queryBuilder.resetToDefaults();
    }
    reset() {
        this.responseFacets = [];
        this.selectedBuckets = [];
        this.queryBuilder.resetToDefaults();
        this.queryBuilder.update();
    }
}
SearchFacetFiltersService.ɵfac = function SearchFacetFiltersService_Factory(t) { return new (t || SearchFacetFiltersService)(ɵngcc0.ɵɵinject(SEARCH_QUERY_SERVICE_TOKEN), ɵngcc0.ɵɵinject(ɵngcc1.SearchService), ɵngcc0.ɵɵinject(ɵngcc1.TranslationService)); };
SearchFacetFiltersService.ɵprov = i0.ɵɵdefineInjectable({ factory: function SearchFacetFiltersService_Factory() { return new SearchFacetFiltersService(i0.ɵɵinject(i1.SEARCH_QUERY_SERVICE_TOKEN), i0.ɵɵinject(i2.SearchService), i0.ɵɵinject(i2.TranslationService)); }, token: SearchFacetFiltersService, providedIn: "root" });
SearchFacetFiltersService.ctorParameters = () => [
    { type: SearchQueryBuilderService, decorators: [{ type: Inject, args: [SEARCH_QUERY_SERVICE_TOKEN,] }] },
    { type: SearchService },
    { type: TranslationService }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SearchFacetFiltersService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc2.SearchQueryBuilderService, decorators: [{
                type: Inject,
                args: [SEARCH_QUERY_SERVICE_TOKEN]
            }] }, { type: ɵngcc1.SearchService }, { type: ɵngcc1.TranslationService }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,