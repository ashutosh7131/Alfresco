/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, ViewEncapsulation, Inject } from '@angular/core';
import { SearchQueryBuilderService } from '../../services/search-query-builder.service';
import { SEARCH_QUERY_SERVICE_TOKEN } from '../../search-query-service.token';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@alfresco/adf-core';
import * as ɵngcc2 from '../../services/search-query-builder.service';
export class SearchSortingPickerComponent {
    constructor(queryBuilder) {
        this.queryBuilder = queryBuilder;
        this.options = [];
    }
    ngOnInit() {
        this.options = this.queryBuilder.getSortingOptions();
        const primary = this.queryBuilder.getPrimarySorting();
        if (primary) {
            this.value = primary.key;
            this.ascending = primary.ascending;
        }
    }
    onValueChanged(key) {
        this.value = key;
        this.ascending = this.getSortingOrder();
        this.applySorting();
    }
    onSortingChanged(ascending) {
        this.ascending = ascending;
        this.applySorting();
    }
    findOptionByKey(key) {
        if (key) {
            return this.options.find((opt) => opt.key === key);
        }
        return null;
    }
    applySorting() {
        const option = this.findOptionByKey(this.value);
        if (option) {
            this.queryBuilder.sorting = [Object.assign(Object.assign({}, option), { ascending: this.ascending })];
            this.queryBuilder.update();
        }
    }
    getSortingOrder() {
        const option = this.findOptionByKey(this.value);
        if (option) {
            return option.ascending;
        }
        return this.queryBuilder.getPrimarySorting().ascending;
    }
}
SearchSortingPickerComponent.ɵfac = function SearchSortingPickerComponent_Factory(t) { return new (t || SearchSortingPickerComponent)(ɵngcc0.ɵɵdirectiveInject(SEARCH_QUERY_SERVICE_TOKEN)); };
SearchSortingPickerComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: SearchSortingPickerComponent, selectors: [["adf-search-sorting-picker"]], hostAttrs: [1, "adf-search-sorting-picker"], decls: 1, vars: 3, consts: [[3, "options", "selected", "ascending", "valueChange", "sortingChange"]], template: function SearchSortingPickerComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "adf-sorting-picker", 0);
        ɵngcc0.ɵɵlistener("valueChange", function SearchSortingPickerComponent_Template_adf_sorting_picker_valueChange_0_listener($event) { return ctx.onValueChanged($event); })("sortingChange", function SearchSortingPickerComponent_Template_adf_sorting_picker_sortingChange_0_listener($event) { return ctx.onSortingChanged($event); });
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("options", ctx.options)("selected", ctx.value)("ascending", ctx.ascending);
    } }, directives: [ɵngcc1.SortingPickerComponent], styles: [".adf-search-sorting-picker .mat-icon-button{color:var(--theme-text-color)}"], encapsulation: 2 });
SearchSortingPickerComponent.ctorParameters = () => [
    { type: SearchQueryBuilderService, decorators: [{ type: Inject, args: [SEARCH_QUERY_SERVICE_TOKEN,] }] }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SearchSortingPickerComponent, [{
        type: Component,
        args: [{
                selector: 'adf-search-sorting-picker',
                template: "<adf-sorting-picker\n    [options]=\"options\"\n    [selected]=\"value\"\n    [ascending]=\"ascending\"\n    (valueChange)=\"onValueChanged($event)\"\n    (sortingChange)=\"onSortingChanged($event)\">\n</adf-sorting-picker>\n",
                encapsulation: ViewEncapsulation.None,
                host: { class: 'adf-search-sorting-picker' },
                styles: [".adf-search-sorting-picker .mat-icon-button{color:var(--theme-text-color)}"]
            }]
    }], function () { return [{ type: ɵngcc2.SearchQueryBuilderService, decorators: [{
                type: Inject,
                args: [SEARCH_QUERY_SERVICE_TOKEN]
            }] }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VhcmNoLXNvcnRpbmctcGlja2VyLmNvbXBvbmVudC5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vaG9tZS90cmF2aXMvYnVpbGQvQWxmcmVzY28vYWxmcmVzY28tbmcyLWNvbXBvbmVudHMvbGliL2NvbnRlbnQtc2VydmljZXMvc3JjL2xpYi9zZWFyY2gvY29tcG9uZW50cy9zZWFyY2gtc29ydGluZy1waWNrZXIvc2VhcmNoLXNvcnRpbmctcGlja2VyLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBRUgsT0FBTyxFQUFFLFNBQVMsRUFBVSxpQkFBaUIsRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDN0UsT0FBTyxFQUFFLHlCQUF5QixFQUFFLE1BQU0sNkNBQTZDLENBQUM7QUFFeEYsT0FBTyxFQUFFLDBCQUEwQixFQUFFLE1BQU0sa0NBQWtDLENBQUM7Ozs7QUFTOUUsTUFBTSxPQUFPLDRCQUE0QjtBQUFHLElBTXhDLFlBQXdELFlBQXVDO0FBQUksUUFBM0MsaUJBQVksR0FBWixZQUFZLENBQTJCO0FBQUMsUUFKaEcsWUFBTyxHQUE4QixFQUFFLENBQUM7QUFDNUMsSUFHc0csQ0FBQztBQUN2RyxJQUNJLFFBQVE7QUFDWixRQUFRLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO0FBQzdELFFBQ1EsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO0FBQzlELFFBQVEsSUFBSSxPQUFPLEVBQUU7QUFDckIsWUFBWSxJQUFJLENBQUMsS0FBSyxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUM7QUFDckMsWUFBWSxJQUFJLENBQUMsU0FBUyxHQUFHLE9BQU8sQ0FBQyxTQUFTLENBQUM7QUFDL0MsU0FBUztBQUNULElBQUksQ0FBQztBQUNMLElBQ0ksY0FBYyxDQUFDLEdBQVc7QUFDOUIsUUFBUSxJQUFJLENBQUMsS0FBSyxHQUFHLEdBQUcsQ0FBQztBQUN6QixRQUFRLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLGVBQWUsRUFBRSxDQUFDO0FBQ2hELFFBQVEsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO0FBQzVCLElBQUksQ0FBQztBQUNMLElBQ0ksZ0JBQWdCLENBQUMsU0FBa0I7QUFDdkMsUUFBUSxJQUFJLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQztBQUNuQyxRQUFRLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQztBQUM1QixJQUFJLENBQUM7QUFDTCxJQUNZLGVBQWUsQ0FBQyxHQUFXO0FBQUksUUFDbkMsSUFBSSxHQUFHLEVBQUU7QUFDakIsWUFBWSxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxHQUFHLENBQUMsR0FBRyxLQUFLLEdBQUcsQ0FBQyxDQUFDO0FBQy9ELFNBQVM7QUFDVCxRQUFRLE9BQU8sSUFBSSxDQUFDO0FBQ3BCLElBQUksQ0FBQztBQUNMLElBQ1ksWUFBWTtBQUN4QixRQUFRLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ3hELFFBQVEsSUFBSSxNQUFNLEVBQUU7QUFDcEIsWUFBWSxJQUFJLENBQUMsWUFBWSxDQUFDLE9BQU8sR0FBRyxpQ0FDckIsTUFBTSxLQUNULFNBQVMsRUFBRSxJQUFJLENBQUMsU0FBUyxJQUMzQixDQUFDO0FBQ2YsWUFBWSxJQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sRUFBRSxDQUFDO0FBQ3ZDLFNBQVM7QUFDVCxJQUFJLENBQUM7QUFDTCxJQUNZLGVBQWU7QUFBSyxRQUN4QixNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUN4RCxRQUFRLElBQUksTUFBTSxFQUFFO0FBQ3BCLFlBQVksT0FBTyxNQUFNLENBQUMsU0FBUyxDQUFDO0FBQ3BDLFNBQVM7QUFDVCxRQUNRLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyxpQkFBaUIsRUFBRSxDQUFDLFNBQVMsQ0FBQztBQUMvRCxJQUFJLENBQUM7QUFDTDt3REE5REMsU0FBUyxTQUFDLGtCQUNQLFFBQVEsRUFBRSwyQkFBMkIsa0JBQ3JDO2dNQUFxRCxrQkFFckQsYUFBYSxFQUFFLGlCQUFpQixDQUFDLElBQUksa0JBQ3JDLElBQUksRUFBRSxFQUFFLEtBQUssRUFBRSwyQkFBMkIsRUFBRTt1REFDL0M7Ozs7O2tLQUNJO0FBQUM7QUFBc0QsWUFYbkQseUJBQXlCLHVCQWlCakIsTUFBTSxTQUFDLDBCQUEwQjtBQUFROzs7Ozs7Ozs7Ozs7O2tDQUFFO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBDb21wb25lbnQsIE9uSW5pdCwgVmlld0VuY2Fwc3VsYXRpb24sIEluamVjdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgU2VhcmNoUXVlcnlCdWlsZGVyU2VydmljZSB9IGZyb20gJy4uLy4uL3NlcnZpY2VzL3NlYXJjaC1xdWVyeS1idWlsZGVyLnNlcnZpY2UnO1xuaW1wb3J0IHsgU2VhcmNoU29ydGluZ0RlZmluaXRpb24gfSBmcm9tICcuLi8uLi9tb2RlbHMvc2VhcmNoLXNvcnRpbmctZGVmaW5pdGlvbi5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgU0VBUkNIX1FVRVJZX1NFUlZJQ0VfVE9LRU4gfSBmcm9tICcuLi8uLi9zZWFyY2gtcXVlcnktc2VydmljZS50b2tlbic7XG5cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAnYWRmLXNlYXJjaC1zb3J0aW5nLXBpY2tlcicsXG4gICAgdGVtcGxhdGVVcmw6ICcuL3NlYXJjaC1zb3J0aW5nLXBpY2tlci5jb21wb25lbnQuaHRtbCcsXG4gICAgc3R5bGVVcmxzOiBbJy4vc2VhcmNoLXNvcnRpbmctcGlja2VyLmNvbXBvbmVudC5zY3NzJ10sXG4gICAgZW5jYXBzdWxhdGlvbjogVmlld0VuY2Fwc3VsYXRpb24uTm9uZSxcbiAgICBob3N0OiB7IGNsYXNzOiAnYWRmLXNlYXJjaC1zb3J0aW5nLXBpY2tlcicgfVxufSlcbmV4cG9ydCBjbGFzcyBTZWFyY2hTb3J0aW5nUGlja2VyQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcblxuICAgIG9wdGlvbnM6IFNlYXJjaFNvcnRpbmdEZWZpbml0aW9uW10gPSBbXTtcbiAgICB2YWx1ZTogc3RyaW5nO1xuICAgIGFzY2VuZGluZzogYm9vbGVhbjtcblxuICAgIGNvbnN0cnVjdG9yKEBJbmplY3QoU0VBUkNIX1FVRVJZX1NFUlZJQ0VfVE9LRU4pIHByaXZhdGUgcXVlcnlCdWlsZGVyOiBTZWFyY2hRdWVyeUJ1aWxkZXJTZXJ2aWNlKSB7fVxuXG4gICAgbmdPbkluaXQoKSB7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IHRoaXMucXVlcnlCdWlsZGVyLmdldFNvcnRpbmdPcHRpb25zKCk7XG5cbiAgICAgICAgY29uc3QgcHJpbWFyeSA9IHRoaXMucXVlcnlCdWlsZGVyLmdldFByaW1hcnlTb3J0aW5nKCk7XG4gICAgICAgIGlmIChwcmltYXJ5KSB7XG4gICAgICAgICAgICB0aGlzLnZhbHVlID0gcHJpbWFyeS5rZXk7XG4gICAgICAgICAgICB0aGlzLmFzY2VuZGluZyA9IHByaW1hcnkuYXNjZW5kaW5nO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgb25WYWx1ZUNoYW5nZWQoa2V5OiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy52YWx1ZSA9IGtleTtcbiAgICAgICAgdGhpcy5hc2NlbmRpbmcgPSB0aGlzLmdldFNvcnRpbmdPcmRlcigpO1xuICAgICAgICB0aGlzLmFwcGx5U29ydGluZygpO1xuICAgIH1cblxuICAgIG9uU29ydGluZ0NoYW5nZWQoYXNjZW5kaW5nOiBib29sZWFuKSB7XG4gICAgICAgIHRoaXMuYXNjZW5kaW5nID0gYXNjZW5kaW5nO1xuICAgICAgICB0aGlzLmFwcGx5U29ydGluZygpO1xuICAgIH1cblxuICAgIHByaXZhdGUgZmluZE9wdGlvbkJ5S2V5KGtleTogc3RyaW5nKTogU2VhcmNoU29ydGluZ0RlZmluaXRpb24ge1xuICAgICAgICBpZiAoa2V5KSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5vcHRpb25zLmZpbmQoKG9wdCkgPT4gb3B0LmtleSA9PT0ga2V5KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBwcml2YXRlIGFwcGx5U29ydGluZygpIHtcbiAgICAgICAgY29uc3Qgb3B0aW9uID0gdGhpcy5maW5kT3B0aW9uQnlLZXkodGhpcy52YWx1ZSk7XG4gICAgICAgIGlmIChvcHRpb24pIHtcbiAgICAgICAgICAgIHRoaXMucXVlcnlCdWlsZGVyLnNvcnRpbmcgPSBbe1xuICAgICAgICAgICAgICAgIC4uLm9wdGlvbixcbiAgICAgICAgICAgICAgICBhc2NlbmRpbmc6IHRoaXMuYXNjZW5kaW5nXG4gICAgICAgICAgICB9XTtcbiAgICAgICAgICAgIHRoaXMucXVlcnlCdWlsZGVyLnVwZGF0ZSgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBnZXRTb3J0aW5nT3JkZXIoKTogYm9vbGVhbiB7XG4gICAgICAgIGNvbnN0IG9wdGlvbiA9IHRoaXMuZmluZE9wdGlvbkJ5S2V5KHRoaXMudmFsdWUpO1xuICAgICAgICBpZiAob3B0aW9uKSB7XG4gICAgICAgICAgICByZXR1cm4gb3B0aW9uLmFzY2VuZGluZztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLnF1ZXJ5QnVpbGRlci5nZXRQcmltYXJ5U29ydGluZygpLmFzY2VuZGluZztcbiAgICB9XG5cbn1cbiJdfQ==