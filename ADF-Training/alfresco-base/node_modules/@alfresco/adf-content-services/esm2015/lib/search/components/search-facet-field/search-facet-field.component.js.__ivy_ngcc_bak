/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, Inject, Input, ViewEncapsulation } from '@angular/core';
import { SEARCH_QUERY_SERVICE_TOKEN } from '../../search-query-service.token';
import { SearchQueryBuilderService } from '../../services/search-query-builder.service';
import { SearchFacetFiltersService } from '../../services/search-facet-filters.service';
import { TranslationService } from '@alfresco/adf-core';
import { Subject } from 'rxjs';
export class SearchFacetFieldComponent {
    constructor(queryBuilder, searchFacetFiltersService, translationService) {
        this.queryBuilder = queryBuilder;
        this.searchFacetFiltersService = searchFacetFiltersService;
        this.translationService = translationService;
        this.displayValue$ = new Subject();
    }
    get canUpdateOnChange() {
        var _a, _b;
        return (_b = (_a = this.field.settings) === null || _a === void 0 ? void 0 : _a.allowUpdateOnChange) !== null && _b !== void 0 ? _b : true;
    }
    onToggleBucket(event, field, bucket) {
        if (event && bucket) {
            if (event.checked) {
                this.selectFacetBucket(field, bucket);
            }
            else {
                this.unselectFacetBucket(field, bucket);
            }
        }
    }
    selectFacetBucket(field, bucket) {
        if (bucket) {
            bucket.checked = true;
            this.queryBuilder.addUserFacetBucket(field, bucket);
            this.searchFacetFiltersService.updateSelectedBuckets();
            if (this.canUpdateOnChange) {
                this.updateDisplayValue();
                this.queryBuilder.update();
            }
        }
    }
    unselectFacetBucket(field, bucket) {
        if (bucket) {
            bucket.checked = false;
            this.queryBuilder.removeUserFacetBucket(field, bucket);
            this.searchFacetFiltersService.updateSelectedBuckets();
            if (this.canUpdateOnChange) {
                this.updateDisplayValue();
                this.queryBuilder.update();
            }
        }
    }
    canResetSelectedBuckets(field) {
        if (field && field.buckets) {
            return field.buckets.items.some((bucket) => bucket.checked);
        }
        return false;
    }
    resetSelectedBuckets(field) {
        if (field && field.buckets) {
            for (const bucket of field.buckets.items) {
                bucket.checked = false;
                this.queryBuilder.removeUserFacetBucket(field, bucket);
            }
            this.searchFacetFiltersService.updateSelectedBuckets();
            if (this.canUpdateOnChange) {
                this.queryBuilder.update();
            }
        }
    }
    getBucketCountDisplay(bucket) {
        return bucket.count === null ? '' : `(${bucket.count})`;
    }
    updateDisplayValue() {
        var _a, _b, _c;
        if (!((_a = this.field.buckets) === null || _a === void 0 ? void 0 : _a.items)) {
            this.displayValue$.next('');
        }
        else {
            const displayValue = (_c = (_b = this.field.buckets) === null || _b === void 0 ? void 0 : _b.items) === null || _c === void 0 ? void 0 : _c.filter((item) => item.checked).map((item) => this.translationService.instant(item.display || item.label)).join(', ');
            this.displayValue$.next(displayValue);
        }
    }
    reset() {
        this.resetSelectedBuckets(this.field);
        this.updateDisplayValue();
        this.queryBuilder.update();
    }
    submitValues() {
        this.updateDisplayValue();
        this.queryBuilder.update();
    }
}
SearchFacetFieldComponent.decorators = [
    { type: Component, args: [{
                selector: 'adf-search-facet-field',
                template: "<div class=\"adf-search-filter-facet\">\n    <div class=\"adf-facet-result-filter\">\n        <div class=\"adf-facet-search-container\">\n            <button mat-icon-button class=\"adf-facet-search-icon\" tabindex=\"-1\">\n                <mat-icon>search</mat-icon>\n            </button>\n            <mat-form-field class=\"adf-facet-search-field\" floatLabel=\"never\">\n                <input matInput placeholder=\"{{ 'SEARCH.FILTER.ACTIONS.SEARCH' | translate }}\"\n                       [attr.data-automation-id]=\"'facet-result-filter-'+field.label\" [(ngModel)]=\"field.buckets.filterText\">\n                <button *ngIf=\"field.buckets.filterText\" mat-button matSuffix mat-icon-button\n                        (click)=\"field.buckets.filterText = ''\">\n                    <mat-icon>close</mat-icon>\n                </button>\n            </mat-form-field>\n        </div>\n    </div>\n\n    <div class=\"adf-checklist\">\n        <mat-checkbox *ngFor=\"let bucket of field.buckets\" [checked]=\"bucket.checked\"\n            [attr.data-automation-id]=\"'checkbox-'+field.label+'-'+(bucket.display || bucket.label)\"\n            (change)=\"onToggleBucket($event, field, bucket)\">\n            <div matTooltip=\"{{ bucket.display || bucket.label | translate }} {{ getBucketCountDisplay(bucket) }}\"\n                matTooltipPosition=\"right\" class=\"adf-facet-label\">\n                {{ bucket.display || bucket.label | translate }} {{ getBucketCountDisplay(bucket) }}\n            </div>\n        </mat-checkbox>\n    </div>\n\n    <div class=\"adf-facet-buttons\" *ngIf=\"field.buckets.fitsPage && !field.settings?.hideDefaultAction\">\n        <button *ngIf=\"canResetSelectedBuckets(field)\" mat-button color=\"primary\" (click)=\"resetSelectedBuckets(field)\">\n            {{ 'SEARCH.FILTER.ACTIONS.CLEAR-ALL' | translate }}\n        </button>\n    </div>\n\n    <div class=\"adf-facet-buttons\" *ngIf=\"!field.buckets.fitsPage\">\n        <button mat-icon-button *ngIf=\"canResetSelectedBuckets(field)\"\n            title=\"{{ 'SEARCH.FILTER.ACTIONS.CLEAR-ALL' | translate }}\" (click)=\"resetSelectedBuckets(field)\">\n            <mat-icon>clear</mat-icon>\n        </button>\n        <button mat-icon-button *ngIf=\"field.buckets.canShowLessItems\" (click)=\"field.buckets.showLessItems()\"\n            title=\"{{ 'SEARCH.FILTER.ACTIONS.SHOW-LESS' | translate }}\">\n            <mat-icon>keyboard_arrow_up</mat-icon>\n        </button>\n        <button mat-icon-button *ngIf=\"field.buckets.canShowMoreItems\" (click)=\"field.buckets.showMoreItems()\"\n            title=\"{{ 'SEARCH.FILTER.ACTIONS.SHOW-MORE' | translate }}\">\n            <mat-icon>keyboard_arrow_down</mat-icon>\n        </button>\n    </div>\n</div>\n",
                encapsulation: ViewEncapsulation.None,
                styles: [".adf-search-filter-facet .adf-checklist{display:flex;flex-direction:column;max-height:180px;overflow-y:auto;padding:5px 0}.adf-search-filter-facet .adf-checklist .mat-checkbox-label{overflow:hidden;text-overflow:ellipsis;width:100%}.adf-search-filter-facet .adf-checklist .mat-checkbox-layout{width:100%}.adf-search-filter-facet .adf-checklist .adf-facet-label{overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.adf-search-filter-facet .adf-checklist .mat-checkbox{margin:5px}.adf-search-filter-facet .adf-checklist .mat-checkbox.mat-checkbox-checked .mat-checkbox-label{font-weight:700}.adf-search-filter-facet .adf-facet-result-filter{padding-bottom:16px}.adf-search-filter-facet .adf-facet-result-filter .adf-facet-search-container{background:var(--theme-background-color);border-radius:6px;display:flex;height:32px}.adf-search-filter-facet .adf-facet-result-filter .adf-facet-search-container .adf-facet-search-icon{margin-top:-4px;width:27px}.adf-search-filter-facet .adf-facet-result-filter .adf-facet-search-container .adf-facet-search-icon .mat-icon{font-size:15px}.adf-search-filter-facet .adf-facet-result-filter .adf-facet-search-container .adf-facet-search-field{flex:1;font-size:14px;letter-spacing:.25px;line-height:24px;margin-top:-16px;padding:2px}.adf-search-filter-facet .adf-facet-result-filter .adf-facet-search-container .adf-facet-search-field .mat-form-field-underline{display:none}.adf-search-filter-facet .adf-facet-result-filter .adf-facet-search-container .adf-facet-search-field .mat-form-field-suffix{padding-right:1px}.adf-search-filter-facet .adf-facet-buttons{text-align:right}.adf-search-filter-facet .adf-facet-buttons .mat-button{text-transform:uppercase}.adf-search-filter-facet .adf-facet-buttons--topSpace{padding-top:15px}.adf-search-filter-facet .mat-checkbox-label,.adf-search-filter-facet .mat-radio-label{color:var(--theme-text-color)}"]
            },] }
];
SearchFacetFieldComponent.ctorParameters = () => [
    { type: SearchQueryBuilderService, decorators: [{ type: Inject, args: [SEARCH_QUERY_SERVICE_TOKEN,] }] },
    { type: SearchFacetFiltersService },
    { type: TranslationService }
];
SearchFacetFieldComponent.propDecorators = {
    field: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,