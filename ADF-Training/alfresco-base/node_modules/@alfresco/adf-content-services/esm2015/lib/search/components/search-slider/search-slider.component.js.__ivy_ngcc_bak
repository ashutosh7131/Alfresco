/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, Input, ViewEncapsulation } from '@angular/core';
import { Subject } from 'rxjs';
export class SearchSliderComponent {
    constructor() {
        this.thumbLabel = false;
        this.displayValue$ = new Subject();
    }
    ngOnInit() {
        var _a;
        if (this.settings) {
            if (this.settings.hasOwnProperty('min')) {
                this.min = this.settings['min'];
            }
            if (this.settings.hasOwnProperty('max')) {
                this.max = this.settings['max'];
            }
            if (this.settings.hasOwnProperty('step')) {
                this.step = this.settings['step'];
            }
            this.thumbLabel = this.settings['thumbLabel'] ? true : false;
            this.enableChangeUpdate = (_a = this.settings.allowUpdateOnChange) !== null && _a !== void 0 ? _a : true;
        }
        if (this.startValue) {
            this.setValue(this.startValue);
        }
    }
    clear() {
        this.value = this.min || 0;
        if (this.enableChangeUpdate) {
            this.updateQuery(null);
        }
    }
    reset() {
        this.value = this.min || 0;
        this.updateQuery(null);
    }
    onChangedHandler(event) {
        this.value = event.value;
        if (this.enableChangeUpdate) {
            this.updateQuery(this.value);
        }
    }
    submitValues() {
        this.updateQuery(this.value);
    }
    hasValidValue() {
        return !!this.value;
    }
    getCurrentValue() {
        return this.value;
    }
    setValue(value) {
        this.value = value;
        this.submitValues();
    }
    updateQuery(value) {
        var _a;
        this.displayValue$.next(this.value ? `${this.value} ${(_a = this.settings.unit) !== null && _a !== void 0 ? _a : ''}` : '');
        if (this.id && this.context && this.settings && this.settings.field) {
            if (value === null) {
                this.context.queryFragments[this.id] = '';
            }
            else {
                this.context.queryFragments[this.id] = `${this.settings.field}:[0 TO ${value}]`;
            }
            this.context.update();
        }
    }
}
SearchSliderComponent.decorators = [
    { type: Component, args: [{
                selector: 'adf-search-slider',
                template: "<mat-slider\n    [(value)]=\"value\"\n    [min]=\"min\"\n    [max]=\"max\"\n    [step]=\"step\"\n    [thumbLabel]=\"thumbLabel\"\n    (change)=\"onChangedHandler($event)\"\n    data-automation-id=\"slider-range\">\n</mat-slider>\n\n<div class=\"adf-facet-buttons\" *ngIf=\"!settings?.hideDefaultAction\">\n    <button mat-button color=\"primary\" (click)=\"clear()\" data-automation-id=\"slider-btn-clear\">\n        {{ 'SEARCH.FILTER.ACTIONS.CLEAR' | translate }}\n    </button>\n</div>\n",
                encapsulation: ViewEncapsulation.None,
                host: { class: 'adf-search-slider' },
                styles: [".adf-search-slider .mat-slider{width:100%}"]
            },] }
];
SearchSliderComponent.propDecorators = {
    value: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,