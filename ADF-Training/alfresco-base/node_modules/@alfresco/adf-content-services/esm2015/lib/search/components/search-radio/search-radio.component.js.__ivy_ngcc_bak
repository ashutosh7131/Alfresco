/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, Input, ViewEncapsulation } from '@angular/core';
import { SearchFilterList } from '../../models/search-filter-list.model';
import { Subject } from 'rxjs';
export class SearchRadioComponent {
    constructor() {
        this.pageSize = 5;
        this.isActive = false;
        this.displayValue$ = new Subject();
        this.options = new SearchFilterList();
    }
    ngOnInit() {
        var _a;
        if (this.settings) {
            this.pageSize = this.settings.pageSize || 5;
            if (this.settings.options && this.settings.options.length > 0) {
                this.options = new SearchFilterList(this.settings.options, this.pageSize);
            }
        }
        const initialValue = this.getSelectedValue();
        if (initialValue !== null) {
            this.value = initialValue;
            this.context.queryFragments[this.id] = initialValue;
        }
        else if (this.startValue !== null) {
            this.value = initialValue;
            this.context.queryFragments[this.id] = initialValue;
        }
        this.enableChangeUpdate = (_a = this.settings.allowUpdateOnChange) !== null && _a !== void 0 ? _a : true;
        this.updateDisplayValue();
    }
    getSelectedValue() {
        const options = this.settings['options'] || [];
        if (options && options.length > 0) {
            this.isActive = true;
            let selected = options.find((opt) => opt.default);
            if (!selected) {
                selected = options[0];
            }
            return selected.value;
        }
        return null;
    }
    submitValues() {
        this.setValue(this.value);
        this.updateDisplayValue();
        this.context.update();
    }
    hasValidValue() {
        const currentValue = this.getSelectedValue();
        return !!currentValue;
    }
    setValue(newValue) {
        this.value = newValue;
        this.context.queryFragments[this.id] = newValue;
        if (this.enableChangeUpdate) {
            this.updateDisplayValue();
            this.context.update();
        }
    }
    getCurrentValue() {
        return this.getSelectedValue();
    }
    updateDisplayValue() {
        const selectOptions = this.options.items.find(({ value }) => value === this.value);
        if (selectOptions) {
            this.displayValue$.next(selectOptions.name);
        }
        else {
            this.displayValue$.next('');
        }
    }
    changeHandler(event) {
        this.setValue(event.value);
    }
    clear() {
        this.isActive = false;
        const initialValue = this.getSelectedValue();
        if (initialValue !== null) {
            this.setValue(initialValue);
        }
    }
    reset() {
        const initialValue = this.getSelectedValue();
        if (initialValue !== null) {
            this.setValue(initialValue);
            this.updateDisplayValue();
            this.context.update();
        }
    }
}
SearchRadioComponent.decorators = [
    { type: Component, args: [{
                selector: 'adf-search-radio',
                template: "<mat-radio-group\n    [(ngModel)]=\"value\"\n    (change)=\"changeHandler($event)\">\n    <mat-radio-button [attr.data-automation-id]=\"'search-radio-'+(option.name | translate)\"\n        *ngFor=\"let option of options\"\n        [value]=\"option.value\"\n        class=\"adf-facet-filter\">\n        <div\n            matTooltip=\"{{ option.name | translate }}\"\n            matTooltipPosition=\"right\"\n            class=\"filter-label\">\n            {{ option.name | translate }}\n        </div>\n    </mat-radio-button>\n</mat-radio-group>\n\n<div class=\"adf-facet-buttons\" *ngIf=\"!options.fitsPage\">\n    <button mat-icon-button\n        *ngIf=\"options.canShowLessItems\"\n        title=\"{{ 'SEARCH.FILTER.ACTIONS.SHOW-LESS' | translate }}\"\n        (click)=\"options.showLessItems()\">\n        <mat-icon>keyboard_arrow_up</mat-icon>\n    </button>\n    <button mat-icon-button\n        *ngIf=\"options.canShowMoreItems\"\n        title=\"{{ 'SEARCH.FILTER.ACTIONS.SHOW-MORE' | translate }}\"\n        (click)=\"options.showMoreItems()\">\n        <mat-icon>keyboard_arrow_down</mat-icon>\n    </button>\n</div>\n",
                encapsulation: ViewEncapsulation.None,
                host: { class: 'adf-search-radio' },
                styles: [".adf-search-radio .mat-radio-group{display:flex;flex-direction:column}.adf-search-radio .mat-radio-button{margin:5px}.adf-search-radio .adf-facet-filter .mat-radio-label-content{overflow:hidden;text-overflow:ellipsis;width:100%}.adf-search-radio .adf-facet-filter .mat-radio-label{width:100%}.adf-search-radio .adf-facet-filter .adf-filter-label{overflow:hidden;text-overflow:ellipsis;white-space:nowrap}"]
            },] }
];
SearchRadioComponent.ctorParameters = () => [];
SearchRadioComponent.propDecorators = {
    value: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,