/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, ViewEncapsulation } from '@angular/core';
import { SearchFilterList } from '../../models/search-filter-list.model';
import { TranslationService } from '@alfresco/adf-core';
import { Subject } from 'rxjs';
export class SearchCheckListComponent {
    constructor(translationService) {
        this.translationService = translationService;
        this.operator = 'OR';
        this.startValue = null;
        this.pageSize = 5;
        this.isActive = false;
        this.enableChangeUpdate = true;
        this.displayValue$ = new Subject();
        this.options = new SearchFilterList();
    }
    ngOnInit() {
        var _a;
        if (this.settings) {
            this.operator = this.settings.operator || 'OR';
            this.pageSize = this.settings.pageSize || 5;
            if (this.settings.options && this.settings.options.length > 0) {
                this.options = new SearchFilterList(this.settings.options, this.pageSize);
            }
            this.enableChangeUpdate = (_a = this.settings.allowUpdateOnChange) !== null && _a !== void 0 ? _a : true;
        }
        if (this.startValue) {
            this.setValue(this.startValue);
        }
    }
    clear() {
        this.isActive = false;
        this.clearOptions();
        if (this.id && this.context && this.enableChangeUpdate) {
            this.updateDisplayValue();
            this.context.update();
        }
    }
    clearOptions() {
        this.options.items.forEach((opt) => {
            opt.checked = false;
        });
        if (this.id && this.context) {
            this.context.queryFragments[this.id] = '';
        }
    }
    reset() {
        this.isActive = false;
        this.clearOptions();
        if (this.id && this.context) {
            this.updateDisplayValue();
            this.context.update();
        }
    }
    updateDisplayValue() {
        const displayValue = this.options.items
            .filter((option) => option.checked)
            .map(({ name }) => this.translationService.instant(name))
            .join(', ');
        this.displayValue$.next(displayValue);
    }
    changeHandler(event, option) {
        option.checked = event.checked;
        const checkedValues = this.getCheckedValues();
        this.isActive = !!checkedValues.length;
        if (this.enableChangeUpdate) {
            this.submitValues();
        }
    }
    hasValidValue() {
        const checkedValues = this.getCheckedValues();
        return !!checkedValues.length;
    }
    getCurrentValue() {
        return this.getCheckedValues();
    }
    setValue(value) {
        this.options.items.filter((item) => value.includes(item.value))
            .map((item) => item.checked = true);
        this.submitValues();
    }
    getCheckedValues() {
        return this.options.items
            .filter((option) => option.checked)
            .map((option) => option.value);
    }
    submitValues() {
        const checkedValues = this.getCheckedValues();
        const query = checkedValues.join(` ${this.operator} `);
        if (this.id && this.context) {
            this.context.queryFragments[this.id] = query;
            this.updateDisplayValue();
            this.context.update();
        }
    }
}
SearchCheckListComponent.decorators = [
    { type: Component, args: [{
                selector: 'adf-search-check-list',
                template: "<div class=\"checklist\">\n    <mat-checkbox\n        *ngFor=\"let option of options\"\n        [checked]=\"option.checked\"\n        (keydown.enter)=\"option.checked = !option.checked\"\n        [attr.data-automation-id]=\"'checkbox-' + (option.name)\"\n        (change)=\"changeHandler($event, option)\"\n        class=\"adf-facet-filter\">\n        <div matTooltip=\"{{ option.name | translate }}\"\n            matTooltipPosition=\"right\"\n            class=\"facet-name\">\n            {{ option.name | translate }}\n        </div>\n\n    </mat-checkbox>\n</div>\n\n<div class=\"adf-facet-buttons\" *ngIf=\"options.fitsPage && !settings?.hideDefaultAction\">\n    <button mat-button color=\"primary\" (click)=\"clear()\">\n        {{ 'SEARCH.FILTER.ACTIONS.CLEAR-ALL' | translate }}\n    </button>\n</div>\n\n<div class=\"adf-facet-buttons\" *ngIf=\"!options.fitsPage\">\n    <button mat-icon-button\n        title=\"{{ 'SEARCH.FILTER.ACTIONS.CLEAR-ALL' | translate }}\"\n        (click)=\"clear()\">\n        <mat-icon>clear</mat-icon>\n    </button>\n    <button mat-icon-button\n        *ngIf=\"options.canShowLessItems\"\n        title=\"{{ 'SEARCH.FILTER.ACTIONS.SHOW-LESS' | translate }}\"\n        (click)=\"options.showLessItems()\">\n        <mat-icon>keyboard_arrow_up</mat-icon>\n    </button>\n    <button mat-icon-button\n        *ngIf=\"options.canShowMoreItems\"\n        title=\"{{ 'SEARCH.FILTER.ACTIONS.SHOW-MORE' | translate }}\"\n        (click)=\"options.showMoreItems()\">\n        <mat-icon>keyboard_arrow_down</mat-icon>\n    </button>\n</div>\n",
                encapsulation: ViewEncapsulation.None,
                host: { class: 'adf-search-check-list' },
                styles: [".adf-search-check-list{display:flex;flex-direction:column}.adf-search-check-list .adf-facet-filter .mat-checkbox-label{overflow:hidden;text-overflow:ellipsis;width:100%}.adf-search-check-list .adf-facet-filter .mat-checkbox-layout{width:100%}.adf-search-check-list .adf-facet-filter .adf-facet-name{overflow:hidden;text-overflow:ellipsis;white-space:nowrap}"]
            },] }
];
SearchCheckListComponent.ctorParameters = () => [
    { type: TranslationService }
];
//# sourceMappingURL=data:application/json;base64,