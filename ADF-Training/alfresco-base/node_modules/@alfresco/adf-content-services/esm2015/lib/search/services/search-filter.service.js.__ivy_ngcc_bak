import { Injectable } from '@angular/core';
import { SearchTextComponent } from '../components/search-text/search-text.component';
import { SearchRadioComponent } from '../components/search-radio/search-radio.component';
import { SearchSliderComponent } from '../components/search-slider/search-slider.component';
import { SearchNumberRangeComponent } from '../components/search-number-range/search-number-range.component';
import { SearchCheckListComponent } from '../components/search-check-list/search-check-list.component';
import { SearchDateRangeComponent } from '../components/search-date-range/search-date-range.component';
import { SearchDatetimeRangeComponent } from '../components/search-datetime-range/search-datetime-range.component';
import * as i0 from "@angular/core";
export class SearchFilterService {
    constructor() {
        this.widgets = {
            'text': SearchTextComponent,
            'radio': SearchRadioComponent,
            'slider': SearchSliderComponent,
            'number-range': SearchNumberRangeComponent,
            'check-list': SearchCheckListComponent,
            'date-range': SearchDateRangeComponent,
            'datetime-range': SearchDatetimeRangeComponent
        };
    }
}
SearchFilterService.ɵprov = i0.ɵɵdefineInjectable({ factory: function SearchFilterService_Factory() { return new SearchFilterService(); }, token: SearchFilterService, providedIn: "root" });
SearchFilterService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VhcmNoLWZpbHRlci5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Ii9ob21lL3RyYXZpcy9idWlsZC9BbGZyZXNjby9hbGZyZXNjby1uZzItY29tcG9uZW50cy9saWIvY29udGVudC1zZXJ2aWNlcy9zcmMvIiwic291cmNlcyI6WyJsaWIvc2VhcmNoL3NlcnZpY2VzL3NlYXJjaC1maWx0ZXIuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFpQkEsT0FBTyxFQUFFLFVBQVUsRUFBUSxNQUFNLGVBQWUsQ0FBQztBQUNqRCxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxpREFBaUQsQ0FBQztBQUN0RixPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxtREFBbUQsQ0FBQztBQUN6RixPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSxxREFBcUQsQ0FBQztBQUM1RixPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSxpRUFBaUUsQ0FBQztBQUM3RyxPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSw2REFBNkQsQ0FBQztBQUN2RyxPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSw2REFBNkQsQ0FBQztBQUN2RyxPQUFPLEVBQUUsNEJBQTRCLEVBQUUsTUFBTSxxRUFBcUUsQ0FBQzs7QUFLbkgsTUFBTSxPQUFPLG1CQUFtQjtJQUhoQztRQVFJLFlBQU8sR0FBK0I7WUFDbEMsTUFBTSxFQUFFLG1CQUFtQjtZQUMzQixPQUFPLEVBQUUsb0JBQW9CO1lBQzdCLFFBQVEsRUFBRSxxQkFBcUI7WUFDL0IsY0FBYyxFQUFFLDBCQUEwQjtZQUMxQyxZQUFZLEVBQUUsd0JBQXdCO1lBQ3RDLFlBQVksRUFBRSx3QkFBd0I7WUFDdEMsZ0JBQWdCLEVBQUUsNEJBQTRCO1NBQ2pELENBQUM7S0FFTDs7OztZQWxCQSxVQUFVLFNBQUM7Z0JBQ1IsVUFBVSxFQUFFLE1BQU07YUFDckIiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBJbmplY3RhYmxlLCBUeXBlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBTZWFyY2hUZXh0Q29tcG9uZW50IH0gZnJvbSAnLi4vY29tcG9uZW50cy9zZWFyY2gtdGV4dC9zZWFyY2gtdGV4dC5jb21wb25lbnQnO1xuaW1wb3J0IHsgU2VhcmNoUmFkaW9Db21wb25lbnQgfSBmcm9tICcuLi9jb21wb25lbnRzL3NlYXJjaC1yYWRpby9zZWFyY2gtcmFkaW8uY29tcG9uZW50JztcbmltcG9ydCB7IFNlYXJjaFNsaWRlckNvbXBvbmVudCB9IGZyb20gJy4uL2NvbXBvbmVudHMvc2VhcmNoLXNsaWRlci9zZWFyY2gtc2xpZGVyLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBTZWFyY2hOdW1iZXJSYW5nZUNvbXBvbmVudCB9IGZyb20gJy4uL2NvbXBvbmVudHMvc2VhcmNoLW51bWJlci1yYW5nZS9zZWFyY2gtbnVtYmVyLXJhbmdlLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBTZWFyY2hDaGVja0xpc3RDb21wb25lbnQgfSBmcm9tICcuLi9jb21wb25lbnRzL3NlYXJjaC1jaGVjay1saXN0L3NlYXJjaC1jaGVjay1saXN0LmNvbXBvbmVudCc7XG5pbXBvcnQgeyBTZWFyY2hEYXRlUmFuZ2VDb21wb25lbnQgfSBmcm9tICcuLi9jb21wb25lbnRzL3NlYXJjaC1kYXRlLXJhbmdlL3NlYXJjaC1kYXRlLXJhbmdlLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBTZWFyY2hEYXRldGltZVJhbmdlQ29tcG9uZW50IH0gZnJvbSAnLi4vY29tcG9uZW50cy9zZWFyY2gtZGF0ZXRpbWUtcmFuZ2Uvc2VhcmNoLWRhdGV0aW1lLXJhbmdlLmNvbXBvbmVudCc7XG5cbkBJbmplY3RhYmxlKHtcbiAgICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgU2VhcmNoRmlsdGVyU2VydmljZSB7XG5cbiAgICAvKipcbiAgICAgKiBDb250YWlucyBzdHJpbmctdG8tdHlwZSBtYXBwaW5ncyBmb3IgcmVnaXN0ZXJlZCB3aWRnZXRzLlxuICAgICAqL1xuICAgIHdpZGdldHM6IHsgW2lkOiBzdHJpbmddOiBUeXBlPHt9PiB9ID0ge1xuICAgICAgICAndGV4dCc6IFNlYXJjaFRleHRDb21wb25lbnQsXG4gICAgICAgICdyYWRpbyc6IFNlYXJjaFJhZGlvQ29tcG9uZW50LFxuICAgICAgICAnc2xpZGVyJzogU2VhcmNoU2xpZGVyQ29tcG9uZW50LFxuICAgICAgICAnbnVtYmVyLXJhbmdlJzogU2VhcmNoTnVtYmVyUmFuZ2VDb21wb25lbnQsXG4gICAgICAgICdjaGVjay1saXN0JzogU2VhcmNoQ2hlY2tMaXN0Q29tcG9uZW50LFxuICAgICAgICAnZGF0ZS1yYW5nZSc6IFNlYXJjaERhdGVSYW5nZUNvbXBvbmVudCxcbiAgICAgICAgJ2RhdGV0aW1lLXJhbmdlJzogU2VhcmNoRGF0ZXRpbWVSYW5nZUNvbXBvbmVudFxuICAgIH07XG5cbn1cbiJdfQ==