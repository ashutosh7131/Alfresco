/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, ViewEncapsulation } from '@angular/core';
import { FormControl, FormGroup, Validators } from '@angular/forms';
import { DateAdapter, MAT_DATE_FORMATS, MAT_DATE_LOCALE } from '@angular/material/core';
import { MOMENT_DATE_FORMATS, MomentDateAdapter, UserPreferencesService, UserPreferenceValues } from '@alfresco/adf-core';
import { LiveErrorStateMatcher } from '../../forms/live-error-state-matcher';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/material/core';
import * as ɵngcc2 from '@alfresco/adf-core';
import * as ɵngcc3 from '@angular/forms';
import * as ɵngcc4 from '@angular/material/form-field';
import * as ɵngcc5 from '@angular/material/input';
import * as ɵngcc6 from '@angular/material/datepicker';
import * as ɵngcc7 from '@angular/common';
import * as ɵngcc8 from '@angular/material/button';
import * as ɵngcc9 from '@ngx-translate/core';

const _c0 = function (a0) { return { requiredFormat: a0 }; };
function SearchDateRangeComponent_mat_error_7_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-error", 11);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind2(2, 1, ctx_r1.getFromValidationMessage(), ɵngcc0.ɵɵpureFunction1(4, _c0, ctx_r1.datePickerFormat)), " ");
} }
function SearchDateRangeComponent_mat_error_14_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-error", 12);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind2(2, 1, ctx_r3.getToValidationMessage(), ɵngcc0.ɵɵpureFunction1(4, _c0, ctx_r3.datePickerFormat)), " ");
} }
function SearchDateRangeComponent_div_15_Template(rf, ctx) { if (rf & 1) {
    const _r6 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 13);
    ɵngcc0.ɵɵelementStart(1, "button", 14);
    ɵngcc0.ɵɵlistener("click", function SearchDateRangeComponent_div_15_Template_button_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r6); const ctx_r5 = ɵngcc0.ɵɵnextContext(); return ctx_r5.clear(); });
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(4, "button", 15);
    ɵngcc0.ɵɵtext(5);
    ɵngcc0.ɵɵpipe(6, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r4 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(3, 3, "SEARCH.FILTER.ACTIONS.CLEAR"), " ");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("disabled", !ctx_r4.form.valid);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(6, 5, "SEARCH.FILTER.ACTIONS.APPLY"), " ");
} }
const DEFAULT_FORMAT_DATE = 'DD/MM/YYYY';
const ɵ0 = MOMENT_DATE_FORMATS;
export class SearchDateRangeComponent {
    constructor(dateAdapter, userPreferencesService) {
        this.dateAdapter = dateAdapter;
        this.userPreferencesService = userPreferencesService;
        this.matcher = new LiveErrorStateMatcher();
        this.isActive = false;
        this.displayValue$ = new Subject();
        this.onDestroy$ = new Subject();
    }
    getFromValidationMessage() {
        return this.from.hasError('invalidOnChange') || this.hasParseError(this.from) ? 'SEARCH.FILTER.VALIDATION.INVALID-DATE' :
            this.from.hasError('matDatepickerMax') ? 'SEARCH.FILTER.VALIDATION.BEYOND-MAX-DATE' :
                this.from.hasError('required') ? 'SEARCH.FILTER.VALIDATION.REQUIRED-VALUE' :
                    '';
    }
    getToValidationMessage() {
        return this.to.hasError('invalidOnChange') || this.hasParseError(this.to) ? 'SEARCH.FILTER.VALIDATION.INVALID-DATE' :
            this.to.hasError('matDatepickerMin') ? 'SEARCH.FILTER.VALIDATION.NO-DAYS' :
                this.to.hasError('matDatepickerMax') ? 'SEARCH.FILTER.VALIDATION.BEYOND-MAX-DATE' :
                    this.to.hasError('required') ? 'SEARCH.FILTER.VALIDATION.REQUIRED-VALUE' :
                        '';
    }
    ngOnInit() {
        var _a, _b, _c;
        this.datePickerFormat = ((_a = this.settings) === null || _a === void 0 ? void 0 : _a.dateFormat) ? this.settings.dateFormat : DEFAULT_FORMAT_DATE;
        const customDateAdapter = this.dateAdapter;
        customDateAdapter.overrideDisplayFormat = this.datePickerFormat;
        this.userPreferencesService
            .select(UserPreferenceValues.Locale)
            .pipe(takeUntil(this.onDestroy$))
            .subscribe(locale => this.setLocale(locale));
        const validators = Validators.compose([
            Validators.required
        ]);
        if (this.settings && this.settings.maxDate) {
            if (this.settings.maxDate === 'today') {
                this.maxDate = this.dateAdapter.today().endOf('day');
            }
            else {
                this.maxDate = moment(this.settings.maxDate).endOf('day');
            }
        }
        if (this.startValue) {
            const splitValue = this.startValue.split('||');
            const fromValue = this.dateAdapter.parse(splitValue[0], this.datePickerFormat);
            const toValue = this.dateAdapter.parse(splitValue[1], this.datePickerFormat);
            this.from = new FormControl(fromValue, validators);
            this.to = new FormControl(toValue, validators);
        }
        else {
            this.from = new FormControl('', validators);
            this.to = new FormControl('', validators);
        }
        this.form = new FormGroup({
            from: this.from,
            to: this.to
        });
        this.setFromMaxDate();
        this.enableChangeUpdate = (_c = (_b = this.settings) === null || _b === void 0 ? void 0 : _b.allowUpdateOnChange) !== null && _c !== void 0 ? _c : true;
    }
    ngOnDestroy() {
        this.onDestroy$.next(true);
        this.onDestroy$.complete();
    }
    apply(model, isValid) {
        if (isValid && this.id && this.context && this.settings && this.settings.field) {
            this.isActive = true;
            const start = moment(model.from).startOf('day').format();
            const end = moment(model.to).endOf('day').format();
            this.context.queryFragments[this.id] = `${this.settings.field}:['${start}' TO '${end}']`;
            this.updateDisplayValue();
            this.context.update();
        }
    }
    submitValues() {
        this.apply(this.form.value, this.form.valid);
    }
    hasValidValue() {
        return this.form.valid;
    }
    getCurrentValue() {
        return {
            from: this.dateAdapter.format(this.form.value.from, this.datePickerFormat),
            to: this.dateAdapter.format(this.form.value.from, this.datePickerFormat)
        };
    }
    updateDisplayValue() {
        if (this.form.invalid || this.form.pristine) {
            this.displayValue$.next('');
        }
        else {
            this.displayValue$.next(`${this.dateAdapter.format(this.form.value.from, this.datePickerFormat)} - ${this.dateAdapter.format(this.form.value.to, this.datePickerFormat)}`);
        }
    }
    setValue(parsedDate) {
        const splitValue = parsedDate.split('||');
        const fromValue = this.dateAdapter.parse(splitValue[0], this.datePickerFormat);
        const toValue = this.dateAdapter.parse(splitValue[1], this.datePickerFormat);
        this.from.setValue(fromValue);
        this.from.markAsDirty();
        this.from.markAsTouched();
        this.to.setValue(toValue);
        this.to.markAsDirty();
        this.to.markAsTouched();
        this.submitValues();
    }
    clear() {
        this.isActive = false;
        this.form.reset({
            from: '',
            to: ''
        });
        if (this.id && this.context) {
            this.context.queryFragments[this.id] = '';
            if (this.enableChangeUpdate) {
                this.updateQuery();
            }
        }
        this.setFromMaxDate();
    }
    reset() {
        this.clear();
        this.updateQuery();
    }
    updateQuery() {
        if (this.id && this.context) {
            this.updateDisplayValue();
            this.context.update();
        }
    }
    onChangedHandler(event, formControl) {
        const inputValue = event.value;
        const formatDate = this.dateAdapter.parse(inputValue, this.datePickerFormat);
        if (formatDate && formatDate.isValid()) {
            formControl.setValue(formatDate);
        }
        else if (formatDate) {
            formControl.setErrors({
                'invalidOnChange': true
            });
        }
        this.setFromMaxDate();
    }
    setLocale(locale) {
        this.dateAdapter.setLocale(locale);
        moment.locale(locale);
    }
    hasParseError(formControl) {
        return formControl.hasError('matDatepickerParse') && formControl.getError('matDatepickerParse').text;
    }
    forcePlaceholder(event) {
        event.srcElement.click();
    }
    setFromMaxDate() {
        this.fromMaxDate = (!this.to.value || this.maxDate && (moment(this.maxDate).isBefore(this.to.value))) ? this.maxDate : moment(this.to.value);
    }
}
SearchDateRangeComponent.ɵfac = function SearchDateRangeComponent_Factory(t) { return new (t || SearchDateRangeComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DateAdapter), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.UserPreferencesService)); };
SearchDateRangeComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: SearchDateRangeComponent, selectors: [["adf-search-date-range"]], hostAttrs: [1, "adf-search-date-range"], features: [ɵngcc0.ɵɵProvidersFeature([
            { provide: DateAdapter, useClass: MomentDateAdapter, deps: [MAT_DATE_LOCALE] },
            { provide: MAT_DATE_FORMATS, useValue: ɵ0 }
        ])], decls: 16, vars: 21, consts: [["novalidate", "", 3, "formGroup", "ngSubmit"], ["matInput", "", "data-automation-id", "date-range-from-input", 3, "formControl", "errorStateMatcher", "placeholder", "matDatepicker", "max", "input", "dateChange"], ["matSuffix", "", "data-automation-id", "date-range-from-date-toggle", 3, "for"], ["color", "accent"], ["fromDatepicker", ""], ["data-automation-id", "date-range-from-error", 4, "ngIf"], ["matInput", "", "data-automation-id", "date-range-to-input", 3, "formControl", "errorStateMatcher", "placeholder", "matDatepicker", "min", "max", "input", "dateChange"], ["matSuffix", "", "data-automation-id", "date-range-to-date-toggle", 3, "for"], ["toDatepicker", ""], ["data-automation-id", "date-range-to-error", 4, "ngIf"], ["class", "adf-facet-buttons adf-facet-buttons--topSpace", 4, "ngIf"], ["data-automation-id", "date-range-from-error"], ["data-automation-id", "date-range-to-error"], [1, "adf-facet-buttons", "adf-facet-buttons--topSpace"], ["mat-button", "", "color", "primary", "type", "button", "data-automation-id", "date-range-clear-btn", 3, "click"], ["mat-button", "", "color", "primary", "type", "submit", "data-automation-id", "date-range-apply-btn", 3, "disabled"]], template: function SearchDateRangeComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "form", 0);
        ɵngcc0.ɵɵlistener("ngSubmit", function SearchDateRangeComponent_Template_form_ngSubmit_0_listener() { return ctx.apply(ctx.form.value, ctx.form.valid); });
        ɵngcc0.ɵɵelementStart(1, "mat-form-field");
        ɵngcc0.ɵɵelementStart(2, "input", 1);
        ɵngcc0.ɵɵlistener("input", function SearchDateRangeComponent_Template_input_input_2_listener($event) { return ctx.forcePlaceholder($event); })("dateChange", function SearchDateRangeComponent_Template_input_dateChange_2_listener($event) { return ctx.onChangedHandler($event, ctx.from); });
        ɵngcc0.ɵɵpipe(3, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(4, "mat-datepicker-toggle", 2);
        ɵngcc0.ɵɵelement(5, "mat-datepicker", 3, 4);
        ɵngcc0.ɵɵtemplate(7, SearchDateRangeComponent_mat_error_7_Template, 3, 6, "mat-error", 5);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(8, "mat-form-field");
        ɵngcc0.ɵɵelementStart(9, "input", 6);
        ɵngcc0.ɵɵlistener("input", function SearchDateRangeComponent_Template_input_input_9_listener($event) { return ctx.forcePlaceholder($event); })("dateChange", function SearchDateRangeComponent_Template_input_dateChange_9_listener($event) { return ctx.onChangedHandler($event, ctx.to); });
        ɵngcc0.ɵɵpipe(10, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(11, "mat-datepicker-toggle", 7);
        ɵngcc0.ɵɵelement(12, "mat-datepicker", 3, 8);
        ɵngcc0.ɵɵtemplate(14, SearchDateRangeComponent_mat_error_14_Template, 3, 6, "mat-error", 9);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(15, SearchDateRangeComponent_div_15_Template, 7, 7, "div", 10);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        const _r0 = ɵngcc0.ɵɵreference(6);
        const _r2 = ɵngcc0.ɵɵreference(13);
        ɵngcc0.ɵɵproperty("formGroup", ctx.form);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵpropertyInterpolate("placeholder", ɵngcc0.ɵɵpipeBind1(3, 17, "SEARCH.FILTER.RANGE.FROM-DATE"));
        ɵngcc0.ɵɵproperty("formControl", ctx.from)("errorStateMatcher", ctx.matcher)("matDatepicker", _r0)("max", ctx.fromMaxDate);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("for", _r0);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngIf", ctx.from.invalid);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵpropertyInterpolate("placeholder", ɵngcc0.ɵɵpipeBind1(10, 19, "SEARCH.FILTER.RANGE.TO-DATE"));
        ɵngcc0.ɵɵproperty("formControl", ctx.to)("errorStateMatcher", ctx.matcher)("matDatepicker", _r2)("min", ctx.from.value)("max", ctx.maxDate);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("for", _r2);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngIf", ctx.to.invalid);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !(ctx.settings == null ? null : ctx.settings.hideDefaultAction));
    } }, directives: [ɵngcc3.ɵangular_packages_forms_forms_y, ɵngcc3.NgControlStatusGroup, ɵngcc3.FormGroupDirective, ɵngcc4.MatFormField, ɵngcc5.MatInput, ɵngcc3.DefaultValueAccessor, ɵngcc6.MatDatepickerInput, ɵngcc3.NgControlStatus, ɵngcc3.FormControlDirective, ɵngcc6.MatDatepickerToggle, ɵngcc4.MatSuffix, ɵngcc6.MatDatepicker, ɵngcc7.NgIf, ɵngcc4.MatError, ɵngcc8.MatButton], pipes: [ɵngcc9.TranslatePipe], styles: [".adf-search-date-range>form{display:inline-flex;flex-direction:column;width:100%}"], encapsulation: 2 });
SearchDateRangeComponent.ctorParameters = () => [
    { type: DateAdapter },
    { type: UserPreferencesService }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SearchDateRangeComponent, [{
        type: Component,
        args: [{
                selector: 'adf-search-date-range',
                template: "<form [formGroup]=\"form\" novalidate (ngSubmit)=\"apply(form.value, form.valid)\">\n    <mat-form-field>\n        <input matInput\n                (input)=\"forcePlaceholder($event)\"\n                [formControl]=\"from\"\n                [errorStateMatcher]=\"matcher\"\n                placeholder=\"{{ 'SEARCH.FILTER.RANGE.FROM-DATE' | translate }}\"\n                [matDatepicker]=\"fromDatepicker\"\n                [max]=\"fromMaxDate\"\n                (dateChange)=\"onChangedHandler($event, from)\"\n                data-automation-id=\"date-range-from-input\">\n        <mat-datepicker-toggle matSuffix [for]=\"fromDatepicker\" data-automation-id=\"date-range-from-date-toggle\"></mat-datepicker-toggle>\n        <mat-datepicker #fromDatepicker color=\"accent\"></mat-datepicker>\n        <mat-error *ngIf=\"from.invalid\" data-automation-id=\"date-range-from-error\">\n            {{ getFromValidationMessage() | translate: { requiredFormat: datePickerFormat } }}\n        </mat-error>\n    </mat-form-field>\n\n    <mat-form-field>\n        <input matInput\n                (input)=\"forcePlaceholder($event)\"\n                [formControl]=\"to\"\n                [errorStateMatcher]=\"matcher\"\n                placeholder=\"{{ 'SEARCH.FILTER.RANGE.TO-DATE' | translate }}\"\n                [matDatepicker]=\"toDatepicker\"\n                [min]=\"from.value\"\n                [max]=\"maxDate\"\n                (dateChange)=\"onChangedHandler($event, to)\"\n                data-automation-id=\"date-range-to-input\">\n        <mat-datepicker-toggle matSuffix [for]=\"toDatepicker\" data-automation-id=\"date-range-to-date-toggle\"></mat-datepicker-toggle>\n        <mat-datepicker #toDatepicker color=\"accent\"></mat-datepicker>\n        <mat-error *ngIf=\"to.invalid\" data-automation-id=\"date-range-to-error\">\n            {{ getToValidationMessage() | translate: { requiredFormat: datePickerFormat } }}\n        </mat-error>\n    </mat-form-field>\n\n    <div class=\"adf-facet-buttons adf-facet-buttons--topSpace\" *ngIf=\"!settings?.hideDefaultAction\">\n        <button mat-button color=\"primary\" type=\"button\" (click)=\"clear()\" data-automation-id=\"date-range-clear-btn\">\n            {{ 'SEARCH.FILTER.ACTIONS.CLEAR' | translate }}\n        </button>\n        <button mat-button color=\"primary\" type=\"submit\" [disabled]=\"!form.valid\" data-automation-id=\"date-range-apply-btn\">\n            {{ 'SEARCH.FILTER.ACTIONS.APPLY' | translate }}\n        </button>\n    </div>\n</form>\n",
                providers: [
                    { provide: DateAdapter, useClass: MomentDateAdapter, deps: [MAT_DATE_LOCALE] },
                    { provide: MAT_DATE_FORMATS, useValue: ɵ0 }
                ],
                encapsulation: ViewEncapsulation.None,
                host: { class: 'adf-search-date-range' },
                styles: [".adf-search-date-range>form{display:inline-flex;flex-direction:column;width:100%}"]
            }]
    }], function () { return [{ type: ɵngcc1.DateAdapter }, { type: ɵngcc2.UserPreferencesService }]; }, null); })();
export { ɵ0 };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,