/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, ElementRef, Input, ViewChild, ViewEncapsulation } from '@angular/core';
import { ConfigurableFocusTrapFactory } from '@angular/cdk/a11y';
import { MatMenuTrigger } from '@angular/material/menu';
import { SearchFacetFieldComponent } from '../../search-facet-field/search-facet-field.component';
export class SearchFacetChipComponent {
    constructor(focusTrapFactory) {
        this.focusTrapFactory = focusTrapFactory;
    }
    onMenuOpen() {
        if (this.menuContainer && !this.focusTrap) {
            this.focusTrap = this.focusTrapFactory.create(this.menuContainer.nativeElement);
            this.focusTrap.focusInitialElement();
        }
    }
    onClosed() {
        this.focusTrap.destroy();
        this.focusTrap = null;
    }
    onRemove() {
        this.facetFieldComponent.reset();
        this.menuTrigger.closeMenu();
    }
    onApply() {
        this.facetFieldComponent.submitValues();
        this.menuTrigger.closeMenu();
    }
}
SearchFacetChipComponent.decorators = [
    { type: Component, args: [{
                selector: 'adf-search-facet-chip',
                template: "<mat-chip [attr.data-automation-id]=\"'search-filter-chip-' + field.label\"\n          disableRipple\n          class=\"adf-search-filter-chip\"\n          [class.adf-search-toggle-chip]=\"(facetField.displayValue$ | async) || menuTrigger.menuOpen\"\n          [matMenuTriggerFor]=\"menu\"\n          (onMenuOpen)=\"onMenuOpen()\"\n          [attr.title]=\"facetField.displayValue$ | async\"\n          #menuTrigger=\"matMenuTrigger\">\n\n    <span class=\"adf-search-filter-placeholder\">\n        <span class=\"adf-search-filter-ellipsis\">{{ field.label | translate }}</span>\n        <ng-container *ngIf=\"facetField.displayValue$ | async\">:</ng-container>\n    </span>\n\n    <span class=\"adf-search-filter-ellipsis\" *ngIf=\"facetField.displayValue$ | async as displayValue\">\n        &nbsp; {{ displayValue | translate }}\n    </span>\n    <mat-icon>keyboard_arrow_down</mat-icon>\n</mat-chip>\n\n<mat-menu #menu=\"matMenu\" backdropClass=\"adf-search-filter-chip-menu\" (closed)=\"onClosed()\">\n    <div #menuContainer [attr.data-automation-id]=\"'search-field-' + field.label\">\n        <adf-search-filter-menu-card (click)=\"$event.stopPropagation()\"\n                                     (keydown.tab)=\"$event.stopPropagation();\"\n                                     (close)=\"menuTrigger.closeMenu()\">\n            <ng-container ngProjectAs=\"filter-title\">\n                {{ field.label | translate }}\n            </ng-container>\n            <ng-container ngProjectAs=\"filter-content\">\n                <adf-search-facet-field [field]=\"field\" #facetField></adf-search-facet-field>\n            </ng-container>\n            <ng-container ngProjectAs=\"filter-actions\">\n                <button mat-flat-button class=\"adf-search-action-button\" color=\"accent\" (click)=\"onRemove()\" id=\"cancel-filter-button\">\n                    {{ 'SEARCH.FILTER.BUTTONS.REMOVE' | translate }}\n                </button>\n                <button mat-flat-button class=\"adf-search-action-button\" color=\"primary\" (click)=\"onApply()\" id=\"apply-filter-button\">\n                    {{ 'SEARCH.FILTER.BUTTONS.APPLY' | translate }}\n                </button>\n            </ng-container>\n        </adf-search-filter-menu-card>\n    </div>\n</mat-menu>\n",
                encapsulation: ViewEncapsulation.None
            },] }
];
SearchFacetChipComponent.ctorParameters = () => [
    { type: ConfigurableFocusTrapFactory }
];
SearchFacetChipComponent.propDecorators = {
    field: [{ type: Input }],
    menuContainer: [{ type: ViewChild, args: ['menuContainer', { static: false },] }],
    menuTrigger: [{ type: ViewChild, args: ['menuTrigger', { static: false },] }],
    facetFieldComponent: [{ type: ViewChild, args: [SearchFacetFieldComponent, { static: false },] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VhcmNoLWZhY2V0LWNoaXAuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Ii9ob21lL3RyYXZpcy9idWlsZC9BbGZyZXNjby9hbGZyZXNjby1uZzItY29tcG9uZW50cy9saWIvY29udGVudC1zZXJ2aWNlcy9zcmMvIiwic291cmNlcyI6WyJsaWIvc2VhcmNoL2NvbXBvbmVudHMvc2VhcmNoLWZpbHRlci1jaGlwcy9zZWFyY2gtZmFjZXQtY2hpcC9zZWFyY2gtZmFjZXQtY2hpcC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7OztHQWVHO0FBRUgsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzRixPQUFPLEVBQXlCLDRCQUE0QixFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFFeEYsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQ3hELE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxNQUFNLHVEQUF1RCxDQUFDO0FBT2xHLE1BQU0sT0FBTyx3QkFBd0I7SUFlakMsWUFBb0IsZ0JBQThDO1FBQTlDLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBOEI7SUFBRyxDQUFDO0lBRXRFLFVBQVU7UUFDTixJQUFJLElBQUksQ0FBQyxhQUFhLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFO1lBQ3ZDLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBQ2hGLElBQUksQ0FBQyxTQUFTLENBQUMsbUJBQW1CLEVBQUUsQ0FBQztTQUN4QztJQUNMLENBQUM7SUFFRCxRQUFRO1FBQ0osSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUN6QixJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQztJQUMxQixDQUFDO0lBRUQsUUFBUTtRQUNKLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUNqQyxJQUFJLENBQUMsV0FBVyxDQUFDLFNBQVMsRUFBRSxDQUFDO0lBQ2pDLENBQUM7SUFFRCxPQUFPO1FBQ0gsSUFBSSxDQUFDLG1CQUFtQixDQUFDLFlBQVksRUFBRSxDQUFDO1FBQ3hDLElBQUksQ0FBQyxXQUFXLENBQUMsU0FBUyxFQUFFLENBQUM7SUFDakMsQ0FBQzs7O1lBMUNKLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsdUJBQXVCO2dCQUNqQyxrdkVBQWlEO2dCQUNqRCxhQUFhLEVBQUUsaUJBQWlCLENBQUMsSUFBSTthQUN0Qzs7O1lBVCtCLDRCQUE0Qjs7O29CQVd2RCxLQUFLOzRCQUdMLFNBQVMsU0FBQyxlQUFlLEVBQUUsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFOzBCQUc1QyxTQUFTLFNBQUMsYUFBYSxFQUFFLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRTtrQ0FHMUMsU0FBUyxTQUFDLHlCQUF5QixFQUFFLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IENvbXBvbmVudCwgRWxlbWVudFJlZiwgSW5wdXQsIFZpZXdDaGlsZCwgVmlld0VuY2Fwc3VsYXRpb24gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvbmZpZ3VyYWJsZUZvY3VzVHJhcCwgQ29uZmlndXJhYmxlRm9jdXNUcmFwRmFjdG9yeSB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9hMTF5JztcbmltcG9ydCB7IEZhY2V0RmllbGQgfSBmcm9tICcuLi8uLi8uLi9tb2RlbHMvZmFjZXQtZmllbGQuaW50ZXJmYWNlJztcbmltcG9ydCB7IE1hdE1lbnVUcmlnZ2VyIH0gZnJvbSAnQGFuZ3VsYXIvbWF0ZXJpYWwvbWVudSc7XG5pbXBvcnQgeyBTZWFyY2hGYWNldEZpZWxkQ29tcG9uZW50IH0gZnJvbSAnLi4vLi4vc2VhcmNoLWZhY2V0LWZpZWxkL3NlYXJjaC1mYWNldC1maWVsZC5jb21wb25lbnQnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdhZGYtc2VhcmNoLWZhY2V0LWNoaXAnLFxuICB0ZW1wbGF0ZVVybDogJy4vc2VhcmNoLWZhY2V0LWNoaXAuY29tcG9uZW50Lmh0bWwnLFxuICBlbmNhcHN1bGF0aW9uOiBWaWV3RW5jYXBzdWxhdGlvbi5Ob25lXG59KVxuZXhwb3J0IGNsYXNzIFNlYXJjaEZhY2V0Q2hpcENvbXBvbmVudCB7XG4gICAgQElucHV0KClcbiAgICBmaWVsZDogRmFjZXRGaWVsZDtcblxuICAgIEBWaWV3Q2hpbGQoJ21lbnVDb250YWluZXInLCB7IHN0YXRpYzogZmFsc2UgfSlcbiAgICBtZW51Q29udGFpbmVyOiBFbGVtZW50UmVmO1xuXG4gICAgQFZpZXdDaGlsZCgnbWVudVRyaWdnZXInLCB7IHN0YXRpYzogZmFsc2UgfSlcbiAgICBtZW51VHJpZ2dlcjogTWF0TWVudVRyaWdnZXI7XG5cbiAgICBAVmlld0NoaWxkKFNlYXJjaEZhY2V0RmllbGRDb21wb25lbnQsIHsgc3RhdGljOiBmYWxzZSB9KVxuICAgIGZhY2V0RmllbGRDb21wb25lbnQ6IFNlYXJjaEZhY2V0RmllbGRDb21wb25lbnQ7XG5cbiAgICBmb2N1c1RyYXA6IENvbmZpZ3VyYWJsZUZvY3VzVHJhcDtcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgZm9jdXNUcmFwRmFjdG9yeTogQ29uZmlndXJhYmxlRm9jdXNUcmFwRmFjdG9yeSkge31cblxuICAgIG9uTWVudU9wZW4oKSB7XG4gICAgICAgIGlmICh0aGlzLm1lbnVDb250YWluZXIgJiYgIXRoaXMuZm9jdXNUcmFwKSB7XG4gICAgICAgICAgICB0aGlzLmZvY3VzVHJhcCA9IHRoaXMuZm9jdXNUcmFwRmFjdG9yeS5jcmVhdGUodGhpcy5tZW51Q29udGFpbmVyLm5hdGl2ZUVsZW1lbnQpO1xuICAgICAgICAgICAgdGhpcy5mb2N1c1RyYXAuZm9jdXNJbml0aWFsRWxlbWVudCgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgb25DbG9zZWQoKSB7XG4gICAgICAgIHRoaXMuZm9jdXNUcmFwLmRlc3Ryb3koKTtcbiAgICAgICAgdGhpcy5mb2N1c1RyYXAgPSBudWxsO1xuICAgIH1cblxuICAgIG9uUmVtb3ZlKCkge1xuICAgICAgICB0aGlzLmZhY2V0RmllbGRDb21wb25lbnQucmVzZXQoKTtcbiAgICAgICAgdGhpcy5tZW51VHJpZ2dlci5jbG9zZU1lbnUoKTtcbiAgICB9XG5cbiAgICBvbkFwcGx5KCkge1xuICAgICAgICB0aGlzLmZhY2V0RmllbGRDb21wb25lbnQuc3VibWl0VmFsdWVzKCk7XG4gICAgICAgIHRoaXMubWVudVRyaWdnZXIuY2xvc2VNZW51KCk7XG4gICAgfVxufVxuIl19