/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, Input, ViewEncapsulation, ViewChild, Output, EventEmitter } from '@angular/core';
import { Node } from '@alfresco/js-api';
import { VersionListComponent } from './version-list.component';
import { ContentService, AlfrescoApiService } from '@alfresco/adf-core';
import { trigger, state, style, animate, transition } from '@angular/animations';
export class VersionManagerComponent {
    constructor(contentService, alfrescoApiService) {
        this.contentService = contentService;
        this.alfrescoApiService = alfrescoApiService;
        this.showComments = true;
        this.showVersionComparison = false;
        this.allowDownload = true;
        this.uploadSuccess = new EventEmitter();
        this.uploadError = new EventEmitter();
        this.uploadCancel = new EventEmitter();
        this.viewVersion = new EventEmitter();
        this.uploadState = 'close';
    }
    ngOnInit() {
        if (this.newFileVersion) {
            this.toggleNewVersion();
        }
    }
    refresh(node) {
        this.alfrescoApiService.nodeUpdated.next(node);
        this.versionListComponent.loadVersionHistory();
        this.uploadSuccess.emit(node);
        this.uploadState = 'close';
    }
    onUploadSuccess(event) {
        this.showVersionComparison = false;
        this.newFileVersion = null;
        this.alfrescoApiService.nodeUpdated.next(event.value.entry);
        this.versionListComponent.loadVersionHistory();
        this.uploadSuccess.emit(event.value.entry);
        this.uploadState = 'close';
    }
    onUploadError(event) {
        this.uploadError.emit(event);
    }
    onUploadCancel() {
        this.uploadState = 'close';
        this.showVersionComparison = false;
        this.newFileVersion = null;
        this.uploadCancel.emit(true);
    }
    onViewVersion(versionId) {
        this.viewVersion.emit(versionId);
    }
    toggleNewVersion() {
        this.uploadState = this.uploadState === 'open' ? 'close' : 'open';
    }
    canUpdate() {
        return this.contentService.hasAllowableOperations(this.node, 'update');
    }
}
VersionManagerComponent.decorators = [
    { type: Component, args: [{
                selector: 'adf-version-manager',
                template: "<div class=\"adf-new-version-container\">\n\n    <adf-version-comparison *ngIf=\"showVersionComparison\" [node]=\"node\" [newFileVersion]=\"newFileVersion\"></adf-version-comparison>\n\n    <div class=\"adf-new-version-uploader-container\" id=\"adf-new-version-uploader-container\" fxLayout=\"row\" fxLayoutAlign=\"end center\" [@uploadToggle]=\"uploadState\">\n        <table class=\"adf-version-upload\" *ngIf=\"uploadState !== 'close' && !versionList.isLoading\">\n            <tr>\n                <td>\n                    <adf-version-upload\n                        id=\"adf-version-upload-button\"\n                        [node]=\"node\"\n                        [newFileVersion]=\"newFileVersion\"\n                        [currentVersion]=\"versionList?.versions[0]?.entry\"\n                        (success)=\"onUploadSuccess($event)\"\n                        (cancel)=\"onUploadCancel()\"\n                        (error)=\"onUploadError($event)\">\n                    </adf-version-upload>\n                </td>\n            </tr>\n        </table>\n    </div>\n\n    <div class=\"adf-version-list-container\">\n        <div class=\"adf-version-list-table\">\n            <div>\n                <button mat-raised-button\n                        id=\"adf-show-version-upload-button\"\n                        (click)=\"toggleNewVersion()\" color=\"primary\"\n                        *ngIf=\"uploadState ==='close'\">{{\n                    'ADF_VERSION_LIST.ACTIONS.UPLOAD.ADD'|\n                    translate }}\n                </button>\n            </div>\n            <div>\n\n                <adf-version-list\n                    #versionList\n                    [node]=\"node\"\n                    [allowDownload]=\"allowDownload\"\n                    [showComments]=\"showComments\"\n                    (deleted)=\"refresh($event)\"\n                    (restored)=\"refresh($event)\"\n                    (viewVersion)=\"onViewVersion($event)\">\n                </adf-version-list>\n            </div>\n        </div>\n    </div>\n</div>\n",
                animations: [
                    trigger('uploadToggle', [
                        state('open', style({ height: '175px', opacity: 1, visibility: 'visible' })),
                        state('close', style({ height: '0%', opacity: 0, visibility: 'hidden' })),
                        transition('open => close', [
                            style({ visibility: 'hidden' }),
                            animate('0.4s cubic-bezier(0.25, 0.8, 0.25, 1)')
                        ]),
                        transition('close => open', [
                            style({ visibility: 'visible' }),
                            animate('0.4s cubic-bezier(0.25, 0.8, 0.25, 1)')
                        ])
                    ])
                ],
                encapsulation: ViewEncapsulation.None,
                styles: ["adf-version-manager .mat-list .mat-3-line{height:auto!important;width:100%!important}adf-version-manager .mat-list-item-content{padding:16px 0!important}.adf-version-list-item-comment.mat-line{height:100%;overflow:unset!important;white-space:unset!important;word-break:break-all}.adf-button.adf-upload-new-version{box-shadow:none;float:left;height:175px;position:relative;width:100%}.adf-new-version-uploader-container{float:left;height:0;padding:16px 0;position:relative;width:100%}.adf-new-version-container{height:inherit;overflow:hidden}.adf-version-list-table,.adf-version-upload-table{width:100%}.adf-version-list{width:100%!important}.adf-new-version-uploader-container,.adf-version-list{float:left!important}"]
            },] }
];
VersionManagerComponent.ctorParameters = () => [
    { type: ContentService },
    { type: AlfrescoApiService }
];
VersionManagerComponent.propDecorators = {
    node: [{ type: Input }],
    newFileVersion: [{ type: Input }],
    showComments: [{ type: Input }],
    showVersionComparison: [{ type: Input }],
    allowDownload: [{ type: Input }],
    uploadSuccess: [{ type: Output }],
    uploadError: [{ type: Output }],
    uploadCancel: [{ type: Output }],
    viewVersion: [{ type: Output }],
    versionListComponent: [{ type: ViewChild, args: ['versionList', { static: true },] }]
};
//# sourceMappingURL=data:application/json;base64,