/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { AlfrescoApiService, ContentService } from '@alfresco/adf-core';
import { Component, Input, ViewEncapsulation, EventEmitter, Output } from '@angular/core';
import { VersionsApi, Node, NodesApi, ContentApi } from '@alfresco/js-api';
import { MatDialog } from '@angular/material/dialog';
import { ConfirmDialogComponent } from '../dialogs/confirm.dialog';
import { ContentVersionService } from './content-version.service';
export class VersionListComponent {
    constructor(alfrescoApi, contentService, contentVersionService, dialog) {
        this.alfrescoApi = alfrescoApi;
        this.contentService = contentService;
        this.contentVersionService = contentVersionService;
        this.dialog = dialog;
        this.versions = [];
        this.isLoading = true;
        this.showComments = true;
        this.allowDownload = true;
        this.allowViewVersions = true;
        this.showActions = true;
        this.restored = new EventEmitter();
        this.deleted = new EventEmitter();
        this.viewVersion = new EventEmitter();
    }
    get contentApi() {
        var _a;
        this._contentApi = (_a = this._contentApi) !== null && _a !== void 0 ? _a : new ContentApi(this.alfrescoApi.getInstance());
        return this._contentApi;
    }
    get versionsApi() {
        var _a;
        this._versionsApi = (_a = this._versionsApi) !== null && _a !== void 0 ? _a : new VersionsApi(this.alfrescoApi.getInstance());
        return this._versionsApi;
    }
    get nodesApi() {
        var _a;
        this._nodesApi = (_a = this._nodesApi) !== null && _a !== void 0 ? _a : new NodesApi(this.alfrescoApi.getInstance());
        return this._nodesApi;
    }
    ngOnChanges() {
        this.loadVersionHistory();
    }
    canUpdate() {
        return this.contentService.hasAllowableOperations(this.node, 'update') && this.versions.length > 1;
    }
    canDelete() {
        return this.contentService.hasAllowableOperations(this.node, 'delete') && this.versions.length > 1;
    }
    restore(versionId) {
        if (this.canUpdate()) {
            this.versionsApi
                .revertVersion(this.node.id, versionId, { majorVersion: true, comment: '' })
                .then(() => this.nodesApi.getNode(this.node.id, { include: ['permissions', 'path', 'isFavorite', 'allowableOperations'] }))
                .then((node) => this.onVersionRestored(node));
        }
    }
    onViewVersion(versionId) {
        this.viewVersion.emit(versionId);
    }
    loadVersionHistory() {
        this.isLoading = true;
        this.versionsApi.listVersionHistory(this.node.id).then((versionPaging) => {
            this.versions = versionPaging.list.entries;
            this.isLoading = false;
        });
    }
    downloadVersion(versionId) {
        if (this.allowDownload) {
            this.contentVersionService
                .getVersionContentUrl(this.node.id, versionId, true)
                .subscribe(versionDownloadUrl => this.downloadContent(versionDownloadUrl));
        }
    }
    deleteVersion(versionId) {
        if (this.canUpdate()) {
            const dialogRef = this.dialog.open(ConfirmDialogComponent, {
                data: {
                    title: 'ADF_VERSION_LIST.CONFIRM_DELETE.TITLE',
                    message: 'ADF_VERSION_LIST.CONFIRM_DELETE.MESSAGE',
                    yesLabel: 'ADF_VERSION_LIST.CONFIRM_DELETE.YES_LABEL',
                    noLabel: 'ADF_VERSION_LIST.CONFIRM_DELETE.NO_LABEL'
                },
                minWidth: '250px'
            });
            dialogRef.afterClosed().subscribe((result) => {
                if (result === true) {
                    this.versionsApi
                        .deleteVersion(this.node.id, versionId)
                        .then(() => this.onVersionDeleted(this.node));
                }
            });
        }
    }
    onVersionDeleted(node) {
        this.loadVersionHistory();
        this.deleted.emit(node);
    }
    onVersionRestored(node) {
        this.loadVersionHistory();
        this.restored.emit(node === null || node === void 0 ? void 0 : node.entry);
    }
    downloadContent(url) {
        if (url) {
            const link = document.createElement('a');
            link.style.display = 'none';
            link.href = url;
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
        }
    }
}
VersionListComponent.decorators = [
    { type: Component, args: [{
                selector: 'adf-version-list',
                template: "<mat-list class=\"adf-version-list\" *ngIf=\"!isLoading; else loading_template\">\n    <mat-list-item *ngFor=\"let version of versions; let idx = index\">\n        <mat-icon mat-list-icon>insert_drive_file</mat-icon>\n        <h4 mat-line class=\"adf-version-list-item-name\" [id]=\"'adf-version-list-item-name-' + version.entry.id\" >{{version.entry.name}}</h4>\n        <p mat-line>\n            <span class=\"adf-version-list-item-version\"  [id]=\"'adf-version-list-item-version-' + version.entry.id\" >{{version.entry.id}}</span> -\n            <span class=\"adf-version-list-item-date\"     [id]=\"'adf-version-list-item-date-' + version.entry.id\" >{{version.entry.modifiedAt | date}}</span>\n        </p>\n        <p mat-line [id]=\"'adf-version-list-item-comment-'+ version.entry.id\" class=\"adf-version-list-item-comment\"\n           *ngIf=\"showComments\">{{version.entry.versionComment}}</p>\n\n        <div *ngIf=\"showActions\">\n            <mat-menu [id]=\"'adf-version-list-action-menu-'+version.entry.id\"\n                      #versionMenu=\"matMenu\" yPosition=\"below\" xPosition=\"before\">\n                <ng-container *adf-acs-version=\"'7'\">\n                    <button *ngIf=\"allowViewVersions\"\n                            [id]=\"'adf-version-list-action-view-'+version.entry.id\"\n                            mat-menu-item\n                            (click)=\"onViewVersion(version.entry.id)\">\n                        {{ 'ADF_VERSION_LIST.ACTIONS.VIEW' | translate }}\n                    </button>\n                </ng-container>\n                <button\n                    [id]=\"'adf-version-list-action-restore-'+version.entry.id\"\n                    [disabled]=\"!canUpdate()\"\n                    mat-menu-item\n                    (click)=\"restore(version.entry.id)\">\n                    {{ 'ADF_VERSION_LIST.ACTIONS.RESTORE' | translate }}\n                </button>\n                <button *ngIf=\"allowDownload\"\n                        [id]=\"'adf-version-list-action-download-'+version.entry.id\"\n                        mat-menu-item\n                        (click)=\"downloadVersion(version.entry.id)\">\n                    {{ 'ADF_VERSION_LIST.ACTIONS.DOWNLOAD' | translate }}\n                </button>\n                <button\n                    [disabled]=\"!canDelete()\"\n                    [id]=\"'adf-version-list-action-delete-'+version.entry.id\"\n                    (click)=\"deleteVersion(version.entry.id)\"\n                    mat-menu-item>\n                    {{ 'ADF_VERSION_LIST.ACTIONS.DELETE' | translate }}\n                </button>\n            </mat-menu>\n\n            <button mat-icon-button [matMenuTriggerFor]=\"versionMenu\" [id]=\"'adf-version-list-action-menu-button-'+version.entry.id\">\n                <mat-icon>more_vert</mat-icon>\n            </button>\n        </div>\n    </mat-list-item>\n</mat-list>\n\n<ng-template #loading_template>\n    <mat-progress-bar data-automation-id=\"version-history-loading-bar\" mode=\"indeterminate\"\n                      color=\"accent\"></mat-progress-bar>\n</ng-template>\n",
                encapsulation: ViewEncapsulation.None,
                host: {
                    'class': 'adf-version-list'
                },
                styles: [".adf-version-list .mat-list-item-content{border-bottom:1px solid #d8d8d8}.adf-version-list-item-version{font-weight:700}.adf-version-list-item-date{opacity:.6}.adf-version-list-item-comment{opacity:.5}"]
            },] }
];
VersionListComponent.ctorParameters = () => [
    { type: AlfrescoApiService },
    { type: ContentService },
    { type: ContentVersionService },
    { type: MatDialog }
];
VersionListComponent.propDecorators = {
    node: [{ type: Input }],
    showComments: [{ type: Input }],
    allowDownload: [{ type: Input }],
    allowViewVersions: [{ type: Input }],
    showActions: [{ type: Input }],
    restored: [{ type: Output }],
    deleted: [{ type: Output }],
    viewVersion: [{ type: Output }]
};
//# sourceMappingURL=data:application/json;base64,