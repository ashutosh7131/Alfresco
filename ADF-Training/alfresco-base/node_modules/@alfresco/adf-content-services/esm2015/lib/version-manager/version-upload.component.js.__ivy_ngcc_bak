/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, EventEmitter, Input, Output, ViewEncapsulation } from '@angular/core';
import { Node, Version } from '@alfresco/js-api';
import { ContentService, UploadService } from '@alfresco/adf-core';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
export class VersionUploadComponent {
    constructor(contentService, uploadService) {
        this.contentService = contentService;
        this.uploadService = uploadService;
        this.semanticVersion = 'minor';
        this.uploadVersion = false;
        this.disabled = false;
        this.onDestroy$ = new Subject();
        this.majorVersion = '2.0';
        this.minorVersion = '1.1';
        this.showUploadButton = true;
        this.showCancelButton = true;
        this.success = new EventEmitter();
        this.error = new EventEmitter();
        this.cancel = new EventEmitter();
        this.versionChanged = new EventEmitter();
        this.commentChanged = new EventEmitter();
        this.uploadStarted = new EventEmitter();
    }
    set currentVersion(version) {
        if (version) {
            this.minorVersion = this.getNextMinorVersion(version.id);
            this.majorVersion = this.getNextMajorVersion(version.id);
        }
    }
    ngOnInit() {
        this.uploadService.fileUploadStarting
            .pipe(takeUntil(this.onDestroy$))
            .subscribe((event) => {
            this.disabled = true;
            this.uploadStarted.emit(event);
        });
    }
    canUpload() {
        return this.contentService.hasAllowableOperations(this.node, 'update') && !this.disabled;
    }
    isMajorVersion() {
        return this.semanticVersion !== 'minor';
    }
    cancelUpload() {
        this.disabled = false;
        this.cancel.emit();
    }
    onVersionChange() {
        this.versionChanged.emit(this.isMajorVersion());
    }
    onCommentChange() {
        this.commentChanged.emit(this.comment);
    }
    onSuccess(event) {
        this.disabled = false;
        this.success.emit(event);
    }
    onError(event) {
        this.disabled = false;
        this.error.emit(event);
    }
    ngOnDestroy() {
        this.onDestroy$.next();
        this.onDestroy$.complete();
    }
    getNextMinorVersion(version) {
        const { major, minor } = this.getParsedVersion(version);
        return `${major}.${minor + 1}`;
    }
    getNextMajorVersion(version) {
        const { major } = this.getParsedVersion(version);
        return `${major + 1}.0`;
    }
    getParsedVersion(version) {
        const minor = version.indexOf('.') !== -1 ? Number(version.substr(version.indexOf('.') + 1)) : 0;
        const major = parseInt(version, 10);
        return { minor, major };
    }
}
VersionUploadComponent.decorators = [
    { type: Component, args: [{
                selector: 'adf-version-upload',
                template: "<div class=\"adf-new-version-max-width\">\n    <mat-radio-group class=\"adf-new-version-radio-group\" [(ngModel)]=\"semanticVersion\" (change)=\"onVersionChange()\">\n        <mat-radio-button class=\"adf-new-version-radio-button\" id=\"adf-new-version-minor\"[value]=\"'minor'\">\n            {{ 'ADF_VERSION_LIST.ACTIONS.UPLOAD.MINOR' | translate: { version: minorVersion } }}\n        </mat-radio-button>\n        <mat-radio-button class=\"adf-new-version-radio-button\" id=\"adf-new-version-major\" [value]=\"'major'\">\n            {{ 'ADF_VERSION_LIST.ACTIONS.UPLOAD.MAJOR' | translate: { version: majorVersion } }}\n        </mat-radio-button>\n    </mat-radio-group>\n    <mat-form-field class=\"adf-new-version-max-width\">\n                    <textarea matInput [(ngModel)]=\"comment\" class=\"adf-new-version-text-area\" id=\"adf-new-version-text-area\"\n                              (change)=\"onCommentChange()\"\n                              placeholder=\"{{ 'ADF_VERSION_LIST.ACTIONS.UPLOAD.COMMENT' | translate }}\"></textarea>\n    </mat-form-field>\n\n</div>\n<div class=\"adf-version-upload-buttons\">\n    <adf-upload-version-button *ngIf=\"showUploadButton\"\n        data-automation-id=\"adf-new-version-file-upload\"\n        staticTitle=\"{{ 'ADF_VERSION_LIST.ACTIONS.UPLOAD.TITLE' | translate }}\"\n        [node]=\"node\"\n        [disabled]=\"!canUpload()\"\n        [rootFolderId]=\"node.parentId\"\n        tooltip=\"{{ 'ADF_VERSION_LIST.ACTIONS.UPLOAD.TOOLTIP' | translate }}\"\n        [comment]=\"comment\"\n        [versioning]=\"true\"\n        [file]=\"newFileVersion\"\n        [majorVersion]=\"isMajorVersion()\"\n        (success)=\"onSuccess($event)\"\n        (error)=\"onError($event)\">\n    </adf-upload-version-button>\n    <button mat-raised-button (click)=\"cancelUpload()\" id=\"adf-new-version-cancel\"  *ngIf=\"showCancelButton\" >{{\n        'ADF_VERSION_LIST.ACTIONS.UPLOAD.CANCEL'| translate }}\n    </button>\n</div>\n",
                encapsulation: ViewEncapsulation.None,
                host: { 'class': 'adf-version-upload' },
                styles: [".adf-new-version-radio-group{display:inline-flex;flex-direction:column}.adf-new-version-radio-button{margin:5px}.adf-version-upload-buttons{display:flex;float:right;justify-content:space-between;width:100%}.adf-new-version-max-width{float:right;width:100%}.adf-new-version-text-area{resize:none!important}"]
            },] }
];
VersionUploadComponent.ctorParameters = () => [
    { type: ContentService },
    { type: UploadService }
];
VersionUploadComponent.propDecorators = {
    node: [{ type: Input }],
    newFileVersion: [{ type: Input }],
    showUploadButton: [{ type: Input }],
    showCancelButton: [{ type: Input }],
    currentVersion: [{ type: Input }],
    success: [{ type: Output }],
    error: [{ type: Output }],
    cancel: [{ type: Output }],
    versionChanged: [{ type: Output }],
    commentChanged: [{ type: Output }],
    uploadStarted: [{ type: Output }]
};
//# sourceMappingURL=data:application/json;base64,