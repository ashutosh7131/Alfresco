/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { NgModule } from '@angular/core';
import { MaterialModule } from '../material.module';
import { VersionUploadComponent } from './version-upload.component';
import { VersionManagerComponent } from './version-manager.component';
import { VersionListComponent } from './version-list.component';
import { UploadModule } from '../upload/upload.module';
import { CoreModule } from '@alfresco/adf-core';
import { VersionComparisonComponent } from './version-comparison.component';
import * as ɵngcc0 from '@angular/core';
export class VersionManagerModule {
}
VersionManagerModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: VersionManagerModule });
VersionManagerModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function VersionManagerModule_Factory(t) { return new (t || VersionManagerModule)(); }, imports: [[
            CommonModule,
            MaterialModule,
            CoreModule,
            UploadModule,
            FormsModule
        ], FormsModule] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(VersionManagerModule, { declarations: function () { return [VersionUploadComponent,
        VersionManagerComponent,
        VersionListComponent,
        VersionComparisonComponent]; }, imports: function () { return [CommonModule,
        MaterialModule,
        CoreModule,
        UploadModule,
        FormsModule]; }, exports: function () { return [VersionUploadComponent,
        VersionManagerComponent,
        VersionListComponent,
        FormsModule,
        VersionComparisonComponent]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(VersionManagerModule, [{
        type: NgModule,
        args: [{
                imports: [
                    CommonModule,
                    MaterialModule,
                    CoreModule,
                    UploadModule,
                    FormsModule
                ],
                exports: [
                    VersionUploadComponent,
                    VersionManagerComponent,
                    VersionListComponent,
                    FormsModule,
                    VersionComparisonComponent
                ],
                declarations: [
                    VersionUploadComponent,
                    VersionManagerComponent,
                    VersionListComponent,
                    VersionComparisonComponent
                ]
            }]
    }], null, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmVyc2lvbi1tYW5hZ2VyLm1vZHVsZS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vaG9tZS90cmF2aXMvYnVpbGQvQWxmcmVzY28vYWxmcmVzY28tbmcyLWNvbXBvbmVudHMvbGliL2NvbnRlbnQtc2VydmljZXMvc3JjL2xpYi92ZXJzaW9uLW1hbmFnZXIvdmVyc2lvbi1tYW5hZ2VyLm1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBRUgsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQy9DLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUM3QyxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3pDLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUVwRCxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUNwRSxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUN0RSxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUNoRSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDdkQsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ2hELE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxNQUFNLGdDQUFnQyxDQUFDOztBQXdCNUUsTUFBTSxPQUFPLG9CQUFvQjtBQUFHO2dEQXRCbkMsUUFBUSxTQUFDLGtCQUNOO0tBQU8sRUFBRSxzQkFDTCxZQUFZLHNCQUNaLGNBQWMsc0JBQ2QsVUFBVSxzQkFDVixZQUFZO0VBQ1osV0FBVztLQUNkLGtCQUNEO0VBQU8sRUFBRTtFQUNMLHNCQUFzQjtvQkFDdEI7bUJBQXVCO2FBQ3ZCLG9CQUFvQixzQkFDcEIsV0FBVyxzQkFDWCwwQkFBMEIsa0JBQzdCLGtCQUNELFlBQVksRUFBRTtVQUNWLHNCQUFzQjtxQkFDdEI7Y0FBdUIsc0JBQ3ZCLG9CQUFvQixzQkFDcEI7bUJBQTBCO2FBQzdCO09BQ0o7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzswQkFDSTtBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgQ29tbW9uTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IEZvcm1zTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHsgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE1hdGVyaWFsTW9kdWxlIH0gZnJvbSAnLi4vbWF0ZXJpYWwubW9kdWxlJztcblxuaW1wb3J0IHsgVmVyc2lvblVwbG9hZENvbXBvbmVudCB9IGZyb20gJy4vdmVyc2lvbi11cGxvYWQuY29tcG9uZW50JztcbmltcG9ydCB7IFZlcnNpb25NYW5hZ2VyQ29tcG9uZW50IH0gZnJvbSAnLi92ZXJzaW9uLW1hbmFnZXIuY29tcG9uZW50JztcbmltcG9ydCB7IFZlcnNpb25MaXN0Q29tcG9uZW50IH0gZnJvbSAnLi92ZXJzaW9uLWxpc3QuY29tcG9uZW50JztcbmltcG9ydCB7IFVwbG9hZE1vZHVsZSB9IGZyb20gJy4uL3VwbG9hZC91cGxvYWQubW9kdWxlJztcbmltcG9ydCB7IENvcmVNb2R1bGUgfSBmcm9tICdAYWxmcmVzY28vYWRmLWNvcmUnO1xuaW1wb3J0IHsgVmVyc2lvbkNvbXBhcmlzb25Db21wb25lbnQgfSBmcm9tICcuL3ZlcnNpb24tY29tcGFyaXNvbi5jb21wb25lbnQnO1xuXG5ATmdNb2R1bGUoe1xuICAgIGltcG9ydHM6IFtcbiAgICAgICAgQ29tbW9uTW9kdWxlLFxuICAgICAgICBNYXRlcmlhbE1vZHVsZSxcbiAgICAgICAgQ29yZU1vZHVsZSxcbiAgICAgICAgVXBsb2FkTW9kdWxlLFxuICAgICAgICBGb3Jtc01vZHVsZVxuICAgIF0sXG4gICAgZXhwb3J0czogW1xuICAgICAgICBWZXJzaW9uVXBsb2FkQ29tcG9uZW50LFxuICAgICAgICBWZXJzaW9uTWFuYWdlckNvbXBvbmVudCxcbiAgICAgICAgVmVyc2lvbkxpc3RDb21wb25lbnQsXG4gICAgICAgIEZvcm1zTW9kdWxlLFxuICAgICAgICBWZXJzaW9uQ29tcGFyaXNvbkNvbXBvbmVudFxuICAgIF0sXG4gICAgZGVjbGFyYXRpb25zOiBbXG4gICAgICAgIFZlcnNpb25VcGxvYWRDb21wb25lbnQsXG4gICAgICAgIFZlcnNpb25NYW5hZ2VyQ29tcG9uZW50LFxuICAgICAgICBWZXJzaW9uTGlzdENvbXBvbmVudCxcbiAgICAgICAgVmVyc2lvbkNvbXBhcmlzb25Db21wb25lbnRcbiAgICBdXG59KVxuZXhwb3J0IGNsYXNzIFZlcnNpb25NYW5hZ2VyTW9kdWxlIHt9XG4iXX0=