import { Injectable } from '@angular/core';
import { AlfrescoApiService } from '@alfresco/adf-core';
import { ContentApi } from '@alfresco/js-api';
import { of } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "@alfresco/adf-core";
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@alfresco/adf-core';
export class ContentVersionService {
    constructor(alfrescoApi) {
        this.alfrescoApi = alfrescoApi;
    }
    get contentApi() {
        if (!this._contentApi) {
            this._contentApi = new ContentApi(this.alfrescoApi.getInstance());
        }
        return this._contentApi;
    }
    getVersionContentUrl(nodeId, versionId, attachment) {
        let nodeDownloadUrl = this.contentApi.getContentUrl(nodeId, attachment);
        nodeDownloadUrl = nodeDownloadUrl.replace('/content', '/versions/' + versionId + '/content');
        return of(nodeDownloadUrl);
    }
}
ContentVersionService.ɵfac = function ContentVersionService_Factory(t) { return new (t || ContentVersionService)(ɵngcc0.ɵɵinject(ɵngcc1.AlfrescoApiService)); };
ContentVersionService.ɵprov = i0.ɵɵdefineInjectable({ factory: function ContentVersionService_Factory() { return new ContentVersionService(i0.ɵɵinject(i1.AlfrescoApiService)); }, token: ContentVersionService, providedIn: "root" });
ContentVersionService.ctorParameters = () => [
    { type: AlfrescoApiService }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ContentVersionService, [{
        type: Injectable,
        args: [{ providedIn: 'root' }]
    }], function () { return [{ type: ɵngcc1.AlfrescoApiService }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udGVudC12ZXJzaW9uLnNlcnZpY2UuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL2hvbWUvdHJhdmlzL2J1aWxkL0FsZnJlc2NvL2FsZnJlc2NvLW5nMi1jb21wb25lbnRzL2xpYi9jb250ZW50LXNlcnZpY2VzL3NyYy9saWIvdmVyc2lvbi1tYW5hZ2VyL2NvbnRlbnQtdmVyc2lvbi5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWlCQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ3hELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUM5QyxPQUFPLEVBQWMsRUFBRSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ3RDO0FBRUE7OztBQUFBLE1BQU0sT0FBTyxxQkFBcUI7QUFDbEMsSUFTSSxZQUFvQixXQUErQjtBQUFJLFFBQW5DLGdCQUFXLEdBQVgsV0FBVyxDQUFvQjtBQUFDLElBQUUsQ0FBQztBQUMzRCxJQVJJLElBQUksVUFBVTtBQUFLLFFBQ2YsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUU7QUFDL0IsWUFBWSxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksVUFBVSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQztBQUM5RSxTQUFTO0FBQ1QsUUFBUSxPQUFPLElBQUksQ0FBQyxXQUFXLENBQUM7QUFDaEMsSUFBSSxDQUFDO0FBQ0wsSUFVSSxvQkFBb0IsQ0FBQyxNQUFjLEVBQUUsU0FBaUIsRUFBRSxVQUFvQjtBQUFJLFFBQzVFLElBQUksZUFBZSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDLE1BQU0sRUFBRSxVQUFVLENBQUMsQ0FBQztBQUNoRixRQUFRLGVBQWUsR0FBRyxlQUFlLENBQUMsT0FBTyxDQUFDLFVBQVUsRUFBRSxZQUFZLEdBQUcsU0FBUyxHQUFHLFVBQVUsQ0FBQyxDQUFDO0FBQ3JHLFFBQ1EsT0FBTyxFQUFFLENBQUMsZUFBZSxDQUFDLENBQUM7QUFDbkMsSUFBSSxDQUFDO0FBQ0w7Z0tBQUM7QUFDRCx1T0ExQks7QUFBQztFQURMLFVBQVUsU0FBQyxFQUFFLHZCQUVFLFlBTlAsa0JBQWtCO0FBSUgsRUFBRSxGQUpJO0tBSUUsRUFBRTs7O21GQUpGO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBBbGZyZXNjb0FwaVNlcnZpY2UgfSBmcm9tICdAYWxmcmVzY28vYWRmLWNvcmUnO1xuaW1wb3J0IHsgQ29udGVudEFwaSB9IGZyb20gJ0BhbGZyZXNjby9qcy1hcGknO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgb2YgfSBmcm9tICdyeGpzJztcblxuQEluamVjdGFibGUoeyBwcm92aWRlZEluOiAncm9vdCcgfSlcbmV4cG9ydCBjbGFzcyBDb250ZW50VmVyc2lvblNlcnZpY2Uge1xuICAgIHByaXZhdGUgX2NvbnRlbnRBcGk6IENvbnRlbnRBcGk7XG5cbiAgICBnZXQgY29udGVudEFwaSgpOiBDb250ZW50QXBpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9jb250ZW50QXBpKSB7XG4gICAgICAgICAgICB0aGlzLl9jb250ZW50QXBpID0gbmV3IENvbnRlbnRBcGkodGhpcy5hbGZyZXNjb0FwaS5nZXRJbnN0YW5jZSgpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fY29udGVudEFwaTtcbiAgICB9XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGFsZnJlc2NvQXBpOiBBbGZyZXNjb0FwaVNlcnZpY2UpIHt9XG5cbiAgICAvKipcbiAgICAgKiBHZXQgY29udGVudCBVUkwgZm9yIHRoZSBnaXZlbiBub2RlSWQgYW5kIHNwZWNpZmljIHZlcnNpb24uXG4gICAgICogQHBhcmFtIG5vZGVJZCBUaGUgSUQgb2YgdGhlIG5vZGVcbiAgICAgKiBAcGFyYW0gdmVyc2lvbklkIFRoZSBJRCBvZiB0aGUgdmVyc2lvblxuICAgICAqIEBwYXJhbSBhdHRhY2htZW50IFJldHJpZXZlIGNvbnRlbnQgYXMgYW4gYXR0YWNobWVudCBmb3IgZG93bmxvYWRcbiAgICAgKiBAcmV0dXJucyBUaGUgVVJMIGFkZHJlc3MgcG9pbnRpbmcgdG8gdGhlIGNvbnRlbnQuXG4gICAgICovXG4gICAgZ2V0VmVyc2lvbkNvbnRlbnRVcmwobm9kZUlkOiBzdHJpbmcsIHZlcnNpb25JZDogc3RyaW5nLCBhdHRhY2htZW50PzogYm9vbGVhbik6IE9ic2VydmFibGU8c3RyaW5nPiB7XG4gICAgICAgIGxldCBub2RlRG93bmxvYWRVcmwgPSB0aGlzLmNvbnRlbnRBcGkuZ2V0Q29udGVudFVybChub2RlSWQsIGF0dGFjaG1lbnQpO1xuICAgICAgICBub2RlRG93bmxvYWRVcmwgPSBub2RlRG93bmxvYWRVcmwucmVwbGFjZSgnL2NvbnRlbnQnLCAnL3ZlcnNpb25zLycgKyB2ZXJzaW9uSWQgKyAnL2NvbnRlbnQnKTtcblxuICAgICAgICByZXR1cm4gb2Yobm9kZURvd25sb2FkVXJsKTtcbiAgICB9XG59XG4iXX0=