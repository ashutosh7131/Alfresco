/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { FileModel, UploadService, TranslationService } from '@alfresco/adf-core';
import { EventEmitter, Input, Output, NgZone, Directive } from '@angular/core';
import { Subject } from 'rxjs';
import { UploadFilesEvent } from '../upload-files.event';
import { takeUntil } from 'rxjs/operators';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@alfresco/adf-core';
export class UploadBase {
    constructor(uploadService, translationService, ngZone) {
        this.uploadService = uploadService;
        this.translationService = translationService;
        this.ngZone = ngZone;
        this.rootFolderId = '-root-';
        this.disabled = false;
        this.acceptedFilesType = '*';
        this.versioning = false;
        this.majorVersion = false;
        this.nodeType = 'cm:content';
        this.success = new EventEmitter();
        this.error = new EventEmitter();
        this.beginUpload = new EventEmitter();
        this.updateFileVersion = new EventEmitter();
        this.onDestroy$ = new Subject();
    }
    ngOnInit() {
        this.uploadService.fileUploadError
            .pipe(takeUntil(this.onDestroy$))
            .subscribe(error => this.error.emit(error));
    }
    ngOnDestroy() {
        this.onDestroy$.next(true);
        this.onDestroy$.complete();
    }
    uploadFiles(files) {
        const filteredFiles = files
            .map((file) => {
            return this.createFileModel(file, this.rootFolderId, (file.webkitRelativePath || '').replace(/\/[^\/]*$/, ''));
        });
        this.uploadQueue(filteredFiles);
    }
    uploadFilesInfo(files) {
        const filteredFiles = files
            .map((fileInfo) => {
            return this.createFileModel(fileInfo.file, this.rootFolderId, fileInfo.relativeFolder);
        });
        this.uploadQueue(filteredFiles);
    }
    uploadQueue(files) {
        const filteredFiles = files
            .filter(this.isFileAcceptable.bind(this))
            .filter(this.isFileSizeAcceptable.bind(this));
        this.ngZone.run(() => {
            const event = new UploadFilesEvent([...filteredFiles], this.uploadService, this.success, this.error);
            this.beginUpload.emit(event);
            if (!event.defaultPrevented) {
                if (filteredFiles.length > 0) {
                    this.uploadService.addToQueue(...filteredFiles);
                    this.uploadService.uploadFilesInTheQueue(this.success, this.error);
                }
            }
        });
    }
    isFileAcceptable(file) {
        if (this.acceptedFilesType === '*') {
            return true;
        }
        const allowedExtensions = this.acceptedFilesType
            .split(',')
            .map((ext) => ext.trim().replace(/^\./, ''));
        return allowedExtensions.indexOf(file.extension) !== -1;
    }
    createFileModel(file, parentId, path, id) {
        return new FileModel(file, {
            comment: this.comment,
            majorVersion: this.majorVersion,
            newVersion: this.versioning,
            parentId: parentId,
            path: path,
            nodeType: this.nodeType
        }, id);
    }
    isFileSizeAllowed(file) {
        let isFileSizeAllowed = true;
        if (this.isMaxFileSizeDefined()) {
            isFileSizeAllowed = this.isFileSizeCorrect(file);
        }
        return isFileSizeAllowed;
    }
    isMaxFileSizeDefined() {
        return this.maxFilesSize !== undefined && this.maxFilesSize !== null;
    }
    isFileSizeCorrect(file) {
        return this.maxFilesSize >= 0 && file.size <= this.maxFilesSize;
    }
    isFileSizeAcceptable(file) {
        let acceptableSize = true;
        if (!this.isFileSizeAllowed(file)) {
            acceptableSize = false;
            const message = this.translationService.instant('FILE_UPLOAD.MESSAGES.EXCEED_MAX_FILE_SIZE', { fileName: file.name });
            this.error.emit(message);
        }
        return acceptableSize;
    }
}
UploadBase.ɵfac = function UploadBase_Factory(t) { return new (t || UploadBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.UploadService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.TranslationService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
UploadBase.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: UploadBase, inputs: { rootFolderId: "rootFolderId", disabled: "disabled", acceptedFilesType: "acceptedFilesType", versioning: "versioning", majorVersion: "majorVersion", nodeType: "nodeType", maxFilesSize: "maxFilesSize", comment: "comment" }, outputs: { success: "success", error: "error", beginUpload: "beginUpload", updateFileVersion: "updateFileVersion" } });
UploadBase.ctorParameters = () => [
    { type: UploadService },
    { type: TranslationService },
    { type: NgZone }
];
UploadBase.propDecorators = {
    maxFilesSize: [{ type: Input }],
    rootFolderId: [{ type: Input }],
    disabled: [{ type: Input }],
    acceptedFilesType: [{ type: Input }],
    versioning: [{ type: Input }],
    majorVersion: [{ type: Input }],
    comment: [{ type: Input }],
    nodeType: [{ type: Input }],
    success: [{ type: Output }],
    error: [{ type: Output }],
    beginUpload: [{ type: Output }],
    updateFileVersion: [{ type: Output }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(UploadBase, [{
        type: Directive
    }], function () { return [{ type: ɵngcc1.UploadService }, { type: ɵngcc1.TranslationService }, { type: ɵngcc0.NgZone }]; }, { rootFolderId: [{
            type: Input
        }], disabled: [{
            type: Input
        }], acceptedFilesType: [{
            type: Input
        }], versioning: [{
            type: Input
        }], majorVersion: [{
            type: Input
        }], nodeType: [{
            type: Input
        }], success: [{
            type: Output
        }], error: [{
            type: Output
        }], beginUpload: [{
            type: Output
        }], updateFileVersion: [{
            type: Output
        }], maxFilesSize: [{
            type: Input
        }], comment: [{
            type: Input
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXBsb2FkLWJhc2UuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL2hvbWUvdHJhdmlzL2J1aWxkL0FsZnJlc2NvL2FsZnJlc2NvLW5nMi1jb21wb25lbnRzL2xpYi9jb250ZW50LXNlcnZpY2VzL3NyYy9saWIvdXBsb2FkL2NvbXBvbmVudHMvYmFzZS11cGxvYWQvdXBsb2FkLWJhc2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUVILE9BQU8sRUFBRSxTQUFTLEVBQVksYUFBYSxFQUFFLGtCQUFrQixFQUF3QixNQUFNLG9CQUFvQixDQUFDO0FBQ2xILE9BQU8sRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBcUIsTUFBTSxFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNsRyxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQy9CLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQ3pELE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7O0FBSTNDLE1BQU0sT0FBZ0IsVUFBVTtBQUFHLElBd0QvQixZQUFzQixhQUE0QixFQUM1QixrQkFBc0MsRUFDdEMsTUFBYztBQUN4QyxRQUgwQixrQkFBYSxHQUFiLGFBQWEsQ0FBZTtBQUFDLFFBQzdCLHVCQUFrQixHQUFsQixrQkFBa0IsQ0FBb0I7QUFBQyxRQUN2QyxXQUFNLEdBQU4sTUFBTSxDQUFRO0FBQUMsUUE5Q3JDLGlCQUFZLEdBQVcsUUFBUSxDQUFDO0FBQ3BDLFFBR0ksYUFBUSxHQUFZLEtBQUssQ0FBQztBQUM5QixRQUdJLHNCQUFpQixHQUFXLEdBQUcsQ0FBQztBQUNwQyxRQUdJLGVBQVUsR0FBWSxLQUFLLENB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QUFDO0FBQW9DLFlBUFQsYUFBYTtBQUFJLFlBQUYsa0JBQWtCO0FBQUksWUFDVixNQUFNO0FBQUc7QUFBRztBQUNyRSwyQkFXSyxLQUFLO0FBQ1IsMkJBS0csS0FBSztBQUNSLHVCQUdHLEtBQUs7QUFDUixnQ0FHRyxLQUFLO0FBQ1IseUJBR0csS0FBSztBQUNSLDJCQUdHLEtBQUs7QUFDUixzQkFHRyxLQUFLO0FBQ1IsdUJBR0csS0FBSztBQUNSLHNCQUdHLE1BQU07QUFDVCxvQkFHRyxNQUFNO0FBQ1QsMEJBR0csTUFBTTtBQUNULGdDQUdHLE1BQU07QUFDVjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O29CQUFFO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBGaWxlTW9kZWwsIEZpbGVJbmZvLCBVcGxvYWRTZXJ2aWNlLCBUcmFuc2xhdGlvblNlcnZpY2UsIEZpbGVVcGxvYWRFcnJvckV2ZW50IH0gZnJvbSAnQGFsZnJlc2NvL2FkZi1jb3JlJztcbmltcG9ydCB7IEV2ZW50RW1pdHRlciwgSW5wdXQsIE91dHB1dCwgT25Jbml0LCBPbkRlc3Ryb3ksIE5nWm9uZSwgRGlyZWN0aXZlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBVcGxvYWRGaWxlc0V2ZW50IH0gZnJvbSAnLi4vdXBsb2FkLWZpbGVzLmV2ZW50JztcbmltcG9ydCB7IHRha2VVbnRpbCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuQERpcmVjdGl2ZSgpXG4vLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6IGRpcmVjdGl2ZS1jbGFzcy1zdWZmaXhcbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBVcGxvYWRCYXNlIGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3kge1xuXG4gICAgLyoqIFNldHMgYSBsaW1pdCBvbiB0aGUgbWF4aW11bSBzaXplIChpbiBieXRlcykgb2YgYSBmaWxlIHRvIGJlIHVwbG9hZGVkLlxuICAgICAqIEhhcyBubyBlZmZlY3QgaWYgdW5kZWZpbmVkLlxuICAgICAqL1xuICAgIEBJbnB1dCgpXG4gICAgbWF4RmlsZXNTaXplOiBudW1iZXI7XG5cbiAgICAvKiogVGhlIElEIG9mIHRoZSByb290LiBVc2UgdGhlIG5vZGVJZCBmb3JcbiAgICAgKiBDb250ZW50IFNlcnZpY2VzIG9yIHRoZSB0YXNrSWQvcHJvY2Vzc0lkIGZvciBQcm9jZXNzIFNlcnZpY2VzLlxuICAgICAqL1xuICAgIEBJbnB1dCgpXG4gICAgcm9vdEZvbGRlcklkOiBzdHJpbmcgPSAnLXJvb3QtJztcblxuICAgIC8qKiBUb2dnbGVzIGNvbXBvbmVudCBkaXNhYmxlZCBzdGF0ZSAoaWYgdGhlcmUgaXMgbm8gbm9kZSBwZXJtaXNzaW9uIGNoZWNraW5nKS4gKi9cbiAgICBASW5wdXQoKVxuICAgIGRpc2FibGVkOiBib29sZWFuID0gZmFsc2U7XG5cbiAgICAvKiogRmlsdGVyIGZvciBhY2NlcHRlZCBmaWxlIHR5cGVzLiAqL1xuICAgIEBJbnB1dCgpXG4gICAgYWNjZXB0ZWRGaWxlc1R5cGU6IHN0cmluZyA9ICcqJztcblxuICAgIC8qKiBUb2dnbGVzIHZlcnNpb25pbmcuICovXG4gICAgQElucHV0KClcbiAgICB2ZXJzaW9uaW5nOiBib29sZWFuID0gZmFsc2U7XG5cbiAgICAvKiogbWFqb3JWZXJzaW9uIGJvb2xlYW4gZmllbGQgdG8gdHJ1ZSB0byBpbmRpY2F0ZSBhIG1ham9yIHZlcnNpb24gc2hvdWxkIGJlIGNyZWF0ZWQuICovXG4gICAgQElucHV0KClcbiAgICBtYWpvclZlcnNpb246IGJvb2xlYW4gPSBmYWxzZTtcblxuICAgIC8qKiBXaGVuIHlvdSBvdmVyd3JpdGUgZXhpc3RpbmcgY29udGVudCwgeW91IGNhbiB1c2UgdGhlIGNvbW1lbnQgZmllbGQgdG8gYWRkIGEgdmVyc2lvbiBjb21tZW50IHRoYXQgYXBwZWFycyBpbiB0aGUgdmVyc2lvbiBoaXN0b3J5ICovXG4gICAgQElucHV0KClcbiAgICBjb21tZW50OiBzdHJpbmc7XG5cbiAgICAvKiogQ3VzdG9tIG5vZGUgdHlwZSBmb3IgdXBsb2FkZWQgZmlsZSAqL1xuICAgIEBJbnB1dCgpXG4gICAgbm9kZVR5cGU6IHN0cmluZyA9ICdjbTpjb250ZW50JztcblxuICAgIC8qKiBFbWl0dGVkIHdoZW4gdGhlIGZpbGUgaXMgdXBsb2FkZWQgc3VjY2Vzc2Z1bGx5LiAqL1xuICAgIEBPdXRwdXQoKVxuICAgIHN1Y2Nlc3MgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbiAgICAvKiogRW1pdHRlZCB3aGVuIGFuIGVycm9yIG9jY3Vycy4gKi9cbiAgICBAT3V0cHV0KClcbiAgICBlcnJvciA9IG5ldyBFdmVudEVtaXR0ZXI8RmlsZVVwbG9hZEVycm9yRXZlbnQ+KCk7XG5cbiAgICAvKiogRW1pdHRlZCB3aGVuIHRoZSB1cGxvYWQgYmVnaW5zLiAqL1xuICAgIEBPdXRwdXQoKVxuICAgIGJlZ2luVXBsb2FkID0gbmV3IEV2ZW50RW1pdHRlcjxVcGxvYWRGaWxlc0V2ZW50PigpO1xuXG4gICAgLyoqIEVtaXR0ZWQgd2hlbiBkcm9wcGluZyBhIGZpbGUgb3ZlciBhbm90aGVyIGZpbGUgdG8gdXBkYXRlIHRoZSB2ZXJzaW9uLiAqL1xuICAgIEBPdXRwdXQoKVxuICAgIHVwZGF0ZUZpbGVWZXJzaW9uID0gbmV3IEV2ZW50RW1pdHRlcjxDdXN0b21FdmVudD4oKTtcblxuICAgIHByb3RlY3RlZCBvbkRlc3Ryb3kkID0gbmV3IFN1YmplY3Q8Ym9vbGVhbj4oKTtcblxuICAgIGNvbnN0cnVjdG9yKHByb3RlY3RlZCB1cGxvYWRTZXJ2aWNlOiBVcGxvYWRTZXJ2aWNlLFxuICAgICAgICAgICAgICAgIHByb3RlY3RlZCB0cmFuc2xhdGlvblNlcnZpY2U6IFRyYW5zbGF0aW9uU2VydmljZSxcbiAgICAgICAgICAgICAgICBwcm90ZWN0ZWQgbmdab25lOiBOZ1pvbmUpIHtcbiAgICB9XG5cbiAgICBuZ09uSW5pdCgpIHtcbiAgICAgICAgdGhpcy51cGxvYWRTZXJ2aWNlLmZpbGVVcGxvYWRFcnJvclxuICAgICAgICAgICAgLnBpcGUodGFrZVVudGlsKHRoaXMub25EZXN0cm95JCkpXG4gICAgICAgICAgICAuc3Vic2NyaWJlKGVycm9yID0+IHRoaXMuZXJyb3IuZW1pdChlcnJvcikpO1xuICAgIH1cblxuICAgIG5nT25EZXN0cm95KCkge1xuICAgICAgICB0aGlzLm9uRGVzdHJveSQubmV4dCh0cnVlKTtcbiAgICAgICAgdGhpcy5vbkRlc3Ryb3kkLmNvbXBsZXRlKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVXBsb2FkIGEgbGlzdCBvZiBmaWxlIGluIHRoZSBzcGVjaWZpZWQgcGF0aFxuICAgICAqIEBwYXJhbSBmaWxlc1xuICAgICAqL1xuICAgIHVwbG9hZEZpbGVzKGZpbGVzOiBGaWxlW10pOiB2b2lkIHtcbiAgICAgICAgY29uc3QgZmlsdGVyZWRGaWxlczogRmlsZU1vZGVsW10gPSBmaWxlc1xuICAgICAgICAgICAgLm1hcDxGaWxlTW9kZWw+KChmaWxlOiBGaWxlKSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlRmlsZU1vZGVsKGZpbGUsIHRoaXMucm9vdEZvbGRlcklkLCAoKDxhbnk+IGZpbGUpLndlYmtpdFJlbGF0aXZlUGF0aCB8fCAnJykucmVwbGFjZSgvXFwvW15cXC9dKiQvLCAnJykpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy51cGxvYWRRdWV1ZShmaWx0ZXJlZEZpbGVzKTtcbiAgICB9XG5cbiAgICB1cGxvYWRGaWxlc0luZm8oZmlsZXM6IEZpbGVJbmZvW10pOiB2b2lkIHtcbiAgICAgICAgY29uc3QgZmlsdGVyZWRGaWxlczogRmlsZU1vZGVsW10gPSBmaWxlc1xuICAgICAgICAgICAgLm1hcDxGaWxlTW9kZWw+KChmaWxlSW5mbzogRmlsZUluZm8pID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5jcmVhdGVGaWxlTW9kZWwoZmlsZUluZm8uZmlsZSwgdGhpcy5yb290Rm9sZGVySWQsIGZpbGVJbmZvLnJlbGF0aXZlRm9sZGVyKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMudXBsb2FkUXVldWUoZmlsdGVyZWRGaWxlcyk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSB1cGxvYWRRdWV1ZShmaWxlczogRmlsZU1vZGVsW10pIHtcbiAgICAgICAgY29uc3QgZmlsdGVyZWRGaWxlcyA9IGZpbGVzXG4gICAgICAgICAgICAuZmlsdGVyKHRoaXMuaXNGaWxlQWNjZXB0YWJsZS5iaW5kKHRoaXMpKVxuICAgICAgICAgICAgLmZpbHRlcih0aGlzLmlzRmlsZVNpemVBY2NlcHRhYmxlLmJpbmQodGhpcykpO1xuXG4gICAgICAgIHRoaXMubmdab25lLnJ1bigoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBldmVudCA9IG5ldyBVcGxvYWRGaWxlc0V2ZW50KFxuICAgICAgICAgICAgICAgIFsuLi5maWx0ZXJlZEZpbGVzXSxcbiAgICAgICAgICAgICAgICB0aGlzLnVwbG9hZFNlcnZpY2UsXG4gICAgICAgICAgICAgICAgdGhpcy5zdWNjZXNzLFxuICAgICAgICAgICAgICAgIHRoaXMuZXJyb3JcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICB0aGlzLmJlZ2luVXBsb2FkLmVtaXQoZXZlbnQpO1xuXG4gICAgICAgICAgICBpZiAoIWV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQpIHtcbiAgICAgICAgICAgICAgICBpZiAoZmlsdGVyZWRGaWxlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudXBsb2FkU2VydmljZS5hZGRUb1F1ZXVlKC4uLmZpbHRlcmVkRmlsZXMpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnVwbG9hZFNlcnZpY2UudXBsb2FkRmlsZXNJblRoZVF1ZXVlKHRoaXMuc3VjY2VzcywgdGhpcy5lcnJvcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgdGhlIGdpdmVuIGZpbGUgaXMgYWxsb3dlZCBieSB0aGUgZXh0ZW5zaW9uIGZpbHRlcnNcbiAgICAgKlxuICAgICAqIEBwYXJhbSBmaWxlIEZpbGVNb2RlbFxuICAgICAqL1xuICAgIHByb3RlY3RlZCBpc0ZpbGVBY2NlcHRhYmxlKGZpbGU6IEZpbGVNb2RlbCk6IGJvb2xlYW4ge1xuICAgICAgICBpZiAodGhpcy5hY2NlcHRlZEZpbGVzVHlwZSA9PT0gJyonKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGFsbG93ZWRFeHRlbnNpb25zID0gdGhpcy5hY2NlcHRlZEZpbGVzVHlwZVxuICAgICAgICAgICAgLnNwbGl0KCcsJylcbiAgICAgICAgICAgIC5tYXAoKGV4dCkgPT4gZXh0LnRyaW0oKS5yZXBsYWNlKC9eXFwuLywgJycpKTtcblxuICAgICAgICByZXR1cm4gYWxsb3dlZEV4dGVuc2lvbnMuaW5kZXhPZihmaWxlLmV4dGVuc2lvbikgIT09IC0xO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgRmlsZU1vZGVsIGZyb20gRmlsZVxuICAgICAqXG4gICAgICogQHBhcmFtIGZpbGVcbiAgICAgKiBAcGFyYW0gcGFyZW50SWRcbiAgICAgKiBAcGFyYW0gcGF0aFxuICAgICAqIEBwYXJhbSBpZFxuICAgICAqL1xuICAgIHByb3RlY3RlZCBjcmVhdGVGaWxlTW9kZWwoZmlsZTogRmlsZSwgcGFyZW50SWQ6IHN0cmluZywgcGF0aDogc3RyaW5nLCBpZD86IHN0cmluZyk6IEZpbGVNb2RlbCB7XG4gICAgICAgIHJldHVybiBuZXcgRmlsZU1vZGVsKGZpbGUsIHtcbiAgICAgICAgICAgIGNvbW1lbnQ6IHRoaXMuY29tbWVudCxcbiAgICAgICAgICAgIG1ham9yVmVyc2lvbjogdGhpcy5tYWpvclZlcnNpb24sXG4gICAgICAgICAgICBuZXdWZXJzaW9uOiB0aGlzLnZlcnNpb25pbmcsXG4gICAgICAgICAgICBwYXJlbnRJZDogcGFyZW50SWQsXG4gICAgICAgICAgICBwYXRoOiBwYXRoLFxuICAgICAgICAgICAgbm9kZVR5cGU6IHRoaXMubm9kZVR5cGVcbiAgICAgICAgfSwgaWQpO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBpc0ZpbGVTaXplQWxsb3dlZChmaWxlOiBGaWxlTW9kZWwpIHtcbiAgICAgICAgbGV0IGlzRmlsZVNpemVBbGxvd2VkID0gdHJ1ZTtcbiAgICAgICAgaWYgKHRoaXMuaXNNYXhGaWxlU2l6ZURlZmluZWQoKSkge1xuICAgICAgICAgICAgaXNGaWxlU2l6ZUFsbG93ZWQgPSB0aGlzLmlzRmlsZVNpemVDb3JyZWN0KGZpbGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGlzRmlsZVNpemVBbGxvd2VkO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBpc01heEZpbGVTaXplRGVmaW5lZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWF4RmlsZXNTaXplICE9PSB1bmRlZmluZWQgJiYgdGhpcy5tYXhGaWxlc1NpemUgIT09IG51bGw7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGlzRmlsZVNpemVDb3JyZWN0KGZpbGU6IEZpbGVNb2RlbCkge1xuICAgICAgICByZXR1cm4gdGhpcy5tYXhGaWxlc1NpemUgPj0gMCAmJiBmaWxlLnNpemUgPD0gdGhpcy5tYXhGaWxlc1NpemU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIHRoZSBnaXZlbiBmaWxlIGlzIGFuIGFjY2VwdGFibGUgc2l6ZVxuICAgICAqXG4gICAgICogQHBhcmFtIGZpbGUgRmlsZU1vZGVsXG4gICAgICovXG4gICAgcHJpdmF0ZSBpc0ZpbGVTaXplQWNjZXB0YWJsZShmaWxlOiBGaWxlTW9kZWwpOiBib29sZWFuIHtcbiAgICAgICAgbGV0IGFjY2VwdGFibGVTaXplID0gdHJ1ZTtcblxuICAgICAgICBpZiAoIXRoaXMuaXNGaWxlU2l6ZUFsbG93ZWQoZmlsZSkpIHtcbiAgICAgICAgICAgIGFjY2VwdGFibGVTaXplID0gZmFsc2U7XG5cbiAgICAgICAgICAgIGNvbnN0IG1lc3NhZ2UgPSB0aGlzLnRyYW5zbGF0aW9uU2VydmljZS5pbnN0YW50KFxuICAgICAgICAgICAgICAgICdGSUxFX1VQTE9BRC5NRVNTQUdFUy5FWENFRURfTUFYX0ZJTEVfU0laRScsXG4gICAgICAgICAgICAgICAgeyBmaWxlTmFtZTogZmlsZS5uYW1lIH1cbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIHRoaXMuZXJyb3IuZW1pdChtZXNzYWdlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBhY2NlcHRhYmxlU2l6ZTtcbiAgICB9XG5cbn1cbiJdfQ==