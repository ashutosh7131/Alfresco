/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { ContentService, EXTENDIBLE_COMPONENT, FileUtils, LogService, TranslationService, UploadService, AllowableOperationsEnum } from '@alfresco/adf-core';
import { Component, EventEmitter, forwardRef, Input, Output, ViewEncapsulation, NgZone } from '@angular/core';
import { Subject } from 'rxjs';
import { PermissionModel } from '../../document-list/models/permissions.model';
import { UploadBase } from './base-upload/upload-base';
export class UploadButtonComponent extends UploadBase {
    constructor(uploadService, contentService, translationService, logService, ngZone) {
        super(uploadService, translationService, ngZone);
        this.uploadService = uploadService;
        this.contentService = contentService;
        this.translationService = translationService;
        this.logService = logService;
        this.ngZone = ngZone;
        this.uploadFolders = false;
        this.multipleFiles = false;
        this.tooltip = null;
        this.permissionEvent = new EventEmitter();
        this.hasAllowableOperations = false;
        this.permissionValue = new Subject();
    }
    ngOnInit() {
        this.permissionValue.subscribe((permission) => {
            this.hasAllowableOperations = permission;
        });
    }
    ngOnChanges(changes) {
        const rootFolderId = changes['rootFolderId'];
        if (rootFolderId && rootFolderId.currentValue) {
            this.checkPermission();
        }
    }
    isButtonDisabled() {
        return this.disabled ? true : undefined;
    }
    onFilesAdded($event) {
        const files = FileUtils.toFileArray($event.currentTarget.files);
        if (this.hasAllowableOperations) {
            this.uploadFiles(files);
        }
        else {
            this.permissionEvent.emit(new PermissionModel({ type: 'content', action: 'upload', permission: 'create' }));
        }
        $event.target.value = '';
    }
    onClickUploadButton() {
        if (this.file) {
            const files = [this.file];
            if (this.hasAllowableOperations) {
                this.uploadFiles(files);
            }
            else {
                this.permissionEvent.emit(new PermissionModel({ type: 'content', action: 'upload', permission: 'create' }));
            }
        }
    }
    onDirectoryAdded($event) {
        if (this.hasAllowableOperations) {
            const files = FileUtils.toFileArray($event.currentTarget.files);
            this.uploadFiles(files);
        }
        else {
            this.permissionEvent.emit(new PermissionModel({ type: 'content', action: 'upload', permission: 'create' }));
        }
        $event.target.value = '';
    }
    checkPermission() {
        if (this.rootFolderId) {
            const opts = {
                includeSource: true,
                include: ['allowableOperations']
            };
            this.contentService.getNode(this.rootFolderId, opts).subscribe((res) => this.permissionValue.next(this.nodeHasPermission(res.entry, AllowableOperationsEnum.CREATE)), (error) => {
                if (error && error.error) {
                    this.error.emit({ error: error.error.message });
                }
                else {
                    this.error.emit({ error: 'FILE_UPLOAD.BUTTON.PERMISSION_CHECK_ERROR' });
                }
            });
        }
    }
    nodeHasPermission(node, permission) {
        return this.contentService.hasAllowableOperations(node, permission);
    }
}
UploadButtonComponent.decorators = [
    { type: Component, args: [{
                selector: 'adf-upload-button',
                template: "<form class=\"adf-upload-button-file-container\">\n    <!--Files Upload-->\n    <div *ngIf=\"!uploadFolders\">\n\n        <!--Single Files Upload-->\n        <button *ngIf=\"!multipleFiles\"\n            [disabled]=\"isButtonDisabled()\"\n            mat-button\n            (click)=\"uploadSingleFile.click()\">\n            <mat-icon>file_upload</mat-icon>\n            <span id=\"upload-single-file-label\"\n                *ngIf=\"!staticTitle\">{{ 'FILE_UPLOAD.BUTTON.UPLOAD_FILE' | translate }}</span>\n            <span id=\"upload-single-file-label-static\"\n                *ngIf=\"staticTitle\">{{ staticTitle }}</span>\n            <input #uploadSingleFile\n                id=\"upload-single-file\"\n                data-automation-id=\"upload-single-file\"\n                [type]=\"file ? 'button' : 'file'\"\n                name=\"uploadFiles\"\n                accept=\"{{acceptedFilesType}}\"\n                [attr.disabled]=\"isButtonDisabled()\"\n                [title]=\"tooltip\"\n                (change)=\"onFilesAdded($event)\"\n                (click)=\"onClickUploadButton()\">\n        </button>\n\n        <!--Multiple Files Upload-->\n        <button *ngIf=\"multipleFiles\"\n            [disabled]=\"isButtonDisabled()\"\n            mat-button\n            (click)=\"uploadMultipleFiles.click()\">\n            <mat-icon>file_upload</mat-icon>\n\n            <span id=\"upload-multiple-file-label\"\n                *ngIf=\"!staticTitle\">{{ 'FILE_UPLOAD.BUTTON.UPLOAD_FILE' | translate }}</span>\n            <span\n                id=\"upload-multiple-file-label-static\"\n                *ngIf=\"staticTitle\">{{ staticTitle }}</span>\n            <input #uploadMultipleFiles\n                id=\"upload-multiple-files\"\n                data-automation-id=\"upload-multiple-files\"\n                type=\"file\"\n                name=\"uploadFiles\"\n                multiple=\"multiple\"\n                accept=\"{{acceptedFilesType}}\"\n                [attr.disabled]=\"isButtonDisabled()\"\n                [title]=\"tooltip\"\n                (change)=\"onFilesAdded($event)\">\n        </button>\n    </div>\n\n    <!--Folders Upload-->\n    <div *ngIf=\"uploadFolders\">\n        <button\n            [disabled]=\"isButtonDisabled()\"\n            mat-button\n            (click)=\"uploadFolders.click()\">\n            <mat-icon>file_upload</mat-icon>\n            <span id=\"uploadFolder-label\"\n                *ngIf=\"!staticTitle\">{{ 'FILE_UPLOAD.BUTTON.UPLOAD_FOLDER' | translate }}</span>\n            <span id=\"uploadFolder-label-static\"\n                *ngIf=\"staticTitle\">{{ staticTitle }}</span>\n            <input #uploadFolders\n                id=\"uploadFolder\"\n                data-automation-id=\"uploadFolder\"\n                type=\"file\"\n                name=\"uploadFiles\"\n                multiple=\"multiple\"\n                accept=\"{{acceptedFilesType}}\"\n                webkitdirectory directory\n                [attr.disabled]=\"isButtonDisabled()\"\n                [title]=\"tooltip\"\n                (change)=\"onDirectoryAdded($event)\">\n        </button>\n    </div>\n</form>\n",
                viewProviders: [
                    { provide: EXTENDIBLE_COMPONENT, useExisting: forwardRef(() => UploadButtonComponent) }
                ],
                encapsulation: ViewEncapsulation.None,
                styles: [".adf-upload-button-file-container input{display:none}"]
            },] }
];
UploadButtonComponent.ctorParameters = () => [
    { type: UploadService },
    { type: ContentService },
    { type: TranslationService },
    { type: LogService },
    { type: NgZone }
];
UploadButtonComponent.propDecorators = {
    uploadFolders: [{ type: Input }],
    multipleFiles: [{ type: Input }],
    staticTitle: [{ type: Input }],
    tooltip: [{ type: Input }],
    file: [{ type: Input }],
    permissionEvent: [{ type: Output }]
};
//# sourceMappingURL=data:application/json;base64,