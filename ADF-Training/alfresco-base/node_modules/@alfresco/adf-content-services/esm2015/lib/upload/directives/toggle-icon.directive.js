/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Directive, HostListener } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
export class ToggleIconDirective {
    constructor() {
        this.isFocus = false;
        this.toggle = false;
    }
    onMouseEnter() {
        if (!this.isFocus) {
            this.toggle = true;
        }
    }
    onMouseLeave() {
        if (!this.isFocus) {
            this.toggle = false;
        }
        if (this.isFocus && this.toggle) {
            this.isFocus = false;
            this.toggle = false;
        }
    }
    onFocus() {
        this.isFocus = true;
        this.toggle = true;
    }
    onBlur() {
        this.isFocus = false;
        this.toggle = false;
    }
    get isToggled() {
        return this.toggle;
    }
    get isFocused() {
        return this.isFocus;
    }
}
ToggleIconDirective.ɵfac = function ToggleIconDirective_Factory(t) { return new (t || ToggleIconDirective)(); };
ToggleIconDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ToggleIconDirective, selectors: [["", "adf-toggle-icon", ""]], hostBindings: function ToggleIconDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("mouseenter", function ToggleIconDirective_mouseenter_HostBindingHandler() { return ctx.onMouseEnter(); })("mouseleave", function ToggleIconDirective_mouseleave_HostBindingHandler() { return ctx.onMouseLeave(); })("focus", function ToggleIconDirective_focus_HostBindingHandler() { return ctx.onFocus(); })("blur", function ToggleIconDirective_blur_HostBindingHandler() { return ctx.onBlur(); });
    } }, exportAs: ["toggleIcon"] });
ToggleIconDirective.propDecorators = {
    onMouseEnter: [{ type: HostListener, args: ['mouseenter',] }],
    onMouseLeave: [{ type: HostListener, args: ['mouseleave',] }],
    onFocus: [{ type: HostListener, args: ['focus',] }],
    onBlur: [{ type: HostListener, args: ['blur',] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ToggleIconDirective, [{
        type: Directive,
        args: [{
                selector: '[adf-toggle-icon]',
                exportAs: 'toggleIcon'
            }]
    }], function () { return []; }, { onMouseEnter: [{
            type: HostListener,
            args: ['mouseenter']
        }], onMouseLeave: [{
            type: HostListener,
            args: ['mouseleave']
        }], onFocus: [{
            type: HostListener,
            args: ['focus']
        }], onBlur: [{
            type: HostListener,
            args: ['blur']
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9nZ2xlLWljb24uZGlyZWN0aXZlLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9ob21lL3RyYXZpcy9idWlsZC9BbGZyZXNjby9hbGZyZXNjby1uZzItY29tcG9uZW50cy9saWIvY29udGVudC1zZXJ2aWNlcy9zcmMvbGliL3VwbG9hZC9kaXJlY3RpdmVzL3RvZ2dsZS1pY29uLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBRUgsT0FBTyxFQUFFLFNBQVMsRUFBRSxZQUFZLEVBQUUsTUFBTSxlQUFlLENBQUM7O0FBTXhELE1BQU0sT0FBTyxtQkFBbUI7QUFDaEMsSUFMQTtBQUNHLFFBSVMsWUFBTyxHQUFZLEtBQUssQ0FBQztBQUNyQyxRQUFZLFdBQU0sR0FBWSxLQUFLLENBQUM7QUFDcEMsSUFtQ0EsQ0FBQztBQUNELElBbkNnQyxZQUFZO0FBQzVDLFFBQVEsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUU7QUFDM0IsWUFBWSxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQztBQUMvQixTQUFTO0FBQ1QsSUFBSSxDQUFDO0FBQ0wsSUFDZ0MsWUFBWTtBQUM1QyxRQUFRLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFO0FBQzNCLFlBQVksSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUM7QUFDaEMsU0FBUztBQUNULFFBQ1EsSUFBSSxJQUFJLENBQUMsT0FBTyxJQUFJLElBQUksQ0FBQyxNQUFNLEVBQUU7QUFDekMsWUFBWSxJQUFJLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQztBQUNqQyxZQUFZLElBQUksQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDO0FBQ2hDLFNBQVM7QUFDVCxJQUFJLENBQUM7QUFDTCxJQUMyQixPQUFPO0FBQ2xDLFFBQVEsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUM7QUFDNUIsUUFBUSxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQztBQUMzQixJQUFJLENBQUM7QUFDTCxJQUMwQixNQUFNO0FBQ2hDLFFBQVEsSUFBSSxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUM7QUFDN0IsUUFBUSxJQUFJLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQztBQUM1QixJQUFJLENBQUM7QUFDTCxJQUNJLElBQUksU0FBUztBQUFLLFFBQ2QsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDO0FBQzNCLElBQUksQ0FBQztBQUNMLElBQ0ksSUFBSSxTQUFTO0FBQUssUUFDZCxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUM7QUFDNUIsSUFBSSxDQUFDO0FBQ0w7K0NBMUNDLFNBQVMsU0FBQyxrQkFDUCxRQUFRLEVBQUUsbUJBQW1CO2lCQUM3QixRQUFRLEVBQUUsWUFBWSxjQUN6Qjs7cUNBQ0k7QUFBQztBQUNJLDJCQUdMLFlBQVksU0FBQyxZQUFZO0FBQU8sMkJBTWhDLFlBQVksU0FBQyxZQUFZO0FBQU8sc0JBV2hDLFlBQVksU0FBQyxPQUFPO0FBQU8scUJBSzNCLFlBQVksU0FBQyxNQUFNO0FBQU07Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7b0JBQUU7QUFBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IERpcmVjdGl2ZSwgSG9zdExpc3RlbmVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBEaXJlY3RpdmUoe1xuICAgIHNlbGVjdG9yOiAnW2FkZi10b2dnbGUtaWNvbl0nLFxuICAgIGV4cG9ydEFzOiAndG9nZ2xlSWNvbidcbn0pXG5leHBvcnQgY2xhc3MgVG9nZ2xlSWNvbkRpcmVjdGl2ZSB7XG4gICAgcHJpdmF0ZSBpc0ZvY3VzOiBib29sZWFuID0gZmFsc2U7XG4gICAgcHJpdmF0ZSB0b2dnbGU6IGJvb2xlYW4gPSBmYWxzZTtcblxuICAgIEBIb3N0TGlzdGVuZXIoJ21vdXNlZW50ZXInKSBvbk1vdXNlRW50ZXIoKSB7XG4gICAgICAgIGlmICghdGhpcy5pc0ZvY3VzKSB7XG4gICAgICAgICAgICB0aGlzLnRvZ2dsZSA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBASG9zdExpc3RlbmVyKCdtb3VzZWxlYXZlJykgb25Nb3VzZUxlYXZlKCkge1xuICAgICAgICBpZiAoIXRoaXMuaXNGb2N1cykge1xuICAgICAgICAgICAgdGhpcy50b2dnbGUgPSBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLmlzRm9jdXMgJiYgdGhpcy50b2dnbGUpIHtcbiAgICAgICAgICAgIHRoaXMuaXNGb2N1cyA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy50b2dnbGUgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIEBIb3N0TGlzdGVuZXIoJ2ZvY3VzJykgb25Gb2N1cygpIHtcbiAgICAgICAgdGhpcy5pc0ZvY3VzID0gdHJ1ZTtcbiAgICAgICAgdGhpcy50b2dnbGUgPSB0cnVlO1xuICAgIH1cblxuICAgIEBIb3N0TGlzdGVuZXIoJ2JsdXInKSBvbkJsdXIoKSB7XG4gICAgICAgIHRoaXMuaXNGb2N1cyA9IGZhbHNlO1xuICAgICAgICB0aGlzLnRvZ2dsZSA9IGZhbHNlO1xuICAgIH1cblxuICAgIGdldCBpc1RvZ2dsZWQoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLnRvZ2dsZTtcbiAgICB9XG5cbiAgICBnZXQgaXNGb2N1c2VkKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5pc0ZvY3VzO1xuICAgIH1cbn1cbiJdfQ==