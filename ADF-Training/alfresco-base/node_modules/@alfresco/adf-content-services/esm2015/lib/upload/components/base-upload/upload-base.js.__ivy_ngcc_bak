/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { FileModel, UploadService, TranslationService } from '@alfresco/adf-core';
import { EventEmitter, Input, Output, NgZone, Directive } from '@angular/core';
import { Subject } from 'rxjs';
import { UploadFilesEvent } from '../upload-files.event';
import { takeUntil } from 'rxjs/operators';
export class UploadBase {
    constructor(uploadService, translationService, ngZone) {
        this.uploadService = uploadService;
        this.translationService = translationService;
        this.ngZone = ngZone;
        this.rootFolderId = '-root-';
        this.disabled = false;
        this.acceptedFilesType = '*';
        this.versioning = false;
        this.majorVersion = false;
        this.nodeType = 'cm:content';
        this.success = new EventEmitter();
        this.error = new EventEmitter();
        this.beginUpload = new EventEmitter();
        this.updateFileVersion = new EventEmitter();
        this.onDestroy$ = new Subject();
    }
    ngOnInit() {
        this.uploadService.fileUploadError
            .pipe(takeUntil(this.onDestroy$))
            .subscribe(error => this.error.emit(error));
    }
    ngOnDestroy() {
        this.onDestroy$.next(true);
        this.onDestroy$.complete();
    }
    uploadFiles(files) {
        const filteredFiles = files
            .map((file) => {
            return this.createFileModel(file, this.rootFolderId, (file.webkitRelativePath || '').replace(/\/[^\/]*$/, ''));
        });
        this.uploadQueue(filteredFiles);
    }
    uploadFilesInfo(files) {
        const filteredFiles = files
            .map((fileInfo) => {
            return this.createFileModel(fileInfo.file, this.rootFolderId, fileInfo.relativeFolder);
        });
        this.uploadQueue(filteredFiles);
    }
    uploadQueue(files) {
        const filteredFiles = files
            .filter(this.isFileAcceptable.bind(this))
            .filter(this.isFileSizeAcceptable.bind(this));
        this.ngZone.run(() => {
            const event = new UploadFilesEvent([...filteredFiles], this.uploadService, this.success, this.error);
            this.beginUpload.emit(event);
            if (!event.defaultPrevented) {
                if (filteredFiles.length > 0) {
                    this.uploadService.addToQueue(...filteredFiles);
                    this.uploadService.uploadFilesInTheQueue(this.success, this.error);
                }
            }
        });
    }
    isFileAcceptable(file) {
        if (this.acceptedFilesType === '*') {
            return true;
        }
        const allowedExtensions = this.acceptedFilesType
            .split(',')
            .map((ext) => ext.trim().replace(/^\./, ''));
        return allowedExtensions.indexOf(file.extension) !== -1;
    }
    createFileModel(file, parentId, path, id) {
        return new FileModel(file, {
            comment: this.comment,
            majorVersion: this.majorVersion,
            newVersion: this.versioning,
            parentId: parentId,
            path: path,
            nodeType: this.nodeType
        }, id);
    }
    isFileSizeAllowed(file) {
        let isFileSizeAllowed = true;
        if (this.isMaxFileSizeDefined()) {
            isFileSizeAllowed = this.isFileSizeCorrect(file);
        }
        return isFileSizeAllowed;
    }
    isMaxFileSizeDefined() {
        return this.maxFilesSize !== undefined && this.maxFilesSize !== null;
    }
    isFileSizeCorrect(file) {
        return this.maxFilesSize >= 0 && file.size <= this.maxFilesSize;
    }
    isFileSizeAcceptable(file) {
        let acceptableSize = true;
        if (!this.isFileSizeAllowed(file)) {
            acceptableSize = false;
            const message = this.translationService.instant('FILE_UPLOAD.MESSAGES.EXCEED_MAX_FILE_SIZE', { fileName: file.name });
            this.error.emit(message);
        }
        return acceptableSize;
    }
}
UploadBase.decorators = [
    { type: Directive }
];
UploadBase.ctorParameters = () => [
    { type: UploadService },
    { type: TranslationService },
    { type: NgZone }
];
UploadBase.propDecorators = {
    maxFilesSize: [{ type: Input }],
    rootFolderId: [{ type: Input }],
    disabled: [{ type: Input }],
    acceptedFilesType: [{ type: Input }],
    versioning: [{ type: Input }],
    majorVersion: [{ type: Input }],
    comment: [{ type: Input }],
    nodeType: [{ type: Input }],
    success: [{ type: Output }],
    error: [{ type: Output }],
    beginUpload: [{ type: Output }],
    updateFileVersion: [{ type: Output }]
};
//# sourceMappingURL=data:application/json;base64,