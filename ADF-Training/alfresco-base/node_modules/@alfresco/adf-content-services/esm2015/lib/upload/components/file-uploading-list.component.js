/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { FileUploadStatus, NodesApiService, TranslationService, UploadService } from '@alfresco/adf-core';
import { Component, ContentChild, Input, Output, TemplateRef, EventEmitter } from '@angular/core';
import { forkJoin, of } from 'rxjs';
import { map, catchError } from 'rxjs/operators';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@alfresco/adf-core';
import * as ɵngcc2 from '@angular/common';

function FileUploadingListComponent_ng_template_1_Template(rf, ctx) { }
export class FileUploadingListComponent {
    constructor(uploadService, nodesApi, translateService) {
        this.uploadService = uploadService;
        this.nodesApi = nodesApi;
        this.translateService = translateService;
        this.FileUploadStatus = FileUploadStatus;
        this.files = [];
        this.error = new EventEmitter();
    }
    cancelFile(file) {
        if (file.status === FileUploadStatus.Pending) {
            file.status = FileUploadStatus.Cancelled;
        }
        else {
            this.uploadService.cancelUpload(file);
        }
    }
    removeFile(file) {
        this.deleteNode(file).subscribe(() => {
            if (file.status === FileUploadStatus.Error) {
                this.notifyError(file);
            }
            this.cancelNodeVersionInstances(file);
            this.uploadService.cancelUpload(file);
        });
    }
    cancelAllFiles() {
        const deletedFiles = [];
        this.files.forEach((file) => {
            if (this.isUploadingFile(file)) {
                this.uploadService.cancelUpload(file);
            }
            else if (file.status === FileUploadStatus.Complete) {
                deletedFiles.push(this.deleteNode(file));
            }
        });
        forkJoin(...deletedFiles).subscribe((files) => {
            const errors = files.filter((file) => file.status === FileUploadStatus.Error);
            if (errors.length) {
                this.notifyError(...errors);
            }
            this.uploadService.cancelUpload(...files);
        });
    }
    isUploadCompleted() {
        return (!this.isUploadCancelled() &&
            Boolean(this.files.length) &&
            !this.files.some(({ status }) => status === FileUploadStatus.Starting ||
                status === FileUploadStatus.Progress ||
                status === FileUploadStatus.Pending));
    }
    isUploadCancelled() {
        return (!!this.files.length &&
            this.files.every(({ status }) => status === FileUploadStatus.Aborted ||
                status === FileUploadStatus.Cancelled ||
                status === FileUploadStatus.Deleted));
    }
    deleteNode(file) {
        const { id } = file.data.entry;
        return this.nodesApi.deleteNode(id, { permanent: true }).pipe(map(() => {
            file.status = FileUploadStatus.Deleted;
            return file;
        }), catchError(() => {
            file.status = FileUploadStatus.Error;
            return of(file);
        }));
    }
    cancelNodeVersionInstances(file) {
        this.files
            .filter((item) => item.options.newVersion &&
            item.data.entry.id === file.data.entry.id)
            .map((item) => {
            item.status = FileUploadStatus.Deleted;
        });
    }
    notifyError(...files) {
        let messageError = null;
        if (files.length === 1) {
            messageError = this.translateService.instant('FILE_UPLOAD.MESSAGES.REMOVE_FILE_ERROR', { fileName: files[0].name });
        }
        else {
            messageError = this.translateService.instant('FILE_UPLOAD.MESSAGES.REMOVE_FILES_ERROR', { total: files.length });
        }
        this.error.emit(messageError);
    }
    isUploadingFile(file) {
        return file.status === FileUploadStatus.Pending ||
            file.status === FileUploadStatus.Starting ||
            file.status === FileUploadStatus.Progress;
    }
}
FileUploadingListComponent.ɵfac = function FileUploadingListComponent_Factory(t) { return new (t || FileUploadingListComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.UploadService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NodesApiService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.TranslationService)); };
FileUploadingListComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: FileUploadingListComponent, selectors: [["adf-file-uploading-list"]], contentQueries: function FileUploadingListComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, TemplateRef, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.template = _t.first);
    } }, inputs: { files: "files" }, outputs: { error: "error" }, decls: 2, vars: 2, consts: [[1, "upload-list"], ["ngFor", "", 3, "ngForOf", "ngForTemplate"]], template: function FileUploadingListComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵtemplate(1, FileUploadingListComponent_ng_template_1_Template, 0, 0, "ng-template", 1);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.files)("ngForTemplate", ctx.template);
    } }, directives: [ɵngcc2.NgForOf], styles: ["[_nghost-%COMP%]{display:flex;flex-direction:column}"] });
FileUploadingListComponent.ctorParameters = () => [
    { type: UploadService },
    { type: NodesApiService },
    { type: TranslationService }
];
FileUploadingListComponent.propDecorators = {
    template: [{ type: ContentChild, args: [TemplateRef,] }],
    files: [{ type: Input }],
    error: [{ type: Output }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FileUploadingListComponent, [{
        type: Component,
        args: [{
                selector: 'adf-file-uploading-list',
                template: "<div class=\"upload-list\">\n    <ng-template\n        ngFor\n        [ngForOf]=\"files\"\n        [ngForTemplate]=\"template\">\n    </ng-template>\n</div>\n",
                styles: [":host{display:flex;flex-direction:column}"]
            }]
    }], function () { return [{ type: ɵngcc1.UploadService }, { type: ɵngcc1.NodesApiService }, { type: ɵngcc1.TranslationService }]; }, { files: [{
            type: Input
        }], error: [{
            type: Output
        }], template: [{
            type: ContentChild,
            args: [TemplateRef]
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,