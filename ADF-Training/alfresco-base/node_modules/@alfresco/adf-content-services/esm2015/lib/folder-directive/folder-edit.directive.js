/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Directive, ElementRef, HostListener, Input, Output, EventEmitter } from '@angular/core';
import { MatDialog } from '@angular/material/dialog';
import { Node } from '@alfresco/js-api';
import { FolderDialogComponent } from '../dialogs/folder.dialog';
import { ContentService } from '@alfresco/adf-core';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/material/dialog';
import * as ɵngcc2 from '@alfresco/adf-core';
export class FolderEditDirective {
    constructor(dialogRef, elementRef, content) {
        this.dialogRef = dialogRef;
        this.elementRef = elementRef;
        this.content = content;
        this.error = new EventEmitter();
        this.title = null;
        this.success = new EventEmitter();
    }
    onClick(event) {
        event.preventDefault();
        if (this.folder) {
            this.openDialog();
        }
    }
    get dialogConfig() {
        const { DIALOG_WIDTH: width } = FolderEditDirective;
        const { folder } = this;
        return {
            data: {
                folder,
                editTitle: this.title
            },
            width: `${width}px`
        };
    }
    openDialog() {
        const { dialogRef, dialogConfig, content } = this;
        const dialogInstance = dialogRef.open(FolderDialogComponent, dialogConfig);
        dialogInstance.componentInstance.error.subscribe((error) => {
            this.error.emit(error);
        });
        dialogInstance.componentInstance.success.subscribe((node) => {
            this.success.emit(node);
        });
        dialogInstance.afterClosed().subscribe((node) => {
            if (node) {
                content.folderEdit.next(node);
            }
        });
    }
}
FolderEditDirective.ɵfac = function FolderEditDirective_Factory(t) { return new (t || FolderEditDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.MatDialog), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.ContentService)); };
FolderEditDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: FolderEditDirective, selectors: [["", "adf-edit-folder", ""]], hostBindings: function FolderEditDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function FolderEditDirective_click_HostBindingHandler($event) { return ctx.onClick($event); });
    } }, inputs: { title: "title", folder: ["adf-edit-folder", "folder"] }, outputs: { error: "error", success: "success" } });
FolderEditDirective.DIALOG_WIDTH = 400;
FolderEditDirective.ctorParameters = () => [
    { type: MatDialog },
    { type: ElementRef },
    { type: ContentService }
];
FolderEditDirective.propDecorators = {
    folder: [{ type: Input, args: ['adf-edit-folder',] }],
    error: [{ type: Output }],
    title: [{ type: Input }],
    success: [{ type: Output }],
    onClick: [{ type: HostListener, args: ['click', ['$event'],] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FolderEditDirective, [{
        type: Directive,
        args: [{
                selector: '[adf-edit-folder]'
            }]
    }], function () { return [{ type: ɵngcc1.MatDialog }, { type: ɵngcc0.ElementRef }, { type: ɵngcc2.ContentService }]; }, { error: [{
            type: Output
        }], title: [{
            type: Input
        }], success: [{
            type: Output
        }], onClick: [{
            type: HostListener,
            args: ['click', ['$event']]
        }], folder: [{
            type: Input,
            args: ['adf-edit-folder']
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9sZGVyLWVkaXQuZGlyZWN0aXZlLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9ob21lL3RyYXZpcy9idWlsZC9BbGZyZXNjby9hbGZyZXNjby1uZzItY29tcG9uZW50cy9saWIvY29udGVudC1zZXJ2aWNlcy9zcmMvbGliL2ZvbGRlci1kaXJlY3RpdmUvZm9sZGVyLWVkaXQuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFJSCxPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxZQUFZLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDakcsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBRXJELE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUV4QyxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUNqRSxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sb0JBQW9CLENBQUM7Ozs7QUFLcEQsTUFBTSxPQUFPLG1CQUFtQjtBQUNoQyxJQTBCSSxZQUNXLFNBQW9CLEVBQ3BCLFVBQXNCLEVBQ3RCLE9BQXVCO0FBQ25DLFFBSFksY0FBUyxHQUFULFNBQVMsQ0FBVztBQUFDLFFBQ3JCLGVBQVUsR0FBVixVQUFVLENBQVk7QUFBQyxRQUN2QixZQUFPLEdBQVAsT0FBTyxDQUFnQjtBQUN0QyxRQXRCSSxVQUFLLEdBQXNCLElBQUksWUFBWSxFQUFPLENBQUM7QUFDdkQsUUFHSSxVQUFLLEdBQVcsSUFBSSxDQUFDO0FBQ3pCLFFBR0ksWUFBTyxHQUF1QixJQUFJLFlBQVksRUFBUSxDQUFDO0FBQzNELElBYU8sQ0FBQztBQUNSLElBWkksT0FBTyxDQUFDLEtBQUs7QUFDakIsUUFBUSxLQUFLLENBQUMsY0FBYyxFQUFFLENBQUM7QUFDL0IsUUFBUSxJQUFJLElBQUksQ0FBQyxNQUFNLEVBQUU7QUFDekIsWUFBWSxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7QUFDOUIsU0FBUztBQUNULElBQUksQ0FBQztBQUNMLElBT0ksSUFBWSxZQUFZO0FBQzVCLFFBQVEsTUFBTSxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQUUsR0FBRyxtQkFBbUIsQ0FBQztBQUM1RCxRQUFRLE1BQU0sRUFBRSxNQUFNLEVBQUUsR0FBRyxJQUFJLENBQUM7QUFDaEMsUUFDUSxPQUFPO0FBQ2YsWUFBWSxJQUFJLEVBQUU7QUFDbEIsZ0JBQWdCLE1BQU07QUFDdEIsZ0JBQWdCLFNBQVMsRUFBRSxJQUFJLENBQUMsS0FBSztBQUNyQyxhQUFhO0FBQ2IsWUFBWSxLQUFLLEVBQUUsR0FBRyxLQUFLLElBQUk7QUFDL0IsU0FBUyxDQUFDO0FBQ1YsSUFBSSxDQUFDO0FBQ0wsSUFDWSxVQUFVO0FBQUssUUFDbkIsTUFBTSxFQUFFLFNBQVMsRUFBRSxZQUFZLEVBQUUsT0FBTyxFQUFFLEdBQUcsSUFBSSxDQUFDO0FBQzFELFFBQVEsTUFBTSxjQUFjLEdBQUcsU0FBUyxDQUFDLElBQUksQ0FBQyxxQkFBcUIsRUFBRSxZQUFZLENBQUMsQ0FBQztBQUNuRixRQUNRLGNBQWMsQ0FBQyxpQkFBaUIsQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUMsS0FBSyxFQUFFLEVBQUU7QUFDbkUsWUFBWSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUNuQyxRQUFRLENBQUMsQ0FBQyxDQUFDO0FBQ1gsUUFDUSxjQUFjLENBQUMsaUJBQWlCLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLElBQVUsRUFBRSxFQUFFO0FBQzFFLFlBQVksSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDcEMsUUFBUSxDQUFDLENBQUMsQ0FBQztBQUNYLFFBQ1EsY0FBYyxDQUFDLFdBQVcsRUFBRSxDQUFDLFNBQVMsQ0FBQyxDQUFDLElBQVUsRUFBRSxFQUFFO0FBQzlELFlBQVksSUFBSSxJQUFJLEVBQUU7QUFDdEIsZ0JBQWdCLE9BQU8sQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQzlDLGFBQWE7QUFDYixRQUFRLENBQUMsQ0FBQyxDQUFDO0FBQ1gsSUFBSSxDQUFDO0FBQ0w7Ozs7K0hBQUM7QUEvRFUsZ0NBQVksR0FBVyxHQUFHLENBQUMsQUFEakM7QUFBQztFQUhMLFNBQVMsU0FBQyxwQkFJSyxZQVhQLFNBQVM7YUFRZCxRQUFRLEVBQUUsdkJBUlEsWUFERixVQUFVO2dCQVNHLGhCQVRDLFlBTXpCLGNBQWM7Q0FJdEIsREFKeUI7QUFBRztBQUc1QixxQkFNSSxLQUFLLFNBQUMsaUJBQWlCO0FBQ3ZCLG9CQUdBLE1BQU07QUFDVCxvQkFHRyxLQUFLO0FBQ1Isc0JBR0csTUFBTTtBQUNULHNCQUVHLFlBQVksU0FBQyxPQUFPLEVBQUUsQ0FBRSxRQUFRLENBQUU7QUFDbkM7Ozs7Ozs7Ozs7Ozs7Ozs7OztvQkFBRTtBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuLyogdHNsaW50OmRpc2FibGU6bm8taW5wdXQtcmVuYW1lICAqL1xuXG5pbXBvcnQgeyBEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIEhvc3RMaXN0ZW5lciwgSW5wdXQsIE91dHB1dCwgRXZlbnRFbWl0dGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBNYXREaWFsb2cgfSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbC9kaWFsb2cnO1xuXG5pbXBvcnQgeyBOb2RlIH0gZnJvbSAnQGFsZnJlc2NvL2pzLWFwaSc7XG5cbmltcG9ydCB7IEZvbGRlckRpYWxvZ0NvbXBvbmVudCB9IGZyb20gJy4uL2RpYWxvZ3MvZm9sZGVyLmRpYWxvZyc7XG5pbXBvcnQgeyBDb250ZW50U2VydmljZSB9IGZyb20gJ0BhbGZyZXNjby9hZGYtY29yZSc7XG5cbkBEaXJlY3RpdmUoe1xuICAgIHNlbGVjdG9yOiAnW2FkZi1lZGl0LWZvbGRlcl0nXG59KVxuZXhwb3J0IGNsYXNzIEZvbGRlckVkaXREaXJlY3RpdmUge1xuICAgIHN0YXRpYyBESUFMT0dfV0lEVEg6IG51bWJlciA9IDQwMDtcblxuICAgIC8qKiBGb2xkZXIgbm9kZSB0byBlZGl0LiAqL1xuICAgIEBJbnB1dCgnYWRmLWVkaXQtZm9sZGVyJylcbiAgICBmb2xkZXI6IE5vZGU7XG5cbiAgICAvKiogRW1pdHRlZCB3aGVuIGFuIGVycm9yIG9jY3VycyAoZWcsIGEgZm9sZGVyIHdpdGggc2FtZSBuYW1lIGFscmVhZHkgZXhpc3RzKS4gKi9cbiAgICBAT3V0cHV0KClcbiAgICBlcnJvcjogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcblxuICAgIC8qKiBUaXRsZSBvZiBmb2xkZXIgZWRpdCBkaWFsb2cuICovXG4gICAgQElucHV0KClcbiAgICB0aXRsZTogc3RyaW5nID0gbnVsbDtcblxuICAgIC8qKiBFbWl0dGVkIHdoZW4gdGhlIGZvbGRlciBoYXMgYmVlbiBlZGl0ZWQgc3VjY2Vzc2Z1bGx5LiAqL1xuICAgIEBPdXRwdXQoKVxuICAgIHN1Y2Nlc3M6IEV2ZW50RW1pdHRlcjxOb2RlPiA9IG5ldyBFdmVudEVtaXR0ZXI8Tm9kZT4oKTtcblxuICAgIEBIb3N0TGlzdGVuZXIoJ2NsaWNrJywgWyAnJGV2ZW50JyBdKVxuICAgIG9uQ2xpY2soZXZlbnQpIHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgaWYgKHRoaXMuZm9sZGVyKSB7XG4gICAgICAgICAgICB0aGlzLm9wZW5EaWFsb2coKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBwdWJsaWMgZGlhbG9nUmVmOiBNYXREaWFsb2csXG4gICAgICAgIHB1YmxpYyBlbGVtZW50UmVmOiBFbGVtZW50UmVmLFxuICAgICAgICBwdWJsaWMgY29udGVudDogQ29udGVudFNlcnZpY2VcbiAgICApIHt9XG5cbiAgICBwcml2YXRlIGdldCBkaWFsb2dDb25maWcoKSB7XG4gICAgICAgIGNvbnN0IHsgRElBTE9HX1dJRFRIOiB3aWR0aCB9ID0gRm9sZGVyRWRpdERpcmVjdGl2ZTtcbiAgICAgICAgY29uc3QgeyBmb2xkZXIgfSA9IHRoaXM7XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICBmb2xkZXIsXG4gICAgICAgICAgICAgICAgZWRpdFRpdGxlOiB0aGlzLnRpdGxlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgd2lkdGg6IGAke3dpZHRofXB4YFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIHByaXZhdGUgb3BlbkRpYWxvZygpOiB2b2lkIHtcbiAgICAgICAgY29uc3QgeyBkaWFsb2dSZWYsIGRpYWxvZ0NvbmZpZywgY29udGVudCB9ID0gdGhpcztcbiAgICAgICAgY29uc3QgZGlhbG9nSW5zdGFuY2UgPSBkaWFsb2dSZWYub3BlbihGb2xkZXJEaWFsb2dDb21wb25lbnQsIGRpYWxvZ0NvbmZpZyk7XG5cbiAgICAgICAgZGlhbG9nSW5zdGFuY2UuY29tcG9uZW50SW5zdGFuY2UuZXJyb3Iuc3Vic2NyaWJlKChlcnJvcikgPT4ge1xuICAgICAgICAgICAgdGhpcy5lcnJvci5lbWl0KGVycm9yKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgZGlhbG9nSW5zdGFuY2UuY29tcG9uZW50SW5zdGFuY2Uuc3VjY2Vzcy5zdWJzY3JpYmUoKG5vZGU6IE5vZGUpID0+IHtcbiAgICAgICAgICAgIHRoaXMuc3VjY2Vzcy5lbWl0KG5vZGUpO1xuICAgICAgICB9KTtcblxuICAgICAgICBkaWFsb2dJbnN0YW5jZS5hZnRlckNsb3NlZCgpLnN1YnNjcmliZSgobm9kZTogTm9kZSkgPT4ge1xuICAgICAgICAgICAgaWYgKG5vZGUpIHtcbiAgICAgICAgICAgICAgICBjb250ZW50LmZvbGRlckVkaXQubmV4dChub2RlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxufVxuIl19