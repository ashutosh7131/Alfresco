/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Directive, HostListener, Input, Output, EventEmitter } from '@angular/core';
import { MatDialog } from '@angular/material/dialog';
import { FolderDialogComponent } from '../dialogs/folder.dialog';
import { ContentService } from '@alfresco/adf-core';
const DEFAULT_FOLDER_PARENT_ID = '-my-';
export class FolderCreateDirective {
    constructor(dialogRef, content) {
        this.dialogRef = dialogRef;
        this.content = content;
        this.parentNodeId = DEFAULT_FOLDER_PARENT_ID;
        this.title = null;
        this.nodeType = 'cm:folder';
        this.error = new EventEmitter();
        this.success = new EventEmitter();
    }
    onClick(event) {
        event.preventDefault();
        this.openDialog();
    }
    get dialogConfig() {
        const { DIALOG_WIDTH: width } = FolderCreateDirective;
        const { parentNodeId, title: createTitle, nodeType } = this;
        return {
            data: { parentNodeId, createTitle, nodeType },
            width: `${width}px`
        };
    }
    openDialog() {
        const { dialogRef, dialogConfig, content } = this;
        const dialogInstance = dialogRef.open(FolderDialogComponent, dialogConfig);
        dialogInstance.componentInstance.error.subscribe((error) => {
            this.error.emit(error);
        });
        dialogInstance.componentInstance.success.subscribe((node) => {
            this.success.emit(node);
        });
        dialogInstance.afterClosed().subscribe((node) => {
            if (node) {
                content.folderCreate.next(node);
            }
        });
    }
}
FolderCreateDirective.DIALOG_WIDTH = 400;
FolderCreateDirective.decorators = [
    { type: Directive, args: [{
                selector: '[adf-create-folder]'
            },] }
];
FolderCreateDirective.ctorParameters = () => [
    { type: MatDialog },
    { type: ContentService }
];
FolderCreateDirective.propDecorators = {
    parentNodeId: [{ type: Input, args: ['adf-create-folder',] }],
    title: [{ type: Input }],
    nodeType: [{ type: Input }],
    error: [{ type: Output }],
    success: [{ type: Output }],
    onClick: [{ type: HostListener, args: ['click', ['$event'],] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9sZGVyLWNyZWF0ZS5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiL2hvbWUvdHJhdmlzL2J1aWxkL0FsZnJlc2NvL2FsZnJlc2NvLW5nMi1jb21wb25lbnRzL2xpYi9jb250ZW50LXNlcnZpY2VzL3NyYy8iLCJzb3VyY2VzIjpbImxpYi9mb2xkZXItZGlyZWN0aXZlL2ZvbGRlci1jcmVhdGUuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7R0FlRztBQUlILE9BQU8sRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsWUFBWSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3JGLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUVyRCxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUNqRSxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFFcEQsTUFBTSx3QkFBd0IsR0FBRyxNQUFNLENBQUM7QUFLeEMsTUFBTSxPQUFPLHFCQUFxQjtJQTZCOUIsWUFDVyxTQUFvQixFQUNwQixPQUF1QjtRQUR2QixjQUFTLEdBQVQsU0FBUyxDQUFXO1FBQ3BCLFlBQU8sR0FBUCxPQUFPLENBQWdCO1FBMUJsQyxpQkFBWSxHQUFXLHdCQUF3QixDQUFDO1FBSWhELFVBQUssR0FBVyxJQUFJLENBQUM7UUFJckIsYUFBUSxHQUFHLFdBQVcsQ0FBQztRQUl2QixVQUFLLEdBQXNCLElBQUksWUFBWSxFQUFPLENBQUM7UUFJbkQsWUFBTyxHQUF1QixJQUFJLFlBQVksRUFBUSxDQUFDO0lBV3BELENBQUM7SUFSSixPQUFPLENBQUMsS0FBSztRQUNULEtBQUssQ0FBQyxjQUFjLEVBQUUsQ0FBQztRQUN2QixJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7SUFDdEIsQ0FBQztJQU9ELElBQVksWUFBWTtRQUNwQixNQUFNLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRSxHQUFHLHFCQUFxQixDQUFDO1FBQ3RELE1BQU0sRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFFLFdBQVcsRUFBRSxRQUFRLEVBQUUsR0FBRyxJQUFJLENBQUM7UUFFNUQsT0FBTztZQUNILElBQUksRUFBRSxFQUFFLFlBQVksRUFBRSxXQUFXLEVBQUUsUUFBUSxFQUFFO1lBQzdDLEtBQUssRUFBRSxHQUFHLEtBQUssSUFBSTtTQUN0QixDQUFDO0lBQ04sQ0FBQztJQUVPLFVBQVU7UUFDZCxNQUFNLEVBQUUsU0FBUyxFQUFFLFlBQVksRUFBRSxPQUFPLEVBQUUsR0FBRyxJQUFJLENBQUM7UUFDbEQsTUFBTSxjQUFjLEdBQUcsU0FBUyxDQUFDLElBQUksQ0FBQyxxQkFBcUIsRUFBRSxZQUFZLENBQUMsQ0FBQztRQUUzRSxjQUFjLENBQUMsaUJBQWlCLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFO1lBQ3ZELElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzNCLENBQUMsQ0FBQyxDQUFDO1FBRUgsY0FBYyxDQUFDLGlCQUFpQixDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxJQUFVLEVBQUUsRUFBRTtZQUM5RCxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUM1QixDQUFDLENBQUMsQ0FBQztRQUVILGNBQWMsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxJQUFVLEVBQUUsRUFBRTtZQUNsRCxJQUFJLElBQUksRUFBRTtnQkFDTixPQUFPLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQzthQUNuQztRQUNMLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQzs7QUE1RE0sa0NBQVksR0FBVyxHQUFHLENBQUM7O1lBSnJDLFNBQVMsU0FBQztnQkFDUCxRQUFRLEVBQUUscUJBQXFCO2FBQ2xDOzs7WUFUUSxTQUFTO1lBR1QsY0FBYzs7OzJCQVdsQixLQUFLLFNBQUMsbUJBQW1CO29CQUl6QixLQUFLO3VCQUlMLEtBQUs7b0JBSUwsTUFBTTtzQkFJTixNQUFNO3NCQUdOLFlBQVksU0FBQyxPQUFPLEVBQUUsQ0FBRSxRQUFRLENBQUUiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG4vKiB0c2xpbnQ6ZGlzYWJsZTpuby1pbnB1dC1yZW5hbWUgICovXG5cbmltcG9ydCB7IERpcmVjdGl2ZSwgSG9zdExpc3RlbmVyLCBJbnB1dCwgT3V0cHV0LCBFdmVudEVtaXR0ZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE1hdERpYWxvZyB9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsL2RpYWxvZyc7XG5pbXBvcnQgeyBOb2RlIH0gZnJvbSAnQGFsZnJlc2NvL2pzLWFwaSc7XG5pbXBvcnQgeyBGb2xkZXJEaWFsb2dDb21wb25lbnQgfSBmcm9tICcuLi9kaWFsb2dzL2ZvbGRlci5kaWFsb2cnO1xuaW1wb3J0IHsgQ29udGVudFNlcnZpY2UgfSBmcm9tICdAYWxmcmVzY28vYWRmLWNvcmUnO1xuXG5jb25zdCBERUZBVUxUX0ZPTERFUl9QQVJFTlRfSUQgPSAnLW15LSc7XG5cbkBEaXJlY3RpdmUoe1xuICAgIHNlbGVjdG9yOiAnW2FkZi1jcmVhdGUtZm9sZGVyXSdcbn0pXG5leHBvcnQgY2xhc3MgRm9sZGVyQ3JlYXRlRGlyZWN0aXZlIHtcbiAgICBzdGF0aWMgRElBTE9HX1dJRFRIOiBudW1iZXIgPSA0MDA7XG5cbiAgICAvKiogUGFyZW50IGZvbGRlciB3aGVyZSB0aGUgbmV3IGZvbGRlciB3aWxsIGJlIGxvY2F0ZWQgYWZ0ZXIgY3JlYXRpb24uICovXG4gICAgQElucHV0KCdhZGYtY3JlYXRlLWZvbGRlcicpXG4gICAgcGFyZW50Tm9kZUlkOiBzdHJpbmcgPSBERUZBVUxUX0ZPTERFUl9QQVJFTlRfSUQ7XG5cbiAgICAvKiogVGl0bGUgb2YgZm9sZGVyIGNyZWF0aW9uIGRpYWxvZy4gKi9cbiAgICBASW5wdXQoKVxuICAgIHRpdGxlOiBzdHJpbmcgPSBudWxsO1xuXG4gICAgLyoqIFR5cGUgb2Ygbm9kZSB0byBjcmVhdGUuICovXG4gICAgQElucHV0KClcbiAgICBub2RlVHlwZSA9ICdjbTpmb2xkZXInO1xuXG4gICAgLyoqIEVtaXR0ZWQgd2hlbiBhbiBlcnJvciBvY2N1cnMgKGVnLCBhIGZvbGRlciB3aXRoIHNhbWUgbmFtZSBhbHJlYWR5IGV4aXN0cykuICovXG4gICAgQE91dHB1dCgpXG4gICAgZXJyb3I6IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XG5cbiAgICAvKiogRW1pdHRlZCB3aGVuIHRoZSBmb2xkZXIgaXMgY3JlYXRlZCBzdWNjZXNzZnVsbHkuICovXG4gICAgQE91dHB1dCgpXG4gICAgc3VjY2VzczogRXZlbnRFbWl0dGVyPE5vZGU+ID0gbmV3IEV2ZW50RW1pdHRlcjxOb2RlPigpO1xuXG4gICAgQEhvc3RMaXN0ZW5lcignY2xpY2snLCBbICckZXZlbnQnIF0pXG4gICAgb25DbGljayhldmVudCkge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB0aGlzLm9wZW5EaWFsb2coKTtcbiAgICB9XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHVibGljIGRpYWxvZ1JlZjogTWF0RGlhbG9nLFxuICAgICAgICBwdWJsaWMgY29udGVudDogQ29udGVudFNlcnZpY2VcbiAgICApIHt9XG5cbiAgICBwcml2YXRlIGdldCBkaWFsb2dDb25maWcoKSB7XG4gICAgICAgIGNvbnN0IHsgRElBTE9HX1dJRFRIOiB3aWR0aCB9ID0gRm9sZGVyQ3JlYXRlRGlyZWN0aXZlO1xuICAgICAgICBjb25zdCB7IHBhcmVudE5vZGVJZCwgdGl0bGU6IGNyZWF0ZVRpdGxlLCBub2RlVHlwZSB9ID0gdGhpcztcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZGF0YTogeyBwYXJlbnROb2RlSWQsIGNyZWF0ZVRpdGxlLCBub2RlVHlwZSB9LFxuICAgICAgICAgICAgd2lkdGg6IGAke3dpZHRofXB4YFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIHByaXZhdGUgb3BlbkRpYWxvZygpOiB2b2lkIHtcbiAgICAgICAgY29uc3QgeyBkaWFsb2dSZWYsIGRpYWxvZ0NvbmZpZywgY29udGVudCB9ID0gdGhpcztcbiAgICAgICAgY29uc3QgZGlhbG9nSW5zdGFuY2UgPSBkaWFsb2dSZWYub3BlbihGb2xkZXJEaWFsb2dDb21wb25lbnQsIGRpYWxvZ0NvbmZpZyk7XG5cbiAgICAgICAgZGlhbG9nSW5zdGFuY2UuY29tcG9uZW50SW5zdGFuY2UuZXJyb3Iuc3Vic2NyaWJlKChlcnJvcikgPT4ge1xuICAgICAgICAgICAgdGhpcy5lcnJvci5lbWl0KGVycm9yKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgZGlhbG9nSW5zdGFuY2UuY29tcG9uZW50SW5zdGFuY2Uuc3VjY2Vzcy5zdWJzY3JpYmUoKG5vZGU6IE5vZGUpID0+IHtcbiAgICAgICAgICAgIHRoaXMuc3VjY2Vzcy5lbWl0KG5vZGUpO1xuICAgICAgICB9KTtcblxuICAgICAgICBkaWFsb2dJbnN0YW5jZS5hZnRlckNsb3NlZCgpLnN1YnNjcmliZSgobm9kZTogTm9kZSkgPT4ge1xuICAgICAgICAgICAgaWYgKG5vZGUpIHtcbiAgICAgICAgICAgICAgICBjb250ZW50LmZvbGRlckNyZWF0ZS5uZXh0KG5vZGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG59XG4iXX0=