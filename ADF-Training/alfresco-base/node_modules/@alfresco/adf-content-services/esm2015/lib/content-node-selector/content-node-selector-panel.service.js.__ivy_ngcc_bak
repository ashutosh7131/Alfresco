import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
export class ContentNodeSelectorPanelService {
    constructor() {
        this.propertyTypes = ['d:text', 'd:date', 'd:datetime'];
        this.modelPropertyTypeToSearchFilterTypeMap = new Map();
        this.modelPropertyTypeToSearchFilterTypeMap.set(this.propertyTypes[0], 'text');
        this.modelPropertyTypeToSearchFilterTypeMap.set(this.propertyTypes[1], 'date-range');
        this.modelPropertyTypeToSearchFilterTypeMap.set(this.propertyTypes[2], 'datetime-range');
    }
    convertCustomModelPropertiesToSearchCategories() {
        var _a;
        const searchConfig = [];
        (_a = this.customModels) === null || _a === void 0 ? void 0 : _a.forEach((propertyModel) => {
            searchConfig.push(this.convertModelPropertyIntoSearchFilter(propertyModel));
        });
        return searchConfig;
    }
    convertModelPropertyIntoSearchFilter(modelProperty) {
        let filterSearch;
        if (this.isTypeSupported(modelProperty.dataType)) {
            filterSearch = {
                id: modelProperty.prefixedName,
                name: modelProperty.prefixedName,
                expanded: false,
                enabled: true,
                component: {
                    selector: this.modelPropertyTypeToSearchFilterTypeMap.get(modelProperty.dataType),
                    settings: {
                        pattern: `${modelProperty.prefixedName}:'(.*?)'`,
                        field: `${modelProperty.prefixedName}`,
                        placeholder: `Enter the ${modelProperty.name}`
                    }
                }
            };
        }
        return filterSearch;
    }
    isTypeSupported(dataType) {
        return this.propertyTypes.includes(dataType);
    }
}
ContentNodeSelectorPanelService.ɵprov = i0.ɵɵdefineInjectable({ factory: function ContentNodeSelectorPanelService_Factory() { return new ContentNodeSelectorPanelService(); }, token: ContentNodeSelectorPanelService, providedIn: "root" });
ContentNodeSelectorPanelService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
ContentNodeSelectorPanelService.ctorParameters = () => [];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udGVudC1ub2RlLXNlbGVjdG9yLXBhbmVsLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiL2hvbWUvdHJhdmlzL2J1aWxkL0FsZnJlc2NvL2FsZnJlc2NvLW5nMi1jb21wb25lbnRzL2xpYi9jb250ZW50LXNlcnZpY2VzL3NyYy8iLCJzb3VyY2VzIjpbImxpYi9jb250ZW50LW5vZGUtc2VsZWN0b3IvY29udGVudC1ub2RlLXNlbGVjdG9yLXBhbmVsLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBaUJBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7O0FBTTNDLE1BQU0sT0FBTywrQkFBK0I7SUFNeEM7UUFKQSxrQkFBYSxHQUFHLENBQUMsUUFBUSxFQUFFLFFBQVEsRUFBRSxZQUFZLENBQUMsQ0FBQztRQUNuRCwyQ0FBc0MsR0FBRyxJQUFJLEdBQUcsRUFBbUIsQ0FBQztRQUloRSxJQUFJLENBQUMsc0NBQXNDLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDL0UsSUFBSSxDQUFDLHNDQUFzQyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxFQUFFLFlBQVksQ0FBQyxDQUFDO1FBQ3JGLElBQUksQ0FBQyxzQ0FBc0MsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDO0lBQzdGLENBQUM7SUFFRCw4Q0FBOEM7O1FBQzFDLE1BQU0sWUFBWSxHQUFxQixFQUFFLENBQUM7UUFDMUMsTUFBQSxJQUFJLENBQUMsWUFBWSwwQ0FBRSxPQUFPLENBQUUsQ0FBQyxhQUFhLEVBQUUsRUFBRTtZQUMxQyxZQUFZLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxvQ0FBb0MsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDO1FBQ2hGLENBQUMsRUFBRTtRQUVILE9BQU8sWUFBWSxDQUFDO0lBQ3hCLENBQUM7SUFFRCxvQ0FBb0MsQ0FBQyxhQUFrQjtRQUNuRCxJQUFJLFlBQTRCLENBQUM7UUFDakMsSUFBSSxJQUFJLENBQUMsZUFBZSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsRUFBRTtZQUM5QyxZQUFZLEdBQUc7Z0JBQ1gsRUFBRSxFQUFHLGFBQWEsQ0FBQyxZQUFZO2dCQUMvQixJQUFJLEVBQUUsYUFBYSxDQUFDLFlBQVk7Z0JBQ2hDLFFBQVEsRUFBRSxLQUFLO2dCQUNmLE9BQU8sRUFBRSxJQUFJO2dCQUNiLFNBQVMsRUFBRTtvQkFDUCxRQUFRLEVBQUUsSUFBSSxDQUFDLHNDQUFzQyxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDO29CQUNqRixRQUFRLEVBQUU7d0JBQ04sT0FBTyxFQUFFLEdBQUcsYUFBYSxDQUFDLFlBQVksVUFBVTt3QkFDaEQsS0FBSyxFQUFFLEdBQUcsYUFBYSxDQUFDLFlBQVksRUFBRTt3QkFDdEMsV0FBVyxFQUFFLGFBQWEsYUFBYSxDQUFDLElBQUksRUFBRTtxQkFDakQ7aUJBQ0o7YUFDSixDQUFDO1NBQ0w7UUFDRCxPQUFPLFlBQVksQ0FBQztJQUN4QixDQUFDO0lBRUQsZUFBZSxDQUFDLFFBQWdCO1FBQzVCLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDakQsQ0FBQzs7OztZQS9DSixVQUFVLFNBQUM7Z0JBQ1IsVUFBVSxFQUFFLE1BQU07YUFDckIiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBTZWFyY2hDYXRlZ29yeSB9IGZyb20gJy4uL3NlYXJjaC9tb2RlbHMvc2VhcmNoLWNhdGVnb3J5LmludGVyZmFjZSc7XG5cbkBJbmplY3RhYmxlKHtcbiAgICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgQ29udGVudE5vZGVTZWxlY3RvclBhbmVsU2VydmljZSB7XG5cbiAgICBwcm9wZXJ0eVR5cGVzID0gWydkOnRleHQnLCAnZDpkYXRlJywgJ2Q6ZGF0ZXRpbWUnXTtcbiAgICBtb2RlbFByb3BlcnR5VHlwZVRvU2VhcmNoRmlsdGVyVHlwZU1hcCA9IG5ldyBNYXA8c3RyaW5nLCBzdHJpbmc+ICgpO1xuICAgIGN1c3RvbU1vZGVsczogYW55W107XG5cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5tb2RlbFByb3BlcnR5VHlwZVRvU2VhcmNoRmlsdGVyVHlwZU1hcC5zZXQodGhpcy5wcm9wZXJ0eVR5cGVzWzBdLCAndGV4dCcpO1xuICAgICAgICB0aGlzLm1vZGVsUHJvcGVydHlUeXBlVG9TZWFyY2hGaWx0ZXJUeXBlTWFwLnNldCh0aGlzLnByb3BlcnR5VHlwZXNbMV0sICdkYXRlLXJhbmdlJyk7XG4gICAgICAgIHRoaXMubW9kZWxQcm9wZXJ0eVR5cGVUb1NlYXJjaEZpbHRlclR5cGVNYXAuc2V0KHRoaXMucHJvcGVydHlUeXBlc1syXSwgJ2RhdGV0aW1lLXJhbmdlJyk7XG4gICAgfVxuXG4gICAgY29udmVydEN1c3RvbU1vZGVsUHJvcGVydGllc1RvU2VhcmNoQ2F0ZWdvcmllcygpOiBTZWFyY2hDYXRlZ29yeVtdIHtcbiAgICAgICAgY29uc3Qgc2VhcmNoQ29uZmlnOiBTZWFyY2hDYXRlZ29yeVtdID0gW107XG4gICAgICAgIHRoaXMuY3VzdG9tTW9kZWxzPy5mb3JFYWNoKCAocHJvcGVydHlNb2RlbCkgPT4ge1xuICAgICAgICAgICAgc2VhcmNoQ29uZmlnLnB1c2godGhpcy5jb252ZXJ0TW9kZWxQcm9wZXJ0eUludG9TZWFyY2hGaWx0ZXIocHJvcGVydHlNb2RlbCkpO1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gc2VhcmNoQ29uZmlnO1xuICAgIH1cblxuICAgIGNvbnZlcnRNb2RlbFByb3BlcnR5SW50b1NlYXJjaEZpbHRlcihtb2RlbFByb3BlcnR5OiBhbnkpOiBTZWFyY2hDYXRlZ29yeSB7XG4gICAgICAgIGxldCBmaWx0ZXJTZWFyY2g6IFNlYXJjaENhdGVnb3J5O1xuICAgICAgICBpZiAodGhpcy5pc1R5cGVTdXBwb3J0ZWQobW9kZWxQcm9wZXJ0eS5kYXRhVHlwZSkpIHtcbiAgICAgICAgICAgIGZpbHRlclNlYXJjaCA9IHtcbiAgICAgICAgICAgICAgICBpZCA6IG1vZGVsUHJvcGVydHkucHJlZml4ZWROYW1lLFxuICAgICAgICAgICAgICAgIG5hbWU6IG1vZGVsUHJvcGVydHkucHJlZml4ZWROYW1lLFxuICAgICAgICAgICAgICAgIGV4cGFuZGVkOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBlbmFibGVkOiB0cnVlLFxuICAgICAgICAgICAgICAgIGNvbXBvbmVudDoge1xuICAgICAgICAgICAgICAgICAgICBzZWxlY3RvcjogdGhpcy5tb2RlbFByb3BlcnR5VHlwZVRvU2VhcmNoRmlsdGVyVHlwZU1hcC5nZXQobW9kZWxQcm9wZXJ0eS5kYXRhVHlwZSksXG4gICAgICAgICAgICAgICAgICAgIHNldHRpbmdzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwYXR0ZXJuOiBgJHttb2RlbFByb3BlcnR5LnByZWZpeGVkTmFtZX06JyguKj8pJ2AsXG4gICAgICAgICAgICAgICAgICAgICAgICBmaWVsZDogYCR7bW9kZWxQcm9wZXJ0eS5wcmVmaXhlZE5hbWV9YCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiBgRW50ZXIgdGhlICR7bW9kZWxQcm9wZXJ0eS5uYW1lfWBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZpbHRlclNlYXJjaDtcbiAgICB9XG5cbiAgICBpc1R5cGVTdXBwb3J0ZWQoZGF0YVR5cGU6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5wcm9wZXJ0eVR5cGVzLmluY2x1ZGVzKGRhdGFUeXBlKTtcbiAgICB9XG5cbn1cbiJdfQ==