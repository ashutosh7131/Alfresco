import { MatDialog } from '@angular/material/dialog';
import { EventEmitter, Injectable, Output } from '@angular/core';
import { ContentService, ThumbnailService, SitesService, TranslationService, AllowableOperationsEnum } from '@alfresco/adf-core';
import { Subject, throwError } from 'rxjs';
import { DocumentListService } from '../document-list/services/document-list.service';
import { ContentNodeSelectorComponent } from './content-node-selector.component';
import { NodeAction } from '../document-list/models/node-action.enum';
import { NodeLockDialogComponent } from '../dialogs/node-lock.dialog';
import { switchMap } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@angular/material/dialog";
import * as i2 from "@alfresco/adf-core";
import * as i3 from "../document-list/services/document-list.service";
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/material/dialog';
import * as ɵngcc2 from '@alfresco/adf-core';
import * as ɵngcc3 from '../document-list/services/document-list.service';
export class ContentNodeDialogService {
    constructor(dialog, contentService, documentListService, siteService, translation, thumbnailService) {
        this.dialog = dialog;
        this.contentService = contentService;
        this.documentListService = documentListService;
        this.siteService = siteService;
        this.translation = translation;
        this.thumbnailService = thumbnailService;
        this.error = new EventEmitter();
    }
    openFileBrowseDialogByFolderId(folderNodeId) {
        return this.documentListService.getFolderNode(folderNodeId).pipe(switchMap((nodeEntry) => {
            return this.openUploadFileDialog(NodeAction.CHOOSE, nodeEntry.entry, true);
        }));
    }
    openLockNodeDialog(contentEntry) {
        const observable = new Subject();
        if (this.contentService.hasAllowableOperations(contentEntry, AllowableOperationsEnum.LOCK)) {
            this.dialog.open(NodeLockDialogComponent, {
                data: {
                    node: contentEntry,
                    onError: (error) => {
                        this.error.emit(error);
                        observable.error(error);
                    }
                },
                width: '400px'
            });
        }
        else {
            observable.error('OPERATION.FAIL.NODE.NO_PERMISSION');
        }
        return observable;
    }
    openFileBrowseDialogBySite() {
        return this.siteService.getSites().pipe(switchMap((response) => {
            return this.openFileBrowseDialogByFolderId(response.list.entries[0].entry.guid);
        }));
    }
    openFileBrowseDialogByDefaultLocation() {
        return this.openFileBrowseDialogByFolderId('-my-');
    }
    openFolderBrowseDialogBySite() {
        return this.openFolderBrowseDialogByFolderId('-my-');
    }
    openFolderBrowseDialogByFolderId(folderNodeId) {
        return this.documentListService.getFolderNode(folderNodeId).pipe(switchMap((node) => {
            return this.openUploadFolderDialog(NodeAction.CHOOSE, node.entry);
        }));
    }
    openCopyMoveDialog(action, contentEntry, permission, excludeSiteContent) {
        if (this.contentService.hasAllowableOperations(contentEntry, permission)) {
            const select = new Subject();
            const data = {
                title: this.getTitleTranslation(action, contentEntry.name),
                actionName: action,
                selectionMode: 'single',
                currentFolderId: contentEntry.parentId,
                imageResolver: this.imageResolver.bind(this),
                where: '(isFolder=true)',
                isSelectionValid: this.isCopyMoveSelectionValid.bind(this),
                excludeSiteContent: excludeSiteContent || ContentNodeDialogService.nonDocumentSiteContent,
                select: select
            };
            const dialogRef = this.openContentNodeDialog(data, 'adf-content-node-selector-dialog', '630px');
            dialogRef.afterClosed().subscribe({ next: () => select.complete() });
            return select;
        }
        else {
            const errors = new Error(JSON.stringify({ error: { statusCode: 403 } }));
            return throwError(errors);
        }
    }
    getTitleTranslation(action, name) {
        return this.translation.instant(`NODE_SELECTOR.${action.toUpperCase()}_ITEM`, { name });
    }
    openUploadFolderDialog(action, contentEntry) {
        const select = new Subject();
        const data = {
            title: this.getTitleTranslation(action, this.translation.instant('DROPDOWN.MY_FILES_OPTION')),
            actionName: action,
            selectionMode: 'single',
            currentFolderId: contentEntry.id,
            imageResolver: this.imageResolver.bind(this),
            isSelectionValid: this.hasAllowableOperationsOnNodeFolder.bind(this),
            where: '(isFolder=true)',
            select: select
        };
        const dialogRef = this.openContentNodeDialog(data, 'adf-content-node-selector-dialog', '630px');
        dialogRef.afterClosed().subscribe({ next: () => select.complete() });
        return select;
    }
    openUploadFileDialog(action, contentEntry, showFilesInResult = false) {
        const select = new Subject();
        const data = {
            title: this.getTitleTranslation(action, this.translation.instant('DROPDOWN.MY_FILES_OPTION')),
            actionName: action,
            selectionMode: 'single',
            currentFolderId: contentEntry.id,
            imageResolver: this.imageResolver.bind(this),
            isSelectionValid: (entry) => entry.isFile,
            select: select,
            showFilesInResult
        };
        const dialogRef = this.openContentNodeDialog(data, 'adf-content-node-selector-dialog', '630px');
        dialogRef.afterClosed().subscribe({ next: () => select.complete() });
        return select;
    }
    openContentNodeDialog(data, panelClass, width) {
        return this.dialog.open(ContentNodeSelectorComponent, {
            data,
            panelClass,
            width,
            disableClose: true
        });
    }
    imageResolver(row) {
        const entry = row.node.entry;
        if (!this.contentService.hasAllowableOperations(entry, 'create')) {
            if (this.isNodeFolder(entry)) {
                return this.thumbnailService.getMimeTypeIcon('disable/folder');
            }
        }
        return null;
    }
    hasAllowableOperationsOnNodeFolder(entry) {
        return this.isNodeFolder(entry) && this.contentService.hasAllowableOperations(entry, 'create');
    }
    isNodeFolder(entry) {
        return entry.isFolder;
    }
    isCopyMoveSelectionValid(entry) {
        return this.hasEntityCreatePermission(entry) && !this.isSite(entry);
    }
    hasEntityCreatePermission(entry) {
        return this.contentService.hasAllowableOperations(entry, 'create');
    }
    isSite(entry) {
        return !!entry.guid || entry.nodeType === 'st:site' || entry.nodeType === 'st:sites';
    }
}
ContentNodeDialogService.ɵfac = function ContentNodeDialogService_Factory(t) { return new (t || ContentNodeDialogService)(ɵngcc0.ɵɵinject(ɵngcc1.MatDialog), ɵngcc0.ɵɵinject(ɵngcc2.ContentService), ɵngcc0.ɵɵinject(ɵngcc3.DocumentListService), ɵngcc0.ɵɵinject(ɵngcc2.SitesService), ɵngcc0.ɵɵinject(ɵngcc2.TranslationService), ɵngcc0.ɵɵinject(ɵngcc2.ThumbnailService)); };
ContentNodeDialogService.nonDocumentSiteContent = [
    'blog',
    'calendar',
    'dataLists',
    'discussions',
    'links',
    'wiki'
];
ContentNodeDialogService.ɵprov = i0.ɵɵdefineInjectable({ factory: function ContentNodeDialogService_Factory() { return new ContentNodeDialogService(i0.ɵɵinject(i1.MatDialog), i0.ɵɵinject(i2.ContentService), i0.ɵɵinject(i3.DocumentListService), i0.ɵɵinject(i2.SitesService), i0.ɵɵinject(i2.TranslationService), i0.ɵɵinject(i2.ThumbnailService)); }, token: ContentNodeDialogService, providedIn: "root" });
ContentNodeDialogService.ctorParameters = () => [
    { type: MatDialog },
    { type: ContentService },
    { type: DocumentListService },
    { type: SitesService },
    { type: TranslationService },
    { type: ThumbnailService }
];
ContentNodeDialogService.propDecorators = {
    error: [{ type: Output }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ContentNodeDialogService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc1.MatDialog }, { type: ɵngcc2.ContentService }, { type: ɵngcc3.DocumentListService }, { type: ɵngcc2.SitesService }, { type: ɵngcc2.TranslationService }, { type: ɵngcc2.ThumbnailService }]; }, { error: [{
            type: Output
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,