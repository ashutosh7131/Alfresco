import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
import * as ɵngcc0 from '@angular/core';
export class ContentNodeSelectorPanelService {
    constructor() {
        this.propertyTypes = ['d:text', 'd:date', 'd:datetime'];
        this.modelPropertyTypeToSearchFilterTypeMap = new Map();
        this.modelPropertyTypeToSearchFilterTypeMap.set(this.propertyTypes[0], 'text');
        this.modelPropertyTypeToSearchFilterTypeMap.set(this.propertyTypes[1], 'date-range');
        this.modelPropertyTypeToSearchFilterTypeMap.set(this.propertyTypes[2], 'datetime-range');
    }
    convertCustomModelPropertiesToSearchCategories() {
        var _a;
        const searchConfig = [];
        (_a = this.customModels) === null || _a === void 0 ? void 0 : _a.forEach((propertyModel) => {
            searchConfig.push(this.convertModelPropertyIntoSearchFilter(propertyModel));
        });
        return searchConfig;
    }
    convertModelPropertyIntoSearchFilter(modelProperty) {
        let filterSearch;
        if (this.isTypeSupported(modelProperty.dataType)) {
            filterSearch = {
                id: modelProperty.prefixedName,
                name: modelProperty.prefixedName,
                expanded: false,
                enabled: true,
                component: {
                    selector: this.modelPropertyTypeToSearchFilterTypeMap.get(modelProperty.dataType),
                    settings: {
                        pattern: `${modelProperty.prefixedName}:'(.*?)'`,
                        field: `${modelProperty.prefixedName}`,
                        placeholder: `Enter the ${modelProperty.name}`
                    }
                }
            };
        }
        return filterSearch;
    }
    isTypeSupported(dataType) {
        return this.propertyTypes.includes(dataType);
    }
}
ContentNodeSelectorPanelService.ɵfac = function ContentNodeSelectorPanelService_Factory(t) { return new (t || ContentNodeSelectorPanelService)(); };
ContentNodeSelectorPanelService.ɵprov = i0.ɵɵdefineInjectable({ factory: function ContentNodeSelectorPanelService_Factory() { return new ContentNodeSelectorPanelService(); }, token: ContentNodeSelectorPanelService, providedIn: "root" });
ContentNodeSelectorPanelService.ctorParameters = () => [];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ContentNodeSelectorPanelService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return []; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udGVudC1ub2RlLXNlbGVjdG9yLXBhbmVsLnNlcnZpY2UuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL2hvbWUvdHJhdmlzL2J1aWxkL0FsZnJlc2NvL2FsZnJlc2NvLW5nMi1jb21wb25lbnRzL2xpYi9jb250ZW50LXNlcnZpY2VzL3NyYy9saWIvY29udGVudC1ub2RlLXNlbGVjdG9yL2NvbnRlbnQtbm9kZS1zZWxlY3Rvci1wYW5lbC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWlCQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDOztBQUtBLE1BQU0sT0FBTywrQkFBK0I7QUFDNUMsSUFLSTtBQUNKLFFBTEksa0JBQWEsR0FBRyxDQUFDLFFBQVEsRUFBRSxRQUFRLEVBQUUsWUFBWSxDQUFDLENBQUM7QUFDdkQsUUFBSSwyQ0FBc0MsR0FBRyxJQUFJLEdBQUcsRUFBbUIsQ0FBQztBQUN4RSxRQUdRLElBQUksQ0FBQyxzQ0FBc0MsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQztBQUN2RixRQUFRLElBQUksQ0FBQyxzQ0FBc0MsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsRUFBRSxZQUFZLENBQUMsQ0FBQztBQUM3RixRQUFRLElBQUksQ0FBQyxzQ0FBc0MsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDO0FBQ2pHLElBQUksQ0FBQztBQUNMLElBQ0ksOENBQThDO0FBQUs7QUFBZ0IsUUFDL0QsTUFBTSxZQUFZLEdBQXFCLEVBQUUsQ0FBQztBQUNsRCxRQUFRLE1BQUEsSUFBSSxDQUFDLFlBQVksMENBQUUsT0FBTyxDQUFFLENBQUMsYUFBYSxFQUFFLEVBQUU7QUFDdEQsWUFBWSxZQUFZLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxvQ0FBb0MsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDO0FBQ3hGLFFBQVEsQ0FBQyxFQUFFO0FBQ1gsUUFDUSxPQUFPLFlBQVksQ0FBQztBQUM1QixJQUFJLENBQUM7QUFDTCxJQUNJLG9DQUFvQyxDQUFDLGFBQWtCO0FBQUksUUFDdkQsSUFBSSxZQUE0QixDQUFDO0FBQ3pDLFFBQVEsSUFBSSxJQUFJLENBQUMsZUFBZSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsRUFBRTtBQUMxRCxZQUFZLFlBQVksR0FBRztBQUMzQixnQkFBZ0IsRUFBRSxFQUFHLGFBQWEsQ0FBQyxZQUFZO0FBQy9DLGdCQUFnQixJQUFJLEVBQUUsYUFBYSxDQUFDLFlBQVk7QUFDaEQsZ0JBQWdCLFFBQVEsRUFBRSxLQUFLO0FBQy9CLGdCQUFnQixPQUFPLEVBQUUsSUFBSTtBQUM3QixnQkFBZ0IsU0FBUyxFQUFFO0FBQzNCLG9CQUFvQixRQUFRLEVBQUUsSUFBSSxDQUFDLHNDQUFzQyxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDO0FBQ3JHLG9CQUFvQixRQUFRLEVBQUU7QUFDOUIsd0JBQXdCLE9BQU8sRUFBRSxHQUFHLGFBQWEsQ0FBQyxZQUFZLFVBQVU7QUFDeEUsd0JBQXdCLEtBQUssRUFBRSxHQUFHLGFBQWEsQ0FBQyxZQUFZLEVBQUU7QUFDOUQsd0JBQXdCLFdBQVcsRUFBRSxhQUFhLGFBQWEsQ0FBQyxJQUFJLEVBQUU7QUFDdEUscUJBQXFCO0FBQ3JCLGlCQUFpQjtBQUNqQixhQUFhLENBQUM7QUFDZCxTQUFTO0FBQ1QsUUFBUSxPQUFPLFlBQVksQ0FBQztBQUM1QixJQUFJLENBQUM7QUFDTCxJQUNJLGVBQWUsQ0FBQyxRQUFnQjtBQUFJLFFBQ2hDLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDckQsSUFBSSxDQUFDO0FBQ0w7b0pBQ0E7QUFBQyw2T0E5Q0k7QUFBQztBQUhMLFVBQVUsU0FBQyxrQkFDUixVQUFVLEVBQUUsTUFBTSxjQUNyQjs7Ozs7Z0RBR2U7QUFBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFNlYXJjaENhdGVnb3J5IH0gZnJvbSAnLi4vc2VhcmNoL21vZGVscy9zZWFyY2gtY2F0ZWdvcnkuaW50ZXJmYWNlJztcblxuQEluamVjdGFibGUoe1xuICAgIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBDb250ZW50Tm9kZVNlbGVjdG9yUGFuZWxTZXJ2aWNlIHtcblxuICAgIHByb3BlcnR5VHlwZXMgPSBbJ2Q6dGV4dCcsICdkOmRhdGUnLCAnZDpkYXRldGltZSddO1xuICAgIG1vZGVsUHJvcGVydHlUeXBlVG9TZWFyY2hGaWx0ZXJUeXBlTWFwID0gbmV3IE1hcDxzdHJpbmcsIHN0cmluZz4gKCk7XG4gICAgY3VzdG9tTW9kZWxzOiBhbnlbXTtcblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLm1vZGVsUHJvcGVydHlUeXBlVG9TZWFyY2hGaWx0ZXJUeXBlTWFwLnNldCh0aGlzLnByb3BlcnR5VHlwZXNbMF0sICd0ZXh0Jyk7XG4gICAgICAgIHRoaXMubW9kZWxQcm9wZXJ0eVR5cGVUb1NlYXJjaEZpbHRlclR5cGVNYXAuc2V0KHRoaXMucHJvcGVydHlUeXBlc1sxXSwgJ2RhdGUtcmFuZ2UnKTtcbiAgICAgICAgdGhpcy5tb2RlbFByb3BlcnR5VHlwZVRvU2VhcmNoRmlsdGVyVHlwZU1hcC5zZXQodGhpcy5wcm9wZXJ0eVR5cGVzWzJdLCAnZGF0ZXRpbWUtcmFuZ2UnKTtcbiAgICB9XG5cbiAgICBjb252ZXJ0Q3VzdG9tTW9kZWxQcm9wZXJ0aWVzVG9TZWFyY2hDYXRlZ29yaWVzKCk6IFNlYXJjaENhdGVnb3J5W10ge1xuICAgICAgICBjb25zdCBzZWFyY2hDb25maWc6IFNlYXJjaENhdGVnb3J5W10gPSBbXTtcbiAgICAgICAgdGhpcy5jdXN0b21Nb2RlbHM/LmZvckVhY2goIChwcm9wZXJ0eU1vZGVsKSA9PiB7XG4gICAgICAgICAgICBzZWFyY2hDb25maWcucHVzaCh0aGlzLmNvbnZlcnRNb2RlbFByb3BlcnR5SW50b1NlYXJjaEZpbHRlcihwcm9wZXJ0eU1vZGVsKSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBzZWFyY2hDb25maWc7XG4gICAgfVxuXG4gICAgY29udmVydE1vZGVsUHJvcGVydHlJbnRvU2VhcmNoRmlsdGVyKG1vZGVsUHJvcGVydHk6IGFueSk6IFNlYXJjaENhdGVnb3J5IHtcbiAgICAgICAgbGV0IGZpbHRlclNlYXJjaDogU2VhcmNoQ2F0ZWdvcnk7XG4gICAgICAgIGlmICh0aGlzLmlzVHlwZVN1cHBvcnRlZChtb2RlbFByb3BlcnR5LmRhdGFUeXBlKSkge1xuICAgICAgICAgICAgZmlsdGVyU2VhcmNoID0ge1xuICAgICAgICAgICAgICAgIGlkIDogbW9kZWxQcm9wZXJ0eS5wcmVmaXhlZE5hbWUsXG4gICAgICAgICAgICAgICAgbmFtZTogbW9kZWxQcm9wZXJ0eS5wcmVmaXhlZE5hbWUsXG4gICAgICAgICAgICAgICAgZXhwYW5kZWQ6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgY29tcG9uZW50OiB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdG9yOiB0aGlzLm1vZGVsUHJvcGVydHlUeXBlVG9TZWFyY2hGaWx0ZXJUeXBlTWFwLmdldChtb2RlbFByb3BlcnR5LmRhdGFUeXBlKSxcbiAgICAgICAgICAgICAgICAgICAgc2V0dGluZ3M6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhdHRlcm46IGAke21vZGVsUHJvcGVydHkucHJlZml4ZWROYW1lfTonKC4qPyknYCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpZWxkOiBgJHttb2RlbFByb3BlcnR5LnByZWZpeGVkTmFtZX1gLFxuICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6IGBFbnRlciB0aGUgJHttb2RlbFByb3BlcnR5Lm5hbWV9YFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmlsdGVyU2VhcmNoO1xuICAgIH1cblxuICAgIGlzVHlwZVN1cHBvcnRlZChkYXRhVHlwZTogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLnByb3BlcnR5VHlwZXMuaW5jbHVkZXMoZGF0YVR5cGUpO1xuICAgIH1cblxufVxuIl19