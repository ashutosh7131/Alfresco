/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, EventEmitter, Input, Output, ViewChild, ViewEncapsulation, Inject } from '@angular/core';
import { HighlightDirective, UserPreferencesService, UserPreferenceValues, InfinitePaginationComponent, NodesApiService, SitesService, UploadService, AppConfigService, ShowHeaderMode } from '@alfresco/adf-core';
import { FormControl } from '@angular/forms';
import { Pagination, SiteEntry, SitePaging } from '@alfresco/js-api';
import { DocumentListComponent } from '../document-list/components/document-list.component';
import { debounceTime, takeUntil } from 'rxjs/operators';
import { CustomResourcesService } from '../document-list/services/custom-resources.service';
import { Subject } from 'rxjs';
import { SEARCH_QUERY_SERVICE_TOKEN } from '../search/search-query-service.token';
import { SearchQueryBuilderService } from '../search/services/search-query-builder.service';
import { ContentNodeSelectorPanelService } from './content-node-selector-panel.service';
export const defaultValidation = () => true;
export class ContentNodeSelectorPanelComponent {
    constructor(customResourcesService, queryBuilderService, userPreferencesService, nodesApiService, uploadService, sitesService, appConfigService, contentNodeSelectorPanelService) {
        this.customResourcesService = customResourcesService;
        this.queryBuilderService = queryBuilderService;
        this.userPreferencesService = userPreferencesService;
        this.nodesApiService = nodesApiService;
        this.uploadService = uploadService;
        this.sitesService = sitesService;
        this.appConfigService = appConfigService;
        this.contentNodeSelectorPanelService = contentNodeSelectorPanelService;
        this.DEFAULT_PAGINATION = new Pagination({
            maxItems: 25,
            skipCount: 0
        });
        this.showSiteList = true;
        this.showSearchField = true;
        this.showCounter = false;
        this.restrictRootToCurrentFolderId = false;
        this.currentFolderId = null;
        this.dropdownHideMyFiles = false;
        this.dropdownSiteList = null;
        this._rowFilter = defaultValidation;
        this._excludeSiteContent = [];
        this.imageResolver = null;
        this.pageSize = this.DEFAULT_PAGINATION.maxItems;
        this.selectionMode = 'single';
        this.isSelectionValid = defaultValidation;
        this.select = new EventEmitter();
        this.navigationChange = new EventEmitter();
        this.siteChange = new EventEmitter();
        this.showingSearch = new EventEmitter();
        this.currentFolder = new EventEmitter();
        this.folderLoaded = new EventEmitter();
        this.nodePaging = null;
        this.searchTerm = '';
        this.showingSearchResults = false;
        this.loadingSearchResults = false;
        this.inDialog = false;
        this._chosenNode = null;
        this.selectionWithoutValidation = null;
        this.folderIdToShow = null;
        this.breadcrumbFolderTitle = null;
        this.startSiteGuid = null;
        this.hasValidQuery = false;
        this.showHeader = ShowHeaderMode.Never;
        this.infiniteScroll = false;
        this.debounceSearch = 200;
        this.searchInput = new FormControl();
        this.preselectedNodes = [];
        this.currentUploadBatch = [];
        this.searchPanelExpanded = false;
        this.onDestroy$ = new Subject();
    }
    set rowFilter(rowFilter) {
        this.createRowFilter(rowFilter);
    }
    get rowFilter() {
        return this._rowFilter;
    }
    set excludeSiteContent(excludeSiteContent) {
        this._excludeSiteContent = excludeSiteContent;
        this.createRowFilter(this._rowFilter);
    }
    get excludeSiteContent() {
        return this._excludeSiteContent;
    }
    set showSearch(value) {
        if (value !== undefined && value !== null) {
            this.showSearchField = value;
        }
    }
    get showSearch() {
        return this.showSearchField;
    }
    set showDropdownSiteList(value) {
        if (value !== undefined && value !== null) {
            this.showSiteList = value;
        }
    }
    get showDropdownSiteList() {
        return this.showSiteList;
    }
    set showFilesInResult(value) {
        if (value !== undefined && value !== null) {
            const showFilesQuery = `TYPE:'cm:folder'${value ? " OR TYPE:'cm:content'" : ''}`;
            this.queryBuilderService.addFilterQuery(showFilesQuery);
        }
    }
    set showNodeCounter(value) {
        this.showCounter = value !== null && value !== void 0 ? value : false;
    }
    get showNodeCounter() {
        return this.showCounter;
    }
    set chosenNode(value) {
        this._chosenNode = value;
        this.select.next(value);
    }
    get chosenNode() {
        return this._chosenNode;
    }
    getSelectedCount() {
        var _a;
        return ((_a = this.chosenNode) === null || _a === void 0 ? void 0 : _a.length) || 0;
    }
    ngOnInit() {
        this.searchInput.valueChanges
            .pipe(debounceTime(this.debounceSearch), takeUntil(this.onDestroy$))
            .subscribe((searchValue) => {
            this.searchTerm = searchValue;
            this.queryBuilderService.userQuery = searchValue.length > 0 ? `${searchValue}*` : searchValue;
            this.queryBuilderService.update();
        });
        this.queryBuilderService.updated
            .pipe(takeUntil(this.onDestroy$))
            .subscribe((queryBody) => {
            if (queryBody) {
                this.hasValidQuery = true;
                this.prepareDialogForNewSearch(queryBody);
                this.queryBuilderService.execute(queryBody);
            }
            else {
                this.hasValidQuery = false;
                this.resetFolderToShow();
                this.clearSearch();
            }
        });
        this.queryBuilderService.executed
            .pipe(takeUntil(this.onDestroy$))
            .subscribe((results) => {
            if (this.hasValidQuery) {
                this.showSearchResults(results);
            }
        });
        this.userPreferencesService
            .select(UserPreferenceValues.PaginationSize)
            .pipe(takeUntil(this.onDestroy$))
            .subscribe(pagSize => this.pageSize = pagSize);
        this.target = this.documentList;
        this.folderIdToShow = this.currentFolderId;
        if (this.currentFolderId) {
            if (this.restrictRootToCurrentFolderId) {
                this.breadcrumbRootId = this.currentFolderId;
                this.siteId = this.currentFolderId;
            }
            else {
                this.getStartSite();
            }
        }
        this.breadcrumbTransform = this.breadcrumbTransform ? this.breadcrumbTransform : null;
        this.isSelectionValid = this.isSelectionValid ? this.isSelectionValid : defaultValidation;
        this.onFileUploadEvent();
        this.onFileUploadDeletedEvent();
        this.resetPagination();
        this.setSearchScopeToNodes();
        this.documentList.$folderNode
            .pipe(takeUntil(this.onDestroy$))
            .subscribe((currentNode) => {
            this.currentFolder.emit(currentNode);
        });
        this.sorting = this.appConfigService.get('adf-content-node-selector.sorting', ['createdAt', 'desc']);
    }
    ngOnDestroy() {
        this.onDestroy$.next(true);
        this.onDestroy$.complete();
    }
    toggleSearchPanel() {
        this.searchPanelExpanded = !this.searchPanelExpanded;
    }
    hasCustomModels() {
        var _a, _b;
        return ((_b = (_a = this.contentNodeSelectorPanelService) === null || _a === void 0 ? void 0 : _a.customModels) === null || _b === void 0 ? void 0 : _b.length) > 0;
    }
    onFileUploadEvent() {
        this.uploadService.fileUploadComplete
            .pipe(debounceTime(500), takeUntil(this.onDestroy$))
            .subscribe((fileUploadEvent) => {
            this.currentUploadBatch.push(fileUploadEvent.data);
            if (!this.uploadService.isUploading()) {
                this.preselectedNodes = this.getPreselectNodesBasedOnSelectionMode();
                this.currentUploadBatch = [];
                this.documentList.reloadWithoutResettingSelection();
            }
        });
    }
    onFileUploadDeletedEvent() {
        this.uploadService.fileUploadDeleted
            .pipe(takeUntil(this.onDestroy$))
            .subscribe((deletedFileEvent) => {
            this.documentList.unselectRowFromNodeId(deletedFileEvent.file.data.entry.id);
            this.documentList.reloadWithoutResettingSelection();
        });
    }
    getStartSite() {
        this.nodesApiService.getNode(this.currentFolderId).subscribe((startNodeEntry) => {
            this.startSiteGuid = this.sitesService.getSiteNameFromNodePath(startNodeEntry);
            if (this.startSiteGuid) {
                this.sitesService.getSite(this.startSiteGuid).subscribe((startSiteEntry) => {
                    if (startSiteEntry instanceof SiteEntry) {
                        this.siteChange.emit(startSiteEntry.entry.title);
                    }
                });
            }
        });
    }
    createRowFilter(filter) {
        if (!filter) {
            filter = () => true;
        }
        this._rowFilter = (value, index, array) => {
            return filter(value, index, array) &&
                !this.isExcludedSiteContent(value);
        };
    }
    isExcludedSiteContent(row) {
        const entry = row.node.entry;
        if (this._excludeSiteContent && this._excludeSiteContent.length &&
            entry &&
            entry.properties &&
            entry.properties['st:componentId']) {
            const excludedItem = this._excludeSiteContent.find((id) => entry.properties['st:componentId'] === id);
            return !!excludedItem;
        }
        return false;
    }
    siteChanged(chosenSite) {
        this.siteId = chosenSite.entry.guid;
        this.setTitleIfCustomSite(chosenSite);
        this.siteChange.emit(chosenSite.entry.title);
        this.queryBuilderService.update();
    }
    get breadcrumbFolderNode() {
        var _a;
        let folderNode;
        if (this.showingSearchResults && ((_a = this.selectionWithoutValidation) === null || _a === void 0 ? void 0 : _a.length)) {
            folderNode = this.selectionWithoutValidation[0];
        }
        else {
            folderNode = this.documentList.folderNode;
        }
        return folderNode;
    }
    prepareDialogForNewSearch(queryBody) {
        this.target = queryBody ? null : this.documentList;
        if (this.target) {
            this.infinitePaginationComponent.reset();
        }
        this.folderIdToShow = null;
        this.preselectedNodes = [];
        this.loadingSearchResults = true;
        this.addCorrespondingNodeIdsQuery();
        this.resetChosenNode();
    }
    clear() {
        this.searchTerm = '';
        this.queryBuilderService.userQuery = '';
        this.queryBuilderService.update();
    }
    resetFolderToShow() {
        this.folderIdToShow = this.siteId || this.currentFolderId;
    }
    clearSearch() {
        this.searchTerm = '';
        this.nodePaging = null;
        this.resetPagination();
        this.resetChosenNode();
        this.showingSearchResults = false;
        this.showingSearch.emit(this.showingSearchResults);
    }
    addCorrespondingNodeIdsQuery() {
        let extraParentFiltering = '';
        if (this.customResourcesService.hasCorrespondingNodeIds(this.siteId)) {
            this.customResourcesService.getCorrespondingNodeIds(this.siteId)
                .subscribe((nodeIds) => {
                if (nodeIds && nodeIds.length) {
                    nodeIds
                        .filter((id) => id !== this.siteId)
                        .forEach((extraId) => {
                        extraParentFiltering += ` OR ANCESTOR:'workspace://SpacesStore/${extraId}'`;
                    });
                }
                const parentFiltering = this.siteId ? `ANCESTOR:'workspace://SpacesStore/${this.siteId}'${extraParentFiltering}` : '';
                this.queryBuilderService.addFilterQuery(parentFiltering);
            });
        }
        else {
            const parentFiltering = this.siteId ? `ANCESTOR:'workspace://SpacesStore/${this.siteId}'` : '';
            this.queryBuilderService.addFilterQuery(parentFiltering);
        }
    }
    setSearchScopeToNodes() {
        const scope = {
            locations: 'nodes'
        };
        this.queryBuilderService.setScope(scope);
    }
    showSearchResults(results) {
        this.showingSearchResults = true;
        this.loadingSearchResults = false;
        this.showingSearch.emit(this.showingSearchResults);
        this.nodePaging = results;
    }
    onFolderChange($event) {
        this.folderIdToShow = $event.value.id;
        this.showingSearchResults = false;
        this.infiniteScroll = false;
        this.breadcrumbFolderTitle = null;
        this.preselectedNodes = [];
        this.clearSearch();
        this.navigationChange.emit($event);
    }
    onFolderLoaded(nodePaging) {
        this.updatePaginationAfterRowFilter(nodePaging);
        if (!this.showingSearchResults) {
            this.attemptNodeSelection(this.documentList.folderNode);
        }
        this.folderLoaded.emit();
    }
    updatePaginationAfterRowFilter(nodePaging) {
        if (this.documentList.data.getRows().length < nodePaging.list.pagination.maxItems) {
            nodePaging.list.pagination.hasMoreItems = false;
        }
    }
    showBreadcrumbs() {
        return !this.showingSearchResults || this.chosenNode;
    }
    getNextPageOfSearch(pagination) {
        this.infiniteScroll = true;
        this.queryBuilderService.paging.maxItems = pagination.maxItems;
        this.queryBuilderService.paging.skipCount = pagination.skipCount;
        if (this.searchTerm.length > 0) {
            this.queryBuilderService.update();
        }
    }
    attemptNodeSelection(entry) {
        if (entry && this.isSelectionValid(entry)) {
            this.chosenNode = [entry];
        }
    }
    resetChosenNode() {
        this.chosenNode = null;
    }
    onCurrentSelection(nodesEntries) {
        const validNodesEntity = nodesEntries.filter((node) => this.isSelectionValid(node.entry));
        this.chosenNode = validNodesEntity.map((node) => node.entry);
        this.selectionWithoutValidation = nodesEntries.map(node => node.entry);
    }
    setTitleIfCustomSite(site) {
        if (this.customResourcesService.isCustomSource(site.entry.guid)) {
            this.breadcrumbFolderTitle = site.entry.title;
            if (this.documentList.folderNode.path.elements) {
                this.breadcrumbFolderNode.name = site.entry.title;
                this.documentList.folderNode.path.elements = null;
            }
        }
        else {
            this.breadcrumbFolderTitle = null;
        }
    }
    hasPreselectNodes() {
        var _a;
        return ((_a = this.preselectedNodes) === null || _a === void 0 ? void 0 : _a.length) > 0;
    }
    isSingleSelectionMode() {
        return this.selectionMode === 'single';
    }
    getPreselectNodesBasedOnSelectionMode() {
        var _a;
        let selectedNodes = [];
        if ((_a = this.currentUploadBatch) === null || _a === void 0 ? void 0 : _a.length) {
            if (this.isSingleSelectionMode()) {
                selectedNodes = [this.currentUploadBatch[this.currentUploadBatch.length - 1]];
            }
            else {
                selectedNodes = this.currentUploadBatch;
            }
        }
        return selectedNodes;
    }
    resetPagination() {
        this.queryBuilderService.paging = {
            maxItems: this.pageSize,
            skipCount: this.DEFAULT_PAGINATION.skipCount
        };
    }
}
ContentNodeSelectorPanelComponent.decorators = [
    { type: Component, args: [{
                selector: 'adf-content-node-selector-panel',
                template: "<div class=\"adf-content-node-selector-content\">\n    <mat-form-field floatPlaceholder=\"never\" class=\"adf-content-node-selector-content-input\" *ngIf=\"showSearch\">\n        <input matInput\n            id=\"searchInput\"\n            [formControl]=\"searchInput\"\n            type=\"text\"\n            placeholder=\"{{'NODE_SELECTOR.SEARCH' | translate}}\"\n            [value]=\"searchTerm\"\n            data-automation-id=\"content-node-selector-search-input\">\n\n        <mat-icon *ngIf=\"searchTerm.length > 0\"\n            matSuffix (click)=\"clear()\"\n            class=\"adf-content-node-selector-content-input-icon\"\n            data-automation-id=\"content-node-selector-search-clear\">clear\n        </mat-icon>\n\n        <mat-icon *ngIf=\"searchTerm.length === 0\"\n            matSuffix\n            class=\"adf-content-node-selector-content-input-icon\"\n            data-automation-id=\"content-node-selector-search-icon\">search\n        </mat-icon>\n\n    </mat-form-field>\n    <adf-sites-dropdown\n        *ngIf=\"showDropdownSiteList\"\n        class=\"full-width\"\n        (change)=\"siteChanged($event)\"\n        [placeholder]=\"'NODE_SELECTOR.SELECT_LOCATION'\"\n        [hideMyFiles]=\"dropdownHideMyFiles\"\n        [siteList]=\"dropdownSiteList\"\n        [value]=\"startSiteGuid\"\n        data-automation-id=\"content-node-selector-sites-combo\">\n    </adf-sites-dropdown>\n    <button *ngIf=\"hasCustomModels()\"\n        data-automation-id=\"adf-toggle-search-panel-button\"\n        mat-icon-button\n        (click)=\"toggleSearchPanel()\">\n        <mat-icon>filter_list</mat-icon>\n        {{ 'SEARCH.SEARCH_HEADER.TITLE' | translate }}\n    </button>\n    <div class=\"adf-content-node-selector-search-panel-container\">\n        <adf-search-panel *ngIf=\"searchPanelExpanded\">\n        </adf-search-panel>\n        <div class=\"adf-content-node-selector-document-list-container\">\n    <adf-toolbar>\n        <adf-toolbar-title>\n            <ng-container *ngIf=\"!showBreadcrumbs()\">\n                <span role=\"heading\" aria-level=\"3\" class=\"adf-search-results-label\">{{ 'NODE_SELECTOR.SEARCH_RESULTS' | translate }}</span>\n            </ng-container>\n            <adf-dropdown-breadcrumb *ngIf=\"showBreadcrumbs()\"\n                class=\"adf-content-node-selector-content-breadcrumb\"\n                (navigate)=\"clearSearch()\"\n                [target]=\"documentList\"\n                [rootId]=\"breadcrumbRootId\"\n                [transform]=\"breadcrumbTransform\"\n                [folderNode]=\"breadcrumbFolderNode\"\n                [root]=\"breadcrumbFolderTitle\"\n                data-automation-id=\"content-node-selector-content-breadcrumb\">\n            </adf-dropdown-breadcrumb>\n            <ng-container *ngIf=\"showNodeCounter\" [adf-node-counter]=\"getSelectedCount()\"></ng-container>\n        </adf-toolbar-title>\n    </adf-toolbar>\n\n    <div\n        class=\"adf-content-node-selector-content-list\"\n        [class.adf-content-node-selector-content-list-searchLayout]=\"showingSearchResults\"\n        data-automation-id=\"content-node-selector-content-list\">\n        <adf-document-list\n            #documentList\n            [adf-highlight]=\"searchTerm\"\n            adf-highlight-selector=\".adf-name-location-cell-name\"\n            [showHeader]=\"showHeader\"\n            [node]=\"nodePaging\"\n            [preselectNodes]=\"preselectedNodes\"\n            [maxItems]=\"pageSize\"\n            [rowFilter]=\"_rowFilter\"\n            [imageResolver]=\"imageResolver\"\n            [currentFolderId]=\"folderIdToShow\"\n            [selectionMode]=\"selectionMode\"\n            [contextMenuActions]=\"false\"\n            [contentActions]=\"false\"\n            [allowDropFiles]=\"false\"\n            [sorting]=\"sorting\"\n            sortingMode=\"server\"\n            [where]=\"where\"\n            (folderChange)=\"onFolderChange($event)\"\n            (ready)=\"onFolderLoaded($event)\"\n            (nodeSelected)=\"onCurrentSelection($event)\"\n            data-automation-id=\"content-node-selector-document-list\">\n\n            <adf-custom-empty-content-template>\n                <div>{{ 'NODE_SELECTOR.NO_RESULTS' | translate }}</div>\n            </adf-custom-empty-content-template>\n\n            <data-columns>\n                <data-column key=\"$thumbnail\" type=\"image\"></data-column>\n                <data-column key=\"name\" type=\"text\" title=\"ADF-DOCUMENT-LIST.LAYOUT.NAME\" class=\"adf-full-width adf-ellipsis-cell\">\n                    <ng-template let-context>\n                        <adf-name-location-cell [row]=\"context.row\"></adf-name-location-cell>\n                    </ng-template>\n                </data-column>\n                <data-column key=\"modifiedAt\" type=\"date\" title=\"ADF-DOCUMENT-LIST.LAYOUT.MODIFIED_ON\" format=\"timeAgo\" class=\"adf-content-selector-modified-cell\"></data-column>\n                <data-column key=\"createdByUser.displayName\" type=\"text\" title=\"ADF-DOCUMENT-LIST.LAYOUT.CREATED_BY\" class=\"adf-content-selector-modifier-cell\"></data-column>\n                <data-column key=\"visibility\" type=\"text\" title=\"ADF-DOCUMENT-LIST.LAYOUT.STATUS\" class=\"adf-content-selector-visibility-cell\"></data-column>\n            </data-columns>\n\n        </adf-document-list>\n\n        <adf-infinite-pagination\n            [target]=\"target\"\n            [loading]=\"loadingSearchResults\"\n            (loadMore)=\"getNextPageOfSearch($event)\"\n            data-automation-id=\"content-node-selector-search-pagination\">\n            {{ 'ADF-DOCUMENT-LIST.LAYOUT.LOAD_MORE' | translate }}\n        </adf-infinite-pagination>\n    </div>\n        </div>\n    </div>\n</div>\n",
                encapsulation: ViewEncapsulation.None,
                host: { 'class': 'adf-content-node-selector-panel' },
                providers: [{
                        provide: SEARCH_QUERY_SERVICE_TOKEN,
                        useClass: SearchQueryBuilderService
                    }],
                styles: [".adf-search-results-label{color:var(--theme-text-bold-color);flex:1;font-size:14px;font-stretch:normal;font-style:normal;font-weight:600;letter-spacing:-.2px;line-height:1.43}.adf-toolbar .mat-toolbar{border-bottom-width:0;font-size:14px;max-height:48px}.adf-toolbar .mat-toolbar.mat-toolbar-single-row{height:auto}.adf-content-node-selector-search-panel-container{display:flex}.adf-content-node-selector-document-list-container{width:100%}.adf-content-node-selector-content{padding-top:0}.adf-content-node-selector-content-input{width:100%}.adf-content-node-selector-content-input-icon{color:var(--adf-node-selector-icon-color);cursor:pointer}.adf-content-node-selector-content-input-icon:hover{color:var(--theme-fg-base-color)}.adf-content-node-selector-content .mat-form-field-underline .mat-form-field-ripple{height:1px;transition:none}.adf-content-node-selector-content .adf-site-dropdown-container .mat-form-field{display:block;margin-bottom:15px}.adf-content-node-selector-content .adf-site-dropdown-list-element{margin-bottom:0;width:100%}.adf-content-node-selector-content .adf-site-dropdown-list-element .mat-select-trigger{font-size:14px}.adf-content-node-selector-content-breadcrumb .adf-dropdown-breadcrumb-trigger{outline:none}.adf-content-node-selector-content-breadcrumb .adf-dropdown-breadcrumb-trigger .mat-icon{color:var(--adf-node-selector-base-color)}.adf-content-node-selector-content-breadcrumb .adf-dropdown-breadcrumb-trigger .mat-icon:hover{color:var(--adf-node-selector-base-bold-color)}.adf-content-node-selector-content-breadcrumb .adf-dropdown-breadcrumb-trigger:focus .mat-icon{color:var(--theme-primary-color)}.adf-content-node-selector-content-breadcrumb .adf-dropdown-breadcrumb-item-chevron{color:var(--adf-node-selector-base-color)}.adf-content-node-selector-content-list{border:1px solid var(--theme-border-color);border-top:0;height:300px;overflow:auto}.adf-content-node-selector-content-list .adf-highlight{color:var(--theme-primary-color)}.adf-content-node-selector-content-list .adf-datatable-list{border:none}.adf-content-node-selector-content-list .adf-datatable-list .adf-datatable-selected{height:100%;width:100%}.adf-content-node-selector-content-list .adf-datatable-list .adf-datatable-selected>svg{fill:#00bcd4!important}.adf-content-node-selector-content-list .adf-datatable-list .adf-no-content-container{border:none!important;text-align:center}.adf-content-node-selector-content-list .adf-datatable-list .adf-datatable-cell--image{max-width:35px;min-width:35px;width:35px}.adf-content-node-selector-content-list .adf-datatable-list .adf-datatable-cell:nth-child(2){flex:1 0 95px}.adf-content-node-selector-content-list .adf-datatable-list .adf-datatable-cell .adf-name-location-cell-location{display:none}.adf-content-node-selector-content-list .adf-datatable-list .adf-datatable-cell.adf-content-selector-visibility-cell{flex:0 1 auto;min-width:1px}.adf-content-node-selector-content-list .adf-datatable-list .adf-datatable-cell.adf-content-selector-visibility-cell .adf-datatable-cell-value{padding:0}.adf-content-node-selector-content-list .adf-datatable-list .adf-datatable-body .adf-datatable-row{min-height:40px}@media screen and (-ms-high-contrast:active),screen and (-ms-high-contrast:none){.adf-content-node-selector-content-list .adf-datatable-list .adf-datatable-body .adf-datatable-row{padding-top:15px}}.adf-content-node-selector-content-list .adf-datatable-list .adf-datatable-body .adf-datatable-row:first-child .adf-datatable-cell{border-top:none}.adf-content-node-selector-content-list .adf-datatable-list .adf-datatable-body .adf-datatable-row:last-child .adf-datatable-cell{border-bottom:none}.adf-content-node-selector-content-list-searchLayout .adf-datatable-list .adf-datatable-row{min-height:65px!important}.adf-content-node-selector-content-list-searchLayout .adf-datatable-list .adf-datatable-row .adf-datatable-cell .adf-name-location-cell-location{display:block;padding:0 10px}.adf-content-node-selector-content-list-searchLayout .adf-datatable-list .adf-datatable-row .adf-datatable-cell .adf-name-location-cell-name{padding:5px 10px 2px}.adf-content-node-selector-content-list-searchLayout .adf-datatable-list .adf-datatable-row .adf-datatable-cell.adf-content-selector-modified-cell,.adf-content-node-selector-content-list-searchLayout .adf-datatable-list .adf-datatable-row .adf-datatable-cell.adf-content-selector-modifier-cell,.adf-content-node-selector-content-list-searchLayout .adf-datatable-list .adf-datatable-row .adf-datatable-cell.adf-content-selector-visibility-cell{display:none}"]
            },] }
];
ContentNodeSelectorPanelComponent.ctorParameters = () => [
    { type: CustomResourcesService },
    { type: SearchQueryBuilderService, decorators: [{ type: Inject, args: [SEARCH_QUERY_SERVICE_TOKEN,] }] },
    { type: UserPreferencesService },
    { type: NodesApiService },
    { type: UploadService },
    { type: SitesService },
    { type: AppConfigService },
    { type: ContentNodeSelectorPanelService }
];
ContentNodeSelectorPanelComponent.propDecorators = {
    restrictRootToCurrentFolderId: [{ type: Input }],
    currentFolderId: [{ type: Input }],
    dropdownHideMyFiles: [{ type: Input }],
    dropdownSiteList: [{ type: Input }],
    where: [{ type: Input }],
    rowFilter: [{ type: Input }],
    excludeSiteContent: [{ type: Input }],
    imageResolver: [{ type: Input }],
    pageSize: [{ type: Input }],
    selectionMode: [{ type: Input }],
    isSelectionValid: [{ type: Input }],
    breadcrumbTransform: [{ type: Input }],
    showSearch: [{ type: Input }],
    showDropdownSiteList: [{ type: Input }],
    showFilesInResult: [{ type: Input }],
    showNodeCounter: [{ type: Input }],
    select: [{ type: Output }],
    navigationChange: [{ type: Output }],
    siteChange: [{ type: Output }],
    showingSearch: [{ type: Output }],
    currentFolder: [{ type: Output }],
    folderLoaded: [{ type: Output }],
    documentList: [{ type: ViewChild, args: ['documentList', { static: true },] }],
    highlighter: [{ type: ViewChild, args: [HighlightDirective, { static: true },] }],
    infinitePaginationComponent: [{ type: ViewChild, args: [InfinitePaginationComponent, { static: true },] }]
};
//# sourceMappingURL=data:application/json;base64,