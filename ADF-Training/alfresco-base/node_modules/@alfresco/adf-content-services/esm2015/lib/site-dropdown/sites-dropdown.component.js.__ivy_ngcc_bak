/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, EventEmitter, Input, Output, ViewEncapsulation } from '@angular/core';
import { SitesService, LogService, InfiniteSelectScrollDirective } from '@alfresco/adf-core';
import { SitePaging, SiteEntry } from '@alfresco/js-api';
export var Relations;
(function (Relations) {
    Relations["Members"] = "members";
    Relations["Containers"] = "containers";
})(Relations || (Relations = {}));
export class DropdownSitesComponent {
    constructor(sitesService, logService) {
        this.sitesService = sitesService;
        this.logService = logService;
        this.hideMyFiles = false;
        this.siteList = null;
        this.value = null;
        this.placeholder = 'DROPDOWN.PLACEHOLDER_LABEL';
        this.change = new EventEmitter();
        this.loading = true;
        this.skipCount = 0;
        this.selected = null;
        this.MY_FILES_VALUE = '-my-';
    }
    ngOnInit() {
        if (!this.siteList) {
            this.loadSiteList();
        }
    }
    loadAllOnScroll() {
        if (this.isInfiniteScrollingEnabled()) {
            this.loading = true;
            this.loadSiteList();
        }
    }
    selectedSite(event) {
        this.change.emit(event.value);
    }
    loadSiteList() {
        const extendedOptions = {
            skipCount: this.skipCount,
            maxItems: InfiniteSelectScrollDirective.MAX_ITEMS
        };
        this.skipCount += InfiniteSelectScrollDirective.MAX_ITEMS;
        if (this.relations) {
            extendedOptions.relations = [this.relations];
        }
        this.sitesService.getSites(extendedOptions).subscribe((sitePaging) => {
            if (!this.siteList) {
                this.siteList = this.relations === Relations.Members ? this.filteredResultsByMember(sitePaging) : sitePaging;
                if (!this.hideMyFiles) {
                    const siteEntry = new SiteEntry({
                        entry: {
                            id: this.MY_FILES_VALUE,
                            guid: this.MY_FILES_VALUE,
                            title: 'DROPDOWN.MY_FILES_OPTION'
                        }
                    });
                    this.siteList.list.entries.unshift(siteEntry);
                    if (!this.value) {
                        this.value = this.MY_FILES_VALUE;
                    }
                }
            }
            else {
                const siteList = this.relations === Relations.Members ? this.filteredResultsByMember(sitePaging) : sitePaging;
                this.siteList.list.entries = this.siteList.list.entries.concat(siteList.list.entries);
                this.siteList.list.pagination = sitePaging.list.pagination;
            }
            this.selected = this.siteList.list.entries.find((site) => site.entry.id === this.value);
            if (this.value && !this.selected && this.siteListHasMoreItems()) {
                this.loadSiteList();
            }
            this.loading = false;
        }, (error) => {
            this.logService.error(error);
        });
    }
    showLoading() {
        return this.loading && this.siteListHasMoreItems();
    }
    isInfiniteScrollingEnabled() {
        return !this.loading && this.siteListHasMoreItems();
    }
    siteListHasMoreItems() {
        return this.siteList && this.siteList.list.pagination && this.siteList.list.pagination.hasMoreItems;
    }
    filteredResultsByMember(sites) {
        const loggedUserName = this.sitesService.getEcmCurrentLoggedUserName();
        sites.list.entries = sites.list.entries.filter((site) => this.isCurrentUserMember(site, loggedUserName));
        return sites;
    }
    isCurrentUserMember(site, loggedUserName) {
        return site.entry.visibility === 'PUBLIC' ||
            !!site.relations.members.list.entries.find((member) => {
                return member.entry.id.toLowerCase() === loggedUserName.toLowerCase();
            });
    }
}
DropdownSitesComponent.decorators = [
    { type: Component, args: [{
                selector: 'adf-sites-dropdown',
                template: "<div id=\"site-dropdown-container\" class=\"adf-site-dropdown-container\">\n    <mat-form-field>\n        <mat-select\n            adf-infinite-select-scroll\n            (scrollEnd)=\"loadAllOnScroll()\"\n            #siteSelect\n            data-automation-id=\"site-my-files-option\"\n            class=\"adf-site-dropdown-list-element\"\n            id=\"site-dropdown\"\n            placeholder=\"{{placeholder | translate}}\"\n            floatPlaceholder=\"never\"\n            [(value)]=\"selected\"\n            (selectionChange)=\"selectedSite($event)\">\n            <mat-option *ngFor=\"let site of siteList?.list.entries;\" [value]=\"site\">\n                {{ site.entry.title | translate}}\n            </mat-option>\n            <mat-option *ngIf=\"showLoading()\" disabled=\"true\" data-automation-id=\"site-loading\">\n                {{ 'ADF_DROPDOWN.LOADING' | translate}}\n            </mat-option>\n        </mat-select>\n    </mat-form-field>\n</div>\n",
                encapsulation: ViewEncapsulation.None,
                host: { 'class': 'adf-sites-dropdown' },
                styles: [".adf-sites-dropdown.adf-full-width .mat-form-field{width:100%}"]
            },] }
];
DropdownSitesComponent.ctorParameters = () => [
    { type: SitesService },
    { type: LogService }
];
DropdownSitesComponent.propDecorators = {
    hideMyFiles: [{ type: Input }],
    siteList: [{ type: Input }],
    value: [{ type: Input }],
    placeholder: [{ type: Input }],
    relations: [{ type: Input }],
    change: [{ type: Output }]
};
//# sourceMappingURL=data:application/json;base64,