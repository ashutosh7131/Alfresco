/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, EventEmitter, Input, Output, ViewEncapsulation } from '@angular/core';
import { RatingService } from './services/rating.service';
import { takeUntil } from 'rxjs/operators';
import { Subject } from 'rxjs';
export class RatingComponent {
    constructor(ratingService) {
        this.ratingService = ratingService;
        this.average = 0;
        this.ratingsCounter = 0;
        this.ratingType = 'fiveStar';
        this.changeVote = new EventEmitter();
        this.stars = [];
        this.onDestroy$ = new Subject();
    }
    ngOnChanges() {
        this.ratingService.getRating(this.nodeId, this.ratingType)
            .pipe(takeUntil(this.onDestroy$))
            .subscribe((ratingEntry) => {
            this.refreshRating(ratingEntry);
        });
    }
    ngOnDestroy() {
        this.onDestroy$.next(true);
        this.onDestroy$.complete();
    }
    calculateStars() {
        this.stars = [];
        const roundedAverage = Math.round(this.average);
        for (let i = 0; i < 5; i++) {
            if (i < roundedAverage) {
                this.stars.push({ fill: true });
            }
            else {
                this.stars.push({ fill: false });
            }
        }
    }
    updateVote(vote) {
        if (this.ratingValue === vote) {
            this.unRateItem();
        }
        else {
            this.rateItem(vote);
        }
    }
    rateItem(vote) {
        this.ratingService.postRating(this.nodeId, this.ratingType, vote)
            .pipe(takeUntil(this.onDestroy$))
            .subscribe((ratingEntry) => {
            this.refreshRating(ratingEntry);
        });
    }
    unRateItem() {
        this.ratingService.deleteRating(this.nodeId, this.ratingType).subscribe(() => {
            this.ratingService.getRating(this.nodeId, this.ratingType)
                .pipe(takeUntil(this.onDestroy$))
                .subscribe((ratingEntry) => {
                this.refreshRating(ratingEntry);
            });
        });
    }
    refreshRating(ratingEntry) {
        this.ratingValue = Number.parseFloat(ratingEntry.entry.myRating);
        this.average = ratingEntry.entry.aggregate.average;
        this.ratingsCounter = ratingEntry.entry.aggregate.numberOfRatings;
        this.calculateStars();
        this.changeVote.emit(this.average);
    }
}
RatingComponent.decorators = [
    { type: Component, args: [{
                selector: 'adf-rating',
                template: "<mat-list id=\"adf-rating-container\" class=\"adf-rating-container\">\n    <mat-list-item class=\"adf-rating-star\" *ngFor=\"let currentRate of stars; let idx = index;\">\n            <span id=\"adf-rate-{{idx}}\">\n                <mat-icon id=\"adf-colored-star-{{idx}}\" *ngIf=\"currentRate.fill\" class=\"adf-colored-star\"\n                          [ngClass]=\"{'adf-average-star': !ratingValue}\"\n                          (click)=\"updateVote(idx + 1)\">star_rate\n                </mat-icon>\n                <mat-icon id=\"adf-grey-star-{{idx}}\" *ngIf=\"!currentRate.fill\" class=\"adf-grey-star\"\n                          (click)=\"updateVote(idx + 1)\">star_border\n                </mat-icon>\n            </span>\n    </mat-list-item>\n    <div class=\"adf-rating-counter-container\">\n    <div id=\"adf-rating-counter\" class=\"adf-rating-counter\">{{ratingsCounter}}</div>\n    <div class=\"adf-rating-left\" *ngIf=\"ratingsCounter<=1\">Rating</div>\n    <div class=\"adf-rating-left\" *ngIf=\"ratingsCounter>1\">Ratings</div>\n    </div>\n</mat-list>\n",
                encapsulation: ViewEncapsulation.None,
                styles: [".adf-rating-container{display:flex;overflow:hidden;width:100%}.adf-rating-container .adf-rating-counter-container{align-items:center;display:flex;padding:0 6px}.adf-rating-container .adf-rating-left{padding:0 6px}.adf-rating-container .adf-rating-star{cursor:pointer;display:flex;justify-content:center;transition:all .3s;width:25px}.adf-rating-container .adf-rating-star .mat-list-item-content{padding:0!important}.adf-rating-container .adf-rating-star:hover{transform:rotate(13deg) scale(1.2)}.adf-rating-container .adf-colored-star{color:#ffe944}.adf-rating-container .adf-average-star,.adf-rating-container .adf-grey-star{color:grey!important}[dir=rtl] .adf-rating-container .adf-rating-star{transform:rotate(145deg)}[dir=rtl] .adf-rating-container .adf-rating-star:hover{transform:rotate(158deg) scale(1.2)}"]
            },] }
];
RatingComponent.ctorParameters = () => [
    { type: RatingService }
];
RatingComponent.propDecorators = {
    nodeId: [{ type: Input }],
    changeVote: [{ type: Output }]
};
//# sourceMappingURL=data:application/json;base64,