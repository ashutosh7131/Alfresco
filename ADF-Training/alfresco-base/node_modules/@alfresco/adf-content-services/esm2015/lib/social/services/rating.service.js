import { AlfrescoApiService, LogService } from '@alfresco/adf-core';
import { Injectable } from '@angular/core';
import { RatingBody, RatingsApi } from '@alfresco/js-api';
import { from, throwError } from 'rxjs';
import { catchError } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@alfresco/adf-core";
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@alfresco/adf-core';
export class RatingService {
    constructor(apiService, logService) {
        this.apiService = apiService;
        this.logService = logService;
    }
    get ratingsApi() {
        var _a;
        this._ratingsApi = (_a = this._ratingsApi) !== null && _a !== void 0 ? _a : new RatingsApi(this.apiService.getInstance());
        return this._ratingsApi;
    }
    getRating(nodeId, ratingType) {
        return from(this.ratingsApi.getRating(nodeId, ratingType))
            .pipe(catchError(this.handleError));
    }
    postRating(nodeId, ratingType, vote) {
        const ratingBody = new RatingBody({
            'id': ratingType,
            'myRating': vote
        });
        return from(this.ratingsApi.createRating(nodeId, ratingBody))
            .pipe(catchError(this.handleError));
    }
    deleteRating(nodeId, ratingType) {
        return from(this.ratingsApi.deleteRating(nodeId, ratingType))
            .pipe(catchError(this.handleError));
    }
    handleError(error) {
        this.logService.error(error);
        return throwError(error || 'Server error');
    }
}
RatingService.ɵfac = function RatingService_Factory(t) { return new (t || RatingService)(ɵngcc0.ɵɵinject(ɵngcc1.AlfrescoApiService), ɵngcc0.ɵɵinject(ɵngcc1.LogService)); };
RatingService.ɵprov = i0.ɵɵdefineInjectable({ factory: function RatingService_Factory() { return new RatingService(i0.ɵɵinject(i1.AlfrescoApiService), i0.ɵɵinject(i1.LogService)); }, token: RatingService, providedIn: "root" });
RatingService.ctorParameters = () => [
    { type: AlfrescoApiService },
    { type: LogService }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(RatingService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc1.AlfrescoApiService }, { type: ɵngcc1.LogService }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmF0aW5nLnNlcnZpY2UuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL2hvbWUvdHJhdmlzL2J1aWxkL0FsZnJlc2NvL2FsZnJlc2NvLW5nMi1jb21wb25lbnRzL2xpYi9jb250ZW50LXNlcnZpY2VzL3NyYy9saWIvc29jaWFsL3NlcnZpY2VzL3JhdGluZy5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWlCQSxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsVUFBVSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDcEUsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQWUsVUFBVSxFQUFFLFVBQVUsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQ3ZFLE9BQU8sRUFBRSxJQUFJLEVBQUUsVUFBVSxFQUFjLE1BQU0sTUFBTSxDQUFDO0FBQ3BELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUM1QztBQUFxQzs7O0FBS3JDLE1BQU0sT0FBTyxhQUFhO0FBQUcsSUFRekIsWUFBb0IsVUFBOEIsRUFBVSxVQUFzQjtBQUN0RixRQUR3QixlQUFVLEdBQVYsVUFBVSxDQUFvQjtBQUFDLFFBQVMsZUFBVSxHQUFWLFVBQVUsQ0FBWTtBQUFDLElBQ25GLENBQUM7QUFDTCxJQVBJLElBQUksVUFBVTtBQUFLO0FBQ25CLFFBQUksSUFBSSxDQUFDLFdBQVcsU0FBRyxJQUFJLENBQUMsV0FBVyxtQ0FBSSxJQUFJLFVBQVUsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUM7QUFDN0YsUUFBUSxPQUFPLElBQUksQ0FBQyxXQUFXLENBQUM7QUFDaEMsSUFBSSxDQUFDO0FBQ0wsSUFVSSxTQUFTLENBQUMsTUFBYyxFQUFFLFVBQWU7QUFBSSxRQUN6QyxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxNQUFNLEVBQUUsVUFBVSxDQUFDLENBQUM7QUFDbEUsYUFBYSxJQUFJLENBQ0QsVUFBVSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FDL0IsQ0FBQztBQUNkLElBQUksQ0FBQztBQUNMLElBUUksVUFBVSxDQUFDLE1BQWMsRUFBRSxVQUFrQixFQUFFLElBQVM7QUFBSSxRQUN4RCxNQUFNLFVBQVUsR0FBZSxJQUFJLFVBQVUsQ0FBQztBQUN0RCxZQUFZLElBQUksRUFBRSxVQUFVO0FBQzVCLFlBQVksVUFBVSxFQUFFLElBQUk7QUFDNUIsU0FBUyxDQUFDLENBQUM7QUFDWCxRQUFRLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsWUFBWSxDQUFDLE1BQU0sRUFBRSxVQUFVLENBQUMsQ0FBQztBQUNyRSxhQUFhLElBQUksQ0FDRCxVQUFVLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUMvQixDQUFDO0FBQ2QsSUFBSSxDQUFDO0FBQ0wsSUFPSSxZQUFZLENBQUMsTUFBYyxFQUFFLFVBQWU7QUFBSSxRQUM1QyxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLFlBQVksQ0FBQyxNQUFNLEVBQUUsVUFBVSxDQUFDLENBQUM7QUFDckUsYUFBYSxJQUFJLENBQ0QsVUFBVSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FDL0IsQ0FBQztBQUNkLElBQUksQ0FBQztBQUNMLElBQ1ksV0FBVyxDQUFDLEtBQVU7QUFBSSxRQUM5QixJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUNyQyxRQUFRLE9BQU8sVUFBVSxDQUFDLEtBQUssSUFBSSxjQUFjLENBQUMsQ0FBQztBQUNuRCxJQUFJLENBQUM7QUFDTDs0S0FBQztBQUNELG1PQTVESztBQUFDO0VBSEwsVUFBVSxTQUFDLHJCQUdpQyxZQVZwQyxrQkFBa0I7S0FRdkIsVUFBVSxFQUFFLE1BQU0sdkJBUlMsWUFBRixVQUFVO0FBQUc7U0FTekM7Ozs7O2dIQVQyQztBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgQWxmcmVzY29BcGlTZXJ2aWNlLCBMb2dTZXJ2aWNlIH0gZnJvbSAnQGFsZnJlc2NvL2FkZi1jb3JlJztcbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFJhdGluZ0VudHJ5LCBSYXRpbmdCb2R5LCBSYXRpbmdzQXBpIH0gZnJvbSAnQGFsZnJlc2NvL2pzLWFwaSc7XG5pbXBvcnQgeyBmcm9tLCB0aHJvd0Vycm9yLCBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBjYXRjaEVycm9yIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgUmF0aW5nU2VydmljZUludGVyZmFjZSB9IGZyb20gJy4vcmF0aW5nLnNlcnZpY2UuaW50ZXJmYWNlJztcblxuQEluamVjdGFibGUoe1xuICAgIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBSYXRpbmdTZXJ2aWNlIGltcGxlbWVudHMgUmF0aW5nU2VydmljZUludGVyZmFjZSB7XG5cbiAgICBfcmF0aW5nc0FwaTogUmF0aW5nc0FwaTtcbiAgICBnZXQgcmF0aW5nc0FwaSgpOiBSYXRpbmdzQXBpIHtcbiAgICAgICAgdGhpcy5fcmF0aW5nc0FwaSA9IHRoaXMuX3JhdGluZ3NBcGkgPz8gbmV3IFJhdGluZ3NBcGkodGhpcy5hcGlTZXJ2aWNlLmdldEluc3RhbmNlKCkpO1xuICAgICAgICByZXR1cm4gdGhpcy5fcmF0aW5nc0FwaTtcbiAgICB9XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGFwaVNlcnZpY2U6IEFsZnJlc2NvQXBpU2VydmljZSwgcHJpdmF0ZSBsb2dTZXJ2aWNlOiBMb2dTZXJ2aWNlKSB7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgY3VycmVudCB1c2VyJ3MgcmF0aW5nIGZvciBhIG5vZGUuXG4gICAgICogQHBhcmFtIG5vZGVJZCBOb2RlIHRvIGdldCB0aGUgcmF0aW5nIGZyb21cbiAgICAgKiBAcGFyYW0gcmF0aW5nVHlwZSBUeXBlIG9mIHJhdGluZyAoY2FuIGJlIFwibGlrZXNcIiBvciBcImZpdmVTdGFyXCIpXG4gICAgICogQHJldHVybnMgVGhlIHJhdGluZyB2YWx1ZVxuICAgICAqL1xuICAgIGdldFJhdGluZyhub2RlSWQ6IHN0cmluZywgcmF0aW5nVHlwZTogYW55KTogT2JzZXJ2YWJsZTxSYXRpbmdFbnRyeSB8IHt9PiB7XG4gICAgICAgIHJldHVybiBmcm9tKHRoaXMucmF0aW5nc0FwaS5nZXRSYXRpbmcobm9kZUlkLCByYXRpbmdUeXBlKSlcbiAgICAgICAgICAgIC5waXBlKFxuICAgICAgICAgICAgICAgIGNhdGNoRXJyb3IodGhpcy5oYW5kbGVFcnJvcilcbiAgICAgICAgICAgICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWRkcyB0aGUgY3VycmVudCB1c2VyJ3MgcmF0aW5nIGZvciBhIG5vZGUuXG4gICAgICogQHBhcmFtIG5vZGVJZCBUYXJnZXQgbm9kZSBmb3IgdGhlIHJhdGluZ1xuICAgICAqIEBwYXJhbSByYXRpbmdUeXBlIFR5cGUgb2YgcmF0aW5nIChjYW4gYmUgXCJsaWtlc1wiIG9yIFwiZml2ZVN0YXJcIilcbiAgICAgKiBAcGFyYW0gdm90ZSBSYXRpbmcgdmFsdWUgKGJvb2xlYW4gZm9yIFwibGlrZXNcIiwgbnVtZXJpYyAwLi41IGZvciBcImZpdmVTdGFyXCIpXG4gICAgICogQHJldHVybnMgRGV0YWlscyBhYm91dCB0aGUgcmF0aW5nLCBpbmNsdWRpbmcgdGhlIG5ldyB2YWx1ZVxuICAgICAqL1xuICAgIHBvc3RSYXRpbmcobm9kZUlkOiBzdHJpbmcsIHJhdGluZ1R5cGU6IHN0cmluZywgdm90ZTogYW55KTogT2JzZXJ2YWJsZTxSYXRpbmdFbnRyeSB8IHt9PiB7XG4gICAgICAgIGNvbnN0IHJhdGluZ0JvZHk6IFJhdGluZ0JvZHkgPSBuZXcgUmF0aW5nQm9keSh7XG4gICAgICAgICAgICAnaWQnOiByYXRpbmdUeXBlLFxuICAgICAgICAgICAgJ215UmF0aW5nJzogdm90ZVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGZyb20odGhpcy5yYXRpbmdzQXBpLmNyZWF0ZVJhdGluZyhub2RlSWQsIHJhdGluZ0JvZHkpKVxuICAgICAgICAgICAgLnBpcGUoXG4gICAgICAgICAgICAgICAgY2F0Y2hFcnJvcih0aGlzLmhhbmRsZUVycm9yKVxuICAgICAgICAgICAgKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIHRoZSBjdXJyZW50IHVzZXIncyByYXRpbmcgZm9yIGEgbm9kZS5cbiAgICAgKiBAcGFyYW0gbm9kZUlkIFRhcmdldCBub2RlXG4gICAgICogQHBhcmFtIHJhdGluZ1R5cGUgVHlwZSBvZiByYXRpbmcgdG8gcmVtb3ZlIChjYW4gYmUgXCJsaWtlc1wiIG9yIFwiZml2ZVN0YXJcIilcbiAgICAgKiBAcmV0dXJucyBOdWxsIHJlc3BvbnNlIGluZGljYXRpbmcgdGhhdCB0aGUgb3BlcmF0aW9uIGlzIGNvbXBsZXRlXG4gICAgICovXG4gICAgZGVsZXRlUmF0aW5nKG5vZGVJZDogc3RyaW5nLCByYXRpbmdUeXBlOiBhbnkpOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgICAgICByZXR1cm4gZnJvbSh0aGlzLnJhdGluZ3NBcGkuZGVsZXRlUmF0aW5nKG5vZGVJZCwgcmF0aW5nVHlwZSkpXG4gICAgICAgICAgICAucGlwZShcbiAgICAgICAgICAgICAgICBjYXRjaEVycm9yKHRoaXMuaGFuZGxlRXJyb3IpXG4gICAgICAgICAgICApO1xuICAgIH1cblxuICAgIHByaXZhdGUgaGFuZGxlRXJyb3IoZXJyb3I6IGFueSk6IGFueSB7XG4gICAgICAgIHRoaXMubG9nU2VydmljZS5lcnJvcihlcnJvcik7XG4gICAgICAgIHJldHVybiB0aHJvd0Vycm9yKGVycm9yIHx8ICdTZXJ2ZXIgZXJyb3InKTtcbiAgICB9XG59XG4iXX0=