/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { ObjectDataTableAdapter, AlfrescoApiService, LogService } from '@alfresco/adf-core';
import { Component, EventEmitter, Input, Output } from '@angular/core';
import { WebscriptApi } from '@alfresco/js-api';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@alfresco/adf-core';
import * as ɵngcc2 from '@angular/common';
import * as ɵngcc3 from '@ngx-translate/core';

function WebscriptComponent_div_0_div_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 4);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "json");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(2, 1, ctx_r1.data));
} }
function WebscriptComponent_div_0_div_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "div", 5);
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("innerHTML", ctx_r2.data, ɵngcc0.ɵɵsanitizeHtml);
} }
function WebscriptComponent_div_0_div_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 6);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r3.data);
} }
const _c0 = function (a0, a1) { return { data: a0, contentType: a1 }; };
function WebscriptComponent_div_0_div_4_div_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 9);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r5 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1("", ɵngcc0.ɵɵpipeBind2(2, 1, "WEBSCRIPT.ERROR", ɵngcc0.ɵɵpureFunction2(4, _c0, ctx_r5.data, ctx_r5.contentType)), " ");
} }
function WebscriptComponent_div_0_div_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div");
    ɵngcc0.ɵɵelement(1, "adf-datatable", 7);
    ɵngcc0.ɵɵelementStart(2, "div");
    ɵngcc0.ɵɵtemplate(3, WebscriptComponent_div_0_div_4_div_3_Template, 3, 7, "div", 8);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r4 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("data", ctx_r4.data);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r4.showError);
} }
function WebscriptComponent_div_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div");
    ɵngcc0.ɵɵtemplate(1, WebscriptComponent_div_0_div_1_Template, 3, 3, "div", 1);
    ɵngcc0.ɵɵtemplate(2, WebscriptComponent_div_0_div_2_Template, 1, 1, "div", 2);
    ɵngcc0.ɵɵtemplate(3, WebscriptComponent_div_0_div_3_Template, 2, 1, "div", 3);
    ɵngcc0.ɵɵtemplate(4, WebscriptComponent_div_0_div_4_Template, 4, 2, "div", 0);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.contentType === "JSON");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.contentType === "HTML");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.contentType === "TEXT");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.isDataTableContent());
} }
export class WebscriptComponent {
    constructor(apiService, logService) {
        this.apiService = apiService;
        this.logService = logService;
        this.showData = true;
        this.contextRoot = 'alfresco';
        this.servicePath = 'service';
        this.contentType = 'TEXT';
        this.success = new EventEmitter();
        this.data = undefined;
        this.showError = false;
    }
    get webscriptApi() {
        var _a;
        this._webscriptApi = (_a = this._webscriptApi) !== null && _a !== void 0 ? _a : new WebscriptApi(this.apiService.getInstance());
        return this._webscriptApi;
    }
    ngOnChanges() {
        if (this.showData) {
            this.clean();
        }
        return new Promise((resolve, reject) => {
            this.webscriptApi.executeWebScript('GET', this.scriptPath, this.scriptArgs, this.contextRoot, this.servicePath).then((webScriptData) => {
                this.data = webScriptData;
                if (this.showData) {
                    if (this.contentType === 'DATATABLE') {
                        this.data = this.showDataAsDataTable(webScriptData);
                    }
                }
                this.success.emit(this.data);
                resolve();
            }, (error) => {
                this.logService.log('Error' + error);
                reject();
            });
        });
    }
    showDataAsDataTable(data) {
        const datatableData = null;
        try {
            if (!data.schema) {
                data.schema = ObjectDataTableAdapter.generateSchema(data.data);
            }
            if (data.schema && data.schema.length > 0) {
                this.data = new ObjectDataTableAdapter(data.data, data.schema);
            }
        }
        catch (error) {
            this.logService.error('error during the cast as datatable');
        }
        return datatableData;
    }
    clean() {
        this.data = undefined;
    }
    isDataTableContent() {
        return this.contentType === 'DATATABLE';
    }
}
WebscriptComponent.ɵfac = function WebscriptComponent_Factory(t) { return new (t || WebscriptComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.AlfrescoApiService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.LogService)); };
WebscriptComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: WebscriptComponent, selectors: [["adf-webscript-get"]], inputs: { showData: "showData", contextRoot: "contextRoot", servicePath: "servicePath", contentType: "contentType", scriptPath: "scriptPath", scriptArgs: "scriptArgs" }, outputs: { success: "success" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 1, vars: 1, consts: [[4, "ngIf"], ["id", "webscript-data-JSON", 4, "ngIf"], ["id", "webscript-data-HTML", 3, "innerHTML", 4, "ngIf"], ["id", "webscript-data-TEXT", 4, "ngIf"], ["id", "webscript-data-JSON"], ["id", "webscript-data-HTML", 3, "innerHTML"], ["id", "webscript-data-TEXT"], ["id", "webscript-datatable-wrapper", 3, "data"], ["id", "error", 4, "ngIf"], ["id", "error"]], template: function WebscriptComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, WebscriptComponent_div_0_Template, 5, 4, "div", 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngIf", ctx.showData);
    } }, directives: [ɵngcc2.NgIf, ɵngcc1.DataTableComponent], pipes: [ɵngcc2.JsonPipe, ɵngcc3.TranslatePipe], encapsulation: 2 });
WebscriptComponent.ctorParameters = () => [
    { type: AlfrescoApiService },
    { type: LogService }
];
WebscriptComponent.propDecorators = {
    scriptPath: [{ type: Input }],
    scriptArgs: [{ type: Input }],
    showData: [{ type: Input }],
    contextRoot: [{ type: Input }],
    servicePath: [{ type: Input }],
    contentType: [{ type: Input }],
    success: [{ type: Output }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(WebscriptComponent, [{
        type: Component,
        args: [{
                selector: 'adf-webscript-get',
                template: "<div *ngIf=\"showData\">\n    <div *ngIf=\"contentType === 'JSON'\" id=\"webscript-data-JSON\">{{data | json}}</div>\n    <div *ngIf=\"contentType === 'HTML'\" id=\"webscript-data-HTML\" [innerHTML]=\"data\"></div>\n    <div *ngIf=\"contentType === 'TEXT'\" id=\"webscript-data-TEXT\">{{data}}</div>\n    <div *ngIf=\"isDataTableContent()\">\n        <adf-datatable id=\"webscript-datatable-wrapper\" [data]=\"data\"></adf-datatable>\n        <div>\n            <div *ngIf=\"showError\" id=\"error\">{{'WEBSCRIPT.ERROR' | translate: {\n                data: data,\n                contentType: contentType\n                }\n                }}\n            </div>\n        </div>\n    </div>\n</div>\n"
            }]
    }], function () { return [{ type: ɵngcc1.AlfrescoApiService }, { type: ɵngcc1.LogService }]; }, { showData: [{
            type: Input
        }], contextRoot: [{
            type: Input
        }], servicePath: [{
            type: Input
        }], contentType: [{
            type: Input
        }], success: [{
            type: Output
        }], scriptPath: [{
            type: Input
        }], scriptArgs: [{
            type: Input
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,