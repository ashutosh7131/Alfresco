/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, Input } from '@angular/core';
import { AlfrescoApiService } from '@alfresco/adf-core';
import { BehaviorSubject, Subject } from 'rxjs';
import { Site } from '@alfresco/js-api';
import { takeUntil } from 'rxjs/operators';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@alfresco/adf-core';
import * as ɵngcc2 from '@ngx-translate/core';
import * as ɵngcc3 from '@angular/common';
export class LibraryStatusColumnComponent {
    constructor(api) {
        this.api = api;
        this.displayText$ = new BehaviorSubject('');
        this.onDestroy$ = new Subject();
    }
    ngOnInit() {
        this.updateValue();
        this.api.nodeUpdated
            .pipe(takeUntil(this.onDestroy$))
            .subscribe(node => {
            const row = this.context.row;
            if (row) {
                const { entry } = row.node;
                if (entry === node) {
                    row.node = { entry };
                    this.updateValue();
                }
            }
        });
    }
    updateValue() {
        const node = this.context.row.node;
        if (node && node.entry) {
            const visibility = node.entry.visibility;
            switch (visibility) {
                case Site.VisibilityEnum.PUBLIC:
                    this.displayText$.next('LIBRARY.VISIBILITY.PUBLIC');
                    break;
                case Site.VisibilityEnum.PRIVATE:
                    this.displayText$.next('LIBRARY.VISIBILITY.PRIVATE');
                    break;
                case Site.VisibilityEnum.MODERATED:
                    this.displayText$.next('LIBRARY.VISIBILITY.MODERATED');
                    break;
                default:
                    this.displayText$.next('UNKNOWN');
                    break;
            }
        }
    }
    ngOnDestroy() {
        this.onDestroy$.next(true);
        this.onDestroy$.complete();
    }
}
LibraryStatusColumnComponent.ɵfac = function LibraryStatusColumnComponent_Factory(t) { return new (t || LibraryStatusColumnComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.AlfrescoApiService)); };
LibraryStatusColumnComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: LibraryStatusColumnComponent, selectors: [["adf-library-status-column"]], hostAttrs: [1, "adf-library-status-column", "adf-datatable-content-cell"], inputs: { context: "context" }, decls: 6, vars: 10, consts: [[1, "adf-datatable-cell-value", 3, "title"]], template: function LibraryStatusColumnComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "span", 0);
        ɵngcc0.ɵɵpipe(1, "translate");
        ɵngcc0.ɵɵpipe(2, "async");
        ɵngcc0.ɵɵtext(3);
        ɵngcc0.ɵɵpipe(4, "translate");
        ɵngcc0.ɵɵpipe(5, "async");
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(1, 2, ɵngcc0.ɵɵpipeBind1(2, 4, ctx.displayText$)));
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(4, 6, ɵngcc0.ɵɵpipeBind1(5, 8, ctx.displayText$)), " ");
    } }, pipes: [ɵngcc2.TranslatePipe, ɵngcc3.AsyncPipe], encapsulation: 2 });
LibraryStatusColumnComponent.ctorParameters = () => [
    { type: AlfrescoApiService }
];
LibraryStatusColumnComponent.propDecorators = {
    context: [{ type: Input }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(LibraryStatusColumnComponent, [{
        type: Component,
        args: [{
                selector: 'adf-library-status-column',
                template: `
        <span class="adf-datatable-cell-value" title="{{ (displayText$ | async) | translate }}">
            {{ (displayText$ | async) | translate }}
        </span>
    `,
                host: { class: 'adf-library-status-column adf-datatable-content-cell' }
            }]
    }], function () { return [{ type: ɵngcc1.AlfrescoApiService }]; }, { context: [{
            type: Input
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlicmFyeS1zdGF0dXMtY29sdW1uLmNvbXBvbmVudC5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vaG9tZS90cmF2aXMvYnVpbGQvQWxmcmVzY28vYWxmcmVzY28tbmcyLWNvbXBvbmVudHMvbGliL2NvbnRlbnQtc2VydmljZXMvc3JjL2xpYi9kb2N1bWVudC1saXN0L2NvbXBvbmVudHMvbGlicmFyeS1zdGF0dXMtY29sdW1uL2xpYnJhcnktc3RhdHVzLWNvbHVtbi5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUVILE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFxQixNQUFNLGVBQWUsQ0FBQztBQUNwRSxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUN4RCxPQUFPLEVBQUUsZUFBZSxFQUFFLE9BQU8sRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUNoRCxPQUFPLEVBQUUsSUFBSSxFQUFhLE1BQU0sa0JBQWtCLENBQUM7QUFFbkQsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDOzs7OztBQVczQyxNQUFNLE9BQU8sNEJBQTRCO0FBQUcsSUFReEMsWUFBb0IsR0FBdUI7QUFBSSxRQUEzQixRQUFHLEdBQUgsR0FBRyxDQUFvQjtBQUFDLFFBSjVDLGlCQUFZLEdBQUcsSUFBSSxlQUFlLENBQVMsRUFBRSxDQUFDLENBQUM7QUFDbkQsUUFDWSxlQUFVLEdBQUcsSUFBSSxPQUFPLEVBQVcsQ0FBQztBQUNoRCxJQUNrRCxDQUFDO0FBQ25ELElBQ0ksUUFBUTtBQUNaLFFBQVEsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO0FBQzNCLFFBQ1EsSUFBSSxDQUFDLEdBQUcsQ0FBQyxXQUFXO0FBQzVCLGFBQWEsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7QUFDN0MsYUFBYSxTQUFTLENBQUMsSUFBSSxDQUFDLEVBQUU7QUFDOUIsWUFBZ0IsTUFBTSxHQUFHLEdBQWlCLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDO0FBQzNELFlBQWdCLElBQUksR0FBRyxFQUFFO0FBQ3pCLGdCQUFvQixNQUFNLEVBQUUsS0FBSyxFQUFFLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQztBQUMvQyxnQkFDb0IsSUFBSSxLQUFLLEtBQUssSUFBSSxFQUFFO0FBQ3hDLG9CQUF3QixHQUFHLENBQUMsSUFBSSxHQUFHLEVBQUUsS0FBSyxFQUFFLENBQUM7QUFDN0Msb0JBQXdCLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztBQUMzQyxpQkFBcUI7QUFDckIsYUFBaUI7QUFDakIsUUFBWSxDQUFDLENBQUMsQ0FBQztBQUNmLElBQUksQ0FBQztBQUNMLElBQ2MsV0FBVztBQUN6QixRQUFRLE1BQU0sSUFBSSxHQUFjLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQztBQUN0RCxRQUFRLElBQUksSUFBSSxJQUFJLElBQUksQ0FBQyxLQUFLLEVBQUU7QUFDaEMsWUFBWSxNQUFNLFVBQVUsR0FBVyxJQUFJLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQztBQUM3RCxZQUNZLFFBQVEsVUFBVSxFQUFFO0FBQ2hDLGdCQUFnQixLQUFLLElBQUksQ0FBQyxjQUFjLENBQUMsTUFBTTtBQUMvQyxvQkFBb0IsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsMkJBQTJCLENBQUMsQ0FBQztBQUN4RSxvQkFBb0IsTUFBTTtBQUMxQixnQkFBZ0IsS0FBSyxJQUFJLENBQUMsY0FBYyxDQUFDLE9BQU87QUFDaEQsb0JBQW9CLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLDRCQUE0QixDQUFDLENBQUM7QUFDekUsb0JBQW9CLE1BQU07QUFDMUIsZ0JBQWdCLEtBQUssSUFBSSxDQUFDLGNBQWMsQ0FBQyxTQUFTO0FBQ2xELG9CQUFvQixJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyw4QkFBOEIsQ0FBQyxDQUFDO0FBQzNFLG9CQUFvQixNQUFNO0FBQzFCLGdCQUFnQjtBQUNoQixvQkFBb0IsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDdEQsb0JBQW9CLE1BQU07QUFDMUIsYUFBYTtBQUNiLFNBQVM7QUFDVCxJQUFJLENBQUM7QUFDTCxJQUNJLFdBQVc7QUFDZixRQUFRLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ25DLFFBQVEsSUFBSSxDQUFDLFVBQVUsQ0FBQyxRQUFRLEVBQUUsQ0FBQztBQUNuQyxJQUFJLENBQUM7QUFDTDt3REEvREMsU0FBUyxTQUFDLGtCQUNQLFFBQVEsRUFBRSwyQkFBMkIsa0JBQ3JDLFFBQVEsRUFBRTsySUFJVCxrQkFDRCxJQUFJLEVBQUUsRUFBRSxLQUFLLEVBQUUsc0RBQXNELEVBQUUsY0FDMUU7Ozs7Ozs7Ozs7Ozs4RUFDSTtBQUFDO0FBQXNELFlBZm5ELGtCQUFrQjtBQUFHO0FBQUc7QUFDVCxzQkFlbkIsS0FBSztBQUNUOzs7Ozs7Ozs7Ozs7OztvQkFBRTtBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgT25Jbml0LCBPbkRlc3Ryb3kgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEFsZnJlc2NvQXBpU2VydmljZSB9IGZyb20gJ0BhbGZyZXNjby9hZGYtY29yZSc7XG5pbXBvcnQgeyBCZWhhdmlvclN1YmplY3QsIFN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IFNpdGUsIFNpdGVFbnRyeSB9IGZyb20gJ0BhbGZyZXNjby9qcy1hcGknO1xuaW1wb3J0IHsgU2hhcmVEYXRhUm93IH0gZnJvbSAnLi4vLi4vZGF0YS9zaGFyZS1kYXRhLXJvdy5tb2RlbCc7XG5pbXBvcnQgeyB0YWtlVW50aWwgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAnYWRmLWxpYnJhcnktc3RhdHVzLWNvbHVtbicsXG4gICAgdGVtcGxhdGU6IGBcbiAgICAgICAgPHNwYW4gY2xhc3M9XCJhZGYtZGF0YXRhYmxlLWNlbGwtdmFsdWVcIiB0aXRsZT1cInt7IChkaXNwbGF5VGV4dCQgfCBhc3luYykgfCB0cmFuc2xhdGUgfX1cIj5cbiAgICAgICAgICAgIHt7IChkaXNwbGF5VGV4dCQgfCBhc3luYykgfCB0cmFuc2xhdGUgfX1cbiAgICAgICAgPC9zcGFuPlxuICAgIGAsXG4gICAgaG9zdDogeyBjbGFzczogJ2FkZi1saWJyYXJ5LXN0YXR1cy1jb2x1bW4gYWRmLWRhdGF0YWJsZS1jb250ZW50LWNlbGwnIH1cbn0pXG5leHBvcnQgY2xhc3MgTGlicmFyeVN0YXR1c0NvbHVtbkNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95IHtcbiAgICBASW5wdXQoKVxuICAgIGNvbnRleHQ6IGFueTtcblxuICAgIGRpc3BsYXlUZXh0JCA9IG5ldyBCZWhhdmlvclN1YmplY3Q8c3RyaW5nPignJyk7XG5cbiAgICBwcml2YXRlIG9uRGVzdHJveSQgPSBuZXcgU3ViamVjdDxib29sZWFuPigpO1xuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBhcGk6IEFsZnJlc2NvQXBpU2VydmljZSkge31cblxuICAgIG5nT25Jbml0KCkge1xuICAgICAgICB0aGlzLnVwZGF0ZVZhbHVlKCk7XG5cbiAgICAgICAgdGhpcy5hcGkubm9kZVVwZGF0ZWRcbiAgICAgICAgICAgIC5waXBlKHRha2VVbnRpbCh0aGlzLm9uRGVzdHJveSQpKVxuICAgICAgICAgICAgLnN1YnNjcmliZShub2RlID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCByb3c6IFNoYXJlRGF0YVJvdyA9IHRoaXMuY29udGV4dC5yb3c7XG4gICAgICAgICAgICAgICAgaWYgKHJvdykge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB7IGVudHJ5IH0gPSByb3cubm9kZTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoZW50cnkgPT09IG5vZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJvdy5ub2RlID0geyBlbnRyeSB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy51cGRhdGVWYWx1ZSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIHVwZGF0ZVZhbHVlKCkge1xuICAgICAgICBjb25zdCBub2RlOiBTaXRlRW50cnkgPSB0aGlzLmNvbnRleHQucm93Lm5vZGU7XG4gICAgICAgIGlmIChub2RlICYmIG5vZGUuZW50cnkpIHtcbiAgICAgICAgICAgIGNvbnN0IHZpc2liaWxpdHk6IHN0cmluZyA9IG5vZGUuZW50cnkudmlzaWJpbGl0eTtcblxuICAgICAgICAgICAgc3dpdGNoICh2aXNpYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgY2FzZSBTaXRlLlZpc2liaWxpdHlFbnVtLlBVQkxJQzpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kaXNwbGF5VGV4dCQubmV4dCgnTElCUkFSWS5WSVNJQklMSVRZLlBVQkxJQycpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFNpdGUuVmlzaWJpbGl0eUVudW0uUFJJVkFURTpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kaXNwbGF5VGV4dCQubmV4dCgnTElCUkFSWS5WSVNJQklMSVRZLlBSSVZBVEUnKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBTaXRlLlZpc2liaWxpdHlFbnVtLk1PREVSQVRFRDpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kaXNwbGF5VGV4dCQubmV4dCgnTElCUkFSWS5WSVNJQklMSVRZLk1PREVSQVRFRCcpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRpc3BsYXlUZXh0JC5uZXh0KCdVTktOT1dOJyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgbmdPbkRlc3Ryb3koKSB7XG4gICAgICAgIHRoaXMub25EZXN0cm95JC5uZXh0KHRydWUpO1xuICAgICAgICB0aGlzLm9uRGVzdHJveSQuY29tcGxldGUoKTtcbiAgICB9XG59XG4iXX0=