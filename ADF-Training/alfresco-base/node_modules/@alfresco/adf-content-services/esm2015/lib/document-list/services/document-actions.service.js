import { ContentService, TranslationService } from '@alfresco/adf-core';
import { Injectable } from '@angular/core';
import { Subject, throwError, of } from 'rxjs';
import { PermissionModel } from '../models/permissions.model';
import { DocumentListService } from './document-list.service';
import { NodeActionsService } from './node-actions.service';
import { ContentNodeDialogService } from '../../content-node-selector/content-node-dialog.service';
import * as i0 from "@angular/core";
import * as i1 from "./node-actions.service";
import * as i2 from "../../content-node-selector/content-node-dialog.service";
import * as i3 from "@alfresco/adf-core";
import * as i4 from "./document-list.service";
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './node-actions.service';
import * as ɵngcc2 from '../../content-node-selector/content-node-dialog.service';
import * as ɵngcc3 from '@alfresco/adf-core';
import * as ɵngcc4 from './document-list.service';
export class DocumentActionsService {
    constructor(nodeActionsService, contentNodeDialogService, translation, documentListService, contentService) {
        this.nodeActionsService = nodeActionsService;
        this.contentNodeDialogService = contentNodeDialogService;
        this.translation = translation;
        this.documentListService = documentListService;
        this.contentService = contentService;
        this.permissionEvent = new Subject();
        this.error = new Subject();
        this.success = new Subject();
        this.handlers = {};
        this.setupActionHandlers();
    }
    getHandler(key) {
        if (key) {
            const lKey = key.toLowerCase();
            return this.handlers[lKey] || null;
        }
        return null;
    }
    setHandler(key, handler) {
        if (key) {
            const lKey = key.toLowerCase();
            this.handlers[lKey] = handler;
            return true;
        }
        return false;
    }
    canExecuteAction(nodeEntry) {
        return this.documentListService && nodeEntry && nodeEntry.entry.isFile === true;
    }
    setupActionHandlers() {
        this.handlers['copy'] = this.copyNode.bind(this);
        this.handlers['move'] = this.moveNode.bind(this);
        this.handlers['delete'] = this.deleteNode.bind(this);
        this.handlers['download'] = this.downloadNode.bind(this);
        this.handlers['lock'] = this.lockNode.bind(this);
    }
    lockNode(node) {
        return this.contentNodeDialogService.openLockNodeDialog(node.entry);
    }
    downloadNode(obj) {
        this.nodeActionsService.downloadNode(obj);
    }
    copyNode(node, _target, permission) {
        const actionObservable = this.nodeActionsService.copyContent(node.entry, permission);
        this.prepareHandlers(actionObservable);
        return actionObservable;
    }
    moveNode(node, _target, permission) {
        const actionObservable = this.nodeActionsService.moveContent(node.entry, permission);
        this.prepareHandlers(actionObservable);
        return actionObservable;
    }
    prepareHandlers(actionObservable) {
        actionObservable.subscribe((fileOperationMessage) => {
            this.success.next(fileOperationMessage);
        }, this.error.next.bind(this.error));
    }
    deleteNode(node, _target, permission) {
        if (this.canExecuteAction(node)) {
            if (this.contentService.hasAllowableOperations(node.entry, permission)) {
                const handlerObservable = this.documentListService.deleteNode(node.entry.id);
                handlerObservable.subscribe(() => {
                    const message = this.translation.instant('CORE.DELETE_NODE.SINGULAR', { name: node.entry.name });
                    this.success.next(message);
                }, () => {
                    const message = this.translation.instant('CORE.DELETE_NODE.ERROR_SINGULAR', { name: node.entry.name });
                    this.error.next(message);
                });
                return handlerObservable;
            }
            else {
                this.permissionEvent.next(new PermissionModel({
                    type: 'content',
                    action: 'delete',
                    permission: permission
                }));
                return throwError(new Error('No permission to delete'));
            }
        }
        return of();
    }
}
DocumentActionsService.ɵfac = function DocumentActionsService_Factory(t) { return new (t || DocumentActionsService)(ɵngcc0.ɵɵinject(ɵngcc1.NodeActionsService), ɵngcc0.ɵɵinject(ɵngcc2.ContentNodeDialogService), ɵngcc0.ɵɵinject(ɵngcc3.TranslationService), ɵngcc0.ɵɵinject(ɵngcc4.DocumentListService), ɵngcc0.ɵɵinject(ɵngcc3.ContentService)); };
DocumentActionsService.ɵprov = i0.ɵɵdefineInjectable({ factory: function DocumentActionsService_Factory() { return new DocumentActionsService(i0.ɵɵinject(i1.NodeActionsService), i0.ɵɵinject(i2.ContentNodeDialogService), i0.ɵɵinject(i3.TranslationService), i0.ɵɵinject(i4.DocumentListService), i0.ɵɵinject(i3.ContentService)); }, token: DocumentActionsService, providedIn: "root" });
DocumentActionsService.ctorParameters = () => [
    { type: NodeActionsService },
    { type: ContentNodeDialogService },
    { type: TranslationService },
    { type: DocumentListService },
    { type: ContentService }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DocumentActionsService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc1.NodeActionsService }, { type: ɵngcc2.ContentNodeDialogService }, { type: ɵngcc3.TranslationService }, { type: ɵngcc4.DocumentListService }, { type: ɵngcc3.ContentService }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,