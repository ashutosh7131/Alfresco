/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { DataSorting } from '@alfresco/adf-core';
import { ShareDataRow } from './share-data-row.model';
export class ShareDataTableAdapter {
    constructor(thumbnailService, contentService, schema = [], sorting, sortingMode = 'client', allowDropFiles = false) {
        this.thumbnailService = thumbnailService;
        this.contentService = contentService;
        this.ERR_ROW_NOT_FOUND = 'Row not found';
        this.ERR_COL_NOT_FOUND = 'Column not found';
        this.thumbnails = false;
        this.rows = [];
        this.columns = schema || [];
        this.sorting = sorting;
        this.sortingMode = sortingMode;
        this.allowDropFiles = allowDropFiles;
    }
    set sortingMode(value) {
        let newValue = (value || 'client').toLowerCase();
        if (newValue !== 'client' && newValue !== 'server') {
            newValue = 'client';
        }
        this._sortingMode = newValue;
    }
    get sortingMode() {
        return this._sortingMode;
    }
    getRows() {
        return this.rows;
    }
    setRows(rows) {
        this.rows = rows || [];
        this.sort();
    }
    getColumns() {
        return this.columns;
    }
    setColumns(columns) {
        this.columns = columns || [];
    }
    getValue(row, col) {
        if (!row) {
            throw new Error(this.ERR_ROW_NOT_FOUND);
        }
        if (!col) {
            throw new Error(this.ERR_COL_NOT_FOUND);
        }
        const dataRow = row;
        const value = row.getValue(col.key);
        if (dataRow.cache[col.key] !== undefined) {
            return dataRow.cache[col.key];
        }
        if (col.key === '$thumbnail') {
            if (this.imageResolver) {
                const resolved = this.imageResolver(row, col);
                if (resolved) {
                    return resolved;
                }
            }
            const node = row.node;
            if (node.entry.isFolder) {
                return this.getFolderIcon(node);
            }
            if (node.entry.isFile) {
                if (this.thumbnails) {
                    return this.thumbnailService.getDocumentThumbnailUrl(node);
                }
            }
            if (node.entry.content) {
                const mimeType = node.entry.content.mimeType;
                if (mimeType) {
                    return this.thumbnailService.getMimeTypeIcon(mimeType);
                }
            }
            return this.thumbnailService.getDefaultMimeTypeIcon();
        }
        if (col.type === 'image') {
            if (this.imageResolver) {
                const resolved = this.imageResolver(row, col);
                if (resolved) {
                    return resolved;
                }
            }
        }
        return dataRow.cacheValue(col.key, value);
    }
    getSorting() {
        return this.sorting;
    }
    setSorting(sorting) {
        this.sorting = sorting;
        this.sortRows(this.rows, this.sorting);
    }
    sort(key, direction) {
        const sorting = this.sorting || new DataSorting();
        if (key) {
            sorting.key = key;
            sorting.direction = direction || 'asc';
        }
        this.setSorting(sorting);
    }
    setFilter(filter) {
        this.filter = filter;
    }
    setImageResolver(resolver) {
        this.imageResolver = resolver;
    }
    getFolderIcon(node) {
        if (this.isSmartFolder(node)) {
            return this.thumbnailService.getMimeTypeIcon('smartFolder');
        }
        else if (this.isRuleFolder(node)) {
            return this.thumbnailService.getMimeTypeIcon('ruleFolder');
        }
        else if (this.isALinkFolder(node)) {
            return this.thumbnailService.getMimeTypeIcon('linkFolder');
        }
        else {
            return this.thumbnailService.getMimeTypeIcon('folder');
        }
    }
    isSmartFolder(node) {
        const nodeAspects = this.getNodeAspectNames(node);
        return nodeAspects.indexOf('smf:customConfigSmartFolder') > -1 ||
            (nodeAspects.indexOf('smf:systemConfigSmartFolder') > -1);
    }
    isRuleFolder(node) {
        const nodeAspects = this.getNodeAspectNames(node);
        return nodeAspects.indexOf('rule:rules') > -1 ||
            (nodeAspects.indexOf('rule:rules') > -1);
    }
    isALinkFolder(node) {
        const nodeType = node.entry ? node.entry.nodeType : node.nodeType;
        return nodeType === 'app:folderlink';
    }
    getNodeAspectNames(node) {
        var _a;
        return ((_a = node.entry) === null || _a === void 0 ? void 0 : _a.aspectNames) ? node.entry.aspectNames : (node.aspectNames ? node.aspectNames : []);
    }
    sortRows(rows, sorting) {
        if (this.sortingMode === 'server') {
            return;
        }
        const options = {};
        if ((sorting === null || sorting === void 0 ? void 0 : sorting.key) && (rows === null || rows === void 0 ? void 0 : rows.length)) {
            if (sorting.key.includes('sizeInBytes') || sorting.key === 'name') {
                options.numeric = true;
            }
            rows.sort((a, b) => {
                if (a.node.entry.isFolder !== b.node.entry.isFolder) {
                    return a.node.entry.isFolder ? -1 : 1;
                }
                let left = a.getValue(sorting.key);
                if (left) {
                    left = (left instanceof Date) ? left.valueOf().toString() : left.toString();
                }
                else {
                    left = '';
                }
                let right = b.getValue(sorting.key);
                if (right) {
                    right = (right instanceof Date) ? right.valueOf().toString() : right.toString();
                }
                else {
                    right = '';
                }
                return sorting.direction === 'asc'
                    ? left.localeCompare(right, undefined, options)
                    : right.localeCompare(left, undefined, options);
            });
        }
    }
    loadPage(nodePaging, merge = false, allowDropFiles) {
        var _a;
        let shareDataRows = [];
        if (allowDropFiles !== undefined) {
            this.allowDropFiles = allowDropFiles;
        }
        if (nodePaging === null || nodePaging === void 0 ? void 0 : nodePaging.list) {
            const nodeEntries = nodePaging.list.entries;
            if (nodeEntries === null || nodeEntries === void 0 ? void 0 : nodeEntries.length) {
                shareDataRows = nodeEntries.map((item) => new ShareDataRow(item, this.contentService, this.permissionsStyle, this.thumbnailService, this.allowDropFiles));
                if (this.filter) {
                    shareDataRows = shareDataRows.filter(this.filter);
                }
                if (this.sortingMode !== 'server') {
                    if ((_a = this.columns) === null || _a === void 0 ? void 0 : _a.length) {
                        const sorting = this.getSorting();
                        if (sorting) {
                            this.sortRows(shareDataRows, sorting);
                        }
                        else {
                            const sortable = this.columns.filter((c) => c.sortable);
                            if (sortable.length > 0) {
                                this.sort(sortable[0].key, 'asc');
                            }
                            else {
                                this.sort(this.columns[0].key, 'asc');
                            }
                        }
                    }
                }
            }
        }
        if (merge) {
            const listPrunedDuplicate = shareDataRows.filter((elementToFilter) => {
                const isPresent = this.rows.find((currentRow) => {
                    return currentRow.obj.entry.id === elementToFilter.obj.entry.id;
                });
                return !isPresent;
            });
            this.rows = this.rows.concat(listPrunedDuplicate);
        }
        else {
            this.rows = shareDataRows;
        }
    }
    getSelectedRows() {
        return this.rows.filter((row) => row.isSelected);
    }
    getRowByNodeId(nodeId) {
        return this.rows.find((row) => row.node.entry.id === nodeId);
    }
}
//# sourceMappingURL=data:application/json;base64,