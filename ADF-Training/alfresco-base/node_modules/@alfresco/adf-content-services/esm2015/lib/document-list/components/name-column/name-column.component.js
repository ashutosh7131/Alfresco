/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, Input, ChangeDetectionStrategy, ViewEncapsulation, ElementRef } from '@angular/core';
import { BehaviorSubject, Subject } from 'rxjs';
import { AlfrescoApiService } from '@alfresco/adf-core';
import { takeUntil } from 'rxjs/operators';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@alfresco/adf-core';
import * as ɵngcc2 from '@ngx-translate/core';
import * as ɵngcc3 from '@angular/common';

const _c0 = function (a0) { return { name: a0 }; };
export class NameColumnComponent {
    constructor(element, alfrescoApiService) {
        this.element = element;
        this.alfrescoApiService = alfrescoApiService;
        this.key = 'name';
        this.displayText$ = new BehaviorSubject('');
        this.onDestroy$ = new Subject();
    }
    ngOnInit() {
        this.updateValue();
        this.alfrescoApiService.nodeUpdated
            .pipe(takeUntil(this.onDestroy$))
            .subscribe(node => {
            const row = this.context.row;
            if (row) {
                const { entry } = row.node;
                if (entry === node) {
                    row.node = { entry };
                    this.updateValue();
                }
            }
        });
    }
    updateValue() {
        this.node = this.context.row.node;
        if (this.node && this.node.entry) {
            const displayText = this.context.row.getValue(this.key);
            this.displayText$.next(displayText || this.node.entry.id);
        }
    }
    onClick() {
        this.element.nativeElement.dispatchEvent(new CustomEvent('name-click', {
            bubbles: true,
            detail: {
                node: this.node
            }
        }));
    }
    ngOnDestroy() {
        this.onDestroy$.next(true);
        this.onDestroy$.complete();
    }
}
NameColumnComponent.ɵfac = function NameColumnComponent_Factory(t) { return new (t || NameColumnComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.AlfrescoApiService)); };
NameColumnComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: NameColumnComponent, selectors: [["adf-name-column"]], hostAttrs: [1, "adf-datatable-content-cell", "adf-datatable-link", "adf-name-column"], inputs: { key: "key", context: "context" }, decls: 6, vars: 14, consts: [["role", "link", 1, "adf-datatable-cell-value", 3, "title", "click"]], template: function NameColumnComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "span", 0);
        ɵngcc0.ɵɵlistener("click", function NameColumnComponent_Template_span_click_0_listener() { return ctx.onClick(); });
        ɵngcc0.ɵɵpipe(1, "translate");
        ɵngcc0.ɵɵpipe(2, "async");
        ɵngcc0.ɵɵpipe(3, "adfNodeNameTooltip");
        ɵngcc0.ɵɵtext(4);
        ɵngcc0.ɵɵpipe(5, "async");
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(3, 8, ctx.node));
        ɵngcc0.ɵɵattribute("aria-label", ɵngcc0.ɵɵpipeBind2(1, 3, "NAME_COLUMN_LINK.ACCESSIBILITY.ARIA_LABEL", ɵngcc0.ɵɵpureFunction1(12, _c0, ɵngcc0.ɵɵpipeBind1(2, 6, ctx.displayText$))));
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(5, 10, ctx.displayText$), " ");
    } }, pipes: [ɵngcc2.TranslatePipe, ɵngcc3.AsyncPipe, ɵngcc1.NodeNameTooltipPipe], encapsulation: 2, changeDetection: 0 });
NameColumnComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: AlfrescoApiService }
];
NameColumnComponent.propDecorators = {
    context: [{ type: Input }],
    key: [{ type: Input }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NameColumnComponent, [{
        type: Component,
        args: [{
                selector: 'adf-name-column',
                template: `
        <span
            role="link"
            [attr.aria-label]="'NAME_COLUMN_LINK.ACCESSIBILITY.ARIA_LABEL' | translate:{
                name:  displayText$ | async
            }"
            class="adf-datatable-cell-value"
            title="{{ node | adfNodeNameTooltip }}"
            (click)="onClick()">

            {{ displayText$ | async }}
        </span>
    `,
                changeDetection: ChangeDetectionStrategy.OnPush,
                encapsulation: ViewEncapsulation.None,
                host: { class: 'adf-datatable-content-cell adf-datatable-link adf-name-column' }
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.AlfrescoApiService }]; }, { key: [{
            type: Input
        }], context: [{
            type: Input
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmFtZS1jb2x1bW4uY29tcG9uZW50LmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9ob21lL3RyYXZpcy9idWlsZC9BbGZyZXNjby9hbGZyZXNjby1uZzItY29tcG9uZW50cy9saWIvY29udGVudC1zZXJ2aWNlcy9zcmMvbGliL2RvY3VtZW50LWxpc3QvY29tcG9uZW50cy9uYW1lLWNvbHVtbi9uYW1lLWNvbHVtbi5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUVILE9BQU8sRUFDSCxTQUFTLEVBQ1QsS0FBSyxFQUVMLHVCQUF1QixFQUN2QixpQkFBaUIsRUFDakIsVUFBVSxFQUViLE1BQU0sZUFBZSxDQUFDO0FBRXZCLE9BQU8sRUFBRSxlQUFlLEVBQUUsT0FBTyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ2hELE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBRXhELE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7Ozs7OztBQXFCM0MsTUFBTSxPQUFPLG1CQUFtQjtBQUFHLElBWS9CLFlBQW9CLE9BQW1CLEVBQVUsa0JBQXNDO0FBQUksUUFBdkUsWUFBTyxHQUFQLE9BQU8sQ0FBWTtBQUFDLFFBQVMsdUJBQWtCLEdBQWxCLGtCQUFrQixDQUFvQjtBQUFDLFFBUHhGLFFBQUcsR0FBRyxNQUFNLENBQUM7QUFDakIsUUFDSSxpQkFBWSxHQUFHLElBQUksZUFBZSxDQUFTLEVBQUUsQ0FBQyxDQUFDO0FBQ25ELFFBRVksZUFBVSxHQUFHLElBQUksT0FBTyxFQUFXLENBQUM7QUFDaEQsSUFDOEYsQ0FBQztBQUMvRixJQUNJLFFBQVE7QUFDWixRQUFRLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztBQUMzQixRQUNRLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxXQUFXO0FBQzNDLGFBQWEsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7QUFDN0MsYUFBYSxTQUFTLENBQUMsSUFBSSxDQUFDLEVBQUU7QUFDOUIsWUFBZ0IsTUFBTSxHQUFHLEdBQWlCLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDO0FBQzNELFlBQWdCLElBQUksR0FBRyxFQUFFO0FBQ3pCLGdCQUFvQixNQUFNLEVBQUUsS0FBSyxFQUFFLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQztBQUMvQyxnQkFDb0IsSUFBSSxLQUFLLEtBQUssSUFBSSxFQUFFO0FBQ3hDLG9CQUF3QixHQUFHLENBQUMsSUFBSSxHQUFHLEVBQUUsS0FBSyxFQUFFLENBQUM7QUFDN0Msb0JBQXdCLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztBQUMzQyxpQkFBcUI7QUFDckIsYUFBaUI7QUFDakIsUUFBWSxDQUFDLENBQUMsQ0FBQztBQUNmLElBQUksQ0FBQztBQUNMLElBQ2MsV0FBVztBQUN6QixRQUFRLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDO0FBQzFDLFFBQ1EsSUFBSSxJQUFJLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFO0FBQzFDLFlBQVksTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNwRSxZQUFZLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLFdBQVcsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUN0RSxTQUFTO0FBQ1QsSUFBSSxDQUFDO0FBQ0wsSUFDSSxPQUFPO0FBQ1gsUUFBUSxJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxhQUFhLENBQ3BDLElBQUksV0FBVyxDQUFDLFlBQVksRUFBRTtBQUMxQyxZQUFnQixPQUFPLEVBQUUsSUFBSTtBQUM3QixZQUFnQixNQUFNLEVBQUU7QUFDeEIsZ0JBQW9CLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSTtBQUNuQyxhQUFpQjtBQUNqQixTQUFhLENBQUMsQ0FDTCxDQUFDO0FBQ1YsSUFBSSxDQUFDO0FBQ0wsSUFDSSxXQUFXO0FBQ2YsUUFBUSxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUNuQyxRQUFRLElBQUksQ0FBQyxVQUFVLENBQUMsUUFBUSxFQUFFLENBQUM7QUFDbkMsSUFBSSxDQUFDO0FBQ0w7K0NBM0VDLFNBQVMsU0FBQyxrQkFDUCxRQUFRLEVBQUUsaUJBQWlCLGtCQUMzQixRQUFRLEVBQUU7b1RBWVQsa0JBQ0QsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU0sa0JBQy9DLGFBQWEsRUFBRTtJQUFpQixDQUFDLElBQUksa0JBQ3JDLElBQUksRUFBRSxFQUFFLEtBQUssRUFBRTs0REFBK0QsRUFBRSxjQUNuRjs7Ozs7Ozs7Ozs7OzhIQUNJO0FBQUM7QUFBNkMsWUE1Qi9DLFVBQVU7QUFDWixZQUlPLGtCQUFrQjtBQUFHO0FBQUc7QUFDbEIsc0JBdUJWLEtBQUs7QUFDUixrQkFFRyxLQUFLO0FBQ1Q7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O29CQUFFO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQge1xuICAgIENvbXBvbmVudCxcbiAgICBJbnB1dCxcbiAgICBPbkluaXQsXG4gICAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksXG4gICAgVmlld0VuY2Fwc3VsYXRpb24sXG4gICAgRWxlbWVudFJlZixcbiAgICBPbkRlc3Ryb3lcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBOb2RlRW50cnkgfSBmcm9tICdAYWxmcmVzY28vanMtYXBpJztcbmltcG9ydCB7IEJlaGF2aW9yU3ViamVjdCwgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgQWxmcmVzY29BcGlTZXJ2aWNlIH0gZnJvbSAnQGFsZnJlc2NvL2FkZi1jb3JlJztcbmltcG9ydCB7IFNoYXJlRGF0YVJvdyB9IGZyb20gJy4uLy4uL2RhdGEvc2hhcmUtZGF0YS1yb3cubW9kZWwnO1xuaW1wb3J0IHsgdGFrZVVudGlsIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ2FkZi1uYW1lLWNvbHVtbicsXG4gICAgdGVtcGxhdGU6IGBcbiAgICAgICAgPHNwYW5cbiAgICAgICAgICAgIHJvbGU9XCJsaW5rXCJcbiAgICAgICAgICAgIFthdHRyLmFyaWEtbGFiZWxdPVwiJ05BTUVfQ09MVU1OX0xJTksuQUNDRVNTSUJJTElUWS5BUklBX0xBQkVMJyB8IHRyYW5zbGF0ZTp7XG4gICAgICAgICAgICAgICAgbmFtZTogIGRpc3BsYXlUZXh0JCB8IGFzeW5jXG4gICAgICAgICAgICB9XCJcbiAgICAgICAgICAgIGNsYXNzPVwiYWRmLWRhdGF0YWJsZS1jZWxsLXZhbHVlXCJcbiAgICAgICAgICAgIHRpdGxlPVwie3sgbm9kZSB8IGFkZk5vZGVOYW1lVG9vbHRpcCB9fVwiXG4gICAgICAgICAgICAoY2xpY2spPVwib25DbGljaygpXCI+XG5cbiAgICAgICAgICAgIHt7IGRpc3BsYXlUZXh0JCB8IGFzeW5jIH19XG4gICAgICAgIDwvc3Bhbj5cbiAgICBgLFxuICAgIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICAgIGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLk5vbmUsXG4gICAgaG9zdDogeyBjbGFzczogJ2FkZi1kYXRhdGFibGUtY29udGVudC1jZWxsIGFkZi1kYXRhdGFibGUtbGluayBhZGYtbmFtZS1jb2x1bW4nIH1cbn0pXG5leHBvcnQgY2xhc3MgTmFtZUNvbHVtbkNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95IHtcbiAgICBASW5wdXQoKVxuICAgIGNvbnRleHQ6IGFueTtcblxuICAgIEBJbnB1dCgpXG4gICAga2V5ID0gJ25hbWUnO1xuXG4gICAgZGlzcGxheVRleHQkID0gbmV3IEJlaGF2aW9yU3ViamVjdDxzdHJpbmc+KCcnKTtcbiAgICBub2RlOiBOb2RlRW50cnk7XG5cbiAgICBwcml2YXRlIG9uRGVzdHJveSQgPSBuZXcgU3ViamVjdDxib29sZWFuPigpO1xuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBlbGVtZW50OiBFbGVtZW50UmVmLCBwcml2YXRlIGFsZnJlc2NvQXBpU2VydmljZTogQWxmcmVzY29BcGlTZXJ2aWNlKSB7fVxuXG4gICAgbmdPbkluaXQoKSB7XG4gICAgICAgIHRoaXMudXBkYXRlVmFsdWUoKTtcblxuICAgICAgICB0aGlzLmFsZnJlc2NvQXBpU2VydmljZS5ub2RlVXBkYXRlZFxuICAgICAgICAgICAgLnBpcGUodGFrZVVudGlsKHRoaXMub25EZXN0cm95JCkpXG4gICAgICAgICAgICAuc3Vic2NyaWJlKG5vZGUgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJvdzogU2hhcmVEYXRhUm93ID0gdGhpcy5jb250ZXh0LnJvdztcbiAgICAgICAgICAgICAgICBpZiAocm93KSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHsgZW50cnkgfSA9IHJvdy5ub2RlO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChlbnRyeSA9PT0gbm9kZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcm93Lm5vZGUgPSB7IGVudHJ5IH07XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZVZhbHVlKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgdXBkYXRlVmFsdWUoKSB7XG4gICAgICAgIHRoaXMubm9kZSA9IHRoaXMuY29udGV4dC5yb3cubm9kZTtcblxuICAgICAgICBpZiAodGhpcy5ub2RlICYmIHRoaXMubm9kZS5lbnRyeSkge1xuICAgICAgICAgICAgY29uc3QgZGlzcGxheVRleHQgPSB0aGlzLmNvbnRleHQucm93LmdldFZhbHVlKHRoaXMua2V5KTtcbiAgICAgICAgICAgIHRoaXMuZGlzcGxheVRleHQkLm5leHQoZGlzcGxheVRleHQgfHwgdGhpcy5ub2RlLmVudHJ5LmlkKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIG9uQ2xpY2soKSB7XG4gICAgICAgIHRoaXMuZWxlbWVudC5uYXRpdmVFbGVtZW50LmRpc3BhdGNoRXZlbnQoXG4gICAgICAgICAgICBuZXcgQ3VzdG9tRXZlbnQoJ25hbWUtY2xpY2snLCB7XG4gICAgICAgICAgICAgICAgYnViYmxlczogdHJ1ZSxcbiAgICAgICAgICAgICAgICBkZXRhaWw6IHtcbiAgICAgICAgICAgICAgICAgICAgbm9kZTogdGhpcy5ub2RlXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBuZ09uRGVzdHJveSgpIHtcbiAgICAgICAgdGhpcy5vbkRlc3Ryb3kkLm5leHQodHJ1ZSk7XG4gICAgICAgIHRoaXMub25EZXN0cm95JC5jb21wbGV0ZSgpO1xuICAgIH1cbn1cbiJdfQ==