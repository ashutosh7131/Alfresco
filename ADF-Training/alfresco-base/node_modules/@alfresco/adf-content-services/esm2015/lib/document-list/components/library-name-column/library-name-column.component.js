/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, ChangeDetectionStrategy, ViewEncapsulation, Input, ElementRef } from '@angular/core';
import { AlfrescoApiService } from '@alfresco/adf-core';
import { BehaviorSubject, Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@alfresco/adf-core';
import * as ɵngcc2 from '@ngx-translate/core';
import * as ɵngcc3 from '@angular/common';

const _c0 = function (a0) { return { name: a0 }; };
export class LibraryNameColumnComponent {
    constructor(element, alfrescoApiService) {
        this.element = element;
        this.alfrescoApiService = alfrescoApiService;
        this.displayTooltip$ = new BehaviorSubject('');
        this.displayText$ = new BehaviorSubject('');
        this.onDestroy$ = new Subject();
    }
    ngOnInit() {
        this.updateValue();
        this.alfrescoApiService.nodeUpdated
            .pipe(takeUntil(this.onDestroy$))
            .subscribe(node => {
            const row = this.context.row;
            if (row) {
                const { entry } = row.node;
                if (entry === node) {
                    row.node = { entry };
                    this.updateValue();
                }
            }
        });
    }
    updateValue() {
        this.node = this.context.row.node;
        const rows = this.context.data.rows || [];
        if (this.node && this.node.entry) {
            this.displayText$.next(this.makeLibraryTitle(this.node.entry, rows));
            this.displayTooltip$.next(this.makeLibraryTooltip(this.node.entry));
        }
    }
    onClick() {
        this.element.nativeElement.dispatchEvent(new CustomEvent('name-click', {
            bubbles: true,
            detail: {
                node: this.node
            }
        }));
    }
    makeLibraryTooltip(library) {
        const { description, title } = library;
        return description || title || '';
    }
    makeLibraryTitle(library, rows) {
        const entries = rows.map((row) => row.node.entry);
        const { title, id } = library;
        let isDuplicate = false;
        if (entries) {
            isDuplicate = entries.some((entry) => {
                return entry.id !== id && entry.title === title;
            });
        }
        return isDuplicate ? `${title} (${id})` : `${title}`;
    }
    ngOnDestroy() {
        this.onDestroy$.next(true);
        this.onDestroy$.complete();
    }
}
LibraryNameColumnComponent.ɵfac = function LibraryNameColumnComponent_Factory(t) { return new (t || LibraryNameColumnComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.AlfrescoApiService)); };
LibraryNameColumnComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: LibraryNameColumnComponent, selectors: [["adf-library-name-column"]], hostAttrs: [1, "adf-datatable-content-cell", "adf-datatable-link", "adf-library-name-column"], inputs: { context: "context" }, decls: 6, vars: 14, consts: [["role", "link", 1, "adf-datatable-cell-value", 3, "title", "click"]], template: function LibraryNameColumnComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "span", 0);
        ɵngcc0.ɵɵlistener("click", function LibraryNameColumnComponent_Template_span_click_0_listener() { return ctx.onClick(); });
        ɵngcc0.ɵɵpipe(1, "translate");
        ɵngcc0.ɵɵpipe(2, "async");
        ɵngcc0.ɵɵpipe(3, "async");
        ɵngcc0.ɵɵtext(4);
        ɵngcc0.ɵɵpipe(5, "async");
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(3, 8, ctx.displayTooltip$));
        ɵngcc0.ɵɵattribute("aria-label", ɵngcc0.ɵɵpipeBind2(1, 3, "NAME_COLUMN_LINK.ACCESSIBILITY.ARIA_LABEL", ɵngcc0.ɵɵpureFunction1(12, _c0, ɵngcc0.ɵɵpipeBind1(2, 6, ctx.displayText$))));
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(5, 10, ctx.displayText$), " ");
    } }, pipes: [ɵngcc2.TranslatePipe, ɵngcc3.AsyncPipe], encapsulation: 2, changeDetection: 0 });
LibraryNameColumnComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: AlfrescoApiService }
];
LibraryNameColumnComponent.propDecorators = {
    context: [{ type: Input }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(LibraryNameColumnComponent, [{
        type: Component,
        args: [{
                selector: 'adf-library-name-column',
                template: `
        <span
            role="link"
            [attr.aria-label]="'NAME_COLUMN_LINK.ACCESSIBILITY.ARIA_LABEL' | translate:{
                name:  displayText$ | async
            }"
            class="adf-datatable-cell-value"
            title="{{ displayTooltip$ | async }}"
            (click)="onClick()">

            {{ displayText$ | async }}
        </span>
    `,
                changeDetection: ChangeDetectionStrategy.OnPush,
                encapsulation: ViewEncapsulation.None,
                host: {
                    class: 'adf-datatable-content-cell adf-datatable-link adf-library-name-column'
                }
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.AlfrescoApiService }]; }, { context: [{
            type: Input
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlicmFyeS1uYW1lLWNvbHVtbi5jb21wb25lbnQuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL2hvbWUvdHJhdmlzL2J1aWxkL0FsZnJlc2NvL2FsZnJlc2NvLW5nMi1jb21wb25lbnRzL2xpYi9jb250ZW50LXNlcnZpY2VzL3NyYy9saWIvZG9jdW1lbnQtbGlzdC9jb21wb25lbnRzL2xpYnJhcnktbmFtZS1jb2x1bW4vbGlicmFyeS1uYW1lLWNvbHVtbi5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUVILE9BQU8sRUFDSCxTQUFTLEVBQ1QsdUJBQXVCLEVBQ3ZCLGlCQUFpQixFQUVqQixLQUFLLEVBQ0wsVUFBVSxFQUViLE1BQU0sZUFBZSxDQUFDO0FBR3ZCLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ3hELE9BQU8sRUFBRSxlQUFlLEVBQUUsT0FBTyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ2hELE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7Ozs7OztBQXVCM0MsTUFBTSxPQUFPLDBCQUEwQjtBQUFHLElBVXRDLFlBQ1ksT0FBbUIsRUFDbkIsa0JBQXNDO0FBQ25ELFFBRmEsWUFBTyxHQUFQLE9BQU8sQ0FBWTtBQUFDLFFBQ3BCLHVCQUFrQixHQUFsQixrQkFBa0IsQ0FBb0I7QUFDdEQsUUFUSSxvQkFBZSxHQUFHLElBQUksZUFBZSxDQUFTLEVBQUUsQ0FBQyxDQUFDO0FBQ3RELFFBQUksaUJBQVksR0FBRyxJQUFJLGVBQWUsQ0FBUyxFQUFFLENBQUMsQ0FBQztBQUNuRCxRQUVZLGVBQVUsR0FBRyxJQUFJLE9BQU8sRUFBVyxDQUFDO0FBQ2hELElBSU8sQ0FBQztBQUNS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QUFDVCxRQUNRLE9BQU8sV0FBVyxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssS0FBSyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLEVBQUUsQ0FBQztBQUM3RCxJQUFJLENBQUM7QUFDTCxJQUNJLFdBQVc7QUFDZixRQUFRLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ25DLFFBQVEsSUFBSSxDQUFDLFVBQVUsQ0FBQyxRQUFRLEVBQUUsQ0FBQztBQUNuQyxJQUFJLENBQUM7QUFDTDtzREFyR0MsU0FBUyxTQUFDLGtCQUNQLFFBQVEsRUFBRSx5QkFBeUIsa0JBQ25DLFFBQVEsRUFBRTs0U0FZVCxrQkFDRCxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTSxrQkFDL0MsYUFBYSxFQUFFLGlCQUFpQixDQUFDLElBQUksa0JBQ3JDLElBQUk7QUFBRSxzQkFDRixLQUFLLEVBQUU7dURBQXVFLGtCQUNqRixjQUNKOzs7Ozs7Ozs7Ozs7a0dBQ0k7QUFBQztBQUFvRCxZQTlCdEQsVUFBVTtBQUNaLFlBSU8sa0JBQWtCO0FBQUc7QUFBRztBQUNYLHNCQXlCakIsS0FBSztBQUNUOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztvQkFBRTtBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHtcbiAgICBDb21wb25lbnQsXG4gICAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksXG4gICAgVmlld0VuY2Fwc3VsYXRpb24sXG4gICAgT25Jbml0LFxuICAgIElucHV0LFxuICAgIEVsZW1lbnRSZWYsXG4gICAgT25EZXN0cm95XG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTm9kZUVudHJ5LCBTaXRlIH0gZnJvbSAnQGFsZnJlc2NvL2pzLWFwaSc7XG5pbXBvcnQgeyBTaGFyZURhdGFSb3cgfSBmcm9tICcuLi8uLi9kYXRhL3NoYXJlLWRhdGEtcm93Lm1vZGVsJztcbmltcG9ydCB7IEFsZnJlc2NvQXBpU2VydmljZSB9IGZyb20gJ0BhbGZyZXNjby9hZGYtY29yZSc7XG5pbXBvcnQgeyBCZWhhdmlvclN1YmplY3QsIFN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IHRha2VVbnRpbCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICdhZGYtbGlicmFyeS1uYW1lLWNvbHVtbicsXG4gICAgdGVtcGxhdGU6IGBcbiAgICAgICAgPHNwYW5cbiAgICAgICAgICAgIHJvbGU9XCJsaW5rXCJcbiAgICAgICAgICAgIFthdHRyLmFyaWEtbGFiZWxdPVwiJ05BTUVfQ09MVU1OX0xJTksuQUNDRVNTSUJJTElUWS5BUklBX0xBQkVMJyB8IHRyYW5zbGF0ZTp7XG4gICAgICAgICAgICAgICAgbmFtZTogIGRpc3BsYXlUZXh0JCB8IGFzeW5jXG4gICAgICAgICAgICB9XCJcbiAgICAgICAgICAgIGNsYXNzPVwiYWRmLWRhdGF0YWJsZS1jZWxsLXZhbHVlXCJcbiAgICAgICAgICAgIHRpdGxlPVwie3sgZGlzcGxheVRvb2x0aXAkIHwgYXN5bmMgfX1cIlxuICAgICAgICAgICAgKGNsaWNrKT1cIm9uQ2xpY2soKVwiPlxuXG4gICAgICAgICAgICB7eyBkaXNwbGF5VGV4dCQgfCBhc3luYyB9fVxuICAgICAgICA8L3NwYW4+XG4gICAgYCxcbiAgICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgICBlbmNhcHN1bGF0aW9uOiBWaWV3RW5jYXBzdWxhdGlvbi5Ob25lLFxuICAgIGhvc3Q6IHtcbiAgICAgICAgY2xhc3M6ICdhZGYtZGF0YXRhYmxlLWNvbnRlbnQtY2VsbCBhZGYtZGF0YXRhYmxlLWxpbmsgYWRmLWxpYnJhcnktbmFtZS1jb2x1bW4nXG4gICAgfVxufSlcbmV4cG9ydCBjbGFzcyBMaWJyYXJ5TmFtZUNvbHVtbkNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95IHtcbiAgICBASW5wdXQoKVxuICAgIGNvbnRleHQ6IGFueTtcblxuICAgIGRpc3BsYXlUb29sdGlwJCA9IG5ldyBCZWhhdmlvclN1YmplY3Q8c3RyaW5nPignJyk7XG4gICAgZGlzcGxheVRleHQkID0gbmV3IEJlaGF2aW9yU3ViamVjdDxzdHJpbmc+KCcnKTtcbiAgICBub2RlOiBOb2RlRW50cnk7XG5cbiAgICBwcml2YXRlIG9uRGVzdHJveSQgPSBuZXcgU3ViamVjdDxib29sZWFuPigpO1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHByaXZhdGUgZWxlbWVudDogRWxlbWVudFJlZixcbiAgICAgICAgcHJpdmF0ZSBhbGZyZXNjb0FwaVNlcnZpY2U6IEFsZnJlc2NvQXBpU2VydmljZVxuICAgICkge31cblxuICAgIG5nT25Jbml0KCkge1xuICAgICAgICB0aGlzLnVwZGF0ZVZhbHVlKCk7XG5cbiAgICAgICAgdGhpcy5hbGZyZXNjb0FwaVNlcnZpY2Uubm9kZVVwZGF0ZWRcbiAgICAgICAgICAgIC5waXBlKHRha2VVbnRpbCh0aGlzLm9uRGVzdHJveSQpKVxuICAgICAgICAgICAgLnN1YnNjcmliZShub2RlID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCByb3c6IFNoYXJlRGF0YVJvdyA9IHRoaXMuY29udGV4dC5yb3c7XG4gICAgICAgICAgICAgICAgaWYgKHJvdykge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB7IGVudHJ5IH0gPSByb3cubm9kZTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoZW50cnkgPT09IG5vZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJvdy5ub2RlID0geyBlbnRyeSB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy51cGRhdGVWYWx1ZSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIHVwZGF0ZVZhbHVlKCkge1xuICAgICAgICB0aGlzLm5vZGUgPSB0aGlzLmNvbnRleHQucm93Lm5vZGU7XG4gICAgICAgIGNvbnN0IHJvd3M6IEFycmF5PFNoYXJlRGF0YVJvdz4gPSB0aGlzLmNvbnRleHQuZGF0YS5yb3dzIHx8IFtdO1xuICAgICAgICBpZiAodGhpcy5ub2RlICYmIHRoaXMubm9kZS5lbnRyeSkge1xuICAgICAgICAgICAgdGhpcy5kaXNwbGF5VGV4dCQubmV4dChcbiAgICAgICAgICAgICAgICB0aGlzLm1ha2VMaWJyYXJ5VGl0bGUoPGFueT4gdGhpcy5ub2RlLmVudHJ5LCByb3dzKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHRoaXMuZGlzcGxheVRvb2x0aXAkLm5leHQodGhpcy5tYWtlTGlicmFyeVRvb2x0aXAodGhpcy5ub2RlLmVudHJ5KSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBvbkNsaWNrKCkge1xuICAgICAgICB0aGlzLmVsZW1lbnQubmF0aXZlRWxlbWVudC5kaXNwYXRjaEV2ZW50KFxuICAgICAgICAgICAgbmV3IEN1c3RvbUV2ZW50KCduYW1lLWNsaWNrJywge1xuICAgICAgICAgICAgICAgIGJ1YmJsZXM6IHRydWUsXG4gICAgICAgICAgICAgICAgZGV0YWlsOiB7XG4gICAgICAgICAgICAgICAgICAgIG5vZGU6IHRoaXMubm9kZVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgbWFrZUxpYnJhcnlUb29sdGlwKGxpYnJhcnk6IGFueSk6IHN0cmluZyB7XG4gICAgICAgIGNvbnN0IHsgZGVzY3JpcHRpb24sIHRpdGxlIH0gPSBsaWJyYXJ5O1xuXG4gICAgICAgIHJldHVybiBkZXNjcmlwdGlvbiB8fCB0aXRsZSB8fCAnJztcbiAgICB9XG5cbiAgICBtYWtlTGlicmFyeVRpdGxlKGxpYnJhcnk6IFNpdGUsIHJvd3M6IEFycmF5PFNoYXJlRGF0YVJvdz4pOiBzdHJpbmcge1xuICAgICAgICBjb25zdCBlbnRyaWVzID0gcm93cy5tYXAoKHJvdzogU2hhcmVEYXRhUm93KSA9PiByb3cubm9kZS5lbnRyeSk7XG4gICAgICAgIGNvbnN0IHsgdGl0bGUsIGlkIH0gPSBsaWJyYXJ5O1xuXG4gICAgICAgIGxldCBpc0R1cGxpY2F0ZSA9IGZhbHNlO1xuXG4gICAgICAgIGlmIChlbnRyaWVzKSB7XG4gICAgICAgICAgICBpc0R1cGxpY2F0ZSA9IGVudHJpZXMuc29tZSgoZW50cnk6IGFueSkgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiBlbnRyeS5pZCAhPT0gaWQgJiYgZW50cnkudGl0bGUgPT09IHRpdGxlO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gaXNEdXBsaWNhdGUgPyBgJHt0aXRsZX0gKCR7aWR9KWAgOiBgJHt0aXRsZX1gO1xuICAgIH1cblxuICAgIG5nT25EZXN0cm95KCkge1xuICAgICAgICB0aGlzLm9uRGVzdHJveSQubmV4dCh0cnVlKTtcbiAgICAgICAgdGhpcy5vbkRlc3Ryb3kkLmNvbXBsZXRlKCk7XG4gICAgfVxufVxuIl19