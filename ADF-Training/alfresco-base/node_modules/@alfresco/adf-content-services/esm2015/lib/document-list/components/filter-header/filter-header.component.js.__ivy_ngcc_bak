/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, Inject, Input, Output, EventEmitter } from '@angular/core';
import { DocumentListComponent } from '../document-list.component';
import { SEARCH_QUERY_SERVICE_TOKEN } from '../../../search/search-query-service.token';
import { SearchHeaderQueryBuilderService } from '../../../search/services/search-header-query-builder.service';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
export class FilterHeaderComponent {
    constructor(documentList, searchFilterQueryBuilder) {
        this.documentList = documentList;
        this.searchFilterQueryBuilder = searchFilterQueryBuilder;
        this.value = {};
        this.filterSelection = new EventEmitter();
        this.onDestroy$ = new Subject();
        this.isFilterServiceActive = this.searchFilterQueryBuilder.isFilterServiceActive();
    }
    ngOnInit() {
        this.searchFilterQueryBuilder.executed
            .pipe(takeUntil(this.onDestroy$))
            .subscribe((newNodePaging) => {
            this.documentList.node = newNodePaging;
            this.documentList.reload();
        });
        this.initDataPagination();
        this.initDataSorting();
    }
    ngOnChanges(changes) {
        if (changes['currentFolderId'] && changes['currentFolderId'].currentValue) {
            this.resetFilterHeader();
            this.configureSearchParent(changes['currentFolderId'].currentValue);
        }
    }
    onFilterSelectionChange() {
        this.filterSelection.emit(this.searchFilterQueryBuilder.getActiveFilters());
        if (this.searchFilterQueryBuilder.isNoFilterActive()) {
            this.documentList.node = null;
            this.documentList.reload();
        }
    }
    resetFilterHeader() {
        this.searchFilterQueryBuilder.resetActiveFilters();
    }
    initDataPagination() {
        this.documentList.pagination
            .pipe(takeUntil(this.onDestroy$))
            .subscribe((newPagination) => {
            this.searchFilterQueryBuilder.setupCurrentPagination(newPagination.maxItems, newPagination.skipCount);
        });
    }
    initDataSorting() {
        this.documentList.sortingSubject
            .pipe(takeUntil(this.onDestroy$))
            .subscribe((sorting) => {
            this.searchFilterQueryBuilder.setSorting(sorting);
        });
    }
    configureSearchParent(currentFolderId) {
        if (this.searchFilterQueryBuilder.isCustomSourceNode(currentFolderId)) {
            this.searchFilterQueryBuilder.getNodeIdForCustomSource(currentFolderId).subscribe((node) => {
                this.initSearchHeader(node.id);
            });
        }
        else {
            this.initSearchHeader(currentFolderId);
        }
    }
    initSearchHeader(currentFolderId) {
        this.searchFilterQueryBuilder.setCurrentRootFolderId(currentFolderId);
        if (this.value) {
            Object.keys(this.value).forEach((columnKey) => {
                this.searchFilterQueryBuilder.setActiveFilter(columnKey, this.value[columnKey]);
            });
        }
    }
    ngOnDestroy() {
        this.onDestroy$.next(true);
        this.onDestroy$.complete();
    }
}
FilterHeaderComponent.decorators = [
    { type: Component, args: [{
                selector: 'adf-filter-header',
                template: "<div *ngIf=\"isFilterServiceActive\">\n    <adf-header-filter-template>\n        <ng-template let-col>\n            <adf-search-filter-container [col]=\"col\"\n                                         [value]=\"value\"\n                                         (filterChange)=\"onFilterSelectionChange()\">\n            </adf-search-filter-container>\n        </ng-template>\n    </adf-header-filter-template>\n</div>\n",
                providers: [{ provide: SEARCH_QUERY_SERVICE_TOKEN, useClass: SearchHeaderQueryBuilderService }]
            },] }
];
FilterHeaderComponent.ctorParameters = () => [
    { type: DocumentListComponent, decorators: [{ type: Inject, args: [DocumentListComponent,] }] },
    { type: SearchHeaderQueryBuilderService, decorators: [{ type: Inject, args: [SEARCH_QUERY_SERVICE_TOKEN,] }] }
];
FilterHeaderComponent.propDecorators = {
    value: [{ type: Input }],
    currentFolderId: [{ type: Input }],
    filterSelection: [{ type: Output }]
};
//# sourceMappingURL=data:application/json;base64,