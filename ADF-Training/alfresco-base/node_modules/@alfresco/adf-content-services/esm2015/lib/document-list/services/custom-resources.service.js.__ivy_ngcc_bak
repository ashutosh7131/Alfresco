import { AlfrescoApiService, LogService } from '@alfresco/adf-core';
import { SearchRequest, SiteMemberPaging, PeopleApi, SitesApi, SearchApi, FavoritesApi, SharedlinksApi, TrashcanApi, NodesApi } from '@alfresco/js-api';
import { Injectable } from '@angular/core';
import { Observable, from, of, throwError } from 'rxjs';
import { catchError, map } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@alfresco/adf-core";
export class CustomResourcesService {
    constructor(apiService, logService) {
        this.apiService = apiService;
        this.logService = logService;
        this.CREATE_PERMISSION = 'create';
    }
    get peopleApi() {
        var _a;
        this._peopleApi = (_a = this._peopleApi) !== null && _a !== void 0 ? _a : new PeopleApi(this.apiService.getInstance());
        return this._peopleApi;
    }
    get sitesApi() {
        var _a;
        this._sitesApi = (_a = this._sitesApi) !== null && _a !== void 0 ? _a : new SitesApi(this.apiService.getInstance());
        return this._sitesApi;
    }
    get trashcanApi() {
        var _a;
        this._trashcanApi = (_a = this._trashcanApi) !== null && _a !== void 0 ? _a : new TrashcanApi(this.apiService.getInstance());
        return this._trashcanApi;
    }
    get searchApi() {
        var _a;
        this._searchApi = (_a = this._searchApi) !== null && _a !== void 0 ? _a : new SearchApi(this.apiService.getInstance());
        return this._searchApi;
    }
    get sharedLinksApi() {
        var _a;
        this._sharedLinksApi = (_a = this._sharedLinksApi) !== null && _a !== void 0 ? _a : new SharedlinksApi(this.apiService.getInstance());
        return this._sharedLinksApi;
    }
    get favoritesApi() {
        var _a;
        this._favoritesApi = (_a = this._favoritesApi) !== null && _a !== void 0 ? _a : new FavoritesApi(this.apiService.getInstance());
        return this._favoritesApi;
    }
    get nodesApi() {
        var _a;
        this._nodesApi = (_a = this._nodesApi) !== null && _a !== void 0 ? _a : new NodesApi(this.apiService.getInstance());
        return this._nodesApi;
    }
    getRecentFiles(personId, pagination, filters) {
        const defaultFilter = [
            'TYPE:"content"',
            '-PNAME:"0/wiki"',
            '-TYPE:"app:filelink"',
            '-TYPE:"cm:thumbnail"',
            '-TYPE:"cm:failedThumbnail"',
            '-TYPE:"cm:rating"',
            '-TYPE:"dl:dataList"',
            '-TYPE:"dl:todoList"',
            '-TYPE:"dl:issue"',
            '-TYPE:"dl:contact"',
            '-TYPE:"dl:eventAgenda"',
            '-TYPE:"dl:event"',
            '-TYPE:"dl:task"',
            '-TYPE:"dl:simpletask"',
            '-TYPE:"dl:meetingAgenda"',
            '-TYPE:"dl:location"',
            '-TYPE:"fm:topic"',
            '-TYPE:"fm:post"',
            '-TYPE:"ia:calendarEvent"',
            '-TYPE:"lnk:link"'
        ];
        return new Observable((observer) => {
            this.peopleApi.getPerson(personId)
                .then((person) => {
                const username = person.entry.id;
                const filterQueries = [
                    { query: `cm:modified:[NOW/DAY-30DAYS TO NOW/DAY+1DAY]` },
                    { query: `cm:modifier:${username} OR cm:creator:${username}` },
                    { query: defaultFilter.join(' AND ') }
                ];
                if (filters && filters.length > 0) {
                    filterQueries.push({
                        query: filters.join()
                    });
                }
                const query = new SearchRequest({
                    query: {
                        query: '*',
                        language: 'afts'
                    },
                    filterQueries,
                    include: ['path', 'properties', 'allowableOperations'],
                    sort: [{
                            type: 'FIELD',
                            field: 'cm:modified',
                            ascending: false
                        }],
                    paging: {
                        maxItems: pagination.maxItems,
                        skipCount: pagination.skipCount
                    }
                });
                return this.searchApi.search(query)
                    .then((searchResult) => {
                    observer.next(searchResult);
                    observer.complete();
                }, (err) => {
                    observer.error(err);
                    observer.complete();
                });
            }, (err) => {
                observer.error(err);
                observer.complete();
            });
        }).pipe(catchError((err) => this.handleError(err)));
    }
    loadFavorites(pagination, includeFields = [], where) {
        const includeFieldsRequest = this.getIncludesFields(includeFields);
        const defaultPredicate = '(EXISTS(target/file) OR EXISTS(target/folder))';
        const options = {
            maxItems: pagination.maxItems,
            skipCount: pagination.skipCount,
            where: where ? `${where} AND ${defaultPredicate}` : defaultPredicate,
            include: includeFieldsRequest
        };
        return new Observable((observer) => {
            this.favoritesApi.listFavorites('-me-', options)
                .then((result) => {
                const page = {
                    list: {
                        entries: result.list.entries
                            .map(({ entry }) => {
                            const target = entry.target.file || entry.target.folder;
                            target.properties = Object.assign(Object.assign({}, (target.properties || {
                                'cm:title': entry.title || target.title,
                                'cm:description': entry.description || target.description
                            })), (entry.properties || {}));
                            return {
                                entry: target
                            };
                        }),
                        pagination: result.list.pagination
                    }
                };
                observer.next(page);
                observer.complete();
            }, (err) => {
                observer.error(err);
                observer.complete();
            });
        }).pipe(catchError((err) => this.handleError(err)));
    }
    loadMemberSites(pagination, where) {
        const options = {
            include: ['properties'],
            maxItems: pagination.maxItems,
            skipCount: pagination.skipCount,
            where
        };
        return new Observable((observer) => {
            this.sitesApi.listSiteMembershipsForPerson('-me-', options)
                .then((result) => {
                const page = new SiteMemberPaging({
                    list: {
                        entries: result.list.entries
                            .map(({ entry: { site } }) => {
                            site.allowableOperations = site.allowableOperations ? site.allowableOperations : [this.CREATE_PERMISSION];
                            site.name = site.name || site.title;
                            return {
                                entry: site
                            };
                        }),
                        pagination: result.list.pagination
                    }
                });
                observer.next(page);
                observer.complete();
            }, (err) => {
                observer.error(err);
                observer.complete();
            });
        }).pipe(catchError((err) => this.handleError(err)));
    }
    loadSites(pagination, where) {
        const options = {
            include: ['properties', 'aspectNames'],
            maxItems: pagination.maxItems,
            skipCount: pagination.skipCount,
            where
        };
        return new Observable((observer) => {
            this.sitesApi
                .listSites(options)
                .then((page) => {
                page.list.entries.map(({ entry }) => {
                    entry.name = entry.name || entry.title;
                    return { entry };
                });
                observer.next(page);
                observer.complete();
            }, (err) => {
                observer.error(err);
                observer.complete();
            });
        }).pipe(catchError((err) => this.handleError(err)));
    }
    loadTrashcan(pagination, includeFields = []) {
        const includeFieldsRequest = this.getIncludesFields(includeFields);
        const options = {
            include: includeFieldsRequest,
            maxItems: pagination.maxItems,
            skipCount: pagination.skipCount
        };
        return from(this.trashcanApi.listDeletedNodes(options))
            .pipe(catchError((err) => this.handleError(err)));
    }
    loadSharedLinks(pagination, includeFields = [], where) {
        const includeFieldsRequest = this.getIncludesFields(includeFields);
        const options = {
            include: includeFieldsRequest,
            maxItems: pagination.maxItems,
            skipCount: pagination.skipCount,
            where
        };
        return from(this.sharedLinksApi.listSharedLinks(options))
            .pipe(catchError((err) => this.handleError(err)));
    }
    isCustomSource(folderId) {
        let isCustomSources = false;
        const sources = ['-trashcan-', '-sharedlinks-', '-sites-', '-mysites-', '-favorites-', '-recent-'];
        if (sources.indexOf(folderId) > -1) {
            isCustomSources = true;
        }
        return isCustomSources;
    }
    isSupportedSource(folderId) {
        let isSupportedSources = false;
        const sources = ['-my-', '-root-', '-shared-'];
        if (sources.indexOf(folderId) > -1) {
            isSupportedSources = true;
        }
        return isSupportedSources;
    }
    loadFolderByNodeId(nodeId, pagination, includeFields = [], where) {
        if (nodeId === '-trashcan-') {
            return this.loadTrashcan(pagination, includeFields);
        }
        else if (nodeId === '-sharedlinks-') {
            return this.loadSharedLinks(pagination, includeFields, where);
        }
        else if (nodeId === '-sites-') {
            return this.loadSites(pagination, where);
        }
        else if (nodeId === '-mysites-') {
            return this.loadMemberSites(pagination, where);
        }
        else if (nodeId === '-favorites-') {
            return this.loadFavorites(pagination, includeFields, where);
        }
        else if (nodeId === '-recent-') {
            return this.getRecentFiles('-me-', pagination);
        }
    }
    getCorrespondingNodeIds(nodeId, pagination = {}) {
        if (this.isCustomSource(nodeId)) {
            return this.loadFolderByNodeId(nodeId, pagination)
                .pipe(map((result) => {
                return result.list.entries.map((node) => this.getIdFromEntry(node, nodeId));
            }));
        }
        else if (nodeId) {
            return from(this.nodesApi.getNode(nodeId)
                .then((node) => [node.entry.id]));
        }
        return of([]);
    }
    getIdFromEntry(node, nodeId) {
        if (nodeId === '-sharedlinks-') {
            return node.entry.nodeId;
        }
        else if (nodeId === '-sites-' || nodeId === '-mysites-') {
            return node.entry.guid;
        }
        else if (nodeId === '-favorites-') {
            return node.entry.targetGuid;
        }
        else {
            return node.entry.id;
        }
    }
    hasCorrespondingNodeIds(nodeId) {
        return this.isCustomSource(nodeId) || this.isSupportedSource(nodeId);
    }
    getIncludesFields(includeFields) {
        return ['path', 'properties', 'allowableOperations', 'permissions', 'aspectNames', ...includeFields]
            .filter((element, index, array) => index === array.indexOf(element));
    }
    handleError(error) {
        this.logService.error(error);
        return throwError(error || 'Server error');
    }
}
CustomResourcesService.ɵprov = i0.ɵɵdefineInjectable({ factory: function CustomResourcesService_Factory() { return new CustomResourcesService(i0.ɵɵinject(i1.AlfrescoApiService), i0.ɵɵinject(i1.LogService)); }, token: CustomResourcesService, providedIn: "root" });
CustomResourcesService.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] }
];
CustomResourcesService.ctorParameters = () => [
    { type: AlfrescoApiService },
    { type: LogService }
];
//# sourceMappingURL=data:application/json;base64,