import { Injectable, Output, EventEmitter } from '@angular/core';
import { Subject } from 'rxjs';
import { AlfrescoApiService, ContentService, NodeDownloadDirective, DownloadService } from '@alfresco/adf-core';
import { MatDialog } from '@angular/material/dialog';
import { DocumentListService } from './document-list.service';
import { ContentNodeDialogService } from '../../content-node-selector/content-node-dialog.service';
import { NodeAction } from '../models/node-action.enum';
import * as i0 from "@angular/core";
import * as i1 from "../../content-node-selector/content-node-dialog.service";
import * as i2 from "@angular/material/dialog";
import * as i3 from "@alfresco/adf-core";
import * as i4 from "./document-list.service";
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../../content-node-selector/content-node-dialog.service';
import * as ɵngcc2 from '@angular/material/dialog';
import * as ɵngcc3 from '@alfresco/adf-core';
import * as ɵngcc4 from './document-list.service';
export class NodeActionsService {
    constructor(contentDialogService, dialogRef, content, documentListService, apiService, dialog, downloadService) {
        this.contentDialogService = contentDialogService;
        this.dialogRef = dialogRef;
        this.content = content;
        this.documentListService = documentListService;
        this.apiService = apiService;
        this.dialog = dialog;
        this.downloadService = downloadService;
        this.error = new EventEmitter();
    }
    downloadNode(node) {
        new NodeDownloadDirective(this.apiService, this.downloadService, this.dialog)
            .downloadNode(node);
    }
    copyContent(contentEntry, permission) {
        return this.doFileOperation(NodeAction.COPY, 'content', contentEntry, permission);
    }
    copyFolder(contentEntry, permission) {
        return this.doFileOperation(NodeAction.COPY, 'folder', contentEntry, permission);
    }
    moveContent(contentEntry, permission) {
        return this.doFileOperation(NodeAction.MOVE, 'content', contentEntry, permission);
    }
    moveFolder(contentEntry, permission) {
        return this.doFileOperation(NodeAction.MOVE, 'folder', contentEntry, permission);
    }
    doFileOperation(action, type, contentEntry, permission) {
        const observable = new Subject();
        this.contentDialogService
            .openCopyMoveDialog(action, contentEntry, permission)
            .subscribe((selections) => {
            const selection = selections[0];
            this.documentListService[`${action.toLowerCase()}Node`].call(this.documentListService, contentEntry.id, selection.id)
                .subscribe(observable.next.bind(observable, `OPERATION.SUCCESS.${type.toUpperCase()}.${action}`), observable.error.bind(observable));
        }, (error) => {
            observable.error(error);
            return observable;
        });
        return observable;
    }
}
NodeActionsService.ɵfac = function NodeActionsService_Factory(t) { return new (t || NodeActionsService)(ɵngcc0.ɵɵinject(ɵngcc1.ContentNodeDialogService), ɵngcc0.ɵɵinject(ɵngcc2.MatDialog), ɵngcc0.ɵɵinject(ɵngcc3.ContentService), ɵngcc0.ɵɵinject(ɵngcc4.DocumentListService), ɵngcc0.ɵɵinject(ɵngcc3.AlfrescoApiService), ɵngcc0.ɵɵinject(ɵngcc2.MatDialog), ɵngcc0.ɵɵinject(ɵngcc3.DownloadService)); };
NodeActionsService.ɵprov = i0.ɵɵdefineInjectable({ factory: function NodeActionsService_Factory() { return new NodeActionsService(i0.ɵɵinject(i1.ContentNodeDialogService), i0.ɵɵinject(i2.MatDialog), i0.ɵɵinject(i3.ContentService), i0.ɵɵinject(i4.DocumentListService), i0.ɵɵinject(i3.AlfrescoApiService), i0.ɵɵinject(i2.MatDialog), i0.ɵɵinject(i3.DownloadService)); }, token: NodeActionsService, providedIn: "root" });
NodeActionsService.ctorParameters = () => [
    { type: ContentNodeDialogService },
    { type: MatDialog },
    { type: ContentService },
    { type: DocumentListService },
    { type: AlfrescoApiService },
    { type: MatDialog },
    { type: DownloadService }
];
NodeActionsService.propDecorators = {
    error: [{ type: Output }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NodeActionsService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc1.ContentNodeDialogService }, { type: ɵngcc2.MatDialog }, { type: ɵngcc3.ContentService }, { type: ɵngcc4.DocumentListService }, { type: ɵngcc3.AlfrescoApiService }, { type: ɵngcc2.MatDialog }, { type: ɵngcc3.DownloadService }]; }, { error: [{
            type: Output
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,