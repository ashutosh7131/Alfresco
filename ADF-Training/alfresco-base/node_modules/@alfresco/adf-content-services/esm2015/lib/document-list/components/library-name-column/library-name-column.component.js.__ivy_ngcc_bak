/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, ChangeDetectionStrategy, ViewEncapsulation, Input, ElementRef } from '@angular/core';
import { AlfrescoApiService } from '@alfresco/adf-core';
import { BehaviorSubject, Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
export class LibraryNameColumnComponent {
    constructor(element, alfrescoApiService) {
        this.element = element;
        this.alfrescoApiService = alfrescoApiService;
        this.displayTooltip$ = new BehaviorSubject('');
        this.displayText$ = new BehaviorSubject('');
        this.onDestroy$ = new Subject();
    }
    ngOnInit() {
        this.updateValue();
        this.alfrescoApiService.nodeUpdated
            .pipe(takeUntil(this.onDestroy$))
            .subscribe(node => {
            const row = this.context.row;
            if (row) {
                const { entry } = row.node;
                if (entry === node) {
                    row.node = { entry };
                    this.updateValue();
                }
            }
        });
    }
    updateValue() {
        this.node = this.context.row.node;
        const rows = this.context.data.rows || [];
        if (this.node && this.node.entry) {
            this.displayText$.next(this.makeLibraryTitle(this.node.entry, rows));
            this.displayTooltip$.next(this.makeLibraryTooltip(this.node.entry));
        }
    }
    onClick() {
        this.element.nativeElement.dispatchEvent(new CustomEvent('name-click', {
            bubbles: true,
            detail: {
                node: this.node
            }
        }));
    }
    makeLibraryTooltip(library) {
        const { description, title } = library;
        return description || title || '';
    }
    makeLibraryTitle(library, rows) {
        const entries = rows.map((row) => row.node.entry);
        const { title, id } = library;
        let isDuplicate = false;
        if (entries) {
            isDuplicate = entries.some((entry) => {
                return entry.id !== id && entry.title === title;
            });
        }
        return isDuplicate ? `${title} (${id})` : `${title}`;
    }
    ngOnDestroy() {
        this.onDestroy$.next(true);
        this.onDestroy$.complete();
    }
}
LibraryNameColumnComponent.decorators = [
    { type: Component, args: [{
                selector: 'adf-library-name-column',
                template: `
        <span
            role="link"
            [attr.aria-label]="'NAME_COLUMN_LINK.ACCESSIBILITY.ARIA_LABEL' | translate:{
                name:  displayText$ | async
            }"
            class="adf-datatable-cell-value"
            title="{{ displayTooltip$ | async }}"
            (click)="onClick()">

            {{ displayText$ | async }}
        </span>
    `,
                changeDetection: ChangeDetectionStrategy.OnPush,
                encapsulation: ViewEncapsulation.None,
                host: {
                    class: 'adf-datatable-content-cell adf-datatable-link adf-library-name-column'
                }
            },] }
];
LibraryNameColumnComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: AlfrescoApiService }
];
LibraryNameColumnComponent.propDecorators = {
    context: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,