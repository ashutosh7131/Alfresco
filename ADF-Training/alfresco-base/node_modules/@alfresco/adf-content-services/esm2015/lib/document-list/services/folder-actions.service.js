import { ContentService, TranslationService } from '@alfresco/adf-core';
import { Injectable } from '@angular/core';
import { Subject, throwError, of } from 'rxjs';
import { PermissionModel } from '../models/permissions.model';
import { DocumentListService } from './document-list.service';
import { NodeActionsService } from './node-actions.service';
import * as i0 from "@angular/core";
import * as i1 from "./node-actions.service";
import * as i2 from "./document-list.service";
import * as i3 from "@alfresco/adf-core";
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './node-actions.service';
import * as ɵngcc2 from './document-list.service';
import * as ɵngcc3 from '@alfresco/adf-core';
export class FolderActionsService {
    constructor(nodeActionsService, documentListService, contentService, translation) {
        this.nodeActionsService = nodeActionsService;
        this.documentListService = documentListService;
        this.contentService = contentService;
        this.translation = translation;
        this.permissionEvent = new Subject();
        this.error = new Subject();
        this.success = new Subject();
        this.handlers = {};
        this.setupActionHandlers();
    }
    getHandler(key) {
        if (key) {
            const lKey = key.toLowerCase();
            return this.handlers[lKey] || null;
        }
        return null;
    }
    setHandler(key, handler) {
        if (key) {
            const lKey = key.toLowerCase();
            this.handlers[lKey] = handler;
            return true;
        }
        return false;
    }
    canExecuteAction(nodeEntry) {
        return this.documentListService && nodeEntry && nodeEntry.entry.isFolder === true;
    }
    setupActionHandlers() {
        this.handlers['copy'] = this.copyNode.bind(this);
        this.handlers['move'] = this.moveNode.bind(this);
        this.handlers['delete'] = this.deleteNode.bind(this);
        this.handlers['download'] = this.downloadNode.bind(this);
    }
    downloadNode(nodeEntry) {
        this.nodeActionsService.downloadNode(nodeEntry);
    }
    copyNode(nodeEntry, target, permission) {
        const actionObservable = this.nodeActionsService.copyFolder(nodeEntry.entry, permission);
        this.prepareHandlers(actionObservable, target);
        return actionObservable;
    }
    moveNode(nodeEntry, target, permission) {
        const actionObservable = this.nodeActionsService.moveFolder(nodeEntry.entry, permission);
        this.prepareHandlers(actionObservable, target);
        return actionObservable;
    }
    prepareHandlers(actionObservable, target) {
        actionObservable.subscribe((fileOperationMessage) => {
            if (target && typeof target.reload === 'function') {
                target.reload();
            }
            this.success.next(fileOperationMessage);
        }, this.error.next.bind(this.error));
    }
    deleteNode(node, target, permission) {
        if (this.canExecuteAction(node)) {
            if (this.contentService.hasAllowableOperations(node.entry, permission)) {
                const handlerObservable = this.documentListService.deleteNode(node.entry.id);
                handlerObservable.subscribe(() => {
                    if (target && typeof target.reload === 'function') {
                        target.reload();
                    }
                    const message = this.translation.instant('CORE.DELETE_NODE.SINGULAR', { name: node.entry.name });
                    this.success.next(message);
                }, () => {
                    const message = this.translation.instant('CORE.DELETE_NODE.ERROR_SINGULAR', { name: node.entry.name });
                    this.error.next(message);
                });
                return handlerObservable;
            }
            else {
                this.permissionEvent.next(new PermissionModel({ type: 'folder', action: 'delete', permission: permission }));
                return throwError(new Error('No permission to delete'));
            }
        }
        return of();
    }
}
FolderActionsService.ɵfac = function FolderActionsService_Factory(t) { return new (t || FolderActionsService)(ɵngcc0.ɵɵinject(ɵngcc1.NodeActionsService), ɵngcc0.ɵɵinject(ɵngcc2.DocumentListService), ɵngcc0.ɵɵinject(ɵngcc3.ContentService), ɵngcc0.ɵɵinject(ɵngcc3.TranslationService)); };
FolderActionsService.ɵprov = i0.ɵɵdefineInjectable({ factory: function FolderActionsService_Factory() { return new FolderActionsService(i0.ɵɵinject(i1.NodeActionsService), i0.ɵɵinject(i2.DocumentListService), i0.ɵɵinject(i3.ContentService), i0.ɵɵinject(i3.TranslationService)); }, token: FolderActionsService, providedIn: "root" });
FolderActionsService.ctorParameters = () => [
    { type: NodeActionsService },
    { type: DocumentListService },
    { type: ContentService },
    { type: TranslationService }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FolderActionsService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc1.NodeActionsService }, { type: ɵngcc2.DocumentListService }, { type: ɵngcc3.ContentService }, { type: ɵngcc3.TranslationService }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,