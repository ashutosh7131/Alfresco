/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, Input, ChangeDetectionStrategy, ViewEncapsulation } from '@angular/core';
import { BehaviorSubject, Subject } from 'rxjs';
import { AlfrescoApiService } from '@alfresco/adf-core';
import { Site } from '@alfresco/js-api';
import { takeUntil } from 'rxjs/operators';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@alfresco/adf-core';
import * as ɵngcc2 from '@ngx-translate/core';
import * as ɵngcc3 from '@angular/common';
export class LibraryRoleColumnComponent {
    constructor(api) {
        this.api = api;
        this.displayText$ = new BehaviorSubject('');
        this.onDestroy$ = new Subject();
    }
    ngOnInit() {
        this.updateValue();
        this.api.nodeUpdated
            .pipe(takeUntil(this.onDestroy$))
            .subscribe(node => {
            const row = this.context.row;
            if (row) {
                const { entry } = row.node;
                if (entry === node) {
                    row.node = { entry };
                    this.updateValue();
                }
            }
        });
    }
    updateValue() {
        const node = this.context.row.node;
        if (node && node.entry) {
            const role = node.entry.role;
            switch (role) {
                case Site.RoleEnum.SiteManager:
                    this.displayText$.next('LIBRARY.ROLE.MANAGER');
                    break;
                case Site.RoleEnum.SiteCollaborator:
                    this.displayText$.next('LIBRARY.ROLE.COLLABORATOR');
                    break;
                case Site.RoleEnum.SiteContributor:
                    this.displayText$.next('LIBRARY.ROLE.CONTRIBUTOR');
                    break;
                case Site.RoleEnum.SiteConsumer:
                    this.displayText$.next('LIBRARY.ROLE.CONSUMER');
                    break;
                default:
                    this.displayText$.next('LIBRARY.ROLE.NONE');
                    break;
            }
        }
    }
    ngOnDestroy() {
        this.onDestroy$.next(true);
        this.onDestroy$.complete();
    }
}
LibraryRoleColumnComponent.ɵfac = function LibraryRoleColumnComponent_Factory(t) { return new (t || LibraryRoleColumnComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.AlfrescoApiService)); };
LibraryRoleColumnComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: LibraryRoleColumnComponent, selectors: [["adf-library-role-column"]], hostAttrs: [1, "adf-library-role-column", "adf-datatable-content-cell"], inputs: { context: "context" }, decls: 6, vars: 10, consts: [[1, "adf-datatable-cell-value", 3, "title"]], template: function LibraryRoleColumnComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "span", 0);
        ɵngcc0.ɵɵpipe(1, "translate");
        ɵngcc0.ɵɵpipe(2, "async");
        ɵngcc0.ɵɵtext(3);
        ɵngcc0.ɵɵpipe(4, "translate");
        ɵngcc0.ɵɵpipe(5, "async");
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(1, 2, ɵngcc0.ɵɵpipeBind1(2, 4, ctx.displayText$)));
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(4, 6, ɵngcc0.ɵɵpipeBind1(5, 8, ctx.displayText$)), " ");
    } }, pipes: [ɵngcc2.TranslatePipe, ɵngcc3.AsyncPipe], encapsulation: 2, changeDetection: 0 });
LibraryRoleColumnComponent.ctorParameters = () => [
    { type: AlfrescoApiService }
];
LibraryRoleColumnComponent.propDecorators = {
    context: [{ type: Input }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(LibraryRoleColumnComponent, [{
        type: Component,
        args: [{
                selector: 'adf-library-role-column',
                template: `
        <span class="adf-datatable-cell-value" title="{{ (displayText$ | async) | translate }}">
            {{ (displayText$ | async) | translate }}
        </span>
    `,
                changeDetection: ChangeDetectionStrategy.OnPush,
                encapsulation: ViewEncapsulation.None,
                host: { class: 'adf-library-role-column adf-datatable-content-cell' }
            }]
    }], function () { return [{ type: ɵngcc1.AlfrescoApiService }]; }, { context: [{
            type: Input
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlicmFyeS1yb2xlLWNvbHVtbi5jb21wb25lbnQuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL2hvbWUvdHJhdmlzL2J1aWxkL0FsZnJlc2NvL2FsZnJlc2NvLW5nMi1jb21wb25lbnRzL2xpYi9jb250ZW50LXNlcnZpY2VzL3NyYy9saWIvZG9jdW1lbnQtbGlzdC9jb21wb25lbnRzL2xpYnJhcnktcm9sZS1jb2x1bW4vbGlicmFyeS1yb2xlLWNvbHVtbi5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUVILE9BQU8sRUFDSCxTQUFTLEVBRVQsS0FBSyxFQUNMLHVCQUF1QixFQUN2QixpQkFBaUIsRUFFcEIsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLGVBQWUsRUFBRSxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDaEQsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDeEQsT0FBTyxFQUFhLElBQUksRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBRW5ELE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7Ozs7QUFhM0MsTUFBTSxPQUFPLDBCQUEwQjtBQUFHLElBUXRDLFlBQW9CLEdBQXVCO0FBQUksUUFBM0IsUUFBRyxHQUFILEdBQUcsQ0FBb0I7QUFBQyxRQUo1QyxpQkFBWSxHQUFHLElBQUksZUFBZSxDQUFTLEVBQUUsQ0FBQyxDQUFDO0FBQ25ELFFBQ1ksZUFBVSxHQUFHLElBQUksT0FBTyxFQUFXLENBQUM7QUFDaEQsSUFDa0QsQ0FBQztBQUNuRCxJQUNJLFFBQVE7QUFDWixRQUFRLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztBQUMzQixRQUNRLElBQUksQ0FBQyxHQUFHLENBQUMsV0FBVztBQUM1QixhQUFhLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0FBQzdDLGFBQWEsU0FBUyxDQUFDLElBQUksQ0FBQyxFQUFFO0FBQzlCLFlBQWdCLE1BQU0sR0FBRyxHQUFpQixJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQztBQUMzRCxZQUFnQixJQUFJLEdBQUcsRUFBRTtBQUN6QixnQkFBb0IsTUFBTSxFQUFFLEtBQUssRUFBRSxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUM7QUFDL0MsZ0JBQ29CLElBQUksS0FBSyxLQUFLLElBQUksRUFBRTtBQUN4QyxvQkFBd0IsR0FBRyxDQUFDLElBQUksR0FBRyxFQUFFLEtBQUssRUFBRSxDQUFDO0FBQzdDLG9CQUF3QixJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7QUFDM0MsaUJBQXFCO0FBQ3JCLGFBQWlCO0FBQ2pCLFFBQVksQ0FBQyxDQUFDLENBQUM7QUFDZixJQUFJLENBQUM7QUFDTCxJQUNjLFdBQVc7QUFDekIsUUFBUSxNQUFNLElBQUksR0FBYyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUM7QUFDdEQsUUFBUSxJQUFJLElBQUksSUFBSSxJQUFJLENBQUMsS0FBSyxFQUFFO0FBQ2hDLFlBQVksTUFBTSxJQUFJLEdBQVcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUM7QUFDakQsWUFBWSxRQUFRLElBQUksRUFBRTtBQUMxQixnQkFBZ0IsS0FBSyxJQUFJLENBQUMsUUFBUSxDQUFDLFdBQVc7QUFDOUMsb0JBQW9CLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLHNCQUFzQixDQUFDLENBQUM7QUFDbkUsb0JBQW9CLE1BQU07QUFDMUIsZ0JBQWdCLEtBQUssSUFBSSxDQUFDLFFBQVEsQ0FBQyxnQkFBZ0I7QUFDbkQsb0JBQW9CLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLDJCQUEyQixDQUFDLENBQUM7QUFDeEUsb0JBQW9CLE1BQU07QUFDMUIsZ0JBQWdCLEtBQUssSUFBSSxDQUFDLFFBQVEsQ0FBQyxlQUFlO0FBQ2xELG9CQUFvQixJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQywwQkFBMEIsQ0FBQyxDQUFDO0FBQ3ZFLG9CQUFvQixNQUFNO0FBQzFCLGdCQUFnQixLQUFLLElBQUksQ0FBQyxRQUFRLENBQUMsWUFBWTtBQUMvQyxvQkFBb0IsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsdUJBQXVCLENBQUMsQ0FBQztBQUNwRSxvQkFBb0IsTUFBTTtBQUMxQixnQkFBZ0I7QUFDaEIsb0JBQW9CLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLG1CQUFtQixDQUFDLENBQUM7QUFDaEUsb0JBQW9CLE1BQU07QUFDMUIsYUFBYTtBQUNiLFNBQVM7QUFDVCxJQUFJLENBQUM7QUFDTCxJQUNJLFdBQVc7QUFDZixRQUFRLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ25DLFFBQVEsSUFBSSxDQUFDLFVBQVUsQ0FBQyxRQUFRLEVBQUUsQ0FBQztBQUNuQyxJQUFJLENBQUM7QUFDTDtzREFuRUMsU0FBUyxTQUFDLGtCQUNQLFFBQVEsRUFBRSx5QkFBeUIsa0JBQ25DLFFBQVEsRUFBRTs2SUFJVCxrQkFDRCxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTSxrQkFDL0MsYUFBYSxFQUFFLGlCQUFpQixDQUFDLElBQUksa0JBQ3JDLElBQUksRUFBRSxFQUFFLEtBQUssRUFBRSxvREFBb0QsRUFBRSxjQUN4RTs7Ozs7Ozs7Ozs7O2tHQUNJO0FBQUM7QUFBb0QsWUFoQmpELGtCQUFrQjtBQUFHO0FBQUc7QUFDWCxzQkFnQmpCLEtBQUs7QUFDVDs7Ozs7Ozs7Ozs7Ozs7OztvQkFBRTtBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHtcbiAgICBDb21wb25lbnQsXG4gICAgT25Jbml0LFxuICAgIElucHV0LFxuICAgIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LFxuICAgIFZpZXdFbmNhcHN1bGF0aW9uLFxuICAgIE9uRGVzdHJveVxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEJlaGF2aW9yU3ViamVjdCwgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgQWxmcmVzY29BcGlTZXJ2aWNlIH0gZnJvbSAnQGFsZnJlc2NvL2FkZi1jb3JlJztcbmltcG9ydCB7IFNpdGVFbnRyeSwgU2l0ZSB9IGZyb20gJ0BhbGZyZXNjby9qcy1hcGknO1xuaW1wb3J0IHsgU2hhcmVEYXRhUm93IH0gZnJvbSAnLi4vLi4vZGF0YS9zaGFyZS1kYXRhLXJvdy5tb2RlbCc7XG5pbXBvcnQgeyB0YWtlVW50aWwgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAnYWRmLWxpYnJhcnktcm9sZS1jb2x1bW4nLFxuICAgIHRlbXBsYXRlOiBgXG4gICAgICAgIDxzcGFuIGNsYXNzPVwiYWRmLWRhdGF0YWJsZS1jZWxsLXZhbHVlXCIgdGl0bGU9XCJ7eyAoZGlzcGxheVRleHQkIHwgYXN5bmMpIHwgdHJhbnNsYXRlIH19XCI+XG4gICAgICAgICAgICB7eyAoZGlzcGxheVRleHQkIHwgYXN5bmMpIHwgdHJhbnNsYXRlIH19XG4gICAgICAgIDwvc3Bhbj5cbiAgICBgLFxuICAgIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICAgIGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLk5vbmUsXG4gICAgaG9zdDogeyBjbGFzczogJ2FkZi1saWJyYXJ5LXJvbGUtY29sdW1uIGFkZi1kYXRhdGFibGUtY29udGVudC1jZWxsJyB9XG59KVxuZXhwb3J0IGNsYXNzIExpYnJhcnlSb2xlQ29sdW1uQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3kge1xuICAgIEBJbnB1dCgpXG4gICAgY29udGV4dDogYW55O1xuXG4gICAgZGlzcGxheVRleHQkID0gbmV3IEJlaGF2aW9yU3ViamVjdDxzdHJpbmc+KCcnKTtcblxuICAgIHByaXZhdGUgb25EZXN0cm95JCA9IG5ldyBTdWJqZWN0PGJvb2xlYW4+KCk7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGFwaTogQWxmcmVzY29BcGlTZXJ2aWNlKSB7fVxuXG4gICAgbmdPbkluaXQoKSB7XG4gICAgICAgIHRoaXMudXBkYXRlVmFsdWUoKTtcblxuICAgICAgICB0aGlzLmFwaS5ub2RlVXBkYXRlZFxuICAgICAgICAgICAgLnBpcGUodGFrZVVudGlsKHRoaXMub25EZXN0cm95JCkpXG4gICAgICAgICAgICAuc3Vic2NyaWJlKG5vZGUgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJvdzogU2hhcmVEYXRhUm93ID0gdGhpcy5jb250ZXh0LnJvdztcbiAgICAgICAgICAgICAgICBpZiAocm93KSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHsgZW50cnkgfSA9IHJvdy5ub2RlO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChlbnRyeSA9PT0gbm9kZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcm93Lm5vZGUgPSB7IGVudHJ5IH07XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZVZhbHVlKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgdXBkYXRlVmFsdWUoKSB7XG4gICAgICAgIGNvbnN0IG5vZGU6IFNpdGVFbnRyeSA9IHRoaXMuY29udGV4dC5yb3cubm9kZTtcbiAgICAgICAgaWYgKG5vZGUgJiYgbm9kZS5lbnRyeSkge1xuICAgICAgICAgICAgY29uc3Qgcm9sZTogc3RyaW5nID0gbm9kZS5lbnRyeS5yb2xlO1xuICAgICAgICAgICAgc3dpdGNoIChyb2xlKSB7XG4gICAgICAgICAgICAgICAgY2FzZSBTaXRlLlJvbGVFbnVtLlNpdGVNYW5hZ2VyOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRpc3BsYXlUZXh0JC5uZXh0KCdMSUJSQVJZLlJPTEUuTUFOQUdFUicpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFNpdGUuUm9sZUVudW0uU2l0ZUNvbGxhYm9yYXRvcjpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kaXNwbGF5VGV4dCQubmV4dCgnTElCUkFSWS5ST0xFLkNPTExBQk9SQVRPUicpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFNpdGUuUm9sZUVudW0uU2l0ZUNvbnRyaWJ1dG9yOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRpc3BsYXlUZXh0JC5uZXh0KCdMSUJSQVJZLlJPTEUuQ09OVFJJQlVUT1InKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBTaXRlLlJvbGVFbnVtLlNpdGVDb25zdW1lcjpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kaXNwbGF5VGV4dCQubmV4dCgnTElCUkFSWS5ST0xFLkNPTlNVTUVSJyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGlzcGxheVRleHQkLm5leHQoJ0xJQlJBUlkuUk9MRS5OT05FJyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgbmdPbkRlc3Ryb3koKSB7XG4gICAgICAgIHRoaXMub25EZXN0cm95JC5uZXh0KHRydWUpO1xuICAgICAgICB0aGlzLm9uRGVzdHJveSQuY29tcGxldGUoKTtcbiAgICB9XG59XG4iXX0=