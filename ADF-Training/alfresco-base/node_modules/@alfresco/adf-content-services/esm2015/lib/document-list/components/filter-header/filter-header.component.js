/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, Inject, Input, Output, EventEmitter } from '@angular/core';
import { DocumentListComponent } from '../document-list.component';
import { SEARCH_QUERY_SERVICE_TOKEN } from '../../../search/search-query-service.token';
import { SearchHeaderQueryBuilderService } from '../../../search/services/search-header-query-builder.service';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';
import * as ɵngcc2 from '@alfresco/adf-core';
import * as ɵngcc3 from '../../../search/components/search-filter-container/search-filter-container.component';
import * as ɵngcc4 from '../document-list.component';
import * as ɵngcc5 from '../../../search/services/search-header-query-builder.service';

function FilterHeaderComponent_div_0_ng_template_2_Template(rf, ctx) { if (rf & 1) {
    const _r4 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "adf-search-filter-container", 1);
    ɵngcc0.ɵɵlistener("filterChange", function FilterHeaderComponent_div_0_ng_template_2_Template_adf_search_filter_container_filterChange_0_listener() { ɵngcc0.ɵɵrestoreView(_r4); const ctx_r3 = ɵngcc0.ɵɵnextContext(2); return ctx_r3.onFilterSelectionChange(); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const col_r2 = ctx.$implicit;
    const ctx_r1 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("col", col_r2)("value", ctx_r1.value);
} }
function FilterHeaderComponent_div_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div");
    ɵngcc0.ɵɵelementStart(1, "adf-header-filter-template");
    ɵngcc0.ɵɵtemplate(2, FilterHeaderComponent_div_0_ng_template_2_Template, 1, 2, "ng-template");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} }
export class FilterHeaderComponent {
    constructor(documentList, searchFilterQueryBuilder) {
        this.documentList = documentList;
        this.searchFilterQueryBuilder = searchFilterQueryBuilder;
        this.value = {};
        this.filterSelection = new EventEmitter();
        this.onDestroy$ = new Subject();
        this.isFilterServiceActive = this.searchFilterQueryBuilder.isFilterServiceActive();
    }
    ngOnInit() {
        this.searchFilterQueryBuilder.executed
            .pipe(takeUntil(this.onDestroy$))
            .subscribe((newNodePaging) => {
            this.documentList.node = newNodePaging;
            this.documentList.reload();
        });
        this.initDataPagination();
        this.initDataSorting();
    }
    ngOnChanges(changes) {
        if (changes['currentFolderId'] && changes['currentFolderId'].currentValue) {
            this.resetFilterHeader();
            this.configureSearchParent(changes['currentFolderId'].currentValue);
        }
    }
    onFilterSelectionChange() {
        this.filterSelection.emit(this.searchFilterQueryBuilder.getActiveFilters());
        if (this.searchFilterQueryBuilder.isNoFilterActive()) {
            this.documentList.node = null;
            this.documentList.reload();
        }
    }
    resetFilterHeader() {
        this.searchFilterQueryBuilder.resetActiveFilters();
    }
    initDataPagination() {
        this.documentList.pagination
            .pipe(takeUntil(this.onDestroy$))
            .subscribe((newPagination) => {
            this.searchFilterQueryBuilder.setupCurrentPagination(newPagination.maxItems, newPagination.skipCount);
        });
    }
    initDataSorting() {
        this.documentList.sortingSubject
            .pipe(takeUntil(this.onDestroy$))
            .subscribe((sorting) => {
            this.searchFilterQueryBuilder.setSorting(sorting);
        });
    }
    configureSearchParent(currentFolderId) {
        if (this.searchFilterQueryBuilder.isCustomSourceNode(currentFolderId)) {
            this.searchFilterQueryBuilder.getNodeIdForCustomSource(currentFolderId).subscribe((node) => {
                this.initSearchHeader(node.id);
            });
        }
        else {
            this.initSearchHeader(currentFolderId);
        }
    }
    initSearchHeader(currentFolderId) {
        this.searchFilterQueryBuilder.setCurrentRootFolderId(currentFolderId);
        if (this.value) {
            Object.keys(this.value).forEach((columnKey) => {
                this.searchFilterQueryBuilder.setActiveFilter(columnKey, this.value[columnKey]);
            });
        }
    }
    ngOnDestroy() {
        this.onDestroy$.next(true);
        this.onDestroy$.complete();
    }
}
FilterHeaderComponent.ɵfac = function FilterHeaderComponent_Factory(t) { return new (t || FilterHeaderComponent)(ɵngcc0.ɵɵdirectiveInject(DocumentListComponent), ɵngcc0.ɵɵdirectiveInject(SEARCH_QUERY_SERVICE_TOKEN)); };
FilterHeaderComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: FilterHeaderComponent, selectors: [["adf-filter-header"]], inputs: { value: "value", currentFolderId: "currentFolderId" }, outputs: { filterSelection: "filterSelection" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: SEARCH_QUERY_SERVICE_TOKEN, useClass: SearchHeaderQueryBuilderService }]), ɵngcc0.ɵɵNgOnChangesFeature], decls: 1, vars: 1, consts: [[4, "ngIf"], [3, "col", "value", "filterChange"]], template: function FilterHeaderComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, FilterHeaderComponent_div_0_Template, 3, 0, "div", 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngIf", ctx.isFilterServiceActive);
    } }, directives: [ɵngcc1.NgIf, ɵngcc2.HeaderFilterTemplateDirective, ɵngcc3.SearchFilterContainerComponent], encapsulation: 2 });
FilterHeaderComponent.ctorParameters = () => [
    { type: DocumentListComponent, decorators: [{ type: Inject, args: [DocumentListComponent,] }] },
    { type: SearchHeaderQueryBuilderService, decorators: [{ type: Inject, args: [SEARCH_QUERY_SERVICE_TOKEN,] }] }
];
FilterHeaderComponent.propDecorators = {
    value: [{ type: Input }],
    currentFolderId: [{ type: Input }],
    filterSelection: [{ type: Output }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FilterHeaderComponent, [{
        type: Component,
        args: [{
                selector: 'adf-filter-header',
                template: "<div *ngIf=\"isFilterServiceActive\">\n    <adf-header-filter-template>\n        <ng-template let-col>\n            <adf-search-filter-container [col]=\"col\"\n                                         [value]=\"value\"\n                                         (filterChange)=\"onFilterSelectionChange()\">\n            </adf-search-filter-container>\n        </ng-template>\n    </adf-header-filter-template>\n</div>\n",
                providers: [{ provide: SEARCH_QUERY_SERVICE_TOKEN, useClass: SearchHeaderQueryBuilderService }]
            }]
    }], function () { return [{ type: ɵngcc4.DocumentListComponent, decorators: [{
                type: Inject,
                args: [DocumentListComponent]
            }] }, { type: ɵngcc5.SearchHeaderQueryBuilderService, decorators: [{
                type: Inject,
                args: [SEARCH_QUERY_SERVICE_TOKEN]
            }] }]; }, { value: [{
            type: Input
        }], filterSelection: [{
            type: Output
        }], currentFolderId: [{
            type: Input
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,