/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, ChangeDetectionStrategy, ViewEncapsulation, Input } from '@angular/core';
export class TrashcanNameColumnComponent {
    constructor() {
        this.isLibrary = false;
    }
    ngOnInit() {
        this.node = this.context.row.node;
        const rows = this.context.data.rows || [];
        if (this.node && this.node.entry) {
            this.isLibrary = this.node.entry.nodeType === 'st:site';
            if (this.isLibrary) {
                const { properties } = this.node.entry;
                this.displayText = this.makeLibraryTitle(this.node.entry, rows);
                this.displayTooltip =
                    properties['cm:description'] || properties['cm:title'];
            }
            else {
                this.displayText = this.node.entry.name || this.node.entry.id;
            }
        }
    }
    makeLibraryTitle(library, rows) {
        const entries = rows.map((r) => r.node.entry);
        const { id } = library;
        const title = library.properties['cm:title'];
        let isDuplicate = false;
        if (entries) {
            isDuplicate = entries.some((entry) => {
                return entry.id !== id && entry.properties['cm:title'] === title;
            });
        }
        return isDuplicate
            ? `${library.properties['cm:title']} (${library.name})`
            : `${library.properties['cm:title']}`;
    }
}
TrashcanNameColumnComponent.decorators = [
    { type: Component, args: [{
                selector: 'adf-trashcan-name-column',
                template: `
    <ng-container *ngIf="!isLibrary">
      <span class="adf-datatable-cell-value" title="{{ node | adfNodeNameTooltip }}">{{ displayText }}</span>
    </ng-container>
    <ng-container *ngIf="isLibrary">
      <span class="adf-datatable-cell-value" title="{{ displayTooltip }}">{{ displayText }}</span>
    </ng-container>
  `,
                changeDetection: ChangeDetectionStrategy.OnPush,
                encapsulation: ViewEncapsulation.None,
                host: { class: 'adf-datatable-content-cell adf-trashcan-name-column' }
            },] }
];
TrashcanNameColumnComponent.propDecorators = {
    context: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhc2hjYW4tbmFtZS1jb2x1bW4uY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Ii9ob21lL3RyYXZpcy9idWlsZC9BbGZyZXNjby9hbGZyZXNjby1uZzItY29tcG9uZW50cy9saWIvY29udGVudC1zZXJ2aWNlcy9zcmMvIiwic291cmNlcyI6WyJsaWIvZG9jdW1lbnQtbGlzdC9jb21wb25lbnRzL3RyYXNoY2FuLW5hbWUtY29sdW1uL3RyYXNoY2FuLW5hbWUtY29sdW1uLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7O0dBZUc7QUFFSCxPQUFPLEVBQ0wsU0FBUyxFQUNULHVCQUF1QixFQUN2QixpQkFBaUIsRUFFakIsS0FBSyxFQUNOLE1BQU0sZUFBZSxDQUFDO0FBa0J2QixNQUFNLE9BQU8sMkJBQTJCO0lBZHhDO1FBa0JFLGNBQVMsR0FBRyxLQUFLLENBQUM7SUF5Q3BCLENBQUM7SUFwQ0MsUUFBUTtRQUNOLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDO1FBQ2xDLE1BQU0sSUFBSSxHQUF3QixJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLElBQUksRUFBRSxDQUFDO1FBRS9ELElBQUksSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRTtZQUNoQyxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsS0FBSyxTQUFTLENBQUM7WUFFeEQsSUFBSSxJQUFJLENBQUMsU0FBUyxFQUFFO2dCQUNsQixNQUFNLEVBQUUsVUFBVSxFQUFFLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUM7Z0JBRXZDLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxDQUFDO2dCQUNoRSxJQUFJLENBQUMsY0FBYztvQkFDakIsVUFBVSxDQUFDLGdCQUFnQixDQUFDLElBQUksVUFBVSxDQUFDLFVBQVUsQ0FBQyxDQUFDO2FBQzFEO2lCQUFNO2dCQUNMLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQzthQUMvRDtTQUNGO0lBQ0gsQ0FBQztJQUVELGdCQUFnQixDQUFDLE9BQVksRUFBRSxJQUF5QjtRQUN0RCxNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBZSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzVELE1BQU0sRUFBRSxFQUFFLEVBQUUsR0FBRyxPQUFPLENBQUM7UUFDdkIsTUFBTSxLQUFLLEdBQUcsT0FBTyxDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUU3QyxJQUFJLFdBQVcsR0FBRyxLQUFLLENBQUM7UUFFeEIsSUFBSSxPQUFPLEVBQUU7WUFDWCxXQUFXLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLEtBQVUsRUFBRSxFQUFFO2dCQUN4QyxPQUFPLEtBQUssQ0FBQyxFQUFFLEtBQUssRUFBRSxJQUFJLEtBQUssQ0FBQyxVQUFVLENBQUMsVUFBVSxDQUFDLEtBQUssS0FBSyxDQUFDO1lBQ25FLENBQUMsQ0FBQyxDQUFDO1NBQ0o7UUFFRCxPQUFPLFdBQVc7WUFDaEIsQ0FBQyxDQUFDLEdBQUcsT0FBTyxDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUMsS0FBSyxPQUFPLENBQUMsSUFBSSxHQUFHO1lBQ3ZELENBQUMsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxVQUFVLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQztJQUMxQyxDQUFDOzs7WUExREYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSwwQkFBMEI7Z0JBQ3BDLFFBQVEsRUFBRTs7Ozs7OztHQU9UO2dCQUNELGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO2dCQUMvQyxhQUFhLEVBQUUsaUJBQWlCLENBQUMsSUFBSTtnQkFDckMsSUFBSSxFQUFFLEVBQUUsS0FBSyxFQUFFLHFEQUFxRCxFQUFFO2FBQ3ZFOzs7c0JBRUUsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7XG4gIENvbXBvbmVudCxcbiAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksXG4gIFZpZXdFbmNhcHN1bGF0aW9uLFxuICBPbkluaXQsXG4gIElucHV0XG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTm9kZUVudHJ5IH0gZnJvbSAnQGFsZnJlc2NvL2pzLWFwaSc7XG5pbXBvcnQgeyBTaGFyZURhdGFSb3cgfSBmcm9tICcuLi8uLi9kYXRhL3NoYXJlLWRhdGEtcm93Lm1vZGVsJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnYWRmLXRyYXNoY2FuLW5hbWUtY29sdW1uJyxcbiAgdGVtcGxhdGU6IGBcbiAgICA8bmctY29udGFpbmVyICpuZ0lmPVwiIWlzTGlicmFyeVwiPlxuICAgICAgPHNwYW4gY2xhc3M9XCJhZGYtZGF0YXRhYmxlLWNlbGwtdmFsdWVcIiB0aXRsZT1cInt7IG5vZGUgfCBhZGZOb2RlTmFtZVRvb2x0aXAgfX1cIj57eyBkaXNwbGF5VGV4dCB9fTwvc3Bhbj5cbiAgICA8L25nLWNvbnRhaW5lcj5cbiAgICA8bmctY29udGFpbmVyICpuZ0lmPVwiaXNMaWJyYXJ5XCI+XG4gICAgICA8c3BhbiBjbGFzcz1cImFkZi1kYXRhdGFibGUtY2VsbC12YWx1ZVwiIHRpdGxlPVwie3sgZGlzcGxheVRvb2x0aXAgfX1cIj57eyBkaXNwbGF5VGV4dCB9fTwvc3Bhbj5cbiAgICA8L25nLWNvbnRhaW5lcj5cbiAgYCxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLk5vbmUsXG4gIGhvc3Q6IHsgY2xhc3M6ICdhZGYtZGF0YXRhYmxlLWNvbnRlbnQtY2VsbCBhZGYtdHJhc2hjYW4tbmFtZS1jb2x1bW4nIH1cbn0pXG5leHBvcnQgY2xhc3MgVHJhc2hjYW5OYW1lQ29sdW1uQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcbiAgQElucHV0KClcbiAgY29udGV4dDogYW55O1xuXG4gIGlzTGlicmFyeSA9IGZhbHNlO1xuICBkaXNwbGF5VGV4dDogc3RyaW5nO1xuICBkaXNwbGF5VG9vbHRpcDogc3RyaW5nO1xuICBub2RlOiBOb2RlRW50cnk7XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgdGhpcy5ub2RlID0gdGhpcy5jb250ZXh0LnJvdy5ub2RlO1xuICAgIGNvbnN0IHJvd3M6IEFycmF5PFNoYXJlRGF0YVJvdz4gPSB0aGlzLmNvbnRleHQuZGF0YS5yb3dzIHx8IFtdO1xuXG4gICAgaWYgKHRoaXMubm9kZSAmJiB0aGlzLm5vZGUuZW50cnkpIHtcbiAgICAgIHRoaXMuaXNMaWJyYXJ5ID0gdGhpcy5ub2RlLmVudHJ5Lm5vZGVUeXBlID09PSAnc3Q6c2l0ZSc7XG5cbiAgICAgIGlmICh0aGlzLmlzTGlicmFyeSkge1xuICAgICAgICBjb25zdCB7IHByb3BlcnRpZXMgfSA9IHRoaXMubm9kZS5lbnRyeTtcblxuICAgICAgICB0aGlzLmRpc3BsYXlUZXh0ID0gdGhpcy5tYWtlTGlicmFyeVRpdGxlKHRoaXMubm9kZS5lbnRyeSwgcm93cyk7XG4gICAgICAgIHRoaXMuZGlzcGxheVRvb2x0aXAgPVxuICAgICAgICAgIHByb3BlcnRpZXNbJ2NtOmRlc2NyaXB0aW9uJ10gfHwgcHJvcGVydGllc1snY206dGl0bGUnXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuZGlzcGxheVRleHQgPSB0aGlzLm5vZGUuZW50cnkubmFtZSB8fCB0aGlzLm5vZGUuZW50cnkuaWQ7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgbWFrZUxpYnJhcnlUaXRsZShsaWJyYXJ5OiBhbnksIHJvd3M6IEFycmF5PFNoYXJlRGF0YVJvdz4pOiBzdHJpbmcge1xuICAgIGNvbnN0IGVudHJpZXMgPSByb3dzLm1hcCgocjogU2hhcmVEYXRhUm93KSA9PiByLm5vZGUuZW50cnkpO1xuICAgIGNvbnN0IHsgaWQgfSA9IGxpYnJhcnk7XG4gICAgY29uc3QgdGl0bGUgPSBsaWJyYXJ5LnByb3BlcnRpZXNbJ2NtOnRpdGxlJ107XG5cbiAgICBsZXQgaXNEdXBsaWNhdGUgPSBmYWxzZTtcblxuICAgIGlmIChlbnRyaWVzKSB7XG4gICAgICBpc0R1cGxpY2F0ZSA9IGVudHJpZXMuc29tZSgoZW50cnk6IGFueSkgPT4ge1xuICAgICAgICByZXR1cm4gZW50cnkuaWQgIT09IGlkICYmIGVudHJ5LnByb3BlcnRpZXNbJ2NtOnRpdGxlJ10gPT09IHRpdGxlO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGlzRHVwbGljYXRlXG4gICAgICA/IGAke2xpYnJhcnkucHJvcGVydGllc1snY206dGl0bGUnXX0gKCR7bGlicmFyeS5uYW1lfSlgXG4gICAgICA6IGAke2xpYnJhcnkucHJvcGVydGllc1snY206dGl0bGUnXX1gO1xuICB9XG59XG4iXX0=