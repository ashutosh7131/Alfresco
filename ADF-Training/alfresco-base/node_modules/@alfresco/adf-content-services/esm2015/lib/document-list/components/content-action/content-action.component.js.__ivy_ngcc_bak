/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, EventEmitter, Input, Output } from '@angular/core';
import { DocumentActionsService } from '../../services/document-actions.service';
import { FolderActionsService } from '../../services/folder-actions.service';
import { ContentActionModel, ContentActionTarget } from './../../models/content-action.model';
import { ContentActionListComponent } from './content-action-list.component';
export class ContentActionComponent {
    constructor(list, documentActions, folderActions) {
        this.list = list;
        this.documentActions = documentActions;
        this.folderActions = folderActions;
        this.title = 'Action';
        this.visible = true;
        this.target = ContentActionTarget.All;
        this.disabled = false;
        this.execute = new EventEmitter();
        this.permissionEvent = new EventEmitter();
        this.error = new EventEmitter();
        this.success = new EventEmitter();
        this.subscriptions = [];
    }
    ngOnInit() {
        if (this.target === ContentActionTarget.All) {
            this.folderActionModel = this.generateAction(ContentActionTarget.Folder);
            this.documentActionModel = this.generateAction(ContentActionTarget.Document);
        }
        else {
            this.documentActionModel = this.generateAction(this.target);
        }
    }
    ngOnChanges(changes) {
        if (changes.visible && !changes.visible.firstChange) {
            if (this.documentActionModel) {
                this.documentActionModel.visible = changes.visible.currentValue;
            }
            if (this.folderActionModel) {
                this.folderActionModel.visible = changes.visible.currentValue;
            }
        }
        if (changes.disabled && !changes.disabled.firstChange) {
            if (this.documentActionModel) {
                this.documentActionModel.disabled = changes.disabled.currentValue;
            }
            if (this.folderActionModel) {
                this.folderActionModel.disabled = changes.disabled.currentValue;
            }
        }
    }
    ngOnDestroy() {
        this.subscriptions.forEach((subscription) => subscription.unsubscribe());
        this.subscriptions = [];
        if (this.documentActionModel) {
            this.unregister(this.documentActionModel);
            this.documentActionModel = null;
        }
        if (this.folderActionModel) {
            this.unregister(this.folderActionModel);
            this.folderActionModel = null;
        }
    }
    register(model) {
        if (this.list) {
            return this.list.registerAction(model);
        }
        return false;
    }
    unregister(model) {
        if (this.list) {
            return this.list.unregisterAction(model);
        }
        return false;
    }
    generateAction(target) {
        const model = new ContentActionModel({
            title: this.title,
            icon: this.icon,
            permission: this.permission,
            disableWithNoPermission: this.disableWithNoPermission,
            target: target,
            disabled: this.disabled,
            visible: this.visible
        });
        if (this.handler) {
            model.handler = this.getSystemHandler(target, this.handler);
        }
        if (this.execute) {
            model.execute = (value) => {
                this.execute.emit({ value });
            };
        }
        this.register(model);
        return model;
    }
    getSystemHandler(target, name) {
        if (target) {
            target = target.toLowerCase();
            if (target === ContentActionTarget.Document) {
                if (this.documentActions) {
                    this.subscriptions.push(this.documentActions.permissionEvent.subscribe((permission) => {
                        this.permissionEvent.emit(permission);
                    }), this.documentActions.error.subscribe((errors) => {
                        this.error.emit(errors);
                    }), this.documentActions.success.subscribe((message) => {
                        this.success.emit(message);
                    }));
                    return this.documentActions.getHandler(name);
                }
                return null;
            }
            if (target === ContentActionTarget.Folder) {
                if (this.folderActions) {
                    this.subscriptions.push(this.folderActions.permissionEvent.subscribe((permission) => {
                        this.permissionEvent.emit(permission);
                    }), this.folderActions.error.subscribe((errors) => {
                        this.error.emit(errors);
                    }), this.folderActions.success.subscribe((message) => {
                        this.success.emit(message);
                    }));
                    return this.folderActions.getHandler(name);
                }
                return null;
            }
        }
        return null;
    }
}
ContentActionComponent.decorators = [
    { type: Component, args: [{
                selector: 'content-action',
                template: '',
                providers: [
                    DocumentActionsService,
                    FolderActionsService
                ]
            },] }
];
ContentActionComponent.ctorParameters = () => [
    { type: ContentActionListComponent },
    { type: DocumentActionsService },
    { type: FolderActionsService }
];
ContentActionComponent.propDecorators = {
    title: [{ type: Input }],
    icon: [{ type: Input }],
    visible: [{ type: Input }],
    handler: [{ type: Input }],
    target: [{ type: Input }],
    permission: [{ type: Input }],
    disableWithNoPermission: [{ type: Input }],
    disabled: [{ type: Input }],
    execute: [{ type: Output }],
    permissionEvent: [{ type: Output }],
    error: [{ type: Output }],
    success: [{ type: Output }]
};
//# sourceMappingURL=data:application/json;base64,