(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(require('@angular/core'),require('@angular/material/button'),require('@angular/material/chips'),require('@angular/material/dialog'),require('@angular/material/icon'),require('@angular/material/card'),require('@angular/material/input'),require('@angular/material/list'),require('@angular/material/progress-spinner'),require('@angular/material/progress-bar'),require('@angular/material/core'),require('@angular/material/menu'),require('@angular/material/expansion'),require('@angular/material/select'),require('@angular/material/checkbox'),require('@angular/material/datepicker'),require('@angular/material/slide-toggle'),require('@angular/material/radio'),require('@angular/material/slider'),require('@angular/material/tree'),require('@angular/material/badge'),require('@alfresco/adf-core'),require('@angular/material/tabs'),require('@angular/common'),require('@angular/material/tooltip'),require('@ngx-translate/core'),require('@angular/forms'),require('@angular/material/form-field'),require('@mat-datetimepicker/core'),require('@angular/flex-layout/extended'),require('@angular/cdk/a11y'),require('@angular/material/divider'),require('@angular/flex-layout'),require('@angular/platform-browser'),require('@mat-datetimepicker/moment'),require('@angular/material/table'),require('@angular/flex-layout/flex'),require('@angular/cdk/overlay'),require('@angular/cdk/tree'),exports, require('@angular/common'), require('@angular/core'), require('@angular/material/button'), require('@angular/material/card'), require('@angular/material/checkbox'), require('@angular/material/chips'), require('@angular/material/core'), require('@angular/material/datepicker'), require('@angular/material/dialog'), require('@angular/material/expansion'), require('@angular/material/icon'), require('@angular/material/input'), require('@angular/material/list'), require('@angular/material/menu'), require('@angular/material/progress-bar'), require('@angular/material/progress-spinner'), require('@angular/material/radio'), require('@angular/material/select'), require('@angular/material/slide-toggle'), require('@angular/material/slider'), require('@angular/material/tree'), require('@angular/material/badge'), require('@ngx-translate/core'), require('@alfresco/adf-core'), require('rxjs'), require('@alfresco/js-api'), require('rxjs/operators'), require('moment-es6'), require('@angular/forms'), require('@angular/flex-layout'), require('@angular/cdk/a11y'), require('@mat-datetimepicker/core'), require('@mat-datetimepicker/moment'), require('@angular/platform-browser'), require('@angular/animations'), require('@angular/cdk/overlay'), require('@angular/cdk/portal'), require('@angular/cdk/tree'), require('@angular/material/table'), require('@angular/material/tooltip')) :
    typeof define === 'function' && define.amd ? define('@alfresco/adf-content-services', ['@angular/core','@angular/material/button','@angular/material/chips','@angular/material/dialog','@angular/material/icon','@angular/material/card','@angular/material/input','@angular/material/list','@angular/material/progress-spinner','@angular/material/progress-bar','@angular/material/core','@angular/material/menu','@angular/material/expansion','@angular/material/select','@angular/material/checkbox','@angular/material/datepicker','@angular/material/slide-toggle','@angular/material/radio','@angular/material/slider','@angular/material/tree','@angular/material/badge','@alfresco/adf-core','@angular/material/tabs','@angular/common','@angular/material/tooltip','@ngx-translate/core','@angular/forms','@angular/material/form-field','@mat-datetimepicker/core','@angular/flex-layout/extended','@angular/cdk/a11y','@angular/material/divider','@angular/flex-layout','@angular/platform-browser','@mat-datetimepicker/moment','@angular/material/table','@angular/flex-layout/flex','@angular/cdk/overlay','@angular/cdk/tree','exports', '@angular/common', '@angular/core', '@angular/material/button', '@angular/material/card', '@angular/material/checkbox', '@angular/material/chips', '@angular/material/core', '@angular/material/datepicker', '@angular/material/dialog', '@angular/material/expansion', '@angular/material/icon', '@angular/material/input', '@angular/material/list', '@angular/material/menu', '@angular/material/progress-bar', '@angular/material/progress-spinner', '@angular/material/radio', '@angular/material/select', '@angular/material/slide-toggle', '@angular/material/slider', '@angular/material/tree', '@angular/material/badge', '@ngx-translate/core', '@alfresco/adf-core', 'rxjs', '@alfresco/js-api', 'rxjs/operators', 'moment-es6', '@angular/forms', '@angular/flex-layout', '@angular/cdk/a11y', '@mat-datetimepicker/core', '@mat-datetimepicker/moment', '@angular/platform-browser', '@angular/animations', '@angular/cdk/overlay', '@angular/cdk/portal', '@angular/cdk/tree', '@angular/material/table', '@angular/material/tooltip'], factory) :
    (global = global || self, factory(global.ng.core,global.ng.material.button,global.ng.material.chips,global.ng.material.dialog,global.ng.material.icon,global.ng.material.card,global.ng.material.input,global.ng.material.list,global.ng.material.progressSpinner,global.ng.material.progressBar,global.ng.material.core,global.ng.material.menu,global.ng.material.expansion,global.ng.material.select,global.ng.material.checkbox,global.ng.material.datepicker,global.ng.material.slideToggle,global.ng.material.radio,global.ng.material.slider,global.ng.material.tree,global.ng.material.badge,global.alfresco.adfCore,global.ng.material.tabs,global.ng.common,global.ng.material.tooltip,global.ngxTranslate.core,global.ng.forms,global.ng.material.formField,global.matDatetimepicker.core,global.ng.flexLayout.extended,global.ng.cdk.a11y,global.ng.material.divider,global.ng.flexLayout,global.ng.platformBrowser,global.matDatetimepicker.moment,global.ng.material.table,global.ng.flexLayout.flex,global.ng.cdk.overlay,global.ng.cdk.tree,(global.alfresco = global.alfresco || {}, global.alfresco['adf-content-services'] = {}), global.ng.common, global.ng.core, global.ng.material.button, global.ng.material.card, global.ng.material.checkbox, global.ng.material.chips, global['@angular/material/core'], global.ng.material.datepicker, global.ng.material.dialog, global.ng.material.expansion, global.ng.material.icon, global.ng.material.input, global.ng.material.list, global.ng.material.menu, global.ng.material.progressBar, global.ng.material.progressSpinner, global.ng.material.radio, global.ng.material.select, global.ng.material.slideToggle, global.ng.material.slider, global.ng.material.tree, global.ng.material.badge, global['@ngx-translate/core'], global['@alfresco/adf-core'], global.rxjs, global['@alfresco/js-api'], global.rxjs.operators, global['moment-es6'], global.ng.forms, global['@angular/flex-layout'], global.ng.cdk.a11y, global['@mat-datetimepicker/core'], global['@mat-datetimepicker/moment'], global.ng.platformBrowser, global['@angular/animations'], global.ng.cdk.overlay, global.ng.cdk.portal, global.ng.cdk.tree, global.ng.material.table, global.ng.material.tooltip));
}(this, (function (ɵngcc0,ɵngcc1,ɵngcc2,ɵngcc3,ɵngcc4,ɵngcc5,ɵngcc6,ɵngcc7,ɵngcc8,ɵngcc9,ɵngcc10,ɵngcc11,ɵngcc12,ɵngcc13,ɵngcc14,ɵngcc15,ɵngcc16,ɵngcc17,ɵngcc18,ɵngcc19,ɵngcc20,ɵngcc21,ɵngcc22,ɵngcc23,ɵngcc24,ɵngcc25,ɵngcc26,ɵngcc27,ɵngcc28,ɵngcc29,ɵngcc30,ɵngcc31,ɵngcc32,ɵngcc33,ɵngcc34,ɵngcc35,ɵngcc36,ɵngcc37,ɵngcc38,exports, common, i0, button, card, checkbox, chips, core, datepicker, i2, expansion, icon, input, list, menu, progressBar, progressSpinner, radio, select, slideToggle, slider, tree, badge, core$1, i1, rxjs, jsApi, operators, moment$1, forms, flexLayout, a11y, core$2, moment$2, platformBrowser, animations, overlay, portal, tree$1, table, tooltip) { 
function ContentNodeSelectorComponent_mat_tab_7_ng_container_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0, 18);
} if (rf & 2) {
    var ctx_r2 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("adf-node-counter", ctx_r2.getSelectedCount());
} }
function ContentNodeSelectorComponent_mat_tab_7_ng_template_7_mat_icon_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-icon", 20);
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵtext(2, "info ");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r5 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵpropertyInterpolate("matTooltip", ɵngcc0.ɵɵpipeBind1(1, 1, ctx_r5.getWarningMessage()));
} }
function ContentNodeSelectorComponent_mat_tab_7_ng_template_7_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtext(0);
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵtemplate(2, ContentNodeSelectorComponent_mat_tab_7_ng_template_7_mat_icon_2_Template, 3, 3, "mat-icon", 19);
} if (rf & 2) {
    var ctx_r3 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(1, 2, "NODE_SELECTOR.UPLOAD_FROM_DEVICE"), " ");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r3.hasUploadError());
} }
function ContentNodeSelectorComponent_mat_tab_7_adf_empty_list_12_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "adf-empty-list", 21);
    ɵngcc0.ɵɵelementStart(1, "div", 22);
    ɵngcc0.ɵɵelementStart(2, "div", 23);
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵpipe(4, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(5, "div", 24);
    ɵngcc0.ɵɵtext(6);
    ɵngcc0.ɵɵpipe(7, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(8, "img", 25);
    ɵngcc0.ɵɵpipe(9, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r4 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(4, 4, "ADF-DATATABLE.EMPTY.DRAG-AND-DROP.TITLE"));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(7, 6, "ADF-DATATABLE.EMPTY.DRAG-AND-DROP.SUBTITLE"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("alt", ɵngcc0.ɵɵpipeBind1(9, 8, "ADF-DATATABLE.EMPTY.DRAG-AND-DROP.TITLE"))("src", ctx_r4.emptyFolderImageUrl, ɵngcc0.ɵɵsanitizeUrl);
} }
function ContentNodeSelectorComponent_mat_tab_7_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-tab", 8);
    ɵngcc0.ɵɵelementStart(1, "div", 9);
    ɵngcc0.ɵɵelementStart(2, "div", 10);
    ɵngcc0.ɵɵelementStart(3, "adf-toolbar");
    ɵngcc0.ɵɵelementStart(4, "adf-toolbar-title");
    ɵngcc0.ɵɵelement(5, "adf-dropdown-breadcrumb", 11);
    ɵngcc0.ɵɵtemplate(6, ContentNodeSelectorComponent_mat_tab_7_ng_container_6_Template, 1, 1, "ng-container", 12);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(7, ContentNodeSelectorComponent_mat_tab_7_ng_template_7_Template, 3, 4, "ng-template", 13);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(8, "div", 14);
    ɵngcc0.ɵɵelementStart(9, "adf-upload-drag-area", 15);
    ɵngcc0.ɵɵelementStart(10, "div");
    ɵngcc0.ɵɵelement(11, "adf-file-uploading-dialog", 16);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(12, ContentNodeSelectorComponent_mat_tab_7_adf_empty_list_12_Template, 10, 10, "adf-empty-list", 17);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("disabled", ctx_r0.isNotAllowedToUpload());
    ɵngcc0.ɵɵadvance(5);
    ɵngcc0.ɵɵproperty("folderNode", ctx_r0.breadcrumbFolderNode)("rootId", ctx_r0.data == null ? null : ctx_r0.data.currentFolderId)("readOnly", true);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.isCounterVisible());
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("rootFolderId", ctx_r0.currentDirectoryId);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵclassProp("adf-upload-dialog-container", ctx_r0.uploadStarted);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("alwaysVisible", true);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r0.uploadStarted);
} }
function ContentNodeSelectorComponent_ng_container_10_Template(rf, ctx) { if (rf & 1) {
    var _r7 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "adf-upload-button", 26);
    ɵngcc0.ɵɵlistener("error", function ContentNodeSelectorComponent_ng_container_10_Template_adf_upload_button_error_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r7); var ctx_r6 = ɵngcc0.ɵɵnextContext(); return ctx_r6.onError($event); });
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    var ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("staticTitle", ɵngcc0.ɵɵpipeBind1(2, 4, "FORM.FIELD.UPLOAD"))("multipleFiles", ctx_r1.isMultipleSelection())("rootFolderId", ctx_r1.currentDirectoryId)("disabled", ctx_r1.isNotAllowedToUpload());
} }
function NodeLockDialogComponent_div_12_mat_form_field_9_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-form-field");
    ɵngcc0.ɵɵelement(1, "mat-datetimepicker-toggle", 9);
    ɵngcc0.ɵɵelement(2, "mat-datetimepicker", 10, 11);
    ɵngcc0.ɵɵelement(4, "input", 12);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var _r2 = ɵngcc0.ɵɵreference(3);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("for", _r2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("openOnFocus", true)("timeInterval", 1);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("formControlName", "time")("matDatetimepicker", _r2);
} }
function NodeLockDialogComponent_div_12_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div");
    ɵngcc0.ɵɵelementStart(1, "mat-checkbox", 8);
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(4, "br");
    ɵngcc0.ɵɵelementStart(5, "mat-checkbox", 8);
    ɵngcc0.ɵɵtext(6);
    ɵngcc0.ɵɵpipe(7, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(8, "br");
    ɵngcc0.ɵɵtemplate(9, NodeLockDialogComponent_div_12_mat_form_field_9_Template, 5, 5, "mat-form-field", 3);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("formControlName", "allowOwner");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(3, 5, "CORE.FILE_DIALOG.ALLOW_OTHERS_CHECKBOX"), " ");
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("formControlName", "isTimeLock");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(7, 7, "CORE.FILE_DIALOG.TIME_LOCK_CHECKBOX"), " ");
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.form.value.isTimeLock);
} }
var _c0 = function (a0) { return { count: a0 }; };
var _c1 = function (a0) { return { "adf-average-star": a0 }; };
function RatingComponent_mat_list_item_1_mat_icon_2_Template(rf, ctx) { if (rf & 1) {
    var _r9 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "mat-icon", 9);
    ɵngcc0.ɵɵlistener("click", function RatingComponent_mat_list_item_1_mat_icon_2_Template_mat_icon_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r9); var idx_r4 = ɵngcc0.ɵɵnextContext().index; var ctx_r7 = ɵngcc0.ɵɵnextContext(); return ctx_r7.updateVote(idx_r4 + 1); });
    ɵngcc0.ɵɵtext(1, "star_rate ");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var idx_r4 = ɵngcc0.ɵɵnextContext().index;
    var ctx_r5 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵpropertyInterpolate1("id", "adf-colored-star-", idx_r4, "");
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(2, _c1, !ctx_r5.ratingValue));
} }
function RatingComponent_mat_list_item_1_mat_icon_3_Template(rf, ctx) { if (rf & 1) {
    var _r13 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "mat-icon", 10);
    ɵngcc0.ɵɵlistener("click", function RatingComponent_mat_list_item_1_mat_icon_3_Template_mat_icon_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r13); var idx_r4 = ɵngcc0.ɵɵnextContext().index; var ctx_r11 = ɵngcc0.ɵɵnextContext(); return ctx_r11.updateVote(idx_r4 + 1); });
    ɵngcc0.ɵɵtext(1, "star_border ");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var idx_r4 = ɵngcc0.ɵɵnextContext().index;
    ɵngcc0.ɵɵpropertyInterpolate1("id", "adf-grey-star-", idx_r4, "");
} }
function RatingComponent_mat_list_item_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-list-item", 5);
    ɵngcc0.ɵɵelementStart(1, "span", 6);
    ɵngcc0.ɵɵtemplate(2, RatingComponent_mat_list_item_1_mat_icon_2_Template, 2, 4, "mat-icon", 7);
    ɵngcc0.ɵɵtemplate(3, RatingComponent_mat_list_item_1_mat_icon_3_Template, 2, 1, "mat-icon", 8);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var currentRate_r3 = ctx.$implicit;
    var idx_r4 = ctx.index;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate1("id", "adf-rate-", idx_r4, "");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", currentRate_r3.fill);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !currentRate_r3.fill);
} }
function RatingComponent_div_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 11);
    ɵngcc0.ɵɵtext(1, "Rating");
    ɵngcc0.ɵɵelementEnd();
} }
function RatingComponent_div_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 11);
    ɵngcc0.ɵɵtext(1, "Ratings");
    ɵngcc0.ɵɵelementEnd();
} }
function LikeComponent_div_8_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 6);
    ɵngcc0.ɵɵtext(1, "Like");
    ɵngcc0.ɵɵelementEnd();
} }
function LikeComponent_div_9_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 6);
    ɵngcc0.ɵɵtext(1, "Likes");
    ɵngcc0.ɵɵelementEnd();
} }
var _c2 = function (a0, a1) { return { "adf-like-select": a0, "adf-like-grey": a1 }; };
function TagActionsComponent_mat_list_item_1_Template(rf, ctx) { if (rf & 1) {
    var _r5 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "mat-list-item");
    ɵngcc0.ɵɵelementStart(1, "div", 6);
    ɵngcc0.ɵɵlistener("click", function TagActionsComponent_mat_list_item_1_Template_div_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r5); var currentEntry_r2 = ctx.$implicit; var ctx_r4 = ɵngcc0.ɵɵnextContext(); return ctx_r4.removeTag(currentEntry_r2.entry.id); });
    ɵngcc0.ɵɵelementStart(2, "div", 7);
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(4, "mat-icon", 8);
    ɵngcc0.ɵɵtext(5, "delete");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var currentEntry_r2 = ctx.$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate1("id", "tag_delete_", currentEntry_r2.entry.tag, "");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate1("id", "tag_name_", currentEntry_r2.entry.tag, "");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(currentEntry_r2.entry.tag);
} }
var _c3 = function () { return { "color": "red" }; };
function TagActionsComponent_mat_hint_8_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-hint", 9);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngStyle", ɵngcc0.ɵɵpureFunction0(2, _c3));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r1.errorMsg);
} }
function TagListComponent_div_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 5);
    ɵngcc0.ɵɵelementStart(1, "mat-chip");
    ɵngcc0.ɵɵelementStart(2, "span", 6);
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var currentEntry_r3 = ctx.$implicit;
    var idx_r4 = ctx.index;
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵpropertyInterpolate1("id", "tag_name_", idx_r4, "");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(currentEntry_r3.entry.tag);
} }
function TagListComponent_button_3_Template(rf, ctx) { if (rf & 1) {
    var _r6 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 7);
    ɵngcc0.ɵɵlistener("click", function TagListComponent_button_3_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r6); var ctx_r5 = ɵngcc0.ɵɵnextContext(); return ctx_r5.loadLessTags(); });
    ɵngcc0.ɵɵelementStart(1, "mat-icon");
    ɵngcc0.ɵɵtext(2, "keyboard_arrow_up");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("disabled", ctx_r1.isLoading);
} }
function TagListComponent_button_4_Template(rf, ctx) { if (rf & 1) {
    var _r8 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 8);
    ɵngcc0.ɵɵlistener("click", function TagListComponent_button_4_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r8); var ctx_r7 = ɵngcc0.ɵɵnextContext(); return ctx_r7.loadMoreTags(); });
    ɵngcc0.ɵɵelementStart(1, "mat-icon");
    ɵngcc0.ɵɵtext(2, "keyboard_arrow_down");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("disabled", ctx_r2.isLoading);
} }
function TagNodeListComponent_mat_chip_1_mat_icon_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-icon", 4);
    ɵngcc0.ɵɵtext(1, "cancel ");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var currentEntry_r1 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵpropertyInterpolate1("id", "tag_chips_delete_", currentEntry_r1.entry.tag, "");
} }
function TagNodeListComponent_mat_chip_1_Template(rf, ctx) { if (rf & 1) {
    var _r6 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "mat-chip", 1);
    ɵngcc0.ɵɵlistener("removed", function TagNodeListComponent_mat_chip_1_Template_mat_chip_removed_0_listener() { ɵngcc0.ɵɵrestoreView(_r6); var currentEntry_r1 = ctx.$implicit; var ctx_r5 = ɵngcc0.ɵɵnextContext(); return ctx_r5.removeTag(currentEntry_r1.entry.id); });
    ɵngcc0.ɵɵelementStart(1, "span", 2);
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(3, TagNodeListComponent_mat_chip_1_mat_icon_3_Template, 2, 1, "mat-icon", 3);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var currentEntry_r1 = ctx.$implicit;
    var idx_r2 = ctx.index;
    var ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate1("id", "tag_name_", idx_r2, "");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(currentEntry_r1.entry.tag);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.showDelete);
} }
function WebscriptComponent_div_0_div_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 4);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "json");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r1 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(2, 1, ctx_r1.data));
} }
function WebscriptComponent_div_0_div_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "div", 5);
} if (rf & 2) {
    var ctx_r2 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("innerHTML", ctx_r2.data, ɵngcc0.ɵɵsanitizeHtml);
} }
function WebscriptComponent_div_0_div_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 6);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r3 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r3.data);
} }
var _c4 = function (a0, a1) { return { data: a0, contentType: a1 }; };
function WebscriptComponent_div_0_div_4_div_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 9);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r5 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1("", ɵngcc0.ɵɵpipeBind2(2, 1, "WEBSCRIPT.ERROR", ɵngcc0.ɵɵpureFunction2(4, _c4, ctx_r5.data, ctx_r5.contentType)), " ");
} }
function WebscriptComponent_div_0_div_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div");
    ɵngcc0.ɵɵelement(1, "adf-datatable", 7);
    ɵngcc0.ɵɵelementStart(2, "div");
    ɵngcc0.ɵɵtemplate(3, WebscriptComponent_div_0_div_4_div_3_Template, 3, 7, "div", 8);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r4 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("data", ctx_r4.data);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r4.showError);
} }
function WebscriptComponent_div_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div");
    ɵngcc0.ɵɵtemplate(1, WebscriptComponent_div_0_div_1_Template, 3, 3, "div", 1);
    ɵngcc0.ɵɵtemplate(2, WebscriptComponent_div_0_div_2_Template, 1, 1, "div", 2);
    ɵngcc0.ɵɵtemplate(3, WebscriptComponent_div_0_div_3_Template, 2, 1, "div", 3);
    ɵngcc0.ɵɵtemplate(4, WebscriptComponent_div_0_div_4_Template, 4, 2, "div", 0);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.contentType === "JSON");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.contentType === "HTML");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.contentType === "TEXT");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.isDataTableContent());
} }
var _c5 = ["dataTable"];
function DocumentListComponent_div_2_Template(rf, ctx) { if (rf & 1) {
    var _r6 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div");
    ɵngcc0.ɵɵelementStart(1, "adf-filter-header", 3);
    ɵngcc0.ɵɵlistener("filterSelection", function DocumentListComponent_div_2_Template_adf_filter_header_filterSelection_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r6); var ctx_r5 = ɵngcc0.ɵɵnextContext(); return ctx_r5.onFilterSelectionChange($event); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("currentFolderId", ctx_r1.currentFolderId)("value", ctx_r1.filterValue);
} }
function DocumentListComponent_ng_template_4_adf_empty_list_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "adf-empty-list");
    ɵngcc0.ɵɵelementStart(1, "div", 4);
    ɵngcc0.ɵɵelementStart(2, "div", 5);
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵpipe(4, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(5, "div", 6);
    ɵngcc0.ɵɵtext(6);
    ɵngcc0.ɵɵpipe(7, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(8, "div", 7);
    ɵngcc0.ɵɵtext(9);
    ɵngcc0.ɵɵpipe(10, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(11, "img", 8);
    ɵngcc0.ɵɵpipe(12, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r7 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(4, 5, "ADF-DOCUMENT-LIST.EMPTY.HEADER"));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(7, 7, "ADF-DATATABLE.EMPTY.DRAG-AND-DROP.TITLE"));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(10, 9, "ADF-DATATABLE.EMPTY.DRAG-AND-DROP.SUBTITLE"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("alt", ɵngcc0.ɵɵpipeBind1(12, 11, "ADF-DATATABLE.EMPTY.DRAG-AND-DROP.TITLE"))("src", ctx_r7.emptyFolderImageUrl, ɵngcc0.ɵɵsanitizeUrl);
} }
function DocumentListComponent_ng_template_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, DocumentListComponent_ng_template_4_adf_empty_list_0_Template, 13, 13, "adf-empty-list", 2);
    ɵngcc0.ɵɵprojection(1);
} if (rf & 2) {
    var ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r2.customNoContentTemplate);
} }
function DocumentListComponent_ng_template_6_div_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 10);
    ɵngcc0.ɵɵelementStart(1, "mat-icon");
    ɵngcc0.ɵɵtext(2, "error");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(3, "p", 11);
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵpipe(5, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(5, 1, "ADF-DOCUMENT-LIST.NO_PERMISSION"));
} }
function DocumentListComponent_ng_template_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, DocumentListComponent_ng_template_6_div_0_Template, 6, 3, "div", 9);
    ɵngcc0.ɵɵprojection(1, 1);
} if (rf & 2) {
    var ctx_r3 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r3.customNoPermissionsTemplate);
} }
function DocumentListComponent_ng_template_8_div_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 13);
    ɵngcc0.ɵɵelement(1, "mat-progress-spinner", 14);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("color", "primary")("mode", "indeterminate");
} }
function DocumentListComponent_ng_template_8_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, DocumentListComponent_ng_template_8_div_0_Template, 2, 2, "div", 12);
    ɵngcc0.ɵɵprojection(1, 2);
} if (rf & 2) {
    var ctx_r4 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r4.customLoadingContent);
} }
var _c6 = [[["adf-custom-empty-content-template"], ["empty-folder-content"]], [["adf-custom-no-permission-template"], ["no-permission-content"]], [["adf-custom-loading-content-template"]]];
var _c7 = ["adf-custom-empty-content-template, empty-folder-content", "adf-custom-no-permission-template, no-permission-content", "adf-custom-loading-content-template"];
var _c8 = function (a0) { return { name: a0 }; };
function FilterHeaderComponent_div_0_ng_template_2_Template(rf, ctx) { if (rf & 1) {
    var _r4 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "adf-search-filter-container", 1);
    ɵngcc0.ɵɵlistener("filterChange", function FilterHeaderComponent_div_0_ng_template_2_Template_adf_search_filter_container_filterChange_0_listener() { ɵngcc0.ɵɵrestoreView(_r4); var ctx_r3 = ɵngcc0.ɵɵnextContext(2); return ctx_r3.onFilterSelectionChange(); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var col_r2 = ctx.$implicit;
    var ctx_r1 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("col", col_r2)("value", ctx_r1.value);
} }
function FilterHeaderComponent_div_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div");
    ɵngcc0.ɵɵelementStart(1, "adf-header-filter-template");
    ɵngcc0.ɵɵtemplate(2, FilterHeaderComponent_div_0_ng_template_2_Template, 1, 2, "ng-template");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} }
function TrashcanNameColumnComponent_ng_container_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "span", 1);
    ɵngcc0.ɵɵpipe(2, "adfNodeNameTooltip");
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    var ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(2, 2, ctx_r0.node));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ctx_r0.displayText);
} }
function TrashcanNameColumnComponent_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "span", 1);
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    var ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate("title", ctx_r1.displayTooltip);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r1.displayText);
} }
var _c9 = ["uploadList"];
var _c10 = function (a0, a1) { return { completed: a0, total: a1 }; };
function FileUploadingDialogComponent_div_0_span_8_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 15);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r1 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind2(2, 1, "FILE_UPLOAD.MESSAGES.UPLOAD_PROGRESS", ɵngcc0.ɵɵpureFunction2(4, _c10, ctx_r1.totalCompleted, ctx_r1.filesUploadingList.length)), " ");
} }
function FileUploadingDialogComponent_div_0_span_9_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 15);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 1, "FILE_UPLOAD.MESSAGES.UPLOAD_CANCELED"), " ");
} }
var _c11 = function (a0) { return { total: a0 }; };
function FileUploadingDialogComponent_div_0_section_10_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "section", 16);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r3 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind2(2, 1, ctx_r3.totalErrors > 1 ? "FILE_UPLOAD.MESSAGES.UPLOAD_ERRORS" : "FILE_UPLOAD.MESSAGES.UPLOAD_ERROR", ɵngcc0.ɵɵpureFunction1(4, _c11, ctx_r3.totalErrors)), " ");
} }
function FileUploadingDialogComponent_div_0_ng_template_14_Template(rf, ctx) { if (rf & 1) {
    var _r10 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "adf-file-uploading-list-row", 17);
    ɵngcc0.ɵɵlistener("remove", function FileUploadingDialogComponent_div_0_ng_template_14_Template_adf_file_uploading_list_row_remove_0_listener() { ɵngcc0.ɵɵrestoreView(_r10); var file_r8 = ctx.$implicit; ɵngcc0.ɵɵnextContext(); var _r4 = ɵngcc0.ɵɵreference(13); return _r4.removeFile(file_r8); })("cancel", function FileUploadingDialogComponent_div_0_ng_template_14_Template_adf_file_uploading_list_row_cancel_0_listener() { ɵngcc0.ɵɵrestoreView(_r10); var file_r8 = ctx.$implicit; ɵngcc0.ɵɵnextContext(); var _r4 = ɵngcc0.ɵɵreference(13); return _r4.cancelFile(file_r8); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var file_r8 = ctx.$implicit;
    ɵngcc0.ɵɵproperty("file", file_r8);
} }
function FileUploadingDialogComponent_div_0_footer_22_button_1_Template(rf, ctx) { if (rf & 1) {
    var _r15 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 21);
    ɵngcc0.ɵɵlistener("click", function FileUploadingDialogComponent_div_0_footer_22_button_1_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r15); var ctx_r14 = ɵngcc0.ɵɵnextContext(3); return ctx_r14.toggleConfirmation(); });
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵattribute("aria-label", ɵngcc0.ɵɵpipeBind1(1, 2, "ADF_FILE_UPLOAD.ARIA-LABEL.CANCEL_ALL"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(3, 4, "ADF_FILE_UPLOAD.BUTTON.CANCEL_ALL"));
} }
function FileUploadingDialogComponent_div_0_footer_22_button_2_Template(rf, ctx) { if (rf & 1) {
    var _r17 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 22);
    ɵngcc0.ɵɵlistener("click", function FileUploadingDialogComponent_div_0_footer_22_button_2_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r17); var ctx_r16 = ɵngcc0.ɵɵnextContext(3); return ctx_r16.close(); });
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵattribute("aria-label", ɵngcc0.ɵɵpipeBind1(1, 2, "ADF_FILE_UPLOAD.ARIA-LABEL.DIALOG_CLOSE"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(3, 4, "ADF_FILE_UPLOAD.BUTTON.CLOSE"));
} }
function FileUploadingDialogComponent_div_0_footer_22_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "footer", 18);
    ɵngcc0.ɵɵtemplate(1, FileUploadingDialogComponent_div_0_footer_22_button_1_Template, 4, 6, "button", 19);
    ɵngcc0.ɵɵtemplate(2, FileUploadingDialogComponent_div_0_footer_22_button_2_Template, 4, 6, "button", 20);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r6 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r6.canShowCancelAll());
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r6.canCloseDialog());
} }
function FileUploadingDialogComponent_div_0_footer_23_Template(rf, ctx) { if (rf & 1) {
    var _r19 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "footer", 23);
    ɵngcc0.ɵɵelementStart(1, "button", 24);
    ɵngcc0.ɵɵlistener("click", function FileUploadingDialogComponent_div_0_footer_23_Template_button_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r19); var ctx_r18 = ɵngcc0.ɵɵnextContext(2); return ctx_r18.cancelAllUploads(); });
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵpipe(4, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(5, "button", 25);
    ɵngcc0.ɵɵlistener("click", function FileUploadingDialogComponent_div_0_footer_23_Template_button_click_5_listener() { ɵngcc0.ɵɵrestoreView(_r19); var ctx_r20 = ɵngcc0.ɵɵnextContext(2); return ctx_r20.toggleConfirmation(); });
    ɵngcc0.ɵɵpipe(6, "translate");
    ɵngcc0.ɵɵtext(7);
    ɵngcc0.ɵɵpipe(8, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵattribute("aria-label", ɵngcc0.ɵɵpipeBind1(2, 4, "ADF_FILE_UPLOAD.ARIA-LABEL.CONFIRMATION.CANCEL"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(4, 6, "ADF_FILE_UPLOAD.CONFIRMATION.BUTTON.CANCEL"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵattribute("aria-label", ɵngcc0.ɵɵpipeBind1(6, 8, "ADF_FILE_UPLOAD.ARIA-LABEL.CONFIRMATION.CONTINUE"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(8, 10, "ADF_FILE_UPLOAD.CONFIRMATION.BUTTON.CONTINUE"));
} }
function FileUploadingDialogComponent_div_0_Template(rf, ctx) { if (rf & 1) {
    var _r22 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 1);
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵelementStart(2, "header", 2);
    ɵngcc0.ɵɵelementStart(3, "button", 3);
    ɵngcc0.ɵɵlistener("click", function FileUploadingDialogComponent_div_0_Template_button_click_3_listener() { ɵngcc0.ɵɵrestoreView(_r22); var ctx_r21 = ɵngcc0.ɵɵnextContext(); return ctx_r21.toggleMinimized(); });
    ɵngcc0.ɵɵpipe(4, "translate");
    ɵngcc0.ɵɵelementStart(5, "mat-icon", 4);
    ɵngcc0.ɵɵpipe(6, "translate");
    ɵngcc0.ɵɵtext(7);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(8, FileUploadingDialogComponent_div_0_span_8_Template, 3, 7, "span", 5);
    ɵngcc0.ɵɵtemplate(9, FileUploadingDialogComponent_div_0_span_9_Template, 3, 3, "span", 5);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(10, FileUploadingDialogComponent_div_0_section_10_Template, 3, 6, "section", 6);
    ɵngcc0.ɵɵelementStart(11, "section", 7);
    ɵngcc0.ɵɵelementStart(12, "adf-file-uploading-list", 8, 9);
    ɵngcc0.ɵɵtemplate(14, FileUploadingDialogComponent_div_0_ng_template_14_Template, 1, 1, "ng-template");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(15, "div", 10);
    ɵngcc0.ɵɵelementStart(16, "p", 11);
    ɵngcc0.ɵɵtext(17);
    ɵngcc0.ɵɵpipe(18, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(19, "p", 12);
    ɵngcc0.ɵɵtext(20);
    ɵngcc0.ɵɵpipe(21, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(22, FileUploadingDialogComponent_div_0_footer_22_Template, 3, 2, "footer", 13);
    ɵngcc0.ɵɵtemplate(23, FileUploadingDialogComponent_div_0_footer_23_Template, 9, 12, "footer", 14);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var _r4 = ɵngcc0.ɵɵreference(13);
    var ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵclassProp("adf-upload-dialog--minimized", ctx_r0.isDialogMinimized);
    ɵngcc0.ɵɵattribute("aria-label", ɵngcc0.ɵɵpipeBind1(1, 22, "ADF_FILE_UPLOAD.ARIA-LABEL.DIALOG"));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("disabled", ctx_r0.isConfirmation);
    ɵngcc0.ɵɵattribute("aria-label", ɵngcc0.ɵɵpipeBind1(4, 24, ctx_r0.isDialogMinimized ? "ADF_FILE_UPLOAD.ARIA-LABEL.DIALOG_MAXIMIZE" : "ADF_FILE_UPLOAD.ARIA-LABEL.DIALOG_MINIMIZE"))("aria-expanded", !ctx_r0.isDialogMinimized);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(6, 26, ctx_r0.isDialogMinimized ? "ADF_FILE_UPLOAD.BUTTON.MAXIMIZE" : "ADF_FILE_UPLOAD.BUTTON.MINIMIZE"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r0.isDialogMinimized ? "keyboard_arrow_up" : "keyboard_arrow_down", " ");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !_r4.isUploadCancelled());
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", _r4.isUploadCancelled());
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.totalErrors);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵclassProp("adf-upload-dialog--padding", ctx_r0.isConfirmation);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵclassProp("adf-upload-dialog--hide", ctx_r0.isConfirmation);
    ɵngcc0.ɵɵproperty("files", ctx_r0.filesUploadingList);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵclassProp("adf-upload-dialog--hide", !ctx_r0.isConfirmation);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(18, 28, "ADF_FILE_UPLOAD.CONFIRMATION.MESSAGE.TITLE"), " ");
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(21, 30, "ADF_FILE_UPLOAD.CONFIRMATION.MESSAGE.TEXT"), " ");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r0.isConfirmation);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.isConfirmation);
} }
function FileUploadingListRowComponent_mat_icon_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-icon", 11);
    ɵngcc0.ɵɵtext(1, " insert_drive_file ");
    ɵngcc0.ɵɵelementEnd();
} }
function FileUploadingListRowComponent_adf_icon_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "adf-icon", 12);
} if (rf & 2) {
    var ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵpropertyInterpolate1("value", "adf:", ctx_r1.mimeType, "");
} }
var _c12 = function (a0) { return { version: a0 }; };
function FileUploadingListRowComponent_span_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 13);
    ɵngcc0.ɵɵelementStart(1, "mat-chip", 14);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("title", "version" + ctx_r2.versionNumber);
    ɵngcc0.ɵɵattribute("aria-label", ɵngcc0.ɵɵpipeBind2(2, 3, "ADF_FILE_UPLOAD.ARIA-LABEL.VERSION", ɵngcc0.ɵɵpureFunction1(6, _c12, ctx_r2.versionNumber)));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ctx_r2.versionNumber);
} }
function FileUploadingListRowComponent_div_6_span_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 19);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "adfFileSize");
    ɵngcc0.ɵɵpipe(3, "adfFileSize");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r10 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate2(" ", ɵngcc0.ɵɵpipeBind1(2, 2, ctx_r10.file.progress.loaded), " / ", ɵngcc0.ɵɵpipeBind1(3, 4, ctx_r10.file.progress.total), " ");
} }
function FileUploadingListRowComponent_div_6_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-icon", 20);
    ɵngcc0.ɵɵtext(1, " clear ");
    ɵngcc0.ɵɵelementEnd();
} }
var _c13 = function (a0) { return { file: a0 }; };
function FileUploadingListRowComponent_div_6_Template(rf, ctx) { if (rf & 1) {
    var _r13 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 15, 16);
    ɵngcc0.ɵɵlistener("keyup.enter", function FileUploadingListRowComponent_div_6_Template_div_keyup_enter_0_listener() { ɵngcc0.ɵɵrestoreView(_r13); var ctx_r12 = ɵngcc0.ɵɵnextContext(); return ctx_r12.onCancel(ctx_r12.file); })("click", function FileUploadingListRowComponent_div_6_Template_div_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r13); var ctx_r14 = ɵngcc0.ɵɵnextContext(); return ctx_r14.onCancel(ctx_r14.file); });
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵtemplate(4, FileUploadingListRowComponent_div_6_span_4_Template, 4, 6, "span", 17);
    ɵngcc0.ɵɵtemplate(5, FileUploadingListRowComponent_div_6_mat_icon_5_Template, 2, 0, "mat-icon", 18);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var _r9 = ɵngcc0.ɵɵreference(1);
    var ctx_r3 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(3, 7, "ADF_FILE_UPLOAD.BUTTON.CANCEL_FILE"));
    ɵngcc0.ɵɵattribute("aria-label", ɵngcc0.ɵɵpipeBind2(2, 4, "ADF_FILE_UPLOAD.ARIA-LABEL.CANCEL_FILE_UPLOAD", ɵngcc0.ɵɵpureFunction1(9, _c13, ctx_r3.file.name)));
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵproperty("ngIf", !_r9.isToggled);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", _r9.isToggled);
} }
function FileUploadingListRowComponent_button_7_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-icon", 24);
    ɵngcc0.ɵɵtext(1, " check_circle ");
    ɵngcc0.ɵɵelementEnd();
} }
function FileUploadingListRowComponent_button_7_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-icon", 25);
    ɵngcc0.ɵɵtext(1, " remove_circle ");
    ɵngcc0.ɵɵelementEnd();
} }
function FileUploadingListRowComponent_button_7_Template(rf, ctx) { if (rf & 1) {
    var _r19 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 21, 16);
    ɵngcc0.ɵɵlistener("click", function FileUploadingListRowComponent_button_7_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r19); var ctx_r18 = ɵngcc0.ɵɵnextContext(); return ctx_r18.onRemove(ctx_r18.file); });
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵtemplate(4, FileUploadingListRowComponent_button_7_mat_icon_4_Template, 2, 0, "mat-icon", 22);
    ɵngcc0.ɵɵtemplate(5, FileUploadingListRowComponent_button_7_mat_icon_5_Template, 2, 0, "mat-icon", 23);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var _r15 = ɵngcc0.ɵɵreference(1);
    var ctx_r4 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(3, 7, "ADF_FILE_UPLOAD.BUTTON.REMOVE_FILE"));
    ɵngcc0.ɵɵattribute("aria-label", ɵngcc0.ɵɵpipeBind2(2, 4, "ADF_FILE_UPLOAD.ARIA-LABEL.REMOVE_FILE", ɵngcc0.ɵɵpureFunction1(9, _c13, ctx_r4.file.name)));
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵproperty("ngIf", !_r15.isToggled);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", _r15.isToggled);
} }
function FileUploadingListRowComponent_div_8_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 26);
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵelementStart(2, "mat-icon", 27);
    ɵngcc0.ɵɵtext(3, " check_circle ");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵattribute("aria-label", ɵngcc0.ɵɵpipeBind1(1, 1, "ADF_FILE_UPLOAD.STATUS.FILE_DONE_STATUS"));
} }
function FileUploadingListRowComponent_button_9_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-icon", 31);
    ɵngcc0.ɵɵtext(1, " schedule ");
    ɵngcc0.ɵɵelementEnd();
} }
function FileUploadingListRowComponent_button_9_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-icon", 25);
    ɵngcc0.ɵɵtext(1, " remove_circle ");
    ɵngcc0.ɵɵelementEnd();
} }
function FileUploadingListRowComponent_button_9_Template(rf, ctx) { if (rf & 1) {
    var _r24 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 28, 29);
    ɵngcc0.ɵɵlistener("click", function FileUploadingListRowComponent_button_9_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r24); var ctx_r23 = ɵngcc0.ɵɵnextContext(); return ctx_r23.onCancel(ctx_r23.file); });
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵtemplate(4, FileUploadingListRowComponent_button_9_mat_icon_4_Template, 2, 0, "mat-icon", 30);
    ɵngcc0.ɵɵtemplate(5, FileUploadingListRowComponent_button_9_mat_icon_5_Template, 2, 0, "mat-icon", 23);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var _r20 = ɵngcc0.ɵɵreference(1);
    var ctx_r6 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(2, 4, "ADF_FILE_UPLOAD.BUTTON.CANCEL_FILE"));
    ɵngcc0.ɵɵattribute("aria-label", ɵngcc0.ɵɵpipeBind2(3, 6, "ADF_FILE_UPLOAD.ARIA-LABEL.CANCEL_FILE", ɵngcc0.ɵɵpureFunction1(9, _c13, ctx_r6.file.name)));
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵproperty("ngIf", !_r20.isToggled);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", _r20.isToggled);
} }
var _c14 = function (a0) { return { error: a0 }; };
function FileUploadingListRowComponent_div_10_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 32);
    ɵngcc0.ɵɵelementStart(1, "mat-icon", 33);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵpipe(3, "adfFileUploadError");
    ɵngcc0.ɵɵpipe(4, "adfFileUploadError");
    ɵngcc0.ɵɵtext(5, " report_problem ");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r7 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("matTooltip", ɵngcc0.ɵɵpipeBind1(4, 7, ctx_r7.file.errorCode));
    ɵngcc0.ɵɵattribute("aria-label", ɵngcc0.ɵɵpipeBind2(2, 2, "ADF_FILE_UPLOAD.ARIA-LABEL.UPLOAD_FILE_ERROR", ɵngcc0.ɵɵpureFunction1(9, _c14, ɵngcc0.ɵɵpipeBind1(3, 5, ctx_r7.file.errorCode))));
} }
function FileUploadingListRowComponent_div_11_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 34);
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵattribute("aria-label", ɵngcc0.ɵɵpipeBind1(1, 2, "ADF_FILE_UPLOAD.STATUS.FILE_CANCELED_STATUS"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(3, 4, "ADF_FILE_UPLOAD.STATUS.FILE_CANCELED_STATUS"), " ");
} }
function FileUploadingListComponent_ng_template_1_Template(rf, ctx) { }
function UploadButtonComponent_div_1_button_1_span_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 8);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(2, 1, "FILE_UPLOAD.BUTTON.UPLOAD_FILE"));
} }
function UploadButtonComponent_div_1_button_1_span_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 9);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r5 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r5.staticTitle);
} }
function UploadButtonComponent_div_1_button_1_Template(rf, ctx) { if (rf & 1) {
    var _r8 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 3);
    ɵngcc0.ɵɵlistener("click", function UploadButtonComponent_div_1_button_1_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r8); var _r6 = ɵngcc0.ɵɵreference(6); return _r6.click(); });
    ɵngcc0.ɵɵelementStart(1, "mat-icon");
    ɵngcc0.ɵɵtext(2, "file_upload");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(3, UploadButtonComponent_div_1_button_1_span_3_Template, 3, 3, "span", 4);
    ɵngcc0.ɵɵtemplate(4, UploadButtonComponent_div_1_button_1_span_4_Template, 2, 1, "span", 5);
    ɵngcc0.ɵɵelementStart(5, "input", 6, 7);
    ɵngcc0.ɵɵlistener("change", function UploadButtonComponent_div_1_button_1_Template_input_change_5_listener($event) { ɵngcc0.ɵɵrestoreView(_r8); var ctx_r9 = ɵngcc0.ɵɵnextContext(2); return ctx_r9.onFilesAdded($event); })("click", function UploadButtonComponent_div_1_button_1_Template_input_click_5_listener() { ɵngcc0.ɵɵrestoreView(_r8); var ctx_r10 = ɵngcc0.ɵɵnextContext(2); return ctx_r10.onClickUploadButton(); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r2 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("disabled", ctx_r2.isButtonDisabled());
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r2.staticTitle);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r2.staticTitle);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate("accept", ctx_r2.acceptedFilesType);
    ɵngcc0.ɵɵproperty("type", ctx_r2.file ? "button" : "file")("title", ctx_r2.tooltip);
    ɵngcc0.ɵɵattribute("disabled", ctx_r2.isButtonDisabled());
} }
function UploadButtonComponent_div_1_button_2_span_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 14);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(2, 1, "FILE_UPLOAD.BUTTON.UPLOAD_FILE"));
} }
function UploadButtonComponent_div_1_button_2_span_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 15);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r12 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r12.staticTitle);
} }
function UploadButtonComponent_div_1_button_2_Template(rf, ctx) { if (rf & 1) {
    var _r15 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 3);
    ɵngcc0.ɵɵlistener("click", function UploadButtonComponent_div_1_button_2_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r15); var _r13 = ɵngcc0.ɵɵreference(6); return _r13.click(); });
    ɵngcc0.ɵɵelementStart(1, "mat-icon");
    ɵngcc0.ɵɵtext(2, "file_upload");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(3, UploadButtonComponent_div_1_button_2_span_3_Template, 3, 3, "span", 10);
    ɵngcc0.ɵɵtemplate(4, UploadButtonComponent_div_1_button_2_span_4_Template, 2, 1, "span", 11);
    ɵngcc0.ɵɵelementStart(5, "input", 12, 13);
    ɵngcc0.ɵɵlistener("change", function UploadButtonComponent_div_1_button_2_Template_input_change_5_listener($event) { ɵngcc0.ɵɵrestoreView(_r15); var ctx_r16 = ɵngcc0.ɵɵnextContext(2); return ctx_r16.onFilesAdded($event); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r3 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("disabled", ctx_r3.isButtonDisabled());
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r3.staticTitle);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r3.staticTitle);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate("accept", ctx_r3.acceptedFilesType);
    ɵngcc0.ɵɵproperty("title", ctx_r3.tooltip);
    ɵngcc0.ɵɵattribute("disabled", ctx_r3.isButtonDisabled());
} }
function UploadButtonComponent_div_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div");
    ɵngcc0.ɵɵtemplate(1, UploadButtonComponent_div_1_button_1_Template, 7, 7, "button", 2);
    ɵngcc0.ɵɵtemplate(2, UploadButtonComponent_div_1_button_2_Template, 7, 6, "button", 2);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r0.multipleFiles);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.multipleFiles);
} }
function UploadButtonComponent_div_2_span_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 20);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(2, 1, "FILE_UPLOAD.BUTTON.UPLOAD_FOLDER"));
} }
function UploadButtonComponent_div_2_span_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 21);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r18 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r18.staticTitle);
} }
function UploadButtonComponent_div_2_Template(rf, ctx) { if (rf & 1) {
    var _r21 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div");
    ɵngcc0.ɵɵelementStart(1, "button", 3);
    ɵngcc0.ɵɵlistener("click", function UploadButtonComponent_div_2_Template_button_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r21); var _r19 = ɵngcc0.ɵɵreference(7); return _r19.click(); });
    ɵngcc0.ɵɵelementStart(2, "mat-icon");
    ɵngcc0.ɵɵtext(3, "file_upload");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(4, UploadButtonComponent_div_2_span_4_Template, 3, 3, "span", 16);
    ɵngcc0.ɵɵtemplate(5, UploadButtonComponent_div_2_span_5_Template, 2, 1, "span", 17);
    ɵngcc0.ɵɵelementStart(6, "input", 18, 19);
    ɵngcc0.ɵɵlistener("change", function UploadButtonComponent_div_2_Template_input_change_6_listener($event) { ɵngcc0.ɵɵrestoreView(_r21); var ctx_r22 = ɵngcc0.ɵɵnextContext(); return ctx_r22.onDirectoryAdded($event); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("disabled", ctx_r1.isButtonDisabled());
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r1.staticTitle);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r1.staticTitle);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate("accept", ctx_r1.acceptedFilesType);
    ɵngcc0.ɵɵproperty("title", ctx_r1.tooltip);
    ɵngcc0.ɵɵattribute("disabled", ctx_r1.isButtonDisabled());
} }
function UploadVersionButtonComponent_div_1_button_1_span_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 8);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(2, 1, "FILE_UPLOAD.BUTTON.UPLOAD_FILE"));
} }
function UploadVersionButtonComponent_div_1_button_1_span_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 9);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r5 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r5.staticTitle);
} }
function UploadVersionButtonComponent_div_1_button_1_Template(rf, ctx) { if (rf & 1) {
    var _r8 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 3);
    ɵngcc0.ɵɵlistener("click", function UploadVersionButtonComponent_div_1_button_1_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r8); var _r6 = ɵngcc0.ɵɵreference(6); return _r6.click(); });
    ɵngcc0.ɵɵelementStart(1, "mat-icon");
    ɵngcc0.ɵɵtext(2, "file_upload");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(3, UploadVersionButtonComponent_div_1_button_1_span_3_Template, 3, 3, "span", 4);
    ɵngcc0.ɵɵtemplate(4, UploadVersionButtonComponent_div_1_button_1_span_4_Template, 2, 1, "span", 5);
    ɵngcc0.ɵɵelementStart(5, "input", 6, 7);
    ɵngcc0.ɵɵlistener("change", function UploadVersionButtonComponent_div_1_button_1_Template_input_change_5_listener($event) { ɵngcc0.ɵɵrestoreView(_r8); var ctx_r9 = ɵngcc0.ɵɵnextContext(2); return ctx_r9.onFilesAdded($event); })("click", function UploadVersionButtonComponent_div_1_button_1_Template_input_click_5_listener() { ɵngcc0.ɵɵrestoreView(_r8); var ctx_r10 = ɵngcc0.ɵɵnextContext(2); return ctx_r10.onClickUploadButton(); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r2 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("disabled", ctx_r2.isButtonDisabled());
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r2.staticTitle);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r2.staticTitle);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate("accept", ctx_r2.acceptedFilesType);
    ɵngcc0.ɵɵproperty("type", ctx_r2.file ? "button" : "file")("title", ctx_r2.tooltip);
    ɵngcc0.ɵɵattribute("disabled", ctx_r2.isButtonDisabled());
} }
function UploadVersionButtonComponent_div_1_button_2_span_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 14);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(2, 1, "FILE_UPLOAD.BUTTON.UPLOAD_FILE"));
} }
function UploadVersionButtonComponent_div_1_button_2_span_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 15);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r12 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r12.staticTitle);
} }
function UploadVersionButtonComponent_div_1_button_2_Template(rf, ctx) { if (rf & 1) {
    var _r15 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 3);
    ɵngcc0.ɵɵlistener("click", function UploadVersionButtonComponent_div_1_button_2_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r15); var _r13 = ɵngcc0.ɵɵreference(6); return _r13.click(); });
    ɵngcc0.ɵɵelementStart(1, "mat-icon");
    ɵngcc0.ɵɵtext(2, "file_upload");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(3, UploadVersionButtonComponent_div_1_button_2_span_3_Template, 3, 3, "span", 10);
    ɵngcc0.ɵɵtemplate(4, UploadVersionButtonComponent_div_1_button_2_span_4_Template, 2, 1, "span", 11);
    ɵngcc0.ɵɵelementStart(5, "input", 12, 13);
    ɵngcc0.ɵɵlistener("change", function UploadVersionButtonComponent_div_1_button_2_Template_input_change_5_listener($event) { ɵngcc0.ɵɵrestoreView(_r15); var ctx_r16 = ɵngcc0.ɵɵnextContext(2); return ctx_r16.onFilesAdded($event); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r3 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("disabled", ctx_r3.isButtonDisabled());
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r3.staticTitle);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r3.staticTitle);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate("accept", ctx_r3.acceptedFilesType);
    ɵngcc0.ɵɵproperty("title", ctx_r3.tooltip);
    ɵngcc0.ɵɵattribute("disabled", ctx_r3.isButtonDisabled());
} }
function UploadVersionButtonComponent_div_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div");
    ɵngcc0.ɵɵtemplate(1, UploadVersionButtonComponent_div_1_button_1_Template, 7, 7, "button", 2);
    ɵngcc0.ɵɵtemplate(2, UploadVersionButtonComponent_div_1_button_2_Template, 7, 6, "button", 2);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r0.multipleFiles);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.multipleFiles);
} }
function UploadVersionButtonComponent_div_2_span_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 20);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(2, 1, "FILE_UPLOAD.BUTTON.UPLOAD_FOLDER"));
} }
function UploadVersionButtonComponent_div_2_span_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 21);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r18 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r18.staticTitle);
} }
function UploadVersionButtonComponent_div_2_Template(rf, ctx) { if (rf & 1) {
    var _r21 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div");
    ɵngcc0.ɵɵelementStart(1, "button", 3);
    ɵngcc0.ɵɵlistener("click", function UploadVersionButtonComponent_div_2_Template_button_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r21); var _r19 = ɵngcc0.ɵɵreference(7); return _r19.click(); });
    ɵngcc0.ɵɵelementStart(2, "mat-icon");
    ɵngcc0.ɵɵtext(3, "file_upload");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(4, UploadVersionButtonComponent_div_2_span_4_Template, 3, 3, "span", 16);
    ɵngcc0.ɵɵtemplate(5, UploadVersionButtonComponent_div_2_span_5_Template, 2, 1, "span", 17);
    ɵngcc0.ɵɵelementStart(6, "input", 18, 19);
    ɵngcc0.ɵɵlistener("change", function UploadVersionButtonComponent_div_2_Template_input_change_6_listener($event) { ɵngcc0.ɵɵrestoreView(_r21); var ctx_r22 = ɵngcc0.ɵɵnextContext(); return ctx_r22.onDirectoryAdded($event); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("disabled", ctx_r1.isButtonDisabled());
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r1.staticTitle);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r1.staticTitle);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate("accept", ctx_r1.acceptedFilesType);
    ɵngcc0.ɵɵproperty("title", ctx_r1.tooltip);
    ɵngcc0.ɵɵattribute("disabled", ctx_r1.isButtonDisabled());
} }
var _c15 = ".adf-upload-button-file-container input{display:none}";
var _c16 = ["*"];
var _c17 = ["searchTextInput"];
var _c18 = ["search"];
function SearchControlComponent_div_0_ng_template_6_mat_list_0_mat_list_item_1_h4_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "h4", 15);
    ɵngcc0.ɵɵpipe(1, "highlight");
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r14 = ɵngcc0.ɵɵnextContext();
    var idx_r10 = ctx_r14.index;
    var item_r9 = ctx_r14.$implicit;
    var ctx_r11 = ɵngcc0.ɵɵnextContext(4);
    ɵngcc0.ɵɵpropertyInterpolate1("id", "result_name_", idx_r10, "");
    ɵngcc0.ɵɵproperty("innerHtml", ɵngcc0.ɵɵpipeBind2(1, 3, item_r9.entry.name, ctx_r11.searchTerm), ɵngcc0.ɵɵsanitizeHtml);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", item_r9 == null ? null : item_r9.entry.name, " ");
} }
function SearchControlComponent_div_0_ng_template_6_mat_list_0_mat_list_item_1_ng_template_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "h4", 15);
} if (rf & 2) {
    var ctx_r15 = ɵngcc0.ɵɵnextContext();
    var idx_r10 = ctx_r15.index;
    var item_r9 = ctx_r15.$implicit;
    ɵngcc0.ɵɵpropertyInterpolate1("id", "result_name_", idx_r10, "");
    ɵngcc0.ɵɵproperty("innerHtml", item_r9.entry.name, ɵngcc0.ɵɵsanitizeHtml);
} }
function SearchControlComponent_div_0_ng_template_6_mat_list_0_mat_list_item_1_Template(rf, ctx) { if (rf & 1) {
    var _r17 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "mat-list-item", 9);
    ɵngcc0.ɵɵlistener("blur", function SearchControlComponent_div_0_ng_template_6_mat_list_0_mat_list_item_1_Template_mat_list_item_blur_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r17); var ctx_r16 = ɵngcc0.ɵɵnextContext(4); return ctx_r16.onBlur($event); })("keyup.arrowdown", function SearchControlComponent_div_0_ng_template_6_mat_list_0_mat_list_item_1_Template_mat_list_item_keyup_arrowdown_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r17); var ctx_r18 = ɵngcc0.ɵɵnextContext(4); return ctx_r18.onRowArrowDown($event); })("keyup.arrowup", function SearchControlComponent_div_0_ng_template_6_mat_list_0_mat_list_item_1_Template_mat_list_item_keyup_arrowup_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r17); var ctx_r19 = ɵngcc0.ɵɵnextContext(4); return ctx_r19.onRowArrowUp($event); })("click", function SearchControlComponent_div_0_ng_template_6_mat_list_0_mat_list_item_1_Template_mat_list_item_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r17); var item_r9 = ctx.$implicit; var ctx_r20 = ɵngcc0.ɵɵnextContext(4); return ctx_r20.elementClicked(item_r9); })("keyup.enter", function SearchControlComponent_div_0_ng_template_6_mat_list_0_mat_list_item_1_Template_mat_list_item_keyup_enter_0_listener() { ɵngcc0.ɵɵrestoreView(_r17); var item_r9 = ctx.$implicit; var ctx_r21 = ɵngcc0.ɵɵnextContext(4); return ctx_r21.elementClicked(item_r9); })("touchend", function SearchControlComponent_div_0_ng_template_6_mat_list_0_mat_list_item_1_Template_mat_list_item_touchend_0_listener() { ɵngcc0.ɵɵrestoreView(_r17); var item_r9 = ctx.$implicit; var ctx_r22 = ɵngcc0.ɵɵnextContext(4); return ctx_r22.elementClicked(item_r9); });
    ɵngcc0.ɵɵelementStart(1, "mat-icon", 10);
    ɵngcc0.ɵɵelement(2, "img", 11);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(3, SearchControlComponent_div_0_ng_template_6_mat_list_0_mat_list_item_1_h4_3_Template, 3, 6, "h4", 12);
    ɵngcc0.ɵɵtemplate(4, SearchControlComponent_div_0_ng_template_6_mat_list_0_mat_list_item_1_ng_template_4_Template, 1, 2, "ng-template", null, 13, ɵngcc0.ɵɵtemplateRefExtractor);
    ɵngcc0.ɵɵelementStart(6, "p", 14);
    ɵngcc0.ɵɵtext(7);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var item_r9 = ctx.$implicit;
    var idx_r10 = ctx.index;
    var _r12 = ɵngcc0.ɵɵreference(5);
    var ctx_r7 = ɵngcc0.ɵɵnextContext(4);
    ɵngcc0.ɵɵpropertyInterpolate1("id", "result_option_", idx_r10, "");
    ɵngcc0.ɵɵproperty("tabindex", 0);
    ɵngcc0.ɵɵattribute("data-automation-id", "autocomplete_for_" + item_r9.entry.name);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("alt", ctx_r7.getMimeType(item_r9))("src", ctx_r7.getMimeTypeIcon(item_r9), ɵngcc0.ɵɵsanitizeUrl);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r7.highlight)("ngIfElse", _r12);
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵtextInterpolate1(" ", item_r9 == null ? null : item_r9.entry.createdByUser.displayName, " ");
} }
function SearchControlComponent_div_0_ng_template_6_mat_list_0_mat_list_item_2_ng_content_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵprojection(0, 0, ["selector", "adf-empty-search-result", "*ngIf", "isNoSearchTemplatePresent() else defaultNoResult"]);
} }
var _c19 = function (a0) { return { searchTerm: a0 }; };
function SearchControlComponent_div_0_ng_template_6_mat_list_0_mat_list_item_2_ng_template_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "p", 14);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r25 = ɵngcc0.ɵɵnextContext(5);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind2(2, 1, "SEARCH.RESULTS.NONE", ɵngcc0.ɵɵpureFunction1(4, _c19, ctx_r25.searchTerm)));
} }
function SearchControlComponent_div_0_ng_template_6_mat_list_0_mat_list_item_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-list-item", 16);
    ɵngcc0.ɵɵtemplate(1, SearchControlComponent_div_0_ng_template_6_mat_list_0_mat_list_item_2_ng_content_1_Template, 1, 0, "ng-content", 17);
    ɵngcc0.ɵɵtemplate(2, SearchControlComponent_div_0_ng_template_6_mat_list_0_mat_list_item_2_ng_template_2_Template, 3, 6, "ng-template", null, 18, ɵngcc0.ɵɵtemplateRefExtractor);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var _r24 = ɵngcc0.ɵɵreference(3);
    var ctx_r8 = ɵngcc0.ɵɵnextContext(4);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r8.isNoSearchTemplatePresent())("ngIfElse", _r24);
} }
function SearchControlComponent_div_0_ng_template_6_mat_list_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-list", 6);
    ɵngcc0.ɵɵtemplate(1, SearchControlComponent_div_0_ng_template_6_mat_list_0_mat_list_item_1_Template, 8, 8, "mat-list-item", 7);
    ɵngcc0.ɵɵtemplate(2, SearchControlComponent_div_0_ng_template_6_mat_list_0_mat_list_item_2_Template, 4, 2, "mat-list-item", 8);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var data_r5 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", data_r5 == null ? null : data_r5.list == null ? null : data_r5.list.entries);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", (data_r5 == null ? null : data_r5.list == null ? null : data_r5.list.entries.length) === 0);
} }
function SearchControlComponent_div_0_ng_template_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, SearchControlComponent_div_0_ng_template_6_mat_list_0_Template, 3, 2, "mat-list", 5);
} if (rf & 2) {
    ɵngcc0.ɵɵnextContext();
    var _r1 = ɵngcc0.ɵɵreference(2);
    ɵngcc0.ɵɵproperty("ngIf", _r1 == null ? null : _r1.isSearchBarActive());
} }
function SearchControlComponent_div_0_Template(rf, ctx) { if (rf & 1) {
    var _r28 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div");
    ɵngcc0.ɵɵelementStart(1, "adf-search-text-input", 1, 2);
    ɵngcc0.ɵɵlistener("searchChange", function SearchControlComponent_div_0_Template_adf_search_text_input_searchChange_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r28); var ctx_r27 = ɵngcc0.ɵɵnextContext(); return ctx_r27.inputChange($event); })("reset", function SearchControlComponent_div_0_Template_adf_search_text_input_reset_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r28); var ctx_r29 = ɵngcc0.ɵɵnextContext(); return ctx_r29.onReset($event); })("selectResult", function SearchControlComponent_div_0_Template_adf_search_text_input_selectResult_1_listener() { ɵngcc0.ɵɵrestoreView(_r28); var ctx_r30 = ɵngcc0.ɵɵnextContext(); return ctx_r30.onSelectFirstResult(); })("submit", function SearchControlComponent_div_0_Template_adf_search_text_input_submit_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r28); var ctx_r31 = ɵngcc0.ɵɵnextContext(); return ctx_r31.submit.emit($event); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(3, "adf-search", 3, 4);
    ɵngcc0.ɵɵtemplate(6, SearchControlComponent_div_0_ng_template_6_Template, 1, 1, "ng-template");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var _r3 = ɵngcc0.ɵɵreference(5);
    var ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("searchTerm", ctx_r0.searchTerm)("expandable", ctx_r0.expandable)("autocomplete", ctx_r0.autocomplete)("liveSearchEnabled", ctx_r0.liveSearchEnabled)("focusListener", ctx_r0.focusSubject.asObservable())("searchAutocomplete", _r3);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("maxResults", ctx_r0.liveSearchMaxResults);
} }
var _c20 = ["panel"];
function SearchComponent_ng_template_2_Template(rf, ctx) { }
var _c21 = function (a0) { return { $implicit: a0 }; };
function SearchTextComponent_button_3_Template(rf, ctx) { if (rf & 1) {
    var _r2 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 2);
    ɵngcc0.ɵɵlistener("click", function SearchTextComponent_button_3_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r2); var ctx_r1 = ɵngcc0.ɵɵnextContext(); return ctx_r1.clear(); });
    ɵngcc0.ɵɵelementStart(1, "mat-icon");
    ɵngcc0.ɵɵtext(2, "close");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} }
function SearchRadioComponent_mat_radio_button_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-radio-button", 3);
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵelementStart(2, "div", 4);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵpipe(5, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var option_r2 = ctx.$implicit;
    ɵngcc0.ɵɵproperty("value", option_r2.value);
    ɵngcc0.ɵɵattribute("data-automation-id", "search-radio-" + ɵngcc0.ɵɵpipeBind1(1, 4, option_r2.name));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵpropertyInterpolate("matTooltip", ɵngcc0.ɵɵpipeBind1(3, 6, option_r2.name));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(5, 8, option_r2.name), " ");
} }
function SearchRadioComponent_div_2_button_1_Template(rf, ctx) { if (rf & 1) {
    var _r6 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 7);
    ɵngcc0.ɵɵlistener("click", function SearchRadioComponent_div_2_button_1_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r6); var ctx_r5 = ɵngcc0.ɵɵnextContext(2); return ctx_r5.options.showLessItems(); });
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵelementStart(2, "mat-icon");
    ɵngcc0.ɵɵtext(3, "keyboard_arrow_up");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(1, 1, "SEARCH.FILTER.ACTIONS.SHOW-LESS"));
} }
function SearchRadioComponent_div_2_button_2_Template(rf, ctx) { if (rf & 1) {
    var _r8 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 7);
    ɵngcc0.ɵɵlistener("click", function SearchRadioComponent_div_2_button_2_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r8); var ctx_r7 = ɵngcc0.ɵɵnextContext(2); return ctx_r7.options.showMoreItems(); });
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵelementStart(2, "mat-icon");
    ɵngcc0.ɵɵtext(3, "keyboard_arrow_down");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(1, 1, "SEARCH.FILTER.ACTIONS.SHOW-MORE"));
} }
function SearchRadioComponent_div_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 5);
    ɵngcc0.ɵɵtemplate(1, SearchRadioComponent_div_2_button_1_Template, 4, 3, "button", 6);
    ɵngcc0.ɵɵtemplate(2, SearchRadioComponent_div_2_button_2_Template, 4, 3, "button", 6);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r1.options.canShowLessItems);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r1.options.canShowMoreItems);
} }
function SearchSliderComponent_div_1_Template(rf, ctx) { if (rf & 1) {
    var _r2 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 2);
    ɵngcc0.ɵɵelementStart(1, "button", 3);
    ɵngcc0.ɵɵlistener("click", function SearchSliderComponent_div_1_Template_button_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r2); var ctx_r1 = ɵngcc0.ɵɵnextContext(); return ctx_r1.clear(); });
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(3, 1, "SEARCH.FILTER.ACTIONS.CLEAR"), " ");
} }
function SearchNumberRangeComponent_mat_error_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-error", 8);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 1, "SEARCH.FILTER.VALIDATION.INVALID-FORMAT"), " ");
} }
function SearchNumberRangeComponent_mat_error_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-error", 9);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 1, "SEARCH.FILTER.VALIDATION.REQUIRED-VALUE"), " ");
} }
function SearchNumberRangeComponent_mat_error_9_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-error", 10);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 1, "SEARCH.FILTER.VALIDATION.INVALID-FORMAT"), " ");
} }
function SearchNumberRangeComponent_mat_error_10_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-error", 11);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 1, "SEARCH.FILTER.VALIDATION.REQUIRED-VALUE"), " ");
} }
function SearchNumberRangeComponent_div_11_Template(rf, ctx) { if (rf & 1) {
    var _r6 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 12);
    ɵngcc0.ɵɵelementStart(1, "button", 13);
    ɵngcc0.ɵɵlistener("click", function SearchNumberRangeComponent_div_11_Template_button_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r6); var ctx_r5 = ɵngcc0.ɵɵnextContext(); return ctx_r5.clear(); });
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(4, "button", 14);
    ɵngcc0.ɵɵtext(5);
    ɵngcc0.ɵɵpipe(6, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r4 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(3, 3, "SEARCH.FILTER.ACTIONS.CLEAR"), " ");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("disabled", !ctx_r4.form.valid);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(6, 5, "SEARCH.FILTER.ACTIONS.APPLY"), " ");
} }
function SearchCheckListComponent_mat_checkbox_1_Template(rf, ctx) { if (rf & 1) {
    var _r6 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "mat-checkbox", 3);
    ɵngcc0.ɵɵlistener("keydown.enter", function SearchCheckListComponent_mat_checkbox_1_Template_mat_checkbox_keydown_enter_0_listener() { var option_r3 = ctx.$implicit; return option_r3.checked = !option_r3.checked; })("change", function SearchCheckListComponent_mat_checkbox_1_Template_mat_checkbox_change_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r6); var option_r3 = ctx.$implicit; var ctx_r5 = ɵngcc0.ɵɵnextContext(); return ctx_r5.changeHandler($event, option_r3); });
    ɵngcc0.ɵɵelementStart(1, "div", 4);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵpipe(4, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var option_r3 = ctx.$implicit;
    ɵngcc0.ɵɵproperty("checked", option_r3.checked);
    ɵngcc0.ɵɵattribute("data-automation-id", "checkbox-" + option_r3.name);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate("matTooltip", ɵngcc0.ɵɵpipeBind1(2, 4, option_r3.name));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(4, 6, option_r3.name), " ");
} }
function SearchCheckListComponent_div_2_Template(rf, ctx) { if (rf & 1) {
    var _r8 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 5);
    ɵngcc0.ɵɵelementStart(1, "button", 6);
    ɵngcc0.ɵɵlistener("click", function SearchCheckListComponent_div_2_Template_button_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r8); var ctx_r7 = ɵngcc0.ɵɵnextContext(); return ctx_r7.clear(); });
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(3, 1, "SEARCH.FILTER.ACTIONS.CLEAR-ALL"), " ");
} }
function SearchCheckListComponent_div_3_button_5_Template(rf, ctx) { if (rf & 1) {
    var _r12 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 7);
    ɵngcc0.ɵɵlistener("click", function SearchCheckListComponent_div_3_button_5_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r12); var ctx_r11 = ɵngcc0.ɵɵnextContext(2); return ctx_r11.options.showLessItems(); });
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵelementStart(2, "mat-icon");
    ɵngcc0.ɵɵtext(3, "keyboard_arrow_up");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(1, 1, "SEARCH.FILTER.ACTIONS.SHOW-LESS"));
} }
function SearchCheckListComponent_div_3_button_6_Template(rf, ctx) { if (rf & 1) {
    var _r14 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 7);
    ɵngcc0.ɵɵlistener("click", function SearchCheckListComponent_div_3_button_6_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r14); var ctx_r13 = ɵngcc0.ɵɵnextContext(2); return ctx_r13.options.showMoreItems(); });
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵelementStart(2, "mat-icon");
    ɵngcc0.ɵɵtext(3, "keyboard_arrow_down");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(1, 1, "SEARCH.FILTER.ACTIONS.SHOW-MORE"));
} }
function SearchCheckListComponent_div_3_Template(rf, ctx) { if (rf & 1) {
    var _r16 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 5);
    ɵngcc0.ɵɵelementStart(1, "button", 7);
    ɵngcc0.ɵɵlistener("click", function SearchCheckListComponent_div_3_Template_button_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r16); var ctx_r15 = ɵngcc0.ɵɵnextContext(); return ctx_r15.clear(); });
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementStart(3, "mat-icon");
    ɵngcc0.ɵɵtext(4, "clear");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(5, SearchCheckListComponent_div_3_button_5_Template, 4, 3, "button", 8);
    ɵngcc0.ɵɵtemplate(6, SearchCheckListComponent_div_3_button_6_Template, 4, 3, "button", 8);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(2, 3, "SEARCH.FILTER.ACTIONS.CLEAR-ALL"));
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r2.options.canShowLessItems);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r2.options.canShowMoreItems);
} }
var _c22 = function (a0) { return { requiredFormat: a0 }; };
function SearchDateRangeComponent_mat_error_7_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-error", 11);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind2(2, 1, ctx_r1.getFromValidationMessage(), ɵngcc0.ɵɵpureFunction1(4, _c22, ctx_r1.datePickerFormat)), " ");
} }
function SearchDateRangeComponent_mat_error_14_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-error", 12);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r3 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind2(2, 1, ctx_r3.getToValidationMessage(), ɵngcc0.ɵɵpureFunction1(4, _c22, ctx_r3.datePickerFormat)), " ");
} }
function SearchDateRangeComponent_div_15_Template(rf, ctx) { if (rf & 1) {
    var _r6 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 13);
    ɵngcc0.ɵɵelementStart(1, "button", 14);
    ɵngcc0.ɵɵlistener("click", function SearchDateRangeComponent_div_15_Template_button_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r6); var ctx_r5 = ɵngcc0.ɵɵnextContext(); return ctx_r5.clear(); });
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(4, "button", 15);
    ɵngcc0.ɵɵtext(5);
    ɵngcc0.ɵɵpipe(6, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r4 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(3, 3, "SEARCH.FILTER.ACTIONS.CLEAR"), " ");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("disabled", !ctx_r4.form.valid);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(6, 5, "SEARCH.FILTER.ACTIONS.APPLY"), " ");
} }
function SearchDatetimeRangeComponent_mat_error_7_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-error", 11);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind2(2, 1, ctx_r1.getFromValidationMessage(), ɵngcc0.ɵɵpureFunction1(4, _c22, ctx_r1.datetimePickerFormat)), " ");
} }
function SearchDatetimeRangeComponent_mat_error_14_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-error", 12);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r3 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind2(2, 1, ctx_r3.getToValidationMessage(), ɵngcc0.ɵɵpureFunction1(4, _c22, ctx_r3.datetimePickerFormat)), " ");
} }
function SearchDatetimeRangeComponent_div_15_Template(rf, ctx) { if (rf & 1) {
    var _r6 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 13);
    ɵngcc0.ɵɵelementStart(1, "button", 14);
    ɵngcc0.ɵɵlistener("click", function SearchDatetimeRangeComponent_div_15_Template_button_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r6); var ctx_r5 = ɵngcc0.ɵɵnextContext(); return ctx_r5.clear(); });
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(4, "button", 15);
    ɵngcc0.ɵɵtext(5);
    ɵngcc0.ɵɵpipe(6, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r4 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(3, 3, "SEARCH.FILTER.ACTIONS.CLEAR"), " ");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("disabled", !ctx_r4.form.valid);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(6, 5, "SEARCH.FILTER.ACTIONS.APPLY"), " ");
} }
var _c23 = ".adf-search-date-range>form{display:inline-flex;flex-direction:column;width:100%}";
var _c24 = ["content"];
function SearchFilterComponent_button_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "button", 4);
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵpropertyInterpolate("matTooltip", ɵngcc0.ɵɵpipeBind1(1, 2, "SEARCH.FILTER.BUTTONS.RESET-ALL.TOOLTIP"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(3, 4, "SEARCH.FILTER.BUTTONS.RESET-ALL.LABEL"), " ");
} }
function SearchFilterComponent_mat_expansion_panel_2_Template(rf, ctx) { if (rf & 1) {
    var _r5 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "mat-expansion-panel", 5);
    ɵngcc0.ɵɵlistener("expandedChange", function SearchFilterComponent_mat_expansion_panel_2_Template_mat_expansion_panel_expandedChange_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r5); var category_r3 = ctx.$implicit; return category_r3.expanded = $event; });
    ɵngcc0.ɵɵelementStart(1, "mat-expansion-panel-header");
    ɵngcc0.ɵɵelementStart(2, "mat-panel-title");
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵpipe(4, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(5, "adf-search-widget-container", 6);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var category_r3 = ctx.$implicit;
    ɵngcc0.ɵɵproperty("expanded", category_r3.expanded);
    ɵngcc0.ɵɵattribute("data-automation-id", "expansion-panel-" + category_r3.name);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(4, 6, category_r3.name), " ");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("id", category_r3.id)("selector", category_r3.component.selector)("settings", category_r3.component.settings);
} }
function SearchFilterComponent_ng_container_3_mat_expansion_panel_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-expansion-panel", 8);
    ɵngcc0.ɵɵelementStart(1, "mat-expansion-panel-header");
    ɵngcc0.ɵɵelementStart(2, "mat-panel-title");
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵpipe(4, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(5, "adf-search-facet-field", 9);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var field_r7 = ctx.$implicit;
    var ctx_r6 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("expanded", ctx_r6.shouldExpand(field_r7));
    ɵngcc0.ɵɵattribute("data-automation-id", "expansion-panel-" + field_r7.label);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(4, 4, field_r7.label));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("field", field_r7);
} }
function SearchFilterComponent_ng_container_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, SearchFilterComponent_ng_container_3_mat_expansion_panel_1_Template, 6, 6, "mat-expansion-panel", 7);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    var ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r2.facetFiltersService.responseFacets);
} }
function SearchChipListComponent_ng_container_1_mat_chip_1_Template(rf, ctx) { if (rf & 1) {
    var _r4 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "mat-chip", 3);
    ɵngcc0.ɵɵlistener("click", function SearchChipListComponent_ng_container_1_mat_chip_1_Template_mat_chip_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r4); var ctx_r3 = ɵngcc0.ɵɵnextContext(2); return ctx_r3.facetFiltersService.resetAllSelectedBuckets(); });
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵpropertyInterpolate("matTooltip", ɵngcc0.ɵɵpipeBind1(1, 2, "SEARCH.FILTER.BUTTONS.CLEAR-ALL.TOOLTIP"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(3, 4, "SEARCH.FILTER.BUTTONS.CLEAR-ALL.LABEL"), " ");
} }
function SearchChipListComponent_ng_container_1_mat_chip_2_Template(rf, ctx) { if (rf & 1) {
    var _r7 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "mat-chip", 4);
    ɵngcc0.ɵɵlistener("removed", function SearchChipListComponent_ng_container_1_mat_chip_2_Template_mat_chip_removed_0_listener() { ɵngcc0.ɵɵrestoreView(_r7); var selection_r5 = ctx.$implicit; var ctx_r6 = ɵngcc0.ɵɵnextContext(2); return ctx_r6.facetFiltersService.unselectFacetBucket(selection_r5.field, selection_r5.bucket); });
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementStart(3, "mat-icon", 5);
    ɵngcc0.ɵɵtext(4, "cancel");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var selection_r5 = ctx.$implicit;
    ɵngcc0.ɵɵproperty("removable", true);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 2, selection_r5.bucket.display || selection_r5.bucket.label), " ");
} }
function SearchChipListComponent_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, SearchChipListComponent_ng_container_1_mat_chip_1_Template, 4, 6, "mat-chip", 1);
    ɵngcc0.ɵɵtemplate(2, SearchChipListComponent_ng_container_1_mat_chip_2_Template, 5, 4, "mat-chip", 2);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    var ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.clearAll && ctx_r0.facetFiltersService.selectedBuckets.length > 1);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r0.facetFiltersService.selectedBuckets);
} }
function SearchPanelComponent_adf_search_filter_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "adf-search-filter", 2);
} if (rf & 2) {
    ɵngcc0.ɵɵproperty("showContextFacets", false);
} }
var _c25 = ["filterContainer"];
var _c26 = function (a0) { return { "adf-icon-active": a0 }; };
function SearchFilterContainerComponent_div_0_Template(rf, ctx) { if (rf & 1) {
    var _r5 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 1);
    ɵngcc0.ɵɵelementStart(1, "button", 2, 3);
    ɵngcc0.ɵɵlistener("click", function SearchFilterContainerComponent_div_0_Template_button_click_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r5); return $event.stopPropagation(); })("menuOpened", function SearchFilterContainerComponent_div_0_Template_button_menuOpened_1_listener() { ɵngcc0.ɵɵrestoreView(_r5); var ctx_r6 = ɵngcc0.ɵɵnextContext(); return ctx_r6.onMenuOpen(); })("keyup.enter", function SearchFilterContainerComponent_div_0_Template_button_keyup_enter_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r5); return $event.stopPropagation(); });
    ɵngcc0.ɵɵelement(3, "adf-icon", 4);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(4, "mat-menu", 5, 6);
    ɵngcc0.ɵɵlistener("closed", function SearchFilterContainerComponent_div_0_Template_mat_menu_closed_4_listener() { ɵngcc0.ɵɵrestoreView(_r5); var ctx_r8 = ɵngcc0.ɵɵnextContext(); return ctx_r8.onClosed(); });
    ɵngcc0.ɵɵelementStart(6, "div", 7, 8);
    ɵngcc0.ɵɵlistener("keydown.tab", function SearchFilterContainerComponent_div_0_Template_div_keydown_tab_6_listener($event) { ɵngcc0.ɵɵrestoreView(_r5); return $event.stopPropagation(); });
    ɵngcc0.ɵɵelementStart(8, "div", 9);
    ɵngcc0.ɵɵlistener("click", function SearchFilterContainerComponent_div_0_Template_div_click_8_listener($event) { ɵngcc0.ɵɵrestoreView(_r5); return $event.stopPropagation(); });
    ɵngcc0.ɵɵelementStart(9, "div", 10);
    ɵngcc0.ɵɵtext(10);
    ɵngcc0.ɵɵpipe(11, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(12, "adf-search-widget-container", 11);
    ɵngcc0.ɵɵlistener("keypress", function SearchFilterContainerComponent_div_0_Template_adf_search_widget_container_keypress_12_listener($event) { ɵngcc0.ɵɵrestoreView(_r5); var _r1 = ɵngcc0.ɵɵreference(2); var ctx_r11 = ɵngcc0.ɵɵnextContext(); return ctx_r11.onKeyPressed($event, _r1); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(13, "mat-dialog-actions", 12);
    ɵngcc0.ɵɵelementStart(14, "button", 13);
    ɵngcc0.ɵɵlistener("click", function SearchFilterContainerComponent_div_0_Template_button_click_14_listener($event) { ɵngcc0.ɵɵrestoreView(_r5); var ctx_r12 = ɵngcc0.ɵɵnextContext(); return ctx_r12.onClearButtonClick($event); });
    ɵngcc0.ɵɵtext(15);
    ɵngcc0.ɵɵpipe(16, "uppercase");
    ɵngcc0.ɵɵpipe(17, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(18, "button", 14);
    ɵngcc0.ɵɵlistener("click", function SearchFilterContainerComponent_div_0_Template_button_click_18_listener() { ɵngcc0.ɵɵrestoreView(_r5); var ctx_r13 = ɵngcc0.ɵɵnextContext(); return ctx_r13.onApply(); });
    ɵngcc0.ɵɵtext(19);
    ɵngcc0.ɵɵpipe(20, "uppercase");
    ɵngcc0.ɵɵpipe(21, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var _r1 = ɵngcc0.ɵɵreference(2);
    var _r2 = ɵngcc0.ɵɵreference(5);
    var ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("matMenuTriggerFor", _r2)("matTooltip", ctx_r0.getTooltipTranslation(ctx_r0.col == null ? null : ctx_r0.col.title));
    ɵngcc0.ɵɵattribute("aria-label", ctx_r0.getTooltipTranslation(ctx_r0.col == null ? null : ctx_r0.col.title));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(22, _c26, ctx_r0.isActive() || _r1.menuOpen))("matBadgeHidden", !ctx_r0.isActive());
    ɵngcc0.ɵɵadvance(7);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(11, 12, ctx_r0.category == null ? null : ctx_r0.category.name));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("id", ctx_r0.category == null ? null : ctx_r0.category.id)("selector", ctx_r0.category == null ? null : ctx_r0.category.component == null ? null : ctx_r0.category.component.selector)("settings", ctx_r0.category == null ? null : ctx_r0.category.component == null ? null : ctx_r0.category.component.settings)("value", ctx_r0.initialValue);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate1("", ɵngcc0.ɵɵpipeBind1(16, 14, ɵngcc0.ɵɵpipeBind1(17, 16, "SEARCH.SEARCH_HEADER.CLEAR")), " ");
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵtextInterpolate1("", ɵngcc0.ɵɵpipeBind1(20, 18, ɵngcc0.ɵɵpipeBind1(21, 20, "SEARCH.SEARCH_HEADER.APPLY")), " ");
} }
function SearchFormComponent_ng_container_0_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "button", 1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementStart(3, "span", 2);
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵpipe(5, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    var forms_r1 = ɵngcc0.ɵɵnextContext().ngIf;
    var ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("title", ɵngcc0.ɵɵpipeBind1(2, 2, ctx_r2.getSelected(forms_r1)));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(5, 4, ctx_r2.getSelected(forms_r1)), " ");
} }
function SearchFormComponent_ng_container_0_ng_container_2_button_11_Template(rf, ctx) { if (rf & 1) {
    var _r10 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 9);
    ɵngcc0.ɵɵlistener("click", function SearchFormComponent_ng_container_0_ng_container_2_button_11_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r10); var form_r8 = ctx.$implicit; var ctx_r9 = ɵngcc0.ɵɵnextContext(3); return ctx_r9.onSelectionChange(form_r8); });
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var form_r8 = ctx.$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 1, form_r8.name), " ");
} }
function SearchFormComponent_ng_container_0_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "button", 3, 4);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementStart(4, "span", 2);
    ɵngcc0.ɵɵtext(5);
    ɵngcc0.ɵɵpipe(6, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(7, "mat-icon", 5);
    ɵngcc0.ɵɵtext(8, "expand_more");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(9, "mat-menu", 6, 7);
    ɵngcc0.ɵɵtemplate(11, SearchFormComponent_ng_container_0_ng_container_2_button_11_Template, 3, 3, "button", 8);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    var _r5 = ɵngcc0.ɵɵreference(2);
    var _r6 = ɵngcc0.ɵɵreference(10);
    var forms_r1 = ɵngcc0.ɵɵnextContext().ngIf;
    var ctx_r3 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("matMenuTriggerFor", _r6)("title", ɵngcc0.ɵɵpipeBind1(3, 7, ctx_r3.getSelected(forms_r1)))("matMenuTriggerRestoreFocus", true);
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(6, 9, ctx_r3.getSelected(forms_r1)), " ");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵclassProp("adf-search-form-icon-selected", _r5.menuOpen);
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵproperty("ngForOf", forms_r1);
} }
function SearchFormComponent_ng_container_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, SearchFormComponent_ng_container_0_ng_container_1_Template, 6, 6, "ng-container", 0);
    ɵngcc0.ɵɵtemplate(2, SearchFormComponent_ng_container_0_ng_container_2_Template, 12, 11, "ng-container", 0);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    var forms_r1 = ctx.ngIf;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", forms_r1.length === 1);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", forms_r1.length > 1);
} }
function SearchFilterChipsComponent_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelement(1, "adf-search-widget-chip", 3);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    var category_r2 = ctx.$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("category", category_r2);
} }
function SearchFilterChipsComponent_ng_container_2_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelement(1, "adf-search-facet-chip", 4);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    var field_r4 = ctx.$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("field", field_r4);
    ɵngcc0.ɵɵattribute("data-automation-id", "search-fact-chip-" + field_r4.field);
} }
function SearchFilterChipsComponent_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, SearchFilterChipsComponent_ng_container_2_ng_container_1_Template, 2, 2, "ng-container", 1);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    var ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r1.facetFiltersService.responseFacets);
} }
var _c27 = [[["filter-title"]], [["filter-content"]], [["filter-actions"]]];
var _c28 = ["filter-title", "filter-content", "filter-actions"];
function SearchFacetFieldComponent_button_9_Template(rf, ctx) { if (rf & 1) {
    var _r5 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 10);
    ɵngcc0.ɵɵlistener("click", function SearchFacetFieldComponent_button_9_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r5); var ctx_r4 = ɵngcc0.ɵɵnextContext(); return ctx_r4.field.buckets.filterText = ""; });
    ɵngcc0.ɵɵelementStart(1, "mat-icon");
    ɵngcc0.ɵɵtext(2, "close");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} }
function SearchFacetFieldComponent_mat_checkbox_11_Template(rf, ctx) { if (rf & 1) {
    var _r8 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "mat-checkbox", 11);
    ɵngcc0.ɵɵlistener("change", function SearchFacetFieldComponent_mat_checkbox_11_Template_mat_checkbox_change_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r8); var bucket_r6 = ctx.$implicit; var ctx_r7 = ɵngcc0.ɵɵnextContext(); return ctx_r7.onToggleBucket($event, ctx_r7.field, bucket_r6); });
    ɵngcc0.ɵɵelementStart(1, "div", 12);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵpipe(4, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var bucket_r6 = ctx.$implicit;
    var ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("checked", bucket_r6.checked);
    ɵngcc0.ɵɵattribute("data-automation-id", "checkbox-" + ctx_r1.field.label + "-" + (bucket_r6.display || bucket_r6.label));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate2("matTooltip", "", ɵngcc0.ɵɵpipeBind1(2, 6, bucket_r6.display || bucket_r6.label), " ", ctx_r1.getBucketCountDisplay(bucket_r6), "");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate2(" ", ɵngcc0.ɵɵpipeBind1(4, 8, bucket_r6.display || bucket_r6.label), " ", ctx_r1.getBucketCountDisplay(bucket_r6), " ");
} }
function SearchFacetFieldComponent_div_12_button_1_Template(rf, ctx) { if (rf & 1) {
    var _r11 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 15);
    ɵngcc0.ɵɵlistener("click", function SearchFacetFieldComponent_div_12_button_1_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r11); var ctx_r10 = ɵngcc0.ɵɵnextContext(2); return ctx_r10.resetSelectedBuckets(ctx_r10.field); });
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 1, "SEARCH.FILTER.ACTIONS.CLEAR-ALL"), " ");
} }
function SearchFacetFieldComponent_div_12_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 13);
    ɵngcc0.ɵɵtemplate(1, SearchFacetFieldComponent_div_12_button_1_Template, 3, 3, "button", 14);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r2.canResetSelectedBuckets(ctx_r2.field));
} }
function SearchFacetFieldComponent_div_13_button_1_Template(rf, ctx) { if (rf & 1) {
    var _r16 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 17);
    ɵngcc0.ɵɵlistener("click", function SearchFacetFieldComponent_div_13_button_1_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r16); var ctx_r15 = ɵngcc0.ɵɵnextContext(2); return ctx_r15.resetSelectedBuckets(ctx_r15.field); });
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵelementStart(2, "mat-icon");
    ɵngcc0.ɵɵtext(3, "clear");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(1, 1, "SEARCH.FILTER.ACTIONS.CLEAR-ALL"));
} }
function SearchFacetFieldComponent_div_13_button_2_Template(rf, ctx) { if (rf & 1) {
    var _r18 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 17);
    ɵngcc0.ɵɵlistener("click", function SearchFacetFieldComponent_div_13_button_2_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r18); var ctx_r17 = ɵngcc0.ɵɵnextContext(2); return ctx_r17.field.buckets.showLessItems(); });
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵelementStart(2, "mat-icon");
    ɵngcc0.ɵɵtext(3, "keyboard_arrow_up");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(1, 1, "SEARCH.FILTER.ACTIONS.SHOW-LESS"));
} }
function SearchFacetFieldComponent_div_13_button_3_Template(rf, ctx) { if (rf & 1) {
    var _r20 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 17);
    ɵngcc0.ɵɵlistener("click", function SearchFacetFieldComponent_div_13_button_3_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r20); var ctx_r19 = ɵngcc0.ɵɵnextContext(2); return ctx_r19.field.buckets.showMoreItems(); });
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵelementStart(2, "mat-icon");
    ɵngcc0.ɵɵtext(3, "keyboard_arrow_down");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(1, 1, "SEARCH.FILTER.ACTIONS.SHOW-MORE"));
} }
function SearchFacetFieldComponent_div_13_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 13);
    ɵngcc0.ɵɵtemplate(1, SearchFacetFieldComponent_div_13_button_1_Template, 4, 3, "button", 16);
    ɵngcc0.ɵɵtemplate(2, SearchFacetFieldComponent_div_13_button_2_Template, 4, 3, "button", 16);
    ɵngcc0.ɵɵtemplate(3, SearchFacetFieldComponent_div_13_button_3_Template, 4, 3, "button", 16);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r3 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r3.canResetSelectedBuckets(ctx_r3.field));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r3.field.buckets.canShowLessItems);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r3.field.buckets.canShowMoreItems);
} }
var _c29 = ["menuContainer"];
var _c30 = ["menuTrigger"];
function SearchWidgetChipComponent_ng_container_8_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtext(1, ":");
    ɵngcc0.ɵɵelementContainerEnd();
} }
function SearchWidgetChipComponent_span_10_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 3);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var displayValue_r7 = ctx.ngIf;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" \u00A0", ɵngcc0.ɵɵpipeBind1(2, 1, displayValue_r7), " ");
} }
function SearchWidgetChipComponent_ng_container_22_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    var ctx_r5 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1("(", ctx_r5.category.component.settings.unit, ")");
} }
function SearchFacetChipComponent_ng_container_8_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtext(1, ":");
    ɵngcc0.ɵɵelementContainerEnd();
} }
function SearchFacetChipComponent_span_10_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 3);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var displayValue_r6 = ctx.ngIf;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" \u00A0 ", ɵngcc0.ɵɵpipeBind1(2, 1, displayValue_r6), " ");
} }
function DropdownSitesComponent_mat_option_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-option", 5);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var site_r3 = ctx.$implicit;
    ɵngcc0.ɵɵproperty("value", site_r3);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 2, site_r3.entry.title), " ");
} }
function DropdownSitesComponent_mat_option_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-option", 6);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 1, "ADF_DROPDOWN.LOADING"), " ");
} }
var _c31 = ["dropdown"];
function BreadcrumbComponent_nav_0_button_2_Template(rf, ctx) { if (rf & 1) {
    var _r6 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 6);
    ɵngcc0.ɵɵlistener("click", function BreadcrumbComponent_nav_0_button_2_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r6); var ctx_r5 = ɵngcc0.ɵɵnextContext(2); return ctx_r5.open(); });
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵelementStart(2, "div", 7);
    ɵngcc0.ɵɵelementStart(3, "mat-icon");
    ɵngcc0.ɵɵtext(4, "folder");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(5, "mat-icon", 8);
    ɵngcc0.ɵɵtext(6, "arrow_drop_down");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r2 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵattribute("aria-label", ɵngcc0.ɵɵpipeBind1(1, 5, "BREADCRUMB.ARIA-LABEL.DROPDOWN"));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵclassProp("adf-isRoot", !ctx_r2.hasPreviousNodes());
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵclassProp("adf-isRoot", !ctx_r2.hasPreviousNodes());
} }
function BreadcrumbComponent_nav_0_mat_select_3_mat_option_2_Template(rf, ctx) { if (rf & 1) {
    var _r11 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "mat-option", 12);
    ɵngcc0.ɵɵlistener("click", function BreadcrumbComponent_nav_0_mat_select_3_mat_option_2_Template_mat_option_click_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r11); var node_r9 = ctx.$implicit; var ctx_r10 = ɵngcc0.ɵɵnextContext(3); return ctx_r10.onRoutePathClick(node_r9, $event); })("onSelectionChange", function BreadcrumbComponent_nav_0_mat_select_3_mat_option_2_Template_mat_option_onSelectionChange_0_listener() { ɵngcc0.ɵɵrestoreView(_r11); var node_r9 = ctx.$implicit; var ctx_r12 = ɵngcc0.ɵɵnextContext(3); return ctx_r12.onRouteClick(node_r9); });
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var node_r9 = ctx.$implicit;
    var ctx_r8 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵproperty("disabled", ctx_r8.readOnly);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 2, node_r9.name), " ");
} }
function BreadcrumbComponent_nav_0_mat_select_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-select", 9, 10);
    ɵngcc0.ɵɵtemplate(2, BreadcrumbComponent_nav_0_mat_select_3_mat_option_2_Template, 3, 4, "mat-option", 11);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r3 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r3.previousNodes);
} }
function BreadcrumbComponent_nav_0_div_4_a_2_Template(rf, ctx) { if (rf & 1) {
    var _r20 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "a", 17);
    ɵngcc0.ɵɵlistener("click", function BreadcrumbComponent_nav_0_div_4_a_2_Template_a_click_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r20); var item_r13 = ɵngcc0.ɵɵnextContext().$implicit; var ctx_r18 = ɵngcc0.ɵɵnextContext(2); return ctx_r18.onRoutePathClick(item_r13, $event); });
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var item_r13 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵattribute("data-automation-id", "breadcrumb_" + item_r13.name);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 2, item_r13.name), " ");
} }
function BreadcrumbComponent_nav_0_div_4_div_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 18);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var item_r13 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 1, item_r13.name), " ");
} }
function BreadcrumbComponent_nav_0_div_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-icon", 19);
    ɵngcc0.ɵɵtext(1, " chevron_right ");
    ɵngcc0.ɵɵelementEnd();
} }
function BreadcrumbComponent_nav_0_div_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 13);
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵtemplate(2, BreadcrumbComponent_nav_0_div_4_a_2_Template, 3, 4, "a", 14);
    ɵngcc0.ɵɵtemplate(3, BreadcrumbComponent_nav_0_div_4_div_3_Template, 3, 3, "div", 15);
    ɵngcc0.ɵɵtemplate(4, BreadcrumbComponent_nav_0_div_4_mat_icon_4_Template, 2, 0, "mat-icon", 16);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var item_r13 = ctx.$implicit;
    var last_r14 = ctx.last;
    var ctx_r4 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵclassProp("adf-active", last_r14);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(1, 6, item_r13.name));
    ɵngcc0.ɵɵproperty("ngSwitch", ctx_r4.breadcrumbItemIsAnchor(last_r14));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngSwitchCase", true);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", !last_r14);
} }
function BreadcrumbComponent_nav_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "nav", 2);
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵtemplate(2, BreadcrumbComponent_nav_0_button_2_Template, 7, 7, "button", 3);
    ɵngcc0.ɵɵtemplate(3, BreadcrumbComponent_nav_0_mat_select_3_Template, 3, 1, "mat-select", 4);
    ɵngcc0.ɵɵtemplate(4, BreadcrumbComponent_nav_0_div_4_Template, 5, 8, "div", 5);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵattribute("aria-label", ɵngcc0.ɵɵpipeBind1(1, 4, "BREADCRUMB.ARIA-LABEL.BREADCRUMB"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.hasPreviousNodes());
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.hasPreviousNodes());
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r0.lastNodes);
} }
function BreadcrumbComponent_nav_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "nav", 20);
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵelementStart(2, "div", 21);
    ɵngcc0.ɵɵelementStart(3, "div", 22);
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵpipe(5, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵattribute("aria-label", ɵngcc0.ɵɵpipeBind1(1, 2, "BREADCRUMB.ARIA-LABEL.BREADCRUMB"));
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(5, 4, ctx_r1.root), " ");
} }
function DropdownBreadcrumbComponent_nav_0_mat_select_9_mat_option_2_Template(rf, ctx) { if (rf & 1) {
    var _r6 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "mat-option", 10);
    ɵngcc0.ɵɵlistener("click", function DropdownBreadcrumbComponent_nav_0_mat_select_9_mat_option_2_Template_mat_option_click_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r6); var node_r4 = ctx.$implicit; var ctx_r5 = ɵngcc0.ɵɵnextContext(3); return ctx_r5.onRoutePathClick(node_r4, $event); })("onSelectionChange", function DropdownBreadcrumbComponent_nav_0_mat_select_9_mat_option_2_Template_mat_option_onSelectionChange_0_listener() { ɵngcc0.ɵɵrestoreView(_r6); var node_r4 = ctx.$implicit; var ctx_r7 = ɵngcc0.ɵɵnextContext(3); return ctx_r7.onRouteClick(node_r4); });
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var node_r4 = ctx.$implicit;
    var ctx_r3 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵproperty("disabled", ctx_r3.readOnly);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 2, node_r4.name), " ");
} }
function DropdownBreadcrumbComponent_nav_0_mat_select_9_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-select", 7, 8);
    ɵngcc0.ɵɵtemplate(2, DropdownBreadcrumbComponent_nav_0_mat_select_9_mat_option_2_Template, 3, 4, "mat-option", 9);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r1 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r1.previousNodes);
} }
function DropdownBreadcrumbComponent_nav_0_Template(rf, ctx) { if (rf & 1) {
    var _r9 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "nav", 1);
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵelementStart(2, "button", 2);
    ɵngcc0.ɵɵlistener("click", function DropdownBreadcrumbComponent_nav_0_Template_button_click_2_listener() { ɵngcc0.ɵɵrestoreView(_r9); var ctx_r8 = ɵngcc0.ɵɵnextContext(); return ctx_r8.open(); });
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementStart(4, "mat-icon");
    ɵngcc0.ɵɵtext(5, "folder");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(6, "mat-icon", 3);
    ɵngcc0.ɵɵtext(7, "chevron_right");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(8, "div", 4);
    ɵngcc0.ɵɵtemplate(9, DropdownBreadcrumbComponent_nav_0_mat_select_9_Template, 3, 1, "mat-select", 5);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(10, "span", 6);
    ɵngcc0.ɵɵtext(11);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵattribute("aria-label", ɵngcc0.ɵɵpipeBind1(1, 9, "BREADCRUMB.ARIA-LABEL.BREADCRUMB"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("tabindex", ctx_r0.hasPreviousNodes() ? 0 : -1);
    ɵngcc0.ɵɵattribute("aria-label", ɵngcc0.ɵɵpipeBind1(3, 11, "BREADCRUMB.ARIA-LABEL.DROPDOWN"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵclassProp("adf-isRoot", !ctx_r0.hasPreviousNodes());
    ɵngcc0.ɵɵadvance(5);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.hasPreviousNodes());
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵclassProp("adf-isRoot", !ctx_r0.hasPreviousNodes());
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1("", ctx_r0.currentNode.name, " ");
} }
function ConfirmDialogComponent_p_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "p", 7);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 1, ctx_r0.message), " ");
} }
function ConfirmDialogComponent_ng_template_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "span", 8);
} if (rf & 2) {
    var ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("innerHTML", ctx_r2.sanitizedHtmlContent(), ɵngcc0.ɵɵsanitizeHtml);
} }
function ConfirmDialogComponent_button_12_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "button", 9);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r3 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("mat-dialog-close", ctx_r3.thirdOptionLabel);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(2, 2, ctx_r3.thirdOptionLabel));
} }
function VersionListComponent_mat_list_0_mat_list_item_1_p_12_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "p", 11);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var version_r4 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵproperty("id", "adf-version-list-item-comment-" + version_r4.entry.id);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(version_r4.entry.versionComment);
} }
function VersionListComponent_mat_list_0_mat_list_item_1_div_13_ng_container_3_button_1_Template(rf, ctx) { if (rf & 1) {
    var _r15 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 19);
    ɵngcc0.ɵɵlistener("click", function VersionListComponent_mat_list_0_mat_list_item_1_div_13_ng_container_3_button_1_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r15); var version_r4 = ɵngcc0.ɵɵnextContext(3).$implicit; var ctx_r13 = ɵngcc0.ɵɵnextContext(2); return ctx_r13.onViewVersion(version_r4.entry.id); });
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var version_r4 = ɵngcc0.ɵɵnextContext(3).$implicit;
    ɵngcc0.ɵɵproperty("id", "adf-version-list-action-view-" + version_r4.entry.id);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 2, "ADF_VERSION_LIST.ACTIONS.VIEW"), " ");
} }
function VersionListComponent_mat_list_0_mat_list_item_1_div_13_ng_container_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, VersionListComponent_mat_list_0_mat_list_item_1_div_13_ng_container_3_button_1_Template, 3, 4, "button", 16);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    var ctx_r10 = ɵngcc0.ɵɵnextContext(4);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r10.allowViewVersions);
} }
function VersionListComponent_mat_list_0_mat_list_item_1_div_13_button_7_Template(rf, ctx) { if (rf & 1) {
    var _r19 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 19);
    ɵngcc0.ɵɵlistener("click", function VersionListComponent_mat_list_0_mat_list_item_1_div_13_button_7_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r19); var version_r4 = ɵngcc0.ɵɵnextContext(2).$implicit; var ctx_r17 = ɵngcc0.ɵɵnextContext(2); return ctx_r17.downloadVersion(version_r4.entry.id); });
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var version_r4 = ɵngcc0.ɵɵnextContext(2).$implicit;
    ɵngcc0.ɵɵproperty("id", "adf-version-list-action-download-" + version_r4.entry.id);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 2, "ADF_VERSION_LIST.ACTIONS.DOWNLOAD"), " ");
} }
function VersionListComponent_mat_list_0_mat_list_item_1_div_13_Template(rf, ctx) { if (rf & 1) {
    var _r23 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div");
    ɵngcc0.ɵɵelementStart(1, "mat-menu", 12, 13);
    ɵngcc0.ɵɵtemplate(3, VersionListComponent_mat_list_0_mat_list_item_1_div_13_ng_container_3_Template, 2, 1, "ng-container", 14);
    ɵngcc0.ɵɵelementStart(4, "button", 15);
    ɵngcc0.ɵɵlistener("click", function VersionListComponent_mat_list_0_mat_list_item_1_div_13_Template_button_click_4_listener() { ɵngcc0.ɵɵrestoreView(_r23); var version_r4 = ɵngcc0.ɵɵnextContext().$implicit; var ctx_r21 = ɵngcc0.ɵɵnextContext(2); return ctx_r21.restore(version_r4.entry.id); });
    ɵngcc0.ɵɵtext(5);
    ɵngcc0.ɵɵpipe(6, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(7, VersionListComponent_mat_list_0_mat_list_item_1_div_13_button_7_Template, 3, 4, "button", 16);
    ɵngcc0.ɵɵelementStart(8, "button", 17);
    ɵngcc0.ɵɵlistener("click", function VersionListComponent_mat_list_0_mat_list_item_1_div_13_Template_button_click_8_listener() { ɵngcc0.ɵɵrestoreView(_r23); var version_r4 = ɵngcc0.ɵɵnextContext().$implicit; var ctx_r24 = ɵngcc0.ɵɵnextContext(2); return ctx_r24.deleteVersion(version_r4.entry.id); });
    ɵngcc0.ɵɵtext(9);
    ɵngcc0.ɵɵpipe(10, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(11, "button", 18);
    ɵngcc0.ɵɵelementStart(12, "mat-icon");
    ɵngcc0.ɵɵtext(13, "more_vert");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var _r9 = ɵngcc0.ɵɵreference(2);
    var version_r4 = ɵngcc0.ɵɵnextContext().$implicit;
    var ctx_r7 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("id", "adf-version-list-action-menu-" + version_r4.entry.id);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("adf-acs-version", "7");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("id", "adf-version-list-action-restore-" + version_r4.entry.id)("disabled", !ctx_r7.canUpdate());
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(6, 11, "ADF_VERSION_LIST.ACTIONS.RESTORE"), " ");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r7.allowDownload);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("disabled", !ctx_r7.canDelete())("id", "adf-version-list-action-delete-" + version_r4.entry.id);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(10, 13, "ADF_VERSION_LIST.ACTIONS.DELETE"), " ");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("matMenuTriggerFor", _r9)("id", "adf-version-list-action-menu-button-" + version_r4.entry.id);
} }
function VersionListComponent_mat_list_0_mat_list_item_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-list-item");
    ɵngcc0.ɵɵelementStart(1, "mat-icon", 4);
    ɵngcc0.ɵɵtext(2, "insert_drive_file");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(3, "h4", 5);
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(5, "p", 6);
    ɵngcc0.ɵɵelementStart(6, "span", 7);
    ɵngcc0.ɵɵtext(7);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtext(8, " - ");
    ɵngcc0.ɵɵelementStart(9, "span", 8);
    ɵngcc0.ɵɵtext(10);
    ɵngcc0.ɵɵpipe(11, "date");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(12, VersionListComponent_mat_list_0_mat_list_item_1_p_12_Template, 2, 2, "p", 9);
    ɵngcc0.ɵɵtemplate(13, VersionListComponent_mat_list_0_mat_list_item_1_div_13_Template, 14, 15, "div", 10);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var version_r4 = ctx.$implicit;
    var ctx_r3 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("id", "adf-version-list-item-name-" + version_r4.entry.id);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(version_r4.entry.name);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("id", "adf-version-list-item-version-" + version_r4.entry.id);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(version_r4.entry.id);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("id", "adf-version-list-item-date-" + version_r4.entry.id);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(11, 8, version_r4.entry.modifiedAt));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r3.showComments);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r3.showActions);
} }
function VersionListComponent_mat_list_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-list", 2);
    ɵngcc0.ɵɵtemplate(1, VersionListComponent_mat_list_0_mat_list_item_1_Template, 14, 10, "mat-list-item", 3);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r0.versions);
} }
function VersionListComponent_ng_template_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "mat-progress-bar", 20);
} }
var _c32 = ["versionList"];
function VersionManagerComponent_adf_version_comparison_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "adf-version-comparison", 9);
} if (rf & 2) {
    var ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("node", ctx_r0.node)("newFileVersion", ctx_r0.newFileVersion);
} }
function VersionManagerComponent_table_3_Template(rf, ctx) { if (rf & 1) {
    var _r5 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "table", 10);
    ɵngcc0.ɵɵelementStart(1, "tr");
    ɵngcc0.ɵɵelementStart(2, "td");
    ɵngcc0.ɵɵelementStart(3, "adf-version-upload", 11);
    ɵngcc0.ɵɵlistener("success", function VersionManagerComponent_table_3_Template_adf_version_upload_success_3_listener($event) { ɵngcc0.ɵɵrestoreView(_r5); var ctx_r4 = ɵngcc0.ɵɵnextContext(); return ctx_r4.onUploadSuccess($event); })("cancel", function VersionManagerComponent_table_3_Template_adf_version_upload_cancel_3_listener() { ɵngcc0.ɵɵrestoreView(_r5); var ctx_r6 = ɵngcc0.ɵɵnextContext(); return ctx_r6.onUploadCancel(); })("error", function VersionManagerComponent_table_3_Template_adf_version_upload_error_3_listener($event) { ɵngcc0.ɵɵrestoreView(_r5); var ctx_r7 = ɵngcc0.ɵɵnextContext(); return ctx_r7.onUploadError($event); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r1 = ɵngcc0.ɵɵnextContext();
    var _r3 = ɵngcc0.ɵɵreference(10);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("node", ctx_r1.node)("newFileVersion", ctx_r1.newFileVersion)("currentVersion", _r3 == null ? null : _r3.versions[0] == null ? null : _r3.versions[0].entry);
} }
function VersionManagerComponent_button_7_Template(rf, ctx) { if (rf & 1) {
    var _r9 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 12);
    ɵngcc0.ɵɵlistener("click", function VersionManagerComponent_button_7_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r9); var ctx_r8 = ɵngcc0.ɵɵnextContext(); return ctx_r8.toggleNewVersion(); });
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1("", ɵngcc0.ɵɵpipeBind1(2, 1, "ADF_VERSION_LIST.ACTIONS.UPLOAD.ADD"), " ");
} }
function VersionUploadComponent_adf_upload_version_button_12_Template(rf, ctx) { if (rf & 1) {
    var _r3 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "adf-upload-version-button", 8);
    ɵngcc0.ɵɵlistener("success", function VersionUploadComponent_adf_upload_version_button_12_Template_adf_upload_version_button_success_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r3); var ctx_r2 = ɵngcc0.ɵɵnextContext(); return ctx_r2.onSuccess($event); })("error", function VersionUploadComponent_adf_upload_version_button_12_Template_adf_upload_version_button_error_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r3); var ctx_r4 = ɵngcc0.ɵɵnextContext(); return ctx_r4.onError($event); });
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵpropertyInterpolate("staticTitle", ɵngcc0.ɵɵpipeBind1(1, 9, "ADF_VERSION_LIST.ACTIONS.UPLOAD.TITLE"));
    ɵngcc0.ɵɵpropertyInterpolate("tooltip", ɵngcc0.ɵɵpipeBind1(2, 11, "ADF_VERSION_LIST.ACTIONS.UPLOAD.TOOLTIP"));
    ɵngcc0.ɵɵproperty("node", ctx_r0.node)("disabled", !ctx_r0.canUpload())("rootFolderId", ctx_r0.node.parentId)("comment", ctx_r0.comment)("versioning", true)("file", ctx_r0.newFileVersion)("majorVersion", ctx_r0.isMajorVersion());
} }
function VersionUploadComponent_button_13_Template(rf, ctx) { if (rf & 1) {
    var _r6 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 9);
    ɵngcc0.ɵɵlistener("click", function VersionUploadComponent_button_13_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r6); var ctx_r5 = ɵngcc0.ɵɵnextContext(); return ctx_r5.cancelUpload(); });
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1("", ɵngcc0.ɵɵpipeBind1(2, 1, "ADF_VERSION_LIST.ACTIONS.UPLOAD.CANCEL"), " ");
} }
var _c33 = function (a0) { return { type: a0 }; };
var _c34 = ["documentList"];
function ContentNodeSelectorPanelComponent_mat_form_field_1_mat_icon_3_Template(rf, ctx) { if (rf & 1) {
    var _r12 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "mat-icon", 22);
    ɵngcc0.ɵɵlistener("click", function ContentNodeSelectorPanelComponent_mat_form_field_1_mat_icon_3_Template_mat_icon_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r12); var ctx_r11 = ɵngcc0.ɵɵnextContext(2); return ctx_r11.clear(); });
    ɵngcc0.ɵɵtext(1, "clear ");
    ɵngcc0.ɵɵelementEnd();
} }
function ContentNodeSelectorPanelComponent_mat_form_field_1_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-icon", 23);
    ɵngcc0.ɵɵtext(1, "search ");
    ɵngcc0.ɵɵelementEnd();
} }
function ContentNodeSelectorPanelComponent_mat_form_field_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-form-field", 18);
    ɵngcc0.ɵɵelement(1, "input", 19);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵtemplate(3, ContentNodeSelectorPanelComponent_mat_form_field_1_mat_icon_3_Template, 2, 0, "mat-icon", 20);
    ɵngcc0.ɵɵtemplate(4, ContentNodeSelectorPanelComponent_mat_form_field_1_mat_icon_4_Template, 2, 0, "mat-icon", 21);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate("placeholder", ɵngcc0.ɵɵpipeBind1(2, 5, "NODE_SELECTOR.SEARCH"));
    ɵngcc0.ɵɵproperty("formControl", ctx_r0.searchInput)("value", ctx_r0.searchTerm);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.searchTerm.length > 0);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.searchTerm.length === 0);
} }
function ContentNodeSelectorPanelComponent_adf_sites_dropdown_2_Template(rf, ctx) { if (rf & 1) {
    var _r14 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "adf-sites-dropdown", 24);
    ɵngcc0.ɵɵlistener("change", function ContentNodeSelectorPanelComponent_adf_sites_dropdown_2_Template_adf_sites_dropdown_change_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r14); var ctx_r13 = ɵngcc0.ɵɵnextContext(); return ctx_r13.siteChanged($event); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("placeholder", "NODE_SELECTOR.SELECT_LOCATION")("hideMyFiles", ctx_r1.dropdownHideMyFiles)("siteList", ctx_r1.dropdownSiteList)("value", ctx_r1.startSiteGuid);
} }
function ContentNodeSelectorPanelComponent_button_3_Template(rf, ctx) { if (rf & 1) {
    var _r16 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 25);
    ɵngcc0.ɵɵlistener("click", function ContentNodeSelectorPanelComponent_button_3_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r16); var ctx_r15 = ɵngcc0.ɵɵnextContext(); return ctx_r15.toggleSearchPanel(); });
    ɵngcc0.ɵɵelementStart(1, "mat-icon");
    ɵngcc0.ɵɵtext(2, "filter_list");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵpipe(4, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(4, 1, "SEARCH.SEARCH_HEADER.TITLE"), " ");
} }
function ContentNodeSelectorPanelComponent_adf_search_panel_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "adf-search-panel");
} }
function ContentNodeSelectorPanelComponent_ng_container_9_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "span", 26);
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(3, 1, "NODE_SELECTOR.SEARCH_RESULTS"));
} }
function ContentNodeSelectorPanelComponent_adf_dropdown_breadcrumb_10_Template(rf, ctx) { if (rf & 1) {
    var _r18 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "adf-dropdown-breadcrumb", 27);
    ɵngcc0.ɵɵlistener("navigate", function ContentNodeSelectorPanelComponent_adf_dropdown_breadcrumb_10_Template_adf_dropdown_breadcrumb_navigate_0_listener() { ɵngcc0.ɵɵrestoreView(_r18); var ctx_r17 = ɵngcc0.ɵɵnextContext(); return ctx_r17.clearSearch(); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r5 = ɵngcc0.ɵɵnextContext();
    var _r7 = ɵngcc0.ɵɵreference(14);
    ɵngcc0.ɵɵproperty("target", _r7)("rootId", ctx_r5.breadcrumbRootId)("transform", ctx_r5.breadcrumbTransform)("folderNode", ctx_r5.breadcrumbFolderNode)("root", ctx_r5.breadcrumbFolderTitle);
} }
function ContentNodeSelectorPanelComponent_ng_container_11_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0, 28);
} if (rf & 2) {
    var ctx_r6 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("adf-node-counter", ctx_r6.getSelectedCount());
} }
function ContentNodeSelectorPanelComponent_ng_template_22_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "adf-name-location-cell", 29);
} if (rf & 2) {
    var context_r19 = ctx.$implicit;
    ɵngcc0.ɵɵproperty("row", context_r19.row);
} }
function FolderDialogComponent_mat_hint_8_span_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 1, "CORE.FOLDER_DIALOG.FOLDER_NAME.ERRORS.REQUIRED"), " ");
} }
function FolderDialogComponent_mat_hint_8_span_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r2 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 1, ctx_r2.form.controls["name"].errors == null ? null : ctx_r2.form.controls["name"].errors.message), " ");
} }
function FolderDialogComponent_mat_hint_8_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-hint");
    ɵngcc0.ɵɵtemplate(1, FolderDialogComponent_mat_hint_8_span_1_Template, 3, 3, "span", 4);
    ɵngcc0.ɵɵtemplate(2, FolderDialogComponent_mat_hint_8_span_2_Template, 3, 3, "span", 4);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.form.controls["name"].errors == null ? null : ctx_r0.form.controls["name"].errors.required);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !(ctx_r0.form.controls["name"].errors == null ? null : ctx_r0.form.controls["name"].errors.required) && (ctx_r0.form.controls["name"].errors == null ? null : ctx_r0.form.controls["name"].errors.message));
} }
function LibraryDialogComponent_mat_hint_8_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-hint");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(2, 1, "LIBRARY.HINTS.SITE_TITLE_EXISTS"));
} }
function LibraryDialogComponent_mat_error_9_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-error");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 1, "LIBRARY.ERRORS.TITLE_TOO_LONG"), " ");
} }
function LibraryDialogComponent_mat_error_10_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-error");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 1, "LIBRARY.ERRORS.TITLE_TOO_SHORT"), " ");
} }
function LibraryDialogComponent_mat_error_11_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-error");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r3 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 1, ctx_r3.form.controls["title"].errors == null ? null : ctx_r3.form.controls["title"].errors.message), " ");
} }
function LibraryDialogComponent_mat_error_15_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-error");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r4 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 1, ctx_r4.form.controls["id"].errors == null ? null : ctx_r4.form.controls["id"].errors.message), " ");
} }
function LibraryDialogComponent_mat_error_16_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-error");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 1, "LIBRARY.ERRORS.ID_TOO_LONG"), " ");
} }
function LibraryDialogComponent_mat_error_20_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-error");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 1, "LIBRARY.ERRORS.DESCRIPTION_TOO_LONG"), " ");
} }
function LibraryDialogComponent_mat_radio_button_22_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-radio-button", 11);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var option_r8 = ctx.$implicit;
    var ctx_r7 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("disabled", option_r8.disabled)("value", option_r8.value)("checked", ctx_r7.visibilityOption.value === option_r8.value);
    ɵngcc0.ɵɵattribute("data-automation-id", option_r8.value);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 5, option_r8.label), " ");
} }
var _c35 = function () { return { standalone: true }; };
function ContentTypeDialogComponent_table_17_th_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "th", 18);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 1, "CORE.METADATA.CONTENT_TYPE.DIALOG.PROPERTY.NAME"), " ");
} }
function ContentTypeDialogComponent_table_17_td_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "td", 19);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var property_r9 = ctx.$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", property_r9.id, " ");
} }
function ContentTypeDialogComponent_table_17_th_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "th", 18);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 1, "CORE.METADATA.CONTENT_TYPE.DIALOG.PROPERTY.DESCRIPTION"), " ");
} }
function ContentTypeDialogComponent_table_17_td_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "td", 19);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var property_r10 = ctx.$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", property_r10.title, " ");
} }
function ContentTypeDialogComponent_table_17_th_8_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "th", 18);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 1, "CORE.METADATA.CONTENT_TYPE.DIALOG.PROPERTY.DATA_TYPE"), " ");
} }
function ContentTypeDialogComponent_table_17_td_9_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "td", 19);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var property_r11 = ctx.$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", property_r11.dataType, " ");
} }
function ContentTypeDialogComponent_table_17_tr_10_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "tr", 20);
} }
function ContentTypeDialogComponent_table_17_tr_11_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "tr", 21);
} }
function ContentTypeDialogComponent_table_17_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "table", 10);
    ɵngcc0.ɵɵelementContainerStart(1, 11);
    ɵngcc0.ɵɵtemplate(2, ContentTypeDialogComponent_table_17_th_2_Template, 3, 3, "th", 12);
    ɵngcc0.ɵɵtemplate(3, ContentTypeDialogComponent_table_17_td_3_Template, 2, 1, "td", 13);
    ɵngcc0.ɵɵelementContainerEnd();
    ɵngcc0.ɵɵelementContainerStart(4, 14);
    ɵngcc0.ɵɵtemplate(5, ContentTypeDialogComponent_table_17_th_5_Template, 3, 3, "th", 12);
    ɵngcc0.ɵɵtemplate(6, ContentTypeDialogComponent_table_17_td_6_Template, 2, 1, "td", 13);
    ɵngcc0.ɵɵelementContainerEnd();
    ɵngcc0.ɵɵelementContainerStart(7, 15);
    ɵngcc0.ɵɵtemplate(8, ContentTypeDialogComponent_table_17_th_8_Template, 3, 3, "th", 12);
    ɵngcc0.ɵɵtemplate(9, ContentTypeDialogComponent_table_17_td_9_Template, 2, 1, "td", 13);
    ɵngcc0.ɵɵelementContainerEnd();
    ɵngcc0.ɵɵtemplate(10, ContentTypeDialogComponent_table_17_tr_10_Template, 1, 0, "tr", 16);
    ɵngcc0.ɵɵtemplate(11, ContentTypeDialogComponent_table_17_tr_11_Template, 1, 0, "tr", 17);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("dataSource", ctx_r0.typeProperties);
    ɵngcc0.ɵɵadvance(10);
    ɵngcc0.ɵɵproperty("matHeaderRowDef", ctx_r0.propertyColumns);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("matRowDefColumns", ctx_r0.propertyColumns);
} }
function ContentMetadataComponent_mat_expansion_panel_2_Template(rf, ctx) { if (rf & 1) {
    var _r4 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "mat-expansion-panel", 5);
    ɵngcc0.ɵɵelementStart(1, "mat-expansion-panel-header");
    ɵngcc0.ɵɵelementStart(2, "mat-panel-title", 6);
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵpipe(4, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(5, "adf-card-view", 7);
    ɵngcc0.ɵɵlistener("keydown", function ContentMetadataComponent_mat_expansion_panel_2_Template_adf_card_view_keydown_5_listener($event) { ɵngcc0.ɵɵrestoreView(_r4); var ctx_r3 = ɵngcc0.ɵɵnextContext(); return ctx_r3.keyDown($event); });
    ɵngcc0.ɵɵpipe(6, "async");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("expanded", ctx_r0.canExpandProperties());
    ɵngcc0.ɵɵattribute("data-automation-id", "adf-metadata-group-properties");
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(4, 9, "CORE.METADATA.BASIC.HEADER"), " ");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("properties", ɵngcc0.ɵɵpipeBind1(6, 11, ctx_r0.basicProperties$))("editable", ctx_r0.editable)("displayEmpty", ctx_r0.displayEmpty)("copyToClipboardAction", ctx_r0.copyToClipboardAction)("useChipsForMultiValueProperty", ctx_r0.useChipsForMultiValueProperty)("multiValueSeparator", ctx_r0.multiValueSeparator);
} }
function ContentMetadataComponent_ng_container_3_ng_container_1_div_1_mat_expansion_panel_1_Template(rf, ctx) { if (rf & 1) {
    var _r14 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "mat-expansion-panel", 5);
    ɵngcc0.ɵɵelementStart(1, "mat-expansion-panel-header");
    ɵngcc0.ɵɵelementStart(2, "mat-panel-title");
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵpipe(4, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(5, "adf-card-view", 7);
    ɵngcc0.ɵɵlistener("keydown", function ContentMetadataComponent_ng_container_3_ng_container_1_div_1_mat_expansion_panel_1_Template_adf_card_view_keydown_5_listener($event) { ɵngcc0.ɵɵrestoreView(_r14); var ctx_r13 = ɵngcc0.ɵɵnextContext(4); return ctx_r13.keyDown($event); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r15 = ɵngcc0.ɵɵnextContext();
    var group_r10 = ctx_r15.$implicit;
    var first_r11 = ctx_r15.first;
    var ctx_r12 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵproperty("expanded", ctx_r12.canExpandTheCard(group_r10) || !ctx_r12.displayDefaultProperties && first_r11);
    ɵngcc0.ɵɵattribute("data-automation-id", "adf-metadata-group-" + group_r10.title);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(4, 9, group_r10.title), " ");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("properties", group_r10.properties)("editable", ctx_r12.editable)("displayEmpty", ctx_r12.displayEmpty)("copyToClipboardAction", ctx_r12.copyToClipboardAction)("useChipsForMultiValueProperty", ctx_r12.useChipsForMultiValueProperty)("multiValueSeparator", ctx_r12.multiValueSeparator);
} }
function ContentMetadataComponent_ng_container_3_ng_container_1_div_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 11);
    ɵngcc0.ɵɵtemplate(1, ContentMetadataComponent_ng_container_3_ng_container_1_div_1_mat_expansion_panel_1_Template, 6, 11, "mat-expansion-panel", 2);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var group_r10 = ctx.$implicit;
    var ctx_r9 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r9.showGroup(group_r10) || ctx_r9.editable);
} }
function ContentMetadataComponent_ng_container_3_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, ContentMetadataComponent_ng_container_3_ng_container_1_div_1_Template, 2, 1, "div", 10);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    var groupedProperties_r8 = ctx.$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", groupedProperties_r8);
} }
function ContentMetadataComponent_ng_container_3_ng_template_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "mat-progress-bar", 12);
} }
function ContentMetadataComponent_ng_container_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, ContentMetadataComponent_ng_container_3_ng_container_1_Template, 2, 1, "ng-container", 8);
    ɵngcc0.ɵɵpipe(2, "async");
    ɵngcc0.ɵɵtemplate(3, ContentMetadataComponent_ng_container_3_ng_template_3_Template, 1, 0, "ng-template", null, 9, ɵngcc0.ɵɵtemplateRefExtractor);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    var _r6 = ɵngcc0.ɵɵreference(4);
    var ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ɵngcc0.ɵɵpipeBind1(2, 2, ctx_r1.groupedProperties$))("ngIfElse", _r6);
} }
function ContentMetadataComponent_div_4_Template(rf, ctx) { if (rf & 1) {
    var _r17 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 13);
    ɵngcc0.ɵɵelementStart(1, "button", 14);
    ɵngcc0.ɵɵlistener("click", function ContentMetadataComponent_div_4_Template_button_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r17); var ctx_r16 = ɵngcc0.ɵɵnextContext(); return ctx_r16.cancelChanges(); });
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(4, "button", 15);
    ɵngcc0.ɵɵlistener("click", function ContentMetadataComponent_div_4_Template_button_click_4_listener() { ɵngcc0.ɵɵrestoreView(_r17); var ctx_r18 = ɵngcc0.ɵɵnextContext(); return ctx_r18.saveChanges(); });
    ɵngcc0.ɵɵtext(5);
    ɵngcc0.ɵɵpipe(6, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("disabled", !ctx_r2.hasMetadataChanged);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(3, 4, "CORE.METADATA.ACTIONS.CANCEL"), " ");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("disabled", !ctx_r2.hasMetadataChanged);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(6, 6, "CORE.METADATA.ACTIONS.SAVE"), " ");
} }
function ContentMetadataCardComponent_mat_card_0_button_5_Template(rf, ctx) { if (rf & 1) {
    var _r5 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 6);
    ɵngcc0.ɵɵlistener("click", function ContentMetadataCardComponent_mat_card_0_button_5_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r5); var ctx_r4 = ɵngcc0.ɵɵnextContext(2); return ctx_r4.openAspectDialog(); });
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementStart(3, "mat-icon");
    ɵngcc0.ɵɵtext(4, "menu");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵattribute("title", ɵngcc0.ɵɵpipeBind1(1, 2, "CORE.METADATA.ACTIONS.EDIT_ASPECTS"))("aria-label", ɵngcc0.ɵɵpipeBind1(2, 4, "CORE.METADATA.ACCESSIBILITY.EDIT_ASPECTS"));
} }
function ContentMetadataCardComponent_mat_card_0_button_6_Template(rf, ctx) { if (rf & 1) {
    var _r7 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 7);
    ɵngcc0.ɵɵlistener("click", function ContentMetadataCardComponent_mat_card_0_button_6_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r7); var ctx_r6 = ɵngcc0.ɵɵnextContext(2); return ctx_r6.toggleEdit(); });
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementStart(3, "mat-icon");
    ɵngcc0.ɵɵtext(4, "mode_edit");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵattribute("title", ɵngcc0.ɵɵpipeBind1(1, 2, "CORE.METADATA.ACTIONS.EDIT"))("aria-label", ɵngcc0.ɵɵpipeBind1(2, 4, "CORE.METADATA.ACCESSIBILITY.EDIT"));
} }
function ContentMetadataCardComponent_mat_card_0_button_7_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "span", 9);
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(4, "mat-icon");
    ɵngcc0.ɵɵtext(5, "keyboard_arrow_down");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(3, 1, "ADF_VIEWER.SIDEBAR.METADATA.MORE_INFORMATION"));
} }
function ContentMetadataCardComponent_mat_card_0_button_7_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "span", 9);
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(4, "mat-icon");
    ɵngcc0.ɵɵtext(5, "keyboard_arrow_up");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(3, 1, "ADF_VIEWER.SIDEBAR.METADATA.LESS_INFORMATION"));
} }
function ContentMetadataCardComponent_mat_card_0_button_7_Template(rf, ctx) { if (rf & 1) {
    var _r11 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 8);
    ɵngcc0.ɵɵlistener("click", function ContentMetadataCardComponent_mat_card_0_button_7_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r11); var ctx_r10 = ɵngcc0.ɵɵnextContext(2); return ctx_r10.toggleExpanded(); });
    ɵngcc0.ɵɵtemplate(1, ContentMetadataCardComponent_mat_card_0_button_7_ng_container_1_Template, 6, 3, "ng-container", 0);
    ɵngcc0.ɵɵtemplate(2, ContentMetadataCardComponent_mat_card_0_button_7_ng_container_2_Template, 6, 3, "ng-container", 0);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r3 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r3.expanded);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r3.expanded);
} }
function ContentMetadataCardComponent_mat_card_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-card");
    ɵngcc0.ɵɵelementStart(1, "mat-card-content");
    ɵngcc0.ɵɵelement(2, "adf-content-metadata", 1);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(3, "mat-card-footer", 2);
    ɵngcc0.ɵɵelementStart(4, "div");
    ɵngcc0.ɵɵtemplate(5, ContentMetadataCardComponent_mat_card_0_button_5_Template, 5, 6, "button", 3);
    ɵngcc0.ɵɵtemplate(6, ContentMetadataCardComponent_mat_card_0_button_6_Template, 5, 6, "button", 4);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(7, ContentMetadataCardComponent_mat_card_0_button_7_Template, 3, 2, "button", 5);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("displayDefaultProperties", ctx_r0.displayDefaultProperties)("expanded", ctx_r0.expanded)("node", ctx_r0.node)("displayEmpty", ctx_r0.displayEmpty)("editable", ctx_r0.editable)("multi", ctx_r0.multi)("displayAspect", ctx_r0.displayAspect)("preset", ctx_r0.preset);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.isEditAspectSupported());
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r0.readOnly && ctx_r0.hasAllowableOperations());
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.displayDefaultProperties);
} }
function AddPermissionDialogComponent_ng_container_3_adf_datatable_9_ng_template_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "adf-user-icon-column", 13);
} if (rf & 2) {
    var context_r8 = ctx.$implicit;
    ɵngcc0.ɵɵproperty("context", context_r8);
} }
function AddPermissionDialogComponent_ng_container_3_adf_datatable_9_ng_template_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "adf-user-name-column", 13);
} if (rf & 2) {
    var context_r9 = ctx.$implicit;
    ɵngcc0.ɵɵproperty("context", context_r9);
} }
function AddPermissionDialogComponent_ng_container_3_adf_datatable_9_ng_template_8_Template(rf, ctx) { if (rf & 1) {
    var _r12 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "adf-user-role-column", 14);
    ɵngcc0.ɵɵlistener("roleChanged", function AddPermissionDialogComponent_ng_container_3_adf_datatable_9_ng_template_8_Template_adf_user_role_column_roleChanged_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r12); var entry_r10 = ctx.$implicit; var ctx_r11 = ɵngcc0.ɵɵnextContext(3); return ctx_r11.onMemberUpdate($event, entry_r10.row.obj); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var entry_r10 = ctx.$implicit;
    var ctx_r5 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵproperty("readonly", entry_r10.row.obj.readonly)("value", entry_r10.data.getValue(entry_r10.row, entry_r10.col))("roles", ctx_r5.data.roles);
} }
function AddPermissionDialogComponent_ng_container_3_adf_datatable_9_ng_template_10_Template(rf, ctx) { if (rf & 1) {
    var _r14 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "adf-user-role-column", 15);
    ɵngcc0.ɵɵlistener("roleChanged", function AddPermissionDialogComponent_ng_container_3_adf_datatable_9_ng_template_10_Template_adf_user_role_column_roleChanged_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r14); var ctx_r13 = ɵngcc0.ɵɵnextContext(3); return ctx_r13.onBulkUpdate($event); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r6 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵproperty("roles", ctx_r6.data.roles);
} }
function AddPermissionDialogComponent_ng_container_3_adf_datatable_9_ng_template_12_Template(rf, ctx) { if (rf & 1) {
    var _r17 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 16);
    ɵngcc0.ɵɵlistener("click", function AddPermissionDialogComponent_ng_container_3_adf_datatable_9_ng_template_12_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r17); var entry_r15 = ctx.$implicit; var ctx_r16 = ɵngcc0.ɵɵnextContext(3); return ctx_r16.onMemberDelete(entry_r15.row.obj); });
    ɵngcc0.ɵɵelementStart(1, "mat-icon");
    ɵngcc0.ɵɵtext(2, "highlight_off");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var entry_r15 = ctx.$implicit;
    ɵngcc0.ɵɵstyleProp("display", entry_r15.row.obj.readonly ? "none" : "block");
} }
function AddPermissionDialogComponent_ng_container_3_adf_datatable_9_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "adf-datatable", 8);
    ɵngcc0.ɵɵelementStart(1, "data-columns");
    ɵngcc0.ɵɵelementStart(2, "data-column", 9);
    ɵngcc0.ɵɵtemplate(3, AddPermissionDialogComponent_ng_container_3_adf_datatable_9_ng_template_3_Template, 1, 1, "ng-template");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(4, "data-column", 10);
    ɵngcc0.ɵɵpipe(5, "translate");
    ɵngcc0.ɵɵtemplate(6, AddPermissionDialogComponent_ng_container_3_adf_datatable_9_ng_template_6_Template, 1, 1, "ng-template");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(7, "data-column", 11);
    ɵngcc0.ɵɵtemplate(8, AddPermissionDialogComponent_ng_container_3_adf_datatable_9_ng_template_8_Template, 1, 3, "ng-template");
    ɵngcc0.ɵɵelementStart(9, "adf-data-column-header");
    ɵngcc0.ɵɵtemplate(10, AddPermissionDialogComponent_ng_container_3_adf_datatable_9_ng_template_10_Template, 1, 1, "ng-template");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(11, "data-column", 12);
    ɵngcc0.ɵɵtemplate(12, AddPermissionDialogComponent_ng_container_3_adf_datatable_9_ng_template_12_Template, 3, 2, "ng-template");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r2 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("rows", ctx_r2.selectedMembers)("stickyHeader", true);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("sortable", false);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("title", ɵngcc0.ɵɵpipeBind2(5, 5, "PERMISSION_MANAGER.COLUMN.NAME", ɵngcc0.ɵɵpureFunction1(8, _c0, ctx_r2.selectedMembers.length)));
    ɵngcc0.ɵɵadvance(7);
    ɵngcc0.ɵɵproperty("sortable", false);
} }
function AddPermissionDialogComponent_ng_container_3_Template(rf, ctx) { if (rf & 1) {
    var _r19 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "mat-dialog-content");
    ɵngcc0.ɵɵelementStart(2, "button", 2);
    ɵngcc0.ɵɵlistener("click", function AddPermissionDialogComponent_ng_container_3_Template_button_click_2_listener() { ɵngcc0.ɵɵrestoreView(_r19); var ctx_r18 = ɵngcc0.ɵɵnextContext(); return ctx_r18.enableSearch(); });
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵpipe(4, "translate");
    ɵngcc0.ɵɵelement(5, "span", 3);
    ɵngcc0.ɵɵelementStart(6, "mat-icon");
    ɵngcc0.ɵɵtext(7, "search");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(8, "div", 4);
    ɵngcc0.ɵɵtemplate(9, AddPermissionDialogComponent_ng_container_3_adf_datatable_9_Template, 13, 10, "adf-datatable", 5);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(10, "mat-dialog-actions");
    ɵngcc0.ɵɵelementStart(11, "button", 6);
    ɵngcc0.ɵɵtext(12);
    ɵngcc0.ɵɵpipe(13, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(14, "button", 7);
    ɵngcc0.ɵɵlistener("click", function AddPermissionDialogComponent_ng_container_3_Template_button_click_14_listener() { ɵngcc0.ɵɵrestoreView(_r19); var ctx_r20 = ɵngcc0.ɵɵnextContext(); return ctx_r20.onAddClicked(); });
    ɵngcc0.ɵɵtext(15);
    ɵngcc0.ɵɵpipe(16, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    var ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(4, 6, "PERMISSION_MANAGER.ADD-PERMISSION.SEARCH"), " ");
    ɵngcc0.ɵɵadvance(6);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.selectedMembers.length);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(13, 8, "PERMISSION_MANAGER.ADD-PERMISSION.CLOSE-ACTION"), " ");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("mat-dialog-close", true)("disabled", !ctx_r0.isValid());
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(16, 10, "PERMISSION_MANAGER.ADD-PERMISSION.ADD-ACTION"), " ");
} }
function AddPermissionDialogComponent_ng_container_4_Template(rf, ctx) { if (rf & 1) {
    var _r22 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "mat-dialog-content");
    ɵngcc0.ɵɵelementStart(2, "adf-add-permission-panel", 17);
    ɵngcc0.ɵɵlistener("select", function AddPermissionDialogComponent_ng_container_4_Template_adf_add_permission_panel_select_2_listener($event) { ɵngcc0.ɵɵrestoreView(_r22); var ctx_r21 = ɵngcc0.ɵɵnextContext(); return ctx_r21.onSelect($event); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(3, "mat-dialog-actions");
    ɵngcc0.ɵɵelementStart(4, "button", 18);
    ɵngcc0.ɵɵlistener("click", function AddPermissionDialogComponent_ng_container_4_Template_button_click_4_listener() { ɵngcc0.ɵɵrestoreView(_r22); var ctx_r23 = ɵngcc0.ɵɵnextContext(); return ctx_r23.canCloseDialog(); });
    ɵngcc0.ɵɵtext(5);
    ɵngcc0.ɵɵpipe(6, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(7, "button", 19);
    ɵngcc0.ɵɵlistener("click", function AddPermissionDialogComponent_ng_container_4_Template_button_click_7_listener() { ɵngcc0.ɵɵrestoreView(_r22); var ctx_r24 = ɵngcc0.ɵɵnextContext(); return ctx_r24.onSearchAddClicked(); });
    ɵngcc0.ɵɵtext(8);
    ɵngcc0.ɵɵpipe(9, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    var ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(5);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(6, 3, "PERMISSION_MANAGER.ADD-PERMISSION.CLOSE-ACTION"), " ");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("disabled", !ctx_r1.currentSelection.length);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(9, 5, "PERMISSION_MANAGER.ADD-PERMISSION.SELECT-ACTION"), " ");
} }
function PermissionListComponent_div_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 3);
    ɵngcc0.ɵɵelement(1, "mat-progress-spinner", 4);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("color", "primary")("mode", "indeterminate");
} }
function PermissionListComponent_ng_container_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "div", 5);
    ɵngcc0.ɵɵelementStart(2, "mat-icon", 6);
    ɵngcc0.ɵɵtext(3, "error");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(4, "p", 7);
    ɵngcc0.ɵɵtext(5);
    ɵngcc0.ɵɵpipe(6, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(5);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(6, 1, "PERMISSION_MANAGER.ERROR.NOT-FOUND"));
} }
function PermissionListComponent_ng_container_6_button_13_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-icon");
    ɵngcc0.ɵɵtext(1, " keyboard_arrow_up ");
    ɵngcc0.ɵɵelementEnd();
} }
function PermissionListComponent_ng_container_6_button_13_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-icon");
    ɵngcc0.ɵɵtext(1, " keyboard_arrow_down ");
    ɵngcc0.ɵɵelementEnd();
} }
function PermissionListComponent_ng_container_6_button_13_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "button", 23, 24);
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵtemplate(4, PermissionListComponent_ng_container_6_button_13_mat_icon_4_Template, 2, 0, "mat-icon", 2);
    ɵngcc0.ɵɵtemplate(5, PermissionListComponent_ng_container_6_button_13_mat_icon_5_Template, 2, 0, "mat-icon", 2);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var _r8 = ɵngcc0.ɵɵreference(1);
    ɵngcc0.ɵɵnextContext();
    var _r6 = ɵngcc0.ɵɵreference(15);
    var _r4 = ɵngcc0.ɵɵreference(2);
    ɵngcc0.ɵɵproperty("adf-pop-over", _r6)("target", _r4);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(3, 5, _r8.open ? "PERMISSION_MANAGER.LABELS.HIDE" : "PERMISSION_MANAGER.LABELS.SHOW"), " ");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", _r8.open);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !_r8.open);
} }
function PermissionListComponent_ng_container_6_ng_template_14_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 25);
    ɵngcc0.ɵɵelement(1, "adf-permission-container", 26);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var model_r3 = ɵngcc0.ɵɵnextContext().ngIf;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("isReadOnly", true)("node", model_r3.node)("permissions", model_r3.inheritedPermissions)("showLocation", true)("selectionMode", "none")("roles", model_r3.roles);
} }
function PermissionListComponent_ng_container_6_Template(rf, ctx) { if (rf & 1) {
    var _r13 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "div", 8, 9);
    ɵngcc0.ɵɵelementStart(3, "div", 10);
    ɵngcc0.ɵɵelementStart(4, "span", 11);
    ɵngcc0.ɵɵelementStart(5, "h3", 12);
    ɵngcc0.ɵɵtext(6);
    ɵngcc0.ɵɵpipe(7, "translate");
    ɵngcc0.ɵɵpipe(8, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(9, "mat-slide-toggle", 13);
    ɵngcc0.ɵɵlistener("change", function PermissionListComponent_ng_container_6_Template_mat_slide_toggle_change_9_listener($event) { ɵngcc0.ɵɵrestoreView(_r13); var ctx_r12 = ɵngcc0.ɵɵnextContext(); return ctx_r12.permissionList.toggleInherited($event); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(10, "span", 14);
    ɵngcc0.ɵɵtext(11);
    ɵngcc0.ɵɵpipe(12, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(13, PermissionListComponent_ng_container_6_button_13_Template, 6, 7, "button", 15);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(14, PermissionListComponent_ng_container_6_ng_template_14_Template, 2, 6, "ng-template", null, 16, ɵngcc0.ɵɵtemplateRefExtractor);
    ɵngcc0.ɵɵelementStart(16, "mat-card-content", 17);
    ɵngcc0.ɵɵelementStart(17, "section", 18);
    ɵngcc0.ɵɵelementStart(18, "h3");
    ɵngcc0.ɵɵtext(19);
    ɵngcc0.ɵɵpipe(20, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(21, "div", 19);
    ɵngcc0.ɵɵelementStart(22, "button", 20);
    ɵngcc0.ɵɵlistener("click", function PermissionListComponent_ng_container_6_Template_button_click_22_listener() { ɵngcc0.ɵɵrestoreView(_r13); var ctx_r14 = ɵngcc0.ɵɵnextContext(); return ctx_r14.openAddPermissionDialog(); });
    ɵngcc0.ɵɵpipe(23, "translate");
    ɵngcc0.ɵɵelementStart(24, "mat-icon");
    ɵngcc0.ɵɵtext(25, "person_add_outline");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(26, "button", 21);
    ɵngcc0.ɵɵlistener("click", function PermissionListComponent_ng_container_6_Template_button_click_26_listener() { ɵngcc0.ɵɵrestoreView(_r13); var ctx_r15 = ɵngcc0.ɵɵnextContext(); return ctx_r15.deleteSelection(); });
    ɵngcc0.ɵɵpipe(27, "translate");
    ɵngcc0.ɵɵelementStart(28, "mat-icon");
    ɵngcc0.ɵɵtext(29, "delete_outline");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(30, "adf-permission-container", 22);
    ɵngcc0.ɵɵlistener("update", function PermissionListComponent_ng_container_6_Template_adf_permission_container_update_30_listener($event) { ɵngcc0.ɵɵrestoreView(_r13); var ctx_r16 = ɵngcc0.ɵɵnextContext(); return ctx_r16.updatePermission($event); })("delete", function PermissionListComponent_ng_container_6_Template_adf_permission_container_delete_30_listener($event) { ɵngcc0.ɵɵrestoreView(_r13); var ctx_r17 = ɵngcc0.ɵɵnextContext(); return ctx_r17.deletePermission($event); })("updateAll", function PermissionListComponent_ng_container_6_Template_adf_permission_container_updateAll_30_listener($event) { ɵngcc0.ɵɵrestoreView(_r13); var ctx_r18 = ɵngcc0.ɵɵnextContext(); return ctx_r18.updateAllPermission($event); })("row-select", function PermissionListComponent_ng_container_6_Template_adf_permission_container_row_select_30_listener($event) { ɵngcc0.ɵɵrestoreView(_r13); var ctx_r19 = ɵngcc0.ɵɵnextContext(); return ctx_r19.onSelect($event.detail.selection); })("row-unselect", function PermissionListComponent_ng_container_6_Template_adf_permission_container_row_unselect_30_listener($event) { ɵngcc0.ɵɵrestoreView(_r13); var ctx_r20 = ɵngcc0.ɵɵnextContext(); return ctx_r20.onSelect($event.detail.selection); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    var model_r3 = ctx.ngIf;
    var ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(6);
    ɵngcc0.ɵɵtextInterpolate2(" ", ɵngcc0.ɵɵpipeBind1(7, 12, "PERMISSION_MANAGER.LABELS.INHERITED-PERMISSIONS"), " ", ɵngcc0.ɵɵpipeBind1(8, 14, model_r3.node.permissions.isInheritanceEnabled ? "PERMISSION_MANAGER.LABELS.ON" : "PERMISSION_MANAGER.LABELS.OFF"), " ");
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("checked", model_r3.node.permissions.isInheritanceEnabled);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind2(12, 16, "PERMISSION_MANAGER.LABELS.INHERITED-SUBTITLE", ɵngcc0.ɵɵpureFunction1(25, _c0, model_r3.inheritedPermissions.length)), " ");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", model_r3.node.permissions.isInheritanceEnabled);
    ɵngcc0.ɵɵadvance(6);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(20, 19, "PERMISSION_MANAGER.LABELS.DIRECT-PERMISSIONS"));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("matTooltip", ɵngcc0.ɵɵpipeBind1(23, 21, "PERMISSION_MANAGER.ACTION.ADD-PERMISSION"));
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵproperty("matTooltip", ɵngcc0.ɵɵpipeBind1(27, 23, "PERMISSION_MANAGER.ACTION.DELETE"))("disabled", !(ctx_r2.selectedPermissions == null ? null : ctx_r2.selectedPermissions.length));
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵproperty("node", model_r3.node)("permissions", model_r3.localPermissions)("roles", model_r3.roles);
} }
function AddPermissionPanelComponent_mat_icon_3_Template(rf, ctx) { if (rf & 1) {
    var _r6 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "mat-icon", 7);
    ɵngcc0.ɵɵlistener("click", function AddPermissionPanelComponent_mat_icon_3_Template_mat_icon_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r6); var ctx_r5 = ɵngcc0.ɵɵnextContext(); return ctx_r5.clearSearch(); });
    ɵngcc0.ɵɵtext(1, "clear ");
    ɵngcc0.ɵɵelementEnd();
} }
function AddPermissionPanelComponent_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-icon", 8);
    ɵngcc0.ɵɵtext(1, "search ");
    ɵngcc0.ɵɵelementEnd();
} }
function AddPermissionPanelComponent_div_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 9);
    ɵngcc0.ɵɵelementStart(1, "span");
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(3, 1, "PERMISSION_MANAGER.ADD-PERMISSION.TYPE-MESSAGE"));
} }
function AddPermissionPanelComponent_ng_template_8_mat_list_option_7_ng_container_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    var item_r10 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", item_r10.entry.properties["cm:authorityDisplayName"], " ");
} }
function AddPermissionPanelComponent_ng_template_8_mat_list_option_7_ng_template_5_ng_container_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    var item_r10 = ɵngcc0.ɵɵnextContext(2).$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", item_r10.entry.properties["cm:authorityName"], " ");
} }
function AddPermissionPanelComponent_ng_template_8_mat_list_option_7_ng_template_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, AddPermissionPanelComponent_ng_template_8_mat_list_option_7_ng_template_5_ng_container_0_Template, 2, 1, "ng-container", 19);
} if (rf & 2) {
    var item_r10 = ɵngcc0.ɵɵnextContext().$implicit;
    var _r16 = ɵngcc0.ɵɵreference(8);
    ɵngcc0.ɵɵproperty("ngIf", item_r10.entry == null ? null : item_r10.entry.properties["cm:authorityName"])("ngIfElse", _r16);
} }
function AddPermissionPanelComponent_ng_template_8_mat_list_option_7_ng_template_7_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtext(0);
} if (rf & 2) {
    var item_r10 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵtextInterpolate2(" ", (item_r10.entry == null ? null : item_r10.entry.properties["cm:firstName"]) ? item_r10.entry == null ? null : item_r10.entry.properties["cm:firstName"] : "", " ", (item_r10.entry == null ? null : item_r10.entry.properties["cm:lastName"]) ? item_r10.entry == null ? null : item_r10.entry.properties["cm:lastName"] : "", " ");
} }
function AddPermissionPanelComponent_ng_template_8_mat_list_option_7_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-list-option", 16, 17);
    ɵngcc0.ɵɵelement(2, "adf-user-icon-column", 18);
    ɵngcc0.ɵɵelementStart(3, "p", 14);
    ɵngcc0.ɵɵtemplate(4, AddPermissionPanelComponent_ng_template_8_mat_list_option_7_ng_container_4_Template, 2, 1, "ng-container", 19);
    ɵngcc0.ɵɵtemplate(5, AddPermissionPanelComponent_ng_template_8_mat_list_option_7_ng_template_5_Template, 1, 2, "ng-template", null, 20, ɵngcc0.ɵɵtemplateRefExtractor);
    ɵngcc0.ɵɵtemplate(7, AddPermissionPanelComponent_ng_template_8_mat_list_option_7_ng_template_7_Template, 1, 2, "ng-template", null, 21, ɵngcc0.ɵɵtemplateRefExtractor);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var item_r10 = ctx.$implicit;
    var idx_r11 = ctx.index;
    var _r12 = ɵngcc0.ɵɵreference(1);
    var _r14 = ɵngcc0.ɵɵreference(6);
    ɵngcc0.ɵɵpropertyInterpolate1("id", "result_option_", idx_r11, "");
    ɵngcc0.ɵɵproperty("value", item_r10);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("node", item_r10)("selected", _r12.selected);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", item_r10.entry == null ? null : item_r10.entry.properties["cm:authorityDisplayName"])("ngIfElse", _r14);
} }
function AddPermissionPanelComponent_ng_template_8_Template(rf, ctx) { if (rf & 1) {
    var _r24 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "mat-selection-list", 10);
    ɵngcc0.ɵɵlistener("keydown.control.a", function AddPermissionPanelComponent_ng_template_8_Template_mat_selection_list_keydown_control_a_0_listener() { ɵngcc0.ɵɵrestoreView(_r24); var ctx_r23 = ɵngcc0.ɵɵnextContext(); return ctx_r23.onSelectionChange(); })("selectionChange", function AddPermissionPanelComponent_ng_template_8_Template_mat_selection_list_selectionChange_0_listener() { ɵngcc0.ɵɵrestoreView(_r24); var ctx_r25 = ɵngcc0.ɵɵnextContext(); return ctx_r25.onSelectionChange(); });
    ɵngcc0.ɵɵelementStart(1, "mat-list-option", 11, 12);
    ɵngcc0.ɵɵelement(3, "adf-user-icon-column", 13);
    ɵngcc0.ɵɵelementStart(4, "p", 14);
    ɵngcc0.ɵɵtext(5);
    ɵngcc0.ɵɵpipe(6, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(7, AddPermissionPanelComponent_ng_template_8_mat_list_option_7_Template, 9, 6, "mat-list-option", 15);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var data_r7 = ctx.$implicit;
    var _r8 = ɵngcc0.ɵɵreference(2);
    var ctx_r4 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("value", ctx_r4.EVERYONE);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("node", ctx_r4.EVERYONE)("selected", _r8.selected);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(6, 5, "PERMISSION_MANAGER.ADD-PERMISSION.EVERYONE"), " ");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngForOf", data_r7 == null ? null : data_r7.list == null ? null : data_r7.list.entries);
} }
function UserIconColumnComponent_div_0_ng_container_1_mat_icon_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-icon", 5);
    ɵngcc0.ɵɵtext(1, "people_alt_outline");
    ɵngcc0.ɵɵelementEnd();
} }
function UserIconColumnComponent_div_0_ng_container_1_div_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "div", 6);
    ɵngcc0.ɵɵpipe(1, "usernameInitials");
} if (rf & 2) {
    var user_r3 = ɵngcc0.ɵɵnextContext().ngIf;
    ɵngcc0.ɵɵproperty("outerHTML", ɵngcc0.ɵɵpipeBind2(1, 1, user_r3, "adf-people-initial"), ɵngcc0.ɵɵsanitizeHtml);
} }
function UserIconColumnComponent_div_0_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, UserIconColumnComponent_div_0_ng_container_1_mat_icon_1_Template, 2, 0, "mat-icon", 3);
    ɵngcc0.ɵɵtemplate(2, UserIconColumnComponent_div_0_ng_container_1_div_2_Template, 2, 4, "div", 4);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    var ctx_r2 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r2.group);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r2.group);
} }
function UserIconColumnComponent_div_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 1);
    ɵngcc0.ɵɵtemplate(1, UserIconColumnComponent_div_0_ng_container_1_Template, 3, 2, "ng-container", 2);
    ɵngcc0.ɵɵpipe(2, "async");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵattribute("id", ctx_r0.group ? "group-icon" : "person-icon");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ɵngcc0.ɵɵpipeBind1(2, 2, ctx_r0.displayText$));
} }
function UserIconColumnComponent_div_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 1);
    ɵngcc0.ɵɵelement(1, "mat-icon", 7);
    ɵngcc0.ɵɵelementEnd();
} }
function UserNameColumnComponent_span_7_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 3);
    ɵngcc0.ɵɵpipe(1, "async");
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "async");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(1, 2, ctx_r0.subTitleText$));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(3, 4, ctx_r0.subTitleText$), " ");
} }
function UserRoleColumnComponent_mat_form_field_0_mat_option_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-option", 5);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "adfLocalizedRole");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var role_r3 = ctx.$implicit;
    ɵngcc0.ɵɵproperty("value", role_r3.role);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 2, role_r3.label), " ");
} }
function UserRoleColumnComponent_mat_form_field_0_Template(rf, ctx) { if (rf & 1) {
    var _r5 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "mat-form-field", 2);
    ɵngcc0.ɵɵelementStart(1, "mat-select", 3);
    ɵngcc0.ɵɵlistener("click", function UserRoleColumnComponent_mat_form_field_0_Template_mat_select_click_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r5); return $event.stopPropagation(); })("selectionChange", function UserRoleColumnComponent_mat_form_field_0_Template_mat_select_selectionChange_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r5); var ctx_r6 = ɵngcc0.ɵɵnextContext(); return ctx_r6.onRoleChanged($event.value); });
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵtemplate(3, UserRoleColumnComponent_mat_form_field_0_mat_option_3_Template, 3, 4, "mat-option", 4);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("placeholder", ɵngcc0.ɵɵpipeBind1(2, 3, ctx_r0.placeholder))("value", ctx_r0.value);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r0.roles);
} }
function UserRoleColumnComponent_span_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 6);
    ɵngcc0.ɵɵpipe(1, "adfLocalizedRole");
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "adfLocalizedRole");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("title", ɵngcc0.ɵɵpipeBind1(1, 2, ctx_r1.value));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(3, 4, ctx_r1.value), " ");
} }
function PermissionContainerComponent_ng_template_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "adf-user-icon-column", 7);
} if (rf & 2) {
    var context_r7 = ctx.$implicit;
    ɵngcc0.ɵɵproperty("context", context_r7);
} }
function PermissionContainerComponent_ng_template_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "adf-user-name-column", 7);
} if (rf & 2) {
    var context_r8 = ctx.$implicit;
    ɵngcc0.ɵɵproperty("context", context_r8);
} }
function PermissionContainerComponent_data_column_8_ng_template_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "adf-node-path-column", 9);
} if (rf & 2) {
    var ctx_r9 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("node", ctx_r9.node);
} }
function PermissionContainerComponent_data_column_8_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "data-column", 8);
    ɵngcc0.ɵɵtemplate(1, PermissionContainerComponent_data_column_8_ng_template_1_Template, 1, 1, "ng-template");
    ɵngcc0.ɵɵelementEnd();
} }
function PermissionContainerComponent_ng_template_10_Template(rf, ctx) { if (rf & 1) {
    var _r12 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "adf-user-role-column", 10);
    ɵngcc0.ɵɵlistener("roleChanged", function PermissionContainerComponent_ng_template_10_Template_adf_user_role_column_roleChanged_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r12); var entry_r10 = ctx.$implicit; var ctx_r11 = ɵngcc0.ɵɵnextContext(); return ctx_r11.updateRole($event, entry_r10.row.obj); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var entry_r10 = ctx.$implicit;
    var ctx_r3 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("readonly", entry_r10.row.obj.readonly || ctx_r3.isReadOnly)("placeholder", entry_r10.data.getValue(entry_r10.row, entry_r10.col))("value", entry_r10.data.getValue(entry_r10.row, entry_r10.col))("roles", ctx_r3.roles);
} }
function PermissionContainerComponent_adf_data_column_header_11_ng_template_1_Template(rf, ctx) { if (rf & 1) {
    var _r15 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "adf-user-role-column", 11);
    ɵngcc0.ɵɵlistener("roleChanged", function PermissionContainerComponent_adf_data_column_header_11_ng_template_1_Template_adf_user_role_column_roleChanged_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r15); var ctx_r14 = ɵngcc0.ɵɵnextContext(2); return ctx_r14.bulkRoleUpdate($event); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r13 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("roles", ctx_r13.roles)("value", ctx_r13.bulkSelectionRole);
} }
function PermissionContainerComponent_adf_data_column_header_11_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "adf-data-column-header");
    ɵngcc0.ɵɵtemplate(1, PermissionContainerComponent_adf_data_column_header_11_ng_template_1_Template, 1, 2, "ng-template");
    ɵngcc0.ɵɵelementEnd();
} }
function PermissionContainerComponent_data_column_12_ng_template_1_Template(rf, ctx) { if (rf & 1) {
    var _r19 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 13);
    ɵngcc0.ɵɵlistener("click", function PermissionContainerComponent_data_column_12_ng_template_1_Template_button_click_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r19); var entry_r17 = ctx.$implicit; var ctx_r18 = ɵngcc0.ɵɵnextContext(2); return ctx_r18.removePermission($event, entry_r17.row.obj); });
    ɵngcc0.ɵɵelementStart(1, "mat-icon");
    ɵngcc0.ɵɵtext(2, "delete_outline");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var entry_r17 = ctx.$implicit;
    ɵngcc0.ɵɵproperty("disabled", entry_r17.row.obj.readonly);
    ɵngcc0.ɵɵattribute("data-automation-id", "adf-delete-permission-button-" + entry_r17.row.obj.authorityId);
} }
function PermissionContainerComponent_data_column_12_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "data-column", 12);
    ɵngcc0.ɵɵtemplate(1, PermissionContainerComponent_data_column_12_ng_template_1_Template, 3, 2, "ng-template");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵproperty("sortable", false);
} }
function PermissionContainerComponent_ng_template_14_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "adf-empty-content", 14);
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵpipe(2, "translate");
} if (rf & 2) {
    ɵngcc0.ɵɵproperty("title", ɵngcc0.ɵɵpipeBind1(1, 2, "PERMISSION_MANAGER.MESSAGE.EMPTY-PERMISSION"))("subtitle", ɵngcc0.ɵɵpipeBind1(2, 4, "PERMISSION_MANAGER.MESSAGE.EMPTY-SUBTITLE"));
} }
var _c36 = ["slideToggleExpirationDate"];
var _c37 = ["dateTimePickerInput"];
function TreeViewComponent_mat_tree_0_mat_tree_node_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-tree-node", 5);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var treeNode_r5 = ctx.$implicit;
    ɵngcc0.ɵɵpropertyInterpolate("id", treeNode_r5.name + "-tree-node");
    ɵngcc0.ɵɵproperty("matTreeNodePaddingIndent", 15);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", treeNode_r5.name, " ");
} }
function TreeViewComponent_mat_tree_0_mat_tree_node_2_Template(rf, ctx) { if (rf & 1) {
    var _r8 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "mat-tree-node", 5);
    ɵngcc0.ɵɵelementStart(1, "button", 6);
    ɵngcc0.ɵɵlistener("click", function TreeViewComponent_mat_tree_0_mat_tree_node_2_Template_button_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r8); var treeNode_r6 = ctx.$implicit; var ctx_r7 = ɵngcc0.ɵɵnextContext(2); return ctx_r7.onNodeClicked(treeNode_r6.node); });
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementStart(3, "mat-icon", 7);
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(5, "span", 8);
    ɵngcc0.ɵɵlistener("click", function TreeViewComponent_mat_tree_0_mat_tree_node_2_Template_span_click_5_listener() { ɵngcc0.ɵɵrestoreView(_r8); var treeNode_r6 = ctx.$implicit; var ctx_r9 = ɵngcc0.ɵɵnextContext(2); return ctx_r9.onNodeClicked(treeNode_r6.node); });
    ɵngcc0.ɵɵtext(6);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var treeNode_r6 = ctx.$implicit;
    var ctx_r4 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵpropertyInterpolate("id", treeNode_r6.name + "-tree-child-node");
    ɵngcc0.ɵɵproperty("matTreeNodePaddingIndent", 15);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate("id", "button-" + treeNode_r6.name);
    ɵngcc0.ɵɵattribute("aria-label", ɵngcc0.ɵɵpipeBind2(2, 6, "ADF-TREE-VIEW.ACCESSIBILITY.ARIA_LABEL", ɵngcc0.ɵɵpureFunction1(9, _c8, treeNode_r6.name)));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r4.treeControl.isExpanded(treeNode_r6) ? "folder_open" : "folder", " ");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(treeNode_r6.name);
} }
function TreeViewComponent_mat_tree_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-tree", 2);
    ɵngcc0.ɵɵtemplate(1, TreeViewComponent_mat_tree_0_mat_tree_node_1_Template, 2, 3, "mat-tree-node", 3);
    ɵngcc0.ɵɵtemplate(2, TreeViewComponent_mat_tree_0_mat_tree_node_2_Template, 7, 11, "mat-tree-node", 4);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("dataSource", ctx_r0.dataSource)("treeControl", ctx_r0.treeControl);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("matTreeNodeDefWhen", ctx_r0.hasChild);
} }
function TreeViewComponent_ng_template_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 9);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 1, "ADF-TREE-VIEW.MISSING-ID"), " ");
} }
function AspectListComponent_div_0_mat_expansion_panel_2_table_10_th_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "th", 19);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 1, "ADF-ASPECT-LIST.PROPERTY_NAME"), " ");
} }
function AspectListComponent_div_0_mat_expansion_panel_2_table_10_td_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "td", 20);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var property_r16 = ctx.$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", property_r16.id, " ");
} }
function AspectListComponent_div_0_mat_expansion_panel_2_table_10_th_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "th", 19);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 1, "ADF-ASPECT-LIST.DESCRIPTION"), " ");
} }
function AspectListComponent_div_0_mat_expansion_panel_2_table_10_td_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "td", 20);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var property_r17 = ctx.$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", property_r17.title, " ");
} }
function AspectListComponent_div_0_mat_expansion_panel_2_table_10_th_8_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "th", 19);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 1, "ADF-ASPECT-LIST.DATA_TYPE"), " ");
} }
function AspectListComponent_div_0_mat_expansion_panel_2_table_10_td_9_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "td", 20);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var property_r18 = ctx.$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", property_r18.dataType, " ");
} }
function AspectListComponent_div_0_mat_expansion_panel_2_table_10_tr_10_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "tr", 21);
} }
function AspectListComponent_div_0_mat_expansion_panel_2_table_10_tr_11_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "tr", 22);
} }
function AspectListComponent_div_0_mat_expansion_panel_2_table_10_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "table", 11);
    ɵngcc0.ɵɵelementContainerStart(1, 12);
    ɵngcc0.ɵɵtemplate(2, AspectListComponent_div_0_mat_expansion_panel_2_table_10_th_2_Template, 3, 3, "th", 13);
    ɵngcc0.ɵɵtemplate(3, AspectListComponent_div_0_mat_expansion_panel_2_table_10_td_3_Template, 2, 1, "td", 14);
    ɵngcc0.ɵɵelementContainerEnd();
    ɵngcc0.ɵɵelementContainerStart(4, 15);
    ɵngcc0.ɵɵtemplate(5, AspectListComponent_div_0_mat_expansion_panel_2_table_10_th_5_Template, 3, 3, "th", 13);
    ɵngcc0.ɵɵtemplate(6, AspectListComponent_div_0_mat_expansion_panel_2_table_10_td_6_Template, 2, 1, "td", 14);
    ɵngcc0.ɵɵelementContainerEnd();
    ɵngcc0.ɵɵelementContainerStart(7, 16);
    ɵngcc0.ɵɵtemplate(8, AspectListComponent_div_0_mat_expansion_panel_2_table_10_th_8_Template, 3, 3, "th", 13);
    ɵngcc0.ɵɵtemplate(9, AspectListComponent_div_0_mat_expansion_panel_2_table_10_td_9_Template, 2, 1, "td", 14);
    ɵngcc0.ɵɵelementContainerEnd();
    ɵngcc0.ɵɵtemplate(10, AspectListComponent_div_0_mat_expansion_panel_2_table_10_tr_10_Template, 1, 0, "tr", 17);
    ɵngcc0.ɵɵtemplate(11, AspectListComponent_div_0_mat_expansion_panel_2_table_10_tr_11_Template, 1, 0, "tr", 18);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r20 = ɵngcc0.ɵɵnextContext();
    var aspect_r5 = ctx_r20.$implicit;
    var colIndex_r6 = ctx_r20.index;
    var ctx_r7 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("dataSource", aspect_r5 == null ? null : aspect_r5.entry == null ? null : aspect_r5.entry.properties)("id", "aspect-list-" + colIndex_r6 + "-properties-table");
    ɵngcc0.ɵɵadvance(10);
    ɵngcc0.ɵɵproperty("matHeaderRowDef", ctx_r7.propertyColumns);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("matRowDefColumns", ctx_r7.propertyColumns);
} }
function AspectListComponent_div_0_mat_expansion_panel_2_Template(rf, ctx) { if (rf & 1) {
    var _r22 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "mat-expansion-panel", 5);
    ɵngcc0.ɵɵelementStart(1, "mat-expansion-panel-header", 5);
    ɵngcc0.ɵɵelementStart(2, "mat-panel-title");
    ɵngcc0.ɵɵelementStart(3, "mat-checkbox", 6);
    ɵngcc0.ɵɵlistener("click", function AspectListComponent_div_0_mat_expansion_panel_2_Template_mat_checkbox_click_3_listener($event) { ɵngcc0.ɵɵrestoreView(_r22); var ctx_r21 = ɵngcc0.ɵɵnextContext(2); return ctx_r21.onCheckBoxClick($event); })("change", function AspectListComponent_div_0_mat_expansion_panel_2_Template_mat_checkbox_change_3_listener($event) { ɵngcc0.ɵɵrestoreView(_r22); var aspect_r5 = ctx.$implicit; var ctx_r23 = ɵngcc0.ɵɵnextContext(2); return ctx_r23.onChange($event, aspect_r5 == null ? null : aspect_r5.entry == null ? null : aspect_r5.entry.id); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(4, "p", 7);
    ɵngcc0.ɵɵtext(5);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(6, "mat-panel-description", 8);
    ɵngcc0.ɵɵtext(7);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(8, "p", 9);
    ɵngcc0.ɵɵtext(9);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(10, AspectListComponent_div_0_mat_expansion_panel_2_table_10_Template, 12, 4, "table", 10);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var aspect_r5 = ctx.$implicit;
    var colIndex_r6 = ctx.index;
    var ctx_r4 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("id", "aspect-list-" + ctx_r4.getId(aspect_r5));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("id", "aspect-list-" + ctx_r4.getId(aspect_r5) + "header");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("id", "aspect-list-" + colIndex_r6 + "-check")("checked", ctx_r4.nodeAspects == null ? null : ctx_r4.nodeAspects.includes(aspect_r5 == null ? null : aspect_r5.entry == null ? null : aspect_r5.entry.id));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ctx_r4.getTitle(aspect_r5));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("id", "aspect-list-" + colIndex_r6 + "-title")("matTooltip", ctx_r4.getTitle(aspect_r5));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r4.getTitle(aspect_r5), " ");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("id", "aspect-list-" + colIndex_r6 + "-description");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", aspect_r5 == null ? null : aspect_r5.entry == null ? null : aspect_r5.entry.description, "");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", (aspect_r5 == null ? null : aspect_r5.entry == null ? null : aspect_r5.entry.properties == null ? null : aspect_r5.entry.properties.length) > 0);
} }
function AspectListComponent_div_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 2);
    ɵngcc0.ɵɵelementStart(1, "mat-accordion", 3);
    ɵngcc0.ɵɵtemplate(2, AspectListComponent_div_0_mat_expansion_panel_2_Template, 11, 11, "mat-expansion-panel", 4);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var aspects_r3 = ctx.ngIf;
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngForOf", aspects_r3);
} }
function AspectListComponent_ng_template_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 23);
    ɵngcc0.ɵɵelement(1, "mat-spinner", 24);
    ɵngcc0.ɵɵelementEnd();
} }
'use strict';

    moment$1 = moment$1 && Object.prototype.hasOwnProperty.call(moment$1, 'default') ? moment$1['default'] : moment$1;

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var MaterialModule = /** @class */ (function () {
        function MaterialModule() {
        }
MaterialModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MaterialModule });
MaterialModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MaterialModule_Factory(t) { return new (t || MaterialModule)(); }, imports: [[
            button.MatButtonModule,
            chips.MatChipsModule,
            i2.MatDialogModule,
            icon.MatIconModule,
            card.MatCardModule,
            input.MatInputModule,
            list.MatListModule,
            progressSpinner.MatProgressSpinnerModule,
            progressBar.MatProgressBarModule,
            core.MatRippleModule,
            menu.MatMenuModule,
            core.MatOptionModule,
            expansion.MatExpansionModule,
            select.MatSelectModule,
            checkbox.MatCheckboxModule,
            datepicker.MatDatepickerModule,
            slideToggle.MatSlideToggleModule,
            radio.MatRadioModule,
            slider.MatSliderModule,
            tree.MatTreeModule,
            badge.MatBadgeModule
        ], ɵngcc1.MatButtonModule, ɵngcc2.MatChipsModule, ɵngcc3.MatDialogModule, ɵngcc4.MatIconModule, ɵngcc5.MatCardModule, ɵngcc6.MatInputModule, ɵngcc7.MatListModule, ɵngcc8.MatProgressSpinnerModule, ɵngcc9.MatProgressBarModule, ɵngcc10.MatRippleModule, ɵngcc11.MatMenuModule, ɵngcc10.MatOptionModule, ɵngcc12.MatExpansionModule, ɵngcc13.MatSelectModule, ɵngcc14.MatCheckboxModule, ɵngcc15.MatDatepickerModule, ɵngcc16.MatSlideToggleModule, ɵngcc17.MatRadioModule, ɵngcc18.MatSliderModule, ɵngcc19.MatTreeModule, ɵngcc20.MatBadgeModule] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MaterialModule, { imports: [ɵngcc1.MatButtonModule, ɵngcc2.MatChipsModule, ɵngcc3.MatDialogModule, ɵngcc4.MatIconModule, ɵngcc5.MatCardModule, ɵngcc6.MatInputModule, ɵngcc7.MatListModule, ɵngcc8.MatProgressSpinnerModule, ɵngcc9.MatProgressBarModule, ɵngcc10.MatRippleModule, ɵngcc11.MatMenuModule, ɵngcc10.MatOptionModule, ɵngcc12.MatExpansionModule, ɵngcc13.MatSelectModule, ɵngcc14.MatCheckboxModule, ɵngcc15.MatDatepickerModule, ɵngcc16.MatSlideToggleModule, ɵngcc17.MatRadioModule, ɵngcc18.MatSliderModule, ɵngcc19.MatTreeModule, ɵngcc20.MatBadgeModule], exports: [ɵngcc1.MatButtonModule, ɵngcc2.MatChipsModule, ɵngcc3.MatDialogModule, ɵngcc4.MatIconModule, ɵngcc5.MatCardModule, ɵngcc6.MatInputModule, ɵngcc7.MatListModule, ɵngcc8.MatProgressSpinnerModule, ɵngcc9.MatProgressBarModule, ɵngcc10.MatRippleModule, ɵngcc11.MatMenuModule, ɵngcc10.MatOptionModule, ɵngcc12.MatExpansionModule, ɵngcc13.MatSelectModule, ɵngcc14.MatCheckboxModule, ɵngcc15.MatDatepickerModule, ɵngcc16.MatSlideToggleModule, ɵngcc17.MatRadioModule, ɵngcc18.MatSliderModule, ɵngcc19.MatTreeModule, ɵngcc20.MatBadgeModule] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MaterialModule, [{
        type: i0.NgModule,
        args: [{
                imports: [
                    button.MatButtonModule,
                    chips.MatChipsModule,
                    i2.MatDialogModule,
                    icon.MatIconModule,
                    card.MatCardModule,
                    input.MatInputModule,
                    list.MatListModule,
                    progressSpinner.MatProgressSpinnerModule,
                    progressBar.MatProgressBarModule,
                    core.MatRippleModule,
                    menu.MatMenuModule,
                    core.MatOptionModule,
                    expansion.MatExpansionModule,
                    select.MatSelectModule,
                    checkbox.MatCheckboxModule,
                    datepicker.MatDatepickerModule,
                    slideToggle.MatSlideToggleModule,
                    radio.MatRadioModule,
                    slider.MatSliderModule,
                    tree.MatTreeModule,
                    badge.MatBadgeModule
                ],
                exports: [
                    button.MatButtonModule,
                    chips.MatChipsModule,
                    i2.MatDialogModule,
                    icon.MatIconModule,
                    card.MatCardModule,
                    input.MatInputModule,
                    list.MatListModule,
                    progressSpinner.MatProgressSpinnerModule,
                    progressBar.MatProgressBarModule,
                    core.MatRippleModule,
                    menu.MatMenuModule,
                    core.MatOptionModule,
                    expansion.MatExpansionModule,
                    select.MatSelectModule,
                    checkbox.MatCheckboxModule,
                    datepicker.MatDatepickerModule,
                    slideToggle.MatSlideToggleModule,
                    radio.MatRadioModule,
                    slider.MatSliderModule,
                    tree.MatTreeModule,
                    badge.MatBadgeModule
                ]
            }]
    }], function () { return []; }, null); })();
        return MaterialModule;
    }());

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, o) {
        for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
                __createBinding(o, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    /** @deprecated */
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    /** @deprecated */
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    function __spreadArray(to, from, pack) {
        if (pack || arguments.length === 2)
            for (var i = 0, l = from.length, ar; i < l; i++) {
                if (ar || !(i in from)) {
                    if (!ar)
                        ar = Array.prototype.slice.call(from, 0, i);
                    ar[i] = from[i];
                }
            }
        return to.concat(ar || from);
    }
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, state, kind, f) {
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    }
    function __classPrivateFieldSet(receiver, state, value, kind, f) {
        if (kind === "m")
            throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
    }

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var DocumentLoaderNode = /** @class */ (function () {
        function DocumentLoaderNode(currentNode, children) {
            this.currentNode = currentNode;
            this.children = children;
        }
        return DocumentLoaderNode;
    }());

    var CustomResourcesService = /** @class */ (function () {
        function CustomResourcesService(apiService, logService) {
            this.apiService = apiService;
            this.logService = logService;
            this.CREATE_PERMISSION = 'create';
        }
        Object.defineProperty(CustomResourcesService.prototype, "peopleApi", {
            get: function () {
                var _a;
                this._peopleApi = (_a = this._peopleApi) !== null && _a !== void 0 ? _a : new jsApi.PeopleApi(this.apiService.getInstance());
                return this._peopleApi;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CustomResourcesService.prototype, "sitesApi", {
            get: function () {
                var _a;
                this._sitesApi = (_a = this._sitesApi) !== null && _a !== void 0 ? _a : new jsApi.SitesApi(this.apiService.getInstance());
                return this._sitesApi;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CustomResourcesService.prototype, "trashcanApi", {
            get: function () {
                var _a;
                this._trashcanApi = (_a = this._trashcanApi) !== null && _a !== void 0 ? _a : new jsApi.TrashcanApi(this.apiService.getInstance());
                return this._trashcanApi;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CustomResourcesService.prototype, "searchApi", {
            get: function () {
                var _a;
                this._searchApi = (_a = this._searchApi) !== null && _a !== void 0 ? _a : new jsApi.SearchApi(this.apiService.getInstance());
                return this._searchApi;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CustomResourcesService.prototype, "sharedLinksApi", {
            get: function () {
                var _a;
                this._sharedLinksApi = (_a = this._sharedLinksApi) !== null && _a !== void 0 ? _a : new jsApi.SharedlinksApi(this.apiService.getInstance());
                return this._sharedLinksApi;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CustomResourcesService.prototype, "favoritesApi", {
            get: function () {
                var _a;
                this._favoritesApi = (_a = this._favoritesApi) !== null && _a !== void 0 ? _a : new jsApi.FavoritesApi(this.apiService.getInstance());
                return this._favoritesApi;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CustomResourcesService.prototype, "nodesApi", {
            get: function () {
                var _a;
                this._nodesApi = (_a = this._nodesApi) !== null && _a !== void 0 ? _a : new jsApi.NodesApi(this.apiService.getInstance());
                return this._nodesApi;
            },
            enumerable: false,
            configurable: true
        });
        CustomResourcesService.prototype.getRecentFiles = function (personId, pagination, filters) {
            var _this = this;
            var defaultFilter = [
                'TYPE:"content"',
                '-PNAME:"0/wiki"',
                '-TYPE:"app:filelink"',
                '-TYPE:"cm:thumbnail"',
                '-TYPE:"cm:failedThumbnail"',
                '-TYPE:"cm:rating"',
                '-TYPE:"dl:dataList"',
                '-TYPE:"dl:todoList"',
                '-TYPE:"dl:issue"',
                '-TYPE:"dl:contact"',
                '-TYPE:"dl:eventAgenda"',
                '-TYPE:"dl:event"',
                '-TYPE:"dl:task"',
                '-TYPE:"dl:simpletask"',
                '-TYPE:"dl:meetingAgenda"',
                '-TYPE:"dl:location"',
                '-TYPE:"fm:topic"',
                '-TYPE:"fm:post"',
                '-TYPE:"ia:calendarEvent"',
                '-TYPE:"lnk:link"'
            ];
            return new rxjs.Observable(function (observer) {
                _this.peopleApi.getPerson(personId)
                    .then(function (person) {
                    var username = person.entry.id;
                    var filterQueries = [
                        { query: "cm:modified:[NOW/DAY-30DAYS TO NOW/DAY+1DAY]" },
                        { query: "cm:modifier:" + username + " OR cm:creator:" + username },
                        { query: defaultFilter.join(' AND ') }
                    ];
                    if (filters && filters.length > 0) {
                        filterQueries.push({
                            query: filters.join()
                        });
                    }
                    var query = new jsApi.SearchRequest({
                        query: {
                            query: '*',
                            language: 'afts'
                        },
                        filterQueries: filterQueries,
                        include: ['path', 'properties', 'allowableOperations'],
                        sort: [{
                                type: 'FIELD',
                                field: 'cm:modified',
                                ascending: false
                            }],
                        paging: {
                            maxItems: pagination.maxItems,
                            skipCount: pagination.skipCount
                        }
                    });
                    return _this.searchApi.search(query)
                        .then(function (searchResult) {
                        observer.next(searchResult);
                        observer.complete();
                    }, function (err) {
                        observer.error(err);
                        observer.complete();
                    });
                }, function (err) {
                    observer.error(err);
                    observer.complete();
                });
            }).pipe(operators.catchError(function (err) { return _this.handleError(err); }));
        };
        CustomResourcesService.prototype.loadFavorites = function (pagination, includeFields, where) {
            var _this = this;
            if (includeFields === void 0) { includeFields = []; }
            var includeFieldsRequest = this.getIncludesFields(includeFields);
            var defaultPredicate = '(EXISTS(target/file) OR EXISTS(target/folder))';
            var options = {
                maxItems: pagination.maxItems,
                skipCount: pagination.skipCount,
                where: where ? where + " AND " + defaultPredicate : defaultPredicate,
                include: includeFieldsRequest
            };
            return new rxjs.Observable(function (observer) {
                _this.favoritesApi.listFavorites('-me-', options)
                    .then(function (result) {
                    var page = {
                        list: {
                            entries: result.list.entries
                                .map(function (_b) {
                                var entry = _b.entry;
                                var target = entry.target.file || entry.target.folder;
                                target.properties = Object.assign(Object.assign({}, (target.properties || {
                                    'cm:title': entry.title || target.title,
                                    'cm:description': entry.description || target.description
                                })), (entry.properties || {}));
                                return {
                                    entry: target
                                };
                            }),
                            pagination: result.list.pagination
                        }
                    };
                    observer.next(page);
                    observer.complete();
                }, function (err) {
                    observer.error(err);
                    observer.complete();
                });
            }).pipe(operators.catchError(function (err) { return _this.handleError(err); }));
        };
        CustomResourcesService.prototype.loadMemberSites = function (pagination, where) {
            var _this = this;
            var options = {
                include: ['properties'],
                maxItems: pagination.maxItems,
                skipCount: pagination.skipCount,
                where: where
            };
            return new rxjs.Observable(function (observer) {
                _this.sitesApi.listSiteMembershipsForPerson('-me-', options)
                    .then(function (result) {
                    var page = new jsApi.SiteMemberPaging({
                        list: {
                            entries: result.list.entries
                                .map(function (_b) {
                                var site = _b.entry.site;
                                site.allowableOperations = site.allowableOperations ? site.allowableOperations : [_this.CREATE_PERMISSION];
                                site.name = site.name || site.title;
                                return {
                                    entry: site
                                };
                            }),
                            pagination: result.list.pagination
                        }
                    });
                    observer.next(page);
                    observer.complete();
                }, function (err) {
                    observer.error(err);
                    observer.complete();
                });
            }).pipe(operators.catchError(function (err) { return _this.handleError(err); }));
        };
        CustomResourcesService.prototype.loadSites = function (pagination, where) {
            var _this = this;
            var options = {
                include: ['properties', 'aspectNames'],
                maxItems: pagination.maxItems,
                skipCount: pagination.skipCount,
                where: where
            };
            return new rxjs.Observable(function (observer) {
                _this.sitesApi
                    .listSites(options)
                    .then(function (page) {
                    page.list.entries.map(function (_b) {
                        var entry = _b.entry;
                        entry.name = entry.name || entry.title;
                        return { entry: entry };
                    });
                    observer.next(page);
                    observer.complete();
                }, function (err) {
                    observer.error(err);
                    observer.complete();
                });
            }).pipe(operators.catchError(function (err) { return _this.handleError(err); }));
        };
        CustomResourcesService.prototype.loadTrashcan = function (pagination, includeFields) {
            var _this = this;
            if (includeFields === void 0) { includeFields = []; }
            var includeFieldsRequest = this.getIncludesFields(includeFields);
            var options = {
                include: includeFieldsRequest,
                maxItems: pagination.maxItems,
                skipCount: pagination.skipCount
            };
            return rxjs.from(this.trashcanApi.listDeletedNodes(options))
                .pipe(operators.catchError(function (err) { return _this.handleError(err); }));
        };
        CustomResourcesService.prototype.loadSharedLinks = function (pagination, includeFields, where) {
            var _this = this;
            if (includeFields === void 0) { includeFields = []; }
            var includeFieldsRequest = this.getIncludesFields(includeFields);
            var options = {
                include: includeFieldsRequest,
                maxItems: pagination.maxItems,
                skipCount: pagination.skipCount,
                where: where
            };
            return rxjs.from(this.sharedLinksApi.listSharedLinks(options))
                .pipe(operators.catchError(function (err) { return _this.handleError(err); }));
        };
        CustomResourcesService.prototype.isCustomSource = function (folderId) {
            var isCustomSources = false;
            var sources = ['-trashcan-', '-sharedlinks-', '-sites-', '-mysites-', '-favorites-', '-recent-'];
            if (sources.indexOf(folderId) > -1) {
                isCustomSources = true;
            }
            return isCustomSources;
        };
        CustomResourcesService.prototype.isSupportedSource = function (folderId) {
            var isSupportedSources = false;
            var sources = ['-my-', '-root-', '-shared-'];
            if (sources.indexOf(folderId) > -1) {
                isSupportedSources = true;
            }
            return isSupportedSources;
        };
        CustomResourcesService.prototype.loadFolderByNodeId = function (nodeId, pagination, includeFields, where) {
            if (includeFields === void 0) { includeFields = []; }
            if (nodeId === '-trashcan-') {
                return this.loadTrashcan(pagination, includeFields);
            }
            else if (nodeId === '-sharedlinks-') {
                return this.loadSharedLinks(pagination, includeFields, where);
            }
            else if (nodeId === '-sites-') {
                return this.loadSites(pagination, where);
            }
            else if (nodeId === '-mysites-') {
                return this.loadMemberSites(pagination, where);
            }
            else if (nodeId === '-favorites-') {
                return this.loadFavorites(pagination, includeFields, where);
            }
            else if (nodeId === '-recent-') {
                return this.getRecentFiles('-me-', pagination);
            }
        };
        CustomResourcesService.prototype.getCorrespondingNodeIds = function (nodeId, pagination) {
            var _this = this;
            if (pagination === void 0) { pagination = {}; }
            if (this.isCustomSource(nodeId)) {
                return this.loadFolderByNodeId(nodeId, pagination)
                    .pipe(operators.map(function (result) {
                    return result.list.entries.map(function (node) { return _this.getIdFromEntry(node, nodeId); });
                }));
            }
            else if (nodeId) {
                return rxjs.from(this.nodesApi.getNode(nodeId)
                    .then(function (node) { return [node.entry.id]; }));
            }
            return rxjs.of([]);
        };
        CustomResourcesService.prototype.getIdFromEntry = function (node, nodeId) {
            if (nodeId === '-sharedlinks-') {
                return node.entry.nodeId;
            }
            else if (nodeId === '-sites-' || nodeId === '-mysites-') {
                return node.entry.guid;
            }
            else if (nodeId === '-favorites-') {
                return node.entry.targetGuid;
            }
            else {
                return node.entry.id;
            }
        };
        CustomResourcesService.prototype.hasCorrespondingNodeIds = function (nodeId) {
            return this.isCustomSource(nodeId) || this.isSupportedSource(nodeId);
        };
        CustomResourcesService.prototype.getIncludesFields = function (includeFields) {
            return __spread(['path', 'properties', 'allowableOperations', 'permissions', 'aspectNames'], includeFields).filter(function (element, index, array) { return index === array.indexOf(element); });
        };
        CustomResourcesService.prototype.handleError = function (error) {
            this.logService.error(error);
            return rxjs.throwError(error || 'Server error');
        };
CustomResourcesService.ɵfac = function CustomResourcesService_Factory(t) { return new (t || CustomResourcesService)(ɵngcc0.ɵɵinject(ɵngcc21.AlfrescoApiService), ɵngcc0.ɵɵinject(ɵngcc21.LogService)); };
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CustomResourcesService, [{
        type: i0.Injectable,
        args: [{ providedIn: 'root' }]
    }], function () { return [{ type: ɵngcc21.AlfrescoApiService }, { type: ɵngcc21.LogService }]; }, null); })();
        return CustomResourcesService;
    }());
    CustomResourcesService.ɵprov = i0.ɵɵdefineInjectable({ factory: function CustomResourcesService_Factory() { return new CustomResourcesService(i0.ɵɵinject(i1.AlfrescoApiService), i0.ɵɵinject(i1.LogService)); }, token: CustomResourcesService, providedIn: "root" });
    CustomResourcesService.ctorParameters = function () { return [
        { type: i1.AlfrescoApiService },
        { type: i1.LogService }
    ]; };

    var DocumentListService = /** @class */ (function () {
        function DocumentListService(contentService, apiService, logService, customResourcesService) {
            this.contentService = contentService;
            this.apiService = apiService;
            this.logService = logService;
            this.customResourcesService = customResourcesService;
        }
        Object.defineProperty(DocumentListService.prototype, "nodes", {
            get: function () {
                var _a;
                this._nodesApi = (_a = this._nodesApi) !== null && _a !== void 0 ? _a : new jsApi.NodesApi(this.apiService.getInstance());
                return this._nodesApi;
            },
            enumerable: false,
            configurable: true
        });
        DocumentListService.prototype.deleteNode = function (nodeId) {
            return rxjs.from(this.nodes.deleteNode(nodeId));
        };
        DocumentListService.prototype.copyNode = function (nodeId, targetParentId) {
            var _this = this;
            return rxjs.from(this.nodes.copyNode(nodeId, { targetParentId: targetParentId })).pipe(operators.catchError(function (err) { return _this.handleError(err); }));
        };
        DocumentListService.prototype.moveNode = function (nodeId, targetParentId) {
            var _this = this;
            return rxjs.from(this.nodes.moveNode(nodeId, { targetParentId: targetParentId })).pipe(operators.catchError(function (err) { return _this.handleError(err); }));
        };
        DocumentListService.prototype.getFolder = function (folder, opts, includeFields) {
            var _this = this;
            if (includeFields === void 0) { includeFields = []; }
            var rootNodeId = DocumentListService.ROOT_ID;
            if (opts && opts.rootFolderId) {
                rootNodeId = opts.rootFolderId;
            }
            var includeFieldsRequest = __spread(['path', 'properties', 'allowableOperations', 'permissions', 'aspectNames'], includeFields).filter(function (element, index, array) { return index === array.indexOf(element); });
            var params = {
                includeSource: true,
                include: includeFieldsRequest
            };
            if (folder) {
                params.relativePath = folder;
            }
            if (opts) {
                if (opts.maxItems) {
                    params.maxItems = opts.maxItems;
                }
                if (opts.skipCount) {
                    params.skipCount = opts.skipCount;
                }
                if (opts.where) {
                    params.where = opts.where;
                }
                if (opts.orderBy) {
                    params.orderBy = opts.orderBy;
                }
            }
            return rxjs.from(this.nodes.listNodeChildren(rootNodeId, params)).pipe(operators.catchError(function (err) { return _this.handleError(err); }));
        };
        DocumentListService.prototype.getNode = function (nodeId, includeFields) {
            if (includeFields === void 0) { includeFields = []; }
            var includeFieldsRequest = __spread(['path', 'properties', 'allowableOperations', 'permissions', 'definition'], includeFields).filter(function (element, index, array) { return index === array.indexOf(element); });
            var opts = {
                includeSource: true,
                include: includeFieldsRequest
            };
            return this.contentService.getNode(nodeId, opts);
        };
        DocumentListService.prototype.getFolderNode = function (nodeId, includeFields) {
            var _this = this;
            if (includeFields === void 0) { includeFields = []; }
            var includeFieldsRequest = __spread(['path', 'properties', 'allowableOperations', 'permissions', 'aspectNames'], includeFields).filter(function (element, index, array) { return index === array.indexOf(element); });
            var opts = {
                includeSource: true,
                include: includeFieldsRequest
            };
            return rxjs.from(this.nodes.getNode(nodeId, opts)).pipe(operators.catchError(function (err) { return _this.handleError(err); }));
        };
        DocumentListService.prototype.isCustomSourceService = function (nodeId) {
            return this.customResourcesService.isCustomSource(nodeId);
        };
        DocumentListService.prototype.loadFolderByNodeId = function (nodeId, pagination, includeFields, where, orderBy) {
            if (this.customResourcesService.isCustomSource(nodeId)) {
                return this.customResourcesService.loadFolderByNodeId(nodeId, pagination, includeFields, where).pipe(operators.map(function (result) { return new DocumentLoaderNode(null, result); }));
            }
            else {
                return this.retrieveDocumentNode(nodeId, pagination, includeFields, where, orderBy);
            }
        };
        DocumentListService.prototype.retrieveDocumentNode = function (nodeId, pagination, includeFields, where, orderBy) {
            return rxjs.forkJoin([
                this.getFolderNode(nodeId, includeFields),
                this.getFolder(null, {
                    maxItems: pagination.maxItems,
                    skipCount: pagination.skipCount,
                    orderBy: orderBy,
                    rootFolderId: nodeId,
                    where: where
                }, includeFields)
            ]).pipe(operators.map(function (results) { return new DocumentLoaderNode(results[0], results[1]); }));
        };
        DocumentListService.prototype.handleError = function (error) {
            this.logService.error(error);
            return rxjs.throwError(error || 'Server error');
        };
DocumentListService.ɵfac = function DocumentListService_Factory(t) { return new (t || DocumentListService)(ɵngcc0.ɵɵinject(ɵngcc21.ContentService), ɵngcc0.ɵɵinject(ɵngcc21.AlfrescoApiService), ɵngcc0.ɵɵinject(ɵngcc21.LogService), ɵngcc0.ɵɵinject(CustomResourcesService)); };
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DocumentListService, [{
        type: i0.Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc21.ContentService }, { type: ɵngcc21.AlfrescoApiService }, { type: ɵngcc21.LogService }, { type: CustomResourcesService }]; }, null); })();
        return DocumentListService;
    }());
    DocumentListService.ROOT_ID = '-root-';
    DocumentListService.ɵprov = i0.ɵɵdefineInjectable({ factory: function DocumentListService_Factory() { return new DocumentListService(i0.ɵɵinject(i1.ContentService), i0.ɵɵinject(i1.AlfrescoApiService), i0.ɵɵinject(i1.LogService), i0.ɵɵinject(CustomResourcesService)); }, token: DocumentListService, providedIn: "root" });
    DocumentListService.ctorParameters = function () { return [
        { type: i1.ContentService },
        { type: i1.AlfrescoApiService },
        { type: i1.LogService },
        { type: CustomResourcesService }
    ]; };

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    (function (NodeAction) {
        NodeAction["ATTACH"] = "ATTACH";
        NodeAction["CHOOSE"] = "CHOOSE";
        NodeAction["COPY"] = "COPY";
        NodeAction["MOVE"] = "MOVE";
        NodeAction["NEXT"] = "NEXT";
    })(exports.NodeAction || (exports.NodeAction = {}));

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var ContentNodeSelectorComponent = /** @class */ (function () {
        function ContentNodeSelectorComponent(translation, contentService, notificationService, uploadService, dialog, data) {
            var _a;
            this.translation = translation;
            this.contentService = contentService;
            this.notificationService = notificationService;
            this.uploadService = uploadService;
            this.dialog = dialog;
            this.data = data;
            this.showingSearch = false;
            this.hasAllowableOperations = false;
            this.isLoading = true;
            this.selectedTabIndex = 0;
            this.uploadStarted = false;
            this.emptyFolderImageUrl = './assets/images/empty_doc_lib.svg';
            this.action = (_a = data.actionName) !== null && _a !== void 0 ? _a : exports.NodeAction.CHOOSE;
            this.buttonActionName = "NODE_SELECTOR." + this.action;
            this.title = data.title;
            this.currentDirectoryId = data.currentFolderId;
        }
        ContentNodeSelectorComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.dialog.keydownEvents().subscribe(function (event) {
                if (event.keyCode === 27) {
                    event.preventDefault();
                    event.stopImmediatePropagation();
                    _this.close();
                }
            });
            this.dialog.backdropClick().subscribe(function () {
                _this.close();
            });
            this.uploadService.fileUploadStarting.subscribe(function () {
                _this.uploadStarted = true;
            });
        };
        ContentNodeSelectorComponent.prototype.close = function () {
            this.dialog.close();
        };
        ContentNodeSelectorComponent.prototype.onSelect = function (nodeList) {
            this.chosenNode = nodeList;
        };
        ContentNodeSelectorComponent.prototype.onSiteChange = function (siteTitle) {
            this.updateTitle(siteTitle);
        };
        ContentNodeSelectorComponent.prototype.onNavigationChange = function (pathElement) {
            this.currentDirectoryId = pathElement.value.id;
            this.isLoading = true;
        };
        ContentNodeSelectorComponent.prototype.onClick = function () {
            this.data.select.next(this.chosenNode);
            this.close();
        };
        ContentNodeSelectorComponent.prototype.updateTitle = function (siteTitle) {
            if (this.action === exports.NodeAction.CHOOSE && siteTitle) {
                this.title = this.getTitleTranslation(this.action, siteTitle);
            }
        };
        ContentNodeSelectorComponent.prototype.getTitleTranslation = function (action, name) {
            return this.translation.instant("NODE_SELECTOR." + action + "_ITEM", { name: this.translation.instant(name) });
        };
        ContentNodeSelectorComponent.prototype.getSelectedCount = function () {
            var _a;
            return ((_a = this.chosenNode) === null || _a === void 0 ? void 0 : _a.length) || 0;
        };
        ContentNodeSelectorComponent.prototype.isCounterVisible = function () {
            return this.action === exports.NodeAction.ATTACH || this.action === exports.NodeAction.CHOOSE;
        };
        ContentNodeSelectorComponent.prototype.isMultipleSelection = function () {
            return this.data.selectionMode === 'multiple';
        };
        ContentNodeSelectorComponent.prototype.onError = function (error) {
            this.notificationService.showError(error);
        };
        ContentNodeSelectorComponent.prototype.isChooseButtonDisabled = function () {
            return this.uploadService.isUploading() || !this.hasNodeSelected();
        };
        ContentNodeSelectorComponent.prototype.hasNodeSelected = function () {
            var _a;
            return ((_a = this.chosenNode) === null || _a === void 0 ? void 0 : _a.length) > 0;
        };
        ContentNodeSelectorComponent.prototype.onShowingSearch = function (value) {
            this.showingSearch = value;
        };
        ContentNodeSelectorComponent.prototype.onCurrentFolder = function (currentFolder) {
            this.hasAllowableOperations = this.contentService.hasAllowableOperations(currentFolder, i1.AllowableOperationsEnum.CREATE);
            this.breadcrumbFolderNode = currentFolder;
        };
        ContentNodeSelectorComponent.prototype.isNotAllowedToUpload = function () {
            return this.showingSearch || !this.hasAllowableOperations;
        };
        ContentNodeSelectorComponent.prototype.onFolderLoaded = function () {
            this.isLoading = false;
        };
        ContentNodeSelectorComponent.prototype.onTabSelectionChange = function (tabIndex) {
            this.selectedTabIndex = tabIndex;
        };
        ContentNodeSelectorComponent.prototype.isFileServerTabSelected = function () {
            return this.selectedTabIndex === 0;
        };
        ContentNodeSelectorComponent.prototype.isLocalUploadTabSelected = function () {
            return this.selectedTabIndex === 1;
        };
        ContentNodeSelectorComponent.prototype.isUploadEnabled = function () {
            return this.canPerformLocalUpload() && this.isLocalUploadTabSelected();
        };
        ContentNodeSelectorComponent.prototype.canPerformLocalUpload = function () {
            var _a;
            return (_a = this.data) === null || _a === void 0 ? void 0 : _a.showLocalUploadButton;
        };
        ContentNodeSelectorComponent.prototype.getWarningMessage = function () {
            return this.showingSearch ? 'NODE_SELECTOR.UPLOAD_BUTTON_SEARCH_WARNING_MESSAGE' :
                (this.hasNoPermissionToUpload() ? 'NODE_SELECTOR.UPLOAD_BUTTON_PERMISSION_WARNING_MESSAGE' : '');
        };
        ContentNodeSelectorComponent.prototype.hasNoPermissionToUpload = function () {
            return (!this.hasAllowableOperations && !this.showingSearch) && !this.isLoading;
        };
        ContentNodeSelectorComponent.prototype.hasUploadError = function () {
            return this.showingSearch || this.hasNoPermissionToUpload();
        };
ContentNodeSelectorComponent.ɵfac = function ContentNodeSelectorComponent_Factory(t) { return new (t || ContentNodeSelectorComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc21.TranslationService), ɵngcc0.ɵɵdirectiveInject(ɵngcc21.ContentService), ɵngcc0.ɵɵdirectiveInject(ɵngcc21.NotificationService), ɵngcc0.ɵɵdirectiveInject(ɵngcc21.UploadService), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.MatDialogRef), ɵngcc0.ɵɵdirectiveInject(i2.MAT_DIALOG_DATA)); };
ContentNodeSelectorComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ContentNodeSelectorComponent, selectors: [["adf-content-node-selector"]], decls: 18, vars: 30, consts: [["mat-dialog-title", "", "data-automation-id", "content-node-selector-title"], ["mat-align-tabs", "start", 1, "adf-content-node-selector-dialog-content", 3, "selectedIndexChange"], [3, "label"], [3, "currentFolderId", "restrictRootToCurrentFolderId", "dropdownHideMyFiles", "dropdownSiteList", "rowFilter", "imageResolver", "isSelectionValid", "breadcrumbTransform", "excludeSiteContent", "selectionMode", "where", "showSearch", "showDropdownSiteList", "showFilesInResult", "showNodeCounter", "currentFolder", "folderLoaded", "select", "showingSearch", "siteChange", "navigationChange"], [3, "disabled", 4, "ngIf"], [4, "ngIf"], ["mat-button", "", "data-automation-id", "content-node-selector-actions-cancel", 3, "click"], ["mat-button", "", "data-automation-id", "content-node-selector-actions-choose", 1, "adf-choose-action", 3, "disabled", "click"], [3, "disabled"], [1, "adf-content-node-selector-local-upload-container"], [1, "adf-content-node-selector-local-upload-header"], ["data-automation-id", "content-node-selector-upload-breadcrumb", 1, "adf-content-node-selector-content-breadcrumb", 3, "folderNode", "rootId", "readOnly"], [3, "adf-node-counter", 4, "ngIf"], ["mat-tab-label", ""], [1, "adf-content-node-selector-local-upload-content"], [3, "rootFolderId"], [3, "alwaysVisible"], ["data-automation-id", "adf-empty-list", 4, "ngIf"], [3, "adf-node-counter"], ["data-automation-id", "adf-content-node-selector-disabled-tab-info-icon", 3, "matTooltip", 4, "ngIf"], ["data-automation-id", "adf-content-node-selector-disabled-tab-info-icon", 3, "matTooltip"], ["data-automation-id", "adf-empty-list"], [1, "adf-empty-list_template", "adf-empty-folder"], ["fxHide.lt-md", "true", 1, "adf-empty-folder-drag-drop"], ["fxHide.lt-md", "true", 1, "adf-empty-folder-any-files-here-to-add"], [1, "adf-empty-folder-image", 3, "alt", "src"], [3, "staticTitle", "multipleFiles", "rootFolderId", "disabled", "error"]], template: function ContentNodeSelectorComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "header", 0);
        ɵngcc0.ɵɵelementStart(1, "h2");
        ɵngcc0.ɵɵtext(2);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(3, "mat-tab-group", 1);
        ɵngcc0.ɵɵlistener("selectedIndexChange", function ContentNodeSelectorComponent_Template_mat_tab_group_selectedIndexChange_3_listener($event) { return ctx.onTabSelectionChange($event); });
        ɵngcc0.ɵɵelementStart(4, "mat-tab", 2);
        ɵngcc0.ɵɵpipe(5, "translate");
        ɵngcc0.ɵɵelementStart(6, "adf-content-node-selector-panel", 3);
        ɵngcc0.ɵɵlistener("currentFolder", function ContentNodeSelectorComponent_Template_adf_content_node_selector_panel_currentFolder_6_listener($event) { return ctx.onCurrentFolder($event); })("folderLoaded", function ContentNodeSelectorComponent_Template_adf_content_node_selector_panel_folderLoaded_6_listener() { return ctx.onFolderLoaded(); })("select", function ContentNodeSelectorComponent_Template_adf_content_node_selector_panel_select_6_listener($event) { return ctx.onSelect($event); })("showingSearch", function ContentNodeSelectorComponent_Template_adf_content_node_selector_panel_showingSearch_6_listener($event) { return ctx.onShowingSearch($event); })("siteChange", function ContentNodeSelectorComponent_Template_adf_content_node_selector_panel_siteChange_6_listener($event) { return ctx.onSiteChange($event); })("navigationChange", function ContentNodeSelectorComponent_Template_adf_content_node_selector_panel_navigationChange_6_listener($event) { return ctx.onNavigationChange($event); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(7, ContentNodeSelectorComponent_mat_tab_7_Template, 13, 10, "mat-tab", 4);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(8, "mat-dialog-actions");
        ɵngcc0.ɵɵelementStart(9, "div");
        ɵngcc0.ɵɵtemplate(10, ContentNodeSelectorComponent_ng_container_10_Template, 3, 6, "ng-container", 5);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(11, "div");
        ɵngcc0.ɵɵelementStart(12, "button", 6);
        ɵngcc0.ɵɵlistener("click", function ContentNodeSelectorComponent_Template_button_click_12_listener() { return ctx.close(); });
        ɵngcc0.ɵɵtext(13);
        ɵngcc0.ɵɵpipe(14, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(15, "button", 7);
        ɵngcc0.ɵɵlistener("click", function ContentNodeSelectorComponent_Template_button_click_15_listener() { return ctx.onClick(); });
        ɵngcc0.ɵɵtext(16);
        ɵngcc0.ɵɵpipe(17, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵtextInterpolate(ctx.title);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵclassProp("adf-content-node-selector-headless-tabs", !ctx.canPerformLocalUpload());
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵpropertyInterpolate("label", ɵngcc0.ɵɵpipeBind1(5, 24, "NODE_SELECTOR.REPOSITORY"));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("currentFolderId", ctx.data == null ? null : ctx.data.currentFolderId)("restrictRootToCurrentFolderId", ctx.data == null ? null : ctx.data.restrictRootToCurrentFolderId)("dropdownHideMyFiles", ctx.data == null ? null : ctx.data.dropdownHideMyFiles)("dropdownSiteList", ctx.data == null ? null : ctx.data.dropdownSiteList)("rowFilter", ctx.data == null ? null : ctx.data.rowFilter)("imageResolver", ctx.data == null ? null : ctx.data.imageResolver)("isSelectionValid", ctx.data == null ? null : ctx.data.isSelectionValid)("breadcrumbTransform", ctx.data == null ? null : ctx.data.breadcrumbTransform)("excludeSiteContent", ctx.data == null ? null : ctx.data.excludeSiteContent)("selectionMode", ctx.data == null ? null : ctx.data.selectionMode)("where", ctx.data == null ? null : ctx.data.where)("showSearch", ctx.data == null ? null : ctx.data.showSearch)("showDropdownSiteList", ctx.data == null ? null : ctx.data.showDropdownSiteList)("showFilesInResult", ctx.data == null ? null : ctx.data.showFilesInResult)("showNodeCounter", ctx.isCounterVisible());
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.canPerformLocalUpload());
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngIf", ctx.isUploadEnabled());
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵtextInterpolate1("", ɵngcc0.ɵɵpipeBind1(14, 26, "NODE_SELECTOR.CANCEL"), " ");
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("disabled", ctx.isChooseButtonDisabled());
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate1("", ɵngcc0.ɵɵpipeBind1(17, 28, ctx.buttonActionName), " ");
    } }, directives: function () { return [ɵngcc3.MatDialogTitle, ɵngcc22.MatTabGroup, ɵngcc22.MatTab, ContentNodeSelectorPanelComponent, ɵngcc23.NgIf, ɵngcc3.MatDialogActions, ɵngcc1.MatButton, ɵngcc21.ToolbarComponent, ɵngcc21.ToolbarTitleComponent, DropdownBreadcrumbComponent, ɵngcc22.MatTabLabel, UploadDragAreaComponent, FileUploadingDialogComponent, NodeCounterDirective, ɵngcc4.MatIcon, ɵngcc24.MatTooltip, ɵngcc21.EmptyListComponent, UploadButtonComponent]; }, pipes: function () { return [ɵngcc25.TranslatePipe]; }, styles: ["adf-content-node-selector .adf-content-node-selector-headless-tabs .mat-tab-header{display:none}adf-content-node-selector .adf-upload-dialog{bottom:unset;box-shadow:none;height:100%;position:unset;width:100%}adf-content-node-selector .adf-upload-dialog__content{max-height:64%}adf-content-node-selector .adf-upload-dialog-container{height:380px}adf-content-node-selector .adf-toolbar-title{place-items:center}adf-content-node-selector .adf-content-node-selector-local-upload-content{height:368px}adf-content-node-selector .adf-content-node-selector-local-upload-content adf-upload-drag-area adf-empty-list .adf-empty-folder-drag-drop{font-size:40px;min-height:46px}adf-content-node-selector .adf-content-node-selector-local-upload-content adf-upload-drag-area adf-empty-list .adf-empty-folder-image{height:100px;width:460px}.adf-content-node-selector-dialog-content{padding-left:24px;padding-right:24px}.adf-content-node-selector-dialog .mat-dialog-title{color:var(--theme-text-bold-color);font-size:20px;font-stretch:normal;font-style:normal;font-weight:600;letter-spacing:-.5px;line-height:1.6;margin-left:24px;margin-right:24px}.adf-content-node-selector-dialog .mat-dialog-title h2{font-size:unset;margin:unset}.adf-content-node-selector-dialog .mat-dialog-container{padding-left:0;padding-right:0}.adf-content-node-selector-dialog .mat-dialog-content{margin:0;overflow:hidden}.adf-content-node-selector-dialog .mat-dialog-actions{background-color:var(--theme-background-color);color:var(--theme-foreground-text-color);display:flex;flex-direction:row;height:61px;justify-content:space-between;padding:8px}.adf-content-node-selector-dialog .mat-dialog-actions button{font-weight:400;text-transform:uppercase}.adf-content-node-selector-dialog .mat-dialog-actions .adf-choose-action[disabled]{color:var(--theme-secondary-text-color)}.adf-content-node-selector-dialog .mat-dialog-actions .adf-choose-action:enabled{color:var(--theme-primary-color)}"], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ContentNodeSelectorComponent, [{
        type: i0.Component,
        args: [{
                selector: 'adf-content-node-selector',
                template: "<header\n    mat-dialog-title\n    data-automation-id=\"content-node-selector-title\">\n    <h2>{{title}}</h2>\n</header>\n\n<mat-tab-group class=\"adf-content-node-selector-dialog-content\"\n               mat-align-tabs=\"start\"\n               (selectedIndexChange)=\"onTabSelectionChange($event)\"\n               [class.adf-content-node-selector-headless-tabs]=\"!canPerformLocalUpload()\">\n    <mat-tab label=\"{{ 'NODE_SELECTOR.REPOSITORY' | translate }}\">\n            <adf-content-node-selector-panel\n                [currentFolderId]=\"data?.currentFolderId\"\n                [restrictRootToCurrentFolderId]=\"data?.restrictRootToCurrentFolderId\"\n                [dropdownHideMyFiles]=\"data?.dropdownHideMyFiles\"\n                [dropdownSiteList]=\"data?.dropdownSiteList\"\n                [rowFilter]=\"data?.rowFilter\"\n                [imageResolver]=\"data?.imageResolver\"\n                [isSelectionValid]=\"data?.isSelectionValid\"\n                [breadcrumbTransform]=\"data?.breadcrumbTransform\"\n                [excludeSiteContent]=\"data?.excludeSiteContent\"\n                [selectionMode]=\"data?.selectionMode\"\n                [where]=\"data?.where\"\n                [showSearch]=\"data?.showSearch\"\n                [showDropdownSiteList]=\"data?.showDropdownSiteList\"\n                [showFilesInResult]=\"data?.showFilesInResult\"\n                [showNodeCounter]=\"isCounterVisible()\"\n                (currentFolder)=\"onCurrentFolder($event)\"\n                (folderLoaded)=\"onFolderLoaded()\"\n                (select)=\"onSelect($event)\"\n                (showingSearch)=\"onShowingSearch($event)\"\n                (siteChange)=\"onSiteChange($event)\"\n                (navigationChange)=\"onNavigationChange($event)\">\n            </adf-content-node-selector-panel>\n    </mat-tab>\n    <mat-tab *ngIf=\"canPerformLocalUpload()\"\n             [disabled]=\"isNotAllowedToUpload()\">\n        <div class=\"adf-content-node-selector-local-upload-container\">\n            <div class=\"adf-content-node-selector-local-upload-header\">\n                <adf-toolbar>\n                    <adf-toolbar-title>\n                        <adf-dropdown-breadcrumb\n                            class=\"adf-content-node-selector-content-breadcrumb\"\n                            [folderNode]=\"breadcrumbFolderNode\"\n                            [rootId]=\"data?.currentFolderId\"\n                            [readOnly]=\"true\"\n                            data-automation-id=\"content-node-selector-upload-breadcrumb\"\n                        ></adf-dropdown-breadcrumb>\n                        <ng-container *ngIf=\"isCounterVisible()\" [adf-node-counter]=\"getSelectedCount()\"></ng-container>\n                    </adf-toolbar-title>\n                </adf-toolbar>\n                <ng-template mat-tab-label>\n                    {{ 'NODE_SELECTOR.UPLOAD_FROM_DEVICE' | translate }}\n                    <mat-icon *ngIf=\"hasUploadError()\"\n                              data-automation-id=\"adf-content-node-selector-disabled-tab-info-icon\"\n                              matTooltip=\"{{ getWarningMessage() | translate }}\">info\n                    </mat-icon>\n                </ng-template>\n            </div>\n            <div class=\"adf-content-node-selector-local-upload-content\">\n                <adf-upload-drag-area [rootFolderId]=\"currentDirectoryId\">\n                    <div [class.adf-upload-dialog-container]=\"uploadStarted\">\n                        <adf-file-uploading-dialog [alwaysVisible]=\"true\"></adf-file-uploading-dialog>\n                    </div>\n                    <adf-empty-list data-automation-id=\"adf-empty-list\" *ngIf=\"!uploadStarted\">\n                        <div class=\"adf-empty-list_template adf-empty-folder\">\n                            <div fxHide.lt-md=\"true\"\n                                 class=\"adf-empty-folder-drag-drop\">{{ 'ADF-DATATABLE.EMPTY.DRAG-AND-DROP.TITLE' | translate }}</div>\n                            <div fxHide.lt-md=\"true\"\n                                 class=\"adf-empty-folder-any-files-here-to-add\">{{ 'ADF-DATATABLE.EMPTY.DRAG-AND-DROP.SUBTITLE' | translate }}</div>\n                            <img [alt]=\"'ADF-DATATABLE.EMPTY.DRAG-AND-DROP.TITLE' | translate\" class=\"adf-empty-folder-image\"\n                                 [src]=\"emptyFolderImageUrl\">\n                        </div>\n                    </adf-empty-list>\n                </adf-upload-drag-area>\n            </div>\n        </div>\n    </mat-tab>\n</mat-tab-group>\n\n<mat-dialog-actions>\n    <div>\n        <ng-container *ngIf=\"isUploadEnabled()\">\n            <adf-upload-button\n                [staticTitle]=\"'FORM.FIELD.UPLOAD' | translate \"\n                [multipleFiles]=\"isMultipleSelection()\"\n                [rootFolderId]=\"currentDirectoryId\"\n                [disabled]=\"isNotAllowedToUpload()\"\n                (error)=\"onError($event)\">\n            </adf-upload-button>\n        </ng-container>\n    </div>\n    <div>\n        <button\n            mat-button\n            (click)=\"close()\"\n            data-automation-id=\"content-node-selector-actions-cancel\">{{ 'NODE_SELECTOR.CANCEL' | translate }}\n        </button>\n\n        <button mat-button\n                [disabled]=\"isChooseButtonDisabled()\"\n                class=\"adf-choose-action\"\n                (click)=\"onClick()\"\n                data-automation-id=\"content-node-selector-actions-choose\">{{ buttonActionName | translate }}\n        </button>\n    </div>\n</mat-dialog-actions>\n",
                encapsulation: i0.ViewEncapsulation.None,
                styles: ["adf-content-node-selector .adf-content-node-selector-headless-tabs .mat-tab-header{display:none}adf-content-node-selector .adf-upload-dialog{bottom:unset;box-shadow:none;height:100%;position:unset;width:100%}adf-content-node-selector .adf-upload-dialog__content{max-height:64%}adf-content-node-selector .adf-upload-dialog-container{height:380px}adf-content-node-selector .adf-toolbar-title{place-items:center}adf-content-node-selector .adf-content-node-selector-local-upload-content{height:368px}adf-content-node-selector .adf-content-node-selector-local-upload-content adf-upload-drag-area adf-empty-list .adf-empty-folder-drag-drop{font-size:40px;min-height:46px}adf-content-node-selector .adf-content-node-selector-local-upload-content adf-upload-drag-area adf-empty-list .adf-empty-folder-image{height:100px;width:460px}.adf-content-node-selector-dialog-content{padding-left:24px;padding-right:24px}.adf-content-node-selector-dialog .mat-dialog-title{color:var(--theme-text-bold-color);font-size:20px;font-stretch:normal;font-style:normal;font-weight:600;letter-spacing:-.5px;line-height:1.6;margin-left:24px;margin-right:24px}.adf-content-node-selector-dialog .mat-dialog-title h2{font-size:unset;margin:unset}.adf-content-node-selector-dialog .mat-dialog-container{padding-left:0;padding-right:0}.adf-content-node-selector-dialog .mat-dialog-content{margin:0;overflow:hidden}.adf-content-node-selector-dialog .mat-dialog-actions{background-color:var(--theme-background-color);color:var(--theme-foreground-text-color);display:flex;flex-direction:row;height:61px;justify-content:space-between;padding:8px}.adf-content-node-selector-dialog .mat-dialog-actions button{font-weight:400;text-transform:uppercase}.adf-content-node-selector-dialog .mat-dialog-actions .adf-choose-action[disabled]{color:var(--theme-secondary-text-color)}.adf-content-node-selector-dialog .mat-dialog-actions .adf-choose-action:enabled{color:var(--theme-primary-color)}"]
            }]
    }], function () { return [{ type: ɵngcc21.TranslationService }, { type: ɵngcc21.ContentService }, { type: ɵngcc21.NotificationService }, { type: ɵngcc21.UploadService }, { type: ɵngcc3.MatDialogRef }, { type: undefined, decorators: [{
                type: i0.Inject,
                args: [i2.MAT_DIALOG_DATA]
            }] }]; }, null); })();
        return ContentNodeSelectorComponent;
    }());
    ContentNodeSelectorComponent.ctorParameters = function () { return [
        { type: i1.TranslationService },
        { type: i1.ContentService },
        { type: i1.NotificationService },
        { type: i1.UploadService },
        { type: i2.MatDialogRef },
        { type: undefined, decorators: [{ type: i0.Inject, args: [i2.MAT_DIALOG_DATA,] }] }
    ]; };

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var NodeLockDialogComponent = /** @class */ (function () {
        function NodeLockDialogComponent(formBuilder, dialog, alfrescoApi, data) {
            this.formBuilder = formBuilder;
            this.dialog = dialog;
            this.alfrescoApi = alfrescoApi;
            this.data = data;
            this.node = null;
        }
        Object.defineProperty(NodeLockDialogComponent.prototype, "nodesApi", {
            get: function () {
                var _a;
                this._nodesApi = (_a = this._nodesApi) !== null && _a !== void 0 ? _a : new jsApi.NodesApi(this.alfrescoApi.getInstance());
                return this._nodesApi;
            },
            enumerable: false,
            configurable: true
        });
        NodeLockDialogComponent.prototype.ngOnInit = function () {
            var node = this.data.node;
            this.nodeName = node.name;
            this.form = this.formBuilder.group({
                isLocked: node.isLocked || false,
                allowOwner: node.properties['cm:lockType'] === 'WRITE_LOCK',
                isTimeLock: !!node.properties['cm:expiryDate'],
                time: !!node.properties['cm:expiryDate'] ? moment$1(node.properties['cm:expiryDate']) : moment$1()
            });
        };
        Object.defineProperty(NodeLockDialogComponent.prototype, "lockTimeInSeconds", {
            get: function () {
                if (this.form.value.isTimeLock) {
                    var duration = moment$1.duration(moment$1(this.form.value.time).diff(moment$1()));
                    return duration.asSeconds();
                }
                return 0;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NodeLockDialogComponent.prototype, "nodeBodyLock", {
            get: function () {
                return new jsApi.NodeBodyLock({
                    'timeToExpire': this.lockTimeInSeconds,
                    'type': this.form.value.allowOwner ? 'ALLOW_OWNER_CHANGES' : 'FULL',
                    'lifetime': 'PERSISTENT'
                });
            },
            enumerable: false,
            configurable: true
        });
        NodeLockDialogComponent.prototype.toggleLock = function () {
            var node = this.data.node;
            if (this.form.value.isLocked) {
                return this.nodesApi.lockNode(node.id, this.nodeBodyLock);
            }
            return this.nodesApi.unlockNode(node.id);
        };
        NodeLockDialogComponent.prototype.submit = function () {
            var _this = this;
            this.toggleLock()
                .then(function (node) {
                _this.data.node.isLocked = _this.form.value.isLocked;
                _this.dialog.close(node.entry);
            })
                .catch(function (error) { return _this.data.onError(error); });
        };
NodeLockDialogComponent.ɵfac = function NodeLockDialogComponent_Factory(t) { return new (t || NodeLockDialogComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc26.FormBuilder), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.MatDialogRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc21.AlfrescoApiService), ɵngcc0.ɵɵdirectiveInject(i2.MAT_DIALOG_DATA, 8)); };
NodeLockDialogComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: NodeLockDialogComponent, selectors: [["adf-node-lock"]], decls: 22, vars: 17, consts: [["mat-dialog-title", ""], [3, "formGroup", "submit"], ["data-automation-id", "adf-lock-node-checkbox", "ngDefaultControl", "", 1, "adf-lock-file-name", 3, "matTooltip", "formControlName"], [4, "ngIf"], [1, "adf-dialog-buttons"], [1, "adf-fill-remaining-space"], ["mat-button", "", "mat-dialog-close", "", "data-automation-id", "lock-dialog-btn-cancel"], ["mat-button", "", 1, "adf-dialog-action-button", 3, "click"], ["ngDefaultControl", "", 1, "adf-lock-file-name", 3, "formControlName"], ["matSuffix", "", 3, "for"], ["type", "datetime", 3, "openOnFocus", "timeInterval"], ["datetimePicker", ""], ["matInput", "", "required", "", "autocomplete", "false", 3, "formControlName", "matDatetimepicker"]], template: function NodeLockDialogComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "h2", 0);
        ɵngcc0.ɵɵtext(1);
        ɵngcc0.ɵɵpipe(2, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(3, "mat-dialog-content");
        ɵngcc0.ɵɵelement(4, "br");
        ɵngcc0.ɵɵelementStart(5, "form", 1);
        ɵngcc0.ɵɵlistener("submit", function NodeLockDialogComponent_Template_form_submit_5_listener() { return ctx.submit(); });
        ɵngcc0.ɵɵelementStart(6, "mat-checkbox", 2);
        ɵngcc0.ɵɵtext(7);
        ɵngcc0.ɵɵpipe(8, "translate");
        ɵngcc0.ɵɵelementStart(9, "strong");
        ɵngcc0.ɵɵtext(10);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(11, "br");
        ɵngcc0.ɵɵtemplate(12, NodeLockDialogComponent_div_12_Template, 10, 9, "div", 3);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(13, "br");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(14, "mat-dialog-actions", 4);
        ɵngcc0.ɵɵelement(15, "span", 5);
        ɵngcc0.ɵɵelementStart(16, "button", 6);
        ɵngcc0.ɵɵtext(17);
        ɵngcc0.ɵɵpipe(18, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(19, "button", 7);
        ɵngcc0.ɵɵlistener("click", function NodeLockDialogComponent_Template_button_click_19_listener() { return ctx.submit(); });
        ɵngcc0.ɵɵtext(20);
        ɵngcc0.ɵɵpipe(21, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 9, "CORE.FILE_DIALOG.FILE_LOCK"), "\n");
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵproperty("formGroup", ctx.form);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵpropertyInterpolate("matTooltip", ctx.nodeName);
        ɵngcc0.ɵɵproperty("formControlName", "isLocked");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(8, 11, "CORE.FILE_DIALOG.FILE_LOCK_CHECKBOX"), " ");
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵtextInterpolate1("\"", ctx.nodeName, "\"");
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.form.value.isLocked);
        ɵngcc0.ɵɵadvance(5);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(18, 13, "CORE.FILE_DIALOG.CANCEL_BUTTON.LABEL"), " ");
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(21, 15, "CORE.FILE_DIALOG.SAVE_BUTTON.LABEL"), " ");
    } }, directives: [ɵngcc3.MatDialogTitle, ɵngcc3.MatDialogContent, ɵngcc26.ɵangular_packages_forms_forms_y, ɵngcc26.NgControlStatusGroup, ɵngcc26.FormGroupDirective, ɵngcc14.MatCheckbox, ɵngcc26.DefaultValueAccessor, ɵngcc24.MatTooltip, ɵngcc26.NgControlStatus, ɵngcc26.FormControlName, ɵngcc23.NgIf, ɵngcc3.MatDialogActions, ɵngcc1.MatButton, ɵngcc3.MatDialogClose, ɵngcc27.MatFormField, ɵngcc28.MatDatetimepickerToggle, ɵngcc27.MatSuffix, ɵngcc28.MatDatetimepicker, ɵngcc6.MatInput, ɵngcc28.MatDatetimepickerInput, ɵngcc26.RequiredValidator], pipes: [ɵngcc25.TranslatePipe], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NodeLockDialogComponent, [{
        type: i0.Component,
        args: [{
                selector: 'adf-node-lock',
                template: "<h2 mat-dialog-title>\n    {{ 'CORE.FILE_DIALOG.FILE_LOCK' | translate }}\n</h2>\n\n<mat-dialog-content>\n    <br />\n    <form [formGroup]=\"form\" (submit)=\"submit()\">\n        <mat-checkbox  data-automation-id=\"adf-lock-node-checkbox\" class=\"adf-lock-file-name\" matTooltip=\"{{ nodeName }}\" [formControlName]=\"'isLocked'\" ngDefaultControl>\n            {{ 'CORE.FILE_DIALOG.FILE_LOCK_CHECKBOX' | translate }} <strong>\"{{ nodeName }}\"</strong>\n        </mat-checkbox>\n\n        <br />\n\n        <div *ngIf=\"form.value.isLocked\">\n            <mat-checkbox class=\"adf-lock-file-name\" [formControlName]=\"'allowOwner'\" ngDefaultControl>\n                {{ 'CORE.FILE_DIALOG.ALLOW_OTHERS_CHECKBOX' | translate }}\n            </mat-checkbox>\n\n            <br />\n\n            <mat-checkbox class=\"adf-lock-file-name\" [formControlName]=\"'isTimeLock'\" ngDefaultControl>\n                {{ 'CORE.FILE_DIALOG.TIME_LOCK_CHECKBOX' | translate }}\n            </mat-checkbox>\n\n            <br />\n\n            <mat-form-field *ngIf=\"form.value.isTimeLock\">\n                <mat-datetimepicker-toggle [for]=\"datetimePicker\" matSuffix></mat-datetimepicker-toggle>\n                <mat-datetimepicker #datetimePicker type=\"datetime\" [openOnFocus]=\"true\" [timeInterval]=\"1\"></mat-datetimepicker>\n                <input matInput [formControlName]=\"'time'\" [matDatetimepicker]=\"datetimePicker\" required autocomplete=\"false\">\n            </mat-form-field>\n        </div>\n    </form>\n    <br />\n</mat-dialog-content>\n\n<mat-dialog-actions class=\"adf-dialog-buttons\">\n    <span class=\"adf-fill-remaining-space\"></span>\n\n    <button mat-button mat-dialog-close data-automation-id=\"lock-dialog-btn-cancel\">\n        {{ 'CORE.FILE_DIALOG.CANCEL_BUTTON.LABEL' | translate }}\n    </button>\n\n    <button class=\"adf-dialog-action-button\" mat-button (click)=\"submit()\">\n        {{ 'CORE.FILE_DIALOG.SAVE_BUTTON.LABEL' | translate }}\n    </button>\n</mat-dialog-actions>\n",
                encapsulation: i0.ViewEncapsulation.None
            }]
    }], function () { return [{ type: ɵngcc26.FormBuilder }, { type: ɵngcc3.MatDialogRef }, { type: ɵngcc21.AlfrescoApiService }, { type: undefined, decorators: [{
                type: i0.Optional
            }, {
                type: i0.Inject,
                args: [i2.MAT_DIALOG_DATA]
            }] }]; }, null); })();
        return NodeLockDialogComponent;
    }());
    NodeLockDialogComponent.ctorParameters = function () { return [
        { type: forms.FormBuilder },
        { type: i2.MatDialogRef },
        { type: i1.AlfrescoApiService },
        { type: undefined, decorators: [{ type: i0.Optional }, { type: i0.Inject, args: [i2.MAT_DIALOG_DATA,] }] }
    ]; };

    var ContentNodeDialogService = /** @class */ (function () {
        function ContentNodeDialogService(dialog, contentService, documentListService, siteService, translation, thumbnailService) {
            this.dialog = dialog;
            this.contentService = contentService;
            this.documentListService = documentListService;
            this.siteService = siteService;
            this.translation = translation;
            this.thumbnailService = thumbnailService;
            this.error = new i0.EventEmitter();
        }
        ContentNodeDialogService.prototype.openFileBrowseDialogByFolderId = function (folderNodeId) {
            var _this = this;
            return this.documentListService.getFolderNode(folderNodeId).pipe(operators.switchMap(function (nodeEntry) {
                return _this.openUploadFileDialog(exports.NodeAction.CHOOSE, nodeEntry.entry, true);
            }));
        };
        ContentNodeDialogService.prototype.openLockNodeDialog = function (contentEntry) {
            var _this = this;
            var observable = new rxjs.Subject();
            if (this.contentService.hasAllowableOperations(contentEntry, i1.AllowableOperationsEnum.LOCK)) {
                this.dialog.open(NodeLockDialogComponent, {
                    data: {
                        node: contentEntry,
                        onError: function (error) {
                            _this.error.emit(error);
                            observable.error(error);
                        }
                    },
                    width: '400px'
                });
            }
            else {
                observable.error('OPERATION.FAIL.NODE.NO_PERMISSION');
            }
            return observable;
        };
        ContentNodeDialogService.prototype.openFileBrowseDialogBySite = function () {
            var _this = this;
            return this.siteService.getSites().pipe(operators.switchMap(function (response) {
                return _this.openFileBrowseDialogByFolderId(response.list.entries[0].entry.guid);
            }));
        };
        ContentNodeDialogService.prototype.openFileBrowseDialogByDefaultLocation = function () {
            return this.openFileBrowseDialogByFolderId('-my-');
        };
        ContentNodeDialogService.prototype.openFolderBrowseDialogBySite = function () {
            return this.openFolderBrowseDialogByFolderId('-my-');
        };
        ContentNodeDialogService.prototype.openFolderBrowseDialogByFolderId = function (folderNodeId) {
            var _this = this;
            return this.documentListService.getFolderNode(folderNodeId).pipe(operators.switchMap(function (node) {
                return _this.openUploadFolderDialog(exports.NodeAction.CHOOSE, node.entry);
            }));
        };
        ContentNodeDialogService.prototype.openCopyMoveDialog = function (action, contentEntry, permission, excludeSiteContent) {
            if (this.contentService.hasAllowableOperations(contentEntry, permission)) {
                var select_1 = new rxjs.Subject();
                var data = {
                    title: this.getTitleTranslation(action, contentEntry.name),
                    actionName: action,
                    selectionMode: 'single',
                    currentFolderId: contentEntry.parentId,
                    imageResolver: this.imageResolver.bind(this),
                    where: '(isFolder=true)',
                    isSelectionValid: this.isCopyMoveSelectionValid.bind(this),
                    excludeSiteContent: excludeSiteContent || ContentNodeDialogService.nonDocumentSiteContent,
                    select: select_1
                };
                var dialogRef = this.openContentNodeDialog(data, 'adf-content-node-selector-dialog', '630px');
                dialogRef.afterClosed().subscribe({ next: function () { return select_1.complete(); } });
                return select_1;
            }
            else {
                var errors = new Error(JSON.stringify({ error: { statusCode: 403 } }));
                return rxjs.throwError(errors);
            }
        };
        ContentNodeDialogService.prototype.getTitleTranslation = function (action, name) {
            return this.translation.instant("NODE_SELECTOR." + action.toUpperCase() + "_ITEM", { name: name });
        };
        ContentNodeDialogService.prototype.openUploadFolderDialog = function (action, contentEntry) {
            var select = new rxjs.Subject();
            var data = {
                title: this.getTitleTranslation(action, this.translation.instant('DROPDOWN.MY_FILES_OPTION')),
                actionName: action,
                selectionMode: 'single',
                currentFolderId: contentEntry.id,
                imageResolver: this.imageResolver.bind(this),
                isSelectionValid: this.hasAllowableOperationsOnNodeFolder.bind(this),
                where: '(isFolder=true)',
                select: select
            };
            var dialogRef = this.openContentNodeDialog(data, 'adf-content-node-selector-dialog', '630px');
            dialogRef.afterClosed().subscribe({ next: function () { return select.complete(); } });
            return select;
        };
        ContentNodeDialogService.prototype.openUploadFileDialog = function (action, contentEntry, showFilesInResult) {
            if (showFilesInResult === void 0) { showFilesInResult = false; }
            var select = new rxjs.Subject();
            var data = {
                title: this.getTitleTranslation(action, this.translation.instant('DROPDOWN.MY_FILES_OPTION')),
                actionName: action,
                selectionMode: 'single',
                currentFolderId: contentEntry.id,
                imageResolver: this.imageResolver.bind(this),
                isSelectionValid: function (entry) { return entry.isFile; },
                select: select,
                showFilesInResult: showFilesInResult
            };
            var dialogRef = this.openContentNodeDialog(data, 'adf-content-node-selector-dialog', '630px');
            dialogRef.afterClosed().subscribe({ next: function () { return select.complete(); } });
            return select;
        };
        ContentNodeDialogService.prototype.openContentNodeDialog = function (data, panelClass, width) {
            return this.dialog.open(ContentNodeSelectorComponent, {
                data: data,
                panelClass: panelClass,
                width: width,
                disableClose: true
            });
        };
        ContentNodeDialogService.prototype.imageResolver = function (row) {
            var entry = row.node.entry;
            if (!this.contentService.hasAllowableOperations(entry, 'create')) {
                if (this.isNodeFolder(entry)) {
                    return this.thumbnailService.getMimeTypeIcon('disable/folder');
                }
            }
            return null;
        };
        ContentNodeDialogService.prototype.hasAllowableOperationsOnNodeFolder = function (entry) {
            return this.isNodeFolder(entry) && this.contentService.hasAllowableOperations(entry, 'create');
        };
        ContentNodeDialogService.prototype.isNodeFolder = function (entry) {
            return entry.isFolder;
        };
        ContentNodeDialogService.prototype.isCopyMoveSelectionValid = function (entry) {
            return this.hasEntityCreatePermission(entry) && !this.isSite(entry);
        };
        ContentNodeDialogService.prototype.hasEntityCreatePermission = function (entry) {
            return this.contentService.hasAllowableOperations(entry, 'create');
        };
        ContentNodeDialogService.prototype.isSite = function (entry) {
            return !!entry.guid || entry.nodeType === 'st:site' || entry.nodeType === 'st:sites';
        };
ContentNodeDialogService.ɵfac = function ContentNodeDialogService_Factory(t) { return new (t || ContentNodeDialogService)(ɵngcc0.ɵɵinject(ɵngcc3.MatDialog), ɵngcc0.ɵɵinject(ɵngcc21.ContentService), ɵngcc0.ɵɵinject(DocumentListService), ɵngcc0.ɵɵinject(ɵngcc21.SitesService), ɵngcc0.ɵɵinject(ɵngcc21.TranslationService), ɵngcc0.ɵɵinject(ɵngcc21.ThumbnailService)); };
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ContentNodeDialogService, [{
        type: i0.Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc3.MatDialog }, { type: ɵngcc21.ContentService }, { type: DocumentListService }, { type: ɵngcc21.SitesService }, { type: ɵngcc21.TranslationService }, { type: ɵngcc21.ThumbnailService }]; }, { error: [{
            type: i0.Output
        }] }); })();
        return ContentNodeDialogService;
    }());
    ContentNodeDialogService.nonDocumentSiteContent = [
        'blog',
        'calendar',
        'dataLists',
        'discussions',
        'links',
        'wiki'
    ];
    ContentNodeDialogService.ɵprov = i0.ɵɵdefineInjectable({ factory: function ContentNodeDialogService_Factory() { return new ContentNodeDialogService(i0.ɵɵinject(i2.MatDialog), i0.ɵɵinject(i1.ContentService), i0.ɵɵinject(DocumentListService), i0.ɵɵinject(i1.SitesService), i0.ɵɵinject(i1.TranslationService), i0.ɵɵinject(i1.ThumbnailService)); }, token: ContentNodeDialogService, providedIn: "root" });
    ContentNodeDialogService.ctorParameters = function () { return [
        { type: i2.MatDialog },
        { type: i1.ContentService },
        { type: DocumentListService },
        { type: i1.SitesService },
        { type: i1.TranslationService },
        { type: i1.ThumbnailService }
    ]; };
    ContentNodeDialogService.propDecorators = {
        error: [{ type: i0.Output }]
    };

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var NodeLockDirective = /** @class */ (function () {
        function NodeLockDirective(element, renderer, contentService, contentNodeDialogService) {
            this.element = element;
            this.renderer = renderer;
            this.contentService = contentService;
            this.contentNodeDialogService = contentNodeDialogService;
        }
        NodeLockDirective.prototype.onClick = function (event) {
            event.stopPropagation();
            this.contentNodeDialogService.openLockNodeDialog(this.node);
        };
        NodeLockDirective.prototype.ngAfterViewInit = function () {
            var hasAllowableOperations = this.contentService.hasAllowableOperations(this.node, i1.AllowableOperationsEnum.LOCK);
            this.renderer.setProperty(this.element.nativeElement, 'disabled', !hasAllowableOperations);
        };
NodeLockDirective.ɵfac = function NodeLockDirective_Factory(t) { return new (t || NodeLockDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc21.ContentService), ɵngcc0.ɵɵdirectiveInject(ContentNodeDialogService)); };
NodeLockDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: NodeLockDirective, selectors: [["", "adf-node-lock", ""]], hostBindings: function NodeLockDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function NodeLockDirective_click_HostBindingHandler($event) { return ctx.onClick($event); });
    } }, inputs: { node: ["adf-node-lock", "node"] } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NodeLockDirective, [{
        type: i0.Directive,
        args: [{
                selector: '[adf-node-lock]'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }, { type: ɵngcc21.ContentService }, { type: ContentNodeDialogService }]; }, { onClick: [{
            type: i0.HostListener,
            args: ['click', ['$event']]
        }], node: [{
            type: i0.Input,
            args: ['adf-node-lock']
        }] }); })();
        return NodeLockDirective;
    }());
    NodeLockDirective.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: i0.Renderer2 },
        { type: i1.ContentService },
        { type: ContentNodeDialogService }
    ]; };
    NodeLockDirective.propDecorators = {
        node: [{ type: i0.Input, args: ['adf-node-lock',] }],
        onClick: [{ type: i0.HostListener, args: ['click', ['$event'],] }]
    };

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var NodeCounterDirective = /** @class */ (function () {
        function NodeCounterDirective(resolver, viewContainerRef) {
            this.resolver = resolver;
            this.viewContainerRef = viewContainerRef;
        }
        NodeCounterDirective.prototype.ngOnInit = function () {
            var componentFactory = this.resolver.resolveComponentFactory(NodeCounterComponent);
            this.componentRef = this.viewContainerRef.createComponent(componentFactory).instance;
            this.componentRef.counter = this.counter;
        };
        NodeCounterDirective.prototype.ngOnChanges = function () {
            if (this.componentRef) {
                this.componentRef.counter = this.counter;
            }
        };
NodeCounterDirective.ɵfac = function NodeCounterDirective_Factory(t) { return new (t || NodeCounterDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ComponentFactoryResolver), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
NodeCounterDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: NodeCounterDirective, selectors: [["", "adf-node-counter", ""]], inputs: { counter: ["adf-node-counter", "counter"] }, features: [ɵngcc0.ɵɵNgOnChangesFeature] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NodeCounterDirective, [{
        type: i0.Directive,
        args: [{
                selector: '[adf-node-counter]'
            }]
    }], function () { return [{ type: ɵngcc0.ComponentFactoryResolver }, { type: ɵngcc0.ViewContainerRef }]; }, { counter: [{
            type: i0.Input,
            args: ['adf-node-counter']
        }] }); })();
        return NodeCounterDirective;
    }());
    NodeCounterDirective.ctorParameters = function () { return [
        { type: i0.ComponentFactoryResolver },
        { type: i0.ViewContainerRef }
    ]; };
    NodeCounterDirective.propDecorators = {
        counter: [{ type: i0.Input, args: ['adf-node-counter',] }]
    };
    var NodeCounterComponent = /** @class */ (function () {
        function NodeCounterComponent() {
        }
NodeCounterComponent.ɵfac = function NodeCounterComponent_Factory(t) { return new (t || NodeCounterComponent)(); };
NodeCounterComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: NodeCounterComponent, selectors: [["adf-node-counter"]], decls: 3, vars: 6, template: function NodeCounterComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div");
        ɵngcc0.ɵɵtext(1);
        ɵngcc0.ɵɵpipe(2, "translate");
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind2(2, 1, "NODE_COUNTER.SELECTED_COUNT", ɵngcc0.ɵɵpureFunction1(4, _c0, ctx.counter)));
    } }, pipes: [ɵngcc25.TranslatePipe], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NodeCounterComponent, [{
        type: i0.Component,
        args: [{
                selector: 'adf-node-counter',
                template: "\n        <div>{{ 'NODE_COUNTER.SELECTED_COUNT' | translate: { count: counter } }}</div>\n    "
            }]
    }], function () { return []; }, null); })();
        return NodeCounterComponent;
    }());

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var ContentDirectiveModule = /** @class */ (function () {
        function ContentDirectiveModule() {
        }
ContentDirectiveModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: ContentDirectiveModule });
ContentDirectiveModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function ContentDirectiveModule_Factory(t) { return new (t || ContentDirectiveModule)(); }, imports: [[
            common.CommonModule,
            MaterialModule,
            core$1.TranslateModule
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ContentDirectiveModule, { declarations: [NodeLockDirective, NodeCounterDirective, NodeCounterComponent], imports: [ɵngcc23.CommonModule, MaterialModule, ɵngcc25.TranslateModule], exports: [NodeLockDirective, NodeCounterDirective] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ContentDirectiveModule, [{
        type: i0.NgModule,
        args: [{
                imports: [
                    common.CommonModule,
                    MaterialModule,
                    core$1.TranslateModule
                ],
                declarations: [
                    NodeLockDirective,
                    NodeCounterDirective,
                    NodeCounterComponent
                ],
                exports: [
                    NodeLockDirective,
                    NodeCounterDirective
                ]
            }]
    }], function () { return []; }, null); })();
        return ContentDirectiveModule;
    }());

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    var RatingService = /** @class */ (function () {
        function RatingService(apiService, logService) {
            this.apiService = apiService;
            this.logService = logService;
        }
        Object.defineProperty(RatingService.prototype, "ratingsApi", {
            get: function () {
                var _a;
                this._ratingsApi = (_a = this._ratingsApi) !== null && _a !== void 0 ? _a : new jsApi.RatingsApi(this.apiService.getInstance());
                return this._ratingsApi;
            },
            enumerable: false,
            configurable: true
        });
        RatingService.prototype.getRating = function (nodeId, ratingType) {
            return rxjs.from(this.ratingsApi.getRating(nodeId, ratingType))
                .pipe(operators.catchError(this.handleError));
        };
        RatingService.prototype.postRating = function (nodeId, ratingType, vote) {
            var ratingBody = new jsApi.RatingBody({
                'id': ratingType,
                'myRating': vote
            });
            return rxjs.from(this.ratingsApi.createRating(nodeId, ratingBody))
                .pipe(operators.catchError(this.handleError));
        };
        RatingService.prototype.deleteRating = function (nodeId, ratingType) {
            return rxjs.from(this.ratingsApi.deleteRating(nodeId, ratingType))
                .pipe(operators.catchError(this.handleError));
        };
        RatingService.prototype.handleError = function (error) {
            this.logService.error(error);
            return rxjs.throwError(error || 'Server error');
        };
RatingService.ɵfac = function RatingService_Factory(t) { return new (t || RatingService)(ɵngcc0.ɵɵinject(ɵngcc21.AlfrescoApiService), ɵngcc0.ɵɵinject(ɵngcc21.LogService)); };
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(RatingService, [{
        type: i0.Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc21.AlfrescoApiService }, { type: ɵngcc21.LogService }]; }, null); })();
        return RatingService;
    }());
    RatingService.ɵprov = i0.ɵɵdefineInjectable({ factory: function RatingService_Factory() { return new RatingService(i0.ɵɵinject(i1.AlfrescoApiService), i0.ɵɵinject(i1.LogService)); }, token: RatingService, providedIn: "root" });
    RatingService.ctorParameters = function () { return [
        { type: i1.AlfrescoApiService },
        { type: i1.LogService }
    ]; };

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var RatingComponent = /** @class */ (function () {
        function RatingComponent(ratingService) {
            this.ratingService = ratingService;
            this.average = 0;
            this.ratingsCounter = 0;
            this.ratingType = 'fiveStar';
            this.changeVote = new i0.EventEmitter();
            this.stars = [];
            this.onDestroy$ = new rxjs.Subject();
        }
        RatingComponent.prototype.ngOnChanges = function () {
            var _this = this;
            this.ratingService.getRating(this.nodeId, this.ratingType)
                .pipe(operators.takeUntil(this.onDestroy$))
                .subscribe(function (ratingEntry) {
                _this.refreshRating(ratingEntry);
            });
        };
        RatingComponent.prototype.ngOnDestroy = function () {
            this.onDestroy$.next(true);
            this.onDestroy$.complete();
        };
        RatingComponent.prototype.calculateStars = function () {
            this.stars = [];
            var roundedAverage = Math.round(this.average);
            for (var i = 0; i < 5; i++) {
                if (i < roundedAverage) {
                    this.stars.push({ fill: true });
                }
                else {
                    this.stars.push({ fill: false });
                }
            }
        };
        RatingComponent.prototype.updateVote = function (vote) {
            if (this.ratingValue === vote) {
                this.unRateItem();
            }
            else {
                this.rateItem(vote);
            }
        };
        RatingComponent.prototype.rateItem = function (vote) {
            var _this = this;
            this.ratingService.postRating(this.nodeId, this.ratingType, vote)
                .pipe(operators.takeUntil(this.onDestroy$))
                .subscribe(function (ratingEntry) {
                _this.refreshRating(ratingEntry);
            });
        };
        RatingComponent.prototype.unRateItem = function () {
            var _this = this;
            this.ratingService.deleteRating(this.nodeId, this.ratingType).subscribe(function () {
                _this.ratingService.getRating(_this.nodeId, _this.ratingType)
                    .pipe(operators.takeUntil(_this.onDestroy$))
                    .subscribe(function (ratingEntry) {
                    _this.refreshRating(ratingEntry);
                });
            });
        };
        RatingComponent.prototype.refreshRating = function (ratingEntry) {
            this.ratingValue = Number.parseFloat(ratingEntry.entry.myRating);
            this.average = ratingEntry.entry.aggregate.average;
            this.ratingsCounter = ratingEntry.entry.aggregate.numberOfRatings;
            this.calculateStars();
            this.changeVote.emit(this.average);
        };
RatingComponent.ɵfac = function RatingComponent_Factory(t) { return new (t || RatingComponent)(ɵngcc0.ɵɵdirectiveInject(RatingService)); };
RatingComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: RatingComponent, selectors: [["adf-rating"]], inputs: { nodeId: "nodeId" }, outputs: { changeVote: "changeVote" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 7, vars: 4, consts: [["id", "adf-rating-container", 1, "adf-rating-container"], ["class", "adf-rating-star", 4, "ngFor", "ngForOf"], [1, "adf-rating-counter-container"], ["id", "adf-rating-counter", 1, "adf-rating-counter"], ["class", "adf-rating-left", 4, "ngIf"], [1, "adf-rating-star"], [3, "id"], ["class", "adf-colored-star", 3, "id", "ngClass", "click", 4, "ngIf"], ["class", "adf-grey-star", 3, "id", "click", 4, "ngIf"], [1, "adf-colored-star", 3, "id", "ngClass", "click"], [1, "adf-grey-star", 3, "id", "click"], [1, "adf-rating-left"]], template: function RatingComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "mat-list", 0);
        ɵngcc0.ɵɵtemplate(1, RatingComponent_mat_list_item_1_Template, 4, 3, "mat-list-item", 1);
        ɵngcc0.ɵɵelementStart(2, "div", 2);
        ɵngcc0.ɵɵelementStart(3, "div", 3);
        ɵngcc0.ɵɵtext(4);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(5, RatingComponent_div_5_Template, 2, 0, "div", 4);
        ɵngcc0.ɵɵtemplate(6, RatingComponent_div_6_Template, 2, 0, "div", 4);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.stars);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵtextInterpolate(ctx.ratingsCounter);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.ratingsCounter <= 1);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.ratingsCounter > 1);
    } }, directives: [ɵngcc7.MatList, ɵngcc23.NgForOf, ɵngcc23.NgIf, ɵngcc7.MatListItem, ɵngcc4.MatIcon, ɵngcc23.NgClass], styles: [".adf-rating-container{display:flex;overflow:hidden;width:100%}.adf-rating-container .adf-rating-counter-container{align-items:center;display:flex;padding:0 6px}.adf-rating-container .adf-rating-left{padding:0 6px}.adf-rating-container .adf-rating-star{cursor:pointer;display:flex;justify-content:center;transition:all .3s;width:25px}.adf-rating-container .adf-rating-star .mat-list-item-content{padding:0!important}.adf-rating-container .adf-rating-star:hover{transform:rotate(13deg) scale(1.2)}.adf-rating-container .adf-colored-star{color:#ffe944}.adf-rating-container .adf-average-star,.adf-rating-container .adf-grey-star{color:grey!important}[dir=rtl] .adf-rating-container .adf-rating-star{transform:rotate(145deg)}[dir=rtl] .adf-rating-container .adf-rating-star:hover{transform:rotate(158deg) scale(1.2)}"], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(RatingComponent, [{
        type: i0.Component,
        args: [{
                selector: 'adf-rating',
                template: "<mat-list id=\"adf-rating-container\" class=\"adf-rating-container\">\n    <mat-list-item class=\"adf-rating-star\" *ngFor=\"let currentRate of stars; let idx = index;\">\n            <span id=\"adf-rate-{{idx}}\">\n                <mat-icon id=\"adf-colored-star-{{idx}}\" *ngIf=\"currentRate.fill\" class=\"adf-colored-star\"\n                          [ngClass]=\"{'adf-average-star': !ratingValue}\"\n                          (click)=\"updateVote(idx + 1)\">star_rate\n                </mat-icon>\n                <mat-icon id=\"adf-grey-star-{{idx}}\" *ngIf=\"!currentRate.fill\" class=\"adf-grey-star\"\n                          (click)=\"updateVote(idx + 1)\">star_border\n                </mat-icon>\n            </span>\n    </mat-list-item>\n    <div class=\"adf-rating-counter-container\">\n    <div id=\"adf-rating-counter\" class=\"adf-rating-counter\">{{ratingsCounter}}</div>\n    <div class=\"adf-rating-left\" *ngIf=\"ratingsCounter<=1\">Rating</div>\n    <div class=\"adf-rating-left\" *ngIf=\"ratingsCounter>1\">Ratings</div>\n    </div>\n</mat-list>\n",
                encapsulation: i0.ViewEncapsulation.None,
                styles: [".adf-rating-container{display:flex;overflow:hidden;width:100%}.adf-rating-container .adf-rating-counter-container{align-items:center;display:flex;padding:0 6px}.adf-rating-container .adf-rating-left{padding:0 6px}.adf-rating-container .adf-rating-star{cursor:pointer;display:flex;justify-content:center;transition:all .3s;width:25px}.adf-rating-container .adf-rating-star .mat-list-item-content{padding:0!important}.adf-rating-container .adf-rating-star:hover{transform:rotate(13deg) scale(1.2)}.adf-rating-container .adf-colored-star{color:#ffe944}.adf-rating-container .adf-average-star,.adf-rating-container .adf-grey-star{color:grey!important}[dir=rtl] .adf-rating-container .adf-rating-star{transform:rotate(145deg)}[dir=rtl] .adf-rating-container .adf-rating-star:hover{transform:rotate(158deg) scale(1.2)}"]
            }]
    }], function () { return [{ type: RatingService }]; }, { changeVote: [{
            type: i0.Output
        }], nodeId: [{
            type: i0.Input
        }] }); })();
        return RatingComponent;
    }());
    RatingComponent.ctorParameters = function () { return [
        { type: RatingService }
    ]; };
    RatingComponent.propDecorators = {
        nodeId: [{ type: i0.Input }],
        changeVote: [{ type: i0.Output }]
    };

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var LikeComponent = /** @class */ (function () {
        function LikeComponent(ratingService) {
            this.ratingService = ratingService;
            this.changeVote = new i0.EventEmitter();
            this.likesCounter = 0;
            this.ratingType = 'likes';
            this.isLike = false;
        }
        LikeComponent.prototype.ngOnChanges = function () {
            var _this = this;
            this.clean();
            this.ratingService.getRating(this.nodeId, this.ratingType).subscribe(function (ratingEntry) {
                if (ratingEntry.entry.aggregate) {
                    _this.likesCounter = ratingEntry.entry.aggregate.numberOfRatings;
                    if (ratingEntry.entry.ratedAt) {
                        _this.isLike = true;
                    }
                }
            });
        };
        LikeComponent.prototype.likeClick = function () {
            var _this = this;
            if (this.isLike) {
                this.ratingService.deleteRating(this.nodeId, this.ratingType).subscribe(function () {
                    _this.likesCounter -= 1;
                    _this.isLike = false;
                    _this.changeVote.emit(_this.likesCounter);
                });
            }
            else {
                this.ratingService.postRating(this.nodeId, this.ratingType, true).subscribe(function (ratingEntry) {
                    _this.likesCounter = ratingEntry.entry.aggregate.numberOfRatings;
                    _this.isLike = true;
                    _this.changeVote.emit(_this.likesCounter);
                });
            }
        };
        LikeComponent.prototype.clean = function () {
            this.isLike = false;
            this.likesCounter = 0;
        };
LikeComponent.ɵfac = function LikeComponent_Factory(t) { return new (t || LikeComponent)(ɵngcc0.ɵɵdirectiveInject(RatingService)); };
LikeComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: LikeComponent, selectors: [["adf-like"]], inputs: { nodeId: "nodeId" }, outputs: { changeVote: "changeVote" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 10, vars: 8, consts: [["id", "adf-like-container", 1, "adf-like-container"], [1, "adf-like"], [3, "id", "ngClass", "click"], [1, "adf-like-counter-container"], ["id", "adf-like-counter", 1, "adf-like-counter"], ["class", "adf-left", 4, "ngIf"], [1, "adf-left"]], template: function LikeComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "div", 1);
        ɵngcc0.ɵɵelementStart(2, "span", 2);
        ɵngcc0.ɵɵlistener("click", function LikeComponent_Template_span_click_2_listener() { return ctx.likeClick(); });
        ɵngcc0.ɵɵelementStart(3, "mat-icon");
        ɵngcc0.ɵɵtext(4, "thumb_up");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(5, "div", 3);
        ɵngcc0.ɵɵelementStart(6, "div", 4);
        ɵngcc0.ɵɵtext(7);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(8, LikeComponent_div_8_Template, 2, 0, "div", 5);
        ɵngcc0.ɵɵtemplate(9, LikeComponent_div_9_Template, 2, 0, "div", 5);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵpropertyInterpolate1("id", "adf-like-", ctx.nodeId, "");
        ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction2(5, _c2, ctx.isLike, !ctx.isLike));
        ɵngcc0.ɵɵadvance(5);
        ɵngcc0.ɵɵtextInterpolate(ctx.likesCounter);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.likesCounter <= 1);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.likesCounter > 1);
    } }, directives: [ɵngcc23.NgClass, ɵngcc4.MatIcon, ɵngcc23.NgIf], styles: [".adf-like-container{align-items:center;display:flex;margin-top:13px;overflow:hidden;width:100%}.adf-like-container .adf-like-counter-container{display:inherit;padding:0 6px}.adf-like-container .adf-left{padding:0 6px}.adf-like-container .adf-like-select{color:#2196f3;cursor:pointer}.adf-like-container .adf-like-select:hover{color:grey}.adf-like-container .adf-like-grey{color:grey;cursor:pointer}.adf-like-container .adf-like-grey:hover{color:#2196f3}"], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(LikeComponent, [{
        type: i0.Component,
        args: [{
                selector: 'adf-like',
                template: "<div id=\"adf-like-container\" class=\"adf-like-container\">\n    <div class=\"adf-like\">\n        <span id=\"adf-like-{{nodeId}}\" [ngClass]=\"{'adf-like-select': isLike ,'adf-like-grey': !isLike  }\"\n              (click)=\"likeClick()\">\n            <mat-icon>thumb_up</mat-icon>\n        </span>\n    </div>\n    <div class=\"adf-like-counter-container\">\n        <div id=\"adf-like-counter\" class=\"adf-like-counter\">{{likesCounter}}</div>\n        <div class=\"adf-left\" *ngIf=\"likesCounter<=1\">Like</div>\n        <div class=\"adf-left\" *ngIf=\"likesCounter>1\">Likes</div>\n    </div>\n</div>\n",
                encapsulation: i0.ViewEncapsulation.None,
                styles: [".adf-like-container{align-items:center;display:flex;margin-top:13px;overflow:hidden;width:100%}.adf-like-container .adf-like-counter-container{display:inherit;padding:0 6px}.adf-like-container .adf-left{padding:0 6px}.adf-like-container .adf-like-select{color:#2196f3;cursor:pointer}.adf-like-container .adf-like-select:hover{color:grey}.adf-like-container .adf-like-grey{color:grey;cursor:pointer}.adf-like-container .adf-like-grey:hover{color:#2196f3}"]
            }]
    }], function () { return [{ type: RatingService }]; }, { changeVote: [{
            type: i0.Output
        }], nodeId: [{
            type: i0.Input
        }] }); })();
        return LikeComponent;
    }());
    LikeComponent.ctorParameters = function () { return [
        { type: RatingService }
    ]; };
    LikeComponent.propDecorators = {
        nodeId: [{ type: i0.Input }],
        changeVote: [{ type: i0.Output }]
    };

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var SocialModule = /** @class */ (function () {
        function SocialModule() {
        }
SocialModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: SocialModule });
SocialModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function SocialModule_Factory(t) { return new (t || SocialModule)(); }, imports: [[
            common.CommonModule,
            MaterialModule
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(SocialModule, { declarations: [RatingComponent, LikeComponent], imports: [ɵngcc23.CommonModule, MaterialModule], exports: [RatingComponent, LikeComponent] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SocialModule, [{
        type: i0.NgModule,
        args: [{
                imports: [
                    common.CommonModule,
                    MaterialModule
                ],
                exports: [
                    RatingComponent,
                    LikeComponent
                ],
                declarations: [
                    RatingComponent,
                    LikeComponent
                ]
            }]
    }], function () { return []; }, null); })();
        return SocialModule;
    }());

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    var TagService = /** @class */ (function () {
        function TagService(apiService, logService) {
            this.apiService = apiService;
            this.logService = logService;
            this.refresh = new i0.EventEmitter();
        }
        Object.defineProperty(TagService.prototype, "tagsApi", {
            get: function () {
                var _a;
                this._tagsApi = (_a = this._tagsApi) !== null && _a !== void 0 ? _a : new jsApi.TagsApi(this.apiService.getInstance());
                return this._tagsApi;
            },
            enumerable: false,
            configurable: true
        });
        TagService.prototype.getTagsByNodeId = function (nodeId) {
            var _this = this;
            return rxjs.from(this.tagsApi.listTagsForNode(nodeId)).pipe(operators.catchError(function (err) { return _this.handleError(err); }));
        };
        TagService.prototype.getAllTheTags = function (opts) {
            var _this = this;
            return rxjs.from(this.tagsApi.listTags(opts))
                .pipe(operators.catchError(function (err) { return _this.handleError(err); }));
        };
        TagService.prototype.addTag = function (nodeId, tagName) {
            var _this = this;
            var tagBody = new jsApi.TagBody();
            tagBody.tag = tagName;
            var observableAdd = rxjs.from(this.tagsApi.createTagForNode(nodeId, [tagBody]));
            observableAdd.subscribe(function (tagEntry) {
                _this.refresh.emit(tagEntry);
            }, function (err) {
                _this.handleError(err);
            });
            return observableAdd;
        };
        TagService.prototype.removeTag = function (nodeId, tag) {
            var _this = this;
            var observableRemove = rxjs.from(this.tagsApi.deleteTagFromNode(nodeId, tag));
            observableRemove.subscribe(function (data) {
                _this.refresh.emit(data);
            }, function (err) {
                _this.handleError(err);
            });
            return observableRemove;
        };
        TagService.prototype.handleError = function (error) {
            this.logService.error(error);
            return rxjs.throwError(error || 'Server error');
        };
TagService.ɵfac = function TagService_Factory(t) { return new (t || TagService)(ɵngcc0.ɵɵinject(ɵngcc21.AlfrescoApiService), ɵngcc0.ɵɵinject(ɵngcc21.LogService)); };
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TagService, [{
        type: i0.Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc21.AlfrescoApiService }, { type: ɵngcc21.LogService }]; }, { refresh: [{
            type: i0.Output
        }] }); })();
        return TagService;
    }());
    TagService.ɵprov = i0.ɵɵdefineInjectable({ factory: function TagService_Factory() { return new TagService(i0.ɵɵinject(i1.AlfrescoApiService), i0.ɵɵinject(i1.LogService)); }, token: TagService, providedIn: "root" });
    TagService.ctorParameters = function () { return [
        { type: i1.AlfrescoApiService },
        { type: i1.LogService }
    ]; };
    TagService.propDecorators = {
        refresh: [{ type: i0.Output }]
    };

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var TagActionsComponent = /** @class */ (function () {
        function TagActionsComponent(tagService, translateService) {
            this.tagService = tagService;
            this.translateService = translateService;
            this.successAdd = new i0.EventEmitter();
            this.error = new i0.EventEmitter();
            this.result = new i0.EventEmitter();
            this.disableAddTag = true;
            this.onDestroy$ = new rxjs.Subject();
        }
        TagActionsComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.tagService.refresh
                .pipe(operators.takeUntil(this.onDestroy$))
                .subscribe(function () { return _this.refreshTag(); });
        };
        TagActionsComponent.prototype.ngOnChanges = function () {
            return this.refreshTag();
        };
        TagActionsComponent.prototype.ngOnDestroy = function () {
            this.onDestroy$.next(true);
            this.onDestroy$.complete();
        };
        TagActionsComponent.prototype.refreshTag = function () {
            var _this = this;
            if (this.nodeId) {
                this.tagService.getTagsByNodeId(this.nodeId).subscribe(function (tagPaging) {
                    _this.tagsEntries = tagPaging.list.entries;
                    _this.disableAddTag = false;
                    _this.result.emit(_this.tagsEntries);
                }, function () {
                    _this.tagsEntries = null;
                    _this.disableAddTag = true;
                    _this.result.emit(_this.tagsEntries);
                });
            }
        };
        TagActionsComponent.prototype.addTag = function () {
            var _this = this;
            if (this.searchTag(this.newTagName)) {
                this.errorMsg = this.translateService.instant('TAG.MESSAGES.EXIST');
                this.error.emit(this.errorMsg);
            }
            else {
                this.tagService.addTag(this.nodeId, this.newTagName).subscribe(function () {
                    _this.newTagName = '';
                    _this.successAdd.emit(_this.nodeId);
                });
            }
        };
        TagActionsComponent.prototype.searchTag = function (searchTagName) {
            if (this.tagsEntries) {
                return this.tagsEntries.find(function (currentTag) {
                    return (searchTagName === currentTag.entry.tag);
                });
            }
        };
        TagActionsComponent.prototype.cleanErrorMsg = function () {
            this.errorMsg = '';
        };
        TagActionsComponent.prototype.removeTag = function (tag) {
            this.tagService.removeTag(this.nodeId, tag);
        };
TagActionsComponent.ɵfac = function TagActionsComponent_Factory(t) { return new (t || TagActionsComponent)(ɵngcc0.ɵɵdirectiveInject(TagService), ɵngcc0.ɵɵdirectiveInject(ɵngcc21.TranslationService)); };
TagActionsComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: TagActionsComponent, selectors: [["adf-tag-node-actions-list"]], hostAttrs: [1, "adf-tag-node-actions-list"], inputs: { nodeId: "nodeId" }, outputs: { successAdd: "successAdd", error: "error", result: "result" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 13, vars: 10, consts: [[4, "ngFor", "ngForOf"], ["cellspacing", "0", 1, "adf-full-width"], [1, "adf-full-width"], ["id", "new-tag-text", "matInput", "", "type", "text", 3, "placeholder", "ngModel", "keypress", "ngModelChange"], ["data-automation-id", "errorMessage", "align", "start", 3, "ngStyle", 4, "ngIf"], ["id", "add-tag", "color", "primary", "mat-raised-button", "", 1, "adf-full-width", 3, "disabled", "click"], [1, "adf-tag-actions-container", 3, "id", "click"], [1, "adf-tag-actions-delete-text", 3, "id"], [1, "adf-tag-actions-delete-icon"], ["data-automation-id", "errorMessage", "align", "start", 3, "ngStyle"]], template: function TagActionsComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "mat-list");
        ɵngcc0.ɵɵtemplate(1, TagActionsComponent_mat_list_item_1_Template, 6, 3, "mat-list-item", 0);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(2, "table", 1);
        ɵngcc0.ɵɵelementStart(3, "tr");
        ɵngcc0.ɵɵelementStart(4, "td");
        ɵngcc0.ɵɵelementStart(5, "mat-form-field", 2);
        ɵngcc0.ɵɵelementStart(6, "input", 3);
        ɵngcc0.ɵɵlistener("keypress", function TagActionsComponent_Template_input_keypress_6_listener() { return ctx.cleanErrorMsg(); })("ngModelChange", function TagActionsComponent_Template_input_ngModelChange_6_listener($event) { return ctx.newTagName = $event; });
        ɵngcc0.ɵɵpipe(7, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(8, TagActionsComponent_mat_hint_8_Template, 2, 3, "mat-hint", 4);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(9, "td");
        ɵngcc0.ɵɵelementStart(10, "button", 5);
        ɵngcc0.ɵɵlistener("click", function TagActionsComponent_Template_button_click_10_listener() { return ctx.addTag(); });
        ɵngcc0.ɵɵtext(11);
        ɵngcc0.ɵɵpipe(12, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.tagsEntries);
        ɵngcc0.ɵɵadvance(5);
        ɵngcc0.ɵɵpropertyInterpolate("placeholder", ɵngcc0.ɵɵpipeBind1(7, 6, "TAG.LABEL.NEWTAG"));
        ɵngcc0.ɵɵproperty("ngModel", ctx.newTagName);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.error);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("disabled", ctx.disableAddTag);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(12, 8, "TAG.BUTTON.ADD"));
    } }, directives: [ɵngcc7.MatList, ɵngcc23.NgForOf, ɵngcc27.MatFormField, ɵngcc6.MatInput, ɵngcc26.DefaultValueAccessor, ɵngcc26.NgControlStatus, ɵngcc26.NgModel, ɵngcc23.NgIf, ɵngcc1.MatButton, ɵngcc7.MatListItem, ɵngcc4.MatIcon, ɵngcc27.MatHint, ɵngcc23.NgStyle], pipes: [ɵngcc25.TranslatePipe], styles: [".adf-tag-node-actions-list .adf-full-width{width:100%}.adf-tag-node-actions-list .adf-tag-actions-delete-icon{cursor:pointer;float:right}.adf-tag-node-actions-list .adf-tag-actions-delete-text{float:left;font-size:16px}.adf-tag-node-actions-list .adf-tag-actions-container{height:20px;padding:8px 0}"], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TagActionsComponent, [{
        type: i0.Component,
        args: [{
                selector: 'adf-tag-node-actions-list',
                template: "<mat-list>\n    <mat-list-item *ngFor=\"let currentEntry of tagsEntries; let idx = index\">\n        <div class=\"adf-tag-actions-container\" id=\"tag_delete_{{currentEntry.entry.tag}}\" (click)=\"removeTag(currentEntry.entry.id)\">\n            <div class=\"adf-tag-actions-delete-text\" id=\"tag_name_{{currentEntry.entry.tag}}\">{{currentEntry.entry.tag}}</div>\n            <mat-icon class=\"adf-tag-actions-delete-icon\">delete</mat-icon>\n        </div>\n    </mat-list-item>\n</mat-list>\n<table class=\"adf-full-width\" cellspacing=\"0\">\n    <tr>\n        <td>\n            <mat-form-field class=\"adf-full-width\">\n                <input\n                    id=\"new-tag-text\"\n                    matInput placeholder=\"{{'TAG.LABEL.NEWTAG' | translate }}\"\n                    type=\"text\"\n                    (keypress)=\"cleanErrorMsg()\"\n                    [(ngModel)]=\"newTagName\"\n                />\n                <mat-hint data-automation-id=\"errorMessage\" *ngIf=\"error\" [ngStyle]=\"{'color': 'red'}\" align=\"start\">{{errorMsg}}</mat-hint>\n            </mat-form-field>\n        </td>\n        <td>\n            <button\n                id=\"add-tag\"\n                class=\"adf-full-width\"\n                color=\"primary\"\n                (click)=\"addTag()\"\n                [disabled]=\"disableAddTag\"\n                mat-raised-button\n            >{{'TAG.BUTTON.ADD' | translate }}</button>\n        </td>\n    </tr>\n</table>\n",
                encapsulation: i0.ViewEncapsulation.None,
                host: { class: 'adf-tag-node-actions-list' },
                styles: [".adf-tag-node-actions-list .adf-full-width{width:100%}.adf-tag-node-actions-list .adf-tag-actions-delete-icon{cursor:pointer;float:right}.adf-tag-node-actions-list .adf-tag-actions-delete-text{float:left;font-size:16px}.adf-tag-node-actions-list .adf-tag-actions-container{height:20px;padding:8px 0}"]
            }]
    }], function () { return [{ type: TagService }, { type: ɵngcc21.TranslationService }]; }, { successAdd: [{
            type: i0.Output
        }], error: [{
            type: i0.Output
        }], result: [{
            type: i0.Output
        }], nodeId: [{
            type: i0.Input
        }] }); })();
        return TagActionsComponent;
    }());
    TagActionsComponent.ctorParameters = function () { return [
        { type: TagService },
        { type: i1.TranslationService }
    ]; };
    TagActionsComponent.propDecorators = {
        nodeId: [{ type: i0.Input }],
        successAdd: [{ type: i0.Output }],
        error: [{ type: i0.Output }],
        result: [{ type: i0.Output }]
    };

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var TagListComponent = /** @class */ (function () {
        function TagListComponent(tagService) {
            var _this = this;
            this.tagService = tagService;
            this.result = new i0.EventEmitter();
            this.tagsEntries = [];
            this.size = 10;
            this.isLoading = false;
            this.isSizeMinimum = true;
            this.onDestroy$ = new rxjs.Subject();
            this.defaultPagination = {
                skipCount: 0,
                maxItems: this.size,
                hasMoreItems: false
            };
            this.pagination = this.defaultPagination;
            this.tagService.refresh
                .pipe(operators.takeUntil(this.onDestroy$))
                .subscribe(function () {
                _this.tagsEntries = [];
                _this.refreshTag(_this.defaultPagination);
            });
        }
        TagListComponent.prototype.ngOnInit = function () {
            this.refreshTag(this.defaultPagination);
        };
        TagListComponent.prototype.ngOnDestroy = function () {
            this.onDestroy$.next(true);
            this.onDestroy$.complete();
        };
        TagListComponent.prototype.refreshTag = function (opts) {
            var _this = this;
            this.tagService.getAllTheTags(opts).subscribe(function (tags) {
                _this.tagsEntries = _this.tagsEntries.concat(tags.list.entries);
                _this.pagination = tags.list.pagination;
                _this.result.emit(_this.tagsEntries);
                _this.isLoading = false;
            });
        };
        TagListComponent.prototype.loadMoreTags = function () {
            if (this.pagination.hasMoreItems) {
                this.isLoading = true;
                this.isSizeMinimum = false;
                this.refreshTag({
                    skipCount: this.pagination.skipCount + this.pagination.count,
                    maxItems: this.size
                });
            }
        };
        TagListComponent.prototype.loadLessTags = function () {
            this.isSizeMinimum = false;
            this.tagsEntries = this.tagsEntries.slice(0, this.tagsEntries.length - this.pagination.count);
            this.pagination.skipCount = this.pagination.skipCount - this.pagination.count;
            this.pagination.hasMoreItems = true;
            if (this.tagsEntries.length <= this.size) {
                this.isSizeMinimum = true;
            }
        };
TagListComponent.ɵfac = function TagListComponent_Factory(t) { return new (t || TagListComponent)(ɵngcc0.ɵɵdirectiveInject(TagService)); };
TagListComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: TagListComponent, selectors: [["adf-tag-list"]], hostAttrs: [1, "adf-tag-list"], outputs: { result: "result" }, decls: 5, vars: 3, consts: [[1, "adf-tag-chips-list"], ["class", "adf-list-tag", 4, "ngFor", "ngForOf"], [1, "adf-tag-list-controls"], ["data-automation-id", "show-fewer-tags", "mat-icon-button", "", 3, "disabled", "click", 4, "ngIf"], ["data-automation-id", "show-more-tags", "mat-icon-button", "", 3, "disabled", "click", 4, "ngIf"], [1, "adf-list-tag"], [3, "id"], ["data-automation-id", "show-fewer-tags", "mat-icon-button", "", 3, "disabled", "click"], ["data-automation-id", "show-more-tags", "mat-icon-button", "", 3, "disabled", "click"]], template: function TagListComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "mat-chip-list", 0);
        ɵngcc0.ɵɵtemplate(1, TagListComponent_div_1_Template, 4, 2, "div", 1);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(2, "div", 2);
        ɵngcc0.ɵɵtemplate(3, TagListComponent_button_3_Template, 3, 1, "button", 3);
        ɵngcc0.ɵɵtemplate(4, TagListComponent_button_4_Template, 3, 1, "button", 4);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.tagsEntries);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.isSizeMinimum);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.pagination.hasMoreItems);
    } }, directives: [ɵngcc2.MatChipList, ɵngcc23.NgForOf, ɵngcc23.NgIf, ɵngcc2.MatChip, ɵngcc1.MatButton, ɵngcc4.MatIcon], styles: [".adf-tag-list .adf-tag-chips-list,.adf-tag-list .adf-tag-chips-list div{display:flex;flex-direction:column}.adf-tag-list .adf-tag-chips-list .adf-list-tag{display:block;font-size:16px}.adf-tag-list .adf-tag-chips-list .adf-list-tag .mat-chip{background-color:var(--theme-primary-color);color:var(--theme-primary-color-default-contrast)}.adf-tag-list .adf-tag-chips-list .adf-list-tag .mat-chip .mat-icon{color:var(--theme-primary-color-default-contrast)}.adf-tag-list .adf-tag-list-controls{display:flex;justify-content:center;margin-top:30px}"], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TagListComponent, [{
        type: i0.Component,
        args: [{
                selector: 'adf-tag-list',
                template: "<mat-chip-list class=\"adf-tag-chips-list\">\n    <div class=\"adf-list-tag\" *ngFor=\"let currentEntry of tagsEntries; let idx = index\">\n        <mat-chip>\n            <span id=\"tag_name_{{idx}}\">{{currentEntry.entry.tag}}</span>\n        </mat-chip>\n    </div>\n</mat-chip-list>\n\n<div class=\"adf-tag-list-controls\">\n    <button\n        *ngIf=\"!isSizeMinimum\"\n        [disabled]=\"isLoading\"\n        data-automation-id=\"show-fewer-tags\"\n        mat-icon-button\n        (click)=\"loadLessTags()\">\n        <mat-icon>keyboard_arrow_up</mat-icon>\n    </button>\n    <button\n        *ngIf=\"pagination.hasMoreItems\"\n        [disabled]=\"isLoading\"\n        data-automation-id=\"show-more-tags\"\n        mat-icon-button\n        (click)=\"loadMoreTags()\">\n        <mat-icon>keyboard_arrow_down</mat-icon>\n    </button>\n</div>\n",
                encapsulation: i0.ViewEncapsulation.None,
                host: { class: 'adf-tag-list' },
                styles: [".adf-tag-list .adf-tag-chips-list,.adf-tag-list .adf-tag-chips-list div{display:flex;flex-direction:column}.adf-tag-list .adf-tag-chips-list .adf-list-tag{display:block;font-size:16px}.adf-tag-list .adf-tag-chips-list .adf-list-tag .mat-chip{background-color:var(--theme-primary-color);color:var(--theme-primary-color-default-contrast)}.adf-tag-list .adf-tag-chips-list .adf-list-tag .mat-chip .mat-icon{color:var(--theme-primary-color-default-contrast)}.adf-tag-list .adf-tag-list-controls{display:flex;justify-content:center;margin-top:30px}"]
            }]
    }], function () { return [{ type: TagService }]; }, { result: [{
            type: i0.Output
        }] }); })();
        return TagListComponent;
    }());
    TagListComponent.ctorParameters = function () { return [
        { type: TagService }
    ]; };
    TagListComponent.propDecorators = {
        result: [{ type: i0.Output }]
    };

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var TagNodeListComponent = /** @class */ (function () {
        function TagNodeListComponent(tagService) {
            this.tagService = tagService;
            this.showDelete = true;
            this.results = new i0.EventEmitter();
            this.onDestroy$ = new rxjs.Subject();
        }
        TagNodeListComponent.prototype.ngOnChanges = function () {
            this.refreshTag();
        };
        TagNodeListComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.tagService.refresh
                .pipe(operators.takeUntil(this.onDestroy$))
                .subscribe(function () { return _this.refreshTag(); });
        };
        TagNodeListComponent.prototype.ngOnDestroy = function () {
            this.onDestroy$.next(true);
            this.onDestroy$.complete();
        };
        TagNodeListComponent.prototype.refreshTag = function () {
            var _this = this;
            if (this.nodeId) {
                this.tagService.getTagsByNodeId(this.nodeId).subscribe(function (tagPaging) {
                    _this.tagsEntries = tagPaging.list.entries;
                    _this.results.emit(_this.tagsEntries);
                });
            }
        };
        TagNodeListComponent.prototype.removeTag = function (tag) {
            var _this = this;
            this.tagService.removeTag(this.nodeId, tag).subscribe(function () {
                _this.refreshTag();
            });
        };
TagNodeListComponent.ɵfac = function TagNodeListComponent_Factory(t) { return new (t || TagNodeListComponent)(ɵngcc0.ɵɵdirectiveInject(TagService)); };
TagNodeListComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: TagNodeListComponent, selectors: [["adf-tag-node-list"]], hostAttrs: [1, "adf-tag-node-list"], inputs: { showDelete: "showDelete", nodeId: "nodeId" }, outputs: { results: "results" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 2, vars: 1, consts: [["class", "adf-tag-chips", 3, "removed", 4, "ngFor", "ngForOf"], [1, "adf-tag-chips", 3, "removed"], [3, "id"], ["class", "adf-tag-chips-delete-icon", "matChipRemove", "", 3, "id", 4, "ngIf"], ["matChipRemove", "", 1, "adf-tag-chips-delete-icon", 3, "id"]], template: function TagNodeListComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "mat-chip-list");
        ɵngcc0.ɵɵtemplate(1, TagNodeListComponent_mat_chip_1_Template, 4, 3, "mat-chip", 0);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.tagsEntries);
    } }, directives: [ɵngcc2.MatChipList, ɵngcc23.NgForOf, ɵngcc2.MatChip, ɵngcc23.NgIf, ɵngcc4.MatIcon, ɵngcc2.MatChipRemove], styles: [".adf-tag-node-list .adf-tag-chips{background-color:var(--theme-primary-color);color:var(--theme-primary-color-default-contrast)}.adf-tag-node-list .adf-tag-chips-delete{background:none;border:0;cursor:pointer;float:right;height:17px;margin:-1px 0 0 10px;overflow:visible;padding:0;width:20px}.adf-tag-node-list .adf-tag-chips-delete-icon{background-repeat:no-repeat;color:var(--theme-primary-color-default-contrast)!important;display:inline-block;fill:currentColor;font-size:20px;height:20px;width:20px}"], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TagNodeListComponent, [{
        type: i0.Component,
        args: [{
                selector: 'adf-tag-node-list',
                template: "<mat-chip-list>\n    <mat-chip class=\"adf-tag-chips\"\n              *ngFor=\"let currentEntry of tagsEntries; let idx = index\" (removed)=\"removeTag(currentEntry.entry.id)\">\n        <span id=\"tag_name_{{idx}}\">{{currentEntry.entry.tag}}</span>\n        <mat-icon *ngIf=\"showDelete\" id=\"tag_chips_delete_{{currentEntry.entry.tag}}\"\n                  class=\"adf-tag-chips-delete-icon\" matChipRemove>cancel\n        </mat-icon>\n    </mat-chip>\n</mat-chip-list>\n",
                encapsulation: i0.ViewEncapsulation.None,
                host: { class: 'adf-tag-node-list' },
                styles: [".adf-tag-node-list .adf-tag-chips{background-color:var(--theme-primary-color);color:var(--theme-primary-color-default-contrast)}.adf-tag-node-list .adf-tag-chips-delete{background:none;border:0;cursor:pointer;float:right;height:17px;margin:-1px 0 0 10px;overflow:visible;padding:0;width:20px}.adf-tag-node-list .adf-tag-chips-delete-icon{background-repeat:no-repeat;color:var(--theme-primary-color-default-contrast)!important;display:inline-block;fill:currentColor;font-size:20px;height:20px;width:20px}"]
            }]
    }], function () { return [{ type: TagService }]; }, { showDelete: [{
            type: i0.Input
        }], results: [{
            type: i0.Output
        }], nodeId: [{
            type: i0.Input
        }] }); })();
        return TagNodeListComponent;
    }());
    TagNodeListComponent.ctorParameters = function () { return [
        { type: TagService }
    ]; };
    TagNodeListComponent.propDecorators = {
        nodeId: [{ type: i0.Input }],
        showDelete: [{ type: i0.Input }],
        results: [{ type: i0.Output }]
    };

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var TagModule = /** @class */ (function () {
        function TagModule() {
        }
TagModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: TagModule });
TagModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function TagModule_Factory(t) { return new (t || TagModule)(); }, imports: [[
            common.CommonModule,
            MaterialModule,
            forms.FormsModule,
            forms.ReactiveFormsModule,
            i1.CoreModule
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(TagModule, { declarations: [TagActionsComponent, TagListComponent, TagNodeListComponent], imports: [ɵngcc23.CommonModule, MaterialModule, ɵngcc26.FormsModule, ɵngcc26.ReactiveFormsModule, ɵngcc21.CoreModule], exports: [TagActionsComponent, TagListComponent, TagNodeListComponent] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TagModule, [{
        type: i0.NgModule,
        args: [{
                imports: [
                    common.CommonModule,
                    MaterialModule,
                    forms.FormsModule,
                    forms.ReactiveFormsModule,
                    i1.CoreModule
                ],
                exports: [
                    TagActionsComponent,
                    TagListComponent,
                    TagNodeListComponent
                ],
                declarations: [
                    TagActionsComponent,
                    TagListComponent,
                    TagNodeListComponent
                ]
            }]
    }], function () { return []; }, null); })();
        return TagModule;
    }());

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var WebscriptComponent = /** @class */ (function () {
        function WebscriptComponent(apiService, logService) {
            this.apiService = apiService;
            this.logService = logService;
            this.showData = true;
            this.contextRoot = 'alfresco';
            this.servicePath = 'service';
            this.contentType = 'TEXT';
            this.success = new i0.EventEmitter();
            this.data = undefined;
            this.showError = false;
        }
        Object.defineProperty(WebscriptComponent.prototype, "webscriptApi", {
            get: function () {
                var _a;
                this._webscriptApi = (_a = this._webscriptApi) !== null && _a !== void 0 ? _a : new jsApi.WebscriptApi(this.apiService.getInstance());
                return this._webscriptApi;
            },
            enumerable: false,
            configurable: true
        });
        WebscriptComponent.prototype.ngOnChanges = function () {
            var _this = this;
            if (this.showData) {
                this.clean();
            }
            return new Promise(function (resolve, reject) {
                _this.webscriptApi.executeWebScript('GET', _this.scriptPath, _this.scriptArgs, _this.contextRoot, _this.servicePath).then(function (webScriptData) {
                    _this.data = webScriptData;
                    if (_this.showData) {
                        if (_this.contentType === 'DATATABLE') {
                            _this.data = _this.showDataAsDataTable(webScriptData);
                        }
                    }
                    _this.success.emit(_this.data);
                    resolve();
                }, function (error) {
                    _this.logService.log('Error' + error);
                    reject();
                });
            });
        };
        WebscriptComponent.prototype.showDataAsDataTable = function (data) {
            var datatableData = null;
            try {
                if (!data.schema) {
                    data.schema = i1.ObjectDataTableAdapter.generateSchema(data.data);
                }
                if (data.schema && data.schema.length > 0) {
                    this.data = new i1.ObjectDataTableAdapter(data.data, data.schema);
                }
            }
            catch (error) {
                this.logService.error('error during the cast as datatable');
            }
            return datatableData;
        };
        WebscriptComponent.prototype.clean = function () {
            this.data = undefined;
        };
        WebscriptComponent.prototype.isDataTableContent = function () {
            return this.contentType === 'DATATABLE';
        };
WebscriptComponent.ɵfac = function WebscriptComponent_Factory(t) { return new (t || WebscriptComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc21.AlfrescoApiService), ɵngcc0.ɵɵdirectiveInject(ɵngcc21.LogService)); };
WebscriptComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: WebscriptComponent, selectors: [["adf-webscript-get"]], inputs: { showData: "showData", contextRoot: "contextRoot", servicePath: "servicePath", contentType: "contentType", scriptPath: "scriptPath", scriptArgs: "scriptArgs" }, outputs: { success: "success" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 1, vars: 1, consts: [[4, "ngIf"], ["id", "webscript-data-JSON", 4, "ngIf"], ["id", "webscript-data-HTML", 3, "innerHTML", 4, "ngIf"], ["id", "webscript-data-TEXT", 4, "ngIf"], ["id", "webscript-data-JSON"], ["id", "webscript-data-HTML", 3, "innerHTML"], ["id", "webscript-data-TEXT"], ["id", "webscript-datatable-wrapper", 3, "data"], ["id", "error", 4, "ngIf"], ["id", "error"]], template: function WebscriptComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, WebscriptComponent_div_0_Template, 5, 4, "div", 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngIf", ctx.showData);
    } }, directives: [ɵngcc23.NgIf, ɵngcc21.DataTableComponent], pipes: [ɵngcc23.JsonPipe, ɵngcc25.TranslatePipe], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(WebscriptComponent, [{
        type: i0.Component,
        args: [{
                selector: 'adf-webscript-get',
                template: "<div *ngIf=\"showData\">\n    <div *ngIf=\"contentType === 'JSON'\" id=\"webscript-data-JSON\">{{data | json}}</div>\n    <div *ngIf=\"contentType === 'HTML'\" id=\"webscript-data-HTML\" [innerHTML]=\"data\"></div>\n    <div *ngIf=\"contentType === 'TEXT'\" id=\"webscript-data-TEXT\">{{data}}</div>\n    <div *ngIf=\"isDataTableContent()\">\n        <adf-datatable id=\"webscript-datatable-wrapper\" [data]=\"data\"></adf-datatable>\n        <div>\n            <div *ngIf=\"showError\" id=\"error\">{{'WEBSCRIPT.ERROR' | translate: {\n                data: data,\n                contentType: contentType\n                }\n                }}\n            </div>\n        </div>\n    </div>\n</div>\n"
            }]
    }], function () { return [{ type: ɵngcc21.AlfrescoApiService }, { type: ɵngcc21.LogService }]; }, { showData: [{
            type: i0.Input
        }], contextRoot: [{
            type: i0.Input
        }], servicePath: [{
            type: i0.Input
        }], contentType: [{
            type: i0.Input
        }], success: [{
            type: i0.Output
        }], scriptPath: [{
            type: i0.Input
        }], scriptArgs: [{
            type: i0.Input
        }] }); })();
        return WebscriptComponent;
    }());
    WebscriptComponent.ctorParameters = function () { return [
        { type: i1.AlfrescoApiService },
        { type: i1.LogService }
    ]; };
    WebscriptComponent.propDecorators = {
        scriptPath: [{ type: i0.Input }],
        scriptArgs: [{ type: i0.Input }],
        showData: [{ type: i0.Input }],
        contextRoot: [{ type: i0.Input }],
        servicePath: [{ type: i0.Input }],
        contentType: [{ type: i0.Input }],
        success: [{ type: i0.Output }]
    };

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var WebScriptModule = /** @class */ (function () {
        function WebScriptModule() {
        }
WebScriptModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: WebScriptModule });
WebScriptModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function WebScriptModule_Factory(t) { return new (t || WebScriptModule)(); }, imports: [[
            common.CommonModule,
            MaterialModule,
            i1.CoreModule
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(WebScriptModule, { declarations: [WebscriptComponent], imports: [ɵngcc23.CommonModule, MaterialModule, ɵngcc21.CoreModule], exports: [WebscriptComponent] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(WebScriptModule, [{
        type: i0.NgModule,
        args: [{
                imports: [
                    common.CommonModule,
                    MaterialModule,
                    i1.CoreModule
                ],
                exports: [
                    WebscriptComponent
                ],
                declarations: [
                    WebscriptComponent
                ]
            }]
    }], function () { return []; }, null); })();
        return WebScriptModule;
    }());

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var ShareDataRow = /** @class */ (function () {
        function ShareDataRow(obj, contentService, permissionsStyle, thumbnailService, allowDropFiles) {
            this.obj = obj;
            this.contentService = contentService;
            this.permissionsStyle = permissionsStyle;
            this.thumbnailService = thumbnailService;
            this.allowDropFiles = allowDropFiles;
            this.cache = {};
            this.isSelected = false;
            this.cssClass = '';
            if (!obj) {
                throw new Error(ShareDataRow.ERR_OBJECT_NOT_FOUND);
            }
            this.isDropTarget = allowDropFiles !== undefined ? this.allowDropFiles && this.checkNodeTypeAndPermissions(obj) : this.checkNodeTypeAndPermissions(obj);
            if (permissionsStyle) {
                this.cssClass = this.getPermissionClass(obj);
            }
            this.id = this.getId();
        }
        Object.defineProperty(ShareDataRow.prototype, "node", {
            get: function () {
                return this.obj;
            },
            set: function (value) {
                this.obj = value;
                this.cache = {};
            },
            enumerable: false,
            configurable: true
        });
        ShareDataRow.prototype.checkNodeTypeAndPermissions = function (nodeEntry) {
            return this.isFolderAndHasPermissionToUpload(nodeEntry) || this.isFileAndHasParentFolderPermissionToUpload(nodeEntry);
        };
        ShareDataRow.prototype.getPermissionClass = function (nodeEntity) {
            var _this = this;
            var permissionsClasses = '';
            this.permissionsStyle.forEach(function (currentPermissionsStyle) {
                if (_this.applyPermissionStyleToFolder(nodeEntity.entry, currentPermissionsStyle) || _this.applyPermissionStyleToFile(nodeEntity.entry, currentPermissionsStyle)) {
                    if (_this.contentService.hasAllowableOperations(nodeEntity.entry, currentPermissionsStyle.permission)) {
                        permissionsClasses += " " + currentPermissionsStyle.css;
                    }
                }
            });
            return permissionsClasses;
        };
        ShareDataRow.prototype.applyPermissionStyleToFile = function (node, currentPermissionsStyle) {
            return (currentPermissionsStyle.isFile && node.isFile);
        };
        ShareDataRow.prototype.applyPermissionStyleToFolder = function (node, currentPermissionsStyle) {
            return (currentPermissionsStyle.isFolder && node.isFolder);
        };
        ShareDataRow.prototype.isFolderAndHasPermissionToUpload = function (nodeEntry) {
            return this.isFolder(nodeEntry) && this.contentService.hasAllowableOperations(nodeEntry.entry, 'create');
        };
        ShareDataRow.prototype.isFileAndHasParentFolderPermissionToUpload = function (nodeEntry) {
            return this.isFile(nodeEntry) && this.contentService.hasAllowableOperations(nodeEntry.entry, 'update');
        };
        ShareDataRow.prototype.isFile = function (nodeEntry) {
            return nodeEntry.entry && nodeEntry.entry.isFile;
        };
        ShareDataRow.prototype.isFolder = function (nodeEntry) {
            return nodeEntry.entry && nodeEntry.entry.isFolder;
        };
        ShareDataRow.prototype.cacheValue = function (key, value) {
            this.cache[key] = value;
            return value;
        };
        ShareDataRow.prototype.getValue = function (key) {
            if (this.cache[key] !== undefined) {
                return this.cache[key];
            }
            return i1.ObjectUtils.getValue(this.obj.entry, key);
        };
        ShareDataRow.prototype.imageErrorResolver = function () {
            if (this.obj.entry.content) {
                return this.thumbnailService.getMimeTypeIcon(this.obj.entry.content.mimeType);
            }
        };
        ShareDataRow.prototype.hasValue = function (key) {
            return this.getValue(key) !== undefined;
        };
        ShareDataRow.prototype.getId = function () {
            return this.obj.entry.id || undefined;
        };
        return ShareDataRow;
    }());
    ShareDataRow.ERR_OBJECT_NOT_FOUND = 'Object source not found';

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var ShareDataTableAdapter = /** @class */ (function () {
        function ShareDataTableAdapter(thumbnailService, contentService, schema, sorting, sortingMode, allowDropFiles) {
            if (schema === void 0) { schema = []; }
            if (sortingMode === void 0) { sortingMode = 'client'; }
            if (allowDropFiles === void 0) { allowDropFiles = false; }
            this.thumbnailService = thumbnailService;
            this.contentService = contentService;
            this.ERR_ROW_NOT_FOUND = 'Row not found';
            this.ERR_COL_NOT_FOUND = 'Column not found';
            this.thumbnails = false;
            this.rows = [];
            this.columns = schema || [];
            this.sorting = sorting;
            this.sortingMode = sortingMode;
            this.allowDropFiles = allowDropFiles;
        }
        Object.defineProperty(ShareDataTableAdapter.prototype, "sortingMode", {
            get: function () {
                return this._sortingMode;
            },
            set: function (value) {
                var newValue = (value || 'client').toLowerCase();
                if (newValue !== 'client' && newValue !== 'server') {
                    newValue = 'client';
                }
                this._sortingMode = newValue;
            },
            enumerable: false,
            configurable: true
        });
        ShareDataTableAdapter.prototype.getRows = function () {
            return this.rows;
        };
        ShareDataTableAdapter.prototype.setRows = function (rows) {
            this.rows = rows || [];
            this.sort();
        };
        ShareDataTableAdapter.prototype.getColumns = function () {
            return this.columns;
        };
        ShareDataTableAdapter.prototype.setColumns = function (columns) {
            this.columns = columns || [];
        };
        ShareDataTableAdapter.prototype.getValue = function (row, col) {
            if (!row) {
                throw new Error(this.ERR_ROW_NOT_FOUND);
            }
            if (!col) {
                throw new Error(this.ERR_COL_NOT_FOUND);
            }
            var dataRow = row;
            var value = row.getValue(col.key);
            if (dataRow.cache[col.key] !== undefined) {
                return dataRow.cache[col.key];
            }
            if (col.key === '$thumbnail') {
                if (this.imageResolver) {
                    var resolved = this.imageResolver(row, col);
                    if (resolved) {
                        return resolved;
                    }
                }
                var node = row.node;
                if (node.entry.isFolder) {
                    return this.getFolderIcon(node);
                }
                if (node.entry.isFile) {
                    if (this.thumbnails) {
                        return this.thumbnailService.getDocumentThumbnailUrl(node);
                    }
                }
                if (node.entry.content) {
                    var mimeType = node.entry.content.mimeType;
                    if (mimeType) {
                        return this.thumbnailService.getMimeTypeIcon(mimeType);
                    }
                }
                return this.thumbnailService.getDefaultMimeTypeIcon();
            }
            if (col.type === 'image') {
                if (this.imageResolver) {
                    var resolved = this.imageResolver(row, col);
                    if (resolved) {
                        return resolved;
                    }
                }
            }
            return dataRow.cacheValue(col.key, value);
        };
        ShareDataTableAdapter.prototype.getSorting = function () {
            return this.sorting;
        };
        ShareDataTableAdapter.prototype.setSorting = function (sorting) {
            this.sorting = sorting;
            this.sortRows(this.rows, this.sorting);
        };
        ShareDataTableAdapter.prototype.sort = function (key, direction) {
            var sorting = this.sorting || new i1.DataSorting();
            if (key) {
                sorting.key = key;
                sorting.direction = direction || 'asc';
            }
            this.setSorting(sorting);
        };
        ShareDataTableAdapter.prototype.setFilter = function (filter) {
            this.filter = filter;
        };
        ShareDataTableAdapter.prototype.setImageResolver = function (resolver) {
            this.imageResolver = resolver;
        };
        ShareDataTableAdapter.prototype.getFolderIcon = function (node) {
            if (this.isSmartFolder(node)) {
                return this.thumbnailService.getMimeTypeIcon('smartFolder');
            }
            else if (this.isRuleFolder(node)) {
                return this.thumbnailService.getMimeTypeIcon('ruleFolder');
            }
            else if (this.isALinkFolder(node)) {
                return this.thumbnailService.getMimeTypeIcon('linkFolder');
            }
            else {
                return this.thumbnailService.getMimeTypeIcon('folder');
            }
        };
        ShareDataTableAdapter.prototype.isSmartFolder = function (node) {
            var nodeAspects = this.getNodeAspectNames(node);
            return nodeAspects.indexOf('smf:customConfigSmartFolder') > -1 ||
                (nodeAspects.indexOf('smf:systemConfigSmartFolder') > -1);
        };
        ShareDataTableAdapter.prototype.isRuleFolder = function (node) {
            var nodeAspects = this.getNodeAspectNames(node);
            return nodeAspects.indexOf('rule:rules') > -1 ||
                (nodeAspects.indexOf('rule:rules') > -1);
        };
        ShareDataTableAdapter.prototype.isALinkFolder = function (node) {
            var nodeType = node.entry ? node.entry.nodeType : node.nodeType;
            return nodeType === 'app:folderlink';
        };
        ShareDataTableAdapter.prototype.getNodeAspectNames = function (node) {
            var _a;
            return ((_a = node.entry) === null || _a === void 0 ? void 0 : _a.aspectNames) ? node.entry.aspectNames : (node.aspectNames ? node.aspectNames : []);
        };
        ShareDataTableAdapter.prototype.sortRows = function (rows, sorting) {
            if (this.sortingMode === 'server') {
                return;
            }
            var options = {};
            if ((sorting === null || sorting === void 0 ? void 0 : sorting.key) && (rows === null || rows === void 0 ? void 0 : rows.length)) {
                if (sorting.key.includes('sizeInBytes') || sorting.key === 'name') {
                    options.numeric = true;
                }
                rows.sort(function (a, b) {
                    if (a.node.entry.isFolder !== b.node.entry.isFolder) {
                        return a.node.entry.isFolder ? -1 : 1;
                    }
                    var left = a.getValue(sorting.key);
                    if (left) {
                        left = (left instanceof Date) ? left.valueOf().toString() : left.toString();
                    }
                    else {
                        left = '';
                    }
                    var right = b.getValue(sorting.key);
                    if (right) {
                        right = (right instanceof Date) ? right.valueOf().toString() : right.toString();
                    }
                    else {
                        right = '';
                    }
                    return sorting.direction === 'asc'
                        ? left.localeCompare(right, undefined, options)
                        : right.localeCompare(left, undefined, options);
                });
            }
        };
        ShareDataTableAdapter.prototype.loadPage = function (nodePaging, merge, allowDropFiles) {
            var _this = this;
            if (merge === void 0) { merge = false; }
            var _a;
            var shareDataRows = [];
            if (allowDropFiles !== undefined) {
                this.allowDropFiles = allowDropFiles;
            }
            if (nodePaging === null || nodePaging === void 0 ? void 0 : nodePaging.list) {
                var nodeEntries = nodePaging.list.entries;
                if (nodeEntries === null || nodeEntries === void 0 ? void 0 : nodeEntries.length) {
                    shareDataRows = nodeEntries.map(function (item) { return new ShareDataRow(item, _this.contentService, _this.permissionsStyle, _this.thumbnailService, _this.allowDropFiles); });
                    if (this.filter) {
                        shareDataRows = shareDataRows.filter(this.filter);
                    }
                    if (this.sortingMode !== 'server') {
                        if ((_a = this.columns) === null || _a === void 0 ? void 0 : _a.length) {
                            var sorting = this.getSorting();
                            if (sorting) {
                                this.sortRows(shareDataRows, sorting);
                            }
                            else {
                                var sortable = this.columns.filter(function (c) { return c.sortable; });
                                if (sortable.length > 0) {
                                    this.sort(sortable[0].key, 'asc');
                                }
                                else {
                                    this.sort(this.columns[0].key, 'asc');
                                }
                            }
                        }
                    }
                }
            }
            if (merge) {
                var listPrunedDuplicate = shareDataRows.filter(function (elementToFilter) {
                    var isPresent = _this.rows.find(function (currentRow) {
                        return currentRow.obj.entry.id === elementToFilter.obj.entry.id;
                    });
                    return !isPresent;
                });
                this.rows = this.rows.concat(listPrunedDuplicate);
            }
            else {
                this.rows = shareDataRows;
            }
        };
        ShareDataTableAdapter.prototype.getSelectedRows = function () {
            return this.rows.filter(function (row) { return row.isSelected; });
        };
        ShareDataTableAdapter.prototype.getRowByNodeId = function (nodeId) {
            return this.rows.find(function (row) { return row.node.entry.id === nodeId; });
        };
        return ShareDataTableAdapter;
    }());

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var presetsDefaultModel = {
        '-trashcan-': [
            {
                key: '$thumbnail',
                type: 'image',
                srTitle: 'ADF-DOCUMENT-LIST.LAYOUT.THUMBNAIL',
                sortable: false
            },
            {
                key: 'name',
                type: 'text',
                title: 'ADF-DOCUMENT-LIST.LAYOUT.NAME',
                cssClass: 'full-width ellipsis-cell',
                sortable: true
            },
            {
                key: 'path',
                type: 'location',
                title: 'ADF-DOCUMENT-LIST.LAYOUT.LOCATION',
                sortable: true
            },
            {
                key: 'content.sizeInBytes',
                type: 'fileSize',
                title: 'ADF-DOCUMENT-LIST.LAYOUT.SIZE',
                sortable: true
            },
            {
                key: 'archivedAt',
                type: 'date',
                title: 'ADF-DOCUMENT-LIST.LAYOUT.DELETED_ON',
                format: 'timeAgo',
                sortable: true
            },
            {
                key: 'archivedByUser.displayName',
                type: 'text',
                title: 'ADF-DOCUMENT-LIST.LAYOUT.DELETED_BY',
                sortable: true
            }
        ],
        '-sites-': [
            {
                key: '$thumbnail',
                type: 'image',
                srTitle: 'ADF-DOCUMENT-LIST.LAYOUT.THUMBNAIL',
                sortable: false
            },
            {
                key: 'title',
                type: 'text',
                title: 'ADF-DOCUMENT-LIST.LAYOUT.NAME',
                cssClass: 'full-width ellipsis-cell',
                sortable: true
            },
            {
                key: 'visibility',
                type: 'text',
                title: 'ADF-DOCUMENT-LIST.LAYOUT.STATUS',
                sortable: true
            }
        ],
        '-mysites-': [
            {
                key: '$thumbnail',
                type: 'image',
                srTitle: 'ADF-DOCUMENT-LIST.LAYOUT.THUMBNAIL',
                sortable: false
            },
            {
                key: 'title',
                type: 'text',
                title: 'ADF-DOCUMENT-LIST.LAYOUT.NAME',
                cssClass: 'full-width ellipsis-cell',
                sortable: true
            },
            {
                key: 'visibility',
                type: 'text',
                title: 'ADF-DOCUMENT-LIST.LAYOUT.STATUS',
                sortable: true
            }
        ],
        '-favorites-': [
            {
                key: '$thumbnail',
                type: 'image',
                srTitle: 'ADF-DOCUMENT-LIST.LAYOUT.THUMBNAIL',
                sortable: false
            },
            {
                key: 'name',
                type: 'text',
                title: 'ADF-DOCUMENT-LIST.LAYOUT.NAME',
                cssClass: 'full-width ellipsis-cell',
                sortable: true
            },
            {
                key: 'path',
                type: 'location',
                title: 'ADF-DOCUMENT-LIST.LAYOUT.LOCATION',
                sortable: true
            },
            {
                key: 'content.sizeInBytes',
                type: 'fileSize',
                title: 'ADF-DOCUMENT-LIST.LAYOUT.SIZE',
                sortable: true
            },
            {
                key: 'modifiedAt',
                type: 'date',
                title: 'ADF-DOCUMENT-LIST.LAYOUT.MODIFIED_ON',
                format: 'timeAgo',
                sortable: true
            },
            {
                key: 'modifiedByUser.displayName',
                type: 'text',
                title: 'ADF-DOCUMENT-LIST.LAYOUT.MODIFIED_BY',
                sortable: true
            }
        ],
        '-recent-': [
            {
                key: '$thumbnail',
                type: 'image',
                srTitle: 'ADF-DOCUMENT-LIST.LAYOUT.THUMBNAIL',
                sortable: false
            },
            {
                key: 'name',
                type: 'text',
                title: 'ADF-DOCUMENT-LIST.LAYOUT.NAME',
                cssClass: 'full-width ellipsis-cell',
                sortable: true
            },
            {
                key: 'path',
                type: 'location',
                title: 'ADF-DOCUMENT-LIST.LAYOUT.LOCATION',
                cssClass: 'ellipsis-cell',
                sortable: true
            },
            {
                key: 'content.sizeInBytes',
                type: 'fileSize',
                title: 'ADF-DOCUMENT-LIST.LAYOUT.SIZE',
                sortable: true
            },
            {
                key: 'modifiedAt',
                type: 'date',
                title: 'ADF-DOCUMENT-LIST.LAYOUT.MODIFIED_ON',
                format: 'timeAgo',
                sortable: true
            }
        ],
        '-sharedlinks-': [
            {
                key: '$thumbnail',
                type: 'image',
                srTitle: 'ADF-DOCUMENT-LIST.LAYOUT.THUMBNAIL',
                sortable: false
            },
            {
                key: 'name',
                type: 'text',
                title: 'ADF-DOCUMENT-LIST.LAYOUT.NAME',
                cssClass: 'full-width ellipsis-cell',
                sortable: true
            },
            {
                key: 'path',
                type: 'location',
                title: 'ADF-DOCUMENT-LIST.LAYOUT.LOCATION',
                cssClass: 'ellipsis-cell',
                sortable: true
            },
            {
                key: 'content.sizeInBytes',
                type: 'fileSize',
                title: 'ADF-DOCUMENT-LIST.LAYOUT.SIZE',
                sortable: true
            },
            {
                key: 'modifiedAt',
                type: 'date',
                title: 'ADF-DOCUMENT-LIST.LAYOUT.MODIFIED_ON',
                format: 'timeAgo',
                sortable: true
            },
            {
                key: 'modifiedByUser.displayName',
                type: 'text',
                title: 'ADF-DOCUMENT-LIST.LAYOUT.MODIFIED_BY',
                sortable: true
            },
            {
                key: 'sharedByUser.displayName',
                type: 'text',
                title: 'ADF-DOCUMENT-LIST.LAYOUT.SHARED_BY',
                sortable: true
            }
        ],
        'default': [
            {
                key: '$thumbnail',
                type: 'image',
                srTitle: 'ADF-DOCUMENT-LIST.LAYOUT.THUMBNAIL',
                sortable: false
            },
            {
                key: 'name',
                type: 'text',
                title: 'ADF-DOCUMENT-LIST.LAYOUT.NAME',
                cssClass: 'full-width ellipsis-cell',
                sortable: true
            },
            {
                key: 'content.sizeInBytes',
                type: 'fileSize',
                title: 'ADF-DOCUMENT-LIST.LAYOUT.SIZE',
                sortable: true
            },
            {
                key: 'modifiedAt',
                type: 'date',
                title: 'ADF-DOCUMENT-LIST.LAYOUT.MODIFIED_ON',
                format: 'timeAgo',
                sortable: true
            },
            {
                key: 'modifiedByUser.displayName',
                type: 'text',
                title: 'ADF-DOCUMENT-LIST.LAYOUT.MODIFIED_BY',
                sortable: true
            }
        ]
    };

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var ContentActionModel = /** @class */ (function () {
        function ContentActionModel(obj) {
            this.disableWithNoPermission = false;
            this.disabled = false;
            this.visible = true;
            if (obj) {
                this.icon = obj.icon;
                this.title = obj.title;
                this.handler = obj.handler;
                this.execute = obj.execute;
                this.target = obj.target;
                this.permission = obj.permission;
                this.disableWithNoPermission = obj.disableWithNoPermission;
                if (obj.hasOwnProperty('disabled')) {
                    this.disabled = obj.disabled;
                }
                if (obj.hasOwnProperty('visible')) {
                    this.visible = obj.visible;
                }
            }
        }
        return ContentActionModel;
    }());
    (function (ContentActionTarget) {
        ContentActionTarget["Document"] = "document";
        ContentActionTarget["Folder"] = "folder";
        ContentActionTarget["All"] = "all";
    })(exports.ContentActionTarget || (exports.ContentActionTarget = {}));
    var DocumentActionModel = /** @class */ (function (_super) {
        __extends(DocumentActionModel, _super);
        function DocumentActionModel(json) {
            var _this = _super.call(this, json) || this;
            _this.target = 'document';
            return _this;
        }
        return DocumentActionModel;
    }(ContentActionModel));
    var FolderActionModel = /** @class */ (function (_super) {
        __extends(FolderActionModel, _super);
        function FolderActionModel(json) {
            var _this = _super.call(this, json) || this;
            _this.target = 'folder';
            return _this;
        }
        return FolderActionModel;
    }(ContentActionModel));

    var NodeEntityEvent = /** @class */ (function (_super) {
        __extends(NodeEntityEvent, _super);
        function NodeEntityEvent(nodeEntry) {
            var _this = _super.call(this) || this;
            _this.value = nodeEntry;
            return _this;
        }
        return NodeEntityEvent;
    }(i1.BaseEvent));
    var NodeEntryEvent = /** @class */ (function (_super) {
        __extends(NodeEntryEvent, _super);
        function NodeEntryEvent(node) {
            var _this = _super.call(this) || this;
            _this.value = node;
            return _this;
        }
        return NodeEntryEvent;
    }(i1.BaseEvent));

    var DocumentListComponent = /** @class */ (function () {
        function DocumentListComponent(documentListService, ngZone, elementRef, appConfig, userPreferencesService, contentService, thumbnailService, alfrescoApiService, lockService) {
            var _this = this;
            this.documentListService = documentListService;
            this.ngZone = ngZone;
            this.elementRef = elementRef;
            this.appConfig = appConfig;
            this.userPreferencesService = userPreferencesService;
            this.contentService = contentService;
            this.thumbnailService = thumbnailService;
            this.alfrescoApiService = alfrescoApiService;
            this.lockService = lockService;
            this.DEFAULT_PAGINATION = new jsApi.Pagination({
                hasMoreItems: false,
                skipCount: 0,
                maxItems: 25,
                totalItems: 0
            });
            this.DEFAULT_SORTING = [
                new i1.DataSorting('name', 'asc'),
                new i1.DataSorting('isFolder', 'desc')
            ];
            this.display = i1.DisplayMode.List;
            this.permissionsStyle = [];
            this.locationFormat = '/';
            this.navigate = true;
            this.showHeader = i1.ShowHeaderMode.Data;
            this.navigationMode = DocumentListComponent.DOUBLE_CLICK_NAVIGATION;
            this.thumbnails = false;
            this.selectionMode = 'single';
            this.multiselect = false;
            this.contentActions = false;
            this.contentActionsPosition = 'right';
            this.contextMenuActions = false;
            this.emptyFolderImageUrl = './assets/images/empty_doc_lib.svg';
            this.allowDropFiles = false;
            this.sorting = ['name', 'asc'];
            this.additionalSorting = new i1.DataSorting('isFolder', 'desc');
            this.sortingMode = 'server';
            this.loading = false;
            this._rowFilter = null;
            this.imageResolver = null;
            this.stickyHeader = false;
            this.headerFilters = false;
            this.currentFolderId = null;
            this.preselectNodes = [];
            this.node = null;
            this.maxItems = this.DEFAULT_PAGINATION.maxItems;
            this.nodeClick = new i0.EventEmitter();
            this.nodeDblClick = new i0.EventEmitter();
            this.folderChange = new i0.EventEmitter();
            this.preview = new i0.EventEmitter();
            this.ready = new i0.EventEmitter();
            this.error = new i0.EventEmitter();
            this.nodeSelected = new i0.EventEmitter();
            this.filterSelection = new i0.EventEmitter();
            this.actions = [];
            this.contextActionHandler = new rxjs.Subject();
            this.noPermission = false;
            this.selection = new Array();
            this.$folderNode = new rxjs.Subject();
            this.allowFiltering = true;
            this.orderBy = null;
            this.preselectedRows = [];
            this._pagination = this.DEFAULT_PAGINATION;
            this.pagination = new rxjs.BehaviorSubject(this.DEFAULT_PAGINATION);
            this.sortingSubject = new rxjs.BehaviorSubject(this.DEFAULT_SORTING);
            this.layoutPresets = {};
            this.rowMenuCache = {};
            this.onDestroy$ = new rxjs.Subject();
            this.userPreferencesService
                .select(i1.UserPreferenceValues.PaginationSize)
                .pipe(operators.takeUntil(this.onDestroy$))
                .subscribe(function (pagSize) {
                _this.maxItems = _this._pagination.maxItems = pagSize;
            });
        }
        Object.defineProperty(DocumentListComponent.prototype, "rowFilter", {
            get: function () {
                return this._rowFilter;
            },
            set: function (rowFilter) {
                this._rowFilter = rowFilter;
                if (this.data) {
                    this.data.setFilter(this._rowFilter);
                    if (this.currentFolderId) {
                        this.reload();
                    }
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DocumentListComponent.prototype, "nodesApi", {
            get: function () {
                var _a;
                this._nodesApi = (_a = this._nodesApi) !== null && _a !== void 0 ? _a : new jsApi.NodesApi(this.alfrescoApiService.getInstance());
                return this._nodesApi;
            },
            enumerable: false,
            configurable: true
        });
        DocumentListComponent.prototype.getContextActions = function (node) {
            var _this = this;
            if (node && node.entry) {
                var actions = this.getNodeActions(node);
                if (actions && actions.length > 0) {
                    return actions.map(function (currentAction) {
                        return {
                            model: currentAction,
                            node: node,
                            subject: _this.contextActionHandler
                        };
                    });
                }
            }
            return null;
        };
        Object.defineProperty(DocumentListComponent.prototype, "hasCustomLayout", {
            get: function () {
                return this.columnList && this.columnList.columns && this.columnList.columns.length > 0;
            },
            enumerable: false,
            configurable: true
        });
        DocumentListComponent.prototype.getDefaultSorting = function () {
            var defaultSorting;
            if (Array.isArray(this.sorting)) {
                var _c = __read(this.sorting, 2), key = _c[0], direction = _c[1];
                defaultSorting = new i1.DataSorting(key, direction);
            }
            else {
                defaultSorting = new i1.DataSorting(this.sorting.key, this.sorting.direction);
            }
            return defaultSorting;
        };
        DocumentListComponent.prototype.getLayoutPreset = function (name) {
            if (name === void 0) { name = 'default'; }
            return (this.layoutPresets[name] || this.layoutPresets['default']).map(function (col) { return new i1.ObjectDataColumn(col); });
        };
        DocumentListComponent.prototype.isMobile = function () {
            return !!/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
        };
        DocumentListComponent.prototype.isEmpty = function () {
            return !this.data || this.data.getRows().length === 0;
        };
        DocumentListComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.rowMenuCache = {};
            this.loadLayoutPresets();
            this.data = new ShareDataTableAdapter(this.thumbnailService, this.contentService, null, this.getDefaultSorting(), this.sortingMode, this.allowDropFiles);
            this.data.thumbnails = this.thumbnails;
            this.data.permissionsStyle = this.permissionsStyle;
            if (this._rowFilter) {
                this.data.setFilter(this._rowFilter);
            }
            if (this.imageResolver) {
                this.data.setImageResolver(this.imageResolver);
            }
            this.contextActionHandler
                .pipe(operators.takeUntil(this.onDestroy$))
                .subscribe(function (val) { return _this.contextActionCallback(val); });
            this.enforceSingleClickNavigationForMobile();
        };
        DocumentListComponent.prototype.ngAfterContentInit = function () {
            var _this = this;
            if (this.columnList) {
                this.columnList.columns.changes
                    .pipe(operators.takeUntil(this.onDestroy$))
                    .subscribe(function () { return _this.setTableSchema(); });
            }
            this.setTableSchema();
        };
        DocumentListComponent.prototype.setTableSchema = function () {
            var schema = [];
            if (this.hasCustomLayout) {
                schema = this.columnList.columns.map(function (c) { return c; });
            }
            if (!this.data) {
                this.data = new ShareDataTableAdapter(this.thumbnailService, this.contentService, schema, this.getDefaultSorting(), this.sortingMode);
            }
            else if (schema && schema.length > 0) {
                this.data.setColumns(schema);
            }
            var columns = this.data.getColumns();
            if (!columns || columns.length === 0) {
                this.setupDefaultColumns(this.currentFolderId);
            }
        };
        DocumentListComponent.prototype.ngOnChanges = function (changes) {
            var _a, _b;
            if (!changes['preselectNodes']) {
                this.resetSelection();
            }
            if (Array.isArray(this.sorting)) {
                var _c = __read(this.sorting, 2), key = _c[0], direction = _c[1];
                this.orderBy = this.buildOrderByArray(key, direction);
            }
            else {
                this.orderBy = this.buildOrderByArray(this.sorting.key, this.sorting.direction);
            }
            if (this.data) {
                this.data.thumbnails = this.thumbnails;
            }
            if (changes.sortingMode && !changes.sortingMode.firstChange && this.data) {
                this.data.sortingMode = changes.sortingMode.currentValue;
            }
            if (changes.sorting && !changes.sorting.firstChange && this.data) {
                var newValue = changes.sorting.currentValue;
                if (newValue && newValue.length > 0) {
                    var _d = __read(newValue, 2), key = _d[0], direction = _d[1];
                    this.data.setSorting(new i1.DataSorting(key, direction));
                }
            }
            if (this.currentFolderId && ((_a = changes['currentFolderId']) === null || _a === void 0 ? void 0 : _a.currentValue) !== ((_b = changes['currentFolderId']) === null || _b === void 0 ? void 0 : _b.previousValue)) {
                this.loadFolder();
            }
            if (this.data) {
                if (changes.node && changes.node.currentValue) {
                    var merge = this._pagination ? this._pagination.merge : false;
                    this.data.loadPage(changes.node.currentValue, merge, null);
                    this.preserveExistingSelection();
                    this.onPreselectNodes();
                    this.onDataReady(changes.node.currentValue);
                }
                else if (changes.imageResolver) {
                    this.data.setImageResolver(changes.imageResolver.currentValue);
                }
            }
        };
        DocumentListComponent.prototype.reload = function () {
            var _this = this;
            this.ngZone.run(function () {
                _this.resetSelection();
                _this.reloadWithoutResettingSelection();
            });
        };
        DocumentListComponent.prototype.reloadWithoutResettingSelection = function () {
            if (this.node) {
                if (this.data) {
                    this.data.loadPage(this.node, this._pagination.merge, null);
                    this.preserveExistingSelection();
                }
                this.onPreselectNodes();
                this.syncPagination();
                this.onDataReady(this.node);
            }
            else {
                this.loadFolder();
            }
        };
        DocumentListComponent.prototype.contextActionCallback = function (action) {
            if (action) {
                this.executeContentAction(action.node, action.model);
            }
        };
        DocumentListComponent.prototype.getNodeActions = function (node) {
            var _this = this;
            if (node && node.entry) {
                var target_1 = null;
                if (node.entry.isFile) {
                    target_1 = 'document';
                }
                else if (node.entry.isFolder) {
                    target_1 = 'folder';
                }
                if (target_1) {
                    var actions = this.rowMenuCache[node.entry.id];
                    if (actions) {
                        actions.forEach(function (action) {
                            _this.refreshAction(action, node);
                        });
                        return actions;
                    }
                    var actionsByTarget = this.actions
                        .filter(function (entry) {
                        var isVisible = (typeof entry.visible === 'function')
                            ? entry.visible(node)
                            : entry.visible;
                        return isVisible && entry.target.toLowerCase() === target_1;
                    })
                        .map(function (action) { return new ContentActionModel(action); });
                    actionsByTarget.forEach(function (action) {
                        _this.refreshAction(action, node);
                    });
                    this.rowMenuCache[node.entry.id] = actionsByTarget;
                    return actionsByTarget;
                }
            }
            return [];
        };
        DocumentListComponent.prototype.refreshAction = function (action, node) {
            action.disabled = this.isActionDisabled(action, node);
            action.visible = this.isActionVisible(action, node);
        };
        DocumentListComponent.prototype.isActionVisible = function (action, node) {
            if (typeof action.visible === 'function') {
                return action.visible(node);
            }
            return action.visible;
        };
        DocumentListComponent.prototype.isActionDisabled = function (action, node) {
            if (typeof action.disabled === 'function') {
                return action.disabled(node);
            }
            if ((action.permission &&
                action.disableWithNoPermission &&
                !this.contentService.hasAllowableOperations(node.entry, action.permission)) ||
                this.lockService.isLocked(node.entry)) {
                return true;
            }
            else {
                return action.disabled;
            }
        };
        DocumentListComponent.prototype.onShowContextMenu = function (e) {
            if (e && this.contextMenuActions) {
                e.preventDefault();
            }
        };
        DocumentListComponent.prototype.navigateTo = function (node) {
            if (typeof node === 'string') {
                this.resetNewFolderPagination();
                this.currentFolderId = node;
                this.folderChange.emit(new NodeEntryEvent({ id: node }));
                this.reload();
                return true;
            }
            else {
                if (this.canNavigateFolder(node)) {
                    this.resetNewFolderPagination();
                    this.currentFolderId = this.getNodeFolderDestinationId(node);
                    this.folderChange.emit(new NodeEntryEvent({ id: this.currentFolderId }));
                    this.reload();
                    return true;
                }
            }
            return false;
        };
        DocumentListComponent.prototype.getNodeFolderDestinationId = function (node) {
            return this.isLinkFolder(node) ? node.properties['cm:destination'] : node.id;
        };
        DocumentListComponent.prototype.isLinkFolder = function (node) {
            return node.nodeType === 'app:folderlink' && node.properties &&
                node.properties['cm:destination'];
        };
        DocumentListComponent.prototype.updateCustomSourceData = function (nodeId) {
            this.currentFolderId = nodeId;
        };
        DocumentListComponent.prototype.executeContentAction = function (node, action) {
            if (node && node.entry && action) {
                var handlerSub = (typeof action.handler === 'function') ? action.handler(node, this, action.permission) : rxjs.of(true);
                if (typeof action.execute === 'function' && handlerSub) {
                    handlerSub
                        .pipe(operators.takeUntil(this.onDestroy$))
                        .subscribe(function () { return action.execute(node); });
                }
            }
        };
        DocumentListComponent.prototype.setLoadingState = function (value) {
            var _this = this;
            var _a;
            if (((_a = this.data) === null || _a === void 0 ? void 0 : _a.getRows().length) > 0) {
                if (value) {
                    clearTimeout(this.loadingTimeout);
                    this.loadingTimeout = setTimeout(function () {
                        _this.loading = true;
                    }, 1000);
                }
                else {
                    clearTimeout(this.loadingTimeout);
                    this.loading = false;
                }
            }
            else {
                clearTimeout(this.loadingTimeout);
                this.loading = value;
            }
        };
        DocumentListComponent.prototype.loadFolder = function () {
            var _this = this;
            if (!this._pagination.merge) {
                this.setLoadingState(true);
            }
            if (!this.hasCustomLayout) {
                this.setupDefaultColumns(this.currentFolderId);
            }
            if (this.documentListService.isCustomSourceService(this.currentFolderId)) {
                this.updateCustomSourceData(this.currentFolderId);
            }
            this.documentListService.loadFolderByNodeId(this.currentFolderId, this._pagination, this.includeFields, this.where, this.orderBy)
                .subscribe(function (documentNode) {
                if (documentNode.currentNode) {
                    _this.folderNode = documentNode.currentNode.entry;
                    _this.$folderNode.next(documentNode.currentNode.entry);
                }
                _this.onPageLoaded(documentNode.children);
            }, function (err) {
                _this.handleError(err);
            });
        };
        DocumentListComponent.prototype.resetSelection = function () {
            this.dataTable.resetSelection();
            this.selection = [];
            this.noPermission = false;
        };
        DocumentListComponent.prototype.onPageLoaded = function (nodePaging) {
            if (nodePaging) {
                if (this.data) {
                    this.data.loadPage(nodePaging, this._pagination.merge, this.allowDropFiles);
                    this.preserveExistingSelection();
                }
                this.onPreselectNodes();
                this.setLoadingState(false);
                this.onDataReady(nodePaging);
            }
        };
        DocumentListComponent.prototype.onSortingChanged = function (event) {
            this.orderBy = this.buildOrderByArray(event.detail.sortingKey, event.detail.direction);
            this.sortingSubject.next([this.additionalSorting, event.detail]);
            if (this.sortingMode === 'server') {
                this.reload();
            }
        };
        DocumentListComponent.prototype.buildOrderByArray = function (currentKey, currentDirection) {
            return [
                this.additionalSorting.key + " " + this.additionalSorting.direction,
                currentKey + " " + currentDirection
            ];
        };
        DocumentListComponent.prototype.setupDefaultColumns = function (preset) {
            if (preset === void 0) { preset = 'default'; }
            if (this.data) {
                var columns = this.getLayoutPreset(preset);
                this.data.setColumns(columns);
            }
        };
        DocumentListComponent.prototype.onPreviewFile = function (node) {
            if (node) {
                this.preview.emit(new NodeEntityEvent(node));
            }
        };
        DocumentListComponent.prototype.onNodeClick = function (nodeEntry) {
            var domEvent = new CustomEvent('node-click', {
                detail: {
                    sender: this,
                    node: nodeEntry
                },
                bubbles: true
            });
            this.elementRef.nativeElement.dispatchEvent(domEvent);
            var event = new NodeEntityEvent(nodeEntry);
            this.nodeClick.emit(event);
            if (!event.defaultPrevented) {
                if (this.navigate && this.navigationMode === DocumentListComponent.SINGLE_CLICK_NAVIGATION) {
                    this.executeActionClick(nodeEntry);
                }
            }
        };
        DocumentListComponent.prototype.onNodeDblClick = function (nodeEntry) {
            var domEvent = new CustomEvent('node-dblclick', {
                detail: {
                    sender: this,
                    node: nodeEntry
                },
                bubbles: true
            });
            this.elementRef.nativeElement.dispatchEvent(domEvent);
            var event = new NodeEntityEvent(nodeEntry);
            this.nodeDblClick.emit(event);
            if (!event.defaultPrevented) {
                if (this.navigate && this.navigationMode === DocumentListComponent.DOUBLE_CLICK_NAVIGATION) {
                    this.executeActionClick(nodeEntry);
                }
            }
        };
        DocumentListComponent.prototype.executeActionClick = function (nodeEntry) {
            var _this = this;
            if (nodeEntry && nodeEntry.entry) {
                if (nodeEntry.entry.isFile) {
                    this.onPreviewFile(nodeEntry);
                }
                if (nodeEntry.entry.isFolder) {
                    this.navigateTo(nodeEntry.entry);
                }
                if (nodeEntry.entry['guid']) {
                    var options = {
                        include: this.includeFields
                    };
                    this.nodesApi.getNode(nodeEntry.entry['guid'], options)
                        .then(function (node) {
                        _this.navigateTo(node.entry);
                    });
                }
            }
        };
        DocumentListComponent.prototype.onNodeSelect = function (event) {
            this.selection = event.selection.map(function (entry) { return entry.node; });
            var domEvent = new CustomEvent('node-select', {
                detail: {
                    node: event.row ? event.row.node : null,
                    selection: this.selection
                },
                bubbles: true
            });
            this.nodeSelected.emit(this.selection);
            this.elementRef.nativeElement.dispatchEvent(domEvent);
        };
        DocumentListComponent.prototype.onNodeUnselect = function (event) {
            this.selection = event.selection.map(function (entry) { return entry.node; });
            var domEvent = new CustomEvent('node-unselect', {
                detail: {
                    node: event.row ? event.row.node : null,
                    selection: this.selection
                },
                bubbles: true
            });
            this.nodeSelected.emit(this.selection);
            this.elementRef.nativeElement.dispatchEvent(domEvent);
        };
        DocumentListComponent.prototype.onShowRowContextMenu = function (event) {
            if (this.contextMenuActions) {
                var args = event.value;
                var node = args.row.node;
                if (node) {
                    args.actions = this.getContextActions(node) || [];
                }
            }
        };
        DocumentListComponent.prototype.onShowRowActionsMenu = function (event) {
            if (this.contentActions) {
                var args = event.value;
                var node = args.row.node;
                if (node) {
                    args.actions = this.getNodeActions(node) || [];
                }
            }
        };
        DocumentListComponent.prototype.onExecuteRowAction = function (event) {
            if (this.contentActions) {
                var args = event.value;
                var node = args.row.node;
                var action = args.action;
                this.executeContentAction(node, action);
            }
        };
        DocumentListComponent.prototype.enforceSingleClickNavigationForMobile = function () {
            if (this.isMobile()) {
                this.navigationMode = DocumentListComponent.SINGLE_CLICK_NAVIGATION;
            }
        };
        DocumentListComponent.prototype.canNavigateFolder = function (node) {
            var canNavigateFolder = false;
            if (node && node.isFolder) {
                canNavigateFolder = true;
            }
            return canNavigateFolder;
        };
        DocumentListComponent.prototype.loadLayoutPresets = function () {
            var externalSettings = this.appConfig.get('document-list.presets', null);
            this.layoutPresets = externalSettings ? Object.assign({}, presetsDefaultModel, externalSettings) : presetsDefaultModel;
        };
        DocumentListComponent.prototype.onDataReady = function (nodePaging) {
            this.ready.emit(nodePaging);
            this.pagination.next(nodePaging.list.pagination);
        };
        DocumentListComponent.prototype.updatePagination = function (requestPaginationModel) {
            this._pagination.maxItems = requestPaginationModel.maxItems;
            this._pagination.merge = requestPaginationModel.merge;
            this._pagination.skipCount = requestPaginationModel.skipCount;
            this.reload();
        };
        DocumentListComponent.prototype.syncPagination = function () {
            this.node.list.pagination.maxItems = this._pagination.maxItems;
            this.node.list.pagination.skipCount = this._pagination.skipCount;
        };
        DocumentListComponent.prototype.onFilterSelectionChange = function (activeFilters) {
            this.filterSelection.emit(activeFilters);
        };
        DocumentListComponent.prototype.resetNewFolderPagination = function () {
            this._pagination.skipCount = 0;
            this._pagination.maxItems = this.maxItems;
        };
        DocumentListComponent.prototype.ngOnDestroy = function () {
            this.onDestroy$.next(true);
            this.onDestroy$.complete();
        };
        DocumentListComponent.prototype.handleError = function (err) {
            if (err.message) {
                try {
                    if (JSON.parse(err.message).error.statusCode === 403) {
                        this.noPermission = true;
                    }
                }
                catch (error) {
                }
            }
            this.setLoadingState(false);
            this.error.emit(err);
        };
        DocumentListComponent.prototype.getPreselectedNodesBasedOnSelectionMode = function () {
            return this.hasPreselectedNodes() ? (this.isSingleSelectionMode() ? [this.preselectNodes[0]] : this.preselectNodes) : [];
        };
        DocumentListComponent.prototype.getPreselectedRowsBasedOnSelectionMode = function () {
            return this.hasPreselectedRows() ? (this.isSingleSelectionMode() ? [this.preselectedRows[0]] : this.preselectedRows) : [];
        };
        DocumentListComponent.prototype.getSelectionBasedOnSelectionMode = function () {
            return this.hasPreselectedRows() ? (this.isSingleSelectionMode() ? [this.preselectedRows[0]] : this.data.getSelectedRows()) : this.data.getSelectedRows();
        };
        DocumentListComponent.prototype.onPreselectNodes = function () {
            var e_1, _c;
            if (this.hasPreselectedNodes()) {
                this.preselectRowsOfPreselectedNodes();
                var preselectedRows = this.getPreselectedRowsBasedOnSelectionMode();
                var selectedNodes = this.data.getSelectedRows();
                try {
                    for (var preselectedRows_1 = __values(preselectedRows), preselectedRows_1_1 = preselectedRows_1.next(); !preselectedRows_1_1.done; preselectedRows_1_1 = preselectedRows_1.next()) {
                        var node = preselectedRows_1_1.value;
                        this.dataTable.selectRow(node, true);
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (preselectedRows_1_1 && !preselectedRows_1_1.done && (_c = preselectedRows_1.return)) _c.call(preselectedRows_1);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
                this.onNodeSelect({ row: undefined, selection: selectedNodes });
            }
        };
        DocumentListComponent.prototype.preserveExistingSelection = function () {
            var e_2, _c;
            if (this.isMultipleSelectionMode()) {
                try {
                    for (var _d = __values(this.selection), _e = _d.next(); !_e.done; _e = _d.next()) {
                        var selection = _e.value;
                        var rowOfSelection = this.data.getRowByNodeId(selection.entry.id);
                        if (rowOfSelection) {
                            rowOfSelection.isSelected = true;
                        }
                    }
                }
                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                finally {
                    try {
                        if (_e && !_e.done && (_c = _d.return)) _c.call(_d);
                    }
                    finally { if (e_2) throw e_2.error; }
                }
            }
        };
        DocumentListComponent.prototype.preselectRowsOfPreselectedNodes = function () {
            var _this = this;
            this.preselectedRows = [];
            var preselectedNodes = this.getPreselectedNodesBasedOnSelectionMode();
            preselectedNodes.forEach(function (preselectedNode) {
                var rowOfPreselectedNode = _this.data.getRowByNodeId(preselectedNode.entry.id);
                if (rowOfPreselectedNode) {
                    rowOfPreselectedNode.isSelected = true;
                    _this.preselectedRows.push(rowOfPreselectedNode);
                }
            });
        };
        DocumentListComponent.prototype.unselectRowFromNodeId = function (nodeId) {
            var rowToUnselect = this.data.getRowByNodeId(nodeId);
            if (rowToUnselect === null || rowToUnselect === void 0 ? void 0 : rowToUnselect.isSelected) {
                rowToUnselect.isSelected = false;
                this.dataTable.selectRow(rowToUnselect, false);
                var selection = this.getSelectionBasedOnSelectionMode();
                this.onNodeUnselect({ row: undefined, selection: selection });
            }
        };
        DocumentListComponent.prototype.isSingleSelectionMode = function () {
            return this.selectionMode === 'single';
        };
        DocumentListComponent.prototype.isMultipleSelectionMode = function () {
            return this.selectionMode === 'multiple';
        };
        DocumentListComponent.prototype.hasPreselectedNodes = function () {
            var _a;
            return ((_a = this.preselectNodes) === null || _a === void 0 ? void 0 : _a.length) > 0;
        };
        DocumentListComponent.prototype.hasPreselectedRows = function () {
            var _a;
            return ((_a = this.preselectedRows) === null || _a === void 0 ? void 0 : _a.length) > 0;
        };
DocumentListComponent.ɵfac = function DocumentListComponent_Factory(t) { return new (t || DocumentListComponent)(ɵngcc0.ɵɵdirectiveInject(DocumentListService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc21.AppConfigService), ɵngcc0.ɵɵdirectiveInject(ɵngcc21.UserPreferencesService), ɵngcc0.ɵɵdirectiveInject(ɵngcc21.ContentService), ɵngcc0.ɵɵdirectiveInject(ɵngcc21.ThumbnailService), ɵngcc0.ɵɵdirectiveInject(ɵngcc21.AlfrescoApiService), ɵngcc0.ɵɵdirectiveInject(ɵngcc21.LockService)); };
DocumentListComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: DocumentListComponent, selectors: [["adf-document-list"]], contentQueries: function DocumentListComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, i1.DataColumnListComponent, true);
        ɵngcc0.ɵɵcontentQuery(dirIndex, i1.CustomLoadingContentTemplateDirective, true);
        ɵngcc0.ɵɵcontentQuery(dirIndex, i1.CustomNoPermissionTemplateDirective, true);
        ɵngcc0.ɵɵcontentQuery(dirIndex, i1.CustomEmptyContentTemplateDirective, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.columnList = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.customLoadingContent = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.customNoPermissionsTemplate = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.customNoContentTemplate = _t.first);
    } }, viewQuery: function DocumentListComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵstaticViewQuery(_c5, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.dataTable = _t.first);
    } }, hostAttrs: [1, "adf-document-list"], hostBindings: function DocumentListComponent_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("contextmenu", function DocumentListComponent_contextmenu_HostBindingHandler($event) { return ctx.onShowContextMenu($event); });
    } }, inputs: { display: "display", permissionsStyle: "permissionsStyle", locationFormat: "locationFormat", navigate: "navigate", showHeader: "showHeader", navigationMode: "navigationMode", thumbnails: "thumbnails", selectionMode: "selectionMode", multiselect: "multiselect", contentActions: "contentActions", contentActionsPosition: "contentActionsPosition", contextMenuActions: "contextMenuActions", emptyFolderImageUrl: "emptyFolderImageUrl", allowDropFiles: "allowDropFiles", sorting: "sorting", additionalSorting: "additionalSorting", sortingMode: "sortingMode", loading: "loading", _rowFilter: "_rowFilter", imageResolver: "imageResolver", stickyHeader: "stickyHeader", headerFilters: "headerFilters", currentFolderId: "currentFolderId", preselectNodes: "preselectNodes", node: "node", maxItems: "maxItems", rowFilter: "rowFilter", includeFields: "includeFields", where: "where", rowStyle: "rowStyle", rowStyleClass: "rowStyleClass", filterValue: "filterValue" }, outputs: { nodeClick: "nodeClick", nodeDblClick: "nodeDblClick", folderChange: "folderChange", preview: "preview", ready: "ready", error: "error", nodeSelected: "nodeSelected", filterSelection: "filterSelection" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], ngContentSelectors: _c7, decls: 9, vars: 18, consts: [[3, "selectionMode", "data", "actions", "actionsPosition", "multiselect", "contextMenu", "rowStyle", "rowStyleClass", "loading", "display", "noPermission", "showHeader", "rowMenuCacheEnabled", "stickyHeader", "allowFiltering", "showRowContextMenu", "showRowActionsMenu", "executeRowAction", "rowClick", "rowDblClick", "row-select", "row-unselect", "sorting-changed"], ["dataTable", ""], [4, "ngIf"], [3, "currentFolderId", "value", "filterSelection"], [1, "adf-empty-list_template", "adf-empty-folder"], [1, "adf-empty-folder-this-space-is-empty"], ["fxHide.lt-md", "true", 1, "adf-empty-folder-drag-drop"], ["fxHide.lt-md", "true", 1, "adf-empty-folder-any-files-here-to-add"], [1, "adf-empty-folder-image", 3, "alt", "src"], ["class", "adf-no-permission__template", 4, "ngIf"], [1, "adf-no-permission__template"], [1, "adf-no-permission__template--text"], ["class", "adf-document-list-loading-container", 4, "ngIf"], [1, "adf-document-list-loading-container"], ["id", "adf-document-list-loading", 1, "adf-document-list-loading-margin", 3, "color", "mode"]], template: function DocumentListComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef(_c6);
        ɵngcc0.ɵɵelementStart(0, "adf-datatable", 0, 1);
        ɵngcc0.ɵɵlistener("showRowContextMenu", function DocumentListComponent_Template_adf_datatable_showRowContextMenu_0_listener($event) { return ctx.onShowRowContextMenu($event); })("showRowActionsMenu", function DocumentListComponent_Template_adf_datatable_showRowActionsMenu_0_listener($event) { return ctx.onShowRowActionsMenu($event); })("executeRowAction", function DocumentListComponent_Template_adf_datatable_executeRowAction_0_listener($event) { return ctx.onExecuteRowAction($event); })("rowClick", function DocumentListComponent_Template_adf_datatable_rowClick_0_listener($event) { return ctx.onNodeClick($event.value == null ? null : $event.value.node); })("rowDblClick", function DocumentListComponent_Template_adf_datatable_rowDblClick_0_listener($event) { return ctx.onNodeDblClick($event.value == null ? null : $event.value.node); })("row-select", function DocumentListComponent_Template_adf_datatable_row_select_0_listener($event) { return ctx.onNodeSelect($event.detail); })("row-unselect", function DocumentListComponent_Template_adf_datatable_row_unselect_0_listener($event) { return ctx.onNodeUnselect($event.detail); })("sorting-changed", function DocumentListComponent_Template_adf_datatable_sorting_changed_0_listener($event) { return ctx.onSortingChanged($event); });
        ɵngcc0.ɵɵtemplate(2, DocumentListComponent_div_2_Template, 2, 2, "div", 2);
        ɵngcc0.ɵɵelementStart(3, "adf-no-content-template");
        ɵngcc0.ɵɵtemplate(4, DocumentListComponent_ng_template_4_Template, 2, 1, "ng-template");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(5, "adf-no-permission-template");
        ɵngcc0.ɵɵtemplate(6, DocumentListComponent_ng_template_6_Template, 2, 1, "ng-template");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(7, "adf-loading-content-template");
        ɵngcc0.ɵɵtemplate(8, DocumentListComponent_ng_template_8_Template, 2, 1, "ng-template");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵclassProp("adf-datatable-gallery-thumbnails", ctx.data.thumbnails);
        ɵngcc0.ɵɵproperty("selectionMode", ctx.selectionMode)("data", ctx.data)("actions", ctx.contentActions)("actionsPosition", ctx.contentActionsPosition)("multiselect", ctx.multiselect)("contextMenu", ctx.contextMenuActions)("rowStyle", ctx.rowStyle)("rowStyleClass", ctx.rowStyleClass)("loading", ctx.loading)("display", ctx.display)("noPermission", ctx.noPermission)("showHeader", ctx.showHeader)("rowMenuCacheEnabled", false)("stickyHeader", ctx.stickyHeader)("allowFiltering", ctx.allowFiltering);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.headerFilters);
    } }, directives: function () { return [ɵngcc21.DataTableComponent, ɵngcc23.NgIf, ɵngcc21.NoContentTemplateDirective, ɵngcc21.NoPermissionTemplateDirective, ɵngcc21.LoadingContentTemplateDirective, FilterHeaderComponent, ɵngcc21.EmptyListComponent, ɵngcc29.DefaultShowHideDirective, ɵngcc4.MatIcon, ɵngcc8.MatProgressSpinner]; }, pipes: function () { return [ɵngcc25.TranslatePipe]; }, styles: [".adf-document-list{background-color:var(--theme-background-color);height:100%;min-height:0}.mat-icon.adf-datatable-selected{height:100%;margin-left:-2px;margin-top:2px;width:100%}.adf-sticky-document-list{height:310px;overflow-y:auto}.adf-datatable-card .adf-datatable-selected>svg{fill:var(--theme-accent-color);height:30px;position:absolute;top:10px;width:30px}.adf-datatable-list .adf-datatable-selected>svg{fill:var(--theme-accent-color);height:30px;width:30px}.adf-document-list_empty_template{margin-bottom:20px;margin-top:20px;text-align:center}.adf-no-permission__template{align-items:center;display:flex;flex-direction:column;height:100%;justify-content:center;min-height:300px;width:100%}.adf-no-permission__template mat-icon{font-size:52px;height:52px;width:52px}.adf-no-permission__template--text{color:var(--theme-text-fg-color);font-size:16px}.adf-document-list__this-space-is-empty{color:var(--theme-text-fg-color);font-size:24px;height:32px;letter-spacing:-1px;line-height:1.33;opacity:.26}.adf-document-list__drag-drop{color:var(--theme-text-fg-color);font-size:56px;height:56px;letter-spacing:-2px;line-height:1;margin-top:40px;opacity:.54}.adf-document-list__any-files-here-to-add{color:var(--theme-text-fg-color);font-size:16px;height:24px;letter-spacing:-.4px;line-height:1.5;margin-top:17px;opacity:.54}.adf-document-list__empty_doc_lib{height:161px;margin-top:17px;object-fit:contain;width:565px}.adf-document-list-loading-margin{margin:auto}.adf-document-list-loading-container{display:flex;flex-direction:row;height:100%;min-height:300px}.adf-empty-list-header{font-size:24px;height:32px;letter-spacing:-1px;line-height:1.33;opacity:.26!important}.adf-documentlist-pagination,.adf-empty-list-header{color:var(--theme-text-fg-color)}.adf-documentlist-pagination .adf-pagination__block{border-right:none}.adf-empty-folder-this-space-is-empty{color:var(--theme-text-color);font-size:24px;height:32px;letter-spacing:-1px;line-height:1.33}.adf-empty-folder-drag-drop{color:var(--theme-foreground-text-color);font-size:53px;letter-spacing:-2px;line-height:1;margin-top:40px;min-height:56px;white-space:pre-line;word-break:break-all}@media screen and (max-width:599px){.adf-empty-folder-drag-drop{font-size:48px}}.adf-empty-folder-any-files-here-to-add{color:var(--theme-foreground-text-color);font-size:16px;letter-spacing:-.4px;line-height:1.5;margin-top:17px;min-height:24px;white-space:pre-line;word-break:break-all}.adf-empty-folder-image{margin-top:17px;max-width:100%;object-fit:contain;width:565px}@media screen and (max-width:599px){.adf-empty-folder-image{width:250px}}.adf-datatable-gallery-thumbnails .adf-datatable-card .adf-datatable-row{height:300px!important}.adf-datatable-gallery-thumbnails .adf-datatable-card .adf-datatable-row img{height:130px}.adf-datatable-gallery-thumbnails .adf-datatable-card .adf-datatable-row .adf-datatable-cell{overflow:visible}.adf-datatable-gallery-thumbnails .adf-datatable-card .adf-datatable-row .adf-datatable-cell.adf-datatable-cell--image{display:flex;flex:0 0 auto;flex-direction:column-reverse;justify-content:space-between}.adf-datatable-gallery-thumbnails .adf-datatable-card .adf-datatable-row .adf-datatable-cell.adf-datatable-cell--image .adf-cell-value{display:flex;justify-content:center}"], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DocumentListComponent, [{
        type: i0.Component,
        args: [{
                selector: 'adf-document-list',
                template: "<adf-datatable\n    #dataTable\n    [selectionMode]=\"selectionMode\"\n    [data]=\"data\"\n    [actions]=\"contentActions\"\n    [actionsPosition]=\"contentActionsPosition\"\n    [multiselect]=\"multiselect\"\n    [contextMenu]=\"contextMenuActions\"\n    [rowStyle]=\"rowStyle\"\n    [rowStyleClass]=\"rowStyleClass\"\n    [loading]=\"loading\"\n    [display]=\"display\"\n    [noPermission]=\"noPermission\"\n    [showHeader]=\"showHeader\"\n    [rowMenuCacheEnabled]=\"false\"\n    [stickyHeader]=\"stickyHeader\"\n    [allowFiltering]=\"allowFiltering\"\n    (showRowContextMenu)=\"onShowRowContextMenu($event)\"\n    (showRowActionsMenu)=\"onShowRowActionsMenu($event)\"\n    (executeRowAction)=\"onExecuteRowAction($event)\"\n    (rowClick)=\"onNodeClick($event.value?.node)\"\n    (rowDblClick)=\"onNodeDblClick($event.value?.node)\"\n    (row-select)=\"onNodeSelect($any($event).detail)\"\n    (row-unselect)=\"onNodeUnselect($any($event).detail)\"\n    (sorting-changed)=\"onSortingChanged($any($event))\"\n    [class.adf-datatable-gallery-thumbnails]=\"data.thumbnails\">\n\n    <div *ngIf=\"headerFilters\">\n        <adf-filter-header\n            [currentFolderId]=\"currentFolderId\"\n            [value]=\"filterValue\"\n            (filterSelection)=\"onFilterSelectionChange($event)\">\n        </adf-filter-header>\n    </div>\n\n    <adf-no-content-template>\n        <ng-template>\n            <adf-empty-list *ngIf=\"!customNoContentTemplate\">\n                <div class=\"adf-empty-list_template adf-empty-folder\">\n                    <div class=\"adf-empty-folder-this-space-is-empty\">{{'ADF-DOCUMENT-LIST.EMPTY.HEADER' | translate}}</div>\n                    <div fxHide.lt-md=\"true\" class=\"adf-empty-folder-drag-drop\">{{ 'ADF-DATATABLE.EMPTY.DRAG-AND-DROP.TITLE' | translate }}</div>\n                    <div fxHide.lt-md=\"true\" class=\"adf-empty-folder-any-files-here-to-add\">{{ 'ADF-DATATABLE.EMPTY.DRAG-AND-DROP.SUBTITLE' | translate }}</div>\n                    <img [alt]=\"'ADF-DATATABLE.EMPTY.DRAG-AND-DROP.TITLE' | translate\" class=\"adf-empty-folder-image\" [src]=\"emptyFolderImageUrl\">\n                </div>\n            </adf-empty-list>\n            <ng-content select=\"adf-custom-empty-content-template, empty-folder-content\"></ng-content>\n        </ng-template>\n    </adf-no-content-template>\n\n    <adf-no-permission-template>\n        <ng-template>\n            <div class=\"adf-no-permission__template\" *ngIf=\"!customNoPermissionsTemplate\">\n                <mat-icon>error</mat-icon>\n                <p class=\"adf-no-permission__template--text\">{{ 'ADF-DOCUMENT-LIST.NO_PERMISSION' | translate }}</p>\n            </div>\n            <ng-content select=\"adf-custom-no-permission-template, no-permission-content\"></ng-content>\n        </ng-template>\n    </adf-no-permission-template>\n\n    <adf-loading-content-template>\n        <ng-template>\n            <div class=\"adf-document-list-loading-container\" *ngIf=\"!customLoadingContent\">\n                <mat-progress-spinner\n                    id=\"adf-document-list-loading\"\n                    class=\"adf-document-list-loading-margin\"\n                    [color]=\"'primary'\"\n                    [mode]=\"'indeterminate'\">\n                </mat-progress-spinner>\n            </div>\n            <ng-content select=\"adf-custom-loading-content-template\"></ng-content>\n        </ng-template>\n    </adf-loading-content-template>\n\n</adf-datatable>\n",
                encapsulation: i0.ViewEncapsulation.None,
                host: { class: 'adf-document-list' },
                styles: [".adf-document-list{background-color:var(--theme-background-color);height:100%;min-height:0}.mat-icon.adf-datatable-selected{height:100%;margin-left:-2px;margin-top:2px;width:100%}.adf-sticky-document-list{height:310px;overflow-y:auto}.adf-datatable-card .adf-datatable-selected>svg{fill:var(--theme-accent-color);height:30px;position:absolute;top:10px;width:30px}.adf-datatable-list .adf-datatable-selected>svg{fill:var(--theme-accent-color);height:30px;width:30px}.adf-document-list_empty_template{margin-bottom:20px;margin-top:20px;text-align:center}.adf-no-permission__template{align-items:center;display:flex;flex-direction:column;height:100%;justify-content:center;min-height:300px;width:100%}.adf-no-permission__template mat-icon{font-size:52px;height:52px;width:52px}.adf-no-permission__template--text{color:var(--theme-text-fg-color);font-size:16px}.adf-document-list__this-space-is-empty{color:var(--theme-text-fg-color);font-size:24px;height:32px;letter-spacing:-1px;line-height:1.33;opacity:.26}.adf-document-list__drag-drop{color:var(--theme-text-fg-color);font-size:56px;height:56px;letter-spacing:-2px;line-height:1;margin-top:40px;opacity:.54}.adf-document-list__any-files-here-to-add{color:var(--theme-text-fg-color);font-size:16px;height:24px;letter-spacing:-.4px;line-height:1.5;margin-top:17px;opacity:.54}.adf-document-list__empty_doc_lib{height:161px;margin-top:17px;object-fit:contain;width:565px}.adf-document-list-loading-margin{margin:auto}.adf-document-list-loading-container{display:flex;flex-direction:row;height:100%;min-height:300px}.adf-empty-list-header{font-size:24px;height:32px;letter-spacing:-1px;line-height:1.33;opacity:.26!important}.adf-documentlist-pagination,.adf-empty-list-header{color:var(--theme-text-fg-color)}.adf-documentlist-pagination .adf-pagination__block{border-right:none}.adf-empty-folder-this-space-is-empty{color:var(--theme-text-color);font-size:24px;height:32px;letter-spacing:-1px;line-height:1.33}.adf-empty-folder-drag-drop{color:var(--theme-foreground-text-color);font-size:53px;letter-spacing:-2px;line-height:1;margin-top:40px;min-height:56px;white-space:pre-line;word-break:break-all}@media screen and (max-width:599px){.adf-empty-folder-drag-drop{font-size:48px}}.adf-empty-folder-any-files-here-to-add{color:var(--theme-foreground-text-color);font-size:16px;letter-spacing:-.4px;line-height:1.5;margin-top:17px;min-height:24px;white-space:pre-line;word-break:break-all}.adf-empty-folder-image{margin-top:17px;max-width:100%;object-fit:contain;width:565px}@media screen and (max-width:599px){.adf-empty-folder-image{width:250px}}.adf-datatable-gallery-thumbnails .adf-datatable-card .adf-datatable-row{height:300px!important}.adf-datatable-gallery-thumbnails .adf-datatable-card .adf-datatable-row img{height:130px}.adf-datatable-gallery-thumbnails .adf-datatable-card .adf-datatable-row .adf-datatable-cell{overflow:visible}.adf-datatable-gallery-thumbnails .adf-datatable-card .adf-datatable-row .adf-datatable-cell.adf-datatable-cell--image{display:flex;flex:0 0 auto;flex-direction:column-reverse;justify-content:space-between}.adf-datatable-gallery-thumbnails .adf-datatable-card .adf-datatable-row .adf-datatable-cell.adf-datatable-cell--image .adf-cell-value{display:flex;justify-content:center}"]
            }]
    }], function () { return [{ type: DocumentListService }, { type: ɵngcc0.NgZone }, { type: ɵngcc0.ElementRef }, { type: ɵngcc21.AppConfigService }, { type: ɵngcc21.UserPreferencesService }, { type: ɵngcc21.ContentService }, { type: ɵngcc21.ThumbnailService }, { type: ɵngcc21.AlfrescoApiService }, { type: ɵngcc21.LockService }]; }, { display: [{
            type: i0.Input
        }], permissionsStyle: [{
            type: i0.Input
        }], locationFormat: [{
            type: i0.Input
        }], navigate: [{
            type: i0.Input
        }], showHeader: [{
            type: i0.Input
        }], navigationMode: [{
            type: i0.Input
        }], thumbnails: [{
            type: i0.Input
        }], selectionMode: [{
            type: i0.Input
        }], multiselect: [{
            type: i0.Input
        }], contentActions: [{
            type: i0.Input
        }], contentActionsPosition: [{
            type: i0.Input
        }], contextMenuActions: [{
            type: i0.Input
        }], emptyFolderImageUrl: [{
            type: i0.Input
        }], allowDropFiles: [{
            type: i0.Input
        }], sorting: [{
            type: i0.Input
        }], additionalSorting: [{
            type: i0.Input
        }], sortingMode: [{
            type: i0.Input
        }], loading: [{
            type: i0.Input
        }], _rowFilter: [{
            type: i0.Input
        }], imageResolver: [{
            type: i0.Input
        }], stickyHeader: [{
            type: i0.Input
        }], headerFilters: [{
            type: i0.Input
        }], currentFolderId: [{
            type: i0.Input
        }], preselectNodes: [{
            type: i0.Input
        }], node: [{
            type: i0.Input
        }], maxItems: [{
            type: i0.Input
        }], nodeClick: [{
            type: i0.Output
        }], nodeDblClick: [{
            type: i0.Output
        }], folderChange: [{
            type: i0.Output
        }], preview: [{
            type: i0.Output
        }], ready: [{
            type: i0.Output
        }], error: [{
            type: i0.Output
        }], nodeSelected: [{
            type: i0.Output
        }], filterSelection: [{
            type: i0.Output
        }], rowFilter: [{
            type: i0.Input
        }], onShowContextMenu: [{
            type: i0.HostListener,
            args: ['contextmenu', ['$event']]
        }], columnList: [{
            type: i0.ContentChild,
            args: [i1.DataColumnListComponent]
        }], customLoadingContent: [{
            type: i0.ContentChild,
            args: [i1.CustomLoadingContentTemplateDirective]
        }], customNoPermissionsTemplate: [{
            type: i0.ContentChild,
            args: [i1.CustomNoPermissionTemplateDirective]
        }], customNoContentTemplate: [{
            type: i0.ContentChild,
            args: [i1.CustomEmptyContentTemplateDirective]
        }], includeFields: [{
            type: i0.Input
        }], where: [{
            type: i0.Input
        }], rowStyle: [{
            type: i0.Input
        }], rowStyleClass: [{
            type: i0.Input
        }], filterValue: [{
            type: i0.Input
        }], dataTable: [{
            type: i0.ViewChild,
            args: ['dataTable', { static: true }]
        }] }); })();
        return DocumentListComponent;
    }());
    DocumentListComponent.SINGLE_CLICK_NAVIGATION = 'click';
    DocumentListComponent.DOUBLE_CLICK_NAVIGATION = 'dblclick';
    DocumentListComponent.ctorParameters = function () { return [
        { type: DocumentListService },
        { type: i0.NgZone },
        { type: i0.ElementRef },
        { type: i1.AppConfigService },
        { type: i1.UserPreferencesService },
        { type: i1.ContentService },
        { type: i1.ThumbnailService },
        { type: i1.AlfrescoApiService },
        { type: i1.LockService }
    ]; };
    DocumentListComponent.propDecorators = {
        columnList: [{ type: i0.ContentChild, args: [i1.DataColumnListComponent,] }],
        customLoadingContent: [{ type: i0.ContentChild, args: [i1.CustomLoadingContentTemplateDirective,] }],
        customNoPermissionsTemplate: [{ type: i0.ContentChild, args: [i1.CustomNoPermissionTemplateDirective,] }],
        customNoContentTemplate: [{ type: i0.ContentChild, args: [i1.CustomEmptyContentTemplateDirective,] }],
        includeFields: [{ type: i0.Input }],
        where: [{ type: i0.Input }],
        display: [{ type: i0.Input }],
        permissionsStyle: [{ type: i0.Input }],
        locationFormat: [{ type: i0.Input }],
        navigate: [{ type: i0.Input }],
        showHeader: [{ type: i0.Input }],
        navigationMode: [{ type: i0.Input }],
        thumbnails: [{ type: i0.Input }],
        selectionMode: [{ type: i0.Input }],
        multiselect: [{ type: i0.Input }],
        contentActions: [{ type: i0.Input }],
        contentActionsPosition: [{ type: i0.Input }],
        contextMenuActions: [{ type: i0.Input }],
        emptyFolderImageUrl: [{ type: i0.Input }],
        allowDropFiles: [{ type: i0.Input }],
        sorting: [{ type: i0.Input }],
        additionalSorting: [{ type: i0.Input }],
        sortingMode: [{ type: i0.Input }],
        rowStyle: [{ type: i0.Input }],
        rowStyleClass: [{ type: i0.Input }],
        loading: [{ type: i0.Input }],
        _rowFilter: [{ type: i0.Input }],
        rowFilter: [{ type: i0.Input }],
        imageResolver: [{ type: i0.Input }],
        stickyHeader: [{ type: i0.Input }],
        headerFilters: [{ type: i0.Input }],
        filterValue: [{ type: i0.Input }],
        currentFolderId: [{ type: i0.Input }],
        preselectNodes: [{ type: i0.Input }],
        node: [{ type: i0.Input }],
        maxItems: [{ type: i0.Input }],
        nodeClick: [{ type: i0.Output }],
        nodeDblClick: [{ type: i0.Output }],
        folderChange: [{ type: i0.Output }],
        preview: [{ type: i0.Output }],
        ready: [{ type: i0.Output }],
        error: [{ type: i0.Output }],
        nodeSelected: [{ type: i0.Output }],
        filterSelection: [{ type: i0.Output }],
        dataTable: [{ type: i0.ViewChild, args: ['dataTable', { static: true },] }],
        onShowContextMenu: [{ type: i0.HostListener, args: ['contextmenu', ['$event'],] }]
    };

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var PermissionModel = /** @class */ (function () {
        function PermissionModel(obj) {
            if (obj) {
                this.type = obj.type || null;
                this.action = obj.action || null;
                this.permission = obj.permission || null;
            }
        }
        return PermissionModel;
    }());

    var NodeActionsService = /** @class */ (function () {
        function NodeActionsService(contentDialogService, dialogRef, content, documentListService, apiService, dialog, downloadService) {
            this.contentDialogService = contentDialogService;
            this.dialogRef = dialogRef;
            this.content = content;
            this.documentListService = documentListService;
            this.apiService = apiService;
            this.dialog = dialog;
            this.downloadService = downloadService;
            this.error = new i0.EventEmitter();
        }
        NodeActionsService.prototype.downloadNode = function (node) {
            new i1.NodeDownloadDirective(this.apiService, this.downloadService, this.dialog)
                .downloadNode(node);
        };
        NodeActionsService.prototype.copyContent = function (contentEntry, permission) {
            return this.doFileOperation(exports.NodeAction.COPY, 'content', contentEntry, permission);
        };
        NodeActionsService.prototype.copyFolder = function (contentEntry, permission) {
            return this.doFileOperation(exports.NodeAction.COPY, 'folder', contentEntry, permission);
        };
        NodeActionsService.prototype.moveContent = function (contentEntry, permission) {
            return this.doFileOperation(exports.NodeAction.MOVE, 'content', contentEntry, permission);
        };
        NodeActionsService.prototype.moveFolder = function (contentEntry, permission) {
            return this.doFileOperation(exports.NodeAction.MOVE, 'folder', contentEntry, permission);
        };
        NodeActionsService.prototype.doFileOperation = function (action, type, contentEntry, permission) {
            var _this = this;
            var observable = new rxjs.Subject();
            this.contentDialogService
                .openCopyMoveDialog(action, contentEntry, permission)
                .subscribe(function (selections) {
                var selection = selections[0];
                _this.documentListService[action.toLowerCase() + "Node"].call(_this.documentListService, contentEntry.id, selection.id)
                    .subscribe(observable.next.bind(observable, "OPERATION.SUCCESS." + type.toUpperCase() + "." + action), observable.error.bind(observable));
            }, function (error) {
                observable.error(error);
                return observable;
            });
            return observable;
        };
NodeActionsService.ɵfac = function NodeActionsService_Factory(t) { return new (t || NodeActionsService)(ɵngcc0.ɵɵinject(ContentNodeDialogService), ɵngcc0.ɵɵinject(ɵngcc3.MatDialog), ɵngcc0.ɵɵinject(ɵngcc21.ContentService), ɵngcc0.ɵɵinject(DocumentListService), ɵngcc0.ɵɵinject(ɵngcc21.AlfrescoApiService), ɵngcc0.ɵɵinject(ɵngcc3.MatDialog), ɵngcc0.ɵɵinject(ɵngcc21.DownloadService)); };
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NodeActionsService, [{
        type: i0.Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ContentNodeDialogService }, { type: ɵngcc3.MatDialog }, { type: ɵngcc21.ContentService }, { type: DocumentListService }, { type: ɵngcc21.AlfrescoApiService }, { type: ɵngcc3.MatDialog }, { type: ɵngcc21.DownloadService }]; }, { error: [{
            type: i0.Output
        }] }); })();
        return NodeActionsService;
    }());
    NodeActionsService.ɵprov = i0.ɵɵdefineInjectable({ factory: function NodeActionsService_Factory() { return new NodeActionsService(i0.ɵɵinject(ContentNodeDialogService), i0.ɵɵinject(i2.MatDialog), i0.ɵɵinject(i1.ContentService), i0.ɵɵinject(DocumentListService), i0.ɵɵinject(i1.AlfrescoApiService), i0.ɵɵinject(i2.MatDialog), i0.ɵɵinject(i1.DownloadService)); }, token: NodeActionsService, providedIn: "root" });
    NodeActionsService.ctorParameters = function () { return [
        { type: ContentNodeDialogService },
        { type: i2.MatDialog },
        { type: i1.ContentService },
        { type: DocumentListService },
        { type: i1.AlfrescoApiService },
        { type: i2.MatDialog },
        { type: i1.DownloadService }
    ]; };
    NodeActionsService.propDecorators = {
        error: [{ type: i0.Output }]
    };

    var DocumentActionsService = /** @class */ (function () {
        function DocumentActionsService(nodeActionsService, contentNodeDialogService, translation, documentListService, contentService) {
            this.nodeActionsService = nodeActionsService;
            this.contentNodeDialogService = contentNodeDialogService;
            this.translation = translation;
            this.documentListService = documentListService;
            this.contentService = contentService;
            this.permissionEvent = new rxjs.Subject();
            this.error = new rxjs.Subject();
            this.success = new rxjs.Subject();
            this.handlers = {};
            this.setupActionHandlers();
        }
        DocumentActionsService.prototype.getHandler = function (key) {
            if (key) {
                var lKey = key.toLowerCase();
                return this.handlers[lKey] || null;
            }
            return null;
        };
        DocumentActionsService.prototype.setHandler = function (key, handler) {
            if (key) {
                var lKey = key.toLowerCase();
                this.handlers[lKey] = handler;
                return true;
            }
            return false;
        };
        DocumentActionsService.prototype.canExecuteAction = function (nodeEntry) {
            return this.documentListService && nodeEntry && nodeEntry.entry.isFile === true;
        };
        DocumentActionsService.prototype.setupActionHandlers = function () {
            this.handlers['copy'] = this.copyNode.bind(this);
            this.handlers['move'] = this.moveNode.bind(this);
            this.handlers['delete'] = this.deleteNode.bind(this);
            this.handlers['download'] = this.downloadNode.bind(this);
            this.handlers['lock'] = this.lockNode.bind(this);
        };
        DocumentActionsService.prototype.lockNode = function (node) {
            return this.contentNodeDialogService.openLockNodeDialog(node.entry);
        };
        DocumentActionsService.prototype.downloadNode = function (obj) {
            this.nodeActionsService.downloadNode(obj);
        };
        DocumentActionsService.prototype.copyNode = function (node, _target, permission) {
            var actionObservable = this.nodeActionsService.copyContent(node.entry, permission);
            this.prepareHandlers(actionObservable);
            return actionObservable;
        };
        DocumentActionsService.prototype.moveNode = function (node, _target, permission) {
            var actionObservable = this.nodeActionsService.moveContent(node.entry, permission);
            this.prepareHandlers(actionObservable);
            return actionObservable;
        };
        DocumentActionsService.prototype.prepareHandlers = function (actionObservable) {
            var _this = this;
            actionObservable.subscribe(function (fileOperationMessage) {
                _this.success.next(fileOperationMessage);
            }, this.error.next.bind(this.error));
        };
        DocumentActionsService.prototype.deleteNode = function (node, _target, permission) {
            var _this = this;
            if (this.canExecuteAction(node)) {
                if (this.contentService.hasAllowableOperations(node.entry, permission)) {
                    var handlerObservable = this.documentListService.deleteNode(node.entry.id);
                    handlerObservable.subscribe(function () {
                        var message = _this.translation.instant('CORE.DELETE_NODE.SINGULAR', { name: node.entry.name });
                        _this.success.next(message);
                    }, function () {
                        var message = _this.translation.instant('CORE.DELETE_NODE.ERROR_SINGULAR', { name: node.entry.name });
                        _this.error.next(message);
                    });
                    return handlerObservable;
                }
                else {
                    this.permissionEvent.next(new PermissionModel({
                        type: 'content',
                        action: 'delete',
                        permission: permission
                    }));
                    return rxjs.throwError(new Error('No permission to delete'));
                }
            }
            return rxjs.of();
        };
DocumentActionsService.ɵfac = function DocumentActionsService_Factory(t) { return new (t || DocumentActionsService)(ɵngcc0.ɵɵinject(NodeActionsService), ɵngcc0.ɵɵinject(ContentNodeDialogService), ɵngcc0.ɵɵinject(ɵngcc21.TranslationService), ɵngcc0.ɵɵinject(DocumentListService), ɵngcc0.ɵɵinject(ɵngcc21.ContentService)); };
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DocumentActionsService, [{
        type: i0.Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: NodeActionsService }, { type: ContentNodeDialogService }, { type: ɵngcc21.TranslationService }, { type: DocumentListService }, { type: ɵngcc21.ContentService }]; }, null); })();
        return DocumentActionsService;
    }());
    DocumentActionsService.ɵprov = i0.ɵɵdefineInjectable({ factory: function DocumentActionsService_Factory() { return new DocumentActionsService(i0.ɵɵinject(NodeActionsService), i0.ɵɵinject(ContentNodeDialogService), i0.ɵɵinject(i1.TranslationService), i0.ɵɵinject(DocumentListService), i0.ɵɵinject(i1.ContentService)); }, token: DocumentActionsService, providedIn: "root" });
    DocumentActionsService.ctorParameters = function () { return [
        { type: NodeActionsService },
        { type: ContentNodeDialogService },
        { type: i1.TranslationService },
        { type: DocumentListService },
        { type: i1.ContentService }
    ]; };

    var FolderActionsService = /** @class */ (function () {
        function FolderActionsService(nodeActionsService, documentListService, contentService, translation) {
            this.nodeActionsService = nodeActionsService;
            this.documentListService = documentListService;
            this.contentService = contentService;
            this.translation = translation;
            this.permissionEvent = new rxjs.Subject();
            this.error = new rxjs.Subject();
            this.success = new rxjs.Subject();
            this.handlers = {};
            this.setupActionHandlers();
        }
        FolderActionsService.prototype.getHandler = function (key) {
            if (key) {
                var lKey = key.toLowerCase();
                return this.handlers[lKey] || null;
            }
            return null;
        };
        FolderActionsService.prototype.setHandler = function (key, handler) {
            if (key) {
                var lKey = key.toLowerCase();
                this.handlers[lKey] = handler;
                return true;
            }
            return false;
        };
        FolderActionsService.prototype.canExecuteAction = function (nodeEntry) {
            return this.documentListService && nodeEntry && nodeEntry.entry.isFolder === true;
        };
        FolderActionsService.prototype.setupActionHandlers = function () {
            this.handlers['copy'] = this.copyNode.bind(this);
            this.handlers['move'] = this.moveNode.bind(this);
            this.handlers['delete'] = this.deleteNode.bind(this);
            this.handlers['download'] = this.downloadNode.bind(this);
        };
        FolderActionsService.prototype.downloadNode = function (nodeEntry) {
            this.nodeActionsService.downloadNode(nodeEntry);
        };
        FolderActionsService.prototype.copyNode = function (nodeEntry, target, permission) {
            var actionObservable = this.nodeActionsService.copyFolder(nodeEntry.entry, permission);
            this.prepareHandlers(actionObservable, target);
            return actionObservable;
        };
        FolderActionsService.prototype.moveNode = function (nodeEntry, target, permission) {
            var actionObservable = this.nodeActionsService.moveFolder(nodeEntry.entry, permission);
            this.prepareHandlers(actionObservable, target);
            return actionObservable;
        };
        FolderActionsService.prototype.prepareHandlers = function (actionObservable, target) {
            var _this = this;
            actionObservable.subscribe(function (fileOperationMessage) {
                if (target && typeof target.reload === 'function') {
                    target.reload();
                }
                _this.success.next(fileOperationMessage);
            }, this.error.next.bind(this.error));
        };
        FolderActionsService.prototype.deleteNode = function (node, target, permission) {
            var _this = this;
            if (this.canExecuteAction(node)) {
                if (this.contentService.hasAllowableOperations(node.entry, permission)) {
                    var handlerObservable = this.documentListService.deleteNode(node.entry.id);
                    handlerObservable.subscribe(function () {
                        if (target && typeof target.reload === 'function') {
                            target.reload();
                        }
                        var message = _this.translation.instant('CORE.DELETE_NODE.SINGULAR', { name: node.entry.name });
                        _this.success.next(message);
                    }, function () {
                        var message = _this.translation.instant('CORE.DELETE_NODE.ERROR_SINGULAR', { name: node.entry.name });
                        _this.error.next(message);
                    });
                    return handlerObservable;
                }
                else {
                    this.permissionEvent.next(new PermissionModel({ type: 'folder', action: 'delete', permission: permission }));
                    return rxjs.throwError(new Error('No permission to delete'));
                }
            }
            return rxjs.of();
        };
FolderActionsService.ɵfac = function FolderActionsService_Factory(t) { return new (t || FolderActionsService)(ɵngcc0.ɵɵinject(NodeActionsService), ɵngcc0.ɵɵinject(DocumentListService), ɵngcc0.ɵɵinject(ɵngcc21.ContentService), ɵngcc0.ɵɵinject(ɵngcc21.TranslationService)); };
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FolderActionsService, [{
        type: i0.Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: NodeActionsService }, { type: DocumentListService }, { type: ɵngcc21.ContentService }, { type: ɵngcc21.TranslationService }]; }, null); })();
        return FolderActionsService;
    }());
    FolderActionsService.ɵprov = i0.ɵɵdefineInjectable({ factory: function FolderActionsService_Factory() { return new FolderActionsService(i0.ɵɵinject(NodeActionsService), i0.ɵɵinject(DocumentListService), i0.ɵɵinject(i1.ContentService), i0.ɵɵinject(i1.TranslationService)); }, token: FolderActionsService, providedIn: "root" });
    FolderActionsService.ctorParameters = function () { return [
        { type: NodeActionsService },
        { type: DocumentListService },
        { type: i1.ContentService },
        { type: i1.TranslationService }
    ]; };

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var ContentActionListComponent = /** @class */ (function () {
        function ContentActionListComponent(documentList) {
            this.documentList = documentList;
        }
        ContentActionListComponent.prototype.registerAction = function (action) {
            if (this.documentList && action) {
                this.documentList.actions.push(action);
                return true;
            }
            return false;
        };
        ContentActionListComponent.prototype.unregisterAction = function (action) {
            if (this.documentList && action) {
                var idx = this.documentList.actions.indexOf(action);
                if (idx >= 0) {
                    this.documentList.actions.splice(idx, 1);
                    return true;
                }
            }
            return false;
        };
ContentActionListComponent.ɵfac = function ContentActionListComponent_Factory(t) { return new (t || ContentActionListComponent)(ɵngcc0.ɵɵdirectiveInject(DocumentListComponent)); };
ContentActionListComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ContentActionListComponent, selectors: [["content-actions"]], decls: 0, vars: 0, template: function ContentActionListComponent_Template(rf, ctx) { }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ContentActionListComponent, [{
        type: i0.Component,
        args: [{
                selector: 'content-actions',
                template: ''
            }]
    }], function () { return [{ type: DocumentListComponent }]; }, null); })();
        return ContentActionListComponent;
    }());
    ContentActionListComponent.ctorParameters = function () { return [
        { type: DocumentListComponent }
    ]; };

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var ContentActionComponent = /** @class */ (function () {
        function ContentActionComponent(list, documentActions, folderActions) {
            this.list = list;
            this.documentActions = documentActions;
            this.folderActions = folderActions;
            this.title = 'Action';
            this.visible = true;
            this.target = exports.ContentActionTarget.All;
            this.disabled = false;
            this.execute = new i0.EventEmitter();
            this.permissionEvent = new i0.EventEmitter();
            this.error = new i0.EventEmitter();
            this.success = new i0.EventEmitter();
            this.subscriptions = [];
        }
        ContentActionComponent.prototype.ngOnInit = function () {
            if (this.target === exports.ContentActionTarget.All) {
                this.folderActionModel = this.generateAction(exports.ContentActionTarget.Folder);
                this.documentActionModel = this.generateAction(exports.ContentActionTarget.Document);
            }
            else {
                this.documentActionModel = this.generateAction(this.target);
            }
        };
        ContentActionComponent.prototype.ngOnChanges = function (changes) {
            if (changes.visible && !changes.visible.firstChange) {
                if (this.documentActionModel) {
                    this.documentActionModel.visible = changes.visible.currentValue;
                }
                if (this.folderActionModel) {
                    this.folderActionModel.visible = changes.visible.currentValue;
                }
            }
            if (changes.disabled && !changes.disabled.firstChange) {
                if (this.documentActionModel) {
                    this.documentActionModel.disabled = changes.disabled.currentValue;
                }
                if (this.folderActionModel) {
                    this.folderActionModel.disabled = changes.disabled.currentValue;
                }
            }
        };
        ContentActionComponent.prototype.ngOnDestroy = function () {
            this.subscriptions.forEach(function (subscription) { return subscription.unsubscribe(); });
            this.subscriptions = [];
            if (this.documentActionModel) {
                this.unregister(this.documentActionModel);
                this.documentActionModel = null;
            }
            if (this.folderActionModel) {
                this.unregister(this.folderActionModel);
                this.folderActionModel = null;
            }
        };
        ContentActionComponent.prototype.register = function (model) {
            if (this.list) {
                return this.list.registerAction(model);
            }
            return false;
        };
        ContentActionComponent.prototype.unregister = function (model) {
            if (this.list) {
                return this.list.unregisterAction(model);
            }
            return false;
        };
        ContentActionComponent.prototype.generateAction = function (target) {
            var _this = this;
            var model = new ContentActionModel({
                title: this.title,
                icon: this.icon,
                permission: this.permission,
                disableWithNoPermission: this.disableWithNoPermission,
                target: target,
                disabled: this.disabled,
                visible: this.visible
            });
            if (this.handler) {
                model.handler = this.getSystemHandler(target, this.handler);
            }
            if (this.execute) {
                model.execute = function (value) {
                    _this.execute.emit({ value: value });
                };
            }
            this.register(model);
            return model;
        };
        ContentActionComponent.prototype.getSystemHandler = function (target, name) {
            var _this = this;
            if (target) {
                target = target.toLowerCase();
                if (target === exports.ContentActionTarget.Document) {
                    if (this.documentActions) {
                        this.subscriptions.push(this.documentActions.permissionEvent.subscribe(function (permission) {
                            _this.permissionEvent.emit(permission);
                        }), this.documentActions.error.subscribe(function (errors) {
                            _this.error.emit(errors);
                        }), this.documentActions.success.subscribe(function (message) {
                            _this.success.emit(message);
                        }));
                        return this.documentActions.getHandler(name);
                    }
                    return null;
                }
                if (target === exports.ContentActionTarget.Folder) {
                    if (this.folderActions) {
                        this.subscriptions.push(this.folderActions.permissionEvent.subscribe(function (permission) {
                            _this.permissionEvent.emit(permission);
                        }), this.folderActions.error.subscribe(function (errors) {
                            _this.error.emit(errors);
                        }), this.folderActions.success.subscribe(function (message) {
                            _this.success.emit(message);
                        }));
                        return this.folderActions.getHandler(name);
                    }
                    return null;
                }
            }
            return null;
        };
ContentActionComponent.ɵfac = function ContentActionComponent_Factory(t) { return new (t || ContentActionComponent)(ɵngcc0.ɵɵdirectiveInject(ContentActionListComponent), ɵngcc0.ɵɵdirectiveInject(DocumentActionsService), ɵngcc0.ɵɵdirectiveInject(FolderActionsService)); };
ContentActionComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ContentActionComponent, selectors: [["content-action"]], inputs: { title: "title", visible: "visible", target: "target", disabled: "disabled", icon: "icon", handler: "handler", permission: "permission", disableWithNoPermission: "disableWithNoPermission" }, outputs: { execute: "execute", permissionEvent: "permissionEvent", error: "error", success: "success" }, features: [ɵngcc0.ɵɵProvidersFeature([
            DocumentActionsService,
            FolderActionsService
        ]), ɵngcc0.ɵɵNgOnChangesFeature], decls: 0, vars: 0, template: function ContentActionComponent_Template(rf, ctx) { }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ContentActionComponent, [{
        type: i0.Component,
        args: [{
                selector: 'content-action',
                template: '',
                providers: [
                    DocumentActionsService,
                    FolderActionsService
                ]
            }]
    }], function () { return [{ type: ContentActionListComponent }, { type: DocumentActionsService }, { type: FolderActionsService }]; }, { title: [{
            type: i0.Input
        }], visible: [{
            type: i0.Input
        }], target: [{
            type: i0.Input
        }], disabled: [{
            type: i0.Input
        }], execute: [{
            type: i0.Output
        }], permissionEvent: [{
            type: i0.Output
        }], error: [{
            type: i0.Output
        }], success: [{
            type: i0.Output
        }], icon: [{
            type: i0.Input
        }], handler: [{
            type: i0.Input
        }], permission: [{
            type: i0.Input
        }], disableWithNoPermission: [{
            type: i0.Input
        }] }); })();
        return ContentActionComponent;
    }());
    ContentActionComponent.ctorParameters = function () { return [
        { type: ContentActionListComponent },
        { type: DocumentActionsService },
        { type: FolderActionsService }
    ]; };
    ContentActionComponent.propDecorators = {
        title: [{ type: i0.Input }],
        icon: [{ type: i0.Input }],
        visible: [{ type: i0.Input }],
        handler: [{ type: i0.Input }],
        target: [{ type: i0.Input }],
        permission: [{ type: i0.Input }],
        disableWithNoPermission: [{ type: i0.Input }],
        disabled: [{ type: i0.Input }],
        execute: [{ type: i0.Output }],
        permissionEvent: [{ type: i0.Output }],
        error: [{ type: i0.Output }],
        success: [{ type: i0.Output }]
    };

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var LibraryNameColumnComponent = /** @class */ (function () {
        function LibraryNameColumnComponent(element, alfrescoApiService) {
            this.element = element;
            this.alfrescoApiService = alfrescoApiService;
            this.displayTooltip$ = new rxjs.BehaviorSubject('');
            this.displayText$ = new rxjs.BehaviorSubject('');
            this.onDestroy$ = new rxjs.Subject();
        }
        LibraryNameColumnComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.updateValue();
            this.alfrescoApiService.nodeUpdated
                .pipe(operators.takeUntil(this.onDestroy$))
                .subscribe(function (node) {
                var row = _this.context.row;
                if (row) {
                    var entry = row.node.entry;
                    if (entry === node) {
                        row.node = { entry: entry };
                        _this.updateValue();
                    }
                }
            });
        };
        LibraryNameColumnComponent.prototype.updateValue = function () {
            this.node = this.context.row.node;
            var rows = this.context.data.rows || [];
            if (this.node && this.node.entry) {
                this.displayText$.next(this.makeLibraryTitle(this.node.entry, rows));
                this.displayTooltip$.next(this.makeLibraryTooltip(this.node.entry));
            }
        };
        LibraryNameColumnComponent.prototype.onClick = function () {
            this.element.nativeElement.dispatchEvent(new CustomEvent('name-click', {
                bubbles: true,
                detail: {
                    node: this.node
                }
            }));
        };
        LibraryNameColumnComponent.prototype.makeLibraryTooltip = function (library) {
            var description = library.description, title = library.title;
            return description || title || '';
        };
        LibraryNameColumnComponent.prototype.makeLibraryTitle = function (library, rows) {
            var entries = rows.map(function (row) { return row.node.entry; });
            var title = library.title, id = library.id;
            var isDuplicate = false;
            if (entries) {
                isDuplicate = entries.some(function (entry) {
                    return entry.id !== id && entry.title === title;
                });
            }
            return isDuplicate ? title + " (" + id + ")" : "" + title;
        };
        LibraryNameColumnComponent.prototype.ngOnDestroy = function () {
            this.onDestroy$.next(true);
            this.onDestroy$.complete();
        };
LibraryNameColumnComponent.ɵfac = function LibraryNameColumnComponent_Factory(t) { return new (t || LibraryNameColumnComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc21.AlfrescoApiService)); };
LibraryNameColumnComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: LibraryNameColumnComponent, selectors: [["adf-library-name-column"]], hostAttrs: [1, "adf-datatable-content-cell", "adf-datatable-link", "adf-library-name-column"], inputs: { context: "context" }, decls: 6, vars: 14, consts: [["role", "link", 1, "adf-datatable-cell-value", 3, "title", "click"]], template: function LibraryNameColumnComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "span", 0);
        ɵngcc0.ɵɵlistener("click", function LibraryNameColumnComponent_Template_span_click_0_listener() { return ctx.onClick(); });
        ɵngcc0.ɵɵpipe(1, "translate");
        ɵngcc0.ɵɵpipe(2, "async");
        ɵngcc0.ɵɵpipe(3, "async");
        ɵngcc0.ɵɵtext(4);
        ɵngcc0.ɵɵpipe(5, "async");
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(3, 8, ctx.displayTooltip$));
        ɵngcc0.ɵɵattribute("aria-label", ɵngcc0.ɵɵpipeBind2(1, 3, "NAME_COLUMN_LINK.ACCESSIBILITY.ARIA_LABEL", ɵngcc0.ɵɵpureFunction1(12, _c8, ɵngcc0.ɵɵpipeBind1(2, 6, ctx.displayText$))));
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(5, 10, ctx.displayText$), " ");
    } }, pipes: [ɵngcc25.TranslatePipe, ɵngcc23.AsyncPipe], encapsulation: 2, changeDetection: 0 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(LibraryNameColumnComponent, [{
        type: i0.Component,
        args: [{
                selector: 'adf-library-name-column',
                template: "\n        <span\n            role=\"link\"\n            [attr.aria-label]=\"'NAME_COLUMN_LINK.ACCESSIBILITY.ARIA_LABEL' | translate:{\n                name:  displayText$ | async\n            }\"\n            class=\"adf-datatable-cell-value\"\n            title=\"{{ displayTooltip$ | async }}\"\n            (click)=\"onClick()\">\n\n            {{ displayText$ | async }}\n        </span>\n    ",
                changeDetection: i0.ChangeDetectionStrategy.OnPush,
                encapsulation: i0.ViewEncapsulation.None,
                host: {
                    class: 'adf-datatable-content-cell adf-datatable-link adf-library-name-column'
                }
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc21.AlfrescoApiService }]; }, { context: [{
            type: i0.Input
        }] }); })();
        return LibraryNameColumnComponent;
    }());
    LibraryNameColumnComponent.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: i1.AlfrescoApiService }
    ]; };
    LibraryNameColumnComponent.propDecorators = {
        context: [{ type: i0.Input }]
    };

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var LibraryRoleColumnComponent = /** @class */ (function () {
        function LibraryRoleColumnComponent(api) {
            this.api = api;
            this.displayText$ = new rxjs.BehaviorSubject('');
            this.onDestroy$ = new rxjs.Subject();
        }
        LibraryRoleColumnComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.updateValue();
            this.api.nodeUpdated
                .pipe(operators.takeUntil(this.onDestroy$))
                .subscribe(function (node) {
                var row = _this.context.row;
                if (row) {
                    var entry = row.node.entry;
                    if (entry === node) {
                        row.node = { entry: entry };
                        _this.updateValue();
                    }
                }
            });
        };
        LibraryRoleColumnComponent.prototype.updateValue = function () {
            var node = this.context.row.node;
            if (node && node.entry) {
                var role = node.entry.role;
                switch (role) {
                    case jsApi.Site.RoleEnum.SiteManager:
                        this.displayText$.next('LIBRARY.ROLE.MANAGER');
                        break;
                    case jsApi.Site.RoleEnum.SiteCollaborator:
                        this.displayText$.next('LIBRARY.ROLE.COLLABORATOR');
                        break;
                    case jsApi.Site.RoleEnum.SiteContributor:
                        this.displayText$.next('LIBRARY.ROLE.CONTRIBUTOR');
                        break;
                    case jsApi.Site.RoleEnum.SiteConsumer:
                        this.displayText$.next('LIBRARY.ROLE.CONSUMER');
                        break;
                    default:
                        this.displayText$.next('LIBRARY.ROLE.NONE');
                        break;
                }
            }
        };
        LibraryRoleColumnComponent.prototype.ngOnDestroy = function () {
            this.onDestroy$.next(true);
            this.onDestroy$.complete();
        };
LibraryRoleColumnComponent.ɵfac = function LibraryRoleColumnComponent_Factory(t) { return new (t || LibraryRoleColumnComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc21.AlfrescoApiService)); };
LibraryRoleColumnComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: LibraryRoleColumnComponent, selectors: [["adf-library-role-column"]], hostAttrs: [1, "adf-library-role-column", "adf-datatable-content-cell"], inputs: { context: "context" }, decls: 6, vars: 10, consts: [[1, "adf-datatable-cell-value", 3, "title"]], template: function LibraryRoleColumnComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "span", 0);
        ɵngcc0.ɵɵpipe(1, "translate");
        ɵngcc0.ɵɵpipe(2, "async");
        ɵngcc0.ɵɵtext(3);
        ɵngcc0.ɵɵpipe(4, "translate");
        ɵngcc0.ɵɵpipe(5, "async");
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(1, 2, ɵngcc0.ɵɵpipeBind1(2, 4, ctx.displayText$)));
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(4, 6, ɵngcc0.ɵɵpipeBind1(5, 8, ctx.displayText$)), " ");
    } }, pipes: [ɵngcc25.TranslatePipe, ɵngcc23.AsyncPipe], encapsulation: 2, changeDetection: 0 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(LibraryRoleColumnComponent, [{
        type: i0.Component,
        args: [{
                selector: 'adf-library-role-column',
                template: "\n        <span class=\"adf-datatable-cell-value\" title=\"{{ (displayText$ | async) | translate }}\">\n            {{ (displayText$ | async) | translate }}\n        </span>\n    ",
                changeDetection: i0.ChangeDetectionStrategy.OnPush,
                encapsulation: i0.ViewEncapsulation.None,
                host: { class: 'adf-library-role-column adf-datatable-content-cell' }
            }]
    }], function () { return [{ type: ɵngcc21.AlfrescoApiService }]; }, { context: [{
            type: i0.Input
        }] }); })();
        return LibraryRoleColumnComponent;
    }());
    LibraryRoleColumnComponent.ctorParameters = function () { return [
        { type: i1.AlfrescoApiService }
    ]; };
    LibraryRoleColumnComponent.propDecorators = {
        context: [{ type: i0.Input }]
    };

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var LibraryStatusColumnComponent = /** @class */ (function () {
        function LibraryStatusColumnComponent(api) {
            this.api = api;
            this.displayText$ = new rxjs.BehaviorSubject('');
            this.onDestroy$ = new rxjs.Subject();
        }
        LibraryStatusColumnComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.updateValue();
            this.api.nodeUpdated
                .pipe(operators.takeUntil(this.onDestroy$))
                .subscribe(function (node) {
                var row = _this.context.row;
                if (row) {
                    var entry = row.node.entry;
                    if (entry === node) {
                        row.node = { entry: entry };
                        _this.updateValue();
                    }
                }
            });
        };
        LibraryStatusColumnComponent.prototype.updateValue = function () {
            var node = this.context.row.node;
            if (node && node.entry) {
                var visibility = node.entry.visibility;
                switch (visibility) {
                    case jsApi.Site.VisibilityEnum.PUBLIC:
                        this.displayText$.next('LIBRARY.VISIBILITY.PUBLIC');
                        break;
                    case jsApi.Site.VisibilityEnum.PRIVATE:
                        this.displayText$.next('LIBRARY.VISIBILITY.PRIVATE');
                        break;
                    case jsApi.Site.VisibilityEnum.MODERATED:
                        this.displayText$.next('LIBRARY.VISIBILITY.MODERATED');
                        break;
                    default:
                        this.displayText$.next('UNKNOWN');
                        break;
                }
            }
        };
        LibraryStatusColumnComponent.prototype.ngOnDestroy = function () {
            this.onDestroy$.next(true);
            this.onDestroy$.complete();
        };
LibraryStatusColumnComponent.ɵfac = function LibraryStatusColumnComponent_Factory(t) { return new (t || LibraryStatusColumnComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc21.AlfrescoApiService)); };
LibraryStatusColumnComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: LibraryStatusColumnComponent, selectors: [["adf-library-status-column"]], hostAttrs: [1, "adf-library-status-column", "adf-datatable-content-cell"], inputs: { context: "context" }, decls: 6, vars: 10, consts: [[1, "adf-datatable-cell-value", 3, "title"]], template: function LibraryStatusColumnComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "span", 0);
        ɵngcc0.ɵɵpipe(1, "translate");
        ɵngcc0.ɵɵpipe(2, "async");
        ɵngcc0.ɵɵtext(3);
        ɵngcc0.ɵɵpipe(4, "translate");
        ɵngcc0.ɵɵpipe(5, "async");
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(1, 2, ɵngcc0.ɵɵpipeBind1(2, 4, ctx.displayText$)));
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(4, 6, ɵngcc0.ɵɵpipeBind1(5, 8, ctx.displayText$)), " ");
    } }, pipes: [ɵngcc25.TranslatePipe, ɵngcc23.AsyncPipe], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(LibraryStatusColumnComponent, [{
        type: i0.Component,
        args: [{
                selector: 'adf-library-status-column',
                template: "\n        <span class=\"adf-datatable-cell-value\" title=\"{{ (displayText$ | async) | translate }}\">\n            {{ (displayText$ | async) | translate }}\n        </span>\n    ",
                host: { class: 'adf-library-status-column adf-datatable-content-cell' }
            }]
    }], function () { return [{ type: ɵngcc21.AlfrescoApiService }]; }, { context: [{
            type: i0.Input
        }] }); })();
        return LibraryStatusColumnComponent;
    }());
    LibraryStatusColumnComponent.ctorParameters = function () { return [
        { type: i1.AlfrescoApiService }
    ]; };
    LibraryStatusColumnComponent.propDecorators = {
        context: [{ type: i0.Input }]
    };

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var NameColumnComponent = /** @class */ (function () {
        function NameColumnComponent(element, alfrescoApiService) {
            this.element = element;
            this.alfrescoApiService = alfrescoApiService;
            this.key = 'name';
            this.displayText$ = new rxjs.BehaviorSubject('');
            this.onDestroy$ = new rxjs.Subject();
        }
        NameColumnComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.updateValue();
            this.alfrescoApiService.nodeUpdated
                .pipe(operators.takeUntil(this.onDestroy$))
                .subscribe(function (node) {
                var row = _this.context.row;
                if (row) {
                    var entry = row.node.entry;
                    if (entry === node) {
                        row.node = { entry: entry };
                        _this.updateValue();
                    }
                }
            });
        };
        NameColumnComponent.prototype.updateValue = function () {
            this.node = this.context.row.node;
            if (this.node && this.node.entry) {
                var displayText = this.context.row.getValue(this.key);
                this.displayText$.next(displayText || this.node.entry.id);
            }
        };
        NameColumnComponent.prototype.onClick = function () {
            this.element.nativeElement.dispatchEvent(new CustomEvent('name-click', {
                bubbles: true,
                detail: {
                    node: this.node
                }
            }));
        };
        NameColumnComponent.prototype.ngOnDestroy = function () {
            this.onDestroy$.next(true);
            this.onDestroy$.complete();
        };
NameColumnComponent.ɵfac = function NameColumnComponent_Factory(t) { return new (t || NameColumnComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc21.AlfrescoApiService)); };
NameColumnComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: NameColumnComponent, selectors: [["adf-name-column"]], hostAttrs: [1, "adf-datatable-content-cell", "adf-datatable-link", "adf-name-column"], inputs: { key: "key", context: "context" }, decls: 6, vars: 14, consts: [["role", "link", 1, "adf-datatable-cell-value", 3, "title", "click"]], template: function NameColumnComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "span", 0);
        ɵngcc0.ɵɵlistener("click", function NameColumnComponent_Template_span_click_0_listener() { return ctx.onClick(); });
        ɵngcc0.ɵɵpipe(1, "translate");
        ɵngcc0.ɵɵpipe(2, "async");
        ɵngcc0.ɵɵpipe(3, "adfNodeNameTooltip");
        ɵngcc0.ɵɵtext(4);
        ɵngcc0.ɵɵpipe(5, "async");
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(3, 8, ctx.node));
        ɵngcc0.ɵɵattribute("aria-label", ɵngcc0.ɵɵpipeBind2(1, 3, "NAME_COLUMN_LINK.ACCESSIBILITY.ARIA_LABEL", ɵngcc0.ɵɵpureFunction1(12, _c8, ɵngcc0.ɵɵpipeBind1(2, 6, ctx.displayText$))));
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(5, 10, ctx.displayText$), " ");
    } }, pipes: [ɵngcc25.TranslatePipe, ɵngcc23.AsyncPipe, ɵngcc21.NodeNameTooltipPipe], encapsulation: 2, changeDetection: 0 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NameColumnComponent, [{
        type: i0.Component,
        args: [{
                selector: 'adf-name-column',
                template: "\n        <span\n            role=\"link\"\n            [attr.aria-label]=\"'NAME_COLUMN_LINK.ACCESSIBILITY.ARIA_LABEL' | translate:{\n                name:  displayText$ | async\n            }\"\n            class=\"adf-datatable-cell-value\"\n            title=\"{{ node | adfNodeNameTooltip }}\"\n            (click)=\"onClick()\">\n\n            {{ displayText$ | async }}\n        </span>\n    ",
                changeDetection: i0.ChangeDetectionStrategy.OnPush,
                encapsulation: i0.ViewEncapsulation.None,
                host: { class: 'adf-datatable-content-cell adf-datatable-link adf-name-column' }
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc21.AlfrescoApiService }]; }, { key: [{
            type: i0.Input
        }], context: [{
            type: i0.Input
        }] }); })();
        return NameColumnComponent;
    }());
    NameColumnComponent.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: i1.AlfrescoApiService }
    ]; };
    NameColumnComponent.propDecorators = {
        context: [{ type: i0.Input }],
        key: [{ type: i0.Input }]
    };

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var SEARCH_QUERY_SERVICE_TOKEN = new i0.InjectionToken('QueryService');

    var BaseQueryBuilderService = /** @class */ (function () {
        function BaseQueryBuilderService(appConfig, alfrescoApiService) {
            this.appConfig = appConfig;
            this.alfrescoApiService = alfrescoApiService;
            this.configUpdated = new rxjs.Subject();
            this.updated = new rxjs.Subject();
            this.executed = new rxjs.Subject();
            this.error = new rxjs.Subject();
            this.searchForms = new rxjs.ReplaySubject(1);
            this.categories = [];
            this.queryFragments = {};
            this.filterQueries = [];
            this.paging = null;
            this.sorting = [];
            this.sortingOptions = [];
            this._userQuery = '';
            this.userFacetBuckets = {};
            this.config = {
                categories: []
            };
            this.ranges = {};
            this.resetToDefaults();
        }
        Object.defineProperty(BaseQueryBuilderService.prototype, "searchApi", {
            get: function () {
                var _a;
                this._searchApi = (_a = this._searchApi) !== null && _a !== void 0 ? _a : new jsApi.SearchApi(this.alfrescoApiService.getInstance());
                return this._searchApi;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BaseQueryBuilderService.prototype, "userQuery", {
            get: function () {
                return this._userQuery;
            },
            set: function (value) {
                value = (value || '').trim();
                this._userQuery = value ? "(" + value + ")" : '';
            },
            enumerable: false,
            configurable: true
        });
        BaseQueryBuilderService.prototype.resetToDefaults = function () {
            var currentConfig = this.getDefaultConfiguration();
            this.resetSearchOptions();
            this.configUpdated.next(currentConfig);
            this.searchForms.next(this.getSearchFormDetails());
            this.setUpSearchConfiguration(currentConfig);
        };
        BaseQueryBuilderService.prototype.getDefaultConfiguration = function () {
            var configurations = this.loadConfiguration();
            if (this.selectedConfiguration !== undefined) {
                return configurations[this.selectedConfiguration];
            }
            if (Array.isArray(configurations)) {
                return configurations.find(function (configuration) { return configuration.default; });
            }
            return configurations;
        };
        BaseQueryBuilderService.prototype.updateSelectedConfiguration = function (index) {
            var currentConfig = this.loadConfiguration();
            if (Array.isArray(currentConfig) && currentConfig[index] !== undefined) {
                this.selectedConfiguration = index;
                this.configUpdated.next(currentConfig[index]);
                this.searchForms.next(this.getSearchFormDetails());
                this.resetSearchOptions();
                this.setUpSearchConfiguration(currentConfig[index]);
                this.update();
            }
        };
        BaseQueryBuilderService.prototype.resetSearchOptions = function () {
            this.categories = [];
            this.queryFragments = {};
            this.filterQueries = [];
            this.sorting = [];
            this.sortingOptions = [];
            this.userFacetBuckets = {};
            this.scope = null;
        };
        BaseQueryBuilderService.prototype.getSearchFormDetails = function () {
            var _this = this;
            var configurations = this.loadConfiguration();
            if (Array.isArray(configurations)) {
                return configurations.map(function (configuration, index) { return ({
                    index: index,
                    name: configuration.name || 'SEARCH.UNKNOWN_CONFIGURATION',
                    default: configuration.default || false,
                    selected: _this.selectedConfiguration !== undefined ? index === _this.selectedConfiguration : configuration.default
                }); });
            }
            else if (!!configurations) {
                return [{
                        index: 0,
                        name: configurations.name || 'SEARCH.UNKNOWN_CONFIGURATION',
                        default: true,
                        selected: true
                    }];
            }
            return [];
        };
        BaseQueryBuilderService.prototype.setUpSearchConfiguration = function (currentConfiguration) {
            if (currentConfiguration) {
                this.config = JSON.parse(JSON.stringify(currentConfiguration));
                this.categories = (this.config.categories || []).filter(function (category) { return category.enabled; });
                this.filterQueries = this.config.filterQueries || [];
                this.userFacetBuckets = {};
                if (this.config.sorting) {
                    this.sorting = this.config.sorting.defaults || [];
                    this.sortingOptions = this.config.sorting.options || [];
                }
            }
        };
        BaseQueryBuilderService.prototype.addUserFacetBucket = function (field, bucket) {
            if (field && field.field && bucket) {
                var buckets = this.userFacetBuckets[field.field] || [];
                var existing = buckets.find(function (facetBucket) { return facetBucket.label === bucket.label; });
                if (!existing) {
                    buckets.push(bucket);
                }
                this.userFacetBuckets[field.field] = buckets;
            }
        };
        BaseQueryBuilderService.prototype.getUserFacetBuckets = function (field) {
            return this.userFacetBuckets[field] || [];
        };
        BaseQueryBuilderService.prototype.removeUserFacetBucket = function (field, bucket) {
            if (field && field.field && bucket) {
                var buckets = this.userFacetBuckets[field.field] || [];
                this.userFacetBuckets[field.field] = buckets
                    .filter(function (facetBucket) { return facetBucket.label !== bucket.label; });
            }
        };
        BaseQueryBuilderService.prototype.addFilterQuery = function (query) {
            if (query) {
                var existing = this.filterQueries.find(function (filterQuery) { return filterQuery.query === query; });
                if (!existing) {
                    this.filterQueries.push({ query: query });
                }
            }
        };
        BaseQueryBuilderService.prototype.removeFilterQuery = function (query) {
            if (query) {
                this.filterQueries = this.filterQueries
                    .filter(function (filterQuery) { return filterQuery.query !== query; });
            }
        };
        BaseQueryBuilderService.prototype.getFacetQuery = function (label) {
            if (label && this.hasFacetQueries) {
                var result = this.config.facetQueries.queries.find(function (query) { return query.label === label; });
                if (result) {
                    return Object.assign({}, result);
                }
            }
            return null;
        };
        BaseQueryBuilderService.prototype.getFacetField = function (label) {
            if (label) {
                var fields = this.config.facetFields.fields || [];
                var result = fields.find(function (field) { return field.label === label; });
                if (result) {
                    result.label = this.getSupportedLabel(result.label);
                    return Object.assign({}, result);
                }
            }
            return null;
        };
        BaseQueryBuilderService.prototype.setScope = function (scope) {
            this.scope = scope;
        };
        BaseQueryBuilderService.prototype.getScope = function () {
            return this.scope;
        };
        BaseQueryBuilderService.prototype.update = function (queryBody) {
            var query = queryBody ? queryBody : this.buildQuery();
            this.updated.next(query);
        };
        BaseQueryBuilderService.prototype.execute = function (queryBody) {
            return __awaiter(this, void 0, void 0, function () {
                var query, resultSetPaging, error_1;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            _b.trys.push([0, 3, , 4]);
                            query = queryBody ? queryBody : this.buildQuery();
                            if (!query) return [3 /*break*/, 2];
                            return [4 /*yield*/, this.searchApi.search(query)];
                        case 1:
                            resultSetPaging = _b.sent();
                            this.executed.next(resultSetPaging);
                            _b.label = 2;
                        case 2: return [3 /*break*/, 4];
                        case 3:
                            error_1 = _b.sent();
                            this.error.next(error_1);
                            this.executed.next({
                                list: {
                                    pagination: {
                                        totalItems: 0
                                    },
                                    entries: []
                                }
                            });
                            return [3 /*break*/, 4];
                        case 4: return [2 /*return*/];
                    }
                });
            });
        };
        BaseQueryBuilderService.prototype.search = function (queryBody) {
            var _this = this;
            var promise = this.searchApi.search(queryBody);
            promise.then(function (resultSetPaging) {
                _this.executed.next(resultSetPaging);
            });
            return rxjs.from(promise);
        };
        BaseQueryBuilderService.prototype.buildQuery = function () {
            var query = this.getFinalQuery();
            var include = this.config.include || [];
            if (include.length === 0) {
                include.push('path', 'allowableOperations');
            }
            if (query) {
                var result = {
                    query: {
                        query: query,
                        language: 'afts'
                    },
                    include: include,
                    paging: this.paging,
                    fields: this.config.fields,
                    filterQueries: this.filterQueries,
                    facetQueries: this.facetQueries,
                    facetIntervals: this.facetIntervals,
                    facetFields: this.facetFields,
                    sort: this.sort,
                    highlight: this.highlight
                };
                if (this.scope) {
                    result['scope'] = this.scope;
                }
                result['facetFormat'] = 'V2';
                return result;
            }
            return null;
        };
        BaseQueryBuilderService.prototype.getPrimarySorting = function () {
            if (this.sorting && this.sorting.length > 0) {
                return this.sorting[0];
            }
            return null;
        };
        BaseQueryBuilderService.prototype.getSortingOptions = function () {
            if (this.config && this.config.sorting) {
                return this.config.sorting.options || [];
            }
            return [];
        };
        BaseQueryBuilderService.prototype.getQueryGroup = function (query) {
            return query.group || this.config.facetQueries.label || 'Facet Queries';
        };
        Object.defineProperty(BaseQueryBuilderService.prototype, "hasFacetQueries", {
            get: function () {
                if (this.config
                    && this.config.facetQueries
                    && this.config.facetQueries.queries
                    && this.config.facetQueries.queries.length > 0) {
                    return true;
                }
                return false;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BaseQueryBuilderService.prototype, "hasFacetIntervals", {
            get: function () {
                return this.config
                    && this.config.facetIntervals
                    && this.config.facetIntervals.intervals
                    && this.config.facetIntervals.intervals.length > 0;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BaseQueryBuilderService.prototype, "hasFacetHighlight", {
            get: function () {
                return !!(this.config && this.config.highlight);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BaseQueryBuilderService.prototype, "sort", {
            get: function () {
                return this.sorting.map(function (def) {
                    return new jsApi.RequestSortDefinitionInner({
                        type: def.type,
                        field: def.field,
                        ascending: def.ascending
                    });
                });
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BaseQueryBuilderService.prototype, "facetQueries", {
            get: function () {
                var _this = this;
                if (this.hasFacetQueries) {
                    return this.config.facetQueries.queries.map(function (query) {
                        query.group = _this.getQueryGroup(query);
                        return Object.assign({}, query);
                    });
                }
                return null;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BaseQueryBuilderService.prototype, "facetIntervals", {
            get: function () {
                var _this = this;
                if (this.hasFacetIntervals) {
                    var configIntervals = this.config.facetIntervals;
                    return {
                        intervals: configIntervals.intervals.map(function (interval) { return ({
                            label: _this.getSupportedLabel(interval.label),
                            field: interval.field,
                            sets: interval.sets.map(function (set) { return ({
                                label: _this.getSupportedLabel(set.label),
                                start: set.start,
                                end: set.end,
                                startInclusive: set.startInclusive,
                                endInclusive: set.endInclusive
                            }); })
                        }); })
                    };
                }
                return null;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BaseQueryBuilderService.prototype, "highlight", {
            get: function () {
                return this.hasFacetHighlight ? this.config.highlight : null;
            },
            enumerable: false,
            configurable: true
        });
        BaseQueryBuilderService.prototype.getFinalQuery = function () {
            var _this = this;
            var query = '';
            this.categories.forEach(function (facet) {
                var customQuery = _this.queryFragments[facet.id];
                if (customQuery) {
                    if (query.length > 0) {
                        query += ' AND ';
                    }
                    query += "(" + customQuery + ")";
                }
            });
            var result = [this.userQuery, query]
                .filter(function (entry) { return entry; })
                .join(' AND ');
            if (this.userFacetBuckets) {
                Object.keys(this.userFacetBuckets).forEach(function (key) {
                    var subQuery = (_this.userFacetBuckets[key] || [])
                        .filter(function (bucket) { return bucket.filterQuery; })
                        .map(function (bucket) { return bucket.filterQuery; })
                        .join(' OR ');
                    if (subQuery) {
                        if (result.length > 0) {
                            result += ' AND ';
                        }
                        result += "(" + subQuery + ")";
                    }
                });
            }
            return result;
        };
        Object.defineProperty(BaseQueryBuilderService.prototype, "facetFields", {
            get: function () {
                var _this = this;
                var facetFields = this.config.facetFields && this.config.facetFields.fields;
                if (facetFields && facetFields.length > 0) {
                    return {
                        facets: facetFields.map(function (facet) { return ({
                            field: facet.field,
                            mincount: facet.mincount,
                            label: _this.getSupportedLabel(facet.label),
                            limit: facet.limit,
                            offset: facet.offset,
                            prefix: facet.prefix
                        }); })
                    };
                }
                return null;
            },
            enumerable: false,
            configurable: true
        });
        BaseQueryBuilderService.prototype.getSupportedLabel = function (configLabel) {
            var spaceInsideLabelIndex = configLabel.search(/\s/g);
            if (spaceInsideLabelIndex > -1) {
                return "\"" + configLabel + "\"";
            }
            return configLabel;
        };
BaseQueryBuilderService.ɵfac = function BaseQueryBuilderService_Factory(t) { return new (t || BaseQueryBuilderService)(ɵngcc0.ɵɵinject(ɵngcc21.AppConfigService), ɵngcc0.ɵɵinject(ɵngcc21.AlfrescoApiService)); };
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(BaseQueryBuilderService, [{
        type: i0.Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc21.AppConfigService }, { type: ɵngcc21.AlfrescoApiService }]; }, null); })();
        return BaseQueryBuilderService;
    }());
    BaseQueryBuilderService.ɵprov = i0.ɵɵdefineInjectable({ factory: function BaseQueryBuilderService_Factory() { return new BaseQueryBuilderService(i0.ɵɵinject(i1.AppConfigService), i0.ɵɵinject(i1.AlfrescoApiService)); }, token: BaseQueryBuilderService, providedIn: "root" });
    BaseQueryBuilderService.ctorParameters = function () { return [
        { type: i1.AppConfigService },
        { type: i1.AlfrescoApiService }
    ]; };

    var SearchHeaderQueryBuilderService = /** @class */ (function (_super) {
        __extends(SearchHeaderQueryBuilderService, _super);
        function SearchHeaderQueryBuilderService(appConfig, alfrescoApiService, nodeApiService) {
            var _this = _super.call(this, appConfig, alfrescoApiService) || this;
            _this.nodeApiService = nodeApiService;
            _this.customSources = ['-trashcan-', '-sharedlinks-', '-sites-', '-mysites-', '-favorites-', '-recent-', '-my-'];
            _this.activeFilters = [];
            _this.updated.pipe(operators.filter(function (query) { return !!query; })).subscribe(function () {
                _this.execute();
            });
            return _this;
        }
        SearchHeaderQueryBuilderService.prototype.isFilterServiceActive = function () {
            return true;
        };
        SearchHeaderQueryBuilderService.prototype.loadConfiguration = function () {
            return this.appConfig.get('search-headers');
        };
        SearchHeaderQueryBuilderService.prototype.setupCurrentPagination = function (maxItems, skipCount) {
            if (!this.paging ||
                (this.paging &&
                    this.paging.maxItems !== maxItems || this.paging.skipCount !== skipCount)) {
                this.paging = { maxItems: maxItems, skipCount: skipCount };
                this.execute();
            }
        };
        SearchHeaderQueryBuilderService.prototype.setActiveFilter = function (columnActivated, filterValue) {
            var selectedFilter = this.activeFilters.find(function (activeFilter) { return activeFilter.key === columnActivated; });
            if (!selectedFilter) {
                this.activeFilters.push({
                    key: columnActivated,
                    value: filterValue
                });
            }
            else {
                selectedFilter.value = filterValue;
            }
        };
        SearchHeaderQueryBuilderService.prototype.resetActiveFilters = function () {
            this.activeFilters = [];
        };
        SearchHeaderQueryBuilderService.prototype.getActiveFilters = function () {
            return this.activeFilters;
        };
        SearchHeaderQueryBuilderService.prototype.isNoFilterActive = function () {
            return this.activeFilters.length === 0;
        };
        SearchHeaderQueryBuilderService.prototype.removeActiveFilter = function (columnRemoved) {
            var filterIndex = this.activeFilters.map(function (activeFilter) { return activeFilter.key; }).indexOf(columnRemoved);
            if (filterIndex >= 0) {
                this.activeFilters.splice(filterIndex, 1);
            }
        };
        SearchHeaderQueryBuilderService.prototype.setSorting = function (dataSorting) {
            var _this = this;
            this.sorting = [];
            dataSorting.forEach(function (columnSorting) {
                var fieldValue = _this.getSortingFieldFromColumnName(columnSorting.key);
                if (fieldValue) {
                    var optionAscending = columnSorting.direction.toLocaleLowerCase() === 'asc';
                    var type = fieldValue === 'score' ? 'SCORE' : 'FIELD';
                    var currentSort = {
                        key: columnSorting.key,
                        label: 'current',
                        type: type,
                        field: fieldValue,
                        ascending: optionAscending
                    };
                    _this.sorting.push(currentSort);
                }
            });
            this.execute();
        };
        SearchHeaderQueryBuilderService.prototype.getSortingFieldFromColumnName = function (columnName) {
            if (this.sortingOptions.length > 0) {
                var sortOption = this.sortingOptions.find(function (option) { return option.key === columnName; });
                return sortOption ? sortOption.field : '';
            }
            return '';
        };
        SearchHeaderQueryBuilderService.prototype.getCategoryForColumn = function (columnKey) {
            var foundCategory = null;
            if (this.categories !== null) {
                foundCategory = this.categories.find(function (category) { return category.columnKey === columnKey; });
            }
            return foundCategory;
        };
        SearchHeaderQueryBuilderService.prototype.setCurrentRootFolderId = function (currentFolderId) {
            var alreadyAddedFilter = this.filterQueries.find(function (filterQueries) { return filterQueries.query.includes(currentFolderId); });
            if (alreadyAddedFilter !== undefined) {
                this.filterQueries = [];
            }
            this.filterQueries = [{
                    query: "PARENT:\"workspace://SpacesStore/" + currentFolderId + "\""
                }];
            this.execute();
        };
        SearchHeaderQueryBuilderService.prototype.isCustomSourceNode = function (currentNodeId) {
            return this.customSources.includes(currentNodeId);
        };
        SearchHeaderQueryBuilderService.prototype.getNodeIdForCustomSource = function (customSourceId) {
            return this.nodeApiService.getNode(customSourceId);
        };
SearchHeaderQueryBuilderService.ɵfac = function SearchHeaderQueryBuilderService_Factory(t) { return new (t || SearchHeaderQueryBuilderService)(ɵngcc0.ɵɵinject(ɵngcc21.AppConfigService), ɵngcc0.ɵɵinject(ɵngcc21.AlfrescoApiService), ɵngcc0.ɵɵinject(ɵngcc21.NodesApiService)); };
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SearchHeaderQueryBuilderService, [{
        type: i0.Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc21.AppConfigService }, { type: ɵngcc21.AlfrescoApiService }, { type: ɵngcc21.NodesApiService }]; }, null); })();
        return SearchHeaderQueryBuilderService;
    }(BaseQueryBuilderService));
    SearchHeaderQueryBuilderService.ɵprov = i0.ɵɵdefineInjectable({ factory: function SearchHeaderQueryBuilderService_Factory() { return new SearchHeaderQueryBuilderService(i0.ɵɵinject(i1.AppConfigService), i0.ɵɵinject(i1.AlfrescoApiService), i0.ɵɵinject(i1.NodesApiService)); }, token: SearchHeaderQueryBuilderService, providedIn: "root" });
    SearchHeaderQueryBuilderService.ctorParameters = function () { return [
        { type: i1.AppConfigService },
        { type: i1.AlfrescoApiService },
        { type: i1.NodesApiService }
    ]; };

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var FilterHeaderComponent = /** @class */ (function () {
        function FilterHeaderComponent(documentList, searchFilterQueryBuilder) {
            this.documentList = documentList;
            this.searchFilterQueryBuilder = searchFilterQueryBuilder;
            this.value = {};
            this.filterSelection = new i0.EventEmitter();
            this.onDestroy$ = new rxjs.Subject();
            this.isFilterServiceActive = this.searchFilterQueryBuilder.isFilterServiceActive();
        }
        FilterHeaderComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.searchFilterQueryBuilder.executed
                .pipe(operators.takeUntil(this.onDestroy$))
                .subscribe(function (newNodePaging) {
                _this.documentList.node = newNodePaging;
                _this.documentList.reload();
            });
            this.initDataPagination();
            this.initDataSorting();
        };
        FilterHeaderComponent.prototype.ngOnChanges = function (changes) {
            if (changes['currentFolderId'] && changes['currentFolderId'].currentValue) {
                this.resetFilterHeader();
                this.configureSearchParent(changes['currentFolderId'].currentValue);
            }
        };
        FilterHeaderComponent.prototype.onFilterSelectionChange = function () {
            this.filterSelection.emit(this.searchFilterQueryBuilder.getActiveFilters());
            if (this.searchFilterQueryBuilder.isNoFilterActive()) {
                this.documentList.node = null;
                this.documentList.reload();
            }
        };
        FilterHeaderComponent.prototype.resetFilterHeader = function () {
            this.searchFilterQueryBuilder.resetActiveFilters();
        };
        FilterHeaderComponent.prototype.initDataPagination = function () {
            var _this = this;
            this.documentList.pagination
                .pipe(operators.takeUntil(this.onDestroy$))
                .subscribe(function (newPagination) {
                _this.searchFilterQueryBuilder.setupCurrentPagination(newPagination.maxItems, newPagination.skipCount);
            });
        };
        FilterHeaderComponent.prototype.initDataSorting = function () {
            var _this = this;
            this.documentList.sortingSubject
                .pipe(operators.takeUntil(this.onDestroy$))
                .subscribe(function (sorting) {
                _this.searchFilterQueryBuilder.setSorting(sorting);
            });
        };
        FilterHeaderComponent.prototype.configureSearchParent = function (currentFolderId) {
            var _this = this;
            if (this.searchFilterQueryBuilder.isCustomSourceNode(currentFolderId)) {
                this.searchFilterQueryBuilder.getNodeIdForCustomSource(currentFolderId).subscribe(function (node) {
                    _this.initSearchHeader(node.id);
                });
            }
            else {
                this.initSearchHeader(currentFolderId);
            }
        };
        FilterHeaderComponent.prototype.initSearchHeader = function (currentFolderId) {
            var _this = this;
            this.searchFilterQueryBuilder.setCurrentRootFolderId(currentFolderId);
            if (this.value) {
                Object.keys(this.value).forEach(function (columnKey) {
                    _this.searchFilterQueryBuilder.setActiveFilter(columnKey, _this.value[columnKey]);
                });
            }
        };
        FilterHeaderComponent.prototype.ngOnDestroy = function () {
            this.onDestroy$.next(true);
            this.onDestroy$.complete();
        };
FilterHeaderComponent.ɵfac = function FilterHeaderComponent_Factory(t) { return new (t || FilterHeaderComponent)(ɵngcc0.ɵɵdirectiveInject(DocumentListComponent), ɵngcc0.ɵɵdirectiveInject(SEARCH_QUERY_SERVICE_TOKEN)); };
FilterHeaderComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: FilterHeaderComponent, selectors: [["adf-filter-header"]], inputs: { value: "value", currentFolderId: "currentFolderId" }, outputs: { filterSelection: "filterSelection" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: SEARCH_QUERY_SERVICE_TOKEN, useClass: SearchHeaderQueryBuilderService }]), ɵngcc0.ɵɵNgOnChangesFeature], decls: 1, vars: 1, consts: [[4, "ngIf"], [3, "col", "value", "filterChange"]], template: function FilterHeaderComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, FilterHeaderComponent_div_0_Template, 3, 0, "div", 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngIf", ctx.isFilterServiceActive);
    } }, directives: function () { return [ɵngcc23.NgIf, ɵngcc21.HeaderFilterTemplateDirective, SearchFilterContainerComponent]; }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FilterHeaderComponent, [{
        type: i0.Component,
        args: [{
                selector: 'adf-filter-header',
                template: "<div *ngIf=\"isFilterServiceActive\">\n    <adf-header-filter-template>\n        <ng-template let-col>\n            <adf-search-filter-container [col]=\"col\"\n                                         [value]=\"value\"\n                                         (filterChange)=\"onFilterSelectionChange()\">\n            </adf-search-filter-container>\n        </ng-template>\n    </adf-header-filter-template>\n</div>\n",
                providers: [{ provide: SEARCH_QUERY_SERVICE_TOKEN, useClass: SearchHeaderQueryBuilderService }]
            }]
    }], function () { return [{ type: DocumentListComponent, decorators: [{
                type: i0.Inject,
                args: [DocumentListComponent]
            }] }, { type: SearchHeaderQueryBuilderService, decorators: [{
                type: i0.Inject,
                args: [SEARCH_QUERY_SERVICE_TOKEN]
            }] }]; }, { value: [{
            type: i0.Input
        }], filterSelection: [{
            type: i0.Output
        }], currentFolderId: [{
            type: i0.Input
        }] }); })();
        return FilterHeaderComponent;
    }());
    FilterHeaderComponent.ctorParameters = function () { return [
        { type: DocumentListComponent, decorators: [{ type: i0.Inject, args: [DocumentListComponent,] }] },
        { type: SearchHeaderQueryBuilderService, decorators: [{ type: i0.Inject, args: [SEARCH_QUERY_SERVICE_TOKEN,] }] }
    ]; };
    FilterHeaderComponent.propDecorators = {
        value: [{ type: i0.Input }],
        currentFolderId: [{ type: i0.Input }],
        filterSelection: [{ type: i0.Output }]
    };

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var TrashcanNameColumnComponent = /** @class */ (function () {
        function TrashcanNameColumnComponent() {
            this.isLibrary = false;
        }
        TrashcanNameColumnComponent.prototype.ngOnInit = function () {
            this.node = this.context.row.node;
            var rows = this.context.data.rows || [];
            if (this.node && this.node.entry) {
                this.isLibrary = this.node.entry.nodeType === 'st:site';
                if (this.isLibrary) {
                    var properties = this.node.entry.properties;
                    this.displayText = this.makeLibraryTitle(this.node.entry, rows);
                    this.displayTooltip =
                        properties['cm:description'] || properties['cm:title'];
                }
                else {
                    this.displayText = this.node.entry.name || this.node.entry.id;
                }
            }
        };
        TrashcanNameColumnComponent.prototype.makeLibraryTitle = function (library, rows) {
            var entries = rows.map(function (r) { return r.node.entry; });
            var id = library.id;
            var title = library.properties['cm:title'];
            var isDuplicate = false;
            if (entries) {
                isDuplicate = entries.some(function (entry) {
                    return entry.id !== id && entry.properties['cm:title'] === title;
                });
            }
            return isDuplicate
                ? library.properties['cm:title'] + " (" + library.name + ")"
                : "" + library.properties['cm:title'];
        };
TrashcanNameColumnComponent.ɵfac = function TrashcanNameColumnComponent_Factory(t) { return new (t || TrashcanNameColumnComponent)(); };
TrashcanNameColumnComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: TrashcanNameColumnComponent, selectors: [["adf-trashcan-name-column"]], hostAttrs: [1, "adf-datatable-content-cell", "adf-trashcan-name-column"], inputs: { context: "context" }, decls: 2, vars: 2, consts: [[4, "ngIf"], [1, "adf-datatable-cell-value", 3, "title"]], template: function TrashcanNameColumnComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, TrashcanNameColumnComponent_ng_container_0_Template, 4, 4, "ng-container", 0);
        ɵngcc0.ɵɵtemplate(1, TrashcanNameColumnComponent_ng_container_1_Template, 3, 2, "ng-container", 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngIf", !ctx.isLibrary);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.isLibrary);
    } }, directives: [ɵngcc23.NgIf], pipes: [ɵngcc21.NodeNameTooltipPipe], encapsulation: 2, changeDetection: 0 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TrashcanNameColumnComponent, [{
        type: i0.Component,
        args: [{
                selector: 'adf-trashcan-name-column',
                template: "\n    <ng-container *ngIf=\"!isLibrary\">\n      <span class=\"adf-datatable-cell-value\" title=\"{{ node | adfNodeNameTooltip }}\">{{ displayText }}</span>\n    </ng-container>\n    <ng-container *ngIf=\"isLibrary\">\n      <span class=\"adf-datatable-cell-value\" title=\"{{ displayTooltip }}\">{{ displayText }}</span>\n    </ng-container>\n  ",
                changeDetection: i0.ChangeDetectionStrategy.OnPush,
                encapsulation: i0.ViewEncapsulation.None,
                host: { class: 'adf-datatable-content-cell adf-trashcan-name-column' }
            }]
    }], function () { return []; }, { context: [{
            type: i0.Input
        }] }); })();
        return TrashcanNameColumnComponent;
    }());
    TrashcanNameColumnComponent.propDecorators = {
        context: [{ type: i0.Input }]
    };

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var NodePaging = /** @class */ (function () {
        function NodePaging() {
        }
        return NodePaging;
    }());
    var NodePagingList = /** @class */ (function () {
        function NodePagingList() {
        }
        return NodePagingList;
    }());
    var NodeMinimalEntry = /** @class */ (function () {
        function NodeMinimalEntry() {
        }
        return NodeMinimalEntry;
    }());
    var Pagination = /** @class */ (function () {
        function Pagination() {
        }
        return Pagination;
    }());
    var NodeMinimal = /** @class */ (function () {
        function NodeMinimal() {
            this.properties = {};
        }
        return NodeMinimal;
    }());
    var UserInfo = /** @class */ (function () {
        function UserInfo() {
        }
        return UserInfo;
    }());
    var ContentInfo = /** @class */ (function () {
        function ContentInfo() {
        }
        return ContentInfo;
    }());
    var PathInfoEntity = /** @class */ (function () {
        function PathInfoEntity() {
        }
        return PathInfoEntity;
    }());
    var PathElementEntity = /** @class */ (function () {
        function PathElementEntity() {
        }
        return PathElementEntity;
    }());

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var PermissionStyleModel = /** @class */ (function () {
        function PermissionStyleModel(css, permission, isFile, isFolder) {
            if (isFile === void 0) { isFile = true; }
            if (isFolder === void 0) { isFolder = true; }
            this.isFolder = true;
            this.isFile = true;
            this.css = css;
            this.permission = permission;
            this.isFile = isFile;
            this.isFolder = isFolder;
        }
        return PermissionStyleModel;
    }());

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var FileUploadingDialogComponent = /** @class */ (function () {
        function FileUploadingDialogComponent(uploadService, changeDetector, userPreferencesService, elementRef) {
            this.uploadService = uploadService;
            this.changeDetector = changeDetector;
            this.userPreferencesService = userPreferencesService;
            this.elementRef = elementRef;
            this.direction = 'ltr';
            this.onDestroy$ = new rxjs.Subject();
            this.position = 'right';
            this.alwaysVisible = false;
            this.error = new i0.EventEmitter();
            this.filesUploadingList = [];
            this.isDialogActive = false;
            this.totalCompleted = 0;
            this.totalErrors = 0;
            this.isDialogMinimized = false;
            this.isConfirmation = false;
            this.dialogActive = new rxjs.Subject();
        }
        Object.defineProperty(FileUploadingDialogComponent.prototype, "isPositionRight", {
            get: function () {
                return (this.direction === 'ltr' && this.position === 'right')
                    || (this.direction === 'rtl' && this.position === 'left')
                    || null;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(FileUploadingDialogComponent.prototype, "isPositionLeft", {
            get: function () {
                return (this.direction === 'ltr' && this.position === 'left')
                    || (this.direction === 'rtl' && this.position === 'right')
                    || null;
            },
            enumerable: false,
            configurable: true
        });
        FileUploadingDialogComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.dialogActive
                .pipe(operators.delay(100), operators.takeUntil(this.onDestroy$))
                .subscribe(function () {
                var element = _this.elementRef.nativeElement.querySelector('#upload-dialog');
                if (element) {
                    element.focus();
                }
            });
            this.listSubscription = this.uploadService.queueChanged
                .pipe(operators.takeUntil(this.onDestroy$))
                .subscribe(function (fileList) {
                _this.filesUploadingList = fileList;
                if (_this.filesUploadingList.length && !_this.isDialogActive) {
                    _this.isDialogActive = true;
                    _this.dialogActive.next();
                }
                else {
                    _this.dialogActive.next();
                }
            });
            this.counterSubscription = rxjs.merge(this.uploadService.fileUploadComplete, this.uploadService.fileUploadDeleted)
                .pipe(operators.takeUntil(this.onDestroy$))
                .subscribe(function (event) {
                _this.totalCompleted = event.totalComplete;
                _this.changeDetector.detectChanges();
            });
            this.errorSubscription = this.uploadService.fileUploadError
                .pipe(operators.takeUntil(this.onDestroy$))
                .subscribe(function (event) {
                _this.totalErrors = event.totalError;
                _this.changeDetector.detectChanges();
            });
            this.fileUploadSubscription = this.uploadService.fileUpload
                .pipe(operators.takeUntil(this.onDestroy$))
                .subscribe(function () {
                _this.changeDetector.detectChanges();
            });
            this.uploadService.fileDeleted
                .pipe(operators.takeUntil(this.onDestroy$))
                .subscribe(function (objId) {
                if (_this.filesUploadingList) {
                    var uploadedFile = _this.filesUploadingList.find(function (file) {
                        return file.data ? file.data.entry.id === objId : false;
                    });
                    if (uploadedFile) {
                        uploadedFile.status = i1.FileUploadStatus.Cancelled;
                        _this.changeDetector.detectChanges();
                    }
                }
            });
            this.userPreferencesService.select('textOrientation')
                .pipe(operators.takeUntil(this.onDestroy$))
                .subscribe(function (textOrientation) {
                _this.direction = textOrientation;
            });
        };
        FileUploadingDialogComponent.prototype.toggleConfirmation = function () {
            this.isConfirmation = !this.isConfirmation;
            if (!this.isConfirmation) {
                this.dialogActive.next();
            }
            if (this.isDialogMinimized) {
                this.isDialogMinimized = false;
            }
        };
        FileUploadingDialogComponent.prototype.cancelAllUploads = function () {
            this.toggleConfirmation();
            this.dialogActive.next();
            this.uploadList.cancelAllFiles();
        };
        FileUploadingDialogComponent.prototype.toggleMinimized = function () {
            this.isDialogMinimized = !this.isDialogMinimized;
            this.changeDetector.detectChanges();
        };
        FileUploadingDialogComponent.prototype.close = function () {
            this.isConfirmation = false;
            this.totalCompleted = 0;
            this.totalErrors = 0;
            this.filesUploadingList = [];
            this.isDialogActive = false;
            this.isDialogMinimized = false;
            this.uploadService.clearQueue();
            this.changeDetector.detectChanges();
        };
        FileUploadingDialogComponent.prototype.ngOnDestroy = function () {
            this.uploadService.clearQueue();
            this.listSubscription.unsubscribe();
            this.counterSubscription.unsubscribe();
            this.fileUploadSubscription.unsubscribe();
            this.errorSubscription.unsubscribe();
            this.onDestroy$.next(true);
            this.onDestroy$.complete();
        };
        FileUploadingDialogComponent.prototype.canShowDialog = function () {
            return this.isDialogActive || this.alwaysVisible;
        };
        FileUploadingDialogComponent.prototype.canShowCancelAll = function () {
            var _a;
            return ((_a = this.filesUploadingList) === null || _a === void 0 ? void 0 : _a.length) && this.hasUploadInProgress();
        };
        FileUploadingDialogComponent.prototype.canCloseDialog = function () {
            return !this.hasUploadInProgress() && !this.alwaysVisible;
        };
        FileUploadingDialogComponent.prototype.hasUploadInProgress = function () {
            var _a, _b;
            return (!((_a = this.uploadList) === null || _a === void 0 ? void 0 : _a.isUploadCompleted()) && !((_b = this.uploadList) === null || _b === void 0 ? void 0 : _b.isUploadCancelled()));
        };
FileUploadingDialogComponent.ɵfac = function FileUploadingDialogComponent_Factory(t) { return new (t || FileUploadingDialogComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc21.UploadService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc21.UserPreferencesService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
FileUploadingDialogComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: FileUploadingDialogComponent, selectors: [["adf-file-uploading-dialog"]], viewQuery: function FileUploadingDialogComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c9, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.uploadList = _t.first);
    } }, hostVars: 2, hostBindings: function FileUploadingDialogComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵattribute("adfUploadDialogRight", ctx.isPositionRight)("adfUploadDialogLeft", ctx.isPositionLeft);
    } }, inputs: { position: "position", alwaysVisible: "alwaysVisible" }, outputs: { error: "error" }, decls: 1, vars: 1, consts: [["role", "dialog", "tabindex", "0", "class", "adf-upload-dialog", "id", "upload-dialog", 3, "adf-upload-dialog--minimized", 4, "ngIf"], ["role", "dialog", "tabindex", "0", "id", "upload-dialog", 1, "adf-upload-dialog"], [1, "adf-upload-dialog__header"], ["mat-button", "", 3, "disabled", "click"], ["mat-list-icon", "", 3, "title"], ["tabindex", "0", "class", "adf-upload-dialog__title", 4, "ngIf"], ["class", "adf-upload-dialog__info", "tabindex", "0", 4, "ngIf"], [1, "adf-upload-dialog__content"], [3, "files"], ["uploadList", ""], ["aria-live", "polite", "aria-labelledby", "confirmationTitle", "aria-describedby", "confirmationDescription", 1, "adf-upload-dialog__confirmation"], ["role", "heading", "id", "confirmationTitle", 1, "adf-upload-dialog__confirmation--title"], ["id", "confirmationDescription", 1, "adf-upload-dialog__confirmation--text"], ["class", "adf-upload-dialog__actions", 4, "ngIf"], ["class", "adf-upload-dialog__actions", "cdkTrapFocus", "", "cdkTrapFocusAutoCapture", "", 4, "ngIf"], ["tabindex", "0", 1, "adf-upload-dialog__title"], ["tabindex", "0", 1, "adf-upload-dialog__info"], [3, "file", "remove", "cancel"], [1, "adf-upload-dialog__actions"], ["id", "adf-upload-dialog-cancel-all", "color", "primary", "mat-button", "", 3, "click", 4, "ngIf"], ["id", "adf-upload-dialog-close", "mat-button", "", "color", "primary", 3, "click", 4, "ngIf"], ["id", "adf-upload-dialog-cancel-all", "color", "primary", "mat-button", "", 3, "click"], ["id", "adf-upload-dialog-close", "mat-button", "", "color", "primary", 3, "click"], ["cdkTrapFocus", "", "cdkTrapFocusAutoCapture", "", 1, "adf-upload-dialog__actions"], ["id", "adf-upload-dialog-cancel", "mat-button", "", 3, "click"], ["id", "adf-upload-dialog-confirm", "mat-button", "", "color", "primary", 3, "click"]], template: function FileUploadingDialogComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, FileUploadingDialogComponent_div_0_Template, 24, 32, "div", 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngIf", ctx.canShowDialog());
    } }, directives: function () { return [ɵngcc23.NgIf, ɵngcc1.MatButton, ɵngcc4.MatIcon, ɵngcc7.MatListIconCssMatStyler, FileUploadingListComponent, FileUploadingListRowComponent, ɵngcc30.CdkTrapFocus]; }, pipes: function () { return [ɵngcc25.TranslatePipe]; }, styles: [".adf-upload-dialog{background:var(--theme-dialog-bg-color);bottom:20px;box-shadow:1px 5px 15px #888;color:var(--theme-text-color);position:fixed;width:40%;z-index:999}.adf-upload-dialog--padding{padding:1em}.adf-upload-dialog--hide{display:none!important}.adf-upload-dialog--minimized{width:20%}.adf-upload-dialog--minimized .adf-upload-dialog__content{display:none}.adf-upload-dialog__header{align-items:center;display:flex;padding:1em}.adf-upload-dialog__header button{color:var(--theme-text-color)!important;line-height:0;min-width:0;padding:0}.adf-upload-dialog__title{flex:1 1 auto;margin-left:.5em}.adf-upload-dialog__info{padding:0 1em 1em}.adf-upload-dialog__content{border-bottom:1px solid var(--adf-upload-border-color);border-top:1px solid var(--adf-upload-border-color);max-height:194px;overflow:auto}.adf-upload-dialog__confirmation{padding:0 .5em}.adf-upload-dialog__confirmation--title{color:var(--theme-text-bold-color);font-size:16px;letter-spacing:-.4px;line-height:1.5}.adf-upload-dialog__confirmation--text{margin-bottom:0}.adf-upload-dialog__actions{display:flex;justify-content:flex-end;padding:1em}.adf-upload-dialog__actions>button{text-transform:uppercase}[adfUploadDialogLeft] .adf-upload-dialog{left:25px}[adfUploadDialogRight] .adf-upload-dialog{right:25px}"], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FileUploadingDialogComponent, [{
        type: i0.Component,
        args: [{
                selector: 'adf-file-uploading-dialog',
                template: "<div *ngIf=\"canShowDialog()\"\n     role=\"dialog\"\n     [attr.aria-label]=\"'ADF_FILE_UPLOAD.ARIA-LABEL.DIALOG'| translate\"\n     tabindex=\"0\"\n     class=\"adf-upload-dialog\"\n     id=\"upload-dialog\"\n     [class.adf-upload-dialog--minimized]=\"isDialogMinimized\">\n    <header class=\"adf-upload-dialog__header\">\n        <button\n            mat-button\n            [attr.aria-label]=\"(isDialogMinimized ?\n                'ADF_FILE_UPLOAD.ARIA-LABEL.DIALOG_MAXIMIZE':\n                'ADF_FILE_UPLOAD.ARIA-LABEL.DIALOG_MINIMIZE') | translate\"\n            [disabled]=\"isConfirmation\"\n            [attr.aria-expanded]=\"!isDialogMinimized\"\n            (click)=\"toggleMinimized()\">\n            <mat-icon\n                mat-list-icon\n                title=\"{{ (isDialogMinimized ? 'ADF_FILE_UPLOAD.BUTTON.MAXIMIZE': 'ADF_FILE_UPLOAD.BUTTON.MINIMIZE') | translate }}\">\n                    {{ isDialogMinimized ? 'keyboard_arrow_up' : 'keyboard_arrow_down' }}\n            </mat-icon>\n        </button>\n\n        <span\n            tabindex=\"0\"\n            class=\"adf-upload-dialog__title\"\n            *ngIf=\"!uploadList.isUploadCancelled()\">\n            {{ 'FILE_UPLOAD.MESSAGES.UPLOAD_PROGRESS'\n                | translate: {\n                    completed: totalCompleted,\n                    total: filesUploadingList.length\n                }\n            }}\n        </span>\n\n        <span\n            tabindex=\"0\"\n            class=\"adf-upload-dialog__title\"\n            *ngIf=\"uploadList.isUploadCancelled()\">\n            {{ 'FILE_UPLOAD.MESSAGES.UPLOAD_CANCELED' | translate }}\n        </span>\n    </header>\n\n    <section class=\"adf-upload-dialog__info\"\n        tabindex=\"0\"\n        *ngIf=\"totalErrors\">\n        {{\n            (totalErrors > 1\n                 ? 'FILE_UPLOAD.MESSAGES.UPLOAD_ERRORS'\n                 : 'FILE_UPLOAD.MESSAGES.UPLOAD_ERROR')\n                 | translate: { total: totalErrors }\n        }}\n    </section>\n\n    <section class=\"adf-upload-dialog__content\"\n        [class.adf-upload-dialog--padding]=\"isConfirmation\">\n        <adf-file-uploading-list\n            [class.adf-upload-dialog--hide]=\"isConfirmation\"\n            #uploadList\n            [files]=\"filesUploadingList\">\n                <ng-template let-file=\"$implicit\">\n                     <adf-file-uploading-list-row\n                        [file]=\"file\"\n                        (remove)=\"uploadList.removeFile(file)\"\n                        (cancel)=\"uploadList.cancelFile(file)\">\n                    </adf-file-uploading-list-row>\n                </ng-template>\n        </adf-file-uploading-list>\n\n        <div\n            aria-live=\"polite\"\n            aria-labelledby=\"confirmationTitle\"\n            aria-describedby=\"confirmationDescription\"\n            class=\"adf-upload-dialog__confirmation\"\n            [class.adf-upload-dialog--hide]=\"!isConfirmation\">\n                <p role=\"heading\" id=\"confirmationTitle\" class=\"adf-upload-dialog__confirmation--title\">\n                    {{ 'ADF_FILE_UPLOAD.CONFIRMATION.MESSAGE.TITLE' | translate }}\n                </p>\n                <p id=\"confirmationDescription\" class=\"adf-upload-dialog__confirmation--text\">\n                    {{ 'ADF_FILE_UPLOAD.CONFIRMATION.MESSAGE.TEXT' | translate }}\n                </p>\n        </div>\n    </section>\n\n    <footer class=\"adf-upload-dialog__actions\" *ngIf=\"!isConfirmation\">\n        <button\n            id=\"adf-upload-dialog-cancel-all\"\n            [attr.aria-label]=\"'ADF_FILE_UPLOAD.ARIA-LABEL.CANCEL_ALL' | translate\"\n            color=\"primary\"\n            mat-button\n            *ngIf=\"canShowCancelAll()\"\n            (click)=\"toggleConfirmation()\"\n        >{{ 'ADF_FILE_UPLOAD.BUTTON.CANCEL_ALL' | translate }}</button>\n\n        <button\n            id=\"adf-upload-dialog-close\"\n            [attr.aria-label]=\"'ADF_FILE_UPLOAD.ARIA-LABEL.DIALOG_CLOSE' | translate\"\n            *ngIf=\"canCloseDialog()\"\n            mat-button\n            color=\"primary\"\n            (click)=\"close()\"\n        >{{ 'ADF_FILE_UPLOAD.BUTTON.CLOSE' | translate }}</button>\n    </footer>\n\n    <footer class=\"adf-upload-dialog__actions\"\n            *ngIf=\"isConfirmation\" cdkTrapFocus cdkTrapFocusAutoCapture>\n        <button\n            id=\"adf-upload-dialog-cancel\"\n            [attr.aria-label]=\"'ADF_FILE_UPLOAD.ARIA-LABEL.CONFIRMATION.CANCEL' | translate\"\n            mat-button\n            (click)=\"cancelAllUploads()\"\n        >{{ 'ADF_FILE_UPLOAD.CONFIRMATION.BUTTON.CANCEL' | translate }}</button>\n\n        <button\n            id=\"adf-upload-dialog-confirm\"\n            [attr.aria-label]=\"'ADF_FILE_UPLOAD.ARIA-LABEL.CONFIRMATION.CONTINUE' | translate\"\n            mat-button\n            color=\"primary\"\n            (click)=\"toggleConfirmation()\"\n        >{{ 'ADF_FILE_UPLOAD.CONFIRMATION.BUTTON.CONTINUE' | translate }}</button>\n    </footer>\n</div>\n",
                encapsulation: i0.ViewEncapsulation.None,
                styles: [".adf-upload-dialog{background:var(--theme-dialog-bg-color);bottom:20px;box-shadow:1px 5px 15px #888;color:var(--theme-text-color);position:fixed;width:40%;z-index:999}.adf-upload-dialog--padding{padding:1em}.adf-upload-dialog--hide{display:none!important}.adf-upload-dialog--minimized{width:20%}.adf-upload-dialog--minimized .adf-upload-dialog__content{display:none}.adf-upload-dialog__header{align-items:center;display:flex;padding:1em}.adf-upload-dialog__header button{color:var(--theme-text-color)!important;line-height:0;min-width:0;padding:0}.adf-upload-dialog__title{flex:1 1 auto;margin-left:.5em}.adf-upload-dialog__info{padding:0 1em 1em}.adf-upload-dialog__content{border-bottom:1px solid var(--adf-upload-border-color);border-top:1px solid var(--adf-upload-border-color);max-height:194px;overflow:auto}.adf-upload-dialog__confirmation{padding:0 .5em}.adf-upload-dialog__confirmation--title{color:var(--theme-text-bold-color);font-size:16px;letter-spacing:-.4px;line-height:1.5}.adf-upload-dialog__confirmation--text{margin-bottom:0}.adf-upload-dialog__actions{display:flex;justify-content:flex-end;padding:1em}.adf-upload-dialog__actions>button{text-transform:uppercase}[adfUploadDialogLeft] .adf-upload-dialog{left:25px}[adfUploadDialogRight] .adf-upload-dialog{right:25px}"]
            }]
    }], function () { return [{ type: ɵngcc21.UploadService }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc21.UserPreferencesService }, { type: ɵngcc0.ElementRef }]; }, { position: [{
            type: i0.Input
        }], alwaysVisible: [{
            type: i0.Input
        }], error: [{
            type: i0.Output
        }], isPositionRight: [{
            type: i0.HostBinding,
            args: ['attr.adfUploadDialogRight']
        }], isPositionLeft: [{
            type: i0.HostBinding,
            args: ['attr.adfUploadDialogLeft']
        }], uploadList: [{
            type: i0.ViewChild,
            args: ['uploadList']
        }] }); })();
        return FileUploadingDialogComponent;
    }());
    FileUploadingDialogComponent.ctorParameters = function () { return [
        { type: i1.UploadService },
        { type: i0.ChangeDetectorRef },
        { type: i1.UserPreferencesService },
        { type: i0.ElementRef }
    ]; };
    FileUploadingDialogComponent.propDecorators = {
        uploadList: [{ type: i0.ViewChild, args: ['uploadList',] }],
        position: [{ type: i0.Input }],
        alwaysVisible: [{ type: i0.Input }],
        error: [{ type: i0.Output }],
        isPositionRight: [{ type: i0.HostBinding, args: ['attr.adfUploadDialogRight',] }],
        isPositionLeft: [{ type: i0.HostBinding, args: ['attr.adfUploadDialogLeft',] }]
    };

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var FileUploadingListRowComponent = /** @class */ (function () {
        function FileUploadingListRowComponent() {
            this.cancel = new i0.EventEmitter();
            this.remove = new i0.EventEmitter();
            this.FileUploadStatus = i1.FileUploadStatus;
        }
        FileUploadingListRowComponent.prototype.onCancel = function (file) {
            this.cancel.emit(file);
        };
        FileUploadingListRowComponent.prototype.onRemove = function (file) {
            this.remove.emit(file);
        };
        FileUploadingListRowComponent.prototype.showCancelledStatus = function () {
            return this.file.status === i1.FileUploadStatus.Cancelled ||
                this.file.status === i1.FileUploadStatus.Aborted ||
                this.file.status === i1.FileUploadStatus.Deleted;
        };
        Object.defineProperty(FileUploadingListRowComponent.prototype, "versionNumber", {
            get: function () {
                return this.file.data.entry.properties['cm:versionLabel'];
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(FileUploadingListRowComponent.prototype, "mimeType", {
            get: function () {
                if (this.file && this.file.file && this.file.file.type) {
                    return this.file.file.type;
                }
                return 'default';
            },
            enumerable: false,
            configurable: true
        });
        FileUploadingListRowComponent.prototype.isUploadVersion = function () {
            return (!!this.file.data &&
                this.file.options &&
                this.file.options.newVersion &&
                this.file.data.entry.properties &&
                this.file.data.entry.properties['cm:versionLabel']);
        };
FileUploadingListRowComponent.ɵfac = function FileUploadingListRowComponent_Factory(t) { return new (t || FileUploadingListRowComponent)(); };
FileUploadingListRowComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: FileUploadingListRowComponent, selectors: [["adf-file-uploading-list-row"]], inputs: { file: "file" }, outputs: { cancel: "cancel", remove: "remove" }, decls: 12, vars: 11, consts: [[1, "adf-file-uploading-row"], ["mat-list-icon", "", "class", "adf-file-uploading-row__type", 4, "ngIf"], [3, "value", 4, "ngIf"], ["tabindex", "0", 1, "adf-file-uploading-row__name", 3, "title"], ["class", "adf-file-uploading-row__version", "tabindex", "0", 4, "ngIf"], ["tabindex", "0", "role", "button", "adf-toggle-icon", "", "data-automation-id", "cancel-upload-progress", "class", "adf-file-uploading-row__group adf-file-uploading-row__group--toggle", 3, "title", "keyup.enter", "click", 4, "ngIf"], ["mat-icon-button", "", "adf-toggle-icon", "", "class", "adf-file-uploading-row__group", 3, "title", "click", 4, "ngIf"], ["class", "adf-file-uploading-row__file-version", "role", "status", 4, "ngIf"], ["adf-toggle-icon", "", "mat-icon-button", "", "data-automation-id", "cancel-upload-queue", "class", "adf-file-uploading-row__group", 3, "title", "click", 4, "ngIf"], ["tabindex", "0", "role", "status", "class", "adf-file-uploading-row__block adf-file-uploading-row__status--error", 4, "ngIf"], ["tabindex", "0", "role", "status", "class", "adf-file-uploading-row__block adf-file-uploading-row__status--cancelled", 4, "ngIf"], ["mat-list-icon", "", 1, "adf-file-uploading-row__type"], [3, "value"], ["tabindex", "0", 1, "adf-file-uploading-row__version"], ["color", "primary", "disabled", "", 3, "title"], ["tabindex", "0", "role", "button", "adf-toggle-icon", "", "data-automation-id", "cancel-upload-progress", 1, "adf-file-uploading-row__group", "adf-file-uploading-row__group--toggle", 3, "title", "keyup.enter", "click"], ["toggleIcon", "toggleIcon"], ["class", "adf-file-uploading-row__status", 4, "ngIf"], ["class", "adf-file-uploading-row__action adf-file-uploading-row__action--cancel", 4, "ngIf"], [1, "adf-file-uploading-row__status"], [1, "adf-file-uploading-row__action", "adf-file-uploading-row__action--cancel"], ["mat-icon-button", "", "adf-toggle-icon", "", 1, "adf-file-uploading-row__group", 3, "title", "click"], ["class", "adf-file-uploading-row__status adf-file-uploading-row__status--done", 4, "ngIf"], ["class", "adf-file-uploading-row__action adf-file-uploading-row__action--remove", 4, "ngIf"], [1, "adf-file-uploading-row__status", "adf-file-uploading-row__status--done"], [1, "adf-file-uploading-row__action", "adf-file-uploading-row__action--remove"], ["role", "status", 1, "adf-file-uploading-row__file-version"], ["mat-list-icon", "", 1, "adf-file-uploading-row__status--done"], ["adf-toggle-icon", "", "mat-icon-button", "", "data-automation-id", "cancel-upload-queue", 1, "adf-file-uploading-row__group", 3, "title", "click"], ["toggleIconCancel", "toggleIcon"], ["class", "adf-file-uploading-row__status adf-file-uploading-row__status--pending", 4, "ngIf"], [1, "adf-file-uploading-row__status", "adf-file-uploading-row__status--pending"], ["tabindex", "0", "role", "status", 1, "adf-file-uploading-row__block", "adf-file-uploading-row__status--error"], ["mat-list-icon", "", 3, "matTooltip"], ["tabindex", "0", "role", "status", 1, "adf-file-uploading-row__block", "adf-file-uploading-row__status--cancelled"]], template: function FileUploadingListRowComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵtemplate(1, FileUploadingListRowComponent_mat_icon_1_Template, 2, 0, "mat-icon", 1);
        ɵngcc0.ɵɵtemplate(2, FileUploadingListRowComponent_adf_icon_2_Template, 1, 1, "adf-icon", 2);
        ɵngcc0.ɵɵelementStart(3, "span", 3);
        ɵngcc0.ɵɵtext(4);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(5, FileUploadingListRowComponent_span_5_Template, 4, 8, "span", 4);
        ɵngcc0.ɵɵtemplate(6, FileUploadingListRowComponent_div_6_Template, 6, 11, "div", 5);
        ɵngcc0.ɵɵtemplate(7, FileUploadingListRowComponent_button_7_Template, 6, 11, "button", 6);
        ɵngcc0.ɵɵtemplate(8, FileUploadingListRowComponent_div_8_Template, 4, 3, "div", 7);
        ɵngcc0.ɵɵtemplate(9, FileUploadingListRowComponent_button_9_Template, 6, 11, "button", 8);
        ɵngcc0.ɵɵtemplate(10, FileUploadingListRowComponent_div_10_Template, 6, 11, "div", 9);
        ɵngcc0.ɵɵtemplate(11, FileUploadingListRowComponent_div_11_Template, 4, 6, "div", 10);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.mimeType === "default");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.mimeType !== "default");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵpropertyInterpolate("title", ctx.file.name);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate1(" ", ctx.file.name, " ");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.isUploadVersion());
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.file.status === ctx.FileUploadStatus.Progress || ctx.file.status === ctx.FileUploadStatus.Starting);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.file.status === ctx.FileUploadStatus.Complete && !ctx.isUploadVersion());
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.file.status === ctx.FileUploadStatus.Complete && ctx.isUploadVersion());
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.file.status === ctx.FileUploadStatus.Pending);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.file.status === ctx.FileUploadStatus.Error);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.showCancelledStatus());
    } }, directives: function () { return [ɵngcc23.NgIf, ɵngcc4.MatIcon, ɵngcc7.MatListIconCssMatStyler, ɵngcc21.IconComponent, ɵngcc2.MatChip, ToggleIconDirective, ɵngcc1.MatButton, ɵngcc24.MatTooltip]; }, pipes: function () { return [ɵngcc25.TranslatePipe, ɵngcc21.FileSizePipe, FileUploadErrorPipe]; }, styles: ["adf-file-uploading-list-row:not(:first-child){border-top:1px solid var(--adf-upload-border-color);display:block}.adf-file-uploading-row{align-items:center;cursor:default;display:flex;padding:.3em 1em}.adf-file-uploading-row:hover{background:#eee}.adf-file-uploading-row__name{flex:1 1 auto;overflow:hidden;padding:0 1em 0 .5em;text-overflow:ellipsis;white-space:nowrap}.adf-file-uploading-row__block,.adf-file-uploading-row__file-version,.adf-file-uploading-row__group{align-items:center;display:flex!important;height:40px;justify-content:flex-end;line-height:40px;min-width:100px}.adf-file-uploading-row__group--toggle{align-items:center;cursor:pointer;display:flex;height:40px;line-height:40px}.adf-file-uploading-row__status--done{color:var(--theme-accent-color)}.adf-file-uploading-row__action--cancel,.adf-file-uploading-row__action--remove,.adf-file-uploading-row__status--error{color:var(--theme-warn-color)}"], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FileUploadingListRowComponent, [{
        type: i0.Component,
        args: [{
                selector: 'adf-file-uploading-list-row',
                template: "<div class=\"adf-file-uploading-row\">\n    <mat-icon *ngIf=\"mimeType === 'default'\" mat-list-icon class=\"adf-file-uploading-row__type\">\n        insert_drive_file\n    </mat-icon>\n\n    <adf-icon *ngIf=\"mimeType !== 'default'\" value=\"adf:{{ mimeType }}\"></adf-icon>\n\n    <span\n        tabindex=\"0\"\n        class=\"adf-file-uploading-row__name\"\n        title=\"{{ file.name }}\">\n        {{ file.name }}\n    </span>\n\n    <span *ngIf=\"isUploadVersion()\" class=\"adf-file-uploading-row__version\" tabindex=\"0\" >\n        <mat-chip color=\"primary\"\n            [attr.aria-label]=\"'ADF_FILE_UPLOAD.ARIA-LABEL.VERSION' | translate: { version:  versionNumber }\"\n            [title]=\"'version' + versionNumber\" disabled\n        >{{ versionNumber }}</mat-chip>\n    </span>\n\n    <div\n        tabindex=\"0\"\n        role=\"button\"\n        #toggleIcon=\"toggleIcon\"\n        adf-toggle-icon\n        (keyup.enter)=\"onCancel(file)\"\n        (click)=\"onCancel(file)\"\n        data-automation-id=\"cancel-upload-progress\"\n        *ngIf=\"file.status === FileUploadStatus.Progress || file.status === FileUploadStatus.Starting\"\n        [attr.aria-label]=\"'ADF_FILE_UPLOAD.ARIA-LABEL.CANCEL_FILE_UPLOAD' | translate: { file: file.name }\"\n        class=\"adf-file-uploading-row__group adf-file-uploading-row__group--toggle\"\n        title=\"{{ 'ADF_FILE_UPLOAD.BUTTON.CANCEL_FILE' | translate }}\">\n\n        <span class=\"adf-file-uploading-row__status\" *ngIf=\"!toggleIcon.isToggled\">\n            {{ file.progress.loaded | adfFileSize }} / {{ file.progress.total | adfFileSize }}\n        </span>\n\n        <mat-icon *ngIf=\"toggleIcon.isToggled\"\n            class=\"adf-file-uploading-row__action adf-file-uploading-row__action--cancel\">\n            clear\n        </mat-icon>\n    </div>\n\n    <button mat-icon-button\n        adf-toggle-icon\n        #toggleIcon=\"toggleIcon\"\n        *ngIf=\"file.status === FileUploadStatus.Complete && !isUploadVersion()\"\n        (click)=\"onRemove(file)\"\n        class=\"adf-file-uploading-row__group\"\n        [attr.aria-label]=\"'ADF_FILE_UPLOAD.ARIA-LABEL.REMOVE_FILE' | translate: { file: file.name }\"\n        title=\"{{ 'ADF_FILE_UPLOAD.BUTTON.REMOVE_FILE' | translate }}\">\n\n        <mat-icon *ngIf=\"!toggleIcon.isToggled\"\n            class=\"adf-file-uploading-row__status adf-file-uploading-row__status--done\">\n            check_circle\n        </mat-icon>\n\n        <mat-icon *ngIf=\"toggleIcon.isToggled\"\n            class=\"adf-file-uploading-row__action adf-file-uploading-row__action--remove\">\n            remove_circle\n        </mat-icon>\n    </button>\n\n    <div\n        *ngIf=\"file.status === FileUploadStatus.Complete && isUploadVersion()\"\n        class=\"adf-file-uploading-row__file-version\"\n        [attr.aria-label]=\"'ADF_FILE_UPLOAD.STATUS.FILE_DONE_STATUS' | translate\"\n        role=\"status\"\n        >\n        <mat-icon\n            mat-list-icon\n            class=\"adf-file-uploading-row__status--done\">\n            check_circle\n        </mat-icon>\n    </div>\n\n    <button\n        adf-toggle-icon\n        #toggleIconCancel=\"toggleIcon\"\n        mat-icon-button\n        *ngIf=\"file.status === FileUploadStatus.Pending\"\n        (click)=\"onCancel(file)\"\n        data-automation-id=\"cancel-upload-queue\"\n        class=\"adf-file-uploading-row__group\"\n        title=\"{{ 'ADF_FILE_UPLOAD.BUTTON.CANCEL_FILE' | translate }}\"\n        [attr.aria-label]=\"'ADF_FILE_UPLOAD.ARIA-LABEL.CANCEL_FILE' | translate: { file: file.name }\">\n        <mat-icon\n            *ngIf=\"!toggleIconCancel.isToggled\"\n            class=\"adf-file-uploading-row__status adf-file-uploading-row__status--pending\">\n            schedule\n        </mat-icon>\n\n        <mat-icon\n            *ngIf=\"toggleIconCancel.isToggled\"\n            class=\"adf-file-uploading-row__action adf-file-uploading-row__action--remove\">\n            remove_circle\n        </mat-icon>\n    </button>\n\n    <div\n        tabindex=\"0\"\n        role=\"status\"\n        *ngIf=\"file.status === FileUploadStatus.Error\"\n        class=\"adf-file-uploading-row__block adf-file-uploading-row__status--error\">\n        <mat-icon mat-list-icon\n            [attr.aria-label]=\"'ADF_FILE_UPLOAD.ARIA-LABEL.UPLOAD_FILE_ERROR' | translate: { error: file.errorCode | adfFileUploadError }\"\n            [matTooltip]=\"file.errorCode | adfFileUploadError\">\n            report_problem\n        </mat-icon>\n    </div>\n\n    <div\n        tabindex=\"0\"\n        [attr.aria-label]=\"'ADF_FILE_UPLOAD.STATUS.FILE_CANCELED_STATUS' | translate\"\n        role=\"status\"\n        *ngIf=\"showCancelledStatus()\"\n        class=\"adf-file-uploading-row__block adf-file-uploading-row__status--cancelled\">\n        {{ 'ADF_FILE_UPLOAD.STATUS.FILE_CANCELED_STATUS' | translate }}\n    </div>\n</div>\n",
                encapsulation: i0.ViewEncapsulation.None,
                styles: ["adf-file-uploading-list-row:not(:first-child){border-top:1px solid var(--adf-upload-border-color);display:block}.adf-file-uploading-row{align-items:center;cursor:default;display:flex;padding:.3em 1em}.adf-file-uploading-row:hover{background:#eee}.adf-file-uploading-row__name{flex:1 1 auto;overflow:hidden;padding:0 1em 0 .5em;text-overflow:ellipsis;white-space:nowrap}.adf-file-uploading-row__block,.adf-file-uploading-row__file-version,.adf-file-uploading-row__group{align-items:center;display:flex!important;height:40px;justify-content:flex-end;line-height:40px;min-width:100px}.adf-file-uploading-row__group--toggle{align-items:center;cursor:pointer;display:flex;height:40px;line-height:40px}.adf-file-uploading-row__status--done{color:var(--theme-accent-color)}.adf-file-uploading-row__action--cancel,.adf-file-uploading-row__action--remove,.adf-file-uploading-row__status--error{color:var(--theme-warn-color)}"]
            }]
    }], function () { return []; }, { cancel: [{
            type: i0.Output
        }], remove: [{
            type: i0.Output
        }], file: [{
            type: i0.Input
        }] }); })();
        return FileUploadingListRowComponent;
    }());
    FileUploadingListRowComponent.propDecorators = {
        file: [{ type: i0.Input }],
        cancel: [{ type: i0.Output }],
        remove: [{ type: i0.Output }]
    };

    var FileUploadingListComponent = /** @class */ (function () {
        function FileUploadingListComponent(uploadService, nodesApi, translateService) {
            this.uploadService = uploadService;
            this.nodesApi = nodesApi;
            this.translateService = translateService;
            this.FileUploadStatus = i1.FileUploadStatus;
            this.files = [];
            this.error = new i0.EventEmitter();
        }
        FileUploadingListComponent.prototype.cancelFile = function (file) {
            if (file.status === i1.FileUploadStatus.Pending) {
                file.status = i1.FileUploadStatus.Cancelled;
            }
            else {
                this.uploadService.cancelUpload(file);
            }
        };
        FileUploadingListComponent.prototype.removeFile = function (file) {
            var _this = this;
            this.deleteNode(file).subscribe(function () {
                if (file.status === i1.FileUploadStatus.Error) {
                    _this.notifyError(file);
                }
                _this.cancelNodeVersionInstances(file);
                _this.uploadService.cancelUpload(file);
            });
        };
        FileUploadingListComponent.prototype.cancelAllFiles = function () {
            var _this = this;
            var deletedFiles = [];
            this.files.forEach(function (file) {
                if (_this.isUploadingFile(file)) {
                    _this.uploadService.cancelUpload(file);
                }
                else if (file.status === i1.FileUploadStatus.Complete) {
                    deletedFiles.push(_this.deleteNode(file));
                }
            });
            rxjs.forkJoin.apply(void 0, __spread(deletedFiles)).subscribe(function (files) {
                var _a;
                var errors = files.filter(function (file) { return file.status === i1.FileUploadStatus.Error; });
                if (errors.length) {
                    _this.notifyError.apply(_this, __spread(errors));
                }
                (_a = _this.uploadService).cancelUpload.apply(_a, __spread(files));
            });
        };
        FileUploadingListComponent.prototype.isUploadCompleted = function () {
            return (!this.isUploadCancelled() &&
                Boolean(this.files.length) &&
                !this.files.some(function (_a) {
                    var status = _a.status;
                    return status === i1.FileUploadStatus.Starting ||
                        status === i1.FileUploadStatus.Progress ||
                        status === i1.FileUploadStatus.Pending;
                }));
        };
        FileUploadingListComponent.prototype.isUploadCancelled = function () {
            return (!!this.files.length &&
                this.files.every(function (_a) {
                    var status = _a.status;
                    return status === i1.FileUploadStatus.Aborted ||
                        status === i1.FileUploadStatus.Cancelled ||
                        status === i1.FileUploadStatus.Deleted;
                }));
        };
        FileUploadingListComponent.prototype.deleteNode = function (file) {
            var id = file.data.entry.id;
            return this.nodesApi.deleteNode(id, { permanent: true }).pipe(operators.map(function () {
                file.status = i1.FileUploadStatus.Deleted;
                return file;
            }), operators.catchError(function () {
                file.status = i1.FileUploadStatus.Error;
                return rxjs.of(file);
            }));
        };
        FileUploadingListComponent.prototype.cancelNodeVersionInstances = function (file) {
            this.files
                .filter(function (item) { return item.options.newVersion &&
                item.data.entry.id === file.data.entry.id; })
                .map(function (item) {
                item.status = i1.FileUploadStatus.Deleted;
            });
        };
        FileUploadingListComponent.prototype.notifyError = function () {
            var files = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                files[_i] = arguments[_i];
            }
            var messageError = null;
            if (files.length === 1) {
                messageError = this.translateService.instant('FILE_UPLOAD.MESSAGES.REMOVE_FILE_ERROR', { fileName: files[0].name });
            }
            else {
                messageError = this.translateService.instant('FILE_UPLOAD.MESSAGES.REMOVE_FILES_ERROR', { total: files.length });
            }
            this.error.emit(messageError);
        };
        FileUploadingListComponent.prototype.isUploadingFile = function (file) {
            return file.status === i1.FileUploadStatus.Pending ||
                file.status === i1.FileUploadStatus.Starting ||
                file.status === i1.FileUploadStatus.Progress;
        };
FileUploadingListComponent.ɵfac = function FileUploadingListComponent_Factory(t) { return new (t || FileUploadingListComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc21.UploadService), ɵngcc0.ɵɵdirectiveInject(ɵngcc21.NodesApiService), ɵngcc0.ɵɵdirectiveInject(ɵngcc21.TranslationService)); };
FileUploadingListComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: FileUploadingListComponent, selectors: [["adf-file-uploading-list"]], contentQueries: function FileUploadingListComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, i0.TemplateRef, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.template = _t.first);
    } }, inputs: { files: "files" }, outputs: { error: "error" }, decls: 2, vars: 2, consts: [[1, "upload-list"], ["ngFor", "", 3, "ngForOf", "ngForTemplate"]], template: function FileUploadingListComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵtemplate(1, FileUploadingListComponent_ng_template_1_Template, 0, 0, "ng-template", 1);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.files)("ngForTemplate", ctx.template);
    } }, directives: [ɵngcc23.NgForOf], styles: ["[_nghost-%COMP%]{display:flex;flex-direction:column}"] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FileUploadingListComponent, [{
        type: i0.Component,
        args: [{
                selector: 'adf-file-uploading-list',
                template: "<div class=\"upload-list\">\n    <ng-template\n        ngFor\n        [ngForOf]=\"files\"\n        [ngForTemplate]=\"template\">\n    </ng-template>\n</div>\n",
                styles: [":host{display:flex;flex-direction:column}"]
            }]
    }], function () { return [{ type: ɵngcc21.UploadService }, { type: ɵngcc21.NodesApiService }, { type: ɵngcc21.TranslationService }]; }, { files: [{
            type: i0.Input
        }], error: [{
            type: i0.Output
        }], template: [{
            type: i0.ContentChild,
            args: [i0.TemplateRef]
        }] }); })();
        return FileUploadingListComponent;
    }());
    FileUploadingListComponent.ctorParameters = function () { return [
        { type: i1.UploadService },
        { type: i1.NodesApiService },
        { type: i1.TranslationService }
    ]; };
    FileUploadingListComponent.propDecorators = {
        template: [{ type: i0.ContentChild, args: [i0.TemplateRef,] }],
        files: [{ type: i0.Input }],
        error: [{ type: i0.Output }]
    };

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var UploadFilesEvent = /** @class */ (function () {
        function UploadFilesEvent(files, uploadService, successEmitter, errorEmitter) {
            this.files = files;
            this.uploadService = uploadService;
            this.successEmitter = successEmitter;
            this.errorEmitter = errorEmitter;
            this.isDefaultPrevented = false;
        }
        Object.defineProperty(UploadFilesEvent.prototype, "defaultPrevented", {
            get: function () {
                return this.isDefaultPrevented;
            },
            enumerable: false,
            configurable: true
        });
        UploadFilesEvent.prototype.preventDefault = function () {
            this.isDefaultPrevented = true;
        };
        UploadFilesEvent.prototype.pauseUpload = function () {
            this.preventDefault();
        };
        UploadFilesEvent.prototype.resumeUpload = function () {
            var _a;
            if (this.files && this.files.length > 0) {
                (_a = this.uploadService).addToQueue.apply(_a, __spread(this.files));
                this.uploadService.uploadFilesInTheQueue(this.successEmitter, this.errorEmitter);
            }
        };
        return UploadFilesEvent;
    }());

    var UploadBase = /** @class */ (function () {
        function UploadBase(uploadService, translationService, ngZone) {
            this.uploadService = uploadService;
            this.translationService = translationService;
            this.ngZone = ngZone;
            this.rootFolderId = '-root-';
            this.disabled = false;
            this.acceptedFilesType = '*';
            this.versioning = false;
            this.majorVersion = false;
            this.nodeType = 'cm:content';
            this.success = new i0.EventEmitter();
            this.error = new i0.EventEmitter();
            this.beginUpload = new i0.EventEmitter();
            this.updateFileVersion = new i0.EventEmitter();
            this.onDestroy$ = new rxjs.Subject();
        }
        UploadBase.prototype.ngOnInit = function () {
            var _this = this;
            this.uploadService.fileUploadError
                .pipe(operators.takeUntil(this.onDestroy$))
                .subscribe(function (error) { return _this.error.emit(error); });
        };
        UploadBase.prototype.ngOnDestroy = function () {
            this.onDestroy$.next(true);
            this.onDestroy$.complete();
        };
        UploadBase.prototype.uploadFiles = function (files) {
            var _this = this;
            var filteredFiles = files
                .map(function (file) {
                return _this.createFileModel(file, _this.rootFolderId, (file.webkitRelativePath || '').replace(/\/[^\/]*$/, ''));
            });
            this.uploadQueue(filteredFiles);
        };
        UploadBase.prototype.uploadFilesInfo = function (files) {
            var _this = this;
            var filteredFiles = files
                .map(function (fileInfo) {
                return _this.createFileModel(fileInfo.file, _this.rootFolderId, fileInfo.relativeFolder);
            });
            this.uploadQueue(filteredFiles);
        };
        UploadBase.prototype.uploadQueue = function (files) {
            var _this = this;
            var filteredFiles = files
                .filter(this.isFileAcceptable.bind(this))
                .filter(this.isFileSizeAcceptable.bind(this));
            this.ngZone.run(function () {
                var _a;
                var event = new UploadFilesEvent(__spread(filteredFiles), _this.uploadService, _this.success, _this.error);
                _this.beginUpload.emit(event);
                if (!event.defaultPrevented) {
                    if (filteredFiles.length > 0) {
                        (_a = _this.uploadService).addToQueue.apply(_a, __spread(filteredFiles));
                        _this.uploadService.uploadFilesInTheQueue(_this.success, _this.error);
                    }
                }
            });
        };
        UploadBase.prototype.isFileAcceptable = function (file) {
            if (this.acceptedFilesType === '*') {
                return true;
            }
            var allowedExtensions = this.acceptedFilesType
                .split(',')
                .map(function (ext) { return ext.trim().replace(/^\./, ''); });
            return allowedExtensions.indexOf(file.extension) !== -1;
        };
        UploadBase.prototype.createFileModel = function (file, parentId, path, id) {
            return new i1.FileModel(file, {
                comment: this.comment,
                majorVersion: this.majorVersion,
                newVersion: this.versioning,
                parentId: parentId,
                path: path,
                nodeType: this.nodeType
            }, id);
        };
        UploadBase.prototype.isFileSizeAllowed = function (file) {
            var isFileSizeAllowed = true;
            if (this.isMaxFileSizeDefined()) {
                isFileSizeAllowed = this.isFileSizeCorrect(file);
            }
            return isFileSizeAllowed;
        };
        UploadBase.prototype.isMaxFileSizeDefined = function () {
            return this.maxFilesSize !== undefined && this.maxFilesSize !== null;
        };
        UploadBase.prototype.isFileSizeCorrect = function (file) {
            return this.maxFilesSize >= 0 && file.size <= this.maxFilesSize;
        };
        UploadBase.prototype.isFileSizeAcceptable = function (file) {
            var acceptableSize = true;
            if (!this.isFileSizeAllowed(file)) {
                acceptableSize = false;
                var message = this.translationService.instant('FILE_UPLOAD.MESSAGES.EXCEED_MAX_FILE_SIZE', { fileName: file.name });
                this.error.emit(message);
            }
            return acceptableSize;
        };
UploadBase.ɵfac = function UploadBase_Factory(t) { return new (t || UploadBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc21.UploadService), ɵngcc0.ɵɵdirectiveInject(ɵngcc21.TranslationService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
UploadBase.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: UploadBase, inputs: { rootFolderId: "rootFolderId", disabled: "disabled", acceptedFilesType: "acceptedFilesType", versioning: "versioning", majorVersion: "majorVersion", nodeType: "nodeType", maxFilesSize: "maxFilesSize", comment: "comment" }, outputs: { success: "success", error: "error", beginUpload: "beginUpload", updateFileVersion: "updateFileVersion" } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(UploadBase, [{
        type: i0.Directive
    }], function () { return [{ type: ɵngcc21.UploadService }, { type: ɵngcc21.TranslationService }, { type: ɵngcc0.NgZone }]; }, { rootFolderId: [{
            type: i0.Input
        }], disabled: [{
            type: i0.Input
        }], acceptedFilesType: [{
            type: i0.Input
        }], versioning: [{
            type: i0.Input
        }], majorVersion: [{
            type: i0.Input
        }], nodeType: [{
            type: i0.Input
        }], success: [{
            type: i0.Output
        }], error: [{
            type: i0.Output
        }], beginUpload: [{
            type: i0.Output
        }], updateFileVersion: [{
            type: i0.Output
        }], maxFilesSize: [{
            type: i0.Input
        }], comment: [{
            type: i0.Input
        }] }); })();
        return UploadBase;
    }());
    UploadBase.ctorParameters = function () { return [
        { type: i1.UploadService },
        { type: i1.TranslationService },
        { type: i0.NgZone }
    ]; };
    UploadBase.propDecorators = {
        maxFilesSize: [{ type: i0.Input }],
        rootFolderId: [{ type: i0.Input }],
        disabled: [{ type: i0.Input }],
        acceptedFilesType: [{ type: i0.Input }],
        versioning: [{ type: i0.Input }],
        majorVersion: [{ type: i0.Input }],
        comment: [{ type: i0.Input }],
        nodeType: [{ type: i0.Input }],
        success: [{ type: i0.Output }],
        error: [{ type: i0.Output }],
        beginUpload: [{ type: i0.Output }],
        updateFileVersion: [{ type: i0.Output }]
    };

    var UploadButtonComponent = /** @class */ (function (_super) {
        __extends(UploadButtonComponent, _super);
        function UploadButtonComponent(uploadService, contentService, translationService, logService, ngZone) {
            var _this = _super.call(this, uploadService, translationService, ngZone) || this;
            _this.uploadService = uploadService;
            _this.contentService = contentService;
            _this.translationService = translationService;
            _this.logService = logService;
            _this.ngZone = ngZone;
            _this.uploadFolders = false;
            _this.multipleFiles = false;
            _this.tooltip = null;
            _this.permissionEvent = new i0.EventEmitter();
            _this.hasAllowableOperations = false;
            _this.permissionValue = new rxjs.Subject();
            return _this;
        }
        UploadButtonComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.permissionValue.subscribe(function (permission) {
                _this.hasAllowableOperations = permission;
            });
        };
        UploadButtonComponent.prototype.ngOnChanges = function (changes) {
            var rootFolderId = changes['rootFolderId'];
            if (rootFolderId && rootFolderId.currentValue) {
                this.checkPermission();
            }
        };
        UploadButtonComponent.prototype.isButtonDisabled = function () {
            return this.disabled ? true : undefined;
        };
        UploadButtonComponent.prototype.onFilesAdded = function ($event) {
            var files = i1.FileUtils.toFileArray($event.currentTarget.files);
            if (this.hasAllowableOperations) {
                this.uploadFiles(files);
            }
            else {
                this.permissionEvent.emit(new PermissionModel({ type: 'content', action: 'upload', permission: 'create' }));
            }
            $event.target.value = '';
        };
        UploadButtonComponent.prototype.onClickUploadButton = function () {
            if (this.file) {
                var files = [this.file];
                if (this.hasAllowableOperations) {
                    this.uploadFiles(files);
                }
                else {
                    this.permissionEvent.emit(new PermissionModel({ type: 'content', action: 'upload', permission: 'create' }));
                }
            }
        };
        UploadButtonComponent.prototype.onDirectoryAdded = function ($event) {
            if (this.hasAllowableOperations) {
                var files = i1.FileUtils.toFileArray($event.currentTarget.files);
                this.uploadFiles(files);
            }
            else {
                this.permissionEvent.emit(new PermissionModel({ type: 'content', action: 'upload', permission: 'create' }));
            }
            $event.target.value = '';
        };
        UploadButtonComponent.prototype.checkPermission = function () {
            var _this = this;
            if (this.rootFolderId) {
                var opts = {
                    includeSource: true,
                    include: ['allowableOperations']
                };
                this.contentService.getNode(this.rootFolderId, opts).subscribe(function (res) { return _this.permissionValue.next(_this.nodeHasPermission(res.entry, i1.AllowableOperationsEnum.CREATE)); }, function (error) {
                    if (error && error.error) {
                        _this.error.emit({ error: error.error.message });
                    }
                    else {
                        _this.error.emit({ error: 'FILE_UPLOAD.BUTTON.PERMISSION_CHECK_ERROR' });
                    }
                });
            }
        };
        UploadButtonComponent.prototype.nodeHasPermission = function (node, permission) {
            return this.contentService.hasAllowableOperations(node, permission);
        };
UploadButtonComponent.ɵfac = function UploadButtonComponent_Factory(t) { return new (t || UploadButtonComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc21.UploadService), ɵngcc0.ɵɵdirectiveInject(ɵngcc21.ContentService), ɵngcc0.ɵɵdirectiveInject(ɵngcc21.TranslationService), ɵngcc0.ɵɵdirectiveInject(ɵngcc21.LogService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
UploadButtonComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: UploadButtonComponent, selectors: [["adf-upload-button"]], inputs: { uploadFolders: "uploadFolders", multipleFiles: "multipleFiles", staticTitle: "staticTitle", tooltip: "tooltip", file: "file" }, outputs: { permissionEvent: "permissionEvent" }, features: [ɵngcc0.ɵɵProvidersFeature([], [
            { provide: i1.EXTENDIBLE_COMPONENT, useExisting: i0.forwardRef(function () { return UploadButtonComponent; }) }
        ]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature], decls: 3, vars: 2, consts: [[1, "adf-upload-button-file-container"], [4, "ngIf"], ["mat-button", "", 3, "disabled", "click", 4, "ngIf"], ["mat-button", "", 3, "disabled", "click"], ["id", "upload-single-file-label", 4, "ngIf"], ["id", "upload-single-file-label-static", 4, "ngIf"], ["id", "upload-single-file", "data-automation-id", "upload-single-file", "name", "uploadFiles", 3, "type", "accept", "title", "change", "click"], ["uploadSingleFile", ""], ["id", "upload-single-file-label"], ["id", "upload-single-file-label-static"], ["id", "upload-multiple-file-label", 4, "ngIf"], ["id", "upload-multiple-file-label-static", 4, "ngIf"], ["id", "upload-multiple-files", "data-automation-id", "upload-multiple-files", "type", "file", "name", "uploadFiles", "multiple", "multiple", 3, "accept", "title", "change"], ["uploadMultipleFiles", ""], ["id", "upload-multiple-file-label"], ["id", "upload-multiple-file-label-static"], ["id", "uploadFolder-label", 4, "ngIf"], ["id", "uploadFolder-label-static", 4, "ngIf"], ["id", "uploadFolder", "data-automation-id", "uploadFolder", "type", "file", "name", "uploadFiles", "multiple", "multiple", "webkitdirectory", "", "directory", "", 3, "accept", "title", "change"], ["uploadFolders", ""], ["id", "uploadFolder-label"], ["id", "uploadFolder-label-static"]], template: function UploadButtonComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "form", 0);
        ɵngcc0.ɵɵtemplate(1, UploadButtonComponent_div_1_Template, 3, 2, "div", 1);
        ɵngcc0.ɵɵtemplate(2, UploadButtonComponent_div_2_Template, 8, 6, "div", 1);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.uploadFolders);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.uploadFolders);
    } }, directives: [ɵngcc26.ɵangular_packages_forms_forms_y, ɵngcc26.NgControlStatusGroup, ɵngcc26.NgForm, ɵngcc23.NgIf, ɵngcc1.MatButton, ɵngcc4.MatIcon], pipes: [ɵngcc25.TranslatePipe], styles: [_c15], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(UploadButtonComponent, [{
        type: i0.Component,
        args: [{
                selector: 'adf-upload-button',
                template: "<form class=\"adf-upload-button-file-container\">\n    <!--Files Upload-->\n    <div *ngIf=\"!uploadFolders\">\n\n        <!--Single Files Upload-->\n        <button *ngIf=\"!multipleFiles\"\n            [disabled]=\"isButtonDisabled()\"\n            mat-button\n            (click)=\"uploadSingleFile.click()\">\n            <mat-icon>file_upload</mat-icon>\n            <span id=\"upload-single-file-label\"\n                *ngIf=\"!staticTitle\">{{ 'FILE_UPLOAD.BUTTON.UPLOAD_FILE' | translate }}</span>\n            <span id=\"upload-single-file-label-static\"\n                *ngIf=\"staticTitle\">{{ staticTitle }}</span>\n            <input #uploadSingleFile\n                id=\"upload-single-file\"\n                data-automation-id=\"upload-single-file\"\n                [type]=\"file ? 'button' : 'file'\"\n                name=\"uploadFiles\"\n                accept=\"{{acceptedFilesType}}\"\n                [attr.disabled]=\"isButtonDisabled()\"\n                [title]=\"tooltip\"\n                (change)=\"onFilesAdded($event)\"\n                (click)=\"onClickUploadButton()\">\n        </button>\n\n        <!--Multiple Files Upload-->\n        <button *ngIf=\"multipleFiles\"\n            [disabled]=\"isButtonDisabled()\"\n            mat-button\n            (click)=\"uploadMultipleFiles.click()\">\n            <mat-icon>file_upload</mat-icon>\n\n            <span id=\"upload-multiple-file-label\"\n                *ngIf=\"!staticTitle\">{{ 'FILE_UPLOAD.BUTTON.UPLOAD_FILE' | translate }}</span>\n            <span\n                id=\"upload-multiple-file-label-static\"\n                *ngIf=\"staticTitle\">{{ staticTitle }}</span>\n            <input #uploadMultipleFiles\n                id=\"upload-multiple-files\"\n                data-automation-id=\"upload-multiple-files\"\n                type=\"file\"\n                name=\"uploadFiles\"\n                multiple=\"multiple\"\n                accept=\"{{acceptedFilesType}}\"\n                [attr.disabled]=\"isButtonDisabled()\"\n                [title]=\"tooltip\"\n                (change)=\"onFilesAdded($event)\">\n        </button>\n    </div>\n\n    <!--Folders Upload-->\n    <div *ngIf=\"uploadFolders\">\n        <button\n            [disabled]=\"isButtonDisabled()\"\n            mat-button\n            (click)=\"uploadFolders.click()\">\n            <mat-icon>file_upload</mat-icon>\n            <span id=\"uploadFolder-label\"\n                *ngIf=\"!staticTitle\">{{ 'FILE_UPLOAD.BUTTON.UPLOAD_FOLDER' | translate }}</span>\n            <span id=\"uploadFolder-label-static\"\n                *ngIf=\"staticTitle\">{{ staticTitle }}</span>\n            <input #uploadFolders\n                id=\"uploadFolder\"\n                data-automation-id=\"uploadFolder\"\n                type=\"file\"\n                name=\"uploadFiles\"\n                multiple=\"multiple\"\n                accept=\"{{acceptedFilesType}}\"\n                webkitdirectory directory\n                [attr.disabled]=\"isButtonDisabled()\"\n                [title]=\"tooltip\"\n                (change)=\"onDirectoryAdded($event)\">\n        </button>\n    </div>\n</form>\n",
                viewProviders: [
                    { provide: i1.EXTENDIBLE_COMPONENT, useExisting: i0.forwardRef(function () { return UploadButtonComponent; }) }
                ],
                encapsulation: i0.ViewEncapsulation.None,
                styles: [".adf-upload-button-file-container input{display:none}"]
            }]
    }], function () { return [{ type: ɵngcc21.UploadService }, { type: ɵngcc21.ContentService }, { type: ɵngcc21.TranslationService }, { type: ɵngcc21.LogService }, { type: ɵngcc0.NgZone }]; }, { uploadFolders: [{
            type: i0.Input
        }], multipleFiles: [{
            type: i0.Input
        }], staticTitle: [{
            type: i0.Input
        }], tooltip: [{
            type: i0.Input
        }], file: [{
            type: i0.Input
        }], permissionEvent: [{
            type: i0.Output
        }] }); })();
        return UploadButtonComponent;
    }(UploadBase));
    UploadButtonComponent.ctorParameters = function () { return [
        { type: i1.UploadService },
        { type: i1.ContentService },
        { type: i1.TranslationService },
        { type: i1.LogService },
        { type: i0.NgZone }
    ]; };
    UploadButtonComponent.propDecorators = {
        uploadFolders: [{ type: i0.Input }],
        multipleFiles: [{ type: i0.Input }],
        staticTitle: [{ type: i0.Input }],
        tooltip: [{ type: i0.Input }],
        file: [{ type: i0.Input }],
        permissionEvent: [{ type: i0.Output }]
    };

    var UploadVersionButtonComponent = /** @class */ (function (_super) {
        __extends(UploadVersionButtonComponent, _super);
        function UploadVersionButtonComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        UploadVersionButtonComponent.prototype.createFileModel = function (file) {
            var fileModel = _super.prototype.createFileModel.call(this, file, this.rootFolderId, (file.webkitRelativePath || '').replace(/\/[^\/]*$/, ''), this.node.id);
            if (!this.isFileAcceptable(fileModel)) {
                var message = this.translationService.instant('FILE_UPLOAD.VERSION.MESSAGES.INCOMPATIBLE_VERSION');
                this.error.emit(message);
            }
            return fileModel;
        };
        UploadVersionButtonComponent.prototype.ngOnInit = function () {
            _super.prototype.ngOnInit.call(this);
            this.checkPermission();
        };
        UploadVersionButtonComponent.prototype.checkPermission = function () {
            this.permissionValue.next(this.nodeHasPermission(this.node, i1.AllowableOperationsEnum.UPDATE));
        };
UploadVersionButtonComponent.ɵfac = function UploadVersionButtonComponent_Factory(t) { return ɵUploadVersionButtonComponent_BaseFactory(t || UploadVersionButtonComponent); };
UploadVersionButtonComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: UploadVersionButtonComponent, selectors: [["adf-upload-version-button"]], hostAttrs: [1, "adf-upload-version-button"], inputs: { node: "node" }, features: [ɵngcc0.ɵɵProvidersFeature([], [
            { provide: i1.EXTENDIBLE_COMPONENT, useExisting: i0.forwardRef(function () { return UploadVersionButtonComponent; }) }
        ]), ɵngcc0.ɵɵInheritDefinitionFeature], decls: 3, vars: 2, consts: [[1, "adf-upload-button-file-container"], [4, "ngIf"], ["mat-button", "", 3, "disabled", "click", 4, "ngIf"], ["mat-button", "", 3, "disabled", "click"], ["id", "upload-single-file-label", 4, "ngIf"], ["id", "upload-single-file-label-static", 4, "ngIf"], ["id", "upload-single-file", "data-automation-id", "upload-single-file", "name", "uploadFiles", 3, "type", "accept", "title", "change", "click"], ["uploadSingleFile", ""], ["id", "upload-single-file-label"], ["id", "upload-single-file-label-static"], ["id", "upload-multiple-file-label", 4, "ngIf"], ["id", "upload-multiple-file-label-static", 4, "ngIf"], ["id", "upload-multiple-files", "data-automation-id", "upload-multiple-files", "type", "file", "name", "uploadFiles", "multiple", "multiple", 3, "accept", "title", "change"], ["uploadMultipleFiles", ""], ["id", "upload-multiple-file-label"], ["id", "upload-multiple-file-label-static"], ["id", "uploadFolder-label", 4, "ngIf"], ["id", "uploadFolder-label-static", 4, "ngIf"], ["id", "uploadFolder", "data-automation-id", "uploadFolder", "type", "file", "name", "uploadFiles", "multiple", "multiple", "webkitdirectory", "", "directory", "", 3, "accept", "title", "change"], ["uploadFolders", ""], ["id", "uploadFolder-label"], ["id", "uploadFolder-label-static"]], template: function UploadVersionButtonComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "form", 0);
        ɵngcc0.ɵɵtemplate(1, UploadVersionButtonComponent_div_1_Template, 3, 2, "div", 1);
        ɵngcc0.ɵɵtemplate(2, UploadVersionButtonComponent_div_2_Template, 8, 6, "div", 1);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.uploadFolders);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.uploadFolders);
    } }, directives: [ɵngcc26.ɵangular_packages_forms_forms_y, ɵngcc26.NgControlStatusGroup, ɵngcc26.NgForm, ɵngcc23.NgIf, ɵngcc1.MatButton, ɵngcc4.MatIcon], pipes: [ɵngcc25.TranslatePipe], styles: [_c15], encapsulation: 2 });
var ɵUploadVersionButtonComponent_BaseFactory = /*@__PURE__*/ ɵngcc0.ɵɵgetInheritedFactory(UploadVersionButtonComponent);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(UploadVersionButtonComponent, [{
        type: i0.Component,
        args: [{
                selector: 'adf-upload-version-button',
                template: "<form class=\"adf-upload-button-file-container\">\n    <!--Files Upload-->\n    <div *ngIf=\"!uploadFolders\">\n\n        <!--Single Files Upload-->\n        <button *ngIf=\"!multipleFiles\"\n            [disabled]=\"isButtonDisabled()\"\n            mat-button\n            (click)=\"uploadSingleFile.click()\">\n            <mat-icon>file_upload</mat-icon>\n            <span id=\"upload-single-file-label\"\n                *ngIf=\"!staticTitle\">{{ 'FILE_UPLOAD.BUTTON.UPLOAD_FILE' | translate }}</span>\n            <span id=\"upload-single-file-label-static\"\n                *ngIf=\"staticTitle\">{{ staticTitle }}</span>\n            <input #uploadSingleFile\n                id=\"upload-single-file\"\n                data-automation-id=\"upload-single-file\"\n                [type]=\"file ? 'button' : 'file'\"\n                name=\"uploadFiles\"\n                accept=\"{{acceptedFilesType}}\"\n                [attr.disabled]=\"isButtonDisabled()\"\n                [title]=\"tooltip\"\n                (change)=\"onFilesAdded($event)\"\n                (click)=\"onClickUploadButton()\">\n        </button>\n\n        <!--Multiple Files Upload-->\n        <button *ngIf=\"multipleFiles\"\n            [disabled]=\"isButtonDisabled()\"\n            mat-button\n            (click)=\"uploadMultipleFiles.click()\">\n            <mat-icon>file_upload</mat-icon>\n\n            <span id=\"upload-multiple-file-label\"\n                *ngIf=\"!staticTitle\">{{ 'FILE_UPLOAD.BUTTON.UPLOAD_FILE' | translate }}</span>\n            <span\n                id=\"upload-multiple-file-label-static\"\n                *ngIf=\"staticTitle\">{{ staticTitle }}</span>\n            <input #uploadMultipleFiles\n                id=\"upload-multiple-files\"\n                data-automation-id=\"upload-multiple-files\"\n                type=\"file\"\n                name=\"uploadFiles\"\n                multiple=\"multiple\"\n                accept=\"{{acceptedFilesType}}\"\n                [attr.disabled]=\"isButtonDisabled()\"\n                [title]=\"tooltip\"\n                (change)=\"onFilesAdded($event)\">\n        </button>\n    </div>\n\n    <!--Folders Upload-->\n    <div *ngIf=\"uploadFolders\">\n        <button\n            [disabled]=\"isButtonDisabled()\"\n            mat-button\n            (click)=\"uploadFolders.click()\">\n            <mat-icon>file_upload</mat-icon>\n            <span id=\"uploadFolder-label\"\n                *ngIf=\"!staticTitle\">{{ 'FILE_UPLOAD.BUTTON.UPLOAD_FOLDER' | translate }}</span>\n            <span id=\"uploadFolder-label-static\"\n                *ngIf=\"staticTitle\">{{ staticTitle }}</span>\n            <input #uploadFolders\n                id=\"uploadFolder\"\n                data-automation-id=\"uploadFolder\"\n                type=\"file\"\n                name=\"uploadFiles\"\n                multiple=\"multiple\"\n                accept=\"{{acceptedFilesType}}\"\n                webkitdirectory directory\n                [attr.disabled]=\"isButtonDisabled()\"\n                [title]=\"tooltip\"\n                (change)=\"onDirectoryAdded($event)\">\n        </button>\n    </div>\n</form>\n",
                viewProviders: [
                    { provide: i1.EXTENDIBLE_COMPONENT, useExisting: i0.forwardRef(function () { return UploadVersionButtonComponent; }) }
                ],
                encapsulation: i0.ViewEncapsulation.None,
                host: { class: 'adf-upload-version-button' },
                styles: [".adf-upload-button-file-container input{display:none}"]
            }]
    }], null, { node: [{
            type: i0.Input
        }] }); })();
        return UploadVersionButtonComponent;
    }(UploadButtonComponent));
    UploadVersionButtonComponent.propDecorators = {
        node: [{ type: i0.Input }]
    };

    var UploadDragAreaComponent = /** @class */ (function (_super) {
        __extends(UploadDragAreaComponent, _super);
        function UploadDragAreaComponent(uploadService, translationService, notificationService, contentService, ngZone) {
            var _this = _super.call(this, uploadService, translationService, ngZone) || this;
            _this.uploadService = uploadService;
            _this.translationService = translationService;
            _this.notificationService = notificationService;
            _this.contentService = contentService;
            _this.ngZone = ngZone;
            return _this;
        }
        UploadDragAreaComponent.prototype.onFilesDropped = function (files) {
            if (!this.disabled && files.length) {
                this.uploadFiles(files);
            }
        };
        UploadDragAreaComponent.prototype.onFolderEntityDropped = function (folder) {
            var _this = this;
            if (!this.disabled && folder.isDirectory) {
                i1.FileUtils.flatten(folder).then(function (filesInfo) {
                    _this.uploadFilesInfo(filesInfo);
                });
            }
        };
        UploadDragAreaComponent.prototype.showUndoNotificationBar = function (latestFilesAdded) {
            var _this = this;
            var messageTranslate, actionTranslate;
            messageTranslate = this.translationService.get('FILE_UPLOAD.MESSAGES.PROGRESS');
            actionTranslate = this.translationService.get('FILE_UPLOAD.ACTION.UNDO');
            this.notificationService.openSnackMessageAction(messageTranslate.value, actionTranslate.value, 3000).onAction().subscribe(function () {
                var _a;
                (_a = _this.uploadService).cancelUpload.apply(_a, __spread(latestFilesAdded));
            });
        };
        UploadDragAreaComponent.prototype.isDroppable = function () {
            return !this.disabled;
        };
        UploadDragAreaComponent.prototype.onUploadFiles = function (event) {
            event.stopPropagation();
            event.preventDefault();
            var isAllowed = this.isTargetNodeFolder(event) ?
                this.contentService.hasAllowableOperations(event.detail.data.obj.entry, i1.AllowableOperationsEnum.CREATE)
                : this.contentService.hasAllowableOperations(event.detail.data.obj.entry, i1.AllowableOperationsEnum.UPDATE);
            if (isAllowed) {
                if (!this.isTargetNodeFolder(event) && event.detail.files.length === 1) {
                    this.updateFileVersion.emit(event);
                }
                else {
                    var fileInfo = event.detail.files;
                    if (this.isTargetNodeFolder(event)) {
                        var destinationFolderName_1 = event.detail.data.obj.entry.name;
                        fileInfo.map(function (file) { return file.relativeFolder = destinationFolderName_1 ? destinationFolderName_1.concat(file.relativeFolder) : file.relativeFolder; });
                    }
                    if (fileInfo && fileInfo.length > 0) {
                        this.uploadFilesInfo(fileInfo);
                    }
                }
            }
        };
        UploadDragAreaComponent.prototype.isTargetNodeFolder = function (event) {
            return event.detail.data.obj && event.detail.data.obj.entry.isFolder;
        };
UploadDragAreaComponent.ɵfac = function UploadDragAreaComponent_Factory(t) { return new (t || UploadDragAreaComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc21.UploadService), ɵngcc0.ɵɵdirectiveInject(ɵngcc21.TranslationService), ɵngcc0.ɵɵdirectiveInject(ɵngcc21.NotificationService), ɵngcc0.ɵɵdirectiveInject(ɵngcc21.ContentService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
UploadDragAreaComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: UploadDragAreaComponent, selectors: [["adf-upload-drag-area"]], hostAttrs: [1, "adf-upload-drag-area"], features: [ɵngcc0.ɵɵProvidersFeature([], [
            { provide: i1.EXTENDIBLE_COMPONENT, useExisting: i0.forwardRef(function () { return UploadDragAreaComponent; }) }
        ]), ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c16, decls: 3, vars: 1, consts: [["dropzone", "", "webkitdropzone", "*", 1, "adf-upload-border", 3, "adf-file-draggable", "filesDropped", "folderEntityDropped", "upload-files"], ["droparea", ""]], template: function UploadDragAreaComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵelementStart(0, "div", 0, 1);
        ɵngcc0.ɵɵlistener("filesDropped", function UploadDragAreaComponent_Template_div_filesDropped_0_listener($event) { return ctx.onFilesDropped($event); })("folderEntityDropped", function UploadDragAreaComponent_Template_div_folderEntityDropped_0_listener($event) { return ctx.onFolderEntityDropped($event); })("upload-files", function UploadDragAreaComponent_Template_div_upload_files_0_listener($event) { return ctx.onUploadFiles($event); });
        ɵngcc0.ɵɵprojection(2);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("adf-file-draggable", ctx.isDroppable());
    } }, directives: function () { return [FileDraggableDirective]; }, styles: ["adf-upload-drag-area{display:flex;flex:1;flex-direction:column;height:100%;min-height:0;overflow:hidden}adf-upload-drag-area .adf-upload-border{box-sizing:border-box;display:flex;flex-direction:column;height:100%;min-height:0;overflow:hidden;text-align:unset;vertical-align:unset;width:100%}adf-upload-drag-area .adf-file-draggable__input-focus{border:1px dashed #2196f3;color:#2196f3}adf-upload-drag-area .adf-file-draggable__input-focus adf-document-list{background:#e3f2fd}adf-upload-drag-area .adf-file-draggable__input-focus adf-document-list adf-datatable>table{background:inherit}adf-upload-drag-area .adf-upload__dragging{background:#e3f2fd;color:#2196f3}adf-upload-drag-area .adf-upload__dragging td{border-bottom:1px dashed #2196f3!important;border-top:1px dashed #2196f3!important}adf-upload-drag-area .adf-upload__dragging td:first-child{border-left:1px dashed #2196f3!important}adf-upload-drag-area .adf-upload__dragging td:last-child{border-right:1px dashed #2196f3!important}adf-upload-drag-area:first-child>div adf-upload-drag-area .adf-file-draggable__input-focus{border:1px dashed #2196f3!important;color:#2196f3;margin-left:0!important}adf-upload-drag-area:first-child .adf-upload-border{text-align:inherit!important;vertical-align:inherit!important}adf-upload-drag-area:first-child .adf-file-draggable__input-focus{border:1px dashed #2196f3!important;color:#2196f3!important;margin-left:0!important}adf-upload-drag-area:first-child .adf-file-draggable__input-focus adf-upload-drag-area>div{border:1px dashed #2196f3!important;color:#2196f3;margin-left:0!important}"], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(UploadDragAreaComponent, [{
        type: i0.Component,
        args: [{
                selector: 'adf-upload-drag-area',
                template: "<div [adf-file-draggable]=\"isDroppable()\" class=\"adf-upload-border\"\n     (filesDropped)=\"onFilesDropped($event)\"\n     (folderEntityDropped)=\"onFolderEntityDropped($event)\"\n     (upload-files)=\"onUploadFiles($any($event))\"\n     dropzone=\"\" webkitdropzone=\"*\" #droparea>\n    <ng-content></ng-content>\n</div>\n",
                host: { 'class': 'adf-upload-drag-area' },
                viewProviders: [
                    { provide: i1.EXTENDIBLE_COMPONENT, useExisting: i0.forwardRef(function () { return UploadDragAreaComponent; }) }
                ],
                encapsulation: i0.ViewEncapsulation.None,
                styles: ["adf-upload-drag-area{display:flex;flex:1;flex-direction:column;height:100%;min-height:0;overflow:hidden}adf-upload-drag-area .adf-upload-border{box-sizing:border-box;display:flex;flex-direction:column;height:100%;min-height:0;overflow:hidden;text-align:unset;vertical-align:unset;width:100%}adf-upload-drag-area .adf-file-draggable__input-focus{border:1px dashed #2196f3;color:#2196f3}adf-upload-drag-area .adf-file-draggable__input-focus adf-document-list{background:#e3f2fd}adf-upload-drag-area .adf-file-draggable__input-focus adf-document-list adf-datatable>table{background:inherit}adf-upload-drag-area .adf-upload__dragging{background:#e3f2fd;color:#2196f3}adf-upload-drag-area .adf-upload__dragging td{border-bottom:1px dashed #2196f3!important;border-top:1px dashed #2196f3!important}adf-upload-drag-area .adf-upload__dragging td:first-child{border-left:1px dashed #2196f3!important}adf-upload-drag-area .adf-upload__dragging td:last-child{border-right:1px dashed #2196f3!important}adf-upload-drag-area:first-child>div adf-upload-drag-area .adf-file-draggable__input-focus{border:1px dashed #2196f3!important;color:#2196f3;margin-left:0!important}adf-upload-drag-area:first-child .adf-upload-border{text-align:inherit!important;vertical-align:inherit!important}adf-upload-drag-area:first-child .adf-file-draggable__input-focus{border:1px dashed #2196f3!important;color:#2196f3!important;margin-left:0!important}adf-upload-drag-area:first-child .adf-file-draggable__input-focus adf-upload-drag-area>div{border:1px dashed #2196f3!important;color:#2196f3;margin-left:0!important}"]
            }]
    }], function () { return [{ type: ɵngcc21.UploadService }, { type: ɵngcc21.TranslationService }, { type: ɵngcc21.NotificationService }, { type: ɵngcc21.ContentService }, { type: ɵngcc0.NgZone }]; }, null); })();
        return UploadDragAreaComponent;
    }(UploadBase));
    UploadDragAreaComponent.ctorParameters = function () { return [
        { type: i1.UploadService },
        { type: i1.TranslationService },
        { type: i1.NotificationService },
        { type: i1.ContentService },
        { type: i0.NgZone }
    ]; };

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var FileUploadErrorPipe = /** @class */ (function () {
        function FileUploadErrorPipe(translation) {
            this.translation = translation;
        }
        FileUploadErrorPipe.prototype.transform = function (errorCode) {
            return this.translation.instant("FILE_UPLOAD.ERRORS." + (errorCode || 'GENERIC'));
        };
FileUploadErrorPipe.ɵfac = function FileUploadErrorPipe_Factory(t) { return new (t || FileUploadErrorPipe)(ɵngcc0.ɵɵdirectiveInject(ɵngcc21.TranslationService)); };
FileUploadErrorPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "adfFileUploadError", type: FileUploadErrorPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FileUploadErrorPipe, [{
        type: i0.Pipe,
        args: [{
                name: 'adfFileUploadError',
                pure: true
            }]
    }], function () { return [{ type: ɵngcc21.TranslationService }]; }, null); })();
        return FileUploadErrorPipe;
    }());
    FileUploadErrorPipe.ctorParameters = function () { return [
        { type: i1.TranslationService }
    ]; };

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var FileDraggableDirective = /** @class */ (function () {
        function FileDraggableDirective(el, ngZone) {
            this.ngZone = ngZone;
            this.enabled = true;
            this.filesDropped = new i0.EventEmitter();
            this.folderEntityDropped = new i0.EventEmitter();
            this.cssClassName = 'adf-file-draggable__input-focus';
            this.element = el.nativeElement;
        }
        FileDraggableDirective.prototype.ngOnInit = function () {
            var _this = this;
            this.ngZone.runOutsideAngular(function () {
                _this.element.addEventListener('dragenter', _this.onDragEnter.bind(_this));
                _this.element.addEventListener('dragover', _this.onDragOver.bind(_this));
                _this.element.addEventListener('dragleave', _this.onDragLeave.bind(_this));
                _this.element.addEventListener('drop', _this.onDropFiles.bind(_this));
            });
        };
        FileDraggableDirective.prototype.ngOnDestroy = function () {
            this.element.removeEventListener('dragenter', this.onDragEnter);
            this.element.removeEventListener('dragover', this.onDragOver);
            this.element.removeEventListener('dragleave', this.onDragLeave);
            this.element.removeEventListener('drop', this.onDropFiles);
        };
        FileDraggableDirective.prototype.onDropFiles = function (event) {
            if (this.enabled && !event.defaultPrevented) {
                this.preventDefault(event);
                var items = event.dataTransfer.items;
                if (items) {
                    var files = [];
                    for (var i = 0; i < items.length; i++) {
                        if (items[i].webkitGetAsEntry) {
                            var item = items[i].webkitGetAsEntry();
                            if (item) {
                                if (item.isFile) {
                                    var file = items[i].getAsFile();
                                    if (file) {
                                        files.push(file);
                                    }
                                }
                                else if (item.isDirectory) {
                                    this.folderEntityDropped.emit(item);
                                }
                            }
                        }
                    }
                    if (files.length > 0) {
                        this.filesDropped.emit(files);
                    }
                }
                else {
                    var files = i1.FileUtils.toFileArray(event.dataTransfer.files);
                    this.filesDropped.emit(files);
                }
                this.element.classList.remove(this.cssClassName);
            }
        };
        FileDraggableDirective.prototype.onDragEnter = function (event) {
            if (this.enabled && !event.defaultPrevented) {
                this.preventDefault(event);
                event.dataTransfer.dropEffect = 'copy';
                this.element.classList.add(this.cssClassName);
            }
        };
        FileDraggableDirective.prototype.onDragLeave = function (event) {
            if (this.enabled && !event.defaultPrevented) {
                this.preventDefault(event);
                this.element.classList.remove(this.cssClassName);
            }
        };
        FileDraggableDirective.prototype.onDragOver = function (event) {
            if (this.enabled && !event.defaultPrevented) {
                this.preventDefault(event);
                event.dataTransfer.dropEffect = 'copy';
                this.element.classList.add(this.cssClassName);
            }
        };
        FileDraggableDirective.prototype.preventDefault = function (event) {
            event.stopPropagation();
            event.preventDefault();
        };
FileDraggableDirective.ɵfac = function FileDraggableDirective_Factory(t) { return new (t || FileDraggableDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
FileDraggableDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: FileDraggableDirective, selectors: [["", "adf-file-draggable", ""]], inputs: { enabled: ["adf-file-draggable", "enabled"] }, outputs: { filesDropped: "filesDropped", folderEntityDropped: "folderEntityDropped" } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FileDraggableDirective, [{
        type: i0.Directive,
        args: [{
                selector: '[adf-file-draggable]'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, { enabled: [{
            type: i0.Input,
            args: ['adf-file-draggable']
        }], filesDropped: [{
            type: i0.Output
        }], folderEntityDropped: [{
            type: i0.Output
        }] }); })();
        return FileDraggableDirective;
    }());
    FileDraggableDirective.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: i0.NgZone }
    ]; };
    FileDraggableDirective.propDecorators = {
        enabled: [{ type: i0.Input, args: ['adf-file-draggable',] }],
        filesDropped: [{ type: i0.Output }],
        folderEntityDropped: [{ type: i0.Output }]
    };

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var ToggleIconDirective = /** @class */ (function () {
        function ToggleIconDirective() {
            this.isFocus = false;
            this.toggle = false;
        }
        ToggleIconDirective.prototype.onMouseEnter = function () {
            if (!this.isFocus) {
                this.toggle = true;
            }
        };
        ToggleIconDirective.prototype.onMouseLeave = function () {
            if (!this.isFocus) {
                this.toggle = false;
            }
            if (this.isFocus && this.toggle) {
                this.isFocus = false;
                this.toggle = false;
            }
        };
        ToggleIconDirective.prototype.onFocus = function () {
            this.isFocus = true;
            this.toggle = true;
        };
        ToggleIconDirective.prototype.onBlur = function () {
            this.isFocus = false;
            this.toggle = false;
        };
        Object.defineProperty(ToggleIconDirective.prototype, "isToggled", {
            get: function () {
                return this.toggle;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ToggleIconDirective.prototype, "isFocused", {
            get: function () {
                return this.isFocus;
            },
            enumerable: false,
            configurable: true
        });
ToggleIconDirective.ɵfac = function ToggleIconDirective_Factory(t) { return new (t || ToggleIconDirective)(); };
ToggleIconDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ToggleIconDirective, selectors: [["", "adf-toggle-icon", ""]], hostBindings: function ToggleIconDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("mouseenter", function ToggleIconDirective_mouseenter_HostBindingHandler() { return ctx.onMouseEnter(); })("mouseleave", function ToggleIconDirective_mouseleave_HostBindingHandler() { return ctx.onMouseLeave(); })("focus", function ToggleIconDirective_focus_HostBindingHandler() { return ctx.onFocus(); })("blur", function ToggleIconDirective_blur_HostBindingHandler() { return ctx.onBlur(); });
    } }, exportAs: ["toggleIcon"] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ToggleIconDirective, [{
        type: i0.Directive,
        args: [{
                selector: '[adf-toggle-icon]',
                exportAs: 'toggleIcon'
            }]
    }], function () { return []; }, { onMouseEnter: [{
            type: i0.HostListener,
            args: ['mouseenter']
        }], onMouseLeave: [{
            type: i0.HostListener,
            args: ['mouseleave']
        }], onFocus: [{
            type: i0.HostListener,
            args: ['focus']
        }], onBlur: [{
            type: i0.HostListener,
            args: ['blur']
        }] }); })();
        return ToggleIconDirective;
    }());
    ToggleIconDirective.propDecorators = {
        onMouseEnter: [{ type: i0.HostListener, args: ['mouseenter',] }],
        onMouseLeave: [{ type: i0.HostListener, args: ['mouseleave',] }],
        onFocus: [{ type: i0.HostListener, args: ['focus',] }],
        onBlur: [{ type: i0.HostListener, args: ['blur',] }]
    };

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var UploadModule = /** @class */ (function () {
        function UploadModule() {
        }
UploadModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: UploadModule });
UploadModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function UploadModule_Factory(t) { return new (t || UploadModule)(); }, imports: [[
            i1.CoreModule,
            common.CommonModule,
            MaterialModule,
            a11y.A11yModule
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(UploadModule, { declarations: [FileDraggableDirective, UploadDragAreaComponent, UploadButtonComponent, UploadVersionButtonComponent, FileUploadingDialogComponent, FileUploadingListComponent, FileUploadingListRowComponent, FileUploadErrorPipe, ToggleIconDirective], imports: [ɵngcc21.CoreModule, ɵngcc23.CommonModule, MaterialModule, ɵngcc30.A11yModule], exports: [FileDraggableDirective, UploadDragAreaComponent, UploadButtonComponent, UploadVersionButtonComponent, FileUploadingDialogComponent, FileUploadingListComponent, FileUploadingListRowComponent, FileUploadErrorPipe, ToggleIconDirective] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(UploadModule, [{
        type: i0.NgModule,
        args: [{
                imports: [
                    i1.CoreModule,
                    common.CommonModule,
                    MaterialModule,
                    a11y.A11yModule
                ],
                declarations: [
                    FileDraggableDirective,
                    UploadDragAreaComponent,
                    UploadButtonComponent,
                    UploadVersionButtonComponent,
                    FileUploadingDialogComponent,
                    FileUploadingListComponent,
                    FileUploadingListRowComponent,
                    FileUploadErrorPipe,
                    ToggleIconDirective
                ],
                exports: [
                    FileDraggableDirective,
                    UploadDragAreaComponent,
                    UploadButtonComponent,
                    UploadVersionButtonComponent,
                    FileUploadingDialogComponent,
                    FileUploadingListComponent,
                    FileUploadingListRowComponent,
                    FileUploadErrorPipe,
                    ToggleIconDirective
                ]
            }]
    }], function () { return []; }, null); })();
        return UploadModule;
    }());

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var EmptySearchResultComponent = /** @class */ (function () {
        function EmptySearchResultComponent() {
        }
EmptySearchResultComponent.ɵfac = function EmptySearchResultComponent_Factory(t) { return new (t || EmptySearchResultComponent)(); };
EmptySearchResultComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: EmptySearchResultComponent, selectors: [["adf-empty-search-result"]], ngContentSelectors: _c16, decls: 2, vars: 0, consts: [[1, "adf-empty-search-result"]], template: function EmptySearchResultComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵprojection(1);
        ɵngcc0.ɵɵelementEnd();
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(EmptySearchResultComponent, [{
        type: i0.Component,
        args: [{
                selector: 'adf-empty-search-result',
                template: "<div class=\"adf-empty-search-result\">\n    <ng-content></ng-content>\n</div>\n",
                encapsulation: i0.ViewEncapsulation.None
            }]
    }], function () { return []; }, null); })();
        return EmptySearchResultComponent;
    }());

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var SearchControlComponent = /** @class */ (function () {
        function SearchControlComponent(authService, thumbnailService) {
            this.authService = authService;
            this.thumbnailService = thumbnailService;
            this.highlight = false;
            this.inputType = 'text';
            this.liveSearchEnabled = true;
            this.autocomplete = false;
            this.expandable = true;
            this.liveSearchMaxResults = 5;
            this.submit = new i0.EventEmitter();
            this.searchChange = new i0.EventEmitter();
            this.optionClicked = new i0.EventEmitter();
            this.focusSubject = new rxjs.Subject();
            this.noSearchResultTemplate = null;
            this.searchTerm = '';
            this.onDestroy$ = new rxjs.Subject();
        }
        SearchControlComponent.prototype.isNoSearchTemplatePresent = function () {
            return !!this.emptySearchTemplate;
        };
        SearchControlComponent.prototype.ngOnDestroy = function () {
            this.onDestroy$.next(true);
            this.onDestroy$.complete();
        };
        SearchControlComponent.prototype.isLoggedIn = function () {
            return this.authService.isEcmLoggedIn();
        };
        SearchControlComponent.prototype.inputChange = function (value) {
            this.searchTerm = value;
            this.searchChange.emit(value);
        };
        SearchControlComponent.prototype.getMimeTypeIcon = function (node) {
            var mimeType = this.getMimeType(node);
            return this.thumbnailService.getMimeTypeIcon(mimeType);
        };
        SearchControlComponent.prototype.getMimeType = function (node) {
            var mimeType;
            if (node.entry.content && node.entry.content.mimeType) {
                mimeType = node.entry.content.mimeType;
            }
            if (node.entry.isFolder) {
                mimeType = 'folder';
            }
            return mimeType;
        };
        SearchControlComponent.prototype.elementClicked = function (item) {
            if (item.entry) {
                this.optionClicked.next(item);
                this.focusSubject.next(new FocusEvent('blur'));
            }
        };
        SearchControlComponent.prototype.onFocus = function (event) {
            this.focusSubject.next(event);
        };
        SearchControlComponent.prototype.onBlur = function (event) {
            var nextElement = this.getNextElementSibling(event.target);
            if (!nextElement && !this.isListElement(event)) {
                this.focusSubject.next(event);
            }
        };
        SearchControlComponent.prototype.onSelectFirstResult = function () {
            if (this.listResultElement && this.listResultElement.length > 0) {
                var firstElement = this.listResultElement.first;
                firstElement._getHostElement().focus();
            }
        };
        SearchControlComponent.prototype.onRowArrowDown = function (event) {
            var nextElement = this.getNextElementSibling(event.target);
            if (nextElement) {
                nextElement.focus();
            }
        };
        SearchControlComponent.prototype.onRowArrowUp = function (event) {
            var previousElement = this.getPreviousElementSibling(event.target);
            if (previousElement) {
                previousElement.focus();
            }
            else {
                this.focusSubject.next(new FocusEvent('focus'));
            }
        };
        SearchControlComponent.prototype.onReset = function (status) {
            if (status) {
                this.searchAutocomplete.resetResults();
            }
        };
        SearchControlComponent.prototype.isListElement = function (event) {
            return event.relatedTarget && event.relatedTarget.children[0] && event.relatedTarget.children[0].className === 'mat-list-item-content';
        };
        SearchControlComponent.prototype.getNextElementSibling = function (node) {
            return node.nextElementSibling;
        };
        SearchControlComponent.prototype.getPreviousElementSibling = function (node) {
            return node.previousElementSibling;
        };
SearchControlComponent.ɵfac = function SearchControlComponent_Factory(t) { return new (t || SearchControlComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc21.AuthenticationService), ɵngcc0.ɵɵdirectiveInject(ɵngcc21.ThumbnailService)); };
SearchControlComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: SearchControlComponent, selectors: [["adf-search-control"]], contentQueries: function SearchControlComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, EmptySearchResultComponent, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.emptySearchTemplate = _t.first);
    } }, viewQuery: function SearchControlComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c17, true);
        ɵngcc0.ɵɵviewQuery(_c18, true);
        ɵngcc0.ɵɵviewQuery(list.MatListItem, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.searchTextInput = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.searchAutocomplete = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.listResultElement = _t);
    } }, hostAttrs: [1, "adf-search-control"], inputs: { highlight: "highlight", inputType: "inputType", liveSearchEnabled: "liveSearchEnabled", autocomplete: "autocomplete", expandable: "expandable", liveSearchMaxResults: "liveSearchMaxResults" }, outputs: { submit: "submit", searchChange: "searchChange", optionClicked: "optionClicked" }, ngContentSelectors: _c16, decls: 1, vars: 1, consts: [[4, "ngIf"], [3, "searchTerm", "expandable", "autocomplete", "liveSearchEnabled", "focusListener", "searchAutocomplete", "searchChange", "reset", "selectResult", "submit"], ["searchTextInput", ""], [1, "adf-search-result-autocomplete", 3, "maxResults"], ["search", "", "auto", "searchAutocomplete"], ["id", "autocomplete-search-result-list", 4, "ngIf"], ["id", "autocomplete-search-result-list"], ["class", "adf-search-autocomplete-item", 3, "id", "tabindex", "blur", "keyup.arrowdown", "keyup.arrowup", "click", "keyup.enter", "touchend", 4, "ngFor", "ngForOf"], ["id", "search_no_result", "data-automation-id", "search_no_result_found", 4, "ngIf"], [1, "adf-search-autocomplete-item", 3, "id", "tabindex", "blur", "keyup.arrowdown", "keyup.arrowup", "click", "keyup.enter", "touchend"], ["mat-list-icon", ""], [3, "alt", "src"], ["mat-line", "", "class", "adf-search-fixed-text", 3, "id", "innerHtml", 4, "ngIf", "ngIfElse"], ["elseBlock", ""], ["mat-line", "", 1, "adf-search-fixed-text"], ["mat-line", "", 1, "adf-search-fixed-text", 3, "id", "innerHtml"], ["id", "search_no_result", "data-automation-id", "search_no_result_found"], [4, "ngIf", "ngIfElse"], ["defaultNoResult", ""]], template: function SearchControlComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵtemplate(0, SearchControlComponent_div_0_Template, 7, 7, "div", 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngIf", ctx.isLoggedIn());
    } }, directives: function () { return [ɵngcc23.NgIf, ɵngcc21.SearchTextInputComponent, SearchComponent, ɵngcc7.MatList, ɵngcc23.NgForOf, ɵngcc7.MatListItem, ɵngcc4.MatIcon, ɵngcc7.MatListIconCssMatStyler, ɵngcc10.MatLine]; }, pipes: function () { return [ɵngcc21.HighlightPipe, ɵngcc25.TranslatePipe]; }, styles: [".adf-search-result-autocomplete{-webkit-overflow-scrolling:touch;background-color:var(--theme-card-bg-color);border-radius:2px;color:var(--theme-text-fg-color);font-size:15px;margin-left:45px;margin-top:-22px;max-height:400px;max-width:280px;min-width:112px;overflow:auto;position:absolute;transform:translateX(-40px);transform-origin:top left;z-index:5}.adf-search-result-autocomplete:not([class*=mat-elevation-z]){box-shadow:0 3px 1px -2px rgba(0,0,0,.2),0 2px 2px 0 rgba(0,0,0,.14),0 1px 5px 0 rgba(0,0,0,.12)}@media screen and (max-width:959px){.adf-search-result-autocomplete{overflow:hidden;text-overflow:ellipsis;white-space:nowrap}}.adf-search-autocomplete-item:hover{background-color:var(--theme-bg-hover-color);opacity:1}"], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SearchControlComponent, [{
        type: i0.Component,
        args: [{
                selector: 'adf-search-control',
                template: "<div *ngIf=\"isLoggedIn()\">\n    <adf-search-text-input  #searchTextInput\n                            [searchTerm]= \"searchTerm\"\n                            [expandable]=\"expandable\"\n                            [autocomplete]=\"autocomplete\"\n                            [liveSearchEnabled]=\"liveSearchEnabled\"\n                            [focusListener]=\"focusSubject.asObservable()\"\n                            [searchAutocomplete]=\"auto\"\n                            (searchChange)=\"inputChange($event)\"\n                            (reset)=\"onReset($event)\"\n                            (selectResult)=\"onSelectFirstResult()\"\n                            (submit)=\"submit.emit($event)\"></adf-search-text-input>\n\n    <adf-search #search\n                #auto=\"searchAutocomplete\"\n                class=\"adf-search-result-autocomplete\"\n                [maxResults]=\"liveSearchMaxResults\">\n        <ng-template let-data>\n            <mat-list *ngIf=\"searchTextInput?.isSearchBarActive()\" id=\"autocomplete-search-result-list\">\n                <mat-list-item\n                    *ngFor=\"let item of data?.list?.entries; let idx = index\"\n                    id=\"result_option_{{idx}}\"\n                    [attr.data-automation-id]=\"'autocomplete_for_' + item.entry.name\"\n                    [tabindex]=\"0\"\n                    (blur)=\"onBlur($event)\"\n                    (keyup.arrowdown)=\"onRowArrowDown($event)\"\n                    (keyup.arrowup)=\"onRowArrowUp($event)\"\n                    class=\"adf-search-autocomplete-item\"\n                    (click)=\"elementClicked(item)\"\n                    (keyup.enter)=\"elementClicked(item)\"\n                    (touchend)=\"elementClicked(item)\">\n                    <!-- This is a comment -->\n                    <mat-icon mat-list-icon>\n                        <img [alt]=\"getMimeType(item)\" [src]=\"getMimeTypeIcon(item)\"/>\n                    </mat-icon>\n                    <h4 mat-line id=\"result_name_{{idx}}\"\n                        *ngIf=\"highlight; else elseBlock\"\n                        class=\"adf-search-fixed-text\"\n                        [innerHtml]=\"item.entry.name | highlight: searchTerm\">\n                        {{ item?.entry.name }}\n                    </h4>\n                    <ng-template #elseBlock>\n                        <h4 class=\"adf-search-fixed-text\" mat-line id=\"result_name_{{idx}}\"\n                            [innerHtml]=\"item.entry.name\"></h4>\n                    </ng-template>\n                    <p mat-line class=\"adf-search-fixed-text\"> {{item?.entry.createdByUser.displayName}} </p>\n                </mat-list-item>\n                <mat-list-item id=\"search_no_result\"\n                            data-automation-id=\"search_no_result_found\"\n                            *ngIf=\"data?.list?.entries.length === 0\">\n                    <ng-content\n                        selector=\"adf-empty-search-result\"\n                        *ngIf=\"isNoSearchTemplatePresent() else defaultNoResult\">\n                    </ng-content>\n                    <ng-template #defaultNoResult>\n                        <p mat-line class=\"adf-search-fixed-text\">{{ 'SEARCH.RESULTS.NONE' | translate:{searchTerm:\n                            searchTerm} }}</p>\n                    </ng-template>\n                </mat-list-item>\n            </mat-list>\n        </ng-template>\n    </adf-search>\n</div>\n",
                encapsulation: i0.ViewEncapsulation.None,
                host: { class: 'adf-search-control' },
                styles: [".adf-search-result-autocomplete{-webkit-overflow-scrolling:touch;background-color:var(--theme-card-bg-color);border-radius:2px;color:var(--theme-text-fg-color);font-size:15px;margin-left:45px;margin-top:-22px;max-height:400px;max-width:280px;min-width:112px;overflow:auto;position:absolute;transform:translateX(-40px);transform-origin:top left;z-index:5}.adf-search-result-autocomplete:not([class*=mat-elevation-z]){box-shadow:0 3px 1px -2px rgba(0,0,0,.2),0 2px 2px 0 rgba(0,0,0,.14),0 1px 5px 0 rgba(0,0,0,.12)}@media screen and (max-width:959px){.adf-search-result-autocomplete{overflow:hidden;text-overflow:ellipsis;white-space:nowrap}}.adf-search-autocomplete-item:hover{background-color:var(--theme-bg-hover-color);opacity:1}"]
            }]
    }], function () { return [{ type: ɵngcc21.AuthenticationService }, { type: ɵngcc21.ThumbnailService }]; }, { highlight: [{
            type: i0.Input
        }], inputType: [{
            type: i0.Input
        }], liveSearchEnabled: [{
            type: i0.Input
        }], autocomplete: [{
            type: i0.Input
        }], expandable: [{
            type: i0.Input
        }], liveSearchMaxResults: [{
            type: i0.Input
        }], submit: [{
            type: i0.Output
        }], searchChange: [{
            type: i0.Output
        }], optionClicked: [{
            type: i0.Output
        }], searchTextInput: [{
            type: i0.ViewChild,
            args: ['searchTextInput']
        }], searchAutocomplete: [{
            type: i0.ViewChild,
            args: ['search']
        }], listResultElement: [{
            type: i0.ViewChildren,
            args: [list.MatListItem]
        }], emptySearchTemplate: [{
            type: i0.ContentChild,
            args: [EmptySearchResultComponent]
        }] }); })();
        return SearchControlComponent;
    }());
    SearchControlComponent.ctorParameters = function () { return [
        { type: i1.AuthenticationService },
        { type: i1.ThumbnailService }
    ]; };
    SearchControlComponent.propDecorators = {
        highlight: [{ type: i0.Input }],
        inputType: [{ type: i0.Input }],
        liveSearchEnabled: [{ type: i0.Input }],
        autocomplete: [{ type: i0.Input }],
        expandable: [{ type: i0.Input }],
        liveSearchMaxResults: [{ type: i0.Input }],
        submit: [{ type: i0.Output }],
        searchChange: [{ type: i0.Output }],
        optionClicked: [{ type: i0.Output }],
        searchTextInput: [{ type: i0.ViewChild, args: ['searchTextInput',] }],
        searchAutocomplete: [{ type: i0.ViewChild, args: ['search',] }],
        listResultElement: [{ type: i0.ViewChildren, args: [list.MatListItem,] }],
        emptySearchTemplate: [{ type: i0.ContentChild, args: [EmptySearchResultComponent,] }]
    };

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var SearchComponent = /** @class */ (function () {
        function SearchComponent(searchService, _elementRef) {
            var _this = this;
            this.searchService = searchService;
            this._elementRef = _elementRef;
            this.displayWith = null;
            this.maxResults = 20;
            this.skipResults = 0;
            this.searchTerm = '';
            this.resultLoaded = new i0.EventEmitter();
            this.error = new i0.EventEmitter();
            this.showPanel = false;
            this._isOpen = false;
            this.keyPressedStream = new rxjs.Subject();
            this._classList = {};
            this.onDestroy$ = new rxjs.Subject();
            this.keyPressedStream
                .pipe(operators.debounceTime(200), operators.takeUntil(this.onDestroy$))
                .subscribe(function (searchedWord) {
                _this.loadSearchResults(searchedWord);
            });
            searchService.dataLoaded
                .pipe(operators.takeUntil(this.onDestroy$))
                .subscribe(function (nodePaging) { return _this.onSearchDataLoaded(nodePaging); }, function (error) { return _this.onSearchDataError(error); });
        }
        Object.defineProperty(SearchComponent.prototype, "classList", {
            set: function (classList) {
                var _this = this;
                if (classList && classList.length) {
                    classList.split(' ').forEach(function (className) { return _this._classList[className.trim()] = true; });
                    this._elementRef.nativeElement.className = '';
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(SearchComponent.prototype, "isOpen", {
            get: function () {
                return this._isOpen && this.showPanel;
            },
            set: function (value) {
                this._isOpen = value;
            },
            enumerable: false,
            configurable: true
        });
        SearchComponent.prototype.ngAfterContentInit = function () {
            this.setVisibility();
        };
        SearchComponent.prototype.ngOnChanges = function (changes) {
            if (changes.searchTerm && changes.searchTerm.currentValue) {
                this.loadSearchResults(changes.searchTerm.currentValue);
            }
        };
        SearchComponent.prototype.ngOnDestroy = function () {
            this.onDestroy$.next(true);
            this.onDestroy$.complete();
        };
        SearchComponent.prototype.resetResults = function () {
            this.cleanResults();
            this.setVisibility();
        };
        SearchComponent.prototype.reload = function () {
            this.loadSearchResults(this.searchTerm);
        };
        SearchComponent.prototype.cleanResults = function () {
            if (this.results) {
                this.results = {};
            }
        };
        SearchComponent.prototype.loadSearchResults = function (searchTerm) {
            var _this = this;
            this.resetResults();
            if (searchTerm) {
                this.searchService.search(searchTerm, this.maxResults, this.skipResults).subscribe(function (result) { return _this.onSearchDataLoaded(result); }, function (err) { return _this.onSearchDataError(err); });
            }
            else {
                this.cleanResults();
            }
        };
        SearchComponent.prototype.onSearchDataLoaded = function (resultSetPaging) {
            if (resultSetPaging) {
                this.results = resultSetPaging;
                this.resultLoaded.emit(this.results);
                this.isOpen = true;
                this.setVisibility();
            }
        };
        SearchComponent.prototype.onSearchDataError = function (error) {
            if (error && error.status !== 400) {
                this.results = null;
                this.error.emit(error);
            }
        };
        SearchComponent.prototype.hidePanel = function () {
            if (this.isOpen) {
                this._classList['adf-search-show'] = false;
                this._classList['adf-search-hide'] = true;
                this.isOpen = false;
            }
        };
        SearchComponent.prototype.setVisibility = function () {
            this.showPanel = !!this.results && !!this.results.list;
            this._classList['adf-search-show'] = this.showPanel;
            this._classList['adf-search-hide'] = !this.showPanel;
        };
SearchComponent.ɵfac = function SearchComponent_Factory(t) { return new (t || SearchComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc21.SearchService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
SearchComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: SearchComponent, selectors: [["adf-search"]], contentQueries: function SearchComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, i0.TemplateRef, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.template = _t.first);
    } }, viewQuery: function SearchComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵstaticViewQuery(_c20, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.panel = _t.first);
    } }, hostAttrs: [1, "adf-search"], inputs: { displayWith: "displayWith", maxResults: "maxResults", skipResults: "skipResults", searchTerm: "searchTerm", classList: ["class", "classList"] }, outputs: { resultLoaded: "resultLoaded", error: "error" }, exportAs: ["searchAutocomplete"], features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 3, vars: 5, consts: [["role", "listbox", "id", "adf-search-results-content", 3, "ngClass"], ["panel", ""], [3, "ngTemplateOutlet", "ngTemplateOutletContext"]], template: function SearchComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0, 1);
        ɵngcc0.ɵɵtemplate(2, SearchComponent_ng_template_2_Template, 0, 0, "ng-template", 2);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngClass", ctx._classList);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx.template)("ngTemplateOutletContext", ɵngcc0.ɵɵpureFunction1(3, _c21, ctx.results));
    } }, directives: [ɵngcc23.NgClass, ɵngcc23.NgTemplateOutlet], styles: [".adf-search-hide{visibility:hidden}.adf-search-show{visibility:visible}"], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SearchComponent, [{
        type: i0.Component,
        args: [{
                selector: 'adf-search',
                template: "<div role=\"listbox\" id=\"adf-search-results-content\" [ngClass]=\"_classList\" #panel>\n    <ng-template\n        [ngTemplateOutlet]=\"template\"\n        [ngTemplateOutletContext]=\"{ $implicit: results }\">\n    </ng-template>\n</div>\n",
                encapsulation: i0.ViewEncapsulation.None,
                preserveWhitespaces: false,
                exportAs: 'searchAutocomplete',
                host: {
                    'class': 'adf-search'
                },
                styles: [".adf-search-hide{visibility:hidden}.adf-search-show{visibility:visible}"]
            }]
    }], function () { return [{ type: ɵngcc21.SearchService }, { type: ɵngcc0.ElementRef }]; }, { displayWith: [{
            type: i0.Input
        }], maxResults: [{
            type: i0.Input
        }], skipResults: [{
            type: i0.Input
        }], searchTerm: [{
            type: i0.Input
        }], resultLoaded: [{
            type: i0.Output
        }], error: [{
            type: i0.Output
        }], classList: [{
            type: i0.Input,
            args: ['class']
        }], panel: [{
            type: i0.ViewChild,
            args: ['panel', { static: true }]
        }], template: [{
            type: i0.ContentChild,
            args: [i0.TemplateRef]
        }] }); })();
        return SearchComponent;
    }());
    SearchComponent.ctorParameters = function () { return [
        { type: i1.SearchService },
        { type: i0.ElementRef }
    ]; };
    SearchComponent.propDecorators = {
        panel: [{ type: i0.ViewChild, args: ['panel', { static: true },] }],
        template: [{ type: i0.ContentChild, args: [i0.TemplateRef,] }],
        displayWith: [{ type: i0.Input }],
        maxResults: [{ type: i0.Input }],
        skipResults: [{ type: i0.Input }],
        searchTerm: [{ type: i0.Input }],
        classList: [{ type: i0.Input, args: ['class',] }],
        resultLoaded: [{ type: i0.Output }],
        error: [{ type: i0.Output }]
    };

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var SearchTextComponent = /** @class */ (function () {
        function SearchTextComponent() {
            this.value = '';
            this.isActive = false;
            this.enableChangeUpdate = true;
            this.displayValue$ = new rxjs.Subject();
        }
        SearchTextComponent.prototype.ngOnInit = function () {
            if (this.context && this.settings && this.settings.pattern) {
                var pattern = new RegExp(this.settings.pattern, 'g');
                var match = pattern.exec(this.context.queryFragments[this.id] || '');
                if (this.settings.allowUpdateOnChange !== undefined &&
                    this.settings.allowUpdateOnChange !== null) {
                    this.enableChangeUpdate = this.settings.allowUpdateOnChange;
                }
                if (match && match.length > 1) {
                    this.value = match[1];
                }
                if (this.startValue) {
                    this.setValue(this.startValue);
                }
            }
        };
        SearchTextComponent.prototype.clear = function () {
            this.isActive = false;
            this.value = '';
            if (this.enableChangeUpdate) {
                this.updateQuery(null);
            }
        };
        SearchTextComponent.prototype.reset = function () {
            this.value = '';
            this.updateQuery(null);
        };
        SearchTextComponent.prototype.onChangedHandler = function (event) {
            this.value = event.target.value;
            this.isActive = !!this.value;
            if (this.enableChangeUpdate) {
                this.updateQuery(this.value);
            }
        };
        SearchTextComponent.prototype.updateQuery = function (value) {
            this.displayValue$.next(value);
            if (this.context && this.settings && this.settings.field) {
                this.context.queryFragments[this.id] = value ? this.settings.field + ":'" + this.getSearchPrefix() + value + this.getSearchSuffix() + "'" : '';
                this.context.update();
            }
        };
        SearchTextComponent.prototype.submitValues = function () {
            this.updateQuery(this.value);
        };
        SearchTextComponent.prototype.hasValidValue = function () {
            return !!this.value;
        };
        SearchTextComponent.prototype.getCurrentValue = function () {
            return this.value;
        };
        SearchTextComponent.prototype.setValue = function (value) {
            this.value = value;
            this.displayValue$.next(this.value);
            this.submitValues();
        };
        SearchTextComponent.prototype.getSearchPrefix = function () {
            return this.settings.searchPrefix ? this.settings.searchPrefix : '';
        };
        SearchTextComponent.prototype.getSearchSuffix = function () {
            return this.settings.searchSuffix ? this.settings.searchSuffix : '';
        };
SearchTextComponent.ɵfac = function SearchTextComponent_Factory(t) { return new (t || SearchTextComponent)(); };
SearchTextComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: SearchTextComponent, selectors: [["adf-search-text"]], hostAttrs: [1, "adf-search-text"], inputs: { value: "value" }, decls: 4, vars: 5, consts: [["matInput", "", 3, "placeholder", "ngModel", "ngModelChange", "change"], ["mat-button", "", "matSuffix", "", "mat-icon-button", "", 3, "click", 4, "ngIf"], ["mat-button", "", "matSuffix", "", "mat-icon-button", "", 3, "click"]], template: function SearchTextComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "mat-form-field");
        ɵngcc0.ɵɵelementStart(1, "input", 0);
        ɵngcc0.ɵɵlistener("ngModelChange", function SearchTextComponent_Template_input_ngModelChange_1_listener($event) { return ctx.value = $event; })("change", function SearchTextComponent_Template_input_change_1_listener($event) { return ctx.onChangedHandler($event); });
        ɵngcc0.ɵɵpipe(2, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(3, SearchTextComponent_button_3_Template, 3, 0, "button", 1);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵpropertyInterpolate("placeholder", ɵngcc0.ɵɵpipeBind1(2, 3, ctx.settings == null ? null : ctx.settings.placeholder));
        ɵngcc0.ɵɵproperty("ngModel", ctx.value);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.value);
    } }, directives: [ɵngcc27.MatFormField, ɵngcc6.MatInput, ɵngcc26.DefaultValueAccessor, ɵngcc26.NgControlStatus, ɵngcc26.NgModel, ɵngcc23.NgIf, ɵngcc1.MatButton, ɵngcc27.MatSuffix, ɵngcc4.MatIcon], pipes: [ɵngcc25.TranslatePipe], styles: [".adf-search-text .mat-form-field{max-width:168px;width:100%}"], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SearchTextComponent, [{
        type: i0.Component,
        args: [{
                selector: 'adf-search-text',
                template: "<mat-form-field>\n    <input\n        matInput\n        placeholder=\"{{ settings?.placeholder | translate }}\"\n        [(ngModel)]=\"value\"\n        (change)=\"onChangedHandler($event)\">\n    <button mat-button *ngIf=\"value\" matSuffix mat-icon-button (click)=\"clear()\">\n        <mat-icon>close</mat-icon>\n    </button>\n</mat-form-field>\n",
                encapsulation: i0.ViewEncapsulation.None,
                host: { class: 'adf-search-text' },
                styles: [".adf-search-text .mat-form-field{max-width:168px;width:100%}"]
            }]
    }], function () { return []; }, { value: [{
            type: i0.Input
        }] }); })();
        return SearchTextComponent;
    }());
    SearchTextComponent.propDecorators = {
        value: [{ type: i0.Input }]
    };

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var DEFAULT_PAGE_SIZE = 5;
    var SearchFilterList = /** @class */ (function () {
        function SearchFilterList(items, pageSize) {
            if (items === void 0) { items = []; }
            this.filteredItems = [];
            this._filterText = '';
            this.items = [];
            this.pageSize = DEFAULT_PAGE_SIZE;
            this.currentPageSize = DEFAULT_PAGE_SIZE;
            this._filter = function () { return true; };
            this.items = items;
            this.filteredItems = items;
            this.pageSize = pageSize || DEFAULT_PAGE_SIZE;
            this.currentPageSize = pageSize || DEFAULT_PAGE_SIZE;
        }
        Object.defineProperty(SearchFilterList.prototype, "filterText", {
            get: function () {
                return this._filterText;
            },
            set: function (value) {
                this._filterText = value;
                this.applyFilter();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(SearchFilterList.prototype, "filter", {
            get: function () {
                return this._filter;
            },
            set: function (value) {
                this._filter = value;
                this.applyFilter();
            },
            enumerable: false,
            configurable: true
        });
        SearchFilterList.prototype.applyFilter = function () {
            if (this.filter) {
                this.filteredItems = this.items.filter(this.filter);
            }
            else {
                this.filteredItems = this.items;
            }
            this.currentPageSize = this.pageSize;
        };
        Object.defineProperty(SearchFilterList.prototype, "visibleItems", {
            get: function () {
                return this.filteredItems.slice(0, this.currentPageSize);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(SearchFilterList.prototype, "length", {
            get: function () {
                return this.items.length;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(SearchFilterList.prototype, "canShowMoreItems", {
            get: function () {
                return this.filteredItems.length > this.currentPageSize;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(SearchFilterList.prototype, "canShowLessItems", {
            get: function () {
                return this.currentPageSize > this.pageSize;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(SearchFilterList.prototype, "fitsPage", {
            get: function () {
                return this.pageSize >= this.filteredItems.length;
            },
            enumerable: false,
            configurable: true
        });
        SearchFilterList.prototype.showMoreItems = function () {
            if (this.canShowMoreItems) {
                this.currentPageSize += this.pageSize;
            }
        };
        SearchFilterList.prototype.showLessItems = function () {
            if (this.canShowLessItems) {
                this.currentPageSize -= this.pageSize;
            }
        };
        SearchFilterList.prototype.clear = function () {
            this.currentPageSize = this.pageSize;
            this.items = [];
            this.filteredItems = [];
            this.filterText = '';
        };
        SearchFilterList.prototype.addItem = function (item) {
            if (!item) {
                return;
            }
            this.items.push(item);
            this.applyFilter();
        };
        SearchFilterList.prototype.deleteItem = function (item) {
            var removeIndex = this.items.indexOf(item);
            if (removeIndex > -1) {
                this.items.splice(removeIndex, 1);
                this.filteredItems.splice(removeIndex, 1);
            }
        };
        SearchFilterList.prototype[Symbol.iterator] = function () {
            var pointer = 0;
            var items = this.visibleItems;
            return {
                next: function () {
                    if (pointer < items.length) {
                        return {
                            done: false,
                            value: items[pointer++]
                        };
                    }
                    else {
                        return {
                            done: true,
                            value: null
                        };
                    }
                }
            };
        };
        return SearchFilterList;
    }());

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var SearchRadioComponent = /** @class */ (function () {
        function SearchRadioComponent() {
            this.pageSize = 5;
            this.isActive = false;
            this.displayValue$ = new rxjs.Subject();
            this.options = new SearchFilterList();
        }
        SearchRadioComponent.prototype.ngOnInit = function () {
            var _a;
            if (this.settings) {
                this.pageSize = this.settings.pageSize || 5;
                if (this.settings.options && this.settings.options.length > 0) {
                    this.options = new SearchFilterList(this.settings.options, this.pageSize);
                }
            }
            var initialValue = this.getSelectedValue();
            if (initialValue !== null) {
                this.value = initialValue;
                this.context.queryFragments[this.id] = initialValue;
            }
            else if (this.startValue !== null) {
                this.value = initialValue;
                this.context.queryFragments[this.id] = initialValue;
            }
            this.enableChangeUpdate = (_a = this.settings.allowUpdateOnChange) !== null && _a !== void 0 ? _a : true;
            this.updateDisplayValue();
        };
        SearchRadioComponent.prototype.getSelectedValue = function () {
            var options = this.settings['options'] || [];
            if (options && options.length > 0) {
                this.isActive = true;
                var selected = options.find(function (opt) { return opt.default; });
                if (!selected) {
                    selected = options[0];
                }
                return selected.value;
            }
            return null;
        };
        SearchRadioComponent.prototype.submitValues = function () {
            this.setValue(this.value);
            this.updateDisplayValue();
            this.context.update();
        };
        SearchRadioComponent.prototype.hasValidValue = function () {
            var currentValue = this.getSelectedValue();
            return !!currentValue;
        };
        SearchRadioComponent.prototype.setValue = function (newValue) {
            this.value = newValue;
            this.context.queryFragments[this.id] = newValue;
            if (this.enableChangeUpdate) {
                this.updateDisplayValue();
                this.context.update();
            }
        };
        SearchRadioComponent.prototype.getCurrentValue = function () {
            return this.getSelectedValue();
        };
        SearchRadioComponent.prototype.updateDisplayValue = function () {
            var _this = this;
            var selectOptions = this.options.items.find(function (_b) {
                var value = _b.value;
                return value === _this.value;
            });
            if (selectOptions) {
                this.displayValue$.next(selectOptions.name);
            }
            else {
                this.displayValue$.next('');
            }
        };
        SearchRadioComponent.prototype.changeHandler = function (event) {
            this.setValue(event.value);
        };
        SearchRadioComponent.prototype.clear = function () {
            this.isActive = false;
            var initialValue = this.getSelectedValue();
            if (initialValue !== null) {
                this.setValue(initialValue);
            }
        };
        SearchRadioComponent.prototype.reset = function () {
            var initialValue = this.getSelectedValue();
            if (initialValue !== null) {
                this.setValue(initialValue);
                this.updateDisplayValue();
                this.context.update();
            }
        };
SearchRadioComponent.ɵfac = function SearchRadioComponent_Factory(t) { return new (t || SearchRadioComponent)(); };
SearchRadioComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: SearchRadioComponent, selectors: [["adf-search-radio"]], hostAttrs: [1, "adf-search-radio"], inputs: { value: "value" }, decls: 3, vars: 3, consts: [[3, "ngModel", "ngModelChange", "change"], ["class", "adf-facet-filter", 3, "value", 4, "ngFor", "ngForOf"], ["class", "adf-facet-buttons", 4, "ngIf"], [1, "adf-facet-filter", 3, "value"], ["matTooltipPosition", "right", 1, "filter-label", 3, "matTooltip"], [1, "adf-facet-buttons"], ["mat-icon-button", "", 3, "title", "click", 4, "ngIf"], ["mat-icon-button", "", 3, "title", "click"]], template: function SearchRadioComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "mat-radio-group", 0);
        ɵngcc0.ɵɵlistener("ngModelChange", function SearchRadioComponent_Template_mat_radio_group_ngModelChange_0_listener($event) { return ctx.value = $event; })("change", function SearchRadioComponent_Template_mat_radio_group_change_0_listener($event) { return ctx.changeHandler($event); });
        ɵngcc0.ɵɵtemplate(1, SearchRadioComponent_mat_radio_button_1_Template, 6, 10, "mat-radio-button", 1);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(2, SearchRadioComponent_div_2_Template, 3, 2, "div", 2);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngModel", ctx.value);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.options);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.options.fitsPage);
    } }, directives: [ɵngcc17.MatRadioGroup, ɵngcc26.NgControlStatus, ɵngcc26.NgModel, ɵngcc23.NgForOf, ɵngcc23.NgIf, ɵngcc17.MatRadioButton, ɵngcc24.MatTooltip, ɵngcc1.MatButton, ɵngcc4.MatIcon], pipes: [ɵngcc25.TranslatePipe], styles: [".adf-search-radio .mat-radio-group{display:flex;flex-direction:column}.adf-search-radio .mat-radio-button{margin:5px}.adf-search-radio .adf-facet-filter .mat-radio-label-content{overflow:hidden;text-overflow:ellipsis;width:100%}.adf-search-radio .adf-facet-filter .mat-radio-label{width:100%}.adf-search-radio .adf-facet-filter .adf-filter-label{overflow:hidden;text-overflow:ellipsis;white-space:nowrap}"], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SearchRadioComponent, [{
        type: i0.Component,
        args: [{
                selector: 'adf-search-radio',
                template: "<mat-radio-group\n    [(ngModel)]=\"value\"\n    (change)=\"changeHandler($event)\">\n    <mat-radio-button [attr.data-automation-id]=\"'search-radio-'+(option.name | translate)\"\n        *ngFor=\"let option of options\"\n        [value]=\"option.value\"\n        class=\"adf-facet-filter\">\n        <div\n            matTooltip=\"{{ option.name | translate }}\"\n            matTooltipPosition=\"right\"\n            class=\"filter-label\">\n            {{ option.name | translate }}\n        </div>\n    </mat-radio-button>\n</mat-radio-group>\n\n<div class=\"adf-facet-buttons\" *ngIf=\"!options.fitsPage\">\n    <button mat-icon-button\n        *ngIf=\"options.canShowLessItems\"\n        title=\"{{ 'SEARCH.FILTER.ACTIONS.SHOW-LESS' | translate }}\"\n        (click)=\"options.showLessItems()\">\n        <mat-icon>keyboard_arrow_up</mat-icon>\n    </button>\n    <button mat-icon-button\n        *ngIf=\"options.canShowMoreItems\"\n        title=\"{{ 'SEARCH.FILTER.ACTIONS.SHOW-MORE' | translate }}\"\n        (click)=\"options.showMoreItems()\">\n        <mat-icon>keyboard_arrow_down</mat-icon>\n    </button>\n</div>\n",
                encapsulation: i0.ViewEncapsulation.None,
                host: { class: 'adf-search-radio' },
                styles: [".adf-search-radio .mat-radio-group{display:flex;flex-direction:column}.adf-search-radio .mat-radio-button{margin:5px}.adf-search-radio .adf-facet-filter .mat-radio-label-content{overflow:hidden;text-overflow:ellipsis;width:100%}.adf-search-radio .adf-facet-filter .mat-radio-label{width:100%}.adf-search-radio .adf-facet-filter .adf-filter-label{overflow:hidden;text-overflow:ellipsis;white-space:nowrap}"]
            }]
    }], function () { return []; }, { value: [{
            type: i0.Input
        }] }); })();
        return SearchRadioComponent;
    }());
    SearchRadioComponent.ctorParameters = function () { return []; };
    SearchRadioComponent.propDecorators = {
        value: [{ type: i0.Input }]
    };

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var SearchSliderComponent = /** @class */ (function () {
        function SearchSliderComponent() {
            this.thumbLabel = false;
            this.displayValue$ = new rxjs.Subject();
        }
        SearchSliderComponent.prototype.ngOnInit = function () {
            var _a;
            if (this.settings) {
                if (this.settings.hasOwnProperty('min')) {
                    this.min = this.settings['min'];
                }
                if (this.settings.hasOwnProperty('max')) {
                    this.max = this.settings['max'];
                }
                if (this.settings.hasOwnProperty('step')) {
                    this.step = this.settings['step'];
                }
                this.thumbLabel = this.settings['thumbLabel'] ? true : false;
                this.enableChangeUpdate = (_a = this.settings.allowUpdateOnChange) !== null && _a !== void 0 ? _a : true;
            }
            if (this.startValue) {
                this.setValue(this.startValue);
            }
        };
        SearchSliderComponent.prototype.clear = function () {
            this.value = this.min || 0;
            if (this.enableChangeUpdate) {
                this.updateQuery(null);
            }
        };
        SearchSliderComponent.prototype.reset = function () {
            this.value = this.min || 0;
            this.updateQuery(null);
        };
        SearchSliderComponent.prototype.onChangedHandler = function (event) {
            this.value = event.value;
            if (this.enableChangeUpdate) {
                this.updateQuery(this.value);
            }
        };
        SearchSliderComponent.prototype.submitValues = function () {
            this.updateQuery(this.value);
        };
        SearchSliderComponent.prototype.hasValidValue = function () {
            return !!this.value;
        };
        SearchSliderComponent.prototype.getCurrentValue = function () {
            return this.value;
        };
        SearchSliderComponent.prototype.setValue = function (value) {
            this.value = value;
            this.submitValues();
        };
        SearchSliderComponent.prototype.updateQuery = function (value) {
            var _a;
            this.displayValue$.next(this.value ? this.value + " " + ((_a = this.settings.unit) !== null && _a !== void 0 ? _a : '') : '');
            if (this.id && this.context && this.settings && this.settings.field) {
                if (value === null) {
                    this.context.queryFragments[this.id] = '';
                }
                else {
                    this.context.queryFragments[this.id] = this.settings.field + ":[0 TO " + value + "]";
                }
                this.context.update();
            }
        };
SearchSliderComponent.ɵfac = function SearchSliderComponent_Factory(t) { return new (t || SearchSliderComponent)(); };
SearchSliderComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: SearchSliderComponent, selectors: [["adf-search-slider"]], hostAttrs: [1, "adf-search-slider"], inputs: { value: "value" }, decls: 2, vars: 6, consts: [["data-automation-id", "slider-range", 3, "value", "min", "max", "step", "thumbLabel", "valueChange", "change"], ["class", "adf-facet-buttons", 4, "ngIf"], [1, "adf-facet-buttons"], ["mat-button", "", "color", "primary", "data-automation-id", "slider-btn-clear", 3, "click"]], template: function SearchSliderComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "mat-slider", 0);
        ɵngcc0.ɵɵlistener("valueChange", function SearchSliderComponent_Template_mat_slider_valueChange_0_listener($event) { return ctx.value = $event; })("change", function SearchSliderComponent_Template_mat_slider_change_0_listener($event) { return ctx.onChangedHandler($event); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(1, SearchSliderComponent_div_1_Template, 4, 3, "div", 1);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("value", ctx.value)("min", ctx.min)("max", ctx.max)("step", ctx.step)("thumbLabel", ctx.thumbLabel);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !(ctx.settings == null ? null : ctx.settings.hideDefaultAction));
    } }, directives: [ɵngcc18.MatSlider, ɵngcc23.NgIf, ɵngcc1.MatButton], pipes: [ɵngcc25.TranslatePipe], styles: [".adf-search-slider .mat-slider{width:100%}"], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SearchSliderComponent, [{
        type: i0.Component,
        args: [{
                selector: 'adf-search-slider',
                template: "<mat-slider\n    [(value)]=\"value\"\n    [min]=\"min\"\n    [max]=\"max\"\n    [step]=\"step\"\n    [thumbLabel]=\"thumbLabel\"\n    (change)=\"onChangedHandler($event)\"\n    data-automation-id=\"slider-range\">\n</mat-slider>\n\n<div class=\"adf-facet-buttons\" *ngIf=\"!settings?.hideDefaultAction\">\n    <button mat-button color=\"primary\" (click)=\"clear()\" data-automation-id=\"slider-btn-clear\">\n        {{ 'SEARCH.FILTER.ACTIONS.CLEAR' | translate }}\n    </button>\n</div>\n",
                encapsulation: i0.ViewEncapsulation.None,
                host: { class: 'adf-search-slider' },
                styles: [".adf-search-slider .mat-slider{width:100%}"]
            }]
    }], function () { return []; }, { value: [{
            type: i0.Input
        }] }); })();
        return SearchSliderComponent;
    }());
    SearchSliderComponent.propDecorators = {
        value: [{ type: i0.Input }]
    };

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var LiveErrorStateMatcher = /** @class */ (function () {
        function LiveErrorStateMatcher() {
        }
        LiveErrorStateMatcher.prototype.isErrorState = function (control, form) {
            var isSubmitted = form && form.submitted;
            return !!(control && control.invalid && (control.dirty || control.touched || (!control.pristine && isSubmitted)));
        };
        return LiveErrorStateMatcher;
    }());

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var SearchNumberRangeComponent = /** @class */ (function () {
        function SearchNumberRangeComponent() {
            this.matcher = new LiveErrorStateMatcher();
            this.format = '[{FROM} TO {TO}]';
            this.isActive = false;
            this.displayValue$ = new rxjs.Subject();
        }
        SearchNumberRangeComponent.prototype.ngOnInit = function () {
            var _a, _b;
            if (this.settings) {
                this.field = this.settings.field;
                this.format = this.settings.format || '[{FROM} TO {TO}]';
            }
            this.validators = forms.Validators.compose([
                forms.Validators.required,
                forms.Validators.pattern(/^-?(0|[1-9]\d*)?$/),
                forms.Validators.min(0)
            ]);
            if (this.startValue) {
                this.from = new forms.FormControl(this.startValue['from'], this.validators);
                this.to = new forms.FormControl(this.startValue['to'], this.validators);
            }
            else {
                this.from = new forms.FormControl('', this.validators);
                this.to = new forms.FormControl('', this.validators);
            }
            this.form = new forms.FormGroup({
                from: this.from,
                to: this.to
            }, this.formValidator);
            this.enableChangeUpdate = (_b = (_a = this.settings) === null || _a === void 0 ? void 0 : _a.allowUpdateOnChange) !== null && _b !== void 0 ? _b : true;
            this.updateDisplayValue();
        };
        SearchNumberRangeComponent.prototype.formValidator = function (formGroup) {
            return parseInt(formGroup.get('from').value, 10) < parseInt(formGroup.get('to').value, 10) ? null : { 'mismatch': true };
        };
        SearchNumberRangeComponent.prototype.apply = function (model, isValid) {
            if (isValid && this.id && this.context && this.field) {
                this.updateDisplayValue();
                this.isActive = true;
                var map = new Map();
                map.set('FROM', model.from);
                map.set('TO', model.to);
                var value = this.formatString(this.format, map);
                this.context.queryFragments[this.id] = this.field + ":" + value;
                this.context.update();
            }
        };
        SearchNumberRangeComponent.prototype.formatString = function (str, map) {
            var result = str;
            map.forEach(function (value, key) {
                var expr = new RegExp('{' + key + '}', 'gm');
                result = result.replace(expr, value);
            });
            return result;
        };
        SearchNumberRangeComponent.prototype.submitValues = function () {
            this.apply(this.form.value, this.form.valid);
        };
        SearchNumberRangeComponent.prototype.hasValidValue = function () {
            return this.form.valid;
        };
        SearchNumberRangeComponent.prototype.getCurrentValue = function () {
            return this.form.value;
        };
        SearchNumberRangeComponent.prototype.updateDisplayValue = function () {
            var _a;
            if (this.form.invalid || this.form.pristine) {
                this.displayValue$.next('');
            }
            else {
                this.displayValue$.next(this.form.value.from + " - " + this.form.value.to + " " + ((_a = this.settings.unit) !== null && _a !== void 0 ? _a : ''));
            }
        };
        SearchNumberRangeComponent.prototype.setValue = function (value) {
            this.form['from'].setValue(value);
            this.form['to'].setValue(value);
            this.updateDisplayValue();
        };
        SearchNumberRangeComponent.prototype.clear = function () {
            this.isActive = false;
            this.form.reset({
                from: '',
                to: ''
            });
            if (this.id && this.context) {
                this.context.queryFragments[this.id] = '';
                this.updateDisplayValue();
                if (this.enableChangeUpdate) {
                    this.context.update();
                }
            }
        };
        SearchNumberRangeComponent.prototype.reset = function () {
            this.clear();
            if (this.id && this.context) {
                this.context.update();
            }
        };
SearchNumberRangeComponent.ɵfac = function SearchNumberRangeComponent_Factory(t) { return new (t || SearchNumberRangeComponent)(); };
SearchNumberRangeComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: SearchNumberRangeComponent, selectors: [["adf-search-number-range"]], hostAttrs: [1, "adf-search-number-range"], decls: 12, vars: 16, consts: [["novalidate", "", 3, "formGroup", "ngSubmit"], ["matInput", "", "autocomplete", "off", "data-automation-id", "number-range-from-input", 3, "formControl", "errorStateMatcher", "placeholder"], ["data-automation-id", "number-range-from-error-invalid", 4, "ngIf"], ["data-automation-id", "number-range-from-error-required", 4, "ngIf"], ["matInput", "", "autocomplete", "off", "data-automation-id", "number-range-to-input", 3, "formControl", "errorStateMatcher", "placeholder"], ["data-automation-id", "number-range-to-error-invalid", 4, "ngIf"], ["data-automation-id", "number-range-to-error-required", 4, "ngIf"], ["class", "adf-facet-buttons", 4, "ngIf"], ["data-automation-id", "number-range-from-error-invalid"], ["data-automation-id", "number-range-from-error-required"], ["data-automation-id", "number-range-to-error-invalid"], ["data-automation-id", "number-range-to-error-required"], [1, "adf-facet-buttons"], ["mat-button", "", "color", "primary", "type", "button", "data-automation-id", "number-range-btn-clear", 3, "click"], ["mat-button", "", "color", "primary", "type", "submit", "data-automation-id", "number-range-btn-apply", 3, "disabled"]], template: function SearchNumberRangeComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "form", 0);
        ɵngcc0.ɵɵlistener("ngSubmit", function SearchNumberRangeComponent_Template_form_ngSubmit_0_listener() { return ctx.apply(ctx.form.value, ctx.form.valid); });
        ɵngcc0.ɵɵelementStart(1, "mat-form-field");
        ɵngcc0.ɵɵelement(2, "input", 1);
        ɵngcc0.ɵɵpipe(3, "translate");
        ɵngcc0.ɵɵtemplate(4, SearchNumberRangeComponent_mat_error_4_Template, 3, 3, "mat-error", 2);
        ɵngcc0.ɵɵtemplate(5, SearchNumberRangeComponent_mat_error_5_Template, 3, 3, "mat-error", 3);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(6, "mat-form-field");
        ɵngcc0.ɵɵelement(7, "input", 4);
        ɵngcc0.ɵɵpipe(8, "translate");
        ɵngcc0.ɵɵtemplate(9, SearchNumberRangeComponent_mat_error_9_Template, 3, 3, "mat-error", 5);
        ɵngcc0.ɵɵtemplate(10, SearchNumberRangeComponent_mat_error_10_Template, 3, 3, "mat-error", 6);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(11, SearchNumberRangeComponent_div_11_Template, 7, 7, "div", 7);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("formGroup", ctx.form);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵpropertyInterpolate("placeholder", ɵngcc0.ɵɵpipeBind1(3, 12, "SEARCH.FILTER.RANGE.FROM"));
        ɵngcc0.ɵɵproperty("formControl", ctx.from)("errorStateMatcher", ctx.matcher);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.from.hasError("pattern") || ctx.from.hasError("min"));
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.from.hasError("required"));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵpropertyInterpolate("placeholder", ɵngcc0.ɵɵpipeBind1(8, 14, "SEARCH.FILTER.RANGE.TO"));
        ɵngcc0.ɵɵproperty("formControl", ctx.to)("errorStateMatcher", ctx.matcher);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.to.hasError("pattern") || ctx.to.hasError("min"));
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.to.hasError("required"));
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !(ctx.settings == null ? null : ctx.settings.hideDefaultAction));
    } }, directives: [ɵngcc26.ɵangular_packages_forms_forms_y, ɵngcc26.NgControlStatusGroup, ɵngcc26.FormGroupDirective, ɵngcc27.MatFormField, ɵngcc6.MatInput, ɵngcc26.DefaultValueAccessor, ɵngcc26.NgControlStatus, ɵngcc26.FormControlDirective, ɵngcc23.NgIf, ɵngcc27.MatError, ɵngcc1.MatButton], pipes: [ɵngcc25.TranslatePipe], styles: [".adf-search-number-range>form{display:inline-flex;flex-direction:column;width:100%}"], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SearchNumberRangeComponent, [{
        type: i0.Component,
        args: [{
                selector: 'adf-search-number-range',
                template: "<form [formGroup]=\"form\" novalidate (ngSubmit)=\"apply(form.value, form.valid)\">\n\n    <mat-form-field>\n        <input\n            matInput [formControl]=\"from\" [errorStateMatcher]=\"matcher\"\n            placeholder=\"{{ 'SEARCH.FILTER.RANGE.FROM' | translate }}\"\n            autocomplete=\"off\"\n            data-automation-id=\"number-range-from-input\">\n        <mat-error *ngIf=\"from.hasError('pattern') || from.hasError('min')\" data-automation-id=\"number-range-from-error-invalid\">\n            {{ 'SEARCH.FILTER.VALIDATION.INVALID-FORMAT' | translate }}\n        </mat-error>\n        <mat-error *ngIf=\"from.hasError('required')\" data-automation-id=\"number-range-from-error-required\">\n            {{ 'SEARCH.FILTER.VALIDATION.REQUIRED-VALUE' | translate }}\n        </mat-error>\n    </mat-form-field>\n\n    <mat-form-field>\n        <input\n            matInput [formControl]=\"to\" [errorStateMatcher]=\"matcher\"\n            placeholder=\"{{ 'SEARCH.FILTER.RANGE.TO' | translate }}\"\n            autocomplete=\"off\"\n            data-automation-id=\"number-range-to-input\">\n        <mat-error *ngIf=\"to.hasError('pattern') || to.hasError('min')\" data-automation-id=\"number-range-to-error-invalid\">\n            {{ 'SEARCH.FILTER.VALIDATION.INVALID-FORMAT' | translate }}\n        </mat-error>\n        <mat-error *ngIf=\"to.hasError('required')\" data-automation-id=\"number-range-to-error-required\">\n            {{ 'SEARCH.FILTER.VALIDATION.REQUIRED-VALUE' | translate }}\n        </mat-error>\n    </mat-form-field>\n\n\n    <div class=\"adf-facet-buttons\" *ngIf=\"!settings?.hideDefaultAction\">\n        <button mat-button color=\"primary\" type=\"button\" (click)=\"clear()\" data-automation-id=\"number-range-btn-clear\">\n            {{ 'SEARCH.FILTER.ACTIONS.CLEAR' | translate }}\n        </button>\n        <button mat-button color=\"primary\" type=\"submit\" [disabled]=\"!form.valid\" data-automation-id=\"number-range-btn-apply\">\n            {{ 'SEARCH.FILTER.ACTIONS.APPLY' | translate }}\n        </button>\n    </div>\n</form>\n",
                encapsulation: i0.ViewEncapsulation.None,
                host: { class: 'adf-search-number-range' },
                styles: [".adf-search-number-range>form{display:inline-flex;flex-direction:column;width:100%}"]
            }]
    }], function () { return []; }, null); })();
        return SearchNumberRangeComponent;
    }());

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var SearchCheckListComponent = /** @class */ (function () {
        function SearchCheckListComponent(translationService) {
            this.translationService = translationService;
            this.operator = 'OR';
            this.startValue = null;
            this.pageSize = 5;
            this.isActive = false;
            this.enableChangeUpdate = true;
            this.displayValue$ = new rxjs.Subject();
            this.options = new SearchFilterList();
        }
        SearchCheckListComponent.prototype.ngOnInit = function () {
            var _a;
            if (this.settings) {
                this.operator = this.settings.operator || 'OR';
                this.pageSize = this.settings.pageSize || 5;
                if (this.settings.options && this.settings.options.length > 0) {
                    this.options = new SearchFilterList(this.settings.options, this.pageSize);
                }
                this.enableChangeUpdate = (_a = this.settings.allowUpdateOnChange) !== null && _a !== void 0 ? _a : true;
            }
            if (this.startValue) {
                this.setValue(this.startValue);
            }
        };
        SearchCheckListComponent.prototype.clear = function () {
            this.isActive = false;
            this.clearOptions();
            if (this.id && this.context && this.enableChangeUpdate) {
                this.updateDisplayValue();
                this.context.update();
            }
        };
        SearchCheckListComponent.prototype.clearOptions = function () {
            this.options.items.forEach(function (opt) {
                opt.checked = false;
            });
            if (this.id && this.context) {
                this.context.queryFragments[this.id] = '';
            }
        };
        SearchCheckListComponent.prototype.reset = function () {
            this.isActive = false;
            this.clearOptions();
            if (this.id && this.context) {
                this.updateDisplayValue();
                this.context.update();
            }
        };
        SearchCheckListComponent.prototype.updateDisplayValue = function () {
            var _this = this;
            var displayValue = this.options.items
                .filter(function (option) { return option.checked; })
                .map(function (_b) {
                var name = _b.name;
                return _this.translationService.instant(name);
            })
                .join(', ');
            this.displayValue$.next(displayValue);
        };
        SearchCheckListComponent.prototype.changeHandler = function (event, option) {
            option.checked = event.checked;
            var checkedValues = this.getCheckedValues();
            this.isActive = !!checkedValues.length;
            if (this.enableChangeUpdate) {
                this.submitValues();
            }
        };
        SearchCheckListComponent.prototype.hasValidValue = function () {
            var checkedValues = this.getCheckedValues();
            return !!checkedValues.length;
        };
        SearchCheckListComponent.prototype.getCurrentValue = function () {
            return this.getCheckedValues();
        };
        SearchCheckListComponent.prototype.setValue = function (value) {
            this.options.items.filter(function (item) { return value.includes(item.value); })
                .map(function (item) { return item.checked = true; });
            this.submitValues();
        };
        SearchCheckListComponent.prototype.getCheckedValues = function () {
            return this.options.items
                .filter(function (option) { return option.checked; })
                .map(function (option) { return option.value; });
        };
        SearchCheckListComponent.prototype.submitValues = function () {
            var checkedValues = this.getCheckedValues();
            var query = checkedValues.join(" " + this.operator + " ");
            if (this.id && this.context) {
                this.context.queryFragments[this.id] = query;
                this.updateDisplayValue();
                this.context.update();
            }
        };
SearchCheckListComponent.ɵfac = function SearchCheckListComponent_Factory(t) { return new (t || SearchCheckListComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc21.TranslationService)); };
SearchCheckListComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: SearchCheckListComponent, selectors: [["adf-search-check-list"]], hostAttrs: [1, "adf-search-check-list"], decls: 4, vars: 3, consts: [[1, "checklist"], ["class", "adf-facet-filter", 3, "checked", "keydown.enter", "change", 4, "ngFor", "ngForOf"], ["class", "adf-facet-buttons", 4, "ngIf"], [1, "adf-facet-filter", 3, "checked", "keydown.enter", "change"], ["matTooltipPosition", "right", 1, "facet-name", 3, "matTooltip"], [1, "adf-facet-buttons"], ["mat-button", "", "color", "primary", 3, "click"], ["mat-icon-button", "", 3, "title", "click"], ["mat-icon-button", "", 3, "title", "click", 4, "ngIf"]], template: function SearchCheckListComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵtemplate(1, SearchCheckListComponent_mat_checkbox_1_Template, 5, 8, "mat-checkbox", 1);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(2, SearchCheckListComponent_div_2_Template, 4, 3, "div", 2);
        ɵngcc0.ɵɵtemplate(3, SearchCheckListComponent_div_3_Template, 7, 5, "div", 2);
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.options);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.options.fitsPage && !(ctx.settings == null ? null : ctx.settings.hideDefaultAction));
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.options.fitsPage);
    } }, directives: [ɵngcc23.NgForOf, ɵngcc23.NgIf, ɵngcc14.MatCheckbox, ɵngcc24.MatTooltip, ɵngcc1.MatButton, ɵngcc4.MatIcon], pipes: [ɵngcc25.TranslatePipe], styles: [".adf-search-check-list{display:flex;flex-direction:column}.adf-search-check-list .adf-facet-filter .mat-checkbox-label{overflow:hidden;text-overflow:ellipsis;width:100%}.adf-search-check-list .adf-facet-filter .mat-checkbox-layout{width:100%}.adf-search-check-list .adf-facet-filter .adf-facet-name{overflow:hidden;text-overflow:ellipsis;white-space:nowrap}"], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SearchCheckListComponent, [{
        type: i0.Component,
        args: [{
                selector: 'adf-search-check-list',
                template: "<div class=\"checklist\">\n    <mat-checkbox\n        *ngFor=\"let option of options\"\n        [checked]=\"option.checked\"\n        (keydown.enter)=\"option.checked = !option.checked\"\n        [attr.data-automation-id]=\"'checkbox-' + (option.name)\"\n        (change)=\"changeHandler($event, option)\"\n        class=\"adf-facet-filter\">\n        <div matTooltip=\"{{ option.name | translate }}\"\n            matTooltipPosition=\"right\"\n            class=\"facet-name\">\n            {{ option.name | translate }}\n        </div>\n\n    </mat-checkbox>\n</div>\n\n<div class=\"adf-facet-buttons\" *ngIf=\"options.fitsPage && !settings?.hideDefaultAction\">\n    <button mat-button color=\"primary\" (click)=\"clear()\">\n        {{ 'SEARCH.FILTER.ACTIONS.CLEAR-ALL' | translate }}\n    </button>\n</div>\n\n<div class=\"adf-facet-buttons\" *ngIf=\"!options.fitsPage\">\n    <button mat-icon-button\n        title=\"{{ 'SEARCH.FILTER.ACTIONS.CLEAR-ALL' | translate }}\"\n        (click)=\"clear()\">\n        <mat-icon>clear</mat-icon>\n    </button>\n    <button mat-icon-button\n        *ngIf=\"options.canShowLessItems\"\n        title=\"{{ 'SEARCH.FILTER.ACTIONS.SHOW-LESS' | translate }}\"\n        (click)=\"options.showLessItems()\">\n        <mat-icon>keyboard_arrow_up</mat-icon>\n    </button>\n    <button mat-icon-button\n        *ngIf=\"options.canShowMoreItems\"\n        title=\"{{ 'SEARCH.FILTER.ACTIONS.SHOW-MORE' | translate }}\"\n        (click)=\"options.showMoreItems()\">\n        <mat-icon>keyboard_arrow_down</mat-icon>\n    </button>\n</div>\n",
                encapsulation: i0.ViewEncapsulation.None,
                host: { class: 'adf-search-check-list' },
                styles: [".adf-search-check-list{display:flex;flex-direction:column}.adf-search-check-list .adf-facet-filter .mat-checkbox-label{overflow:hidden;text-overflow:ellipsis;width:100%}.adf-search-check-list .adf-facet-filter .mat-checkbox-layout{width:100%}.adf-search-check-list .adf-facet-filter .adf-facet-name{overflow:hidden;text-overflow:ellipsis;white-space:nowrap}"]
            }]
    }], function () { return [{ type: ɵngcc21.TranslationService }]; }, null); })();
        return SearchCheckListComponent;
    }());
    SearchCheckListComponent.ctorParameters = function () { return [
        { type: i1.TranslationService }
    ]; };

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var DEFAULT_FORMAT_DATE = 'DD/MM/YYYY';
    var ɵ0 = i1.MOMENT_DATE_FORMATS;
    var SearchDateRangeComponent = /** @class */ (function () {
        function SearchDateRangeComponent(dateAdapter, userPreferencesService) {
            this.dateAdapter = dateAdapter;
            this.userPreferencesService = userPreferencesService;
            this.matcher = new LiveErrorStateMatcher();
            this.isActive = false;
            this.displayValue$ = new rxjs.Subject();
            this.onDestroy$ = new rxjs.Subject();
        }
        SearchDateRangeComponent.prototype.getFromValidationMessage = function () {
            return this.from.hasError('invalidOnChange') || this.hasParseError(this.from) ? 'SEARCH.FILTER.VALIDATION.INVALID-DATE' :
                this.from.hasError('matDatepickerMax') ? 'SEARCH.FILTER.VALIDATION.BEYOND-MAX-DATE' :
                    this.from.hasError('required') ? 'SEARCH.FILTER.VALIDATION.REQUIRED-VALUE' :
                        '';
        };
        SearchDateRangeComponent.prototype.getToValidationMessage = function () {
            return this.to.hasError('invalidOnChange') || this.hasParseError(this.to) ? 'SEARCH.FILTER.VALIDATION.INVALID-DATE' :
                this.to.hasError('matDatepickerMin') ? 'SEARCH.FILTER.VALIDATION.NO-DAYS' :
                    this.to.hasError('matDatepickerMax') ? 'SEARCH.FILTER.VALIDATION.BEYOND-MAX-DATE' :
                        this.to.hasError('required') ? 'SEARCH.FILTER.VALIDATION.REQUIRED-VALUE' :
                            '';
        };
        SearchDateRangeComponent.prototype.ngOnInit = function () {
            var _this = this;
            var _a, _b, _c;
            this.datePickerFormat = ((_a = this.settings) === null || _a === void 0 ? void 0 : _a.dateFormat) ? this.settings.dateFormat : DEFAULT_FORMAT_DATE;
            var customDateAdapter = this.dateAdapter;
            customDateAdapter.overrideDisplayFormat = this.datePickerFormat;
            this.userPreferencesService
                .select(i1.UserPreferenceValues.Locale)
                .pipe(operators.takeUntil(this.onDestroy$))
                .subscribe(function (locale) { return _this.setLocale(locale); });
            var validators = forms.Validators.compose([
                forms.Validators.required
            ]);
            if (this.settings && this.settings.maxDate) {
                if (this.settings.maxDate === 'today') {
                    this.maxDate = this.dateAdapter.today().endOf('day');
                }
                else {
                    this.maxDate = moment(this.settings.maxDate).endOf('day');
                }
            }
            if (this.startValue) {
                var splitValue = this.startValue.split('||');
                var fromValue = this.dateAdapter.parse(splitValue[0], this.datePickerFormat);
                var toValue = this.dateAdapter.parse(splitValue[1], this.datePickerFormat);
                this.from = new forms.FormControl(fromValue, validators);
                this.to = new forms.FormControl(toValue, validators);
            }
            else {
                this.from = new forms.FormControl('', validators);
                this.to = new forms.FormControl('', validators);
            }
            this.form = new forms.FormGroup({
                from: this.from,
                to: this.to
            });
            this.setFromMaxDate();
            this.enableChangeUpdate = (_c = (_b = this.settings) === null || _b === void 0 ? void 0 : _b.allowUpdateOnChange) !== null && _c !== void 0 ? _c : true;
        };
        SearchDateRangeComponent.prototype.ngOnDestroy = function () {
            this.onDestroy$.next(true);
            this.onDestroy$.complete();
        };
        SearchDateRangeComponent.prototype.apply = function (model, isValid) {
            if (isValid && this.id && this.context && this.settings && this.settings.field) {
                this.isActive = true;
                var start = moment(model.from).startOf('day').format();
                var end = moment(model.to).endOf('day').format();
                this.context.queryFragments[this.id] = this.settings.field + ":['" + start + "' TO '" + end + "']";
                this.updateDisplayValue();
                this.context.update();
            }
        };
        SearchDateRangeComponent.prototype.submitValues = function () {
            this.apply(this.form.value, this.form.valid);
        };
        SearchDateRangeComponent.prototype.hasValidValue = function () {
            return this.form.valid;
        };
        SearchDateRangeComponent.prototype.getCurrentValue = function () {
            return {
                from: this.dateAdapter.format(this.form.value.from, this.datePickerFormat),
                to: this.dateAdapter.format(this.form.value.from, this.datePickerFormat)
            };
        };
        SearchDateRangeComponent.prototype.updateDisplayValue = function () {
            if (this.form.invalid || this.form.pristine) {
                this.displayValue$.next('');
            }
            else {
                this.displayValue$.next(this.dateAdapter.format(this.form.value.from, this.datePickerFormat) + " - " + this.dateAdapter.format(this.form.value.to, this.datePickerFormat));
            }
        };
        SearchDateRangeComponent.prototype.setValue = function (parsedDate) {
            var splitValue = parsedDate.split('||');
            var fromValue = this.dateAdapter.parse(splitValue[0], this.datePickerFormat);
            var toValue = this.dateAdapter.parse(splitValue[1], this.datePickerFormat);
            this.from.setValue(fromValue);
            this.from.markAsDirty();
            this.from.markAsTouched();
            this.to.setValue(toValue);
            this.to.markAsDirty();
            this.to.markAsTouched();
            this.submitValues();
        };
        SearchDateRangeComponent.prototype.clear = function () {
            this.isActive = false;
            this.form.reset({
                from: '',
                to: ''
            });
            if (this.id && this.context) {
                this.context.queryFragments[this.id] = '';
                if (this.enableChangeUpdate) {
                    this.updateQuery();
                }
            }
            this.setFromMaxDate();
        };
        SearchDateRangeComponent.prototype.reset = function () {
            this.clear();
            this.updateQuery();
        };
        SearchDateRangeComponent.prototype.updateQuery = function () {
            if (this.id && this.context) {
                this.updateDisplayValue();
                this.context.update();
            }
        };
        SearchDateRangeComponent.prototype.onChangedHandler = function (event, formControl) {
            var inputValue = event.value;
            var formatDate = this.dateAdapter.parse(inputValue, this.datePickerFormat);
            if (formatDate && formatDate.isValid()) {
                formControl.setValue(formatDate);
            }
            else if (formatDate) {
                formControl.setErrors({
                    'invalidOnChange': true
                });
            }
            this.setFromMaxDate();
        };
        SearchDateRangeComponent.prototype.setLocale = function (locale) {
            this.dateAdapter.setLocale(locale);
            moment.locale(locale);
        };
        SearchDateRangeComponent.prototype.hasParseError = function (formControl) {
            return formControl.hasError('matDatepickerParse') && formControl.getError('matDatepickerParse').text;
        };
        SearchDateRangeComponent.prototype.forcePlaceholder = function (event) {
            event.srcElement.click();
        };
        SearchDateRangeComponent.prototype.setFromMaxDate = function () {
            this.fromMaxDate = (!this.to.value || this.maxDate && (moment(this.maxDate).isBefore(this.to.value))) ? this.maxDate : moment(this.to.value);
        };
SearchDateRangeComponent.ɵfac = function SearchDateRangeComponent_Factory(t) { return new (t || SearchDateRangeComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc10.DateAdapter), ɵngcc0.ɵɵdirectiveInject(ɵngcc21.UserPreferencesService)); };
SearchDateRangeComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: SearchDateRangeComponent, selectors: [["adf-search-date-range"]], hostAttrs: [1, "adf-search-date-range"], features: [ɵngcc0.ɵɵProvidersFeature([
            { provide: core.DateAdapter, useClass: i1.MomentDateAdapter, deps: [core.MAT_DATE_LOCALE] },
            { provide: core.MAT_DATE_FORMATS, useValue: ɵ0 }
        ])], decls: 16, vars: 21, consts: [["novalidate", "", 3, "formGroup", "ngSubmit"], ["matInput", "", "data-automation-id", "date-range-from-input", 3, "formControl", "errorStateMatcher", "placeholder", "matDatepicker", "max", "input", "dateChange"], ["matSuffix", "", "data-automation-id", "date-range-from-date-toggle", 3, "for"], ["color", "accent"], ["fromDatepicker", ""], ["data-automation-id", "date-range-from-error", 4, "ngIf"], ["matInput", "", "data-automation-id", "date-range-to-input", 3, "formControl", "errorStateMatcher", "placeholder", "matDatepicker", "min", "max", "input", "dateChange"], ["matSuffix", "", "data-automation-id", "date-range-to-date-toggle", 3, "for"], ["toDatepicker", ""], ["data-automation-id", "date-range-to-error", 4, "ngIf"], ["class", "adf-facet-buttons adf-facet-buttons--topSpace", 4, "ngIf"], ["data-automation-id", "date-range-from-error"], ["data-automation-id", "date-range-to-error"], [1, "adf-facet-buttons", "adf-facet-buttons--topSpace"], ["mat-button", "", "color", "primary", "type", "button", "data-automation-id", "date-range-clear-btn", 3, "click"], ["mat-button", "", "color", "primary", "type", "submit", "data-automation-id", "date-range-apply-btn", 3, "disabled"]], template: function SearchDateRangeComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "form", 0);
        ɵngcc0.ɵɵlistener("ngSubmit", function SearchDateRangeComponent_Template_form_ngSubmit_0_listener() { return ctx.apply(ctx.form.value, ctx.form.valid); });
        ɵngcc0.ɵɵelementStart(1, "mat-form-field");
        ɵngcc0.ɵɵelementStart(2, "input", 1);
        ɵngcc0.ɵɵlistener("input", function SearchDateRangeComponent_Template_input_input_2_listener($event) { return ctx.forcePlaceholder($event); })("dateChange", function SearchDateRangeComponent_Template_input_dateChange_2_listener($event) { return ctx.onChangedHandler($event, ctx.from); });
        ɵngcc0.ɵɵpipe(3, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(4, "mat-datepicker-toggle", 2);
        ɵngcc0.ɵɵelement(5, "mat-datepicker", 3, 4);
        ɵngcc0.ɵɵtemplate(7, SearchDateRangeComponent_mat_error_7_Template, 3, 6, "mat-error", 5);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(8, "mat-form-field");
        ɵngcc0.ɵɵelementStart(9, "input", 6);
        ɵngcc0.ɵɵlistener("input", function SearchDateRangeComponent_Template_input_input_9_listener($event) { return ctx.forcePlaceholder($event); })("dateChange", function SearchDateRangeComponent_Template_input_dateChange_9_listener($event) { return ctx.onChangedHandler($event, ctx.to); });
        ɵngcc0.ɵɵpipe(10, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(11, "mat-datepicker-toggle", 7);
        ɵngcc0.ɵɵelement(12, "mat-datepicker", 3, 8);
        ɵngcc0.ɵɵtemplate(14, SearchDateRangeComponent_mat_error_14_Template, 3, 6, "mat-error", 9);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(15, SearchDateRangeComponent_div_15_Template, 7, 7, "div", 10);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        var _r0 = ɵngcc0.ɵɵreference(6);
        var _r2 = ɵngcc0.ɵɵreference(13);
        ɵngcc0.ɵɵproperty("formGroup", ctx.form);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵpropertyInterpolate("placeholder", ɵngcc0.ɵɵpipeBind1(3, 17, "SEARCH.FILTER.RANGE.FROM-DATE"));
        ɵngcc0.ɵɵproperty("formControl", ctx.from)("errorStateMatcher", ctx.matcher)("matDatepicker", _r0)("max", ctx.fromMaxDate);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("for", _r0);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngIf", ctx.from.invalid);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵpropertyInterpolate("placeholder", ɵngcc0.ɵɵpipeBind1(10, 19, "SEARCH.FILTER.RANGE.TO-DATE"));
        ɵngcc0.ɵɵproperty("formControl", ctx.to)("errorStateMatcher", ctx.matcher)("matDatepicker", _r2)("min", ctx.from.value)("max", ctx.maxDate);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("for", _r2);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngIf", ctx.to.invalid);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !(ctx.settings == null ? null : ctx.settings.hideDefaultAction));
    } }, directives: [ɵngcc26.ɵangular_packages_forms_forms_y, ɵngcc26.NgControlStatusGroup, ɵngcc26.FormGroupDirective, ɵngcc27.MatFormField, ɵngcc6.MatInput, ɵngcc26.DefaultValueAccessor, ɵngcc15.MatDatepickerInput, ɵngcc26.NgControlStatus, ɵngcc26.FormControlDirective, ɵngcc15.MatDatepickerToggle, ɵngcc27.MatSuffix, ɵngcc15.MatDatepicker, ɵngcc23.NgIf, ɵngcc27.MatError, ɵngcc1.MatButton], pipes: [ɵngcc25.TranslatePipe], styles: [_c23], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SearchDateRangeComponent, [{
        type: i0.Component,
        args: [{
                selector: 'adf-search-date-range',
                template: "<form [formGroup]=\"form\" novalidate (ngSubmit)=\"apply(form.value, form.valid)\">\n    <mat-form-field>\n        <input matInput\n                (input)=\"forcePlaceholder($event)\"\n                [formControl]=\"from\"\n                [errorStateMatcher]=\"matcher\"\n                placeholder=\"{{ 'SEARCH.FILTER.RANGE.FROM-DATE' | translate }}\"\n                [matDatepicker]=\"fromDatepicker\"\n                [max]=\"fromMaxDate\"\n                (dateChange)=\"onChangedHandler($event, from)\"\n                data-automation-id=\"date-range-from-input\">\n        <mat-datepicker-toggle matSuffix [for]=\"fromDatepicker\" data-automation-id=\"date-range-from-date-toggle\"></mat-datepicker-toggle>\n        <mat-datepicker #fromDatepicker color=\"accent\"></mat-datepicker>\n        <mat-error *ngIf=\"from.invalid\" data-automation-id=\"date-range-from-error\">\n            {{ getFromValidationMessage() | translate: { requiredFormat: datePickerFormat } }}\n        </mat-error>\n    </mat-form-field>\n\n    <mat-form-field>\n        <input matInput\n                (input)=\"forcePlaceholder($event)\"\n                [formControl]=\"to\"\n                [errorStateMatcher]=\"matcher\"\n                placeholder=\"{{ 'SEARCH.FILTER.RANGE.TO-DATE' | translate }}\"\n                [matDatepicker]=\"toDatepicker\"\n                [min]=\"from.value\"\n                [max]=\"maxDate\"\n                (dateChange)=\"onChangedHandler($event, to)\"\n                data-automation-id=\"date-range-to-input\">\n        <mat-datepicker-toggle matSuffix [for]=\"toDatepicker\" data-automation-id=\"date-range-to-date-toggle\"></mat-datepicker-toggle>\n        <mat-datepicker #toDatepicker color=\"accent\"></mat-datepicker>\n        <mat-error *ngIf=\"to.invalid\" data-automation-id=\"date-range-to-error\">\n            {{ getToValidationMessage() | translate: { requiredFormat: datePickerFormat } }}\n        </mat-error>\n    </mat-form-field>\n\n    <div class=\"adf-facet-buttons adf-facet-buttons--topSpace\" *ngIf=\"!settings?.hideDefaultAction\">\n        <button mat-button color=\"primary\" type=\"button\" (click)=\"clear()\" data-automation-id=\"date-range-clear-btn\">\n            {{ 'SEARCH.FILTER.ACTIONS.CLEAR' | translate }}\n        </button>\n        <button mat-button color=\"primary\" type=\"submit\" [disabled]=\"!form.valid\" data-automation-id=\"date-range-apply-btn\">\n            {{ 'SEARCH.FILTER.ACTIONS.APPLY' | translate }}\n        </button>\n    </div>\n</form>\n",
                providers: [
                    { provide: core.DateAdapter, useClass: i1.MomentDateAdapter, deps: [core.MAT_DATE_LOCALE] },
                    { provide: core.MAT_DATE_FORMATS, useValue: ɵ0 }
                ],
                encapsulation: i0.ViewEncapsulation.None,
                host: { class: 'adf-search-date-range' },
                styles: [".adf-search-date-range>form{display:inline-flex;flex-direction:column;width:100%}"]
            }]
    }], function () { return [{ type: ɵngcc10.DateAdapter }, { type: ɵngcc21.UserPreferencesService }]; }, null); })();
        return SearchDateRangeComponent;
    }());
    SearchDateRangeComponent.ctorParameters = function () { return [
        { type: core.DateAdapter },
        { type: i1.UserPreferencesService }
    ]; };

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var DEFAULT_DATETIME_FORMAT = 'DD/MM/YYYY HH:mm';
    var ɵ0$1 = moment$2.MAT_MOMENT_DATETIME_FORMATS;
    var SearchDatetimeRangeComponent = /** @class */ (function () {
        function SearchDatetimeRangeComponent(dateAdapter, userPreferencesService) {
            this.dateAdapter = dateAdapter;
            this.userPreferencesService = userPreferencesService;
            this.matcher = new LiveErrorStateMatcher();
            this.isActive = false;
            this.displayValue$ = new rxjs.Subject();
            this.onDestroy$ = new rxjs.Subject();
        }
        SearchDatetimeRangeComponent.prototype.getFromValidationMessage = function () {
            return this.from.hasError('invalidOnChange') || this.hasParseError(this.from) ? 'SEARCH.FILTER.VALIDATION.INVALID-DATETIME' :
                this.from.hasError('matDatepickerMax') ? 'SEARCH.FILTER.VALIDATION.BEYOND-MAX-DATETIME' :
                    this.from.hasError('required') ? 'SEARCH.FILTER.VALIDATION.REQUIRED-VALUE' :
                        '';
        };
        SearchDatetimeRangeComponent.prototype.getToValidationMessage = function () {
            return this.to.hasError('invalidOnChange') || this.hasParseError(this.to) ? 'SEARCH.FILTER.VALIDATION.INVALID-DATETIME' :
                this.to.hasError('matDatepickerMin') ? 'SEARCH.FILTER.VALIDATION.NO-DAYS' :
                    this.to.hasError('matDatepickerMax') ? 'SEARCH.FILTER.VALIDATION.BEYOND-MAX-DATETIME' :
                        this.to.hasError('required') ? 'SEARCH.FILTER.VALIDATION.REQUIRED-VALUE' :
                            '';
        };
        SearchDatetimeRangeComponent.prototype.ngOnInit = function () {
            var _this = this;
            var _a, _b, _c;
            this.datetimePickerFormat = ((_a = this.settings) === null || _a === void 0 ? void 0 : _a.datetimeFormat) ? this.settings.datetimeFormat : DEFAULT_DATETIME_FORMAT;
            this.userPreferencesService
                .select(i1.UserPreferenceValues.Locale)
                .pipe(operators.takeUntil(this.onDestroy$))
                .subscribe(function (locale) { return _this.setLocale(locale); });
            var validators = forms.Validators.compose([
                forms.Validators.required
            ]);
            if (this.settings && this.settings.maxDatetime) {
                this.maxDatetime = moment(this.settings.maxDatetime);
            }
            if (this.startValue) {
                var splitValue = this.startValue.split('||');
                var fromValue = this.dateAdapter.parse(splitValue[0], this.datetimePickerFormat);
                var toValue = this.dateAdapter.parse(splitValue[1], this.datetimePickerFormat);
                this.from = new forms.FormControl(fromValue, validators);
                this.to = new forms.FormControl(toValue, validators);
            }
            else {
                this.from = new forms.FormControl('', validators);
                this.to = new forms.FormControl('', validators);
            }
            this.form = new forms.FormGroup({
                from: this.from,
                to: this.to
            });
            this.setFromMaxDatetime();
            this.enableChangeUpdate = (_c = (_b = this.settings) === null || _b === void 0 ? void 0 : _b.allowUpdateOnChange) !== null && _c !== void 0 ? _c : true;
        };
        SearchDatetimeRangeComponent.prototype.ngOnDestroy = function () {
            this.onDestroy$.next(true);
            this.onDestroy$.complete();
        };
        SearchDatetimeRangeComponent.prototype.apply = function (model, isValid) {
            if (isValid && this.id && this.context && this.settings && this.settings.field) {
                this.isActive = true;
                var start = moment.utc(model.from).startOf('minute').format();
                var end = moment.utc(model.to).endOf('minute').format();
                this.context.queryFragments[this.id] = this.settings.field + ":['" + start + "' TO '" + end + "']";
                this.updateDisplayValue();
                this.context.update();
            }
        };
        SearchDatetimeRangeComponent.prototype.submitValues = function () {
            this.apply(this.form.value, this.form.valid);
        };
        SearchDatetimeRangeComponent.prototype.hasValidValue = function () {
            return this.form.valid;
        };
        SearchDatetimeRangeComponent.prototype.getCurrentValue = function () {
            return {
                from: this.dateAdapter.format(this.form.value.from, this.datetimePickerFormat),
                to: this.dateAdapter.format(this.form.value.to, this.datetimePickerFormat)
            };
        };
        SearchDatetimeRangeComponent.prototype.updateDisplayValue = function () {
            if (this.form.invalid || this.form.pristine) {
                this.displayValue$.next('');
            }
            else {
                this.displayValue$.next(this.dateAdapter.format(this.form.value.from, this.datetimePickerFormat) + " - " + this.dateAdapter.format(this.form.value.to, this.datetimePickerFormat));
            }
        };
        SearchDatetimeRangeComponent.prototype.setValue = function (parsedDate) {
            var splitValue = parsedDate.split('||');
            var fromValue = this.dateAdapter.parse(splitValue[0], this.datetimePickerFormat);
            var toValue = this.dateAdapter.parse(splitValue[1], this.datetimePickerFormat);
            this.from.setValue(fromValue);
            this.from.markAsDirty();
            this.from.markAsTouched();
            this.to.setValue(toValue);
            this.to.markAsDirty();
            this.to.markAsTouched();
            this.submitValues();
        };
        SearchDatetimeRangeComponent.prototype.clear = function () {
            this.isActive = false;
            this.form.reset({
                from: '',
                to: ''
            });
            if (this.id && this.context) {
                this.context.queryFragments[this.id] = '';
            }
            if (this.id && this.context && this.enableChangeUpdate) {
                this.updateQuery();
            }
            this.setFromMaxDatetime();
        };
        SearchDatetimeRangeComponent.prototype.reset = function () {
            this.clear();
            this.updateQuery();
        };
        SearchDatetimeRangeComponent.prototype.updateQuery = function () {
            if (this.id && this.context) {
                this.updateDisplayValue();
                this.context.update();
            }
        };
        SearchDatetimeRangeComponent.prototype.onChangedHandler = function (event, formControl) {
            var inputValue = event.value;
            var formatDate = this.dateAdapter.parse(inputValue, this.datetimePickerFormat);
            if (formatDate && formatDate.isValid()) {
                formControl.setValue(formatDate);
            }
            else if (formatDate) {
                formControl.setErrors({
                    'invalidOnChange': true
                });
            }
            this.setFromMaxDatetime();
        };
        SearchDatetimeRangeComponent.prototype.setLocale = function (locale) {
            this.dateAdapter.setLocale(locale);
            moment.locale(locale);
        };
        SearchDatetimeRangeComponent.prototype.hasParseError = function (formControl) {
            return formControl.hasError('matDatepickerParse') && formControl.getError('matDatepickerParse').text;
        };
        SearchDatetimeRangeComponent.prototype.forcePlaceholder = function (event) {
            event.srcElement.click();
        };
        SearchDatetimeRangeComponent.prototype.setFromMaxDatetime = function () {
            this.fromMaxDatetime = (!this.to.value || this.maxDatetime && (moment(this.maxDatetime).isBefore(this.to.value))) ? this.maxDatetime : moment(this.to.value);
        };
SearchDatetimeRangeComponent.ɵfac = function SearchDatetimeRangeComponent_Factory(t) { return new (t || SearchDatetimeRangeComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc28.DatetimeAdapter), ɵngcc0.ɵɵdirectiveInject(ɵngcc21.UserPreferencesService)); };
SearchDatetimeRangeComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: SearchDatetimeRangeComponent, selectors: [["adf-search-datetime-range"]], hostAttrs: [1, "adf-search-date-range"], features: [ɵngcc0.ɵɵProvidersFeature([
            { provide: core$2.MAT_DATETIME_FORMATS, useValue: ɵ0$1 }
        ])], decls: 16, vars: 21, consts: [["novalidate", "", 3, "formGroup", "ngSubmit"], ["matInput", "", "data-automation-id", "datetime-range-from-input", 3, "formControl", "errorStateMatcher", "placeholder", "matDatetimepicker", "max", "input", "dateChange"], ["matSuffix", "", "data-automation-id", "datetime-range-from-date-toggle", 3, "for"], ["color", "accent", "type", "datetime"], ["fromDatetimePicker", ""], ["data-automation-id", "datetime-range-from-error", 4, "ngIf"], ["matInput", "", "data-automation-id", "datetime-range-to-input", 3, "formControl", "errorStateMatcher", "placeholder", "matDatetimepicker", "min", "max", "input", "dateChange"], ["matSuffix", "", "data-automation-id", "datetime-range-to-date-toggle", 3, "for"], ["toDatetimePicker", ""], ["data-automation-id", "datetime-range-to-error", 4, "ngIf"], ["class", "adf-facet-buttons adf-facet-buttons--topSpace", 4, "ngIf"], ["data-automation-id", "datetime-range-from-error"], ["data-automation-id", "datetime-range-to-error"], [1, "adf-facet-buttons", "adf-facet-buttons--topSpace"], ["mat-button", "", "color", "primary", "type", "button", "data-automation-id", "datetime-range-clear-btn", 3, "click"], ["mat-button", "", "color", "primary", "type", "submit", "data-automation-id", "datetime-range-apply-btn", 3, "disabled"]], template: function SearchDatetimeRangeComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "form", 0);
        ɵngcc0.ɵɵlistener("ngSubmit", function SearchDatetimeRangeComponent_Template_form_ngSubmit_0_listener() { return ctx.apply(ctx.form.value, ctx.form.valid); });
        ɵngcc0.ɵɵelementStart(1, "mat-form-field");
        ɵngcc0.ɵɵelementStart(2, "input", 1);
        ɵngcc0.ɵɵlistener("input", function SearchDatetimeRangeComponent_Template_input_input_2_listener($event) { return ctx.forcePlaceholder($event); })("dateChange", function SearchDatetimeRangeComponent_Template_input_dateChange_2_listener($event) { return ctx.onChangedHandler($event, ctx.from); });
        ɵngcc0.ɵɵpipe(3, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(4, "mat-datetimepicker-toggle", 2);
        ɵngcc0.ɵɵelement(5, "mat-datetimepicker", 3, 4);
        ɵngcc0.ɵɵtemplate(7, SearchDatetimeRangeComponent_mat_error_7_Template, 3, 6, "mat-error", 5);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(8, "mat-form-field");
        ɵngcc0.ɵɵelementStart(9, "input", 6);
        ɵngcc0.ɵɵlistener("input", function SearchDatetimeRangeComponent_Template_input_input_9_listener($event) { return ctx.forcePlaceholder($event); })("dateChange", function SearchDatetimeRangeComponent_Template_input_dateChange_9_listener($event) { return ctx.onChangedHandler($event, ctx.to); });
        ɵngcc0.ɵɵpipe(10, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(11, "mat-datetimepicker-toggle", 7);
        ɵngcc0.ɵɵelement(12, "mat-datetimepicker", 3, 8);
        ɵngcc0.ɵɵtemplate(14, SearchDatetimeRangeComponent_mat_error_14_Template, 3, 6, "mat-error", 9);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(15, SearchDatetimeRangeComponent_div_15_Template, 7, 7, "div", 10);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        var _r0 = ɵngcc0.ɵɵreference(6);
        var _r2 = ɵngcc0.ɵɵreference(13);
        ɵngcc0.ɵɵproperty("formGroup", ctx.form);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵpropertyInterpolate("placeholder", ɵngcc0.ɵɵpipeBind1(3, 17, "SEARCH.FILTER.RANGE.FROM-DATE"));
        ɵngcc0.ɵɵproperty("formControl", ctx.from)("errorStateMatcher", ctx.matcher)("matDatetimepicker", _r0)("max", ctx.fromMaxDatetime);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("for", _r0);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngIf", ctx.from.invalid);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵpropertyInterpolate("placeholder", ɵngcc0.ɵɵpipeBind1(10, 19, "SEARCH.FILTER.RANGE.TO-DATE"));
        ɵngcc0.ɵɵproperty("formControl", ctx.to)("errorStateMatcher", ctx.matcher)("matDatetimepicker", _r2)("min", ctx.from.value)("max", ctx.maxDatetime);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("for", _r2);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngIf", ctx.to.invalid);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !(ctx.settings == null ? null : ctx.settings.hideDefaultAction));
    } }, directives: [ɵngcc26.ɵangular_packages_forms_forms_y, ɵngcc26.NgControlStatusGroup, ɵngcc26.FormGroupDirective, ɵngcc27.MatFormField, ɵngcc6.MatInput, ɵngcc26.DefaultValueAccessor, ɵngcc28.MatDatetimepickerInput, ɵngcc26.NgControlStatus, ɵngcc26.FormControlDirective, ɵngcc28.MatDatetimepickerToggle, ɵngcc27.MatSuffix, ɵngcc28.MatDatetimepicker, ɵngcc23.NgIf, ɵngcc27.MatError, ɵngcc1.MatButton], pipes: [ɵngcc25.TranslatePipe], styles: [_c23], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SearchDatetimeRangeComponent, [{
        type: i0.Component,
        args: [{
                selector: 'adf-search-datetime-range',
                template: "<form [formGroup]=\"form\" novalidate (ngSubmit)=\"apply(form.value, form.valid)\">\n    <mat-form-field>\n        <input matInput\n                (input)=\"forcePlaceholder($event)\"\n                [formControl]=\"from\"\n                [errorStateMatcher]=\"matcher\"\n                placeholder=\"{{ 'SEARCH.FILTER.RANGE.FROM-DATE' | translate }}\"\n                [matDatetimepicker]=\"fromDatetimePicker\"\n                [max]=\"fromMaxDatetime\"\n                (dateChange)=\"onChangedHandler($event, from)\"\n                data-automation-id=\"datetime-range-from-input\">\n        <mat-datetimepicker-toggle matSuffix [for]=\"fromDatetimePicker\" data-automation-id=\"datetime-range-from-date-toggle\"></mat-datetimepicker-toggle>\n        <mat-datetimepicker #fromDatetimePicker color=\"accent\" type=\"datetime\"></mat-datetimepicker>\n        <mat-error *ngIf=\"from.invalid\" data-automation-id=\"datetime-range-from-error\">\n            {{ getFromValidationMessage() | translate: { requiredFormat: datetimePickerFormat } }}\n        </mat-error>\n    </mat-form-field>\n\n    <mat-form-field>\n        <input matInput\n                (input)=\"forcePlaceholder($event)\"\n                [formControl]=\"to\"\n                [errorStateMatcher]=\"matcher\"\n                placeholder=\"{{ 'SEARCH.FILTER.RANGE.TO-DATE' | translate }}\"\n                [matDatetimepicker]=\"toDatetimePicker\"\n                [min]=\"from.value\"\n                [max]=\"maxDatetime\"\n                (dateChange)=\"onChangedHandler($event, to)\"\n                data-automation-id=\"datetime-range-to-input\">\n        <mat-datetimepicker-toggle matSuffix [for]=\"toDatetimePicker\" data-automation-id=\"datetime-range-to-date-toggle\"></mat-datetimepicker-toggle>\n        <mat-datetimepicker #toDatetimePicker color=\"accent\" type=\"datetime\"></mat-datetimepicker>\n        <mat-error *ngIf=\"to.invalid\" data-automation-id=\"datetime-range-to-error\">\n            {{ getToValidationMessage() | translate: { requiredFormat: datetimePickerFormat } }}\n        </mat-error>\n    </mat-form-field>\n\n    <div class=\"adf-facet-buttons adf-facet-buttons--topSpace\" *ngIf=\"!settings?.hideDefaultAction\">\n        <button mat-button color=\"primary\" type=\"button\" (click)=\"clear()\" data-automation-id=\"datetime-range-clear-btn\">\n            {{ 'SEARCH.FILTER.ACTIONS.CLEAR' | translate }}\n        </button>\n        <button mat-button color=\"primary\" type=\"submit\" [disabled]=\"!form.valid\" data-automation-id=\"datetime-range-apply-btn\">\n            {{ 'SEARCH.FILTER.ACTIONS.APPLY' | translate }}\n        </button>\n    </div>\n</form>\n",
                providers: [
                    { provide: core$2.MAT_DATETIME_FORMATS, useValue: ɵ0$1 }
                ],
                encapsulation: i0.ViewEncapsulation.None,
                host: { class: 'adf-search-date-range' },
                styles: [".adf-search-date-range>form{display:inline-flex;flex-direction:column;width:100%}"]
            }]
    }], function () { return [{ type: ɵngcc28.DatetimeAdapter }, { type: ɵngcc21.UserPreferencesService }]; }, null); })();
        return SearchDatetimeRangeComponent;
    }());
    SearchDatetimeRangeComponent.ctorParameters = function () { return [
        { type: core$2.DatetimeAdapter },
        { type: i1.UserPreferencesService }
    ]; };

    var SearchFilterService = /** @class */ (function () {
        function SearchFilterService() {
            this.widgets = {
                'text': SearchTextComponent,
                'radio': SearchRadioComponent,
                'slider': SearchSliderComponent,
                'number-range': SearchNumberRangeComponent,
                'check-list': SearchCheckListComponent,
                'date-range': SearchDateRangeComponent,
                'datetime-range': SearchDatetimeRangeComponent
            };
        }
SearchFilterService.ɵfac = function SearchFilterService_Factory(t) { return new (t || SearchFilterService)(); };
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SearchFilterService, [{
        type: i0.Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return []; }, null); })();
        return SearchFilterService;
    }());
    SearchFilterService.ɵprov = i0.ɵɵdefineInjectable({ factory: function SearchFilterService_Factory() { return new SearchFilterService(); }, token: SearchFilterService, providedIn: "root" });

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var SearchWidgetContainerComponent = /** @class */ (function () {
        function SearchWidgetContainerComponent(searchFilterService, queryBuilder, componentFactoryResolver) {
            this.searchFilterService = searchFilterService;
            this.queryBuilder = queryBuilder;
            this.componentFactoryResolver = componentFactoryResolver;
        }
        SearchWidgetContainerComponent.prototype.ngOnInit = function () {
            var componentType = this.searchFilterService.widgets[this.selector];
            if (componentType) {
                var factory = this.componentFactoryResolver.resolveComponentFactory(componentType);
                if (factory) {
                    this.content.clear();
                    this.componentRef = this.content.createComponent(factory, 0);
                    this.setupWidget(this.componentRef);
                }
            }
        };
        SearchWidgetContainerComponent.prototype.ngOnChanges = function (changes) {
            var _a, _b;
            if (((_a = changes['value']) === null || _a === void 0 ? void 0 : _a.currentValue) && ((_b = this.componentRef) === null || _b === void 0 ? void 0 : _b.instance)) {
                this.componentRef.instance.isActive = true;
                this.componentRef.instance.setValue(changes['value'].currentValue);
            }
        };
        SearchWidgetContainerComponent.prototype.setupWidget = function (ref) {
            if (ref && ref.instance) {
                ref.instance.id = this.id;
                ref.instance.settings = Object.assign({}, this.settings);
                ref.instance.context = this.queryBuilder;
                if (this.value) {
                    ref.instance.isActive = true;
                    ref.instance.startValue = this.value;
                }
            }
        };
        SearchWidgetContainerComponent.prototype.ngOnDestroy = function () {
            if (this.componentRef) {
                this.componentRef.destroy();
                this.componentRef = null;
            }
        };
        SearchWidgetContainerComponent.prototype.applyInnerWidget = function () {
            this.componentRef.instance.submitValues();
        };
        SearchWidgetContainerComponent.prototype.setValue = function (currentValue) {
            this.componentRef.instance.isActive = true;
            this.componentRef.instance.setValue(currentValue);
        };
        SearchWidgetContainerComponent.prototype.hasValueSelected = function () {
            return this.componentRef.instance.hasValidValue();
        };
        SearchWidgetContainerComponent.prototype.getCurrentValue = function () {
            return this.componentRef.instance.getCurrentValue();
        };
        SearchWidgetContainerComponent.prototype.getDisplayValue = function () {
            var _a;
            if (!((_a = this.componentRef) === null || _a === void 0 ? void 0 : _a.instance)) {
                return null;
            }
            return this.componentRef.instance.displayValue$;
        };
        SearchWidgetContainerComponent.prototype.resetInnerWidget = function () {
            if (this.componentRef && this.componentRef.instance) {
                this.componentRef.instance.reset();
            }
        };
SearchWidgetContainerComponent.ɵfac = function SearchWidgetContainerComponent_Factory(t) { return new (t || SearchWidgetContainerComponent)(ɵngcc0.ɵɵdirectiveInject(SearchFilterService), ɵngcc0.ɵɵdirectiveInject(SEARCH_QUERY_SERVICE_TOKEN), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ComponentFactoryResolver)); };
SearchWidgetContainerComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: SearchWidgetContainerComponent, selectors: [["adf-search-widget-container"]], viewQuery: function SearchWidgetContainerComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵstaticViewQuery(_c24, true, i0.ViewContainerRef);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.content = _t.first);
    } }, inputs: { id: "id", selector: "selector", settings: "settings", config: "config", value: "value" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 2, vars: 0, consts: [["content", ""]], template: function SearchWidgetContainerComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelement(0, "div", null, 0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SearchWidgetContainerComponent, [{
        type: i0.Component,
        args: [{
                selector: 'adf-search-widget-container',
                template: '<div #content></div>'
            }]
    }], function () { return [{ type: SearchFilterService }, { type: BaseQueryBuilderService, decorators: [{
                type: i0.Inject,
                args: [SEARCH_QUERY_SERVICE_TOKEN]
            }] }, { type: ɵngcc0.ComponentFactoryResolver }]; }, { content: [{
            type: i0.ViewChild,
            args: ['content', { read: i0.ViewContainerRef, static: true }]
        }], id: [{
            type: i0.Input
        }], selector: [{
            type: i0.Input
        }], settings: [{
            type: i0.Input
        }], config: [{
            type: i0.Input
        }], value: [{
            type: i0.Input
        }] }); })();
        return SearchWidgetContainerComponent;
    }());
    SearchWidgetContainerComponent.ctorParameters = function () { return [
        { type: SearchFilterService },
        { type: BaseQueryBuilderService, decorators: [{ type: i0.Inject, args: [SEARCH_QUERY_SERVICE_TOKEN,] }] },
        { type: i0.ComponentFactoryResolver }
    ]; };
    SearchWidgetContainerComponent.propDecorators = {
        content: [{ type: i0.ViewChild, args: ['content', { read: i0.ViewContainerRef, static: true },] }],
        id: [{ type: i0.Input }],
        selector: [{ type: i0.Input }],
        settings: [{ type: i0.Input }],
        config: [{ type: i0.Input }],
        value: [{ type: i0.Input }]
    };

    var SearchQueryBuilderService = /** @class */ (function (_super) {
        __extends(SearchQueryBuilderService, _super);
        function SearchQueryBuilderService(appConfig, alfrescoApiService) {
            return _super.call(this, appConfig, alfrescoApiService) || this;
        }
        SearchQueryBuilderService.prototype.isFilterServiceActive = function () {
            return false;
        };
        SearchQueryBuilderService.prototype.loadConfiguration = function () {
            return this.appConfig.get('search');
        };
SearchQueryBuilderService.ɵfac = function SearchQueryBuilderService_Factory(t) { return new (t || SearchQueryBuilderService)(ɵngcc0.ɵɵinject(ɵngcc21.AppConfigService), ɵngcc0.ɵɵinject(ɵngcc21.AlfrescoApiService)); };
SearchQueryBuilderService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: SearchQueryBuilderService, factory: function (t) { return SearchQueryBuilderService.ɵfac(t); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SearchQueryBuilderService, [{
        type: i0.Injectable
    }], function () { return [{ type: ɵngcc21.AppConfigService }, { type: ɵngcc21.AlfrescoApiService }]; }, null); })();
        return SearchQueryBuilderService;
    }(BaseQueryBuilderService));
    SearchQueryBuilderService.ctorParameters = function () { return [
        { type: i1.AppConfigService },
        { type: i1.AlfrescoApiService }
    ]; };

    var SearchFacetFiltersService = /** @class */ (function () {
        function SearchFacetFiltersService(queryBuilder, searchService, translationService) {
            var _this = this;
            this.queryBuilder = queryBuilder;
            this.searchService = searchService;
            this.translationService = translationService;
            this.responseFacets = null;
            this.selectedBuckets = [];
            this.DEFAULT_PAGE_SIZE = 5;
            this.facetQueriesPageSize = this.DEFAULT_PAGE_SIZE;
            this.onDestroy$ = new rxjs.Subject();
            if (queryBuilder.config && queryBuilder.config.facetQueries) {
                this.facetQueriesPageSize = queryBuilder.config.facetQueries.pageSize || this.DEFAULT_PAGE_SIZE;
            }
            this.queryBuilder.configUpdated
                .pipe(operators.takeUntil(this.onDestroy$))
                .subscribe(function () {
                _this.selectedBuckets = [];
                _this.responseFacets = null;
            });
            this.queryBuilder.updated
                .pipe(operators.takeUntil(this.onDestroy$))
                .subscribe(function (query) { return _this.queryBuilder.execute(query); });
            this.queryBuilder.executed
                .pipe(operators.takeUntil(this.onDestroy$))
                .subscribe(function (resultSetPaging) {
                _this.onDataLoaded(resultSetPaging);
                _this.searchService.dataLoaded.next(resultSetPaging);
            });
        }
        SearchFacetFiltersService.prototype.onDataLoaded = function (data) {
            var context = data.list.context;
            if (context) {
                this.parseFacets(context);
            }
            else {
                this.responseFacets = null;
            }
        };
        SearchFacetFiltersService.prototype.parseFacets = function (context) {
            this.parseFacetFields(context);
            this.parseFacetIntervals(context);
            this.parseFacetQueries(context);
        };
        SearchFacetFiltersService.prototype.parseFacetItems = function (context, configFacetFields, itemType) {
            var _this = this;
            configFacetFields.forEach(function (field) {
                var responseField = _this.findFacet(context, itemType, field.label);
                var responseBuckets = _this.getResponseBuckets(responseField, field)
                    .filter(_this.getFilterByMinCount(field.mincount));
                var alreadyExistingField = _this.findResponseFacet(itemType, field.label);
                if (alreadyExistingField) {
                    var alreadyExistingBuckets = alreadyExistingField.buckets && alreadyExistingField.buckets.items || [];
                    _this.updateExistingBuckets(responseField, responseBuckets, alreadyExistingField, alreadyExistingBuckets);
                }
                else if (responseField) {
                    if (responseBuckets.length > 0) {
                        var bucketList = new SearchFilterList(responseBuckets, field.pageSize);
                        bucketList.filter = _this.getBucketFilterFunction(bucketList);
                        if (!_this.responseFacets) {
                            _this.responseFacets = [];
                        }
                        _this.responseFacets.push(Object.assign(Object.assign({}, field), { type: responseField.type || itemType, label: field.label, pageSize: field.pageSize | _this.DEFAULT_PAGE_SIZE, currentPageSize: field.pageSize | _this.DEFAULT_PAGE_SIZE, buckets: bucketList }));
                    }
                }
            });
        };
        SearchFacetFiltersService.prototype.parseFacetFields = function (context) {
            var configFacetFields = this.queryBuilder.config.facetFields && this.queryBuilder.config.facetFields.fields || [];
            this.parseFacetItems(context, configFacetFields, 'field');
        };
        SearchFacetFiltersService.prototype.parseFacetIntervals = function (context) {
            var configFacetIntervals = this.queryBuilder.config.facetIntervals && this.queryBuilder.config.facetIntervals.intervals || [];
            this.parseFacetItems(context, configFacetIntervals, 'interval');
        };
        SearchFacetFiltersService.prototype.parseFacetQueries = function (context) {
            var _this = this;
            var _a;
            var facetQuerySetting = ((_a = this.queryBuilder.config.facetQueries) === null || _a === void 0 ? void 0 : _a.settings) || {};
            var configFacetQueries = this.queryBuilder.config.facetQueries && this.queryBuilder.config.facetQueries.queries || [];
            var configGroups = configFacetQueries.reduce(function (acc, query) {
                var group = _this.queryBuilder.getQueryGroup(query);
                if (acc[group]) {
                    acc[group].push(query);
                }
                else {
                    acc[group] = [query];
                }
                return acc;
            }, []);
            var mincount = this.queryBuilder.config.facetQueries && this.queryBuilder.config.facetQueries.mincount;
            var mincountFilter = this.getFilterByMinCount(mincount);
            Object.keys(configGroups).forEach(function (group) {
                var responseField = _this.findFacet(context, 'query', group);
                var responseBuckets = _this.getResponseQueryBuckets(responseField, configGroups[group])
                    .filter(mincountFilter);
                var alreadyExistingField = _this.findResponseFacet('query', group);
                if (alreadyExistingField) {
                    var alreadyExistingBuckets = alreadyExistingField.buckets && alreadyExistingField.buckets.items || [];
                    _this.updateExistingBuckets(responseField, responseBuckets, alreadyExistingField, alreadyExistingBuckets);
                }
                else if (responseField) {
                    if (responseBuckets.length > 0) {
                        var bucketList = new SearchFilterList(responseBuckets, _this.facetQueriesPageSize);
                        bucketList.filter = _this.getBucketFilterFunction(bucketList);
                        if (!_this.responseFacets) {
                            _this.responseFacets = [];
                        }
                        _this.responseFacets.push({
                            field: group,
                            type: responseField.type || 'query',
                            label: group,
                            pageSize: _this.DEFAULT_PAGE_SIZE,
                            currentPageSize: _this.DEFAULT_PAGE_SIZE,
                            buckets: bucketList,
                            settings: facetQuerySetting
                        });
                    }
                }
            });
        };
        SearchFacetFiltersService.prototype.getResponseBuckets = function (responseField, configField) {
            var _this = this;
            return ((responseField && responseField.buckets) || []).map(function (respBucket) {
                respBucket['count'] = _this.getCountValue(respBucket);
                respBucket.filterQuery = respBucket.filterQuery || _this.getCorrespondingFilterQuery(configField, respBucket.label);
                return Object.assign(Object.assign({}, respBucket), { checked: false, display: respBucket.display, label: respBucket.label });
            });
        };
        SearchFacetFiltersService.prototype.getResponseQueryBuckets = function (responseField, configGroup) {
            var _this = this;
            return (configGroup || []).map(function (query) {
                var respBucket = ((responseField && responseField.buckets) || [])
                    .find(function (bucket) { return bucket.label === query.label; }) || {};
                respBucket['count'] = _this.getCountValue(respBucket);
                return Object.assign(Object.assign({}, respBucket), { checked: false, display: respBucket.display, label: respBucket.label });
            });
        };
        SearchFacetFiltersService.prototype.getCountValue = function (bucket) {
            var _a, _b;
            return (!!bucket && !!bucket.metrics && ((_b = (_a = bucket.metrics[0]) === null || _a === void 0 ? void 0 : _a.value) === null || _b === void 0 ? void 0 : _b.count)) || 0;
        };
        SearchFacetFiltersService.prototype.getBucketCountDisplay = function (bucket) {
            return bucket.count === null ? '' : "(" + bucket.count + ")";
        };
        SearchFacetFiltersService.prototype.getFilterByMinCount = function (mincountInput) {
            return function (bucket) {
                var mincount = mincountInput;
                if (mincount === undefined) {
                    mincount = 1;
                }
                return bucket.count >= mincount;
            };
        };
        SearchFacetFiltersService.prototype.getCorrespondingFilterQuery = function (configFacetItem, bucketLabel) {
            var filterQuery = null;
            if (configFacetItem.field && bucketLabel) {
                if (configFacetItem.sets) {
                    var configSet = configFacetItem.sets.find(function (set) { return bucketLabel === set.label; });
                    if (configSet) {
                        filterQuery = this.buildIntervalQuery(configFacetItem.field, configSet);
                    }
                }
                else {
                    filterQuery = configFacetItem.field + ":\"" + bucketLabel + "\"";
                }
            }
            return filterQuery;
        };
        SearchFacetFiltersService.prototype.buildIntervalQuery = function (fieldName, interval) {
            var start = interval.start;
            var end = interval.end;
            var startLimit = (interval.startInclusive === undefined || interval.startInclusive === true) ? '[' : '<';
            var endLimit = (interval.endInclusive === undefined || interval.endInclusive === true) ? ']' : '>';
            return fieldName + ":" + startLimit + "\"" + start + "\" TO \"" + end + "\"" + endLimit;
        };
        SearchFacetFiltersService.prototype.findFacet = function (context, itemType, fieldLabel) {
            return (context.facets || []).find(function (response) { return response.type === itemType && response.label === fieldLabel; }) || {};
        };
        SearchFacetFiltersService.prototype.findResponseFacet = function (itemType, fieldLabel) {
            return (this.responseFacets || []).find(function (response) { return response.type === itemType && response.label === fieldLabel; });
        };
        SearchFacetFiltersService.prototype.updateExistingBuckets = function (responseField, responseBuckets, alreadyExistingField, alreadyExistingBuckets) {
            var _this = this;
            var bucketsToDelete = [];
            alreadyExistingBuckets
                .map(function (bucket) {
                var responseBucket = ((responseField && responseField.buckets) || []).find(function (respBucket) { return respBucket.label === bucket.label; });
                if (!responseBucket) {
                    bucketsToDelete.push(bucket);
                }
                bucket.count = _this.getCountValue(responseBucket);
                return bucket;
            });
            var hasSelection = this.selectedBuckets
                .find(function (selBuckets) { return alreadyExistingField.label === selBuckets.field.label && alreadyExistingField.type === selBuckets.field.type; });
            if (!hasSelection && bucketsToDelete.length) {
                bucketsToDelete.forEach(function (bucket) {
                    alreadyExistingField.buckets.deleteItem(bucket);
                });
            }
            responseBuckets.forEach(function (respBucket) {
                var existingBucket = alreadyExistingBuckets.find(function (oldBucket) { return oldBucket.label === respBucket.label; });
                if (!existingBucket) {
                    alreadyExistingField.buckets.addItem(respBucket);
                }
            });
        };
        SearchFacetFiltersService.prototype.getBucketFilterFunction = function (bucketList) {
            var _this = this;
            return function (bucket) {
                if (bucket && bucketList.filterText) {
                    var pattern = (bucketList.filterText || '').toLowerCase();
                    var label = (_this.translationService.instant(bucket.display) || _this.translationService.instant(bucket.label)).toLowerCase();
                    return _this.queryBuilder.config.filterWithContains ? label.indexOf(pattern) !== -1 : label.startsWith(pattern);
                }
                return true;
            };
        };
        SearchFacetFiltersService.prototype.unselectFacetBucket = function (field, bucket) {
            if (bucket) {
                bucket.checked = false;
                this.queryBuilder.removeUserFacetBucket(field, bucket);
                this.updateSelectedBuckets();
                this.queryBuilder.update();
            }
        };
        SearchFacetFiltersService.prototype.updateSelectedBuckets = function () {
            var e_1, _c;
            if (this.responseFacets) {
                this.selectedBuckets = [];
                var _loop_1 = function (field) {
                    var _c;
                    if (field.buckets) {
                        (_c = this_1.selectedBuckets).push.apply(_c, __spread(this_1.queryBuilder.getUserFacetBuckets(field.field)
                            .filter(function (bucket) { return bucket.checked; })
                            .map(function (bucket) {
                            return { field: field, bucket: bucket };
                        })));
                    }
                };
                var this_1 = this;
                try {
                    for (var _d = __values(this.responseFacets), _e = _d.next(); !_e.done; _e = _d.next()) {
                        var field = _e.value;
                        _loop_1(field);
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (_e && !_e.done && (_c = _d.return)) _c.call(_d);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
            }
            else {
                this.selectedBuckets = [];
            }
        };
        SearchFacetFiltersService.prototype.ngOnDestroy = function () {
            this.onDestroy$.next();
            this.onDestroy$.complete();
        };
        SearchFacetFiltersService.prototype.resetAllSelectedBuckets = function () {
            var _this = this;
            this.responseFacets.forEach(function (field) {
                var e_2, _c;
                if (field && field.buckets) {
                    try {
                        for (var _d = __values(field.buckets.items), _e = _d.next(); !_e.done; _e = _d.next()) {
                            var bucket = _e.value;
                            bucket.checked = false;
                            _this.queryBuilder.removeUserFacetBucket(field, bucket);
                        }
                    }
                    catch (e_2_1) { e_2 = { error: e_2_1 }; }
                    finally {
                        try {
                            if (_e && !_e.done && (_c = _d.return)) _c.call(_d);
                        }
                        finally { if (e_2) throw e_2.error; }
                    }
                    _this.updateSelectedBuckets();
                }
            });
            this.queryBuilder.update();
        };
        SearchFacetFiltersService.prototype.resetQueryFragments = function () {
            this.queryBuilder.queryFragments = {};
            this.queryBuilder.resetToDefaults();
        };
        SearchFacetFiltersService.prototype.reset = function () {
            this.responseFacets = [];
            this.selectedBuckets = [];
            this.queryBuilder.resetToDefaults();
            this.queryBuilder.update();
        };
SearchFacetFiltersService.ɵfac = function SearchFacetFiltersService_Factory(t) { return new (t || SearchFacetFiltersService)(ɵngcc0.ɵɵinject(SEARCH_QUERY_SERVICE_TOKEN), ɵngcc0.ɵɵinject(ɵngcc21.SearchService), ɵngcc0.ɵɵinject(ɵngcc21.TranslationService)); };
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SearchFacetFiltersService, [{
        type: i0.Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: SearchQueryBuilderService, decorators: [{
                type: i0.Inject,
                args: [SEARCH_QUERY_SERVICE_TOKEN]
            }] }, { type: ɵngcc21.SearchService }, { type: ɵngcc21.TranslationService }]; }, null); })();
        return SearchFacetFiltersService;
    }());
    SearchFacetFiltersService.ɵprov = i0.ɵɵdefineInjectable({ factory: function SearchFacetFiltersService_Factory() { return new SearchFacetFiltersService(i0.ɵɵinject(SEARCH_QUERY_SERVICE_TOKEN), i0.ɵɵinject(i1.SearchService), i0.ɵɵinject(i1.TranslationService)); }, token: SearchFacetFiltersService, providedIn: "root" });
    SearchFacetFiltersService.ctorParameters = function () { return [
        { type: SearchQueryBuilderService, decorators: [{ type: i0.Inject, args: [SEARCH_QUERY_SERVICE_TOKEN,] }] },
        { type: i1.SearchService },
        { type: i1.TranslationService }
    ]; };

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var SearchFilterComponent = /** @class */ (function () {
        function SearchFilterComponent(queryBuilder, facetFiltersService) {
            this.queryBuilder = queryBuilder;
            this.facetFiltersService = facetFiltersService;
            this.showContextFacets = true;
            this.facetQueriesLabel = 'Facet Queries';
            this.facetExpanded = {
                'default': false
            };
            if (queryBuilder.config && queryBuilder.config.facetQueries) {
                this.facetQueriesLabel = queryBuilder.config.facetQueries.label || 'Facet Queries';
                this.facetExpanded['query'] = queryBuilder.config.facetQueries.expanded;
            }
            if (queryBuilder.config && queryBuilder.config.facetFields) {
                this.facetExpanded['field'] = queryBuilder.config.facetFields.expanded;
            }
            if (queryBuilder.config && queryBuilder.config.facetIntervals) {
                this.facetExpanded['interval'] = queryBuilder.config.facetIntervals.expanded;
            }
            this.displayResetButton = this.queryBuilder.config && !!this.queryBuilder.config.resetButton;
        }
        SearchFilterComponent.prototype.shouldExpand = function (field) {
            return this.facetExpanded[field.type] || this.facetExpanded['default'];
        };
        SearchFilterComponent.prototype.getBucketCountDisplay = function (bucket) {
            return bucket.count === null ? '' : "(" + bucket.count + ")";
        };
SearchFilterComponent.ɵfac = function SearchFilterComponent_Factory(t) { return new (t || SearchFilterComponent)(ɵngcc0.ɵɵdirectiveInject(SEARCH_QUERY_SERVICE_TOKEN), ɵngcc0.ɵɵdirectiveInject(SearchFacetFiltersService)); };
SearchFilterComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: SearchFilterComponent, selectors: [["adf-search-filter"]], hostAttrs: [1, "adf-search-filter"], inputs: { showContextFacets: "showContextFacets" }, decls: 4, vars: 3, consts: [["multi", "true", "displayMode", "flat"], ["mat-button", "", "color", "primary", "matTooltipPosition", "right", "adf-reset-search", "", 3, "matTooltip", 4, "ngIf"], [3, "expanded", "expandedChange", 4, "ngFor", "ngForOf"], [4, "ngIf"], ["mat-button", "", "color", "primary", "matTooltipPosition", "right", "adf-reset-search", "", 3, "matTooltip"], [3, "expanded", "expandedChange"], [3, "id", "selector", "settings"], [3, "expanded", 4, "ngFor", "ngForOf"], [3, "expanded"], [3, "field"]], template: function SearchFilterComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "mat-accordion", 0);
        ɵngcc0.ɵɵtemplate(1, SearchFilterComponent_button_1_Template, 4, 6, "button", 1);
        ɵngcc0.ɵɵtemplate(2, SearchFilterComponent_mat_expansion_panel_2_Template, 6, 8, "mat-expansion-panel", 2);
        ɵngcc0.ɵɵtemplate(3, SearchFilterComponent_ng_container_3_Template, 2, 1, "ng-container", 3);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.displayResetButton && ctx.facetFiltersService.responseFacets);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.queryBuilder.categories);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.facetFiltersService.responseFacets && ctx.showContextFacets);
    } }, directives: function () { return [ɵngcc12.MatAccordion, ɵngcc23.NgIf, ɵngcc23.NgForOf, ɵngcc1.MatButton, ResetSearchDirective, ɵngcc24.MatTooltip, ɵngcc12.MatExpansionPanel, ɵngcc12.MatExpansionPanelHeader, ɵngcc12.MatExpansionPanelTitle, SearchWidgetContainerComponent, SearchFacetFieldComponent]; }, pipes: function () { return [ɵngcc25.TranslatePipe]; }, styles: [".adf-search-filter .mat-expansion-panel-header-title{color:var(--theme-text-bold-color);font-size:14px}.adf-search-filter .mat-checkbox-label,.adf-search-filter .mat-radio-label{color:var(--theme-text-color)}"], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SearchFilterComponent, [{
        type: i0.Component,
        args: [{
                selector: 'adf-search-filter',
                template: "<mat-accordion multi=\"true\" displayMode=\"flat\">\n\n    <button *ngIf=\"displayResetButton && facetFiltersService.responseFacets\"\n            mat-button\n            color=\"primary\"\n            matTooltip=\"{{ 'SEARCH.FILTER.BUTTONS.RESET-ALL.TOOLTIP' | translate }}\"\n            matTooltipPosition=\"right\"\n            adf-reset-search>\n        {{ 'SEARCH.FILTER.BUTTONS.RESET-ALL.LABEL' | translate }}\n    </button>\n    <mat-expansion-panel\n        *ngFor=\"let category of queryBuilder.categories\"\n        [attr.data-automation-id]=\"'expansion-panel-'+category.name\"\n        [(expanded)]=\"category.expanded\">\n        <mat-expansion-panel-header>\n            <mat-panel-title>\n                {{ category.name | translate }}\n            </mat-panel-title>\n        </mat-expansion-panel-header>\n        <adf-search-widget-container\n            [id]=\"category.id\"\n            [selector]=\"category.component.selector\"\n            [settings]=\"category.component.settings\">\n        </adf-search-widget-container>\n    </mat-expansion-panel>\n\n    <ng-container *ngIf=\"facetFiltersService.responseFacets && showContextFacets\">\n        <mat-expansion-panel [attr.data-automation-id]=\"'expansion-panel-'+field.label\" *ngFor=\"let field of facetFiltersService.responseFacets\"\n                             [expanded]=\"shouldExpand(field)\">\n            <mat-expansion-panel-header>\n                <mat-panel-title>{{ field.label | translate }}</mat-panel-title>\n            </mat-expansion-panel-header>\n\n            <adf-search-facet-field [field]=\"field\"></adf-search-facet-field>\n\n        </mat-expansion-panel>\n    </ng-container>\n</mat-accordion>\n",
                encapsulation: i0.ViewEncapsulation.None,
                host: { class: 'adf-search-filter' },
                styles: [".adf-search-filter .mat-expansion-panel-header-title{color:var(--theme-text-bold-color);font-size:14px}.adf-search-filter .mat-checkbox-label,.adf-search-filter .mat-radio-label{color:var(--theme-text-color)}"]
            }]
    }], function () { return [{ type: SearchQueryBuilderService, decorators: [{
                type: i0.Inject,
                args: [SEARCH_QUERY_SERVICE_TOKEN]
            }] }, { type: SearchFacetFiltersService }]; }, { showContextFacets: [{
            type: i0.Input
        }] }); })();
        return SearchFilterComponent;
    }());
    SearchFilterComponent.ctorParameters = function () { return [
        { type: SearchQueryBuilderService, decorators: [{ type: i0.Inject, args: [SEARCH_QUERY_SERVICE_TOKEN,] }] },
        { type: SearchFacetFiltersService }
    ]; };
    SearchFilterComponent.propDecorators = {
        showContextFacets: [{ type: i0.Input }]
    };

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var SearchChipListComponent = /** @class */ (function () {
        function SearchChipListComponent(facetFiltersService) {
            this.facetFiltersService = facetFiltersService;
            this.clearAll = false;
        }
SearchChipListComponent.ɵfac = function SearchChipListComponent_Factory(t) { return new (t || SearchChipListComponent)(ɵngcc0.ɵɵdirectiveInject(SearchFacetFiltersService)); };
SearchChipListComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: SearchChipListComponent, selectors: [["adf-search-chip-list"]], hostAttrs: [1, "adf-search-chip-list"], inputs: { clearAll: "clearAll", searchFilter: "searchFilter" }, decls: 2, vars: 1, consts: [[4, "ngIf"], ["data-automation-id", "reset-filter", "color", "primary", "selected", "", "matTooltipPosition", "right", 3, "matTooltip", "click", 4, "ngIf"], ["data-automation-id", "chip-list-entry", 3, "removable", "removed", 4, "ngFor", "ngForOf"], ["data-automation-id", "reset-filter", "color", "primary", "selected", "", "matTooltipPosition", "right", 3, "matTooltip", "click"], ["data-automation-id", "chip-list-entry", 3, "removable", "removed"], ["matChipRemove", ""]], template: function SearchChipListComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "mat-chip-list");
        ɵngcc0.ɵɵtemplate(1, SearchChipListComponent_ng_container_1_Template, 3, 2, "ng-container", 0);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.facetFiltersService.selectedBuckets.length);
    } }, directives: [ɵngcc2.MatChipList, ɵngcc23.NgIf, ɵngcc23.NgForOf, ɵngcc2.MatChip, ɵngcc24.MatTooltip, ɵngcc4.MatIcon, ɵngcc2.MatChipRemove], pipes: [ɵngcc25.TranslatePipe], styles: [".mat-chip:focus{background-color:var(--theme-accent-color);color:var(--theme-accent-color-default-contrast)}.mat-chip:focus .mat-chip-remove{color:var(--theme-accent-color-default-contrast);opacity:1}"], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SearchChipListComponent, [{
        type: i0.Component,
        args: [{
                selector: 'adf-search-chip-list',
                template: "<mat-chip-list>\n    <ng-container *ngIf=\"facetFiltersService.selectedBuckets.length\">\n        <mat-chip *ngIf=\"clearAll && facetFiltersService.selectedBuckets.length > 1\"\n            data-automation-id=\"reset-filter\"\n            color=\"primary\"\n            selected\n            matTooltip=\"{{ 'SEARCH.FILTER.BUTTONS.CLEAR-ALL.TOOLTIP' | translate }}\"\n            matTooltipPosition=\"right\"\n            (click)=\"facetFiltersService.resetAllSelectedBuckets()\">\n            {{ 'SEARCH.FILTER.BUTTONS.CLEAR-ALL.LABEL' | translate }}\n        </mat-chip>\n\n        <mat-chip\n            data-automation-id=\"chip-list-entry\"\n            *ngFor=\"let selection of facetFiltersService.selectedBuckets\"\n            [removable]=\"true\"\n            (removed)=\"facetFiltersService.unselectFacetBucket(selection.field, selection.bucket)\">\n            {{ (selection.bucket.display || selection.bucket.label) | translate }}\n            <mat-icon matChipRemove>cancel</mat-icon>\n        </mat-chip>\n    </ng-container>\n</mat-chip-list>\n",
                encapsulation: i0.ViewEncapsulation.None,
                host: { class: 'adf-search-chip-list' },
                styles: [".mat-chip:focus{background-color:var(--theme-accent-color);color:var(--theme-accent-color-default-contrast)}.mat-chip:focus .mat-chip-remove{color:var(--theme-accent-color-default-contrast);opacity:1}"]
            }]
    }], function () { return [{ type: SearchFacetFiltersService }]; }, { clearAll: [{
            type: i0.Input
        }], searchFilter: [{
            type: i0.Input
        }] }); })();
        return SearchChipListComponent;
    }());
    SearchChipListComponent.ctorParameters = function () { return [
        { type: SearchFacetFiltersService }
    ]; };
    SearchChipListComponent.propDecorators = {
        searchFilter: [{ type: i0.Input }],
        clearAll: [{ type: i0.Input }]
    };

    var ContentNodeSelectorPanelService = /** @class */ (function () {
        function ContentNodeSelectorPanelService() {
            this.propertyTypes = ['d:text', 'd:date', 'd:datetime'];
            this.modelPropertyTypeToSearchFilterTypeMap = new Map();
            this.modelPropertyTypeToSearchFilterTypeMap.set(this.propertyTypes[0], 'text');
            this.modelPropertyTypeToSearchFilterTypeMap.set(this.propertyTypes[1], 'date-range');
            this.modelPropertyTypeToSearchFilterTypeMap.set(this.propertyTypes[2], 'datetime-range');
        }
        ContentNodeSelectorPanelService.prototype.convertCustomModelPropertiesToSearchCategories = function () {
            var _this = this;
            var _a;
            var searchConfig = [];
            (_a = this.customModels) === null || _a === void 0 ? void 0 : _a.forEach(function (propertyModel) {
                searchConfig.push(_this.convertModelPropertyIntoSearchFilter(propertyModel));
            });
            return searchConfig;
        };
        ContentNodeSelectorPanelService.prototype.convertModelPropertyIntoSearchFilter = function (modelProperty) {
            var filterSearch;
            if (this.isTypeSupported(modelProperty.dataType)) {
                filterSearch = {
                    id: modelProperty.prefixedName,
                    name: modelProperty.prefixedName,
                    expanded: false,
                    enabled: true,
                    component: {
                        selector: this.modelPropertyTypeToSearchFilterTypeMap.get(modelProperty.dataType),
                        settings: {
                            pattern: modelProperty.prefixedName + ":'(.*?)'",
                            field: "" + modelProperty.prefixedName,
                            placeholder: "Enter the " + modelProperty.name
                        }
                    }
                };
            }
            return filterSearch;
        };
        ContentNodeSelectorPanelService.prototype.isTypeSupported = function (dataType) {
            return this.propertyTypes.includes(dataType);
        };
ContentNodeSelectorPanelService.ɵfac = function ContentNodeSelectorPanelService_Factory(t) { return new (t || ContentNodeSelectorPanelService)(); };
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ContentNodeSelectorPanelService, [{
        type: i0.Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return []; }, null); })();
        return ContentNodeSelectorPanelService;
    }());
    ContentNodeSelectorPanelService.ɵprov = i0.ɵɵdefineInjectable({ factory: function ContentNodeSelectorPanelService_Factory() { return new ContentNodeSelectorPanelService(); }, token: ContentNodeSelectorPanelService, providedIn: "root" });
    ContentNodeSelectorPanelService.ctorParameters = function () { return []; };

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var SearchPanelComponent = /** @class */ (function () {
        function SearchPanelComponent(contentNodeSelectorPanelService, queryBuilderService) {
            this.contentNodeSelectorPanelService = contentNodeSelectorPanelService;
            this.queryBuilderService = queryBuilderService;
        }
        SearchPanelComponent.prototype.ngOnInit = function () {
            this.queryBuilderService.categories = this.contentNodeSelectorPanelService.convertCustomModelPropertiesToSearchCategories();
        };
        SearchPanelComponent.prototype.hasCustomModels = function () {
            var _a, _b;
            return ((_b = (_a = this.contentNodeSelectorPanelService) === null || _a === void 0 ? void 0 : _a.customModels) === null || _b === void 0 ? void 0 : _b.length) > 0;
        };
SearchPanelComponent.ɵfac = function SearchPanelComponent_Factory(t) { return new (t || SearchPanelComponent)(ɵngcc0.ɵɵdirectiveInject(ContentNodeSelectorPanelService), ɵngcc0.ɵɵdirectiveInject(SEARCH_QUERY_SERVICE_TOKEN)); };
SearchPanelComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: SearchPanelComponent, selectors: [["adf-search-panel"]], hostAttrs: [1, "adf-search-panel"], decls: 2, vars: 1, consts: [["data-automation-id", "adf-search-panel-container", 1, "adf-search-panel-scrollable"], ["class", "app-search-settings", 3, "showContextFacets", 4, "ngIf"], [1, "app-search-settings", 3, "showContextFacets"]], template: function SearchPanelComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵtemplate(1, SearchPanelComponent_adf_search_filter_1_Template, 1, 1, "adf-search-filter", 1);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.hasCustomModels());
    } }, directives: [ɵngcc23.NgIf, SearchFilterComponent], styles: [".adf-search-panel-scrollable{max-height:349px;overflow:scroll}"], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SearchPanelComponent, [{
        type: i0.Component,
        args: [{
                selector: 'adf-search-panel',
                template: "<div class=\"adf-search-panel-scrollable\" data-automation-id=\"adf-search-panel-container\">\n    <adf-search-filter *ngIf=\"hasCustomModels()\"\n                       class=\"app-search-settings\"\n                       [showContextFacets]=\"false\">\n    </adf-search-filter>\n</div>\n",
                encapsulation: i0.ViewEncapsulation.None,
                host: { class: 'adf-search-panel' },
                styles: [".adf-search-panel-scrollable{max-height:349px;overflow:scroll}"]
            }]
    }], function () { return [{ type: ContentNodeSelectorPanelService }, { type: SearchQueryBuilderService, decorators: [{
                type: i0.Inject,
                args: [SEARCH_QUERY_SERVICE_TOKEN]
            }] }]; }, null); })();
        return SearchPanelComponent;
    }());
    SearchPanelComponent.ctorParameters = function () { return [
        { type: ContentNodeSelectorPanelService },
        { type: SearchQueryBuilderService, decorators: [{ type: i0.Inject, args: [SEARCH_QUERY_SERVICE_TOKEN,] }] }
    ]; };

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var SearchSortingPickerComponent = /** @class */ (function () {
        function SearchSortingPickerComponent(queryBuilder) {
            this.queryBuilder = queryBuilder;
            this.options = [];
        }
        SearchSortingPickerComponent.prototype.ngOnInit = function () {
            this.options = this.queryBuilder.getSortingOptions();
            var primary = this.queryBuilder.getPrimarySorting();
            if (primary) {
                this.value = primary.key;
                this.ascending = primary.ascending;
            }
        };
        SearchSortingPickerComponent.prototype.onValueChanged = function (key) {
            this.value = key;
            this.ascending = this.getSortingOrder();
            this.applySorting();
        };
        SearchSortingPickerComponent.prototype.onSortingChanged = function (ascending) {
            this.ascending = ascending;
            this.applySorting();
        };
        SearchSortingPickerComponent.prototype.findOptionByKey = function (key) {
            if (key) {
                return this.options.find(function (opt) { return opt.key === key; });
            }
            return null;
        };
        SearchSortingPickerComponent.prototype.applySorting = function () {
            var option = this.findOptionByKey(this.value);
            if (option) {
                this.queryBuilder.sorting = [Object.assign(Object.assign({}, option), { ascending: this.ascending })];
                this.queryBuilder.update();
            }
        };
        SearchSortingPickerComponent.prototype.getSortingOrder = function () {
            var option = this.findOptionByKey(this.value);
            if (option) {
                return option.ascending;
            }
            return this.queryBuilder.getPrimarySorting().ascending;
        };
SearchSortingPickerComponent.ɵfac = function SearchSortingPickerComponent_Factory(t) { return new (t || SearchSortingPickerComponent)(ɵngcc0.ɵɵdirectiveInject(SEARCH_QUERY_SERVICE_TOKEN)); };
SearchSortingPickerComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: SearchSortingPickerComponent, selectors: [["adf-search-sorting-picker"]], hostAttrs: [1, "adf-search-sorting-picker"], decls: 1, vars: 3, consts: [[3, "options", "selected", "ascending", "valueChange", "sortingChange"]], template: function SearchSortingPickerComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "adf-sorting-picker", 0);
        ɵngcc0.ɵɵlistener("valueChange", function SearchSortingPickerComponent_Template_adf_sorting_picker_valueChange_0_listener($event) { return ctx.onValueChanged($event); })("sortingChange", function SearchSortingPickerComponent_Template_adf_sorting_picker_sortingChange_0_listener($event) { return ctx.onSortingChanged($event); });
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("options", ctx.options)("selected", ctx.value)("ascending", ctx.ascending);
    } }, directives: [ɵngcc21.SortingPickerComponent], styles: [".adf-search-sorting-picker .mat-icon-button{color:var(--theme-text-color)}"], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SearchSortingPickerComponent, [{
        type: i0.Component,
        args: [{
                selector: 'adf-search-sorting-picker',
                template: "<adf-sorting-picker\n    [options]=\"options\"\n    [selected]=\"value\"\n    [ascending]=\"ascending\"\n    (valueChange)=\"onValueChanged($event)\"\n    (sortingChange)=\"onSortingChanged($event)\">\n</adf-sorting-picker>\n",
                encapsulation: i0.ViewEncapsulation.None,
                host: { class: 'adf-search-sorting-picker' },
                styles: [".adf-search-sorting-picker .mat-icon-button{color:var(--theme-text-color)}"]
            }]
    }], function () { return [{ type: SearchQueryBuilderService, decorators: [{
                type: i0.Inject,
                args: [SEARCH_QUERY_SERVICE_TOKEN]
            }] }]; }, null); })();
        return SearchSortingPickerComponent;
    }());
    SearchSortingPickerComponent.ctorParameters = function () { return [
        { type: SearchQueryBuilderService, decorators: [{ type: i0.Inject, args: [SEARCH_QUERY_SERVICE_TOKEN,] }] }
    ]; };

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var SearchFilterContainerComponent = /** @class */ (function () {
        function SearchFilterContainerComponent(searchFilterQueryBuilder, translationService, focusTrapFactory) {
            this.searchFilterQueryBuilder = searchFilterQueryBuilder;
            this.translationService = translationService;
            this.focusTrapFactory = focusTrapFactory;
            this.filterChange = new i0.EventEmitter();
            this.onDestroy$ = new rxjs.Subject();
        }
        SearchFilterContainerComponent.prototype.ngOnInit = function () {
            this.category = this.searchFilterQueryBuilder.getCategoryForColumn(this.col.key);
            this.initialValue = this.value && this.value[this.col.key] ? this.value[this.col.key] : undefined;
        };
        SearchFilterContainerComponent.prototype.ngOnDestroy = function () {
            this.onDestroy$.next(true);
            this.onDestroy$.complete();
        };
        SearchFilterContainerComponent.prototype.onKeyPressed = function (event, menuTrigger) {
            if (event.key === 'Enter' && this.widgetContainer.selector !== 'check-list') {
                this.onApply();
                menuTrigger.closeMenu();
            }
        };
        SearchFilterContainerComponent.prototype.onApply = function () {
            if (this.widgetContainer.hasValueSelected()) {
                this.searchFilterQueryBuilder.setActiveFilter(this.category.columnKey, this.widgetContainer.getCurrentValue());
                this.filterChange.emit();
                this.widgetContainer.applyInnerWidget();
            }
            else {
                this.resetSearchFilter();
            }
        };
        SearchFilterContainerComponent.prototype.onClearButtonClick = function (event) {
            event.stopPropagation();
            this.resetSearchFilter();
        };
        SearchFilterContainerComponent.prototype.resetSearchFilter = function () {
            this.widgetContainer.resetInnerWidget();
            this.searchFilterQueryBuilder.removeActiveFilter(this.category.columnKey);
            this.filterChange.emit();
        };
        SearchFilterContainerComponent.prototype.getTooltipTranslation = function (columnTitle) {
            if (!columnTitle) {
                columnTitle = 'SEARCH.SEARCH_HEADER.TYPE';
            }
            return this.translationService.instant('SEARCH.SEARCH_HEADER.FILTER_BY', { category: this.translationService.instant(columnTitle) });
        };
        SearchFilterContainerComponent.prototype.isActive = function () {
            return this.widgetContainer && this.widgetContainer.componentRef && this.widgetContainer.componentRef.instance.isActive;
        };
        SearchFilterContainerComponent.prototype.onMenuOpen = function () {
            if (this.filterContainer && !this.focusTrap) {
                this.focusTrap = this.focusTrapFactory.create(this.filterContainer.nativeElement);
                this.focusTrap.focusInitialElement();
            }
        };
        SearchFilterContainerComponent.prototype.onClosed = function () {
            this.focusTrap.destroy();
            this.focusTrap = null;
        };
SearchFilterContainerComponent.ɵfac = function SearchFilterContainerComponent_Factory(t) { return new (t || SearchFilterContainerComponent)(ɵngcc0.ɵɵdirectiveInject(SEARCH_QUERY_SERVICE_TOKEN), ɵngcc0.ɵɵdirectiveInject(ɵngcc21.TranslationService), ɵngcc0.ɵɵdirectiveInject(ɵngcc30.ConfigurableFocusTrapFactory)); };
SearchFilterContainerComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: SearchFilterContainerComponent, selectors: [["adf-search-filter-container"]], viewQuery: function SearchFilterContainerComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(SearchWidgetContainerComponent, true);
        ɵngcc0.ɵɵviewQuery(_c25, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.widgetContainer = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.filterContainer = _t.first);
    } }, inputs: { col: "col", value: "value" }, outputs: { filterChange: "filterChange" }, decls: 1, vars: 1, consts: [["class", "adf-filter", 4, "ngIf"], [1, "adf-filter"], ["mat-icon-button", "", "id", "filter-menu-button", 1, "adf-filter-button", 3, "matMenuTriggerFor", "matTooltip", "click", "menuOpened", "keyup.enter"], ["menuTrigger", "matMenuTrigger"], ["value", "adf:filter", "matBadge", "filter", "matBadgeColor", "warn", 3, "ngClass", "matBadgeHidden"], [1, "adf-filter-menu", 3, "closed"], ["filter", "matMenu"], [3, "keydown.tab"], ["filterContainer", ""], [1, "adf-filter-container", 3, "click"], [1, "adf-filter-title"], [3, "id", "selector", "settings", "value", "keypress"], [1, "adf-filter-actions"], ["mat-button", "", "id", "clear-filter-button", 3, "click"], ["mat-button", "", "color", "primary", "id", "apply-filter-button", 1, "adf-filter-apply-button", 3, "click"]], template: function SearchFilterContainerComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, SearchFilterContainerComponent_div_0_Template, 22, 24, "div", 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngIf", !!ctx.category);
    } }, directives: [ɵngcc23.NgIf, ɵngcc1.MatButton, ɵngcc11.MatMenuTrigger, ɵngcc24.MatTooltip, ɵngcc21.IconComponent, ɵngcc20.MatBadge, ɵngcc23.NgClass, ɵngcc11._MatMenu, SearchWidgetContainerComponent, ɵngcc3.MatDialogActions], pipes: [ɵngcc25.TranslatePipe, ɵngcc23.UpperCasePipe], styles: [".adf-filter-button{margin-left:-7px!important}.adf-filter-button .adf-icon{color:var(--theme-icon-fg-color);opacity:1}.adf-filter-button .adf-icon-active{color:var(--theme-primary-color)}.adf-filter-button .adf-icon .mat-badge-active{border:2px solid var(--theme-card-bg-color)!important}.adf-filter-button .mat-icon{height:18px;width:18px}.adf-filter-button .mat-badge-content{height:10px;right:-6px!important;top:-3px!important;width:10px}.adf-filter-container{color:var(--theme-text-bold-color)!important;display:flex;flex-direction:column;padding:15px 15px 10px}.adf-filter-container .adf-facet-buttons{display:none}.adf-filter-container .adf-search-check-list{padding:5px 0}.adf-filter-container input{background:2px solid var(--theme-card-bg-color)!important}.adf-filter-title{color:var(--theme-text-bold-color);font-size:1.1em;padding-bottom:5px}.adf-filter-actions{background-color:var(--theme-hover-bg-color);display:flex;justify-content:flex-end;padding:15px}.adf-filter-actions>button{color:var(--theme-text-bold-color);font-size:.9em}.mat-menu-panel.adf-filter-menu .mat-menu-content{min-width:260px;padding:0}"], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SearchFilterContainerComponent, [{
        type: i0.Component,
        args: [{
                selector: 'adf-search-filter-container',
                template: "<div *ngIf=\"!!category\"\n     class=\"adf-filter\">\n    <button mat-icon-button\n            [matMenuTriggerFor]=\"filter\"\n            id=\"filter-menu-button\"\n            #menuTrigger=\"matMenuTrigger\"\n            (click)=\"$event.stopPropagation()\"\n            (menuOpened)=\"onMenuOpen()\"\n            (keyup.enter)=\"$event.stopPropagation()\"\n            class=\"adf-filter-button\"\n            [attr.aria-label]=\"getTooltipTranslation(col?.title)\"\n            [matTooltip]=\"getTooltipTranslation(col?.title)\">\n        <adf-icon value=\"adf:filter\"\n                  [ngClass]=\"{ 'adf-icon-active': isActive() || menuTrigger.menuOpen }\"\n                  matBadge=\"filter\"\n                  matBadgeColor=\"warn\"\n                  [matBadgeHidden]=\"!isActive()\">\n        </adf-icon>\n    </button>\n\n    <mat-menu #filter=\"matMenu\"\n              class=\"adf-filter-menu\"\n              (closed)=\"onClosed()\">\n        <div #filterContainer\n             (keydown.tab)=\"$event.stopPropagation();\">\n            <div (click)=\"$event.stopPropagation()\"\n                 class=\"adf-filter-container\">\n                <div class=\"adf-filter-title\">{{ category?.name | translate }}</div>\n                <adf-search-widget-container (keypress)=\"onKeyPressed($event, menuTrigger)\"\n                                             [id]=\"category?.id\"\n                                             [selector]=\"category?.component?.selector\"\n                                             [settings]=\"category?.component?.settings\"\n                                             [value]=\"initialValue\">\n                </adf-search-widget-container>\n            </div>\n            <mat-dialog-actions class=\"adf-filter-actions\">\n                <button mat-button\n                        id=\"clear-filter-button\"\n                        (click)=\"onClearButtonClick($event)\">{{ 'SEARCH.SEARCH_HEADER.CLEAR' | translate | uppercase }}\n                </button>\n                <button mat-button\n                        color=\"primary\"\n                        id=\"apply-filter-button\"\n                        class=\"adf-filter-apply-button\"\n                        (click)=\"onApply()\">{{ 'SEARCH.SEARCH_HEADER.APPLY' | translate | uppercase }}\n                </button>\n            </mat-dialog-actions>\n        </div>\n    </mat-menu>\n</div>\n",
                encapsulation: i0.ViewEncapsulation.None,
                styles: [".adf-filter-button{margin-left:-7px!important}.adf-filter-button .adf-icon{color:var(--theme-icon-fg-color);opacity:1}.adf-filter-button .adf-icon-active{color:var(--theme-primary-color)}.adf-filter-button .adf-icon .mat-badge-active{border:2px solid var(--theme-card-bg-color)!important}.adf-filter-button .mat-icon{height:18px;width:18px}.adf-filter-button .mat-badge-content{height:10px;right:-6px!important;top:-3px!important;width:10px}.adf-filter-container{color:var(--theme-text-bold-color)!important;display:flex;flex-direction:column;padding:15px 15px 10px}.adf-filter-container .adf-facet-buttons{display:none}.adf-filter-container .adf-search-check-list{padding:5px 0}.adf-filter-container input{background:2px solid var(--theme-card-bg-color)!important}.adf-filter-title{color:var(--theme-text-bold-color);font-size:1.1em;padding-bottom:5px}.adf-filter-actions{background-color:var(--theme-hover-bg-color);display:flex;justify-content:flex-end;padding:15px}.adf-filter-actions>button{color:var(--theme-text-bold-color);font-size:.9em}.mat-menu-panel.adf-filter-menu .mat-menu-content{min-width:260px;padding:0}"]
            }]
    }], function () { return [{ type: SearchHeaderQueryBuilderService, decorators: [{
                type: i0.Inject,
                args: [SEARCH_QUERY_SERVICE_TOKEN]
            }] }, { type: ɵngcc21.TranslationService }, { type: ɵngcc30.ConfigurableFocusTrapFactory }]; }, { filterChange: [{
            type: i0.Output
        }], col: [{
            type: i0.Input
        }], value: [{
            type: i0.Input
        }], widgetContainer: [{
            type: i0.ViewChild,
            args: [SearchWidgetContainerComponent]
        }], filterContainer: [{
            type: i0.ViewChild,
            args: ['filterContainer']
        }] }); })();
        return SearchFilterContainerComponent;
    }());
    SearchFilterContainerComponent.ctorParameters = function () { return [
        { type: SearchHeaderQueryBuilderService, decorators: [{ type: i0.Inject, args: [SEARCH_QUERY_SERVICE_TOKEN,] }] },
        { type: i1.TranslationService },
        { type: a11y.ConfigurableFocusTrapFactory }
    ]; };
    SearchFilterContainerComponent.propDecorators = {
        col: [{ type: i0.Input }],
        value: [{ type: i0.Input }],
        filterChange: [{ type: i0.Output }],
        widgetContainer: [{ type: i0.ViewChild, args: [SearchWidgetContainerComponent,] }],
        filterContainer: [{ type: i0.ViewChild, args: ['filterContainer',] }]
    };

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var SearchFormComponent = /** @class */ (function () {
        function SearchFormComponent(queryBuilder) {
            this.queryBuilder = queryBuilder;
            this.formChange = new i0.EventEmitter();
        }
        SearchFormComponent.prototype.onSelectionChange = function (form) {
            this.queryBuilder.updateSelectedConfiguration(form.index);
            this.formChange.emit(form);
        };
        SearchFormComponent.prototype.getSelected = function (forms) {
            var _a;
            return (_a = forms.find(function (form) { return form.selected; })) === null || _a === void 0 ? void 0 : _a.name;
        };
SearchFormComponent.ɵfac = function SearchFormComponent_Factory(t) { return new (t || SearchFormComponent)(ɵngcc0.ɵɵdirectiveInject(SEARCH_QUERY_SERVICE_TOKEN)); };
SearchFormComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: SearchFormComponent, selectors: [["adf-search-form"]], outputs: { formChange: "formChange" }, decls: 2, vars: 3, consts: [[4, "ngIf"], ["disableRipple", "", "mat-button", "", 1, "adf-search-form", 3, "title"], [1, "adf-search-form-title"], ["disableRipple", "", "mat-button", "", 1, "adf-search-form", 3, "matMenuTriggerFor", "title", "matMenuTriggerRestoreFocus"], ["menuTrigger", "matMenuTrigger"], [1, "adf-search-form-icon"], ["backdropClass", "adf-search-form-menu"], ["menu", "matMenu"], ["mat-menu-item", "", 3, "click", 4, "ngFor", "ngForOf"], ["mat-menu-item", "", 3, "click"]], template: function SearchFormComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, SearchFormComponent_ng_container_0_Template, 3, 2, "ng-container", 0);
        ɵngcc0.ɵɵpipe(1, "async");
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngIf", ɵngcc0.ɵɵpipeBind1(1, 1, ctx.queryBuilder.searchForms));
    } }, directives: [ɵngcc23.NgIf, ɵngcc1.MatButton, ɵngcc11.MatMenuTrigger, ɵngcc4.MatIcon, ɵngcc11._MatMenu, ɵngcc23.NgForOf, ɵngcc11.MatMenuItem], pipes: [ɵngcc23.AsyncPipe, ɵngcc25.TranslatePipe], styles: [".adf-search-form.mat-button{align-content:center;height:35px;max-width:190px;min-width:190px;overflow:hidden}.adf-search-form.mat-button .mat-button-wrapper{align-items:center;display:flex}.adf-search-form-title{font-size:14px;font-weight:700;line-height:24px;max-width:120px;min-width:120px;overflow:hidden;padding-right:12px;text-align:left;text-overflow:ellipsis}.adf-search-form-icon{border:2px solid transparent;border-radius:6px;transition:border .5s ease-out}.adf-search-form-icon-selected{border-color:var(--theme-accent-color)}.adf-search-form-menu+* .mat-menu-panel{border-radius:6px;box-shadow:0 3px 1px -2px rgba(0,0,0,.2),0 2px 2px 0 rgba(0,0,0,.14),0 1px 5px 0 rgba(0,0,0,.12)}.adf-search-form-menu+* .mat-menu-panel .mat-menu-content{padding:0}"], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SearchFormComponent, [{
        type: i0.Component,
        args: [{
                selector: 'adf-search-form',
                template: "<ng-container *ngIf=\"queryBuilder.searchForms | async as forms\">\n\n    <ng-container *ngIf=\"forms.length === 1\">\n        <button class=\"adf-search-form\" disableRipple mat-button [title]=\"getSelected(forms) | translate\">\n            <span class=\"adf-search-form-title\">\n                    {{ getSelected(forms) | translate }}\n            </span>\n        </button>\n    </ng-container>\n\n    <ng-container  *ngIf=\"forms.length > 1\">\n        <button class=\"adf-search-form\"\n                [matMenuTriggerFor]=\"menu\"\n                #menuTrigger=\"matMenuTrigger\"\n                disableRipple\n                mat-button\n                [title]=\"getSelected(forms) | translate\"\n                [matMenuTriggerRestoreFocus]=\"true\">\n\n            <span class=\"adf-search-form-title\" >\n                    {{ getSelected(forms) | translate }}\n            </span>\n\n            <mat-icon [class.adf-search-form-icon-selected]=\"menuTrigger.menuOpen\" class=\"adf-search-form-icon\">expand_more</mat-icon>\n        </button>\n\n        <mat-menu #menu=\"matMenu\" backdropClass=\"adf-search-form-menu\">\n            <button mat-menu-item *ngFor=\"let form of forms\" (click)=\"onSelectionChange(form)\">\n                {{form.name | translate}}\n            </button>\n        </mat-menu>\n    </ng-container>\n</ng-container>\n",
                encapsulation: i0.ViewEncapsulation.None,
                styles: [".adf-search-form.mat-button{align-content:center;height:35px;max-width:190px;min-width:190px;overflow:hidden}.adf-search-form.mat-button .mat-button-wrapper{align-items:center;display:flex}.adf-search-form-title{font-size:14px;font-weight:700;line-height:24px;max-width:120px;min-width:120px;overflow:hidden;padding-right:12px;text-align:left;text-overflow:ellipsis}.adf-search-form-icon{border:2px solid transparent;border-radius:6px;transition:border .5s ease-out}.adf-search-form-icon-selected{border-color:var(--theme-accent-color)}.adf-search-form-menu+* .mat-menu-panel{border-radius:6px;box-shadow:0 3px 1px -2px rgba(0,0,0,.2),0 2px 2px 0 rgba(0,0,0,.14),0 1px 5px 0 rgba(0,0,0,.12)}.adf-search-form-menu+* .mat-menu-panel .mat-menu-content{padding:0}"]
            }]
    }], function () { return [{ type: SearchQueryBuilderService, decorators: [{
                type: i0.Inject,
                args: [SEARCH_QUERY_SERVICE_TOKEN]
            }] }]; }, { formChange: [{
            type: i0.Output
        }] }); })();
        return SearchFormComponent;
    }());
    SearchFormComponent.ctorParameters = function () { return [
        { type: SearchQueryBuilderService, decorators: [{ type: i0.Inject, args: [SEARCH_QUERY_SERVICE_TOKEN,] }] }
    ]; };
    SearchFormComponent.propDecorators = {
        formChange: [{ type: i0.Output }]
    };

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var SearchFilterChipsComponent = /** @class */ (function () {
        function SearchFilterChipsComponent(queryBuilder, facetFiltersService) {
            this.queryBuilder = queryBuilder;
            this.facetFiltersService = facetFiltersService;
            this.showContextFacets = true;
        }
SearchFilterChipsComponent.ɵfac = function SearchFilterChipsComponent_Factory(t) { return new (t || SearchFilterChipsComponent)(ɵngcc0.ɵɵdirectiveInject(SEARCH_QUERY_SERVICE_TOKEN), ɵngcc0.ɵɵdirectiveInject(SearchFacetFiltersService)); };
SearchFilterChipsComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: SearchFilterChipsComponent, selectors: [["adf-search-filter-chips"]], inputs: { showContextFacets: "showContextFacets" }, decls: 3, vars: 2, consts: [["aria-orientation", "horizontal"], [4, "ngFor", "ngForOf"], [4, "ngIf"], [3, "category"], [3, "field"]], template: function SearchFilterChipsComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "mat-chip-list", 0);
        ɵngcc0.ɵɵtemplate(1, SearchFilterChipsComponent_ng_container_1_Template, 2, 1, "ng-container", 1);
        ɵngcc0.ɵɵtemplate(2, SearchFilterChipsComponent_ng_container_2_Template, 2, 1, "ng-container", 2);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.queryBuilder.categories);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.facetFiltersService.responseFacets && ctx.showContextFacets);
    } }, directives: function () { return [ɵngcc2.MatChipList, ɵngcc23.NgForOf, ɵngcc23.NgIf, SearchWidgetChipComponent, SearchFacetChipComponent]; }, styles: [".adf-search-filter-chip.mat-chip{background:var(--theme-unselected-chip-bg-color);border:2px solid transparent;max-width:320px;overflow:hidden;text-overflow:ellipsis;transition:border .5s ease-in-out}.adf-search-filter-chip.mat-chip:focus{color:unset}.adf-search-filter-chip.mat-chip.mat-standard-chip:after{background:var(--theme-unselected-chip-bg-color);color:unset}.adf-search-filter-chip.mat-chip.mat-chip-list-wrapper{margin:4px 6px}.adf-search-filter-chip.adf-search-toggle-chip{background:var(--theme-card-bg-color);border:2px solid var(--theme-accent-color)}.adf-search-filter-chip.adf-search-toggle-chip.mat-chip:after{background:unset}.adf-search-filter-chip .adf-search-filter-placeholder{color:var(--theme-disabled-text-color);flex:1 1 auto;white-space:nowrap}.adf-search-filter-chip .adf-search-filter-ellipsis{overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.adf-search-filter-chip .mat-icon{padding-left:5px;padding-top:5px}.adf-search-filter-chip-menu+* .cdk-overlay-pane .mat-menu-panel{border-radius:12px;box-shadow:0 3px 1px -2px rgba(0,0,0,.2),0 2px 2px 0 rgba(0,0,0,.14),0 1px 5px 0 rgba(0,0,0,.12);min-width:320px}"], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SearchFilterChipsComponent, [{
        type: i0.Component,
        args: [{
                selector: 'adf-search-filter-chips',
                template: "<mat-chip-list aria-orientation=\"horizontal\">\n    <ng-container *ngFor=\"let category of queryBuilder.categories\">\n        <adf-search-widget-chip [category]=\"category\"></adf-search-widget-chip>\n    </ng-container>\n\n    <ng-container *ngIf=\"facetFiltersService.responseFacets && showContextFacets\">\n        <ng-container *ngFor=\"let field of facetFiltersService.responseFacets\">\n            <adf-search-facet-chip [field]=\"field\" [attr.data-automation-id]=\"'search-fact-chip-' + field.field\" ></adf-search-facet-chip>\n        </ng-container>\n    </ng-container>\n</mat-chip-list>\n",
                encapsulation: i0.ViewEncapsulation.None,
                styles: [".adf-search-filter-chip.mat-chip{background:var(--theme-unselected-chip-bg-color);border:2px solid transparent;max-width:320px;overflow:hidden;text-overflow:ellipsis;transition:border .5s ease-in-out}.adf-search-filter-chip.mat-chip:focus{color:unset}.adf-search-filter-chip.mat-chip.mat-standard-chip:after{background:var(--theme-unselected-chip-bg-color);color:unset}.adf-search-filter-chip.mat-chip.mat-chip-list-wrapper{margin:4px 6px}.adf-search-filter-chip.adf-search-toggle-chip{background:var(--theme-card-bg-color);border:2px solid var(--theme-accent-color)}.adf-search-filter-chip.adf-search-toggle-chip.mat-chip:after{background:unset}.adf-search-filter-chip .adf-search-filter-placeholder{color:var(--theme-disabled-text-color);flex:1 1 auto;white-space:nowrap}.adf-search-filter-chip .adf-search-filter-ellipsis{overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.adf-search-filter-chip .mat-icon{padding-left:5px;padding-top:5px}.adf-search-filter-chip-menu+* .cdk-overlay-pane .mat-menu-panel{border-radius:12px;box-shadow:0 3px 1px -2px rgba(0,0,0,.2),0 2px 2px 0 rgba(0,0,0,.14),0 1px 5px 0 rgba(0,0,0,.12);min-width:320px}"]
            }]
    }], function () { return [{ type: SearchQueryBuilderService, decorators: [{
                type: i0.Inject,
                args: [SEARCH_QUERY_SERVICE_TOKEN]
            }] }, { type: SearchFacetFiltersService }]; }, { showContextFacets: [{
            type: i0.Input
        }] }); })();
        return SearchFilterChipsComponent;
    }());
    SearchFilterChipsComponent.ctorParameters = function () { return [
        { type: SearchQueryBuilderService, decorators: [{ type: i0.Inject, args: [SEARCH_QUERY_SERVICE_TOKEN,] }] },
        { type: SearchFacetFiltersService }
    ]; };
    SearchFilterChipsComponent.propDecorators = {
        showContextFacets: [{ type: i0.Input }]
    };

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var SearchFilterMenuCardComponent = /** @class */ (function () {
        function SearchFilterMenuCardComponent() {
            this.close = new i0.EventEmitter();
        }
        SearchFilterMenuCardComponent.prototype.onClose = function () {
            this.close.emit();
        };
SearchFilterMenuCardComponent.ɵfac = function SearchFilterMenuCardComponent_Factory(t) { return new (t || SearchFilterMenuCardComponent)(); };
SearchFilterMenuCardComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: SearchFilterMenuCardComponent, selectors: [["adf-search-filter-menu-card"]], outputs: { close: "close" }, ngContentSelectors: _c28, decls: 12, vars: 3, consts: [[1, "adf-search-filter-menu-card"], [1, "adf-search-filter-title"], [1, "adf-search-filter-title-action", 3, "matTooltip", "click"], [1, "adf-search-filter-content"], [1, "adf-search-filter-actions"]], template: function SearchFilterMenuCardComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef(_c27);
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "div", 1);
        ɵngcc0.ɵɵprojection(2);
        ɵngcc0.ɵɵelementStart(3, "mat-icon", 2);
        ɵngcc0.ɵɵlistener("click", function SearchFilterMenuCardComponent_Template_mat_icon_click_3_listener() { return ctx.onClose(); });
        ɵngcc0.ɵɵpipe(4, "translate");
        ɵngcc0.ɵɵtext(5, " close ");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(6, "mat-divider");
        ɵngcc0.ɵɵelementStart(7, "div", 3);
        ɵngcc0.ɵɵprojection(8, 1);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(9, "mat-divider");
        ɵngcc0.ɵɵelementStart(10, "div", 4);
        ɵngcc0.ɵɵprojection(11, 2);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("matTooltip", ɵngcc0.ɵɵpipeBind1(4, 1, "SEARCH.FILTER.BUTTONS.CLOSE"));
    } }, directives: [ɵngcc4.MatIcon, ɵngcc24.MatTooltip, ɵngcc31.MatDivider], pipes: [ɵngcc25.TranslatePipe], styles: [".adf-search-filter-menu-card{background:var(--theme-card-bg-color);color:var(--theme-text-fg-color)}.adf-search-filter-menu-card .adf-search-filter-title{flex:1 1 auto;font-size:14px;font-style:inherit;font-weight:700;height:32px;letter-spacing:.15px;line-height:24px;padding:16px 12px}.adf-search-filter-menu-card .adf-search-filter-title-action{float:right}.adf-search-filter-menu-card .adf-search-filter-content{overflow:auto;padding:16px 12px}.adf-search-filter-menu-card .adf-search-filter-actions{display:flex;justify-content:space-between;padding:16px 12px}.adf-search-filter-menu-card .adf-search-filter-actions .adf-search-action-button{border-radius:6px}"], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SearchFilterMenuCardComponent, [{
        type: i0.Component,
        args: [{
                selector: 'adf-search-filter-menu-card',
                template: "<div class=\"adf-search-filter-menu-card\">\n    <div class=\"adf-search-filter-title\">\n        <ng-content select=\"filter-title\"></ng-content>\n        <mat-icon class=\"adf-search-filter-title-action\"\n                  (click)=\"onClose()\"\n                  [matTooltip]=\"'SEARCH.FILTER.BUTTONS.CLOSE' | translate\">\n            close\n        </mat-icon>\n    </div>\n\n    <mat-divider></mat-divider>\n\n    <div class=\"adf-search-filter-content\">\n        <ng-content select=\"filter-content\"></ng-content>\n    </div>\n\n    <mat-divider></mat-divider>\n\n    <div class=\"adf-search-filter-actions\">\n        <ng-content select=\"filter-actions\"></ng-content>\n    </div>\n</div>\n",
                encapsulation: i0.ViewEncapsulation.None,
                styles: [".adf-search-filter-menu-card{background:var(--theme-card-bg-color);color:var(--theme-text-fg-color)}.adf-search-filter-menu-card .adf-search-filter-title{flex:1 1 auto;font-size:14px;font-style:inherit;font-weight:700;height:32px;letter-spacing:.15px;line-height:24px;padding:16px 12px}.adf-search-filter-menu-card .adf-search-filter-title-action{float:right}.adf-search-filter-menu-card .adf-search-filter-content{overflow:auto;padding:16px 12px}.adf-search-filter-menu-card .adf-search-filter-actions{display:flex;justify-content:space-between;padding:16px 12px}.adf-search-filter-menu-card .adf-search-filter-actions .adf-search-action-button{border-radius:6px}"]
            }]
    }], function () { return []; }, { close: [{
            type: i0.Output
        }] }); })();
        return SearchFilterMenuCardComponent;
    }());
    SearchFilterMenuCardComponent.propDecorators = {
        close: [{ type: i0.Output }]
    };

    var SearchFacetFieldComponent = /** @class */ (function () {
        function SearchFacetFieldComponent(queryBuilder, searchFacetFiltersService, translationService) {
            this.queryBuilder = queryBuilder;
            this.searchFacetFiltersService = searchFacetFiltersService;
            this.translationService = translationService;
            this.displayValue$ = new rxjs.Subject();
        }
        Object.defineProperty(SearchFacetFieldComponent.prototype, "canUpdateOnChange", {
            get: function () {
                var _a, _b;
                return (_b = (_a = this.field.settings) === null || _a === void 0 ? void 0 : _a.allowUpdateOnChange) !== null && _b !== void 0 ? _b : true;
            },
            enumerable: false,
            configurable: true
        });
        SearchFacetFieldComponent.prototype.onToggleBucket = function (event, field, bucket) {
            if (event && bucket) {
                if (event.checked) {
                    this.selectFacetBucket(field, bucket);
                }
                else {
                    this.unselectFacetBucket(field, bucket);
                }
            }
        };
        SearchFacetFieldComponent.prototype.selectFacetBucket = function (field, bucket) {
            if (bucket) {
                bucket.checked = true;
                this.queryBuilder.addUserFacetBucket(field, bucket);
                this.searchFacetFiltersService.updateSelectedBuckets();
                if (this.canUpdateOnChange) {
                    this.updateDisplayValue();
                    this.queryBuilder.update();
                }
            }
        };
        SearchFacetFieldComponent.prototype.unselectFacetBucket = function (field, bucket) {
            if (bucket) {
                bucket.checked = false;
                this.queryBuilder.removeUserFacetBucket(field, bucket);
                this.searchFacetFiltersService.updateSelectedBuckets();
                if (this.canUpdateOnChange) {
                    this.updateDisplayValue();
                    this.queryBuilder.update();
                }
            }
        };
        SearchFacetFieldComponent.prototype.canResetSelectedBuckets = function (field) {
            if (field && field.buckets) {
                return field.buckets.items.some(function (bucket) { return bucket.checked; });
            }
            return false;
        };
        SearchFacetFieldComponent.prototype.resetSelectedBuckets = function (field) {
            var e_1, _d;
            if (field && field.buckets) {
                try {
                    for (var _e = __values(field.buckets.items), _f = _e.next(); !_f.done; _f = _e.next()) {
                        var bucket = _f.value;
                        bucket.checked = false;
                        this.queryBuilder.removeUserFacetBucket(field, bucket);
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (_f && !_f.done && (_d = _e.return)) _d.call(_e);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
                this.searchFacetFiltersService.updateSelectedBuckets();
                if (this.canUpdateOnChange) {
                    this.queryBuilder.update();
                }
            }
        };
        SearchFacetFieldComponent.prototype.getBucketCountDisplay = function (bucket) {
            return bucket.count === null ? '' : "(" + bucket.count + ")";
        };
        SearchFacetFieldComponent.prototype.updateDisplayValue = function () {
            var _this = this;
            var _a, _b, _c;
            if (!((_a = this.field.buckets) === null || _a === void 0 ? void 0 : _a.items)) {
                this.displayValue$.next('');
            }
            else {
                var displayValue = (_c = (_b = this.field.buckets) === null || _b === void 0 ? void 0 : _b.items) === null || _c === void 0 ? void 0 : _c.filter(function (item) { return item.checked; }).map(function (item) { return _this.translationService.instant(item.display || item.label); }).join(', ');
                this.displayValue$.next(displayValue);
            }
        };
        SearchFacetFieldComponent.prototype.reset = function () {
            this.resetSelectedBuckets(this.field);
            this.updateDisplayValue();
            this.queryBuilder.update();
        };
        SearchFacetFieldComponent.prototype.submitValues = function () {
            this.updateDisplayValue();
            this.queryBuilder.update();
        };
SearchFacetFieldComponent.ɵfac = function SearchFacetFieldComponent_Factory(t) { return new (t || SearchFacetFieldComponent)(ɵngcc0.ɵɵdirectiveInject(SEARCH_QUERY_SERVICE_TOKEN), ɵngcc0.ɵɵdirectiveInject(SearchFacetFiltersService), ɵngcc0.ɵɵdirectiveInject(ɵngcc21.TranslationService)); };
SearchFacetFieldComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: SearchFacetFieldComponent, selectors: [["adf-search-facet-field"]], inputs: { field: "field" }, decls: 14, vars: 9, consts: [[1, "adf-search-filter-facet"], [1, "adf-facet-result-filter"], [1, "adf-facet-search-container"], ["mat-icon-button", "", "tabindex", "-1", 1, "adf-facet-search-icon"], ["floatLabel", "never", 1, "adf-facet-search-field"], ["matInput", "", 3, "placeholder", "ngModel", "ngModelChange"], ["mat-button", "", "matSuffix", "", "mat-icon-button", "", 3, "click", 4, "ngIf"], [1, "adf-checklist"], [3, "checked", "change", 4, "ngFor", "ngForOf"], ["class", "adf-facet-buttons", 4, "ngIf"], ["mat-button", "", "matSuffix", "", "mat-icon-button", "", 3, "click"], [3, "checked", "change"], ["matTooltipPosition", "right", 1, "adf-facet-label", 3, "matTooltip"], [1, "adf-facet-buttons"], ["mat-button", "", "color", "primary", 3, "click", 4, "ngIf"], ["mat-button", "", "color", "primary", 3, "click"], ["mat-icon-button", "", 3, "title", "click", 4, "ngIf"], ["mat-icon-button", "", 3, "title", "click"]], template: function SearchFacetFieldComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "div", 1);
        ɵngcc0.ɵɵelementStart(2, "div", 2);
        ɵngcc0.ɵɵelementStart(3, "button", 3);
        ɵngcc0.ɵɵelementStart(4, "mat-icon");
        ɵngcc0.ɵɵtext(5, "search");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(6, "mat-form-field", 4);
        ɵngcc0.ɵɵelementStart(7, "input", 5);
        ɵngcc0.ɵɵlistener("ngModelChange", function SearchFacetFieldComponent_Template_input_ngModelChange_7_listener($event) { return ctx.field.buckets.filterText = $event; });
        ɵngcc0.ɵɵpipe(8, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(9, SearchFacetFieldComponent_button_9_Template, 3, 0, "button", 6);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(10, "div", 7);
        ɵngcc0.ɵɵtemplate(11, SearchFacetFieldComponent_mat_checkbox_11_Template, 5, 10, "mat-checkbox", 8);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(12, SearchFacetFieldComponent_div_12_Template, 2, 1, "div", 9);
        ɵngcc0.ɵɵtemplate(13, SearchFacetFieldComponent_div_13_Template, 4, 3, "div", 9);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(7);
        ɵngcc0.ɵɵpropertyInterpolate("placeholder", ɵngcc0.ɵɵpipeBind1(8, 7, "SEARCH.FILTER.ACTIONS.SEARCH"));
        ɵngcc0.ɵɵproperty("ngModel", ctx.field.buckets.filterText);
        ɵngcc0.ɵɵattribute("data-automation-id", "facet-result-filter-" + ctx.field.label);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.field.buckets.filterText);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.field.buckets);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.field.buckets.fitsPage && !(ctx.field.settings == null ? null : ctx.field.settings.hideDefaultAction));
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.field.buckets.fitsPage);
    } }, directives: [ɵngcc1.MatButton, ɵngcc4.MatIcon, ɵngcc27.MatFormField, ɵngcc6.MatInput, ɵngcc26.DefaultValueAccessor, ɵngcc26.NgControlStatus, ɵngcc26.NgModel, ɵngcc23.NgIf, ɵngcc23.NgForOf, ɵngcc27.MatSuffix, ɵngcc14.MatCheckbox, ɵngcc24.MatTooltip], pipes: [ɵngcc25.TranslatePipe], styles: [".adf-search-filter-facet .adf-checklist{display:flex;flex-direction:column;max-height:180px;overflow-y:auto;padding:5px 0}.adf-search-filter-facet .adf-checklist .mat-checkbox-label{overflow:hidden;text-overflow:ellipsis;width:100%}.adf-search-filter-facet .adf-checklist .mat-checkbox-layout{width:100%}.adf-search-filter-facet .adf-checklist .adf-facet-label{overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.adf-search-filter-facet .adf-checklist .mat-checkbox{margin:5px}.adf-search-filter-facet .adf-checklist .mat-checkbox.mat-checkbox-checked .mat-checkbox-label{font-weight:700}.adf-search-filter-facet .adf-facet-result-filter{padding-bottom:16px}.adf-search-filter-facet .adf-facet-result-filter .adf-facet-search-container{background:var(--theme-background-color);border-radius:6px;display:flex;height:32px}.adf-search-filter-facet .adf-facet-result-filter .adf-facet-search-container .adf-facet-search-icon{margin-top:-4px;width:27px}.adf-search-filter-facet .adf-facet-result-filter .adf-facet-search-container .adf-facet-search-icon .mat-icon{font-size:15px}.adf-search-filter-facet .adf-facet-result-filter .adf-facet-search-container .adf-facet-search-field{flex:1;font-size:14px;letter-spacing:.25px;line-height:24px;margin-top:-16px;padding:2px}.adf-search-filter-facet .adf-facet-result-filter .adf-facet-search-container .adf-facet-search-field .mat-form-field-underline{display:none}.adf-search-filter-facet .adf-facet-result-filter .adf-facet-search-container .adf-facet-search-field .mat-form-field-suffix{padding-right:1px}.adf-search-filter-facet .adf-facet-buttons{text-align:right}.adf-search-filter-facet .adf-facet-buttons .mat-button{text-transform:uppercase}.adf-search-filter-facet .adf-facet-buttons--topSpace{padding-top:15px}.adf-search-filter-facet .mat-checkbox-label,.adf-search-filter-facet .mat-radio-label{color:var(--theme-text-color)}"], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SearchFacetFieldComponent, [{
        type: i0.Component,
        args: [{
                selector: 'adf-search-facet-field',
                template: "<div class=\"adf-search-filter-facet\">\n    <div class=\"adf-facet-result-filter\">\n        <div class=\"adf-facet-search-container\">\n            <button mat-icon-button class=\"adf-facet-search-icon\" tabindex=\"-1\">\n                <mat-icon>search</mat-icon>\n            </button>\n            <mat-form-field class=\"adf-facet-search-field\" floatLabel=\"never\">\n                <input matInput placeholder=\"{{ 'SEARCH.FILTER.ACTIONS.SEARCH' | translate }}\"\n                       [attr.data-automation-id]=\"'facet-result-filter-'+field.label\" [(ngModel)]=\"field.buckets.filterText\">\n                <button *ngIf=\"field.buckets.filterText\" mat-button matSuffix mat-icon-button\n                        (click)=\"field.buckets.filterText = ''\">\n                    <mat-icon>close</mat-icon>\n                </button>\n            </mat-form-field>\n        </div>\n    </div>\n\n    <div class=\"adf-checklist\">\n        <mat-checkbox *ngFor=\"let bucket of field.buckets\" [checked]=\"bucket.checked\"\n            [attr.data-automation-id]=\"'checkbox-'+field.label+'-'+(bucket.display || bucket.label)\"\n            (change)=\"onToggleBucket($event, field, bucket)\">\n            <div matTooltip=\"{{ bucket.display || bucket.label | translate }} {{ getBucketCountDisplay(bucket) }}\"\n                matTooltipPosition=\"right\" class=\"adf-facet-label\">\n                {{ bucket.display || bucket.label | translate }} {{ getBucketCountDisplay(bucket) }}\n            </div>\n        </mat-checkbox>\n    </div>\n\n    <div class=\"adf-facet-buttons\" *ngIf=\"field.buckets.fitsPage && !field.settings?.hideDefaultAction\">\n        <button *ngIf=\"canResetSelectedBuckets(field)\" mat-button color=\"primary\" (click)=\"resetSelectedBuckets(field)\">\n            {{ 'SEARCH.FILTER.ACTIONS.CLEAR-ALL' | translate }}\n        </button>\n    </div>\n\n    <div class=\"adf-facet-buttons\" *ngIf=\"!field.buckets.fitsPage\">\n        <button mat-icon-button *ngIf=\"canResetSelectedBuckets(field)\"\n            title=\"{{ 'SEARCH.FILTER.ACTIONS.CLEAR-ALL' | translate }}\" (click)=\"resetSelectedBuckets(field)\">\n            <mat-icon>clear</mat-icon>\n        </button>\n        <button mat-icon-button *ngIf=\"field.buckets.canShowLessItems\" (click)=\"field.buckets.showLessItems()\"\n            title=\"{{ 'SEARCH.FILTER.ACTIONS.SHOW-LESS' | translate }}\">\n            <mat-icon>keyboard_arrow_up</mat-icon>\n        </button>\n        <button mat-icon-button *ngIf=\"field.buckets.canShowMoreItems\" (click)=\"field.buckets.showMoreItems()\"\n            title=\"{{ 'SEARCH.FILTER.ACTIONS.SHOW-MORE' | translate }}\">\n            <mat-icon>keyboard_arrow_down</mat-icon>\n        </button>\n    </div>\n</div>\n",
                encapsulation: i0.ViewEncapsulation.None,
                styles: [".adf-search-filter-facet .adf-checklist{display:flex;flex-direction:column;max-height:180px;overflow-y:auto;padding:5px 0}.adf-search-filter-facet .adf-checklist .mat-checkbox-label{overflow:hidden;text-overflow:ellipsis;width:100%}.adf-search-filter-facet .adf-checklist .mat-checkbox-layout{width:100%}.adf-search-filter-facet .adf-checklist .adf-facet-label{overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.adf-search-filter-facet .adf-checklist .mat-checkbox{margin:5px}.adf-search-filter-facet .adf-checklist .mat-checkbox.mat-checkbox-checked .mat-checkbox-label{font-weight:700}.adf-search-filter-facet .adf-facet-result-filter{padding-bottom:16px}.adf-search-filter-facet .adf-facet-result-filter .adf-facet-search-container{background:var(--theme-background-color);border-radius:6px;display:flex;height:32px}.adf-search-filter-facet .adf-facet-result-filter .adf-facet-search-container .adf-facet-search-icon{margin-top:-4px;width:27px}.adf-search-filter-facet .adf-facet-result-filter .adf-facet-search-container .adf-facet-search-icon .mat-icon{font-size:15px}.adf-search-filter-facet .adf-facet-result-filter .adf-facet-search-container .adf-facet-search-field{flex:1;font-size:14px;letter-spacing:.25px;line-height:24px;margin-top:-16px;padding:2px}.adf-search-filter-facet .adf-facet-result-filter .adf-facet-search-container .adf-facet-search-field .mat-form-field-underline{display:none}.adf-search-filter-facet .adf-facet-result-filter .adf-facet-search-container .adf-facet-search-field .mat-form-field-suffix{padding-right:1px}.adf-search-filter-facet .adf-facet-buttons{text-align:right}.adf-search-filter-facet .adf-facet-buttons .mat-button{text-transform:uppercase}.adf-search-filter-facet .adf-facet-buttons--topSpace{padding-top:15px}.adf-search-filter-facet .mat-checkbox-label,.adf-search-filter-facet .mat-radio-label{color:var(--theme-text-color)}"]
            }]
    }], function () { return [{ type: SearchQueryBuilderService, decorators: [{
                type: i0.Inject,
                args: [SEARCH_QUERY_SERVICE_TOKEN]
            }] }, { type: SearchFacetFiltersService }, { type: ɵngcc21.TranslationService }]; }, { field: [{
            type: i0.Input
        }] }); })();
        return SearchFacetFieldComponent;
    }());
    SearchFacetFieldComponent.ctorParameters = function () { return [
        { type: SearchQueryBuilderService, decorators: [{ type: i0.Inject, args: [SEARCH_QUERY_SERVICE_TOKEN,] }] },
        { type: SearchFacetFiltersService },
        { type: i1.TranslationService }
    ]; };
    SearchFacetFieldComponent.propDecorators = {
        field: [{ type: i0.Input }]
    };

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var SearchWidgetChipComponent = /** @class */ (function () {
        function SearchWidgetChipComponent(focusTrapFactory) {
            this.focusTrapFactory = focusTrapFactory;
        }
        SearchWidgetChipComponent.prototype.onMenuOpen = function () {
            if (this.menuContainer && !this.focusTrap) {
                this.focusTrap = this.focusTrapFactory.create(this.menuContainer.nativeElement);
                this.focusTrap.focusInitialElement();
            }
        };
        SearchWidgetChipComponent.prototype.onClosed = function () {
            this.focusTrap.destroy();
            this.focusTrap = null;
        };
        SearchWidgetChipComponent.prototype.onRemove = function () {
            this.widgetContainerComponent.resetInnerWidget();
            this.menuTrigger.closeMenu();
        };
        SearchWidgetChipComponent.prototype.onApply = function () {
            this.widgetContainerComponent.applyInnerWidget();
            this.menuTrigger.closeMenu();
        };
SearchWidgetChipComponent.ɵfac = function SearchWidgetChipComponent_Factory(t) { return new (t || SearchWidgetChipComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc30.ConfigurableFocusTrapFactory)); };
SearchWidgetChipComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: SearchWidgetChipComponent, selectors: [["adf-search-widget-chip"]], viewQuery: function SearchWidgetChipComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c29, true);
        ɵngcc0.ɵɵviewQuery(_c30, true);
        ɵngcc0.ɵɵviewQuery(SearchWidgetContainerComponent, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.menuContainer = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.menuTrigger = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.widgetContainerComponent = _t.first);
    } }, inputs: { category: "category" }, decls: 33, vars: 32, consts: [["disableRipple", "", 1, "adf-search-filter-chip", 3, "matMenuTriggerFor", "onMenuOpen"], ["menuTrigger", "matMenuTrigger"], [1, "adf-search-filter-placeholder"], [1, "adf-search-filter-ellipsis"], [4, "ngIf"], ["class", "adf-search-filter-ellipsis", 4, "ngIf"], ["backdropClass", "adf-search-filter-chip-menu", 3, "closed"], ["menu", "matMenu"], ["menuContainer", ""], [3, "click", "keydown.tab", "close"], ["ngProjectAs", "filter-title", 5, ["filter-title"]], ["ngProjectAs", "filter-content", 5, ["filter-content"]], [3, "id", "selector", "settings"], ["widget", ""], ["ngProjectAs", "filter-actions", 5, ["filter-actions"]], ["mat-flat-button", "", "color", "accent", "id", "cancel-filter-button", 1, "adf-search-action-button", 3, "click"], ["mat-flat-button", "", "color", "primary", "id", "apply-filter-button", 1, "adf-search-action-button", 3, "click"]], template: function SearchWidgetChipComponent_Template(rf, ctx) { if (rf & 1) {
        var _r8 = ɵngcc0.ɵɵgetCurrentView();
        ɵngcc0.ɵɵelementStart(0, "mat-chip", 0, 1);
        ɵngcc0.ɵɵlistener("onMenuOpen", function SearchWidgetChipComponent_Template_mat_chip_onMenuOpen_0_listener() { return ctx.onMenuOpen(); });
        ɵngcc0.ɵɵpipe(2, "async");
        ɵngcc0.ɵɵpipe(3, "async");
        ɵngcc0.ɵɵelementStart(4, "span", 2);
        ɵngcc0.ɵɵelementStart(5, "span", 3);
        ɵngcc0.ɵɵtext(6);
        ɵngcc0.ɵɵpipe(7, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(8, SearchWidgetChipComponent_ng_container_8_Template, 2, 0, "ng-container", 4);
        ɵngcc0.ɵɵpipe(9, "async");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(10, SearchWidgetChipComponent_span_10_Template, 3, 3, "span", 5);
        ɵngcc0.ɵɵpipe(11, "async");
        ɵngcc0.ɵɵelementStart(12, "mat-icon");
        ɵngcc0.ɵɵtext(13, "keyboard_arrow_down");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(14, "mat-menu", 6, 7);
        ɵngcc0.ɵɵlistener("closed", function SearchWidgetChipComponent_Template_mat_menu_closed_14_listener() { return ctx.onClosed(); });
        ɵngcc0.ɵɵelementStart(16, "div", null, 8);
        ɵngcc0.ɵɵelementStart(18, "adf-search-filter-menu-card", 9);
        ɵngcc0.ɵɵlistener("click", function SearchWidgetChipComponent_Template_adf_search_filter_menu_card_click_18_listener($event) { return $event.stopPropagation(); })("keydown.tab", function SearchWidgetChipComponent_Template_adf_search_filter_menu_card_keydown_tab_18_listener($event) { return $event.stopPropagation(); })("close", function SearchWidgetChipComponent_Template_adf_search_filter_menu_card_close_18_listener() { ɵngcc0.ɵɵrestoreView(_r8); var _r0 = ɵngcc0.ɵɵreference(1); return _r0.closeMenu(); });
        ɵngcc0.ɵɵelementContainerStart(19, 10);
        ɵngcc0.ɵɵtext(20);
        ɵngcc0.ɵɵpipe(21, "translate");
        ɵngcc0.ɵɵtemplate(22, SearchWidgetChipComponent_ng_container_22_Template, 2, 1, "ng-container", 4);
        ɵngcc0.ɵɵelementContainerEnd();
        ɵngcc0.ɵɵelementContainerStart(23, 11);
        ɵngcc0.ɵɵelement(24, "adf-search-widget-container", 12, 13);
        ɵngcc0.ɵɵelementContainerEnd();
        ɵngcc0.ɵɵelementContainerStart(26, 14);
        ɵngcc0.ɵɵelementStart(27, "button", 15);
        ɵngcc0.ɵɵlistener("click", function SearchWidgetChipComponent_Template_button_click_27_listener() { return ctx.onRemove(); });
        ɵngcc0.ɵɵtext(28);
        ɵngcc0.ɵɵpipe(29, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(30, "button", 16);
        ɵngcc0.ɵɵlistener("click", function SearchWidgetChipComponent_Template_button_click_30_listener() { return ctx.onApply(); });
        ɵngcc0.ɵɵtext(31);
        ɵngcc0.ɵɵpipe(32, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementContainerEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        var _r0 = ɵngcc0.ɵɵreference(1);
        var _r3 = ɵngcc0.ɵɵreference(15);
        var _r6 = ɵngcc0.ɵɵreference(25);
        ɵngcc0.ɵɵclassProp("adf-search-toggle-chip", ɵngcc0.ɵɵpipeBind1(2, 16, _r6.getDisplayValue()) || _r0.menuOpen);
        ɵngcc0.ɵɵproperty("matMenuTriggerFor", _r3);
        ɵngcc0.ɵɵattribute("data-automation-id", "search-filter-chip-" + ctx.category.name)("title", ɵngcc0.ɵɵpipeBind1(3, 18, _r6.getDisplayValue()));
        ɵngcc0.ɵɵadvance(6);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(7, 20, ctx.category.name));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ɵngcc0.ɵɵpipeBind1(9, 22, _r6.getDisplayValue()));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ɵngcc0.ɵɵpipeBind1(11, 24, _r6.getDisplayValue()));
        ɵngcc0.ɵɵadvance(6);
        ɵngcc0.ɵɵattribute("data-automation-id", "search-field-" + ctx.category.name);
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(21, 26, ctx.category.name), " ");
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.category.component.settings.unit);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("id", ctx.category.id)("selector", ctx.category.component.selector)("settings", ctx.category.component.settings);
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(29, 28, "SEARCH.FILTER.BUTTONS.REMOVE"), " ");
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(32, 30, "SEARCH.FILTER.BUTTONS.APPLY"), " ");
    } }, directives: [ɵngcc2.MatChip, ɵngcc11.MatMenuTrigger, ɵngcc23.NgIf, ɵngcc4.MatIcon, ɵngcc11._MatMenu, SearchFilterMenuCardComponent, SearchWidgetContainerComponent, ɵngcc1.MatButton], pipes: [ɵngcc23.AsyncPipe, ɵngcc25.TranslatePipe], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SearchWidgetChipComponent, [{
        type: i0.Component,
        args: [{
                selector: 'adf-search-widget-chip',
                template: "<mat-chip [attr.data-automation-id]=\"'search-filter-chip-' + category.name\"\n          disableRipple\n          class=\"adf-search-filter-chip\"\n          [class.adf-search-toggle-chip]=\"(widget.getDisplayValue() | async) || menuTrigger.menuOpen\"\n          [matMenuTriggerFor]=\"menu\"\n          (onMenuOpen)=\"onMenuOpen()\"\n          [attr.title]=\"widget.getDisplayValue() | async\"\n          #menuTrigger=\"matMenuTrigger\">\n    <span class=\"adf-search-filter-placeholder\">\n        <span class=\"adf-search-filter-ellipsis\">{{ category.name | translate }}</span>\n        <ng-container *ngIf=\"widget.getDisplayValue() | async\">:</ng-container>\n    </span>\n    <span class=\"adf-search-filter-ellipsis\" *ngIf=\"widget.getDisplayValue() | async as displayValue\">\n        &nbsp;{{ displayValue | translate }}\n    </span>\n    <mat-icon>keyboard_arrow_down</mat-icon>\n</mat-chip>\n\n<mat-menu #menu=\"matMenu\" backdropClass=\"adf-search-filter-chip-menu\" (closed)=\"onClosed()\">\n    <div #menuContainer [attr.data-automation-id]=\"'search-field-' + category.name\">\n        <adf-search-filter-menu-card (click)=\"$event.stopPropagation()\"\n                                     (keydown.tab)=\"$event.stopPropagation();\"\n                                     (close)=\"menuTrigger.closeMenu()\">\n\n            <ng-container ngProjectAs=\"filter-title\">\n                {{ category.name | translate }} <ng-container *ngIf=\"category.component.settings.unit\">({{category.component.settings.unit}})</ng-container>\n            </ng-container>\n\n            <ng-container ngProjectAs=\"filter-content\">\n                <adf-search-widget-container #widget\n                                             [id]=\"category.id\"\n                                             [selector]=\"category.component.selector\"\n                                             [settings]=\"category.component.settings\">\n                </adf-search-widget-container>\n            </ng-container>\n\n            <ng-container ngProjectAs=\"filter-actions\">\n                <button mat-flat-button class=\"adf-search-action-button\" color=\"accent\" (click)=\"onRemove()\" id=\"cancel-filter-button\">\n                    {{ 'SEARCH.FILTER.BUTTONS.REMOVE' | translate }}\n                </button>\n                <button mat-flat-button class=\"adf-search-action-button\" color=\"primary\" (click)=\"onApply()\" id=\"apply-filter-button\">\n                    {{ 'SEARCH.FILTER.BUTTONS.APPLY' | translate }}\n                </button>\n            </ng-container>\n        </adf-search-filter-menu-card>\n    </div>\n</mat-menu>\n",
                encapsulation: i0.ViewEncapsulation.None
            }]
    }], function () { return [{ type: ɵngcc30.ConfigurableFocusTrapFactory }]; }, { category: [{
            type: i0.Input
        }], menuContainer: [{
            type: i0.ViewChild,
            args: ['menuContainer', { static: false }]
        }], menuTrigger: [{
            type: i0.ViewChild,
            args: ['menuTrigger', { static: false }]
        }], widgetContainerComponent: [{
            type: i0.ViewChild,
            args: [SearchWidgetContainerComponent, { static: false }]
        }] }); })();
        return SearchWidgetChipComponent;
    }());
    SearchWidgetChipComponent.ctorParameters = function () { return [
        { type: a11y.ConfigurableFocusTrapFactory }
    ]; };
    SearchWidgetChipComponent.propDecorators = {
        category: [{ type: i0.Input }],
        menuContainer: [{ type: i0.ViewChild, args: ['menuContainer', { static: false },] }],
        menuTrigger: [{ type: i0.ViewChild, args: ['menuTrigger', { static: false },] }],
        widgetContainerComponent: [{ type: i0.ViewChild, args: [SearchWidgetContainerComponent, { static: false },] }]
    };

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var SearchFacetChipComponent = /** @class */ (function () {
        function SearchFacetChipComponent(focusTrapFactory) {
            this.focusTrapFactory = focusTrapFactory;
        }
        SearchFacetChipComponent.prototype.onMenuOpen = function () {
            if (this.menuContainer && !this.focusTrap) {
                this.focusTrap = this.focusTrapFactory.create(this.menuContainer.nativeElement);
                this.focusTrap.focusInitialElement();
            }
        };
        SearchFacetChipComponent.prototype.onClosed = function () {
            this.focusTrap.destroy();
            this.focusTrap = null;
        };
        SearchFacetChipComponent.prototype.onRemove = function () {
            this.facetFieldComponent.reset();
            this.menuTrigger.closeMenu();
        };
        SearchFacetChipComponent.prototype.onApply = function () {
            this.facetFieldComponent.submitValues();
            this.menuTrigger.closeMenu();
        };
SearchFacetChipComponent.ɵfac = function SearchFacetChipComponent_Factory(t) { return new (t || SearchFacetChipComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc30.ConfigurableFocusTrapFactory)); };
SearchFacetChipComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: SearchFacetChipComponent, selectors: [["adf-search-facet-chip"]], viewQuery: function SearchFacetChipComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c29, true);
        ɵngcc0.ɵɵviewQuery(_c30, true);
        ɵngcc0.ɵɵviewQuery(SearchFacetFieldComponent, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.menuContainer = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.menuTrigger = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.facetFieldComponent = _t.first);
    } }, inputs: { field: "field" }, decls: 32, vars: 29, consts: [["disableRipple", "", 1, "adf-search-filter-chip", 3, "matMenuTriggerFor", "onMenuOpen"], ["menuTrigger", "matMenuTrigger"], [1, "adf-search-filter-placeholder"], [1, "adf-search-filter-ellipsis"], [4, "ngIf"], ["class", "adf-search-filter-ellipsis", 4, "ngIf"], ["backdropClass", "adf-search-filter-chip-menu", 3, "closed"], ["menu", "matMenu"], ["menuContainer", ""], [3, "click", "keydown.tab", "close"], ["ngProjectAs", "filter-title", 5, ["filter-title"]], ["ngProjectAs", "filter-content", 5, ["filter-content"]], [3, "field"], ["facetField", ""], ["ngProjectAs", "filter-actions", 5, ["filter-actions"]], ["mat-flat-button", "", "color", "accent", "id", "cancel-filter-button", 1, "adf-search-action-button", 3, "click"], ["mat-flat-button", "", "color", "primary", "id", "apply-filter-button", 1, "adf-search-action-button", 3, "click"]], template: function SearchFacetChipComponent_Template(rf, ctx) { if (rf & 1) {
        var _r7 = ɵngcc0.ɵɵgetCurrentView();
        ɵngcc0.ɵɵelementStart(0, "mat-chip", 0, 1);
        ɵngcc0.ɵɵlistener("onMenuOpen", function SearchFacetChipComponent_Template_mat_chip_onMenuOpen_0_listener() { return ctx.onMenuOpen(); });
        ɵngcc0.ɵɵpipe(2, "async");
        ɵngcc0.ɵɵpipe(3, "async");
        ɵngcc0.ɵɵelementStart(4, "span", 2);
        ɵngcc0.ɵɵelementStart(5, "span", 3);
        ɵngcc0.ɵɵtext(6);
        ɵngcc0.ɵɵpipe(7, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(8, SearchFacetChipComponent_ng_container_8_Template, 2, 0, "ng-container", 4);
        ɵngcc0.ɵɵpipe(9, "async");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(10, SearchFacetChipComponent_span_10_Template, 3, 3, "span", 5);
        ɵngcc0.ɵɵpipe(11, "async");
        ɵngcc0.ɵɵelementStart(12, "mat-icon");
        ɵngcc0.ɵɵtext(13, "keyboard_arrow_down");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(14, "mat-menu", 6, 7);
        ɵngcc0.ɵɵlistener("closed", function SearchFacetChipComponent_Template_mat_menu_closed_14_listener() { return ctx.onClosed(); });
        ɵngcc0.ɵɵelementStart(16, "div", null, 8);
        ɵngcc0.ɵɵelementStart(18, "adf-search-filter-menu-card", 9);
        ɵngcc0.ɵɵlistener("click", function SearchFacetChipComponent_Template_adf_search_filter_menu_card_click_18_listener($event) { return $event.stopPropagation(); })("keydown.tab", function SearchFacetChipComponent_Template_adf_search_filter_menu_card_keydown_tab_18_listener($event) { return $event.stopPropagation(); })("close", function SearchFacetChipComponent_Template_adf_search_filter_menu_card_close_18_listener() { ɵngcc0.ɵɵrestoreView(_r7); var _r0 = ɵngcc0.ɵɵreference(1); return _r0.closeMenu(); });
        ɵngcc0.ɵɵelementContainerStart(19, 10);
        ɵngcc0.ɵɵtext(20);
        ɵngcc0.ɵɵpipe(21, "translate");
        ɵngcc0.ɵɵelementContainerEnd();
        ɵngcc0.ɵɵelementContainerStart(22, 11);
        ɵngcc0.ɵɵelement(23, "adf-search-facet-field", 12, 13);
        ɵngcc0.ɵɵelementContainerEnd();
        ɵngcc0.ɵɵelementContainerStart(25, 14);
        ɵngcc0.ɵɵelementStart(26, "button", 15);
        ɵngcc0.ɵɵlistener("click", function SearchFacetChipComponent_Template_button_click_26_listener() { return ctx.onRemove(); });
        ɵngcc0.ɵɵtext(27);
        ɵngcc0.ɵɵpipe(28, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(29, "button", 16);
        ɵngcc0.ɵɵlistener("click", function SearchFacetChipComponent_Template_button_click_29_listener() { return ctx.onApply(); });
        ɵngcc0.ɵɵtext(30);
        ɵngcc0.ɵɵpipe(31, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementContainerEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        var _r0 = ɵngcc0.ɵɵreference(1);
        var _r3 = ɵngcc0.ɵɵreference(15);
        var _r5 = ɵngcc0.ɵɵreference(24);
        ɵngcc0.ɵɵclassProp("adf-search-toggle-chip", ɵngcc0.ɵɵpipeBind1(2, 13, _r5.displayValue$) || _r0.menuOpen);
        ɵngcc0.ɵɵproperty("matMenuTriggerFor", _r3);
        ɵngcc0.ɵɵattribute("data-automation-id", "search-filter-chip-" + ctx.field.label)("title", ɵngcc0.ɵɵpipeBind1(3, 15, _r5.displayValue$));
        ɵngcc0.ɵɵadvance(6);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(7, 17, ctx.field.label));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ɵngcc0.ɵɵpipeBind1(9, 19, _r5.displayValue$));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ɵngcc0.ɵɵpipeBind1(11, 21, _r5.displayValue$));
        ɵngcc0.ɵɵadvance(6);
        ɵngcc0.ɵɵattribute("data-automation-id", "search-field-" + ctx.field.label);
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(21, 23, ctx.field.label), " ");
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("field", ctx.field);
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(28, 25, "SEARCH.FILTER.BUTTONS.REMOVE"), " ");
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(31, 27, "SEARCH.FILTER.BUTTONS.APPLY"), " ");
    } }, directives: [ɵngcc2.MatChip, ɵngcc11.MatMenuTrigger, ɵngcc23.NgIf, ɵngcc4.MatIcon, ɵngcc11._MatMenu, SearchFilterMenuCardComponent, SearchFacetFieldComponent, ɵngcc1.MatButton], pipes: [ɵngcc23.AsyncPipe, ɵngcc25.TranslatePipe], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SearchFacetChipComponent, [{
        type: i0.Component,
        args: [{
                selector: 'adf-search-facet-chip',
                template: "<mat-chip [attr.data-automation-id]=\"'search-filter-chip-' + field.label\"\n          disableRipple\n          class=\"adf-search-filter-chip\"\n          [class.adf-search-toggle-chip]=\"(facetField.displayValue$ | async) || menuTrigger.menuOpen\"\n          [matMenuTriggerFor]=\"menu\"\n          (onMenuOpen)=\"onMenuOpen()\"\n          [attr.title]=\"facetField.displayValue$ | async\"\n          #menuTrigger=\"matMenuTrigger\">\n\n    <span class=\"adf-search-filter-placeholder\">\n        <span class=\"adf-search-filter-ellipsis\">{{ field.label | translate }}</span>\n        <ng-container *ngIf=\"facetField.displayValue$ | async\">:</ng-container>\n    </span>\n\n    <span class=\"adf-search-filter-ellipsis\" *ngIf=\"facetField.displayValue$ | async as displayValue\">\n        &nbsp; {{ displayValue | translate }}\n    </span>\n    <mat-icon>keyboard_arrow_down</mat-icon>\n</mat-chip>\n\n<mat-menu #menu=\"matMenu\" backdropClass=\"adf-search-filter-chip-menu\" (closed)=\"onClosed()\">\n    <div #menuContainer [attr.data-automation-id]=\"'search-field-' + field.label\">\n        <adf-search-filter-menu-card (click)=\"$event.stopPropagation()\"\n                                     (keydown.tab)=\"$event.stopPropagation();\"\n                                     (close)=\"menuTrigger.closeMenu()\">\n            <ng-container ngProjectAs=\"filter-title\">\n                {{ field.label | translate }}\n            </ng-container>\n            <ng-container ngProjectAs=\"filter-content\">\n                <adf-search-facet-field [field]=\"field\" #facetField></adf-search-facet-field>\n            </ng-container>\n            <ng-container ngProjectAs=\"filter-actions\">\n                <button mat-flat-button class=\"adf-search-action-button\" color=\"accent\" (click)=\"onRemove()\" id=\"cancel-filter-button\">\n                    {{ 'SEARCH.FILTER.BUTTONS.REMOVE' | translate }}\n                </button>\n                <button mat-flat-button class=\"adf-search-action-button\" color=\"primary\" (click)=\"onApply()\" id=\"apply-filter-button\">\n                    {{ 'SEARCH.FILTER.BUTTONS.APPLY' | translate }}\n                </button>\n            </ng-container>\n        </adf-search-filter-menu-card>\n    </div>\n</mat-menu>\n",
                encapsulation: i0.ViewEncapsulation.None
            }]
    }], function () { return [{ type: ɵngcc30.ConfigurableFocusTrapFactory }]; }, { field: [{
            type: i0.Input
        }], menuContainer: [{
            type: i0.ViewChild,
            args: ['menuContainer', { static: false }]
        }], menuTrigger: [{
            type: i0.ViewChild,
            args: ['menuTrigger', { static: false }]
        }], facetFieldComponent: [{
            type: i0.ViewChild,
            args: [SearchFacetFieldComponent, { static: false }]
        }] }); })();
        return SearchFacetChipComponent;
    }());
    SearchFacetChipComponent.ctorParameters = function () { return [
        { type: a11y.ConfigurableFocusTrapFactory }
    ]; };
    SearchFacetChipComponent.propDecorators = {
        field: [{ type: i0.Input }],
        menuContainer: [{ type: i0.ViewChild, args: ['menuContainer', { static: false },] }],
        menuTrigger: [{ type: i0.ViewChild, args: ['menuTrigger', { static: false },] }],
        facetFieldComponent: [{ type: i0.ViewChild, args: [SearchFacetFieldComponent, { static: false },] }]
    };

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var ResetSearchDirective = /** @class */ (function () {
        function ResetSearchDirective(filterService) {
            this.filterService = filterService;
        }
        ResetSearchDirective.prototype.onClick = function () {
            this.filterService.reset();
        };
ResetSearchDirective.ɵfac = function ResetSearchDirective_Factory(t) { return new (t || ResetSearchDirective)(ɵngcc0.ɵɵdirectiveInject(SearchFacetFiltersService)); };
ResetSearchDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ResetSearchDirective, selectors: [["", "adf-reset-search", ""]], hostBindings: function ResetSearchDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function ResetSearchDirective_click_HostBindingHandler() { return ctx.onClick(); });
    } } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ResetSearchDirective, [{
        type: i0.Directive,
        args: [{
                selector: '[adf-reset-search]'
            }]
    }], function () { return [{ type: SearchFacetFiltersService }]; }, { onClick: [{
            type: i0.HostListener,
            args: ['click']
        }] }); })();
        return ResetSearchDirective;
    }());
    ResetSearchDirective.ctorParameters = function () { return [
        { type: SearchFacetFiltersService }
    ]; };
    ResetSearchDirective.propDecorators = {
        onClick: [{ type: i0.HostListener, args: ['click',] }]
    };

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var SearchModule = /** @class */ (function () {
        function SearchModule() {
        }
SearchModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: SearchModule });
SearchModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function SearchModule_Factory(t) { return new (t || SearchModule)(); }, providers: [
        { provide: SEARCH_QUERY_SERVICE_TOKEN, useExisting: SearchQueryBuilderService }
    ], imports: [[
            common.CommonModule,
            forms.FormsModule,
            forms.ReactiveFormsModule,
            MaterialModule,
            i1.CoreModule
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(SearchModule, { declarations: [SearchComponent, SearchControlComponent, EmptySearchResultComponent, SearchFilterComponent, SearchChipListComponent, SearchWidgetContainerComponent, SearchTextComponent, SearchRadioComponent, SearchSliderComponent, SearchNumberRangeComponent, SearchPanelComponent, SearchCheckListComponent, SearchDateRangeComponent, SearchDatetimeRangeComponent, SearchSortingPickerComponent, SearchFilterContainerComponent, SearchFormComponent, SearchFilterChipsComponent, SearchFilterMenuCardComponent, SearchFacetFieldComponent, SearchWidgetChipComponent, SearchFacetChipComponent, ResetSearchDirective], imports: [ɵngcc23.CommonModule, ɵngcc26.FormsModule, ɵngcc26.ReactiveFormsModule, MaterialModule, ɵngcc21.CoreModule], exports: [SearchComponent, SearchControlComponent, EmptySearchResultComponent, SearchFilterComponent, SearchChipListComponent, SearchWidgetContainerComponent, SearchTextComponent, SearchRadioComponent, SearchSliderComponent, SearchNumberRangeComponent, SearchPanelComponent, SearchCheckListComponent, SearchDateRangeComponent, SearchDatetimeRangeComponent, SearchSortingPickerComponent, SearchFilterContainerComponent, SearchFormComponent, SearchFilterChipsComponent, SearchFilterMenuCardComponent, SearchFacetFieldComponent, ResetSearchDirective] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SearchModule, [{
        type: i0.NgModule,
        args: [{
                imports: [
                    common.CommonModule,
                    forms.FormsModule,
                    forms.ReactiveFormsModule,
                    MaterialModule,
                    i1.CoreModule
                ],
                declarations: [
                    SearchComponent,
                    SearchControlComponent,
                    EmptySearchResultComponent,
                    SearchFilterComponent,
                    SearchChipListComponent,
                    SearchWidgetContainerComponent,
                    SearchTextComponent,
                    SearchRadioComponent,
                    SearchSliderComponent,
                    SearchNumberRangeComponent,
                    SearchPanelComponent,
                    SearchCheckListComponent,
                    SearchDateRangeComponent,
                    SearchDatetimeRangeComponent,
                    SearchSortingPickerComponent,
                    SearchFilterContainerComponent,
                    SearchFormComponent,
                    SearchFilterChipsComponent,
                    SearchFilterMenuCardComponent,
                    SearchFacetFieldComponent,
                    SearchWidgetChipComponent,
                    SearchFacetChipComponent,
                    ResetSearchDirective
                ],
                exports: [
                    SearchComponent,
                    SearchControlComponent,
                    EmptySearchResultComponent,
                    SearchFilterComponent,
                    SearchChipListComponent,
                    SearchWidgetContainerComponent,
                    SearchTextComponent,
                    SearchRadioComponent,
                    SearchSliderComponent,
                    SearchNumberRangeComponent,
                    SearchPanelComponent,
                    SearchCheckListComponent,
                    SearchDateRangeComponent,
                    SearchDatetimeRangeComponent,
                    SearchSortingPickerComponent,
                    SearchFilterContainerComponent,
                    SearchFormComponent,
                    SearchFilterChipsComponent,
                    SearchFilterMenuCardComponent,
                    SearchFacetFieldComponent,
                    ResetSearchDirective
                ],
                providers: [
                    { provide: SEARCH_QUERY_SERVICE_TOKEN, useExisting: SearchQueryBuilderService }
                ]
            }]
    }], function () { return []; }, null); })();
        return SearchModule;
    }());

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var DocumentListModule = /** @class */ (function () {
        function DocumentListModule() {
        }
DocumentListModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: DocumentListModule });
DocumentListModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function DocumentListModule_Factory(t) { return new (t || DocumentListModule)(); }, imports: [[
            i1.CoreModule,
            common.CommonModule,
            flexLayout.FlexLayoutModule,
            MaterialModule,
            UploadModule,
            i1.EditJsonDialogModule,
            SearchModule
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DocumentListModule, { declarations: [DocumentListComponent, TrashcanNameColumnComponent, LibraryStatusColumnComponent, LibraryRoleColumnComponent, LibraryNameColumnComponent, NameColumnComponent, ContentActionComponent, ContentActionListComponent, FilterHeaderComponent], imports: [ɵngcc21.CoreModule, ɵngcc23.CommonModule, ɵngcc32.FlexLayoutModule, MaterialModule, UploadModule, ɵngcc21.EditJsonDialogModule, SearchModule], exports: [DocumentListComponent, TrashcanNameColumnComponent, LibraryStatusColumnComponent, LibraryRoleColumnComponent, LibraryNameColumnComponent, NameColumnComponent, ContentActionComponent, ContentActionListComponent, FilterHeaderComponent] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DocumentListModule, [{
        type: i0.NgModule,
        args: [{
                imports: [
                    i1.CoreModule,
                    common.CommonModule,
                    flexLayout.FlexLayoutModule,
                    MaterialModule,
                    UploadModule,
                    i1.EditJsonDialogModule,
                    SearchModule
                ],
                declarations: [
                    DocumentListComponent,
                    TrashcanNameColumnComponent,
                    LibraryStatusColumnComponent,
                    LibraryRoleColumnComponent,
                    LibraryNameColumnComponent,
                    NameColumnComponent,
                    ContentActionComponent,
                    ContentActionListComponent,
                    FilterHeaderComponent
                ],
                exports: [
                    DocumentListComponent,
                    TrashcanNameColumnComponent,
                    LibraryStatusColumnComponent,
                    LibraryRoleColumnComponent,
                    LibraryNameColumnComponent,
                    NameColumnComponent,
                    ContentActionComponent,
                    ContentActionListComponent,
                    FilterHeaderComponent
                ]
            }]
    }], function () { return []; }, null); })();
        return DocumentListModule;
    }());

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    (function (Relations) {
        Relations["Members"] = "members";
        Relations["Containers"] = "containers";
    })(exports.Relations || (exports.Relations = {}));
    var DropdownSitesComponent = /** @class */ (function () {
        function DropdownSitesComponent(sitesService, logService) {
            this.sitesService = sitesService;
            this.logService = logService;
            this.hideMyFiles = false;
            this.siteList = null;
            this.value = null;
            this.placeholder = 'DROPDOWN.PLACEHOLDER_LABEL';
            this.change = new i0.EventEmitter();
            this.loading = true;
            this.skipCount = 0;
            this.selected = null;
            this.MY_FILES_VALUE = '-my-';
        }
        DropdownSitesComponent.prototype.ngOnInit = function () {
            if (!this.siteList) {
                this.loadSiteList();
            }
        };
        DropdownSitesComponent.prototype.loadAllOnScroll = function () {
            if (this.isInfiniteScrollingEnabled()) {
                this.loading = true;
                this.loadSiteList();
            }
        };
        DropdownSitesComponent.prototype.selectedSite = function (event) {
            this.change.emit(event.value);
        };
        DropdownSitesComponent.prototype.loadSiteList = function () {
            var _this = this;
            var extendedOptions = {
                skipCount: this.skipCount,
                maxItems: i1.InfiniteSelectScrollDirective.MAX_ITEMS
            };
            this.skipCount += i1.InfiniteSelectScrollDirective.MAX_ITEMS;
            if (this.relations) {
                extendedOptions.relations = [this.relations];
            }
            this.sitesService.getSites(extendedOptions).subscribe(function (sitePaging) {
                if (!_this.siteList) {
                    _this.siteList = _this.relations === exports.Relations.Members ? _this.filteredResultsByMember(sitePaging) : sitePaging;
                    if (!_this.hideMyFiles) {
                        var siteEntry = new jsApi.SiteEntry({
                            entry: {
                                id: _this.MY_FILES_VALUE,
                                guid: _this.MY_FILES_VALUE,
                                title: 'DROPDOWN.MY_FILES_OPTION'
                            }
                        });
                        _this.siteList.list.entries.unshift(siteEntry);
                        if (!_this.value) {
                            _this.value = _this.MY_FILES_VALUE;
                        }
                    }
                }
                else {
                    var siteList = _this.relations === exports.Relations.Members ? _this.filteredResultsByMember(sitePaging) : sitePaging;
                    _this.siteList.list.entries = _this.siteList.list.entries.concat(siteList.list.entries);
                    _this.siteList.list.pagination = sitePaging.list.pagination;
                }
                _this.selected = _this.siteList.list.entries.find(function (site) { return site.entry.id === _this.value; });
                if (_this.value && !_this.selected && _this.siteListHasMoreItems()) {
                    _this.loadSiteList();
                }
                _this.loading = false;
            }, function (error) {
                _this.logService.error(error);
            });
        };
        DropdownSitesComponent.prototype.showLoading = function () {
            return this.loading && this.siteListHasMoreItems();
        };
        DropdownSitesComponent.prototype.isInfiniteScrollingEnabled = function () {
            return !this.loading && this.siteListHasMoreItems();
        };
        DropdownSitesComponent.prototype.siteListHasMoreItems = function () {
            return this.siteList && this.siteList.list.pagination && this.siteList.list.pagination.hasMoreItems;
        };
        DropdownSitesComponent.prototype.filteredResultsByMember = function (sites) {
            var _this = this;
            var loggedUserName = this.sitesService.getEcmCurrentLoggedUserName();
            sites.list.entries = sites.list.entries.filter(function (site) { return _this.isCurrentUserMember(site, loggedUserName); });
            return sites;
        };
        DropdownSitesComponent.prototype.isCurrentUserMember = function (site, loggedUserName) {
            return site.entry.visibility === 'PUBLIC' ||
                !!site.relations.members.list.entries.find(function (member) {
                    return member.entry.id.toLowerCase() === loggedUserName.toLowerCase();
                });
        };
DropdownSitesComponent.ɵfac = function DropdownSitesComponent_Factory(t) { return new (t || DropdownSitesComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc21.SitesService), ɵngcc0.ɵɵdirectiveInject(ɵngcc21.LogService)); };
DropdownSitesComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: DropdownSitesComponent, selectors: [["adf-sites-dropdown"]], hostAttrs: [1, "adf-sites-dropdown"], inputs: { hideMyFiles: "hideMyFiles", siteList: "siteList", value: "value", placeholder: "placeholder", relations: "relations" }, outputs: { change: "change" }, decls: 7, vars: 6, consts: [["id", "site-dropdown-container", 1, "adf-site-dropdown-container"], ["adf-infinite-select-scroll", "", "data-automation-id", "site-my-files-option", "id", "site-dropdown", "floatPlaceholder", "never", 1, "adf-site-dropdown-list-element", 3, "placeholder", "value", "scrollEnd", "valueChange", "selectionChange"], ["siteSelect", ""], [3, "value", 4, "ngFor", "ngForOf"], ["disabled", "true", "data-automation-id", "site-loading", 4, "ngIf"], [3, "value"], ["disabled", "true", "data-automation-id", "site-loading"]], template: function DropdownSitesComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "mat-form-field");
        ɵngcc0.ɵɵelementStart(2, "mat-select", 1, 2);
        ɵngcc0.ɵɵlistener("scrollEnd", function DropdownSitesComponent_Template_mat_select_scrollEnd_2_listener() { return ctx.loadAllOnScroll(); })("valueChange", function DropdownSitesComponent_Template_mat_select_valueChange_2_listener($event) { return ctx.selected = $event; })("selectionChange", function DropdownSitesComponent_Template_mat_select_selectionChange_2_listener($event) { return ctx.selectedSite($event); });
        ɵngcc0.ɵɵpipe(4, "translate");
        ɵngcc0.ɵɵtemplate(5, DropdownSitesComponent_mat_option_5_Template, 3, 4, "mat-option", 3);
        ɵngcc0.ɵɵtemplate(6, DropdownSitesComponent_mat_option_6_Template, 3, 3, "mat-option", 4);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵpropertyInterpolate("placeholder", ɵngcc0.ɵɵpipeBind1(4, 4, ctx.placeholder));
        ɵngcc0.ɵɵproperty("value", ctx.selected);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.siteList == null ? null : ctx.siteList.list.entries);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.showLoading());
    } }, directives: [ɵngcc27.MatFormField, ɵngcc13.MatSelect, ɵngcc21.InfiniteSelectScrollDirective, ɵngcc23.NgForOf, ɵngcc23.NgIf, ɵngcc10.MatOption], pipes: [ɵngcc25.TranslatePipe], styles: [".adf-sites-dropdown.adf-full-width .mat-form-field{width:100%}"], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DropdownSitesComponent, [{
        type: i0.Component,
        args: [{
                selector: 'adf-sites-dropdown',
                template: "<div id=\"site-dropdown-container\" class=\"adf-site-dropdown-container\">\n    <mat-form-field>\n        <mat-select\n            adf-infinite-select-scroll\n            (scrollEnd)=\"loadAllOnScroll()\"\n            #siteSelect\n            data-automation-id=\"site-my-files-option\"\n            class=\"adf-site-dropdown-list-element\"\n            id=\"site-dropdown\"\n            placeholder=\"{{placeholder | translate}}\"\n            floatPlaceholder=\"never\"\n            [(value)]=\"selected\"\n            (selectionChange)=\"selectedSite($event)\">\n            <mat-option *ngFor=\"let site of siteList?.list.entries;\" [value]=\"site\">\n                {{ site.entry.title | translate}}\n            </mat-option>\n            <mat-option *ngIf=\"showLoading()\" disabled=\"true\" data-automation-id=\"site-loading\">\n                {{ 'ADF_DROPDOWN.LOADING' | translate}}\n            </mat-option>\n        </mat-select>\n    </mat-form-field>\n</div>\n",
                encapsulation: i0.ViewEncapsulation.None,
                host: { 'class': 'adf-sites-dropdown' },
                styles: [".adf-sites-dropdown.adf-full-width .mat-form-field{width:100%}"]
            }]
    }], function () { return [{ type: ɵngcc21.SitesService }, { type: ɵngcc21.LogService }]; }, { hideMyFiles: [{
            type: i0.Input
        }], siteList: [{
            type: i0.Input
        }], value: [{
            type: i0.Input
        }], placeholder: [{
            type: i0.Input
        }], change: [{
            type: i0.Output
        }], relations: [{
            type: i0.Input
        }] }); })();
        return DropdownSitesComponent;
    }());
    DropdownSitesComponent.ctorParameters = function () { return [
        { type: i1.SitesService },
        { type: i1.LogService }
    ]; };
    DropdownSitesComponent.propDecorators = {
        hideMyFiles: [{ type: i0.Input }],
        siteList: [{ type: i0.Input }],
        value: [{ type: i0.Input }],
        placeholder: [{ type: i0.Input }],
        relations: [{ type: i0.Input }],
        change: [{ type: i0.Output }]
    };

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var SitesDropdownModule = /** @class */ (function () {
        function SitesDropdownModule() {
        }
SitesDropdownModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: SitesDropdownModule });
SitesDropdownModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function SitesDropdownModule_Factory(t) { return new (t || SitesDropdownModule)(); }, imports: [[
            common.CommonModule,
            MaterialModule,
            forms.FormsModule,
            forms.ReactiveFormsModule,
            i1.CoreModule
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(SitesDropdownModule, { declarations: [DropdownSitesComponent], imports: [ɵngcc23.CommonModule, MaterialModule, ɵngcc26.FormsModule, ɵngcc26.ReactiveFormsModule, ɵngcc21.CoreModule], exports: [DropdownSitesComponent] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SitesDropdownModule, [{
        type: i0.NgModule,
        args: [{
                imports: [
                    common.CommonModule,
                    MaterialModule,
                    forms.FormsModule,
                    forms.ReactiveFormsModule,
                    i1.CoreModule
                ],
                exports: [
                    DropdownSitesComponent
                ],
                declarations: [
                    DropdownSitesComponent
                ]
            }]
    }], function () { return []; }, null); })();
        return SitesDropdownModule;
    }());

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var BreadcrumbComponent = /** @class */ (function () {
        function BreadcrumbComponent() {
            this.folderNode = null;
            this.root = null;
            this.rootId = null;
            this.route = [];
            this.onDestroy$ = new rxjs.Subject();
            this.readOnly = false;
            this.navigate = new i0.EventEmitter();
        }
        Object.defineProperty(BreadcrumbComponent.prototype, "hasRoot", {
            get: function () {
                return !!this.root;
            },
            enumerable: false,
            configurable: true
        });
        BreadcrumbComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.transform = this.transform ? this.transform : null;
            if (this.target) {
                this.target.$folderNode
                    .pipe(operators.takeUntil(this.onDestroy$))
                    .subscribe(function (folderNode) {
                    _this.folderNode = folderNode;
                    _this.recalculateNodes();
                });
            }
        };
        BreadcrumbComponent.prototype.ngOnChanges = function () {
            this.recalculateNodes();
        };
        BreadcrumbComponent.prototype.recalculateNodes = function () {
            var node = this.transform ? this.transform(this.folderNode) : this.folderNode;
            this.route = this.parseRoute(node);
            if (this.maxItems && this.route.length > this.maxItems) {
                this.lastNodes = this.route.slice(this.route.length - this.maxItems);
                this.previousNodes = this.route.slice(0, this.route.length - this.maxItems);
                this.previousNodes.reverse();
            }
            else {
                this.lastNodes = this.route;
                this.previousNodes = null;
            }
        };
        BreadcrumbComponent.prototype.open = function () {
            if (this.dropdown) {
                this.dropdown.open();
                this.dropdown.focus();
            }
        };
        BreadcrumbComponent.prototype.hasPreviousNodes = function () {
            return !!this.previousNodes;
        };
        BreadcrumbComponent.prototype.parseRoute = function (node) {
            if (node && node.path) {
                var route = (node.path.elements || []).slice();
                route.push({
                    id: node.id,
                    name: node.name,
                    node: node
                });
                var rootPos = this.getElementPosition(route, this.rootId);
                if (rootPos > 0) {
                    route.splice(0, rootPos);
                }
                if (rootPos === -1 && this.rootId) {
                    route[0].id = this.rootId;
                }
                if (this.root) {
                    route[0].name = this.root;
                }
                return route;
            }
            return [];
        };
        BreadcrumbComponent.prototype.getElementPosition = function (route, nodeId) {
            var position = -1;
            if (route && route.length > 0 && nodeId) {
                position = route.findIndex(function (el) { return el.id === nodeId; });
            }
            return position;
        };
        BreadcrumbComponent.prototype.breadcrumbItemIsAnchor = function (lastItem) {
            return !this.readOnly && !lastItem;
        };
        BreadcrumbComponent.prototype.onRoutePathClick = function (route, event) {
            if (event && event.type === 'click') {
                event.preventDefault();
            }
            this.onRouteClick(route);
        };
        BreadcrumbComponent.prototype.onRouteClick = function (route) {
            if (route && !this.readOnly) {
                this.navigate.emit(route);
                if (this.target) {
                    this.target.navigateTo(route.id);
                }
            }
        };
        BreadcrumbComponent.prototype.ngOnDestroy = function () {
            this.onDestroy$.next(true);
            this.onDestroy$.complete();
        };
BreadcrumbComponent.ɵfac = function BreadcrumbComponent_Factory(t) { return new (t || BreadcrumbComponent)(); };
BreadcrumbComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: BreadcrumbComponent, selectors: [["adf-breadcrumb"]], viewQuery: function BreadcrumbComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c31, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.dropdown = _t.first);
    } }, hostAttrs: [1, "adf-breadcrumb"], inputs: { folderNode: "folderNode", root: "root", rootId: "rootId", readOnly: "readOnly", transform: "transform", target: "target", maxItems: "maxItems" }, outputs: { navigate: "navigate" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 2, vars: 2, consts: [["data-automation-id", "breadcrumb", "class", "adf-breadcrumb-container", "role", "navigation", 4, "ngIf"], ["data-automation-id", "breadcrumb", "role", "navigation", 4, "ngIf"], ["data-automation-id", "breadcrumb", "role", "navigation", 1, "adf-breadcrumb-container"], ["tabindex", "0", "class", "adf-breadcrumb-dropdown-trigger", 3, "click", 4, "ngIf"], ["class", "adf-breadcrumb-dropdown-path", "tabindex", "-1", 4, "ngIf"], ["class", "adf-breadcrumb-item", 3, "adf-active", "ngSwitch", "title", 4, "ngFor", "ngForOf"], ["tabindex", "0", 1, "adf-breadcrumb-dropdown-trigger", 3, "click"], [1, "adf-breadcrumb-dropdown-trigger-icon"], [1, "adf-breadcrumb-dropdown-trigger-arrow"], ["tabindex", "-1", 1, "adf-breadcrumb-dropdown-path"], ["dropdown", ""], ["class", "adf-breadcrumb-path-option", 3, "disabled", "click", "onSelectionChange", 4, "ngFor", "ngForOf"], [1, "adf-breadcrumb-path-option", 3, "disabled", "click", "onSelectionChange"], [1, "adf-breadcrumb-item", 3, "ngSwitch", "title"], ["href", "#", "class", "adf-breadcrumb-item-anchor", 3, "click", 4, "ngSwitchCase"], ["class", "adf-breadcrumb-item-current", "role", "heading", "aria-level", "2", "aria-current", "location", 4, "ngSwitchDefault"], ["class", "adf-breadcrumb-item-chevron", 4, "ngIf"], ["href", "#", 1, "adf-breadcrumb-item-anchor", 3, "click"], ["role", "heading", "aria-level", "2", "aria-current", "location", 1, "adf-breadcrumb-item-current"], [1, "adf-breadcrumb-item-chevron"], ["data-automation-id", "breadcrumb", "role", "navigation"], ["role", "listitem", 1, "adf-breadcrumb-item", "adf-active"], ["role", "heading", "aria-level", "2", 1, "adf-breadcrumb-item-current"]], template: function BreadcrumbComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, BreadcrumbComponent_nav_0_Template, 5, 6, "nav", 0);
        ɵngcc0.ɵɵtemplate(1, BreadcrumbComponent_nav_1_Template, 6, 6, "nav", 1);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngIf", ctx.folderNode);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.folderNode && ctx.hasRoot);
    } }, directives: [ɵngcc23.NgIf, ɵngcc23.NgForOf, ɵngcc4.MatIcon, ɵngcc13.MatSelect, ɵngcc10.MatOption, ɵngcc23.NgSwitch, ɵngcc23.NgSwitchCase, ɵngcc23.NgSwitchDefault], pipes: [ɵngcc25.TranslatePipe], styles: [".adf-breadcrumb{color:var(--theme-text-color);display:flex;flex:1;font-size:14px;font-weight:600;letter-spacing:-.2px;line-height:24px;overflow:hidden}.adf-breadcrumb-container{cursor:default;display:flex;list-style-type:none;margin:0;overflow:hidden;padding:0}.adf-breadcrumb-dropdown-path{height:0;margin-top:35px;overflow:hidden;width:0}.adf-breadcrumb-dropdown-path.mat-select{width:0}.adf-breadcrumb-dropdown-trigger{background:transparent;border:none;cursor:pointer;margin-right:5px;margin-top:2px;padding:0;width:30px}.adf-breadcrumb-dropdown-trigger:focus{color:var(--theme-primary-color);outline:none}.adf-breadcrumb-dropdown-trigger-icon{position:relative}.adf-breadcrumb-dropdown-trigger-arrow{color:#fff;font-size:17px;left:4px;position:absolute;top:4px;z-index:2}.adf-breadcrumb-dropdown-trigger-arrow.adf-isRoot{visibility:hidden}.adf-breadcrumb-dropdown-trigger-arrow.adf-focus{border:none}.adf-breadcrumb-dropdown-trigger.adf-isRoot{cursor:not-allowed}.adf-breadcrumb-item{color:var(--theme-text-color);display:flex;flex:0 1 auto;font-size:14px;font-weight:600;letter-spacing:-.2px;line-height:33px;margin-top:auto;min-width:35px;overflow:hidden;padding-right:2px;text-align:left;text-overflow:ellipsis}.adf-breadcrumb-item.adf-active,.adf-breadcrumb-item:hover{color:var(--adf-breadcrumb-item-active-hover-color)}.adf-breadcrumb-item.adf-active{color:var(--adf-breadcrumb-item-active-color)}.adf-breadcrumb-item-chevron{font-size:17px;margin-top:9px;opacity:1}.adf-breadcrumb-item.mat-primary{color:var(--theme-primary-color)}.adf-breadcrumb-item.mat-accent{color:var(--theme-accent-color)}.adf-breadcrumb-item.mat-warn{color:var(--theme-warn-color)}.adf-breadcrumb-item-anchor{box-sizing:border-box;color:inherit;display:inline-block;flex:0 1 auto;overflow:hidden;padding:0 2px;text-align:center;text-decoration:none;text-overflow:ellipsis;white-space:nowrap;width:100%}.adf-breadcrumb-item-anchor:focus{outline:1px solid var(--theme-accent-color-a200);outline-offset:-1px}.adf-breadcrumb-item-current{overflow:hidden;text-overflow:ellipsis;white-space:nowrap}"], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(BreadcrumbComponent, [{
        type: i0.Component,
        args: [{
                selector: 'adf-breadcrumb',
                template: "<nav\n    *ngIf=\"folderNode\"\n    data-automation-id=\"breadcrumb\"\n    class=\"adf-breadcrumb-container\"\n    role=\"navigation\"\n    [attr.aria-label]=\"'BREADCRUMB.ARIA-LABEL.BREADCRUMB' | translate\"\n>\n    <button\n        *ngIf=\"hasPreviousNodes()\"\n        tabindex=\"0\"\n        class=\"adf-breadcrumb-dropdown-trigger\"\n        (click)=\"open()\"\n        [attr.aria-label]=\"'BREADCRUMB.ARIA-LABEL.DROPDOWN' | translate\"\n    >\n        <div class=\"adf-breadcrumb-dropdown-trigger-icon\">\n            <mat-icon [class.adf-isRoot]=\"!hasPreviousNodes()\">folder</mat-icon>\n            <mat-icon\n                [class.adf-isRoot]=\"!hasPreviousNodes()\"\n                class=\"adf-breadcrumb-dropdown-trigger-arrow\"\n                >arrow_drop_down</mat-icon\n            >\n        </div>\n    </button>\n\n    <mat-select\n        #dropdown\n        *ngIf=\"hasPreviousNodes()\"\n        class=\"adf-breadcrumb-dropdown-path\"\n        tabindex=\"-1\"\n    >\n        <mat-option\n            *ngFor=\"let node of previousNodes\"\n            (click)=\"onRoutePathClick(node, $event)\"\n            (onSelectionChange)=\"onRouteClick(node)\"\n            class=\"adf-breadcrumb-path-option\"\n            [disabled]=\"readOnly\"\n        >\n            {{ node.name | translate }}\n        </mat-option>\n    </mat-select>\n\n    <div\n        *ngFor=\"let item of lastNodes; let last = last\"\n        [class.adf-active]=\"last\"\n        [ngSwitch]=\"breadcrumbItemIsAnchor(last)\"\n        title=\"{{ item.name | translate }}\"\n        class=\"adf-breadcrumb-item\">\n        <a\n            *ngSwitchCase=\"true\"\n            href=\"#\"\n            [attr.data-automation-id]=\"'breadcrumb_' + item.name\"\n            class=\"adf-breadcrumb-item-anchor\"\n            (click)=\"onRoutePathClick(item, $event)\"\n        >\n            {{ item.name | translate }}\n        </a>\n\n        <div *ngSwitchDefault class=\"adf-breadcrumb-item-current\" role=\"heading\" aria-level=\"2\"\n            aria-current=\"location\">\n            {{ item.name | translate }}\n        </div>\n\n        <mat-icon class=\"adf-breadcrumb-item-chevron\" *ngIf=\"!last\">\n            chevron_right\n        </mat-icon>\n    </div>\n</nav>\n\n<nav\n    *ngIf=\"!folderNode && hasRoot\"\n    data-automation-id=\"breadcrumb\"\n    role=\"navigation\"\n    [attr.aria-label]=\"'BREADCRUMB.ARIA-LABEL.BREADCRUMB' | translate\"\n>\n    <div class=\"adf-breadcrumb-item adf-active\" role=\"listitem\">\n        <div class=\"adf-breadcrumb-item-current\" role=\"heading\" aria-level=\"2\">\n            {{ root | translate }}\n        </div>\n    </div>\n</nav>\n",
                encapsulation: i0.ViewEncapsulation.None,
                host: { 'class': 'adf-breadcrumb' },
                styles: [".adf-breadcrumb{color:var(--theme-text-color);display:flex;flex:1;font-size:14px;font-weight:600;letter-spacing:-.2px;line-height:24px;overflow:hidden}.adf-breadcrumb-container{cursor:default;display:flex;list-style-type:none;margin:0;overflow:hidden;padding:0}.adf-breadcrumb-dropdown-path{height:0;margin-top:35px;overflow:hidden;width:0}.adf-breadcrumb-dropdown-path.mat-select{width:0}.adf-breadcrumb-dropdown-trigger{background:transparent;border:none;cursor:pointer;margin-right:5px;margin-top:2px;padding:0;width:30px}.adf-breadcrumb-dropdown-trigger:focus{color:var(--theme-primary-color);outline:none}.adf-breadcrumb-dropdown-trigger-icon{position:relative}.adf-breadcrumb-dropdown-trigger-arrow{color:#fff;font-size:17px;left:4px;position:absolute;top:4px;z-index:2}.adf-breadcrumb-dropdown-trigger-arrow.adf-isRoot{visibility:hidden}.adf-breadcrumb-dropdown-trigger-arrow.adf-focus{border:none}.adf-breadcrumb-dropdown-trigger.adf-isRoot{cursor:not-allowed}.adf-breadcrumb-item{color:var(--theme-text-color);display:flex;flex:0 1 auto;font-size:14px;font-weight:600;letter-spacing:-.2px;line-height:33px;margin-top:auto;min-width:35px;overflow:hidden;padding-right:2px;text-align:left;text-overflow:ellipsis}.adf-breadcrumb-item.adf-active,.adf-breadcrumb-item:hover{color:var(--adf-breadcrumb-item-active-hover-color)}.adf-breadcrumb-item.adf-active{color:var(--adf-breadcrumb-item-active-color)}.adf-breadcrumb-item-chevron{font-size:17px;margin-top:9px;opacity:1}.adf-breadcrumb-item.mat-primary{color:var(--theme-primary-color)}.adf-breadcrumb-item.mat-accent{color:var(--theme-accent-color)}.adf-breadcrumb-item.mat-warn{color:var(--theme-warn-color)}.adf-breadcrumb-item-anchor{box-sizing:border-box;color:inherit;display:inline-block;flex:0 1 auto;overflow:hidden;padding:0 2px;text-align:center;text-decoration:none;text-overflow:ellipsis;white-space:nowrap;width:100%}.adf-breadcrumb-item-anchor:focus{outline:1px solid var(--theme-accent-color-a200);outline-offset:-1px}.adf-breadcrumb-item-current{overflow:hidden;text-overflow:ellipsis;white-space:nowrap}"]
            }]
    }], function () { return []; }, { folderNode: [{
            type: i0.Input
        }], root: [{
            type: i0.Input
        }], rootId: [{
            type: i0.Input
        }], readOnly: [{
            type: i0.Input
        }], navigate: [{
            type: i0.Output
        }], transform: [{
            type: i0.Input
        }], target: [{
            type: i0.Input
        }], dropdown: [{
            type: i0.ViewChild,
            args: ['dropdown']
        }], maxItems: [{
            type: i0.Input
        }] }); })();
        return BreadcrumbComponent;
    }());
    BreadcrumbComponent.propDecorators = {
        folderNode: [{ type: i0.Input }],
        root: [{ type: i0.Input }],
        rootId: [{ type: i0.Input }],
        target: [{ type: i0.Input }],
        transform: [{ type: i0.Input }],
        dropdown: [{ type: i0.ViewChild, args: ['dropdown',] }],
        maxItems: [{ type: i0.Input }],
        readOnly: [{ type: i0.Input }],
        navigate: [{ type: i0.Output }]
    };

    var DropdownBreadcrumbComponent = /** @class */ (function (_super) {
        __extends(DropdownBreadcrumbComponent, _super);
        function DropdownBreadcrumbComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        DropdownBreadcrumbComponent.prototype.recalculateNodes = function () {
            var node = this.transform ? this.transform(this.folderNode) : this.folderNode;
            this.route = this.parseRoute(node);
            this.currentNode = this.route[this.route.length - 1];
            this.previousNodes = this.route.slice(0, this.route.length - 1).reverse();
        };
        DropdownBreadcrumbComponent.prototype.open = function () {
            if (this.dropdown) {
                this.dropdown.open();
                this.dropdown.focus();
            }
        };
        DropdownBreadcrumbComponent.prototype.hasPreviousNodes = function () {
            return this.previousNodes.length > 0;
        };
DropdownBreadcrumbComponent.ɵfac = function DropdownBreadcrumbComponent_Factory(t) { return ɵDropdownBreadcrumbComponent_BaseFactory(t || DropdownBreadcrumbComponent); };
DropdownBreadcrumbComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: DropdownBreadcrumbComponent, selectors: [["adf-dropdown-breadcrumb"]], viewQuery: function DropdownBreadcrumbComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c31, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.dropdown = _t.first);
    } }, hostAttrs: [1, "adf-dropdown-breadcrumb"], features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 1, vars: 1, consts: [["class", "adf-dropdown-breadcrumb-container", "role", "navigation", 4, "ngIf"], ["role", "navigation", 1, "adf-dropdown-breadcrumb-container"], ["data-automation-id", "dropdown-breadcrumb-trigger", 1, "adf-dropdown-breadcrumb-trigger", 3, "tabindex", "click"], [1, "adf-dropdown-breadcrumb-item-chevron"], [1, "adf-dropdown-breadcrumb-path"], ["tabindex", "-1", "data-automation-id", "dropdown-breadcrumb-path", 4, "ngIf"], ["data-automation-id", "current-folder", "aria-current", "location", 1, "adf-current-folder"], ["tabindex", "-1", "data-automation-id", "dropdown-breadcrumb-path"], ["dropdown", ""], ["class", "adf-dropdown-breadcrumb-path-option", "data-automation-class", "dropdown-breadcrumb-path-option", 3, "disabled", "click", "onSelectionChange", 4, "ngFor", "ngForOf"], ["data-automation-class", "dropdown-breadcrumb-path-option", 1, "adf-dropdown-breadcrumb-path-option", 3, "disabled", "click", "onSelectionChange"]], template: function DropdownBreadcrumbComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, DropdownBreadcrumbComponent_nav_0_Template, 12, 13, "nav", 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngIf", ctx.route.length > 0);
    } }, directives: [ɵngcc23.NgIf, ɵngcc4.MatIcon, ɵngcc13.MatSelect, ɵngcc23.NgForOf, ɵngcc10.MatOption], pipes: [ɵngcc25.TranslatePipe], styles: [".adf-dropdown-breadcrumb{color:var(--theme-text-color);display:flex;flex:1;font-size:14px;font-weight:600;letter-spacing:-.2px;line-height:24px;margin-top:10px;overflow:hidden}.adf-dropdown-breadcrumb .mat-icon{height:35px}.adf-dropdown-breadcrumb-container{cursor:default;display:flex;list-style-type:none;margin:0;overflow:hidden;padding:0}.adf-dropdown-breadcrumb-trigger{background:transparent;border:none;cursor:pointer;padding:0;width:25px}.adf-dropdown-breadcrumb-trigger:focus{color:var(--theme-primary-color);outline:none}.adf-dropdown-breadcrumb-trigger.adf-isRoot{cursor:not-allowed}.adf-dropdown-breadcrumb-path{height:0;margin-top:35px;overflow:hidden;width:0}.adf-dropdown-breadcrumb-path.mat-select{width:0}.adf-current-folder{color:var(--theme-foreground-text-color);display:inline-block;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;width:75%}.adf-dropdown-breadcrumb-path-option.mat-option{font-size:13px;height:28px;line-height:28px;padding:0 12px}.adf-dropdown-breadcrumb-path-option.mat-option:first-child{padding-top:4px}.adf-dropdown-breadcrumb-path-option.mat-option:last-child{padding-bottom:4px}[dir=ltr] .adf-dropdown-breadcrumb-path{margin-left:-30px}[dir=ltr] .adf-current-folder{margin-left:30px}[dir=rtl] .adf-dropdown-breadcrumb-path{margin-right:-30px}[dir=rtl] .adf-current-folder{margin-right:30px}"], encapsulation: 2 });
var ɵDropdownBreadcrumbComponent_BaseFactory = /*@__PURE__*/ ɵngcc0.ɵɵgetInheritedFactory(DropdownBreadcrumbComponent);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DropdownBreadcrumbComponent, [{
        type: i0.Component,
        args: [{
                selector: 'adf-dropdown-breadcrumb',
                template: "<nav *ngIf=\"route.length > 0\" class=\"adf-dropdown-breadcrumb-container\"\n     role=\"navigation\"\n     [attr.aria-label]=\"'BREADCRUMB.ARIA-LABEL.BREADCRUMB' | translate\">\n\n    <button\n        [tabindex]=\"hasPreviousNodes() ? 0 : -1\"\n        class=\"adf-dropdown-breadcrumb-trigger\"\n        (click)=\"open()\"\n        [attr.aria-label]=\"'BREADCRUMB.ARIA-LABEL.DROPDOWN' | translate\"\n        data-automation-id=\"dropdown-breadcrumb-trigger\">\n        <mat-icon [class.adf-isRoot]=\"!hasPreviousNodes()\">folder</mat-icon>\n    </button>\n\n    <mat-icon class=\"adf-dropdown-breadcrumb-item-chevron\">chevron_right</mat-icon>\n\n    <div class=\"adf-dropdown-breadcrumb-path\">\n        <mat-select\n            #dropdown\n            *ngIf=\"hasPreviousNodes()\"\n            tabindex=\"-1\"\n            data-automation-id=\"dropdown-breadcrumb-path\">\n\n            <mat-option\n                *ngFor=\"let node of previousNodes;\"\n                (click)=\"onRoutePathClick(node, $event)\"\n                (onSelectionChange)=\"onRouteClick(node)\"\n                class=\"adf-dropdown-breadcrumb-path-option\"\n                data-automation-class=\"dropdown-breadcrumb-path-option\"\n                [disabled]=\"readOnly\">\n                {{ node.name | translate }}\n            </mat-option>\n        </mat-select>\n    </div>\n\n    <span\n        class=\"adf-current-folder\"\n        [class.adf-isRoot]=\"!hasPreviousNodes()\"\n        data-automation-id=\"current-folder\"\n        aria-current=\"location\">{{ currentNode.name }}\n    </span>\n</nav>\n",
                encapsulation: i0.ViewEncapsulation.None,
                host: { 'class': 'adf-dropdown-breadcrumb' },
                styles: [".adf-dropdown-breadcrumb{color:var(--theme-text-color);display:flex;flex:1;font-size:14px;font-weight:600;letter-spacing:-.2px;line-height:24px;margin-top:10px;overflow:hidden}.adf-dropdown-breadcrumb .mat-icon{height:35px}.adf-dropdown-breadcrumb-container{cursor:default;display:flex;list-style-type:none;margin:0;overflow:hidden;padding:0}.adf-dropdown-breadcrumb-trigger{background:transparent;border:none;cursor:pointer;padding:0;width:25px}.adf-dropdown-breadcrumb-trigger:focus{color:var(--theme-primary-color);outline:none}.adf-dropdown-breadcrumb-trigger.adf-isRoot{cursor:not-allowed}.adf-dropdown-breadcrumb-path{height:0;margin-top:35px;overflow:hidden;width:0}.adf-dropdown-breadcrumb-path.mat-select{width:0}.adf-current-folder{color:var(--theme-foreground-text-color);display:inline-block;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;width:75%}.adf-dropdown-breadcrumb-path-option.mat-option{font-size:13px;height:28px;line-height:28px;padding:0 12px}.adf-dropdown-breadcrumb-path-option.mat-option:first-child{padding-top:4px}.adf-dropdown-breadcrumb-path-option.mat-option:last-child{padding-bottom:4px}[dir=ltr] .adf-dropdown-breadcrumb-path{margin-left:-30px}[dir=ltr] .adf-current-folder{margin-left:30px}[dir=rtl] .adf-dropdown-breadcrumb-path{margin-right:-30px}[dir=rtl] .adf-current-folder{margin-right:30px}"]
            }]
    }], null, { dropdown: [{
            type: i0.ViewChild,
            args: ['dropdown']
        }] }); })();
        return DropdownBreadcrumbComponent;
    }(BreadcrumbComponent));
    DropdownBreadcrumbComponent.propDecorators = {
        dropdown: [{ type: i0.ViewChild, args: ['dropdown',] }]
    };

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var BreadcrumbModule = /** @class */ (function () {
        function BreadcrumbModule() {
        }
BreadcrumbModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: BreadcrumbModule });
BreadcrumbModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function BreadcrumbModule_Factory(t) { return new (t || BreadcrumbModule)(); }, imports: [[
            common.CommonModule,
            MaterialModule,
            i1.CoreModule
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(BreadcrumbModule, { declarations: [BreadcrumbComponent, DropdownBreadcrumbComponent], imports: [ɵngcc23.CommonModule, MaterialModule, ɵngcc21.CoreModule], exports: [BreadcrumbComponent, DropdownBreadcrumbComponent] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(BreadcrumbModule, [{
        type: i0.NgModule,
        args: [{
                imports: [
                    common.CommonModule,
                    MaterialModule,
                    i1.CoreModule
                ],
                exports: [
                    BreadcrumbComponent,
                    DropdownBreadcrumbComponent
                ],
                declarations: [
                    BreadcrumbComponent,
                    DropdownBreadcrumbComponent
                ]
            }]
    }], function () { return []; }, null); })();
        return BreadcrumbModule;
    }());

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var ConfirmDialogComponent = /** @class */ (function () {
        function ConfirmDialogComponent(data, sanitizer) {
            this.sanitizer = sanitizer;
            data = data || {};
            this.title = data.title || 'ADF_CONFIRM_DIALOG.CONFIRM';
            this.message = data.message || 'ADF_CONFIRM_DIALOG.MESSAGE';
            this.yesLabel = data.yesLabel || 'ADF_CONFIRM_DIALOG.YES_LABEL';
            this.thirdOptionLabel = data.thirdOptionLabel;
            this.noLabel = data.noLabel || 'ADF_CONFIRM_DIALOG.NO_LABEL';
            this.htmlContent = data.htmlContent;
        }
        ConfirmDialogComponent.prototype.sanitizedHtmlContent = function () {
            return this.sanitizer.sanitize(i0.SecurityContext.HTML, this.htmlContent);
        };
ConfirmDialogComponent.ɵfac = function ConfirmDialogComponent_Factory(t) { return new (t || ConfirmDialogComponent)(ɵngcc0.ɵɵdirectiveInject(i2.MAT_DIALOG_DATA), ɵngcc0.ɵɵdirectiveInject(ɵngcc33.DomSanitizer)); };
ConfirmDialogComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ConfirmDialogComponent, selectors: [["adf-confirm-dialog"]], hostAttrs: [1, "adf-confirm-dialog"], decls: 16, vars: 14, consts: [["mat-dialog-title", "", "data-automation-id", "adf-confirm-dialog-title"], ["data-automation-id", "adf-confirm-dialog-base-message", 4, "ngIf", "ngIfElse"], ["cutomContent", ""], ["data-automation-id", "adf-confirm-dialog-spacer", 1, "adf-dialog-spacer"], ["id", "adf-confirm-accept", "mat-button", "", "color", "primary", "data-automation-id", "adf-confirm-dialog-confirmation", 3, "mat-dialog-close"], ["id", "adf-confirm-all", "mat-button", "", "data-automation-id", "adf-confirm-dialog-confirm-all", 3, "mat-dialog-close", 4, "ngIf"], ["id", "adf-confirm-cancel", "mat-button", "", "data-automation-id", "adf-confirm-dialog-reject", "cdkFocusInitial", "", 3, "mat-dialog-close"], ["data-automation-id", "adf-confirm-dialog-base-message"], ["data-automation-id", "adf-confirm-dialog-custom-content", 3, "innerHTML"], ["id", "adf-confirm-all", "mat-button", "", "data-automation-id", "adf-confirm-dialog-confirm-all", 3, "mat-dialog-close"]], template: function ConfirmDialogComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "h1", 0);
        ɵngcc0.ɵɵtext(1);
        ɵngcc0.ɵɵpipe(2, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(3, "mat-dialog-content");
        ɵngcc0.ɵɵtemplate(4, ConfirmDialogComponent_p_4_Template, 3, 3, "p", 1);
        ɵngcc0.ɵɵtemplate(5, ConfirmDialogComponent_ng_template_5_Template, 1, 1, "ng-template", null, 2, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(7, "mat-dialog-actions");
        ɵngcc0.ɵɵelement(8, "span", 3);
        ɵngcc0.ɵɵelementStart(9, "button", 4);
        ɵngcc0.ɵɵtext(10);
        ɵngcc0.ɵɵpipe(11, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(12, ConfirmDialogComponent_button_12_Template, 3, 4, "button", 5);
        ɵngcc0.ɵɵelementStart(13, "button", 6);
        ɵngcc0.ɵɵtext(14);
        ɵngcc0.ɵɵpipe(15, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        var _r1 = ɵngcc0.ɵɵreference(6);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(2, 8, ctx.title));
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.htmlContent)("ngIfElse", _r1);
        ɵngcc0.ɵɵadvance(5);
        ɵngcc0.ɵɵproperty("mat-dialog-close", true);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(11, 10, ctx.yesLabel));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.thirdOptionLabel);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("mat-dialog-close", false);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(15, 12, ctx.noLabel));
    } }, directives: [ɵngcc3.MatDialogTitle, ɵngcc3.MatDialogContent, ɵngcc23.NgIf, ɵngcc3.MatDialogActions, ɵngcc1.MatButton, ɵngcc3.MatDialogClose], pipes: [ɵngcc25.TranslatePipe], styles: [".adf-dialog-spacer{flex:1 1 auto}.adf-confirm-dialog .mat-dialog-actions .mat-button-wrapper{text-transform:uppercase}"], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ConfirmDialogComponent, [{
        type: i0.Component,
        args: [{
                selector: 'adf-confirm-dialog',
                template: "<h1 mat-dialog-title data-automation-id=\"adf-confirm-dialog-title\">{{ title | translate }}</h1>\n<mat-dialog-content>\n    <p *ngIf=\"!htmlContent; else cutomContent\" data-automation-id=\"adf-confirm-dialog-base-message\">\n        {{ message | translate }}\n    </p>\n    <ng-template #cutomContent>\n        <span [innerHTML]=\"sanitizedHtmlContent()\" data-automation-id=\"adf-confirm-dialog-custom-content\">\n        </span>\n    </ng-template>\n</mat-dialog-content>\n<mat-dialog-actions>\n    <span class=\"adf-dialog-spacer\" data-automation-id=\"adf-confirm-dialog-spacer\"></span>\n    <button id=\"adf-confirm-accept\" mat-button color=\"primary\" data-automation-id=\"adf-confirm-dialog-confirmation\"\n        [mat-dialog-close]=\"true\">{{ yesLabel | translate }}</button>\n    <button id=\"adf-confirm-all\" mat-button *ngIf=\"thirdOptionLabel\" [mat-dialog-close]=\"thirdOptionLabel\" data-automation-id=\"adf-confirm-dialog-confirm-all\">{{ thirdOptionLabel | translate }}</button>\n    <button id=\"adf-confirm-cancel\" mat-button [mat-dialog-close]=\"false\" data-automation-id=\"adf-confirm-dialog-reject\"\n        cdkFocusInitial>{{ noLabel | translate }}</button>\n</mat-dialog-actions>\n",
                host: { 'class': 'adf-confirm-dialog' },
                encapsulation: i0.ViewEncapsulation.None,
                styles: [".adf-dialog-spacer{flex:1 1 auto}.adf-confirm-dialog .mat-dialog-actions .mat-button-wrapper{text-transform:uppercase}"]
            }]
    }], function () { return [{ type: undefined, decorators: [{
                type: i0.Inject,
                args: [i2.MAT_DIALOG_DATA]
            }] }, { type: ɵngcc33.DomSanitizer }]; }, null); })();
        return ConfirmDialogComponent;
    }());
    ConfirmDialogComponent.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: i0.Inject, args: [i2.MAT_DIALOG_DATA,] }] },
        { type: platformBrowser.DomSanitizer }
    ]; };

    var ContentVersionService = /** @class */ (function () {
        function ContentVersionService(alfrescoApi) {
            this.alfrescoApi = alfrescoApi;
        }
        Object.defineProperty(ContentVersionService.prototype, "contentApi", {
            get: function () {
                if (!this._contentApi) {
                    this._contentApi = new jsApi.ContentApi(this.alfrescoApi.getInstance());
                }
                return this._contentApi;
            },
            enumerable: false,
            configurable: true
        });
        ContentVersionService.prototype.getVersionContentUrl = function (nodeId, versionId, attachment) {
            var nodeDownloadUrl = this.contentApi.getContentUrl(nodeId, attachment);
            nodeDownloadUrl = nodeDownloadUrl.replace('/content', '/versions/' + versionId + '/content');
            return rxjs.of(nodeDownloadUrl);
        };
ContentVersionService.ɵfac = function ContentVersionService_Factory(t) { return new (t || ContentVersionService)(ɵngcc0.ɵɵinject(ɵngcc21.AlfrescoApiService)); };
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ContentVersionService, [{
        type: i0.Injectable,
        args: [{ providedIn: 'root' }]
    }], function () { return [{ type: ɵngcc21.AlfrescoApiService }]; }, null); })();
        return ContentVersionService;
    }());
    ContentVersionService.ɵprov = i0.ɵɵdefineInjectable({ factory: function ContentVersionService_Factory() { return new ContentVersionService(i0.ɵɵinject(i1.AlfrescoApiService)); }, token: ContentVersionService, providedIn: "root" });
    ContentVersionService.ctorParameters = function () { return [
        { type: i1.AlfrescoApiService }
    ]; };

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var VersionListComponent = /** @class */ (function () {
        function VersionListComponent(alfrescoApi, contentService, contentVersionService, dialog) {
            this.alfrescoApi = alfrescoApi;
            this.contentService = contentService;
            this.contentVersionService = contentVersionService;
            this.dialog = dialog;
            this.versions = [];
            this.isLoading = true;
            this.showComments = true;
            this.allowDownload = true;
            this.allowViewVersions = true;
            this.showActions = true;
            this.restored = new i0.EventEmitter();
            this.deleted = new i0.EventEmitter();
            this.viewVersion = new i0.EventEmitter();
        }
        Object.defineProperty(VersionListComponent.prototype, "contentApi", {
            get: function () {
                var _a;
                this._contentApi = (_a = this._contentApi) !== null && _a !== void 0 ? _a : new jsApi.ContentApi(this.alfrescoApi.getInstance());
                return this._contentApi;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(VersionListComponent.prototype, "versionsApi", {
            get: function () {
                var _a;
                this._versionsApi = (_a = this._versionsApi) !== null && _a !== void 0 ? _a : new jsApi.VersionsApi(this.alfrescoApi.getInstance());
                return this._versionsApi;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(VersionListComponent.prototype, "nodesApi", {
            get: function () {
                var _a;
                this._nodesApi = (_a = this._nodesApi) !== null && _a !== void 0 ? _a : new jsApi.NodesApi(this.alfrescoApi.getInstance());
                return this._nodesApi;
            },
            enumerable: false,
            configurable: true
        });
        VersionListComponent.prototype.ngOnChanges = function () {
            this.loadVersionHistory();
        };
        VersionListComponent.prototype.canUpdate = function () {
            return this.contentService.hasAllowableOperations(this.node, 'update') && this.versions.length > 1;
        };
        VersionListComponent.prototype.canDelete = function () {
            return this.contentService.hasAllowableOperations(this.node, 'delete') && this.versions.length > 1;
        };
        VersionListComponent.prototype.restore = function (versionId) {
            var _this = this;
            if (this.canUpdate()) {
                this.versionsApi
                    .revertVersion(this.node.id, versionId, { majorVersion: true, comment: '' })
                    .then(function () { return _this.nodesApi.getNode(_this.node.id, { include: ['permissions', 'path', 'isFavorite', 'allowableOperations'] }); })
                    .then(function (node) { return _this.onVersionRestored(node); });
            }
        };
        VersionListComponent.prototype.onViewVersion = function (versionId) {
            this.viewVersion.emit(versionId);
        };
        VersionListComponent.prototype.loadVersionHistory = function () {
            var _this = this;
            this.isLoading = true;
            this.versionsApi.listVersionHistory(this.node.id).then(function (versionPaging) {
                _this.versions = versionPaging.list.entries;
                _this.isLoading = false;
            });
        };
        VersionListComponent.prototype.downloadVersion = function (versionId) {
            var _this = this;
            if (this.allowDownload) {
                this.contentVersionService
                    .getVersionContentUrl(this.node.id, versionId, true)
                    .subscribe(function (versionDownloadUrl) { return _this.downloadContent(versionDownloadUrl); });
            }
        };
        VersionListComponent.prototype.deleteVersion = function (versionId) {
            var _this = this;
            if (this.canUpdate()) {
                var dialogRef = this.dialog.open(ConfirmDialogComponent, {
                    data: {
                        title: 'ADF_VERSION_LIST.CONFIRM_DELETE.TITLE',
                        message: 'ADF_VERSION_LIST.CONFIRM_DELETE.MESSAGE',
                        yesLabel: 'ADF_VERSION_LIST.CONFIRM_DELETE.YES_LABEL',
                        noLabel: 'ADF_VERSION_LIST.CONFIRM_DELETE.NO_LABEL'
                    },
                    minWidth: '250px'
                });
                dialogRef.afterClosed().subscribe(function (result) {
                    if (result === true) {
                        _this.versionsApi
                            .deleteVersion(_this.node.id, versionId)
                            .then(function () { return _this.onVersionDeleted(_this.node); });
                    }
                });
            }
        };
        VersionListComponent.prototype.onVersionDeleted = function (node) {
            this.loadVersionHistory();
            this.deleted.emit(node);
        };
        VersionListComponent.prototype.onVersionRestored = function (node) {
            this.loadVersionHistory();
            this.restored.emit(node === null || node === void 0 ? void 0 : node.entry);
        };
        VersionListComponent.prototype.downloadContent = function (url) {
            if (url) {
                var link = document.createElement('a');
                link.style.display = 'none';
                link.href = url;
                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);
            }
        };
VersionListComponent.ɵfac = function VersionListComponent_Factory(t) { return new (t || VersionListComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc21.AlfrescoApiService), ɵngcc0.ɵɵdirectiveInject(ɵngcc21.ContentService), ɵngcc0.ɵɵdirectiveInject(ContentVersionService), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.MatDialog)); };
VersionListComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: VersionListComponent, selectors: [["adf-version-list"]], hostAttrs: [1, "adf-version-list"], inputs: { showComments: "showComments", allowDownload: "allowDownload", allowViewVersions: "allowViewVersions", showActions: "showActions", node: "node" }, outputs: { restored: "restored", deleted: "deleted", viewVersion: "viewVersion" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 3, vars: 2, consts: [["class", "adf-version-list", 4, "ngIf", "ngIfElse"], ["loading_template", ""], [1, "adf-version-list"], [4, "ngFor", "ngForOf"], ["mat-list-icon", ""], ["mat-line", "", 1, "adf-version-list-item-name", 3, "id"], ["mat-line", ""], [1, "adf-version-list-item-version", 3, "id"], [1, "adf-version-list-item-date", 3, "id"], ["mat-line", "", "class", "adf-version-list-item-comment", 3, "id", 4, "ngIf"], [4, "ngIf"], ["mat-line", "", 1, "adf-version-list-item-comment", 3, "id"], ["yPosition", "below", "xPosition", "before", 3, "id"], ["versionMenu", "matMenu"], [4, "adf-acs-version"], ["mat-menu-item", "", 3, "id", "disabled", "click"], ["mat-menu-item", "", 3, "id", "click", 4, "ngIf"], ["mat-menu-item", "", 3, "disabled", "id", "click"], ["mat-icon-button", "", 3, "matMenuTriggerFor", "id"], ["mat-menu-item", "", 3, "id", "click"], ["data-automation-id", "version-history-loading-bar", "mode", "indeterminate", "color", "accent"]], template: function VersionListComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, VersionListComponent_mat_list_0_Template, 2, 1, "mat-list", 0);
        ɵngcc0.ɵɵtemplate(1, VersionListComponent_ng_template_1_Template, 1, 0, "ng-template", null, 1, ɵngcc0.ɵɵtemplateRefExtractor);
    } if (rf & 2) {
        var _r1 = ɵngcc0.ɵɵreference(2);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.isLoading)("ngIfElse", _r1);
    } }, directives: [ɵngcc23.NgIf, ɵngcc7.MatList, ɵngcc23.NgForOf, ɵngcc7.MatListItem, ɵngcc4.MatIcon, ɵngcc7.MatListIconCssMatStyler, ɵngcc10.MatLine, ɵngcc11._MatMenu, ɵngcc21.VersionCompatibilityDirective, ɵngcc11.MatMenuItem, ɵngcc1.MatButton, ɵngcc11.MatMenuTrigger, ɵngcc9.MatProgressBar], pipes: [ɵngcc23.DatePipe, ɵngcc25.TranslatePipe], styles: [".adf-version-list .mat-list-item-content{border-bottom:1px solid #d8d8d8}.adf-version-list-item-version{font-weight:700}.adf-version-list-item-date{opacity:.6}.adf-version-list-item-comment{opacity:.5}"], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(VersionListComponent, [{
        type: i0.Component,
        args: [{
                selector: 'adf-version-list',
                template: "<mat-list class=\"adf-version-list\" *ngIf=\"!isLoading; else loading_template\">\n    <mat-list-item *ngFor=\"let version of versions; let idx = index\">\n        <mat-icon mat-list-icon>insert_drive_file</mat-icon>\n        <h4 mat-line class=\"adf-version-list-item-name\" [id]=\"'adf-version-list-item-name-' + version.entry.id\" >{{version.entry.name}}</h4>\n        <p mat-line>\n            <span class=\"adf-version-list-item-version\"  [id]=\"'adf-version-list-item-version-' + version.entry.id\" >{{version.entry.id}}</span> -\n            <span class=\"adf-version-list-item-date\"     [id]=\"'adf-version-list-item-date-' + version.entry.id\" >{{version.entry.modifiedAt | date}}</span>\n        </p>\n        <p mat-line [id]=\"'adf-version-list-item-comment-'+ version.entry.id\" class=\"adf-version-list-item-comment\"\n           *ngIf=\"showComments\">{{version.entry.versionComment}}</p>\n\n        <div *ngIf=\"showActions\">\n            <mat-menu [id]=\"'adf-version-list-action-menu-'+version.entry.id\"\n                      #versionMenu=\"matMenu\" yPosition=\"below\" xPosition=\"before\">\n                <ng-container *adf-acs-version=\"'7'\">\n                    <button *ngIf=\"allowViewVersions\"\n                            [id]=\"'adf-version-list-action-view-'+version.entry.id\"\n                            mat-menu-item\n                            (click)=\"onViewVersion(version.entry.id)\">\n                        {{ 'ADF_VERSION_LIST.ACTIONS.VIEW' | translate }}\n                    </button>\n                </ng-container>\n                <button\n                    [id]=\"'adf-version-list-action-restore-'+version.entry.id\"\n                    [disabled]=\"!canUpdate()\"\n                    mat-menu-item\n                    (click)=\"restore(version.entry.id)\">\n                    {{ 'ADF_VERSION_LIST.ACTIONS.RESTORE' | translate }}\n                </button>\n                <button *ngIf=\"allowDownload\"\n                        [id]=\"'adf-version-list-action-download-'+version.entry.id\"\n                        mat-menu-item\n                        (click)=\"downloadVersion(version.entry.id)\">\n                    {{ 'ADF_VERSION_LIST.ACTIONS.DOWNLOAD' | translate }}\n                </button>\n                <button\n                    [disabled]=\"!canDelete()\"\n                    [id]=\"'adf-version-list-action-delete-'+version.entry.id\"\n                    (click)=\"deleteVersion(version.entry.id)\"\n                    mat-menu-item>\n                    {{ 'ADF_VERSION_LIST.ACTIONS.DELETE' | translate }}\n                </button>\n            </mat-menu>\n\n            <button mat-icon-button [matMenuTriggerFor]=\"versionMenu\" [id]=\"'adf-version-list-action-menu-button-'+version.entry.id\">\n                <mat-icon>more_vert</mat-icon>\n            </button>\n        </div>\n    </mat-list-item>\n</mat-list>\n\n<ng-template #loading_template>\n    <mat-progress-bar data-automation-id=\"version-history-loading-bar\" mode=\"indeterminate\"\n                      color=\"accent\"></mat-progress-bar>\n</ng-template>\n",
                encapsulation: i0.ViewEncapsulation.None,
                host: {
                    'class': 'adf-version-list'
                },
                styles: [".adf-version-list .mat-list-item-content{border-bottom:1px solid #d8d8d8}.adf-version-list-item-version{font-weight:700}.adf-version-list-item-date{opacity:.6}.adf-version-list-item-comment{opacity:.5}"]
            }]
    }], function () { return [{ type: ɵngcc21.AlfrescoApiService }, { type: ɵngcc21.ContentService }, { type: ContentVersionService }, { type: ɵngcc3.MatDialog }]; }, { showComments: [{
            type: i0.Input
        }], allowDownload: [{
            type: i0.Input
        }], allowViewVersions: [{
            type: i0.Input
        }], showActions: [{
            type: i0.Input
        }], restored: [{
            type: i0.Output
        }], deleted: [{
            type: i0.Output
        }], viewVersion: [{
            type: i0.Output
        }], node: [{
            type: i0.Input
        }] }); })();
        return VersionListComponent;
    }());
    VersionListComponent.ctorParameters = function () { return [
        { type: i1.AlfrescoApiService },
        { type: i1.ContentService },
        { type: ContentVersionService },
        { type: i2.MatDialog }
    ]; };
    VersionListComponent.propDecorators = {
        node: [{ type: i0.Input }],
        showComments: [{ type: i0.Input }],
        allowDownload: [{ type: i0.Input }],
        allowViewVersions: [{ type: i0.Input }],
        showActions: [{ type: i0.Input }],
        restored: [{ type: i0.Output }],
        deleted: [{ type: i0.Output }],
        viewVersion: [{ type: i0.Output }]
    };

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var VersionManagerComponent = /** @class */ (function () {
        function VersionManagerComponent(contentService, alfrescoApiService) {
            this.contentService = contentService;
            this.alfrescoApiService = alfrescoApiService;
            this.showComments = true;
            this.showVersionComparison = false;
            this.allowDownload = true;
            this.uploadSuccess = new i0.EventEmitter();
            this.uploadError = new i0.EventEmitter();
            this.uploadCancel = new i0.EventEmitter();
            this.viewVersion = new i0.EventEmitter();
            this.uploadState = 'close';
        }
        VersionManagerComponent.prototype.ngOnInit = function () {
            if (this.newFileVersion) {
                this.toggleNewVersion();
            }
        };
        VersionManagerComponent.prototype.refresh = function (node) {
            this.alfrescoApiService.nodeUpdated.next(node);
            this.versionListComponent.loadVersionHistory();
            this.uploadSuccess.emit(node);
            this.uploadState = 'close';
        };
        VersionManagerComponent.prototype.onUploadSuccess = function (event) {
            this.showVersionComparison = false;
            this.newFileVersion = null;
            this.alfrescoApiService.nodeUpdated.next(event.value.entry);
            this.versionListComponent.loadVersionHistory();
            this.uploadSuccess.emit(event.value.entry);
            this.uploadState = 'close';
        };
        VersionManagerComponent.prototype.onUploadError = function (event) {
            this.uploadError.emit(event);
        };
        VersionManagerComponent.prototype.onUploadCancel = function () {
            this.uploadState = 'close';
            this.showVersionComparison = false;
            this.newFileVersion = null;
            this.uploadCancel.emit(true);
        };
        VersionManagerComponent.prototype.onViewVersion = function (versionId) {
            this.viewVersion.emit(versionId);
        };
        VersionManagerComponent.prototype.toggleNewVersion = function () {
            this.uploadState = this.uploadState === 'open' ? 'close' : 'open';
        };
        VersionManagerComponent.prototype.canUpdate = function () {
            return this.contentService.hasAllowableOperations(this.node, 'update');
        };
VersionManagerComponent.ɵfac = function VersionManagerComponent_Factory(t) { return new (t || VersionManagerComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc21.ContentService), ɵngcc0.ɵɵdirectiveInject(ɵngcc21.AlfrescoApiService)); };
VersionManagerComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: VersionManagerComponent, selectors: [["adf-version-manager"]], viewQuery: function VersionManagerComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵstaticViewQuery(_c32, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.versionListComponent = _t.first);
    } }, inputs: { showComments: "showComments", showVersionComparison: "showVersionComparison", allowDownload: "allowDownload", newFileVersion: "newFileVersion", node: "node" }, outputs: { uploadSuccess: "uploadSuccess", uploadError: "uploadError", uploadCancel: "uploadCancel", viewVersion: "viewVersion" }, decls: 11, vars: 7, consts: [[1, "adf-new-version-container"], [3, "node", "newFileVersion", 4, "ngIf"], ["id", "adf-new-version-uploader-container", "fxLayout", "row", "fxLayoutAlign", "end center", 1, "adf-new-version-uploader-container"], ["class", "adf-version-upload", 4, "ngIf"], [1, "adf-version-list-container"], [1, "adf-version-list-table"], ["mat-raised-button", "", "id", "adf-show-version-upload-button", "color", "primary", 3, "click", 4, "ngIf"], [3, "node", "allowDownload", "showComments", "deleted", "restored", "viewVersion"], ["versionList", ""], [3, "node", "newFileVersion"], [1, "adf-version-upload"], ["id", "adf-version-upload-button", 3, "node", "newFileVersion", "currentVersion", "success", "cancel", "error"], ["mat-raised-button", "", "id", "adf-show-version-upload-button", "color", "primary", 3, "click"]], template: function VersionManagerComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵtemplate(1, VersionManagerComponent_adf_version_comparison_1_Template, 1, 2, "adf-version-comparison", 1);
        ɵngcc0.ɵɵelementStart(2, "div", 2);
        ɵngcc0.ɵɵtemplate(3, VersionManagerComponent_table_3_Template, 4, 3, "table", 3);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(4, "div", 4);
        ɵngcc0.ɵɵelementStart(5, "div", 5);
        ɵngcc0.ɵɵelementStart(6, "div");
        ɵngcc0.ɵɵtemplate(7, VersionManagerComponent_button_7_Template, 3, 3, "button", 6);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(8, "div");
        ɵngcc0.ɵɵelementStart(9, "adf-version-list", 7, 8);
        ɵngcc0.ɵɵlistener("deleted", function VersionManagerComponent_Template_adf_version_list_deleted_9_listener($event) { return ctx.refresh($event); })("restored", function VersionManagerComponent_Template_adf_version_list_restored_9_listener($event) { return ctx.refresh($event); })("viewVersion", function VersionManagerComponent_Template_adf_version_list_viewVersion_9_listener($event) { return ctx.onViewVersion($event); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        var _r3 = ɵngcc0.ɵɵreference(10);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.showVersionComparison);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("@uploadToggle", ctx.uploadState);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.uploadState !== "close" && !_r3.isLoading);
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵproperty("ngIf", ctx.uploadState === "close");
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("node", ctx.node)("allowDownload", ctx.allowDownload)("showComments", ctx.showComments);
    } }, directives: function () { return [ɵngcc23.NgIf, VersionListComponent, VersionComparisonComponent, VersionUploadComponent, ɵngcc1.MatButton]; }, pipes: function () { return [ɵngcc25.TranslatePipe]; }, styles: ["adf-version-manager .mat-list .mat-3-line{height:auto!important;width:100%!important}adf-version-manager .mat-list-item-content{padding:16px 0!important}.adf-version-list-item-comment.mat-line{height:100%;overflow:unset!important;white-space:unset!important;word-break:break-all}.adf-button.adf-upload-new-version{box-shadow:none;float:left;height:175px;position:relative;width:100%}.adf-new-version-uploader-container{float:left;height:0;padding:16px 0;position:relative;width:100%}.adf-new-version-container{height:inherit;overflow:hidden}.adf-version-list-table,.adf-version-upload-table{width:100%}.adf-version-list{width:100%!important}.adf-new-version-uploader-container,.adf-version-list{float:left!important}"], encapsulation: 2, data: { animation: [
            animations.trigger('uploadToggle', [
                animations.state('open', animations.style({ height: '175px', opacity: 1, visibility: 'visible' })),
                animations.state('close', animations.style({ height: '0%', opacity: 0, visibility: 'hidden' })),
                animations.transition('open => close', [
                    animations.style({ visibility: 'hidden' }),
                    animations.animate('0.4s cubic-bezier(0.25, 0.8, 0.25, 1)')
                ]),
                animations.transition('close => open', [
                    animations.style({ visibility: 'visible' }),
                    animations.animate('0.4s cubic-bezier(0.25, 0.8, 0.25, 1)')
                ])
            ])
        ] } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(VersionManagerComponent, [{
        type: i0.Component,
        args: [{
                selector: 'adf-version-manager',
                template: "<div class=\"adf-new-version-container\">\n\n    <adf-version-comparison *ngIf=\"showVersionComparison\" [node]=\"node\" [newFileVersion]=\"newFileVersion\"></adf-version-comparison>\n\n    <div class=\"adf-new-version-uploader-container\" id=\"adf-new-version-uploader-container\" fxLayout=\"row\" fxLayoutAlign=\"end center\" [@uploadToggle]=\"uploadState\">\n        <table class=\"adf-version-upload\" *ngIf=\"uploadState !== 'close' && !versionList.isLoading\">\n            <tr>\n                <td>\n                    <adf-version-upload\n                        id=\"adf-version-upload-button\"\n                        [node]=\"node\"\n                        [newFileVersion]=\"newFileVersion\"\n                        [currentVersion]=\"versionList?.versions[0]?.entry\"\n                        (success)=\"onUploadSuccess($event)\"\n                        (cancel)=\"onUploadCancel()\"\n                        (error)=\"onUploadError($event)\">\n                    </adf-version-upload>\n                </td>\n            </tr>\n        </table>\n    </div>\n\n    <div class=\"adf-version-list-container\">\n        <div class=\"adf-version-list-table\">\n            <div>\n                <button mat-raised-button\n                        id=\"adf-show-version-upload-button\"\n                        (click)=\"toggleNewVersion()\" color=\"primary\"\n                        *ngIf=\"uploadState ==='close'\">{{\n                    'ADF_VERSION_LIST.ACTIONS.UPLOAD.ADD'|\n                    translate }}\n                </button>\n            </div>\n            <div>\n\n                <adf-version-list\n                    #versionList\n                    [node]=\"node\"\n                    [allowDownload]=\"allowDownload\"\n                    [showComments]=\"showComments\"\n                    (deleted)=\"refresh($event)\"\n                    (restored)=\"refresh($event)\"\n                    (viewVersion)=\"onViewVersion($event)\">\n                </adf-version-list>\n            </div>\n        </div>\n    </div>\n</div>\n",
                animations: [
                    animations.trigger('uploadToggle', [
                        animations.state('open', animations.style({ height: '175px', opacity: 1, visibility: 'visible' })),
                        animations.state('close', animations.style({ height: '0%', opacity: 0, visibility: 'hidden' })),
                        animations.transition('open => close', [
                            animations.style({ visibility: 'hidden' }),
                            animations.animate('0.4s cubic-bezier(0.25, 0.8, 0.25, 1)')
                        ]),
                        animations.transition('close => open', [
                            animations.style({ visibility: 'visible' }),
                            animations.animate('0.4s cubic-bezier(0.25, 0.8, 0.25, 1)')
                        ])
                    ])
                ],
                encapsulation: i0.ViewEncapsulation.None,
                styles: ["adf-version-manager .mat-list .mat-3-line{height:auto!important;width:100%!important}adf-version-manager .mat-list-item-content{padding:16px 0!important}.adf-version-list-item-comment.mat-line{height:100%;overflow:unset!important;white-space:unset!important;word-break:break-all}.adf-button.adf-upload-new-version{box-shadow:none;float:left;height:175px;position:relative;width:100%}.adf-new-version-uploader-container{float:left;height:0;padding:16px 0;position:relative;width:100%}.adf-new-version-container{height:inherit;overflow:hidden}.adf-version-list-table,.adf-version-upload-table{width:100%}.adf-version-list{width:100%!important}.adf-new-version-uploader-container,.adf-version-list{float:left!important}"]
            }]
    }], function () { return [{ type: ɵngcc21.ContentService }, { type: ɵngcc21.AlfrescoApiService }]; }, { showComments: [{
            type: i0.Input
        }], showVersionComparison: [{
            type: i0.Input
        }], allowDownload: [{
            type: i0.Input
        }], uploadSuccess: [{
            type: i0.Output
        }], uploadError: [{
            type: i0.Output
        }], uploadCancel: [{
            type: i0.Output
        }], viewVersion: [{
            type: i0.Output
        }], newFileVersion: [{
            type: i0.Input
        }], node: [{
            type: i0.Input
        }], versionListComponent: [{
            type: i0.ViewChild,
            args: ['versionList', { static: true }]
        }] }); })();
        return VersionManagerComponent;
    }());
    VersionManagerComponent.ctorParameters = function () { return [
        { type: i1.ContentService },
        { type: i1.AlfrescoApiService }
    ]; };
    VersionManagerComponent.propDecorators = {
        node: [{ type: i0.Input }],
        newFileVersion: [{ type: i0.Input }],
        showComments: [{ type: i0.Input }],
        showVersionComparison: [{ type: i0.Input }],
        allowDownload: [{ type: i0.Input }],
        uploadSuccess: [{ type: i0.Output }],
        uploadError: [{ type: i0.Output }],
        uploadCancel: [{ type: i0.Output }],
        viewVersion: [{ type: i0.Output }],
        versionListComponent: [{ type: i0.ViewChild, args: ['versionList', { static: true },] }]
    };

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var VersionUploadComponent = /** @class */ (function () {
        function VersionUploadComponent(contentService, uploadService) {
            this.contentService = contentService;
            this.uploadService = uploadService;
            this.semanticVersion = 'minor';
            this.uploadVersion = false;
            this.disabled = false;
            this.onDestroy$ = new rxjs.Subject();
            this.majorVersion = '2.0';
            this.minorVersion = '1.1';
            this.showUploadButton = true;
            this.showCancelButton = true;
            this.success = new i0.EventEmitter();
            this.error = new i0.EventEmitter();
            this.cancel = new i0.EventEmitter();
            this.versionChanged = new i0.EventEmitter();
            this.commentChanged = new i0.EventEmitter();
            this.uploadStarted = new i0.EventEmitter();
        }
        Object.defineProperty(VersionUploadComponent.prototype, "currentVersion", {
            set: function (version) {
                if (version) {
                    this.minorVersion = this.getNextMinorVersion(version.id);
                    this.majorVersion = this.getNextMajorVersion(version.id);
                }
            },
            enumerable: false,
            configurable: true
        });
        VersionUploadComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.uploadService.fileUploadStarting
                .pipe(operators.takeUntil(this.onDestroy$))
                .subscribe(function (event) {
                _this.disabled = true;
                _this.uploadStarted.emit(event);
            });
        };
        VersionUploadComponent.prototype.canUpload = function () {
            return this.contentService.hasAllowableOperations(this.node, 'update') && !this.disabled;
        };
        VersionUploadComponent.prototype.isMajorVersion = function () {
            return this.semanticVersion !== 'minor';
        };
        VersionUploadComponent.prototype.cancelUpload = function () {
            this.disabled = false;
            this.cancel.emit();
        };
        VersionUploadComponent.prototype.onVersionChange = function () {
            this.versionChanged.emit(this.isMajorVersion());
        };
        VersionUploadComponent.prototype.onCommentChange = function () {
            this.commentChanged.emit(this.comment);
        };
        VersionUploadComponent.prototype.onSuccess = function (event) {
            this.disabled = false;
            this.success.emit(event);
        };
        VersionUploadComponent.prototype.onError = function (event) {
            this.disabled = false;
            this.error.emit(event);
        };
        VersionUploadComponent.prototype.ngOnDestroy = function () {
            this.onDestroy$.next();
            this.onDestroy$.complete();
        };
        VersionUploadComponent.prototype.getNextMinorVersion = function (version) {
            var _a = this.getParsedVersion(version), major = _a.major, minor = _a.minor;
            return major + "." + (minor + 1);
        };
        VersionUploadComponent.prototype.getNextMajorVersion = function (version) {
            var major = this.getParsedVersion(version).major;
            return major + 1 + ".0";
        };
        VersionUploadComponent.prototype.getParsedVersion = function (version) {
            var minor = version.indexOf('.') !== -1 ? Number(version.substr(version.indexOf('.') + 1)) : 0;
            var major = parseInt(version, 10);
            return { minor: minor, major: major };
        };
VersionUploadComponent.ɵfac = function VersionUploadComponent_Factory(t) { return new (t || VersionUploadComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc21.ContentService), ɵngcc0.ɵɵdirectiveInject(ɵngcc21.UploadService)); };
VersionUploadComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: VersionUploadComponent, selectors: [["adf-version-upload"]], hostAttrs: [1, "adf-version-upload"], inputs: { showUploadButton: "showUploadButton", showCancelButton: "showCancelButton", currentVersion: "currentVersion", node: "node", newFileVersion: "newFileVersion" }, outputs: { success: "success", error: "error", cancel: "cancel", versionChanged: "versionChanged", commentChanged: "commentChanged", uploadStarted: "uploadStarted" }, decls: 14, vars: 21, consts: [[1, "adf-new-version-max-width"], [1, "adf-new-version-radio-group", 3, "ngModel", "ngModelChange", "change"], ["id", "adf-new-version-minor", 1, "adf-new-version-radio-button", 3, "value"], ["id", "adf-new-version-major", 1, "adf-new-version-radio-button", 3, "value"], ["matInput", "", "id", "adf-new-version-text-area", 1, "adf-new-version-text-area", 3, "ngModel", "placeholder", "ngModelChange", "change"], [1, "adf-version-upload-buttons"], ["data-automation-id", "adf-new-version-file-upload", 3, "staticTitle", "node", "disabled", "rootFolderId", "tooltip", "comment", "versioning", "file", "majorVersion", "success", "error", 4, "ngIf"], ["mat-raised-button", "", "id", "adf-new-version-cancel", 3, "click", 4, "ngIf"], ["data-automation-id", "adf-new-version-file-upload", 3, "staticTitle", "node", "disabled", "rootFolderId", "tooltip", "comment", "versioning", "file", "majorVersion", "success", "error"], ["mat-raised-button", "", "id", "adf-new-version-cancel", 3, "click"]], template: function VersionUploadComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "mat-radio-group", 1);
        ɵngcc0.ɵɵlistener("ngModelChange", function VersionUploadComponent_Template_mat_radio_group_ngModelChange_1_listener($event) { return ctx.semanticVersion = $event; })("change", function VersionUploadComponent_Template_mat_radio_group_change_1_listener() { return ctx.onVersionChange(); });
        ɵngcc0.ɵɵelementStart(2, "mat-radio-button", 2);
        ɵngcc0.ɵɵtext(3);
        ɵngcc0.ɵɵpipe(4, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(5, "mat-radio-button", 3);
        ɵngcc0.ɵɵtext(6);
        ɵngcc0.ɵɵpipe(7, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(8, "mat-form-field", 0);
        ɵngcc0.ɵɵelementStart(9, "textarea", 4);
        ɵngcc0.ɵɵlistener("ngModelChange", function VersionUploadComponent_Template_textarea_ngModelChange_9_listener($event) { return ctx.comment = $event; })("change", function VersionUploadComponent_Template_textarea_change_9_listener() { return ctx.onCommentChange(); });
        ɵngcc0.ɵɵpipe(10, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(11, "div", 5);
        ɵngcc0.ɵɵtemplate(12, VersionUploadComponent_adf_upload_version_button_12_Template, 3, 13, "adf-upload-version-button", 6);
        ɵngcc0.ɵɵtemplate(13, VersionUploadComponent_button_13_Template, 3, 3, "button", 7);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngModel", ctx.semanticVersion);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("value", "minor");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind2(4, 9, "ADF_VERSION_LIST.ACTIONS.UPLOAD.MINOR", ɵngcc0.ɵɵpureFunction1(17, _c12, ctx.minorVersion)), " ");
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("value", "major");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind2(7, 12, "ADF_VERSION_LIST.ACTIONS.UPLOAD.MAJOR", ɵngcc0.ɵɵpureFunction1(19, _c12, ctx.majorVersion)), " ");
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵpropertyInterpolate("placeholder", ɵngcc0.ɵɵpipeBind1(10, 15, "ADF_VERSION_LIST.ACTIONS.UPLOAD.COMMENT"));
        ɵngcc0.ɵɵproperty("ngModel", ctx.comment);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngIf", ctx.showUploadButton);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.showCancelButton);
    } }, directives: [ɵngcc17.MatRadioGroup, ɵngcc26.NgControlStatus, ɵngcc26.NgModel, ɵngcc17.MatRadioButton, ɵngcc27.MatFormField, ɵngcc6.MatInput, ɵngcc26.DefaultValueAccessor, ɵngcc23.NgIf, UploadVersionButtonComponent, ɵngcc1.MatButton], pipes: [ɵngcc25.TranslatePipe], styles: [".adf-new-version-radio-group{display:inline-flex;flex-direction:column}.adf-new-version-radio-button{margin:5px}.adf-version-upload-buttons{display:flex;float:right;justify-content:space-between;width:100%}.adf-new-version-max-width{float:right;width:100%}.adf-new-version-text-area{resize:none!important}"], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(VersionUploadComponent, [{
        type: i0.Component,
        args: [{
                selector: 'adf-version-upload',
                template: "<div class=\"adf-new-version-max-width\">\n    <mat-radio-group class=\"adf-new-version-radio-group\" [(ngModel)]=\"semanticVersion\" (change)=\"onVersionChange()\">\n        <mat-radio-button class=\"adf-new-version-radio-button\" id=\"adf-new-version-minor\"[value]=\"'minor'\">\n            {{ 'ADF_VERSION_LIST.ACTIONS.UPLOAD.MINOR' | translate: { version: minorVersion } }}\n        </mat-radio-button>\n        <mat-radio-button class=\"adf-new-version-radio-button\" id=\"adf-new-version-major\" [value]=\"'major'\">\n            {{ 'ADF_VERSION_LIST.ACTIONS.UPLOAD.MAJOR' | translate: { version: majorVersion } }}\n        </mat-radio-button>\n    </mat-radio-group>\n    <mat-form-field class=\"adf-new-version-max-width\">\n                    <textarea matInput [(ngModel)]=\"comment\" class=\"adf-new-version-text-area\" id=\"adf-new-version-text-area\"\n                              (change)=\"onCommentChange()\"\n                              placeholder=\"{{ 'ADF_VERSION_LIST.ACTIONS.UPLOAD.COMMENT' | translate }}\"></textarea>\n    </mat-form-field>\n\n</div>\n<div class=\"adf-version-upload-buttons\">\n    <adf-upload-version-button *ngIf=\"showUploadButton\"\n        data-automation-id=\"adf-new-version-file-upload\"\n        staticTitle=\"{{ 'ADF_VERSION_LIST.ACTIONS.UPLOAD.TITLE' | translate }}\"\n        [node]=\"node\"\n        [disabled]=\"!canUpload()\"\n        [rootFolderId]=\"node.parentId\"\n        tooltip=\"{{ 'ADF_VERSION_LIST.ACTIONS.UPLOAD.TOOLTIP' | translate }}\"\n        [comment]=\"comment\"\n        [versioning]=\"true\"\n        [file]=\"newFileVersion\"\n        [majorVersion]=\"isMajorVersion()\"\n        (success)=\"onSuccess($event)\"\n        (error)=\"onError($event)\">\n    </adf-upload-version-button>\n    <button mat-raised-button (click)=\"cancelUpload()\" id=\"adf-new-version-cancel\"  *ngIf=\"showCancelButton\" >{{\n        'ADF_VERSION_LIST.ACTIONS.UPLOAD.CANCEL'| translate }}\n    </button>\n</div>\n",
                encapsulation: i0.ViewEncapsulation.None,
                host: { 'class': 'adf-version-upload' },
                styles: [".adf-new-version-radio-group{display:inline-flex;flex-direction:column}.adf-new-version-radio-button{margin:5px}.adf-version-upload-buttons{display:flex;float:right;justify-content:space-between;width:100%}.adf-new-version-max-width{float:right;width:100%}.adf-new-version-text-area{resize:none!important}"]
            }]
    }], function () { return [{ type: ɵngcc21.ContentService }, { type: ɵngcc21.UploadService }]; }, { showUploadButton: [{
            type: i0.Input
        }], showCancelButton: [{
            type: i0.Input
        }], success: [{
            type: i0.Output
        }], error: [{
            type: i0.Output
        }], cancel: [{
            type: i0.Output
        }], versionChanged: [{
            type: i0.Output
        }], commentChanged: [{
            type: i0.Output
        }], uploadStarted: [{
            type: i0.Output
        }], currentVersion: [{
            type: i0.Input
        }], node: [{
            type: i0.Input
        }], newFileVersion: [{
            type: i0.Input
        }] }); })();
        return VersionUploadComponent;
    }());
    VersionUploadComponent.ctorParameters = function () { return [
        { type: i1.ContentService },
        { type: i1.UploadService }
    ]; };
    VersionUploadComponent.propDecorators = {
        node: [{ type: i0.Input }],
        newFileVersion: [{ type: i0.Input }],
        showUploadButton: [{ type: i0.Input }],
        showCancelButton: [{ type: i0.Input }],
        currentVersion: [{ type: i0.Input }],
        success: [{ type: i0.Output }],
        error: [{ type: i0.Output }],
        cancel: [{ type: i0.Output }],
        versionChanged: [{ type: i0.Output }],
        commentChanged: [{ type: i0.Output }],
        uploadStarted: [{ type: i0.Output }]
    };

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var VersionComparisonComponent = /** @class */ (function () {
        function VersionComparisonComponent(thumbnailService) {
            this.thumbnailService = thumbnailService;
        }
VersionComparisonComponent.ɵfac = function VersionComparisonComponent_Factory(t) { return new (t || VersionComparisonComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc21.ThumbnailService)); };
VersionComparisonComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: VersionComparisonComponent, selectors: [["adf-version-comparison"]], inputs: { node: "node", newFileVersion: "newFileVersion" }, decls: 33, vars: 60, consts: [[1, "adf-version-comparison-content"], [1, "adf-version-current"], [3, "src"], [1, "adf-version-comparison-node-name", 3, "title"], [1, "material-icons", "adf-version-arrow-icon"], [1, "adf-version-new"], [1, "adf-version-comparison-file-name", 3, "title"]], template: function VersionComparisonComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "div", 1);
        ɵngcc0.ɵɵelementStart(2, "p");
        ɵngcc0.ɵɵtext(3);
        ɵngcc0.ɵɵpipe(4, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(5, "img", 2);
        ɵngcc0.ɵɵpipe(6, "translate");
        ɵngcc0.ɵɵpipe(7, "translate");
        ɵngcc0.ɵɵpipe(8, "uppercase");
        ɵngcc0.ɵɵpipe(9, "fileType");
        ɵngcc0.ɵɵpipe(10, "translate");
        ɵngcc0.ɵɵpipe(11, "translate");
        ɵngcc0.ɵɵpipe(12, "uppercase");
        ɵngcc0.ɵɵpipe(13, "fileType");
        ɵngcc0.ɵɵelementStart(14, "p", 3);
        ɵngcc0.ɵɵtext(15);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(16, "span", 4);
        ɵngcc0.ɵɵtext(17, "keyboard_arrow_right");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(18, "div", 5);
        ɵngcc0.ɵɵelementStart(19, "p");
        ɵngcc0.ɵɵtext(20);
        ɵngcc0.ɵɵpipe(21, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(22, "img", 2);
        ɵngcc0.ɵɵpipe(23, "translate");
        ɵngcc0.ɵɵpipe(24, "translate");
        ɵngcc0.ɵɵpipe(25, "uppercase");
        ɵngcc0.ɵɵpipe(26, "fileType");
        ɵngcc0.ɵɵpipe(27, "translate");
        ɵngcc0.ɵɵpipe(28, "translate");
        ɵngcc0.ɵɵpipe(29, "uppercase");
        ɵngcc0.ɵɵpipe(30, "fileType");
        ɵngcc0.ɵɵelementStart(31, "p", 6);
        ɵngcc0.ɵɵtext(32);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(4, 12, "ADF_VERSION_COMPARISON.CURRENT_VERSION"));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵpropertyInterpolate("src", ctx.thumbnailService.getMimeTypeIcon(ctx.node.content.mimeType), ɵngcc0.ɵɵsanitizeUrl);
        ɵngcc0.ɵɵattribute("aria-label", ɵngcc0.ɵɵpipeBind2(6, 14, "ADF_VERSION_COMPARISON.ACCESSIBILITY.ICON_TEXT", ɵngcc0.ɵɵpureFunction1(52, _c33, ɵngcc0.ɵɵpipeBind1(7, 17, ɵngcc0.ɵɵpipeBind1(8, 19, ɵngcc0.ɵɵpipeBind1(9, 21, ctx.node.content.mimeType))))))("alt", ɵngcc0.ɵɵpipeBind2(10, 23, "ADF_VERSION_COMPARISON.ACCESSIBILITY.ICON_TEXT", ɵngcc0.ɵɵpureFunction1(54, _c33, ɵngcc0.ɵɵpipeBind1(11, 26, ɵngcc0.ɵɵpipeBind1(12, 28, ɵngcc0.ɵɵpipeBind1(13, 30, ctx.node.content.mimeType))))));
        ɵngcc0.ɵɵadvance(9);
        ɵngcc0.ɵɵpropertyInterpolate("title", ctx.node.name);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate(ctx.node.name);
        ɵngcc0.ɵɵadvance(5);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(21, 32, "ADF_VERSION_COMPARISON.NEW_VERSION"));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵpropertyInterpolate("src", ctx.thumbnailService.getMimeTypeIcon(ctx.newFileVersion.type), ɵngcc0.ɵɵsanitizeUrl);
        ɵngcc0.ɵɵattribute("aria-label", ɵngcc0.ɵɵpipeBind2(23, 34, "ADF_VERSION_COMPARISON.ACCESSIBILITY.ICON_TEXT", ɵngcc0.ɵɵpureFunction1(56, _c33, ɵngcc0.ɵɵpipeBind1(24, 37, ɵngcc0.ɵɵpipeBind1(25, 39, ɵngcc0.ɵɵpipeBind1(26, 41, ctx.newFileVersion.type))))))("alt", ɵngcc0.ɵɵpipeBind2(27, 43, "ADF_VERSION_COMPARISON.ACCESSIBILITY.ICON_TEXT", ɵngcc0.ɵɵpureFunction1(58, _c33, ɵngcc0.ɵɵpipeBind1(28, 46, ɵngcc0.ɵɵpipeBind1(29, 48, ɵngcc0.ɵɵpipeBind1(30, 50, ctx.newFileVersion.type))))));
        ɵngcc0.ɵɵadvance(9);
        ɵngcc0.ɵɵpropertyInterpolate("title", ctx.newFileVersion.name);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate(ctx.newFileVersion.name);
    } }, pipes: [ɵngcc25.TranslatePipe, ɵngcc23.UpperCasePipe, ɵngcc21.FileTypePipe], styles: [".adf-version-comparison-content{align-content:center;align-items:center;display:flex;justify-content:space-around}.adf-version-current,.adf-version-new{align-items:center;display:flex;flex-direction:column}.adf-version-current img,.adf-version-new img{width:100px}.adf-version-arrow-icon{font-size:var(--theme-display-4-font-size)}.adf-version-comparison-file-name,.adf-version-comparison-node-name{overflow:hidden;text-align:center;text-overflow:ellipsis;white-space:nowrap;width:120px}"], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(VersionComparisonComponent, [{
        type: i0.Component,
        args: [{
                selector: 'adf-version-comparison',
                template: "<div class=\"adf-version-comparison-content\">\n    <div class=\"adf-version-current\">\n        <p>{{'ADF_VERSION_COMPARISON.CURRENT_VERSION'|translate }}</p>\n        <img [attr.aria-label]=\"'ADF_VERSION_COMPARISON.ACCESSIBILITY.ICON_TEXT' | translate:\n        { type: (node.content.mimeType | fileType | uppercase) | translate  }\"\n             [attr.alt]=\"'ADF_VERSION_COMPARISON.ACCESSIBILITY.ICON_TEXT' | translate:\n             { type: (node.content.mimeType | fileType | uppercase) | translate }\"\n             src=\"{{thumbnailService.getMimeTypeIcon(node.content.mimeType)}}\"/>\n        <p class=\"adf-version-comparison-node-name\" title=\"{{node.name}}\">{{node.name}}</p>\n    </div>\n    <span class=\"material-icons adf-version-arrow-icon\">keyboard_arrow_right</span>\n    <div class=\"adf-version-new\">\n        <p>{{'ADF_VERSION_COMPARISON.NEW_VERSION'|translate }}</p>\n        <img [attr.aria-label]=\"'ADF_VERSION_COMPARISON.ACCESSIBILITY.ICON_TEXT' | translate:\n        { type: (newFileVersion.type | fileType | uppercase) | translate  }\"\n             [attr.alt]=\"'ADF_VERSION_COMPARISON.ACCESSIBILITY.ICON_TEXT' | translate:\n             { type: (newFileVersion.type | fileType | uppercase) | translate }\"\n            src=\"{{thumbnailService.getMimeTypeIcon(newFileVersion.type)}}\"/>\n        <p class=\"adf-version-comparison-file-name\" title=\"{{newFileVersion.name}}\">{{newFileVersion.name}}</p>\n    </div>\n</div>\n",
                encapsulation: i0.ViewEncapsulation.None,
                styles: [".adf-version-comparison-content{align-content:center;align-items:center;display:flex;justify-content:space-around}.adf-version-current,.adf-version-new{align-items:center;display:flex;flex-direction:column}.adf-version-current img,.adf-version-new img{width:100px}.adf-version-arrow-icon{font-size:var(--theme-display-4-font-size)}.adf-version-comparison-file-name,.adf-version-comparison-node-name{overflow:hidden;text-align:center;text-overflow:ellipsis;white-space:nowrap;width:120px}"]
            }]
    }], function () { return [{ type: ɵngcc21.ThumbnailService }]; }, { node: [{
            type: i0.Input
        }], newFileVersion: [{
            type: i0.Input
        }] }); })();
        return VersionComparisonComponent;
    }());
    VersionComparisonComponent.ctorParameters = function () { return [
        { type: i1.ThumbnailService }
    ]; };
    VersionComparisonComponent.propDecorators = {
        node: [{ type: i0.Input }],
        newFileVersion: [{ type: i0.Input }]
    };

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var VersionManagerModule = /** @class */ (function () {
        function VersionManagerModule() {
        }
VersionManagerModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: VersionManagerModule });
VersionManagerModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function VersionManagerModule_Factory(t) { return new (t || VersionManagerModule)(); }, imports: [[
            common.CommonModule,
            MaterialModule,
            i1.CoreModule,
            UploadModule,
            forms.FormsModule
        ], ɵngcc26.FormsModule] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(VersionManagerModule, { declarations: [VersionUploadComponent, VersionManagerComponent, VersionListComponent, VersionComparisonComponent], imports: [ɵngcc23.CommonModule, MaterialModule, ɵngcc21.CoreModule, UploadModule, ɵngcc26.FormsModule], exports: [VersionUploadComponent, VersionManagerComponent, VersionListComponent, ɵngcc26.FormsModule, VersionComparisonComponent] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(VersionManagerModule, [{
        type: i0.NgModule,
        args: [{
                imports: [
                    common.CommonModule,
                    MaterialModule,
                    i1.CoreModule,
                    UploadModule,
                    forms.FormsModule
                ],
                exports: [
                    VersionUploadComponent,
                    VersionManagerComponent,
                    VersionListComponent,
                    forms.FormsModule,
                    VersionComparisonComponent
                ],
                declarations: [
                    VersionUploadComponent,
                    VersionManagerComponent,
                    VersionListComponent,
                    VersionComparisonComponent
                ]
            }]
    }], function () { return []; }, null); })();
        return VersionManagerModule;
    }());

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var NameLocationCellComponent = /** @class */ (function () {
        function NameLocationCellComponent() {
            this.name = '';
            this.path = '';
        }
        NameLocationCellComponent.prototype.ngOnInit = function () {
            if (this.row) {
                this.name = this.row.getValue('name');
                var fullPath = this.row.getValue('path');
                if (fullPath) {
                    this.path = fullPath.name || '';
                }
            }
        };
NameLocationCellComponent.ɵfac = function NameLocationCellComponent_Factory(t) { return new (t || NameLocationCellComponent)(); };
NameLocationCellComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: NameLocationCellComponent, selectors: [["adf-name-location-cell"]], hostAttrs: [1, "adf-name-location-cell", "adf-datatable-content-cell"], inputs: { row: "row" }, decls: 4, vars: 4, consts: [[1, "adf-name-location-cell-name", "adf-datatable-cell-value", 3, "title"], [1, "adf-name-location-cell-location", "adf-datatable-cell-value", 3, "title"]], template: function NameLocationCellComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵtext(1);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(2, "div", 1);
        ɵngcc0.ɵɵtext(3);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("title", ctx.name);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate(ctx.name);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("title", ctx.path);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate(ctx.path);
    } }, styles: [".adf-name-location-cell{display:grid}.adf-name-location-cell-location{color:var(--theme-text-color);font-size:12px}"], encapsulation: 2, changeDetection: 0 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NameLocationCellComponent, [{
        type: i0.Component,
        args: [{
                selector: 'adf-name-location-cell',
                template: "\n        <div class=\"adf-name-location-cell-name adf-datatable-cell-value\" [title]=\"name\">{{ name }}</div>\n        <div class=\"adf-name-location-cell-location adf-datatable-cell-value\" [title]=\"path\">{{ path }}</div>\n    ",
                encapsulation: i0.ViewEncapsulation.None,
                changeDetection: i0.ChangeDetectionStrategy.OnPush,
                host: { class: 'adf-name-location-cell adf-datatable-content-cell' },
                styles: [".adf-name-location-cell{display:grid}.adf-name-location-cell-location{color:var(--theme-text-color);font-size:12px}"]
            }]
    }], function () { return []; }, { row: [{
            type: i0.Input
        }] }); })();
        return NameLocationCellComponent;
    }());
    NameLocationCellComponent.propDecorators = {
        row: [{ type: i0.Input }]
    };

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var defaultValidation = function () { return true; };
    var ContentNodeSelectorPanelComponent = /** @class */ (function () {
        function ContentNodeSelectorPanelComponent(customResourcesService, queryBuilderService, userPreferencesService, nodesApiService, uploadService, sitesService, appConfigService, contentNodeSelectorPanelService) {
            this.customResourcesService = customResourcesService;
            this.queryBuilderService = queryBuilderService;
            this.userPreferencesService = userPreferencesService;
            this.nodesApiService = nodesApiService;
            this.uploadService = uploadService;
            this.sitesService = sitesService;
            this.appConfigService = appConfigService;
            this.contentNodeSelectorPanelService = contentNodeSelectorPanelService;
            this.DEFAULT_PAGINATION = new jsApi.Pagination({
                maxItems: 25,
                skipCount: 0
            });
            this.showSiteList = true;
            this.showSearchField = true;
            this.showCounter = false;
            this.restrictRootToCurrentFolderId = false;
            this.currentFolderId = null;
            this.dropdownHideMyFiles = false;
            this.dropdownSiteList = null;
            this._rowFilter = defaultValidation;
            this._excludeSiteContent = [];
            this.imageResolver = null;
            this.pageSize = this.DEFAULT_PAGINATION.maxItems;
            this.selectionMode = 'single';
            this.isSelectionValid = defaultValidation;
            this.select = new i0.EventEmitter();
            this.navigationChange = new i0.EventEmitter();
            this.siteChange = new i0.EventEmitter();
            this.showingSearch = new i0.EventEmitter();
            this.currentFolder = new i0.EventEmitter();
            this.folderLoaded = new i0.EventEmitter();
            this.nodePaging = null;
            this.searchTerm = '';
            this.showingSearchResults = false;
            this.loadingSearchResults = false;
            this.inDialog = false;
            this._chosenNode = null;
            this.selectionWithoutValidation = null;
            this.folderIdToShow = null;
            this.breadcrumbFolderTitle = null;
            this.startSiteGuid = null;
            this.hasValidQuery = false;
            this.showHeader = i1.ShowHeaderMode.Never;
            this.infiniteScroll = false;
            this.debounceSearch = 200;
            this.searchInput = new forms.FormControl();
            this.preselectedNodes = [];
            this.currentUploadBatch = [];
            this.searchPanelExpanded = false;
            this.onDestroy$ = new rxjs.Subject();
        }
        Object.defineProperty(ContentNodeSelectorPanelComponent.prototype, "rowFilter", {
            get: function () {
                return this._rowFilter;
            },
            set: function (rowFilter) {
                this.createRowFilter(rowFilter);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ContentNodeSelectorPanelComponent.prototype, "excludeSiteContent", {
            get: function () {
                return this._excludeSiteContent;
            },
            set: function (excludeSiteContent) {
                this._excludeSiteContent = excludeSiteContent;
                this.createRowFilter(this._rowFilter);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ContentNodeSelectorPanelComponent.prototype, "showSearch", {
            get: function () {
                return this.showSearchField;
            },
            set: function (value) {
                if (value !== undefined && value !== null) {
                    this.showSearchField = value;
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ContentNodeSelectorPanelComponent.prototype, "showDropdownSiteList", {
            get: function () {
                return this.showSiteList;
            },
            set: function (value) {
                if (value !== undefined && value !== null) {
                    this.showSiteList = value;
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ContentNodeSelectorPanelComponent.prototype, "showFilesInResult", {
            set: function (value) {
                if (value !== undefined && value !== null) {
                    var showFilesQuery = "TYPE:'cm:folder'" + (value ? " OR TYPE:'cm:content'" : '');
                    this.queryBuilderService.addFilterQuery(showFilesQuery);
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ContentNodeSelectorPanelComponent.prototype, "showNodeCounter", {
            get: function () {
                return this.showCounter;
            },
            set: function (value) {
                this.showCounter = value !== null && value !== void 0 ? value : false;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ContentNodeSelectorPanelComponent.prototype, "chosenNode", {
            get: function () {
                return this._chosenNode;
            },
            set: function (value) {
                this._chosenNode = value;
                this.select.next(value);
            },
            enumerable: false,
            configurable: true
        });
        ContentNodeSelectorPanelComponent.prototype.getSelectedCount = function () {
            var _a;
            return ((_a = this.chosenNode) === null || _a === void 0 ? void 0 : _a.length) || 0;
        };
        ContentNodeSelectorPanelComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.searchInput.valueChanges
                .pipe(operators.debounceTime(this.debounceSearch), operators.takeUntil(this.onDestroy$))
                .subscribe(function (searchValue) {
                _this.searchTerm = searchValue;
                _this.queryBuilderService.userQuery = searchValue.length > 0 ? searchValue + "*" : searchValue;
                _this.queryBuilderService.update();
            });
            this.queryBuilderService.updated
                .pipe(operators.takeUntil(this.onDestroy$))
                .subscribe(function (queryBody) {
                if (queryBody) {
                    _this.hasValidQuery = true;
                    _this.prepareDialogForNewSearch(queryBody);
                    _this.queryBuilderService.execute(queryBody);
                }
                else {
                    _this.hasValidQuery = false;
                    _this.resetFolderToShow();
                    _this.clearSearch();
                }
            });
            this.queryBuilderService.executed
                .pipe(operators.takeUntil(this.onDestroy$))
                .subscribe(function (results) {
                if (_this.hasValidQuery) {
                    _this.showSearchResults(results);
                }
            });
            this.userPreferencesService
                .select(i1.UserPreferenceValues.PaginationSize)
                .pipe(operators.takeUntil(this.onDestroy$))
                .subscribe(function (pagSize) { return _this.pageSize = pagSize; });
            this.target = this.documentList;
            this.folderIdToShow = this.currentFolderId;
            if (this.currentFolderId) {
                if (this.restrictRootToCurrentFolderId) {
                    this.breadcrumbRootId = this.currentFolderId;
                    this.siteId = this.currentFolderId;
                }
                else {
                    this.getStartSite();
                }
            }
            this.breadcrumbTransform = this.breadcrumbTransform ? this.breadcrumbTransform : null;
            this.isSelectionValid = this.isSelectionValid ? this.isSelectionValid : defaultValidation;
            this.onFileUploadEvent();
            this.onFileUploadDeletedEvent();
            this.resetPagination();
            this.setSearchScopeToNodes();
            this.documentList.$folderNode
                .pipe(operators.takeUntil(this.onDestroy$))
                .subscribe(function (currentNode) {
                _this.currentFolder.emit(currentNode);
            });
            this.sorting = this.appConfigService.get('adf-content-node-selector.sorting', ['createdAt', 'desc']);
        };
        ContentNodeSelectorPanelComponent.prototype.ngOnDestroy = function () {
            this.onDestroy$.next(true);
            this.onDestroy$.complete();
        };
        ContentNodeSelectorPanelComponent.prototype.toggleSearchPanel = function () {
            this.searchPanelExpanded = !this.searchPanelExpanded;
        };
        ContentNodeSelectorPanelComponent.prototype.hasCustomModels = function () {
            var _a, _b;
            return ((_b = (_a = this.contentNodeSelectorPanelService) === null || _a === void 0 ? void 0 : _a.customModels) === null || _b === void 0 ? void 0 : _b.length) > 0;
        };
        ContentNodeSelectorPanelComponent.prototype.onFileUploadEvent = function () {
            var _this = this;
            this.uploadService.fileUploadComplete
                .pipe(operators.debounceTime(500), operators.takeUntil(this.onDestroy$))
                .subscribe(function (fileUploadEvent) {
                _this.currentUploadBatch.push(fileUploadEvent.data);
                if (!_this.uploadService.isUploading()) {
                    _this.preselectedNodes = _this.getPreselectNodesBasedOnSelectionMode();
                    _this.currentUploadBatch = [];
                    _this.documentList.reloadWithoutResettingSelection();
                }
            });
        };
        ContentNodeSelectorPanelComponent.prototype.onFileUploadDeletedEvent = function () {
            var _this = this;
            this.uploadService.fileUploadDeleted
                .pipe(operators.takeUntil(this.onDestroy$))
                .subscribe(function (deletedFileEvent) {
                _this.documentList.unselectRowFromNodeId(deletedFileEvent.file.data.entry.id);
                _this.documentList.reloadWithoutResettingSelection();
            });
        };
        ContentNodeSelectorPanelComponent.prototype.getStartSite = function () {
            var _this = this;
            this.nodesApiService.getNode(this.currentFolderId).subscribe(function (startNodeEntry) {
                _this.startSiteGuid = _this.sitesService.getSiteNameFromNodePath(startNodeEntry);
                if (_this.startSiteGuid) {
                    _this.sitesService.getSite(_this.startSiteGuid).subscribe(function (startSiteEntry) {
                        if (startSiteEntry instanceof jsApi.SiteEntry) {
                            _this.siteChange.emit(startSiteEntry.entry.title);
                        }
                    });
                }
            });
        };
        ContentNodeSelectorPanelComponent.prototype.createRowFilter = function (filter) {
            var _this = this;
            if (!filter) {
                filter = function () { return true; };
            }
            this._rowFilter = function (value, index, array) {
                return filter(value, index, array) &&
                    !_this.isExcludedSiteContent(value);
            };
        };
        ContentNodeSelectorPanelComponent.prototype.isExcludedSiteContent = function (row) {
            var entry = row.node.entry;
            if (this._excludeSiteContent && this._excludeSiteContent.length &&
                entry &&
                entry.properties &&
                entry.properties['st:componentId']) {
                var excludedItem = this._excludeSiteContent.find(function (id) { return entry.properties['st:componentId'] === id; });
                return !!excludedItem;
            }
            return false;
        };
        ContentNodeSelectorPanelComponent.prototype.siteChanged = function (chosenSite) {
            this.siteId = chosenSite.entry.guid;
            this.setTitleIfCustomSite(chosenSite);
            this.siteChange.emit(chosenSite.entry.title);
            this.queryBuilderService.update();
        };
        Object.defineProperty(ContentNodeSelectorPanelComponent.prototype, "breadcrumbFolderNode", {
            get: function () {
                var _a;
                var folderNode;
                if (this.showingSearchResults && ((_a = this.selectionWithoutValidation) === null || _a === void 0 ? void 0 : _a.length)) {
                    folderNode = this.selectionWithoutValidation[0];
                }
                else {
                    folderNode = this.documentList.folderNode;
                }
                return folderNode;
            },
            enumerable: false,
            configurable: true
        });
        ContentNodeSelectorPanelComponent.prototype.prepareDialogForNewSearch = function (queryBody) {
            this.target = queryBody ? null : this.documentList;
            if (this.target) {
                this.infinitePaginationComponent.reset();
            }
            this.folderIdToShow = null;
            this.preselectedNodes = [];
            this.loadingSearchResults = true;
            this.addCorrespondingNodeIdsQuery();
            this.resetChosenNode();
        };
        ContentNodeSelectorPanelComponent.prototype.clear = function () {
            this.searchTerm = '';
            this.queryBuilderService.userQuery = '';
            this.queryBuilderService.update();
        };
        ContentNodeSelectorPanelComponent.prototype.resetFolderToShow = function () {
            this.folderIdToShow = this.siteId || this.currentFolderId;
        };
        ContentNodeSelectorPanelComponent.prototype.clearSearch = function () {
            this.searchTerm = '';
            this.nodePaging = null;
            this.resetPagination();
            this.resetChosenNode();
            this.showingSearchResults = false;
            this.showingSearch.emit(this.showingSearchResults);
        };
        ContentNodeSelectorPanelComponent.prototype.addCorrespondingNodeIdsQuery = function () {
            var _this = this;
            var extraParentFiltering = '';
            if (this.customResourcesService.hasCorrespondingNodeIds(this.siteId)) {
                this.customResourcesService.getCorrespondingNodeIds(this.siteId)
                    .subscribe(function (nodeIds) {
                    if (nodeIds && nodeIds.length) {
                        nodeIds
                            .filter(function (id) { return id !== _this.siteId; })
                            .forEach(function (extraId) {
                            extraParentFiltering += " OR ANCESTOR:'workspace://SpacesStore/" + extraId + "'";
                        });
                    }
                    var parentFiltering = _this.siteId ? "ANCESTOR:'workspace://SpacesStore/" + _this.siteId + "'" + extraParentFiltering : '';
                    _this.queryBuilderService.addFilterQuery(parentFiltering);
                });
            }
            else {
                var parentFiltering = this.siteId ? "ANCESTOR:'workspace://SpacesStore/" + this.siteId + "'" : '';
                this.queryBuilderService.addFilterQuery(parentFiltering);
            }
        };
        ContentNodeSelectorPanelComponent.prototype.setSearchScopeToNodes = function () {
            var scope = {
                locations: 'nodes'
            };
            this.queryBuilderService.setScope(scope);
        };
        ContentNodeSelectorPanelComponent.prototype.showSearchResults = function (results) {
            this.showingSearchResults = true;
            this.loadingSearchResults = false;
            this.showingSearch.emit(this.showingSearchResults);
            this.nodePaging = results;
        };
        ContentNodeSelectorPanelComponent.prototype.onFolderChange = function ($event) {
            this.folderIdToShow = $event.value.id;
            this.showingSearchResults = false;
            this.infiniteScroll = false;
            this.breadcrumbFolderTitle = null;
            this.preselectedNodes = [];
            this.clearSearch();
            this.navigationChange.emit($event);
        };
        ContentNodeSelectorPanelComponent.prototype.onFolderLoaded = function (nodePaging) {
            this.updatePaginationAfterRowFilter(nodePaging);
            if (!this.showingSearchResults) {
                this.attemptNodeSelection(this.documentList.folderNode);
            }
            this.folderLoaded.emit();
        };
        ContentNodeSelectorPanelComponent.prototype.updatePaginationAfterRowFilter = function (nodePaging) {
            if (this.documentList.data.getRows().length < nodePaging.list.pagination.maxItems) {
                nodePaging.list.pagination.hasMoreItems = false;
            }
        };
        ContentNodeSelectorPanelComponent.prototype.showBreadcrumbs = function () {
            return !this.showingSearchResults || this.chosenNode;
        };
        ContentNodeSelectorPanelComponent.prototype.getNextPageOfSearch = function (pagination) {
            this.infiniteScroll = true;
            this.queryBuilderService.paging.maxItems = pagination.maxItems;
            this.queryBuilderService.paging.skipCount = pagination.skipCount;
            if (this.searchTerm.length > 0) {
                this.queryBuilderService.update();
            }
        };
        ContentNodeSelectorPanelComponent.prototype.attemptNodeSelection = function (entry) {
            if (entry && this.isSelectionValid(entry)) {
                this.chosenNode = [entry];
            }
        };
        ContentNodeSelectorPanelComponent.prototype.resetChosenNode = function () {
            this.chosenNode = null;
        };
        ContentNodeSelectorPanelComponent.prototype.onCurrentSelection = function (nodesEntries) {
            var _this = this;
            var validNodesEntity = nodesEntries.filter(function (node) { return _this.isSelectionValid(node.entry); });
            this.chosenNode = validNodesEntity.map(function (node) { return node.entry; });
            this.selectionWithoutValidation = nodesEntries.map(function (node) { return node.entry; });
        };
        ContentNodeSelectorPanelComponent.prototype.setTitleIfCustomSite = function (site) {
            if (this.customResourcesService.isCustomSource(site.entry.guid)) {
                this.breadcrumbFolderTitle = site.entry.title;
                if (this.documentList.folderNode.path.elements) {
                    this.breadcrumbFolderNode.name = site.entry.title;
                    this.documentList.folderNode.path.elements = null;
                }
            }
            else {
                this.breadcrumbFolderTitle = null;
            }
        };
        ContentNodeSelectorPanelComponent.prototype.hasPreselectNodes = function () {
            var _a;
            return ((_a = this.preselectedNodes) === null || _a === void 0 ? void 0 : _a.length) > 0;
        };
        ContentNodeSelectorPanelComponent.prototype.isSingleSelectionMode = function () {
            return this.selectionMode === 'single';
        };
        ContentNodeSelectorPanelComponent.prototype.getPreselectNodesBasedOnSelectionMode = function () {
            var _a;
            var selectedNodes = [];
            if ((_a = this.currentUploadBatch) === null || _a === void 0 ? void 0 : _a.length) {
                if (this.isSingleSelectionMode()) {
                    selectedNodes = [this.currentUploadBatch[this.currentUploadBatch.length - 1]];
                }
                else {
                    selectedNodes = this.currentUploadBatch;
                }
            }
            return selectedNodes;
        };
        ContentNodeSelectorPanelComponent.prototype.resetPagination = function () {
            this.queryBuilderService.paging = {
                maxItems: this.pageSize,
                skipCount: this.DEFAULT_PAGINATION.skipCount
            };
        };
ContentNodeSelectorPanelComponent.ɵfac = function ContentNodeSelectorPanelComponent_Factory(t) { return new (t || ContentNodeSelectorPanelComponent)(ɵngcc0.ɵɵdirectiveInject(CustomResourcesService), ɵngcc0.ɵɵdirectiveInject(SEARCH_QUERY_SERVICE_TOKEN), ɵngcc0.ɵɵdirectiveInject(ɵngcc21.UserPreferencesService), ɵngcc0.ɵɵdirectiveInject(ɵngcc21.NodesApiService), ɵngcc0.ɵɵdirectiveInject(ɵngcc21.UploadService), ɵngcc0.ɵɵdirectiveInject(ɵngcc21.SitesService), ɵngcc0.ɵɵdirectiveInject(ɵngcc21.AppConfigService), ɵngcc0.ɵɵdirectiveInject(ContentNodeSelectorPanelService)); };
ContentNodeSelectorPanelComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ContentNodeSelectorPanelComponent, selectors: [["adf-content-node-selector-panel"]], viewQuery: function ContentNodeSelectorPanelComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵstaticViewQuery(_c34, true);
        ɵngcc0.ɵɵstaticViewQuery(i1.HighlightDirective, true);
        ɵngcc0.ɵɵstaticViewQuery(i1.InfinitePaginationComponent, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.documentList = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.highlighter = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.infinitePaginationComponent = _t.first);
    } }, hostAttrs: [1, "adf-content-node-selector-panel"], inputs: { restrictRootToCurrentFolderId: "restrictRootToCurrentFolderId", currentFolderId: "currentFolderId", dropdownHideMyFiles: "dropdownHideMyFiles", dropdownSiteList: "dropdownSiteList", imageResolver: "imageResolver", pageSize: "pageSize", selectionMode: "selectionMode", isSelectionValid: "isSelectionValid", rowFilter: "rowFilter", excludeSiteContent: "excludeSiteContent", showSearch: "showSearch", showDropdownSiteList: "showDropdownSiteList", showFilesInResult: "showFilesInResult", showNodeCounter: "showNodeCounter", breadcrumbTransform: "breadcrumbTransform", where: "where" }, outputs: { select: "select", navigationChange: "navigationChange", siteChange: "siteChange", showingSearch: "showingSearch", currentFolder: "currentFolder", folderLoaded: "folderLoaded" }, features: [ɵngcc0.ɵɵProvidersFeature([{
                provide: SEARCH_QUERY_SERVICE_TOKEN,
                useClass: SearchQueryBuilderService
            }])], decls: 29, vars: 31, consts: [[1, "adf-content-node-selector-content"], ["floatPlaceholder", "never", "class", "adf-content-node-selector-content-input", 4, "ngIf"], ["class", "full-width", "data-automation-id", "content-node-selector-sites-combo", 3, "placeholder", "hideMyFiles", "siteList", "value", "change", 4, "ngIf"], ["data-automation-id", "adf-toggle-search-panel-button", "mat-icon-button", "", 3, "click", 4, "ngIf"], [1, "adf-content-node-selector-search-panel-container"], [4, "ngIf"], [1, "adf-content-node-selector-document-list-container"], ["class", "adf-content-node-selector-content-breadcrumb", "data-automation-id", "content-node-selector-content-breadcrumb", 3, "target", "rootId", "transform", "folderNode", "root", "navigate", 4, "ngIf"], [3, "adf-node-counter", 4, "ngIf"], ["data-automation-id", "content-node-selector-content-list", 1, "adf-content-node-selector-content-list"], ["adf-highlight-selector", ".adf-name-location-cell-name", "sortingMode", "server", "data-automation-id", "content-node-selector-document-list", 3, "adf-highlight", "showHeader", "node", "preselectNodes", "maxItems", "rowFilter", "imageResolver", "currentFolderId", "selectionMode", "contextMenuActions", "contentActions", "allowDropFiles", "sorting", "where", "folderChange", "ready", "nodeSelected"], ["documentList", ""], ["key", "$thumbnail", "type", "image"], ["key", "name", "type", "text", "title", "ADF-DOCUMENT-LIST.LAYOUT.NAME", 1, "adf-full-width", "adf-ellipsis-cell"], ["key", "modifiedAt", "type", "date", "title", "ADF-DOCUMENT-LIST.LAYOUT.MODIFIED_ON", "format", "timeAgo", 1, "adf-content-selector-modified-cell"], ["key", "createdByUser.displayName", "type", "text", "title", "ADF-DOCUMENT-LIST.LAYOUT.CREATED_BY", 1, "adf-content-selector-modifier-cell"], ["key", "visibility", "type", "text", "title", "ADF-DOCUMENT-LIST.LAYOUT.STATUS", 1, "adf-content-selector-visibility-cell"], ["data-automation-id", "content-node-selector-search-pagination", 3, "target", "loading", "loadMore"], ["floatPlaceholder", "never", 1, "adf-content-node-selector-content-input"], ["matInput", "", "id", "searchInput", "type", "text", "data-automation-id", "content-node-selector-search-input", 3, "formControl", "placeholder", "value"], ["matSuffix", "", "class", "adf-content-node-selector-content-input-icon", "data-automation-id", "content-node-selector-search-clear", 3, "click", 4, "ngIf"], ["matSuffix", "", "class", "adf-content-node-selector-content-input-icon", "data-automation-id", "content-node-selector-search-icon", 4, "ngIf"], ["matSuffix", "", "data-automation-id", "content-node-selector-search-clear", 1, "adf-content-node-selector-content-input-icon", 3, "click"], ["matSuffix", "", "data-automation-id", "content-node-selector-search-icon", 1, "adf-content-node-selector-content-input-icon"], ["data-automation-id", "content-node-selector-sites-combo", 1, "full-width", 3, "placeholder", "hideMyFiles", "siteList", "value", "change"], ["data-automation-id", "adf-toggle-search-panel-button", "mat-icon-button", "", 3, "click"], ["role", "heading", "aria-level", "3", 1, "adf-search-results-label"], ["data-automation-id", "content-node-selector-content-breadcrumb", 1, "adf-content-node-selector-content-breadcrumb", 3, "target", "rootId", "transform", "folderNode", "root", "navigate"], [3, "adf-node-counter"], [3, "row"]], template: function ContentNodeSelectorPanelComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵtemplate(1, ContentNodeSelectorPanelComponent_mat_form_field_1_Template, 5, 7, "mat-form-field", 1);
        ɵngcc0.ɵɵtemplate(2, ContentNodeSelectorPanelComponent_adf_sites_dropdown_2_Template, 1, 4, "adf-sites-dropdown", 2);
        ɵngcc0.ɵɵtemplate(3, ContentNodeSelectorPanelComponent_button_3_Template, 5, 3, "button", 3);
        ɵngcc0.ɵɵelementStart(4, "div", 4);
        ɵngcc0.ɵɵtemplate(5, ContentNodeSelectorPanelComponent_adf_search_panel_5_Template, 1, 0, "adf-search-panel", 5);
        ɵngcc0.ɵɵelementStart(6, "div", 6);
        ɵngcc0.ɵɵelementStart(7, "adf-toolbar");
        ɵngcc0.ɵɵelementStart(8, "adf-toolbar-title");
        ɵngcc0.ɵɵtemplate(9, ContentNodeSelectorPanelComponent_ng_container_9_Template, 4, 3, "ng-container", 5);
        ɵngcc0.ɵɵtemplate(10, ContentNodeSelectorPanelComponent_adf_dropdown_breadcrumb_10_Template, 1, 5, "adf-dropdown-breadcrumb", 7);
        ɵngcc0.ɵɵtemplate(11, ContentNodeSelectorPanelComponent_ng_container_11_Template, 1, 1, "ng-container", 8);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(12, "div", 9);
        ɵngcc0.ɵɵelementStart(13, "adf-document-list", 10, 11);
        ɵngcc0.ɵɵlistener("folderChange", function ContentNodeSelectorPanelComponent_Template_adf_document_list_folderChange_13_listener($event) { return ctx.onFolderChange($event); })("ready", function ContentNodeSelectorPanelComponent_Template_adf_document_list_ready_13_listener($event) { return ctx.onFolderLoaded($event); })("nodeSelected", function ContentNodeSelectorPanelComponent_Template_adf_document_list_nodeSelected_13_listener($event) { return ctx.onCurrentSelection($event); });
        ɵngcc0.ɵɵelementStart(15, "adf-custom-empty-content-template");
        ɵngcc0.ɵɵelementStart(16, "div");
        ɵngcc0.ɵɵtext(17);
        ɵngcc0.ɵɵpipe(18, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(19, "data-columns");
        ɵngcc0.ɵɵelement(20, "data-column", 12);
        ɵngcc0.ɵɵelementStart(21, "data-column", 13);
        ɵngcc0.ɵɵtemplate(22, ContentNodeSelectorPanelComponent_ng_template_22_Template, 1, 1, "ng-template");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(23, "data-column", 14);
        ɵngcc0.ɵɵelement(24, "data-column", 15);
        ɵngcc0.ɵɵelement(25, "data-column", 16);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(26, "adf-infinite-pagination", 17);
        ɵngcc0.ɵɵlistener("loadMore", function ContentNodeSelectorPanelComponent_Template_adf_infinite_pagination_loadMore_26_listener($event) { return ctx.getNextPageOfSearch($event); });
        ɵngcc0.ɵɵtext(27);
        ɵngcc0.ɵɵpipe(28, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.showSearch);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.showDropdownSiteList);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.hasCustomModels());
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.searchPanelExpanded);
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.showBreadcrumbs());
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.showBreadcrumbs());
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.showNodeCounter);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵclassProp("adf-content-node-selector-content-list-searchLayout", ctx.showingSearchResults);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("adf-highlight", ctx.searchTerm)("showHeader", ctx.showHeader)("node", ctx.nodePaging)("preselectNodes", ctx.preselectedNodes)("maxItems", ctx.pageSize)("rowFilter", ctx._rowFilter)("imageResolver", ctx.imageResolver)("currentFolderId", ctx.folderIdToShow)("selectionMode", ctx.selectionMode)("contextMenuActions", false)("contentActions", false)("allowDropFiles", false)("sorting", ctx.sorting)("where", ctx.where);
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(18, 27, "NODE_SELECTOR.NO_RESULTS"));
        ɵngcc0.ɵɵadvance(9);
        ɵngcc0.ɵɵproperty("target", ctx.target)("loading", ctx.loadingSearchResults);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(28, 29, "ADF-DOCUMENT-LIST.LAYOUT.LOAD_MORE"), " ");
    } }, directives: [ɵngcc23.NgIf, ɵngcc21.ToolbarComponent, ɵngcc21.ToolbarTitleComponent, DocumentListComponent, ɵngcc21.HighlightDirective, ɵngcc21.CustomEmptyContentTemplateDirective, ɵngcc21.DataColumnListComponent, ɵngcc21.DataColumnComponent, ɵngcc21.InfinitePaginationComponent, ɵngcc27.MatFormField, ɵngcc6.MatInput, ɵngcc26.DefaultValueAccessor, ɵngcc26.NgControlStatus, ɵngcc26.FormControlDirective, ɵngcc4.MatIcon, ɵngcc27.MatSuffix, DropdownSitesComponent, ɵngcc1.MatButton, SearchPanelComponent, DropdownBreadcrumbComponent, NodeCounterDirective, NameLocationCellComponent], pipes: [ɵngcc25.TranslatePipe], styles: [".adf-search-results-label{color:var(--theme-text-bold-color);flex:1;font-size:14px;font-stretch:normal;font-style:normal;font-weight:600;letter-spacing:-.2px;line-height:1.43}.adf-toolbar .mat-toolbar{border-bottom-width:0;font-size:14px;max-height:48px}.adf-toolbar .mat-toolbar.mat-toolbar-single-row{height:auto}.adf-content-node-selector-search-panel-container{display:flex}.adf-content-node-selector-document-list-container{width:100%}.adf-content-node-selector-content{padding-top:0}.adf-content-node-selector-content-input{width:100%}.adf-content-node-selector-content-input-icon{color:var(--adf-node-selector-icon-color);cursor:pointer}.adf-content-node-selector-content-input-icon:hover{color:var(--theme-fg-base-color)}.adf-content-node-selector-content .mat-form-field-underline .mat-form-field-ripple{height:1px;transition:none}.adf-content-node-selector-content .adf-site-dropdown-container .mat-form-field{display:block;margin-bottom:15px}.adf-content-node-selector-content .adf-site-dropdown-list-element{margin-bottom:0;width:100%}.adf-content-node-selector-content .adf-site-dropdown-list-element .mat-select-trigger{font-size:14px}.adf-content-node-selector-content-breadcrumb .adf-dropdown-breadcrumb-trigger{outline:none}.adf-content-node-selector-content-breadcrumb .adf-dropdown-breadcrumb-trigger .mat-icon{color:var(--adf-node-selector-base-color)}.adf-content-node-selector-content-breadcrumb .adf-dropdown-breadcrumb-trigger .mat-icon:hover{color:var(--adf-node-selector-base-bold-color)}.adf-content-node-selector-content-breadcrumb .adf-dropdown-breadcrumb-trigger:focus .mat-icon{color:var(--theme-primary-color)}.adf-content-node-selector-content-breadcrumb .adf-dropdown-breadcrumb-item-chevron{color:var(--adf-node-selector-base-color)}.adf-content-node-selector-content-list{border:1px solid var(--theme-border-color);border-top:0;height:300px;overflow:auto}.adf-content-node-selector-content-list .adf-highlight{color:var(--theme-primary-color)}.adf-content-node-selector-content-list .adf-datatable-list{border:none}.adf-content-node-selector-content-list .adf-datatable-list .adf-datatable-selected{height:100%;width:100%}.adf-content-node-selector-content-list .adf-datatable-list .adf-datatable-selected>svg{fill:#00bcd4!important}.adf-content-node-selector-content-list .adf-datatable-list .adf-no-content-container{border:none!important;text-align:center}.adf-content-node-selector-content-list .adf-datatable-list .adf-datatable-cell--image{max-width:35px;min-width:35px;width:35px}.adf-content-node-selector-content-list .adf-datatable-list .adf-datatable-cell:nth-child(2){flex:1 0 95px}.adf-content-node-selector-content-list .adf-datatable-list .adf-datatable-cell .adf-name-location-cell-location{display:none}.adf-content-node-selector-content-list .adf-datatable-list .adf-datatable-cell.adf-content-selector-visibility-cell{flex:0 1 auto;min-width:1px}.adf-content-node-selector-content-list .adf-datatable-list .adf-datatable-cell.adf-content-selector-visibility-cell .adf-datatable-cell-value{padding:0}.adf-content-node-selector-content-list .adf-datatable-list .adf-datatable-body .adf-datatable-row{min-height:40px}@media screen and (-ms-high-contrast:active),screen and (-ms-high-contrast:none){.adf-content-node-selector-content-list .adf-datatable-list .adf-datatable-body .adf-datatable-row{padding-top:15px}}.adf-content-node-selector-content-list .adf-datatable-list .adf-datatable-body .adf-datatable-row:first-child .adf-datatable-cell{border-top:none}.adf-content-node-selector-content-list .adf-datatable-list .adf-datatable-body .adf-datatable-row:last-child .adf-datatable-cell{border-bottom:none}.adf-content-node-selector-content-list-searchLayout .adf-datatable-list .adf-datatable-row{min-height:65px!important}.adf-content-node-selector-content-list-searchLayout .adf-datatable-list .adf-datatable-row .adf-datatable-cell .adf-name-location-cell-location{display:block;padding:0 10px}.adf-content-node-selector-content-list-searchLayout .adf-datatable-list .adf-datatable-row .adf-datatable-cell .adf-name-location-cell-name{padding:5px 10px 2px}.adf-content-node-selector-content-list-searchLayout .adf-datatable-list .adf-datatable-row .adf-datatable-cell.adf-content-selector-modified-cell,.adf-content-node-selector-content-list-searchLayout .adf-datatable-list .adf-datatable-row .adf-datatable-cell.adf-content-selector-modifier-cell,.adf-content-node-selector-content-list-searchLayout .adf-datatable-list .adf-datatable-row .adf-datatable-cell.adf-content-selector-visibility-cell{display:none}"], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ContentNodeSelectorPanelComponent, [{
        type: i0.Component,
        args: [{
                selector: 'adf-content-node-selector-panel',
                template: "<div class=\"adf-content-node-selector-content\">\n    <mat-form-field floatPlaceholder=\"never\" class=\"adf-content-node-selector-content-input\" *ngIf=\"showSearch\">\n        <input matInput\n            id=\"searchInput\"\n            [formControl]=\"searchInput\"\n            type=\"text\"\n            placeholder=\"{{'NODE_SELECTOR.SEARCH' | translate}}\"\n            [value]=\"searchTerm\"\n            data-automation-id=\"content-node-selector-search-input\">\n\n        <mat-icon *ngIf=\"searchTerm.length > 0\"\n            matSuffix (click)=\"clear()\"\n            class=\"adf-content-node-selector-content-input-icon\"\n            data-automation-id=\"content-node-selector-search-clear\">clear\n        </mat-icon>\n\n        <mat-icon *ngIf=\"searchTerm.length === 0\"\n            matSuffix\n            class=\"adf-content-node-selector-content-input-icon\"\n            data-automation-id=\"content-node-selector-search-icon\">search\n        </mat-icon>\n\n    </mat-form-field>\n    <adf-sites-dropdown\n        *ngIf=\"showDropdownSiteList\"\n        class=\"full-width\"\n        (change)=\"siteChanged($event)\"\n        [placeholder]=\"'NODE_SELECTOR.SELECT_LOCATION'\"\n        [hideMyFiles]=\"dropdownHideMyFiles\"\n        [siteList]=\"dropdownSiteList\"\n        [value]=\"startSiteGuid\"\n        data-automation-id=\"content-node-selector-sites-combo\">\n    </adf-sites-dropdown>\n    <button *ngIf=\"hasCustomModels()\"\n        data-automation-id=\"adf-toggle-search-panel-button\"\n        mat-icon-button\n        (click)=\"toggleSearchPanel()\">\n        <mat-icon>filter_list</mat-icon>\n        {{ 'SEARCH.SEARCH_HEADER.TITLE' | translate }}\n    </button>\n    <div class=\"adf-content-node-selector-search-panel-container\">\n        <adf-search-panel *ngIf=\"searchPanelExpanded\">\n        </adf-search-panel>\n        <div class=\"adf-content-node-selector-document-list-container\">\n    <adf-toolbar>\n        <adf-toolbar-title>\n            <ng-container *ngIf=\"!showBreadcrumbs()\">\n                <span role=\"heading\" aria-level=\"3\" class=\"adf-search-results-label\">{{ 'NODE_SELECTOR.SEARCH_RESULTS' | translate }}</span>\n            </ng-container>\n            <adf-dropdown-breadcrumb *ngIf=\"showBreadcrumbs()\"\n                class=\"adf-content-node-selector-content-breadcrumb\"\n                (navigate)=\"clearSearch()\"\n                [target]=\"documentList\"\n                [rootId]=\"breadcrumbRootId\"\n                [transform]=\"breadcrumbTransform\"\n                [folderNode]=\"breadcrumbFolderNode\"\n                [root]=\"breadcrumbFolderTitle\"\n                data-automation-id=\"content-node-selector-content-breadcrumb\">\n            </adf-dropdown-breadcrumb>\n            <ng-container *ngIf=\"showNodeCounter\" [adf-node-counter]=\"getSelectedCount()\"></ng-container>\n        </adf-toolbar-title>\n    </adf-toolbar>\n\n    <div\n        class=\"adf-content-node-selector-content-list\"\n        [class.adf-content-node-selector-content-list-searchLayout]=\"showingSearchResults\"\n        data-automation-id=\"content-node-selector-content-list\">\n        <adf-document-list\n            #documentList\n            [adf-highlight]=\"searchTerm\"\n            adf-highlight-selector=\".adf-name-location-cell-name\"\n            [showHeader]=\"showHeader\"\n            [node]=\"nodePaging\"\n            [preselectNodes]=\"preselectedNodes\"\n            [maxItems]=\"pageSize\"\n            [rowFilter]=\"_rowFilter\"\n            [imageResolver]=\"imageResolver\"\n            [currentFolderId]=\"folderIdToShow\"\n            [selectionMode]=\"selectionMode\"\n            [contextMenuActions]=\"false\"\n            [contentActions]=\"false\"\n            [allowDropFiles]=\"false\"\n            [sorting]=\"sorting\"\n            sortingMode=\"server\"\n            [where]=\"where\"\n            (folderChange)=\"onFolderChange($event)\"\n            (ready)=\"onFolderLoaded($event)\"\n            (nodeSelected)=\"onCurrentSelection($event)\"\n            data-automation-id=\"content-node-selector-document-list\">\n\n            <adf-custom-empty-content-template>\n                <div>{{ 'NODE_SELECTOR.NO_RESULTS' | translate }}</div>\n            </adf-custom-empty-content-template>\n\n            <data-columns>\n                <data-column key=\"$thumbnail\" type=\"image\"></data-column>\n                <data-column key=\"name\" type=\"text\" title=\"ADF-DOCUMENT-LIST.LAYOUT.NAME\" class=\"adf-full-width adf-ellipsis-cell\">\n                    <ng-template let-context>\n                        <adf-name-location-cell [row]=\"context.row\"></adf-name-location-cell>\n                    </ng-template>\n                </data-column>\n                <data-column key=\"modifiedAt\" type=\"date\" title=\"ADF-DOCUMENT-LIST.LAYOUT.MODIFIED_ON\" format=\"timeAgo\" class=\"adf-content-selector-modified-cell\"></data-column>\n                <data-column key=\"createdByUser.displayName\" type=\"text\" title=\"ADF-DOCUMENT-LIST.LAYOUT.CREATED_BY\" class=\"adf-content-selector-modifier-cell\"></data-column>\n                <data-column key=\"visibility\" type=\"text\" title=\"ADF-DOCUMENT-LIST.LAYOUT.STATUS\" class=\"adf-content-selector-visibility-cell\"></data-column>\n            </data-columns>\n\n        </adf-document-list>\n\n        <adf-infinite-pagination\n            [target]=\"target\"\n            [loading]=\"loadingSearchResults\"\n            (loadMore)=\"getNextPageOfSearch($event)\"\n            data-automation-id=\"content-node-selector-search-pagination\">\n            {{ 'ADF-DOCUMENT-LIST.LAYOUT.LOAD_MORE' | translate }}\n        </adf-infinite-pagination>\n    </div>\n        </div>\n    </div>\n</div>\n",
                encapsulation: i0.ViewEncapsulation.None,
                host: { 'class': 'adf-content-node-selector-panel' },
                providers: [{
                        provide: SEARCH_QUERY_SERVICE_TOKEN,
                        useClass: SearchQueryBuilderService
                    }],
                styles: [".adf-search-results-label{color:var(--theme-text-bold-color);flex:1;font-size:14px;font-stretch:normal;font-style:normal;font-weight:600;letter-spacing:-.2px;line-height:1.43}.adf-toolbar .mat-toolbar{border-bottom-width:0;font-size:14px;max-height:48px}.adf-toolbar .mat-toolbar.mat-toolbar-single-row{height:auto}.adf-content-node-selector-search-panel-container{display:flex}.adf-content-node-selector-document-list-container{width:100%}.adf-content-node-selector-content{padding-top:0}.adf-content-node-selector-content-input{width:100%}.adf-content-node-selector-content-input-icon{color:var(--adf-node-selector-icon-color);cursor:pointer}.adf-content-node-selector-content-input-icon:hover{color:var(--theme-fg-base-color)}.adf-content-node-selector-content .mat-form-field-underline .mat-form-field-ripple{height:1px;transition:none}.adf-content-node-selector-content .adf-site-dropdown-container .mat-form-field{display:block;margin-bottom:15px}.adf-content-node-selector-content .adf-site-dropdown-list-element{margin-bottom:0;width:100%}.adf-content-node-selector-content .adf-site-dropdown-list-element .mat-select-trigger{font-size:14px}.adf-content-node-selector-content-breadcrumb .adf-dropdown-breadcrumb-trigger{outline:none}.adf-content-node-selector-content-breadcrumb .adf-dropdown-breadcrumb-trigger .mat-icon{color:var(--adf-node-selector-base-color)}.adf-content-node-selector-content-breadcrumb .adf-dropdown-breadcrumb-trigger .mat-icon:hover{color:var(--adf-node-selector-base-bold-color)}.adf-content-node-selector-content-breadcrumb .adf-dropdown-breadcrumb-trigger:focus .mat-icon{color:var(--theme-primary-color)}.adf-content-node-selector-content-breadcrumb .adf-dropdown-breadcrumb-item-chevron{color:var(--adf-node-selector-base-color)}.adf-content-node-selector-content-list{border:1px solid var(--theme-border-color);border-top:0;height:300px;overflow:auto}.adf-content-node-selector-content-list .adf-highlight{color:var(--theme-primary-color)}.adf-content-node-selector-content-list .adf-datatable-list{border:none}.adf-content-node-selector-content-list .adf-datatable-list .adf-datatable-selected{height:100%;width:100%}.adf-content-node-selector-content-list .adf-datatable-list .adf-datatable-selected>svg{fill:#00bcd4!important}.adf-content-node-selector-content-list .adf-datatable-list .adf-no-content-container{border:none!important;text-align:center}.adf-content-node-selector-content-list .adf-datatable-list .adf-datatable-cell--image{max-width:35px;min-width:35px;width:35px}.adf-content-node-selector-content-list .adf-datatable-list .adf-datatable-cell:nth-child(2){flex:1 0 95px}.adf-content-node-selector-content-list .adf-datatable-list .adf-datatable-cell .adf-name-location-cell-location{display:none}.adf-content-node-selector-content-list .adf-datatable-list .adf-datatable-cell.adf-content-selector-visibility-cell{flex:0 1 auto;min-width:1px}.adf-content-node-selector-content-list .adf-datatable-list .adf-datatable-cell.adf-content-selector-visibility-cell .adf-datatable-cell-value{padding:0}.adf-content-node-selector-content-list .adf-datatable-list .adf-datatable-body .adf-datatable-row{min-height:40px}@media screen and (-ms-high-contrast:active),screen and (-ms-high-contrast:none){.adf-content-node-selector-content-list .adf-datatable-list .adf-datatable-body .adf-datatable-row{padding-top:15px}}.adf-content-node-selector-content-list .adf-datatable-list .adf-datatable-body .adf-datatable-row:first-child .adf-datatable-cell{border-top:none}.adf-content-node-selector-content-list .adf-datatable-list .adf-datatable-body .adf-datatable-row:last-child .adf-datatable-cell{border-bottom:none}.adf-content-node-selector-content-list-searchLayout .adf-datatable-list .adf-datatable-row{min-height:65px!important}.adf-content-node-selector-content-list-searchLayout .adf-datatable-list .adf-datatable-row .adf-datatable-cell .adf-name-location-cell-location{display:block;padding:0 10px}.adf-content-node-selector-content-list-searchLayout .adf-datatable-list .adf-datatable-row .adf-datatable-cell .adf-name-location-cell-name{padding:5px 10px 2px}.adf-content-node-selector-content-list-searchLayout .adf-datatable-list .adf-datatable-row .adf-datatable-cell.adf-content-selector-modified-cell,.adf-content-node-selector-content-list-searchLayout .adf-datatable-list .adf-datatable-row .adf-datatable-cell.adf-content-selector-modifier-cell,.adf-content-node-selector-content-list-searchLayout .adf-datatable-list .adf-datatable-row .adf-datatable-cell.adf-content-selector-visibility-cell{display:none}"]
            }]
    }], function () { return [{ type: CustomResourcesService }, { type: SearchQueryBuilderService, decorators: [{
                type: i0.Inject,
                args: [SEARCH_QUERY_SERVICE_TOKEN]
            }] }, { type: ɵngcc21.UserPreferencesService }, { type: ɵngcc21.NodesApiService }, { type: ɵngcc21.UploadService }, { type: ɵngcc21.SitesService }, { type: ɵngcc21.AppConfigService }, { type: ContentNodeSelectorPanelService }]; }, { restrictRootToCurrentFolderId: [{
            type: i0.Input
        }], currentFolderId: [{
            type: i0.Input
        }], dropdownHideMyFiles: [{
            type: i0.Input
        }], dropdownSiteList: [{
            type: i0.Input
        }], imageResolver: [{
            type: i0.Input
        }], pageSize: [{
            type: i0.Input
        }], selectionMode: [{
            type: i0.Input
        }], isSelectionValid: [{
            type: i0.Input
        }], select: [{
            type: i0.Output
        }], navigationChange: [{
            type: i0.Output
        }], siteChange: [{
            type: i0.Output
        }], showingSearch: [{
            type: i0.Output
        }], currentFolder: [{
            type: i0.Output
        }], folderLoaded: [{
            type: i0.Output
        }], rowFilter: [{
            type: i0.Input
        }], excludeSiteContent: [{
            type: i0.Input
        }], showSearch: [{
            type: i0.Input
        }], showDropdownSiteList: [{
            type: i0.Input
        }], showFilesInResult: [{
            type: i0.Input
        }], showNodeCounter: [{
            type: i0.Input
        }], breadcrumbTransform: [{
            type: i0.Input
        }], where: [{
            type: i0.Input
        }], documentList: [{
            type: i0.ViewChild,
            args: ['documentList', { static: true }]
        }], highlighter: [{
            type: i0.ViewChild,
            args: [i1.HighlightDirective, { static: true }]
        }], infinitePaginationComponent: [{
            type: i0.ViewChild,
            args: [i1.InfinitePaginationComponent, { static: true }]
        }] }); })();
        return ContentNodeSelectorPanelComponent;
    }());
    ContentNodeSelectorPanelComponent.ctorParameters = function () { return [
        { type: CustomResourcesService },
        { type: SearchQueryBuilderService, decorators: [{ type: i0.Inject, args: [SEARCH_QUERY_SERVICE_TOKEN,] }] },
        { type: i1.UserPreferencesService },
        { type: i1.NodesApiService },
        { type: i1.UploadService },
        { type: i1.SitesService },
        { type: i1.AppConfigService },
        { type: ContentNodeSelectorPanelService }
    ]; };
    ContentNodeSelectorPanelComponent.propDecorators = {
        restrictRootToCurrentFolderId: [{ type: i0.Input }],
        currentFolderId: [{ type: i0.Input }],
        dropdownHideMyFiles: [{ type: i0.Input }],
        dropdownSiteList: [{ type: i0.Input }],
        where: [{ type: i0.Input }],
        rowFilter: [{ type: i0.Input }],
        excludeSiteContent: [{ type: i0.Input }],
        imageResolver: [{ type: i0.Input }],
        pageSize: [{ type: i0.Input }],
        selectionMode: [{ type: i0.Input }],
        isSelectionValid: [{ type: i0.Input }],
        breadcrumbTransform: [{ type: i0.Input }],
        showSearch: [{ type: i0.Input }],
        showDropdownSiteList: [{ type: i0.Input }],
        showFilesInResult: [{ type: i0.Input }],
        showNodeCounter: [{ type: i0.Input }],
        select: [{ type: i0.Output }],
        navigationChange: [{ type: i0.Output }],
        siteChange: [{ type: i0.Output }],
        showingSearch: [{ type: i0.Output }],
        currentFolder: [{ type: i0.Output }],
        folderLoaded: [{ type: i0.Output }],
        documentList: [{ type: i0.ViewChild, args: ['documentList', { static: true },] }],
        highlighter: [{ type: i0.ViewChild, args: [i1.HighlightDirective, { static: true },] }],
        infinitePaginationComponent: [{ type: i0.ViewChild, args: [i1.InfinitePaginationComponent, { static: true },] }]
    };

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var ContentNodeSelectorModule = /** @class */ (function () {
        function ContentNodeSelectorModule() {
        }
ContentNodeSelectorModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: ContentNodeSelectorModule });
ContentNodeSelectorModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function ContentNodeSelectorModule_Factory(t) { return new (t || ContentNodeSelectorModule)(); }, providers: [SearchQueryBuilderService], imports: [[
            forms.FormsModule,
            forms.ReactiveFormsModule,
            i1.CoreModule,
            common.CommonModule,
            MaterialModule,
            SitesDropdownModule,
            BreadcrumbModule,
            SearchModule,
            DocumentListModule,
            UploadModule,
            ContentDirectiveModule
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ContentNodeSelectorModule, { declarations: [ContentNodeSelectorPanelComponent, NameLocationCellComponent, ContentNodeSelectorComponent], imports: [ɵngcc26.FormsModule, ɵngcc26.ReactiveFormsModule, ɵngcc21.CoreModule, ɵngcc23.CommonModule, MaterialModule, SitesDropdownModule, BreadcrumbModule, SearchModule, DocumentListModule, UploadModule, ContentDirectiveModule], exports: [ContentNodeSelectorPanelComponent, NameLocationCellComponent, ContentNodeSelectorComponent] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ContentNodeSelectorModule, [{
        type: i0.NgModule,
        args: [{
                imports: [
                    forms.FormsModule,
                    forms.ReactiveFormsModule,
                    i1.CoreModule,
                    common.CommonModule,
                    MaterialModule,
                    SitesDropdownModule,
                    BreadcrumbModule,
                    SearchModule,
                    DocumentListModule,
                    UploadModule,
                    ContentDirectiveModule
                ],
                exports: [
                    ContentNodeSelectorPanelComponent,
                    NameLocationCellComponent,
                    ContentNodeSelectorComponent
                ],
                declarations: [
                    ContentNodeSelectorPanelComponent,
                    NameLocationCellComponent,
                    ContentNodeSelectorComponent
                ],
                providers: [SearchQueryBuilderService]
            }]
    }], function () { return []; }, null); })();
        return ContentNodeSelectorModule;
    }());

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var I18N_ERRORS_PATH = 'CORE.FOLDER_DIALOG.FOLDER_NAME.ERRORS';
    function forbidSpecialCharacters(_a) {
        var value = _a.value;
        var specialCharacters = /([\*\"\<\>\\\/\?\:\|])/;
        var isValid = !specialCharacters.test(value);
        return (isValid) ? null : {
            message: I18N_ERRORS_PATH + ".SPECIAL_CHARACTERS"
        };
    }
    function forbidEndingDot(_a) {
        var value = _a.value;
        var isValid = ((value || '').trim().split('').pop() !== '.');
        return isValid ? null : {
            message: I18N_ERRORS_PATH + ".ENDING_DOT"
        };
    }
    function forbidOnlySpaces(_a) {
        var value = _a.value;
        var isValid = !!((value || '')).trim();
        return isValid ? null : {
            message: I18N_ERRORS_PATH + ".ONLY_SPACES"
        };
    }

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var FolderDialogComponent = /** @class */ (function () {
        function FolderDialogComponent(formBuilder, dialog, nodesApi, translation, data) {
            this.formBuilder = formBuilder;
            this.dialog = dialog;
            this.nodesApi = nodesApi;
            this.translation = translation;
            this.data = data;
            this.folder = null;
            this.error = new i0.EventEmitter();
            this.success = new i0.EventEmitter();
            this.editTitle = 'CORE.FOLDER_DIALOG.EDIT_FOLDER_TITLE';
            this.createTitle = 'CORE.FOLDER_DIALOG.CREATE_FOLDER_TITLE';
            this.nodeType = 'cm:folder';
            if (data) {
                this.editTitle = data.editTitle || this.editTitle;
                this.createTitle = data.createTitle || this.createTitle;
                this.nodeType = data.nodeType || this.nodeType;
            }
        }
        Object.defineProperty(FolderDialogComponent.prototype, "editing", {
            get: function () {
                return !!this.data.folder;
            },
            enumerable: false,
            configurable: true
        });
        FolderDialogComponent.prototype.ngOnInit = function () {
            var _a, _b;
            var folder = this.data.folder;
            var name = '';
            var title = '';
            var description = '';
            if (folder) {
                var properties = folder.properties;
                name = folder.name || '';
                title = (_a = properties === null || properties === void 0 ? void 0 : properties['cm:title']) !== null && _a !== void 0 ? _a : '';
                description = (_b = properties === null || properties === void 0 ? void 0 : properties['cm:description']) !== null && _b !== void 0 ? _b : '';
            }
            var validators = {
                name: [
                    forms.Validators.required,
                    forbidSpecialCharacters,
                    forbidEndingDot,
                    forbidOnlySpaces
                ]
            };
            this.form = this.formBuilder.group({
                name: [name, validators.name],
                title: [title],
                description: [description]
            });
        };
        Object.defineProperty(FolderDialogComponent.prototype, "name", {
            get: function () {
                var name = this.form.value.name;
                return (name || '').trim();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(FolderDialogComponent.prototype, "title", {
            get: function () {
                var title = this.form.value.title;
                return (title || '').trim();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(FolderDialogComponent.prototype, "description", {
            get: function () {
                var description = this.form.value.description;
                return (description || '').trim();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(FolderDialogComponent.prototype, "properties", {
            get: function () {
                var _c = this, title = _c.title, description = _c.description;
                return {
                    'cm:title': title,
                    'cm:description': description
                };
            },
            enumerable: false,
            configurable: true
        });
        FolderDialogComponent.prototype.create = function () {
            var _c = this, name = _c.name, properties = _c.properties, nodeType = _c.nodeType, nodesApi = _c.nodesApi, parentNodeId = _c.data.parentNodeId;
            return nodesApi.createFolder(parentNodeId, { name: name, properties: properties, nodeType: nodeType });
        };
        FolderDialogComponent.prototype.edit = function () {
            var _c = this, name = _c.name, properties = _c.properties, nodesApi = _c.nodesApi, nodeId = _c.data.folder.id;
            return nodesApi.updateNode(nodeId, { name: name, properties: properties });
        };
        FolderDialogComponent.prototype.submit = function () {
            var _this = this;
            var _c = this, form = _c.form, dialog = _c.dialog, editing = _c.editing;
            if (!form.valid) {
                return;
            }
            (editing ? this.edit() : this.create())
                .subscribe(function (folder) {
                _this.success.emit(folder);
                dialog.close(folder);
            }, function (error) { return _this.handleError(error); });
        };
        FolderDialogComponent.prototype.handleError = function (error) {
            var errorMessage = 'CORE.MESSAGES.ERRORS.GENERIC';
            try {
                var statusCode = JSON.parse(error.message).error.statusCode;
                if (statusCode === 409) {
                    errorMessage = 'CORE.MESSAGES.ERRORS.EXISTENT_FOLDER';
                }
            }
            catch (err) { }
            this.error.emit(this.translation.instant(errorMessage));
            return error;
        };
FolderDialogComponent.ɵfac = function FolderDialogComponent_Factory(t) { return new (t || FolderDialogComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc26.FormBuilder), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.MatDialogRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc21.NodesApiService), ɵngcc0.ɵɵdirectiveInject(ɵngcc21.TranslationService), ɵngcc0.ɵɵdirectiveInject(i2.MAT_DIALOG_DATA, 8)); };
FolderDialogComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: FolderDialogComponent, selectors: [["adf-folder-dialog"]], outputs: { error: "error", success: "success" }, decls: 24, vars: 24, consts: [["mat-dialog-title", ""], [3, "formGroup", "submit"], [1, "adf-full-width"], ["id", "adf-folder-name-input", "matInput", "", "required", "", 3, "placeholder", "formControlName"], [4, "ngIf"], ["id", "adf-folder-title-input", "matInput", "", 3, "placeholder", "formControlName"], ["id", "adf-folder-description-input", "matInput", "", "rows", "4", 3, "placeholder", "formControlName"], [1, "adf-dialog-buttons"], [1, "adf-fill-remaining-space"], ["mat-button", "", "id", "adf-folder-cancel-button", "mat-dialog-close", ""], ["id", "adf-folder-create-button", "mat-button", "", 1, "adf-dialog-action-button", 3, "disabled", "click"]], template: function FolderDialogComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "h2", 0);
        ɵngcc0.ɵɵtext(1);
        ɵngcc0.ɵɵpipe(2, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(3, "mat-dialog-content");
        ɵngcc0.ɵɵelementStart(4, "form", 1);
        ɵngcc0.ɵɵlistener("submit", function FolderDialogComponent_Template_form_submit_4_listener() { return ctx.submit(); });
        ɵngcc0.ɵɵelementStart(5, "mat-form-field", 2);
        ɵngcc0.ɵɵelement(6, "input", 3);
        ɵngcc0.ɵɵpipe(7, "translate");
        ɵngcc0.ɵɵtemplate(8, FolderDialogComponent_mat_hint_8_Template, 3, 2, "mat-hint", 4);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(9, "mat-form-field", 2);
        ɵngcc0.ɵɵelement(10, "input", 5);
        ɵngcc0.ɵɵpipe(11, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(12, "mat-form-field", 2);
        ɵngcc0.ɵɵelementStart(13, "textarea", 6);
        ɵngcc0.ɵɵpipe(14, "translate");
        ɵngcc0.ɵɵtext(15, "            ");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(16, "mat-dialog-actions", 7);
        ɵngcc0.ɵɵelement(17, "span", 8);
        ɵngcc0.ɵɵelementStart(18, "button", 9);
        ɵngcc0.ɵɵtext(19);
        ɵngcc0.ɵɵpipe(20, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(21, "button", 10);
        ɵngcc0.ɵɵlistener("click", function FolderDialogComponent_Template_button_click_21_listener() { return ctx.submit(); });
        ɵngcc0.ɵɵtext(22);
        ɵngcc0.ɵɵpipe(23, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 12, ctx.editing ? ctx.editTitle : ctx.createTitle), "\n");
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("formGroup", ctx.form);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵpropertyInterpolate("placeholder", ɵngcc0.ɵɵpipeBind1(7, 14, "CORE.FOLDER_DIALOG.FOLDER_NAME.LABEL"));
        ɵngcc0.ɵɵproperty("formControlName", "name");
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.form.controls["name"].dirty);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵpropertyInterpolate("placeholder", ɵngcc0.ɵɵpipeBind1(11, 16, "CORE.FOLDER_DIALOG.FOLDER_TITLE.LABEL"));
        ɵngcc0.ɵɵproperty("formControlName", "title");
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵpropertyInterpolate("placeholder", ɵngcc0.ɵɵpipeBind1(14, 18, "CORE.FOLDER_DIALOG.FOLDER_DESCRIPTION.LABEL"));
        ɵngcc0.ɵɵproperty("formControlName", "description");
        ɵngcc0.ɵɵadvance(6);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(20, 20, "CORE.FOLDER_DIALOG.CANCEL_BUTTON.LABEL"), " ");
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("disabled", !ctx.form.valid);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(23, 22, ctx.editing ? "CORE.FOLDER_DIALOG.UPDATE_BUTTON.LABEL" : "CORE.FOLDER_DIALOG.CREATE_BUTTON.LABEL"), " ");
    } }, directives: [ɵngcc3.MatDialogTitle, ɵngcc3.MatDialogContent, ɵngcc26.ɵangular_packages_forms_forms_y, ɵngcc26.NgControlStatusGroup, ɵngcc26.FormGroupDirective, ɵngcc27.MatFormField, ɵngcc6.MatInput, ɵngcc26.DefaultValueAccessor, ɵngcc26.RequiredValidator, ɵngcc26.NgControlStatus, ɵngcc26.FormControlName, ɵngcc23.NgIf, ɵngcc3.MatDialogActions, ɵngcc1.MatButton, ɵngcc3.MatDialogClose, ɵngcc27.MatHint], pipes: [ɵngcc25.TranslatePipe], styles: [".adf-fill-remaining-space{flex:1 1 auto}.adf-full-width,.adf-lock-file-name .mat-checkbox-layout{width:100%}.adf-lock-file-name .mat-checkbox-label{overflow:hidden;text-overflow:ellipsis}.adf-lock-file-name .mat-checkbox-inner-container{margin:auto 8px auto 0}.adf-dialog-buttons button{text-transform:uppercase}.adf-dialog-action-button:enabled{color:var(--theme-primary-color)}.adf-dialog-action-button:disabled>span{color:var(--theme-text-color)}"], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FolderDialogComponent, [{
        type: i0.Component,
        args: [{
                selector: 'adf-folder-dialog',
                template: "<h2 mat-dialog-title>\n    {{ (editing ? editTitle : createTitle) | translate }}\n</h2>\n\n<mat-dialog-content>\n    <form [formGroup]=\"form\" (submit)=\"submit()\">\n        <mat-form-field class=\"adf-full-width\">\n            <input\n                id=\"adf-folder-name-input\"\n                placeholder=\"{{ 'CORE.FOLDER_DIALOG.FOLDER_NAME.LABEL' | translate }}\"\n                matInput\n                required\n                [formControlName]=\"'name'\"\n            />\n\n            <mat-hint *ngIf=\"form.controls['name'].dirty\">\n                <span *ngIf=\"form.controls['name'].errors?.required\">\n                    {{ 'CORE.FOLDER_DIALOG.FOLDER_NAME.ERRORS.REQUIRED' | translate }}\n                </span>\n\n                <span *ngIf=\"!form.controls['name'].errors?.required && form.controls['name'].errors?.message\">\n                    {{ form.controls['name'].errors?.message | translate }}\n                </span>\n            </mat-hint>\n        </mat-form-field>\n\n        <mat-form-field class=\"adf-full-width\">\n            <input\n                id=\"adf-folder-title-input\"\n                matInput\n                placeholder=\"{{ 'CORE.FOLDER_DIALOG.FOLDER_TITLE.LABEL' | translate }}\"\n                [formControlName]=\"'title'\"\n            />\n        </mat-form-field>\n\n        <mat-form-field class=\"adf-full-width\">\n            <textarea\n                id=\"adf-folder-description-input\"\n                matInput\n                placeholder=\"{{ 'CORE.FOLDER_DIALOG.FOLDER_DESCRIPTION.LABEL' | translate }}\"\n                rows=\"4\"\n                [formControlName]=\"'description'\">\n            </textarea>\n        </mat-form-field>\n    </form>\n</mat-dialog-content>\n\n<mat-dialog-actions class=\"adf-dialog-buttons\">\n    <span class=\"adf-fill-remaining-space\"></span>\n\n    <button\n        mat-button\n        id=\"adf-folder-cancel-button\"\n        mat-dialog-close>\n        {{ 'CORE.FOLDER_DIALOG.CANCEL_BUTTON.LABEL' | translate }}\n    </button>\n\n    <button class=\"adf-dialog-action-button\"\n            id=\"adf-folder-create-button\"\n            mat-button\n            (click)=\"submit()\"\n            [disabled]=\"!form.valid\">\n        {{\n        (editing\n        ? 'CORE.FOLDER_DIALOG.UPDATE_BUTTON.LABEL'\n        : 'CORE.FOLDER_DIALOG.CREATE_BUTTON.LABEL'\n        ) | translate\n        }}\n    </button>\n</mat-dialog-actions>\n",
                encapsulation: i0.ViewEncapsulation.None,
                styles: [".adf-fill-remaining-space{flex:1 1 auto}.adf-full-width,.adf-lock-file-name .mat-checkbox-layout{width:100%}.adf-lock-file-name .mat-checkbox-label{overflow:hidden;text-overflow:ellipsis}.adf-lock-file-name .mat-checkbox-inner-container{margin:auto 8px auto 0}.adf-dialog-buttons button{text-transform:uppercase}.adf-dialog-action-button:enabled{color:var(--theme-primary-color)}.adf-dialog-action-button:disabled>span{color:var(--theme-text-color)}"]
            }]
    }], function () { return [{ type: ɵngcc26.FormBuilder }, { type: ɵngcc3.MatDialogRef }, { type: ɵngcc21.NodesApiService }, { type: ɵngcc21.TranslationService }, { type: undefined, decorators: [{
                type: i0.Optional
            }, {
                type: i0.Inject,
                args: [i2.MAT_DIALOG_DATA]
            }] }]; }, { error: [{
            type: i0.Output
        }], success: [{
            type: i0.Output
        }] }); })();
        return FolderDialogComponent;
    }());
    FolderDialogComponent.ctorParameters = function () { return [
        { type: forms.FormBuilder },
        { type: i2.MatDialogRef },
        { type: i1.NodesApiService },
        { type: i1.TranslationService },
        { type: undefined, decorators: [{ type: i0.Optional }, { type: i0.Inject, args: [i2.MAT_DIALOG_DATA,] }] }
    ]; };
    FolderDialogComponent.propDecorators = {
        error: [{ type: i0.Output }],
        success: [{ type: i0.Output }]
    };

    var LibraryDialogComponent = /** @class */ (function () {
        function LibraryDialogComponent(alfrescoApiService, sitesService, formBuilder, dialog) {
            this.alfrescoApiService = alfrescoApiService;
            this.sitesService = sitesService;
            this.formBuilder = formBuilder;
            this.dialog = dialog;
            this.error = new i0.EventEmitter();
            this.success = new i0.EventEmitter();
            this.onDestroy$ = new rxjs.Subject();
            this.createTitle = 'LIBRARY.DIALOG.CREATE_TITLE';
            this.libraryTitleExists = false;
            this.visibilityOptions = [
                { value: 'PUBLIC', label: 'LIBRARY.VISIBILITY.PUBLIC', disabled: false },
                { value: 'PRIVATE', label: 'LIBRARY.VISIBILITY.PRIVATE', disabled: false },
                {
                    value: 'MODERATED',
                    label: 'LIBRARY.VISIBILITY.MODERATED',
                    disabled: false
                }
            ];
            this.disableCreateButton = false;
        }
        Object.defineProperty(LibraryDialogComponent.prototype, "queriesApi", {
            get: function () {
                var _a;
                this._queriesApi = (_a = this._queriesApi) !== null && _a !== void 0 ? _a : new jsApi.QueriesApi(this.alfrescoApiService.getInstance());
                return this._queriesApi;
            },
            enumerable: false,
            configurable: true
        });
        LibraryDialogComponent.prototype.ngOnInit = function () {
            var _this = this;
            var validators = {
                id: [
                    forms.Validators.required,
                    forms.Validators.maxLength(72),
                    this.forbidSpecialCharacters
                ],
                title: [
                    forms.Validators.required,
                    this.forbidOnlySpaces,
                    forms.Validators.minLength(2),
                    forms.Validators.maxLength(256)
                ],
                description: [forms.Validators.maxLength(512)]
            };
            this.form = this.formBuilder.group({
                title: [null, validators.title],
                id: [null, validators.id, this.createSiteIdValidator()],
                description: ['', validators.description]
            });
            this.visibilityOption = this.visibilityOptions[0].value;
            this.form.controls['title'].valueChanges
                .pipe(operators.debounceTime(500), operators.mergeMap(function (title) { return _this.checkLibraryNameExists(title); }, function (title) { return title; }), operators.takeUntil(this.onDestroy$))
                .subscribe(function (title) {
                if (!_this.form.controls['id'].dirty && _this.canGenerateId(title)) {
                    _this.form.patchValue({ id: _this.sanitize(title.trim()) });
                    _this.form.controls['id'].markAsTouched();
                }
            });
        };
        LibraryDialogComponent.prototype.ngOnDestroy = function () {
            this.onDestroy$.next(true);
            this.onDestroy$.complete();
        };
        Object.defineProperty(LibraryDialogComponent.prototype, "title", {
            get: function () {
                var title = this.form.value.title;
                return (title || '').trim();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(LibraryDialogComponent.prototype, "id", {
            get: function () {
                var id = this.form.value.id;
                return (id || '').trim();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(LibraryDialogComponent.prototype, "description", {
            get: function () {
                var description = this.form.value.description;
                return (description || '').trim();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(LibraryDialogComponent.prototype, "visibility", {
            get: function () {
                return this.visibilityOption || '';
            },
            enumerable: false,
            configurable: true
        });
        LibraryDialogComponent.prototype.submit = function () {
            var _this = this;
            var _b = this, form = _b.form, dialog = _b.dialog;
            if (!form.valid) {
                return;
            }
            this.disableCreateButton = true;
            this.create().pipe(operators.finalize(function () { return _this.disableCreateButton = false; })).subscribe(function (node) {
                _this.success.emit(node);
                dialog.close(node);
            }, function (error) { return _this.handleError(error); });
        };
        LibraryDialogComponent.prototype.visibilityChangeHandler = function (event) {
            this.visibilityOption = event.value;
        };
        LibraryDialogComponent.prototype.create = function () {
            var _b = this, title = _b.title, id = _b.id, description = _b.description, visibility = _b.visibility;
            var siteBody = {
                id: id,
                title: title,
                description: description,
                visibility: visibility
            };
            return this.sitesService.createSite(siteBody);
        };
        LibraryDialogComponent.prototype.sanitize = function (input) {
            return input.replace(/[\s\s]+/g, '-').replace(/[^A-Za-z0-9-]/g, '');
        };
        LibraryDialogComponent.prototype.canGenerateId = function (title) {
            return Boolean(title.replace(/[^A-Za-z0-9-]/g, '').length);
        };
        LibraryDialogComponent.prototype.handleError = function (error) {
            try {
                var statusCode = JSON.parse(error.message).error.statusCode;
                if (statusCode === 409) {
                    this.form.controls['id'].setErrors({
                        message: 'LIBRARY.ERRORS.CONFLICT'
                    });
                }
            }
            catch (error) {
            }
            return error;
        };
        LibraryDialogComponent.prototype.checkLibraryNameExists = function (libraryTitle) {
            return __awaiter(this, void 0, void 0, function () {
                var entries, _a_1;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            entries = [];
                            _b.label = 1;
                        case 1:
                            _b.trys.push([1, 3, , 4]);
                            return [4 /*yield*/, this.findLibraryByTitle(libraryTitle)];
                        case 2:
                            entries = (_b.sent()).list.entries;
                            return [3 /*break*/, 4];
                        case 3:
                            _a_1 = _b.sent();
                            entries = [];
                            return [3 /*break*/, 4];
                        case 4:
                            if (entries.length) {
                                this.libraryTitleExists = entries[0].entry.title.toLowerCase() === libraryTitle.toLowerCase();
                            }
                            else {
                                this.libraryTitleExists = false;
                            }
                            return [2 /*return*/];
                    }
                });
            });
        };
        LibraryDialogComponent.prototype.findLibraryByTitle = function (libraryTitle) {
            return this.queriesApi.findSites(libraryTitle, {
                maxItems: 1,
                fields: ['title']
            });
        };
        LibraryDialogComponent.prototype.forbidSpecialCharacters = function (_b) {
            var value = _b.value;
            if (value === null || value.length === 0) {
                return null;
            }
            var validCharacters = /[^A-Za-z0-9-]/;
            var isValid = !validCharacters.test(value);
            return isValid
                ? null
                : {
                    message: 'LIBRARY.ERRORS.ILLEGAL_CHARACTERS'
                };
        };
        LibraryDialogComponent.prototype.forbidOnlySpaces = function (_b) {
            var value = _b.value;
            if (value === null || value.length === 0) {
                return null;
            }
            var isValid = !!(value || '').trim();
            return isValid
                ? null
                : {
                    message: 'LIBRARY.ERRORS.ONLY_SPACES'
                };
        };
        LibraryDialogComponent.prototype.createSiteIdValidator = function () {
            var _this = this;
            var timer;
            return function (control) {
                if (timer) {
                    clearTimeout(timer);
                }
                return new Promise(function (resolve) {
                    timer = setTimeout(function () {
                        return _this.sitesService.getSite(control.value).subscribe(function () { return resolve({ message: 'LIBRARY.ERRORS.EXISTENT_SITE' }); }, function () { return resolve(null); });
                    }, 300);
                });
            };
        };
LibraryDialogComponent.ɵfac = function LibraryDialogComponent_Factory(t) { return new (t || LibraryDialogComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc21.AlfrescoApiService), ɵngcc0.ɵɵdirectiveInject(ɵngcc21.SitesService), ɵngcc0.ɵɵdirectiveInject(ɵngcc26.FormBuilder), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.MatDialogRef)); };
LibraryDialogComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: LibraryDialogComponent, selectors: [["adf-library-dialog"]], hostAttrs: [1, "adf-library-dialog"], outputs: { error: "error", success: "success" }, decls: 30, vars: 31, consts: [["mat-dialog-title", ""], ["novalidate", "", 3, "formGroup", "submit"], ["required", "", "matInput", "", "autofocus", "", "formControlName", "title", "autocomplete", "off", 3, "placeholder"], [4, "ngIf"], ["required", "", "matInput", "", "formControlName", "id", "autocomplete", "off", 3, "placeholder"], ["matInput", "", "rows", "3", "formControlName", "description", 3, "placeholder"], [3, "ngModelOptions", "ngModel", "ngModelChange", "change"], ["color", "primary", 3, "disabled", "value", "checked", 4, "ngFor", "ngForOf"], [1, "adf-action-buttons"], ["mat-button", "", "mat-dialog-close", "", "data-automation-id", "cancel-library-id"], ["color", "primary", "mat-button", "", "data-automation-id", "create-library-id", 3, "disabled", "click"], ["color", "primary", 3, "disabled", "value", "checked"]], template: function LibraryDialogComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "h2", 0);
        ɵngcc0.ɵɵtext(1);
        ɵngcc0.ɵɵpipe(2, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(3, "mat-dialog-content");
        ɵngcc0.ɵɵelementStart(4, "form", 1);
        ɵngcc0.ɵɵlistener("submit", function LibraryDialogComponent_Template_form_submit_4_listener() { return ctx.submit(); });
        ɵngcc0.ɵɵelementStart(5, "mat-form-field");
        ɵngcc0.ɵɵelement(6, "input", 2);
        ɵngcc0.ɵɵpipe(7, "translate");
        ɵngcc0.ɵɵtemplate(8, LibraryDialogComponent_mat_hint_8_Template, 3, 3, "mat-hint", 3);
        ɵngcc0.ɵɵtemplate(9, LibraryDialogComponent_mat_error_9_Template, 3, 3, "mat-error", 3);
        ɵngcc0.ɵɵtemplate(10, LibraryDialogComponent_mat_error_10_Template, 3, 3, "mat-error", 3);
        ɵngcc0.ɵɵtemplate(11, LibraryDialogComponent_mat_error_11_Template, 3, 3, "mat-error", 3);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(12, "mat-form-field");
        ɵngcc0.ɵɵelement(13, "input", 4);
        ɵngcc0.ɵɵpipe(14, "translate");
        ɵngcc0.ɵɵtemplate(15, LibraryDialogComponent_mat_error_15_Template, 3, 3, "mat-error", 3);
        ɵngcc0.ɵɵtemplate(16, LibraryDialogComponent_mat_error_16_Template, 3, 3, "mat-error", 3);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(17, "mat-form-field");
        ɵngcc0.ɵɵelement(18, "textarea", 5);
        ɵngcc0.ɵɵpipe(19, "translate");
        ɵngcc0.ɵɵtemplate(20, LibraryDialogComponent_mat_error_20_Template, 3, 3, "mat-error", 3);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(21, "mat-radio-group", 6);
        ɵngcc0.ɵɵlistener("ngModelChange", function LibraryDialogComponent_Template_mat_radio_group_ngModelChange_21_listener($event) { return ctx.visibilityOption = $event; })("change", function LibraryDialogComponent_Template_mat_radio_group_change_21_listener($event) { return ctx.visibilityChangeHandler($event); });
        ɵngcc0.ɵɵtemplate(22, LibraryDialogComponent_mat_radio_button_22_Template, 3, 7, "mat-radio-button", 7);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(23, "mat-dialog-actions", 8);
        ɵngcc0.ɵɵelementStart(24, "button", 9);
        ɵngcc0.ɵɵtext(25);
        ɵngcc0.ɵɵpipe(26, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(27, "button", 10);
        ɵngcc0.ɵɵlistener("click", function LibraryDialogComponent_Template_button_click_27_listener() { return ctx.submit(); });
        ɵngcc0.ɵɵtext(28);
        ɵngcc0.ɵɵpipe(29, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(2, 18, ctx.createTitle));
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("formGroup", ctx.form);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵpropertyInterpolate("placeholder", ɵngcc0.ɵɵpipeBind1(7, 20, "LIBRARY.DIALOG.FORM.NAME"));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.libraryTitleExists);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.form.controls["title"].hasError("maxlength"));
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.form.controls["title"].hasError("minlength"));
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.form.controls["title"].errors == null ? null : ctx.form.controls["title"].errors.message);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵpropertyInterpolate("placeholder", ɵngcc0.ɵɵpipeBind1(14, 22, "LIBRARY.DIALOG.FORM.SITE_ID"));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.form.controls["id"].errors == null ? null : ctx.form.controls["id"].errors.message);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.form.controls["id"].hasError("maxlength"));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵpropertyInterpolate("placeholder", ɵngcc0.ɵɵpipeBind1(19, 24, "LIBRARY.DIALOG.FORM.DESCRIPTION"));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.form.controls["description"].hasError("maxlength"));
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngModelOptions", ɵngcc0.ɵɵpureFunction0(30, _c35))("ngModel", ctx.visibilityOption);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.visibilityOptions);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(26, 26, "LIBRARY.DIALOG.CANCEL"), " ");
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("disabled", !ctx.form.valid || ctx.disableCreateButton);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(29, 28, "LIBRARY.DIALOG.CREATE"), " ");
    } }, directives: [ɵngcc3.MatDialogTitle, ɵngcc3.MatDialogContent, ɵngcc26.ɵangular_packages_forms_forms_y, ɵngcc26.NgControlStatusGroup, ɵngcc26.FormGroupDirective, ɵngcc27.MatFormField, ɵngcc6.MatInput, ɵngcc26.DefaultValueAccessor, ɵngcc26.RequiredValidator, ɵngcc26.NgControlStatus, ɵngcc26.FormControlName, ɵngcc23.NgIf, ɵngcc17.MatRadioGroup, ɵngcc26.NgModel, ɵngcc23.NgForOf, ɵngcc3.MatDialogActions, ɵngcc1.MatButton, ɵngcc3.MatDialogClose, ɵngcc27.MatHint, ɵngcc27.MatError, ɵngcc17.MatRadioButton], pipes: [ɵngcc25.TranslatePipe], styles: [".adf-library-dialog .mat-radio-group{display:flex;flex-direction:column;margin:0 0 20px}.adf-library-dialog .mat-radio-group .mat-radio-button{margin:10px 0}.adf-library-dialog .mat-form-field{width:100%}.adf-library-dialog mat-form-field{padding-top:20px}.adf-library-dialog .adf-action-buttons{display:flex;flex-direction:row;justify-content:flex-end}.adf-library-dialog .adf-action-buttons .mat-button{text-transform:uppercase}"], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(LibraryDialogComponent, [{
        type: i0.Component,
        args: [{
                selector: 'adf-library-dialog',
                template: "<h2 mat-dialog-title>{{ createTitle | translate }}</h2>\n\n<mat-dialog-content>\n  <form novalidate [formGroup]=\"form\" (submit)=\"submit()\">\n    <mat-form-field>\n      <input\n        placeholder=\"{{ 'LIBRARY.DIALOG.FORM.NAME' | translate }}\"\n        required\n        matInput\n        autofocus\n        formControlName=\"title\"\n        autocomplete=\"off\"\n      />\n\n      <mat-hint *ngIf=\"libraryTitleExists\">{{\n        'LIBRARY.HINTS.SITE_TITLE_EXISTS' | translate\n      }}</mat-hint>\n      <mat-error *ngIf=\"form.controls['title'].hasError('maxlength')\">\n        {{ 'LIBRARY.ERRORS.TITLE_TOO_LONG' | translate }}\n      </mat-error>\n\n      <mat-error *ngIf=\"form.controls['title'].hasError('minlength')\">\n        {{ 'LIBRARY.ERRORS.TITLE_TOO_SHORT' | translate }}\n      </mat-error>\n\n      <mat-error *ngIf=\"form.controls['title'].errors?.message\">\n        {{ form.controls['title'].errors?.message | translate }}\n      </mat-error>\n    </mat-form-field>\n\n    <mat-form-field>\n      <input\n        required\n        placeholder=\"{{ 'LIBRARY.DIALOG.FORM.SITE_ID' | translate }}\"\n        matInput\n        formControlName=\"id\"\n        autocomplete=\"off\"\n      />\n\n      <mat-error *ngIf=\"form.controls['id'].errors?.message\">\n        {{ form.controls['id'].errors?.message | translate }}\n      </mat-error>\n\n      <mat-error *ngIf=\"form.controls['id'].hasError('maxlength')\">\n        {{ 'LIBRARY.ERRORS.ID_TOO_LONG' | translate }}\n      </mat-error>\n    </mat-form-field>\n\n    <mat-form-field>\n      <textarea\n        matInput\n        placeholder=\"{{ 'LIBRARY.DIALOG.FORM.DESCRIPTION' | translate }}\"\n        rows=\"3\"\n        formControlName=\"description\"\n      ></textarea>\n\n      <mat-error *ngIf=\"form.controls['description'].hasError('maxlength')\">\n        {{ 'LIBRARY.ERRORS.DESCRIPTION_TOO_LONG' | translate }}\n      </mat-error>\n    </mat-form-field>\n\n    <mat-radio-group\n      [ngModelOptions]=\"{ standalone: true }\"\n      [(ngModel)]=\"visibilityOption\"\n      (change)=\"visibilityChangeHandler($event)\"\n    >\n      <mat-radio-button\n        color=\"primary\"\n        [disabled]=\"option.disabled\"\n        *ngFor=\"let option of visibilityOptions\"\n        [attr.data-automation-id]=\"option.value\"\n        [value]=\"option.value\"\n        [checked]=\"visibilityOption.value === option.value\"\n      >\n        {{ option.label | translate }}\n      </mat-radio-button>\n    </mat-radio-group>\n  </form>\n</mat-dialog-content>\n\n<mat-dialog-actions class=\"adf-action-buttons\">\n  <button mat-button mat-dialog-close data-automation-id=\"cancel-library-id\">\n    {{ 'LIBRARY.DIALOG.CANCEL' | translate }}\n  </button>\n\n  <button\n    color=\"primary\"\n    mat-button\n    (click)=\"submit()\"\n    [disabled]=\"!form.valid || disableCreateButton\"\n    data-automation-id=\"create-library-id\"\n  >\n    {{ 'LIBRARY.DIALOG.CREATE' | translate }}\n  </button>\n</mat-dialog-actions>\n",
                encapsulation: i0.ViewEncapsulation.None,
                host: { class: 'adf-library-dialog' },
                styles: [".adf-library-dialog .mat-radio-group{display:flex;flex-direction:column;margin:0 0 20px}.adf-library-dialog .mat-radio-group .mat-radio-button{margin:10px 0}.adf-library-dialog .mat-form-field{width:100%}.adf-library-dialog mat-form-field{padding-top:20px}.adf-library-dialog .adf-action-buttons{display:flex;flex-direction:row;justify-content:flex-end}.adf-library-dialog .adf-action-buttons .mat-button{text-transform:uppercase}"]
            }]
    }], function () { return [{ type: ɵngcc21.AlfrescoApiService }, { type: ɵngcc21.SitesService }, { type: ɵngcc26.FormBuilder }, { type: ɵngcc3.MatDialogRef }]; }, { error: [{
            type: i0.Output
        }], success: [{
            type: i0.Output
        }] }); })();
        return LibraryDialogComponent;
    }());
    LibraryDialogComponent.ctorParameters = function () { return [
        { type: i1.AlfrescoApiService },
        { type: i1.SitesService },
        { type: forms.FormBuilder },
        { type: i2.MatDialogRef }
    ]; };
    LibraryDialogComponent.propDecorators = {
        error: [{ type: i0.Output }],
        success: [{ type: i0.Output }]
    };

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var DialogModule = /** @class */ (function () {
        function DialogModule() {
        }
DialogModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: DialogModule });
DialogModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function DialogModule_Factory(t) { return new (t || DialogModule)(); }, imports: [[
            common.CommonModule,
            MaterialModule,
            i1.CoreModule,
            forms.FormsModule,
            forms.ReactiveFormsModule,
            moment$2.MatMomentDatetimeModule,
            core$2.MatDatetimepickerModule
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DialogModule, { declarations: [FolderDialogComponent, NodeLockDialogComponent, ConfirmDialogComponent, LibraryDialogComponent], imports: [ɵngcc23.CommonModule, MaterialModule, ɵngcc21.CoreModule, ɵngcc26.FormsModule, ɵngcc26.ReactiveFormsModule, ɵngcc34.MatMomentDatetimeModule, ɵngcc28.MatDatetimepickerModule], exports: [FolderDialogComponent, NodeLockDialogComponent, ConfirmDialogComponent, LibraryDialogComponent] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DialogModule, [{
        type: i0.NgModule,
        args: [{
                imports: [
                    common.CommonModule,
                    MaterialModule,
                    i1.CoreModule,
                    forms.FormsModule,
                    forms.ReactiveFormsModule,
                    moment$2.MatMomentDatetimeModule,
                    core$2.MatDatetimepickerModule
                ],
                declarations: [
                    FolderDialogComponent,
                    NodeLockDialogComponent,
                    ConfirmDialogComponent,
                    LibraryDialogComponent
                ],
                exports: [
                    FolderDialogComponent,
                    NodeLockDialogComponent,
                    ConfirmDialogComponent,
                    LibraryDialogComponent
                ]
            }]
    }], function () { return []; }, null); })();
        return DialogModule;
    }());

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var DEFAULT_FOLDER_PARENT_ID = '-my-';
    var FolderCreateDirective = /** @class */ (function () {
        function FolderCreateDirective(dialogRef, content) {
            this.dialogRef = dialogRef;
            this.content = content;
            this.parentNodeId = DEFAULT_FOLDER_PARENT_ID;
            this.title = null;
            this.nodeType = 'cm:folder';
            this.error = new i0.EventEmitter();
            this.success = new i0.EventEmitter();
        }
        FolderCreateDirective.prototype.onClick = function (event) {
            event.preventDefault();
            this.openDialog();
        };
        Object.defineProperty(FolderCreateDirective.prototype, "dialogConfig", {
            get: function () {
                var width = FolderCreateDirective.DIALOG_WIDTH;
                var _a = this, parentNodeId = _a.parentNodeId, createTitle = _a.title, nodeType = _a.nodeType;
                return {
                    data: { parentNodeId: parentNodeId, createTitle: createTitle, nodeType: nodeType },
                    width: width + "px"
                };
            },
            enumerable: false,
            configurable: true
        });
        FolderCreateDirective.prototype.openDialog = function () {
            var _this = this;
            var _a = this, dialogRef = _a.dialogRef, dialogConfig = _a.dialogConfig, content = _a.content;
            var dialogInstance = dialogRef.open(FolderDialogComponent, dialogConfig);
            dialogInstance.componentInstance.error.subscribe(function (error) {
                _this.error.emit(error);
            });
            dialogInstance.componentInstance.success.subscribe(function (node) {
                _this.success.emit(node);
            });
            dialogInstance.afterClosed().subscribe(function (node) {
                if (node) {
                    content.folderCreate.next(node);
                }
            });
        };
FolderCreateDirective.ɵfac = function FolderCreateDirective_Factory(t) { return new (t || FolderCreateDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc3.MatDialog), ɵngcc0.ɵɵdirectiveInject(ɵngcc21.ContentService)); };
FolderCreateDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: FolderCreateDirective, selectors: [["", "adf-create-folder", ""]], hostBindings: function FolderCreateDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function FolderCreateDirective_click_HostBindingHandler($event) { return ctx.onClick($event); });
    } }, inputs: { parentNodeId: ["adf-create-folder", "parentNodeId"], title: "title", nodeType: "nodeType" }, outputs: { error: "error", success: "success" } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FolderCreateDirective, [{
        type: i0.Directive,
        args: [{
                selector: '[adf-create-folder]'
            }]
    }], function () { return [{ type: ɵngcc3.MatDialog }, { type: ɵngcc21.ContentService }]; }, { parentNodeId: [{
            type: i0.Input,
            args: ['adf-create-folder']
        }], title: [{
            type: i0.Input
        }], nodeType: [{
            type: i0.Input
        }], error: [{
            type: i0.Output
        }], success: [{
            type: i0.Output
        }], onClick: [{
            type: i0.HostListener,
            args: ['click', ['$event']]
        }] }); })();
        return FolderCreateDirective;
    }());
    FolderCreateDirective.DIALOG_WIDTH = 400;
    FolderCreateDirective.ctorParameters = function () { return [
        { type: i2.MatDialog },
        { type: i1.ContentService }
    ]; };
    FolderCreateDirective.propDecorators = {
        parentNodeId: [{ type: i0.Input, args: ['adf-create-folder',] }],
        title: [{ type: i0.Input }],
        nodeType: [{ type: i0.Input }],
        error: [{ type: i0.Output }],
        success: [{ type: i0.Output }],
        onClick: [{ type: i0.HostListener, args: ['click', ['$event'],] }]
    };

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var FolderEditDirective = /** @class */ (function () {
        function FolderEditDirective(dialogRef, elementRef, content) {
            this.dialogRef = dialogRef;
            this.elementRef = elementRef;
            this.content = content;
            this.error = new i0.EventEmitter();
            this.title = null;
            this.success = new i0.EventEmitter();
        }
        FolderEditDirective.prototype.onClick = function (event) {
            event.preventDefault();
            if (this.folder) {
                this.openDialog();
            }
        };
        Object.defineProperty(FolderEditDirective.prototype, "dialogConfig", {
            get: function () {
                var width = FolderEditDirective.DIALOG_WIDTH;
                var folder = this.folder;
                return {
                    data: {
                        folder: folder,
                        editTitle: this.title
                    },
                    width: width + "px"
                };
            },
            enumerable: false,
            configurable: true
        });
        FolderEditDirective.prototype.openDialog = function () {
            var _this = this;
            var _a = this, dialogRef = _a.dialogRef, dialogConfig = _a.dialogConfig, content = _a.content;
            var dialogInstance = dialogRef.open(FolderDialogComponent, dialogConfig);
            dialogInstance.componentInstance.error.subscribe(function (error) {
                _this.error.emit(error);
            });
            dialogInstance.componentInstance.success.subscribe(function (node) {
                _this.success.emit(node);
            });
            dialogInstance.afterClosed().subscribe(function (node) {
                if (node) {
                    content.folderEdit.next(node);
                }
            });
        };
FolderEditDirective.ɵfac = function FolderEditDirective_Factory(t) { return new (t || FolderEditDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc3.MatDialog), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc21.ContentService)); };
FolderEditDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: FolderEditDirective, selectors: [["", "adf-edit-folder", ""]], hostBindings: function FolderEditDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function FolderEditDirective_click_HostBindingHandler($event) { return ctx.onClick($event); });
    } }, inputs: { title: "title", folder: ["adf-edit-folder", "folder"] }, outputs: { error: "error", success: "success" } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FolderEditDirective, [{
        type: i0.Directive,
        args: [{
                selector: '[adf-edit-folder]'
            }]
    }], function () { return [{ type: ɵngcc3.MatDialog }, { type: ɵngcc0.ElementRef }, { type: ɵngcc21.ContentService }]; }, { error: [{
            type: i0.Output
        }], title: [{
            type: i0.Input
        }], success: [{
            type: i0.Output
        }], onClick: [{
            type: i0.HostListener,
            args: ['click', ['$event']]
        }], folder: [{
            type: i0.Input,
            args: ['adf-edit-folder']
        }] }); })();
        return FolderEditDirective;
    }());
    FolderEditDirective.DIALOG_WIDTH = 400;
    FolderEditDirective.ctorParameters = function () { return [
        { type: i2.MatDialog },
        { type: i0.ElementRef },
        { type: i1.ContentService }
    ]; };
    FolderEditDirective.propDecorators = {
        folder: [{ type: i0.Input, args: ['adf-edit-folder',] }],
        error: [{ type: i0.Output }],
        title: [{ type: i0.Input }],
        success: [{ type: i0.Output }],
        onClick: [{ type: i0.HostListener, args: ['click', ['$event'],] }]
    };

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var FolderDirectiveModule = /** @class */ (function () {
        function FolderDirectiveModule() {
        }
FolderDirectiveModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: FolderDirectiveModule });
FolderDirectiveModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function FolderDirectiveModule_Factory(t) { return new (t || FolderDirectiveModule)(); }, imports: [[
            common.CommonModule,
            MaterialModule
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(FolderDirectiveModule, { declarations: [FolderCreateDirective, FolderEditDirective], imports: [ɵngcc23.CommonModule, MaterialModule], exports: [FolderCreateDirective, FolderEditDirective] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FolderDirectiveModule, [{
        type: i0.NgModule,
        args: [{
                imports: [
                    common.CommonModule,
                    MaterialModule
                ],
                declarations: [
                    FolderCreateDirective,
                    FolderEditDirective
                ],
                exports: [
                    FolderCreateDirective,
                    FolderEditDirective
                ]
            }]
    }], function () { return []; }, null); })();
        return FolderDirectiveModule;
    }());

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    var BasicPropertiesService = /** @class */ (function () {
        function BasicPropertiesService(fileSizePipe) {
            this.fileSizePipe = fileSizePipe;
        }
        BasicPropertiesService.prototype.getProperties = function (node) {
            var sizeInBytes = node.content ? node.content.sizeInBytes : '', mimeTypeName = node.content ? node.content.mimeTypeName : '', author = node.properties ? node.properties['cm:author'] : '', description = node.properties ? node.properties['cm:description'] : '', title = node.properties ? node.properties['cm:title'] : '';
            return [
                new i1.CardViewTextItemModel({
                    label: 'CORE.METADATA.BASIC.NAME',
                    value: node.name,
                    key: 'properties.cm:name',
                    editable: true
                }),
                new i1.CardViewTextItemModel({
                    label: 'CORE.METADATA.BASIC.TITLE',
                    value: title,
                    key: 'properties.cm:title',
                    editable: true
                }),
                new i1.CardViewTextItemModel({
                    label: 'CORE.METADATA.BASIC.CREATOR',
                    value: node.createdByUser.displayName,
                    key: 'createdByUser.displayName',
                    editable: false
                }),
                new i1.CardViewDateItemModel({
                    label: 'CORE.METADATA.BASIC.CREATED_DATE',
                    value: node.createdAt,
                    key: 'createdAt',
                    editable: false,
                    format: 'mediumDate'
                }),
                new i1.CardViewTextItemModel({
                    label: 'CORE.METADATA.BASIC.SIZE',
                    value: sizeInBytes,
                    key: 'content.sizeInBytes',
                    pipes: [{ pipe: this.fileSizePipe }],
                    editable: false
                }),
                new i1.CardViewTextItemModel({
                    label: 'CORE.METADATA.BASIC.MODIFIER',
                    value: node.modifiedByUser.displayName,
                    key: 'modifiedByUser.displayName',
                    editable: false
                }),
                new i1.CardViewDateItemModel({
                    label: 'CORE.METADATA.BASIC.MODIFIED_DATE',
                    value: node.modifiedAt,
                    key: 'modifiedAt',
                    editable: false,
                    format: 'mediumDate'
                }),
                new i1.CardViewTextItemModel({
                    label: 'CORE.METADATA.BASIC.MIMETYPE',
                    value: mimeTypeName,
                    key: 'content.mimeTypeName',
                    editable: false
                }),
                new i1.CardViewTextItemModel({
                    label: 'CORE.METADATA.BASIC.AUTHOR',
                    value: author,
                    key: 'properties.cm:author',
                    editable: true
                }),
                new i1.CardViewTextItemModel({
                    label: 'CORE.METADATA.BASIC.DESCRIPTION',
                    value: description,
                    key: 'properties.cm:description',
                    multiline: true,
                    editable: true
                })
            ];
        };
BasicPropertiesService.ɵfac = function BasicPropertiesService_Factory(t) { return new (t || BasicPropertiesService)(ɵngcc0.ɵɵinject(ɵngcc21.FileSizePipe)); };
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(BasicPropertiesService, [{
        type: i0.Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc21.FileSizePipe }]; }, null); })();
        return BasicPropertiesService;
    }());
    BasicPropertiesService.ɵprov = i0.ɵɵdefineInjectable({ factory: function BasicPropertiesService_Factory() { return new BasicPropertiesService(i0.ɵɵinject(i1.FileSizePipe)); }, token: BasicPropertiesService, providedIn: "root" });
    BasicPropertiesService.ctorParameters = function () { return [
        { type: i1.FileSizePipe }
    ]; };

    var D_TEXT = 'd:text';
    var D_MLTEXT = 'd:mltext';
    var D_DATE = 'd:date';
    var D_DATETIME = 'd:datetime';
    var D_INT = 'd:int';
    var D_LONG = 'd:long';
    var D_FLOAT = 'd:float';
    var D_DOUBLE = 'd:double';
    var D_BOOLEAN = 'd:boolean';
    var PropertyGroupTranslatorService = /** @class */ (function () {
        function PropertyGroupTranslatorService(logService, multiValuePipe, decimalNumberPipe, appConfig) {
            this.logService = logService;
            this.multiValuePipe = multiValuePipe;
            this.decimalNumberPipe = decimalNumberPipe;
            this.appConfig = appConfig;
            this.valueSeparator = this.appConfig.get('content-metadata.multi-value-pipe-separator');
        }
        PropertyGroupTranslatorService.prototype.translateToCardViewGroups = function (propertyGroups, propertyValues, definition) {
            var _this = this;
            return propertyGroups.map(function (propertyGroup) {
                var translatedPropertyGroup = Object.assign({}, propertyGroup);
                translatedPropertyGroup.properties = _this.translateArray(propertyGroup.properties, propertyValues, definition);
                return translatedPropertyGroup;
            });
        };
        PropertyGroupTranslatorService.prototype.translateProperty = function (property, startValue, allowEditing) {
            if (allowEditing === void 0) { allowEditing = false; }
            this.checkECMTypeValidity(property.dataType);
            var prefix = 'properties.';
            var propertyDefinition = {
                label: property.title || property.id,
                value: startValue ? startValue : property.defaultValue,
                key: "" + prefix + property.id,
                default: property.defaultValue,
                editable: property.isProtected ? false : allowEditing,
                constraints: property === null || property === void 0 ? void 0 : property.constraints
            };
            return this.transform(propertyDefinition, property.dataType, property.isMultiValued);
        };
        PropertyGroupTranslatorService.prototype.translateArray = function (properties, propertyValues, definition) {
            var _this = this;
            return properties.map(function (property) {
                return _this.translate(property, propertyValues, _this.getPropertyConstraints(property.name, definition));
            });
        };
        PropertyGroupTranslatorService.prototype.translate = function (property, propertyValues, constraints) {
            var propertyValue;
            if (propertyValues && !this.isEmpty(propertyValues[property.name])) {
                propertyValue = propertyValues[property.name];
            }
            this.checkECMTypeValidity(property.dataType);
            var prefix = 'properties.';
            var propertyDefinition = {
                label: property.title || property.name,
                value: propertyValue,
                key: "" + prefix + property.name,
                default: property.defaultValue,
                editable: property.protected ? false : property.editable !== undefined ? property.editable : true,
                constraints: constraints
            };
            return this.transform(propertyDefinition, property.dataType, property.multiValued);
        };
        PropertyGroupTranslatorService.prototype.transform = function (propertyDefinition, dataType, isMultiValued) {
            var cardViewItemProperty;
            if (this.isListOfValues(propertyDefinition.constraints)) {
                var options = propertyDefinition.constraints[0].parameters.allowedValues.map(function (value) { return ({ key: value, label: value }); });
                var properties = Object.assign(propertyDefinition, { options$: rxjs.of(options) });
                cardViewItemProperty = new i1.CardViewSelectItemModel(properties);
            }
            else {
                switch (dataType) {
                    case D_MLTEXT:
                        cardViewItemProperty = new i1.CardViewTextItemModel(Object.assign(propertyDefinition, {
                            multiline: true
                        }));
                        break;
                    case D_INT:
                    case D_LONG:
                        cardViewItemProperty = new i1.CardViewIntItemModel(Object.assign(propertyDefinition, {
                            multivalued: isMultiValued,
                            pipes: [{ pipe: this.multiValuePipe, params: [this.valueSeparator] }]
                        }));
                        break;
                    case D_FLOAT:
                    case D_DOUBLE:
                        cardViewItemProperty = new i1.CardViewFloatItemModel(Object.assign(propertyDefinition, {
                            multivalued: isMultiValued,
                            pipes: [
                                { pipe: this.decimalNumberPipe },
                                { pipe: this.multiValuePipe, params: [this.valueSeparator] }
                            ]
                        }));
                        break;
                    case D_DATE:
                        cardViewItemProperty = new i1.CardViewDateItemModel(Object.assign(propertyDefinition, {
                            multivalued: isMultiValued,
                            pipes: [{ pipe: this.multiValuePipe, params: [this.valueSeparator] }]
                        }));
                        break;
                    case D_DATETIME:
                        cardViewItemProperty = new i1.CardViewDatetimeItemModel(Object.assign(propertyDefinition, {
                            multivalued: isMultiValued,
                            pipes: [{ pipe: this.multiValuePipe, params: [this.valueSeparator] }]
                        }));
                        break;
                    case D_BOOLEAN:
                        cardViewItemProperty = new i1.CardViewBoolItemModel(propertyDefinition);
                        break;
                    case D_TEXT:
                    default:
                        cardViewItemProperty = new i1.CardViewTextItemModel(Object.assign(propertyDefinition, {
                            multivalued: isMultiValued,
                            multiline: isMultiValued,
                            pipes: [{ pipe: this.multiValuePipe, params: [this.valueSeparator] }]
                        }));
                }
            }
            return cardViewItemProperty;
        };
        PropertyGroupTranslatorService.prototype.isListOfValues = function (constraint) {
            var _a;
            return ((_a = constraint === null || constraint === void 0 ? void 0 : constraint[0]) === null || _a === void 0 ? void 0 : _a.type) === 'LIST';
        };
        PropertyGroupTranslatorService.prototype.getPropertyConstraints = function (propertyName, definition) {
            var _a, _b;
            return (_b = (_a = definition === null || definition === void 0 ? void 0 : definition.properties.find(function (item) { return item.id === propertyName; })) === null || _a === void 0 ? void 0 : _a.constraints) !== null && _b !== void 0 ? _b : [];
        };
        PropertyGroupTranslatorService.prototype.checkECMTypeValidity = function (ecmPropertyType) {
            if (PropertyGroupTranslatorService.RECOGNISED_ECM_TYPES.indexOf(ecmPropertyType) === -1) {
                this.logService.error("Unknown type for mapping: " + ecmPropertyType);
            }
        };
        PropertyGroupTranslatorService.prototype.isEmpty = function (value) {
            return value === undefined || value === null || value === '';
        };
PropertyGroupTranslatorService.ɵfac = function PropertyGroupTranslatorService_Factory(t) { return new (t || PropertyGroupTranslatorService)(ɵngcc0.ɵɵinject(ɵngcc21.LogService), ɵngcc0.ɵɵinject(ɵngcc21.MultiValuePipe), ɵngcc0.ɵɵinject(ɵngcc21.DecimalNumberPipe), ɵngcc0.ɵɵinject(ɵngcc21.AppConfigService)); };
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(PropertyGroupTranslatorService, [{
        type: i0.Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc21.LogService }, { type: ɵngcc21.MultiValuePipe }, { type: ɵngcc21.DecimalNumberPipe }, { type: ɵngcc21.AppConfigService }]; }, null); })();
        return PropertyGroupTranslatorService;
    }());
    PropertyGroupTranslatorService.RECOGNISED_ECM_TYPES = [D_TEXT, D_MLTEXT, D_DATE, D_DATETIME, D_INT, D_LONG, D_FLOAT, D_DOUBLE, D_BOOLEAN];
    PropertyGroupTranslatorService.ɵprov = i0.ɵɵdefineInjectable({ factory: function PropertyGroupTranslatorService_Factory() { return new PropertyGroupTranslatorService(i0.ɵɵinject(i1.LogService), i0.ɵɵinject(i1.MultiValuePipe), i0.ɵɵinject(i1.DecimalNumberPipe), i0.ɵɵinject(i1.AppConfigService)); }, token: PropertyGroupTranslatorService, providedIn: "root" });
    PropertyGroupTranslatorService.ctorParameters = function () { return [
        { type: i1.LogService },
        { type: i1.MultiValuePipe },
        { type: i1.DecimalNumberPipe },
        { type: i1.AppConfigService }
    ]; };

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var emptyGroup = {
        properties: {}
    };
    function convertObjectToArray(object) {
        return Object.keys(object).map(function (key) { return object[key]; });
    }
    function getGroup(propertyGroups, groupName) {
        return propertyGroups[groupName];
    }
    function getProperty(propertyGroups, groupName, propertyName) {
        var groupDefinition = getGroup(propertyGroups, groupName) || emptyGroup;
        var propertyDefinitions;
        if (propertyName === '*') {
            propertyDefinitions = convertObjectToArray(groupDefinition.properties);
        }
        else {
            propertyDefinitions = groupDefinition.properties[propertyName];
        }
        return propertyDefinitions;
    }

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var AspectOrientedConfigService = /** @class */ (function () {
        function AspectOrientedConfigService(config) {
            this.config = config;
        }
        AspectOrientedConfigService.prototype.isGroupAllowed = function (groupName) {
            if (this.isIncludeAllEnabled()) {
                return true;
            }
            var groupNames = Object.keys(this.config);
            return groupNames.indexOf(groupName) !== -1;
        };
        AspectOrientedConfigService.prototype.reorganiseByConfig = function (propertyGroups) {
            var _this = this;
            var aspects = this.config, aspectNames = Object.keys(aspects);
            return aspectNames
                .reduce(function (groupAccumulator, aspectName) {
                var newGroup = _this.getOrganisedPropertyGroup(propertyGroups, aspectName);
                return groupAccumulator.concat(newGroup);
            }, [])
                .filter(function (organisedPropertyGroup) { return organisedPropertyGroup.properties.length > 0; });
        };
        AspectOrientedConfigService.prototype.appendAllPreset = function (propertyGroups) {
            var _this = this;
            var groups = Object.keys(propertyGroups)
                .map(function (groupName) {
                var propertyGroup = propertyGroups[groupName], properties = propertyGroup.properties;
                if (_this.isAspectReadOnly(groupName)) {
                    Object.keys(properties).map(function (propertyName) { return _this.setReadOnlyProperty(properties[propertyName]); });
                }
                return Object.assign({}, propertyGroup, {
                    properties: Object.keys(properties).map(function (propertyName) {
                        if (_this.isPropertyReadOnly(propertyName)) {
                            _this.setReadOnlyProperty(properties[propertyName]);
                        }
                        return properties[propertyName];
                    })
                });
            });
            return groups;
        };
        AspectOrientedConfigService.prototype.setReadOnlyProperty = function (property) {
            property.editable = false;
        };
        AspectOrientedConfigService.prototype.isPropertyReadOnly = function (propertyName) {
            var readOnlyAspects = this.config.readOnlyProperties;
            if (Array.isArray(readOnlyAspects)) {
                return readOnlyAspects.includes(propertyName);
            }
            else {
                return readOnlyAspects === propertyName;
            }
        };
        AspectOrientedConfigService.prototype.isAspectReadOnly = function (propertyGroupName) {
            var readOnlyAspects = this.config.readOnlyAspects;
            if (Array.isArray(readOnlyAspects)) {
                return readOnlyAspects.includes(propertyGroupName);
            }
            else {
                return readOnlyAspects === propertyGroupName;
            }
        };
        AspectOrientedConfigService.prototype.filterExcludedPreset = function (propertyGroups) {
            var _this = this;
            if (this.config.exclude) {
                return propertyGroups.filter(function (preset) {
                    return !_this.config.exclude.includes(preset.name);
                });
            }
            return propertyGroups;
        };
        AspectOrientedConfigService.prototype.isIncludeAllEnabled = function () {
            return this.config.includeAll;
        };
        AspectOrientedConfigService.prototype.getOrganisedPropertyGroup = function (propertyGroups, aspectName) {
            var group = getGroup(propertyGroups, aspectName);
            var newGroup = [];
            if (group) {
                var aspectProperties = this.config[aspectName];
                var properties = void 0;
                if (aspectProperties === '*') {
                    properties = getProperty(propertyGroups, aspectName, aspectProperties);
                }
                else {
                    properties = aspectProperties
                        .map(function (propertyName) { return getProperty(propertyGroups, aspectName, propertyName); })
                        .filter(function (props) { return props !== undefined; });
                }
                newGroup = [{ title: group.title, properties: properties }];
            }
            return newGroup;
        };
        return AspectOrientedConfigService;
    }());

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var IndifferentConfigService = /** @class */ (function () {
        function IndifferentConfigService() {
        }
        IndifferentConfigService.prototype.isGroupAllowed = function () {
            return true;
        };
        IndifferentConfigService.prototype.reorganiseByConfig = function (propertyGroups) {
            return Object.keys(propertyGroups)
                .map(function (groupName) {
                var propertyGroup = propertyGroups[groupName], properties = propertyGroup.properties;
                return Object.assign({}, propertyGroup, {
                    properties: Object.keys(properties).map(function (propertyName) { return properties[propertyName]; })
                });
            });
        };
        IndifferentConfigService.prototype.filterExcludedPreset = function (propertyGroups) {
            return propertyGroups;
        };
        IndifferentConfigService.prototype.appendAllPreset = function () {
            return [];
        };
        IndifferentConfigService.prototype.isIncludeAllEnabled = function () {
            return true;
        };
        return IndifferentConfigService;
    }());

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var LayoutOrientedConfigService = /** @class */ (function () {
        function LayoutOrientedConfigService(config) {
            this.config = config;
        }
        LayoutOrientedConfigService.prototype.isGroupAllowed = function (groupName) {
            if (this.isIncludeAllEnabled()) {
                return true;
            }
            return this.getMatchingGroups(groupName).length > 0;
        };
        LayoutOrientedConfigService.prototype.reorganiseByConfig = function (propertyGroups) {
            var _this = this;
            var layoutBlocks = this.config.filter(function (itemsGroup) { return itemsGroup.items; });
            var organisedPropertyGroup = layoutBlocks.map(function (layoutBlock) {
                var flattenedItems = _this.flattenItems(layoutBlock.items), properties = flattenedItems.reduce(function (props, explodedItem) {
                    var isProperty = typeof explodedItem.property === 'object';
                    var propertyName = isProperty ? explodedItem.property.name : explodedItem.property;
                    var property = getProperty(propertyGroups, explodedItem.groupName, propertyName) || [];
                    if (isProperty) {
                        property = _this.setPropertyTitle(property, explodedItem.property);
                    }
                    property = _this.setEditableProperty(property, explodedItem);
                    return props.concat(property);
                }, []);
                return {
                    title: layoutBlock.title,
                    properties: properties
                };
            });
            return organisedPropertyGroup;
        };
        LayoutOrientedConfigService.prototype.appendAllPreset = function (propertyGroups) {
            return Object.keys(propertyGroups)
                .map(function (groupName) {
                var propertyGroup = propertyGroups[groupName], properties = propertyGroup.properties;
                return Object.assign({}, propertyGroup, {
                    properties: Object.keys(properties).map(function (propertyName) { return properties[propertyName]; })
                });
            });
        };
        LayoutOrientedConfigService.prototype.filterExcludedPreset = function (propertyGroups) {
            var excludedConfig = this.config
                .map(function (config) { return config.exclude; })
                .find(function (exclude) { return exclude !== undefined; });
            if (excludedConfig === undefined) {
                excludedConfig = [];
            }
            else if (typeof excludedConfig === 'string') {
                excludedConfig = [excludedConfig];
            }
            return propertyGroups.filter(function (props) {
                return !excludedConfig.includes(props.name);
            });
        };
        LayoutOrientedConfigService.prototype.isIncludeAllEnabled = function () {
            var includeAllProperty = this.config
                .map(function (config) { return config.includeAll; })
                .find(function (includeAll) { return includeAll !== undefined; });
            return includeAllProperty !== undefined ? includeAllProperty : false;
        };
        LayoutOrientedConfigService.prototype.setEditableProperty = function (propertyGroup, itemConfig) {
            if (Array.isArray(propertyGroup)) {
                propertyGroup.map(function (property) { return property.editable = itemConfig.editable !== undefined ? itemConfig.editable : true; });
            }
            else {
                propertyGroup.editable = itemConfig.editable !== undefined ? itemConfig.editable : true;
            }
            return propertyGroup;
        };
        LayoutOrientedConfigService.prototype.setPropertyTitle = function (item, property) {
            if (!Array.isArray(item)) {
                return Object.assign(Object.assign({}, item), (item.name === property.name && !!property.title) && { title: property.title });
            }
            return item;
        };
        LayoutOrientedConfigService.prototype.flattenItems = function (items) {
            return items.reduce(function (accumulator, item) {
                var properties = Array.isArray(item.properties) ? item.properties : [item.properties];
                var flattenedProperties = properties.map(function (property) {
                    return {
                        groupName: item.aspect || item.type,
                        property: property,
                        editable: item.editable
                    };
                });
                return accumulator.concat(flattenedProperties);
            }, []);
        };
        LayoutOrientedConfigService.prototype.getMatchingGroups = function (groupName) {
            return this.config
                .map(function (layoutBlock) { return layoutBlock.items; })
                .reduce(function (accumulator, items) { return accumulator.concat(items); }, [])
                .filter(function (item) { return item.aspect === groupName || item.type === groupName; });
        };
        return LayoutOrientedConfigService;
    }());

    var ContentMetadataConfigFactory = /** @class */ (function () {
        function ContentMetadataConfigFactory(appConfigService, logService) {
            this.appConfigService = appConfigService;
            this.logService = logService;
        }
        ContentMetadataConfigFactory.prototype.get = function (presetName) {
            if (presetName === void 0) { presetName = 'default'; }
            var presetConfig;
            try {
                presetConfig = this.appConfigService.config['content-metadata'].presets[presetName];
            }
            catch (_a) {
                if (presetName !== ContentMetadataConfigFactory.DEFAULT_PRESET_NAME) {
                    this.logService.error("No content-metadata preset for: " + presetName);
                }
                presetConfig = ContentMetadataConfigFactory.INDIFFERENT_PRESET;
            }
            return this.createConfig(presetConfig);
        };
        ContentMetadataConfigFactory.prototype.createConfig = function (presetConfig) {
            var config;
            if (this.isLayoutOrientedPreset(presetConfig)) {
                config = new LayoutOrientedConfigService(presetConfig);
            }
            else if (this.isAspectOrientedPreset(presetConfig)) {
                config = new AspectOrientedConfigService(presetConfig);
            }
            else {
                config = new IndifferentConfigService();
            }
            Object.freeze(config);
            return config;
        };
        ContentMetadataConfigFactory.prototype.isAspectOrientedPreset = function (presetConfig) {
            return this.isObject(presetConfig);
        };
        ContentMetadataConfigFactory.prototype.isLayoutOrientedPreset = function (presetConfig) {
            return Array.isArray(presetConfig);
        };
        ContentMetadataConfigFactory.prototype.isObject = function (x) {
            return x != null && typeof x === 'object';
        };
ContentMetadataConfigFactory.ɵfac = function ContentMetadataConfigFactory_Factory(t) { return new (t || ContentMetadataConfigFactory)(ɵngcc0.ɵɵinject(ɵngcc21.AppConfigService), ɵngcc0.ɵɵinject(ɵngcc21.LogService)); };
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ContentMetadataConfigFactory, [{
        type: i0.Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc21.AppConfigService }, { type: ɵngcc21.LogService }]; }, null); })();
        return ContentMetadataConfigFactory;
    }());
    ContentMetadataConfigFactory.INDIFFERENT_PRESET = '*';
    ContentMetadataConfigFactory.DEFAULT_PRESET_NAME = 'default';
    ContentMetadataConfigFactory.ɵprov = i0.ɵɵdefineInjectable({ factory: function ContentMetadataConfigFactory_Factory() { return new ContentMetadataConfigFactory(i0.ɵɵinject(i1.AppConfigService), i0.ɵɵinject(i1.LogService)); }, token: ContentMetadataConfigFactory, providedIn: "root" });
    ContentMetadataConfigFactory.ctorParameters = function () { return [
        { type: i1.AppConfigService },
        { type: i1.LogService }
    ]; };

    var PropertyDescriptorsService = /** @class */ (function () {
        function PropertyDescriptorsService(alfrescoApiService) {
            this.alfrescoApiService = alfrescoApiService;
        }
        Object.defineProperty(PropertyDescriptorsService.prototype, "classesApi", {
            get: function () {
                var _a;
                this._classesApi = (_a = this._classesApi) !== null && _a !== void 0 ? _a : new jsApi.ClassesApi(this.alfrescoApiService.getInstance());
                return this._classesApi;
            },
            enumerable: false,
            configurable: true
        });
        PropertyDescriptorsService.prototype.load = function (groupNames) {
            var _this = this;
            var groupFetchStreams = groupNames
                .map(function (groupName) { return groupName.replace(':', '_'); })
                .map(function (groupName) { return rxjs.defer(function () { return _this.classesApi.getClass(groupName); }); });
            return rxjs.forkJoin(groupFetchStreams).pipe(operators.map(this.convertToObject));
        };
        PropertyDescriptorsService.prototype.convertToObject = function (propertyGroupsArray) {
            return propertyGroupsArray.reduce(function (propertyGroups, propertyGroup) {
                var _b;
                return Object.assign({}, propertyGroups, (_b = {},
                    _b[propertyGroup.name] = propertyGroup,
                    _b));
            }, {});
        };
PropertyDescriptorsService.ɵfac = function PropertyDescriptorsService_Factory(t) { return new (t || PropertyDescriptorsService)(ɵngcc0.ɵɵinject(ɵngcc21.AlfrescoApiService)); };
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(PropertyDescriptorsService, [{
        type: i0.Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc21.AlfrescoApiService }]; }, null); })();
        return PropertyDescriptorsService;
    }());
    PropertyDescriptorsService.ɵprov = i0.ɵɵdefineInjectable({ factory: function PropertyDescriptorsService_Factory() { return new PropertyDescriptorsService(i0.ɵɵinject(i1.AlfrescoApiService)); }, token: PropertyDescriptorsService, providedIn: "root" });
    PropertyDescriptorsService.ctorParameters = function () { return [
        { type: i1.AlfrescoApiService }
    ]; };

    var ContentTypeService = /** @class */ (function () {
        function ContentTypeService(alfrescoApiService) {
            this.alfrescoApiService = alfrescoApiService;
        }
        Object.defineProperty(ContentTypeService.prototype, "typesApi", {
            get: function () {
                var _a;
                this._typesApi = (_a = this._typesApi) !== null && _a !== void 0 ? _a : new jsApi.TypesApi(this.alfrescoApiService.getInstance());
                return this._typesApi;
            },
            enumerable: false,
            configurable: true
        });
        ContentTypeService.prototype.getContentTypeByPrefix = function (prefixedType) {
            return rxjs.from(this.typesApi.getType(prefixedType));
        };
        ContentTypeService.prototype.getContentTypeChildren = function (nodeType) {
            var where = "(parentId in ('" + nodeType + "') and not namespaceUri matches('http://www.alfresco.*'))";
            var opts = {
                where: where,
                include: ['properties']
            };
            return rxjs.from(this.typesApi.listTypes(opts)).pipe(operators.map(function (result) { return result.list.entries; }));
        };
ContentTypeService.ɵfac = function ContentTypeService_Factory(t) { return new (t || ContentTypeService)(ɵngcc0.ɵɵinject(ɵngcc21.AlfrescoApiService)); };
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ContentTypeService, [{
        type: i0.Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc21.AlfrescoApiService }]; }, null); })();
        return ContentTypeService;
    }());
    ContentTypeService.ɵprov = i0.ɵɵdefineInjectable({ factory: function ContentTypeService_Factory() { return new ContentTypeService(i0.ɵɵinject(i1.AlfrescoApiService)); }, token: ContentTypeService, providedIn: "root" });
    ContentTypeService.ctorParameters = function () { return [
        { type: i1.AlfrescoApiService }
    ]; };

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var ContentTypeDialogComponent = /** @class */ (function () {
        function ContentTypeDialogComponent(dialog, data, contentTypeService) {
            var _this = this;
            this.dialog = dialog;
            this.data = data;
            this.contentTypeService = contentTypeService;
            this.typeProperties = [];
            this.propertyColumns = ['name', 'title', 'dataType'];
            this.title = data.title;
            this.description = data.description;
            this.confirmMessage = data.confirmMessage;
            this.nodeType = data.nodeType;
            this.contentTypeService.getContentTypeByPrefix(this.nodeType).subscribe(function (contentTypeEntry) {
                _this.currentContentType = contentTypeEntry;
                _this.typeProperties = _this.currentContentType.entry.properties.filter(function (property) { return property.id.startsWith(_this.currentContentType.entry.model.namespacePrefix); });
            });
        }
        ContentTypeDialogComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.dialog.backdropClick().subscribe(function () {
                _this.close();
            });
        };
        ContentTypeDialogComponent.prototype.close = function () {
            this.data.select.complete();
        };
        ContentTypeDialogComponent.prototype.onCancel = function () {
            this.close();
        };
        ContentTypeDialogComponent.prototype.onApply = function () {
            this.data.select.next(true);
            this.close();
        };
ContentTypeDialogComponent.ɵfac = function ContentTypeDialogComponent_Factory(t) { return new (t || ContentTypeDialogComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc3.MatDialogRef), ɵngcc0.ɵɵdirectiveInject(i2.MAT_DIALOG_DATA), ɵngcc0.ɵɵdirectiveInject(ContentTypeService)); };
ContentTypeDialogComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ContentTypeDialogComponent, selectors: [["adf-content-type-dialog"]], decls: 25, vars: 20, consts: [[1, "adf-content-type-dialog"], ["mat-dialog-title", "", "data-automation-id", "content-type-dialog-title", 1, "adf-content-type-dialog-title"], ["data-automation-id", "content-type-dialog-content", 1, "adf-content-type-dialog-content"], ["data-automation-id", "content-type-dialog-description"], ["data-automation-id", "content-type-dialog-confirm-message"], [1, "adf-content-type-accordion"], ["mat-table", "", "class", "adf-content-type-table", 3, "dataSource", 4, "ngIf"], ["align", "end"], ["mat-button", "", "mat-dialog-close", "", "id", "content-type-dialog-actions-cancel"], ["mat-button", "", "id", "content-type-dialog-apply-button", "cdkFocusInitial", "", 1, "adf-content-type-dialog-apply-button", 3, "mat-dialog-close", "click"], ["mat-table", "", 1, "adf-content-type-table", 3, "dataSource"], ["matColumnDef", "name"], ["mat-header-cell", "", 4, "matHeaderCellDef"], ["mat-cell", "", 4, "matCellDef"], ["matColumnDef", "title"], ["matColumnDef", "dataType"], ["mat-header-row", "", 4, "matHeaderRowDef"], ["mat-row", "", 4, "matRowDef", "matRowDefColumns"], ["mat-header-cell", ""], ["mat-cell", ""], ["mat-header-row", ""], ["mat-row", ""]], template: function ContentTypeDialogComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "h2", 1);
        ɵngcc0.ɵɵtext(2);
        ɵngcc0.ɵɵpipe(3, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(4, "mat-dialog-content", 2);
        ɵngcc0.ɵɵelementStart(5, "h4", 3);
        ɵngcc0.ɵɵtext(6);
        ɵngcc0.ɵɵpipe(7, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(8, "p", 4);
        ɵngcc0.ɵɵtext(9);
        ɵngcc0.ɵɵpipe(10, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(11, "mat-accordion");
        ɵngcc0.ɵɵelementStart(12, "mat-expansion-panel", 5);
        ɵngcc0.ɵɵelementStart(13, "mat-expansion-panel-header");
        ɵngcc0.ɵɵelementStart(14, "mat-panel-title");
        ɵngcc0.ɵɵtext(15);
        ɵngcc0.ɵɵpipe(16, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(17, ContentTypeDialogComponent_table_17_Template, 12, 3, "table", 6);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(18, "mat-dialog-actions", 7);
        ɵngcc0.ɵɵelementStart(19, "button", 8);
        ɵngcc0.ɵɵtext(20);
        ɵngcc0.ɵɵpipe(21, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(22, "button", 9);
        ɵngcc0.ɵɵlistener("click", function ContentTypeDialogComponent_Template_button_click_22_listener() { return ctx.onApply(); });
        ɵngcc0.ɵɵtext(23);
        ɵngcc0.ɵɵpipe(24, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(3, 8, ctx.title));
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(7, 10, ctx.description));
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(10, 12, ctx.confirmMessage));
        ɵngcc0.ɵɵadvance(6);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(16, 14, "CORE.METADATA.CONTENT_TYPE.DIALOG.VIEW_DETAILS"), " ");
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", (ctx.typeProperties == null ? null : ctx.typeProperties.length) > 0);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(21, 16, "CORE.METADATA.CONTENT_TYPE.DIALOG.CANCEL"));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("mat-dialog-close", true);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(24, 18, "CORE.METADATA.CONTENT_TYPE.DIALOG.APPLY"));
    } }, directives: [ɵngcc3.MatDialogTitle, ɵngcc3.MatDialogContent, ɵngcc12.MatAccordion, ɵngcc12.MatExpansionPanel, ɵngcc12.MatExpansionPanelHeader, ɵngcc12.MatExpansionPanelTitle, ɵngcc23.NgIf, ɵngcc3.MatDialogActions, ɵngcc1.MatButton, ɵngcc3.MatDialogClose, ɵngcc35.MatTable, ɵngcc35.MatColumnDef, ɵngcc35.MatHeaderCellDef, ɵngcc35.MatCellDef, ɵngcc35.MatHeaderRowDef, ɵngcc35.MatRowDef, ɵngcc35.MatHeaderCell, ɵngcc35.MatCell, ɵngcc35.MatHeaderRow, ɵngcc35.MatRow], pipes: [ɵngcc25.TranslatePipe], styles: [".adf-content-type-dialog .mat-expansion-panel{margin-bottom:10px}.adf-content-type-accordion{margin:10px}.adf-content-type-dialog-title{font-size:large;font-weight:200;margin-top:0}.adf-content-type-dialog-description{font-size:small;line-height:normal}.adf-content-type-table{width:100%}.adf-content-type-dialog-apply-button{color:var(--theme-primary-color)}"], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ContentTypeDialogComponent, [{
        type: i0.Component,
        args: [{
                selector: 'adf-content-type-dialog',
                template: "<div class=\"adf-content-type-dialog\">\n    <h2 mat-dialog-title class=\"adf-content-type-dialog-title\" data-automation-id=\"content-type-dialog-title\">{{title |\n        translate}}</h2>\n    <mat-dialog-content class=\"mat-typography\" class=\"adf-content-type-dialog-content\"\n        data-automation-id=\"content-type-dialog-content\">\n        <h4 data-automation-id=\"content-type-dialog-description\">{{description | translate}}</h4>\n        <p data-automation-id=\"content-type-dialog-confirm-message\">{{confirmMessage | translate}}</p>\n        <mat-accordion>\n            <mat-expansion-panel class=\"adf-content-type-accordion\">\n                <mat-expansion-panel-header>\n                    <mat-panel-title>\n                        {{'CORE.METADATA.CONTENT_TYPE.DIALOG.VIEW_DETAILS' | translate}}\n                    </mat-panel-title>\n                </mat-expansion-panel-header>\n                <table mat-table [dataSource]=\"typeProperties\"\n                    *ngIf=\"typeProperties?.length > 0\" class=\"adf-content-type-table\">\n                    <ng-container matColumnDef=\"name\">\n                        <th mat-header-cell *matHeaderCellDef> {{'CORE.METADATA.CONTENT_TYPE.DIALOG.PROPERTY.NAME' |\n                            translate}} </th>\n                        <td mat-cell *matCellDef=\"let property\"> {{property.id}} </td>\n                    </ng-container>\n                    <ng-container matColumnDef=\"title\">\n                        <th mat-header-cell *matHeaderCellDef>\n                            {{'CORE.METADATA.CONTENT_TYPE.DIALOG.PROPERTY.DESCRIPTION' | translate}} </th>\n                        <td mat-cell *matCellDef=\"let property\"> {{property.title}} </td>\n                    </ng-container>\n                    <ng-container matColumnDef=\"dataType\">\n                        <th mat-header-cell *matHeaderCellDef> {{'CORE.METADATA.CONTENT_TYPE.DIALOG.PROPERTY.DATA_TYPE'\n                            | translate}} </th>\n                        <td mat-cell *matCellDef=\"let property\"> {{property.dataType}} </td>\n                    </ng-container>\n                    <tr mat-header-row *matHeaderRowDef=\"propertyColumns\"></tr>\n                    <tr mat-row *matRowDef=\"let row; columns: propertyColumns;\"></tr>\n                </table>\n            </mat-expansion-panel>\n        </mat-accordion>\n    </mat-dialog-content>\n    <mat-dialog-actions align=\"end\">\n        <button mat-button mat-dialog-close\n            id=\"content-type-dialog-actions-cancel\">{{'CORE.METADATA.CONTENT_TYPE.DIALOG.CANCEL' | translate }}</button>\n        <button mat-button class=\"adf-content-type-dialog-apply-button\" id=\"content-type-dialog-apply-button\"\n            [mat-dialog-close]=\"true\" cdkFocusInitial (click)=\"onApply()\">{{'CORE.METADATA.CONTENT_TYPE.DIALOG.APPLY' |\n            translate}}</button>\n    </mat-dialog-actions>\n</div>\n",
                encapsulation: i0.ViewEncapsulation.None,
                styles: [".adf-content-type-dialog .mat-expansion-panel{margin-bottom:10px}.adf-content-type-accordion{margin:10px}.adf-content-type-dialog-title{font-size:large;font-weight:200;margin-top:0}.adf-content-type-dialog-description{font-size:small;line-height:normal}.adf-content-type-table{width:100%}.adf-content-type-dialog-apply-button{color:var(--theme-primary-color)}"]
            }]
    }], function () { return [{ type: ɵngcc3.MatDialogRef }, { type: undefined, decorators: [{
                type: i0.Inject,
                args: [i2.MAT_DIALOG_DATA]
            }] }, { type: ContentTypeService }]; }, null); })();
        return ContentTypeDialogComponent;
    }());
    ContentTypeDialogComponent.ctorParameters = function () { return [
        { type: i2.MatDialogRef },
        { type: undefined, decorators: [{ type: i0.Inject, args: [i2.MAT_DIALOG_DATA,] }] },
        { type: ContentTypeService }
    ]; };

    var ContentTypePropertiesService = /** @class */ (function () {
        function ContentTypePropertiesService(contentTypeService, dialog, versionCompatibilityService, propertyGroupTranslatorService) {
            this.contentTypeService = contentTypeService;
            this.dialog = dialog;
            this.versionCompatibilityService = versionCompatibilityService;
            this.propertyGroupTranslatorService = propertyGroupTranslatorService;
        }
        ContentTypePropertiesService.prototype.getContentTypeCardItem = function (node) {
            var _this = this;
            if (this.versionCompatibilityService.isVersionSupported('7')) {
                return this.contentTypeService.getContentTypeByPrefix(node.nodeType).
                    pipe(operators.map(function (contentType) {
                    var contentTypesOptions$ = _this.getContentTypesAsSelectOption(contentType);
                    var contentTypeCard = _this.buildContentTypeSelectCardModel(contentType.entry.id, contentTypesOptions$);
                    var filteredProperties = _this.getContentTypeSpecificProperties(contentType);
                    var propertiesCard = _this.buildCardItemsFromPropertyList(filteredProperties, node.properties);
                    return __spread([contentTypeCard], propertiesCard);
                }));
            }
            else {
                return rxjs.of([this.buildContentTypeTextCardModel(node.nodeType)]);
            }
        };
        ContentTypePropertiesService.prototype.buildCardItemsFromPropertyList = function (properties, currentProperties) {
            var _this = this;
            return properties.map(function (property) {
                var propertyValue = currentProperties ? currentProperties[property.id] : null;
                return _this.buildCardItemFromProperty(property, propertyValue);
            });
        };
        ContentTypePropertiesService.prototype.buildCardItemFromProperty = function (property, propertyValue) {
            return this.propertyGroupTranslatorService.translateProperty(property, propertyValue, true);
        };
        ContentTypePropertiesService.prototype.getContentTypeSpecificProperties = function (contentType) {
            return contentType.entry.properties.filter(function (property) { return property.id.startsWith(contentType.entry.model.namespacePrefix); });
        };
        ContentTypePropertiesService.prototype.buildContentTypeTextCardModel = function (currentValue) {
            var contentTypeCard = new i1.CardViewTextItemModel({
                label: 'CORE.METADATA.BASIC.CONTENT_TYPE',
                value: currentValue,
                key: 'nodeType',
                editable: false
            });
            return contentTypeCard;
        };
        ContentTypePropertiesService.prototype.buildContentTypeSelectCardModel = function (currentValue, options$) {
            var contentTypeCard = new i1.CardViewSelectItemModel({
                label: 'CORE.METADATA.BASIC.CONTENT_TYPE',
                value: currentValue,
                key: 'nodeType',
                editable: true,
                options$: options$,
                displayNoneOption: false
            });
            return contentTypeCard;
        };
        ContentTypePropertiesService.prototype.getContentTypesAsSelectOption = function (currentType) {
            var _this = this;
            var childrenTypes$ = this.contentTypeService.getContentTypeChildren(currentType.entry.id);
            return rxjs.zip(childrenTypes$, rxjs.of(currentType)).pipe(operators.distinctUntilChanged(), operators.map(function (_b) {
                var _c = __read(_b, 2), contentTypesEntries = _c[0], currentContentType = _c[1];
                var updatedTypes = _this.appendCurrentType(currentContentType, contentTypesEntries);
                return updatedTypes.map(function (contentType) { var _a; return ({ key: contentType.entry.id, label: (_a = contentType.entry.title) !== null && _a !== void 0 ? _a : contentType.entry.id }); });
            }));
        };
        ContentTypePropertiesService.prototype.appendCurrentType = function (currentType, contentTypesEntries) {
            var resultTypes = __spread(contentTypesEntries);
            var currentTypePresent = contentTypesEntries.find(function (type) { return type.entry.id === currentType.entry.id; });
            if (!currentTypePresent) {
                resultTypes.push(currentType);
            }
            return resultTypes;
        };
        ContentTypePropertiesService.prototype.openContentTypeDialogConfirm = function (nodeType) {
            var select = new rxjs.Subject();
            select.subscribe({
                complete: this.close.bind(this)
            });
            var data = {
                title: 'CORE.METADATA.CONTENT_TYPE.DIALOG.TITLE',
                description: 'CORE.METADATA.CONTENT_TYPE.DIALOG.DESCRIPTION',
                confirmMessage: 'CORE.METADATA.CONTENT_TYPE.DIALOG.CONFIRM',
                select: select,
                nodeType: nodeType
            };
            this.openDialog(data, 'adf-content-type-dialog', '600px');
            return select;
        };
        ContentTypePropertiesService.prototype.close = function () {
            this.dialog.closeAll();
        };
        ContentTypePropertiesService.prototype.openDialog = function (data, panelClass, width) {
            this.dialog.open(ContentTypeDialogComponent, {
                data: data,
                panelClass: panelClass,
                width: width,
                disableClose: true
            });
        };
ContentTypePropertiesService.ɵfac = function ContentTypePropertiesService_Factory(t) { return new (t || ContentTypePropertiesService)(ɵngcc0.ɵɵinject(ContentTypeService), ɵngcc0.ɵɵinject(ɵngcc3.MatDialog), ɵngcc0.ɵɵinject(ɵngcc21.VersionCompatibilityService), ɵngcc0.ɵɵinject(PropertyGroupTranslatorService)); };
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ContentTypePropertiesService, [{
        type: i0.Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ContentTypeService }, { type: ɵngcc3.MatDialog }, { type: ɵngcc21.VersionCompatibilityService }, { type: PropertyGroupTranslatorService }]; }, null); })();
        return ContentTypePropertiesService;
    }());
    ContentTypePropertiesService.ɵprov = i0.ɵɵdefineInjectable({ factory: function ContentTypePropertiesService_Factory() { return new ContentTypePropertiesService(i0.ɵɵinject(ContentTypeService), i0.ɵɵinject(i2.MatDialog), i0.ɵɵinject(i1.VersionCompatibilityService), i0.ɵɵinject(PropertyGroupTranslatorService)); }, token: ContentTypePropertiesService, providedIn: "root" });
    ContentTypePropertiesService.ctorParameters = function () { return [
        { type: ContentTypeService },
        { type: i2.MatDialog },
        { type: i1.VersionCompatibilityService },
        { type: PropertyGroupTranslatorService }
    ]; };

    var ContentMetadataService = /** @class */ (function () {
        function ContentMetadataService(basicPropertiesService, contentMetadataConfigFactory, propertyGroupTranslatorService, propertyDescriptorsService, contentTypePropertyService) {
            this.basicPropertiesService = basicPropertiesService;
            this.contentMetadataConfigFactory = contentMetadataConfigFactory;
            this.propertyGroupTranslatorService = propertyGroupTranslatorService;
            this.propertyDescriptorsService = propertyDescriptorsService;
            this.contentTypePropertyService = contentTypePropertyService;
            this.error = new rxjs.Subject();
        }
        ContentMetadataService.prototype.getBasicProperties = function (node) {
            return rxjs.of(this.basicPropertiesService.getProperties(node));
        };
        ContentMetadataService.prototype.getContentTypeProperty = function (node) {
            return this.contentTypePropertyService.getContentTypeCardItem(node);
        };
        ContentMetadataService.prototype.openConfirmDialog = function (changedProperties) {
            return this.contentTypePropertyService.openContentTypeDialogConfirm(changedProperties.nodeType);
        };
        ContentMetadataService.prototype.getGroupedProperties = function (node, preset) {
            var _this = this;
            if (preset === void 0) { preset = 'default'; }
            var groupedProperties = rxjs.of([]);
            if (node.aspectNames) {
                var contentMetadataConfig_1;
                if (typeof preset === 'string') {
                    contentMetadataConfig_1 = this.contentMetadataConfigFactory.get(preset);
                }
                else {
                    contentMetadataConfig_1 = this.contentMetadataConfigFactory.createConfig(preset);
                }
                var groupNames = node.aspectNames
                    .concat(node.nodeType)
                    .filter(function (groupName) { return contentMetadataConfig_1.isGroupAllowed(groupName); });
                if (groupNames.length > 0) {
                    groupedProperties = this.propertyDescriptorsService.load(groupNames).pipe(operators.switchMap(function (groups) { return rxjs.iif(function () { return contentMetadataConfig_1.isIncludeAllEnabled(); }, rxjs.of(contentMetadataConfig_1.appendAllPreset(groups).concat(contentMetadataConfig_1.reorganiseByConfig(groups))), rxjs.of(contentMetadataConfig_1.reorganiseByConfig(groups))); }), operators.map(function (groups) { return contentMetadataConfig_1.filterExcludedPreset(groups); }), operators.map(function (groups) { return _this.filterEmptyPreset(groups); }), operators.map(function (groups) { return _this.setTitleToNameIfNotSet(groups); }), operators.map(function (groups) { return _this.propertyGroupTranslatorService.translateToCardViewGroups(groups, node.properties, node.definition); }));
                }
            }
            return groupedProperties;
        };
        ContentMetadataService.prototype.setTitleToNameIfNotSet = function (propertyGroups) {
            propertyGroups.map(function (propertyGroup) {
                propertyGroup.title = propertyGroup.title || propertyGroup.name;
            });
            return propertyGroups;
        };
        ContentMetadataService.prototype.filterEmptyPreset = function (propertyGroups) {
            return propertyGroups.filter(function (props) { return props.properties.length; });
        };
ContentMetadataService.ɵfac = function ContentMetadataService_Factory(t) { return new (t || ContentMetadataService)(ɵngcc0.ɵɵinject(BasicPropertiesService), ɵngcc0.ɵɵinject(ContentMetadataConfigFactory), ɵngcc0.ɵɵinject(PropertyGroupTranslatorService), ɵngcc0.ɵɵinject(PropertyDescriptorsService), ɵngcc0.ɵɵinject(ContentTypePropertiesService)); };
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ContentMetadataService, [{
        type: i0.Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: BasicPropertiesService }, { type: ContentMetadataConfigFactory }, { type: PropertyGroupTranslatorService }, { type: PropertyDescriptorsService }, { type: ContentTypePropertiesService }]; }, null); })();
        return ContentMetadataService;
    }());
    ContentMetadataService.ɵprov = i0.ɵɵdefineInjectable({ factory: function ContentMetadataService_Factory() { return new ContentMetadataService(i0.ɵɵinject(BasicPropertiesService), i0.ɵɵinject(ContentMetadataConfigFactory), i0.ɵɵinject(PropertyGroupTranslatorService), i0.ɵɵinject(PropertyDescriptorsService), i0.ɵɵinject(ContentTypePropertiesService)); }, token: ContentMetadataService, providedIn: "root" });
    ContentMetadataService.ctorParameters = function () { return [
        { type: BasicPropertiesService },
        { type: ContentMetadataConfigFactory },
        { type: PropertyGroupTranslatorService },
        { type: PropertyDescriptorsService },
        { type: ContentTypePropertiesService }
    ]; };

    var ContentMetadataComponent = /** @class */ (function () {
        function ContentMetadataComponent(contentMetadataService, cardViewUpdateService, nodesApiService, logService, alfrescoApiService, translationService, appConfig) {
            this.contentMetadataService = contentMetadataService;
            this.cardViewUpdateService = cardViewUpdateService;
            this.nodesApiService = nodesApiService;
            this.logService = logService;
            this.alfrescoApiService = alfrescoApiService;
            this.translationService = translationService;
            this.appConfig = appConfig;
            this.onDestroy$ = new rxjs.Subject();
            this.editable = false;
            this.displayEmpty = false;
            this.expanded = false;
            this.multi = false;
            this.displayDefaultProperties = true;
            this.displayAspect = null;
            this.copyToClipboardAction = true;
            this.useChipsForMultiValueProperty = true;
            this.changedProperties = {};
            this.hasMetadataChanged = false;
            this.copyToClipboardAction = this.appConfig.get('content-metadata.copy-to-clipboard-action');
            this.multiValueSeparator = this.appConfig.get('content-metadata.multi-value-pipe-separator') || ContentMetadataComponent.DEFAULT_SEPARATOR;
            this.useChipsForMultiValueProperty = this.appConfig.get('content-metadata.multi-value-chips');
        }
        ContentMetadataComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.cardViewUpdateService.itemUpdated$
                .pipe(operators.debounceTime(500), operators.takeUntil(this.onDestroy$))
                .subscribe(function (updatedNode) {
                _this.hasMetadataChanged = true;
                _this.targetProperty = updatedNode.target;
                _this.updateChanges(updatedNode.changed);
            });
            this.cardViewUpdateService.updatedAspect$.pipe(operators.debounceTime(500), operators.takeUntil(this.onDestroy$))
                .subscribe(function (node) { return _this.loadProperties(node); });
            this.loadProperties(this.node);
        };
        ContentMetadataComponent.prototype.handleUpdateError = function (error) {
            this.logService.error(error);
            var statusCode = 0;
            try {
                statusCode = JSON.parse(error.message).error.statusCode;
            }
            catch (_a) {
            }
            var message = "METADATA.ERRORS." + statusCode;
            if (this.translationService.instant(message) === message) {
                message = 'METADATA.ERRORS.GENERIC';
            }
            this.contentMetadataService.error.next({
                statusCode: statusCode,
                message: message
            });
        };
        ContentMetadataComponent.prototype.ngOnChanges = function (changes) {
            if (changes.node && !changes.node.firstChange) {
                this.loadProperties(changes.node.currentValue);
            }
        };
        ContentMetadataComponent.prototype.loadProperties = function (node) {
            if (node) {
                this.basicProperties$ = this.getProperties(node);
                this.groupedProperties$ = this.contentMetadataService.getGroupedProperties(node, this.preset);
            }
        };
        ContentMetadataComponent.prototype.getProperties = function (node) {
            var properties$ = this.contentMetadataService.getBasicProperties(node);
            var contentTypeProperty$ = this.contentMetadataService.getContentTypeProperty(node);
            return rxjs.zip(properties$, contentTypeProperty$)
                .pipe(operators.map(function (_b) {
                var _c = __read(_b, 2), properties = _c[0], contentTypeProperty = _c[1];
                var filteredProperties = contentTypeProperty.filter(function (property) { return properties.findIndex(function (baseProperty) { return baseProperty.key === property.key; }) === -1; });
                return __spread(properties, filteredProperties);
            }));
        };
        ContentMetadataComponent.prototype.updateChanges = function (updatedNodeChanges) {
            var _this = this;
            Object.keys(updatedNodeChanges).map(function (propertyGroup) {
                if (typeof updatedNodeChanges[propertyGroup] === 'object') {
                    _this.changedProperties[propertyGroup] = Object.assign(Object.assign({}, _this.changedProperties[propertyGroup]), updatedNodeChanges[propertyGroup]);
                }
                else {
                    _this.changedProperties[propertyGroup] = updatedNodeChanges[propertyGroup];
                }
            });
        };
        ContentMetadataComponent.prototype.saveChanges = function () {
            var _this = this;
            if (this.hasContentTypeChanged(this.changedProperties)) {
                this.contentMetadataService.openConfirmDialog(this.changedProperties).subscribe(function () {
                    _this.updateNode();
                });
            }
            else {
                this.updateNode();
            }
        };
        ContentMetadataComponent.prototype.updateNode = function () {
            var _this = this;
            this.nodesApiService.updateNode(this.node.id, this.changedProperties).pipe(operators.catchError(function (err) {
                _this.cardViewUpdateService.updateElement(_this.targetProperty);
                _this.handleUpdateError(err);
                return rxjs.of(null);
            }))
                .subscribe(function (updatedNode) {
                if (updatedNode) {
                    if (_this.hasContentTypeChanged(_this.changedProperties)) {
                        _this.cardViewUpdateService.updateNodeAspect(_this.node);
                    }
                    _this.revertChanges();
                    Object.assign(_this.node, updatedNode);
                    _this.alfrescoApiService.nodeUpdated.next(_this.node);
                }
            });
        };
        ContentMetadataComponent.prototype.hasContentTypeChanged = function (changedProperties) {
            return !!(changedProperties === null || changedProperties === void 0 ? void 0 : changedProperties.nodeType);
        };
        ContentMetadataComponent.prototype.revertChanges = function () {
            this.changedProperties = {};
            this.hasMetadataChanged = false;
        };
        ContentMetadataComponent.prototype.cancelChanges = function () {
            this.revertChanges();
            this.loadProperties(this.node);
        };
        ContentMetadataComponent.prototype.showGroup = function (group) {
            var _this = this;
            var properties = group.properties.filter(function (property) {
                return !_this.isEmpty(property.displayValue);
            });
            return properties.length > 0;
        };
        ContentMetadataComponent.prototype.ngOnDestroy = function () {
            this.onDestroy$.next(true);
            this.onDestroy$.complete();
        };
        ContentMetadataComponent.prototype.canExpandTheCard = function (group) {
            return group.title === this.displayAspect;
        };
        ContentMetadataComponent.prototype.canExpandProperties = function () {
            return !this.expanded || this.displayAspect === 'Properties';
        };
        ContentMetadataComponent.prototype.keyDown = function (event) {
            if (event.keyCode === 37 || event.keyCode === 39) {
                event.stopPropagation();
            }
        };
        ContentMetadataComponent.prototype.isEmpty = function (value) {
            return value === undefined || value === null || value === '';
        };
ContentMetadataComponent.ɵfac = function ContentMetadataComponent_Factory(t) { return new (t || ContentMetadataComponent)(ɵngcc0.ɵɵdirectiveInject(ContentMetadataService), ɵngcc0.ɵɵdirectiveInject(ɵngcc21.CardViewUpdateService), ɵngcc0.ɵɵdirectiveInject(ɵngcc21.NodesApiService), ɵngcc0.ɵɵdirectiveInject(ɵngcc21.LogService), ɵngcc0.ɵɵdirectiveInject(ɵngcc21.AlfrescoApiService), ɵngcc0.ɵɵdirectiveInject(ɵngcc21.TranslationService), ɵngcc0.ɵɵdirectiveInject(ɵngcc21.AppConfigService)); };
ContentMetadataComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ContentMetadataComponent, selectors: [["adf-content-metadata"]], hostAttrs: [1, "adf-content-metadata"], inputs: { editable: "editable", displayEmpty: "displayEmpty", expanded: "expanded", multi: "multi", displayDefaultProperties: "displayDefaultProperties", displayAspect: "displayAspect", copyToClipboardAction: "copyToClipboardAction", useChipsForMultiValueProperty: "useChipsForMultiValueProperty", node: "node", preset: "preset" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 5, vars: 4, consts: [[1, "adf-metadata-properties"], ["displayMode", "flat", 3, "multi"], [3, "expanded", 4, "ngIf"], [4, "ngIf"], ["class", "adf-metadata-action-buttons", 4, "ngIf"], [3, "expanded"], ["role", "heading"], [3, "properties", "editable", "displayEmpty", "copyToClipboardAction", "useChipsForMultiValueProperty", "multiValueSeparator", "keydown"], [4, "ngIf", "ngIfElse"], ["loading", ""], ["class", "adf-metadata-grouped-properties-container", 4, "ngFor", "ngForOf"], [1, "adf-metadata-grouped-properties-container"], ["mode", "indeterminate"], [1, "adf-metadata-action-buttons"], ["mat-button", "", "data-automation-id", "reset-metadata", 3, "disabled", "click"], ["mat-raised-button", "", "color", "primary", "data-automation-id", "save-metadata", 3, "disabled", "click"]], template: function ContentMetadataComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "mat-accordion", 1);
        ɵngcc0.ɵɵtemplate(2, ContentMetadataComponent_mat_expansion_panel_2_Template, 7, 13, "mat-expansion-panel", 2);
        ɵngcc0.ɵɵtemplate(3, ContentMetadataComponent_ng_container_3_Template, 5, 4, "ng-container", 3);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(4, ContentMetadataComponent_div_4_Template, 7, 8, "div", 4);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("multi", ctx.multi);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.displayDefaultProperties);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.expanded);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.editable);
    } }, directives: [ɵngcc12.MatAccordion, ɵngcc23.NgIf, ɵngcc12.MatExpansionPanel, ɵngcc12.MatExpansionPanelHeader, ɵngcc12.MatExpansionPanelTitle, ɵngcc21.CardViewComponent, ɵngcc23.NgForOf, ɵngcc9.MatProgressBar, ɵngcc1.MatButton], pipes: [ɵngcc25.TranslatePipe, ɵngcc23.AsyncPipe], styles: [".adf-metadata-properties .mat-expansion-panel-header.mat-expanded:focus,.adf-metadata-properties .mat-expansion-panel-header.mat-expanded:hover{background:var(--theme-bg-hover-color)}.adf-metadata-properties mat-expansion-panel-header{height:64px}.adf-metadata-properties .mat-expansion-panel:not([class*=mat-elevation-z]){box-shadow:none}.adf-metadata-action-buttons{display:flex;justify-content:space-evenly;margin:10px}"], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ContentMetadataComponent, [{
        type: i0.Component,
        args: [{
                selector: 'adf-content-metadata',
                template: "<div class=\"adf-metadata-properties\">\n    <mat-accordion displayMode=\"flat\"\n                   [multi]=\"multi\">\n        <mat-expansion-panel *ngIf=\"displayDefaultProperties\"\n                             [expanded]=\"canExpandProperties()\"\n                             [attr.data-automation-id]=\"'adf-metadata-group-properties'\">\n            <mat-expansion-panel-header>\n                <mat-panel-title role=\"heading\">\n                    {{ 'CORE.METADATA.BASIC.HEADER' | translate }}\n                </mat-panel-title>\n            </mat-expansion-panel-header>\n            <adf-card-view\n                (keydown)=\"keyDown($event)\"\n                [properties]=\"basicProperties$ | async\"\n                [editable]=\"editable\"\n                [displayEmpty]=\"displayEmpty\"\n                [copyToClipboardAction]=\"copyToClipboardAction\"\n                [useChipsForMultiValueProperty]=\"useChipsForMultiValueProperty\"\n                [multiValueSeparator]=\"multiValueSeparator\">\n            </adf-card-view>\n        </mat-expansion-panel>\n\n        <ng-container *ngIf=\"expanded\">\n            <ng-container *ngIf=\"groupedProperties$ | async; else loading; let groupedProperties\">\n                <div *ngFor=\"let group of groupedProperties; let first = first;\"\n                     class=\"adf-metadata-grouped-properties-container\">\n                    <mat-expansion-panel *ngIf=\"showGroup(group) || editable\"\n                                         [attr.data-automation-id]=\"'adf-metadata-group-' + group.title\"\n                                         [expanded]=\"canExpandTheCard(group) || !displayDefaultProperties && first\">\n                        <mat-expansion-panel-header>\n                            <mat-panel-title>\n                                {{ group.title | translate }}\n                            </mat-panel-title>\n                        </mat-expansion-panel-header>\n\n                        <adf-card-view\n                            (keydown)=\"keyDown($event)\"\n                            [properties]=\"group.properties\"\n                            [editable]=\"editable\"\n                            [displayEmpty]=\"displayEmpty\"\n                            [copyToClipboardAction]=\"copyToClipboardAction\"\n                            [useChipsForMultiValueProperty]=\"useChipsForMultiValueProperty\"\n                            [multiValueSeparator]=\"multiValueSeparator\">\n                        </adf-card-view>\n                    </mat-expansion-panel>\n\n                </div>\n            </ng-container>\n            <ng-template #loading>\n                <mat-progress-bar mode=\"indeterminate\"></mat-progress-bar>\n            </ng-template>\n        </ng-container>\n    </mat-accordion>\n\n    <div class=\"adf-metadata-action-buttons\"\n         *ngIf=\"editable\">\n        <button mat-button\n                (click)=\"cancelChanges()\"\n                data-automation-id=\"reset-metadata\"\n                [disabled]=\"!hasMetadataChanged\">\n                {{ 'CORE.METADATA.ACTIONS.CANCEL' | translate }}\n        </button>\n        <button mat-raised-button\n                (click)=\"saveChanges()\"\n                color=\"primary\"\n                data-automation-id=\"save-metadata\"\n                [disabled]=\"!hasMetadataChanged\">\n                {{ 'CORE.METADATA.ACTIONS.SAVE' | translate }}\n            </button>\n    </div>\n\n</div>\n",
                host: { 'class': 'adf-content-metadata' },
                encapsulation: i0.ViewEncapsulation.None,
                styles: [".adf-metadata-properties .mat-expansion-panel-header.mat-expanded:focus,.adf-metadata-properties .mat-expansion-panel-header.mat-expanded:hover{background:var(--theme-bg-hover-color)}.adf-metadata-properties mat-expansion-panel-header{height:64px}.adf-metadata-properties .mat-expansion-panel:not([class*=mat-elevation-z]){box-shadow:none}.adf-metadata-action-buttons{display:flex;justify-content:space-evenly;margin:10px}"]
            }]
    }], function () { return [{ type: ContentMetadataService }, { type: ɵngcc21.CardViewUpdateService }, { type: ɵngcc21.NodesApiService }, { type: ɵngcc21.LogService }, { type: ɵngcc21.AlfrescoApiService }, { type: ɵngcc21.TranslationService }, { type: ɵngcc21.AppConfigService }]; }, { editable: [{
            type: i0.Input
        }], displayEmpty: [{
            type: i0.Input
        }], expanded: [{
            type: i0.Input
        }], multi: [{
            type: i0.Input
        }], displayDefaultProperties: [{
            type: i0.Input
        }], displayAspect: [{
            type: i0.Input
        }], copyToClipboardAction: [{
            type: i0.Input
        }], useChipsForMultiValueProperty: [{
            type: i0.Input
        }], node: [{
            type: i0.Input
        }], preset: [{
            type: i0.Input
        }] }); })();
        return ContentMetadataComponent;
    }());
    ContentMetadataComponent.DEFAULT_SEPARATOR = ', ';
    ContentMetadataComponent.ctorParameters = function () { return [
        { type: ContentMetadataService },
        { type: i1.CardViewUpdateService },
        { type: i1.NodesApiService },
        { type: i1.LogService },
        { type: i1.AlfrescoApiService },
        { type: i1.TranslationService },
        { type: i1.AppConfigService }
    ]; };
    ContentMetadataComponent.propDecorators = {
        node: [{ type: i0.Input }],
        editable: [{ type: i0.Input }],
        displayEmpty: [{ type: i0.Input }],
        expanded: [{ type: i0.Input }],
        multi: [{ type: i0.Input }],
        preset: [{ type: i0.Input }],
        displayDefaultProperties: [{ type: i0.Input }],
        displayAspect: [{ type: i0.Input }],
        copyToClipboardAction: [{ type: i0.Input }],
        useChipsForMultiValueProperty: [{ type: i0.Input }]
    };

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var AspectListDialogComponent = /** @class */ (function () {
        function AspectListDialogComponent(dialog, data) {
            this.dialog = dialog;
            this.data = data;
            this.currentAspectSelection = [];
            this.title = data.title;
            this.description = data.description;
            this.overTableMessage = data.overTableMessage;
            this.currentNodeId = data.nodeId;
        }
        AspectListDialogComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.dialog.backdropClick().subscribe(function () {
                _this.close();
            });
            this.dialog.keydownEvents().subscribe(function (event) {
                if (event.keyCode === 27) {
                    event.preventDefault();
                    event.stopImmediatePropagation();
                    _this.close();
                }
            });
        };
        AspectListDialogComponent.prototype.onValueChanged = function (aspectList) {
            this.currentAspectSelection = aspectList;
        };
        AspectListDialogComponent.prototype.close = function () {
            this.data.select.complete();
        };
        AspectListDialogComponent.prototype.onCancel = function () {
            this.close();
        };
        AspectListDialogComponent.prototype.onApply = function () {
            this.data.select.next(this.currentAspectSelection);
            this.close();
        };
AspectListDialogComponent.ɵfac = function AspectListDialogComponent_Factory(t) { return new (t || AspectListDialogComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc3.MatDialogRef), ɵngcc0.ɵɵdirectiveInject(i2.MAT_DIALOG_DATA)); };
AspectListDialogComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: AspectListDialogComponent, selectors: [["adf-aspect-list-dialog"]], decls: 32, vars: 27, consts: [["mat-dialog-title", "", "data-automation-id", "aspect-list-dialog-title", 1, "adf-aspect-list-dialog"], [1, "adf-aspect-list-dialog-title"], [1, "adf-aspect-list-dialog-description"], [1, "adf-aspect-list-dialog-information"], ["id", "aspect-list-dialog-over-table-message"], ["id", "aspect-list-dialog-counter"], [1, "adf-aspect-dialog-content"], [3, "nodeId", "valueChanged"], ["aspectList", ""], ["mat-button", "", "id", "aspect-list-dialog-actions-reset", "data-automation-id", "aspect-list-dialog-actions-reset", 3, "click"], ["mat-button", "", "id", "aspect-list-dialog-actions-clear", "data-automation-id", "aspect-list-dialog-actions-clear", 3, "click"], ["mat-button", "", "id", "aspect-list-dialog-actions-cancel", "data-automation-id", "aspect-list-dialog-actions-cancel", 3, "click"], ["mat-button", "", "id", "aspect-list-dialog-actions-apply", "data-automation-id", "aspect-list-dialog-actions-apply", 3, "disabled", "click"]], template: function AspectListDialogComponent_Template(rf, ctx) { if (rf & 1) {
        var _r1 = ɵngcc0.ɵɵgetCurrentView();
        ɵngcc0.ɵɵelementStart(0, "header", 0);
        ɵngcc0.ɵɵelementStart(1, "h4", 1);
        ɵngcc0.ɵɵtext(2);
        ɵngcc0.ɵɵpipe(3, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(4, "div", 2);
        ɵngcc0.ɵɵtext(5);
        ɵngcc0.ɵɵpipe(6, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(7, "div", 3);
        ɵngcc0.ɵɵelementStart(8, "p", 4);
        ɵngcc0.ɵɵtext(9);
        ɵngcc0.ɵɵpipe(10, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(11, "p", 5);
        ɵngcc0.ɵɵtext(12);
        ɵngcc0.ɵɵpipe(13, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(14, "mat-dialog-content", 6);
        ɵngcc0.ɵɵelementStart(15, "adf-aspect-list", 7, 8);
        ɵngcc0.ɵɵlistener("valueChanged", function AspectListDialogComponent_Template_adf_aspect_list_valueChanged_15_listener($event) { return ctx.onValueChanged($event); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(17, "mat-dialog-actions");
        ɵngcc0.ɵɵelementStart(18, "div");
        ɵngcc0.ɵɵelementStart(19, "button", 9);
        ɵngcc0.ɵɵlistener("click", function AspectListDialogComponent_Template_button_click_19_listener() { ɵngcc0.ɵɵrestoreView(_r1); var _r0 = ɵngcc0.ɵɵreference(16); return _r0.reset(); });
        ɵngcc0.ɵɵtext(20);
        ɵngcc0.ɵɵpipe(21, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(22, "button", 10);
        ɵngcc0.ɵɵlistener("click", function AspectListDialogComponent_Template_button_click_22_listener() { ɵngcc0.ɵɵrestoreView(_r1); var _r0 = ɵngcc0.ɵɵreference(16); return _r0.clear(); });
        ɵngcc0.ɵɵtext(23);
        ɵngcc0.ɵɵpipe(24, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(25, "div");
        ɵngcc0.ɵɵelementStart(26, "button", 11);
        ɵngcc0.ɵɵlistener("click", function AspectListDialogComponent_Template_button_click_26_listener() { return ctx.onCancel(); });
        ɵngcc0.ɵɵtext(27);
        ɵngcc0.ɵɵpipe(28, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(29, "button", 12);
        ɵngcc0.ɵɵlistener("click", function AspectListDialogComponent_Template_button_click_29_listener() { return ctx.onApply(); });
        ɵngcc0.ɵɵtext(30);
        ɵngcc0.ɵɵpipe(31, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        var _r0 = ɵngcc0.ɵɵreference(16);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(3, 11, ctx.title));
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(6, 13, ctx.description));
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(10, 15, ctx.overTableMessage));
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵtextInterpolate2("", ctx.currentAspectSelection ? ctx.currentAspectSelection.length : 0, " ", ɵngcc0.ɵɵpipeBind1(13, 17, "ADF-ASPECT-LIST.DIALOG.SELECTED"), "");
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("nodeId", ctx.currentNodeId);
        ɵngcc0.ɵɵadvance(5);
        ɵngcc0.ɵɵtextInterpolate1("", ɵngcc0.ɵɵpipeBind1(21, 19, "ADF-ASPECT-LIST.DIALOG.RESET"), " ");
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵtextInterpolate1("", ɵngcc0.ɵɵpipeBind1(24, 21, "ADF-ASPECT-LIST.DIALOG.CLEAR"), " ");
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵtextInterpolate1("", ɵngcc0.ɵɵpipeBind1(28, 23, "ADF-ASPECT-LIST.DIALOG.CANCEL"), " ");
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("disabled", _r0.hasEqualAspect);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate1("", ɵngcc0.ɵɵpipeBind1(31, 25, "ADF-ASPECT-LIST.DIALOG.APPLY"), " ");
    } }, directives: function () { return [ɵngcc3.MatDialogTitle, ɵngcc3.MatDialogContent, AspectListComponent, ɵngcc3.MatDialogActions, ɵngcc1.MatButton]; }, pipes: function () { return [ɵngcc25.TranslatePipe]; }, styles: [".adf-aspect-list-dialog-title{font-size:large;font-weight:200;margin-top:0}.adf-aspect-list-dialog-description{font-size:small;line-height:normal}.adf-aspect-list-dialog-information{display:flex;font-size:small;justify-content:space-between;padding-left:5px;padding-right:5px}.adf-aspect-list-dialog .mat-dialog-actions{justify-content:space-between}.adf-aspect-dialog-content{padding-top:3px}.adf-aspect-dialog-content .adf-aspect-property-table .mat-cell{font-size:smaller}.adf-aspect-dialog-content .adf-aspect-property-table .mat-column-name{width:30%}"], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AspectListDialogComponent, [{
        type: i0.Component,
        args: [{
                selector: 'adf-aspect-list-dialog',
                template: "<header mat-dialog-title data-automation-id=\"aspect-list-dialog-title\" class=\"adf-aspect-list-dialog\">\n    <h4 class=\"adf-aspect-list-dialog-title\">{{title | translate}}</h4>\n    <div class=\"adf-aspect-list-dialog-description\">{{description | translate}}</div>\n</header>\n\n<div class=\"adf-aspect-list-dialog-information\">\n    <p id=\"aspect-list-dialog-over-table-message\">{{overTableMessage | translate}}</p>\n    <p id=\"aspect-list-dialog-counter\">{{currentAspectSelection ? currentAspectSelection.length : 0}}\n        {{'ADF-ASPECT-LIST.DIALOG.SELECTED' | translate}}</p>\n</div>\n<mat-dialog-content class=\"adf-aspect-dialog-content\">\n    <adf-aspect-list #aspectList (valueChanged)=\"onValueChanged($event)\" [nodeId]=\"currentNodeId\">\n    </adf-aspect-list>\n</mat-dialog-content>\n\n<mat-dialog-actions>\n    <div>\n        <button mat-button (click)=\"aspectList.reset()\" id=\"aspect-list-dialog-actions-reset\"\n            data-automation-id=\"aspect-list-dialog-actions-reset\">{{\n            'ADF-ASPECT-LIST.DIALOG.RESET' | translate }}\n        </button>\n\n        <button mat-button (click)=\"aspectList.clear()\" id=\"aspect-list-dialog-actions-clear\"\n            data-automation-id=\"aspect-list-dialog-actions-clear\">{{\n            'ADF-ASPECT-LIST.DIALOG.CLEAR' | translate }}\n        </button>\n    </div>\n    <div>\n        <button mat-button (click)=\"onCancel()\" id=\"aspect-list-dialog-actions-cancel\"\n            data-automation-id=\"aspect-list-dialog-actions-cancel\">{{\n            'ADF-ASPECT-LIST.DIALOG.CANCEL' | translate }}\n        </button>\n\n        <button mat-button (click)=\"onApply()\" id=\"aspect-list-dialog-actions-apply\"\n            [disabled]=\"aspectList.hasEqualAspect\"\n            data-automation-id=\"aspect-list-dialog-actions-apply\">{{\n            'ADF-ASPECT-LIST.DIALOG.APPLY' | translate }}\n        </button>\n    </div>\n</mat-dialog-actions>\n",
                encapsulation: i0.ViewEncapsulation.None,
                styles: [".adf-aspect-list-dialog-title{font-size:large;font-weight:200;margin-top:0}.adf-aspect-list-dialog-description{font-size:small;line-height:normal}.adf-aspect-list-dialog-information{display:flex;font-size:small;justify-content:space-between;padding-left:5px;padding-right:5px}.adf-aspect-list-dialog .mat-dialog-actions{justify-content:space-between}.adf-aspect-dialog-content{padding-top:3px}.adf-aspect-dialog-content .adf-aspect-property-table .mat-cell{font-size:smaller}.adf-aspect-dialog-content .adf-aspect-property-table .mat-column-name{width:30%}"]
            }]
    }], function () { return [{ type: ɵngcc3.MatDialogRef }, { type: undefined, decorators: [{
                type: i0.Inject,
                args: [i2.MAT_DIALOG_DATA]
            }] }]; }, null); })();
        return AspectListDialogComponent;
    }());
    AspectListDialogComponent.ctorParameters = function () { return [
        { type: i2.MatDialogRef },
        { type: undefined, decorators: [{ type: i0.Inject, args: [i2.MAT_DIALOG_DATA,] }] }
    ]; };

    var AspectListService = /** @class */ (function () {
        function AspectListService(alfrescoApiService, appConfigService, dialog, logService) {
            this.alfrescoApiService = alfrescoApiService;
            this.appConfigService = appConfigService;
            this.dialog = dialog;
            this.logService = logService;
        }
        Object.defineProperty(AspectListService.prototype, "aspectsApi", {
            get: function () {
                var _a;
                this._aspectsApi = (_a = this._aspectsApi) !== null && _a !== void 0 ? _a : new jsApi.AspectsApi(this.alfrescoApiService.getInstance());
                return this._aspectsApi;
            },
            enumerable: false,
            configurable: true
        });
        AspectListService.prototype.getAspects = function () {
            var visibleAspectList = this.getVisibleAspects();
            var standardAspects$ = this.getStandardAspects(visibleAspectList);
            var customAspects$ = this.getCustomAspects();
            return rxjs.zip(standardAspects$, customAspects$).pipe(operators.map(function (_b) {
                var _c = __read(_b, 2), standardAspectList = _c[0], customAspectList = _c[1];
                return __spread(standardAspectList, customAspectList);
            }));
        };
        AspectListService.prototype.getStandardAspects = function (whiteList) {
            var _this = this;
            var where = "(modelId in ('cm:contentmodel', 'emailserver:emailserverModel', 'smf:smartFolder', 'app:applicationmodel' ))";
            var opts = {
                where: where,
                include: ['properties']
            };
            return rxjs.from(this.aspectsApi.listAspects(opts))
                .pipe(operators.map(function (result) { var _a; return _this.filterAspectByConfig(whiteList, (_a = result === null || result === void 0 ? void 0 : result.list) === null || _a === void 0 ? void 0 : _a.entries); }), operators.catchError(function (error) {
                _this.logService.error(error);
                return rxjs.of([]);
            }));
        };
        AspectListService.prototype.getCustomAspects = function () {
            var _this = this;
            var where = "(not namespaceUri matches('http://www.alfresco.*'))";
            var opts = {
                where: where,
                include: ['properties']
            };
            return rxjs.from(this.aspectsApi.listAspects(opts))
                .pipe(operators.map(function (result) { var _a; return (_a = result === null || result === void 0 ? void 0 : result.list) === null || _a === void 0 ? void 0 : _a.entries; }), operators.catchError(function (error) {
                _this.logService.error(error);
                return rxjs.of([]);
            }));
        };
        AspectListService.prototype.filterAspectByConfig = function (visibleAspectList, aspectEntries) {
            var result = aspectEntries ? aspectEntries : [];
            if ((visibleAspectList === null || visibleAspectList === void 0 ? void 0 : visibleAspectList.length) > 0 && aspectEntries) {
                result = aspectEntries.filter(function (value) {
                    var _a;
                    return visibleAspectList.includes((_a = value === null || value === void 0 ? void 0 : value.entry) === null || _a === void 0 ? void 0 : _a.id);
                });
            }
            return result;
        };
        AspectListService.prototype.getVisibleAspects = function () {
            var e_1, _b;
            var visibleAspectList = [];
            var aspectVisibleConfig = this.appConfigService.get('aspect-visible');
            if (aspectVisibleConfig) {
                try {
                    for (var _c = __values(Object.keys(aspectVisibleConfig)), _d = _c.next(); !_d.done; _d = _c.next()) {
                        var aspectGroup = _d.value;
                        visibleAspectList = visibleAspectList.concat(aspectVisibleConfig[aspectGroup]);
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (_d && !_d.done && (_b = _c.return)) _b.call(_c);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
            }
            return visibleAspectList;
        };
        AspectListService.prototype.openAspectListDialog = function (nodeId) {
            var select = new rxjs.Subject();
            select.subscribe({
                complete: this.close.bind(this)
            });
            var data = {
                title: 'ADF-ASPECT-LIST.DIALOG.TITLE',
                description: 'ADF-ASPECT-LIST.DIALOG.DESCRIPTION',
                overTableMessage: 'ADF-ASPECT-LIST.DIALOG.OVER-TABLE-MESSAGE',
                select: select,
                nodeId: nodeId
            };
            this.openDialog(data, 'adf-aspect-list-dialog', '750px');
            return select;
        };
        AspectListService.prototype.openDialog = function (data, panelClass, width) {
            this.dialog.open(AspectListDialogComponent, {
                data: data,
                panelClass: panelClass,
                width: width,
                disableClose: true
            });
        };
        AspectListService.prototype.close = function () {
            this.dialog.closeAll();
        };
AspectListService.ɵfac = function AspectListService_Factory(t) { return new (t || AspectListService)(ɵngcc0.ɵɵinject(ɵngcc21.AlfrescoApiService), ɵngcc0.ɵɵinject(ɵngcc21.AppConfigService), ɵngcc0.ɵɵinject(ɵngcc3.MatDialog), ɵngcc0.ɵɵinject(ɵngcc21.LogService)); };
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AspectListService, [{
        type: i0.Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc21.AlfrescoApiService }, { type: ɵngcc21.AppConfigService }, { type: ɵngcc3.MatDialog }, { type: ɵngcc21.LogService }]; }, null); })();
        return AspectListService;
    }());
    AspectListService.ɵprov = i0.ɵɵdefineInjectable({ factory: function AspectListService_Factory() { return new AspectListService(i0.ɵɵinject(i1.AlfrescoApiService), i0.ɵɵinject(i1.AppConfigService), i0.ɵɵinject(i2.MatDialog), i0.ɵɵinject(i1.LogService)); }, token: AspectListService, providedIn: "root" });
    AspectListService.ctorParameters = function () { return [
        { type: i1.AlfrescoApiService },
        { type: i1.AppConfigService },
        { type: i2.MatDialog },
        { type: i1.LogService }
    ]; };

    var NodeAspectService = /** @class */ (function () {
        function NodeAspectService(alfrescoApiService, nodesApiService, aspectListService, cardViewUpdateService) {
            this.alfrescoApiService = alfrescoApiService;
            this.nodesApiService = nodesApiService;
            this.aspectListService = aspectListService;
            this.cardViewUpdateService = cardViewUpdateService;
        }
        NodeAspectService.prototype.updateNodeAspects = function (nodeId) {
            var _this = this;
            this.aspectListService.openAspectListDialog(nodeId).subscribe(function (aspectList) {
                _this.nodesApiService.updateNode(nodeId, { aspectNames: __spread(aspectList) }).subscribe(function (updatedNode) {
                    _this.alfrescoApiService.nodeUpdated.next(updatedNode);
                    _this.cardViewUpdateService.updateNodeAspect(updatedNode);
                });
            });
        };
NodeAspectService.ɵfac = function NodeAspectService_Factory(t) { return new (t || NodeAspectService)(ɵngcc0.ɵɵinject(ɵngcc21.AlfrescoApiService), ɵngcc0.ɵɵinject(ɵngcc21.NodesApiService), ɵngcc0.ɵɵinject(AspectListService), ɵngcc0.ɵɵinject(ɵngcc21.CardViewUpdateService)); };
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NodeAspectService, [{
        type: i0.Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc21.AlfrescoApiService }, { type: ɵngcc21.NodesApiService }, { type: AspectListService }, { type: ɵngcc21.CardViewUpdateService }]; }, null); })();
        return NodeAspectService;
    }());
    NodeAspectService.ɵprov = i0.ɵɵdefineInjectable({ factory: function NodeAspectService_Factory() { return new NodeAspectService(i0.ɵɵinject(i1.AlfrescoApiService), i0.ɵɵinject(i1.NodesApiService), i0.ɵɵinject(AspectListService), i0.ɵɵinject(i1.CardViewUpdateService)); }, token: NodeAspectService, providedIn: "root" });
    NodeAspectService.ctorParameters = function () { return [
        { type: i1.AlfrescoApiService },
        { type: i1.NodesApiService },
        { type: AspectListService },
        { type: i1.CardViewUpdateService }
    ]; };

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var ContentMetadataCardComponent = /** @class */ (function () {
        function ContentMetadataCardComponent(contentService, nodeAspectService, versionCompatibilityService) {
            this.contentService = contentService;
            this.nodeAspectService = nodeAspectService;
            this.versionCompatibilityService = versionCompatibilityService;
            this.displayEmpty = false;
            this.displayAspect = null;
            this.readOnly = false;
            this.multi = false;
            this._displayDefaultProperties = true;
            this.editable = false;
            this.editAspectSupported = false;
            this.editAspectSupported = this.versionCompatibilityService.isVersionSupported('7');
        }
        Object.defineProperty(ContentMetadataCardComponent.prototype, "displayDefaultProperties", {
            get: function () {
                return this._displayDefaultProperties;
            },
            set: function (value) {
                this._displayDefaultProperties = value;
                this.onDisplayDefaultPropertiesChange();
            },
            enumerable: false,
            configurable: true
        });
        ContentMetadataCardComponent.prototype.ngOnChanges = function (changes) {
            if (changes.displayAspect && changes.displayAspect.currentValue) {
                this.expanded = true;
            }
        };
        ContentMetadataCardComponent.prototype.onDisplayDefaultPropertiesChange = function () {
            this.expanded = !this._displayDefaultProperties;
        };
        ContentMetadataCardComponent.prototype.toggleEdit = function () {
            this.editable = !this.editable;
        };
        ContentMetadataCardComponent.prototype.toggleExpanded = function () {
            this.expanded = !this.expanded;
        };
        ContentMetadataCardComponent.prototype.hasAllowableOperations = function () {
            return this.contentService.hasAllowableOperations(this.node, i1.AllowableOperationsEnum.UPDATE);
        };
        ContentMetadataCardComponent.prototype.openAspectDialog = function () {
            this.nodeAspectService.updateNodeAspects(this.node.id);
        };
        ContentMetadataCardComponent.prototype.isEditAspectSupported = function () {
            return !this.readOnly && this.hasAllowableOperations() && this.editAspectSupported;
        };
ContentMetadataCardComponent.ɵfac = function ContentMetadataCardComponent_Factory(t) { return new (t || ContentMetadataCardComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc21.ContentService), ɵngcc0.ɵɵdirectiveInject(NodeAspectService), ɵngcc0.ɵɵdirectiveInject(ɵngcc21.VersionCompatibilityService)); };
ContentMetadataCardComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ContentMetadataCardComponent, selectors: [["adf-content-metadata-card"]], hostAttrs: [1, "adf-content-metadata-card"], inputs: { displayEmpty: "displayEmpty", displayAspect: "displayAspect", readOnly: "readOnly", multi: "multi", displayDefaultProperties: "displayDefaultProperties", node: "node", preset: "preset" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 1, vars: 1, consts: [[4, "ngIf"], [3, "displayDefaultProperties", "expanded", "node", "displayEmpty", "editable", "multi", "displayAspect", "preset"], ["fxLayout", "row", "fxLayoutAlign", "space-between stretch", 1, "adf-content-metadata-card-footer"], ["mat-icon-button", "", "data-automation-id", "meta-data-card-edit-aspect", 3, "click", 4, "ngIf"], ["mat-icon-button", "", "data-automation-id", "meta-data-card-toggle-edit", 3, "click", 4, "ngIf"], ["mat-button", "", "data-automation-id", "meta-data-card-toggle-expand", 3, "click", 4, "ngIf"], ["mat-icon-button", "", "data-automation-id", "meta-data-card-edit-aspect", 3, "click"], ["mat-icon-button", "", "data-automation-id", "meta-data-card-toggle-edit", 3, "click"], ["mat-button", "", "data-automation-id", "meta-data-card-toggle-expand", 3, "click"], ["data-automation-id", "meta-data-card-toggle-expand-label"]], template: function ContentMetadataCardComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, ContentMetadataCardComponent_mat_card_0_Template, 8, 11, "mat-card", 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngIf", ctx.node);
    } }, directives: [ɵngcc23.NgIf, ɵngcc5.MatCard, ɵngcc5.MatCardContent, ContentMetadataComponent, ɵngcc5.MatCardFooter, ɵngcc36.DefaultLayoutDirective, ɵngcc36.DefaultLayoutAlignDirective, ɵngcc1.MatButton, ɵngcc4.MatIcon], pipes: [ɵngcc25.TranslatePipe], styles: [".adf-content-metadata-card .mat-card{padding:0}.adf-content-metadata-card .mat-card .mat-card-content{margin-bottom:0}.adf-content-metadata-card-footer.mat-card-footer{border-top:1px solid var(--theme-border-color);margin:0;padding:8px 12px}.adf-content-metadata-card-footer.mat-card-footer button{color:var(--theme-text-color)}.adf-content-metadata-card-footer.mat-card-footer button:hover{color:var(--theme-text-bold-color)}"], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ContentMetadataCardComponent, [{
        type: i0.Component,
        args: [{
                selector: 'adf-content-metadata-card',
                template: "<mat-card *ngIf=\"node\">\n    <mat-card-content>\n        <adf-content-metadata\n            [displayDefaultProperties]=\"displayDefaultProperties\"\n            [expanded]=\"expanded\"\n            [node]=\"node\"\n            [displayEmpty]=\"displayEmpty\"\n            [editable]=\"editable\"\n            [multi]=\"multi\"\n            [displayAspect]=\"displayAspect\"\n            [preset]=\"preset\">\n        </adf-content-metadata>\n    </mat-card-content>\n    <mat-card-footer class=\"adf-content-metadata-card-footer\" fxLayout=\"row\" fxLayoutAlign=\"space-between stretch\">\n        <div>\n            <button *ngIf=\"isEditAspectSupported()\"\n                mat-icon-button\n                (click)=\"openAspectDialog()\"\n                [attr.title]=\"'CORE.METADATA.ACTIONS.EDIT_ASPECTS' | translate\"\n                [attr.aria-label]=\"'CORE.METADATA.ACCESSIBILITY.EDIT_ASPECTS' | translate\"\n                data-automation-id=\"meta-data-card-edit-aspect\">\n                <mat-icon>menu</mat-icon>\n            </button>\n            <button *ngIf=\"!readOnly && hasAllowableOperations()\"\n                mat-icon-button\n                (click)=\"toggleEdit()\"\n                [attr.title]=\"'CORE.METADATA.ACTIONS.EDIT' | translate\"\n                [attr.aria-label]=\"'CORE.METADATA.ACCESSIBILITY.EDIT' | translate\"\n                data-automation-id=\"meta-data-card-toggle-edit\">\n                <mat-icon>mode_edit</mat-icon>\n            </button>\n        </div>\n        <button *ngIf=\"displayDefaultProperties\" mat-button (click)=\"toggleExpanded()\" data-automation-id=\"meta-data-card-toggle-expand\">\n            <ng-container *ngIf=\"!expanded\">\n                <span data-automation-id=\"meta-data-card-toggle-expand-label\">{{ 'ADF_VIEWER.SIDEBAR.METADATA.MORE_INFORMATION' | translate }}</span>\n                <mat-icon>keyboard_arrow_down</mat-icon>\n            </ng-container>\n            <ng-container *ngIf=\"expanded\">\n                <span data-automation-id=\"meta-data-card-toggle-expand-label\">{{ 'ADF_VIEWER.SIDEBAR.METADATA.LESS_INFORMATION' | translate }}</span>\n                <mat-icon>keyboard_arrow_up</mat-icon>\n            </ng-container>\n        </button>\n    </mat-card-footer>\n</mat-card>\n",
                encapsulation: i0.ViewEncapsulation.None,
                host: { 'class': 'adf-content-metadata-card' },
                styles: [".adf-content-metadata-card .mat-card{padding:0}.adf-content-metadata-card .mat-card .mat-card-content{margin-bottom:0}.adf-content-metadata-card-footer.mat-card-footer{border-top:1px solid var(--theme-border-color);margin:0;padding:8px 12px}.adf-content-metadata-card-footer.mat-card-footer button{color:var(--theme-text-color)}.adf-content-metadata-card-footer.mat-card-footer button:hover{color:var(--theme-text-bold-color)}"]
            }]
    }], function () { return [{ type: ɵngcc21.ContentService }, { type: NodeAspectService }, { type: ɵngcc21.VersionCompatibilityService }]; }, { displayEmpty: [{
            type: i0.Input
        }], displayAspect: [{
            type: i0.Input
        }], readOnly: [{
            type: i0.Input
        }], multi: [{
            type: i0.Input
        }], displayDefaultProperties: [{
            type: i0.Input
        }], node: [{
            type: i0.Input
        }], preset: [{
            type: i0.Input
        }] }); })();
        return ContentMetadataCardComponent;
    }());
    ContentMetadataCardComponent.ctorParameters = function () { return [
        { type: i1.ContentService },
        { type: NodeAspectService },
        { type: i1.VersionCompatibilityService }
    ]; };
    ContentMetadataCardComponent.propDecorators = {
        node: [{ type: i0.Input }],
        displayEmpty: [{ type: i0.Input }],
        displayAspect: [{ type: i0.Input }],
        preset: [{ type: i0.Input }],
        readOnly: [{ type: i0.Input }],
        multi: [{ type: i0.Input }],
        displayDefaultProperties: [{ type: i0.Input }]
    };

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var ContentMetadataModule = /** @class */ (function () {
        function ContentMetadataModule() {
        }
ContentMetadataModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: ContentMetadataModule });
ContentMetadataModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function ContentMetadataModule_Factory(t) { return new (t || ContentMetadataModule)(); }, imports: [[
            common.CommonModule,
            MaterialModule,
            flexLayout.FlexLayoutModule,
            i1.CoreModule
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ContentMetadataModule, { declarations: [ContentMetadataComponent, ContentMetadataCardComponent], imports: [ɵngcc23.CommonModule, MaterialModule, ɵngcc32.FlexLayoutModule, ɵngcc21.CoreModule], exports: [ContentMetadataComponent, ContentMetadataCardComponent] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ContentMetadataModule, [{
        type: i0.NgModule,
        args: [{
                imports: [
                    common.CommonModule,
                    MaterialModule,
                    flexLayout.FlexLayoutModule,
                    i1.CoreModule
                ],
                exports: [
                    ContentMetadataComponent,
                    ContentMetadataCardComponent
                ],
                declarations: [
                    ContentMetadataComponent,
                    ContentMetadataCardComponent
                ]
            }]
    }], function () { return []; }, null); })();
        return ContentMetadataModule;
    }());

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var PermissionDisplayModel = /** @class */ (function () {
        function PermissionDisplayModel(obj) {
            this.isInherited = false;
            if (obj) {
                this.authorityId = obj.authorityId;
                this.name = obj.name;
                this.accessStatus = obj.accessStatus;
                this.isInherited = obj.isInherited !== null && obj.isInherited !== undefined ? obj.isInherited : false;
                this.icon = obj.icon ? obj.icon : 'vpn_key';
            }
        }
        return PermissionDisplayModel;
    }());

    var NodePermissionService = /** @class */ (function () {
        function NodePermissionService(apiService, searchApiService, nodeService, translation) {
            this.apiService = apiService;
            this.searchApiService = searchApiService;
            this.nodeService = nodeService;
            this.translation = translation;
        }
        Object.defineProperty(NodePermissionService.prototype, "groupsApi", {
            get: function () {
                var _a;
                this._groupsApi = (_a = this._groupsApi) !== null && _a !== void 0 ? _a : new jsApi.GroupsApi(this.apiService.getInstance());
                return this._groupsApi;
            },
            enumerable: false,
            configurable: true
        });
        NodePermissionService.prototype.getNodeRoles = function (node) {
            var _this = this;
            var retrieveSiteQueryBody = this.buildRetrieveSiteQueryBody(node.path.elements);
            return this.searchApiService.searchByQueryBody(retrieveSiteQueryBody)
                .pipe(operators.switchMap(function (siteNodeList) {
                var _a;
                if (siteNodeList.list.entries.length > 0) {
                    var siteName = siteNodeList.list.entries[0].entry.name;
                    return _this.getGroupMembersBySiteName(siteName);
                }
                else {
                    return rxjs.of((_a = node.permissions) === null || _a === void 0 ? void 0 : _a.settable);
                }
            }));
        };
        NodePermissionService.prototype.getNodePermissions = function (node) {
            var _a, _b;
            var result = [];
            if ((_a = node === null || node === void 0 ? void 0 : node.permissions) === null || _a === void 0 ? void 0 : _a.locallySet) {
                node.permissions.locallySet.map(function (permissionElement) {
                    result.push(new PermissionDisplayModel(permissionElement));
                });
            }
            if ((_b = node === null || node === void 0 ? void 0 : node.permissions) === null || _b === void 0 ? void 0 : _b.inherited) {
                node.permissions.inherited.map(function (permissionElement) {
                    var permissionInherited = new PermissionDisplayModel(permissionElement);
                    permissionInherited.isInherited = true;
                    result.push(permissionInherited);
                });
            }
            return result;
        };
        NodePermissionService.prototype.updatePermissionRole = function (node, updatedPermissionRole) {
            var permissionBody = { permissions: { locallySet: [] } };
            var index = node.permissions.locallySet.map(function (permission) { return permission.authorityId; }).indexOf(updatedPermissionRole.authorityId);
            permissionBody.permissions.locallySet = permissionBody.permissions.locallySet.concat(node.permissions.locallySet);
            if (index !== -1) {
                permissionBody.permissions.locallySet[index] = updatedPermissionRole;
            }
            else {
                permissionBody.permissions.locallySet.push(updatedPermissionRole);
            }
            return this.nodeService.updateNode(node.id, permissionBody);
        };
        NodePermissionService.prototype.updateNodePermissions = function (nodeId, permissionList) {
            var _this = this;
            return this.nodeService.getNode(nodeId).pipe(operators.switchMap(function (node) { return _this.updateLocallySetPermissions(node, permissionList); }));
        };
        NodePermissionService.prototype.updateLocallySetPermissions = function (node, permissions) {
            var permissionBody = { permissions: { locallySet: [] } };
            var permissionList = permissions;
            var duplicatedPermissions = this.getDuplicatedPermissions(node.permissions.locallySet, permissionList);
            if (duplicatedPermissions.length > 0) {
                var list = duplicatedPermissions.map(function (permission) { return 'authority -> ' + permission.authorityId + ' / role -> ' + permission.name; }).join(', ');
                var duplicatePermissionMessage = this.translation.instant('PERMISSION_MANAGER.ERROR.DUPLICATE-PERMISSION', { list: list });
                return rxjs.throwError(duplicatePermissionMessage);
            }
            permissionBody.permissions.locallySet = node.permissions.locallySet ? node.permissions.locallySet.concat(permissionList) : permissionList;
            return this.nodeService.updateNode(node.id, permissionBody);
        };
        NodePermissionService.prototype.getDuplicatedPermissions = function (nodeLocallySet, permissionListAdded) {
            var _this = this;
            var duplicatePermissions = [];
            if (nodeLocallySet) {
                permissionListAdded.forEach(function (permission) {
                    var duplicate = nodeLocallySet.find(function (localPermission) { return _this.isEqualPermission(localPermission, permission); });
                    if (duplicate) {
                        duplicatePermissions.push(duplicate);
                    }
                });
            }
            return duplicatePermissions;
        };
        NodePermissionService.prototype.isEqualPermission = function (oldPermission, newPermission) {
            return oldPermission.accessStatus === newPermission.accessStatus &&
                oldPermission.authorityId === newPermission.authorityId &&
                oldPermission.name === newPermission.name;
        };
        NodePermissionService.prototype.removePermission = function (node, permissionToRemove) {
            var permissionBody = { permissions: { locallySet: [] } };
            var index = node.permissions.locallySet.map(function (permission) { return permission.authorityId; }).indexOf(permissionToRemove.authorityId);
            if (index !== -1) {
                node.permissions.locallySet.splice(index, 1);
                permissionBody.permissions.locallySet = node.permissions.locallySet;
                return this.nodeService.updateNode(node.id, permissionBody);
            }
            else {
                return rxjs.of(node);
            }
        };
        NodePermissionService.prototype.getGroupMembersBySiteName = function (siteName) {
            var _this = this;
            var groupName = 'GROUP_site_' + siteName;
            return this.getGroupMemberByGroupName(groupName)
                .pipe(operators.map(function (groupMemberPaging) {
                var displayResult = [];
                groupMemberPaging.list.entries.forEach(function (member) {
                    displayResult.push(_this.formattedRoleName(member.entry.displayName, 'site_' + siteName));
                });
                return displayResult;
            }));
        };
        NodePermissionService.prototype.getGroupMemberByGroupName = function (groupName, opts) {
            return rxjs.from(this.groupsApi.listGroupMemberships(groupName, opts));
        };
        NodePermissionService.prototype.formattedRoleName = function (displayName, siteName) {
            return displayName.replace(siteName + '_', '');
        };
        NodePermissionService.prototype.buildRetrieveSiteQueryBody = function (nodePath) {
            var pathNames = nodePath.map(function (node) { return 'name: "' + node.name + '"'; });
            var builtPathNames = pathNames.join(' OR ');
            return {
                'query': {
                    'query': builtPathNames
                },
                'paging': {
                    'maxItems': 100,
                    'skipCount': 0
                },
                'include': ['aspectNames', 'properties'],
                'filterQueries': [
                    {
                        'query': "TYPE:'st:site'"
                    }
                ]
            };
        };
        NodePermissionService.prototype.getLocalPermissions = function (node) {
            var _a;
            var result = [];
            if ((_a = node === null || node === void 0 ? void 0 : node.permissions) === null || _a === void 0 ? void 0 : _a.locallySet) {
                node.permissions.locallySet.forEach(function (permissionElement) {
                    result.push(new PermissionDisplayModel(permissionElement));
                });
            }
            return result;
        };
        NodePermissionService.prototype.getInheritedPermission = function (node) {
            var _a;
            var result = [];
            if ((_a = node === null || node === void 0 ? void 0 : node.permissions) === null || _a === void 0 ? void 0 : _a.inherited) {
                node.permissions.inherited.forEach(function (permissionElement) {
                    var permissionInherited = new PermissionDisplayModel(permissionElement);
                    permissionInherited.isInherited = true;
                    result.push(permissionInherited);
                });
            }
            return result;
        };
        NodePermissionService.prototype.removePermissions = function (node, permissions) {
            var permissionBody = { permissions: { locallySet: [] } };
            permissions.forEach(function (permission) {
                var index = node.permissions.locallySet.findIndex(function (locallySet) { return locallySet.authorityId === permission.authorityId; });
                if (index !== -1) {
                    node.permissions.locallySet.splice(index, 1);
                }
            });
            permissionBody.permissions.locallySet = node.permissions.locallySet;
            return this.nodeService.updateNode(node.id, permissionBody);
        };
        NodePermissionService.prototype.updatePermissions = function (node, permissions) {
            var permissionBody = { permissions: { locallySet: [] } };
            permissionBody.permissions.locallySet = permissions;
            return this.nodeService.updateNode(node.id, permissionBody);
        };
        NodePermissionService.prototype.getNodeWithRoles = function (nodeId) {
            var _this = this;
            return this.nodeService.getNode(nodeId).pipe(operators.switchMap(function (node) {
                return rxjs.forkJoin({
                    node: rxjs.of(node),
                    roles: _this.getNodeRoles(node)
                        .pipe(operators.catchError(function () { var _a; return rxjs.of((_a = node.permissions) === null || _a === void 0 ? void 0 : _a.settable); }), operators.map(function (_roles) { return _roles.map(function (role) { return ({ role: role, label: role }); }); }))
                });
            }));
        };
        NodePermissionService.prototype.transformNodeToUserPerson = function (node) {
            var person = null, group = null;
            if (node.nodeType === 'cm:person') {
                var firstName = node.properties['cm:firstName'];
                var lastName = node.properties['cm:lastName'];
                var email = node.properties['cm:email'];
                var id = node.properties['cm:userName'];
                person = new i1.EcmUserModel({ id: id, firstName: firstName, lastName: lastName, email: email });
            }
            if (node.nodeType === 'cm:authorityContainer') {
                var displayName = node.properties['cm:authorityDisplayName'] || node.properties['cm:authorityName'];
                var id = node.properties['cm:authorityName'];
                group = new jsApi.Group({ displayName: displayName, id: id });
            }
            return { person: person, group: group };
        };
NodePermissionService.ɵfac = function NodePermissionService_Factory(t) { return new (t || NodePermissionService)(ɵngcc0.ɵɵinject(ɵngcc21.AlfrescoApiService), ɵngcc0.ɵɵinject(ɵngcc21.SearchService), ɵngcc0.ɵɵinject(ɵngcc21.NodesApiService), ɵngcc0.ɵɵinject(ɵngcc21.TranslationService)); };
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NodePermissionService, [{
        type: i0.Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc21.AlfrescoApiService }, { type: ɵngcc21.SearchService }, { type: ɵngcc21.NodesApiService }, { type: ɵngcc21.TranslationService }]; }, null); })();
        return NodePermissionService;
    }());
    NodePermissionService.ɵprov = i0.ɵɵdefineInjectable({ factory: function NodePermissionService_Factory() { return new NodePermissionService(i0.ɵɵinject(i1.AlfrescoApiService), i0.ɵɵinject(i1.SearchService), i0.ɵɵinject(i1.NodesApiService), i0.ɵɵinject(i1.TranslationService)); }, token: NodePermissionService, providedIn: "root" });
    NodePermissionService.ctorParameters = function () { return [
        { type: i1.AlfrescoApiService },
        { type: i1.SearchService },
        { type: i1.NodesApiService },
        { type: i1.TranslationService }
    ]; };

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var MemberModel = /** @class */ (function () {
        function MemberModel(input) {
            this.readonly = false;
            if (input) {
                Object.assign(this, input);
            }
        }
        MemberModel.parseFromSearchResult = function (_a) {
            var entry = _a.entry;
            var result = new MemberModel();
            if (entry.nodeType === 'cm:person') {
                var person = new i1.EcmUserModel({
                    firstName: entry.properties['cm:firstName'],
                    lastName: entry.properties['cm:lastName'],
                    email: entry.properties['cm:email'],
                    id: entry.properties['cm:userName']
                });
                result.id = person.id;
                result.entry = { person: person };
                result.accessStatus = 'ALLOWED';
                return result;
            }
            if (entry.nodeType === 'cm:authorityContainer') {
                var group = new jsApi.Group({
                    id: entry.properties['cm:authorityName'],
                    displayName: entry.properties['cm:authorityDisplayName'] || entry.properties['cm:authorityName']
                });
                result.id = group.id;
                result.entry = { group: group };
                result.accessStatus = 'ALLOWED';
                return result;
            }
            return null;
        };
        MemberModel.prototype.toPermissionElement = function () {
            return {
                authorityId: this.id,
                name: this.role,
                accessStatus: this.accessStatus
            };
        };
        return MemberModel;
    }());

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var AddPermissionDialogComponent = /** @class */ (function () {
        function AddPermissionDialogComponent(data, dialogRef) {
            this.data = data;
            this.dialogRef = dialogRef;
            this.isSearchActive = true;
            this.selectedMembers = [];
            this.existingMembers = [];
            this.currentSelection = [];
            this.existingMembers = this.data.node.permissions.locallySet || [];
        }
        AddPermissionDialogComponent.prototype.onSelect = function (items) {
            this.currentSelection = items;
        };
        AddPermissionDialogComponent.prototype.onAddClicked = function () {
            var selection = this.selectedMembers.filter(function (member) { return !member.readonly; }).map(function (member) { return member.toPermissionElement(); });
            this.data.confirm.next(selection);
            this.data.confirm.complete();
        };
        AddPermissionDialogComponent.prototype.onSearchAddClicked = function () {
            var _this = this;
            var newMembers = this.currentSelection.map(function (item) { return MemberModel.parseFromSearchResult(item); })
                .filter(function (_a) {
                var id = _a.id;
                return !_this.selectedMembers.find(function (member) { return member.id === id; });
            });
            this.selectedMembers = this.selectedMembers.concat(newMembers);
            this.selectedMembers.forEach(function (member) {
                var existingMember = _this.existingMembers.find(function (_a) {
                    var authorityId = _a.authorityId;
                    return authorityId === member.id;
                });
                if (!!existingMember) {
                    member.role = existingMember.name;
                    member.accessStatus = existingMember.accessStatus;
                    member.readonly = true;
                }
            });
            this.disableSearch();
        };
        AddPermissionDialogComponent.prototype.canCloseDialog = function () {
            if (!!this.selectedMembers.length) {
                this.disableSearch();
            }
            else {
                this.dialogRef.close();
            }
        };
        AddPermissionDialogComponent.prototype.enableSearch = function () {
            this.isSearchActive = true;
        };
        AddPermissionDialogComponent.prototype.disableSearch = function () {
            this.isSearchActive = false;
        };
        AddPermissionDialogComponent.prototype.onBulkUpdate = function (role) {
            this.selectedMembers.filter(function (member) { return !member.readonly; })
                .forEach(function (member) { return (member.role = role); });
        };
        AddPermissionDialogComponent.prototype.onMemberDelete = function (_a) {
            var id = _a.id;
            var index = this.selectedMembers.findIndex(function (member) { return member.id === id; });
            this.selectedMembers.splice(index, 1);
            if (this.selectedMembers.length === 0) {
                this.enableSearch();
                this.currentSelection = [];
            }
        };
        AddPermissionDialogComponent.prototype.onMemberUpdate = function (role, member) {
            var _member = this.selectedMembers.find(function (_a) {
                var id = _a.id;
                return id === member.id;
            });
            _member.role = role;
        };
        AddPermissionDialogComponent.prototype.isValid = function () {
            return this.selectedMembers.filter(function (_a) {
                var readonly = _a.readonly;
                return !readonly;
            }).length && this.selectedMembers.every(function (_a) {
                var role = _a.role;
                return !!role;
            });
        };
AddPermissionDialogComponent.ɵfac = function AddPermissionDialogComponent_Factory(t) { return new (t || AddPermissionDialogComponent)(ɵngcc0.ɵɵdirectiveInject(i2.MAT_DIALOG_DATA), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.MatDialogRef)); };
AddPermissionDialogComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: AddPermissionDialogComponent, selectors: [["adf-add-permission-dialog"]], decls: 5, vars: 5, consts: [["mat-dialog-title", "", "id", "add-permission-dialog-title"], [4, "ngIf"], ["mat-button", "", 1, "adf-search-user-button", 3, "click"], [1, "adf-toolbar--spacer"], [1, "adf-new-permission-table"], ["class", "adf-datatable-permission", "selectionMode", "none", "data-automation-id", "adf-user-role-selection-table", 3, "rows", "stickyHeader", 4, "ngIf"], ["mat-button", "", "mat-dialog-close", "", "data-automation-id", "add-permission-dialog-close-button"], ["mat-button", "", "data-automation-id", "add-permission-dialog-confirm-button", 1, "adf-choose-action", 3, "mat-dialog-close", "disabled", "click"], ["selectionMode", "none", "data-automation-id", "adf-user-role-selection-table", 1, "adf-datatable-permission", 3, "rows", "stickyHeader"], ["key", "$thumbunail", 1, "adf-datatable-cell--image", "adf-authority-icon-column", 3, "sortable"], ["key", "id", 1, "adf-ellipsis-cell", "adf-expand-cell-5", "adf-authorityId-column", 3, "title"], ["title", "PERMISSION_MANAGER.PERMISSION_DISPLAY.ROLE", "key", "role", 1, "adf-ellipsis-cell", "adf-expand-cell-4"], ["key", "", 1, "adf-datatable-cell", "adf-delete-permission-column", 3, "sortable"], [3, "context"], ["id", "adf-select-role-permission", 3, "readonly", "value", "roles", "roleChanged"], ["placeholder", "PERMISSION_MANAGER.COLUMN.BULK-ROLE", "id", "adf-bulk-select-role-permission", 1, "adf-permission-role-column-header", 3, "roles", "roleChanged"], ["mat-icon-button", "", "data-automation-id", "adf-delete-permission-button", 1, "adf-add-member-action", 3, "click"], [1, "adf-search-container", 3, "select"], ["mat-button", "", "data-automation-id", "add-permission-dialog-close-button", 3, "click"], ["mat-button", "", "data-automation-id", "add-permission-dialog-confirm-button", 3, "disabled", "click"]], template: function AddPermissionDialogComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "h2", 0);
        ɵngcc0.ɵɵtext(1);
        ɵngcc0.ɵɵpipe(2, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(3, AddPermissionDialogComponent_ng_container_3_Template, 17, 12, "ng-container", 1);
        ɵngcc0.ɵɵtemplate(4, AddPermissionDialogComponent_ng_container_4_Template, 10, 7, "ng-container", 1);
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 3, (ctx.data == null ? null : ctx.data.title) ? ctx.data == null ? null : ctx.data.title : "PERMISSION_MANAGER.ADD-PERMISSION.BASE-DIALOG-TITLE"), "\n");
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.isSearchActive);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.isSearchActive);
    } }, directives: function () { return [ɵngcc3.MatDialogTitle, ɵngcc23.NgIf, ɵngcc3.MatDialogContent, ɵngcc1.MatButton, ɵngcc4.MatIcon, ɵngcc3.MatDialogActions, ɵngcc3.MatDialogClose, ɵngcc21.DataTableComponent, ɵngcc21.DataColumnListComponent, ɵngcc21.DataColumnComponent, ɵngcc21.DateColumnHeaderComponent, UserIconColumnComponent, UserNameColumnComponent, UserRoleColumnComponent, AddPermissionPanelComponent]; }, pipes: function () { return [ɵngcc25.TranslatePipe]; }, styles: [".adf-add-permission-dialog .mat-dialog-title{color:var(--theme-text-bold-color);font-size:20px;font-stretch:normal;font-style:normal;font-weight:600;letter-spacing:-.5px;line-height:1.6;margin-left:24px;margin-right:24px}.adf-add-permission-dialog .mat-dialog-container{padding-left:0;padding-right:0}.adf-add-permission-dialog .mat-dialog-content{flex-grow:1;height:80vh;margin:0;overflow:hidden}.adf-add-permission-dialog .mat-dialog-content .adf-new-permission-table{height:90%}.adf-add-permission-dialog .mat-dialog-content .adf-search-container{height:100%}.adf-add-permission-dialog .mat-dialog-actions{background-color:var(--theme-background-color);color:var(--theme-foreground-text-color);display:flex;justify-content:flex-end;padding:0 24px}.adf-add-permission-dialog .mat-dialog-actions button{font-weight:400;text-transform:uppercase}.adf-add-permission-dialog .mat-dialog-actions .adf-choose-action[disabled]{color:var(--theme-secondary-text-color)}.adf-add-permission-dialog .mat-dialog-actions .adf-choose-action:enabled{color:var(--theme-primary-color)}.adf-add-permission-dialog .adf-search-user-button{width:100%}.adf-add-permission-dialog .adf-search-user-button .mat-button-wrapper{align-items:center;display:flex}.adf-add-permission-dialog .adf-add-member-action{padding:0 15px}"], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AddPermissionDialogComponent, [{
        type: i0.Component,
        args: [{
                selector: 'adf-add-permission-dialog',
                template: "<h2 mat-dialog-title id=\"add-permission-dialog-title\">\n    {{ (data?.title ? data?.title : \"PERMISSION_MANAGER.ADD-PERMISSION.BASE-DIALOG-TITLE\") | translate }}\n</h2>\n\n<ng-container *ngIf=\"!isSearchActive\">\n    <mat-dialog-content>\n        <button mat-button (click)=\"enableSearch()\" class=\"adf-search-user-button\">\n            {{ \"PERMISSION_MANAGER.ADD-PERMISSION.SEARCH\" | translate }}\n            <span class=\"adf-toolbar--spacer\"></span>\n            <mat-icon>search</mat-icon>\n        </button>\n\n        <div class=\"adf-new-permission-table\">\n            <adf-datatable [rows]=\"selectedMembers\"\n                           class=\"adf-datatable-permission\"\n                           selectionMode=\"none\"\n                           [stickyHeader]=\"true\"\n                           data-automation-id=\"adf-user-role-selection-table\"\n                           *ngIf=\"selectedMembers.length\">\n                <data-columns>\n                    <data-column class=\"adf-datatable-cell--image adf-authority-icon-column\" key=\"$thumbunail\" [sortable]=\"false\">\n                        <ng-template let-context>\n                            <adf-user-icon-column [context]=\"context\"></adf-user-icon-column>\n                        </ng-template>\n                    </data-column>\n\n                    <data-column class=\"adf-ellipsis-cell adf-expand-cell-5 adf-authorityId-column\"\n                                 [title]=\"'PERMISSION_MANAGER.COLUMN.NAME' | translate:{count:selectedMembers.length}\"\n                                 key=\"id\">\n                        <ng-template let-context>\n                            <adf-user-name-column [context]=\"context\"></adf-user-name-column>\n                        </ng-template>\n                    </data-column>\n\n                    <data-column class=\"adf-ellipsis-cell adf-expand-cell-4\"\n                                 title=\"PERMISSION_MANAGER.PERMISSION_DISPLAY.ROLE\"\n                                 key=\"role\">\n                        <ng-template let-entry=\"$implicit\">\n                            <adf-user-role-column [readonly]=\"entry.row.obj.readonly\"\n                                                  [value]=\"entry.data.getValue(entry.row, entry.col)\"\n                                                  [roles]=\"data.roles\"\n                                                  id=\"adf-select-role-permission\"\n                                                  (roleChanged)=\"onMemberUpdate($event, entry.row.obj)\">\n                            </adf-user-role-column>\n                        </ng-template>\n\n                        <adf-data-column-header>\n                            <ng-template>\n                                <adf-user-role-column  class=\"adf-permission-role-column-header\"\n                                                       placeholder=\"PERMISSION_MANAGER.COLUMN.BULK-ROLE\"\n                                                       [roles]=\"data.roles\"\n                                                       id=\"adf-bulk-select-role-permission\"\n                                                       (roleChanged)=\"onBulkUpdate($event)\">\n                                </adf-user-role-column>\n                            </ng-template>\n                        </adf-data-column-header>\n                    </data-column>\n\n                    <data-column class=\"adf-datatable-cell adf-delete-permission-column\" key=\"\" [sortable]=\"false\">\n                        <ng-template let-entry=\"$implicit\">\n                            <button mat-icon-button\n                                    class=\"adf-add-member-action\"\n                                    [style.display]=\"entry.row.obj.readonly ? 'none': 'block'\"\n                                    (click)=\"onMemberDelete(entry.row.obj)\"\n                                    data-automation-id=\"adf-delete-permission-button\">\n                                <mat-icon>highlight_off</mat-icon>\n                            </button>\n                        </ng-template>\n                    </data-column>\n                </data-columns>\n            </adf-datatable>\n        </div>\n\n    </mat-dialog-content>\n\n    <mat-dialog-actions>\n        <button mat-button\n                mat-dialog-close\n                data-automation-id=\"add-permission-dialog-close-button\">\n            {{ \"PERMISSION_MANAGER.ADD-PERMISSION.CLOSE-ACTION\" | translate }}\n        </button>\n        <button mat-button\n                data-automation-id=\"add-permission-dialog-confirm-button\"\n                [mat-dialog-close]=\"true\"\n                class=\"adf-choose-action\"\n                [disabled]=\"!isValid()\"\n                (click)=\"onAddClicked()\">\n            {{ \"PERMISSION_MANAGER.ADD-PERMISSION.ADD-ACTION\" | translate }}\n        </button>\n    </mat-dialog-actions>\n</ng-container>\n\n<ng-container *ngIf=\"isSearchActive\">\n    <mat-dialog-content>\n        <adf-add-permission-panel class=\"adf-search-container\" (select)=\"onSelect($event)\"></adf-add-permission-panel>\n    </mat-dialog-content>\n\n    <mat-dialog-actions>\n            <button mat-button\n                    (click)=\"canCloseDialog()\"\n                    data-automation-id=\"add-permission-dialog-close-button\">\n                {{ \"PERMISSION_MANAGER.ADD-PERMISSION.CLOSE-ACTION\" | translate }}\n            </button>\n            <button mat-button\n                    data-automation-id=\"add-permission-dialog-confirm-button\"\n                    [disabled]=\"!currentSelection.length\"\n                    (click)=\"onSearchAddClicked()\">\n                {{ \"PERMISSION_MANAGER.ADD-PERMISSION.SELECT-ACTION\" | translate }}\n            </button>\n    </mat-dialog-actions>\n</ng-container>\n",
                encapsulation: i0.ViewEncapsulation.None,
                styles: [".adf-add-permission-dialog .mat-dialog-title{color:var(--theme-text-bold-color);font-size:20px;font-stretch:normal;font-style:normal;font-weight:600;letter-spacing:-.5px;line-height:1.6;margin-left:24px;margin-right:24px}.adf-add-permission-dialog .mat-dialog-container{padding-left:0;padding-right:0}.adf-add-permission-dialog .mat-dialog-content{flex-grow:1;height:80vh;margin:0;overflow:hidden}.adf-add-permission-dialog .mat-dialog-content .adf-new-permission-table{height:90%}.adf-add-permission-dialog .mat-dialog-content .adf-search-container{height:100%}.adf-add-permission-dialog .mat-dialog-actions{background-color:var(--theme-background-color);color:var(--theme-foreground-text-color);display:flex;justify-content:flex-end;padding:0 24px}.adf-add-permission-dialog .mat-dialog-actions button{font-weight:400;text-transform:uppercase}.adf-add-permission-dialog .mat-dialog-actions .adf-choose-action[disabled]{color:var(--theme-secondary-text-color)}.adf-add-permission-dialog .mat-dialog-actions .adf-choose-action:enabled{color:var(--theme-primary-color)}.adf-add-permission-dialog .adf-search-user-button{width:100%}.adf-add-permission-dialog .adf-search-user-button .mat-button-wrapper{align-items:center;display:flex}.adf-add-permission-dialog .adf-add-member-action{padding:0 15px}"]
            }]
    }], function () { return [{ type: undefined, decorators: [{
                type: i0.Inject,
                args: [i2.MAT_DIALOG_DATA]
            }] }, { type: ɵngcc3.MatDialogRef }]; }, null); })();
        return AddPermissionDialogComponent;
    }());
    AddPermissionDialogComponent.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: i0.Inject, args: [i2.MAT_DIALOG_DATA,] }] },
        { type: i2.MatDialogRef }
    ]; };

    var NodePermissionDialogService = /** @class */ (function () {
        function NodePermissionDialogService(dialog, nodePermissionService, contentService) {
            this.dialog = dialog;
            this.nodePermissionService = nodePermissionService;
            this.contentService = contentService;
        }
        NodePermissionDialogService.prototype.openAddPermissionDialog = function (node, roles, title) {
            if (this.contentService.hasAllowableOperations(node, i1.AllowableOperationsEnum.UPDATEPERMISSIONS)) {
                var confirm = new rxjs.Subject();
                confirm.subscribe({
                    complete: this.close.bind(this)
                });
                var data = {
                    node: node,
                    title: title,
                    confirm: confirm,
                    roles: roles
                };
                this.openDialog(data, 'adf-add-permission-dialog', '800px');
                return confirm;
            }
            else {
                var errors = new Error(JSON.stringify({ error: { statusCode: 403 } }));
                errors.message = 'PERMISSION_MANAGER.ERROR.NOT-ALLOWED';
                return rxjs.throwError(errors);
            }
        };
        NodePermissionDialogService.prototype.openDialog = function (data, currentPanelClass, chosenWidth) {
            this.dialog.open(AddPermissionDialogComponent, { data: data, panelClass: currentPanelClass, width: chosenWidth, restoreFocus: true });
        };
        NodePermissionDialogService.prototype.close = function () {
            this.dialog.closeAll();
        };
        NodePermissionDialogService.prototype.updateNodePermissionByDialog = function (nodeId, title) {
            var _this = this;
            return this.nodePermissionService.getNodeWithRoles(nodeId)
                .pipe(operators.switchMap(function (_a) {
                var node = _a.node, roles = _a.roles;
                return _this.openAddPermissionDialog(node, roles, title)
                    .pipe(operators.switchMap(function (selection) {
                    return _this.nodePermissionService.updateNodePermissions(nodeId, selection);
                }));
            }));
        };
NodePermissionDialogService.ɵfac = function NodePermissionDialogService_Factory(t) { return new (t || NodePermissionDialogService)(ɵngcc0.ɵɵinject(ɵngcc3.MatDialog), ɵngcc0.ɵɵinject(NodePermissionService), ɵngcc0.ɵɵinject(ɵngcc21.ContentService)); };
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NodePermissionDialogService, [{
        type: i0.Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc3.MatDialog }, { type: NodePermissionService }, { type: ɵngcc21.ContentService }]; }, null); })();
        return NodePermissionDialogService;
    }());
    NodePermissionDialogService.ɵprov = i0.ɵɵdefineInjectable({ factory: function NodePermissionDialogService_Factory() { return new NodePermissionDialogService(i0.ɵɵinject(i2.MatDialog), i0.ɵɵinject(NodePermissionService), i0.ɵɵinject(i1.ContentService)); }, token: NodePermissionDialogService, providedIn: "root" });
    NodePermissionDialogService.ctorParameters = function () { return [
        { type: i2.MatDialog },
        { type: NodePermissionService },
        { type: i1.ContentService }
    ]; };

    var PermissionListService = /** @class */ (function () {
        function PermissionListService(nodeService, nodePermissionService, nodePermissionDialogService, contentService, notificationService) {
            var _this = this;
            this.nodeService = nodeService;
            this.nodePermissionService = nodePermissionService;
            this.nodePermissionDialogService = nodePermissionDialogService;
            this.contentService = contentService;
            this.notificationService = notificationService;
            this.updated = new i0.EventEmitter();
            this.errored = new i0.EventEmitter();
            this.loading$ = new rxjs.BehaviorSubject(true);
            this.error$ = new rxjs.Subject();
            this.nodeWithRoles$ = new rxjs.Subject();
            this.data$ = this.nodeWithRoles$.pipe(operators.map(function (_c) {
                var node = _c.node, roles = _c.roles;
                var nodeLocalPermissions = _this.nodePermissionService.getLocalPermissions(node);
                var localPermissions = _this.updateReadOnlyPermission(node, nodeLocalPermissions);
                return {
                    node: node,
                    roles: roles,
                    localPermissions: localPermissions,
                    inheritedPermissions: _this.nodePermissionService.getInheritedPermission(node)
                };
            }));
            this.SITE_MANAGER_ROLE = 'SiteManager';
        }
        PermissionListService.prototype.fetchPermission = function (nodeId) {
            var _this = this;
            this.loading$.next(true);
            this.nodePermissionService.getNodeWithRoles(nodeId)
                .pipe(operators.finalize(function () { return _this.loading$.next(false); }))
                .subscribe(function (_c) {
                var node = _c.node, roles = _c.roles;
                _this.node = node;
                _this.roles = roles;
                _this.nodeWithRoles$.next({ node: node, roles: roles });
            }, function () { return _this.error$.next(true); });
        };
        PermissionListService.prototype.toggleInherited = function (change) {
            var _this = this;
            if (this.contentService.hasAllowableOperations(this.node, i1.AllowableOperationsEnum.UPDATEPERMISSIONS)) {
                var updateLocalPermission$ = rxjs.of(null);
                var nodeBody_1 = {
                    permissions: {
                        isInheritanceEnabled: !this.node.permissions.isInheritanceEnabled
                    }
                };
                var authorityId = this.getManagerAuthority(this.node);
                if (authorityId) {
                    var permissions = __spread((this.node.permissions.locallySet || []), [
                        { authorityId: authorityId, name: this.SITE_MANAGER_ROLE, accessStatus: 'ALLOWED' }
                    ]);
                    updateLocalPermission$ = this.nodePermissionService.updatePermissions(this.node, permissions);
                }
                updateLocalPermission$.pipe(operators.switchMap(function () { return _this.nodeService.updateNode(_this.node.id, nodeBody_1, { include: ['permissions'] }); }))
                    .subscribe(function (nodeUpdated) {
                    var _a, _b;
                    var message = nodeUpdated.permissions.isInheritanceEnabled ? 'PERMISSION_MANAGER.MESSAGE.INHERIT-ENABLE-SUCCESS' : 'PERMISSION_MANAGER.MESSAGE.INHERIT-DISABLE-SUCCESS';
                    _this.notificationService.showInfo(message);
                    nodeUpdated.permissions.inherited = (_b = (_a = nodeUpdated.permissions) === null || _a === void 0 ? void 0 : _a.inherited) !== null && _b !== void 0 ? _b : [];
                    _this.reloadNode(nodeUpdated);
                }, function () {
                    change.source.checked = _this.node.permissions.isInheritanceEnabled;
                    _this.notificationService.showWarning('PERMISSION_MANAGER.MESSAGE.TOGGLE-PERMISSION-FAILED');
                });
            }
            else {
                change.source.checked = this.node.permissions.isInheritanceEnabled;
                this.notificationService.showError('PERMISSION_MANAGER.ERROR.NOT-ALLOWED');
            }
        };
        PermissionListService.prototype.updateNodePermissionByDialog = function () {
            var _this = this;
            this.nodePermissionDialogService
                .openAddPermissionDialog(this.node, this.roles, 'PERMISSION_MANAGER.ADD-PERMISSION.TITLE')
                .pipe(operators.switchMap(function (selection) {
                var total = selection.length;
                var group = selection.filter(function (_c) {
                    var authorityId = _c.authorityId;
                    return _this.isGroup(authorityId);
                }).length;
                return rxjs.forkJoin({
                    user: rxjs.of(total - group),
                    group: rxjs.of(group),
                    node: _this.nodePermissionService.updateNodePermissions(_this.node.id, selection)
                });
            }))
                .subscribe(function (_c) {
                var user = _c.user, group = _c.group, node = _c.node;
                _this.notificationService.showInfo('PERMISSION_MANAGER.MESSAGE.PERMISSION-ADD-SUCCESS', null, { user: user, group: group });
                _this.reloadNode(node);
            }, function () {
                _this.notificationService.showError('PERMISSION_MANAGER.MESSAGE.PERMISSION-ADD-FAIL');
                _this.reloadNode();
            });
        };
        PermissionListService.prototype.deletePermissions = function (permissions) {
            var _this = this;
            this.nodePermissionService.removePermissions(this.node, permissions)
                .subscribe(function (node) {
                var total = permissions.length;
                var group = permissions.filter(function (_c) {
                    var authorityId = _c.authorityId;
                    return _this.isGroup(authorityId);
                }).length;
                _this.notificationService.showInfo('PERMISSION_MANAGER.MESSAGE.PERMISSION-BULK-DELETE-SUCCESS', null, { user: total - group, group: group });
                _this.reloadNode(node);
            }, function () {
                _this.notificationService.showError('PERMISSION_MANAGER.MESSAGE.PERMISSION-DELETE-FAIL');
                _this.reloadNode();
            });
        };
        PermissionListService.prototype.updateRole = function (role, permission) {
            var _this = this;
            var updatedPermissionRole = this.buildUpdatedPermission(role, permission);
            this.nodePermissionService.updatePermissionRole(this.node, updatedPermissionRole)
                .subscribe(function (node) {
                _this.notificationService.showInfo('PERMISSION_MANAGER.MESSAGE.PERMISSION-UPDATE-SUCCESS');
                _this.reloadNode(node);
                _this.updated.emit(permission);
            }, function () {
                _this.notificationService.showError('PERMISSION_MANAGER.MESSAGE.PERMISSION-UPDATE-FAIL');
                _this.reloadNode();
                _this.errored.emit(permission);
            });
        };
        PermissionListService.prototype.bulkRoleUpdate = function (role) {
            var _this = this;
            var permissions = __spread(this.node.permissions.locallySet).map(function (permission) { return _this.buildUpdatedPermission(role, permission); });
            this.nodePermissionService.updatePermissions(this.node, permissions)
                .subscribe(function (node) {
                var total = permissions.length;
                var group = permissions.filter(function (_c) {
                    var authorityId = _c.authorityId;
                    return _this.isGroup(authorityId);
                }).length;
                _this.notificationService.showInfo('PERMISSION_MANAGER.MESSAGE.PERMISSION-BULK-UPDATE-SUCCESS', null, { user: total - group, group: group });
                _this.reloadNode(node);
            }, function () {
                _this.notificationService.showError('PERMISSION_MANAGER.MESSAGE.PERMISSION-UPDATE-FAIL');
                _this.reloadNode();
            });
        };
        PermissionListService.prototype.deletePermission = function (permission) {
            var _this = this;
            var cloneNode = Object.assign(Object.assign({}, this.node), { permissions: Object.assign(Object.assign({}, this.node.permissions), { locallySet: __spread(this.node.permissions.locallySet) }) });
            this.nodePermissionService
                .removePermission(cloneNode, permission)
                .subscribe(function (node) {
                _this.notificationService.showInfo('PERMISSION_MANAGER.MESSAGE.PERMISSION-DELETE-SUCCESS');
                if (!node.permissions.locallySet) {
                    node.permissions.locallySet = [];
                }
                _this.reloadNode(node);
            }, function () {
                _this.notificationService.showError('PERMISSION_MANAGER.MESSAGE.PERMISSION-DELETE-FAIL');
                _this.reloadNode();
            });
        };
        PermissionListService.prototype.buildUpdatedPermission = function (role, permission) {
            return {
                accessStatus: permission.accessStatus,
                name: this.canUpdateThePermission(this.node, permission) ? role : permission.name,
                authorityId: permission.authorityId
            };
        };
        PermissionListService.prototype.reloadNode = function (node) {
            if (node != null) {
                Object.assign(this.node.permissions, node.permissions);
            }
            this.nodeWithRoles$.next({ node: this.node, roles: this.roles });
        };
        PermissionListService.prototype.getManagerAuthority = function (node) {
            var _this = this;
            var _a;
            var sitePath = node.path.elements.find(function (path) { return path.nodeType === 'st:site'; });
            var hasLocalManagerPermission = false, authorityId;
            if (sitePath) {
                authorityId = "GROUP_site_" + sitePath.name + "_" + this.SITE_MANAGER_ROLE;
                hasLocalManagerPermission = !!((_a = node.permissions.locallySet) === null || _a === void 0 ? void 0 : _a.find(function (permission) { return permission.authorityId === authorityId && permission.name === _this.SITE_MANAGER_ROLE; }));
            }
            if (!hasLocalManagerPermission && authorityId) {
                return authorityId;
            }
            return null;
        };
        PermissionListService.prototype.updateReadOnlyPermission = function (node, permissions) {
            var _this = this;
            permissions.forEach(function (permission) {
                if (!_this.canUpdateThePermission(node, permission)) {
                    permission.readonly = true;
                }
            });
            return permissions;
        };
        PermissionListService.prototype.canUpdateThePermission = function (node, permission) {
            var sitePath = node.path.elements.find(function (path) { return path.nodeType === 'st:site'; });
            if (!node.permissions.isInheritanceEnabled && sitePath) {
                var authorityId = "GROUP_site_" + sitePath.name + "_" + this.SITE_MANAGER_ROLE;
                return !(permission.authorityId === authorityId && permission.name === this.SITE_MANAGER_ROLE);
            }
            return true;
        };
        PermissionListService.prototype.isGroup = function (authorityId) {
            return authorityId.startsWith('GROUP_') || authorityId.startsWith('ROLE_');
        };
PermissionListService.ɵfac = function PermissionListService_Factory(t) { return new (t || PermissionListService)(ɵngcc0.ɵɵinject(ɵngcc21.NodesApiService), ɵngcc0.ɵɵinject(NodePermissionService), ɵngcc0.ɵɵinject(NodePermissionDialogService), ɵngcc0.ɵɵinject(ɵngcc21.ContentService), ɵngcc0.ɵɵinject(ɵngcc21.NotificationService)); };
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(PermissionListService, [{
        type: i0.Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc21.NodesApiService }, { type: NodePermissionService }, { type: NodePermissionDialogService }, { type: ɵngcc21.ContentService }, { type: ɵngcc21.NotificationService }]; }, null); })();
        return PermissionListService;
    }());
    PermissionListService.ɵprov = i0.ɵɵdefineInjectable({ factory: function PermissionListService_Factory() { return new PermissionListService(i0.ɵɵinject(i1.NodesApiService), i0.ɵɵinject(NodePermissionService), i0.ɵɵinject(NodePermissionDialogService), i0.ɵɵinject(i1.ContentService), i0.ɵɵinject(i1.NotificationService)); }, token: PermissionListService, providedIn: "root" });
    PermissionListService.ctorParameters = function () { return [
        { type: i1.NodesApiService },
        { type: NodePermissionService },
        { type: NodePermissionDialogService },
        { type: i1.ContentService },
        { type: i1.NotificationService }
    ]; };

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var PermissionListComponent = /** @class */ (function () {
        function PermissionListComponent(permissionList) {
            this.permissionList = permissionList;
            this.selectedPermissions = [];
            this.error = this.permissionList.errored;
            this.update = this.permissionList.updated;
        }
        PermissionListComponent.prototype.ngOnInit = function () {
            this.permissionList.fetchPermission(this.nodeId);
        };
        PermissionListComponent.prototype.openAddPermissionDialog = function () {
            this.permissionList.updateNodePermissionByDialog();
        };
        PermissionListComponent.prototype.onSelect = function (selections) {
            this.selectedPermissions = selections.map(function (selection) { return selection['obj']; }).filter(function (permission) { return !permission.readonly; });
        };
        PermissionListComponent.prototype.deleteSelection = function () {
            this.permissionList.deletePermissions(this.selectedPermissions);
            this.selectedPermissions = [];
        };
        PermissionListComponent.prototype.updatePermission = function (_a) {
            var role = _a.role, permission = _a.permission;
            this.permissionList.updateRole(role, permission);
        };
        PermissionListComponent.prototype.deletePermission = function (permission) {
            this.selectedPermissions = [];
            this.permissionList.deletePermission(permission);
        };
        PermissionListComponent.prototype.updateAllPermission = function (role) {
            this.permissionList.bulkRoleUpdate(role);
            this.selectedPermissions = [];
        };
PermissionListComponent.ɵfac = function PermissionListComponent_Factory(t) { return new (t || PermissionListComponent)(ɵngcc0.ɵɵdirectiveInject(PermissionListService)); };
PermissionListComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: PermissionListComponent, selectors: [["adf-permission-list"]], inputs: { nodeId: "nodeId" }, outputs: { error: "error", update: "update" }, decls: 8, vars: 11, consts: [["id", "adf-permission-manager-card", 1, "adf-permission-card"], ["class", "adf-permission-loader", 4, "ngIf"], [4, "ngIf"], [1, "adf-permission-loader"], [3, "color", "mode"], ["id", "adf-permission-manager-error", 1, "adf-no-permission__template"], ["color", "warn"], [1, "adf-no-permission__template--text"], [1, "adf-permission-container"], ["target", ""], [1, "adf-permission-header"], [1, "adf-inherit-container"], [1, "adf-inherit-container-header"], ["data-automation-id", "adf-inherit-toggle-button", 1, "adf-inherit-toggle", 3, "checked", "change"], ["title", "total", 1, "adf-inherit-subtitle"], ["mat-button", "", "data-automation-id", "permission-info-button", 3, "adf-pop-over", "target", 4, "ngIf"], ["inheritedPermission", ""], [1, "adf-local-permission-container"], [1, "adf-permission-content-header"], [1, "adf-toolbar--spacer"], ["mat-button", "", "data-automation-id", "adf-add-permission-button", 3, "matTooltip", "click"], ["mat-button", "", "data-automation-id", "adf-delete-selected-permission", 3, "matTooltip", "disabled", "click"], ["data-automation-id", "adf-locally-set-permission", 1, "adf-permission-list", 3, "node", "permissions", "roles", "update", "delete", "updateAll", "row-select", "row-unselect"], ["mat-button", "", "data-automation-id", "permission-info-button", 3, "adf-pop-over", "target"], ["popOver", "adfPopOver"], [1, "adf-pop-over-card"], ["data-automation-id", "adf-inherited-permission", 3, "isReadOnly", "node", "permissions", "showLocation", "selectionMode", "roles"]], template: function PermissionListComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "mat-card", 0);
        ɵngcc0.ɵɵtemplate(1, PermissionListComponent_div_1_Template, 2, 2, "div", 1);
        ɵngcc0.ɵɵpipe(2, "async");
        ɵngcc0.ɵɵpipe(3, "async");
        ɵngcc0.ɵɵtemplate(4, PermissionListComponent_ng_container_4_Template, 7, 3, "ng-container", 2);
        ɵngcc0.ɵɵpipe(5, "async");
        ɵngcc0.ɵɵtemplate(6, PermissionListComponent_ng_container_6_Template, 31, 27, "ng-container", 2);
        ɵngcc0.ɵɵpipe(7, "async");
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ɵngcc0.ɵɵpipeBind1(2, 3, !ɵngcc0.ɵɵpipeBind1(3, 5, ctx.permissionList.data$) && ctx.permissionList.loading$));
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngIf", ɵngcc0.ɵɵpipeBind1(5, 7, ctx.permissionList.error$));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ɵngcc0.ɵɵpipeBind1(7, 9, ctx.permissionList.data$));
    } }, directives: function () { return [ɵngcc5.MatCard, ɵngcc23.NgIf, ɵngcc8.MatProgressSpinner, ɵngcc4.MatIcon, ɵngcc16.MatSlideToggle, ɵngcc5.MatCardContent, ɵngcc1.MatButton, ɵngcc24.MatTooltip, PermissionContainerComponent, PopOverDirective]; }, pipes: function () { return [ɵngcc23.AsyncPipe, ɵngcc25.TranslatePipe]; }, styles: [".adf-permission-card{box-sizing:border-box;display:flex!important;flex-direction:column;height:100%;overflow:hidden}.adf-permission-loader{margin-left:45%;overflow:hidden}.adf-permission-container{border:1px solid var(--theme-border-color);justify-content:space-between;padding:10px 15px}.adf-inherit-container,.adf-permission-container{align-items:center;display:flex;flex-direction:row}.adf-inherit-container-header{margin-bottom:10px;margin-top:10px}.adf-inherit-toggle{padding-left:30px}.adf-inherit-subtitle{padding-bottom:5px}.adf-permission-content-header{align-items:center;display:flex;flex-direction:row;padding:5px 15px}.adf-permission-role-column-header{height:40px;position:relative!important}.adf-permission-role-column-header .mat-form-field-infix{border:none}.adf-permission-header{display:flex;flex:1;flex-direction:column;height:100%;min-height:0;overflow:hidden}.adf-permission-list{display:flex;height:calc(100% - 63px)}.adf-local-permission-container{flex:1 1 auto;overflow:hidden}[aria-sort=Ascending] adf-user-role-column,[aria-sort=Descending] adf-user-role-column{padding-left:10px;padding-right:10px}.adf-permission-pop-over{padding-right:15px;width:100%}.adf-permission-pop-over .adf-pop-over-card{box-shadow:0 8px 9px -5px var(--theme-fg-divider),0 15px 22px 2px var(--theme-fg-divider);overflow:hidden;width:100%}"], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(PermissionListComponent, [{
        type: i0.Component,
        args: [{
                selector: 'adf-permission-list',
                template: "<mat-card class=\"adf-permission-card\" id=\"adf-permission-manager-card\">\n    <div *ngIf=\"!(permissionList.data$ | async) && permissionList.loading$ | async\" class=\"adf-permission-loader\">\n        <mat-progress-spinner [color]=\"'primary'\"\n                              [mode]=\"'indeterminate'\">\n        </mat-progress-spinner>\n    </div>\n\n    <ng-container *ngIf=\"permissionList.error$ | async\">\n        <div class=\"adf-no-permission__template\" id=\"adf-permission-manager-error\">\n            <mat-icon color=\"warn\">error</mat-icon>\n            <p class=\"adf-no-permission__template--text\">{{ 'PERMISSION_MANAGER.ERROR.NOT-FOUND'| translate }}</p>\n        </div>\n    </ng-container>\n\n    <ng-container *ngIf=\"permissionList.data$ | async as model\">\n        <div class=\"adf-permission-container\" #target>\n\n            <div class=\"adf-permission-header\">\n                <span class=\"adf-inherit-container\">\n                    <h3 class=\"adf-inherit-container-header\">\n                        {{'PERMISSION_MANAGER.LABELS.INHERITED-PERMISSIONS' | translate }}\n\n                        {{ (model.node.permissions.isInheritanceEnabled ? \"PERMISSION_MANAGER.LABELS.ON\" : \"PERMISSION_MANAGER.LABELS.OFF\") | translate }}\n                    </h3>\n\n                    <mat-slide-toggle\n                        class=\"adf-inherit-toggle\"\n                        data-automation-id=\"adf-inherit-toggle-button\"\n                        [checked]=\"model.node.permissions.isInheritanceEnabled\"\n                        (change)=\"permissionList.toggleInherited($event)\">\n                    </mat-slide-toggle>\n                </span>\n\n                <span class=\"adf-inherit-subtitle\" title=\"total\">\n                    {{'PERMISSION_MANAGER.LABELS.INHERITED-SUBTITLE' | translate: { count: model.inheritedPermissions.length } }}\n                </span>\n            </div>\n\n            <button\n                mat-button\n                data-automation-id=\"permission-info-button\"\n                [adf-pop-over]=\"inheritedPermission\"\n                [target]=\"target\"\n                #popOver=\"adfPopOver\"\n                *ngIf=\"model.node.permissions.isInheritanceEnabled\">\n                {{ (popOver.open ? 'PERMISSION_MANAGER.LABELS.HIDE' : 'PERMISSION_MANAGER.LABELS.SHOW') | translate }}\n                <mat-icon *ngIf=\"popOver.open\"> keyboard_arrow_up </mat-icon>\n                <mat-icon *ngIf=\"!popOver.open\"> keyboard_arrow_down </mat-icon>\n            </button>\n        </div>\n\n        <ng-template #inheritedPermission>\n            <div class=\"adf-pop-over-card\">\n                <adf-permission-container\n                    data-automation-id=\"adf-inherited-permission\"\n                    [isReadOnly]=\"true\"\n                    [node]=\"model.node\"\n                    [permissions]=\"model.inheritedPermissions\"\n                    [showLocation]=\"true\"\n                    [selectionMode]=\"'none'\"\n                    [roles]=\"model.roles\">\n                </adf-permission-container>\n            </div>\n        </ng-template>\n\n        <mat-card-content class=\"adf-local-permission-container\">\n            <section class=\"adf-permission-content-header\">\n                <h3>{{'PERMISSION_MANAGER.LABELS.DIRECT-PERMISSIONS' | translate }}</h3>\n\n                <div class=\"adf-toolbar--spacer\"></div>\n\n                <button\n                    mat-button\n                    [matTooltip]=\"'PERMISSION_MANAGER.ACTION.ADD-PERMISSION' | translate\"\n                    (click)=\"openAddPermissionDialog()\"\n                    data-automation-id=\"adf-add-permission-button\">\n                    <mat-icon>person_add_outline</mat-icon>\n                </button>\n\n                <button\n                    mat-button\n                    [matTooltip]=\"'PERMISSION_MANAGER.ACTION.DELETE' | translate\"\n                    [disabled]=\"!selectedPermissions?.length\"\n                    (click)=\"deleteSelection()\"\n                    data-automation-id=\"adf-delete-selected-permission\">\n                    <mat-icon>delete_outline</mat-icon>\n                </button>\n            </section>\n\n            <adf-permission-container\n                class=\"adf-permission-list\"\n                data-automation-id=\"adf-locally-set-permission\"\n                [node]=\"model.node\"\n                [permissions]=\"model.localPermissions\"\n                (update)=\"updatePermission($event)\"\n                (delete)=\"deletePermission($event)\"\n                (updateAll)=\"updateAllPermission($event)\"\n                (row-select)=\"onSelect($any($event).detail.selection)\"\n                (row-unselect)=\"onSelect($any($event).detail.selection)\"\n                [roles]=\"model.roles\">\n            </adf-permission-container>\n\n        </mat-card-content>\n    </ng-container>\n</mat-card>\n",
                encapsulation: i0.ViewEncapsulation.None,
                styles: [".adf-permission-card{box-sizing:border-box;display:flex!important;flex-direction:column;height:100%;overflow:hidden}.adf-permission-loader{margin-left:45%;overflow:hidden}.adf-permission-container{border:1px solid var(--theme-border-color);justify-content:space-between;padding:10px 15px}.adf-inherit-container,.adf-permission-container{align-items:center;display:flex;flex-direction:row}.adf-inherit-container-header{margin-bottom:10px;margin-top:10px}.adf-inherit-toggle{padding-left:30px}.adf-inherit-subtitle{padding-bottom:5px}.adf-permission-content-header{align-items:center;display:flex;flex-direction:row;padding:5px 15px}.adf-permission-role-column-header{height:40px;position:relative!important}.adf-permission-role-column-header .mat-form-field-infix{border:none}.adf-permission-header{display:flex;flex:1;flex-direction:column;height:100%;min-height:0;overflow:hidden}.adf-permission-list{display:flex;height:calc(100% - 63px)}.adf-local-permission-container{flex:1 1 auto;overflow:hidden}[aria-sort=Ascending] adf-user-role-column,[aria-sort=Descending] adf-user-role-column{padding-left:10px;padding-right:10px}.adf-permission-pop-over{padding-right:15px;width:100%}.adf-permission-pop-over .adf-pop-over-card{box-shadow:0 8px 9px -5px var(--theme-fg-divider),0 15px 22px 2px var(--theme-fg-divider);overflow:hidden;width:100%}"]
            }]
    }], function () { return [{ type: PermissionListService }]; }, { error: [{
            type: i0.Output
        }], update: [{
            type: i0.Output
        }], nodeId: [{
            type: i0.Input
        }] }); })();
        return PermissionListComponent;
    }());
    PermissionListComponent.ctorParameters = function () { return [
        { type: PermissionListService }
    ]; };
    PermissionListComponent.propDecorators = {
        nodeId: [{ type: i0.Input }],
        update: [{ type: i0.Output }],
        error: [{ type: i0.Output }]
    };

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var InheritPermissionDirective = /** @class */ (function () {
        function InheritPermissionDirective(nodeService, contentService) {
            this.nodeService = nodeService;
            this.contentService = contentService;
            this.updated = new i0.EventEmitter();
            this.error = new i0.EventEmitter();
        }
        InheritPermissionDirective.prototype.onInheritPermissionClicked = function () {
            var _this = this;
            this.nodeService.getNode(this.nodeId).subscribe(function (node) {
                var _a, _b;
                if (_this.contentService.hasAllowableOperations(node, i1.AllowableOperationsEnum.UPDATEPERMISSIONS)) {
                    var nodeBody = { permissions: { isInheritanceEnabled: (_b = !((_a = node === null || node === void 0 ? void 0 : node.permissions) === null || _a === void 0 ? void 0 : _a.isInheritanceEnabled)) !== null && _b !== void 0 ? _b : false } };
                    _this.nodeService.updateNode(_this.nodeId, nodeBody, { include: ['permissions'] }).subscribe(function (nodeUpdated) {
                        _this.updated.emit(nodeUpdated);
                    }, function (error) { return _this.error.emit(error); });
                }
                else {
                    _this.error.emit('PERMISSION_MANAGER.ERROR.NOT-ALLOWED');
                }
            });
        };
InheritPermissionDirective.ɵfac = function InheritPermissionDirective_Factory(t) { return new (t || InheritPermissionDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc21.NodesApiService), ɵngcc0.ɵɵdirectiveInject(ɵngcc21.ContentService)); };
InheritPermissionDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: InheritPermissionDirective, selectors: [["button", "adf-inherit-permission", ""], ["mat-button-toggle", "adf-inherit-permission", ""]], hostAttrs: ["role", "button"], hostBindings: function InheritPermissionDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function InheritPermissionDirective_click_HostBindingHandler() { return ctx.onInheritPermissionClicked(); });
    } }, inputs: { nodeId: "nodeId" }, outputs: { updated: "updated", error: "error" } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(InheritPermissionDirective, [{
        type: i0.Directive,
        args: [{
                selector: 'button[adf-inherit-permission], mat-button-toggle[adf-inherit-permission]',
                host: {
                    'role': 'button',
                    '(click)': 'onInheritPermissionClicked()'
                }
            }]
    }], function () { return [{ type: ɵngcc21.NodesApiService }, { type: ɵngcc21.ContentService }]; }, { updated: [{
            type: i0.Output
        }], error: [{
            type: i0.Output
        }], nodeId: [{
            type: i0.Input
        }] }); })();
        return InheritPermissionDirective;
    }());
    InheritPermissionDirective.ctorParameters = function () { return [
        { type: i1.NodesApiService },
        { type: i1.ContentService }
    ]; };
    InheritPermissionDirective.propDecorators = {
        nodeId: [{ type: i0.Input }],
        updated: [{ type: i0.Output }],
        error: [{ type: i0.Output }]
    };

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var SEARCH_QUERY_TOKEN = new i0.InjectionToken('Alfresco Search Query Token');
    var SearchPermissionConfigurationService = /** @class */ (function () {
        function SearchPermissionConfigurationService(queryProvider) {
            this.queryProvider = queryProvider;
        }
        SearchPermissionConfigurationService.prototype.generateQueryBody = function (searchTerm, maxResults, skipCount) {
            var defaultQueryBody = {
                query: {
                    query: this.getQuery(searchTerm)
                },
                include: ['properties', 'aspectNames'],
                paging: {
                    maxItems: maxResults,
                    skipCount: skipCount
                },
                filterQueries: [
                    { query: "TYPE:'cm:authority'" }
                ]
            };
            return defaultQueryBody;
        };
        SearchPermissionConfigurationService.prototype.getQuery = function (searchTerm) {
            var query;
            if (this.queryProvider && this.queryProvider.query) {
                query = this.queryProvider.query.replace(new RegExp(/\${([^}]+)}/g), searchTerm);
            }
            else {
                query = "(email:*" + searchTerm + "* OR firstName:*" + searchTerm + "* OR lastName:*" + searchTerm + "* OR displayName:*" + searchTerm + "* OR authorityName:*" + searchTerm + "* OR authorityDisplayName:*" + searchTerm + "*) AND ANAME:(\"0/APP.DEFAULT\")";
            }
            return query;
        };
SearchPermissionConfigurationService.ɵfac = function SearchPermissionConfigurationService_Factory(t) { return new (t || SearchPermissionConfigurationService)(ɵngcc0.ɵɵinject(SEARCH_QUERY_TOKEN, 8)); };
SearchPermissionConfigurationService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: SearchPermissionConfigurationService, factory: function (t) { return SearchPermissionConfigurationService.ɵfac(t); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SearchPermissionConfigurationService, [{
        type: i0.Injectable
    }], function () { return [{ type: undefined, decorators: [{
                type: i0.Optional
            }, {
                type: i0.Inject,
                args: [SEARCH_QUERY_TOKEN]
            }] }]; }, null); })();
        return SearchPermissionConfigurationService;
    }());
    SearchPermissionConfigurationService.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: i0.Optional }, { type: i0.Inject, args: [SEARCH_QUERY_TOKEN,] }] }
    ]; };

    var AddPermissionPanelComponent = /** @class */ (function () {
        function AddPermissionPanelComponent() {
            var _this = this;
            this.select = new i0.EventEmitter();
            this.searchInput = new forms.FormControl();
            this.searchedWord = '';
            this.debounceSearch = 200;
            this.selectedItems = [];
            this.EVERYONE = new jsApi.NodeEntry({ entry: { nodeType: 'cm:authorityContainer', properties: { 'cm:authorityName': 'GROUP_EVERYONE' } } });
            this.searchInput.valueChanges
                .pipe(operators.debounceTime(this.debounceSearch))
                .subscribe(function (searchValue) {
                var _a;
                var selectionOptions = _this.matSelectionList.selectedOptions.selected.map(function (option) { return option.value; });
                (_a = _this.selectedItems).push.apply(_a, __spread(selectionOptions));
                _this.matSelectionList.deselectAll();
                _this.searchedWord = searchValue;
                if (!searchValue) {
                    _this.search.resetResults();
                }
            });
        }
        AddPermissionPanelComponent.prototype.onSelectionChange = function () {
            var currentSelection = this.matSelectionList.selectedOptions.selected.map(function (option) { return option.value; });
            var uniqueSelection = __spread(currentSelection, this.selectedItems).reduce(function (uniquesElements, currentElement) {
                var isExist = uniquesElements.find(function (uniqueElement) { return uniqueElement.entry.id === currentElement.entry.id; });
                if (!isExist) {
                    uniquesElements.push(currentElement);
                }
                return uniquesElements;
            }, []);
            this.select.emit(uniqueSelection);
        };
        AddPermissionPanelComponent.prototype.clearSearch = function () {
            this.searchedWord = '';
            this.selectedItems.splice(0, this.selectedItems.length);
            this.search.resetResults();
        };
AddPermissionPanelComponent.ɵfac = function AddPermissionPanelComponent_Factory(t) { return new (t || AddPermissionPanelComponent)(); };
AddPermissionPanelComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: AddPermissionPanelComponent, selectors: [["adf-add-permission-panel"]], viewQuery: function AddPermissionPanelComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵstaticViewQuery(_c18, true);
        ɵngcc0.ɵɵviewQuery(list.MatSelectionList, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.search = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.matSelectionList = _t.first);
    } }, outputs: { select: "select" }, features: [ɵngcc0.ɵɵProvidersFeature([
            { provide: i1.SearchConfigurationService, useClass: SearchPermissionConfigurationService },
            i1.SearchService
        ])], decls: 9, vars: 11, consts: [["floatPlaceholder", "never", 1, "adf-permission-search-input"], ["matInput", "", "id", "searchInput", "type", "text", 3, "formControl", "placeholder", "value"], ["class", "adf-permission-search-icon", "data-automation-id", "adf-permission-clear-input", "id", "adf-permission-clear-input", "matSuffix", "", 3, "click", 4, "ngIf"], ["class", "adf-permission-search-icon", "data-automation-id", "adf-permission-search-icon", "matSuffix", "", 4, "ngIf"], ["class", "adf-permission-start-message", "id", "adf-add-permission-type-search", 4, "ngIf"], ["id", "adf-add-permission-authority-results", 1, "adf-permission-result-list", 3, "searchTerm"], ["search", ""], ["data-automation-id", "adf-permission-clear-input", "id", "adf-permission-clear-input", "matSuffix", "", 1, "adf-permission-search-icon", 3, "click"], ["data-automation-id", "adf-permission-search-icon", "matSuffix", "", 1, "adf-permission-search-icon"], ["id", "adf-add-permission-type-search", 1, "adf-permission-start-message"], [1, "adf-permission-result-list-elements", 3, "keydown.control.a", "selectionChange"], ["id", "adf-add-permission-group-everyone", "disableRipple", "", 1, "adf-list-option-item", 3, "value"], ["eveyone", ""], ["id", "add-group-icon", 3, "node", "selected"], [1, "adf-result-name"], ["disableRipple", "", "class", "adf-list-option-item", 3, "value", "id", 4, "ngFor", "ngForOf"], ["disableRipple", "", 1, "adf-list-option-item", 3, "value", "id"], ["option", ""], [3, "node", "selected"], [4, "ngIf", "ngIfElse"], ["authorityName", ""], ["owner", ""]], template: function AddPermissionPanelComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "mat-form-field", 0);
        ɵngcc0.ɵɵelement(1, "input", 1);
        ɵngcc0.ɵɵpipe(2, "translate");
        ɵngcc0.ɵɵtemplate(3, AddPermissionPanelComponent_mat_icon_3_Template, 2, 0, "mat-icon", 2);
        ɵngcc0.ɵɵtemplate(4, AddPermissionPanelComponent_mat_icon_4_Template, 2, 0, "mat-icon", 3);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(5, AddPermissionPanelComponent_div_5_Template, 4, 3, "div", 4);
        ɵngcc0.ɵɵelementStart(6, "adf-search", 5, 6);
        ɵngcc0.ɵɵtemplate(8, AddPermissionPanelComponent_ng_template_8_Template, 8, 7, "ng-template");
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵpropertyInterpolate("placeholder", ɵngcc0.ɵɵpipeBind1(2, 9, "PERMISSION_MANAGER.ADD-PERMISSION.SEARCH"));
        ɵngcc0.ɵɵproperty("formControl", ctx.searchInput)("value", ctx.searchedWord);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", (ctx.searchedWord == null ? null : ctx.searchedWord.length) > 0);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", (ctx.searchedWord == null ? null : ctx.searchedWord.length) === 0);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", (ctx.searchedWord == null ? null : ctx.searchedWord.length) === 0);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵclassProp("adf-permission-result-list-search", ctx.searchedWord.length === 0);
        ɵngcc0.ɵɵproperty("searchTerm", ctx.searchedWord);
    } }, directives: function () { return [ɵngcc27.MatFormField, ɵngcc6.MatInput, ɵngcc26.DefaultValueAccessor, ɵngcc26.NgControlStatus, ɵngcc26.FormControlDirective, ɵngcc23.NgIf, SearchComponent, ɵngcc4.MatIcon, ɵngcc27.MatSuffix, ɵngcc7.MatSelectionList, ɵngcc7.MatListOption, UserIconColumnComponent, ɵngcc23.NgForOf]; }, pipes: function () { return [ɵngcc25.TranslatePipe]; }, styles: [".adf-permission-result-list{border:2px solid var(--theme-border-color);display:flex;height:calc(100% - 75px);overflow:auto}.adf-permission-result-list-elements{width:100%}.adf-permission-result-list-search{display:none}.adf-permission-start-message{border:2px solid var(--theme-border-color);height:calc(100% - 75px);overflow:auto}.adf-permission-no-result,.adf-permission-start-message{align-items:center;display:flex;justify-content:space-around}.adf-permission-no-result,.adf-permission-search-input{width:100%}.adf-permission-search-input-icon{color:var(--theme-selected-button-bg-color);cursor:pointer}.adf-permission-search-input-icon:hover{color:var(--theme-fg-base-color)}.adf-list-option-item mat-pseudo-checkbox{display:none}.adf-list-option-item .mat-list-text{align-items:center;display:flex;flex-direction:row!important}.adf-list-option-item .mat-list-text .adf-result-name{padding-left:16px!important}.adf-permission-action[disabled]{opacity:.6}.adf-permission-action:enabled{color:var(--theme-primary-color)}"], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AddPermissionPanelComponent, [{
        type: i0.Component,
        args: [{
                selector: 'adf-add-permission-panel',
                template: "<mat-form-field floatPlaceholder=\"never\"\n                class=\"adf-permission-search-input\">\n    <input matInput\n           id=\"searchInput\"\n           [formControl]=\"searchInput\"\n           type=\"text\"\n           placeholder=\"{{'PERMISSION_MANAGER.ADD-PERMISSION.SEARCH' | translate}}\"\n           [value]=\"searchedWord\">\n\n    <mat-icon *ngIf=\"searchedWord?.length > 0\"\n              class=\"adf-permission-search-icon\"\n              data-automation-id=\"adf-permission-clear-input\"\n              id=\"adf-permission-clear-input\"\n              matSuffix\n              (click)=\"clearSearch()\">clear\n    </mat-icon>\n\n    <mat-icon *ngIf=\"searchedWord?.length === 0\"\n              class=\"adf-permission-search-icon\"\n              data-automation-id=\"adf-permission-search-icon\"\n              matSuffix>search\n    </mat-icon>\n</mat-form-field>\n\n<div *ngIf=\"searchedWord?.length === 0\"\n     class=\"adf-permission-start-message\"\n     id=\"adf-add-permission-type-search\">\n    <span>{{'PERMISSION_MANAGER.ADD-PERMISSION.TYPE-MESSAGE' | translate}}</span>\n</div>\n\n<adf-search #search\n            [searchTerm]=\"searchedWord\"\n            id=\"adf-add-permission-authority-results\"\n            class=\"adf-permission-result-list\"\n            [class.adf-permission-result-list-search]=\"searchedWord.length === 0\">\n    <ng-template let-data>\n        <mat-selection-list class=\"adf-permission-result-list-elements\" (keydown.control.a)=\"onSelectionChange()\"\n                            (selectionChange)=\"onSelectionChange()\">\n            <mat-list-option id=\"adf-add-permission-group-everyone\"\n                             class=\"adf-list-option-item\"\n                             #eveyone\n                             disableRipple\n                             [value]=\"EVERYONE\">\n                <adf-user-icon-column [node]=\"EVERYONE\" id=\"add-group-icon\" [selected]=\"eveyone.selected\"></adf-user-icon-column>\n                <p class=\"adf-result-name\">\n                    {{'PERMISSION_MANAGER.ADD-PERMISSION.EVERYONE' | translate}}\n                </p>\n            </mat-list-option>\n\n            <mat-list-option *ngFor=\"let item of data?.list?.entries; let idx = index\"\n                             disableRipple\n                             [value]=\"item\"\n                             class=\"adf-list-option-item\"\n                             id=\"result_option_{{idx}}\"\n                             #option>\n                <adf-user-icon-column [node]=\"item\" [selected]=\"option.selected\"></adf-user-icon-column>\n                <p class=\"adf-result-name\">\n                    <ng-container *ngIf=\"item.entry?.properties['cm:authorityDisplayName']; else authorityName\">\n                        {{item.entry.properties['cm:authorityDisplayName']}}\n                    </ng-container>\n                    <ng-template #authorityName>\n                        <ng-container *ngIf=\"item.entry?.properties['cm:authorityName']; else owner\">\n                            {{item.entry.properties['cm:authorityName']}}\n                        </ng-container>\n                    </ng-template>\n                    <ng-template #owner>\n                        {{item.entry?.properties['cm:firstName'] ? item.entry?.properties['cm:firstName'] : '' }}\n                        {{item.entry?.properties['cm:lastName'] ? item.entry?.properties['cm:lastName']: ''}}\n                    </ng-template>\n                </p>\n            </mat-list-option>\n        </mat-selection-list>\n    </ng-template>\n</adf-search>\n",
                encapsulation: i0.ViewEncapsulation.None,
                providers: [
                    { provide: i1.SearchConfigurationService, useClass: SearchPermissionConfigurationService },
                    i1.SearchService
                ],
                styles: [".adf-permission-result-list{border:2px solid var(--theme-border-color);display:flex;height:calc(100% - 75px);overflow:auto}.adf-permission-result-list-elements{width:100%}.adf-permission-result-list-search{display:none}.adf-permission-start-message{border:2px solid var(--theme-border-color);height:calc(100% - 75px);overflow:auto}.adf-permission-no-result,.adf-permission-start-message{align-items:center;display:flex;justify-content:space-around}.adf-permission-no-result,.adf-permission-search-input{width:100%}.adf-permission-search-input-icon{color:var(--theme-selected-button-bg-color);cursor:pointer}.adf-permission-search-input-icon:hover{color:var(--theme-fg-base-color)}.adf-list-option-item mat-pseudo-checkbox{display:none}.adf-list-option-item .mat-list-text{align-items:center;display:flex;flex-direction:row!important}.adf-list-option-item .mat-list-text .adf-result-name{padding-left:16px!important}.adf-permission-action[disabled]{opacity:.6}.adf-permission-action:enabled{color:var(--theme-primary-color)}"]
            }]
    }], function () { return []; }, { select: [{
            type: i0.Output
        }], search: [{
            type: i0.ViewChild,
            args: ['search', { static: true }]
        }], matSelectionList: [{
            type: i0.ViewChild,
            args: [list.MatSelectionList, { static: false }]
        }] }); })();
        return AddPermissionPanelComponent;
    }());
    AddPermissionPanelComponent.ctorParameters = function () { return []; };
    AddPermissionPanelComponent.propDecorators = {
        search: [{ type: i0.ViewChild, args: ['search', { static: true },] }],
        matSelectionList: [{ type: i0.ViewChild, args: [list.MatSelectionList, { static: false },] }],
        select: [{ type: i0.Output }]
    };

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var AddPermissionComponent = /** @class */ (function () {
        function AddPermissionComponent(nodePermissionService, contentService) {
            this.nodePermissionService = nodePermissionService;
            this.contentService = contentService;
            this.success = new i0.EventEmitter();
            this.error = new i0.EventEmitter();
            this.selectedItems = [];
        }
        AddPermissionComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.nodePermissionService.getNodeWithRoles(this.nodeId).subscribe(function (_b) {
                var node = _b.node, roles = _b.roles;
                _this.currentNode = node;
                _this.currentNodeRoles = roles;
            });
        };
        AddPermissionComponent.prototype.onSelect = function (selection) {
            this.selectedItems = selection;
        };
        AddPermissionComponent.prototype.isAddEnabled = function () {
            return this.contentService.hasAllowableOperations(this.currentNode, i1.AllowableOperationsEnum.UPDATEPERMISSIONS) &&
                this.selectedItems.length !== 0;
        };
        AddPermissionComponent.prototype.applySelection = function () {
            var _this = this;
            if (this.contentService.hasAllowableOperations(this.currentNode, i1.AllowableOperationsEnum.UPDATEPERMISSIONS)) {
                var permissions = this.transformNodeToPermissionElement(this.selectedItems, this.currentNodeRoles[0].role);
                this.nodePermissionService.updateNodePermissions(this.nodeId, permissions)
                    .subscribe(function (node) {
                    _this.success.emit(node);
                }, function (error) {
                    _this.error.emit(error);
                });
            }
        };
        AddPermissionComponent.prototype.transformNodeToPermissionElement = function (nodes, role) {
            return nodes.map(function (node) {
                var _a;
                return {
                    'authorityId': (_a = node.entry.properties['cm:authorityName']) !== null && _a !== void 0 ? _a : node.entry.properties['cm:userName'],
                    'name': role,
                    'accessStatus': 'ALLOWED'
                };
            });
        };
AddPermissionComponent.ɵfac = function AddPermissionComponent_Factory(t) { return new (t || AddPermissionComponent)(ɵngcc0.ɵɵdirectiveInject(NodePermissionService), ɵngcc0.ɵɵdirectiveInject(ɵngcc21.ContentService)); };
AddPermissionComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: AddPermissionComponent, selectors: [["adf-add-permission"]], inputs: { nodeId: "nodeId" }, outputs: { success: "success", error: "error" }, decls: 5, vars: 4, consts: [[3, "select"], ["id", "adf-add-permission-actions"], ["mat-button", "", "id", "adf-add-permission-action-button", 1, "adf-permission-action", 3, "disabled", "click"]], template: function AddPermissionComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "adf-add-permission-panel", 0);
        ɵngcc0.ɵɵlistener("select", function AddPermissionComponent_Template_adf_add_permission_panel_select_0_listener($event) { return ctx.onSelect($event); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(1, "div", 1);
        ɵngcc0.ɵɵelementStart(2, "button", 2);
        ɵngcc0.ɵɵlistener("click", function AddPermissionComponent_Template_button_click_2_listener() { return ctx.applySelection(); });
        ɵngcc0.ɵɵtext(3);
        ɵngcc0.ɵɵpipe(4, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("disabled", !ctx.isAddEnabled());
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(4, 2, "PERMISSION_MANAGER.ADD-PERMISSION.ADD-ACTION"), " ");
    } }, directives: [AddPermissionPanelComponent, ɵngcc1.MatButton], pipes: [ɵngcc25.TranslatePipe], styles: [".adf-permission-action[disabled]{opacity:.6}.adf-permission-action:enabled{color:var(--theme-primary-color)}"], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AddPermissionComponent, [{
        type: i0.Component,
        args: [{
                selector: 'adf-add-permission',
                template: "<adf-add-permission-panel\n    (select)=\"onSelect($event)\">\n</adf-add-permission-panel>\n<div id=\"adf-add-permission-actions\">\n   <button mat-button\n          id=\"adf-add-permission-action-button\"\n          class=\"adf-permission-action\"\n          [disabled]=\"!isAddEnabled()\"\n          (click)=\"applySelection()\">\n     {{'PERMISSION_MANAGER.ADD-PERMISSION.ADD-ACTION' | translate}}\n    </button>\n</div>\n",
                encapsulation: i0.ViewEncapsulation.None,
                styles: [".adf-permission-action[disabled]{opacity:.6}.adf-permission-action:enabled{color:var(--theme-primary-color)}"]
            }]
    }], function () { return [{ type: NodePermissionService }, { type: ɵngcc21.ContentService }]; }, { success: [{
            type: i0.Output
        }], error: [{
            type: i0.Output
        }], nodeId: [{
            type: i0.Input
        }] }); })();
        return AddPermissionComponent;
    }());
    AddPermissionComponent.ctorParameters = function () { return [
        { type: NodePermissionService },
        { type: i1.ContentService }
    ]; };
    AddPermissionComponent.propDecorators = {
        nodeId: [{ type: i0.Input }],
        success: [{ type: i0.Output }],
        error: [{ type: i0.Output }]
    };

    var UserIconColumnComponent = /** @class */ (function () {
        function UserIconColumnComponent(nodePermissionService) {
            this.nodePermissionService = nodePermissionService;
            this.selected = false;
            this.displayText$ = new rxjs.BehaviorSubject(null);
            this.group = false;
        }
        Object.defineProperty(UserIconColumnComponent.prototype, "isSelected", {
            get: function () {
                var _a, _b;
                return ((_b = (_a = this.context) === null || _a === void 0 ? void 0 : _a.row) === null || _b === void 0 ? void 0 : _b.isSelected) || this.selected;
            },
            enumerable: false,
            configurable: true
        });
        UserIconColumnComponent.prototype.ngOnInit = function () {
            var _a, _b;
            if (this.context) {
                var _c = (_b = (_a = this.context.row.obj) === null || _a === void 0 ? void 0 : _a.entry) !== null && _b !== void 0 ? _b : this.context.row.obj, person = _c.person, group = _c.group, authorityId = _c.authorityId;
                this.group = this.isGroup(group, authorityId);
                this.displayText$.next(person || group || { displayName: authorityId });
            }
            if (this.node) {
                var _d = this.nodePermissionService.transformNodeToUserPerson(this.node.entry), person = _d.person, group = _d.group;
                this.group = this.isGroup(group, null);
                this.displayText$.next(person || group);
            }
        };
        UserIconColumnComponent.prototype.isGroup = function (group, authorityId) {
            return !!group || (authorityId === null || authorityId === void 0 ? void 0 : authorityId.startsWith('GROUP_')) || (authorityId === null || authorityId === void 0 ? void 0 : authorityId.startsWith('ROLE_'));
        };
UserIconColumnComponent.ɵfac = function UserIconColumnComponent_Factory(t) { return new (t || UserIconColumnComponent)(ɵngcc0.ɵɵdirectiveInject(NodePermissionService)); };
UserIconColumnComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: UserIconColumnComponent, selectors: [["adf-user-icon-column"]], hostAttrs: [1, "adf-user-icon-column", "adf-datatable-content-cell"], inputs: { selected: "selected", context: "context", node: "node" }, decls: 2, vars: 2, consts: [["class", "adf-cell-value", 4, "ngIf"], [1, "adf-cell-value"], [4, "ngIf"], ["class", "adf-group-icon", 4, "ngIf"], [3, "outerHTML", 4, "ngIf"], [1, "adf-group-icon"], [3, "outerHTML"], ["svgIcon", "selected", 1, "adf-people-select-icon", "adf-datatable-selected"]], template: function UserIconColumnComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, UserIconColumnComponent_div_0_Template, 3, 4, "div", 0);
        ɵngcc0.ɵɵtemplate(1, UserIconColumnComponent_div_1_Template, 2, 0, "div", 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngIf", !ctx.isSelected);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.isSelected);
    } }, directives: [ɵngcc23.NgIf, ɵngcc4.MatIcon], pipes: [ɵngcc23.AsyncPipe, ɵngcc21.InitialUsernamePipe], styles: [".adf-people-initial{align-items:center;display:flex;font-size:18px;height:40px;justify-content:center;text-transform:uppercase;width:40px}.adf-group-icon,.adf-people-initial{background:var(--theme-primary-color);border-radius:50%;color:var(--theme-primary-color-default-contrast)!important;font-weight:bolder}.adf-group-icon{font-size:20px;height:20px!important;padding:10px;width:20px!important}.adf-people-select-icon{margin:0!important}.adf-people-select-icon svg{fill:var(--theme-accent-color);height:40px;width:40px}"], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(UserIconColumnComponent, [{
        type: i0.Component,
        args: [{
                selector: 'adf-user-icon-column',
                template: "\n        <div class=\"adf-cell-value\" [attr.id]=\"group ? 'group-icon' : 'person-icon'\"  *ngIf=\"!isSelected\">\n            <ng-container *ngIf=\"displayText$ | async as user\">\n                <mat-icon *ngIf=\"group\" class=\"adf-group-icon\">people_alt_outline</mat-icon>\n                <div *ngIf=\"!group\" [outerHTML]=\"user | usernameInitials: 'adf-people-initial'\"></div>\n            </ng-container>\n        </div>\n        <div class=\"adf-cell-value\" *ngIf=\"isSelected\">\n            <mat-icon class=\"adf-people-select-icon adf-datatable-selected\" svgIcon=\"selected\"></mat-icon>\n        </div>\n    ",
                encapsulation: i0.ViewEncapsulation.None,
                host: { class: 'adf-user-icon-column adf-datatable-content-cell' },
                styles: [".adf-people-initial{align-items:center;display:flex;font-size:18px;height:40px;justify-content:center;text-transform:uppercase;width:40px}.adf-group-icon,.adf-people-initial{background:var(--theme-primary-color);border-radius:50%;color:var(--theme-primary-color-default-contrast)!important;font-weight:bolder}.adf-group-icon{font-size:20px;height:20px!important;padding:10px;width:20px!important}.adf-people-select-icon{margin:0!important}.adf-people-select-icon svg{fill:var(--theme-accent-color);height:40px;width:40px}"]
            }]
    }], function () { return [{ type: NodePermissionService }]; }, { selected: [{
            type: i0.Input
        }], context: [{
            type: i0.Input
        }], node: [{
            type: i0.Input
        }] }); })();
        return UserIconColumnComponent;
    }());
    UserIconColumnComponent.ctorParameters = function () { return [
        { type: NodePermissionService }
    ]; };
    UserIconColumnComponent.propDecorators = {
        context: [{ type: i0.Input }],
        node: [{ type: i0.Input }],
        selected: [{ type: i0.Input }]
    };

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var UserNameColumnComponent = /** @class */ (function () {
        function UserNameColumnComponent(nodePermissionService) {
            this.nodePermissionService = nodePermissionService;
            this.displayText$ = new rxjs.BehaviorSubject('');
            this.subTitleText$ = new rxjs.BehaviorSubject('');
        }
        UserNameColumnComponent.prototype.ngOnInit = function () {
            var _a, _b;
            if (this.context != null) {
                var _d = (_b = (_a = this.context.row.obj) === null || _a === void 0 ? void 0 : _a.entry) !== null && _b !== void 0 ? _b : this.context.row.obj, person = _d.person, group = _d.group, authorityId = _d.authorityId;
                var permissionGroup = authorityId ? { displayName: authorityId } : null;
                this.updatePerson(person);
                this.updateGroup(group || permissionGroup);
            }
            if (this.node) {
                var _e = this.nodePermissionService.transformNodeToUserPerson(this.node.entry), person = _e.person, group = _e.group;
                this.updatePerson(person);
                this.updateGroup(group);
            }
        };
        UserNameColumnComponent.prototype.updatePerson = function (person) {
            var _a, _b, _c;
            if (person) {
                this.displayText$.next(((_a = person.firstName) !== null && _a !== void 0 ? _a : '') + " " + ((_b = person.lastName) !== null && _b !== void 0 ? _b : ''));
                this.subTitleText$.next((_c = person.email) !== null && _c !== void 0 ? _c : '');
            }
        };
        UserNameColumnComponent.prototype.updateGroup = function (group) {
            if (group) {
                this.displayText$.next(group.displayName);
            }
        };
UserNameColumnComponent.ɵfac = function UserNameColumnComponent_Factory(t) { return new (t || UserNameColumnComponent)(ɵngcc0.ɵɵdirectiveInject(NodePermissionService)); };
UserNameColumnComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: UserNameColumnComponent, selectors: [["adf-user-name-column"]], hostAttrs: [1, "adf-user-name-column", "adf-datatable-content-cell", "adf-expand-cell-5", "adf-ellipsis-cell"], inputs: { context: "context", node: "node" }, decls: 9, vars: 12, consts: [[1, "adf-ellipsis-cell"], [1, "adf-user-name-column", 3, "title"], ["class", "adf-user-email-column", 3, "title", 4, "ngIf"], [1, "adf-user-email-column", 3, "title"]], template: function UserNameColumnComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵpipe(1, "async");
        ɵngcc0.ɵɵelementStart(2, "span", 1);
        ɵngcc0.ɵɵpipe(3, "async");
        ɵngcc0.ɵɵtext(4);
        ɵngcc0.ɵɵpipe(5, "async");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(6, "br");
        ɵngcc0.ɵɵtemplate(7, UserNameColumnComponent_span_7_Template, 4, 6, "span", 2);
        ɵngcc0.ɵɵpipe(8, "async");
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵattribute("data-automation-id", ɵngcc0.ɵɵpipeBind1(1, 4, ctx.displayText$));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(3, 6, ctx.displayText$));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(5, 8, ctx.displayText$), "");
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngIf", ɵngcc0.ɵɵpipeBind1(8, 10, ctx.subTitleText$));
    } }, directives: [ɵngcc23.NgIf], pipes: [ɵngcc23.AsyncPipe], styles: [".adf-user-name-column{font-size:14px;font-weight:600}.adf-user-email-column{color:var(--theme-foreground-text-color);font-size:14px;letter-spacing:-.2px;line-height:1.43}"], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(UserNameColumnComponent, [{
        type: i0.Component,
        args: [{
                selector: 'adf-user-name-column',
                template: "\n        <div class=\"adf-ellipsis-cell\" [attr.data-automation-id]=\"displayText$ | async\">\n            <span class=\"adf-user-name-column\" title=\"{{ displayText$ | async }}\"> {{ displayText$ | async }}</span>\n            <br/>\n            <span class=\"adf-user-email-column\" title=\"{{ subTitleText$ | async }}\" *ngIf=\"subTitleText$ | async\">\n                {{ subTitleText$ | async }}\n            </span>\n        </div>\n    ",
                encapsulation: i0.ViewEncapsulation.None,
                host: { class: 'adf-user-name-column adf-datatable-content-cell adf-expand-cell-5 adf-ellipsis-cell' },
                styles: [".adf-user-name-column{font-size:14px;font-weight:600}.adf-user-email-column{color:var(--theme-foreground-text-color);font-size:14px;letter-spacing:-.2px;line-height:1.43}"]
            }]
    }], function () { return [{ type: NodePermissionService }]; }, { context: [{
            type: i0.Input
        }], node: [{
            type: i0.Input
        }] }); })();
        return UserNameColumnComponent;
    }());
    UserNameColumnComponent.ctorParameters = function () { return [
        { type: NodePermissionService }
    ]; };
    UserNameColumnComponent.propDecorators = {
        context: [{ type: i0.Input }],
        node: [{ type: i0.Input }]
    };

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var UserRoleColumnComponent = /** @class */ (function () {
        function UserRoleColumnComponent() {
            this.readonly = false;
            this.placeholder = 'PERMISSION_MANAGER.LABELS.SELECT-ROLE';
            this.roleChanged = new i0.EventEmitter();
        }
        UserRoleColumnComponent.prototype.onRoleChanged = function (newRole) {
            this.value = newRole;
            this.roleChanged.emit(newRole);
        };
UserRoleColumnComponent.ɵfac = function UserRoleColumnComponent_Factory(t) { return new (t || UserRoleColumnComponent)(); };
UserRoleColumnComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: UserRoleColumnComponent, selectors: [["adf-user-role-column"]], hostAttrs: [1, "adf-user-role-column", "adf-datatable-content-cell", "adf-expand-cell-4"], inputs: { readonly: "readonly", placeholder: "placeholder", value: "value", roles: "roles" }, outputs: { roleChanged: "roleChanged" }, decls: 2, vars: 2, consts: [["floatLabel", "never", "class", "adf-role-selector-field", 4, "ngIf"], ["class", "adf-datatable-cell-value adf-readonly-role", 3, "title", 4, "ngIf"], ["floatLabel", "never", 1, "adf-role-selector-field"], [3, "placeholder", "value", "click", "selectionChange"], [3, "value", 4, "ngFor", "ngForOf"], [3, "value"], [1, "adf-datatable-cell-value", "adf-readonly-role", 3, "title"]], template: function UserRoleColumnComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, UserRoleColumnComponent_mat_form_field_0_Template, 4, 5, "mat-form-field", 0);
        ɵngcc0.ɵɵtemplate(1, UserRoleColumnComponent_span_1_Template, 4, 6, "span", 1);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngIf", !ctx.readonly);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.readonly);
    } }, directives: [ɵngcc23.NgIf, ɵngcc27.MatFormField, ɵngcc13.MatSelect, ɵngcc23.NgForOf, ɵngcc10.MatOption], pipes: [ɵngcc25.TranslatePipe, ɵngcc21.LocalizedRolePipe], styles: [".adf-role-selector-field[_ngcontent-%COMP%] {\n            width: 100%;\n            .mat-form-field {\n                width: 100%;\n                max-width: 200px;\n            }\n        }\n        .adf-readonly-role[_ngcontent-%COMP%] {\n            padding-left: 0 !important;\n        }"] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(UserRoleColumnComponent, [{
        type: i0.Component,
        args: [{
                selector: 'adf-user-role-column',
                template: "\n      <mat-form-field floatLabel=\"never\" class=\"adf-role-selector-field\" *ngIf=\"!readonly\">\n          <mat-select\n              (click)=\"$event.stopPropagation()\"\n              [placeholder]=\"placeholder | translate\"\n              [value]=\"value\"\n              (selectionChange)=\"onRoleChanged($event.value)\">\n              <mat-option *ngFor=\"let role of roles\" [value]=\"role.role\">\n                  {{ role.label | adfLocalizedRole }}\n              </mat-option>\n          </mat-select>\n      </mat-form-field>\n\n      <span class=\"adf-datatable-cell-value adf-readonly-role\" [title]=\"value | adfLocalizedRole\" *ngIf=\"readonly\">\n          {{value | adfLocalizedRole}}\n      </span>\n  ",
                host: { class: 'adf-user-role-column adf-datatable-content-cell adf-expand-cell-4' },
                styles: [".adf-role-selector-field {\n            width: 100%;\n            .mat-form-field {\n                width: 100%;\n                max-width: 200px;\n            }\n        }\n        .adf-readonly-role {\n            padding-left: 0 !important;\n        }\n        "]
            }]
    }], function () { return []; }, { readonly: [{
            type: i0.Input
        }], placeholder: [{
            type: i0.Input
        }], roleChanged: [{
            type: i0.Output
        }], value: [{
            type: i0.Input
        }], roles: [{
            type: i0.Input
        }] }); })();
        return UserRoleColumnComponent;
    }());
    UserRoleColumnComponent.propDecorators = {
        roles: [{ type: i0.Input }],
        value: [{ type: i0.Input }],
        readonly: [{ type: i0.Input }],
        placeholder: [{ type: i0.Input }],
        roleChanged: [{ type: i0.Output }]
    };

    var NodePathColumnComponent = /** @class */ (function () {
        function NodePathColumnComponent() {
            this.displayText$ = new rxjs.BehaviorSubject('');
        }
        NodePathColumnComponent.prototype.ngOnInit = function () {
            this.updateValue();
        };
        NodePathColumnComponent.prototype.updateValue = function () {
            this.displayText$.next(this.node.path.name);
        };
NodePathColumnComponent.ɵfac = function NodePathColumnComponent_Factory(t) { return new (t || NodePathColumnComponent)(); };
NodePathColumnComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: NodePathColumnComponent, selectors: [["adf-node-path-column"]], hostAttrs: [1, "adf-node-path-column", "adf-datatable-content-cell"], inputs: { node: "node" }, decls: 4, vars: 6, consts: [[1, "adf-user-name-column", "adf-datatable-cell-value", 3, "title"]], template: function NodePathColumnComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "span", 0);
        ɵngcc0.ɵɵpipe(1, "async");
        ɵngcc0.ɵɵtext(2);
        ɵngcc0.ɵɵpipe(3, "async");
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(1, 2, ctx.displayText$));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(3, 4, ctx.displayText$), " ");
    } }, pipes: [ɵngcc23.AsyncPipe], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NodePathColumnComponent, [{
        type: i0.Component,
        args: [{
                selector: 'adf-node-path-column',
                template: "\n        <span class=\"adf-user-name-column adf-datatable-cell-value\"  title=\"{{ displayText$ | async }}\">\n            {{ displayText$ | async }}\n        </span>\n    ",
                host: { class: 'adf-node-path-column adf-datatable-content-cell' }
            }]
    }], function () { return []; }, { node: [{
            type: i0.Input
        }] }); })();
        return NodePathColumnComponent;
    }());
    NodePathColumnComponent.propDecorators = {
        node: [{ type: i0.Input }]
    };

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var PermissionContainerComponent = /** @class */ (function () {
        function PermissionContainerComponent() {
            this.permissions = [];
            this.isReadOnly = false;
            this.showLocation = false;
            this.selectionMode = 'multiple';
            this.update = new i0.EventEmitter();
            this.updateAll = new i0.EventEmitter();
            this.delete = new i0.EventEmitter();
            this.error = new i0.EventEmitter();
        }
        PermissionContainerComponent.prototype.ngOnChanges = function () {
            this.bulkSelectionRole = '';
        };
        PermissionContainerComponent.prototype.updateRole = function (role, permission) {
            this.update.emit({ role: role, permission: permission });
        };
        PermissionContainerComponent.prototype.bulkRoleUpdate = function (role) {
            this.updateAll.emit(role);
        };
        PermissionContainerComponent.prototype.removePermission = function (event, permissionRow) {
            event.stopPropagation();
            this.delete.emit(permissionRow);
        };
PermissionContainerComponent.ɵfac = function PermissionContainerComponent_Factory(t) { return new (t || PermissionContainerComponent)(); };
PermissionContainerComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: PermissionContainerComponent, selectors: [["adf-permission-container"]], inputs: { permissions: "permissions", isReadOnly: "isReadOnly", showLocation: "showLocation", selectionMode: "selectionMode", node: "node", roles: "roles" }, outputs: { update: "update", updateAll: "updateAll", delete: "delete", error: "error" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 15, vars: 14, consts: [["id", "adf-permission-display-container", 1, "adf-datatable-permission", 3, "rows", "stickyHeader", "selectionMode"], ["key", "$thumbunail", 1, "adf-datatable-cell--image", "adf-authority-icon-column", 3, "sortable"], ["key", "authorityId", 1, "adf-ellipsis-cell", "adf-expand-cell-5", "adf-authorityId-column", 3, "title"], ["class", "adf-ellipsis-cell adf-expand-cell-5 adf-authorityId-column", "title", "PERMISSION_MANAGER.COLUMN.LOCATION", "key", "location", 4, "ngIf"], ["title", "PERMISSION_MANAGER.PERMISSION_DISPLAY.ROLE", "key", "name", 1, "adf-ellipsis-cell", "adf-expand-cell-4", 3, "sortable"], [4, "ngIf"], ["class", "adf-datatable-cell adf-delete-permission-column", "key", "", 3, "sortable", 4, "ngIf"], [3, "context"], ["title", "PERMISSION_MANAGER.COLUMN.LOCATION", "key", "location", 1, "adf-ellipsis-cell", "adf-expand-cell-5", "adf-authorityId-column"], [3, "node"], ["id", "adf-select-role-permission", 3, "readonly", "placeholder", "value", "roles", "roleChanged"], ["placeholder", "PERMISSION_MANAGER.COLUMN.BULK-ROLE", "id", "adf-bulk-select-role-permission", 1, "adf-permission-role-column-header", 3, "roles", "value", "roleChanged"], ["key", "", 1, "adf-datatable-cell", "adf-delete-permission-column", 3, "sortable"], ["mat-icon-button", "", 3, "disabled", "click"], ["id", "adf-no-permissions-template", "icon", "supervisor_account", 3, "title", "subtitle"]], template: function PermissionContainerComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "adf-datatable", 0);
        ɵngcc0.ɵɵelementStart(1, "data-columns");
        ɵngcc0.ɵɵelementStart(2, "data-column", 1);
        ɵngcc0.ɵɵtemplate(3, PermissionContainerComponent_ng_template_3_Template, 1, 1, "ng-template");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(4, "data-column", 2);
        ɵngcc0.ɵɵpipe(5, "translate");
        ɵngcc0.ɵɵtemplate(6, PermissionContainerComponent_ng_template_6_Template, 1, 1, "ng-template");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtext(7, "d ");
        ɵngcc0.ɵɵtemplate(8, PermissionContainerComponent_data_column_8_Template, 2, 0, "data-column", 3);
        ɵngcc0.ɵɵelementStart(9, "data-column", 4);
        ɵngcc0.ɵɵtemplate(10, PermissionContainerComponent_ng_template_10_Template, 1, 4, "ng-template");
        ɵngcc0.ɵɵtemplate(11, PermissionContainerComponent_adf_data_column_header_11_Template, 2, 0, "adf-data-column-header", 5);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(12, PermissionContainerComponent_data_column_12_Template, 2, 1, "data-column", 6);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(13, "adf-no-content-template");
        ɵngcc0.ɵɵtemplate(14, PermissionContainerComponent_ng_template_14_Template, 3, 6, "ng-template");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("rows", ctx.permissions)("stickyHeader", true)("selectionMode", ctx.selectionMode);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("sortable", false);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("title", ɵngcc0.ɵɵpipeBind2(5, 9, "PERMISSION_MANAGER.COLUMN.NAME", ɵngcc0.ɵɵpureFunction1(12, _c0, ctx.permissions.length)));
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵproperty("ngIf", ctx.node && ctx.showLocation);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("sortable", false);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.isReadOnly);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.isReadOnly);
    } }, directives: [ɵngcc21.DataTableComponent, ɵngcc21.DataColumnListComponent, ɵngcc21.DataColumnComponent, ɵngcc23.NgIf, ɵngcc21.NoContentTemplateDirective, UserIconColumnComponent, UserNameColumnComponent, NodePathColumnComponent, UserRoleColumnComponent, ɵngcc21.DateColumnHeaderComponent, ɵngcc1.MatButton, ɵngcc4.MatIcon, ɵngcc21.EmptyContentComponent], pipes: [ɵngcc25.TranslatePipe], styles: [".adf-datatable-permission{display:flex;min-width:450px;width:100%}.adf-datatable-permission.adf-datatable{overflow:hidden}.adf-datatable-permission.adf-datatable .adf-delete-permission-column{min-width:80px}.adf-datatable-permission.adf-datatable .adf-delete-permission-column .adf-cell-value{padding-right:10px;place-content:flex-end;width:80px}.adf-datatable-permission.adf-datatable .adf-authorityId-column{flex:40%}.adf-datatable-permission.adf-datatable .adf-authority-icon-column{min-width:40px}.adf-datatable-permission.adf-datatable .adf-datatable-selected>svg{height:40px;width:40px}"], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(PermissionContainerComponent, [{
        type: i0.Component,
        args: [{
                selector: 'adf-permission-container',
                template: "<adf-datatable class=\"adf-datatable-permission\"\n               id=\"adf-permission-display-container\"\n               [rows]=\"permissions\"\n               [stickyHeader]=\"true\"\n               [selectionMode]=\"selectionMode\">\n\n    <data-columns>\n        <data-column class=\"adf-datatable-cell--image adf-authority-icon-column\" key=\"$thumbunail\" [sortable]=\"false\">\n            <ng-template let-context>\n                <adf-user-icon-column [context]=\"context\"></adf-user-icon-column>\n            </ng-template>\n        </data-column>\n\n        <data-column class=\"adf-ellipsis-cell adf-expand-cell-5 adf-authorityId-column\"\n                     [title]=\"'PERMISSION_MANAGER.COLUMN.NAME' | translate:{count:permissions.length}\"\n                     key=\"authorityId\">\n            <ng-template let-context>\n                <adf-user-name-column [context]=\"context\"></adf-user-name-column>\n            </ng-template>\n        </data-column>d\n\n        <data-column class=\"adf-ellipsis-cell adf-expand-cell-5 adf-authorityId-column\"\n                     title=\"PERMISSION_MANAGER.COLUMN.LOCATION\"\n                     key=\"location\"\n                     *ngIf=\"node && showLocation\">\n            <ng-template>\n                <adf-node-path-column [node]=\"node\"></adf-node-path-column>\n            </ng-template>\n        </data-column>\n\n        <data-column\n            class=\"adf-ellipsis-cell adf-expand-cell-4\"\n            title=\"PERMISSION_MANAGER.PERMISSION_DISPLAY.ROLE\"\n            key=\"name\"\n            [sortable]=\"false\">\n            <ng-template let-entry=\"$implicit\">\n                <adf-user-role-column [readonly]=\"entry.row.obj.readonly || isReadOnly\"\n                                      [placeholder]=\"entry.data.getValue(entry.row, entry.col)\"\n                                      [value]=\"entry.data.getValue(entry.row, entry.col)\"\n                                      [roles]=\"roles\"\n                                      id=\"adf-select-role-permission\"\n                                      (roleChanged)=\"updateRole($event, entry.row.obj)\">\n                </adf-user-role-column>\n            </ng-template>\n\n            <adf-data-column-header *ngIf=\"!isReadOnly\">\n                <ng-template>\n                    <adf-user-role-column class=\"adf-permission-role-column-header\"\n                                          placeholder=\"PERMISSION_MANAGER.COLUMN.BULK-ROLE\"\n                                          [roles]=\"roles\"\n                                          [value]=\"bulkSelectionRole\"\n                                          id=\"adf-bulk-select-role-permission\"\n                                          (roleChanged)=\"bulkRoleUpdate($event)\">\n                    </adf-user-role-column>\n                </ng-template>\n            </adf-data-column-header>\n        </data-column>\n\n        <data-column class=\"adf-datatable-cell adf-delete-permission-column\" key=\"\" *ngIf=\"!isReadOnly\" [sortable]=\"false\">\n            <ng-template let-entry=\"$implicit\">\n                <button mat-icon-button\n                        [disabled]=\"entry.row.obj.readonly\"\n                        (click)=\"removePermission($event, entry.row.obj)\"\n                        [attr.data-automation-id]=\"'adf-delete-permission-button-' + entry.row.obj.authorityId\">\n                    <mat-icon>delete_outline</mat-icon>\n                </button>\n            </ng-template>\n        </data-column>\n    </data-columns>\n\n    <adf-no-content-template>\n        <ng-template>\n            <adf-empty-content\n                id=\"adf-no-permissions-template\"\n                icon=\"supervisor_account\"\n                [title]=\"'PERMISSION_MANAGER.MESSAGE.EMPTY-PERMISSION' | translate\"\n                [subtitle]=\"'PERMISSION_MANAGER.MESSAGE.EMPTY-SUBTITLE' | translate\">\n            </adf-empty-content>\n        </ng-template>\n    </adf-no-content-template>\n\n</adf-datatable>\n",
                encapsulation: i0.ViewEncapsulation.None,
                styles: [".adf-datatable-permission{display:flex;min-width:450px;width:100%}.adf-datatable-permission.adf-datatable{overflow:hidden}.adf-datatable-permission.adf-datatable .adf-delete-permission-column{min-width:80px}.adf-datatable-permission.adf-datatable .adf-delete-permission-column .adf-cell-value{padding-right:10px;place-content:flex-end;width:80px}.adf-datatable-permission.adf-datatable .adf-authorityId-column{flex:40%}.adf-datatable-permission.adf-datatable .adf-authority-icon-column{min-width:40px}.adf-datatable-permission.adf-datatable .adf-datatable-selected>svg{height:40px;width:40px}"]
            }]
    }], function () { return []; }, { permissions: [{
            type: i0.Input
        }], isReadOnly: [{
            type: i0.Input
        }], showLocation: [{
            type: i0.Input
        }], selectionMode: [{
            type: i0.Input
        }], update: [{
            type: i0.Output
        }], updateAll: [{
            type: i0.Output
        }], delete: [{
            type: i0.Output
        }], error: [{
            type: i0.Output
        }], node: [{
            type: i0.Input
        }], roles: [{
            type: i0.Input
        }] }); })();
        return PermissionContainerComponent;
    }());
    PermissionContainerComponent.propDecorators = {
        node: [{ type: i0.Input }],
        permissions: [{ type: i0.Input }],
        roles: [{ type: i0.Input }],
        isReadOnly: [{ type: i0.Input }],
        showLocation: [{ type: i0.Input }],
        selectionMode: [{ type: i0.Input }],
        update: [{ type: i0.Output }],
        updateAll: [{ type: i0.Output }],
        delete: [{ type: i0.Output }],
        error: [{ type: i0.Output }]
    };

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var PopOverDirective = /** @class */ (function () {
        function PopOverDirective(element, overlay, vcr) {
            this.element = element;
            this.overlay = overlay;
            this.vcr = vcr;
            this.panelClass = 'adf-permission-pop-over';
            this._open = false;
            this.destroy$ = new rxjs.Subject();
        }
        Object.defineProperty(PopOverDirective.prototype, "open", {
            get: function () {
                return this._open;
            },
            enumerable: false,
            configurable: true
        });
        PopOverDirective.prototype.ngOnInit = function () {
            this.createOverlay();
        };
        PopOverDirective.prototype.ngAfterViewInit = function () {
            var _this = this;
            this.element.nativeElement.addEventListener('click', function () { return _this.attachOverlay(); });
        };
        PopOverDirective.prototype.ngOnDestroy = function () {
            this.detachOverlay();
            this.destroy$.next();
            this.destroy$.complete();
        };
        PopOverDirective.prototype.createOverlay = function () {
            var _this = this;
            var scrollStrategy = this.overlay.scrollStrategies.reposition();
            var positionStrategy = this.overlay
                .position()
                .flexibleConnectedTo(this.target)
                .withPositions([
                new overlay.ConnectionPositionPair({ originX: 'start', originY: 'bottom' }, { overlayX: 'start', overlayY: 'top' }),
                new overlay.ConnectionPositionPair({ originX: 'start', originY: 'top' }, { overlayX: 'start', overlayY: 'bottom' })
            ])
                .withPush(false);
            this.overlayRef = this.overlay.create({
                positionStrategy: positionStrategy,
                scrollStrategy: scrollStrategy,
                hasBackdrop: true,
                backdropClass: 'cdk-overlay-transparent-backdrop',
                panelClass: this.panelClass
            });
            this.overlayRef
                .backdropClick()
                .pipe(operators.takeUntil(this.destroy$))
                .subscribe(function () {
                _this._open = false;
                _this.detachOverlay();
            });
        };
        PopOverDirective.prototype.attachOverlay = function () {
            if (!this.overlayRef.hasAttached()) {
                var periodSelectorPortal = new portal.TemplatePortal(this.popOver, this.vcr);
                this.overlayRef.attach(periodSelectorPortal);
                this._open = true;
            }
        };
        PopOverDirective.prototype.detachOverlay = function () {
            if (this.overlayRef.hasAttached()) {
                this.overlayRef.detach();
            }
        };
PopOverDirective.ɵfac = function PopOverDirective_Factory(t) { return new (t || PopOverDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc37.Overlay), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
PopOverDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: PopOverDirective, selectors: [["", "adf-pop-over", ""]], inputs: { panelClass: "panelClass", popOver: ["adf-pop-over", "popOver"], target: "target" }, exportAs: ["adfPopOver"] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(PopOverDirective, [{
        type: i0.Directive,
        args: [{
                selector: '[adf-pop-over]',
                exportAs: 'adfPopOver'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc37.Overlay }, { type: ɵngcc0.ViewContainerRef }]; }, { panelClass: [{
            type: i0.Input
        }], popOver: [{
            type: i0.Input,
            args: ['adf-pop-over']
        }], target: [{
            type: i0.Input
        }] }); })();
        return PopOverDirective;
    }());
    PopOverDirective.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: overlay.Overlay },
        { type: i0.ViewContainerRef }
    ]; };
    PopOverDirective.propDecorators = {
        popOver: [{ type: i0.Input, args: ['adf-pop-over',] }],
        target: [{ type: i0.Input }],
        panelClass: [{ type: i0.Input }]
    };

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var PermissionManagerModule = /** @class */ (function () {
        function PermissionManagerModule() {
        }
PermissionManagerModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: PermissionManagerModule });
PermissionManagerModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function PermissionManagerModule_Factory(t) { return new (t || PermissionManagerModule)(); }, imports: [[
            i1.CoreModule,
            common.CommonModule,
            forms.FormsModule,
            forms.ReactiveFormsModule,
            MaterialModule,
            SearchModule,
            i1.PipeModule
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(PermissionManagerModule, { declarations: [PermissionListComponent, AddPermissionPanelComponent, InheritPermissionDirective, AddPermissionComponent, AddPermissionDialogComponent, UserNameColumnComponent, UserIconColumnComponent, UserRoleColumnComponent, PopOverDirective, NodePathColumnComponent, PermissionContainerComponent], imports: [ɵngcc21.CoreModule, ɵngcc23.CommonModule, ɵngcc26.FormsModule, ɵngcc26.ReactiveFormsModule, MaterialModule, SearchModule, ɵngcc21.PipeModule], exports: [PermissionListComponent, AddPermissionPanelComponent, InheritPermissionDirective, AddPermissionComponent, AddPermissionDialogComponent, UserNameColumnComponent, UserIconColumnComponent, UserRoleColumnComponent, PopOverDirective, NodePathColumnComponent] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(PermissionManagerModule, [{
        type: i0.NgModule,
        args: [{
                imports: [
                    i1.CoreModule,
                    common.CommonModule,
                    forms.FormsModule,
                    forms.ReactiveFormsModule,
                    MaterialModule,
                    SearchModule,
                    i1.PipeModule
                ],
                declarations: [
                    PermissionListComponent,
                    AddPermissionPanelComponent,
                    InheritPermissionDirective,
                    AddPermissionComponent,
                    AddPermissionDialogComponent,
                    UserNameColumnComponent,
                    UserIconColumnComponent,
                    UserRoleColumnComponent,
                    PopOverDirective,
                    NodePathColumnComponent,
                    PermissionContainerComponent
                ],
                exports: [
                    PermissionListComponent,
                    AddPermissionPanelComponent,
                    InheritPermissionDirective,
                    AddPermissionComponent,
                    AddPermissionDialogComponent,
                    UserNameColumnComponent,
                    UserIconColumnComponent,
                    UserRoleColumnComponent,
                    PopOverDirective,
                    NodePathColumnComponent
                ]
            }]
    }], function () { return []; }, null); })();
        return PermissionManagerModule;
    }());

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var ShareDialogComponent = /** @class */ (function () {
        function ShareDialogComponent(appConfigService, sharedLinksApiService, dialogRef, dialog, nodesApiService, contentService, renditionService, data) {
            this.appConfigService = appConfigService;
            this.sharedLinksApiService = sharedLinksApiService;
            this.dialogRef = dialogRef;
            this.dialog = dialog;
            this.nodesApiService = nodesApiService;
            this.contentService = contentService;
            this.renditionService = renditionService;
            this.data = data;
            this.minDate = moment$1().add(1, 'd');
            this.isFileShared = false;
            this.isDisabled = false;
            this.form = new forms.FormGroup({
                sharedUrl: new forms.FormControl(''),
                time: new forms.FormControl({ value: '', disabled: true })
            });
            this.type = 'datetime';
            this.maxDebounceTime = 500;
            this.onDestroy$ = new rxjs.Subject();
        }
        ShareDialogComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.type = this.appConfigService.get('sharedLinkDateTimePickerType', 'datetime');
            if (this.data.node && this.data.node.entry) {
                this.fileName = this.data.node.entry.name;
                this.baseShareUrl = this.data.baseShareUrl;
                var properties = this.data.node.entry.properties;
                if (!properties || !properties['qshare:sharedId']) {
                    this.createSharedLinks(this.data.node.entry.id);
                }
                else {
                    this.sharedId = properties['qshare:sharedId'];
                    this.isFileShared = true;
                    this.updateForm();
                }
            }
            this.time.valueChanges
                .pipe(operators.debounceTime(this.maxDebounceTime), operators.takeUntil(this.onDestroy$))
                .subscribe(function (value) { return _this.onTimeChanged(value); });
        };
        ShareDialogComponent.prototype.onTimeChanged = function (date) {
            var _this = this;
            this.updateNode(date).subscribe(function () { return _this.updateEntryExpiryDate(date); });
        };
        Object.defineProperty(ShareDialogComponent.prototype, "time", {
            get: function () {
                return this.form.controls['time'];
            },
            enumerable: false,
            configurable: true
        });
        ShareDialogComponent.prototype.ngOnDestroy = function () {
            this.onDestroy$.next(true);
            this.onDestroy$.complete();
        };
        ShareDialogComponent.prototype.onSlideShareChange = function (event) {
            if (event.checked) {
                this.createSharedLinks(this.data.node.entry.id);
            }
            else {
                this.openConfirmationDialog();
            }
        };
        Object.defineProperty(ShareDialogComponent.prototype, "canUpdate", {
            get: function () {
                var entry = this.data.node.entry;
                if (entry && entry.allowableOperations) {
                    return this.contentService.hasAllowableOperations(entry, 'update');
                }
                return true;
            },
            enumerable: false,
            configurable: true
        });
        ShareDialogComponent.prototype.onToggleExpirationDate = function (slideToggle) {
            if (slideToggle.checked) {
                this.time.enable();
            }
            else {
                this.time.disable();
                this.time.setValue(null);
            }
        };
        ShareDialogComponent.prototype.onDatetimepickerClosed = function () {
            this.dateTimePickerInput.nativeElement.blur();
            if (!this.time.value) {
                this.slideToggleExpirationDate.checked = false;
            }
        };
        ShareDialogComponent.prototype.openConfirmationDialog = function () {
            var _this = this;
            this.isFileShared = false;
            this.dialog
                .open(ConfirmDialogComponent, {
                data: {
                    title: 'SHARE.CONFIRMATION.DIALOG-TITLE',
                    message: 'SHARE.CONFIRMATION.MESSAGE',
                    yesLabel: 'SHARE.CONFIRMATION.REMOVE',
                    noLabel: 'SHARE.CONFIRMATION.CANCEL'
                },
                minWidth: '250px',
                closeOnNavigation: true
            })
                .beforeClosed()
                .subscribe(function (deleteSharedLink) {
                if (deleteSharedLink) {
                    _this.deleteSharedLink(_this.sharedId);
                }
                else {
                    _this.isFileShared = true;
                }
            });
        };
        ShareDialogComponent.prototype.createSharedLinks = function (nodeId) {
            var _this = this;
            this.isDisabled = true;
            this.sharedLinksApiService.createSharedLinks(nodeId).subscribe(function (sharedLink) {
                if (sharedLink.entry) {
                    _this.sharedId = sharedLink.entry.id;
                    if (_this.data.node.entry.properties) {
                        _this.data.node.entry.properties['qshare:sharedId'] = _this.sharedId;
                    }
                    else {
                        _this.data.node.entry.properties = {
                            'qshare:sharedId': _this.sharedId
                        };
                    }
                    _this.isDisabled = false;
                    _this.isFileShared = true;
                    _this.renditionService
                        .generateRenditionForNode(_this.data.node.entry.id)
                        .subscribe(function () { });
                    _this.updateForm();
                }
            }, function () {
                _this.isDisabled = false;
                _this.isFileShared = false;
            });
        };
        ShareDialogComponent.prototype.deleteSharedLink = function (sharedId) {
            var _this = this;
            this.isDisabled = true;
            this.sharedLinksApiService
                .deleteSharedLink(sharedId)
                .subscribe(function (response) {
                if (response instanceof Error) {
                    _this.isDisabled = false;
                    _this.isFileShared = true;
                    _this.handleError(response);
                }
                else {
                    if (_this.data.node.entry.properties) {
                        _this.data.node.entry.properties['qshare:sharedId'] = null;
                        _this.data.node.entry.properties['qshare:expiryDate'] = null;
                    }
                    _this.dialogRef.close(false);
                }
            });
        };
        ShareDialogComponent.prototype.handleError = function (error) {
            var message = 'SHARE.UNSHARE_ERROR';
            var statusCode = 0;
            try {
                statusCode = JSON.parse(error.message).error.statusCode;
            }
            catch (_a) { }
            if (statusCode === 403) {
                message = 'SHARE.UNSHARE_PERMISSION_ERROR';
            }
            this.sharedLinksApiService.error.next({
                statusCode: statusCode,
                message: message
            });
        };
        ShareDialogComponent.prototype.updateForm = function () {
            var entry = this.data.node.entry;
            var expiryDate = null;
            if (entry && entry.properties) {
                expiryDate = entry.properties['qshare:expiryDate'];
            }
            this.form.setValue({
                sharedUrl: "" + this.baseShareUrl + this.sharedId,
                time: expiryDate ? moment$1(expiryDate).local() : null
            });
            if (expiryDate) {
                this.time.enable();
            }
            else {
                this.time.disable();
            }
        };
        ShareDialogComponent.prototype.updateNode = function (date) {
            var expiryDate = date
                ? (this.type === 'date' ? date.endOf('day').utc().format() : date.utc().format())
                : null;
            return this.nodesApiService.updateNode(this.data.node.entry.id, {
                properties: {
                    'qshare:expiryDate': expiryDate
                }
            });
        };
        ShareDialogComponent.prototype.updateEntryExpiryDate = function (date) {
            var properties = this.data.node.entry.properties;
            if (properties) {
                properties['qshare:expiryDate'] = date
                    ? date.local()
                    : null;
            }
        };
ShareDialogComponent.ɵfac = function ShareDialogComponent_Factory(t) { return new (t || ShareDialogComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc21.AppConfigService), ɵngcc0.ɵɵdirectiveInject(ɵngcc21.SharedLinksApiService), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.MatDialogRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.MatDialog), ɵngcc0.ɵɵdirectiveInject(ɵngcc21.NodesApiService), ɵngcc0.ɵɵdirectiveInject(ɵngcc21.ContentService), ɵngcc0.ɵɵdirectiveInject(ɵngcc21.RenditionsService), ɵngcc0.ɵɵdirectiveInject(i2.MAT_DIALOG_DATA)); };
ShareDialogComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ShareDialogComponent, selectors: [["adf-share-dialog"]], viewQuery: function ShareDialogComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵstaticViewQuery(_c36, true);
        ɵngcc0.ɵɵstaticViewQuery(_c37, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.slideToggleExpirationDate = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.dateTimePickerInput = _t.first);
    } }, hostAttrs: [1, "adf-share-dialog"], decls: 41, vars: 43, consts: [[1, "adf-share-link__dialog-content"], ["data-automation-id", "adf-share-dialog-title", 1, "adf-share-link__title"], [1, "adf-share-link__info"], [1, "adf-share-link--row"], [1, "adf-share-link__label"], ["color", "primary", "data-automation-id", "adf-share-toggle", 3, "aria-label", "checked", "disabled", "change"], [3, "formGroup"], ["floatLabel", "always", 1, "adf-full-width", "adf-float-label"], ["data-automation-id", "adf-share-link", "matInput", "", "cdkFocusInitial", "", "formControlName", "sharedUrl", "readonly", "readonly", 1, "adf-share-link__input", 3, "placeholder"], ["sharedLinkInput", ""], ["matSuffix", "", 1, "adf-input-action", 3, "clipboard-notification", "adf-clipboard", "target"], ["color", "primary", "data-automation-id", "adf-expire-toggle", 3, "disabled", "aria-label", "checked", "change"], ["slideToggleExpirationDate", ""], ["matSuffix", "", 3, "disabled", "for"], ["matDatetimepickerToggle", "matDatetimepickerToggle"], [3, "type", "timeInterval", "closed"], ["datetimePicker", ""], ["matInput", "", "formControlName", "time", 1, "adf-share-link__input", 3, "placeholder", "min", "matDatetimepicker"], ["dateTimePickerInput", ""], ["mat-dialog-actions", ""], ["data-automation-id", "adf-share-dialog-close", "mat-button", "", "color", "primary", "mat-dialog-close", ""]], template: function ShareDialogComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "div", 1);
        ɵngcc0.ɵɵtext(2);
        ɵngcc0.ɵɵpipe(3, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(4, "mat-dialog-content");
        ɵngcc0.ɵɵelementStart(5, "p", 2);
        ɵngcc0.ɵɵtext(6);
        ɵngcc0.ɵɵpipe(7, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(8, "div", 3);
        ɵngcc0.ɵɵelementStart(9, "div", 4);
        ɵngcc0.ɵɵtext(10);
        ɵngcc0.ɵɵpipe(11, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(12, "mat-slide-toggle", 5);
        ɵngcc0.ɵɵlistener("change", function ShareDialogComponent_Template_mat_slide_toggle_change_12_listener($event) { return ctx.onSlideShareChange($event); });
        ɵngcc0.ɵɵpipe(13, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(14, "form", 6);
        ɵngcc0.ɵɵelementStart(15, "mat-form-field", 7);
        ɵngcc0.ɵɵelement(16, "input", 8, 9);
        ɵngcc0.ɵɵpipe(18, "translate");
        ɵngcc0.ɵɵelementStart(19, "mat-icon", 10);
        ɵngcc0.ɵɵpipe(20, "translate");
        ɵngcc0.ɵɵtext(21, " link ");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(22, "div", 3);
        ɵngcc0.ɵɵelementStart(23, "div", 4);
        ɵngcc0.ɵɵtext(24);
        ɵngcc0.ɵɵpipe(25, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(26, "mat-slide-toggle", 11, 12);
        ɵngcc0.ɵɵlistener("change", function ShareDialogComponent_Template_mat_slide_toggle_change_26_listener($event) { return ctx.onToggleExpirationDate($event); });
        ɵngcc0.ɵɵpipe(28, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(29, "mat-form-field", 7);
        ɵngcc0.ɵɵelement(30, "mat-datetimepicker-toggle", 13, 14);
        ɵngcc0.ɵɵelementStart(32, "mat-datetimepicker", 15, 16);
        ɵngcc0.ɵɵlistener("closed", function ShareDialogComponent_Template_mat_datetimepicker_closed_32_listener() { return ctx.onDatetimepickerClosed(); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(34, "input", 17, 18);
        ɵngcc0.ɵɵpipe(36, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(37, "div", 19);
        ɵngcc0.ɵɵelementStart(38, "button", 20);
        ɵngcc0.ɵɵtext(39);
        ɵngcc0.ɵɵpipe(40, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        var _r0 = ɵngcc0.ɵɵreference(17);
        var _r3 = ɵngcc0.ɵɵreference(33);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵtextInterpolate2(" ", ɵngcc0.ɵɵpipeBind1(3, 23, "SHARE.DIALOG-TITLE"), " ", ctx.fileName, " ");
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(7, 25, "SHARE.DESCRIPTION"));
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(11, 27, "SHARE.TITLE"));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵpropertyInterpolate("aria-label", ɵngcc0.ɵɵpipeBind1(13, 29, "SHARE.TITLE"));
        ɵngcc0.ɵɵproperty("checked", ctx.isFileShared)("disabled", !ctx.canUpdate || ctx.isDisabled);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("formGroup", ctx.form);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵpropertyInterpolate("placeholder", ɵngcc0.ɵɵpipeBind1(18, 31, "SHARE.PUBLIC-LINK"));
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("clipboard-notification", ɵngcc0.ɵɵpipeBind1(20, 33, "SHARE.CLIPBOARD-MESSAGE"))("target", _r0);
        ɵngcc0.ɵɵadvance(5);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(25, 35, "SHARE.EXPIRES"));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵpropertyInterpolate("aria-label", ɵngcc0.ɵɵpipeBind1(28, 37, "SHARE.EXPIRES"));
        ɵngcc0.ɵɵproperty("disabled", !ctx.canUpdate)("checked", ctx.time.value);
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵproperty("disabled", ctx.time.disabled)("for", _r3);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("type", ctx.type)("timeInterval", 1);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵpropertyInterpolate("placeholder", ɵngcc0.ɵɵpipeBind1(36, 39, "SHARE.EXPIRATION-LABEL"));
        ɵngcc0.ɵɵproperty("min", ctx.minDate)("matDatetimepicker", _r3);
        ɵngcc0.ɵɵadvance(5);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(40, 41, "SHARE.CLOSE"), " ");
    } }, directives: [ɵngcc3.MatDialogContent, ɵngcc16.MatSlideToggle, ɵngcc26.ɵangular_packages_forms_forms_y, ɵngcc26.NgControlStatusGroup, ɵngcc26.FormGroupDirective, ɵngcc27.MatFormField, ɵngcc6.MatInput, ɵngcc26.DefaultValueAccessor, ɵngcc26.NgControlStatus, ɵngcc26.FormControlName, ɵngcc4.MatIcon, ɵngcc27.MatSuffix, ɵngcc21.ClipboardDirective, ɵngcc28.MatDatetimepickerToggle, ɵngcc28.MatDatetimepicker, ɵngcc28.MatDatetimepickerInput, ɵngcc3.MatDialogActions, ɵngcc1.MatButton, ɵngcc3.MatDialogClose], pipes: [ɵngcc25.TranslatePipe], styles: [".adf-float-label{padding-top:20px}.adf-share-link-dialog .adf-share-link__dialog-content{display:flex;flex-direction:column}.adf-share-link-dialog .adf-share-link__info,.adf-share-link-dialog .adf-share-link__label,.adf-share-link-dialog .adf-share-link__title{color:var(--theme-text-bold-color);font-size:16px;font-stretch:normal;font-style:normal;font-weight:400;letter-spacing:-.4px;line-height:2}.adf-share-link-dialog .adf-share-link__label{flex:1 1 auto}.adf-share-link-dialog .adf-share-link__info{color:var(--theme-text-color);font-size:13px}.adf-share-link-dialog .adf-share-link--row{align-items:center;display:flex;flex-direction:row;flex-wrap:wrap}.adf-share-link-dialog .adf-share-link__input{color:var(--theme-text-bold-color)}.adf-share-link-dialog .adf-input-action{cursor:pointer}.adf-share-link-dialog .adf-full-width{width:100%}.adf-share-link-dialog .mat-form-field-infix{border-top:unset}.adf-share-link-dialog .mat-dialog-actions{justify-content:flex-end}.adf-share-link-dialog .mat-dialog-actions>button{text-transform:uppercase}.adf-share-link-dialog .mat-form-field-flex{align-items:center}"], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ShareDialogComponent, [{
        type: i0.Component,
        args: [{
                selector: 'adf-share-dialog',
                template: "<div class=\"adf-share-link__dialog-content\">\n    <div data-automation-id=\"adf-share-dialog-title\" class=\"adf-share-link__title\">\n        {{ 'SHARE.DIALOG-TITLE' | translate }} {{ fileName }}\n    </div>\n\n    <mat-dialog-content>\n        <p class=\"adf-share-link__info\">{{ 'SHARE.DESCRIPTION' | translate }}</p>\n\n        <div class=\"adf-share-link--row\">\n            <div class=\"adf-share-link__label\">{{ 'SHARE.TITLE' | translate }}</div>\n\n            <mat-slide-toggle\n                color=\"primary\"\n                data-automation-id=\"adf-share-toggle\"\n                aria-label=\"{{ 'SHARE.TITLE' | translate }}\"\n                [checked]=\"isFileShared\"\n                [disabled]=\"!canUpdate || isDisabled\"\n                (change)=\"onSlideShareChange($event)\">\n            </mat-slide-toggle>\n        </div>\n\n        <form [formGroup]=\"form\">\n            <mat-form-field class=\"adf-full-width adf-float-label\" floatLabel='always'>\n                <input\n                    #sharedLinkInput\n                    data-automation-id=\"adf-share-link\"\n                    class=\"adf-share-link__input\"\n                    matInput\n                    cdkFocusInitial\n                    placeholder=\"{{ 'SHARE.PUBLIC-LINK' | translate }}\"\n                    formControlName=\"sharedUrl\"\n                    readonly=\"readonly\">\n                <mat-icon\n                    class=\"adf-input-action\"\n                    matSuffix\n                    [clipboard-notification]=\"'SHARE.CLIPBOARD-MESSAGE' | translate\" [adf-clipboard]\n                    [target]=\"sharedLinkInput\">\n                    link\n                </mat-icon>\n            </mat-form-field>\n\n            <div class=\"adf-share-link--row\">\n                <div class=\"adf-share-link__label\">{{ 'SHARE.EXPIRES' | translate }}</div>\n                <mat-slide-toggle\n                    #slideToggleExpirationDate\n                    [disabled]=\"!canUpdate\"\n                    color=\"primary\"\n                    data-automation-id=\"adf-expire-toggle\"\n                    aria-label=\"{{ 'SHARE.EXPIRES' | translate }}\"\n                    [checked]=\"time.value\"\n                    (change)=\"onToggleExpirationDate($event)\">\n                </mat-slide-toggle>\n            </div>\n\n            <mat-form-field class=\"adf-full-width adf-float-label\" floatLabel='always'>\n                <mat-datetimepicker-toggle\n                    #matDatetimepickerToggle=\"matDatetimepickerToggle\"\n                    [disabled]=\"time.disabled\"\n                    [for]=\"datetimePicker\"\n                    matSuffix>\n                </mat-datetimepicker-toggle>\n                <mat-datetimepicker\n                    #datetimePicker\n                    (closed)=\"onDatetimepickerClosed()\"\n                    [type]=\"type\"\n                    [timeInterval]=\"1\">\n                </mat-datetimepicker>\n                <input class=\"adf-share-link__input\"\n                    #dateTimePickerInput\n                    matInput\n                    placeholder=\"{{ 'SHARE.EXPIRATION-LABEL' | translate }}\"\n                    [min]=\"minDate\"\n                    formControlName=\"time\"\n                    [matDatetimepicker]=\"datetimePicker\" />\n            </mat-form-field>\n        </form>\n    </mat-dialog-content>\n\n    <div mat-dialog-actions>\n        <button data-automation-id=\"adf-share-dialog-close\" mat-button color=\"primary\" mat-dialog-close>\n            {{ 'SHARE.CLOSE' | translate }}\n        </button>\n    </div>\n</div>\n",
                host: { class: 'adf-share-dialog' },
                encapsulation: i0.ViewEncapsulation.None,
                styles: [".adf-float-label{padding-top:20px}.adf-share-link-dialog .adf-share-link__dialog-content{display:flex;flex-direction:column}.adf-share-link-dialog .adf-share-link__info,.adf-share-link-dialog .adf-share-link__label,.adf-share-link-dialog .adf-share-link__title{color:var(--theme-text-bold-color);font-size:16px;font-stretch:normal;font-style:normal;font-weight:400;letter-spacing:-.4px;line-height:2}.adf-share-link-dialog .adf-share-link__label{flex:1 1 auto}.adf-share-link-dialog .adf-share-link__info{color:var(--theme-text-color);font-size:13px}.adf-share-link-dialog .adf-share-link--row{align-items:center;display:flex;flex-direction:row;flex-wrap:wrap}.adf-share-link-dialog .adf-share-link__input{color:var(--theme-text-bold-color)}.adf-share-link-dialog .adf-input-action{cursor:pointer}.adf-share-link-dialog .adf-full-width{width:100%}.adf-share-link-dialog .mat-form-field-infix{border-top:unset}.adf-share-link-dialog .mat-dialog-actions{justify-content:flex-end}.adf-share-link-dialog .mat-dialog-actions>button{text-transform:uppercase}.adf-share-link-dialog .mat-form-field-flex{align-items:center}"]
            }]
    }], function () { return [{ type: ɵngcc21.AppConfigService }, { type: ɵngcc21.SharedLinksApiService }, { type: ɵngcc3.MatDialogRef }, { type: ɵngcc3.MatDialog }, { type: ɵngcc21.NodesApiService }, { type: ɵngcc21.ContentService }, { type: ɵngcc21.RenditionsService }, { type: undefined, decorators: [{
                type: i0.Inject,
                args: [i2.MAT_DIALOG_DATA]
            }] }]; }, { slideToggleExpirationDate: [{
            type: i0.ViewChild,
            args: ['slideToggleExpirationDate', { static: true }]
        }], dateTimePickerInput: [{
            type: i0.ViewChild,
            args: ['dateTimePickerInput', { static: true }]
        }] }); })();
        return ShareDialogComponent;
    }());
    ShareDialogComponent.ctorParameters = function () { return [
        { type: i1.AppConfigService },
        { type: i1.SharedLinksApiService },
        { type: i2.MatDialogRef },
        { type: i2.MatDialog },
        { type: i1.NodesApiService },
        { type: i1.ContentService },
        { type: i1.RenditionsService },
        { type: undefined, decorators: [{ type: i0.Inject, args: [i2.MAT_DIALOG_DATA,] }] }
    ]; };
    ShareDialogComponent.propDecorators = {
        slideToggleExpirationDate: [{ type: i0.ViewChild, args: ['slideToggleExpirationDate', { static: true },] }],
        dateTimePickerInput: [{ type: i0.ViewChild, args: ['dateTimePickerInput', { static: true },] }]
    };

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var NodeSharedDirective = /** @class */ (function () {
        function NodeSharedDirective(dialog, zone, alfrescoApiService) {
            this.dialog = dialog;
            this.zone = zone;
            this.alfrescoApiService = alfrescoApiService;
            this.isFile = false;
            this.isShared = false;
            this.onDestroy$ = new rxjs.Subject();
        }
        Object.defineProperty(NodeSharedDirective.prototype, "nodesApi", {
            get: function () {
                var _a;
                this._nodesApi = (_a = this._nodesApi) !== null && _a !== void 0 ? _a : new jsApi.NodesApi(this.alfrescoApiService.getInstance());
                return this._nodesApi;
            },
            enumerable: false,
            configurable: true
        });
        NodeSharedDirective.prototype.ngOnDestroy = function () {
            this.onDestroy$.next(true);
            this.onDestroy$.complete();
        };
        NodeSharedDirective.prototype.shareNode = function (nodeEntry) {
            var _this = this;
            if (nodeEntry && nodeEntry.entry && nodeEntry.entry.isFile) {
                var nodeId = nodeEntry.entry['nodeId'] || nodeEntry.entry['guid'];
                if (nodeId) {
                    this.getNodeInfo(nodeId).subscribe(function (node) {
                        _this.openShareLinkDialog(node);
                    });
                }
                else {
                    this.openShareLinkDialog(nodeEntry);
                }
            }
        };
        NodeSharedDirective.prototype.getNodeInfo = function (nodeId) {
            var options = {
                include: ['allowableOperations']
            };
            return rxjs.from(this.nodesApi.getNode(nodeId, options));
        };
        NodeSharedDirective.prototype.openShareLinkDialog = function (node) {
            this.dialog.open(ShareDialogComponent, {
                width: '600px',
                panelClass: 'adf-share-link-dialog',
                data: {
                    node: node,
                    baseShareUrl: this.baseShareUrl
                }
            });
        };
        NodeSharedDirective.prototype.ngOnChanges = function () {
            var _this = this;
            this.zone.onStable
                .pipe(operators.takeUntil(this.onDestroy$))
                .subscribe(function () {
                if (_this.node && _this.node.entry) {
                    _this.isFile = _this.node.entry.isFile;
                    _this.isShared = _this.node.entry.properties ? _this.node.entry.properties['qshare:sharedId'] : false;
                }
            });
        };
        NodeSharedDirective.prototype.onClick = function () {
            if (this.node) {
                this.shareNode(this.node);
            }
        };
NodeSharedDirective.ɵfac = function NodeSharedDirective_Factory(t) { return new (t || NodeSharedDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc3.MatDialog), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc21.AlfrescoApiService)); };
NodeSharedDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: NodeSharedDirective, selectors: [["", "adf-share", ""]], hostBindings: function NodeSharedDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function NodeSharedDirective_click_HostBindingHandler() { return ctx.onClick(); });
    } }, inputs: { node: ["adf-share", "node"], baseShareUrl: "baseShareUrl" }, exportAs: ["adfShare"], features: [ɵngcc0.ɵɵNgOnChangesFeature] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NodeSharedDirective, [{
        type: i0.Directive,
        args: [{
                selector: '[adf-share]',
                exportAs: 'adfShare'
            }]
    }], function () { return [{ type: ɵngcc3.MatDialog }, { type: ɵngcc0.NgZone }, { type: ɵngcc21.AlfrescoApiService }]; }, { onClick: [{
            type: i0.HostListener,
            args: ['click']
        }], node: [{
            type: i0.Input,
            args: ['adf-share']
        }], baseShareUrl: [{
            type: i0.Input
        }] }); })();
        return NodeSharedDirective;
    }());
    NodeSharedDirective.ctorParameters = function () { return [
        { type: i2.MatDialog },
        { type: i0.NgZone },
        { type: i1.AlfrescoApiService }
    ]; };
    NodeSharedDirective.propDecorators = {
        node: [{ type: i0.Input, args: ['adf-share',] }],
        baseShareUrl: [{ type: i0.Input }],
        onClick: [{ type: i0.HostListener, args: ['click',] }]
    };

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var ContentNodeShareModule = /** @class */ (function () {
        function ContentNodeShareModule() {
        }
        ContentNodeShareModule.forRoot = function () {
            return {
                ngModule: ContentNodeShareModule
            };
        };
        ContentNodeShareModule.forChild = function () {
            return {
                ngModule: ContentNodeShareModule
            };
        };
ContentNodeShareModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: ContentNodeShareModule });
ContentNodeShareModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function ContentNodeShareModule_Factory(t) { return new (t || ContentNodeShareModule)(); }, imports: [[
            i1.CoreModule,
            common.CommonModule,
            MaterialModule
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ContentNodeShareModule, { declarations: [ShareDialogComponent, NodeSharedDirective], imports: [ɵngcc21.CoreModule, ɵngcc23.CommonModule, MaterialModule], exports: [ShareDialogComponent, NodeSharedDirective] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ContentNodeShareModule, [{
        type: i0.NgModule,
        args: [{
                imports: [
                    i1.CoreModule,
                    common.CommonModule,
                    MaterialModule
                ],
                declarations: [
                    ShareDialogComponent,
                    NodeSharedDirective
                ],
                exports: [
                    ShareDialogComponent,
                    NodeSharedDirective
                ]
            }]
    }], function () { return []; }, null); })();
        return ContentNodeShareModule;
    }());

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var TreeBaseNode = /** @class */ (function () {
        function TreeBaseNode(nodeEntry, level, expandable) {
            this.expandable = true;
            this.name = nodeEntry.entry.name;
            this.nodeId = nodeEntry.entry.id;
            this.level = level ? level : 0;
            this.expandable = expandable ? expandable : true;
            this.node = nodeEntry ? new jsApi.NodeEntry(nodeEntry) : undefined;
        }
        return TreeBaseNode;
    }());

    var TreeViewService = /** @class */ (function () {
        function TreeViewService(nodeApi) {
            this.nodeApi = nodeApi;
        }
        TreeViewService.prototype.getTreeNodes = function (nodeId) {
            return this.nodeApi.getNodeChildren(nodeId)
                .pipe(operators.map(function (nodePage) {
                return nodePage.list.entries.filter(function (node) { return node.entry.isFolder ? node : null; });
            }), operators.map(function (nodes) { return nodes.map(function (node) { return new TreeBaseNode(node); }); }));
        };
TreeViewService.ɵfac = function TreeViewService_Factory(t) { return new (t || TreeViewService)(ɵngcc0.ɵɵinject(ɵngcc21.NodesApiService)); };
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TreeViewService, [{
        type: i0.Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc21.NodesApiService }]; }, null); })();
        return TreeViewService;
    }());
    TreeViewService.ɵprov = i0.ɵɵdefineInjectable({ factory: function TreeViewService_Factory() { return new TreeViewService(i0.ɵɵinject(i1.NodesApiService)); }, token: TreeViewService, providedIn: "root" });
    TreeViewService.ctorParameters = function () { return [
        { type: i1.NodesApiService }
    ]; };

    var TreeViewDataSource = /** @class */ (function () {
        function TreeViewDataSource(treeControl, treeViewService) {
            var _this = this;
            this.treeControl = treeControl;
            this.treeViewService = treeViewService;
            this.dataChange = new rxjs.BehaviorSubject([]);
            this.childrenSubscription = null;
            this.changeSubscription = null;
            this.dataChange.subscribe(function (treeNodes) { return _this.treeNodes = treeNodes; });
        }
        Object.defineProperty(TreeViewDataSource.prototype, "data", {
            get: function () {
                return this.treeNodes;
            },
            set: function (value) {
                this.treeControl.dataNodes = value;
                this.dataChange.next(value);
            },
            enumerable: false,
            configurable: true
        });
        TreeViewDataSource.prototype.connect = function (collectionViewer) {
            var _this = this;
            this.changeSubscription = this.treeControl.expansionModel.changed.subscribe(function (change) {
                if (change.added &&
                    change.added.length > 0) {
                    _this.expandTreeNodes(change);
                }
                else if (change.removed) {
                    _this.reduceTreeNodes(change);
                }
            });
            return rxjs.merge(collectionViewer.viewChange, this.dataChange).pipe(operators.map(function () { return _this.data; }));
        };
        TreeViewDataSource.prototype.disconnect = function () {
            if (this.childrenSubscription) {
                this.childrenSubscription.unsubscribe();
            }
            if (this.changeSubscription) {
                this.changeSubscription.unsubscribe();
            }
        };
        TreeViewDataSource.prototype.expandTreeNodes = function (change) {
            var _this = this;
            change.added.forEach(function (node) { return _this.expandNode(node); });
        };
        TreeViewDataSource.prototype.reduceTreeNodes = function (change) {
            var _this = this;
            change.removed.slice().reverse().forEach(function (node) { return _this.toggleNode(node); });
        };
        TreeViewDataSource.prototype.expandNode = function (node) {
            var _this = this;
            this.childrenSubscription = this.treeViewService.getTreeNodes(node.nodeId)
                .subscribe(function (children) {
                var _a;
                var index = _this.data.indexOf(node);
                if (!children || index < 0) {
                    node.expandable = false;
                    return;
                }
                var nodes = children.map(function (actualNode) {
                    actualNode.level = node.level + 1;
                    return actualNode;
                });
                (_a = _this.data).splice.apply(_a, __spread([index + 1, 0], nodes));
                _this.dataChange.next(_this.data);
            });
        };
        TreeViewDataSource.prototype.toggleNode = function (node) {
            var index = this.data.indexOf(node);
            var count = 0;
            for (var i = index + 1; i < this.data.length
                && this.data[i].level > node.level; i++, count++) { }
            this.data.splice(index + 1, count);
            this.dataChange.next(this.data);
        };
TreeViewDataSource.ɵfac = function TreeViewDataSource_Factory(t) { return new (t || TreeViewDataSource)(ɵngcc0.ɵɵinject(ɵngcc38.FlatTreeControl), ɵngcc0.ɵɵinject(TreeViewService)); };
TreeViewDataSource.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: TreeViewDataSource, factory: function (t) { return TreeViewDataSource.ɵfac(t); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TreeViewDataSource, [{
        type: i0.Injectable
    }], function () { return [{ type: ɵngcc38.FlatTreeControl }, { type: TreeViewService }]; }, null); })();
        return TreeViewDataSource;
    }());
    TreeViewDataSource.ctorParameters = function () { return [
        { type: tree$1.FlatTreeControl },
        { type: TreeViewService }
    ]; };

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var TreeViewComponent = /** @class */ (function () {
        function TreeViewComponent(treeViewService) {
            this.treeViewService = treeViewService;
            this.nodeClicked = new i0.EventEmitter();
            this.error = new i0.EventEmitter();
            this.getLevel = function (node) { return node.level; };
            this.isExpandable = function (node) { return node.expandable; };
            this.hasChild = function (_, nodeData) { return nodeData.expandable; };
            this.treeControl = new tree$1.FlatTreeControl(this.getLevel, this.isExpandable);
            this.dataSource = new TreeViewDataSource(this.treeControl, this.treeViewService);
        }
        TreeViewComponent.prototype.ngOnChanges = function (changes) {
            if (changes['nodeId'] && changes['nodeId'].currentValue &&
                changes['nodeId'].currentValue !== changes['nodeId'].previousValue) {
                this.loadTreeNode();
            }
            else {
                this.dataSource.data = [];
            }
        };
        TreeViewComponent.prototype.onNodeClicked = function (node) {
            this.nodeClicked.emit(node);
        };
        TreeViewComponent.prototype.loadTreeNode = function () {
            var _this = this;
            this.treeViewService.getTreeNodes(this.nodeId)
                .subscribe(function (treeNode) {
                _this.dataSource.data = treeNode;
            }, function (error) { return _this.error.emit(error); });
        };
TreeViewComponent.ɵfac = function TreeViewComponent_Factory(t) { return new (t || TreeViewComponent)(ɵngcc0.ɵɵdirectiveInject(TreeViewService)); };
TreeViewComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: TreeViewComponent, selectors: [["adf-tree-view-list"]], inputs: { nodeId: "nodeId" }, outputs: { nodeClicked: "nodeClicked", error: "error" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 3, vars: 2, consts: [["class", "adf-tree-view-main", 3, "dataSource", "treeControl", 4, "ngIf", "ngIfElse"], ["missingNodeId", ""], [1, "adf-tree-view-main", 3, "dataSource", "treeControl"], ["class", "adf-tree-view-node", "matTreeNodePadding", "", 3, "id", "matTreeNodePaddingIndent", 4, "matTreeNodeDef"], ["class", "adf-tree-view-node", "matTreeNodePadding", "", 3, "id", "matTreeNodePaddingIndent", 4, "matTreeNodeDef", "matTreeNodeDefWhen"], ["matTreeNodePadding", "", 1, "adf-tree-view-node", 3, "id", "matTreeNodePaddingIndent"], ["matTreeNodeToggle", "", "mat-icon-button", "", 3, "id", "click"], [1, "adf-tree-view-icon"], ["matTreeNodeToggle", "", 1, "adf-tree-view-label", 3, "click"], ["id", "adf-tree-view-missing-node"]], template: function TreeViewComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, TreeViewComponent_mat_tree_0_Template, 3, 3, "mat-tree", 0);
        ɵngcc0.ɵɵtemplate(1, TreeViewComponent_ng_template_1_Template, 3, 3, "ng-template", null, 1, ɵngcc0.ɵɵtemplateRefExtractor);
    } if (rf & 2) {
        var _r1 = ɵngcc0.ɵɵreference(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.nodeId)("ngIfElse", _r1);
    } }, directives: [ɵngcc23.NgIf, ɵngcc19.MatTree, ɵngcc19.MatTreeNodeDef, ɵngcc19.MatTreeNode, ɵngcc19.MatTreeNodePadding, ɵngcc1.MatButton, ɵngcc19.MatTreeNodeToggle, ɵngcc4.MatIcon], pipes: [ɵngcc25.TranslatePipe], styles: [".adf-tree-view-icon[_ngcontent-%COMP%]{color:#d9e022}.adf-tree-view-node.mat-tree-node[_ngcontent-%COMP%]{align-items:baseline;font-size:12px;min-height:40px}.adf-tree-view-label[_ngcontent-%COMP%]{cursor:pointer}"] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TreeViewComponent, [{
        type: i0.Component,
        args: [{
                selector: 'adf-tree-view-list',
                template: "<mat-tree class=\"adf-tree-view-main\" [dataSource]=\"dataSource\"\n          [treeControl]=\"treeControl\" *ngIf=\"nodeId; else missingNodeId\">\n    <mat-tree-node class=\"adf-tree-view-node\"\n        *matTreeNodeDef=\"let treeNode\" id=\"{{treeNode.name + '-tree-node'}}\"\n        matTreeNodePadding [matTreeNodePaddingIndent]=\"15\">\n        {{treeNode.name}}\n    </mat-tree-node>\n    <mat-tree-node class=\"adf-tree-view-node\"\n        id=\"{{treeNode.name + '-tree-child-node'}}\" *matTreeNodeDef=\"let treeNode; when: hasChild\"\n        matTreeNodePadding [matTreeNodePaddingIndent]=\"15\">\n        <button matTreeNodeToggle id=\"{{'button-'+treeNode.name}}\" (click)=\"onNodeClicked(treeNode.node)\"\n                mat-icon-button [attr.aria-label]=\"'ADF-TREE-VIEW.ACCESSIBILITY.ARIA_LABEL' | translate: {\n                    name:  treeNode.name\n                }\">\n            <mat-icon class=\"adf-tree-view-icon\">\n                {{treeControl.isExpanded(treeNode) ? 'folder_open' : 'folder'}}\n            </mat-icon>\n        </button>\n        <span class=\"adf-tree-view-label\" matTreeNodeToggle (click)=\"onNodeClicked(treeNode.node)\">{{treeNode.name}}</span>\n    </mat-tree-node>\n</mat-tree>\n<ng-template #missingNodeId>\n    <div id=\"adf-tree-view-missing-node\">\n        {{'ADF-TREE-VIEW.MISSING-ID' | translate}}\n    </div>\n</ng-template>\n",
                styles: [".adf-tree-view-icon{color:#d9e022}.adf-tree-view-node.mat-tree-node{align-items:baseline;font-size:12px;min-height:40px}.adf-tree-view-label{cursor:pointer}"]
            }]
    }], function () { return [{ type: TreeViewService }]; }, { nodeClicked: [{
            type: i0.Output
        }], error: [{
            type: i0.Output
        }], nodeId: [{
            type: i0.Input
        }] }); })();
        return TreeViewComponent;
    }());
    TreeViewComponent.ctorParameters = function () { return [
        { type: TreeViewService }
    ]; };
    TreeViewComponent.propDecorators = {
        nodeId: [{ type: i0.Input }],
        nodeClicked: [{ type: i0.Output }],
        error: [{ type: i0.Output }]
    };

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var TreeViewModule = /** @class */ (function () {
        function TreeViewModule() {
        }
TreeViewModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: TreeViewModule });
TreeViewModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function TreeViewModule_Factory(t) { return new (t || TreeViewModule)(); }, imports: [[
            common.CommonModule,
            MaterialModule,
            core$1.TranslateModule
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(TreeViewModule, { declarations: [TreeViewComponent], imports: [ɵngcc23.CommonModule, MaterialModule, ɵngcc25.TranslateModule], exports: [TreeViewComponent] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TreeViewModule, [{
        type: i0.NgModule,
        args: [{
                imports: [
                    common.CommonModule,
                    MaterialModule,
                    core$1.TranslateModule
                ],
                declarations: [
                    TreeViewComponent
                ],
                exports: [
                    TreeViewComponent
                ]
            }]
    }], function () { return []; }, null); })();
        return TreeViewModule;
    }());

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    var GroupService = /** @class */ (function () {
        function GroupService(alfrescoApiService) {
            this.alfrescoApiService = alfrescoApiService;
        }
        Object.defineProperty(GroupService.prototype, "groupsApi", {
            get: function () {
                var _a;
                this._groupsApi = (_a = this._groupsApi) !== null && _a !== void 0 ? _a : new jsApi.GroupsApi(this.alfrescoApiService.getInstance());
                return this._groupsApi;
            },
            enumerable: false,
            configurable: true
        });
        GroupService.prototype.listAllGroupMembershipsForPerson = function (personId, opts, accumulator) {
            if (accumulator === void 0) { accumulator = []; }
            return __awaiter(this, void 0, void 0, function () {
                var groupsPaginated, skip;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0: return [4 /*yield*/, this.groupsApi.listGroupMembershipsForPerson(personId, opts)];
                        case 1:
                            groupsPaginated = _b.sent();
                            accumulator = __spread(accumulator, groupsPaginated.list.entries);
                            if (groupsPaginated.list.pagination.hasMoreItems) {
                                skip = groupsPaginated.list.pagination.skipCount + groupsPaginated.list.pagination.count;
                                return [2 /*return*/, this.listAllGroupMembershipsForPerson(personId, {
                                        maxItems: opts.maxItems,
                                        skipCount: skip
                                    }, accumulator)];
                            }
                            else {
                                return [2 /*return*/, accumulator];
                            }
                            return [2 /*return*/];
                    }
                });
            });
        };
GroupService.ɵfac = function GroupService_Factory(t) { return new (t || GroupService)(ɵngcc0.ɵɵinject(ɵngcc21.AlfrescoApiService)); };
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(GroupService, [{
        type: i0.Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc21.AlfrescoApiService }]; }, null); })();
        return GroupService;
    }());
    GroupService.ɵprov = i0.ɵɵdefineInjectable({ factory: function GroupService_Factory() { return new GroupService(i0.ɵɵinject(i1.AlfrescoApiService)); }, token: GroupService, providedIn: "root" });
    GroupService.ctorParameters = function () { return [
        { type: i1.AlfrescoApiService }
    ]; };

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    var AspectListComponent = /** @class */ (function () {
        function AspectListComponent(aspectListService, nodeApiService) {
            this.aspectListService = aspectListService;
            this.nodeApiService = nodeApiService;
            this.nodeId = '';
            this.valueChanged = new i0.EventEmitter();
            this.propertyColumns = ['name', 'title', 'dataType'];
            this.aspects$ = null;
            this.nodeAspects = [];
            this.nodeAspectStatus = [];
            this.hasEqualAspect = true;
            this.onDestroy$ = new rxjs.Subject();
        }
        AspectListComponent.prototype.ngOnDestroy = function () {
            this.onDestroy$.next(true);
            this.onDestroy$.complete();
        };
        AspectListComponent.prototype.ngOnInit = function () {
            var _this = this;
            if (this.nodeId) {
                var node$ = this.nodeApiService.getNode(this.nodeId);
                var customAspect$ = this.aspectListService.getCustomAspects()
                    .pipe(operators.map(function (customAspects) { return customAspects.flatMap(function (customAspect) { return customAspect.entry.id; }); }));
                this.aspects$ = rxjs.zip(node$, customAspect$).pipe(operators.tap(function (_d) {
                    var _e = __read(_d, 2), node = _e[0], customAspects = _e[1];
                    _this.nodeAspects = node.aspectNames.filter(function (aspect) { return _this.aspectListService.getVisibleAspects().includes(aspect) || customAspects.includes(aspect); });
                    _this.nodeAspectStatus = __spread(_this.nodeAspects);
                    _this.valueChanged.emit(_this.nodeAspects);
                }), operators.concatMap(function () { return _this.aspectListService.getAspects(); }), operators.takeUntil(this.onDestroy$));
            }
            else {
                this.aspects$ = this.aspectListService.getAspects()
                    .pipe(operators.takeUntil(this.onDestroy$));
            }
        };
        AspectListComponent.prototype.onCheckBoxClick = function (event) {
            event.stopImmediatePropagation();
        };
        AspectListComponent.prototype.onChange = function (change, prefixedName) {
            if (change.checked) {
                this.nodeAspects.push(prefixedName);
            }
            else {
                this.nodeAspects.splice(this.nodeAspects.indexOf(prefixedName), 1);
            }
            this.updateEqualityOfAspectList();
            this.valueChanged.emit(this.nodeAspects);
        };
        AspectListComponent.prototype.reset = function () {
            var _d;
            if (this.nodeAspectStatus && this.nodeAspectStatus.length > 0) {
                (_d = this.nodeAspects).splice.apply(_d, __spread([0, this.nodeAspects.length], this.nodeAspectStatus));
                this.hasEqualAspect = true;
                this.valueChanged.emit(this.nodeAspects);
            }
            else {
                this.clear();
            }
        };
        AspectListComponent.prototype.clear = function () {
            this.nodeAspects = [];
            this.updateEqualityOfAspectList();
            this.valueChanged.emit(this.nodeAspects);
        };
        AspectListComponent.prototype.getId = function (aspect) {
            var _a, _b, _c;
            return ((_a = aspect === null || aspect === void 0 ? void 0 : aspect.entry) === null || _a === void 0 ? void 0 : _a.title) ? (_b = aspect === null || aspect === void 0 ? void 0 : aspect.entry) === null || _b === void 0 ? void 0 : _b.title : (_c = aspect === null || aspect === void 0 ? void 0 : aspect.entry) === null || _c === void 0 ? void 0 : _c.id.replace(':', '-');
        };
        AspectListComponent.prototype.getTitle = function (aspect) {
            var _a, _b, _c;
            return ((_a = aspect === null || aspect === void 0 ? void 0 : aspect.entry) === null || _a === void 0 ? void 0 : _a.title) ? (_b = aspect === null || aspect === void 0 ? void 0 : aspect.entry) === null || _b === void 0 ? void 0 : _b.title : (_c = aspect === null || aspect === void 0 ? void 0 : aspect.entry) === null || _c === void 0 ? void 0 : _c.id;
        };
        AspectListComponent.prototype.updateEqualityOfAspectList = function () {
            var _this = this;
            if (this.nodeAspectStatus.length !== this.nodeAspects.length) {
                this.hasEqualAspect = false;
            }
            else {
                this.hasEqualAspect = this.nodeAspects.every(function (aspect) { return _this.nodeAspectStatus.includes(aspect); });
            }
        };
AspectListComponent.ɵfac = function AspectListComponent_Factory(t) { return new (t || AspectListComponent)(ɵngcc0.ɵɵdirectiveInject(AspectListService), ɵngcc0.ɵɵdirectiveInject(ɵngcc21.NodesApiService)); };
AspectListComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: AspectListComponent, selectors: [["adf-aspect-list"]], inputs: { nodeId: "nodeId" }, outputs: { valueChanged: "valueChanged" }, decls: 4, vars: 4, consts: [["id", "aspect-list-container", "class", "adf-aspect-list-container", 4, "ngIf", "ngIfElse"], ["loading", ""], ["id", "aspect-list-container", 1, "adf-aspect-list-container"], [1, "adf-accordion-aspect-list"], [3, "id", 4, "ngFor", "ngForOf"], [3, "id"], [1, "adf-aspect-list-check-button", 3, "id", "checked", "click", "change"], [1, "adf-aspect-list-element-title"], [3, "id", "matTooltip"], [1, "adf-property-paragraph", 3, "id"], ["mat-table", "", "class", "adf-aspect-property-table", 3, "dataSource", "id", 4, "ngIf"], ["mat-table", "", 1, "adf-aspect-property-table", 3, "dataSource", "id"], ["matColumnDef", "name"], ["mat-header-cell", "", 4, "matHeaderCellDef"], ["mat-cell", "", 4, "matCellDef"], ["matColumnDef", "title"], ["matColumnDef", "dataType"], ["mat-header-row", "", 4, "matHeaderRowDef"], ["mat-row", "", 4, "matRowDef", "matRowDefColumns"], ["mat-header-cell", ""], ["mat-cell", ""], ["mat-header-row", ""], ["mat-row", ""], [1, "adf-aspect-list-spinner"], ["id", "adf-aspect-spinner"]], template: function AspectListComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, AspectListComponent_div_0_Template, 3, 1, "div", 0);
        ɵngcc0.ɵɵpipe(1, "async");
        ɵngcc0.ɵɵtemplate(2, AspectListComponent_ng_template_2_Template, 2, 0, "ng-template", null, 1, ɵngcc0.ɵɵtemplateRefExtractor);
    } if (rf & 2) {
        var _r1 = ɵngcc0.ɵɵreference(3);
        ɵngcc0.ɵɵproperty("ngIf", ɵngcc0.ɵɵpipeBind1(1, 2, ctx.aspects$))("ngIfElse", _r1);
    } }, directives: [ɵngcc23.NgIf, ɵngcc12.MatAccordion, ɵngcc23.NgForOf, ɵngcc12.MatExpansionPanel, ɵngcc12.MatExpansionPanelHeader, ɵngcc12.MatExpansionPanelTitle, ɵngcc14.MatCheckbox, ɵngcc12.MatExpansionPanelDescription, ɵngcc24.MatTooltip, ɵngcc35.MatTable, ɵngcc35.MatColumnDef, ɵngcc35.MatHeaderCellDef, ɵngcc35.MatCellDef, ɵngcc35.MatHeaderRowDef, ɵngcc35.MatRowDef, ɵngcc35.MatHeaderCell, ɵngcc35.MatCell, ɵngcc35.MatHeaderRow, ɵngcc35.MatRow, ɵngcc8.MatSpinner], pipes: [ɵngcc23.AsyncPipe, ɵngcc25.TranslatePipe], styles: [".adf-aspect-list-spinner{align-items:center;display:flex;justify-content:center;min-height:400px}.adf-aspect-list-container{border:1px solid var(--theme-border-color);height:400px;overflow:auto;padding-top:3px}.adf-aspect-list-container .adf-aspect-list-check-button{align-items:center;display:flex;margin-right:5px}.adf-aspect-list-container .adf-aspect-list-element-title{align-items:center;display:flex}.adf-aspect-list-container .adf-accordion-aspect-list .mat-expansion-panel-spacing{margin:0}.adf-aspect-list-container .adf-accordion-aspect-list .mat-expansion-panel-header{font-size:smaller}.adf-aspect-list-container .adf-accordion-aspect-list .mat-expansion-panel-header-title{flex:1 1 0}.adf-aspect-list-container .adf-accordion-aspect-list .mat-expansion-panel-header-description{align-items:center;flex:1 1 0;justify-content:flex-start;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.adf-aspect-property-table{width:100%}.adf-aspect-property-table .mat-column-name{width:15%}.adf-aspect-property-table .mat-column-description{width:65%}.adf-aspect-property-table .mat-column-type{padding-left:10px;width:20%}"], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AspectListComponent, [{
        type: i0.Component,
        args: [{
                selector: 'adf-aspect-list',
                template: "<div id=\"aspect-list-container\" class=\"adf-aspect-list-container\" *ngIf=\"aspects$ | async as aspects; else loading\">\n    <mat-accordion class=\"adf-accordion-aspect-list\">\n        <mat-expansion-panel *ngFor=\"let aspect of aspects; let colIndex = index\" [id]=\"'aspect-list-'+getId(aspect)\">\n            <mat-expansion-panel-header [id]=\"'aspect-list-'+(getId(aspect))+'header'\">\n                <mat-panel-title>\n                    <mat-checkbox class=\"adf-aspect-list-check-button\" [id]=\"'aspect-list-'+colIndex+'-check'\"\n                                  [checked]=\"nodeAspects?.includes(aspect?.entry?.id)\"\n                                  (click)=\"onCheckBoxClick($event)\"\n                                  (change)=\"onChange($event, aspect?.entry?.id)\">\n                    </mat-checkbox>\n                    <p class=\"adf-aspect-list-element-title\">{{getTitle(aspect)}}</p>\n                </mat-panel-title>\n                <mat-panel-description [id]=\"'aspect-list-'+colIndex+'-title'\"\n                                        [matTooltip]=\"getTitle(aspect)\">\n                    {{getTitle(aspect)}}\n                </mat-panel-description>\n            </mat-expansion-panel-header>\n            <p class=\"adf-property-paragraph\" [id]=\"'aspect-list-'+colIndex+'-description'\"> {{aspect?.entry?.description}}</p>\n\n            <table mat-table [dataSource]=\"aspect?.entry?.properties\" *ngIf=\"aspect?.entry?.properties?.length > 0\" class=\"adf-aspect-property-table\" [id]=\"'aspect-list-'+colIndex+'-properties-table'\">\n                <ng-container matColumnDef=\"name\">\n                  <th mat-header-cell *matHeaderCellDef> {{'ADF-ASPECT-LIST.PROPERTY_NAME' | translate}} </th>\n                  <td mat-cell *matCellDef=\"let property\"> {{property.id}} </td>\n                </ng-container>\n                <ng-container matColumnDef=\"title\">\n                  <th mat-header-cell *matHeaderCellDef> {{'ADF-ASPECT-LIST.DESCRIPTION' | translate}} </th>\n                  <td mat-cell *matCellDef=\"let property\"> {{property.title}} </td>\n                </ng-container>\n                <ng-container matColumnDef=\"dataType\">\n                  <th mat-header-cell *matHeaderCellDef> {{'ADF-ASPECT-LIST.DATA_TYPE' | translate}} </th>\n                  <td mat-cell *matCellDef=\"let property\"> {{property.dataType}} </td>\n                </ng-container>\n                <tr mat-header-row *matHeaderRowDef=\"propertyColumns\"></tr>\n                <tr mat-row *matRowDef=\"let row; columns: propertyColumns;\"></tr>\n              </table>\n        </mat-expansion-panel>\n    </mat-accordion>\n</div>\n\n<ng-template #loading>\n    <div class=\"adf-aspect-list-spinner\">\n       <mat-spinner id=\"adf-aspect-spinner\"></mat-spinner>\n    </div>\n</ng-template>\n",
                encapsulation: i0.ViewEncapsulation.None,
                styles: [".adf-aspect-list-spinner{align-items:center;display:flex;justify-content:center;min-height:400px}.adf-aspect-list-container{border:1px solid var(--theme-border-color);height:400px;overflow:auto;padding-top:3px}.adf-aspect-list-container .adf-aspect-list-check-button{align-items:center;display:flex;margin-right:5px}.adf-aspect-list-container .adf-aspect-list-element-title{align-items:center;display:flex}.adf-aspect-list-container .adf-accordion-aspect-list .mat-expansion-panel-spacing{margin:0}.adf-aspect-list-container .adf-accordion-aspect-list .mat-expansion-panel-header{font-size:smaller}.adf-aspect-list-container .adf-accordion-aspect-list .mat-expansion-panel-header-title{flex:1 1 0}.adf-aspect-list-container .adf-accordion-aspect-list .mat-expansion-panel-header-description{align-items:center;flex:1 1 0;justify-content:flex-start;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.adf-aspect-property-table{width:100%}.adf-aspect-property-table .mat-column-name{width:15%}.adf-aspect-property-table .mat-column-description{width:65%}.adf-aspect-property-table .mat-column-type{padding-left:10px;width:20%}"]
            }]
    }], function () { return [{ type: AspectListService }, { type: ɵngcc21.NodesApiService }]; }, { nodeId: [{
            type: i0.Input
        }], valueChanged: [{
            type: i0.Output
        }] }); })();
        return AspectListComponent;
    }());
    AspectListComponent.ctorParameters = function () { return [
        { type: AspectListService },
        { type: i1.NodesApiService }
    ]; };
    AspectListComponent.propDecorators = {
        nodeId: [{ type: i0.Input }],
        valueChanged: [{ type: i0.Output }]
    };

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var AspectListModule = /** @class */ (function () {
        function AspectListModule() {
        }
AspectListModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: AspectListModule });
AspectListModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function AspectListModule_Factory(t) { return new (t || AspectListModule)(); }, imports: [[
            common.CommonModule,
            table.MatTableModule,
            expansion.MatExpansionModule,
            checkbox.MatCheckboxModule,
            i1.PipeModule,
            core$1.TranslateModule,
            i2.MatDialogModule,
            button.MatButtonModule,
            tooltip.MatTooltipModule,
            progressSpinner.MatProgressSpinnerModule
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(AspectListModule, { declarations: [AspectListComponent, AspectListDialogComponent], imports: [ɵngcc23.CommonModule, ɵngcc35.MatTableModule, ɵngcc12.MatExpansionModule, ɵngcc14.MatCheckboxModule, ɵngcc21.PipeModule, ɵngcc25.TranslateModule, ɵngcc3.MatDialogModule, ɵngcc1.MatButtonModule, ɵngcc24.MatTooltipModule, ɵngcc8.MatProgressSpinnerModule], exports: [AspectListComponent, AspectListDialogComponent] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AspectListModule, [{
        type: i0.NgModule,
        args: [{
                imports: [
                    common.CommonModule,
                    table.MatTableModule,
                    expansion.MatExpansionModule,
                    checkbox.MatCheckboxModule,
                    i1.PipeModule,
                    core$1.TranslateModule,
                    i2.MatDialogModule,
                    button.MatButtonModule,
                    tooltip.MatTooltipModule,
                    progressSpinner.MatProgressSpinnerModule
                ],
                exports: [
                    AspectListComponent,
                    AspectListDialogComponent
                ],
                declarations: [
                    AspectListComponent,
                    AspectListDialogComponent
                ]
            }]
    }], function () { return []; }, null); })();
        return AspectListModule;
    }());

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var ContentTypeModule = /** @class */ (function () {
        function ContentTypeModule() {
        }
ContentTypeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: ContentTypeModule });
ContentTypeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function ContentTypeModule_Factory(t) { return new (t || ContentTypeModule)(); }, imports: [[
            common.CommonModule,
            table.MatTableModule,
            expansion.MatExpansionModule,
            checkbox.MatCheckboxModule,
            core$1.TranslateModule,
            i2.MatDialogModule,
            button.MatButtonModule
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ContentTypeModule, { declarations: [ContentTypeDialogComponent], imports: [ɵngcc23.CommonModule, ɵngcc35.MatTableModule, ɵngcc12.MatExpansionModule, ɵngcc14.MatCheckboxModule, ɵngcc25.TranslateModule, ɵngcc3.MatDialogModule, ɵngcc1.MatButtonModule], exports: [ContentTypeDialogComponent] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ContentTypeModule, [{
        type: i0.NgModule,
        args: [{
                imports: [
                    common.CommonModule,
                    table.MatTableModule,
                    expansion.MatExpansionModule,
                    checkbox.MatCheckboxModule,
                    core$1.TranslateModule,
                    i2.MatDialogModule,
                    button.MatButtonModule
                ],
                exports: [
                    ContentTypeDialogComponent
                ],
                declarations: [
                    ContentTypeDialogComponent
                ]
            }]
    }], function () { return []; }, null); })();
        return ContentTypeModule;
    }());

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var ɵ0$2 = {
        name: 'adf-content-services',
        source: 'assets/adf-content-services'
    };
    var ContentModule = /** @class */ (function () {
        function ContentModule() {
        }
        ContentModule.forRoot = function () {
            return {
                ngModule: ContentModule,
                providers: [
                    {
                        provide: i1.TRANSLATION_PROVIDER,
                        multi: true,
                        useValue: {
                            name: 'adf-content-services',
                            source: 'assets/adf-content-services'
                        }
                    }
                ]
            };
        };
        ContentModule.forChild = function () {
            return {
                ngModule: ContentModule
            };
        };
ContentModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: ContentModule });
ContentModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function ContentModule_Factory(t) { return new (t || ContentModule)(); }, providers: [
        {
            provide: i1.TRANSLATION_PROVIDER,
            multi: true,
            useValue: ɵ0$2
        }
    ], imports: [[
            i1.CoreModule,
            SocialModule,
            TagModule,
            common.CommonModule,
            WebScriptModule,
            forms.FormsModule,
            forms.ReactiveFormsModule,
            DialogModule,
            SearchModule,
            DocumentListModule,
            UploadModule,
            MaterialModule,
            SitesDropdownModule,
            BreadcrumbModule,
            ContentNodeSelectorModule,
            ContentNodeShareModule,
            ContentMetadataModule,
            FolderDirectiveModule,
            ContentDirectiveModule,
            PermissionManagerModule,
            VersionManagerModule,
            TreeViewModule,
            ContentTypeModule,
            AspectListModule
        ], SocialModule, TagModule, WebScriptModule, DocumentListModule, UploadModule, SearchModule, SitesDropdownModule, BreadcrumbModule, ContentNodeSelectorModule, ContentNodeShareModule, ContentMetadataModule, DialogModule, FolderDirectiveModule, ContentDirectiveModule, PermissionManagerModule, VersionManagerModule, TreeViewModule, AspectListModule, ContentTypeModule] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ContentModule, { imports: [ɵngcc21.CoreModule, SocialModule, TagModule, ɵngcc23.CommonModule, WebScriptModule, ɵngcc26.FormsModule, ɵngcc26.ReactiveFormsModule, DialogModule, SearchModule, DocumentListModule, UploadModule, MaterialModule, SitesDropdownModule, BreadcrumbModule, ContentNodeSelectorModule, ContentNodeShareModule, ContentMetadataModule, FolderDirectiveModule, ContentDirectiveModule, PermissionManagerModule, VersionManagerModule, TreeViewModule, ContentTypeModule, AspectListModule], exports: [SocialModule, TagModule, WebScriptModule, DocumentListModule, UploadModule, SearchModule, SitesDropdownModule, BreadcrumbModule, ContentNodeSelectorModule, ContentNodeShareModule, ContentMetadataModule, DialogModule, FolderDirectiveModule, ContentDirectiveModule, PermissionManagerModule, VersionManagerModule, TreeViewModule, AspectListModule, ContentTypeModule] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ContentModule, [{
        type: i0.NgModule,
        args: [{
                imports: [
                    i1.CoreModule,
                    SocialModule,
                    TagModule,
                    common.CommonModule,
                    WebScriptModule,
                    forms.FormsModule,
                    forms.ReactiveFormsModule,
                    DialogModule,
                    SearchModule,
                    DocumentListModule,
                    UploadModule,
                    MaterialModule,
                    SitesDropdownModule,
                    BreadcrumbModule,
                    ContentNodeSelectorModule,
                    ContentNodeShareModule,
                    ContentMetadataModule,
                    FolderDirectiveModule,
                    ContentDirectiveModule,
                    PermissionManagerModule,
                    VersionManagerModule,
                    TreeViewModule,
                    ContentTypeModule,
                    AspectListModule
                ],
                providers: [
                    {
                        provide: i1.TRANSLATION_PROVIDER,
                        multi: true,
                        useValue: ɵ0$2
                    }
                ],
                exports: [
                    SocialModule,
                    TagModule,
                    WebScriptModule,
                    DocumentListModule,
                    UploadModule,
                    SearchModule,
                    SitesDropdownModule,
                    BreadcrumbModule,
                    ContentNodeSelectorModule,
                    ContentNodeShareModule,
                    ContentMetadataModule,
                    DialogModule,
                    FolderDirectiveModule,
                    ContentDirectiveModule,
                    PermissionManagerModule,
                    VersionManagerModule,
                    TreeViewModule,
                    AspectListModule,
                    ContentTypeModule
                ]
            }]
    }], function () { return []; }, null); })();
        return ContentModule;
    }());

    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    exports.AddPermissionComponent = AddPermissionComponent;
    exports.AddPermissionDialogComponent = AddPermissionDialogComponent;
    exports.AddPermissionPanelComponent = AddPermissionPanelComponent;
    exports.AspectListComponent = AspectListComponent;
    exports.AspectListDialogComponent = AspectListDialogComponent;
    exports.AspectListModule = AspectListModule;
    exports.AspectListService = AspectListService;
    exports.AspectOrientedConfigService = AspectOrientedConfigService;
    exports.BasicPropertiesService = BasicPropertiesService;
    exports.BreadcrumbComponent = BreadcrumbComponent;
    exports.BreadcrumbModule = BreadcrumbModule;
    exports.ConfirmDialogComponent = ConfirmDialogComponent;
    exports.ContentActionComponent = ContentActionComponent;
    exports.ContentActionListComponent = ContentActionListComponent;
    exports.ContentActionModel = ContentActionModel;
    exports.ContentDirectiveModule = ContentDirectiveModule;
    exports.ContentInfo = ContentInfo;
    exports.ContentMetadataCardComponent = ContentMetadataCardComponent;
    exports.ContentMetadataComponent = ContentMetadataComponent;
    exports.ContentMetadataConfigFactory = ContentMetadataConfigFactory;
    exports.ContentMetadataModule = ContentMetadataModule;
    exports.ContentMetadataService = ContentMetadataService;
    exports.ContentModule = ContentModule;
    exports.ContentNodeDialogService = ContentNodeDialogService;
    exports.ContentNodeSelectorComponent = ContentNodeSelectorComponent;
    exports.ContentNodeSelectorModule = ContentNodeSelectorModule;
    exports.ContentNodeSelectorPanelComponent = ContentNodeSelectorPanelComponent;
    exports.ContentNodeSelectorPanelService = ContentNodeSelectorPanelService;
    exports.ContentNodeShareModule = ContentNodeShareModule;
    exports.ContentTypeDialogComponent = ContentTypeDialogComponent;
    exports.ContentTypeModule = ContentTypeModule;
    exports.ContentTypePropertiesService = ContentTypePropertiesService;
    exports.ContentTypeService = ContentTypeService;
    exports.ContentVersionService = ContentVersionService;
    exports.CustomResourcesService = CustomResourcesService;
    exports.DialogModule = DialogModule;
    exports.DocumentActionModel = DocumentActionModel;
    exports.DocumentActionsService = DocumentActionsService;
    exports.DocumentListComponent = DocumentListComponent;
    exports.DocumentListModule = DocumentListModule;
    exports.DocumentListService = DocumentListService;
    exports.DropdownBreadcrumbComponent = DropdownBreadcrumbComponent;
    exports.DropdownSitesComponent = DropdownSitesComponent;
    exports.EmptySearchResultComponent = EmptySearchResultComponent;
    exports.FileDraggableDirective = FileDraggableDirective;
    exports.FileUploadErrorPipe = FileUploadErrorPipe;
    exports.FileUploadingDialogComponent = FileUploadingDialogComponent;
    exports.FileUploadingListComponent = FileUploadingListComponent;
    exports.FileUploadingListRowComponent = FileUploadingListRowComponent;
    exports.FilterHeaderComponent = FilterHeaderComponent;
    exports.FolderActionModel = FolderActionModel;
    exports.FolderActionsService = FolderActionsService;
    exports.FolderCreateDirective = FolderCreateDirective;
    exports.FolderDialogComponent = FolderDialogComponent;
    exports.FolderDirectiveModule = FolderDirectiveModule;
    exports.FolderEditDirective = FolderEditDirective;
    exports.GroupService = GroupService;
    exports.IndifferentConfigService = IndifferentConfigService;
    exports.InheritPermissionDirective = InheritPermissionDirective;
    exports.LayoutOrientedConfigService = LayoutOrientedConfigService;
    exports.LibraryDialogComponent = LibraryDialogComponent;
    exports.LibraryNameColumnComponent = LibraryNameColumnComponent;
    exports.LibraryRoleColumnComponent = LibraryRoleColumnComponent;
    exports.LibraryStatusColumnComponent = LibraryStatusColumnComponent;
    exports.LikeComponent = LikeComponent;
    exports.MemberModel = MemberModel;
    exports.NameColumnComponent = NameColumnComponent;
    exports.NameLocationCellComponent = NameLocationCellComponent;
    exports.NodeActionsService = NodeActionsService;
    exports.NodeAspectService = NodeAspectService;
    exports.NodeCounterComponent = NodeCounterComponent;
    exports.NodeCounterDirective = NodeCounterDirective;
    exports.NodeEntityEvent = NodeEntityEvent;
    exports.NodeEntryEvent = NodeEntryEvent;
    exports.NodeLockDialogComponent = NodeLockDialogComponent;
    exports.NodeLockDirective = NodeLockDirective;
    exports.NodeMinimal = NodeMinimal;
    exports.NodeMinimalEntry = NodeMinimalEntry;
    exports.NodePaging = NodePaging;
    exports.NodePagingList = NodePagingList;
    exports.NodePathColumnComponent = NodePathColumnComponent;
    exports.NodePermissionDialogService = NodePermissionDialogService;
    exports.NodePermissionService = NodePermissionService;
    exports.NodeSharedDirective = NodeSharedDirective;
    exports.Pagination = Pagination;
    exports.PathElementEntity = PathElementEntity;
    exports.PathInfoEntity = PathInfoEntity;
    exports.PermissionContainerComponent = PermissionContainerComponent;
    exports.PermissionDisplayModel = PermissionDisplayModel;
    exports.PermissionListComponent = PermissionListComponent;
    exports.PermissionManagerModule = PermissionManagerModule;
    exports.PermissionModel = PermissionModel;
    exports.PermissionStyleModel = PermissionStyleModel;
    exports.PopOverDirective = PopOverDirective;
    exports.PropertyDescriptorsService = PropertyDescriptorsService;
    exports.PropertyGroupTranslatorService = PropertyGroupTranslatorService;
    exports.RatingComponent = RatingComponent;
    exports.RatingService = RatingService;
    exports.ResetSearchDirective = ResetSearchDirective;
    exports.SEARCH_QUERY_SERVICE_TOKEN = SEARCH_QUERY_SERVICE_TOKEN;
    exports.SEARCH_QUERY_TOKEN = SEARCH_QUERY_TOKEN;
    exports.SearchCheckListComponent = SearchCheckListComponent;
    exports.SearchChipListComponent = SearchChipListComponent;
    exports.SearchComponent = SearchComponent;
    exports.SearchControlComponent = SearchControlComponent;
    exports.SearchDateRangeComponent = SearchDateRangeComponent;
    exports.SearchDatetimeRangeComponent = SearchDatetimeRangeComponent;
    exports.SearchFacetFieldComponent = SearchFacetFieldComponent;
    exports.SearchFacetFiltersService = SearchFacetFiltersService;
    exports.SearchFilterChipsComponent = SearchFilterChipsComponent;
    exports.SearchFilterComponent = SearchFilterComponent;
    exports.SearchFilterContainerComponent = SearchFilterContainerComponent;
    exports.SearchFilterMenuCardComponent = SearchFilterMenuCardComponent;
    exports.SearchFilterService = SearchFilterService;
    exports.SearchFormComponent = SearchFormComponent;
    exports.SearchHeaderQueryBuilderService = SearchHeaderQueryBuilderService;
    exports.SearchModule = SearchModule;
    exports.SearchNumberRangeComponent = SearchNumberRangeComponent;
    exports.SearchPanelComponent = SearchPanelComponent;
    exports.SearchPermissionConfigurationService = SearchPermissionConfigurationService;
    exports.SearchQueryBuilderService = SearchQueryBuilderService;
    exports.SearchRadioComponent = SearchRadioComponent;
    exports.SearchSliderComponent = SearchSliderComponent;
    exports.SearchSortingPickerComponent = SearchSortingPickerComponent;
    exports.SearchTextComponent = SearchTextComponent;
    exports.SearchWidgetContainerComponent = SearchWidgetContainerComponent;
    exports.ShareDataRow = ShareDataRow;
    exports.ShareDataTableAdapter = ShareDataTableAdapter;
    exports.ShareDialogComponent = ShareDialogComponent;
    exports.SitesDropdownModule = SitesDropdownModule;
    exports.SocialModule = SocialModule;
    exports.TagActionsComponent = TagActionsComponent;
    exports.TagListComponent = TagListComponent;
    exports.TagModule = TagModule;
    exports.TagNodeListComponent = TagNodeListComponent;
    exports.TagService = TagService;
    exports.ToggleIconDirective = ToggleIconDirective;
    exports.TrashcanNameColumnComponent = TrashcanNameColumnComponent;
    exports.TreeBaseNode = TreeBaseNode;
    exports.TreeViewComponent = TreeViewComponent;
    exports.TreeViewDataSource = TreeViewDataSource;
    exports.TreeViewModule = TreeViewModule;
    exports.TreeViewService = TreeViewService;
    exports.UploadBase = UploadBase;
    exports.UploadButtonComponent = UploadButtonComponent;
    exports.UploadDragAreaComponent = UploadDragAreaComponent;
    exports.UploadFilesEvent = UploadFilesEvent;
    exports.UploadModule = UploadModule;
    exports.UploadVersionButtonComponent = UploadVersionButtonComponent;
    exports.UserIconColumnComponent = UserIconColumnComponent;
    exports.UserInfo = UserInfo;
    exports.UserNameColumnComponent = UserNameColumnComponent;
    exports.UserRoleColumnComponent = UserRoleColumnComponent;
    exports.VersionComparisonComponent = VersionComparisonComponent;
    exports.VersionListComponent = VersionListComponent;
    exports.VersionManagerComponent = VersionManagerComponent;
    exports.VersionManagerModule = VersionManagerModule;
    exports.VersionUploadComponent = VersionUploadComponent;
    exports.WebScriptModule = WebScriptModule;
    exports.WebscriptComponent = WebscriptComponent;
    exports.defaultValidation = defaultValidation;
    exports.forbidEndingDot = forbidEndingDot;
    exports.forbidOnlySpaces = forbidOnlySpaces;
    exports.forbidSpecialCharacters = forbidSpecialCharacters;
    exports.ɵ0 = ɵ0;
    exports.ɵa = MaterialModule;
    exports.ɵb = BaseQueryBuilderService;
    exports.ɵc = SearchWidgetChipComponent;
    exports.ɵd = SearchFacetChipComponent;
    exports.ɵe = PermissionListService;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=adf-content-services.umd.js.map