import { CommonModule } from '@angular/common';
import { NgModule, ɵɵdefineInjectable, ɵɵinject, Injectable, Component, ViewEncapsulation, Inject, Optional, EventEmitter, Output, Directive, ElementRef, Renderer2, Input, HostListener, ComponentFactoryResolver, ViewContainerRef, NgZone, ContentChild, ViewChild, ChangeDetectionStrategy, InjectionToken, TemplateRef, ChangeDetectorRef, HostBinding, forwardRef, Pipe, ViewChildren, SecurityContext } from '@angular/core';
import { MatButtonModule } from '@angular/material/button';
import { MatCardModule } from '@angular/material/card';
import { MatCheckboxModule } from '@angular/material/checkbox';
import { MatChipsModule } from '@angular/material/chips';
import { MatRippleModule, MatOptionModule, DateAdapter, MAT_DATE_LOCALE, MAT_DATE_FORMATS } from '@angular/material/core';
import { MatDatepickerModule } from '@angular/material/datepicker';
import { MatDialogModule, MatDialogRef, MAT_DIALOG_DATA, MatDialog } from '@angular/material/dialog';
import { MatExpansionModule } from '@angular/material/expansion';
import { MatIconModule } from '@angular/material/icon';
import { MatInputModule } from '@angular/material/input';
import { MatListModule, MatListItem, MatSelectionList } from '@angular/material/list';
import { MatMenuModule } from '@angular/material/menu';
import { MatProgressBarModule } from '@angular/material/progress-bar';
import { MatProgressSpinnerModule } from '@angular/material/progress-spinner';
import { MatRadioModule } from '@angular/material/radio';
import { MatSelectModule } from '@angular/material/select';
import { MatSlideToggleModule } from '@angular/material/slide-toggle';
import { MatSliderModule } from '@angular/material/slider';
import { MatTreeModule } from '@angular/material/tree';
import { MatBadgeModule } from '@angular/material/badge';
import { TranslateModule } from '@ngx-translate/core';
import { PeopleApi, SitesApi, TrashcanApi, SearchApi, SharedlinksApi, FavoritesApi, NodesApi, SearchRequest, SiteMemberPaging, NodeBodyLock, RatingsApi, RatingBody, TagsApi, TagBody, WebscriptApi, Pagination as Pagination$1, Site, RequestSortDefinitionInner, SiteEntry, ContentApi, VersionsApi, QueriesApi, ClassesApi, TypesApi, AspectsApi, GroupsApi, Group, NodeEntry } from '@alfresco/js-api';
import { AlfrescoApiService, LogService, ContentService, AllowableOperationsEnum, TranslationService, NotificationService, UploadService, SitesService, ThumbnailService, CoreModule, ObjectDataTableAdapter, ObjectUtils, DataSorting, BaseEvent, DisplayMode, ShowHeaderMode, UserPreferenceValues, ObjectDataColumn, AppConfigService, UserPreferencesService, LockService, DataColumnListComponent, CustomLoadingContentTemplateDirective, CustomNoPermissionTemplateDirective, CustomEmptyContentTemplateDirective, NodeDownloadDirective, DownloadService, NodesApiService, FileUploadStatus, FileModel, FileUtils, EXTENDIBLE_COMPONENT, SearchService, AuthenticationService, MOMENT_DATE_FORMATS, MomentDateAdapter, EditJsonDialogModule, InfiniteSelectScrollDirective, HighlightDirective, InfinitePaginationComponent, CardViewTextItemModel, CardViewDateItemModel, FileSizePipe, CardViewSelectItemModel, CardViewBoolItemModel, CardViewDatetimeItemModel, CardViewFloatItemModel, CardViewIntItemModel, MultiValuePipe, DecimalNumberPipe, VersionCompatibilityService, CardViewUpdateService, EcmUserModel, SearchConfigurationService, PipeModule, SharedLinksApiService, RenditionsService, TRANSLATION_PROVIDER } from '@alfresco/adf-core';
import { Observable, from, of, throwError, forkJoin, Subject, BehaviorSubject, ReplaySubject, merge, defer, zip, iif } from 'rxjs';
import { catchError, map, switchMap, takeUntil, filter, delay, debounceTime, mergeMap, finalize, distinctUntilChanged, tap, concatMap } from 'rxjs/operators';
import moment$1 from 'moment-es6';
import { FormBuilder, FormsModule, ReactiveFormsModule, Validators, FormControl, FormGroup } from '@angular/forms';
import { __awaiter } from 'tslib';
import { FlexLayoutModule } from '@angular/flex-layout';
import { A11yModule, ConfigurableFocusTrapFactory } from '@angular/cdk/a11y';
import { MAT_DATETIME_FORMATS, DatetimeAdapter, MatDatetimepickerModule } from '@mat-datetimepicker/core';
import { MAT_MOMENT_DATETIME_FORMATS, MatMomentDatetimeModule } from '@mat-datetimepicker/moment';
import { DomSanitizer } from '@angular/platform-browser';
import { trigger, state, style, transition, animate } from '@angular/animations';
import { ConnectionPositionPair, Overlay } from '@angular/cdk/overlay';
import { TemplatePortal } from '@angular/cdk/portal';
import { FlatTreeControl } from '@angular/cdk/tree';
import { MatTableModule } from '@angular/material/table';
import { MatTooltipModule } from '@angular/material/tooltip';

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@alfresco/adf-core';
import * as ɵngcc2 from '@angular/material/dialog';
import * as ɵngcc3 from '@angular/material/tabs';
import * as ɵngcc4 from '@angular/common';
import * as ɵngcc5 from '@angular/material/button';
import * as ɵngcc6 from '@angular/material/icon';
import * as ɵngcc7 from '@angular/material/tooltip';
import * as ɵngcc8 from '@ngx-translate/core';
import * as ɵngcc9 from '@angular/forms';
import * as ɵngcc10 from '@angular/material/checkbox';
import * as ɵngcc11 from '@angular/material/form-field';
import * as ɵngcc12 from '@mat-datetimepicker/core';
import * as ɵngcc13 from '@angular/material/input';
import * as ɵngcc14 from '@angular/material/list';
import * as ɵngcc15 from '@angular/material/chips';
import * as ɵngcc16 from '@angular/flex-layout/extended';
import * as ɵngcc17 from '@angular/material/progress-spinner';
import * as ɵngcc18 from '@angular/cdk/a11y';
import * as ɵngcc19 from '@angular/material/core';
import * as ɵngcc20 from '@angular/material/radio';
import * as ɵngcc21 from '@angular/material/slider';
import * as ɵngcc22 from '@angular/material/datepicker';
import * as ɵngcc23 from '@angular/material/expansion';
import * as ɵngcc24 from '@angular/material/menu';
import * as ɵngcc25 from '@angular/material/badge';
import * as ɵngcc26 from '@angular/material/divider';
import * as ɵngcc27 from '@angular/material/select';
import * as ɵngcc28 from '@angular/platform-browser';
import * as ɵngcc29 from '@angular/material/progress-bar';
import * as ɵngcc30 from '@angular/material/table';
import * as ɵngcc31 from '@angular/material/card';
import * as ɵngcc32 from '@angular/flex-layout/flex';
import * as ɵngcc33 from '@angular/material/slide-toggle';
import * as ɵngcc34 from '@angular/cdk/overlay';
import * as ɵngcc35 from '@angular/cdk/tree';
import * as ɵngcc36 from '@angular/material/tree';

function ContentNodeSelectorComponent_mat_tab_7_ng_container_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0, 18);
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("adf-node-counter", ctx_r2.getSelectedCount());
} }
function ContentNodeSelectorComponent_mat_tab_7_ng_template_7_mat_icon_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-icon", 20);
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵtext(2, "info ");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r5 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵpropertyInterpolate("matTooltip", ɵngcc0.ɵɵpipeBind1(1, 1, ctx_r5.getWarningMessage()));
} }
function ContentNodeSelectorComponent_mat_tab_7_ng_template_7_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtext(0);
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵtemplate(2, ContentNodeSelectorComponent_mat_tab_7_ng_template_7_mat_icon_2_Template, 3, 3, "mat-icon", 19);
} if (rf & 2) {
    const ctx_r3 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(1, 2, "NODE_SELECTOR.UPLOAD_FROM_DEVICE"), " ");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r3.hasUploadError());
} }
function ContentNodeSelectorComponent_mat_tab_7_adf_empty_list_12_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "adf-empty-list", 21);
    ɵngcc0.ɵɵelementStart(1, "div", 22);
    ɵngcc0.ɵɵelementStart(2, "div", 23);
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵpipe(4, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(5, "div", 24);
    ɵngcc0.ɵɵtext(6);
    ɵngcc0.ɵɵpipe(7, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(8, "img", 25);
    ɵngcc0.ɵɵpipe(9, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r4 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(4, 4, "ADF-DATATABLE.EMPTY.DRAG-AND-DROP.TITLE"));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(7, 6, "ADF-DATATABLE.EMPTY.DRAG-AND-DROP.SUBTITLE"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("alt", ɵngcc0.ɵɵpipeBind1(9, 8, "ADF-DATATABLE.EMPTY.DRAG-AND-DROP.TITLE"))("src", ctx_r4.emptyFolderImageUrl, ɵngcc0.ɵɵsanitizeUrl);
} }
function ContentNodeSelectorComponent_mat_tab_7_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-tab", 8);
    ɵngcc0.ɵɵelementStart(1, "div", 9);
    ɵngcc0.ɵɵelementStart(2, "div", 10);
    ɵngcc0.ɵɵelementStart(3, "adf-toolbar");
    ɵngcc0.ɵɵelementStart(4, "adf-toolbar-title");
    ɵngcc0.ɵɵelement(5, "adf-dropdown-breadcrumb", 11);
    ɵngcc0.ɵɵtemplate(6, ContentNodeSelectorComponent_mat_tab_7_ng_container_6_Template, 1, 1, "ng-container", 12);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(7, ContentNodeSelectorComponent_mat_tab_7_ng_template_7_Template, 3, 4, "ng-template", 13);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(8, "div", 14);
    ɵngcc0.ɵɵelementStart(9, "adf-upload-drag-area", 15);
    ɵngcc0.ɵɵelementStart(10, "div");
    ɵngcc0.ɵɵelement(11, "adf-file-uploading-dialog", 16);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(12, ContentNodeSelectorComponent_mat_tab_7_adf_empty_list_12_Template, 10, 10, "adf-empty-list", 17);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("disabled", ctx_r0.isNotAllowedToUpload());
    ɵngcc0.ɵɵadvance(5);
    ɵngcc0.ɵɵproperty("folderNode", ctx_r0.breadcrumbFolderNode)("rootId", ctx_r0.data == null ? null : ctx_r0.data.currentFolderId)("readOnly", true);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.isCounterVisible());
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("rootFolderId", ctx_r0.currentDirectoryId);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵclassProp("adf-upload-dialog-container", ctx_r0.uploadStarted);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("alwaysVisible", true);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r0.uploadStarted);
} }
function ContentNodeSelectorComponent_ng_container_10_Template(rf, ctx) { if (rf & 1) {
    const _r7 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "adf-upload-button", 26);
    ɵngcc0.ɵɵlistener("error", function ContentNodeSelectorComponent_ng_container_10_Template_adf_upload_button_error_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r7); const ctx_r6 = ɵngcc0.ɵɵnextContext(); return ctx_r6.onError($event); });
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("staticTitle", ɵngcc0.ɵɵpipeBind1(2, 4, "FORM.FIELD.UPLOAD"))("multipleFiles", ctx_r1.isMultipleSelection())("rootFolderId", ctx_r1.currentDirectoryId)("disabled", ctx_r1.isNotAllowedToUpload());
} }
function NodeLockDialogComponent_div_12_mat_form_field_9_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-form-field");
    ɵngcc0.ɵɵelement(1, "mat-datetimepicker-toggle", 9);
    ɵngcc0.ɵɵelement(2, "mat-datetimepicker", 10, 11);
    ɵngcc0.ɵɵelement(4, "input", 12);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const _r2 = ɵngcc0.ɵɵreference(3);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("for", _r2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("openOnFocus", true)("timeInterval", 1);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("formControlName", "time")("matDatetimepicker", _r2);
} }
function NodeLockDialogComponent_div_12_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div");
    ɵngcc0.ɵɵelementStart(1, "mat-checkbox", 8);
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(4, "br");
    ɵngcc0.ɵɵelementStart(5, "mat-checkbox", 8);
    ɵngcc0.ɵɵtext(6);
    ɵngcc0.ɵɵpipe(7, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(8, "br");
    ɵngcc0.ɵɵtemplate(9, NodeLockDialogComponent_div_12_mat_form_field_9_Template, 5, 5, "mat-form-field", 3);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("formControlName", "allowOwner");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(3, 5, "CORE.FILE_DIALOG.ALLOW_OTHERS_CHECKBOX"), " ");
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("formControlName", "isTimeLock");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(7, 7, "CORE.FILE_DIALOG.TIME_LOCK_CHECKBOX"), " ");
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.form.value.isTimeLock);
} }
const _c0 = function (a0) { return { count: a0 }; };
const _c1 = function (a0) { return { "adf-average-star": a0 }; };
function RatingComponent_mat_list_item_1_mat_icon_2_Template(rf, ctx) { if (rf & 1) {
    const _r9 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "mat-icon", 9);
    ɵngcc0.ɵɵlistener("click", function RatingComponent_mat_list_item_1_mat_icon_2_Template_mat_icon_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r9); const idx_r4 = ɵngcc0.ɵɵnextContext().index; const ctx_r7 = ɵngcc0.ɵɵnextContext(); return ctx_r7.updateVote(idx_r4 + 1); });
    ɵngcc0.ɵɵtext(1, "star_rate ");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const idx_r4 = ɵngcc0.ɵɵnextContext().index;
    const ctx_r5 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵpropertyInterpolate1("id", "adf-colored-star-", idx_r4, "");
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(2, _c1, !ctx_r5.ratingValue));
} }
function RatingComponent_mat_list_item_1_mat_icon_3_Template(rf, ctx) { if (rf & 1) {
    const _r13 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "mat-icon", 10);
    ɵngcc0.ɵɵlistener("click", function RatingComponent_mat_list_item_1_mat_icon_3_Template_mat_icon_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r13); const idx_r4 = ɵngcc0.ɵɵnextContext().index; const ctx_r11 = ɵngcc0.ɵɵnextContext(); return ctx_r11.updateVote(idx_r4 + 1); });
    ɵngcc0.ɵɵtext(1, "star_border ");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const idx_r4 = ɵngcc0.ɵɵnextContext().index;
    ɵngcc0.ɵɵpropertyInterpolate1("id", "adf-grey-star-", idx_r4, "");
} }
function RatingComponent_mat_list_item_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-list-item", 5);
    ɵngcc0.ɵɵelementStart(1, "span", 6);
    ɵngcc0.ɵɵtemplate(2, RatingComponent_mat_list_item_1_mat_icon_2_Template, 2, 4, "mat-icon", 7);
    ɵngcc0.ɵɵtemplate(3, RatingComponent_mat_list_item_1_mat_icon_3_Template, 2, 1, "mat-icon", 8);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const currentRate_r3 = ctx.$implicit;
    const idx_r4 = ctx.index;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate1("id", "adf-rate-", idx_r4, "");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", currentRate_r3.fill);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !currentRate_r3.fill);
} }
function RatingComponent_div_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 11);
    ɵngcc0.ɵɵtext(1, "Rating");
    ɵngcc0.ɵɵelementEnd();
} }
function RatingComponent_div_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 11);
    ɵngcc0.ɵɵtext(1, "Ratings");
    ɵngcc0.ɵɵelementEnd();
} }
function LikeComponent_div_8_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 6);
    ɵngcc0.ɵɵtext(1, "Like");
    ɵngcc0.ɵɵelementEnd();
} }
function LikeComponent_div_9_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 6);
    ɵngcc0.ɵɵtext(1, "Likes");
    ɵngcc0.ɵɵelementEnd();
} }
const _c2 = function (a0, a1) { return { "adf-like-select": a0, "adf-like-grey": a1 }; };
function TagActionsComponent_mat_list_item_1_Template(rf, ctx) { if (rf & 1) {
    const _r5 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "mat-list-item");
    ɵngcc0.ɵɵelementStart(1, "div", 6);
    ɵngcc0.ɵɵlistener("click", function TagActionsComponent_mat_list_item_1_Template_div_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r5); const currentEntry_r2 = ctx.$implicit; const ctx_r4 = ɵngcc0.ɵɵnextContext(); return ctx_r4.removeTag(currentEntry_r2.entry.id); });
    ɵngcc0.ɵɵelementStart(2, "div", 7);
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(4, "mat-icon", 8);
    ɵngcc0.ɵɵtext(5, "delete");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const currentEntry_r2 = ctx.$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate1("id", "tag_delete_", currentEntry_r2.entry.tag, "");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate1("id", "tag_name_", currentEntry_r2.entry.tag, "");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(currentEntry_r2.entry.tag);
} }
const _c3 = function () { return { "color": "red" }; };
function TagActionsComponent_mat_hint_8_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-hint", 9);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngStyle", ɵngcc0.ɵɵpureFunction0(2, _c3));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r1.errorMsg);
} }
function TagListComponent_div_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 5);
    ɵngcc0.ɵɵelementStart(1, "mat-chip");
    ɵngcc0.ɵɵelementStart(2, "span", 6);
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const currentEntry_r3 = ctx.$implicit;
    const idx_r4 = ctx.index;
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵpropertyInterpolate1("id", "tag_name_", idx_r4, "");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(currentEntry_r3.entry.tag);
} }
function TagListComponent_button_3_Template(rf, ctx) { if (rf & 1) {
    const _r6 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 7);
    ɵngcc0.ɵɵlistener("click", function TagListComponent_button_3_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r6); const ctx_r5 = ɵngcc0.ɵɵnextContext(); return ctx_r5.loadLessTags(); });
    ɵngcc0.ɵɵelementStart(1, "mat-icon");
    ɵngcc0.ɵɵtext(2, "keyboard_arrow_up");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("disabled", ctx_r1.isLoading);
} }
function TagListComponent_button_4_Template(rf, ctx) { if (rf & 1) {
    const _r8 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 8);
    ɵngcc0.ɵɵlistener("click", function TagListComponent_button_4_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r8); const ctx_r7 = ɵngcc0.ɵɵnextContext(); return ctx_r7.loadMoreTags(); });
    ɵngcc0.ɵɵelementStart(1, "mat-icon");
    ɵngcc0.ɵɵtext(2, "keyboard_arrow_down");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("disabled", ctx_r2.isLoading);
} }
function TagNodeListComponent_mat_chip_1_mat_icon_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-icon", 4);
    ɵngcc0.ɵɵtext(1, "cancel ");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const currentEntry_r1 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵpropertyInterpolate1("id", "tag_chips_delete_", currentEntry_r1.entry.tag, "");
} }
function TagNodeListComponent_mat_chip_1_Template(rf, ctx) { if (rf & 1) {
    const _r6 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "mat-chip", 1);
    ɵngcc0.ɵɵlistener("removed", function TagNodeListComponent_mat_chip_1_Template_mat_chip_removed_0_listener() { ɵngcc0.ɵɵrestoreView(_r6); const currentEntry_r1 = ctx.$implicit; const ctx_r5 = ɵngcc0.ɵɵnextContext(); return ctx_r5.removeTag(currentEntry_r1.entry.id); });
    ɵngcc0.ɵɵelementStart(1, "span", 2);
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(3, TagNodeListComponent_mat_chip_1_mat_icon_3_Template, 2, 1, "mat-icon", 3);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const currentEntry_r1 = ctx.$implicit;
    const idx_r2 = ctx.index;
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate1("id", "tag_name_", idx_r2, "");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(currentEntry_r1.entry.tag);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.showDelete);
} }
function WebscriptComponent_div_0_div_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 4);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "json");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(2, 1, ctx_r1.data));
} }
function WebscriptComponent_div_0_div_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "div", 5);
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("innerHTML", ctx_r2.data, ɵngcc0.ɵɵsanitizeHtml);
} }
function WebscriptComponent_div_0_div_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 6);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r3.data);
} }
const _c4 = function (a0, a1) { return { data: a0, contentType: a1 }; };
function WebscriptComponent_div_0_div_4_div_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 9);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r5 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1("", ɵngcc0.ɵɵpipeBind2(2, 1, "WEBSCRIPT.ERROR", ɵngcc0.ɵɵpureFunction2(4, _c4, ctx_r5.data, ctx_r5.contentType)), " ");
} }
function WebscriptComponent_div_0_div_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div");
    ɵngcc0.ɵɵelement(1, "adf-datatable", 7);
    ɵngcc0.ɵɵelementStart(2, "div");
    ɵngcc0.ɵɵtemplate(3, WebscriptComponent_div_0_div_4_div_3_Template, 3, 7, "div", 8);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r4 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("data", ctx_r4.data);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r4.showError);
} }
function WebscriptComponent_div_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div");
    ɵngcc0.ɵɵtemplate(1, WebscriptComponent_div_0_div_1_Template, 3, 3, "div", 1);
    ɵngcc0.ɵɵtemplate(2, WebscriptComponent_div_0_div_2_Template, 1, 1, "div", 2);
    ɵngcc0.ɵɵtemplate(3, WebscriptComponent_div_0_div_3_Template, 2, 1, "div", 3);
    ɵngcc0.ɵɵtemplate(4, WebscriptComponent_div_0_div_4_Template, 4, 2, "div", 0);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.contentType === "JSON");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.contentType === "HTML");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.contentType === "TEXT");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.isDataTableContent());
} }
const _c5 = ["dataTable"];
function DocumentListComponent_div_2_Template(rf, ctx) { if (rf & 1) {
    const _r6 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div");
    ɵngcc0.ɵɵelementStart(1, "adf-filter-header", 3);
    ɵngcc0.ɵɵlistener("filterSelection", function DocumentListComponent_div_2_Template_adf_filter_header_filterSelection_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r6); const ctx_r5 = ɵngcc0.ɵɵnextContext(); return ctx_r5.onFilterSelectionChange($event); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("currentFolderId", ctx_r1.currentFolderId)("value", ctx_r1.filterValue);
} }
function DocumentListComponent_ng_template_4_adf_empty_list_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "adf-empty-list");
    ɵngcc0.ɵɵelementStart(1, "div", 4);
    ɵngcc0.ɵɵelementStart(2, "div", 5);
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵpipe(4, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(5, "div", 6);
    ɵngcc0.ɵɵtext(6);
    ɵngcc0.ɵɵpipe(7, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(8, "div", 7);
    ɵngcc0.ɵɵtext(9);
    ɵngcc0.ɵɵpipe(10, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(11, "img", 8);
    ɵngcc0.ɵɵpipe(12, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r7 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(4, 5, "ADF-DOCUMENT-LIST.EMPTY.HEADER"));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(7, 7, "ADF-DATATABLE.EMPTY.DRAG-AND-DROP.TITLE"));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(10, 9, "ADF-DATATABLE.EMPTY.DRAG-AND-DROP.SUBTITLE"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("alt", ɵngcc0.ɵɵpipeBind1(12, 11, "ADF-DATATABLE.EMPTY.DRAG-AND-DROP.TITLE"))("src", ctx_r7.emptyFolderImageUrl, ɵngcc0.ɵɵsanitizeUrl);
} }
function DocumentListComponent_ng_template_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, DocumentListComponent_ng_template_4_adf_empty_list_0_Template, 13, 13, "adf-empty-list", 2);
    ɵngcc0.ɵɵprojection(1);
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r2.customNoContentTemplate);
} }
function DocumentListComponent_ng_template_6_div_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 10);
    ɵngcc0.ɵɵelementStart(1, "mat-icon");
    ɵngcc0.ɵɵtext(2, "error");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(3, "p", 11);
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵpipe(5, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(5, 1, "ADF-DOCUMENT-LIST.NO_PERMISSION"));
} }
function DocumentListComponent_ng_template_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, DocumentListComponent_ng_template_6_div_0_Template, 6, 3, "div", 9);
    ɵngcc0.ɵɵprojection(1, 1);
} if (rf & 2) {
    const ctx_r3 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r3.customNoPermissionsTemplate);
} }
function DocumentListComponent_ng_template_8_div_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 13);
    ɵngcc0.ɵɵelement(1, "mat-progress-spinner", 14);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("color", "primary")("mode", "indeterminate");
} }
function DocumentListComponent_ng_template_8_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, DocumentListComponent_ng_template_8_div_0_Template, 2, 2, "div", 12);
    ɵngcc0.ɵɵprojection(1, 2);
} if (rf & 2) {
    const ctx_r4 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r4.customLoadingContent);
} }
const _c6 = [[["adf-custom-empty-content-template"], ["empty-folder-content"]], [["adf-custom-no-permission-template"], ["no-permission-content"]], [["adf-custom-loading-content-template"]]];
const _c7 = ["adf-custom-empty-content-template, empty-folder-content", "adf-custom-no-permission-template, no-permission-content", "adf-custom-loading-content-template"];
const _c8 = function (a0) { return { name: a0 }; };
function FilterHeaderComponent_div_0_ng_template_2_Template(rf, ctx) { if (rf & 1) {
    const _r4 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "adf-search-filter-container", 1);
    ɵngcc0.ɵɵlistener("filterChange", function FilterHeaderComponent_div_0_ng_template_2_Template_adf_search_filter_container_filterChange_0_listener() { ɵngcc0.ɵɵrestoreView(_r4); const ctx_r3 = ɵngcc0.ɵɵnextContext(2); return ctx_r3.onFilterSelectionChange(); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const col_r2 = ctx.$implicit;
    const ctx_r1 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("col", col_r2)("value", ctx_r1.value);
} }
function FilterHeaderComponent_div_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div");
    ɵngcc0.ɵɵelementStart(1, "adf-header-filter-template");
    ɵngcc0.ɵɵtemplate(2, FilterHeaderComponent_div_0_ng_template_2_Template, 1, 2, "ng-template");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} }
function TrashcanNameColumnComponent_ng_container_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "span", 1);
    ɵngcc0.ɵɵpipe(2, "adfNodeNameTooltip");
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(2, 2, ctx_r0.node));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ctx_r0.displayText);
} }
function TrashcanNameColumnComponent_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "span", 1);
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate("title", ctx_r1.displayTooltip);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r1.displayText);
} }
function FileUploadingListComponent_ng_template_1_Template(rf, ctx) { }
const _c9 = ["uploadList"];
const _c10 = function (a0, a1) { return { completed: a0, total: a1 }; };
function FileUploadingDialogComponent_div_0_span_8_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 15);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind2(2, 1, "FILE_UPLOAD.MESSAGES.UPLOAD_PROGRESS", ɵngcc0.ɵɵpureFunction2(4, _c10, ctx_r1.totalCompleted, ctx_r1.filesUploadingList.length)), " ");
} }
function FileUploadingDialogComponent_div_0_span_9_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 15);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 1, "FILE_UPLOAD.MESSAGES.UPLOAD_CANCELED"), " ");
} }
const _c11 = function (a0) { return { total: a0 }; };
function FileUploadingDialogComponent_div_0_section_10_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "section", 16);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind2(2, 1, ctx_r3.totalErrors > 1 ? "FILE_UPLOAD.MESSAGES.UPLOAD_ERRORS" : "FILE_UPLOAD.MESSAGES.UPLOAD_ERROR", ɵngcc0.ɵɵpureFunction1(4, _c11, ctx_r3.totalErrors)), " ");
} }
function FileUploadingDialogComponent_div_0_ng_template_14_Template(rf, ctx) { if (rf & 1) {
    const _r10 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "adf-file-uploading-list-row", 17);
    ɵngcc0.ɵɵlistener("remove", function FileUploadingDialogComponent_div_0_ng_template_14_Template_adf_file_uploading_list_row_remove_0_listener() { ɵngcc0.ɵɵrestoreView(_r10); const file_r8 = ctx.$implicit; ɵngcc0.ɵɵnextContext(); const _r4 = ɵngcc0.ɵɵreference(13); return _r4.removeFile(file_r8); })("cancel", function FileUploadingDialogComponent_div_0_ng_template_14_Template_adf_file_uploading_list_row_cancel_0_listener() { ɵngcc0.ɵɵrestoreView(_r10); const file_r8 = ctx.$implicit; ɵngcc0.ɵɵnextContext(); const _r4 = ɵngcc0.ɵɵreference(13); return _r4.cancelFile(file_r8); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const file_r8 = ctx.$implicit;
    ɵngcc0.ɵɵproperty("file", file_r8);
} }
function FileUploadingDialogComponent_div_0_footer_22_button_1_Template(rf, ctx) { if (rf & 1) {
    const _r15 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 21);
    ɵngcc0.ɵɵlistener("click", function FileUploadingDialogComponent_div_0_footer_22_button_1_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r15); const ctx_r14 = ɵngcc0.ɵɵnextContext(3); return ctx_r14.toggleConfirmation(); });
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵattribute("aria-label", ɵngcc0.ɵɵpipeBind1(1, 2, "ADF_FILE_UPLOAD.ARIA-LABEL.CANCEL_ALL"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(3, 4, "ADF_FILE_UPLOAD.BUTTON.CANCEL_ALL"));
} }
function FileUploadingDialogComponent_div_0_footer_22_button_2_Template(rf, ctx) { if (rf & 1) {
    const _r17 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 22);
    ɵngcc0.ɵɵlistener("click", function FileUploadingDialogComponent_div_0_footer_22_button_2_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r17); const ctx_r16 = ɵngcc0.ɵɵnextContext(3); return ctx_r16.close(); });
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵattribute("aria-label", ɵngcc0.ɵɵpipeBind1(1, 2, "ADF_FILE_UPLOAD.ARIA-LABEL.DIALOG_CLOSE"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(3, 4, "ADF_FILE_UPLOAD.BUTTON.CLOSE"));
} }
function FileUploadingDialogComponent_div_0_footer_22_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "footer", 18);
    ɵngcc0.ɵɵtemplate(1, FileUploadingDialogComponent_div_0_footer_22_button_1_Template, 4, 6, "button", 19);
    ɵngcc0.ɵɵtemplate(2, FileUploadingDialogComponent_div_0_footer_22_button_2_Template, 4, 6, "button", 20);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r6 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r6.canShowCancelAll());
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r6.canCloseDialog());
} }
function FileUploadingDialogComponent_div_0_footer_23_Template(rf, ctx) { if (rf & 1) {
    const _r19 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "footer", 23);
    ɵngcc0.ɵɵelementStart(1, "button", 24);
    ɵngcc0.ɵɵlistener("click", function FileUploadingDialogComponent_div_0_footer_23_Template_button_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r19); const ctx_r18 = ɵngcc0.ɵɵnextContext(2); return ctx_r18.cancelAllUploads(); });
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵpipe(4, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(5, "button", 25);
    ɵngcc0.ɵɵlistener("click", function FileUploadingDialogComponent_div_0_footer_23_Template_button_click_5_listener() { ɵngcc0.ɵɵrestoreView(_r19); const ctx_r20 = ɵngcc0.ɵɵnextContext(2); return ctx_r20.toggleConfirmation(); });
    ɵngcc0.ɵɵpipe(6, "translate");
    ɵngcc0.ɵɵtext(7);
    ɵngcc0.ɵɵpipe(8, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵattribute("aria-label", ɵngcc0.ɵɵpipeBind1(2, 4, "ADF_FILE_UPLOAD.ARIA-LABEL.CONFIRMATION.CANCEL"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(4, 6, "ADF_FILE_UPLOAD.CONFIRMATION.BUTTON.CANCEL"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵattribute("aria-label", ɵngcc0.ɵɵpipeBind1(6, 8, "ADF_FILE_UPLOAD.ARIA-LABEL.CONFIRMATION.CONTINUE"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(8, 10, "ADF_FILE_UPLOAD.CONFIRMATION.BUTTON.CONTINUE"));
} }
function FileUploadingDialogComponent_div_0_Template(rf, ctx) { if (rf & 1) {
    const _r22 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 1);
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵelementStart(2, "header", 2);
    ɵngcc0.ɵɵelementStart(3, "button", 3);
    ɵngcc0.ɵɵlistener("click", function FileUploadingDialogComponent_div_0_Template_button_click_3_listener() { ɵngcc0.ɵɵrestoreView(_r22); const ctx_r21 = ɵngcc0.ɵɵnextContext(); return ctx_r21.toggleMinimized(); });
    ɵngcc0.ɵɵpipe(4, "translate");
    ɵngcc0.ɵɵelementStart(5, "mat-icon", 4);
    ɵngcc0.ɵɵpipe(6, "translate");
    ɵngcc0.ɵɵtext(7);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(8, FileUploadingDialogComponent_div_0_span_8_Template, 3, 7, "span", 5);
    ɵngcc0.ɵɵtemplate(9, FileUploadingDialogComponent_div_0_span_9_Template, 3, 3, "span", 5);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(10, FileUploadingDialogComponent_div_0_section_10_Template, 3, 6, "section", 6);
    ɵngcc0.ɵɵelementStart(11, "section", 7);
    ɵngcc0.ɵɵelementStart(12, "adf-file-uploading-list", 8, 9);
    ɵngcc0.ɵɵtemplate(14, FileUploadingDialogComponent_div_0_ng_template_14_Template, 1, 1, "ng-template");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(15, "div", 10);
    ɵngcc0.ɵɵelementStart(16, "p", 11);
    ɵngcc0.ɵɵtext(17);
    ɵngcc0.ɵɵpipe(18, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(19, "p", 12);
    ɵngcc0.ɵɵtext(20);
    ɵngcc0.ɵɵpipe(21, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(22, FileUploadingDialogComponent_div_0_footer_22_Template, 3, 2, "footer", 13);
    ɵngcc0.ɵɵtemplate(23, FileUploadingDialogComponent_div_0_footer_23_Template, 9, 12, "footer", 14);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const _r4 = ɵngcc0.ɵɵreference(13);
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵclassProp("adf-upload-dialog--minimized", ctx_r0.isDialogMinimized);
    ɵngcc0.ɵɵattribute("aria-label", ɵngcc0.ɵɵpipeBind1(1, 22, "ADF_FILE_UPLOAD.ARIA-LABEL.DIALOG"));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("disabled", ctx_r0.isConfirmation);
    ɵngcc0.ɵɵattribute("aria-label", ɵngcc0.ɵɵpipeBind1(4, 24, ctx_r0.isDialogMinimized ? "ADF_FILE_UPLOAD.ARIA-LABEL.DIALOG_MAXIMIZE" : "ADF_FILE_UPLOAD.ARIA-LABEL.DIALOG_MINIMIZE"))("aria-expanded", !ctx_r0.isDialogMinimized);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(6, 26, ctx_r0.isDialogMinimized ? "ADF_FILE_UPLOAD.BUTTON.MAXIMIZE" : "ADF_FILE_UPLOAD.BUTTON.MINIMIZE"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r0.isDialogMinimized ? "keyboard_arrow_up" : "keyboard_arrow_down", " ");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !_r4.isUploadCancelled());
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", _r4.isUploadCancelled());
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.totalErrors);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵclassProp("adf-upload-dialog--padding", ctx_r0.isConfirmation);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵclassProp("adf-upload-dialog--hide", ctx_r0.isConfirmation);
    ɵngcc0.ɵɵproperty("files", ctx_r0.filesUploadingList);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵclassProp("adf-upload-dialog--hide", !ctx_r0.isConfirmation);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(18, 28, "ADF_FILE_UPLOAD.CONFIRMATION.MESSAGE.TITLE"), " ");
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(21, 30, "ADF_FILE_UPLOAD.CONFIRMATION.MESSAGE.TEXT"), " ");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r0.isConfirmation);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.isConfirmation);
} }
function FileUploadingListRowComponent_mat_icon_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-icon", 11);
    ɵngcc0.ɵɵtext(1, " insert_drive_file ");
    ɵngcc0.ɵɵelementEnd();
} }
function FileUploadingListRowComponent_adf_icon_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "adf-icon", 12);
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵpropertyInterpolate1("value", "adf:", ctx_r1.mimeType, "");
} }
const _c12 = function (a0) { return { version: a0 }; };
function FileUploadingListRowComponent_span_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 13);
    ɵngcc0.ɵɵelementStart(1, "mat-chip", 14);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("title", "version" + ctx_r2.versionNumber);
    ɵngcc0.ɵɵattribute("aria-label", ɵngcc0.ɵɵpipeBind2(2, 3, "ADF_FILE_UPLOAD.ARIA-LABEL.VERSION", ɵngcc0.ɵɵpureFunction1(6, _c12, ctx_r2.versionNumber)));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ctx_r2.versionNumber);
} }
function FileUploadingListRowComponent_div_6_span_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 19);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "adfFileSize");
    ɵngcc0.ɵɵpipe(3, "adfFileSize");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r10 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate2(" ", ɵngcc0.ɵɵpipeBind1(2, 2, ctx_r10.file.progress.loaded), " / ", ɵngcc0.ɵɵpipeBind1(3, 4, ctx_r10.file.progress.total), " ");
} }
function FileUploadingListRowComponent_div_6_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-icon", 20);
    ɵngcc0.ɵɵtext(1, " clear ");
    ɵngcc0.ɵɵelementEnd();
} }
const _c13 = function (a0) { return { file: a0 }; };
function FileUploadingListRowComponent_div_6_Template(rf, ctx) { if (rf & 1) {
    const _r13 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 15, 16);
    ɵngcc0.ɵɵlistener("keyup.enter", function FileUploadingListRowComponent_div_6_Template_div_keyup_enter_0_listener() { ɵngcc0.ɵɵrestoreView(_r13); const ctx_r12 = ɵngcc0.ɵɵnextContext(); return ctx_r12.onCancel(ctx_r12.file); })("click", function FileUploadingListRowComponent_div_6_Template_div_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r13); const ctx_r14 = ɵngcc0.ɵɵnextContext(); return ctx_r14.onCancel(ctx_r14.file); });
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵtemplate(4, FileUploadingListRowComponent_div_6_span_4_Template, 4, 6, "span", 17);
    ɵngcc0.ɵɵtemplate(5, FileUploadingListRowComponent_div_6_mat_icon_5_Template, 2, 0, "mat-icon", 18);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const _r9 = ɵngcc0.ɵɵreference(1);
    const ctx_r3 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(3, 7, "ADF_FILE_UPLOAD.BUTTON.CANCEL_FILE"));
    ɵngcc0.ɵɵattribute("aria-label", ɵngcc0.ɵɵpipeBind2(2, 4, "ADF_FILE_UPLOAD.ARIA-LABEL.CANCEL_FILE_UPLOAD", ɵngcc0.ɵɵpureFunction1(9, _c13, ctx_r3.file.name)));
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵproperty("ngIf", !_r9.isToggled);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", _r9.isToggled);
} }
function FileUploadingListRowComponent_button_7_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-icon", 24);
    ɵngcc0.ɵɵtext(1, " check_circle ");
    ɵngcc0.ɵɵelementEnd();
} }
function FileUploadingListRowComponent_button_7_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-icon", 25);
    ɵngcc0.ɵɵtext(1, " remove_circle ");
    ɵngcc0.ɵɵelementEnd();
} }
function FileUploadingListRowComponent_button_7_Template(rf, ctx) { if (rf & 1) {
    const _r19 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 21, 16);
    ɵngcc0.ɵɵlistener("click", function FileUploadingListRowComponent_button_7_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r19); const ctx_r18 = ɵngcc0.ɵɵnextContext(); return ctx_r18.onRemove(ctx_r18.file); });
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵtemplate(4, FileUploadingListRowComponent_button_7_mat_icon_4_Template, 2, 0, "mat-icon", 22);
    ɵngcc0.ɵɵtemplate(5, FileUploadingListRowComponent_button_7_mat_icon_5_Template, 2, 0, "mat-icon", 23);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const _r15 = ɵngcc0.ɵɵreference(1);
    const ctx_r4 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(3, 7, "ADF_FILE_UPLOAD.BUTTON.REMOVE_FILE"));
    ɵngcc0.ɵɵattribute("aria-label", ɵngcc0.ɵɵpipeBind2(2, 4, "ADF_FILE_UPLOAD.ARIA-LABEL.REMOVE_FILE", ɵngcc0.ɵɵpureFunction1(9, _c13, ctx_r4.file.name)));
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵproperty("ngIf", !_r15.isToggled);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", _r15.isToggled);
} }
function FileUploadingListRowComponent_div_8_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 26);
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵelementStart(2, "mat-icon", 27);
    ɵngcc0.ɵɵtext(3, " check_circle ");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵattribute("aria-label", ɵngcc0.ɵɵpipeBind1(1, 1, "ADF_FILE_UPLOAD.STATUS.FILE_DONE_STATUS"));
} }
function FileUploadingListRowComponent_button_9_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-icon", 31);
    ɵngcc0.ɵɵtext(1, " schedule ");
    ɵngcc0.ɵɵelementEnd();
} }
function FileUploadingListRowComponent_button_9_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-icon", 25);
    ɵngcc0.ɵɵtext(1, " remove_circle ");
    ɵngcc0.ɵɵelementEnd();
} }
function FileUploadingListRowComponent_button_9_Template(rf, ctx) { if (rf & 1) {
    const _r24 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 28, 29);
    ɵngcc0.ɵɵlistener("click", function FileUploadingListRowComponent_button_9_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r24); const ctx_r23 = ɵngcc0.ɵɵnextContext(); return ctx_r23.onCancel(ctx_r23.file); });
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵtemplate(4, FileUploadingListRowComponent_button_9_mat_icon_4_Template, 2, 0, "mat-icon", 30);
    ɵngcc0.ɵɵtemplate(5, FileUploadingListRowComponent_button_9_mat_icon_5_Template, 2, 0, "mat-icon", 23);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const _r20 = ɵngcc0.ɵɵreference(1);
    const ctx_r6 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(2, 4, "ADF_FILE_UPLOAD.BUTTON.CANCEL_FILE"));
    ɵngcc0.ɵɵattribute("aria-label", ɵngcc0.ɵɵpipeBind2(3, 6, "ADF_FILE_UPLOAD.ARIA-LABEL.CANCEL_FILE", ɵngcc0.ɵɵpureFunction1(9, _c13, ctx_r6.file.name)));
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵproperty("ngIf", !_r20.isToggled);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", _r20.isToggled);
} }
const _c14 = function (a0) { return { error: a0 }; };
function FileUploadingListRowComponent_div_10_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 32);
    ɵngcc0.ɵɵelementStart(1, "mat-icon", 33);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵpipe(3, "adfFileUploadError");
    ɵngcc0.ɵɵpipe(4, "adfFileUploadError");
    ɵngcc0.ɵɵtext(5, " report_problem ");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r7 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("matTooltip", ɵngcc0.ɵɵpipeBind1(4, 7, ctx_r7.file.errorCode));
    ɵngcc0.ɵɵattribute("aria-label", ɵngcc0.ɵɵpipeBind2(2, 2, "ADF_FILE_UPLOAD.ARIA-LABEL.UPLOAD_FILE_ERROR", ɵngcc0.ɵɵpureFunction1(9, _c14, ɵngcc0.ɵɵpipeBind1(3, 5, ctx_r7.file.errorCode))));
} }
function FileUploadingListRowComponent_div_11_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 34);
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵattribute("aria-label", ɵngcc0.ɵɵpipeBind1(1, 2, "ADF_FILE_UPLOAD.STATUS.FILE_CANCELED_STATUS"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(3, 4, "ADF_FILE_UPLOAD.STATUS.FILE_CANCELED_STATUS"), " ");
} }
function UploadButtonComponent_div_1_button_1_span_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 8);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(2, 1, "FILE_UPLOAD.BUTTON.UPLOAD_FILE"));
} }
function UploadButtonComponent_div_1_button_1_span_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 9);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r5 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r5.staticTitle);
} }
function UploadButtonComponent_div_1_button_1_Template(rf, ctx) { if (rf & 1) {
    const _r8 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 3);
    ɵngcc0.ɵɵlistener("click", function UploadButtonComponent_div_1_button_1_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r8); const _r6 = ɵngcc0.ɵɵreference(6); return _r6.click(); });
    ɵngcc0.ɵɵelementStart(1, "mat-icon");
    ɵngcc0.ɵɵtext(2, "file_upload");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(3, UploadButtonComponent_div_1_button_1_span_3_Template, 3, 3, "span", 4);
    ɵngcc0.ɵɵtemplate(4, UploadButtonComponent_div_1_button_1_span_4_Template, 2, 1, "span", 5);
    ɵngcc0.ɵɵelementStart(5, "input", 6, 7);
    ɵngcc0.ɵɵlistener("change", function UploadButtonComponent_div_1_button_1_Template_input_change_5_listener($event) { ɵngcc0.ɵɵrestoreView(_r8); const ctx_r9 = ɵngcc0.ɵɵnextContext(2); return ctx_r9.onFilesAdded($event); })("click", function UploadButtonComponent_div_1_button_1_Template_input_click_5_listener() { ɵngcc0.ɵɵrestoreView(_r8); const ctx_r10 = ɵngcc0.ɵɵnextContext(2); return ctx_r10.onClickUploadButton(); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("disabled", ctx_r2.isButtonDisabled());
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r2.staticTitle);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r2.staticTitle);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate("accept", ctx_r2.acceptedFilesType);
    ɵngcc0.ɵɵproperty("type", ctx_r2.file ? "button" : "file")("title", ctx_r2.tooltip);
    ɵngcc0.ɵɵattribute("disabled", ctx_r2.isButtonDisabled());
} }
function UploadButtonComponent_div_1_button_2_span_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 14);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(2, 1, "FILE_UPLOAD.BUTTON.UPLOAD_FILE"));
} }
function UploadButtonComponent_div_1_button_2_span_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 15);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r12 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r12.staticTitle);
} }
function UploadButtonComponent_div_1_button_2_Template(rf, ctx) { if (rf & 1) {
    const _r15 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 3);
    ɵngcc0.ɵɵlistener("click", function UploadButtonComponent_div_1_button_2_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r15); const _r13 = ɵngcc0.ɵɵreference(6); return _r13.click(); });
    ɵngcc0.ɵɵelementStart(1, "mat-icon");
    ɵngcc0.ɵɵtext(2, "file_upload");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(3, UploadButtonComponent_div_1_button_2_span_3_Template, 3, 3, "span", 10);
    ɵngcc0.ɵɵtemplate(4, UploadButtonComponent_div_1_button_2_span_4_Template, 2, 1, "span", 11);
    ɵngcc0.ɵɵelementStart(5, "input", 12, 13);
    ɵngcc0.ɵɵlistener("change", function UploadButtonComponent_div_1_button_2_Template_input_change_5_listener($event) { ɵngcc0.ɵɵrestoreView(_r15); const ctx_r16 = ɵngcc0.ɵɵnextContext(2); return ctx_r16.onFilesAdded($event); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("disabled", ctx_r3.isButtonDisabled());
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r3.staticTitle);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r3.staticTitle);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate("accept", ctx_r3.acceptedFilesType);
    ɵngcc0.ɵɵproperty("title", ctx_r3.tooltip);
    ɵngcc0.ɵɵattribute("disabled", ctx_r3.isButtonDisabled());
} }
function UploadButtonComponent_div_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div");
    ɵngcc0.ɵɵtemplate(1, UploadButtonComponent_div_1_button_1_Template, 7, 7, "button", 2);
    ɵngcc0.ɵɵtemplate(2, UploadButtonComponent_div_1_button_2_Template, 7, 6, "button", 2);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r0.multipleFiles);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.multipleFiles);
} }
function UploadButtonComponent_div_2_span_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 20);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(2, 1, "FILE_UPLOAD.BUTTON.UPLOAD_FOLDER"));
} }
function UploadButtonComponent_div_2_span_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 21);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r18 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r18.staticTitle);
} }
function UploadButtonComponent_div_2_Template(rf, ctx) { if (rf & 1) {
    const _r21 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div");
    ɵngcc0.ɵɵelementStart(1, "button", 3);
    ɵngcc0.ɵɵlistener("click", function UploadButtonComponent_div_2_Template_button_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r21); const _r19 = ɵngcc0.ɵɵreference(7); return _r19.click(); });
    ɵngcc0.ɵɵelementStart(2, "mat-icon");
    ɵngcc0.ɵɵtext(3, "file_upload");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(4, UploadButtonComponent_div_2_span_4_Template, 3, 3, "span", 16);
    ɵngcc0.ɵɵtemplate(5, UploadButtonComponent_div_2_span_5_Template, 2, 1, "span", 17);
    ɵngcc0.ɵɵelementStart(6, "input", 18, 19);
    ɵngcc0.ɵɵlistener("change", function UploadButtonComponent_div_2_Template_input_change_6_listener($event) { ɵngcc0.ɵɵrestoreView(_r21); const ctx_r22 = ɵngcc0.ɵɵnextContext(); return ctx_r22.onDirectoryAdded($event); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("disabled", ctx_r1.isButtonDisabled());
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r1.staticTitle);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r1.staticTitle);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate("accept", ctx_r1.acceptedFilesType);
    ɵngcc0.ɵɵproperty("title", ctx_r1.tooltip);
    ɵngcc0.ɵɵattribute("disabled", ctx_r1.isButtonDisabled());
} }
function UploadVersionButtonComponent_div_1_button_1_span_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 8);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(2, 1, "FILE_UPLOAD.BUTTON.UPLOAD_FILE"));
} }
function UploadVersionButtonComponent_div_1_button_1_span_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 9);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r5 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r5.staticTitle);
} }
function UploadVersionButtonComponent_div_1_button_1_Template(rf, ctx) { if (rf & 1) {
    const _r8 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 3);
    ɵngcc0.ɵɵlistener("click", function UploadVersionButtonComponent_div_1_button_1_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r8); const _r6 = ɵngcc0.ɵɵreference(6); return _r6.click(); });
    ɵngcc0.ɵɵelementStart(1, "mat-icon");
    ɵngcc0.ɵɵtext(2, "file_upload");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(3, UploadVersionButtonComponent_div_1_button_1_span_3_Template, 3, 3, "span", 4);
    ɵngcc0.ɵɵtemplate(4, UploadVersionButtonComponent_div_1_button_1_span_4_Template, 2, 1, "span", 5);
    ɵngcc0.ɵɵelementStart(5, "input", 6, 7);
    ɵngcc0.ɵɵlistener("change", function UploadVersionButtonComponent_div_1_button_1_Template_input_change_5_listener($event) { ɵngcc0.ɵɵrestoreView(_r8); const ctx_r9 = ɵngcc0.ɵɵnextContext(2); return ctx_r9.onFilesAdded($event); })("click", function UploadVersionButtonComponent_div_1_button_1_Template_input_click_5_listener() { ɵngcc0.ɵɵrestoreView(_r8); const ctx_r10 = ɵngcc0.ɵɵnextContext(2); return ctx_r10.onClickUploadButton(); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("disabled", ctx_r2.isButtonDisabled());
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r2.staticTitle);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r2.staticTitle);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate("accept", ctx_r2.acceptedFilesType);
    ɵngcc0.ɵɵproperty("type", ctx_r2.file ? "button" : "file")("title", ctx_r2.tooltip);
    ɵngcc0.ɵɵattribute("disabled", ctx_r2.isButtonDisabled());
} }
function UploadVersionButtonComponent_div_1_button_2_span_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 14);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(2, 1, "FILE_UPLOAD.BUTTON.UPLOAD_FILE"));
} }
function UploadVersionButtonComponent_div_1_button_2_span_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 15);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r12 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r12.staticTitle);
} }
function UploadVersionButtonComponent_div_1_button_2_Template(rf, ctx) { if (rf & 1) {
    const _r15 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 3);
    ɵngcc0.ɵɵlistener("click", function UploadVersionButtonComponent_div_1_button_2_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r15); const _r13 = ɵngcc0.ɵɵreference(6); return _r13.click(); });
    ɵngcc0.ɵɵelementStart(1, "mat-icon");
    ɵngcc0.ɵɵtext(2, "file_upload");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(3, UploadVersionButtonComponent_div_1_button_2_span_3_Template, 3, 3, "span", 10);
    ɵngcc0.ɵɵtemplate(4, UploadVersionButtonComponent_div_1_button_2_span_4_Template, 2, 1, "span", 11);
    ɵngcc0.ɵɵelementStart(5, "input", 12, 13);
    ɵngcc0.ɵɵlistener("change", function UploadVersionButtonComponent_div_1_button_2_Template_input_change_5_listener($event) { ɵngcc0.ɵɵrestoreView(_r15); const ctx_r16 = ɵngcc0.ɵɵnextContext(2); return ctx_r16.onFilesAdded($event); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("disabled", ctx_r3.isButtonDisabled());
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r3.staticTitle);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r3.staticTitle);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate("accept", ctx_r3.acceptedFilesType);
    ɵngcc0.ɵɵproperty("title", ctx_r3.tooltip);
    ɵngcc0.ɵɵattribute("disabled", ctx_r3.isButtonDisabled());
} }
function UploadVersionButtonComponent_div_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div");
    ɵngcc0.ɵɵtemplate(1, UploadVersionButtonComponent_div_1_button_1_Template, 7, 7, "button", 2);
    ɵngcc0.ɵɵtemplate(2, UploadVersionButtonComponent_div_1_button_2_Template, 7, 6, "button", 2);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r0.multipleFiles);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.multipleFiles);
} }
function UploadVersionButtonComponent_div_2_span_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 20);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(2, 1, "FILE_UPLOAD.BUTTON.UPLOAD_FOLDER"));
} }
function UploadVersionButtonComponent_div_2_span_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 21);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r18 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r18.staticTitle);
} }
function UploadVersionButtonComponent_div_2_Template(rf, ctx) { if (rf & 1) {
    const _r21 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div");
    ɵngcc0.ɵɵelementStart(1, "button", 3);
    ɵngcc0.ɵɵlistener("click", function UploadVersionButtonComponent_div_2_Template_button_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r21); const _r19 = ɵngcc0.ɵɵreference(7); return _r19.click(); });
    ɵngcc0.ɵɵelementStart(2, "mat-icon");
    ɵngcc0.ɵɵtext(3, "file_upload");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(4, UploadVersionButtonComponent_div_2_span_4_Template, 3, 3, "span", 16);
    ɵngcc0.ɵɵtemplate(5, UploadVersionButtonComponent_div_2_span_5_Template, 2, 1, "span", 17);
    ɵngcc0.ɵɵelementStart(6, "input", 18, 19);
    ɵngcc0.ɵɵlistener("change", function UploadVersionButtonComponent_div_2_Template_input_change_6_listener($event) { ɵngcc0.ɵɵrestoreView(_r21); const ctx_r22 = ɵngcc0.ɵɵnextContext(); return ctx_r22.onDirectoryAdded($event); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("disabled", ctx_r1.isButtonDisabled());
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r1.staticTitle);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r1.staticTitle);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate("accept", ctx_r1.acceptedFilesType);
    ɵngcc0.ɵɵproperty("title", ctx_r1.tooltip);
    ɵngcc0.ɵɵattribute("disabled", ctx_r1.isButtonDisabled());
} }
const _c15 = ".adf-upload-button-file-container input{display:none}";
const _c16 = ["*"];
const _c17 = ["panel"];
function SearchComponent_ng_template_2_Template(rf, ctx) { }
const _c18 = function (a0) { return { $implicit: a0 }; };
const _c19 = ["searchTextInput"];
const _c20 = ["search"];
function SearchControlComponent_div_0_ng_template_6_mat_list_0_mat_list_item_1_h4_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "h4", 15);
    ɵngcc0.ɵɵpipe(1, "highlight");
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r14 = ɵngcc0.ɵɵnextContext();
    const idx_r10 = ctx_r14.index;
    const item_r9 = ctx_r14.$implicit;
    const ctx_r11 = ɵngcc0.ɵɵnextContext(4);
    ɵngcc0.ɵɵpropertyInterpolate1("id", "result_name_", idx_r10, "");
    ɵngcc0.ɵɵproperty("innerHtml", ɵngcc0.ɵɵpipeBind2(1, 3, item_r9.entry.name, ctx_r11.searchTerm), ɵngcc0.ɵɵsanitizeHtml);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", item_r9 == null ? null : item_r9.entry.name, " ");
} }
function SearchControlComponent_div_0_ng_template_6_mat_list_0_mat_list_item_1_ng_template_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "h4", 15);
} if (rf & 2) {
    const ctx_r15 = ɵngcc0.ɵɵnextContext();
    const idx_r10 = ctx_r15.index;
    const item_r9 = ctx_r15.$implicit;
    ɵngcc0.ɵɵpropertyInterpolate1("id", "result_name_", idx_r10, "");
    ɵngcc0.ɵɵproperty("innerHtml", item_r9.entry.name, ɵngcc0.ɵɵsanitizeHtml);
} }
function SearchControlComponent_div_0_ng_template_6_mat_list_0_mat_list_item_1_Template(rf, ctx) { if (rf & 1) {
    const _r17 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "mat-list-item", 9);
    ɵngcc0.ɵɵlistener("blur", function SearchControlComponent_div_0_ng_template_6_mat_list_0_mat_list_item_1_Template_mat_list_item_blur_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r17); const ctx_r16 = ɵngcc0.ɵɵnextContext(4); return ctx_r16.onBlur($event); })("keyup.arrowdown", function SearchControlComponent_div_0_ng_template_6_mat_list_0_mat_list_item_1_Template_mat_list_item_keyup_arrowdown_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r17); const ctx_r18 = ɵngcc0.ɵɵnextContext(4); return ctx_r18.onRowArrowDown($event); })("keyup.arrowup", function SearchControlComponent_div_0_ng_template_6_mat_list_0_mat_list_item_1_Template_mat_list_item_keyup_arrowup_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r17); const ctx_r19 = ɵngcc0.ɵɵnextContext(4); return ctx_r19.onRowArrowUp($event); })("click", function SearchControlComponent_div_0_ng_template_6_mat_list_0_mat_list_item_1_Template_mat_list_item_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r17); const item_r9 = ctx.$implicit; const ctx_r20 = ɵngcc0.ɵɵnextContext(4); return ctx_r20.elementClicked(item_r9); })("keyup.enter", function SearchControlComponent_div_0_ng_template_6_mat_list_0_mat_list_item_1_Template_mat_list_item_keyup_enter_0_listener() { ɵngcc0.ɵɵrestoreView(_r17); const item_r9 = ctx.$implicit; const ctx_r21 = ɵngcc0.ɵɵnextContext(4); return ctx_r21.elementClicked(item_r9); })("touchend", function SearchControlComponent_div_0_ng_template_6_mat_list_0_mat_list_item_1_Template_mat_list_item_touchend_0_listener() { ɵngcc0.ɵɵrestoreView(_r17); const item_r9 = ctx.$implicit; const ctx_r22 = ɵngcc0.ɵɵnextContext(4); return ctx_r22.elementClicked(item_r9); });
    ɵngcc0.ɵɵelementStart(1, "mat-icon", 10);
    ɵngcc0.ɵɵelement(2, "img", 11);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(3, SearchControlComponent_div_0_ng_template_6_mat_list_0_mat_list_item_1_h4_3_Template, 3, 6, "h4", 12);
    ɵngcc0.ɵɵtemplate(4, SearchControlComponent_div_0_ng_template_6_mat_list_0_mat_list_item_1_ng_template_4_Template, 1, 2, "ng-template", null, 13, ɵngcc0.ɵɵtemplateRefExtractor);
    ɵngcc0.ɵɵelementStart(6, "p", 14);
    ɵngcc0.ɵɵtext(7);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const item_r9 = ctx.$implicit;
    const idx_r10 = ctx.index;
    const _r12 = ɵngcc0.ɵɵreference(5);
    const ctx_r7 = ɵngcc0.ɵɵnextContext(4);
    ɵngcc0.ɵɵpropertyInterpolate1("id", "result_option_", idx_r10, "");
    ɵngcc0.ɵɵproperty("tabindex", 0);
    ɵngcc0.ɵɵattribute("data-automation-id", "autocomplete_for_" + item_r9.entry.name);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("alt", ctx_r7.getMimeType(item_r9))("src", ctx_r7.getMimeTypeIcon(item_r9), ɵngcc0.ɵɵsanitizeUrl);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r7.highlight)("ngIfElse", _r12);
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵtextInterpolate1(" ", item_r9 == null ? null : item_r9.entry.createdByUser.displayName, " ");
} }
function SearchControlComponent_div_0_ng_template_6_mat_list_0_mat_list_item_2_ng_content_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵprojection(0, 0, ["selector", "adf-empty-search-result", "*ngIf", "isNoSearchTemplatePresent() else defaultNoResult"]);
} }
const _c21 = function (a0) { return { searchTerm: a0 }; };
function SearchControlComponent_div_0_ng_template_6_mat_list_0_mat_list_item_2_ng_template_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "p", 14);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r25 = ɵngcc0.ɵɵnextContext(5);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind2(2, 1, "SEARCH.RESULTS.NONE", ɵngcc0.ɵɵpureFunction1(4, _c21, ctx_r25.searchTerm)));
} }
function SearchControlComponent_div_0_ng_template_6_mat_list_0_mat_list_item_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-list-item", 16);
    ɵngcc0.ɵɵtemplate(1, SearchControlComponent_div_0_ng_template_6_mat_list_0_mat_list_item_2_ng_content_1_Template, 1, 0, "ng-content", 17);
    ɵngcc0.ɵɵtemplate(2, SearchControlComponent_div_0_ng_template_6_mat_list_0_mat_list_item_2_ng_template_2_Template, 3, 6, "ng-template", null, 18, ɵngcc0.ɵɵtemplateRefExtractor);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const _r24 = ɵngcc0.ɵɵreference(3);
    const ctx_r8 = ɵngcc0.ɵɵnextContext(4);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r8.isNoSearchTemplatePresent())("ngIfElse", _r24);
} }
function SearchControlComponent_div_0_ng_template_6_mat_list_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-list", 6);
    ɵngcc0.ɵɵtemplate(1, SearchControlComponent_div_0_ng_template_6_mat_list_0_mat_list_item_1_Template, 8, 8, "mat-list-item", 7);
    ɵngcc0.ɵɵtemplate(2, SearchControlComponent_div_0_ng_template_6_mat_list_0_mat_list_item_2_Template, 4, 2, "mat-list-item", 8);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const data_r5 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", data_r5 == null ? null : data_r5.list == null ? null : data_r5.list.entries);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", (data_r5 == null ? null : data_r5.list == null ? null : data_r5.list.entries.length) === 0);
} }
function SearchControlComponent_div_0_ng_template_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, SearchControlComponent_div_0_ng_template_6_mat_list_0_Template, 3, 2, "mat-list", 5);
} if (rf & 2) {
    ɵngcc0.ɵɵnextContext();
    const _r1 = ɵngcc0.ɵɵreference(2);
    ɵngcc0.ɵɵproperty("ngIf", _r1 == null ? null : _r1.isSearchBarActive());
} }
function SearchControlComponent_div_0_Template(rf, ctx) { if (rf & 1) {
    const _r28 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div");
    ɵngcc0.ɵɵelementStart(1, "adf-search-text-input", 1, 2);
    ɵngcc0.ɵɵlistener("searchChange", function SearchControlComponent_div_0_Template_adf_search_text_input_searchChange_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r28); const ctx_r27 = ɵngcc0.ɵɵnextContext(); return ctx_r27.inputChange($event); })("reset", function SearchControlComponent_div_0_Template_adf_search_text_input_reset_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r28); const ctx_r29 = ɵngcc0.ɵɵnextContext(); return ctx_r29.onReset($event); })("selectResult", function SearchControlComponent_div_0_Template_adf_search_text_input_selectResult_1_listener() { ɵngcc0.ɵɵrestoreView(_r28); const ctx_r30 = ɵngcc0.ɵɵnextContext(); return ctx_r30.onSelectFirstResult(); })("submit", function SearchControlComponent_div_0_Template_adf_search_text_input_submit_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r28); const ctx_r31 = ɵngcc0.ɵɵnextContext(); return ctx_r31.submit.emit($event); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(3, "adf-search", 3, 4);
    ɵngcc0.ɵɵtemplate(6, SearchControlComponent_div_0_ng_template_6_Template, 1, 1, "ng-template");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const _r3 = ɵngcc0.ɵɵreference(5);
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("searchTerm", ctx_r0.searchTerm)("expandable", ctx_r0.expandable)("autocomplete", ctx_r0.autocomplete)("liveSearchEnabled", ctx_r0.liveSearchEnabled)("focusListener", ctx_r0.focusSubject.asObservable())("searchAutocomplete", _r3);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("maxResults", ctx_r0.liveSearchMaxResults);
} }
function SearchTextComponent_button_3_Template(rf, ctx) { if (rf & 1) {
    const _r2 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 2);
    ɵngcc0.ɵɵlistener("click", function SearchTextComponent_button_3_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r2); const ctx_r1 = ɵngcc0.ɵɵnextContext(); return ctx_r1.clear(); });
    ɵngcc0.ɵɵelementStart(1, "mat-icon");
    ɵngcc0.ɵɵtext(2, "close");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} }
function SearchRadioComponent_mat_radio_button_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-radio-button", 3);
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵelementStart(2, "div", 4);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵpipe(5, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const option_r2 = ctx.$implicit;
    ɵngcc0.ɵɵproperty("value", option_r2.value);
    ɵngcc0.ɵɵattribute("data-automation-id", "search-radio-" + ɵngcc0.ɵɵpipeBind1(1, 4, option_r2.name));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵpropertyInterpolate("matTooltip", ɵngcc0.ɵɵpipeBind1(3, 6, option_r2.name));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(5, 8, option_r2.name), " ");
} }
function SearchRadioComponent_div_2_button_1_Template(rf, ctx) { if (rf & 1) {
    const _r6 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 7);
    ɵngcc0.ɵɵlistener("click", function SearchRadioComponent_div_2_button_1_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r6); const ctx_r5 = ɵngcc0.ɵɵnextContext(2); return ctx_r5.options.showLessItems(); });
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵelementStart(2, "mat-icon");
    ɵngcc0.ɵɵtext(3, "keyboard_arrow_up");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(1, 1, "SEARCH.FILTER.ACTIONS.SHOW-LESS"));
} }
function SearchRadioComponent_div_2_button_2_Template(rf, ctx) { if (rf & 1) {
    const _r8 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 7);
    ɵngcc0.ɵɵlistener("click", function SearchRadioComponent_div_2_button_2_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r8); const ctx_r7 = ɵngcc0.ɵɵnextContext(2); return ctx_r7.options.showMoreItems(); });
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵelementStart(2, "mat-icon");
    ɵngcc0.ɵɵtext(3, "keyboard_arrow_down");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(1, 1, "SEARCH.FILTER.ACTIONS.SHOW-MORE"));
} }
function SearchRadioComponent_div_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 5);
    ɵngcc0.ɵɵtemplate(1, SearchRadioComponent_div_2_button_1_Template, 4, 3, "button", 6);
    ɵngcc0.ɵɵtemplate(2, SearchRadioComponent_div_2_button_2_Template, 4, 3, "button", 6);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r1.options.canShowLessItems);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r1.options.canShowMoreItems);
} }
function SearchSliderComponent_div_1_Template(rf, ctx) { if (rf & 1) {
    const _r2 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 2);
    ɵngcc0.ɵɵelementStart(1, "button", 3);
    ɵngcc0.ɵɵlistener("click", function SearchSliderComponent_div_1_Template_button_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r2); const ctx_r1 = ɵngcc0.ɵɵnextContext(); return ctx_r1.clear(); });
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(3, 1, "SEARCH.FILTER.ACTIONS.CLEAR"), " ");
} }
function SearchNumberRangeComponent_mat_error_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-error", 8);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 1, "SEARCH.FILTER.VALIDATION.INVALID-FORMAT"), " ");
} }
function SearchNumberRangeComponent_mat_error_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-error", 9);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 1, "SEARCH.FILTER.VALIDATION.REQUIRED-VALUE"), " ");
} }
function SearchNumberRangeComponent_mat_error_9_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-error", 10);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 1, "SEARCH.FILTER.VALIDATION.INVALID-FORMAT"), " ");
} }
function SearchNumberRangeComponent_mat_error_10_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-error", 11);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 1, "SEARCH.FILTER.VALIDATION.REQUIRED-VALUE"), " ");
} }
function SearchNumberRangeComponent_div_11_Template(rf, ctx) { if (rf & 1) {
    const _r6 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 12);
    ɵngcc0.ɵɵelementStart(1, "button", 13);
    ɵngcc0.ɵɵlistener("click", function SearchNumberRangeComponent_div_11_Template_button_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r6); const ctx_r5 = ɵngcc0.ɵɵnextContext(); return ctx_r5.clear(); });
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(4, "button", 14);
    ɵngcc0.ɵɵtext(5);
    ɵngcc0.ɵɵpipe(6, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r4 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(3, 3, "SEARCH.FILTER.ACTIONS.CLEAR"), " ");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("disabled", !ctx_r4.form.valid);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(6, 5, "SEARCH.FILTER.ACTIONS.APPLY"), " ");
} }
function SearchCheckListComponent_mat_checkbox_1_Template(rf, ctx) { if (rf & 1) {
    const _r6 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "mat-checkbox", 3);
    ɵngcc0.ɵɵlistener("keydown.enter", function SearchCheckListComponent_mat_checkbox_1_Template_mat_checkbox_keydown_enter_0_listener() { const option_r3 = ctx.$implicit; return option_r3.checked = !option_r3.checked; })("change", function SearchCheckListComponent_mat_checkbox_1_Template_mat_checkbox_change_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r6); const option_r3 = ctx.$implicit; const ctx_r5 = ɵngcc0.ɵɵnextContext(); return ctx_r5.changeHandler($event, option_r3); });
    ɵngcc0.ɵɵelementStart(1, "div", 4);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵpipe(4, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const option_r3 = ctx.$implicit;
    ɵngcc0.ɵɵproperty("checked", option_r3.checked);
    ɵngcc0.ɵɵattribute("data-automation-id", "checkbox-" + option_r3.name);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate("matTooltip", ɵngcc0.ɵɵpipeBind1(2, 4, option_r3.name));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(4, 6, option_r3.name), " ");
} }
function SearchCheckListComponent_div_2_Template(rf, ctx) { if (rf & 1) {
    const _r8 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 5);
    ɵngcc0.ɵɵelementStart(1, "button", 6);
    ɵngcc0.ɵɵlistener("click", function SearchCheckListComponent_div_2_Template_button_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r8); const ctx_r7 = ɵngcc0.ɵɵnextContext(); return ctx_r7.clear(); });
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(3, 1, "SEARCH.FILTER.ACTIONS.CLEAR-ALL"), " ");
} }
function SearchCheckListComponent_div_3_button_5_Template(rf, ctx) { if (rf & 1) {
    const _r12 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 7);
    ɵngcc0.ɵɵlistener("click", function SearchCheckListComponent_div_3_button_5_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r12); const ctx_r11 = ɵngcc0.ɵɵnextContext(2); return ctx_r11.options.showLessItems(); });
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵelementStart(2, "mat-icon");
    ɵngcc0.ɵɵtext(3, "keyboard_arrow_up");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(1, 1, "SEARCH.FILTER.ACTIONS.SHOW-LESS"));
} }
function SearchCheckListComponent_div_3_button_6_Template(rf, ctx) { if (rf & 1) {
    const _r14 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 7);
    ɵngcc0.ɵɵlistener("click", function SearchCheckListComponent_div_3_button_6_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r14); const ctx_r13 = ɵngcc0.ɵɵnextContext(2); return ctx_r13.options.showMoreItems(); });
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵelementStart(2, "mat-icon");
    ɵngcc0.ɵɵtext(3, "keyboard_arrow_down");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(1, 1, "SEARCH.FILTER.ACTIONS.SHOW-MORE"));
} }
function SearchCheckListComponent_div_3_Template(rf, ctx) { if (rf & 1) {
    const _r16 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 5);
    ɵngcc0.ɵɵelementStart(1, "button", 7);
    ɵngcc0.ɵɵlistener("click", function SearchCheckListComponent_div_3_Template_button_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r16); const ctx_r15 = ɵngcc0.ɵɵnextContext(); return ctx_r15.clear(); });
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementStart(3, "mat-icon");
    ɵngcc0.ɵɵtext(4, "clear");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(5, SearchCheckListComponent_div_3_button_5_Template, 4, 3, "button", 8);
    ɵngcc0.ɵɵtemplate(6, SearchCheckListComponent_div_3_button_6_Template, 4, 3, "button", 8);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(2, 3, "SEARCH.FILTER.ACTIONS.CLEAR-ALL"));
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r2.options.canShowLessItems);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r2.options.canShowMoreItems);
} }
const _c22 = function (a0) { return { requiredFormat: a0 }; };
function SearchDateRangeComponent_mat_error_7_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-error", 11);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind2(2, 1, ctx_r1.getFromValidationMessage(), ɵngcc0.ɵɵpureFunction1(4, _c22, ctx_r1.datePickerFormat)), " ");
} }
function SearchDateRangeComponent_mat_error_14_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-error", 12);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind2(2, 1, ctx_r3.getToValidationMessage(), ɵngcc0.ɵɵpureFunction1(4, _c22, ctx_r3.datePickerFormat)), " ");
} }
function SearchDateRangeComponent_div_15_Template(rf, ctx) { if (rf & 1) {
    const _r6 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 13);
    ɵngcc0.ɵɵelementStart(1, "button", 14);
    ɵngcc0.ɵɵlistener("click", function SearchDateRangeComponent_div_15_Template_button_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r6); const ctx_r5 = ɵngcc0.ɵɵnextContext(); return ctx_r5.clear(); });
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(4, "button", 15);
    ɵngcc0.ɵɵtext(5);
    ɵngcc0.ɵɵpipe(6, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r4 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(3, 3, "SEARCH.FILTER.ACTIONS.CLEAR"), " ");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("disabled", !ctx_r4.form.valid);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(6, 5, "SEARCH.FILTER.ACTIONS.APPLY"), " ");
} }
function SearchDatetimeRangeComponent_mat_error_7_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-error", 11);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind2(2, 1, ctx_r1.getFromValidationMessage(), ɵngcc0.ɵɵpureFunction1(4, _c22, ctx_r1.datetimePickerFormat)), " ");
} }
function SearchDatetimeRangeComponent_mat_error_14_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-error", 12);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind2(2, 1, ctx_r3.getToValidationMessage(), ɵngcc0.ɵɵpureFunction1(4, _c22, ctx_r3.datetimePickerFormat)), " ");
} }
function SearchDatetimeRangeComponent_div_15_Template(rf, ctx) { if (rf & 1) {
    const _r6 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 13);
    ɵngcc0.ɵɵelementStart(1, "button", 14);
    ɵngcc0.ɵɵlistener("click", function SearchDatetimeRangeComponent_div_15_Template_button_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r6); const ctx_r5 = ɵngcc0.ɵɵnextContext(); return ctx_r5.clear(); });
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(4, "button", 15);
    ɵngcc0.ɵɵtext(5);
    ɵngcc0.ɵɵpipe(6, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r4 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(3, 3, "SEARCH.FILTER.ACTIONS.CLEAR"), " ");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("disabled", !ctx_r4.form.valid);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(6, 5, "SEARCH.FILTER.ACTIONS.APPLY"), " ");
} }
const _c23 = ".adf-search-date-range>form{display:inline-flex;flex-direction:column;width:100%}";
const _c24 = ["content"];
function SearchFilterComponent_button_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "button", 4);
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵpropertyInterpolate("matTooltip", ɵngcc0.ɵɵpipeBind1(1, 2, "SEARCH.FILTER.BUTTONS.RESET-ALL.TOOLTIP"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(3, 4, "SEARCH.FILTER.BUTTONS.RESET-ALL.LABEL"), " ");
} }
function SearchFilterComponent_mat_expansion_panel_2_Template(rf, ctx) { if (rf & 1) {
    const _r5 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "mat-expansion-panel", 5);
    ɵngcc0.ɵɵlistener("expandedChange", function SearchFilterComponent_mat_expansion_panel_2_Template_mat_expansion_panel_expandedChange_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r5); const category_r3 = ctx.$implicit; return category_r3.expanded = $event; });
    ɵngcc0.ɵɵelementStart(1, "mat-expansion-panel-header");
    ɵngcc0.ɵɵelementStart(2, "mat-panel-title");
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵpipe(4, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(5, "adf-search-widget-container", 6);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const category_r3 = ctx.$implicit;
    ɵngcc0.ɵɵproperty("expanded", category_r3.expanded);
    ɵngcc0.ɵɵattribute("data-automation-id", "expansion-panel-" + category_r3.name);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(4, 6, category_r3.name), " ");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("id", category_r3.id)("selector", category_r3.component.selector)("settings", category_r3.component.settings);
} }
function SearchFilterComponent_ng_container_3_mat_expansion_panel_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-expansion-panel", 8);
    ɵngcc0.ɵɵelementStart(1, "mat-expansion-panel-header");
    ɵngcc0.ɵɵelementStart(2, "mat-panel-title");
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵpipe(4, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(5, "adf-search-facet-field", 9);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const field_r7 = ctx.$implicit;
    const ctx_r6 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("expanded", ctx_r6.shouldExpand(field_r7));
    ɵngcc0.ɵɵattribute("data-automation-id", "expansion-panel-" + field_r7.label);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(4, 4, field_r7.label));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("field", field_r7);
} }
function SearchFilterComponent_ng_container_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, SearchFilterComponent_ng_container_3_mat_expansion_panel_1_Template, 6, 6, "mat-expansion-panel", 7);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r2.facetFiltersService.responseFacets);
} }
function SearchChipListComponent_ng_container_1_mat_chip_1_Template(rf, ctx) { if (rf & 1) {
    const _r4 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "mat-chip", 3);
    ɵngcc0.ɵɵlistener("click", function SearchChipListComponent_ng_container_1_mat_chip_1_Template_mat_chip_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r4); const ctx_r3 = ɵngcc0.ɵɵnextContext(2); return ctx_r3.facetFiltersService.resetAllSelectedBuckets(); });
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵpropertyInterpolate("matTooltip", ɵngcc0.ɵɵpipeBind1(1, 2, "SEARCH.FILTER.BUTTONS.CLEAR-ALL.TOOLTIP"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(3, 4, "SEARCH.FILTER.BUTTONS.CLEAR-ALL.LABEL"), " ");
} }
function SearchChipListComponent_ng_container_1_mat_chip_2_Template(rf, ctx) { if (rf & 1) {
    const _r7 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "mat-chip", 4);
    ɵngcc0.ɵɵlistener("removed", function SearchChipListComponent_ng_container_1_mat_chip_2_Template_mat_chip_removed_0_listener() { ɵngcc0.ɵɵrestoreView(_r7); const selection_r5 = ctx.$implicit; const ctx_r6 = ɵngcc0.ɵɵnextContext(2); return ctx_r6.facetFiltersService.unselectFacetBucket(selection_r5.field, selection_r5.bucket); });
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementStart(3, "mat-icon", 5);
    ɵngcc0.ɵɵtext(4, "cancel");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const selection_r5 = ctx.$implicit;
    ɵngcc0.ɵɵproperty("removable", true);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 2, selection_r5.bucket.display || selection_r5.bucket.label), " ");
} }
function SearchChipListComponent_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, SearchChipListComponent_ng_container_1_mat_chip_1_Template, 4, 6, "mat-chip", 1);
    ɵngcc0.ɵɵtemplate(2, SearchChipListComponent_ng_container_1_mat_chip_2_Template, 5, 4, "mat-chip", 2);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.clearAll && ctx_r0.facetFiltersService.selectedBuckets.length > 1);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r0.facetFiltersService.selectedBuckets);
} }
function SearchPanelComponent_adf_search_filter_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "adf-search-filter", 2);
} if (rf & 2) {
    ɵngcc0.ɵɵproperty("showContextFacets", false);
} }
const _c25 = ["filterContainer"];
const _c26 = function (a0) { return { "adf-icon-active": a0 }; };
function SearchFilterContainerComponent_div_0_Template(rf, ctx) { if (rf & 1) {
    const _r5 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 1);
    ɵngcc0.ɵɵelementStart(1, "button", 2, 3);
    ɵngcc0.ɵɵlistener("click", function SearchFilterContainerComponent_div_0_Template_button_click_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r5); return $event.stopPropagation(); })("menuOpened", function SearchFilterContainerComponent_div_0_Template_button_menuOpened_1_listener() { ɵngcc0.ɵɵrestoreView(_r5); const ctx_r6 = ɵngcc0.ɵɵnextContext(); return ctx_r6.onMenuOpen(); })("keyup.enter", function SearchFilterContainerComponent_div_0_Template_button_keyup_enter_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r5); return $event.stopPropagation(); });
    ɵngcc0.ɵɵelement(3, "adf-icon", 4);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(4, "mat-menu", 5, 6);
    ɵngcc0.ɵɵlistener("closed", function SearchFilterContainerComponent_div_0_Template_mat_menu_closed_4_listener() { ɵngcc0.ɵɵrestoreView(_r5); const ctx_r8 = ɵngcc0.ɵɵnextContext(); return ctx_r8.onClosed(); });
    ɵngcc0.ɵɵelementStart(6, "div", 7, 8);
    ɵngcc0.ɵɵlistener("keydown.tab", function SearchFilterContainerComponent_div_0_Template_div_keydown_tab_6_listener($event) { ɵngcc0.ɵɵrestoreView(_r5); return $event.stopPropagation(); });
    ɵngcc0.ɵɵelementStart(8, "div", 9);
    ɵngcc0.ɵɵlistener("click", function SearchFilterContainerComponent_div_0_Template_div_click_8_listener($event) { ɵngcc0.ɵɵrestoreView(_r5); return $event.stopPropagation(); });
    ɵngcc0.ɵɵelementStart(9, "div", 10);
    ɵngcc0.ɵɵtext(10);
    ɵngcc0.ɵɵpipe(11, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(12, "adf-search-widget-container", 11);
    ɵngcc0.ɵɵlistener("keypress", function SearchFilterContainerComponent_div_0_Template_adf_search_widget_container_keypress_12_listener($event) { ɵngcc0.ɵɵrestoreView(_r5); const _r1 = ɵngcc0.ɵɵreference(2); const ctx_r11 = ɵngcc0.ɵɵnextContext(); return ctx_r11.onKeyPressed($event, _r1); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(13, "mat-dialog-actions", 12);
    ɵngcc0.ɵɵelementStart(14, "button", 13);
    ɵngcc0.ɵɵlistener("click", function SearchFilterContainerComponent_div_0_Template_button_click_14_listener($event) { ɵngcc0.ɵɵrestoreView(_r5); const ctx_r12 = ɵngcc0.ɵɵnextContext(); return ctx_r12.onClearButtonClick($event); });
    ɵngcc0.ɵɵtext(15);
    ɵngcc0.ɵɵpipe(16, "uppercase");
    ɵngcc0.ɵɵpipe(17, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(18, "button", 14);
    ɵngcc0.ɵɵlistener("click", function SearchFilterContainerComponent_div_0_Template_button_click_18_listener() { ɵngcc0.ɵɵrestoreView(_r5); const ctx_r13 = ɵngcc0.ɵɵnextContext(); return ctx_r13.onApply(); });
    ɵngcc0.ɵɵtext(19);
    ɵngcc0.ɵɵpipe(20, "uppercase");
    ɵngcc0.ɵɵpipe(21, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const _r1 = ɵngcc0.ɵɵreference(2);
    const _r2 = ɵngcc0.ɵɵreference(5);
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("matMenuTriggerFor", _r2)("matTooltip", ctx_r0.getTooltipTranslation(ctx_r0.col == null ? null : ctx_r0.col.title));
    ɵngcc0.ɵɵattribute("aria-label", ctx_r0.getTooltipTranslation(ctx_r0.col == null ? null : ctx_r0.col.title));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(22, _c26, ctx_r0.isActive() || _r1.menuOpen))("matBadgeHidden", !ctx_r0.isActive());
    ɵngcc0.ɵɵadvance(7);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(11, 12, ctx_r0.category == null ? null : ctx_r0.category.name));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("id", ctx_r0.category == null ? null : ctx_r0.category.id)("selector", ctx_r0.category == null ? null : ctx_r0.category.component == null ? null : ctx_r0.category.component.selector)("settings", ctx_r0.category == null ? null : ctx_r0.category.component == null ? null : ctx_r0.category.component.settings)("value", ctx_r0.initialValue);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate1("", ɵngcc0.ɵɵpipeBind1(16, 14, ɵngcc0.ɵɵpipeBind1(17, 16, "SEARCH.SEARCH_HEADER.CLEAR")), " ");
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵtextInterpolate1("", ɵngcc0.ɵɵpipeBind1(20, 18, ɵngcc0.ɵɵpipeBind1(21, 20, "SEARCH.SEARCH_HEADER.APPLY")), " ");
} }
function SearchFormComponent_ng_container_0_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "button", 1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementStart(3, "span", 2);
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵpipe(5, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const forms_r1 = ɵngcc0.ɵɵnextContext().ngIf;
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("title", ɵngcc0.ɵɵpipeBind1(2, 2, ctx_r2.getSelected(forms_r1)));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(5, 4, ctx_r2.getSelected(forms_r1)), " ");
} }
function SearchFormComponent_ng_container_0_ng_container_2_button_11_Template(rf, ctx) { if (rf & 1) {
    const _r10 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 9);
    ɵngcc0.ɵɵlistener("click", function SearchFormComponent_ng_container_0_ng_container_2_button_11_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r10); const form_r8 = ctx.$implicit; const ctx_r9 = ɵngcc0.ɵɵnextContext(3); return ctx_r9.onSelectionChange(form_r8); });
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const form_r8 = ctx.$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 1, form_r8.name), " ");
} }
function SearchFormComponent_ng_container_0_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "button", 3, 4);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementStart(4, "span", 2);
    ɵngcc0.ɵɵtext(5);
    ɵngcc0.ɵɵpipe(6, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(7, "mat-icon", 5);
    ɵngcc0.ɵɵtext(8, "expand_more");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(9, "mat-menu", 6, 7);
    ɵngcc0.ɵɵtemplate(11, SearchFormComponent_ng_container_0_ng_container_2_button_11_Template, 3, 3, "button", 8);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const _r5 = ɵngcc0.ɵɵreference(2);
    const _r6 = ɵngcc0.ɵɵreference(10);
    const forms_r1 = ɵngcc0.ɵɵnextContext().ngIf;
    const ctx_r3 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("matMenuTriggerFor", _r6)("title", ɵngcc0.ɵɵpipeBind1(3, 7, ctx_r3.getSelected(forms_r1)))("matMenuTriggerRestoreFocus", true);
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(6, 9, ctx_r3.getSelected(forms_r1)), " ");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵclassProp("adf-search-form-icon-selected", _r5.menuOpen);
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵproperty("ngForOf", forms_r1);
} }
function SearchFormComponent_ng_container_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, SearchFormComponent_ng_container_0_ng_container_1_Template, 6, 6, "ng-container", 0);
    ɵngcc0.ɵɵtemplate(2, SearchFormComponent_ng_container_0_ng_container_2_Template, 12, 11, "ng-container", 0);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const forms_r1 = ctx.ngIf;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", forms_r1.length === 1);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", forms_r1.length > 1);
} }
function SearchFilterChipsComponent_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelement(1, "adf-search-widget-chip", 3);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const category_r2 = ctx.$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("category", category_r2);
} }
function SearchFilterChipsComponent_ng_container_2_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelement(1, "adf-search-facet-chip", 4);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const field_r4 = ctx.$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("field", field_r4);
    ɵngcc0.ɵɵattribute("data-automation-id", "search-fact-chip-" + field_r4.field);
} }
function SearchFilterChipsComponent_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, SearchFilterChipsComponent_ng_container_2_ng_container_1_Template, 2, 2, "ng-container", 1);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r1.facetFiltersService.responseFacets);
} }
const _c27 = [[["filter-title"]], [["filter-content"]], [["filter-actions"]]];
const _c28 = ["filter-title", "filter-content", "filter-actions"];
function SearchFacetFieldComponent_button_9_Template(rf, ctx) { if (rf & 1) {
    const _r5 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 10);
    ɵngcc0.ɵɵlistener("click", function SearchFacetFieldComponent_button_9_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r5); const ctx_r4 = ɵngcc0.ɵɵnextContext(); return ctx_r4.field.buckets.filterText = ""; });
    ɵngcc0.ɵɵelementStart(1, "mat-icon");
    ɵngcc0.ɵɵtext(2, "close");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} }
function SearchFacetFieldComponent_mat_checkbox_11_Template(rf, ctx) { if (rf & 1) {
    const _r8 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "mat-checkbox", 11);
    ɵngcc0.ɵɵlistener("change", function SearchFacetFieldComponent_mat_checkbox_11_Template_mat_checkbox_change_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r8); const bucket_r6 = ctx.$implicit; const ctx_r7 = ɵngcc0.ɵɵnextContext(); return ctx_r7.onToggleBucket($event, ctx_r7.field, bucket_r6); });
    ɵngcc0.ɵɵelementStart(1, "div", 12);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵpipe(4, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const bucket_r6 = ctx.$implicit;
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("checked", bucket_r6.checked);
    ɵngcc0.ɵɵattribute("data-automation-id", "checkbox-" + ctx_r1.field.label + "-" + (bucket_r6.display || bucket_r6.label));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate2("matTooltip", "", ɵngcc0.ɵɵpipeBind1(2, 6, bucket_r6.display || bucket_r6.label), " ", ctx_r1.getBucketCountDisplay(bucket_r6), "");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate2(" ", ɵngcc0.ɵɵpipeBind1(4, 8, bucket_r6.display || bucket_r6.label), " ", ctx_r1.getBucketCountDisplay(bucket_r6), " ");
} }
function SearchFacetFieldComponent_div_12_button_1_Template(rf, ctx) { if (rf & 1) {
    const _r11 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 15);
    ɵngcc0.ɵɵlistener("click", function SearchFacetFieldComponent_div_12_button_1_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r11); const ctx_r10 = ɵngcc0.ɵɵnextContext(2); return ctx_r10.resetSelectedBuckets(ctx_r10.field); });
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 1, "SEARCH.FILTER.ACTIONS.CLEAR-ALL"), " ");
} }
function SearchFacetFieldComponent_div_12_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 13);
    ɵngcc0.ɵɵtemplate(1, SearchFacetFieldComponent_div_12_button_1_Template, 3, 3, "button", 14);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r2.canResetSelectedBuckets(ctx_r2.field));
} }
function SearchFacetFieldComponent_div_13_button_1_Template(rf, ctx) { if (rf & 1) {
    const _r16 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 17);
    ɵngcc0.ɵɵlistener("click", function SearchFacetFieldComponent_div_13_button_1_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r16); const ctx_r15 = ɵngcc0.ɵɵnextContext(2); return ctx_r15.resetSelectedBuckets(ctx_r15.field); });
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵelementStart(2, "mat-icon");
    ɵngcc0.ɵɵtext(3, "clear");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(1, 1, "SEARCH.FILTER.ACTIONS.CLEAR-ALL"));
} }
function SearchFacetFieldComponent_div_13_button_2_Template(rf, ctx) { if (rf & 1) {
    const _r18 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 17);
    ɵngcc0.ɵɵlistener("click", function SearchFacetFieldComponent_div_13_button_2_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r18); const ctx_r17 = ɵngcc0.ɵɵnextContext(2); return ctx_r17.field.buckets.showLessItems(); });
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵelementStart(2, "mat-icon");
    ɵngcc0.ɵɵtext(3, "keyboard_arrow_up");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(1, 1, "SEARCH.FILTER.ACTIONS.SHOW-LESS"));
} }
function SearchFacetFieldComponent_div_13_button_3_Template(rf, ctx) { if (rf & 1) {
    const _r20 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 17);
    ɵngcc0.ɵɵlistener("click", function SearchFacetFieldComponent_div_13_button_3_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r20); const ctx_r19 = ɵngcc0.ɵɵnextContext(2); return ctx_r19.field.buckets.showMoreItems(); });
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵelementStart(2, "mat-icon");
    ɵngcc0.ɵɵtext(3, "keyboard_arrow_down");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(1, 1, "SEARCH.FILTER.ACTIONS.SHOW-MORE"));
} }
function SearchFacetFieldComponent_div_13_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 13);
    ɵngcc0.ɵɵtemplate(1, SearchFacetFieldComponent_div_13_button_1_Template, 4, 3, "button", 16);
    ɵngcc0.ɵɵtemplate(2, SearchFacetFieldComponent_div_13_button_2_Template, 4, 3, "button", 16);
    ɵngcc0.ɵɵtemplate(3, SearchFacetFieldComponent_div_13_button_3_Template, 4, 3, "button", 16);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r3.canResetSelectedBuckets(ctx_r3.field));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r3.field.buckets.canShowLessItems);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r3.field.buckets.canShowMoreItems);
} }
const _c29 = ["menuContainer"];
const _c30 = ["menuTrigger"];
function SearchWidgetChipComponent_ng_container_8_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtext(1, ":");
    ɵngcc0.ɵɵelementContainerEnd();
} }
function SearchWidgetChipComponent_span_10_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 3);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const displayValue_r7 = ctx.ngIf;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" \u00A0", ɵngcc0.ɵɵpipeBind1(2, 1, displayValue_r7), " ");
} }
function SearchWidgetChipComponent_ng_container_22_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r5 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1("(", ctx_r5.category.component.settings.unit, ")");
} }
function SearchFacetChipComponent_ng_container_8_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtext(1, ":");
    ɵngcc0.ɵɵelementContainerEnd();
} }
function SearchFacetChipComponent_span_10_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 3);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const displayValue_r6 = ctx.ngIf;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" \u00A0 ", ɵngcc0.ɵɵpipeBind1(2, 1, displayValue_r6), " ");
} }
function DropdownSitesComponent_mat_option_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-option", 5);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const site_r3 = ctx.$implicit;
    ɵngcc0.ɵɵproperty("value", site_r3);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 2, site_r3.entry.title), " ");
} }
function DropdownSitesComponent_mat_option_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-option", 6);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 1, "ADF_DROPDOWN.LOADING"), " ");
} }
const _c31 = ["dropdown"];
function BreadcrumbComponent_nav_0_button_2_Template(rf, ctx) { if (rf & 1) {
    const _r6 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 6);
    ɵngcc0.ɵɵlistener("click", function BreadcrumbComponent_nav_0_button_2_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r6); const ctx_r5 = ɵngcc0.ɵɵnextContext(2); return ctx_r5.open(); });
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵelementStart(2, "div", 7);
    ɵngcc0.ɵɵelementStart(3, "mat-icon");
    ɵngcc0.ɵɵtext(4, "folder");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(5, "mat-icon", 8);
    ɵngcc0.ɵɵtext(6, "arrow_drop_down");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵattribute("aria-label", ɵngcc0.ɵɵpipeBind1(1, 5, "BREADCRUMB.ARIA-LABEL.DROPDOWN"));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵclassProp("adf-isRoot", !ctx_r2.hasPreviousNodes());
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵclassProp("adf-isRoot", !ctx_r2.hasPreviousNodes());
} }
function BreadcrumbComponent_nav_0_mat_select_3_mat_option_2_Template(rf, ctx) { if (rf & 1) {
    const _r11 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "mat-option", 12);
    ɵngcc0.ɵɵlistener("click", function BreadcrumbComponent_nav_0_mat_select_3_mat_option_2_Template_mat_option_click_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r11); const node_r9 = ctx.$implicit; const ctx_r10 = ɵngcc0.ɵɵnextContext(3); return ctx_r10.onRoutePathClick(node_r9, $event); })("onSelectionChange", function BreadcrumbComponent_nav_0_mat_select_3_mat_option_2_Template_mat_option_onSelectionChange_0_listener() { ɵngcc0.ɵɵrestoreView(_r11); const node_r9 = ctx.$implicit; const ctx_r12 = ɵngcc0.ɵɵnextContext(3); return ctx_r12.onRouteClick(node_r9); });
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const node_r9 = ctx.$implicit;
    const ctx_r8 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵproperty("disabled", ctx_r8.readOnly);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 2, node_r9.name), " ");
} }
function BreadcrumbComponent_nav_0_mat_select_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-select", 9, 10);
    ɵngcc0.ɵɵtemplate(2, BreadcrumbComponent_nav_0_mat_select_3_mat_option_2_Template, 3, 4, "mat-option", 11);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r3.previousNodes);
} }
function BreadcrumbComponent_nav_0_div_4_a_2_Template(rf, ctx) { if (rf & 1) {
    const _r20 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "a", 17);
    ɵngcc0.ɵɵlistener("click", function BreadcrumbComponent_nav_0_div_4_a_2_Template_a_click_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r20); const item_r13 = ɵngcc0.ɵɵnextContext().$implicit; const ctx_r18 = ɵngcc0.ɵɵnextContext(2); return ctx_r18.onRoutePathClick(item_r13, $event); });
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const item_r13 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵattribute("data-automation-id", "breadcrumb_" + item_r13.name);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 2, item_r13.name), " ");
} }
function BreadcrumbComponent_nav_0_div_4_div_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 18);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const item_r13 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 1, item_r13.name), " ");
} }
function BreadcrumbComponent_nav_0_div_4_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-icon", 19);
    ɵngcc0.ɵɵtext(1, " chevron_right ");
    ɵngcc0.ɵɵelementEnd();
} }
function BreadcrumbComponent_nav_0_div_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 13);
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵtemplate(2, BreadcrumbComponent_nav_0_div_4_a_2_Template, 3, 4, "a", 14);
    ɵngcc0.ɵɵtemplate(3, BreadcrumbComponent_nav_0_div_4_div_3_Template, 3, 3, "div", 15);
    ɵngcc0.ɵɵtemplate(4, BreadcrumbComponent_nav_0_div_4_mat_icon_4_Template, 2, 0, "mat-icon", 16);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const item_r13 = ctx.$implicit;
    const last_r14 = ctx.last;
    const ctx_r4 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵclassProp("adf-active", last_r14);
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(1, 6, item_r13.name));
    ɵngcc0.ɵɵproperty("ngSwitch", ctx_r4.breadcrumbItemIsAnchor(last_r14));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngSwitchCase", true);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", !last_r14);
} }
function BreadcrumbComponent_nav_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "nav", 2);
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵtemplate(2, BreadcrumbComponent_nav_0_button_2_Template, 7, 7, "button", 3);
    ɵngcc0.ɵɵtemplate(3, BreadcrumbComponent_nav_0_mat_select_3_Template, 3, 1, "mat-select", 4);
    ɵngcc0.ɵɵtemplate(4, BreadcrumbComponent_nav_0_div_4_Template, 5, 8, "div", 5);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵattribute("aria-label", ɵngcc0.ɵɵpipeBind1(1, 4, "BREADCRUMB.ARIA-LABEL.BREADCRUMB"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.hasPreviousNodes());
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.hasPreviousNodes());
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r0.lastNodes);
} }
function BreadcrumbComponent_nav_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "nav", 20);
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵelementStart(2, "div", 21);
    ɵngcc0.ɵɵelementStart(3, "div", 22);
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵpipe(5, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵattribute("aria-label", ɵngcc0.ɵɵpipeBind1(1, 2, "BREADCRUMB.ARIA-LABEL.BREADCRUMB"));
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(5, 4, ctx_r1.root), " ");
} }
function DropdownBreadcrumbComponent_nav_0_mat_select_9_mat_option_2_Template(rf, ctx) { if (rf & 1) {
    const _r6 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "mat-option", 10);
    ɵngcc0.ɵɵlistener("click", function DropdownBreadcrumbComponent_nav_0_mat_select_9_mat_option_2_Template_mat_option_click_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r6); const node_r4 = ctx.$implicit; const ctx_r5 = ɵngcc0.ɵɵnextContext(3); return ctx_r5.onRoutePathClick(node_r4, $event); })("onSelectionChange", function DropdownBreadcrumbComponent_nav_0_mat_select_9_mat_option_2_Template_mat_option_onSelectionChange_0_listener() { ɵngcc0.ɵɵrestoreView(_r6); const node_r4 = ctx.$implicit; const ctx_r7 = ɵngcc0.ɵɵnextContext(3); return ctx_r7.onRouteClick(node_r4); });
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const node_r4 = ctx.$implicit;
    const ctx_r3 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵproperty("disabled", ctx_r3.readOnly);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 2, node_r4.name), " ");
} }
function DropdownBreadcrumbComponent_nav_0_mat_select_9_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-select", 7, 8);
    ɵngcc0.ɵɵtemplate(2, DropdownBreadcrumbComponent_nav_0_mat_select_9_mat_option_2_Template, 3, 4, "mat-option", 9);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r1.previousNodes);
} }
function DropdownBreadcrumbComponent_nav_0_Template(rf, ctx) { if (rf & 1) {
    const _r9 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "nav", 1);
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵelementStart(2, "button", 2);
    ɵngcc0.ɵɵlistener("click", function DropdownBreadcrumbComponent_nav_0_Template_button_click_2_listener() { ɵngcc0.ɵɵrestoreView(_r9); const ctx_r8 = ɵngcc0.ɵɵnextContext(); return ctx_r8.open(); });
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementStart(4, "mat-icon");
    ɵngcc0.ɵɵtext(5, "folder");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(6, "mat-icon", 3);
    ɵngcc0.ɵɵtext(7, "chevron_right");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(8, "div", 4);
    ɵngcc0.ɵɵtemplate(9, DropdownBreadcrumbComponent_nav_0_mat_select_9_Template, 3, 1, "mat-select", 5);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(10, "span", 6);
    ɵngcc0.ɵɵtext(11);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵattribute("aria-label", ɵngcc0.ɵɵpipeBind1(1, 9, "BREADCRUMB.ARIA-LABEL.BREADCRUMB"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("tabindex", ctx_r0.hasPreviousNodes() ? 0 : -1);
    ɵngcc0.ɵɵattribute("aria-label", ɵngcc0.ɵɵpipeBind1(3, 11, "BREADCRUMB.ARIA-LABEL.DROPDOWN"));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵclassProp("adf-isRoot", !ctx_r0.hasPreviousNodes());
    ɵngcc0.ɵɵadvance(5);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.hasPreviousNodes());
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵclassProp("adf-isRoot", !ctx_r0.hasPreviousNodes());
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1("", ctx_r0.currentNode.name, " ");
} }
function ConfirmDialogComponent_p_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "p", 7);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 1, ctx_r0.message), " ");
} }
function ConfirmDialogComponent_ng_template_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "span", 8);
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("innerHTML", ctx_r2.sanitizedHtmlContent(), ɵngcc0.ɵɵsanitizeHtml);
} }
function ConfirmDialogComponent_button_12_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "button", 9);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("mat-dialog-close", ctx_r3.thirdOptionLabel);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(2, 2, ctx_r3.thirdOptionLabel));
} }
function VersionListComponent_mat_list_0_mat_list_item_1_p_12_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "p", 11);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const version_r4 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵproperty("id", "adf-version-list-item-comment-" + version_r4.entry.id);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(version_r4.entry.versionComment);
} }
function VersionListComponent_mat_list_0_mat_list_item_1_div_13_ng_container_3_button_1_Template(rf, ctx) { if (rf & 1) {
    const _r15 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 19);
    ɵngcc0.ɵɵlistener("click", function VersionListComponent_mat_list_0_mat_list_item_1_div_13_ng_container_3_button_1_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r15); const version_r4 = ɵngcc0.ɵɵnextContext(3).$implicit; const ctx_r13 = ɵngcc0.ɵɵnextContext(2); return ctx_r13.onViewVersion(version_r4.entry.id); });
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const version_r4 = ɵngcc0.ɵɵnextContext(3).$implicit;
    ɵngcc0.ɵɵproperty("id", "adf-version-list-action-view-" + version_r4.entry.id);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 2, "ADF_VERSION_LIST.ACTIONS.VIEW"), " ");
} }
function VersionListComponent_mat_list_0_mat_list_item_1_div_13_ng_container_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, VersionListComponent_mat_list_0_mat_list_item_1_div_13_ng_container_3_button_1_Template, 3, 4, "button", 16);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r10 = ɵngcc0.ɵɵnextContext(4);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r10.allowViewVersions);
} }
function VersionListComponent_mat_list_0_mat_list_item_1_div_13_button_7_Template(rf, ctx) { if (rf & 1) {
    const _r19 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 19);
    ɵngcc0.ɵɵlistener("click", function VersionListComponent_mat_list_0_mat_list_item_1_div_13_button_7_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r19); const version_r4 = ɵngcc0.ɵɵnextContext(2).$implicit; const ctx_r17 = ɵngcc0.ɵɵnextContext(2); return ctx_r17.downloadVersion(version_r4.entry.id); });
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const version_r4 = ɵngcc0.ɵɵnextContext(2).$implicit;
    ɵngcc0.ɵɵproperty("id", "adf-version-list-action-download-" + version_r4.entry.id);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 2, "ADF_VERSION_LIST.ACTIONS.DOWNLOAD"), " ");
} }
function VersionListComponent_mat_list_0_mat_list_item_1_div_13_Template(rf, ctx) { if (rf & 1) {
    const _r23 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div");
    ɵngcc0.ɵɵelementStart(1, "mat-menu", 12, 13);
    ɵngcc0.ɵɵtemplate(3, VersionListComponent_mat_list_0_mat_list_item_1_div_13_ng_container_3_Template, 2, 1, "ng-container", 14);
    ɵngcc0.ɵɵelementStart(4, "button", 15);
    ɵngcc0.ɵɵlistener("click", function VersionListComponent_mat_list_0_mat_list_item_1_div_13_Template_button_click_4_listener() { ɵngcc0.ɵɵrestoreView(_r23); const version_r4 = ɵngcc0.ɵɵnextContext().$implicit; const ctx_r21 = ɵngcc0.ɵɵnextContext(2); return ctx_r21.restore(version_r4.entry.id); });
    ɵngcc0.ɵɵtext(5);
    ɵngcc0.ɵɵpipe(6, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(7, VersionListComponent_mat_list_0_mat_list_item_1_div_13_button_7_Template, 3, 4, "button", 16);
    ɵngcc0.ɵɵelementStart(8, "button", 17);
    ɵngcc0.ɵɵlistener("click", function VersionListComponent_mat_list_0_mat_list_item_1_div_13_Template_button_click_8_listener() { ɵngcc0.ɵɵrestoreView(_r23); const version_r4 = ɵngcc0.ɵɵnextContext().$implicit; const ctx_r24 = ɵngcc0.ɵɵnextContext(2); return ctx_r24.deleteVersion(version_r4.entry.id); });
    ɵngcc0.ɵɵtext(9);
    ɵngcc0.ɵɵpipe(10, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(11, "button", 18);
    ɵngcc0.ɵɵelementStart(12, "mat-icon");
    ɵngcc0.ɵɵtext(13, "more_vert");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const _r9 = ɵngcc0.ɵɵreference(2);
    const version_r4 = ɵngcc0.ɵɵnextContext().$implicit;
    const ctx_r7 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("id", "adf-version-list-action-menu-" + version_r4.entry.id);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("adf-acs-version", "7");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("id", "adf-version-list-action-restore-" + version_r4.entry.id)("disabled", !ctx_r7.canUpdate());
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(6, 11, "ADF_VERSION_LIST.ACTIONS.RESTORE"), " ");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r7.allowDownload);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("disabled", !ctx_r7.canDelete())("id", "adf-version-list-action-delete-" + version_r4.entry.id);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(10, 13, "ADF_VERSION_LIST.ACTIONS.DELETE"), " ");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("matMenuTriggerFor", _r9)("id", "adf-version-list-action-menu-button-" + version_r4.entry.id);
} }
function VersionListComponent_mat_list_0_mat_list_item_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-list-item");
    ɵngcc0.ɵɵelementStart(1, "mat-icon", 4);
    ɵngcc0.ɵɵtext(2, "insert_drive_file");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(3, "h4", 5);
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(5, "p", 6);
    ɵngcc0.ɵɵelementStart(6, "span", 7);
    ɵngcc0.ɵɵtext(7);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtext(8, " - ");
    ɵngcc0.ɵɵelementStart(9, "span", 8);
    ɵngcc0.ɵɵtext(10);
    ɵngcc0.ɵɵpipe(11, "date");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(12, VersionListComponent_mat_list_0_mat_list_item_1_p_12_Template, 2, 2, "p", 9);
    ɵngcc0.ɵɵtemplate(13, VersionListComponent_mat_list_0_mat_list_item_1_div_13_Template, 14, 15, "div", 10);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const version_r4 = ctx.$implicit;
    const ctx_r3 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("id", "adf-version-list-item-name-" + version_r4.entry.id);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(version_r4.entry.name);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("id", "adf-version-list-item-version-" + version_r4.entry.id);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(version_r4.entry.id);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("id", "adf-version-list-item-date-" + version_r4.entry.id);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(11, 8, version_r4.entry.modifiedAt));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r3.showComments);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r3.showActions);
} }
function VersionListComponent_mat_list_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-list", 2);
    ɵngcc0.ɵɵtemplate(1, VersionListComponent_mat_list_0_mat_list_item_1_Template, 14, 10, "mat-list-item", 3);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r0.versions);
} }
function VersionListComponent_ng_template_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "mat-progress-bar", 20);
} }
const _c32 = ["versionList"];
function VersionManagerComponent_adf_version_comparison_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "adf-version-comparison", 9);
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("node", ctx_r0.node)("newFileVersion", ctx_r0.newFileVersion);
} }
function VersionManagerComponent_table_3_Template(rf, ctx) { if (rf & 1) {
    const _r5 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "table", 10);
    ɵngcc0.ɵɵelementStart(1, "tr");
    ɵngcc0.ɵɵelementStart(2, "td");
    ɵngcc0.ɵɵelementStart(3, "adf-version-upload", 11);
    ɵngcc0.ɵɵlistener("success", function VersionManagerComponent_table_3_Template_adf_version_upload_success_3_listener($event) { ɵngcc0.ɵɵrestoreView(_r5); const ctx_r4 = ɵngcc0.ɵɵnextContext(); return ctx_r4.onUploadSuccess($event); })("cancel", function VersionManagerComponent_table_3_Template_adf_version_upload_cancel_3_listener() { ɵngcc0.ɵɵrestoreView(_r5); const ctx_r6 = ɵngcc0.ɵɵnextContext(); return ctx_r6.onUploadCancel(); })("error", function VersionManagerComponent_table_3_Template_adf_version_upload_error_3_listener($event) { ɵngcc0.ɵɵrestoreView(_r5); const ctx_r7 = ɵngcc0.ɵɵnextContext(); return ctx_r7.onUploadError($event); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    const _r3 = ɵngcc0.ɵɵreference(10);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("node", ctx_r1.node)("newFileVersion", ctx_r1.newFileVersion)("currentVersion", _r3 == null ? null : _r3.versions[0] == null ? null : _r3.versions[0].entry);
} }
function VersionManagerComponent_button_7_Template(rf, ctx) { if (rf & 1) {
    const _r9 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 12);
    ɵngcc0.ɵɵlistener("click", function VersionManagerComponent_button_7_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r9); const ctx_r8 = ɵngcc0.ɵɵnextContext(); return ctx_r8.toggleNewVersion(); });
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1("", ɵngcc0.ɵɵpipeBind1(2, 1, "ADF_VERSION_LIST.ACTIONS.UPLOAD.ADD"), " ");
} }
function VersionUploadComponent_adf_upload_version_button_12_Template(rf, ctx) { if (rf & 1) {
    const _r3 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "adf-upload-version-button", 8);
    ɵngcc0.ɵɵlistener("success", function VersionUploadComponent_adf_upload_version_button_12_Template_adf_upload_version_button_success_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r3); const ctx_r2 = ɵngcc0.ɵɵnextContext(); return ctx_r2.onSuccess($event); })("error", function VersionUploadComponent_adf_upload_version_button_12_Template_adf_upload_version_button_error_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r3); const ctx_r4 = ɵngcc0.ɵɵnextContext(); return ctx_r4.onError($event); });
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵpropertyInterpolate("staticTitle", ɵngcc0.ɵɵpipeBind1(1, 9, "ADF_VERSION_LIST.ACTIONS.UPLOAD.TITLE"));
    ɵngcc0.ɵɵpropertyInterpolate("tooltip", ɵngcc0.ɵɵpipeBind1(2, 11, "ADF_VERSION_LIST.ACTIONS.UPLOAD.TOOLTIP"));
    ɵngcc0.ɵɵproperty("node", ctx_r0.node)("disabled", !ctx_r0.canUpload())("rootFolderId", ctx_r0.node.parentId)("comment", ctx_r0.comment)("versioning", true)("file", ctx_r0.newFileVersion)("majorVersion", ctx_r0.isMajorVersion());
} }
function VersionUploadComponent_button_13_Template(rf, ctx) { if (rf & 1) {
    const _r6 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 9);
    ɵngcc0.ɵɵlistener("click", function VersionUploadComponent_button_13_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r6); const ctx_r5 = ɵngcc0.ɵɵnextContext(); return ctx_r5.cancelUpload(); });
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1("", ɵngcc0.ɵɵpipeBind1(2, 1, "ADF_VERSION_LIST.ACTIONS.UPLOAD.CANCEL"), " ");
} }
const _c33 = function (a0) { return { type: a0 }; };
const _c34 = ["documentList"];
function ContentNodeSelectorPanelComponent_mat_form_field_1_mat_icon_3_Template(rf, ctx) { if (rf & 1) {
    const _r12 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "mat-icon", 22);
    ɵngcc0.ɵɵlistener("click", function ContentNodeSelectorPanelComponent_mat_form_field_1_mat_icon_3_Template_mat_icon_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r12); const ctx_r11 = ɵngcc0.ɵɵnextContext(2); return ctx_r11.clear(); });
    ɵngcc0.ɵɵtext(1, "clear ");
    ɵngcc0.ɵɵelementEnd();
} }
function ContentNodeSelectorPanelComponent_mat_form_field_1_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-icon", 23);
    ɵngcc0.ɵɵtext(1, "search ");
    ɵngcc0.ɵɵelementEnd();
} }
function ContentNodeSelectorPanelComponent_mat_form_field_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-form-field", 18);
    ɵngcc0.ɵɵelement(1, "input", 19);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵtemplate(3, ContentNodeSelectorPanelComponent_mat_form_field_1_mat_icon_3_Template, 2, 0, "mat-icon", 20);
    ɵngcc0.ɵɵtemplate(4, ContentNodeSelectorPanelComponent_mat_form_field_1_mat_icon_4_Template, 2, 0, "mat-icon", 21);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate("placeholder", ɵngcc0.ɵɵpipeBind1(2, 5, "NODE_SELECTOR.SEARCH"));
    ɵngcc0.ɵɵproperty("formControl", ctx_r0.searchInput)("value", ctx_r0.searchTerm);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.searchTerm.length > 0);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.searchTerm.length === 0);
} }
function ContentNodeSelectorPanelComponent_adf_sites_dropdown_2_Template(rf, ctx) { if (rf & 1) {
    const _r14 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "adf-sites-dropdown", 24);
    ɵngcc0.ɵɵlistener("change", function ContentNodeSelectorPanelComponent_adf_sites_dropdown_2_Template_adf_sites_dropdown_change_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r14); const ctx_r13 = ɵngcc0.ɵɵnextContext(); return ctx_r13.siteChanged($event); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("placeholder", "NODE_SELECTOR.SELECT_LOCATION")("hideMyFiles", ctx_r1.dropdownHideMyFiles)("siteList", ctx_r1.dropdownSiteList)("value", ctx_r1.startSiteGuid);
} }
function ContentNodeSelectorPanelComponent_button_3_Template(rf, ctx) { if (rf & 1) {
    const _r16 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 25);
    ɵngcc0.ɵɵlistener("click", function ContentNodeSelectorPanelComponent_button_3_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r16); const ctx_r15 = ɵngcc0.ɵɵnextContext(); return ctx_r15.toggleSearchPanel(); });
    ɵngcc0.ɵɵelementStart(1, "mat-icon");
    ɵngcc0.ɵɵtext(2, "filter_list");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵpipe(4, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(4, 1, "SEARCH.SEARCH_HEADER.TITLE"), " ");
} }
function ContentNodeSelectorPanelComponent_adf_search_panel_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "adf-search-panel");
} }
function ContentNodeSelectorPanelComponent_ng_container_9_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "span", 26);
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(3, 1, "NODE_SELECTOR.SEARCH_RESULTS"));
} }
function ContentNodeSelectorPanelComponent_adf_dropdown_breadcrumb_10_Template(rf, ctx) { if (rf & 1) {
    const _r18 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "adf-dropdown-breadcrumb", 27);
    ɵngcc0.ɵɵlistener("navigate", function ContentNodeSelectorPanelComponent_adf_dropdown_breadcrumb_10_Template_adf_dropdown_breadcrumb_navigate_0_listener() { ɵngcc0.ɵɵrestoreView(_r18); const ctx_r17 = ɵngcc0.ɵɵnextContext(); return ctx_r17.clearSearch(); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r5 = ɵngcc0.ɵɵnextContext();
    const _r7 = ɵngcc0.ɵɵreference(14);
    ɵngcc0.ɵɵproperty("target", _r7)("rootId", ctx_r5.breadcrumbRootId)("transform", ctx_r5.breadcrumbTransform)("folderNode", ctx_r5.breadcrumbFolderNode)("root", ctx_r5.breadcrumbFolderTitle);
} }
function ContentNodeSelectorPanelComponent_ng_container_11_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0, 28);
} if (rf & 2) {
    const ctx_r6 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("adf-node-counter", ctx_r6.getSelectedCount());
} }
function ContentNodeSelectorPanelComponent_ng_template_22_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "adf-name-location-cell", 29);
} if (rf & 2) {
    const context_r19 = ctx.$implicit;
    ɵngcc0.ɵɵproperty("row", context_r19.row);
} }
function FolderDialogComponent_mat_hint_8_span_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 1, "CORE.FOLDER_DIALOG.FOLDER_NAME.ERRORS.REQUIRED"), " ");
} }
function FolderDialogComponent_mat_hint_8_span_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 1, ctx_r2.form.controls["name"].errors == null ? null : ctx_r2.form.controls["name"].errors.message), " ");
} }
function FolderDialogComponent_mat_hint_8_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-hint");
    ɵngcc0.ɵɵtemplate(1, FolderDialogComponent_mat_hint_8_span_1_Template, 3, 3, "span", 4);
    ɵngcc0.ɵɵtemplate(2, FolderDialogComponent_mat_hint_8_span_2_Template, 3, 3, "span", 4);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.form.controls["name"].errors == null ? null : ctx_r0.form.controls["name"].errors.required);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !(ctx_r0.form.controls["name"].errors == null ? null : ctx_r0.form.controls["name"].errors.required) && (ctx_r0.form.controls["name"].errors == null ? null : ctx_r0.form.controls["name"].errors.message));
} }
function LibraryDialogComponent_mat_hint_8_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-hint");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(2, 1, "LIBRARY.HINTS.SITE_TITLE_EXISTS"));
} }
function LibraryDialogComponent_mat_error_9_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-error");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 1, "LIBRARY.ERRORS.TITLE_TOO_LONG"), " ");
} }
function LibraryDialogComponent_mat_error_10_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-error");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 1, "LIBRARY.ERRORS.TITLE_TOO_SHORT"), " ");
} }
function LibraryDialogComponent_mat_error_11_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-error");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 1, ctx_r3.form.controls["title"].errors == null ? null : ctx_r3.form.controls["title"].errors.message), " ");
} }
function LibraryDialogComponent_mat_error_15_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-error");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r4 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 1, ctx_r4.form.controls["id"].errors == null ? null : ctx_r4.form.controls["id"].errors.message), " ");
} }
function LibraryDialogComponent_mat_error_16_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-error");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 1, "LIBRARY.ERRORS.ID_TOO_LONG"), " ");
} }
function LibraryDialogComponent_mat_error_20_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-error");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 1, "LIBRARY.ERRORS.DESCRIPTION_TOO_LONG"), " ");
} }
function LibraryDialogComponent_mat_radio_button_22_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-radio-button", 11);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const option_r8 = ctx.$implicit;
    const ctx_r7 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("disabled", option_r8.disabled)("value", option_r8.value)("checked", ctx_r7.visibilityOption.value === option_r8.value);
    ɵngcc0.ɵɵattribute("data-automation-id", option_r8.value);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 5, option_r8.label), " ");
} }
const _c35 = function () { return { standalone: true }; };
function ContentTypeDialogComponent_table_17_th_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "th", 18);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 1, "CORE.METADATA.CONTENT_TYPE.DIALOG.PROPERTY.NAME"), " ");
} }
function ContentTypeDialogComponent_table_17_td_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "td", 19);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const property_r9 = ctx.$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", property_r9.id, " ");
} }
function ContentTypeDialogComponent_table_17_th_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "th", 18);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 1, "CORE.METADATA.CONTENT_TYPE.DIALOG.PROPERTY.DESCRIPTION"), " ");
} }
function ContentTypeDialogComponent_table_17_td_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "td", 19);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const property_r10 = ctx.$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", property_r10.title, " ");
} }
function ContentTypeDialogComponent_table_17_th_8_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "th", 18);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 1, "CORE.METADATA.CONTENT_TYPE.DIALOG.PROPERTY.DATA_TYPE"), " ");
} }
function ContentTypeDialogComponent_table_17_td_9_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "td", 19);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const property_r11 = ctx.$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", property_r11.dataType, " ");
} }
function ContentTypeDialogComponent_table_17_tr_10_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "tr", 20);
} }
function ContentTypeDialogComponent_table_17_tr_11_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "tr", 21);
} }
function ContentTypeDialogComponent_table_17_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "table", 10);
    ɵngcc0.ɵɵelementContainerStart(1, 11);
    ɵngcc0.ɵɵtemplate(2, ContentTypeDialogComponent_table_17_th_2_Template, 3, 3, "th", 12);
    ɵngcc0.ɵɵtemplate(3, ContentTypeDialogComponent_table_17_td_3_Template, 2, 1, "td", 13);
    ɵngcc0.ɵɵelementContainerEnd();
    ɵngcc0.ɵɵelementContainerStart(4, 14);
    ɵngcc0.ɵɵtemplate(5, ContentTypeDialogComponent_table_17_th_5_Template, 3, 3, "th", 12);
    ɵngcc0.ɵɵtemplate(6, ContentTypeDialogComponent_table_17_td_6_Template, 2, 1, "td", 13);
    ɵngcc0.ɵɵelementContainerEnd();
    ɵngcc0.ɵɵelementContainerStart(7, 15);
    ɵngcc0.ɵɵtemplate(8, ContentTypeDialogComponent_table_17_th_8_Template, 3, 3, "th", 12);
    ɵngcc0.ɵɵtemplate(9, ContentTypeDialogComponent_table_17_td_9_Template, 2, 1, "td", 13);
    ɵngcc0.ɵɵelementContainerEnd();
    ɵngcc0.ɵɵtemplate(10, ContentTypeDialogComponent_table_17_tr_10_Template, 1, 0, "tr", 16);
    ɵngcc0.ɵɵtemplate(11, ContentTypeDialogComponent_table_17_tr_11_Template, 1, 0, "tr", 17);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("dataSource", ctx_r0.typeProperties);
    ɵngcc0.ɵɵadvance(10);
    ɵngcc0.ɵɵproperty("matHeaderRowDef", ctx_r0.propertyColumns);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("matRowDefColumns", ctx_r0.propertyColumns);
} }
function ContentMetadataComponent_mat_expansion_panel_2_Template(rf, ctx) { if (rf & 1) {
    const _r4 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "mat-expansion-panel", 5);
    ɵngcc0.ɵɵelementStart(1, "mat-expansion-panel-header");
    ɵngcc0.ɵɵelementStart(2, "mat-panel-title", 6);
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵpipe(4, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(5, "adf-card-view", 7);
    ɵngcc0.ɵɵlistener("keydown", function ContentMetadataComponent_mat_expansion_panel_2_Template_adf_card_view_keydown_5_listener($event) { ɵngcc0.ɵɵrestoreView(_r4); const ctx_r3 = ɵngcc0.ɵɵnextContext(); return ctx_r3.keyDown($event); });
    ɵngcc0.ɵɵpipe(6, "async");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("expanded", ctx_r0.canExpandProperties());
    ɵngcc0.ɵɵattribute("data-automation-id", "adf-metadata-group-properties");
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(4, 9, "CORE.METADATA.BASIC.HEADER"), " ");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("properties", ɵngcc0.ɵɵpipeBind1(6, 11, ctx_r0.basicProperties$))("editable", ctx_r0.editable)("displayEmpty", ctx_r0.displayEmpty)("copyToClipboardAction", ctx_r0.copyToClipboardAction)("useChipsForMultiValueProperty", ctx_r0.useChipsForMultiValueProperty)("multiValueSeparator", ctx_r0.multiValueSeparator);
} }
function ContentMetadataComponent_ng_container_3_ng_container_1_div_1_mat_expansion_panel_1_Template(rf, ctx) { if (rf & 1) {
    const _r14 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "mat-expansion-panel", 5);
    ɵngcc0.ɵɵelementStart(1, "mat-expansion-panel-header");
    ɵngcc0.ɵɵelementStart(2, "mat-panel-title");
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵpipe(4, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(5, "adf-card-view", 7);
    ɵngcc0.ɵɵlistener("keydown", function ContentMetadataComponent_ng_container_3_ng_container_1_div_1_mat_expansion_panel_1_Template_adf_card_view_keydown_5_listener($event) { ɵngcc0.ɵɵrestoreView(_r14); const ctx_r13 = ɵngcc0.ɵɵnextContext(4); return ctx_r13.keyDown($event); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r15 = ɵngcc0.ɵɵnextContext();
    const group_r10 = ctx_r15.$implicit;
    const first_r11 = ctx_r15.first;
    const ctx_r12 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵproperty("expanded", ctx_r12.canExpandTheCard(group_r10) || !ctx_r12.displayDefaultProperties && first_r11);
    ɵngcc0.ɵɵattribute("data-automation-id", "adf-metadata-group-" + group_r10.title);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(4, 9, group_r10.title), " ");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("properties", group_r10.properties)("editable", ctx_r12.editable)("displayEmpty", ctx_r12.displayEmpty)("copyToClipboardAction", ctx_r12.copyToClipboardAction)("useChipsForMultiValueProperty", ctx_r12.useChipsForMultiValueProperty)("multiValueSeparator", ctx_r12.multiValueSeparator);
} }
function ContentMetadataComponent_ng_container_3_ng_container_1_div_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 11);
    ɵngcc0.ɵɵtemplate(1, ContentMetadataComponent_ng_container_3_ng_container_1_div_1_mat_expansion_panel_1_Template, 6, 11, "mat-expansion-panel", 2);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const group_r10 = ctx.$implicit;
    const ctx_r9 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r9.showGroup(group_r10) || ctx_r9.editable);
} }
function ContentMetadataComponent_ng_container_3_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, ContentMetadataComponent_ng_container_3_ng_container_1_div_1_Template, 2, 1, "div", 10);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const groupedProperties_r8 = ctx.$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", groupedProperties_r8);
} }
function ContentMetadataComponent_ng_container_3_ng_template_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "mat-progress-bar", 12);
} }
function ContentMetadataComponent_ng_container_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, ContentMetadataComponent_ng_container_3_ng_container_1_Template, 2, 1, "ng-container", 8);
    ɵngcc0.ɵɵpipe(2, "async");
    ɵngcc0.ɵɵtemplate(3, ContentMetadataComponent_ng_container_3_ng_template_3_Template, 1, 0, "ng-template", null, 9, ɵngcc0.ɵɵtemplateRefExtractor);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const _r6 = ɵngcc0.ɵɵreference(4);
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ɵngcc0.ɵɵpipeBind1(2, 2, ctx_r1.groupedProperties$))("ngIfElse", _r6);
} }
function ContentMetadataComponent_div_4_Template(rf, ctx) { if (rf & 1) {
    const _r17 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 13);
    ɵngcc0.ɵɵelementStart(1, "button", 14);
    ɵngcc0.ɵɵlistener("click", function ContentMetadataComponent_div_4_Template_button_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r17); const ctx_r16 = ɵngcc0.ɵɵnextContext(); return ctx_r16.cancelChanges(); });
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(4, "button", 15);
    ɵngcc0.ɵɵlistener("click", function ContentMetadataComponent_div_4_Template_button_click_4_listener() { ɵngcc0.ɵɵrestoreView(_r17); const ctx_r18 = ɵngcc0.ɵɵnextContext(); return ctx_r18.saveChanges(); });
    ɵngcc0.ɵɵtext(5);
    ɵngcc0.ɵɵpipe(6, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("disabled", !ctx_r2.hasMetadataChanged);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(3, 4, "CORE.METADATA.ACTIONS.CANCEL"), " ");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("disabled", !ctx_r2.hasMetadataChanged);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(6, 6, "CORE.METADATA.ACTIONS.SAVE"), " ");
} }
function ContentMetadataCardComponent_mat_card_0_button_5_Template(rf, ctx) { if (rf & 1) {
    const _r5 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 6);
    ɵngcc0.ɵɵlistener("click", function ContentMetadataCardComponent_mat_card_0_button_5_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r5); const ctx_r4 = ɵngcc0.ɵɵnextContext(2); return ctx_r4.openAspectDialog(); });
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementStart(3, "mat-icon");
    ɵngcc0.ɵɵtext(4, "menu");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵattribute("title", ɵngcc0.ɵɵpipeBind1(1, 2, "CORE.METADATA.ACTIONS.EDIT_ASPECTS"))("aria-label", ɵngcc0.ɵɵpipeBind1(2, 4, "CORE.METADATA.ACCESSIBILITY.EDIT_ASPECTS"));
} }
function ContentMetadataCardComponent_mat_card_0_button_6_Template(rf, ctx) { if (rf & 1) {
    const _r7 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 7);
    ɵngcc0.ɵɵlistener("click", function ContentMetadataCardComponent_mat_card_0_button_6_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r7); const ctx_r6 = ɵngcc0.ɵɵnextContext(2); return ctx_r6.toggleEdit(); });
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementStart(3, "mat-icon");
    ɵngcc0.ɵɵtext(4, "mode_edit");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵattribute("title", ɵngcc0.ɵɵpipeBind1(1, 2, "CORE.METADATA.ACTIONS.EDIT"))("aria-label", ɵngcc0.ɵɵpipeBind1(2, 4, "CORE.METADATA.ACCESSIBILITY.EDIT"));
} }
function ContentMetadataCardComponent_mat_card_0_button_7_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "span", 9);
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(4, "mat-icon");
    ɵngcc0.ɵɵtext(5, "keyboard_arrow_down");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(3, 1, "ADF_VIEWER.SIDEBAR.METADATA.MORE_INFORMATION"));
} }
function ContentMetadataCardComponent_mat_card_0_button_7_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "span", 9);
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(4, "mat-icon");
    ɵngcc0.ɵɵtext(5, "keyboard_arrow_up");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(3, 1, "ADF_VIEWER.SIDEBAR.METADATA.LESS_INFORMATION"));
} }
function ContentMetadataCardComponent_mat_card_0_button_7_Template(rf, ctx) { if (rf & 1) {
    const _r11 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 8);
    ɵngcc0.ɵɵlistener("click", function ContentMetadataCardComponent_mat_card_0_button_7_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r11); const ctx_r10 = ɵngcc0.ɵɵnextContext(2); return ctx_r10.toggleExpanded(); });
    ɵngcc0.ɵɵtemplate(1, ContentMetadataCardComponent_mat_card_0_button_7_ng_container_1_Template, 6, 3, "ng-container", 0);
    ɵngcc0.ɵɵtemplate(2, ContentMetadataCardComponent_mat_card_0_button_7_ng_container_2_Template, 6, 3, "ng-container", 0);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r3.expanded);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r3.expanded);
} }
function ContentMetadataCardComponent_mat_card_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-card");
    ɵngcc0.ɵɵelementStart(1, "mat-card-content");
    ɵngcc0.ɵɵelement(2, "adf-content-metadata", 1);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(3, "mat-card-footer", 2);
    ɵngcc0.ɵɵelementStart(4, "div");
    ɵngcc0.ɵɵtemplate(5, ContentMetadataCardComponent_mat_card_0_button_5_Template, 5, 6, "button", 3);
    ɵngcc0.ɵɵtemplate(6, ContentMetadataCardComponent_mat_card_0_button_6_Template, 5, 6, "button", 4);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(7, ContentMetadataCardComponent_mat_card_0_button_7_Template, 3, 2, "button", 5);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("displayDefaultProperties", ctx_r0.displayDefaultProperties)("expanded", ctx_r0.expanded)("node", ctx_r0.node)("displayEmpty", ctx_r0.displayEmpty)("editable", ctx_r0.editable)("multi", ctx_r0.multi)("displayAspect", ctx_r0.displayAspect)("preset", ctx_r0.preset);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.isEditAspectSupported());
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r0.readOnly && ctx_r0.hasAllowableOperations());
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.displayDefaultProperties);
} }
function AddPermissionDialogComponent_ng_container_3_adf_datatable_9_ng_template_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "adf-user-icon-column", 13);
} if (rf & 2) {
    const context_r8 = ctx.$implicit;
    ɵngcc0.ɵɵproperty("context", context_r8);
} }
function AddPermissionDialogComponent_ng_container_3_adf_datatable_9_ng_template_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "adf-user-name-column", 13);
} if (rf & 2) {
    const context_r9 = ctx.$implicit;
    ɵngcc0.ɵɵproperty("context", context_r9);
} }
function AddPermissionDialogComponent_ng_container_3_adf_datatable_9_ng_template_8_Template(rf, ctx) { if (rf & 1) {
    const _r12 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "adf-user-role-column", 14);
    ɵngcc0.ɵɵlistener("roleChanged", function AddPermissionDialogComponent_ng_container_3_adf_datatable_9_ng_template_8_Template_adf_user_role_column_roleChanged_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r12); const entry_r10 = ctx.$implicit; const ctx_r11 = ɵngcc0.ɵɵnextContext(3); return ctx_r11.onMemberUpdate($event, entry_r10.row.obj); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const entry_r10 = ctx.$implicit;
    const ctx_r5 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵproperty("readonly", entry_r10.row.obj.readonly)("value", entry_r10.data.getValue(entry_r10.row, entry_r10.col))("roles", ctx_r5.data.roles);
} }
function AddPermissionDialogComponent_ng_container_3_adf_datatable_9_ng_template_10_Template(rf, ctx) { if (rf & 1) {
    const _r14 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "adf-user-role-column", 15);
    ɵngcc0.ɵɵlistener("roleChanged", function AddPermissionDialogComponent_ng_container_3_adf_datatable_9_ng_template_10_Template_adf_user_role_column_roleChanged_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r14); const ctx_r13 = ɵngcc0.ɵɵnextContext(3); return ctx_r13.onBulkUpdate($event); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r6 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵproperty("roles", ctx_r6.data.roles);
} }
function AddPermissionDialogComponent_ng_container_3_adf_datatable_9_ng_template_12_Template(rf, ctx) { if (rf & 1) {
    const _r17 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 16);
    ɵngcc0.ɵɵlistener("click", function AddPermissionDialogComponent_ng_container_3_adf_datatable_9_ng_template_12_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r17); const entry_r15 = ctx.$implicit; const ctx_r16 = ɵngcc0.ɵɵnextContext(3); return ctx_r16.onMemberDelete(entry_r15.row.obj); });
    ɵngcc0.ɵɵelementStart(1, "mat-icon");
    ɵngcc0.ɵɵtext(2, "highlight_off");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const entry_r15 = ctx.$implicit;
    ɵngcc0.ɵɵstyleProp("display", entry_r15.row.obj.readonly ? "none" : "block");
} }
function AddPermissionDialogComponent_ng_container_3_adf_datatable_9_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "adf-datatable", 8);
    ɵngcc0.ɵɵelementStart(1, "data-columns");
    ɵngcc0.ɵɵelementStart(2, "data-column", 9);
    ɵngcc0.ɵɵtemplate(3, AddPermissionDialogComponent_ng_container_3_adf_datatable_9_ng_template_3_Template, 1, 1, "ng-template");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(4, "data-column", 10);
    ɵngcc0.ɵɵpipe(5, "translate");
    ɵngcc0.ɵɵtemplate(6, AddPermissionDialogComponent_ng_container_3_adf_datatable_9_ng_template_6_Template, 1, 1, "ng-template");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(7, "data-column", 11);
    ɵngcc0.ɵɵtemplate(8, AddPermissionDialogComponent_ng_container_3_adf_datatable_9_ng_template_8_Template, 1, 3, "ng-template");
    ɵngcc0.ɵɵelementStart(9, "adf-data-column-header");
    ɵngcc0.ɵɵtemplate(10, AddPermissionDialogComponent_ng_container_3_adf_datatable_9_ng_template_10_Template, 1, 1, "ng-template");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(11, "data-column", 12);
    ɵngcc0.ɵɵtemplate(12, AddPermissionDialogComponent_ng_container_3_adf_datatable_9_ng_template_12_Template, 3, 2, "ng-template");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("rows", ctx_r2.selectedMembers)("stickyHeader", true);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("sortable", false);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("title", ɵngcc0.ɵɵpipeBind2(5, 5, "PERMISSION_MANAGER.COLUMN.NAME", ɵngcc0.ɵɵpureFunction1(8, _c0, ctx_r2.selectedMembers.length)));
    ɵngcc0.ɵɵadvance(7);
    ɵngcc0.ɵɵproperty("sortable", false);
} }
function AddPermissionDialogComponent_ng_container_3_Template(rf, ctx) { if (rf & 1) {
    const _r19 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "mat-dialog-content");
    ɵngcc0.ɵɵelementStart(2, "button", 2);
    ɵngcc0.ɵɵlistener("click", function AddPermissionDialogComponent_ng_container_3_Template_button_click_2_listener() { ɵngcc0.ɵɵrestoreView(_r19); const ctx_r18 = ɵngcc0.ɵɵnextContext(); return ctx_r18.enableSearch(); });
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵpipe(4, "translate");
    ɵngcc0.ɵɵelement(5, "span", 3);
    ɵngcc0.ɵɵelementStart(6, "mat-icon");
    ɵngcc0.ɵɵtext(7, "search");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(8, "div", 4);
    ɵngcc0.ɵɵtemplate(9, AddPermissionDialogComponent_ng_container_3_adf_datatable_9_Template, 13, 10, "adf-datatable", 5);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(10, "mat-dialog-actions");
    ɵngcc0.ɵɵelementStart(11, "button", 6);
    ɵngcc0.ɵɵtext(12);
    ɵngcc0.ɵɵpipe(13, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(14, "button", 7);
    ɵngcc0.ɵɵlistener("click", function AddPermissionDialogComponent_ng_container_3_Template_button_click_14_listener() { ɵngcc0.ɵɵrestoreView(_r19); const ctx_r20 = ɵngcc0.ɵɵnextContext(); return ctx_r20.onAddClicked(); });
    ɵngcc0.ɵɵtext(15);
    ɵngcc0.ɵɵpipe(16, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(4, 6, "PERMISSION_MANAGER.ADD-PERMISSION.SEARCH"), " ");
    ɵngcc0.ɵɵadvance(6);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.selectedMembers.length);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(13, 8, "PERMISSION_MANAGER.ADD-PERMISSION.CLOSE-ACTION"), " ");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("mat-dialog-close", true)("disabled", !ctx_r0.isValid());
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(16, 10, "PERMISSION_MANAGER.ADD-PERMISSION.ADD-ACTION"), " ");
} }
function AddPermissionDialogComponent_ng_container_4_Template(rf, ctx) { if (rf & 1) {
    const _r22 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "mat-dialog-content");
    ɵngcc0.ɵɵelementStart(2, "adf-add-permission-panel", 17);
    ɵngcc0.ɵɵlistener("select", function AddPermissionDialogComponent_ng_container_4_Template_adf_add_permission_panel_select_2_listener($event) { ɵngcc0.ɵɵrestoreView(_r22); const ctx_r21 = ɵngcc0.ɵɵnextContext(); return ctx_r21.onSelect($event); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(3, "mat-dialog-actions");
    ɵngcc0.ɵɵelementStart(4, "button", 18);
    ɵngcc0.ɵɵlistener("click", function AddPermissionDialogComponent_ng_container_4_Template_button_click_4_listener() { ɵngcc0.ɵɵrestoreView(_r22); const ctx_r23 = ɵngcc0.ɵɵnextContext(); return ctx_r23.canCloseDialog(); });
    ɵngcc0.ɵɵtext(5);
    ɵngcc0.ɵɵpipe(6, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(7, "button", 19);
    ɵngcc0.ɵɵlistener("click", function AddPermissionDialogComponent_ng_container_4_Template_button_click_7_listener() { ɵngcc0.ɵɵrestoreView(_r22); const ctx_r24 = ɵngcc0.ɵɵnextContext(); return ctx_r24.onSearchAddClicked(); });
    ɵngcc0.ɵɵtext(8);
    ɵngcc0.ɵɵpipe(9, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(5);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(6, 3, "PERMISSION_MANAGER.ADD-PERMISSION.CLOSE-ACTION"), " ");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("disabled", !ctx_r1.currentSelection.length);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(9, 5, "PERMISSION_MANAGER.ADD-PERMISSION.SELECT-ACTION"), " ");
} }
function PermissionListComponent_div_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 3);
    ɵngcc0.ɵɵelement(1, "mat-progress-spinner", 4);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("color", "primary")("mode", "indeterminate");
} }
function PermissionListComponent_ng_container_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "div", 5);
    ɵngcc0.ɵɵelementStart(2, "mat-icon", 6);
    ɵngcc0.ɵɵtext(3, "error");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(4, "p", 7);
    ɵngcc0.ɵɵtext(5);
    ɵngcc0.ɵɵpipe(6, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(5);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(6, 1, "PERMISSION_MANAGER.ERROR.NOT-FOUND"));
} }
function PermissionListComponent_ng_container_6_button_13_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-icon");
    ɵngcc0.ɵɵtext(1, " keyboard_arrow_up ");
    ɵngcc0.ɵɵelementEnd();
} }
function PermissionListComponent_ng_container_6_button_13_mat_icon_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-icon");
    ɵngcc0.ɵɵtext(1, " keyboard_arrow_down ");
    ɵngcc0.ɵɵelementEnd();
} }
function PermissionListComponent_ng_container_6_button_13_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "button", 23, 24);
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵtemplate(4, PermissionListComponent_ng_container_6_button_13_mat_icon_4_Template, 2, 0, "mat-icon", 2);
    ɵngcc0.ɵɵtemplate(5, PermissionListComponent_ng_container_6_button_13_mat_icon_5_Template, 2, 0, "mat-icon", 2);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const _r8 = ɵngcc0.ɵɵreference(1);
    ɵngcc0.ɵɵnextContext();
    const _r6 = ɵngcc0.ɵɵreference(15);
    const _r4 = ɵngcc0.ɵɵreference(2);
    ɵngcc0.ɵɵproperty("adf-pop-over", _r6)("target", _r4);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(3, 5, _r8.open ? "PERMISSION_MANAGER.LABELS.HIDE" : "PERMISSION_MANAGER.LABELS.SHOW"), " ");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", _r8.open);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !_r8.open);
} }
function PermissionListComponent_ng_container_6_ng_template_14_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 25);
    ɵngcc0.ɵɵelement(1, "adf-permission-container", 26);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const model_r3 = ɵngcc0.ɵɵnextContext().ngIf;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("isReadOnly", true)("node", model_r3.node)("permissions", model_r3.inheritedPermissions)("showLocation", true)("selectionMode", "none")("roles", model_r3.roles);
} }
function PermissionListComponent_ng_container_6_Template(rf, ctx) { if (rf & 1) {
    const _r13 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "div", 8, 9);
    ɵngcc0.ɵɵelementStart(3, "div", 10);
    ɵngcc0.ɵɵelementStart(4, "span", 11);
    ɵngcc0.ɵɵelementStart(5, "h3", 12);
    ɵngcc0.ɵɵtext(6);
    ɵngcc0.ɵɵpipe(7, "translate");
    ɵngcc0.ɵɵpipe(8, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(9, "mat-slide-toggle", 13);
    ɵngcc0.ɵɵlistener("change", function PermissionListComponent_ng_container_6_Template_mat_slide_toggle_change_9_listener($event) { ɵngcc0.ɵɵrestoreView(_r13); const ctx_r12 = ɵngcc0.ɵɵnextContext(); return ctx_r12.permissionList.toggleInherited($event); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(10, "span", 14);
    ɵngcc0.ɵɵtext(11);
    ɵngcc0.ɵɵpipe(12, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(13, PermissionListComponent_ng_container_6_button_13_Template, 6, 7, "button", 15);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(14, PermissionListComponent_ng_container_6_ng_template_14_Template, 2, 6, "ng-template", null, 16, ɵngcc0.ɵɵtemplateRefExtractor);
    ɵngcc0.ɵɵelementStart(16, "mat-card-content", 17);
    ɵngcc0.ɵɵelementStart(17, "section", 18);
    ɵngcc0.ɵɵelementStart(18, "h3");
    ɵngcc0.ɵɵtext(19);
    ɵngcc0.ɵɵpipe(20, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(21, "div", 19);
    ɵngcc0.ɵɵelementStart(22, "button", 20);
    ɵngcc0.ɵɵlistener("click", function PermissionListComponent_ng_container_6_Template_button_click_22_listener() { ɵngcc0.ɵɵrestoreView(_r13); const ctx_r14 = ɵngcc0.ɵɵnextContext(); return ctx_r14.openAddPermissionDialog(); });
    ɵngcc0.ɵɵpipe(23, "translate");
    ɵngcc0.ɵɵelementStart(24, "mat-icon");
    ɵngcc0.ɵɵtext(25, "person_add_outline");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(26, "button", 21);
    ɵngcc0.ɵɵlistener("click", function PermissionListComponent_ng_container_6_Template_button_click_26_listener() { ɵngcc0.ɵɵrestoreView(_r13); const ctx_r15 = ɵngcc0.ɵɵnextContext(); return ctx_r15.deleteSelection(); });
    ɵngcc0.ɵɵpipe(27, "translate");
    ɵngcc0.ɵɵelementStart(28, "mat-icon");
    ɵngcc0.ɵɵtext(29, "delete_outline");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(30, "adf-permission-container", 22);
    ɵngcc0.ɵɵlistener("update", function PermissionListComponent_ng_container_6_Template_adf_permission_container_update_30_listener($event) { ɵngcc0.ɵɵrestoreView(_r13); const ctx_r16 = ɵngcc0.ɵɵnextContext(); return ctx_r16.updatePermission($event); })("delete", function PermissionListComponent_ng_container_6_Template_adf_permission_container_delete_30_listener($event) { ɵngcc0.ɵɵrestoreView(_r13); const ctx_r17 = ɵngcc0.ɵɵnextContext(); return ctx_r17.deletePermission($event); })("updateAll", function PermissionListComponent_ng_container_6_Template_adf_permission_container_updateAll_30_listener($event) { ɵngcc0.ɵɵrestoreView(_r13); const ctx_r18 = ɵngcc0.ɵɵnextContext(); return ctx_r18.updateAllPermission($event); })("row-select", function PermissionListComponent_ng_container_6_Template_adf_permission_container_row_select_30_listener($event) { ɵngcc0.ɵɵrestoreView(_r13); const ctx_r19 = ɵngcc0.ɵɵnextContext(); return ctx_r19.onSelect($event.detail.selection); })("row-unselect", function PermissionListComponent_ng_container_6_Template_adf_permission_container_row_unselect_30_listener($event) { ɵngcc0.ɵɵrestoreView(_r13); const ctx_r20 = ɵngcc0.ɵɵnextContext(); return ctx_r20.onSelect($event.detail.selection); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const model_r3 = ctx.ngIf;
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(6);
    ɵngcc0.ɵɵtextInterpolate2(" ", ɵngcc0.ɵɵpipeBind1(7, 12, "PERMISSION_MANAGER.LABELS.INHERITED-PERMISSIONS"), " ", ɵngcc0.ɵɵpipeBind1(8, 14, model_r3.node.permissions.isInheritanceEnabled ? "PERMISSION_MANAGER.LABELS.ON" : "PERMISSION_MANAGER.LABELS.OFF"), " ");
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("checked", model_r3.node.permissions.isInheritanceEnabled);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind2(12, 16, "PERMISSION_MANAGER.LABELS.INHERITED-SUBTITLE", ɵngcc0.ɵɵpureFunction1(25, _c0, model_r3.inheritedPermissions.length)), " ");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", model_r3.node.permissions.isInheritanceEnabled);
    ɵngcc0.ɵɵadvance(6);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(20, 19, "PERMISSION_MANAGER.LABELS.DIRECT-PERMISSIONS"));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("matTooltip", ɵngcc0.ɵɵpipeBind1(23, 21, "PERMISSION_MANAGER.ACTION.ADD-PERMISSION"));
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵproperty("matTooltip", ɵngcc0.ɵɵpipeBind1(27, 23, "PERMISSION_MANAGER.ACTION.DELETE"))("disabled", !(ctx_r2.selectedPermissions == null ? null : ctx_r2.selectedPermissions.length));
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵproperty("node", model_r3.node)("permissions", model_r3.localPermissions)("roles", model_r3.roles);
} }
function AddPermissionPanelComponent_mat_icon_3_Template(rf, ctx) { if (rf & 1) {
    const _r6 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "mat-icon", 7);
    ɵngcc0.ɵɵlistener("click", function AddPermissionPanelComponent_mat_icon_3_Template_mat_icon_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r6); const ctx_r5 = ɵngcc0.ɵɵnextContext(); return ctx_r5.clearSearch(); });
    ɵngcc0.ɵɵtext(1, "clear ");
    ɵngcc0.ɵɵelementEnd();
} }
function AddPermissionPanelComponent_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-icon", 8);
    ɵngcc0.ɵɵtext(1, "search ");
    ɵngcc0.ɵɵelementEnd();
} }
function AddPermissionPanelComponent_div_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 9);
    ɵngcc0.ɵɵelementStart(1, "span");
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(3, 1, "PERMISSION_MANAGER.ADD-PERMISSION.TYPE-MESSAGE"));
} }
function AddPermissionPanelComponent_ng_template_8_mat_list_option_7_ng_container_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const item_r10 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", item_r10.entry.properties["cm:authorityDisplayName"], " ");
} }
function AddPermissionPanelComponent_ng_template_8_mat_list_option_7_ng_template_5_ng_container_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const item_r10 = ɵngcc0.ɵɵnextContext(2).$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", item_r10.entry.properties["cm:authorityName"], " ");
} }
function AddPermissionPanelComponent_ng_template_8_mat_list_option_7_ng_template_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, AddPermissionPanelComponent_ng_template_8_mat_list_option_7_ng_template_5_ng_container_0_Template, 2, 1, "ng-container", 19);
} if (rf & 2) {
    const item_r10 = ɵngcc0.ɵɵnextContext().$implicit;
    const _r16 = ɵngcc0.ɵɵreference(8);
    ɵngcc0.ɵɵproperty("ngIf", item_r10.entry == null ? null : item_r10.entry.properties["cm:authorityName"])("ngIfElse", _r16);
} }
function AddPermissionPanelComponent_ng_template_8_mat_list_option_7_ng_template_7_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtext(0);
} if (rf & 2) {
    const item_r10 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵtextInterpolate2(" ", (item_r10.entry == null ? null : item_r10.entry.properties["cm:firstName"]) ? item_r10.entry == null ? null : item_r10.entry.properties["cm:firstName"] : "", " ", (item_r10.entry == null ? null : item_r10.entry.properties["cm:lastName"]) ? item_r10.entry == null ? null : item_r10.entry.properties["cm:lastName"] : "", " ");
} }
function AddPermissionPanelComponent_ng_template_8_mat_list_option_7_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-list-option", 16, 17);
    ɵngcc0.ɵɵelement(2, "adf-user-icon-column", 18);
    ɵngcc0.ɵɵelementStart(3, "p", 14);
    ɵngcc0.ɵɵtemplate(4, AddPermissionPanelComponent_ng_template_8_mat_list_option_7_ng_container_4_Template, 2, 1, "ng-container", 19);
    ɵngcc0.ɵɵtemplate(5, AddPermissionPanelComponent_ng_template_8_mat_list_option_7_ng_template_5_Template, 1, 2, "ng-template", null, 20, ɵngcc0.ɵɵtemplateRefExtractor);
    ɵngcc0.ɵɵtemplate(7, AddPermissionPanelComponent_ng_template_8_mat_list_option_7_ng_template_7_Template, 1, 2, "ng-template", null, 21, ɵngcc0.ɵɵtemplateRefExtractor);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const item_r10 = ctx.$implicit;
    const idx_r11 = ctx.index;
    const _r12 = ɵngcc0.ɵɵreference(1);
    const _r14 = ɵngcc0.ɵɵreference(6);
    ɵngcc0.ɵɵpropertyInterpolate1("id", "result_option_", idx_r11, "");
    ɵngcc0.ɵɵproperty("value", item_r10);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("node", item_r10)("selected", _r12.selected);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", item_r10.entry == null ? null : item_r10.entry.properties["cm:authorityDisplayName"])("ngIfElse", _r14);
} }
function AddPermissionPanelComponent_ng_template_8_Template(rf, ctx) { if (rf & 1) {
    const _r24 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "mat-selection-list", 10);
    ɵngcc0.ɵɵlistener("keydown.control.a", function AddPermissionPanelComponent_ng_template_8_Template_mat_selection_list_keydown_control_a_0_listener() { ɵngcc0.ɵɵrestoreView(_r24); const ctx_r23 = ɵngcc0.ɵɵnextContext(); return ctx_r23.onSelectionChange(); })("selectionChange", function AddPermissionPanelComponent_ng_template_8_Template_mat_selection_list_selectionChange_0_listener() { ɵngcc0.ɵɵrestoreView(_r24); const ctx_r25 = ɵngcc0.ɵɵnextContext(); return ctx_r25.onSelectionChange(); });
    ɵngcc0.ɵɵelementStart(1, "mat-list-option", 11, 12);
    ɵngcc0.ɵɵelement(3, "adf-user-icon-column", 13);
    ɵngcc0.ɵɵelementStart(4, "p", 14);
    ɵngcc0.ɵɵtext(5);
    ɵngcc0.ɵɵpipe(6, "translate");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(7, AddPermissionPanelComponent_ng_template_8_mat_list_option_7_Template, 9, 6, "mat-list-option", 15);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const data_r7 = ctx.$implicit;
    const _r8 = ɵngcc0.ɵɵreference(2);
    const ctx_r4 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("value", ctx_r4.EVERYONE);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("node", ctx_r4.EVERYONE)("selected", _r8.selected);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(6, 5, "PERMISSION_MANAGER.ADD-PERMISSION.EVERYONE"), " ");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngForOf", data_r7 == null ? null : data_r7.list == null ? null : data_r7.list.entries);
} }
function UserIconColumnComponent_div_0_ng_container_1_mat_icon_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-icon", 5);
    ɵngcc0.ɵɵtext(1, "people_alt_outline");
    ɵngcc0.ɵɵelementEnd();
} }
function UserIconColumnComponent_div_0_ng_container_1_div_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "div", 6);
    ɵngcc0.ɵɵpipe(1, "usernameInitials");
} if (rf & 2) {
    const user_r3 = ɵngcc0.ɵɵnextContext().ngIf;
    ɵngcc0.ɵɵproperty("outerHTML", ɵngcc0.ɵɵpipeBind2(1, 1, user_r3, "adf-people-initial"), ɵngcc0.ɵɵsanitizeHtml);
} }
function UserIconColumnComponent_div_0_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, UserIconColumnComponent_div_0_ng_container_1_mat_icon_1_Template, 2, 0, "mat-icon", 3);
    ɵngcc0.ɵɵtemplate(2, UserIconColumnComponent_div_0_ng_container_1_div_2_Template, 2, 4, "div", 4);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r2.group);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r2.group);
} }
function UserIconColumnComponent_div_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 1);
    ɵngcc0.ɵɵtemplate(1, UserIconColumnComponent_div_0_ng_container_1_Template, 3, 2, "ng-container", 2);
    ɵngcc0.ɵɵpipe(2, "async");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵattribute("id", ctx_r0.group ? "group-icon" : "person-icon");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ɵngcc0.ɵɵpipeBind1(2, 2, ctx_r0.displayText$));
} }
function UserIconColumnComponent_div_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 1);
    ɵngcc0.ɵɵelement(1, "mat-icon", 7);
    ɵngcc0.ɵɵelementEnd();
} }
function UserNameColumnComponent_span_7_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 3);
    ɵngcc0.ɵɵpipe(1, "async");
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "async");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(1, 2, ctx_r0.subTitleText$));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(3, 4, ctx_r0.subTitleText$), " ");
} }
function UserRoleColumnComponent_mat_form_field_0_mat_option_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-option", 5);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "adfLocalizedRole");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const role_r3 = ctx.$implicit;
    ɵngcc0.ɵɵproperty("value", role_r3.role);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 2, role_r3.label), " ");
} }
function UserRoleColumnComponent_mat_form_field_0_Template(rf, ctx) { if (rf & 1) {
    const _r5 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "mat-form-field", 2);
    ɵngcc0.ɵɵelementStart(1, "mat-select", 3);
    ɵngcc0.ɵɵlistener("click", function UserRoleColumnComponent_mat_form_field_0_Template_mat_select_click_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r5); return $event.stopPropagation(); })("selectionChange", function UserRoleColumnComponent_mat_form_field_0_Template_mat_select_selectionChange_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r5); const ctx_r6 = ɵngcc0.ɵɵnextContext(); return ctx_r6.onRoleChanged($event.value); });
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵtemplate(3, UserRoleColumnComponent_mat_form_field_0_mat_option_3_Template, 3, 4, "mat-option", 4);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("placeholder", ɵngcc0.ɵɵpipeBind1(2, 3, ctx_r0.placeholder))("value", ctx_r0.value);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r0.roles);
} }
function UserRoleColumnComponent_span_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 6);
    ɵngcc0.ɵɵpipe(1, "adfLocalizedRole");
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵpipe(3, "adfLocalizedRole");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("title", ɵngcc0.ɵɵpipeBind1(1, 2, ctx_r1.value));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(3, 4, ctx_r1.value), " ");
} }
function PermissionContainerComponent_ng_template_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "adf-user-icon-column", 7);
} if (rf & 2) {
    const context_r7 = ctx.$implicit;
    ɵngcc0.ɵɵproperty("context", context_r7);
} }
function PermissionContainerComponent_ng_template_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "adf-user-name-column", 7);
} if (rf & 2) {
    const context_r8 = ctx.$implicit;
    ɵngcc0.ɵɵproperty("context", context_r8);
} }
function PermissionContainerComponent_data_column_8_ng_template_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "adf-node-path-column", 9);
} if (rf & 2) {
    const ctx_r9 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("node", ctx_r9.node);
} }
function PermissionContainerComponent_data_column_8_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "data-column", 8);
    ɵngcc0.ɵɵtemplate(1, PermissionContainerComponent_data_column_8_ng_template_1_Template, 1, 1, "ng-template");
    ɵngcc0.ɵɵelementEnd();
} }
function PermissionContainerComponent_ng_template_10_Template(rf, ctx) { if (rf & 1) {
    const _r12 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "adf-user-role-column", 10);
    ɵngcc0.ɵɵlistener("roleChanged", function PermissionContainerComponent_ng_template_10_Template_adf_user_role_column_roleChanged_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r12); const entry_r10 = ctx.$implicit; const ctx_r11 = ɵngcc0.ɵɵnextContext(); return ctx_r11.updateRole($event, entry_r10.row.obj); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const entry_r10 = ctx.$implicit;
    const ctx_r3 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("readonly", entry_r10.row.obj.readonly || ctx_r3.isReadOnly)("placeholder", entry_r10.data.getValue(entry_r10.row, entry_r10.col))("value", entry_r10.data.getValue(entry_r10.row, entry_r10.col))("roles", ctx_r3.roles);
} }
function PermissionContainerComponent_adf_data_column_header_11_ng_template_1_Template(rf, ctx) { if (rf & 1) {
    const _r15 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "adf-user-role-column", 11);
    ɵngcc0.ɵɵlistener("roleChanged", function PermissionContainerComponent_adf_data_column_header_11_ng_template_1_Template_adf_user_role_column_roleChanged_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r15); const ctx_r14 = ɵngcc0.ɵɵnextContext(2); return ctx_r14.bulkRoleUpdate($event); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r13 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("roles", ctx_r13.roles)("value", ctx_r13.bulkSelectionRole);
} }
function PermissionContainerComponent_adf_data_column_header_11_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "adf-data-column-header");
    ɵngcc0.ɵɵtemplate(1, PermissionContainerComponent_adf_data_column_header_11_ng_template_1_Template, 1, 2, "ng-template");
    ɵngcc0.ɵɵelementEnd();
} }
function PermissionContainerComponent_data_column_12_ng_template_1_Template(rf, ctx) { if (rf & 1) {
    const _r19 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 13);
    ɵngcc0.ɵɵlistener("click", function PermissionContainerComponent_data_column_12_ng_template_1_Template_button_click_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r19); const entry_r17 = ctx.$implicit; const ctx_r18 = ɵngcc0.ɵɵnextContext(2); return ctx_r18.removePermission($event, entry_r17.row.obj); });
    ɵngcc0.ɵɵelementStart(1, "mat-icon");
    ɵngcc0.ɵɵtext(2, "delete_outline");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const entry_r17 = ctx.$implicit;
    ɵngcc0.ɵɵproperty("disabled", entry_r17.row.obj.readonly);
    ɵngcc0.ɵɵattribute("data-automation-id", "adf-delete-permission-button-" + entry_r17.row.obj.authorityId);
} }
function PermissionContainerComponent_data_column_12_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "data-column", 12);
    ɵngcc0.ɵɵtemplate(1, PermissionContainerComponent_data_column_12_ng_template_1_Template, 3, 2, "ng-template");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵproperty("sortable", false);
} }
function PermissionContainerComponent_ng_template_14_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "adf-empty-content", 14);
    ɵngcc0.ɵɵpipe(1, "translate");
    ɵngcc0.ɵɵpipe(2, "translate");
} if (rf & 2) {
    ɵngcc0.ɵɵproperty("title", ɵngcc0.ɵɵpipeBind1(1, 2, "PERMISSION_MANAGER.MESSAGE.EMPTY-PERMISSION"))("subtitle", ɵngcc0.ɵɵpipeBind1(2, 4, "PERMISSION_MANAGER.MESSAGE.EMPTY-SUBTITLE"));
} }
const _c36 = ["slideToggleExpirationDate"];
const _c37 = ["dateTimePickerInput"];
function TreeViewComponent_mat_tree_0_mat_tree_node_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-tree-node", 5);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const treeNode_r5 = ctx.$implicit;
    ɵngcc0.ɵɵpropertyInterpolate("id", treeNode_r5.name + "-tree-node");
    ɵngcc0.ɵɵproperty("matTreeNodePaddingIndent", 15);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", treeNode_r5.name, " ");
} }
function TreeViewComponent_mat_tree_0_mat_tree_node_2_Template(rf, ctx) { if (rf & 1) {
    const _r8 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "mat-tree-node", 5);
    ɵngcc0.ɵɵelementStart(1, "button", 6);
    ɵngcc0.ɵɵlistener("click", function TreeViewComponent_mat_tree_0_mat_tree_node_2_Template_button_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r8); const treeNode_r6 = ctx.$implicit; const ctx_r7 = ɵngcc0.ɵɵnextContext(2); return ctx_r7.onNodeClicked(treeNode_r6.node); });
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementStart(3, "mat-icon", 7);
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(5, "span", 8);
    ɵngcc0.ɵɵlistener("click", function TreeViewComponent_mat_tree_0_mat_tree_node_2_Template_span_click_5_listener() { ɵngcc0.ɵɵrestoreView(_r8); const treeNode_r6 = ctx.$implicit; const ctx_r9 = ɵngcc0.ɵɵnextContext(2); return ctx_r9.onNodeClicked(treeNode_r6.node); });
    ɵngcc0.ɵɵtext(6);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const treeNode_r6 = ctx.$implicit;
    const ctx_r4 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵpropertyInterpolate("id", treeNode_r6.name + "-tree-child-node");
    ɵngcc0.ɵɵproperty("matTreeNodePaddingIndent", 15);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate("id", "button-" + treeNode_r6.name);
    ɵngcc0.ɵɵattribute("aria-label", ɵngcc0.ɵɵpipeBind2(2, 6, "ADF-TREE-VIEW.ACCESSIBILITY.ARIA_LABEL", ɵngcc0.ɵɵpureFunction1(9, _c8, treeNode_r6.name)));
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r4.treeControl.isExpanded(treeNode_r6) ? "folder_open" : "folder", " ");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(treeNode_r6.name);
} }
function TreeViewComponent_mat_tree_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-tree", 2);
    ɵngcc0.ɵɵtemplate(1, TreeViewComponent_mat_tree_0_mat_tree_node_1_Template, 2, 3, "mat-tree-node", 3);
    ɵngcc0.ɵɵtemplate(2, TreeViewComponent_mat_tree_0_mat_tree_node_2_Template, 7, 11, "mat-tree-node", 4);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("dataSource", ctx_r0.dataSource)("treeControl", ctx_r0.treeControl);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("matTreeNodeDefWhen", ctx_r0.hasChild);
} }
function TreeViewComponent_ng_template_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 9);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 1, "ADF-TREE-VIEW.MISSING-ID"), " ");
} }
function AspectListComponent_div_0_mat_expansion_panel_2_table_10_th_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "th", 19);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 1, "ADF-ASPECT-LIST.PROPERTY_NAME"), " ");
} }
function AspectListComponent_div_0_mat_expansion_panel_2_table_10_td_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "td", 20);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const property_r16 = ctx.$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", property_r16.id, " ");
} }
function AspectListComponent_div_0_mat_expansion_panel_2_table_10_th_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "th", 19);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 1, "ADF-ASPECT-LIST.DESCRIPTION"), " ");
} }
function AspectListComponent_div_0_mat_expansion_panel_2_table_10_td_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "td", 20);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const property_r17 = ctx.$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", property_r17.title, " ");
} }
function AspectListComponent_div_0_mat_expansion_panel_2_table_10_th_8_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "th", 19);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 1, "ADF-ASPECT-LIST.DATA_TYPE"), " ");
} }
function AspectListComponent_div_0_mat_expansion_panel_2_table_10_td_9_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "td", 20);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const property_r18 = ctx.$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", property_r18.dataType, " ");
} }
function AspectListComponent_div_0_mat_expansion_panel_2_table_10_tr_10_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "tr", 21);
} }
function AspectListComponent_div_0_mat_expansion_panel_2_table_10_tr_11_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "tr", 22);
} }
function AspectListComponent_div_0_mat_expansion_panel_2_table_10_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "table", 11);
    ɵngcc0.ɵɵelementContainerStart(1, 12);
    ɵngcc0.ɵɵtemplate(2, AspectListComponent_div_0_mat_expansion_panel_2_table_10_th_2_Template, 3, 3, "th", 13);
    ɵngcc0.ɵɵtemplate(3, AspectListComponent_div_0_mat_expansion_panel_2_table_10_td_3_Template, 2, 1, "td", 14);
    ɵngcc0.ɵɵelementContainerEnd();
    ɵngcc0.ɵɵelementContainerStart(4, 15);
    ɵngcc0.ɵɵtemplate(5, AspectListComponent_div_0_mat_expansion_panel_2_table_10_th_5_Template, 3, 3, "th", 13);
    ɵngcc0.ɵɵtemplate(6, AspectListComponent_div_0_mat_expansion_panel_2_table_10_td_6_Template, 2, 1, "td", 14);
    ɵngcc0.ɵɵelementContainerEnd();
    ɵngcc0.ɵɵelementContainerStart(7, 16);
    ɵngcc0.ɵɵtemplate(8, AspectListComponent_div_0_mat_expansion_panel_2_table_10_th_8_Template, 3, 3, "th", 13);
    ɵngcc0.ɵɵtemplate(9, AspectListComponent_div_0_mat_expansion_panel_2_table_10_td_9_Template, 2, 1, "td", 14);
    ɵngcc0.ɵɵelementContainerEnd();
    ɵngcc0.ɵɵtemplate(10, AspectListComponent_div_0_mat_expansion_panel_2_table_10_tr_10_Template, 1, 0, "tr", 17);
    ɵngcc0.ɵɵtemplate(11, AspectListComponent_div_0_mat_expansion_panel_2_table_10_tr_11_Template, 1, 0, "tr", 18);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r20 = ɵngcc0.ɵɵnextContext();
    const aspect_r5 = ctx_r20.$implicit;
    const colIndex_r6 = ctx_r20.index;
    const ctx_r7 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("dataSource", aspect_r5 == null ? null : aspect_r5.entry == null ? null : aspect_r5.entry.properties)("id", "aspect-list-" + colIndex_r6 + "-properties-table");
    ɵngcc0.ɵɵadvance(10);
    ɵngcc0.ɵɵproperty("matHeaderRowDef", ctx_r7.propertyColumns);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("matRowDefColumns", ctx_r7.propertyColumns);
} }
function AspectListComponent_div_0_mat_expansion_panel_2_Template(rf, ctx) { if (rf & 1) {
    const _r22 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "mat-expansion-panel", 5);
    ɵngcc0.ɵɵelementStart(1, "mat-expansion-panel-header", 5);
    ɵngcc0.ɵɵelementStart(2, "mat-panel-title");
    ɵngcc0.ɵɵelementStart(3, "mat-checkbox", 6);
    ɵngcc0.ɵɵlistener("click", function AspectListComponent_div_0_mat_expansion_panel_2_Template_mat_checkbox_click_3_listener($event) { ɵngcc0.ɵɵrestoreView(_r22); const ctx_r21 = ɵngcc0.ɵɵnextContext(2); return ctx_r21.onCheckBoxClick($event); })("change", function AspectListComponent_div_0_mat_expansion_panel_2_Template_mat_checkbox_change_3_listener($event) { ɵngcc0.ɵɵrestoreView(_r22); const aspect_r5 = ctx.$implicit; const ctx_r23 = ɵngcc0.ɵɵnextContext(2); return ctx_r23.onChange($event, aspect_r5 == null ? null : aspect_r5.entry == null ? null : aspect_r5.entry.id); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(4, "p", 7);
    ɵngcc0.ɵɵtext(5);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(6, "mat-panel-description", 8);
    ɵngcc0.ɵɵtext(7);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(8, "p", 9);
    ɵngcc0.ɵɵtext(9);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(10, AspectListComponent_div_0_mat_expansion_panel_2_table_10_Template, 12, 4, "table", 10);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const aspect_r5 = ctx.$implicit;
    const colIndex_r6 = ctx.index;
    const ctx_r4 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("id", "aspect-list-" + ctx_r4.getId(aspect_r5));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("id", "aspect-list-" + ctx_r4.getId(aspect_r5) + "header");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("id", "aspect-list-" + colIndex_r6 + "-check")("checked", ctx_r4.nodeAspects == null ? null : ctx_r4.nodeAspects.includes(aspect_r5 == null ? null : aspect_r5.entry == null ? null : aspect_r5.entry.id));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ctx_r4.getTitle(aspect_r5));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("id", "aspect-list-" + colIndex_r6 + "-title")("matTooltip", ctx_r4.getTitle(aspect_r5));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r4.getTitle(aspect_r5), " ");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("id", "aspect-list-" + colIndex_r6 + "-description");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", aspect_r5 == null ? null : aspect_r5.entry == null ? null : aspect_r5.entry.description, "");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", (aspect_r5 == null ? null : aspect_r5.entry == null ? null : aspect_r5.entry.properties == null ? null : aspect_r5.entry.properties.length) > 0);
} }
function AspectListComponent_div_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 2);
    ɵngcc0.ɵɵelementStart(1, "mat-accordion", 3);
    ɵngcc0.ɵɵtemplate(2, AspectListComponent_div_0_mat_expansion_panel_2_Template, 11, 11, "mat-expansion-panel", 4);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const aspects_r3 = ctx.ngIf;
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngForOf", aspects_r3);
} }
function AspectListComponent_ng_template_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 23);
    ɵngcc0.ɵɵelement(1, "mat-spinner", 24);
    ɵngcc0.ɵɵelementEnd();
} }
class MaterialModule {
}
MaterialModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MaterialModule });
MaterialModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MaterialModule_Factory(t) { return new (t || MaterialModule)(); }, imports: [[
            MatButtonModule,
            MatChipsModule,
            MatDialogModule,
            MatIconModule,
            MatCardModule,
            MatInputModule,
            MatListModule,
            MatProgressSpinnerModule,
            MatProgressBarModule,
            MatRippleModule,
            MatMenuModule,
            MatOptionModule,
            MatExpansionModule,
            MatSelectModule,
            MatCheckboxModule,
            MatDatepickerModule,
            MatSlideToggleModule,
            MatRadioModule,
            MatSliderModule,
            MatTreeModule,
            MatBadgeModule
        ], MatButtonModule,
        MatChipsModule,
        MatDialogModule,
        MatIconModule,
        MatCardModule,
        MatInputModule,
        MatListModule,
        MatProgressSpinnerModule,
        MatProgressBarModule,
        MatRippleModule,
        MatMenuModule,
        MatOptionModule,
        MatExpansionModule,
        MatSelectModule,
        MatCheckboxModule,
        MatDatepickerModule,
        MatSlideToggleModule,
        MatRadioModule,
        MatSliderModule,
        MatTreeModule,
        MatBadgeModule] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MaterialModule, { imports: function () { return [MatButtonModule,
        MatChipsModule,
        MatDialogModule,
        MatIconModule,
        MatCardModule,
        MatInputModule,
        MatListModule,
        MatProgressSpinnerModule,
        MatProgressBarModule,
        MatRippleModule,
        MatMenuModule,
        MatOptionModule,
        MatExpansionModule,
        MatSelectModule,
        MatCheckboxModule,
        MatDatepickerModule,
        MatSlideToggleModule,
        MatRadioModule,
        MatSliderModule,
        MatTreeModule,
        MatBadgeModule]; }, exports: function () { return [MatButtonModule,
        MatChipsModule,
        MatDialogModule,
        MatIconModule,
        MatCardModule,
        MatInputModule,
        MatListModule,
        MatProgressSpinnerModule,
        MatProgressBarModule,
        MatRippleModule,
        MatMenuModule,
        MatOptionModule,
        MatExpansionModule,
        MatSelectModule,
        MatCheckboxModule,
        MatDatepickerModule,
        MatSlideToggleModule,
        MatRadioModule,
        MatSliderModule,
        MatTreeModule,
        MatBadgeModule]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MaterialModule, [{
        type: NgModule,
        args: [{
                imports: [
                    MatButtonModule,
                    MatChipsModule,
                    MatDialogModule,
                    MatIconModule,
                    MatCardModule,
                    MatInputModule,
                    MatListModule,
                    MatProgressSpinnerModule,
                    MatProgressBarModule,
                    MatRippleModule,
                    MatMenuModule,
                    MatOptionModule,
                    MatExpansionModule,
                    MatSelectModule,
                    MatCheckboxModule,
                    MatDatepickerModule,
                    MatSlideToggleModule,
                    MatRadioModule,
                    MatSliderModule,
                    MatTreeModule,
                    MatBadgeModule
                ],
                exports: [
                    MatButtonModule,
                    MatChipsModule,
                    MatDialogModule,
                    MatIconModule,
                    MatCardModule,
                    MatInputModule,
                    MatListModule,
                    MatProgressSpinnerModule,
                    MatProgressBarModule,
                    MatRippleModule,
                    MatMenuModule,
                    MatOptionModule,
                    MatExpansionModule,
                    MatSelectModule,
                    MatCheckboxModule,
                    MatDatepickerModule,
                    MatSlideToggleModule,
                    MatRadioModule,
                    MatSliderModule,
                    MatTreeModule,
                    MatBadgeModule
                ]
            }]
    }], null, null); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class DocumentLoaderNode {
    constructor(currentNode, children) {
        this.currentNode = currentNode;
        this.children = children;
    }
}

class CustomResourcesService {
    constructor(apiService, logService) {
        this.apiService = apiService;
        this.logService = logService;
        this.CREATE_PERMISSION = 'create';
    }
    get peopleApi() {
        var _a;
        this._peopleApi = (_a = this._peopleApi) !== null && _a !== void 0 ? _a : new PeopleApi(this.apiService.getInstance());
        return this._peopleApi;
    }
    get sitesApi() {
        var _a;
        this._sitesApi = (_a = this._sitesApi) !== null && _a !== void 0 ? _a : new SitesApi(this.apiService.getInstance());
        return this._sitesApi;
    }
    get trashcanApi() {
        var _a;
        this._trashcanApi = (_a = this._trashcanApi) !== null && _a !== void 0 ? _a : new TrashcanApi(this.apiService.getInstance());
        return this._trashcanApi;
    }
    get searchApi() {
        var _a;
        this._searchApi = (_a = this._searchApi) !== null && _a !== void 0 ? _a : new SearchApi(this.apiService.getInstance());
        return this._searchApi;
    }
    get sharedLinksApi() {
        var _a;
        this._sharedLinksApi = (_a = this._sharedLinksApi) !== null && _a !== void 0 ? _a : new SharedlinksApi(this.apiService.getInstance());
        return this._sharedLinksApi;
    }
    get favoritesApi() {
        var _a;
        this._favoritesApi = (_a = this._favoritesApi) !== null && _a !== void 0 ? _a : new FavoritesApi(this.apiService.getInstance());
        return this._favoritesApi;
    }
    get nodesApi() {
        var _a;
        this._nodesApi = (_a = this._nodesApi) !== null && _a !== void 0 ? _a : new NodesApi(this.apiService.getInstance());
        return this._nodesApi;
    }
    getRecentFiles(personId, pagination, filters) {
        const defaultFilter = [
            'TYPE:"content"',
            '-PNAME:"0/wiki"',
            '-TYPE:"app:filelink"',
            '-TYPE:"cm:thumbnail"',
            '-TYPE:"cm:failedThumbnail"',
            '-TYPE:"cm:rating"',
            '-TYPE:"dl:dataList"',
            '-TYPE:"dl:todoList"',
            '-TYPE:"dl:issue"',
            '-TYPE:"dl:contact"',
            '-TYPE:"dl:eventAgenda"',
            '-TYPE:"dl:event"',
            '-TYPE:"dl:task"',
            '-TYPE:"dl:simpletask"',
            '-TYPE:"dl:meetingAgenda"',
            '-TYPE:"dl:location"',
            '-TYPE:"fm:topic"',
            '-TYPE:"fm:post"',
            '-TYPE:"ia:calendarEvent"',
            '-TYPE:"lnk:link"'
        ];
        return new Observable((observer) => {
            this.peopleApi.getPerson(personId)
                .then((person) => {
                const username = person.entry.id;
                const filterQueries = [
                    { query: `cm:modified:[NOW/DAY-30DAYS TO NOW/DAY+1DAY]` },
                    { query: `cm:modifier:${username} OR cm:creator:${username}` },
                    { query: defaultFilter.join(' AND ') }
                ];
                if (filters && filters.length > 0) {
                    filterQueries.push({
                        query: filters.join()
                    });
                }
                const query = new SearchRequest({
                    query: {
                        query: '*',
                        language: 'afts'
                    },
                    filterQueries,
                    include: ['path', 'properties', 'allowableOperations'],
                    sort: [{
                            type: 'FIELD',
                            field: 'cm:modified',
                            ascending: false
                        }],
                    paging: {
                        maxItems: pagination.maxItems,
                        skipCount: pagination.skipCount
                    }
                });
                return this.searchApi.search(query)
                    .then((searchResult) => {
                    observer.next(searchResult);
                    observer.complete();
                }, (err) => {
                    observer.error(err);
                    observer.complete();
                });
            }, (err) => {
                observer.error(err);
                observer.complete();
            });
        }).pipe(catchError((err) => this.handleError(err)));
    }
    loadFavorites(pagination, includeFields = [], where) {
        const includeFieldsRequest = this.getIncludesFields(includeFields);
        const defaultPredicate = '(EXISTS(target/file) OR EXISTS(target/folder))';
        const options = {
            maxItems: pagination.maxItems,
            skipCount: pagination.skipCount,
            where: where ? `${where} AND ${defaultPredicate}` : defaultPredicate,
            include: includeFieldsRequest
        };
        return new Observable((observer) => {
            this.favoritesApi.listFavorites('-me-', options)
                .then((result) => {
                const page = {
                    list: {
                        entries: result.list.entries
                            .map(({ entry }) => {
                            const target = entry.target.file || entry.target.folder;
                            target.properties = Object.assign(Object.assign({}, (target.properties || {
                                'cm:title': entry.title || target.title,
                                'cm:description': entry.description || target.description
                            })), (entry.properties || {}));
                            return {
                                entry: target
                            };
                        }),
                        pagination: result.list.pagination
                    }
                };
                observer.next(page);
                observer.complete();
            }, (err) => {
                observer.error(err);
                observer.complete();
            });
        }).pipe(catchError((err) => this.handleError(err)));
    }
    loadMemberSites(pagination, where) {
        const options = {
            include: ['properties'],
            maxItems: pagination.maxItems,
            skipCount: pagination.skipCount,
            where
        };
        return new Observable((observer) => {
            this.sitesApi.listSiteMembershipsForPerson('-me-', options)
                .then((result) => {
                const page = new SiteMemberPaging({
                    list: {
                        entries: result.list.entries
                            .map(({ entry: { site } }) => {
                            site.allowableOperations = site.allowableOperations ? site.allowableOperations : [this.CREATE_PERMISSION];
                            site.name = site.name || site.title;
                            return {
                                entry: site
                            };
                        }),
                        pagination: result.list.pagination
                    }
                });
                observer.next(page);
                observer.complete();
            }, (err) => {
                observer.error(err);
                observer.complete();
            });
        }).pipe(catchError((err) => this.handleError(err)));
    }
    loadSites(pagination, where) {
        const options = {
            include: ['properties', 'aspectNames'],
            maxItems: pagination.maxItems,
            skipCount: pagination.skipCount,
            where
        };
        return new Observable((observer) => {
            this.sitesApi
                .listSites(options)
                .then((page) => {
                page.list.entries.map(({ entry }) => {
                    entry.name = entry.name || entry.title;
                    return { entry };
                });
                observer.next(page);
                observer.complete();
            }, (err) => {
                observer.error(err);
                observer.complete();
            });
        }).pipe(catchError((err) => this.handleError(err)));
    }
    loadTrashcan(pagination, includeFields = []) {
        const includeFieldsRequest = this.getIncludesFields(includeFields);
        const options = {
            include: includeFieldsRequest,
            maxItems: pagination.maxItems,
            skipCount: pagination.skipCount
        };
        return from(this.trashcanApi.listDeletedNodes(options))
            .pipe(catchError((err) => this.handleError(err)));
    }
    loadSharedLinks(pagination, includeFields = [], where) {
        const includeFieldsRequest = this.getIncludesFields(includeFields);
        const options = {
            include: includeFieldsRequest,
            maxItems: pagination.maxItems,
            skipCount: pagination.skipCount,
            where
        };
        return from(this.sharedLinksApi.listSharedLinks(options))
            .pipe(catchError((err) => this.handleError(err)));
    }
    isCustomSource(folderId) {
        let isCustomSources = false;
        const sources = ['-trashcan-', '-sharedlinks-', '-sites-', '-mysites-', '-favorites-', '-recent-'];
        if (sources.indexOf(folderId) > -1) {
            isCustomSources = true;
        }
        return isCustomSources;
    }
    isSupportedSource(folderId) {
        let isSupportedSources = false;
        const sources = ['-my-', '-root-', '-shared-'];
        if (sources.indexOf(folderId) > -1) {
            isSupportedSources = true;
        }
        return isSupportedSources;
    }
    loadFolderByNodeId(nodeId, pagination, includeFields = [], where) {
        if (nodeId === '-trashcan-') {
            return this.loadTrashcan(pagination, includeFields);
        }
        else if (nodeId === '-sharedlinks-') {
            return this.loadSharedLinks(pagination, includeFields, where);
        }
        else if (nodeId === '-sites-') {
            return this.loadSites(pagination, where);
        }
        else if (nodeId === '-mysites-') {
            return this.loadMemberSites(pagination, where);
        }
        else if (nodeId === '-favorites-') {
            return this.loadFavorites(pagination, includeFields, where);
        }
        else if (nodeId === '-recent-') {
            return this.getRecentFiles('-me-', pagination);
        }
    }
    getCorrespondingNodeIds(nodeId, pagination = {}) {
        if (this.isCustomSource(nodeId)) {
            return this.loadFolderByNodeId(nodeId, pagination)
                .pipe(map((result) => {
                return result.list.entries.map((node) => this.getIdFromEntry(node, nodeId));
            }));
        }
        else if (nodeId) {
            return from(this.nodesApi.getNode(nodeId)
                .then((node) => [node.entry.id]));
        }
        return of([]);
    }
    getIdFromEntry(node, nodeId) {
        if (nodeId === '-sharedlinks-') {
            return node.entry.nodeId;
        }
        else if (nodeId === '-sites-' || nodeId === '-mysites-') {
            return node.entry.guid;
        }
        else if (nodeId === '-favorites-') {
            return node.entry.targetGuid;
        }
        else {
            return node.entry.id;
        }
    }
    hasCorrespondingNodeIds(nodeId) {
        return this.isCustomSource(nodeId) || this.isSupportedSource(nodeId);
    }
    getIncludesFields(includeFields) {
        return ['path', 'properties', 'allowableOperations', 'permissions', 'aspectNames', ...includeFields]
            .filter((element, index, array) => index === array.indexOf(element));
    }
    handleError(error) {
        this.logService.error(error);
        return throwError(error || 'Server error');
    }
}
CustomResourcesService.ɵfac = function CustomResourcesService_Factory(t) { return new (t || CustomResourcesService)(ɵngcc0.ɵɵinject(ɵngcc1.AlfrescoApiService), ɵngcc0.ɵɵinject(ɵngcc1.LogService)); };
CustomResourcesService.ɵprov = ɵɵdefineInjectable({ factory: function CustomResourcesService_Factory() { return new CustomResourcesService(ɵɵinject(AlfrescoApiService), ɵɵinject(LogService)); }, token: CustomResourcesService, providedIn: "root" });
CustomResourcesService.ctorParameters = () => [
    { type: AlfrescoApiService },
    { type: LogService }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CustomResourcesService, [{
        type: Injectable,
        args: [{ providedIn: 'root' }]
    }], function () { return [{ type: ɵngcc1.AlfrescoApiService }, { type: ɵngcc1.LogService }]; }, null); })();

class DocumentListService {
    constructor(contentService, apiService, logService, customResourcesService) {
        this.contentService = contentService;
        this.apiService = apiService;
        this.logService = logService;
        this.customResourcesService = customResourcesService;
    }
    get nodes() {
        var _a;
        this._nodesApi = (_a = this._nodesApi) !== null && _a !== void 0 ? _a : new NodesApi(this.apiService.getInstance());
        return this._nodesApi;
    }
    deleteNode(nodeId) {
        return from(this.nodes.deleteNode(nodeId));
    }
    copyNode(nodeId, targetParentId) {
        return from(this.nodes.copyNode(nodeId, { targetParentId })).pipe(catchError((err) => this.handleError(err)));
    }
    moveNode(nodeId, targetParentId) {
        return from(this.nodes.moveNode(nodeId, { targetParentId })).pipe(catchError((err) => this.handleError(err)));
    }
    getFolder(folder, opts, includeFields = []) {
        let rootNodeId = DocumentListService.ROOT_ID;
        if (opts && opts.rootFolderId) {
            rootNodeId = opts.rootFolderId;
        }
        const includeFieldsRequest = ['path', 'properties', 'allowableOperations', 'permissions', 'aspectNames', ...includeFields]
            .filter((element, index, array) => index === array.indexOf(element));
        const params = {
            includeSource: true,
            include: includeFieldsRequest
        };
        if (folder) {
            params.relativePath = folder;
        }
        if (opts) {
            if (opts.maxItems) {
                params.maxItems = opts.maxItems;
            }
            if (opts.skipCount) {
                params.skipCount = opts.skipCount;
            }
            if (opts.where) {
                params.where = opts.where;
            }
            if (opts.orderBy) {
                params.orderBy = opts.orderBy;
            }
        }
        return from(this.nodes.listNodeChildren(rootNodeId, params)).pipe(catchError((err) => this.handleError(err)));
    }
    getNode(nodeId, includeFields = []) {
        const includeFieldsRequest = ['path', 'properties', 'allowableOperations', 'permissions', 'definition', ...includeFields]
            .filter((element, index, array) => index === array.indexOf(element));
        const opts = {
            includeSource: true,
            include: includeFieldsRequest
        };
        return this.contentService.getNode(nodeId, opts);
    }
    getFolderNode(nodeId, includeFields = []) {
        const includeFieldsRequest = ['path', 'properties', 'allowableOperations', 'permissions', 'aspectNames', ...includeFields]
            .filter((element, index, array) => index === array.indexOf(element));
        const opts = {
            includeSource: true,
            include: includeFieldsRequest
        };
        return from(this.nodes.getNode(nodeId, opts)).pipe(catchError((err) => this.handleError(err)));
    }
    isCustomSourceService(nodeId) {
        return this.customResourcesService.isCustomSource(nodeId);
    }
    loadFolderByNodeId(nodeId, pagination, includeFields, where, orderBy) {
        if (this.customResourcesService.isCustomSource(nodeId)) {
            return this.customResourcesService.loadFolderByNodeId(nodeId, pagination, includeFields, where).pipe(map((result) => new DocumentLoaderNode(null, result)));
        }
        else {
            return this.retrieveDocumentNode(nodeId, pagination, includeFields, where, orderBy);
        }
    }
    retrieveDocumentNode(nodeId, pagination, includeFields, where, orderBy) {
        return forkJoin([
            this.getFolderNode(nodeId, includeFields),
            this.getFolder(null, {
                maxItems: pagination.maxItems,
                skipCount: pagination.skipCount,
                orderBy: orderBy,
                rootFolderId: nodeId,
                where: where
            }, includeFields)
        ]).pipe(map((results) => new DocumentLoaderNode(results[0], results[1])));
    }
    handleError(error) {
        this.logService.error(error);
        return throwError(error || 'Server error');
    }
}
DocumentListService.ɵfac = function DocumentListService_Factory(t) { return new (t || DocumentListService)(ɵngcc0.ɵɵinject(ɵngcc1.ContentService), ɵngcc0.ɵɵinject(ɵngcc1.AlfrescoApiService), ɵngcc0.ɵɵinject(ɵngcc1.LogService), ɵngcc0.ɵɵinject(CustomResourcesService)); };
DocumentListService.ROOT_ID = '-root-';
DocumentListService.ɵprov = ɵɵdefineInjectable({ factory: function DocumentListService_Factory() { return new DocumentListService(ɵɵinject(ContentService), ɵɵinject(AlfrescoApiService), ɵɵinject(LogService), ɵɵinject(CustomResourcesService)); }, token: DocumentListService, providedIn: "root" });
DocumentListService.ctorParameters = () => [
    { type: ContentService },
    { type: AlfrescoApiService },
    { type: LogService },
    { type: CustomResourcesService }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DocumentListService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc1.ContentService }, { type: ɵngcc1.AlfrescoApiService }, { type: ɵngcc1.LogService }, { type: CustomResourcesService }]; }, null); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var NodeAction;
(function (NodeAction) {
    NodeAction["ATTACH"] = "ATTACH";
    NodeAction["CHOOSE"] = "CHOOSE";
    NodeAction["COPY"] = "COPY";
    NodeAction["MOVE"] = "MOVE";
    NodeAction["NEXT"] = "NEXT";
})(NodeAction || (NodeAction = {}));

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class ContentNodeSelectorComponent {
    constructor(translation, contentService, notificationService, uploadService, dialog, data) {
        var _a;
        this.translation = translation;
        this.contentService = contentService;
        this.notificationService = notificationService;
        this.uploadService = uploadService;
        this.dialog = dialog;
        this.data = data;
        this.showingSearch = false;
        this.hasAllowableOperations = false;
        this.isLoading = true;
        this.selectedTabIndex = 0;
        this.uploadStarted = false;
        this.emptyFolderImageUrl = './assets/images/empty_doc_lib.svg';
        this.action = (_a = data.actionName) !== null && _a !== void 0 ? _a : NodeAction.CHOOSE;
        this.buttonActionName = `NODE_SELECTOR.${this.action}`;
        this.title = data.title;
        this.currentDirectoryId = data.currentFolderId;
    }
    ngOnInit() {
        this.dialog.keydownEvents().subscribe(event => {
            if (event.keyCode === 27) {
                event.preventDefault();
                event.stopImmediatePropagation();
                this.close();
            }
        });
        this.dialog.backdropClick().subscribe(() => {
            this.close();
        });
        this.uploadService.fileUploadStarting.subscribe(() => {
            this.uploadStarted = true;
        });
    }
    close() {
        this.dialog.close();
    }
    onSelect(nodeList) {
        this.chosenNode = nodeList;
    }
    onSiteChange(siteTitle) {
        this.updateTitle(siteTitle);
    }
    onNavigationChange(pathElement) {
        this.currentDirectoryId = pathElement.value.id;
        this.isLoading = true;
    }
    onClick() {
        this.data.select.next(this.chosenNode);
        this.close();
    }
    updateTitle(siteTitle) {
        if (this.action === NodeAction.CHOOSE && siteTitle) {
            this.title = this.getTitleTranslation(this.action, siteTitle);
        }
    }
    getTitleTranslation(action, name) {
        return this.translation.instant(`NODE_SELECTOR.${action}_ITEM`, { name: this.translation.instant(name) });
    }
    getSelectedCount() {
        var _a;
        return ((_a = this.chosenNode) === null || _a === void 0 ? void 0 : _a.length) || 0;
    }
    isCounterVisible() {
        return this.action === NodeAction.ATTACH || this.action === NodeAction.CHOOSE;
    }
    isMultipleSelection() {
        return this.data.selectionMode === 'multiple';
    }
    onError(error) {
        this.notificationService.showError(error);
    }
    isChooseButtonDisabled() {
        return this.uploadService.isUploading() || !this.hasNodeSelected();
    }
    hasNodeSelected() {
        var _a;
        return ((_a = this.chosenNode) === null || _a === void 0 ? void 0 : _a.length) > 0;
    }
    onShowingSearch(value) {
        this.showingSearch = value;
    }
    onCurrentFolder(currentFolder) {
        this.hasAllowableOperations = this.contentService.hasAllowableOperations(currentFolder, AllowableOperationsEnum.CREATE);
        this.breadcrumbFolderNode = currentFolder;
    }
    isNotAllowedToUpload() {
        return this.showingSearch || !this.hasAllowableOperations;
    }
    onFolderLoaded() {
        this.isLoading = false;
    }
    onTabSelectionChange(tabIndex) {
        this.selectedTabIndex = tabIndex;
    }
    isFileServerTabSelected() {
        return this.selectedTabIndex === 0;
    }
    isLocalUploadTabSelected() {
        return this.selectedTabIndex === 1;
    }
    isUploadEnabled() {
        return this.canPerformLocalUpload() && this.isLocalUploadTabSelected();
    }
    canPerformLocalUpload() {
        var _a;
        return (_a = this.data) === null || _a === void 0 ? void 0 : _a.showLocalUploadButton;
    }
    getWarningMessage() {
        return this.showingSearch ? 'NODE_SELECTOR.UPLOAD_BUTTON_SEARCH_WARNING_MESSAGE' :
            (this.hasNoPermissionToUpload() ? 'NODE_SELECTOR.UPLOAD_BUTTON_PERMISSION_WARNING_MESSAGE' : '');
    }
    hasNoPermissionToUpload() {
        return (!this.hasAllowableOperations && !this.showingSearch) && !this.isLoading;
    }
    hasUploadError() {
        return this.showingSearch || this.hasNoPermissionToUpload();
    }
}
ContentNodeSelectorComponent.ɵfac = function ContentNodeSelectorComponent_Factory(t) { return new (t || ContentNodeSelectorComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.TranslationService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ContentService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NotificationService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.UploadService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.MatDialogRef), ɵngcc0.ɵɵdirectiveInject(MAT_DIALOG_DATA)); };
ContentNodeSelectorComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ContentNodeSelectorComponent, selectors: [["adf-content-node-selector"]], decls: 18, vars: 30, consts: [["mat-dialog-title", "", "data-automation-id", "content-node-selector-title"], ["mat-align-tabs", "start", 1, "adf-content-node-selector-dialog-content", 3, "selectedIndexChange"], [3, "label"], [3, "currentFolderId", "restrictRootToCurrentFolderId", "dropdownHideMyFiles", "dropdownSiteList", "rowFilter", "imageResolver", "isSelectionValid", "breadcrumbTransform", "excludeSiteContent", "selectionMode", "where", "showSearch", "showDropdownSiteList", "showFilesInResult", "showNodeCounter", "currentFolder", "folderLoaded", "select", "showingSearch", "siteChange", "navigationChange"], [3, "disabled", 4, "ngIf"], [4, "ngIf"], ["mat-button", "", "data-automation-id", "content-node-selector-actions-cancel", 3, "click"], ["mat-button", "", "data-automation-id", "content-node-selector-actions-choose", 1, "adf-choose-action", 3, "disabled", "click"], [3, "disabled"], [1, "adf-content-node-selector-local-upload-container"], [1, "adf-content-node-selector-local-upload-header"], ["data-automation-id", "content-node-selector-upload-breadcrumb", 1, "adf-content-node-selector-content-breadcrumb", 3, "folderNode", "rootId", "readOnly"], [3, "adf-node-counter", 4, "ngIf"], ["mat-tab-label", ""], [1, "adf-content-node-selector-local-upload-content"], [3, "rootFolderId"], [3, "alwaysVisible"], ["data-automation-id", "adf-empty-list", 4, "ngIf"], [3, "adf-node-counter"], ["data-automation-id", "adf-content-node-selector-disabled-tab-info-icon", 3, "matTooltip", 4, "ngIf"], ["data-automation-id", "adf-content-node-selector-disabled-tab-info-icon", 3, "matTooltip"], ["data-automation-id", "adf-empty-list"], [1, "adf-empty-list_template", "adf-empty-folder"], ["fxHide.lt-md", "true", 1, "adf-empty-folder-drag-drop"], ["fxHide.lt-md", "true", 1, "adf-empty-folder-any-files-here-to-add"], [1, "adf-empty-folder-image", 3, "alt", "src"], [3, "staticTitle", "multipleFiles", "rootFolderId", "disabled", "error"]], template: function ContentNodeSelectorComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "header", 0);
        ɵngcc0.ɵɵelementStart(1, "h2");
        ɵngcc0.ɵɵtext(2);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(3, "mat-tab-group", 1);
        ɵngcc0.ɵɵlistener("selectedIndexChange", function ContentNodeSelectorComponent_Template_mat_tab_group_selectedIndexChange_3_listener($event) { return ctx.onTabSelectionChange($event); });
        ɵngcc0.ɵɵelementStart(4, "mat-tab", 2);
        ɵngcc0.ɵɵpipe(5, "translate");
        ɵngcc0.ɵɵelementStart(6, "adf-content-node-selector-panel", 3);
        ɵngcc0.ɵɵlistener("currentFolder", function ContentNodeSelectorComponent_Template_adf_content_node_selector_panel_currentFolder_6_listener($event) { return ctx.onCurrentFolder($event); })("folderLoaded", function ContentNodeSelectorComponent_Template_adf_content_node_selector_panel_folderLoaded_6_listener() { return ctx.onFolderLoaded(); })("select", function ContentNodeSelectorComponent_Template_adf_content_node_selector_panel_select_6_listener($event) { return ctx.onSelect($event); })("showingSearch", function ContentNodeSelectorComponent_Template_adf_content_node_selector_panel_showingSearch_6_listener($event) { return ctx.onShowingSearch($event); })("siteChange", function ContentNodeSelectorComponent_Template_adf_content_node_selector_panel_siteChange_6_listener($event) { return ctx.onSiteChange($event); })("navigationChange", function ContentNodeSelectorComponent_Template_adf_content_node_selector_panel_navigationChange_6_listener($event) { return ctx.onNavigationChange($event); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(7, ContentNodeSelectorComponent_mat_tab_7_Template, 13, 10, "mat-tab", 4);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(8, "mat-dialog-actions");
        ɵngcc0.ɵɵelementStart(9, "div");
        ɵngcc0.ɵɵtemplate(10, ContentNodeSelectorComponent_ng_container_10_Template, 3, 6, "ng-container", 5);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(11, "div");
        ɵngcc0.ɵɵelementStart(12, "button", 6);
        ɵngcc0.ɵɵlistener("click", function ContentNodeSelectorComponent_Template_button_click_12_listener() { return ctx.close(); });
        ɵngcc0.ɵɵtext(13);
        ɵngcc0.ɵɵpipe(14, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(15, "button", 7);
        ɵngcc0.ɵɵlistener("click", function ContentNodeSelectorComponent_Template_button_click_15_listener() { return ctx.onClick(); });
        ɵngcc0.ɵɵtext(16);
        ɵngcc0.ɵɵpipe(17, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵtextInterpolate(ctx.title);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵclassProp("adf-content-node-selector-headless-tabs", !ctx.canPerformLocalUpload());
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵpropertyInterpolate("label", ɵngcc0.ɵɵpipeBind1(5, 24, "NODE_SELECTOR.REPOSITORY"));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("currentFolderId", ctx.data == null ? null : ctx.data.currentFolderId)("restrictRootToCurrentFolderId", ctx.data == null ? null : ctx.data.restrictRootToCurrentFolderId)("dropdownHideMyFiles", ctx.data == null ? null : ctx.data.dropdownHideMyFiles)("dropdownSiteList", ctx.data == null ? null : ctx.data.dropdownSiteList)("rowFilter", ctx.data == null ? null : ctx.data.rowFilter)("imageResolver", ctx.data == null ? null : ctx.data.imageResolver)("isSelectionValid", ctx.data == null ? null : ctx.data.isSelectionValid)("breadcrumbTransform", ctx.data == null ? null : ctx.data.breadcrumbTransform)("excludeSiteContent", ctx.data == null ? null : ctx.data.excludeSiteContent)("selectionMode", ctx.data == null ? null : ctx.data.selectionMode)("where", ctx.data == null ? null : ctx.data.where)("showSearch", ctx.data == null ? null : ctx.data.showSearch)("showDropdownSiteList", ctx.data == null ? null : ctx.data.showDropdownSiteList)("showFilesInResult", ctx.data == null ? null : ctx.data.showFilesInResult)("showNodeCounter", ctx.isCounterVisible());
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.canPerformLocalUpload());
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngIf", ctx.isUploadEnabled());
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵtextInterpolate1("", ɵngcc0.ɵɵpipeBind1(14, 26, "NODE_SELECTOR.CANCEL"), " ");
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("disabled", ctx.isChooseButtonDisabled());
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate1("", ɵngcc0.ɵɵpipeBind1(17, 28, ctx.buttonActionName), " ");
    } }, directives: function () { return [ɵngcc2.MatDialogTitle, ɵngcc3.MatTabGroup, ɵngcc3.MatTab, ContentNodeSelectorPanelComponent, ɵngcc4.NgIf, ɵngcc2.MatDialogActions, ɵngcc5.MatButton, ɵngcc1.ToolbarComponent, ɵngcc1.ToolbarTitleComponent, DropdownBreadcrumbComponent, ɵngcc3.MatTabLabel, UploadDragAreaComponent, FileUploadingDialogComponent, NodeCounterDirective, ɵngcc6.MatIcon, ɵngcc7.MatTooltip, ɵngcc1.EmptyListComponent, UploadButtonComponent]; }, pipes: function () { return [ɵngcc8.TranslatePipe]; }, styles: ["adf-content-node-selector .adf-content-node-selector-headless-tabs .mat-tab-header{display:none}adf-content-node-selector .adf-upload-dialog{bottom:unset;box-shadow:none;height:100%;position:unset;width:100%}adf-content-node-selector .adf-upload-dialog__content{max-height:64%}adf-content-node-selector .adf-upload-dialog-container{height:380px}adf-content-node-selector .adf-toolbar-title{place-items:center}adf-content-node-selector .adf-content-node-selector-local-upload-content{height:368px}adf-content-node-selector .adf-content-node-selector-local-upload-content adf-upload-drag-area adf-empty-list .adf-empty-folder-drag-drop{font-size:40px;min-height:46px}adf-content-node-selector .adf-content-node-selector-local-upload-content adf-upload-drag-area adf-empty-list .adf-empty-folder-image{height:100px;width:460px}.adf-content-node-selector-dialog-content{padding-left:24px;padding-right:24px}.adf-content-node-selector-dialog .mat-dialog-title{color:var(--theme-text-bold-color);font-size:20px;font-stretch:normal;font-style:normal;font-weight:600;letter-spacing:-.5px;line-height:1.6;margin-left:24px;margin-right:24px}.adf-content-node-selector-dialog .mat-dialog-title h2{font-size:unset;margin:unset}.adf-content-node-selector-dialog .mat-dialog-container{padding-left:0;padding-right:0}.adf-content-node-selector-dialog .mat-dialog-content{margin:0;overflow:hidden}.adf-content-node-selector-dialog .mat-dialog-actions{background-color:var(--theme-background-color);color:var(--theme-foreground-text-color);display:flex;flex-direction:row;height:61px;justify-content:space-between;padding:8px}.adf-content-node-selector-dialog .mat-dialog-actions button{font-weight:400;text-transform:uppercase}.adf-content-node-selector-dialog .mat-dialog-actions .adf-choose-action[disabled]{color:var(--theme-secondary-text-color)}.adf-content-node-selector-dialog .mat-dialog-actions .adf-choose-action:enabled{color:var(--theme-primary-color)}"], encapsulation: 2 });
ContentNodeSelectorComponent.ctorParameters = () => [
    { type: TranslationService },
    { type: ContentService },
    { type: NotificationService },
    { type: UploadService },
    { type: MatDialogRef },
    { type: undefined, decorators: [{ type: Inject, args: [MAT_DIALOG_DATA,] }] }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ContentNodeSelectorComponent, [{
        type: Component,
        args: [{
                selector: 'adf-content-node-selector',
                template: "<header\n    mat-dialog-title\n    data-automation-id=\"content-node-selector-title\">\n    <h2>{{title}}</h2>\n</header>\n\n<mat-tab-group class=\"adf-content-node-selector-dialog-content\"\n               mat-align-tabs=\"start\"\n               (selectedIndexChange)=\"onTabSelectionChange($event)\"\n               [class.adf-content-node-selector-headless-tabs]=\"!canPerformLocalUpload()\">\n    <mat-tab label=\"{{ 'NODE_SELECTOR.REPOSITORY' | translate }}\">\n            <adf-content-node-selector-panel\n                [currentFolderId]=\"data?.currentFolderId\"\n                [restrictRootToCurrentFolderId]=\"data?.restrictRootToCurrentFolderId\"\n                [dropdownHideMyFiles]=\"data?.dropdownHideMyFiles\"\n                [dropdownSiteList]=\"data?.dropdownSiteList\"\n                [rowFilter]=\"data?.rowFilter\"\n                [imageResolver]=\"data?.imageResolver\"\n                [isSelectionValid]=\"data?.isSelectionValid\"\n                [breadcrumbTransform]=\"data?.breadcrumbTransform\"\n                [excludeSiteContent]=\"data?.excludeSiteContent\"\n                [selectionMode]=\"data?.selectionMode\"\n                [where]=\"data?.where\"\n                [showSearch]=\"data?.showSearch\"\n                [showDropdownSiteList]=\"data?.showDropdownSiteList\"\n                [showFilesInResult]=\"data?.showFilesInResult\"\n                [showNodeCounter]=\"isCounterVisible()\"\n                (currentFolder)=\"onCurrentFolder($event)\"\n                (folderLoaded)=\"onFolderLoaded()\"\n                (select)=\"onSelect($event)\"\n                (showingSearch)=\"onShowingSearch($event)\"\n                (siteChange)=\"onSiteChange($event)\"\n                (navigationChange)=\"onNavigationChange($event)\">\n            </adf-content-node-selector-panel>\n    </mat-tab>\n    <mat-tab *ngIf=\"canPerformLocalUpload()\"\n             [disabled]=\"isNotAllowedToUpload()\">\n        <div class=\"adf-content-node-selector-local-upload-container\">\n            <div class=\"adf-content-node-selector-local-upload-header\">\n                <adf-toolbar>\n                    <adf-toolbar-title>\n                        <adf-dropdown-breadcrumb\n                            class=\"adf-content-node-selector-content-breadcrumb\"\n                            [folderNode]=\"breadcrumbFolderNode\"\n                            [rootId]=\"data?.currentFolderId\"\n                            [readOnly]=\"true\"\n                            data-automation-id=\"content-node-selector-upload-breadcrumb\"\n                        ></adf-dropdown-breadcrumb>\n                        <ng-container *ngIf=\"isCounterVisible()\" [adf-node-counter]=\"getSelectedCount()\"></ng-container>\n                    </adf-toolbar-title>\n                </adf-toolbar>\n                <ng-template mat-tab-label>\n                    {{ 'NODE_SELECTOR.UPLOAD_FROM_DEVICE' | translate }}\n                    <mat-icon *ngIf=\"hasUploadError()\"\n                              data-automation-id=\"adf-content-node-selector-disabled-tab-info-icon\"\n                              matTooltip=\"{{ getWarningMessage() | translate }}\">info\n                    </mat-icon>\n                </ng-template>\n            </div>\n            <div class=\"adf-content-node-selector-local-upload-content\">\n                <adf-upload-drag-area [rootFolderId]=\"currentDirectoryId\">\n                    <div [class.adf-upload-dialog-container]=\"uploadStarted\">\n                        <adf-file-uploading-dialog [alwaysVisible]=\"true\"></adf-file-uploading-dialog>\n                    </div>\n                    <adf-empty-list data-automation-id=\"adf-empty-list\" *ngIf=\"!uploadStarted\">\n                        <div class=\"adf-empty-list_template adf-empty-folder\">\n                            <div fxHide.lt-md=\"true\"\n                                 class=\"adf-empty-folder-drag-drop\">{{ 'ADF-DATATABLE.EMPTY.DRAG-AND-DROP.TITLE' | translate }}</div>\n                            <div fxHide.lt-md=\"true\"\n                                 class=\"adf-empty-folder-any-files-here-to-add\">{{ 'ADF-DATATABLE.EMPTY.DRAG-AND-DROP.SUBTITLE' | translate }}</div>\n                            <img [alt]=\"'ADF-DATATABLE.EMPTY.DRAG-AND-DROP.TITLE' | translate\" class=\"adf-empty-folder-image\"\n                                 [src]=\"emptyFolderImageUrl\">\n                        </div>\n                    </adf-empty-list>\n                </adf-upload-drag-area>\n            </div>\n        </div>\n    </mat-tab>\n</mat-tab-group>\n\n<mat-dialog-actions>\n    <div>\n        <ng-container *ngIf=\"isUploadEnabled()\">\n            <adf-upload-button\n                [staticTitle]=\"'FORM.FIELD.UPLOAD' | translate \"\n                [multipleFiles]=\"isMultipleSelection()\"\n                [rootFolderId]=\"currentDirectoryId\"\n                [disabled]=\"isNotAllowedToUpload()\"\n                (error)=\"onError($event)\">\n            </adf-upload-button>\n        </ng-container>\n    </div>\n    <div>\n        <button\n            mat-button\n            (click)=\"close()\"\n            data-automation-id=\"content-node-selector-actions-cancel\">{{ 'NODE_SELECTOR.CANCEL' | translate }}\n        </button>\n\n        <button mat-button\n                [disabled]=\"isChooseButtonDisabled()\"\n                class=\"adf-choose-action\"\n                (click)=\"onClick()\"\n                data-automation-id=\"content-node-selector-actions-choose\">{{ buttonActionName | translate }}\n        </button>\n    </div>\n</mat-dialog-actions>\n",
                encapsulation: ViewEncapsulation.None,
                styles: ["adf-content-node-selector .adf-content-node-selector-headless-tabs .mat-tab-header{display:none}adf-content-node-selector .adf-upload-dialog{bottom:unset;box-shadow:none;height:100%;position:unset;width:100%}adf-content-node-selector .adf-upload-dialog__content{max-height:64%}adf-content-node-selector .adf-upload-dialog-container{height:380px}adf-content-node-selector .adf-toolbar-title{place-items:center}adf-content-node-selector .adf-content-node-selector-local-upload-content{height:368px}adf-content-node-selector .adf-content-node-selector-local-upload-content adf-upload-drag-area adf-empty-list .adf-empty-folder-drag-drop{font-size:40px;min-height:46px}adf-content-node-selector .adf-content-node-selector-local-upload-content adf-upload-drag-area adf-empty-list .adf-empty-folder-image{height:100px;width:460px}.adf-content-node-selector-dialog-content{padding-left:24px;padding-right:24px}.adf-content-node-selector-dialog .mat-dialog-title{color:var(--theme-text-bold-color);font-size:20px;font-stretch:normal;font-style:normal;font-weight:600;letter-spacing:-.5px;line-height:1.6;margin-left:24px;margin-right:24px}.adf-content-node-selector-dialog .mat-dialog-title h2{font-size:unset;margin:unset}.adf-content-node-selector-dialog .mat-dialog-container{padding-left:0;padding-right:0}.adf-content-node-selector-dialog .mat-dialog-content{margin:0;overflow:hidden}.adf-content-node-selector-dialog .mat-dialog-actions{background-color:var(--theme-background-color);color:var(--theme-foreground-text-color);display:flex;flex-direction:row;height:61px;justify-content:space-between;padding:8px}.adf-content-node-selector-dialog .mat-dialog-actions button{font-weight:400;text-transform:uppercase}.adf-content-node-selector-dialog .mat-dialog-actions .adf-choose-action[disabled]{color:var(--theme-secondary-text-color)}.adf-content-node-selector-dialog .mat-dialog-actions .adf-choose-action:enabled{color:var(--theme-primary-color)}"]
            }]
    }], function () { return [{ type: ɵngcc1.TranslationService }, { type: ɵngcc1.ContentService }, { type: ɵngcc1.NotificationService }, { type: ɵngcc1.UploadService }, { type: ɵngcc2.MatDialogRef }, { type: undefined, decorators: [{
                type: Inject,
                args: [MAT_DIALOG_DATA]
            }] }]; }, null); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class NodeLockDialogComponent {
    constructor(formBuilder, dialog, alfrescoApi, data) {
        this.formBuilder = formBuilder;
        this.dialog = dialog;
        this.alfrescoApi = alfrescoApi;
        this.data = data;
        this.node = null;
    }
    get nodesApi() {
        var _a;
        this._nodesApi = (_a = this._nodesApi) !== null && _a !== void 0 ? _a : new NodesApi(this.alfrescoApi.getInstance());
        return this._nodesApi;
    }
    ngOnInit() {
        const { node } = this.data;
        this.nodeName = node.name;
        this.form = this.formBuilder.group({
            isLocked: node.isLocked || false,
            allowOwner: node.properties['cm:lockType'] === 'WRITE_LOCK',
            isTimeLock: !!node.properties['cm:expiryDate'],
            time: !!node.properties['cm:expiryDate'] ? moment$1(node.properties['cm:expiryDate']) : moment$1()
        });
    }
    get lockTimeInSeconds() {
        if (this.form.value.isTimeLock) {
            const duration = moment$1.duration(moment$1(this.form.value.time).diff(moment$1()));
            return duration.asSeconds();
        }
        return 0;
    }
    get nodeBodyLock() {
        return new NodeBodyLock({
            'timeToExpire': this.lockTimeInSeconds,
            'type': this.form.value.allowOwner ? 'ALLOW_OWNER_CHANGES' : 'FULL',
            'lifetime': 'PERSISTENT'
        });
    }
    toggleLock() {
        const { data: { node } } = this;
        if (this.form.value.isLocked) {
            return this.nodesApi.lockNode(node.id, this.nodeBodyLock);
        }
        return this.nodesApi.unlockNode(node.id);
    }
    submit() {
        this.toggleLock()
            .then((node) => {
            this.data.node.isLocked = this.form.value.isLocked;
            this.dialog.close(node.entry);
        })
            .catch((error) => this.data.onError(error));
    }
}
NodeLockDialogComponent.ɵfac = function NodeLockDialogComponent_Factory(t) { return new (t || NodeLockDialogComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc9.FormBuilder), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.MatDialogRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.AlfrescoApiService), ɵngcc0.ɵɵdirectiveInject(MAT_DIALOG_DATA, 8)); };
NodeLockDialogComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: NodeLockDialogComponent, selectors: [["adf-node-lock"]], decls: 22, vars: 17, consts: [["mat-dialog-title", ""], [3, "formGroup", "submit"], ["data-automation-id", "adf-lock-node-checkbox", "ngDefaultControl", "", 1, "adf-lock-file-name", 3, "matTooltip", "formControlName"], [4, "ngIf"], [1, "adf-dialog-buttons"], [1, "adf-fill-remaining-space"], ["mat-button", "", "mat-dialog-close", "", "data-automation-id", "lock-dialog-btn-cancel"], ["mat-button", "", 1, "adf-dialog-action-button", 3, "click"], ["ngDefaultControl", "", 1, "adf-lock-file-name", 3, "formControlName"], ["matSuffix", "", 3, "for"], ["type", "datetime", 3, "openOnFocus", "timeInterval"], ["datetimePicker", ""], ["matInput", "", "required", "", "autocomplete", "false", 3, "formControlName", "matDatetimepicker"]], template: function NodeLockDialogComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "h2", 0);
        ɵngcc0.ɵɵtext(1);
        ɵngcc0.ɵɵpipe(2, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(3, "mat-dialog-content");
        ɵngcc0.ɵɵelement(4, "br");
        ɵngcc0.ɵɵelementStart(5, "form", 1);
        ɵngcc0.ɵɵlistener("submit", function NodeLockDialogComponent_Template_form_submit_5_listener() { return ctx.submit(); });
        ɵngcc0.ɵɵelementStart(6, "mat-checkbox", 2);
        ɵngcc0.ɵɵtext(7);
        ɵngcc0.ɵɵpipe(8, "translate");
        ɵngcc0.ɵɵelementStart(9, "strong");
        ɵngcc0.ɵɵtext(10);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(11, "br");
        ɵngcc0.ɵɵtemplate(12, NodeLockDialogComponent_div_12_Template, 10, 9, "div", 3);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(13, "br");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(14, "mat-dialog-actions", 4);
        ɵngcc0.ɵɵelement(15, "span", 5);
        ɵngcc0.ɵɵelementStart(16, "button", 6);
        ɵngcc0.ɵɵtext(17);
        ɵngcc0.ɵɵpipe(18, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(19, "button", 7);
        ɵngcc0.ɵɵlistener("click", function NodeLockDialogComponent_Template_button_click_19_listener() { return ctx.submit(); });
        ɵngcc0.ɵɵtext(20);
        ɵngcc0.ɵɵpipe(21, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 9, "CORE.FILE_DIALOG.FILE_LOCK"), "\n");
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵproperty("formGroup", ctx.form);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵpropertyInterpolate("matTooltip", ctx.nodeName);
        ɵngcc0.ɵɵproperty("formControlName", "isLocked");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(8, 11, "CORE.FILE_DIALOG.FILE_LOCK_CHECKBOX"), " ");
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵtextInterpolate1("\"", ctx.nodeName, "\"");
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.form.value.isLocked);
        ɵngcc0.ɵɵadvance(5);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(18, 13, "CORE.FILE_DIALOG.CANCEL_BUTTON.LABEL"), " ");
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(21, 15, "CORE.FILE_DIALOG.SAVE_BUTTON.LABEL"), " ");
    } }, directives: [ɵngcc2.MatDialogTitle, ɵngcc2.MatDialogContent, ɵngcc9.ɵangular_packages_forms_forms_y, ɵngcc9.NgControlStatusGroup, ɵngcc9.FormGroupDirective, ɵngcc10.MatCheckbox, ɵngcc9.DefaultValueAccessor, ɵngcc7.MatTooltip, ɵngcc9.NgControlStatus, ɵngcc9.FormControlName, ɵngcc4.NgIf, ɵngcc2.MatDialogActions, ɵngcc5.MatButton, ɵngcc2.MatDialogClose, ɵngcc11.MatFormField, ɵngcc12.MatDatetimepickerToggle, ɵngcc11.MatSuffix, ɵngcc12.MatDatetimepicker, ɵngcc13.MatInput, ɵngcc12.MatDatetimepickerInput, ɵngcc9.RequiredValidator], pipes: [ɵngcc8.TranslatePipe], encapsulation: 2 });
NodeLockDialogComponent.ctorParameters = () => [
    { type: FormBuilder },
    { type: MatDialogRef },
    { type: AlfrescoApiService },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_DIALOG_DATA,] }] }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NodeLockDialogComponent, [{
        type: Component,
        args: [{
                selector: 'adf-node-lock',
                template: "<h2 mat-dialog-title>\n    {{ 'CORE.FILE_DIALOG.FILE_LOCK' | translate }}\n</h2>\n\n<mat-dialog-content>\n    <br />\n    <form [formGroup]=\"form\" (submit)=\"submit()\">\n        <mat-checkbox  data-automation-id=\"adf-lock-node-checkbox\" class=\"adf-lock-file-name\" matTooltip=\"{{ nodeName }}\" [formControlName]=\"'isLocked'\" ngDefaultControl>\n            {{ 'CORE.FILE_DIALOG.FILE_LOCK_CHECKBOX' | translate }} <strong>\"{{ nodeName }}\"</strong>\n        </mat-checkbox>\n\n        <br />\n\n        <div *ngIf=\"form.value.isLocked\">\n            <mat-checkbox class=\"adf-lock-file-name\" [formControlName]=\"'allowOwner'\" ngDefaultControl>\n                {{ 'CORE.FILE_DIALOG.ALLOW_OTHERS_CHECKBOX' | translate }}\n            </mat-checkbox>\n\n            <br />\n\n            <mat-checkbox class=\"adf-lock-file-name\" [formControlName]=\"'isTimeLock'\" ngDefaultControl>\n                {{ 'CORE.FILE_DIALOG.TIME_LOCK_CHECKBOX' | translate }}\n            </mat-checkbox>\n\n            <br />\n\n            <mat-form-field *ngIf=\"form.value.isTimeLock\">\n                <mat-datetimepicker-toggle [for]=\"datetimePicker\" matSuffix></mat-datetimepicker-toggle>\n                <mat-datetimepicker #datetimePicker type=\"datetime\" [openOnFocus]=\"true\" [timeInterval]=\"1\"></mat-datetimepicker>\n                <input matInput [formControlName]=\"'time'\" [matDatetimepicker]=\"datetimePicker\" required autocomplete=\"false\">\n            </mat-form-field>\n        </div>\n    </form>\n    <br />\n</mat-dialog-content>\n\n<mat-dialog-actions class=\"adf-dialog-buttons\">\n    <span class=\"adf-fill-remaining-space\"></span>\n\n    <button mat-button mat-dialog-close data-automation-id=\"lock-dialog-btn-cancel\">\n        {{ 'CORE.FILE_DIALOG.CANCEL_BUTTON.LABEL' | translate }}\n    </button>\n\n    <button class=\"adf-dialog-action-button\" mat-button (click)=\"submit()\">\n        {{ 'CORE.FILE_DIALOG.SAVE_BUTTON.LABEL' | translate }}\n    </button>\n</mat-dialog-actions>\n",
                encapsulation: ViewEncapsulation.None
            }]
    }], function () { return [{ type: ɵngcc9.FormBuilder }, { type: ɵngcc2.MatDialogRef }, { type: ɵngcc1.AlfrescoApiService }, { type: undefined, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [MAT_DIALOG_DATA]
            }] }]; }, null); })();

class ContentNodeDialogService {
    constructor(dialog, contentService, documentListService, siteService, translation, thumbnailService) {
        this.dialog = dialog;
        this.contentService = contentService;
        this.documentListService = documentListService;
        this.siteService = siteService;
        this.translation = translation;
        this.thumbnailService = thumbnailService;
        this.error = new EventEmitter();
    }
    openFileBrowseDialogByFolderId(folderNodeId) {
        return this.documentListService.getFolderNode(folderNodeId).pipe(switchMap((nodeEntry) => {
            return this.openUploadFileDialog(NodeAction.CHOOSE, nodeEntry.entry, true);
        }));
    }
    openLockNodeDialog(contentEntry) {
        const observable = new Subject();
        if (this.contentService.hasAllowableOperations(contentEntry, AllowableOperationsEnum.LOCK)) {
            this.dialog.open(NodeLockDialogComponent, {
                data: {
                    node: contentEntry,
                    onError: (error) => {
                        this.error.emit(error);
                        observable.error(error);
                    }
                },
                width: '400px'
            });
        }
        else {
            observable.error('OPERATION.FAIL.NODE.NO_PERMISSION');
        }
        return observable;
    }
    openFileBrowseDialogBySite() {
        return this.siteService.getSites().pipe(switchMap((response) => {
            return this.openFileBrowseDialogByFolderId(response.list.entries[0].entry.guid);
        }));
    }
    openFileBrowseDialogByDefaultLocation() {
        return this.openFileBrowseDialogByFolderId('-my-');
    }
    openFolderBrowseDialogBySite() {
        return this.openFolderBrowseDialogByFolderId('-my-');
    }
    openFolderBrowseDialogByFolderId(folderNodeId) {
        return this.documentListService.getFolderNode(folderNodeId).pipe(switchMap((node) => {
            return this.openUploadFolderDialog(NodeAction.CHOOSE, node.entry);
        }));
    }
    openCopyMoveDialog(action, contentEntry, permission, excludeSiteContent) {
        if (this.contentService.hasAllowableOperations(contentEntry, permission)) {
            const select = new Subject();
            const data = {
                title: this.getTitleTranslation(action, contentEntry.name),
                actionName: action,
                selectionMode: 'single',
                currentFolderId: contentEntry.parentId,
                imageResolver: this.imageResolver.bind(this),
                where: '(isFolder=true)',
                isSelectionValid: this.isCopyMoveSelectionValid.bind(this),
                excludeSiteContent: excludeSiteContent || ContentNodeDialogService.nonDocumentSiteContent,
                select: select
            };
            const dialogRef = this.openContentNodeDialog(data, 'adf-content-node-selector-dialog', '630px');
            dialogRef.afterClosed().subscribe({ next: () => select.complete() });
            return select;
        }
        else {
            const errors = new Error(JSON.stringify({ error: { statusCode: 403 } }));
            return throwError(errors);
        }
    }
    getTitleTranslation(action, name) {
        return this.translation.instant(`NODE_SELECTOR.${action.toUpperCase()}_ITEM`, { name });
    }
    openUploadFolderDialog(action, contentEntry) {
        const select = new Subject();
        const data = {
            title: this.getTitleTranslation(action, this.translation.instant('DROPDOWN.MY_FILES_OPTION')),
            actionName: action,
            selectionMode: 'single',
            currentFolderId: contentEntry.id,
            imageResolver: this.imageResolver.bind(this),
            isSelectionValid: this.hasAllowableOperationsOnNodeFolder.bind(this),
            where: '(isFolder=true)',
            select: select
        };
        const dialogRef = this.openContentNodeDialog(data, 'adf-content-node-selector-dialog', '630px');
        dialogRef.afterClosed().subscribe({ next: () => select.complete() });
        return select;
    }
    openUploadFileDialog(action, contentEntry, showFilesInResult = false) {
        const select = new Subject();
        const data = {
            title: this.getTitleTranslation(action, this.translation.instant('DROPDOWN.MY_FILES_OPTION')),
            actionName: action,
            selectionMode: 'single',
            currentFolderId: contentEntry.id,
            imageResolver: this.imageResolver.bind(this),
            isSelectionValid: (entry) => entry.isFile,
            select: select,
            showFilesInResult
        };
        const dialogRef = this.openContentNodeDialog(data, 'adf-content-node-selector-dialog', '630px');
        dialogRef.afterClosed().subscribe({ next: () => select.complete() });
        return select;
    }
    openContentNodeDialog(data, panelClass, width) {
        return this.dialog.open(ContentNodeSelectorComponent, {
            data,
            panelClass,
            width,
            disableClose: true
        });
    }
    imageResolver(row) {
        const entry = row.node.entry;
        if (!this.contentService.hasAllowableOperations(entry, 'create')) {
            if (this.isNodeFolder(entry)) {
                return this.thumbnailService.getMimeTypeIcon('disable/folder');
            }
        }
        return null;
    }
    hasAllowableOperationsOnNodeFolder(entry) {
        return this.isNodeFolder(entry) && this.contentService.hasAllowableOperations(entry, 'create');
    }
    isNodeFolder(entry) {
        return entry.isFolder;
    }
    isCopyMoveSelectionValid(entry) {
        return this.hasEntityCreatePermission(entry) && !this.isSite(entry);
    }
    hasEntityCreatePermission(entry) {
        return this.contentService.hasAllowableOperations(entry, 'create');
    }
    isSite(entry) {
        return !!entry.guid || entry.nodeType === 'st:site' || entry.nodeType === 'st:sites';
    }
}
ContentNodeDialogService.ɵfac = function ContentNodeDialogService_Factory(t) { return new (t || ContentNodeDialogService)(ɵngcc0.ɵɵinject(ɵngcc2.MatDialog), ɵngcc0.ɵɵinject(ɵngcc1.ContentService), ɵngcc0.ɵɵinject(DocumentListService), ɵngcc0.ɵɵinject(ɵngcc1.SitesService), ɵngcc0.ɵɵinject(ɵngcc1.TranslationService), ɵngcc0.ɵɵinject(ɵngcc1.ThumbnailService)); };
ContentNodeDialogService.nonDocumentSiteContent = [
    'blog',
    'calendar',
    'dataLists',
    'discussions',
    'links',
    'wiki'
];
ContentNodeDialogService.ɵprov = ɵɵdefineInjectable({ factory: function ContentNodeDialogService_Factory() { return new ContentNodeDialogService(ɵɵinject(MatDialog), ɵɵinject(ContentService), ɵɵinject(DocumentListService), ɵɵinject(SitesService), ɵɵinject(TranslationService), ɵɵinject(ThumbnailService)); }, token: ContentNodeDialogService, providedIn: "root" });
ContentNodeDialogService.ctorParameters = () => [
    { type: MatDialog },
    { type: ContentService },
    { type: DocumentListService },
    { type: SitesService },
    { type: TranslationService },
    { type: ThumbnailService }
];
ContentNodeDialogService.propDecorators = {
    error: [{ type: Output }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ContentNodeDialogService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc2.MatDialog }, { type: ɵngcc1.ContentService }, { type: DocumentListService }, { type: ɵngcc1.SitesService }, { type: ɵngcc1.TranslationService }, { type: ɵngcc1.ThumbnailService }]; }, { error: [{
            type: Output
        }] }); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class NodeLockDirective {
    constructor(element, renderer, contentService, contentNodeDialogService) {
        this.element = element;
        this.renderer = renderer;
        this.contentService = contentService;
        this.contentNodeDialogService = contentNodeDialogService;
    }
    onClick(event) {
        event.stopPropagation();
        this.contentNodeDialogService.openLockNodeDialog(this.node);
    }
    ngAfterViewInit() {
        const hasAllowableOperations = this.contentService.hasAllowableOperations(this.node, AllowableOperationsEnum.LOCK);
        this.renderer.setProperty(this.element.nativeElement, 'disabled', !hasAllowableOperations);
    }
}
NodeLockDirective.ɵfac = function NodeLockDirective_Factory(t) { return new (t || NodeLockDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ContentService), ɵngcc0.ɵɵdirectiveInject(ContentNodeDialogService)); };
NodeLockDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: NodeLockDirective, selectors: [["", "adf-node-lock", ""]], hostBindings: function NodeLockDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function NodeLockDirective_click_HostBindingHandler($event) { return ctx.onClick($event); });
    } }, inputs: { node: ["adf-node-lock", "node"] } });
NodeLockDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 },
    { type: ContentService },
    { type: ContentNodeDialogService }
];
NodeLockDirective.propDecorators = {
    node: [{ type: Input, args: ['adf-node-lock',] }],
    onClick: [{ type: HostListener, args: ['click', ['$event'],] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NodeLockDirective, [{
        type: Directive,
        args: [{
                selector: '[adf-node-lock]'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }, { type: ɵngcc1.ContentService }, { type: ContentNodeDialogService }]; }, { onClick: [{
            type: HostListener,
            args: ['click', ['$event']]
        }], node: [{
            type: Input,
            args: ['adf-node-lock']
        }] }); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class NodeCounterDirective {
    constructor(resolver, viewContainerRef) {
        this.resolver = resolver;
        this.viewContainerRef = viewContainerRef;
    }
    ngOnInit() {
        const componentFactory = this.resolver.resolveComponentFactory(NodeCounterComponent);
        this.componentRef = this.viewContainerRef.createComponent(componentFactory).instance;
        this.componentRef.counter = this.counter;
    }
    ngOnChanges() {
        if (this.componentRef) {
            this.componentRef.counter = this.counter;
        }
    }
}
NodeCounterDirective.ɵfac = function NodeCounterDirective_Factory(t) { return new (t || NodeCounterDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ComponentFactoryResolver), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
NodeCounterDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: NodeCounterDirective, selectors: [["", "adf-node-counter", ""]], inputs: { counter: ["adf-node-counter", "counter"] }, features: [ɵngcc0.ɵɵNgOnChangesFeature] });
NodeCounterDirective.ctorParameters = () => [
    { type: ComponentFactoryResolver },
    { type: ViewContainerRef }
];
NodeCounterDirective.propDecorators = {
    counter: [{ type: Input, args: ['adf-node-counter',] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NodeCounterDirective, [{
        type: Directive,
        args: [{
                selector: '[adf-node-counter]'
            }]
    }], function () { return [{ type: ɵngcc0.ComponentFactoryResolver }, { type: ɵngcc0.ViewContainerRef }]; }, { counter: [{
            type: Input,
            args: ['adf-node-counter']
        }] }); })();
class NodeCounterComponent {
}
NodeCounterComponent.ɵfac = function NodeCounterComponent_Factory(t) { return new (t || NodeCounterComponent)(); };
NodeCounterComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: NodeCounterComponent, selectors: [["adf-node-counter"]], decls: 3, vars: 6, template: function NodeCounterComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div");
        ɵngcc0.ɵɵtext(1);
        ɵngcc0.ɵɵpipe(2, "translate");
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind2(2, 1, "NODE_COUNTER.SELECTED_COUNT", ɵngcc0.ɵɵpureFunction1(4, _c0, ctx.counter)));
    } }, pipes: [ɵngcc8.TranslatePipe], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NodeCounterComponent, [{
        type: Component,
        args: [{
                selector: 'adf-node-counter',
                template: `
        <div>{{ 'NODE_COUNTER.SELECTED_COUNT' | translate: { count: counter } }}</div>
    `
            }]
    }], null, null); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class ContentDirectiveModule {
}
ContentDirectiveModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: ContentDirectiveModule });
ContentDirectiveModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function ContentDirectiveModule_Factory(t) { return new (t || ContentDirectiveModule)(); }, imports: [[
            CommonModule,
            MaterialModule,
            TranslateModule
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ContentDirectiveModule, { declarations: function () { return [NodeLockDirective, NodeCounterDirective, NodeCounterComponent]; }, imports: function () { return [CommonModule, MaterialModule, TranslateModule]; }, exports: function () { return [NodeLockDirective, NodeCounterDirective]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ContentDirectiveModule, [{
        type: NgModule,
        args: [{
                imports: [
                    CommonModule,
                    MaterialModule,
                    TranslateModule
                ],
                declarations: [
                    NodeLockDirective,
                    NodeCounterDirective,
                    NodeCounterComponent
                ],
                exports: [
                    NodeLockDirective,
                    NodeCounterDirective
                ]
            }]
    }], null, null); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

class RatingService {
    constructor(apiService, logService) {
        this.apiService = apiService;
        this.logService = logService;
    }
    get ratingsApi() {
        var _a;
        this._ratingsApi = (_a = this._ratingsApi) !== null && _a !== void 0 ? _a : new RatingsApi(this.apiService.getInstance());
        return this._ratingsApi;
    }
    getRating(nodeId, ratingType) {
        return from(this.ratingsApi.getRating(nodeId, ratingType))
            .pipe(catchError(this.handleError));
    }
    postRating(nodeId, ratingType, vote) {
        const ratingBody = new RatingBody({
            'id': ratingType,
            'myRating': vote
        });
        return from(this.ratingsApi.createRating(nodeId, ratingBody))
            .pipe(catchError(this.handleError));
    }
    deleteRating(nodeId, ratingType) {
        return from(this.ratingsApi.deleteRating(nodeId, ratingType))
            .pipe(catchError(this.handleError));
    }
    handleError(error) {
        this.logService.error(error);
        return throwError(error || 'Server error');
    }
}
RatingService.ɵfac = function RatingService_Factory(t) { return new (t || RatingService)(ɵngcc0.ɵɵinject(ɵngcc1.AlfrescoApiService), ɵngcc0.ɵɵinject(ɵngcc1.LogService)); };
RatingService.ɵprov = ɵɵdefineInjectable({ factory: function RatingService_Factory() { return new RatingService(ɵɵinject(AlfrescoApiService), ɵɵinject(LogService)); }, token: RatingService, providedIn: "root" });
RatingService.ctorParameters = () => [
    { type: AlfrescoApiService },
    { type: LogService }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(RatingService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc1.AlfrescoApiService }, { type: ɵngcc1.LogService }]; }, null); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class RatingComponent {
    constructor(ratingService) {
        this.ratingService = ratingService;
        this.average = 0;
        this.ratingsCounter = 0;
        this.ratingType = 'fiveStar';
        this.changeVote = new EventEmitter();
        this.stars = [];
        this.onDestroy$ = new Subject();
    }
    ngOnChanges() {
        this.ratingService.getRating(this.nodeId, this.ratingType)
            .pipe(takeUntil(this.onDestroy$))
            .subscribe((ratingEntry) => {
            this.refreshRating(ratingEntry);
        });
    }
    ngOnDestroy() {
        this.onDestroy$.next(true);
        this.onDestroy$.complete();
    }
    calculateStars() {
        this.stars = [];
        const roundedAverage = Math.round(this.average);
        for (let i = 0; i < 5; i++) {
            if (i < roundedAverage) {
                this.stars.push({ fill: true });
            }
            else {
                this.stars.push({ fill: false });
            }
        }
    }
    updateVote(vote) {
        if (this.ratingValue === vote) {
            this.unRateItem();
        }
        else {
            this.rateItem(vote);
        }
    }
    rateItem(vote) {
        this.ratingService.postRating(this.nodeId, this.ratingType, vote)
            .pipe(takeUntil(this.onDestroy$))
            .subscribe((ratingEntry) => {
            this.refreshRating(ratingEntry);
        });
    }
    unRateItem() {
        this.ratingService.deleteRating(this.nodeId, this.ratingType).subscribe(() => {
            this.ratingService.getRating(this.nodeId, this.ratingType)
                .pipe(takeUntil(this.onDestroy$))
                .subscribe((ratingEntry) => {
                this.refreshRating(ratingEntry);
            });
        });
    }
    refreshRating(ratingEntry) {
        this.ratingValue = Number.parseFloat(ratingEntry.entry.myRating);
        this.average = ratingEntry.entry.aggregate.average;
        this.ratingsCounter = ratingEntry.entry.aggregate.numberOfRatings;
        this.calculateStars();
        this.changeVote.emit(this.average);
    }
}
RatingComponent.ɵfac = function RatingComponent_Factory(t) { return new (t || RatingComponent)(ɵngcc0.ɵɵdirectiveInject(RatingService)); };
RatingComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: RatingComponent, selectors: [["adf-rating"]], inputs: { nodeId: "nodeId" }, outputs: { changeVote: "changeVote" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 7, vars: 4, consts: [["id", "adf-rating-container", 1, "adf-rating-container"], ["class", "adf-rating-star", 4, "ngFor", "ngForOf"], [1, "adf-rating-counter-container"], ["id", "adf-rating-counter", 1, "adf-rating-counter"], ["class", "adf-rating-left", 4, "ngIf"], [1, "adf-rating-star"], [3, "id"], ["class", "adf-colored-star", 3, "id", "ngClass", "click", 4, "ngIf"], ["class", "adf-grey-star", 3, "id", "click", 4, "ngIf"], [1, "adf-colored-star", 3, "id", "ngClass", "click"], [1, "adf-grey-star", 3, "id", "click"], [1, "adf-rating-left"]], template: function RatingComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "mat-list", 0);
        ɵngcc0.ɵɵtemplate(1, RatingComponent_mat_list_item_1_Template, 4, 3, "mat-list-item", 1);
        ɵngcc0.ɵɵelementStart(2, "div", 2);
        ɵngcc0.ɵɵelementStart(3, "div", 3);
        ɵngcc0.ɵɵtext(4);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(5, RatingComponent_div_5_Template, 2, 0, "div", 4);
        ɵngcc0.ɵɵtemplate(6, RatingComponent_div_6_Template, 2, 0, "div", 4);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.stars);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵtextInterpolate(ctx.ratingsCounter);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.ratingsCounter <= 1);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.ratingsCounter > 1);
    } }, directives: [ɵngcc14.MatList, ɵngcc4.NgForOf, ɵngcc4.NgIf, ɵngcc14.MatListItem, ɵngcc6.MatIcon, ɵngcc4.NgClass], styles: [".adf-rating-container{display:flex;overflow:hidden;width:100%}.adf-rating-container .adf-rating-counter-container{align-items:center;display:flex;padding:0 6px}.adf-rating-container .adf-rating-left{padding:0 6px}.adf-rating-container .adf-rating-star{cursor:pointer;display:flex;justify-content:center;transition:all .3s;width:25px}.adf-rating-container .adf-rating-star .mat-list-item-content{padding:0!important}.adf-rating-container .adf-rating-star:hover{transform:rotate(13deg) scale(1.2)}.adf-rating-container .adf-colored-star{color:#ffe944}.adf-rating-container .adf-average-star,.adf-rating-container .adf-grey-star{color:grey!important}[dir=rtl] .adf-rating-container .adf-rating-star{transform:rotate(145deg)}[dir=rtl] .adf-rating-container .adf-rating-star:hover{transform:rotate(158deg) scale(1.2)}"], encapsulation: 2 });
RatingComponent.ctorParameters = () => [
    { type: RatingService }
];
RatingComponent.propDecorators = {
    nodeId: [{ type: Input }],
    changeVote: [{ type: Output }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(RatingComponent, [{
        type: Component,
        args: [{
                selector: 'adf-rating',
                template: "<mat-list id=\"adf-rating-container\" class=\"adf-rating-container\">\n    <mat-list-item class=\"adf-rating-star\" *ngFor=\"let currentRate of stars; let idx = index;\">\n            <span id=\"adf-rate-{{idx}}\">\n                <mat-icon id=\"adf-colored-star-{{idx}}\" *ngIf=\"currentRate.fill\" class=\"adf-colored-star\"\n                          [ngClass]=\"{'adf-average-star': !ratingValue}\"\n                          (click)=\"updateVote(idx + 1)\">star_rate\n                </mat-icon>\n                <mat-icon id=\"adf-grey-star-{{idx}}\" *ngIf=\"!currentRate.fill\" class=\"adf-grey-star\"\n                          (click)=\"updateVote(idx + 1)\">star_border\n                </mat-icon>\n            </span>\n    </mat-list-item>\n    <div class=\"adf-rating-counter-container\">\n    <div id=\"adf-rating-counter\" class=\"adf-rating-counter\">{{ratingsCounter}}</div>\n    <div class=\"adf-rating-left\" *ngIf=\"ratingsCounter<=1\">Rating</div>\n    <div class=\"adf-rating-left\" *ngIf=\"ratingsCounter>1\">Ratings</div>\n    </div>\n</mat-list>\n",
                encapsulation: ViewEncapsulation.None,
                styles: [".adf-rating-container{display:flex;overflow:hidden;width:100%}.adf-rating-container .adf-rating-counter-container{align-items:center;display:flex;padding:0 6px}.adf-rating-container .adf-rating-left{padding:0 6px}.adf-rating-container .adf-rating-star{cursor:pointer;display:flex;justify-content:center;transition:all .3s;width:25px}.adf-rating-container .adf-rating-star .mat-list-item-content{padding:0!important}.adf-rating-container .adf-rating-star:hover{transform:rotate(13deg) scale(1.2)}.adf-rating-container .adf-colored-star{color:#ffe944}.adf-rating-container .adf-average-star,.adf-rating-container .adf-grey-star{color:grey!important}[dir=rtl] .adf-rating-container .adf-rating-star{transform:rotate(145deg)}[dir=rtl] .adf-rating-container .adf-rating-star:hover{transform:rotate(158deg) scale(1.2)}"]
            }]
    }], function () { return [{ type: RatingService }]; }, { changeVote: [{
            type: Output
        }], nodeId: [{
            type: Input
        }] }); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class LikeComponent {
    constructor(ratingService) {
        this.ratingService = ratingService;
        this.changeVote = new EventEmitter();
        this.likesCounter = 0;
        this.ratingType = 'likes';
        this.isLike = false;
    }
    ngOnChanges() {
        this.clean();
        this.ratingService.getRating(this.nodeId, this.ratingType).subscribe((ratingEntry) => {
            if (ratingEntry.entry.aggregate) {
                this.likesCounter = ratingEntry.entry.aggregate.numberOfRatings;
                if (ratingEntry.entry.ratedAt) {
                    this.isLike = true;
                }
            }
        });
    }
    likeClick() {
        if (this.isLike) {
            this.ratingService.deleteRating(this.nodeId, this.ratingType).subscribe(() => {
                this.likesCounter -= 1;
                this.isLike = false;
                this.changeVote.emit(this.likesCounter);
            });
        }
        else {
            this.ratingService.postRating(this.nodeId, this.ratingType, true).subscribe((ratingEntry) => {
                this.likesCounter = ratingEntry.entry.aggregate.numberOfRatings;
                this.isLike = true;
                this.changeVote.emit(this.likesCounter);
            });
        }
    }
    clean() {
        this.isLike = false;
        this.likesCounter = 0;
    }
}
LikeComponent.ɵfac = function LikeComponent_Factory(t) { return new (t || LikeComponent)(ɵngcc0.ɵɵdirectiveInject(RatingService)); };
LikeComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: LikeComponent, selectors: [["adf-like"]], inputs: { nodeId: "nodeId" }, outputs: { changeVote: "changeVote" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 10, vars: 8, consts: [["id", "adf-like-container", 1, "adf-like-container"], [1, "adf-like"], [3, "id", "ngClass", "click"], [1, "adf-like-counter-container"], ["id", "adf-like-counter", 1, "adf-like-counter"], ["class", "adf-left", 4, "ngIf"], [1, "adf-left"]], template: function LikeComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "div", 1);
        ɵngcc0.ɵɵelementStart(2, "span", 2);
        ɵngcc0.ɵɵlistener("click", function LikeComponent_Template_span_click_2_listener() { return ctx.likeClick(); });
        ɵngcc0.ɵɵelementStart(3, "mat-icon");
        ɵngcc0.ɵɵtext(4, "thumb_up");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(5, "div", 3);
        ɵngcc0.ɵɵelementStart(6, "div", 4);
        ɵngcc0.ɵɵtext(7);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(8, LikeComponent_div_8_Template, 2, 0, "div", 5);
        ɵngcc0.ɵɵtemplate(9, LikeComponent_div_9_Template, 2, 0, "div", 5);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵpropertyInterpolate1("id", "adf-like-", ctx.nodeId, "");
        ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction2(5, _c2, ctx.isLike, !ctx.isLike));
        ɵngcc0.ɵɵadvance(5);
        ɵngcc0.ɵɵtextInterpolate(ctx.likesCounter);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.likesCounter <= 1);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.likesCounter > 1);
    } }, directives: [ɵngcc4.NgClass, ɵngcc6.MatIcon, ɵngcc4.NgIf], styles: [".adf-like-container{align-items:center;display:flex;margin-top:13px;overflow:hidden;width:100%}.adf-like-container .adf-like-counter-container{display:inherit;padding:0 6px}.adf-like-container .adf-left{padding:0 6px}.adf-like-container .adf-like-select{color:#2196f3;cursor:pointer}.adf-like-container .adf-like-select:hover{color:grey}.adf-like-container .adf-like-grey{color:grey;cursor:pointer}.adf-like-container .adf-like-grey:hover{color:#2196f3}"], encapsulation: 2 });
LikeComponent.ctorParameters = () => [
    { type: RatingService }
];
LikeComponent.propDecorators = {
    nodeId: [{ type: Input }],
    changeVote: [{ type: Output }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(LikeComponent, [{
        type: Component,
        args: [{
                selector: 'adf-like',
                template: "<div id=\"adf-like-container\" class=\"adf-like-container\">\n    <div class=\"adf-like\">\n        <span id=\"adf-like-{{nodeId}}\" [ngClass]=\"{'adf-like-select': isLike ,'adf-like-grey': !isLike  }\"\n              (click)=\"likeClick()\">\n            <mat-icon>thumb_up</mat-icon>\n        </span>\n    </div>\n    <div class=\"adf-like-counter-container\">\n        <div id=\"adf-like-counter\" class=\"adf-like-counter\">{{likesCounter}}</div>\n        <div class=\"adf-left\" *ngIf=\"likesCounter<=1\">Like</div>\n        <div class=\"adf-left\" *ngIf=\"likesCounter>1\">Likes</div>\n    </div>\n</div>\n",
                encapsulation: ViewEncapsulation.None,
                styles: [".adf-like-container{align-items:center;display:flex;margin-top:13px;overflow:hidden;width:100%}.adf-like-container .adf-like-counter-container{display:inherit;padding:0 6px}.adf-like-container .adf-left{padding:0 6px}.adf-like-container .adf-like-select{color:#2196f3;cursor:pointer}.adf-like-container .adf-like-select:hover{color:grey}.adf-like-container .adf-like-grey{color:grey;cursor:pointer}.adf-like-container .adf-like-grey:hover{color:#2196f3}"]
            }]
    }], function () { return [{ type: RatingService }]; }, { changeVote: [{
            type: Output
        }], nodeId: [{
            type: Input
        }] }); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class SocialModule {
}
SocialModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: SocialModule });
SocialModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function SocialModule_Factory(t) { return new (t || SocialModule)(); }, imports: [[
            CommonModule,
            MaterialModule
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(SocialModule, { declarations: function () { return [RatingComponent, LikeComponent]; }, imports: function () { return [CommonModule, MaterialModule]; }, exports: function () { return [RatingComponent, LikeComponent]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SocialModule, [{
        type: NgModule,
        args: [{
                imports: [
                    CommonModule,
                    MaterialModule
                ],
                exports: [
                    RatingComponent,
                    LikeComponent
                ],
                declarations: [
                    RatingComponent,
                    LikeComponent
                ]
            }]
    }], null, null); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

class TagService {
    constructor(apiService, logService) {
        this.apiService = apiService;
        this.logService = logService;
        this.refresh = new EventEmitter();
    }
    get tagsApi() {
        var _a;
        this._tagsApi = (_a = this._tagsApi) !== null && _a !== void 0 ? _a : new TagsApi(this.apiService.getInstance());
        return this._tagsApi;
    }
    getTagsByNodeId(nodeId) {
        return from(this.tagsApi.listTagsForNode(nodeId)).pipe(catchError((err) => this.handleError(err)));
    }
    getAllTheTags(opts) {
        return from(this.tagsApi.listTags(opts))
            .pipe(catchError((err) => this.handleError(err)));
    }
    addTag(nodeId, tagName) {
        const tagBody = new TagBody();
        tagBody.tag = tagName;
        const observableAdd = from(this.tagsApi.createTagForNode(nodeId, [tagBody]));
        observableAdd.subscribe((tagEntry) => {
            this.refresh.emit(tagEntry);
        }, (err) => {
            this.handleError(err);
        });
        return observableAdd;
    }
    removeTag(nodeId, tag) {
        const observableRemove = from(this.tagsApi.deleteTagFromNode(nodeId, tag));
        observableRemove.subscribe((data) => {
            this.refresh.emit(data);
        }, (err) => {
            this.handleError(err);
        });
        return observableRemove;
    }
    handleError(error) {
        this.logService.error(error);
        return throwError(error || 'Server error');
    }
}
TagService.ɵfac = function TagService_Factory(t) { return new (t || TagService)(ɵngcc0.ɵɵinject(ɵngcc1.AlfrescoApiService), ɵngcc0.ɵɵinject(ɵngcc1.LogService)); };
TagService.ɵprov = ɵɵdefineInjectable({ factory: function TagService_Factory() { return new TagService(ɵɵinject(AlfrescoApiService), ɵɵinject(LogService)); }, token: TagService, providedIn: "root" });
TagService.ctorParameters = () => [
    { type: AlfrescoApiService },
    { type: LogService }
];
TagService.propDecorators = {
    refresh: [{ type: Output }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TagService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc1.AlfrescoApiService }, { type: ɵngcc1.LogService }]; }, { refresh: [{
            type: Output
        }] }); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class TagActionsComponent {
    constructor(tagService, translateService) {
        this.tagService = tagService;
        this.translateService = translateService;
        this.successAdd = new EventEmitter();
        this.error = new EventEmitter();
        this.result = new EventEmitter();
        this.disableAddTag = true;
        this.onDestroy$ = new Subject();
    }
    ngOnInit() {
        this.tagService.refresh
            .pipe(takeUntil(this.onDestroy$))
            .subscribe(() => this.refreshTag());
    }
    ngOnChanges() {
        return this.refreshTag();
    }
    ngOnDestroy() {
        this.onDestroy$.next(true);
        this.onDestroy$.complete();
    }
    refreshTag() {
        if (this.nodeId) {
            this.tagService.getTagsByNodeId(this.nodeId).subscribe((tagPaging) => {
                this.tagsEntries = tagPaging.list.entries;
                this.disableAddTag = false;
                this.result.emit(this.tagsEntries);
            }, () => {
                this.tagsEntries = null;
                this.disableAddTag = true;
                this.result.emit(this.tagsEntries);
            });
        }
    }
    addTag() {
        if (this.searchTag(this.newTagName)) {
            this.errorMsg = this.translateService.instant('TAG.MESSAGES.EXIST');
            this.error.emit(this.errorMsg);
        }
        else {
            this.tagService.addTag(this.nodeId, this.newTagName).subscribe(() => {
                this.newTagName = '';
                this.successAdd.emit(this.nodeId);
            });
        }
    }
    searchTag(searchTagName) {
        if (this.tagsEntries) {
            return this.tagsEntries.find((currentTag) => {
                return (searchTagName === currentTag.entry.tag);
            });
        }
    }
    cleanErrorMsg() {
        this.errorMsg = '';
    }
    removeTag(tag) {
        this.tagService.removeTag(this.nodeId, tag);
    }
}
TagActionsComponent.ɵfac = function TagActionsComponent_Factory(t) { return new (t || TagActionsComponent)(ɵngcc0.ɵɵdirectiveInject(TagService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.TranslationService)); };
TagActionsComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: TagActionsComponent, selectors: [["adf-tag-node-actions-list"]], hostAttrs: [1, "adf-tag-node-actions-list"], inputs: { nodeId: "nodeId" }, outputs: { successAdd: "successAdd", error: "error", result: "result" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 13, vars: 10, consts: [[4, "ngFor", "ngForOf"], ["cellspacing", "0", 1, "adf-full-width"], [1, "adf-full-width"], ["id", "new-tag-text", "matInput", "", "type", "text", 3, "placeholder", "ngModel", "keypress", "ngModelChange"], ["data-automation-id", "errorMessage", "align", "start", 3, "ngStyle", 4, "ngIf"], ["id", "add-tag", "color", "primary", "mat-raised-button", "", 1, "adf-full-width", 3, "disabled", "click"], [1, "adf-tag-actions-container", 3, "id", "click"], [1, "adf-tag-actions-delete-text", 3, "id"], [1, "adf-tag-actions-delete-icon"], ["data-automation-id", "errorMessage", "align", "start", 3, "ngStyle"]], template: function TagActionsComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "mat-list");
        ɵngcc0.ɵɵtemplate(1, TagActionsComponent_mat_list_item_1_Template, 6, 3, "mat-list-item", 0);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(2, "table", 1);
        ɵngcc0.ɵɵelementStart(3, "tr");
        ɵngcc0.ɵɵelementStart(4, "td");
        ɵngcc0.ɵɵelementStart(5, "mat-form-field", 2);
        ɵngcc0.ɵɵelementStart(6, "input", 3);
        ɵngcc0.ɵɵlistener("keypress", function TagActionsComponent_Template_input_keypress_6_listener() { return ctx.cleanErrorMsg(); })("ngModelChange", function TagActionsComponent_Template_input_ngModelChange_6_listener($event) { return ctx.newTagName = $event; });
        ɵngcc0.ɵɵpipe(7, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(8, TagActionsComponent_mat_hint_8_Template, 2, 3, "mat-hint", 4);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(9, "td");
        ɵngcc0.ɵɵelementStart(10, "button", 5);
        ɵngcc0.ɵɵlistener("click", function TagActionsComponent_Template_button_click_10_listener() { return ctx.addTag(); });
        ɵngcc0.ɵɵtext(11);
        ɵngcc0.ɵɵpipe(12, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.tagsEntries);
        ɵngcc0.ɵɵadvance(5);
        ɵngcc0.ɵɵpropertyInterpolate("placeholder", ɵngcc0.ɵɵpipeBind1(7, 6, "TAG.LABEL.NEWTAG"));
        ɵngcc0.ɵɵproperty("ngModel", ctx.newTagName);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.error);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("disabled", ctx.disableAddTag);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(12, 8, "TAG.BUTTON.ADD"));
    } }, directives: [ɵngcc14.MatList, ɵngcc4.NgForOf, ɵngcc11.MatFormField, ɵngcc13.MatInput, ɵngcc9.DefaultValueAccessor, ɵngcc9.NgControlStatus, ɵngcc9.NgModel, ɵngcc4.NgIf, ɵngcc5.MatButton, ɵngcc14.MatListItem, ɵngcc6.MatIcon, ɵngcc11.MatHint, ɵngcc4.NgStyle], pipes: [ɵngcc8.TranslatePipe], styles: [".adf-tag-node-actions-list .adf-full-width{width:100%}.adf-tag-node-actions-list .adf-tag-actions-delete-icon{cursor:pointer;float:right}.adf-tag-node-actions-list .adf-tag-actions-delete-text{float:left;font-size:16px}.adf-tag-node-actions-list .adf-tag-actions-container{height:20px;padding:8px 0}"], encapsulation: 2 });
TagActionsComponent.ctorParameters = () => [
    { type: TagService },
    { type: TranslationService }
];
TagActionsComponent.propDecorators = {
    nodeId: [{ type: Input }],
    successAdd: [{ type: Output }],
    error: [{ type: Output }],
    result: [{ type: Output }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TagActionsComponent, [{
        type: Component,
        args: [{
                selector: 'adf-tag-node-actions-list',
                template: "<mat-list>\n    <mat-list-item *ngFor=\"let currentEntry of tagsEntries; let idx = index\">\n        <div class=\"adf-tag-actions-container\" id=\"tag_delete_{{currentEntry.entry.tag}}\" (click)=\"removeTag(currentEntry.entry.id)\">\n            <div class=\"adf-tag-actions-delete-text\" id=\"tag_name_{{currentEntry.entry.tag}}\">{{currentEntry.entry.tag}}</div>\n            <mat-icon class=\"adf-tag-actions-delete-icon\">delete</mat-icon>\n        </div>\n    </mat-list-item>\n</mat-list>\n<table class=\"adf-full-width\" cellspacing=\"0\">\n    <tr>\n        <td>\n            <mat-form-field class=\"adf-full-width\">\n                <input\n                    id=\"new-tag-text\"\n                    matInput placeholder=\"{{'TAG.LABEL.NEWTAG' | translate }}\"\n                    type=\"text\"\n                    (keypress)=\"cleanErrorMsg()\"\n                    [(ngModel)]=\"newTagName\"\n                />\n                <mat-hint data-automation-id=\"errorMessage\" *ngIf=\"error\" [ngStyle]=\"{'color': 'red'}\" align=\"start\">{{errorMsg}}</mat-hint>\n            </mat-form-field>\n        </td>\n        <td>\n            <button\n                id=\"add-tag\"\n                class=\"adf-full-width\"\n                color=\"primary\"\n                (click)=\"addTag()\"\n                [disabled]=\"disableAddTag\"\n                mat-raised-button\n            >{{'TAG.BUTTON.ADD' | translate }}</button>\n        </td>\n    </tr>\n</table>\n",
                encapsulation: ViewEncapsulation.None,
                host: { class: 'adf-tag-node-actions-list' },
                styles: [".adf-tag-node-actions-list .adf-full-width{width:100%}.adf-tag-node-actions-list .adf-tag-actions-delete-icon{cursor:pointer;float:right}.adf-tag-node-actions-list .adf-tag-actions-delete-text{float:left;font-size:16px}.adf-tag-node-actions-list .adf-tag-actions-container{height:20px;padding:8px 0}"]
            }]
    }], function () { return [{ type: TagService }, { type: ɵngcc1.TranslationService }]; }, { successAdd: [{
            type: Output
        }], error: [{
            type: Output
        }], result: [{
            type: Output
        }], nodeId: [{
            type: Input
        }] }); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class TagListComponent {
    constructor(tagService) {
        this.tagService = tagService;
        this.result = new EventEmitter();
        this.tagsEntries = [];
        this.size = 10;
        this.isLoading = false;
        this.isSizeMinimum = true;
        this.onDestroy$ = new Subject();
        this.defaultPagination = {
            skipCount: 0,
            maxItems: this.size,
            hasMoreItems: false
        };
        this.pagination = this.defaultPagination;
        this.tagService.refresh
            .pipe(takeUntil(this.onDestroy$))
            .subscribe(() => {
            this.tagsEntries = [];
            this.refreshTag(this.defaultPagination);
        });
    }
    ngOnInit() {
        this.refreshTag(this.defaultPagination);
    }
    ngOnDestroy() {
        this.onDestroy$.next(true);
        this.onDestroy$.complete();
    }
    refreshTag(opts) {
        this.tagService.getAllTheTags(opts).subscribe((tags) => {
            this.tagsEntries = this.tagsEntries.concat(tags.list.entries);
            this.pagination = tags.list.pagination;
            this.result.emit(this.tagsEntries);
            this.isLoading = false;
        });
    }
    loadMoreTags() {
        if (this.pagination.hasMoreItems) {
            this.isLoading = true;
            this.isSizeMinimum = false;
            this.refreshTag({
                skipCount: this.pagination.skipCount + this.pagination.count,
                maxItems: this.size
            });
        }
    }
    loadLessTags() {
        this.isSizeMinimum = false;
        this.tagsEntries = this.tagsEntries.slice(0, this.tagsEntries.length - this.pagination.count);
        this.pagination.skipCount = this.pagination.skipCount - this.pagination.count;
        this.pagination.hasMoreItems = true;
        if (this.tagsEntries.length <= this.size) {
            this.isSizeMinimum = true;
        }
    }
}
TagListComponent.ɵfac = function TagListComponent_Factory(t) { return new (t || TagListComponent)(ɵngcc0.ɵɵdirectiveInject(TagService)); };
TagListComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: TagListComponent, selectors: [["adf-tag-list"]], hostAttrs: [1, "adf-tag-list"], outputs: { result: "result" }, decls: 5, vars: 3, consts: [[1, "adf-tag-chips-list"], ["class", "adf-list-tag", 4, "ngFor", "ngForOf"], [1, "adf-tag-list-controls"], ["data-automation-id", "show-fewer-tags", "mat-icon-button", "", 3, "disabled", "click", 4, "ngIf"], ["data-automation-id", "show-more-tags", "mat-icon-button", "", 3, "disabled", "click", 4, "ngIf"], [1, "adf-list-tag"], [3, "id"], ["data-automation-id", "show-fewer-tags", "mat-icon-button", "", 3, "disabled", "click"], ["data-automation-id", "show-more-tags", "mat-icon-button", "", 3, "disabled", "click"]], template: function TagListComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "mat-chip-list", 0);
        ɵngcc0.ɵɵtemplate(1, TagListComponent_div_1_Template, 4, 2, "div", 1);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(2, "div", 2);
        ɵngcc0.ɵɵtemplate(3, TagListComponent_button_3_Template, 3, 1, "button", 3);
        ɵngcc0.ɵɵtemplate(4, TagListComponent_button_4_Template, 3, 1, "button", 4);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.tagsEntries);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.isSizeMinimum);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.pagination.hasMoreItems);
    } }, directives: [ɵngcc15.MatChipList, ɵngcc4.NgForOf, ɵngcc4.NgIf, ɵngcc15.MatChip, ɵngcc5.MatButton, ɵngcc6.MatIcon], styles: [".adf-tag-list .adf-tag-chips-list,.adf-tag-list .adf-tag-chips-list div{display:flex;flex-direction:column}.adf-tag-list .adf-tag-chips-list .adf-list-tag{display:block;font-size:16px}.adf-tag-list .adf-tag-chips-list .adf-list-tag .mat-chip{background-color:var(--theme-primary-color);color:var(--theme-primary-color-default-contrast)}.adf-tag-list .adf-tag-chips-list .adf-list-tag .mat-chip .mat-icon{color:var(--theme-primary-color-default-contrast)}.adf-tag-list .adf-tag-list-controls{display:flex;justify-content:center;margin-top:30px}"], encapsulation: 2 });
TagListComponent.ctorParameters = () => [
    { type: TagService }
];
TagListComponent.propDecorators = {
    result: [{ type: Output }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TagListComponent, [{
        type: Component,
        args: [{
                selector: 'adf-tag-list',
                template: "<mat-chip-list class=\"adf-tag-chips-list\">\n    <div class=\"adf-list-tag\" *ngFor=\"let currentEntry of tagsEntries; let idx = index\">\n        <mat-chip>\n            <span id=\"tag_name_{{idx}}\">{{currentEntry.entry.tag}}</span>\n        </mat-chip>\n    </div>\n</mat-chip-list>\n\n<div class=\"adf-tag-list-controls\">\n    <button\n        *ngIf=\"!isSizeMinimum\"\n        [disabled]=\"isLoading\"\n        data-automation-id=\"show-fewer-tags\"\n        mat-icon-button\n        (click)=\"loadLessTags()\">\n        <mat-icon>keyboard_arrow_up</mat-icon>\n    </button>\n    <button\n        *ngIf=\"pagination.hasMoreItems\"\n        [disabled]=\"isLoading\"\n        data-automation-id=\"show-more-tags\"\n        mat-icon-button\n        (click)=\"loadMoreTags()\">\n        <mat-icon>keyboard_arrow_down</mat-icon>\n    </button>\n</div>\n",
                encapsulation: ViewEncapsulation.None,
                host: { class: 'adf-tag-list' },
                styles: [".adf-tag-list .adf-tag-chips-list,.adf-tag-list .adf-tag-chips-list div{display:flex;flex-direction:column}.adf-tag-list .adf-tag-chips-list .adf-list-tag{display:block;font-size:16px}.adf-tag-list .adf-tag-chips-list .adf-list-tag .mat-chip{background-color:var(--theme-primary-color);color:var(--theme-primary-color-default-contrast)}.adf-tag-list .adf-tag-chips-list .adf-list-tag .mat-chip .mat-icon{color:var(--theme-primary-color-default-contrast)}.adf-tag-list .adf-tag-list-controls{display:flex;justify-content:center;margin-top:30px}"]
            }]
    }], function () { return [{ type: TagService }]; }, { result: [{
            type: Output
        }] }); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class TagNodeListComponent {
    constructor(tagService) {
        this.tagService = tagService;
        this.showDelete = true;
        this.results = new EventEmitter();
        this.onDestroy$ = new Subject();
    }
    ngOnChanges() {
        this.refreshTag();
    }
    ngOnInit() {
        this.tagService.refresh
            .pipe(takeUntil(this.onDestroy$))
            .subscribe(() => this.refreshTag());
    }
    ngOnDestroy() {
        this.onDestroy$.next(true);
        this.onDestroy$.complete();
    }
    refreshTag() {
        if (this.nodeId) {
            this.tagService.getTagsByNodeId(this.nodeId).subscribe((tagPaging) => {
                this.tagsEntries = tagPaging.list.entries;
                this.results.emit(this.tagsEntries);
            });
        }
    }
    removeTag(tag) {
        this.tagService.removeTag(this.nodeId, tag).subscribe(() => {
            this.refreshTag();
        });
    }
}
TagNodeListComponent.ɵfac = function TagNodeListComponent_Factory(t) { return new (t || TagNodeListComponent)(ɵngcc0.ɵɵdirectiveInject(TagService)); };
TagNodeListComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: TagNodeListComponent, selectors: [["adf-tag-node-list"]], hostAttrs: [1, "adf-tag-node-list"], inputs: { showDelete: "showDelete", nodeId: "nodeId" }, outputs: { results: "results" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 2, vars: 1, consts: [["class", "adf-tag-chips", 3, "removed", 4, "ngFor", "ngForOf"], [1, "adf-tag-chips", 3, "removed"], [3, "id"], ["class", "adf-tag-chips-delete-icon", "matChipRemove", "", 3, "id", 4, "ngIf"], ["matChipRemove", "", 1, "adf-tag-chips-delete-icon", 3, "id"]], template: function TagNodeListComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "mat-chip-list");
        ɵngcc0.ɵɵtemplate(1, TagNodeListComponent_mat_chip_1_Template, 4, 3, "mat-chip", 0);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.tagsEntries);
    } }, directives: [ɵngcc15.MatChipList, ɵngcc4.NgForOf, ɵngcc15.MatChip, ɵngcc4.NgIf, ɵngcc6.MatIcon, ɵngcc15.MatChipRemove], styles: [".adf-tag-node-list .adf-tag-chips{background-color:var(--theme-primary-color);color:var(--theme-primary-color-default-contrast)}.adf-tag-node-list .adf-tag-chips-delete{background:none;border:0;cursor:pointer;float:right;height:17px;margin:-1px 0 0 10px;overflow:visible;padding:0;width:20px}.adf-tag-node-list .adf-tag-chips-delete-icon{background-repeat:no-repeat;color:var(--theme-primary-color-default-contrast)!important;display:inline-block;fill:currentColor;font-size:20px;height:20px;width:20px}"], encapsulation: 2 });
TagNodeListComponent.ctorParameters = () => [
    { type: TagService }
];
TagNodeListComponent.propDecorators = {
    nodeId: [{ type: Input }],
    showDelete: [{ type: Input }],
    results: [{ type: Output }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TagNodeListComponent, [{
        type: Component,
        args: [{
                selector: 'adf-tag-node-list',
                template: "<mat-chip-list>\n    <mat-chip class=\"adf-tag-chips\"\n              *ngFor=\"let currentEntry of tagsEntries; let idx = index\" (removed)=\"removeTag(currentEntry.entry.id)\">\n        <span id=\"tag_name_{{idx}}\">{{currentEntry.entry.tag}}</span>\n        <mat-icon *ngIf=\"showDelete\" id=\"tag_chips_delete_{{currentEntry.entry.tag}}\"\n                  class=\"adf-tag-chips-delete-icon\" matChipRemove>cancel\n        </mat-icon>\n    </mat-chip>\n</mat-chip-list>\n",
                encapsulation: ViewEncapsulation.None,
                host: { class: 'adf-tag-node-list' },
                styles: [".adf-tag-node-list .adf-tag-chips{background-color:var(--theme-primary-color);color:var(--theme-primary-color-default-contrast)}.adf-tag-node-list .adf-tag-chips-delete{background:none;border:0;cursor:pointer;float:right;height:17px;margin:-1px 0 0 10px;overflow:visible;padding:0;width:20px}.adf-tag-node-list .adf-tag-chips-delete-icon{background-repeat:no-repeat;color:var(--theme-primary-color-default-contrast)!important;display:inline-block;fill:currentColor;font-size:20px;height:20px;width:20px}"]
            }]
    }], function () { return [{ type: TagService }]; }, { showDelete: [{
            type: Input
        }], results: [{
            type: Output
        }], nodeId: [{
            type: Input
        }] }); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class TagModule {
}
TagModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: TagModule });
TagModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function TagModule_Factory(t) { return new (t || TagModule)(); }, imports: [[
            CommonModule,
            MaterialModule,
            FormsModule,
            ReactiveFormsModule,
            CoreModule
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(TagModule, { declarations: function () { return [TagActionsComponent, TagListComponent, TagNodeListComponent]; }, imports: function () { return [CommonModule, MaterialModule, FormsModule,
        ReactiveFormsModule,
        CoreModule]; }, exports: function () { return [TagActionsComponent, TagListComponent, TagNodeListComponent]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TagModule, [{
        type: NgModule,
        args: [{
                imports: [
                    CommonModule,
                    MaterialModule,
                    FormsModule,
                    ReactiveFormsModule,
                    CoreModule
                ],
                exports: [
                    TagActionsComponent,
                    TagListComponent,
                    TagNodeListComponent
                ],
                declarations: [
                    TagActionsComponent,
                    TagListComponent,
                    TagNodeListComponent
                ]
            }]
    }], null, null); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class WebscriptComponent {
    constructor(apiService, logService) {
        this.apiService = apiService;
        this.logService = logService;
        this.showData = true;
        this.contextRoot = 'alfresco';
        this.servicePath = 'service';
        this.contentType = 'TEXT';
        this.success = new EventEmitter();
        this.data = undefined;
        this.showError = false;
    }
    get webscriptApi() {
        var _a;
        this._webscriptApi = (_a = this._webscriptApi) !== null && _a !== void 0 ? _a : new WebscriptApi(this.apiService.getInstance());
        return this._webscriptApi;
    }
    ngOnChanges() {
        if (this.showData) {
            this.clean();
        }
        return new Promise((resolve, reject) => {
            this.webscriptApi.executeWebScript('GET', this.scriptPath, this.scriptArgs, this.contextRoot, this.servicePath).then((webScriptData) => {
                this.data = webScriptData;
                if (this.showData) {
                    if (this.contentType === 'DATATABLE') {
                        this.data = this.showDataAsDataTable(webScriptData);
                    }
                }
                this.success.emit(this.data);
                resolve();
            }, (error) => {
                this.logService.log('Error' + error);
                reject();
            });
        });
    }
    showDataAsDataTable(data) {
        const datatableData = null;
        try {
            if (!data.schema) {
                data.schema = ObjectDataTableAdapter.generateSchema(data.data);
            }
            if (data.schema && data.schema.length > 0) {
                this.data = new ObjectDataTableAdapter(data.data, data.schema);
            }
        }
        catch (error) {
            this.logService.error('error during the cast as datatable');
        }
        return datatableData;
    }
    clean() {
        this.data = undefined;
    }
    isDataTableContent() {
        return this.contentType === 'DATATABLE';
    }
}
WebscriptComponent.ɵfac = function WebscriptComponent_Factory(t) { return new (t || WebscriptComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.AlfrescoApiService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.LogService)); };
WebscriptComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: WebscriptComponent, selectors: [["adf-webscript-get"]], inputs: { showData: "showData", contextRoot: "contextRoot", servicePath: "servicePath", contentType: "contentType", scriptPath: "scriptPath", scriptArgs: "scriptArgs" }, outputs: { success: "success" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 1, vars: 1, consts: [[4, "ngIf"], ["id", "webscript-data-JSON", 4, "ngIf"], ["id", "webscript-data-HTML", 3, "innerHTML", 4, "ngIf"], ["id", "webscript-data-TEXT", 4, "ngIf"], ["id", "webscript-data-JSON"], ["id", "webscript-data-HTML", 3, "innerHTML"], ["id", "webscript-data-TEXT"], ["id", "webscript-datatable-wrapper", 3, "data"], ["id", "error", 4, "ngIf"], ["id", "error"]], template: function WebscriptComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, WebscriptComponent_div_0_Template, 5, 4, "div", 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngIf", ctx.showData);
    } }, directives: [ɵngcc4.NgIf, ɵngcc1.DataTableComponent], pipes: [ɵngcc4.JsonPipe, ɵngcc8.TranslatePipe], encapsulation: 2 });
WebscriptComponent.ctorParameters = () => [
    { type: AlfrescoApiService },
    { type: LogService }
];
WebscriptComponent.propDecorators = {
    scriptPath: [{ type: Input }],
    scriptArgs: [{ type: Input }],
    showData: [{ type: Input }],
    contextRoot: [{ type: Input }],
    servicePath: [{ type: Input }],
    contentType: [{ type: Input }],
    success: [{ type: Output }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(WebscriptComponent, [{
        type: Component,
        args: [{
                selector: 'adf-webscript-get',
                template: "<div *ngIf=\"showData\">\n    <div *ngIf=\"contentType === 'JSON'\" id=\"webscript-data-JSON\">{{data | json}}</div>\n    <div *ngIf=\"contentType === 'HTML'\" id=\"webscript-data-HTML\" [innerHTML]=\"data\"></div>\n    <div *ngIf=\"contentType === 'TEXT'\" id=\"webscript-data-TEXT\">{{data}}</div>\n    <div *ngIf=\"isDataTableContent()\">\n        <adf-datatable id=\"webscript-datatable-wrapper\" [data]=\"data\"></adf-datatable>\n        <div>\n            <div *ngIf=\"showError\" id=\"error\">{{'WEBSCRIPT.ERROR' | translate: {\n                data: data,\n                contentType: contentType\n                }\n                }}\n            </div>\n        </div>\n    </div>\n</div>\n"
            }]
    }], function () { return [{ type: ɵngcc1.AlfrescoApiService }, { type: ɵngcc1.LogService }]; }, { showData: [{
            type: Input
        }], contextRoot: [{
            type: Input
        }], servicePath: [{
            type: Input
        }], contentType: [{
            type: Input
        }], success: [{
            type: Output
        }], scriptPath: [{
            type: Input
        }], scriptArgs: [{
            type: Input
        }] }); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class WebScriptModule {
}
WebScriptModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: WebScriptModule });
WebScriptModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function WebScriptModule_Factory(t) { return new (t || WebScriptModule)(); }, imports: [[
            CommonModule,
            MaterialModule,
            CoreModule
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(WebScriptModule, { declarations: function () { return [WebscriptComponent]; }, imports: function () { return [CommonModule, MaterialModule, CoreModule]; }, exports: function () { return [WebscriptComponent]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(WebScriptModule, [{
        type: NgModule,
        args: [{
                imports: [
                    CommonModule,
                    MaterialModule,
                    CoreModule
                ],
                exports: [
                    WebscriptComponent
                ],
                declarations: [
                    WebscriptComponent
                ]
            }]
    }], null, null); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class ShareDataRow {
    constructor(obj, contentService, permissionsStyle, thumbnailService, allowDropFiles) {
        this.obj = obj;
        this.contentService = contentService;
        this.permissionsStyle = permissionsStyle;
        this.thumbnailService = thumbnailService;
        this.allowDropFiles = allowDropFiles;
        this.cache = {};
        this.isSelected = false;
        this.cssClass = '';
        if (!obj) {
            throw new Error(ShareDataRow.ERR_OBJECT_NOT_FOUND);
        }
        this.isDropTarget = allowDropFiles !== undefined ? this.allowDropFiles && this.checkNodeTypeAndPermissions(obj) : this.checkNodeTypeAndPermissions(obj);
        if (permissionsStyle) {
            this.cssClass = this.getPermissionClass(obj);
        }
        this.id = this.getId();
    }
    get node() {
        return this.obj;
    }
    set node(value) {
        this.obj = value;
        this.cache = {};
    }
    checkNodeTypeAndPermissions(nodeEntry) {
        return this.isFolderAndHasPermissionToUpload(nodeEntry) || this.isFileAndHasParentFolderPermissionToUpload(nodeEntry);
    }
    getPermissionClass(nodeEntity) {
        let permissionsClasses = '';
        this.permissionsStyle.forEach((currentPermissionsStyle) => {
            if (this.applyPermissionStyleToFolder(nodeEntity.entry, currentPermissionsStyle) || this.applyPermissionStyleToFile(nodeEntity.entry, currentPermissionsStyle)) {
                if (this.contentService.hasAllowableOperations(nodeEntity.entry, currentPermissionsStyle.permission)) {
                    permissionsClasses += ` ${currentPermissionsStyle.css}`;
                }
            }
        });
        return permissionsClasses;
    }
    applyPermissionStyleToFile(node, currentPermissionsStyle) {
        return (currentPermissionsStyle.isFile && node.isFile);
    }
    applyPermissionStyleToFolder(node, currentPermissionsStyle) {
        return (currentPermissionsStyle.isFolder && node.isFolder);
    }
    isFolderAndHasPermissionToUpload(nodeEntry) {
        return this.isFolder(nodeEntry) && this.contentService.hasAllowableOperations(nodeEntry.entry, 'create');
    }
    isFileAndHasParentFolderPermissionToUpload(nodeEntry) {
        return this.isFile(nodeEntry) && this.contentService.hasAllowableOperations(nodeEntry.entry, 'update');
    }
    isFile(nodeEntry) {
        return nodeEntry.entry && nodeEntry.entry.isFile;
    }
    isFolder(nodeEntry) {
        return nodeEntry.entry && nodeEntry.entry.isFolder;
    }
    cacheValue(key, value) {
        this.cache[key] = value;
        return value;
    }
    getValue(key) {
        if (this.cache[key] !== undefined) {
            return this.cache[key];
        }
        return ObjectUtils.getValue(this.obj.entry, key);
    }
    imageErrorResolver() {
        if (this.obj.entry.content) {
            return this.thumbnailService.getMimeTypeIcon(this.obj.entry.content.mimeType);
        }
    }
    hasValue(key) {
        return this.getValue(key) !== undefined;
    }
    getId() {
        return this.obj.entry.id || undefined;
    }
}
ShareDataRow.ERR_OBJECT_NOT_FOUND = 'Object source not found';

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class ShareDataTableAdapter {
    constructor(thumbnailService, contentService, schema = [], sorting, sortingMode = 'client', allowDropFiles = false) {
        this.thumbnailService = thumbnailService;
        this.contentService = contentService;
        this.ERR_ROW_NOT_FOUND = 'Row not found';
        this.ERR_COL_NOT_FOUND = 'Column not found';
        this.thumbnails = false;
        this.rows = [];
        this.columns = schema || [];
        this.sorting = sorting;
        this.sortingMode = sortingMode;
        this.allowDropFiles = allowDropFiles;
    }
    set sortingMode(value) {
        let newValue = (value || 'client').toLowerCase();
        if (newValue !== 'client' && newValue !== 'server') {
            newValue = 'client';
        }
        this._sortingMode = newValue;
    }
    get sortingMode() {
        return this._sortingMode;
    }
    getRows() {
        return this.rows;
    }
    setRows(rows) {
        this.rows = rows || [];
        this.sort();
    }
    getColumns() {
        return this.columns;
    }
    setColumns(columns) {
        this.columns = columns || [];
    }
    getValue(row, col) {
        if (!row) {
            throw new Error(this.ERR_ROW_NOT_FOUND);
        }
        if (!col) {
            throw new Error(this.ERR_COL_NOT_FOUND);
        }
        const dataRow = row;
        const value = row.getValue(col.key);
        if (dataRow.cache[col.key] !== undefined) {
            return dataRow.cache[col.key];
        }
        if (col.key === '$thumbnail') {
            if (this.imageResolver) {
                const resolved = this.imageResolver(row, col);
                if (resolved) {
                    return resolved;
                }
            }
            const node = row.node;
            if (node.entry.isFolder) {
                return this.getFolderIcon(node);
            }
            if (node.entry.isFile) {
                if (this.thumbnails) {
                    return this.thumbnailService.getDocumentThumbnailUrl(node);
                }
            }
            if (node.entry.content) {
                const mimeType = node.entry.content.mimeType;
                if (mimeType) {
                    return this.thumbnailService.getMimeTypeIcon(mimeType);
                }
            }
            return this.thumbnailService.getDefaultMimeTypeIcon();
        }
        if (col.type === 'image') {
            if (this.imageResolver) {
                const resolved = this.imageResolver(row, col);
                if (resolved) {
                    return resolved;
                }
            }
        }
        return dataRow.cacheValue(col.key, value);
    }
    getSorting() {
        return this.sorting;
    }
    setSorting(sorting) {
        this.sorting = sorting;
        this.sortRows(this.rows, this.sorting);
    }
    sort(key, direction) {
        const sorting = this.sorting || new DataSorting();
        if (key) {
            sorting.key = key;
            sorting.direction = direction || 'asc';
        }
        this.setSorting(sorting);
    }
    setFilter(filter) {
        this.filter = filter;
    }
    setImageResolver(resolver) {
        this.imageResolver = resolver;
    }
    getFolderIcon(node) {
        if (this.isSmartFolder(node)) {
            return this.thumbnailService.getMimeTypeIcon('smartFolder');
        }
        else if (this.isRuleFolder(node)) {
            return this.thumbnailService.getMimeTypeIcon('ruleFolder');
        }
        else if (this.isALinkFolder(node)) {
            return this.thumbnailService.getMimeTypeIcon('linkFolder');
        }
        else {
            return this.thumbnailService.getMimeTypeIcon('folder');
        }
    }
    isSmartFolder(node) {
        const nodeAspects = this.getNodeAspectNames(node);
        return nodeAspects.indexOf('smf:customConfigSmartFolder') > -1 ||
            (nodeAspects.indexOf('smf:systemConfigSmartFolder') > -1);
    }
    isRuleFolder(node) {
        const nodeAspects = this.getNodeAspectNames(node);
        return nodeAspects.indexOf('rule:rules') > -1 ||
            (nodeAspects.indexOf('rule:rules') > -1);
    }
    isALinkFolder(node) {
        const nodeType = node.entry ? node.entry.nodeType : node.nodeType;
        return nodeType === 'app:folderlink';
    }
    getNodeAspectNames(node) {
        var _a;
        return ((_a = node.entry) === null || _a === void 0 ? void 0 : _a.aspectNames) ? node.entry.aspectNames : (node.aspectNames ? node.aspectNames : []);
    }
    sortRows(rows, sorting) {
        if (this.sortingMode === 'server') {
            return;
        }
        const options = {};
        if ((sorting === null || sorting === void 0 ? void 0 : sorting.key) && (rows === null || rows === void 0 ? void 0 : rows.length)) {
            if (sorting.key.includes('sizeInBytes') || sorting.key === 'name') {
                options.numeric = true;
            }
            rows.sort((a, b) => {
                if (a.node.entry.isFolder !== b.node.entry.isFolder) {
                    return a.node.entry.isFolder ? -1 : 1;
                }
                let left = a.getValue(sorting.key);
                if (left) {
                    left = (left instanceof Date) ? left.valueOf().toString() : left.toString();
                }
                else {
                    left = '';
                }
                let right = b.getValue(sorting.key);
                if (right) {
                    right = (right instanceof Date) ? right.valueOf().toString() : right.toString();
                }
                else {
                    right = '';
                }
                return sorting.direction === 'asc'
                    ? left.localeCompare(right, undefined, options)
                    : right.localeCompare(left, undefined, options);
            });
        }
    }
    loadPage(nodePaging, merge = false, allowDropFiles) {
        var _a;
        let shareDataRows = [];
        if (allowDropFiles !== undefined) {
            this.allowDropFiles = allowDropFiles;
        }
        if (nodePaging === null || nodePaging === void 0 ? void 0 : nodePaging.list) {
            const nodeEntries = nodePaging.list.entries;
            if (nodeEntries === null || nodeEntries === void 0 ? void 0 : nodeEntries.length) {
                shareDataRows = nodeEntries.map((item) => new ShareDataRow(item, this.contentService, this.permissionsStyle, this.thumbnailService, this.allowDropFiles));
                if (this.filter) {
                    shareDataRows = shareDataRows.filter(this.filter);
                }
                if (this.sortingMode !== 'server') {
                    if ((_a = this.columns) === null || _a === void 0 ? void 0 : _a.length) {
                        const sorting = this.getSorting();
                        if (sorting) {
                            this.sortRows(shareDataRows, sorting);
                        }
                        else {
                            const sortable = this.columns.filter((c) => c.sortable);
                            if (sortable.length > 0) {
                                this.sort(sortable[0].key, 'asc');
                            }
                            else {
                                this.sort(this.columns[0].key, 'asc');
                            }
                        }
                    }
                }
            }
        }
        if (merge) {
            const listPrunedDuplicate = shareDataRows.filter((elementToFilter) => {
                const isPresent = this.rows.find((currentRow) => {
                    return currentRow.obj.entry.id === elementToFilter.obj.entry.id;
                });
                return !isPresent;
            });
            this.rows = this.rows.concat(listPrunedDuplicate);
        }
        else {
            this.rows = shareDataRows;
        }
    }
    getSelectedRows() {
        return this.rows.filter((row) => row.isSelected);
    }
    getRowByNodeId(nodeId) {
        return this.rows.find((row) => row.node.entry.id === nodeId);
    }
}

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
let presetsDefaultModel = {
    '-trashcan-': [
        {
            key: '$thumbnail',
            type: 'image',
            srTitle: 'ADF-DOCUMENT-LIST.LAYOUT.THUMBNAIL',
            sortable: false
        },
        {
            key: 'name',
            type: 'text',
            title: 'ADF-DOCUMENT-LIST.LAYOUT.NAME',
            cssClass: 'full-width ellipsis-cell',
            sortable: true
        },
        {
            key: 'path',
            type: 'location',
            title: 'ADF-DOCUMENT-LIST.LAYOUT.LOCATION',
            sortable: true
        },
        {
            key: 'content.sizeInBytes',
            type: 'fileSize',
            title: 'ADF-DOCUMENT-LIST.LAYOUT.SIZE',
            sortable: true
        },
        {
            key: 'archivedAt',
            type: 'date',
            title: 'ADF-DOCUMENT-LIST.LAYOUT.DELETED_ON',
            format: 'timeAgo',
            sortable: true
        },
        {
            key: 'archivedByUser.displayName',
            type: 'text',
            title: 'ADF-DOCUMENT-LIST.LAYOUT.DELETED_BY',
            sortable: true
        }
    ],
    '-sites-': [
        {
            key: '$thumbnail',
            type: 'image',
            srTitle: 'ADF-DOCUMENT-LIST.LAYOUT.THUMBNAIL',
            sortable: false
        },
        {
            key: 'title',
            type: 'text',
            title: 'ADF-DOCUMENT-LIST.LAYOUT.NAME',
            cssClass: 'full-width ellipsis-cell',
            sortable: true
        },
        {
            key: 'visibility',
            type: 'text',
            title: 'ADF-DOCUMENT-LIST.LAYOUT.STATUS',
            sortable: true
        }
    ],
    '-mysites-': [
        {
            key: '$thumbnail',
            type: 'image',
            srTitle: 'ADF-DOCUMENT-LIST.LAYOUT.THUMBNAIL',
            sortable: false
        },
        {
            key: 'title',
            type: 'text',
            title: 'ADF-DOCUMENT-LIST.LAYOUT.NAME',
            cssClass: 'full-width ellipsis-cell',
            sortable: true
        },
        {
            key: 'visibility',
            type: 'text',
            title: 'ADF-DOCUMENT-LIST.LAYOUT.STATUS',
            sortable: true
        }
    ],
    '-favorites-': [
        {
            key: '$thumbnail',
            type: 'image',
            srTitle: 'ADF-DOCUMENT-LIST.LAYOUT.THUMBNAIL',
            sortable: false
        },
        {
            key: 'name',
            type: 'text',
            title: 'ADF-DOCUMENT-LIST.LAYOUT.NAME',
            cssClass: 'full-width ellipsis-cell',
            sortable: true
        },
        {
            key: 'path',
            type: 'location',
            title: 'ADF-DOCUMENT-LIST.LAYOUT.LOCATION',
            sortable: true
        },
        {
            key: 'content.sizeInBytes',
            type: 'fileSize',
            title: 'ADF-DOCUMENT-LIST.LAYOUT.SIZE',
            sortable: true
        },
        {
            key: 'modifiedAt',
            type: 'date',
            title: 'ADF-DOCUMENT-LIST.LAYOUT.MODIFIED_ON',
            format: 'timeAgo',
            sortable: true
        },
        {
            key: 'modifiedByUser.displayName',
            type: 'text',
            title: 'ADF-DOCUMENT-LIST.LAYOUT.MODIFIED_BY',
            sortable: true
        }
    ],
    '-recent-': [
        {
            key: '$thumbnail',
            type: 'image',
            srTitle: 'ADF-DOCUMENT-LIST.LAYOUT.THUMBNAIL',
            sortable: false
        },
        {
            key: 'name',
            type: 'text',
            title: 'ADF-DOCUMENT-LIST.LAYOUT.NAME',
            cssClass: 'full-width ellipsis-cell',
            sortable: true
        },
        {
            key: 'path',
            type: 'location',
            title: 'ADF-DOCUMENT-LIST.LAYOUT.LOCATION',
            cssClass: 'ellipsis-cell',
            sortable: true
        },
        {
            key: 'content.sizeInBytes',
            type: 'fileSize',
            title: 'ADF-DOCUMENT-LIST.LAYOUT.SIZE',
            sortable: true
        },
        {
            key: 'modifiedAt',
            type: 'date',
            title: 'ADF-DOCUMENT-LIST.LAYOUT.MODIFIED_ON',
            format: 'timeAgo',
            sortable: true
        }
    ],
    '-sharedlinks-': [
        {
            key: '$thumbnail',
            type: 'image',
            srTitle: 'ADF-DOCUMENT-LIST.LAYOUT.THUMBNAIL',
            sortable: false
        },
        {
            key: 'name',
            type: 'text',
            title: 'ADF-DOCUMENT-LIST.LAYOUT.NAME',
            cssClass: 'full-width ellipsis-cell',
            sortable: true
        },
        {
            key: 'path',
            type: 'location',
            title: 'ADF-DOCUMENT-LIST.LAYOUT.LOCATION',
            cssClass: 'ellipsis-cell',
            sortable: true
        },
        {
            key: 'content.sizeInBytes',
            type: 'fileSize',
            title: 'ADF-DOCUMENT-LIST.LAYOUT.SIZE',
            sortable: true
        },
        {
            key: 'modifiedAt',
            type: 'date',
            title: 'ADF-DOCUMENT-LIST.LAYOUT.MODIFIED_ON',
            format: 'timeAgo',
            sortable: true
        },
        {
            key: 'modifiedByUser.displayName',
            type: 'text',
            title: 'ADF-DOCUMENT-LIST.LAYOUT.MODIFIED_BY',
            sortable: true
        },
        {
            key: 'sharedByUser.displayName',
            type: 'text',
            title: 'ADF-DOCUMENT-LIST.LAYOUT.SHARED_BY',
            sortable: true
        }
    ],
    'default': [
        {
            key: '$thumbnail',
            type: 'image',
            srTitle: 'ADF-DOCUMENT-LIST.LAYOUT.THUMBNAIL',
            sortable: false
        },
        {
            key: 'name',
            type: 'text',
            title: 'ADF-DOCUMENT-LIST.LAYOUT.NAME',
            cssClass: 'full-width ellipsis-cell',
            sortable: true
        },
        {
            key: 'content.sizeInBytes',
            type: 'fileSize',
            title: 'ADF-DOCUMENT-LIST.LAYOUT.SIZE',
            sortable: true
        },
        {
            key: 'modifiedAt',
            type: 'date',
            title: 'ADF-DOCUMENT-LIST.LAYOUT.MODIFIED_ON',
            format: 'timeAgo',
            sortable: true
        },
        {
            key: 'modifiedByUser.displayName',
            type: 'text',
            title: 'ADF-DOCUMENT-LIST.LAYOUT.MODIFIED_BY',
            sortable: true
        }
    ]
};

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class ContentActionModel {
    constructor(obj) {
        this.disableWithNoPermission = false;
        this.disabled = false;
        this.visible = true;
        if (obj) {
            this.icon = obj.icon;
            this.title = obj.title;
            this.handler = obj.handler;
            this.execute = obj.execute;
            this.target = obj.target;
            this.permission = obj.permission;
            this.disableWithNoPermission = obj.disableWithNoPermission;
            if (obj.hasOwnProperty('disabled')) {
                this.disabled = obj.disabled;
            }
            if (obj.hasOwnProperty('visible')) {
                this.visible = obj.visible;
            }
        }
    }
}
var ContentActionTarget;
(function (ContentActionTarget) {
    ContentActionTarget["Document"] = "document";
    ContentActionTarget["Folder"] = "folder";
    ContentActionTarget["All"] = "all";
})(ContentActionTarget || (ContentActionTarget = {}));
class DocumentActionModel extends ContentActionModel {
    constructor(json) {
        super(json);
        this.target = 'document';
    }
}
class FolderActionModel extends ContentActionModel {
    constructor(json) {
        super(json);
        this.target = 'folder';
    }
}

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class NodeEntityEvent extends BaseEvent {
    constructor(nodeEntry) {
        super();
        this.value = nodeEntry;
    }
}
class NodeEntryEvent extends BaseEvent {
    constructor(node) {
        super();
        this.value = node;
    }
}

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class DocumentListComponent {
    constructor(documentListService, ngZone, elementRef, appConfig, userPreferencesService, contentService, thumbnailService, alfrescoApiService, lockService) {
        this.documentListService = documentListService;
        this.ngZone = ngZone;
        this.elementRef = elementRef;
        this.appConfig = appConfig;
        this.userPreferencesService = userPreferencesService;
        this.contentService = contentService;
        this.thumbnailService = thumbnailService;
        this.alfrescoApiService = alfrescoApiService;
        this.lockService = lockService;
        this.DEFAULT_PAGINATION = new Pagination$1({
            hasMoreItems: false,
            skipCount: 0,
            maxItems: 25,
            totalItems: 0
        });
        this.DEFAULT_SORTING = [
            new DataSorting('name', 'asc'),
            new DataSorting('isFolder', 'desc')
        ];
        this.display = DisplayMode.List;
        this.permissionsStyle = [];
        this.locationFormat = '/';
        this.navigate = true;
        this.showHeader = ShowHeaderMode.Data;
        this.navigationMode = DocumentListComponent.DOUBLE_CLICK_NAVIGATION;
        this.thumbnails = false;
        this.selectionMode = 'single';
        this.multiselect = false;
        this.contentActions = false;
        this.contentActionsPosition = 'right';
        this.contextMenuActions = false;
        this.emptyFolderImageUrl = './assets/images/empty_doc_lib.svg';
        this.allowDropFiles = false;
        this.sorting = ['name', 'asc'];
        this.additionalSorting = new DataSorting('isFolder', 'desc');
        this.sortingMode = 'server';
        this.loading = false;
        this._rowFilter = null;
        this.imageResolver = null;
        this.stickyHeader = false;
        this.headerFilters = false;
        this.currentFolderId = null;
        this.preselectNodes = [];
        this.node = null;
        this.maxItems = this.DEFAULT_PAGINATION.maxItems;
        this.nodeClick = new EventEmitter();
        this.nodeDblClick = new EventEmitter();
        this.folderChange = new EventEmitter();
        this.preview = new EventEmitter();
        this.ready = new EventEmitter();
        this.error = new EventEmitter();
        this.nodeSelected = new EventEmitter();
        this.filterSelection = new EventEmitter();
        this.actions = [];
        this.contextActionHandler = new Subject();
        this.noPermission = false;
        this.selection = new Array();
        this.$folderNode = new Subject();
        this.allowFiltering = true;
        this.orderBy = null;
        this.preselectedRows = [];
        this._pagination = this.DEFAULT_PAGINATION;
        this.pagination = new BehaviorSubject(this.DEFAULT_PAGINATION);
        this.sortingSubject = new BehaviorSubject(this.DEFAULT_SORTING);
        this.layoutPresets = {};
        this.rowMenuCache = {};
        this.onDestroy$ = new Subject();
        this.userPreferencesService
            .select(UserPreferenceValues.PaginationSize)
            .pipe(takeUntil(this.onDestroy$))
            .subscribe(pagSize => {
            this.maxItems = this._pagination.maxItems = pagSize;
        });
    }
    set rowFilter(rowFilter) {
        this._rowFilter = rowFilter;
        if (this.data) {
            this.data.setFilter(this._rowFilter);
            if (this.currentFolderId) {
                this.reload();
            }
        }
    }
    get rowFilter() {
        return this._rowFilter;
    }
    get nodesApi() {
        var _a;
        this._nodesApi = (_a = this._nodesApi) !== null && _a !== void 0 ? _a : new NodesApi(this.alfrescoApiService.getInstance());
        return this._nodesApi;
    }
    getContextActions(node) {
        if (node && node.entry) {
            const actions = this.getNodeActions(node);
            if (actions && actions.length > 0) {
                return actions.map((currentAction) => {
                    return {
                        model: currentAction,
                        node: node,
                        subject: this.contextActionHandler
                    };
                });
            }
        }
        return null;
    }
    get hasCustomLayout() {
        return this.columnList && this.columnList.columns && this.columnList.columns.length > 0;
    }
    getDefaultSorting() {
        let defaultSorting;
        if (Array.isArray(this.sorting)) {
            const [key, direction] = this.sorting;
            defaultSorting = new DataSorting(key, direction);
        }
        else {
            defaultSorting = new DataSorting(this.sorting.key, this.sorting.direction);
        }
        return defaultSorting;
    }
    getLayoutPreset(name = 'default') {
        return (this.layoutPresets[name] || this.layoutPresets['default']).map((col) => new ObjectDataColumn(col));
    }
    isMobile() {
        return !!/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
    }
    isEmpty() {
        return !this.data || this.data.getRows().length === 0;
    }
    ngOnInit() {
        this.rowMenuCache = {};
        this.loadLayoutPresets();
        this.data = new ShareDataTableAdapter(this.thumbnailService, this.contentService, null, this.getDefaultSorting(), this.sortingMode, this.allowDropFiles);
        this.data.thumbnails = this.thumbnails;
        this.data.permissionsStyle = this.permissionsStyle;
        if (this._rowFilter) {
            this.data.setFilter(this._rowFilter);
        }
        if (this.imageResolver) {
            this.data.setImageResolver(this.imageResolver);
        }
        this.contextActionHandler
            .pipe(takeUntil(this.onDestroy$))
            .subscribe(val => this.contextActionCallback(val));
        this.enforceSingleClickNavigationForMobile();
    }
    ngAfterContentInit() {
        if (this.columnList) {
            this.columnList.columns.changes
                .pipe(takeUntil(this.onDestroy$))
                .subscribe(() => this.setTableSchema());
        }
        this.setTableSchema();
    }
    setTableSchema() {
        let schema = [];
        if (this.hasCustomLayout) {
            schema = this.columnList.columns.map((c) => c);
        }
        if (!this.data) {
            this.data = new ShareDataTableAdapter(this.thumbnailService, this.contentService, schema, this.getDefaultSorting(), this.sortingMode);
        }
        else if (schema && schema.length > 0) {
            this.data.setColumns(schema);
        }
        const columns = this.data.getColumns();
        if (!columns || columns.length === 0) {
            this.setupDefaultColumns(this.currentFolderId);
        }
    }
    ngOnChanges(changes) {
        var _a, _b;
        if (!changes['preselectNodes']) {
            this.resetSelection();
        }
        if (Array.isArray(this.sorting)) {
            const [key, direction] = this.sorting;
            this.orderBy = this.buildOrderByArray(key, direction);
        }
        else {
            this.orderBy = this.buildOrderByArray(this.sorting.key, this.sorting.direction);
        }
        if (this.data) {
            this.data.thumbnails = this.thumbnails;
        }
        if (changes.sortingMode && !changes.sortingMode.firstChange && this.data) {
            this.data.sortingMode = changes.sortingMode.currentValue;
        }
        if (changes.sorting && !changes.sorting.firstChange && this.data) {
            const newValue = changes.sorting.currentValue;
            if (newValue && newValue.length > 0) {
                const [key, direction] = newValue;
                this.data.setSorting(new DataSorting(key, direction));
            }
        }
        if (this.currentFolderId && ((_a = changes['currentFolderId']) === null || _a === void 0 ? void 0 : _a.currentValue) !== ((_b = changes['currentFolderId']) === null || _b === void 0 ? void 0 : _b.previousValue)) {
            this.loadFolder();
        }
        if (this.data) {
            if (changes.node && changes.node.currentValue) {
                const merge = this._pagination ? this._pagination.merge : false;
                this.data.loadPage(changes.node.currentValue, merge, null);
                this.preserveExistingSelection();
                this.onPreselectNodes();
                this.onDataReady(changes.node.currentValue);
            }
            else if (changes.imageResolver) {
                this.data.setImageResolver(changes.imageResolver.currentValue);
            }
        }
    }
    reload() {
        this.ngZone.run(() => {
            this.resetSelection();
            this.reloadWithoutResettingSelection();
        });
    }
    reloadWithoutResettingSelection() {
        if (this.node) {
            if (this.data) {
                this.data.loadPage(this.node, this._pagination.merge, null);
                this.preserveExistingSelection();
            }
            this.onPreselectNodes();
            this.syncPagination();
            this.onDataReady(this.node);
        }
        else {
            this.loadFolder();
        }
    }
    contextActionCallback(action) {
        if (action) {
            this.executeContentAction(action.node, action.model);
        }
    }
    getNodeActions(node) {
        if (node && node.entry) {
            let target = null;
            if (node.entry.isFile) {
                target = 'document';
            }
            else if (node.entry.isFolder) {
                target = 'folder';
            }
            if (target) {
                const actions = this.rowMenuCache[node.entry.id];
                if (actions) {
                    actions.forEach((action) => {
                        this.refreshAction(action, node);
                    });
                    return actions;
                }
                const actionsByTarget = this.actions
                    .filter((entry) => {
                    const isVisible = (typeof entry.visible === 'function')
                        ? entry.visible(node)
                        : entry.visible;
                    return isVisible && entry.target.toLowerCase() === target;
                })
                    .map((action) => new ContentActionModel(action));
                actionsByTarget.forEach((action) => {
                    this.refreshAction(action, node);
                });
                this.rowMenuCache[node.entry.id] = actionsByTarget;
                return actionsByTarget;
            }
        }
        return [];
    }
    refreshAction(action, node) {
        action.disabled = this.isActionDisabled(action, node);
        action.visible = this.isActionVisible(action, node);
    }
    isActionVisible(action, node) {
        if (typeof action.visible === 'function') {
            return action.visible(node);
        }
        return action.visible;
    }
    isActionDisabled(action, node) {
        if (typeof action.disabled === 'function') {
            return action.disabled(node);
        }
        if ((action.permission &&
            action.disableWithNoPermission &&
            !this.contentService.hasAllowableOperations(node.entry, action.permission)) ||
            this.lockService.isLocked(node.entry)) {
            return true;
        }
        else {
            return action.disabled;
        }
    }
    onShowContextMenu(e) {
        if (e && this.contextMenuActions) {
            e.preventDefault();
        }
    }
    navigateTo(node) {
        if (typeof node === 'string') {
            this.resetNewFolderPagination();
            this.currentFolderId = node;
            this.folderChange.emit(new NodeEntryEvent({ id: node }));
            this.reload();
            return true;
        }
        else {
            if (this.canNavigateFolder(node)) {
                this.resetNewFolderPagination();
                this.currentFolderId = this.getNodeFolderDestinationId(node);
                this.folderChange.emit(new NodeEntryEvent({ id: this.currentFolderId }));
                this.reload();
                return true;
            }
        }
        return false;
    }
    getNodeFolderDestinationId(node) {
        return this.isLinkFolder(node) ? node.properties['cm:destination'] : node.id;
    }
    isLinkFolder(node) {
        return node.nodeType === 'app:folderlink' && node.properties &&
            node.properties['cm:destination'];
    }
    updateCustomSourceData(nodeId) {
        this.currentFolderId = nodeId;
    }
    executeContentAction(node, action) {
        if (node && node.entry && action) {
            const handlerSub = (typeof action.handler === 'function') ? action.handler(node, this, action.permission) : of(true);
            if (typeof action.execute === 'function' && handlerSub) {
                handlerSub
                    .pipe(takeUntil(this.onDestroy$))
                    .subscribe(() => action.execute(node));
            }
        }
    }
    setLoadingState(value) {
        var _a;
        if (((_a = this.data) === null || _a === void 0 ? void 0 : _a.getRows().length) > 0) {
            if (value) {
                clearTimeout(this.loadingTimeout);
                this.loadingTimeout = setTimeout(() => {
                    this.loading = true;
                }, 1000);
            }
            else {
                clearTimeout(this.loadingTimeout);
                this.loading = false;
            }
        }
        else {
            clearTimeout(this.loadingTimeout);
            this.loading = value;
        }
    }
    loadFolder() {
        if (!this._pagination.merge) {
            this.setLoadingState(true);
        }
        if (!this.hasCustomLayout) {
            this.setupDefaultColumns(this.currentFolderId);
        }
        if (this.documentListService.isCustomSourceService(this.currentFolderId)) {
            this.updateCustomSourceData(this.currentFolderId);
        }
        this.documentListService.loadFolderByNodeId(this.currentFolderId, this._pagination, this.includeFields, this.where, this.orderBy)
            .subscribe((documentNode) => {
            if (documentNode.currentNode) {
                this.folderNode = documentNode.currentNode.entry;
                this.$folderNode.next(documentNode.currentNode.entry);
            }
            this.onPageLoaded(documentNode.children);
        }, (err) => {
            this.handleError(err);
        });
    }
    resetSelection() {
        this.dataTable.resetSelection();
        this.selection = [];
        this.noPermission = false;
    }
    onPageLoaded(nodePaging) {
        if (nodePaging) {
            if (this.data) {
                this.data.loadPage(nodePaging, this._pagination.merge, this.allowDropFiles);
                this.preserveExistingSelection();
            }
            this.onPreselectNodes();
            this.setLoadingState(false);
            this.onDataReady(nodePaging);
        }
    }
    onSortingChanged(event) {
        this.orderBy = this.buildOrderByArray(event.detail.sortingKey, event.detail.direction);
        this.sortingSubject.next([this.additionalSorting, event.detail]);
        if (this.sortingMode === 'server') {
            this.reload();
        }
    }
    buildOrderByArray(currentKey, currentDirection) {
        return [
            `${this.additionalSorting.key} ${this.additionalSorting.direction}`,
            `${currentKey} ${currentDirection}`
        ];
    }
    setupDefaultColumns(preset = 'default') {
        if (this.data) {
            const columns = this.getLayoutPreset(preset);
            this.data.setColumns(columns);
        }
    }
    onPreviewFile(node) {
        if (node) {
            this.preview.emit(new NodeEntityEvent(node));
        }
    }
    onNodeClick(nodeEntry) {
        const domEvent = new CustomEvent('node-click', {
            detail: {
                sender: this,
                node: nodeEntry
            },
            bubbles: true
        });
        this.elementRef.nativeElement.dispatchEvent(domEvent);
        const event = new NodeEntityEvent(nodeEntry);
        this.nodeClick.emit(event);
        if (!event.defaultPrevented) {
            if (this.navigate && this.navigationMode === DocumentListComponent.SINGLE_CLICK_NAVIGATION) {
                this.executeActionClick(nodeEntry);
            }
        }
    }
    onNodeDblClick(nodeEntry) {
        const domEvent = new CustomEvent('node-dblclick', {
            detail: {
                sender: this,
                node: nodeEntry
            },
            bubbles: true
        });
        this.elementRef.nativeElement.dispatchEvent(domEvent);
        const event = new NodeEntityEvent(nodeEntry);
        this.nodeDblClick.emit(event);
        if (!event.defaultPrevented) {
            if (this.navigate && this.navigationMode === DocumentListComponent.DOUBLE_CLICK_NAVIGATION) {
                this.executeActionClick(nodeEntry);
            }
        }
    }
    executeActionClick(nodeEntry) {
        if (nodeEntry && nodeEntry.entry) {
            if (nodeEntry.entry.isFile) {
                this.onPreviewFile(nodeEntry);
            }
            if (nodeEntry.entry.isFolder) {
                this.navigateTo(nodeEntry.entry);
            }
            if (nodeEntry.entry['guid']) {
                const options = {
                    include: this.includeFields
                };
                this.nodesApi.getNode(nodeEntry.entry['guid'], options)
                    .then((node) => {
                    this.navigateTo(node.entry);
                });
            }
        }
    }
    onNodeSelect(event) {
        this.selection = event.selection.map((entry) => entry.node);
        const domEvent = new CustomEvent('node-select', {
            detail: {
                node: event.row ? event.row.node : null,
                selection: this.selection
            },
            bubbles: true
        });
        this.nodeSelected.emit(this.selection);
        this.elementRef.nativeElement.dispatchEvent(domEvent);
    }
    onNodeUnselect(event) {
        this.selection = event.selection.map((entry) => entry.node);
        const domEvent = new CustomEvent('node-unselect', {
            detail: {
                node: event.row ? event.row.node : null,
                selection: this.selection
            },
            bubbles: true
        });
        this.nodeSelected.emit(this.selection);
        this.elementRef.nativeElement.dispatchEvent(domEvent);
    }
    onShowRowContextMenu(event) {
        if (this.contextMenuActions) {
            const args = event.value;
            const node = args.row.node;
            if (node) {
                args.actions = this.getContextActions(node) || [];
            }
        }
    }
    onShowRowActionsMenu(event) {
        if (this.contentActions) {
            const args = event.value;
            const node = args.row.node;
            if (node) {
                args.actions = this.getNodeActions(node) || [];
            }
        }
    }
    onExecuteRowAction(event) {
        if (this.contentActions) {
            const args = event.value;
            const node = args.row.node;
            const action = args.action;
            this.executeContentAction(node, action);
        }
    }
    enforceSingleClickNavigationForMobile() {
        if (this.isMobile()) {
            this.navigationMode = DocumentListComponent.SINGLE_CLICK_NAVIGATION;
        }
    }
    canNavigateFolder(node) {
        let canNavigateFolder = false;
        if (node && node.isFolder) {
            canNavigateFolder = true;
        }
        return canNavigateFolder;
    }
    loadLayoutPresets() {
        const externalSettings = this.appConfig.get('document-list.presets', null);
        this.layoutPresets = externalSettings ? Object.assign({}, presetsDefaultModel, externalSettings) : presetsDefaultModel;
    }
    onDataReady(nodePaging) {
        this.ready.emit(nodePaging);
        this.pagination.next(nodePaging.list.pagination);
    }
    updatePagination(requestPaginationModel) {
        this._pagination.maxItems = requestPaginationModel.maxItems;
        this._pagination.merge = requestPaginationModel.merge;
        this._pagination.skipCount = requestPaginationModel.skipCount;
        this.reload();
    }
    syncPagination() {
        this.node.list.pagination.maxItems = this._pagination.maxItems;
        this.node.list.pagination.skipCount = this._pagination.skipCount;
    }
    onFilterSelectionChange(activeFilters) {
        this.filterSelection.emit(activeFilters);
    }
    resetNewFolderPagination() {
        this._pagination.skipCount = 0;
        this._pagination.maxItems = this.maxItems;
    }
    ngOnDestroy() {
        this.onDestroy$.next(true);
        this.onDestroy$.complete();
    }
    handleError(err) {
        if (err.message) {
            try {
                if (JSON.parse(err.message).error.statusCode === 403) {
                    this.noPermission = true;
                }
            }
            catch (error) {
            }
        }
        this.setLoadingState(false);
        this.error.emit(err);
    }
    getPreselectedNodesBasedOnSelectionMode() {
        return this.hasPreselectedNodes() ? (this.isSingleSelectionMode() ? [this.preselectNodes[0]] : this.preselectNodes) : [];
    }
    getPreselectedRowsBasedOnSelectionMode() {
        return this.hasPreselectedRows() ? (this.isSingleSelectionMode() ? [this.preselectedRows[0]] : this.preselectedRows) : [];
    }
    getSelectionBasedOnSelectionMode() {
        return this.hasPreselectedRows() ? (this.isSingleSelectionMode() ? [this.preselectedRows[0]] : this.data.getSelectedRows()) : this.data.getSelectedRows();
    }
    onPreselectNodes() {
        if (this.hasPreselectedNodes()) {
            this.preselectRowsOfPreselectedNodes();
            const preselectedRows = this.getPreselectedRowsBasedOnSelectionMode();
            const selectedNodes = this.data.getSelectedRows();
            for (const node of preselectedRows) {
                this.dataTable.selectRow(node, true);
            }
            this.onNodeSelect({ row: undefined, selection: selectedNodes });
        }
    }
    preserveExistingSelection() {
        if (this.isMultipleSelectionMode()) {
            for (const selection of this.selection) {
                const rowOfSelection = this.data.getRowByNodeId(selection.entry.id);
                if (rowOfSelection) {
                    rowOfSelection.isSelected = true;
                }
            }
        }
    }
    preselectRowsOfPreselectedNodes() {
        this.preselectedRows = [];
        const preselectedNodes = this.getPreselectedNodesBasedOnSelectionMode();
        preselectedNodes.forEach((preselectedNode) => {
            const rowOfPreselectedNode = this.data.getRowByNodeId(preselectedNode.entry.id);
            if (rowOfPreselectedNode) {
                rowOfPreselectedNode.isSelected = true;
                this.preselectedRows.push(rowOfPreselectedNode);
            }
        });
    }
    unselectRowFromNodeId(nodeId) {
        const rowToUnselect = this.data.getRowByNodeId(nodeId);
        if (rowToUnselect === null || rowToUnselect === void 0 ? void 0 : rowToUnselect.isSelected) {
            rowToUnselect.isSelected = false;
            this.dataTable.selectRow(rowToUnselect, false);
            const selection = this.getSelectionBasedOnSelectionMode();
            this.onNodeUnselect({ row: undefined, selection: selection });
        }
    }
    isSingleSelectionMode() {
        return this.selectionMode === 'single';
    }
    isMultipleSelectionMode() {
        return this.selectionMode === 'multiple';
    }
    hasPreselectedNodes() {
        var _a;
        return ((_a = this.preselectNodes) === null || _a === void 0 ? void 0 : _a.length) > 0;
    }
    hasPreselectedRows() {
        var _a;
        return ((_a = this.preselectedRows) === null || _a === void 0 ? void 0 : _a.length) > 0;
    }
}
DocumentListComponent.ɵfac = function DocumentListComponent_Factory(t) { return new (t || DocumentListComponent)(ɵngcc0.ɵɵdirectiveInject(DocumentListService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.AppConfigService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.UserPreferencesService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ContentService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ThumbnailService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.AlfrescoApiService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.LockService)); };
DocumentListComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: DocumentListComponent, selectors: [["adf-document-list"]], contentQueries: function DocumentListComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, DataColumnListComponent, true);
        ɵngcc0.ɵɵcontentQuery(dirIndex, CustomLoadingContentTemplateDirective, true);
        ɵngcc0.ɵɵcontentQuery(dirIndex, CustomNoPermissionTemplateDirective, true);
        ɵngcc0.ɵɵcontentQuery(dirIndex, CustomEmptyContentTemplateDirective, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.columnList = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.customLoadingContent = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.customNoPermissionsTemplate = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.customNoContentTemplate = _t.first);
    } }, viewQuery: function DocumentListComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵstaticViewQuery(_c5, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.dataTable = _t.first);
    } }, hostAttrs: [1, "adf-document-list"], hostBindings: function DocumentListComponent_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("contextmenu", function DocumentListComponent_contextmenu_HostBindingHandler($event) { return ctx.onShowContextMenu($event); });
    } }, inputs: { display: "display", permissionsStyle: "permissionsStyle", locationFormat: "locationFormat", navigate: "navigate", showHeader: "showHeader", navigationMode: "navigationMode", thumbnails: "thumbnails", selectionMode: "selectionMode", multiselect: "multiselect", contentActions: "contentActions", contentActionsPosition: "contentActionsPosition", contextMenuActions: "contextMenuActions", emptyFolderImageUrl: "emptyFolderImageUrl", allowDropFiles: "allowDropFiles", sorting: "sorting", additionalSorting: "additionalSorting", sortingMode: "sortingMode", loading: "loading", _rowFilter: "_rowFilter", imageResolver: "imageResolver", stickyHeader: "stickyHeader", headerFilters: "headerFilters", currentFolderId: "currentFolderId", preselectNodes: "preselectNodes", node: "node", maxItems: "maxItems", rowFilter: "rowFilter", includeFields: "includeFields", where: "where", rowStyle: "rowStyle", rowStyleClass: "rowStyleClass", filterValue: "filterValue" }, outputs: { nodeClick: "nodeClick", nodeDblClick: "nodeDblClick", folderChange: "folderChange", preview: "preview", ready: "ready", error: "error", nodeSelected: "nodeSelected", filterSelection: "filterSelection" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], ngContentSelectors: _c7, decls: 9, vars: 18, consts: [[3, "selectionMode", "data", "actions", "actionsPosition", "multiselect", "contextMenu", "rowStyle", "rowStyleClass", "loading", "display", "noPermission", "showHeader", "rowMenuCacheEnabled", "stickyHeader", "allowFiltering", "showRowContextMenu", "showRowActionsMenu", "executeRowAction", "rowClick", "rowDblClick", "row-select", "row-unselect", "sorting-changed"], ["dataTable", ""], [4, "ngIf"], [3, "currentFolderId", "value", "filterSelection"], [1, "adf-empty-list_template", "adf-empty-folder"], [1, "adf-empty-folder-this-space-is-empty"], ["fxHide.lt-md", "true", 1, "adf-empty-folder-drag-drop"], ["fxHide.lt-md", "true", 1, "adf-empty-folder-any-files-here-to-add"], [1, "adf-empty-folder-image", 3, "alt", "src"], ["class", "adf-no-permission__template", 4, "ngIf"], [1, "adf-no-permission__template"], [1, "adf-no-permission__template--text"], ["class", "adf-document-list-loading-container", 4, "ngIf"], [1, "adf-document-list-loading-container"], ["id", "adf-document-list-loading", 1, "adf-document-list-loading-margin", 3, "color", "mode"]], template: function DocumentListComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef(_c6);
        ɵngcc0.ɵɵelementStart(0, "adf-datatable", 0, 1);
        ɵngcc0.ɵɵlistener("showRowContextMenu", function DocumentListComponent_Template_adf_datatable_showRowContextMenu_0_listener($event) { return ctx.onShowRowContextMenu($event); })("showRowActionsMenu", function DocumentListComponent_Template_adf_datatable_showRowActionsMenu_0_listener($event) { return ctx.onShowRowActionsMenu($event); })("executeRowAction", function DocumentListComponent_Template_adf_datatable_executeRowAction_0_listener($event) { return ctx.onExecuteRowAction($event); })("rowClick", function DocumentListComponent_Template_adf_datatable_rowClick_0_listener($event) { return ctx.onNodeClick($event.value == null ? null : $event.value.node); })("rowDblClick", function DocumentListComponent_Template_adf_datatable_rowDblClick_0_listener($event) { return ctx.onNodeDblClick($event.value == null ? null : $event.value.node); })("row-select", function DocumentListComponent_Template_adf_datatable_row_select_0_listener($event) { return ctx.onNodeSelect($event.detail); })("row-unselect", function DocumentListComponent_Template_adf_datatable_row_unselect_0_listener($event) { return ctx.onNodeUnselect($event.detail); })("sorting-changed", function DocumentListComponent_Template_adf_datatable_sorting_changed_0_listener($event) { return ctx.onSortingChanged($event); });
        ɵngcc0.ɵɵtemplate(2, DocumentListComponent_div_2_Template, 2, 2, "div", 2);
        ɵngcc0.ɵɵelementStart(3, "adf-no-content-template");
        ɵngcc0.ɵɵtemplate(4, DocumentListComponent_ng_template_4_Template, 2, 1, "ng-template");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(5, "adf-no-permission-template");
        ɵngcc0.ɵɵtemplate(6, DocumentListComponent_ng_template_6_Template, 2, 1, "ng-template");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(7, "adf-loading-content-template");
        ɵngcc0.ɵɵtemplate(8, DocumentListComponent_ng_template_8_Template, 2, 1, "ng-template");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵclassProp("adf-datatable-gallery-thumbnails", ctx.data.thumbnails);
        ɵngcc0.ɵɵproperty("selectionMode", ctx.selectionMode)("data", ctx.data)("actions", ctx.contentActions)("actionsPosition", ctx.contentActionsPosition)("multiselect", ctx.multiselect)("contextMenu", ctx.contextMenuActions)("rowStyle", ctx.rowStyle)("rowStyleClass", ctx.rowStyleClass)("loading", ctx.loading)("display", ctx.display)("noPermission", ctx.noPermission)("showHeader", ctx.showHeader)("rowMenuCacheEnabled", false)("stickyHeader", ctx.stickyHeader)("allowFiltering", ctx.allowFiltering);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.headerFilters);
    } }, directives: function () { return [ɵngcc1.DataTableComponent, ɵngcc4.NgIf, ɵngcc1.NoContentTemplateDirective, ɵngcc1.NoPermissionTemplateDirective, ɵngcc1.LoadingContentTemplateDirective, FilterHeaderComponent, ɵngcc1.EmptyListComponent, ɵngcc16.DefaultShowHideDirective, ɵngcc6.MatIcon, ɵngcc17.MatProgressSpinner]; }, pipes: function () { return [ɵngcc8.TranslatePipe]; }, styles: [".adf-document-list{background-color:var(--theme-background-color);height:100%;min-height:0}.mat-icon.adf-datatable-selected{height:100%;margin-left:-2px;margin-top:2px;width:100%}.adf-sticky-document-list{height:310px;overflow-y:auto}.adf-datatable-card .adf-datatable-selected>svg{fill:var(--theme-accent-color);height:30px;position:absolute;top:10px;width:30px}.adf-datatable-list .adf-datatable-selected>svg{fill:var(--theme-accent-color);height:30px;width:30px}.adf-document-list_empty_template{margin-bottom:20px;margin-top:20px;text-align:center}.adf-no-permission__template{align-items:center;display:flex;flex-direction:column;height:100%;justify-content:center;min-height:300px;width:100%}.adf-no-permission__template mat-icon{font-size:52px;height:52px;width:52px}.adf-no-permission__template--text{color:var(--theme-text-fg-color);font-size:16px}.adf-document-list__this-space-is-empty{color:var(--theme-text-fg-color);font-size:24px;height:32px;letter-spacing:-1px;line-height:1.33;opacity:.26}.adf-document-list__drag-drop{color:var(--theme-text-fg-color);font-size:56px;height:56px;letter-spacing:-2px;line-height:1;margin-top:40px;opacity:.54}.adf-document-list__any-files-here-to-add{color:var(--theme-text-fg-color);font-size:16px;height:24px;letter-spacing:-.4px;line-height:1.5;margin-top:17px;opacity:.54}.adf-document-list__empty_doc_lib{height:161px;margin-top:17px;object-fit:contain;width:565px}.adf-document-list-loading-margin{margin:auto}.adf-document-list-loading-container{display:flex;flex-direction:row;height:100%;min-height:300px}.adf-empty-list-header{font-size:24px;height:32px;letter-spacing:-1px;line-height:1.33;opacity:.26!important}.adf-documentlist-pagination,.adf-empty-list-header{color:var(--theme-text-fg-color)}.adf-documentlist-pagination .adf-pagination__block{border-right:none}.adf-empty-folder-this-space-is-empty{color:var(--theme-text-color);font-size:24px;height:32px;letter-spacing:-1px;line-height:1.33}.adf-empty-folder-drag-drop{color:var(--theme-foreground-text-color);font-size:53px;letter-spacing:-2px;line-height:1;margin-top:40px;min-height:56px;white-space:pre-line;word-break:break-all}@media screen and (max-width:599px){.adf-empty-folder-drag-drop{font-size:48px}}.adf-empty-folder-any-files-here-to-add{color:var(--theme-foreground-text-color);font-size:16px;letter-spacing:-.4px;line-height:1.5;margin-top:17px;min-height:24px;white-space:pre-line;word-break:break-all}.adf-empty-folder-image{margin-top:17px;max-width:100%;object-fit:contain;width:565px}@media screen and (max-width:599px){.adf-empty-folder-image{width:250px}}.adf-datatable-gallery-thumbnails .adf-datatable-card .adf-datatable-row{height:300px!important}.adf-datatable-gallery-thumbnails .adf-datatable-card .adf-datatable-row img{height:130px}.adf-datatable-gallery-thumbnails .adf-datatable-card .adf-datatable-row .adf-datatable-cell{overflow:visible}.adf-datatable-gallery-thumbnails .adf-datatable-card .adf-datatable-row .adf-datatable-cell.adf-datatable-cell--image{display:flex;flex:0 0 auto;flex-direction:column-reverse;justify-content:space-between}.adf-datatable-gallery-thumbnails .adf-datatable-card .adf-datatable-row .adf-datatable-cell.adf-datatable-cell--image .adf-cell-value{display:flex;justify-content:center}"], encapsulation: 2 });
DocumentListComponent.SINGLE_CLICK_NAVIGATION = 'click';
DocumentListComponent.DOUBLE_CLICK_NAVIGATION = 'dblclick';
DocumentListComponent.ctorParameters = () => [
    { type: DocumentListService },
    { type: NgZone },
    { type: ElementRef },
    { type: AppConfigService },
    { type: UserPreferencesService },
    { type: ContentService },
    { type: ThumbnailService },
    { type: AlfrescoApiService },
    { type: LockService }
];
DocumentListComponent.propDecorators = {
    columnList: [{ type: ContentChild, args: [DataColumnListComponent,] }],
    customLoadingContent: [{ type: ContentChild, args: [CustomLoadingContentTemplateDirective,] }],
    customNoPermissionsTemplate: [{ type: ContentChild, args: [CustomNoPermissionTemplateDirective,] }],
    customNoContentTemplate: [{ type: ContentChild, args: [CustomEmptyContentTemplateDirective,] }],
    includeFields: [{ type: Input }],
    where: [{ type: Input }],
    display: [{ type: Input }],
    permissionsStyle: [{ type: Input }],
    locationFormat: [{ type: Input }],
    navigate: [{ type: Input }],
    showHeader: [{ type: Input }],
    navigationMode: [{ type: Input }],
    thumbnails: [{ type: Input }],
    selectionMode: [{ type: Input }],
    multiselect: [{ type: Input }],
    contentActions: [{ type: Input }],
    contentActionsPosition: [{ type: Input }],
    contextMenuActions: [{ type: Input }],
    emptyFolderImageUrl: [{ type: Input }],
    allowDropFiles: [{ type: Input }],
    sorting: [{ type: Input }],
    additionalSorting: [{ type: Input }],
    sortingMode: [{ type: Input }],
    rowStyle: [{ type: Input }],
    rowStyleClass: [{ type: Input }],
    loading: [{ type: Input }],
    _rowFilter: [{ type: Input }],
    rowFilter: [{ type: Input }],
    imageResolver: [{ type: Input }],
    stickyHeader: [{ type: Input }],
    headerFilters: [{ type: Input }],
    filterValue: [{ type: Input }],
    currentFolderId: [{ type: Input }],
    preselectNodes: [{ type: Input }],
    node: [{ type: Input }],
    maxItems: [{ type: Input }],
    nodeClick: [{ type: Output }],
    nodeDblClick: [{ type: Output }],
    folderChange: [{ type: Output }],
    preview: [{ type: Output }],
    ready: [{ type: Output }],
    error: [{ type: Output }],
    nodeSelected: [{ type: Output }],
    filterSelection: [{ type: Output }],
    dataTable: [{ type: ViewChild, args: ['dataTable', { static: true },] }],
    onShowContextMenu: [{ type: HostListener, args: ['contextmenu', ['$event'],] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DocumentListComponent, [{
        type: Component,
        args: [{
                selector: 'adf-document-list',
                template: "<adf-datatable\n    #dataTable\n    [selectionMode]=\"selectionMode\"\n    [data]=\"data\"\n    [actions]=\"contentActions\"\n    [actionsPosition]=\"contentActionsPosition\"\n    [multiselect]=\"multiselect\"\n    [contextMenu]=\"contextMenuActions\"\n    [rowStyle]=\"rowStyle\"\n    [rowStyleClass]=\"rowStyleClass\"\n    [loading]=\"loading\"\n    [display]=\"display\"\n    [noPermission]=\"noPermission\"\n    [showHeader]=\"showHeader\"\n    [rowMenuCacheEnabled]=\"false\"\n    [stickyHeader]=\"stickyHeader\"\n    [allowFiltering]=\"allowFiltering\"\n    (showRowContextMenu)=\"onShowRowContextMenu($event)\"\n    (showRowActionsMenu)=\"onShowRowActionsMenu($event)\"\n    (executeRowAction)=\"onExecuteRowAction($event)\"\n    (rowClick)=\"onNodeClick($event.value?.node)\"\n    (rowDblClick)=\"onNodeDblClick($event.value?.node)\"\n    (row-select)=\"onNodeSelect($any($event).detail)\"\n    (row-unselect)=\"onNodeUnselect($any($event).detail)\"\n    (sorting-changed)=\"onSortingChanged($any($event))\"\n    [class.adf-datatable-gallery-thumbnails]=\"data.thumbnails\">\n\n    <div *ngIf=\"headerFilters\">\n        <adf-filter-header\n            [currentFolderId]=\"currentFolderId\"\n            [value]=\"filterValue\"\n            (filterSelection)=\"onFilterSelectionChange($event)\">\n        </adf-filter-header>\n    </div>\n\n    <adf-no-content-template>\n        <ng-template>\n            <adf-empty-list *ngIf=\"!customNoContentTemplate\">\n                <div class=\"adf-empty-list_template adf-empty-folder\">\n                    <div class=\"adf-empty-folder-this-space-is-empty\">{{'ADF-DOCUMENT-LIST.EMPTY.HEADER' | translate}}</div>\n                    <div fxHide.lt-md=\"true\" class=\"adf-empty-folder-drag-drop\">{{ 'ADF-DATATABLE.EMPTY.DRAG-AND-DROP.TITLE' | translate }}</div>\n                    <div fxHide.lt-md=\"true\" class=\"adf-empty-folder-any-files-here-to-add\">{{ 'ADF-DATATABLE.EMPTY.DRAG-AND-DROP.SUBTITLE' | translate }}</div>\n                    <img [alt]=\"'ADF-DATATABLE.EMPTY.DRAG-AND-DROP.TITLE' | translate\" class=\"adf-empty-folder-image\" [src]=\"emptyFolderImageUrl\">\n                </div>\n            </adf-empty-list>\n            <ng-content select=\"adf-custom-empty-content-template, empty-folder-content\"></ng-content>\n        </ng-template>\n    </adf-no-content-template>\n\n    <adf-no-permission-template>\n        <ng-template>\n            <div class=\"adf-no-permission__template\" *ngIf=\"!customNoPermissionsTemplate\">\n                <mat-icon>error</mat-icon>\n                <p class=\"adf-no-permission__template--text\">{{ 'ADF-DOCUMENT-LIST.NO_PERMISSION' | translate }}</p>\n            </div>\n            <ng-content select=\"adf-custom-no-permission-template, no-permission-content\"></ng-content>\n        </ng-template>\n    </adf-no-permission-template>\n\n    <adf-loading-content-template>\n        <ng-template>\n            <div class=\"adf-document-list-loading-container\" *ngIf=\"!customLoadingContent\">\n                <mat-progress-spinner\n                    id=\"adf-document-list-loading\"\n                    class=\"adf-document-list-loading-margin\"\n                    [color]=\"'primary'\"\n                    [mode]=\"'indeterminate'\">\n                </mat-progress-spinner>\n            </div>\n            <ng-content select=\"adf-custom-loading-content-template\"></ng-content>\n        </ng-template>\n    </adf-loading-content-template>\n\n</adf-datatable>\n",
                encapsulation: ViewEncapsulation.None,
                host: { class: 'adf-document-list' },
                styles: [".adf-document-list{background-color:var(--theme-background-color);height:100%;min-height:0}.mat-icon.adf-datatable-selected{height:100%;margin-left:-2px;margin-top:2px;width:100%}.adf-sticky-document-list{height:310px;overflow-y:auto}.adf-datatable-card .adf-datatable-selected>svg{fill:var(--theme-accent-color);height:30px;position:absolute;top:10px;width:30px}.adf-datatable-list .adf-datatable-selected>svg{fill:var(--theme-accent-color);height:30px;width:30px}.adf-document-list_empty_template{margin-bottom:20px;margin-top:20px;text-align:center}.adf-no-permission__template{align-items:center;display:flex;flex-direction:column;height:100%;justify-content:center;min-height:300px;width:100%}.adf-no-permission__template mat-icon{font-size:52px;height:52px;width:52px}.adf-no-permission__template--text{color:var(--theme-text-fg-color);font-size:16px}.adf-document-list__this-space-is-empty{color:var(--theme-text-fg-color);font-size:24px;height:32px;letter-spacing:-1px;line-height:1.33;opacity:.26}.adf-document-list__drag-drop{color:var(--theme-text-fg-color);font-size:56px;height:56px;letter-spacing:-2px;line-height:1;margin-top:40px;opacity:.54}.adf-document-list__any-files-here-to-add{color:var(--theme-text-fg-color);font-size:16px;height:24px;letter-spacing:-.4px;line-height:1.5;margin-top:17px;opacity:.54}.adf-document-list__empty_doc_lib{height:161px;margin-top:17px;object-fit:contain;width:565px}.adf-document-list-loading-margin{margin:auto}.adf-document-list-loading-container{display:flex;flex-direction:row;height:100%;min-height:300px}.adf-empty-list-header{font-size:24px;height:32px;letter-spacing:-1px;line-height:1.33;opacity:.26!important}.adf-documentlist-pagination,.adf-empty-list-header{color:var(--theme-text-fg-color)}.adf-documentlist-pagination .adf-pagination__block{border-right:none}.adf-empty-folder-this-space-is-empty{color:var(--theme-text-color);font-size:24px;height:32px;letter-spacing:-1px;line-height:1.33}.adf-empty-folder-drag-drop{color:var(--theme-foreground-text-color);font-size:53px;letter-spacing:-2px;line-height:1;margin-top:40px;min-height:56px;white-space:pre-line;word-break:break-all}@media screen and (max-width:599px){.adf-empty-folder-drag-drop{font-size:48px}}.adf-empty-folder-any-files-here-to-add{color:var(--theme-foreground-text-color);font-size:16px;letter-spacing:-.4px;line-height:1.5;margin-top:17px;min-height:24px;white-space:pre-line;word-break:break-all}.adf-empty-folder-image{margin-top:17px;max-width:100%;object-fit:contain;width:565px}@media screen and (max-width:599px){.adf-empty-folder-image{width:250px}}.adf-datatable-gallery-thumbnails .adf-datatable-card .adf-datatable-row{height:300px!important}.adf-datatable-gallery-thumbnails .adf-datatable-card .adf-datatable-row img{height:130px}.adf-datatable-gallery-thumbnails .adf-datatable-card .adf-datatable-row .adf-datatable-cell{overflow:visible}.adf-datatable-gallery-thumbnails .adf-datatable-card .adf-datatable-row .adf-datatable-cell.adf-datatable-cell--image{display:flex;flex:0 0 auto;flex-direction:column-reverse;justify-content:space-between}.adf-datatable-gallery-thumbnails .adf-datatable-card .adf-datatable-row .adf-datatable-cell.adf-datatable-cell--image .adf-cell-value{display:flex;justify-content:center}"]
            }]
    }], function () { return [{ type: DocumentListService }, { type: ɵngcc0.NgZone }, { type: ɵngcc0.ElementRef }, { type: ɵngcc1.AppConfigService }, { type: ɵngcc1.UserPreferencesService }, { type: ɵngcc1.ContentService }, { type: ɵngcc1.ThumbnailService }, { type: ɵngcc1.AlfrescoApiService }, { type: ɵngcc1.LockService }]; }, { display: [{
            type: Input
        }], permissionsStyle: [{
            type: Input
        }], locationFormat: [{
            type: Input
        }], navigate: [{
            type: Input
        }], showHeader: [{
            type: Input
        }], navigationMode: [{
            type: Input
        }], thumbnails: [{
            type: Input
        }], selectionMode: [{
            type: Input
        }], multiselect: [{
            type: Input
        }], contentActions: [{
            type: Input
        }], contentActionsPosition: [{
            type: Input
        }], contextMenuActions: [{
            type: Input
        }], emptyFolderImageUrl: [{
            type: Input
        }], allowDropFiles: [{
            type: Input
        }], sorting: [{
            type: Input
        }], additionalSorting: [{
            type: Input
        }], sortingMode: [{
            type: Input
        }], loading: [{
            type: Input
        }], _rowFilter: [{
            type: Input
        }], imageResolver: [{
            type: Input
        }], stickyHeader: [{
            type: Input
        }], headerFilters: [{
            type: Input
        }], currentFolderId: [{
            type: Input
        }], preselectNodes: [{
            type: Input
        }], node: [{
            type: Input
        }], maxItems: [{
            type: Input
        }], nodeClick: [{
            type: Output
        }], nodeDblClick: [{
            type: Output
        }], folderChange: [{
            type: Output
        }], preview: [{
            type: Output
        }], ready: [{
            type: Output
        }], error: [{
            type: Output
        }], nodeSelected: [{
            type: Output
        }], filterSelection: [{
            type: Output
        }], rowFilter: [{
            type: Input
        }], onShowContextMenu: [{
            type: HostListener,
            args: ['contextmenu', ['$event']]
        }], columnList: [{
            type: ContentChild,
            args: [DataColumnListComponent]
        }], customLoadingContent: [{
            type: ContentChild,
            args: [CustomLoadingContentTemplateDirective]
        }], customNoPermissionsTemplate: [{
            type: ContentChild,
            args: [CustomNoPermissionTemplateDirective]
        }], customNoContentTemplate: [{
            type: ContentChild,
            args: [CustomEmptyContentTemplateDirective]
        }], includeFields: [{
            type: Input
        }], where: [{
            type: Input
        }], rowStyle: [{
            type: Input
        }], rowStyleClass: [{
            type: Input
        }], filterValue: [{
            type: Input
        }], dataTable: [{
            type: ViewChild,
            args: ['dataTable', { static: true }]
        }] }); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class PermissionModel {
    constructor(obj) {
        if (obj) {
            this.type = obj.type || null;
            this.action = obj.action || null;
            this.permission = obj.permission || null;
        }
    }
}

class NodeActionsService {
    constructor(contentDialogService, dialogRef, content, documentListService, apiService, dialog, downloadService) {
        this.contentDialogService = contentDialogService;
        this.dialogRef = dialogRef;
        this.content = content;
        this.documentListService = documentListService;
        this.apiService = apiService;
        this.dialog = dialog;
        this.downloadService = downloadService;
        this.error = new EventEmitter();
    }
    downloadNode(node) {
        new NodeDownloadDirective(this.apiService, this.downloadService, this.dialog)
            .downloadNode(node);
    }
    copyContent(contentEntry, permission) {
        return this.doFileOperation(NodeAction.COPY, 'content', contentEntry, permission);
    }
    copyFolder(contentEntry, permission) {
        return this.doFileOperation(NodeAction.COPY, 'folder', contentEntry, permission);
    }
    moveContent(contentEntry, permission) {
        return this.doFileOperation(NodeAction.MOVE, 'content', contentEntry, permission);
    }
    moveFolder(contentEntry, permission) {
        return this.doFileOperation(NodeAction.MOVE, 'folder', contentEntry, permission);
    }
    doFileOperation(action, type, contentEntry, permission) {
        const observable = new Subject();
        this.contentDialogService
            .openCopyMoveDialog(action, contentEntry, permission)
            .subscribe((selections) => {
            const selection = selections[0];
            this.documentListService[`${action.toLowerCase()}Node`].call(this.documentListService, contentEntry.id, selection.id)
                .subscribe(observable.next.bind(observable, `OPERATION.SUCCESS.${type.toUpperCase()}.${action}`), observable.error.bind(observable));
        }, (error) => {
            observable.error(error);
            return observable;
        });
        return observable;
    }
}
NodeActionsService.ɵfac = function NodeActionsService_Factory(t) { return new (t || NodeActionsService)(ɵngcc0.ɵɵinject(ContentNodeDialogService), ɵngcc0.ɵɵinject(ɵngcc2.MatDialog), ɵngcc0.ɵɵinject(ɵngcc1.ContentService), ɵngcc0.ɵɵinject(DocumentListService), ɵngcc0.ɵɵinject(ɵngcc1.AlfrescoApiService), ɵngcc0.ɵɵinject(ɵngcc2.MatDialog), ɵngcc0.ɵɵinject(ɵngcc1.DownloadService)); };
NodeActionsService.ɵprov = ɵɵdefineInjectable({ factory: function NodeActionsService_Factory() { return new NodeActionsService(ɵɵinject(ContentNodeDialogService), ɵɵinject(MatDialog), ɵɵinject(ContentService), ɵɵinject(DocumentListService), ɵɵinject(AlfrescoApiService), ɵɵinject(MatDialog), ɵɵinject(DownloadService)); }, token: NodeActionsService, providedIn: "root" });
NodeActionsService.ctorParameters = () => [
    { type: ContentNodeDialogService },
    { type: MatDialog },
    { type: ContentService },
    { type: DocumentListService },
    { type: AlfrescoApiService },
    { type: MatDialog },
    { type: DownloadService }
];
NodeActionsService.propDecorators = {
    error: [{ type: Output }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NodeActionsService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ContentNodeDialogService }, { type: ɵngcc2.MatDialog }, { type: ɵngcc1.ContentService }, { type: DocumentListService }, { type: ɵngcc1.AlfrescoApiService }, { type: ɵngcc2.MatDialog }, { type: ɵngcc1.DownloadService }]; }, { error: [{
            type: Output
        }] }); })();

class DocumentActionsService {
    constructor(nodeActionsService, contentNodeDialogService, translation, documentListService, contentService) {
        this.nodeActionsService = nodeActionsService;
        this.contentNodeDialogService = contentNodeDialogService;
        this.translation = translation;
        this.documentListService = documentListService;
        this.contentService = contentService;
        this.permissionEvent = new Subject();
        this.error = new Subject();
        this.success = new Subject();
        this.handlers = {};
        this.setupActionHandlers();
    }
    getHandler(key) {
        if (key) {
            const lKey = key.toLowerCase();
            return this.handlers[lKey] || null;
        }
        return null;
    }
    setHandler(key, handler) {
        if (key) {
            const lKey = key.toLowerCase();
            this.handlers[lKey] = handler;
            return true;
        }
        return false;
    }
    canExecuteAction(nodeEntry) {
        return this.documentListService && nodeEntry && nodeEntry.entry.isFile === true;
    }
    setupActionHandlers() {
        this.handlers['copy'] = this.copyNode.bind(this);
        this.handlers['move'] = this.moveNode.bind(this);
        this.handlers['delete'] = this.deleteNode.bind(this);
        this.handlers['download'] = this.downloadNode.bind(this);
        this.handlers['lock'] = this.lockNode.bind(this);
    }
    lockNode(node) {
        return this.contentNodeDialogService.openLockNodeDialog(node.entry);
    }
    downloadNode(obj) {
        this.nodeActionsService.downloadNode(obj);
    }
    copyNode(node, _target, permission) {
        const actionObservable = this.nodeActionsService.copyContent(node.entry, permission);
        this.prepareHandlers(actionObservable);
        return actionObservable;
    }
    moveNode(node, _target, permission) {
        const actionObservable = this.nodeActionsService.moveContent(node.entry, permission);
        this.prepareHandlers(actionObservable);
        return actionObservable;
    }
    prepareHandlers(actionObservable) {
        actionObservable.subscribe((fileOperationMessage) => {
            this.success.next(fileOperationMessage);
        }, this.error.next.bind(this.error));
    }
    deleteNode(node, _target, permission) {
        if (this.canExecuteAction(node)) {
            if (this.contentService.hasAllowableOperations(node.entry, permission)) {
                const handlerObservable = this.documentListService.deleteNode(node.entry.id);
                handlerObservable.subscribe(() => {
                    const message = this.translation.instant('CORE.DELETE_NODE.SINGULAR', { name: node.entry.name });
                    this.success.next(message);
                }, () => {
                    const message = this.translation.instant('CORE.DELETE_NODE.ERROR_SINGULAR', { name: node.entry.name });
                    this.error.next(message);
                });
                return handlerObservable;
            }
            else {
                this.permissionEvent.next(new PermissionModel({
                    type: 'content',
                    action: 'delete',
                    permission: permission
                }));
                return throwError(new Error('No permission to delete'));
            }
        }
        return of();
    }
}
DocumentActionsService.ɵfac = function DocumentActionsService_Factory(t) { return new (t || DocumentActionsService)(ɵngcc0.ɵɵinject(NodeActionsService), ɵngcc0.ɵɵinject(ContentNodeDialogService), ɵngcc0.ɵɵinject(ɵngcc1.TranslationService), ɵngcc0.ɵɵinject(DocumentListService), ɵngcc0.ɵɵinject(ɵngcc1.ContentService)); };
DocumentActionsService.ɵprov = ɵɵdefineInjectable({ factory: function DocumentActionsService_Factory() { return new DocumentActionsService(ɵɵinject(NodeActionsService), ɵɵinject(ContentNodeDialogService), ɵɵinject(TranslationService), ɵɵinject(DocumentListService), ɵɵinject(ContentService)); }, token: DocumentActionsService, providedIn: "root" });
DocumentActionsService.ctorParameters = () => [
    { type: NodeActionsService },
    { type: ContentNodeDialogService },
    { type: TranslationService },
    { type: DocumentListService },
    { type: ContentService }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DocumentActionsService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: NodeActionsService }, { type: ContentNodeDialogService }, { type: ɵngcc1.TranslationService }, { type: DocumentListService }, { type: ɵngcc1.ContentService }]; }, null); })();

class FolderActionsService {
    constructor(nodeActionsService, documentListService, contentService, translation) {
        this.nodeActionsService = nodeActionsService;
        this.documentListService = documentListService;
        this.contentService = contentService;
        this.translation = translation;
        this.permissionEvent = new Subject();
        this.error = new Subject();
        this.success = new Subject();
        this.handlers = {};
        this.setupActionHandlers();
    }
    getHandler(key) {
        if (key) {
            const lKey = key.toLowerCase();
            return this.handlers[lKey] || null;
        }
        return null;
    }
    setHandler(key, handler) {
        if (key) {
            const lKey = key.toLowerCase();
            this.handlers[lKey] = handler;
            return true;
        }
        return false;
    }
    canExecuteAction(nodeEntry) {
        return this.documentListService && nodeEntry && nodeEntry.entry.isFolder === true;
    }
    setupActionHandlers() {
        this.handlers['copy'] = this.copyNode.bind(this);
        this.handlers['move'] = this.moveNode.bind(this);
        this.handlers['delete'] = this.deleteNode.bind(this);
        this.handlers['download'] = this.downloadNode.bind(this);
    }
    downloadNode(nodeEntry) {
        this.nodeActionsService.downloadNode(nodeEntry);
    }
    copyNode(nodeEntry, target, permission) {
        const actionObservable = this.nodeActionsService.copyFolder(nodeEntry.entry, permission);
        this.prepareHandlers(actionObservable, target);
        return actionObservable;
    }
    moveNode(nodeEntry, target, permission) {
        const actionObservable = this.nodeActionsService.moveFolder(nodeEntry.entry, permission);
        this.prepareHandlers(actionObservable, target);
        return actionObservable;
    }
    prepareHandlers(actionObservable, target) {
        actionObservable.subscribe((fileOperationMessage) => {
            if (target && typeof target.reload === 'function') {
                target.reload();
            }
            this.success.next(fileOperationMessage);
        }, this.error.next.bind(this.error));
    }
    deleteNode(node, target, permission) {
        if (this.canExecuteAction(node)) {
            if (this.contentService.hasAllowableOperations(node.entry, permission)) {
                const handlerObservable = this.documentListService.deleteNode(node.entry.id);
                handlerObservable.subscribe(() => {
                    if (target && typeof target.reload === 'function') {
                        target.reload();
                    }
                    const message = this.translation.instant('CORE.DELETE_NODE.SINGULAR', { name: node.entry.name });
                    this.success.next(message);
                }, () => {
                    const message = this.translation.instant('CORE.DELETE_NODE.ERROR_SINGULAR', { name: node.entry.name });
                    this.error.next(message);
                });
                return handlerObservable;
            }
            else {
                this.permissionEvent.next(new PermissionModel({ type: 'folder', action: 'delete', permission: permission }));
                return throwError(new Error('No permission to delete'));
            }
        }
        return of();
    }
}
FolderActionsService.ɵfac = function FolderActionsService_Factory(t) { return new (t || FolderActionsService)(ɵngcc0.ɵɵinject(NodeActionsService), ɵngcc0.ɵɵinject(DocumentListService), ɵngcc0.ɵɵinject(ɵngcc1.ContentService), ɵngcc0.ɵɵinject(ɵngcc1.TranslationService)); };
FolderActionsService.ɵprov = ɵɵdefineInjectable({ factory: function FolderActionsService_Factory() { return new FolderActionsService(ɵɵinject(NodeActionsService), ɵɵinject(DocumentListService), ɵɵinject(ContentService), ɵɵinject(TranslationService)); }, token: FolderActionsService, providedIn: "root" });
FolderActionsService.ctorParameters = () => [
    { type: NodeActionsService },
    { type: DocumentListService },
    { type: ContentService },
    { type: TranslationService }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FolderActionsService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: NodeActionsService }, { type: DocumentListService }, { type: ɵngcc1.ContentService }, { type: ɵngcc1.TranslationService }]; }, null); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class ContentActionListComponent {
    constructor(documentList) {
        this.documentList = documentList;
    }
    registerAction(action) {
        if (this.documentList && action) {
            this.documentList.actions.push(action);
            return true;
        }
        return false;
    }
    unregisterAction(action) {
        if (this.documentList && action) {
            const idx = this.documentList.actions.indexOf(action);
            if (idx >= 0) {
                this.documentList.actions.splice(idx, 1);
                return true;
            }
        }
        return false;
    }
}
ContentActionListComponent.ɵfac = function ContentActionListComponent_Factory(t) { return new (t || ContentActionListComponent)(ɵngcc0.ɵɵdirectiveInject(DocumentListComponent)); };
ContentActionListComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ContentActionListComponent, selectors: [["content-actions"]], decls: 0, vars: 0, template: function ContentActionListComponent_Template(rf, ctx) { }, encapsulation: 2 });
ContentActionListComponent.ctorParameters = () => [
    { type: DocumentListComponent }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ContentActionListComponent, [{
        type: Component,
        args: [{
                selector: 'content-actions',
                template: ''
            }]
    }], function () { return [{ type: DocumentListComponent }]; }, null); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class ContentActionComponent {
    constructor(list, documentActions, folderActions) {
        this.list = list;
        this.documentActions = documentActions;
        this.folderActions = folderActions;
        this.title = 'Action';
        this.visible = true;
        this.target = ContentActionTarget.All;
        this.disabled = false;
        this.execute = new EventEmitter();
        this.permissionEvent = new EventEmitter();
        this.error = new EventEmitter();
        this.success = new EventEmitter();
        this.subscriptions = [];
    }
    ngOnInit() {
        if (this.target === ContentActionTarget.All) {
            this.folderActionModel = this.generateAction(ContentActionTarget.Folder);
            this.documentActionModel = this.generateAction(ContentActionTarget.Document);
        }
        else {
            this.documentActionModel = this.generateAction(this.target);
        }
    }
    ngOnChanges(changes) {
        if (changes.visible && !changes.visible.firstChange) {
            if (this.documentActionModel) {
                this.documentActionModel.visible = changes.visible.currentValue;
            }
            if (this.folderActionModel) {
                this.folderActionModel.visible = changes.visible.currentValue;
            }
        }
        if (changes.disabled && !changes.disabled.firstChange) {
            if (this.documentActionModel) {
                this.documentActionModel.disabled = changes.disabled.currentValue;
            }
            if (this.folderActionModel) {
                this.folderActionModel.disabled = changes.disabled.currentValue;
            }
        }
    }
    ngOnDestroy() {
        this.subscriptions.forEach((subscription) => subscription.unsubscribe());
        this.subscriptions = [];
        if (this.documentActionModel) {
            this.unregister(this.documentActionModel);
            this.documentActionModel = null;
        }
        if (this.folderActionModel) {
            this.unregister(this.folderActionModel);
            this.folderActionModel = null;
        }
    }
    register(model) {
        if (this.list) {
            return this.list.registerAction(model);
        }
        return false;
    }
    unregister(model) {
        if (this.list) {
            return this.list.unregisterAction(model);
        }
        return false;
    }
    generateAction(target) {
        const model = new ContentActionModel({
            title: this.title,
            icon: this.icon,
            permission: this.permission,
            disableWithNoPermission: this.disableWithNoPermission,
            target: target,
            disabled: this.disabled,
            visible: this.visible
        });
        if (this.handler) {
            model.handler = this.getSystemHandler(target, this.handler);
        }
        if (this.execute) {
            model.execute = (value) => {
                this.execute.emit({ value });
            };
        }
        this.register(model);
        return model;
    }
    getSystemHandler(target, name) {
        if (target) {
            target = target.toLowerCase();
            if (target === ContentActionTarget.Document) {
                if (this.documentActions) {
                    this.subscriptions.push(this.documentActions.permissionEvent.subscribe((permission) => {
                        this.permissionEvent.emit(permission);
                    }), this.documentActions.error.subscribe((errors) => {
                        this.error.emit(errors);
                    }), this.documentActions.success.subscribe((message) => {
                        this.success.emit(message);
                    }));
                    return this.documentActions.getHandler(name);
                }
                return null;
            }
            if (target === ContentActionTarget.Folder) {
                if (this.folderActions) {
                    this.subscriptions.push(this.folderActions.permissionEvent.subscribe((permission) => {
                        this.permissionEvent.emit(permission);
                    }), this.folderActions.error.subscribe((errors) => {
                        this.error.emit(errors);
                    }), this.folderActions.success.subscribe((message) => {
                        this.success.emit(message);
                    }));
                    return this.folderActions.getHandler(name);
                }
                return null;
            }
        }
        return null;
    }
}
ContentActionComponent.ɵfac = function ContentActionComponent_Factory(t) { return new (t || ContentActionComponent)(ɵngcc0.ɵɵdirectiveInject(ContentActionListComponent), ɵngcc0.ɵɵdirectiveInject(DocumentActionsService), ɵngcc0.ɵɵdirectiveInject(FolderActionsService)); };
ContentActionComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ContentActionComponent, selectors: [["content-action"]], inputs: { title: "title", visible: "visible", target: "target", disabled: "disabled", icon: "icon", handler: "handler", permission: "permission", disableWithNoPermission: "disableWithNoPermission" }, outputs: { execute: "execute", permissionEvent: "permissionEvent", error: "error", success: "success" }, features: [ɵngcc0.ɵɵProvidersFeature([
            DocumentActionsService,
            FolderActionsService
        ]), ɵngcc0.ɵɵNgOnChangesFeature], decls: 0, vars: 0, template: function ContentActionComponent_Template(rf, ctx) { }, encapsulation: 2 });
ContentActionComponent.ctorParameters = () => [
    { type: ContentActionListComponent },
    { type: DocumentActionsService },
    { type: FolderActionsService }
];
ContentActionComponent.propDecorators = {
    title: [{ type: Input }],
    icon: [{ type: Input }],
    visible: [{ type: Input }],
    handler: [{ type: Input }],
    target: [{ type: Input }],
    permission: [{ type: Input }],
    disableWithNoPermission: [{ type: Input }],
    disabled: [{ type: Input }],
    execute: [{ type: Output }],
    permissionEvent: [{ type: Output }],
    error: [{ type: Output }],
    success: [{ type: Output }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ContentActionComponent, [{
        type: Component,
        args: [{
                selector: 'content-action',
                template: '',
                providers: [
                    DocumentActionsService,
                    FolderActionsService
                ]
            }]
    }], function () { return [{ type: ContentActionListComponent }, { type: DocumentActionsService }, { type: FolderActionsService }]; }, { title: [{
            type: Input
        }], visible: [{
            type: Input
        }], target: [{
            type: Input
        }], disabled: [{
            type: Input
        }], execute: [{
            type: Output
        }], permissionEvent: [{
            type: Output
        }], error: [{
            type: Output
        }], success: [{
            type: Output
        }], icon: [{
            type: Input
        }], handler: [{
            type: Input
        }], permission: [{
            type: Input
        }], disableWithNoPermission: [{
            type: Input
        }] }); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class LibraryNameColumnComponent {
    constructor(element, alfrescoApiService) {
        this.element = element;
        this.alfrescoApiService = alfrescoApiService;
        this.displayTooltip$ = new BehaviorSubject('');
        this.displayText$ = new BehaviorSubject('');
        this.onDestroy$ = new Subject();
    }
    ngOnInit() {
        this.updateValue();
        this.alfrescoApiService.nodeUpdated
            .pipe(takeUntil(this.onDestroy$))
            .subscribe(node => {
            const row = this.context.row;
            if (row) {
                const { entry } = row.node;
                if (entry === node) {
                    row.node = { entry };
                    this.updateValue();
                }
            }
        });
    }
    updateValue() {
        this.node = this.context.row.node;
        const rows = this.context.data.rows || [];
        if (this.node && this.node.entry) {
            this.displayText$.next(this.makeLibraryTitle(this.node.entry, rows));
            this.displayTooltip$.next(this.makeLibraryTooltip(this.node.entry));
        }
    }
    onClick() {
        this.element.nativeElement.dispatchEvent(new CustomEvent('name-click', {
            bubbles: true,
            detail: {
                node: this.node
            }
        }));
    }
    makeLibraryTooltip(library) {
        const { description, title } = library;
        return description || title || '';
    }
    makeLibraryTitle(library, rows) {
        const entries = rows.map((row) => row.node.entry);
        const { title, id } = library;
        let isDuplicate = false;
        if (entries) {
            isDuplicate = entries.some((entry) => {
                return entry.id !== id && entry.title === title;
            });
        }
        return isDuplicate ? `${title} (${id})` : `${title}`;
    }
    ngOnDestroy() {
        this.onDestroy$.next(true);
        this.onDestroy$.complete();
    }
}
LibraryNameColumnComponent.ɵfac = function LibraryNameColumnComponent_Factory(t) { return new (t || LibraryNameColumnComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.AlfrescoApiService)); };
LibraryNameColumnComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: LibraryNameColumnComponent, selectors: [["adf-library-name-column"]], hostAttrs: [1, "adf-datatable-content-cell", "adf-datatable-link", "adf-library-name-column"], inputs: { context: "context" }, decls: 6, vars: 14, consts: [["role", "link", 1, "adf-datatable-cell-value", 3, "title", "click"]], template: function LibraryNameColumnComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "span", 0);
        ɵngcc0.ɵɵlistener("click", function LibraryNameColumnComponent_Template_span_click_0_listener() { return ctx.onClick(); });
        ɵngcc0.ɵɵpipe(1, "translate");
        ɵngcc0.ɵɵpipe(2, "async");
        ɵngcc0.ɵɵpipe(3, "async");
        ɵngcc0.ɵɵtext(4);
        ɵngcc0.ɵɵpipe(5, "async");
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(3, 8, ctx.displayTooltip$));
        ɵngcc0.ɵɵattribute("aria-label", ɵngcc0.ɵɵpipeBind2(1, 3, "NAME_COLUMN_LINK.ACCESSIBILITY.ARIA_LABEL", ɵngcc0.ɵɵpureFunction1(12, _c8, ɵngcc0.ɵɵpipeBind1(2, 6, ctx.displayText$))));
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(5, 10, ctx.displayText$), " ");
    } }, pipes: [ɵngcc8.TranslatePipe, ɵngcc4.AsyncPipe], encapsulation: 2, changeDetection: 0 });
LibraryNameColumnComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: AlfrescoApiService }
];
LibraryNameColumnComponent.propDecorators = {
    context: [{ type: Input }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(LibraryNameColumnComponent, [{
        type: Component,
        args: [{
                selector: 'adf-library-name-column',
                template: `
        <span
            role="link"
            [attr.aria-label]="'NAME_COLUMN_LINK.ACCESSIBILITY.ARIA_LABEL' | translate:{
                name:  displayText$ | async
            }"
            class="adf-datatable-cell-value"
            title="{{ displayTooltip$ | async }}"
            (click)="onClick()">

            {{ displayText$ | async }}
        </span>
    `,
                changeDetection: ChangeDetectionStrategy.OnPush,
                encapsulation: ViewEncapsulation.None,
                host: {
                    class: 'adf-datatable-content-cell adf-datatable-link adf-library-name-column'
                }
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.AlfrescoApiService }]; }, { context: [{
            type: Input
        }] }); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class LibraryRoleColumnComponent {
    constructor(api) {
        this.api = api;
        this.displayText$ = new BehaviorSubject('');
        this.onDestroy$ = new Subject();
    }
    ngOnInit() {
        this.updateValue();
        this.api.nodeUpdated
            .pipe(takeUntil(this.onDestroy$))
            .subscribe(node => {
            const row = this.context.row;
            if (row) {
                const { entry } = row.node;
                if (entry === node) {
                    row.node = { entry };
                    this.updateValue();
                }
            }
        });
    }
    updateValue() {
        const node = this.context.row.node;
        if (node && node.entry) {
            const role = node.entry.role;
            switch (role) {
                case Site.RoleEnum.SiteManager:
                    this.displayText$.next('LIBRARY.ROLE.MANAGER');
                    break;
                case Site.RoleEnum.SiteCollaborator:
                    this.displayText$.next('LIBRARY.ROLE.COLLABORATOR');
                    break;
                case Site.RoleEnum.SiteContributor:
                    this.displayText$.next('LIBRARY.ROLE.CONTRIBUTOR');
                    break;
                case Site.RoleEnum.SiteConsumer:
                    this.displayText$.next('LIBRARY.ROLE.CONSUMER');
                    break;
                default:
                    this.displayText$.next('LIBRARY.ROLE.NONE');
                    break;
            }
        }
    }
    ngOnDestroy() {
        this.onDestroy$.next(true);
        this.onDestroy$.complete();
    }
}
LibraryRoleColumnComponent.ɵfac = function LibraryRoleColumnComponent_Factory(t) { return new (t || LibraryRoleColumnComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.AlfrescoApiService)); };
LibraryRoleColumnComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: LibraryRoleColumnComponent, selectors: [["adf-library-role-column"]], hostAttrs: [1, "adf-library-role-column", "adf-datatable-content-cell"], inputs: { context: "context" }, decls: 6, vars: 10, consts: [[1, "adf-datatable-cell-value", 3, "title"]], template: function LibraryRoleColumnComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "span", 0);
        ɵngcc0.ɵɵpipe(1, "translate");
        ɵngcc0.ɵɵpipe(2, "async");
        ɵngcc0.ɵɵtext(3);
        ɵngcc0.ɵɵpipe(4, "translate");
        ɵngcc0.ɵɵpipe(5, "async");
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(1, 2, ɵngcc0.ɵɵpipeBind1(2, 4, ctx.displayText$)));
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(4, 6, ɵngcc0.ɵɵpipeBind1(5, 8, ctx.displayText$)), " ");
    } }, pipes: [ɵngcc8.TranslatePipe, ɵngcc4.AsyncPipe], encapsulation: 2, changeDetection: 0 });
LibraryRoleColumnComponent.ctorParameters = () => [
    { type: AlfrescoApiService }
];
LibraryRoleColumnComponent.propDecorators = {
    context: [{ type: Input }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(LibraryRoleColumnComponent, [{
        type: Component,
        args: [{
                selector: 'adf-library-role-column',
                template: `
        <span class="adf-datatable-cell-value" title="{{ (displayText$ | async) | translate }}">
            {{ (displayText$ | async) | translate }}
        </span>
    `,
                changeDetection: ChangeDetectionStrategy.OnPush,
                encapsulation: ViewEncapsulation.None,
                host: { class: 'adf-library-role-column adf-datatable-content-cell' }
            }]
    }], function () { return [{ type: ɵngcc1.AlfrescoApiService }]; }, { context: [{
            type: Input
        }] }); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class LibraryStatusColumnComponent {
    constructor(api) {
        this.api = api;
        this.displayText$ = new BehaviorSubject('');
        this.onDestroy$ = new Subject();
    }
    ngOnInit() {
        this.updateValue();
        this.api.nodeUpdated
            .pipe(takeUntil(this.onDestroy$))
            .subscribe(node => {
            const row = this.context.row;
            if (row) {
                const { entry } = row.node;
                if (entry === node) {
                    row.node = { entry };
                    this.updateValue();
                }
            }
        });
    }
    updateValue() {
        const node = this.context.row.node;
        if (node && node.entry) {
            const visibility = node.entry.visibility;
            switch (visibility) {
                case Site.VisibilityEnum.PUBLIC:
                    this.displayText$.next('LIBRARY.VISIBILITY.PUBLIC');
                    break;
                case Site.VisibilityEnum.PRIVATE:
                    this.displayText$.next('LIBRARY.VISIBILITY.PRIVATE');
                    break;
                case Site.VisibilityEnum.MODERATED:
                    this.displayText$.next('LIBRARY.VISIBILITY.MODERATED');
                    break;
                default:
                    this.displayText$.next('UNKNOWN');
                    break;
            }
        }
    }
    ngOnDestroy() {
        this.onDestroy$.next(true);
        this.onDestroy$.complete();
    }
}
LibraryStatusColumnComponent.ɵfac = function LibraryStatusColumnComponent_Factory(t) { return new (t || LibraryStatusColumnComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.AlfrescoApiService)); };
LibraryStatusColumnComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: LibraryStatusColumnComponent, selectors: [["adf-library-status-column"]], hostAttrs: [1, "adf-library-status-column", "adf-datatable-content-cell"], inputs: { context: "context" }, decls: 6, vars: 10, consts: [[1, "adf-datatable-cell-value", 3, "title"]], template: function LibraryStatusColumnComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "span", 0);
        ɵngcc0.ɵɵpipe(1, "translate");
        ɵngcc0.ɵɵpipe(2, "async");
        ɵngcc0.ɵɵtext(3);
        ɵngcc0.ɵɵpipe(4, "translate");
        ɵngcc0.ɵɵpipe(5, "async");
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(1, 2, ɵngcc0.ɵɵpipeBind1(2, 4, ctx.displayText$)));
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(4, 6, ɵngcc0.ɵɵpipeBind1(5, 8, ctx.displayText$)), " ");
    } }, pipes: [ɵngcc8.TranslatePipe, ɵngcc4.AsyncPipe], encapsulation: 2 });
LibraryStatusColumnComponent.ctorParameters = () => [
    { type: AlfrescoApiService }
];
LibraryStatusColumnComponent.propDecorators = {
    context: [{ type: Input }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(LibraryStatusColumnComponent, [{
        type: Component,
        args: [{
                selector: 'adf-library-status-column',
                template: `
        <span class="adf-datatable-cell-value" title="{{ (displayText$ | async) | translate }}">
            {{ (displayText$ | async) | translate }}
        </span>
    `,
                host: { class: 'adf-library-status-column adf-datatable-content-cell' }
            }]
    }], function () { return [{ type: ɵngcc1.AlfrescoApiService }]; }, { context: [{
            type: Input
        }] }); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class NameColumnComponent {
    constructor(element, alfrescoApiService) {
        this.element = element;
        this.alfrescoApiService = alfrescoApiService;
        this.key = 'name';
        this.displayText$ = new BehaviorSubject('');
        this.onDestroy$ = new Subject();
    }
    ngOnInit() {
        this.updateValue();
        this.alfrescoApiService.nodeUpdated
            .pipe(takeUntil(this.onDestroy$))
            .subscribe(node => {
            const row = this.context.row;
            if (row) {
                const { entry } = row.node;
                if (entry === node) {
                    row.node = { entry };
                    this.updateValue();
                }
            }
        });
    }
    updateValue() {
        this.node = this.context.row.node;
        if (this.node && this.node.entry) {
            const displayText = this.context.row.getValue(this.key);
            this.displayText$.next(displayText || this.node.entry.id);
        }
    }
    onClick() {
        this.element.nativeElement.dispatchEvent(new CustomEvent('name-click', {
            bubbles: true,
            detail: {
                node: this.node
            }
        }));
    }
    ngOnDestroy() {
        this.onDestroy$.next(true);
        this.onDestroy$.complete();
    }
}
NameColumnComponent.ɵfac = function NameColumnComponent_Factory(t) { return new (t || NameColumnComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.AlfrescoApiService)); };
NameColumnComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: NameColumnComponent, selectors: [["adf-name-column"]], hostAttrs: [1, "adf-datatable-content-cell", "adf-datatable-link", "adf-name-column"], inputs: { key: "key", context: "context" }, decls: 6, vars: 14, consts: [["role", "link", 1, "adf-datatable-cell-value", 3, "title", "click"]], template: function NameColumnComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "span", 0);
        ɵngcc0.ɵɵlistener("click", function NameColumnComponent_Template_span_click_0_listener() { return ctx.onClick(); });
        ɵngcc0.ɵɵpipe(1, "translate");
        ɵngcc0.ɵɵpipe(2, "async");
        ɵngcc0.ɵɵpipe(3, "adfNodeNameTooltip");
        ɵngcc0.ɵɵtext(4);
        ɵngcc0.ɵɵpipe(5, "async");
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(3, 8, ctx.node));
        ɵngcc0.ɵɵattribute("aria-label", ɵngcc0.ɵɵpipeBind2(1, 3, "NAME_COLUMN_LINK.ACCESSIBILITY.ARIA_LABEL", ɵngcc0.ɵɵpureFunction1(12, _c8, ɵngcc0.ɵɵpipeBind1(2, 6, ctx.displayText$))));
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(5, 10, ctx.displayText$), " ");
    } }, pipes: [ɵngcc8.TranslatePipe, ɵngcc4.AsyncPipe, ɵngcc1.NodeNameTooltipPipe], encapsulation: 2, changeDetection: 0 });
NameColumnComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: AlfrescoApiService }
];
NameColumnComponent.propDecorators = {
    context: [{ type: Input }],
    key: [{ type: Input }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NameColumnComponent, [{
        type: Component,
        args: [{
                selector: 'adf-name-column',
                template: `
        <span
            role="link"
            [attr.aria-label]="'NAME_COLUMN_LINK.ACCESSIBILITY.ARIA_LABEL' | translate:{
                name:  displayText$ | async
            }"
            class="adf-datatable-cell-value"
            title="{{ node | adfNodeNameTooltip }}"
            (click)="onClick()">

            {{ displayText$ | async }}
        </span>
    `,
                changeDetection: ChangeDetectionStrategy.OnPush,
                encapsulation: ViewEncapsulation.None,
                host: { class: 'adf-datatable-content-cell adf-datatable-link adf-name-column' }
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.AlfrescoApiService }]; }, { key: [{
            type: Input
        }], context: [{
            type: Input
        }] }); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const SEARCH_QUERY_SERVICE_TOKEN = new InjectionToken('QueryService');

class BaseQueryBuilderService {
    constructor(appConfig, alfrescoApiService) {
        this.appConfig = appConfig;
        this.alfrescoApiService = alfrescoApiService;
        this.configUpdated = new Subject();
        this.updated = new Subject();
        this.executed = new Subject();
        this.error = new Subject();
        this.searchForms = new ReplaySubject(1);
        this.categories = [];
        this.queryFragments = {};
        this.filterQueries = [];
        this.paging = null;
        this.sorting = [];
        this.sortingOptions = [];
        this._userQuery = '';
        this.userFacetBuckets = {};
        this.config = {
            categories: []
        };
        this.ranges = {};
        this.resetToDefaults();
    }
    get searchApi() {
        var _a;
        this._searchApi = (_a = this._searchApi) !== null && _a !== void 0 ? _a : new SearchApi(this.alfrescoApiService.getInstance());
        return this._searchApi;
    }
    get userQuery() {
        return this._userQuery;
    }
    set userQuery(value) {
        value = (value || '').trim();
        this._userQuery = value ? `(${value})` : '';
    }
    resetToDefaults() {
        const currentConfig = this.getDefaultConfiguration();
        this.resetSearchOptions();
        this.configUpdated.next(currentConfig);
        this.searchForms.next(this.getSearchFormDetails());
        this.setUpSearchConfiguration(currentConfig);
    }
    getDefaultConfiguration() {
        const configurations = this.loadConfiguration();
        if (this.selectedConfiguration !== undefined) {
            return configurations[this.selectedConfiguration];
        }
        if (Array.isArray(configurations)) {
            return configurations.find((configuration) => configuration.default);
        }
        return configurations;
    }
    updateSelectedConfiguration(index) {
        const currentConfig = this.loadConfiguration();
        if (Array.isArray(currentConfig) && currentConfig[index] !== undefined) {
            this.selectedConfiguration = index;
            this.configUpdated.next(currentConfig[index]);
            this.searchForms.next(this.getSearchFormDetails());
            this.resetSearchOptions();
            this.setUpSearchConfiguration(currentConfig[index]);
            this.update();
        }
    }
    resetSearchOptions() {
        this.categories = [];
        this.queryFragments = {};
        this.filterQueries = [];
        this.sorting = [];
        this.sortingOptions = [];
        this.userFacetBuckets = {};
        this.scope = null;
    }
    getSearchFormDetails() {
        const configurations = this.loadConfiguration();
        if (Array.isArray(configurations)) {
            return configurations.map((configuration, index) => ({
                index,
                name: configuration.name || 'SEARCH.UNKNOWN_CONFIGURATION',
                default: configuration.default || false,
                selected: this.selectedConfiguration !== undefined ? index === this.selectedConfiguration : configuration.default
            }));
        }
        else if (!!configurations) {
            return [{
                    index: 0,
                    name: configurations.name || 'SEARCH.UNKNOWN_CONFIGURATION',
                    default: true,
                    selected: true
                }];
        }
        return [];
    }
    setUpSearchConfiguration(currentConfiguration) {
        if (currentConfiguration) {
            this.config = JSON.parse(JSON.stringify(currentConfiguration));
            this.categories = (this.config.categories || []).filter(category => category.enabled);
            this.filterQueries = this.config.filterQueries || [];
            this.userFacetBuckets = {};
            if (this.config.sorting) {
                this.sorting = this.config.sorting.defaults || [];
                this.sortingOptions = this.config.sorting.options || [];
            }
        }
    }
    addUserFacetBucket(field, bucket) {
        if (field && field.field && bucket) {
            const buckets = this.userFacetBuckets[field.field] || [];
            const existing = buckets.find((facetBucket) => facetBucket.label === bucket.label);
            if (!existing) {
                buckets.push(bucket);
            }
            this.userFacetBuckets[field.field] = buckets;
        }
    }
    getUserFacetBuckets(field) {
        return this.userFacetBuckets[field] || [];
    }
    removeUserFacetBucket(field, bucket) {
        if (field && field.field && bucket) {
            const buckets = this.userFacetBuckets[field.field] || [];
            this.userFacetBuckets[field.field] = buckets
                .filter((facetBucket) => facetBucket.label !== bucket.label);
        }
    }
    addFilterQuery(query) {
        if (query) {
            const existing = this.filterQueries.find((filterQuery) => filterQuery.query === query);
            if (!existing) {
                this.filterQueries.push({ query: query });
            }
        }
    }
    removeFilterQuery(query) {
        if (query) {
            this.filterQueries = this.filterQueries
                .filter((filterQuery) => filterQuery.query !== query);
        }
    }
    getFacetQuery(label) {
        if (label && this.hasFacetQueries) {
            const result = this.config.facetQueries.queries.find((query) => query.label === label);
            if (result) {
                return Object.assign({}, result);
            }
        }
        return null;
    }
    getFacetField(label) {
        if (label) {
            const fields = this.config.facetFields.fields || [];
            const result = fields.find((field) => field.label === label);
            if (result) {
                result.label = this.getSupportedLabel(result.label);
                return Object.assign({}, result);
            }
        }
        return null;
    }
    setScope(scope) {
        this.scope = scope;
    }
    getScope() {
        return this.scope;
    }
    update(queryBody) {
        const query = queryBody ? queryBody : this.buildQuery();
        this.updated.next(query);
    }
    execute(queryBody) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const query = queryBody ? queryBody : this.buildQuery();
                if (query) {
                    const resultSetPaging = yield this.searchApi.search(query);
                    this.executed.next(resultSetPaging);
                }
            }
            catch (error) {
                this.error.next(error);
                this.executed.next({
                    list: {
                        pagination: {
                            totalItems: 0
                        },
                        entries: []
                    }
                });
            }
        });
    }
    search(queryBody) {
        const promise = this.searchApi.search(queryBody);
        promise.then((resultSetPaging) => {
            this.executed.next(resultSetPaging);
        });
        return from(promise);
    }
    buildQuery() {
        const query = this.getFinalQuery();
        const include = this.config.include || [];
        if (include.length === 0) {
            include.push('path', 'allowableOperations');
        }
        if (query) {
            const result = {
                query: {
                    query: query,
                    language: 'afts'
                },
                include: include,
                paging: this.paging,
                fields: this.config.fields,
                filterQueries: this.filterQueries,
                facetQueries: this.facetQueries,
                facetIntervals: this.facetIntervals,
                facetFields: this.facetFields,
                sort: this.sort,
                highlight: this.highlight
            };
            if (this.scope) {
                result['scope'] = this.scope;
            }
            result['facetFormat'] = 'V2';
            return result;
        }
        return null;
    }
    getPrimarySorting() {
        if (this.sorting && this.sorting.length > 0) {
            return this.sorting[0];
        }
        return null;
    }
    getSortingOptions() {
        if (this.config && this.config.sorting) {
            return this.config.sorting.options || [];
        }
        return [];
    }
    getQueryGroup(query) {
        return query.group || this.config.facetQueries.label || 'Facet Queries';
    }
    get hasFacetQueries() {
        if (this.config
            && this.config.facetQueries
            && this.config.facetQueries.queries
            && this.config.facetQueries.queries.length > 0) {
            return true;
        }
        return false;
    }
    get hasFacetIntervals() {
        return this.config
            && this.config.facetIntervals
            && this.config.facetIntervals.intervals
            && this.config.facetIntervals.intervals.length > 0;
    }
    get hasFacetHighlight() {
        return !!(this.config && this.config.highlight);
    }
    get sort() {
        return this.sorting.map((def) => {
            return new RequestSortDefinitionInner({
                type: def.type,
                field: def.field,
                ascending: def.ascending
            });
        });
    }
    get facetQueries() {
        if (this.hasFacetQueries) {
            return this.config.facetQueries.queries.map((query) => {
                query.group = this.getQueryGroup(query);
                return Object.assign({}, query);
            });
        }
        return null;
    }
    get facetIntervals() {
        if (this.hasFacetIntervals) {
            const configIntervals = this.config.facetIntervals;
            return {
                intervals: configIntervals.intervals.map((interval) => ({
                    label: this.getSupportedLabel(interval.label),
                    field: interval.field,
                    sets: interval.sets.map((set) => ({
                        label: this.getSupportedLabel(set.label),
                        start: set.start,
                        end: set.end,
                        startInclusive: set.startInclusive,
                        endInclusive: set.endInclusive
                    }))
                }))
            };
        }
        return null;
    }
    get highlight() {
        return this.hasFacetHighlight ? this.config.highlight : null;
    }
    getFinalQuery() {
        let query = '';
        this.categories.forEach((facet) => {
            const customQuery = this.queryFragments[facet.id];
            if (customQuery) {
                if (query.length > 0) {
                    query += ' AND ';
                }
                query += `(${customQuery})`;
            }
        });
        let result = [this.userQuery, query]
            .filter((entry) => entry)
            .join(' AND ');
        if (this.userFacetBuckets) {
            Object.keys(this.userFacetBuckets).forEach((key) => {
                const subQuery = (this.userFacetBuckets[key] || [])
                    .filter((bucket) => bucket.filterQuery)
                    .map((bucket) => bucket.filterQuery)
                    .join(' OR ');
                if (subQuery) {
                    if (result.length > 0) {
                        result += ' AND ';
                    }
                    result += `(${subQuery})`;
                }
            });
        }
        return result;
    }
    get facetFields() {
        const facetFields = this.config.facetFields && this.config.facetFields.fields;
        if (facetFields && facetFields.length > 0) {
            return {
                facets: facetFields.map((facet) => ({
                    field: facet.field,
                    mincount: facet.mincount,
                    label: this.getSupportedLabel(facet.label),
                    limit: facet.limit,
                    offset: facet.offset,
                    prefix: facet.prefix
                }))
            };
        }
        return null;
    }
    getSupportedLabel(configLabel) {
        const spaceInsideLabelIndex = configLabel.search(/\s/g);
        if (spaceInsideLabelIndex > -1) {
            return `"${configLabel}"`;
        }
        return configLabel;
    }
}
BaseQueryBuilderService.ɵfac = function BaseQueryBuilderService_Factory(t) { return new (t || BaseQueryBuilderService)(ɵngcc0.ɵɵinject(ɵngcc1.AppConfigService), ɵngcc0.ɵɵinject(ɵngcc1.AlfrescoApiService)); };
BaseQueryBuilderService.ɵprov = ɵɵdefineInjectable({ factory: function BaseQueryBuilderService_Factory() { return new BaseQueryBuilderService(ɵɵinject(AppConfigService), ɵɵinject(AlfrescoApiService)); }, token: BaseQueryBuilderService, providedIn: "root" });
BaseQueryBuilderService.ctorParameters = () => [
    { type: AppConfigService },
    { type: AlfrescoApiService }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(BaseQueryBuilderService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc1.AppConfigService }, { type: ɵngcc1.AlfrescoApiService }]; }, null); })();

class SearchHeaderQueryBuilderService extends BaseQueryBuilderService {
    constructor(appConfig, alfrescoApiService, nodeApiService) {
        super(appConfig, alfrescoApiService);
        this.nodeApiService = nodeApiService;
        this.customSources = ['-trashcan-', '-sharedlinks-', '-sites-', '-mysites-', '-favorites-', '-recent-', '-my-'];
        this.activeFilters = [];
        this.updated.pipe(filter((query) => !!query)).subscribe(() => {
            this.execute();
        });
    }
    isFilterServiceActive() {
        return true;
    }
    loadConfiguration() {
        return this.appConfig.get('search-headers');
    }
    setupCurrentPagination(maxItems, skipCount) {
        if (!this.paging ||
            (this.paging &&
                this.paging.maxItems !== maxItems || this.paging.skipCount !== skipCount)) {
            this.paging = { maxItems, skipCount };
            this.execute();
        }
    }
    setActiveFilter(columnActivated, filterValue) {
        const selectedFilter = this.activeFilters.find((activeFilter) => activeFilter.key === columnActivated);
        if (!selectedFilter) {
            this.activeFilters.push({
                key: columnActivated,
                value: filterValue
            });
        }
        else {
            selectedFilter.value = filterValue;
        }
    }
    resetActiveFilters() {
        this.activeFilters = [];
    }
    getActiveFilters() {
        return this.activeFilters;
    }
    isNoFilterActive() {
        return this.activeFilters.length === 0;
    }
    removeActiveFilter(columnRemoved) {
        const filterIndex = this.activeFilters.map((activeFilter) => activeFilter.key).indexOf(columnRemoved);
        if (filterIndex >= 0) {
            this.activeFilters.splice(filterIndex, 1);
        }
    }
    setSorting(dataSorting) {
        this.sorting = [];
        dataSorting.forEach((columnSorting) => {
            const fieldValue = this.getSortingFieldFromColumnName(columnSorting.key);
            if (fieldValue) {
                const optionAscending = columnSorting.direction.toLocaleLowerCase() === 'asc';
                const type = fieldValue === 'score' ? 'SCORE' : 'FIELD';
                const currentSort = {
                    key: columnSorting.key,
                    label: 'current',
                    type: type,
                    field: fieldValue,
                    ascending: optionAscending
                };
                this.sorting.push(currentSort);
            }
        });
        this.execute();
    }
    getSortingFieldFromColumnName(columnName) {
        if (this.sortingOptions.length > 0) {
            const sortOption = this.sortingOptions.find((option) => option.key === columnName);
            return sortOption ? sortOption.field : '';
        }
        return '';
    }
    getCategoryForColumn(columnKey) {
        let foundCategory = null;
        if (this.categories !== null) {
            foundCategory = this.categories.find(category => category.columnKey === columnKey);
        }
        return foundCategory;
    }
    setCurrentRootFolderId(currentFolderId) {
        const alreadyAddedFilter = this.filterQueries.find(filterQueries => filterQueries.query.includes(currentFolderId));
        if (alreadyAddedFilter !== undefined) {
            this.filterQueries = [];
        }
        this.filterQueries = [{
                query: `PARENT:"workspace://SpacesStore/${currentFolderId}"`
            }];
        this.execute();
    }
    isCustomSourceNode(currentNodeId) {
        return this.customSources.includes(currentNodeId);
    }
    getNodeIdForCustomSource(customSourceId) {
        return this.nodeApiService.getNode(customSourceId);
    }
}
SearchHeaderQueryBuilderService.ɵfac = function SearchHeaderQueryBuilderService_Factory(t) { return new (t || SearchHeaderQueryBuilderService)(ɵngcc0.ɵɵinject(ɵngcc1.AppConfigService), ɵngcc0.ɵɵinject(ɵngcc1.AlfrescoApiService), ɵngcc0.ɵɵinject(ɵngcc1.NodesApiService)); };
SearchHeaderQueryBuilderService.ɵprov = ɵɵdefineInjectable({ factory: function SearchHeaderQueryBuilderService_Factory() { return new SearchHeaderQueryBuilderService(ɵɵinject(AppConfigService), ɵɵinject(AlfrescoApiService), ɵɵinject(NodesApiService)); }, token: SearchHeaderQueryBuilderService, providedIn: "root" });
SearchHeaderQueryBuilderService.ctorParameters = () => [
    { type: AppConfigService },
    { type: AlfrescoApiService },
    { type: NodesApiService }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SearchHeaderQueryBuilderService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc1.AppConfigService }, { type: ɵngcc1.AlfrescoApiService }, { type: ɵngcc1.NodesApiService }]; }, null); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class FilterHeaderComponent {
    constructor(documentList, searchFilterQueryBuilder) {
        this.documentList = documentList;
        this.searchFilterQueryBuilder = searchFilterQueryBuilder;
        this.value = {};
        this.filterSelection = new EventEmitter();
        this.onDestroy$ = new Subject();
        this.isFilterServiceActive = this.searchFilterQueryBuilder.isFilterServiceActive();
    }
    ngOnInit() {
        this.searchFilterQueryBuilder.executed
            .pipe(takeUntil(this.onDestroy$))
            .subscribe((newNodePaging) => {
            this.documentList.node = newNodePaging;
            this.documentList.reload();
        });
        this.initDataPagination();
        this.initDataSorting();
    }
    ngOnChanges(changes) {
        if (changes['currentFolderId'] && changes['currentFolderId'].currentValue) {
            this.resetFilterHeader();
            this.configureSearchParent(changes['currentFolderId'].currentValue);
        }
    }
    onFilterSelectionChange() {
        this.filterSelection.emit(this.searchFilterQueryBuilder.getActiveFilters());
        if (this.searchFilterQueryBuilder.isNoFilterActive()) {
            this.documentList.node = null;
            this.documentList.reload();
        }
    }
    resetFilterHeader() {
        this.searchFilterQueryBuilder.resetActiveFilters();
    }
    initDataPagination() {
        this.documentList.pagination
            .pipe(takeUntil(this.onDestroy$))
            .subscribe((newPagination) => {
            this.searchFilterQueryBuilder.setupCurrentPagination(newPagination.maxItems, newPagination.skipCount);
        });
    }
    initDataSorting() {
        this.documentList.sortingSubject
            .pipe(takeUntil(this.onDestroy$))
            .subscribe((sorting) => {
            this.searchFilterQueryBuilder.setSorting(sorting);
        });
    }
    configureSearchParent(currentFolderId) {
        if (this.searchFilterQueryBuilder.isCustomSourceNode(currentFolderId)) {
            this.searchFilterQueryBuilder.getNodeIdForCustomSource(currentFolderId).subscribe((node) => {
                this.initSearchHeader(node.id);
            });
        }
        else {
            this.initSearchHeader(currentFolderId);
        }
    }
    initSearchHeader(currentFolderId) {
        this.searchFilterQueryBuilder.setCurrentRootFolderId(currentFolderId);
        if (this.value) {
            Object.keys(this.value).forEach((columnKey) => {
                this.searchFilterQueryBuilder.setActiveFilter(columnKey, this.value[columnKey]);
            });
        }
    }
    ngOnDestroy() {
        this.onDestroy$.next(true);
        this.onDestroy$.complete();
    }
}
FilterHeaderComponent.ɵfac = function FilterHeaderComponent_Factory(t) { return new (t || FilterHeaderComponent)(ɵngcc0.ɵɵdirectiveInject(DocumentListComponent), ɵngcc0.ɵɵdirectiveInject(SEARCH_QUERY_SERVICE_TOKEN)); };
FilterHeaderComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: FilterHeaderComponent, selectors: [["adf-filter-header"]], inputs: { value: "value", currentFolderId: "currentFolderId" }, outputs: { filterSelection: "filterSelection" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: SEARCH_QUERY_SERVICE_TOKEN, useClass: SearchHeaderQueryBuilderService }]), ɵngcc0.ɵɵNgOnChangesFeature], decls: 1, vars: 1, consts: [[4, "ngIf"], [3, "col", "value", "filterChange"]], template: function FilterHeaderComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, FilterHeaderComponent_div_0_Template, 3, 0, "div", 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngIf", ctx.isFilterServiceActive);
    } }, directives: function () { return [ɵngcc4.NgIf, ɵngcc1.HeaderFilterTemplateDirective, SearchFilterContainerComponent]; }, encapsulation: 2 });
FilterHeaderComponent.ctorParameters = () => [
    { type: DocumentListComponent, decorators: [{ type: Inject, args: [DocumentListComponent,] }] },
    { type: SearchHeaderQueryBuilderService, decorators: [{ type: Inject, args: [SEARCH_QUERY_SERVICE_TOKEN,] }] }
];
FilterHeaderComponent.propDecorators = {
    value: [{ type: Input }],
    currentFolderId: [{ type: Input }],
    filterSelection: [{ type: Output }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FilterHeaderComponent, [{
        type: Component,
        args: [{
                selector: 'adf-filter-header',
                template: "<div *ngIf=\"isFilterServiceActive\">\n    <adf-header-filter-template>\n        <ng-template let-col>\n            <adf-search-filter-container [col]=\"col\"\n                                         [value]=\"value\"\n                                         (filterChange)=\"onFilterSelectionChange()\">\n            </adf-search-filter-container>\n        </ng-template>\n    </adf-header-filter-template>\n</div>\n",
                providers: [{ provide: SEARCH_QUERY_SERVICE_TOKEN, useClass: SearchHeaderQueryBuilderService }]
            }]
    }], function () { return [{ type: DocumentListComponent, decorators: [{
                type: Inject,
                args: [DocumentListComponent]
            }] }, { type: SearchHeaderQueryBuilderService, decorators: [{
                type: Inject,
                args: [SEARCH_QUERY_SERVICE_TOKEN]
            }] }]; }, { value: [{
            type: Input
        }], filterSelection: [{
            type: Output
        }], currentFolderId: [{
            type: Input
        }] }); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class TrashcanNameColumnComponent {
    constructor() {
        this.isLibrary = false;
    }
    ngOnInit() {
        this.node = this.context.row.node;
        const rows = this.context.data.rows || [];
        if (this.node && this.node.entry) {
            this.isLibrary = this.node.entry.nodeType === 'st:site';
            if (this.isLibrary) {
                const { properties } = this.node.entry;
                this.displayText = this.makeLibraryTitle(this.node.entry, rows);
                this.displayTooltip =
                    properties['cm:description'] || properties['cm:title'];
            }
            else {
                this.displayText = this.node.entry.name || this.node.entry.id;
            }
        }
    }
    makeLibraryTitle(library, rows) {
        const entries = rows.map((r) => r.node.entry);
        const { id } = library;
        const title = library.properties['cm:title'];
        let isDuplicate = false;
        if (entries) {
            isDuplicate = entries.some((entry) => {
                return entry.id !== id && entry.properties['cm:title'] === title;
            });
        }
        return isDuplicate
            ? `${library.properties['cm:title']} (${library.name})`
            : `${library.properties['cm:title']}`;
    }
}
TrashcanNameColumnComponent.ɵfac = function TrashcanNameColumnComponent_Factory(t) { return new (t || TrashcanNameColumnComponent)(); };
TrashcanNameColumnComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: TrashcanNameColumnComponent, selectors: [["adf-trashcan-name-column"]], hostAttrs: [1, "adf-datatable-content-cell", "adf-trashcan-name-column"], inputs: { context: "context" }, decls: 2, vars: 2, consts: [[4, "ngIf"], [1, "adf-datatable-cell-value", 3, "title"]], template: function TrashcanNameColumnComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, TrashcanNameColumnComponent_ng_container_0_Template, 4, 4, "ng-container", 0);
        ɵngcc0.ɵɵtemplate(1, TrashcanNameColumnComponent_ng_container_1_Template, 3, 2, "ng-container", 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngIf", !ctx.isLibrary);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.isLibrary);
    } }, directives: [ɵngcc4.NgIf], pipes: [ɵngcc1.NodeNameTooltipPipe], encapsulation: 2, changeDetection: 0 });
TrashcanNameColumnComponent.propDecorators = {
    context: [{ type: Input }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TrashcanNameColumnComponent, [{
        type: Component,
        args: [{
                selector: 'adf-trashcan-name-column',
                template: `
    <ng-container *ngIf="!isLibrary">
      <span class="adf-datatable-cell-value" title="{{ node | adfNodeNameTooltip }}">{{ displayText }}</span>
    </ng-container>
    <ng-container *ngIf="isLibrary">
      <span class="adf-datatable-cell-value" title="{{ displayTooltip }}">{{ displayText }}</span>
    </ng-container>
  `,
                changeDetection: ChangeDetectionStrategy.OnPush,
                encapsulation: ViewEncapsulation.None,
                host: { class: 'adf-datatable-content-cell adf-trashcan-name-column' }
            }]
    }], function () { return []; }, { context: [{
            type: Input
        }] }); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class NodePaging {
}
class NodePagingList {
}
class NodeMinimalEntry {
}
class Pagination {
}
class NodeMinimal {
    constructor() {
        this.properties = {};
    }
}
class UserInfo {
}
class ContentInfo {
}
class PathInfoEntity {
}
class PathElementEntity {
}

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class PermissionStyleModel {
    constructor(css, permission, isFile = true, isFolder = true) {
        this.isFolder = true;
        this.isFile = true;
        this.css = css;
        this.permission = permission;
        this.isFile = isFile;
        this.isFolder = isFolder;
    }
}

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class FileUploadingListComponent {
    constructor(uploadService, nodesApi, translateService) {
        this.uploadService = uploadService;
        this.nodesApi = nodesApi;
        this.translateService = translateService;
        this.FileUploadStatus = FileUploadStatus;
        this.files = [];
        this.error = new EventEmitter();
    }
    cancelFile(file) {
        if (file.status === FileUploadStatus.Pending) {
            file.status = FileUploadStatus.Cancelled;
        }
        else {
            this.uploadService.cancelUpload(file);
        }
    }
    removeFile(file) {
        this.deleteNode(file).subscribe(() => {
            if (file.status === FileUploadStatus.Error) {
                this.notifyError(file);
            }
            this.cancelNodeVersionInstances(file);
            this.uploadService.cancelUpload(file);
        });
    }
    cancelAllFiles() {
        const deletedFiles = [];
        this.files.forEach((file) => {
            if (this.isUploadingFile(file)) {
                this.uploadService.cancelUpload(file);
            }
            else if (file.status === FileUploadStatus.Complete) {
                deletedFiles.push(this.deleteNode(file));
            }
        });
        forkJoin(...deletedFiles).subscribe((files) => {
            const errors = files.filter((file) => file.status === FileUploadStatus.Error);
            if (errors.length) {
                this.notifyError(...errors);
            }
            this.uploadService.cancelUpload(...files);
        });
    }
    isUploadCompleted() {
        return (!this.isUploadCancelled() &&
            Boolean(this.files.length) &&
            !this.files.some(({ status }) => status === FileUploadStatus.Starting ||
                status === FileUploadStatus.Progress ||
                status === FileUploadStatus.Pending));
    }
    isUploadCancelled() {
        return (!!this.files.length &&
            this.files.every(({ status }) => status === FileUploadStatus.Aborted ||
                status === FileUploadStatus.Cancelled ||
                status === FileUploadStatus.Deleted));
    }
    deleteNode(file) {
        const { id } = file.data.entry;
        return this.nodesApi.deleteNode(id, { permanent: true }).pipe(map(() => {
            file.status = FileUploadStatus.Deleted;
            return file;
        }), catchError(() => {
            file.status = FileUploadStatus.Error;
            return of(file);
        }));
    }
    cancelNodeVersionInstances(file) {
        this.files
            .filter((item) => item.options.newVersion &&
            item.data.entry.id === file.data.entry.id)
            .map((item) => {
            item.status = FileUploadStatus.Deleted;
        });
    }
    notifyError(...files) {
        let messageError = null;
        if (files.length === 1) {
            messageError = this.translateService.instant('FILE_UPLOAD.MESSAGES.REMOVE_FILE_ERROR', { fileName: files[0].name });
        }
        else {
            messageError = this.translateService.instant('FILE_UPLOAD.MESSAGES.REMOVE_FILES_ERROR', { total: files.length });
        }
        this.error.emit(messageError);
    }
    isUploadingFile(file) {
        return file.status === FileUploadStatus.Pending ||
            file.status === FileUploadStatus.Starting ||
            file.status === FileUploadStatus.Progress;
    }
}
FileUploadingListComponent.ɵfac = function FileUploadingListComponent_Factory(t) { return new (t || FileUploadingListComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.UploadService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NodesApiService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.TranslationService)); };
FileUploadingListComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: FileUploadingListComponent, selectors: [["adf-file-uploading-list"]], contentQueries: function FileUploadingListComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, TemplateRef, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.template = _t.first);
    } }, inputs: { files: "files" }, outputs: { error: "error" }, decls: 2, vars: 2, consts: [[1, "upload-list"], ["ngFor", "", 3, "ngForOf", "ngForTemplate"]], template: function FileUploadingListComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵtemplate(1, FileUploadingListComponent_ng_template_1_Template, 0, 0, "ng-template", 1);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.files)("ngForTemplate", ctx.template);
    } }, directives: [ɵngcc4.NgForOf], styles: ["[_nghost-%COMP%]{display:flex;flex-direction:column}"] });
FileUploadingListComponent.ctorParameters = () => [
    { type: UploadService },
    { type: NodesApiService },
    { type: TranslationService }
];
FileUploadingListComponent.propDecorators = {
    template: [{ type: ContentChild, args: [TemplateRef,] }],
    files: [{ type: Input }],
    error: [{ type: Output }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FileUploadingListComponent, [{
        type: Component,
        args: [{
                selector: 'adf-file-uploading-list',
                template: "<div class=\"upload-list\">\n    <ng-template\n        ngFor\n        [ngForOf]=\"files\"\n        [ngForTemplate]=\"template\">\n    </ng-template>\n</div>\n",
                styles: [":host{display:flex;flex-direction:column}"]
            }]
    }], function () { return [{ type: ɵngcc1.UploadService }, { type: ɵngcc1.NodesApiService }, { type: ɵngcc1.TranslationService }]; }, { files: [{
            type: Input
        }], error: [{
            type: Output
        }], template: [{
            type: ContentChild,
            args: [TemplateRef]
        }] }); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class FileUploadingDialogComponent {
    constructor(uploadService, changeDetector, userPreferencesService, elementRef) {
        this.uploadService = uploadService;
        this.changeDetector = changeDetector;
        this.userPreferencesService = userPreferencesService;
        this.elementRef = elementRef;
        this.direction = 'ltr';
        this.onDestroy$ = new Subject();
        this.position = 'right';
        this.alwaysVisible = false;
        this.error = new EventEmitter();
        this.filesUploadingList = [];
        this.isDialogActive = false;
        this.totalCompleted = 0;
        this.totalErrors = 0;
        this.isDialogMinimized = false;
        this.isConfirmation = false;
        this.dialogActive = new Subject();
    }
    get isPositionRight() {
        return (this.direction === 'ltr' && this.position === 'right')
            || (this.direction === 'rtl' && this.position === 'left')
            || null;
    }
    get isPositionLeft() {
        return (this.direction === 'ltr' && this.position === 'left')
            || (this.direction === 'rtl' && this.position === 'right')
            || null;
    }
    ngOnInit() {
        this.dialogActive
            .pipe(delay(100), takeUntil(this.onDestroy$))
            .subscribe(() => {
            const element = this.elementRef.nativeElement.querySelector('#upload-dialog');
            if (element) {
                element.focus();
            }
        });
        this.listSubscription = this.uploadService.queueChanged
            .pipe(takeUntil(this.onDestroy$))
            .subscribe(fileList => {
            this.filesUploadingList = fileList;
            if (this.filesUploadingList.length && !this.isDialogActive) {
                this.isDialogActive = true;
                this.dialogActive.next();
            }
            else {
                this.dialogActive.next();
            }
        });
        this.counterSubscription = merge(this.uploadService.fileUploadComplete, this.uploadService.fileUploadDeleted)
            .pipe(takeUntil(this.onDestroy$))
            .subscribe((event) => {
            this.totalCompleted = event.totalComplete;
            this.changeDetector.detectChanges();
        });
        this.errorSubscription = this.uploadService.fileUploadError
            .pipe(takeUntil(this.onDestroy$))
            .subscribe(event => {
            this.totalErrors = event.totalError;
            this.changeDetector.detectChanges();
        });
        this.fileUploadSubscription = this.uploadService.fileUpload
            .pipe(takeUntil(this.onDestroy$))
            .subscribe(() => {
            this.changeDetector.detectChanges();
        });
        this.uploadService.fileDeleted
            .pipe(takeUntil(this.onDestroy$))
            .subscribe(objId => {
            if (this.filesUploadingList) {
                const uploadedFile = this.filesUploadingList.find((file) => {
                    return file.data ? file.data.entry.id === objId : false;
                });
                if (uploadedFile) {
                    uploadedFile.status = FileUploadStatus.Cancelled;
                    this.changeDetector.detectChanges();
                }
            }
        });
        this.userPreferencesService.select('textOrientation')
            .pipe(takeUntil(this.onDestroy$))
            .subscribe((textOrientation) => {
            this.direction = textOrientation;
        });
    }
    toggleConfirmation() {
        this.isConfirmation = !this.isConfirmation;
        if (!this.isConfirmation) {
            this.dialogActive.next();
        }
        if (this.isDialogMinimized) {
            this.isDialogMinimized = false;
        }
    }
    cancelAllUploads() {
        this.toggleConfirmation();
        this.dialogActive.next();
        this.uploadList.cancelAllFiles();
    }
    toggleMinimized() {
        this.isDialogMinimized = !this.isDialogMinimized;
        this.changeDetector.detectChanges();
    }
    close() {
        this.isConfirmation = false;
        this.totalCompleted = 0;
        this.totalErrors = 0;
        this.filesUploadingList = [];
        this.isDialogActive = false;
        this.isDialogMinimized = false;
        this.uploadService.clearQueue();
        this.changeDetector.detectChanges();
    }
    ngOnDestroy() {
        this.uploadService.clearQueue();
        this.listSubscription.unsubscribe();
        this.counterSubscription.unsubscribe();
        this.fileUploadSubscription.unsubscribe();
        this.errorSubscription.unsubscribe();
        this.onDestroy$.next(true);
        this.onDestroy$.complete();
    }
    canShowDialog() {
        return this.isDialogActive || this.alwaysVisible;
    }
    canShowCancelAll() {
        var _a;
        return ((_a = this.filesUploadingList) === null || _a === void 0 ? void 0 : _a.length) && this.hasUploadInProgress();
    }
    canCloseDialog() {
        return !this.hasUploadInProgress() && !this.alwaysVisible;
    }
    hasUploadInProgress() {
        var _a, _b;
        return (!((_a = this.uploadList) === null || _a === void 0 ? void 0 : _a.isUploadCompleted()) && !((_b = this.uploadList) === null || _b === void 0 ? void 0 : _b.isUploadCancelled()));
    }
}
FileUploadingDialogComponent.ɵfac = function FileUploadingDialogComponent_Factory(t) { return new (t || FileUploadingDialogComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.UploadService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.UserPreferencesService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
FileUploadingDialogComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: FileUploadingDialogComponent, selectors: [["adf-file-uploading-dialog"]], viewQuery: function FileUploadingDialogComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c9, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.uploadList = _t.first);
    } }, hostVars: 2, hostBindings: function FileUploadingDialogComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵattribute("adfUploadDialogRight", ctx.isPositionRight)("adfUploadDialogLeft", ctx.isPositionLeft);
    } }, inputs: { position: "position", alwaysVisible: "alwaysVisible" }, outputs: { error: "error" }, decls: 1, vars: 1, consts: [["role", "dialog", "tabindex", "0", "class", "adf-upload-dialog", "id", "upload-dialog", 3, "adf-upload-dialog--minimized", 4, "ngIf"], ["role", "dialog", "tabindex", "0", "id", "upload-dialog", 1, "adf-upload-dialog"], [1, "adf-upload-dialog__header"], ["mat-button", "", 3, "disabled", "click"], ["mat-list-icon", "", 3, "title"], ["tabindex", "0", "class", "adf-upload-dialog__title", 4, "ngIf"], ["class", "adf-upload-dialog__info", "tabindex", "0", 4, "ngIf"], [1, "adf-upload-dialog__content"], [3, "files"], ["uploadList", ""], ["aria-live", "polite", "aria-labelledby", "confirmationTitle", "aria-describedby", "confirmationDescription", 1, "adf-upload-dialog__confirmation"], ["role", "heading", "id", "confirmationTitle", 1, "adf-upload-dialog__confirmation--title"], ["id", "confirmationDescription", 1, "adf-upload-dialog__confirmation--text"], ["class", "adf-upload-dialog__actions", 4, "ngIf"], ["class", "adf-upload-dialog__actions", "cdkTrapFocus", "", "cdkTrapFocusAutoCapture", "", 4, "ngIf"], ["tabindex", "0", 1, "adf-upload-dialog__title"], ["tabindex", "0", 1, "adf-upload-dialog__info"], [3, "file", "remove", "cancel"], [1, "adf-upload-dialog__actions"], ["id", "adf-upload-dialog-cancel-all", "color", "primary", "mat-button", "", 3, "click", 4, "ngIf"], ["id", "adf-upload-dialog-close", "mat-button", "", "color", "primary", 3, "click", 4, "ngIf"], ["id", "adf-upload-dialog-cancel-all", "color", "primary", "mat-button", "", 3, "click"], ["id", "adf-upload-dialog-close", "mat-button", "", "color", "primary", 3, "click"], ["cdkTrapFocus", "", "cdkTrapFocusAutoCapture", "", 1, "adf-upload-dialog__actions"], ["id", "adf-upload-dialog-cancel", "mat-button", "", 3, "click"], ["id", "adf-upload-dialog-confirm", "mat-button", "", "color", "primary", 3, "click"]], template: function FileUploadingDialogComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, FileUploadingDialogComponent_div_0_Template, 24, 32, "div", 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngIf", ctx.canShowDialog());
    } }, directives: function () { return [ɵngcc4.NgIf, ɵngcc5.MatButton, ɵngcc6.MatIcon, ɵngcc14.MatListIconCssMatStyler, FileUploadingListComponent, FileUploadingListRowComponent, ɵngcc18.CdkTrapFocus]; }, pipes: function () { return [ɵngcc8.TranslatePipe]; }, styles: [".adf-upload-dialog{background:var(--theme-dialog-bg-color);bottom:20px;box-shadow:1px 5px 15px #888;color:var(--theme-text-color);position:fixed;width:40%;z-index:999}.adf-upload-dialog--padding{padding:1em}.adf-upload-dialog--hide{display:none!important}.adf-upload-dialog--minimized{width:20%}.adf-upload-dialog--minimized .adf-upload-dialog__content{display:none}.adf-upload-dialog__header{align-items:center;display:flex;padding:1em}.adf-upload-dialog__header button{color:var(--theme-text-color)!important;line-height:0;min-width:0;padding:0}.adf-upload-dialog__title{flex:1 1 auto;margin-left:.5em}.adf-upload-dialog__info{padding:0 1em 1em}.adf-upload-dialog__content{border-bottom:1px solid var(--adf-upload-border-color);border-top:1px solid var(--adf-upload-border-color);max-height:194px;overflow:auto}.adf-upload-dialog__confirmation{padding:0 .5em}.adf-upload-dialog__confirmation--title{color:var(--theme-text-bold-color);font-size:16px;letter-spacing:-.4px;line-height:1.5}.adf-upload-dialog__confirmation--text{margin-bottom:0}.adf-upload-dialog__actions{display:flex;justify-content:flex-end;padding:1em}.adf-upload-dialog__actions>button{text-transform:uppercase}[adfUploadDialogLeft] .adf-upload-dialog{left:25px}[adfUploadDialogRight] .adf-upload-dialog{right:25px}"], encapsulation: 2 });
FileUploadingDialogComponent.ctorParameters = () => [
    { type: UploadService },
    { type: ChangeDetectorRef },
    { type: UserPreferencesService },
    { type: ElementRef }
];
FileUploadingDialogComponent.propDecorators = {
    uploadList: [{ type: ViewChild, args: ['uploadList',] }],
    position: [{ type: Input }],
    alwaysVisible: [{ type: Input }],
    error: [{ type: Output }],
    isPositionRight: [{ type: HostBinding, args: ['attr.adfUploadDialogRight',] }],
    isPositionLeft: [{ type: HostBinding, args: ['attr.adfUploadDialogLeft',] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FileUploadingDialogComponent, [{
        type: Component,
        args: [{
                selector: 'adf-file-uploading-dialog',
                template: "<div *ngIf=\"canShowDialog()\"\n     role=\"dialog\"\n     [attr.aria-label]=\"'ADF_FILE_UPLOAD.ARIA-LABEL.DIALOG'| translate\"\n     tabindex=\"0\"\n     class=\"adf-upload-dialog\"\n     id=\"upload-dialog\"\n     [class.adf-upload-dialog--minimized]=\"isDialogMinimized\">\n    <header class=\"adf-upload-dialog__header\">\n        <button\n            mat-button\n            [attr.aria-label]=\"(isDialogMinimized ?\n                'ADF_FILE_UPLOAD.ARIA-LABEL.DIALOG_MAXIMIZE':\n                'ADF_FILE_UPLOAD.ARIA-LABEL.DIALOG_MINIMIZE') | translate\"\n            [disabled]=\"isConfirmation\"\n            [attr.aria-expanded]=\"!isDialogMinimized\"\n            (click)=\"toggleMinimized()\">\n            <mat-icon\n                mat-list-icon\n                title=\"{{ (isDialogMinimized ? 'ADF_FILE_UPLOAD.BUTTON.MAXIMIZE': 'ADF_FILE_UPLOAD.BUTTON.MINIMIZE') | translate }}\">\n                    {{ isDialogMinimized ? 'keyboard_arrow_up' : 'keyboard_arrow_down' }}\n            </mat-icon>\n        </button>\n\n        <span\n            tabindex=\"0\"\n            class=\"adf-upload-dialog__title\"\n            *ngIf=\"!uploadList.isUploadCancelled()\">\n            {{ 'FILE_UPLOAD.MESSAGES.UPLOAD_PROGRESS'\n                | translate: {\n                    completed: totalCompleted,\n                    total: filesUploadingList.length\n                }\n            }}\n        </span>\n\n        <span\n            tabindex=\"0\"\n            class=\"adf-upload-dialog__title\"\n            *ngIf=\"uploadList.isUploadCancelled()\">\n            {{ 'FILE_UPLOAD.MESSAGES.UPLOAD_CANCELED' | translate }}\n        </span>\n    </header>\n\n    <section class=\"adf-upload-dialog__info\"\n        tabindex=\"0\"\n        *ngIf=\"totalErrors\">\n        {{\n            (totalErrors > 1\n                 ? 'FILE_UPLOAD.MESSAGES.UPLOAD_ERRORS'\n                 : 'FILE_UPLOAD.MESSAGES.UPLOAD_ERROR')\n                 | translate: { total: totalErrors }\n        }}\n    </section>\n\n    <section class=\"adf-upload-dialog__content\"\n        [class.adf-upload-dialog--padding]=\"isConfirmation\">\n        <adf-file-uploading-list\n            [class.adf-upload-dialog--hide]=\"isConfirmation\"\n            #uploadList\n            [files]=\"filesUploadingList\">\n                <ng-template let-file=\"$implicit\">\n                     <adf-file-uploading-list-row\n                        [file]=\"file\"\n                        (remove)=\"uploadList.removeFile(file)\"\n                        (cancel)=\"uploadList.cancelFile(file)\">\n                    </adf-file-uploading-list-row>\n                </ng-template>\n        </adf-file-uploading-list>\n\n        <div\n            aria-live=\"polite\"\n            aria-labelledby=\"confirmationTitle\"\n            aria-describedby=\"confirmationDescription\"\n            class=\"adf-upload-dialog__confirmation\"\n            [class.adf-upload-dialog--hide]=\"!isConfirmation\">\n                <p role=\"heading\" id=\"confirmationTitle\" class=\"adf-upload-dialog__confirmation--title\">\n                    {{ 'ADF_FILE_UPLOAD.CONFIRMATION.MESSAGE.TITLE' | translate }}\n                </p>\n                <p id=\"confirmationDescription\" class=\"adf-upload-dialog__confirmation--text\">\n                    {{ 'ADF_FILE_UPLOAD.CONFIRMATION.MESSAGE.TEXT' | translate }}\n                </p>\n        </div>\n    </section>\n\n    <footer class=\"adf-upload-dialog__actions\" *ngIf=\"!isConfirmation\">\n        <button\n            id=\"adf-upload-dialog-cancel-all\"\n            [attr.aria-label]=\"'ADF_FILE_UPLOAD.ARIA-LABEL.CANCEL_ALL' | translate\"\n            color=\"primary\"\n            mat-button\n            *ngIf=\"canShowCancelAll()\"\n            (click)=\"toggleConfirmation()\"\n        >{{ 'ADF_FILE_UPLOAD.BUTTON.CANCEL_ALL' | translate }}</button>\n\n        <button\n            id=\"adf-upload-dialog-close\"\n            [attr.aria-label]=\"'ADF_FILE_UPLOAD.ARIA-LABEL.DIALOG_CLOSE' | translate\"\n            *ngIf=\"canCloseDialog()\"\n            mat-button\n            color=\"primary\"\n            (click)=\"close()\"\n        >{{ 'ADF_FILE_UPLOAD.BUTTON.CLOSE' | translate }}</button>\n    </footer>\n\n    <footer class=\"adf-upload-dialog__actions\"\n            *ngIf=\"isConfirmation\" cdkTrapFocus cdkTrapFocusAutoCapture>\n        <button\n            id=\"adf-upload-dialog-cancel\"\n            [attr.aria-label]=\"'ADF_FILE_UPLOAD.ARIA-LABEL.CONFIRMATION.CANCEL' | translate\"\n            mat-button\n            (click)=\"cancelAllUploads()\"\n        >{{ 'ADF_FILE_UPLOAD.CONFIRMATION.BUTTON.CANCEL' | translate }}</button>\n\n        <button\n            id=\"adf-upload-dialog-confirm\"\n            [attr.aria-label]=\"'ADF_FILE_UPLOAD.ARIA-LABEL.CONFIRMATION.CONTINUE' | translate\"\n            mat-button\n            color=\"primary\"\n            (click)=\"toggleConfirmation()\"\n        >{{ 'ADF_FILE_UPLOAD.CONFIRMATION.BUTTON.CONTINUE' | translate }}</button>\n    </footer>\n</div>\n",
                encapsulation: ViewEncapsulation.None,
                styles: [".adf-upload-dialog{background:var(--theme-dialog-bg-color);bottom:20px;box-shadow:1px 5px 15px #888;color:var(--theme-text-color);position:fixed;width:40%;z-index:999}.adf-upload-dialog--padding{padding:1em}.adf-upload-dialog--hide{display:none!important}.adf-upload-dialog--minimized{width:20%}.adf-upload-dialog--minimized .adf-upload-dialog__content{display:none}.adf-upload-dialog__header{align-items:center;display:flex;padding:1em}.adf-upload-dialog__header button{color:var(--theme-text-color)!important;line-height:0;min-width:0;padding:0}.adf-upload-dialog__title{flex:1 1 auto;margin-left:.5em}.adf-upload-dialog__info{padding:0 1em 1em}.adf-upload-dialog__content{border-bottom:1px solid var(--adf-upload-border-color);border-top:1px solid var(--adf-upload-border-color);max-height:194px;overflow:auto}.adf-upload-dialog__confirmation{padding:0 .5em}.adf-upload-dialog__confirmation--title{color:var(--theme-text-bold-color);font-size:16px;letter-spacing:-.4px;line-height:1.5}.adf-upload-dialog__confirmation--text{margin-bottom:0}.adf-upload-dialog__actions{display:flex;justify-content:flex-end;padding:1em}.adf-upload-dialog__actions>button{text-transform:uppercase}[adfUploadDialogLeft] .adf-upload-dialog{left:25px}[adfUploadDialogRight] .adf-upload-dialog{right:25px}"]
            }]
    }], function () { return [{ type: ɵngcc1.UploadService }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc1.UserPreferencesService }, { type: ɵngcc0.ElementRef }]; }, { position: [{
            type: Input
        }], alwaysVisible: [{
            type: Input
        }], error: [{
            type: Output
        }], isPositionRight: [{
            type: HostBinding,
            args: ['attr.adfUploadDialogRight']
        }], isPositionLeft: [{
            type: HostBinding,
            args: ['attr.adfUploadDialogLeft']
        }], uploadList: [{
            type: ViewChild,
            args: ['uploadList']
        }] }); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class FileUploadingListRowComponent {
    constructor() {
        this.cancel = new EventEmitter();
        this.remove = new EventEmitter();
        this.FileUploadStatus = FileUploadStatus;
    }
    onCancel(file) {
        this.cancel.emit(file);
    }
    onRemove(file) {
        this.remove.emit(file);
    }
    showCancelledStatus() {
        return this.file.status === FileUploadStatus.Cancelled ||
            this.file.status === FileUploadStatus.Aborted ||
            this.file.status === FileUploadStatus.Deleted;
    }
    get versionNumber() {
        return this.file.data.entry.properties['cm:versionLabel'];
    }
    get mimeType() {
        if (this.file && this.file.file && this.file.file.type) {
            return this.file.file.type;
        }
        return 'default';
    }
    isUploadVersion() {
        return (!!this.file.data &&
            this.file.options &&
            this.file.options.newVersion &&
            this.file.data.entry.properties &&
            this.file.data.entry.properties['cm:versionLabel']);
    }
}
FileUploadingListRowComponent.ɵfac = function FileUploadingListRowComponent_Factory(t) { return new (t || FileUploadingListRowComponent)(); };
FileUploadingListRowComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: FileUploadingListRowComponent, selectors: [["adf-file-uploading-list-row"]], inputs: { file: "file" }, outputs: { cancel: "cancel", remove: "remove" }, decls: 12, vars: 11, consts: [[1, "adf-file-uploading-row"], ["mat-list-icon", "", "class", "adf-file-uploading-row__type", 4, "ngIf"], [3, "value", 4, "ngIf"], ["tabindex", "0", 1, "adf-file-uploading-row__name", 3, "title"], ["class", "adf-file-uploading-row__version", "tabindex", "0", 4, "ngIf"], ["tabindex", "0", "role", "button", "adf-toggle-icon", "", "data-automation-id", "cancel-upload-progress", "class", "adf-file-uploading-row__group adf-file-uploading-row__group--toggle", 3, "title", "keyup.enter", "click", 4, "ngIf"], ["mat-icon-button", "", "adf-toggle-icon", "", "class", "adf-file-uploading-row__group", 3, "title", "click", 4, "ngIf"], ["class", "adf-file-uploading-row__file-version", "role", "status", 4, "ngIf"], ["adf-toggle-icon", "", "mat-icon-button", "", "data-automation-id", "cancel-upload-queue", "class", "adf-file-uploading-row__group", 3, "title", "click", 4, "ngIf"], ["tabindex", "0", "role", "status", "class", "adf-file-uploading-row__block adf-file-uploading-row__status--error", 4, "ngIf"], ["tabindex", "0", "role", "status", "class", "adf-file-uploading-row__block adf-file-uploading-row__status--cancelled", 4, "ngIf"], ["mat-list-icon", "", 1, "adf-file-uploading-row__type"], [3, "value"], ["tabindex", "0", 1, "adf-file-uploading-row__version"], ["color", "primary", "disabled", "", 3, "title"], ["tabindex", "0", "role", "button", "adf-toggle-icon", "", "data-automation-id", "cancel-upload-progress", 1, "adf-file-uploading-row__group", "adf-file-uploading-row__group--toggle", 3, "title", "keyup.enter", "click"], ["toggleIcon", "toggleIcon"], ["class", "adf-file-uploading-row__status", 4, "ngIf"], ["class", "adf-file-uploading-row__action adf-file-uploading-row__action--cancel", 4, "ngIf"], [1, "adf-file-uploading-row__status"], [1, "adf-file-uploading-row__action", "adf-file-uploading-row__action--cancel"], ["mat-icon-button", "", "adf-toggle-icon", "", 1, "adf-file-uploading-row__group", 3, "title", "click"], ["class", "adf-file-uploading-row__status adf-file-uploading-row__status--done", 4, "ngIf"], ["class", "adf-file-uploading-row__action adf-file-uploading-row__action--remove", 4, "ngIf"], [1, "adf-file-uploading-row__status", "adf-file-uploading-row__status--done"], [1, "adf-file-uploading-row__action", "adf-file-uploading-row__action--remove"], ["role", "status", 1, "adf-file-uploading-row__file-version"], ["mat-list-icon", "", 1, "adf-file-uploading-row__status--done"], ["adf-toggle-icon", "", "mat-icon-button", "", "data-automation-id", "cancel-upload-queue", 1, "adf-file-uploading-row__group", 3, "title", "click"], ["toggleIconCancel", "toggleIcon"], ["class", "adf-file-uploading-row__status adf-file-uploading-row__status--pending", 4, "ngIf"], [1, "adf-file-uploading-row__status", "adf-file-uploading-row__status--pending"], ["tabindex", "0", "role", "status", 1, "adf-file-uploading-row__block", "adf-file-uploading-row__status--error"], ["mat-list-icon", "", 3, "matTooltip"], ["tabindex", "0", "role", "status", 1, "adf-file-uploading-row__block", "adf-file-uploading-row__status--cancelled"]], template: function FileUploadingListRowComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵtemplate(1, FileUploadingListRowComponent_mat_icon_1_Template, 2, 0, "mat-icon", 1);
        ɵngcc0.ɵɵtemplate(2, FileUploadingListRowComponent_adf_icon_2_Template, 1, 1, "adf-icon", 2);
        ɵngcc0.ɵɵelementStart(3, "span", 3);
        ɵngcc0.ɵɵtext(4);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(5, FileUploadingListRowComponent_span_5_Template, 4, 8, "span", 4);
        ɵngcc0.ɵɵtemplate(6, FileUploadingListRowComponent_div_6_Template, 6, 11, "div", 5);
        ɵngcc0.ɵɵtemplate(7, FileUploadingListRowComponent_button_7_Template, 6, 11, "button", 6);
        ɵngcc0.ɵɵtemplate(8, FileUploadingListRowComponent_div_8_Template, 4, 3, "div", 7);
        ɵngcc0.ɵɵtemplate(9, FileUploadingListRowComponent_button_9_Template, 6, 11, "button", 8);
        ɵngcc0.ɵɵtemplate(10, FileUploadingListRowComponent_div_10_Template, 6, 11, "div", 9);
        ɵngcc0.ɵɵtemplate(11, FileUploadingListRowComponent_div_11_Template, 4, 6, "div", 10);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.mimeType === "default");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.mimeType !== "default");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵpropertyInterpolate("title", ctx.file.name);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate1(" ", ctx.file.name, " ");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.isUploadVersion());
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.file.status === ctx.FileUploadStatus.Progress || ctx.file.status === ctx.FileUploadStatus.Starting);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.file.status === ctx.FileUploadStatus.Complete && !ctx.isUploadVersion());
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.file.status === ctx.FileUploadStatus.Complete && ctx.isUploadVersion());
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.file.status === ctx.FileUploadStatus.Pending);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.file.status === ctx.FileUploadStatus.Error);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.showCancelledStatus());
    } }, directives: function () { return [ɵngcc4.NgIf, ɵngcc6.MatIcon, ɵngcc14.MatListIconCssMatStyler, ɵngcc1.IconComponent, ɵngcc15.MatChip, ToggleIconDirective, ɵngcc5.MatButton, ɵngcc7.MatTooltip]; }, pipes: function () { return [ɵngcc8.TranslatePipe, ɵngcc1.FileSizePipe, FileUploadErrorPipe]; }, styles: ["adf-file-uploading-list-row:not(:first-child){border-top:1px solid var(--adf-upload-border-color);display:block}.adf-file-uploading-row{align-items:center;cursor:default;display:flex;padding:.3em 1em}.adf-file-uploading-row:hover{background:#eee}.adf-file-uploading-row__name{flex:1 1 auto;overflow:hidden;padding:0 1em 0 .5em;text-overflow:ellipsis;white-space:nowrap}.adf-file-uploading-row__block,.adf-file-uploading-row__file-version,.adf-file-uploading-row__group{align-items:center;display:flex!important;height:40px;justify-content:flex-end;line-height:40px;min-width:100px}.adf-file-uploading-row__group--toggle{align-items:center;cursor:pointer;display:flex;height:40px;line-height:40px}.adf-file-uploading-row__status--done{color:var(--theme-accent-color)}.adf-file-uploading-row__action--cancel,.adf-file-uploading-row__action--remove,.adf-file-uploading-row__status--error{color:var(--theme-warn-color)}"], encapsulation: 2 });
FileUploadingListRowComponent.propDecorators = {
    file: [{ type: Input }],
    cancel: [{ type: Output }],
    remove: [{ type: Output }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FileUploadingListRowComponent, [{
        type: Component,
        args: [{
                selector: 'adf-file-uploading-list-row',
                template: "<div class=\"adf-file-uploading-row\">\n    <mat-icon *ngIf=\"mimeType === 'default'\" mat-list-icon class=\"adf-file-uploading-row__type\">\n        insert_drive_file\n    </mat-icon>\n\n    <adf-icon *ngIf=\"mimeType !== 'default'\" value=\"adf:{{ mimeType }}\"></adf-icon>\n\n    <span\n        tabindex=\"0\"\n        class=\"adf-file-uploading-row__name\"\n        title=\"{{ file.name }}\">\n        {{ file.name }}\n    </span>\n\n    <span *ngIf=\"isUploadVersion()\" class=\"adf-file-uploading-row__version\" tabindex=\"0\" >\n        <mat-chip color=\"primary\"\n            [attr.aria-label]=\"'ADF_FILE_UPLOAD.ARIA-LABEL.VERSION' | translate: { version:  versionNumber }\"\n            [title]=\"'version' + versionNumber\" disabled\n        >{{ versionNumber }}</mat-chip>\n    </span>\n\n    <div\n        tabindex=\"0\"\n        role=\"button\"\n        #toggleIcon=\"toggleIcon\"\n        adf-toggle-icon\n        (keyup.enter)=\"onCancel(file)\"\n        (click)=\"onCancel(file)\"\n        data-automation-id=\"cancel-upload-progress\"\n        *ngIf=\"file.status === FileUploadStatus.Progress || file.status === FileUploadStatus.Starting\"\n        [attr.aria-label]=\"'ADF_FILE_UPLOAD.ARIA-LABEL.CANCEL_FILE_UPLOAD' | translate: { file: file.name }\"\n        class=\"adf-file-uploading-row__group adf-file-uploading-row__group--toggle\"\n        title=\"{{ 'ADF_FILE_UPLOAD.BUTTON.CANCEL_FILE' | translate }}\">\n\n        <span class=\"adf-file-uploading-row__status\" *ngIf=\"!toggleIcon.isToggled\">\n            {{ file.progress.loaded | adfFileSize }} / {{ file.progress.total | adfFileSize }}\n        </span>\n\n        <mat-icon *ngIf=\"toggleIcon.isToggled\"\n            class=\"adf-file-uploading-row__action adf-file-uploading-row__action--cancel\">\n            clear\n        </mat-icon>\n    </div>\n\n    <button mat-icon-button\n        adf-toggle-icon\n        #toggleIcon=\"toggleIcon\"\n        *ngIf=\"file.status === FileUploadStatus.Complete && !isUploadVersion()\"\n        (click)=\"onRemove(file)\"\n        class=\"adf-file-uploading-row__group\"\n        [attr.aria-label]=\"'ADF_FILE_UPLOAD.ARIA-LABEL.REMOVE_FILE' | translate: { file: file.name }\"\n        title=\"{{ 'ADF_FILE_UPLOAD.BUTTON.REMOVE_FILE' | translate }}\">\n\n        <mat-icon *ngIf=\"!toggleIcon.isToggled\"\n            class=\"adf-file-uploading-row__status adf-file-uploading-row__status--done\">\n            check_circle\n        </mat-icon>\n\n        <mat-icon *ngIf=\"toggleIcon.isToggled\"\n            class=\"adf-file-uploading-row__action adf-file-uploading-row__action--remove\">\n            remove_circle\n        </mat-icon>\n    </button>\n\n    <div\n        *ngIf=\"file.status === FileUploadStatus.Complete && isUploadVersion()\"\n        class=\"adf-file-uploading-row__file-version\"\n        [attr.aria-label]=\"'ADF_FILE_UPLOAD.STATUS.FILE_DONE_STATUS' | translate\"\n        role=\"status\"\n        >\n        <mat-icon\n            mat-list-icon\n            class=\"adf-file-uploading-row__status--done\">\n            check_circle\n        </mat-icon>\n    </div>\n\n    <button\n        adf-toggle-icon\n        #toggleIconCancel=\"toggleIcon\"\n        mat-icon-button\n        *ngIf=\"file.status === FileUploadStatus.Pending\"\n        (click)=\"onCancel(file)\"\n        data-automation-id=\"cancel-upload-queue\"\n        class=\"adf-file-uploading-row__group\"\n        title=\"{{ 'ADF_FILE_UPLOAD.BUTTON.CANCEL_FILE' | translate }}\"\n        [attr.aria-label]=\"'ADF_FILE_UPLOAD.ARIA-LABEL.CANCEL_FILE' | translate: { file: file.name }\">\n        <mat-icon\n            *ngIf=\"!toggleIconCancel.isToggled\"\n            class=\"adf-file-uploading-row__status adf-file-uploading-row__status--pending\">\n            schedule\n        </mat-icon>\n\n        <mat-icon\n            *ngIf=\"toggleIconCancel.isToggled\"\n            class=\"adf-file-uploading-row__action adf-file-uploading-row__action--remove\">\n            remove_circle\n        </mat-icon>\n    </button>\n\n    <div\n        tabindex=\"0\"\n        role=\"status\"\n        *ngIf=\"file.status === FileUploadStatus.Error\"\n        class=\"adf-file-uploading-row__block adf-file-uploading-row__status--error\">\n        <mat-icon mat-list-icon\n            [attr.aria-label]=\"'ADF_FILE_UPLOAD.ARIA-LABEL.UPLOAD_FILE_ERROR' | translate: { error: file.errorCode | adfFileUploadError }\"\n            [matTooltip]=\"file.errorCode | adfFileUploadError\">\n            report_problem\n        </mat-icon>\n    </div>\n\n    <div\n        tabindex=\"0\"\n        [attr.aria-label]=\"'ADF_FILE_UPLOAD.STATUS.FILE_CANCELED_STATUS' | translate\"\n        role=\"status\"\n        *ngIf=\"showCancelledStatus()\"\n        class=\"adf-file-uploading-row__block adf-file-uploading-row__status--cancelled\">\n        {{ 'ADF_FILE_UPLOAD.STATUS.FILE_CANCELED_STATUS' | translate }}\n    </div>\n</div>\n",
                encapsulation: ViewEncapsulation.None,
                styles: ["adf-file-uploading-list-row:not(:first-child){border-top:1px solid var(--adf-upload-border-color);display:block}.adf-file-uploading-row{align-items:center;cursor:default;display:flex;padding:.3em 1em}.adf-file-uploading-row:hover{background:#eee}.adf-file-uploading-row__name{flex:1 1 auto;overflow:hidden;padding:0 1em 0 .5em;text-overflow:ellipsis;white-space:nowrap}.adf-file-uploading-row__block,.adf-file-uploading-row__file-version,.adf-file-uploading-row__group{align-items:center;display:flex!important;height:40px;justify-content:flex-end;line-height:40px;min-width:100px}.adf-file-uploading-row__group--toggle{align-items:center;cursor:pointer;display:flex;height:40px;line-height:40px}.adf-file-uploading-row__status--done{color:var(--theme-accent-color)}.adf-file-uploading-row__action--cancel,.adf-file-uploading-row__action--remove,.adf-file-uploading-row__status--error{color:var(--theme-warn-color)}"]
            }]
    }], function () { return []; }, { cancel: [{
            type: Output
        }], remove: [{
            type: Output
        }], file: [{
            type: Input
        }] }); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class UploadFilesEvent {
    constructor(files, uploadService, successEmitter, errorEmitter) {
        this.files = files;
        this.uploadService = uploadService;
        this.successEmitter = successEmitter;
        this.errorEmitter = errorEmitter;
        this.isDefaultPrevented = false;
    }
    get defaultPrevented() {
        return this.isDefaultPrevented;
    }
    preventDefault() {
        this.isDefaultPrevented = true;
    }
    pauseUpload() {
        this.preventDefault();
    }
    resumeUpload() {
        if (this.files && this.files.length > 0) {
            this.uploadService.addToQueue(...this.files);
            this.uploadService.uploadFilesInTheQueue(this.successEmitter, this.errorEmitter);
        }
    }
}

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class UploadBase {
    constructor(uploadService, translationService, ngZone) {
        this.uploadService = uploadService;
        this.translationService = translationService;
        this.ngZone = ngZone;
        this.rootFolderId = '-root-';
        this.disabled = false;
        this.acceptedFilesType = '*';
        this.versioning = false;
        this.majorVersion = false;
        this.nodeType = 'cm:content';
        this.success = new EventEmitter();
        this.error = new EventEmitter();
        this.beginUpload = new EventEmitter();
        this.updateFileVersion = new EventEmitter();
        this.onDestroy$ = new Subject();
    }
    ngOnInit() {
        this.uploadService.fileUploadError
            .pipe(takeUntil(this.onDestroy$))
            .subscribe(error => this.error.emit(error));
    }
    ngOnDestroy() {
        this.onDestroy$.next(true);
        this.onDestroy$.complete();
    }
    uploadFiles(files) {
        const filteredFiles = files
            .map((file) => {
            return this.createFileModel(file, this.rootFolderId, (file.webkitRelativePath || '').replace(/\/[^\/]*$/, ''));
        });
        this.uploadQueue(filteredFiles);
    }
    uploadFilesInfo(files) {
        const filteredFiles = files
            .map((fileInfo) => {
            return this.createFileModel(fileInfo.file, this.rootFolderId, fileInfo.relativeFolder);
        });
        this.uploadQueue(filteredFiles);
    }
    uploadQueue(files) {
        const filteredFiles = files
            .filter(this.isFileAcceptable.bind(this))
            .filter(this.isFileSizeAcceptable.bind(this));
        this.ngZone.run(() => {
            const event = new UploadFilesEvent([...filteredFiles], this.uploadService, this.success, this.error);
            this.beginUpload.emit(event);
            if (!event.defaultPrevented) {
                if (filteredFiles.length > 0) {
                    this.uploadService.addToQueue(...filteredFiles);
                    this.uploadService.uploadFilesInTheQueue(this.success, this.error);
                }
            }
        });
    }
    isFileAcceptable(file) {
        if (this.acceptedFilesType === '*') {
            return true;
        }
        const allowedExtensions = this.acceptedFilesType
            .split(',')
            .map((ext) => ext.trim().replace(/^\./, ''));
        return allowedExtensions.indexOf(file.extension) !== -1;
    }
    createFileModel(file, parentId, path, id) {
        return new FileModel(file, {
            comment: this.comment,
            majorVersion: this.majorVersion,
            newVersion: this.versioning,
            parentId: parentId,
            path: path,
            nodeType: this.nodeType
        }, id);
    }
    isFileSizeAllowed(file) {
        let isFileSizeAllowed = true;
        if (this.isMaxFileSizeDefined()) {
            isFileSizeAllowed = this.isFileSizeCorrect(file);
        }
        return isFileSizeAllowed;
    }
    isMaxFileSizeDefined() {
        return this.maxFilesSize !== undefined && this.maxFilesSize !== null;
    }
    isFileSizeCorrect(file) {
        return this.maxFilesSize >= 0 && file.size <= this.maxFilesSize;
    }
    isFileSizeAcceptable(file) {
        let acceptableSize = true;
        if (!this.isFileSizeAllowed(file)) {
            acceptableSize = false;
            const message = this.translationService.instant('FILE_UPLOAD.MESSAGES.EXCEED_MAX_FILE_SIZE', { fileName: file.name });
            this.error.emit(message);
        }
        return acceptableSize;
    }
}
UploadBase.ɵfac = function UploadBase_Factory(t) { return new (t || UploadBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.UploadService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.TranslationService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
UploadBase.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: UploadBase, inputs: { rootFolderId: "rootFolderId", disabled: "disabled", acceptedFilesType: "acceptedFilesType", versioning: "versioning", majorVersion: "majorVersion", nodeType: "nodeType", maxFilesSize: "maxFilesSize", comment: "comment" }, outputs: { success: "success", error: "error", beginUpload: "beginUpload", updateFileVersion: "updateFileVersion" } });
UploadBase.ctorParameters = () => [
    { type: UploadService },
    { type: TranslationService },
    { type: NgZone }
];
UploadBase.propDecorators = {
    maxFilesSize: [{ type: Input }],
    rootFolderId: [{ type: Input }],
    disabled: [{ type: Input }],
    acceptedFilesType: [{ type: Input }],
    versioning: [{ type: Input }],
    majorVersion: [{ type: Input }],
    comment: [{ type: Input }],
    nodeType: [{ type: Input }],
    success: [{ type: Output }],
    error: [{ type: Output }],
    beginUpload: [{ type: Output }],
    updateFileVersion: [{ type: Output }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(UploadBase, [{
        type: Directive
    }], function () { return [{ type: ɵngcc1.UploadService }, { type: ɵngcc1.TranslationService }, { type: ɵngcc0.NgZone }]; }, { rootFolderId: [{
            type: Input
        }], disabled: [{
            type: Input
        }], acceptedFilesType: [{
            type: Input
        }], versioning: [{
            type: Input
        }], majorVersion: [{
            type: Input
        }], nodeType: [{
            type: Input
        }], success: [{
            type: Output
        }], error: [{
            type: Output
        }], beginUpload: [{
            type: Output
        }], updateFileVersion: [{
            type: Output
        }], maxFilesSize: [{
            type: Input
        }], comment: [{
            type: Input
        }] }); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class UploadButtonComponent extends UploadBase {
    constructor(uploadService, contentService, translationService, logService, ngZone) {
        super(uploadService, translationService, ngZone);
        this.uploadService = uploadService;
        this.contentService = contentService;
        this.translationService = translationService;
        this.logService = logService;
        this.ngZone = ngZone;
        this.uploadFolders = false;
        this.multipleFiles = false;
        this.tooltip = null;
        this.permissionEvent = new EventEmitter();
        this.hasAllowableOperations = false;
        this.permissionValue = new Subject();
    }
    ngOnInit() {
        this.permissionValue.subscribe((permission) => {
            this.hasAllowableOperations = permission;
        });
    }
    ngOnChanges(changes) {
        const rootFolderId = changes['rootFolderId'];
        if (rootFolderId && rootFolderId.currentValue) {
            this.checkPermission();
        }
    }
    isButtonDisabled() {
        return this.disabled ? true : undefined;
    }
    onFilesAdded($event) {
        const files = FileUtils.toFileArray($event.currentTarget.files);
        if (this.hasAllowableOperations) {
            this.uploadFiles(files);
        }
        else {
            this.permissionEvent.emit(new PermissionModel({ type: 'content', action: 'upload', permission: 'create' }));
        }
        $event.target.value = '';
    }
    onClickUploadButton() {
        if (this.file) {
            const files = [this.file];
            if (this.hasAllowableOperations) {
                this.uploadFiles(files);
            }
            else {
                this.permissionEvent.emit(new PermissionModel({ type: 'content', action: 'upload', permission: 'create' }));
            }
        }
    }
    onDirectoryAdded($event) {
        if (this.hasAllowableOperations) {
            const files = FileUtils.toFileArray($event.currentTarget.files);
            this.uploadFiles(files);
        }
        else {
            this.permissionEvent.emit(new PermissionModel({ type: 'content', action: 'upload', permission: 'create' }));
        }
        $event.target.value = '';
    }
    checkPermission() {
        if (this.rootFolderId) {
            const opts = {
                includeSource: true,
                include: ['allowableOperations']
            };
            this.contentService.getNode(this.rootFolderId, opts).subscribe((res) => this.permissionValue.next(this.nodeHasPermission(res.entry, AllowableOperationsEnum.CREATE)), (error) => {
                if (error && error.error) {
                    this.error.emit({ error: error.error.message });
                }
                else {
                    this.error.emit({ error: 'FILE_UPLOAD.BUTTON.PERMISSION_CHECK_ERROR' });
                }
            });
        }
    }
    nodeHasPermission(node, permission) {
        return this.contentService.hasAllowableOperations(node, permission);
    }
}
UploadButtonComponent.ɵfac = function UploadButtonComponent_Factory(t) { return new (t || UploadButtonComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.UploadService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ContentService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.TranslationService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.LogService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
UploadButtonComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: UploadButtonComponent, selectors: [["adf-upload-button"]], inputs: { uploadFolders: "uploadFolders", multipleFiles: "multipleFiles", tooltip: "tooltip", staticTitle: "staticTitle", file: "file" }, outputs: { permissionEvent: "permissionEvent" }, features: [ɵngcc0.ɵɵProvidersFeature([], [
            { provide: EXTENDIBLE_COMPONENT, useExisting: forwardRef(() => UploadButtonComponent) }
        ]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature], decls: 3, vars: 2, consts: [[1, "adf-upload-button-file-container"], [4, "ngIf"], ["mat-button", "", 3, "disabled", "click", 4, "ngIf"], ["mat-button", "", 3, "disabled", "click"], ["id", "upload-single-file-label", 4, "ngIf"], ["id", "upload-single-file-label-static", 4, "ngIf"], ["id", "upload-single-file", "data-automation-id", "upload-single-file", "name", "uploadFiles", 3, "type", "accept", "title", "change", "click"], ["uploadSingleFile", ""], ["id", "upload-single-file-label"], ["id", "upload-single-file-label-static"], ["id", "upload-multiple-file-label", 4, "ngIf"], ["id", "upload-multiple-file-label-static", 4, "ngIf"], ["id", "upload-multiple-files", "data-automation-id", "upload-multiple-files", "type", "file", "name", "uploadFiles", "multiple", "multiple", 3, "accept", "title", "change"], ["uploadMultipleFiles", ""], ["id", "upload-multiple-file-label"], ["id", "upload-multiple-file-label-static"], ["id", "uploadFolder-label", 4, "ngIf"], ["id", "uploadFolder-label-static", 4, "ngIf"], ["id", "uploadFolder", "data-automation-id", "uploadFolder", "type", "file", "name", "uploadFiles", "multiple", "multiple", "webkitdirectory", "", "directory", "", 3, "accept", "title", "change"], ["uploadFolders", ""], ["id", "uploadFolder-label"], ["id", "uploadFolder-label-static"]], template: function UploadButtonComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "form", 0);
        ɵngcc0.ɵɵtemplate(1, UploadButtonComponent_div_1_Template, 3, 2, "div", 1);
        ɵngcc0.ɵɵtemplate(2, UploadButtonComponent_div_2_Template, 8, 6, "div", 1);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.uploadFolders);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.uploadFolders);
    } }, directives: [ɵngcc9.ɵangular_packages_forms_forms_y, ɵngcc9.NgControlStatusGroup, ɵngcc9.NgForm, ɵngcc4.NgIf, ɵngcc5.MatButton, ɵngcc6.MatIcon], pipes: [ɵngcc8.TranslatePipe], styles: [_c15], encapsulation: 2 });
UploadButtonComponent.ctorParameters = () => [
    { type: UploadService },
    { type: ContentService },
    { type: TranslationService },
    { type: LogService },
    { type: NgZone }
];
UploadButtonComponent.propDecorators = {
    uploadFolders: [{ type: Input }],
    multipleFiles: [{ type: Input }],
    staticTitle: [{ type: Input }],
    tooltip: [{ type: Input }],
    file: [{ type: Input }],
    permissionEvent: [{ type: Output }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(UploadButtonComponent, [{
        type: Component,
        args: [{
                selector: 'adf-upload-button',
                template: "<form class=\"adf-upload-button-file-container\">\n    <!--Files Upload-->\n    <div *ngIf=\"!uploadFolders\">\n\n        <!--Single Files Upload-->\n        <button *ngIf=\"!multipleFiles\"\n            [disabled]=\"isButtonDisabled()\"\n            mat-button\n            (click)=\"uploadSingleFile.click()\">\n            <mat-icon>file_upload</mat-icon>\n            <span id=\"upload-single-file-label\"\n                *ngIf=\"!staticTitle\">{{ 'FILE_UPLOAD.BUTTON.UPLOAD_FILE' | translate }}</span>\n            <span id=\"upload-single-file-label-static\"\n                *ngIf=\"staticTitle\">{{ staticTitle }}</span>\n            <input #uploadSingleFile\n                id=\"upload-single-file\"\n                data-automation-id=\"upload-single-file\"\n                [type]=\"file ? 'button' : 'file'\"\n                name=\"uploadFiles\"\n                accept=\"{{acceptedFilesType}}\"\n                [attr.disabled]=\"isButtonDisabled()\"\n                [title]=\"tooltip\"\n                (change)=\"onFilesAdded($event)\"\n                (click)=\"onClickUploadButton()\">\n        </button>\n\n        <!--Multiple Files Upload-->\n        <button *ngIf=\"multipleFiles\"\n            [disabled]=\"isButtonDisabled()\"\n            mat-button\n            (click)=\"uploadMultipleFiles.click()\">\n            <mat-icon>file_upload</mat-icon>\n\n            <span id=\"upload-multiple-file-label\"\n                *ngIf=\"!staticTitle\">{{ 'FILE_UPLOAD.BUTTON.UPLOAD_FILE' | translate }}</span>\n            <span\n                id=\"upload-multiple-file-label-static\"\n                *ngIf=\"staticTitle\">{{ staticTitle }}</span>\n            <input #uploadMultipleFiles\n                id=\"upload-multiple-files\"\n                data-automation-id=\"upload-multiple-files\"\n                type=\"file\"\n                name=\"uploadFiles\"\n                multiple=\"multiple\"\n                accept=\"{{acceptedFilesType}}\"\n                [attr.disabled]=\"isButtonDisabled()\"\n                [title]=\"tooltip\"\n                (change)=\"onFilesAdded($event)\">\n        </button>\n    </div>\n\n    <!--Folders Upload-->\n    <div *ngIf=\"uploadFolders\">\n        <button\n            [disabled]=\"isButtonDisabled()\"\n            mat-button\n            (click)=\"uploadFolders.click()\">\n            <mat-icon>file_upload</mat-icon>\n            <span id=\"uploadFolder-label\"\n                *ngIf=\"!staticTitle\">{{ 'FILE_UPLOAD.BUTTON.UPLOAD_FOLDER' | translate }}</span>\n            <span id=\"uploadFolder-label-static\"\n                *ngIf=\"staticTitle\">{{ staticTitle }}</span>\n            <input #uploadFolders\n                id=\"uploadFolder\"\n                data-automation-id=\"uploadFolder\"\n                type=\"file\"\n                name=\"uploadFiles\"\n                multiple=\"multiple\"\n                accept=\"{{acceptedFilesType}}\"\n                webkitdirectory directory\n                [attr.disabled]=\"isButtonDisabled()\"\n                [title]=\"tooltip\"\n                (change)=\"onDirectoryAdded($event)\">\n        </button>\n    </div>\n</form>\n",
                viewProviders: [
                    { provide: EXTENDIBLE_COMPONENT, useExisting: forwardRef(() => UploadButtonComponent) }
                ],
                encapsulation: ViewEncapsulation.None,
                styles: [".adf-upload-button-file-container input{display:none}"]
            }]
    }], function () { return [{ type: ɵngcc1.UploadService }, { type: ɵngcc1.ContentService }, { type: ɵngcc1.TranslationService }, { type: ɵngcc1.LogService }, { type: ɵngcc0.NgZone }]; }, { uploadFolders: [{
            type: Input
        }], multipleFiles: [{
            type: Input
        }], tooltip: [{
            type: Input
        }], permissionEvent: [{
            type: Output
        }], staticTitle: [{
            type: Input
        }], file: [{
            type: Input
        }] }); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class UploadVersionButtonComponent extends UploadButtonComponent {
    createFileModel(file) {
        const fileModel = super.createFileModel(file, this.rootFolderId, (file.webkitRelativePath || '').replace(/\/[^\/]*$/, ''), this.node.id);
        if (!this.isFileAcceptable(fileModel)) {
            const message = this.translationService.instant('FILE_UPLOAD.VERSION.MESSAGES.INCOMPATIBLE_VERSION');
            this.error.emit(message);
        }
        return fileModel;
    }
    ngOnInit() {
        super.ngOnInit();
        this.checkPermission();
    }
    checkPermission() {
        this.permissionValue.next(this.nodeHasPermission(this.node, AllowableOperationsEnum.UPDATE));
    }
}
UploadVersionButtonComponent.ɵfac = function UploadVersionButtonComponent_Factory(t) { return ɵUploadVersionButtonComponent_BaseFactory(t || UploadVersionButtonComponent); };
UploadVersionButtonComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: UploadVersionButtonComponent, selectors: [["adf-upload-version-button"]], hostAttrs: [1, "adf-upload-version-button"], inputs: { node: "node" }, features: [ɵngcc0.ɵɵProvidersFeature([], [
            { provide: EXTENDIBLE_COMPONENT, useExisting: forwardRef(() => UploadVersionButtonComponent) }
        ]), ɵngcc0.ɵɵInheritDefinitionFeature], decls: 3, vars: 2, consts: [[1, "adf-upload-button-file-container"], [4, "ngIf"], ["mat-button", "", 3, "disabled", "click", 4, "ngIf"], ["mat-button", "", 3, "disabled", "click"], ["id", "upload-single-file-label", 4, "ngIf"], ["id", "upload-single-file-label-static", 4, "ngIf"], ["id", "upload-single-file", "data-automation-id", "upload-single-file", "name", "uploadFiles", 3, "type", "accept", "title", "change", "click"], ["uploadSingleFile", ""], ["id", "upload-single-file-label"], ["id", "upload-single-file-label-static"], ["id", "upload-multiple-file-label", 4, "ngIf"], ["id", "upload-multiple-file-label-static", 4, "ngIf"], ["id", "upload-multiple-files", "data-automation-id", "upload-multiple-files", "type", "file", "name", "uploadFiles", "multiple", "multiple", 3, "accept", "title", "change"], ["uploadMultipleFiles", ""], ["id", "upload-multiple-file-label"], ["id", "upload-multiple-file-label-static"], ["id", "uploadFolder-label", 4, "ngIf"], ["id", "uploadFolder-label-static", 4, "ngIf"], ["id", "uploadFolder", "data-automation-id", "uploadFolder", "type", "file", "name", "uploadFiles", "multiple", "multiple", "webkitdirectory", "", "directory", "", 3, "accept", "title", "change"], ["uploadFolders", ""], ["id", "uploadFolder-label"], ["id", "uploadFolder-label-static"]], template: function UploadVersionButtonComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "form", 0);
        ɵngcc0.ɵɵtemplate(1, UploadVersionButtonComponent_div_1_Template, 3, 2, "div", 1);
        ɵngcc0.ɵɵtemplate(2, UploadVersionButtonComponent_div_2_Template, 8, 6, "div", 1);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.uploadFolders);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.uploadFolders);
    } }, directives: [ɵngcc9.ɵangular_packages_forms_forms_y, ɵngcc9.NgControlStatusGroup, ɵngcc9.NgForm, ɵngcc4.NgIf, ɵngcc5.MatButton, ɵngcc6.MatIcon], pipes: [ɵngcc8.TranslatePipe], styles: [_c15], encapsulation: 2 });
UploadVersionButtonComponent.propDecorators = {
    node: [{ type: Input }]
};
const ɵUploadVersionButtonComponent_BaseFactory = /*@__PURE__*/ ɵngcc0.ɵɵgetInheritedFactory(UploadVersionButtonComponent);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(UploadVersionButtonComponent, [{
        type: Component,
        args: [{
                selector: 'adf-upload-version-button',
                template: "<form class=\"adf-upload-button-file-container\">\n    <!--Files Upload-->\n    <div *ngIf=\"!uploadFolders\">\n\n        <!--Single Files Upload-->\n        <button *ngIf=\"!multipleFiles\"\n            [disabled]=\"isButtonDisabled()\"\n            mat-button\n            (click)=\"uploadSingleFile.click()\">\n            <mat-icon>file_upload</mat-icon>\n            <span id=\"upload-single-file-label\"\n                *ngIf=\"!staticTitle\">{{ 'FILE_UPLOAD.BUTTON.UPLOAD_FILE' | translate }}</span>\n            <span id=\"upload-single-file-label-static\"\n                *ngIf=\"staticTitle\">{{ staticTitle }}</span>\n            <input #uploadSingleFile\n                id=\"upload-single-file\"\n                data-automation-id=\"upload-single-file\"\n                [type]=\"file ? 'button' : 'file'\"\n                name=\"uploadFiles\"\n                accept=\"{{acceptedFilesType}}\"\n                [attr.disabled]=\"isButtonDisabled()\"\n                [title]=\"tooltip\"\n                (change)=\"onFilesAdded($event)\"\n                (click)=\"onClickUploadButton()\">\n        </button>\n\n        <!--Multiple Files Upload-->\n        <button *ngIf=\"multipleFiles\"\n            [disabled]=\"isButtonDisabled()\"\n            mat-button\n            (click)=\"uploadMultipleFiles.click()\">\n            <mat-icon>file_upload</mat-icon>\n\n            <span id=\"upload-multiple-file-label\"\n                *ngIf=\"!staticTitle\">{{ 'FILE_UPLOAD.BUTTON.UPLOAD_FILE' | translate }}</span>\n            <span\n                id=\"upload-multiple-file-label-static\"\n                *ngIf=\"staticTitle\">{{ staticTitle }}</span>\n            <input #uploadMultipleFiles\n                id=\"upload-multiple-files\"\n                data-automation-id=\"upload-multiple-files\"\n                type=\"file\"\n                name=\"uploadFiles\"\n                multiple=\"multiple\"\n                accept=\"{{acceptedFilesType}}\"\n                [attr.disabled]=\"isButtonDisabled()\"\n                [title]=\"tooltip\"\n                (change)=\"onFilesAdded($event)\">\n        </button>\n    </div>\n\n    <!--Folders Upload-->\n    <div *ngIf=\"uploadFolders\">\n        <button\n            [disabled]=\"isButtonDisabled()\"\n            mat-button\n            (click)=\"uploadFolders.click()\">\n            <mat-icon>file_upload</mat-icon>\n            <span id=\"uploadFolder-label\"\n                *ngIf=\"!staticTitle\">{{ 'FILE_UPLOAD.BUTTON.UPLOAD_FOLDER' | translate }}</span>\n            <span id=\"uploadFolder-label-static\"\n                *ngIf=\"staticTitle\">{{ staticTitle }}</span>\n            <input #uploadFolders\n                id=\"uploadFolder\"\n                data-automation-id=\"uploadFolder\"\n                type=\"file\"\n                name=\"uploadFiles\"\n                multiple=\"multiple\"\n                accept=\"{{acceptedFilesType}}\"\n                webkitdirectory directory\n                [attr.disabled]=\"isButtonDisabled()\"\n                [title]=\"tooltip\"\n                (change)=\"onDirectoryAdded($event)\">\n        </button>\n    </div>\n</form>\n",
                viewProviders: [
                    { provide: EXTENDIBLE_COMPONENT, useExisting: forwardRef(() => UploadVersionButtonComponent) }
                ],
                encapsulation: ViewEncapsulation.None,
                host: { class: 'adf-upload-version-button' },
                styles: [".adf-upload-button-file-container input{display:none}"]
            }]
    }], null, { node: [{
            type: Input
        }] }); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class UploadDragAreaComponent extends UploadBase {
    constructor(uploadService, translationService, notificationService, contentService, ngZone) {
        super(uploadService, translationService, ngZone);
        this.uploadService = uploadService;
        this.translationService = translationService;
        this.notificationService = notificationService;
        this.contentService = contentService;
        this.ngZone = ngZone;
    }
    onFilesDropped(files) {
        if (!this.disabled && files.length) {
            this.uploadFiles(files);
        }
    }
    onFolderEntityDropped(folder) {
        if (!this.disabled && folder.isDirectory) {
            FileUtils.flatten(folder).then((filesInfo) => {
                this.uploadFilesInfo(filesInfo);
            });
        }
    }
    showUndoNotificationBar(latestFilesAdded) {
        let messageTranslate, actionTranslate;
        messageTranslate = this.translationService.get('FILE_UPLOAD.MESSAGES.PROGRESS');
        actionTranslate = this.translationService.get('FILE_UPLOAD.ACTION.UNDO');
        this.notificationService.openSnackMessageAction(messageTranslate.value, actionTranslate.value, 3000).onAction().subscribe(() => {
            this.uploadService.cancelUpload(...latestFilesAdded);
        });
    }
    isDroppable() {
        return !this.disabled;
    }
    onUploadFiles(event) {
        event.stopPropagation();
        event.preventDefault();
        const isAllowed = this.isTargetNodeFolder(event) ?
            this.contentService.hasAllowableOperations(event.detail.data.obj.entry, AllowableOperationsEnum.CREATE)
            : this.contentService.hasAllowableOperations(event.detail.data.obj.entry, AllowableOperationsEnum.UPDATE);
        if (isAllowed) {
            if (!this.isTargetNodeFolder(event) && event.detail.files.length === 1) {
                this.updateFileVersion.emit(event);
            }
            else {
                const fileInfo = event.detail.files;
                if (this.isTargetNodeFolder(event)) {
                    const destinationFolderName = event.detail.data.obj.entry.name;
                    fileInfo.map((file) => file.relativeFolder = destinationFolderName ? destinationFolderName.concat(file.relativeFolder) : file.relativeFolder);
                }
                if (fileInfo && fileInfo.length > 0) {
                    this.uploadFilesInfo(fileInfo);
                }
            }
        }
    }
    isTargetNodeFolder(event) {
        return event.detail.data.obj && event.detail.data.obj.entry.isFolder;
    }
}
UploadDragAreaComponent.ɵfac = function UploadDragAreaComponent_Factory(t) { return new (t || UploadDragAreaComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.UploadService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.TranslationService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NotificationService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ContentService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
UploadDragAreaComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: UploadDragAreaComponent, selectors: [["adf-upload-drag-area"]], hostAttrs: [1, "adf-upload-drag-area"], features: [ɵngcc0.ɵɵProvidersFeature([], [
            { provide: EXTENDIBLE_COMPONENT, useExisting: forwardRef(() => UploadDragAreaComponent) }
        ]), ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c16, decls: 3, vars: 1, consts: [["dropzone", "", "webkitdropzone", "*", 1, "adf-upload-border", 3, "adf-file-draggable", "filesDropped", "folderEntityDropped", "upload-files"], ["droparea", ""]], template: function UploadDragAreaComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵelementStart(0, "div", 0, 1);
        ɵngcc0.ɵɵlistener("filesDropped", function UploadDragAreaComponent_Template_div_filesDropped_0_listener($event) { return ctx.onFilesDropped($event); })("folderEntityDropped", function UploadDragAreaComponent_Template_div_folderEntityDropped_0_listener($event) { return ctx.onFolderEntityDropped($event); })("upload-files", function UploadDragAreaComponent_Template_div_upload_files_0_listener($event) { return ctx.onUploadFiles($event); });
        ɵngcc0.ɵɵprojection(2);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("adf-file-draggable", ctx.isDroppable());
    } }, directives: function () { return [FileDraggableDirective]; }, styles: ["adf-upload-drag-area{display:flex;flex:1;flex-direction:column;height:100%;min-height:0;overflow:hidden}adf-upload-drag-area .adf-upload-border{box-sizing:border-box;display:flex;flex-direction:column;height:100%;min-height:0;overflow:hidden;text-align:unset;vertical-align:unset;width:100%}adf-upload-drag-area .adf-file-draggable__input-focus{border:1px dashed #2196f3;color:#2196f3}adf-upload-drag-area .adf-file-draggable__input-focus adf-document-list{background:#e3f2fd}adf-upload-drag-area .adf-file-draggable__input-focus adf-document-list adf-datatable>table{background:inherit}adf-upload-drag-area .adf-upload__dragging{background:#e3f2fd;color:#2196f3}adf-upload-drag-area .adf-upload__dragging td{border-bottom:1px dashed #2196f3!important;border-top:1px dashed #2196f3!important}adf-upload-drag-area .adf-upload__dragging td:first-child{border-left:1px dashed #2196f3!important}adf-upload-drag-area .adf-upload__dragging td:last-child{border-right:1px dashed #2196f3!important}adf-upload-drag-area:first-child>div adf-upload-drag-area .adf-file-draggable__input-focus{border:1px dashed #2196f3!important;color:#2196f3;margin-left:0!important}adf-upload-drag-area:first-child .adf-upload-border{text-align:inherit!important;vertical-align:inherit!important}adf-upload-drag-area:first-child .adf-file-draggable__input-focus{border:1px dashed #2196f3!important;color:#2196f3!important;margin-left:0!important}adf-upload-drag-area:first-child .adf-file-draggable__input-focus adf-upload-drag-area>div{border:1px dashed #2196f3!important;color:#2196f3;margin-left:0!important}"], encapsulation: 2 });
UploadDragAreaComponent.ctorParameters = () => [
    { type: UploadService },
    { type: TranslationService },
    { type: NotificationService },
    { type: ContentService },
    { type: NgZone }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(UploadDragAreaComponent, [{
        type: Component,
        args: [{
                selector: 'adf-upload-drag-area',
                template: "<div [adf-file-draggable]=\"isDroppable()\" class=\"adf-upload-border\"\n     (filesDropped)=\"onFilesDropped($event)\"\n     (folderEntityDropped)=\"onFolderEntityDropped($event)\"\n     (upload-files)=\"onUploadFiles($any($event))\"\n     dropzone=\"\" webkitdropzone=\"*\" #droparea>\n    <ng-content></ng-content>\n</div>\n",
                host: { 'class': 'adf-upload-drag-area' },
                viewProviders: [
                    { provide: EXTENDIBLE_COMPONENT, useExisting: forwardRef(() => UploadDragAreaComponent) }
                ],
                encapsulation: ViewEncapsulation.None,
                styles: ["adf-upload-drag-area{display:flex;flex:1;flex-direction:column;height:100%;min-height:0;overflow:hidden}adf-upload-drag-area .adf-upload-border{box-sizing:border-box;display:flex;flex-direction:column;height:100%;min-height:0;overflow:hidden;text-align:unset;vertical-align:unset;width:100%}adf-upload-drag-area .adf-file-draggable__input-focus{border:1px dashed #2196f3;color:#2196f3}adf-upload-drag-area .adf-file-draggable__input-focus adf-document-list{background:#e3f2fd}adf-upload-drag-area .adf-file-draggable__input-focus adf-document-list adf-datatable>table{background:inherit}adf-upload-drag-area .adf-upload__dragging{background:#e3f2fd;color:#2196f3}adf-upload-drag-area .adf-upload__dragging td{border-bottom:1px dashed #2196f3!important;border-top:1px dashed #2196f3!important}adf-upload-drag-area .adf-upload__dragging td:first-child{border-left:1px dashed #2196f3!important}adf-upload-drag-area .adf-upload__dragging td:last-child{border-right:1px dashed #2196f3!important}adf-upload-drag-area:first-child>div adf-upload-drag-area .adf-file-draggable__input-focus{border:1px dashed #2196f3!important;color:#2196f3;margin-left:0!important}adf-upload-drag-area:first-child .adf-upload-border{text-align:inherit!important;vertical-align:inherit!important}adf-upload-drag-area:first-child .adf-file-draggable__input-focus{border:1px dashed #2196f3!important;color:#2196f3!important;margin-left:0!important}adf-upload-drag-area:first-child .adf-file-draggable__input-focus adf-upload-drag-area>div{border:1px dashed #2196f3!important;color:#2196f3;margin-left:0!important}"]
            }]
    }], function () { return [{ type: ɵngcc1.UploadService }, { type: ɵngcc1.TranslationService }, { type: ɵngcc1.NotificationService }, { type: ɵngcc1.ContentService }, { type: ɵngcc0.NgZone }]; }, null); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class FileUploadErrorPipe {
    constructor(translation) {
        this.translation = translation;
    }
    transform(errorCode) {
        return this.translation.instant(`FILE_UPLOAD.ERRORS.${errorCode || 'GENERIC'}`);
    }
}
FileUploadErrorPipe.ɵfac = function FileUploadErrorPipe_Factory(t) { return new (t || FileUploadErrorPipe)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.TranslationService)); };
FileUploadErrorPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "adfFileUploadError", type: FileUploadErrorPipe, pure: true });
FileUploadErrorPipe.ctorParameters = () => [
    { type: TranslationService }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FileUploadErrorPipe, [{
        type: Pipe,
        args: [{
                name: 'adfFileUploadError',
                pure: true
            }]
    }], function () { return [{ type: ɵngcc1.TranslationService }]; }, null); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class FileDraggableDirective {
    constructor(el, ngZone) {
        this.ngZone = ngZone;
        this.enabled = true;
        this.filesDropped = new EventEmitter();
        this.folderEntityDropped = new EventEmitter();
        this.cssClassName = 'adf-file-draggable__input-focus';
        this.element = el.nativeElement;
    }
    ngOnInit() {
        this.ngZone.runOutsideAngular(() => {
            this.element.addEventListener('dragenter', this.onDragEnter.bind(this));
            this.element.addEventListener('dragover', this.onDragOver.bind(this));
            this.element.addEventListener('dragleave', this.onDragLeave.bind(this));
            this.element.addEventListener('drop', this.onDropFiles.bind(this));
        });
    }
    ngOnDestroy() {
        this.element.removeEventListener('dragenter', this.onDragEnter);
        this.element.removeEventListener('dragover', this.onDragOver);
        this.element.removeEventListener('dragleave', this.onDragLeave);
        this.element.removeEventListener('drop', this.onDropFiles);
    }
    onDropFiles(event) {
        if (this.enabled && !event.defaultPrevented) {
            this.preventDefault(event);
            const items = event.dataTransfer.items;
            if (items) {
                const files = [];
                for (let i = 0; i < items.length; i++) {
                    if (items[i].webkitGetAsEntry) {
                        const item = items[i].webkitGetAsEntry();
                        if (item) {
                            if (item.isFile) {
                                const file = items[i].getAsFile();
                                if (file) {
                                    files.push(file);
                                }
                            }
                            else if (item.isDirectory) {
                                this.folderEntityDropped.emit(item);
                            }
                        }
                    }
                }
                if (files.length > 0) {
                    this.filesDropped.emit(files);
                }
            }
            else {
                const files = FileUtils.toFileArray(event.dataTransfer.files);
                this.filesDropped.emit(files);
            }
            this.element.classList.remove(this.cssClassName);
        }
    }
    onDragEnter(event) {
        if (this.enabled && !event.defaultPrevented) {
            this.preventDefault(event);
            event.dataTransfer.dropEffect = 'copy';
            this.element.classList.add(this.cssClassName);
        }
    }
    onDragLeave(event) {
        if (this.enabled && !event.defaultPrevented) {
            this.preventDefault(event);
            this.element.classList.remove(this.cssClassName);
        }
    }
    onDragOver(event) {
        if (this.enabled && !event.defaultPrevented) {
            this.preventDefault(event);
            event.dataTransfer.dropEffect = 'copy';
            this.element.classList.add(this.cssClassName);
        }
    }
    preventDefault(event) {
        event.stopPropagation();
        event.preventDefault();
    }
}
FileDraggableDirective.ɵfac = function FileDraggableDirective_Factory(t) { return new (t || FileDraggableDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
FileDraggableDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: FileDraggableDirective, selectors: [["", "adf-file-draggable", ""]], inputs: { enabled: ["adf-file-draggable", "enabled"] }, outputs: { filesDropped: "filesDropped", folderEntityDropped: "folderEntityDropped" } });
FileDraggableDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: NgZone }
];
FileDraggableDirective.propDecorators = {
    enabled: [{ type: Input, args: ['adf-file-draggable',] }],
    filesDropped: [{ type: Output }],
    folderEntityDropped: [{ type: Output }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FileDraggableDirective, [{
        type: Directive,
        args: [{
                selector: '[adf-file-draggable]'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, { enabled: [{
            type: Input,
            args: ['adf-file-draggable']
        }], filesDropped: [{
            type: Output
        }], folderEntityDropped: [{
            type: Output
        }] }); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class ToggleIconDirective {
    constructor() {
        this.isFocus = false;
        this.toggle = false;
    }
    onMouseEnter() {
        if (!this.isFocus) {
            this.toggle = true;
        }
    }
    onMouseLeave() {
        if (!this.isFocus) {
            this.toggle = false;
        }
        if (this.isFocus && this.toggle) {
            this.isFocus = false;
            this.toggle = false;
        }
    }
    onFocus() {
        this.isFocus = true;
        this.toggle = true;
    }
    onBlur() {
        this.isFocus = false;
        this.toggle = false;
    }
    get isToggled() {
        return this.toggle;
    }
    get isFocused() {
        return this.isFocus;
    }
}
ToggleIconDirective.ɵfac = function ToggleIconDirective_Factory(t) { return new (t || ToggleIconDirective)(); };
ToggleIconDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ToggleIconDirective, selectors: [["", "adf-toggle-icon", ""]], hostBindings: function ToggleIconDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("mouseenter", function ToggleIconDirective_mouseenter_HostBindingHandler() { return ctx.onMouseEnter(); })("mouseleave", function ToggleIconDirective_mouseleave_HostBindingHandler() { return ctx.onMouseLeave(); })("focus", function ToggleIconDirective_focus_HostBindingHandler() { return ctx.onFocus(); })("blur", function ToggleIconDirective_blur_HostBindingHandler() { return ctx.onBlur(); });
    } }, exportAs: ["toggleIcon"] });
ToggleIconDirective.propDecorators = {
    onMouseEnter: [{ type: HostListener, args: ['mouseenter',] }],
    onMouseLeave: [{ type: HostListener, args: ['mouseleave',] }],
    onFocus: [{ type: HostListener, args: ['focus',] }],
    onBlur: [{ type: HostListener, args: ['blur',] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ToggleIconDirective, [{
        type: Directive,
        args: [{
                selector: '[adf-toggle-icon]',
                exportAs: 'toggleIcon'
            }]
    }], function () { return []; }, { onMouseEnter: [{
            type: HostListener,
            args: ['mouseenter']
        }], onMouseLeave: [{
            type: HostListener,
            args: ['mouseleave']
        }], onFocus: [{
            type: HostListener,
            args: ['focus']
        }], onBlur: [{
            type: HostListener,
            args: ['blur']
        }] }); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class UploadModule {
}
UploadModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: UploadModule });
UploadModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function UploadModule_Factory(t) { return new (t || UploadModule)(); }, imports: [[
            CoreModule,
            CommonModule,
            MaterialModule,
            A11yModule
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(UploadModule, { declarations: function () { return [FileDraggableDirective, UploadDragAreaComponent, UploadButtonComponent, UploadVersionButtonComponent, FileUploadingDialogComponent, FileUploadingListComponent, FileUploadingListRowComponent, FileUploadErrorPipe, ToggleIconDirective]; }, imports: function () { return [CoreModule,
        CommonModule, MaterialModule, A11yModule]; }, exports: function () { return [FileDraggableDirective, UploadDragAreaComponent, UploadButtonComponent, UploadVersionButtonComponent, FileUploadingDialogComponent, FileUploadingListComponent, FileUploadingListRowComponent, FileUploadErrorPipe, ToggleIconDirective]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(UploadModule, [{
        type: NgModule,
        args: [{
                imports: [
                    CoreModule,
                    CommonModule,
                    MaterialModule,
                    A11yModule
                ],
                declarations: [
                    FileDraggableDirective,
                    UploadDragAreaComponent,
                    UploadButtonComponent,
                    UploadVersionButtonComponent,
                    FileUploadingDialogComponent,
                    FileUploadingListComponent,
                    FileUploadingListRowComponent,
                    FileUploadErrorPipe,
                    ToggleIconDirective
                ],
                exports: [
                    FileDraggableDirective,
                    UploadDragAreaComponent,
                    UploadButtonComponent,
                    UploadVersionButtonComponent,
                    FileUploadingDialogComponent,
                    FileUploadingListComponent,
                    FileUploadingListRowComponent,
                    FileUploadErrorPipe,
                    ToggleIconDirective
                ]
            }]
    }], null, null); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class SearchComponent {
    constructor(searchService, _elementRef) {
        this.searchService = searchService;
        this._elementRef = _elementRef;
        this.displayWith = null;
        this.maxResults = 20;
        this.skipResults = 0;
        this.searchTerm = '';
        this.resultLoaded = new EventEmitter();
        this.error = new EventEmitter();
        this.showPanel = false;
        this._isOpen = false;
        this.keyPressedStream = new Subject();
        this._classList = {};
        this.onDestroy$ = new Subject();
        this.keyPressedStream
            .pipe(debounceTime(200), takeUntil(this.onDestroy$))
            .subscribe(searchedWord => {
            this.loadSearchResults(searchedWord);
        });
        searchService.dataLoaded
            .pipe(takeUntil(this.onDestroy$))
            .subscribe(nodePaging => this.onSearchDataLoaded(nodePaging), error => this.onSearchDataError(error));
    }
    set classList(classList) {
        if (classList && classList.length) {
            classList.split(' ').forEach((className) => this._classList[className.trim()] = true);
            this._elementRef.nativeElement.className = '';
        }
    }
    get isOpen() {
        return this._isOpen && this.showPanel;
    }
    set isOpen(value) {
        this._isOpen = value;
    }
    ngAfterContentInit() {
        this.setVisibility();
    }
    ngOnChanges(changes) {
        if (changes.searchTerm && changes.searchTerm.currentValue) {
            this.loadSearchResults(changes.searchTerm.currentValue);
        }
    }
    ngOnDestroy() {
        this.onDestroy$.next(true);
        this.onDestroy$.complete();
    }
    resetResults() {
        this.cleanResults();
        this.setVisibility();
    }
    reload() {
        this.loadSearchResults(this.searchTerm);
    }
    cleanResults() {
        if (this.results) {
            this.results = {};
        }
    }
    loadSearchResults(searchTerm) {
        this.resetResults();
        if (searchTerm) {
            this.searchService.search(searchTerm, this.maxResults, this.skipResults).subscribe((result) => this.onSearchDataLoaded(result), (err) => this.onSearchDataError(err));
        }
        else {
            this.cleanResults();
        }
    }
    onSearchDataLoaded(resultSetPaging) {
        if (resultSetPaging) {
            this.results = resultSetPaging;
            this.resultLoaded.emit(this.results);
            this.isOpen = true;
            this.setVisibility();
        }
    }
    onSearchDataError(error) {
        if (error && error.status !== 400) {
            this.results = null;
            this.error.emit(error);
        }
    }
    hidePanel() {
        if (this.isOpen) {
            this._classList['adf-search-show'] = false;
            this._classList['adf-search-hide'] = true;
            this.isOpen = false;
        }
    }
    setVisibility() {
        this.showPanel = !!this.results && !!this.results.list;
        this._classList['adf-search-show'] = this.showPanel;
        this._classList['adf-search-hide'] = !this.showPanel;
    }
}
SearchComponent.ɵfac = function SearchComponent_Factory(t) { return new (t || SearchComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.SearchService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
SearchComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: SearchComponent, selectors: [["adf-search"]], contentQueries: function SearchComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, TemplateRef, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.template = _t.first);
    } }, viewQuery: function SearchComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵstaticViewQuery(_c17, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.panel = _t.first);
    } }, hostAttrs: [1, "adf-search"], inputs: { displayWith: "displayWith", maxResults: "maxResults", skipResults: "skipResults", searchTerm: "searchTerm", classList: ["class", "classList"] }, outputs: { resultLoaded: "resultLoaded", error: "error" }, exportAs: ["searchAutocomplete"], features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 3, vars: 5, consts: [["role", "listbox", "id", "adf-search-results-content", 3, "ngClass"], ["panel", ""], [3, "ngTemplateOutlet", "ngTemplateOutletContext"]], template: function SearchComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0, 1);
        ɵngcc0.ɵɵtemplate(2, SearchComponent_ng_template_2_Template, 0, 0, "ng-template", 2);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngClass", ctx._classList);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx.template)("ngTemplateOutletContext", ɵngcc0.ɵɵpureFunction1(3, _c18, ctx.results));
    } }, directives: [ɵngcc4.NgClass, ɵngcc4.NgTemplateOutlet], styles: [".adf-search-hide{visibility:hidden}.adf-search-show{visibility:visible}"], encapsulation: 2 });
SearchComponent.ctorParameters = () => [
    { type: SearchService },
    { type: ElementRef }
];
SearchComponent.propDecorators = {
    panel: [{ type: ViewChild, args: ['panel', { static: true },] }],
    template: [{ type: ContentChild, args: [TemplateRef,] }],
    displayWith: [{ type: Input }],
    maxResults: [{ type: Input }],
    skipResults: [{ type: Input }],
    searchTerm: [{ type: Input }],
    classList: [{ type: Input, args: ['class',] }],
    resultLoaded: [{ type: Output }],
    error: [{ type: Output }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SearchComponent, [{
        type: Component,
        args: [{
                selector: 'adf-search',
                template: "<div role=\"listbox\" id=\"adf-search-results-content\" [ngClass]=\"_classList\" #panel>\n    <ng-template\n        [ngTemplateOutlet]=\"template\"\n        [ngTemplateOutletContext]=\"{ $implicit: results }\">\n    </ng-template>\n</div>\n",
                encapsulation: ViewEncapsulation.None,
                preserveWhitespaces: false,
                exportAs: 'searchAutocomplete',
                host: {
                    'class': 'adf-search'
                },
                styles: [".adf-search-hide{visibility:hidden}.adf-search-show{visibility:visible}"]
            }]
    }], function () { return [{ type: ɵngcc1.SearchService }, { type: ɵngcc0.ElementRef }]; }, { displayWith: [{
            type: Input
        }], maxResults: [{
            type: Input
        }], skipResults: [{
            type: Input
        }], searchTerm: [{
            type: Input
        }], resultLoaded: [{
            type: Output
        }], error: [{
            type: Output
        }], classList: [{
            type: Input,
            args: ['class']
        }], panel: [{
            type: ViewChild,
            args: ['panel', { static: true }]
        }], template: [{
            type: ContentChild,
            args: [TemplateRef]
        }] }); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class EmptySearchResultComponent {
}
EmptySearchResultComponent.ɵfac = function EmptySearchResultComponent_Factory(t) { return new (t || EmptySearchResultComponent)(); };
EmptySearchResultComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: EmptySearchResultComponent, selectors: [["adf-empty-search-result"]], ngContentSelectors: _c16, decls: 2, vars: 0, consts: [[1, "adf-empty-search-result"]], template: function EmptySearchResultComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵprojection(1);
        ɵngcc0.ɵɵelementEnd();
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(EmptySearchResultComponent, [{
        type: Component,
        args: [{
                selector: 'adf-empty-search-result',
                template: "<div class=\"adf-empty-search-result\">\n    <ng-content></ng-content>\n</div>\n",
                encapsulation: ViewEncapsulation.None
            }]
    }], null, null); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class SearchControlComponent {
    constructor(authService, thumbnailService) {
        this.authService = authService;
        this.thumbnailService = thumbnailService;
        this.highlight = false;
        this.inputType = 'text';
        this.liveSearchEnabled = true;
        this.autocomplete = false;
        this.expandable = true;
        this.liveSearchMaxResults = 5;
        this.submit = new EventEmitter();
        this.searchChange = new EventEmitter();
        this.optionClicked = new EventEmitter();
        this.focusSubject = new Subject();
        this.noSearchResultTemplate = null;
        this.searchTerm = '';
        this.onDestroy$ = new Subject();
    }
    isNoSearchTemplatePresent() {
        return !!this.emptySearchTemplate;
    }
    ngOnDestroy() {
        this.onDestroy$.next(true);
        this.onDestroy$.complete();
    }
    isLoggedIn() {
        return this.authService.isEcmLoggedIn();
    }
    inputChange(value) {
        this.searchTerm = value;
        this.searchChange.emit(value);
    }
    getMimeTypeIcon(node) {
        const mimeType = this.getMimeType(node);
        return this.thumbnailService.getMimeTypeIcon(mimeType);
    }
    getMimeType(node) {
        let mimeType;
        if (node.entry.content && node.entry.content.mimeType) {
            mimeType = node.entry.content.mimeType;
        }
        if (node.entry.isFolder) {
            mimeType = 'folder';
        }
        return mimeType;
    }
    elementClicked(item) {
        if (item.entry) {
            this.optionClicked.next(item);
            this.focusSubject.next(new FocusEvent('blur'));
        }
    }
    onFocus(event) {
        this.focusSubject.next(event);
    }
    onBlur(event) {
        const nextElement = this.getNextElementSibling(event.target);
        if (!nextElement && !this.isListElement(event)) {
            this.focusSubject.next(event);
        }
    }
    onSelectFirstResult() {
        if (this.listResultElement && this.listResultElement.length > 0) {
            const firstElement = this.listResultElement.first;
            firstElement._getHostElement().focus();
        }
    }
    onRowArrowDown(event) {
        const nextElement = this.getNextElementSibling(event.target);
        if (nextElement) {
            nextElement.focus();
        }
    }
    onRowArrowUp(event) {
        const previousElement = this.getPreviousElementSibling(event.target);
        if (previousElement) {
            previousElement.focus();
        }
        else {
            this.focusSubject.next(new FocusEvent('focus'));
        }
    }
    onReset(status) {
        if (status) {
            this.searchAutocomplete.resetResults();
        }
    }
    isListElement(event) {
        return event.relatedTarget && event.relatedTarget.children[0] && event.relatedTarget.children[0].className === 'mat-list-item-content';
    }
    getNextElementSibling(node) {
        return node.nextElementSibling;
    }
    getPreviousElementSibling(node) {
        return node.previousElementSibling;
    }
}
SearchControlComponent.ɵfac = function SearchControlComponent_Factory(t) { return new (t || SearchControlComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.AuthenticationService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ThumbnailService)); };
SearchControlComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: SearchControlComponent, selectors: [["adf-search-control"]], contentQueries: function SearchControlComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, EmptySearchResultComponent, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.emptySearchTemplate = _t.first);
    } }, viewQuery: function SearchControlComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c19, true);
        ɵngcc0.ɵɵviewQuery(_c20, true);
        ɵngcc0.ɵɵviewQuery(MatListItem, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.searchTextInput = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.searchAutocomplete = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.listResultElement = _t);
    } }, hostAttrs: [1, "adf-search-control"], inputs: { highlight: "highlight", inputType: "inputType", liveSearchEnabled: "liveSearchEnabled", autocomplete: "autocomplete", expandable: "expandable", liveSearchMaxResults: "liveSearchMaxResults" }, outputs: { submit: "submit", searchChange: "searchChange", optionClicked: "optionClicked" }, ngContentSelectors: _c16, decls: 1, vars: 1, consts: [[4, "ngIf"], [3, "searchTerm", "expandable", "autocomplete", "liveSearchEnabled", "focusListener", "searchAutocomplete", "searchChange", "reset", "selectResult", "submit"], ["searchTextInput", ""], [1, "adf-search-result-autocomplete", 3, "maxResults"], ["search", "", "auto", "searchAutocomplete"], ["id", "autocomplete-search-result-list", 4, "ngIf"], ["id", "autocomplete-search-result-list"], ["class", "adf-search-autocomplete-item", 3, "id", "tabindex", "blur", "keyup.arrowdown", "keyup.arrowup", "click", "keyup.enter", "touchend", 4, "ngFor", "ngForOf"], ["id", "search_no_result", "data-automation-id", "search_no_result_found", 4, "ngIf"], [1, "adf-search-autocomplete-item", 3, "id", "tabindex", "blur", "keyup.arrowdown", "keyup.arrowup", "click", "keyup.enter", "touchend"], ["mat-list-icon", ""], [3, "alt", "src"], ["mat-line", "", "class", "adf-search-fixed-text", 3, "id", "innerHtml", 4, "ngIf", "ngIfElse"], ["elseBlock", ""], ["mat-line", "", 1, "adf-search-fixed-text"], ["mat-line", "", 1, "adf-search-fixed-text", 3, "id", "innerHtml"], ["id", "search_no_result", "data-automation-id", "search_no_result_found"], [4, "ngIf", "ngIfElse"], ["defaultNoResult", ""]], template: function SearchControlComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵtemplate(0, SearchControlComponent_div_0_Template, 7, 7, "div", 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngIf", ctx.isLoggedIn());
    } }, directives: [ɵngcc4.NgIf, ɵngcc1.SearchTextInputComponent, SearchComponent, ɵngcc14.MatList, ɵngcc4.NgForOf, ɵngcc14.MatListItem, ɵngcc6.MatIcon, ɵngcc14.MatListIconCssMatStyler, ɵngcc19.MatLine], pipes: [ɵngcc1.HighlightPipe, ɵngcc8.TranslatePipe], styles: [".adf-search-result-autocomplete{-webkit-overflow-scrolling:touch;background-color:var(--theme-card-bg-color);border-radius:2px;color:var(--theme-text-fg-color);font-size:15px;margin-left:45px;margin-top:-22px;max-height:400px;max-width:280px;min-width:112px;overflow:auto;position:absolute;transform:translateX(-40px);transform-origin:top left;z-index:5}.adf-search-result-autocomplete:not([class*=mat-elevation-z]){box-shadow:0 3px 1px -2px rgba(0,0,0,.2),0 2px 2px 0 rgba(0,0,0,.14),0 1px 5px 0 rgba(0,0,0,.12)}@media screen and (max-width:959px){.adf-search-result-autocomplete{overflow:hidden;text-overflow:ellipsis;white-space:nowrap}}.adf-search-autocomplete-item:hover{background-color:var(--theme-bg-hover-color);opacity:1}"], encapsulation: 2 });
SearchControlComponent.ctorParameters = () => [
    { type: AuthenticationService },
    { type: ThumbnailService }
];
SearchControlComponent.propDecorators = {
    highlight: [{ type: Input }],
    inputType: [{ type: Input }],
    liveSearchEnabled: [{ type: Input }],
    autocomplete: [{ type: Input }],
    expandable: [{ type: Input }],
    liveSearchMaxResults: [{ type: Input }],
    submit: [{ type: Output }],
    searchChange: [{ type: Output }],
    optionClicked: [{ type: Output }],
    searchTextInput: [{ type: ViewChild, args: ['searchTextInput',] }],
    searchAutocomplete: [{ type: ViewChild, args: ['search',] }],
    listResultElement: [{ type: ViewChildren, args: [MatListItem,] }],
    emptySearchTemplate: [{ type: ContentChild, args: [EmptySearchResultComponent,] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SearchControlComponent, [{
        type: Component,
        args: [{
                selector: 'adf-search-control',
                template: "<div *ngIf=\"isLoggedIn()\">\n    <adf-search-text-input  #searchTextInput\n                            [searchTerm]= \"searchTerm\"\n                            [expandable]=\"expandable\"\n                            [autocomplete]=\"autocomplete\"\n                            [liveSearchEnabled]=\"liveSearchEnabled\"\n                            [focusListener]=\"focusSubject.asObservable()\"\n                            [searchAutocomplete]=\"auto\"\n                            (searchChange)=\"inputChange($event)\"\n                            (reset)=\"onReset($event)\"\n                            (selectResult)=\"onSelectFirstResult()\"\n                            (submit)=\"submit.emit($event)\"></adf-search-text-input>\n\n    <adf-search #search\n                #auto=\"searchAutocomplete\"\n                class=\"adf-search-result-autocomplete\"\n                [maxResults]=\"liveSearchMaxResults\">\n        <ng-template let-data>\n            <mat-list *ngIf=\"searchTextInput?.isSearchBarActive()\" id=\"autocomplete-search-result-list\">\n                <mat-list-item\n                    *ngFor=\"let item of data?.list?.entries; let idx = index\"\n                    id=\"result_option_{{idx}}\"\n                    [attr.data-automation-id]=\"'autocomplete_for_' + item.entry.name\"\n                    [tabindex]=\"0\"\n                    (blur)=\"onBlur($event)\"\n                    (keyup.arrowdown)=\"onRowArrowDown($event)\"\n                    (keyup.arrowup)=\"onRowArrowUp($event)\"\n                    class=\"adf-search-autocomplete-item\"\n                    (click)=\"elementClicked(item)\"\n                    (keyup.enter)=\"elementClicked(item)\"\n                    (touchend)=\"elementClicked(item)\">\n                    <!-- This is a comment -->\n                    <mat-icon mat-list-icon>\n                        <img [alt]=\"getMimeType(item)\" [src]=\"getMimeTypeIcon(item)\"/>\n                    </mat-icon>\n                    <h4 mat-line id=\"result_name_{{idx}}\"\n                        *ngIf=\"highlight; else elseBlock\"\n                        class=\"adf-search-fixed-text\"\n                        [innerHtml]=\"item.entry.name | highlight: searchTerm\">\n                        {{ item?.entry.name }}\n                    </h4>\n                    <ng-template #elseBlock>\n                        <h4 class=\"adf-search-fixed-text\" mat-line id=\"result_name_{{idx}}\"\n                            [innerHtml]=\"item.entry.name\"></h4>\n                    </ng-template>\n                    <p mat-line class=\"adf-search-fixed-text\"> {{item?.entry.createdByUser.displayName}} </p>\n                </mat-list-item>\n                <mat-list-item id=\"search_no_result\"\n                            data-automation-id=\"search_no_result_found\"\n                            *ngIf=\"data?.list?.entries.length === 0\">\n                    <ng-content\n                        selector=\"adf-empty-search-result\"\n                        *ngIf=\"isNoSearchTemplatePresent() else defaultNoResult\">\n                    </ng-content>\n                    <ng-template #defaultNoResult>\n                        <p mat-line class=\"adf-search-fixed-text\">{{ 'SEARCH.RESULTS.NONE' | translate:{searchTerm:\n                            searchTerm} }}</p>\n                    </ng-template>\n                </mat-list-item>\n            </mat-list>\n        </ng-template>\n    </adf-search>\n</div>\n",
                encapsulation: ViewEncapsulation.None,
                host: { class: 'adf-search-control' },
                styles: [".adf-search-result-autocomplete{-webkit-overflow-scrolling:touch;background-color:var(--theme-card-bg-color);border-radius:2px;color:var(--theme-text-fg-color);font-size:15px;margin-left:45px;margin-top:-22px;max-height:400px;max-width:280px;min-width:112px;overflow:auto;position:absolute;transform:translateX(-40px);transform-origin:top left;z-index:5}.adf-search-result-autocomplete:not([class*=mat-elevation-z]){box-shadow:0 3px 1px -2px rgba(0,0,0,.2),0 2px 2px 0 rgba(0,0,0,.14),0 1px 5px 0 rgba(0,0,0,.12)}@media screen and (max-width:959px){.adf-search-result-autocomplete{overflow:hidden;text-overflow:ellipsis;white-space:nowrap}}.adf-search-autocomplete-item:hover{background-color:var(--theme-bg-hover-color);opacity:1}"]
            }]
    }], function () { return [{ type: ɵngcc1.AuthenticationService }, { type: ɵngcc1.ThumbnailService }]; }, { highlight: [{
            type: Input
        }], inputType: [{
            type: Input
        }], liveSearchEnabled: [{
            type: Input
        }], autocomplete: [{
            type: Input
        }], expandable: [{
            type: Input
        }], liveSearchMaxResults: [{
            type: Input
        }], submit: [{
            type: Output
        }], searchChange: [{
            type: Output
        }], optionClicked: [{
            type: Output
        }], searchTextInput: [{
            type: ViewChild,
            args: ['searchTextInput']
        }], searchAutocomplete: [{
            type: ViewChild,
            args: ['search']
        }], listResultElement: [{
            type: ViewChildren,
            args: [MatListItem]
        }], emptySearchTemplate: [{
            type: ContentChild,
            args: [EmptySearchResultComponent]
        }] }); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class SearchTextComponent {
    constructor() {
        this.value = '';
        this.isActive = false;
        this.enableChangeUpdate = true;
        this.displayValue$ = new Subject();
    }
    ngOnInit() {
        if (this.context && this.settings && this.settings.pattern) {
            const pattern = new RegExp(this.settings.pattern, 'g');
            const match = pattern.exec(this.context.queryFragments[this.id] || '');
            if (this.settings.allowUpdateOnChange !== undefined &&
                this.settings.allowUpdateOnChange !== null) {
                this.enableChangeUpdate = this.settings.allowUpdateOnChange;
            }
            if (match && match.length > 1) {
                this.value = match[1];
            }
            if (this.startValue) {
                this.setValue(this.startValue);
            }
        }
    }
    clear() {
        this.isActive = false;
        this.value = '';
        if (this.enableChangeUpdate) {
            this.updateQuery(null);
        }
    }
    reset() {
        this.value = '';
        this.updateQuery(null);
    }
    onChangedHandler(event) {
        this.value = event.target.value;
        this.isActive = !!this.value;
        if (this.enableChangeUpdate) {
            this.updateQuery(this.value);
        }
    }
    updateQuery(value) {
        this.displayValue$.next(value);
        if (this.context && this.settings && this.settings.field) {
            this.context.queryFragments[this.id] = value ? `${this.settings.field}:'${this.getSearchPrefix()}${value}${this.getSearchSuffix()}'` : '';
            this.context.update();
        }
    }
    submitValues() {
        this.updateQuery(this.value);
    }
    hasValidValue() {
        return !!this.value;
    }
    getCurrentValue() {
        return this.value;
    }
    setValue(value) {
        this.value = value;
        this.displayValue$.next(this.value);
        this.submitValues();
    }
    getSearchPrefix() {
        return this.settings.searchPrefix ? this.settings.searchPrefix : '';
    }
    getSearchSuffix() {
        return this.settings.searchSuffix ? this.settings.searchSuffix : '';
    }
}
SearchTextComponent.ɵfac = function SearchTextComponent_Factory(t) { return new (t || SearchTextComponent)(); };
SearchTextComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: SearchTextComponent, selectors: [["adf-search-text"]], hostAttrs: [1, "adf-search-text"], inputs: { value: "value" }, decls: 4, vars: 5, consts: [["matInput", "", 3, "placeholder", "ngModel", "ngModelChange", "change"], ["mat-button", "", "matSuffix", "", "mat-icon-button", "", 3, "click", 4, "ngIf"], ["mat-button", "", "matSuffix", "", "mat-icon-button", "", 3, "click"]], template: function SearchTextComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "mat-form-field");
        ɵngcc0.ɵɵelementStart(1, "input", 0);
        ɵngcc0.ɵɵlistener("ngModelChange", function SearchTextComponent_Template_input_ngModelChange_1_listener($event) { return ctx.value = $event; })("change", function SearchTextComponent_Template_input_change_1_listener($event) { return ctx.onChangedHandler($event); });
        ɵngcc0.ɵɵpipe(2, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(3, SearchTextComponent_button_3_Template, 3, 0, "button", 1);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵpropertyInterpolate("placeholder", ɵngcc0.ɵɵpipeBind1(2, 3, ctx.settings == null ? null : ctx.settings.placeholder));
        ɵngcc0.ɵɵproperty("ngModel", ctx.value);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.value);
    } }, directives: [ɵngcc11.MatFormField, ɵngcc13.MatInput, ɵngcc9.DefaultValueAccessor, ɵngcc9.NgControlStatus, ɵngcc9.NgModel, ɵngcc4.NgIf, ɵngcc5.MatButton, ɵngcc11.MatSuffix, ɵngcc6.MatIcon], pipes: [ɵngcc8.TranslatePipe], styles: [".adf-search-text .mat-form-field{max-width:168px;width:100%}"], encapsulation: 2 });
SearchTextComponent.propDecorators = {
    value: [{ type: Input }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SearchTextComponent, [{
        type: Component,
        args: [{
                selector: 'adf-search-text',
                template: "<mat-form-field>\n    <input\n        matInput\n        placeholder=\"{{ settings?.placeholder | translate }}\"\n        [(ngModel)]=\"value\"\n        (change)=\"onChangedHandler($event)\">\n    <button mat-button *ngIf=\"value\" matSuffix mat-icon-button (click)=\"clear()\">\n        <mat-icon>close</mat-icon>\n    </button>\n</mat-form-field>\n",
                encapsulation: ViewEncapsulation.None,
                host: { class: 'adf-search-text' },
                styles: [".adf-search-text .mat-form-field{max-width:168px;width:100%}"]
            }]
    }], function () { return []; }, { value: [{
            type: Input
        }] }); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const DEFAULT_PAGE_SIZE = 5;
class SearchFilterList {
    constructor(items = [], pageSize) {
        this.filteredItems = [];
        this._filterText = '';
        this.items = [];
        this.pageSize = DEFAULT_PAGE_SIZE;
        this.currentPageSize = DEFAULT_PAGE_SIZE;
        this._filter = () => true;
        this.items = items;
        this.filteredItems = items;
        this.pageSize = pageSize || DEFAULT_PAGE_SIZE;
        this.currentPageSize = pageSize || DEFAULT_PAGE_SIZE;
    }
    get filterText() {
        return this._filterText;
    }
    set filterText(value) {
        this._filterText = value;
        this.applyFilter();
    }
    get filter() {
        return this._filter;
    }
    set filter(value) {
        this._filter = value;
        this.applyFilter();
    }
    applyFilter() {
        if (this.filter) {
            this.filteredItems = this.items.filter(this.filter);
        }
        else {
            this.filteredItems = this.items;
        }
        this.currentPageSize = this.pageSize;
    }
    get visibleItems() {
        return this.filteredItems.slice(0, this.currentPageSize);
    }
    get length() {
        return this.items.length;
    }
    get canShowMoreItems() {
        return this.filteredItems.length > this.currentPageSize;
    }
    get canShowLessItems() {
        return this.currentPageSize > this.pageSize;
    }
    get fitsPage() {
        return this.pageSize >= this.filteredItems.length;
    }
    showMoreItems() {
        if (this.canShowMoreItems) {
            this.currentPageSize += this.pageSize;
        }
    }
    showLessItems() {
        if (this.canShowLessItems) {
            this.currentPageSize -= this.pageSize;
        }
    }
    clear() {
        this.currentPageSize = this.pageSize;
        this.items = [];
        this.filteredItems = [];
        this.filterText = '';
    }
    addItem(item) {
        if (!item) {
            return;
        }
        this.items.push(item);
        this.applyFilter();
    }
    deleteItem(item) {
        const removeIndex = this.items.indexOf(item);
        if (removeIndex > -1) {
            this.items.splice(removeIndex, 1);
            this.filteredItems.splice(removeIndex, 1);
        }
    }
    [Symbol.iterator]() {
        let pointer = 0;
        const items = this.visibleItems;
        return {
            next() {
                if (pointer < items.length) {
                    return {
                        done: false,
                        value: items[pointer++]
                    };
                }
                else {
                    return {
                        done: true,
                        value: null
                    };
                }
            }
        };
    }
}

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class SearchRadioComponent {
    constructor() {
        this.pageSize = 5;
        this.isActive = false;
        this.displayValue$ = new Subject();
        this.options = new SearchFilterList();
    }
    ngOnInit() {
        var _a;
        if (this.settings) {
            this.pageSize = this.settings.pageSize || 5;
            if (this.settings.options && this.settings.options.length > 0) {
                this.options = new SearchFilterList(this.settings.options, this.pageSize);
            }
        }
        const initialValue = this.getSelectedValue();
        if (initialValue !== null) {
            this.value = initialValue;
            this.context.queryFragments[this.id] = initialValue;
        }
        else if (this.startValue !== null) {
            this.value = initialValue;
            this.context.queryFragments[this.id] = initialValue;
        }
        this.enableChangeUpdate = (_a = this.settings.allowUpdateOnChange) !== null && _a !== void 0 ? _a : true;
        this.updateDisplayValue();
    }
    getSelectedValue() {
        const options = this.settings['options'] || [];
        if (options && options.length > 0) {
            this.isActive = true;
            let selected = options.find((opt) => opt.default);
            if (!selected) {
                selected = options[0];
            }
            return selected.value;
        }
        return null;
    }
    submitValues() {
        this.setValue(this.value);
        this.updateDisplayValue();
        this.context.update();
    }
    hasValidValue() {
        const currentValue = this.getSelectedValue();
        return !!currentValue;
    }
    setValue(newValue) {
        this.value = newValue;
        this.context.queryFragments[this.id] = newValue;
        if (this.enableChangeUpdate) {
            this.updateDisplayValue();
            this.context.update();
        }
    }
    getCurrentValue() {
        return this.getSelectedValue();
    }
    updateDisplayValue() {
        const selectOptions = this.options.items.find(({ value }) => value === this.value);
        if (selectOptions) {
            this.displayValue$.next(selectOptions.name);
        }
        else {
            this.displayValue$.next('');
        }
    }
    changeHandler(event) {
        this.setValue(event.value);
    }
    clear() {
        this.isActive = false;
        const initialValue = this.getSelectedValue();
        if (initialValue !== null) {
            this.setValue(initialValue);
        }
    }
    reset() {
        const initialValue = this.getSelectedValue();
        if (initialValue !== null) {
            this.setValue(initialValue);
            this.updateDisplayValue();
            this.context.update();
        }
    }
}
SearchRadioComponent.ɵfac = function SearchRadioComponent_Factory(t) { return new (t || SearchRadioComponent)(); };
SearchRadioComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: SearchRadioComponent, selectors: [["adf-search-radio"]], hostAttrs: [1, "adf-search-radio"], inputs: { value: "value" }, decls: 3, vars: 3, consts: [[3, "ngModel", "ngModelChange", "change"], ["class", "adf-facet-filter", 3, "value", 4, "ngFor", "ngForOf"], ["class", "adf-facet-buttons", 4, "ngIf"], [1, "adf-facet-filter", 3, "value"], ["matTooltipPosition", "right", 1, "filter-label", 3, "matTooltip"], [1, "adf-facet-buttons"], ["mat-icon-button", "", 3, "title", "click", 4, "ngIf"], ["mat-icon-button", "", 3, "title", "click"]], template: function SearchRadioComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "mat-radio-group", 0);
        ɵngcc0.ɵɵlistener("ngModelChange", function SearchRadioComponent_Template_mat_radio_group_ngModelChange_0_listener($event) { return ctx.value = $event; })("change", function SearchRadioComponent_Template_mat_radio_group_change_0_listener($event) { return ctx.changeHandler($event); });
        ɵngcc0.ɵɵtemplate(1, SearchRadioComponent_mat_radio_button_1_Template, 6, 10, "mat-radio-button", 1);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(2, SearchRadioComponent_div_2_Template, 3, 2, "div", 2);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngModel", ctx.value);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.options);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.options.fitsPage);
    } }, directives: [ɵngcc20.MatRadioGroup, ɵngcc9.NgControlStatus, ɵngcc9.NgModel, ɵngcc4.NgForOf, ɵngcc4.NgIf, ɵngcc20.MatRadioButton, ɵngcc7.MatTooltip, ɵngcc5.MatButton, ɵngcc6.MatIcon], pipes: [ɵngcc8.TranslatePipe], styles: [".adf-search-radio .mat-radio-group{display:flex;flex-direction:column}.adf-search-radio .mat-radio-button{margin:5px}.adf-search-radio .adf-facet-filter .mat-radio-label-content{overflow:hidden;text-overflow:ellipsis;width:100%}.adf-search-radio .adf-facet-filter .mat-radio-label{width:100%}.adf-search-radio .adf-facet-filter .adf-filter-label{overflow:hidden;text-overflow:ellipsis;white-space:nowrap}"], encapsulation: 2 });
SearchRadioComponent.ctorParameters = () => [];
SearchRadioComponent.propDecorators = {
    value: [{ type: Input }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SearchRadioComponent, [{
        type: Component,
        args: [{
                selector: 'adf-search-radio',
                template: "<mat-radio-group\n    [(ngModel)]=\"value\"\n    (change)=\"changeHandler($event)\">\n    <mat-radio-button [attr.data-automation-id]=\"'search-radio-'+(option.name | translate)\"\n        *ngFor=\"let option of options\"\n        [value]=\"option.value\"\n        class=\"adf-facet-filter\">\n        <div\n            matTooltip=\"{{ option.name | translate }}\"\n            matTooltipPosition=\"right\"\n            class=\"filter-label\">\n            {{ option.name | translate }}\n        </div>\n    </mat-radio-button>\n</mat-radio-group>\n\n<div class=\"adf-facet-buttons\" *ngIf=\"!options.fitsPage\">\n    <button mat-icon-button\n        *ngIf=\"options.canShowLessItems\"\n        title=\"{{ 'SEARCH.FILTER.ACTIONS.SHOW-LESS' | translate }}\"\n        (click)=\"options.showLessItems()\">\n        <mat-icon>keyboard_arrow_up</mat-icon>\n    </button>\n    <button mat-icon-button\n        *ngIf=\"options.canShowMoreItems\"\n        title=\"{{ 'SEARCH.FILTER.ACTIONS.SHOW-MORE' | translate }}\"\n        (click)=\"options.showMoreItems()\">\n        <mat-icon>keyboard_arrow_down</mat-icon>\n    </button>\n</div>\n",
                encapsulation: ViewEncapsulation.None,
                host: { class: 'adf-search-radio' },
                styles: [".adf-search-radio .mat-radio-group{display:flex;flex-direction:column}.adf-search-radio .mat-radio-button{margin:5px}.adf-search-radio .adf-facet-filter .mat-radio-label-content{overflow:hidden;text-overflow:ellipsis;width:100%}.adf-search-radio .adf-facet-filter .mat-radio-label{width:100%}.adf-search-radio .adf-facet-filter .adf-filter-label{overflow:hidden;text-overflow:ellipsis;white-space:nowrap}"]
            }]
    }], function () { return []; }, { value: [{
            type: Input
        }] }); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class SearchSliderComponent {
    constructor() {
        this.thumbLabel = false;
        this.displayValue$ = new Subject();
    }
    ngOnInit() {
        var _a;
        if (this.settings) {
            if (this.settings.hasOwnProperty('min')) {
                this.min = this.settings['min'];
            }
            if (this.settings.hasOwnProperty('max')) {
                this.max = this.settings['max'];
            }
            if (this.settings.hasOwnProperty('step')) {
                this.step = this.settings['step'];
            }
            this.thumbLabel = this.settings['thumbLabel'] ? true : false;
            this.enableChangeUpdate = (_a = this.settings.allowUpdateOnChange) !== null && _a !== void 0 ? _a : true;
        }
        if (this.startValue) {
            this.setValue(this.startValue);
        }
    }
    clear() {
        this.value = this.min || 0;
        if (this.enableChangeUpdate) {
            this.updateQuery(null);
        }
    }
    reset() {
        this.value = this.min || 0;
        this.updateQuery(null);
    }
    onChangedHandler(event) {
        this.value = event.value;
        if (this.enableChangeUpdate) {
            this.updateQuery(this.value);
        }
    }
    submitValues() {
        this.updateQuery(this.value);
    }
    hasValidValue() {
        return !!this.value;
    }
    getCurrentValue() {
        return this.value;
    }
    setValue(value) {
        this.value = value;
        this.submitValues();
    }
    updateQuery(value) {
        var _a;
        this.displayValue$.next(this.value ? `${this.value} ${(_a = this.settings.unit) !== null && _a !== void 0 ? _a : ''}` : '');
        if (this.id && this.context && this.settings && this.settings.field) {
            if (value === null) {
                this.context.queryFragments[this.id] = '';
            }
            else {
                this.context.queryFragments[this.id] = `${this.settings.field}:[0 TO ${value}]`;
            }
            this.context.update();
        }
    }
}
SearchSliderComponent.ɵfac = function SearchSliderComponent_Factory(t) { return new (t || SearchSliderComponent)(); };
SearchSliderComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: SearchSliderComponent, selectors: [["adf-search-slider"]], hostAttrs: [1, "adf-search-slider"], inputs: { value: "value" }, decls: 2, vars: 6, consts: [["data-automation-id", "slider-range", 3, "value", "min", "max", "step", "thumbLabel", "valueChange", "change"], ["class", "adf-facet-buttons", 4, "ngIf"], [1, "adf-facet-buttons"], ["mat-button", "", "color", "primary", "data-automation-id", "slider-btn-clear", 3, "click"]], template: function SearchSliderComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "mat-slider", 0);
        ɵngcc0.ɵɵlistener("valueChange", function SearchSliderComponent_Template_mat_slider_valueChange_0_listener($event) { return ctx.value = $event; })("change", function SearchSliderComponent_Template_mat_slider_change_0_listener($event) { return ctx.onChangedHandler($event); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(1, SearchSliderComponent_div_1_Template, 4, 3, "div", 1);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("value", ctx.value)("min", ctx.min)("max", ctx.max)("step", ctx.step)("thumbLabel", ctx.thumbLabel);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !(ctx.settings == null ? null : ctx.settings.hideDefaultAction));
    } }, directives: [ɵngcc21.MatSlider, ɵngcc4.NgIf, ɵngcc5.MatButton], pipes: [ɵngcc8.TranslatePipe], styles: [".adf-search-slider .mat-slider{width:100%}"], encapsulation: 2 });
SearchSliderComponent.propDecorators = {
    value: [{ type: Input }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SearchSliderComponent, [{
        type: Component,
        args: [{
                selector: 'adf-search-slider',
                template: "<mat-slider\n    [(value)]=\"value\"\n    [min]=\"min\"\n    [max]=\"max\"\n    [step]=\"step\"\n    [thumbLabel]=\"thumbLabel\"\n    (change)=\"onChangedHandler($event)\"\n    data-automation-id=\"slider-range\">\n</mat-slider>\n\n<div class=\"adf-facet-buttons\" *ngIf=\"!settings?.hideDefaultAction\">\n    <button mat-button color=\"primary\" (click)=\"clear()\" data-automation-id=\"slider-btn-clear\">\n        {{ 'SEARCH.FILTER.ACTIONS.CLEAR' | translate }}\n    </button>\n</div>\n",
                encapsulation: ViewEncapsulation.None,
                host: { class: 'adf-search-slider' },
                styles: [".adf-search-slider .mat-slider{width:100%}"]
            }]
    }], function () { return []; }, { value: [{
            type: Input
        }] }); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class LiveErrorStateMatcher {
    isErrorState(control, form) {
        const isSubmitted = form && form.submitted;
        return !!(control && control.invalid && (control.dirty || control.touched || (!control.pristine && isSubmitted)));
    }
}

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class SearchNumberRangeComponent {
    constructor() {
        this.matcher = new LiveErrorStateMatcher();
        this.format = '[{FROM} TO {TO}]';
        this.isActive = false;
        this.displayValue$ = new Subject();
    }
    ngOnInit() {
        var _a, _b;
        if (this.settings) {
            this.field = this.settings.field;
            this.format = this.settings.format || '[{FROM} TO {TO}]';
        }
        this.validators = Validators.compose([
            Validators.required,
            Validators.pattern(/^-?(0|[1-9]\d*)?$/),
            Validators.min(0)
        ]);
        if (this.startValue) {
            this.from = new FormControl(this.startValue['from'], this.validators);
            this.to = new FormControl(this.startValue['to'], this.validators);
        }
        else {
            this.from = new FormControl('', this.validators);
            this.to = new FormControl('', this.validators);
        }
        this.form = new FormGroup({
            from: this.from,
            to: this.to
        }, this.formValidator);
        this.enableChangeUpdate = (_b = (_a = this.settings) === null || _a === void 0 ? void 0 : _a.allowUpdateOnChange) !== null && _b !== void 0 ? _b : true;
        this.updateDisplayValue();
    }
    formValidator(formGroup) {
        return parseInt(formGroup.get('from').value, 10) < parseInt(formGroup.get('to').value, 10) ? null : { 'mismatch': true };
    }
    apply(model, isValid) {
        if (isValid && this.id && this.context && this.field) {
            this.updateDisplayValue();
            this.isActive = true;
            const map = new Map();
            map.set('FROM', model.from);
            map.set('TO', model.to);
            const value = this.formatString(this.format, map);
            this.context.queryFragments[this.id] = `${this.field}:${value}`;
            this.context.update();
        }
    }
    formatString(str, map) {
        let result = str;
        map.forEach((value, key) => {
            const expr = new RegExp('{' + key + '}', 'gm');
            result = result.replace(expr, value);
        });
        return result;
    }
    submitValues() {
        this.apply(this.form.value, this.form.valid);
    }
    hasValidValue() {
        return this.form.valid;
    }
    getCurrentValue() {
        return this.form.value;
    }
    updateDisplayValue() {
        var _a;
        if (this.form.invalid || this.form.pristine) {
            this.displayValue$.next('');
        }
        else {
            this.displayValue$.next(`${this.form.value.from} - ${this.form.value.to} ${(_a = this.settings.unit) !== null && _a !== void 0 ? _a : ''}`);
        }
    }
    setValue(value) {
        this.form['from'].setValue(value);
        this.form['to'].setValue(value);
        this.updateDisplayValue();
    }
    clear() {
        this.isActive = false;
        this.form.reset({
            from: '',
            to: ''
        });
        if (this.id && this.context) {
            this.context.queryFragments[this.id] = '';
            this.updateDisplayValue();
            if (this.enableChangeUpdate) {
                this.context.update();
            }
        }
    }
    reset() {
        this.clear();
        if (this.id && this.context) {
            this.context.update();
        }
    }
}
SearchNumberRangeComponent.ɵfac = function SearchNumberRangeComponent_Factory(t) { return new (t || SearchNumberRangeComponent)(); };
SearchNumberRangeComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: SearchNumberRangeComponent, selectors: [["adf-search-number-range"]], hostAttrs: [1, "adf-search-number-range"], decls: 12, vars: 16, consts: [["novalidate", "", 3, "formGroup", "ngSubmit"], ["matInput", "", "autocomplete", "off", "data-automation-id", "number-range-from-input", 3, "formControl", "errorStateMatcher", "placeholder"], ["data-automation-id", "number-range-from-error-invalid", 4, "ngIf"], ["data-automation-id", "number-range-from-error-required", 4, "ngIf"], ["matInput", "", "autocomplete", "off", "data-automation-id", "number-range-to-input", 3, "formControl", "errorStateMatcher", "placeholder"], ["data-automation-id", "number-range-to-error-invalid", 4, "ngIf"], ["data-automation-id", "number-range-to-error-required", 4, "ngIf"], ["class", "adf-facet-buttons", 4, "ngIf"], ["data-automation-id", "number-range-from-error-invalid"], ["data-automation-id", "number-range-from-error-required"], ["data-automation-id", "number-range-to-error-invalid"], ["data-automation-id", "number-range-to-error-required"], [1, "adf-facet-buttons"], ["mat-button", "", "color", "primary", "type", "button", "data-automation-id", "number-range-btn-clear", 3, "click"], ["mat-button", "", "color", "primary", "type", "submit", "data-automation-id", "number-range-btn-apply", 3, "disabled"]], template: function SearchNumberRangeComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "form", 0);
        ɵngcc0.ɵɵlistener("ngSubmit", function SearchNumberRangeComponent_Template_form_ngSubmit_0_listener() { return ctx.apply(ctx.form.value, ctx.form.valid); });
        ɵngcc0.ɵɵelementStart(1, "mat-form-field");
        ɵngcc0.ɵɵelement(2, "input", 1);
        ɵngcc0.ɵɵpipe(3, "translate");
        ɵngcc0.ɵɵtemplate(4, SearchNumberRangeComponent_mat_error_4_Template, 3, 3, "mat-error", 2);
        ɵngcc0.ɵɵtemplate(5, SearchNumberRangeComponent_mat_error_5_Template, 3, 3, "mat-error", 3);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(6, "mat-form-field");
        ɵngcc0.ɵɵelement(7, "input", 4);
        ɵngcc0.ɵɵpipe(8, "translate");
        ɵngcc0.ɵɵtemplate(9, SearchNumberRangeComponent_mat_error_9_Template, 3, 3, "mat-error", 5);
        ɵngcc0.ɵɵtemplate(10, SearchNumberRangeComponent_mat_error_10_Template, 3, 3, "mat-error", 6);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(11, SearchNumberRangeComponent_div_11_Template, 7, 7, "div", 7);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("formGroup", ctx.form);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵpropertyInterpolate("placeholder", ɵngcc0.ɵɵpipeBind1(3, 12, "SEARCH.FILTER.RANGE.FROM"));
        ɵngcc0.ɵɵproperty("formControl", ctx.from)("errorStateMatcher", ctx.matcher);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.from.hasError("pattern") || ctx.from.hasError("min"));
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.from.hasError("required"));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵpropertyInterpolate("placeholder", ɵngcc0.ɵɵpipeBind1(8, 14, "SEARCH.FILTER.RANGE.TO"));
        ɵngcc0.ɵɵproperty("formControl", ctx.to)("errorStateMatcher", ctx.matcher);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.to.hasError("pattern") || ctx.to.hasError("min"));
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.to.hasError("required"));
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !(ctx.settings == null ? null : ctx.settings.hideDefaultAction));
    } }, directives: [ɵngcc9.ɵangular_packages_forms_forms_y, ɵngcc9.NgControlStatusGroup, ɵngcc9.FormGroupDirective, ɵngcc11.MatFormField, ɵngcc13.MatInput, ɵngcc9.DefaultValueAccessor, ɵngcc9.NgControlStatus, ɵngcc9.FormControlDirective, ɵngcc4.NgIf, ɵngcc11.MatError, ɵngcc5.MatButton], pipes: [ɵngcc8.TranslatePipe], styles: [".adf-search-number-range>form{display:inline-flex;flex-direction:column;width:100%}"], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SearchNumberRangeComponent, [{
        type: Component,
        args: [{
                selector: 'adf-search-number-range',
                template: "<form [formGroup]=\"form\" novalidate (ngSubmit)=\"apply(form.value, form.valid)\">\n\n    <mat-form-field>\n        <input\n            matInput [formControl]=\"from\" [errorStateMatcher]=\"matcher\"\n            placeholder=\"{{ 'SEARCH.FILTER.RANGE.FROM' | translate }}\"\n            autocomplete=\"off\"\n            data-automation-id=\"number-range-from-input\">\n        <mat-error *ngIf=\"from.hasError('pattern') || from.hasError('min')\" data-automation-id=\"number-range-from-error-invalid\">\n            {{ 'SEARCH.FILTER.VALIDATION.INVALID-FORMAT' | translate }}\n        </mat-error>\n        <mat-error *ngIf=\"from.hasError('required')\" data-automation-id=\"number-range-from-error-required\">\n            {{ 'SEARCH.FILTER.VALIDATION.REQUIRED-VALUE' | translate }}\n        </mat-error>\n    </mat-form-field>\n\n    <mat-form-field>\n        <input\n            matInput [formControl]=\"to\" [errorStateMatcher]=\"matcher\"\n            placeholder=\"{{ 'SEARCH.FILTER.RANGE.TO' | translate }}\"\n            autocomplete=\"off\"\n            data-automation-id=\"number-range-to-input\">\n        <mat-error *ngIf=\"to.hasError('pattern') || to.hasError('min')\" data-automation-id=\"number-range-to-error-invalid\">\n            {{ 'SEARCH.FILTER.VALIDATION.INVALID-FORMAT' | translate }}\n        </mat-error>\n        <mat-error *ngIf=\"to.hasError('required')\" data-automation-id=\"number-range-to-error-required\">\n            {{ 'SEARCH.FILTER.VALIDATION.REQUIRED-VALUE' | translate }}\n        </mat-error>\n    </mat-form-field>\n\n\n    <div class=\"adf-facet-buttons\" *ngIf=\"!settings?.hideDefaultAction\">\n        <button mat-button color=\"primary\" type=\"button\" (click)=\"clear()\" data-automation-id=\"number-range-btn-clear\">\n            {{ 'SEARCH.FILTER.ACTIONS.CLEAR' | translate }}\n        </button>\n        <button mat-button color=\"primary\" type=\"submit\" [disabled]=\"!form.valid\" data-automation-id=\"number-range-btn-apply\">\n            {{ 'SEARCH.FILTER.ACTIONS.APPLY' | translate }}\n        </button>\n    </div>\n</form>\n",
                encapsulation: ViewEncapsulation.None,
                host: { class: 'adf-search-number-range' },
                styles: [".adf-search-number-range>form{display:inline-flex;flex-direction:column;width:100%}"]
            }]
    }], function () { return []; }, null); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class SearchCheckListComponent {
    constructor(translationService) {
        this.translationService = translationService;
        this.operator = 'OR';
        this.startValue = null;
        this.pageSize = 5;
        this.isActive = false;
        this.enableChangeUpdate = true;
        this.displayValue$ = new Subject();
        this.options = new SearchFilterList();
    }
    ngOnInit() {
        var _a;
        if (this.settings) {
            this.operator = this.settings.operator || 'OR';
            this.pageSize = this.settings.pageSize || 5;
            if (this.settings.options && this.settings.options.length > 0) {
                this.options = new SearchFilterList(this.settings.options, this.pageSize);
            }
            this.enableChangeUpdate = (_a = this.settings.allowUpdateOnChange) !== null && _a !== void 0 ? _a : true;
        }
        if (this.startValue) {
            this.setValue(this.startValue);
        }
    }
    clear() {
        this.isActive = false;
        this.clearOptions();
        if (this.id && this.context && this.enableChangeUpdate) {
            this.updateDisplayValue();
            this.context.update();
        }
    }
    clearOptions() {
        this.options.items.forEach((opt) => {
            opt.checked = false;
        });
        if (this.id && this.context) {
            this.context.queryFragments[this.id] = '';
        }
    }
    reset() {
        this.isActive = false;
        this.clearOptions();
        if (this.id && this.context) {
            this.updateDisplayValue();
            this.context.update();
        }
    }
    updateDisplayValue() {
        const displayValue = this.options.items
            .filter((option) => option.checked)
            .map(({ name }) => this.translationService.instant(name))
            .join(', ');
        this.displayValue$.next(displayValue);
    }
    changeHandler(event, option) {
        option.checked = event.checked;
        const checkedValues = this.getCheckedValues();
        this.isActive = !!checkedValues.length;
        if (this.enableChangeUpdate) {
            this.submitValues();
        }
    }
    hasValidValue() {
        const checkedValues = this.getCheckedValues();
        return !!checkedValues.length;
    }
    getCurrentValue() {
        return this.getCheckedValues();
    }
    setValue(value) {
        this.options.items.filter((item) => value.includes(item.value))
            .map((item) => item.checked = true);
        this.submitValues();
    }
    getCheckedValues() {
        return this.options.items
            .filter((option) => option.checked)
            .map((option) => option.value);
    }
    submitValues() {
        const checkedValues = this.getCheckedValues();
        const query = checkedValues.join(` ${this.operator} `);
        if (this.id && this.context) {
            this.context.queryFragments[this.id] = query;
            this.updateDisplayValue();
            this.context.update();
        }
    }
}
SearchCheckListComponent.ɵfac = function SearchCheckListComponent_Factory(t) { return new (t || SearchCheckListComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.TranslationService)); };
SearchCheckListComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: SearchCheckListComponent, selectors: [["adf-search-check-list"]], hostAttrs: [1, "adf-search-check-list"], decls: 4, vars: 3, consts: [[1, "checklist"], ["class", "adf-facet-filter", 3, "checked", "keydown.enter", "change", 4, "ngFor", "ngForOf"], ["class", "adf-facet-buttons", 4, "ngIf"], [1, "adf-facet-filter", 3, "checked", "keydown.enter", "change"], ["matTooltipPosition", "right", 1, "facet-name", 3, "matTooltip"], [1, "adf-facet-buttons"], ["mat-button", "", "color", "primary", 3, "click"], ["mat-icon-button", "", 3, "title", "click"], ["mat-icon-button", "", 3, "title", "click", 4, "ngIf"]], template: function SearchCheckListComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵtemplate(1, SearchCheckListComponent_mat_checkbox_1_Template, 5, 8, "mat-checkbox", 1);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(2, SearchCheckListComponent_div_2_Template, 4, 3, "div", 2);
        ɵngcc0.ɵɵtemplate(3, SearchCheckListComponent_div_3_Template, 7, 5, "div", 2);
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.options);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.options.fitsPage && !(ctx.settings == null ? null : ctx.settings.hideDefaultAction));
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.options.fitsPage);
    } }, directives: [ɵngcc4.NgForOf, ɵngcc4.NgIf, ɵngcc10.MatCheckbox, ɵngcc7.MatTooltip, ɵngcc5.MatButton, ɵngcc6.MatIcon], pipes: [ɵngcc8.TranslatePipe], styles: [".adf-search-check-list{display:flex;flex-direction:column}.adf-search-check-list .adf-facet-filter .mat-checkbox-label{overflow:hidden;text-overflow:ellipsis;width:100%}.adf-search-check-list .adf-facet-filter .mat-checkbox-layout{width:100%}.adf-search-check-list .adf-facet-filter .adf-facet-name{overflow:hidden;text-overflow:ellipsis;white-space:nowrap}"], encapsulation: 2 });
SearchCheckListComponent.ctorParameters = () => [
    { type: TranslationService }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SearchCheckListComponent, [{
        type: Component,
        args: [{
                selector: 'adf-search-check-list',
                template: "<div class=\"checklist\">\n    <mat-checkbox\n        *ngFor=\"let option of options\"\n        [checked]=\"option.checked\"\n        (keydown.enter)=\"option.checked = !option.checked\"\n        [attr.data-automation-id]=\"'checkbox-' + (option.name)\"\n        (change)=\"changeHandler($event, option)\"\n        class=\"adf-facet-filter\">\n        <div matTooltip=\"{{ option.name | translate }}\"\n            matTooltipPosition=\"right\"\n            class=\"facet-name\">\n            {{ option.name | translate }}\n        </div>\n\n    </mat-checkbox>\n</div>\n\n<div class=\"adf-facet-buttons\" *ngIf=\"options.fitsPage && !settings?.hideDefaultAction\">\n    <button mat-button color=\"primary\" (click)=\"clear()\">\n        {{ 'SEARCH.FILTER.ACTIONS.CLEAR-ALL' | translate }}\n    </button>\n</div>\n\n<div class=\"adf-facet-buttons\" *ngIf=\"!options.fitsPage\">\n    <button mat-icon-button\n        title=\"{{ 'SEARCH.FILTER.ACTIONS.CLEAR-ALL' | translate }}\"\n        (click)=\"clear()\">\n        <mat-icon>clear</mat-icon>\n    </button>\n    <button mat-icon-button\n        *ngIf=\"options.canShowLessItems\"\n        title=\"{{ 'SEARCH.FILTER.ACTIONS.SHOW-LESS' | translate }}\"\n        (click)=\"options.showLessItems()\">\n        <mat-icon>keyboard_arrow_up</mat-icon>\n    </button>\n    <button mat-icon-button\n        *ngIf=\"options.canShowMoreItems\"\n        title=\"{{ 'SEARCH.FILTER.ACTIONS.SHOW-MORE' | translate }}\"\n        (click)=\"options.showMoreItems()\">\n        <mat-icon>keyboard_arrow_down</mat-icon>\n    </button>\n</div>\n",
                encapsulation: ViewEncapsulation.None,
                host: { class: 'adf-search-check-list' },
                styles: [".adf-search-check-list{display:flex;flex-direction:column}.adf-search-check-list .adf-facet-filter .mat-checkbox-label{overflow:hidden;text-overflow:ellipsis;width:100%}.adf-search-check-list .adf-facet-filter .mat-checkbox-layout{width:100%}.adf-search-check-list .adf-facet-filter .adf-facet-name{overflow:hidden;text-overflow:ellipsis;white-space:nowrap}"]
            }]
    }], function () { return [{ type: ɵngcc1.TranslationService }]; }, null); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const DEFAULT_FORMAT_DATE = 'DD/MM/YYYY';
const ɵ0 = MOMENT_DATE_FORMATS;
class SearchDateRangeComponent {
    constructor(dateAdapter, userPreferencesService) {
        this.dateAdapter = dateAdapter;
        this.userPreferencesService = userPreferencesService;
        this.matcher = new LiveErrorStateMatcher();
        this.isActive = false;
        this.displayValue$ = new Subject();
        this.onDestroy$ = new Subject();
    }
    getFromValidationMessage() {
        return this.from.hasError('invalidOnChange') || this.hasParseError(this.from) ? 'SEARCH.FILTER.VALIDATION.INVALID-DATE' :
            this.from.hasError('matDatepickerMax') ? 'SEARCH.FILTER.VALIDATION.BEYOND-MAX-DATE' :
                this.from.hasError('required') ? 'SEARCH.FILTER.VALIDATION.REQUIRED-VALUE' :
                    '';
    }
    getToValidationMessage() {
        return this.to.hasError('invalidOnChange') || this.hasParseError(this.to) ? 'SEARCH.FILTER.VALIDATION.INVALID-DATE' :
            this.to.hasError('matDatepickerMin') ? 'SEARCH.FILTER.VALIDATION.NO-DAYS' :
                this.to.hasError('matDatepickerMax') ? 'SEARCH.FILTER.VALIDATION.BEYOND-MAX-DATE' :
                    this.to.hasError('required') ? 'SEARCH.FILTER.VALIDATION.REQUIRED-VALUE' :
                        '';
    }
    ngOnInit() {
        var _a, _b, _c;
        this.datePickerFormat = ((_a = this.settings) === null || _a === void 0 ? void 0 : _a.dateFormat) ? this.settings.dateFormat : DEFAULT_FORMAT_DATE;
        const customDateAdapter = this.dateAdapter;
        customDateAdapter.overrideDisplayFormat = this.datePickerFormat;
        this.userPreferencesService
            .select(UserPreferenceValues.Locale)
            .pipe(takeUntil(this.onDestroy$))
            .subscribe(locale => this.setLocale(locale));
        const validators = Validators.compose([
            Validators.required
        ]);
        if (this.settings && this.settings.maxDate) {
            if (this.settings.maxDate === 'today') {
                this.maxDate = this.dateAdapter.today().endOf('day');
            }
            else {
                this.maxDate = moment(this.settings.maxDate).endOf('day');
            }
        }
        if (this.startValue) {
            const splitValue = this.startValue.split('||');
            const fromValue = this.dateAdapter.parse(splitValue[0], this.datePickerFormat);
            const toValue = this.dateAdapter.parse(splitValue[1], this.datePickerFormat);
            this.from = new FormControl(fromValue, validators);
            this.to = new FormControl(toValue, validators);
        }
        else {
            this.from = new FormControl('', validators);
            this.to = new FormControl('', validators);
        }
        this.form = new FormGroup({
            from: this.from,
            to: this.to
        });
        this.setFromMaxDate();
        this.enableChangeUpdate = (_c = (_b = this.settings) === null || _b === void 0 ? void 0 : _b.allowUpdateOnChange) !== null && _c !== void 0 ? _c : true;
    }
    ngOnDestroy() {
        this.onDestroy$.next(true);
        this.onDestroy$.complete();
    }
    apply(model, isValid) {
        if (isValid && this.id && this.context && this.settings && this.settings.field) {
            this.isActive = true;
            const start = moment(model.from).startOf('day').format();
            const end = moment(model.to).endOf('day').format();
            this.context.queryFragments[this.id] = `${this.settings.field}:['${start}' TO '${end}']`;
            this.updateDisplayValue();
            this.context.update();
        }
    }
    submitValues() {
        this.apply(this.form.value, this.form.valid);
    }
    hasValidValue() {
        return this.form.valid;
    }
    getCurrentValue() {
        return {
            from: this.dateAdapter.format(this.form.value.from, this.datePickerFormat),
            to: this.dateAdapter.format(this.form.value.from, this.datePickerFormat)
        };
    }
    updateDisplayValue() {
        if (this.form.invalid || this.form.pristine) {
            this.displayValue$.next('');
        }
        else {
            this.displayValue$.next(`${this.dateAdapter.format(this.form.value.from, this.datePickerFormat)} - ${this.dateAdapter.format(this.form.value.to, this.datePickerFormat)}`);
        }
    }
    setValue(parsedDate) {
        const splitValue = parsedDate.split('||');
        const fromValue = this.dateAdapter.parse(splitValue[0], this.datePickerFormat);
        const toValue = this.dateAdapter.parse(splitValue[1], this.datePickerFormat);
        this.from.setValue(fromValue);
        this.from.markAsDirty();
        this.from.markAsTouched();
        this.to.setValue(toValue);
        this.to.markAsDirty();
        this.to.markAsTouched();
        this.submitValues();
    }
    clear() {
        this.isActive = false;
        this.form.reset({
            from: '',
            to: ''
        });
        if (this.id && this.context) {
            this.context.queryFragments[this.id] = '';
            if (this.enableChangeUpdate) {
                this.updateQuery();
            }
        }
        this.setFromMaxDate();
    }
    reset() {
        this.clear();
        this.updateQuery();
    }
    updateQuery() {
        if (this.id && this.context) {
            this.updateDisplayValue();
            this.context.update();
        }
    }
    onChangedHandler(event, formControl) {
        const inputValue = event.value;
        const formatDate = this.dateAdapter.parse(inputValue, this.datePickerFormat);
        if (formatDate && formatDate.isValid()) {
            formControl.setValue(formatDate);
        }
        else if (formatDate) {
            formControl.setErrors({
                'invalidOnChange': true
            });
        }
        this.setFromMaxDate();
    }
    setLocale(locale) {
        this.dateAdapter.setLocale(locale);
        moment.locale(locale);
    }
    hasParseError(formControl) {
        return formControl.hasError('matDatepickerParse') && formControl.getError('matDatepickerParse').text;
    }
    forcePlaceholder(event) {
        event.srcElement.click();
    }
    setFromMaxDate() {
        this.fromMaxDate = (!this.to.value || this.maxDate && (moment(this.maxDate).isBefore(this.to.value))) ? this.maxDate : moment(this.to.value);
    }
}
SearchDateRangeComponent.ɵfac = function SearchDateRangeComponent_Factory(t) { return new (t || SearchDateRangeComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc19.DateAdapter), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.UserPreferencesService)); };
SearchDateRangeComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: SearchDateRangeComponent, selectors: [["adf-search-date-range"]], hostAttrs: [1, "adf-search-date-range"], features: [ɵngcc0.ɵɵProvidersFeature([
            { provide: DateAdapter, useClass: MomentDateAdapter, deps: [MAT_DATE_LOCALE] },
            { provide: MAT_DATE_FORMATS, useValue: ɵ0 }
        ])], decls: 16, vars: 21, consts: [["novalidate", "", 3, "formGroup", "ngSubmit"], ["matInput", "", "data-automation-id", "date-range-from-input", 3, "formControl", "errorStateMatcher", "placeholder", "matDatepicker", "max", "input", "dateChange"], ["matSuffix", "", "data-automation-id", "date-range-from-date-toggle", 3, "for"], ["color", "accent"], ["fromDatepicker", ""], ["data-automation-id", "date-range-from-error", 4, "ngIf"], ["matInput", "", "data-automation-id", "date-range-to-input", 3, "formControl", "errorStateMatcher", "placeholder", "matDatepicker", "min", "max", "input", "dateChange"], ["matSuffix", "", "data-automation-id", "date-range-to-date-toggle", 3, "for"], ["toDatepicker", ""], ["data-automation-id", "date-range-to-error", 4, "ngIf"], ["class", "adf-facet-buttons adf-facet-buttons--topSpace", 4, "ngIf"], ["data-automation-id", "date-range-from-error"], ["data-automation-id", "date-range-to-error"], [1, "adf-facet-buttons", "adf-facet-buttons--topSpace"], ["mat-button", "", "color", "primary", "type", "button", "data-automation-id", "date-range-clear-btn", 3, "click"], ["mat-button", "", "color", "primary", "type", "submit", "data-automation-id", "date-range-apply-btn", 3, "disabled"]], template: function SearchDateRangeComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "form", 0);
        ɵngcc0.ɵɵlistener("ngSubmit", function SearchDateRangeComponent_Template_form_ngSubmit_0_listener() { return ctx.apply(ctx.form.value, ctx.form.valid); });
        ɵngcc0.ɵɵelementStart(1, "mat-form-field");
        ɵngcc0.ɵɵelementStart(2, "input", 1);
        ɵngcc0.ɵɵlistener("input", function SearchDateRangeComponent_Template_input_input_2_listener($event) { return ctx.forcePlaceholder($event); })("dateChange", function SearchDateRangeComponent_Template_input_dateChange_2_listener($event) { return ctx.onChangedHandler($event, ctx.from); });
        ɵngcc0.ɵɵpipe(3, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(4, "mat-datepicker-toggle", 2);
        ɵngcc0.ɵɵelement(5, "mat-datepicker", 3, 4);
        ɵngcc0.ɵɵtemplate(7, SearchDateRangeComponent_mat_error_7_Template, 3, 6, "mat-error", 5);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(8, "mat-form-field");
        ɵngcc0.ɵɵelementStart(9, "input", 6);
        ɵngcc0.ɵɵlistener("input", function SearchDateRangeComponent_Template_input_input_9_listener($event) { return ctx.forcePlaceholder($event); })("dateChange", function SearchDateRangeComponent_Template_input_dateChange_9_listener($event) { return ctx.onChangedHandler($event, ctx.to); });
        ɵngcc0.ɵɵpipe(10, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(11, "mat-datepicker-toggle", 7);
        ɵngcc0.ɵɵelement(12, "mat-datepicker", 3, 8);
        ɵngcc0.ɵɵtemplate(14, SearchDateRangeComponent_mat_error_14_Template, 3, 6, "mat-error", 9);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(15, SearchDateRangeComponent_div_15_Template, 7, 7, "div", 10);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        const _r0 = ɵngcc0.ɵɵreference(6);
        const _r2 = ɵngcc0.ɵɵreference(13);
        ɵngcc0.ɵɵproperty("formGroup", ctx.form);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵpropertyInterpolate("placeholder", ɵngcc0.ɵɵpipeBind1(3, 17, "SEARCH.FILTER.RANGE.FROM-DATE"));
        ɵngcc0.ɵɵproperty("formControl", ctx.from)("errorStateMatcher", ctx.matcher)("matDatepicker", _r0)("max", ctx.fromMaxDate);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("for", _r0);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngIf", ctx.from.invalid);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵpropertyInterpolate("placeholder", ɵngcc0.ɵɵpipeBind1(10, 19, "SEARCH.FILTER.RANGE.TO-DATE"));
        ɵngcc0.ɵɵproperty("formControl", ctx.to)("errorStateMatcher", ctx.matcher)("matDatepicker", _r2)("min", ctx.from.value)("max", ctx.maxDate);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("for", _r2);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngIf", ctx.to.invalid);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !(ctx.settings == null ? null : ctx.settings.hideDefaultAction));
    } }, directives: [ɵngcc9.ɵangular_packages_forms_forms_y, ɵngcc9.NgControlStatusGroup, ɵngcc9.FormGroupDirective, ɵngcc11.MatFormField, ɵngcc13.MatInput, ɵngcc9.DefaultValueAccessor, ɵngcc22.MatDatepickerInput, ɵngcc9.NgControlStatus, ɵngcc9.FormControlDirective, ɵngcc22.MatDatepickerToggle, ɵngcc11.MatSuffix, ɵngcc22.MatDatepicker, ɵngcc4.NgIf, ɵngcc11.MatError, ɵngcc5.MatButton], pipes: [ɵngcc8.TranslatePipe], styles: [_c23], encapsulation: 2 });
SearchDateRangeComponent.ctorParameters = () => [
    { type: DateAdapter },
    { type: UserPreferencesService }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SearchDateRangeComponent, [{
        type: Component,
        args: [{
                selector: 'adf-search-date-range',
                template: "<form [formGroup]=\"form\" novalidate (ngSubmit)=\"apply(form.value, form.valid)\">\n    <mat-form-field>\n        <input matInput\n                (input)=\"forcePlaceholder($event)\"\n                [formControl]=\"from\"\n                [errorStateMatcher]=\"matcher\"\n                placeholder=\"{{ 'SEARCH.FILTER.RANGE.FROM-DATE' | translate }}\"\n                [matDatepicker]=\"fromDatepicker\"\n                [max]=\"fromMaxDate\"\n                (dateChange)=\"onChangedHandler($event, from)\"\n                data-automation-id=\"date-range-from-input\">\n        <mat-datepicker-toggle matSuffix [for]=\"fromDatepicker\" data-automation-id=\"date-range-from-date-toggle\"></mat-datepicker-toggle>\n        <mat-datepicker #fromDatepicker color=\"accent\"></mat-datepicker>\n        <mat-error *ngIf=\"from.invalid\" data-automation-id=\"date-range-from-error\">\n            {{ getFromValidationMessage() | translate: { requiredFormat: datePickerFormat } }}\n        </mat-error>\n    </mat-form-field>\n\n    <mat-form-field>\n        <input matInput\n                (input)=\"forcePlaceholder($event)\"\n                [formControl]=\"to\"\n                [errorStateMatcher]=\"matcher\"\n                placeholder=\"{{ 'SEARCH.FILTER.RANGE.TO-DATE' | translate }}\"\n                [matDatepicker]=\"toDatepicker\"\n                [min]=\"from.value\"\n                [max]=\"maxDate\"\n                (dateChange)=\"onChangedHandler($event, to)\"\n                data-automation-id=\"date-range-to-input\">\n        <mat-datepicker-toggle matSuffix [for]=\"toDatepicker\" data-automation-id=\"date-range-to-date-toggle\"></mat-datepicker-toggle>\n        <mat-datepicker #toDatepicker color=\"accent\"></mat-datepicker>\n        <mat-error *ngIf=\"to.invalid\" data-automation-id=\"date-range-to-error\">\n            {{ getToValidationMessage() | translate: { requiredFormat: datePickerFormat } }}\n        </mat-error>\n    </mat-form-field>\n\n    <div class=\"adf-facet-buttons adf-facet-buttons--topSpace\" *ngIf=\"!settings?.hideDefaultAction\">\n        <button mat-button color=\"primary\" type=\"button\" (click)=\"clear()\" data-automation-id=\"date-range-clear-btn\">\n            {{ 'SEARCH.FILTER.ACTIONS.CLEAR' | translate }}\n        </button>\n        <button mat-button color=\"primary\" type=\"submit\" [disabled]=\"!form.valid\" data-automation-id=\"date-range-apply-btn\">\n            {{ 'SEARCH.FILTER.ACTIONS.APPLY' | translate }}\n        </button>\n    </div>\n</form>\n",
                providers: [
                    { provide: DateAdapter, useClass: MomentDateAdapter, deps: [MAT_DATE_LOCALE] },
                    { provide: MAT_DATE_FORMATS, useValue: ɵ0 }
                ],
                encapsulation: ViewEncapsulation.None,
                host: { class: 'adf-search-date-range' },
                styles: [".adf-search-date-range>form{display:inline-flex;flex-direction:column;width:100%}"]
            }]
    }], function () { return [{ type: ɵngcc19.DateAdapter }, { type: ɵngcc1.UserPreferencesService }]; }, null); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const DEFAULT_DATETIME_FORMAT = 'DD/MM/YYYY HH:mm';
const ɵ0$1 = MAT_MOMENT_DATETIME_FORMATS;
class SearchDatetimeRangeComponent {
    constructor(dateAdapter, userPreferencesService) {
        this.dateAdapter = dateAdapter;
        this.userPreferencesService = userPreferencesService;
        this.matcher = new LiveErrorStateMatcher();
        this.isActive = false;
        this.displayValue$ = new Subject();
        this.onDestroy$ = new Subject();
    }
    getFromValidationMessage() {
        return this.from.hasError('invalidOnChange') || this.hasParseError(this.from) ? 'SEARCH.FILTER.VALIDATION.INVALID-DATETIME' :
            this.from.hasError('matDatepickerMax') ? 'SEARCH.FILTER.VALIDATION.BEYOND-MAX-DATETIME' :
                this.from.hasError('required') ? 'SEARCH.FILTER.VALIDATION.REQUIRED-VALUE' :
                    '';
    }
    getToValidationMessage() {
        return this.to.hasError('invalidOnChange') || this.hasParseError(this.to) ? 'SEARCH.FILTER.VALIDATION.INVALID-DATETIME' :
            this.to.hasError('matDatepickerMin') ? 'SEARCH.FILTER.VALIDATION.NO-DAYS' :
                this.to.hasError('matDatepickerMax') ? 'SEARCH.FILTER.VALIDATION.BEYOND-MAX-DATETIME' :
                    this.to.hasError('required') ? 'SEARCH.FILTER.VALIDATION.REQUIRED-VALUE' :
                        '';
    }
    ngOnInit() {
        var _a, _b, _c;
        this.datetimePickerFormat = ((_a = this.settings) === null || _a === void 0 ? void 0 : _a.datetimeFormat) ? this.settings.datetimeFormat : DEFAULT_DATETIME_FORMAT;
        this.userPreferencesService
            .select(UserPreferenceValues.Locale)
            .pipe(takeUntil(this.onDestroy$))
            .subscribe(locale => this.setLocale(locale));
        const validators = Validators.compose([
            Validators.required
        ]);
        if (this.settings && this.settings.maxDatetime) {
            this.maxDatetime = moment(this.settings.maxDatetime);
        }
        if (this.startValue) {
            const splitValue = this.startValue.split('||');
            const fromValue = this.dateAdapter.parse(splitValue[0], this.datetimePickerFormat);
            const toValue = this.dateAdapter.parse(splitValue[1], this.datetimePickerFormat);
            this.from = new FormControl(fromValue, validators);
            this.to = new FormControl(toValue, validators);
        }
        else {
            this.from = new FormControl('', validators);
            this.to = new FormControl('', validators);
        }
        this.form = new FormGroup({
            from: this.from,
            to: this.to
        });
        this.setFromMaxDatetime();
        this.enableChangeUpdate = (_c = (_b = this.settings) === null || _b === void 0 ? void 0 : _b.allowUpdateOnChange) !== null && _c !== void 0 ? _c : true;
    }
    ngOnDestroy() {
        this.onDestroy$.next(true);
        this.onDestroy$.complete();
    }
    apply(model, isValid) {
        if (isValid && this.id && this.context && this.settings && this.settings.field) {
            this.isActive = true;
            const start = moment.utc(model.from).startOf('minute').format();
            const end = moment.utc(model.to).endOf('minute').format();
            this.context.queryFragments[this.id] = `${this.settings.field}:['${start}' TO '${end}']`;
            this.updateDisplayValue();
            this.context.update();
        }
    }
    submitValues() {
        this.apply(this.form.value, this.form.valid);
    }
    hasValidValue() {
        return this.form.valid;
    }
    getCurrentValue() {
        return {
            from: this.dateAdapter.format(this.form.value.from, this.datetimePickerFormat),
            to: this.dateAdapter.format(this.form.value.to, this.datetimePickerFormat)
        };
    }
    updateDisplayValue() {
        if (this.form.invalid || this.form.pristine) {
            this.displayValue$.next('');
        }
        else {
            this.displayValue$.next(`${this.dateAdapter.format(this.form.value.from, this.datetimePickerFormat)} - ${this.dateAdapter.format(this.form.value.to, this.datetimePickerFormat)}`);
        }
    }
    setValue(parsedDate) {
        const splitValue = parsedDate.split('||');
        const fromValue = this.dateAdapter.parse(splitValue[0], this.datetimePickerFormat);
        const toValue = this.dateAdapter.parse(splitValue[1], this.datetimePickerFormat);
        this.from.setValue(fromValue);
        this.from.markAsDirty();
        this.from.markAsTouched();
        this.to.setValue(toValue);
        this.to.markAsDirty();
        this.to.markAsTouched();
        this.submitValues();
    }
    clear() {
        this.isActive = false;
        this.form.reset({
            from: '',
            to: ''
        });
        if (this.id && this.context) {
            this.context.queryFragments[this.id] = '';
        }
        if (this.id && this.context && this.enableChangeUpdate) {
            this.updateQuery();
        }
        this.setFromMaxDatetime();
    }
    reset() {
        this.clear();
        this.updateQuery();
    }
    updateQuery() {
        if (this.id && this.context) {
            this.updateDisplayValue();
            this.context.update();
        }
    }
    onChangedHandler(event, formControl) {
        const inputValue = event.value;
        const formatDate = this.dateAdapter.parse(inputValue, this.datetimePickerFormat);
        if (formatDate && formatDate.isValid()) {
            formControl.setValue(formatDate);
        }
        else if (formatDate) {
            formControl.setErrors({
                'invalidOnChange': true
            });
        }
        this.setFromMaxDatetime();
    }
    setLocale(locale) {
        this.dateAdapter.setLocale(locale);
        moment.locale(locale);
    }
    hasParseError(formControl) {
        return formControl.hasError('matDatepickerParse') && formControl.getError('matDatepickerParse').text;
    }
    forcePlaceholder(event) {
        event.srcElement.click();
    }
    setFromMaxDatetime() {
        this.fromMaxDatetime = (!this.to.value || this.maxDatetime && (moment(this.maxDatetime).isBefore(this.to.value))) ? this.maxDatetime : moment(this.to.value);
    }
}
SearchDatetimeRangeComponent.ɵfac = function SearchDatetimeRangeComponent_Factory(t) { return new (t || SearchDatetimeRangeComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc12.DatetimeAdapter), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.UserPreferencesService)); };
SearchDatetimeRangeComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: SearchDatetimeRangeComponent, selectors: [["adf-search-datetime-range"]], hostAttrs: [1, "adf-search-date-range"], features: [ɵngcc0.ɵɵProvidersFeature([
            { provide: MAT_DATETIME_FORMATS, useValue: ɵ0$1 }
        ])], decls: 16, vars: 21, consts: [["novalidate", "", 3, "formGroup", "ngSubmit"], ["matInput", "", "data-automation-id", "datetime-range-from-input", 3, "formControl", "errorStateMatcher", "placeholder", "matDatetimepicker", "max", "input", "dateChange"], ["matSuffix", "", "data-automation-id", "datetime-range-from-date-toggle", 3, "for"], ["color", "accent", "type", "datetime"], ["fromDatetimePicker", ""], ["data-automation-id", "datetime-range-from-error", 4, "ngIf"], ["matInput", "", "data-automation-id", "datetime-range-to-input", 3, "formControl", "errorStateMatcher", "placeholder", "matDatetimepicker", "min", "max", "input", "dateChange"], ["matSuffix", "", "data-automation-id", "datetime-range-to-date-toggle", 3, "for"], ["toDatetimePicker", ""], ["data-automation-id", "datetime-range-to-error", 4, "ngIf"], ["class", "adf-facet-buttons adf-facet-buttons--topSpace", 4, "ngIf"], ["data-automation-id", "datetime-range-from-error"], ["data-automation-id", "datetime-range-to-error"], [1, "adf-facet-buttons", "adf-facet-buttons--topSpace"], ["mat-button", "", "color", "primary", "type", "button", "data-automation-id", "datetime-range-clear-btn", 3, "click"], ["mat-button", "", "color", "primary", "type", "submit", "data-automation-id", "datetime-range-apply-btn", 3, "disabled"]], template: function SearchDatetimeRangeComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "form", 0);
        ɵngcc0.ɵɵlistener("ngSubmit", function SearchDatetimeRangeComponent_Template_form_ngSubmit_0_listener() { return ctx.apply(ctx.form.value, ctx.form.valid); });
        ɵngcc0.ɵɵelementStart(1, "mat-form-field");
        ɵngcc0.ɵɵelementStart(2, "input", 1);
        ɵngcc0.ɵɵlistener("input", function SearchDatetimeRangeComponent_Template_input_input_2_listener($event) { return ctx.forcePlaceholder($event); })("dateChange", function SearchDatetimeRangeComponent_Template_input_dateChange_2_listener($event) { return ctx.onChangedHandler($event, ctx.from); });
        ɵngcc0.ɵɵpipe(3, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(4, "mat-datetimepicker-toggle", 2);
        ɵngcc0.ɵɵelement(5, "mat-datetimepicker", 3, 4);
        ɵngcc0.ɵɵtemplate(7, SearchDatetimeRangeComponent_mat_error_7_Template, 3, 6, "mat-error", 5);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(8, "mat-form-field");
        ɵngcc0.ɵɵelementStart(9, "input", 6);
        ɵngcc0.ɵɵlistener("input", function SearchDatetimeRangeComponent_Template_input_input_9_listener($event) { return ctx.forcePlaceholder($event); })("dateChange", function SearchDatetimeRangeComponent_Template_input_dateChange_9_listener($event) { return ctx.onChangedHandler($event, ctx.to); });
        ɵngcc0.ɵɵpipe(10, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(11, "mat-datetimepicker-toggle", 7);
        ɵngcc0.ɵɵelement(12, "mat-datetimepicker", 3, 8);
        ɵngcc0.ɵɵtemplate(14, SearchDatetimeRangeComponent_mat_error_14_Template, 3, 6, "mat-error", 9);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(15, SearchDatetimeRangeComponent_div_15_Template, 7, 7, "div", 10);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        const _r0 = ɵngcc0.ɵɵreference(6);
        const _r2 = ɵngcc0.ɵɵreference(13);
        ɵngcc0.ɵɵproperty("formGroup", ctx.form);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵpropertyInterpolate("placeholder", ɵngcc0.ɵɵpipeBind1(3, 17, "SEARCH.FILTER.RANGE.FROM-DATE"));
        ɵngcc0.ɵɵproperty("formControl", ctx.from)("errorStateMatcher", ctx.matcher)("matDatetimepicker", _r0)("max", ctx.fromMaxDatetime);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("for", _r0);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngIf", ctx.from.invalid);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵpropertyInterpolate("placeholder", ɵngcc0.ɵɵpipeBind1(10, 19, "SEARCH.FILTER.RANGE.TO-DATE"));
        ɵngcc0.ɵɵproperty("formControl", ctx.to)("errorStateMatcher", ctx.matcher)("matDatetimepicker", _r2)("min", ctx.from.value)("max", ctx.maxDatetime);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("for", _r2);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngIf", ctx.to.invalid);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !(ctx.settings == null ? null : ctx.settings.hideDefaultAction));
    } }, directives: [ɵngcc9.ɵangular_packages_forms_forms_y, ɵngcc9.NgControlStatusGroup, ɵngcc9.FormGroupDirective, ɵngcc11.MatFormField, ɵngcc13.MatInput, ɵngcc9.DefaultValueAccessor, ɵngcc12.MatDatetimepickerInput, ɵngcc9.NgControlStatus, ɵngcc9.FormControlDirective, ɵngcc12.MatDatetimepickerToggle, ɵngcc11.MatSuffix, ɵngcc12.MatDatetimepicker, ɵngcc4.NgIf, ɵngcc11.MatError, ɵngcc5.MatButton], pipes: [ɵngcc8.TranslatePipe], styles: [_c23], encapsulation: 2 });
SearchDatetimeRangeComponent.ctorParameters = () => [
    { type: DatetimeAdapter },
    { type: UserPreferencesService }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SearchDatetimeRangeComponent, [{
        type: Component,
        args: [{
                selector: 'adf-search-datetime-range',
                template: "<form [formGroup]=\"form\" novalidate (ngSubmit)=\"apply(form.value, form.valid)\">\n    <mat-form-field>\n        <input matInput\n                (input)=\"forcePlaceholder($event)\"\n                [formControl]=\"from\"\n                [errorStateMatcher]=\"matcher\"\n                placeholder=\"{{ 'SEARCH.FILTER.RANGE.FROM-DATE' | translate }}\"\n                [matDatetimepicker]=\"fromDatetimePicker\"\n                [max]=\"fromMaxDatetime\"\n                (dateChange)=\"onChangedHandler($event, from)\"\n                data-automation-id=\"datetime-range-from-input\">\n        <mat-datetimepicker-toggle matSuffix [for]=\"fromDatetimePicker\" data-automation-id=\"datetime-range-from-date-toggle\"></mat-datetimepicker-toggle>\n        <mat-datetimepicker #fromDatetimePicker color=\"accent\" type=\"datetime\"></mat-datetimepicker>\n        <mat-error *ngIf=\"from.invalid\" data-automation-id=\"datetime-range-from-error\">\n            {{ getFromValidationMessage() | translate: { requiredFormat: datetimePickerFormat } }}\n        </mat-error>\n    </mat-form-field>\n\n    <mat-form-field>\n        <input matInput\n                (input)=\"forcePlaceholder($event)\"\n                [formControl]=\"to\"\n                [errorStateMatcher]=\"matcher\"\n                placeholder=\"{{ 'SEARCH.FILTER.RANGE.TO-DATE' | translate }}\"\n                [matDatetimepicker]=\"toDatetimePicker\"\n                [min]=\"from.value\"\n                [max]=\"maxDatetime\"\n                (dateChange)=\"onChangedHandler($event, to)\"\n                data-automation-id=\"datetime-range-to-input\">\n        <mat-datetimepicker-toggle matSuffix [for]=\"toDatetimePicker\" data-automation-id=\"datetime-range-to-date-toggle\"></mat-datetimepicker-toggle>\n        <mat-datetimepicker #toDatetimePicker color=\"accent\" type=\"datetime\"></mat-datetimepicker>\n        <mat-error *ngIf=\"to.invalid\" data-automation-id=\"datetime-range-to-error\">\n            {{ getToValidationMessage() | translate: { requiredFormat: datetimePickerFormat } }}\n        </mat-error>\n    </mat-form-field>\n\n    <div class=\"adf-facet-buttons adf-facet-buttons--topSpace\" *ngIf=\"!settings?.hideDefaultAction\">\n        <button mat-button color=\"primary\" type=\"button\" (click)=\"clear()\" data-automation-id=\"datetime-range-clear-btn\">\n            {{ 'SEARCH.FILTER.ACTIONS.CLEAR' | translate }}\n        </button>\n        <button mat-button color=\"primary\" type=\"submit\" [disabled]=\"!form.valid\" data-automation-id=\"datetime-range-apply-btn\">\n            {{ 'SEARCH.FILTER.ACTIONS.APPLY' | translate }}\n        </button>\n    </div>\n</form>\n",
                providers: [
                    { provide: MAT_DATETIME_FORMATS, useValue: ɵ0$1 }
                ],
                encapsulation: ViewEncapsulation.None,
                host: { class: 'adf-search-date-range' },
                styles: [".adf-search-date-range>form{display:inline-flex;flex-direction:column;width:100%}"]
            }]
    }], function () { return [{ type: ɵngcc12.DatetimeAdapter }, { type: ɵngcc1.UserPreferencesService }]; }, null); })();

class SearchFilterService {
    constructor() {
        this.widgets = {
            'text': SearchTextComponent,
            'radio': SearchRadioComponent,
            'slider': SearchSliderComponent,
            'number-range': SearchNumberRangeComponent,
            'check-list': SearchCheckListComponent,
            'date-range': SearchDateRangeComponent,
            'datetime-range': SearchDatetimeRangeComponent
        };
    }
}
SearchFilterService.ɵfac = function SearchFilterService_Factory(t) { return new (t || SearchFilterService)(); };
SearchFilterService.ɵprov = ɵɵdefineInjectable({ factory: function SearchFilterService_Factory() { return new SearchFilterService(); }, token: SearchFilterService, providedIn: "root" });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SearchFilterService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return []; }, null); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class SearchWidgetContainerComponent {
    constructor(searchFilterService, queryBuilder, componentFactoryResolver) {
        this.searchFilterService = searchFilterService;
        this.queryBuilder = queryBuilder;
        this.componentFactoryResolver = componentFactoryResolver;
    }
    ngOnInit() {
        const componentType = this.searchFilterService.widgets[this.selector];
        if (componentType) {
            const factory = this.componentFactoryResolver.resolveComponentFactory(componentType);
            if (factory) {
                this.content.clear();
                this.componentRef = this.content.createComponent(factory, 0);
                this.setupWidget(this.componentRef);
            }
        }
    }
    ngOnChanges(changes) {
        var _a, _b;
        if (((_a = changes['value']) === null || _a === void 0 ? void 0 : _a.currentValue) && ((_b = this.componentRef) === null || _b === void 0 ? void 0 : _b.instance)) {
            this.componentRef.instance.isActive = true;
            this.componentRef.instance.setValue(changes['value'].currentValue);
        }
    }
    setupWidget(ref) {
        if (ref && ref.instance) {
            ref.instance.id = this.id;
            ref.instance.settings = Object.assign({}, this.settings);
            ref.instance.context = this.queryBuilder;
            if (this.value) {
                ref.instance.isActive = true;
                ref.instance.startValue = this.value;
            }
        }
    }
    ngOnDestroy() {
        if (this.componentRef) {
            this.componentRef.destroy();
            this.componentRef = null;
        }
    }
    applyInnerWidget() {
        this.componentRef.instance.submitValues();
    }
    setValue(currentValue) {
        this.componentRef.instance.isActive = true;
        this.componentRef.instance.setValue(currentValue);
    }
    hasValueSelected() {
        return this.componentRef.instance.hasValidValue();
    }
    getCurrentValue() {
        return this.componentRef.instance.getCurrentValue();
    }
    getDisplayValue() {
        var _a;
        if (!((_a = this.componentRef) === null || _a === void 0 ? void 0 : _a.instance)) {
            return null;
        }
        return this.componentRef.instance.displayValue$;
    }
    resetInnerWidget() {
        if (this.componentRef && this.componentRef.instance) {
            this.componentRef.instance.reset();
        }
    }
}
SearchWidgetContainerComponent.ɵfac = function SearchWidgetContainerComponent_Factory(t) { return new (t || SearchWidgetContainerComponent)(ɵngcc0.ɵɵdirectiveInject(SearchFilterService), ɵngcc0.ɵɵdirectiveInject(SEARCH_QUERY_SERVICE_TOKEN), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ComponentFactoryResolver)); };
SearchWidgetContainerComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: SearchWidgetContainerComponent, selectors: [["adf-search-widget-container"]], viewQuery: function SearchWidgetContainerComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵstaticViewQuery(_c24, true, ViewContainerRef);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.content = _t.first);
    } }, inputs: { id: "id", selector: "selector", settings: "settings", config: "config", value: "value" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 2, vars: 0, consts: [["content", ""]], template: function SearchWidgetContainerComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelement(0, "div", null, 0);
    } }, encapsulation: 2 });
SearchWidgetContainerComponent.ctorParameters = () => [
    { type: SearchFilterService },
    { type: BaseQueryBuilderService, decorators: [{ type: Inject, args: [SEARCH_QUERY_SERVICE_TOKEN,] }] },
    { type: ComponentFactoryResolver }
];
SearchWidgetContainerComponent.propDecorators = {
    content: [{ type: ViewChild, args: ['content', { read: ViewContainerRef, static: true },] }],
    id: [{ type: Input }],
    selector: [{ type: Input }],
    settings: [{ type: Input }],
    config: [{ type: Input }],
    value: [{ type: Input }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SearchWidgetContainerComponent, [{
        type: Component,
        args: [{
                selector: 'adf-search-widget-container',
                template: '<div #content></div>'
            }]
    }], function () { return [{ type: SearchFilterService }, { type: BaseQueryBuilderService, decorators: [{
                type: Inject,
                args: [SEARCH_QUERY_SERVICE_TOKEN]
            }] }, { type: ɵngcc0.ComponentFactoryResolver }]; }, { content: [{
            type: ViewChild,
            args: ['content', { read: ViewContainerRef, static: true }]
        }], id: [{
            type: Input
        }], selector: [{
            type: Input
        }], settings: [{
            type: Input
        }], config: [{
            type: Input
        }], value: [{
            type: Input
        }] }); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class SearchQueryBuilderService extends BaseQueryBuilderService {
    constructor(appConfig, alfrescoApiService) {
        super(appConfig, alfrescoApiService);
    }
    isFilterServiceActive() {
        return false;
    }
    loadConfiguration() {
        return this.appConfig.get('search');
    }
}
SearchQueryBuilderService.ɵfac = function SearchQueryBuilderService_Factory(t) { return new (t || SearchQueryBuilderService)(ɵngcc0.ɵɵinject(ɵngcc1.AppConfigService), ɵngcc0.ɵɵinject(ɵngcc1.AlfrescoApiService)); };
SearchQueryBuilderService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: SearchQueryBuilderService, factory: SearchQueryBuilderService.ɵfac });
SearchQueryBuilderService.ctorParameters = () => [
    { type: AppConfigService },
    { type: AlfrescoApiService }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SearchQueryBuilderService, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc1.AppConfigService }, { type: ɵngcc1.AlfrescoApiService }]; }, null); })();

class SearchFacetFiltersService {
    constructor(queryBuilder, searchService, translationService) {
        this.queryBuilder = queryBuilder;
        this.searchService = searchService;
        this.translationService = translationService;
        this.responseFacets = null;
        this.selectedBuckets = [];
        this.DEFAULT_PAGE_SIZE = 5;
        this.facetQueriesPageSize = this.DEFAULT_PAGE_SIZE;
        this.onDestroy$ = new Subject();
        if (queryBuilder.config && queryBuilder.config.facetQueries) {
            this.facetQueriesPageSize = queryBuilder.config.facetQueries.pageSize || this.DEFAULT_PAGE_SIZE;
        }
        this.queryBuilder.configUpdated
            .pipe(takeUntil(this.onDestroy$))
            .subscribe(() => {
            this.selectedBuckets = [];
            this.responseFacets = null;
        });
        this.queryBuilder.updated
            .pipe(takeUntil(this.onDestroy$))
            .subscribe((query) => this.queryBuilder.execute(query));
        this.queryBuilder.executed
            .pipe(takeUntil(this.onDestroy$))
            .subscribe((resultSetPaging) => {
            this.onDataLoaded(resultSetPaging);
            this.searchService.dataLoaded.next(resultSetPaging);
        });
    }
    onDataLoaded(data) {
        const context = data.list.context;
        if (context) {
            this.parseFacets(context);
        }
        else {
            this.responseFacets = null;
        }
    }
    parseFacets(context) {
        this.parseFacetFields(context);
        this.parseFacetIntervals(context);
        this.parseFacetQueries(context);
    }
    parseFacetItems(context, configFacetFields, itemType) {
        configFacetFields.forEach((field) => {
            const responseField = this.findFacet(context, itemType, field.label);
            const responseBuckets = this.getResponseBuckets(responseField, field)
                .filter(this.getFilterByMinCount(field.mincount));
            const alreadyExistingField = this.findResponseFacet(itemType, field.label);
            if (alreadyExistingField) {
                const alreadyExistingBuckets = alreadyExistingField.buckets && alreadyExistingField.buckets.items || [];
                this.updateExistingBuckets(responseField, responseBuckets, alreadyExistingField, alreadyExistingBuckets);
            }
            else if (responseField) {
                if (responseBuckets.length > 0) {
                    const bucketList = new SearchFilterList(responseBuckets, field.pageSize);
                    bucketList.filter = this.getBucketFilterFunction(bucketList);
                    if (!this.responseFacets) {
                        this.responseFacets = [];
                    }
                    this.responseFacets.push(Object.assign(Object.assign({}, field), { type: responseField.type || itemType, label: field.label, pageSize: field.pageSize | this.DEFAULT_PAGE_SIZE, currentPageSize: field.pageSize | this.DEFAULT_PAGE_SIZE, buckets: bucketList }));
                }
            }
        });
    }
    parseFacetFields(context) {
        const configFacetFields = this.queryBuilder.config.facetFields && this.queryBuilder.config.facetFields.fields || [];
        this.parseFacetItems(context, configFacetFields, 'field');
    }
    parseFacetIntervals(context) {
        const configFacetIntervals = this.queryBuilder.config.facetIntervals && this.queryBuilder.config.facetIntervals.intervals || [];
        this.parseFacetItems(context, configFacetIntervals, 'interval');
    }
    parseFacetQueries(context) {
        var _a;
        const facetQuerySetting = ((_a = this.queryBuilder.config.facetQueries) === null || _a === void 0 ? void 0 : _a.settings) || {};
        const configFacetQueries = this.queryBuilder.config.facetQueries && this.queryBuilder.config.facetQueries.queries || [];
        const configGroups = configFacetQueries.reduce((acc, query) => {
            const group = this.queryBuilder.getQueryGroup(query);
            if (acc[group]) {
                acc[group].push(query);
            }
            else {
                acc[group] = [query];
            }
            return acc;
        }, []);
        const mincount = this.queryBuilder.config.facetQueries && this.queryBuilder.config.facetQueries.mincount;
        const mincountFilter = this.getFilterByMinCount(mincount);
        Object.keys(configGroups).forEach((group) => {
            const responseField = this.findFacet(context, 'query', group);
            const responseBuckets = this.getResponseQueryBuckets(responseField, configGroups[group])
                .filter(mincountFilter);
            const alreadyExistingField = this.findResponseFacet('query', group);
            if (alreadyExistingField) {
                const alreadyExistingBuckets = alreadyExistingField.buckets && alreadyExistingField.buckets.items || [];
                this.updateExistingBuckets(responseField, responseBuckets, alreadyExistingField, alreadyExistingBuckets);
            }
            else if (responseField) {
                if (responseBuckets.length > 0) {
                    const bucketList = new SearchFilterList(responseBuckets, this.facetQueriesPageSize);
                    bucketList.filter = this.getBucketFilterFunction(bucketList);
                    if (!this.responseFacets) {
                        this.responseFacets = [];
                    }
                    this.responseFacets.push({
                        field: group,
                        type: responseField.type || 'query',
                        label: group,
                        pageSize: this.DEFAULT_PAGE_SIZE,
                        currentPageSize: this.DEFAULT_PAGE_SIZE,
                        buckets: bucketList,
                        settings: facetQuerySetting
                    });
                }
            }
        });
    }
    getResponseBuckets(responseField, configField) {
        return ((responseField && responseField.buckets) || []).map((respBucket) => {
            respBucket['count'] = this.getCountValue(respBucket);
            respBucket.filterQuery = respBucket.filterQuery || this.getCorrespondingFilterQuery(configField, respBucket.label);
            return Object.assign(Object.assign({}, respBucket), { checked: false, display: respBucket.display, label: respBucket.label });
        });
    }
    getResponseQueryBuckets(responseField, configGroup) {
        return (configGroup || []).map((query) => {
            const respBucket = ((responseField && responseField.buckets) || [])
                .find((bucket) => bucket.label === query.label) || {};
            respBucket['count'] = this.getCountValue(respBucket);
            return Object.assign(Object.assign({}, respBucket), { checked: false, display: respBucket.display, label: respBucket.label });
        });
    }
    getCountValue(bucket) {
        var _a, _b;
        return (!!bucket && !!bucket.metrics && ((_b = (_a = bucket.metrics[0]) === null || _a === void 0 ? void 0 : _a.value) === null || _b === void 0 ? void 0 : _b.count)) || 0;
    }
    getBucketCountDisplay(bucket) {
        return bucket.count === null ? '' : `(${bucket.count})`;
    }
    getFilterByMinCount(mincountInput) {
        return (bucket) => {
            let mincount = mincountInput;
            if (mincount === undefined) {
                mincount = 1;
            }
            return bucket.count >= mincount;
        };
    }
    getCorrespondingFilterQuery(configFacetItem, bucketLabel) {
        let filterQuery = null;
        if (configFacetItem.field && bucketLabel) {
            if (configFacetItem.sets) {
                const configSet = configFacetItem.sets.find((set) => bucketLabel === set.label);
                if (configSet) {
                    filterQuery = this.buildIntervalQuery(configFacetItem.field, configSet);
                }
            }
            else {
                filterQuery = `${configFacetItem.field}:"${bucketLabel}"`;
            }
        }
        return filterQuery;
    }
    buildIntervalQuery(fieldName, interval) {
        const start = interval.start;
        const end = interval.end;
        const startLimit = (interval.startInclusive === undefined || interval.startInclusive === true) ? '[' : '<';
        const endLimit = (interval.endInclusive === undefined || interval.endInclusive === true) ? ']' : '>';
        return `${fieldName}:${startLimit}"${start}" TO "${end}"${endLimit}`;
    }
    findFacet(context, itemType, fieldLabel) {
        return (context.facets || []).find((response) => response.type === itemType && response.label === fieldLabel) || {};
    }
    findResponseFacet(itemType, fieldLabel) {
        return (this.responseFacets || []).find((response) => response.type === itemType && response.label === fieldLabel);
    }
    updateExistingBuckets(responseField, responseBuckets, alreadyExistingField, alreadyExistingBuckets) {
        const bucketsToDelete = [];
        alreadyExistingBuckets
            .map((bucket) => {
            const responseBucket = ((responseField && responseField.buckets) || []).find((respBucket) => respBucket.label === bucket.label);
            if (!responseBucket) {
                bucketsToDelete.push(bucket);
            }
            bucket.count = this.getCountValue(responseBucket);
            return bucket;
        });
        const hasSelection = this.selectedBuckets
            .find((selBuckets) => alreadyExistingField.label === selBuckets.field.label && alreadyExistingField.type === selBuckets.field.type);
        if (!hasSelection && bucketsToDelete.length) {
            bucketsToDelete.forEach((bucket) => {
                alreadyExistingField.buckets.deleteItem(bucket);
            });
        }
        responseBuckets.forEach((respBucket) => {
            const existingBucket = alreadyExistingBuckets.find((oldBucket) => oldBucket.label === respBucket.label);
            if (!existingBucket) {
                alreadyExistingField.buckets.addItem(respBucket);
            }
        });
    }
    getBucketFilterFunction(bucketList) {
        return (bucket) => {
            if (bucket && bucketList.filterText) {
                const pattern = (bucketList.filterText || '').toLowerCase();
                const label = (this.translationService.instant(bucket.display) || this.translationService.instant(bucket.label)).toLowerCase();
                return this.queryBuilder.config.filterWithContains ? label.indexOf(pattern) !== -1 : label.startsWith(pattern);
            }
            return true;
        };
    }
    unselectFacetBucket(field, bucket) {
        if (bucket) {
            bucket.checked = false;
            this.queryBuilder.removeUserFacetBucket(field, bucket);
            this.updateSelectedBuckets();
            this.queryBuilder.update();
        }
    }
    updateSelectedBuckets() {
        if (this.responseFacets) {
            this.selectedBuckets = [];
            for (const field of this.responseFacets) {
                if (field.buckets) {
                    this.selectedBuckets.push(...this.queryBuilder.getUserFacetBuckets(field.field)
                        .filter((bucket) => bucket.checked)
                        .map((bucket) => {
                        return { field, bucket };
                    }));
                }
            }
        }
        else {
            this.selectedBuckets = [];
        }
    }
    ngOnDestroy() {
        this.onDestroy$.next();
        this.onDestroy$.complete();
    }
    resetAllSelectedBuckets() {
        this.responseFacets.forEach((field) => {
            if (field && field.buckets) {
                for (const bucket of field.buckets.items) {
                    bucket.checked = false;
                    this.queryBuilder.removeUserFacetBucket(field, bucket);
                }
                this.updateSelectedBuckets();
            }
        });
        this.queryBuilder.update();
    }
    resetQueryFragments() {
        this.queryBuilder.queryFragments = {};
        this.queryBuilder.resetToDefaults();
    }
    reset() {
        this.responseFacets = [];
        this.selectedBuckets = [];
        this.queryBuilder.resetToDefaults();
        this.queryBuilder.update();
    }
}
SearchFacetFiltersService.ɵfac = function SearchFacetFiltersService_Factory(t) { return new (t || SearchFacetFiltersService)(ɵngcc0.ɵɵinject(SEARCH_QUERY_SERVICE_TOKEN), ɵngcc0.ɵɵinject(ɵngcc1.SearchService), ɵngcc0.ɵɵinject(ɵngcc1.TranslationService)); };
SearchFacetFiltersService.ɵprov = ɵɵdefineInjectable({ factory: function SearchFacetFiltersService_Factory() { return new SearchFacetFiltersService(ɵɵinject(SEARCH_QUERY_SERVICE_TOKEN), ɵɵinject(SearchService), ɵɵinject(TranslationService)); }, token: SearchFacetFiltersService, providedIn: "root" });
SearchFacetFiltersService.ctorParameters = () => [
    { type: SearchQueryBuilderService, decorators: [{ type: Inject, args: [SEARCH_QUERY_SERVICE_TOKEN,] }] },
    { type: SearchService },
    { type: TranslationService }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SearchFacetFiltersService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: SearchQueryBuilderService, decorators: [{
                type: Inject,
                args: [SEARCH_QUERY_SERVICE_TOKEN]
            }] }, { type: ɵngcc1.SearchService }, { type: ɵngcc1.TranslationService }]; }, null); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class SearchFilterComponent {
    constructor(queryBuilder, facetFiltersService) {
        this.queryBuilder = queryBuilder;
        this.facetFiltersService = facetFiltersService;
        this.showContextFacets = true;
        this.facetQueriesLabel = 'Facet Queries';
        this.facetExpanded = {
            'default': false
        };
        if (queryBuilder.config && queryBuilder.config.facetQueries) {
            this.facetQueriesLabel = queryBuilder.config.facetQueries.label || 'Facet Queries';
            this.facetExpanded['query'] = queryBuilder.config.facetQueries.expanded;
        }
        if (queryBuilder.config && queryBuilder.config.facetFields) {
            this.facetExpanded['field'] = queryBuilder.config.facetFields.expanded;
        }
        if (queryBuilder.config && queryBuilder.config.facetIntervals) {
            this.facetExpanded['interval'] = queryBuilder.config.facetIntervals.expanded;
        }
        this.displayResetButton = this.queryBuilder.config && !!this.queryBuilder.config.resetButton;
    }
    shouldExpand(field) {
        return this.facetExpanded[field.type] || this.facetExpanded['default'];
    }
    getBucketCountDisplay(bucket) {
        return bucket.count === null ? '' : `(${bucket.count})`;
    }
}
SearchFilterComponent.ɵfac = function SearchFilterComponent_Factory(t) { return new (t || SearchFilterComponent)(ɵngcc0.ɵɵdirectiveInject(SEARCH_QUERY_SERVICE_TOKEN), ɵngcc0.ɵɵdirectiveInject(SearchFacetFiltersService)); };
SearchFilterComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: SearchFilterComponent, selectors: [["adf-search-filter"]], hostAttrs: [1, "adf-search-filter"], inputs: { showContextFacets: "showContextFacets" }, decls: 4, vars: 3, consts: [["multi", "true", "displayMode", "flat"], ["mat-button", "", "color", "primary", "matTooltipPosition", "right", "adf-reset-search", "", 3, "matTooltip", 4, "ngIf"], [3, "expanded", "expandedChange", 4, "ngFor", "ngForOf"], [4, "ngIf"], ["mat-button", "", "color", "primary", "matTooltipPosition", "right", "adf-reset-search", "", 3, "matTooltip"], [3, "expanded", "expandedChange"], [3, "id", "selector", "settings"], [3, "expanded", 4, "ngFor", "ngForOf"], [3, "expanded"], [3, "field"]], template: function SearchFilterComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "mat-accordion", 0);
        ɵngcc0.ɵɵtemplate(1, SearchFilterComponent_button_1_Template, 4, 6, "button", 1);
        ɵngcc0.ɵɵtemplate(2, SearchFilterComponent_mat_expansion_panel_2_Template, 6, 8, "mat-expansion-panel", 2);
        ɵngcc0.ɵɵtemplate(3, SearchFilterComponent_ng_container_3_Template, 2, 1, "ng-container", 3);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.displayResetButton && ctx.facetFiltersService.responseFacets);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.queryBuilder.categories);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.facetFiltersService.responseFacets && ctx.showContextFacets);
    } }, directives: function () { return [ɵngcc23.MatAccordion, ɵngcc4.NgIf, ɵngcc4.NgForOf, ɵngcc5.MatButton, ResetSearchDirective, ɵngcc7.MatTooltip, ɵngcc23.MatExpansionPanel, ɵngcc23.MatExpansionPanelHeader, ɵngcc23.MatExpansionPanelTitle, SearchWidgetContainerComponent, SearchFacetFieldComponent]; }, pipes: function () { return [ɵngcc8.TranslatePipe]; }, styles: [".adf-search-filter .mat-expansion-panel-header-title{color:var(--theme-text-bold-color);font-size:14px}.adf-search-filter .mat-checkbox-label,.adf-search-filter .mat-radio-label{color:var(--theme-text-color)}"], encapsulation: 2 });
SearchFilterComponent.ctorParameters = () => [
    { type: SearchQueryBuilderService, decorators: [{ type: Inject, args: [SEARCH_QUERY_SERVICE_TOKEN,] }] },
    { type: SearchFacetFiltersService }
];
SearchFilterComponent.propDecorators = {
    showContextFacets: [{ type: Input }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SearchFilterComponent, [{
        type: Component,
        args: [{
                selector: 'adf-search-filter',
                template: "<mat-accordion multi=\"true\" displayMode=\"flat\">\n\n    <button *ngIf=\"displayResetButton && facetFiltersService.responseFacets\"\n            mat-button\n            color=\"primary\"\n            matTooltip=\"{{ 'SEARCH.FILTER.BUTTONS.RESET-ALL.TOOLTIP' | translate }}\"\n            matTooltipPosition=\"right\"\n            adf-reset-search>\n        {{ 'SEARCH.FILTER.BUTTONS.RESET-ALL.LABEL' | translate }}\n    </button>\n    <mat-expansion-panel\n        *ngFor=\"let category of queryBuilder.categories\"\n        [attr.data-automation-id]=\"'expansion-panel-'+category.name\"\n        [(expanded)]=\"category.expanded\">\n        <mat-expansion-panel-header>\n            <mat-panel-title>\n                {{ category.name | translate }}\n            </mat-panel-title>\n        </mat-expansion-panel-header>\n        <adf-search-widget-container\n            [id]=\"category.id\"\n            [selector]=\"category.component.selector\"\n            [settings]=\"category.component.settings\">\n        </adf-search-widget-container>\n    </mat-expansion-panel>\n\n    <ng-container *ngIf=\"facetFiltersService.responseFacets && showContextFacets\">\n        <mat-expansion-panel [attr.data-automation-id]=\"'expansion-panel-'+field.label\" *ngFor=\"let field of facetFiltersService.responseFacets\"\n                             [expanded]=\"shouldExpand(field)\">\n            <mat-expansion-panel-header>\n                <mat-panel-title>{{ field.label | translate }}</mat-panel-title>\n            </mat-expansion-panel-header>\n\n            <adf-search-facet-field [field]=\"field\"></adf-search-facet-field>\n\n        </mat-expansion-panel>\n    </ng-container>\n</mat-accordion>\n",
                encapsulation: ViewEncapsulation.None,
                host: { class: 'adf-search-filter' },
                styles: [".adf-search-filter .mat-expansion-panel-header-title{color:var(--theme-text-bold-color);font-size:14px}.adf-search-filter .mat-checkbox-label,.adf-search-filter .mat-radio-label{color:var(--theme-text-color)}"]
            }]
    }], function () { return [{ type: SearchQueryBuilderService, decorators: [{
                type: Inject,
                args: [SEARCH_QUERY_SERVICE_TOKEN]
            }] }, { type: SearchFacetFiltersService }]; }, { showContextFacets: [{
            type: Input
        }] }); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class SearchChipListComponent {
    constructor(facetFiltersService) {
        this.facetFiltersService = facetFiltersService;
        this.clearAll = false;
    }
}
SearchChipListComponent.ɵfac = function SearchChipListComponent_Factory(t) { return new (t || SearchChipListComponent)(ɵngcc0.ɵɵdirectiveInject(SearchFacetFiltersService)); };
SearchChipListComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: SearchChipListComponent, selectors: [["adf-search-chip-list"]], hostAttrs: [1, "adf-search-chip-list"], inputs: { clearAll: "clearAll", searchFilter: "searchFilter" }, decls: 2, vars: 1, consts: [[4, "ngIf"], ["data-automation-id", "reset-filter", "color", "primary", "selected", "", "matTooltipPosition", "right", 3, "matTooltip", "click", 4, "ngIf"], ["data-automation-id", "chip-list-entry", 3, "removable", "removed", 4, "ngFor", "ngForOf"], ["data-automation-id", "reset-filter", "color", "primary", "selected", "", "matTooltipPosition", "right", 3, "matTooltip", "click"], ["data-automation-id", "chip-list-entry", 3, "removable", "removed"], ["matChipRemove", ""]], template: function SearchChipListComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "mat-chip-list");
        ɵngcc0.ɵɵtemplate(1, SearchChipListComponent_ng_container_1_Template, 3, 2, "ng-container", 0);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.facetFiltersService.selectedBuckets.length);
    } }, directives: [ɵngcc15.MatChipList, ɵngcc4.NgIf, ɵngcc4.NgForOf, ɵngcc15.MatChip, ɵngcc7.MatTooltip, ɵngcc6.MatIcon, ɵngcc15.MatChipRemove], pipes: [ɵngcc8.TranslatePipe], styles: [".mat-chip:focus{background-color:var(--theme-accent-color);color:var(--theme-accent-color-default-contrast)}.mat-chip:focus .mat-chip-remove{color:var(--theme-accent-color-default-contrast);opacity:1}"], encapsulation: 2 });
SearchChipListComponent.ctorParameters = () => [
    { type: SearchFacetFiltersService }
];
SearchChipListComponent.propDecorators = {
    searchFilter: [{ type: Input }],
    clearAll: [{ type: Input }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SearchChipListComponent, [{
        type: Component,
        args: [{
                selector: 'adf-search-chip-list',
                template: "<mat-chip-list>\n    <ng-container *ngIf=\"facetFiltersService.selectedBuckets.length\">\n        <mat-chip *ngIf=\"clearAll && facetFiltersService.selectedBuckets.length > 1\"\n            data-automation-id=\"reset-filter\"\n            color=\"primary\"\n            selected\n            matTooltip=\"{{ 'SEARCH.FILTER.BUTTONS.CLEAR-ALL.TOOLTIP' | translate }}\"\n            matTooltipPosition=\"right\"\n            (click)=\"facetFiltersService.resetAllSelectedBuckets()\">\n            {{ 'SEARCH.FILTER.BUTTONS.CLEAR-ALL.LABEL' | translate }}\n        </mat-chip>\n\n        <mat-chip\n            data-automation-id=\"chip-list-entry\"\n            *ngFor=\"let selection of facetFiltersService.selectedBuckets\"\n            [removable]=\"true\"\n            (removed)=\"facetFiltersService.unselectFacetBucket(selection.field, selection.bucket)\">\n            {{ (selection.bucket.display || selection.bucket.label) | translate }}\n            <mat-icon matChipRemove>cancel</mat-icon>\n        </mat-chip>\n    </ng-container>\n</mat-chip-list>\n",
                encapsulation: ViewEncapsulation.None,
                host: { class: 'adf-search-chip-list' },
                styles: [".mat-chip:focus{background-color:var(--theme-accent-color);color:var(--theme-accent-color-default-contrast)}.mat-chip:focus .mat-chip-remove{color:var(--theme-accent-color-default-contrast);opacity:1}"]
            }]
    }], function () { return [{ type: SearchFacetFiltersService }]; }, { clearAll: [{
            type: Input
        }], searchFilter: [{
            type: Input
        }] }); })();

class ContentNodeSelectorPanelService {
    constructor() {
        this.propertyTypes = ['d:text', 'd:date', 'd:datetime'];
        this.modelPropertyTypeToSearchFilterTypeMap = new Map();
        this.modelPropertyTypeToSearchFilterTypeMap.set(this.propertyTypes[0], 'text');
        this.modelPropertyTypeToSearchFilterTypeMap.set(this.propertyTypes[1], 'date-range');
        this.modelPropertyTypeToSearchFilterTypeMap.set(this.propertyTypes[2], 'datetime-range');
    }
    convertCustomModelPropertiesToSearchCategories() {
        var _a;
        const searchConfig = [];
        (_a = this.customModels) === null || _a === void 0 ? void 0 : _a.forEach((propertyModel) => {
            searchConfig.push(this.convertModelPropertyIntoSearchFilter(propertyModel));
        });
        return searchConfig;
    }
    convertModelPropertyIntoSearchFilter(modelProperty) {
        let filterSearch;
        if (this.isTypeSupported(modelProperty.dataType)) {
            filterSearch = {
                id: modelProperty.prefixedName,
                name: modelProperty.prefixedName,
                expanded: false,
                enabled: true,
                component: {
                    selector: this.modelPropertyTypeToSearchFilterTypeMap.get(modelProperty.dataType),
                    settings: {
                        pattern: `${modelProperty.prefixedName}:'(.*?)'`,
                        field: `${modelProperty.prefixedName}`,
                        placeholder: `Enter the ${modelProperty.name}`
                    }
                }
            };
        }
        return filterSearch;
    }
    isTypeSupported(dataType) {
        return this.propertyTypes.includes(dataType);
    }
}
ContentNodeSelectorPanelService.ɵfac = function ContentNodeSelectorPanelService_Factory(t) { return new (t || ContentNodeSelectorPanelService)(); };
ContentNodeSelectorPanelService.ɵprov = ɵɵdefineInjectable({ factory: function ContentNodeSelectorPanelService_Factory() { return new ContentNodeSelectorPanelService(); }, token: ContentNodeSelectorPanelService, providedIn: "root" });
ContentNodeSelectorPanelService.ctorParameters = () => [];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ContentNodeSelectorPanelService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return []; }, null); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class SearchPanelComponent {
    constructor(contentNodeSelectorPanelService, queryBuilderService) {
        this.contentNodeSelectorPanelService = contentNodeSelectorPanelService;
        this.queryBuilderService = queryBuilderService;
    }
    ngOnInit() {
        this.queryBuilderService.categories = this.contentNodeSelectorPanelService.convertCustomModelPropertiesToSearchCategories();
    }
    hasCustomModels() {
        var _a, _b;
        return ((_b = (_a = this.contentNodeSelectorPanelService) === null || _a === void 0 ? void 0 : _a.customModels) === null || _b === void 0 ? void 0 : _b.length) > 0;
    }
}
SearchPanelComponent.ɵfac = function SearchPanelComponent_Factory(t) { return new (t || SearchPanelComponent)(ɵngcc0.ɵɵdirectiveInject(ContentNodeSelectorPanelService), ɵngcc0.ɵɵdirectiveInject(SEARCH_QUERY_SERVICE_TOKEN)); };
SearchPanelComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: SearchPanelComponent, selectors: [["adf-search-panel"]], hostAttrs: [1, "adf-search-panel"], decls: 2, vars: 1, consts: [["data-automation-id", "adf-search-panel-container", 1, "adf-search-panel-scrollable"], ["class", "app-search-settings", 3, "showContextFacets", 4, "ngIf"], [1, "app-search-settings", 3, "showContextFacets"]], template: function SearchPanelComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵtemplate(1, SearchPanelComponent_adf_search_filter_1_Template, 1, 1, "adf-search-filter", 1);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.hasCustomModels());
    } }, directives: [ɵngcc4.NgIf, SearchFilterComponent], styles: [".adf-search-panel-scrollable{max-height:349px;overflow:scroll}"], encapsulation: 2 });
SearchPanelComponent.ctorParameters = () => [
    { type: ContentNodeSelectorPanelService },
    { type: SearchQueryBuilderService, decorators: [{ type: Inject, args: [SEARCH_QUERY_SERVICE_TOKEN,] }] }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SearchPanelComponent, [{
        type: Component,
        args: [{
                selector: 'adf-search-panel',
                template: "<div class=\"adf-search-panel-scrollable\" data-automation-id=\"adf-search-panel-container\">\n    <adf-search-filter *ngIf=\"hasCustomModels()\"\n                       class=\"app-search-settings\"\n                       [showContextFacets]=\"false\">\n    </adf-search-filter>\n</div>\n",
                encapsulation: ViewEncapsulation.None,
                host: { class: 'adf-search-panel' },
                styles: [".adf-search-panel-scrollable{max-height:349px;overflow:scroll}"]
            }]
    }], function () { return [{ type: ContentNodeSelectorPanelService }, { type: SearchQueryBuilderService, decorators: [{
                type: Inject,
                args: [SEARCH_QUERY_SERVICE_TOKEN]
            }] }]; }, null); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class SearchSortingPickerComponent {
    constructor(queryBuilder) {
        this.queryBuilder = queryBuilder;
        this.options = [];
    }
    ngOnInit() {
        this.options = this.queryBuilder.getSortingOptions();
        const primary = this.queryBuilder.getPrimarySorting();
        if (primary) {
            this.value = primary.key;
            this.ascending = primary.ascending;
        }
    }
    onValueChanged(key) {
        this.value = key;
        this.ascending = this.getSortingOrder();
        this.applySorting();
    }
    onSortingChanged(ascending) {
        this.ascending = ascending;
        this.applySorting();
    }
    findOptionByKey(key) {
        if (key) {
            return this.options.find((opt) => opt.key === key);
        }
        return null;
    }
    applySorting() {
        const option = this.findOptionByKey(this.value);
        if (option) {
            this.queryBuilder.sorting = [Object.assign(Object.assign({}, option), { ascending: this.ascending })];
            this.queryBuilder.update();
        }
    }
    getSortingOrder() {
        const option = this.findOptionByKey(this.value);
        if (option) {
            return option.ascending;
        }
        return this.queryBuilder.getPrimarySorting().ascending;
    }
}
SearchSortingPickerComponent.ɵfac = function SearchSortingPickerComponent_Factory(t) { return new (t || SearchSortingPickerComponent)(ɵngcc0.ɵɵdirectiveInject(SEARCH_QUERY_SERVICE_TOKEN)); };
SearchSortingPickerComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: SearchSortingPickerComponent, selectors: [["adf-search-sorting-picker"]], hostAttrs: [1, "adf-search-sorting-picker"], decls: 1, vars: 3, consts: [[3, "options", "selected", "ascending", "valueChange", "sortingChange"]], template: function SearchSortingPickerComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "adf-sorting-picker", 0);
        ɵngcc0.ɵɵlistener("valueChange", function SearchSortingPickerComponent_Template_adf_sorting_picker_valueChange_0_listener($event) { return ctx.onValueChanged($event); })("sortingChange", function SearchSortingPickerComponent_Template_adf_sorting_picker_sortingChange_0_listener($event) { return ctx.onSortingChanged($event); });
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("options", ctx.options)("selected", ctx.value)("ascending", ctx.ascending);
    } }, directives: [ɵngcc1.SortingPickerComponent], styles: [".adf-search-sorting-picker .mat-icon-button{color:var(--theme-text-color)}"], encapsulation: 2 });
SearchSortingPickerComponent.ctorParameters = () => [
    { type: SearchQueryBuilderService, decorators: [{ type: Inject, args: [SEARCH_QUERY_SERVICE_TOKEN,] }] }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SearchSortingPickerComponent, [{
        type: Component,
        args: [{
                selector: 'adf-search-sorting-picker',
                template: "<adf-sorting-picker\n    [options]=\"options\"\n    [selected]=\"value\"\n    [ascending]=\"ascending\"\n    (valueChange)=\"onValueChanged($event)\"\n    (sortingChange)=\"onSortingChanged($event)\">\n</adf-sorting-picker>\n",
                encapsulation: ViewEncapsulation.None,
                host: { class: 'adf-search-sorting-picker' },
                styles: [".adf-search-sorting-picker .mat-icon-button{color:var(--theme-text-color)}"]
            }]
    }], function () { return [{ type: SearchQueryBuilderService, decorators: [{
                type: Inject,
                args: [SEARCH_QUERY_SERVICE_TOKEN]
            }] }]; }, null); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class SearchFilterContainerComponent {
    constructor(searchFilterQueryBuilder, translationService, focusTrapFactory) {
        this.searchFilterQueryBuilder = searchFilterQueryBuilder;
        this.translationService = translationService;
        this.focusTrapFactory = focusTrapFactory;
        this.filterChange = new EventEmitter();
        this.onDestroy$ = new Subject();
    }
    ngOnInit() {
        this.category = this.searchFilterQueryBuilder.getCategoryForColumn(this.col.key);
        this.initialValue = this.value && this.value[this.col.key] ? this.value[this.col.key] : undefined;
    }
    ngOnDestroy() {
        this.onDestroy$.next(true);
        this.onDestroy$.complete();
    }
    onKeyPressed(event, menuTrigger) {
        if (event.key === 'Enter' && this.widgetContainer.selector !== 'check-list') {
            this.onApply();
            menuTrigger.closeMenu();
        }
    }
    onApply() {
        if (this.widgetContainer.hasValueSelected()) {
            this.searchFilterQueryBuilder.setActiveFilter(this.category.columnKey, this.widgetContainer.getCurrentValue());
            this.filterChange.emit();
            this.widgetContainer.applyInnerWidget();
        }
        else {
            this.resetSearchFilter();
        }
    }
    onClearButtonClick(event) {
        event.stopPropagation();
        this.resetSearchFilter();
    }
    resetSearchFilter() {
        this.widgetContainer.resetInnerWidget();
        this.searchFilterQueryBuilder.removeActiveFilter(this.category.columnKey);
        this.filterChange.emit();
    }
    getTooltipTranslation(columnTitle) {
        if (!columnTitle) {
            columnTitle = 'SEARCH.SEARCH_HEADER.TYPE';
        }
        return this.translationService.instant('SEARCH.SEARCH_HEADER.FILTER_BY', { category: this.translationService.instant(columnTitle) });
    }
    isActive() {
        return this.widgetContainer && this.widgetContainer.componentRef && this.widgetContainer.componentRef.instance.isActive;
    }
    onMenuOpen() {
        if (this.filterContainer && !this.focusTrap) {
            this.focusTrap = this.focusTrapFactory.create(this.filterContainer.nativeElement);
            this.focusTrap.focusInitialElement();
        }
    }
    onClosed() {
        this.focusTrap.destroy();
        this.focusTrap = null;
    }
}
SearchFilterContainerComponent.ɵfac = function SearchFilterContainerComponent_Factory(t) { return new (t || SearchFilterContainerComponent)(ɵngcc0.ɵɵdirectiveInject(SEARCH_QUERY_SERVICE_TOKEN), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.TranslationService), ɵngcc0.ɵɵdirectiveInject(ɵngcc18.ConfigurableFocusTrapFactory)); };
SearchFilterContainerComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: SearchFilterContainerComponent, selectors: [["adf-search-filter-container"]], viewQuery: function SearchFilterContainerComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(SearchWidgetContainerComponent, true);
        ɵngcc0.ɵɵviewQuery(_c25, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.widgetContainer = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.filterContainer = _t.first);
    } }, inputs: { col: "col", value: "value" }, outputs: { filterChange: "filterChange" }, decls: 1, vars: 1, consts: [["class", "adf-filter", 4, "ngIf"], [1, "adf-filter"], ["mat-icon-button", "", "id", "filter-menu-button", 1, "adf-filter-button", 3, "matMenuTriggerFor", "matTooltip", "click", "menuOpened", "keyup.enter"], ["menuTrigger", "matMenuTrigger"], ["value", "adf:filter", "matBadge", "filter", "matBadgeColor", "warn", 3, "ngClass", "matBadgeHidden"], [1, "adf-filter-menu", 3, "closed"], ["filter", "matMenu"], [3, "keydown.tab"], ["filterContainer", ""], [1, "adf-filter-container", 3, "click"], [1, "adf-filter-title"], [3, "id", "selector", "settings", "value", "keypress"], [1, "adf-filter-actions"], ["mat-button", "", "id", "clear-filter-button", 3, "click"], ["mat-button", "", "color", "primary", "id", "apply-filter-button", 1, "adf-filter-apply-button", 3, "click"]], template: function SearchFilterContainerComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, SearchFilterContainerComponent_div_0_Template, 22, 24, "div", 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngIf", !!ctx.category);
    } }, directives: [ɵngcc4.NgIf, ɵngcc5.MatButton, ɵngcc24.MatMenuTrigger, ɵngcc7.MatTooltip, ɵngcc1.IconComponent, ɵngcc25.MatBadge, ɵngcc4.NgClass, ɵngcc24._MatMenu, SearchWidgetContainerComponent, ɵngcc2.MatDialogActions], pipes: [ɵngcc8.TranslatePipe, ɵngcc4.UpperCasePipe], styles: [".adf-filter-button{margin-left:-7px!important}.adf-filter-button .adf-icon{color:var(--theme-icon-fg-color);opacity:1}.adf-filter-button .adf-icon-active{color:var(--theme-primary-color)}.adf-filter-button .adf-icon .mat-badge-active{border:2px solid var(--theme-card-bg-color)!important}.adf-filter-button .mat-icon{height:18px;width:18px}.adf-filter-button .mat-badge-content{height:10px;right:-6px!important;top:-3px!important;width:10px}.adf-filter-container{color:var(--theme-text-bold-color)!important;display:flex;flex-direction:column;padding:15px 15px 10px}.adf-filter-container .adf-facet-buttons{display:none}.adf-filter-container .adf-search-check-list{padding:5px 0}.adf-filter-container input{background:2px solid var(--theme-card-bg-color)!important}.adf-filter-title{color:var(--theme-text-bold-color);font-size:1.1em;padding-bottom:5px}.adf-filter-actions{background-color:var(--theme-hover-bg-color);display:flex;justify-content:flex-end;padding:15px}.adf-filter-actions>button{color:var(--theme-text-bold-color);font-size:.9em}.mat-menu-panel.adf-filter-menu .mat-menu-content{min-width:260px;padding:0}"], encapsulation: 2 });
SearchFilterContainerComponent.ctorParameters = () => [
    { type: SearchHeaderQueryBuilderService, decorators: [{ type: Inject, args: [SEARCH_QUERY_SERVICE_TOKEN,] }] },
    { type: TranslationService },
    { type: ConfigurableFocusTrapFactory }
];
SearchFilterContainerComponent.propDecorators = {
    col: [{ type: Input }],
    value: [{ type: Input }],
    filterChange: [{ type: Output }],
    widgetContainer: [{ type: ViewChild, args: [SearchWidgetContainerComponent,] }],
    filterContainer: [{ type: ViewChild, args: ['filterContainer',] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SearchFilterContainerComponent, [{
        type: Component,
        args: [{
                selector: 'adf-search-filter-container',
                template: "<div *ngIf=\"!!category\"\n     class=\"adf-filter\">\n    <button mat-icon-button\n            [matMenuTriggerFor]=\"filter\"\n            id=\"filter-menu-button\"\n            #menuTrigger=\"matMenuTrigger\"\n            (click)=\"$event.stopPropagation()\"\n            (menuOpened)=\"onMenuOpen()\"\n            (keyup.enter)=\"$event.stopPropagation()\"\n            class=\"adf-filter-button\"\n            [attr.aria-label]=\"getTooltipTranslation(col?.title)\"\n            [matTooltip]=\"getTooltipTranslation(col?.title)\">\n        <adf-icon value=\"adf:filter\"\n                  [ngClass]=\"{ 'adf-icon-active': isActive() || menuTrigger.menuOpen }\"\n                  matBadge=\"filter\"\n                  matBadgeColor=\"warn\"\n                  [matBadgeHidden]=\"!isActive()\">\n        </adf-icon>\n    </button>\n\n    <mat-menu #filter=\"matMenu\"\n              class=\"adf-filter-menu\"\n              (closed)=\"onClosed()\">\n        <div #filterContainer\n             (keydown.tab)=\"$event.stopPropagation();\">\n            <div (click)=\"$event.stopPropagation()\"\n                 class=\"adf-filter-container\">\n                <div class=\"adf-filter-title\">{{ category?.name | translate }}</div>\n                <adf-search-widget-container (keypress)=\"onKeyPressed($event, menuTrigger)\"\n                                             [id]=\"category?.id\"\n                                             [selector]=\"category?.component?.selector\"\n                                             [settings]=\"category?.component?.settings\"\n                                             [value]=\"initialValue\">\n                </adf-search-widget-container>\n            </div>\n            <mat-dialog-actions class=\"adf-filter-actions\">\n                <button mat-button\n                        id=\"clear-filter-button\"\n                        (click)=\"onClearButtonClick($event)\">{{ 'SEARCH.SEARCH_HEADER.CLEAR' | translate | uppercase }}\n                </button>\n                <button mat-button\n                        color=\"primary\"\n                        id=\"apply-filter-button\"\n                        class=\"adf-filter-apply-button\"\n                        (click)=\"onApply()\">{{ 'SEARCH.SEARCH_HEADER.APPLY' | translate | uppercase }}\n                </button>\n            </mat-dialog-actions>\n        </div>\n    </mat-menu>\n</div>\n",
                encapsulation: ViewEncapsulation.None,
                styles: [".adf-filter-button{margin-left:-7px!important}.adf-filter-button .adf-icon{color:var(--theme-icon-fg-color);opacity:1}.adf-filter-button .adf-icon-active{color:var(--theme-primary-color)}.adf-filter-button .adf-icon .mat-badge-active{border:2px solid var(--theme-card-bg-color)!important}.adf-filter-button .mat-icon{height:18px;width:18px}.adf-filter-button .mat-badge-content{height:10px;right:-6px!important;top:-3px!important;width:10px}.adf-filter-container{color:var(--theme-text-bold-color)!important;display:flex;flex-direction:column;padding:15px 15px 10px}.adf-filter-container .adf-facet-buttons{display:none}.adf-filter-container .adf-search-check-list{padding:5px 0}.adf-filter-container input{background:2px solid var(--theme-card-bg-color)!important}.adf-filter-title{color:var(--theme-text-bold-color);font-size:1.1em;padding-bottom:5px}.adf-filter-actions{background-color:var(--theme-hover-bg-color);display:flex;justify-content:flex-end;padding:15px}.adf-filter-actions>button{color:var(--theme-text-bold-color);font-size:.9em}.mat-menu-panel.adf-filter-menu .mat-menu-content{min-width:260px;padding:0}"]
            }]
    }], function () { return [{ type: SearchHeaderQueryBuilderService, decorators: [{
                type: Inject,
                args: [SEARCH_QUERY_SERVICE_TOKEN]
            }] }, { type: ɵngcc1.TranslationService }, { type: ɵngcc18.ConfigurableFocusTrapFactory }]; }, { filterChange: [{
            type: Output
        }], col: [{
            type: Input
        }], value: [{
            type: Input
        }], widgetContainer: [{
            type: ViewChild,
            args: [SearchWidgetContainerComponent]
        }], filterContainer: [{
            type: ViewChild,
            args: ['filterContainer']
        }] }); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class SearchFormComponent {
    constructor(queryBuilder) {
        this.queryBuilder = queryBuilder;
        this.formChange = new EventEmitter();
    }
    onSelectionChange(form) {
        this.queryBuilder.updateSelectedConfiguration(form.index);
        this.formChange.emit(form);
    }
    getSelected(forms) {
        var _a;
        return (_a = forms.find((form) => form.selected)) === null || _a === void 0 ? void 0 : _a.name;
    }
}
SearchFormComponent.ɵfac = function SearchFormComponent_Factory(t) { return new (t || SearchFormComponent)(ɵngcc0.ɵɵdirectiveInject(SEARCH_QUERY_SERVICE_TOKEN)); };
SearchFormComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: SearchFormComponent, selectors: [["adf-search-form"]], outputs: { formChange: "formChange" }, decls: 2, vars: 3, consts: [[4, "ngIf"], ["disableRipple", "", "mat-button", "", 1, "adf-search-form", 3, "title"], [1, "adf-search-form-title"], ["disableRipple", "", "mat-button", "", 1, "adf-search-form", 3, "matMenuTriggerFor", "title", "matMenuTriggerRestoreFocus"], ["menuTrigger", "matMenuTrigger"], [1, "adf-search-form-icon"], ["backdropClass", "adf-search-form-menu"], ["menu", "matMenu"], ["mat-menu-item", "", 3, "click", 4, "ngFor", "ngForOf"], ["mat-menu-item", "", 3, "click"]], template: function SearchFormComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, SearchFormComponent_ng_container_0_Template, 3, 2, "ng-container", 0);
        ɵngcc0.ɵɵpipe(1, "async");
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngIf", ɵngcc0.ɵɵpipeBind1(1, 1, ctx.queryBuilder.searchForms));
    } }, directives: [ɵngcc4.NgIf, ɵngcc5.MatButton, ɵngcc24.MatMenuTrigger, ɵngcc6.MatIcon, ɵngcc24._MatMenu, ɵngcc4.NgForOf, ɵngcc24.MatMenuItem], pipes: [ɵngcc4.AsyncPipe, ɵngcc8.TranslatePipe], styles: [".adf-search-form.mat-button{align-content:center;height:35px;max-width:190px;min-width:190px;overflow:hidden}.adf-search-form.mat-button .mat-button-wrapper{align-items:center;display:flex}.adf-search-form-title{font-size:14px;font-weight:700;line-height:24px;max-width:120px;min-width:120px;overflow:hidden;padding-right:12px;text-align:left;text-overflow:ellipsis}.adf-search-form-icon{border:2px solid transparent;border-radius:6px;transition:border .5s ease-out}.adf-search-form-icon-selected{border-color:var(--theme-accent-color)}.adf-search-form-menu+* .mat-menu-panel{border-radius:6px;box-shadow:0 3px 1px -2px rgba(0,0,0,.2),0 2px 2px 0 rgba(0,0,0,.14),0 1px 5px 0 rgba(0,0,0,.12)}.adf-search-form-menu+* .mat-menu-panel .mat-menu-content{padding:0}"], encapsulation: 2 });
SearchFormComponent.ctorParameters = () => [
    { type: SearchQueryBuilderService, decorators: [{ type: Inject, args: [SEARCH_QUERY_SERVICE_TOKEN,] }] }
];
SearchFormComponent.propDecorators = {
    formChange: [{ type: Output }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SearchFormComponent, [{
        type: Component,
        args: [{
                selector: 'adf-search-form',
                template: "<ng-container *ngIf=\"queryBuilder.searchForms | async as forms\">\n\n    <ng-container *ngIf=\"forms.length === 1\">\n        <button class=\"adf-search-form\" disableRipple mat-button [title]=\"getSelected(forms) | translate\">\n            <span class=\"adf-search-form-title\">\n                    {{ getSelected(forms) | translate }}\n            </span>\n        </button>\n    </ng-container>\n\n    <ng-container  *ngIf=\"forms.length > 1\">\n        <button class=\"adf-search-form\"\n                [matMenuTriggerFor]=\"menu\"\n                #menuTrigger=\"matMenuTrigger\"\n                disableRipple\n                mat-button\n                [title]=\"getSelected(forms) | translate\"\n                [matMenuTriggerRestoreFocus]=\"true\">\n\n            <span class=\"adf-search-form-title\" >\n                    {{ getSelected(forms) | translate }}\n            </span>\n\n            <mat-icon [class.adf-search-form-icon-selected]=\"menuTrigger.menuOpen\" class=\"adf-search-form-icon\">expand_more</mat-icon>\n        </button>\n\n        <mat-menu #menu=\"matMenu\" backdropClass=\"adf-search-form-menu\">\n            <button mat-menu-item *ngFor=\"let form of forms\" (click)=\"onSelectionChange(form)\">\n                {{form.name | translate}}\n            </button>\n        </mat-menu>\n    </ng-container>\n</ng-container>\n",
                encapsulation: ViewEncapsulation.None,
                styles: [".adf-search-form.mat-button{align-content:center;height:35px;max-width:190px;min-width:190px;overflow:hidden}.adf-search-form.mat-button .mat-button-wrapper{align-items:center;display:flex}.adf-search-form-title{font-size:14px;font-weight:700;line-height:24px;max-width:120px;min-width:120px;overflow:hidden;padding-right:12px;text-align:left;text-overflow:ellipsis}.adf-search-form-icon{border:2px solid transparent;border-radius:6px;transition:border .5s ease-out}.adf-search-form-icon-selected{border-color:var(--theme-accent-color)}.adf-search-form-menu+* .mat-menu-panel{border-radius:6px;box-shadow:0 3px 1px -2px rgba(0,0,0,.2),0 2px 2px 0 rgba(0,0,0,.14),0 1px 5px 0 rgba(0,0,0,.12)}.adf-search-form-menu+* .mat-menu-panel .mat-menu-content{padding:0}"]
            }]
    }], function () { return [{ type: SearchQueryBuilderService, decorators: [{
                type: Inject,
                args: [SEARCH_QUERY_SERVICE_TOKEN]
            }] }]; }, { formChange: [{
            type: Output
        }] }); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class SearchFilterChipsComponent {
    constructor(queryBuilder, facetFiltersService) {
        this.queryBuilder = queryBuilder;
        this.facetFiltersService = facetFiltersService;
        this.showContextFacets = true;
    }
}
SearchFilterChipsComponent.ɵfac = function SearchFilterChipsComponent_Factory(t) { return new (t || SearchFilterChipsComponent)(ɵngcc0.ɵɵdirectiveInject(SEARCH_QUERY_SERVICE_TOKEN), ɵngcc0.ɵɵdirectiveInject(SearchFacetFiltersService)); };
SearchFilterChipsComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: SearchFilterChipsComponent, selectors: [["adf-search-filter-chips"]], inputs: { showContextFacets: "showContextFacets" }, decls: 3, vars: 2, consts: [["aria-orientation", "horizontal"], [4, "ngFor", "ngForOf"], [4, "ngIf"], [3, "category"], [3, "field"]], template: function SearchFilterChipsComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "mat-chip-list", 0);
        ɵngcc0.ɵɵtemplate(1, SearchFilterChipsComponent_ng_container_1_Template, 2, 1, "ng-container", 1);
        ɵngcc0.ɵɵtemplate(2, SearchFilterChipsComponent_ng_container_2_Template, 2, 1, "ng-container", 2);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.queryBuilder.categories);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.facetFiltersService.responseFacets && ctx.showContextFacets);
    } }, directives: function () { return [ɵngcc15.MatChipList, ɵngcc4.NgForOf, ɵngcc4.NgIf, SearchWidgetChipComponent, SearchFacetChipComponent]; }, styles: [".adf-search-filter-chip.mat-chip{background:var(--theme-unselected-chip-bg-color);border:2px solid transparent;max-width:320px;overflow:hidden;text-overflow:ellipsis;transition:border .5s ease-in-out}.adf-search-filter-chip.mat-chip:focus{color:unset}.adf-search-filter-chip.mat-chip.mat-standard-chip:after{background:var(--theme-unselected-chip-bg-color);color:unset}.adf-search-filter-chip.mat-chip.mat-chip-list-wrapper{margin:4px 6px}.adf-search-filter-chip.adf-search-toggle-chip{background:var(--theme-card-bg-color);border:2px solid var(--theme-accent-color)}.adf-search-filter-chip.adf-search-toggle-chip.mat-chip:after{background:unset}.adf-search-filter-chip .adf-search-filter-placeholder{color:var(--theme-disabled-text-color);flex:1 1 auto;white-space:nowrap}.adf-search-filter-chip .adf-search-filter-ellipsis{overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.adf-search-filter-chip .mat-icon{padding-left:5px;padding-top:5px}.adf-search-filter-chip-menu+* .cdk-overlay-pane .mat-menu-panel{border-radius:12px;box-shadow:0 3px 1px -2px rgba(0,0,0,.2),0 2px 2px 0 rgba(0,0,0,.14),0 1px 5px 0 rgba(0,0,0,.12);min-width:320px}"], encapsulation: 2 });
SearchFilterChipsComponent.ctorParameters = () => [
    { type: SearchQueryBuilderService, decorators: [{ type: Inject, args: [SEARCH_QUERY_SERVICE_TOKEN,] }] },
    { type: SearchFacetFiltersService }
];
SearchFilterChipsComponent.propDecorators = {
    showContextFacets: [{ type: Input }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SearchFilterChipsComponent, [{
        type: Component,
        args: [{
                selector: 'adf-search-filter-chips',
                template: "<mat-chip-list aria-orientation=\"horizontal\">\n    <ng-container *ngFor=\"let category of queryBuilder.categories\">\n        <adf-search-widget-chip [category]=\"category\"></adf-search-widget-chip>\n    </ng-container>\n\n    <ng-container *ngIf=\"facetFiltersService.responseFacets && showContextFacets\">\n        <ng-container *ngFor=\"let field of facetFiltersService.responseFacets\">\n            <adf-search-facet-chip [field]=\"field\" [attr.data-automation-id]=\"'search-fact-chip-' + field.field\" ></adf-search-facet-chip>\n        </ng-container>\n    </ng-container>\n</mat-chip-list>\n",
                encapsulation: ViewEncapsulation.None,
                styles: [".adf-search-filter-chip.mat-chip{background:var(--theme-unselected-chip-bg-color);border:2px solid transparent;max-width:320px;overflow:hidden;text-overflow:ellipsis;transition:border .5s ease-in-out}.adf-search-filter-chip.mat-chip:focus{color:unset}.adf-search-filter-chip.mat-chip.mat-standard-chip:after{background:var(--theme-unselected-chip-bg-color);color:unset}.adf-search-filter-chip.mat-chip.mat-chip-list-wrapper{margin:4px 6px}.adf-search-filter-chip.adf-search-toggle-chip{background:var(--theme-card-bg-color);border:2px solid var(--theme-accent-color)}.adf-search-filter-chip.adf-search-toggle-chip.mat-chip:after{background:unset}.adf-search-filter-chip .adf-search-filter-placeholder{color:var(--theme-disabled-text-color);flex:1 1 auto;white-space:nowrap}.adf-search-filter-chip .adf-search-filter-ellipsis{overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.adf-search-filter-chip .mat-icon{padding-left:5px;padding-top:5px}.adf-search-filter-chip-menu+* .cdk-overlay-pane .mat-menu-panel{border-radius:12px;box-shadow:0 3px 1px -2px rgba(0,0,0,.2),0 2px 2px 0 rgba(0,0,0,.14),0 1px 5px 0 rgba(0,0,0,.12);min-width:320px}"]
            }]
    }], function () { return [{ type: SearchQueryBuilderService, decorators: [{
                type: Inject,
                args: [SEARCH_QUERY_SERVICE_TOKEN]
            }] }, { type: SearchFacetFiltersService }]; }, { showContextFacets: [{
            type: Input
        }] }); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class SearchFilterMenuCardComponent {
    constructor() {
        this.close = new EventEmitter();
    }
    onClose() {
        this.close.emit();
    }
}
SearchFilterMenuCardComponent.ɵfac = function SearchFilterMenuCardComponent_Factory(t) { return new (t || SearchFilterMenuCardComponent)(); };
SearchFilterMenuCardComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: SearchFilterMenuCardComponent, selectors: [["adf-search-filter-menu-card"]], outputs: { close: "close" }, ngContentSelectors: _c28, decls: 12, vars: 3, consts: [[1, "adf-search-filter-menu-card"], [1, "adf-search-filter-title"], [1, "adf-search-filter-title-action", 3, "matTooltip", "click"], [1, "adf-search-filter-content"], [1, "adf-search-filter-actions"]], template: function SearchFilterMenuCardComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef(_c27);
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "div", 1);
        ɵngcc0.ɵɵprojection(2);
        ɵngcc0.ɵɵelementStart(3, "mat-icon", 2);
        ɵngcc0.ɵɵlistener("click", function SearchFilterMenuCardComponent_Template_mat_icon_click_3_listener() { return ctx.onClose(); });
        ɵngcc0.ɵɵpipe(4, "translate");
        ɵngcc0.ɵɵtext(5, " close ");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(6, "mat-divider");
        ɵngcc0.ɵɵelementStart(7, "div", 3);
        ɵngcc0.ɵɵprojection(8, 1);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(9, "mat-divider");
        ɵngcc0.ɵɵelementStart(10, "div", 4);
        ɵngcc0.ɵɵprojection(11, 2);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("matTooltip", ɵngcc0.ɵɵpipeBind1(4, 1, "SEARCH.FILTER.BUTTONS.CLOSE"));
    } }, directives: [ɵngcc6.MatIcon, ɵngcc7.MatTooltip, ɵngcc26.MatDivider], pipes: [ɵngcc8.TranslatePipe], styles: [".adf-search-filter-menu-card{background:var(--theme-card-bg-color);color:var(--theme-text-fg-color)}.adf-search-filter-menu-card .adf-search-filter-title{flex:1 1 auto;font-size:14px;font-style:inherit;font-weight:700;height:32px;letter-spacing:.15px;line-height:24px;padding:16px 12px}.adf-search-filter-menu-card .adf-search-filter-title-action{float:right}.adf-search-filter-menu-card .adf-search-filter-content{overflow:auto;padding:16px 12px}.adf-search-filter-menu-card .adf-search-filter-actions{display:flex;justify-content:space-between;padding:16px 12px}.adf-search-filter-menu-card .adf-search-filter-actions .adf-search-action-button{border-radius:6px}"], encapsulation: 2 });
SearchFilterMenuCardComponent.propDecorators = {
    close: [{ type: Output }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SearchFilterMenuCardComponent, [{
        type: Component,
        args: [{
                selector: 'adf-search-filter-menu-card',
                template: "<div class=\"adf-search-filter-menu-card\">\n    <div class=\"adf-search-filter-title\">\n        <ng-content select=\"filter-title\"></ng-content>\n        <mat-icon class=\"adf-search-filter-title-action\"\n                  (click)=\"onClose()\"\n                  [matTooltip]=\"'SEARCH.FILTER.BUTTONS.CLOSE' | translate\">\n            close\n        </mat-icon>\n    </div>\n\n    <mat-divider></mat-divider>\n\n    <div class=\"adf-search-filter-content\">\n        <ng-content select=\"filter-content\"></ng-content>\n    </div>\n\n    <mat-divider></mat-divider>\n\n    <div class=\"adf-search-filter-actions\">\n        <ng-content select=\"filter-actions\"></ng-content>\n    </div>\n</div>\n",
                encapsulation: ViewEncapsulation.None,
                styles: [".adf-search-filter-menu-card{background:var(--theme-card-bg-color);color:var(--theme-text-fg-color)}.adf-search-filter-menu-card .adf-search-filter-title{flex:1 1 auto;font-size:14px;font-style:inherit;font-weight:700;height:32px;letter-spacing:.15px;line-height:24px;padding:16px 12px}.adf-search-filter-menu-card .adf-search-filter-title-action{float:right}.adf-search-filter-menu-card .adf-search-filter-content{overflow:auto;padding:16px 12px}.adf-search-filter-menu-card .adf-search-filter-actions{display:flex;justify-content:space-between;padding:16px 12px}.adf-search-filter-menu-card .adf-search-filter-actions .adf-search-action-button{border-radius:6px}"]
            }]
    }], function () { return []; }, { close: [{
            type: Output
        }] }); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class SearchFacetFieldComponent {
    constructor(queryBuilder, searchFacetFiltersService, translationService) {
        this.queryBuilder = queryBuilder;
        this.searchFacetFiltersService = searchFacetFiltersService;
        this.translationService = translationService;
        this.displayValue$ = new Subject();
    }
    get canUpdateOnChange() {
        var _a, _b;
        return (_b = (_a = this.field.settings) === null || _a === void 0 ? void 0 : _a.allowUpdateOnChange) !== null && _b !== void 0 ? _b : true;
    }
    onToggleBucket(event, field, bucket) {
        if (event && bucket) {
            if (event.checked) {
                this.selectFacetBucket(field, bucket);
            }
            else {
                this.unselectFacetBucket(field, bucket);
            }
        }
    }
    selectFacetBucket(field, bucket) {
        if (bucket) {
            bucket.checked = true;
            this.queryBuilder.addUserFacetBucket(field, bucket);
            this.searchFacetFiltersService.updateSelectedBuckets();
            if (this.canUpdateOnChange) {
                this.updateDisplayValue();
                this.queryBuilder.update();
            }
        }
    }
    unselectFacetBucket(field, bucket) {
        if (bucket) {
            bucket.checked = false;
            this.queryBuilder.removeUserFacetBucket(field, bucket);
            this.searchFacetFiltersService.updateSelectedBuckets();
            if (this.canUpdateOnChange) {
                this.updateDisplayValue();
                this.queryBuilder.update();
            }
        }
    }
    canResetSelectedBuckets(field) {
        if (field && field.buckets) {
            return field.buckets.items.some((bucket) => bucket.checked);
        }
        return false;
    }
    resetSelectedBuckets(field) {
        if (field && field.buckets) {
            for (const bucket of field.buckets.items) {
                bucket.checked = false;
                this.queryBuilder.removeUserFacetBucket(field, bucket);
            }
            this.searchFacetFiltersService.updateSelectedBuckets();
            if (this.canUpdateOnChange) {
                this.queryBuilder.update();
            }
        }
    }
    getBucketCountDisplay(bucket) {
        return bucket.count === null ? '' : `(${bucket.count})`;
    }
    updateDisplayValue() {
        var _a, _b, _c;
        if (!((_a = this.field.buckets) === null || _a === void 0 ? void 0 : _a.items)) {
            this.displayValue$.next('');
        }
        else {
            const displayValue = (_c = (_b = this.field.buckets) === null || _b === void 0 ? void 0 : _b.items) === null || _c === void 0 ? void 0 : _c.filter((item) => item.checked).map((item) => this.translationService.instant(item.display || item.label)).join(', ');
            this.displayValue$.next(displayValue);
        }
    }
    reset() {
        this.resetSelectedBuckets(this.field);
        this.updateDisplayValue();
        this.queryBuilder.update();
    }
    submitValues() {
        this.updateDisplayValue();
        this.queryBuilder.update();
    }
}
SearchFacetFieldComponent.ɵfac = function SearchFacetFieldComponent_Factory(t) { return new (t || SearchFacetFieldComponent)(ɵngcc0.ɵɵdirectiveInject(SEARCH_QUERY_SERVICE_TOKEN), ɵngcc0.ɵɵdirectiveInject(SearchFacetFiltersService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.TranslationService)); };
SearchFacetFieldComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: SearchFacetFieldComponent, selectors: [["adf-search-facet-field"]], inputs: { field: "field" }, decls: 14, vars: 9, consts: [[1, "adf-search-filter-facet"], [1, "adf-facet-result-filter"], [1, "adf-facet-search-container"], ["mat-icon-button", "", "tabindex", "-1", 1, "adf-facet-search-icon"], ["floatLabel", "never", 1, "adf-facet-search-field"], ["matInput", "", 3, "placeholder", "ngModel", "ngModelChange"], ["mat-button", "", "matSuffix", "", "mat-icon-button", "", 3, "click", 4, "ngIf"], [1, "adf-checklist"], [3, "checked", "change", 4, "ngFor", "ngForOf"], ["class", "adf-facet-buttons", 4, "ngIf"], ["mat-button", "", "matSuffix", "", "mat-icon-button", "", 3, "click"], [3, "checked", "change"], ["matTooltipPosition", "right", 1, "adf-facet-label", 3, "matTooltip"], [1, "adf-facet-buttons"], ["mat-button", "", "color", "primary", 3, "click", 4, "ngIf"], ["mat-button", "", "color", "primary", 3, "click"], ["mat-icon-button", "", 3, "title", "click", 4, "ngIf"], ["mat-icon-button", "", 3, "title", "click"]], template: function SearchFacetFieldComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "div", 1);
        ɵngcc0.ɵɵelementStart(2, "div", 2);
        ɵngcc0.ɵɵelementStart(3, "button", 3);
        ɵngcc0.ɵɵelementStart(4, "mat-icon");
        ɵngcc0.ɵɵtext(5, "search");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(6, "mat-form-field", 4);
        ɵngcc0.ɵɵelementStart(7, "input", 5);
        ɵngcc0.ɵɵlistener("ngModelChange", function SearchFacetFieldComponent_Template_input_ngModelChange_7_listener($event) { return ctx.field.buckets.filterText = $event; });
        ɵngcc0.ɵɵpipe(8, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(9, SearchFacetFieldComponent_button_9_Template, 3, 0, "button", 6);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(10, "div", 7);
        ɵngcc0.ɵɵtemplate(11, SearchFacetFieldComponent_mat_checkbox_11_Template, 5, 10, "mat-checkbox", 8);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(12, SearchFacetFieldComponent_div_12_Template, 2, 1, "div", 9);
        ɵngcc0.ɵɵtemplate(13, SearchFacetFieldComponent_div_13_Template, 4, 3, "div", 9);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(7);
        ɵngcc0.ɵɵpropertyInterpolate("placeholder", ɵngcc0.ɵɵpipeBind1(8, 7, "SEARCH.FILTER.ACTIONS.SEARCH"));
        ɵngcc0.ɵɵproperty("ngModel", ctx.field.buckets.filterText);
        ɵngcc0.ɵɵattribute("data-automation-id", "facet-result-filter-" + ctx.field.label);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.field.buckets.filterText);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.field.buckets);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.field.buckets.fitsPage && !(ctx.field.settings == null ? null : ctx.field.settings.hideDefaultAction));
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.field.buckets.fitsPage);
    } }, directives: [ɵngcc5.MatButton, ɵngcc6.MatIcon, ɵngcc11.MatFormField, ɵngcc13.MatInput, ɵngcc9.DefaultValueAccessor, ɵngcc9.NgControlStatus, ɵngcc9.NgModel, ɵngcc4.NgIf, ɵngcc4.NgForOf, ɵngcc11.MatSuffix, ɵngcc10.MatCheckbox, ɵngcc7.MatTooltip], pipes: [ɵngcc8.TranslatePipe], styles: [".adf-search-filter-facet .adf-checklist{display:flex;flex-direction:column;max-height:180px;overflow-y:auto;padding:5px 0}.adf-search-filter-facet .adf-checklist .mat-checkbox-label{overflow:hidden;text-overflow:ellipsis;width:100%}.adf-search-filter-facet .adf-checklist .mat-checkbox-layout{width:100%}.adf-search-filter-facet .adf-checklist .adf-facet-label{overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.adf-search-filter-facet .adf-checklist .mat-checkbox{margin:5px}.adf-search-filter-facet .adf-checklist .mat-checkbox.mat-checkbox-checked .mat-checkbox-label{font-weight:700}.adf-search-filter-facet .adf-facet-result-filter{padding-bottom:16px}.adf-search-filter-facet .adf-facet-result-filter .adf-facet-search-container{background:var(--theme-background-color);border-radius:6px;display:flex;height:32px}.adf-search-filter-facet .adf-facet-result-filter .adf-facet-search-container .adf-facet-search-icon{margin-top:-4px;width:27px}.adf-search-filter-facet .adf-facet-result-filter .adf-facet-search-container .adf-facet-search-icon .mat-icon{font-size:15px}.adf-search-filter-facet .adf-facet-result-filter .adf-facet-search-container .adf-facet-search-field{flex:1;font-size:14px;letter-spacing:.25px;line-height:24px;margin-top:-16px;padding:2px}.adf-search-filter-facet .adf-facet-result-filter .adf-facet-search-container .adf-facet-search-field .mat-form-field-underline{display:none}.adf-search-filter-facet .adf-facet-result-filter .adf-facet-search-container .adf-facet-search-field .mat-form-field-suffix{padding-right:1px}.adf-search-filter-facet .adf-facet-buttons{text-align:right}.adf-search-filter-facet .adf-facet-buttons .mat-button{text-transform:uppercase}.adf-search-filter-facet .adf-facet-buttons--topSpace{padding-top:15px}.adf-search-filter-facet .mat-checkbox-label,.adf-search-filter-facet .mat-radio-label{color:var(--theme-text-color)}"], encapsulation: 2 });
SearchFacetFieldComponent.ctorParameters = () => [
    { type: SearchQueryBuilderService, decorators: [{ type: Inject, args: [SEARCH_QUERY_SERVICE_TOKEN,] }] },
    { type: SearchFacetFiltersService },
    { type: TranslationService }
];
SearchFacetFieldComponent.propDecorators = {
    field: [{ type: Input }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SearchFacetFieldComponent, [{
        type: Component,
        args: [{
                selector: 'adf-search-facet-field',
                template: "<div class=\"adf-search-filter-facet\">\n    <div class=\"adf-facet-result-filter\">\n        <div class=\"adf-facet-search-container\">\n            <button mat-icon-button class=\"adf-facet-search-icon\" tabindex=\"-1\">\n                <mat-icon>search</mat-icon>\n            </button>\n            <mat-form-field class=\"adf-facet-search-field\" floatLabel=\"never\">\n                <input matInput placeholder=\"{{ 'SEARCH.FILTER.ACTIONS.SEARCH' | translate }}\"\n                       [attr.data-automation-id]=\"'facet-result-filter-'+field.label\" [(ngModel)]=\"field.buckets.filterText\">\n                <button *ngIf=\"field.buckets.filterText\" mat-button matSuffix mat-icon-button\n                        (click)=\"field.buckets.filterText = ''\">\n                    <mat-icon>close</mat-icon>\n                </button>\n            </mat-form-field>\n        </div>\n    </div>\n\n    <div class=\"adf-checklist\">\n        <mat-checkbox *ngFor=\"let bucket of field.buckets\" [checked]=\"bucket.checked\"\n            [attr.data-automation-id]=\"'checkbox-'+field.label+'-'+(bucket.display || bucket.label)\"\n            (change)=\"onToggleBucket($event, field, bucket)\">\n            <div matTooltip=\"{{ bucket.display || bucket.label | translate }} {{ getBucketCountDisplay(bucket) }}\"\n                matTooltipPosition=\"right\" class=\"adf-facet-label\">\n                {{ bucket.display || bucket.label | translate }} {{ getBucketCountDisplay(bucket) }}\n            </div>\n        </mat-checkbox>\n    </div>\n\n    <div class=\"adf-facet-buttons\" *ngIf=\"field.buckets.fitsPage && !field.settings?.hideDefaultAction\">\n        <button *ngIf=\"canResetSelectedBuckets(field)\" mat-button color=\"primary\" (click)=\"resetSelectedBuckets(field)\">\n            {{ 'SEARCH.FILTER.ACTIONS.CLEAR-ALL' | translate }}\n        </button>\n    </div>\n\n    <div class=\"adf-facet-buttons\" *ngIf=\"!field.buckets.fitsPage\">\n        <button mat-icon-button *ngIf=\"canResetSelectedBuckets(field)\"\n            title=\"{{ 'SEARCH.FILTER.ACTIONS.CLEAR-ALL' | translate }}\" (click)=\"resetSelectedBuckets(field)\">\n            <mat-icon>clear</mat-icon>\n        </button>\n        <button mat-icon-button *ngIf=\"field.buckets.canShowLessItems\" (click)=\"field.buckets.showLessItems()\"\n            title=\"{{ 'SEARCH.FILTER.ACTIONS.SHOW-LESS' | translate }}\">\n            <mat-icon>keyboard_arrow_up</mat-icon>\n        </button>\n        <button mat-icon-button *ngIf=\"field.buckets.canShowMoreItems\" (click)=\"field.buckets.showMoreItems()\"\n            title=\"{{ 'SEARCH.FILTER.ACTIONS.SHOW-MORE' | translate }}\">\n            <mat-icon>keyboard_arrow_down</mat-icon>\n        </button>\n    </div>\n</div>\n",
                encapsulation: ViewEncapsulation.None,
                styles: [".adf-search-filter-facet .adf-checklist{display:flex;flex-direction:column;max-height:180px;overflow-y:auto;padding:5px 0}.adf-search-filter-facet .adf-checklist .mat-checkbox-label{overflow:hidden;text-overflow:ellipsis;width:100%}.adf-search-filter-facet .adf-checklist .mat-checkbox-layout{width:100%}.adf-search-filter-facet .adf-checklist .adf-facet-label{overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.adf-search-filter-facet .adf-checklist .mat-checkbox{margin:5px}.adf-search-filter-facet .adf-checklist .mat-checkbox.mat-checkbox-checked .mat-checkbox-label{font-weight:700}.adf-search-filter-facet .adf-facet-result-filter{padding-bottom:16px}.adf-search-filter-facet .adf-facet-result-filter .adf-facet-search-container{background:var(--theme-background-color);border-radius:6px;display:flex;height:32px}.adf-search-filter-facet .adf-facet-result-filter .adf-facet-search-container .adf-facet-search-icon{margin-top:-4px;width:27px}.adf-search-filter-facet .adf-facet-result-filter .adf-facet-search-container .adf-facet-search-icon .mat-icon{font-size:15px}.adf-search-filter-facet .adf-facet-result-filter .adf-facet-search-container .adf-facet-search-field{flex:1;font-size:14px;letter-spacing:.25px;line-height:24px;margin-top:-16px;padding:2px}.adf-search-filter-facet .adf-facet-result-filter .adf-facet-search-container .adf-facet-search-field .mat-form-field-underline{display:none}.adf-search-filter-facet .adf-facet-result-filter .adf-facet-search-container .adf-facet-search-field .mat-form-field-suffix{padding-right:1px}.adf-search-filter-facet .adf-facet-buttons{text-align:right}.adf-search-filter-facet .adf-facet-buttons .mat-button{text-transform:uppercase}.adf-search-filter-facet .adf-facet-buttons--topSpace{padding-top:15px}.adf-search-filter-facet .mat-checkbox-label,.adf-search-filter-facet .mat-radio-label{color:var(--theme-text-color)}"]
            }]
    }], function () { return [{ type: SearchQueryBuilderService, decorators: [{
                type: Inject,
                args: [SEARCH_QUERY_SERVICE_TOKEN]
            }] }, { type: SearchFacetFiltersService }, { type: ɵngcc1.TranslationService }]; }, { field: [{
            type: Input
        }] }); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class SearchWidgetChipComponent {
    constructor(focusTrapFactory) {
        this.focusTrapFactory = focusTrapFactory;
    }
    onMenuOpen() {
        if (this.menuContainer && !this.focusTrap) {
            this.focusTrap = this.focusTrapFactory.create(this.menuContainer.nativeElement);
            this.focusTrap.focusInitialElement();
        }
    }
    onClosed() {
        this.focusTrap.destroy();
        this.focusTrap = null;
    }
    onRemove() {
        this.widgetContainerComponent.resetInnerWidget();
        this.menuTrigger.closeMenu();
    }
    onApply() {
        this.widgetContainerComponent.applyInnerWidget();
        this.menuTrigger.closeMenu();
    }
}
SearchWidgetChipComponent.ɵfac = function SearchWidgetChipComponent_Factory(t) { return new (t || SearchWidgetChipComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc18.ConfigurableFocusTrapFactory)); };
SearchWidgetChipComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: SearchWidgetChipComponent, selectors: [["adf-search-widget-chip"]], viewQuery: function SearchWidgetChipComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c29, true);
        ɵngcc0.ɵɵviewQuery(_c30, true);
        ɵngcc0.ɵɵviewQuery(SearchWidgetContainerComponent, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.menuContainer = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.menuTrigger = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.widgetContainerComponent = _t.first);
    } }, inputs: { category: "category" }, decls: 33, vars: 32, consts: [["disableRipple", "", 1, "adf-search-filter-chip", 3, "matMenuTriggerFor", "onMenuOpen"], ["menuTrigger", "matMenuTrigger"], [1, "adf-search-filter-placeholder"], [1, "adf-search-filter-ellipsis"], [4, "ngIf"], ["class", "adf-search-filter-ellipsis", 4, "ngIf"], ["backdropClass", "adf-search-filter-chip-menu", 3, "closed"], ["menu", "matMenu"], ["menuContainer", ""], [3, "click", "keydown.tab", "close"], ["ngProjectAs", "filter-title", 5, ["filter-title"]], ["ngProjectAs", "filter-content", 5, ["filter-content"]], [3, "id", "selector", "settings"], ["widget", ""], ["ngProjectAs", "filter-actions", 5, ["filter-actions"]], ["mat-flat-button", "", "color", "accent", "id", "cancel-filter-button", 1, "adf-search-action-button", 3, "click"], ["mat-flat-button", "", "color", "primary", "id", "apply-filter-button", 1, "adf-search-action-button", 3, "click"]], template: function SearchWidgetChipComponent_Template(rf, ctx) { if (rf & 1) {
        const _r8 = ɵngcc0.ɵɵgetCurrentView();
        ɵngcc0.ɵɵelementStart(0, "mat-chip", 0, 1);
        ɵngcc0.ɵɵlistener("onMenuOpen", function SearchWidgetChipComponent_Template_mat_chip_onMenuOpen_0_listener() { return ctx.onMenuOpen(); });
        ɵngcc0.ɵɵpipe(2, "async");
        ɵngcc0.ɵɵpipe(3, "async");
        ɵngcc0.ɵɵelementStart(4, "span", 2);
        ɵngcc0.ɵɵelementStart(5, "span", 3);
        ɵngcc0.ɵɵtext(6);
        ɵngcc0.ɵɵpipe(7, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(8, SearchWidgetChipComponent_ng_container_8_Template, 2, 0, "ng-container", 4);
        ɵngcc0.ɵɵpipe(9, "async");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(10, SearchWidgetChipComponent_span_10_Template, 3, 3, "span", 5);
        ɵngcc0.ɵɵpipe(11, "async");
        ɵngcc0.ɵɵelementStart(12, "mat-icon");
        ɵngcc0.ɵɵtext(13, "keyboard_arrow_down");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(14, "mat-menu", 6, 7);
        ɵngcc0.ɵɵlistener("closed", function SearchWidgetChipComponent_Template_mat_menu_closed_14_listener() { return ctx.onClosed(); });
        ɵngcc0.ɵɵelementStart(16, "div", null, 8);
        ɵngcc0.ɵɵelementStart(18, "adf-search-filter-menu-card", 9);
        ɵngcc0.ɵɵlistener("click", function SearchWidgetChipComponent_Template_adf_search_filter_menu_card_click_18_listener($event) { return $event.stopPropagation(); })("keydown.tab", function SearchWidgetChipComponent_Template_adf_search_filter_menu_card_keydown_tab_18_listener($event) { return $event.stopPropagation(); })("close", function SearchWidgetChipComponent_Template_adf_search_filter_menu_card_close_18_listener() { ɵngcc0.ɵɵrestoreView(_r8); const _r0 = ɵngcc0.ɵɵreference(1); return _r0.closeMenu(); });
        ɵngcc0.ɵɵelementContainerStart(19, 10);
        ɵngcc0.ɵɵtext(20);
        ɵngcc0.ɵɵpipe(21, "translate");
        ɵngcc0.ɵɵtemplate(22, SearchWidgetChipComponent_ng_container_22_Template, 2, 1, "ng-container", 4);
        ɵngcc0.ɵɵelementContainerEnd();
        ɵngcc0.ɵɵelementContainerStart(23, 11);
        ɵngcc0.ɵɵelement(24, "adf-search-widget-container", 12, 13);
        ɵngcc0.ɵɵelementContainerEnd();
        ɵngcc0.ɵɵelementContainerStart(26, 14);
        ɵngcc0.ɵɵelementStart(27, "button", 15);
        ɵngcc0.ɵɵlistener("click", function SearchWidgetChipComponent_Template_button_click_27_listener() { return ctx.onRemove(); });
        ɵngcc0.ɵɵtext(28);
        ɵngcc0.ɵɵpipe(29, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(30, "button", 16);
        ɵngcc0.ɵɵlistener("click", function SearchWidgetChipComponent_Template_button_click_30_listener() { return ctx.onApply(); });
        ɵngcc0.ɵɵtext(31);
        ɵngcc0.ɵɵpipe(32, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementContainerEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        const _r0 = ɵngcc0.ɵɵreference(1);
        const _r3 = ɵngcc0.ɵɵreference(15);
        const _r6 = ɵngcc0.ɵɵreference(25);
        ɵngcc0.ɵɵclassProp("adf-search-toggle-chip", ɵngcc0.ɵɵpipeBind1(2, 16, _r6.getDisplayValue()) || _r0.menuOpen);
        ɵngcc0.ɵɵproperty("matMenuTriggerFor", _r3);
        ɵngcc0.ɵɵattribute("data-automation-id", "search-filter-chip-" + ctx.category.name)("title", ɵngcc0.ɵɵpipeBind1(3, 18, _r6.getDisplayValue()));
        ɵngcc0.ɵɵadvance(6);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(7, 20, ctx.category.name));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ɵngcc0.ɵɵpipeBind1(9, 22, _r6.getDisplayValue()));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ɵngcc0.ɵɵpipeBind1(11, 24, _r6.getDisplayValue()));
        ɵngcc0.ɵɵadvance(6);
        ɵngcc0.ɵɵattribute("data-automation-id", "search-field-" + ctx.category.name);
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(21, 26, ctx.category.name), " ");
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.category.component.settings.unit);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("id", ctx.category.id)("selector", ctx.category.component.selector)("settings", ctx.category.component.settings);
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(29, 28, "SEARCH.FILTER.BUTTONS.REMOVE"), " ");
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(32, 30, "SEARCH.FILTER.BUTTONS.APPLY"), " ");
    } }, directives: [ɵngcc15.MatChip, ɵngcc24.MatMenuTrigger, ɵngcc4.NgIf, ɵngcc6.MatIcon, ɵngcc24._MatMenu, SearchFilterMenuCardComponent, SearchWidgetContainerComponent, ɵngcc5.MatButton], pipes: [ɵngcc4.AsyncPipe, ɵngcc8.TranslatePipe], encapsulation: 2 });
SearchWidgetChipComponent.ctorParameters = () => [
    { type: ConfigurableFocusTrapFactory }
];
SearchWidgetChipComponent.propDecorators = {
    category: [{ type: Input }],
    menuContainer: [{ type: ViewChild, args: ['menuContainer', { static: false },] }],
    menuTrigger: [{ type: ViewChild, args: ['menuTrigger', { static: false },] }],
    widgetContainerComponent: [{ type: ViewChild, args: [SearchWidgetContainerComponent, { static: false },] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SearchWidgetChipComponent, [{
        type: Component,
        args: [{
                selector: 'adf-search-widget-chip',
                template: "<mat-chip [attr.data-automation-id]=\"'search-filter-chip-' + category.name\"\n          disableRipple\n          class=\"adf-search-filter-chip\"\n          [class.adf-search-toggle-chip]=\"(widget.getDisplayValue() | async) || menuTrigger.menuOpen\"\n          [matMenuTriggerFor]=\"menu\"\n          (onMenuOpen)=\"onMenuOpen()\"\n          [attr.title]=\"widget.getDisplayValue() | async\"\n          #menuTrigger=\"matMenuTrigger\">\n    <span class=\"adf-search-filter-placeholder\">\n        <span class=\"adf-search-filter-ellipsis\">{{ category.name | translate }}</span>\n        <ng-container *ngIf=\"widget.getDisplayValue() | async\">:</ng-container>\n    </span>\n    <span class=\"adf-search-filter-ellipsis\" *ngIf=\"widget.getDisplayValue() | async as displayValue\">\n        &nbsp;{{ displayValue | translate }}\n    </span>\n    <mat-icon>keyboard_arrow_down</mat-icon>\n</mat-chip>\n\n<mat-menu #menu=\"matMenu\" backdropClass=\"adf-search-filter-chip-menu\" (closed)=\"onClosed()\">\n    <div #menuContainer [attr.data-automation-id]=\"'search-field-' + category.name\">\n        <adf-search-filter-menu-card (click)=\"$event.stopPropagation()\"\n                                     (keydown.tab)=\"$event.stopPropagation();\"\n                                     (close)=\"menuTrigger.closeMenu()\">\n\n            <ng-container ngProjectAs=\"filter-title\">\n                {{ category.name | translate }} <ng-container *ngIf=\"category.component.settings.unit\">({{category.component.settings.unit}})</ng-container>\n            </ng-container>\n\n            <ng-container ngProjectAs=\"filter-content\">\n                <adf-search-widget-container #widget\n                                             [id]=\"category.id\"\n                                             [selector]=\"category.component.selector\"\n                                             [settings]=\"category.component.settings\">\n                </adf-search-widget-container>\n            </ng-container>\n\n            <ng-container ngProjectAs=\"filter-actions\">\n                <button mat-flat-button class=\"adf-search-action-button\" color=\"accent\" (click)=\"onRemove()\" id=\"cancel-filter-button\">\n                    {{ 'SEARCH.FILTER.BUTTONS.REMOVE' | translate }}\n                </button>\n                <button mat-flat-button class=\"adf-search-action-button\" color=\"primary\" (click)=\"onApply()\" id=\"apply-filter-button\">\n                    {{ 'SEARCH.FILTER.BUTTONS.APPLY' | translate }}\n                </button>\n            </ng-container>\n        </adf-search-filter-menu-card>\n    </div>\n</mat-menu>\n",
                encapsulation: ViewEncapsulation.None
            }]
    }], function () { return [{ type: ɵngcc18.ConfigurableFocusTrapFactory }]; }, { category: [{
            type: Input
        }], menuContainer: [{
            type: ViewChild,
            args: ['menuContainer', { static: false }]
        }], menuTrigger: [{
            type: ViewChild,
            args: ['menuTrigger', { static: false }]
        }], widgetContainerComponent: [{
            type: ViewChild,
            args: [SearchWidgetContainerComponent, { static: false }]
        }] }); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class SearchFacetChipComponent {
    constructor(focusTrapFactory) {
        this.focusTrapFactory = focusTrapFactory;
    }
    onMenuOpen() {
        if (this.menuContainer && !this.focusTrap) {
            this.focusTrap = this.focusTrapFactory.create(this.menuContainer.nativeElement);
            this.focusTrap.focusInitialElement();
        }
    }
    onClosed() {
        this.focusTrap.destroy();
        this.focusTrap = null;
    }
    onRemove() {
        this.facetFieldComponent.reset();
        this.menuTrigger.closeMenu();
    }
    onApply() {
        this.facetFieldComponent.submitValues();
        this.menuTrigger.closeMenu();
    }
}
SearchFacetChipComponent.ɵfac = function SearchFacetChipComponent_Factory(t) { return new (t || SearchFacetChipComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc18.ConfigurableFocusTrapFactory)); };
SearchFacetChipComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: SearchFacetChipComponent, selectors: [["adf-search-facet-chip"]], viewQuery: function SearchFacetChipComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c29, true);
        ɵngcc0.ɵɵviewQuery(_c30, true);
        ɵngcc0.ɵɵviewQuery(SearchFacetFieldComponent, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.menuContainer = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.menuTrigger = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.facetFieldComponent = _t.first);
    } }, inputs: { field: "field" }, decls: 32, vars: 29, consts: [["disableRipple", "", 1, "adf-search-filter-chip", 3, "matMenuTriggerFor", "onMenuOpen"], ["menuTrigger", "matMenuTrigger"], [1, "adf-search-filter-placeholder"], [1, "adf-search-filter-ellipsis"], [4, "ngIf"], ["class", "adf-search-filter-ellipsis", 4, "ngIf"], ["backdropClass", "adf-search-filter-chip-menu", 3, "closed"], ["menu", "matMenu"], ["menuContainer", ""], [3, "click", "keydown.tab", "close"], ["ngProjectAs", "filter-title", 5, ["filter-title"]], ["ngProjectAs", "filter-content", 5, ["filter-content"]], [3, "field"], ["facetField", ""], ["ngProjectAs", "filter-actions", 5, ["filter-actions"]], ["mat-flat-button", "", "color", "accent", "id", "cancel-filter-button", 1, "adf-search-action-button", 3, "click"], ["mat-flat-button", "", "color", "primary", "id", "apply-filter-button", 1, "adf-search-action-button", 3, "click"]], template: function SearchFacetChipComponent_Template(rf, ctx) { if (rf & 1) {
        const _r7 = ɵngcc0.ɵɵgetCurrentView();
        ɵngcc0.ɵɵelementStart(0, "mat-chip", 0, 1);
        ɵngcc0.ɵɵlistener("onMenuOpen", function SearchFacetChipComponent_Template_mat_chip_onMenuOpen_0_listener() { return ctx.onMenuOpen(); });
        ɵngcc0.ɵɵpipe(2, "async");
        ɵngcc0.ɵɵpipe(3, "async");
        ɵngcc0.ɵɵelementStart(4, "span", 2);
        ɵngcc0.ɵɵelementStart(5, "span", 3);
        ɵngcc0.ɵɵtext(6);
        ɵngcc0.ɵɵpipe(7, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(8, SearchFacetChipComponent_ng_container_8_Template, 2, 0, "ng-container", 4);
        ɵngcc0.ɵɵpipe(9, "async");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(10, SearchFacetChipComponent_span_10_Template, 3, 3, "span", 5);
        ɵngcc0.ɵɵpipe(11, "async");
        ɵngcc0.ɵɵelementStart(12, "mat-icon");
        ɵngcc0.ɵɵtext(13, "keyboard_arrow_down");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(14, "mat-menu", 6, 7);
        ɵngcc0.ɵɵlistener("closed", function SearchFacetChipComponent_Template_mat_menu_closed_14_listener() { return ctx.onClosed(); });
        ɵngcc0.ɵɵelementStart(16, "div", null, 8);
        ɵngcc0.ɵɵelementStart(18, "adf-search-filter-menu-card", 9);
        ɵngcc0.ɵɵlistener("click", function SearchFacetChipComponent_Template_adf_search_filter_menu_card_click_18_listener($event) { return $event.stopPropagation(); })("keydown.tab", function SearchFacetChipComponent_Template_adf_search_filter_menu_card_keydown_tab_18_listener($event) { return $event.stopPropagation(); })("close", function SearchFacetChipComponent_Template_adf_search_filter_menu_card_close_18_listener() { ɵngcc0.ɵɵrestoreView(_r7); const _r0 = ɵngcc0.ɵɵreference(1); return _r0.closeMenu(); });
        ɵngcc0.ɵɵelementContainerStart(19, 10);
        ɵngcc0.ɵɵtext(20);
        ɵngcc0.ɵɵpipe(21, "translate");
        ɵngcc0.ɵɵelementContainerEnd();
        ɵngcc0.ɵɵelementContainerStart(22, 11);
        ɵngcc0.ɵɵelement(23, "adf-search-facet-field", 12, 13);
        ɵngcc0.ɵɵelementContainerEnd();
        ɵngcc0.ɵɵelementContainerStart(25, 14);
        ɵngcc0.ɵɵelementStart(26, "button", 15);
        ɵngcc0.ɵɵlistener("click", function SearchFacetChipComponent_Template_button_click_26_listener() { return ctx.onRemove(); });
        ɵngcc0.ɵɵtext(27);
        ɵngcc0.ɵɵpipe(28, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(29, "button", 16);
        ɵngcc0.ɵɵlistener("click", function SearchFacetChipComponent_Template_button_click_29_listener() { return ctx.onApply(); });
        ɵngcc0.ɵɵtext(30);
        ɵngcc0.ɵɵpipe(31, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementContainerEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        const _r0 = ɵngcc0.ɵɵreference(1);
        const _r3 = ɵngcc0.ɵɵreference(15);
        const _r5 = ɵngcc0.ɵɵreference(24);
        ɵngcc0.ɵɵclassProp("adf-search-toggle-chip", ɵngcc0.ɵɵpipeBind1(2, 13, _r5.displayValue$) || _r0.menuOpen);
        ɵngcc0.ɵɵproperty("matMenuTriggerFor", _r3);
        ɵngcc0.ɵɵattribute("data-automation-id", "search-filter-chip-" + ctx.field.label)("title", ɵngcc0.ɵɵpipeBind1(3, 15, _r5.displayValue$));
        ɵngcc0.ɵɵadvance(6);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(7, 17, ctx.field.label));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ɵngcc0.ɵɵpipeBind1(9, 19, _r5.displayValue$));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ɵngcc0.ɵɵpipeBind1(11, 21, _r5.displayValue$));
        ɵngcc0.ɵɵadvance(6);
        ɵngcc0.ɵɵattribute("data-automation-id", "search-field-" + ctx.field.label);
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(21, 23, ctx.field.label), " ");
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("field", ctx.field);
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(28, 25, "SEARCH.FILTER.BUTTONS.REMOVE"), " ");
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(31, 27, "SEARCH.FILTER.BUTTONS.APPLY"), " ");
    } }, directives: [ɵngcc15.MatChip, ɵngcc24.MatMenuTrigger, ɵngcc4.NgIf, ɵngcc6.MatIcon, ɵngcc24._MatMenu, SearchFilterMenuCardComponent, SearchFacetFieldComponent, ɵngcc5.MatButton], pipes: [ɵngcc4.AsyncPipe, ɵngcc8.TranslatePipe], encapsulation: 2 });
SearchFacetChipComponent.ctorParameters = () => [
    { type: ConfigurableFocusTrapFactory }
];
SearchFacetChipComponent.propDecorators = {
    field: [{ type: Input }],
    menuContainer: [{ type: ViewChild, args: ['menuContainer', { static: false },] }],
    menuTrigger: [{ type: ViewChild, args: ['menuTrigger', { static: false },] }],
    facetFieldComponent: [{ type: ViewChild, args: [SearchFacetFieldComponent, { static: false },] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SearchFacetChipComponent, [{
        type: Component,
        args: [{
                selector: 'adf-search-facet-chip',
                template: "<mat-chip [attr.data-automation-id]=\"'search-filter-chip-' + field.label\"\n          disableRipple\n          class=\"adf-search-filter-chip\"\n          [class.adf-search-toggle-chip]=\"(facetField.displayValue$ | async) || menuTrigger.menuOpen\"\n          [matMenuTriggerFor]=\"menu\"\n          (onMenuOpen)=\"onMenuOpen()\"\n          [attr.title]=\"facetField.displayValue$ | async\"\n          #menuTrigger=\"matMenuTrigger\">\n\n    <span class=\"adf-search-filter-placeholder\">\n        <span class=\"adf-search-filter-ellipsis\">{{ field.label | translate }}</span>\n        <ng-container *ngIf=\"facetField.displayValue$ | async\">:</ng-container>\n    </span>\n\n    <span class=\"adf-search-filter-ellipsis\" *ngIf=\"facetField.displayValue$ | async as displayValue\">\n        &nbsp; {{ displayValue | translate }}\n    </span>\n    <mat-icon>keyboard_arrow_down</mat-icon>\n</mat-chip>\n\n<mat-menu #menu=\"matMenu\" backdropClass=\"adf-search-filter-chip-menu\" (closed)=\"onClosed()\">\n    <div #menuContainer [attr.data-automation-id]=\"'search-field-' + field.label\">\n        <adf-search-filter-menu-card (click)=\"$event.stopPropagation()\"\n                                     (keydown.tab)=\"$event.stopPropagation();\"\n                                     (close)=\"menuTrigger.closeMenu()\">\n            <ng-container ngProjectAs=\"filter-title\">\n                {{ field.label | translate }}\n            </ng-container>\n            <ng-container ngProjectAs=\"filter-content\">\n                <adf-search-facet-field [field]=\"field\" #facetField></adf-search-facet-field>\n            </ng-container>\n            <ng-container ngProjectAs=\"filter-actions\">\n                <button mat-flat-button class=\"adf-search-action-button\" color=\"accent\" (click)=\"onRemove()\" id=\"cancel-filter-button\">\n                    {{ 'SEARCH.FILTER.BUTTONS.REMOVE' | translate }}\n                </button>\n                <button mat-flat-button class=\"adf-search-action-button\" color=\"primary\" (click)=\"onApply()\" id=\"apply-filter-button\">\n                    {{ 'SEARCH.FILTER.BUTTONS.APPLY' | translate }}\n                </button>\n            </ng-container>\n        </adf-search-filter-menu-card>\n    </div>\n</mat-menu>\n",
                encapsulation: ViewEncapsulation.None
            }]
    }], function () { return [{ type: ɵngcc18.ConfigurableFocusTrapFactory }]; }, { field: [{
            type: Input
        }], menuContainer: [{
            type: ViewChild,
            args: ['menuContainer', { static: false }]
        }], menuTrigger: [{
            type: ViewChild,
            args: ['menuTrigger', { static: false }]
        }], facetFieldComponent: [{
            type: ViewChild,
            args: [SearchFacetFieldComponent, { static: false }]
        }] }); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class ResetSearchDirective {
    constructor(filterService) {
        this.filterService = filterService;
    }
    onClick() {
        this.filterService.reset();
    }
}
ResetSearchDirective.ɵfac = function ResetSearchDirective_Factory(t) { return new (t || ResetSearchDirective)(ɵngcc0.ɵɵdirectiveInject(SearchFacetFiltersService)); };
ResetSearchDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ResetSearchDirective, selectors: [["", "adf-reset-search", ""]], hostBindings: function ResetSearchDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function ResetSearchDirective_click_HostBindingHandler() { return ctx.onClick(); });
    } } });
ResetSearchDirective.ctorParameters = () => [
    { type: SearchFacetFiltersService }
];
ResetSearchDirective.propDecorators = {
    onClick: [{ type: HostListener, args: ['click',] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ResetSearchDirective, [{
        type: Directive,
        args: [{
                selector: '[adf-reset-search]'
            }]
    }], function () { return [{ type: SearchFacetFiltersService }]; }, { onClick: [{
            type: HostListener,
            args: ['click']
        }] }); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class SearchModule {
}
SearchModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: SearchModule });
SearchModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function SearchModule_Factory(t) { return new (t || SearchModule)(); }, providers: [
        { provide: SEARCH_QUERY_SERVICE_TOKEN, useExisting: SearchQueryBuilderService }
    ], imports: [[
            CommonModule,
            FormsModule,
            ReactiveFormsModule,
            MaterialModule,
            CoreModule
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(SearchModule, { declarations: function () { return [SearchComponent, SearchControlComponent, EmptySearchResultComponent, SearchFilterComponent, SearchChipListComponent, SearchWidgetContainerComponent, SearchTextComponent, SearchRadioComponent, SearchSliderComponent, SearchNumberRangeComponent, SearchPanelComponent, SearchCheckListComponent, SearchDateRangeComponent, SearchDatetimeRangeComponent, SearchSortingPickerComponent, SearchFilterContainerComponent, SearchFormComponent, SearchFilterChipsComponent, SearchFilterMenuCardComponent, SearchFacetFieldComponent, SearchWidgetChipComponent, SearchFacetChipComponent, ResetSearchDirective]; }, imports: function () { return [CommonModule,
        FormsModule,
        ReactiveFormsModule, MaterialModule, CoreModule]; }, exports: function () { return [SearchComponent, SearchControlComponent, EmptySearchResultComponent, SearchFilterComponent, SearchChipListComponent, SearchWidgetContainerComponent, SearchTextComponent, SearchRadioComponent, SearchSliderComponent, SearchNumberRangeComponent, SearchPanelComponent, SearchCheckListComponent, SearchDateRangeComponent, SearchDatetimeRangeComponent, SearchSortingPickerComponent, SearchFilterContainerComponent, SearchFormComponent, SearchFilterChipsComponent, SearchFilterMenuCardComponent, SearchFacetFieldComponent, ResetSearchDirective]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SearchModule, [{
        type: NgModule,
        args: [{
                imports: [
                    CommonModule,
                    FormsModule,
                    ReactiveFormsModule,
                    MaterialModule,
                    CoreModule
                ],
                declarations: [
                    SearchComponent,
                    SearchControlComponent,
                    EmptySearchResultComponent,
                    SearchFilterComponent,
                    SearchChipListComponent,
                    SearchWidgetContainerComponent,
                    SearchTextComponent,
                    SearchRadioComponent,
                    SearchSliderComponent,
                    SearchNumberRangeComponent,
                    SearchPanelComponent,
                    SearchCheckListComponent,
                    SearchDateRangeComponent,
                    SearchDatetimeRangeComponent,
                    SearchSortingPickerComponent,
                    SearchFilterContainerComponent,
                    SearchFormComponent,
                    SearchFilterChipsComponent,
                    SearchFilterMenuCardComponent,
                    SearchFacetFieldComponent,
                    SearchWidgetChipComponent,
                    SearchFacetChipComponent,
                    ResetSearchDirective
                ],
                exports: [
                    SearchComponent,
                    SearchControlComponent,
                    EmptySearchResultComponent,
                    SearchFilterComponent,
                    SearchChipListComponent,
                    SearchWidgetContainerComponent,
                    SearchTextComponent,
                    SearchRadioComponent,
                    SearchSliderComponent,
                    SearchNumberRangeComponent,
                    SearchPanelComponent,
                    SearchCheckListComponent,
                    SearchDateRangeComponent,
                    SearchDatetimeRangeComponent,
                    SearchSortingPickerComponent,
                    SearchFilterContainerComponent,
                    SearchFormComponent,
                    SearchFilterChipsComponent,
                    SearchFilterMenuCardComponent,
                    SearchFacetFieldComponent,
                    ResetSearchDirective
                ],
                providers: [
                    { provide: SEARCH_QUERY_SERVICE_TOKEN, useExisting: SearchQueryBuilderService }
                ]
            }]
    }], null, null); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class DocumentListModule {
}
DocumentListModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: DocumentListModule });
DocumentListModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function DocumentListModule_Factory(t) { return new (t || DocumentListModule)(); }, imports: [[
            CoreModule,
            CommonModule,
            FlexLayoutModule,
            MaterialModule,
            UploadModule,
            EditJsonDialogModule,
            SearchModule
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DocumentListModule, { declarations: function () { return [DocumentListComponent, TrashcanNameColumnComponent, LibraryStatusColumnComponent, LibraryRoleColumnComponent, LibraryNameColumnComponent, NameColumnComponent, ContentActionComponent, ContentActionListComponent, FilterHeaderComponent]; }, imports: function () { return [CoreModule,
        CommonModule,
        FlexLayoutModule, MaterialModule, UploadModule, EditJsonDialogModule, SearchModule]; }, exports: function () { return [DocumentListComponent, TrashcanNameColumnComponent, LibraryStatusColumnComponent, LibraryRoleColumnComponent, LibraryNameColumnComponent, NameColumnComponent, ContentActionComponent, ContentActionListComponent, FilterHeaderComponent]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DocumentListModule, [{
        type: NgModule,
        args: [{
                imports: [
                    CoreModule,
                    CommonModule,
                    FlexLayoutModule,
                    MaterialModule,
                    UploadModule,
                    EditJsonDialogModule,
                    SearchModule
                ],
                declarations: [
                    DocumentListComponent,
                    TrashcanNameColumnComponent,
                    LibraryStatusColumnComponent,
                    LibraryRoleColumnComponent,
                    LibraryNameColumnComponent,
                    NameColumnComponent,
                    ContentActionComponent,
                    ContentActionListComponent,
                    FilterHeaderComponent
                ],
                exports: [
                    DocumentListComponent,
                    TrashcanNameColumnComponent,
                    LibraryStatusColumnComponent,
                    LibraryRoleColumnComponent,
                    LibraryNameColumnComponent,
                    NameColumnComponent,
                    ContentActionComponent,
                    ContentActionListComponent,
                    FilterHeaderComponent
                ]
            }]
    }], null, null); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var Relations;
(function (Relations) {
    Relations["Members"] = "members";
    Relations["Containers"] = "containers";
})(Relations || (Relations = {}));
class DropdownSitesComponent {
    constructor(sitesService, logService) {
        this.sitesService = sitesService;
        this.logService = logService;
        this.hideMyFiles = false;
        this.siteList = null;
        this.value = null;
        this.placeholder = 'DROPDOWN.PLACEHOLDER_LABEL';
        this.change = new EventEmitter();
        this.loading = true;
        this.skipCount = 0;
        this.selected = null;
        this.MY_FILES_VALUE = '-my-';
    }
    ngOnInit() {
        if (!this.siteList) {
            this.loadSiteList();
        }
    }
    loadAllOnScroll() {
        if (this.isInfiniteScrollingEnabled()) {
            this.loading = true;
            this.loadSiteList();
        }
    }
    selectedSite(event) {
        this.change.emit(event.value);
    }
    loadSiteList() {
        const extendedOptions = {
            skipCount: this.skipCount,
            maxItems: InfiniteSelectScrollDirective.MAX_ITEMS
        };
        this.skipCount += InfiniteSelectScrollDirective.MAX_ITEMS;
        if (this.relations) {
            extendedOptions.relations = [this.relations];
        }
        this.sitesService.getSites(extendedOptions).subscribe((sitePaging) => {
            if (!this.siteList) {
                this.siteList = this.relations === Relations.Members ? this.filteredResultsByMember(sitePaging) : sitePaging;
                if (!this.hideMyFiles) {
                    const siteEntry = new SiteEntry({
                        entry: {
                            id: this.MY_FILES_VALUE,
                            guid: this.MY_FILES_VALUE,
                            title: 'DROPDOWN.MY_FILES_OPTION'
                        }
                    });
                    this.siteList.list.entries.unshift(siteEntry);
                    if (!this.value) {
                        this.value = this.MY_FILES_VALUE;
                    }
                }
            }
            else {
                const siteList = this.relations === Relations.Members ? this.filteredResultsByMember(sitePaging) : sitePaging;
                this.siteList.list.entries = this.siteList.list.entries.concat(siteList.list.entries);
                this.siteList.list.pagination = sitePaging.list.pagination;
            }
            this.selected = this.siteList.list.entries.find((site) => site.entry.id === this.value);
            if (this.value && !this.selected && this.siteListHasMoreItems()) {
                this.loadSiteList();
            }
            this.loading = false;
        }, (error) => {
            this.logService.error(error);
        });
    }
    showLoading() {
        return this.loading && this.siteListHasMoreItems();
    }
    isInfiniteScrollingEnabled() {
        return !this.loading && this.siteListHasMoreItems();
    }
    siteListHasMoreItems() {
        return this.siteList && this.siteList.list.pagination && this.siteList.list.pagination.hasMoreItems;
    }
    filteredResultsByMember(sites) {
        const loggedUserName = this.sitesService.getEcmCurrentLoggedUserName();
        sites.list.entries = sites.list.entries.filter((site) => this.isCurrentUserMember(site, loggedUserName));
        return sites;
    }
    isCurrentUserMember(site, loggedUserName) {
        return site.entry.visibility === 'PUBLIC' ||
            !!site.relations.members.list.entries.find((member) => {
                return member.entry.id.toLowerCase() === loggedUserName.toLowerCase();
            });
    }
}
DropdownSitesComponent.ɵfac = function DropdownSitesComponent_Factory(t) { return new (t || DropdownSitesComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.SitesService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.LogService)); };
DropdownSitesComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: DropdownSitesComponent, selectors: [["adf-sites-dropdown"]], hostAttrs: [1, "adf-sites-dropdown"], inputs: { hideMyFiles: "hideMyFiles", siteList: "siteList", value: "value", placeholder: "placeholder", relations: "relations" }, outputs: { change: "change" }, decls: 7, vars: 6, consts: [["id", "site-dropdown-container", 1, "adf-site-dropdown-container"], ["adf-infinite-select-scroll", "", "data-automation-id", "site-my-files-option", "id", "site-dropdown", "floatPlaceholder", "never", 1, "adf-site-dropdown-list-element", 3, "placeholder", "value", "scrollEnd", "valueChange", "selectionChange"], ["siteSelect", ""], [3, "value", 4, "ngFor", "ngForOf"], ["disabled", "true", "data-automation-id", "site-loading", 4, "ngIf"], [3, "value"], ["disabled", "true", "data-automation-id", "site-loading"]], template: function DropdownSitesComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "mat-form-field");
        ɵngcc0.ɵɵelementStart(2, "mat-select", 1, 2);
        ɵngcc0.ɵɵlistener("scrollEnd", function DropdownSitesComponent_Template_mat_select_scrollEnd_2_listener() { return ctx.loadAllOnScroll(); })("valueChange", function DropdownSitesComponent_Template_mat_select_valueChange_2_listener($event) { return ctx.selected = $event; })("selectionChange", function DropdownSitesComponent_Template_mat_select_selectionChange_2_listener($event) { return ctx.selectedSite($event); });
        ɵngcc0.ɵɵpipe(4, "translate");
        ɵngcc0.ɵɵtemplate(5, DropdownSitesComponent_mat_option_5_Template, 3, 4, "mat-option", 3);
        ɵngcc0.ɵɵtemplate(6, DropdownSitesComponent_mat_option_6_Template, 3, 3, "mat-option", 4);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵpropertyInterpolate("placeholder", ɵngcc0.ɵɵpipeBind1(4, 4, ctx.placeholder));
        ɵngcc0.ɵɵproperty("value", ctx.selected);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.siteList == null ? null : ctx.siteList.list.entries);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.showLoading());
    } }, directives: [ɵngcc11.MatFormField, ɵngcc27.MatSelect, ɵngcc1.InfiniteSelectScrollDirective, ɵngcc4.NgForOf, ɵngcc4.NgIf, ɵngcc19.MatOption], pipes: [ɵngcc8.TranslatePipe], styles: [".adf-sites-dropdown.adf-full-width .mat-form-field{width:100%}"], encapsulation: 2 });
DropdownSitesComponent.ctorParameters = () => [
    { type: SitesService },
    { type: LogService }
];
DropdownSitesComponent.propDecorators = {
    hideMyFiles: [{ type: Input }],
    siteList: [{ type: Input }],
    value: [{ type: Input }],
    placeholder: [{ type: Input }],
    relations: [{ type: Input }],
    change: [{ type: Output }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DropdownSitesComponent, [{
        type: Component,
        args: [{
                selector: 'adf-sites-dropdown',
                template: "<div id=\"site-dropdown-container\" class=\"adf-site-dropdown-container\">\n    <mat-form-field>\n        <mat-select\n            adf-infinite-select-scroll\n            (scrollEnd)=\"loadAllOnScroll()\"\n            #siteSelect\n            data-automation-id=\"site-my-files-option\"\n            class=\"adf-site-dropdown-list-element\"\n            id=\"site-dropdown\"\n            placeholder=\"{{placeholder | translate}}\"\n            floatPlaceholder=\"never\"\n            [(value)]=\"selected\"\n            (selectionChange)=\"selectedSite($event)\">\n            <mat-option *ngFor=\"let site of siteList?.list.entries;\" [value]=\"site\">\n                {{ site.entry.title | translate}}\n            </mat-option>\n            <mat-option *ngIf=\"showLoading()\" disabled=\"true\" data-automation-id=\"site-loading\">\n                {{ 'ADF_DROPDOWN.LOADING' | translate}}\n            </mat-option>\n        </mat-select>\n    </mat-form-field>\n</div>\n",
                encapsulation: ViewEncapsulation.None,
                host: { 'class': 'adf-sites-dropdown' },
                styles: [".adf-sites-dropdown.adf-full-width .mat-form-field{width:100%}"]
            }]
    }], function () { return [{ type: ɵngcc1.SitesService }, { type: ɵngcc1.LogService }]; }, { hideMyFiles: [{
            type: Input
        }], siteList: [{
            type: Input
        }], value: [{
            type: Input
        }], placeholder: [{
            type: Input
        }], change: [{
            type: Output
        }], relations: [{
            type: Input
        }] }); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class SitesDropdownModule {
}
SitesDropdownModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: SitesDropdownModule });
SitesDropdownModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function SitesDropdownModule_Factory(t) { return new (t || SitesDropdownModule)(); }, imports: [[
            CommonModule,
            MaterialModule,
            FormsModule,
            ReactiveFormsModule,
            CoreModule
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(SitesDropdownModule, { declarations: function () { return [DropdownSitesComponent]; }, imports: function () { return [CommonModule, MaterialModule, FormsModule,
        ReactiveFormsModule,
        CoreModule]; }, exports: function () { return [DropdownSitesComponent]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SitesDropdownModule, [{
        type: NgModule,
        args: [{
                imports: [
                    CommonModule,
                    MaterialModule,
                    FormsModule,
                    ReactiveFormsModule,
                    CoreModule
                ],
                exports: [
                    DropdownSitesComponent
                ],
                declarations: [
                    DropdownSitesComponent
                ]
            }]
    }], null, null); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class BreadcrumbComponent {
    constructor() {
        this.folderNode = null;
        this.root = null;
        this.rootId = null;
        this.route = [];
        this.onDestroy$ = new Subject();
        this.readOnly = false;
        this.navigate = new EventEmitter();
    }
    get hasRoot() {
        return !!this.root;
    }
    ngOnInit() {
        this.transform = this.transform ? this.transform : null;
        if (this.target) {
            this.target.$folderNode
                .pipe(takeUntil(this.onDestroy$))
                .subscribe((folderNode) => {
                this.folderNode = folderNode;
                this.recalculateNodes();
            });
        }
    }
    ngOnChanges() {
        this.recalculateNodes();
    }
    recalculateNodes() {
        const node = this.transform ? this.transform(this.folderNode) : this.folderNode;
        this.route = this.parseRoute(node);
        if (this.maxItems && this.route.length > this.maxItems) {
            this.lastNodes = this.route.slice(this.route.length - this.maxItems);
            this.previousNodes = this.route.slice(0, this.route.length - this.maxItems);
            this.previousNodes.reverse();
        }
        else {
            this.lastNodes = this.route;
            this.previousNodes = null;
        }
    }
    open() {
        if (this.dropdown) {
            this.dropdown.open();
            this.dropdown.focus();
        }
    }
    hasPreviousNodes() {
        return !!this.previousNodes;
    }
    parseRoute(node) {
        if (node && node.path) {
            const route = (node.path.elements || []).slice();
            route.push({
                id: node.id,
                name: node.name,
                node: node
            });
            const rootPos = this.getElementPosition(route, this.rootId);
            if (rootPos > 0) {
                route.splice(0, rootPos);
            }
            if (rootPos === -1 && this.rootId) {
                route[0].id = this.rootId;
            }
            if (this.root) {
                route[0].name = this.root;
            }
            return route;
        }
        return [];
    }
    getElementPosition(route, nodeId) {
        let position = -1;
        if (route && route.length > 0 && nodeId) {
            position = route.findIndex((el) => el.id === nodeId);
        }
        return position;
    }
    breadcrumbItemIsAnchor(lastItem) {
        return !this.readOnly && !lastItem;
    }
    onRoutePathClick(route, event) {
        if (event && event.type === 'click') {
            event.preventDefault();
        }
        this.onRouteClick(route);
    }
    onRouteClick(route) {
        if (route && !this.readOnly) {
            this.navigate.emit(route);
            if (this.target) {
                this.target.navigateTo(route.id);
            }
        }
    }
    ngOnDestroy() {
        this.onDestroy$.next(true);
        this.onDestroy$.complete();
    }
}
BreadcrumbComponent.ɵfac = function BreadcrumbComponent_Factory(t) { return new (t || BreadcrumbComponent)(); };
BreadcrumbComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: BreadcrumbComponent, selectors: [["adf-breadcrumb"]], viewQuery: function BreadcrumbComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c31, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.dropdown = _t.first);
    } }, hostAttrs: [1, "adf-breadcrumb"], inputs: { folderNode: "folderNode", root: "root", rootId: "rootId", readOnly: "readOnly", transform: "transform", target: "target", maxItems: "maxItems" }, outputs: { navigate: "navigate" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 2, vars: 2, consts: [["data-automation-id", "breadcrumb", "class", "adf-breadcrumb-container", "role", "navigation", 4, "ngIf"], ["data-automation-id", "breadcrumb", "role", "navigation", 4, "ngIf"], ["data-automation-id", "breadcrumb", "role", "navigation", 1, "adf-breadcrumb-container"], ["tabindex", "0", "class", "adf-breadcrumb-dropdown-trigger", 3, "click", 4, "ngIf"], ["class", "adf-breadcrumb-dropdown-path", "tabindex", "-1", 4, "ngIf"], ["class", "adf-breadcrumb-item", 3, "adf-active", "ngSwitch", "title", 4, "ngFor", "ngForOf"], ["tabindex", "0", 1, "adf-breadcrumb-dropdown-trigger", 3, "click"], [1, "adf-breadcrumb-dropdown-trigger-icon"], [1, "adf-breadcrumb-dropdown-trigger-arrow"], ["tabindex", "-1", 1, "adf-breadcrumb-dropdown-path"], ["dropdown", ""], ["class", "adf-breadcrumb-path-option", 3, "disabled", "click", "onSelectionChange", 4, "ngFor", "ngForOf"], [1, "adf-breadcrumb-path-option", 3, "disabled", "click", "onSelectionChange"], [1, "adf-breadcrumb-item", 3, "ngSwitch", "title"], ["href", "#", "class", "adf-breadcrumb-item-anchor", 3, "click", 4, "ngSwitchCase"], ["class", "adf-breadcrumb-item-current", "role", "heading", "aria-level", "2", "aria-current", "location", 4, "ngSwitchDefault"], ["class", "adf-breadcrumb-item-chevron", 4, "ngIf"], ["href", "#", 1, "adf-breadcrumb-item-anchor", 3, "click"], ["role", "heading", "aria-level", "2", "aria-current", "location", 1, "adf-breadcrumb-item-current"], [1, "adf-breadcrumb-item-chevron"], ["data-automation-id", "breadcrumb", "role", "navigation"], ["role", "listitem", 1, "adf-breadcrumb-item", "adf-active"], ["role", "heading", "aria-level", "2", 1, "adf-breadcrumb-item-current"]], template: function BreadcrumbComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, BreadcrumbComponent_nav_0_Template, 5, 6, "nav", 0);
        ɵngcc0.ɵɵtemplate(1, BreadcrumbComponent_nav_1_Template, 6, 6, "nav", 1);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngIf", ctx.folderNode);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.folderNode && ctx.hasRoot);
    } }, directives: [ɵngcc4.NgIf, ɵngcc4.NgForOf, ɵngcc6.MatIcon, ɵngcc27.MatSelect, ɵngcc19.MatOption, ɵngcc4.NgSwitch, ɵngcc4.NgSwitchCase, ɵngcc4.NgSwitchDefault], pipes: [ɵngcc8.TranslatePipe], styles: [".adf-breadcrumb{color:var(--theme-text-color);display:flex;flex:1;font-size:14px;font-weight:600;letter-spacing:-.2px;line-height:24px;overflow:hidden}.adf-breadcrumb-container{cursor:default;display:flex;list-style-type:none;margin:0;overflow:hidden;padding:0}.adf-breadcrumb-dropdown-path{height:0;margin-top:35px;overflow:hidden;width:0}.adf-breadcrumb-dropdown-path.mat-select{width:0}.adf-breadcrumb-dropdown-trigger{background:transparent;border:none;cursor:pointer;margin-right:5px;margin-top:2px;padding:0;width:30px}.adf-breadcrumb-dropdown-trigger:focus{color:var(--theme-primary-color);outline:none}.adf-breadcrumb-dropdown-trigger-icon{position:relative}.adf-breadcrumb-dropdown-trigger-arrow{color:#fff;font-size:17px;left:4px;position:absolute;top:4px;z-index:2}.adf-breadcrumb-dropdown-trigger-arrow.adf-isRoot{visibility:hidden}.adf-breadcrumb-dropdown-trigger-arrow.adf-focus{border:none}.adf-breadcrumb-dropdown-trigger.adf-isRoot{cursor:not-allowed}.adf-breadcrumb-item{color:var(--theme-text-color);display:flex;flex:0 1 auto;font-size:14px;font-weight:600;letter-spacing:-.2px;line-height:33px;margin-top:auto;min-width:35px;overflow:hidden;padding-right:2px;text-align:left;text-overflow:ellipsis}.adf-breadcrumb-item.adf-active,.adf-breadcrumb-item:hover{color:var(--adf-breadcrumb-item-active-hover-color)}.adf-breadcrumb-item.adf-active{color:var(--adf-breadcrumb-item-active-color)}.adf-breadcrumb-item-chevron{font-size:17px;margin-top:9px;opacity:1}.adf-breadcrumb-item.mat-primary{color:var(--theme-primary-color)}.adf-breadcrumb-item.mat-accent{color:var(--theme-accent-color)}.adf-breadcrumb-item.mat-warn{color:var(--theme-warn-color)}.adf-breadcrumb-item-anchor{box-sizing:border-box;color:inherit;display:inline-block;flex:0 1 auto;overflow:hidden;padding:0 2px;text-align:center;text-decoration:none;text-overflow:ellipsis;white-space:nowrap;width:100%}.adf-breadcrumb-item-anchor:focus{outline:1px solid var(--theme-accent-color-a200);outline-offset:-1px}.adf-breadcrumb-item-current{overflow:hidden;text-overflow:ellipsis;white-space:nowrap}"], encapsulation: 2 });
BreadcrumbComponent.propDecorators = {
    folderNode: [{ type: Input }],
    root: [{ type: Input }],
    rootId: [{ type: Input }],
    target: [{ type: Input }],
    transform: [{ type: Input }],
    dropdown: [{ type: ViewChild, args: ['dropdown',] }],
    maxItems: [{ type: Input }],
    readOnly: [{ type: Input }],
    navigate: [{ type: Output }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(BreadcrumbComponent, [{
        type: Component,
        args: [{
                selector: 'adf-breadcrumb',
                template: "<nav\n    *ngIf=\"folderNode\"\n    data-automation-id=\"breadcrumb\"\n    class=\"adf-breadcrumb-container\"\n    role=\"navigation\"\n    [attr.aria-label]=\"'BREADCRUMB.ARIA-LABEL.BREADCRUMB' | translate\"\n>\n    <button\n        *ngIf=\"hasPreviousNodes()\"\n        tabindex=\"0\"\n        class=\"adf-breadcrumb-dropdown-trigger\"\n        (click)=\"open()\"\n        [attr.aria-label]=\"'BREADCRUMB.ARIA-LABEL.DROPDOWN' | translate\"\n    >\n        <div class=\"adf-breadcrumb-dropdown-trigger-icon\">\n            <mat-icon [class.adf-isRoot]=\"!hasPreviousNodes()\">folder</mat-icon>\n            <mat-icon\n                [class.adf-isRoot]=\"!hasPreviousNodes()\"\n                class=\"adf-breadcrumb-dropdown-trigger-arrow\"\n                >arrow_drop_down</mat-icon\n            >\n        </div>\n    </button>\n\n    <mat-select\n        #dropdown\n        *ngIf=\"hasPreviousNodes()\"\n        class=\"adf-breadcrumb-dropdown-path\"\n        tabindex=\"-1\"\n    >\n        <mat-option\n            *ngFor=\"let node of previousNodes\"\n            (click)=\"onRoutePathClick(node, $event)\"\n            (onSelectionChange)=\"onRouteClick(node)\"\n            class=\"adf-breadcrumb-path-option\"\n            [disabled]=\"readOnly\"\n        >\n            {{ node.name | translate }}\n        </mat-option>\n    </mat-select>\n\n    <div\n        *ngFor=\"let item of lastNodes; let last = last\"\n        [class.adf-active]=\"last\"\n        [ngSwitch]=\"breadcrumbItemIsAnchor(last)\"\n        title=\"{{ item.name | translate }}\"\n        class=\"adf-breadcrumb-item\">\n        <a\n            *ngSwitchCase=\"true\"\n            href=\"#\"\n            [attr.data-automation-id]=\"'breadcrumb_' + item.name\"\n            class=\"adf-breadcrumb-item-anchor\"\n            (click)=\"onRoutePathClick(item, $event)\"\n        >\n            {{ item.name | translate }}\n        </a>\n\n        <div *ngSwitchDefault class=\"adf-breadcrumb-item-current\" role=\"heading\" aria-level=\"2\"\n            aria-current=\"location\">\n            {{ item.name | translate }}\n        </div>\n\n        <mat-icon class=\"adf-breadcrumb-item-chevron\" *ngIf=\"!last\">\n            chevron_right\n        </mat-icon>\n    </div>\n</nav>\n\n<nav\n    *ngIf=\"!folderNode && hasRoot\"\n    data-automation-id=\"breadcrumb\"\n    role=\"navigation\"\n    [attr.aria-label]=\"'BREADCRUMB.ARIA-LABEL.BREADCRUMB' | translate\"\n>\n    <div class=\"adf-breadcrumb-item adf-active\" role=\"listitem\">\n        <div class=\"adf-breadcrumb-item-current\" role=\"heading\" aria-level=\"2\">\n            {{ root | translate }}\n        </div>\n    </div>\n</nav>\n",
                encapsulation: ViewEncapsulation.None,
                host: { 'class': 'adf-breadcrumb' },
                styles: [".adf-breadcrumb{color:var(--theme-text-color);display:flex;flex:1;font-size:14px;font-weight:600;letter-spacing:-.2px;line-height:24px;overflow:hidden}.adf-breadcrumb-container{cursor:default;display:flex;list-style-type:none;margin:0;overflow:hidden;padding:0}.adf-breadcrumb-dropdown-path{height:0;margin-top:35px;overflow:hidden;width:0}.adf-breadcrumb-dropdown-path.mat-select{width:0}.adf-breadcrumb-dropdown-trigger{background:transparent;border:none;cursor:pointer;margin-right:5px;margin-top:2px;padding:0;width:30px}.adf-breadcrumb-dropdown-trigger:focus{color:var(--theme-primary-color);outline:none}.adf-breadcrumb-dropdown-trigger-icon{position:relative}.adf-breadcrumb-dropdown-trigger-arrow{color:#fff;font-size:17px;left:4px;position:absolute;top:4px;z-index:2}.adf-breadcrumb-dropdown-trigger-arrow.adf-isRoot{visibility:hidden}.adf-breadcrumb-dropdown-trigger-arrow.adf-focus{border:none}.adf-breadcrumb-dropdown-trigger.adf-isRoot{cursor:not-allowed}.adf-breadcrumb-item{color:var(--theme-text-color);display:flex;flex:0 1 auto;font-size:14px;font-weight:600;letter-spacing:-.2px;line-height:33px;margin-top:auto;min-width:35px;overflow:hidden;padding-right:2px;text-align:left;text-overflow:ellipsis}.adf-breadcrumb-item.adf-active,.adf-breadcrumb-item:hover{color:var(--adf-breadcrumb-item-active-hover-color)}.adf-breadcrumb-item.adf-active{color:var(--adf-breadcrumb-item-active-color)}.adf-breadcrumb-item-chevron{font-size:17px;margin-top:9px;opacity:1}.adf-breadcrumb-item.mat-primary{color:var(--theme-primary-color)}.adf-breadcrumb-item.mat-accent{color:var(--theme-accent-color)}.adf-breadcrumb-item.mat-warn{color:var(--theme-warn-color)}.adf-breadcrumb-item-anchor{box-sizing:border-box;color:inherit;display:inline-block;flex:0 1 auto;overflow:hidden;padding:0 2px;text-align:center;text-decoration:none;text-overflow:ellipsis;white-space:nowrap;width:100%}.adf-breadcrumb-item-anchor:focus{outline:1px solid var(--theme-accent-color-a200);outline-offset:-1px}.adf-breadcrumb-item-current{overflow:hidden;text-overflow:ellipsis;white-space:nowrap}"]
            }]
    }], function () { return []; }, { folderNode: [{
            type: Input
        }], root: [{
            type: Input
        }], rootId: [{
            type: Input
        }], readOnly: [{
            type: Input
        }], navigate: [{
            type: Output
        }], transform: [{
            type: Input
        }], target: [{
            type: Input
        }], dropdown: [{
            type: ViewChild,
            args: ['dropdown']
        }], maxItems: [{
            type: Input
        }] }); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class DropdownBreadcrumbComponent extends BreadcrumbComponent {
    recalculateNodes() {
        const node = this.transform ? this.transform(this.folderNode) : this.folderNode;
        this.route = this.parseRoute(node);
        this.currentNode = this.route[this.route.length - 1];
        this.previousNodes = this.route.slice(0, this.route.length - 1).reverse();
    }
    open() {
        if (this.dropdown) {
            this.dropdown.open();
            this.dropdown.focus();
        }
    }
    hasPreviousNodes() {
        return this.previousNodes.length > 0;
    }
}
DropdownBreadcrumbComponent.ɵfac = function DropdownBreadcrumbComponent_Factory(t) { return ɵDropdownBreadcrumbComponent_BaseFactory(t || DropdownBreadcrumbComponent); };
DropdownBreadcrumbComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: DropdownBreadcrumbComponent, selectors: [["adf-dropdown-breadcrumb"]], viewQuery: function DropdownBreadcrumbComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c31, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.dropdown = _t.first);
    } }, hostAttrs: [1, "adf-dropdown-breadcrumb"], features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 1, vars: 1, consts: [["class", "adf-dropdown-breadcrumb-container", "role", "navigation", 4, "ngIf"], ["role", "navigation", 1, "adf-dropdown-breadcrumb-container"], ["data-automation-id", "dropdown-breadcrumb-trigger", 1, "adf-dropdown-breadcrumb-trigger", 3, "tabindex", "click"], [1, "adf-dropdown-breadcrumb-item-chevron"], [1, "adf-dropdown-breadcrumb-path"], ["tabindex", "-1", "data-automation-id", "dropdown-breadcrumb-path", 4, "ngIf"], ["data-automation-id", "current-folder", "aria-current", "location", 1, "adf-current-folder"], ["tabindex", "-1", "data-automation-id", "dropdown-breadcrumb-path"], ["dropdown", ""], ["class", "adf-dropdown-breadcrumb-path-option", "data-automation-class", "dropdown-breadcrumb-path-option", 3, "disabled", "click", "onSelectionChange", 4, "ngFor", "ngForOf"], ["data-automation-class", "dropdown-breadcrumb-path-option", 1, "adf-dropdown-breadcrumb-path-option", 3, "disabled", "click", "onSelectionChange"]], template: function DropdownBreadcrumbComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, DropdownBreadcrumbComponent_nav_0_Template, 12, 13, "nav", 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngIf", ctx.route.length > 0);
    } }, directives: [ɵngcc4.NgIf, ɵngcc6.MatIcon, ɵngcc27.MatSelect, ɵngcc4.NgForOf, ɵngcc19.MatOption], pipes: [ɵngcc8.TranslatePipe], styles: [".adf-dropdown-breadcrumb{color:var(--theme-text-color);display:flex;flex:1;font-size:14px;font-weight:600;letter-spacing:-.2px;line-height:24px;margin-top:10px;overflow:hidden}.adf-dropdown-breadcrumb .mat-icon{height:35px}.adf-dropdown-breadcrumb-container{cursor:default;display:flex;list-style-type:none;margin:0;overflow:hidden;padding:0}.adf-dropdown-breadcrumb-trigger{background:transparent;border:none;cursor:pointer;padding:0;width:25px}.adf-dropdown-breadcrumb-trigger:focus{color:var(--theme-primary-color);outline:none}.adf-dropdown-breadcrumb-trigger.adf-isRoot{cursor:not-allowed}.adf-dropdown-breadcrumb-path{height:0;margin-top:35px;overflow:hidden;width:0}.adf-dropdown-breadcrumb-path.mat-select{width:0}.adf-current-folder{color:var(--theme-foreground-text-color);display:inline-block;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;width:75%}.adf-dropdown-breadcrumb-path-option.mat-option{font-size:13px;height:28px;line-height:28px;padding:0 12px}.adf-dropdown-breadcrumb-path-option.mat-option:first-child{padding-top:4px}.adf-dropdown-breadcrumb-path-option.mat-option:last-child{padding-bottom:4px}[dir=ltr] .adf-dropdown-breadcrumb-path{margin-left:-30px}[dir=ltr] .adf-current-folder{margin-left:30px}[dir=rtl] .adf-dropdown-breadcrumb-path{margin-right:-30px}[dir=rtl] .adf-current-folder{margin-right:30px}"], encapsulation: 2 });
DropdownBreadcrumbComponent.propDecorators = {
    dropdown: [{ type: ViewChild, args: ['dropdown',] }]
};
const ɵDropdownBreadcrumbComponent_BaseFactory = /*@__PURE__*/ ɵngcc0.ɵɵgetInheritedFactory(DropdownBreadcrumbComponent);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DropdownBreadcrumbComponent, [{
        type: Component,
        args: [{
                selector: 'adf-dropdown-breadcrumb',
                template: "<nav *ngIf=\"route.length > 0\" class=\"adf-dropdown-breadcrumb-container\"\n     role=\"navigation\"\n     [attr.aria-label]=\"'BREADCRUMB.ARIA-LABEL.BREADCRUMB' | translate\">\n\n    <button\n        [tabindex]=\"hasPreviousNodes() ? 0 : -1\"\n        class=\"adf-dropdown-breadcrumb-trigger\"\n        (click)=\"open()\"\n        [attr.aria-label]=\"'BREADCRUMB.ARIA-LABEL.DROPDOWN' | translate\"\n        data-automation-id=\"dropdown-breadcrumb-trigger\">\n        <mat-icon [class.adf-isRoot]=\"!hasPreviousNodes()\">folder</mat-icon>\n    </button>\n\n    <mat-icon class=\"adf-dropdown-breadcrumb-item-chevron\">chevron_right</mat-icon>\n\n    <div class=\"adf-dropdown-breadcrumb-path\">\n        <mat-select\n            #dropdown\n            *ngIf=\"hasPreviousNodes()\"\n            tabindex=\"-1\"\n            data-automation-id=\"dropdown-breadcrumb-path\">\n\n            <mat-option\n                *ngFor=\"let node of previousNodes;\"\n                (click)=\"onRoutePathClick(node, $event)\"\n                (onSelectionChange)=\"onRouteClick(node)\"\n                class=\"adf-dropdown-breadcrumb-path-option\"\n                data-automation-class=\"dropdown-breadcrumb-path-option\"\n                [disabled]=\"readOnly\">\n                {{ node.name | translate }}\n            </mat-option>\n        </mat-select>\n    </div>\n\n    <span\n        class=\"adf-current-folder\"\n        [class.adf-isRoot]=\"!hasPreviousNodes()\"\n        data-automation-id=\"current-folder\"\n        aria-current=\"location\">{{ currentNode.name }}\n    </span>\n</nav>\n",
                encapsulation: ViewEncapsulation.None,
                host: { 'class': 'adf-dropdown-breadcrumb' },
                styles: [".adf-dropdown-breadcrumb{color:var(--theme-text-color);display:flex;flex:1;font-size:14px;font-weight:600;letter-spacing:-.2px;line-height:24px;margin-top:10px;overflow:hidden}.adf-dropdown-breadcrumb .mat-icon{height:35px}.adf-dropdown-breadcrumb-container{cursor:default;display:flex;list-style-type:none;margin:0;overflow:hidden;padding:0}.adf-dropdown-breadcrumb-trigger{background:transparent;border:none;cursor:pointer;padding:0;width:25px}.adf-dropdown-breadcrumb-trigger:focus{color:var(--theme-primary-color);outline:none}.adf-dropdown-breadcrumb-trigger.adf-isRoot{cursor:not-allowed}.adf-dropdown-breadcrumb-path{height:0;margin-top:35px;overflow:hidden;width:0}.adf-dropdown-breadcrumb-path.mat-select{width:0}.adf-current-folder{color:var(--theme-foreground-text-color);display:inline-block;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;width:75%}.adf-dropdown-breadcrumb-path-option.mat-option{font-size:13px;height:28px;line-height:28px;padding:0 12px}.adf-dropdown-breadcrumb-path-option.mat-option:first-child{padding-top:4px}.adf-dropdown-breadcrumb-path-option.mat-option:last-child{padding-bottom:4px}[dir=ltr] .adf-dropdown-breadcrumb-path{margin-left:-30px}[dir=ltr] .adf-current-folder{margin-left:30px}[dir=rtl] .adf-dropdown-breadcrumb-path{margin-right:-30px}[dir=rtl] .adf-current-folder{margin-right:30px}"]
            }]
    }], null, { dropdown: [{
            type: ViewChild,
            args: ['dropdown']
        }] }); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class BreadcrumbModule {
}
BreadcrumbModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: BreadcrumbModule });
BreadcrumbModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function BreadcrumbModule_Factory(t) { return new (t || BreadcrumbModule)(); }, imports: [[
            CommonModule,
            MaterialModule,
            CoreModule
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(BreadcrumbModule, { declarations: function () { return [BreadcrumbComponent, DropdownBreadcrumbComponent]; }, imports: function () { return [CommonModule, MaterialModule, CoreModule]; }, exports: function () { return [BreadcrumbComponent, DropdownBreadcrumbComponent]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(BreadcrumbModule, [{
        type: NgModule,
        args: [{
                imports: [
                    CommonModule,
                    MaterialModule,
                    CoreModule
                ],
                exports: [
                    BreadcrumbComponent,
                    DropdownBreadcrumbComponent
                ],
                declarations: [
                    BreadcrumbComponent,
                    DropdownBreadcrumbComponent
                ]
            }]
    }], null, null); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class ConfirmDialogComponent {
    constructor(data, sanitizer) {
        this.sanitizer = sanitizer;
        data = data || {};
        this.title = data.title || 'ADF_CONFIRM_DIALOG.CONFIRM';
        this.message = data.message || 'ADF_CONFIRM_DIALOG.MESSAGE';
        this.yesLabel = data.yesLabel || 'ADF_CONFIRM_DIALOG.YES_LABEL';
        this.thirdOptionLabel = data.thirdOptionLabel;
        this.noLabel = data.noLabel || 'ADF_CONFIRM_DIALOG.NO_LABEL';
        this.htmlContent = data.htmlContent;
    }
    sanitizedHtmlContent() {
        return this.sanitizer.sanitize(SecurityContext.HTML, this.htmlContent);
    }
}
ConfirmDialogComponent.ɵfac = function ConfirmDialogComponent_Factory(t) { return new (t || ConfirmDialogComponent)(ɵngcc0.ɵɵdirectiveInject(MAT_DIALOG_DATA), ɵngcc0.ɵɵdirectiveInject(ɵngcc28.DomSanitizer)); };
ConfirmDialogComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ConfirmDialogComponent, selectors: [["adf-confirm-dialog"]], hostAttrs: [1, "adf-confirm-dialog"], decls: 16, vars: 14, consts: [["mat-dialog-title", "", "data-automation-id", "adf-confirm-dialog-title"], ["data-automation-id", "adf-confirm-dialog-base-message", 4, "ngIf", "ngIfElse"], ["cutomContent", ""], ["data-automation-id", "adf-confirm-dialog-spacer", 1, "adf-dialog-spacer"], ["id", "adf-confirm-accept", "mat-button", "", "color", "primary", "data-automation-id", "adf-confirm-dialog-confirmation", 3, "mat-dialog-close"], ["id", "adf-confirm-all", "mat-button", "", "data-automation-id", "adf-confirm-dialog-confirm-all", 3, "mat-dialog-close", 4, "ngIf"], ["id", "adf-confirm-cancel", "mat-button", "", "data-automation-id", "adf-confirm-dialog-reject", "cdkFocusInitial", "", 3, "mat-dialog-close"], ["data-automation-id", "adf-confirm-dialog-base-message"], ["data-automation-id", "adf-confirm-dialog-custom-content", 3, "innerHTML"], ["id", "adf-confirm-all", "mat-button", "", "data-automation-id", "adf-confirm-dialog-confirm-all", 3, "mat-dialog-close"]], template: function ConfirmDialogComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "h1", 0);
        ɵngcc0.ɵɵtext(1);
        ɵngcc0.ɵɵpipe(2, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(3, "mat-dialog-content");
        ɵngcc0.ɵɵtemplate(4, ConfirmDialogComponent_p_4_Template, 3, 3, "p", 1);
        ɵngcc0.ɵɵtemplate(5, ConfirmDialogComponent_ng_template_5_Template, 1, 1, "ng-template", null, 2, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(7, "mat-dialog-actions");
        ɵngcc0.ɵɵelement(8, "span", 3);
        ɵngcc0.ɵɵelementStart(9, "button", 4);
        ɵngcc0.ɵɵtext(10);
        ɵngcc0.ɵɵpipe(11, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(12, ConfirmDialogComponent_button_12_Template, 3, 4, "button", 5);
        ɵngcc0.ɵɵelementStart(13, "button", 6);
        ɵngcc0.ɵɵtext(14);
        ɵngcc0.ɵɵpipe(15, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        const _r1 = ɵngcc0.ɵɵreference(6);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(2, 8, ctx.title));
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.htmlContent)("ngIfElse", _r1);
        ɵngcc0.ɵɵadvance(5);
        ɵngcc0.ɵɵproperty("mat-dialog-close", true);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(11, 10, ctx.yesLabel));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.thirdOptionLabel);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("mat-dialog-close", false);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(15, 12, ctx.noLabel));
    } }, directives: [ɵngcc2.MatDialogTitle, ɵngcc2.MatDialogContent, ɵngcc4.NgIf, ɵngcc2.MatDialogActions, ɵngcc5.MatButton, ɵngcc2.MatDialogClose], pipes: [ɵngcc8.TranslatePipe], styles: [".adf-dialog-spacer{flex:1 1 auto}.adf-confirm-dialog .mat-dialog-actions .mat-button-wrapper{text-transform:uppercase}"], encapsulation: 2 });
ConfirmDialogComponent.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [MAT_DIALOG_DATA,] }] },
    { type: DomSanitizer }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ConfirmDialogComponent, [{
        type: Component,
        args: [{
                selector: 'adf-confirm-dialog',
                template: "<h1 mat-dialog-title data-automation-id=\"adf-confirm-dialog-title\">{{ title | translate }}</h1>\n<mat-dialog-content>\n    <p *ngIf=\"!htmlContent; else cutomContent\" data-automation-id=\"adf-confirm-dialog-base-message\">\n        {{ message | translate }}\n    </p>\n    <ng-template #cutomContent>\n        <span [innerHTML]=\"sanitizedHtmlContent()\" data-automation-id=\"adf-confirm-dialog-custom-content\">\n        </span>\n    </ng-template>\n</mat-dialog-content>\n<mat-dialog-actions>\n    <span class=\"adf-dialog-spacer\" data-automation-id=\"adf-confirm-dialog-spacer\"></span>\n    <button id=\"adf-confirm-accept\" mat-button color=\"primary\" data-automation-id=\"adf-confirm-dialog-confirmation\"\n        [mat-dialog-close]=\"true\">{{ yesLabel | translate }}</button>\n    <button id=\"adf-confirm-all\" mat-button *ngIf=\"thirdOptionLabel\" [mat-dialog-close]=\"thirdOptionLabel\" data-automation-id=\"adf-confirm-dialog-confirm-all\">{{ thirdOptionLabel | translate }}</button>\n    <button id=\"adf-confirm-cancel\" mat-button [mat-dialog-close]=\"false\" data-automation-id=\"adf-confirm-dialog-reject\"\n        cdkFocusInitial>{{ noLabel | translate }}</button>\n</mat-dialog-actions>\n",
                host: { 'class': 'adf-confirm-dialog' },
                encapsulation: ViewEncapsulation.None,
                styles: [".adf-dialog-spacer{flex:1 1 auto}.adf-confirm-dialog .mat-dialog-actions .mat-button-wrapper{text-transform:uppercase}"]
            }]
    }], function () { return [{ type: undefined, decorators: [{
                type: Inject,
                args: [MAT_DIALOG_DATA]
            }] }, { type: ɵngcc28.DomSanitizer }]; }, null); })();

class ContentVersionService {
    constructor(alfrescoApi) {
        this.alfrescoApi = alfrescoApi;
    }
    get contentApi() {
        if (!this._contentApi) {
            this._contentApi = new ContentApi(this.alfrescoApi.getInstance());
        }
        return this._contentApi;
    }
    getVersionContentUrl(nodeId, versionId, attachment) {
        let nodeDownloadUrl = this.contentApi.getContentUrl(nodeId, attachment);
        nodeDownloadUrl = nodeDownloadUrl.replace('/content', '/versions/' + versionId + '/content');
        return of(nodeDownloadUrl);
    }
}
ContentVersionService.ɵfac = function ContentVersionService_Factory(t) { return new (t || ContentVersionService)(ɵngcc0.ɵɵinject(ɵngcc1.AlfrescoApiService)); };
ContentVersionService.ɵprov = ɵɵdefineInjectable({ factory: function ContentVersionService_Factory() { return new ContentVersionService(ɵɵinject(AlfrescoApiService)); }, token: ContentVersionService, providedIn: "root" });
ContentVersionService.ctorParameters = () => [
    { type: AlfrescoApiService }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ContentVersionService, [{
        type: Injectable,
        args: [{ providedIn: 'root' }]
    }], function () { return [{ type: ɵngcc1.AlfrescoApiService }]; }, null); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class VersionListComponent {
    constructor(alfrescoApi, contentService, contentVersionService, dialog) {
        this.alfrescoApi = alfrescoApi;
        this.contentService = contentService;
        this.contentVersionService = contentVersionService;
        this.dialog = dialog;
        this.versions = [];
        this.isLoading = true;
        this.showComments = true;
        this.allowDownload = true;
        this.allowViewVersions = true;
        this.showActions = true;
        this.restored = new EventEmitter();
        this.deleted = new EventEmitter();
        this.viewVersion = new EventEmitter();
    }
    get contentApi() {
        var _a;
        this._contentApi = (_a = this._contentApi) !== null && _a !== void 0 ? _a : new ContentApi(this.alfrescoApi.getInstance());
        return this._contentApi;
    }
    get versionsApi() {
        var _a;
        this._versionsApi = (_a = this._versionsApi) !== null && _a !== void 0 ? _a : new VersionsApi(this.alfrescoApi.getInstance());
        return this._versionsApi;
    }
    get nodesApi() {
        var _a;
        this._nodesApi = (_a = this._nodesApi) !== null && _a !== void 0 ? _a : new NodesApi(this.alfrescoApi.getInstance());
        return this._nodesApi;
    }
    ngOnChanges() {
        this.loadVersionHistory();
    }
    canUpdate() {
        return this.contentService.hasAllowableOperations(this.node, 'update') && this.versions.length > 1;
    }
    canDelete() {
        return this.contentService.hasAllowableOperations(this.node, 'delete') && this.versions.length > 1;
    }
    restore(versionId) {
        if (this.canUpdate()) {
            this.versionsApi
                .revertVersion(this.node.id, versionId, { majorVersion: true, comment: '' })
                .then(() => this.nodesApi.getNode(this.node.id, { include: ['permissions', 'path', 'isFavorite', 'allowableOperations'] }))
                .then((node) => this.onVersionRestored(node));
        }
    }
    onViewVersion(versionId) {
        this.viewVersion.emit(versionId);
    }
    loadVersionHistory() {
        this.isLoading = true;
        this.versionsApi.listVersionHistory(this.node.id).then((versionPaging) => {
            this.versions = versionPaging.list.entries;
            this.isLoading = false;
        });
    }
    downloadVersion(versionId) {
        if (this.allowDownload) {
            this.contentVersionService
                .getVersionContentUrl(this.node.id, versionId, true)
                .subscribe(versionDownloadUrl => this.downloadContent(versionDownloadUrl));
        }
    }
    deleteVersion(versionId) {
        if (this.canUpdate()) {
            const dialogRef = this.dialog.open(ConfirmDialogComponent, {
                data: {
                    title: 'ADF_VERSION_LIST.CONFIRM_DELETE.TITLE',
                    message: 'ADF_VERSION_LIST.CONFIRM_DELETE.MESSAGE',
                    yesLabel: 'ADF_VERSION_LIST.CONFIRM_DELETE.YES_LABEL',
                    noLabel: 'ADF_VERSION_LIST.CONFIRM_DELETE.NO_LABEL'
                },
                minWidth: '250px'
            });
            dialogRef.afterClosed().subscribe((result) => {
                if (result === true) {
                    this.versionsApi
                        .deleteVersion(this.node.id, versionId)
                        .then(() => this.onVersionDeleted(this.node));
                }
            });
        }
    }
    onVersionDeleted(node) {
        this.loadVersionHistory();
        this.deleted.emit(node);
    }
    onVersionRestored(node) {
        this.loadVersionHistory();
        this.restored.emit(node === null || node === void 0 ? void 0 : node.entry);
    }
    downloadContent(url) {
        if (url) {
            const link = document.createElement('a');
            link.style.display = 'none';
            link.href = url;
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
        }
    }
}
VersionListComponent.ɵfac = function VersionListComponent_Factory(t) { return new (t || VersionListComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.AlfrescoApiService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ContentService), ɵngcc0.ɵɵdirectiveInject(ContentVersionService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.MatDialog)); };
VersionListComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: VersionListComponent, selectors: [["adf-version-list"]], hostAttrs: [1, "adf-version-list"], inputs: { showComments: "showComments", allowDownload: "allowDownload", allowViewVersions: "allowViewVersions", showActions: "showActions", node: "node" }, outputs: { restored: "restored", deleted: "deleted", viewVersion: "viewVersion" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 3, vars: 2, consts: [["class", "adf-version-list", 4, "ngIf", "ngIfElse"], ["loading_template", ""], [1, "adf-version-list"], [4, "ngFor", "ngForOf"], ["mat-list-icon", ""], ["mat-line", "", 1, "adf-version-list-item-name", 3, "id"], ["mat-line", ""], [1, "adf-version-list-item-version", 3, "id"], [1, "adf-version-list-item-date", 3, "id"], ["mat-line", "", "class", "adf-version-list-item-comment", 3, "id", 4, "ngIf"], [4, "ngIf"], ["mat-line", "", 1, "adf-version-list-item-comment", 3, "id"], ["yPosition", "below", "xPosition", "before", 3, "id"], ["versionMenu", "matMenu"], [4, "adf-acs-version"], ["mat-menu-item", "", 3, "id", "disabled", "click"], ["mat-menu-item", "", 3, "id", "click", 4, "ngIf"], ["mat-menu-item", "", 3, "disabled", "id", "click"], ["mat-icon-button", "", 3, "matMenuTriggerFor", "id"], ["mat-menu-item", "", 3, "id", "click"], ["data-automation-id", "version-history-loading-bar", "mode", "indeterminate", "color", "accent"]], template: function VersionListComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, VersionListComponent_mat_list_0_Template, 2, 1, "mat-list", 0);
        ɵngcc0.ɵɵtemplate(1, VersionListComponent_ng_template_1_Template, 1, 0, "ng-template", null, 1, ɵngcc0.ɵɵtemplateRefExtractor);
    } if (rf & 2) {
        const _r1 = ɵngcc0.ɵɵreference(2);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.isLoading)("ngIfElse", _r1);
    } }, directives: [ɵngcc4.NgIf, ɵngcc14.MatList, ɵngcc4.NgForOf, ɵngcc14.MatListItem, ɵngcc6.MatIcon, ɵngcc14.MatListIconCssMatStyler, ɵngcc19.MatLine, ɵngcc24._MatMenu, ɵngcc1.VersionCompatibilityDirective, ɵngcc24.MatMenuItem, ɵngcc5.MatButton, ɵngcc24.MatMenuTrigger, ɵngcc29.MatProgressBar], pipes: [ɵngcc4.DatePipe, ɵngcc8.TranslatePipe], styles: [".adf-version-list .mat-list-item-content{border-bottom:1px solid #d8d8d8}.adf-version-list-item-version{font-weight:700}.adf-version-list-item-date{opacity:.6}.adf-version-list-item-comment{opacity:.5}"], encapsulation: 2 });
VersionListComponent.ctorParameters = () => [
    { type: AlfrescoApiService },
    { type: ContentService },
    { type: ContentVersionService },
    { type: MatDialog }
];
VersionListComponent.propDecorators = {
    node: [{ type: Input }],
    showComments: [{ type: Input }],
    allowDownload: [{ type: Input }],
    allowViewVersions: [{ type: Input }],
    showActions: [{ type: Input }],
    restored: [{ type: Output }],
    deleted: [{ type: Output }],
    viewVersion: [{ type: Output }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(VersionListComponent, [{
        type: Component,
        args: [{
                selector: 'adf-version-list',
                template: "<mat-list class=\"adf-version-list\" *ngIf=\"!isLoading; else loading_template\">\n    <mat-list-item *ngFor=\"let version of versions; let idx = index\">\n        <mat-icon mat-list-icon>insert_drive_file</mat-icon>\n        <h4 mat-line class=\"adf-version-list-item-name\" [id]=\"'adf-version-list-item-name-' + version.entry.id\" >{{version.entry.name}}</h4>\n        <p mat-line>\n            <span class=\"adf-version-list-item-version\"  [id]=\"'adf-version-list-item-version-' + version.entry.id\" >{{version.entry.id}}</span> -\n            <span class=\"adf-version-list-item-date\"     [id]=\"'adf-version-list-item-date-' + version.entry.id\" >{{version.entry.modifiedAt | date}}</span>\n        </p>\n        <p mat-line [id]=\"'adf-version-list-item-comment-'+ version.entry.id\" class=\"adf-version-list-item-comment\"\n           *ngIf=\"showComments\">{{version.entry.versionComment}}</p>\n\n        <div *ngIf=\"showActions\">\n            <mat-menu [id]=\"'adf-version-list-action-menu-'+version.entry.id\"\n                      #versionMenu=\"matMenu\" yPosition=\"below\" xPosition=\"before\">\n                <ng-container *adf-acs-version=\"'7'\">\n                    <button *ngIf=\"allowViewVersions\"\n                            [id]=\"'adf-version-list-action-view-'+version.entry.id\"\n                            mat-menu-item\n                            (click)=\"onViewVersion(version.entry.id)\">\n                        {{ 'ADF_VERSION_LIST.ACTIONS.VIEW' | translate }}\n                    </button>\n                </ng-container>\n                <button\n                    [id]=\"'adf-version-list-action-restore-'+version.entry.id\"\n                    [disabled]=\"!canUpdate()\"\n                    mat-menu-item\n                    (click)=\"restore(version.entry.id)\">\n                    {{ 'ADF_VERSION_LIST.ACTIONS.RESTORE' | translate }}\n                </button>\n                <button *ngIf=\"allowDownload\"\n                        [id]=\"'adf-version-list-action-download-'+version.entry.id\"\n                        mat-menu-item\n                        (click)=\"downloadVersion(version.entry.id)\">\n                    {{ 'ADF_VERSION_LIST.ACTIONS.DOWNLOAD' | translate }}\n                </button>\n                <button\n                    [disabled]=\"!canDelete()\"\n                    [id]=\"'adf-version-list-action-delete-'+version.entry.id\"\n                    (click)=\"deleteVersion(version.entry.id)\"\n                    mat-menu-item>\n                    {{ 'ADF_VERSION_LIST.ACTIONS.DELETE' | translate }}\n                </button>\n            </mat-menu>\n\n            <button mat-icon-button [matMenuTriggerFor]=\"versionMenu\" [id]=\"'adf-version-list-action-menu-button-'+version.entry.id\">\n                <mat-icon>more_vert</mat-icon>\n            </button>\n        </div>\n    </mat-list-item>\n</mat-list>\n\n<ng-template #loading_template>\n    <mat-progress-bar data-automation-id=\"version-history-loading-bar\" mode=\"indeterminate\"\n                      color=\"accent\"></mat-progress-bar>\n</ng-template>\n",
                encapsulation: ViewEncapsulation.None,
                host: {
                    'class': 'adf-version-list'
                },
                styles: [".adf-version-list .mat-list-item-content{border-bottom:1px solid #d8d8d8}.adf-version-list-item-version{font-weight:700}.adf-version-list-item-date{opacity:.6}.adf-version-list-item-comment{opacity:.5}"]
            }]
    }], function () { return [{ type: ɵngcc1.AlfrescoApiService }, { type: ɵngcc1.ContentService }, { type: ContentVersionService }, { type: ɵngcc2.MatDialog }]; }, { showComments: [{
            type: Input
        }], allowDownload: [{
            type: Input
        }], allowViewVersions: [{
            type: Input
        }], showActions: [{
            type: Input
        }], restored: [{
            type: Output
        }], deleted: [{
            type: Output
        }], viewVersion: [{
            type: Output
        }], node: [{
            type: Input
        }] }); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class VersionManagerComponent {
    constructor(contentService, alfrescoApiService) {
        this.contentService = contentService;
        this.alfrescoApiService = alfrescoApiService;
        this.showComments = true;
        this.showVersionComparison = false;
        this.allowDownload = true;
        this.uploadSuccess = new EventEmitter();
        this.uploadError = new EventEmitter();
        this.uploadCancel = new EventEmitter();
        this.viewVersion = new EventEmitter();
        this.uploadState = 'close';
    }
    ngOnInit() {
        if (this.newFileVersion) {
            this.toggleNewVersion();
        }
    }
    refresh(node) {
        this.alfrescoApiService.nodeUpdated.next(node);
        this.versionListComponent.loadVersionHistory();
        this.uploadSuccess.emit(node);
        this.uploadState = 'close';
    }
    onUploadSuccess(event) {
        this.showVersionComparison = false;
        this.newFileVersion = null;
        this.alfrescoApiService.nodeUpdated.next(event.value.entry);
        this.versionListComponent.loadVersionHistory();
        this.uploadSuccess.emit(event.value.entry);
        this.uploadState = 'close';
    }
    onUploadError(event) {
        this.uploadError.emit(event);
    }
    onUploadCancel() {
        this.uploadState = 'close';
        this.showVersionComparison = false;
        this.newFileVersion = null;
        this.uploadCancel.emit(true);
    }
    onViewVersion(versionId) {
        this.viewVersion.emit(versionId);
    }
    toggleNewVersion() {
        this.uploadState = this.uploadState === 'open' ? 'close' : 'open';
    }
    canUpdate() {
        return this.contentService.hasAllowableOperations(this.node, 'update');
    }
}
VersionManagerComponent.ɵfac = function VersionManagerComponent_Factory(t) { return new (t || VersionManagerComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ContentService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.AlfrescoApiService)); };
VersionManagerComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: VersionManagerComponent, selectors: [["adf-version-manager"]], viewQuery: function VersionManagerComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵstaticViewQuery(_c32, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.versionListComponent = _t.first);
    } }, inputs: { showComments: "showComments", showVersionComparison: "showVersionComparison", allowDownload: "allowDownload", newFileVersion: "newFileVersion", node: "node" }, outputs: { uploadSuccess: "uploadSuccess", uploadError: "uploadError", uploadCancel: "uploadCancel", viewVersion: "viewVersion" }, decls: 11, vars: 7, consts: [[1, "adf-new-version-container"], [3, "node", "newFileVersion", 4, "ngIf"], ["id", "adf-new-version-uploader-container", "fxLayout", "row", "fxLayoutAlign", "end center", 1, "adf-new-version-uploader-container"], ["class", "adf-version-upload", 4, "ngIf"], [1, "adf-version-list-container"], [1, "adf-version-list-table"], ["mat-raised-button", "", "id", "adf-show-version-upload-button", "color", "primary", 3, "click", 4, "ngIf"], [3, "node", "allowDownload", "showComments", "deleted", "restored", "viewVersion"], ["versionList", ""], [3, "node", "newFileVersion"], [1, "adf-version-upload"], ["id", "adf-version-upload-button", 3, "node", "newFileVersion", "currentVersion", "success", "cancel", "error"], ["mat-raised-button", "", "id", "adf-show-version-upload-button", "color", "primary", 3, "click"]], template: function VersionManagerComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵtemplate(1, VersionManagerComponent_adf_version_comparison_1_Template, 1, 2, "adf-version-comparison", 1);
        ɵngcc0.ɵɵelementStart(2, "div", 2);
        ɵngcc0.ɵɵtemplate(3, VersionManagerComponent_table_3_Template, 4, 3, "table", 3);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(4, "div", 4);
        ɵngcc0.ɵɵelementStart(5, "div", 5);
        ɵngcc0.ɵɵelementStart(6, "div");
        ɵngcc0.ɵɵtemplate(7, VersionManagerComponent_button_7_Template, 3, 3, "button", 6);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(8, "div");
        ɵngcc0.ɵɵelementStart(9, "adf-version-list", 7, 8);
        ɵngcc0.ɵɵlistener("deleted", function VersionManagerComponent_Template_adf_version_list_deleted_9_listener($event) { return ctx.refresh($event); })("restored", function VersionManagerComponent_Template_adf_version_list_restored_9_listener($event) { return ctx.refresh($event); })("viewVersion", function VersionManagerComponent_Template_adf_version_list_viewVersion_9_listener($event) { return ctx.onViewVersion($event); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        const _r3 = ɵngcc0.ɵɵreference(10);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.showVersionComparison);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("@uploadToggle", ctx.uploadState);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.uploadState !== "close" && !_r3.isLoading);
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵproperty("ngIf", ctx.uploadState === "close");
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("node", ctx.node)("allowDownload", ctx.allowDownload)("showComments", ctx.showComments);
    } }, directives: function () { return [ɵngcc4.NgIf, VersionListComponent, VersionComparisonComponent, VersionUploadComponent, ɵngcc5.MatButton]; }, pipes: function () { return [ɵngcc8.TranslatePipe]; }, styles: ["adf-version-manager .mat-list .mat-3-line{height:auto!important;width:100%!important}adf-version-manager .mat-list-item-content{padding:16px 0!important}.adf-version-list-item-comment.mat-line{height:100%;overflow:unset!important;white-space:unset!important;word-break:break-all}.adf-button.adf-upload-new-version{box-shadow:none;float:left;height:175px;position:relative;width:100%}.adf-new-version-uploader-container{float:left;height:0;padding:16px 0;position:relative;width:100%}.adf-new-version-container{height:inherit;overflow:hidden}.adf-version-list-table,.adf-version-upload-table{width:100%}.adf-version-list{width:100%!important}.adf-new-version-uploader-container,.adf-version-list{float:left!important}"], encapsulation: 2, data: { animation: [
            trigger('uploadToggle', [
                state('open', style({ height: '175px', opacity: 1, visibility: 'visible' })),
                state('close', style({ height: '0%', opacity: 0, visibility: 'hidden' })),
                transition('open => close', [
                    style({ visibility: 'hidden' }),
                    animate('0.4s cubic-bezier(0.25, 0.8, 0.25, 1)')
                ]),
                transition('close => open', [
                    style({ visibility: 'visible' }),
                    animate('0.4s cubic-bezier(0.25, 0.8, 0.25, 1)')
                ])
            ])
        ] } });
VersionManagerComponent.ctorParameters = () => [
    { type: ContentService },
    { type: AlfrescoApiService }
];
VersionManagerComponent.propDecorators = {
    node: [{ type: Input }],
    newFileVersion: [{ type: Input }],
    showComments: [{ type: Input }],
    showVersionComparison: [{ type: Input }],
    allowDownload: [{ type: Input }],
    uploadSuccess: [{ type: Output }],
    uploadError: [{ type: Output }],
    uploadCancel: [{ type: Output }],
    viewVersion: [{ type: Output }],
    versionListComponent: [{ type: ViewChild, args: ['versionList', { static: true },] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(VersionManagerComponent, [{
        type: Component,
        args: [{
                selector: 'adf-version-manager',
                template: "<div class=\"adf-new-version-container\">\n\n    <adf-version-comparison *ngIf=\"showVersionComparison\" [node]=\"node\" [newFileVersion]=\"newFileVersion\"></adf-version-comparison>\n\n    <div class=\"adf-new-version-uploader-container\" id=\"adf-new-version-uploader-container\" fxLayout=\"row\" fxLayoutAlign=\"end center\" [@uploadToggle]=\"uploadState\">\n        <table class=\"adf-version-upload\" *ngIf=\"uploadState !== 'close' && !versionList.isLoading\">\n            <tr>\n                <td>\n                    <adf-version-upload\n                        id=\"adf-version-upload-button\"\n                        [node]=\"node\"\n                        [newFileVersion]=\"newFileVersion\"\n                        [currentVersion]=\"versionList?.versions[0]?.entry\"\n                        (success)=\"onUploadSuccess($event)\"\n                        (cancel)=\"onUploadCancel()\"\n                        (error)=\"onUploadError($event)\">\n                    </adf-version-upload>\n                </td>\n            </tr>\n        </table>\n    </div>\n\n    <div class=\"adf-version-list-container\">\n        <div class=\"adf-version-list-table\">\n            <div>\n                <button mat-raised-button\n                        id=\"adf-show-version-upload-button\"\n                        (click)=\"toggleNewVersion()\" color=\"primary\"\n                        *ngIf=\"uploadState ==='close'\">{{\n                    'ADF_VERSION_LIST.ACTIONS.UPLOAD.ADD'|\n                    translate }}\n                </button>\n            </div>\n            <div>\n\n                <adf-version-list\n                    #versionList\n                    [node]=\"node\"\n                    [allowDownload]=\"allowDownload\"\n                    [showComments]=\"showComments\"\n                    (deleted)=\"refresh($event)\"\n                    (restored)=\"refresh($event)\"\n                    (viewVersion)=\"onViewVersion($event)\">\n                </adf-version-list>\n            </div>\n        </div>\n    </div>\n</div>\n",
                animations: [
                    trigger('uploadToggle', [
                        state('open', style({ height: '175px', opacity: 1, visibility: 'visible' })),
                        state('close', style({ height: '0%', opacity: 0, visibility: 'hidden' })),
                        transition('open => close', [
                            style({ visibility: 'hidden' }),
                            animate('0.4s cubic-bezier(0.25, 0.8, 0.25, 1)')
                        ]),
                        transition('close => open', [
                            style({ visibility: 'visible' }),
                            animate('0.4s cubic-bezier(0.25, 0.8, 0.25, 1)')
                        ])
                    ])
                ],
                encapsulation: ViewEncapsulation.None,
                styles: ["adf-version-manager .mat-list .mat-3-line{height:auto!important;width:100%!important}adf-version-manager .mat-list-item-content{padding:16px 0!important}.adf-version-list-item-comment.mat-line{height:100%;overflow:unset!important;white-space:unset!important;word-break:break-all}.adf-button.adf-upload-new-version{box-shadow:none;float:left;height:175px;position:relative;width:100%}.adf-new-version-uploader-container{float:left;height:0;padding:16px 0;position:relative;width:100%}.adf-new-version-container{height:inherit;overflow:hidden}.adf-version-list-table,.adf-version-upload-table{width:100%}.adf-version-list{width:100%!important}.adf-new-version-uploader-container,.adf-version-list{float:left!important}"]
            }]
    }], function () { return [{ type: ɵngcc1.ContentService }, { type: ɵngcc1.AlfrescoApiService }]; }, { showComments: [{
            type: Input
        }], showVersionComparison: [{
            type: Input
        }], allowDownload: [{
            type: Input
        }], uploadSuccess: [{
            type: Output
        }], uploadError: [{
            type: Output
        }], uploadCancel: [{
            type: Output
        }], viewVersion: [{
            type: Output
        }], newFileVersion: [{
            type: Input
        }], node: [{
            type: Input
        }], versionListComponent: [{
            type: ViewChild,
            args: ['versionList', { static: true }]
        }] }); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class VersionUploadComponent {
    constructor(contentService, uploadService) {
        this.contentService = contentService;
        this.uploadService = uploadService;
        this.semanticVersion = 'minor';
        this.uploadVersion = false;
        this.disabled = false;
        this.onDestroy$ = new Subject();
        this.majorVersion = '2.0';
        this.minorVersion = '1.1';
        this.showUploadButton = true;
        this.showCancelButton = true;
        this.success = new EventEmitter();
        this.error = new EventEmitter();
        this.cancel = new EventEmitter();
        this.versionChanged = new EventEmitter();
        this.commentChanged = new EventEmitter();
        this.uploadStarted = new EventEmitter();
    }
    set currentVersion(version) {
        if (version) {
            this.minorVersion = this.getNextMinorVersion(version.id);
            this.majorVersion = this.getNextMajorVersion(version.id);
        }
    }
    ngOnInit() {
        this.uploadService.fileUploadStarting
            .pipe(takeUntil(this.onDestroy$))
            .subscribe((event) => {
            this.disabled = true;
            this.uploadStarted.emit(event);
        });
    }
    canUpload() {
        return this.contentService.hasAllowableOperations(this.node, 'update') && !this.disabled;
    }
    isMajorVersion() {
        return this.semanticVersion !== 'minor';
    }
    cancelUpload() {
        this.disabled = false;
        this.cancel.emit();
    }
    onVersionChange() {
        this.versionChanged.emit(this.isMajorVersion());
    }
    onCommentChange() {
        this.commentChanged.emit(this.comment);
    }
    onSuccess(event) {
        this.disabled = false;
        this.success.emit(event);
    }
    onError(event) {
        this.disabled = false;
        this.error.emit(event);
    }
    ngOnDestroy() {
        this.onDestroy$.next();
        this.onDestroy$.complete();
    }
    getNextMinorVersion(version) {
        const { major, minor } = this.getParsedVersion(version);
        return `${major}.${minor + 1}`;
    }
    getNextMajorVersion(version) {
        const { major } = this.getParsedVersion(version);
        return `${major + 1}.0`;
    }
    getParsedVersion(version) {
        const minor = version.indexOf('.') !== -1 ? Number(version.substr(version.indexOf('.') + 1)) : 0;
        const major = parseInt(version, 10);
        return { minor, major };
    }
}
VersionUploadComponent.ɵfac = function VersionUploadComponent_Factory(t) { return new (t || VersionUploadComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ContentService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.UploadService)); };
VersionUploadComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: VersionUploadComponent, selectors: [["adf-version-upload"]], hostAttrs: [1, "adf-version-upload"], inputs: { showUploadButton: "showUploadButton", showCancelButton: "showCancelButton", currentVersion: "currentVersion", node: "node", newFileVersion: "newFileVersion" }, outputs: { success: "success", error: "error", cancel: "cancel", versionChanged: "versionChanged", commentChanged: "commentChanged", uploadStarted: "uploadStarted" }, decls: 14, vars: 21, consts: [[1, "adf-new-version-max-width"], [1, "adf-new-version-radio-group", 3, "ngModel", "ngModelChange", "change"], ["id", "adf-new-version-minor", 1, "adf-new-version-radio-button", 3, "value"], ["id", "adf-new-version-major", 1, "adf-new-version-radio-button", 3, "value"], ["matInput", "", "id", "adf-new-version-text-area", 1, "adf-new-version-text-area", 3, "ngModel", "placeholder", "ngModelChange", "change"], [1, "adf-version-upload-buttons"], ["data-automation-id", "adf-new-version-file-upload", 3, "staticTitle", "node", "disabled", "rootFolderId", "tooltip", "comment", "versioning", "file", "majorVersion", "success", "error", 4, "ngIf"], ["mat-raised-button", "", "id", "adf-new-version-cancel", 3, "click", 4, "ngIf"], ["data-automation-id", "adf-new-version-file-upload", 3, "staticTitle", "node", "disabled", "rootFolderId", "tooltip", "comment", "versioning", "file", "majorVersion", "success", "error"], ["mat-raised-button", "", "id", "adf-new-version-cancel", 3, "click"]], template: function VersionUploadComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "mat-radio-group", 1);
        ɵngcc0.ɵɵlistener("ngModelChange", function VersionUploadComponent_Template_mat_radio_group_ngModelChange_1_listener($event) { return ctx.semanticVersion = $event; })("change", function VersionUploadComponent_Template_mat_radio_group_change_1_listener() { return ctx.onVersionChange(); });
        ɵngcc0.ɵɵelementStart(2, "mat-radio-button", 2);
        ɵngcc0.ɵɵtext(3);
        ɵngcc0.ɵɵpipe(4, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(5, "mat-radio-button", 3);
        ɵngcc0.ɵɵtext(6);
        ɵngcc0.ɵɵpipe(7, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(8, "mat-form-field", 0);
        ɵngcc0.ɵɵelementStart(9, "textarea", 4);
        ɵngcc0.ɵɵlistener("ngModelChange", function VersionUploadComponent_Template_textarea_ngModelChange_9_listener($event) { return ctx.comment = $event; })("change", function VersionUploadComponent_Template_textarea_change_9_listener() { return ctx.onCommentChange(); });
        ɵngcc0.ɵɵpipe(10, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(11, "div", 5);
        ɵngcc0.ɵɵtemplate(12, VersionUploadComponent_adf_upload_version_button_12_Template, 3, 13, "adf-upload-version-button", 6);
        ɵngcc0.ɵɵtemplate(13, VersionUploadComponent_button_13_Template, 3, 3, "button", 7);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngModel", ctx.semanticVersion);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("value", "minor");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind2(4, 9, "ADF_VERSION_LIST.ACTIONS.UPLOAD.MINOR", ɵngcc0.ɵɵpureFunction1(17, _c12, ctx.minorVersion)), " ");
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("value", "major");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind2(7, 12, "ADF_VERSION_LIST.ACTIONS.UPLOAD.MAJOR", ɵngcc0.ɵɵpureFunction1(19, _c12, ctx.majorVersion)), " ");
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵpropertyInterpolate("placeholder", ɵngcc0.ɵɵpipeBind1(10, 15, "ADF_VERSION_LIST.ACTIONS.UPLOAD.COMMENT"));
        ɵngcc0.ɵɵproperty("ngModel", ctx.comment);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngIf", ctx.showUploadButton);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.showCancelButton);
    } }, directives: [ɵngcc20.MatRadioGroup, ɵngcc9.NgControlStatus, ɵngcc9.NgModel, ɵngcc20.MatRadioButton, ɵngcc11.MatFormField, ɵngcc13.MatInput, ɵngcc9.DefaultValueAccessor, ɵngcc4.NgIf, UploadVersionButtonComponent, ɵngcc5.MatButton], pipes: [ɵngcc8.TranslatePipe], styles: [".adf-new-version-radio-group{display:inline-flex;flex-direction:column}.adf-new-version-radio-button{margin:5px}.adf-version-upload-buttons{display:flex;float:right;justify-content:space-between;width:100%}.adf-new-version-max-width{float:right;width:100%}.adf-new-version-text-area{resize:none!important}"], encapsulation: 2 });
VersionUploadComponent.ctorParameters = () => [
    { type: ContentService },
    { type: UploadService }
];
VersionUploadComponent.propDecorators = {
    node: [{ type: Input }],
    newFileVersion: [{ type: Input }],
    showUploadButton: [{ type: Input }],
    showCancelButton: [{ type: Input }],
    currentVersion: [{ type: Input }],
    success: [{ type: Output }],
    error: [{ type: Output }],
    cancel: [{ type: Output }],
    versionChanged: [{ type: Output }],
    commentChanged: [{ type: Output }],
    uploadStarted: [{ type: Output }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(VersionUploadComponent, [{
        type: Component,
        args: [{
                selector: 'adf-version-upload',
                template: "<div class=\"adf-new-version-max-width\">\n    <mat-radio-group class=\"adf-new-version-radio-group\" [(ngModel)]=\"semanticVersion\" (change)=\"onVersionChange()\">\n        <mat-radio-button class=\"adf-new-version-radio-button\" id=\"adf-new-version-minor\"[value]=\"'minor'\">\n            {{ 'ADF_VERSION_LIST.ACTIONS.UPLOAD.MINOR' | translate: { version: minorVersion } }}\n        </mat-radio-button>\n        <mat-radio-button class=\"adf-new-version-radio-button\" id=\"adf-new-version-major\" [value]=\"'major'\">\n            {{ 'ADF_VERSION_LIST.ACTIONS.UPLOAD.MAJOR' | translate: { version: majorVersion } }}\n        </mat-radio-button>\n    </mat-radio-group>\n    <mat-form-field class=\"adf-new-version-max-width\">\n                    <textarea matInput [(ngModel)]=\"comment\" class=\"adf-new-version-text-area\" id=\"adf-new-version-text-area\"\n                              (change)=\"onCommentChange()\"\n                              placeholder=\"{{ 'ADF_VERSION_LIST.ACTIONS.UPLOAD.COMMENT' | translate }}\"></textarea>\n    </mat-form-field>\n\n</div>\n<div class=\"adf-version-upload-buttons\">\n    <adf-upload-version-button *ngIf=\"showUploadButton\"\n        data-automation-id=\"adf-new-version-file-upload\"\n        staticTitle=\"{{ 'ADF_VERSION_LIST.ACTIONS.UPLOAD.TITLE' | translate }}\"\n        [node]=\"node\"\n        [disabled]=\"!canUpload()\"\n        [rootFolderId]=\"node.parentId\"\n        tooltip=\"{{ 'ADF_VERSION_LIST.ACTIONS.UPLOAD.TOOLTIP' | translate }}\"\n        [comment]=\"comment\"\n        [versioning]=\"true\"\n        [file]=\"newFileVersion\"\n        [majorVersion]=\"isMajorVersion()\"\n        (success)=\"onSuccess($event)\"\n        (error)=\"onError($event)\">\n    </adf-upload-version-button>\n    <button mat-raised-button (click)=\"cancelUpload()\" id=\"adf-new-version-cancel\"  *ngIf=\"showCancelButton\" >{{\n        'ADF_VERSION_LIST.ACTIONS.UPLOAD.CANCEL'| translate }}\n    </button>\n</div>\n",
                encapsulation: ViewEncapsulation.None,
                host: { 'class': 'adf-version-upload' },
                styles: [".adf-new-version-radio-group{display:inline-flex;flex-direction:column}.adf-new-version-radio-button{margin:5px}.adf-version-upload-buttons{display:flex;float:right;justify-content:space-between;width:100%}.adf-new-version-max-width{float:right;width:100%}.adf-new-version-text-area{resize:none!important}"]
            }]
    }], function () { return [{ type: ɵngcc1.ContentService }, { type: ɵngcc1.UploadService }]; }, { showUploadButton: [{
            type: Input
        }], showCancelButton: [{
            type: Input
        }], success: [{
            type: Output
        }], error: [{
            type: Output
        }], cancel: [{
            type: Output
        }], versionChanged: [{
            type: Output
        }], commentChanged: [{
            type: Output
        }], uploadStarted: [{
            type: Output
        }], currentVersion: [{
            type: Input
        }], node: [{
            type: Input
        }], newFileVersion: [{
            type: Input
        }] }); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class VersionComparisonComponent {
    constructor(thumbnailService) {
        this.thumbnailService = thumbnailService;
    }
}
VersionComparisonComponent.ɵfac = function VersionComparisonComponent_Factory(t) { return new (t || VersionComparisonComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ThumbnailService)); };
VersionComparisonComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: VersionComparisonComponent, selectors: [["adf-version-comparison"]], inputs: { node: "node", newFileVersion: "newFileVersion" }, decls: 33, vars: 60, consts: [[1, "adf-version-comparison-content"], [1, "adf-version-current"], [3, "src"], [1, "adf-version-comparison-node-name", 3, "title"], [1, "material-icons", "adf-version-arrow-icon"], [1, "adf-version-new"], [1, "adf-version-comparison-file-name", 3, "title"]], template: function VersionComparisonComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "div", 1);
        ɵngcc0.ɵɵelementStart(2, "p");
        ɵngcc0.ɵɵtext(3);
        ɵngcc0.ɵɵpipe(4, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(5, "img", 2);
        ɵngcc0.ɵɵpipe(6, "translate");
        ɵngcc0.ɵɵpipe(7, "translate");
        ɵngcc0.ɵɵpipe(8, "uppercase");
        ɵngcc0.ɵɵpipe(9, "fileType");
        ɵngcc0.ɵɵpipe(10, "translate");
        ɵngcc0.ɵɵpipe(11, "translate");
        ɵngcc0.ɵɵpipe(12, "uppercase");
        ɵngcc0.ɵɵpipe(13, "fileType");
        ɵngcc0.ɵɵelementStart(14, "p", 3);
        ɵngcc0.ɵɵtext(15);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(16, "span", 4);
        ɵngcc0.ɵɵtext(17, "keyboard_arrow_right");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(18, "div", 5);
        ɵngcc0.ɵɵelementStart(19, "p");
        ɵngcc0.ɵɵtext(20);
        ɵngcc0.ɵɵpipe(21, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(22, "img", 2);
        ɵngcc0.ɵɵpipe(23, "translate");
        ɵngcc0.ɵɵpipe(24, "translate");
        ɵngcc0.ɵɵpipe(25, "uppercase");
        ɵngcc0.ɵɵpipe(26, "fileType");
        ɵngcc0.ɵɵpipe(27, "translate");
        ɵngcc0.ɵɵpipe(28, "translate");
        ɵngcc0.ɵɵpipe(29, "uppercase");
        ɵngcc0.ɵɵpipe(30, "fileType");
        ɵngcc0.ɵɵelementStart(31, "p", 6);
        ɵngcc0.ɵɵtext(32);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(4, 12, "ADF_VERSION_COMPARISON.CURRENT_VERSION"));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵpropertyInterpolate("src", ctx.thumbnailService.getMimeTypeIcon(ctx.node.content.mimeType), ɵngcc0.ɵɵsanitizeUrl);
        ɵngcc0.ɵɵattribute("aria-label", ɵngcc0.ɵɵpipeBind2(6, 14, "ADF_VERSION_COMPARISON.ACCESSIBILITY.ICON_TEXT", ɵngcc0.ɵɵpureFunction1(52, _c33, ɵngcc0.ɵɵpipeBind1(7, 17, ɵngcc0.ɵɵpipeBind1(8, 19, ɵngcc0.ɵɵpipeBind1(9, 21, ctx.node.content.mimeType))))))("alt", ɵngcc0.ɵɵpipeBind2(10, 23, "ADF_VERSION_COMPARISON.ACCESSIBILITY.ICON_TEXT", ɵngcc0.ɵɵpureFunction1(54, _c33, ɵngcc0.ɵɵpipeBind1(11, 26, ɵngcc0.ɵɵpipeBind1(12, 28, ɵngcc0.ɵɵpipeBind1(13, 30, ctx.node.content.mimeType))))));
        ɵngcc0.ɵɵadvance(9);
        ɵngcc0.ɵɵpropertyInterpolate("title", ctx.node.name);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate(ctx.node.name);
        ɵngcc0.ɵɵadvance(5);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(21, 32, "ADF_VERSION_COMPARISON.NEW_VERSION"));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵpropertyInterpolate("src", ctx.thumbnailService.getMimeTypeIcon(ctx.newFileVersion.type), ɵngcc0.ɵɵsanitizeUrl);
        ɵngcc0.ɵɵattribute("aria-label", ɵngcc0.ɵɵpipeBind2(23, 34, "ADF_VERSION_COMPARISON.ACCESSIBILITY.ICON_TEXT", ɵngcc0.ɵɵpureFunction1(56, _c33, ɵngcc0.ɵɵpipeBind1(24, 37, ɵngcc0.ɵɵpipeBind1(25, 39, ɵngcc0.ɵɵpipeBind1(26, 41, ctx.newFileVersion.type))))))("alt", ɵngcc0.ɵɵpipeBind2(27, 43, "ADF_VERSION_COMPARISON.ACCESSIBILITY.ICON_TEXT", ɵngcc0.ɵɵpureFunction1(58, _c33, ɵngcc0.ɵɵpipeBind1(28, 46, ɵngcc0.ɵɵpipeBind1(29, 48, ɵngcc0.ɵɵpipeBind1(30, 50, ctx.newFileVersion.type))))));
        ɵngcc0.ɵɵadvance(9);
        ɵngcc0.ɵɵpropertyInterpolate("title", ctx.newFileVersion.name);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate(ctx.newFileVersion.name);
    } }, pipes: [ɵngcc8.TranslatePipe, ɵngcc4.UpperCasePipe, ɵngcc1.FileTypePipe], styles: [".adf-version-comparison-content{align-content:center;align-items:center;display:flex;justify-content:space-around}.adf-version-current,.adf-version-new{align-items:center;display:flex;flex-direction:column}.adf-version-current img,.adf-version-new img{width:100px}.adf-version-arrow-icon{font-size:var(--theme-display-4-font-size)}.adf-version-comparison-file-name,.adf-version-comparison-node-name{overflow:hidden;text-align:center;text-overflow:ellipsis;white-space:nowrap;width:120px}"], encapsulation: 2 });
VersionComparisonComponent.ctorParameters = () => [
    { type: ThumbnailService }
];
VersionComparisonComponent.propDecorators = {
    node: [{ type: Input }],
    newFileVersion: [{ type: Input }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(VersionComparisonComponent, [{
        type: Component,
        args: [{
                selector: 'adf-version-comparison',
                template: "<div class=\"adf-version-comparison-content\">\n    <div class=\"adf-version-current\">\n        <p>{{'ADF_VERSION_COMPARISON.CURRENT_VERSION'|translate }}</p>\n        <img [attr.aria-label]=\"'ADF_VERSION_COMPARISON.ACCESSIBILITY.ICON_TEXT' | translate:\n        { type: (node.content.mimeType | fileType | uppercase) | translate  }\"\n             [attr.alt]=\"'ADF_VERSION_COMPARISON.ACCESSIBILITY.ICON_TEXT' | translate:\n             { type: (node.content.mimeType | fileType | uppercase) | translate }\"\n             src=\"{{thumbnailService.getMimeTypeIcon(node.content.mimeType)}}\"/>\n        <p class=\"adf-version-comparison-node-name\" title=\"{{node.name}}\">{{node.name}}</p>\n    </div>\n    <span class=\"material-icons adf-version-arrow-icon\">keyboard_arrow_right</span>\n    <div class=\"adf-version-new\">\n        <p>{{'ADF_VERSION_COMPARISON.NEW_VERSION'|translate }}</p>\n        <img [attr.aria-label]=\"'ADF_VERSION_COMPARISON.ACCESSIBILITY.ICON_TEXT' | translate:\n        { type: (newFileVersion.type | fileType | uppercase) | translate  }\"\n             [attr.alt]=\"'ADF_VERSION_COMPARISON.ACCESSIBILITY.ICON_TEXT' | translate:\n             { type: (newFileVersion.type | fileType | uppercase) | translate }\"\n            src=\"{{thumbnailService.getMimeTypeIcon(newFileVersion.type)}}\"/>\n        <p class=\"adf-version-comparison-file-name\" title=\"{{newFileVersion.name}}\">{{newFileVersion.name}}</p>\n    </div>\n</div>\n",
                encapsulation: ViewEncapsulation.None,
                styles: [".adf-version-comparison-content{align-content:center;align-items:center;display:flex;justify-content:space-around}.adf-version-current,.adf-version-new{align-items:center;display:flex;flex-direction:column}.adf-version-current img,.adf-version-new img{width:100px}.adf-version-arrow-icon{font-size:var(--theme-display-4-font-size)}.adf-version-comparison-file-name,.adf-version-comparison-node-name{overflow:hidden;text-align:center;text-overflow:ellipsis;white-space:nowrap;width:120px}"]
            }]
    }], function () { return [{ type: ɵngcc1.ThumbnailService }]; }, { node: [{
            type: Input
        }], newFileVersion: [{
            type: Input
        }] }); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class VersionManagerModule {
}
VersionManagerModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: VersionManagerModule });
VersionManagerModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function VersionManagerModule_Factory(t) { return new (t || VersionManagerModule)(); }, imports: [[
            CommonModule,
            MaterialModule,
            CoreModule,
            UploadModule,
            FormsModule
        ], FormsModule] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(VersionManagerModule, { declarations: function () { return [VersionUploadComponent, VersionManagerComponent, VersionListComponent, VersionComparisonComponent]; }, imports: function () { return [CommonModule, MaterialModule, CoreModule, UploadModule, FormsModule]; }, exports: function () { return [VersionUploadComponent, VersionManagerComponent, VersionListComponent, FormsModule, VersionComparisonComponent]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(VersionManagerModule, [{
        type: NgModule,
        args: [{
                imports: [
                    CommonModule,
                    MaterialModule,
                    CoreModule,
                    UploadModule,
                    FormsModule
                ],
                exports: [
                    VersionUploadComponent,
                    VersionManagerComponent,
                    VersionListComponent,
                    FormsModule,
                    VersionComparisonComponent
                ],
                declarations: [
                    VersionUploadComponent,
                    VersionManagerComponent,
                    VersionListComponent,
                    VersionComparisonComponent
                ]
            }]
    }], null, null); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class NameLocationCellComponent {
    constructor() {
        this.name = '';
        this.path = '';
    }
    ngOnInit() {
        if (this.row) {
            this.name = this.row.getValue('name');
            const fullPath = this.row.getValue('path');
            if (fullPath) {
                this.path = fullPath.name || '';
            }
        }
    }
}
NameLocationCellComponent.ɵfac = function NameLocationCellComponent_Factory(t) { return new (t || NameLocationCellComponent)(); };
NameLocationCellComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: NameLocationCellComponent, selectors: [["adf-name-location-cell"]], hostAttrs: [1, "adf-name-location-cell", "adf-datatable-content-cell"], inputs: { row: "row" }, decls: 4, vars: 4, consts: [[1, "adf-name-location-cell-name", "adf-datatable-cell-value", 3, "title"], [1, "adf-name-location-cell-location", "adf-datatable-cell-value", 3, "title"]], template: function NameLocationCellComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵtext(1);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(2, "div", 1);
        ɵngcc0.ɵɵtext(3);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("title", ctx.name);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate(ctx.name);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("title", ctx.path);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate(ctx.path);
    } }, styles: [".adf-name-location-cell{display:grid}.adf-name-location-cell-location{color:var(--theme-text-color);font-size:12px}"], encapsulation: 2, changeDetection: 0 });
NameLocationCellComponent.propDecorators = {
    row: [{ type: Input }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NameLocationCellComponent, [{
        type: Component,
        args: [{
                selector: 'adf-name-location-cell',
                template: `
        <div class="adf-name-location-cell-name adf-datatable-cell-value" [title]="name">{{ name }}</div>
        <div class="adf-name-location-cell-location adf-datatable-cell-value" [title]="path">{{ path }}</div>
    `,
                encapsulation: ViewEncapsulation.None,
                changeDetection: ChangeDetectionStrategy.OnPush,
                host: { class: 'adf-name-location-cell adf-datatable-content-cell' },
                styles: [".adf-name-location-cell{display:grid}.adf-name-location-cell-location{color:var(--theme-text-color);font-size:12px}"]
            }]
    }], function () { return []; }, { row: [{
            type: Input
        }] }); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const defaultValidation = () => true;
class ContentNodeSelectorPanelComponent {
    constructor(customResourcesService, queryBuilderService, userPreferencesService, nodesApiService, uploadService, sitesService, appConfigService, contentNodeSelectorPanelService) {
        this.customResourcesService = customResourcesService;
        this.queryBuilderService = queryBuilderService;
        this.userPreferencesService = userPreferencesService;
        this.nodesApiService = nodesApiService;
        this.uploadService = uploadService;
        this.sitesService = sitesService;
        this.appConfigService = appConfigService;
        this.contentNodeSelectorPanelService = contentNodeSelectorPanelService;
        this.DEFAULT_PAGINATION = new Pagination$1({
            maxItems: 25,
            skipCount: 0
        });
        this.showSiteList = true;
        this.showSearchField = true;
        this.showCounter = false;
        this.restrictRootToCurrentFolderId = false;
        this.currentFolderId = null;
        this.dropdownHideMyFiles = false;
        this.dropdownSiteList = null;
        this._rowFilter = defaultValidation;
        this._excludeSiteContent = [];
        this.imageResolver = null;
        this.pageSize = this.DEFAULT_PAGINATION.maxItems;
        this.selectionMode = 'single';
        this.isSelectionValid = defaultValidation;
        this.select = new EventEmitter();
        this.navigationChange = new EventEmitter();
        this.siteChange = new EventEmitter();
        this.showingSearch = new EventEmitter();
        this.currentFolder = new EventEmitter();
        this.folderLoaded = new EventEmitter();
        this.nodePaging = null;
        this.searchTerm = '';
        this.showingSearchResults = false;
        this.loadingSearchResults = false;
        this.inDialog = false;
        this._chosenNode = null;
        this.selectionWithoutValidation = null;
        this.folderIdToShow = null;
        this.breadcrumbFolderTitle = null;
        this.startSiteGuid = null;
        this.hasValidQuery = false;
        this.showHeader = ShowHeaderMode.Never;
        this.infiniteScroll = false;
        this.debounceSearch = 200;
        this.searchInput = new FormControl();
        this.preselectedNodes = [];
        this.currentUploadBatch = [];
        this.searchPanelExpanded = false;
        this.onDestroy$ = new Subject();
    }
    set rowFilter(rowFilter) {
        this.createRowFilter(rowFilter);
    }
    get rowFilter() {
        return this._rowFilter;
    }
    set excludeSiteContent(excludeSiteContent) {
        this._excludeSiteContent = excludeSiteContent;
        this.createRowFilter(this._rowFilter);
    }
    get excludeSiteContent() {
        return this._excludeSiteContent;
    }
    set showSearch(value) {
        if (value !== undefined && value !== null) {
            this.showSearchField = value;
        }
    }
    get showSearch() {
        return this.showSearchField;
    }
    set showDropdownSiteList(value) {
        if (value !== undefined && value !== null) {
            this.showSiteList = value;
        }
    }
    get showDropdownSiteList() {
        return this.showSiteList;
    }
    set showFilesInResult(value) {
        if (value !== undefined && value !== null) {
            const showFilesQuery = `TYPE:'cm:folder'${value ? " OR TYPE:'cm:content'" : ''}`;
            this.queryBuilderService.addFilterQuery(showFilesQuery);
        }
    }
    set showNodeCounter(value) {
        this.showCounter = value !== null && value !== void 0 ? value : false;
    }
    get showNodeCounter() {
        return this.showCounter;
    }
    set chosenNode(value) {
        this._chosenNode = value;
        this.select.next(value);
    }
    get chosenNode() {
        return this._chosenNode;
    }
    getSelectedCount() {
        var _a;
        return ((_a = this.chosenNode) === null || _a === void 0 ? void 0 : _a.length) || 0;
    }
    ngOnInit() {
        this.searchInput.valueChanges
            .pipe(debounceTime(this.debounceSearch), takeUntil(this.onDestroy$))
            .subscribe((searchValue) => {
            this.searchTerm = searchValue;
            this.queryBuilderService.userQuery = searchValue.length > 0 ? `${searchValue}*` : searchValue;
            this.queryBuilderService.update();
        });
        this.queryBuilderService.updated
            .pipe(takeUntil(this.onDestroy$))
            .subscribe((queryBody) => {
            if (queryBody) {
                this.hasValidQuery = true;
                this.prepareDialogForNewSearch(queryBody);
                this.queryBuilderService.execute(queryBody);
            }
            else {
                this.hasValidQuery = false;
                this.resetFolderToShow();
                this.clearSearch();
            }
        });
        this.queryBuilderService.executed
            .pipe(takeUntil(this.onDestroy$))
            .subscribe((results) => {
            if (this.hasValidQuery) {
                this.showSearchResults(results);
            }
        });
        this.userPreferencesService
            .select(UserPreferenceValues.PaginationSize)
            .pipe(takeUntil(this.onDestroy$))
            .subscribe(pagSize => this.pageSize = pagSize);
        this.target = this.documentList;
        this.folderIdToShow = this.currentFolderId;
        if (this.currentFolderId) {
            if (this.restrictRootToCurrentFolderId) {
                this.breadcrumbRootId = this.currentFolderId;
                this.siteId = this.currentFolderId;
            }
            else {
                this.getStartSite();
            }
        }
        this.breadcrumbTransform = this.breadcrumbTransform ? this.breadcrumbTransform : null;
        this.isSelectionValid = this.isSelectionValid ? this.isSelectionValid : defaultValidation;
        this.onFileUploadEvent();
        this.onFileUploadDeletedEvent();
        this.resetPagination();
        this.setSearchScopeToNodes();
        this.documentList.$folderNode
            .pipe(takeUntil(this.onDestroy$))
            .subscribe((currentNode) => {
            this.currentFolder.emit(currentNode);
        });
        this.sorting = this.appConfigService.get('adf-content-node-selector.sorting', ['createdAt', 'desc']);
    }
    ngOnDestroy() {
        this.onDestroy$.next(true);
        this.onDestroy$.complete();
    }
    toggleSearchPanel() {
        this.searchPanelExpanded = !this.searchPanelExpanded;
    }
    hasCustomModels() {
        var _a, _b;
        return ((_b = (_a = this.contentNodeSelectorPanelService) === null || _a === void 0 ? void 0 : _a.customModels) === null || _b === void 0 ? void 0 : _b.length) > 0;
    }
    onFileUploadEvent() {
        this.uploadService.fileUploadComplete
            .pipe(debounceTime(500), takeUntil(this.onDestroy$))
            .subscribe((fileUploadEvent) => {
            this.currentUploadBatch.push(fileUploadEvent.data);
            if (!this.uploadService.isUploading()) {
                this.preselectedNodes = this.getPreselectNodesBasedOnSelectionMode();
                this.currentUploadBatch = [];
                this.documentList.reloadWithoutResettingSelection();
            }
        });
    }
    onFileUploadDeletedEvent() {
        this.uploadService.fileUploadDeleted
            .pipe(takeUntil(this.onDestroy$))
            .subscribe((deletedFileEvent) => {
            this.documentList.unselectRowFromNodeId(deletedFileEvent.file.data.entry.id);
            this.documentList.reloadWithoutResettingSelection();
        });
    }
    getStartSite() {
        this.nodesApiService.getNode(this.currentFolderId).subscribe((startNodeEntry) => {
            this.startSiteGuid = this.sitesService.getSiteNameFromNodePath(startNodeEntry);
            if (this.startSiteGuid) {
                this.sitesService.getSite(this.startSiteGuid).subscribe((startSiteEntry) => {
                    if (startSiteEntry instanceof SiteEntry) {
                        this.siteChange.emit(startSiteEntry.entry.title);
                    }
                });
            }
        });
    }
    createRowFilter(filter) {
        if (!filter) {
            filter = () => true;
        }
        this._rowFilter = (value, index, array) => {
            return filter(value, index, array) &&
                !this.isExcludedSiteContent(value);
        };
    }
    isExcludedSiteContent(row) {
        const entry = row.node.entry;
        if (this._excludeSiteContent && this._excludeSiteContent.length &&
            entry &&
            entry.properties &&
            entry.properties['st:componentId']) {
            const excludedItem = this._excludeSiteContent.find((id) => entry.properties['st:componentId'] === id);
            return !!excludedItem;
        }
        return false;
    }
    siteChanged(chosenSite) {
        this.siteId = chosenSite.entry.guid;
        this.setTitleIfCustomSite(chosenSite);
        this.siteChange.emit(chosenSite.entry.title);
        this.queryBuilderService.update();
    }
    get breadcrumbFolderNode() {
        var _a;
        let folderNode;
        if (this.showingSearchResults && ((_a = this.selectionWithoutValidation) === null || _a === void 0 ? void 0 : _a.length)) {
            folderNode = this.selectionWithoutValidation[0];
        }
        else {
            folderNode = this.documentList.folderNode;
        }
        return folderNode;
    }
    prepareDialogForNewSearch(queryBody) {
        this.target = queryBody ? null : this.documentList;
        if (this.target) {
            this.infinitePaginationComponent.reset();
        }
        this.folderIdToShow = null;
        this.preselectedNodes = [];
        this.loadingSearchResults = true;
        this.addCorrespondingNodeIdsQuery();
        this.resetChosenNode();
    }
    clear() {
        this.searchTerm = '';
        this.queryBuilderService.userQuery = '';
        this.queryBuilderService.update();
    }
    resetFolderToShow() {
        this.folderIdToShow = this.siteId || this.currentFolderId;
    }
    clearSearch() {
        this.searchTerm = '';
        this.nodePaging = null;
        this.resetPagination();
        this.resetChosenNode();
        this.showingSearchResults = false;
        this.showingSearch.emit(this.showingSearchResults);
    }
    addCorrespondingNodeIdsQuery() {
        let extraParentFiltering = '';
        if (this.customResourcesService.hasCorrespondingNodeIds(this.siteId)) {
            this.customResourcesService.getCorrespondingNodeIds(this.siteId)
                .subscribe((nodeIds) => {
                if (nodeIds && nodeIds.length) {
                    nodeIds
                        .filter((id) => id !== this.siteId)
                        .forEach((extraId) => {
                        extraParentFiltering += ` OR ANCESTOR:'workspace://SpacesStore/${extraId}'`;
                    });
                }
                const parentFiltering = this.siteId ? `ANCESTOR:'workspace://SpacesStore/${this.siteId}'${extraParentFiltering}` : '';
                this.queryBuilderService.addFilterQuery(parentFiltering);
            });
        }
        else {
            const parentFiltering = this.siteId ? `ANCESTOR:'workspace://SpacesStore/${this.siteId}'` : '';
            this.queryBuilderService.addFilterQuery(parentFiltering);
        }
    }
    setSearchScopeToNodes() {
        const scope = {
            locations: 'nodes'
        };
        this.queryBuilderService.setScope(scope);
    }
    showSearchResults(results) {
        this.showingSearchResults = true;
        this.loadingSearchResults = false;
        this.showingSearch.emit(this.showingSearchResults);
        this.nodePaging = results;
    }
    onFolderChange($event) {
        this.folderIdToShow = $event.value.id;
        this.showingSearchResults = false;
        this.infiniteScroll = false;
        this.breadcrumbFolderTitle = null;
        this.preselectedNodes = [];
        this.clearSearch();
        this.navigationChange.emit($event);
    }
    onFolderLoaded(nodePaging) {
        this.updatePaginationAfterRowFilter(nodePaging);
        if (!this.showingSearchResults) {
            this.attemptNodeSelection(this.documentList.folderNode);
        }
        this.folderLoaded.emit();
    }
    updatePaginationAfterRowFilter(nodePaging) {
        if (this.documentList.data.getRows().length < nodePaging.list.pagination.maxItems) {
            nodePaging.list.pagination.hasMoreItems = false;
        }
    }
    showBreadcrumbs() {
        return !this.showingSearchResults || this.chosenNode;
    }
    getNextPageOfSearch(pagination) {
        this.infiniteScroll = true;
        this.queryBuilderService.paging.maxItems = pagination.maxItems;
        this.queryBuilderService.paging.skipCount = pagination.skipCount;
        if (this.searchTerm.length > 0) {
            this.queryBuilderService.update();
        }
    }
    attemptNodeSelection(entry) {
        if (entry && this.isSelectionValid(entry)) {
            this.chosenNode = [entry];
        }
    }
    resetChosenNode() {
        this.chosenNode = null;
    }
    onCurrentSelection(nodesEntries) {
        const validNodesEntity = nodesEntries.filter((node) => this.isSelectionValid(node.entry));
        this.chosenNode = validNodesEntity.map((node) => node.entry);
        this.selectionWithoutValidation = nodesEntries.map(node => node.entry);
    }
    setTitleIfCustomSite(site) {
        if (this.customResourcesService.isCustomSource(site.entry.guid)) {
            this.breadcrumbFolderTitle = site.entry.title;
            if (this.documentList.folderNode.path.elements) {
                this.breadcrumbFolderNode.name = site.entry.title;
                this.documentList.folderNode.path.elements = null;
            }
        }
        else {
            this.breadcrumbFolderTitle = null;
        }
    }
    hasPreselectNodes() {
        var _a;
        return ((_a = this.preselectedNodes) === null || _a === void 0 ? void 0 : _a.length) > 0;
    }
    isSingleSelectionMode() {
        return this.selectionMode === 'single';
    }
    getPreselectNodesBasedOnSelectionMode() {
        var _a;
        let selectedNodes = [];
        if ((_a = this.currentUploadBatch) === null || _a === void 0 ? void 0 : _a.length) {
            if (this.isSingleSelectionMode()) {
                selectedNodes = [this.currentUploadBatch[this.currentUploadBatch.length - 1]];
            }
            else {
                selectedNodes = this.currentUploadBatch;
            }
        }
        return selectedNodes;
    }
    resetPagination() {
        this.queryBuilderService.paging = {
            maxItems: this.pageSize,
            skipCount: this.DEFAULT_PAGINATION.skipCount
        };
    }
}
ContentNodeSelectorPanelComponent.ɵfac = function ContentNodeSelectorPanelComponent_Factory(t) { return new (t || ContentNodeSelectorPanelComponent)(ɵngcc0.ɵɵdirectiveInject(CustomResourcesService), ɵngcc0.ɵɵdirectiveInject(SEARCH_QUERY_SERVICE_TOKEN), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.UserPreferencesService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NodesApiService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.UploadService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.SitesService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.AppConfigService), ɵngcc0.ɵɵdirectiveInject(ContentNodeSelectorPanelService)); };
ContentNodeSelectorPanelComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ContentNodeSelectorPanelComponent, selectors: [["adf-content-node-selector-panel"]], viewQuery: function ContentNodeSelectorPanelComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵstaticViewQuery(_c34, true);
        ɵngcc0.ɵɵstaticViewQuery(HighlightDirective, true);
        ɵngcc0.ɵɵstaticViewQuery(InfinitePaginationComponent, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.documentList = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.highlighter = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.infinitePaginationComponent = _t.first);
    } }, hostAttrs: [1, "adf-content-node-selector-panel"], inputs: { restrictRootToCurrentFolderId: "restrictRootToCurrentFolderId", currentFolderId: "currentFolderId", dropdownHideMyFiles: "dropdownHideMyFiles", dropdownSiteList: "dropdownSiteList", imageResolver: "imageResolver", pageSize: "pageSize", selectionMode: "selectionMode", isSelectionValid: "isSelectionValid", rowFilter: "rowFilter", excludeSiteContent: "excludeSiteContent", showSearch: "showSearch", showDropdownSiteList: "showDropdownSiteList", showFilesInResult: "showFilesInResult", showNodeCounter: "showNodeCounter", breadcrumbTransform: "breadcrumbTransform", where: "where" }, outputs: { select: "select", navigationChange: "navigationChange", siteChange: "siteChange", showingSearch: "showingSearch", currentFolder: "currentFolder", folderLoaded: "folderLoaded" }, features: [ɵngcc0.ɵɵProvidersFeature([{
                provide: SEARCH_QUERY_SERVICE_TOKEN,
                useClass: SearchQueryBuilderService
            }])], decls: 29, vars: 31, consts: [[1, "adf-content-node-selector-content"], ["floatPlaceholder", "never", "class", "adf-content-node-selector-content-input", 4, "ngIf"], ["class", "full-width", "data-automation-id", "content-node-selector-sites-combo", 3, "placeholder", "hideMyFiles", "siteList", "value", "change", 4, "ngIf"], ["data-automation-id", "adf-toggle-search-panel-button", "mat-icon-button", "", 3, "click", 4, "ngIf"], [1, "adf-content-node-selector-search-panel-container"], [4, "ngIf"], [1, "adf-content-node-selector-document-list-container"], ["class", "adf-content-node-selector-content-breadcrumb", "data-automation-id", "content-node-selector-content-breadcrumb", 3, "target", "rootId", "transform", "folderNode", "root", "navigate", 4, "ngIf"], [3, "adf-node-counter", 4, "ngIf"], ["data-automation-id", "content-node-selector-content-list", 1, "adf-content-node-selector-content-list"], ["adf-highlight-selector", ".adf-name-location-cell-name", "sortingMode", "server", "data-automation-id", "content-node-selector-document-list", 3, "adf-highlight", "showHeader", "node", "preselectNodes", "maxItems", "rowFilter", "imageResolver", "currentFolderId", "selectionMode", "contextMenuActions", "contentActions", "allowDropFiles", "sorting", "where", "folderChange", "ready", "nodeSelected"], ["documentList", ""], ["key", "$thumbnail", "type", "image"], ["key", "name", "type", "text", "title", "ADF-DOCUMENT-LIST.LAYOUT.NAME", 1, "adf-full-width", "adf-ellipsis-cell"], ["key", "modifiedAt", "type", "date", "title", "ADF-DOCUMENT-LIST.LAYOUT.MODIFIED_ON", "format", "timeAgo", 1, "adf-content-selector-modified-cell"], ["key", "createdByUser.displayName", "type", "text", "title", "ADF-DOCUMENT-LIST.LAYOUT.CREATED_BY", 1, "adf-content-selector-modifier-cell"], ["key", "visibility", "type", "text", "title", "ADF-DOCUMENT-LIST.LAYOUT.STATUS", 1, "adf-content-selector-visibility-cell"], ["data-automation-id", "content-node-selector-search-pagination", 3, "target", "loading", "loadMore"], ["floatPlaceholder", "never", 1, "adf-content-node-selector-content-input"], ["matInput", "", "id", "searchInput", "type", "text", "data-automation-id", "content-node-selector-search-input", 3, "formControl", "placeholder", "value"], ["matSuffix", "", "class", "adf-content-node-selector-content-input-icon", "data-automation-id", "content-node-selector-search-clear", 3, "click", 4, "ngIf"], ["matSuffix", "", "class", "adf-content-node-selector-content-input-icon", "data-automation-id", "content-node-selector-search-icon", 4, "ngIf"], ["matSuffix", "", "data-automation-id", "content-node-selector-search-clear", 1, "adf-content-node-selector-content-input-icon", 3, "click"], ["matSuffix", "", "data-automation-id", "content-node-selector-search-icon", 1, "adf-content-node-selector-content-input-icon"], ["data-automation-id", "content-node-selector-sites-combo", 1, "full-width", 3, "placeholder", "hideMyFiles", "siteList", "value", "change"], ["data-automation-id", "adf-toggle-search-panel-button", "mat-icon-button", "", 3, "click"], ["role", "heading", "aria-level", "3", 1, "adf-search-results-label"], ["data-automation-id", "content-node-selector-content-breadcrumb", 1, "adf-content-node-selector-content-breadcrumb", 3, "target", "rootId", "transform", "folderNode", "root", "navigate"], [3, "adf-node-counter"], [3, "row"]], template: function ContentNodeSelectorPanelComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵtemplate(1, ContentNodeSelectorPanelComponent_mat_form_field_1_Template, 5, 7, "mat-form-field", 1);
        ɵngcc0.ɵɵtemplate(2, ContentNodeSelectorPanelComponent_adf_sites_dropdown_2_Template, 1, 4, "adf-sites-dropdown", 2);
        ɵngcc0.ɵɵtemplate(3, ContentNodeSelectorPanelComponent_button_3_Template, 5, 3, "button", 3);
        ɵngcc0.ɵɵelementStart(4, "div", 4);
        ɵngcc0.ɵɵtemplate(5, ContentNodeSelectorPanelComponent_adf_search_panel_5_Template, 1, 0, "adf-search-panel", 5);
        ɵngcc0.ɵɵelementStart(6, "div", 6);
        ɵngcc0.ɵɵelementStart(7, "adf-toolbar");
        ɵngcc0.ɵɵelementStart(8, "adf-toolbar-title");
        ɵngcc0.ɵɵtemplate(9, ContentNodeSelectorPanelComponent_ng_container_9_Template, 4, 3, "ng-container", 5);
        ɵngcc0.ɵɵtemplate(10, ContentNodeSelectorPanelComponent_adf_dropdown_breadcrumb_10_Template, 1, 5, "adf-dropdown-breadcrumb", 7);
        ɵngcc0.ɵɵtemplate(11, ContentNodeSelectorPanelComponent_ng_container_11_Template, 1, 1, "ng-container", 8);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(12, "div", 9);
        ɵngcc0.ɵɵelementStart(13, "adf-document-list", 10, 11);
        ɵngcc0.ɵɵlistener("folderChange", function ContentNodeSelectorPanelComponent_Template_adf_document_list_folderChange_13_listener($event) { return ctx.onFolderChange($event); })("ready", function ContentNodeSelectorPanelComponent_Template_adf_document_list_ready_13_listener($event) { return ctx.onFolderLoaded($event); })("nodeSelected", function ContentNodeSelectorPanelComponent_Template_adf_document_list_nodeSelected_13_listener($event) { return ctx.onCurrentSelection($event); });
        ɵngcc0.ɵɵelementStart(15, "adf-custom-empty-content-template");
        ɵngcc0.ɵɵelementStart(16, "div");
        ɵngcc0.ɵɵtext(17);
        ɵngcc0.ɵɵpipe(18, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(19, "data-columns");
        ɵngcc0.ɵɵelement(20, "data-column", 12);
        ɵngcc0.ɵɵelementStart(21, "data-column", 13);
        ɵngcc0.ɵɵtemplate(22, ContentNodeSelectorPanelComponent_ng_template_22_Template, 1, 1, "ng-template");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(23, "data-column", 14);
        ɵngcc0.ɵɵelement(24, "data-column", 15);
        ɵngcc0.ɵɵelement(25, "data-column", 16);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(26, "adf-infinite-pagination", 17);
        ɵngcc0.ɵɵlistener("loadMore", function ContentNodeSelectorPanelComponent_Template_adf_infinite_pagination_loadMore_26_listener($event) { return ctx.getNextPageOfSearch($event); });
        ɵngcc0.ɵɵtext(27);
        ɵngcc0.ɵɵpipe(28, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.showSearch);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.showDropdownSiteList);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.hasCustomModels());
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.searchPanelExpanded);
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.showBreadcrumbs());
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.showBreadcrumbs());
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.showNodeCounter);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵclassProp("adf-content-node-selector-content-list-searchLayout", ctx.showingSearchResults);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("adf-highlight", ctx.searchTerm)("showHeader", ctx.showHeader)("node", ctx.nodePaging)("preselectNodes", ctx.preselectedNodes)("maxItems", ctx.pageSize)("rowFilter", ctx._rowFilter)("imageResolver", ctx.imageResolver)("currentFolderId", ctx.folderIdToShow)("selectionMode", ctx.selectionMode)("contextMenuActions", false)("contentActions", false)("allowDropFiles", false)("sorting", ctx.sorting)("where", ctx.where);
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(18, 27, "NODE_SELECTOR.NO_RESULTS"));
        ɵngcc0.ɵɵadvance(9);
        ɵngcc0.ɵɵproperty("target", ctx.target)("loading", ctx.loadingSearchResults);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(28, 29, "ADF-DOCUMENT-LIST.LAYOUT.LOAD_MORE"), " ");
    } }, directives: [ɵngcc4.NgIf, ɵngcc1.ToolbarComponent, ɵngcc1.ToolbarTitleComponent, DocumentListComponent, ɵngcc1.HighlightDirective, ɵngcc1.CustomEmptyContentTemplateDirective, ɵngcc1.DataColumnListComponent, ɵngcc1.DataColumnComponent, ɵngcc1.InfinitePaginationComponent, ɵngcc11.MatFormField, ɵngcc13.MatInput, ɵngcc9.DefaultValueAccessor, ɵngcc9.NgControlStatus, ɵngcc9.FormControlDirective, ɵngcc6.MatIcon, ɵngcc11.MatSuffix, DropdownSitesComponent, ɵngcc5.MatButton, SearchPanelComponent, DropdownBreadcrumbComponent, NodeCounterDirective, NameLocationCellComponent], pipes: [ɵngcc8.TranslatePipe], styles: [".adf-search-results-label{color:var(--theme-text-bold-color);flex:1;font-size:14px;font-stretch:normal;font-style:normal;font-weight:600;letter-spacing:-.2px;line-height:1.43}.adf-toolbar .mat-toolbar{border-bottom-width:0;font-size:14px;max-height:48px}.adf-toolbar .mat-toolbar.mat-toolbar-single-row{height:auto}.adf-content-node-selector-search-panel-container{display:flex}.adf-content-node-selector-document-list-container{width:100%}.adf-content-node-selector-content{padding-top:0}.adf-content-node-selector-content-input{width:100%}.adf-content-node-selector-content-input-icon{color:var(--adf-node-selector-icon-color);cursor:pointer}.adf-content-node-selector-content-input-icon:hover{color:var(--theme-fg-base-color)}.adf-content-node-selector-content .mat-form-field-underline .mat-form-field-ripple{height:1px;transition:none}.adf-content-node-selector-content .adf-site-dropdown-container .mat-form-field{display:block;margin-bottom:15px}.adf-content-node-selector-content .adf-site-dropdown-list-element{margin-bottom:0;width:100%}.adf-content-node-selector-content .adf-site-dropdown-list-element .mat-select-trigger{font-size:14px}.adf-content-node-selector-content-breadcrumb .adf-dropdown-breadcrumb-trigger{outline:none}.adf-content-node-selector-content-breadcrumb .adf-dropdown-breadcrumb-trigger .mat-icon{color:var(--adf-node-selector-base-color)}.adf-content-node-selector-content-breadcrumb .adf-dropdown-breadcrumb-trigger .mat-icon:hover{color:var(--adf-node-selector-base-bold-color)}.adf-content-node-selector-content-breadcrumb .adf-dropdown-breadcrumb-trigger:focus .mat-icon{color:var(--theme-primary-color)}.adf-content-node-selector-content-breadcrumb .adf-dropdown-breadcrumb-item-chevron{color:var(--adf-node-selector-base-color)}.adf-content-node-selector-content-list{border:1px solid var(--theme-border-color);border-top:0;height:300px;overflow:auto}.adf-content-node-selector-content-list .adf-highlight{color:var(--theme-primary-color)}.adf-content-node-selector-content-list .adf-datatable-list{border:none}.adf-content-node-selector-content-list .adf-datatable-list .adf-datatable-selected{height:100%;width:100%}.adf-content-node-selector-content-list .adf-datatable-list .adf-datatable-selected>svg{fill:#00bcd4!important}.adf-content-node-selector-content-list .adf-datatable-list .adf-no-content-container{border:none!important;text-align:center}.adf-content-node-selector-content-list .adf-datatable-list .adf-datatable-cell--image{max-width:35px;min-width:35px;width:35px}.adf-content-node-selector-content-list .adf-datatable-list .adf-datatable-cell:nth-child(2){flex:1 0 95px}.adf-content-node-selector-content-list .adf-datatable-list .adf-datatable-cell .adf-name-location-cell-location{display:none}.adf-content-node-selector-content-list .adf-datatable-list .adf-datatable-cell.adf-content-selector-visibility-cell{flex:0 1 auto;min-width:1px}.adf-content-node-selector-content-list .adf-datatable-list .adf-datatable-cell.adf-content-selector-visibility-cell .adf-datatable-cell-value{padding:0}.adf-content-node-selector-content-list .adf-datatable-list .adf-datatable-body .adf-datatable-row{min-height:40px}@media screen and (-ms-high-contrast:active),screen and (-ms-high-contrast:none){.adf-content-node-selector-content-list .adf-datatable-list .adf-datatable-body .adf-datatable-row{padding-top:15px}}.adf-content-node-selector-content-list .adf-datatable-list .adf-datatable-body .adf-datatable-row:first-child .adf-datatable-cell{border-top:none}.adf-content-node-selector-content-list .adf-datatable-list .adf-datatable-body .adf-datatable-row:last-child .adf-datatable-cell{border-bottom:none}.adf-content-node-selector-content-list-searchLayout .adf-datatable-list .adf-datatable-row{min-height:65px!important}.adf-content-node-selector-content-list-searchLayout .adf-datatable-list .adf-datatable-row .adf-datatable-cell .adf-name-location-cell-location{display:block;padding:0 10px}.adf-content-node-selector-content-list-searchLayout .adf-datatable-list .adf-datatable-row .adf-datatable-cell .adf-name-location-cell-name{padding:5px 10px 2px}.adf-content-node-selector-content-list-searchLayout .adf-datatable-list .adf-datatable-row .adf-datatable-cell.adf-content-selector-modified-cell,.adf-content-node-selector-content-list-searchLayout .adf-datatable-list .adf-datatable-row .adf-datatable-cell.adf-content-selector-modifier-cell,.adf-content-node-selector-content-list-searchLayout .adf-datatable-list .adf-datatable-row .adf-datatable-cell.adf-content-selector-visibility-cell{display:none}"], encapsulation: 2 });
ContentNodeSelectorPanelComponent.ctorParameters = () => [
    { type: CustomResourcesService },
    { type: SearchQueryBuilderService, decorators: [{ type: Inject, args: [SEARCH_QUERY_SERVICE_TOKEN,] }] },
    { type: UserPreferencesService },
    { type: NodesApiService },
    { type: UploadService },
    { type: SitesService },
    { type: AppConfigService },
    { type: ContentNodeSelectorPanelService }
];
ContentNodeSelectorPanelComponent.propDecorators = {
    restrictRootToCurrentFolderId: [{ type: Input }],
    currentFolderId: [{ type: Input }],
    dropdownHideMyFiles: [{ type: Input }],
    dropdownSiteList: [{ type: Input }],
    where: [{ type: Input }],
    rowFilter: [{ type: Input }],
    excludeSiteContent: [{ type: Input }],
    imageResolver: [{ type: Input }],
    pageSize: [{ type: Input }],
    selectionMode: [{ type: Input }],
    isSelectionValid: [{ type: Input }],
    breadcrumbTransform: [{ type: Input }],
    showSearch: [{ type: Input }],
    showDropdownSiteList: [{ type: Input }],
    showFilesInResult: [{ type: Input }],
    showNodeCounter: [{ type: Input }],
    select: [{ type: Output }],
    navigationChange: [{ type: Output }],
    siteChange: [{ type: Output }],
    showingSearch: [{ type: Output }],
    currentFolder: [{ type: Output }],
    folderLoaded: [{ type: Output }],
    documentList: [{ type: ViewChild, args: ['documentList', { static: true },] }],
    highlighter: [{ type: ViewChild, args: [HighlightDirective, { static: true },] }],
    infinitePaginationComponent: [{ type: ViewChild, args: [InfinitePaginationComponent, { static: true },] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ContentNodeSelectorPanelComponent, [{
        type: Component,
        args: [{
                selector: 'adf-content-node-selector-panel',
                template: "<div class=\"adf-content-node-selector-content\">\n    <mat-form-field floatPlaceholder=\"never\" class=\"adf-content-node-selector-content-input\" *ngIf=\"showSearch\">\n        <input matInput\n            id=\"searchInput\"\n            [formControl]=\"searchInput\"\n            type=\"text\"\n            placeholder=\"{{'NODE_SELECTOR.SEARCH' | translate}}\"\n            [value]=\"searchTerm\"\n            data-automation-id=\"content-node-selector-search-input\">\n\n        <mat-icon *ngIf=\"searchTerm.length > 0\"\n            matSuffix (click)=\"clear()\"\n            class=\"adf-content-node-selector-content-input-icon\"\n            data-automation-id=\"content-node-selector-search-clear\">clear\n        </mat-icon>\n\n        <mat-icon *ngIf=\"searchTerm.length === 0\"\n            matSuffix\n            class=\"adf-content-node-selector-content-input-icon\"\n            data-automation-id=\"content-node-selector-search-icon\">search\n        </mat-icon>\n\n    </mat-form-field>\n    <adf-sites-dropdown\n        *ngIf=\"showDropdownSiteList\"\n        class=\"full-width\"\n        (change)=\"siteChanged($event)\"\n        [placeholder]=\"'NODE_SELECTOR.SELECT_LOCATION'\"\n        [hideMyFiles]=\"dropdownHideMyFiles\"\n        [siteList]=\"dropdownSiteList\"\n        [value]=\"startSiteGuid\"\n        data-automation-id=\"content-node-selector-sites-combo\">\n    </adf-sites-dropdown>\n    <button *ngIf=\"hasCustomModels()\"\n        data-automation-id=\"adf-toggle-search-panel-button\"\n        mat-icon-button\n        (click)=\"toggleSearchPanel()\">\n        <mat-icon>filter_list</mat-icon>\n        {{ 'SEARCH.SEARCH_HEADER.TITLE' | translate }}\n    </button>\n    <div class=\"adf-content-node-selector-search-panel-container\">\n        <adf-search-panel *ngIf=\"searchPanelExpanded\">\n        </adf-search-panel>\n        <div class=\"adf-content-node-selector-document-list-container\">\n    <adf-toolbar>\n        <adf-toolbar-title>\n            <ng-container *ngIf=\"!showBreadcrumbs()\">\n                <span role=\"heading\" aria-level=\"3\" class=\"adf-search-results-label\">{{ 'NODE_SELECTOR.SEARCH_RESULTS' | translate }}</span>\n            </ng-container>\n            <adf-dropdown-breadcrumb *ngIf=\"showBreadcrumbs()\"\n                class=\"adf-content-node-selector-content-breadcrumb\"\n                (navigate)=\"clearSearch()\"\n                [target]=\"documentList\"\n                [rootId]=\"breadcrumbRootId\"\n                [transform]=\"breadcrumbTransform\"\n                [folderNode]=\"breadcrumbFolderNode\"\n                [root]=\"breadcrumbFolderTitle\"\n                data-automation-id=\"content-node-selector-content-breadcrumb\">\n            </adf-dropdown-breadcrumb>\n            <ng-container *ngIf=\"showNodeCounter\" [adf-node-counter]=\"getSelectedCount()\"></ng-container>\n        </adf-toolbar-title>\n    </adf-toolbar>\n\n    <div\n        class=\"adf-content-node-selector-content-list\"\n        [class.adf-content-node-selector-content-list-searchLayout]=\"showingSearchResults\"\n        data-automation-id=\"content-node-selector-content-list\">\n        <adf-document-list\n            #documentList\n            [adf-highlight]=\"searchTerm\"\n            adf-highlight-selector=\".adf-name-location-cell-name\"\n            [showHeader]=\"showHeader\"\n            [node]=\"nodePaging\"\n            [preselectNodes]=\"preselectedNodes\"\n            [maxItems]=\"pageSize\"\n            [rowFilter]=\"_rowFilter\"\n            [imageResolver]=\"imageResolver\"\n            [currentFolderId]=\"folderIdToShow\"\n            [selectionMode]=\"selectionMode\"\n            [contextMenuActions]=\"false\"\n            [contentActions]=\"false\"\n            [allowDropFiles]=\"false\"\n            [sorting]=\"sorting\"\n            sortingMode=\"server\"\n            [where]=\"where\"\n            (folderChange)=\"onFolderChange($event)\"\n            (ready)=\"onFolderLoaded($event)\"\n            (nodeSelected)=\"onCurrentSelection($event)\"\n            data-automation-id=\"content-node-selector-document-list\">\n\n            <adf-custom-empty-content-template>\n                <div>{{ 'NODE_SELECTOR.NO_RESULTS' | translate }}</div>\n            </adf-custom-empty-content-template>\n\n            <data-columns>\n                <data-column key=\"$thumbnail\" type=\"image\"></data-column>\n                <data-column key=\"name\" type=\"text\" title=\"ADF-DOCUMENT-LIST.LAYOUT.NAME\" class=\"adf-full-width adf-ellipsis-cell\">\n                    <ng-template let-context>\n                        <adf-name-location-cell [row]=\"context.row\"></adf-name-location-cell>\n                    </ng-template>\n                </data-column>\n                <data-column key=\"modifiedAt\" type=\"date\" title=\"ADF-DOCUMENT-LIST.LAYOUT.MODIFIED_ON\" format=\"timeAgo\" class=\"adf-content-selector-modified-cell\"></data-column>\n                <data-column key=\"createdByUser.displayName\" type=\"text\" title=\"ADF-DOCUMENT-LIST.LAYOUT.CREATED_BY\" class=\"adf-content-selector-modifier-cell\"></data-column>\n                <data-column key=\"visibility\" type=\"text\" title=\"ADF-DOCUMENT-LIST.LAYOUT.STATUS\" class=\"adf-content-selector-visibility-cell\"></data-column>\n            </data-columns>\n\n        </adf-document-list>\n\n        <adf-infinite-pagination\n            [target]=\"target\"\n            [loading]=\"loadingSearchResults\"\n            (loadMore)=\"getNextPageOfSearch($event)\"\n            data-automation-id=\"content-node-selector-search-pagination\">\n            {{ 'ADF-DOCUMENT-LIST.LAYOUT.LOAD_MORE' | translate }}\n        </adf-infinite-pagination>\n    </div>\n        </div>\n    </div>\n</div>\n",
                encapsulation: ViewEncapsulation.None,
                host: { 'class': 'adf-content-node-selector-panel' },
                providers: [{
                        provide: SEARCH_QUERY_SERVICE_TOKEN,
                        useClass: SearchQueryBuilderService
                    }],
                styles: [".adf-search-results-label{color:var(--theme-text-bold-color);flex:1;font-size:14px;font-stretch:normal;font-style:normal;font-weight:600;letter-spacing:-.2px;line-height:1.43}.adf-toolbar .mat-toolbar{border-bottom-width:0;font-size:14px;max-height:48px}.adf-toolbar .mat-toolbar.mat-toolbar-single-row{height:auto}.adf-content-node-selector-search-panel-container{display:flex}.adf-content-node-selector-document-list-container{width:100%}.adf-content-node-selector-content{padding-top:0}.adf-content-node-selector-content-input{width:100%}.adf-content-node-selector-content-input-icon{color:var(--adf-node-selector-icon-color);cursor:pointer}.adf-content-node-selector-content-input-icon:hover{color:var(--theme-fg-base-color)}.adf-content-node-selector-content .mat-form-field-underline .mat-form-field-ripple{height:1px;transition:none}.adf-content-node-selector-content .adf-site-dropdown-container .mat-form-field{display:block;margin-bottom:15px}.adf-content-node-selector-content .adf-site-dropdown-list-element{margin-bottom:0;width:100%}.adf-content-node-selector-content .adf-site-dropdown-list-element .mat-select-trigger{font-size:14px}.adf-content-node-selector-content-breadcrumb .adf-dropdown-breadcrumb-trigger{outline:none}.adf-content-node-selector-content-breadcrumb .adf-dropdown-breadcrumb-trigger .mat-icon{color:var(--adf-node-selector-base-color)}.adf-content-node-selector-content-breadcrumb .adf-dropdown-breadcrumb-trigger .mat-icon:hover{color:var(--adf-node-selector-base-bold-color)}.adf-content-node-selector-content-breadcrumb .adf-dropdown-breadcrumb-trigger:focus .mat-icon{color:var(--theme-primary-color)}.adf-content-node-selector-content-breadcrumb .adf-dropdown-breadcrumb-item-chevron{color:var(--adf-node-selector-base-color)}.adf-content-node-selector-content-list{border:1px solid var(--theme-border-color);border-top:0;height:300px;overflow:auto}.adf-content-node-selector-content-list .adf-highlight{color:var(--theme-primary-color)}.adf-content-node-selector-content-list .adf-datatable-list{border:none}.adf-content-node-selector-content-list .adf-datatable-list .adf-datatable-selected{height:100%;width:100%}.adf-content-node-selector-content-list .adf-datatable-list .adf-datatable-selected>svg{fill:#00bcd4!important}.adf-content-node-selector-content-list .adf-datatable-list .adf-no-content-container{border:none!important;text-align:center}.adf-content-node-selector-content-list .adf-datatable-list .adf-datatable-cell--image{max-width:35px;min-width:35px;width:35px}.adf-content-node-selector-content-list .adf-datatable-list .adf-datatable-cell:nth-child(2){flex:1 0 95px}.adf-content-node-selector-content-list .adf-datatable-list .adf-datatable-cell .adf-name-location-cell-location{display:none}.adf-content-node-selector-content-list .adf-datatable-list .adf-datatable-cell.adf-content-selector-visibility-cell{flex:0 1 auto;min-width:1px}.adf-content-node-selector-content-list .adf-datatable-list .adf-datatable-cell.adf-content-selector-visibility-cell .adf-datatable-cell-value{padding:0}.adf-content-node-selector-content-list .adf-datatable-list .adf-datatable-body .adf-datatable-row{min-height:40px}@media screen and (-ms-high-contrast:active),screen and (-ms-high-contrast:none){.adf-content-node-selector-content-list .adf-datatable-list .adf-datatable-body .adf-datatable-row{padding-top:15px}}.adf-content-node-selector-content-list .adf-datatable-list .adf-datatable-body .adf-datatable-row:first-child .adf-datatable-cell{border-top:none}.adf-content-node-selector-content-list .adf-datatable-list .adf-datatable-body .adf-datatable-row:last-child .adf-datatable-cell{border-bottom:none}.adf-content-node-selector-content-list-searchLayout .adf-datatable-list .adf-datatable-row{min-height:65px!important}.adf-content-node-selector-content-list-searchLayout .adf-datatable-list .adf-datatable-row .adf-datatable-cell .adf-name-location-cell-location{display:block;padding:0 10px}.adf-content-node-selector-content-list-searchLayout .adf-datatable-list .adf-datatable-row .adf-datatable-cell .adf-name-location-cell-name{padding:5px 10px 2px}.adf-content-node-selector-content-list-searchLayout .adf-datatable-list .adf-datatable-row .adf-datatable-cell.adf-content-selector-modified-cell,.adf-content-node-selector-content-list-searchLayout .adf-datatable-list .adf-datatable-row .adf-datatable-cell.adf-content-selector-modifier-cell,.adf-content-node-selector-content-list-searchLayout .adf-datatable-list .adf-datatable-row .adf-datatable-cell.adf-content-selector-visibility-cell{display:none}"]
            }]
    }], function () { return [{ type: CustomResourcesService }, { type: SearchQueryBuilderService, decorators: [{
                type: Inject,
                args: [SEARCH_QUERY_SERVICE_TOKEN]
            }] }, { type: ɵngcc1.UserPreferencesService }, { type: ɵngcc1.NodesApiService }, { type: ɵngcc1.UploadService }, { type: ɵngcc1.SitesService }, { type: ɵngcc1.AppConfigService }, { type: ContentNodeSelectorPanelService }]; }, { restrictRootToCurrentFolderId: [{
            type: Input
        }], currentFolderId: [{
            type: Input
        }], dropdownHideMyFiles: [{
            type: Input
        }], dropdownSiteList: [{
            type: Input
        }], imageResolver: [{
            type: Input
        }], pageSize: [{
            type: Input
        }], selectionMode: [{
            type: Input
        }], isSelectionValid: [{
            type: Input
        }], select: [{
            type: Output
        }], navigationChange: [{
            type: Output
        }], siteChange: [{
            type: Output
        }], showingSearch: [{
            type: Output
        }], currentFolder: [{
            type: Output
        }], folderLoaded: [{
            type: Output
        }], rowFilter: [{
            type: Input
        }], excludeSiteContent: [{
            type: Input
        }], showSearch: [{
            type: Input
        }], showDropdownSiteList: [{
            type: Input
        }], showFilesInResult: [{
            type: Input
        }], showNodeCounter: [{
            type: Input
        }], breadcrumbTransform: [{
            type: Input
        }], where: [{
            type: Input
        }], documentList: [{
            type: ViewChild,
            args: ['documentList', { static: true }]
        }], highlighter: [{
            type: ViewChild,
            args: [HighlightDirective, { static: true }]
        }], infinitePaginationComponent: [{
            type: ViewChild,
            args: [InfinitePaginationComponent, { static: true }]
        }] }); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class ContentNodeSelectorModule {
}
ContentNodeSelectorModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: ContentNodeSelectorModule });
ContentNodeSelectorModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function ContentNodeSelectorModule_Factory(t) { return new (t || ContentNodeSelectorModule)(); }, providers: [SearchQueryBuilderService], imports: [[
            FormsModule,
            ReactiveFormsModule,
            CoreModule,
            CommonModule,
            MaterialModule,
            SitesDropdownModule,
            BreadcrumbModule,
            SearchModule,
            DocumentListModule,
            UploadModule,
            ContentDirectiveModule
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ContentNodeSelectorModule, { declarations: function () { return [ContentNodeSelectorPanelComponent, NameLocationCellComponent, ContentNodeSelectorComponent]; }, imports: function () { return [FormsModule,
        ReactiveFormsModule,
        CoreModule,
        CommonModule, MaterialModule, SitesDropdownModule, BreadcrumbModule, SearchModule, DocumentListModule, UploadModule, ContentDirectiveModule]; }, exports: function () { return [ContentNodeSelectorPanelComponent, NameLocationCellComponent, ContentNodeSelectorComponent]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ContentNodeSelectorModule, [{
        type: NgModule,
        args: [{
                imports: [
                    FormsModule,
                    ReactiveFormsModule,
                    CoreModule,
                    CommonModule,
                    MaterialModule,
                    SitesDropdownModule,
                    BreadcrumbModule,
                    SearchModule,
                    DocumentListModule,
                    UploadModule,
                    ContentDirectiveModule
                ],
                exports: [
                    ContentNodeSelectorPanelComponent,
                    NameLocationCellComponent,
                    ContentNodeSelectorComponent
                ],
                declarations: [
                    ContentNodeSelectorPanelComponent,
                    NameLocationCellComponent,
                    ContentNodeSelectorComponent
                ],
                providers: [SearchQueryBuilderService]
            }]
    }], null, null); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const I18N_ERRORS_PATH = 'CORE.FOLDER_DIALOG.FOLDER_NAME.ERRORS';
function forbidSpecialCharacters({ value }) {
    const specialCharacters = /([\*\"\<\>\\\/\?\:\|])/;
    const isValid = !specialCharacters.test(value);
    return (isValid) ? null : {
        message: `${I18N_ERRORS_PATH}.SPECIAL_CHARACTERS`
    };
}
function forbidEndingDot({ value }) {
    const isValid = ((value || '').trim().split('').pop() !== '.');
    return isValid ? null : {
        message: `${I18N_ERRORS_PATH}.ENDING_DOT`
    };
}
function forbidOnlySpaces({ value }) {
    const isValid = !!((value || '')).trim();
    return isValid ? null : {
        message: `${I18N_ERRORS_PATH}.ONLY_SPACES`
    };
}

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class FolderDialogComponent {
    constructor(formBuilder, dialog, nodesApi, translation, data) {
        this.formBuilder = formBuilder;
        this.dialog = dialog;
        this.nodesApi = nodesApi;
        this.translation = translation;
        this.data = data;
        this.folder = null;
        this.error = new EventEmitter();
        this.success = new EventEmitter();
        this.editTitle = 'CORE.FOLDER_DIALOG.EDIT_FOLDER_TITLE';
        this.createTitle = 'CORE.FOLDER_DIALOG.CREATE_FOLDER_TITLE';
        this.nodeType = 'cm:folder';
        if (data) {
            this.editTitle = data.editTitle || this.editTitle;
            this.createTitle = data.createTitle || this.createTitle;
            this.nodeType = data.nodeType || this.nodeType;
        }
    }
    get editing() {
        return !!this.data.folder;
    }
    ngOnInit() {
        var _a, _b;
        const { folder } = this.data;
        let name = '';
        let title = '';
        let description = '';
        if (folder) {
            const { properties } = folder;
            name = folder.name || '';
            title = (_a = properties === null || properties === void 0 ? void 0 : properties['cm:title']) !== null && _a !== void 0 ? _a : '';
            description = (_b = properties === null || properties === void 0 ? void 0 : properties['cm:description']) !== null && _b !== void 0 ? _b : '';
        }
        const validators = {
            name: [
                Validators.required,
                forbidSpecialCharacters,
                forbidEndingDot,
                forbidOnlySpaces
            ]
        };
        this.form = this.formBuilder.group({
            name: [name, validators.name],
            title: [title],
            description: [description]
        });
    }
    get name() {
        const { name } = this.form.value;
        return (name || '').trim();
    }
    get title() {
        const { title } = this.form.value;
        return (title || '').trim();
    }
    get description() {
        const { description } = this.form.value;
        return (description || '').trim();
    }
    get properties() {
        const { title, description } = this;
        return {
            'cm:title': title,
            'cm:description': description
        };
    }
    create() {
        const { name, properties, nodeType, nodesApi, data: { parentNodeId } } = this;
        return nodesApi.createFolder(parentNodeId, { name, properties, nodeType });
    }
    edit() {
        const { name, properties, nodesApi, data: { folder: { id: nodeId } } } = this;
        return nodesApi.updateNode(nodeId, { name, properties });
    }
    submit() {
        const { form, dialog, editing } = this;
        if (!form.valid) {
            return;
        }
        (editing ? this.edit() : this.create())
            .subscribe((folder) => {
            this.success.emit(folder);
            dialog.close(folder);
        }, (error) => this.handleError(error));
    }
    handleError(error) {
        let errorMessage = 'CORE.MESSAGES.ERRORS.GENERIC';
        try {
            const { error: { statusCode } } = JSON.parse(error.message);
            if (statusCode === 409) {
                errorMessage = 'CORE.MESSAGES.ERRORS.EXISTENT_FOLDER';
            }
        }
        catch (err) { }
        this.error.emit(this.translation.instant(errorMessage));
        return error;
    }
}
FolderDialogComponent.ɵfac = function FolderDialogComponent_Factory(t) { return new (t || FolderDialogComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc9.FormBuilder), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.MatDialogRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NodesApiService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.TranslationService), ɵngcc0.ɵɵdirectiveInject(MAT_DIALOG_DATA, 8)); };
FolderDialogComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: FolderDialogComponent, selectors: [["adf-folder-dialog"]], outputs: { error: "error", success: "success" }, decls: 24, vars: 24, consts: [["mat-dialog-title", ""], [3, "formGroup", "submit"], [1, "adf-full-width"], ["id", "adf-folder-name-input", "matInput", "", "required", "", 3, "placeholder", "formControlName"], [4, "ngIf"], ["id", "adf-folder-title-input", "matInput", "", 3, "placeholder", "formControlName"], ["id", "adf-folder-description-input", "matInput", "", "rows", "4", 3, "placeholder", "formControlName"], [1, "adf-dialog-buttons"], [1, "adf-fill-remaining-space"], ["mat-button", "", "id", "adf-folder-cancel-button", "mat-dialog-close", ""], ["id", "adf-folder-create-button", "mat-button", "", 1, "adf-dialog-action-button", 3, "disabled", "click"]], template: function FolderDialogComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "h2", 0);
        ɵngcc0.ɵɵtext(1);
        ɵngcc0.ɵɵpipe(2, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(3, "mat-dialog-content");
        ɵngcc0.ɵɵelementStart(4, "form", 1);
        ɵngcc0.ɵɵlistener("submit", function FolderDialogComponent_Template_form_submit_4_listener() { return ctx.submit(); });
        ɵngcc0.ɵɵelementStart(5, "mat-form-field", 2);
        ɵngcc0.ɵɵelement(6, "input", 3);
        ɵngcc0.ɵɵpipe(7, "translate");
        ɵngcc0.ɵɵtemplate(8, FolderDialogComponent_mat_hint_8_Template, 3, 2, "mat-hint", 4);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(9, "mat-form-field", 2);
        ɵngcc0.ɵɵelement(10, "input", 5);
        ɵngcc0.ɵɵpipe(11, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(12, "mat-form-field", 2);
        ɵngcc0.ɵɵelementStart(13, "textarea", 6);
        ɵngcc0.ɵɵpipe(14, "translate");
        ɵngcc0.ɵɵtext(15, "            ");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(16, "mat-dialog-actions", 7);
        ɵngcc0.ɵɵelement(17, "span", 8);
        ɵngcc0.ɵɵelementStart(18, "button", 9);
        ɵngcc0.ɵɵtext(19);
        ɵngcc0.ɵɵpipe(20, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(21, "button", 10);
        ɵngcc0.ɵɵlistener("click", function FolderDialogComponent_Template_button_click_21_listener() { return ctx.submit(); });
        ɵngcc0.ɵɵtext(22);
        ɵngcc0.ɵɵpipe(23, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 12, ctx.editing ? ctx.editTitle : ctx.createTitle), "\n");
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("formGroup", ctx.form);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵpropertyInterpolate("placeholder", ɵngcc0.ɵɵpipeBind1(7, 14, "CORE.FOLDER_DIALOG.FOLDER_NAME.LABEL"));
        ɵngcc0.ɵɵproperty("formControlName", "name");
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.form.controls["name"].dirty);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵpropertyInterpolate("placeholder", ɵngcc0.ɵɵpipeBind1(11, 16, "CORE.FOLDER_DIALOG.FOLDER_TITLE.LABEL"));
        ɵngcc0.ɵɵproperty("formControlName", "title");
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵpropertyInterpolate("placeholder", ɵngcc0.ɵɵpipeBind1(14, 18, "CORE.FOLDER_DIALOG.FOLDER_DESCRIPTION.LABEL"));
        ɵngcc0.ɵɵproperty("formControlName", "description");
        ɵngcc0.ɵɵadvance(6);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(20, 20, "CORE.FOLDER_DIALOG.CANCEL_BUTTON.LABEL"), " ");
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("disabled", !ctx.form.valid);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(23, 22, ctx.editing ? "CORE.FOLDER_DIALOG.UPDATE_BUTTON.LABEL" : "CORE.FOLDER_DIALOG.CREATE_BUTTON.LABEL"), " ");
    } }, directives: [ɵngcc2.MatDialogTitle, ɵngcc2.MatDialogContent, ɵngcc9.ɵangular_packages_forms_forms_y, ɵngcc9.NgControlStatusGroup, ɵngcc9.FormGroupDirective, ɵngcc11.MatFormField, ɵngcc13.MatInput, ɵngcc9.DefaultValueAccessor, ɵngcc9.RequiredValidator, ɵngcc9.NgControlStatus, ɵngcc9.FormControlName, ɵngcc4.NgIf, ɵngcc2.MatDialogActions, ɵngcc5.MatButton, ɵngcc2.MatDialogClose, ɵngcc11.MatHint], pipes: [ɵngcc8.TranslatePipe], styles: [".adf-fill-remaining-space{flex:1 1 auto}.adf-full-width,.adf-lock-file-name .mat-checkbox-layout{width:100%}.adf-lock-file-name .mat-checkbox-label{overflow:hidden;text-overflow:ellipsis}.adf-lock-file-name .mat-checkbox-inner-container{margin:auto 8px auto 0}.adf-dialog-buttons button{text-transform:uppercase}.adf-dialog-action-button:enabled{color:var(--theme-primary-color)}.adf-dialog-action-button:disabled>span{color:var(--theme-text-color)}"], encapsulation: 2 });
FolderDialogComponent.ctorParameters = () => [
    { type: FormBuilder },
    { type: MatDialogRef },
    { type: NodesApiService },
    { type: TranslationService },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_DIALOG_DATA,] }] }
];
FolderDialogComponent.propDecorators = {
    error: [{ type: Output }],
    success: [{ type: Output }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FolderDialogComponent, [{
        type: Component,
        args: [{
                selector: 'adf-folder-dialog',
                template: "<h2 mat-dialog-title>\n    {{ (editing ? editTitle : createTitle) | translate }}\n</h2>\n\n<mat-dialog-content>\n    <form [formGroup]=\"form\" (submit)=\"submit()\">\n        <mat-form-field class=\"adf-full-width\">\n            <input\n                id=\"adf-folder-name-input\"\n                placeholder=\"{{ 'CORE.FOLDER_DIALOG.FOLDER_NAME.LABEL' | translate }}\"\n                matInput\n                required\n                [formControlName]=\"'name'\"\n            />\n\n            <mat-hint *ngIf=\"form.controls['name'].dirty\">\n                <span *ngIf=\"form.controls['name'].errors?.required\">\n                    {{ 'CORE.FOLDER_DIALOG.FOLDER_NAME.ERRORS.REQUIRED' | translate }}\n                </span>\n\n                <span *ngIf=\"!form.controls['name'].errors?.required && form.controls['name'].errors?.message\">\n                    {{ form.controls['name'].errors?.message | translate }}\n                </span>\n            </mat-hint>\n        </mat-form-field>\n\n        <mat-form-field class=\"adf-full-width\">\n            <input\n                id=\"adf-folder-title-input\"\n                matInput\n                placeholder=\"{{ 'CORE.FOLDER_DIALOG.FOLDER_TITLE.LABEL' | translate }}\"\n                [formControlName]=\"'title'\"\n            />\n        </mat-form-field>\n\n        <mat-form-field class=\"adf-full-width\">\n            <textarea\n                id=\"adf-folder-description-input\"\n                matInput\n                placeholder=\"{{ 'CORE.FOLDER_DIALOG.FOLDER_DESCRIPTION.LABEL' | translate }}\"\n                rows=\"4\"\n                [formControlName]=\"'description'\">\n            </textarea>\n        </mat-form-field>\n    </form>\n</mat-dialog-content>\n\n<mat-dialog-actions class=\"adf-dialog-buttons\">\n    <span class=\"adf-fill-remaining-space\"></span>\n\n    <button\n        mat-button\n        id=\"adf-folder-cancel-button\"\n        mat-dialog-close>\n        {{ 'CORE.FOLDER_DIALOG.CANCEL_BUTTON.LABEL' | translate }}\n    </button>\n\n    <button class=\"adf-dialog-action-button\"\n            id=\"adf-folder-create-button\"\n            mat-button\n            (click)=\"submit()\"\n            [disabled]=\"!form.valid\">\n        {{\n        (editing\n        ? 'CORE.FOLDER_DIALOG.UPDATE_BUTTON.LABEL'\n        : 'CORE.FOLDER_DIALOG.CREATE_BUTTON.LABEL'\n        ) | translate\n        }}\n    </button>\n</mat-dialog-actions>\n",
                encapsulation: ViewEncapsulation.None,
                styles: [".adf-fill-remaining-space{flex:1 1 auto}.adf-full-width,.adf-lock-file-name .mat-checkbox-layout{width:100%}.adf-lock-file-name .mat-checkbox-label{overflow:hidden;text-overflow:ellipsis}.adf-lock-file-name .mat-checkbox-inner-container{margin:auto 8px auto 0}.adf-dialog-buttons button{text-transform:uppercase}.adf-dialog-action-button:enabled{color:var(--theme-primary-color)}.adf-dialog-action-button:disabled>span{color:var(--theme-text-color)}"]
            }]
    }], function () { return [{ type: ɵngcc9.FormBuilder }, { type: ɵngcc2.MatDialogRef }, { type: ɵngcc1.NodesApiService }, { type: ɵngcc1.TranslationService }, { type: undefined, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [MAT_DIALOG_DATA]
            }] }]; }, { error: [{
            type: Output
        }], success: [{
            type: Output
        }] }); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class LibraryDialogComponent {
    constructor(alfrescoApiService, sitesService, formBuilder, dialog) {
        this.alfrescoApiService = alfrescoApiService;
        this.sitesService = sitesService;
        this.formBuilder = formBuilder;
        this.dialog = dialog;
        this.error = new EventEmitter();
        this.success = new EventEmitter();
        this.onDestroy$ = new Subject();
        this.createTitle = 'LIBRARY.DIALOG.CREATE_TITLE';
        this.libraryTitleExists = false;
        this.visibilityOptions = [
            { value: 'PUBLIC', label: 'LIBRARY.VISIBILITY.PUBLIC', disabled: false },
            { value: 'PRIVATE', label: 'LIBRARY.VISIBILITY.PRIVATE', disabled: false },
            {
                value: 'MODERATED',
                label: 'LIBRARY.VISIBILITY.MODERATED',
                disabled: false
            }
        ];
        this.disableCreateButton = false;
    }
    get queriesApi() {
        var _a;
        this._queriesApi = (_a = this._queriesApi) !== null && _a !== void 0 ? _a : new QueriesApi(this.alfrescoApiService.getInstance());
        return this._queriesApi;
    }
    ngOnInit() {
        const validators = {
            id: [
                Validators.required,
                Validators.maxLength(72),
                this.forbidSpecialCharacters
            ],
            title: [
                Validators.required,
                this.forbidOnlySpaces,
                Validators.minLength(2),
                Validators.maxLength(256)
            ],
            description: [Validators.maxLength(512)]
        };
        this.form = this.formBuilder.group({
            title: [null, validators.title],
            id: [null, validators.id, this.createSiteIdValidator()],
            description: ['', validators.description]
        });
        this.visibilityOption = this.visibilityOptions[0].value;
        this.form.controls['title'].valueChanges
            .pipe(debounceTime(500), mergeMap((title) => this.checkLibraryNameExists(title), (title) => title), takeUntil(this.onDestroy$))
            .subscribe((title) => {
            if (!this.form.controls['id'].dirty && this.canGenerateId(title)) {
                this.form.patchValue({ id: this.sanitize(title.trim()) });
                this.form.controls['id'].markAsTouched();
            }
        });
    }
    ngOnDestroy() {
        this.onDestroy$.next(true);
        this.onDestroy$.complete();
    }
    get title() {
        const { title } = this.form.value;
        return (title || '').trim();
    }
    get id() {
        const { id } = this.form.value;
        return (id || '').trim();
    }
    get description() {
        const { description } = this.form.value;
        return (description || '').trim();
    }
    get visibility() {
        return this.visibilityOption || '';
    }
    submit() {
        const { form, dialog } = this;
        if (!form.valid) {
            return;
        }
        this.disableCreateButton = true;
        this.create().pipe(finalize(() => this.disableCreateButton = false)).subscribe((node) => {
            this.success.emit(node);
            dialog.close(node);
        }, (error) => this.handleError(error));
    }
    visibilityChangeHandler(event) {
        this.visibilityOption = event.value;
    }
    create() {
        const { title, id, description, visibility } = this;
        const siteBody = {
            id,
            title,
            description,
            visibility
        };
        return this.sitesService.createSite(siteBody);
    }
    sanitize(input) {
        return input.replace(/[\s\s]+/g, '-').replace(/[^A-Za-z0-9-]/g, '');
    }
    canGenerateId(title) {
        return Boolean(title.replace(/[^A-Za-z0-9-]/g, '').length);
    }
    handleError(error) {
        try {
            const { error: { statusCode } } = JSON.parse(error.message);
            if (statusCode === 409) {
                this.form.controls['id'].setErrors({
                    message: 'LIBRARY.ERRORS.CONFLICT'
                });
            }
        }
        catch (error) {
        }
        return error;
    }
    checkLibraryNameExists(libraryTitle) {
        return __awaiter(this, void 0, void 0, function* () {
            let entries = [];
            try {
                entries = (yield this.findLibraryByTitle(libraryTitle)).list.entries;
            }
            catch (_a) {
                entries = [];
            }
            if (entries.length) {
                this.libraryTitleExists = entries[0].entry.title.toLowerCase() === libraryTitle.toLowerCase();
            }
            else {
                this.libraryTitleExists = false;
            }
        });
    }
    findLibraryByTitle(libraryTitle) {
        return this.queriesApi.findSites(libraryTitle, {
            maxItems: 1,
            fields: ['title']
        });
    }
    forbidSpecialCharacters({ value }) {
        if (value === null || value.length === 0) {
            return null;
        }
        const validCharacters = /[^A-Za-z0-9-]/;
        const isValid = !validCharacters.test(value);
        return isValid
            ? null
            : {
                message: 'LIBRARY.ERRORS.ILLEGAL_CHARACTERS'
            };
    }
    forbidOnlySpaces({ value }) {
        if (value === null || value.length === 0) {
            return null;
        }
        const isValid = !!(value || '').trim();
        return isValid
            ? null
            : {
                message: 'LIBRARY.ERRORS.ONLY_SPACES'
            };
    }
    createSiteIdValidator() {
        let timer;
        return (control) => {
            if (timer) {
                clearTimeout(timer);
            }
            return new Promise((resolve) => {
                timer = setTimeout(() => {
                    return this.sitesService.getSite(control.value).subscribe(() => resolve({ message: 'LIBRARY.ERRORS.EXISTENT_SITE' }), () => resolve(null));
                }, 300);
            });
        };
    }
}
LibraryDialogComponent.ɵfac = function LibraryDialogComponent_Factory(t) { return new (t || LibraryDialogComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.AlfrescoApiService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.SitesService), ɵngcc0.ɵɵdirectiveInject(ɵngcc9.FormBuilder), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.MatDialogRef)); };
LibraryDialogComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: LibraryDialogComponent, selectors: [["adf-library-dialog"]], hostAttrs: [1, "adf-library-dialog"], outputs: { error: "error", success: "success" }, decls: 30, vars: 31, consts: [["mat-dialog-title", ""], ["novalidate", "", 3, "formGroup", "submit"], ["required", "", "matInput", "", "autofocus", "", "formControlName", "title", "autocomplete", "off", 3, "placeholder"], [4, "ngIf"], ["required", "", "matInput", "", "formControlName", "id", "autocomplete", "off", 3, "placeholder"], ["matInput", "", "rows", "3", "formControlName", "description", 3, "placeholder"], [3, "ngModelOptions", "ngModel", "ngModelChange", "change"], ["color", "primary", 3, "disabled", "value", "checked", 4, "ngFor", "ngForOf"], [1, "adf-action-buttons"], ["mat-button", "", "mat-dialog-close", "", "data-automation-id", "cancel-library-id"], ["color", "primary", "mat-button", "", "data-automation-id", "create-library-id", 3, "disabled", "click"], ["color", "primary", 3, "disabled", "value", "checked"]], template: function LibraryDialogComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "h2", 0);
        ɵngcc0.ɵɵtext(1);
        ɵngcc0.ɵɵpipe(2, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(3, "mat-dialog-content");
        ɵngcc0.ɵɵelementStart(4, "form", 1);
        ɵngcc0.ɵɵlistener("submit", function LibraryDialogComponent_Template_form_submit_4_listener() { return ctx.submit(); });
        ɵngcc0.ɵɵelementStart(5, "mat-form-field");
        ɵngcc0.ɵɵelement(6, "input", 2);
        ɵngcc0.ɵɵpipe(7, "translate");
        ɵngcc0.ɵɵtemplate(8, LibraryDialogComponent_mat_hint_8_Template, 3, 3, "mat-hint", 3);
        ɵngcc0.ɵɵtemplate(9, LibraryDialogComponent_mat_error_9_Template, 3, 3, "mat-error", 3);
        ɵngcc0.ɵɵtemplate(10, LibraryDialogComponent_mat_error_10_Template, 3, 3, "mat-error", 3);
        ɵngcc0.ɵɵtemplate(11, LibraryDialogComponent_mat_error_11_Template, 3, 3, "mat-error", 3);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(12, "mat-form-field");
        ɵngcc0.ɵɵelement(13, "input", 4);
        ɵngcc0.ɵɵpipe(14, "translate");
        ɵngcc0.ɵɵtemplate(15, LibraryDialogComponent_mat_error_15_Template, 3, 3, "mat-error", 3);
        ɵngcc0.ɵɵtemplate(16, LibraryDialogComponent_mat_error_16_Template, 3, 3, "mat-error", 3);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(17, "mat-form-field");
        ɵngcc0.ɵɵelement(18, "textarea", 5);
        ɵngcc0.ɵɵpipe(19, "translate");
        ɵngcc0.ɵɵtemplate(20, LibraryDialogComponent_mat_error_20_Template, 3, 3, "mat-error", 3);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(21, "mat-radio-group", 6);
        ɵngcc0.ɵɵlistener("ngModelChange", function LibraryDialogComponent_Template_mat_radio_group_ngModelChange_21_listener($event) { return ctx.visibilityOption = $event; })("change", function LibraryDialogComponent_Template_mat_radio_group_change_21_listener($event) { return ctx.visibilityChangeHandler($event); });
        ɵngcc0.ɵɵtemplate(22, LibraryDialogComponent_mat_radio_button_22_Template, 3, 7, "mat-radio-button", 7);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(23, "mat-dialog-actions", 8);
        ɵngcc0.ɵɵelementStart(24, "button", 9);
        ɵngcc0.ɵɵtext(25);
        ɵngcc0.ɵɵpipe(26, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(27, "button", 10);
        ɵngcc0.ɵɵlistener("click", function LibraryDialogComponent_Template_button_click_27_listener() { return ctx.submit(); });
        ɵngcc0.ɵɵtext(28);
        ɵngcc0.ɵɵpipe(29, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(2, 18, ctx.createTitle));
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("formGroup", ctx.form);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵpropertyInterpolate("placeholder", ɵngcc0.ɵɵpipeBind1(7, 20, "LIBRARY.DIALOG.FORM.NAME"));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.libraryTitleExists);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.form.controls["title"].hasError("maxlength"));
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.form.controls["title"].hasError("minlength"));
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.form.controls["title"].errors == null ? null : ctx.form.controls["title"].errors.message);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵpropertyInterpolate("placeholder", ɵngcc0.ɵɵpipeBind1(14, 22, "LIBRARY.DIALOG.FORM.SITE_ID"));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.form.controls["id"].errors == null ? null : ctx.form.controls["id"].errors.message);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.form.controls["id"].hasError("maxlength"));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵpropertyInterpolate("placeholder", ɵngcc0.ɵɵpipeBind1(19, 24, "LIBRARY.DIALOG.FORM.DESCRIPTION"));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.form.controls["description"].hasError("maxlength"));
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngModelOptions", ɵngcc0.ɵɵpureFunction0(30, _c35))("ngModel", ctx.visibilityOption);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.visibilityOptions);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(26, 26, "LIBRARY.DIALOG.CANCEL"), " ");
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("disabled", !ctx.form.valid || ctx.disableCreateButton);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(29, 28, "LIBRARY.DIALOG.CREATE"), " ");
    } }, directives: [ɵngcc2.MatDialogTitle, ɵngcc2.MatDialogContent, ɵngcc9.ɵangular_packages_forms_forms_y, ɵngcc9.NgControlStatusGroup, ɵngcc9.FormGroupDirective, ɵngcc11.MatFormField, ɵngcc13.MatInput, ɵngcc9.DefaultValueAccessor, ɵngcc9.RequiredValidator, ɵngcc9.NgControlStatus, ɵngcc9.FormControlName, ɵngcc4.NgIf, ɵngcc20.MatRadioGroup, ɵngcc9.NgModel, ɵngcc4.NgForOf, ɵngcc2.MatDialogActions, ɵngcc5.MatButton, ɵngcc2.MatDialogClose, ɵngcc11.MatHint, ɵngcc11.MatError, ɵngcc20.MatRadioButton], pipes: [ɵngcc8.TranslatePipe], styles: [".adf-library-dialog .mat-radio-group{display:flex;flex-direction:column;margin:0 0 20px}.adf-library-dialog .mat-radio-group .mat-radio-button{margin:10px 0}.adf-library-dialog .mat-form-field{width:100%}.adf-library-dialog mat-form-field{padding-top:20px}.adf-library-dialog .adf-action-buttons{display:flex;flex-direction:row;justify-content:flex-end}.adf-library-dialog .adf-action-buttons .mat-button{text-transform:uppercase}"], encapsulation: 2 });
LibraryDialogComponent.ctorParameters = () => [
    { type: AlfrescoApiService },
    { type: SitesService },
    { type: FormBuilder },
    { type: MatDialogRef }
];
LibraryDialogComponent.propDecorators = {
    error: [{ type: Output }],
    success: [{ type: Output }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(LibraryDialogComponent, [{
        type: Component,
        args: [{
                selector: 'adf-library-dialog',
                template: "<h2 mat-dialog-title>{{ createTitle | translate }}</h2>\n\n<mat-dialog-content>\n  <form novalidate [formGroup]=\"form\" (submit)=\"submit()\">\n    <mat-form-field>\n      <input\n        placeholder=\"{{ 'LIBRARY.DIALOG.FORM.NAME' | translate }}\"\n        required\n        matInput\n        autofocus\n        formControlName=\"title\"\n        autocomplete=\"off\"\n      />\n\n      <mat-hint *ngIf=\"libraryTitleExists\">{{\n        'LIBRARY.HINTS.SITE_TITLE_EXISTS' | translate\n      }}</mat-hint>\n      <mat-error *ngIf=\"form.controls['title'].hasError('maxlength')\">\n        {{ 'LIBRARY.ERRORS.TITLE_TOO_LONG' | translate }}\n      </mat-error>\n\n      <mat-error *ngIf=\"form.controls['title'].hasError('minlength')\">\n        {{ 'LIBRARY.ERRORS.TITLE_TOO_SHORT' | translate }}\n      </mat-error>\n\n      <mat-error *ngIf=\"form.controls['title'].errors?.message\">\n        {{ form.controls['title'].errors?.message | translate }}\n      </mat-error>\n    </mat-form-field>\n\n    <mat-form-field>\n      <input\n        required\n        placeholder=\"{{ 'LIBRARY.DIALOG.FORM.SITE_ID' | translate }}\"\n        matInput\n        formControlName=\"id\"\n        autocomplete=\"off\"\n      />\n\n      <mat-error *ngIf=\"form.controls['id'].errors?.message\">\n        {{ form.controls['id'].errors?.message | translate }}\n      </mat-error>\n\n      <mat-error *ngIf=\"form.controls['id'].hasError('maxlength')\">\n        {{ 'LIBRARY.ERRORS.ID_TOO_LONG' | translate }}\n      </mat-error>\n    </mat-form-field>\n\n    <mat-form-field>\n      <textarea\n        matInput\n        placeholder=\"{{ 'LIBRARY.DIALOG.FORM.DESCRIPTION' | translate }}\"\n        rows=\"3\"\n        formControlName=\"description\"\n      ></textarea>\n\n      <mat-error *ngIf=\"form.controls['description'].hasError('maxlength')\">\n        {{ 'LIBRARY.ERRORS.DESCRIPTION_TOO_LONG' | translate }}\n      </mat-error>\n    </mat-form-field>\n\n    <mat-radio-group\n      [ngModelOptions]=\"{ standalone: true }\"\n      [(ngModel)]=\"visibilityOption\"\n      (change)=\"visibilityChangeHandler($event)\"\n    >\n      <mat-radio-button\n        color=\"primary\"\n        [disabled]=\"option.disabled\"\n        *ngFor=\"let option of visibilityOptions\"\n        [attr.data-automation-id]=\"option.value\"\n        [value]=\"option.value\"\n        [checked]=\"visibilityOption.value === option.value\"\n      >\n        {{ option.label | translate }}\n      </mat-radio-button>\n    </mat-radio-group>\n  </form>\n</mat-dialog-content>\n\n<mat-dialog-actions class=\"adf-action-buttons\">\n  <button mat-button mat-dialog-close data-automation-id=\"cancel-library-id\">\n    {{ 'LIBRARY.DIALOG.CANCEL' | translate }}\n  </button>\n\n  <button\n    color=\"primary\"\n    mat-button\n    (click)=\"submit()\"\n    [disabled]=\"!form.valid || disableCreateButton\"\n    data-automation-id=\"create-library-id\"\n  >\n    {{ 'LIBRARY.DIALOG.CREATE' | translate }}\n  </button>\n</mat-dialog-actions>\n",
                encapsulation: ViewEncapsulation.None,
                host: { class: 'adf-library-dialog' },
                styles: [".adf-library-dialog .mat-radio-group{display:flex;flex-direction:column;margin:0 0 20px}.adf-library-dialog .mat-radio-group .mat-radio-button{margin:10px 0}.adf-library-dialog .mat-form-field{width:100%}.adf-library-dialog mat-form-field{padding-top:20px}.adf-library-dialog .adf-action-buttons{display:flex;flex-direction:row;justify-content:flex-end}.adf-library-dialog .adf-action-buttons .mat-button{text-transform:uppercase}"]
            }]
    }], function () { return [{ type: ɵngcc1.AlfrescoApiService }, { type: ɵngcc1.SitesService }, { type: ɵngcc9.FormBuilder }, { type: ɵngcc2.MatDialogRef }]; }, { error: [{
            type: Output
        }], success: [{
            type: Output
        }] }); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class DialogModule {
}
DialogModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: DialogModule });
DialogModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function DialogModule_Factory(t) { return new (t || DialogModule)(); }, imports: [[
            CommonModule,
            MaterialModule,
            CoreModule,
            FormsModule,
            ReactiveFormsModule,
            MatMomentDatetimeModule,
            MatDatetimepickerModule
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DialogModule, { declarations: function () { return [FolderDialogComponent, NodeLockDialogComponent, ConfirmDialogComponent, LibraryDialogComponent]; }, imports: function () { return [CommonModule, MaterialModule, CoreModule,
        FormsModule,
        ReactiveFormsModule,
        MatMomentDatetimeModule,
        MatDatetimepickerModule]; }, exports: function () { return [FolderDialogComponent, NodeLockDialogComponent, ConfirmDialogComponent, LibraryDialogComponent]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DialogModule, [{
        type: NgModule,
        args: [{
                imports: [
                    CommonModule,
                    MaterialModule,
                    CoreModule,
                    FormsModule,
                    ReactiveFormsModule,
                    MatMomentDatetimeModule,
                    MatDatetimepickerModule
                ],
                declarations: [
                    FolderDialogComponent,
                    NodeLockDialogComponent,
                    ConfirmDialogComponent,
                    LibraryDialogComponent
                ],
                exports: [
                    FolderDialogComponent,
                    NodeLockDialogComponent,
                    ConfirmDialogComponent,
                    LibraryDialogComponent
                ]
            }]
    }], null, null); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const DEFAULT_FOLDER_PARENT_ID = '-my-';
class FolderCreateDirective {
    constructor(dialogRef, content) {
        this.dialogRef = dialogRef;
        this.content = content;
        this.parentNodeId = DEFAULT_FOLDER_PARENT_ID;
        this.title = null;
        this.nodeType = 'cm:folder';
        this.error = new EventEmitter();
        this.success = new EventEmitter();
    }
    onClick(event) {
        event.preventDefault();
        this.openDialog();
    }
    get dialogConfig() {
        const { DIALOG_WIDTH: width } = FolderCreateDirective;
        const { parentNodeId, title: createTitle, nodeType } = this;
        return {
            data: { parentNodeId, createTitle, nodeType },
            width: `${width}px`
        };
    }
    openDialog() {
        const { dialogRef, dialogConfig, content } = this;
        const dialogInstance = dialogRef.open(FolderDialogComponent, dialogConfig);
        dialogInstance.componentInstance.error.subscribe((error) => {
            this.error.emit(error);
        });
        dialogInstance.componentInstance.success.subscribe((node) => {
            this.success.emit(node);
        });
        dialogInstance.afterClosed().subscribe((node) => {
            if (node) {
                content.folderCreate.next(node);
            }
        });
    }
}
FolderCreateDirective.ɵfac = function FolderCreateDirective_Factory(t) { return new (t || FolderCreateDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc2.MatDialog), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ContentService)); };
FolderCreateDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: FolderCreateDirective, selectors: [["", "adf-create-folder", ""]], hostBindings: function FolderCreateDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function FolderCreateDirective_click_HostBindingHandler($event) { return ctx.onClick($event); });
    } }, inputs: { parentNodeId: ["adf-create-folder", "parentNodeId"], title: "title", nodeType: "nodeType" }, outputs: { error: "error", success: "success" } });
FolderCreateDirective.DIALOG_WIDTH = 400;
FolderCreateDirective.ctorParameters = () => [
    { type: MatDialog },
    { type: ContentService }
];
FolderCreateDirective.propDecorators = {
    parentNodeId: [{ type: Input, args: ['adf-create-folder',] }],
    title: [{ type: Input }],
    nodeType: [{ type: Input }],
    error: [{ type: Output }],
    success: [{ type: Output }],
    onClick: [{ type: HostListener, args: ['click', ['$event'],] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FolderCreateDirective, [{
        type: Directive,
        args: [{
                selector: '[adf-create-folder]'
            }]
    }], function () { return [{ type: ɵngcc2.MatDialog }, { type: ɵngcc1.ContentService }]; }, { parentNodeId: [{
            type: Input,
            args: ['adf-create-folder']
        }], title: [{
            type: Input
        }], nodeType: [{
            type: Input
        }], error: [{
            type: Output
        }], success: [{
            type: Output
        }], onClick: [{
            type: HostListener,
            args: ['click', ['$event']]
        }] }); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class FolderEditDirective {
    constructor(dialogRef, elementRef, content) {
        this.dialogRef = dialogRef;
        this.elementRef = elementRef;
        this.content = content;
        this.error = new EventEmitter();
        this.title = null;
        this.success = new EventEmitter();
    }
    onClick(event) {
        event.preventDefault();
        if (this.folder) {
            this.openDialog();
        }
    }
    get dialogConfig() {
        const { DIALOG_WIDTH: width } = FolderEditDirective;
        const { folder } = this;
        return {
            data: {
                folder,
                editTitle: this.title
            },
            width: `${width}px`
        };
    }
    openDialog() {
        const { dialogRef, dialogConfig, content } = this;
        const dialogInstance = dialogRef.open(FolderDialogComponent, dialogConfig);
        dialogInstance.componentInstance.error.subscribe((error) => {
            this.error.emit(error);
        });
        dialogInstance.componentInstance.success.subscribe((node) => {
            this.success.emit(node);
        });
        dialogInstance.afterClosed().subscribe((node) => {
            if (node) {
                content.folderEdit.next(node);
            }
        });
    }
}
FolderEditDirective.ɵfac = function FolderEditDirective_Factory(t) { return new (t || FolderEditDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc2.MatDialog), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ContentService)); };
FolderEditDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: FolderEditDirective, selectors: [["", "adf-edit-folder", ""]], hostBindings: function FolderEditDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function FolderEditDirective_click_HostBindingHandler($event) { return ctx.onClick($event); });
    } }, inputs: { title: "title", folder: ["adf-edit-folder", "folder"] }, outputs: { error: "error", success: "success" } });
FolderEditDirective.DIALOG_WIDTH = 400;
FolderEditDirective.ctorParameters = () => [
    { type: MatDialog },
    { type: ElementRef },
    { type: ContentService }
];
FolderEditDirective.propDecorators = {
    folder: [{ type: Input, args: ['adf-edit-folder',] }],
    error: [{ type: Output }],
    title: [{ type: Input }],
    success: [{ type: Output }],
    onClick: [{ type: HostListener, args: ['click', ['$event'],] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FolderEditDirective, [{
        type: Directive,
        args: [{
                selector: '[adf-edit-folder]'
            }]
    }], function () { return [{ type: ɵngcc2.MatDialog }, { type: ɵngcc0.ElementRef }, { type: ɵngcc1.ContentService }]; }, { error: [{
            type: Output
        }], title: [{
            type: Input
        }], success: [{
            type: Output
        }], onClick: [{
            type: HostListener,
            args: ['click', ['$event']]
        }], folder: [{
            type: Input,
            args: ['adf-edit-folder']
        }] }); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class FolderDirectiveModule {
}
FolderDirectiveModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: FolderDirectiveModule });
FolderDirectiveModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function FolderDirectiveModule_Factory(t) { return new (t || FolderDirectiveModule)(); }, imports: [[
            CommonModule,
            MaterialModule
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(FolderDirectiveModule, { declarations: function () { return [FolderCreateDirective, FolderEditDirective]; }, imports: function () { return [CommonModule, MaterialModule]; }, exports: function () { return [FolderCreateDirective, FolderEditDirective]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FolderDirectiveModule, [{
        type: NgModule,
        args: [{
                imports: [
                    CommonModule,
                    MaterialModule
                ],
                declarations: [
                    FolderCreateDirective,
                    FolderEditDirective
                ],
                exports: [
                    FolderCreateDirective,
                    FolderEditDirective
                ]
            }]
    }], null, null); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

class BasicPropertiesService {
    constructor(fileSizePipe) {
        this.fileSizePipe = fileSizePipe;
    }
    getProperties(node) {
        const sizeInBytes = node.content ? node.content.sizeInBytes : '', mimeTypeName = node.content ? node.content.mimeTypeName : '', author = node.properties ? node.properties['cm:author'] : '', description = node.properties ? node.properties['cm:description'] : '', title = node.properties ? node.properties['cm:title'] : '';
        return [
            new CardViewTextItemModel({
                label: 'CORE.METADATA.BASIC.NAME',
                value: node.name,
                key: 'properties.cm:name',
                editable: true
            }),
            new CardViewTextItemModel({
                label: 'CORE.METADATA.BASIC.TITLE',
                value: title,
                key: 'properties.cm:title',
                editable: true
            }),
            new CardViewTextItemModel({
                label: 'CORE.METADATA.BASIC.CREATOR',
                value: node.createdByUser.displayName,
                key: 'createdByUser.displayName',
                editable: false
            }),
            new CardViewDateItemModel({
                label: 'CORE.METADATA.BASIC.CREATED_DATE',
                value: node.createdAt,
                key: 'createdAt',
                editable: false,
                format: 'mediumDate'
            }),
            new CardViewTextItemModel({
                label: 'CORE.METADATA.BASIC.SIZE',
                value: sizeInBytes,
                key: 'content.sizeInBytes',
                pipes: [{ pipe: this.fileSizePipe }],
                editable: false
            }),
            new CardViewTextItemModel({
                label: 'CORE.METADATA.BASIC.MODIFIER',
                value: node.modifiedByUser.displayName,
                key: 'modifiedByUser.displayName',
                editable: false
            }),
            new CardViewDateItemModel({
                label: 'CORE.METADATA.BASIC.MODIFIED_DATE',
                value: node.modifiedAt,
                key: 'modifiedAt',
                editable: false,
                format: 'mediumDate'
            }),
            new CardViewTextItemModel({
                label: 'CORE.METADATA.BASIC.MIMETYPE',
                value: mimeTypeName,
                key: 'content.mimeTypeName',
                editable: false
            }),
            new CardViewTextItemModel({
                label: 'CORE.METADATA.BASIC.AUTHOR',
                value: author,
                key: 'properties.cm:author',
                editable: true
            }),
            new CardViewTextItemModel({
                label: 'CORE.METADATA.BASIC.DESCRIPTION',
                value: description,
                key: 'properties.cm:description',
                multiline: true,
                editable: true
            })
        ];
    }
}
BasicPropertiesService.ɵfac = function BasicPropertiesService_Factory(t) { return new (t || BasicPropertiesService)(ɵngcc0.ɵɵinject(ɵngcc1.FileSizePipe)); };
BasicPropertiesService.ɵprov = ɵɵdefineInjectable({ factory: function BasicPropertiesService_Factory() { return new BasicPropertiesService(ɵɵinject(FileSizePipe)); }, token: BasicPropertiesService, providedIn: "root" });
BasicPropertiesService.ctorParameters = () => [
    { type: FileSizePipe }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(BasicPropertiesService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc1.FileSizePipe }]; }, null); })();

const D_TEXT = 'd:text';
const D_MLTEXT = 'd:mltext';
const D_DATE = 'd:date';
const D_DATETIME = 'd:datetime';
const D_INT = 'd:int';
const D_LONG = 'd:long';
const D_FLOAT = 'd:float';
const D_DOUBLE = 'd:double';
const D_BOOLEAN = 'd:boolean';
class PropertyGroupTranslatorService {
    constructor(logService, multiValuePipe, decimalNumberPipe, appConfig) {
        this.logService = logService;
        this.multiValuePipe = multiValuePipe;
        this.decimalNumberPipe = decimalNumberPipe;
        this.appConfig = appConfig;
        this.valueSeparator = this.appConfig.get('content-metadata.multi-value-pipe-separator');
    }
    translateToCardViewGroups(propertyGroups, propertyValues, definition) {
        return propertyGroups.map((propertyGroup) => {
            const translatedPropertyGroup = Object.assign({}, propertyGroup);
            translatedPropertyGroup.properties = this.translateArray(propertyGroup.properties, propertyValues, definition);
            return translatedPropertyGroup;
        });
    }
    translateProperty(property, startValue, allowEditing = false) {
        this.checkECMTypeValidity(property.dataType);
        const prefix = 'properties.';
        const propertyDefinition = {
            label: property.title || property.id,
            value: startValue ? startValue : property.defaultValue,
            key: `${prefix}${property.id}`,
            default: property.defaultValue,
            editable: property.isProtected ? false : allowEditing,
            constraints: property === null || property === void 0 ? void 0 : property.constraints
        };
        return this.transform(propertyDefinition, property.dataType, property.isMultiValued);
    }
    translateArray(properties, propertyValues, definition) {
        return properties.map((property) => {
            return this.translate(property, propertyValues, this.getPropertyConstraints(property.name, definition));
        });
    }
    translate(property, propertyValues, constraints) {
        let propertyValue;
        if (propertyValues && !this.isEmpty(propertyValues[property.name])) {
            propertyValue = propertyValues[property.name];
        }
        this.checkECMTypeValidity(property.dataType);
        const prefix = 'properties.';
        const propertyDefinition = {
            label: property.title || property.name,
            value: propertyValue,
            key: `${prefix}${property.name}`,
            default: property.defaultValue,
            editable: property.protected ? false : property.editable !== undefined ? property.editable : true,
            constraints: constraints
        };
        return this.transform(propertyDefinition, property.dataType, property.multiValued);
    }
    transform(propertyDefinition, dataType, isMultiValued) {
        let cardViewItemProperty;
        if (this.isListOfValues(propertyDefinition.constraints)) {
            const options = propertyDefinition.constraints[0].parameters.allowedValues.map((value) => ({ key: value, label: value }));
            const properties = Object.assign(propertyDefinition, { options$: of(options) });
            cardViewItemProperty = new CardViewSelectItemModel(properties);
        }
        else {
            switch (dataType) {
                case D_MLTEXT:
                    cardViewItemProperty = new CardViewTextItemModel(Object.assign(propertyDefinition, {
                        multiline: true
                    }));
                    break;
                case D_INT:
                case D_LONG:
                    cardViewItemProperty = new CardViewIntItemModel(Object.assign(propertyDefinition, {
                        multivalued: isMultiValued,
                        pipes: [{ pipe: this.multiValuePipe, params: [this.valueSeparator] }]
                    }));
                    break;
                case D_FLOAT:
                case D_DOUBLE:
                    cardViewItemProperty = new CardViewFloatItemModel(Object.assign(propertyDefinition, {
                        multivalued: isMultiValued,
                        pipes: [
                            { pipe: this.decimalNumberPipe },
                            { pipe: this.multiValuePipe, params: [this.valueSeparator] }
                        ]
                    }));
                    break;
                case D_DATE:
                    cardViewItemProperty = new CardViewDateItemModel(Object.assign(propertyDefinition, {
                        multivalued: isMultiValued,
                        pipes: [{ pipe: this.multiValuePipe, params: [this.valueSeparator] }]
                    }));
                    break;
                case D_DATETIME:
                    cardViewItemProperty = new CardViewDatetimeItemModel(Object.assign(propertyDefinition, {
                        multivalued: isMultiValued,
                        pipes: [{ pipe: this.multiValuePipe, params: [this.valueSeparator] }]
                    }));
                    break;
                case D_BOOLEAN:
                    cardViewItemProperty = new CardViewBoolItemModel(propertyDefinition);
                    break;
                case D_TEXT:
                default:
                    cardViewItemProperty = new CardViewTextItemModel(Object.assign(propertyDefinition, {
                        multivalued: isMultiValued,
                        multiline: isMultiValued,
                        pipes: [{ pipe: this.multiValuePipe, params: [this.valueSeparator] }]
                    }));
            }
        }
        return cardViewItemProperty;
    }
    isListOfValues(constraint) {
        var _a;
        return ((_a = constraint === null || constraint === void 0 ? void 0 : constraint[0]) === null || _a === void 0 ? void 0 : _a.type) === 'LIST';
    }
    getPropertyConstraints(propertyName, definition) {
        var _a, _b;
        return (_b = (_a = definition === null || definition === void 0 ? void 0 : definition.properties.find((item) => item.id === propertyName)) === null || _a === void 0 ? void 0 : _a.constraints) !== null && _b !== void 0 ? _b : [];
    }
    checkECMTypeValidity(ecmPropertyType) {
        if (PropertyGroupTranslatorService.RECOGNISED_ECM_TYPES.indexOf(ecmPropertyType) === -1) {
            this.logService.error(`Unknown type for mapping: ${ecmPropertyType}`);
        }
    }
    isEmpty(value) {
        return value === undefined || value === null || value === '';
    }
}
PropertyGroupTranslatorService.ɵfac = function PropertyGroupTranslatorService_Factory(t) { return new (t || PropertyGroupTranslatorService)(ɵngcc0.ɵɵinject(ɵngcc1.LogService), ɵngcc0.ɵɵinject(ɵngcc1.MultiValuePipe), ɵngcc0.ɵɵinject(ɵngcc1.DecimalNumberPipe), ɵngcc0.ɵɵinject(ɵngcc1.AppConfigService)); };
PropertyGroupTranslatorService.RECOGNISED_ECM_TYPES = [D_TEXT, D_MLTEXT, D_DATE, D_DATETIME, D_INT, D_LONG, D_FLOAT, D_DOUBLE, D_BOOLEAN];
PropertyGroupTranslatorService.ɵprov = ɵɵdefineInjectable({ factory: function PropertyGroupTranslatorService_Factory() { return new PropertyGroupTranslatorService(ɵɵinject(LogService), ɵɵinject(MultiValuePipe), ɵɵinject(DecimalNumberPipe), ɵɵinject(AppConfigService)); }, token: PropertyGroupTranslatorService, providedIn: "root" });
PropertyGroupTranslatorService.ctorParameters = () => [
    { type: LogService },
    { type: MultiValuePipe },
    { type: DecimalNumberPipe },
    { type: AppConfigService }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(PropertyGroupTranslatorService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc1.LogService }, { type: ɵngcc1.MultiValuePipe }, { type: ɵngcc1.DecimalNumberPipe }, { type: ɵngcc1.AppConfigService }]; }, null); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const emptyGroup = {
    properties: {}
};
function convertObjectToArray(object) {
    return Object.keys(object).map((key) => object[key]);
}
function getGroup(propertyGroups, groupName) {
    return propertyGroups[groupName];
}
function getProperty(propertyGroups, groupName, propertyName) {
    const groupDefinition = getGroup(propertyGroups, groupName) || emptyGroup;
    let propertyDefinitions;
    if (propertyName === '*') {
        propertyDefinitions = convertObjectToArray(groupDefinition.properties);
    }
    else {
        propertyDefinitions = groupDefinition.properties[propertyName];
    }
    return propertyDefinitions;
}

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class AspectOrientedConfigService {
    constructor(config) {
        this.config = config;
    }
    isGroupAllowed(groupName) {
        if (this.isIncludeAllEnabled()) {
            return true;
        }
        const groupNames = Object.keys(this.config);
        return groupNames.indexOf(groupName) !== -1;
    }
    reorganiseByConfig(propertyGroups) {
        const aspects = this.config, aspectNames = Object.keys(aspects);
        return aspectNames
            .reduce((groupAccumulator, aspectName) => {
            const newGroup = this.getOrganisedPropertyGroup(propertyGroups, aspectName);
            return groupAccumulator.concat(newGroup);
        }, [])
            .filter((organisedPropertyGroup) => organisedPropertyGroup.properties.length > 0);
    }
    appendAllPreset(propertyGroups) {
        const groups = Object.keys(propertyGroups)
            .map((groupName) => {
            const propertyGroup = propertyGroups[groupName], properties = propertyGroup.properties;
            if (this.isAspectReadOnly(groupName)) {
                Object.keys(properties).map((propertyName) => this.setReadOnlyProperty(properties[propertyName]));
            }
            return Object.assign({}, propertyGroup, {
                properties: Object.keys(properties).map((propertyName) => {
                    if (this.isPropertyReadOnly(propertyName)) {
                        this.setReadOnlyProperty(properties[propertyName]);
                    }
                    return properties[propertyName];
                })
            });
        });
        return groups;
    }
    setReadOnlyProperty(property) {
        property.editable = false;
    }
    isPropertyReadOnly(propertyName) {
        const readOnlyAspects = this.config.readOnlyProperties;
        if (Array.isArray(readOnlyAspects)) {
            return readOnlyAspects.includes(propertyName);
        }
        else {
            return readOnlyAspects === propertyName;
        }
    }
    isAspectReadOnly(propertyGroupName) {
        const readOnlyAspects = this.config.readOnlyAspects;
        if (Array.isArray(readOnlyAspects)) {
            return readOnlyAspects.includes(propertyGroupName);
        }
        else {
            return readOnlyAspects === propertyGroupName;
        }
    }
    filterExcludedPreset(propertyGroups) {
        if (this.config.exclude) {
            return propertyGroups.filter((preset) => {
                return !this.config.exclude.includes(preset.name);
            });
        }
        return propertyGroups;
    }
    isIncludeAllEnabled() {
        return this.config.includeAll;
    }
    getOrganisedPropertyGroup(propertyGroups, aspectName) {
        const group = getGroup(propertyGroups, aspectName);
        let newGroup = [];
        if (group) {
            const aspectProperties = this.config[aspectName];
            let properties;
            if (aspectProperties === '*') {
                properties = getProperty(propertyGroups, aspectName, aspectProperties);
            }
            else {
                properties = aspectProperties
                    .map((propertyName) => getProperty(propertyGroups, aspectName, propertyName))
                    .filter((props) => props !== undefined);
            }
            newGroup = [{ title: group.title, properties }];
        }
        return newGroup;
    }
}

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class IndifferentConfigService {
    isGroupAllowed() {
        return true;
    }
    reorganiseByConfig(propertyGroups) {
        return Object.keys(propertyGroups)
            .map((groupName) => {
            const propertyGroup = propertyGroups[groupName], properties = propertyGroup.properties;
            return Object.assign({}, propertyGroup, {
                properties: Object.keys(properties).map((propertyName) => properties[propertyName])
            });
        });
    }
    filterExcludedPreset(propertyGroups) {
        return propertyGroups;
    }
    appendAllPreset() {
        return [];
    }
    isIncludeAllEnabled() {
        return true;
    }
}

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class LayoutOrientedConfigService {
    constructor(config) {
        this.config = config;
    }
    isGroupAllowed(groupName) {
        if (this.isIncludeAllEnabled()) {
            return true;
        }
        return this.getMatchingGroups(groupName).length > 0;
    }
    reorganiseByConfig(propertyGroups) {
        const layoutBlocks = this.config.filter((itemsGroup) => itemsGroup.items);
        const organisedPropertyGroup = layoutBlocks.map((layoutBlock) => {
            const flattenedItems = this.flattenItems(layoutBlock.items), properties = flattenedItems.reduce((props, explodedItem) => {
                const isProperty = typeof explodedItem.property === 'object';
                const propertyName = isProperty ? explodedItem.property.name : explodedItem.property;
                let property = getProperty(propertyGroups, explodedItem.groupName, propertyName) || [];
                if (isProperty) {
                    property = this.setPropertyTitle(property, explodedItem.property);
                }
                property = this.setEditableProperty(property, explodedItem);
                return props.concat(property);
            }, []);
            return {
                title: layoutBlock.title,
                properties
            };
        });
        return organisedPropertyGroup;
    }
    appendAllPreset(propertyGroups) {
        return Object.keys(propertyGroups)
            .map((groupName) => {
            const propertyGroup = propertyGroups[groupName], properties = propertyGroup.properties;
            return Object.assign({}, propertyGroup, {
                properties: Object.keys(properties).map((propertyName) => properties[propertyName])
            });
        });
    }
    filterExcludedPreset(propertyGroups) {
        let excludedConfig = this.config
            .map((config) => config.exclude)
            .find((exclude) => exclude !== undefined);
        if (excludedConfig === undefined) {
            excludedConfig = [];
        }
        else if (typeof excludedConfig === 'string') {
            excludedConfig = [excludedConfig];
        }
        return propertyGroups.filter((props) => {
            return !excludedConfig.includes(props.name);
        });
    }
    isIncludeAllEnabled() {
        const includeAllProperty = this.config
            .map((config) => config.includeAll)
            .find((includeAll) => includeAll !== undefined);
        return includeAllProperty !== undefined ? includeAllProperty : false;
    }
    setEditableProperty(propertyGroup, itemConfig) {
        if (Array.isArray(propertyGroup)) {
            propertyGroup.map((property) => property.editable = itemConfig.editable !== undefined ? itemConfig.editable : true);
        }
        else {
            propertyGroup.editable = itemConfig.editable !== undefined ? itemConfig.editable : true;
        }
        return propertyGroup;
    }
    setPropertyTitle(item, property) {
        if (!Array.isArray(item)) {
            return Object.assign(Object.assign({}, item), (item.name === property.name && !!property.title) && { title: property.title });
        }
        return item;
    }
    flattenItems(items) {
        return items.reduce((accumulator, item) => {
            const properties = Array.isArray(item.properties) ? item.properties : [item.properties];
            const flattenedProperties = properties.map((property) => {
                return {
                    groupName: item.aspect || item.type,
                    property,
                    editable: item.editable
                };
            });
            return accumulator.concat(flattenedProperties);
        }, []);
    }
    getMatchingGroups(groupName) {
        return this.config
            .map((layoutBlock) => layoutBlock.items)
            .reduce((accumulator, items) => accumulator.concat(items), [])
            .filter((item) => item.aspect === groupName || item.type === groupName);
    }
}

class ContentMetadataConfigFactory {
    constructor(appConfigService, logService) {
        this.appConfigService = appConfigService;
        this.logService = logService;
    }
    get(presetName = 'default') {
        let presetConfig;
        try {
            presetConfig = this.appConfigService.config['content-metadata'].presets[presetName];
        }
        catch (_a) {
            if (presetName !== ContentMetadataConfigFactory.DEFAULT_PRESET_NAME) {
                this.logService.error(`No content-metadata preset for: ${presetName}`);
            }
            presetConfig = ContentMetadataConfigFactory.INDIFFERENT_PRESET;
        }
        return this.createConfig(presetConfig);
    }
    createConfig(presetConfig) {
        let config;
        if (this.isLayoutOrientedPreset(presetConfig)) {
            config = new LayoutOrientedConfigService(presetConfig);
        }
        else if (this.isAspectOrientedPreset(presetConfig)) {
            config = new AspectOrientedConfigService(presetConfig);
        }
        else {
            config = new IndifferentConfigService();
        }
        Object.freeze(config);
        return config;
    }
    isAspectOrientedPreset(presetConfig) {
        return this.isObject(presetConfig);
    }
    isLayoutOrientedPreset(presetConfig) {
        return Array.isArray(presetConfig);
    }
    isObject(x) {
        return x != null && typeof x === 'object';
    }
}
ContentMetadataConfigFactory.ɵfac = function ContentMetadataConfigFactory_Factory(t) { return new (t || ContentMetadataConfigFactory)(ɵngcc0.ɵɵinject(ɵngcc1.AppConfigService), ɵngcc0.ɵɵinject(ɵngcc1.LogService)); };
ContentMetadataConfigFactory.INDIFFERENT_PRESET = '*';
ContentMetadataConfigFactory.DEFAULT_PRESET_NAME = 'default';
ContentMetadataConfigFactory.ɵprov = ɵɵdefineInjectable({ factory: function ContentMetadataConfigFactory_Factory() { return new ContentMetadataConfigFactory(ɵɵinject(AppConfigService), ɵɵinject(LogService)); }, token: ContentMetadataConfigFactory, providedIn: "root" });
ContentMetadataConfigFactory.ctorParameters = () => [
    { type: AppConfigService },
    { type: LogService }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ContentMetadataConfigFactory, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc1.AppConfigService }, { type: ɵngcc1.LogService }]; }, null); })();

class PropertyDescriptorsService {
    constructor(alfrescoApiService) {
        this.alfrescoApiService = alfrescoApiService;
    }
    get classesApi() {
        var _a;
        this._classesApi = (_a = this._classesApi) !== null && _a !== void 0 ? _a : new ClassesApi(this.alfrescoApiService.getInstance());
        return this._classesApi;
    }
    load(groupNames) {
        const groupFetchStreams = groupNames
            .map((groupName) => groupName.replace(':', '_'))
            .map((groupName) => defer(() => this.classesApi.getClass(groupName)));
        return forkJoin(groupFetchStreams).pipe(map(this.convertToObject));
    }
    convertToObject(propertyGroupsArray) {
        return propertyGroupsArray.reduce((propertyGroups, propertyGroup) => {
            return Object.assign({}, propertyGroups, {
                [propertyGroup.name]: propertyGroup
            });
        }, {});
    }
}
PropertyDescriptorsService.ɵfac = function PropertyDescriptorsService_Factory(t) { return new (t || PropertyDescriptorsService)(ɵngcc0.ɵɵinject(ɵngcc1.AlfrescoApiService)); };
PropertyDescriptorsService.ɵprov = ɵɵdefineInjectable({ factory: function PropertyDescriptorsService_Factory() { return new PropertyDescriptorsService(ɵɵinject(AlfrescoApiService)); }, token: PropertyDescriptorsService, providedIn: "root" });
PropertyDescriptorsService.ctorParameters = () => [
    { type: AlfrescoApiService }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(PropertyDescriptorsService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc1.AlfrescoApiService }]; }, null); })();

class ContentTypeService {
    constructor(alfrescoApiService) {
        this.alfrescoApiService = alfrescoApiService;
    }
    get typesApi() {
        var _a;
        this._typesApi = (_a = this._typesApi) !== null && _a !== void 0 ? _a : new TypesApi(this.alfrescoApiService.getInstance());
        return this._typesApi;
    }
    getContentTypeByPrefix(prefixedType) {
        return from(this.typesApi.getType(prefixedType));
    }
    getContentTypeChildren(nodeType) {
        const where = `(parentId in ('${nodeType}') and not namespaceUri matches('http://www.alfresco.*'))`;
        const opts = {
            where,
            include: ['properties']
        };
        return from(this.typesApi.listTypes(opts)).pipe(map((result) => result.list.entries));
    }
}
ContentTypeService.ɵfac = function ContentTypeService_Factory(t) { return new (t || ContentTypeService)(ɵngcc0.ɵɵinject(ɵngcc1.AlfrescoApiService)); };
ContentTypeService.ɵprov = ɵɵdefineInjectable({ factory: function ContentTypeService_Factory() { return new ContentTypeService(ɵɵinject(AlfrescoApiService)); }, token: ContentTypeService, providedIn: "root" });
ContentTypeService.ctorParameters = () => [
    { type: AlfrescoApiService }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ContentTypeService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc1.AlfrescoApiService }]; }, null); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class ContentTypeDialogComponent {
    constructor(dialog, data, contentTypeService) {
        this.dialog = dialog;
        this.data = data;
        this.contentTypeService = contentTypeService;
        this.typeProperties = [];
        this.propertyColumns = ['name', 'title', 'dataType'];
        this.title = data.title;
        this.description = data.description;
        this.confirmMessage = data.confirmMessage;
        this.nodeType = data.nodeType;
        this.contentTypeService.getContentTypeByPrefix(this.nodeType).subscribe((contentTypeEntry) => {
            this.currentContentType = contentTypeEntry;
            this.typeProperties = this.currentContentType.entry.properties.filter((property) => property.id.startsWith(this.currentContentType.entry.model.namespacePrefix));
        });
    }
    ngOnInit() {
        this.dialog.backdropClick().subscribe(() => {
            this.close();
        });
    }
    close() {
        this.data.select.complete();
    }
    onCancel() {
        this.close();
    }
    onApply() {
        this.data.select.next(true);
        this.close();
    }
}
ContentTypeDialogComponent.ɵfac = function ContentTypeDialogComponent_Factory(t) { return new (t || ContentTypeDialogComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc2.MatDialogRef), ɵngcc0.ɵɵdirectiveInject(MAT_DIALOG_DATA), ɵngcc0.ɵɵdirectiveInject(ContentTypeService)); };
ContentTypeDialogComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ContentTypeDialogComponent, selectors: [["adf-content-type-dialog"]], decls: 25, vars: 20, consts: [[1, "adf-content-type-dialog"], ["mat-dialog-title", "", "data-automation-id", "content-type-dialog-title", 1, "adf-content-type-dialog-title"], ["data-automation-id", "content-type-dialog-content", 1, "adf-content-type-dialog-content"], ["data-automation-id", "content-type-dialog-description"], ["data-automation-id", "content-type-dialog-confirm-message"], [1, "adf-content-type-accordion"], ["mat-table", "", "class", "adf-content-type-table", 3, "dataSource", 4, "ngIf"], ["align", "end"], ["mat-button", "", "mat-dialog-close", "", "id", "content-type-dialog-actions-cancel"], ["mat-button", "", "id", "content-type-dialog-apply-button", "cdkFocusInitial", "", 1, "adf-content-type-dialog-apply-button", 3, "mat-dialog-close", "click"], ["mat-table", "", 1, "adf-content-type-table", 3, "dataSource"], ["matColumnDef", "name"], ["mat-header-cell", "", 4, "matHeaderCellDef"], ["mat-cell", "", 4, "matCellDef"], ["matColumnDef", "title"], ["matColumnDef", "dataType"], ["mat-header-row", "", 4, "matHeaderRowDef"], ["mat-row", "", 4, "matRowDef", "matRowDefColumns"], ["mat-header-cell", ""], ["mat-cell", ""], ["mat-header-row", ""], ["mat-row", ""]], template: function ContentTypeDialogComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "h2", 1);
        ɵngcc0.ɵɵtext(2);
        ɵngcc0.ɵɵpipe(3, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(4, "mat-dialog-content", 2);
        ɵngcc0.ɵɵelementStart(5, "h4", 3);
        ɵngcc0.ɵɵtext(6);
        ɵngcc0.ɵɵpipe(7, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(8, "p", 4);
        ɵngcc0.ɵɵtext(9);
        ɵngcc0.ɵɵpipe(10, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(11, "mat-accordion");
        ɵngcc0.ɵɵelementStart(12, "mat-expansion-panel", 5);
        ɵngcc0.ɵɵelementStart(13, "mat-expansion-panel-header");
        ɵngcc0.ɵɵelementStart(14, "mat-panel-title");
        ɵngcc0.ɵɵtext(15);
        ɵngcc0.ɵɵpipe(16, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(17, ContentTypeDialogComponent_table_17_Template, 12, 3, "table", 6);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(18, "mat-dialog-actions", 7);
        ɵngcc0.ɵɵelementStart(19, "button", 8);
        ɵngcc0.ɵɵtext(20);
        ɵngcc0.ɵɵpipe(21, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(22, "button", 9);
        ɵngcc0.ɵɵlistener("click", function ContentTypeDialogComponent_Template_button_click_22_listener() { return ctx.onApply(); });
        ɵngcc0.ɵɵtext(23);
        ɵngcc0.ɵɵpipe(24, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(3, 8, ctx.title));
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(7, 10, ctx.description));
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(10, 12, ctx.confirmMessage));
        ɵngcc0.ɵɵadvance(6);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(16, 14, "CORE.METADATA.CONTENT_TYPE.DIALOG.VIEW_DETAILS"), " ");
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", (ctx.typeProperties == null ? null : ctx.typeProperties.length) > 0);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(21, 16, "CORE.METADATA.CONTENT_TYPE.DIALOG.CANCEL"));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("mat-dialog-close", true);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(24, 18, "CORE.METADATA.CONTENT_TYPE.DIALOG.APPLY"));
    } }, directives: [ɵngcc2.MatDialogTitle, ɵngcc2.MatDialogContent, ɵngcc23.MatAccordion, ɵngcc23.MatExpansionPanel, ɵngcc23.MatExpansionPanelHeader, ɵngcc23.MatExpansionPanelTitle, ɵngcc4.NgIf, ɵngcc2.MatDialogActions, ɵngcc5.MatButton, ɵngcc2.MatDialogClose, ɵngcc30.MatTable, ɵngcc30.MatColumnDef, ɵngcc30.MatHeaderCellDef, ɵngcc30.MatCellDef, ɵngcc30.MatHeaderRowDef, ɵngcc30.MatRowDef, ɵngcc30.MatHeaderCell, ɵngcc30.MatCell, ɵngcc30.MatHeaderRow, ɵngcc30.MatRow], pipes: [ɵngcc8.TranslatePipe], styles: [".adf-content-type-dialog .mat-expansion-panel{margin-bottom:10px}.adf-content-type-accordion{margin:10px}.adf-content-type-dialog-title{font-size:large;font-weight:200;margin-top:0}.adf-content-type-dialog-description{font-size:small;line-height:normal}.adf-content-type-table{width:100%}.adf-content-type-dialog-apply-button{color:var(--theme-primary-color)}"], encapsulation: 2 });
ContentTypeDialogComponent.ctorParameters = () => [
    { type: MatDialogRef },
    { type: undefined, decorators: [{ type: Inject, args: [MAT_DIALOG_DATA,] }] },
    { type: ContentTypeService }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ContentTypeDialogComponent, [{
        type: Component,
        args: [{
                selector: 'adf-content-type-dialog',
                template: "<div class=\"adf-content-type-dialog\">\n    <h2 mat-dialog-title class=\"adf-content-type-dialog-title\" data-automation-id=\"content-type-dialog-title\">{{title |\n        translate}}</h2>\n    <mat-dialog-content class=\"mat-typography\" class=\"adf-content-type-dialog-content\"\n        data-automation-id=\"content-type-dialog-content\">\n        <h4 data-automation-id=\"content-type-dialog-description\">{{description | translate}}</h4>\n        <p data-automation-id=\"content-type-dialog-confirm-message\">{{confirmMessage | translate}}</p>\n        <mat-accordion>\n            <mat-expansion-panel class=\"adf-content-type-accordion\">\n                <mat-expansion-panel-header>\n                    <mat-panel-title>\n                        {{'CORE.METADATA.CONTENT_TYPE.DIALOG.VIEW_DETAILS' | translate}}\n                    </mat-panel-title>\n                </mat-expansion-panel-header>\n                <table mat-table [dataSource]=\"typeProperties\"\n                    *ngIf=\"typeProperties?.length > 0\" class=\"adf-content-type-table\">\n                    <ng-container matColumnDef=\"name\">\n                        <th mat-header-cell *matHeaderCellDef> {{'CORE.METADATA.CONTENT_TYPE.DIALOG.PROPERTY.NAME' |\n                            translate}} </th>\n                        <td mat-cell *matCellDef=\"let property\"> {{property.id}} </td>\n                    </ng-container>\n                    <ng-container matColumnDef=\"title\">\n                        <th mat-header-cell *matHeaderCellDef>\n                            {{'CORE.METADATA.CONTENT_TYPE.DIALOG.PROPERTY.DESCRIPTION' | translate}} </th>\n                        <td mat-cell *matCellDef=\"let property\"> {{property.title}} </td>\n                    </ng-container>\n                    <ng-container matColumnDef=\"dataType\">\n                        <th mat-header-cell *matHeaderCellDef> {{'CORE.METADATA.CONTENT_TYPE.DIALOG.PROPERTY.DATA_TYPE'\n                            | translate}} </th>\n                        <td mat-cell *matCellDef=\"let property\"> {{property.dataType}} </td>\n                    </ng-container>\n                    <tr mat-header-row *matHeaderRowDef=\"propertyColumns\"></tr>\n                    <tr mat-row *matRowDef=\"let row; columns: propertyColumns;\"></tr>\n                </table>\n            </mat-expansion-panel>\n        </mat-accordion>\n    </mat-dialog-content>\n    <mat-dialog-actions align=\"end\">\n        <button mat-button mat-dialog-close\n            id=\"content-type-dialog-actions-cancel\">{{'CORE.METADATA.CONTENT_TYPE.DIALOG.CANCEL' | translate }}</button>\n        <button mat-button class=\"adf-content-type-dialog-apply-button\" id=\"content-type-dialog-apply-button\"\n            [mat-dialog-close]=\"true\" cdkFocusInitial (click)=\"onApply()\">{{'CORE.METADATA.CONTENT_TYPE.DIALOG.APPLY' |\n            translate}}</button>\n    </mat-dialog-actions>\n</div>\n",
                encapsulation: ViewEncapsulation.None,
                styles: [".adf-content-type-dialog .mat-expansion-panel{margin-bottom:10px}.adf-content-type-accordion{margin:10px}.adf-content-type-dialog-title{font-size:large;font-weight:200;margin-top:0}.adf-content-type-dialog-description{font-size:small;line-height:normal}.adf-content-type-table{width:100%}.adf-content-type-dialog-apply-button{color:var(--theme-primary-color)}"]
            }]
    }], function () { return [{ type: ɵngcc2.MatDialogRef }, { type: undefined, decorators: [{
                type: Inject,
                args: [MAT_DIALOG_DATA]
            }] }, { type: ContentTypeService }]; }, null); })();

class ContentTypePropertiesService {
    constructor(contentTypeService, dialog, versionCompatibilityService, propertyGroupTranslatorService) {
        this.contentTypeService = contentTypeService;
        this.dialog = dialog;
        this.versionCompatibilityService = versionCompatibilityService;
        this.propertyGroupTranslatorService = propertyGroupTranslatorService;
    }
    getContentTypeCardItem(node) {
        if (this.versionCompatibilityService.isVersionSupported('7')) {
            return this.contentTypeService.getContentTypeByPrefix(node.nodeType).
                pipe(map((contentType) => {
                const contentTypesOptions$ = this.getContentTypesAsSelectOption(contentType);
                const contentTypeCard = this.buildContentTypeSelectCardModel(contentType.entry.id, contentTypesOptions$);
                const filteredProperties = this.getContentTypeSpecificProperties(contentType);
                const propertiesCard = this.buildCardItemsFromPropertyList(filteredProperties, node.properties);
                return [contentTypeCard, ...propertiesCard];
            }));
        }
        else {
            return of([this.buildContentTypeTextCardModel(node.nodeType)]);
        }
    }
    buildCardItemsFromPropertyList(properties, currentProperties) {
        return properties.map((property) => {
            const propertyValue = currentProperties ? currentProperties[property.id] : null;
            return this.buildCardItemFromProperty(property, propertyValue);
        });
    }
    buildCardItemFromProperty(property, propertyValue) {
        return this.propertyGroupTranslatorService.translateProperty(property, propertyValue, true);
    }
    getContentTypeSpecificProperties(contentType) {
        return contentType.entry.properties.filter((property) => property.id.startsWith(contentType.entry.model.namespacePrefix));
    }
    buildContentTypeTextCardModel(currentValue) {
        const contentTypeCard = new CardViewTextItemModel({
            label: 'CORE.METADATA.BASIC.CONTENT_TYPE',
            value: currentValue,
            key: 'nodeType',
            editable: false
        });
        return contentTypeCard;
    }
    buildContentTypeSelectCardModel(currentValue, options$) {
        const contentTypeCard = new CardViewSelectItemModel({
            label: 'CORE.METADATA.BASIC.CONTENT_TYPE',
            value: currentValue,
            key: 'nodeType',
            editable: true,
            options$: options$,
            displayNoneOption: false
        });
        return contentTypeCard;
    }
    getContentTypesAsSelectOption(currentType) {
        const childrenTypes$ = this.contentTypeService.getContentTypeChildren(currentType.entry.id);
        return zip(childrenTypes$, of(currentType)).pipe(distinctUntilChanged(), map(([contentTypesEntries, currentContentType]) => {
            const updatedTypes = this.appendCurrentType(currentContentType, contentTypesEntries);
            return updatedTypes.map((contentType) => { var _a; return ({ key: contentType.entry.id, label: (_a = contentType.entry.title) !== null && _a !== void 0 ? _a : contentType.entry.id }); });
        }));
    }
    appendCurrentType(currentType, contentTypesEntries) {
        const resultTypes = [...contentTypesEntries];
        const currentTypePresent = contentTypesEntries.find((type) => type.entry.id === currentType.entry.id);
        if (!currentTypePresent) {
            resultTypes.push(currentType);
        }
        return resultTypes;
    }
    openContentTypeDialogConfirm(nodeType) {
        const select = new Subject();
        select.subscribe({
            complete: this.close.bind(this)
        });
        const data = {
            title: 'CORE.METADATA.CONTENT_TYPE.DIALOG.TITLE',
            description: 'CORE.METADATA.CONTENT_TYPE.DIALOG.DESCRIPTION',
            confirmMessage: 'CORE.METADATA.CONTENT_TYPE.DIALOG.CONFIRM',
            select: select,
            nodeType
        };
        this.openDialog(data, 'adf-content-type-dialog', '600px');
        return select;
    }
    close() {
        this.dialog.closeAll();
    }
    openDialog(data, panelClass, width) {
        this.dialog.open(ContentTypeDialogComponent, {
            data,
            panelClass,
            width,
            disableClose: true
        });
    }
}
ContentTypePropertiesService.ɵfac = function ContentTypePropertiesService_Factory(t) { return new (t || ContentTypePropertiesService)(ɵngcc0.ɵɵinject(ContentTypeService), ɵngcc0.ɵɵinject(ɵngcc2.MatDialog), ɵngcc0.ɵɵinject(ɵngcc1.VersionCompatibilityService), ɵngcc0.ɵɵinject(PropertyGroupTranslatorService)); };
ContentTypePropertiesService.ɵprov = ɵɵdefineInjectable({ factory: function ContentTypePropertiesService_Factory() { return new ContentTypePropertiesService(ɵɵinject(ContentTypeService), ɵɵinject(MatDialog), ɵɵinject(VersionCompatibilityService), ɵɵinject(PropertyGroupTranslatorService)); }, token: ContentTypePropertiesService, providedIn: "root" });
ContentTypePropertiesService.ctorParameters = () => [
    { type: ContentTypeService },
    { type: MatDialog },
    { type: VersionCompatibilityService },
    { type: PropertyGroupTranslatorService }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ContentTypePropertiesService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ContentTypeService }, { type: ɵngcc2.MatDialog }, { type: ɵngcc1.VersionCompatibilityService }, { type: PropertyGroupTranslatorService }]; }, null); })();

class ContentMetadataService {
    constructor(basicPropertiesService, contentMetadataConfigFactory, propertyGroupTranslatorService, propertyDescriptorsService, contentTypePropertyService) {
        this.basicPropertiesService = basicPropertiesService;
        this.contentMetadataConfigFactory = contentMetadataConfigFactory;
        this.propertyGroupTranslatorService = propertyGroupTranslatorService;
        this.propertyDescriptorsService = propertyDescriptorsService;
        this.contentTypePropertyService = contentTypePropertyService;
        this.error = new Subject();
    }
    getBasicProperties(node) {
        return of(this.basicPropertiesService.getProperties(node));
    }
    getContentTypeProperty(node) {
        return this.contentTypePropertyService.getContentTypeCardItem(node);
    }
    openConfirmDialog(changedProperties) {
        return this.contentTypePropertyService.openContentTypeDialogConfirm(changedProperties.nodeType);
    }
    getGroupedProperties(node, preset = 'default') {
        let groupedProperties = of([]);
        if (node.aspectNames) {
            let contentMetadataConfig;
            if (typeof preset === 'string') {
                contentMetadataConfig = this.contentMetadataConfigFactory.get(preset);
            }
            else {
                contentMetadataConfig = this.contentMetadataConfigFactory.createConfig(preset);
            }
            const groupNames = node.aspectNames
                .concat(node.nodeType)
                .filter((groupName) => contentMetadataConfig.isGroupAllowed(groupName));
            if (groupNames.length > 0) {
                groupedProperties = this.propertyDescriptorsService.load(groupNames).pipe(switchMap((groups) => iif(() => contentMetadataConfig.isIncludeAllEnabled(), of(contentMetadataConfig.appendAllPreset(groups).concat(contentMetadataConfig.reorganiseByConfig(groups))), of(contentMetadataConfig.reorganiseByConfig(groups)))), map((groups) => contentMetadataConfig.filterExcludedPreset(groups)), map((groups) => this.filterEmptyPreset(groups)), map((groups) => this.setTitleToNameIfNotSet(groups)), map((groups) => this.propertyGroupTranslatorService.translateToCardViewGroups(groups, node.properties, node.definition)));
            }
        }
        return groupedProperties;
    }
    setTitleToNameIfNotSet(propertyGroups) {
        propertyGroups.map((propertyGroup) => {
            propertyGroup.title = propertyGroup.title || propertyGroup.name;
        });
        return propertyGroups;
    }
    filterEmptyPreset(propertyGroups) {
        return propertyGroups.filter((props) => props.properties.length);
    }
}
ContentMetadataService.ɵfac = function ContentMetadataService_Factory(t) { return new (t || ContentMetadataService)(ɵngcc0.ɵɵinject(BasicPropertiesService), ɵngcc0.ɵɵinject(ContentMetadataConfigFactory), ɵngcc0.ɵɵinject(PropertyGroupTranslatorService), ɵngcc0.ɵɵinject(PropertyDescriptorsService), ɵngcc0.ɵɵinject(ContentTypePropertiesService)); };
ContentMetadataService.ɵprov = ɵɵdefineInjectable({ factory: function ContentMetadataService_Factory() { return new ContentMetadataService(ɵɵinject(BasicPropertiesService), ɵɵinject(ContentMetadataConfigFactory), ɵɵinject(PropertyGroupTranslatorService), ɵɵinject(PropertyDescriptorsService), ɵɵinject(ContentTypePropertiesService)); }, token: ContentMetadataService, providedIn: "root" });
ContentMetadataService.ctorParameters = () => [
    { type: BasicPropertiesService },
    { type: ContentMetadataConfigFactory },
    { type: PropertyGroupTranslatorService },
    { type: PropertyDescriptorsService },
    { type: ContentTypePropertiesService }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ContentMetadataService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: BasicPropertiesService }, { type: ContentMetadataConfigFactory }, { type: PropertyGroupTranslatorService }, { type: PropertyDescriptorsService }, { type: ContentTypePropertiesService }]; }, null); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class ContentMetadataComponent {
    constructor(contentMetadataService, cardViewUpdateService, nodesApiService, logService, alfrescoApiService, translationService, appConfig) {
        this.contentMetadataService = contentMetadataService;
        this.cardViewUpdateService = cardViewUpdateService;
        this.nodesApiService = nodesApiService;
        this.logService = logService;
        this.alfrescoApiService = alfrescoApiService;
        this.translationService = translationService;
        this.appConfig = appConfig;
        this.onDestroy$ = new Subject();
        this.editable = false;
        this.displayEmpty = false;
        this.expanded = false;
        this.multi = false;
        this.displayDefaultProperties = true;
        this.displayAspect = null;
        this.copyToClipboardAction = true;
        this.useChipsForMultiValueProperty = true;
        this.changedProperties = {};
        this.hasMetadataChanged = false;
        this.copyToClipboardAction = this.appConfig.get('content-metadata.copy-to-clipboard-action');
        this.multiValueSeparator = this.appConfig.get('content-metadata.multi-value-pipe-separator') || ContentMetadataComponent.DEFAULT_SEPARATOR;
        this.useChipsForMultiValueProperty = this.appConfig.get('content-metadata.multi-value-chips');
    }
    ngOnInit() {
        this.cardViewUpdateService.itemUpdated$
            .pipe(debounceTime(500), takeUntil(this.onDestroy$))
            .subscribe((updatedNode) => {
            this.hasMetadataChanged = true;
            this.targetProperty = updatedNode.target;
            this.updateChanges(updatedNode.changed);
        });
        this.cardViewUpdateService.updatedAspect$.pipe(debounceTime(500), takeUntil(this.onDestroy$))
            .subscribe((node) => this.loadProperties(node));
        this.loadProperties(this.node);
    }
    handleUpdateError(error) {
        this.logService.error(error);
        let statusCode = 0;
        try {
            statusCode = JSON.parse(error.message).error.statusCode;
        }
        catch (_a) {
        }
        let message = `METADATA.ERRORS.${statusCode}`;
        if (this.translationService.instant(message) === message) {
            message = 'METADATA.ERRORS.GENERIC';
        }
        this.contentMetadataService.error.next({
            statusCode,
            message
        });
    }
    ngOnChanges(changes) {
        if (changes.node && !changes.node.firstChange) {
            this.loadProperties(changes.node.currentValue);
        }
    }
    loadProperties(node) {
        if (node) {
            this.basicProperties$ = this.getProperties(node);
            this.groupedProperties$ = this.contentMetadataService.getGroupedProperties(node, this.preset);
        }
    }
    getProperties(node) {
        const properties$ = this.contentMetadataService.getBasicProperties(node);
        const contentTypeProperty$ = this.contentMetadataService.getContentTypeProperty(node);
        return zip(properties$, contentTypeProperty$)
            .pipe(map(([properties, contentTypeProperty]) => {
            const filteredProperties = contentTypeProperty.filter((property) => properties.findIndex((baseProperty) => baseProperty.key === property.key) === -1);
            return [...properties, ...filteredProperties];
        }));
    }
    updateChanges(updatedNodeChanges) {
        Object.keys(updatedNodeChanges).map((propertyGroup) => {
            if (typeof updatedNodeChanges[propertyGroup] === 'object') {
                this.changedProperties[propertyGroup] = Object.assign(Object.assign({}, this.changedProperties[propertyGroup]), updatedNodeChanges[propertyGroup]);
            }
            else {
                this.changedProperties[propertyGroup] = updatedNodeChanges[propertyGroup];
            }
        });
    }
    saveChanges() {
        if (this.hasContentTypeChanged(this.changedProperties)) {
            this.contentMetadataService.openConfirmDialog(this.changedProperties).subscribe(() => {
                this.updateNode();
            });
        }
        else {
            this.updateNode();
        }
    }
    updateNode() {
        this.nodesApiService.updateNode(this.node.id, this.changedProperties).pipe(catchError((err) => {
            this.cardViewUpdateService.updateElement(this.targetProperty);
            this.handleUpdateError(err);
            return of(null);
        }))
            .subscribe((updatedNode) => {
            if (updatedNode) {
                if (this.hasContentTypeChanged(this.changedProperties)) {
                    this.cardViewUpdateService.updateNodeAspect(this.node);
                }
                this.revertChanges();
                Object.assign(this.node, updatedNode);
                this.alfrescoApiService.nodeUpdated.next(this.node);
            }
        });
    }
    hasContentTypeChanged(changedProperties) {
        return !!(changedProperties === null || changedProperties === void 0 ? void 0 : changedProperties.nodeType);
    }
    revertChanges() {
        this.changedProperties = {};
        this.hasMetadataChanged = false;
    }
    cancelChanges() {
        this.revertChanges();
        this.loadProperties(this.node);
    }
    showGroup(group) {
        const properties = group.properties.filter((property) => {
            return !this.isEmpty(property.displayValue);
        });
        return properties.length > 0;
    }
    ngOnDestroy() {
        this.onDestroy$.next(true);
        this.onDestroy$.complete();
    }
    canExpandTheCard(group) {
        return group.title === this.displayAspect;
    }
    canExpandProperties() {
        return !this.expanded || this.displayAspect === 'Properties';
    }
    keyDown(event) {
        if (event.keyCode === 37 || event.keyCode === 39) {
            event.stopPropagation();
        }
    }
    isEmpty(value) {
        return value === undefined || value === null || value === '';
    }
}
ContentMetadataComponent.ɵfac = function ContentMetadataComponent_Factory(t) { return new (t || ContentMetadataComponent)(ɵngcc0.ɵɵdirectiveInject(ContentMetadataService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.CardViewUpdateService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NodesApiService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.LogService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.AlfrescoApiService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.TranslationService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.AppConfigService)); };
ContentMetadataComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ContentMetadataComponent, selectors: [["adf-content-metadata"]], hostAttrs: [1, "adf-content-metadata"], inputs: { editable: "editable", displayEmpty: "displayEmpty", expanded: "expanded", multi: "multi", displayDefaultProperties: "displayDefaultProperties", displayAspect: "displayAspect", copyToClipboardAction: "copyToClipboardAction", useChipsForMultiValueProperty: "useChipsForMultiValueProperty", node: "node", preset: "preset" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 5, vars: 4, consts: [[1, "adf-metadata-properties"], ["displayMode", "flat", 3, "multi"], [3, "expanded", 4, "ngIf"], [4, "ngIf"], ["class", "adf-metadata-action-buttons", 4, "ngIf"], [3, "expanded"], ["role", "heading"], [3, "properties", "editable", "displayEmpty", "copyToClipboardAction", "useChipsForMultiValueProperty", "multiValueSeparator", "keydown"], [4, "ngIf", "ngIfElse"], ["loading", ""], ["class", "adf-metadata-grouped-properties-container", 4, "ngFor", "ngForOf"], [1, "adf-metadata-grouped-properties-container"], ["mode", "indeterminate"], [1, "adf-metadata-action-buttons"], ["mat-button", "", "data-automation-id", "reset-metadata", 3, "disabled", "click"], ["mat-raised-button", "", "color", "primary", "data-automation-id", "save-metadata", 3, "disabled", "click"]], template: function ContentMetadataComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "mat-accordion", 1);
        ɵngcc0.ɵɵtemplate(2, ContentMetadataComponent_mat_expansion_panel_2_Template, 7, 13, "mat-expansion-panel", 2);
        ɵngcc0.ɵɵtemplate(3, ContentMetadataComponent_ng_container_3_Template, 5, 4, "ng-container", 3);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(4, ContentMetadataComponent_div_4_Template, 7, 8, "div", 4);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("multi", ctx.multi);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.displayDefaultProperties);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.expanded);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.editable);
    } }, directives: [ɵngcc23.MatAccordion, ɵngcc4.NgIf, ɵngcc23.MatExpansionPanel, ɵngcc23.MatExpansionPanelHeader, ɵngcc23.MatExpansionPanelTitle, ɵngcc1.CardViewComponent, ɵngcc4.NgForOf, ɵngcc29.MatProgressBar, ɵngcc5.MatButton], pipes: [ɵngcc8.TranslatePipe, ɵngcc4.AsyncPipe], styles: [".adf-metadata-properties .mat-expansion-panel-header.mat-expanded:focus,.adf-metadata-properties .mat-expansion-panel-header.mat-expanded:hover{background:var(--theme-bg-hover-color)}.adf-metadata-properties mat-expansion-panel-header{height:64px}.adf-metadata-properties .mat-expansion-panel:not([class*=mat-elevation-z]){box-shadow:none}.adf-metadata-action-buttons{display:flex;justify-content:space-evenly;margin:10px}"], encapsulation: 2 });
ContentMetadataComponent.DEFAULT_SEPARATOR = ', ';
ContentMetadataComponent.ctorParameters = () => [
    { type: ContentMetadataService },
    { type: CardViewUpdateService },
    { type: NodesApiService },
    { type: LogService },
    { type: AlfrescoApiService },
    { type: TranslationService },
    { type: AppConfigService }
];
ContentMetadataComponent.propDecorators = {
    node: [{ type: Input }],
    editable: [{ type: Input }],
    displayEmpty: [{ type: Input }],
    expanded: [{ type: Input }],
    multi: [{ type: Input }],
    preset: [{ type: Input }],
    displayDefaultProperties: [{ type: Input }],
    displayAspect: [{ type: Input }],
    copyToClipboardAction: [{ type: Input }],
    useChipsForMultiValueProperty: [{ type: Input }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ContentMetadataComponent, [{
        type: Component,
        args: [{
                selector: 'adf-content-metadata',
                template: "<div class=\"adf-metadata-properties\">\n    <mat-accordion displayMode=\"flat\"\n                   [multi]=\"multi\">\n        <mat-expansion-panel *ngIf=\"displayDefaultProperties\"\n                             [expanded]=\"canExpandProperties()\"\n                             [attr.data-automation-id]=\"'adf-metadata-group-properties'\">\n            <mat-expansion-panel-header>\n                <mat-panel-title role=\"heading\">\n                    {{ 'CORE.METADATA.BASIC.HEADER' | translate }}\n                </mat-panel-title>\n            </mat-expansion-panel-header>\n            <adf-card-view\n                (keydown)=\"keyDown($event)\"\n                [properties]=\"basicProperties$ | async\"\n                [editable]=\"editable\"\n                [displayEmpty]=\"displayEmpty\"\n                [copyToClipboardAction]=\"copyToClipboardAction\"\n                [useChipsForMultiValueProperty]=\"useChipsForMultiValueProperty\"\n                [multiValueSeparator]=\"multiValueSeparator\">\n            </adf-card-view>\n        </mat-expansion-panel>\n\n        <ng-container *ngIf=\"expanded\">\n            <ng-container *ngIf=\"groupedProperties$ | async; else loading; let groupedProperties\">\n                <div *ngFor=\"let group of groupedProperties; let first = first;\"\n                     class=\"adf-metadata-grouped-properties-container\">\n                    <mat-expansion-panel *ngIf=\"showGroup(group) || editable\"\n                                         [attr.data-automation-id]=\"'adf-metadata-group-' + group.title\"\n                                         [expanded]=\"canExpandTheCard(group) || !displayDefaultProperties && first\">\n                        <mat-expansion-panel-header>\n                            <mat-panel-title>\n                                {{ group.title | translate }}\n                            </mat-panel-title>\n                        </mat-expansion-panel-header>\n\n                        <adf-card-view\n                            (keydown)=\"keyDown($event)\"\n                            [properties]=\"group.properties\"\n                            [editable]=\"editable\"\n                            [displayEmpty]=\"displayEmpty\"\n                            [copyToClipboardAction]=\"copyToClipboardAction\"\n                            [useChipsForMultiValueProperty]=\"useChipsForMultiValueProperty\"\n                            [multiValueSeparator]=\"multiValueSeparator\">\n                        </adf-card-view>\n                    </mat-expansion-panel>\n\n                </div>\n            </ng-container>\n            <ng-template #loading>\n                <mat-progress-bar mode=\"indeterminate\"></mat-progress-bar>\n            </ng-template>\n        </ng-container>\n    </mat-accordion>\n\n    <div class=\"adf-metadata-action-buttons\"\n         *ngIf=\"editable\">\n        <button mat-button\n                (click)=\"cancelChanges()\"\n                data-automation-id=\"reset-metadata\"\n                [disabled]=\"!hasMetadataChanged\">\n                {{ 'CORE.METADATA.ACTIONS.CANCEL' | translate }}\n        </button>\n        <button mat-raised-button\n                (click)=\"saveChanges()\"\n                color=\"primary\"\n                data-automation-id=\"save-metadata\"\n                [disabled]=\"!hasMetadataChanged\">\n                {{ 'CORE.METADATA.ACTIONS.SAVE' | translate }}\n            </button>\n    </div>\n\n</div>\n",
                host: { 'class': 'adf-content-metadata' },
                encapsulation: ViewEncapsulation.None,
                styles: [".adf-metadata-properties .mat-expansion-panel-header.mat-expanded:focus,.adf-metadata-properties .mat-expansion-panel-header.mat-expanded:hover{background:var(--theme-bg-hover-color)}.adf-metadata-properties mat-expansion-panel-header{height:64px}.adf-metadata-properties .mat-expansion-panel:not([class*=mat-elevation-z]){box-shadow:none}.adf-metadata-action-buttons{display:flex;justify-content:space-evenly;margin:10px}"]
            }]
    }], function () { return [{ type: ContentMetadataService }, { type: ɵngcc1.CardViewUpdateService }, { type: ɵngcc1.NodesApiService }, { type: ɵngcc1.LogService }, { type: ɵngcc1.AlfrescoApiService }, { type: ɵngcc1.TranslationService }, { type: ɵngcc1.AppConfigService }]; }, { editable: [{
            type: Input
        }], displayEmpty: [{
            type: Input
        }], expanded: [{
            type: Input
        }], multi: [{
            type: Input
        }], displayDefaultProperties: [{
            type: Input
        }], displayAspect: [{
            type: Input
        }], copyToClipboardAction: [{
            type: Input
        }], useChipsForMultiValueProperty: [{
            type: Input
        }], node: [{
            type: Input
        }], preset: [{
            type: Input
        }] }); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class AspectListDialogComponent {
    constructor(dialog, data) {
        this.dialog = dialog;
        this.data = data;
        this.currentAspectSelection = [];
        this.title = data.title;
        this.description = data.description;
        this.overTableMessage = data.overTableMessage;
        this.currentNodeId = data.nodeId;
    }
    ngOnInit() {
        this.dialog.backdropClick().subscribe(() => {
            this.close();
        });
        this.dialog.keydownEvents().subscribe(event => {
            if (event.keyCode === 27) {
                event.preventDefault();
                event.stopImmediatePropagation();
                this.close();
            }
        });
    }
    onValueChanged(aspectList) {
        this.currentAspectSelection = aspectList;
    }
    close() {
        this.data.select.complete();
    }
    onCancel() {
        this.close();
    }
    onApply() {
        this.data.select.next(this.currentAspectSelection);
        this.close();
    }
}
AspectListDialogComponent.ɵfac = function AspectListDialogComponent_Factory(t) { return new (t || AspectListDialogComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc2.MatDialogRef), ɵngcc0.ɵɵdirectiveInject(MAT_DIALOG_DATA)); };
AspectListDialogComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: AspectListDialogComponent, selectors: [["adf-aspect-list-dialog"]], decls: 32, vars: 27, consts: [["mat-dialog-title", "", "data-automation-id", "aspect-list-dialog-title", 1, "adf-aspect-list-dialog"], [1, "adf-aspect-list-dialog-title"], [1, "adf-aspect-list-dialog-description"], [1, "adf-aspect-list-dialog-information"], ["id", "aspect-list-dialog-over-table-message"], ["id", "aspect-list-dialog-counter"], [1, "adf-aspect-dialog-content"], [3, "nodeId", "valueChanged"], ["aspectList", ""], ["mat-button", "", "id", "aspect-list-dialog-actions-reset", "data-automation-id", "aspect-list-dialog-actions-reset", 3, "click"], ["mat-button", "", "id", "aspect-list-dialog-actions-clear", "data-automation-id", "aspect-list-dialog-actions-clear", 3, "click"], ["mat-button", "", "id", "aspect-list-dialog-actions-cancel", "data-automation-id", "aspect-list-dialog-actions-cancel", 3, "click"], ["mat-button", "", "id", "aspect-list-dialog-actions-apply", "data-automation-id", "aspect-list-dialog-actions-apply", 3, "disabled", "click"]], template: function AspectListDialogComponent_Template(rf, ctx) { if (rf & 1) {
        const _r1 = ɵngcc0.ɵɵgetCurrentView();
        ɵngcc0.ɵɵelementStart(0, "header", 0);
        ɵngcc0.ɵɵelementStart(1, "h4", 1);
        ɵngcc0.ɵɵtext(2);
        ɵngcc0.ɵɵpipe(3, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(4, "div", 2);
        ɵngcc0.ɵɵtext(5);
        ɵngcc0.ɵɵpipe(6, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(7, "div", 3);
        ɵngcc0.ɵɵelementStart(8, "p", 4);
        ɵngcc0.ɵɵtext(9);
        ɵngcc0.ɵɵpipe(10, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(11, "p", 5);
        ɵngcc0.ɵɵtext(12);
        ɵngcc0.ɵɵpipe(13, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(14, "mat-dialog-content", 6);
        ɵngcc0.ɵɵelementStart(15, "adf-aspect-list", 7, 8);
        ɵngcc0.ɵɵlistener("valueChanged", function AspectListDialogComponent_Template_adf_aspect_list_valueChanged_15_listener($event) { return ctx.onValueChanged($event); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(17, "mat-dialog-actions");
        ɵngcc0.ɵɵelementStart(18, "div");
        ɵngcc0.ɵɵelementStart(19, "button", 9);
        ɵngcc0.ɵɵlistener("click", function AspectListDialogComponent_Template_button_click_19_listener() { ɵngcc0.ɵɵrestoreView(_r1); const _r0 = ɵngcc0.ɵɵreference(16); return _r0.reset(); });
        ɵngcc0.ɵɵtext(20);
        ɵngcc0.ɵɵpipe(21, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(22, "button", 10);
        ɵngcc0.ɵɵlistener("click", function AspectListDialogComponent_Template_button_click_22_listener() { ɵngcc0.ɵɵrestoreView(_r1); const _r0 = ɵngcc0.ɵɵreference(16); return _r0.clear(); });
        ɵngcc0.ɵɵtext(23);
        ɵngcc0.ɵɵpipe(24, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(25, "div");
        ɵngcc0.ɵɵelementStart(26, "button", 11);
        ɵngcc0.ɵɵlistener("click", function AspectListDialogComponent_Template_button_click_26_listener() { return ctx.onCancel(); });
        ɵngcc0.ɵɵtext(27);
        ɵngcc0.ɵɵpipe(28, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(29, "button", 12);
        ɵngcc0.ɵɵlistener("click", function AspectListDialogComponent_Template_button_click_29_listener() { return ctx.onApply(); });
        ɵngcc0.ɵɵtext(30);
        ɵngcc0.ɵɵpipe(31, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        const _r0 = ɵngcc0.ɵɵreference(16);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(3, 11, ctx.title));
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(6, 13, ctx.description));
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(10, 15, ctx.overTableMessage));
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵtextInterpolate2("", ctx.currentAspectSelection ? ctx.currentAspectSelection.length : 0, " ", ɵngcc0.ɵɵpipeBind1(13, 17, "ADF-ASPECT-LIST.DIALOG.SELECTED"), "");
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("nodeId", ctx.currentNodeId);
        ɵngcc0.ɵɵadvance(5);
        ɵngcc0.ɵɵtextInterpolate1("", ɵngcc0.ɵɵpipeBind1(21, 19, "ADF-ASPECT-LIST.DIALOG.RESET"), " ");
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵtextInterpolate1("", ɵngcc0.ɵɵpipeBind1(24, 21, "ADF-ASPECT-LIST.DIALOG.CLEAR"), " ");
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵtextInterpolate1("", ɵngcc0.ɵɵpipeBind1(28, 23, "ADF-ASPECT-LIST.DIALOG.CANCEL"), " ");
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("disabled", _r0.hasEqualAspect);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate1("", ɵngcc0.ɵɵpipeBind1(31, 25, "ADF-ASPECT-LIST.DIALOG.APPLY"), " ");
    } }, directives: function () { return [ɵngcc2.MatDialogTitle, ɵngcc2.MatDialogContent, AspectListComponent, ɵngcc2.MatDialogActions, ɵngcc5.MatButton]; }, pipes: function () { return [ɵngcc8.TranslatePipe]; }, styles: [".adf-aspect-list-dialog-title{font-size:large;font-weight:200;margin-top:0}.adf-aspect-list-dialog-description{font-size:small;line-height:normal}.adf-aspect-list-dialog-information{display:flex;font-size:small;justify-content:space-between;padding-left:5px;padding-right:5px}.adf-aspect-list-dialog .mat-dialog-actions{justify-content:space-between}.adf-aspect-dialog-content{padding-top:3px}.adf-aspect-dialog-content .adf-aspect-property-table .mat-cell{font-size:smaller}.adf-aspect-dialog-content .adf-aspect-property-table .mat-column-name{width:30%}"], encapsulation: 2 });
AspectListDialogComponent.ctorParameters = () => [
    { type: MatDialogRef },
    { type: undefined, decorators: [{ type: Inject, args: [MAT_DIALOG_DATA,] }] }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AspectListDialogComponent, [{
        type: Component,
        args: [{
                selector: 'adf-aspect-list-dialog',
                template: "<header mat-dialog-title data-automation-id=\"aspect-list-dialog-title\" class=\"adf-aspect-list-dialog\">\n    <h4 class=\"adf-aspect-list-dialog-title\">{{title | translate}}</h4>\n    <div class=\"adf-aspect-list-dialog-description\">{{description | translate}}</div>\n</header>\n\n<div class=\"adf-aspect-list-dialog-information\">\n    <p id=\"aspect-list-dialog-over-table-message\">{{overTableMessage | translate}}</p>\n    <p id=\"aspect-list-dialog-counter\">{{currentAspectSelection ? currentAspectSelection.length : 0}}\n        {{'ADF-ASPECT-LIST.DIALOG.SELECTED' | translate}}</p>\n</div>\n<mat-dialog-content class=\"adf-aspect-dialog-content\">\n    <adf-aspect-list #aspectList (valueChanged)=\"onValueChanged($event)\" [nodeId]=\"currentNodeId\">\n    </adf-aspect-list>\n</mat-dialog-content>\n\n<mat-dialog-actions>\n    <div>\n        <button mat-button (click)=\"aspectList.reset()\" id=\"aspect-list-dialog-actions-reset\"\n            data-automation-id=\"aspect-list-dialog-actions-reset\">{{\n            'ADF-ASPECT-LIST.DIALOG.RESET' | translate }}\n        </button>\n\n        <button mat-button (click)=\"aspectList.clear()\" id=\"aspect-list-dialog-actions-clear\"\n            data-automation-id=\"aspect-list-dialog-actions-clear\">{{\n            'ADF-ASPECT-LIST.DIALOG.CLEAR' | translate }}\n        </button>\n    </div>\n    <div>\n        <button mat-button (click)=\"onCancel()\" id=\"aspect-list-dialog-actions-cancel\"\n            data-automation-id=\"aspect-list-dialog-actions-cancel\">{{\n            'ADF-ASPECT-LIST.DIALOG.CANCEL' | translate }}\n        </button>\n\n        <button mat-button (click)=\"onApply()\" id=\"aspect-list-dialog-actions-apply\"\n            [disabled]=\"aspectList.hasEqualAspect\"\n            data-automation-id=\"aspect-list-dialog-actions-apply\">{{\n            'ADF-ASPECT-LIST.DIALOG.APPLY' | translate }}\n        </button>\n    </div>\n</mat-dialog-actions>\n",
                encapsulation: ViewEncapsulation.None,
                styles: [".adf-aspect-list-dialog-title{font-size:large;font-weight:200;margin-top:0}.adf-aspect-list-dialog-description{font-size:small;line-height:normal}.adf-aspect-list-dialog-information{display:flex;font-size:small;justify-content:space-between;padding-left:5px;padding-right:5px}.adf-aspect-list-dialog .mat-dialog-actions{justify-content:space-between}.adf-aspect-dialog-content{padding-top:3px}.adf-aspect-dialog-content .adf-aspect-property-table .mat-cell{font-size:smaller}.adf-aspect-dialog-content .adf-aspect-property-table .mat-column-name{width:30%}"]
            }]
    }], function () { return [{ type: ɵngcc2.MatDialogRef }, { type: undefined, decorators: [{
                type: Inject,
                args: [MAT_DIALOG_DATA]
            }] }]; }, null); })();

class AspectListService {
    constructor(alfrescoApiService, appConfigService, dialog, logService) {
        this.alfrescoApiService = alfrescoApiService;
        this.appConfigService = appConfigService;
        this.dialog = dialog;
        this.logService = logService;
    }
    get aspectsApi() {
        var _a;
        this._aspectsApi = (_a = this._aspectsApi) !== null && _a !== void 0 ? _a : new AspectsApi(this.alfrescoApiService.getInstance());
        return this._aspectsApi;
    }
    getAspects() {
        const visibleAspectList = this.getVisibleAspects();
        const standardAspects$ = this.getStandardAspects(visibleAspectList);
        const customAspects$ = this.getCustomAspects();
        return zip(standardAspects$, customAspects$).pipe(map(([standardAspectList, customAspectList]) => [...standardAspectList, ...customAspectList]));
    }
    getStandardAspects(whiteList) {
        const where = `(modelId in ('cm:contentmodel', 'emailserver:emailserverModel', 'smf:smartFolder', 'app:applicationmodel' ))`;
        const opts = {
            where,
            include: ['properties']
        };
        return from(this.aspectsApi.listAspects(opts))
            .pipe(map((result) => { var _a; return this.filterAspectByConfig(whiteList, (_a = result === null || result === void 0 ? void 0 : result.list) === null || _a === void 0 ? void 0 : _a.entries); }), catchError((error) => {
            this.logService.error(error);
            return of([]);
        }));
    }
    getCustomAspects() {
        const where = `(not namespaceUri matches('http://www.alfresco.*'))`;
        const opts = {
            where,
            include: ['properties']
        };
        return from(this.aspectsApi.listAspects(opts))
            .pipe(map((result) => { var _a; return (_a = result === null || result === void 0 ? void 0 : result.list) === null || _a === void 0 ? void 0 : _a.entries; }), catchError((error) => {
            this.logService.error(error);
            return of([]);
        }));
    }
    filterAspectByConfig(visibleAspectList, aspectEntries) {
        let result = aspectEntries ? aspectEntries : [];
        if ((visibleAspectList === null || visibleAspectList === void 0 ? void 0 : visibleAspectList.length) > 0 && aspectEntries) {
            result = aspectEntries.filter((value) => {
                var _a;
                return visibleAspectList.includes((_a = value === null || value === void 0 ? void 0 : value.entry) === null || _a === void 0 ? void 0 : _a.id);
            });
        }
        return result;
    }
    getVisibleAspects() {
        let visibleAspectList = [];
        const aspectVisibleConfig = this.appConfigService.get('aspect-visible');
        if (aspectVisibleConfig) {
            for (const aspectGroup of Object.keys(aspectVisibleConfig)) {
                visibleAspectList = visibleAspectList.concat(aspectVisibleConfig[aspectGroup]);
            }
        }
        return visibleAspectList;
    }
    openAspectListDialog(nodeId) {
        const select = new Subject();
        select.subscribe({
            complete: this.close.bind(this)
        });
        const data = {
            title: 'ADF-ASPECT-LIST.DIALOG.TITLE',
            description: 'ADF-ASPECT-LIST.DIALOG.DESCRIPTION',
            overTableMessage: 'ADF-ASPECT-LIST.DIALOG.OVER-TABLE-MESSAGE',
            select,
            nodeId
        };
        this.openDialog(data, 'adf-aspect-list-dialog', '750px');
        return select;
    }
    openDialog(data, panelClass, width) {
        this.dialog.open(AspectListDialogComponent, {
            data,
            panelClass,
            width,
            disableClose: true
        });
    }
    close() {
        this.dialog.closeAll();
    }
}
AspectListService.ɵfac = function AspectListService_Factory(t) { return new (t || AspectListService)(ɵngcc0.ɵɵinject(ɵngcc1.AlfrescoApiService), ɵngcc0.ɵɵinject(ɵngcc1.AppConfigService), ɵngcc0.ɵɵinject(ɵngcc2.MatDialog), ɵngcc0.ɵɵinject(ɵngcc1.LogService)); };
AspectListService.ɵprov = ɵɵdefineInjectable({ factory: function AspectListService_Factory() { return new AspectListService(ɵɵinject(AlfrescoApiService), ɵɵinject(AppConfigService), ɵɵinject(MatDialog), ɵɵinject(LogService)); }, token: AspectListService, providedIn: "root" });
AspectListService.ctorParameters = () => [
    { type: AlfrescoApiService },
    { type: AppConfigService },
    { type: MatDialog },
    { type: LogService }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AspectListService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc1.AlfrescoApiService }, { type: ɵngcc1.AppConfigService }, { type: ɵngcc2.MatDialog }, { type: ɵngcc1.LogService }]; }, null); })();

class NodeAspectService {
    constructor(alfrescoApiService, nodesApiService, aspectListService, cardViewUpdateService) {
        this.alfrescoApiService = alfrescoApiService;
        this.nodesApiService = nodesApiService;
        this.aspectListService = aspectListService;
        this.cardViewUpdateService = cardViewUpdateService;
    }
    updateNodeAspects(nodeId) {
        this.aspectListService.openAspectListDialog(nodeId).subscribe((aspectList) => {
            this.nodesApiService.updateNode(nodeId, { aspectNames: [...aspectList] }).subscribe((updatedNode) => {
                this.alfrescoApiService.nodeUpdated.next(updatedNode);
                this.cardViewUpdateService.updateNodeAspect(updatedNode);
            });
        });
    }
}
NodeAspectService.ɵfac = function NodeAspectService_Factory(t) { return new (t || NodeAspectService)(ɵngcc0.ɵɵinject(ɵngcc1.AlfrescoApiService), ɵngcc0.ɵɵinject(ɵngcc1.NodesApiService), ɵngcc0.ɵɵinject(AspectListService), ɵngcc0.ɵɵinject(ɵngcc1.CardViewUpdateService)); };
NodeAspectService.ɵprov = ɵɵdefineInjectable({ factory: function NodeAspectService_Factory() { return new NodeAspectService(ɵɵinject(AlfrescoApiService), ɵɵinject(NodesApiService), ɵɵinject(AspectListService), ɵɵinject(CardViewUpdateService)); }, token: NodeAspectService, providedIn: "root" });
NodeAspectService.ctorParameters = () => [
    { type: AlfrescoApiService },
    { type: NodesApiService },
    { type: AspectListService },
    { type: CardViewUpdateService }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NodeAspectService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc1.AlfrescoApiService }, { type: ɵngcc1.NodesApiService }, { type: AspectListService }, { type: ɵngcc1.CardViewUpdateService }]; }, null); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class ContentMetadataCardComponent {
    constructor(contentService, nodeAspectService, versionCompatibilityService) {
        this.contentService = contentService;
        this.nodeAspectService = nodeAspectService;
        this.versionCompatibilityService = versionCompatibilityService;
        this.displayEmpty = false;
        this.displayAspect = null;
        this.readOnly = false;
        this.multi = false;
        this._displayDefaultProperties = true;
        this.editable = false;
        this.editAspectSupported = false;
        this.editAspectSupported = this.versionCompatibilityService.isVersionSupported('7');
    }
    set displayDefaultProperties(value) {
        this._displayDefaultProperties = value;
        this.onDisplayDefaultPropertiesChange();
    }
    get displayDefaultProperties() {
        return this._displayDefaultProperties;
    }
    ngOnChanges(changes) {
        if (changes.displayAspect && changes.displayAspect.currentValue) {
            this.expanded = true;
        }
    }
    onDisplayDefaultPropertiesChange() {
        this.expanded = !this._displayDefaultProperties;
    }
    toggleEdit() {
        this.editable = !this.editable;
    }
    toggleExpanded() {
        this.expanded = !this.expanded;
    }
    hasAllowableOperations() {
        return this.contentService.hasAllowableOperations(this.node, AllowableOperationsEnum.UPDATE);
    }
    openAspectDialog() {
        this.nodeAspectService.updateNodeAspects(this.node.id);
    }
    isEditAspectSupported() {
        return !this.readOnly && this.hasAllowableOperations() && this.editAspectSupported;
    }
}
ContentMetadataCardComponent.ɵfac = function ContentMetadataCardComponent_Factory(t) { return new (t || ContentMetadataCardComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ContentService), ɵngcc0.ɵɵdirectiveInject(NodeAspectService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.VersionCompatibilityService)); };
ContentMetadataCardComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ContentMetadataCardComponent, selectors: [["adf-content-metadata-card"]], hostAttrs: [1, "adf-content-metadata-card"], inputs: { displayEmpty: "displayEmpty", displayAspect: "displayAspect", readOnly: "readOnly", multi: "multi", displayDefaultProperties: "displayDefaultProperties", node: "node", preset: "preset" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 1, vars: 1, consts: [[4, "ngIf"], [3, "displayDefaultProperties", "expanded", "node", "displayEmpty", "editable", "multi", "displayAspect", "preset"], ["fxLayout", "row", "fxLayoutAlign", "space-between stretch", 1, "adf-content-metadata-card-footer"], ["mat-icon-button", "", "data-automation-id", "meta-data-card-edit-aspect", 3, "click", 4, "ngIf"], ["mat-icon-button", "", "data-automation-id", "meta-data-card-toggle-edit", 3, "click", 4, "ngIf"], ["mat-button", "", "data-automation-id", "meta-data-card-toggle-expand", 3, "click", 4, "ngIf"], ["mat-icon-button", "", "data-automation-id", "meta-data-card-edit-aspect", 3, "click"], ["mat-icon-button", "", "data-automation-id", "meta-data-card-toggle-edit", 3, "click"], ["mat-button", "", "data-automation-id", "meta-data-card-toggle-expand", 3, "click"], ["data-automation-id", "meta-data-card-toggle-expand-label"]], template: function ContentMetadataCardComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, ContentMetadataCardComponent_mat_card_0_Template, 8, 11, "mat-card", 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngIf", ctx.node);
    } }, directives: [ɵngcc4.NgIf, ɵngcc31.MatCard, ɵngcc31.MatCardContent, ContentMetadataComponent, ɵngcc31.MatCardFooter, ɵngcc32.DefaultLayoutDirective, ɵngcc32.DefaultLayoutAlignDirective, ɵngcc5.MatButton, ɵngcc6.MatIcon], pipes: [ɵngcc8.TranslatePipe], styles: [".adf-content-metadata-card .mat-card{padding:0}.adf-content-metadata-card .mat-card .mat-card-content{margin-bottom:0}.adf-content-metadata-card-footer.mat-card-footer{border-top:1px solid var(--theme-border-color);margin:0;padding:8px 12px}.adf-content-metadata-card-footer.mat-card-footer button{color:var(--theme-text-color)}.adf-content-metadata-card-footer.mat-card-footer button:hover{color:var(--theme-text-bold-color)}"], encapsulation: 2 });
ContentMetadataCardComponent.ctorParameters = () => [
    { type: ContentService },
    { type: NodeAspectService },
    { type: VersionCompatibilityService }
];
ContentMetadataCardComponent.propDecorators = {
    node: [{ type: Input }],
    displayEmpty: [{ type: Input }],
    displayAspect: [{ type: Input }],
    preset: [{ type: Input }],
    readOnly: [{ type: Input }],
    multi: [{ type: Input }],
    displayDefaultProperties: [{ type: Input }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ContentMetadataCardComponent, [{
        type: Component,
        args: [{
                selector: 'adf-content-metadata-card',
                template: "<mat-card *ngIf=\"node\">\n    <mat-card-content>\n        <adf-content-metadata\n            [displayDefaultProperties]=\"displayDefaultProperties\"\n            [expanded]=\"expanded\"\n            [node]=\"node\"\n            [displayEmpty]=\"displayEmpty\"\n            [editable]=\"editable\"\n            [multi]=\"multi\"\n            [displayAspect]=\"displayAspect\"\n            [preset]=\"preset\">\n        </adf-content-metadata>\n    </mat-card-content>\n    <mat-card-footer class=\"adf-content-metadata-card-footer\" fxLayout=\"row\" fxLayoutAlign=\"space-between stretch\">\n        <div>\n            <button *ngIf=\"isEditAspectSupported()\"\n                mat-icon-button\n                (click)=\"openAspectDialog()\"\n                [attr.title]=\"'CORE.METADATA.ACTIONS.EDIT_ASPECTS' | translate\"\n                [attr.aria-label]=\"'CORE.METADATA.ACCESSIBILITY.EDIT_ASPECTS' | translate\"\n                data-automation-id=\"meta-data-card-edit-aspect\">\n                <mat-icon>menu</mat-icon>\n            </button>\n            <button *ngIf=\"!readOnly && hasAllowableOperations()\"\n                mat-icon-button\n                (click)=\"toggleEdit()\"\n                [attr.title]=\"'CORE.METADATA.ACTIONS.EDIT' | translate\"\n                [attr.aria-label]=\"'CORE.METADATA.ACCESSIBILITY.EDIT' | translate\"\n                data-automation-id=\"meta-data-card-toggle-edit\">\n                <mat-icon>mode_edit</mat-icon>\n            </button>\n        </div>\n        <button *ngIf=\"displayDefaultProperties\" mat-button (click)=\"toggleExpanded()\" data-automation-id=\"meta-data-card-toggle-expand\">\n            <ng-container *ngIf=\"!expanded\">\n                <span data-automation-id=\"meta-data-card-toggle-expand-label\">{{ 'ADF_VIEWER.SIDEBAR.METADATA.MORE_INFORMATION' | translate }}</span>\n                <mat-icon>keyboard_arrow_down</mat-icon>\n            </ng-container>\n            <ng-container *ngIf=\"expanded\">\n                <span data-automation-id=\"meta-data-card-toggle-expand-label\">{{ 'ADF_VIEWER.SIDEBAR.METADATA.LESS_INFORMATION' | translate }}</span>\n                <mat-icon>keyboard_arrow_up</mat-icon>\n            </ng-container>\n        </button>\n    </mat-card-footer>\n</mat-card>\n",
                encapsulation: ViewEncapsulation.None,
                host: { 'class': 'adf-content-metadata-card' },
                styles: [".adf-content-metadata-card .mat-card{padding:0}.adf-content-metadata-card .mat-card .mat-card-content{margin-bottom:0}.adf-content-metadata-card-footer.mat-card-footer{border-top:1px solid var(--theme-border-color);margin:0;padding:8px 12px}.adf-content-metadata-card-footer.mat-card-footer button{color:var(--theme-text-color)}.adf-content-metadata-card-footer.mat-card-footer button:hover{color:var(--theme-text-bold-color)}"]
            }]
    }], function () { return [{ type: ɵngcc1.ContentService }, { type: NodeAspectService }, { type: ɵngcc1.VersionCompatibilityService }]; }, { displayEmpty: [{
            type: Input
        }], displayAspect: [{
            type: Input
        }], readOnly: [{
            type: Input
        }], multi: [{
            type: Input
        }], displayDefaultProperties: [{
            type: Input
        }], node: [{
            type: Input
        }], preset: [{
            type: Input
        }] }); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class ContentMetadataModule {
}
ContentMetadataModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: ContentMetadataModule });
ContentMetadataModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function ContentMetadataModule_Factory(t) { return new (t || ContentMetadataModule)(); }, imports: [[
            CommonModule,
            MaterialModule,
            FlexLayoutModule,
            CoreModule
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ContentMetadataModule, { declarations: function () { return [ContentMetadataComponent, ContentMetadataCardComponent]; }, imports: function () { return [CommonModule, MaterialModule, FlexLayoutModule,
        CoreModule]; }, exports: function () { return [ContentMetadataComponent, ContentMetadataCardComponent]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ContentMetadataModule, [{
        type: NgModule,
        args: [{
                imports: [
                    CommonModule,
                    MaterialModule,
                    FlexLayoutModule,
                    CoreModule
                ],
                exports: [
                    ContentMetadataComponent,
                    ContentMetadataCardComponent
                ],
                declarations: [
                    ContentMetadataComponent,
                    ContentMetadataCardComponent
                ]
            }]
    }], null, null); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class PermissionDisplayModel {
    constructor(obj) {
        this.isInherited = false;
        if (obj) {
            this.authorityId = obj.authorityId;
            this.name = obj.name;
            this.accessStatus = obj.accessStatus;
            this.isInherited = obj.isInherited !== null && obj.isInherited !== undefined ? obj.isInherited : false;
            this.icon = obj.icon ? obj.icon : 'vpn_key';
        }
    }
}

class NodePermissionService {
    constructor(apiService, searchApiService, nodeService, translation) {
        this.apiService = apiService;
        this.searchApiService = searchApiService;
        this.nodeService = nodeService;
        this.translation = translation;
    }
    get groupsApi() {
        var _a;
        this._groupsApi = (_a = this._groupsApi) !== null && _a !== void 0 ? _a : new GroupsApi(this.apiService.getInstance());
        return this._groupsApi;
    }
    getNodeRoles(node) {
        const retrieveSiteQueryBody = this.buildRetrieveSiteQueryBody(node.path.elements);
        return this.searchApiService.searchByQueryBody(retrieveSiteQueryBody)
            .pipe(switchMap((siteNodeList) => {
            var _a;
            if (siteNodeList.list.entries.length > 0) {
                const siteName = siteNodeList.list.entries[0].entry.name;
                return this.getGroupMembersBySiteName(siteName);
            }
            else {
                return of((_a = node.permissions) === null || _a === void 0 ? void 0 : _a.settable);
            }
        }));
    }
    getNodePermissions(node) {
        var _a, _b;
        const result = [];
        if ((_a = node === null || node === void 0 ? void 0 : node.permissions) === null || _a === void 0 ? void 0 : _a.locallySet) {
            node.permissions.locallySet.map((permissionElement) => {
                result.push(new PermissionDisplayModel(permissionElement));
            });
        }
        if ((_b = node === null || node === void 0 ? void 0 : node.permissions) === null || _b === void 0 ? void 0 : _b.inherited) {
            node.permissions.inherited.map((permissionElement) => {
                const permissionInherited = new PermissionDisplayModel(permissionElement);
                permissionInherited.isInherited = true;
                result.push(permissionInherited);
            });
        }
        return result;
    }
    updatePermissionRole(node, updatedPermissionRole) {
        const permissionBody = { permissions: { locallySet: [] } };
        const index = node.permissions.locallySet.map((permission) => permission.authorityId).indexOf(updatedPermissionRole.authorityId);
        permissionBody.permissions.locallySet = permissionBody.permissions.locallySet.concat(node.permissions.locallySet);
        if (index !== -1) {
            permissionBody.permissions.locallySet[index] = updatedPermissionRole;
        }
        else {
            permissionBody.permissions.locallySet.push(updatedPermissionRole);
        }
        return this.nodeService.updateNode(node.id, permissionBody);
    }
    updateNodePermissions(nodeId, permissionList) {
        return this.nodeService.getNode(nodeId).pipe(switchMap((node) => this.updateLocallySetPermissions(node, permissionList)));
    }
    updateLocallySetPermissions(node, permissions) {
        const permissionBody = { permissions: { locallySet: [] } };
        const permissionList = permissions;
        const duplicatedPermissions = this.getDuplicatedPermissions(node.permissions.locallySet, permissionList);
        if (duplicatedPermissions.length > 0) {
            const list = duplicatedPermissions.map((permission) => 'authority -> ' + permission.authorityId + ' / role -> ' + permission.name).join(', ');
            const duplicatePermissionMessage = this.translation.instant('PERMISSION_MANAGER.ERROR.DUPLICATE-PERMISSION', { list });
            return throwError(duplicatePermissionMessage);
        }
        permissionBody.permissions.locallySet = node.permissions.locallySet ? node.permissions.locallySet.concat(permissionList) : permissionList;
        return this.nodeService.updateNode(node.id, permissionBody);
    }
    getDuplicatedPermissions(nodeLocallySet, permissionListAdded) {
        const duplicatePermissions = [];
        if (nodeLocallySet) {
            permissionListAdded.forEach((permission) => {
                const duplicate = nodeLocallySet.find((localPermission) => this.isEqualPermission(localPermission, permission));
                if (duplicate) {
                    duplicatePermissions.push(duplicate);
                }
            });
        }
        return duplicatePermissions;
    }
    isEqualPermission(oldPermission, newPermission) {
        return oldPermission.accessStatus === newPermission.accessStatus &&
            oldPermission.authorityId === newPermission.authorityId &&
            oldPermission.name === newPermission.name;
    }
    removePermission(node, permissionToRemove) {
        const permissionBody = { permissions: { locallySet: [] } };
        const index = node.permissions.locallySet.map((permission) => permission.authorityId).indexOf(permissionToRemove.authorityId);
        if (index !== -1) {
            node.permissions.locallySet.splice(index, 1);
            permissionBody.permissions.locallySet = node.permissions.locallySet;
            return this.nodeService.updateNode(node.id, permissionBody);
        }
        else {
            return of(node);
        }
    }
    getGroupMembersBySiteName(siteName) {
        const groupName = 'GROUP_site_' + siteName;
        return this.getGroupMemberByGroupName(groupName)
            .pipe(map((groupMemberPaging) => {
            const displayResult = [];
            groupMemberPaging.list.entries.forEach((member) => {
                displayResult.push(this.formattedRoleName(member.entry.displayName, 'site_' + siteName));
            });
            return displayResult;
        }));
    }
    getGroupMemberByGroupName(groupName, opts) {
        return from(this.groupsApi.listGroupMemberships(groupName, opts));
    }
    formattedRoleName(displayName, siteName) {
        return displayName.replace(siteName + '_', '');
    }
    buildRetrieveSiteQueryBody(nodePath) {
        const pathNames = nodePath.map((node) => 'name: "' + node.name + '"');
        const builtPathNames = pathNames.join(' OR ');
        return {
            'query': {
                'query': builtPathNames
            },
            'paging': {
                'maxItems': 100,
                'skipCount': 0
            },
            'include': ['aspectNames', 'properties'],
            'filterQueries': [
                {
                    'query': "TYPE:'st:site'"
                }
            ]
        };
    }
    getLocalPermissions(node) {
        var _a;
        const result = [];
        if ((_a = node === null || node === void 0 ? void 0 : node.permissions) === null || _a === void 0 ? void 0 : _a.locallySet) {
            node.permissions.locallySet.forEach((permissionElement) => {
                result.push(new PermissionDisplayModel(permissionElement));
            });
        }
        return result;
    }
    getInheritedPermission(node) {
        var _a;
        const result = [];
        if ((_a = node === null || node === void 0 ? void 0 : node.permissions) === null || _a === void 0 ? void 0 : _a.inherited) {
            node.permissions.inherited.forEach((permissionElement) => {
                const permissionInherited = new PermissionDisplayModel(permissionElement);
                permissionInherited.isInherited = true;
                result.push(permissionInherited);
            });
        }
        return result;
    }
    removePermissions(node, permissions) {
        const permissionBody = { permissions: { locallySet: [] } };
        permissions.forEach((permission) => {
            const index = node.permissions.locallySet.findIndex((locallySet) => locallySet.authorityId === permission.authorityId);
            if (index !== -1) {
                node.permissions.locallySet.splice(index, 1);
            }
        });
        permissionBody.permissions.locallySet = node.permissions.locallySet;
        return this.nodeService.updateNode(node.id, permissionBody);
    }
    updatePermissions(node, permissions) {
        const permissionBody = { permissions: { locallySet: [] } };
        permissionBody.permissions.locallySet = permissions;
        return this.nodeService.updateNode(node.id, permissionBody);
    }
    getNodeWithRoles(nodeId) {
        return this.nodeService.getNode(nodeId).pipe(switchMap(node => {
            return forkJoin({
                node: of(node),
                roles: this.getNodeRoles(node)
                    .pipe(catchError(() => { var _a; return of((_a = node.permissions) === null || _a === void 0 ? void 0 : _a.settable); }), map(_roles => _roles.map(role => ({ role, label: role }))))
            });
        }));
    }
    transformNodeToUserPerson(node) {
        let person = null, group = null;
        if (node.nodeType === 'cm:person') {
            const firstName = node.properties['cm:firstName'];
            const lastName = node.properties['cm:lastName'];
            const email = node.properties['cm:email'];
            const id = node.properties['cm:userName'];
            person = new EcmUserModel({ id, firstName, lastName, email });
        }
        if (node.nodeType === 'cm:authorityContainer') {
            const displayName = node.properties['cm:authorityDisplayName'] || node.properties['cm:authorityName'];
            const id = node.properties['cm:authorityName'];
            group = new Group({ displayName, id });
        }
        return { person, group };
    }
}
NodePermissionService.ɵfac = function NodePermissionService_Factory(t) { return new (t || NodePermissionService)(ɵngcc0.ɵɵinject(ɵngcc1.AlfrescoApiService), ɵngcc0.ɵɵinject(ɵngcc1.SearchService), ɵngcc0.ɵɵinject(ɵngcc1.NodesApiService), ɵngcc0.ɵɵinject(ɵngcc1.TranslationService)); };
NodePermissionService.ɵprov = ɵɵdefineInjectable({ factory: function NodePermissionService_Factory() { return new NodePermissionService(ɵɵinject(AlfrescoApiService), ɵɵinject(SearchService), ɵɵinject(NodesApiService), ɵɵinject(TranslationService)); }, token: NodePermissionService, providedIn: "root" });
NodePermissionService.ctorParameters = () => [
    { type: AlfrescoApiService },
    { type: SearchService },
    { type: NodesApiService },
    { type: TranslationService }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NodePermissionService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc1.AlfrescoApiService }, { type: ɵngcc1.SearchService }, { type: ɵngcc1.NodesApiService }, { type: ɵngcc1.TranslationService }]; }, null); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class MemberModel {
    constructor(input) {
        this.readonly = false;
        if (input) {
            Object.assign(this, input);
        }
    }
    static parseFromSearchResult({ entry }) {
        const result = new MemberModel();
        if (entry.nodeType === 'cm:person') {
            const person = new EcmUserModel({
                firstName: entry.properties['cm:firstName'],
                lastName: entry.properties['cm:lastName'],
                email: entry.properties['cm:email'],
                id: entry.properties['cm:userName']
            });
            result.id = person.id;
            result.entry = { person };
            result.accessStatus = 'ALLOWED';
            return result;
        }
        if (entry.nodeType === 'cm:authorityContainer') {
            const group = new Group({
                id: entry.properties['cm:authorityName'],
                displayName: entry.properties['cm:authorityDisplayName'] || entry.properties['cm:authorityName']
            });
            result.id = group.id;
            result.entry = { group };
            result.accessStatus = 'ALLOWED';
            return result;
        }
        return null;
    }
    toPermissionElement() {
        return {
            authorityId: this.id,
            name: this.role,
            accessStatus: this.accessStatus
        };
    }
}

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class AddPermissionDialogComponent {
    constructor(data, dialogRef) {
        this.data = data;
        this.dialogRef = dialogRef;
        this.isSearchActive = true;
        this.selectedMembers = [];
        this.existingMembers = [];
        this.currentSelection = [];
        this.existingMembers = this.data.node.permissions.locallySet || [];
    }
    onSelect(items) {
        this.currentSelection = items;
    }
    onAddClicked() {
        const selection = this.selectedMembers.filter(member => !member.readonly).map(member => member.toPermissionElement());
        this.data.confirm.next(selection);
        this.data.confirm.complete();
    }
    onSearchAddClicked() {
        const newMembers = this.currentSelection.map(item => MemberModel.parseFromSearchResult(item))
            .filter(({ id }) => !this.selectedMembers.find((member) => member.id === id));
        this.selectedMembers = this.selectedMembers.concat(newMembers);
        this.selectedMembers.forEach((member) => {
            const existingMember = this.existingMembers.find(({ authorityId }) => authorityId === member.id);
            if (!!existingMember) {
                member.role = existingMember.name;
                member.accessStatus = existingMember.accessStatus;
                member.readonly = true;
            }
        });
        this.disableSearch();
    }
    canCloseDialog() {
        if (!!this.selectedMembers.length) {
            this.disableSearch();
        }
        else {
            this.dialogRef.close();
        }
    }
    enableSearch() {
        this.isSearchActive = true;
    }
    disableSearch() {
        this.isSearchActive = false;
    }
    onBulkUpdate(role) {
        this.selectedMembers.filter(member => !member.readonly)
            .forEach(member => (member.role = role));
    }
    onMemberDelete({ id }) {
        const index = this.selectedMembers.findIndex((member) => member.id === id);
        this.selectedMembers.splice(index, 1);
        if (this.selectedMembers.length === 0) {
            this.enableSearch();
            this.currentSelection = [];
        }
    }
    onMemberUpdate(role, member) {
        const _member = this.selectedMembers.find(({ id }) => id === member.id);
        _member.role = role;
    }
    isValid() {
        return this.selectedMembers.filter(({ readonly }) => !readonly).length && this.selectedMembers.every(({ role }) => !!role);
    }
}
AddPermissionDialogComponent.ɵfac = function AddPermissionDialogComponent_Factory(t) { return new (t || AddPermissionDialogComponent)(ɵngcc0.ɵɵdirectiveInject(MAT_DIALOG_DATA), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.MatDialogRef)); };
AddPermissionDialogComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: AddPermissionDialogComponent, selectors: [["adf-add-permission-dialog"]], decls: 5, vars: 5, consts: [["mat-dialog-title", "", "id", "add-permission-dialog-title"], [4, "ngIf"], ["mat-button", "", 1, "adf-search-user-button", 3, "click"], [1, "adf-toolbar--spacer"], [1, "adf-new-permission-table"], ["class", "adf-datatable-permission", "selectionMode", "none", "data-automation-id", "adf-user-role-selection-table", 3, "rows", "stickyHeader", 4, "ngIf"], ["mat-button", "", "mat-dialog-close", "", "data-automation-id", "add-permission-dialog-close-button"], ["mat-button", "", "data-automation-id", "add-permission-dialog-confirm-button", 1, "adf-choose-action", 3, "mat-dialog-close", "disabled", "click"], ["selectionMode", "none", "data-automation-id", "adf-user-role-selection-table", 1, "adf-datatable-permission", 3, "rows", "stickyHeader"], ["key", "$thumbunail", 1, "adf-datatable-cell--image", "adf-authority-icon-column", 3, "sortable"], ["key", "id", 1, "adf-ellipsis-cell", "adf-expand-cell-5", "adf-authorityId-column", 3, "title"], ["title", "PERMISSION_MANAGER.PERMISSION_DISPLAY.ROLE", "key", "role", 1, "adf-ellipsis-cell", "adf-expand-cell-4"], ["key", "", 1, "adf-datatable-cell", "adf-delete-permission-column", 3, "sortable"], [3, "context"], ["id", "adf-select-role-permission", 3, "readonly", "value", "roles", "roleChanged"], ["placeholder", "PERMISSION_MANAGER.COLUMN.BULK-ROLE", "id", "adf-bulk-select-role-permission", 1, "adf-permission-role-column-header", 3, "roles", "roleChanged"], ["mat-icon-button", "", "data-automation-id", "adf-delete-permission-button", 1, "adf-add-member-action", 3, "click"], [1, "adf-search-container", 3, "select"], ["mat-button", "", "data-automation-id", "add-permission-dialog-close-button", 3, "click"], ["mat-button", "", "data-automation-id", "add-permission-dialog-confirm-button", 3, "disabled", "click"]], template: function AddPermissionDialogComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "h2", 0);
        ɵngcc0.ɵɵtext(1);
        ɵngcc0.ɵɵpipe(2, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(3, AddPermissionDialogComponent_ng_container_3_Template, 17, 12, "ng-container", 1);
        ɵngcc0.ɵɵtemplate(4, AddPermissionDialogComponent_ng_container_4_Template, 10, 7, "ng-container", 1);
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(2, 3, (ctx.data == null ? null : ctx.data.title) ? ctx.data == null ? null : ctx.data.title : "PERMISSION_MANAGER.ADD-PERMISSION.BASE-DIALOG-TITLE"), "\n");
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.isSearchActive);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.isSearchActive);
    } }, directives: function () { return [ɵngcc2.MatDialogTitle, ɵngcc4.NgIf, ɵngcc2.MatDialogContent, ɵngcc5.MatButton, ɵngcc6.MatIcon, ɵngcc2.MatDialogActions, ɵngcc2.MatDialogClose, ɵngcc1.DataTableComponent, ɵngcc1.DataColumnListComponent, ɵngcc1.DataColumnComponent, ɵngcc1.DateColumnHeaderComponent, UserIconColumnComponent, UserNameColumnComponent, UserRoleColumnComponent, AddPermissionPanelComponent]; }, pipes: function () { return [ɵngcc8.TranslatePipe]; }, styles: [".adf-add-permission-dialog .mat-dialog-title{color:var(--theme-text-bold-color);font-size:20px;font-stretch:normal;font-style:normal;font-weight:600;letter-spacing:-.5px;line-height:1.6;margin-left:24px;margin-right:24px}.adf-add-permission-dialog .mat-dialog-container{padding-left:0;padding-right:0}.adf-add-permission-dialog .mat-dialog-content{flex-grow:1;height:80vh;margin:0;overflow:hidden}.adf-add-permission-dialog .mat-dialog-content .adf-new-permission-table{height:90%}.adf-add-permission-dialog .mat-dialog-content .adf-search-container{height:100%}.adf-add-permission-dialog .mat-dialog-actions{background-color:var(--theme-background-color);color:var(--theme-foreground-text-color);display:flex;justify-content:flex-end;padding:0 24px}.adf-add-permission-dialog .mat-dialog-actions button{font-weight:400;text-transform:uppercase}.adf-add-permission-dialog .mat-dialog-actions .adf-choose-action[disabled]{color:var(--theme-secondary-text-color)}.adf-add-permission-dialog .mat-dialog-actions .adf-choose-action:enabled{color:var(--theme-primary-color)}.adf-add-permission-dialog .adf-search-user-button{width:100%}.adf-add-permission-dialog .adf-search-user-button .mat-button-wrapper{align-items:center;display:flex}.adf-add-permission-dialog .adf-add-member-action{padding:0 15px}"], encapsulation: 2 });
AddPermissionDialogComponent.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [MAT_DIALOG_DATA,] }] },
    { type: MatDialogRef }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AddPermissionDialogComponent, [{
        type: Component,
        args: [{
                selector: 'adf-add-permission-dialog',
                template: "<h2 mat-dialog-title id=\"add-permission-dialog-title\">\n    {{ (data?.title ? data?.title : \"PERMISSION_MANAGER.ADD-PERMISSION.BASE-DIALOG-TITLE\") | translate }}\n</h2>\n\n<ng-container *ngIf=\"!isSearchActive\">\n    <mat-dialog-content>\n        <button mat-button (click)=\"enableSearch()\" class=\"adf-search-user-button\">\n            {{ \"PERMISSION_MANAGER.ADD-PERMISSION.SEARCH\" | translate }}\n            <span class=\"adf-toolbar--spacer\"></span>\n            <mat-icon>search</mat-icon>\n        </button>\n\n        <div class=\"adf-new-permission-table\">\n            <adf-datatable [rows]=\"selectedMembers\"\n                           class=\"adf-datatable-permission\"\n                           selectionMode=\"none\"\n                           [stickyHeader]=\"true\"\n                           data-automation-id=\"adf-user-role-selection-table\"\n                           *ngIf=\"selectedMembers.length\">\n                <data-columns>\n                    <data-column class=\"adf-datatable-cell--image adf-authority-icon-column\" key=\"$thumbunail\" [sortable]=\"false\">\n                        <ng-template let-context>\n                            <adf-user-icon-column [context]=\"context\"></adf-user-icon-column>\n                        </ng-template>\n                    </data-column>\n\n                    <data-column class=\"adf-ellipsis-cell adf-expand-cell-5 adf-authorityId-column\"\n                                 [title]=\"'PERMISSION_MANAGER.COLUMN.NAME' | translate:{count:selectedMembers.length}\"\n                                 key=\"id\">\n                        <ng-template let-context>\n                            <adf-user-name-column [context]=\"context\"></adf-user-name-column>\n                        </ng-template>\n                    </data-column>\n\n                    <data-column class=\"adf-ellipsis-cell adf-expand-cell-4\"\n                                 title=\"PERMISSION_MANAGER.PERMISSION_DISPLAY.ROLE\"\n                                 key=\"role\">\n                        <ng-template let-entry=\"$implicit\">\n                            <adf-user-role-column [readonly]=\"entry.row.obj.readonly\"\n                                                  [value]=\"entry.data.getValue(entry.row, entry.col)\"\n                                                  [roles]=\"data.roles\"\n                                                  id=\"adf-select-role-permission\"\n                                                  (roleChanged)=\"onMemberUpdate($event, entry.row.obj)\">\n                            </adf-user-role-column>\n                        </ng-template>\n\n                        <adf-data-column-header>\n                            <ng-template>\n                                <adf-user-role-column  class=\"adf-permission-role-column-header\"\n                                                       placeholder=\"PERMISSION_MANAGER.COLUMN.BULK-ROLE\"\n                                                       [roles]=\"data.roles\"\n                                                       id=\"adf-bulk-select-role-permission\"\n                                                       (roleChanged)=\"onBulkUpdate($event)\">\n                                </adf-user-role-column>\n                            </ng-template>\n                        </adf-data-column-header>\n                    </data-column>\n\n                    <data-column class=\"adf-datatable-cell adf-delete-permission-column\" key=\"\" [sortable]=\"false\">\n                        <ng-template let-entry=\"$implicit\">\n                            <button mat-icon-button\n                                    class=\"adf-add-member-action\"\n                                    [style.display]=\"entry.row.obj.readonly ? 'none': 'block'\"\n                                    (click)=\"onMemberDelete(entry.row.obj)\"\n                                    data-automation-id=\"adf-delete-permission-button\">\n                                <mat-icon>highlight_off</mat-icon>\n                            </button>\n                        </ng-template>\n                    </data-column>\n                </data-columns>\n            </adf-datatable>\n        </div>\n\n    </mat-dialog-content>\n\n    <mat-dialog-actions>\n        <button mat-button\n                mat-dialog-close\n                data-automation-id=\"add-permission-dialog-close-button\">\n            {{ \"PERMISSION_MANAGER.ADD-PERMISSION.CLOSE-ACTION\" | translate }}\n        </button>\n        <button mat-button\n                data-automation-id=\"add-permission-dialog-confirm-button\"\n                [mat-dialog-close]=\"true\"\n                class=\"adf-choose-action\"\n                [disabled]=\"!isValid()\"\n                (click)=\"onAddClicked()\">\n            {{ \"PERMISSION_MANAGER.ADD-PERMISSION.ADD-ACTION\" | translate }}\n        </button>\n    </mat-dialog-actions>\n</ng-container>\n\n<ng-container *ngIf=\"isSearchActive\">\n    <mat-dialog-content>\n        <adf-add-permission-panel class=\"adf-search-container\" (select)=\"onSelect($event)\"></adf-add-permission-panel>\n    </mat-dialog-content>\n\n    <mat-dialog-actions>\n            <button mat-button\n                    (click)=\"canCloseDialog()\"\n                    data-automation-id=\"add-permission-dialog-close-button\">\n                {{ \"PERMISSION_MANAGER.ADD-PERMISSION.CLOSE-ACTION\" | translate }}\n            </button>\n            <button mat-button\n                    data-automation-id=\"add-permission-dialog-confirm-button\"\n                    [disabled]=\"!currentSelection.length\"\n                    (click)=\"onSearchAddClicked()\">\n                {{ \"PERMISSION_MANAGER.ADD-PERMISSION.SELECT-ACTION\" | translate }}\n            </button>\n    </mat-dialog-actions>\n</ng-container>\n",
                encapsulation: ViewEncapsulation.None,
                styles: [".adf-add-permission-dialog .mat-dialog-title{color:var(--theme-text-bold-color);font-size:20px;font-stretch:normal;font-style:normal;font-weight:600;letter-spacing:-.5px;line-height:1.6;margin-left:24px;margin-right:24px}.adf-add-permission-dialog .mat-dialog-container{padding-left:0;padding-right:0}.adf-add-permission-dialog .mat-dialog-content{flex-grow:1;height:80vh;margin:0;overflow:hidden}.adf-add-permission-dialog .mat-dialog-content .adf-new-permission-table{height:90%}.adf-add-permission-dialog .mat-dialog-content .adf-search-container{height:100%}.adf-add-permission-dialog .mat-dialog-actions{background-color:var(--theme-background-color);color:var(--theme-foreground-text-color);display:flex;justify-content:flex-end;padding:0 24px}.adf-add-permission-dialog .mat-dialog-actions button{font-weight:400;text-transform:uppercase}.adf-add-permission-dialog .mat-dialog-actions .adf-choose-action[disabled]{color:var(--theme-secondary-text-color)}.adf-add-permission-dialog .mat-dialog-actions .adf-choose-action:enabled{color:var(--theme-primary-color)}.adf-add-permission-dialog .adf-search-user-button{width:100%}.adf-add-permission-dialog .adf-search-user-button .mat-button-wrapper{align-items:center;display:flex}.adf-add-permission-dialog .adf-add-member-action{padding:0 15px}"]
            }]
    }], function () { return [{ type: undefined, decorators: [{
                type: Inject,
                args: [MAT_DIALOG_DATA]
            }] }, { type: ɵngcc2.MatDialogRef }]; }, null); })();

class NodePermissionDialogService {
    constructor(dialog, nodePermissionService, contentService) {
        this.dialog = dialog;
        this.nodePermissionService = nodePermissionService;
        this.contentService = contentService;
    }
    openAddPermissionDialog(node, roles, title) {
        if (this.contentService.hasAllowableOperations(node, AllowableOperationsEnum.UPDATEPERMISSIONS)) {
            const confirm = new Subject();
            confirm.subscribe({
                complete: this.close.bind(this)
            });
            const data = {
                node: node,
                title: title,
                confirm: confirm,
                roles
            };
            this.openDialog(data, 'adf-add-permission-dialog', '800px');
            return confirm;
        }
        else {
            const errors = new Error(JSON.stringify({ error: { statusCode: 403 } }));
            errors.message = 'PERMISSION_MANAGER.ERROR.NOT-ALLOWED';
            return throwError(errors);
        }
    }
    openDialog(data, currentPanelClass, chosenWidth) {
        this.dialog.open(AddPermissionDialogComponent, { data, panelClass: currentPanelClass, width: chosenWidth, restoreFocus: true });
    }
    close() {
        this.dialog.closeAll();
    }
    updateNodePermissionByDialog(nodeId, title) {
        return this.nodePermissionService.getNodeWithRoles(nodeId)
            .pipe(switchMap(({ node, roles }) => {
            return this.openAddPermissionDialog(node, roles, title)
                .pipe(switchMap((selection) => {
                return this.nodePermissionService.updateNodePermissions(nodeId, selection);
            }));
        }));
    }
}
NodePermissionDialogService.ɵfac = function NodePermissionDialogService_Factory(t) { return new (t || NodePermissionDialogService)(ɵngcc0.ɵɵinject(ɵngcc2.MatDialog), ɵngcc0.ɵɵinject(NodePermissionService), ɵngcc0.ɵɵinject(ɵngcc1.ContentService)); };
NodePermissionDialogService.ɵprov = ɵɵdefineInjectable({ factory: function NodePermissionDialogService_Factory() { return new NodePermissionDialogService(ɵɵinject(MatDialog), ɵɵinject(NodePermissionService), ɵɵinject(ContentService)); }, token: NodePermissionDialogService, providedIn: "root" });
NodePermissionDialogService.ctorParameters = () => [
    { type: MatDialog },
    { type: NodePermissionService },
    { type: ContentService }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NodePermissionDialogService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc2.MatDialog }, { type: NodePermissionService }, { type: ɵngcc1.ContentService }]; }, null); })();

class PermissionListService {
    constructor(nodeService, nodePermissionService, nodePermissionDialogService, contentService, notificationService) {
        this.nodeService = nodeService;
        this.nodePermissionService = nodePermissionService;
        this.nodePermissionDialogService = nodePermissionDialogService;
        this.contentService = contentService;
        this.notificationService = notificationService;
        this.updated = new EventEmitter();
        this.errored = new EventEmitter();
        this.loading$ = new BehaviorSubject(true);
        this.error$ = new Subject();
        this.nodeWithRoles$ = new Subject();
        this.data$ = this.nodeWithRoles$.pipe(map(({ node, roles }) => {
            const nodeLocalPermissions = this.nodePermissionService.getLocalPermissions(node);
            const localPermissions = this.updateReadOnlyPermission(node, nodeLocalPermissions);
            return {
                node,
                roles,
                localPermissions,
                inheritedPermissions: this.nodePermissionService.getInheritedPermission(node)
            };
        }));
        this.SITE_MANAGER_ROLE = 'SiteManager';
    }
    fetchPermission(nodeId) {
        this.loading$.next(true);
        this.nodePermissionService.getNodeWithRoles(nodeId)
            .pipe(finalize(() => this.loading$.next(false)))
            .subscribe(({ node, roles }) => {
            this.node = node;
            this.roles = roles;
            this.nodeWithRoles$.next({ node, roles });
        }, () => this.error$.next(true));
    }
    toggleInherited(change) {
        if (this.contentService.hasAllowableOperations(this.node, AllowableOperationsEnum.UPDATEPERMISSIONS)) {
            let updateLocalPermission$ = of(null);
            const nodeBody = {
                permissions: {
                    isInheritanceEnabled: !this.node.permissions.isInheritanceEnabled
                }
            };
            const authorityId = this.getManagerAuthority(this.node);
            if (authorityId) {
                const permissions = [
                    ...(this.node.permissions.locallySet || []),
                    { authorityId, name: this.SITE_MANAGER_ROLE, accessStatus: 'ALLOWED' }
                ];
                updateLocalPermission$ = this.nodePermissionService.updatePermissions(this.node, permissions);
            }
            updateLocalPermission$.pipe(switchMap(() => this.nodeService.updateNode(this.node.id, nodeBody, { include: ['permissions'] })))
                .subscribe((nodeUpdated) => {
                var _a, _b;
                const message = nodeUpdated.permissions.isInheritanceEnabled ? 'PERMISSION_MANAGER.MESSAGE.INHERIT-ENABLE-SUCCESS' : 'PERMISSION_MANAGER.MESSAGE.INHERIT-DISABLE-SUCCESS';
                this.notificationService.showInfo(message);
                nodeUpdated.permissions.inherited = (_b = (_a = nodeUpdated.permissions) === null || _a === void 0 ? void 0 : _a.inherited) !== null && _b !== void 0 ? _b : [];
                this.reloadNode(nodeUpdated);
            }, () => {
                change.source.checked = this.node.permissions.isInheritanceEnabled;
                this.notificationService.showWarning('PERMISSION_MANAGER.MESSAGE.TOGGLE-PERMISSION-FAILED');
            });
        }
        else {
            change.source.checked = this.node.permissions.isInheritanceEnabled;
            this.notificationService.showError('PERMISSION_MANAGER.ERROR.NOT-ALLOWED');
        }
    }
    updateNodePermissionByDialog() {
        this.nodePermissionDialogService
            .openAddPermissionDialog(this.node, this.roles, 'PERMISSION_MANAGER.ADD-PERMISSION.TITLE')
            .pipe(switchMap(selection => {
            const total = selection.length;
            const group = selection.filter(({ authorityId }) => this.isGroup(authorityId)).length;
            return forkJoin({
                user: of(total - group),
                group: of(group),
                node: this.nodePermissionService.updateNodePermissions(this.node.id, selection)
            });
        }))
            .subscribe(({ user, group, node }) => {
            this.notificationService.showInfo('PERMISSION_MANAGER.MESSAGE.PERMISSION-ADD-SUCCESS', null, { user, group });
            this.reloadNode(node);
        }, () => {
            this.notificationService.showError('PERMISSION_MANAGER.MESSAGE.PERMISSION-ADD-FAIL');
            this.reloadNode();
        });
    }
    deletePermissions(permissions) {
        this.nodePermissionService.removePermissions(this.node, permissions)
            .subscribe((node) => {
            const total = permissions.length;
            const group = permissions.filter(({ authorityId }) => this.isGroup(authorityId)).length;
            this.notificationService.showInfo('PERMISSION_MANAGER.MESSAGE.PERMISSION-BULK-DELETE-SUCCESS', null, { user: total - group, group });
            this.reloadNode(node);
        }, () => {
            this.notificationService.showError('PERMISSION_MANAGER.MESSAGE.PERMISSION-DELETE-FAIL');
            this.reloadNode();
        });
    }
    updateRole(role, permission) {
        const updatedPermissionRole = this.buildUpdatedPermission(role, permission);
        this.nodePermissionService.updatePermissionRole(this.node, updatedPermissionRole)
            .subscribe((node) => {
            this.notificationService.showInfo('PERMISSION_MANAGER.MESSAGE.PERMISSION-UPDATE-SUCCESS');
            this.reloadNode(node);
            this.updated.emit(permission);
        }, () => {
            this.notificationService.showError('PERMISSION_MANAGER.MESSAGE.PERMISSION-UPDATE-FAIL');
            this.reloadNode();
            this.errored.emit(permission);
        });
    }
    bulkRoleUpdate(role) {
        const permissions = [...this.node.permissions.locallySet].map((permission) => this.buildUpdatedPermission(role, permission));
        this.nodePermissionService.updatePermissions(this.node, permissions)
            .subscribe((node) => {
            const total = permissions.length;
            const group = permissions.filter(({ authorityId }) => this.isGroup(authorityId)).length;
            this.notificationService.showInfo('PERMISSION_MANAGER.MESSAGE.PERMISSION-BULK-UPDATE-SUCCESS', null, { user: total - group, group });
            this.reloadNode(node);
        }, () => {
            this.notificationService.showError('PERMISSION_MANAGER.MESSAGE.PERMISSION-UPDATE-FAIL');
            this.reloadNode();
        });
    }
    deletePermission(permission) {
        const cloneNode = Object.assign(Object.assign({}, this.node), { permissions: Object.assign(Object.assign({}, this.node.permissions), { locallySet: [...this.node.permissions.locallySet] }) });
        this.nodePermissionService
            .removePermission(cloneNode, permission)
            .subscribe((node) => {
            this.notificationService.showInfo('PERMISSION_MANAGER.MESSAGE.PERMISSION-DELETE-SUCCESS');
            if (!node.permissions.locallySet) {
                node.permissions.locallySet = [];
            }
            this.reloadNode(node);
        }, () => {
            this.notificationService.showError('PERMISSION_MANAGER.MESSAGE.PERMISSION-DELETE-FAIL');
            this.reloadNode();
        });
    }
    buildUpdatedPermission(role, permission) {
        return {
            accessStatus: permission.accessStatus,
            name: this.canUpdateThePermission(this.node, permission) ? role : permission.name,
            authorityId: permission.authorityId
        };
    }
    reloadNode(node) {
        if (node != null) {
            Object.assign(this.node.permissions, node.permissions);
        }
        this.nodeWithRoles$.next({ node: this.node, roles: this.roles });
    }
    getManagerAuthority(node) {
        var _a;
        const sitePath = node.path.elements.find((path) => path.nodeType === 'st:site');
        let hasLocalManagerPermission = false, authorityId;
        if (sitePath) {
            authorityId = `GROUP_site_${sitePath.name}_${this.SITE_MANAGER_ROLE}`;
            hasLocalManagerPermission = !!((_a = node.permissions.locallySet) === null || _a === void 0 ? void 0 : _a.find((permission) => permission.authorityId === authorityId && permission.name === this.SITE_MANAGER_ROLE));
        }
        if (!hasLocalManagerPermission && authorityId) {
            return authorityId;
        }
        return null;
    }
    updateReadOnlyPermission(node, permissions) {
        permissions.forEach((permission) => {
            if (!this.canUpdateThePermission(node, permission)) {
                permission.readonly = true;
            }
        });
        return permissions;
    }
    canUpdateThePermission(node, permission) {
        const sitePath = node.path.elements.find((path) => path.nodeType === 'st:site');
        if (!node.permissions.isInheritanceEnabled && sitePath) {
            const authorityId = `GROUP_site_${sitePath.name}_${this.SITE_MANAGER_ROLE}`;
            return !(permission.authorityId === authorityId && permission.name === this.SITE_MANAGER_ROLE);
        }
        return true;
    }
    isGroup(authorityId) {
        return authorityId.startsWith('GROUP_') || authorityId.startsWith('ROLE_');
    }
}
PermissionListService.ɵfac = function PermissionListService_Factory(t) { return new (t || PermissionListService)(ɵngcc0.ɵɵinject(ɵngcc1.NodesApiService), ɵngcc0.ɵɵinject(NodePermissionService), ɵngcc0.ɵɵinject(NodePermissionDialogService), ɵngcc0.ɵɵinject(ɵngcc1.ContentService), ɵngcc0.ɵɵinject(ɵngcc1.NotificationService)); };
PermissionListService.ɵprov = ɵɵdefineInjectable({ factory: function PermissionListService_Factory() { return new PermissionListService(ɵɵinject(NodesApiService), ɵɵinject(NodePermissionService), ɵɵinject(NodePermissionDialogService), ɵɵinject(ContentService), ɵɵinject(NotificationService)); }, token: PermissionListService, providedIn: "root" });
PermissionListService.ctorParameters = () => [
    { type: NodesApiService },
    { type: NodePermissionService },
    { type: NodePermissionDialogService },
    { type: ContentService },
    { type: NotificationService }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(PermissionListService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc1.NodesApiService }, { type: NodePermissionService }, { type: NodePermissionDialogService }, { type: ɵngcc1.ContentService }, { type: ɵngcc1.NotificationService }]; }, null); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class PermissionListComponent {
    constructor(permissionList) {
        this.permissionList = permissionList;
        this.selectedPermissions = [];
        this.error = this.permissionList.errored;
        this.update = this.permissionList.updated;
    }
    ngOnInit() {
        this.permissionList.fetchPermission(this.nodeId);
    }
    openAddPermissionDialog() {
        this.permissionList.updateNodePermissionByDialog();
    }
    onSelect(selections) {
        this.selectedPermissions = selections.map((selection) => selection['obj']).filter((permission) => !permission.readonly);
    }
    deleteSelection() {
        this.permissionList.deletePermissions(this.selectedPermissions);
        this.selectedPermissions = [];
    }
    updatePermission({ role, permission }) {
        this.permissionList.updateRole(role, permission);
    }
    deletePermission(permission) {
        this.selectedPermissions = [];
        this.permissionList.deletePermission(permission);
    }
    updateAllPermission(role) {
        this.permissionList.bulkRoleUpdate(role);
        this.selectedPermissions = [];
    }
}
PermissionListComponent.ɵfac = function PermissionListComponent_Factory(t) { return new (t || PermissionListComponent)(ɵngcc0.ɵɵdirectiveInject(PermissionListService)); };
PermissionListComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: PermissionListComponent, selectors: [["adf-permission-list"]], inputs: { nodeId: "nodeId" }, outputs: { error: "error", update: "update" }, decls: 8, vars: 11, consts: [["id", "adf-permission-manager-card", 1, "adf-permission-card"], ["class", "adf-permission-loader", 4, "ngIf"], [4, "ngIf"], [1, "adf-permission-loader"], [3, "color", "mode"], ["id", "adf-permission-manager-error", 1, "adf-no-permission__template"], ["color", "warn"], [1, "adf-no-permission__template--text"], [1, "adf-permission-container"], ["target", ""], [1, "adf-permission-header"], [1, "adf-inherit-container"], [1, "adf-inherit-container-header"], ["data-automation-id", "adf-inherit-toggle-button", 1, "adf-inherit-toggle", 3, "checked", "change"], ["title", "total", 1, "adf-inherit-subtitle"], ["mat-button", "", "data-automation-id", "permission-info-button", 3, "adf-pop-over", "target", 4, "ngIf"], ["inheritedPermission", ""], [1, "adf-local-permission-container"], [1, "adf-permission-content-header"], [1, "adf-toolbar--spacer"], ["mat-button", "", "data-automation-id", "adf-add-permission-button", 3, "matTooltip", "click"], ["mat-button", "", "data-automation-id", "adf-delete-selected-permission", 3, "matTooltip", "disabled", "click"], ["data-automation-id", "adf-locally-set-permission", 1, "adf-permission-list", 3, "node", "permissions", "roles", "update", "delete", "updateAll", "row-select", "row-unselect"], ["mat-button", "", "data-automation-id", "permission-info-button", 3, "adf-pop-over", "target"], ["popOver", "adfPopOver"], [1, "adf-pop-over-card"], ["data-automation-id", "adf-inherited-permission", 3, "isReadOnly", "node", "permissions", "showLocation", "selectionMode", "roles"]], template: function PermissionListComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "mat-card", 0);
        ɵngcc0.ɵɵtemplate(1, PermissionListComponent_div_1_Template, 2, 2, "div", 1);
        ɵngcc0.ɵɵpipe(2, "async");
        ɵngcc0.ɵɵpipe(3, "async");
        ɵngcc0.ɵɵtemplate(4, PermissionListComponent_ng_container_4_Template, 7, 3, "ng-container", 2);
        ɵngcc0.ɵɵpipe(5, "async");
        ɵngcc0.ɵɵtemplate(6, PermissionListComponent_ng_container_6_Template, 31, 27, "ng-container", 2);
        ɵngcc0.ɵɵpipe(7, "async");
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ɵngcc0.ɵɵpipeBind1(2, 3, !ɵngcc0.ɵɵpipeBind1(3, 5, ctx.permissionList.data$) && ctx.permissionList.loading$));
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngIf", ɵngcc0.ɵɵpipeBind1(5, 7, ctx.permissionList.error$));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ɵngcc0.ɵɵpipeBind1(7, 9, ctx.permissionList.data$));
    } }, directives: function () { return [ɵngcc31.MatCard, ɵngcc4.NgIf, ɵngcc17.MatProgressSpinner, ɵngcc6.MatIcon, ɵngcc33.MatSlideToggle, ɵngcc31.MatCardContent, ɵngcc5.MatButton, ɵngcc7.MatTooltip, PermissionContainerComponent, PopOverDirective]; }, pipes: function () { return [ɵngcc4.AsyncPipe, ɵngcc8.TranslatePipe]; }, styles: [".adf-permission-card{box-sizing:border-box;display:flex!important;flex-direction:column;height:100%;overflow:hidden}.adf-permission-loader{margin-left:45%;overflow:hidden}.adf-permission-container{border:1px solid var(--theme-border-color);justify-content:space-between;padding:10px 15px}.adf-inherit-container,.adf-permission-container{align-items:center;display:flex;flex-direction:row}.adf-inherit-container-header{margin-bottom:10px;margin-top:10px}.adf-inherit-toggle{padding-left:30px}.adf-inherit-subtitle{padding-bottom:5px}.adf-permission-content-header{align-items:center;display:flex;flex-direction:row;padding:5px 15px}.adf-permission-role-column-header{height:40px;position:relative!important}.adf-permission-role-column-header .mat-form-field-infix{border:none}.adf-permission-header{display:flex;flex:1;flex-direction:column;height:100%;min-height:0;overflow:hidden}.adf-permission-list{display:flex;height:calc(100% - 63px)}.adf-local-permission-container{flex:1 1 auto;overflow:hidden}[aria-sort=Ascending] adf-user-role-column,[aria-sort=Descending] adf-user-role-column{padding-left:10px;padding-right:10px}.adf-permission-pop-over{padding-right:15px;width:100%}.adf-permission-pop-over .adf-pop-over-card{box-shadow:0 8px 9px -5px var(--theme-fg-divider),0 15px 22px 2px var(--theme-fg-divider);overflow:hidden;width:100%}"], encapsulation: 2 });
PermissionListComponent.ctorParameters = () => [
    { type: PermissionListService }
];
PermissionListComponent.propDecorators = {
    nodeId: [{ type: Input }],
    update: [{ type: Output }],
    error: [{ type: Output }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(PermissionListComponent, [{
        type: Component,
        args: [{
                selector: 'adf-permission-list',
                template: "<mat-card class=\"adf-permission-card\" id=\"adf-permission-manager-card\">\n    <div *ngIf=\"!(permissionList.data$ | async) && permissionList.loading$ | async\" class=\"adf-permission-loader\">\n        <mat-progress-spinner [color]=\"'primary'\"\n                              [mode]=\"'indeterminate'\">\n        </mat-progress-spinner>\n    </div>\n\n    <ng-container *ngIf=\"permissionList.error$ | async\">\n        <div class=\"adf-no-permission__template\" id=\"adf-permission-manager-error\">\n            <mat-icon color=\"warn\">error</mat-icon>\n            <p class=\"adf-no-permission__template--text\">{{ 'PERMISSION_MANAGER.ERROR.NOT-FOUND'| translate }}</p>\n        </div>\n    </ng-container>\n\n    <ng-container *ngIf=\"permissionList.data$ | async as model\">\n        <div class=\"adf-permission-container\" #target>\n\n            <div class=\"adf-permission-header\">\n                <span class=\"adf-inherit-container\">\n                    <h3 class=\"adf-inherit-container-header\">\n                        {{'PERMISSION_MANAGER.LABELS.INHERITED-PERMISSIONS' | translate }}\n\n                        {{ (model.node.permissions.isInheritanceEnabled ? \"PERMISSION_MANAGER.LABELS.ON\" : \"PERMISSION_MANAGER.LABELS.OFF\") | translate }}\n                    </h3>\n\n                    <mat-slide-toggle\n                        class=\"adf-inherit-toggle\"\n                        data-automation-id=\"adf-inherit-toggle-button\"\n                        [checked]=\"model.node.permissions.isInheritanceEnabled\"\n                        (change)=\"permissionList.toggleInherited($event)\">\n                    </mat-slide-toggle>\n                </span>\n\n                <span class=\"adf-inherit-subtitle\" title=\"total\">\n                    {{'PERMISSION_MANAGER.LABELS.INHERITED-SUBTITLE' | translate: { count: model.inheritedPermissions.length } }}\n                </span>\n            </div>\n\n            <button\n                mat-button\n                data-automation-id=\"permission-info-button\"\n                [adf-pop-over]=\"inheritedPermission\"\n                [target]=\"target\"\n                #popOver=\"adfPopOver\"\n                *ngIf=\"model.node.permissions.isInheritanceEnabled\">\n                {{ (popOver.open ? 'PERMISSION_MANAGER.LABELS.HIDE' : 'PERMISSION_MANAGER.LABELS.SHOW') | translate }}\n                <mat-icon *ngIf=\"popOver.open\"> keyboard_arrow_up </mat-icon>\n                <mat-icon *ngIf=\"!popOver.open\"> keyboard_arrow_down </mat-icon>\n            </button>\n        </div>\n\n        <ng-template #inheritedPermission>\n            <div class=\"adf-pop-over-card\">\n                <adf-permission-container\n                    data-automation-id=\"adf-inherited-permission\"\n                    [isReadOnly]=\"true\"\n                    [node]=\"model.node\"\n                    [permissions]=\"model.inheritedPermissions\"\n                    [showLocation]=\"true\"\n                    [selectionMode]=\"'none'\"\n                    [roles]=\"model.roles\">\n                </adf-permission-container>\n            </div>\n        </ng-template>\n\n        <mat-card-content class=\"adf-local-permission-container\">\n            <section class=\"adf-permission-content-header\">\n                <h3>{{'PERMISSION_MANAGER.LABELS.DIRECT-PERMISSIONS' | translate }}</h3>\n\n                <div class=\"adf-toolbar--spacer\"></div>\n\n                <button\n                    mat-button\n                    [matTooltip]=\"'PERMISSION_MANAGER.ACTION.ADD-PERMISSION' | translate\"\n                    (click)=\"openAddPermissionDialog()\"\n                    data-automation-id=\"adf-add-permission-button\">\n                    <mat-icon>person_add_outline</mat-icon>\n                </button>\n\n                <button\n                    mat-button\n                    [matTooltip]=\"'PERMISSION_MANAGER.ACTION.DELETE' | translate\"\n                    [disabled]=\"!selectedPermissions?.length\"\n                    (click)=\"deleteSelection()\"\n                    data-automation-id=\"adf-delete-selected-permission\">\n                    <mat-icon>delete_outline</mat-icon>\n                </button>\n            </section>\n\n            <adf-permission-container\n                class=\"adf-permission-list\"\n                data-automation-id=\"adf-locally-set-permission\"\n                [node]=\"model.node\"\n                [permissions]=\"model.localPermissions\"\n                (update)=\"updatePermission($event)\"\n                (delete)=\"deletePermission($event)\"\n                (updateAll)=\"updateAllPermission($event)\"\n                (row-select)=\"onSelect($any($event).detail.selection)\"\n                (row-unselect)=\"onSelect($any($event).detail.selection)\"\n                [roles]=\"model.roles\">\n            </adf-permission-container>\n\n        </mat-card-content>\n    </ng-container>\n</mat-card>\n",
                encapsulation: ViewEncapsulation.None,
                styles: [".adf-permission-card{box-sizing:border-box;display:flex!important;flex-direction:column;height:100%;overflow:hidden}.adf-permission-loader{margin-left:45%;overflow:hidden}.adf-permission-container{border:1px solid var(--theme-border-color);justify-content:space-between;padding:10px 15px}.adf-inherit-container,.adf-permission-container{align-items:center;display:flex;flex-direction:row}.adf-inherit-container-header{margin-bottom:10px;margin-top:10px}.adf-inherit-toggle{padding-left:30px}.adf-inherit-subtitle{padding-bottom:5px}.adf-permission-content-header{align-items:center;display:flex;flex-direction:row;padding:5px 15px}.adf-permission-role-column-header{height:40px;position:relative!important}.adf-permission-role-column-header .mat-form-field-infix{border:none}.adf-permission-header{display:flex;flex:1;flex-direction:column;height:100%;min-height:0;overflow:hidden}.adf-permission-list{display:flex;height:calc(100% - 63px)}.adf-local-permission-container{flex:1 1 auto;overflow:hidden}[aria-sort=Ascending] adf-user-role-column,[aria-sort=Descending] adf-user-role-column{padding-left:10px;padding-right:10px}.adf-permission-pop-over{padding-right:15px;width:100%}.adf-permission-pop-over .adf-pop-over-card{box-shadow:0 8px 9px -5px var(--theme-fg-divider),0 15px 22px 2px var(--theme-fg-divider);overflow:hidden;width:100%}"]
            }]
    }], function () { return [{ type: PermissionListService }]; }, { error: [{
            type: Output
        }], update: [{
            type: Output
        }], nodeId: [{
            type: Input
        }] }); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class InheritPermissionDirective {
    constructor(nodeService, contentService) {
        this.nodeService = nodeService;
        this.contentService = contentService;
        this.updated = new EventEmitter();
        this.error = new EventEmitter();
    }
    onInheritPermissionClicked() {
        this.nodeService.getNode(this.nodeId).subscribe((node) => {
            var _a, _b;
            if (this.contentService.hasAllowableOperations(node, AllowableOperationsEnum.UPDATEPERMISSIONS)) {
                const nodeBody = { permissions: { isInheritanceEnabled: (_b = !((_a = node === null || node === void 0 ? void 0 : node.permissions) === null || _a === void 0 ? void 0 : _a.isInheritanceEnabled)) !== null && _b !== void 0 ? _b : false } };
                this.nodeService.updateNode(this.nodeId, nodeBody, { include: ['permissions'] }).subscribe((nodeUpdated) => {
                    this.updated.emit(nodeUpdated);
                }, (error) => this.error.emit(error));
            }
            else {
                this.error.emit('PERMISSION_MANAGER.ERROR.NOT-ALLOWED');
            }
        });
    }
}
InheritPermissionDirective.ɵfac = function InheritPermissionDirective_Factory(t) { return new (t || InheritPermissionDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NodesApiService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ContentService)); };
InheritPermissionDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: InheritPermissionDirective, selectors: [["button", "adf-inherit-permission", ""], ["mat-button-toggle", "adf-inherit-permission", ""]], hostAttrs: ["role", "button"], hostBindings: function InheritPermissionDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function InheritPermissionDirective_click_HostBindingHandler() { return ctx.onInheritPermissionClicked(); });
    } }, inputs: { nodeId: "nodeId" }, outputs: { updated: "updated", error: "error" } });
InheritPermissionDirective.ctorParameters = () => [
    { type: NodesApiService },
    { type: ContentService }
];
InheritPermissionDirective.propDecorators = {
    nodeId: [{ type: Input }],
    updated: [{ type: Output }],
    error: [{ type: Output }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(InheritPermissionDirective, [{
        type: Directive,
        args: [{
                selector: 'button[adf-inherit-permission], mat-button-toggle[adf-inherit-permission]',
                host: {
                    'role': 'button',
                    '(click)': 'onInheritPermissionClicked()'
                }
            }]
    }], function () { return [{ type: ɵngcc1.NodesApiService }, { type: ɵngcc1.ContentService }]; }, { updated: [{
            type: Output
        }], error: [{
            type: Output
        }], nodeId: [{
            type: Input
        }] }); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const SEARCH_QUERY_TOKEN = new InjectionToken('Alfresco Search Query Token');
class SearchPermissionConfigurationService {
    constructor(queryProvider) {
        this.queryProvider = queryProvider;
    }
    generateQueryBody(searchTerm, maxResults, skipCount) {
        const defaultQueryBody = {
            query: {
                query: this.getQuery(searchTerm)
            },
            include: ['properties', 'aspectNames'],
            paging: {
                maxItems: maxResults,
                skipCount: skipCount
            },
            filterQueries: [
                { query: "TYPE:'cm:authority'" }
            ]
        };
        return defaultQueryBody;
    }
    getQuery(searchTerm) {
        let query;
        if (this.queryProvider && this.queryProvider.query) {
            query = this.queryProvider.query.replace(new RegExp(/\${([^}]+)}/g), searchTerm);
        }
        else {
            query = `(email:*${searchTerm}* OR firstName:*${searchTerm}* OR lastName:*${searchTerm}* OR displayName:*${searchTerm}* OR authorityName:*${searchTerm}* OR authorityDisplayName:*${searchTerm}*) AND ANAME:(\"0/APP.DEFAULT\")`;
        }
        return query;
    }
}
SearchPermissionConfigurationService.ɵfac = function SearchPermissionConfigurationService_Factory(t) { return new (t || SearchPermissionConfigurationService)(ɵngcc0.ɵɵinject(SEARCH_QUERY_TOKEN, 8)); };
SearchPermissionConfigurationService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: SearchPermissionConfigurationService, factory: SearchPermissionConfigurationService.ɵfac });
SearchPermissionConfigurationService.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [SEARCH_QUERY_TOKEN,] }] }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SearchPermissionConfigurationService, [{
        type: Injectable
    }], function () { return [{ type: undefined, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [SEARCH_QUERY_TOKEN]
            }] }]; }, null); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class AddPermissionPanelComponent {
    constructor() {
        this.select = new EventEmitter();
        this.searchInput = new FormControl();
        this.searchedWord = '';
        this.debounceSearch = 200;
        this.selectedItems = [];
        this.EVERYONE = new NodeEntry({ entry: { nodeType: 'cm:authorityContainer', properties: { 'cm:authorityName': 'GROUP_EVERYONE' } } });
        this.searchInput.valueChanges
            .pipe(debounceTime(this.debounceSearch))
            .subscribe((searchValue) => {
            const selectionOptions = this.matSelectionList.selectedOptions.selected.map(option => option.value);
            this.selectedItems.push(...selectionOptions);
            this.matSelectionList.deselectAll();
            this.searchedWord = searchValue;
            if (!searchValue) {
                this.search.resetResults();
            }
        });
    }
    onSelectionChange() {
        const currentSelection = this.matSelectionList.selectedOptions.selected.map(option => option.value);
        const uniqueSelection = [...currentSelection, ...this.selectedItems]
            .reduce((uniquesElements, currentElement) => {
            const isExist = uniquesElements.find(uniqueElement => uniqueElement.entry.id === currentElement.entry.id);
            if (!isExist) {
                uniquesElements.push(currentElement);
            }
            return uniquesElements;
        }, []);
        this.select.emit(uniqueSelection);
    }
    clearSearch() {
        this.searchedWord = '';
        this.selectedItems.splice(0, this.selectedItems.length);
        this.search.resetResults();
    }
}
AddPermissionPanelComponent.ɵfac = function AddPermissionPanelComponent_Factory(t) { return new (t || AddPermissionPanelComponent)(); };
AddPermissionPanelComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: AddPermissionPanelComponent, selectors: [["adf-add-permission-panel"]], viewQuery: function AddPermissionPanelComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵstaticViewQuery(_c20, true);
        ɵngcc0.ɵɵviewQuery(MatSelectionList, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.search = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.matSelectionList = _t.first);
    } }, outputs: { select: "select" }, features: [ɵngcc0.ɵɵProvidersFeature([
            { provide: SearchConfigurationService, useClass: SearchPermissionConfigurationService },
            SearchService
        ])], decls: 9, vars: 11, consts: [["floatPlaceholder", "never", 1, "adf-permission-search-input"], ["matInput", "", "id", "searchInput", "type", "text", 3, "formControl", "placeholder", "value"], ["class", "adf-permission-search-icon", "data-automation-id", "adf-permission-clear-input", "id", "adf-permission-clear-input", "matSuffix", "", 3, "click", 4, "ngIf"], ["class", "adf-permission-search-icon", "data-automation-id", "adf-permission-search-icon", "matSuffix", "", 4, "ngIf"], ["class", "adf-permission-start-message", "id", "adf-add-permission-type-search", 4, "ngIf"], ["id", "adf-add-permission-authority-results", 1, "adf-permission-result-list", 3, "searchTerm"], ["search", ""], ["data-automation-id", "adf-permission-clear-input", "id", "adf-permission-clear-input", "matSuffix", "", 1, "adf-permission-search-icon", 3, "click"], ["data-automation-id", "adf-permission-search-icon", "matSuffix", "", 1, "adf-permission-search-icon"], ["id", "adf-add-permission-type-search", 1, "adf-permission-start-message"], [1, "adf-permission-result-list-elements", 3, "keydown.control.a", "selectionChange"], ["id", "adf-add-permission-group-everyone", "disableRipple", "", 1, "adf-list-option-item", 3, "value"], ["eveyone", ""], ["id", "add-group-icon", 3, "node", "selected"], [1, "adf-result-name"], ["disableRipple", "", "class", "adf-list-option-item", 3, "value", "id", 4, "ngFor", "ngForOf"], ["disableRipple", "", 1, "adf-list-option-item", 3, "value", "id"], ["option", ""], [3, "node", "selected"], [4, "ngIf", "ngIfElse"], ["authorityName", ""], ["owner", ""]], template: function AddPermissionPanelComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "mat-form-field", 0);
        ɵngcc0.ɵɵelement(1, "input", 1);
        ɵngcc0.ɵɵpipe(2, "translate");
        ɵngcc0.ɵɵtemplate(3, AddPermissionPanelComponent_mat_icon_3_Template, 2, 0, "mat-icon", 2);
        ɵngcc0.ɵɵtemplate(4, AddPermissionPanelComponent_mat_icon_4_Template, 2, 0, "mat-icon", 3);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(5, AddPermissionPanelComponent_div_5_Template, 4, 3, "div", 4);
        ɵngcc0.ɵɵelementStart(6, "adf-search", 5, 6);
        ɵngcc0.ɵɵtemplate(8, AddPermissionPanelComponent_ng_template_8_Template, 8, 7, "ng-template");
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵpropertyInterpolate("placeholder", ɵngcc0.ɵɵpipeBind1(2, 9, "PERMISSION_MANAGER.ADD-PERMISSION.SEARCH"));
        ɵngcc0.ɵɵproperty("formControl", ctx.searchInput)("value", ctx.searchedWord);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", (ctx.searchedWord == null ? null : ctx.searchedWord.length) > 0);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", (ctx.searchedWord == null ? null : ctx.searchedWord.length) === 0);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", (ctx.searchedWord == null ? null : ctx.searchedWord.length) === 0);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵclassProp("adf-permission-result-list-search", ctx.searchedWord.length === 0);
        ɵngcc0.ɵɵproperty("searchTerm", ctx.searchedWord);
    } }, directives: function () { return [ɵngcc11.MatFormField, ɵngcc13.MatInput, ɵngcc9.DefaultValueAccessor, ɵngcc9.NgControlStatus, ɵngcc9.FormControlDirective, ɵngcc4.NgIf, SearchComponent, ɵngcc6.MatIcon, ɵngcc11.MatSuffix, ɵngcc14.MatSelectionList, ɵngcc14.MatListOption, UserIconColumnComponent, ɵngcc4.NgForOf]; }, pipes: function () { return [ɵngcc8.TranslatePipe]; }, styles: [".adf-permission-result-list{border:2px solid var(--theme-border-color);display:flex;height:calc(100% - 75px);overflow:auto}.adf-permission-result-list-elements{width:100%}.adf-permission-result-list-search{display:none}.adf-permission-start-message{border:2px solid var(--theme-border-color);height:calc(100% - 75px);overflow:auto}.adf-permission-no-result,.adf-permission-start-message{align-items:center;display:flex;justify-content:space-around}.adf-permission-no-result,.adf-permission-search-input{width:100%}.adf-permission-search-input-icon{color:var(--theme-selected-button-bg-color);cursor:pointer}.adf-permission-search-input-icon:hover{color:var(--theme-fg-base-color)}.adf-list-option-item mat-pseudo-checkbox{display:none}.adf-list-option-item .mat-list-text{align-items:center;display:flex;flex-direction:row!important}.adf-list-option-item .mat-list-text .adf-result-name{padding-left:16px!important}.adf-permission-action[disabled]{opacity:.6}.adf-permission-action:enabled{color:var(--theme-primary-color)}"], encapsulation: 2 });
AddPermissionPanelComponent.ctorParameters = () => [];
AddPermissionPanelComponent.propDecorators = {
    search: [{ type: ViewChild, args: ['search', { static: true },] }],
    matSelectionList: [{ type: ViewChild, args: [MatSelectionList, { static: false },] }],
    select: [{ type: Output }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AddPermissionPanelComponent, [{
        type: Component,
        args: [{
                selector: 'adf-add-permission-panel',
                template: "<mat-form-field floatPlaceholder=\"never\"\n                class=\"adf-permission-search-input\">\n    <input matInput\n           id=\"searchInput\"\n           [formControl]=\"searchInput\"\n           type=\"text\"\n           placeholder=\"{{'PERMISSION_MANAGER.ADD-PERMISSION.SEARCH' | translate}}\"\n           [value]=\"searchedWord\">\n\n    <mat-icon *ngIf=\"searchedWord?.length > 0\"\n              class=\"adf-permission-search-icon\"\n              data-automation-id=\"adf-permission-clear-input\"\n              id=\"adf-permission-clear-input\"\n              matSuffix\n              (click)=\"clearSearch()\">clear\n    </mat-icon>\n\n    <mat-icon *ngIf=\"searchedWord?.length === 0\"\n              class=\"adf-permission-search-icon\"\n              data-automation-id=\"adf-permission-search-icon\"\n              matSuffix>search\n    </mat-icon>\n</mat-form-field>\n\n<div *ngIf=\"searchedWord?.length === 0\"\n     class=\"adf-permission-start-message\"\n     id=\"adf-add-permission-type-search\">\n    <span>{{'PERMISSION_MANAGER.ADD-PERMISSION.TYPE-MESSAGE' | translate}}</span>\n</div>\n\n<adf-search #search\n            [searchTerm]=\"searchedWord\"\n            id=\"adf-add-permission-authority-results\"\n            class=\"adf-permission-result-list\"\n            [class.adf-permission-result-list-search]=\"searchedWord.length === 0\">\n    <ng-template let-data>\n        <mat-selection-list class=\"adf-permission-result-list-elements\" (keydown.control.a)=\"onSelectionChange()\"\n                            (selectionChange)=\"onSelectionChange()\">\n            <mat-list-option id=\"adf-add-permission-group-everyone\"\n                             class=\"adf-list-option-item\"\n                             #eveyone\n                             disableRipple\n                             [value]=\"EVERYONE\">\n                <adf-user-icon-column [node]=\"EVERYONE\" id=\"add-group-icon\" [selected]=\"eveyone.selected\"></adf-user-icon-column>\n                <p class=\"adf-result-name\">\n                    {{'PERMISSION_MANAGER.ADD-PERMISSION.EVERYONE' | translate}}\n                </p>\n            </mat-list-option>\n\n            <mat-list-option *ngFor=\"let item of data?.list?.entries; let idx = index\"\n                             disableRipple\n                             [value]=\"item\"\n                             class=\"adf-list-option-item\"\n                             id=\"result_option_{{idx}}\"\n                             #option>\n                <adf-user-icon-column [node]=\"item\" [selected]=\"option.selected\"></adf-user-icon-column>\n                <p class=\"adf-result-name\">\n                    <ng-container *ngIf=\"item.entry?.properties['cm:authorityDisplayName']; else authorityName\">\n                        {{item.entry.properties['cm:authorityDisplayName']}}\n                    </ng-container>\n                    <ng-template #authorityName>\n                        <ng-container *ngIf=\"item.entry?.properties['cm:authorityName']; else owner\">\n                            {{item.entry.properties['cm:authorityName']}}\n                        </ng-container>\n                    </ng-template>\n                    <ng-template #owner>\n                        {{item.entry?.properties['cm:firstName'] ? item.entry?.properties['cm:firstName'] : '' }}\n                        {{item.entry?.properties['cm:lastName'] ? item.entry?.properties['cm:lastName']: ''}}\n                    </ng-template>\n                </p>\n            </mat-list-option>\n        </mat-selection-list>\n    </ng-template>\n</adf-search>\n",
                encapsulation: ViewEncapsulation.None,
                providers: [
                    { provide: SearchConfigurationService, useClass: SearchPermissionConfigurationService },
                    SearchService
                ],
                styles: [".adf-permission-result-list{border:2px solid var(--theme-border-color);display:flex;height:calc(100% - 75px);overflow:auto}.adf-permission-result-list-elements{width:100%}.adf-permission-result-list-search{display:none}.adf-permission-start-message{border:2px solid var(--theme-border-color);height:calc(100% - 75px);overflow:auto}.adf-permission-no-result,.adf-permission-start-message{align-items:center;display:flex;justify-content:space-around}.adf-permission-no-result,.adf-permission-search-input{width:100%}.adf-permission-search-input-icon{color:var(--theme-selected-button-bg-color);cursor:pointer}.adf-permission-search-input-icon:hover{color:var(--theme-fg-base-color)}.adf-list-option-item mat-pseudo-checkbox{display:none}.adf-list-option-item .mat-list-text{align-items:center;display:flex;flex-direction:row!important}.adf-list-option-item .mat-list-text .adf-result-name{padding-left:16px!important}.adf-permission-action[disabled]{opacity:.6}.adf-permission-action:enabled{color:var(--theme-primary-color)}"]
            }]
    }], function () { return []; }, { select: [{
            type: Output
        }], search: [{
            type: ViewChild,
            args: ['search', { static: true }]
        }], matSelectionList: [{
            type: ViewChild,
            args: [MatSelectionList, { static: false }]
        }] }); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class AddPermissionComponent {
    constructor(nodePermissionService, contentService) {
        this.nodePermissionService = nodePermissionService;
        this.contentService = contentService;
        this.success = new EventEmitter();
        this.error = new EventEmitter();
        this.selectedItems = [];
    }
    ngOnInit() {
        this.nodePermissionService.getNodeWithRoles(this.nodeId).subscribe(({ node, roles }) => {
            this.currentNode = node;
            this.currentNodeRoles = roles;
        });
    }
    onSelect(selection) {
        this.selectedItems = selection;
    }
    isAddEnabled() {
        return this.contentService.hasAllowableOperations(this.currentNode, AllowableOperationsEnum.UPDATEPERMISSIONS) &&
            this.selectedItems.length !== 0;
    }
    applySelection() {
        if (this.contentService.hasAllowableOperations(this.currentNode, AllowableOperationsEnum.UPDATEPERMISSIONS)) {
            const permissions = this.transformNodeToPermissionElement(this.selectedItems, this.currentNodeRoles[0].role);
            this.nodePermissionService.updateNodePermissions(this.nodeId, permissions)
                .subscribe((node) => {
                this.success.emit(node);
            }, (error) => {
                this.error.emit(error);
            });
        }
    }
    transformNodeToPermissionElement(nodes, role) {
        return nodes.map((node) => {
            var _a;
            return {
                'authorityId': (_a = node.entry.properties['cm:authorityName']) !== null && _a !== void 0 ? _a : node.entry.properties['cm:userName'],
                'name': role,
                'accessStatus': 'ALLOWED'
            };
        });
    }
}
AddPermissionComponent.ɵfac = function AddPermissionComponent_Factory(t) { return new (t || AddPermissionComponent)(ɵngcc0.ɵɵdirectiveInject(NodePermissionService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ContentService)); };
AddPermissionComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: AddPermissionComponent, selectors: [["adf-add-permission"]], inputs: { nodeId: "nodeId" }, outputs: { success: "success", error: "error" }, decls: 5, vars: 4, consts: [[3, "select"], ["id", "adf-add-permission-actions"], ["mat-button", "", "id", "adf-add-permission-action-button", 1, "adf-permission-action", 3, "disabled", "click"]], template: function AddPermissionComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "adf-add-permission-panel", 0);
        ɵngcc0.ɵɵlistener("select", function AddPermissionComponent_Template_adf_add_permission_panel_select_0_listener($event) { return ctx.onSelect($event); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(1, "div", 1);
        ɵngcc0.ɵɵelementStart(2, "button", 2);
        ɵngcc0.ɵɵlistener("click", function AddPermissionComponent_Template_button_click_2_listener() { return ctx.applySelection(); });
        ɵngcc0.ɵɵtext(3);
        ɵngcc0.ɵɵpipe(4, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("disabled", !ctx.isAddEnabled());
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(4, 2, "PERMISSION_MANAGER.ADD-PERMISSION.ADD-ACTION"), " ");
    } }, directives: [AddPermissionPanelComponent, ɵngcc5.MatButton], pipes: [ɵngcc8.TranslatePipe], styles: [".adf-permission-action[disabled]{opacity:.6}.adf-permission-action:enabled{color:var(--theme-primary-color)}"], encapsulation: 2 });
AddPermissionComponent.ctorParameters = () => [
    { type: NodePermissionService },
    { type: ContentService }
];
AddPermissionComponent.propDecorators = {
    nodeId: [{ type: Input }],
    success: [{ type: Output }],
    error: [{ type: Output }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AddPermissionComponent, [{
        type: Component,
        args: [{
                selector: 'adf-add-permission',
                template: "<adf-add-permission-panel\n    (select)=\"onSelect($event)\">\n</adf-add-permission-panel>\n<div id=\"adf-add-permission-actions\">\n   <button mat-button\n          id=\"adf-add-permission-action-button\"\n          class=\"adf-permission-action\"\n          [disabled]=\"!isAddEnabled()\"\n          (click)=\"applySelection()\">\n     {{'PERMISSION_MANAGER.ADD-PERMISSION.ADD-ACTION' | translate}}\n    </button>\n</div>\n",
                encapsulation: ViewEncapsulation.None,
                styles: [".adf-permission-action[disabled]{opacity:.6}.adf-permission-action:enabled{color:var(--theme-primary-color)}"]
            }]
    }], function () { return [{ type: NodePermissionService }, { type: ɵngcc1.ContentService }]; }, { success: [{
            type: Output
        }], error: [{
            type: Output
        }], nodeId: [{
            type: Input
        }] }); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class UserIconColumnComponent {
    constructor(nodePermissionService) {
        this.nodePermissionService = nodePermissionService;
        this.selected = false;
        this.displayText$ = new BehaviorSubject(null);
        this.group = false;
    }
    get isSelected() {
        var _a, _b;
        return ((_b = (_a = this.context) === null || _a === void 0 ? void 0 : _a.row) === null || _b === void 0 ? void 0 : _b.isSelected) || this.selected;
    }
    ngOnInit() {
        var _a, _b;
        if (this.context) {
            const { person, group, authorityId } = (_b = (_a = this.context.row.obj) === null || _a === void 0 ? void 0 : _a.entry) !== null && _b !== void 0 ? _b : this.context.row.obj;
            this.group = this.isGroup(group, authorityId);
            this.displayText$.next(person || group || { displayName: authorityId });
        }
        if (this.node) {
            const { person, group } = this.nodePermissionService.transformNodeToUserPerson(this.node.entry);
            this.group = this.isGroup(group, null);
            this.displayText$.next(person || group);
        }
    }
    isGroup(group, authorityId) {
        return !!group || (authorityId === null || authorityId === void 0 ? void 0 : authorityId.startsWith('GROUP_')) || (authorityId === null || authorityId === void 0 ? void 0 : authorityId.startsWith('ROLE_'));
    }
}
UserIconColumnComponent.ɵfac = function UserIconColumnComponent_Factory(t) { return new (t || UserIconColumnComponent)(ɵngcc0.ɵɵdirectiveInject(NodePermissionService)); };
UserIconColumnComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: UserIconColumnComponent, selectors: [["adf-user-icon-column"]], hostAttrs: [1, "adf-user-icon-column", "adf-datatable-content-cell"], inputs: { selected: "selected", context: "context", node: "node" }, decls: 2, vars: 2, consts: [["class", "adf-cell-value", 4, "ngIf"], [1, "adf-cell-value"], [4, "ngIf"], ["class", "adf-group-icon", 4, "ngIf"], [3, "outerHTML", 4, "ngIf"], [1, "adf-group-icon"], [3, "outerHTML"], ["svgIcon", "selected", 1, "adf-people-select-icon", "adf-datatable-selected"]], template: function UserIconColumnComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, UserIconColumnComponent_div_0_Template, 3, 4, "div", 0);
        ɵngcc0.ɵɵtemplate(1, UserIconColumnComponent_div_1_Template, 2, 0, "div", 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngIf", !ctx.isSelected);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.isSelected);
    } }, directives: [ɵngcc4.NgIf, ɵngcc6.MatIcon], pipes: [ɵngcc4.AsyncPipe, ɵngcc1.InitialUsernamePipe], styles: [".adf-people-initial{align-items:center;display:flex;font-size:18px;height:40px;justify-content:center;text-transform:uppercase;width:40px}.adf-group-icon,.adf-people-initial{background:var(--theme-primary-color);border-radius:50%;color:var(--theme-primary-color-default-contrast)!important;font-weight:bolder}.adf-group-icon{font-size:20px;height:20px!important;padding:10px;width:20px!important}.adf-people-select-icon{margin:0!important}.adf-people-select-icon svg{fill:var(--theme-accent-color);height:40px;width:40px}"], encapsulation: 2 });
UserIconColumnComponent.ctorParameters = () => [
    { type: NodePermissionService }
];
UserIconColumnComponent.propDecorators = {
    context: [{ type: Input }],
    node: [{ type: Input }],
    selected: [{ type: Input }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(UserIconColumnComponent, [{
        type: Component,
        args: [{
                selector: 'adf-user-icon-column',
                template: `
        <div class="adf-cell-value" [attr.id]="group ? 'group-icon' : 'person-icon'"  *ngIf="!isSelected">
            <ng-container *ngIf="displayText$ | async as user">
                <mat-icon *ngIf="group" class="adf-group-icon">people_alt_outline</mat-icon>
                <div *ngIf="!group" [outerHTML]="user | usernameInitials: 'adf-people-initial'"></div>
            </ng-container>
        </div>
        <div class="adf-cell-value" *ngIf="isSelected">
            <mat-icon class="adf-people-select-icon adf-datatable-selected" svgIcon="selected"></mat-icon>
        </div>
    `,
                encapsulation: ViewEncapsulation.None,
                host: { class: 'adf-user-icon-column adf-datatable-content-cell' },
                styles: [".adf-people-initial{align-items:center;display:flex;font-size:18px;height:40px;justify-content:center;text-transform:uppercase;width:40px}.adf-group-icon,.adf-people-initial{background:var(--theme-primary-color);border-radius:50%;color:var(--theme-primary-color-default-contrast)!important;font-weight:bolder}.adf-group-icon{font-size:20px;height:20px!important;padding:10px;width:20px!important}.adf-people-select-icon{margin:0!important}.adf-people-select-icon svg{fill:var(--theme-accent-color);height:40px;width:40px}"]
            }]
    }], function () { return [{ type: NodePermissionService }]; }, { selected: [{
            type: Input
        }], context: [{
            type: Input
        }], node: [{
            type: Input
        }] }); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class UserNameColumnComponent {
    constructor(nodePermissionService) {
        this.nodePermissionService = nodePermissionService;
        this.displayText$ = new BehaviorSubject('');
        this.subTitleText$ = new BehaviorSubject('');
    }
    ngOnInit() {
        var _a, _b;
        if (this.context != null) {
            const { person, group, authorityId } = (_b = (_a = this.context.row.obj) === null || _a === void 0 ? void 0 : _a.entry) !== null && _b !== void 0 ? _b : this.context.row.obj;
            const permissionGroup = authorityId ? { displayName: authorityId } : null;
            this.updatePerson(person);
            this.updateGroup(group || permissionGroup);
        }
        if (this.node) {
            const { person, group } = this.nodePermissionService.transformNodeToUserPerson(this.node.entry);
            this.updatePerson(person);
            this.updateGroup(group);
        }
    }
    updatePerson(person) {
        var _a, _b, _c;
        if (person) {
            this.displayText$.next(`${(_a = person.firstName) !== null && _a !== void 0 ? _a : ''} ${(_b = person.lastName) !== null && _b !== void 0 ? _b : ''}`);
            this.subTitleText$.next((_c = person.email) !== null && _c !== void 0 ? _c : '');
        }
    }
    updateGroup(group) {
        if (group) {
            this.displayText$.next(group.displayName);
        }
    }
}
UserNameColumnComponent.ɵfac = function UserNameColumnComponent_Factory(t) { return new (t || UserNameColumnComponent)(ɵngcc0.ɵɵdirectiveInject(NodePermissionService)); };
UserNameColumnComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: UserNameColumnComponent, selectors: [["adf-user-name-column"]], hostAttrs: [1, "adf-user-name-column", "adf-datatable-content-cell", "adf-expand-cell-5", "adf-ellipsis-cell"], inputs: { context: "context", node: "node" }, decls: 9, vars: 12, consts: [[1, "adf-ellipsis-cell"], [1, "adf-user-name-column", 3, "title"], ["class", "adf-user-email-column", 3, "title", 4, "ngIf"], [1, "adf-user-email-column", 3, "title"]], template: function UserNameColumnComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵpipe(1, "async");
        ɵngcc0.ɵɵelementStart(2, "span", 1);
        ɵngcc0.ɵɵpipe(3, "async");
        ɵngcc0.ɵɵtext(4);
        ɵngcc0.ɵɵpipe(5, "async");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(6, "br");
        ɵngcc0.ɵɵtemplate(7, UserNameColumnComponent_span_7_Template, 4, 6, "span", 2);
        ɵngcc0.ɵɵpipe(8, "async");
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵattribute("data-automation-id", ɵngcc0.ɵɵpipeBind1(1, 4, ctx.displayText$));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(3, 6, ctx.displayText$));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(5, 8, ctx.displayText$), "");
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngIf", ɵngcc0.ɵɵpipeBind1(8, 10, ctx.subTitleText$));
    } }, directives: [ɵngcc4.NgIf], pipes: [ɵngcc4.AsyncPipe], styles: [".adf-user-name-column{font-size:14px;font-weight:600}.adf-user-email-column{color:var(--theme-foreground-text-color);font-size:14px;letter-spacing:-.2px;line-height:1.43}"], encapsulation: 2 });
UserNameColumnComponent.ctorParameters = () => [
    { type: NodePermissionService }
];
UserNameColumnComponent.propDecorators = {
    context: [{ type: Input }],
    node: [{ type: Input }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(UserNameColumnComponent, [{
        type: Component,
        args: [{
                selector: 'adf-user-name-column',
                template: `
        <div class="adf-ellipsis-cell" [attr.data-automation-id]="displayText$ | async">
            <span class="adf-user-name-column" title="{{ displayText$ | async }}"> {{ displayText$ | async }}</span>
            <br/>
            <span class="adf-user-email-column" title="{{ subTitleText$ | async }}" *ngIf="subTitleText$ | async">
                {{ subTitleText$ | async }}
            </span>
        </div>
    `,
                encapsulation: ViewEncapsulation.None,
                host: { class: 'adf-user-name-column adf-datatable-content-cell adf-expand-cell-5 adf-ellipsis-cell' },
                styles: [".adf-user-name-column{font-size:14px;font-weight:600}.adf-user-email-column{color:var(--theme-foreground-text-color);font-size:14px;letter-spacing:-.2px;line-height:1.43}"]
            }]
    }], function () { return [{ type: NodePermissionService }]; }, { context: [{
            type: Input
        }], node: [{
            type: Input
        }] }); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class UserRoleColumnComponent {
    constructor() {
        this.readonly = false;
        this.placeholder = 'PERMISSION_MANAGER.LABELS.SELECT-ROLE';
        this.roleChanged = new EventEmitter();
    }
    onRoleChanged(newRole) {
        this.value = newRole;
        this.roleChanged.emit(newRole);
    }
}
UserRoleColumnComponent.ɵfac = function UserRoleColumnComponent_Factory(t) { return new (t || UserRoleColumnComponent)(); };
UserRoleColumnComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: UserRoleColumnComponent, selectors: [["adf-user-role-column"]], hostAttrs: [1, "adf-user-role-column", "adf-datatable-content-cell", "adf-expand-cell-4"], inputs: { readonly: "readonly", placeholder: "placeholder", value: "value", roles: "roles" }, outputs: { roleChanged: "roleChanged" }, decls: 2, vars: 2, consts: [["floatLabel", "never", "class", "adf-role-selector-field", 4, "ngIf"], ["class", "adf-datatable-cell-value adf-readonly-role", 3, "title", 4, "ngIf"], ["floatLabel", "never", 1, "adf-role-selector-field"], [3, "placeholder", "value", "click", "selectionChange"], [3, "value", 4, "ngFor", "ngForOf"], [3, "value"], [1, "adf-datatable-cell-value", "adf-readonly-role", 3, "title"]], template: function UserRoleColumnComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, UserRoleColumnComponent_mat_form_field_0_Template, 4, 5, "mat-form-field", 0);
        ɵngcc0.ɵɵtemplate(1, UserRoleColumnComponent_span_1_Template, 4, 6, "span", 1);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngIf", !ctx.readonly);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.readonly);
    } }, directives: [ɵngcc4.NgIf, ɵngcc11.MatFormField, ɵngcc27.MatSelect, ɵngcc4.NgForOf, ɵngcc19.MatOption], pipes: [ɵngcc8.TranslatePipe, ɵngcc1.LocalizedRolePipe], styles: [".adf-role-selector-field[_ngcontent-%COMP%] {\n            width: 100%;\n            .mat-form-field {\n                width: 100%;\n                max-width: 200px;\n            }\n        }\n        .adf-readonly-role[_ngcontent-%COMP%] {\n            padding-left: 0 !important;\n        }"] });
UserRoleColumnComponent.propDecorators = {
    roles: [{ type: Input }],
    value: [{ type: Input }],
    readonly: [{ type: Input }],
    placeholder: [{ type: Input }],
    roleChanged: [{ type: Output }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(UserRoleColumnComponent, [{
        type: Component,
        args: [{
                selector: 'adf-user-role-column',
                template: `
      <mat-form-field floatLabel="never" class="adf-role-selector-field" *ngIf="!readonly">
          <mat-select
              (click)="$event.stopPropagation()"
              [placeholder]="placeholder | translate"
              [value]="value"
              (selectionChange)="onRoleChanged($event.value)">
              <mat-option *ngFor="let role of roles" [value]="role.role">
                  {{ role.label | adfLocalizedRole }}
              </mat-option>
          </mat-select>
      </mat-form-field>

      <span class="adf-datatable-cell-value adf-readonly-role" [title]="value | adfLocalizedRole" *ngIf="readonly">
          {{value | adfLocalizedRole}}
      </span>
  `,
                host: { class: 'adf-user-role-column adf-datatable-content-cell adf-expand-cell-4' },
                styles: [`.adf-role-selector-field {
            width: 100%;
            .mat-form-field {
                width: 100%;
                max-width: 200px;
            }
        }
        .adf-readonly-role {
            padding-left: 0 !important;
        }
        `]
            }]
    }], function () { return []; }, { readonly: [{
            type: Input
        }], placeholder: [{
            type: Input
        }], roleChanged: [{
            type: Output
        }], value: [{
            type: Input
        }], roles: [{
            type: Input
        }] }); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class NodePathColumnComponent {
    constructor() {
        this.displayText$ = new BehaviorSubject('');
    }
    ngOnInit() {
        this.updateValue();
    }
    updateValue() {
        this.displayText$.next(this.node.path.name);
    }
}
NodePathColumnComponent.ɵfac = function NodePathColumnComponent_Factory(t) { return new (t || NodePathColumnComponent)(); };
NodePathColumnComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: NodePathColumnComponent, selectors: [["adf-node-path-column"]], hostAttrs: [1, "adf-node-path-column", "adf-datatable-content-cell"], inputs: { node: "node" }, decls: 4, vars: 6, consts: [[1, "adf-user-name-column", "adf-datatable-cell-value", 3, "title"]], template: function NodePathColumnComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "span", 0);
        ɵngcc0.ɵɵpipe(1, "async");
        ɵngcc0.ɵɵtext(2);
        ɵngcc0.ɵɵpipe(3, "async");
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵpropertyInterpolate("title", ɵngcc0.ɵɵpipeBind1(1, 2, ctx.displayText$));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(3, 4, ctx.displayText$), " ");
    } }, pipes: [ɵngcc4.AsyncPipe], encapsulation: 2 });
NodePathColumnComponent.propDecorators = {
    node: [{ type: Input }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NodePathColumnComponent, [{
        type: Component,
        args: [{
                selector: 'adf-node-path-column',
                template: `
        <span class="adf-user-name-column adf-datatable-cell-value"  title="{{ displayText$ | async }}">
            {{ displayText$ | async }}
        </span>
    `,
                host: { class: 'adf-node-path-column adf-datatable-content-cell' }
            }]
    }], function () { return []; }, { node: [{
            type: Input
        }] }); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class PermissionContainerComponent {
    constructor() {
        this.permissions = [];
        this.isReadOnly = false;
        this.showLocation = false;
        this.selectionMode = 'multiple';
        this.update = new EventEmitter();
        this.updateAll = new EventEmitter();
        this.delete = new EventEmitter();
        this.error = new EventEmitter();
    }
    ngOnChanges() {
        this.bulkSelectionRole = '';
    }
    updateRole(role, permission) {
        this.update.emit({ role, permission });
    }
    bulkRoleUpdate(role) {
        this.updateAll.emit(role);
    }
    removePermission(event, permissionRow) {
        event.stopPropagation();
        this.delete.emit(permissionRow);
    }
}
PermissionContainerComponent.ɵfac = function PermissionContainerComponent_Factory(t) { return new (t || PermissionContainerComponent)(); };
PermissionContainerComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: PermissionContainerComponent, selectors: [["adf-permission-container"]], inputs: { permissions: "permissions", isReadOnly: "isReadOnly", showLocation: "showLocation", selectionMode: "selectionMode", node: "node", roles: "roles" }, outputs: { update: "update", updateAll: "updateAll", delete: "delete", error: "error" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 15, vars: 14, consts: [["id", "adf-permission-display-container", 1, "adf-datatable-permission", 3, "rows", "stickyHeader", "selectionMode"], ["key", "$thumbunail", 1, "adf-datatable-cell--image", "adf-authority-icon-column", 3, "sortable"], ["key", "authorityId", 1, "adf-ellipsis-cell", "adf-expand-cell-5", "adf-authorityId-column", 3, "title"], ["class", "adf-ellipsis-cell adf-expand-cell-5 adf-authorityId-column", "title", "PERMISSION_MANAGER.COLUMN.LOCATION", "key", "location", 4, "ngIf"], ["title", "PERMISSION_MANAGER.PERMISSION_DISPLAY.ROLE", "key", "name", 1, "adf-ellipsis-cell", "adf-expand-cell-4", 3, "sortable"], [4, "ngIf"], ["class", "adf-datatable-cell adf-delete-permission-column", "key", "", 3, "sortable", 4, "ngIf"], [3, "context"], ["title", "PERMISSION_MANAGER.COLUMN.LOCATION", "key", "location", 1, "adf-ellipsis-cell", "adf-expand-cell-5", "adf-authorityId-column"], [3, "node"], ["id", "adf-select-role-permission", 3, "readonly", "placeholder", "value", "roles", "roleChanged"], ["placeholder", "PERMISSION_MANAGER.COLUMN.BULK-ROLE", "id", "adf-bulk-select-role-permission", 1, "adf-permission-role-column-header", 3, "roles", "value", "roleChanged"], ["key", "", 1, "adf-datatable-cell", "adf-delete-permission-column", 3, "sortable"], ["mat-icon-button", "", 3, "disabled", "click"], ["id", "adf-no-permissions-template", "icon", "supervisor_account", 3, "title", "subtitle"]], template: function PermissionContainerComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "adf-datatable", 0);
        ɵngcc0.ɵɵelementStart(1, "data-columns");
        ɵngcc0.ɵɵelementStart(2, "data-column", 1);
        ɵngcc0.ɵɵtemplate(3, PermissionContainerComponent_ng_template_3_Template, 1, 1, "ng-template");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(4, "data-column", 2);
        ɵngcc0.ɵɵpipe(5, "translate");
        ɵngcc0.ɵɵtemplate(6, PermissionContainerComponent_ng_template_6_Template, 1, 1, "ng-template");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtext(7, "d ");
        ɵngcc0.ɵɵtemplate(8, PermissionContainerComponent_data_column_8_Template, 2, 0, "data-column", 3);
        ɵngcc0.ɵɵelementStart(9, "data-column", 4);
        ɵngcc0.ɵɵtemplate(10, PermissionContainerComponent_ng_template_10_Template, 1, 4, "ng-template");
        ɵngcc0.ɵɵtemplate(11, PermissionContainerComponent_adf_data_column_header_11_Template, 2, 0, "adf-data-column-header", 5);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(12, PermissionContainerComponent_data_column_12_Template, 2, 1, "data-column", 6);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(13, "adf-no-content-template");
        ɵngcc0.ɵɵtemplate(14, PermissionContainerComponent_ng_template_14_Template, 3, 6, "ng-template");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("rows", ctx.permissions)("stickyHeader", true)("selectionMode", ctx.selectionMode);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("sortable", false);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("title", ɵngcc0.ɵɵpipeBind2(5, 9, "PERMISSION_MANAGER.COLUMN.NAME", ɵngcc0.ɵɵpureFunction1(12, _c0, ctx.permissions.length)));
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵproperty("ngIf", ctx.node && ctx.showLocation);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("sortable", false);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.isReadOnly);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.isReadOnly);
    } }, directives: [ɵngcc1.DataTableComponent, ɵngcc1.DataColumnListComponent, ɵngcc1.DataColumnComponent, ɵngcc4.NgIf, ɵngcc1.NoContentTemplateDirective, UserIconColumnComponent, UserNameColumnComponent, NodePathColumnComponent, UserRoleColumnComponent, ɵngcc1.DateColumnHeaderComponent, ɵngcc5.MatButton, ɵngcc6.MatIcon, ɵngcc1.EmptyContentComponent], pipes: [ɵngcc8.TranslatePipe], styles: [".adf-datatable-permission{display:flex;min-width:450px;width:100%}.adf-datatable-permission.adf-datatable{overflow:hidden}.adf-datatable-permission.adf-datatable .adf-delete-permission-column{min-width:80px}.adf-datatable-permission.adf-datatable .adf-delete-permission-column .adf-cell-value{padding-right:10px;place-content:flex-end;width:80px}.adf-datatable-permission.adf-datatable .adf-authorityId-column{flex:40%}.adf-datatable-permission.adf-datatable .adf-authority-icon-column{min-width:40px}.adf-datatable-permission.adf-datatable .adf-datatable-selected>svg{height:40px;width:40px}"], encapsulation: 2 });
PermissionContainerComponent.propDecorators = {
    node: [{ type: Input }],
    permissions: [{ type: Input }],
    roles: [{ type: Input }],
    isReadOnly: [{ type: Input }],
    showLocation: [{ type: Input }],
    selectionMode: [{ type: Input }],
    update: [{ type: Output }],
    updateAll: [{ type: Output }],
    delete: [{ type: Output }],
    error: [{ type: Output }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(PermissionContainerComponent, [{
        type: Component,
        args: [{
                selector: 'adf-permission-container',
                template: "<adf-datatable class=\"adf-datatable-permission\"\n               id=\"adf-permission-display-container\"\n               [rows]=\"permissions\"\n               [stickyHeader]=\"true\"\n               [selectionMode]=\"selectionMode\">\n\n    <data-columns>\n        <data-column class=\"adf-datatable-cell--image adf-authority-icon-column\" key=\"$thumbunail\" [sortable]=\"false\">\n            <ng-template let-context>\n                <adf-user-icon-column [context]=\"context\"></adf-user-icon-column>\n            </ng-template>\n        </data-column>\n\n        <data-column class=\"adf-ellipsis-cell adf-expand-cell-5 adf-authorityId-column\"\n                     [title]=\"'PERMISSION_MANAGER.COLUMN.NAME' | translate:{count:permissions.length}\"\n                     key=\"authorityId\">\n            <ng-template let-context>\n                <adf-user-name-column [context]=\"context\"></adf-user-name-column>\n            </ng-template>\n        </data-column>d\n\n        <data-column class=\"adf-ellipsis-cell adf-expand-cell-5 adf-authorityId-column\"\n                     title=\"PERMISSION_MANAGER.COLUMN.LOCATION\"\n                     key=\"location\"\n                     *ngIf=\"node && showLocation\">\n            <ng-template>\n                <adf-node-path-column [node]=\"node\"></adf-node-path-column>\n            </ng-template>\n        </data-column>\n\n        <data-column\n            class=\"adf-ellipsis-cell adf-expand-cell-4\"\n            title=\"PERMISSION_MANAGER.PERMISSION_DISPLAY.ROLE\"\n            key=\"name\"\n            [sortable]=\"false\">\n            <ng-template let-entry=\"$implicit\">\n                <adf-user-role-column [readonly]=\"entry.row.obj.readonly || isReadOnly\"\n                                      [placeholder]=\"entry.data.getValue(entry.row, entry.col)\"\n                                      [value]=\"entry.data.getValue(entry.row, entry.col)\"\n                                      [roles]=\"roles\"\n                                      id=\"adf-select-role-permission\"\n                                      (roleChanged)=\"updateRole($event, entry.row.obj)\">\n                </adf-user-role-column>\n            </ng-template>\n\n            <adf-data-column-header *ngIf=\"!isReadOnly\">\n                <ng-template>\n                    <adf-user-role-column class=\"adf-permission-role-column-header\"\n                                          placeholder=\"PERMISSION_MANAGER.COLUMN.BULK-ROLE\"\n                                          [roles]=\"roles\"\n                                          [value]=\"bulkSelectionRole\"\n                                          id=\"adf-bulk-select-role-permission\"\n                                          (roleChanged)=\"bulkRoleUpdate($event)\">\n                    </adf-user-role-column>\n                </ng-template>\n            </adf-data-column-header>\n        </data-column>\n\n        <data-column class=\"adf-datatable-cell adf-delete-permission-column\" key=\"\" *ngIf=\"!isReadOnly\" [sortable]=\"false\">\n            <ng-template let-entry=\"$implicit\">\n                <button mat-icon-button\n                        [disabled]=\"entry.row.obj.readonly\"\n                        (click)=\"removePermission($event, entry.row.obj)\"\n                        [attr.data-automation-id]=\"'adf-delete-permission-button-' + entry.row.obj.authorityId\">\n                    <mat-icon>delete_outline</mat-icon>\n                </button>\n            </ng-template>\n        </data-column>\n    </data-columns>\n\n    <adf-no-content-template>\n        <ng-template>\n            <adf-empty-content\n                id=\"adf-no-permissions-template\"\n                icon=\"supervisor_account\"\n                [title]=\"'PERMISSION_MANAGER.MESSAGE.EMPTY-PERMISSION' | translate\"\n                [subtitle]=\"'PERMISSION_MANAGER.MESSAGE.EMPTY-SUBTITLE' | translate\">\n            </adf-empty-content>\n        </ng-template>\n    </adf-no-content-template>\n\n</adf-datatable>\n",
                encapsulation: ViewEncapsulation.None,
                styles: [".adf-datatable-permission{display:flex;min-width:450px;width:100%}.adf-datatable-permission.adf-datatable{overflow:hidden}.adf-datatable-permission.adf-datatable .adf-delete-permission-column{min-width:80px}.adf-datatable-permission.adf-datatable .adf-delete-permission-column .adf-cell-value{padding-right:10px;place-content:flex-end;width:80px}.adf-datatable-permission.adf-datatable .adf-authorityId-column{flex:40%}.adf-datatable-permission.adf-datatable .adf-authority-icon-column{min-width:40px}.adf-datatable-permission.adf-datatable .adf-datatable-selected>svg{height:40px;width:40px}"]
            }]
    }], function () { return []; }, { permissions: [{
            type: Input
        }], isReadOnly: [{
            type: Input
        }], showLocation: [{
            type: Input
        }], selectionMode: [{
            type: Input
        }], update: [{
            type: Output
        }], updateAll: [{
            type: Output
        }], delete: [{
            type: Output
        }], error: [{
            type: Output
        }], node: [{
            type: Input
        }], roles: [{
            type: Input
        }] }); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class PopOverDirective {
    constructor(element, overlay, vcr) {
        this.element = element;
        this.overlay = overlay;
        this.vcr = vcr;
        this.panelClass = 'adf-permission-pop-over';
        this._open = false;
        this.destroy$ = new Subject();
    }
    get open() {
        return this._open;
    }
    ngOnInit() {
        this.createOverlay();
    }
    ngAfterViewInit() {
        this.element.nativeElement.addEventListener('click', () => this.attachOverlay());
    }
    ngOnDestroy() {
        this.detachOverlay();
        this.destroy$.next();
        this.destroy$.complete();
    }
    createOverlay() {
        const scrollStrategy = this.overlay.scrollStrategies.reposition();
        const positionStrategy = this.overlay
            .position()
            .flexibleConnectedTo(this.target)
            .withPositions([
            new ConnectionPositionPair({ originX: 'start', originY: 'bottom' }, { overlayX: 'start', overlayY: 'top' }),
            new ConnectionPositionPair({ originX: 'start', originY: 'top' }, { overlayX: 'start', overlayY: 'bottom' })
        ])
            .withPush(false);
        this.overlayRef = this.overlay.create({
            positionStrategy,
            scrollStrategy,
            hasBackdrop: true,
            backdropClass: 'cdk-overlay-transparent-backdrop',
            panelClass: this.panelClass
        });
        this.overlayRef
            .backdropClick()
            .pipe(takeUntil(this.destroy$))
            .subscribe(() => {
            this._open = false;
            this.detachOverlay();
        });
    }
    attachOverlay() {
        if (!this.overlayRef.hasAttached()) {
            const periodSelectorPortal = new TemplatePortal(this.popOver, this.vcr);
            this.overlayRef.attach(periodSelectorPortal);
            this._open = true;
        }
    }
    detachOverlay() {
        if (this.overlayRef.hasAttached()) {
            this.overlayRef.detach();
        }
    }
}
PopOverDirective.ɵfac = function PopOverDirective_Factory(t) { return new (t || PopOverDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc34.Overlay), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
PopOverDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: PopOverDirective, selectors: [["", "adf-pop-over", ""]], inputs: { panelClass: "panelClass", popOver: ["adf-pop-over", "popOver"], target: "target" }, exportAs: ["adfPopOver"] });
PopOverDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Overlay },
    { type: ViewContainerRef }
];
PopOverDirective.propDecorators = {
    popOver: [{ type: Input, args: ['adf-pop-over',] }],
    target: [{ type: Input }],
    panelClass: [{ type: Input }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(PopOverDirective, [{
        type: Directive,
        args: [{
                selector: '[adf-pop-over]',
                exportAs: 'adfPopOver'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc34.Overlay }, { type: ɵngcc0.ViewContainerRef }]; }, { panelClass: [{
            type: Input
        }], popOver: [{
            type: Input,
            args: ['adf-pop-over']
        }], target: [{
            type: Input
        }] }); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class PermissionManagerModule {
}
PermissionManagerModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: PermissionManagerModule });
PermissionManagerModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function PermissionManagerModule_Factory(t) { return new (t || PermissionManagerModule)(); }, imports: [[
            CoreModule,
            CommonModule,
            FormsModule,
            ReactiveFormsModule,
            MaterialModule,
            SearchModule,
            PipeModule
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(PermissionManagerModule, { declarations: function () { return [PermissionListComponent, AddPermissionPanelComponent, InheritPermissionDirective, AddPermissionComponent, AddPermissionDialogComponent, UserNameColumnComponent, UserIconColumnComponent, UserRoleColumnComponent, PopOverDirective, NodePathColumnComponent, PermissionContainerComponent]; }, imports: function () { return [CoreModule,
        CommonModule,
        FormsModule,
        ReactiveFormsModule, MaterialModule, SearchModule, PipeModule]; }, exports: function () { return [PermissionListComponent, AddPermissionPanelComponent, InheritPermissionDirective, AddPermissionComponent, AddPermissionDialogComponent, UserNameColumnComponent, UserIconColumnComponent, UserRoleColumnComponent, PopOverDirective, NodePathColumnComponent]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(PermissionManagerModule, [{
        type: NgModule,
        args: [{
                imports: [
                    CoreModule,
                    CommonModule,
                    FormsModule,
                    ReactiveFormsModule,
                    MaterialModule,
                    SearchModule,
                    PipeModule
                ],
                declarations: [
                    PermissionListComponent,
                    AddPermissionPanelComponent,
                    InheritPermissionDirective,
                    AddPermissionComponent,
                    AddPermissionDialogComponent,
                    UserNameColumnComponent,
                    UserIconColumnComponent,
                    UserRoleColumnComponent,
                    PopOverDirective,
                    NodePathColumnComponent,
                    PermissionContainerComponent
                ],
                exports: [
                    PermissionListComponent,
                    AddPermissionPanelComponent,
                    InheritPermissionDirective,
                    AddPermissionComponent,
                    AddPermissionDialogComponent,
                    UserNameColumnComponent,
                    UserIconColumnComponent,
                    UserRoleColumnComponent,
                    PopOverDirective,
                    NodePathColumnComponent
                ]
            }]
    }], null, null); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class ShareDialogComponent {
    constructor(appConfigService, sharedLinksApiService, dialogRef, dialog, nodesApiService, contentService, renditionService, data) {
        this.appConfigService = appConfigService;
        this.sharedLinksApiService = sharedLinksApiService;
        this.dialogRef = dialogRef;
        this.dialog = dialog;
        this.nodesApiService = nodesApiService;
        this.contentService = contentService;
        this.renditionService = renditionService;
        this.data = data;
        this.minDate = moment$1().add(1, 'd');
        this.isFileShared = false;
        this.isDisabled = false;
        this.form = new FormGroup({
            sharedUrl: new FormControl(''),
            time: new FormControl({ value: '', disabled: true })
        });
        this.type = 'datetime';
        this.maxDebounceTime = 500;
        this.onDestroy$ = new Subject();
    }
    ngOnInit() {
        this.type = this.appConfigService.get('sharedLinkDateTimePickerType', 'datetime');
        if (this.data.node && this.data.node.entry) {
            this.fileName = this.data.node.entry.name;
            this.baseShareUrl = this.data.baseShareUrl;
            const properties = this.data.node.entry.properties;
            if (!properties || !properties['qshare:sharedId']) {
                this.createSharedLinks(this.data.node.entry.id);
            }
            else {
                this.sharedId = properties['qshare:sharedId'];
                this.isFileShared = true;
                this.updateForm();
            }
        }
        this.time.valueChanges
            .pipe(debounceTime(this.maxDebounceTime), takeUntil(this.onDestroy$))
            .subscribe(value => this.onTimeChanged(value));
    }
    onTimeChanged(date) {
        this.updateNode(date).subscribe(() => this.updateEntryExpiryDate(date));
    }
    get time() {
        return this.form.controls['time'];
    }
    ngOnDestroy() {
        this.onDestroy$.next(true);
        this.onDestroy$.complete();
    }
    onSlideShareChange(event) {
        if (event.checked) {
            this.createSharedLinks(this.data.node.entry.id);
        }
        else {
            this.openConfirmationDialog();
        }
    }
    get canUpdate() {
        const { entry } = this.data.node;
        if (entry && entry.allowableOperations) {
            return this.contentService.hasAllowableOperations(entry, 'update');
        }
        return true;
    }
    onToggleExpirationDate(slideToggle) {
        if (slideToggle.checked) {
            this.time.enable();
        }
        else {
            this.time.disable();
            this.time.setValue(null);
        }
    }
    onDatetimepickerClosed() {
        this.dateTimePickerInput.nativeElement.blur();
        if (!this.time.value) {
            this.slideToggleExpirationDate.checked = false;
        }
    }
    openConfirmationDialog() {
        this.isFileShared = false;
        this.dialog
            .open(ConfirmDialogComponent, {
            data: {
                title: 'SHARE.CONFIRMATION.DIALOG-TITLE',
                message: 'SHARE.CONFIRMATION.MESSAGE',
                yesLabel: 'SHARE.CONFIRMATION.REMOVE',
                noLabel: 'SHARE.CONFIRMATION.CANCEL'
            },
            minWidth: '250px',
            closeOnNavigation: true
        })
            .beforeClosed()
            .subscribe((deleteSharedLink) => {
            if (deleteSharedLink) {
                this.deleteSharedLink(this.sharedId);
            }
            else {
                this.isFileShared = true;
            }
        });
    }
    createSharedLinks(nodeId) {
        this.isDisabled = true;
        this.sharedLinksApiService.createSharedLinks(nodeId).subscribe((sharedLink) => {
            if (sharedLink.entry) {
                this.sharedId = sharedLink.entry.id;
                if (this.data.node.entry.properties) {
                    this.data.node.entry.properties['qshare:sharedId'] = this.sharedId;
                }
                else {
                    this.data.node.entry.properties = {
                        'qshare:sharedId': this.sharedId
                    };
                }
                this.isDisabled = false;
                this.isFileShared = true;
                this.renditionService
                    .generateRenditionForNode(this.data.node.entry.id)
                    .subscribe(() => { });
                this.updateForm();
            }
        }, () => {
            this.isDisabled = false;
            this.isFileShared = false;
        });
    }
    deleteSharedLink(sharedId) {
        this.isDisabled = true;
        this.sharedLinksApiService
            .deleteSharedLink(sharedId)
            .subscribe((response) => {
            if (response instanceof Error) {
                this.isDisabled = false;
                this.isFileShared = true;
                this.handleError(response);
            }
            else {
                if (this.data.node.entry.properties) {
                    this.data.node.entry.properties['qshare:sharedId'] = null;
                    this.data.node.entry.properties['qshare:expiryDate'] = null;
                }
                this.dialogRef.close(false);
            }
        });
    }
    handleError(error) {
        let message = 'SHARE.UNSHARE_ERROR';
        let statusCode = 0;
        try {
            statusCode = JSON.parse(error.message).error.statusCode;
        }
        catch (_a) { }
        if (statusCode === 403) {
            message = 'SHARE.UNSHARE_PERMISSION_ERROR';
        }
        this.sharedLinksApiService.error.next({
            statusCode,
            message
        });
    }
    updateForm() {
        const { entry } = this.data.node;
        let expiryDate = null;
        if (entry && entry.properties) {
            expiryDate = entry.properties['qshare:expiryDate'];
        }
        this.form.setValue({
            sharedUrl: `${this.baseShareUrl}${this.sharedId}`,
            time: expiryDate ? moment$1(expiryDate).local() : null
        });
        if (expiryDate) {
            this.time.enable();
        }
        else {
            this.time.disable();
        }
    }
    updateNode(date) {
        const expiryDate = date
            ? (this.type === 'date' ? date.endOf('day').utc().format() : date.utc().format())
            : null;
        return this.nodesApiService.updateNode(this.data.node.entry.id, {
            properties: {
                'qshare:expiryDate': expiryDate
            }
        });
    }
    updateEntryExpiryDate(date) {
        const { properties } = this.data.node.entry;
        if (properties) {
            properties['qshare:expiryDate'] = date
                ? date.local()
                : null;
        }
    }
}
ShareDialogComponent.ɵfac = function ShareDialogComponent_Factory(t) { return new (t || ShareDialogComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.AppConfigService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.SharedLinksApiService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.MatDialogRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.MatDialog), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NodesApiService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ContentService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.RenditionsService), ɵngcc0.ɵɵdirectiveInject(MAT_DIALOG_DATA)); };
ShareDialogComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ShareDialogComponent, selectors: [["adf-share-dialog"]], viewQuery: function ShareDialogComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵstaticViewQuery(_c36, true);
        ɵngcc0.ɵɵstaticViewQuery(_c37, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.slideToggleExpirationDate = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.dateTimePickerInput = _t.first);
    } }, hostAttrs: [1, "adf-share-dialog"], decls: 41, vars: 43, consts: [[1, "adf-share-link__dialog-content"], ["data-automation-id", "adf-share-dialog-title", 1, "adf-share-link__title"], [1, "adf-share-link__info"], [1, "adf-share-link--row"], [1, "adf-share-link__label"], ["color", "primary", "data-automation-id", "adf-share-toggle", 3, "aria-label", "checked", "disabled", "change"], [3, "formGroup"], ["floatLabel", "always", 1, "adf-full-width", "adf-float-label"], ["data-automation-id", "adf-share-link", "matInput", "", "cdkFocusInitial", "", "formControlName", "sharedUrl", "readonly", "readonly", 1, "adf-share-link__input", 3, "placeholder"], ["sharedLinkInput", ""], ["matSuffix", "", 1, "adf-input-action", 3, "clipboard-notification", "adf-clipboard", "target"], ["color", "primary", "data-automation-id", "adf-expire-toggle", 3, "disabled", "aria-label", "checked", "change"], ["slideToggleExpirationDate", ""], ["matSuffix", "", 3, "disabled", "for"], ["matDatetimepickerToggle", "matDatetimepickerToggle"], [3, "type", "timeInterval", "closed"], ["datetimePicker", ""], ["matInput", "", "formControlName", "time", 1, "adf-share-link__input", 3, "placeholder", "min", "matDatetimepicker"], ["dateTimePickerInput", ""], ["mat-dialog-actions", ""], ["data-automation-id", "adf-share-dialog-close", "mat-button", "", "color", "primary", "mat-dialog-close", ""]], template: function ShareDialogComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "div", 1);
        ɵngcc0.ɵɵtext(2);
        ɵngcc0.ɵɵpipe(3, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(4, "mat-dialog-content");
        ɵngcc0.ɵɵelementStart(5, "p", 2);
        ɵngcc0.ɵɵtext(6);
        ɵngcc0.ɵɵpipe(7, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(8, "div", 3);
        ɵngcc0.ɵɵelementStart(9, "div", 4);
        ɵngcc0.ɵɵtext(10);
        ɵngcc0.ɵɵpipe(11, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(12, "mat-slide-toggle", 5);
        ɵngcc0.ɵɵlistener("change", function ShareDialogComponent_Template_mat_slide_toggle_change_12_listener($event) { return ctx.onSlideShareChange($event); });
        ɵngcc0.ɵɵpipe(13, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(14, "form", 6);
        ɵngcc0.ɵɵelementStart(15, "mat-form-field", 7);
        ɵngcc0.ɵɵelement(16, "input", 8, 9);
        ɵngcc0.ɵɵpipe(18, "translate");
        ɵngcc0.ɵɵelementStart(19, "mat-icon", 10);
        ɵngcc0.ɵɵpipe(20, "translate");
        ɵngcc0.ɵɵtext(21, " link ");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(22, "div", 3);
        ɵngcc0.ɵɵelementStart(23, "div", 4);
        ɵngcc0.ɵɵtext(24);
        ɵngcc0.ɵɵpipe(25, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(26, "mat-slide-toggle", 11, 12);
        ɵngcc0.ɵɵlistener("change", function ShareDialogComponent_Template_mat_slide_toggle_change_26_listener($event) { return ctx.onToggleExpirationDate($event); });
        ɵngcc0.ɵɵpipe(28, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(29, "mat-form-field", 7);
        ɵngcc0.ɵɵelement(30, "mat-datetimepicker-toggle", 13, 14);
        ɵngcc0.ɵɵelementStart(32, "mat-datetimepicker", 15, 16);
        ɵngcc0.ɵɵlistener("closed", function ShareDialogComponent_Template_mat_datetimepicker_closed_32_listener() { return ctx.onDatetimepickerClosed(); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(34, "input", 17, 18);
        ɵngcc0.ɵɵpipe(36, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(37, "div", 19);
        ɵngcc0.ɵɵelementStart(38, "button", 20);
        ɵngcc0.ɵɵtext(39);
        ɵngcc0.ɵɵpipe(40, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        const _r0 = ɵngcc0.ɵɵreference(17);
        const _r3 = ɵngcc0.ɵɵreference(33);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵtextInterpolate2(" ", ɵngcc0.ɵɵpipeBind1(3, 23, "SHARE.DIALOG-TITLE"), " ", ctx.fileName, " ");
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(7, 25, "SHARE.DESCRIPTION"));
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(11, 27, "SHARE.TITLE"));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵpropertyInterpolate("aria-label", ɵngcc0.ɵɵpipeBind1(13, 29, "SHARE.TITLE"));
        ɵngcc0.ɵɵproperty("checked", ctx.isFileShared)("disabled", !ctx.canUpdate || ctx.isDisabled);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("formGroup", ctx.form);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵpropertyInterpolate("placeholder", ɵngcc0.ɵɵpipeBind1(18, 31, "SHARE.PUBLIC-LINK"));
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("clipboard-notification", ɵngcc0.ɵɵpipeBind1(20, 33, "SHARE.CLIPBOARD-MESSAGE"))("target", _r0);
        ɵngcc0.ɵɵadvance(5);
        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(25, 35, "SHARE.EXPIRES"));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵpropertyInterpolate("aria-label", ɵngcc0.ɵɵpipeBind1(28, 37, "SHARE.EXPIRES"));
        ɵngcc0.ɵɵproperty("disabled", !ctx.canUpdate)("checked", ctx.time.value);
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵproperty("disabled", ctx.time.disabled)("for", _r3);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("type", ctx.type)("timeInterval", 1);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵpropertyInterpolate("placeholder", ɵngcc0.ɵɵpipeBind1(36, 39, "SHARE.EXPIRATION-LABEL"));
        ɵngcc0.ɵɵproperty("min", ctx.minDate)("matDatetimepicker", _r3);
        ɵngcc0.ɵɵadvance(5);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(40, 41, "SHARE.CLOSE"), " ");
    } }, directives: [ɵngcc2.MatDialogContent, ɵngcc33.MatSlideToggle, ɵngcc9.ɵangular_packages_forms_forms_y, ɵngcc9.NgControlStatusGroup, ɵngcc9.FormGroupDirective, ɵngcc11.MatFormField, ɵngcc13.MatInput, ɵngcc9.DefaultValueAccessor, ɵngcc9.NgControlStatus, ɵngcc9.FormControlName, ɵngcc6.MatIcon, ɵngcc11.MatSuffix, ɵngcc1.ClipboardDirective, ɵngcc12.MatDatetimepickerToggle, ɵngcc12.MatDatetimepicker, ɵngcc12.MatDatetimepickerInput, ɵngcc2.MatDialogActions, ɵngcc5.MatButton, ɵngcc2.MatDialogClose], pipes: [ɵngcc8.TranslatePipe], styles: [".adf-float-label{padding-top:20px}.adf-share-link-dialog .adf-share-link__dialog-content{display:flex;flex-direction:column}.adf-share-link-dialog .adf-share-link__info,.adf-share-link-dialog .adf-share-link__label,.adf-share-link-dialog .adf-share-link__title{color:var(--theme-text-bold-color);font-size:16px;font-stretch:normal;font-style:normal;font-weight:400;letter-spacing:-.4px;line-height:2}.adf-share-link-dialog .adf-share-link__label{flex:1 1 auto}.adf-share-link-dialog .adf-share-link__info{color:var(--theme-text-color);font-size:13px}.adf-share-link-dialog .adf-share-link--row{align-items:center;display:flex;flex-direction:row;flex-wrap:wrap}.adf-share-link-dialog .adf-share-link__input{color:var(--theme-text-bold-color)}.adf-share-link-dialog .adf-input-action{cursor:pointer}.adf-share-link-dialog .adf-full-width{width:100%}.adf-share-link-dialog .mat-form-field-infix{border-top:unset}.adf-share-link-dialog .mat-dialog-actions{justify-content:flex-end}.adf-share-link-dialog .mat-dialog-actions>button{text-transform:uppercase}.adf-share-link-dialog .mat-form-field-flex{align-items:center}"], encapsulation: 2 });
ShareDialogComponent.ctorParameters = () => [
    { type: AppConfigService },
    { type: SharedLinksApiService },
    { type: MatDialogRef },
    { type: MatDialog },
    { type: NodesApiService },
    { type: ContentService },
    { type: RenditionsService },
    { type: undefined, decorators: [{ type: Inject, args: [MAT_DIALOG_DATA,] }] }
];
ShareDialogComponent.propDecorators = {
    slideToggleExpirationDate: [{ type: ViewChild, args: ['slideToggleExpirationDate', { static: true },] }],
    dateTimePickerInput: [{ type: ViewChild, args: ['dateTimePickerInput', { static: true },] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ShareDialogComponent, [{
        type: Component,
        args: [{
                selector: 'adf-share-dialog',
                template: "<div class=\"adf-share-link__dialog-content\">\n    <div data-automation-id=\"adf-share-dialog-title\" class=\"adf-share-link__title\">\n        {{ 'SHARE.DIALOG-TITLE' | translate }} {{ fileName }}\n    </div>\n\n    <mat-dialog-content>\n        <p class=\"adf-share-link__info\">{{ 'SHARE.DESCRIPTION' | translate }}</p>\n\n        <div class=\"adf-share-link--row\">\n            <div class=\"adf-share-link__label\">{{ 'SHARE.TITLE' | translate }}</div>\n\n            <mat-slide-toggle\n                color=\"primary\"\n                data-automation-id=\"adf-share-toggle\"\n                aria-label=\"{{ 'SHARE.TITLE' | translate }}\"\n                [checked]=\"isFileShared\"\n                [disabled]=\"!canUpdate || isDisabled\"\n                (change)=\"onSlideShareChange($event)\">\n            </mat-slide-toggle>\n        </div>\n\n        <form [formGroup]=\"form\">\n            <mat-form-field class=\"adf-full-width adf-float-label\" floatLabel='always'>\n                <input\n                    #sharedLinkInput\n                    data-automation-id=\"adf-share-link\"\n                    class=\"adf-share-link__input\"\n                    matInput\n                    cdkFocusInitial\n                    placeholder=\"{{ 'SHARE.PUBLIC-LINK' | translate }}\"\n                    formControlName=\"sharedUrl\"\n                    readonly=\"readonly\">\n                <mat-icon\n                    class=\"adf-input-action\"\n                    matSuffix\n                    [clipboard-notification]=\"'SHARE.CLIPBOARD-MESSAGE' | translate\" [adf-clipboard]\n                    [target]=\"sharedLinkInput\">\n                    link\n                </mat-icon>\n            </mat-form-field>\n\n            <div class=\"adf-share-link--row\">\n                <div class=\"adf-share-link__label\">{{ 'SHARE.EXPIRES' | translate }}</div>\n                <mat-slide-toggle\n                    #slideToggleExpirationDate\n                    [disabled]=\"!canUpdate\"\n                    color=\"primary\"\n                    data-automation-id=\"adf-expire-toggle\"\n                    aria-label=\"{{ 'SHARE.EXPIRES' | translate }}\"\n                    [checked]=\"time.value\"\n                    (change)=\"onToggleExpirationDate($event)\">\n                </mat-slide-toggle>\n            </div>\n\n            <mat-form-field class=\"adf-full-width adf-float-label\" floatLabel='always'>\n                <mat-datetimepicker-toggle\n                    #matDatetimepickerToggle=\"matDatetimepickerToggle\"\n                    [disabled]=\"time.disabled\"\n                    [for]=\"datetimePicker\"\n                    matSuffix>\n                </mat-datetimepicker-toggle>\n                <mat-datetimepicker\n                    #datetimePicker\n                    (closed)=\"onDatetimepickerClosed()\"\n                    [type]=\"type\"\n                    [timeInterval]=\"1\">\n                </mat-datetimepicker>\n                <input class=\"adf-share-link__input\"\n                    #dateTimePickerInput\n                    matInput\n                    placeholder=\"{{ 'SHARE.EXPIRATION-LABEL' | translate }}\"\n                    [min]=\"minDate\"\n                    formControlName=\"time\"\n                    [matDatetimepicker]=\"datetimePicker\" />\n            </mat-form-field>\n        </form>\n    </mat-dialog-content>\n\n    <div mat-dialog-actions>\n        <button data-automation-id=\"adf-share-dialog-close\" mat-button color=\"primary\" mat-dialog-close>\n            {{ 'SHARE.CLOSE' | translate }}\n        </button>\n    </div>\n</div>\n",
                host: { class: 'adf-share-dialog' },
                encapsulation: ViewEncapsulation.None,
                styles: [".adf-float-label{padding-top:20px}.adf-share-link-dialog .adf-share-link__dialog-content{display:flex;flex-direction:column}.adf-share-link-dialog .adf-share-link__info,.adf-share-link-dialog .adf-share-link__label,.adf-share-link-dialog .adf-share-link__title{color:var(--theme-text-bold-color);font-size:16px;font-stretch:normal;font-style:normal;font-weight:400;letter-spacing:-.4px;line-height:2}.adf-share-link-dialog .adf-share-link__label{flex:1 1 auto}.adf-share-link-dialog .adf-share-link__info{color:var(--theme-text-color);font-size:13px}.adf-share-link-dialog .adf-share-link--row{align-items:center;display:flex;flex-direction:row;flex-wrap:wrap}.adf-share-link-dialog .adf-share-link__input{color:var(--theme-text-bold-color)}.adf-share-link-dialog .adf-input-action{cursor:pointer}.adf-share-link-dialog .adf-full-width{width:100%}.adf-share-link-dialog .mat-form-field-infix{border-top:unset}.adf-share-link-dialog .mat-dialog-actions{justify-content:flex-end}.adf-share-link-dialog .mat-dialog-actions>button{text-transform:uppercase}.adf-share-link-dialog .mat-form-field-flex{align-items:center}"]
            }]
    }], function () { return [{ type: ɵngcc1.AppConfigService }, { type: ɵngcc1.SharedLinksApiService }, { type: ɵngcc2.MatDialogRef }, { type: ɵngcc2.MatDialog }, { type: ɵngcc1.NodesApiService }, { type: ɵngcc1.ContentService }, { type: ɵngcc1.RenditionsService }, { type: undefined, decorators: [{
                type: Inject,
                args: [MAT_DIALOG_DATA]
            }] }]; }, { slideToggleExpirationDate: [{
            type: ViewChild,
            args: ['slideToggleExpirationDate', { static: true }]
        }], dateTimePickerInput: [{
            type: ViewChild,
            args: ['dateTimePickerInput', { static: true }]
        }] }); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class NodeSharedDirective {
    constructor(dialog, zone, alfrescoApiService) {
        this.dialog = dialog;
        this.zone = zone;
        this.alfrescoApiService = alfrescoApiService;
        this.isFile = false;
        this.isShared = false;
        this.onDestroy$ = new Subject();
    }
    get nodesApi() {
        var _a;
        this._nodesApi = (_a = this._nodesApi) !== null && _a !== void 0 ? _a : new NodesApi(this.alfrescoApiService.getInstance());
        return this._nodesApi;
    }
    ngOnDestroy() {
        this.onDestroy$.next(true);
        this.onDestroy$.complete();
    }
    shareNode(nodeEntry) {
        if (nodeEntry && nodeEntry.entry && nodeEntry.entry.isFile) {
            const nodeId = nodeEntry.entry['nodeId'] || nodeEntry.entry['guid'];
            if (nodeId) {
                this.getNodeInfo(nodeId).subscribe((node) => {
                    this.openShareLinkDialog(node);
                });
            }
            else {
                this.openShareLinkDialog(nodeEntry);
            }
        }
    }
    getNodeInfo(nodeId) {
        const options = {
            include: ['allowableOperations']
        };
        return from(this.nodesApi.getNode(nodeId, options));
    }
    openShareLinkDialog(node) {
        this.dialog.open(ShareDialogComponent, {
            width: '600px',
            panelClass: 'adf-share-link-dialog',
            data: {
                node,
                baseShareUrl: this.baseShareUrl
            }
        });
    }
    ngOnChanges() {
        this.zone.onStable
            .pipe(takeUntil(this.onDestroy$))
            .subscribe(() => {
            if (this.node && this.node.entry) {
                this.isFile = this.node.entry.isFile;
                this.isShared = this.node.entry.properties ? this.node.entry.properties['qshare:sharedId'] : false;
            }
        });
    }
    onClick() {
        if (this.node) {
            this.shareNode(this.node);
        }
    }
}
NodeSharedDirective.ɵfac = function NodeSharedDirective_Factory(t) { return new (t || NodeSharedDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc2.MatDialog), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.AlfrescoApiService)); };
NodeSharedDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: NodeSharedDirective, selectors: [["", "adf-share", ""]], hostBindings: function NodeSharedDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function NodeSharedDirective_click_HostBindingHandler() { return ctx.onClick(); });
    } }, inputs: { node: ["adf-share", "node"], baseShareUrl: "baseShareUrl" }, exportAs: ["adfShare"], features: [ɵngcc0.ɵɵNgOnChangesFeature] });
NodeSharedDirective.ctorParameters = () => [
    { type: MatDialog },
    { type: NgZone },
    { type: AlfrescoApiService }
];
NodeSharedDirective.propDecorators = {
    node: [{ type: Input, args: ['adf-share',] }],
    baseShareUrl: [{ type: Input }],
    onClick: [{ type: HostListener, args: ['click',] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NodeSharedDirective, [{
        type: Directive,
        args: [{
                selector: '[adf-share]',
                exportAs: 'adfShare'
            }]
    }], function () { return [{ type: ɵngcc2.MatDialog }, { type: ɵngcc0.NgZone }, { type: ɵngcc1.AlfrescoApiService }]; }, { onClick: [{
            type: HostListener,
            args: ['click']
        }], node: [{
            type: Input,
            args: ['adf-share']
        }], baseShareUrl: [{
            type: Input
        }] }); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class ContentNodeShareModule {
    static forRoot() {
        return {
            ngModule: ContentNodeShareModule
        };
    }
    static forChild() {
        return {
            ngModule: ContentNodeShareModule
        };
    }
}
ContentNodeShareModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: ContentNodeShareModule });
ContentNodeShareModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function ContentNodeShareModule_Factory(t) { return new (t || ContentNodeShareModule)(); }, imports: [[
            CoreModule,
            CommonModule,
            MaterialModule
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ContentNodeShareModule, { declarations: function () { return [ShareDialogComponent, NodeSharedDirective]; }, imports: function () { return [CoreModule,
        CommonModule, MaterialModule]; }, exports: function () { return [ShareDialogComponent, NodeSharedDirective]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ContentNodeShareModule, [{
        type: NgModule,
        args: [{
                imports: [
                    CoreModule,
                    CommonModule,
                    MaterialModule
                ],
                declarations: [
                    ShareDialogComponent,
                    NodeSharedDirective
                ],
                exports: [
                    ShareDialogComponent,
                    NodeSharedDirective
                ]
            }]
    }], null, null); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class TreeBaseNode {
    constructor(nodeEntry, level, expandable) {
        this.expandable = true;
        this.name = nodeEntry.entry.name;
        this.nodeId = nodeEntry.entry.id;
        this.level = level ? level : 0;
        this.expandable = expandable ? expandable : true;
        this.node = nodeEntry ? new NodeEntry(nodeEntry) : undefined;
    }
}

class TreeViewService {
    constructor(nodeApi) {
        this.nodeApi = nodeApi;
    }
    getTreeNodes(nodeId) {
        return this.nodeApi.getNodeChildren(nodeId)
            .pipe(map((nodePage) => {
            return nodePage.list.entries.filter((node) => node.entry.isFolder ? node : null);
        }), map((nodes) => nodes.map((node) => new TreeBaseNode(node))));
    }
}
TreeViewService.ɵfac = function TreeViewService_Factory(t) { return new (t || TreeViewService)(ɵngcc0.ɵɵinject(ɵngcc1.NodesApiService)); };
TreeViewService.ɵprov = ɵɵdefineInjectable({ factory: function TreeViewService_Factory() { return new TreeViewService(ɵɵinject(NodesApiService)); }, token: TreeViewService, providedIn: "root" });
TreeViewService.ctorParameters = () => [
    { type: NodesApiService }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TreeViewService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc1.NodesApiService }]; }, null); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class TreeViewDataSource {
    constructor(treeControl, treeViewService) {
        this.treeControl = treeControl;
        this.treeViewService = treeViewService;
        this.dataChange = new BehaviorSubject([]);
        this.childrenSubscription = null;
        this.changeSubscription = null;
        this.dataChange.subscribe((treeNodes) => this.treeNodes = treeNodes);
    }
    get data() {
        return this.treeNodes;
    }
    set data(value) {
        this.treeControl.dataNodes = value;
        this.dataChange.next(value);
    }
    connect(collectionViewer) {
        this.changeSubscription = this.treeControl.expansionModel.changed.subscribe((change) => {
            if (change.added &&
                change.added.length > 0) {
                this.expandTreeNodes(change);
            }
            else if (change.removed) {
                this.reduceTreeNodes(change);
            }
        });
        return merge(collectionViewer.viewChange, this.dataChange).pipe(map(() => this.data));
    }
    disconnect() {
        if (this.childrenSubscription) {
            this.childrenSubscription.unsubscribe();
        }
        if (this.changeSubscription) {
            this.changeSubscription.unsubscribe();
        }
    }
    expandTreeNodes(change) {
        change.added.forEach((node) => this.expandNode(node));
    }
    reduceTreeNodes(change) {
        change.removed.slice().reverse().forEach((node) => this.toggleNode(node));
    }
    expandNode(node) {
        this.childrenSubscription = this.treeViewService.getTreeNodes(node.nodeId)
            .subscribe((children) => {
            const index = this.data.indexOf(node);
            if (!children || index < 0) {
                node.expandable = false;
                return;
            }
            const nodes = children.map((actualNode) => {
                actualNode.level = node.level + 1;
                return actualNode;
            });
            this.data.splice(index + 1, 0, ...nodes);
            this.dataChange.next(this.data);
        });
    }
    toggleNode(node) {
        const index = this.data.indexOf(node);
        let count = 0;
        for (let i = index + 1; i < this.data.length
            && this.data[i].level > node.level; i++, count++) { }
        this.data.splice(index + 1, count);
        this.dataChange.next(this.data);
    }
}
TreeViewDataSource.ɵfac = function TreeViewDataSource_Factory(t) { return new (t || TreeViewDataSource)(ɵngcc0.ɵɵinject(ɵngcc35.FlatTreeControl), ɵngcc0.ɵɵinject(TreeViewService)); };
TreeViewDataSource.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: TreeViewDataSource, factory: TreeViewDataSource.ɵfac });
TreeViewDataSource.ctorParameters = () => [
    { type: FlatTreeControl },
    { type: TreeViewService }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TreeViewDataSource, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc35.FlatTreeControl }, { type: TreeViewService }]; }, null); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class TreeViewComponent {
    constructor(treeViewService) {
        this.treeViewService = treeViewService;
        this.nodeClicked = new EventEmitter();
        this.error = new EventEmitter();
        this.getLevel = (node) => node.level;
        this.isExpandable = (node) => node.expandable;
        this.hasChild = (_, nodeData) => nodeData.expandable;
        this.treeControl = new FlatTreeControl(this.getLevel, this.isExpandable);
        this.dataSource = new TreeViewDataSource(this.treeControl, this.treeViewService);
    }
    ngOnChanges(changes) {
        if (changes['nodeId'] && changes['nodeId'].currentValue &&
            changes['nodeId'].currentValue !== changes['nodeId'].previousValue) {
            this.loadTreeNode();
        }
        else {
            this.dataSource.data = [];
        }
    }
    onNodeClicked(node) {
        this.nodeClicked.emit(node);
    }
    loadTreeNode() {
        this.treeViewService.getTreeNodes(this.nodeId)
            .subscribe((treeNode) => {
            this.dataSource.data = treeNode;
        }, (error) => this.error.emit(error));
    }
}
TreeViewComponent.ɵfac = function TreeViewComponent_Factory(t) { return new (t || TreeViewComponent)(ɵngcc0.ɵɵdirectiveInject(TreeViewService)); };
TreeViewComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: TreeViewComponent, selectors: [["adf-tree-view-list"]], inputs: { nodeId: "nodeId" }, outputs: { nodeClicked: "nodeClicked", error: "error" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 3, vars: 2, consts: [["class", "adf-tree-view-main", 3, "dataSource", "treeControl", 4, "ngIf", "ngIfElse"], ["missingNodeId", ""], [1, "adf-tree-view-main", 3, "dataSource", "treeControl"], ["class", "adf-tree-view-node", "matTreeNodePadding", "", 3, "id", "matTreeNodePaddingIndent", 4, "matTreeNodeDef"], ["class", "adf-tree-view-node", "matTreeNodePadding", "", 3, "id", "matTreeNodePaddingIndent", 4, "matTreeNodeDef", "matTreeNodeDefWhen"], ["matTreeNodePadding", "", 1, "adf-tree-view-node", 3, "id", "matTreeNodePaddingIndent"], ["matTreeNodeToggle", "", "mat-icon-button", "", 3, "id", "click"], [1, "adf-tree-view-icon"], ["matTreeNodeToggle", "", 1, "adf-tree-view-label", 3, "click"], ["id", "adf-tree-view-missing-node"]], template: function TreeViewComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, TreeViewComponent_mat_tree_0_Template, 3, 3, "mat-tree", 0);
        ɵngcc0.ɵɵtemplate(1, TreeViewComponent_ng_template_1_Template, 3, 3, "ng-template", null, 1, ɵngcc0.ɵɵtemplateRefExtractor);
    } if (rf & 2) {
        const _r1 = ɵngcc0.ɵɵreference(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.nodeId)("ngIfElse", _r1);
    } }, directives: [ɵngcc4.NgIf, ɵngcc36.MatTree, ɵngcc36.MatTreeNodeDef, ɵngcc36.MatTreeNode, ɵngcc36.MatTreeNodePadding, ɵngcc5.MatButton, ɵngcc36.MatTreeNodeToggle, ɵngcc6.MatIcon], pipes: [ɵngcc8.TranslatePipe], styles: [".adf-tree-view-icon[_ngcontent-%COMP%]{color:#d9e022}.adf-tree-view-node.mat-tree-node[_ngcontent-%COMP%]{align-items:baseline;font-size:12px;min-height:40px}.adf-tree-view-label[_ngcontent-%COMP%]{cursor:pointer}"] });
TreeViewComponent.ctorParameters = () => [
    { type: TreeViewService }
];
TreeViewComponent.propDecorators = {
    nodeId: [{ type: Input }],
    nodeClicked: [{ type: Output }],
    error: [{ type: Output }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TreeViewComponent, [{
        type: Component,
        args: [{
                selector: 'adf-tree-view-list',
                template: "<mat-tree class=\"adf-tree-view-main\" [dataSource]=\"dataSource\"\n          [treeControl]=\"treeControl\" *ngIf=\"nodeId; else missingNodeId\">\n    <mat-tree-node class=\"adf-tree-view-node\"\n        *matTreeNodeDef=\"let treeNode\" id=\"{{treeNode.name + '-tree-node'}}\"\n        matTreeNodePadding [matTreeNodePaddingIndent]=\"15\">\n        {{treeNode.name}}\n    </mat-tree-node>\n    <mat-tree-node class=\"adf-tree-view-node\"\n        id=\"{{treeNode.name + '-tree-child-node'}}\" *matTreeNodeDef=\"let treeNode; when: hasChild\"\n        matTreeNodePadding [matTreeNodePaddingIndent]=\"15\">\n        <button matTreeNodeToggle id=\"{{'button-'+treeNode.name}}\" (click)=\"onNodeClicked(treeNode.node)\"\n                mat-icon-button [attr.aria-label]=\"'ADF-TREE-VIEW.ACCESSIBILITY.ARIA_LABEL' | translate: {\n                    name:  treeNode.name\n                }\">\n            <mat-icon class=\"adf-tree-view-icon\">\n                {{treeControl.isExpanded(treeNode) ? 'folder_open' : 'folder'}}\n            </mat-icon>\n        </button>\n        <span class=\"adf-tree-view-label\" matTreeNodeToggle (click)=\"onNodeClicked(treeNode.node)\">{{treeNode.name}}</span>\n    </mat-tree-node>\n</mat-tree>\n<ng-template #missingNodeId>\n    <div id=\"adf-tree-view-missing-node\">\n        {{'ADF-TREE-VIEW.MISSING-ID' | translate}}\n    </div>\n</ng-template>\n",
                styles: [".adf-tree-view-icon{color:#d9e022}.adf-tree-view-node.mat-tree-node{align-items:baseline;font-size:12px;min-height:40px}.adf-tree-view-label{cursor:pointer}"]
            }]
    }], function () { return [{ type: TreeViewService }]; }, { nodeClicked: [{
            type: Output
        }], error: [{
            type: Output
        }], nodeId: [{
            type: Input
        }] }); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class TreeViewModule {
}
TreeViewModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: TreeViewModule });
TreeViewModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function TreeViewModule_Factory(t) { return new (t || TreeViewModule)(); }, imports: [[
            CommonModule,
            MaterialModule,
            TranslateModule
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(TreeViewModule, { declarations: function () { return [TreeViewComponent]; }, imports: function () { return [CommonModule, MaterialModule, TranslateModule]; }, exports: function () { return [TreeViewComponent]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TreeViewModule, [{
        type: NgModule,
        args: [{
                imports: [
                    CommonModule,
                    MaterialModule,
                    TranslateModule
                ],
                declarations: [
                    TreeViewComponent
                ],
                exports: [
                    TreeViewComponent
                ]
            }]
    }], null, null); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

class GroupService {
    constructor(alfrescoApiService) {
        this.alfrescoApiService = alfrescoApiService;
    }
    get groupsApi() {
        var _a;
        this._groupsApi = (_a = this._groupsApi) !== null && _a !== void 0 ? _a : new GroupsApi(this.alfrescoApiService.getInstance());
        return this._groupsApi;
    }
    listAllGroupMembershipsForPerson(personId, opts, accumulator = []) {
        return __awaiter(this, void 0, void 0, function* () {
            const groupsPaginated = yield this.groupsApi.listGroupMembershipsForPerson(personId, opts);
            accumulator = [...accumulator, ...groupsPaginated.list.entries];
            if (groupsPaginated.list.pagination.hasMoreItems) {
                const skip = groupsPaginated.list.pagination.skipCount + groupsPaginated.list.pagination.count;
                return this.listAllGroupMembershipsForPerson(personId, {
                    maxItems: opts.maxItems,
                    skipCount: skip
                }, accumulator);
            }
            else {
                return accumulator;
            }
        });
    }
}
GroupService.ɵfac = function GroupService_Factory(t) { return new (t || GroupService)(ɵngcc0.ɵɵinject(ɵngcc1.AlfrescoApiService)); };
GroupService.ɵprov = ɵɵdefineInjectable({ factory: function GroupService_Factory() { return new GroupService(ɵɵinject(AlfrescoApiService)); }, token: GroupService, providedIn: "root" });
GroupService.ctorParameters = () => [
    { type: AlfrescoApiService }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(GroupService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc1.AlfrescoApiService }]; }, null); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class AspectListComponent {
    constructor(aspectListService, nodeApiService) {
        this.aspectListService = aspectListService;
        this.nodeApiService = nodeApiService;
        this.nodeId = '';
        this.valueChanged = new EventEmitter();
        this.propertyColumns = ['name', 'title', 'dataType'];
        this.aspects$ = null;
        this.nodeAspects = [];
        this.nodeAspectStatus = [];
        this.hasEqualAspect = true;
        this.onDestroy$ = new Subject();
    }
    ngOnDestroy() {
        this.onDestroy$.next(true);
        this.onDestroy$.complete();
    }
    ngOnInit() {
        if (this.nodeId) {
            const node$ = this.nodeApiService.getNode(this.nodeId);
            const customAspect$ = this.aspectListService.getCustomAspects()
                .pipe(map((customAspects) => customAspects.flatMap((customAspect) => customAspect.entry.id)));
            this.aspects$ = zip(node$, customAspect$).pipe(tap(([node, customAspects]) => {
                this.nodeAspects = node.aspectNames.filter((aspect) => this.aspectListService.getVisibleAspects().includes(aspect) || customAspects.includes(aspect));
                this.nodeAspectStatus = [...this.nodeAspects];
                this.valueChanged.emit(this.nodeAspects);
            }), concatMap(() => this.aspectListService.getAspects()), takeUntil(this.onDestroy$));
        }
        else {
            this.aspects$ = this.aspectListService.getAspects()
                .pipe(takeUntil(this.onDestroy$));
        }
    }
    onCheckBoxClick(event) {
        event.stopImmediatePropagation();
    }
    onChange(change, prefixedName) {
        if (change.checked) {
            this.nodeAspects.push(prefixedName);
        }
        else {
            this.nodeAspects.splice(this.nodeAspects.indexOf(prefixedName), 1);
        }
        this.updateEqualityOfAspectList();
        this.valueChanged.emit(this.nodeAspects);
    }
    reset() {
        if (this.nodeAspectStatus && this.nodeAspectStatus.length > 0) {
            this.nodeAspects.splice(0, this.nodeAspects.length, ...this.nodeAspectStatus);
            this.hasEqualAspect = true;
            this.valueChanged.emit(this.nodeAspects);
        }
        else {
            this.clear();
        }
    }
    clear() {
        this.nodeAspects = [];
        this.updateEqualityOfAspectList();
        this.valueChanged.emit(this.nodeAspects);
    }
    getId(aspect) {
        var _a, _b, _c;
        return ((_a = aspect === null || aspect === void 0 ? void 0 : aspect.entry) === null || _a === void 0 ? void 0 : _a.title) ? (_b = aspect === null || aspect === void 0 ? void 0 : aspect.entry) === null || _b === void 0 ? void 0 : _b.title : (_c = aspect === null || aspect === void 0 ? void 0 : aspect.entry) === null || _c === void 0 ? void 0 : _c.id.replace(':', '-');
    }
    getTitle(aspect) {
        var _a, _b, _c;
        return ((_a = aspect === null || aspect === void 0 ? void 0 : aspect.entry) === null || _a === void 0 ? void 0 : _a.title) ? (_b = aspect === null || aspect === void 0 ? void 0 : aspect.entry) === null || _b === void 0 ? void 0 : _b.title : (_c = aspect === null || aspect === void 0 ? void 0 : aspect.entry) === null || _c === void 0 ? void 0 : _c.id;
    }
    updateEqualityOfAspectList() {
        if (this.nodeAspectStatus.length !== this.nodeAspects.length) {
            this.hasEqualAspect = false;
        }
        else {
            this.hasEqualAspect = this.nodeAspects.every((aspect) => this.nodeAspectStatus.includes(aspect));
        }
    }
}
AspectListComponent.ɵfac = function AspectListComponent_Factory(t) { return new (t || AspectListComponent)(ɵngcc0.ɵɵdirectiveInject(AspectListService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NodesApiService)); };
AspectListComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: AspectListComponent, selectors: [["adf-aspect-list"]], inputs: { nodeId: "nodeId" }, outputs: { valueChanged: "valueChanged" }, decls: 4, vars: 4, consts: [["id", "aspect-list-container", "class", "adf-aspect-list-container", 4, "ngIf", "ngIfElse"], ["loading", ""], ["id", "aspect-list-container", 1, "adf-aspect-list-container"], [1, "adf-accordion-aspect-list"], [3, "id", 4, "ngFor", "ngForOf"], [3, "id"], [1, "adf-aspect-list-check-button", 3, "id", "checked", "click", "change"], [1, "adf-aspect-list-element-title"], [3, "id", "matTooltip"], [1, "adf-property-paragraph", 3, "id"], ["mat-table", "", "class", "adf-aspect-property-table", 3, "dataSource", "id", 4, "ngIf"], ["mat-table", "", 1, "adf-aspect-property-table", 3, "dataSource", "id"], ["matColumnDef", "name"], ["mat-header-cell", "", 4, "matHeaderCellDef"], ["mat-cell", "", 4, "matCellDef"], ["matColumnDef", "title"], ["matColumnDef", "dataType"], ["mat-header-row", "", 4, "matHeaderRowDef"], ["mat-row", "", 4, "matRowDef", "matRowDefColumns"], ["mat-header-cell", ""], ["mat-cell", ""], ["mat-header-row", ""], ["mat-row", ""], [1, "adf-aspect-list-spinner"], ["id", "adf-aspect-spinner"]], template: function AspectListComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, AspectListComponent_div_0_Template, 3, 1, "div", 0);
        ɵngcc0.ɵɵpipe(1, "async");
        ɵngcc0.ɵɵtemplate(2, AspectListComponent_ng_template_2_Template, 2, 0, "ng-template", null, 1, ɵngcc0.ɵɵtemplateRefExtractor);
    } if (rf & 2) {
        const _r1 = ɵngcc0.ɵɵreference(3);
        ɵngcc0.ɵɵproperty("ngIf", ɵngcc0.ɵɵpipeBind1(1, 2, ctx.aspects$))("ngIfElse", _r1);
    } }, directives: [ɵngcc4.NgIf, ɵngcc23.MatAccordion, ɵngcc4.NgForOf, ɵngcc23.MatExpansionPanel, ɵngcc23.MatExpansionPanelHeader, ɵngcc23.MatExpansionPanelTitle, ɵngcc10.MatCheckbox, ɵngcc23.MatExpansionPanelDescription, ɵngcc7.MatTooltip, ɵngcc30.MatTable, ɵngcc30.MatColumnDef, ɵngcc30.MatHeaderCellDef, ɵngcc30.MatCellDef, ɵngcc30.MatHeaderRowDef, ɵngcc30.MatRowDef, ɵngcc30.MatHeaderCell, ɵngcc30.MatCell, ɵngcc30.MatHeaderRow, ɵngcc30.MatRow, ɵngcc17.MatSpinner], pipes: [ɵngcc4.AsyncPipe, ɵngcc8.TranslatePipe], styles: [".adf-aspect-list-spinner{align-items:center;display:flex;justify-content:center;min-height:400px}.adf-aspect-list-container{border:1px solid var(--theme-border-color);height:400px;overflow:auto;padding-top:3px}.adf-aspect-list-container .adf-aspect-list-check-button{align-items:center;display:flex;margin-right:5px}.adf-aspect-list-container .adf-aspect-list-element-title{align-items:center;display:flex}.adf-aspect-list-container .adf-accordion-aspect-list .mat-expansion-panel-spacing{margin:0}.adf-aspect-list-container .adf-accordion-aspect-list .mat-expansion-panel-header{font-size:smaller}.adf-aspect-list-container .adf-accordion-aspect-list .mat-expansion-panel-header-title{flex:1 1 0}.adf-aspect-list-container .adf-accordion-aspect-list .mat-expansion-panel-header-description{align-items:center;flex:1 1 0;justify-content:flex-start;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.adf-aspect-property-table{width:100%}.adf-aspect-property-table .mat-column-name{width:15%}.adf-aspect-property-table .mat-column-description{width:65%}.adf-aspect-property-table .mat-column-type{padding-left:10px;width:20%}"], encapsulation: 2 });
AspectListComponent.ctorParameters = () => [
    { type: AspectListService },
    { type: NodesApiService }
];
AspectListComponent.propDecorators = {
    nodeId: [{ type: Input }],
    valueChanged: [{ type: Output }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AspectListComponent, [{
        type: Component,
        args: [{
                selector: 'adf-aspect-list',
                template: "<div id=\"aspect-list-container\" class=\"adf-aspect-list-container\" *ngIf=\"aspects$ | async as aspects; else loading\">\n    <mat-accordion class=\"adf-accordion-aspect-list\">\n        <mat-expansion-panel *ngFor=\"let aspect of aspects; let colIndex = index\" [id]=\"'aspect-list-'+getId(aspect)\">\n            <mat-expansion-panel-header [id]=\"'aspect-list-'+(getId(aspect))+'header'\">\n                <mat-panel-title>\n                    <mat-checkbox class=\"adf-aspect-list-check-button\" [id]=\"'aspect-list-'+colIndex+'-check'\"\n                                  [checked]=\"nodeAspects?.includes(aspect?.entry?.id)\"\n                                  (click)=\"onCheckBoxClick($event)\"\n                                  (change)=\"onChange($event, aspect?.entry?.id)\">\n                    </mat-checkbox>\n                    <p class=\"adf-aspect-list-element-title\">{{getTitle(aspect)}}</p>\n                </mat-panel-title>\n                <mat-panel-description [id]=\"'aspect-list-'+colIndex+'-title'\"\n                                        [matTooltip]=\"getTitle(aspect)\">\n                    {{getTitle(aspect)}}\n                </mat-panel-description>\n            </mat-expansion-panel-header>\n            <p class=\"adf-property-paragraph\" [id]=\"'aspect-list-'+colIndex+'-description'\"> {{aspect?.entry?.description}}</p>\n\n            <table mat-table [dataSource]=\"aspect?.entry?.properties\" *ngIf=\"aspect?.entry?.properties?.length > 0\" class=\"adf-aspect-property-table\" [id]=\"'aspect-list-'+colIndex+'-properties-table'\">\n                <ng-container matColumnDef=\"name\">\n                  <th mat-header-cell *matHeaderCellDef> {{'ADF-ASPECT-LIST.PROPERTY_NAME' | translate}} </th>\n                  <td mat-cell *matCellDef=\"let property\"> {{property.id}} </td>\n                </ng-container>\n                <ng-container matColumnDef=\"title\">\n                  <th mat-header-cell *matHeaderCellDef> {{'ADF-ASPECT-LIST.DESCRIPTION' | translate}} </th>\n                  <td mat-cell *matCellDef=\"let property\"> {{property.title}} </td>\n                </ng-container>\n                <ng-container matColumnDef=\"dataType\">\n                  <th mat-header-cell *matHeaderCellDef> {{'ADF-ASPECT-LIST.DATA_TYPE' | translate}} </th>\n                  <td mat-cell *matCellDef=\"let property\"> {{property.dataType}} </td>\n                </ng-container>\n                <tr mat-header-row *matHeaderRowDef=\"propertyColumns\"></tr>\n                <tr mat-row *matRowDef=\"let row; columns: propertyColumns;\"></tr>\n              </table>\n        </mat-expansion-panel>\n    </mat-accordion>\n</div>\n\n<ng-template #loading>\n    <div class=\"adf-aspect-list-spinner\">\n       <mat-spinner id=\"adf-aspect-spinner\"></mat-spinner>\n    </div>\n</ng-template>\n",
                encapsulation: ViewEncapsulation.None,
                styles: [".adf-aspect-list-spinner{align-items:center;display:flex;justify-content:center;min-height:400px}.adf-aspect-list-container{border:1px solid var(--theme-border-color);height:400px;overflow:auto;padding-top:3px}.adf-aspect-list-container .adf-aspect-list-check-button{align-items:center;display:flex;margin-right:5px}.adf-aspect-list-container .adf-aspect-list-element-title{align-items:center;display:flex}.adf-aspect-list-container .adf-accordion-aspect-list .mat-expansion-panel-spacing{margin:0}.adf-aspect-list-container .adf-accordion-aspect-list .mat-expansion-panel-header{font-size:smaller}.adf-aspect-list-container .adf-accordion-aspect-list .mat-expansion-panel-header-title{flex:1 1 0}.adf-aspect-list-container .adf-accordion-aspect-list .mat-expansion-panel-header-description{align-items:center;flex:1 1 0;justify-content:flex-start;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.adf-aspect-property-table{width:100%}.adf-aspect-property-table .mat-column-name{width:15%}.adf-aspect-property-table .mat-column-description{width:65%}.adf-aspect-property-table .mat-column-type{padding-left:10px;width:20%}"]
            }]
    }], function () { return [{ type: AspectListService }, { type: ɵngcc1.NodesApiService }]; }, { nodeId: [{
            type: Input
        }], valueChanged: [{
            type: Output
        }] }); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class AspectListModule {
}
AspectListModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: AspectListModule });
AspectListModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function AspectListModule_Factory(t) { return new (t || AspectListModule)(); }, imports: [[
            CommonModule,
            MatTableModule,
            MatExpansionModule,
            MatCheckboxModule,
            PipeModule,
            TranslateModule,
            MatDialogModule,
            MatButtonModule,
            MatTooltipModule,
            MatProgressSpinnerModule
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(AspectListModule, { declarations: function () { return [AspectListComponent, AspectListDialogComponent]; }, imports: function () { return [CommonModule,
        MatTableModule,
        MatExpansionModule,
        MatCheckboxModule,
        PipeModule,
        TranslateModule,
        MatDialogModule,
        MatButtonModule,
        MatTooltipModule,
        MatProgressSpinnerModule]; }, exports: function () { return [AspectListComponent, AspectListDialogComponent]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AspectListModule, [{
        type: NgModule,
        args: [{
                imports: [
                    CommonModule,
                    MatTableModule,
                    MatExpansionModule,
                    MatCheckboxModule,
                    PipeModule,
                    TranslateModule,
                    MatDialogModule,
                    MatButtonModule,
                    MatTooltipModule,
                    MatProgressSpinnerModule
                ],
                exports: [
                    AspectListComponent,
                    AspectListDialogComponent
                ],
                declarations: [
                    AspectListComponent,
                    AspectListDialogComponent
                ]
            }]
    }], null, null); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class ContentTypeModule {
}
ContentTypeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: ContentTypeModule });
ContentTypeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function ContentTypeModule_Factory(t) { return new (t || ContentTypeModule)(); }, imports: [[
            CommonModule,
            MatTableModule,
            MatExpansionModule,
            MatCheckboxModule,
            TranslateModule,
            MatDialogModule,
            MatButtonModule
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ContentTypeModule, { declarations: function () { return [ContentTypeDialogComponent]; }, imports: function () { return [CommonModule,
        MatTableModule,
        MatExpansionModule,
        MatCheckboxModule,
        TranslateModule,
        MatDialogModule,
        MatButtonModule]; }, exports: function () { return [ContentTypeDialogComponent]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ContentTypeModule, [{
        type: NgModule,
        args: [{
                imports: [
                    CommonModule,
                    MatTableModule,
                    MatExpansionModule,
                    MatCheckboxModule,
                    TranslateModule,
                    MatDialogModule,
                    MatButtonModule
                ],
                exports: [
                    ContentTypeDialogComponent
                ],
                declarations: [
                    ContentTypeDialogComponent
                ]
            }]
    }], null, null); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const ɵ0$2 = {
    name: 'adf-content-services',
    source: 'assets/adf-content-services'
};
class ContentModule {
    static forRoot() {
        return {
            ngModule: ContentModule,
            providers: [
                {
                    provide: TRANSLATION_PROVIDER,
                    multi: true,
                    useValue: {
                        name: 'adf-content-services',
                        source: 'assets/adf-content-services'
                    }
                }
            ]
        };
    }
    static forChild() {
        return {
            ngModule: ContentModule
        };
    }
}
ContentModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: ContentModule });
ContentModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function ContentModule_Factory(t) { return new (t || ContentModule)(); }, providers: [
        {
            provide: TRANSLATION_PROVIDER,
            multi: true,
            useValue: ɵ0$2
        }
    ], imports: [[
            CoreModule,
            SocialModule,
            TagModule,
            CommonModule,
            WebScriptModule,
            FormsModule,
            ReactiveFormsModule,
            DialogModule,
            SearchModule,
            DocumentListModule,
            UploadModule,
            MaterialModule,
            SitesDropdownModule,
            BreadcrumbModule,
            ContentNodeSelectorModule,
            ContentNodeShareModule,
            ContentMetadataModule,
            FolderDirectiveModule,
            ContentDirectiveModule,
            PermissionManagerModule,
            VersionManagerModule,
            TreeViewModule,
            ContentTypeModule,
            AspectListModule
        ], SocialModule, TagModule, WebScriptModule, DocumentListModule, UploadModule, SearchModule, SitesDropdownModule, BreadcrumbModule, ContentNodeSelectorModule, ContentNodeShareModule, ContentMetadataModule, DialogModule, FolderDirectiveModule, ContentDirectiveModule, PermissionManagerModule, VersionManagerModule, TreeViewModule, AspectListModule, ContentTypeModule] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ContentModule, { imports: function () { return [CoreModule, SocialModule, TagModule, CommonModule, WebScriptModule, FormsModule,
        ReactiveFormsModule, DialogModule, SearchModule, DocumentListModule, UploadModule, MaterialModule, SitesDropdownModule, BreadcrumbModule, ContentNodeSelectorModule, ContentNodeShareModule, ContentMetadataModule, FolderDirectiveModule, ContentDirectiveModule, PermissionManagerModule, VersionManagerModule, TreeViewModule, ContentTypeModule, AspectListModule]; }, exports: function () { return [SocialModule, TagModule, WebScriptModule, DocumentListModule, UploadModule, SearchModule, SitesDropdownModule, BreadcrumbModule, ContentNodeSelectorModule, ContentNodeShareModule, ContentMetadataModule, DialogModule, FolderDirectiveModule, ContentDirectiveModule, PermissionManagerModule, VersionManagerModule, TreeViewModule, AspectListModule, ContentTypeModule]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ContentModule, [{
        type: NgModule,
        args: [{
                imports: [
                    CoreModule,
                    SocialModule,
                    TagModule,
                    CommonModule,
                    WebScriptModule,
                    FormsModule,
                    ReactiveFormsModule,
                    DialogModule,
                    SearchModule,
                    DocumentListModule,
                    UploadModule,
                    MaterialModule,
                    SitesDropdownModule,
                    BreadcrumbModule,
                    ContentNodeSelectorModule,
                    ContentNodeShareModule,
                    ContentMetadataModule,
                    FolderDirectiveModule,
                    ContentDirectiveModule,
                    PermissionManagerModule,
                    VersionManagerModule,
                    TreeViewModule,
                    ContentTypeModule,
                    AspectListModule
                ],
                providers: [
                    {
                        provide: TRANSLATION_PROVIDER,
                        multi: true,
                        useValue: ɵ0$2
                    }
                ],
                exports: [
                    SocialModule,
                    TagModule,
                    WebScriptModule,
                    DocumentListModule,
                    UploadModule,
                    SearchModule,
                    SitesDropdownModule,
                    BreadcrumbModule,
                    ContentNodeSelectorModule,
                    ContentNodeShareModule,
                    ContentMetadataModule,
                    DialogModule,
                    FolderDirectiveModule,
                    ContentDirectiveModule,
                    PermissionManagerModule,
                    VersionManagerModule,
                    TreeViewModule,
                    AspectListModule,
                    ContentTypeModule
                ]
            }]
    }], null, null); })();

/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

export { AddPermissionComponent, AddPermissionDialogComponent, AddPermissionPanelComponent, AspectListComponent, AspectListDialogComponent, AspectListModule, AspectListService, AspectOrientedConfigService, BasicPropertiesService, BreadcrumbComponent, BreadcrumbModule, ConfirmDialogComponent, ContentActionComponent, ContentActionListComponent, ContentActionModel, ContentActionTarget, ContentDirectiveModule, ContentInfo, ContentMetadataCardComponent, ContentMetadataComponent, ContentMetadataConfigFactory, ContentMetadataModule, ContentMetadataService, ContentModule, ContentNodeDialogService, ContentNodeSelectorComponent, ContentNodeSelectorModule, ContentNodeSelectorPanelComponent, ContentNodeSelectorPanelService, ContentNodeShareModule, ContentTypeDialogComponent, ContentTypeModule, ContentTypePropertiesService, ContentTypeService, ContentVersionService, CustomResourcesService, DialogModule, DocumentActionModel, DocumentActionsService, DocumentListComponent, DocumentListModule, DocumentListService, DropdownBreadcrumbComponent, DropdownSitesComponent, EmptySearchResultComponent, FileDraggableDirective, FileUploadErrorPipe, FileUploadingDialogComponent, FileUploadingListComponent, FileUploadingListRowComponent, FilterHeaderComponent, FolderActionModel, FolderActionsService, FolderCreateDirective, FolderDialogComponent, FolderDirectiveModule, FolderEditDirective, GroupService, IndifferentConfigService, InheritPermissionDirective, LayoutOrientedConfigService, LibraryDialogComponent, LibraryNameColumnComponent, LibraryRoleColumnComponent, LibraryStatusColumnComponent, LikeComponent, MemberModel, NameColumnComponent, NameLocationCellComponent, NodeAction, NodeActionsService, NodeAspectService, NodeCounterComponent, NodeCounterDirective, NodeEntityEvent, NodeEntryEvent, NodeLockDialogComponent, NodeLockDirective, NodeMinimal, NodeMinimalEntry, NodePaging, NodePagingList, NodePathColumnComponent, NodePermissionDialogService, NodePermissionService, NodeSharedDirective, Pagination, PathElementEntity, PathInfoEntity, PermissionContainerComponent, PermissionDisplayModel, PermissionListComponent, PermissionManagerModule, PermissionModel, PermissionStyleModel, PopOverDirective, PropertyDescriptorsService, PropertyGroupTranslatorService, RatingComponent, RatingService, Relations, ResetSearchDirective, SEARCH_QUERY_SERVICE_TOKEN, SEARCH_QUERY_TOKEN, SearchCheckListComponent, SearchChipListComponent, SearchComponent, SearchControlComponent, SearchDateRangeComponent, SearchDatetimeRangeComponent, SearchFacetFieldComponent, SearchFacetFiltersService, SearchFilterChipsComponent, SearchFilterComponent, SearchFilterContainerComponent, SearchFilterMenuCardComponent, SearchFilterService, SearchFormComponent, SearchHeaderQueryBuilderService, SearchModule, SearchNumberRangeComponent, SearchPanelComponent, SearchPermissionConfigurationService, SearchQueryBuilderService, SearchRadioComponent, SearchSliderComponent, SearchSortingPickerComponent, SearchTextComponent, SearchWidgetContainerComponent, ShareDataRow, ShareDataTableAdapter, ShareDialogComponent, SitesDropdownModule, SocialModule, TagActionsComponent, TagListComponent, TagModule, TagNodeListComponent, TagService, ToggleIconDirective, TrashcanNameColumnComponent, TreeBaseNode, TreeViewComponent, TreeViewDataSource, TreeViewModule, TreeViewService, UploadBase, UploadButtonComponent, UploadDragAreaComponent, UploadFilesEvent, UploadModule, UploadVersionButtonComponent, UserIconColumnComponent, UserInfo, UserNameColumnComponent, UserRoleColumnComponent, VersionComparisonComponent, VersionListComponent, VersionManagerComponent, VersionManagerModule, VersionUploadComponent, WebScriptModule, WebscriptComponent, defaultValidation, forbidEndingDot, forbidOnlySpaces, forbidSpecialCharacters, ɵ0, MaterialModule as ɵa, BaseQueryBuilderService as ɵb, SearchWidgetChipComponent as ɵc, SearchFacetChipComponent as ɵd, PermissionListService as ɵe };

//# sourceMappingURL=adf-content-services.js.map