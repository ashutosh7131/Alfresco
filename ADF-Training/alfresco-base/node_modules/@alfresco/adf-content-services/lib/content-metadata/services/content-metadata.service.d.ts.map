{"version":3,"file":"content-metadata.service.d.ts","sources":["content-metadata.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Node } from '@alfresco/js-api';\nimport { BasicPropertiesService } from './basic-properties.service';\nimport { Observable, Subject } from 'rxjs';\nimport { PropertyGroupTranslatorService } from './property-groups-translator.service';\nimport { CardViewItem } from '@alfresco/adf-core';\nimport { CardViewGroup, OrganisedPropertyGroup, PresetConfig } from '../interfaces/content-metadata.interfaces';\nimport { ContentMetadataConfigFactory } from './config/content-metadata-config.factory';\nimport { PropertyDescriptorsService } from './property-descriptors.service';\nimport { ContentTypePropertiesService } from './content-type-property.service';\nexport declare class ContentMetadataService {\n    private basicPropertiesService;\n    private contentMetadataConfigFactory;\n    private propertyGroupTranslatorService;\n    private propertyDescriptorsService;\n    private contentTypePropertyService;\n    error: Subject<{\n        statusCode: number;\n        message: string;\n    }>;\n    constructor(basicPropertiesService: BasicPropertiesService, contentMetadataConfigFactory: ContentMetadataConfigFactory, propertyGroupTranslatorService: PropertyGroupTranslatorService, propertyDescriptorsService: PropertyDescriptorsService, contentTypePropertyService: ContentTypePropertiesService);\n    getBasicProperties(node: Node): Observable<CardViewItem[]>;\n    getContentTypeProperty(node: Node): Observable<CardViewItem[]>;\n    openConfirmDialog(changedProperties: any): Observable<any>;\n    getGroupedProperties(node: Node, preset?: string | PresetConfig): Observable<CardViewGroup[]>;\n    setTitleToNameIfNotSet(propertyGroups: OrganisedPropertyGroup[]): OrganisedPropertyGroup[];\n    filterEmptyPreset(propertyGroups: OrganisedPropertyGroup[]): OrganisedPropertyGroup[];\n}\n"]}