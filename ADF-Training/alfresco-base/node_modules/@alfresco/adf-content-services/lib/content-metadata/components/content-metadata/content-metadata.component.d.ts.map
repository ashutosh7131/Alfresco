{"version":3,"file":"content-metadata.component.d.ts","sources":["content-metadata.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { OnChanges, OnDestroy, OnInit, SimpleChanges } from '@angular/core';\nimport { Node } from '@alfresco/js-api';\nimport { Observable, Subject } from 'rxjs';\nimport { CardViewItem, NodesApiService, LogService, CardViewUpdateService, AlfrescoApiService, TranslationService, AppConfigService } from '@alfresco/adf-core';\nimport { ContentMetadataService } from '../../services/content-metadata.service';\nimport { CardViewGroup, PresetConfig } from '../../interfaces/content-metadata.interfaces';\nexport declare class ContentMetadataComponent implements OnChanges, OnInit, OnDestroy {\n    private contentMetadataService;\n    private cardViewUpdateService;\n    private nodesApiService;\n    private logService;\n    private alfrescoApiService;\n    private translationService;\n    private appConfig;\n    static DEFAULT_SEPARATOR: string;\n    protected onDestroy$: Subject<boolean>;\n    node: Node;\n    editable: boolean;\n    displayEmpty: boolean;\n    expanded: boolean;\n    multi: boolean;\n    preset: string | PresetConfig;\n    displayDefaultProperties: boolean;\n    displayAspect: string;\n    copyToClipboardAction: boolean;\n    useChipsForMultiValueProperty: boolean;\n    multiValueSeparator: string;\n    basicProperties$: Observable<CardViewItem[]>;\n    groupedProperties$: Observable<CardViewGroup[]>;\n    changedProperties: {};\n    hasMetadataChanged: boolean;\n    private targetProperty;\n    constructor(contentMetadataService: ContentMetadataService, cardViewUpdateService: CardViewUpdateService, nodesApiService: NodesApiService, logService: LogService, alfrescoApiService: AlfrescoApiService, translationService: TranslationService, appConfig: AppConfigService);\n    ngOnInit(): void;\n    protected handleUpdateError(error: Error): void;\n    ngOnChanges(changes: SimpleChanges): void;\n    private loadProperties;\n    private getProperties;\n    updateChanges(updatedNodeChanges: any): void;\n    saveChanges(): void;\n    private updateNode;\n    private hasContentTypeChanged;\n    revertChanges(): void;\n    cancelChanges(): void;\n    showGroup(group: CardViewGroup): boolean;\n    ngOnDestroy(): void;\n    canExpandTheCard(group: CardViewGroup): boolean;\n    canExpandProperties(): boolean;\n    keyDown(event: KeyboardEvent): void;\n    private isEmpty;\n}\n"]}