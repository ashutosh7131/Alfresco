/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { OnChanges, OnDestroy, OnInit, SimpleChanges } from '@angular/core';
import { Node } from '@alfresco/js-api';
import { Observable, Subject } from 'rxjs';
import { CardViewItem, NodesApiService, LogService, CardViewUpdateService, AlfrescoApiService, TranslationService, AppConfigService } from '@alfresco/adf-core';
import { ContentMetadataService } from '../../services/content-metadata.service';
import { CardViewGroup, PresetConfig } from '../../interfaces/content-metadata.interfaces';
export declare class ContentMetadataComponent implements OnChanges, OnInit, OnDestroy {
    private contentMetadataService;
    private cardViewUpdateService;
    private nodesApiService;
    private logService;
    private alfrescoApiService;
    private translationService;
    private appConfig;
    static DEFAULT_SEPARATOR: string;
    protected onDestroy$: Subject<boolean>;
    node: Node;
    editable: boolean;
    displayEmpty: boolean;
    expanded: boolean;
    multi: boolean;
    preset: string | PresetConfig;
    displayDefaultProperties: boolean;
    displayAspect: string;
    copyToClipboardAction: boolean;
    useChipsForMultiValueProperty: boolean;
    multiValueSeparator: string;
    basicProperties$: Observable<CardViewItem[]>;
    groupedProperties$: Observable<CardViewGroup[]>;
    changedProperties: {};
    hasMetadataChanged: boolean;
    private targetProperty;
    constructor(contentMetadataService: ContentMetadataService, cardViewUpdateService: CardViewUpdateService, nodesApiService: NodesApiService, logService: LogService, alfrescoApiService: AlfrescoApiService, translationService: TranslationService, appConfig: AppConfigService);
    ngOnInit(): void;
    protected handleUpdateError(error: Error): void;
    ngOnChanges(changes: SimpleChanges): void;
    private loadProperties;
    private getProperties;
    updateChanges(updatedNodeChanges: any): void;
    saveChanges(): void;
    private updateNode;
    private hasContentTypeChanged;
    revertChanges(): void;
    cancelChanges(): void;
    showGroup(group: CardViewGroup): boolean;
    ngOnDestroy(): void;
    canExpandTheCard(group: CardViewGroup): boolean;
    canExpandProperties(): boolean;
    keyDown(event: KeyboardEvent): void;
    private isEmpty;
}
