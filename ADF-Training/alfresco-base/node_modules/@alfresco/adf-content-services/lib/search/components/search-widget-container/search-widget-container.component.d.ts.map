{"version":3,"file":"search-widget-container.component.d.ts","sources":["search-widget-container.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { ViewContainerRef, OnInit, OnDestroy, ComponentRef, ComponentFactoryResolver, SimpleChanges, OnChanges } from '@angular/core';\nimport { SearchFilterService } from '../../services/search-filter.service';\nimport { BaseQueryBuilderService } from '../../services/base-query-builder.service';\nimport { Observable } from 'rxjs';\nexport declare class SearchWidgetContainerComponent implements OnInit, OnDestroy, OnChanges {\n    private searchFilterService;\n    private queryBuilder;\n    private componentFactoryResolver;\n    content: ViewContainerRef;\n    id: string;\n    selector: string;\n    settings: any;\n    config: any;\n    value: any;\n    componentRef: ComponentRef<any>;\n    constructor(searchFilterService: SearchFilterService, queryBuilder: BaseQueryBuilderService, componentFactoryResolver: ComponentFactoryResolver);\n    ngOnInit(): void;\n    ngOnChanges(changes: SimpleChanges): void;\n    private setupWidget;\n    ngOnDestroy(): void;\n    applyInnerWidget(): void;\n    setValue(currentValue: string | Object): void;\n    hasValueSelected(): any;\n    getCurrentValue(): any;\n    getDisplayValue(): Observable<string> | null;\n    resetInnerWidget(): void;\n}\n"]}