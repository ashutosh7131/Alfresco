/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { SearchService, SearchComponentInterface } from '@alfresco/adf-core';
import { AfterContentInit, ElementRef, EventEmitter, OnChanges, TemplateRef, OnDestroy } from '@angular/core';
import { NodePaging, ResultSetPaging } from '@alfresco/js-api';
import { Subject } from 'rxjs';
import * as ɵngcc0 from '@angular/core';
export declare class SearchComponent implements SearchComponentInterface, AfterContentInit, OnChanges, OnDestroy {
    private searchService;
    private _elementRef;
    panel: ElementRef;
    template: TemplateRef<any>;
    displayWith: ((value: any) => string) | null;
    maxResults: number;
    skipResults: number;
    searchTerm: string;
    set classList(classList: string);
    resultLoaded: EventEmitter<NodePaging>;
    error: EventEmitter<any>;
    showPanel: boolean;
    results: NodePaging;
    get isOpen(): boolean;
    set isOpen(value: boolean);
    _isOpen: boolean;
    keyPressedStream: Subject<string>;
    _classList: {
        [key: string]: boolean;
    };
    private onDestroy$;
    constructor(searchService: SearchService, _elementRef: ElementRef);
    ngAfterContentInit(): void;
    ngOnChanges(changes: any): void;
    ngOnDestroy(): void;
    resetResults(): void;
    reload(): void;
    private cleanResults;
    private loadSearchResults;
    onSearchDataLoaded(resultSetPaging: ResultSetPaging): void;
    onSearchDataError(error: any): void;
    hidePanel(): void;
    setVisibility(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<SearchComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<SearchComponent, "adf-search", ["searchAutocomplete"], { "displayWith": "displayWith"; "maxResults": "maxResults"; "skipResults": "skipResults"; "searchTerm": "searchTerm"; "classList": "class"; }, { "resultLoaded": "resultLoaded"; "error": "error"; }, ["template"], never>;
}

//# sourceMappingURL=search.component.d.ts.map