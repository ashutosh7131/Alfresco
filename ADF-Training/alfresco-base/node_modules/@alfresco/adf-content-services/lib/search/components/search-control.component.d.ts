/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { AuthenticationService, ThumbnailService, SearchTextInputComponent } from '@alfresco/adf-core';
import { EventEmitter, OnDestroy, TemplateRef } from '@angular/core';
import { NodeEntry } from '@alfresco/js-api';
import { Subject } from 'rxjs';
import { SearchComponent } from './search.component';
import { EmptySearchResultComponent } from './empty-search-result.component';
import * as ɵngcc0 from '@angular/core';
export declare class SearchControlComponent implements OnDestroy {
    authService: AuthenticationService;
    private thumbnailService;
    highlight: boolean;
    inputType: string;
    liveSearchEnabled: boolean;
    autocomplete: boolean;
    expandable: boolean;
    liveSearchMaxResults: number;
    submit: EventEmitter<any>;
    searchChange: EventEmitter<string>;
    optionClicked: EventEmitter<any>;
    searchTextInput: SearchTextInputComponent;
    searchAutocomplete: SearchComponent;
    private listResultElement;
    emptySearchTemplate: EmptySearchResultComponent;
    focusSubject: Subject<FocusEvent>;
    noSearchResultTemplate: TemplateRef<any>;
    searchTerm: string;
    private onDestroy$;
    constructor(authService: AuthenticationService, thumbnailService: ThumbnailService);
    isNoSearchTemplatePresent(): boolean;
    ngOnDestroy(): void;
    isLoggedIn(): boolean;
    inputChange(value: string): void;
    getMimeTypeIcon(node: NodeEntry): string;
    getMimeType(node: NodeEntry): string;
    elementClicked(item: any): void;
    onFocus(event: FocusEvent): void;
    onBlur(event: FocusEvent): void;
    onSelectFirstResult(): void;
    onRowArrowDown(event: Event): void;
    onRowArrowUp(event: Event): void;
    onReset(status: boolean): void;
    private isListElement;
    private getNextElementSibling;
    private getPreviousElementSibling;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<SearchControlComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<SearchControlComponent, "adf-search-control", never, { "highlight": "highlight"; "inputType": "inputType"; "liveSearchEnabled": "liveSearchEnabled"; "autocomplete": "autocomplete"; "expandable": "expandable"; "liveSearchMaxResults": "liveSearchMaxResults"; }, { "submit": "submit"; "searchChange": "searchChange"; "optionClicked": "optionClicked"; }, ["emptySearchTemplate"], ["*"]>;
}

//# sourceMappingURL=search-control.component.d.ts.map