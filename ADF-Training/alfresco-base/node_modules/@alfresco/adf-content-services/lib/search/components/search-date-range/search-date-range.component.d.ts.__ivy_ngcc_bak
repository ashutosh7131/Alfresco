/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { OnDestroy, OnInit } from '@angular/core';
import { FormControl, FormGroup } from '@angular/forms';
import { DateAdapter } from '@angular/material/core';
import { UserPreferencesService } from '@alfresco/adf-core';
import { SearchWidget } from '../../models/search-widget.interface';
import { SearchWidgetSettings } from '../../models/search-widget-settings.interface';
import { SearchQueryBuilderService } from '../../services/search-query-builder.service';
import { LiveErrorStateMatcher } from '../../forms/live-error-state-matcher';
import { Moment } from 'moment';
import { Subject } from 'rxjs';
export interface DateRangeValue {
    from: string;
    to: string;
}
export declare class SearchDateRangeComponent implements SearchWidget, OnInit, OnDestroy {
    private dateAdapter;
    private userPreferencesService;
    from: FormControl;
    to: FormControl;
    form: FormGroup;
    matcher: LiveErrorStateMatcher;
    id: string;
    settings?: SearchWidgetSettings;
    context?: SearchQueryBuilderService;
    datePickerFormat: string;
    maxDate: any;
    fromMaxDate: any;
    isActive: boolean;
    startValue: any;
    enableChangeUpdate: boolean;
    displayValue$: Subject<string>;
    private onDestroy$;
    constructor(dateAdapter: DateAdapter<Moment>, userPreferencesService: UserPreferencesService);
    getFromValidationMessage(): string;
    getToValidationMessage(): string;
    ngOnInit(): void;
    ngOnDestroy(): void;
    apply(model: {
        from: string;
        to: string;
    }, isValid: boolean): void;
    submitValues(): void;
    hasValidValue(): boolean;
    getCurrentValue(): DateRangeValue;
    updateDisplayValue(): void;
    setValue(parsedDate: string): void;
    clear(): void;
    reset(): void;
    private updateQuery;
    onChangedHandler(event: any, formControl: FormControl): void;
    setLocale(locale: any): void;
    hasParseError(formControl: any): boolean;
    forcePlaceholder(event: any): void;
    setFromMaxDate(): void;
}
