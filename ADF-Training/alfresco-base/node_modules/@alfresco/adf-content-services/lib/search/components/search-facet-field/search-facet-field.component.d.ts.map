{"version":3,"file":"search-facet-field.component.d.ts","sources":["search-facet-field.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { FacetField } from '../../models/facet-field.interface';\nimport { MatCheckboxChange } from '@angular/material/checkbox';\nimport { FacetFieldBucket } from '../../models/facet-field-bucket.interface';\nimport { SearchQueryBuilderService } from '../../services/search-query-builder.service';\nimport { SearchFacetFiltersService } from '../../services/search-facet-filters.service';\nimport { FacetWidget } from '../../models/facet-widget.interface';\nimport { TranslationService } from '@alfresco/adf-core';\nimport { Subject } from 'rxjs';\nexport declare class SearchFacetFieldComponent implements FacetWidget {\n    queryBuilder: SearchQueryBuilderService;\n    private searchFacetFiltersService;\n    private translationService;\n    field: FacetField;\n    displayValue$: Subject<string>;\n    constructor(queryBuilder: SearchQueryBuilderService, searchFacetFiltersService: SearchFacetFiltersService, translationService: TranslationService);\n    get canUpdateOnChange(): boolean;\n    onToggleBucket(event: MatCheckboxChange, field: FacetField, bucket: FacetFieldBucket): void;\n    selectFacetBucket(field: FacetField, bucket: FacetFieldBucket): void;\n    unselectFacetBucket(field: FacetField, bucket: FacetFieldBucket): void;\n    canResetSelectedBuckets(field: FacetField): boolean;\n    resetSelectedBuckets(field: FacetField): void;\n    getBucketCountDisplay(bucket: FacetFieldBucket): string;\n    updateDisplayValue(): void;\n    reset(): void;\n    submitValues(): void;\n}\n"]}