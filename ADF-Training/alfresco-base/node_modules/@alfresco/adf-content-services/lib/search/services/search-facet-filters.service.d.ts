/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { OnDestroy } from '@angular/core';
import { FacetField } from '../models/facet-field.interface';
import { SearchQueryBuilderService } from './search-query-builder.service';
import { SearchService, TranslationService } from '@alfresco/adf-core';
import { FacetFieldBucket } from '../models/facet-field-bucket.interface';
import * as ɵngcc0 from '@angular/core';
export interface SelectedBucket {
    field: FacetField;
    bucket: FacetFieldBucket;
}
export declare class SearchFacetFiltersService implements OnDestroy {
    queryBuilder: SearchQueryBuilderService;
    private searchService;
    private translationService;
    responseFacets: FacetField[];
    selectedBuckets: SelectedBucket[];
    private DEFAULT_PAGE_SIZE;
    private readonly facetQueriesPageSize;
    private readonly onDestroy$;
    constructor(queryBuilder: SearchQueryBuilderService, searchService: SearchService, translationService: TranslationService);
    onDataLoaded(data: any): void;
    private parseFacets;
    private parseFacetItems;
    private parseFacetFields;
    private parseFacetIntervals;
    private parseFacetQueries;
    private getResponseBuckets;
    private getResponseQueryBuckets;
    private getCountValue;
    getBucketCountDisplay(bucket: FacetFieldBucket): string;
    private getFilterByMinCount;
    private getCorrespondingFilterQuery;
    private buildIntervalQuery;
    private findFacet;
    private findResponseFacet;
    private updateExistingBuckets;
    private getBucketFilterFunction;
    unselectFacetBucket(field: FacetField, bucket: FacetFieldBucket): void;
    updateSelectedBuckets(): void;
    ngOnDestroy(): void;
    resetAllSelectedBuckets(): void;
    resetQueryFragments(): void;
    reset(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<SearchFacetFiltersService, never>;
}

//# sourceMappingURL=search-facet-filters.service.d.ts.map