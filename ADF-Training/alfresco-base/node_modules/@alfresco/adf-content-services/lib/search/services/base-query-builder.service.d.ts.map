{"version":3,"file":"base-query-builder.service.d.ts","sources":["base-query-builder.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Subject, Observable, ReplaySubject } from 'rxjs';\nimport { AlfrescoApiService, AppConfigService } from '@alfresco/adf-core';\nimport { QueryBody, RequestFacetFields, RequestSortDefinitionInner, ResultSetPaging, RequestHighlight, RequestScope, SearchApi } from '@alfresco/js-api';\nimport { SearchCategory } from '../models/search-category.interface';\nimport { FilterQuery } from '../models/filter-query.interface';\nimport { SearchRange } from '../models/search-range.interface';\nimport { SearchConfiguration } from '../models/search-configuration.interface';\nimport { FacetQuery } from '../models/facet-query.interface';\nimport { SearchSortingDefinition } from '../models/search-sorting-definition.interface';\nimport { FacetField } from '../models/facet-field.interface';\nimport { FacetFieldBucket } from '../models/facet-field-bucket.interface';\nimport { SearchForm } from '../models/search-form.interface';\nexport declare abstract class BaseQueryBuilderService {\n    protected appConfig: AppConfigService;\n    protected alfrescoApiService: AlfrescoApiService;\n    _searchApi: SearchApi;\n    get searchApi(): SearchApi;\n    configUpdated: Subject<SearchConfiguration>;\n    updated: Subject<QueryBody>;\n    executed: Subject<ResultSetPaging>;\n    error: Subject<unknown>;\n    searchForms: ReplaySubject<SearchForm[]>;\n    categories: SearchCategory[];\n    queryFragments: {\n        [id: string]: string;\n    };\n    filterQueries: FilterQuery[];\n    paging: {\n        maxItems?: number;\n        skipCount?: number;\n    };\n    sorting: SearchSortingDefinition[];\n    sortingOptions: SearchSortingDefinition[];\n    private scope;\n    private selectedConfiguration;\n    private _userQuery;\n    protected userFacetBuckets: {\n        [key: string]: FacetFieldBucket[];\n    };\n    get userQuery(): string;\n    set userQuery(value: string);\n    config: SearchConfiguration;\n    ranges: {\n        [id: string]: SearchRange;\n    };\n    constructor(appConfig: AppConfigService, alfrescoApiService: AlfrescoApiService);\n    abstract loadConfiguration(): SearchConfiguration | SearchConfiguration[];\n    abstract isFilterServiceActive(): boolean;\n    resetToDefaults(): void;\n    getDefaultConfiguration(): SearchConfiguration | undefined;\n    updateSelectedConfiguration(index: number): void;\n    private resetSearchOptions;\n    getSearchFormDetails(): SearchForm[];\n    private setUpSearchConfiguration;\n    addUserFacetBucket(field: FacetField, bucket: FacetFieldBucket): void;\n    getUserFacetBuckets(field: string): FacetFieldBucket[];\n    removeUserFacetBucket(field: FacetField, bucket: FacetFieldBucket): void;\n    addFilterQuery(query: string): void;\n    removeFilterQuery(query: string): void;\n    getFacetQuery(label: string): FacetQuery;\n    getFacetField(label: string): FacetField;\n    setScope(scope: RequestScope): void;\n    getScope(): RequestScope;\n    update(queryBody?: QueryBody): void;\n    execute(queryBody?: QueryBody): Promise<void>;\n    search(queryBody: QueryBody): Observable<ResultSetPaging>;\n    buildQuery(): QueryBody;\n    getPrimarySorting(): SearchSortingDefinition;\n    getSortingOptions(): SearchSortingDefinition[];\n    getQueryGroup(query: any): any;\n    get hasFacetQueries(): boolean;\n    get hasFacetIntervals(): boolean;\n    get hasFacetHighlight(): boolean;\n    protected get sort(): RequestSortDefinitionInner[];\n    protected get facetQueries(): FacetQuery[];\n    protected get facetIntervals(): any;\n    protected get highlight(): RequestHighlight;\n    protected getFinalQuery(): string;\n    protected get facetFields(): RequestFacetFields;\n    getSupportedLabel(configLabel: string): string;\n}\n"]}