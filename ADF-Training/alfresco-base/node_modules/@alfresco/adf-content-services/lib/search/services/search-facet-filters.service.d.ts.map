{"version":3,"file":"search-facet-filters.service.d.ts","sources":["search-facet-filters.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { OnDestroy } from '@angular/core';\nimport { FacetField } from '../models/facet-field.interface';\nimport { SearchQueryBuilderService } from './search-query-builder.service';\nimport { SearchService, TranslationService } from '@alfresco/adf-core';\nimport { FacetFieldBucket } from '../models/facet-field-bucket.interface';\nexport interface SelectedBucket {\n    field: FacetField;\n    bucket: FacetFieldBucket;\n}\nexport declare class SearchFacetFiltersService implements OnDestroy {\n    queryBuilder: SearchQueryBuilderService;\n    private searchService;\n    private translationService;\n    responseFacets: FacetField[];\n    selectedBuckets: SelectedBucket[];\n    private DEFAULT_PAGE_SIZE;\n    private readonly facetQueriesPageSize;\n    private readonly onDestroy$;\n    constructor(queryBuilder: SearchQueryBuilderService, searchService: SearchService, translationService: TranslationService);\n    onDataLoaded(data: any): void;\n    private parseFacets;\n    private parseFacetItems;\n    private parseFacetFields;\n    private parseFacetIntervals;\n    private parseFacetQueries;\n    private getResponseBuckets;\n    private getResponseQueryBuckets;\n    private getCountValue;\n    getBucketCountDisplay(bucket: FacetFieldBucket): string;\n    private getFilterByMinCount;\n    private getCorrespondingFilterQuery;\n    private buildIntervalQuery;\n    private findFacet;\n    private findResponseFacet;\n    private updateExistingBuckets;\n    private getBucketFilterFunction;\n    unselectFacetBucket(field: FacetField, bucket: FacetFieldBucket): void;\n    updateSelectedBuckets(): void;\n    ngOnDestroy(): void;\n    resetAllSelectedBuckets(): void;\n    resetQueryFragments(): void;\n    reset(): void;\n}\n"]}