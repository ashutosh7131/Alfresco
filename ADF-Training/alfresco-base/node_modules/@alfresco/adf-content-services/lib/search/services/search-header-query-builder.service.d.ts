/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { AlfrescoApiService, AppConfigService, NodesApiService, DataSorting } from '@alfresco/adf-core';
import { SearchConfiguration } from '../models/search-configuration.interface';
import { BaseQueryBuilderService } from './base-query-builder.service';
import { SearchCategory } from '../models/search-category.interface';
import { MinimalNode } from '@alfresco/js-api';
import { Observable } from 'rxjs';
import { FilterSearch } from '../models/filter-search.interface';
import * as ɵngcc0 from '@angular/core';
export declare class SearchHeaderQueryBuilderService extends BaseQueryBuilderService {
    private nodeApiService;
    private customSources;
    activeFilters: FilterSearch[];
    constructor(appConfig: AppConfigService, alfrescoApiService: AlfrescoApiService, nodeApiService: NodesApiService);
    isFilterServiceActive(): boolean;
    loadConfiguration(): SearchConfiguration;
    setupCurrentPagination(maxItems: number, skipCount: number): void;
    setActiveFilter(columnActivated: string, filterValue: string): void;
    resetActiveFilters(): void;
    getActiveFilters(): FilterSearch[];
    isNoFilterActive(): boolean;
    removeActiveFilter(columnRemoved: string): void;
    setSorting(dataSorting: DataSorting[]): void;
    private getSortingFieldFromColumnName;
    getCategoryForColumn(columnKey: string): SearchCategory;
    setCurrentRootFolderId(currentFolderId: string): void;
    isCustomSourceNode(currentNodeId: string): boolean;
    getNodeIdForCustomSource(customSourceId: string): Observable<MinimalNode>;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<SearchHeaderQueryBuilderService, never>;
}

//# sourceMappingURL=search-header-query-builder.service.d.ts.map