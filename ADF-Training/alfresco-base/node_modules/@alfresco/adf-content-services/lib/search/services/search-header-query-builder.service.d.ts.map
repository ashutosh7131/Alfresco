{"version":3,"file":"search-header-query-builder.service.d.ts","sources":["search-header-query-builder.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { AlfrescoApiService, AppConfigService, NodesApiService, DataSorting } from '@alfresco/adf-core';\nimport { SearchConfiguration } from '../models/search-configuration.interface';\nimport { BaseQueryBuilderService } from './base-query-builder.service';\nimport { SearchCategory } from '../models/search-category.interface';\nimport { MinimalNode } from '@alfresco/js-api';\nimport { Observable } from 'rxjs';\nimport { FilterSearch } from '../models/filter-search.interface';\nexport declare class SearchHeaderQueryBuilderService extends BaseQueryBuilderService {\n    private nodeApiService;\n    private customSources;\n    activeFilters: FilterSearch[];\n    constructor(appConfig: AppConfigService, alfrescoApiService: AlfrescoApiService, nodeApiService: NodesApiService);\n    isFilterServiceActive(): boolean;\n    loadConfiguration(): SearchConfiguration;\n    setupCurrentPagination(maxItems: number, skipCount: number): void;\n    setActiveFilter(columnActivated: string, filterValue: string): void;\n    resetActiveFilters(): void;\n    getActiveFilters(): FilterSearch[];\n    isNoFilterActive(): boolean;\n    removeActiveFilter(columnRemoved: string): void;\n    setSorting(dataSorting: DataSorting[]): void;\n    private getSortingFieldFromColumnName;\n    getCategoryForColumn(columnKey: string): SearchCategory;\n    setCurrentRootFolderId(currentFolderId: string): void;\n    isCustomSourceNode(currentNodeId: string): boolean;\n    getNodeIdForCustomSource(customSourceId: string): Observable<MinimalNode>;\n}\n"]}