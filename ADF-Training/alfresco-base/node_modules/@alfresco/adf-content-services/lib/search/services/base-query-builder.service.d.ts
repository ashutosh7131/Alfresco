/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Subject, Observable, ReplaySubject } from 'rxjs';
import { AlfrescoApiService, AppConfigService } from '@alfresco/adf-core';
import { QueryBody, RequestFacetFields, RequestSortDefinitionInner, ResultSetPaging, RequestHighlight, RequestScope, SearchApi } from '@alfresco/js-api';
import { SearchCategory } from '../models/search-category.interface';
import { FilterQuery } from '../models/filter-query.interface';
import { SearchRange } from '../models/search-range.interface';
import { SearchConfiguration } from '../models/search-configuration.interface';
import { FacetQuery } from '../models/facet-query.interface';
import { SearchSortingDefinition } from '../models/search-sorting-definition.interface';
import { FacetField } from '../models/facet-field.interface';
import { FacetFieldBucket } from '../models/facet-field-bucket.interface';
import { SearchForm } from '../models/search-form.interface';
import * as ɵngcc0 from '@angular/core';
export declare abstract class BaseQueryBuilderService {
    protected appConfig: AppConfigService;
    protected alfrescoApiService: AlfrescoApiService;
    _searchApi: SearchApi;
    get searchApi(): SearchApi;
    configUpdated: Subject<SearchConfiguration>;
    updated: Subject<QueryBody>;
    executed: Subject<ResultSetPaging>;
    error: Subject<unknown>;
    searchForms: ReplaySubject<SearchForm[]>;
    categories: SearchCategory[];
    queryFragments: {
        [id: string]: string;
    };
    filterQueries: FilterQuery[];
    paging: {
        maxItems?: number;
        skipCount?: number;
    };
    sorting: SearchSortingDefinition[];
    sortingOptions: SearchSortingDefinition[];
    private scope;
    private selectedConfiguration;
    private _userQuery;
    protected userFacetBuckets: {
        [key: string]: FacetFieldBucket[];
    };
    get userQuery(): string;
    set userQuery(value: string);
    config: SearchConfiguration;
    ranges: {
        [id: string]: SearchRange;
    };
    constructor(appConfig: AppConfigService, alfrescoApiService: AlfrescoApiService);
    abstract loadConfiguration(): SearchConfiguration | SearchConfiguration[];
    abstract isFilterServiceActive(): boolean;
    resetToDefaults(): void;
    getDefaultConfiguration(): SearchConfiguration | undefined;
    updateSelectedConfiguration(index: number): void;
    private resetSearchOptions;
    getSearchFormDetails(): SearchForm[];
    private setUpSearchConfiguration;
    addUserFacetBucket(field: FacetField, bucket: FacetFieldBucket): void;
    getUserFacetBuckets(field: string): FacetFieldBucket[];
    removeUserFacetBucket(field: FacetField, bucket: FacetFieldBucket): void;
    addFilterQuery(query: string): void;
    removeFilterQuery(query: string): void;
    getFacetQuery(label: string): FacetQuery;
    getFacetField(label: string): FacetField;
    setScope(scope: RequestScope): void;
    getScope(): RequestScope;
    update(queryBody?: QueryBody): void;
    execute(queryBody?: QueryBody): Promise<void>;
    search(queryBody: QueryBody): Observable<ResultSetPaging>;
    buildQuery(): QueryBody;
    getPrimarySorting(): SearchSortingDefinition;
    getSortingOptions(): SearchSortingDefinition[];
    getQueryGroup(query: any): any;
    get hasFacetQueries(): boolean;
    get hasFacetIntervals(): boolean;
    get hasFacetHighlight(): boolean;
    protected get sort(): RequestSortDefinitionInner[];
    protected get facetQueries(): FacetQuery[];
    protected get facetIntervals(): any;
    protected get highlight(): RequestHighlight;
    protected getFinalQuery(): string;
    protected get facetFields(): RequestFacetFields;
    getSupportedLabel(configLabel: string): string;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<BaseQueryBuilderService, never>;
}

//# sourceMappingURL=base-query-builder.service.d.ts.map