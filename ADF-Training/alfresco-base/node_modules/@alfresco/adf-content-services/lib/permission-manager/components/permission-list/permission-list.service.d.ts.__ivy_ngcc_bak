/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { ContentService, NodesApiService, NotificationService } from '@alfresco/adf-core';
import { Node, PermissionElement } from '@alfresco/js-api';
import { EventEmitter } from '@angular/core';
import { MatSlideToggleChange } from '@angular/material/slide-toggle';
import { BehaviorSubject, Observable, Subject } from 'rxjs';
import { RoleModel } from '../../models/role.model';
import { PermissionDisplayModel } from '../../models/permission.model';
import { NodePermissionsModel } from '../../models/member.model';
import { NodePermissionService } from '../../services/node-permission.service';
import { NodePermissionDialogService } from '../../services/node-permission-dialog.service';
export declare class PermissionListService {
    private nodeService;
    private nodePermissionService;
    private nodePermissionDialogService;
    private contentService;
    private notificationService;
    updated: EventEmitter<PermissionDisplayModel>;
    errored: EventEmitter<PermissionDisplayModel>;
    loading$: BehaviorSubject<boolean>;
    error$: Subject<boolean>;
    nodeWithRoles$: Subject<{
        node: Node;
        roles: RoleModel[];
    }>;
    data$: Observable<NodePermissionsModel>;
    private node;
    private roles;
    private SITE_MANAGER_ROLE;
    constructor(nodeService: NodesApiService, nodePermissionService: NodePermissionService, nodePermissionDialogService: NodePermissionDialogService, contentService: ContentService, notificationService: NotificationService);
    fetchPermission(nodeId: string): void;
    toggleInherited(change: MatSlideToggleChange): void;
    updateNodePermissionByDialog(): void;
    deletePermissions(permissions: PermissionElement[]): void;
    updateRole(role: string, permission: PermissionDisplayModel): void;
    bulkRoleUpdate(role: string): void;
    deletePermission(permission: PermissionDisplayModel): void;
    private buildUpdatedPermission;
    private reloadNode;
    getManagerAuthority(node: Node): string;
    updateReadOnlyPermission(node: Node, permissions: PermissionDisplayModel[]): PermissionDisplayModel[];
    canUpdateThePermission(node: Node, permission: PermissionElement): boolean;
    private isGroup;
}
