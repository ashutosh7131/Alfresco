{"version":3,"file":"node-permission.service.d.ts","sources":["node-permission.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { AlfrescoApiService, NodesApiService, SearchService, TranslationService, EcmUserModel } from '@alfresco/adf-core';\nimport { Group, GroupMemberPaging, GroupsApi, Node, PermissionElement } from '@alfresco/js-api';\nimport { Observable } from 'rxjs';\nimport { PermissionDisplayModel } from '../models/permission.model';\nimport { RoleModel } from '../models/role.model';\nexport declare class NodePermissionService {\n    private apiService;\n    private searchApiService;\n    private nodeService;\n    private translation;\n    _groupsApi: GroupsApi;\n    get groupsApi(): GroupsApi;\n    constructor(apiService: AlfrescoApiService, searchApiService: SearchService, nodeService: NodesApiService, translation: TranslationService);\n    getNodeRoles(node: Node): Observable<string[]>;\n    getNodePermissions(node: Node): PermissionDisplayModel[];\n    updatePermissionRole(node: Node, updatedPermissionRole: PermissionElement): Observable<Node>;\n    updateNodePermissions(nodeId: string, permissionList: PermissionElement[]): Observable<Node>;\n    updateLocallySetPermissions(node: Node, permissions: PermissionElement[]): Observable<Node>;\n    private getDuplicatedPermissions;\n    private isEqualPermission;\n    removePermission(node: Node, permissionToRemove: PermissionElement): Observable<Node>;\n    private getGroupMembersBySiteName;\n    getGroupMemberByGroupName(groupName: string, opts?: any): Observable<GroupMemberPaging>;\n    private formattedRoleName;\n    private buildRetrieveSiteQueryBody;\n    getLocalPermissions(node: Node): PermissionDisplayModel[];\n    getInheritedPermission(node: Node): PermissionDisplayModel[];\n    removePermissions(node: Node, permissions: PermissionElement[]): Observable<Node>;\n    updatePermissions(node: Node, permissions: PermissionElement[]): Observable<Node>;\n    getNodeWithRoles(nodeId: string): Observable<{\n        node: Node;\n        roles: RoleModel[];\n    }>;\n    transformNodeToUserPerson(node: Node): {\n        person: EcmUserModel;\n        group: Group;\n    };\n}\n"]}