/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { AlfrescoApiService, NodesApiService, SearchService, TranslationService, EcmUserModel } from '@alfresco/adf-core';
import { Group, GroupMemberPaging, GroupsApi, Node, PermissionElement } from '@alfresco/js-api';
import { Observable } from 'rxjs';
import { PermissionDisplayModel } from '../models/permission.model';
import { RoleModel } from '../models/role.model';
import * as ɵngcc0 from '@angular/core';
export declare class NodePermissionService {
    private apiService;
    private searchApiService;
    private nodeService;
    private translation;
    _groupsApi: GroupsApi;
    get groupsApi(): GroupsApi;
    constructor(apiService: AlfrescoApiService, searchApiService: SearchService, nodeService: NodesApiService, translation: TranslationService);
    getNodeRoles(node: Node): Observable<string[]>;
    getNodePermissions(node: Node): PermissionDisplayModel[];
    updatePermissionRole(node: Node, updatedPermissionRole: PermissionElement): Observable<Node>;
    updateNodePermissions(nodeId: string, permissionList: PermissionElement[]): Observable<Node>;
    updateLocallySetPermissions(node: Node, permissions: PermissionElement[]): Observable<Node>;
    private getDuplicatedPermissions;
    private isEqualPermission;
    removePermission(node: Node, permissionToRemove: PermissionElement): Observable<Node>;
    private getGroupMembersBySiteName;
    getGroupMemberByGroupName(groupName: string, opts?: any): Observable<GroupMemberPaging>;
    private formattedRoleName;
    private buildRetrieveSiteQueryBody;
    getLocalPermissions(node: Node): PermissionDisplayModel[];
    getInheritedPermission(node: Node): PermissionDisplayModel[];
    removePermissions(node: Node, permissions: PermissionElement[]): Observable<Node>;
    updatePermissions(node: Node, permissions: PermissionElement[]): Observable<Node>;
    getNodeWithRoles(nodeId: string): Observable<{
        node: Node;
        roles: RoleModel[];
    }>;
    transformNodeToUserPerson(node: Node): {
        person: EcmUserModel;
        group: Group;
    };
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NodePermissionService, never>;
}

//# sourceMappingURL=node-permission.service.d.ts.map