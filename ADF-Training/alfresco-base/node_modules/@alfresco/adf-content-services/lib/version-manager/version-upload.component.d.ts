/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { EventEmitter, OnDestroy, OnInit } from '@angular/core';
import { Node, Version } from '@alfresco/js-api';
import { ContentService, FileUploadErrorEvent, FileUploadEvent, UploadService } from '@alfresco/adf-core';
import { Subject } from 'rxjs';
import * as ɵngcc0 from '@angular/core';
export declare class VersionUploadComponent implements OnInit, OnDestroy {
    private contentService;
    private uploadService;
    semanticVersion: string;
    comment: string;
    uploadVersion: boolean;
    disabled: boolean;
    onDestroy$: Subject<unknown>;
    majorVersion: string;
    minorVersion: string;
    node: Node;
    newFileVersion: File;
    showUploadButton: boolean;
    showCancelButton: boolean;
    set currentVersion(version: Version);
    success: EventEmitter<any>;
    error: EventEmitter<FileUploadErrorEvent>;
    cancel: EventEmitter<any>;
    versionChanged: EventEmitter<boolean>;
    commentChanged: EventEmitter<string>;
    uploadStarted: EventEmitter<FileUploadEvent>;
    constructor(contentService: ContentService, uploadService: UploadService);
    ngOnInit(): void;
    canUpload(): boolean;
    isMajorVersion(): boolean;
    cancelUpload(): void;
    onVersionChange(): void;
    onCommentChange(): void;
    onSuccess(event: any): void;
    onError(event: FileUploadErrorEvent): void;
    ngOnDestroy(): void;
    getNextMinorVersion(version: string): string;
    getNextMajorVersion(version: string): string;
    private getParsedVersion;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<VersionUploadComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<VersionUploadComponent, "adf-version-upload", never, { "showUploadButton": "showUploadButton"; "showCancelButton": "showCancelButton"; "currentVersion": "currentVersion"; "node": "node"; "newFileVersion": "newFileVersion"; }, { "success": "success"; "error": "error"; "cancel": "cancel"; "versionChanged": "versionChanged"; "commentChanged": "commentChanged"; "uploadStarted": "uploadStarted"; }, never, never>;
}

//# sourceMappingURL=version-upload.component.d.ts.map