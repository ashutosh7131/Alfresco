{"version":3,"file":"custom-resources.service.d.ts","sources":["custom-resources.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { AlfrescoApiService, LogService, PaginationModel } from '@alfresco/adf-core';\nimport { NodePaging, DeletedNodesPaging, SharedLinkPaging, SiteMemberPaging, PeopleApi, SitesApi, SearchApi, FavoritesApi, SharedlinksApi, TrashcanApi, NodesApi } from '@alfresco/js-api';\nimport { Observable } from 'rxjs';\nexport declare class CustomResourcesService {\n    private apiService;\n    private logService;\n    private CREATE_PERMISSION;\n    _peopleApi: PeopleApi;\n    get peopleApi(): PeopleApi;\n    _sitesApi: SitesApi;\n    get sitesApi(): SitesApi;\n    _trashcanApi: TrashcanApi;\n    get trashcanApi(): TrashcanApi;\n    _searchApi: SearchApi;\n    get searchApi(): SearchApi;\n    _sharedLinksApi: SharedlinksApi;\n    get sharedLinksApi(): SharedlinksApi;\n    _favoritesApi: FavoritesApi;\n    get favoritesApi(): FavoritesApi;\n    _nodesApi: NodesApi;\n    get nodesApi(): NodesApi;\n    constructor(apiService: AlfrescoApiService, logService: LogService);\n    getRecentFiles(personId: string, pagination: PaginationModel, filters?: string[]): Observable<NodePaging>;\n    loadFavorites(pagination: PaginationModel, includeFields?: string[], where?: string): Observable<NodePaging>;\n    loadMemberSites(pagination: PaginationModel, where?: string): Observable<SiteMemberPaging>;\n    loadSites(pagination: PaginationModel, where?: string): Observable<NodePaging>;\n    loadTrashcan(pagination: PaginationModel, includeFields?: string[]): Observable<DeletedNodesPaging>;\n    loadSharedLinks(pagination: PaginationModel, includeFields?: string[], where?: string): Observable<SharedLinkPaging>;\n    isCustomSource(folderId: string): boolean;\n    isSupportedSource(folderId: string): boolean;\n    loadFolderByNodeId(nodeId: string, pagination: PaginationModel, includeFields?: string[], where?: string): any;\n    getCorrespondingNodeIds(nodeId: string, pagination?: PaginationModel): Observable<string[]>;\n    getIdFromEntry(node: any, nodeId: string): string;\n    hasCorrespondingNodeIds(nodeId: string): boolean;\n    private getIncludesFields;\n    private handleError;\n}\n"]}